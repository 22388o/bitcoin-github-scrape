[
  {
    "sha": "cf42c36e9963f9cf13704d8d74a9546f0db33d40",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZjQyYzM2ZTk5NjNmOWNmMTM3MDRkOGQ3NGE5NTQ2ZjBkYjMzZDQw",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-09-25T06:23:32Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-09-25T06:23:32Z"
      },
      "message": "Apply clang-format on crypto/* and compat/*",
      "tree": {
        "sha": "858c8076671647abe299b1ef0125b7476006f726",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/858c8076671647abe299b1ef0125b7476006f726"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cf42c36e9963f9cf13704d8d74a9546f0db33d40",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf42c36e9963f9cf13704d8d74a9546f0db33d40",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cf42c36e9963f9cf13704d8d74a9546f0db33d40",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf42c36e9963f9cf13704d8d74a9546f0db33d40/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ea69592a2f261dba37d551c0ac77e93ce00b37c3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea69592a2f261dba37d551c0ac77e93ce00b37c3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ea69592a2f261dba37d551c0ac77e93ce00b37c3"
      }
    ],
    "stats": {
      "total": 1047,
      "additions": 589,
      "deletions": 458
    },
    "files": [
      {
        "sha": "94c79e4b9713c0014654dff91256977a2e1c7344",
        "filename": "src/compat/glibc_compat.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cf42c36e9963f9cf13704d8d74a9546f0db33d40/src/compat/glibc_compat.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cf42c36e9963f9cf13704d8d74a9546f0db33d40/src/compat/glibc_compat.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat/glibc_compat.cpp?ref=cf42c36e9963f9cf13704d8d74a9546f0db33d40",
        "patch": "@@ -18,11 +18,11 @@ extern \"C\" void* memcpy(void* a, const void* b, size_t c)\n     return memmove(a, b, c);\n }\n \n-extern \"C\" void __chk_fail (void) __attribute__((__noreturn__));\n+extern \"C\" void __chk_fail(void) __attribute__((__noreturn__));\n extern \"C\" FDELT_TYPE __fdelt_warn(FDELT_TYPE a)\n {\n     if (a >= FD_SETSIZE)\n-        __chk_fail ();\n+        __chk_fail();\n     return a / __NFDBITS;\n }\n extern \"C\" FDELT_TYPE __fdelt_chk(FDELT_TYPE) __attribute__((weak, alias(\"__fdelt_warn\")));"
      },
      {
        "sha": "acc7809d773d3702e2894ebaded2022255832627",
        "filename": "src/compat/glibc_sanity.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cf42c36e9963f9cf13704d8d74a9546f0db33d40/src/compat/glibc_sanity.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cf42c36e9963f9cf13704d8d74a9546f0db33d40/src/compat/glibc_sanity.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat/glibc_sanity.cpp?ref=cf42c36e9963f9cf13704d8d74a9546f0db33d40",
        "patch": "@@ -14,10 +14,11 @@\n extern \"C\" void* memcpy(void* a, const void* b, size_t c);\n void* memcpy_int(void* a, const void* b, size_t c)\n {\n-    return memcpy(a,b,c);\n+    return memcpy(a, b, c);\n }\n \n-namespace {\n+namespace\n+{\n // trigger: Use the memcpy_int wrapper which calls our internal memcpy.\n //   A direct call to memcpy may be optimized away by the compiler.\n // test: Fill an array with a sequence of integers. memcpy to a new empty array.\n@@ -31,11 +32,10 @@ bool sanity_test_memcpy()\n     for (unsigned int i = 0; i != T; ++i)\n         memcpy_test[i] = i;\n \n-    memcpy_int(memcpy_verify,memcpy_test,sizeof(memcpy_test));\n+    memcpy_int(memcpy_verify, memcpy_test, sizeof(memcpy_test));\n \n-    for (unsigned int i = 0; i != T; ++i)\n-    {\n-        if(memcpy_verify[i] != i)\n+    for (unsigned int i = 0; i != T; ++i) {\n+        if (memcpy_verify[i] != i)\n             return false;\n     }\n     return true;\n@@ -51,7 +51,7 @@ bool sanity_test_fdelt()\n     fd_set fds;\n     FD_ZERO(&fds);\n     FD_SET(0, &fds);\n-    return FD_ISSET(0,&fds);\n+    return FD_ISSET(0, &fds);\n }\n #endif\n "
      },
      {
        "sha": "41d8458cb272892343f5a9caba50e79b23641d6c",
        "filename": "src/compat/glibcxx_compat.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 10,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cf42c36e9963f9cf13704d8d74a9546f0db33d40/src/compat/glibcxx_compat.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cf42c36e9963f9cf13704d8d74a9546f0db33d40/src/compat/glibcxx_compat.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat/glibcxx_compat.cpp?ref=cf42c36e9963f9cf13704d8d74a9546f0db33d40",
        "patch": "@@ -11,8 +11,8 @@\n #define _GLIBCXX_USE_NOEXCEPT throw()\n #endif\n \n-namespace std {\n-\n+namespace std\n+{\n const char* bad_exception::what() const throw()\n {\n     return \"std::bad_exception\";\n@@ -30,9 +30,8 @@ const char* bad_alloc::what() const throw()\n \n namespace __detail\n {\n-struct _List_node_base\n-{\n-    void _M_hook(std::__detail::_List_node_base* const __position) throw () __attribute__((used))\n+struct _List_node_base {\n+    void _M_hook(std::__detail::_List_node_base* const __position) throw() __attribute__((used))\n     {\n         _M_next = __position;\n         _M_prev = __position->_M_prev;\n@@ -62,9 +61,9 @@ template ostream& __ostream_insert(ostream&, const char*, streamsize);\n template istream& istream::_M_extract(long&);\n template istream& istream::_M_extract(unsigned short&);\n \n-out_of_range::~out_of_range() _GLIBCXX_USE_NOEXCEPT { }\n+out_of_range::~out_of_range() _GLIBCXX_USE_NOEXCEPT {}\n \n-length_error::~length_error() _GLIBCXX_USE_NOEXCEPT { }\n+length_error::~length_error() _GLIBCXX_USE_NOEXCEPT {}\n \n // Used with permission.\n // See: https://github.com/madlib/madlib/commit/c3db418c0d34d6813608f2137fef1012ce03043d\n@@ -85,11 +84,11 @@ void ctype<char>::_M_widen_init() const\n         }\n }\n \n-void  __throw_out_of_range_fmt(const char*, ...) __attribute__((__noreturn__));\n-void  __throw_out_of_range_fmt(const char* err, ...)\n+void __throw_out_of_range_fmt(const char*, ...) __attribute__((__noreturn__));\n+void __throw_out_of_range_fmt(const char* err, ...)\n {\n     // Safe and over-simplified version. Ignore the format and print it as-is.\n     __throw_out_of_range(err);\n }\n \n-}// namespace std\n+} // namespace std"
      },
      {
        "sha": "9b1fefd448188b20519321c4dc63373abdc78f02",
        "filename": "src/compat/glibcxx_sanity.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 14,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cf42c36e9963f9cf13704d8d74a9546f0db33d40/src/compat/glibcxx_sanity.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cf42c36e9963f9cf13704d8d74a9546f0db33d40/src/compat/glibcxx_sanity.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat/glibcxx_sanity.cpp?ref=cf42c36e9963f9cf13704d8d74a9546f0db33d40",
        "patch": "@@ -6,15 +6,15 @@\n #include <locale>\n #include <stdexcept>\n \n-namespace{\n-\n+namespace\n+{\n // trigger: use ctype<char>::widen to trigger ctype<char>::_M_widen_init().\n // test: convert a char from narrow to wide and back. Verify that the result\n //   matches the original.\n bool sanity_test_widen(char testchar)\n {\n-    const std::ctype<char>& test(std::use_facet< std::ctype<char> >(std::locale()));\n-    return test.narrow(test.widen(testchar),'b') == testchar;\n+    const std::ctype<char>& test(std::use_facet<std::ctype<char> >(std::locale()));\n+    return test.narrow(test.widen(testchar), 'b') == testchar;\n }\n \n // trigger: use list::push_back and list::pop_back to trigger _M_hook and\n@@ -25,14 +25,13 @@ bool sanity_test_list(unsigned int size)\n {\n     std::list<unsigned int> test;\n     for (unsigned int i = 0; i != size; ++i)\n-        test.push_back(i+1);\n+        test.push_back(i + 1);\n \n     if (test.size() != size)\n         return false;\n \n-    while (!test.empty())\n-    {\n-        if(test.back() != test.size())\n+    while (!test.empty()) {\n+        if (test.back() != test.size())\n             return false;\n         test.pop_back();\n     }\n@@ -47,15 +46,12 @@ bool sanity_test_list(unsigned int size)\n bool sanity_test_range_fmt()\n {\n     std::string test;\n-    try\n-    {\n+    try {\n         test.at(1);\n-    }\n-    catch (const std::out_of_range&)\n-    {\n+    } catch (const std::out_of_range&) {\n         return true;\n+    } catch (...) {\n     }\n-    catch (...){}\n     return false;\n }\n "
      },
      {
        "sha": "7c3d0a135b19a60cc4f96717c8ab1fe475f1270e",
        "filename": "src/crypto/common.h",
        "status": "modified",
        "additions": 40,
        "deletions": 15,
        "changes": 55,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cf42c36e9963f9cf13704d8d74a9546f0db33d40/src/crypto/common.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cf42c36e9963f9cf13704d8d74a9546f0db33d40/src/crypto/common.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/common.h?ref=cf42c36e9963f9cf13704d8d74a9546f0db33d40",
        "patch": "@@ -13,7 +13,8 @@\n #include <endian.h>\n #endif\n \n-uint32_t static inline ReadLE32(const unsigned char *ptr) {\n+uint32_t static inline ReadLE32(const unsigned char* ptr)\n+{\n #if HAVE_DECL_LE32TOH == 1\n     return le32toh(*((uint32_t*)ptr));\n #elif !defined(WORDS_BIGENDIAN)\n@@ -23,8 +24,8 @@ uint32_t static inline ReadLE32(const unsigned char *ptr) {\n #endif\n }\n \n-uint64_t static inline ReadLE64(const unsigned char *ptr) {\n-\n+uint64_t static inline ReadLE64(const unsigned char* ptr)\n+{\n #if HAVE_DECL_LE64TOH == 1\n     return le64toh(*((uint64_t*)ptr));\n #elif !defined(WORDS_BIGENDIAN)\n@@ -35,36 +36,49 @@ uint64_t static inline ReadLE64(const unsigned char *ptr) {\n #endif\n }\n \n-void static inline WriteLE32(unsigned char *ptr, uint32_t x) {\n+void static inline WriteLE32(unsigned char* ptr, uint32_t x)\n+{\n #if HAVE_DECL_HTOLE32 == 1\n     *((uint32_t*)ptr) = htole32(x);\n #elif !defined(WORDS_BIGENDIAN)\n     *((uint32_t*)ptr) = x;\n #else\n-    ptr[3] = x >> 24; ptr[2] = x >> 16; ptr[1] = x >> 8; ptr[0] = x;\n+    ptr[3] = x >> 24;\n+    ptr[2] = x >> 16;\n+    ptr[1] = x >> 8;\n+    ptr[0] = x;\n #endif\n }\n \n-void static inline WriteLE64(unsigned char *ptr, uint64_t x) {\n+void static inline WriteLE64(unsigned char* ptr, uint64_t x)\n+{\n #if HAVE_DECL_HTOLE64 == 1\n     *((uint64_t*)ptr) = htole64(x);\n #elif !defined(WORDS_BIGENDIAN)\n     *((uint64_t*)ptr) = x;\n #else\n-    ptr[7] = x >> 56; ptr[6] = x >> 48; ptr[5] = x >> 40; ptr[4] = x >> 32;\n-    ptr[3] = x >> 24; ptr[2] = x >> 16; ptr[1] = x >> 8; ptr[0] = x;\n+    ptr[7] = x >> 56;\n+    ptr[6] = x >> 48;\n+    ptr[5] = x >> 40;\n+    ptr[4] = x >> 32;\n+    ptr[3] = x >> 24;\n+    ptr[2] = x >> 16;\n+    ptr[1] = x >> 8;\n+    ptr[0] = x;\n #endif\n }\n \n-uint32_t static inline ReadBE32(const unsigned char *ptr) {\n+uint32_t static inline ReadBE32(const unsigned char* ptr)\n+{\n #if HAVE_DECL_BE32TOH == 1\n     return be32toh(*((uint32_t*)ptr));\n #else\n     return ((uint32_t)ptr[0] << 24 | (uint32_t)ptr[1] << 16 | (uint32_t)ptr[2] << 8 | (uint32_t)ptr[3]);\n #endif\n }\n \n-uint64_t static inline ReadBE64(const unsigned char *ptr) {\n+uint64_t static inline ReadBE64(const unsigned char* ptr)\n+{\n #if HAVE_DECL_BE64TOH == 1\n     return be64toh(*((uint64_t*)ptr));\n #else\n@@ -73,20 +87,31 @@ uint64_t static inline ReadBE64(const unsigned char *ptr) {\n #endif\n }\n \n-void static inline WriteBE32(unsigned char *ptr, uint32_t x) {\n+void static inline WriteBE32(unsigned char* ptr, uint32_t x)\n+{\n #if HAVE_DECL_HTOBE32 == 1\n     *((uint32_t*)ptr) = htobe32(x);\n #else\n-    ptr[0] = x >> 24; ptr[1] = x >> 16; ptr[2] = x >> 8; ptr[3] = x;\n+    ptr[0] = x >> 24;\n+    ptr[1] = x >> 16;\n+    ptr[2] = x >> 8;\n+    ptr[3] = x;\n #endif\n }\n \n-void static inline WriteBE64(unsigned char *ptr, uint64_t x) {\n+void static inline WriteBE64(unsigned char* ptr, uint64_t x)\n+{\n #if HAVE_DECL_HTOBE64 == 1\n     *((uint64_t*)ptr) = htobe64(x);\n #else\n-    ptr[0] = x >> 56; ptr[1] = x >> 48; ptr[2] = x >> 40; ptr[3] = x >> 32;\n-    ptr[4] = x >> 24; ptr[5] = x >> 16; ptr[6] = x >> 8; ptr[7] = x;\n+    ptr[0] = x >> 56;\n+    ptr[1] = x >> 48;\n+    ptr[2] = x >> 40;\n+    ptr[3] = x >> 32;\n+    ptr[4] = x >> 24;\n+    ptr[5] = x >> 16;\n+    ptr[6] = x >> 8;\n+    ptr[7] = x;\n #endif\n }\n "
      },
      {
        "sha": "90b196ba32c76f9cd3f561ef8c72ea23fcff434f",
        "filename": "src/crypto/ripemd160.cpp",
        "status": "modified",
        "additions": 205,
        "deletions": 118,
        "changes": 323,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cf42c36e9963f9cf13704d8d74a9546f0db33d40/src/crypto/ripemd160.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cf42c36e9963f9cf13704d8d74a9546f0db33d40/src/crypto/ripemd160.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/ripemd160.cpp?ref=cf42c36e9963f9cf13704d8d74a9546f0db33d40",
        "patch": "@@ -9,159 +9,244 @@\n #include <string.h>\n \n // Internal implementation code.\n-namespace {\n-\n+namespace\n+{\n /// Internal RIPEMD-160 implementation.\n-namespace ripemd160 {\n-\n+namespace ripemd160\n+{\n uint32_t inline f1(uint32_t x, uint32_t y, uint32_t z) { return x ^ y ^ z; }\n uint32_t inline f2(uint32_t x, uint32_t y, uint32_t z) { return (x & y) | (~x & z); }\n uint32_t inline f3(uint32_t x, uint32_t y, uint32_t z) { return (x | ~y) ^ z; }\n uint32_t inline f4(uint32_t x, uint32_t y, uint32_t z) { return (x & z) | (y & ~z); }\n uint32_t inline f5(uint32_t x, uint32_t y, uint32_t z) { return x ^ (y | ~z); }\n \n /** Initialize RIPEMD-160 state. */\n-void inline Initialize(uint32_t *s) {\n+void inline Initialize(uint32_t* s)\n+{\n     s[0] = 0x67452301ul;\n     s[1] = 0xEFCDAB89ul;\n     s[2] = 0x98BADCFEul;\n     s[3] = 0x10325476ul;\n     s[4] = 0xC3D2E1F0ul;\n }\n \n-uint32_t inline rol(uint32_t x, int i) { return (x << i) | (x >> (32-i)); }\n+uint32_t inline rol(uint32_t x, int i) { return (x << i) | (x >> (32 - i)); }\n \n-void inline Round(uint32_t &a, uint32_t b, uint32_t &c, uint32_t d, uint32_t e, uint32_t f, uint32_t x, uint32_t k, int r) {\n+void inline Round(uint32_t& a, uint32_t b, uint32_t& c, uint32_t d, uint32_t e, uint32_t f, uint32_t x, uint32_t k, int r)\n+{\n     a = rol(a + f + x + k, r) + e;\n     c = rol(c, 10);\n }\n \n-void inline R11(uint32_t &a, uint32_t b, uint32_t &c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f1(b, c, d), x,            0, r); }\n-void inline R21(uint32_t &a, uint32_t b, uint32_t &c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f2(b, c, d), x, 0x5A827999ul, r); }\n-void inline R31(uint32_t &a, uint32_t b, uint32_t &c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f3(b, c, d), x, 0x6ED9EBA1ul, r); }\n-void inline R41(uint32_t &a, uint32_t b, uint32_t &c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f4(b, c, d), x, 0x8F1BBCDCul, r); }\n-void inline R51(uint32_t &a, uint32_t b, uint32_t &c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f5(b, c, d), x, 0xA953FD4Eul, r); }\n+void inline R11(uint32_t& a, uint32_t b, uint32_t& c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f1(b, c, d), x, 0, r); }\n+void inline R21(uint32_t& a, uint32_t b, uint32_t& c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f2(b, c, d), x, 0x5A827999ul, r); }\n+void inline R31(uint32_t& a, uint32_t b, uint32_t& c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f3(b, c, d), x, 0x6ED9EBA1ul, r); }\n+void inline R41(uint32_t& a, uint32_t b, uint32_t& c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f4(b, c, d), x, 0x8F1BBCDCul, r); }\n+void inline R51(uint32_t& a, uint32_t b, uint32_t& c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f5(b, c, d), x, 0xA953FD4Eul, r); }\n \n-void inline R12(uint32_t &a, uint32_t b, uint32_t &c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f5(b, c, d), x, 0x50A28BE6ul, r); }\n-void inline R22(uint32_t &a, uint32_t b, uint32_t &c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f4(b, c, d), x, 0x5C4DD124ul, r); }\n-void inline R32(uint32_t &a, uint32_t b, uint32_t &c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f3(b, c, d), x, 0x6D703EF3ul, r); }\n-void inline R42(uint32_t &a, uint32_t b, uint32_t &c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f2(b, c, d), x, 0x7A6D76E9ul, r); }\n-void inline R52(uint32_t &a, uint32_t b, uint32_t &c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f1(b, c, d), x,            0, r); }\n+void inline R12(uint32_t& a, uint32_t b, uint32_t& c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f5(b, c, d), x, 0x50A28BE6ul, r); }\n+void inline R22(uint32_t& a, uint32_t b, uint32_t& c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f4(b, c, d), x, 0x5C4DD124ul, r); }\n+void inline R32(uint32_t& a, uint32_t b, uint32_t& c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f3(b, c, d), x, 0x6D703EF3ul, r); }\n+void inline R42(uint32_t& a, uint32_t b, uint32_t& c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f2(b, c, d), x, 0x7A6D76E9ul, r); }\n+void inline R52(uint32_t& a, uint32_t b, uint32_t& c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f1(b, c, d), x, 0, r); }\n \n /** Perform a RIPEMD-160 transformation, processing a 64-byte chunk. */\n-void Transform(uint32_t *s, const unsigned char *chunk) {\n+void Transform(uint32_t* s, const unsigned char* chunk)\n+{\n     uint32_t a1 = s[0], b1 = s[1], c1 = s[2], d1 = s[3], e1 = s[4];\n-    uint32_t a2 = a1  , b2 = b1  , c2 = c1  , d2 = d1  , e2 = e1  ;\n-    uint32_t w0  = ReadLE32(chunk +  0), w1  = ReadLE32(chunk +  4), w2  = ReadLE32(chunk +  8), w3  = ReadLE32(chunk + 12);\n-    uint32_t w4  = ReadLE32(chunk + 16), w5  = ReadLE32(chunk + 20), w6  = ReadLE32(chunk + 24), w7  = ReadLE32(chunk + 28);\n-    uint32_t w8  = ReadLE32(chunk + 32), w9  = ReadLE32(chunk + 36), w10 = ReadLE32(chunk + 40), w11 = ReadLE32(chunk + 44);\n+    uint32_t a2 = a1, b2 = b1, c2 = c1, d2 = d1, e2 = e1;\n+    uint32_t w0 = ReadLE32(chunk + 0), w1 = ReadLE32(chunk + 4), w2 = ReadLE32(chunk + 8), w3 = ReadLE32(chunk + 12);\n+    uint32_t w4 = ReadLE32(chunk + 16), w5 = ReadLE32(chunk + 20), w6 = ReadLE32(chunk + 24), w7 = ReadLE32(chunk + 28);\n+    uint32_t w8 = ReadLE32(chunk + 32), w9 = ReadLE32(chunk + 36), w10 = ReadLE32(chunk + 40), w11 = ReadLE32(chunk + 44);\n     uint32_t w12 = ReadLE32(chunk + 48), w13 = ReadLE32(chunk + 52), w14 = ReadLE32(chunk + 56), w15 = ReadLE32(chunk + 60);\n \n-    R11(a1, b1, c1, d1, e1, w0 , 11); R12(a2, b2, c2, d2, e2, w5 ,  8);\n-    R11(e1, a1, b1, c1, d1, w1 , 14); R12(e2, a2, b2, c2, d2, w14,  9);\n-    R11(d1, e1, a1, b1, c1, w2 , 15); R12(d2, e2, a2, b2, c2, w7 ,  9);\n-    R11(c1, d1, e1, a1, b1, w3 , 12); R12(c2, d2, e2, a2, b2, w0 , 11);\n-    R11(b1, c1, d1, e1, a1, w4 ,  5); R12(b2, c2, d2, e2, a2, w9 , 13);\n-    R11(a1, b1, c1, d1, e1, w5 ,  8); R12(a2, b2, c2, d2, e2, w2 , 15);\n-    R11(e1, a1, b1, c1, d1, w6 ,  7); R12(e2, a2, b2, c2, d2, w11, 15);\n-    R11(d1, e1, a1, b1, c1, w7 ,  9); R12(d2, e2, a2, b2, c2, w4 ,  5);\n-    R11(c1, d1, e1, a1, b1, w8 , 11); R12(c2, d2, e2, a2, b2, w13,  7);\n-    R11(b1, c1, d1, e1, a1, w9 , 13); R12(b2, c2, d2, e2, a2, w6 ,  7);\n-    R11(a1, b1, c1, d1, e1, w10, 14); R12(a2, b2, c2, d2, e2, w15,  8);\n-    R11(e1, a1, b1, c1, d1, w11, 15); R12(e2, a2, b2, c2, d2, w8 , 11);\n-    R11(d1, e1, a1, b1, c1, w12,  6); R12(d2, e2, a2, b2, c2, w1 , 14);\n-    R11(c1, d1, e1, a1, b1, w13,  7); R12(c2, d2, e2, a2, b2, w10, 14);\n-    R11(b1, c1, d1, e1, a1, w14,  9); R12(b2, c2, d2, e2, a2, w3 , 12);\n-    R11(a1, b1, c1, d1, e1, w15,  8); R12(a2, b2, c2, d2, e2, w12,  6);\n-\n-    R21(e1, a1, b1, c1, d1, w7 ,  7); R22(e2, a2, b2, c2, d2, w6 ,  9);\n-    R21(d1, e1, a1, b1, c1, w4 ,  6); R22(d2, e2, a2, b2, c2, w11, 13);\n-    R21(c1, d1, e1, a1, b1, w13,  8); R22(c2, d2, e2, a2, b2, w3 , 15);\n-    R21(b1, c1, d1, e1, a1, w1 , 13); R22(b2, c2, d2, e2, a2, w7 ,  7);\n-    R21(a1, b1, c1, d1, e1, w10, 11); R22(a2, b2, c2, d2, e2, w0 , 12);\n-    R21(e1, a1, b1, c1, d1, w6 ,  9); R22(e2, a2, b2, c2, d2, w13,  8);\n-    R21(d1, e1, a1, b1, c1, w15,  7); R22(d2, e2, a2, b2, c2, w5 ,  9);\n-    R21(c1, d1, e1, a1, b1, w3 , 15); R22(c2, d2, e2, a2, b2, w10, 11);\n-    R21(b1, c1, d1, e1, a1, w12,  7); R22(b2, c2, d2, e2, a2, w14,  7);\n-    R21(a1, b1, c1, d1, e1, w0 , 12); R22(a2, b2, c2, d2, e2, w15,  7);\n-    R21(e1, a1, b1, c1, d1, w9 , 15); R22(e2, a2, b2, c2, d2, w8 , 12);\n-    R21(d1, e1, a1, b1, c1, w5 ,  9); R22(d2, e2, a2, b2, c2, w12,  7);\n-    R21(c1, d1, e1, a1, b1, w2 , 11); R22(c2, d2, e2, a2, b2, w4 ,  6);\n-    R21(b1, c1, d1, e1, a1, w14,  7); R22(b2, c2, d2, e2, a2, w9 , 15);\n-    R21(a1, b1, c1, d1, e1, w11, 13); R22(a2, b2, c2, d2, e2, w1 , 13);\n-    R21(e1, a1, b1, c1, d1, w8 , 12); R22(e2, a2, b2, c2, d2, w2 , 11);\n-\n-    R31(d1, e1, a1, b1, c1, w3 , 11); R32(d2, e2, a2, b2, c2, w15,  9);\n-    R31(c1, d1, e1, a1, b1, w10, 13); R32(c2, d2, e2, a2, b2, w5 ,  7);\n-    R31(b1, c1, d1, e1, a1, w14,  6); R32(b2, c2, d2, e2, a2, w1 , 15);\n-    R31(a1, b1, c1, d1, e1, w4 ,  7); R32(a2, b2, c2, d2, e2, w3 , 11);\n-    R31(e1, a1, b1, c1, d1, w9 , 14); R32(e2, a2, b2, c2, d2, w7 ,  8);\n-    R31(d1, e1, a1, b1, c1, w15,  9); R32(d2, e2, a2, b2, c2, w14,  6);\n-    R31(c1, d1, e1, a1, b1, w8 , 13); R32(c2, d2, e2, a2, b2, w6 ,  6);\n-    R31(b1, c1, d1, e1, a1, w1 , 15); R32(b2, c2, d2, e2, a2, w9 , 14);\n-    R31(a1, b1, c1, d1, e1, w2 , 14); R32(a2, b2, c2, d2, e2, w11, 12);\n-    R31(e1, a1, b1, c1, d1, w7 ,  8); R32(e2, a2, b2, c2, d2, w8 , 13);\n-    R31(d1, e1, a1, b1, c1, w0 , 13); R32(d2, e2, a2, b2, c2, w12,  5);\n-    R31(c1, d1, e1, a1, b1, w6 ,  6); R32(c2, d2, e2, a2, b2, w2 , 14);\n-    R31(b1, c1, d1, e1, a1, w13,  5); R32(b2, c2, d2, e2, a2, w10, 13);\n-    R31(a1, b1, c1, d1, e1, w11, 12); R32(a2, b2, c2, d2, e2, w0 , 13);\n-    R31(e1, a1, b1, c1, d1, w5 ,  7); R32(e2, a2, b2, c2, d2, w4 ,  7);\n-    R31(d1, e1, a1, b1, c1, w12,  5); R32(d2, e2, a2, b2, c2, w13,  5);\n-\n-    R41(c1, d1, e1, a1, b1, w1 , 11); R42(c2, d2, e2, a2, b2, w8 , 15);\n-    R41(b1, c1, d1, e1, a1, w9 , 12); R42(b2, c2, d2, e2, a2, w6 ,  5);\n-    R41(a1, b1, c1, d1, e1, w11, 14); R42(a2, b2, c2, d2, e2, w4 ,  8);\n-    R41(e1, a1, b1, c1, d1, w10, 15); R42(e2, a2, b2, c2, d2, w1 , 11);\n-    R41(d1, e1, a1, b1, c1, w0 , 14); R42(d2, e2, a2, b2, c2, w3 , 14);\n-    R41(c1, d1, e1, a1, b1, w8 , 15); R42(c2, d2, e2, a2, b2, w11, 14);\n-    R41(b1, c1, d1, e1, a1, w12,  9); R42(b2, c2, d2, e2, a2, w15,  6);\n-    R41(a1, b1, c1, d1, e1, w4 ,  8); R42(a2, b2, c2, d2, e2, w0 , 14);\n-    R41(e1, a1, b1, c1, d1, w13,  9); R42(e2, a2, b2, c2, d2, w5 ,  6);\n-    R41(d1, e1, a1, b1, c1, w3 , 14); R42(d2, e2, a2, b2, c2, w12,  9);\n-    R41(c1, d1, e1, a1, b1, w7 ,  5); R42(c2, d2, e2, a2, b2, w2 , 12);\n-    R41(b1, c1, d1, e1, a1, w15,  6); R42(b2, c2, d2, e2, a2, w13,  9);\n-    R41(a1, b1, c1, d1, e1, w14,  8); R42(a2, b2, c2, d2, e2, w9 , 12);\n-    R41(e1, a1, b1, c1, d1, w5 ,  6); R42(e2, a2, b2, c2, d2, w7 ,  5);\n-    R41(d1, e1, a1, b1, c1, w6 ,  5); R42(d2, e2, a2, b2, c2, w10, 15);\n-    R41(c1, d1, e1, a1, b1, w2 , 12); R42(c2, d2, e2, a2, b2, w14,  8);\n-\n-    R51(b1, c1, d1, e1, a1, w4 ,  9); R52(b2, c2, d2, e2, a2, w12,  8);\n-    R51(a1, b1, c1, d1, e1, w0 , 15); R52(a2, b2, c2, d2, e2, w15,  5);\n-    R51(e1, a1, b1, c1, d1, w5 ,  5); R52(e2, a2, b2, c2, d2, w10, 12);\n-    R51(d1, e1, a1, b1, c1, w9 , 11); R52(d2, e2, a2, b2, c2, w4 ,  9);\n-    R51(c1, d1, e1, a1, b1, w7 ,  6); R52(c2, d2, e2, a2, b2, w1 , 12);\n-    R51(b1, c1, d1, e1, a1, w12,  8); R52(b2, c2, d2, e2, a2, w5 ,  5);\n-    R51(a1, b1, c1, d1, e1, w2 , 13); R52(a2, b2, c2, d2, e2, w8 , 14);\n-    R51(e1, a1, b1, c1, d1, w10, 12); R52(e2, a2, b2, c2, d2, w7 ,  6);\n-    R51(d1, e1, a1, b1, c1, w14,  5); R52(d2, e2, a2, b2, c2, w6 ,  8);\n-    R51(c1, d1, e1, a1, b1, w1 , 12); R52(c2, d2, e2, a2, b2, w2 , 13);\n-    R51(b1, c1, d1, e1, a1, w3 , 13); R52(b2, c2, d2, e2, a2, w13,  6);\n-    R51(a1, b1, c1, d1, e1, w8 , 14); R52(a2, b2, c2, d2, e2, w14,  5);\n-    R51(e1, a1, b1, c1, d1, w11, 11); R52(e2, a2, b2, c2, d2, w0 , 15);\n-    R51(d1, e1, a1, b1, c1, w6 ,  8); R52(d2, e2, a2, b2, c2, w3 , 13);\n-    R51(c1, d1, e1, a1, b1, w15,  5); R52(c2, d2, e2, a2, b2, w9 , 11);\n-    R51(b1, c1, d1, e1, a1, w13,  6); R52(b2, c2, d2, e2, a2, w11, 11);\n+    R11(a1, b1, c1, d1, e1, w0, 11);\n+    R12(a2, b2, c2, d2, e2, w5, 8);\n+    R11(e1, a1, b1, c1, d1, w1, 14);\n+    R12(e2, a2, b2, c2, d2, w14, 9);\n+    R11(d1, e1, a1, b1, c1, w2, 15);\n+    R12(d2, e2, a2, b2, c2, w7, 9);\n+    R11(c1, d1, e1, a1, b1, w3, 12);\n+    R12(c2, d2, e2, a2, b2, w0, 11);\n+    R11(b1, c1, d1, e1, a1, w4, 5);\n+    R12(b2, c2, d2, e2, a2, w9, 13);\n+    R11(a1, b1, c1, d1, e1, w5, 8);\n+    R12(a2, b2, c2, d2, e2, w2, 15);\n+    R11(e1, a1, b1, c1, d1, w6, 7);\n+    R12(e2, a2, b2, c2, d2, w11, 15);\n+    R11(d1, e1, a1, b1, c1, w7, 9);\n+    R12(d2, e2, a2, b2, c2, w4, 5);\n+    R11(c1, d1, e1, a1, b1, w8, 11);\n+    R12(c2, d2, e2, a2, b2, w13, 7);\n+    R11(b1, c1, d1, e1, a1, w9, 13);\n+    R12(b2, c2, d2, e2, a2, w6, 7);\n+    R11(a1, b1, c1, d1, e1, w10, 14);\n+    R12(a2, b2, c2, d2, e2, w15, 8);\n+    R11(e1, a1, b1, c1, d1, w11, 15);\n+    R12(e2, a2, b2, c2, d2, w8, 11);\n+    R11(d1, e1, a1, b1, c1, w12, 6);\n+    R12(d2, e2, a2, b2, c2, w1, 14);\n+    R11(c1, d1, e1, a1, b1, w13, 7);\n+    R12(c2, d2, e2, a2, b2, w10, 14);\n+    R11(b1, c1, d1, e1, a1, w14, 9);\n+    R12(b2, c2, d2, e2, a2, w3, 12);\n+    R11(a1, b1, c1, d1, e1, w15, 8);\n+    R12(a2, b2, c2, d2, e2, w12, 6);\n+\n+    R21(e1, a1, b1, c1, d1, w7, 7);\n+    R22(e2, a2, b2, c2, d2, w6, 9);\n+    R21(d1, e1, a1, b1, c1, w4, 6);\n+    R22(d2, e2, a2, b2, c2, w11, 13);\n+    R21(c1, d1, e1, a1, b1, w13, 8);\n+    R22(c2, d2, e2, a2, b2, w3, 15);\n+    R21(b1, c1, d1, e1, a1, w1, 13);\n+    R22(b2, c2, d2, e2, a2, w7, 7);\n+    R21(a1, b1, c1, d1, e1, w10, 11);\n+    R22(a2, b2, c2, d2, e2, w0, 12);\n+    R21(e1, a1, b1, c1, d1, w6, 9);\n+    R22(e2, a2, b2, c2, d2, w13, 8);\n+    R21(d1, e1, a1, b1, c1, w15, 7);\n+    R22(d2, e2, a2, b2, c2, w5, 9);\n+    R21(c1, d1, e1, a1, b1, w3, 15);\n+    R22(c2, d2, e2, a2, b2, w10, 11);\n+    R21(b1, c1, d1, e1, a1, w12, 7);\n+    R22(b2, c2, d2, e2, a2, w14, 7);\n+    R21(a1, b1, c1, d1, e1, w0, 12);\n+    R22(a2, b2, c2, d2, e2, w15, 7);\n+    R21(e1, a1, b1, c1, d1, w9, 15);\n+    R22(e2, a2, b2, c2, d2, w8, 12);\n+    R21(d1, e1, a1, b1, c1, w5, 9);\n+    R22(d2, e2, a2, b2, c2, w12, 7);\n+    R21(c1, d1, e1, a1, b1, w2, 11);\n+    R22(c2, d2, e2, a2, b2, w4, 6);\n+    R21(b1, c1, d1, e1, a1, w14, 7);\n+    R22(b2, c2, d2, e2, a2, w9, 15);\n+    R21(a1, b1, c1, d1, e1, w11, 13);\n+    R22(a2, b2, c2, d2, e2, w1, 13);\n+    R21(e1, a1, b1, c1, d1, w8, 12);\n+    R22(e2, a2, b2, c2, d2, w2, 11);\n+\n+    R31(d1, e1, a1, b1, c1, w3, 11);\n+    R32(d2, e2, a2, b2, c2, w15, 9);\n+    R31(c1, d1, e1, a1, b1, w10, 13);\n+    R32(c2, d2, e2, a2, b2, w5, 7);\n+    R31(b1, c1, d1, e1, a1, w14, 6);\n+    R32(b2, c2, d2, e2, a2, w1, 15);\n+    R31(a1, b1, c1, d1, e1, w4, 7);\n+    R32(a2, b2, c2, d2, e2, w3, 11);\n+    R31(e1, a1, b1, c1, d1, w9, 14);\n+    R32(e2, a2, b2, c2, d2, w7, 8);\n+    R31(d1, e1, a1, b1, c1, w15, 9);\n+    R32(d2, e2, a2, b2, c2, w14, 6);\n+    R31(c1, d1, e1, a1, b1, w8, 13);\n+    R32(c2, d2, e2, a2, b2, w6, 6);\n+    R31(b1, c1, d1, e1, a1, w1, 15);\n+    R32(b2, c2, d2, e2, a2, w9, 14);\n+    R31(a1, b1, c1, d1, e1, w2, 14);\n+    R32(a2, b2, c2, d2, e2, w11, 12);\n+    R31(e1, a1, b1, c1, d1, w7, 8);\n+    R32(e2, a2, b2, c2, d2, w8, 13);\n+    R31(d1, e1, a1, b1, c1, w0, 13);\n+    R32(d2, e2, a2, b2, c2, w12, 5);\n+    R31(c1, d1, e1, a1, b1, w6, 6);\n+    R32(c2, d2, e2, a2, b2, w2, 14);\n+    R31(b1, c1, d1, e1, a1, w13, 5);\n+    R32(b2, c2, d2, e2, a2, w10, 13);\n+    R31(a1, b1, c1, d1, e1, w11, 12);\n+    R32(a2, b2, c2, d2, e2, w0, 13);\n+    R31(e1, a1, b1, c1, d1, w5, 7);\n+    R32(e2, a2, b2, c2, d2, w4, 7);\n+    R31(d1, e1, a1, b1, c1, w12, 5);\n+    R32(d2, e2, a2, b2, c2, w13, 5);\n+\n+    R41(c1, d1, e1, a1, b1, w1, 11);\n+    R42(c2, d2, e2, a2, b2, w8, 15);\n+    R41(b1, c1, d1, e1, a1, w9, 12);\n+    R42(b2, c2, d2, e2, a2, w6, 5);\n+    R41(a1, b1, c1, d1, e1, w11, 14);\n+    R42(a2, b2, c2, d2, e2, w4, 8);\n+    R41(e1, a1, b1, c1, d1, w10, 15);\n+    R42(e2, a2, b2, c2, d2, w1, 11);\n+    R41(d1, e1, a1, b1, c1, w0, 14);\n+    R42(d2, e2, a2, b2, c2, w3, 14);\n+    R41(c1, d1, e1, a1, b1, w8, 15);\n+    R42(c2, d2, e2, a2, b2, w11, 14);\n+    R41(b1, c1, d1, e1, a1, w12, 9);\n+    R42(b2, c2, d2, e2, a2, w15, 6);\n+    R41(a1, b1, c1, d1, e1, w4, 8);\n+    R42(a2, b2, c2, d2, e2, w0, 14);\n+    R41(e1, a1, b1, c1, d1, w13, 9);\n+    R42(e2, a2, b2, c2, d2, w5, 6);\n+    R41(d1, e1, a1, b1, c1, w3, 14);\n+    R42(d2, e2, a2, b2, c2, w12, 9);\n+    R41(c1, d1, e1, a1, b1, w7, 5);\n+    R42(c2, d2, e2, a2, b2, w2, 12);\n+    R41(b1, c1, d1, e1, a1, w15, 6);\n+    R42(b2, c2, d2, e2, a2, w13, 9);\n+    R41(a1, b1, c1, d1, e1, w14, 8);\n+    R42(a2, b2, c2, d2, e2, w9, 12);\n+    R41(e1, a1, b1, c1, d1, w5, 6);\n+    R42(e2, a2, b2, c2, d2, w7, 5);\n+    R41(d1, e1, a1, b1, c1, w6, 5);\n+    R42(d2, e2, a2, b2, c2, w10, 15);\n+    R41(c1, d1, e1, a1, b1, w2, 12);\n+    R42(c2, d2, e2, a2, b2, w14, 8);\n+\n+    R51(b1, c1, d1, e1, a1, w4, 9);\n+    R52(b2, c2, d2, e2, a2, w12, 8);\n+    R51(a1, b1, c1, d1, e1, w0, 15);\n+    R52(a2, b2, c2, d2, e2, w15, 5);\n+    R51(e1, a1, b1, c1, d1, w5, 5);\n+    R52(e2, a2, b2, c2, d2, w10, 12);\n+    R51(d1, e1, a1, b1, c1, w9, 11);\n+    R52(d2, e2, a2, b2, c2, w4, 9);\n+    R51(c1, d1, e1, a1, b1, w7, 6);\n+    R52(c2, d2, e2, a2, b2, w1, 12);\n+    R51(b1, c1, d1, e1, a1, w12, 8);\n+    R52(b2, c2, d2, e2, a2, w5, 5);\n+    R51(a1, b1, c1, d1, e1, w2, 13);\n+    R52(a2, b2, c2, d2, e2, w8, 14);\n+    R51(e1, a1, b1, c1, d1, w10, 12);\n+    R52(e2, a2, b2, c2, d2, w7, 6);\n+    R51(d1, e1, a1, b1, c1, w14, 5);\n+    R52(d2, e2, a2, b2, c2, w6, 8);\n+    R51(c1, d1, e1, a1, b1, w1, 12);\n+    R52(c2, d2, e2, a2, b2, w2, 13);\n+    R51(b1, c1, d1, e1, a1, w3, 13);\n+    R52(b2, c2, d2, e2, a2, w13, 6);\n+    R51(a1, b1, c1, d1, e1, w8, 14);\n+    R52(a2, b2, c2, d2, e2, w14, 5);\n+    R51(e1, a1, b1, c1, d1, w11, 11);\n+    R52(e2, a2, b2, c2, d2, w0, 15);\n+    R51(d1, e1, a1, b1, c1, w6, 8);\n+    R52(d2, e2, a2, b2, c2, w3, 13);\n+    R51(c1, d1, e1, a1, b1, w15, 5);\n+    R52(c2, d2, e2, a2, b2, w9, 11);\n+    R51(b1, c1, d1, e1, a1, w13, 6);\n+    R52(b2, c2, d2, e2, a2, w11, 11);\n \n     uint32_t t = s[0];\n     s[0] = s[1] + c1 + d2;\n     s[1] = s[2] + d1 + e2;\n     s[2] = s[3] + e1 + a2;\n     s[3] = s[4] + a1 + b2;\n-    s[4] = t    + b1 + c2;\n+    s[4] = t + b1 + c2;\n }\n \n-}  // namespace ripemd160\n+} // namespace ripemd160\n \n-}  // namespace\n+} // namespace\n \n ////// RIPEMD160\n \n-CRIPEMD160::CRIPEMD160() : bytes(0) {\n+CRIPEMD160::CRIPEMD160() : bytes(0)\n+{\n     ripemd160::Initialize(s);\n }\n \n-CRIPEMD160& CRIPEMD160::Write(const unsigned char *data, size_t len) {\n-    const unsigned char *end = data + len;\n+CRIPEMD160& CRIPEMD160::Write(const unsigned char* data, size_t len)\n+{\n+    const unsigned char* end = data + len;\n     size_t bufsize = bytes % 64;\n     if (bufsize && bufsize + len >= 64) {\n         // Fill the buffer, and process it.\n@@ -185,20 +270,22 @@ CRIPEMD160& CRIPEMD160::Write(const unsigned char *data, size_t len) {\n     return *this;\n }\n \n-void CRIPEMD160::Finalize(unsigned char hash[OUTPUT_SIZE]) {\n+void CRIPEMD160::Finalize(unsigned char hash[OUTPUT_SIZE])\n+{\n     static const unsigned char pad[64] = {0x80};\n     unsigned char sizedesc[8];\n     WriteLE64(sizedesc, bytes << 3);\n     Write(pad, 1 + ((119 - (bytes % 64)) % 64));\n     Write(sizedesc, 8);\n     WriteLE32(hash, s[0]);\n-    WriteLE32(hash+4, s[1]);\n-    WriteLE32(hash+8, s[2]);\n-    WriteLE32(hash+12, s[3]);\n-    WriteLE32(hash+16, s[4]);\n+    WriteLE32(hash + 4, s[1]);\n+    WriteLE32(hash + 8, s[2]);\n+    WriteLE32(hash + 12, s[3]);\n+    WriteLE32(hash + 16, s[4]);\n }\n \n-CRIPEMD160& CRIPEMD160::Reset() {\n+CRIPEMD160& CRIPEMD160::Reset()\n+{\n     bytes = 0;\n     ripemd160::Initialize(s);\n     return *this;"
      },
      {
        "sha": "76197543beeae21f1623349ceeef082e73c74ef1",
        "filename": "src/crypto/ripemd160.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cf42c36e9963f9cf13704d8d74a9546f0db33d40/src/crypto/ripemd160.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cf42c36e9963f9cf13704d8d74a9546f0db33d40/src/crypto/ripemd160.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/ripemd160.h?ref=cf42c36e9963f9cf13704d8d74a9546f0db33d40",
        "patch": "@@ -9,7 +9,8 @@\n #include <stdlib.h>\n \n /** A hasher class for RIPEMD-160. */\n-class CRIPEMD160 {\n+class CRIPEMD160\n+{\n private:\n     uint32_t s[5];\n     unsigned char buf[64];\n@@ -19,7 +20,7 @@ class CRIPEMD160 {\n     static const size_t OUTPUT_SIZE = 20;\n \n     CRIPEMD160();\n-    CRIPEMD160& Write(const unsigned char *data, size_t len);\n+    CRIPEMD160& Write(const unsigned char* data, size_t len);\n     void Finalize(unsigned char hash[OUTPUT_SIZE]);\n     CRIPEMD160& Reset();\n };"
      },
      {
        "sha": "5fbea002d652b9eaa4b54ae64acdfe0fc1e1b51e",
        "filename": "src/crypto/sha1.cpp",
        "status": "modified",
        "additions": 102,
        "deletions": 96,
        "changes": 198,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cf42c36e9963f9cf13704d8d74a9546f0db33d40/src/crypto/sha1.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cf42c36e9963f9cf13704d8d74a9546f0db33d40/src/crypto/sha1.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/sha1.cpp?ref=cf42c36e9963f9cf13704d8d74a9546f0db33d40",
        "patch": "@@ -9,14 +9,14 @@\n #include <string.h>\n \n // Internal implementation code.\n-namespace {\n-\n+namespace\n+{\n /// Internal SHA-1 implementation.\n-namespace sha1 {\n-\n+namespace sha1\n+{\n /** One round of SHA-1. */\n-void inline Round(uint32_t a, uint32_t &b, uint32_t c, uint32_t d, uint32_t &e,\n-                  uint32_t f, uint32_t k, uint32_t w) {\n+void inline Round(uint32_t a, uint32_t& b, uint32_t c, uint32_t d, uint32_t& e, uint32_t f, uint32_t k, uint32_t w)\n+{\n     e += ((a << 5) | (a >> 27)) + f + k + w;\n     b = (b << 30) | (b >> 2);\n }\n@@ -28,7 +28,8 @@ uint32_t inline f3(uint32_t b, uint32_t c, uint32_t d) { return (b & c) | (d & (\n uint32_t inline left(uint32_t x) { return (x << 1) | (x >> 31); }\n \n /** Initialize SHA-1 state. */\n-void inline Initialize(uint32_t *s) {\n+void inline Initialize(uint32_t* s)\n+{\n     s[0] = 0x67452301ul;\n     s[1] = 0xEFCDAB89ul;\n     s[2] = 0x98BADCFEul;\n@@ -42,94 +43,95 @@ const uint32_t k3 = 0x8F1BBCDCul;\n const uint32_t k4 = 0xCA62C1D6ul;\n \n /** Perform a SHA-1 transformation, processing a 64-byte chunk. */\n-void Transform(uint32_t *s, const unsigned char *chunk) {\n+void Transform(uint32_t* s, const unsigned char* chunk)\n+{\n     uint32_t a = s[0], b = s[1], c = s[2], d = s[3], e = s[4];\n     uint32_t w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15;\n \n-    Round(a, b, c, d, e, f1(b, c, d), k1, w0  = ReadBE32(chunk +  0));\n-    Round(e, a, b, c, d, f1(a, b, c), k1, w1  = ReadBE32(chunk +  4));\n-    Round(d, e, a, b, c, f1(e, a, b), k1, w2  = ReadBE32(chunk +  8));\n-    Round(c, d, e, a, b, f1(d, e, a), k1, w3  = ReadBE32(chunk + 12));\n-    Round(b, c, d, e, a, f1(c, d, e), k1, w4  = ReadBE32(chunk + 16));\n-    Round(a, b, c, d, e, f1(b, c, d), k1, w5  = ReadBE32(chunk + 20));\n-    Round(e, a, b, c, d, f1(a, b, c), k1, w6  = ReadBE32(chunk + 24));\n-    Round(d, e, a, b, c, f1(e, a, b), k1, w7  = ReadBE32(chunk + 28));\n-    Round(c, d, e, a, b, f1(d, e, a), k1, w8  = ReadBE32(chunk + 32));\n-    Round(b, c, d, e, a, f1(c, d, e), k1, w9  = ReadBE32(chunk + 36));\n+    Round(a, b, c, d, e, f1(b, c, d), k1, w0 = ReadBE32(chunk + 0));\n+    Round(e, a, b, c, d, f1(a, b, c), k1, w1 = ReadBE32(chunk + 4));\n+    Round(d, e, a, b, c, f1(e, a, b), k1, w2 = ReadBE32(chunk + 8));\n+    Round(c, d, e, a, b, f1(d, e, a), k1, w3 = ReadBE32(chunk + 12));\n+    Round(b, c, d, e, a, f1(c, d, e), k1, w4 = ReadBE32(chunk + 16));\n+    Round(a, b, c, d, e, f1(b, c, d), k1, w5 = ReadBE32(chunk + 20));\n+    Round(e, a, b, c, d, f1(a, b, c), k1, w6 = ReadBE32(chunk + 24));\n+    Round(d, e, a, b, c, f1(e, a, b), k1, w7 = ReadBE32(chunk + 28));\n+    Round(c, d, e, a, b, f1(d, e, a), k1, w8 = ReadBE32(chunk + 32));\n+    Round(b, c, d, e, a, f1(c, d, e), k1, w9 = ReadBE32(chunk + 36));\n     Round(a, b, c, d, e, f1(b, c, d), k1, w10 = ReadBE32(chunk + 40));\n     Round(e, a, b, c, d, f1(a, b, c), k1, w11 = ReadBE32(chunk + 44));\n     Round(d, e, a, b, c, f1(e, a, b), k1, w12 = ReadBE32(chunk + 48));\n     Round(c, d, e, a, b, f1(d, e, a), k1, w13 = ReadBE32(chunk + 52));\n     Round(b, c, d, e, a, f1(c, d, e), k1, w14 = ReadBE32(chunk + 56));\n     Round(a, b, c, d, e, f1(b, c, d), k1, w15 = ReadBE32(chunk + 60));\n \n-    Round(e, a, b, c, d, f1(a, b, c), k1, w0  = left(w0  ^ w13 ^ w8  ^ w2 ));\n-    Round(d, e, a, b, c, f1(e, a, b), k1, w1  = left(w1  ^ w14 ^ w9  ^ w3 ));\n-    Round(c, d, e, a, b, f1(d, e, a), k1, w2  = left(w2  ^ w15 ^ w10 ^ w4 ));\n-    Round(b, c, d, e, a, f1(c, d, e), k1, w3  = left(w3  ^ w0  ^ w11 ^ w5 ));\n-    Round(a, b, c, d, e, f2(b, c, d), k2, w4  = left(w4  ^ w1  ^ w12 ^ w6 ));\n-    Round(e, a, b, c, d, f2(a, b, c), k2, w5  = left(w5  ^ w2  ^ w13 ^ w7 ));\n-    Round(d, e, a, b, c, f2(e, a, b), k2, w6  = left(w6  ^ w3  ^ w14 ^ w8 ));\n-    Round(c, d, e, a, b, f2(d, e, a), k2, w7  = left(w7  ^ w4  ^ w15 ^ w9 ));\n-    Round(b, c, d, e, a, f2(c, d, e), k2, w8  = left(w8  ^ w5  ^ w0  ^ w10));\n-    Round(a, b, c, d, e, f2(b, c, d), k2, w9  = left(w9  ^ w6  ^ w1  ^ w11));\n-    Round(e, a, b, c, d, f2(a, b, c), k2, w10 = left(w10 ^ w7  ^ w2  ^ w12));\n-    Round(d, e, a, b, c, f2(e, a, b), k2, w11 = left(w11 ^ w8  ^ w3  ^ w13));\n-    Round(c, d, e, a, b, f2(d, e, a), k2, w12 = left(w12 ^ w9  ^ w4  ^ w14));\n-    Round(b, c, d, e, a, f2(c, d, e), k2, w13 = left(w13 ^ w10 ^ w5  ^ w15));\n-    Round(a, b, c, d, e, f2(b, c, d), k2, w14 = left(w14 ^ w11 ^ w6  ^ w0 ));\n-    Round(e, a, b, c, d, f2(a, b, c), k2, w15 = left(w15 ^ w12 ^ w7  ^ w1 ));\n-\n-    Round(d, e, a, b, c, f2(e, a, b), k2, w0  = left(w0  ^ w13 ^ w8  ^ w2 ));\n-    Round(c, d, e, a, b, f2(d, e, a), k2, w1  = left(w1  ^ w14 ^ w9  ^ w3 ));\n-    Round(b, c, d, e, a, f2(c, d, e), k2, w2  = left(w2  ^ w15 ^ w10 ^ w4 ));\n-    Round(a, b, c, d, e, f2(b, c, d), k2, w3  = left(w3  ^ w0  ^ w11 ^ w5 ));\n-    Round(e, a, b, c, d, f2(a, b, c), k2, w4  = left(w4  ^ w1  ^ w12 ^ w6 ));\n-    Round(d, e, a, b, c, f2(e, a, b), k2, w5  = left(w5  ^ w2  ^ w13 ^ w7 ));\n-    Round(c, d, e, a, b, f2(d, e, a), k2, w6  = left(w6  ^ w3  ^ w14 ^ w8 ));\n-    Round(b, c, d, e, a, f2(c, d, e), k2, w7  = left(w7  ^ w4  ^ w15 ^ w9 ));\n-    Round(a, b, c, d, e, f3(b, c, d), k3, w8  = left(w8  ^ w5  ^ w0  ^ w10));\n-    Round(e, a, b, c, d, f3(a, b, c), k3, w9  = left(w9  ^ w6  ^ w1  ^ w11));\n-    Round(d, e, a, b, c, f3(e, a, b), k3, w10 = left(w10 ^ w7  ^ w2  ^ w12));\n-    Round(c, d, e, a, b, f3(d, e, a), k3, w11 = left(w11 ^ w8  ^ w3  ^ w13));\n-    Round(b, c, d, e, a, f3(c, d, e), k3, w12 = left(w12 ^ w9  ^ w4  ^ w14));\n-    Round(a, b, c, d, e, f3(b, c, d), k3, w13 = left(w13 ^ w10 ^ w5  ^ w15));\n-    Round(e, a, b, c, d, f3(a, b, c), k3, w14 = left(w14 ^ w11 ^ w6  ^ w0 ));\n-    Round(d, e, a, b, c, f3(e, a, b), k3, w15 = left(w15 ^ w12 ^ w7  ^ w1 ));\n-\n-    Round(c, d, e, a, b, f3(d, e, a), k3, w0  = left(w0  ^ w13 ^ w8  ^ w2 ));\n-    Round(b, c, d, e, a, f3(c, d, e), k3, w1  = left(w1  ^ w14 ^ w9  ^ w3 ));\n-    Round(a, b, c, d, e, f3(b, c, d), k3, w2  = left(w2  ^ w15 ^ w10 ^ w4 ));\n-    Round(e, a, b, c, d, f3(a, b, c), k3, w3  = left(w3  ^ w0  ^ w11 ^ w5 ));\n-    Round(d, e, a, b, c, f3(e, a, b), k3, w4  = left(w4  ^ w1  ^ w12 ^ w6 ));\n-    Round(c, d, e, a, b, f3(d, e, a), k3, w5  = left(w5  ^ w2  ^ w13 ^ w7 ));\n-    Round(b, c, d, e, a, f3(c, d, e), k3, w6  = left(w6  ^ w3  ^ w14 ^ w8 ));\n-    Round(a, b, c, d, e, f3(b, c, d), k3, w7  = left(w7  ^ w4  ^ w15 ^ w9 ));\n-    Round(e, a, b, c, d, f3(a, b, c), k3, w8  = left(w8  ^ w5  ^ w0  ^ w10));\n-    Round(d, e, a, b, c, f3(e, a, b), k3, w9  = left(w9  ^ w6  ^ w1  ^ w11));\n-    Round(c, d, e, a, b, f3(d, e, a), k3, w10 = left(w10 ^ w7  ^ w2  ^ w12));\n-    Round(b, c, d, e, a, f3(c, d, e), k3, w11 = left(w11 ^ w8  ^ w3  ^ w13));\n-    Round(a, b, c, d, e, f2(b, c, d), k4, w12 = left(w12 ^ w9  ^ w4  ^ w14));\n-    Round(e, a, b, c, d, f2(a, b, c), k4, w13 = left(w13 ^ w10 ^ w5  ^ w15));\n-    Round(d, e, a, b, c, f2(e, a, b), k4, w14 = left(w14 ^ w11 ^ w6  ^ w0 ));\n-    Round(c, d, e, a, b, f2(d, e, a), k4, w15 = left(w15 ^ w12 ^ w7  ^ w1 ));\n-\n-    Round(b, c, d, e, a, f2(c, d, e), k4, w0  = left(w0  ^ w13 ^ w8  ^ w2 ));\n-    Round(a, b, c, d, e, f2(b, c, d), k4, w1  = left(w1  ^ w14 ^ w9  ^ w3 ));\n-    Round(e, a, b, c, d, f2(a, b, c), k4, w2  = left(w2  ^ w15 ^ w10 ^ w4 ));\n-    Round(d, e, a, b, c, f2(e, a, b), k4, w3  = left(w3  ^ w0  ^ w11 ^ w5 ));\n-    Round(c, d, e, a, b, f2(d, e, a), k4, w4  = left(w4  ^ w1  ^ w12 ^ w6 ));\n-    Round(b, c, d, e, a, f2(c, d, e), k4, w5  = left(w5  ^ w2  ^ w13 ^ w7 ));\n-    Round(a, b, c, d, e, f2(b, c, d), k4, w6  = left(w6  ^ w3  ^ w14 ^ w8 ));\n-    Round(e, a, b, c, d, f2(a, b, c), k4, w7  = left(w7  ^ w4  ^ w15 ^ w9 ));\n-    Round(d, e, a, b, c, f2(e, a, b), k4, w8  = left(w8  ^ w5  ^ w0  ^ w10));\n-    Round(c, d, e, a, b, f2(d, e, a), k4, w9  = left(w9  ^ w6  ^ w1  ^ w11));\n-    Round(b, c, d, e, a, f2(c, d, e), k4, w10 = left(w10 ^ w7  ^ w2  ^ w12));\n-    Round(a, b, c, d, e, f2(b, c, d), k4, w11 = left(w11 ^ w8  ^ w3  ^ w13));\n-    Round(e, a, b, c, d, f2(a, b, c), k4, w12 = left(w12 ^ w9  ^ w4  ^ w14));\n-    Round(d, e, a, b, c, f2(e, a, b), k4,       left(w13 ^ w10 ^ w5  ^ w15));\n-    Round(c, d, e, a, b, f2(d, e, a), k4,       left(w14 ^ w11 ^ w6  ^ w0 ));\n-    Round(b, c, d, e, a, f2(c, d, e), k4,       left(w15 ^ w12 ^ w7  ^ w1 ));\n+    Round(e, a, b, c, d, f1(a, b, c), k1, w0 = left(w0 ^ w13 ^ w8 ^ w2));\n+    Round(d, e, a, b, c, f1(e, a, b), k1, w1 = left(w1 ^ w14 ^ w9 ^ w3));\n+    Round(c, d, e, a, b, f1(d, e, a), k1, w2 = left(w2 ^ w15 ^ w10 ^ w4));\n+    Round(b, c, d, e, a, f1(c, d, e), k1, w3 = left(w3 ^ w0 ^ w11 ^ w5));\n+    Round(a, b, c, d, e, f2(b, c, d), k2, w4 = left(w4 ^ w1 ^ w12 ^ w6));\n+    Round(e, a, b, c, d, f2(a, b, c), k2, w5 = left(w5 ^ w2 ^ w13 ^ w7));\n+    Round(d, e, a, b, c, f2(e, a, b), k2, w6 = left(w6 ^ w3 ^ w14 ^ w8));\n+    Round(c, d, e, a, b, f2(d, e, a), k2, w7 = left(w7 ^ w4 ^ w15 ^ w9));\n+    Round(b, c, d, e, a, f2(c, d, e), k2, w8 = left(w8 ^ w5 ^ w0 ^ w10));\n+    Round(a, b, c, d, e, f2(b, c, d), k2, w9 = left(w9 ^ w6 ^ w1 ^ w11));\n+    Round(e, a, b, c, d, f2(a, b, c), k2, w10 = left(w10 ^ w7 ^ w2 ^ w12));\n+    Round(d, e, a, b, c, f2(e, a, b), k2, w11 = left(w11 ^ w8 ^ w3 ^ w13));\n+    Round(c, d, e, a, b, f2(d, e, a), k2, w12 = left(w12 ^ w9 ^ w4 ^ w14));\n+    Round(b, c, d, e, a, f2(c, d, e), k2, w13 = left(w13 ^ w10 ^ w5 ^ w15));\n+    Round(a, b, c, d, e, f2(b, c, d), k2, w14 = left(w14 ^ w11 ^ w6 ^ w0));\n+    Round(e, a, b, c, d, f2(a, b, c), k2, w15 = left(w15 ^ w12 ^ w7 ^ w1));\n+\n+    Round(d, e, a, b, c, f2(e, a, b), k2, w0 = left(w0 ^ w13 ^ w8 ^ w2));\n+    Round(c, d, e, a, b, f2(d, e, a), k2, w1 = left(w1 ^ w14 ^ w9 ^ w3));\n+    Round(b, c, d, e, a, f2(c, d, e), k2, w2 = left(w2 ^ w15 ^ w10 ^ w4));\n+    Round(a, b, c, d, e, f2(b, c, d), k2, w3 = left(w3 ^ w0 ^ w11 ^ w5));\n+    Round(e, a, b, c, d, f2(a, b, c), k2, w4 = left(w4 ^ w1 ^ w12 ^ w6));\n+    Round(d, e, a, b, c, f2(e, a, b), k2, w5 = left(w5 ^ w2 ^ w13 ^ w7));\n+    Round(c, d, e, a, b, f2(d, e, a), k2, w6 = left(w6 ^ w3 ^ w14 ^ w8));\n+    Round(b, c, d, e, a, f2(c, d, e), k2, w7 = left(w7 ^ w4 ^ w15 ^ w9));\n+    Round(a, b, c, d, e, f3(b, c, d), k3, w8 = left(w8 ^ w5 ^ w0 ^ w10));\n+    Round(e, a, b, c, d, f3(a, b, c), k3, w9 = left(w9 ^ w6 ^ w1 ^ w11));\n+    Round(d, e, a, b, c, f3(e, a, b), k3, w10 = left(w10 ^ w7 ^ w2 ^ w12));\n+    Round(c, d, e, a, b, f3(d, e, a), k3, w11 = left(w11 ^ w8 ^ w3 ^ w13));\n+    Round(b, c, d, e, a, f3(c, d, e), k3, w12 = left(w12 ^ w9 ^ w4 ^ w14));\n+    Round(a, b, c, d, e, f3(b, c, d), k3, w13 = left(w13 ^ w10 ^ w5 ^ w15));\n+    Round(e, a, b, c, d, f3(a, b, c), k3, w14 = left(w14 ^ w11 ^ w6 ^ w0));\n+    Round(d, e, a, b, c, f3(e, a, b), k3, w15 = left(w15 ^ w12 ^ w7 ^ w1));\n+\n+    Round(c, d, e, a, b, f3(d, e, a), k3, w0 = left(w0 ^ w13 ^ w8 ^ w2));\n+    Round(b, c, d, e, a, f3(c, d, e), k3, w1 = left(w1 ^ w14 ^ w9 ^ w3));\n+    Round(a, b, c, d, e, f3(b, c, d), k3, w2 = left(w2 ^ w15 ^ w10 ^ w4));\n+    Round(e, a, b, c, d, f3(a, b, c), k3, w3 = left(w3 ^ w0 ^ w11 ^ w5));\n+    Round(d, e, a, b, c, f3(e, a, b), k3, w4 = left(w4 ^ w1 ^ w12 ^ w6));\n+    Round(c, d, e, a, b, f3(d, e, a), k3, w5 = left(w5 ^ w2 ^ w13 ^ w7));\n+    Round(b, c, d, e, a, f3(c, d, e), k3, w6 = left(w6 ^ w3 ^ w14 ^ w8));\n+    Round(a, b, c, d, e, f3(b, c, d), k3, w7 = left(w7 ^ w4 ^ w15 ^ w9));\n+    Round(e, a, b, c, d, f3(a, b, c), k3, w8 = left(w8 ^ w5 ^ w0 ^ w10));\n+    Round(d, e, a, b, c, f3(e, a, b), k3, w9 = left(w9 ^ w6 ^ w1 ^ w11));\n+    Round(c, d, e, a, b, f3(d, e, a), k3, w10 = left(w10 ^ w7 ^ w2 ^ w12));\n+    Round(b, c, d, e, a, f3(c, d, e), k3, w11 = left(w11 ^ w8 ^ w3 ^ w13));\n+    Round(a, b, c, d, e, f2(b, c, d), k4, w12 = left(w12 ^ w9 ^ w4 ^ w14));\n+    Round(e, a, b, c, d, f2(a, b, c), k4, w13 = left(w13 ^ w10 ^ w5 ^ w15));\n+    Round(d, e, a, b, c, f2(e, a, b), k4, w14 = left(w14 ^ w11 ^ w6 ^ w0));\n+    Round(c, d, e, a, b, f2(d, e, a), k4, w15 = left(w15 ^ w12 ^ w7 ^ w1));\n+\n+    Round(b, c, d, e, a, f2(c, d, e), k4, w0 = left(w0 ^ w13 ^ w8 ^ w2));\n+    Round(a, b, c, d, e, f2(b, c, d), k4, w1 = left(w1 ^ w14 ^ w9 ^ w3));\n+    Round(e, a, b, c, d, f2(a, b, c), k4, w2 = left(w2 ^ w15 ^ w10 ^ w4));\n+    Round(d, e, a, b, c, f2(e, a, b), k4, w3 = left(w3 ^ w0 ^ w11 ^ w5));\n+    Round(c, d, e, a, b, f2(d, e, a), k4, w4 = left(w4 ^ w1 ^ w12 ^ w6));\n+    Round(b, c, d, e, a, f2(c, d, e), k4, w5 = left(w5 ^ w2 ^ w13 ^ w7));\n+    Round(a, b, c, d, e, f2(b, c, d), k4, w6 = left(w6 ^ w3 ^ w14 ^ w8));\n+    Round(e, a, b, c, d, f2(a, b, c), k4, w7 = left(w7 ^ w4 ^ w15 ^ w9));\n+    Round(d, e, a, b, c, f2(e, a, b), k4, w8 = left(w8 ^ w5 ^ w0 ^ w10));\n+    Round(c, d, e, a, b, f2(d, e, a), k4, w9 = left(w9 ^ w6 ^ w1 ^ w11));\n+    Round(b, c, d, e, a, f2(c, d, e), k4, w10 = left(w10 ^ w7 ^ w2 ^ w12));\n+    Round(a, b, c, d, e, f2(b, c, d), k4, w11 = left(w11 ^ w8 ^ w3 ^ w13));\n+    Round(e, a, b, c, d, f2(a, b, c), k4, w12 = left(w12 ^ w9 ^ w4 ^ w14));\n+    Round(d, e, a, b, c, f2(e, a, b), k4, left(w13 ^ w10 ^ w5 ^ w15));\n+    Round(c, d, e, a, b, f2(d, e, a), k4, left(w14 ^ w11 ^ w6 ^ w0));\n+    Round(b, c, d, e, a, f2(c, d, e), k4, left(w15 ^ w12 ^ w7 ^ w1));\n \n     s[0] += a;\n     s[1] += b;\n@@ -138,18 +140,20 @@ void Transform(uint32_t *s, const unsigned char *chunk) {\n     s[4] += e;\n }\n \n-}  // namespace sha1\n+} // namespace sha1\n \n-}  // namespace\n+} // namespace\n \n ////// SHA1\n \n-CSHA1::CSHA1() : bytes(0) {\n+CSHA1::CSHA1() : bytes(0)\n+{\n     sha1::Initialize(s);\n }\n \n-CSHA1& CSHA1::Write(const unsigned char *data, size_t len) {\n-    const unsigned char *end = data + len;\n+CSHA1& CSHA1::Write(const unsigned char* data, size_t len)\n+{\n+    const unsigned char* end = data + len;\n     size_t bufsize = bytes % 64;\n     if (bufsize && bufsize + len >= 64) {\n         // Fill the buffer, and process it.\n@@ -173,20 +177,22 @@ CSHA1& CSHA1::Write(const unsigned char *data, size_t len) {\n     return *this;\n }\n \n-void CSHA1::Finalize(unsigned char hash[OUTPUT_SIZE]) {\n+void CSHA1::Finalize(unsigned char hash[OUTPUT_SIZE])\n+{\n     static const unsigned char pad[64] = {0x80};\n     unsigned char sizedesc[8];\n     WriteBE64(sizedesc, bytes << 3);\n     Write(pad, 1 + ((119 - (bytes % 64)) % 64));\n     Write(sizedesc, 8);\n     WriteBE32(hash, s[0]);\n-    WriteBE32(hash+4, s[1]);\n-    WriteBE32(hash+8, s[2]);\n-    WriteBE32(hash+12, s[3]);\n-    WriteBE32(hash+16, s[4]);\n+    WriteBE32(hash + 4, s[1]);\n+    WriteBE32(hash + 8, s[2]);\n+    WriteBE32(hash + 12, s[3]);\n+    WriteBE32(hash + 16, s[4]);\n }\n \n-CSHA1& CSHA1::Reset() {\n+CSHA1& CSHA1::Reset()\n+{\n     bytes = 0;\n     sha1::Initialize(s);\n     return *this;"
      },
      {
        "sha": "4fa2b333babd3f803e7dfb55e42f031610d06169",
        "filename": "src/crypto/sha1.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cf42c36e9963f9cf13704d8d74a9546f0db33d40/src/crypto/sha1.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cf42c36e9963f9cf13704d8d74a9546f0db33d40/src/crypto/sha1.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/sha1.h?ref=cf42c36e9963f9cf13704d8d74a9546f0db33d40",
        "patch": "@@ -9,7 +9,8 @@\n #include <stdlib.h>\n \n /** A hasher class for SHA1. */\n-class CSHA1 {\n+class CSHA1\n+{\n private:\n     uint32_t s[5];\n     unsigned char buf[64];\n@@ -19,7 +20,7 @@ class CSHA1 {\n     static const size_t OUTPUT_SIZE = 20;\n \n     CSHA1();\n-    CSHA1& Write(const unsigned char *data, size_t len);\n+    CSHA1& Write(const unsigned char* data, size_t len);\n     void Finalize(unsigned char hash[OUTPUT_SIZE]);\n     CSHA1& Reset();\n };"
      },
      {
        "sha": "9a96c5125a7df80844079319a5586d70ef9e3cc5",
        "filename": "src/crypto/sha2.cpp",
        "status": "modified",
        "additions": 197,
        "deletions": 185,
        "changes": 382,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cf42c36e9963f9cf13704d8d74a9546f0db33d40/src/crypto/sha2.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cf42c36e9963f9cf13704d8d74a9546f0db33d40/src/crypto/sha2.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/sha2.cpp?ref=cf42c36e9963f9cf13704d8d74a9546f0db33d40",
        "patch": "@@ -9,11 +9,11 @@\n #include <string.h>\n \n // Internal implementation code.\n-namespace {\n-\n+namespace\n+{\n /// Internal SHA-256 implementation.\n-namespace sha256 {\n-\n+namespace sha256\n+{\n uint32_t inline Ch(uint32_t x, uint32_t y, uint32_t z) { return z ^ (x & (y ^ z)); }\n uint32_t inline Maj(uint32_t x, uint32_t y, uint32_t z) { return (x & y) | (z & (x | y)); }\n uint32_t inline Sigma0(uint32_t x) { return (x >> 2 | x << 30) ^ (x >> 13 | x << 19) ^ (x >> 22 | x << 10); }\n@@ -22,17 +22,17 @@ uint32_t inline sigma0(uint32_t x) { return (x >> 7 | x << 25) ^ (x >> 18 | x <<\n uint32_t inline sigma1(uint32_t x) { return (x >> 17 | x << 15) ^ (x >> 19 | x << 13) ^ (x >> 10); }\n \n /** One round of SHA-256. */\n-void inline Round(uint32_t a, uint32_t b, uint32_t c, uint32_t &d,\n-                  uint32_t e, uint32_t f, uint32_t g, uint32_t &h,\n-                  uint32_t k, uint32_t w) {\n+void inline Round(uint32_t a, uint32_t b, uint32_t c, uint32_t& d, uint32_t e, uint32_t f, uint32_t g, uint32_t& h, uint32_t k, uint32_t w)\n+{\n     uint32_t t1 = h + Sigma1(e) + Ch(e, f, g) + k + w;\n     uint32_t t2 = Sigma0(a) + Maj(a, b, c);\n     d += t1;\n     h = t1 + t2;\n }\n \n /** Initialize SHA-256 state. */\n-void inline Initialize(uint32_t *s) {\n+void inline Initialize(uint32_t* s)\n+{\n     s[0] = 0x6a09e667ul;\n     s[1] = 0xbb67ae85ul;\n     s[2] = 0x3c6ef372ul;\n@@ -44,77 +44,78 @@ void inline Initialize(uint32_t *s) {\n }\n \n /** Perform one SHA-256 transformation, processing a 64-byte chunk. */\n-void Transform(uint32_t *s, const unsigned char *chunk) {\n+void Transform(uint32_t* s, const unsigned char* chunk)\n+{\n     uint32_t a = s[0], b = s[1], c = s[2], d = s[3], e = s[4], f = s[5], g = s[6], h = s[7];\n     uint32_t w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15;\n \n-    Round(a, b, c, d, e, f, g, h, 0x428a2f98,  w0 = ReadBE32(chunk + 0));\n-    Round(h, a, b, c, d, e, f, g, 0x71374491,  w1 = ReadBE32(chunk + 4));\n-    Round(g, h, a, b, c, d, e, f, 0xb5c0fbcf,  w2 = ReadBE32(chunk + 8));\n-    Round(f, g, h, a, b, c, d, e, 0xe9b5dba5,  w3 = ReadBE32(chunk + 12));\n-    Round(e, f, g, h, a, b, c, d, 0x3956c25b,  w4 = ReadBE32(chunk + 16));\n-    Round(d, e, f, g, h, a, b, c, 0x59f111f1,  w5 = ReadBE32(chunk + 20));\n-    Round(c, d, e, f, g, h, a, b, 0x923f82a4,  w6 = ReadBE32(chunk + 24));\n-    Round(b, c, d, e, f, g, h, a, 0xab1c5ed5,  w7 = ReadBE32(chunk + 28));\n-    Round(a, b, c, d, e, f, g, h, 0xd807aa98,  w8 = ReadBE32(chunk + 32));\n-    Round(h, a, b, c, d, e, f, g, 0x12835b01,  w9 = ReadBE32(chunk + 36));\n+    Round(a, b, c, d, e, f, g, h, 0x428a2f98, w0 = ReadBE32(chunk + 0));\n+    Round(h, a, b, c, d, e, f, g, 0x71374491, w1 = ReadBE32(chunk + 4));\n+    Round(g, h, a, b, c, d, e, f, 0xb5c0fbcf, w2 = ReadBE32(chunk + 8));\n+    Round(f, g, h, a, b, c, d, e, 0xe9b5dba5, w3 = ReadBE32(chunk + 12));\n+    Round(e, f, g, h, a, b, c, d, 0x3956c25b, w4 = ReadBE32(chunk + 16));\n+    Round(d, e, f, g, h, a, b, c, 0x59f111f1, w5 = ReadBE32(chunk + 20));\n+    Round(c, d, e, f, g, h, a, b, 0x923f82a4, w6 = ReadBE32(chunk + 24));\n+    Round(b, c, d, e, f, g, h, a, 0xab1c5ed5, w7 = ReadBE32(chunk + 28));\n+    Round(a, b, c, d, e, f, g, h, 0xd807aa98, w8 = ReadBE32(chunk + 32));\n+    Round(h, a, b, c, d, e, f, g, 0x12835b01, w9 = ReadBE32(chunk + 36));\n     Round(g, h, a, b, c, d, e, f, 0x243185be, w10 = ReadBE32(chunk + 40));\n     Round(f, g, h, a, b, c, d, e, 0x550c7dc3, w11 = ReadBE32(chunk + 44));\n     Round(e, f, g, h, a, b, c, d, 0x72be5d74, w12 = ReadBE32(chunk + 48));\n     Round(d, e, f, g, h, a, b, c, 0x80deb1fe, w13 = ReadBE32(chunk + 52));\n     Round(c, d, e, f, g, h, a, b, 0x9bdc06a7, w14 = ReadBE32(chunk + 56));\n     Round(b, c, d, e, f, g, h, a, 0xc19bf174, w15 = ReadBE32(chunk + 60));\n \n-    Round(a, b, c, d, e, f, g, h, 0xe49b69c1,  w0 += sigma1(w14) +  w9 + sigma0( w1));\n-    Round(h, a, b, c, d, e, f, g, 0xefbe4786,  w1 += sigma1(w15) + w10 + sigma0( w2));\n-    Round(g, h, a, b, c, d, e, f, 0x0fc19dc6,  w2 += sigma1( w0) + w11 + sigma0( w3));\n-    Round(f, g, h, a, b, c, d, e, 0x240ca1cc,  w3 += sigma1( w1) + w12 + sigma0( w4));\n-    Round(e, f, g, h, a, b, c, d, 0x2de92c6f,  w4 += sigma1( w2) + w13 + sigma0( w5));\n-    Round(d, e, f, g, h, a, b, c, 0x4a7484aa,  w5 += sigma1( w3) + w14 + sigma0( w6));\n-    Round(c, d, e, f, g, h, a, b, 0x5cb0a9dc,  w6 += sigma1( w4) + w15 + sigma0( w7));\n-    Round(b, c, d, e, f, g, h, a, 0x76f988da,  w7 += sigma1( w5) +  w0 + sigma0( w8));\n-    Round(a, b, c, d, e, f, g, h, 0x983e5152,  w8 += sigma1( w6) +  w1 + sigma0( w9));\n-    Round(h, a, b, c, d, e, f, g, 0xa831c66d,  w9 += sigma1( w7) +  w2 + sigma0(w10));\n-    Round(g, h, a, b, c, d, e, f, 0xb00327c8, w10 += sigma1( w8) +  w3 + sigma0(w11));\n-    Round(f, g, h, a, b, c, d, e, 0xbf597fc7, w11 += sigma1( w9) +  w4 + sigma0(w12));\n-    Round(e, f, g, h, a, b, c, d, 0xc6e00bf3, w12 += sigma1(w10) +  w5 + sigma0(w13));\n-    Round(d, e, f, g, h, a, b, c, 0xd5a79147, w13 += sigma1(w11) +  w6 + sigma0(w14));\n-    Round(c, d, e, f, g, h, a, b, 0x06ca6351, w14 += sigma1(w12) +  w7 + sigma0(w15));\n-    Round(b, c, d, e, f, g, h, a, 0x14292967, w15 += sigma1(w13) +  w8 + sigma0( w0));\n-\n-    Round(a, b, c, d, e, f, g, h, 0x27b70a85,  w0 += sigma1(w14) +  w9 + sigma0( w1));\n-    Round(h, a, b, c, d, e, f, g, 0x2e1b2138,  w1 += sigma1(w15) + w10 + sigma0( w2));\n-    Round(g, h, a, b, c, d, e, f, 0x4d2c6dfc,  w2 += sigma1( w0) + w11 + sigma0( w3));\n-    Round(f, g, h, a, b, c, d, e, 0x53380d13,  w3 += sigma1( w1) + w12 + sigma0( w4));\n-    Round(e, f, g, h, a, b, c, d, 0x650a7354,  w4 += sigma1( w2) + w13 + sigma0( w5));\n-    Round(d, e, f, g, h, a, b, c, 0x766a0abb,  w5 += sigma1( w3) + w14 + sigma0( w6));\n-    Round(c, d, e, f, g, h, a, b, 0x81c2c92e,  w6 += sigma1( w4) + w15 + sigma0( w7));\n-    Round(b, c, d, e, f, g, h, a, 0x92722c85,  w7 += sigma1( w5) +  w0 + sigma0( w8));\n-    Round(a, b, c, d, e, f, g, h, 0xa2bfe8a1,  w8 += sigma1( w6) +  w1 + sigma0( w9));\n-    Round(h, a, b, c, d, e, f, g, 0xa81a664b,  w9 += sigma1( w7) +  w2 + sigma0(w10));\n-    Round(g, h, a, b, c, d, e, f, 0xc24b8b70, w10 += sigma1( w8) +  w3 + sigma0(w11));\n-    Round(f, g, h, a, b, c, d, e, 0xc76c51a3, w11 += sigma1( w9) +  w4 + sigma0(w12));\n-    Round(e, f, g, h, a, b, c, d, 0xd192e819, w12 += sigma1(w10) +  w5 + sigma0(w13));\n-    Round(d, e, f, g, h, a, b, c, 0xd6990624, w13 += sigma1(w11) +  w6 + sigma0(w14));\n-    Round(c, d, e, f, g, h, a, b, 0xf40e3585, w14 += sigma1(w12) +  w7 + sigma0(w15));\n-    Round(b, c, d, e, f, g, h, a, 0x106aa070, w15 += sigma1(w13) +  w8 + sigma0( w0));\n-\n-    Round(a, b, c, d, e, f, g, h, 0x19a4c116,  w0 += sigma1(w14) +  w9 + sigma0( w1));\n-    Round(h, a, b, c, d, e, f, g, 0x1e376c08,  w1 += sigma1(w15) + w10 + sigma0( w2));\n-    Round(g, h, a, b, c, d, e, f, 0x2748774c,  w2 += sigma1( w0) + w11 + sigma0( w3));\n-    Round(f, g, h, a, b, c, d, e, 0x34b0bcb5,  w3 += sigma1( w1) + w12 + sigma0( w4));\n-    Round(e, f, g, h, a, b, c, d, 0x391c0cb3,  w4 += sigma1( w2) + w13 + sigma0( w5));\n-    Round(d, e, f, g, h, a, b, c, 0x4ed8aa4a,  w5 += sigma1( w3) + w14 + sigma0( w6));\n-    Round(c, d, e, f, g, h, a, b, 0x5b9cca4f,  w6 += sigma1( w4) + w15 + sigma0( w7));\n-    Round(b, c, d, e, f, g, h, a, 0x682e6ff3,  w7 += sigma1( w5) +  w0 + sigma0( w8));\n-    Round(a, b, c, d, e, f, g, h, 0x748f82ee,  w8 += sigma1( w6) +  w1 + sigma0( w9));\n-    Round(h, a, b, c, d, e, f, g, 0x78a5636f,  w9 += sigma1( w7) +  w2 + sigma0(w10));\n-    Round(g, h, a, b, c, d, e, f, 0x84c87814, w10 += sigma1( w8) +  w3 + sigma0(w11));\n-    Round(f, g, h, a, b, c, d, e, 0x8cc70208, w11 += sigma1( w9) +  w4 + sigma0(w12));\n-    Round(e, f, g, h, a, b, c, d, 0x90befffa, w12 += sigma1(w10) +  w5 + sigma0(w13));\n-    Round(d, e, f, g, h, a, b, c, 0xa4506ceb, w13 += sigma1(w11) +  w6 + sigma0(w14));\n-    Round(c, d, e, f, g, h, a, b, 0xbef9a3f7, w14  + sigma1(w12) +  w7 + sigma0(w15));\n-    Round(b, c, d, e, f, g, h, a, 0xc67178f2, w15  + sigma1(w13) +  w8 + sigma0( w0));\n+    Round(a, b, c, d, e, f, g, h, 0xe49b69c1, w0 += sigma1(w14) + w9 + sigma0(w1));\n+    Round(h, a, b, c, d, e, f, g, 0xefbe4786, w1 += sigma1(w15) + w10 + sigma0(w2));\n+    Round(g, h, a, b, c, d, e, f, 0x0fc19dc6, w2 += sigma1(w0) + w11 + sigma0(w3));\n+    Round(f, g, h, a, b, c, d, e, 0x240ca1cc, w3 += sigma1(w1) + w12 + sigma0(w4));\n+    Round(e, f, g, h, a, b, c, d, 0x2de92c6f, w4 += sigma1(w2) + w13 + sigma0(w5));\n+    Round(d, e, f, g, h, a, b, c, 0x4a7484aa, w5 += sigma1(w3) + w14 + sigma0(w6));\n+    Round(c, d, e, f, g, h, a, b, 0x5cb0a9dc, w6 += sigma1(w4) + w15 + sigma0(w7));\n+    Round(b, c, d, e, f, g, h, a, 0x76f988da, w7 += sigma1(w5) + w0 + sigma0(w8));\n+    Round(a, b, c, d, e, f, g, h, 0x983e5152, w8 += sigma1(w6) + w1 + sigma0(w9));\n+    Round(h, a, b, c, d, e, f, g, 0xa831c66d, w9 += sigma1(w7) + w2 + sigma0(w10));\n+    Round(g, h, a, b, c, d, e, f, 0xb00327c8, w10 += sigma1(w8) + w3 + sigma0(w11));\n+    Round(f, g, h, a, b, c, d, e, 0xbf597fc7, w11 += sigma1(w9) + w4 + sigma0(w12));\n+    Round(e, f, g, h, a, b, c, d, 0xc6e00bf3, w12 += sigma1(w10) + w5 + sigma0(w13));\n+    Round(d, e, f, g, h, a, b, c, 0xd5a79147, w13 += sigma1(w11) + w6 + sigma0(w14));\n+    Round(c, d, e, f, g, h, a, b, 0x06ca6351, w14 += sigma1(w12) + w7 + sigma0(w15));\n+    Round(b, c, d, e, f, g, h, a, 0x14292967, w15 += sigma1(w13) + w8 + sigma0(w0));\n+\n+    Round(a, b, c, d, e, f, g, h, 0x27b70a85, w0 += sigma1(w14) + w9 + sigma0(w1));\n+    Round(h, a, b, c, d, e, f, g, 0x2e1b2138, w1 += sigma1(w15) + w10 + sigma0(w2));\n+    Round(g, h, a, b, c, d, e, f, 0x4d2c6dfc, w2 += sigma1(w0) + w11 + sigma0(w3));\n+    Round(f, g, h, a, b, c, d, e, 0x53380d13, w3 += sigma1(w1) + w12 + sigma0(w4));\n+    Round(e, f, g, h, a, b, c, d, 0x650a7354, w4 += sigma1(w2) + w13 + sigma0(w5));\n+    Round(d, e, f, g, h, a, b, c, 0x766a0abb, w5 += sigma1(w3) + w14 + sigma0(w6));\n+    Round(c, d, e, f, g, h, a, b, 0x81c2c92e, w6 += sigma1(w4) + w15 + sigma0(w7));\n+    Round(b, c, d, e, f, g, h, a, 0x92722c85, w7 += sigma1(w5) + w0 + sigma0(w8));\n+    Round(a, b, c, d, e, f, g, h, 0xa2bfe8a1, w8 += sigma1(w6) + w1 + sigma0(w9));\n+    Round(h, a, b, c, d, e, f, g, 0xa81a664b, w9 += sigma1(w7) + w2 + sigma0(w10));\n+    Round(g, h, a, b, c, d, e, f, 0xc24b8b70, w10 += sigma1(w8) + w3 + sigma0(w11));\n+    Round(f, g, h, a, b, c, d, e, 0xc76c51a3, w11 += sigma1(w9) + w4 + sigma0(w12));\n+    Round(e, f, g, h, a, b, c, d, 0xd192e819, w12 += sigma1(w10) + w5 + sigma0(w13));\n+    Round(d, e, f, g, h, a, b, c, 0xd6990624, w13 += sigma1(w11) + w6 + sigma0(w14));\n+    Round(c, d, e, f, g, h, a, b, 0xf40e3585, w14 += sigma1(w12) + w7 + sigma0(w15));\n+    Round(b, c, d, e, f, g, h, a, 0x106aa070, w15 += sigma1(w13) + w8 + sigma0(w0));\n+\n+    Round(a, b, c, d, e, f, g, h, 0x19a4c116, w0 += sigma1(w14) + w9 + sigma0(w1));\n+    Round(h, a, b, c, d, e, f, g, 0x1e376c08, w1 += sigma1(w15) + w10 + sigma0(w2));\n+    Round(g, h, a, b, c, d, e, f, 0x2748774c, w2 += sigma1(w0) + w11 + sigma0(w3));\n+    Round(f, g, h, a, b, c, d, e, 0x34b0bcb5, w3 += sigma1(w1) + w12 + sigma0(w4));\n+    Round(e, f, g, h, a, b, c, d, 0x391c0cb3, w4 += sigma1(w2) + w13 + sigma0(w5));\n+    Round(d, e, f, g, h, a, b, c, 0x4ed8aa4a, w5 += sigma1(w3) + w14 + sigma0(w6));\n+    Round(c, d, e, f, g, h, a, b, 0x5b9cca4f, w6 += sigma1(w4) + w15 + sigma0(w7));\n+    Round(b, c, d, e, f, g, h, a, 0x682e6ff3, w7 += sigma1(w5) + w0 + sigma0(w8));\n+    Round(a, b, c, d, e, f, g, h, 0x748f82ee, w8 += sigma1(w6) + w1 + sigma0(w9));\n+    Round(h, a, b, c, d, e, f, g, 0x78a5636f, w9 += sigma1(w7) + w2 + sigma0(w10));\n+    Round(g, h, a, b, c, d, e, f, 0x84c87814, w10 += sigma1(w8) + w3 + sigma0(w11));\n+    Round(f, g, h, a, b, c, d, e, 0x8cc70208, w11 += sigma1(w9) + w4 + sigma0(w12));\n+    Round(e, f, g, h, a, b, c, d, 0x90befffa, w12 += sigma1(w10) + w5 + sigma0(w13));\n+    Round(d, e, f, g, h, a, b, c, 0xa4506ceb, w13 += sigma1(w11) + w6 + sigma0(w14));\n+    Round(c, d, e, f, g, h, a, b, 0xbef9a3f7, w14 + sigma1(w12) + w7 + sigma0(w15));\n+    Round(b, c, d, e, f, g, h, a, 0xc67178f2, w15 + sigma1(w13) + w8 + sigma0(w0));\n \n     s[0] += a;\n     s[1] += b;\n@@ -126,11 +127,11 @@ void Transform(uint32_t *s, const unsigned char *chunk) {\n     s[7] += h;\n }\n \n-}  // namespace sha256\n+} // namespace sha256\n \n /// Internal SHA-512 implementation.\n-namespace sha512 {\n-\n+namespace sha512\n+{\n uint64_t inline Ch(uint64_t x, uint64_t y, uint64_t z) { return z ^ (x & (y ^ z)); }\n uint64_t inline Maj(uint64_t x, uint64_t y, uint64_t z) { return (x & y) | (z & (x | y)); }\n uint64_t inline Sigma0(uint64_t x) { return (x >> 28 | x << 36) ^ (x >> 34 | x << 30) ^ (x >> 39 | x << 25); }\n@@ -139,17 +140,17 @@ uint64_t inline sigma0(uint64_t x) { return (x >> 1 | x << 63) ^ (x >> 8 | x <<\n uint64_t inline sigma1(uint64_t x) { return (x >> 19 | x << 45) ^ (x >> 61 | x << 3) ^ (x >> 6); }\n \n /** One round of SHA-512. */\n-void inline Round(uint64_t a, uint64_t b, uint64_t c, uint64_t &d,\n-                  uint64_t e, uint64_t f, uint64_t g, uint64_t &h,\n-                  uint64_t k, uint64_t w) {\n+void inline Round(uint64_t a, uint64_t b, uint64_t c, uint64_t& d, uint64_t e, uint64_t f, uint64_t g, uint64_t& h, uint64_t k, uint64_t w)\n+{\n     uint64_t t1 = h + Sigma1(e) + Ch(e, f, g) + k + w;\n     uint64_t t2 = Sigma0(a) + Maj(a, b, c);\n     d += t1;\n     h = t1 + t2;\n }\n \n /** Initialize SHA-256 state. */\n-void inline Initialize(uint64_t *s) {\n+void inline Initialize(uint64_t* s)\n+{\n     s[0] = 0x6a09e667f3bcc908ull;\n     s[1] = 0xbb67ae8584caa73bull;\n     s[2] = 0x3c6ef372fe94f82bull;\n@@ -161,94 +162,95 @@ void inline Initialize(uint64_t *s) {\n }\n \n /** Perform one SHA-512 transformation, processing a 128-byte chunk. */\n-void Transform(uint64_t *s, const unsigned char *chunk) {\n+void Transform(uint64_t* s, const unsigned char* chunk)\n+{\n     uint64_t a = s[0], b = s[1], c = s[2], d = s[3], e = s[4], f = s[5], g = s[6], h = s[7];\n     uint64_t w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15;\n \n-    Round(a, b, c, d, e, f, g, h, 0x428a2f98d728ae22ull,  w0 = ReadBE64(chunk + 0));\n-    Round(h, a, b, c, d, e, f, g, 0x7137449123ef65cdull,  w1 = ReadBE64(chunk + 8));\n-    Round(g, h, a, b, c, d, e, f, 0xb5c0fbcfec4d3b2full,  w2 = ReadBE64(chunk + 16));\n-    Round(f, g, h, a, b, c, d, e, 0xe9b5dba58189dbbcull,  w3 = ReadBE64(chunk + 24));\n-    Round(e, f, g, h, a, b, c, d, 0x3956c25bf348b538ull,  w4 = ReadBE64(chunk + 32));\n-    Round(d, e, f, g, h, a, b, c, 0x59f111f1b605d019ull,  w5 = ReadBE64(chunk + 40));\n-    Round(c, d, e, f, g, h, a, b, 0x923f82a4af194f9bull,  w6 = ReadBE64(chunk + 48));\n-    Round(b, c, d, e, f, g, h, a, 0xab1c5ed5da6d8118ull,  w7 = ReadBE64(chunk + 56));\n-    Round(a, b, c, d, e, f, g, h, 0xd807aa98a3030242ull,  w8 = ReadBE64(chunk + 64));\n-    Round(h, a, b, c, d, e, f, g, 0x12835b0145706fbeull,  w9 = ReadBE64(chunk + 72));\n+    Round(a, b, c, d, e, f, g, h, 0x428a2f98d728ae22ull, w0 = ReadBE64(chunk + 0));\n+    Round(h, a, b, c, d, e, f, g, 0x7137449123ef65cdull, w1 = ReadBE64(chunk + 8));\n+    Round(g, h, a, b, c, d, e, f, 0xb5c0fbcfec4d3b2full, w2 = ReadBE64(chunk + 16));\n+    Round(f, g, h, a, b, c, d, e, 0xe9b5dba58189dbbcull, w3 = ReadBE64(chunk + 24));\n+    Round(e, f, g, h, a, b, c, d, 0x3956c25bf348b538ull, w4 = ReadBE64(chunk + 32));\n+    Round(d, e, f, g, h, a, b, c, 0x59f111f1b605d019ull, w5 = ReadBE64(chunk + 40));\n+    Round(c, d, e, f, g, h, a, b, 0x923f82a4af194f9bull, w6 = ReadBE64(chunk + 48));\n+    Round(b, c, d, e, f, g, h, a, 0xab1c5ed5da6d8118ull, w7 = ReadBE64(chunk + 56));\n+    Round(a, b, c, d, e, f, g, h, 0xd807aa98a3030242ull, w8 = ReadBE64(chunk + 64));\n+    Round(h, a, b, c, d, e, f, g, 0x12835b0145706fbeull, w9 = ReadBE64(chunk + 72));\n     Round(g, h, a, b, c, d, e, f, 0x243185be4ee4b28cull, w10 = ReadBE64(chunk + 80));\n     Round(f, g, h, a, b, c, d, e, 0x550c7dc3d5ffb4e2ull, w11 = ReadBE64(chunk + 88));\n     Round(e, f, g, h, a, b, c, d, 0x72be5d74f27b896full, w12 = ReadBE64(chunk + 96));\n     Round(d, e, f, g, h, a, b, c, 0x80deb1fe3b1696b1ull, w13 = ReadBE64(chunk + 104));\n     Round(c, d, e, f, g, h, a, b, 0x9bdc06a725c71235ull, w14 = ReadBE64(chunk + 112));\n     Round(b, c, d, e, f, g, h, a, 0xc19bf174cf692694ull, w15 = ReadBE64(chunk + 120));\n \n-    Round(a, b, c, d, e, f, g, h, 0xe49b69c19ef14ad2ull,  w0 += sigma1(w14) +  w9 + sigma0( w1));\n-    Round(h, a, b, c, d, e, f, g, 0xefbe4786384f25e3ull,  w1 += sigma1(w15) + w10 + sigma0( w2));\n-    Round(g, h, a, b, c, d, e, f, 0x0fc19dc68b8cd5b5ull,  w2 += sigma1( w0) + w11 + sigma0( w3));\n-    Round(f, g, h, a, b, c, d, e, 0x240ca1cc77ac9c65ull,  w3 += sigma1( w1) + w12 + sigma0( w4));\n-    Round(e, f, g, h, a, b, c, d, 0x2de92c6f592b0275ull,  w4 += sigma1( w2) + w13 + sigma0( w5));\n-    Round(d, e, f, g, h, a, b, c, 0x4a7484aa6ea6e483ull,  w5 += sigma1( w3) + w14 + sigma0( w6));\n-    Round(c, d, e, f, g, h, a, b, 0x5cb0a9dcbd41fbd4ull,  w6 += sigma1( w4) + w15 + sigma0( w7));\n-    Round(b, c, d, e, f, g, h, a, 0x76f988da831153b5ull,  w7 += sigma1( w5) +  w0 + sigma0( w8));\n-    Round(a, b, c, d, e, f, g, h, 0x983e5152ee66dfabull,  w8 += sigma1( w6) +  w1 + sigma0( w9));\n-    Round(h, a, b, c, d, e, f, g, 0xa831c66d2db43210ull,  w9 += sigma1( w7) +  w2 + sigma0(w10));\n-    Round(g, h, a, b, c, d, e, f, 0xb00327c898fb213full, w10 += sigma1( w8) +  w3 + sigma0(w11));\n-    Round(f, g, h, a, b, c, d, e, 0xbf597fc7beef0ee4ull, w11 += sigma1( w9) +  w4 + sigma0(w12));\n-    Round(e, f, g, h, a, b, c, d, 0xc6e00bf33da88fc2ull, w12 += sigma1(w10) +  w5 + sigma0(w13));\n-    Round(d, e, f, g, h, a, b, c, 0xd5a79147930aa725ull, w13 += sigma1(w11) +  w6 + sigma0(w14));\n-    Round(c, d, e, f, g, h, a, b, 0x06ca6351e003826full, w14 += sigma1(w12) +  w7 + sigma0(w15));\n-    Round(b, c, d, e, f, g, h, a, 0x142929670a0e6e70ull, w15 += sigma1(w13) +  w8 + sigma0( w0));\n-\n-    Round(a, b, c, d, e, f, g, h, 0x27b70a8546d22ffcull,  w0 += sigma1(w14) +  w9 + sigma0( w1));\n-    Round(h, a, b, c, d, e, f, g, 0x2e1b21385c26c926ull,  w1 += sigma1(w15) + w10 + sigma0( w2));\n-    Round(g, h, a, b, c, d, e, f, 0x4d2c6dfc5ac42aedull,  w2 += sigma1( w0) + w11 + sigma0( w3));\n-    Round(f, g, h, a, b, c, d, e, 0x53380d139d95b3dfull,  w3 += sigma1( w1) + w12 + sigma0( w4));\n-    Round(e, f, g, h, a, b, c, d, 0x650a73548baf63deull,  w4 += sigma1( w2) + w13 + sigma0( w5));\n-    Round(d, e, f, g, h, a, b, c, 0x766a0abb3c77b2a8ull,  w5 += sigma1( w3) + w14 + sigma0( w6));\n-    Round(c, d, e, f, g, h, a, b, 0x81c2c92e47edaee6ull,  w6 += sigma1( w4) + w15 + sigma0( w7));\n-    Round(b, c, d, e, f, g, h, a, 0x92722c851482353bull,  w7 += sigma1( w5) +  w0 + sigma0( w8));\n-    Round(a, b, c, d, e, f, g, h, 0xa2bfe8a14cf10364ull,  w8 += sigma1( w6) +  w1 + sigma0( w9));\n-    Round(h, a, b, c, d, e, f, g, 0xa81a664bbc423001ull,  w9 += sigma1( w7) +  w2 + sigma0(w10));\n-    Round(g, h, a, b, c, d, e, f, 0xc24b8b70d0f89791ull, w10 += sigma1( w8) +  w3 + sigma0(w11));\n-    Round(f, g, h, a, b, c, d, e, 0xc76c51a30654be30ull, w11 += sigma1( w9) +  w4 + sigma0(w12));\n-    Round(e, f, g, h, a, b, c, d, 0xd192e819d6ef5218ull, w12 += sigma1(w10) +  w5 + sigma0(w13));\n-    Round(d, e, f, g, h, a, b, c, 0xd69906245565a910ull, w13 += sigma1(w11) +  w6 + sigma0(w14));\n-    Round(c, d, e, f, g, h, a, b, 0xf40e35855771202aull, w14 += sigma1(w12) +  w7 + sigma0(w15));\n-    Round(b, c, d, e, f, g, h, a, 0x106aa07032bbd1b8ull, w15 += sigma1(w13) +  w8 + sigma0( w0));\n-\n-    Round(a, b, c, d, e, f, g, h, 0x19a4c116b8d2d0c8ull,  w0 += sigma1(w14) +  w9 + sigma0( w1));\n-    Round(h, a, b, c, d, e, f, g, 0x1e376c085141ab53ull,  w1 += sigma1(w15) + w10 + sigma0( w2));\n-    Round(g, h, a, b, c, d, e, f, 0x2748774cdf8eeb99ull,  w2 += sigma1( w0) + w11 + sigma0( w3));\n-    Round(f, g, h, a, b, c, d, e, 0x34b0bcb5e19b48a8ull,  w3 += sigma1( w1) + w12 + sigma0( w4));\n-    Round(e, f, g, h, a, b, c, d, 0x391c0cb3c5c95a63ull,  w4 += sigma1( w2) + w13 + sigma0( w5));\n-    Round(d, e, f, g, h, a, b, c, 0x4ed8aa4ae3418acbull,  w5 += sigma1( w3) + w14 + sigma0( w6));\n-    Round(c, d, e, f, g, h, a, b, 0x5b9cca4f7763e373ull,  w6 += sigma1( w4) + w15 + sigma0( w7));\n-    Round(b, c, d, e, f, g, h, a, 0x682e6ff3d6b2b8a3ull,  w7 += sigma1( w5) +  w0 + sigma0( w8));\n-    Round(a, b, c, d, e, f, g, h, 0x748f82ee5defb2fcull,  w8 += sigma1( w6) +  w1 + sigma0( w9));\n-    Round(h, a, b, c, d, e, f, g, 0x78a5636f43172f60ull,  w9 += sigma1( w7) +  w2 + sigma0(w10));\n-    Round(g, h, a, b, c, d, e, f, 0x84c87814a1f0ab72ull, w10 += sigma1( w8) +  w3 + sigma0(w11));\n-    Round(f, g, h, a, b, c, d, e, 0x8cc702081a6439ecull, w11 += sigma1( w9) +  w4 + sigma0(w12));\n-    Round(e, f, g, h, a, b, c, d, 0x90befffa23631e28ull, w12 += sigma1(w10) +  w5 + sigma0(w13));\n-    Round(d, e, f, g, h, a, b, c, 0xa4506cebde82bde9ull, w13 += sigma1(w11) +  w6 + sigma0(w14));\n-    Round(c, d, e, f, g, h, a, b, 0xbef9a3f7b2c67915ull, w14 += sigma1(w12) +  w7 + sigma0(w15));\n-    Round(b, c, d, e, f, g, h, a, 0xc67178f2e372532bull, w15 += sigma1(w13) +  w8 + sigma0( w0));\n-\n-    Round(a, b, c, d, e, f, g, h, 0xca273eceea26619cull,  w0 += sigma1(w14) +  w9 + sigma0( w1));\n-    Round(h, a, b, c, d, e, f, g, 0xd186b8c721c0c207ull,  w1 += sigma1(w15) + w10 + sigma0( w2));\n-    Round(g, h, a, b, c, d, e, f, 0xeada7dd6cde0eb1eull,  w2 += sigma1( w0) + w11 + sigma0( w3));\n-    Round(f, g, h, a, b, c, d, e, 0xf57d4f7fee6ed178ull,  w3 += sigma1( w1) + w12 + sigma0( w4));\n-    Round(e, f, g, h, a, b, c, d, 0x06f067aa72176fbaull,  w4 += sigma1( w2) + w13 + sigma0( w5));\n-    Round(d, e, f, g, h, a, b, c, 0x0a637dc5a2c898a6ull,  w5 += sigma1( w3) + w14 + sigma0( w6));\n-    Round(c, d, e, f, g, h, a, b, 0x113f9804bef90daeull,  w6 += sigma1( w4) + w15 + sigma0( w7));\n-    Round(b, c, d, e, f, g, h, a, 0x1b710b35131c471bull,  w7 += sigma1( w5) +  w0 + sigma0( w8));\n-    Round(a, b, c, d, e, f, g, h, 0x28db77f523047d84ull,  w8 += sigma1( w6) +  w1 + sigma0( w9));\n-    Round(h, a, b, c, d, e, f, g, 0x32caab7b40c72493ull,  w9 += sigma1( w7) +  w2 + sigma0(w10));\n-    Round(g, h, a, b, c, d, e, f, 0x3c9ebe0a15c9bebcull, w10 += sigma1( w8) +  w3 + sigma0(w11));\n-    Round(f, g, h, a, b, c, d, e, 0x431d67c49c100d4cull, w11 += sigma1( w9) +  w4 + sigma0(w12));\n-    Round(e, f, g, h, a, b, c, d, 0x4cc5d4becb3e42b6ull, w12 += sigma1(w10) +  w5 + sigma0(w13));\n-    Round(d, e, f, g, h, a, b, c, 0x597f299cfc657e2aull, w13 += sigma1(w11) +  w6 + sigma0(w14));\n-    Round(c, d, e, f, g, h, a, b, 0x5fcb6fab3ad6faecull, w14 += sigma1(w12) +  w7 + sigma0(w15));\n-    Round(b, c, d, e, f, g, h, a, 0x6c44198c4a475817ull, w15 += sigma1(w13) +  w8 + sigma0( w0));\n+    Round(a, b, c, d, e, f, g, h, 0xe49b69c19ef14ad2ull, w0 += sigma1(w14) + w9 + sigma0(w1));\n+    Round(h, a, b, c, d, e, f, g, 0xefbe4786384f25e3ull, w1 += sigma1(w15) + w10 + sigma0(w2));\n+    Round(g, h, a, b, c, d, e, f, 0x0fc19dc68b8cd5b5ull, w2 += sigma1(w0) + w11 + sigma0(w3));\n+    Round(f, g, h, a, b, c, d, e, 0x240ca1cc77ac9c65ull, w3 += sigma1(w1) + w12 + sigma0(w4));\n+    Round(e, f, g, h, a, b, c, d, 0x2de92c6f592b0275ull, w4 += sigma1(w2) + w13 + sigma0(w5));\n+    Round(d, e, f, g, h, a, b, c, 0x4a7484aa6ea6e483ull, w5 += sigma1(w3) + w14 + sigma0(w6));\n+    Round(c, d, e, f, g, h, a, b, 0x5cb0a9dcbd41fbd4ull, w6 += sigma1(w4) + w15 + sigma0(w7));\n+    Round(b, c, d, e, f, g, h, a, 0x76f988da831153b5ull, w7 += sigma1(w5) + w0 + sigma0(w8));\n+    Round(a, b, c, d, e, f, g, h, 0x983e5152ee66dfabull, w8 += sigma1(w6) + w1 + sigma0(w9));\n+    Round(h, a, b, c, d, e, f, g, 0xa831c66d2db43210ull, w9 += sigma1(w7) + w2 + sigma0(w10));\n+    Round(g, h, a, b, c, d, e, f, 0xb00327c898fb213full, w10 += sigma1(w8) + w3 + sigma0(w11));\n+    Round(f, g, h, a, b, c, d, e, 0xbf597fc7beef0ee4ull, w11 += sigma1(w9) + w4 + sigma0(w12));\n+    Round(e, f, g, h, a, b, c, d, 0xc6e00bf33da88fc2ull, w12 += sigma1(w10) + w5 + sigma0(w13));\n+    Round(d, e, f, g, h, a, b, c, 0xd5a79147930aa725ull, w13 += sigma1(w11) + w6 + sigma0(w14));\n+    Round(c, d, e, f, g, h, a, b, 0x06ca6351e003826full, w14 += sigma1(w12) + w7 + sigma0(w15));\n+    Round(b, c, d, e, f, g, h, a, 0x142929670a0e6e70ull, w15 += sigma1(w13) + w8 + sigma0(w0));\n+\n+    Round(a, b, c, d, e, f, g, h, 0x27b70a8546d22ffcull, w0 += sigma1(w14) + w9 + sigma0(w1));\n+    Round(h, a, b, c, d, e, f, g, 0x2e1b21385c26c926ull, w1 += sigma1(w15) + w10 + sigma0(w2));\n+    Round(g, h, a, b, c, d, e, f, 0x4d2c6dfc5ac42aedull, w2 += sigma1(w0) + w11 + sigma0(w3));\n+    Round(f, g, h, a, b, c, d, e, 0x53380d139d95b3dfull, w3 += sigma1(w1) + w12 + sigma0(w4));\n+    Round(e, f, g, h, a, b, c, d, 0x650a73548baf63deull, w4 += sigma1(w2) + w13 + sigma0(w5));\n+    Round(d, e, f, g, h, a, b, c, 0x766a0abb3c77b2a8ull, w5 += sigma1(w3) + w14 + sigma0(w6));\n+    Round(c, d, e, f, g, h, a, b, 0x81c2c92e47edaee6ull, w6 += sigma1(w4) + w15 + sigma0(w7));\n+    Round(b, c, d, e, f, g, h, a, 0x92722c851482353bull, w7 += sigma1(w5) + w0 + sigma0(w8));\n+    Round(a, b, c, d, e, f, g, h, 0xa2bfe8a14cf10364ull, w8 += sigma1(w6) + w1 + sigma0(w9));\n+    Round(h, a, b, c, d, e, f, g, 0xa81a664bbc423001ull, w9 += sigma1(w7) + w2 + sigma0(w10));\n+    Round(g, h, a, b, c, d, e, f, 0xc24b8b70d0f89791ull, w10 += sigma1(w8) + w3 + sigma0(w11));\n+    Round(f, g, h, a, b, c, d, e, 0xc76c51a30654be30ull, w11 += sigma1(w9) + w4 + sigma0(w12));\n+    Round(e, f, g, h, a, b, c, d, 0xd192e819d6ef5218ull, w12 += sigma1(w10) + w5 + sigma0(w13));\n+    Round(d, e, f, g, h, a, b, c, 0xd69906245565a910ull, w13 += sigma1(w11) + w6 + sigma0(w14));\n+    Round(c, d, e, f, g, h, a, b, 0xf40e35855771202aull, w14 += sigma1(w12) + w7 + sigma0(w15));\n+    Round(b, c, d, e, f, g, h, a, 0x106aa07032bbd1b8ull, w15 += sigma1(w13) + w8 + sigma0(w0));\n+\n+    Round(a, b, c, d, e, f, g, h, 0x19a4c116b8d2d0c8ull, w0 += sigma1(w14) + w9 + sigma0(w1));\n+    Round(h, a, b, c, d, e, f, g, 0x1e376c085141ab53ull, w1 += sigma1(w15) + w10 + sigma0(w2));\n+    Round(g, h, a, b, c, d, e, f, 0x2748774cdf8eeb99ull, w2 += sigma1(w0) + w11 + sigma0(w3));\n+    Round(f, g, h, a, b, c, d, e, 0x34b0bcb5e19b48a8ull, w3 += sigma1(w1) + w12 + sigma0(w4));\n+    Round(e, f, g, h, a, b, c, d, 0x391c0cb3c5c95a63ull, w4 += sigma1(w2) + w13 + sigma0(w5));\n+    Round(d, e, f, g, h, a, b, c, 0x4ed8aa4ae3418acbull, w5 += sigma1(w3) + w14 + sigma0(w6));\n+    Round(c, d, e, f, g, h, a, b, 0x5b9cca4f7763e373ull, w6 += sigma1(w4) + w15 + sigma0(w7));\n+    Round(b, c, d, e, f, g, h, a, 0x682e6ff3d6b2b8a3ull, w7 += sigma1(w5) + w0 + sigma0(w8));\n+    Round(a, b, c, d, e, f, g, h, 0x748f82ee5defb2fcull, w8 += sigma1(w6) + w1 + sigma0(w9));\n+    Round(h, a, b, c, d, e, f, g, 0x78a5636f43172f60ull, w9 += sigma1(w7) + w2 + sigma0(w10));\n+    Round(g, h, a, b, c, d, e, f, 0x84c87814a1f0ab72ull, w10 += sigma1(w8) + w3 + sigma0(w11));\n+    Round(f, g, h, a, b, c, d, e, 0x8cc702081a6439ecull, w11 += sigma1(w9) + w4 + sigma0(w12));\n+    Round(e, f, g, h, a, b, c, d, 0x90befffa23631e28ull, w12 += sigma1(w10) + w5 + sigma0(w13));\n+    Round(d, e, f, g, h, a, b, c, 0xa4506cebde82bde9ull, w13 += sigma1(w11) + w6 + sigma0(w14));\n+    Round(c, d, e, f, g, h, a, b, 0xbef9a3f7b2c67915ull, w14 += sigma1(w12) + w7 + sigma0(w15));\n+    Round(b, c, d, e, f, g, h, a, 0xc67178f2e372532bull, w15 += sigma1(w13) + w8 + sigma0(w0));\n+\n+    Round(a, b, c, d, e, f, g, h, 0xca273eceea26619cull, w0 += sigma1(w14) + w9 + sigma0(w1));\n+    Round(h, a, b, c, d, e, f, g, 0xd186b8c721c0c207ull, w1 += sigma1(w15) + w10 + sigma0(w2));\n+    Round(g, h, a, b, c, d, e, f, 0xeada7dd6cde0eb1eull, w2 += sigma1(w0) + w11 + sigma0(w3));\n+    Round(f, g, h, a, b, c, d, e, 0xf57d4f7fee6ed178ull, w3 += sigma1(w1) + w12 + sigma0(w4));\n+    Round(e, f, g, h, a, b, c, d, 0x06f067aa72176fbaull, w4 += sigma1(w2) + w13 + sigma0(w5));\n+    Round(d, e, f, g, h, a, b, c, 0x0a637dc5a2c898a6ull, w5 += sigma1(w3) + w14 + sigma0(w6));\n+    Round(c, d, e, f, g, h, a, b, 0x113f9804bef90daeull, w6 += sigma1(w4) + w15 + sigma0(w7));\n+    Round(b, c, d, e, f, g, h, a, 0x1b710b35131c471bull, w7 += sigma1(w5) + w0 + sigma0(w8));\n+    Round(a, b, c, d, e, f, g, h, 0x28db77f523047d84ull, w8 += sigma1(w6) + w1 + sigma0(w9));\n+    Round(h, a, b, c, d, e, f, g, 0x32caab7b40c72493ull, w9 += sigma1(w7) + w2 + sigma0(w10));\n+    Round(g, h, a, b, c, d, e, f, 0x3c9ebe0a15c9bebcull, w10 += sigma1(w8) + w3 + sigma0(w11));\n+    Round(f, g, h, a, b, c, d, e, 0x431d67c49c100d4cull, w11 += sigma1(w9) + w4 + sigma0(w12));\n+    Round(e, f, g, h, a, b, c, d, 0x4cc5d4becb3e42b6ull, w12 += sigma1(w10) + w5 + sigma0(w13));\n+    Round(d, e, f, g, h, a, b, c, 0x597f299cfc657e2aull, w13 += sigma1(w11) + w6 + sigma0(w14));\n+    Round(c, d, e, f, g, h, a, b, 0x5fcb6fab3ad6faecull, w14 += sigma1(w12) + w7 + sigma0(w15));\n+    Round(b, c, d, e, f, g, h, a, 0x6c44198c4a475817ull, w15 += sigma1(w13) + w8 + sigma0(w0));\n \n     s[0] += a;\n     s[1] += b;\n@@ -260,19 +262,21 @@ void Transform(uint64_t *s, const unsigned char *chunk) {\n     s[7] += h;\n }\n \n-}  // namespace sha512\n+} // namespace sha512\n \n-}  // namespace\n+} // namespace\n \n \n ////// SHA-256\n \n-CSHA256::CSHA256() : bytes(0) {\n+CSHA256::CSHA256() : bytes(0)\n+{\n     sha256::Initialize(s);\n }\n \n-CSHA256& CSHA256::Write(const unsigned char *data, size_t len) {\n-    const unsigned char *end = data + len;\n+CSHA256& CSHA256::Write(const unsigned char* data, size_t len)\n+{\n+    const unsigned char* end = data + len;\n     size_t bufsize = bytes % 64;\n     if (bufsize && bufsize + len >= 64) {\n         // Fill the buffer, and process it.\n@@ -296,36 +300,40 @@ CSHA256& CSHA256::Write(const unsigned char *data, size_t len) {\n     return *this;\n }\n \n-void CSHA256::Finalize(unsigned char hash[OUTPUT_SIZE]) {\n+void CSHA256::Finalize(unsigned char hash[OUTPUT_SIZE])\n+{\n     static const unsigned char pad[64] = {0x80};\n     unsigned char sizedesc[8];\n     WriteBE64(sizedesc, bytes << 3);\n     Write(pad, 1 + ((119 - (bytes % 64)) % 64));\n     Write(sizedesc, 8);\n     WriteBE32(hash, s[0]);\n-    WriteBE32(hash+4, s[1]);\n-    WriteBE32(hash+8, s[2]);\n-    WriteBE32(hash+12, s[3]);\n-    WriteBE32(hash+16, s[4]);\n-    WriteBE32(hash+20, s[5]);\n-    WriteBE32(hash+24, s[6]);\n-    WriteBE32(hash+28, s[7]);\n+    WriteBE32(hash + 4, s[1]);\n+    WriteBE32(hash + 8, s[2]);\n+    WriteBE32(hash + 12, s[3]);\n+    WriteBE32(hash + 16, s[4]);\n+    WriteBE32(hash + 20, s[5]);\n+    WriteBE32(hash + 24, s[6]);\n+    WriteBE32(hash + 28, s[7]);\n }\n \n-CSHA256& CSHA256::Reset() {\n+CSHA256& CSHA256::Reset()\n+{\n     bytes = 0;\n     sha256::Initialize(s);\n     return *this;\n }\n \n ////// SHA-512\n \n-CSHA512::CSHA512() : bytes(0) {\n+CSHA512::CSHA512() : bytes(0)\n+{\n     sha512::Initialize(s);\n }\n \n-CSHA512& CSHA512::Write(const unsigned char *data, size_t len) {\n-    const unsigned char *end = data + len;\n+CSHA512& CSHA512::Write(const unsigned char* data, size_t len)\n+{\n+    const unsigned char* end = data + len;\n     size_t bufsize = bytes % 128;\n     if (bufsize && bufsize + len >= 128) {\n         // Fill the buffer, and process it.\n@@ -349,31 +357,34 @@ CSHA512& CSHA512::Write(const unsigned char *data, size_t len) {\n     return *this;\n }\n \n-void CSHA512::Finalize(unsigned char hash[OUTPUT_SIZE]) {\n+void CSHA512::Finalize(unsigned char hash[OUTPUT_SIZE])\n+{\n     static const unsigned char pad[128] = {0x80};\n     unsigned char sizedesc[16] = {0x00};\n-    WriteBE64(sizedesc+8, bytes << 3);\n+    WriteBE64(sizedesc + 8, bytes << 3);\n     Write(pad, 1 + ((239 - (bytes % 128)) % 128));\n     Write(sizedesc, 16);\n     WriteBE64(hash, s[0]);\n-    WriteBE64(hash+8, s[1]);\n-    WriteBE64(hash+16, s[2]);\n-    WriteBE64(hash+24, s[3]);\n-    WriteBE64(hash+32, s[4]);\n-    WriteBE64(hash+40, s[5]);\n-    WriteBE64(hash+48, s[6]);\n-    WriteBE64(hash+56, s[7]);\n+    WriteBE64(hash + 8, s[1]);\n+    WriteBE64(hash + 16, s[2]);\n+    WriteBE64(hash + 24, s[3]);\n+    WriteBE64(hash + 32, s[4]);\n+    WriteBE64(hash + 40, s[5]);\n+    WriteBE64(hash + 48, s[6]);\n+    WriteBE64(hash + 56, s[7]);\n }\n \n-CSHA512& CSHA512::Reset() {\n+CSHA512& CSHA512::Reset()\n+{\n     bytes = 0;\n     sha512::Initialize(s);\n     return *this;\n }\n \n ////// HMAC-SHA-512\n \n-CHMAC_SHA512::CHMAC_SHA512(const unsigned char *key, size_t keylen) {\n+CHMAC_SHA512::CHMAC_SHA512(const unsigned char* key, size_t keylen)\n+{\n     unsigned char rkey[128];\n     if (keylen <= 128) {\n         memcpy(rkey, key, keylen);\n@@ -383,16 +394,17 @@ CHMAC_SHA512::CHMAC_SHA512(const unsigned char *key, size_t keylen) {\n         memset(rkey + 64, 0, 64);\n     }\n \n-    for (int n=0; n<128; n++)\n+    for (int n = 0; n < 128; n++)\n         rkey[n] ^= 0x5c;\n     outer.Write(rkey, 128);\n \n-    for (int n=0; n<128; n++)\n+    for (int n = 0; n < 128; n++)\n         rkey[n] ^= 0x5c ^ 0x36;\n     inner.Write(rkey, 128);\n }\n \n-void CHMAC_SHA512::Finalize(unsigned char hash[OUTPUT_SIZE]) {\n+void CHMAC_SHA512::Finalize(unsigned char hash[OUTPUT_SIZE])\n+{\n     unsigned char temp[64];\n     inner.Finalize(temp);\n     outer.Write(temp, 64).Finalize(hash);"
      },
      {
        "sha": "15ad5ac3830fe83ddbfc42a697623f59d9381c7c",
        "filename": "src/crypto/sha2.h",
        "status": "modified",
        "additions": 11,
        "deletions": 7,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cf42c36e9963f9cf13704d8d74a9546f0db33d40/src/crypto/sha2.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cf42c36e9963f9cf13704d8d74a9546f0db33d40/src/crypto/sha2.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/sha2.h?ref=cf42c36e9963f9cf13704d8d74a9546f0db33d40",
        "patch": "@@ -9,7 +9,8 @@\n #include <stdlib.h>\n \n /** A hasher class for SHA-256. */\n-class CSHA256 {\n+class CSHA256\n+{\n private:\n     uint32_t s[8];\n     unsigned char buf[64];\n@@ -19,13 +20,14 @@ class CSHA256 {\n     static const size_t OUTPUT_SIZE = 32;\n \n     CSHA256();\n-    CSHA256& Write(const unsigned char *data, size_t len);\n+    CSHA256& Write(const unsigned char* data, size_t len);\n     void Finalize(unsigned char hash[OUTPUT_SIZE]);\n     CSHA256& Reset();\n };\n \n /** A hasher class for SHA-512. */\n-class CSHA512 {\n+class CSHA512\n+{\n private:\n     uint64_t s[8];\n     unsigned char buf[128];\n@@ -35,22 +37,24 @@ class CSHA512 {\n     static const size_t OUTPUT_SIZE = 64;\n \n     CSHA512();\n-    CSHA512& Write(const unsigned char *data, size_t len);\n+    CSHA512& Write(const unsigned char* data, size_t len);\n     void Finalize(unsigned char hash[OUTPUT_SIZE]);\n     CSHA512& Reset();\n };\n \n /** A hasher class for HMAC-SHA-512. */\n-class CHMAC_SHA512 {\n+class CHMAC_SHA512\n+{\n private:\n     CSHA512 outer;\n     CSHA512 inner;\n \n public:\n     static const size_t OUTPUT_SIZE = 64;\n \n-    CHMAC_SHA512(const unsigned char *key, size_t keylen);\n-    CHMAC_SHA512& Write(const unsigned char *data, size_t len) {\n+    CHMAC_SHA512(const unsigned char* key, size_t keylen);\n+    CHMAC_SHA512& Write(const unsigned char* data, size_t len)\n+    {\n         inner.Write(data, len);\n         return *this;\n     }"
      }
    ]
  }
]