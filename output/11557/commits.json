[
  {
    "sha": "c3899716c9ce8ad5eee3e31fd6eab8be39b760e0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMzg5OTcxNmM5Y2U4YWQ1ZWVlM2UzMWZkNmVhYjhiZTM5Yjc2MGUw",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2017-10-25T09:12:08Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2017-10-25T10:39:39Z"
      },
      "message": "[Wallet] use Sat/WU instead of (\u03bc/m)BTC/kB\n\nWeight Units should be used instead of bytes. Sat/WU produces\nvalues between 0.01 - 100 if prices and fees stay within a few\norders of magnitude of todays. This makes them easier to reason\nabout for users.",
      "tree": {
        "sha": "f886a7487ab0d29090384cf857bbae753b8db859",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f886a7487ab0d29090384cf857bbae753b8db859"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c3899716c9ce8ad5eee3e31fd6eab8be39b760e0",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJHBAABCgAxFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAlnwae0THHNqb3JzQHNw\ncm92b29zdC5ubAAKCRBX/5vbzDAQCapDEACZLC3f2o+41NjLYmbM7w3ujCyMwnar\nZ+d1pI4yFe13CNPLcY7JvEp5JODzIT4jp1r4g8Jog/J2EEBV56DR7IHLuiShPZG6\nRvGsU5WLIYUwP+C7ZvlwYaQDa0PY+TyW2o6fJzNnOo5dtudW//sjVr4QtQcBOGfJ\nLGraid53s7/WYaZY/F5nsKJrFirnnyAwqvA8kL9GELCSAtXfBJHR5vOgwKkPQPrT\nhpozsSZJ988xnnvLtgE0oAN96fD+kgUJJ5KRdcB4EZiRTNZJ43r2B0LvTIzDAJxo\nUVyVbBLD0L+OwwY3xB8rdsRMDPqW/aoxOMVzR4N/8WP3gdC7TwLbgKhlkMycopKo\nkGScFd3T3p5IruanKMQj0EIs9GKAB+gbhxDva/Y9Awe+27fyhcfk8dXtBt9Ch+T8\nPqpm7XAj5YvjvUtd92hSnuMywnvoAQoC5gvc/P6Ti6b69sBtmdg5dbmUc1AoNBY0\n1Vz/IZ6ftbY37/eHrXuoGU8NM6u4he8t28aEfsFm/1s50fnrII1JfRqvJcT4Xa04\nB2AV6oo4jKDzIdhLVowzmtPAecUEdTdZYlPOflbnzTT4RwgtVA/sw0TgsSvOTIAq\ngkzZ/s2/WIuP+/9rX6FhXXYUfuO+3SHCLHK817+n6ho7JS/M7owWDQOFrNCXdShd\nF7GWqlNqkZR/pA==\n=NtSB\n-----END PGP SIGNATURE-----",
        "payload": "tree f886a7487ab0d29090384cf857bbae753b8db859\nparent 57ee73990f1ce29916adfd99f93eae1ccea1a43b\nauthor Sjors Provoost <sjors@sprovoost.nl> 1508922728 +0800\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1508927979 +0800\n\n[Wallet] use Sat/WU instead of (\u03bc/m)BTC/kB\n\nWeight Units should be used instead of bytes. Sat/WU produces\nvalues between 0.01 - 100 if prices and fees stay within a few\norders of magnitude of todays. This makes them easier to reason\nabout for users.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c3899716c9ce8ad5eee3e31fd6eab8be39b760e0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c3899716c9ce8ad5eee3e31fd6eab8be39b760e0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c3899716c9ce8ad5eee3e31fd6eab8be39b760e0/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "57ee73990f1ce29916adfd99f93eae1ccea1a43b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/57ee73990f1ce29916adfd99f93eae1ccea1a43b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/57ee73990f1ce29916adfd99f93eae1ccea1a43b"
      }
    ],
    "stats": {
      "total": 311,
      "additions": 155,
      "deletions": 156
    },
    "files": [
      {
        "sha": "35c869c108fb77f23753cd230fcd28627c7ea801",
        "filename": "doc/man/bitcoin-qt.1",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3899716c9ce8ad5eee3e31fd6eab8be39b760e0/doc/man/bitcoin-qt.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3899716c9ce8ad5eee3e31fd6eab8be39b760e0/doc/man/bitcoin-qt.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoin-qt.1?ref=c3899716c9ce8ad5eee3e31fd6eab8be39b760e0",
        "patch": "@@ -268,25 +268,25 @@ Set key pool size to <n> (default: 1000)\n .HP\n \\fB\\-fallbackfee=\\fR<amt>\n .IP\n-A fee rate (in BTC/kB) that will be used when fee estimation has\n-insufficient data (default: 0.0002)\n+A fee rate (in Sat/WU) that will be used when fee estimation has\n+insufficient data (default: 5)\n .HP\n \\fB\\-discardfee=\\fR<amt>\n .IP\n-The fee rate (in BTC/kB) that indicates your tolerance for discarding\n-change by adding it to the fee (default: 0.0001). Note: An output\n+The fee rate (in Sat/WU) that indicates your tolerance for discarding\n+change by adding it to the fee (default: 2.5. Note: An output\n is discarded if it is dust at this rate, but we will always\n discard up to the dust relay fee and a discard fee above that is\n limited by the fee estimate for the longest target\n .HP\n \\fB\\-mintxfee=\\fR<amt>\n .IP\n-Fees (in BTC/kB) smaller than this are considered zero fee for\n-transaction creation (default: 0.00001)\n+Fees (in Sat/WU) smaller than this are considered zero fee for\n+transaction creation (default: 0.25)\n .HP\n \\fB\\-paytxfee=\\fR<amt>\n .IP\n-Fee (in BTC/kB) to add to transactions you send (default: 0.00)\n+Fee (in Sat/WU) to add to transactions you send (default: 0.00)\n .HP\n \\fB\\-rescan\\fR\n .IP\n@@ -426,8 +426,8 @@ Enable transaction replacement in the memory pool (default: 1)\n .HP\n \\fB\\-minrelaytxfee=\\fR<amt>\n .IP\n-Fees (in BTC/kB) smaller than this are considered zero fee for relaying,\n-mining and transaction creation (default: 0.00001)\n+Fees (in Sat/WU) smaller than this are considered zero fee for relaying,\n+mining and transaction creation (default: 0.25)\n .HP\n \\fB\\-whitelistrelay\\fR\n .IP\n@@ -452,8 +452,8 @@ blockmaxweight\n .HP\n \\fB\\-blockmintxfee=\\fR<amt>\n .IP\n-Set lowest fee rate (in BTC/kB) for transactions to be included in block\n-creation. (default: 0.00001)\n+Set lowest fee rate (in Sat/WU) for transactions to be included in block\n+creation. (default: 0.25)\n .PP\n RPC server options:\n .HP"
      },
      {
        "sha": "3849264f4e6a7e9c472b438784e2a4008cdc8b35",
        "filename": "doc/man/bitcoind.1",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3899716c9ce8ad5eee3e31fd6eab8be39b760e0/doc/man/bitcoind.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3899716c9ce8ad5eee3e31fd6eab8be39b760e0/doc/man/bitcoind.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoind.1?ref=c3899716c9ce8ad5eee3e31fd6eab8be39b760e0",
        "patch": "@@ -273,25 +273,25 @@ Set key pool size to <n> (default: 1000)\n .HP\n \\fB\\-fallbackfee=\\fR<amt>\n .IP\n-A fee rate (in BTC/kB) that will be used when fee estimation has\n+A fee rate (in Sat/WU) that will be used when fee estimation has\n insufficient data (default: 0.0002)\n .HP\n \\fB\\-discardfee=\\fR<amt>\n .IP\n-The fee rate (in BTC/kB) that indicates your tolerance for discarding\n-change by adding it to the fee (default: 0.0001). Note: An output\n+The fee rate (in Sat/WU) that indicates your tolerance for discarding\n+change by adding it to the fee (default: 0.25. Note: An output\n is discarded if it is dust at this rate, but we will always\n discard up to the dust relay fee and a discard fee above that is\n limited by the fee estimate for the longest target\n .HP\n \\fB\\-mintxfee=\\fR<amt>\n .IP\n-Fees (in BTC/kB) smaller than this are considered zero fee for\n+Fees (in Sat/WU) smaller than this are considered zero fee for\n transaction creation (default: 0.00001)\n .HP\n \\fB\\-paytxfee=\\fR<amt>\n .IP\n-Fee (in BTC/kB) to add to transactions you send (default: 0.00)\n+Fee (in Sat/WU) to add to transactions you send (default: 0.00)\n .HP\n \\fB\\-rescan\\fR\n .IP\n@@ -431,7 +431,7 @@ Enable transaction replacement in the memory pool (default: 1)\n .HP\n \\fB\\-minrelaytxfee=\\fR<amt>\n .IP\n-Fees (in BTC/kB) smaller than this are considered zero fee for relaying,\n+Fees (in Sat/WU) smaller than this are considered zero fee for relaying,\n mining and transaction creation (default: 0.00001)\n .HP\n \\fB\\-whitelistrelay\\fR\n@@ -457,7 +457,7 @@ blockmaxweight\n .HP\n \\fB\\-blockmintxfee=\\fR<amt>\n .IP\n-Set lowest fee rate (in BTC/kB) for transactions to be included in block\n+Set lowest fee rate (in Sat/WU) for transactions to be included in block\n creation. (default: 0.00001)\n .PP\n RPC server options:"
      },
      {
        "sha": "9c91725eb4b1e65c8bc5defb24201368c3c92a21",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3899716c9ce8ad5eee3e31fd6eab8be39b760e0/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3899716c9ce8ad5eee3e31fd6eab8be39b760e0/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=c3899716c9ce8ad5eee3e31fd6eab8be39b760e0",
        "patch": "@@ -456,12 +456,12 @@ std::string HelpMessage(HelpMessageMode mode)\n         strUsage += HelpMessageOpt(\"-maxsigcachesize=<n>\", strprintf(\"Limit sum of signature cache and script execution cache sizes to <n> MiB (default: %u)\", DEFAULT_MAX_SIG_CACHE_SIZE));\n         strUsage += HelpMessageOpt(\"-maxtipage=<n>\", strprintf(\"Maximum tip age in seconds to consider node in initial block download (default: %u)\", DEFAULT_MAX_TIP_AGE));\n     }\n-    strUsage += HelpMessageOpt(\"-maxtxfee=<amt>\", strprintf(_(\"Maximum total fees (in %s) to use in a single wallet transaction or raw transaction; setting this too low may abort large transactions (default: %s)\"),\n-        CURRENCY_UNIT, FormatMoney(DEFAULT_TRANSACTION_MAXFEE)));\n+    strUsage += HelpMessageOpt(\"-maxtxfee=<amt>\", strprintf(_(\"Maximum total fees (in Sat/WU) to use in a single wallet transaction or raw transaction; setting this too low may abort large transactions (default: %s)\"),\n+        FormatMoney(DEFAULT_TRANSACTION_MAXFEE)));\n     strUsage += HelpMessageOpt(\"-printtoconsole\", _(\"Send trace/debug info to console instead of debug.log file\"));\n     if (showDebug)\n     {\n-        strUsage += HelpMessageOpt(\"-printpriority\", strprintf(\"Log transaction fee per kB when mining blocks (default: %u)\", DEFAULT_PRINTPRIORITY));\n+        strUsage += HelpMessageOpt(\"-printpriority\", strprintf(\"Log transaction fee per WU when mining blocks (default: %u)\", DEFAULT_PRINTPRIORITY));\n     }\n     strUsage += HelpMessageOpt(\"-shrinkdebugfile\", _(\"Shrink debug.log file on client startup (default: 1 when no -debug)\"));\n \n@@ -470,22 +470,22 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageGroup(_(\"Node relay options:\"));\n     if (showDebug) {\n         strUsage += HelpMessageOpt(\"-acceptnonstdtxn\", strprintf(\"Relay and mine \\\"non-standard\\\" transactions (%sdefault: %u)\", \"testnet/regtest only; \", !testnetChainParams->RequireStandard()));\n-        strUsage += HelpMessageOpt(\"-incrementalrelayfee=<amt>\", strprintf(\"Fee rate (in %s/kB) used to define cost of relay, used for mempool limiting and BIP 125 replacement. (default: %s)\", CURRENCY_UNIT, FormatMoney(DEFAULT_INCREMENTAL_RELAY_FEE)));\n-        strUsage += HelpMessageOpt(\"-dustrelayfee=<amt>\", strprintf(\"Fee rate (in %s/kB) used to defined dust, the value of an output such that it will cost more than its value in fees at this fee rate to spend it. (default: %s)\", CURRENCY_UNIT, FormatMoney(DUST_RELAY_TX_FEE)));\n+        strUsage += HelpMessageOpt(\"-incrementalrelayfee=<amt>\", strprintf(\"Fee rate (in Sat/WU) used to define cost of relay, used for mempool limiting and BIP 125 replacement. (default: %s)\", FormatMoney(DEFAULT_INCREMENTAL_RELAY_FEE)));\n+        strUsage += HelpMessageOpt(\"-dustrelayfee=<amt>\", strprintf(\"Fee rate (in Sat/WU) used to defined dust, the value of an output such that it will cost more than its value in fees at this fee rate to spend it. (default: %s)\", FormatMoney(DUST_RELAY_TX_FEE)));\n     }\n     strUsage += HelpMessageOpt(\"-bytespersigop\", strprintf(_(\"Equivalent bytes per sigop in transactions for relay and mining (default: %u)\"), DEFAULT_BYTES_PER_SIGOP));\n     strUsage += HelpMessageOpt(\"-datacarrier\", strprintf(_(\"Relay and mine data carrier transactions (default: %u)\"), DEFAULT_ACCEPT_DATACARRIER));\n     strUsage += HelpMessageOpt(\"-datacarriersize\", strprintf(_(\"Maximum size of data in data carrier transactions we relay and mine (default: %u)\"), MAX_OP_RETURN_RELAY));\n     strUsage += HelpMessageOpt(\"-mempoolreplacement\", strprintf(_(\"Enable transaction replacement in the memory pool (default: %u)\"), DEFAULT_ENABLE_REPLACEMENT));\n-    strUsage += HelpMessageOpt(\"-minrelaytxfee=<amt>\", strprintf(_(\"Fees (in %s/kB) smaller than this are considered zero fee for relaying, mining and transaction creation (default: %s)\"),\n-        CURRENCY_UNIT, FormatMoney(DEFAULT_MIN_RELAY_TX_FEE)));\n+    strUsage += HelpMessageOpt(\"-minrelaytxfee=<amt>\", strprintf(_(\"Fees (in Sat/WU) smaller than this are considered zero fee for relaying, mining and transaction creation (default: %s)\"),\n+        FormatMoney(DEFAULT_MIN_RELAY_TX_FEE)));\n     strUsage += HelpMessageOpt(\"-whitelistrelay\", strprintf(_(\"Accept relayed transactions received from whitelisted peers even when not relaying transactions (default: %d)\"), DEFAULT_WHITELISTRELAY));\n     strUsage += HelpMessageOpt(\"-whitelistforcerelay\", strprintf(_(\"Force relay of transactions from whitelisted peers even if they violate local relay policy (default: %d)\"), DEFAULT_WHITELISTFORCERELAY));\n \n     strUsage += HelpMessageGroup(_(\"Block creation options:\"));\n     strUsage += HelpMessageOpt(\"-blockmaxweight=<n>\", strprintf(_(\"Set maximum BIP141 block weight (default: %d)\"), DEFAULT_BLOCK_MAX_WEIGHT));\n     strUsage += HelpMessageOpt(\"-blockmaxsize=<n>\", _(\"Set maximum BIP141 block weight to this * 4. Deprecated, use blockmaxweight\"));\n-    strUsage += HelpMessageOpt(\"-blockmintxfee=<amt>\", strprintf(_(\"Set lowest fee rate (in %s/kB) for transactions to be included in block creation. (default: %s)\"), CURRENCY_UNIT, FormatMoney(DEFAULT_BLOCK_MIN_TX_FEE)));\n+    strUsage += HelpMessageOpt(\"-blockmintxfee=<amt>\", strprintf(_(\"Set lowest fee rate (in Sat/WU) for transactions to be included in block creation. (default: %s)\"), FormatMoney(DEFAULT_BLOCK_MIN_TX_FEE)));\n     if (showDebug)\n         strUsage += HelpMessageOpt(\"-blockversion=<n>\", \"Override block version to test forking scenarios\");\n "
      },
      {
        "sha": "9fdd341c8a8ff1e04feed11931cd695dae47ef71",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3899716c9ce8ad5eee3e31fd6eab8be39b760e0/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3899716c9ce8ad5eee3e31fd6eab8be39b760e0/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=c3899716c9ce8ad5eee3e31fd6eab8be39b760e0",
        "patch": "@@ -3118,7 +3118,7 @@ bool PeerLogicValidation::SendMessages(CNode* pto, std::atomic<bool>& interruptM\n                     CInv inv(MSG_TX, hash);\n                     pto->setInventoryTxToSend.erase(hash);\n                     if (filterrate) {\n-                        if (txinfo.feeRate.GetFeePerK() < filterrate)\n+                        if (txinfo.feeRate.GetFeePerWU() < filterrate)\n                             continue;\n                     }\n                     if (pto->pfilter) {\n@@ -3172,7 +3172,7 @@ bool PeerLogicValidation::SendMessages(CNode* pto, std::atomic<bool>& interruptM\n                     if (!txinfo.tx) {\n                         continue;\n                     }\n-                    if (filterrate && txinfo.feeRate.GetFeePerK() < filterrate) {\n+                    if (filterrate && txinfo.feeRate.GetFeePerWU() < filterrate) {\n                         continue;\n                     }\n                     if (pto->pfilter && !pto->pfilter->IsRelevantAndUpdate(*txinfo.tx)) continue;\n@@ -3314,14 +3314,14 @@ bool PeerLogicValidation::SendMessages(CNode* pto, std::atomic<bool>& interruptM\n         // We don't want white listed peers to filter txs to us if we have -whitelistforcerelay\n         if (pto->nVersion >= FEEFILTER_VERSION && gArgs.GetBoolArg(\"-feefilter\", DEFAULT_FEEFILTER) &&\n             !(pto->fWhitelisted && gArgs.GetBoolArg(\"-whitelistforcerelay\", DEFAULT_WHITELISTFORCERELAY))) {\n-            CAmount currentFilter = mempool.GetMinFee(gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFeePerK();\n+            CAmount currentFilter = mempool.GetMinFee(gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFeePerWU();\n             int64_t timeNow = GetTimeMicros();\n             if (timeNow > pto->nextSendTimeFeeFilter) {\n                 static CFeeRate default_feerate(DEFAULT_MIN_RELAY_TX_FEE);\n                 static FeeFilterRounder filterRounder(default_feerate);\n                 CAmount filterToSend = filterRounder.round(currentFilter);\n                 // We always have a fee filter of at least minRelayTxFee\n-                filterToSend = std::max(filterToSend, ::minRelayTxFee.GetFeePerK());\n+                filterToSend = std::max(filterToSend, ::minRelayTxFee.GetFeePerWU());\n                 if (filterToSend != pto->lastSentFeeFilter) {\n                     connman->PushMessage(pto, msgMaker.Make(NetMsgType::FEEFILTER, filterToSend));\n                     pto->lastSentFeeFilter = filterToSend;"
      },
      {
        "sha": "2e9bf39c87acf8c8a1968935ef84c686153935bd",
        "filename": "src/policy/feerate.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 14,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3899716c9ce8ad5eee3e31fd6eab8be39b760e0/src/policy/feerate.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3899716c9ce8ad5eee3e31fd6eab8be39b760e0/src/policy/feerate.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/feerate.cpp?ref=c3899716c9ce8ad5eee3e31fd6eab8be39b760e0",
        "patch": "@@ -7,30 +7,28 @@\n \n #include \"tinyformat.h\"\n \n-const std::string CURRENCY_UNIT = \"BTC\";\n-\n-CFeeRate::CFeeRate(const CAmount& nFeePaid, size_t nBytes_)\n+CFeeRate::CFeeRate(const CAmount& nFeePaid, size_t nWeightUnits_)\n {\n-    assert(nBytes_ <= uint64_t(std::numeric_limits<int64_t>::max()));\n-    int64_t nSize = int64_t(nBytes_);\n+    assert(nWeightUnits_ <= uint64_t(std::numeric_limits<int64_t>::max()));\n+    int64_t nSize = int64_t(nWeightUnits_);\n \n     if (nSize > 0)\n-        nSatoshisPerK = nFeePaid * 1000 / nSize;\n+        nSatoshisPerWU = nFeePaid * nSize;\n     else\n-        nSatoshisPerK = 0;\n+        nSatoshisPerWU = 0;\n }\n \n-CAmount CFeeRate::GetFee(size_t nBytes_) const\n+CAmount CFeeRate::GetFee(size_t nWeightUnits_) const\n {\n-    assert(nBytes_ <= uint64_t(std::numeric_limits<int64_t>::max()));\n-    int64_t nSize = int64_t(nBytes_);\n+    assert(nWeightUnits_ <= uint64_t(std::numeric_limits<int64_t>::max()));\n+    int64_t nSize = int64_t(nWeightUnits_);\n \n-    CAmount nFee = nSatoshisPerK * nSize / 1000;\n+    CAmount nFee = nSatoshisPerWU * nSize;\n \n     if (nFee == 0 && nSize != 0) {\n-        if (nSatoshisPerK > 0)\n+        if (nSatoshisPerWU > 0)\n             nFee = CAmount(1);\n-        if (nSatoshisPerK < 0)\n+        if (nSatoshisPerWU < 0)\n             nFee = CAmount(-1);\n     }\n \n@@ -39,5 +37,5 @@ CAmount CFeeRate::GetFee(size_t nBytes_) const\n \n std::string CFeeRate::ToString() const\n {\n-    return strprintf(\"%d.%08d %s/kB\", nSatoshisPerK / COIN, nSatoshisPerK % COIN, CURRENCY_UNIT);\n+    return strprintf(\"%d.%08d Sat/WU\", nSatoshisPerWU, nSatoshisPerWU);\n }"
      },
      {
        "sha": "306bc97e78a27b75054a39c5f4e74a36b980fdc6",
        "filename": "src/policy/feerate.h",
        "status": "modified",
        "additions": 19,
        "deletions": 21,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3899716c9ce8ad5eee3e31fd6eab8be39b760e0/src/policy/feerate.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3899716c9ce8ad5eee3e31fd6eab8be39b760e0/src/policy/feerate.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/feerate.h?ref=c3899716c9ce8ad5eee3e31fd6eab8be39b760e0",
        "patch": "@@ -11,48 +11,46 @@\n \n #include <string>\n \n-extern const std::string CURRENCY_UNIT;\n-\n /**\n- * Fee rate in satoshis per kilobyte: CAmount / kB\n+ * Fee rate in satoshis per weight unit: CAmount / WU\n  */\n class CFeeRate\n {\n private:\n-    CAmount nSatoshisPerK; // unit is satoshis-per-1,000-bytes\n+    CAmount nSatoshisPerWU; // unit is satoshis-per-weight-unit\n \n public:\n-    /** Fee rate of 0 satoshis per kB */\n-    CFeeRate() : nSatoshisPerK(0) { }\n+    /** Fee rate of 0 satoshis per WU */\n+    CFeeRate() : nSatoshisPerWU(0) { }\n     template<typename I>\n-    CFeeRate(const I _nSatoshisPerK): nSatoshisPerK(_nSatoshisPerK) {\n+    CFeeRate(const I _nSatoshisPerWU): nSatoshisPerWU(_nSatoshisPerWU) {\n         // We've previously had bugs creep in from silent double->int conversion...\n         static_assert(std::is_integral<I>::value, \"CFeeRate should be used without floats\");\n     }\n-    /** Constructor for a fee rate in satoshis per kB. The size in bytes must not exceed (2^63 - 1)*/\n-    CFeeRate(const CAmount& nFeePaid, size_t nBytes);\n+    /** Constructor for a fee rate in satoshis per WU. The size in weight units must not exceed (2^63 - 1)*/\n+    CFeeRate(const CAmount& nFeePaid, size_t nWeightUnits);\n     /**\n-     * Return the fee in satoshis for the given size in bytes.\n+     * Return the fee in satoshis for the given size in weight units.\n      */\n-    CAmount GetFee(size_t nBytes) const;\n+    CAmount GetFee(size_t nWeightUnits) const;\n     /**\n-     * Return the fee in satoshis for a size of 1000 bytes\n+     * Return the fee in satoshis for a size of 4000 weight units\n      */\n-    CAmount GetFeePerK() const { return GetFee(1000); }\n-    friend bool operator<(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK < b.nSatoshisPerK; }\n-    friend bool operator>(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK > b.nSatoshisPerK; }\n-    friend bool operator==(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK == b.nSatoshisPerK; }\n-    friend bool operator<=(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK <= b.nSatoshisPerK; }\n-    friend bool operator>=(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK >= b.nSatoshisPerK; }\n-    friend bool operator!=(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK != b.nSatoshisPerK; }\n-    CFeeRate& operator+=(const CFeeRate& a) { nSatoshisPerK += a.nSatoshisPerK; return *this; }\n+    CAmount GetFeePerWU() const { return GetFee(4000); }\n+    friend bool operator<(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerWU < b.nSatoshisPerWU; }\n+    friend bool operator>(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerWU > b.nSatoshisPerWU; }\n+    friend bool operator==(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerWU == b.nSatoshisPerWU; }\n+    friend bool operator<=(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerWU <= b.nSatoshisPerWU; }\n+    friend bool operator>=(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerWU >= b.nSatoshisPerWU; }\n+    friend bool operator!=(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerWU != b.nSatoshisPerWU; }\n+    CFeeRate& operator+=(const CFeeRate& a) { nSatoshisPerWU += a.nSatoshisPerWU; return *this; }\n     std::string ToString() const;\n \n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n     inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(nSatoshisPerK);\n+        READWRITE(nSatoshisPerWU);\n     }\n };\n "
      },
      {
        "sha": "b1a032868cd6cf049c0b66326b562aa08d35b8b2",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3899716c9ce8ad5eee3e31fd6eab8be39b760e0/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3899716c9ce8ad5eee3e31fd6eab8be39b760e0/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=c3899716c9ce8ad5eee3e31fd6eab8be39b760e0",
        "patch": "@@ -587,15 +587,15 @@ void CBlockPolicyEstimator::processTransaction(const CTxMemPoolEntry& entry, boo\n     }\n     trackedTxs++;\n \n-    // Feerates are stored and reported as BTC-per-kb:\n+    // Feerates are stored and reported as Sat-per-WU:\n     CFeeRate feeRate(entry.GetFee(), entry.GetTxSize());\n \n     mapMemPoolTxs[hash].blockHeight = txHeight;\n-    unsigned int bucketIndex = feeStats->NewTx(txHeight, (double)feeRate.GetFeePerK());\n+    unsigned int bucketIndex = feeStats->NewTx(txHeight, (double)feeRate.GetFeePerWU());\n     mapMemPoolTxs[hash].bucketIndex = bucketIndex;\n-    unsigned int bucketIndex2 = shortStats->NewTx(txHeight, (double)feeRate.GetFeePerK());\n+    unsigned int bucketIndex2 = shortStats->NewTx(txHeight, (double)feeRate.GetFeePerWU());\n     assert(bucketIndex == bucketIndex2);\n-    unsigned int bucketIndex3 = longStats->NewTx(txHeight, (double)feeRate.GetFeePerK());\n+    unsigned int bucketIndex3 = longStats->NewTx(txHeight, (double)feeRate.GetFeePerWU());\n     assert(bucketIndex == bucketIndex3);\n }\n \n@@ -617,12 +617,12 @@ bool CBlockPolicyEstimator::processBlockTx(unsigned int nBlockHeight, const CTxM\n         return false;\n     }\n \n-    // Feerates are stored and reported as BTC-per-kb:\n+    // Feerates are stored and reported as BTC-per-WU:\n     CFeeRate feeRate(entry->GetFee(), entry->GetTxSize());\n \n-    feeStats->Record(blocksToConfirm, (double)feeRate.GetFeePerK());\n-    shortStats->Record(blocksToConfirm, (double)feeRate.GetFeePerK());\n-    longStats->Record(blocksToConfirm, (double)feeRate.GetFeePerK());\n+    feeStats->Record(blocksToConfirm, (double)feeRate.GetFeePerWU());\n+    shortStats->Record(blocksToConfirm, (double)feeRate.GetFeePerWU());\n+    longStats->Record(blocksToConfirm, (double)feeRate.GetFeePerWU());\n     return true;\n }\n \n@@ -1035,7 +1035,7 @@ void CBlockPolicyEstimator::FlushUnconfirmed(CTxMemPool& pool) {\n \n FeeFilterRounder::FeeFilterRounder(const CFeeRate& minIncrementalFee)\n {\n-    CAmount minFeeLimit = std::max(CAmount(1), minIncrementalFee.GetFeePerK() / 2);\n+    CAmount minFeeLimit = std::max(CAmount(1), minIncrementalFee.GetFeePerWU() / 2);\n     feeset.insert(0);\n     for (double bucketBoundary = minFeeLimit; bucketBoundary <= MAX_FILTER_FEERATE; bucketBoundary *= FEE_FILTER_SPACING) {\n         feeset.insert(bucketBoundary);"
      },
      {
        "sha": "6c15a17025e18b115a310822969a1b726b600a65",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3899716c9ce8ad5eee3e31fd6eab8be39b760e0/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3899716c9ce8ad5eee3e31fd6eab8be39b760e0/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=c3899716c9ce8ad5eee3e31fd6eab8be39b760e0",
        "patch": "@@ -14,6 +14,7 @@\n #include \"util.h\"\n #include \"utilstrencodings.h\"\n \n+const std::string CURRENCY_UNIT = \"BTC\";\n \n CAmount GetDustThreshold(const CTxOut& txout, const CFeeRate& dustRelayFeeIn)\n {"
      },
      {
        "sha": "fe014fa40bb8074b493aab03665db5fc0ad14b96",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3899716c9ce8ad5eee3e31fd6eab8be39b760e0/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3899716c9ce8ad5eee3e31fd6eab8be39b760e0/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=c3899716c9ce8ad5eee3e31fd6eab8be39b760e0",
        "patch": "@@ -13,6 +13,8 @@\n \n #include <string>\n \n+extern const std::string CURRENCY_UNIT;\n+\n class CCoinsViewCache;\n class CTxOut;\n "
      },
      {
        "sha": "d53cadc962bc9b6f66ca0be52773302608688b14",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3899716c9ce8ad5eee3e31fd6eab8be39b760e0/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3899716c9ce8ad5eee3e31fd6eab8be39b760e0/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=c3899716c9ce8ad5eee3e31fd6eab8be39b760e0",
        "patch": "@@ -660,7 +660,7 @@ void SendCoinsDialog::updateSmartFeeLabel()\n     FeeCalculation feeCalc;\n     CFeeRate feeRate = CFeeRate(GetMinimumFee(1000, coin_control, ::mempool, ::feeEstimator, &feeCalc));\n \n-    ui->labelSmartFee->setText(BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(), feeRate.GetFeePerK()) + \"/kB\");\n+    ui->labelSmartFee->setText(BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(), feeRate.GetFeePerWU()) + \"/kB\");\n \n     if (feeCalc.reason == FeeReason::FALLBACK) {\n         ui->labelSmartFee2->show(); // (Smart fee not initialized yet. This usually takes a few blocks...)"
      },
      {
        "sha": "5294126d337fd0d362eee80b381ee6190be317fa",
        "filename": "src/qt/test/wallettests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3899716c9ce8ad5eee3e31fd6eab8be39b760e0/src/qt/test/wallettests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3899716c9ce8ad5eee3e31fd6eab8be39b760e0/src/qt/test/wallettests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/wallettests.cpp?ref=c3899716c9ce8ad5eee3e31fd6eab8be39b760e0",
        "patch": "@@ -229,7 +229,7 @@ void TestGUI()\n             QCOMPARE(paymentTextList.at(0), QString(\"Payment information\"));\n             QVERIFY(paymentTextList.at(1).indexOf(QString(\"URI: bitcoin:\")) != -1);\n             QVERIFY(paymentTextList.at(2).indexOf(QString(\"Address:\")) != -1);\n-            QCOMPARE(paymentTextList.at(3), QString(\"Amount: 0.00000001 \") + QString::fromStdString(CURRENCY_UNIT));\n+            QCOMPARE(paymentTextList.at(3), QString(\"Amount: 0.25\"));\n             QCOMPARE(paymentTextList.at(4), QString(\"Label: TEST_LABEL_1\"));\n             QCOMPARE(paymentTextList.at(5), QString(\"Message: TEST_MESSAGE_1\"));\n         }"
      },
      {
        "sha": "382e0aaab9f9d809be112357c43990f0c7ed1174",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3899716c9ce8ad5eee3e31fd6eab8be39b760e0/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3899716c9ce8ad5eee3e31fd6eab8be39b760e0/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=c3899716c9ce8ad5eee3e31fd6eab8be39b760e0",
        "patch": "@@ -334,7 +334,7 @@ UniValue getdifficulty(const JSONRPCRequest& request)\n std::string EntryDescriptionString()\n {\n     return \"    \\\"size\\\" : n,             (numeric) virtual transaction size as defined in BIP 141. This is different from actual serialized size for witness transactions as witness data is discounted.\\n\"\n-           \"    \\\"fee\\\" : n,              (numeric) transaction fee in \" + CURRENCY_UNIT + \"\\n\"\n+           \"    \\\"fee\\\" : n,              (numeric) transaction fee in Sat/WU\\n\"\n            \"    \\\"modifiedfee\\\" : n,      (numeric) transaction fee with fee deltas used for mining priority\\n\"\n            \"    \\\"time\\\" : n,             (numeric) local time transaction entered pool in seconds since 1 Jan 1970 GMT\\n\"\n            \"    \\\"height\\\" : n,           (numeric) block height when transaction entered pool\\n\"\n@@ -956,7 +956,7 @@ UniValue gettxout(const JSONRPCRequest& request)\n             \"{\\n\"\n             \"  \\\"bestblock\\\" : \\\"hash\\\",    (string) the block hash\\n\"\n             \"  \\\"confirmations\\\" : n,       (numeric) The number of confirmations\\n\"\n-            \"  \\\"value\\\" : x.xxx,           (numeric) The transaction value in \" + CURRENCY_UNIT + \"\\n\"\n+            \"  \\\"value\\\" : x.xxx,           (numeric) The transaction value in Sat/WU\\n\"\n             \"  \\\"scriptPubKey\\\" : {         (json object)\\n\"\n             \"     \\\"asm\\\" : \\\"code\\\",       (string) \\n\"\n             \"     \\\"hex\\\" : \\\"hex\\\",        (string) \\n\"\n@@ -1345,7 +1345,7 @@ UniValue mempoolInfoToJSON()\n     ret.push_back(Pair(\"usage\", (int64_t) mempool.DynamicMemoryUsage()));\n     size_t maxmempool = gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n     ret.push_back(Pair(\"maxmempool\", (int64_t) maxmempool));\n-    ret.push_back(Pair(\"mempoolminfee\", ValueFromAmount(mempool.GetMinFee(maxmempool).GetFeePerK())));\n+    ret.push_back(Pair(\"mempoolminfee\", ValueFromAmount(mempool.GetMinFee(maxmempool).GetFeePerWU())));\n \n     return ret;\n }\n@@ -1362,7 +1362,7 @@ UniValue getmempoolinfo(const JSONRPCRequest& request)\n             \"  \\\"bytes\\\": xxxxx,              (numeric) Sum of all virtual transaction sizes as defined in BIP 141. Differs from actual serialized size because witness data is discounted\\n\"\n             \"  \\\"usage\\\": xxxxx,              (numeric) Total memory usage for the mempool\\n\"\n             \"  \\\"maxmempool\\\": xxxxx,         (numeric) Maximum memory usage for the mempool\\n\"\n-            \"  \\\"mempoolminfee\\\": xxxxx       (numeric) Minimum fee rate in \" + CURRENCY_UNIT + \"/kB for tx to be accepted\\n\"\n+            \"  \\\"mempoolminfee\\\": xxxxx       (numeric) Minimum fee rate in Sat/WU for tx to be accepted\\n\"\n             \"}\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"getmempoolinfo\", \"\")\n@@ -1532,7 +1532,7 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n             pindex = chainActive.Tip();\n         }\n     }\n-    \n+\n     assert(pindex != nullptr);\n \n     if (request.params[0].isNull()) {"
      },
      {
        "sha": "323defeb951d3fc8626d93236bed960cda06139e",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3899716c9ce8ad5eee3e31fd6eab8be39b760e0/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3899716c9ce8ad5eee3e31fd6eab8be39b760e0/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=c3899716c9ce8ad5eee3e31fd6eab8be39b760e0",
        "patch": "@@ -810,7 +810,7 @@ UniValue estimatefee(const JSONRPCRequest& request)\n     if (feeRate == CFeeRate(0))\n         return -1.0;\n \n-    return ValueFromAmount(feeRate.GetFeePerK());\n+    return ValueFromAmount(feeRate.GetFeePerWU());\n }\n \n UniValue estimatesmartfee(const JSONRPCRequest& request)\n@@ -835,7 +835,7 @@ UniValue estimatesmartfee(const JSONRPCRequest& request)\n             \"       \\\"CONSERVATIVE\\\"\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n-            \"  \\\"feerate\\\" : x.x,     (numeric, optional) estimate fee rate in \" + CURRENCY_UNIT + \"/kB\\n\"\n+            \"  \\\"feerate\\\" : x.x,     (numeric, optional) estimate fee rate in Sat/WU\\n\"\n             \"  \\\"errors\\\": [ str... ] (json array of strings, optional) Errors encountered during processing\\n\"\n             \"  \\\"blocks\\\" : n         (numeric) block number where estimate was found\\n\"\n             \"}\\n\"\n@@ -865,7 +865,7 @@ UniValue estimatesmartfee(const JSONRPCRequest& request)\n     FeeCalculation feeCalc;\n     CFeeRate feeRate = ::feeEstimator.estimateSmartFee(conf_target, &feeCalc, conservative);\n     if (feeRate != CFeeRate(0)) {\n-        result.push_back(Pair(\"feerate\", ValueFromAmount(feeRate.GetFeePerK())));\n+        result.push_back(Pair(\"feerate\", ValueFromAmount(feeRate.GetFeePerWU())));\n     } else {\n         errors.push_back(\"Insufficient data or no feerate found\");\n         result.push_back(Pair(\"errors\", errors));\n@@ -894,7 +894,7 @@ UniValue estimaterawfee(const JSONRPCRequest& request)\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"short\\\" : {            (json object, optional) estimate for short time horizon\\n\"\n-            \"      \\\"feerate\\\" : x.x,        (numeric, optional) estimate fee rate in \" + CURRENCY_UNIT + \"/kB\\n\"\n+            \"      \\\"feerate\\\" : x.x,        (numeric, optional) estimate fee rate in Sat/WU\\n\"\n             \"      \\\"decay\\\" : x.x,          (numeric) exponential decay (per block) for historical moving average of confirmation data\\n\"\n             \"      \\\"scale\\\" : x,            (numeric) The resolution of confirmation targets at this time horizon\\n\"\n             \"      \\\"pass\\\" : {              (json object, optional) information about the lowest range of feerates to succeed in meeting the threshold\\n\"\n@@ -957,7 +957,7 @@ UniValue estimaterawfee(const JSONRPCRequest& request)\n \n         // CFeeRate(0) is used to indicate error as a return value from estimateRawFee\n         if (feeRate != CFeeRate(0)) {\n-            horizon_result.push_back(Pair(\"feerate\", ValueFromAmount(feeRate.GetFeePerK())));\n+            horizon_result.push_back(Pair(\"feerate\", ValueFromAmount(feeRate.GetFeePerWU())));\n             horizon_result.push_back(Pair(\"decay\", buckets.decay));\n             horizon_result.push_back(Pair(\"scale\", (int)buckets.scale));\n             horizon_result.push_back(Pair(\"pass\", passbucket));"
      },
      {
        "sha": "27fb276ac9cded8b69dd63752d0511743a8f9385",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3899716c9ce8ad5eee3e31fd6eab8be39b760e0/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3899716c9ce8ad5eee3e31fd6eab8be39b760e0/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=c3899716c9ce8ad5eee3e31fd6eab8be39b760e0",
        "patch": "@@ -439,8 +439,8 @@ UniValue getnetworkinfo(const JSONRPCRequest& request)\n             \"  }\\n\"\n             \"  ,...\\n\"\n             \"  ],\\n\"\n-            \"  \\\"relayfee\\\": x.xxxxxxxx,                (numeric) minimum relay fee for transactions in \" + CURRENCY_UNIT + \"/kB\\n\"\n-            \"  \\\"incrementalfee\\\": x.xxxxxxxx,          (numeric) minimum fee increment for mempool limiting or BIP 125 replacement in \" + CURRENCY_UNIT + \"/kB\\n\"\n+            \"  \\\"relayfee\\\": x.xxxxxxxx,                (numeric) minimum relay fee for transactions in Sat/WU\\n\"\n+            \"  \\\"incrementalfee\\\": x.xxxxxxxx,          (numeric) minimum fee increment for mempool limiting or BIP 125 replacement in Sat/WU\\n\"\n             \"  \\\"localaddresses\\\": [                    (array) list of local addresses\\n\"\n             \"  {\\n\"\n             \"    \\\"address\\\": \\\"xxxx\\\",                 (string) network address\\n\"\n@@ -470,8 +470,8 @@ UniValue getnetworkinfo(const JSONRPCRequest& request)\n         obj.push_back(Pair(\"connections\",   (int)g_connman->GetNodeCount(CConnman::CONNECTIONS_ALL)));\n     }\n     obj.push_back(Pair(\"networks\",      GetNetworksInfo()));\n-    obj.push_back(Pair(\"relayfee\",      ValueFromAmount(::minRelayTxFee.GetFeePerK())));\n-    obj.push_back(Pair(\"incrementalfee\", ValueFromAmount(::incrementalRelayFee.GetFeePerK())));\n+    obj.push_back(Pair(\"relayfee\",      ValueFromAmount(::minRelayTxFee.GetFeePerWU())));\n+    obj.push_back(Pair(\"incrementalfee\", ValueFromAmount(::incrementalRelayFee.GetFeePerWU())));\n     UniValue localAddresses(UniValue::VARR);\n     {\n         LOCK(cs_mapLocalHost);"
      },
      {
        "sha": "50db4f692ddab076f627ab988085015e05d55637",
        "filename": "src/test/amount_tests.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3899716c9ce8ad5eee3e31fd6eab8be39b760e0/src/test/amount_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3899716c9ce8ad5eee3e31fd6eab8be39b760e0/src/test/amount_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/amount_tests.cpp?ref=c3899716c9ce8ad5eee3e31fd6eab8be39b760e0",
        "patch": "@@ -26,7 +26,7 @@ BOOST_AUTO_TEST_CASE(GetFeeTest)\n     BOOST_CHECK_EQUAL(feeRate.GetFee(0), 0);\n     BOOST_CHECK_EQUAL(feeRate.GetFee(1e5), 0);\n \n-    feeRate = CFeeRate(1000);\n+    feeRate = CFeeRate(4000);\n     // Must always just return the arg\n     BOOST_CHECK_EQUAL(feeRate.GetFee(0), 0);\n     BOOST_CHECK_EQUAL(feeRate.GetFee(1), 1);\n@@ -35,7 +35,7 @@ BOOST_AUTO_TEST_CASE(GetFeeTest)\n     BOOST_CHECK_EQUAL(feeRate.GetFee(1e3), 1e3);\n     BOOST_CHECK_EQUAL(feeRate.GetFee(9e3), 9e3);\n \n-    feeRate = CFeeRate(-1000);\n+    feeRate = CFeeRate(-4000);\n     // Must always just return -1 * arg\n     BOOST_CHECK_EQUAL(feeRate.GetFee(0), 0);\n     BOOST_CHECK_EQUAL(feeRate.GetFee(1), -1);\n@@ -62,23 +62,23 @@ BOOST_AUTO_TEST_CASE(GetFeeTest)\n     BOOST_CHECK_EQUAL(feeRate.GetFee(9), -1);\n \n     // check alternate constructor\n-    feeRate = CFeeRate(1000);\n+    feeRate = CFeeRate(4000);\n     altFeeRate = CFeeRate(feeRate);\n     BOOST_CHECK_EQUAL(feeRate.GetFee(100), altFeeRate.GetFee(100));\n \n     // Check full constructor\n     // default value\n-    BOOST_CHECK(CFeeRate(CAmount(-1), 1000) == CFeeRate(-1));\n-    BOOST_CHECK(CFeeRate(CAmount(0), 1000) == CFeeRate(0));\n-    BOOST_CHECK(CFeeRate(CAmount(1), 1000) == CFeeRate(1));\n-    // lost precision (can only resolve satoshis per kB)\n-    BOOST_CHECK(CFeeRate(CAmount(1), 1001) == CFeeRate(0));\n-    BOOST_CHECK(CFeeRate(CAmount(2), 1001) == CFeeRate(1));\n+    BOOST_CHECK(CFeeRate(CAmount(-1), 4000) == CFeeRate(-1));\n+    BOOST_CHECK(CFeeRate(CAmount(0), 4000) == CFeeRate(0));\n+    BOOST_CHECK(CFeeRate(CAmount(1), 4000) == CFeeRate(1));\n+    // lost precision (can only resolve satoshis per weight unit)\n+    BOOST_CHECK(CFeeRate(CAmount(1), 4001) == CFeeRate(0));\n+    BOOST_CHECK(CFeeRate(CAmount(2), 4001) == CFeeRate(1));\n     // some more integer checks\n     BOOST_CHECK(CFeeRate(CAmount(26), 789) == CFeeRate(32));\n     BOOST_CHECK(CFeeRate(CAmount(27), 789) == CFeeRate(34));\n-    // Maximum size in bytes, should not crash\n-    CFeeRate(MAX_MONEY, std::numeric_limits<size_t>::max() >> 1).GetFeePerK();\n+    // Maximum size in weight units, should not crash\n+    CFeeRate(MAX_MONEY, std::numeric_limits<size_t>::max() >> 1).GetFeePerWU();\n }\n \n BOOST_AUTO_TEST_CASE(BinaryOperatorTest)\n@@ -93,7 +93,7 @@ BOOST_AUTO_TEST_CASE(BinaryOperatorTest)\n     BOOST_CHECK(a <= a);\n     BOOST_CHECK(b >= a);\n     BOOST_CHECK(b >= b);\n-    // a should be 0.00000002 BTC/kB now\n+    // a should be 0.5 Sat/WU now\n     a += a;\n     BOOST_CHECK(a == b);\n }\n@@ -102,7 +102,7 @@ BOOST_AUTO_TEST_CASE(ToStringTest)\n {\n     CFeeRate feeRate;\n     feeRate = CFeeRate(1);\n-    BOOST_CHECK_EQUAL(feeRate.ToString(), \"0.00000001 BTC/kB\");\n+    BOOST_CHECK_EQUAL(feeRate.ToString(), \"0.25 Sat/WU\");\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "453b6ce29018e956174ff18328c124f5688c1080",
        "filename": "src/test/mempool_tests.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3899716c9ce8ad5eee3e31fd6eab8be39b760e0/src/test/mempool_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3899716c9ce8ad5eee3e31fd6eab8be39b760e0/src/test/mempool_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/mempool_tests.cpp?ref=c3899716c9ce8ad5eee3e31fd6eab8be39b760e0",
        "patch": "@@ -478,7 +478,7 @@ BOOST_AUTO_TEST_CASE(MempoolSizeLimitTest)\n     BOOST_CHECK(!pool.exists(tx3.GetHash()));\n \n     CFeeRate maxFeeRateRemoved(25000, GetVirtualTransactionSize(tx3) + GetVirtualTransactionSize(tx2));\n-    BOOST_CHECK_EQUAL(pool.GetMinFee(1).GetFeePerK(), maxFeeRateRemoved.GetFeePerK() + 1000);\n+    BOOST_CHECK_EQUAL(pool.GetMinFee(1).GetFeePerWU(), maxFeeRateRemoved.GetFeePerWU() + 1000);\n \n     CMutableTransaction tx4 = CMutableTransaction();\n     tx4.vin.resize(2);\n@@ -555,27 +555,27 @@ BOOST_AUTO_TEST_CASE(MempoolSizeLimitTest)\n     std::vector<CTransactionRef> vtx;\n     SetMockTime(42);\n     SetMockTime(42 + CTxMemPool::ROLLING_FEE_HALFLIFE);\n-    BOOST_CHECK_EQUAL(pool.GetMinFee(1).GetFeePerK(), maxFeeRateRemoved.GetFeePerK() + 1000);\n+    BOOST_CHECK_EQUAL(pool.GetMinFee(1).GetFeePerWU(), maxFeeRateRemoved.GetFeePerWU() + 1000);\n     // ... we should keep the same min fee until we get a block\n     pool.removeForBlock(vtx, 1);\n     SetMockTime(42 + 2*CTxMemPool::ROLLING_FEE_HALFLIFE);\n-    BOOST_CHECK_EQUAL(pool.GetMinFee(1).GetFeePerK(), llround((maxFeeRateRemoved.GetFeePerK() + 1000)/2.0));\n+    BOOST_CHECK_EQUAL(pool.GetMinFee(1).GetFeePerWU(), llround((maxFeeRateRemoved.GetFeePerWU() + 1000)/2.0));\n     // ... then feerate should drop 1/2 each halflife\n \n     SetMockTime(42 + 2*CTxMemPool::ROLLING_FEE_HALFLIFE + CTxMemPool::ROLLING_FEE_HALFLIFE/2);\n-    BOOST_CHECK_EQUAL(pool.GetMinFee(pool.DynamicMemoryUsage() * 5 / 2).GetFeePerK(), llround((maxFeeRateRemoved.GetFeePerK() + 1000)/4.0));\n+    BOOST_CHECK_EQUAL(pool.GetMinFee(pool.DynamicMemoryUsage() * 5 / 2).GetFeePerWU(), llround((maxFeeRateRemoved.GetFeePerWU() + 1000)/4.0));\n     // ... with a 1/2 halflife when mempool is < 1/2 its target size\n \n     SetMockTime(42 + 2*CTxMemPool::ROLLING_FEE_HALFLIFE + CTxMemPool::ROLLING_FEE_HALFLIFE/2 + CTxMemPool::ROLLING_FEE_HALFLIFE/4);\n-    BOOST_CHECK_EQUAL(pool.GetMinFee(pool.DynamicMemoryUsage() * 9 / 2).GetFeePerK(), llround((maxFeeRateRemoved.GetFeePerK() + 1000)/8.0));\n+    BOOST_CHECK_EQUAL(pool.GetMinFee(pool.DynamicMemoryUsage() * 9 / 2).GetFeePerWU(), llround((maxFeeRateRemoved.GetFeePerWU() + 1000)/8.0));\n     // ... with a 1/4 halflife when mempool is < 1/4 its target size\n \n     SetMockTime(42 + 7*CTxMemPool::ROLLING_FEE_HALFLIFE + CTxMemPool::ROLLING_FEE_HALFLIFE/2 + CTxMemPool::ROLLING_FEE_HALFLIFE/4);\n-    BOOST_CHECK_EQUAL(pool.GetMinFee(1).GetFeePerK(), 1000);\n+    BOOST_CHECK_EQUAL(pool.GetMinFee(1).GetFeePerWU(), 1000);\n     // ... but feerate should never drop below 1000\n \n     SetMockTime(42 + 8*CTxMemPool::ROLLING_FEE_HALFLIFE + CTxMemPool::ROLLING_FEE_HALFLIFE/2 + CTxMemPool::ROLLING_FEE_HALFLIFE/4);\n-    BOOST_CHECK_EQUAL(pool.GetMinFee(1).GetFeePerK(), 0);\n+    BOOST_CHECK_EQUAL(pool.GetMinFee(1).GetFeePerWU(), 0);\n     // ... unless it has gone all the way to 0 (after getting past 1000/2)\n \n     SetMockTime(0);"
      },
      {
        "sha": "cb44e76434449f51826b9e4da32768db5f695415",
        "filename": "src/test/policyestimator_tests.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3899716c9ce8ad5eee3e31fd6eab8be39b760e0/src/test/policyestimator_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3899716c9ce8ad5eee3e31fd6eab8be39b760e0/src/test/policyestimator_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/policyestimator_tests.cpp?ref=c3899716c9ce8ad5eee3e31fd6eab8be39b760e0",
        "patch": "@@ -81,8 +81,8 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n             // So estimateFee(1) should fail and estimateFee(2) should return somewhere around\n             // 9*baserate.  estimateFee(2) %'s are 100,100,90 = average 97%\n             BOOST_CHECK(feeEst.estimateFee(1) == CFeeRate(0));\n-            BOOST_CHECK(feeEst.estimateFee(2).GetFeePerK() < 9*baseRate.GetFeePerK() + deltaFee);\n-            BOOST_CHECK(feeEst.estimateFee(2).GetFeePerK() > 9*baseRate.GetFeePerK() - deltaFee);\n+            BOOST_CHECK(feeEst.estimateFee(2).GetFeePerWU() < 9*baseRate.GetFeePerWU() + deltaFee);\n+            BOOST_CHECK(feeEst.estimateFee(2).GetFeePerWU() > 9*baseRate.GetFeePerWU() - deltaFee);\n         }\n     }\n \n@@ -94,19 +94,19 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n     // Second highest feerate has 100% chance of being included by 2 blocks,\n     // so estimateFee(2) should return 9*baseRate etc...\n     for (int i = 1; i < 10;i++) {\n-        origFeeEst.push_back(feeEst.estimateFee(i).GetFeePerK());\n+        origFeeEst.push_back(feeEst.estimateFee(i).GetFeePerWU());\n         if (i > 2) { // Fee estimates should be monotonically decreasing\n             BOOST_CHECK(origFeeEst[i-1] <= origFeeEst[i-2]);\n         }\n         int mult = 11-i;\n         if (i % 2 == 0) { //At scale 2, test logic is only correct for even targets\n-            BOOST_CHECK(origFeeEst[i-1] < mult*baseRate.GetFeePerK() + deltaFee);\n-            BOOST_CHECK(origFeeEst[i-1] > mult*baseRate.GetFeePerK() - deltaFee);\n+            BOOST_CHECK(origFeeEst[i-1] < mult*baseRate.GetFeePerWU() + deltaFee);\n+            BOOST_CHECK(origFeeEst[i-1] > mult*baseRate.GetFeePerWU() - deltaFee);\n         }\n     }\n     // Fill out rest of the original estimates\n     for (int i = 10; i <= 48; i++) {\n-        origFeeEst.push_back(feeEst.estimateFee(i).GetFeePerK());\n+        origFeeEst.push_back(feeEst.estimateFee(i).GetFeePerWU());\n     }\n \n     // Mine 50 more blocks with no transactions happening, estimates shouldn't change\n@@ -116,8 +116,8 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n \n     BOOST_CHECK(feeEst.estimateFee(1) == CFeeRate(0));\n     for (int i = 2; i < 10;i++) {\n-        BOOST_CHECK(feeEst.estimateFee(i).GetFeePerK() < origFeeEst[i-1] + deltaFee);\n-        BOOST_CHECK(feeEst.estimateFee(i).GetFeePerK() > origFeeEst[i-1] - deltaFee);\n+        BOOST_CHECK(feeEst.estimateFee(i).GetFeePerWU() < origFeeEst[i-1] + deltaFee);\n+        BOOST_CHECK(feeEst.estimateFee(i).GetFeePerWU() > origFeeEst[i-1] - deltaFee);\n     }\n \n \n@@ -136,7 +136,7 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n     }\n \n     for (int i = 1; i < 10;i++) {\n-        BOOST_CHECK(feeEst.estimateFee(i) == CFeeRate(0) || feeEst.estimateFee(i).GetFeePerK() > origFeeEst[i-1] - deltaFee);\n+        BOOST_CHECK(feeEst.estimateFee(i) == CFeeRate(0) || feeEst.estimateFee(i).GetFeePerWU() > origFeeEst[i-1] - deltaFee);\n     }\n \n     // Mine all those transactions\n@@ -153,7 +153,7 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n     block.clear();\n     BOOST_CHECK(feeEst.estimateFee(1) == CFeeRate(0));\n     for (int i = 2; i < 10;i++) {\n-        BOOST_CHECK(feeEst.estimateFee(i) == CFeeRate(0) || feeEst.estimateFee(i).GetFeePerK() > origFeeEst[i-1] - deltaFee);\n+        BOOST_CHECK(feeEst.estimateFee(i) == CFeeRate(0) || feeEst.estimateFee(i).GetFeePerWU() > origFeeEst[i-1] - deltaFee);\n     }\n \n     // Mine 400 more blocks where everything is mined every block\n@@ -175,7 +175,7 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n     }\n     BOOST_CHECK(feeEst.estimateFee(1) == CFeeRate(0));\n     for (int i = 2; i < 9; i++) { // At 9, the original estimate was already at the bottom (b/c scale = 2)\n-        BOOST_CHECK(feeEst.estimateFee(i).GetFeePerK() < origFeeEst[i-1] - deltaFee);\n+        BOOST_CHECK(feeEst.estimateFee(i).GetFeePerWU() < origFeeEst[i-1] - deltaFee);\n     }\n }\n "
      },
      {
        "sha": "21394875448dbed75dd64d5c5bd0a1b186c4f92f",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3899716c9ce8ad5eee3e31fd6eab8be39b760e0/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3899716c9ce8ad5eee3e31fd6eab8be39b760e0/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=c3899716c9ce8ad5eee3e31fd6eab8be39b760e0",
        "patch": "@@ -691,7 +691,7 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     BOOST_CHECK(IsStandardTx(t, reason));\n \n     // Check dust with default relay fee:\n-    CAmount nDustThreshold = 182 * dustRelayFee.GetFeePerK()/1000;\n+    CAmount nDustThreshold = 182 * dustRelayFee.GetFeePerWU()/1000;\n     BOOST_CHECK_EQUAL(nDustThreshold, 546);\n     // dust:\n     t.vout[0].nValue = nDustThreshold - 1;"
      },
      {
        "sha": "4008368a144d91ab8adcb878d1eb5395e0d9a9c9",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3899716c9ce8ad5eee3e31fd6eab8be39b760e0/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3899716c9ce8ad5eee3e31fd6eab8be39b760e0/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=c3899716c9ce8ad5eee3e31fd6eab8be39b760e0",
        "patch": "@@ -996,7 +996,7 @@ CFeeRate CTxMemPool::GetMinFee(size_t sizelimit) const {\n         rollingMinimumFeeRate = rollingMinimumFeeRate / pow(2.0, (time - lastRollingFeeUpdate) / halflife);\n         lastRollingFeeUpdate = time;\n \n-        if (rollingMinimumFeeRate < (double)incrementalRelayFee.GetFeePerK() / 2) {\n+        if (rollingMinimumFeeRate < (double)incrementalRelayFee.GetFeePerWU() / 2) {\n             rollingMinimumFeeRate = 0;\n             return CFeeRate(0);\n         }\n@@ -1006,8 +1006,8 @@ CFeeRate CTxMemPool::GetMinFee(size_t sizelimit) const {\n \n void CTxMemPool::trackPackageRemoved(const CFeeRate& rate) {\n     AssertLockHeld(cs);\n-    if (rate.GetFeePerK() > rollingMinimumFeeRate) {\n-        rollingMinimumFeeRate = rate.GetFeePerK();\n+    if (rate.GetFeePerWU() > rollingMinimumFeeRate) {\n+        rollingMinimumFeeRate = rate.GetFeePerWU();\n         blockSinceLastRollingFeeBump = false;\n     }\n }"
      },
      {
        "sha": "18cb6faf7772be14f577382e7f151811a9d525c0",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3899716c9ce8ad5eee3e31fd6eab8be39b760e0/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3899716c9ce8ad5eee3e31fd6eab8be39b760e0/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=c3899716c9ce8ad5eee3e31fd6eab8be39b760e0",
        "patch": "@@ -171,12 +171,12 @@ CFeeBumper::CFeeBumper(const CWallet *pWallet, const uint256 txidIn, const CCoin\n         nNewFeeRate = CFeeRate(nNewFee, maxNewTxSize);\n \n         // New fee rate must be at least old rate + minimum incremental relay rate\n-        // walletIncrementalRelayFee.GetFeePerK() should be exact, because it's initialized\n-        // in that unit (fee per kb).\n+        // walletIncrementalRelayFee.GetFeePerWU() should be exact, because it's initialized\n+        // in that unit (fee per WU).\n         // However, nOldFeeRate is a calculated value from the tx fee/size, so\n         // add 1 satoshi to the result, because it may have been rounded down.\n-        if (nNewFeeRate.GetFeePerK() < nOldFeeRate.GetFeePerK() + 1 + walletIncrementalRelayFee.GetFeePerK()) {\n-            nNewFeeRate = CFeeRate(nOldFeeRate.GetFeePerK() + 1 + walletIncrementalRelayFee.GetFeePerK());\n+        if (nNewFeeRate.GetFeePerWU() < nOldFeeRate.GetFeePerWU() + 1 + walletIncrementalRelayFee.GetFeePerWU()) {\n+            nNewFeeRate = CFeeRate(nOldFeeRate.GetFeePerWU() + 1 + walletIncrementalRelayFee.GetFeePerWU());\n             nNewFee = nNewFeeRate.GetFee(maxNewTxSize);\n         }\n     }\n@@ -195,8 +195,8 @@ CFeeBumper::CFeeBumper(const CWallet *pWallet, const uint256 txidIn, const CCoin\n     // in a rare situation where the mempool minimum fee increased significantly since the fee estimation just a\n     // moment earlier. In this case, we report an error to the user, who may use totalFee to make an adjustment.\n     CFeeRate minMempoolFeeRate = mempool.GetMinFee(gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n-    if (nNewFeeRate.GetFeePerK() < minMempoolFeeRate.GetFeePerK()) {\n-        vErrors.push_back(strprintf(\"New fee rate (%s) is less than the minimum fee rate (%s) to get into the mempool. totalFee value should to be at least %s or settxfee value should be at least %s to add transaction.\", FormatMoney(nNewFeeRate.GetFeePerK()), FormatMoney(minMempoolFeeRate.GetFeePerK()), FormatMoney(minMempoolFeeRate.GetFee(maxNewTxSize)), FormatMoney(minMempoolFeeRate.GetFeePerK())));\n+    if (nNewFeeRate.GetFeePerWU() < minMempoolFeeRate.GetFeePerWU()) {\n+        vErrors.push_back(strprintf(\"New fee rate (%s) is less than the minimum fee rate (%s) to get into the mempool. totalFee value should to be at least %s or settxfee value should be at least %s to add transaction.\", FormatMoney(nNewFeeRate.GetFeePerWU()), FormatMoney(minMempoolFeeRate.GetFeePerWU()), FormatMoney(minMempoolFeeRate.GetFee(maxNewTxSize)), FormatMoney(minMempoolFeeRate.GetFeePerWU())));\n         currentResult = BumpFeeResult::WALLET_ERROR;\n         return;\n     }"
      },
      {
        "sha": "06aa436f6f05d2b90e86c64d35eddb04180e75da",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3899716c9ce8ad5eee3e31fd6eab8be39b760e0/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3899716c9ce8ad5eee3e31fd6eab8be39b760e0/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=c3899716c9ce8ad5eee3e31fd6eab8be39b760e0",
        "patch": "@@ -17,15 +17,15 @@ std::string GetWalletHelpString(bool showDebug)\n     std::string strUsage = HelpMessageGroup(_(\"Wallet options:\"));\n     strUsage += HelpMessageOpt(\"-disablewallet\", _(\"Do not load the wallet and disable wallet RPC calls\"));\n     strUsage += HelpMessageOpt(\"-keypool=<n>\", strprintf(_(\"Set key pool size to <n> (default: %u)\"), DEFAULT_KEYPOOL_SIZE));\n-    strUsage += HelpMessageOpt(\"-fallbackfee=<amt>\", strprintf(_(\"A fee rate (in %s/kB) that will be used when fee estimation has insufficient data (default: %s)\"),\n-                                                               CURRENCY_UNIT, FormatMoney(DEFAULT_FALLBACK_FEE)));\n-    strUsage += HelpMessageOpt(\"-discardfee=<amt>\", strprintf(_(\"The fee rate (in %s/kB) that indicates your tolerance for discarding change by adding it to the fee (default: %s). \"\n+    strUsage += HelpMessageOpt(\"-fallbackfee=<amt>\", strprintf(_(\"A fee rate (in Sat/WU) that will be used when fee estimation has insufficient data (default: %s)\"),\n+                                                               FormatMoney(DEFAULT_FALLBACK_FEE)));\n+    strUsage += HelpMessageOpt(\"-discardfee=<amt>\", strprintf(_(\"The fee rate (in Sat/WU) that indicates your tolerance for discarding change by adding it to the fee (default: %s). \"\n                                                                 \"Note: An output is discarded if it is dust at this rate, but we will always discard up to the dust relay fee and a discard fee above that is limited by the fee estimate for the longest target\"),\n-                                                              CURRENCY_UNIT, FormatMoney(DEFAULT_DISCARD_FEE)));\n-    strUsage += HelpMessageOpt(\"-mintxfee=<amt>\", strprintf(_(\"Fees (in %s/kB) smaller than this are considered zero fee for transaction creation (default: %s)\"),\n-                                                            CURRENCY_UNIT, FormatMoney(DEFAULT_TRANSACTION_MINFEE)));\n-    strUsage += HelpMessageOpt(\"-paytxfee=<amt>\", strprintf(_(\"Fee (in %s/kB) to add to transactions you send (default: %s)\"),\n-                                                            CURRENCY_UNIT, FormatMoney(payTxFee.GetFeePerK())));\n+                                                              FormatMoney(DEFAULT_DISCARD_FEE)));\n+    strUsage += HelpMessageOpt(\"-mintxfee=<amt>\", strprintf(_(\"Fees (in Sat/WU) smaller than this are considered zero fee for transaction creation (default: %s)\"),\n+                                                            FormatMoney(DEFAULT_TRANSACTION_MINFEE)));\n+    strUsage += HelpMessageOpt(\"-paytxfee=<amt>\", strprintf(_(\"Fee (in Sat/WU) to add to transactions you send (default: %s)\"),\n+                                                            FormatMoney(payTxFee.GetFeePerWU())));\n     strUsage += HelpMessageOpt(\"-rescan\", _(\"Rescan the block chain for missing wallet transactions on startup\"));\n     strUsage += HelpMessageOpt(\"-salvagewallet\", _(\"Attempt to recover private keys from a corrupt wallet on startup\"));\n     strUsage += HelpMessageOpt(\"-spendzeroconfchange\", strprintf(_(\"Spend unconfirmed change when sending transactions (default: %u)\"), DEFAULT_SPEND_ZEROCONF_CHANGE));\n@@ -100,7 +100,7 @@ bool WalletParameterInteraction()\n     if (gArgs.GetArg(\"-prune\", 0) && gArgs.GetBoolArg(\"-rescan\", false))\n         return InitError(_(\"Rescans are not possible in pruned mode. You will need to use -reindex which will download the whole blockchain again.\"));\n \n-    if (::minRelayTxFee.GetFeePerK() > HIGH_TX_FEE_PER_KB)\n+    if (::minRelayTxFee.GetFeePerWU() > HIGH_TX_FEE_PER_KB)\n         InitWarning(AmountHighWarn(\"-minrelaytxfee\") + \" \" +\n                     _(\"The wallet will avoid paying less than the minimum relay fee.\"));\n "
      },
      {
        "sha": "819f04adf532b65d1c0d79d4c7016ba31da05d7e",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3899716c9ce8ad5eee3e31fd6eab8be39b760e0/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3899716c9ce8ad5eee3e31fd6eab8be39b760e0/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=c3899716c9ce8ad5eee3e31fd6eab8be39b760e0",
        "patch": "@@ -2541,9 +2541,9 @@ UniValue settxfee(const JSONRPCRequest& request)\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 1)\n         throw std::runtime_error(\n             \"settxfee amount\\n\"\n-            \"\\nSet the transaction fee per kB. Overwrites the paytxfee parameter.\\n\"\n+            \"\\nSet the transaction fee per WU. Overwrites the paytxfee parameter.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. amount         (numeric or string, required) The transaction fee in \" + CURRENCY_UNIT + \"/kB\\n\"\n+            \"1. amount         (numeric or string, required) The transaction fee in Sat/WU\\n\"\n             \"\\nResult\\n\"\n             \"true|false        (boolean) Returns true if successful\\n\"\n             \"\\nExamples:\\n\"\n@@ -2583,7 +2583,7 @@ UniValue getwalletinfo(const JSONRPCRequest& request)\n             \"  \\\"keypoolsize\\\": xxxx,             (numeric) how many new keys are pre-generated (only counts external keys)\\n\"\n             \"  \\\"keypoolsize_hd_internal\\\": xxxx, (numeric) how many new keys are pre-generated for internal use (used for change outputs, only appears if the wallet is using this feature, otherwise external keys are used)\\n\"\n             \"  \\\"unlocked_until\\\": ttt,           (numeric) the timestamp in seconds since epoch (midnight Jan 1 1970 GMT) that the wallet is unlocked for transfers, or 0 if the wallet is locked\\n\"\n-            \"  \\\"paytxfee\\\": x.xxxx,              (numeric) the transaction fee configuration, set in \" + CURRENCY_UNIT + \"/kB\\n\"\n+            \"  \\\"paytxfee\\\": x.xxxx,              (numeric) the transaction fee configuration, set in Sat/WU\\n\"\n             \"  \\\"hdmasterkeyid\\\": \\\"<hash160>\\\"     (string) the Hash160 of the HD master pubkey\\n\"\n             \"}\\n\"\n             \"\\nExamples:\\n\"\n@@ -2612,7 +2612,7 @@ UniValue getwalletinfo(const JSONRPCRequest& request)\n     if (pwallet->IsCrypted()) {\n         obj.push_back(Pair(\"unlocked_until\", pwallet->nRelockTime));\n     }\n-    obj.push_back(Pair(\"paytxfee\",      ValueFromAmount(payTxFee.GetFeePerK())));\n+    obj.push_back(Pair(\"paytxfee\",      ValueFromAmount(payTxFee.GetFeePerWU())));\n     if (!masterKeyID.IsNull())\n          obj.push_back(Pair(\"hdmasterkeyid\", masterKeyID.GetHex()));\n     return obj;\n@@ -2875,7 +2875,7 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n                             \"     \\\"changePosition\\\"         (numeric, optional, default random) The index of the change output\\n\"\n                             \"     \\\"includeWatching\\\"        (boolean, optional, default false) Also select inputs which are watch only\\n\"\n                             \"     \\\"lockUnspents\\\"           (boolean, optional, default false) Lock selected unspent outputs\\n\"\n-                            \"     \\\"feeRate\\\"                (numeric, optional, default not set: makes wallet determine the fee) Set a specific fee rate in \" + CURRENCY_UNIT + \"/kB\\n\"\n+                            \"     \\\"feeRate\\\"                (numeric, optional, default not set: makes wallet determine the fee) Set a specific fee rate in Sat/WU\\n\"\n                             \"     \\\"subtractFeeFromOutputs\\\" (array, optional) A json array of integers.\\n\"\n                             \"                              The fee will be equally deducted from the amount of each specified output.\\n\"\n                             \"                              The outputs are specified by their zero-based index, before any change output is added.\\n\""
      },
      {
        "sha": "7d7d711b71f304551a6a0aee59725b585ab117cb",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3899716c9ce8ad5eee3e31fd6eab8be39b760e0/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3899716c9ce8ad5eee3e31fd6eab8be39b760e0/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=c3899716c9ce8ad5eee3e31fd6eab8be39b760e0",
        "patch": "@@ -262,7 +262,7 @@ class CMerkleTx\n     bool IsCoinBase() const { return tx->IsCoinBase(); }\n };\n \n-/** \n+/**\n  * A transaction with a bunch of additional info that only the owner cares about.\n  * It includes any unrecorded transactions needed to link it back to the block chain.\n  */\n@@ -647,7 +647,7 @@ class CAccountingEntry\n };\n \n \n-/** \n+/**\n  * A CWallet is an extension of a keystore, which also maintains a set of transactions and balances,\n  * and provides the ability to create new transactions.\n  */\n@@ -902,7 +902,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     void GetKeyBirthTimes(std::map<CTxDestination, int64_t> &mapKeyBirth) const;\n     unsigned int ComputeTimeSmart(const CWalletTx& wtx) const;\n \n-    /** \n+    /**\n      * Increment the next transaction order id\n      * @return next transaction order id\n      */\n@@ -1019,7 +1019,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     }\n \n     void GetScriptForMining(std::shared_ptr<CReserveScript> &script);\n-    \n+\n     unsigned int GetKeyPoolSize()\n     {\n         AssertLockHeld(cs_wallet); // set{Ex,In}ternalKeyPool\n@@ -1044,7 +1044,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     //! Flush wallet (bitdb flush)\n     void Flush(bool shutdown=false);\n \n-    /** \n+    /**\n      * Address book entry changed.\n      * @note called with lock cs_wallet held.\n      */\n@@ -1053,7 +1053,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n             const std::string &purpose,\n             ChangeType status)> NotifyAddressBookChanged;\n \n-    /** \n+    /**\n      * Wallet transaction added, removed or updated.\n      * @note called with lock cs_wallet held.\n      */\n@@ -1100,7 +1100,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n \n     /* Generates a new HD master key (will not be activated) */\n     CPubKey GenerateNewHDMasterKey();\n-    \n+\n     /* Set the current HD master key (will reset the chain child index counters)\n        Sets the master key's version based on the current wallet version (so the\n        caller must ensure the current wallet version is correct before calling\n@@ -1140,7 +1140,7 @@ class CReserveKey final : public CReserveScript\n };\n \n \n-/** \n+/**\n  * Account information.\n  * Stored in wallet with key \"acc\"+string account name.\n  */"
      },
      {
        "sha": "8b882cfc4ca7efd6f80ea43870034dce1741e746",
        "filename": "test/functional/replace-by-fee.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3899716c9ce8ad5eee3e31fd6eab8be39b760e0/test/functional/replace-by-fee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3899716c9ce8ad5eee3e31fd6eab8be39b760e0/test/functional/replace-by-fee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/replace-by-fee.py?ref=c3899716c9ce8ad5eee3e31fd6eab8be39b760e0",
        "patch": "@@ -285,7 +285,7 @@ def branch(prevout, initial_value, max_txs, tree_width=5, fee=0.0001*COIN, _tota\n                 self.nodes[0].getrawtransaction(tx.hash)\n \n     def test_replacement_feeperkb(self):\n-        \"\"\"Replacement requires fee-per-KB to be higher\"\"\"\n+        \"\"\"Replacement requires fee-per-WU to be higher\"\"\"\n         tx0_outpoint = make_utxo(self.nodes[0], int(1.1*COIN))\n \n         tx1a = CTransaction()\n@@ -294,7 +294,7 @@ def test_replacement_feeperkb(self):\n         tx1a_hex = txToHex(tx1a)\n         self.nodes[0].sendrawtransaction(tx1a_hex, True)\n \n-        # Higher fee, but the fee per KB is much lower, so the replacement is\n+        # Higher fee, but the fee per WU is much lower, so the replacement is\n         # rejected.\n         tx1b = CTransaction()\n         tx1b.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n@@ -497,7 +497,7 @@ def test_prioritised_transactions(self):\n         tx1a_hex = txToHex(tx1a)\n         tx1a_txid = self.nodes[0].sendrawtransaction(tx1a_hex, True)\n \n-        # Higher fee, but the actual fee per KB is much lower.\n+        # Higher fee, but the actual fee per WU is much lower.\n         tx1b = CTransaction()\n         tx1b.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n         tx1b.vout = [CTxOut(int(0.001*COIN), CScript([b'a'*740000]))]"
      }
    ]
  }
]