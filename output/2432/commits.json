[
  {
    "sha": "636141b2cfa3129cc9e8076faa56ff33ec634818",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MzYxNDFiMmNmYTMxMjljYzllODA3NmZhYTU2ZmYzM2VjNjM0ODE4",
    "commit": {
      "author": {
        "name": "Aviad Reich",
        "email": "aviad.reich@intucellsystems.com",
        "date": "2013-03-31T07:21:57Z"
      },
      "committer": {
        "name": "Aviad Reich",
        "email": "aviad.reich@intucellsystems.com",
        "date": "2013-03-31T07:21:57Z"
      },
      "message": "update wallettools to use bitcoinrpc 0.3",
      "tree": {
        "sha": "0b41998c496d1e8e1fb8d609a54828bec9673f5a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0b41998c496d1e8e1fb8d609a54828bec9673f5a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/636141b2cfa3129cc9e8076faa56ff33ec634818",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/636141b2cfa3129cc9e8076faa56ff33ec634818",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/636141b2cfa3129cc9e8076faa56ff33ec634818",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/636141b2cfa3129cc9e8076faa56ff33ec634818/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "74e4d80068f9c29d4891439332b4027328c8584b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/74e4d80068f9c29d4891439332b4027328c8584b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/74e4d80068f9c29d4891439332b4027328c8584b"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 24,
      "deletions": 9
    },
    "files": [
      {
        "sha": "29ffd0d53391ed20c73bd36821bdd82de0297ab0",
        "filename": "contrib/wallettools/walletchangepass.py",
        "status": "modified",
        "additions": 13,
        "deletions": 5,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/636141b2cfa3129cc9e8076faa56ff33ec634818/contrib/wallettools/walletchangepass.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/636141b2cfa3129cc9e8076faa56ff33ec634818/contrib/wallettools/walletchangepass.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/wallettools/walletchangepass.py?ref=636141b2cfa3129cc9e8076faa56ff33ec634818",
        "patch": "@@ -1,5 +1,13 @@\n-from jsonrpc import ServiceProxy\n-access = ServiceProxy(\"http://127.0.0.1:8332\")\n-pwd = raw_input(\"Enter old wallet passphrase: \")\n-pwd2 = raw_input(\"Enter new wallet passphrase: \")\n-access.walletpassphrasechange(pwd, pwd2)\n\\ No newline at end of file\n+from bitcoinrpc import connect_to_local\n+from getpass import getpass\n+\n+conn = connect_to_local()\n+old_pass = getpass(\"Enter old wallet passphrase: \")\n+new_pass = getpass(\"Enter new wallet passphrase: \")\n+\n+while not conn.walletpassphrasechange(old_pass, new_pass, dont_raise=True):\n+    print 'Error: The wallet passphrase entered was incorrect. Try again.\\n'\n+    old_pass = getpass(\"Enter old wallet passphrase: \")\n+    new_pass = getpass(\"Enter new wallet passphrase: \")\n+\n+print 'Password changed successfully'"
      },
      {
        "sha": "3a83109b9904083dceca68e2904f10534d1d9fd7",
        "filename": "contrib/wallettools/walletunlock.py",
        "status": "modified",
        "additions": 11,
        "deletions": 4,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/636141b2cfa3129cc9e8076faa56ff33ec634818/contrib/wallettools/walletunlock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/636141b2cfa3129cc9e8076faa56ff33ec634818/contrib/wallettools/walletunlock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/wallettools/walletunlock.py?ref=636141b2cfa3129cc9e8076faa56ff33ec634818",
        "patch": "@@ -1,4 +1,11 @@\n-from jsonrpc import ServiceProxy\n-access = ServiceProxy(\"http://127.0.0.1:8332\")\n-pwd = raw_input(\"Enter wallet passphrase: \")\n-access.walletpassphrase(pwd, 60)\n\\ No newline at end of file\n+from bitcoinrpc import connect_to_local\n+from getpass import getpass\n+\n+conn = connect_to_local()\n+pwd = getpass(\"Enter wallet passphrase: \")\n+\n+while not conn.walletpassphrase(pwd, 60, dont_raise=True):\n+    print \"Wrong password. Try again.\"\n+    pwd = getpass(\"Enter wallet passphrase: \")\n+\n+print \"Wallet unlocked.\""
      }
    ]
  },
  {
    "sha": "251c1f90297bb1bb23711ad075f91930188ac4c8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNTFjMWY5MDI5N2JiMWJiMjM3MTFhZDA3NWY5MTkzMDE4OGFjNGM4",
    "commit": {
      "author": {
        "name": "Aviad Reich",
        "email": "aviad.reich@intucellsystems.com",
        "date": "2013-03-31T07:30:04Z"
      },
      "committer": {
        "name": "Aviad Reich",
        "email": "aviad.reich@intucellsystems.com",
        "date": "2013-03-31T07:30:04Z"
      },
      "message": "add bitcoinrpc version of spendfrom.py which uses bitcoinrpc V0.3",
      "tree": {
        "sha": "52bebde3d34e543c3cdd896d013782d53a634f15",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/52bebde3d34e543c3cdd896d013782d53a634f15"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/251c1f90297bb1bb23711ad075f91930188ac4c8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/251c1f90297bb1bb23711ad075f91930188ac4c8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/251c1f90297bb1bb23711ad075f91930188ac4c8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/251c1f90297bb1bb23711ad075f91930188ac4c8/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "636141b2cfa3129cc9e8076faa56ff33ec634818",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/636141b2cfa3129cc9e8076faa56ff33ec634818",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/636141b2cfa3129cc9e8076faa56ff33ec634818"
      }
    ],
    "stats": {
      "total": 306,
      "additions": 306,
      "deletions": 0
    },
    "files": [
      {
        "sha": "8f47154c172b9363c16eb299e6dfac13a634dbf1",
        "filename": "contrib/spendfrom/bitcoinrpc_spendfrom.py",
        "status": "added",
        "additions": 306,
        "deletions": 0,
        "changes": 306,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/251c1f90297bb1bb23711ad075f91930188ac4c8/contrib/spendfrom/bitcoinrpc_spendfrom.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/251c1f90297bb1bb23711ad075f91930188ac4c8/contrib/spendfrom/bitcoinrpc_spendfrom.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/spendfrom/bitcoinrpc_spendfrom.py?ref=251c1f90297bb1bb23711ad075f91930188ac4c8",
        "patch": "@@ -0,0 +1,306 @@\n+#!/usr/bin/env python\n+#\n+# Use the raw transactions API to spend bitcoins received on particular addresses,\n+# and send any change back to that same address.\n+#\n+# Example usage:\n+#  spendfrom.py  # Lists available funds\n+#  spendfrom.py --from=ADDRESS --to=ADDRESS --amount=11.00\n+#\n+# Assumes it will talk to a bitcoind or Bitcoin-Qt running\n+# on localhost.\n+#\n+# Depends on jsonrpc\n+#\n+\n+from decimal import Decimal\n+import getpass\n+import os\n+import os.path\n+import platform\n+import sys\n+import time\n+\n+from bitcoinrpc import connect_to_local\n+from bitcoinrpc.proxy import json\n+from bitcoinrpc.exceptions import WalletPassphraseIncorrect\n+\n+\n+BASE_FEE = Decimal(\"0.001\")\n+\n+\n+def check_json_precision():\n+    \"\"\"Make sure json library being used does not lose precision converting BTC values\"\"\"\n+    n = Decimal(\"20000000.00000003\")\n+    satoshis = int(json.loads(json.dumps(float(n)))*1.0e8)\n+    if satoshis != 2000000000000003:\n+        raise RuntimeError(\"JSON encode/decode loses precision\")\n+\n+\n+def determine_db_dir():\n+    \"\"\"Return the default location of the bitcoin data directory\"\"\"\n+    if platform.system() == \"Darwin\":\n+        return os.path.expanduser(\"~/Library/Application Support/Bitcoin/\")\n+    elif platform.system() == \"Windows\":\n+        return os.path.join(os.environ['APPDATA'], \"Bitcoin\")\n+    return os.path.expanduser(\"~/.bitcoin\")\n+\n+\n+def read_bitcoin_config(dbdir):\n+    \"\"\"Read the bitcoin.conf file from dbdir, returns dictionary of settings\"\"\"\n+    from ConfigParser import SafeConfigParser\n+\n+    class FakeSecHead(object):\n+        def __init__(self, fp):\n+            self.fp = fp\n+            self.sechead = '[all]\\n'\n+\n+        def readline(self):\n+            if self.sechead:\n+                try:\n+                    return self.sechead\n+                finally:\n+                    self.sechead = None\n+            else:\n+                s = self.fp.readline()\n+                if s.find('#') != -1:\n+                    s = s[0:s.find('#')].strip() + \"\\n\"\n+                return s\n+\n+    config_parser = SafeConfigParser()\n+    config_parser.readfp(FakeSecHead(open(os.path.join(dbdir, \"bitcoin.conf\"))))\n+    return dict(config_parser.items(\"all\"))\n+\n+\n+def connect_JSON(config):\n+    \"\"\"Connect to a bitcoin JSON-RPC server\"\"\"\n+    testnet = config.get('testnet', '0')\n+    testnet = (int(testnet) > 0)  # 0/1 in config file, convert to True/False\n+    if not 'rpcport' in config:\n+        config['rpcport'] = 18332 if testnet else 8332\n+\n+    connection = 'http://{user}:{password}@localhost:{port}'.format(user=config['rpcuser'],\n+                                                                    password=config['rpcpassword'],\n+                                                                    port=config['rpcport'])\n+    try:\n+        ####################################################################\n+        # change this to connect_to_remote(user=config['rpcuser'],         #\n+        #                                  password=config['rpcpassword'], #\n+        #                                  host=<ENTER-HOST>,              #\n+        #                                  port=config['rpcport'])         #\n+        # in order to connect to a remote server                           #\n+        ####################################################################\n+        conn = connect_to_local()\n+        # ServiceProxy is lazy-connect, so send an RPC command mostly to catch connection errors,\n+        # but also make sure the bitcoind we're talking to is/isn't testnet:\n+        if conn.getmininginfo().testnet != testnet:\n+            sys.stderr.write(\"RPC server at {connection} testnet setting mismatch\\n\".format(\n+                connection=getattr(conn, 'url', connection)))\n+                # earlier versions of bitcoin-python do not have the connection.url attribute\n+            sys.exit(1)\n+        return conn\n+    except:\n+        sys.stderr.write(\"Error connecting to RPC server at {connection}\\n\".format(\n+            connection=getattr(conn, 'url', connection)))\n+            # earlier versions of bitcoin-python do not have the connection.url attribute\n+        sys.exit(1)\n+\n+\n+def unlock_wallet(bitcoind):\n+    info = bitcoind.getinfo()\n+    if 'unlocked_until' not in info.__dict__:\n+        return True  # wallet is not encrypted\n+    t = int(info.unlocked_until)\n+    if t <= time.time():\n+        try:\n+            passphrase = getpass.getpass(\"Wallet is locked; enter passphrase: \")\n+            bitcoind.walletpassphrase(passphrase, 5)\n+        except WalletPassphraseIncorrect:\n+            sys.stderr.write(\"Wrong passphrase\\n\")\n+        except:\n+            sys.stderr.write(\"Error while unlocking wallet\\n\")\n+\n+    info = bitcoind.getinfo()\n+    return int(info.unlocked_until) > time.time()\n+\n+\n+def list_available(bitcoind):\n+    address_summary = dict()\n+\n+    address_to_account = dict()\n+    for info in bitcoind.listreceivedbyaddress(0):\n+        address_to_account[info.address] = info.account\n+\n+    unspent = bitcoind.listunspent(0)\n+    for output in unspent:\n+        # listunspent doesn't give addresses, so:\n+        rawtx = bitcoind.getrawtransaction(output.txid)\n+        vout = rawtx.vout[output.vout]\n+        pk = vout[\"scriptPubKey\"]\n+\n+        # This code only deals with ordinary pay-to-bitcoin-address\n+        # or pay-to-script-hash outputs right now; anything exotic is ignored.\n+        if pk[\"type\"] != \"pubkeyhash\" and pk[\"type\"] != \"scripthash\":\n+            continue\n+\n+        address = pk[\"addresses\"][0]\n+        if address in address_summary:\n+            address_summary[address][\"total\"] += vout[\"value\"]\n+            address_summary[address][\"outputs\"].append(output)\n+        else:\n+            address_summary[address] = {\n+                \"total\": vout[\"value\"],\n+                \"outputs\": [output],\n+                \"account\": address_to_account.get(address, \"\")\n+            }\n+\n+    return address_summary\n+\n+\n+def select_coins(needed, inputs):\n+    # Feel free to improve this, this is good enough for my simple needs:\n+    outputs = []\n+    have = Decimal(\"0.0\")\n+    n = 0\n+    while have < needed and n < len(inputs):\n+        outputs.append({\"txid\": inputs[n].txid, \"vout\": inputs[n].vout})\n+        have += inputs[n].amount\n+        n += 1\n+    return (outputs, have-needed)\n+\n+\n+def create_tx(bitcoind, fromaddresses, toaddress, amount, fee):\n+    all_coins = list_available(bitcoind)\n+\n+    total_available = Decimal(\"0.0\")\n+    needed = amount+fee\n+    potential_inputs = []\n+    for addr in fromaddresses:\n+        if addr not in all_coins:\n+            continue\n+        potential_inputs.extend(all_coins[addr][\"outputs\"])\n+        total_available += all_coins[addr][\"total\"]\n+\n+    if total_available < needed:\n+        sys.stderr.write(\"Error, only %f BTC available, need %f\\n\" % (total_available, needed))\n+        sys.exit(1)\n+\n+    #\n+    # Note:\n+    # Python's json/jsonrpc modules have inconsistent support for Decimal numbers.\n+    # Instead of wrestling with getting json.dumps() (used by jsonrpc) to encode\n+    # Decimals, I'm casting amounts to float before sending them to bitcoind.\n+    #\n+    outputs = {toaddress: float(amount)}\n+    (inputs, change_amount) = select_coins(needed, potential_inputs)\n+    if change_amount > BASE_FEE:  # don't bother with zero or tiny change\n+        change_address = fromaddresses[-1]\n+        if change_address in outputs:\n+            outputs[change_address] += float(change_amount)\n+        else:\n+            outputs[change_address] = float(change_amount)\n+\n+    rawtx = bitcoind.createrawtransaction(inputs, outputs)\n+    signed_rawtx = bitcoind.signrawtransaction(rawtx)\n+    if not signed_rawtx[\"complete\"]:\n+        sys.stderr.write(\"signrawtransaction failed\\n\")\n+        sys.exit(1)\n+    txdata = signed_rawtx[\"hex\"]\n+\n+    return txdata\n+\n+\n+def compute_amount_in(bitcoind, txinfo):\n+    result = Decimal(\"0.0\")\n+    for vin in txinfo['vin']:\n+        in_info = bitcoind.getrawtransaction(vin['txid'], 1)\n+        vout = in_info.vout[vin['vout']]\n+        result = result + vout['value']\n+    return result\n+\n+\n+def compute_amount_out(txinfo):\n+    result = Decimal(\"0.0\")\n+    for vout in txinfo['vout']:\n+        result = result + vout['value']\n+    return result\n+\n+\n+def sanity_test_fee(bitcoind, txdata_hex, max_fee):\n+    class FeeError(RuntimeError):\n+        pass\n+    try:\n+        txinfo = bitcoind.decoderawtransaction(txdata_hex)\n+        total_in = compute_amount_in(bitcoind, txinfo)\n+        total_out = compute_amount_out(txinfo)\n+        if total_in-total_out > max_fee:\n+            raise FeeError(\"Rejecting transaction, unreasonable fee of \"+str(total_in-total_out))\n+\n+        tx_size = len(txdata_hex)/2\n+        kb = tx_size/1000  # integer division rounds down\n+        if kb > 1 and max_fee < BASE_FEE:\n+            raise FeeError(\"Rejecting no-fee transaction, larger than 1000 bytes\")\n+        if total_in < 0.01 and max_fee < BASE_FEE:\n+            raise FeeError(\"Rejecting no-fee, tiny-amount transaction\")\n+        # Exercise for the reader: compute transaction priority, and\n+        # warn if this is a very-low-priority transaction\n+\n+    except FeeError as err:\n+        sys.stderr.write((str(err)+\"\\n\"))\n+        sys.exit(1)\n+\n+\n+def main():\n+    import optparse\n+\n+    parser = optparse.OptionParser(usage=\"%prog [options]\")\n+    parser.add_option(\"--from\", dest=\"fromaddresses\", default=\"\",\n+                      help=\"addresses to get bitcoins from\")\n+    parser.add_option(\"--to\", dest=\"to\", default=None,\n+                      help=\"address to get send bitcoins to\")\n+    parser.add_option(\"--amount\", dest=\"amount\", default=None,\n+                      help=\"amount to send\")\n+    parser.add_option(\"--fee\", dest=\"fee\", default=\"0.0\",\n+                      help=\"fee to include\")\n+    parser.add_option(\"--datadir\", dest=\"datadir\", default=determine_db_dir(),\n+                      help=(\"location of bitcoin.conf file with RPC \"\n+                            \"username/password (default: %default)\"))\n+    parser.add_option(\"--testnet\", dest=\"testnet\", default=False, action=\"store_true\",\n+                      help=\"Use the test network\")\n+    parser.add_option(\"--dry_run\", dest=\"dry_run\", default=False, action=\"store_true\",\n+                      help=(\"Don't broadcast the transaction, just create \"\n+                            \"and print the transaction data\"))\n+\n+    (options, args) = parser.parse_args()\n+\n+    check_json_precision()\n+    config = read_bitcoin_config(options.datadir)\n+    if options.testnet:\n+        config['testnet'] = True\n+    bitcoind = connect_JSON(config)\n+\n+    if options.amount is None:\n+        address_summary = list_available(bitcoind)\n+        for address, info in address_summary.iteritems():\n+            n_transactions = len(info['outputs'])\n+            if n_transactions > 1:\n+                print(\"%s %.8f %s (%d transactions)\" %\n+                      (address, info['total'], info['account'], n_transactions))\n+            else:\n+                print(\"%s %.8f %s\" % (address, info['total'], info['account']))\n+    else:\n+        fee = Decimal(options.fee)\n+        amount = Decimal(options.amount)\n+        while not unlock_wallet(bitcoind):\n+            pass  # Keep asking for passphrase until they get it right\n+        txdata = create_tx(bitcoind, options.fromaddresses.split(\",\"), options.to, amount, fee)\n+        sanity_test_fee(bitcoind, txdata, amount*Decimal(\"0.01\"))\n+        if options.dry_run:\n+            print(txdata)\n+        else:\n+            txid = bitcoind.sendrawtransaction(txdata)\n+            print(txid)\n+\n+\n+if __name__ == '__main__':\n+    main()"
      }
    ]
  }
]