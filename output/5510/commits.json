[
  {
    "sha": "4414f5ffe130f46becdc75c8e59ee74604e978aa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NDE0ZjVmZmUxMzBmNDZiZWNkYzc1YzhlNTllZTc0NjA0ZTk3OGFh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-12-19T08:53:43Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-06T14:54:53Z"
      },
      "message": "build: Endian compatibility\n\n- Detect endian instead of stopping configure on big-endian\n- Add `byteswap.h` and `endian.h` header for compatibility with\n  Windows and other operating systems that don't come with them\n- Update `crypto/common.h` functions to use compat\n  endian header",
      "tree": {
        "sha": "857dbb3624c21023894060ea030f55f4628432e3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/857dbb3624c21023894060ea030f55f4628432e3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4414f5ffe130f46becdc75c8e59ee74604e978aa",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4414f5ffe130f46becdc75c8e59ee74604e978aa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4414f5ffe130f46becdc75c8e59ee74604e978aa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4414f5ffe130f46becdc75c8e59ee74604e978aa/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "51377c2dbe0d71dad953a43187749a38010d1f1f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/51377c2dbe0d71dad953a43187749a38010d1f1f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/51377c2dbe0d71dad953a43187749a38010d1f1f"
      }
    ],
    "stats": {
      "total": 332,
      "additions": 263,
      "deletions": 69
    },
    "files": [
      {
        "sha": "2c918218bb836e19cf078b55526e34f72a456eee",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 9,
        "deletions": 4,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4414f5ffe130f46becdc75c8e59ee74604e978aa/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4414f5ffe130f46becdc75c8e59ee74604e978aa/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=4414f5ffe130f46becdc75c8e59ee74604e978aa",
        "patch": "@@ -350,8 +350,8 @@ if test x$use_lcov = xyes; then\n     [AC_MSG_ERROR(\"lcov testing requested but --coverage flag does not work\")])\n fi\n \n-dnl Require little endian\n-AC_C_BIGENDIAN([AC_MSG_ERROR(\"Big Endian not supported\")])\n+dnl Check for endianness\n+AC_C_BIGENDIAN\n \n dnl Check for pthread compile/link requirements\n AX_PTHREAD\n@@ -438,17 +438,22 @@ if test x$TARGET_OS = xdarwin; then\n   AX_CHECK_LINK_FLAG([[-Wl,-dead_strip]], [LDFLAGS=\"$LDFLAGS -Wl,-dead_strip\"])\n fi\n \n-AC_CHECK_HEADERS([endian.h stdio.h stdlib.h unistd.h strings.h sys/types.h sys/stat.h sys/select.h sys/prctl.h])\n+AC_CHECK_HEADERS([endian.h byteswap.h stdio.h stdlib.h unistd.h strings.h sys/types.h sys/stat.h sys/select.h sys/prctl.h])\n AC_SEARCH_LIBS([getaddrinfo_a], [anl], [AC_DEFINE(HAVE_GETADDRINFO_A, 1, [Define this symbol if you have getaddrinfo_a])])\n AC_SEARCH_LIBS([inet_pton], [nsl resolv], [AC_DEFINE(HAVE_INET_PTON, 1, [Define this symbol if you have inet_pton])])\n \n AC_CHECK_DECLS([strnlen])\n \n-AC_CHECK_DECLS([le32toh, le64toh, htole32, htole64, be32toh, be64toh, htobe32, htobe64],,,\n+AC_CHECK_DECLS([le16toh, le32toh, le64toh, htole16, htole32, htole64, be16toh, be32toh, be64toh, htobe16, htobe32, htobe64],,,\n \t\t[#if HAVE_ENDIAN_H\n                  #include <endian.h>\n                  #endif])\n \n+AC_CHECK_DECLS([bswap_16, bswap_32, bswap_64],,,\n+\t\t[#if HAVE_BYTESWAP_H\n+                 #include <byteswap.h>\n+                 #endif])\n+\n dnl Check for MSG_NOSIGNAL\n AC_MSG_CHECKING(for MSG_NOSIGNAL)\n AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <sys/socket.h>]],"
      },
      {
        "sha": "da65efa713279c2b23df5b791bbd3b72a2bbb06b",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4414f5ffe130f46becdc75c8e59ee74604e978aa/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4414f5ffe130f46becdc75c8e59ee74604e978aa/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=4414f5ffe130f46becdc75c8e59ee74604e978aa",
        "patch": "@@ -141,6 +141,8 @@ BITCOIN_CORE_H = \\\n   walletdb.h \\\n   wallet.h \\\n   wallet_ismine.h \\\n+  compat/byteswap.h \\\n+  compat/endian.h \\\n   compat/sanity.h\n \n JSON_H = \\"
      },
      {
        "sha": "899220bdc549053927edf86a29bc415310fb5eba",
        "filename": "src/compat/byteswap.h",
        "status": "added",
        "additions": 47,
        "deletions": 0,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4414f5ffe130f46becdc75c8e59ee74604e978aa/src/compat/byteswap.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4414f5ffe130f46becdc75c8e59ee74604e978aa/src/compat/byteswap.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat/byteswap.h?ref=4414f5ffe130f46becdc75c8e59ee74604e978aa",
        "patch": "@@ -0,0 +1,47 @@\n+// Copyright (c) 2014 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_COMPAT_BYTESWAP_H\n+#define BITCOIN_COMPAT_BYTESWAP_H\n+\n+#if defined(HAVE_CONFIG_H)\n+#include \"config/bitcoin-config.h\"\n+#endif\n+\n+#include <stdint.h>\n+\n+#if defined(HAVE_BYTESWAP_H)\n+#include <byteswap.h>\n+#endif\n+\n+#if HAVE_DECL_BSWAP_16 == 0\n+inline uint16_t bswap_16(uint16_t x)\n+{\n+    return (x >> 8) | ((x & 0x00ff) << 8);\n+}\n+#endif // HAVE_DECL_BSWAP16\n+\n+#if HAVE_DECL_BSWAP_32 == 0\n+inline uint32_t bswap_32(uint32_t x)\n+{\n+    return (((x & 0xff000000U) >> 24) | ((x & 0x00ff0000U) >>  8) |\n+            ((x & 0x0000ff00U) <<  8) | ((x & 0x000000ffU) << 24));\n+}\n+#endif // HAVE_DECL_BSWAP32\n+\n+#if HAVE_DECL_BSWAP_64 == 0\n+inline uint64_t bswap_64(uint64_t x)\n+{\n+     return (((x & 0xff00000000000000ull) >> 56)\n+          | ((x & 0x00ff000000000000ull) >> 40)\n+          | ((x & 0x0000ff0000000000ull) >> 24)\n+          | ((x & 0x000000ff00000000ull) >> 8)\n+          | ((x & 0x00000000ff000000ull) << 8)\n+          | ((x & 0x0000000000ff0000ull) << 24)\n+          | ((x & 0x000000000000ff00ull) << 40)\n+          | ((x & 0x00000000000000ffull) << 56));\n+}\n+#endif // HAVE_DECL_BSWAP64\n+\n+#endif // BITCOIN_COMPAT_BYTESWAP_H"
      },
      {
        "sha": "4d041d655411738476ecbc1e5c96e845452d8b8f",
        "filename": "src/compat/endian.h",
        "status": "added",
        "additions": 194,
        "deletions": 0,
        "changes": 194,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4414f5ffe130f46becdc75c8e59ee74604e978aa/src/compat/endian.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4414f5ffe130f46becdc75c8e59ee74604e978aa/src/compat/endian.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat/endian.h?ref=4414f5ffe130f46becdc75c8e59ee74604e978aa",
        "patch": "@@ -0,0 +1,194 @@\n+// Copyright (c) 2014 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_COMPAT_ENDIAN_H\n+#define BITCOIN_COMPAT_ENDIAN_H\n+\n+#if defined(HAVE_CONFIG_H)\n+#include \"config/bitcoin-config.h\"\n+#endif\n+\n+#include <stdint.h>\n+\n+#include \"compat/byteswap.h\"\n+\n+#if defined(HAVE_ENDIAN_H)\n+#include <endian.h>\n+#endif\n+\n+#if defined(WORDS_BIGENDIAN)\n+\n+#if HAVE_DECL_HTOBE16 == 0\n+inline uint16_t htobe16(uint16_t host_16bits)\n+{\n+    return host_16bits;\n+}\n+#endif // HAVE_DECL_HTOBE16\n+\n+#if HAVE_DECL_HTOLE16 == 0\n+inline uint16_t htole16(uint16_t host_16bits)\n+{\n+    return bswap_16(host_16bits);\n+}\n+#endif // HAVE_DECL_HTOLE16\n+\n+#if HAVE_DECL_BE16TOH == 0\n+inline uint16_t be16toh(uint16_t big_endian_16bits)\n+{\n+    return big_endian_16bits;\n+}\n+#endif // HAVE_DECL_BE16TOH\n+\n+#if HAVE_DECL_LE16TOH == 0\n+inline uint16_t le16toh(uint16_t little_endian_16bits)\n+{\n+    return bswap_16(little_endian_16bits);\n+}\n+#endif // HAVE_DECL_LE16TOH\n+\n+#if HAVE_DECL_HTOBE32 == 0\n+inline uint32_t htobe32(uint32_t host_32bits)\n+{\n+    return host_32bits;\n+}\n+#endif // HAVE_DECL_HTOBE32\n+\n+#if HAVE_DECL_HTOLE32 == 0\n+inline uint32_t htole32(uint32_t host_32bits)\n+{\n+    return bswap_32(host_32bits);\n+}\n+#endif // HAVE_DECL_HTOLE32\n+\n+#if HAVE_DECL_BE32TOH == 0\n+inline uint32_t be32toh(uint32_t big_endian_32bits)\n+{\n+    return big_endian_32bits;\n+}\n+#endif // HAVE_DECL_BE32TOH\n+\n+#if HAVE_DECL_LE32TOH == 0\n+inline uint32_t le32toh(uint32_t little_endian_32bits)\n+{\n+    return bswap_32(little_endian_32bits);\n+}\n+#endif // HAVE_DECL_LE32TOH\n+\n+#if HAVE_DECL_HTOBE64 == 0\n+inline uint64_t htobe64(uint64_t host_64bits)\n+{\n+    return host_64bits;\n+}\n+#endif // HAVE_DECL_HTOBE64\n+\n+#if HAVE_DECL_HTOLE64 == 0\n+inline uint64_t htole64(uint64_t host_64bits)\n+{\n+    return bswap_64(host_64bits);\n+}\n+#endif // HAVE_DECL_HTOLE64\n+\n+#if HAVE_DECL_BE64TOH == 0\n+inline uint64_t be64toh(uint64_t big_endian_64bits)\n+{\n+    return big_endian_64bits;\n+}\n+#endif // HAVE_DECL_BE64TOH\n+\n+#if HAVE_DECL_LE64TOH == 0\n+inline uint64_t le64toh(uint64_t little_endian_64bits)\n+{\n+    return bswap_64(little_endian_64bits);\n+}\n+#endif // HAVE_DECL_LE64TOH\n+\n+#else // WORDS_BIGENDIAN\n+\n+#if HAVE_DECL_HTOBE16 == 0\n+inline uint16_t htobe16(uint16_t host_16bits)\n+{\n+    return bswap_16(host_16bits);\n+}\n+#endif // HAVE_DECL_HTOBE16\n+\n+#if HAVE_DECL_HTOLE16 == 0\n+inline uint16_t htole16(uint16_t host_16bits)\n+{\n+    return host_16bits;\n+}\n+#endif // HAVE_DECL_HTOLE16\n+\n+#if HAVE_DECL_BE16TOH == 0\n+inline uint16_t be16toh(uint16_t big_endian_16bits)\n+{\n+    return bswap_16(big_endian_16bits);\n+}\n+#endif // HAVE_DECL_BE16TOH\n+\n+#if HAVE_DECL_LE16TOH == 0\n+inline uint16_t le16toh(uint16_t little_endian_16bits)\n+{\n+    return little_endian_16bits;\n+}\n+#endif // HAVE_DECL_LE16TOH\n+\n+#if HAVE_DECL_HTOBE32 == 0\n+inline uint32_t htobe32(uint32_t host_32bits)\n+{\n+    return bswap_32(host_32bits);\n+}\n+#endif // HAVE_DECL_HTOBE32\n+\n+#if HAVE_DECL_HTOLE32 == 0\n+inline uint32_t htole32(uint32_t host_32bits)\n+{\n+    return host_32bits;\n+}\n+#endif // HAVE_DECL_HTOLE32\n+\n+#if HAVE_DECL_BE32TOH == 0\n+inline uint32_t be32toh(uint32_t big_endian_32bits)\n+{\n+    return bswap_32(big_endian_32bits);\n+}\n+#endif // HAVE_DECL_BE32TOH\n+\n+#if HAVE_DECL_LE32TOH == 0\n+inline uint32_t le32toh(uint32_t little_endian_32bits)\n+{\n+    return little_endian_32bits;\n+}\n+#endif // HAVE_DECL_LE32TOH\n+\n+#if HAVE_DECL_HTOBE64 == 0\n+inline uint64_t htobe64(uint64_t host_64bits)\n+{\n+    return bswap_64(host_64bits);\n+}\n+#endif // HAVE_DECL_HTOBE64\n+\n+#if HAVE_DECL_HTOLE64 == 0\n+inline uint64_t htole64(uint64_t host_64bits)\n+{\n+    return host_64bits;\n+}\n+#endif // HAVE_DECL_HTOLE64\n+\n+#if HAVE_DECL_BE64TOH == 0\n+inline uint64_t be64toh(uint64_t big_endian_64bits)\n+{\n+    return bswap_64(big_endian_64bits);\n+}\n+#endif // HAVE_DECL_BE64TOH\n+\n+#if HAVE_DECL_LE64TOH == 0\n+inline uint64_t le64toh(uint64_t little_endian_64bits)\n+{\n+    return little_endian_64bits;\n+}\n+#endif // HAVE_DECL_LE64TOH\n+\n+#endif // WORDS_BIGENDIAN\n+\n+#endif // BITCOIN_COMPAT_ENDIAN_H"
      },
      {
        "sha": "580c72f5a6480f1e884120d78b51fb628fe515dc",
        "filename": "src/crypto/common.h",
        "status": "modified",
        "additions": 11,
        "deletions": 65,
        "changes": 76,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4414f5ffe130f46becdc75c8e59ee74604e978aa/src/crypto/common.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4414f5ffe130f46becdc75c8e59ee74604e978aa/src/crypto/common.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/common.h?ref=4414f5ffe130f46becdc75c8e59ee74604e978aa",
        "patch": "@@ -11,110 +11,56 @@\n \n #include <stdint.h>\n \n-#if defined(HAVE_ENDIAN_H)\n-#include <endian.h>\n-#endif\n+#include \"compat/endian.h\"\n+\n+uint16_t static inline ReadLE16(const unsigned char* ptr)\n+{\n+    return le16toh(*((uint16_t*)ptr));\n+}\n \n uint32_t static inline ReadLE32(const unsigned char* ptr)\n {\n-#if HAVE_DECL_LE32TOH == 1\n     return le32toh(*((uint32_t*)ptr));\n-#elif !defined(WORDS_BIGENDIAN)\n-    return *((uint32_t*)ptr);\n-#else\n-    return ((uint32_t)ptr[3] << 24 | (uint32_t)ptr[2] << 16 | (uint32_t)ptr[1] << 8 | (uint32_t)ptr[0]);\n-#endif\n }\n \n uint64_t static inline ReadLE64(const unsigned char* ptr)\n {\n-#if HAVE_DECL_LE64TOH == 1\n     return le64toh(*((uint64_t*)ptr));\n-#elif !defined(WORDS_BIGENDIAN)\n-    return *((uint64_t*)ptr);\n-#else\n-    return ((uint64_t)ptr[7] << 56 | (uint64_t)ptr[6] << 48 | (uint64_t)ptr[5] << 40 | (uint64_t)ptr[4] << 32 |\n-            (uint64_t)ptr[3] << 24 | (uint64_t)ptr[2] << 16 | (uint64_t)ptr[1] << 8 | (uint64_t)ptr[0]);\n-#endif\n+}\n+\n+void static inline WriteLE16(unsigned char* ptr, uint16_t x)\n+{\n+    *((uint16_t*)ptr) = htole16(x);\n }\n \n void static inline WriteLE32(unsigned char* ptr, uint32_t x)\n {\n-#if HAVE_DECL_HTOLE32 == 1\n     *((uint32_t*)ptr) = htole32(x);\n-#elif !defined(WORDS_BIGENDIAN)\n-    *((uint32_t*)ptr) = x;\n-#else\n-    ptr[3] = x >> 24;\n-    ptr[2] = x >> 16;\n-    ptr[1] = x >> 8;\n-    ptr[0] = x;\n-#endif\n }\n \n void static inline WriteLE64(unsigned char* ptr, uint64_t x)\n {\n-#if HAVE_DECL_HTOLE64 == 1\n     *((uint64_t*)ptr) = htole64(x);\n-#elif !defined(WORDS_BIGENDIAN)\n-    *((uint64_t*)ptr) = x;\n-#else\n-    ptr[7] = x >> 56;\n-    ptr[6] = x >> 48;\n-    ptr[5] = x >> 40;\n-    ptr[4] = x >> 32;\n-    ptr[3] = x >> 24;\n-    ptr[2] = x >> 16;\n-    ptr[1] = x >> 8;\n-    ptr[0] = x;\n-#endif\n }\n \n uint32_t static inline ReadBE32(const unsigned char* ptr)\n {\n-#if HAVE_DECL_BE32TOH == 1\n     return be32toh(*((uint32_t*)ptr));\n-#else\n-    return ((uint32_t)ptr[0] << 24 | (uint32_t)ptr[1] << 16 | (uint32_t)ptr[2] << 8 | (uint32_t)ptr[3]);\n-#endif\n }\n \n uint64_t static inline ReadBE64(const unsigned char* ptr)\n {\n-#if HAVE_DECL_BE64TOH == 1\n     return be64toh(*((uint64_t*)ptr));\n-#else\n-    return ((uint64_t)ptr[0] << 56 | (uint64_t)ptr[1] << 48 | (uint64_t)ptr[2] << 40 | (uint64_t)ptr[3] << 32 |\n-            (uint64_t)ptr[4] << 24 | (uint64_t)ptr[5] << 16 | (uint64_t)ptr[6] << 8 | (uint64_t)ptr[7]);\n-#endif\n }\n \n void static inline WriteBE32(unsigned char* ptr, uint32_t x)\n {\n-#if HAVE_DECL_HTOBE32 == 1\n     *((uint32_t*)ptr) = htobe32(x);\n-#else\n-    ptr[0] = x >> 24;\n-    ptr[1] = x >> 16;\n-    ptr[2] = x >> 8;\n-    ptr[3] = x;\n-#endif\n }\n \n void static inline WriteBE64(unsigned char* ptr, uint64_t x)\n {\n-#if HAVE_DECL_HTOBE64 == 1\n     *((uint64_t*)ptr) = htobe64(x);\n-#else\n-    ptr[0] = x >> 56;\n-    ptr[1] = x >> 48;\n-    ptr[2] = x >> 40;\n-    ptr[3] = x >> 32;\n-    ptr[4] = x >> 24;\n-    ptr[5] = x >> 16;\n-    ptr[6] = x >> 8;\n-    ptr[7] = x;\n-#endif\n }\n \n #endif // BITCOIN_CRYPTO_COMMON_H"
      }
    ]
  },
  {
    "sha": "3ca5852dc27cec926e4e7b09ec3ccc369a2a0781",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozY2E1ODUyZGMyN2NlYzkyNmU0ZTdiMDllYzNjY2MzNjlhMmEwNzgx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-12-19T10:38:03Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-06T14:54:53Z"
      },
      "message": "src/hash.cpp: endian compatibility",
      "tree": {
        "sha": "dd6a31fac844b268137b7b0dcfbaa68756903156",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dd6a31fac844b268137b7b0dcfbaa68756903156"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3ca5852dc27cec926e4e7b09ec3ccc369a2a0781",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ca5852dc27cec926e4e7b09ec3ccc369a2a0781",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3ca5852dc27cec926e4e7b09ec3ccc369a2a0781",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ca5852dc27cec926e4e7b09ec3ccc369a2a0781/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4414f5ffe130f46becdc75c8e59ee74604e978aa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4414f5ffe130f46becdc75c8e59ee74604e978aa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4414f5ffe130f46becdc75c8e59ee74604e978aa"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 4,
      "deletions": 2
    },
    "files": [
      {
        "sha": "20d5d217778f2beb5f007d6e3e36a8175c69ea10",
        "filename": "src/hash.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ca5852dc27cec926e4e7b09ec3ccc369a2a0781/src/hash.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ca5852dc27cec926e4e7b09ec3ccc369a2a0781/src/hash.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hash.cpp?ref=3ca5852dc27cec926e4e7b09ec3ccc369a2a0781",
        "patch": "@@ -3,8 +3,10 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"hash.h\"\n+#include \"crypto/common.h\"\n #include \"crypto/hmac_sha512.h\"\n \n+\n inline uint32_t ROTL32(uint32_t x, int8_t r)\n {\n     return (x << r) | (x >> (32 - r));\n@@ -23,10 +25,10 @@ unsigned int MurmurHash3(unsigned int nHashSeed, const std::vector<unsigned char\n \n         //----------\n         // body\n-        const uint32_t* blocks = (const uint32_t*)(&vDataToHash[0] + nblocks * 4);\n+        const uint8_t* blocks = &vDataToHash[0] + nblocks * 4;\n \n         for (int i = -nblocks; i; i++) {\n-            uint32_t k1 = blocks[i];\n+            uint32_t k1 = ReadLE32(blocks + i*4);\n \n             k1 *= c1;\n             k1 = ROTL32(k1, 15);"
      }
    ]
  },
  {
    "sha": "556814ec4ec7e2c5a1b441f8b9a49dbf715fec6b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NTY4MTRlYzRlYzdlMmM1YTFiNDQxZjhiOWE0OWRiZjcxNWZlYzZi",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-12-19T10:38:30Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-06T16:21:55Z"
      },
      "message": "src/main.cpp: endian compatibility in packet checksum check",
      "tree": {
        "sha": "d3d84ddb9d4025bd68d677d4acec639e01cb98f6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d3d84ddb9d4025bd68d677d4acec639e01cb98f6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/556814ec4ec7e2c5a1b441f8b9a49dbf715fec6b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/556814ec4ec7e2c5a1b441f8b9a49dbf715fec6b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/556814ec4ec7e2c5a1b441f8b9a49dbf715fec6b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/556814ec4ec7e2c5a1b441f8b9a49dbf715fec6b/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3ca5852dc27cec926e4e7b09ec3ccc369a2a0781",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ca5852dc27cec926e4e7b09ec3ccc369a2a0781",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3ca5852dc27cec926e4e7b09ec3ccc369a2a0781"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 1,
      "deletions": 2
    },
    "files": [
      {
        "sha": "9927ac75987740f68d2a0ca29fd61cc0a5ae172f",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/556814ec4ec7e2c5a1b441f8b9a49dbf715fec6b/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/556814ec4ec7e2c5a1b441f8b9a49dbf715fec6b/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=556814ec4ec7e2c5a1b441f8b9a49dbf715fec6b",
        "patch": "@@ -4318,8 +4318,7 @@ bool ProcessMessages(CNode* pfrom)\n         // Checksum\n         CDataStream& vRecv = msg.vRecv;\n         uint256 hash = Hash(vRecv.begin(), vRecv.begin() + nMessageSize);\n-        unsigned int nChecksum = 0;\n-        memcpy(&nChecksum, &hash, sizeof(nChecksum));\n+        unsigned int nChecksum = ReadLE32((unsigned char*)&hash);\n         if (nChecksum != hdr.nChecksum)\n         {\n             LogPrintf(\"ProcessMessages(%s, %u bytes): CHECKSUM ERROR nChecksum=%08x hdr.nChecksum=%08x\\n\","
      }
    ]
  },
  {
    "sha": "dec84cae2a7534af95873d5d96e38ad96b447d52",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZWM4NGNhZTJhNzUzNGFmOTU4NzNkNWQ5NmUzOGFkOTZiNDQ3ZDUy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-12-19T10:38:57Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-06T16:21:58Z"
      },
      "message": "src/net.cpp: endian compatibility in EndMessage",
      "tree": {
        "sha": "64c04330da17f4da94945aea84ef927402342d22",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/64c04330da17f4da94945aea84ef927402342d22"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dec84cae2a7534af95873d5d96e38ad96b447d52",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dec84cae2a7534af95873d5d96e38ad96b447d52",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dec84cae2a7534af95873d5d96e38ad96b447d52",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dec84cae2a7534af95873d5d96e38ad96b447d52/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "556814ec4ec7e2c5a1b441f8b9a49dbf715fec6b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/556814ec4ec7e2c5a1b441f8b9a49dbf715fec6b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/556814ec4ec7e2c5a1b441f8b9a49dbf715fec6b"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "08d1d57408344b46630ad745a5a6348c609c3e6b",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dec84cae2a7534af95873d5d96e38ad96b447d52/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dec84cae2a7534af95873d5d96e38ad96b447d52/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=dec84cae2a7534af95873d5d96e38ad96b447d52",
        "patch": "@@ -14,6 +14,7 @@\n #include \"clientversion.h\"\n #include \"primitives/transaction.h\"\n #include \"ui_interface.h\"\n+#include \"crypto/common.h\"\n \n #ifdef WIN32\n #include <string.h>\n@@ -2007,7 +2008,7 @@ void CNode::EndMessage() UNLOCK_FUNCTION(cs_vSend)\n \n     // Set the size\n     unsigned int nSize = ssSend.size() - CMessageHeader::HEADER_SIZE;\n-    memcpy((char*)&ssSend[CMessageHeader::MESSAGE_SIZE_OFFSET], &nSize, sizeof(nSize));\n+    WriteLE32((uint8_t*)&ssSend[CMessageHeader::MESSAGE_SIZE_OFFSET], nSize);\n \n     // Set the checksum\n     uint256 hash = Hash(ssSend.begin() + CMessageHeader::HEADER_SIZE, ssSend.end());"
      }
    ]
  },
  {
    "sha": "81aeb28436d847ed4e6bcda8c746a3e5631c7feb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MWFlYjI4NDM2ZDg0N2VkNGU2YmNkYThjNzQ2YTNlNTYzMWM3ZmVi",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-12-19T10:39:38Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-06T16:21:58Z"
      },
      "message": "src/primitives/block.cpp: endian compatibility in GetHash",
      "tree": {
        "sha": "c59787dbd7315c10eea11b7ae31573bda6e7c05d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c59787dbd7315c10eea11b7ae31573bda6e7c05d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/81aeb28436d847ed4e6bcda8c746a3e5631c7feb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/81aeb28436d847ed4e6bcda8c746a3e5631c7feb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/81aeb28436d847ed4e6bcda8c746a3e5631c7feb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/81aeb28436d847ed4e6bcda8c746a3e5631c7feb/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dec84cae2a7534af95873d5d96e38ad96b447d52",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dec84cae2a7534af95873d5d96e38ad96b447d52",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dec84cae2a7534af95873d5d96e38ad96b447d52"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 12,
      "deletions": 0
    },
    "files": [
      {
        "sha": "8338762a38a7083481a58562fb67d3d4d9077132",
        "filename": "src/primitives/block.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/81aeb28436d847ed4e6bcda8c746a3e5631c7feb/src/primitives/block.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/81aeb28436d847ed4e6bcda8c746a3e5631c7feb/src/primitives/block.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.cpp?ref=81aeb28436d847ed4e6bcda8c746a3e5631c7feb",
        "patch": "@@ -8,10 +8,22 @@\n #include \"hash.h\"\n #include \"tinyformat.h\"\n #include \"utilstrencodings.h\"\n+#include \"crypto/common.h\"\n \n uint256 CBlockHeader::GetHash() const\n {\n+#if defined(WORDS_BIGENDIAN)\n+    uint8_t data[80];\n+    WriteLE32(&data[0], nVersion);\n+    memcpy(&data[4], hashPrevBlock.begin(), hashPrevBlock.size());\n+    memcpy(&data[36], hashMerkleRoot.begin(), hashMerkleRoot.size());\n+    WriteLE32(&data[68], nTime);\n+    WriteLE32(&data[72], nBits);\n+    WriteLE32(&data[76], nNonce);\n+    return Hash(data, data + 80);\n+#else // Can take shortcut for little endian\n     return Hash(BEGIN(nVersion), END(nNonce));\n+#endif\n }\n \n uint256 CBlock::BuildMerkleTree(bool* fMutated) const"
      }
    ]
  },
  {
    "sha": "4f92773f9285760fe3e2eb14f5ca21de850d1955",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZjkyNzczZjkyODU3NjBmZTNlMmViMTRmNWNhMjFkZTg1MGQxOTU1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-12-19T10:40:00Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-06T16:21:58Z"
      },
      "message": "src/primitives/transaction.h: endian compatibility in serialization",
      "tree": {
        "sha": "5270003fb01a7c84b60a688a1e510ddd9fb0fb05",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5270003fb01a7c84b60a688a1e510ddd9fb0fb05"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4f92773f9285760fe3e2eb14f5ca21de850d1955",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4f92773f9285760fe3e2eb14f5ca21de850d1955",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4f92773f9285760fe3e2eb14f5ca21de850d1955",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4f92773f9285760fe3e2eb14f5ca21de850d1955/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "81aeb28436d847ed4e6bcda8c746a3e5631c7feb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/81aeb28436d847ed4e6bcda8c746a3e5631c7feb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/81aeb28436d847ed4e6bcda8c746a3e5631c7feb"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "0ba9affeda5a63b9a0ab62945f045e691b685359",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f92773f9285760fe3e2eb14f5ca21de850d1955/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f92773f9285760fe3e2eb14f5ca21de850d1955/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=4f92773f9285760fe3e2eb14f5ca21de850d1955",
        "patch": "@@ -25,7 +25,8 @@ class COutPoint\n \n     template <typename Stream, typename Operation>\n     inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        READWRITE(FLATDATA(*this));\n+        READWRITE(hash);\n+        READWRITE(n);\n     }\n \n     void SetNull() { hash.SetNull(); n = (uint32_t) -1; }"
      }
    ]
  },
  {
    "sha": "4e853aa163ddb978d25bd8b8ecfd730a1d09e051",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZTg1M2FhMTYzZGRiOTc4ZDI1YmQ4YjhlY2ZkNzMwYTFkMDllMDUx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-12-19T10:41:12Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-06T16:21:58Z"
      },
      "message": "src/script/script.h: endian compatibility for PUSHDATA sizes",
      "tree": {
        "sha": "f97f78650dfb96ffb43ff3fd26e4cdd1457a9952",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f97f78650dfb96ffb43ff3fd26e4cdd1457a9952"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4e853aa163ddb978d25bd8b8ecfd730a1d09e051",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e853aa163ddb978d25bd8b8ecfd730a1d09e051",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4e853aa163ddb978d25bd8b8ecfd730a1d09e051",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e853aa163ddb978d25bd8b8ecfd730a1d09e051/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4f92773f9285760fe3e2eb14f5ca21de850d1955",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4f92773f9285760fe3e2eb14f5ca21de850d1955",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4f92773f9285760fe3e2eb14f5ca21de850d1955"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 9,
      "deletions": 7
    },
    "files": [
      {
        "sha": "ed456f5c5ad53944895684ef196bfa4f55585bc6",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 9,
        "deletions": 7,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4e853aa163ddb978d25bd8b8ecfd730a1d09e051/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4e853aa163ddb978d25bd8b8ecfd730a1d09e051/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=4e853aa163ddb978d25bd8b8ecfd730a1d09e051",
        "patch": "@@ -14,6 +14,7 @@\n #include <string.h>\n #include <string>\n #include <vector>\n+#include \"crypto/common.h\"\n \n static const unsigned int MAX_SCRIPT_ELEMENT_SIZE = 520; // bytes\n \n@@ -416,14 +417,16 @@ class CScript : public std::vector<unsigned char>\n         else if (b.size() <= 0xffff)\n         {\n             insert(end(), OP_PUSHDATA2);\n-            unsigned short nSize = b.size();\n-            insert(end(), (unsigned char*)&nSize, (unsigned char*)&nSize + sizeof(nSize));\n+            uint8_t data[2];\n+            WriteLE16(data, b.size());\n+            insert(end(), data, data + sizeof(data));\n         }\n         else\n         {\n             insert(end(), OP_PUSHDATA4);\n-            unsigned int nSize = b.size();\n-            insert(end(), (unsigned char*)&nSize, (unsigned char*)&nSize + sizeof(nSize));\n+            uint8_t data[4];\n+            WriteLE32(data, b.size());\n+            insert(end(), data, data + sizeof(data));\n         }\n         insert(end(), b.begin(), b.end());\n         return *this;\n@@ -496,15 +499,14 @@ class CScript : public std::vector<unsigned char>\n             {\n                 if (end() - pc < 2)\n                     return false;\n-                nSize = 0;\n-                memcpy(&nSize, &pc[0], 2);\n+                nSize = ReadLE16(&pc[0]);\n                 pc += 2;\n             }\n             else if (opcode == OP_PUSHDATA4)\n             {\n                 if (end() - pc < 4)\n                     return false;\n-                memcpy(&nSize, &pc[0], 4);\n+                nSize = ReadLE32(&pc[0]);\n                 pc += 4;\n             }\n             if (end() - pc < 0 || (unsigned int)(end() - pc) < nSize)"
      }
    ]
  },
  {
    "sha": "01f9c3449a88748722dd51c7b54305fd1ba87359",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMWY5YzM0NDlhODg3NDg3MjJkZDUxYzdiNTQzMDVmZDFiYTg3MzU5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-12-19T10:41:50Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-06T16:21:58Z"
      },
      "message": "src/serialize.h: base serialization level endianness neutrality\n\nSerialization type-safety and endianness compatibility.",
      "tree": {
        "sha": "e903a2035f511f55e3f9662c0fa0513a2522e19c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e903a2035f511f55e3f9662c0fa0513a2522e19c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/01f9c3449a88748722dd51c7b54305fd1ba87359",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01f9c3449a88748722dd51c7b54305fd1ba87359",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/01f9c3449a88748722dd51c7b54305fd1ba87359",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01f9c3449a88748722dd51c7b54305fd1ba87359/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4e853aa163ddb978d25bd8b8ecfd730a1d09e051",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e853aa163ddb978d25bd8b8ecfd730a1d09e051",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4e853aa163ddb978d25bd8b8ecfd730a1d09e051"
      }
    ],
    "stats": {
      "total": 225,
      "additions": 149,
      "deletions": 76
    },
    "files": [
      {
        "sha": "741f78f8b4fa86daa5827deb2935239ed7940cb2",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 125,
        "deletions": 76,
        "changes": 201,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/01f9c3449a88748722dd51c7b54305fd1ba87359/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/01f9c3449a88748722dd51c7b54305fd1ba87359/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=01f9c3449a88748722dd51c7b54305fd1ba87359",
        "patch": "@@ -18,6 +18,8 @@\n #include <utility>\n #include <vector>\n \n+#include \"compat/endian.h\"\n+\n class CScript;\n \n static const unsigned int MAX_SIZE = 0x02000000;\n@@ -71,6 +73,79 @@ inline const T* end_ptr(const std::vector<T,TAl>& v)\n     return v.empty() ? NULL : (&v[0] + v.size());\n }\n \n+/*\n+ * Lowest-level serialization and conversion.\n+ * @note Sizes of these types are verified in the tests\n+ */\n+template<typename Stream> inline void ser_writedata8(Stream &s, uint8_t obj)\n+{\n+    s.write((char*)&obj, 1);\n+}\n+template<typename Stream> inline void ser_writedata16(Stream &s, uint16_t obj)\n+{\n+    obj = htole16(obj);\n+    s.write((char*)&obj, 2);\n+}\n+template<typename Stream> inline void ser_writedata32(Stream &s, uint32_t obj)\n+{\n+    obj = htole32(obj);\n+    s.write((char*)&obj, 4);\n+}\n+template<typename Stream> inline void ser_writedata64(Stream &s, uint64_t obj)\n+{\n+    obj = htole64(obj);\n+    s.write((char*)&obj, 8);\n+}\n+template<typename Stream> inline uint8_t ser_readdata8(Stream &s)\n+{\n+    uint8_t obj;\n+    s.read((char*)&obj, 1);\n+    return obj;\n+}\n+template<typename Stream> inline uint16_t ser_readdata16(Stream &s)\n+{\n+    uint16_t obj;\n+    s.read((char*)&obj, 2);\n+    return le16toh(obj);\n+}\n+template<typename Stream> inline uint32_t ser_readdata32(Stream &s)\n+{\n+    uint32_t obj;\n+    s.read((char*)&obj, 4);\n+    return le32toh(obj);\n+}\n+template<typename Stream> inline uint64_t ser_readdata64(Stream &s)\n+{\n+    uint64_t obj;\n+    s.read((char*)&obj, 8);\n+    return le64toh(obj);\n+}\n+inline uint64_t ser_double_to_uint64(double x)\n+{\n+    union { double x; uint64_t y; } tmp;\n+    tmp.x = x;\n+    return tmp.y;\n+}\n+inline uint32_t ser_float_to_uint32(float x)\n+{\n+    union { float x; uint32_t y; } tmp;\n+    tmp.x = x;\n+    return tmp.y;\n+}\n+inline double ser_uint64_to_double(uint64_t y)\n+{\n+    union { double x; uint64_t y; } tmp;\n+    tmp.y = y;\n+    return tmp.x;\n+}\n+inline float ser_uint32_to_float(uint32_t y)\n+{\n+    union { float x; uint32_t y; } tmp;\n+    tmp.y = y;\n+    return tmp.x;\n+}\n+\n+\n /////////////////////////////////////////////////////////////////\n //\n // Templates for serializing to anything that looks like a stream,\n@@ -108,59 +183,48 @@ enum\n         SerializationOp(s, CSerActionUnserialize(), nType, nVersion);                \\\n     }\n \n-\n-\n /*\n  * Basic Types\n  */\n-#define WRITEDATA(s, obj)   s.write((char*)&(obj), sizeof(obj))\n-#define READDATA(s, obj)    s.read((char*)&(obj), sizeof(obj))\n-\n-inline unsigned int GetSerializeSize(char a,               int, int=0) { return sizeof(a); }\n-inline unsigned int GetSerializeSize(signed char a,        int, int=0) { return sizeof(a); }\n-inline unsigned int GetSerializeSize(unsigned char a,      int, int=0) { return sizeof(a); }\n-inline unsigned int GetSerializeSize(signed short a,       int, int=0) { return sizeof(a); }\n-inline unsigned int GetSerializeSize(unsigned short a,     int, int=0) { return sizeof(a); }\n-inline unsigned int GetSerializeSize(signed int a,         int, int=0) { return sizeof(a); }\n-inline unsigned int GetSerializeSize(unsigned int a,       int, int=0) { return sizeof(a); }\n-inline unsigned int GetSerializeSize(signed long a,        int, int=0) { return sizeof(a); }\n-inline unsigned int GetSerializeSize(unsigned long a,      int, int=0) { return sizeof(a); }\n-inline unsigned int GetSerializeSize(signed long long a,   int, int=0) { return sizeof(a); }\n-inline unsigned int GetSerializeSize(unsigned long long a, int, int=0) { return sizeof(a); }\n-inline unsigned int GetSerializeSize(float a,              int, int=0) { return sizeof(a); }\n-inline unsigned int GetSerializeSize(double a,             int, int=0) { return sizeof(a); }\n-\n-template<typename Stream> inline void Serialize(Stream& s, char a,               int, int=0) { WRITEDATA(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, signed char a,        int, int=0) { WRITEDATA(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, unsigned char a,      int, int=0) { WRITEDATA(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, signed short a,       int, int=0) { WRITEDATA(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, unsigned short a,     int, int=0) { WRITEDATA(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, signed int a,         int, int=0) { WRITEDATA(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, unsigned int a,       int, int=0) { WRITEDATA(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, signed long a,        int, int=0) { WRITEDATA(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, unsigned long a,      int, int=0) { WRITEDATA(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, signed long long a,   int, int=0) { WRITEDATA(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, unsigned long long a, int, int=0) { WRITEDATA(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, float a,              int, int=0) { WRITEDATA(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, double a,             int, int=0) { WRITEDATA(s, a); }\n-\n-template<typename Stream> inline void Unserialize(Stream& s, char& a,               int, int=0) { READDATA(s, a); }\n-template<typename Stream> inline void Unserialize(Stream& s, signed char& a,        int, int=0) { READDATA(s, a); }\n-template<typename Stream> inline void Unserialize(Stream& s, unsigned char& a,      int, int=0) { READDATA(s, a); }\n-template<typename Stream> inline void Unserialize(Stream& s, signed short& a,       int, int=0) { READDATA(s, a); }\n-template<typename Stream> inline void Unserialize(Stream& s, unsigned short& a,     int, int=0) { READDATA(s, a); }\n-template<typename Stream> inline void Unserialize(Stream& s, signed int& a,         int, int=0) { READDATA(s, a); }\n-template<typename Stream> inline void Unserialize(Stream& s, unsigned int& a,       int, int=0) { READDATA(s, a); }\n-template<typename Stream> inline void Unserialize(Stream& s, signed long& a,        int, int=0) { READDATA(s, a); }\n-template<typename Stream> inline void Unserialize(Stream& s, unsigned long& a,      int, int=0) { READDATA(s, a); }\n-template<typename Stream> inline void Unserialize(Stream& s, signed long long& a,   int, int=0) { READDATA(s, a); }\n-template<typename Stream> inline void Unserialize(Stream& s, unsigned long long& a, int, int=0) { READDATA(s, a); }\n-template<typename Stream> inline void Unserialize(Stream& s, float& a,              int, int=0) { READDATA(s, a); }\n-template<typename Stream> inline void Unserialize(Stream& s, double& a,             int, int=0) { READDATA(s, a); }\n+inline unsigned int GetSerializeSize(char a,      int, int=0) { return 1; }\n+inline unsigned int GetSerializeSize(int8_t a,    int, int=0) { return 1; }\n+inline unsigned int GetSerializeSize(uint8_t a,   int, int=0) { return 1; }\n+inline unsigned int GetSerializeSize(int16_t a,   int, int=0) { return 2; }\n+inline unsigned int GetSerializeSize(uint16_t a,  int, int=0) { return 2; }\n+inline unsigned int GetSerializeSize(int32_t a,   int, int=0) { return 4; }\n+inline unsigned int GetSerializeSize(uint32_t a,  int, int=0) { return 4; }\n+inline unsigned int GetSerializeSize(int64_t a,   int, int=0) { return 8; }\n+inline unsigned int GetSerializeSize(uint64_t a,  int, int=0) { return 8; }\n+inline unsigned int GetSerializeSize(float a,     int, int=0) { return 4; }\n+inline unsigned int GetSerializeSize(double a,    int, int=0) { return 8; }\n+\n+template<typename Stream> inline void Serialize(Stream& s, char a,         int, int=0) { ser_writedata8(s, a); } // TODO Get rid of bare char\n+template<typename Stream> inline void Serialize(Stream& s, int8_t a,       int, int=0) { ser_writedata8(s, a); }\n+template<typename Stream> inline void Serialize(Stream& s, uint8_t a,      int, int=0) { ser_writedata8(s, a); }\n+template<typename Stream> inline void Serialize(Stream& s, int16_t a,      int, int=0) { ser_writedata16(s, a); }\n+template<typename Stream> inline void Serialize(Stream& s, uint16_t a,     int, int=0) { ser_writedata16(s, a); }\n+template<typename Stream> inline void Serialize(Stream& s, int32_t a,      int, int=0) { ser_writedata32(s, a); }\n+template<typename Stream> inline void Serialize(Stream& s, uint32_t a,     int, int=0) { ser_writedata32(s, a); }\n+template<typename Stream> inline void Serialize(Stream& s, int64_t a,      int, int=0) { ser_writedata64(s, a); }\n+template<typename Stream> inline void Serialize(Stream& s, uint64_t a,     int, int=0) { ser_writedata64(s, a); }\n+template<typename Stream> inline void Serialize(Stream& s, float a,        int, int=0) { ser_writedata32(s, ser_float_to_uint32(a)); }\n+template<typename Stream> inline void Serialize(Stream& s, double a,       int, int=0) { ser_writedata64(s, ser_double_to_uint64(a)); }\n+\n+template<typename Stream> inline void Unserialize(Stream& s, char& a,      int, int=0) { a = ser_readdata8(s); } // TODO Get rid of bare char\n+template<typename Stream> inline void Unserialize(Stream& s, int8_t& a,    int, int=0) { a = ser_readdata8(s); }\n+template<typename Stream> inline void Unserialize(Stream& s, uint8_t& a,   int, int=0) { a = ser_readdata8(s); }\n+template<typename Stream> inline void Unserialize(Stream& s, int16_t& a,   int, int=0) { a = ser_readdata16(s); }\n+template<typename Stream> inline void Unserialize(Stream& s, uint16_t& a,  int, int=0) { a = ser_readdata16(s); }\n+template<typename Stream> inline void Unserialize(Stream& s, int32_t& a,   int, int=0) { a = ser_readdata32(s); }\n+template<typename Stream> inline void Unserialize(Stream& s, uint32_t& a,  int, int=0) { a = ser_readdata32(s); }\n+template<typename Stream> inline void Unserialize(Stream& s, int64_t& a,   int, int=0) { a = ser_readdata64(s); }\n+template<typename Stream> inline void Unserialize(Stream& s, uint64_t& a,  int, int=0) { a = ser_readdata64(s); }\n+template<typename Stream> inline void Unserialize(Stream& s, float& a,     int, int=0) { a = ser_uint32_to_float(ser_readdata32(s)); }\n+template<typename Stream> inline void Unserialize(Stream& s, double& a,    int, int=0) { a = ser_uint64_to_double(ser_readdata64(s)); }\n \n inline unsigned int GetSerializeSize(bool a, int, int=0)                          { return sizeof(char); }\n-template<typename Stream> inline void Serialize(Stream& s, bool a, int, int=0)    { char f=a; WRITEDATA(s, f); }\n-template<typename Stream> inline void Unserialize(Stream& s, bool& a, int, int=0) { char f; READDATA(s, f); a=f; }\n+template<typename Stream> inline void Serialize(Stream& s, bool a, int, int=0)    { char f=a; ser_writedata8(s, f); }\n+template<typename Stream> inline void Unserialize(Stream& s, bool& a, int, int=0) { char f=ser_readdata8(s); a=f; }\n \n \n \n@@ -187,64 +251,50 @@ void WriteCompactSize(Stream& os, uint64_t nSize)\n {\n     if (nSize < 253)\n     {\n-        unsigned char chSize = nSize;\n-        WRITEDATA(os, chSize);\n+        ser_writedata8(os, nSize);\n     }\n     else if (nSize <= std::numeric_limits<unsigned short>::max())\n     {\n-        unsigned char chSize = 253;\n-        unsigned short xSize = nSize;\n-        WRITEDATA(os, chSize);\n-        WRITEDATA(os, xSize);\n+        ser_writedata8(os, 253);\n+        ser_writedata16(os, nSize);\n     }\n     else if (nSize <= std::numeric_limits<unsigned int>::max())\n     {\n-        unsigned char chSize = 254;\n-        unsigned int xSize = nSize;\n-        WRITEDATA(os, chSize);\n-        WRITEDATA(os, xSize);\n+        ser_writedata8(os, 254);\n+        ser_writedata32(os, nSize);\n     }\n     else\n     {\n-        unsigned char chSize = 255;\n-        uint64_t xSize = nSize;\n-        WRITEDATA(os, chSize);\n-        WRITEDATA(os, xSize);\n+        ser_writedata8(os, 255);\n+        ser_writedata64(os, nSize);\n     }\n     return;\n }\n \n template<typename Stream>\n uint64_t ReadCompactSize(Stream& is)\n {\n-    unsigned char chSize;\n-    READDATA(is, chSize);\n+    uint8_t chSize = ser_readdata8(is);\n     uint64_t nSizeRet = 0;\n     if (chSize < 253)\n     {\n         nSizeRet = chSize;\n     }\n     else if (chSize == 253)\n     {\n-        unsigned short xSize;\n-        READDATA(is, xSize);\n-        nSizeRet = xSize;\n+        nSizeRet = ser_readdata16(is);\n         if (nSizeRet < 253)\n             throw std::ios_base::failure(\"non-canonical ReadCompactSize()\");\n     }\n     else if (chSize == 254)\n     {\n-        unsigned int xSize;\n-        READDATA(is, xSize);\n-        nSizeRet = xSize;\n+        nSizeRet = ser_readdata32(is);\n         if (nSizeRet < 0x10000u)\n             throw std::ios_base::failure(\"non-canonical ReadCompactSize()\");\n     }\n     else\n     {\n-        uint64_t xSize;\n-        READDATA(is, xSize);\n-        nSizeRet = xSize;\n+        nSizeRet = ser_readdata64(is);\n         if (nSizeRet < 0x100000000ULL)\n             throw std::ios_base::failure(\"non-canonical ReadCompactSize()\");\n     }\n@@ -303,7 +353,7 @@ void WriteVarInt(Stream& os, I n)\n         len++;\n     }\n     do {\n-        WRITEDATA(os, tmp[len]);\n+        ser_writedata8(os, tmp[len]);\n     } while(len--);\n }\n \n@@ -312,8 +362,7 @@ I ReadVarInt(Stream& is)\n {\n     I n = 0;\n     while(true) {\n-        unsigned char chData;\n-        READDATA(is, chData);\n+        unsigned char chData = ser_readdata8(is);\n         n = (n << 7) | (chData & 0x7F);\n         if (chData & 0x80)\n             n++;"
      },
      {
        "sha": "e2d19ce5ccbfb8b2468625eef85ed35916994893",
        "filename": "src/test/serialize_tests.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/01f9c3449a88748722dd51c7b54305fd1ba87359/src/test/serialize_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/01f9c3449a88748722dd51c7b54305fd1ba87359/src/test/serialize_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/serialize_tests.cpp?ref=01f9c3449a88748722dd51c7b54305fd1ba87359",
        "patch": "@@ -13,6 +13,30 @@ using namespace std;\n \n BOOST_AUTO_TEST_SUITE(serialize_tests)\n \n+BOOST_AUTO_TEST_CASE(sizes)\n+{\n+    BOOST_CHECK_EQUAL(sizeof(char), GetSerializeSize(char(0), 0));\n+    BOOST_CHECK_EQUAL(sizeof(int8_t), GetSerializeSize(int8_t(0), 0));\n+    BOOST_CHECK_EQUAL(sizeof(uint8_t), GetSerializeSize(uint8_t(0), 0));\n+    BOOST_CHECK_EQUAL(sizeof(int16_t), GetSerializeSize(int16_t(0), 0));\n+    BOOST_CHECK_EQUAL(sizeof(uint16_t), GetSerializeSize(uint16_t(0), 0));\n+    BOOST_CHECK_EQUAL(sizeof(int32_t), GetSerializeSize(int32_t(0), 0));\n+    BOOST_CHECK_EQUAL(sizeof(uint32_t), GetSerializeSize(uint32_t(0), 0));\n+    BOOST_CHECK_EQUAL(sizeof(int64_t), GetSerializeSize(int64_t(0), 0));\n+    BOOST_CHECK_EQUAL(sizeof(uint64_t), GetSerializeSize(uint64_t(0), 0));\n+    BOOST_CHECK_EQUAL(sizeof(float), GetSerializeSize(float(0), 0));\n+    BOOST_CHECK_EQUAL(sizeof(double), GetSerializeSize(double(0), 0));\n+\n+    // Bool is serialized as char\n+    BOOST_CHECK_EQUAL(sizeof(char), GetSerializeSize(bool(0), 0));\n+}\n+\n+BOOST_AUTO_TEST_CASE(floats)\n+{\n+    // TODO ser_uint32_to_float, ser_uint64_to_double\n+    // TODO ser_float_to_uint32, ser_double_to_uint64\n+}\n+\n BOOST_AUTO_TEST_CASE(varints)\n {\n     // encode"
      }
    ]
  },
  {
    "sha": "aac320537523f1df1523adeba22a8498884715c9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYWMzMjA1Mzc1MjNmMWRmMTUyM2FkZWJhMjJhODQ5ODg4NDcxNWM5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-12-18T21:07:31Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-06T16:21:58Z"
      },
      "message": "src/netbase.h: Fix endian in CNetAddr serialization\n\nWe've chosen to htons/ntohs explicitly on reading and writing\n(I do not know why). But as READWRITE already does an endian swap\non big endian, this means the port number gets switched around,\nwhich was what we were trying to avoid in the first place. So\nto make this compatible, serialize it as FLATDATA.",
      "tree": {
        "sha": "8fff77336fa1a0b79090de8d9da288e7743303d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8fff77336fa1a0b79090de8d9da288e7743303d1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aac320537523f1df1523adeba22a8498884715c9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aac320537523f1df1523adeba22a8498884715c9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/aac320537523f1df1523adeba22a8498884715c9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aac320537523f1df1523adeba22a8498884715c9/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "01f9c3449a88748722dd51c7b54305fd1ba87359",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01f9c3449a88748722dd51c7b54305fd1ba87359",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/01f9c3449a88748722dd51c7b54305fd1ba87359"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "b42c2dffa4d69da971cc2d4c6c75593ceadf6fb7",
        "filename": "src/netbase.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aac320537523f1df1523adeba22a8498884715c9/src/netbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aac320537523f1df1523adeba22a8498884715c9/src/netbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.h?ref=aac320537523f1df1523adeba22a8498884715c9",
        "patch": "@@ -162,7 +162,7 @@ class CService : public CNetAddr\n         inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n             READWRITE(FLATDATA(ip));\n             unsigned short portN = htons(port);\n-            READWRITE(portN);\n+            READWRITE(FLATDATA(portN));\n             if (ser_action.ForRead())\n                  port = ntohs(portN);\n         }"
      }
    ]
  },
  {
    "sha": "f4e6487219d4b861df71e80d89d864ff6f312d17",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNGU2NDg3MjE5ZDRiODYxZGY3MWU4MGQ4OWQ4NjRmZjZmMzEyZDE3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-12-19T12:08:06Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-06T16:21:59Z"
      },
      "message": "src/arith_256.cpp: bigendian compatibility",
      "tree": {
        "sha": "c8b9005d0d53616c66e6ef12cbc5b6091295a793",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c8b9005d0d53616c66e6ef12cbc5b6091295a793"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f4e6487219d4b861df71e80d89d864ff6f312d17",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f4e6487219d4b861df71e80d89d864ff6f312d17",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f4e6487219d4b861df71e80d89d864ff6f312d17",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f4e6487219d4b861df71e80d89d864ff6f312d17/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "aac320537523f1df1523adeba22a8498884715c9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aac320537523f1df1523adeba22a8498884715c9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/aac320537523f1df1523adeba22a8498884715c9"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 5,
      "deletions": 4
    },
    "files": [
      {
        "sha": "2e613635761d8622032ff85c51f506548700f70d",
        "filename": "src/arith_uint256.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f4e6487219d4b861df71e80d89d864ff6f312d17/src/arith_uint256.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f4e6487219d4b861df71e80d89d864ff6f312d17/src/arith_uint256.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/arith_uint256.cpp?ref=f4e6487219d4b861df71e80d89d864ff6f312d17",
        "patch": "@@ -7,6 +7,7 @@\n \n #include \"uint256.h\"\n #include \"utilstrencodings.h\"\n+#include \"crypto/common.h\"\n \n #include <stdio.h>\n #include <string.h>\n@@ -246,14 +247,14 @@ uint32_t arith_uint256::GetCompact(bool fNegative) const\n uint256 ArithToUint256(const arith_uint256 &a)\n {\n     uint256 b;\n-    // TODO: needs bswap32 on big-endian\n-    memcpy(b.begin(), a.pn, a.size());\n+    for(int x=0; x<a.WIDTH; ++x)\n+        WriteLE32(b.begin() + x*4, a.pn[x]);\n     return b;\n }\n arith_uint256 UintToArith256(const uint256 &a)\n {\n     arith_uint256 b;\n-    // TODO: needs bswap32 on big-endian\n-    memcpy(b.pn, a.begin(), a.size());\n+    for(int x=0; x<b.WIDTH; ++x)\n+        b.pn[x] = ReadLE32(a.begin() + x*4);\n     return b;\n }"
      }
    ]
  },
  {
    "sha": "9f4fac98c429d9ee2135fab32dfae2d1fe171a45",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZjRmYWM5OGM0MjlkOWVlMjEzNWZhYjMyZGZhZTJkMWZlMTcxYTQ1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-12-19T14:21:47Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-06T16:21:59Z"
      },
      "message": "src/txmempool.cpp: make numEntries a uint32_t\n\nDon't ever serialize a size_t or long, their sizes are platform\ndependent.",
      "tree": {
        "sha": "33bdfe1a0fcd2a0c136464c8f2ba6849f8743231",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/33bdfe1a0fcd2a0c136464c8f2ba6849f8743231"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9f4fac98c429d9ee2135fab32dfae2d1fe171a45",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9f4fac98c429d9ee2135fab32dfae2d1fe171a45",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9f4fac98c429d9ee2135fab32dfae2d1fe171a45",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9f4fac98c429d9ee2135fab32dfae2d1fe171a45/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f4e6487219d4b861df71e80d89d864ff6f312d17",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f4e6487219d4b861df71e80d89d864ff6f312d17",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f4e6487219d4b861df71e80d89d864ff6f312d17"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "0d506603276f3a95b4676d2bbac0ce563e0d4eea",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f4fac98c429d9ee2135fab32dfae2d1fe171a45/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f4fac98c429d9ee2135fab32dfae2d1fe171a45/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=9f4fac98c429d9ee2135fab32dfae2d1fe171a45",
        "patch": "@@ -337,7 +337,7 @@ class CMinerPolicyEstimator\n     void Write(CAutoFile& fileout) const\n     {\n         fileout << nBestSeenHeight;\n-        fileout << history.size();\n+        fileout << (uint32_t)history.size();\n         BOOST_FOREACH(const CBlockAverage& entry, history)\n         {\n             entry.Write(fileout);\n@@ -348,7 +348,7 @@ class CMinerPolicyEstimator\n     {\n         int nFileBestSeenHeight;\n         filein >> nFileBestSeenHeight;\n-        size_t numEntries;\n+        uint32_t numEntries;\n         filein >> numEntries;\n         if (numEntries <= 0 || numEntries > 10000)\n             throw runtime_error(\"Corrupt estimates file. Must have between 1 and 10k entries.\");"
      }
    ]
  },
  {
    "sha": "62b30f09acae20f83dfb7995fa8b221c35e2fbff",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MmIzMGYwOWFjYWUyMGY4M2RmYjc5OTVmYThiMjIxYzM1ZTJmYmZm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-14T10:07:13Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-06T16:21:59Z"
      },
      "message": "Add serialize float/double tests",
      "tree": {
        "sha": "1d89b17b869ace8756b6fc5f8260be01680952b2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1d89b17b869ace8756b6fc5f8260be01680952b2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/62b30f09acae20f83dfb7995fa8b221c35e2fbff",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/62b30f09acae20f83dfb7995fa8b221c35e2fbff",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/62b30f09acae20f83dfb7995fa8b221c35e2fbff",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/62b30f09acae20f83dfb7995fa8b221c35e2fbff/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9f4fac98c429d9ee2135fab32dfae2d1fe171a45",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9f4fac98c429d9ee2135fab32dfae2d1fe171a45",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9f4fac98c429d9ee2135fab32dfae2d1fe171a45"
      }
    ],
    "stats": {
      "total": 96,
      "additions": 93,
      "deletions": 3
    },
    "files": [
      {
        "sha": "de9510d54a451f81a1f9d347d96ffe5264b0ec33",
        "filename": "src/test/serialize_tests.cpp",
        "status": "modified",
        "additions": 93,
        "deletions": 3,
        "changes": 96,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/62b30f09acae20f83dfb7995fa8b221c35e2fbff/src/test/serialize_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/62b30f09acae20f83dfb7995fa8b221c35e2fbff/src/test/serialize_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/serialize_tests.cpp?ref=62b30f09acae20f83dfb7995fa8b221c35e2fbff",
        "patch": "@@ -4,6 +4,7 @@\n \n #include \"serialize.h\"\n #include \"streams.h\"\n+#include \"hash.h\"\n \n #include <stdint.h>\n \n@@ -26,15 +27,104 @@ BOOST_AUTO_TEST_CASE(sizes)\n     BOOST_CHECK_EQUAL(sizeof(uint64_t), GetSerializeSize(uint64_t(0), 0));\n     BOOST_CHECK_EQUAL(sizeof(float), GetSerializeSize(float(0), 0));\n     BOOST_CHECK_EQUAL(sizeof(double), GetSerializeSize(double(0), 0));\n-\n     // Bool is serialized as char\n     BOOST_CHECK_EQUAL(sizeof(char), GetSerializeSize(bool(0), 0));\n+\n+    // Sanity-check GetSerializeSize and c++ type matching\n+    BOOST_CHECK_EQUAL(GetSerializeSize(char(0), 0), 1);\n+    BOOST_CHECK_EQUAL(GetSerializeSize(int8_t(0), 0), 1);\n+    BOOST_CHECK_EQUAL(GetSerializeSize(uint8_t(0), 0), 1);\n+    BOOST_CHECK_EQUAL(GetSerializeSize(int16_t(0), 0), 2);\n+    BOOST_CHECK_EQUAL(GetSerializeSize(uint16_t(0), 0), 2);\n+    BOOST_CHECK_EQUAL(GetSerializeSize(int32_t(0), 0), 4);\n+    BOOST_CHECK_EQUAL(GetSerializeSize(uint32_t(0), 0), 4);\n+    BOOST_CHECK_EQUAL(GetSerializeSize(int64_t(0), 0), 8);\n+    BOOST_CHECK_EQUAL(GetSerializeSize(uint64_t(0), 0), 8);\n+    BOOST_CHECK_EQUAL(GetSerializeSize(float(0), 0), 4);\n+    BOOST_CHECK_EQUAL(GetSerializeSize(double(0), 0), 8);\n+    BOOST_CHECK_EQUAL(GetSerializeSize(bool(0), 0), 1);\n }\n \n+BOOST_AUTO_TEST_CASE(floats_conversion)\n+{\n+    // Choose values that map unambigiously to binary floating point to avoid\n+    // rounding issues at the compiler side.\n+    BOOST_CHECK_EQUAL(ser_uint32_to_float(0x00000000), 0.0F);\n+    BOOST_CHECK_EQUAL(ser_uint32_to_float(0x3f000000), 0.5F);\n+    BOOST_CHECK_EQUAL(ser_uint32_to_float(0x3f800000), 1.0F);\n+    BOOST_CHECK_EQUAL(ser_uint32_to_float(0x40000000), 2.0F);\n+    BOOST_CHECK_EQUAL(ser_uint32_to_float(0x40800000), 4.0F);\n+    BOOST_CHECK_EQUAL(ser_uint32_to_float(0x44444444), 785.066650390625F);\n+\n+    BOOST_CHECK_EQUAL(ser_float_to_uint32(0.0F), 0x00000000);\n+    BOOST_CHECK_EQUAL(ser_float_to_uint32(0.5F), 0x3f000000);\n+    BOOST_CHECK_EQUAL(ser_float_to_uint32(1.0F), 0x3f800000);\n+    BOOST_CHECK_EQUAL(ser_float_to_uint32(2.0F), 0x40000000);\n+    BOOST_CHECK_EQUAL(ser_float_to_uint32(4.0F), 0x40800000);\n+    BOOST_CHECK_EQUAL(ser_float_to_uint32(785.066650390625F), 0x44444444);\n+}\n+\n+BOOST_AUTO_TEST_CASE(doubles_conversion)\n+{\n+    // Choose values that map unambigiously to binary floating point to avoid\n+    // rounding issues at the compiler side.\n+    BOOST_CHECK_EQUAL(ser_uint64_to_double(0x0000000000000000ULL), 0.0);\n+    BOOST_CHECK_EQUAL(ser_uint64_to_double(0x3fe0000000000000ULL), 0.5);\n+    BOOST_CHECK_EQUAL(ser_uint64_to_double(0x3ff0000000000000ULL), 1.0);\n+    BOOST_CHECK_EQUAL(ser_uint64_to_double(0x4000000000000000ULL), 2.0);\n+    BOOST_CHECK_EQUAL(ser_uint64_to_double(0x4010000000000000ULL), 4.0);\n+    BOOST_CHECK_EQUAL(ser_uint64_to_double(0x4088888880000000ULL), 785.066650390625);\n+\n+    BOOST_CHECK_EQUAL(ser_double_to_uint64(0.0), 0x0000000000000000ULL);\n+    BOOST_CHECK_EQUAL(ser_double_to_uint64(0.5), 0x3fe0000000000000ULL);\n+    BOOST_CHECK_EQUAL(ser_double_to_uint64(1.0), 0x3ff0000000000000ULL);\n+    BOOST_CHECK_EQUAL(ser_double_to_uint64(2.0), 0x4000000000000000ULL);\n+    BOOST_CHECK_EQUAL(ser_double_to_uint64(4.0), 0x4010000000000000ULL);\n+    BOOST_CHECK_EQUAL(ser_double_to_uint64(785.066650390625), 0x4088888880000000ULL);\n+}\n+/*\n+Python code to generate the below hashes:\n+\n+    def reversed_hex(x):\n+        return binascii.hexlify(''.join(reversed(x)))\n+    def dsha256(x):\n+        return hashlib.sha256(hashlib.sha256(x).digest()).digest()\n+\n+    reversed_hex(dsha256(''.join(struct.pack('<f', x) for x in range(0,1000)))) == '8e8b4cf3e4df8b332057e3e23af42ebc663b61e0495d5e7e32d85099d7f3fe0c'\n+    reversed_hex(dsha256(''.join(struct.pack('<d', x) for x in range(0,1000)))) == '43d0c82591953c4eafe114590d392676a01585d25b25d433557f0d7878b23f96'\n+*/\n BOOST_AUTO_TEST_CASE(floats)\n {\n-    // TODO ser_uint32_to_float, ser_uint64_to_double\n-    // TODO ser_float_to_uint32, ser_double_to_uint64\n+    CDataStream ss(SER_DISK, 0);\n+    // encode\n+    for (int i = 0; i < 1000; i++) {\n+        ss << float(i);\n+    }\n+    BOOST_CHECK(Hash(ss.begin(), ss.end()) == uint256S(\"8e8b4cf3e4df8b332057e3e23af42ebc663b61e0495d5e7e32d85099d7f3fe0c\"));\n+\n+    // decode\n+    for (int i = 0; i < 1000; i++) {\n+        float j;\n+        ss >> j;\n+        BOOST_CHECK_MESSAGE(i == j, \"decoded:\" << j << \" expected:\" << i);\n+    }\n+}\n+\n+BOOST_AUTO_TEST_CASE(doubles)\n+{\n+    CDataStream ss(SER_DISK, 0);\n+    // encode\n+    for (int i = 0; i < 1000; i++) {\n+        ss << double(i);\n+    }\n+    BOOST_CHECK(Hash(ss.begin(), ss.end()) == uint256S(\"43d0c82591953c4eafe114590d392676a01585d25b25d433557f0d7878b23f96\"));\n+\n+    // decode\n+    for (int i = 0; i < 1000; i++) {\n+        double j;\n+        ss >> j;\n+        BOOST_CHECK_MESSAGE(i == j, \"decoded:\" << j << \" expected:\" << i);\n+    }\n }\n \n BOOST_AUTO_TEST_CASE(varints)"
      }
    ]
  },
  {
    "sha": "a0ae79d77552d9ee67469c934458a3f3bd170858",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMGFlNzlkNzc1NTJkOWVlNjc0NjljOTM0NDU4YTNmM2JkMTcwODU4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-18T18:23:05Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-06T16:21:59Z"
      },
      "message": "Replace CBlockHeader::GetHash with call to SerializeHash\n\nRemoves variability between LE and BE.\nAs suggested by @sipa.",
      "tree": {
        "sha": "e52428f7cb819fddbdc8b801ea3894306e266d85",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e52428f7cb819fddbdc8b801ea3894306e266d85"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a0ae79d77552d9ee67469c934458a3f3bd170858",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a0ae79d77552d9ee67469c934458a3f3bd170858",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a0ae79d77552d9ee67469c934458a3f3bd170858",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a0ae79d77552d9ee67469c934458a3f3bd170858/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "62b30f09acae20f83dfb7995fa8b221c35e2fbff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/62b30f09acae20f83dfb7995fa8b221c35e2fbff",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/62b30f09acae20f83dfb7995fa8b221c35e2fbff"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 1,
      "deletions": 12
    },
    "files": [
      {
        "sha": "5b9c13d87011bf192b70bb7fc2902801e1e16e2e",
        "filename": "src/primitives/block.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 12,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0ae79d77552d9ee67469c934458a3f3bd170858/src/primitives/block.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0ae79d77552d9ee67469c934458a3f3bd170858/src/primitives/block.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.cpp?ref=a0ae79d77552d9ee67469c934458a3f3bd170858",
        "patch": "@@ -12,18 +12,7 @@\n \n uint256 CBlockHeader::GetHash() const\n {\n-#if defined(WORDS_BIGENDIAN)\n-    uint8_t data[80];\n-    WriteLE32(&data[0], nVersion);\n-    memcpy(&data[4], hashPrevBlock.begin(), hashPrevBlock.size());\n-    memcpy(&data[36], hashMerkleRoot.begin(), hashMerkleRoot.size());\n-    WriteLE32(&data[68], nTime);\n-    WriteLE32(&data[72], nBits);\n-    WriteLE32(&data[76], nNonce);\n-    return Hash(data, data + 80);\n-#else // Can take shortcut for little endian\n-    return Hash(BEGIN(nVersion), END(nNonce));\n-#endif\n+    return SerializeHash(*this);\n }\n \n uint256 CBlock::BuildMerkleTree(bool* fMutated) const"
      }
    ]
  }
]