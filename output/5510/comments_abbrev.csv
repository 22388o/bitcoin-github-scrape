gmaxwell,2014-12-21T04:25:54Z,"I am pleased to report that using this patch I was able to sync from scratch over the network a PPC (debian) host.  The old 2.3GHz cpu was pretty slow at verifying eventually taking several seconds per block.\n\n""""""\n{\n   ""chain"": ""main"",  \n    ""blocks"" : 335186,  \n    ""headers"" : 335186,  \n    ""bestblockhash"" : ""000000000000000012ae1802369ba841a728ad8979376254bd9b5fb195d227d8"",               ",https://github.com/bitcoin/bitcoin/pull/5510#issuecomment-67759736,67759736,
paveljanik,2015-01-06T13:24:10Z,Mac Mini PPC with 512MB RAM just finished testnet sync. Debian GNU/Linux 7.7. No issues so far. Even with few manual stops during the IBD. Generating new wallet was extremely slow... Few compile warnings for signed/unsigned and always true (I will investigate them later).\n,https://github.com/bitcoin/bitcoin/pull/5510#issuecomment-68864278,68864278,
theuni,2015-01-07T23:45:05Z,"utACK, nothing to complain about.\n\nDo you have an idea where the DNS issue lies?\n",https://github.com/bitcoin/bitcoin/pull/5510#issuecomment-69113363,69113363,
theuni,2015-01-08T00:05:52Z,"Mmm.. on second thought, I suppose I'd first like to know the result of moving a fully-sync'd .bitcoin dir from a BE machine to a LE one, or the other way around.\n",https://github.com/bitcoin/bitcoin/pull/5510#issuecomment-69115511,69115511,
laanwj,2015-01-08T07:30:08Z,"@theuni As I mention in the OP, I've tested that, and it worked. UTXO databases and block databases are compatible between BE and LE.\n\nI haven't had time to look into the DNS seeding issue.\n",https://github.com/bitcoin/bitcoin/pull/5510#issuecomment-69145170,69145170,
paveljanik,2015-01-08T07:45:13Z,DNS seeding works OK here on PPC Mac Mini:\n\n```\n2015-01-08 07:42:38 init message: Loading addresses...\n2015-01-08 07:42:38 ERROR: Read : Failed to open file /home/bitcoin/.bitcoin/testnet3/peers.dat\n2015-01-08 07:42:38 Invalid or missing peers.dat; recreating\n2015-01-08 07:42:38 Loaded 0 addresses from peers.dat  43ms\n...\n2015-01-08 07:42:38 Loading addresses from DNS seeds (could take a w,https://github.com/bitcoin/bitcoin/pull/5510#issuecomment-69146253,69146253,
paveljanik,2015-01-08T07:46:17Z,I'm moving the bitcoin directory there and back between LE and BE host without issues so far.\n,https://github.com/bitcoin/bitcoin/pull/5510#issuecomment-69146322,69146322,
theuni,2015-01-08T21:13:03Z,"@laanwj Ah, I missed that part in the description. Thanks for verifying.\n\n@paveljanik Thanks to you as well.\n",https://github.com/bitcoin/bitcoin/pull/5510#issuecomment-69250122,69250122,
laanwj,2015-01-14T09:13:00Z,Had to rebase over the openssl fix (no code changes or conflicts) to make tests work again.\n,https://github.com/bitcoin/bitcoin/pull/5510#issuecomment-69888254,69888254,
laanwj,2015-01-14T10:08:26Z,Added the missing float/double serialization tests and removed the WIP tag.\n,https://github.com/bitcoin/bitcoin/pull/5510#issuecomment-69894490,69894490,
ry60003333,2015-02-22T08:24:40Z,"Everything seems to be working here as well! I am using a PowerMac G5 with Debian 7; I've been waiting for big endian support for a long time, and can't wait until this is merged into the main release!\n",https://github.com/bitcoin/bitcoin/pull/5510#issuecomment-75425400,75425400,
sipa,2015-02-22T08:40:04Z,"Untested ACK.\n\nWe do have a few special-cased pieces of code for little-endian vs generic. Do we need all of them? I would suggest to either:\n- get rid of all WORDS_BIGENDIAN ifdefs (except in compat), and use the generic code everywhere\n- have a mechanism to disable optimized little-endian code at compile-time, and do at least one automated test with generic code.\n",https://github.com/bitcoin/bitcoin/pull/5510#issuecomment-75425835,75425835,
ry60003333,2015-02-24T15:20:47Z,"If any core developers would like, I can provide full SSH access to a Debian 7 PowerPC system for testing purposes to make sure future builds work on big endian systems. I would love for this to be integrated in a 0.10 release.\n",https://github.com/bitcoin/bitcoin/pull/5510#issuecomment-75775765,75775765,
sipa,2015-03-01T11:18:54Z,"@laanwj I would be fine with just getting rid of all LE optimized code versions here, and later benchmark whether any are worth it to add back.\n",https://github.com/bitcoin/bitcoin/pull/5510#issuecomment-76592597,76592597,
laanwj,2015-03-06T15:02:43Z,"@ry60003333 This is too late for the 0.10 release, but can make it to 0.11 in july\n\n@sipa OK, fine with me, there are two cases of WORDS_BIGENDIAN left and neither of them seems to be in a performance critical place.\n",https://github.com/bitcoin/bitcoin/pull/5510#issuecomment-77572414,77572414,
sipa,2015-03-06T15:59:19Z,Untested ACK.\n,https://github.com/bitcoin/bitcoin/pull/5510#issuecomment-77582569,77582569,
ry60003333,2015-03-06T21:38:32Z,@laanwj 0.11 would work for me! I've been looking forward to being able to run full nodes on IBM POWER servers for a long time now!\n,https://github.com/bitcoin/bitcoin/pull/5510#issuecomment-77640783,77640783,
Diapolo,2015-01-07T14:24:55Z,I just want to know if we completly stop doing any include ordering/cleanup or even stop following the style we currently have in most files? If the new philosophy is new features before everything else I'm losing the last fun for this project :-/.\n,https://github.com/bitcoin/bitcoin/pull/5510#discussion_r22587847,22587847,src/arith_uint256.cpp
sipa,2015-01-07T16:30:33Z,"I'm sorry to hear that you don't find fun in many of the much more interesting things you've been doing before, but no - we removed this from the policy because the cost is just not worth the benefits. It requires too much time from maintainers and people writing patches for a very tiny (but non-zero) benefit, so we reverted it for that reason.\n",https://github.com/bitcoin/bitcoin/pull/5510#discussion_r22596659,22596659,src/arith_uint256.cpp
jgarzik,2015-01-07T16:51:12Z,"@Diapolo Every code cleanup -- including those authored by myself -- has review costs and potentially disrupts more important functional work that actually changes behavior for the users.\n\nStyle takes a back seat to more practical changes, as it must.  It sucks when it's your changes.\n\nInclude file ordering is just not important enough to us to care about maintaining it in our own changes.  We",https://github.com/bitcoin/bitcoin/pull/5510#discussion_r22598145,22598145,src/arith_uint256.cpp
jonasschnelli,2015-01-08T12:10:22Z,"Maybe this is the wrong place for this discussion. But better here then nowhere.\nIMO clean code leads to good software quality in general.\nOnce the code gets a mess, the quality in general will follow.\n""A broken window is the start of a vagabonded house"". Thats why i honor @Diapolo work on one hand.\n\nBut:\n1.)\nNowadays, code-structure can be handled by tools like clang-format. There is no ne",https://github.com/bitcoin/bitcoin/pull/5510#discussion_r22648316,22648316,src/arith_uint256.cpp
zander,2015-01-13T06:43:57Z,"Include ordering is there for a very good purpose, which is to ensure stand-alone headers. This purpose is just not really all that relevant in a project whose headers are not installed and exported for 3rd party use.  Like a DLL based project would need it.\n\ntl;dr dropping the requirement for header-inclusion-ordering makes sense to me.\n",https://github.com/bitcoin/bitcoin/pull/5510#discussion_r22845483,22845483,src/arith_uint256.cpp
Diapolo,2015-03-08T11:26:59Z,"So we are now also don't try to differentiate the blocks by own headers, standard headers and library headers?\n",https://github.com/bitcoin/bitcoin/pull/5510#discussion_r26004299,26004299,src/script/script.h
