[
  {
    "sha": "4c6e22953ef8ae0764576993088ec83d729d18f8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YzZlMjI5NTNlZjhhZTA3NjQ1NzY5OTMwODhlYzgzZDcyOWQxOGY4",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2011-06-28T21:45:22Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "sipa@ulyssis.org",
        "date": "2011-12-17T20:49:47Z"
      },
      "message": "Make CWalletTx::pwallet private",
      "tree": {
        "sha": "5b0bb2ee0b7226e4721dc6a98ad6144f15926262",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5b0bb2ee0b7226e4721dc6a98ad6144f15926262"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4c6e22953ef8ae0764576993088ec83d729d18f8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4c6e22953ef8ae0764576993088ec83d729d18f8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4c6e22953ef8ae0764576993088ec83d729d18f8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4c6e22953ef8ae0764576993088ec83d729d18f8/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "821462017860c780badf42cb50c3796575e0e053",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/821462017860c780badf42cb50c3796575e0e053",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/821462017860c780badf42cb50c3796575e0e053"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 12,
      "deletions": 5
    },
    "files": [
      {
        "sha": "9b29e799e0a23138d243494b0e1a16c914fec33d",
        "filename": "src/db.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c6e22953ef8ae0764576993088ec83d729d18f8/src/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c6e22953ef8ae0764576993088ec83d729d18f8/src/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.cpp?ref=4c6e22953ef8ae0764576993088ec83d729d18f8",
        "patch": "@@ -810,7 +810,7 @@ int CWalletDB::LoadWallet(CWallet* pwallet)\n                 ssKey >> hash;\n                 CWalletTx& wtx = pwallet->mapWallet[hash];\n                 ssValue >> wtx;\n-                wtx.pwallet = pwallet;\n+                wtx.BindWallet(pwallet);\n \n                 if (wtx.GetHash() != hash)\n                     printf(\"Error in wallet.dat, hash mismatch\\n\");"
      },
      {
        "sha": "c451186d96b00e643dcdf8063d4967f4556ef72c",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c6e22953ef8ae0764576993088ec83d729d18f8/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c6e22953ef8ae0764576993088ec83d729d18f8/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=4c6e22953ef8ae0764576993088ec83d729d18f8",
        "patch": "@@ -232,7 +232,7 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn)\n         // Inserts only if not already there, returns tx inserted or tx found\n         pair<map<uint256, CWalletTx>::iterator, bool> ret = mapWallet.insert(make_pair(hash, wtxIn));\n         CWalletTx& wtx = (*ret.first).second;\n-        wtx.pwallet = this;\n+        wtx.BindWallet(this);\n         bool fInsertedNew = ret.second;\n         if (fInsertedNew)\n             wtx.nTimeReceived = GetAdjustedTime();\n@@ -924,7 +924,7 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, int64> >& vecSend, CW\n     if (vecSend.empty() || nValue < 0)\n         return false;\n \n-    wtxNew.pwallet = this;\n+    wtxNew.BindWallet(this);\n \n     CRITICAL_BLOCK(cs_main)\n     CRITICAL_BLOCK(cs_wallet)\n@@ -1062,7 +1062,7 @@ bool CWallet::CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey)\n             BOOST_FOREACH(const CTxIn& txin, wtxNew.vin)\n             {\n                 CWalletTx &coin = mapWallet[txin.prevout.hash];\n-                coin.pwallet = this;\n+                coin.BindWallet(this);\n                 coin.MarkSpent(txin.prevout.n);\n                 coin.WriteToDisk();\n                 vWalletUpdated.push_back(coin.GetHash());"
      },
      {
        "sha": "e1c39a6f3988f87eaa27e4a694a5faae56a43845",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 8,
        "deletions": 1,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c6e22953ef8ae0764576993088ec83d729d18f8/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c6e22953ef8ae0764576993088ec83d729d18f8/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=4c6e22953ef8ae0764576993088ec83d729d18f8",
        "patch": "@@ -243,9 +243,10 @@ class CReserveKey\n //\n class CWalletTx : public CMerkleTx\n {\n-public:\n+private:\n     const CWallet* pwallet;\n \n+public:\n     std::vector<CMerkleTx> vtxPrev;\n     std::map<std::string, std::string> mapValue;\n     std::vector<std::pair<std::string, std::string> > vOrderForm;\n@@ -389,6 +390,12 @@ class CWalletTx : public CMerkleTx\n         fChangeCached = false;\n     }\n \n+    void BindWallet(CWallet *pwalletIn)\n+    {\n+        pwallet = pwalletIn;\n+        MarkDirty();\n+    }\n+\n     void MarkSpent(unsigned int nOut)\n     {\n         if (nOut >= vout.size())"
      }
    ]
  },
  {
    "sha": "93db3fceac1bfe274bc0fd906428a20e709e2da5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5M2RiM2ZjZWFjMWJmZTI3NGJjMGZkOTA2NDI4YTIwZTcwOWUyZGE1",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2011-07-11T19:30:40Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "sipa@ulyssis.org",
        "date": "2011-12-17T20:49:47Z"
      },
      "message": "Add GetSecret() and GetKeys() to CKeyStore",
      "tree": {
        "sha": "bcf91d8c05f2b5044de557c1ef8f832528bb0de0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bcf91d8c05f2b5044de557c1ef8f832528bb0de0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/93db3fceac1bfe274bc0fd906428a20e709e2da5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93db3fceac1bfe274bc0fd906428a20e709e2da5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/93db3fceac1bfe274bc0fd906428a20e709e2da5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93db3fceac1bfe274bc0fd906428a20e709e2da5/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4c6e22953ef8ae0764576993088ec83d729d18f8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4c6e22953ef8ae0764576993088ec83d729d18f8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4c6e22953ef8ae0764576993088ec83d729d18f8"
      }
    ],
    "stats": {
      "total": 313,
      "additions": 177,
      "deletions": 136
    },
    "files": [
      {
        "sha": "0989fe8b046a2b34b57877f60a674b586a714ecc",
        "filename": "bitcoin-qt.pro",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93db3fceac1bfe274bc0fd906428a20e709e2da5/bitcoin-qt.pro",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93db3fceac1bfe274bc0fd906428a20e709e2da5/bitcoin-qt.pro",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/bitcoin-qt.pro?ref=93db3fceac1bfe274bc0fd906428a20e709e2da5",
        "patch": "@@ -148,6 +148,7 @@ SOURCES += src/qt/bitcoin.cpp src/qt/bitcoingui.cpp \\\n     src/qt/editaddressdialog.cpp \\\n     src/qt/bitcoinaddressvalidator.cpp \\\n     src/util.cpp \\\n+    src/key.cpp \\\n     src/script.cpp \\\n     src/main.cpp \\\n     src/init.cpp \\"
      },
      {
        "sha": "17189040b23a91ff39dfefcfe9b59115b7c3f6c2",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93db3fceac1bfe274bc0fd906428a20e709e2da5/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93db3fceac1bfe274bc0fd906428a20e709e2da5/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=93db3fceac1bfe274bc0fd906428a20e709e2da5",
        "patch": "@@ -595,7 +595,7 @@ Value verifymessage(const Array& params, bool fHelp)\n     if (!key.SetCompactSignature(Hash(ss.begin(), ss.end()), vchSig))\n         return false;\n \n-    return (key.GetAddress() == addr);\n+    return (CBitcoinAddress(key.GetPubKey()) == addr);\n }\n \n "
      },
      {
        "sha": "400b1887c5c17576c3c72aad1ec619a3de895b79",
        "filename": "src/key.cpp",
        "status": "added",
        "additions": 117,
        "deletions": 0,
        "changes": 117,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93db3fceac1bfe274bc0fd906428a20e709e2da5/src/key.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93db3fceac1bfe274bc0fd906428a20e709e2da5/src/key.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.cpp?ref=93db3fceac1bfe274bc0fd906428a20e709e2da5",
        "patch": "@@ -0,0 +1,117 @@\n+// Copyright (c) 2011 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file license.txt or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <openssl/ec.h>\n+#include <openssl/ecdsa.h>\n+\n+// Generate a private key from just the secret parameter\n+int EC_KEY_regenerate_key(EC_KEY *eckey, BIGNUM *priv_key)\n+{\n+    int ok = 0;\n+    BN_CTX *ctx = NULL;\n+    EC_POINT *pub_key = NULL;\n+\n+    if (!eckey) return 0;\n+\n+    const EC_GROUP *group = EC_KEY_get0_group(eckey);\n+\n+    if ((ctx = BN_CTX_new()) == NULL)\n+        goto err;\n+\n+    pub_key = EC_POINT_new(group);\n+\n+    if (pub_key == NULL)\n+        goto err;\n+\n+    if (!EC_POINT_mul(group, pub_key, priv_key, NULL, NULL, ctx))\n+        goto err;\n+\n+    EC_KEY_set_private_key(eckey,priv_key);\n+    EC_KEY_set_public_key(eckey,pub_key);\n+\n+    ok = 1;\n+\n+err:\n+\n+    if (pub_key)\n+        EC_POINT_free(pub_key);\n+    if (ctx != NULL)\n+        BN_CTX_free(ctx);\n+\n+    return(ok);\n+}\n+\n+// Perform ECDSA key recovery (see SEC1 4.1.6) for curves over (mod p)-fields\n+// recid selects which key is recovered\n+// if check is nonzero, additional checks are performed\n+int ECDSA_SIG_recover_key_GFp(EC_KEY *eckey, ECDSA_SIG *ecsig, const unsigned char *msg, int msglen, int recid, int check)\n+{\n+    if (!eckey) return 0;\n+\n+    int ret = 0;\n+    BN_CTX *ctx = NULL;\n+\n+    BIGNUM *x = NULL;\n+    BIGNUM *e = NULL;\n+    BIGNUM *order = NULL;\n+    BIGNUM *sor = NULL;\n+    BIGNUM *eor = NULL;\n+    BIGNUM *field = NULL;\n+    EC_POINT *R = NULL;\n+    EC_POINT *O = NULL;\n+    EC_POINT *Q = NULL;\n+    BIGNUM *rr = NULL;\n+    BIGNUM *zero = NULL;\n+    int n = 0;\n+    int i = recid / 2;\n+\n+    const EC_GROUP *group = EC_KEY_get0_group(eckey);\n+    if ((ctx = BN_CTX_new()) == NULL) { ret = -1; goto err; }\n+    BN_CTX_start(ctx);\n+    order = BN_CTX_get(ctx);\n+    if (!EC_GROUP_get_order(group, order, ctx)) { ret = -2; goto err; }\n+    x = BN_CTX_get(ctx);\n+    if (!BN_copy(x, order)) { ret=-1; goto err; }\n+    if (!BN_mul_word(x, i)) { ret=-1; goto err; }\n+    if (!BN_add(x, x, ecsig->r)) { ret=-1; goto err; }\n+    field = BN_CTX_get(ctx);\n+    if (!EC_GROUP_get_curve_GFp(group, field, NULL, NULL, ctx)) { ret=-2; goto err; }\n+    if (BN_cmp(x, field) >= 0) { ret=0; goto err; }\n+    if ((R = EC_POINT_new(group)) == NULL) { ret = -2; goto err; }\n+    if (!EC_POINT_set_compressed_coordinates_GFp(group, R, x, recid % 2, ctx)) { ret=0; goto err; }\n+    if (check)\n+    {\n+        if ((O = EC_POINT_new(group)) == NULL) { ret = -2; goto err; }\n+        if (!EC_POINT_mul(group, O, NULL, R, order, ctx)) { ret=-2; goto err; }\n+        if (!EC_POINT_is_at_infinity(group, O)) { ret = 0; goto err; }\n+    }\n+    if ((Q = EC_POINT_new(group)) == NULL) { ret = -2; goto err; }\n+    n = EC_GROUP_get_degree(group);\n+    e = BN_CTX_get(ctx);\n+    if (!BN_bin2bn(msg, msglen, e)) { ret=-1; goto err; }\n+    if (8*msglen > n) BN_rshift(e, e, 8-(n & 7));\n+    zero = BN_CTX_get(ctx);\n+    if (!BN_zero(zero)) { ret=-1; goto err; }\n+    if (!BN_mod_sub(e, zero, e, order, ctx)) { ret=-1; goto err; }\n+    rr = BN_CTX_get(ctx);\n+    if (!BN_mod_inverse(rr, ecsig->r, order, ctx)) { ret=-1; goto err; }\n+    sor = BN_CTX_get(ctx);\n+    if (!BN_mod_mul(sor, ecsig->s, rr, order, ctx)) { ret=-1; goto err; }\n+    eor = BN_CTX_get(ctx);\n+    if (!BN_mod_mul(eor, e, rr, order, ctx)) { ret=-1; goto err; }\n+    if (!EC_POINT_mul(group, Q, eor, R, sor, ctx)) { ret=-2; goto err; }\n+    if (!EC_KEY_set_public_key(eckey, Q)) { ret=-2; goto err; }\n+\n+    ret = 1;\n+\n+err:\n+    if (ctx) {\n+        BN_CTX_end(ctx);\n+        BN_CTX_free(ctx);\n+    }\n+    if (R != NULL) EC_POINT_free(R);\n+    if (O != NULL) EC_POINT_free(O);\n+    if (Q != NULL) EC_POINT_free(Q);\n+    return ret;\n+}"
      },
      {
        "sha": "3f4b72d2d3c7c459506d911a79d9ee9b374a8979",
        "filename": "src/key.h",
        "status": "modified",
        "additions": 2,
        "deletions": 117,
        "changes": 119,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93db3fceac1bfe274bc0fd906428a20e709e2da5/src/key.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93db3fceac1bfe274bc0fd906428a20e709e2da5/src/key.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.h?ref=93db3fceac1bfe274bc0fd906428a20e709e2da5",
        "patch": "@@ -14,7 +14,6 @@\n \n #include \"serialize.h\"\n #include \"uint256.h\"\n-#include \"base58.h\"\n \n // secp160k1\n // const unsigned int PRIVATE_KEY_SIZE = 192;\n@@ -39,116 +38,8 @@\n // see www.keylength.com\n // script supports up to 75 for single byte push\n \n-// Generate a private key from just the secret parameter\n-int static inline EC_KEY_regenerate_key(EC_KEY *eckey, BIGNUM *priv_key)\n-{\n-    int ok = 0;\n-    BN_CTX *ctx = NULL;\n-    EC_POINT *pub_key = NULL;\n-\n-    if (!eckey) return 0;\n-\n-    const EC_GROUP *group = EC_KEY_get0_group(eckey);\n-\n-    if ((ctx = BN_CTX_new()) == NULL)\n-        goto err;\n-\n-    pub_key = EC_POINT_new(group);\n-\n-    if (pub_key == NULL)\n-        goto err;\n-\n-    if (!EC_POINT_mul(group, pub_key, priv_key, NULL, NULL, ctx))\n-        goto err;\n-\n-    EC_KEY_set_private_key(eckey,priv_key);\n-    EC_KEY_set_public_key(eckey,pub_key);\n-\n-    ok = 1;\n-\n-err:\n-\n-    if (pub_key)\n-        EC_POINT_free(pub_key);\n-    if (ctx != NULL)\n-        BN_CTX_free(ctx);\n-\n-    return(ok);\n-}\n-\n-// Perform ECDSA key recovery (see SEC1 4.1.6) for curves over (mod p)-fields\n-// recid selects which key is recovered\n-// if check is nonzero, additional checks are performed\n-int static inline ECDSA_SIG_recover_key_GFp(EC_KEY *eckey, ECDSA_SIG *ecsig, const unsigned char *msg, int msglen, int recid, int check)\n-{\n-    if (!eckey) return 0;\n-\n-    int ret = 0;\n-    BN_CTX *ctx = NULL;\n-\n-    BIGNUM *x = NULL;\n-    BIGNUM *e = NULL;\n-    BIGNUM *order = NULL;\n-    BIGNUM *sor = NULL;\n-    BIGNUM *eor = NULL;\n-    BIGNUM *field = NULL;\n-    EC_POINT *R = NULL;\n-    EC_POINT *O = NULL;\n-    EC_POINT *Q = NULL;\n-    BIGNUM *rr = NULL;\n-    BIGNUM *zero = NULL;\n-    int n = 0;\n-    int i = recid / 2;\n-\n-    const EC_GROUP *group = EC_KEY_get0_group(eckey);\n-    if ((ctx = BN_CTX_new()) == NULL) { ret = -1; goto err; }\n-    BN_CTX_start(ctx);\n-    order = BN_CTX_get(ctx);\n-    if (!EC_GROUP_get_order(group, order, ctx)) { ret = -2; goto err; }\n-    x = BN_CTX_get(ctx);\n-    if (!BN_copy(x, order)) { ret=-1; goto err; }\n-    if (!BN_mul_word(x, i)) { ret=-1; goto err; }\n-    if (!BN_add(x, x, ecsig->r)) { ret=-1; goto err; }\n-    field = BN_CTX_get(ctx);\n-    if (!EC_GROUP_get_curve_GFp(group, field, NULL, NULL, ctx)) { ret=-2; goto err; }\n-    if (BN_cmp(x, field) >= 0) { ret=0; goto err; }\n-    if ((R = EC_POINT_new(group)) == NULL) { ret = -2; goto err; }\n-    if (!EC_POINT_set_compressed_coordinates_GFp(group, R, x, recid % 2, ctx)) { ret=0; goto err; }\n-    if (check)\n-    {\n-        if ((O = EC_POINT_new(group)) == NULL) { ret = -2; goto err; }\n-        if (!EC_POINT_mul(group, O, NULL, R, order, ctx)) { ret=-2; goto err; }\n-        if (!EC_POINT_is_at_infinity(group, O)) { ret = 0; goto err; }\n-    }\n-    if ((Q = EC_POINT_new(group)) == NULL) { ret = -2; goto err; }\n-    n = EC_GROUP_get_degree(group);\n-    e = BN_CTX_get(ctx);\n-    if (!BN_bin2bn(msg, msglen, e)) { ret=-1; goto err; }\n-    if (8*msglen > n) BN_rshift(e, e, 8-(n & 7));\n-    zero = BN_CTX_get(ctx);\n-    if (!BN_zero(zero)) { ret=-1; goto err; }\n-    if (!BN_mod_sub(e, zero, e, order, ctx)) { ret=-1; goto err; }\n-    rr = BN_CTX_get(ctx);\n-    if (!BN_mod_inverse(rr, ecsig->r, order, ctx)) { ret=-1; goto err; }\n-    sor = BN_CTX_get(ctx);\n-    if (!BN_mod_mul(sor, ecsig->s, rr, order, ctx)) { ret=-1; goto err; }\n-    eor = BN_CTX_get(ctx);\n-    if (!BN_mod_mul(eor, e, rr, order, ctx)) { ret=-1; goto err; }\n-    if (!EC_POINT_mul(group, Q, eor, R, sor, ctx)) { ret=-2; goto err; }\n-    if (!EC_KEY_set_public_key(eckey, Q)) { ret=-2; goto err; }\n-\n-    ret = 1;\n-\n-err:\n-    if (ctx) {\n-        BN_CTX_end(ctx);\n-        BN_CTX_free(ctx);\n-    }\n-    if (R != NULL) EC_POINT_free(R);\n-    if (O != NULL) EC_POINT_free(O);\n-    if (Q != NULL) EC_POINT_free(Q);\n-    return ret;\n-}\n+int extern EC_KEY_regenerate_key(EC_KEY *eckey, BIGNUM *priv_key);\n+int extern ECDSA_SIG_recover_key_GFp(EC_KEY *eckey, ECDSA_SIG *ecsig, const unsigned char *msg, int msglen, int recid, int check);\n \n class key_error : public std::runtime_error\n {\n@@ -381,12 +272,6 @@ class CKey\n             return false;\n         return true;\n     }\n-\n-    // Get the address corresponding to this key\n-    CBitcoinAddress GetAddress() const\n-    {\n-        return CBitcoinAddress(GetPubKey());\n-    }\n };\n \n #endif"
      },
      {
        "sha": "6cf557fafed595c9fe9062ba70015484b58c079a",
        "filename": "src/keystore.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 8,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93db3fceac1bfe274bc0fd906428a20e709e2da5/src/keystore.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93db3fceac1bfe274bc0fd906428a20e709e2da5/src/keystore.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.cpp?ref=93db3fceac1bfe274bc0fd906428a20e709e2da5",
        "patch": "@@ -29,7 +29,7 @@ bool CKeyStore::GetPubKey(const CBitcoinAddress &address, std::vector<unsigned c\n bool CBasicKeyStore::AddKey(const CKey& key)\n {\n     CRITICAL_BLOCK(cs_KeyStore)\n-        mapKeys[key.GetAddress()] = key.GetSecret();\n+        mapKeys[CBitcoinAddress(key.GetPubKey())] = key.GetSecret();\n     return true;\n }\n \n@@ -116,23 +116,19 @@ bool CCryptoKeyStore::AddCryptedKey(const std::vector<unsigned char> &vchPubKey,\n     return true;\n }\n \n-bool CCryptoKeyStore::GetKey(const CBitcoinAddress &address, CKey& keyOut) const\n+bool CCryptoKeyStore::GetSecret(const CBitcoinAddress &address, CSecret& vchSecretOut) const\n {\n     CRITICAL_BLOCK(cs_KeyStore)\n     {\n         if (!IsCrypted())\n-            return CBasicKeyStore::GetKey(address, keyOut);\n+            return CBasicKeyStore::GetSecret(address, vchSecretOut);\n \n         CryptedKeyMap::const_iterator mi = mapCryptedKeys.find(address);\n         if (mi != mapCryptedKeys.end())\n         {\n             const std::vector<unsigned char> &vchPubKey = (*mi).second.first;\n             const std::vector<unsigned char> &vchCryptedSecret = (*mi).second.second;\n-            CSecret vchSecret;\n-            if (!DecryptSecret(vMasterKey, vchCryptedSecret, Hash(vchPubKey.begin(), vchPubKey.end()), vchSecret))\n-                return false;\n-            keyOut.SetSecret(vchSecret);\n-            return true;\n+            return DecryptSecret(vMasterKey, vchCryptedSecret, Hash(vchPubKey.begin(), vchPubKey.end()), vchSecretOut);\n         }\n     }\n     return false;"
      },
      {
        "sha": "3b91de6fb444dd650ecf9652ef89670c1607fb7f",
        "filename": "src/keystore.h",
        "status": "modified",
        "additions": 49,
        "deletions": 10,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93db3fceac1bfe274bc0fd906428a20e709e2da5/src/keystore.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93db3fceac1bfe274bc0fd906428a20e709e2da5/src/keystore.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.h?ref=93db3fceac1bfe274bc0fd906428a20e709e2da5",
        "patch": "@@ -19,17 +19,28 @@ class CKeyStore\n \n     // Check whether a key corresponding to a given address is present in the store.\n     virtual bool HaveKey(const CBitcoinAddress &address) const =0;\n-\n-    // Retrieve a key corresponding to a given address from the store.\n-    // Return true if succesful.\n-    virtual bool GetKey(const CBitcoinAddress &address, CKey& keyOut) const =0;\n-\n-    // Retrieve only the public key corresponding to a given address.\n-    // This may succeed even if GetKey fails (e.g., encrypted wallets)\n+    virtual bool GetKey(const CBitcoinAddress &address, CKey& keyOut) const \n+    {\n+        CSecret vchSecret;\n+        if (!GetSecret(address, vchSecret))\n+            return false;\n+        if (!keyOut.SetSecret(vchSecret))\n+            return false;\n+        return true;\n+    }\n+    virtual void GetKeys(std::set<CBitcoinAddress> &setAddress) const =0;\n     virtual bool GetPubKey(const CBitcoinAddress &address, std::vector<unsigned char>& vchPubKeyOut) const;\n \n     // Generate a new key, and add it to the store\n     virtual std::vector<unsigned char> GenerateNewKey();\n+    virtual bool GetSecret(const CBitcoinAddress &address, CSecret& vchSecret) const\n+    {\n+        CKey key;\n+        if (!GetKey(address, key))\n+            return false;\n+        vchSecret = key.GetSecret();\n+        return true;\n+    }\n };\n \n typedef std::map<CBitcoinAddress, CSecret> KeyMap;\n@@ -49,14 +60,27 @@ class CBasicKeyStore : public CKeyStore\n             result = (mapKeys.count(address) > 0);\n         return result;\n     }\n-    bool GetKey(const CBitcoinAddress &address, CKey& keyOut) const\n+    void GetKeys(std::set<CBitcoinAddress> &setAddress) const\n+    {\n+        setAddress.clear();\n+        CRITICAL_BLOCK(cs_KeyStore)\n+        {\n+            KeyMap::const_iterator mi = mapKeys.begin();\n+            while (mi != mapKeys.end())\n+            {\n+                setAddress.insert((*mi).first);\n+                mi++;\n+            }\n+        }\n+    }\n+    bool GetSecret(const CBitcoinAddress &address, CSecret &vchSecret) const\n     {\n         CRITICAL_BLOCK(cs_KeyStore)\n         {\n             KeyMap::const_iterator mi = mapKeys.find(address);\n             if (mi != mapKeys.end())\n             {\n-                keyOut.SetSecret((*mi).second);\n+                vchSecret = (*mi).second;\n                 return true;\n             }\n         }\n@@ -131,8 +155,23 @@ class CCryptoKeyStore : public CBasicKeyStore\n         }\n         return false;\n     }\n-    bool GetKey(const CBitcoinAddress &address, CKey& keyOut) const;\n+    bool GetSecret(const CBitcoinAddress &address, CSecret& vchSecret) const;\n     bool GetPubKey(const CBitcoinAddress &address, std::vector<unsigned char>& vchPubKeyOut) const;\n+    void GetKeys(std::set<CBitcoinAddress> &setAddress) const\n+    {\n+        if (!IsCrypted())\n+        {\n+            CBasicKeyStore::GetKeys(setAddress);\n+            return;\n+        }\n+        setAddress.clear();\n+        CryptedKeyMap::const_iterator mi = mapCryptedKeys.begin();\n+        while (mi != mapCryptedKeys.end())\n+        {\n+            setAddress.insert((*mi).first);\n+            mi++;\n+        }\n+    }\n };\n \n #endif"
      },
      {
        "sha": "ce3da062ec8a372b54b68921970e715a1c9aed93",
        "filename": "src/makefile.mingw",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93db3fceac1bfe274bc0fd906428a20e709e2da5/src/makefile.mingw",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93db3fceac1bfe274bc0fd906428a20e709e2da5/src/makefile.mingw",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.mingw?ref=93db3fceac1bfe274bc0fd906428a20e709e2da5",
        "patch": "@@ -61,6 +61,7 @@ LIBS += -l kernel32 -l user32 -l gdi32 -l comdlg32 -l winspool -l winmm -l shell\n OBJS= \\\n     obj/checkpoints.o \\\n     obj/crypter.o \\\n+    obj/key.o \\\n     obj/db.o \\\n     obj/init.o \\\n     obj/irc.o \\"
      },
      {
        "sha": "690e35a3e7d3ad3ff12bdee10a7d3efeed8dd946",
        "filename": "src/makefile.osx",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93db3fceac1bfe274bc0fd906428a20e709e2da5/src/makefile.osx",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93db3fceac1bfe274bc0fd906428a20e709e2da5/src/makefile.osx",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.osx?ref=93db3fceac1bfe274bc0fd906428a20e709e2da5",
        "patch": "@@ -72,6 +72,7 @@ HEADERS = \\\n OBJS= \\\n     obj/checkpoints.o \\\n     obj/crypter.o \\\n+    obj/key.o \\\n     obj/db.o \\\n     obj/init.o \\\n     obj/irc.o \\"
      },
      {
        "sha": "a8b6837c8a39a5ebba7684a6b7b6e86247f12a8c",
        "filename": "src/makefile.unix",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93db3fceac1bfe274bc0fd906428a20e709e2da5/src/makefile.unix",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93db3fceac1bfe274bc0fd906428a20e709e2da5/src/makefile.unix",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.unix?ref=93db3fceac1bfe274bc0fd906428a20e709e2da5",
        "patch": "@@ -110,6 +110,7 @@ HEADERS = \\\n OBJS= \\\n     obj/checkpoints.o \\\n     obj/crypter.o \\\n+    obj/key.o \\\n     obj/db.o \\\n     obj/init.o \\\n     obj/irc.o \\"
      }
    ]
  },
  {
    "sha": "15a8590ecf6610387502be14d26657cb154d6201",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNWE4NTkwZWNmNjYxMDM4NzUwMmJlMTRkMjY2NTdjYjE1NGQ2MjAx",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2011-07-11T19:48:09Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "sipa@ulyssis.org",
        "date": "2011-12-17T20:49:48Z"
      },
      "message": "CBitcoinSecret added (base58 encoded privkey)",
      "tree": {
        "sha": "4b27e4231411357444dd890d5a13fbffdb67c9df",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4b27e4231411357444dd890d5a13fbffdb67c9df"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/15a8590ecf6610387502be14d26657cb154d6201",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/15a8590ecf6610387502be14d26657cb154d6201",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/15a8590ecf6610387502be14d26657cb154d6201",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/15a8590ecf6610387502be14d26657cb154d6201/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "93db3fceac1bfe274bc0fd906428a20e709e2da5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93db3fceac1bfe274bc0fd906428a20e709e2da5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/93db3fceac1bfe274bc0fd906428a20e709e2da5"
      }
    ],
    "stats": {
      "total": 53,
      "additions": 49,
      "deletions": 4
    },
    "files": [
      {
        "sha": "113fa14a5eac7797767d65af7b045a3993e3d3e3",
        "filename": "src/base58.h",
        "status": "modified",
        "additions": 49,
        "deletions": 4,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15a8590ecf6610387502be14d26657cb154d6201/src/base58.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15a8590ecf6610387502be14d26657cb154d6201/src/base58.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.h?ref=15a8590ecf6610387502be14d26657cb154d6201",
        "patch": "@@ -18,6 +18,7 @@\n #include <string>\n #include <vector>\n #include \"bignum.h\"\n+#include \"key.h\"\n \n static const char* pszBase58 = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\";\n \n@@ -257,15 +258,14 @@ class CBase58Data\n class CBitcoinAddress : public CBase58Data\n {\n public:\n-    bool SetHash160(const uint160& hash160)\n+    void SetHash160(const uint160& hash160)\n     {\n         SetData(fTestNet ? 111 : 0, &hash160, 20);\n-        return true;\n     }\n \n-    bool SetPubKey(const std::vector<unsigned char>& vchPubKey)\n+    void SetPubKey(const std::vector<unsigned char>& vchPubKey)\n     {\n-        return SetHash160(Hash160(vchPubKey));\n+        SetHash160(Hash160(vchPubKey));\n     }\n \n     bool IsValid() const\n@@ -320,4 +320,49 @@ class CBitcoinAddress : public CBase58Data\n     }\n };\n \n+class CBitcoinSecret : public CBase58Data\n+{\n+public:\n+    void SetSecret(const CSecret& vchSecret)\n+    {\n+        SetData(fTestNet ? 239 : 128, &vchSecret[0], vchSecret.size());\n+    }\n+\n+    CSecret GetSecret()\n+    {\n+        CSecret vchSecret;\n+        vchSecret.resize(vchData.size());\n+        memcpy(&vchSecret[0], &vchData[0], vchData.size());\n+        return vchSecret;\n+    }\n+\n+    bool IsValid() const\n+    {\n+        int nExpectedSize = 32;\n+        bool fExpectTestNet = false;\n+        switch(nVersion)\n+        {\n+            case 128:\n+                break;\n+\n+            case 239:\n+                fExpectTestNet = true;\n+                break;\n+\n+            default:\n+                return false;\n+        }\n+        return fExpectTestNet == fTestNet && vchData.size() == nExpectedSize;\n+    }\n+\n+    CBitcoinSecret(const CSecret& vchSecret)\n+    {\n+        SetSecret(vchSecret);\n+    }\n+\n+    CBitcoinSecret()\n+    {\n+    }\n+};\n+\n #endif"
      }
    ]
  },
  {
    "sha": "30ab2c9c46ce38197017ce6a6e13869617e692c7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMGFiMmM5YzQ2Y2UzODE5NzAxN2NlNmE2ZTEzODY5NjE3ZTY5MmM3",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2011-07-11T19:49:45Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "sipa@ulyssis.org",
        "date": "2011-12-17T20:49:48Z"
      },
      "message": "Preparations for key import/export",
      "tree": {
        "sha": "f87488e5baa4b81a94ebac62f3a7ee6da612b166",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f87488e5baa4b81a94ebac62f3a7ee6da612b166"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/30ab2c9c46ce38197017ce6a6e13869617e692c7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/30ab2c9c46ce38197017ce6a6e13869617e692c7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/30ab2c9c46ce38197017ce6a6e13869617e692c7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/30ab2c9c46ce38197017ce6a6e13869617e692c7/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "15a8590ecf6610387502be14d26657cb154d6201",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/15a8590ecf6610387502be14d26657cb154d6201",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/15a8590ecf6610387502be14d26657cb154d6201"
      }
    ],
    "stats": {
      "total": 66,
      "additions": 60,
      "deletions": 6
    },
    "files": [
      {
        "sha": "fcf2482ee07679ea064093ee582dd2c2295e5a10",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30ab2c9c46ce38197017ce6a6e13869617e692c7/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30ab2c9c46ce38197017ce6a6e13869617e692c7/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=30ab2c9c46ce38197017ce6a6e13869617e692c7",
        "patch": "@@ -12,6 +12,7 @@\n #include <boost/iostreams/concepts.hpp>\n #include <boost/iostreams/stream.hpp>\n #include <boost/algorithm/string.hpp>\n+#include <boost/lexical_cast.hpp>\n #ifdef USE_SSL\n #include <boost/asio/ssl.hpp> \n #include <boost/filesystem.hpp>"
      },
      {
        "sha": "3a4e86512cf356a121f8a512395592fc0ee135b7",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30ab2c9c46ce38197017ce6a6e13869617e692c7/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30ab2c9c46ce38197017ce6a6e13869617e692c7/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=30ab2c9c46ce38197017ce6a6e13869617e692c7",
        "patch": "@@ -516,7 +516,7 @@ bool CTransaction::RemoveFromMemoryPool()\n \n \n \n-int CMerkleTx::GetDepthInMainChain(int& nHeightRet) const\n+int CMerkleTx::GetDepthInMainChain(CBlockIndex* &pindexRet) const\n {\n     if (hashBlock == 0 || nIndex == -1)\n         return 0;\n@@ -537,7 +537,7 @@ int CMerkleTx::GetDepthInMainChain(int& nHeightRet) const\n         fMerkleVerified = true;\n     }\n \n-    nHeightRet = pindex->nHeight;\n+    pindexRet = pindex;\n     return pindexBest->nHeight - pindex->nHeight + 1;\n }\n "
      },
      {
        "sha": "93528cdb2b1108bade90d6d10b028af0234db748",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30ab2c9c46ce38197017ce6a6e13869617e692c7/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30ab2c9c46ce38197017ce6a6e13869617e692c7/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=30ab2c9c46ce38197017ce6a6e13869617e692c7",
        "patch": "@@ -695,8 +695,8 @@ class CMerkleTx : public CTransaction\n \n \n     int SetMerkleBranch(const CBlock* pblock=NULL);\n-    int GetDepthInMainChain(int& nHeightRet) const;\n-    int GetDepthInMainChain() const { int nHeight; return GetDepthInMainChain(nHeight); }\n+    int GetDepthInMainChain(CBlockIndex* &pindexRet) const;\n+    int GetDepthInMainChain() const { CBlockIndex *pindexRet; return GetDepthInMainChain(pindexRet); }\n     bool IsInMainChain() const { return GetDepthInMainChain() > 0; }\n     int GetBlocksToMaturity() const;\n     bool AcceptToMemoryPool(CTxDB& txdb, bool fCheckInputs=true);\n@@ -758,6 +758,7 @@ class CTxIndex\n         return !(a == b);\n     }\n     int GetDepthInMainChain() const;\n+ \n };\n \n \n@@ -1263,6 +1264,11 @@ class CBlockLocator\n             Set((*mi).second);\n     }\n \n+    CBlockLocator(const std::vector<uint256>& vHaveIn)\n+    {\n+        vHave = vHaveIn;\n+    }\n+\n     IMPLEMENT_SERIALIZE\n     (\n         if (!(nType & SER_GETHASH))"
      },
      {
        "sha": "f9157e01d56021ebc5cf3d9c0d5fde6c6c2185dc",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 45,
        "deletions": 1,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30ab2c9c46ce38197017ce6a6e13869617e692c7/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30ab2c9c46ce38197017ce6a6e13869617e692c7/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=30ab2c9c46ce38197017ce6a6e13869617e692c7",
        "patch": "@@ -299,7 +299,7 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn)\n // Add a transaction to the wallet, or update it.\n // pblock is optional, but should be provided if the transaction is known to be in a block.\n // If fUpdate is true, existing transactions will be updated.\n-bool CWallet::AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlock* pblock, bool fUpdate)\n+bool CWallet::AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlock* pblock, bool fUpdate, bool fFindBlock)\n {\n     uint256 hash = tx.GetHash();\n     CRITICAL_BLOCK(cs_wallet)\n@@ -586,6 +586,15 @@ int CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate)\n     return ret;\n }\n \n+int CWallet::ScanForWalletTransaction(const uint256& hashTx)\n+{\n+    CTransaction tx;\n+    tx.ReadFromDisk(COutPoint(hashTx, 0));\n+    if (AddToWalletIfInvolvingMe(tx, NULL, true, true))\n+        return 1;\n+    return 0;\n+}\n+\n void CWallet::ReacceptWalletTransactions()\n {\n     CTxDB txdb(\"r\");\n@@ -1325,6 +1334,22 @@ void CWallet::ReserveKeyFromKeyPool(int64& nIndex, CKeyPool& keypool)\n     }\n }\n \n+int64 CWallet::AddReserveKey(const CKeyPool& keypool)\n+{\n+    CRITICAL_BLOCK(cs_main)\n+    CRITICAL_BLOCK(cs_wallet)\n+    {\n+        CWalletDB walletdb(strWalletFile);\n+\n+        int64 nIndex = 1 + *(--setKeyPool.end());\n+        if (!walletdb.WritePool(nIndex, keypool))\n+            throw runtime_error(\"AddReserveKey() : writing added key failed\");\n+        setKeyPool.insert(nIndex);\n+        return nIndex;\n+    }\n+    return -1;\n+}\n+\n void CWallet::KeepKey(int64 nIndex)\n {\n     // Remove from key pool\n@@ -1413,3 +1438,22 @@ void CReserveKey::ReturnKey()\n     vchPubKey.clear();\n }\n \n+void CWallet::GetAllReserveAddresses(set<CBitcoinAddress>& setAddress)\n+{\n+    setAddress.clear();\n+\n+    CWalletDB walletdb(strWalletFile);\n+\n+    CRITICAL_BLOCK(cs_main)\n+    BOOST_FOREACH(const int64& id, setKeyPool)\n+    {\n+        CKeyPool keypool;\n+        if (!walletdb.ReadPool(id, keypool))\n+            throw runtime_error(\"GetAllReserveKeyHashes() : read failed\");\n+        CBitcoinAddress address(keypool.vchPubKey);\n+        assert(!keypool.vchPubKey.empty());\n+        if (!HaveKey(address))\n+            throw runtime_error(\"GetAllReserveKeyHashes() : unknown key in key pool\");\n+        setAddress.insert(address);\n+    }\n+}"
      },
      {
        "sha": "95537be63eb6cf0e3c6f9793edbd06c41c140398",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30ab2c9c46ce38197017ce6a6e13869617e692c7/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30ab2c9c46ce38197017ce6a6e13869617e692c7/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=30ab2c9c46ce38197017ce6a6e13869617e692c7",
        "patch": "@@ -75,10 +75,11 @@ class CWallet : public CCryptoKeyStore\n     bool EncryptWallet(const SecureString& strWalletPassphrase);\n \n     bool AddToWallet(const CWalletTx& wtxIn);\n-    bool AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlock* pblock, bool fUpdate = false);\n+    bool AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlock* pblock, bool fUpdate = false, bool fFindBlock = false);\n     bool EraseFromWallet(uint256 hash);\n     void WalletUpdateSpent(const CTransaction& prevout);\n     int ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate = false);\n+    int ScanForWalletTransaction(const uint256& hashTx);\n     void ReacceptWalletTransactions();\n     void ResendWalletTransactions();\n     int64 GetBalance() const;\n@@ -92,11 +93,13 @@ class CWallet : public CCryptoKeyStore\n \n     bool NewKeyPool();\n     bool TopUpKeyPool();\n+    int64 AddReserveKey(const CKeyPool& keypool);\n     void ReserveKeyFromKeyPool(int64& nIndex, CKeyPool& keypool);\n     void KeepKey(int64 nIndex);\n     void ReturnKey(int64 nIndex);\n     bool GetKeyFromPool(std::vector<unsigned char> &key, bool fAllowReuse=true);\n     int64 GetOldestKeyPoolTime();\n+    void GetAllReserveAddresses(std::set<CBitcoinAddress>& setAddress);\n \n     bool IsMine(const CTxIn& txin) const;\n     int64 GetDebit(const CTxIn& txin) const;"
      }
    ]
  },
  {
    "sha": "95d888a6d1f659a5cb81124e0d97966b9de1f139",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NWQ4ODhhNmQxZjY1OWE1Y2I4MTEyNGUwZDk3OTY2YjlkZTFmMTM5",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2011-07-13T09:56:38Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "sipa@ulyssis.org",
        "date": "2011-12-17T20:49:48Z"
      },
      "message": "Key import and export\n\nIntroduces two new RPC calls:\n* dumpprivkey: retrieve the private key corresponding to an address\n* importprivkey: add a private key to your wallet\n\nThe private key format is analoguous to the address format. It is\na 51-character base58-encoded string, that includes a version number\nand a checksum.\n\nIncludes patch by mhanne:\n* add optional account parameter for importprivkey, if omitted use default",
      "tree": {
        "sha": "db17f76d0517ddbf12fd9144948816e930439eef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/db17f76d0517ddbf12fd9144948816e930439eef"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/95d888a6d1f659a5cb81124e0d97966b9de1f139",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95d888a6d1f659a5cb81124e0d97966b9de1f139",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/95d888a6d1f659a5cb81124e0d97966b9de1f139",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95d888a6d1f659a5cb81124e0d97966b9de1f139/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "30ab2c9c46ce38197017ce6a6e13869617e692c7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/30ab2c9c46ce38197017ce6a6e13869617e692c7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/30ab2c9c46ce38197017ce6a6e13869617e692c7"
      }
    ],
    "stats": {
      "total": 128,
      "additions": 124,
      "deletions": 4
    },
    "files": [
      {
        "sha": "853f2faf939f36f4ff63275b34d748a23d53089f",
        "filename": "bitcoin-qt.pro",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/95d888a6d1f659a5cb81124e0d97966b9de1f139/bitcoin-qt.pro",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/95d888a6d1f659a5cb81124e0d97966b9de1f139/bitcoin-qt.pro",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/bitcoin-qt.pro?ref=95d888a6d1f659a5cb81124e0d97966b9de1f139",
        "patch": "@@ -174,6 +174,7 @@ SOURCES += src/qt/bitcoin.cpp src/qt/bitcoingui.cpp \\\n     src/qt/transactionview.cpp \\\n     src/qt/walletmodel.cpp \\\n     src/bitcoinrpc.cpp \\\n+    src/rpcdump.cpp \\\n     src/qt/overviewpage.cpp \\\n     src/qt/csvmodelwriter.cpp \\\n     src/crypter.cpp \\"
      },
      {
        "sha": "e3378782c0a4d901d862b330e0f68034a137f0b8",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 4,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/95d888a6d1f659a5cb81124e0d97966b9de1f139/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/95d888a6d1f659a5cb81124e0d97966b9de1f139/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=95d888a6d1f659a5cb81124e0d97966b9de1f139",
        "patch": "@@ -9,6 +9,7 @@\n #include \"init.h\"\n #undef printf\n #include <boost/asio.hpp>\n+#include <boost/filesystem.hpp>\n #include <boost/iostreams/concepts.hpp>\n #include <boost/iostreams/stream.hpp>\n #include <boost/algorithm/string.hpp>\n@@ -42,6 +43,8 @@ static std::string strRPCUserColonPass;\n static int64 nWalletUnlockTime;\n static CCriticalSection cs_nWalletUnlockTime;\n \n+extern Value dumpprivkey(const Array& params, bool fHelp);\n+extern Value importprivkey(const Array& params, bool fHelp);\n \n Object JSONRPCError(int code, const string& message)\n {\n@@ -1599,7 +1602,6 @@ Value validateaddress(const Array& params, bool fHelp)\n     return ret;\n }\n \n-\n Value getwork(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() > 1)\n@@ -1840,13 +1842,15 @@ pair<string, rpcfn_type> pCallTable[] =\n     make_pair(\"sendmany\",               &sendmany),\n     make_pair(\"gettransaction\",         &gettransaction),\n     make_pair(\"listtransactions\",       &listtransactions),\n-    make_pair(\"signmessage\",           &signmessage),\n-    make_pair(\"verifymessage\",         &verifymessage),\n+    make_pair(\"signmessage\",            &signmessage),\n+    make_pair(\"verifymessage\",          &verifymessage),\n     make_pair(\"getwork\",                &getwork),\n     make_pair(\"listaccounts\",           &listaccounts),\n     make_pair(\"settxfee\",               &settxfee),\n     make_pair(\"getmemorypool\",          &getmemorypool),\n-    make_pair(\"listsinceblock\",        &listsinceblock),\n+    make_pair(\"listsinceblock\",         &listsinceblock),\n+    make_pair(\"dumpprivkey\",            &dumpprivkey),\n+    make_pair(\"importprivkey\",          &importprivkey)\n };\n map<string, rpcfn_type> mapCallTable(pCallTable, pCallTable + sizeof(pCallTable)/sizeof(pCallTable[0]));\n "
      },
      {
        "sha": "ed718b89ea1839ddab285782cf2cc9fcfa9c797a",
        "filename": "src/makefile.mingw",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/95d888a6d1f659a5cb81124e0d97966b9de1f139/src/makefile.mingw",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/95d888a6d1f659a5cb81124e0d97966b9de1f139/src/makefile.mingw",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.mingw?ref=95d888a6d1f659a5cb81124e0d97966b9de1f139",
        "patch": "@@ -70,6 +70,7 @@ OBJS= \\\n     obj/net.o \\\n     obj/protocol.o \\\n     obj/bitcoinrpc.o \\\n+    obj/rpcdump.o \\\n     obj/script.o \\\n     obj/util.o \\\n     obj/wallet.o"
      },
      {
        "sha": "4b0b521a33e6dc62fb968a68480ebf3a98cb796a",
        "filename": "src/makefile.osx",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/95d888a6d1f659a5cb81124e0d97966b9de1f139/src/makefile.osx",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/95d888a6d1f659a5cb81124e0d97966b9de1f139/src/makefile.osx",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.osx?ref=95d888a6d1f659a5cb81124e0d97966b9de1f139",
        "patch": "@@ -81,6 +81,7 @@ OBJS= \\\n     obj/net.o \\\n     obj/protocol.o \\\n     obj/bitcoinrpc.o \\\n+    obj/rpcdump.o \\\n     obj/script.o \\\n     obj/util.o \\\n     obj/wallet.o"
      },
      {
        "sha": "a436f968bc1304ef3583730d73ab08ee0d1c4720",
        "filename": "src/makefile.unix",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/95d888a6d1f659a5cb81124e0d97966b9de1f139/src/makefile.unix",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/95d888a6d1f659a5cb81124e0d97966b9de1f139/src/makefile.unix",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.unix?ref=95d888a6d1f659a5cb81124e0d97966b9de1f139",
        "patch": "@@ -119,6 +119,7 @@ OBJS= \\\n     obj/net.o \\\n     obj/protocol.o \\\n     obj/bitcoinrpc.o \\\n+    obj/rpcdump.o \\\n     obj/script.o \\\n     obj/util.o \\\n     obj/wallet.o"
      },
      {
        "sha": "f3978fbce8aa481b5d4e47d574971beeebaf24db",
        "filename": "src/rpcdump.cpp",
        "status": "added",
        "additions": 101,
        "deletions": 0,
        "changes": 101,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/95d888a6d1f659a5cb81124e0d97966b9de1f139/src/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/95d888a6d1f659a5cb81124e0d97966b9de1f139/src/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcdump.cpp?ref=95d888a6d1f659a5cb81124e0d97966b9de1f139",
        "patch": "@@ -0,0 +1,101 @@\n+// Copyright (c) 2011 Bitcoin Developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file license.txt or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"headers.h\"\n+#include \"init.h\" // for pwalletMain\n+#include \"bitcoinrpc.h\"\n+\n+// #include <boost/asio.hpp>\n+// #include <boost/iostreams/concepts.hpp>\n+// #include <boost/iostreams/stream.hpp>\n+#include <boost/lexical_cast.hpp>\n+// #ifdef USE_SSL\n+// #include <boost/asio/ssl.hpp> \n+// typedef boost::asio::ssl::stream<boost::asio::ip::tcp::socket> SSLStream;\n+// #endif\n+// #include <boost/xpressive/xpressive_dynamic.hpp>\n+#include \"json/json_spirit_reader_template.h\"\n+#include \"json/json_spirit_writer_template.h\"\n+#include \"json/json_spirit_utils.h\"\n+\n+#define printf OutputDebugStringF\n+\n+// using namespace boost::asio;\n+using namespace json_spirit;\n+using namespace std;\n+\n+extern Object JSONRPCError(int code, const string& message);\n+\n+class CTxDump\n+{\n+public:\n+    CBlockIndex *pindex;\n+    int64 nValue;\n+    bool fSpent;\n+    CWalletTx* ptx;\n+    int nOut;\n+    CTxDump(CWalletTx* ptx = NULL, int nOut = -1)\n+    {\n+        pindex = NULL;\n+        nValue = 0;\n+        fSpent = false;\n+        this->ptx = ptx;\n+        this->nOut = nOut;\n+    }\n+};\n+\n+Value importprivkey(const Array& params, bool fHelp)\n+{\n+    if (fHelp || params.size() < 1 || params.size() > 2)\n+        throw runtime_error(\n+            \"importprivkey <bitcoinprivkey> [label]\\n\"\n+            \"Adds a private key (as returned by dumpprivkey) to your wallet.\");\n+\n+    string strSecret = params[0].get_str();\n+    string strLabel = \"\";\n+    if (params.size() > 1)\n+        strLabel = params[1].get_str();\n+    CBitcoinSecret vchSecret;\n+    bool fGood = vchSecret.SetString(strSecret);\n+\n+    if (!fGood) throw JSONRPCError(-5,\"Invalid private key\");\n+\n+    CKey key;\n+    key.SetSecret(vchSecret.GetSecret());\n+    CBitcoinAddress vchAddress = CBitcoinAddress(key.GetPubKey());\n+\n+    CRITICAL_BLOCK(cs_main)\n+    CRITICAL_BLOCK(pwalletMain->cs_wallet)\n+    {\n+        pwalletMain->MarkDirty();\n+        pwalletMain->SetAddressBookName(vchAddress, strLabel);\n+\n+        if (!pwalletMain->AddKey(key))\n+            throw JSONRPCError(-4,\"Error adding key to wallet\");\n+\n+        pwalletMain->ScanForWalletTransactions(pindexGenesisBlock, true);\n+        pwalletMain->ReacceptWalletTransactions();\n+    }\n+\n+    MainFrameRepaint();\n+\n+    return Value::null;\n+}\n+\n+Value dumpprivkey(const Array& params, bool fHelp)\n+{\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"dumpprivkey <bitcoinaddress>\\n\"\n+            \"Reveals the private key corresponding to <bitcoinaddress>.\");\n+\n+    string strAddress = params[0].get_str();\n+    CBitcoinAddress address;\n+    if (!address.SetString(strAddress))\n+        throw JSONRPCError(-5, \"Invalid bitcoin address\");\n+    CSecret vchSecret;\n+    if (!pwalletMain->GetSecret(address, vchSecret))\n+        throw JSONRPCError(-4,\"Private key for address \" + strAddress + \" is not known\");\n+    return CBitcoinSecret(vchSecret).ToString();\n+}"
      },
      {
        "sha": "87f5dfd659fb47f5d0636ed7d2b70ba5a5c37b1f",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/95d888a6d1f659a5cb81124e0d97966b9de1f139/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/95d888a6d1f659a5cb81124e0d97966b9de1f139/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=95d888a6d1f659a5cb81124e0d97966b9de1f139",
        "patch": "@@ -224,6 +224,15 @@ void CWallet::WalletUpdateSpent(const CTransaction &tx)\n     }\n }\n \n+void CWallet::MarkDirty()\n+{\n+    CRITICAL_BLOCK(cs_wallet)\n+    {\n+        BOOST_FOREACH(PAIRTYPE(const uint256, CWalletTx)& item, mapWallet)\n+            item.second.MarkDirty();\n+    }\n+}\n+\n bool CWallet::AddToWallet(const CWalletTx& wtxIn)\n {\n     uint256 hash = wtxIn.GetHash();\n@@ -1445,6 +1454,7 @@ void CWallet::GetAllReserveAddresses(set<CBitcoinAddress>& setAddress)\n     CWalletDB walletdb(strWalletFile);\n \n     CRITICAL_BLOCK(cs_main)\n+    CRITICAL_BLOCK(cs_wallet)\n     BOOST_FOREACH(const int64& id, setKeyPool)\n     {\n         CKeyPool keypool;"
      },
      {
        "sha": "78f055a6041cfb6e3b7af8b15391ff268c064ebf",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/95d888a6d1f659a5cb81124e0d97966b9de1f139/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/95d888a6d1f659a5cb81124e0d97966b9de1f139/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=95d888a6d1f659a5cb81124e0d97966b9de1f139",
        "patch": "@@ -74,6 +74,7 @@ class CWallet : public CCryptoKeyStore\n     bool ChangeWalletPassphrase(const SecureString& strOldWalletPassphrase, const SecureString& strNewWalletPassphrase);\n     bool EncryptWallet(const SecureString& strWalletPassphrase);\n \n+    void MarkDirty();\n     bool AddToWallet(const CWalletTx& wtxIn);\n     bool AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlock* pblock, bool fUpdate = false, bool fFindBlock = false);\n     bool EraseFromWallet(uint256 hash);"
      }
    ]
  }
]