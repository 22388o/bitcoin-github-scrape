rajarshimaitra,2020-05-25 13:41:28,"Thanks @MarcoFalke for the review and suggestion. Made the changes, rebased, tests passing. ",https://github.com/bitcoin/bitcoin/pull/19063#issuecomment-633578758,633578758,
MarcoFalke,2020-05-24 15:39:02,No need to calculate this again. `AcceptToMemoryPool` already did this calculation. It should be possible for `AcceptToMemoryPool` to simply pass out the fee.,https://github.com/bitcoin/bitcoin/pull/19063#discussion_r429648863,429648863,src/rpc/rawtransaction.cpp
MarcoFalke,2020-05-24 15:40:26,"Since the lock is released, I am not sure if this is even safe, since coins could vanish?!",https://github.com/bitcoin/bitcoin/pull/19063#discussion_r429649003,429649003,src/rpc/rawtransaction.cpp
MarcoFalke,2020-05-24 15:43:11,See also https://github.com/bitcoin/bitcoin/pull/15810#issuecomment-482728862,https://github.com/bitcoin/bitcoin/pull/19063#discussion_r429649208,429649208,src/rpc/rawtransaction.cpp
rajarshimaitra,2020-05-24 15:44:00,Yes. Will try that. That went scarily into validation section of the protocol. So skipped that as an initial trial.,https://github.com/bitcoin/bitcoin/pull/19063#discussion_r429649287,429649287,src/rpc/rawtransaction.cpp
rajarshimaitra,2020-05-24 19:28:52,"It seems the way to extract fee is by changing the signature of `AcceptToMemoryPool` and passing a `CAmount&` argument. But this function is being called in many other (nontrivial) places. So all of them need to be modified, and none of them needs to get back the fee. Passing trivial `CAmount` ref in every other places can result into ugly code. Also I am afraid the changes are becoming an overkil",https://github.com/bitcoin/bitcoin/pull/19063#discussion_r429667311,429667311,src/rpc/rawtransaction.cpp
MarcoFalke,2020-05-24 19:51:19,"It is possible to add optional return parameters by passing in a pointer. If the pointer is NULL (the default), it will be ignored. If the pointer points to something the return value will be written there.\nThus no caller will need to be updated because the return value is optional.\n\n\nExample draft:\n\n```cpp\nbool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTr",https://github.com/bitcoin/bitcoin/pull/19063#discussion_r429669316,429669316,src/rpc/rawtransaction.cpp
MarcoFalke,2020-05-26 10:59:10,I think the goal of `ATMPArgs` was that the function signatures don't ever need to change again. So I'd suggest to put the new arg there as well,https://github.com/bitcoin/bitcoin/pull/19063#discussion_r430328221,430328221,src/validation.cpp
