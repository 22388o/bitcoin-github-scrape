[
  {
    "sha": "458992b06d80eb568141f60a33d38e12e894e27a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NTg5OTJiMDZkODBlYjU2ODE0MWY2MGEzM2QzOGUxMmU4OTRlMjdh",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-05-05T05:07:47Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-05-18T22:13:49Z"
      },
      "message": "Prevent UB in DeleteLock() function",
      "tree": {
        "sha": "e4ceacb8391cccd46765ee41f4f75dc968afc7cc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e4ceacb8391cccd46765ee41f4f75dc968afc7cc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/458992b06d80eb568141f60a33d38e12e894e27a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl7DCJ8ACgkQQQEIES5+\nqB9uGw//fbNWh/IpbfdJE4LnjxQCFh318aL2QIxvS+EbuuWLa8wDegGjVZwnS1PW\nN3pV61jJxEFkuPL3lrOp5UZEle8sWKZkCsnh8siV8YXRG6w4FwJXTUas7b96OyeM\nD0He1ZEK6v1i5X3U688Sxjo0D9DDGqFBApP9sIw4a18c5uyJtPcYbtgMrIa431s6\nmM5geFzKq44uGur/ydlpIspcFIEgAPubMEKJNSQEuCF5IH9VYhlX6PEw5mxcPmtU\nHWsmCdOfkWA/EdnPKvJQa3vLIpBVwAOgunazIBIwbXjfWxjFIZiyFLFOIgbIP2kX\n7Xg9CeY6XO8uUMRlZ17Fls7pIqjKQ89y88WWVU0JqBWB6wcIVJF2SJEhUaDswjH3\nH4euZwndvVZZFaZjF4zSF5jUfdXkLY2+fVpIikEUtMa5TfPIzxZCCS+5iPkyiO1M\nStNGl5PtZPAmgfgvzgNPK733sRkGPEOHixhuLd45ZEVi9AiBYvnPx/kckMfzTPPO\nDnjkib17I2P8mptPxoHr1zXzbOvl1bVs7YqYA6D1NTBGShUN58uvcXjKj7gFDwY3\nVCd2rzE7O3LNe2owhRYKoY8NMh9LQj7jPcctj1o/3mPzyPXBstkKuNoEPUkEYfSs\neMuaG51LTIxmm+6geL5p59LlfqscjOB24syqNxAVsOLKH0sMJFI=\n=cXOW\n-----END PGP SIGNATURE-----",
        "payload": "tree e4ceacb8391cccd46765ee41f4f75dc968afc7cc\nparent ec79b5f86b22ad8f77c736f9bb76c2e4d7faeaa4\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1588655267 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1589840029 +0300\n\nPrevent UB in DeleteLock() function\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/458992b06d80eb568141f60a33d38e12e894e27a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/458992b06d80eb568141f60a33d38e12e894e27a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/458992b06d80eb568141f60a33d38e12e894e27a/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ec79b5f86b22ad8f77c736f9bb76c2e4d7faeaa4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec79b5f86b22ad8f77c736f9bb76c2e4d7faeaa4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ec79b5f86b22ad8f77c736f9bb76c2e4d7faeaa4"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 5,
      "deletions": 14
    },
    "files": [
      {
        "sha": "afb5ad51b18ddc687f94c233f16f3168502f89bb",
        "filename": "src/sync.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 14,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/458992b06d80eb568141f60a33d38e12e894e27a/src/sync.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/458992b06d80eb568141f60a33d38e12e894e27a/src/sync.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.cpp?ref=458992b06d80eb568141f60a33d38e12e894e27a",
        "patch": "@@ -78,21 +78,16 @@ typedef std::map<std::pair<void*, void*>, LockStack> LockOrders;\n typedef std::set<std::pair<void*, void*> > InvLockOrders;\n \n struct LockData {\n-    // Very ugly hack: as the global constructs and destructors run single\n-    // threaded, we use this boolean to know whether LockData still exists,\n-    // as DeleteLock can get called by global RecursiveMutex destructors\n-    // after LockData disappears.\n-    bool available;\n-    LockData() : available(true) {}\n-    ~LockData() { available = false; }\n-\n     LockOrders lockorders;\n     InvLockOrders invlockorders;\n     std::mutex dd_mutex;\n };\n+\n LockData& GetLockData() {\n-    static LockData lockdata;\n-    return lockdata;\n+    // This approach guarantees that the object is not destroyed until after its last use.\n+    // The operating system automatically reclaims all the memory in a program's heap when that program exits.\n+    static LockData& lock_data = *new LockData();\n+    return lock_data;\n }\n \n static thread_local LockStack g_lockstack;\n@@ -207,10 +202,6 @@ void AssertLockNotHeldInternal(const char* pszName, const char* pszFile, int nLi\n void DeleteLock(void* cs)\n {\n     LockData& lockdata = GetLockData();\n-    if (!lockdata.available) {\n-        // We're already shutting down.\n-        return;\n-    }\n     std::lock_guard<std::mutex> lock(lockdata.dd_mutex);\n     std::pair<void*, void*> item = std::make_pair(cs, nullptr);\n     LockOrders::iterator it = lockdata.lockorders.lower_bound(item);"
      }
    ]
  },
  {
    "sha": "8d8921abd35c3ac1b8ebacb11de8e1bbc7b28d66",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZDg5MjFhYmQzNWMzYWMxYjhlYmFjYjExZGU4ZTFiYmM3YjI4ZDY2",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-05-18T06:40:50Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-05-18T22:14:07Z"
      },
      "message": "refactor: Add LockStackItem type alias",
      "tree": {
        "sha": "8727fcdbbe78ff8c911299b1997fe5e77e0ce1a5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8727fcdbbe78ff8c911299b1997fe5e77e0ce1a5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8d8921abd35c3ac1b8ebacb11de8e1bbc7b28d66",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl7DCK8ACgkQQQEIES5+\nqB/+1Q/7BZ0PEdpOOk703gNAr+FSsP++GFp8xeP4RiXsAKo5hdhmsMIW/q//casn\nTemxti0XNNePRkHmKPt4SYz/Rb3nBi9k9DmkWaoEce9U9x5EkJw1a5VYNIzCtVIS\nErYo3uie2d6T9OoF5d1e50KIxqlP6yybjArOuxZX4gKdcIYRBDLBmsXpiBAtY17R\nyinWXU3NDbFzjqvc05zLOWTEwR9soUYBgvnAvr1jLtF/ZznOCiC4amTDfrrEQfQJ\nuu5aCIitr2jI4oS6b8bQrWGABd7oeEcT7Qc5fNfZhqWw6NPGSzs4QFgshPCdahIP\n8EIr2eeOjMcDkWC0H7tTSuffO/O1ncbtrjM8vqh/TuElGzW9RYl3YsQDODz4NGwf\nOYo21NW2v5ZSLny9vQuEUpeC8n2WKCvCCmo45+TqFwkMUDhav9WEy2k3ylTtBpor\nVhhNLcjGIAeyBVp81w7T8jCjfr6qk6GL5Wfxiqfc2WvBQYtRVesuK2e7hHqemU4X\nXoo7zuN0Yd+qG5qH2DFFr3Va8i4sYLjd3/a7z6kCjVvD2nIg9UONULeW9wMhgJAs\nJChg8htPKBfXOEUFmGsk+1pC4gnlBraDc350kwecagnyhStRCLjK0rfKfFB5gW1P\n6AKZs1A23HUL9rvbu/KQJMRqPLnF56tRhUsgGlMWQEG7FOtfNOo=\n=bzAM\n-----END PGP SIGNATURE-----",
        "payload": "tree 8727fcdbbe78ff8c911299b1997fe5e77e0ce1a5\nparent 458992b06d80eb568141f60a33d38e12e894e27a\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1589784050 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1589840047 +0300\n\nrefactor: Add LockStackItem type alias\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d8921abd35c3ac1b8ebacb11de8e1bbc7b28d66",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8d8921abd35c3ac1b8ebacb11de8e1bbc7b28d66",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d8921abd35c3ac1b8ebacb11de8e1bbc7b28d66/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "458992b06d80eb568141f60a33d38e12e894e27a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/458992b06d80eb568141f60a33d38e12e894e27a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/458992b06d80eb568141f60a33d38e12e894e27a"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 11,
      "deletions": 8
    },
    "files": [
      {
        "sha": "35137a4b9959355ef4cb4ce2047d422e5a47c63c",
        "filename": "src/sync.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 8,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d8921abd35c3ac1b8ebacb11de8e1bbc7b28d66/src/sync.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d8921abd35c3ac1b8ebacb11de8e1bbc7b28d66/src/sync.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.cpp?ref=8d8921abd35c3ac1b8ebacb11de8e1bbc7b28d66",
        "patch": "@@ -7,15 +7,17 @@\n #endif\n \n #include <sync.h>\n-#include <tinyformat.h>\n \n #include <logging.h>\n+#include <tinyformat.h>\n #include <util/strencodings.h>\n #include <util/threadnames.h>\n \n #include <map>\n #include <set>\n #include <system_error>\n+#include <utility>\n+#include <vector>\n \n #ifdef DEBUG_LOCKCONTENTION\n #if !defined(HAVE_THREAD_LOCAL)\n@@ -73,7 +75,8 @@ struct CLockLocation {\n     int sourceLine;\n };\n \n-typedef std::vector<std::pair<void*, CLockLocation> > LockStack;\n+using LockStackItem = std::pair<void*, CLockLocation>;\n+using LockStack = std::vector<LockStackItem>;\n typedef std::map<std::pair<void*, void*>, LockStack> LockOrders;\n typedef std::set<std::pair<void*, void*> > InvLockOrders;\n \n@@ -96,7 +99,7 @@ static void potential_deadlock_detected(const std::pair<void*, void*>& mismatch,\n {\n     LogPrintf(\"POTENTIAL DEADLOCK DETECTED\\n\");\n     LogPrintf(\"Previous lock order was:\\n\");\n-    for (const std::pair<void*, CLockLocation> & i : s2) {\n+    for (const LockStackItem& i : s2) {\n         if (i.first == mismatch.first) {\n             LogPrintf(\" (1)\"); /* Continued */\n         }\n@@ -106,7 +109,7 @@ static void potential_deadlock_detected(const std::pair<void*, void*>& mismatch,\n         LogPrintf(\" %s\\n\", i.second.ToString());\n     }\n     LogPrintf(\"Current lock order is:\\n\");\n-    for (const std::pair<void*, CLockLocation> & i : s1) {\n+    for (const LockStackItem& i : s1) {\n         if (i.first == mismatch.first) {\n             LogPrintf(\" (1)\"); /* Continued */\n         }\n@@ -129,7 +132,7 @@ static void push_lock(void* c, const CLockLocation& locklocation)\n \n     g_lockstack.push_back(std::make_pair(c, locklocation));\n \n-    for (const std::pair<void*, CLockLocation>& i : g_lockstack) {\n+    for (const LockStackItem& i : g_lockstack) {\n         if (i.first == c)\n             break;\n \n@@ -175,14 +178,14 @@ void LeaveCritical()\n std::string LocksHeld()\n {\n     std::string result;\n-    for (const std::pair<void*, CLockLocation>& i : g_lockstack)\n+    for (const LockStackItem& i : g_lockstack)\n         result += i.second.ToString() + std::string(\"\\n\");\n     return result;\n }\n \n void AssertLockHeldInternal(const char* pszName, const char* pszFile, int nLine, void* cs)\n {\n-    for (const std::pair<void*, CLockLocation>& i : g_lockstack)\n+    for (const LockStackItem& i : g_lockstack)\n         if (i.first == cs)\n             return;\n     tfm::format(std::cerr, \"Assertion failed: lock %s not held in %s:%i; locks held:\\n%s\", pszName, pszFile, nLine, LocksHeld());\n@@ -191,7 +194,7 @@ void AssertLockHeldInternal(const char* pszName, const char* pszFile, int nLine,\n \n void AssertLockNotHeldInternal(const char* pszName, const char* pszFile, int nLine, void* cs)\n {\n-    for (const std::pair<void*, CLockLocation>& i : g_lockstack) {\n+    for (const LockStackItem& i : g_lockstack) {\n         if (i.first == cs) {\n             tfm::format(std::cerr, \"Assertion failed: lock %s held in %s:%i; locks held:\\n%s\", pszName, pszFile, nLine, LocksHeld());\n             abort();"
      }
    ]
  },
  {
    "sha": "f511f61dda4e860079153d5e51d64658cc265283",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNTExZjYxZGRhNGU4NjAwNzkxNTNkNWU1MWQ2NDY1OGNjMjY1Mjgz",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-05-18T07:00:08Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-05-18T22:14:07Z"
      },
      "message": "refactor: Add LockPair type alias",
      "tree": {
        "sha": "61c2d7b9840ee92be945e81340e110ff542ecf7f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/61c2d7b9840ee92be945e81340e110ff542ecf7f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f511f61dda4e860079153d5e51d64658cc265283",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl7DCK8ACgkQQQEIES5+\nqB8qtg//Q0pp755joMqq2CL3nXN32QoBIsGdzk9ddT/1aXn2Y40K1paJwvhG/tje\nRZu1FjQUn8q8GdIRYtPm5Zsacg81YWx1tdSCO0kz8NLfVZ2q4BKvSn3Fla3YPk3Q\nKiGPRUBu+XjSuyPU9/b0HTKMXuOiErxSRowfbwAqkh0eRl8C08mn5mHUqBz28Q7D\nCtKX2p7q+iN0MM6TpImEapVTVian7my7B6mih2nOuG9vcm8atXt8I8NSxIxFUtxI\nL8Dfn8onVi3ZFKtgKsDpoxslKstDq0zV8I/gMlORYpbmQKgvNy+WJm8ypq8F0J9d\nZYXAJZKlWhJuzf/DgqW0fpYWvd9yrAnY7xjYEBCzhNqBXc40lWkj0+g/wA2R4vNC\nVNNldiMXXxuKxh2K9/vjJ4OSxrCzY76WP8TcSsvbFnvDIKCHxCG1C+B/HUOnNvyS\n5vajBNhW47HC8eyAMu4kdB2f08CzptDq8TpDiFbHhzXZrJUlZZdEKBWY54aEa12Y\nr29HvtvszW9HNhXqJlUOfnlVYGSbnQil21dxkvaIAcCXThMNzptQ6j4To2bhg1pN\nQO5gSwmF6iwhHzFio57lImBTz8BJRLFLinjLj1GcM6jqBQmo7hhEHvx0qgA//OyN\nyeOSD8DMGHp42Xk69+nRb5sxVUed2Pgf2RPpav/I1tPtVCR3UuM=\n=R6zK\n-----END PGP SIGNATURE-----",
        "payload": "tree 61c2d7b9840ee92be945e81340e110ff542ecf7f\nparent 8d8921abd35c3ac1b8ebacb11de8e1bbc7b28d66\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1589785208 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1589840047 +0300\n\nrefactor: Add LockPair type alias\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f511f61dda4e860079153d5e51d64658cc265283",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f511f61dda4e860079153d5e51d64658cc265283",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f511f61dda4e860079153d5e51d64658cc265283/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8d8921abd35c3ac1b8ebacb11de8e1bbc7b28d66",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d8921abd35c3ac1b8ebacb11de8e1bbc7b28d66",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8d8921abd35c3ac1b8ebacb11de8e1bbc7b28d66"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 10,
      "deletions": 8
    },
    "files": [
      {
        "sha": "cfbbb78c6b20b52c572d08383f5dc2dda964d1ce",
        "filename": "src/sync.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 8,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f511f61dda4e860079153d5e51d64658cc265283/src/sync.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f511f61dda4e860079153d5e51d64658cc265283/src/sync.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.cpp?ref=f511f61dda4e860079153d5e51d64658cc265283",
        "patch": "@@ -77,8 +77,10 @@ struct CLockLocation {\n \n using LockStackItem = std::pair<void*, CLockLocation>;\n using LockStack = std::vector<LockStackItem>;\n-typedef std::map<std::pair<void*, void*>, LockStack> LockOrders;\n-typedef std::set<std::pair<void*, void*> > InvLockOrders;\n+\n+using LockPair = std::pair<void*, void*>;\n+using LockOrders = std::map<LockPair, LockStack>;\n+using InvLockOrders = std::set<LockPair>;\n \n struct LockData {\n     LockOrders lockorders;\n@@ -95,7 +97,7 @@ LockData& GetLockData() {\n \n static thread_local LockStack g_lockstack;\n \n-static void potential_deadlock_detected(const std::pair<void*, void*>& mismatch, const LockStack& s1, const LockStack& s2)\n+static void potential_deadlock_detected(const LockPair& mismatch, const LockStack& s1, const LockStack& s2)\n {\n     LogPrintf(\"POTENTIAL DEADLOCK DETECTED\\n\");\n     LogPrintf(\"Previous lock order was:\\n\");\n@@ -136,12 +138,12 @@ static void push_lock(void* c, const CLockLocation& locklocation)\n         if (i.first == c)\n             break;\n \n-        std::pair<void*, void*> p1 = std::make_pair(i.first, c);\n+        const LockPair p1 = std::make_pair(i.first, c);\n         if (lockdata.lockorders.count(p1))\n             continue;\n         lockdata.lockorders.emplace(p1, g_lockstack);\n \n-        std::pair<void*, void*> p2 = std::make_pair(c, i.first);\n+        const LockPair p2 = std::make_pair(c, i.first);\n         lockdata.invlockorders.insert(p2);\n         if (lockdata.lockorders.count(p2))\n             potential_deadlock_detected(p1, lockdata.lockorders[p2], lockdata.lockorders[p1]);\n@@ -206,16 +208,16 @@ void DeleteLock(void* cs)\n {\n     LockData& lockdata = GetLockData();\n     std::lock_guard<std::mutex> lock(lockdata.dd_mutex);\n-    std::pair<void*, void*> item = std::make_pair(cs, nullptr);\n+    const LockPair item = std::make_pair(cs, nullptr);\n     LockOrders::iterator it = lockdata.lockorders.lower_bound(item);\n     while (it != lockdata.lockorders.end() && it->first.first == cs) {\n-        std::pair<void*, void*> invitem = std::make_pair(it->first.second, it->first.first);\n+        const LockPair invitem = std::make_pair(it->first.second, it->first.first);\n         lockdata.invlockorders.erase(invitem);\n         lockdata.lockorders.erase(it++);\n     }\n     InvLockOrders::iterator invit = lockdata.invlockorders.lower_bound(item);\n     while (invit != lockdata.invlockorders.end() && invit->first == cs) {\n-        std::pair<void*, void*> invinvitem = std::make_pair(invit->second, invit->first);\n+        const LockPair invinvitem = std::make_pair(invit->second, invit->first);\n         lockdata.lockorders.erase(invinvitem);\n         lockdata.invlockorders.erase(invit++);\n     }"
      }
    ]
  },
  {
    "sha": "58e6881bc5be002e8ddbc9b75422c0deae66a2df",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1OGU2ODgxYmM1YmUwMDJlOGRkYmM5Yjc1NDIyYzBkZWFlNjZhMmRm",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-05-18T14:45:46Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-05-18T22:14:07Z"
      },
      "message": "refactor: Refactor duplicated code into LockHeld()",
      "tree": {
        "sha": "3fbf313131c6feb325dd0110ee50de50bff0b933",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3fbf313131c6feb325dd0110ee50de50bff0b933"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/58e6881bc5be002e8ddbc9b75422c0deae66a2df",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl7DCK8ACgkQQQEIES5+\nqB+tGg//Qtv/yGuouzkLuHfOMZMnY2F4Sm5ZIY/I8yxgiM1cagzIgYNVET4HIzHS\nBdsGuq3UahHcqcRE8aC2tH49AiEN+VoE/BSBdj6yVbhw+8OKFbvnj42h/faHVDM6\nJ/+85KT0FW0E0wdZw8HJBr7tT9ZLbXM6UDtlfnfcXCTSyIMVPum3myCXh3Z6NgpF\nVNvOpuMQ/csith+6EJ+BJVgGOAoya9PCq8vyHbnk3lrKh700glSmFz4kelKUzoCi\nngcxIAL/TB+RfI8w1hyDzWpcvSNJj0cMx4zh2VaxDBxSTmHoL5xBagcaREHdYcGH\nP98Z+alVMneIQyX2j3ghHrosOfdKlPYiyzI7CoKnCns3800XMJSFkRqtF9WeLR/G\nUwhq64LUOn+bcBZsb1Swv3FzaxJu/YIpSGdj/zUOxz5bUmWUhpD6vkzrAhPiWm4h\nuj1a60QpkIpNY9Z314z0s+e8l5VpzpY6cAWo3M+eHgYf4j9Ys745nLewyAKacJov\nyXBfc5T01L7i60dbcLxFuJpfZ+nUntWjvW4t9vd0OBUY15Tp0skj9C+9FWZlcW24\niplEuVgrOwRdKjbcplhzKxmnQRxFvbPVo4HBd4WE294ENZsjN121PcJxK5ov+FH7\nRFv9CqKqxZrth5zEKz9y1iuseXJyFTybyeNZBsHiLEowb/HR1kg=\n=k6tb\n-----END PGP SIGNATURE-----",
        "payload": "tree 3fbf313131c6feb325dd0110ee50de50bff0b933\nparent f511f61dda4e860079153d5e51d64658cc265283\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1589813146 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1589840047 +0300\n\nrefactor: Refactor duplicated code into LockHeld()\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/58e6881bc5be002e8ddbc9b75422c0deae66a2df",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/58e6881bc5be002e8ddbc9b75422c0deae66a2df",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/58e6881bc5be002e8ddbc9b75422c0deae66a2df/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f511f61dda4e860079153d5e51d64658cc265283",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f511f61dda4e860079153d5e51d64658cc265283",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f511f61dda4e860079153d5e51d64658cc265283"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 13,
      "deletions": 9
    },
    "files": [
      {
        "sha": "5817e22c86ef0e24108882c3b316bb3d673c3aa9",
        "filename": "src/sync.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 9,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/58e6881bc5be002e8ddbc9b75422c0deae66a2df/src/sync.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/58e6881bc5be002e8ddbc9b75422c0deae66a2df/src/sync.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.cpp?ref=58e6881bc5be002e8ddbc9b75422c0deae66a2df",
        "patch": "@@ -185,23 +185,27 @@ std::string LocksHeld()\n     return result;\n }\n \n+static bool LockHeld(void* mutex)\n+{\n+    for (const LockStackItem& i : g_lockstack) {\n+        if (i.first == mutex) return true;\n+    }\n+\n+    return false;\n+}\n+\n void AssertLockHeldInternal(const char* pszName, const char* pszFile, int nLine, void* cs)\n {\n-    for (const LockStackItem& i : g_lockstack)\n-        if (i.first == cs)\n-            return;\n+    if (LockHeld(cs)) return;\n     tfm::format(std::cerr, \"Assertion failed: lock %s not held in %s:%i; locks held:\\n%s\", pszName, pszFile, nLine, LocksHeld());\n     abort();\n }\n \n void AssertLockNotHeldInternal(const char* pszName, const char* pszFile, int nLine, void* cs)\n {\n-    for (const LockStackItem& i : g_lockstack) {\n-        if (i.first == cs) {\n-            tfm::format(std::cerr, \"Assertion failed: lock %s held in %s:%i; locks held:\\n%s\", pszName, pszFile, nLine, LocksHeld());\n-            abort();\n-        }\n-    }\n+    if (!LockHeld(cs)) return;\n+    tfm::format(std::cerr, \"Assertion failed: lock %s held in %s:%i; locks held:\\n%s\", pszName, pszFile, nLine, LocksHeld());\n+    abort();\n }\n \n void DeleteLock(void* cs)"
      }
    ]
  },
  {
    "sha": "26c093a9957756f3743c2347fe0abd90f81159c4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNmMwOTNhOTk1Nzc1NmYzNzQzYzIzNDdmZTBhYmQ5MGY4MTE1OWM0",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-05-18T15:22:26Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-05-18T22:14:08Z"
      },
      "message": "Replace thread_local g_lockstack with a mutex-protected map\n\nThis change prevents UB in case of early g_lockstack destroying.\n\nCo-authored-by: Wladimir J. van der Laan <laanwj@protonmail.com>",
      "tree": {
        "sha": "4efc88a350ffe47d3935d255a14c05b28b07be7a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4efc88a350ffe47d3935d255a14c05b28b07be7a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/26c093a9957756f3743c2347fe0abd90f81159c4",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl7DCLAACgkQQQEIES5+\nqB+F2Q/9FoKcYpPei92mC1gWwsxi6UhgL7auIi3gfV//ixKwfshiwfL4gWIhmO5A\nwdhmAy7ARpYx4Uj8ekmoSuI9ol+52uuQdfjxvuCEf+jUMOiPfdrNbGDXRCCeP53S\nveFn70Mq5x79JtO1OtzfTZc19u7u/+6geUVIjbxZtbQyQz0EFzJW+iOZ3uG8TO73\nQbqAq4XhnsuQJAcCO5OUUzq7WUZaFYEEDHOynKlfHmFWHRin3YBoCLLm3HTL3xHe\nSQ6nqGvgueZouNGYyfaAgHP+WVOUvHE27B7NzmE59cL+1awuWnkmNXAna6wR7GN1\nHgvc/5fEb3GPivGOpliyfN7IZxNuRhAqdfc3trMtv1mflq4lv4HSB2N0iwoqsM1h\nqqDWY7lViD/66BPzvy6+JrjzkjE+bdF2Dkgcq86ujkaMRCRr/esM/VLTrzz5TBzj\nQJ+hm/wZflTR5nuZqDv4CMA1MWdE+lGw0tAwy2MtihNpFHD/0Keg+64rjpgmHGlL\nFFFWdcHZU9CHEIBjaPBgLRwP+WoMRiKRgTMCBM+h/qz5qks9UI9K/BU21XfCWDxZ\n9cn5mVqsPizd+eAibbQS1Fiq+wEJX7iK7jSAC2wNdUESmc7GR0+wxdP1Otgu1G3s\neV2Z1SA4St3/NzaWymkHJLzRLajOE6hmFFahxTUtVO6TomUCuTQ=\n=5mJE\n-----END PGP SIGNATURE-----",
        "payload": "tree 4efc88a350ffe47d3935d255a14c05b28b07be7a\nparent 58e6881bc5be002e8ddbc9b75422c0deae66a2df\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1589815346 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1589840048 +0300\n\nReplace thread_local g_lockstack with a mutex-protected map\n\nThis change prevents UB in case of early g_lockstack destroying.\n\nCo-authored-by: Wladimir J. van der Laan <laanwj@protonmail.com>\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26c093a9957756f3743c2347fe0abd90f81159c4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/26c093a9957756f3743c2347fe0abd90f81159c4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26c093a9957756f3743c2347fe0abd90f81159c4/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "58e6881bc5be002e8ddbc9b75422c0deae66a2df",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/58e6881bc5be002e8ddbc9b75422c0deae66a2df",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/58e6881bc5be002e8ddbc9b75422c0deae66a2df"
      }
    ],
    "stats": {
      "total": 51,
      "additions": 37,
      "deletions": 14
    },
    "files": [
      {
        "sha": "9b0878bbea23649ae63c657ee11c3cbd575b46c7",
        "filename": "src/sync.cpp",
        "status": "modified",
        "additions": 37,
        "deletions": 14,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/26c093a9957756f3743c2347fe0abd90f81159c4/src/sync.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/26c093a9957756f3743c2347fe0abd90f81159c4/src/sync.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.cpp?ref=26c093a9957756f3743c2347fe0abd90f81159c4",
        "patch": "@@ -16,6 +16,8 @@\n #include <map>\n #include <set>\n #include <system_error>\n+#include <thread>\n+#include <unordered_map>\n #include <utility>\n #include <vector>\n \n@@ -77,12 +79,14 @@ struct CLockLocation {\n \n using LockStackItem = std::pair<void*, CLockLocation>;\n using LockStack = std::vector<LockStackItem>;\n+using LockStacks = std::unordered_map<std::thread::id, LockStack>;\n \n using LockPair = std::pair<void*, void*>;\n using LockOrders = std::map<LockPair, LockStack>;\n using InvLockOrders = std::set<LockPair>;\n \n struct LockData {\n+    LockStacks m_lock_stacks;\n     LockOrders lockorders;\n     InvLockOrders invlockorders;\n     std::mutex dd_mutex;\n@@ -95,8 +99,6 @@ LockData& GetLockData() {\n     return lock_data;\n }\n \n-static thread_local LockStack g_lockstack;\n-\n static void potential_deadlock_detected(const LockPair& mismatch, const LockStack& s1, const LockStack& s2)\n {\n     LogPrintf(\"POTENTIAL DEADLOCK DETECTED\\n\");\n@@ -132,16 +134,16 @@ static void push_lock(void* c, const CLockLocation& locklocation)\n     LockData& lockdata = GetLockData();\n     std::lock_guard<std::mutex> lock(lockdata.dd_mutex);\n \n-    g_lockstack.push_back(std::make_pair(c, locklocation));\n-\n-    for (const LockStackItem& i : g_lockstack) {\n+    LockStack& lock_stack = lockdata.m_lock_stacks[std::this_thread::get_id()];\n+    lock_stack.emplace_back(c, locklocation);\n+    for (const LockStackItem& i : lock_stack) {\n         if (i.first == c)\n             break;\n \n         const LockPair p1 = std::make_pair(i.first, c);\n         if (lockdata.lockorders.count(p1))\n             continue;\n-        lockdata.lockorders.emplace(p1, g_lockstack);\n+        lockdata.lockorders.emplace(p1, lock_stack);\n \n         const LockPair p2 = std::make_pair(c, i.first);\n         lockdata.invlockorders.insert(p2);\n@@ -152,7 +154,14 @@ static void push_lock(void* c, const CLockLocation& locklocation)\n \n static void pop_lock()\n {\n-    g_lockstack.pop_back();\n+    LockData& lockdata = GetLockData();\n+    std::lock_guard<std::mutex> lock(lockdata.dd_mutex);\n+\n+    LockStack& lock_stack = lockdata.m_lock_stacks[std::this_thread::get_id()];\n+    lock_stack.pop_back();\n+    if (lock_stack.empty()) {\n+        lockdata.m_lock_stacks.erase(std::this_thread::get_id());\n+    }\n }\n \n void EnterCritical(const char* pszName, const char* pszFile, int nLine, void* cs, bool fTry)\n@@ -162,11 +171,17 @@ void EnterCritical(const char* pszName, const char* pszFile, int nLine, void* cs\n \n void CheckLastCritical(void* cs, std::string& lockname, const char* guardname, const char* file, int line)\n {\n-    if (!g_lockstack.empty()) {\n-        const auto& lastlock = g_lockstack.back();\n-        if (lastlock.first == cs) {\n-            lockname = lastlock.second.Name();\n-            return;\n+    {\n+        LockData& lockdata = GetLockData();\n+        std::lock_guard<std::mutex> lock(lockdata.dd_mutex);\n+\n+        const LockStack& lock_stack = lockdata.m_lock_stacks[std::this_thread::get_id()];\n+        if (!lock_stack.empty()) {\n+            const auto& lastlock = lock_stack.back();\n+            if (lastlock.first == cs) {\n+                lockname = lastlock.second.Name();\n+                return;\n+            }\n         }\n     }\n     throw std::system_error(EPERM, std::generic_category(), strprintf(\"%s:%s %s was not most recent critical section locked\", file, line, guardname));\n@@ -179,15 +194,23 @@ void LeaveCritical()\n \n std::string LocksHeld()\n {\n+    LockData& lockdata = GetLockData();\n+    std::lock_guard<std::mutex> lock(lockdata.dd_mutex);\n+\n+    const LockStack& lock_stack = lockdata.m_lock_stacks[std::this_thread::get_id()];\n     std::string result;\n-    for (const LockStackItem& i : g_lockstack)\n+    for (const LockStackItem& i : lock_stack)\n         result += i.second.ToString() + std::string(\"\\n\");\n     return result;\n }\n \n static bool LockHeld(void* mutex)\n {\n-    for (const LockStackItem& i : g_lockstack) {\n+    LockData& lockdata = GetLockData();\n+    std::lock_guard<std::mutex> lock(lockdata.dd_mutex);\n+\n+    const LockStack& lock_stack = lockdata.m_lock_stacks[std::this_thread::get_id()];\n+    for (const LockStackItem& i : lock_stack) {\n         if (i.first == mutex) return true;\n     }\n "
      }
    ]
  },
  {
    "sha": "65c589e45e8b8914698a0fd25cd5aafdda30869c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NWM1ODllNDVlOGI4OTE0Njk4YTBmZDI1Y2Q1YWFmZGRhMzA4Njlj",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-05-20T17:16:41Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-05-20T17:16:41Z"
      },
      "message": "Convert Qt to new serialization",
      "tree": {
        "sha": "5b99c6e0e4419a1f1d51ee4262028ab681ba9a55",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5b99c6e0e4419a1f1d51ee4262028ab681ba9a55"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/65c589e45e8b8914698a0fd25cd5aafdda30869c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65c589e45e8b8914698a0fd25cd5aafdda30869c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/65c589e45e8b8914698a0fd25cd5aafdda30869c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65c589e45e8b8914698a0fd25cd5aafdda30869c/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "448bdff26307981b7e32ba5610dad6674c1fe46d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/448bdff26307981b7e32ba5610dad6674c1fe46d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/448bdff26307981b7e32ba5610dad6674c1fe46d"
      }
    ],
    "stats": {
      "total": 51,
      "additions": 17,
      "deletions": 34
    },
    "files": [
      {
        "sha": "c0bd3461bb4108647a42e756f7a7e60d9c9ba616",
        "filename": "src/qt/recentrequeststablemodel.h",
        "status": "modified",
        "additions": 5,
        "deletions": 13,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65c589e45e8b8914698a0fd25cd5aafdda30869c/src/qt/recentrequeststablemodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65c589e45e8b8914698a0fd25cd5aafdda30869c/src/qt/recentrequeststablemodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/recentrequeststablemodel.h?ref=65c589e45e8b8914698a0fd25cd5aafdda30869c",
        "patch": "@@ -24,19 +24,11 @@ class RecentRequestEntry\n     QDateTime date;\n     SendCoinsRecipient recipient;\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        unsigned int nDate = date.toTime_t();\n-\n-        READWRITE(this->nVersion);\n-        READWRITE(id);\n-        READWRITE(nDate);\n-        READWRITE(recipient);\n-\n-        if (ser_action.ForRead())\n-            date = QDateTime::fromTime_t(nDate);\n+    SERIALIZE_METHODS(RecentRequestEntry, obj) {\n+        unsigned int date_timet;\n+        SER_WRITE(obj, date_timet = obj.date.toTime_t());\n+        READWRITE(obj.nVersion, obj.id, date_timet, obj.recipient);\n+        SER_READ(obj, obj.date = QDateTime::fromTime_t(date_timet));\n     }\n };\n "
      },
      {
        "sha": "6619faf417f6cf688e3731d5e8f2330c3ecb9a0e",
        "filename": "src/qt/sendcoinsrecipient.h",
        "status": "modified",
        "additions": 12,
        "deletions": 21,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65c589e45e8b8914698a0fd25cd5aafdda30869c/src/qt/sendcoinsrecipient.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65c589e45e8b8914698a0fd25cd5aafdda30869c/src/qt/sendcoinsrecipient.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsrecipient.h?ref=65c589e45e8b8914698a0fd25cd5aafdda30869c",
        "patch": "@@ -44,30 +44,21 @@ class SendCoinsRecipient\n     static const int CURRENT_VERSION = 1;\n     int nVersion;\n \n-    ADD_SERIALIZE_METHODS;\n+    SERIALIZE_METHODS(SendCoinsRecipient, obj)\n+    {\n+        std::string address_str, label_str, message_str, auth_merchant_str;\n \n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        std::string sAddress = address.toStdString();\n-        std::string sLabel = label.toStdString();\n-        std::string sMessage = message.toStdString();\n-        std::string sAuthenticatedMerchant = authenticatedMerchant.toStdString();\n+        SER_WRITE(obj, address_str = obj.address.toStdString());\n+        SER_WRITE(obj, label_str = obj.label.toStdString());\n+        SER_WRITE(obj, message_str = obj.message.toStdString());\n+        SER_WRITE(obj, auth_merchant_str = obj.authenticatedMerchant.toStdString());\n \n-        READWRITE(this->nVersion);\n-        READWRITE(sAddress);\n-        READWRITE(sLabel);\n-        READWRITE(amount);\n-        READWRITE(sMessage);\n-        READWRITE(sPaymentRequest);\n-        READWRITE(sAuthenticatedMerchant);\n+        READWRITE(obj.nVersion, address_str, label_str, obj.amount, message_str, obj.sPaymentRequest, auth_merchant_str);\n \n-        if (ser_action.ForRead())\n-        {\n-            address = QString::fromStdString(sAddress);\n-            label = QString::fromStdString(sLabel);\n-            message = QString::fromStdString(sMessage);\n-            authenticatedMerchant = QString::fromStdString(sAuthenticatedMerchant);\n-        }\n+        SER_READ(obj, obj.address = QString::fromStdString(address_str));\n+        SER_READ(obj, obj.label = QString::fromStdString(label_str));\n+        SER_READ(obj, obj.message = QString::fromStdString(message_str));\n+        SER_READ(obj, obj.authenticatedMerchant = QString::fromStdString(auth_merchant_str));\n     }\n };\n "
      }
    ]
  },
  {
    "sha": "c57f03ce1741b38af448bec7b22ab9f8ac21f067",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNTdmMDNjZTE3NDFiMzhhZjQ0OGJlYzdiMjJhYjlmOGFjMjFmMDY3",
    "commit": {
      "author": {
        "name": "Calvin Kim",
        "email": "calvin@kcalvinalvin.info",
        "date": "2020-05-18T08:14:10Z"
      },
      "committer": {
        "name": "Calvin Kim",
        "email": "calvin@kcalvinalvin.info",
        "date": "2020-05-21T16:40:31Z"
      },
      "message": "refactor: Replace const char* to std::string\n\nSome functions should be returning std::string instead of const char*.\nThis commit changes that.",
      "tree": {
        "sha": "fc53ee2ad75995ae01f998dca70574754ee91f7b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fc53ee2ad75995ae01f998dca70574754ee91f7b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c57f03ce1741b38af448bec7b22ab9f8ac21f067",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c57f03ce1741b38af448bec7b22ab9f8ac21f067",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c57f03ce1741b38af448bec7b22ab9f8ac21f067",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c57f03ce1741b38af448bec7b22ab9f8ac21f067/comments",
    "author": {
      "login": "kcalvinalvin",
      "id": 37185887,
      "node_id": "MDQ6VXNlcjM3MTg1ODg3",
      "avatar_url": "https://avatars.githubusercontent.com/u/37185887?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kcalvinalvin",
      "html_url": "https://github.com/kcalvinalvin",
      "followers_url": "https://api.github.com/users/kcalvinalvin/followers",
      "following_url": "https://api.github.com/users/kcalvinalvin/following{/other_user}",
      "gists_url": "https://api.github.com/users/kcalvinalvin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kcalvinalvin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kcalvinalvin/subscriptions",
      "organizations_url": "https://api.github.com/users/kcalvinalvin/orgs",
      "repos_url": "https://api.github.com/users/kcalvinalvin/repos",
      "events_url": "https://api.github.com/users/kcalvinalvin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kcalvinalvin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kcalvinalvin",
      "id": 37185887,
      "node_id": "MDQ6VXNlcjM3MTg1ODg3",
      "avatar_url": "https://avatars.githubusercontent.com/u/37185887?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kcalvinalvin",
      "html_url": "https://github.com/kcalvinalvin",
      "followers_url": "https://api.github.com/users/kcalvinalvin/followers",
      "following_url": "https://api.github.com/users/kcalvinalvin/following{/other_user}",
      "gists_url": "https://api.github.com/users/kcalvinalvin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kcalvinalvin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kcalvinalvin/subscriptions",
      "organizations_url": "https://api.github.com/users/kcalvinalvin/orgs",
      "repos_url": "https://api.github.com/users/kcalvinalvin/repos",
      "events_url": "https://api.github.com/users/kcalvinalvin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kcalvinalvin/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dc5333d31f280e09bb1e8cdacfbe842f4ab9e69b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc5333d31f280e09bb1e8cdacfbe842f4ab9e69b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dc5333d31f280e09bb1e8cdacfbe842f4ab9e69b"
      }
    ],
    "stats": {
      "total": 37,
      "additions": 24,
      "deletions": 13
    },
    "files": [
      {
        "sha": "9bd1959a99617e428fe4cd5c7989e8b1dccd72c6",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c57f03ce1741b38af448bec7b22ab9f8ac21f067/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c57f03ce1741b38af448bec7b22ab9f8ac21f067/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=c57f03ce1741b38af448bec7b22ab9f8ac21f067",
        "patch": "@@ -20,6 +20,7 @@\n #include <functional>\n #include <memory>\n #include <stdio.h>\n+#include <string>\n #include <tuple>\n \n #include <event2/buffer.h>\n@@ -157,7 +158,7 @@ struct HTTPReply\n     std::string body;\n };\n \n-static const char *http_errorstring(int code)\n+static std::string http_errorstring(int code)\n {\n     switch(code) {\n #if LIBEVENT_VERSION_NUMBER >= 0x02010300"
      },
      {
        "sha": "1c0a8a096dcc1480e38f4518dfb72408b3d5084a",
        "filename": "src/core_read.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c57f03ce1741b38af448bec7b22ab9f8ac21f067/src/core_read.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c57f03ce1741b38af448bec7b22ab9f8ac21f067/src/core_read.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_read.cpp?ref=c57f03ce1741b38af448bec7b22ab9f8ac21f067",
        "patch": "@@ -19,6 +19,7 @@\n #include <boost/algorithm/string/split.hpp>\n \n #include <algorithm>\n+#include <string>\n \n CScript ParseScript(const std::string& s)\n {\n@@ -34,10 +35,9 @@ CScript ParseScript(const std::string& s)\n             if (op < OP_NOP && op != OP_RESERVED)\n                 continue;\n \n-            const char* name = GetOpName(static_cast<opcodetype>(op));\n-            if (strcmp(name, \"OP_UNKNOWN\") == 0)\n+            std::string strName = GetOpName(static_cast<opcodetype>(op));\n+            if (strName == \"OP_UNKNOWN\")\n                 continue;\n-            std::string strName(name);\n             mapOpNames[strName] = static_cast<opcodetype>(op);\n             // Convenience: OP_ADD and just ADD are both recognized:\n             boost::algorithm::replace_first(strName, \"OP_\", \"\");"
      },
      {
        "sha": "92c6fe7785fc3ac34c806b4a672a3af79debf5b4",
        "filename": "src/script/script.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c57f03ce1741b38af448bec7b22ab9f8ac21f067/src/script/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c57f03ce1741b38af448bec7b22ab9f8ac21f067/src/script/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.cpp?ref=c57f03ce1741b38af448bec7b22ab9f8ac21f067",
        "patch": "@@ -7,7 +7,9 @@\n \n #include <util/strencodings.h>\n \n-const char* GetOpName(opcodetype opcode)\n+#include <string>\n+\n+std::string GetOpName(opcodetype opcode)\n {\n     switch (opcode)\n     {"
      },
      {
        "sha": "dab8035fcd113894cef1224bef412897126e8d10",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c57f03ce1741b38af448bec7b22ab9f8ac21f067/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c57f03ce1741b38af448bec7b22ab9f8ac21f067/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=c57f03ce1741b38af448bec7b22ab9f8ac21f067",
        "patch": "@@ -193,7 +193,7 @@ enum opcodetype\n // Maximum value that an opcode can be\n static const unsigned int MAX_OPCODE = OP_NOP10;\n \n-const char* GetOpName(opcodetype opcode);\n+std::string GetOpName(opcodetype opcode);\n \n class scriptnum_error : public std::runtime_error\n {"
      },
      {
        "sha": "69e14803f1b5d48805c14991e180b05b39f65b3d",
        "filename": "src/script/script_error.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c57f03ce1741b38af448bec7b22ab9f8ac21f067/src/script/script_error.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c57f03ce1741b38af448bec7b22ab9f8ac21f067/src/script/script_error.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script_error.cpp?ref=c57f03ce1741b38af448bec7b22ab9f8ac21f067",
        "patch": "@@ -5,7 +5,9 @@\n \n #include <script/script_error.h>\n \n-const char* ScriptErrorString(const ScriptError serror)\n+#include <string>\n+\n+std::string ScriptErrorString(const ScriptError serror)\n {\n     switch (serror)\n     {"
      },
      {
        "sha": "2978c147e144277190604345617df95e52d47e4c",
        "filename": "src/script/script_error.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c57f03ce1741b38af448bec7b22ab9f8ac21f067/src/script/script_error.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c57f03ce1741b38af448bec7b22ab9f8ac21f067/src/script/script_error.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script_error.h?ref=c57f03ce1741b38af448bec7b22ab9f8ac21f067",
        "patch": "@@ -6,6 +6,8 @@\n #ifndef BITCOIN_SCRIPT_SCRIPT_ERROR_H\n #define BITCOIN_SCRIPT_SCRIPT_ERROR_H\n \n+#include <string>\n+\n typedef enum ScriptError_t\n {\n     SCRIPT_ERR_OK = 0,\n@@ -73,6 +75,6 @@ typedef enum ScriptError_t\n \n #define SCRIPT_ERR_LAST SCRIPT_ERR_ERROR_COUNT\n \n-const char* ScriptErrorString(const ScriptError error);\n+std::string ScriptErrorString(const ScriptError error);\n \n #endif // BITCOIN_SCRIPT_SCRIPT_ERROR_H"
      },
      {
        "sha": "c90c2c24a01fb66506f73086548b30fc3891408d",
        "filename": "src/script/standard.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c57f03ce1741b38af448bec7b22ab9f8ac21f067/src/script/standard.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c57f03ce1741b38af448bec7b22ab9f8ac21f067/src/script/standard.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.cpp?ref=c57f03ce1741b38af448bec7b22ab9f8ac21f067",
        "patch": "@@ -9,6 +9,8 @@\n #include <pubkey.h>\n #include <script/script.h>\n \n+#include <string>\n+\n typedef std::vector<unsigned char> valtype;\n \n bool fAcceptDatacarrier = DEFAULT_ACCEPT_DATACARRIER;\n@@ -25,7 +27,7 @@ WitnessV0ScriptHash::WitnessV0ScriptHash(const CScript& in)\n     CSHA256().Write(in.data(), in.size()).Finalize(begin());\n }\n \n-const char* GetTxnOutputType(txnouttype t)\n+std::string GetTxnOutputType(txnouttype t)\n {\n     switch (t)\n     {\n@@ -39,7 +41,7 @@ const char* GetTxnOutputType(txnouttype t)\n     case TX_WITNESS_V0_SCRIPTHASH: return \"witness_v0_scripthash\";\n     case TX_WITNESS_UNKNOWN: return \"witness_unknown\";\n     }\n-    return nullptr;\n+    assert(false);\n }\n \n static bool MatchPayToPubkey(const CScript& script, valtype& pubkey)"
      },
      {
        "sha": "42f20e64644a45b5cd3dfac5e1065174eca30e4b",
        "filename": "src/script/standard.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c57f03ce1741b38af448bec7b22ab9f8ac21f067/src/script/standard.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c57f03ce1741b38af448bec7b22ab9f8ac21f067/src/script/standard.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.h?ref=c57f03ce1741b38af448bec7b22ab9f8ac21f067",
        "patch": "@@ -11,6 +11,8 @@\n \n #include <boost/variant.hpp>\n \n+#include <string>\n+\n \n static const bool DEFAULT_ACCEPT_DATACARRIER = true;\n \n@@ -146,7 +148,7 @@ typedef boost::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash,\n bool IsValidDestination(const CTxDestination& dest);\n \n /** Get the name of a txnouttype as a C string, or nullptr if unknown. */\n-const char* GetTxnOutputType(txnouttype t);\n+std::string GetTxnOutputType(txnouttype t);\n \n /**\n  * Parse a scriptPubKey and identify script type for standard scripts. If"
      },
      {
        "sha": "cb3ae290d107b0a3e912e6f67f96a94781e424f5",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c57f03ce1741b38af448bec7b22ab9f8ac21f067/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c57f03ce1741b38af448bec7b22ab9f8ac21f067/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=c57f03ce1741b38af448bec7b22ab9f8ac21f067",
        "patch": "@@ -102,7 +102,7 @@ static ScriptErrorDesc script_errors[]={\n     {SCRIPT_ERR_SIG_FINDANDDELETE, \"SIG_FINDANDDELETE\"},\n };\n \n-static const char *FormatScriptError(ScriptError_t err)\n+static std::string FormatScriptError(ScriptError_t err)\n {\n     for (unsigned int i=0; i<ARRAYLEN(script_errors); ++i)\n         if (script_errors[i].err == err)\n@@ -134,7 +134,7 @@ void DoTest(const CScript& scriptPubKey, const CScript& scriptSig, const CScript\n     CMutableTransaction tx = BuildSpendingTransaction(scriptSig, scriptWitness, txCredit);\n     CMutableTransaction tx2 = tx;\n     BOOST_CHECK_MESSAGE(VerifyScript(scriptSig, scriptPubKey, &scriptWitness, flags, MutableTransactionSignatureChecker(&tx, 0, txCredit.vout[0].nValue), &err) == expect, message);\n-    BOOST_CHECK_MESSAGE(err == scriptError, std::string(FormatScriptError(err)) + \" where \" + std::string(FormatScriptError((ScriptError_t)scriptError)) + \" expected: \" + message);\n+    BOOST_CHECK_MESSAGE(err == scriptError, FormatScriptError(err) + \" where \" + FormatScriptError((ScriptError_t)scriptError) + \" expected: \" + message);\n \n     // Verify that removing flags from a passing test or adding flags to a failing test does not change the result.\n     for (int i = 0; i < 16; ++i) {"
      }
    ]
  },
  {
    "sha": "90eb027204f5a9d7c00fa97d4112243bd37a9012",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MGViMDI3MjA0ZjVhOWQ3YzAwZmE5N2Q0MTEyMjQzYmQzN2E5MDEy",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-05-22T12:45:21Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-05-22T12:45:21Z"
      },
      "message": "doc: Add and fix comments about never destroyed objects",
      "tree": {
        "sha": "48f59f69118a294203762b72481d6c61e3d6c25f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/48f59f69118a294203762b72481d6c61e3d6c25f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl7HyWEACgkQQQEIES5+\nqB/+lRAAmTmeVmQxS8ER0rH/9BqsjEXCRrSBq4p9kJ+ZTDjArwxk3dn9luUx5exM\nR2P6tgFXUh0ukJxvFyAOLxXBNDAwJ0Q9f6ui1ta1Y7jo1d6rY8khJUlwfVgqj1Sy\n8jP+ggewmFim2L/OT5l30aqs+E8LNc8V5m7x5uJmMIm+YlIaapOvOKm/M1+lTZeq\nn4F8XSJwhhkkF8BQEgk1SbZ81zhueXFnZ/hutWs5UFvkUnnCB/FrjUg8kmsYqr94\nLI3ANZij3Cb43tw8HQgP33cSxyVHQ/nFGBIZp3JsP3/9uOHsOR/78GjQWikOJUVM\nGH0gNJZAYPcSca4cS/WswN029jTE7+6S7yBUEwwiEaTRgJq5ZJxSve8yHhxBIB24\nholmcet1x2PJ3g9u40iPbkLQhRqo/Fi+e0sxwUaGgHhMeOwqOWNRfYD8UFOpZbBD\n8rSfWPRGK7DIaTg+VfFt1dRLZNXsVSChdt+Otp/Qv/bYNIW3nx2Q/WAVqi23Rj32\nOgCLDW5227rY15rH48ZgXWXbqwkVEA2fZlmzCRm6rAQPkgtUHC5waVgP6lo1nvoH\ngQc1e2Cw9Ex04laH6DhbKI9esHOuRNqwpoL++wlNU3OpizUHkbi6mPhRTV9G8Hms\nGJ8mJe1dveVz6paco+0c8V8be7cCSa4WD0wNDJ5yrxHFca5ynj4=\n=AerY\n-----END PGP SIGNATURE-----",
        "payload": "tree 48f59f69118a294203762b72481d6c61e3d6c25f\nparent 26c093a9957756f3743c2347fe0abd90f81159c4\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1590151521 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1590151521 +0300\n\ndoc: Add and fix comments about never destroyed objects\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90eb027204f5a9d7c00fa97d4112243bd37a9012",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/90eb027204f5a9d7c00fa97d4112243bd37a9012",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90eb027204f5a9d7c00fa97d4112243bd37a9012/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "26c093a9957756f3743c2347fe0abd90f81159c4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26c093a9957756f3743c2347fe0abd90f81159c4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/26c093a9957756f3743c2347fe0abd90f81159c4"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 4,
      "deletions": 2
    },
    "files": [
      {
        "sha": "56c44ae1ea4aa2f4510d558bd63a123bc8e524f9",
        "filename": "src/logging.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/90eb027204f5a9d7c00fa97d4112243bd37a9012/src/logging.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/90eb027204f5a9d7c00fa97d4112243bd37a9012/src/logging.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/logging.cpp?ref=90eb027204f5a9d7c00fa97d4112243bd37a9012",
        "patch": "@@ -22,8 +22,8 @@ BCLog::Logger& LogInstance()\n  * access the logger. When the shutdown sequence is fully audited and tested,\n  * explicit destruction of these objects can be implemented by changing this\n  * from a raw pointer to a std::unique_ptr.\n- * Since the destructor is never called, the logger and all its members must\n- * have a trivial destructor.\n+ * Since the ~Logger() destructor is never called, the Logger class and all\n+ * its subclasses must have implicitly-defined destructors.\n  *\n  * This method of initialization was originally introduced in\n  * ee3374234c60aba2cc4c5cd5cac1c0aefc2d817c."
      },
      {
        "sha": "c3312b5a00ed9578a86685d23d04f1b7f81dd342",
        "filename": "src/sync.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/90eb027204f5a9d7c00fa97d4112243bd37a9012/src/sync.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/90eb027204f5a9d7c00fa97d4112243bd37a9012/src/sync.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.cpp?ref=90eb027204f5a9d7c00fa97d4112243bd37a9012",
        "patch": "@@ -95,6 +95,8 @@ struct LockData {\n LockData& GetLockData() {\n     // This approach guarantees that the object is not destroyed until after its last use.\n     // The operating system automatically reclaims all the memory in a program's heap when that program exits.\n+    // Since the ~LockData() destructor is never called, the LockData class and all\n+    // its subclasses must have implicitly-defined destructors.\n     static LockData& lock_data = *new LockData();\n     return lock_data;\n }"
      }
    ]
  },
  {
    "sha": "3bdc7c2d3977a7864aacea80bffc4df7f37cac51",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYmRjN2MyZDM5NzdhNzg2NGFhY2VhODBiZmZjNGRmN2YzN2NhYzUx",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-05-21T18:36:42Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-05-22T15:59:58Z"
      },
      "message": "[doc] Add comment for m_headers_cache",
      "tree": {
        "sha": "92493e559b52c1fb7042ed619bfe4c78e9090360",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/92493e559b52c1fb7042ed619bfe4c78e9090360"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3bdc7c2d3977a7864aacea80bffc4df7f37cac51",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3bdc7c2d3977a7864aacea80bffc4df7f37cac51",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3bdc7c2d3977a7864aacea80bffc4df7f37cac51",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3bdc7c2d3977a7864aacea80bffc4df7f37cac51/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4479eb04d92806633aa3ad3e413f6a7166863638",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4479eb04d92806633aa3ad3e413f6a7166863638",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4479eb04d92806633aa3ad3e413f6a7166863638"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "317f8c0e40fe71019b05d815d02e0b07cd768ef3",
        "filename": "src/index/blockfilterindex.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3bdc7c2d3977a7864aacea80bffc4df7f37cac51/src/index/blockfilterindex.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3bdc7c2d3977a7864aacea80bffc4df7f37cac51/src/index/blockfilterindex.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/blockfilterindex.h?ref=3bdc7c2d3977a7864aacea80bffc4df7f37cac51",
        "patch": "@@ -39,6 +39,7 @@ class BlockFilterIndex final : public BaseIndex\n     size_t WriteFilterToDisk(FlatFilePos& pos, const BlockFilter& filter);\n \n     Mutex m_cs_headers_cache;\n+    /** cache of block hash to filter header, to avoid disk access when responding to getcfcheckpt. */\n     std::unordered_map<uint256, uint256, FilterHeaderHasher> m_headers_cache GUARDED_BY(m_cs_headers_cache);\n \n protected:"
      }
    ]
  },
  {
    "sha": "f6b58c150686e90bc4952976e488b1605f3ae02a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNmI1OGMxNTA2ODZlOTBiYzQ5NTI5NzZlNDg4YjE2MDVmM2FlMDJh",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2020-05-04T23:47:26Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-05-22T15:59:58Z"
      },
      "message": "[net processing] Message handling for getcfheaders.\n\nif -peerblockfilters is configured, handle requests for cfheaders.",
      "tree": {
        "sha": "0780cb0a07b09dd5d937cd41c974feb3a3efc1e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0780cb0a07b09dd5d937cd41c974feb3a3efc1e2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f6b58c150686e90bc4952976e488b1605f3ae02a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f6b58c150686e90bc4952976e488b1605f3ae02a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f6b58c150686e90bc4952976e488b1605f3ae02a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f6b58c150686e90bc4952976e488b1605f3ae02a/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3bdc7c2d3977a7864aacea80bffc4df7f37cac51",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3bdc7c2d3977a7864aacea80bffc4df7f37cac51",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3bdc7c2d3977a7864aacea80bffc4df7f37cac51"
      }
    ],
    "stats": {
      "total": 105,
      "additions": 100,
      "deletions": 5
    },
    "files": [
      {
        "sha": "9f7bde89cfd509529538a15de6141f08491029df",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 83,
        "deletions": 3,
        "changes": 86,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f6b58c150686e90bc4952976e488b1605f3ae02a/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f6b58c150686e90bc4952976e488b1605f3ae02a/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=f6b58c150686e90bc4952976e488b1605f3ae02a",
        "patch": "@@ -129,6 +129,8 @@ static constexpr unsigned int INVENTORY_BROADCAST_MAX = 7 * INVENTORY_BROADCAST_\n static constexpr unsigned int AVG_FEEFILTER_BROADCAST_INTERVAL = 10 * 60;\n /** Maximum feefilter broadcast delay after significant change. */\n static constexpr unsigned int MAX_FEEFILTER_CHANGE_DELAY = 5 * 60;\n+/** Maximum number of cf hashes that may be requested with one getcfheaders. See BIP 157. */\n+static constexpr uint32_t MAX_GETCFHEADERS_SIZE = 2000;\n \n struct COrphanTx {\n     // When modifying, adapt the copy of this definition in tests/DoS_tests.\n@@ -1983,14 +1985,16 @@ void static ProcessOrphanTx(CConnman* connman, CTxMemPool& mempool, std::set<uin\n  * @param[in]   pfrom           The peer that we received the request from\n  * @param[in]   chain_params    Chain parameters\n  * @param[in]   filter_type     The filter type the request is for. Must be basic filters.\n+ * @param[in]   start_height    The start height for the request\n  * @param[in]   stop_hash       The stop_hash for the request\n+ * @param[in]   max_height_diff The maximum number of items permitted to request, as specified in BIP 157\n  * @param[out]  stop_index      The CBlockIndex for the stop_hash block, if the request can be serviced.\n  * @param[out]  filter_index    The filter index, if the request can be serviced.\n  * @return                      True if the request can be serviced.\n  */\n static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n-                                      BlockFilterType filter_type,\n-                                      const uint256& stop_hash,\n+                                      BlockFilterType filter_type, uint32_t start_height,\n+                                      const uint256& stop_hash, uint32_t max_height_diff,\n                                       const CBlockIndex*& stop_index,\n                                       BlockFilterIndex*& filter_index)\n {\n@@ -2017,6 +2021,21 @@ static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_pa\n         }\n     }\n \n+    uint32_t stop_height = stop_index->nHeight;\n+    if (start_height > stop_height) {\n+        LogPrint(BCLog::NET, \"peer %d sent invalid getcfilters/getcfheaders with \" /* Continued */\n+                 \"start height %d and stop height %d\\n\",\n+                 pfrom->GetId(), start_height, stop_height);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+    if (stop_height - start_height >= max_height_diff) {\n+        LogPrint(BCLog::NET, \"peer %d requested too many cfilters/cfheaders: %d / %d\\n\",\n+                 pfrom->GetId(), stop_height - start_height + 1, max_height_diff);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n     filter_index = GetBlockFilterIndex(filter_type);\n     if (!filter_index) {\n         LogPrint(BCLog::NET, \"Filter index for supported type %s not found\\n\", BlockFilterTypeName(filter_type));\n@@ -2026,6 +2045,61 @@ static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_pa\n     return true;\n }\n \n+/**\n+ * Handle a cfheaders request.\n+ *\n+ * May disconnect from the peer in the case of a bad request.\n+ *\n+ * @param[in]   pfrom           The peer that we received the request from\n+ * @param[in]   vRecv           The raw message received\n+ * @param[in]   chain_params    Chain parameters\n+ * @param[in]   connman         Pointer to the connection manager\n+ */\n+static void ProcessGetCFHeaders(CNode* pfrom, CDataStream& vRecv, const CChainParams& chain_params,\n+                                CConnman* connman)\n+{\n+    uint8_t filter_type_ser;\n+    uint32_t start_height;\n+    uint256 stop_hash;\n+\n+    vRecv >> filter_type_ser >> start_height >> stop_hash;\n+\n+    const BlockFilterType filter_type = static_cast<BlockFilterType>(filter_type_ser);\n+\n+    const CBlockIndex* stop_index;\n+    BlockFilterIndex* filter_index;\n+    if (!PrepareBlockFilterRequest(pfrom, chain_params, filter_type, start_height, stop_hash,\n+                                   MAX_GETCFHEADERS_SIZE, stop_index, filter_index)) {\n+        return;\n+    }\n+\n+    uint256 prev_header;\n+    if (start_height > 0) {\n+        const CBlockIndex* const prev_block =\n+            stop_index->GetAncestor(static_cast<int>(start_height - 1));\n+        if (!filter_index->LookupFilterHeader(prev_block, prev_header)) {\n+            LogPrint(BCLog::NET, \"Failed to find block filter header in index: filter_type=%s, block_hash=%s\\n\",\n+                         BlockFilterTypeName(filter_type), prev_block->GetBlockHash().ToString());\n+            return;\n+        }\n+    }\n+\n+    std::vector<uint256> filter_hashes;\n+    if (!filter_index->LookupFilterHashRange(start_height, stop_index, filter_hashes)) {\n+        LogPrint(BCLog::NET, \"Failed to find block filter hashes in index: filter_type=%s, start_height=%d, stop_hash=%s\\n\",\n+                     BlockFilterTypeName(filter_type), start_height, stop_hash.ToString());\n+        return;\n+    }\n+\n+    CSerializedNetMsg msg = CNetMsgMaker(pfrom->GetSendVersion())\n+        .Make(NetMsgType::CFHEADERS,\n+              filter_type_ser,\n+              stop_index->GetBlockHash(),\n+              prev_header,\n+              filter_hashes);\n+    connman->PushMessage(pfrom, std::move(msg));\n+}\n+\n /**\n  * Handle a getcfcheckpt request.\n  *\n@@ -2048,7 +2122,8 @@ static void ProcessGetCFCheckPt(CNode* pfrom, CDataStream& vRecv, const CChainPa\n \n     const CBlockIndex* stop_index;\n     BlockFilterIndex* filter_index;\n-    if (!PrepareBlockFilterRequest(pfrom, chain_params, filter_type, stop_hash,\n+    if (!PrepareBlockFilterRequest(pfrom, chain_params, filter_type, /*start_height=*/0, stop_hash,\n+                                   /*max_height_diff=*/std::numeric_limits<uint32_t>::max(),\n                                    stop_index, filter_index)) {\n         return;\n     }\n@@ -3385,6 +3460,11 @@ bool ProcessMessage(CNode* pfrom, const std::string& msg_type, CDataStream& vRec\n         return true;\n     }\n \n+    if (msg_type == NetMsgType::GETCFHEADERS) {\n+        ProcessGetCFHeaders(pfrom, vRecv, chainparams, connman);\n+        return true;\n+    }\n+\n     if (msg_type == NetMsgType::GETCFCHECKPT) {\n         ProcessGetCFCheckPt(pfrom, vRecv, chainparams, connman);\n         return true;"
      },
      {
        "sha": "243111c449191acc30f4620a29b8cd1ca9711fd9",
        "filename": "src/protocol.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f6b58c150686e90bc4952976e488b1605f3ae02a/src/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f6b58c150686e90bc4952976e488b1605f3ae02a/src/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.cpp?ref=f6b58c150686e90bc4952976e488b1605f3ae02a",
        "patch": "@@ -40,6 +40,8 @@ const char *SENDCMPCT=\"sendcmpct\";\n const char *CMPCTBLOCK=\"cmpctblock\";\n const char *GETBLOCKTXN=\"getblocktxn\";\n const char *BLOCKTXN=\"blocktxn\";\n+const char *GETCFHEADERS=\"getcfheaders\";\n+const char *CFHEADERS=\"cfheaders\";\n const char *GETCFCHECKPT=\"getcfcheckpt\";\n const char *CFCHECKPT=\"cfcheckpt\";\n } // namespace NetMsgType\n@@ -73,6 +75,8 @@ const static std::string allNetMessageTypes[] = {\n     NetMsgType::CMPCTBLOCK,\n     NetMsgType::GETBLOCKTXN,\n     NetMsgType::BLOCKTXN,\n+    NetMsgType::GETCFHEADERS,\n+    NetMsgType::CFHEADERS,\n     NetMsgType::GETCFCHECKPT,\n     NetMsgType::CFCHECKPT,\n };"
      },
      {
        "sha": "9527dce960516b261513901d6c6e71195087569e",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 13,
        "deletions": 2,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f6b58c150686e90bc4952976e488b1605f3ae02a/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f6b58c150686e90bc4952976e488b1605f3ae02a/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=f6b58c150686e90bc4952976e488b1605f3ae02a",
        "patch": "@@ -225,6 +225,19 @@ extern const char* GETBLOCKTXN;\n  * @since protocol version 70014 as described by BIP 152\n  */\n extern const char* BLOCKTXN;\n+/**\n+ * getcfheaders requests a compact filter header and the filter hashes for a\n+ * range of blocks, which can then be used to reconstruct the filter headers\n+ * for those blocks.\n+ * Only available with service bit NODE_COMPACT_FILTERS as described by\n+ * BIP 157 & 158.\n+ */\n+extern const char* GETCFHEADERS;\n+/**\n+ * cfheaders is a response to a getcfheaders request containing a filter header\n+ * and a vector of filter hashes for each subsequent block in the requested range.\n+ */\n+extern const char* CFHEADERS;\n /**\n  * getcfcheckpt requests evenly spaced compact filter headers, enabling\n  * parallelized download and validation of the headers between them.\n@@ -235,8 +248,6 @@ extern const char* GETCFCHECKPT;\n /**\n  * cfcheckpt is a response to a getcfcheckpt request containing a vector of\n  * evenly spaced filter headers for blocks on the requested chain.\n- * Only available with service bit NODE_COMPACT_FILTERS as described by\n- * BIP 157 & 158.\n  */\n extern const char* CFCHECKPT;\n }; // namespace NetMsgType"
      }
    ]
  },
  {
    "sha": "5308c97ccaf0955e5840956bc1636108a43e6f46",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MzA4Yzk3Y2NhZjA5NTVlNTg0MDk1NmJjMTYzNjEwOGE0M2U2ZjQ2",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2020-05-04T18:25:18Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-05-22T15:59:58Z"
      },
      "message": "[test] Add test for cfheaders",
      "tree": {
        "sha": "bf26dca90c46970c81acb164c5005f91f6864683",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bf26dca90c46970c81acb164c5005f91f6864683"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5308c97ccaf0955e5840956bc1636108a43e6f46",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5308c97ccaf0955e5840956bc1636108a43e6f46",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5308c97ccaf0955e5840956bc1636108a43e6f46",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5308c97ccaf0955e5840956bc1636108a43e6f46/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f6b58c150686e90bc4952976e488b1605f3ae02a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f6b58c150686e90bc4952976e488b1605f3ae02a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f6b58c150686e90bc4952976e488b1605f3ae02a"
      }
    ],
    "stats": {
      "total": 108,
      "additions": 107,
      "deletions": 1
    },
    "files": [
      {
        "sha": "9ff76b4b3d71162bc6b2205691467f5822b207f3",
        "filename": "test/functional/p2p_blockfilters.py",
        "status": "modified",
        "additions": 51,
        "deletions": 1,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5308c97ccaf0955e5840956bc1636108a43e6f46/test/functional/p2p_blockfilters.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5308c97ccaf0955e5840956bc1636108a43e6f46/test/functional/p2p_blockfilters.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_blockfilters.py?ref=5308c97ccaf0955e5840956bc1636108a43e6f46",
        "patch": "@@ -5,12 +5,16 @@\n \"\"\"Tests NODE_COMPACT_FILTERS (BIP 157/158).\n \n Tests that a node configured with -blockfilterindex and -peerblockfilters can serve\n-cfcheckpts.\n+cfheaders and cfcheckpts.\n \"\"\"\n \n from test_framework.messages import (\n     FILTER_TYPE_BASIC,\n+    hash256,\n     msg_getcfcheckpt,\n+    msg_getcfheaders,\n+    ser_uint256,\n+    uint256_from_str,\n )\n from test_framework.mininode import P2PInterface\n from test_framework.test_framework import BitcoinTestFramework\n@@ -100,12 +104,45 @@ def run_test(self):\n             [int(header, 16) for header in (stale_cfcheckpt,)]\n         )\n \n+        self.log.info(\"Check that peers can fetch cfheaders on active chain.\")\n+        request = msg_getcfheaders(\n+            filter_type=FILTER_TYPE_BASIC,\n+            start_height=1,\n+            stop_hash=int(main_block_hash, 16)\n+        )\n+        node0.send_and_ping(request)\n+        response = node0.last_message['cfheaders']\n+        assert_equal(len(response.hashes), 1000)\n+        assert_equal(\n+            compute_last_header(response.prev_header, response.hashes),\n+            int(main_cfcheckpt, 16)\n+        )\n+\n+        self.log.info(\"Check that peers can fetch cfheaders on stale chain.\")\n+        request = msg_getcfheaders(\n+            filter_type=FILTER_TYPE_BASIC,\n+            start_height=1,\n+            stop_hash=int(stale_block_hash, 16)\n+        )\n+        node0.send_and_ping(request)\n+        response = node0.last_message['cfheaders']\n+        assert_equal(len(response.hashes), 1000)\n+        assert_equal(\n+            compute_last_header(response.prev_header, response.hashes),\n+            int(stale_cfcheckpt, 16)\n+        )\n+\n         self.log.info(\"Requests to node 1 without NODE_COMPACT_FILTERS results in disconnection.\")\n         requests = [\n             msg_getcfcheckpt(\n                 filter_type=FILTER_TYPE_BASIC,\n                 stop_hash=int(main_block_hash, 16)\n             ),\n+            msg_getcfheaders(\n+                filter_type=FILTER_TYPE_BASIC,\n+                start_height=1000,\n+                stop_hash=int(main_block_hash, 16)\n+            ),\n         ]\n         for request in requests:\n             node1 = self.nodes[1].add_p2p_connection(P2PInterface())\n@@ -114,6 +151,12 @@ def run_test(self):\n \n         self.log.info(\"Check that invalid requests result in disconnection.\")\n         requests = [\n+            # Requesting too many filter headers results in disconnection.\n+            msg_getcfheaders(\n+                filter_type=FILTER_TYPE_BASIC,\n+                start_height=0,\n+                stop_hash=int(tip_hash, 16)\n+            ),\n             # Requesting unknown filter type results in disconnection.\n             msg_getcfcheckpt(\n                 filter_type=255,\n@@ -130,5 +173,12 @@ def run_test(self):\n             node0.send_message(request)\n             node0.wait_for_disconnect()\n \n+def compute_last_header(prev_header, hashes):\n+    \"\"\"Compute the last filter header from a starting header and a sequence of filter hashes.\"\"\"\n+    header = ser_uint256(prev_header)\n+    for filter_hash in hashes:\n+        header = hash256(ser_uint256(filter_hash) + header)\n+    return uint256_from_str(header)\n+\n if __name__ == '__main__':\n     CompactFiltersTest().main()"
      },
      {
        "sha": "d178e79541636eeca3dcd57bc9ae3684ee5c0434",
        "filename": "test/functional/test_framework/messages.py",
        "status": "modified",
        "additions": 53,
        "deletions": 0,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5308c97ccaf0955e5840956bc1636108a43e6f46/test/functional/test_framework/messages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5308c97ccaf0955e5840956bc1636108a43e6f46/test/functional/test_framework/messages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/messages.py?ref=5308c97ccaf0955e5840956bc1636108a43e6f46",
        "patch": "@@ -1516,6 +1516,59 @@ class msg_no_witness_blocktxn(msg_blocktxn):\n     def serialize(self):\n         return self.block_transactions.serialize(with_witness=False)\n \n+class msg_getcfheaders:\n+    __slots__ = (\"filter_type\", \"start_height\", \"stop_hash\")\n+    msgtype =  b\"getcfheaders\"\n+\n+    def __init__(self, filter_type, start_height, stop_hash):\n+        self.filter_type = filter_type\n+        self.start_height = start_height\n+        self.stop_hash = stop_hash\n+\n+    def deserialize(self, f):\n+        self.filter_type = struct.unpack(\"<B\", f.read(1))[0]\n+        self.start_height = struct.unpack(\"<I\", f.read(4))[0]\n+        self.stop_hash = deser_uint256(f)\n+\n+    def serialize(self):\n+        r = b\"\"\n+        r += struct.pack(\"<B\", self.filter_type)\n+        r += struct.pack(\"<I\", self.start_height)\n+        r += ser_uint256(self.stop_hash)\n+        return r\n+\n+    def __repr__(self):\n+        return \"msg_getcfheaders(filter_type={:#x}, start_height={}, stop_hash={:x})\".format(\n+            self.filter_type, self.start_height, self.stop_hash)\n+\n+class msg_cfheaders:\n+    __slots__ = (\"filter_type\", \"stop_hash\", \"prev_header\", \"hashes\")\n+    msgtype =  b\"cfheaders\"\n+\n+    def __init__(self, filter_type=None, stop_hash=None, prev_header=None, hashes=None):\n+        self.filter_type = filter_type\n+        self.stop_hash = stop_hash\n+        self.prev_header = prev_header\n+        self.hashes = hashes\n+\n+    def deserialize(self, f):\n+        self.filter_type = struct.unpack(\"<B\", f.read(1))[0]\n+        self.stop_hash = deser_uint256(f)\n+        self.prev_header = deser_uint256(f)\n+        self.hashes = deser_uint256_vector(f)\n+\n+    def serialize(self):\n+        r = b\"\"\n+        r += struct.pack(\"<B\", self.filter_type)\n+        r += ser_uint256(self.stop_hash)\n+        r += ser_uint256(self.prev_header)\n+        r += ser_uint256_vector(self.hashes)\n+        return r\n+\n+    def __repr__(self):\n+        return \"msg_cfheaders(filter_type={:#x}, stop_hash={:x})\".format(\n+            self.filter_type, self.stop_hash)\n+\n class msg_getcfcheckpt:\n     __slots__ = (\"filter_type\", \"stop_hash\")\n     msgtype =  b\"getcfcheckpt\""
      },
      {
        "sha": "0591690643b15820d91e28498df91c91cf539270",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5308c97ccaf0955e5840956bc1636108a43e6f46/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5308c97ccaf0955e5840956bc1636108a43e6f46/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=5308c97ccaf0955e5840956bc1636108a43e6f46",
        "patch": "@@ -31,6 +31,7 @@\n     msg_block,\n     MSG_BLOCK,\n     msg_blocktxn,\n+    msg_cfheaders,\n     msg_cfcheckpt,\n     msg_cmpctblock,\n     msg_feefilter,\n@@ -68,6 +69,7 @@\n     b\"addr\": msg_addr,\n     b\"block\": msg_block,\n     b\"blocktxn\": msg_blocktxn,\n+    b\"cfheaders\": msg_cfheaders,\n     b\"cfcheckpt\": msg_cfcheckpt,\n     b\"cmpctblock\": msg_cmpctblock,\n     b\"feefilter\": msg_feefilter,\n@@ -330,6 +332,7 @@ def on_close(self):\n     def on_addr(self, message): pass\n     def on_block(self, message): pass\n     def on_blocktxn(self, message): pass\n+    def on_cfheaders(self, message): pass\n     def on_cfcheckpt(self, message): pass\n     def on_cmpctblock(self, message): pass\n     def on_feefilter(self, message): pass"
      }
    ]
  },
  {
    "sha": "fa7fc5a8e0fcf9ca81e84b3631f18ae40502be60",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTdmYzVhOGUwZmNmOWNhODFlODRiMzYzMWYxOGFlNDA1MDJiZTYw",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-05-22T19:38:48Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-05-22T19:52:37Z"
      },
      "message": "rpc: factor out RpcInterruptionPoint from dumptxoutset",
      "tree": {
        "sha": "422665e4954f8f50a026e4a165ccfc35a72a8d9c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/422665e4954f8f50a026e4a165ccfc35a72a8d9c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa7fc5a8e0fcf9ca81e84b3631f18ae40502be60",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUhuEQwAvLXt1ycPpqeqQtsvq5k94mpYejmm8KSmZqbthXGj8JaAVitPuY2PfWiH\n59M8y8Nzu4uxmMoZj+P9xAu29mYSyrhTCE7aDcUNnrfkTy9LDA01K/iRD8ms+N6u\nBuMk8EdNEkftKHnZ9Px1QJK2tQRjqhQjABjRQoKgpLa+L11e9ka05PTBuSIrGk8N\n9zO2J+P+sNJha2NQ085T4w1x3iokn+Lq96jLb+VGjDcRqlT5ZRXPWBKVNzXxS/MU\nvqCAe8/nmQPP34rpnggIYLTWQrnxX3OQhOdy8tmCQRiUKcHBgW1B0sTij9Ju+39o\ns4JGdmtDFy7h24tAGcxLfhxaDiaotzASrJxlJbz4Tdz9Tcl1qHoPqwja0ylNRMTz\nr2aJ2bd25QjBh4W/PqpHdYKr8Ox5So98RnBn3/lTPMzdRQs0HykpRxL+X6yXQYPV\ndCdtBYWx51GnYjOsEaNAcvjzF8qvbDNZ8qGo3CYFUqCrN3z7d5LAznx4csWeENIn\nn0RJQGGv\n=LeyO\n-----END PGP SIGNATURE-----",
        "payload": "tree 422665e4954f8f50a026e4a165ccfc35a72a8d9c\nparent b5c423c48e094bd098e11c3d1f57acae7502a4da\nauthor MarcoFalke <falke.marco@gmail.com> 1590176328 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1590177157 -0400\n\nrpc: factor out RpcInterruptionPoint from dumptxoutset\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa7fc5a8e0fcf9ca81e84b3631f18ae40502be60",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa7fc5a8e0fcf9ca81e84b3631f18ae40502be60",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa7fc5a8e0fcf9ca81e84b3631f18ae40502be60/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b5c423c48e094bd098e11c3d1f57acae7502a4da",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b5c423c48e094bd098e11c3d1f57acae7502a4da",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b5c423c48e094bd098e11c3d1f57acae7502a4da"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 11,
      "deletions": 5
    },
    "files": [
      {
        "sha": "80ae35f48ea35ea005e1e16d3ce095bf6408f5e4",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa7fc5a8e0fcf9ca81e84b3631f18ae40502be60/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa7fc5a8e0fcf9ca81e84b3631f18ae40502be60/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=fa7fc5a8e0fcf9ca81e84b3631f18ae40502be60",
        "patch": "@@ -2329,9 +2329,7 @@ UniValue dumptxoutset(const JSONRPCRequest& request)\n     unsigned int iter{0};\n \n     while (pcursor->Valid()) {\n-        if (iter % 5000 == 0 && !IsRPCRunning()) {\n-            throw JSONRPCError(RPC_CLIENT_NOT_CONNECTED, \"Shutting down\");\n-        }\n+        if (iter % 5000 == 0) RpcInterruptionPoint();\n         ++iter;\n         if (pcursor->GetKey(key) && pcursor->GetValue(coin)) {\n             afile << key;"
      },
      {
        "sha": "99c649d15a2b8e32ac4cb6d2f5524ef0a4173ee2",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa7fc5a8e0fcf9ca81e84b3631f18ae40502be60/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa7fc5a8e0fcf9ca81e84b3631f18ae40502be60/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=fa7fc5a8e0fcf9ca81e84b3631f18ae40502be60",
        "patch": "@@ -11,9 +11,9 @@\n #include <util/strencodings.h>\n #include <util/system.h>\n \n-#include <boost/signals2/signal.hpp>\n #include <boost/algorithm/string/classification.hpp>\n #include <boost/algorithm/string/split.hpp>\n+#include <boost/signals2/signal.hpp>\n \n #include <memory> // for unique_ptr\n #include <unordered_map>\n@@ -309,6 +309,11 @@ bool IsRPCRunning()\n     return g_rpc_running;\n }\n \n+void RpcInterruptionPoint()\n+{\n+    if (!IsRPCRunning()) throw JSONRPCError(RPC_CLIENT_NOT_CONNECTED, \"Shutting down\");\n+}\n+\n void SetRPCWarmupStatus(const std::string& newStatus)\n {\n     LOCK(cs_rpcWarmup);"
      },
      {
        "sha": "d7a04ff6e8b08c72300256345c3e8cd9fb283fe7",
        "filename": "src/rpc/server.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa7fc5a8e0fcf9ca81e84b3631f18ae40502be60/src/rpc/server.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa7fc5a8e0fcf9ca81e84b3631f18ae40502be60/src/rpc/server.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.h?ref=fa7fc5a8e0fcf9ca81e84b3631f18ae40502be60",
        "patch": "@@ -9,10 +9,10 @@\n #include <amount.h>\n #include <rpc/request.h>\n \n+#include <functional>\n #include <map>\n #include <stdint.h>\n #include <string>\n-#include <functional>\n \n #include <univalue.h>\n \n@@ -29,6 +29,9 @@ namespace RPCServer\n /** Query whether RPC is running */\n bool IsRPCRunning();\n \n+/** Throw JSONRPCError if RPC is not running */\n+void RpcInterruptionPoint();\n+\n /**\n  * Set the RPC warmup status.  When this is done, all RPC calls will error out\n  * immediately with RPC_IN_WARMUP."
      }
    ]
  },
  {
    "sha": "fa756928c3f455943086051c5fe1d5bb09962248",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTc1NjkyOGMzZjQ1NTk0MzA4NjA1MWM1ZmUxZDViYjA5OTYyMjQ4",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-05-22T20:09:34Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-05-22T19:53:50Z"
      },
      "message": "rpc: Make gettxoutsetinfo/GetUTXOStats interruptible\n\nAlso, add interruption points to scantxoutset",
      "tree": {
        "sha": "93ed8e1324b591bdf17e0cdac6488140994025b5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/93ed8e1324b591bdf17e0cdac6488140994025b5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa756928c3f455943086051c5fe1d5bb09962248",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUgdRgv/deEjlZNLVzeYlxVUkMuHmWHiT0yqXXQ1KGsopTY2WHl4g8ndmF+dSTl1\n+rDGlzaOB3af8ploj+W44GaUbZfLYNCanbYlRPY4KlVxzjGUd6tOdDwskSR8ait7\ndpcnPrb7CRKLnx53eMV+1vcA/MtS0Sn99jWCebEIF+rNJ+3ePZxkNbry144W5XLQ\n2H/gKQ2Ml6KM3mFTRDWhEImFywlwC85VY67odshvhfuG7bHX/5SYDsXyuKvZH+NK\nXd6jKmrWKPAk1VEu+Hmunm/G9pc0cjaNPgqZGgrh/X19pXX2xkq8AhQXgi0BVdlW\nvSWVI8UaMYdUseQCdfe+uCp8W6knLyhvMUDLyzRB81iReg42mvACCn5IMwg0We/i\ni5RxzyunHBocyWB4oaMfyG5AURc0El3fJmZY3ylxJoM6pWAUWLLS8W0/qZPcb9dU\noLjtwCmZLdoiz9PovTDr9uYBukcEZ3lm9t7AjIYRS+8Q5mWtTI+5f56LQ7OJJdhp\nOgHzrWvC\n=kOLc\n-----END PGP SIGNATURE-----",
        "payload": "tree 93ed8e1324b591bdf17e0cdac6488140994025b5\nparent fa7fc5a8e0fcf9ca81e84b3631f18ae40502be60\nauthor MarcoFalke <falke.marco@gmail.com> 1590178174 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1590177230 -0400\n\nrpc: Make gettxoutsetinfo/GetUTXOStats interruptible\n\nAlso, add interruption points to scantxoutset\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa756928c3f455943086051c5fe1d5bb09962248",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa756928c3f455943086051c5fe1d5bb09962248",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa756928c3f455943086051c5fe1d5bb09962248/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa7fc5a8e0fcf9ca81e84b3631f18ae40502be60",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa7fc5a8e0fcf9ca81e84b3631f18ae40502be60",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa7fc5a8e0fcf9ca81e84b3631f18ae40502be60"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 7,
      "deletions": 4
    },
    "files": [
      {
        "sha": "e3c4c828b65759dbfeb8116093ebccb420c39b60",
        "filename": "src/node/coinstats.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa756928c3f455943086051c5fe1d5bb09962248/src/node/coinstats.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa756928c3f455943086051c5fe1d5bb09962248/src/node/coinstats.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/coinstats.cpp?ref=fa756928c3f455943086051c5fe1d5bb09962248",
        "patch": "@@ -33,7 +33,7 @@ static void ApplyStats(CCoinsStats &stats, CHashWriter& ss, const uint256& hash,\n }\n \n //! Calculate statistics about the unspent transaction output set\n-bool GetUTXOStats(CCoinsView *view, CCoinsStats &stats)\n+bool GetUTXOStats(CCoinsView* view, CCoinsStats& stats, const std::function<void()>& interruption_point)\n {\n     stats = CCoinsStats();\n     std::unique_ptr<CCoinsViewCursor> pcursor(view->Cursor());\n@@ -49,6 +49,7 @@ bool GetUTXOStats(CCoinsView *view, CCoinsStats &stats)\n     uint256 prevkey;\n     std::map<uint32_t, Coin> outputs;\n     while (pcursor->Valid()) {\n+        interruption_point();\n         COutPoint key;\n         Coin coin;\n         if (pcursor->GetKey(key) && pcursor->GetValue(coin)) {"
      },
      {
        "sha": "d9cdaa30360649c000d7998be7d49c68d021e387",
        "filename": "src/node/coinstats.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa756928c3f455943086051c5fe1d5bb09962248/src/node/coinstats.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa756928c3f455943086051c5fe1d5bb09962248/src/node/coinstats.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/coinstats.h?ref=fa756928c3f455943086051c5fe1d5bb09962248",
        "patch": "@@ -10,6 +10,7 @@\n #include <uint256.h>\n \n #include <cstdint>\n+#include <functional>\n \n class CCoinsView;\n \n@@ -29,6 +30,6 @@ struct CCoinsStats\n };\n \n //! Calculate statistics about the unspent transaction output set\n-bool GetUTXOStats(CCoinsView* view, CCoinsStats& stats);\n+bool GetUTXOStats(CCoinsView* view, CCoinsStats& stats, const std::function<void()>& interruption_point = {});\n \n #endif // BITCOIN_NODE_COINSTATS_H"
      },
      {
        "sha": "e5c25681d0aa8e94bc939226cdb739a9c578da5b",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa756928c3f455943086051c5fe1d5bb09962248/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa756928c3f455943086051c5fe1d5bb09962248/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=fa756928c3f455943086051c5fe1d5bb09962248",
        "patch": "@@ -990,7 +990,7 @@ static UniValue gettxoutsetinfo(const JSONRPCRequest& request)\n     ::ChainstateActive().ForceFlushStateToDisk();\n \n     CCoinsView* coins_view = WITH_LOCK(cs_main, return &ChainstateActive().CoinsDB());\n-    if (GetUTXOStats(coins_view, stats)) {\n+    if (GetUTXOStats(coins_view, stats, RpcInterruptionPoint)) {\n         ret.pushKV(\"height\", (int64_t)stats.nHeight);\n         ret.pushKV(\"bestblock\", stats.hashBlock.GetHex());\n         ret.pushKV(\"transactions\", (int64_t)stats.nTransactions);\n@@ -1968,6 +1968,7 @@ bool FindScriptPubKey(std::atomic<int>& scan_progress, const std::atomic<bool>&\n         Coin coin;\n         if (!cursor->GetKey(key) || !cursor->GetValue(coin)) return false;\n         if (++count % 8192 == 0) {\n+            RpcInterruptionPoint();\n             if (should_abort) {\n                 // allow to abort the scan via the abort reference\n                 return false;\n@@ -2311,7 +2312,7 @@ UniValue dumptxoutset(const JSONRPCRequest& request)\n \n         ::ChainstateActive().ForceFlushStateToDisk();\n \n-        if (!GetUTXOStats(&::ChainstateActive().CoinsDB(), stats)) {\n+        if (!GetUTXOStats(&::ChainstateActive().CoinsDB(), stats, RpcInterruptionPoint)) {\n             throw JSONRPCError(RPC_INTERNAL_ERROR, \"Unable to read UTXO set\");\n         }\n "
      }
    ]
  },
  {
    "sha": "69bfcac27a83440092bc6e61904ded910ed4baf4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2OWJmY2FjMjdhODM0NDAwOTJiYzZlNjE5MDRkZWQ5MTBlZDRiYWY0",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2020-05-23T10:22:29Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2020-05-23T10:22:29Z"
      },
      "message": "gui: update Qt base translations for macOS release\n\nThese haven't been updated since their addition, so this updates the list that\ncontrols which qt base translations are bundled with the macOS binary, to all the\nlanguages that are available with qt 5.9.8.\n\nThis could probably be improved in some way, however qt updates are infrequent,\nand I didn't want to spend any more time looking at this. Also given that no-one\nseems to have noticed and/or reported this it wouldn't seem high-priority.\n\nCould be backported to 0.20.1.",
      "tree": {
        "sha": "7efbc12ca77c522429c93ed161a73c3220deb3b7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7efbc12ca77c522429c93ed161a73c3220deb3b7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/69bfcac27a83440092bc6e61904ded910ed4baf4",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl7I+WUACgkQLuufXMCV\nJsF7ng//WNiLLtpEu7mUG8f3TvLnpzHSO1n/rDIEH0ivLK5quw2Wh4z3J3gvx+4+\n0/uTuz9AY4MhZv4Smh9wkAGnGvBC3vma+JvzhH8dZGkCMbhLWFBdDnyOkvZiAyfj\ni7QCmjMAeWfAo50zebf3piUGHY8aBAWVfwPgXk/I9P22DKgw5hfypXxw+4ZNmOBi\nBXW14iTIuRRoXmttslCvIH2p23PlmP2ecviSKAs643LQLQNaULvxoadECN0QyJPn\nAnk/mM7ohP1jY7K0d5pC3mbrVjGwFIEg0kGzbaQ43gdE2Aqz6TrQZmgwyC9NFvXf\n2M2285xhD/mHpLAhiEchZeKDv1SIR2qKiYSvl4AH56i/ou2ujRET9VfuJohV4wqo\necSnJm0mKSoiJ4KIwH0hH9HGXfQiHtd2L2vwntx76jpRk/cYV4E/GeGlS8Nd90+t\nA+wxZoUJQJ2eBHo/xFsdvck735qpPEoteVMoUCrzpYEcL1lx5AYcca8BYJchKwDX\nJz6VnfhEfqfC1/0ixRKjiWcHRGFna1LpxytdfD0hvQtrZKMAa3KwmJzzNEqZJgnP\nG+AQyI4l6KfW+QVzMDbZacMkGRb07z0qLxVRaOdPswK0slczzeUBIgfrJsl6EcIb\nMtSj1/kD9v/srRS5Cv5uZhl390mUefvBbaU67BxcUPwWe5lAV98=\n=n0BV\n-----END PGP SIGNATURE-----",
        "payload": "tree 7efbc12ca77c522429c93ed161a73c3220deb3b7\nparent fa3288cda12537b2e99a3cc7e14dfff3e944884f\nauthor fanquake <fanquake@gmail.com> 1590229349 +0800\ncommitter fanquake <fanquake@gmail.com> 1590229349 +0800\n\ngui: update Qt base translations for macOS release\n\nThese haven't been updated since their addition, so this updates the list that\ncontrols which qt base translations are bundled with the macOS binary, to all the\nlanguages that are available with qt 5.9.8.\n\nThis could probably be improved in some way, however qt updates are infrequent,\nand I didn't want to spend any more time looking at this. Also given that no-one\nseems to have noticed and/or reported this it wouldn't seem high-priority.\n\nCould be backported to 0.20.1.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/69bfcac27a83440092bc6e61904ded910ed4baf4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/69bfcac27a83440092bc6e61904ded910ed4baf4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/69bfcac27a83440092bc6e61904ded910ed4baf4/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa3288cda12537b2e99a3cc7e14dfff3e944884f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa3288cda12537b2e99a3cc7e14dfff3e944884f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa3288cda12537b2e99a3cc7e14dfff3e944884f"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "45dab3930d622df1049cbb9495871fbbe391034d",
        "filename": "Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69bfcac27a83440092bc6e61904ded910ed4baf4/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69bfcac27a83440092bc6e61904ded910ed4baf4/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=69bfcac27a83440092bc6e61904ded910ed4baf4",
        "patch": "@@ -41,7 +41,7 @@ OSX_DEPLOY_SCRIPT=$(top_srcdir)/contrib/macdeploy/macdeployqtplus\n OSX_FANCY_PLIST=$(top_srcdir)/contrib/macdeploy/fancy.plist\n OSX_INSTALLER_ICONS=$(top_srcdir)/src/qt/res/icons/bitcoin.icns\n OSX_PLIST=$(top_builddir)/share/qt/Info.plist #not installed\n-OSX_QT_TRANSLATIONS = da,de,es,hu,ru,uk,zh_CN,zh_TW\n+OSX_QT_TRANSLATIONS = ar,bg,ca,cs,da,de,es,fa,fi,fr,gd,gl,he,hu,it,ja,ko,lt,lv,pl,pt,ru,sk,sl,sv,uk,zh_CN,zh_TW\n \n DIST_CONTRIB = \\\n \t       $(top_srcdir)/contrib/linearize/linearize-data.py \\"
      },
      {
        "sha": "631851855a0bd79533d8fbab0d3f5391fa204c0d",
        "filename": "depends/packages/qt.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69bfcac27a83440092bc6e61904ded910ed4baf4/depends/packages/qt.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69bfcac27a83440092bc6e61904ded910ed4baf4/depends/packages/qt.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/qt.mk?ref=69bfcac27a83440092bc6e61904ded910ed4baf4",
        "patch": "@@ -10,6 +10,7 @@ $(package)_build_subdir=qtbase\n $(package)_qt_libs=corelib network widgets gui plugins testlib\n $(package)_patches=fix_qt_pkgconfig.patch mac-qmake.conf fix_configure_mac.patch fix_no_printer.patch fix_rcc_determinism.patch fix_riscv64_arch.patch xkb-default.patch no-xlib.patch fix_android_qmake_conf.patch fix_android_jni_static.patch\n \n+# Update OSX_QT_TRANSLATIONS when this is updated\n $(package)_qttranslations_file_name=qttranslations-$($(package)_suffix)\n $(package)_qttranslations_sha256_hash=fb5a47799754af73d3bf501fe513342cfe2fc37f64e80df5533f6110e804220c\n "
      }
    ]
  },
  {
    "sha": "fab47375fe0bdec1e557e087fdb0707c4dfa7cc2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWI0NzM3NWZlMGJkZWMxZTU1N2UwODdmZGIwNzA3YzRkZmE3Y2My",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-05-23T13:42:21Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-05-23T13:40:49Z"
      },
      "message": "test: pep-8 p2p_getdata.py",
      "tree": {
        "sha": "378f8723e805e1539365281697e5f6431d8f1cbc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/378f8723e805e1539365281697e5f6431d8f1cbc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fab47375fe0bdec1e557e087fdb0707c4dfa7cc2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUgQYQwAy2DeA918gfHyekTvoGSQXK/g3yzA+MonA8IXY9DqH4N8iEm64zabDaPe\n6SccNSLRVVvGdjHjQYOzsdmFYop6zRr3Jt7GcpE/SbpKAkUbnij7ViCzSMCSWGZC\nCKQwkqxYLx8sqvDA84hpOuBxkrIjPuI3lp/Jt1nuCWRzozlgZPy8A5w8ou1Y43JY\noICuSEmgWR50Nh7Lxd1c4DBhNFnbdMHbCIt4CpIUqhbHvd9+jA6ga5YMoyvVpe4Z\nZHVk1PWLYLITtc5TexM3x5mQH1lVKK8JvXpzRslyPeKbyvWv+lG/K/eHcfJFZx4i\nKYNliDXqf5yhJjcNtQhtZk7xMVtJQzGVtyR22njPvCluXaPPvwtw7F4X2CUavaB5\nOtFF1l1t+k+YuUxSMOIrwAUz2Qf5BI0/kB+rOJg8RPe6SfjUxyaFzK7CmxLpzpsz\n2zwn9jpNDKHliznql0Xygx2W8ZDrjOpfoPCFHhXmsK+SbLD0SjjVI9is+Q8JuvMl\nClEk4i7b\n=b/7H\n-----END PGP SIGNATURE-----",
        "payload": "tree 378f8723e805e1539365281697e5f6431d8f1cbc\nparent 793e0ff22cbace2a0fbe1e4a2e88a7bc6bf44502\nauthor MarcoFalke <falke.marco@gmail.com> 1590241341 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1590241249 -0400\n\ntest: pep-8 p2p_getdata.py\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fab47375fe0bdec1e557e087fdb0707c4dfa7cc2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fab47375fe0bdec1e557e087fdb0707c4dfa7cc2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fab47375fe0bdec1e557e087fdb0707c4dfa7cc2/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "793e0ff22cbace2a0fbe1e4a2e88a7bc6bf44502",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/793e0ff22cbace2a0fbe1e4a2e88a7bc6bf44502",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/793e0ff22cbace2a0fbe1e4a2e88a7bc6bf44502"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 3,
      "deletions": 1
    },
    "files": [
      {
        "sha": "bbecd2cf81756a8f34235e08bd1d2cb686c090a3",
        "filename": "test/functional/p2p_getdata.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab47375fe0bdec1e557e087fdb0707c4dfa7cc2/test/functional/p2p_getdata.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab47375fe0bdec1e557e087fdb0707c4dfa7cc2/test/functional/p2p_getdata.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_getdata.py?ref=fab47375fe0bdec1e557e087fdb0707c4dfa7cc2",
        "patch": "@@ -16,8 +16,8 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import wait_until\n \n-class P2PStoreBlock(P2PInterface):\n \n+class P2PStoreBlock(P2PInterface):\n     def __init__(self):\n         super().__init__()\n         self.blocks = defaultdict(int)\n@@ -26,6 +26,7 @@ def on_block(self, message):\n         message.block.calc_sha256()\n         self.blocks[message.block.sha256] += 1\n \n+\n class GetdataTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n@@ -47,5 +48,6 @@ def run_test(self):\n         self.nodes[0].p2ps[0].send_and_ping(good_getdata)\n         wait_until(lambda: self.nodes[0].p2ps[0].blocks[best_block] == 1, timeout=30, lock=mininode_lock)\n \n+\n if __name__ == '__main__':\n     GetdataTest().main()"
      }
    ]
  },
  {
    "sha": "999922baed3a80b581ce46daa01c4cbca4fcbfd8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5OTk5MjJiYWVkM2E4MGI1ODFjZTQ2ZGFhMDFjNGNiY2E0ZmNiZmQ4",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-05-23T13:47:55Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-05-23T13:51:03Z"
      },
      "message": "test: Default mininode.wait_until timeout to 60s",
      "tree": {
        "sha": "b0ae786d4cd38d3132380f604cafd85e38a7f95e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b0ae786d4cd38d3132380f604cafd85e38a7f95e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/999922baed3a80b581ce46daa01c4cbca4fcbfd8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUjzeQv/RjMVwpTbebrj59U2pO6DronhHk4iRswV2NEDAu9l6TdmPN8kLlP+kzVm\nXYpk8kOKDIPaDqafaTuXIjKgIyRbVkZkyquVBjN877PTFQcxXQfH1j1/ndoEHYYC\nUvYOenf3V4Aw9ettGMs61IgXZu6H1tgaaUer24k5wsMh1YsB0q3ed1rFpu5nPbv+\na2HLvcWMOSRneB5gTODZeR8syc8FaJo9NB5RvyLw6ZuyG9Olj8FeuHBzyR9jBOVS\nlzmnCJxKRU38hb1Ttf5gCCNKL7/Bhx9W28gnNsSeQFbEQy11+2ZECGZQKvYA+P/A\n8jrvDbPOUpD6K+AQ5AA+9fJ3ZqLQ0ZvIF+E/OM5gNHbZVDrQN48+6Nb1lV+RIQhC\nPfIJTzAL2TUPS1WF9JE/p+lC+1NivxJ83RY4GoblTfwZ5jdHeg15xh/W4++v7U/f\nYcu4NPbGJs7+K6OLkppOVIcOPN7+pqKK979M16RpR4Eki60Sp+7e1SXuwK8y6Hhd\n73em8eEz\n=79Ev\n-----END PGP SIGNATURE-----",
        "payload": "tree b0ae786d4cd38d3132380f604cafd85e38a7f95e\nparent fab47375fe0bdec1e557e087fdb0707c4dfa7cc2\nauthor MarcoFalke <falke.marco@gmail.com> 1590241675 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1590241863 -0400\n\ntest: Default mininode.wait_until timeout to 60s\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/999922baed3a80b581ce46daa01c4cbca4fcbfd8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/999922baed3a80b581ce46daa01c4cbca4fcbfd8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/999922baed3a80b581ce46daa01c4cbca4fcbfd8/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fab47375fe0bdec1e557e087fdb0707c4dfa7cc2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fab47375fe0bdec1e557e087fdb0707c4dfa7cc2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fab47375fe0bdec1e557e087fdb0707c4dfa7cc2"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "9fdd3cfe825ac31abb904b435cac794c27f2050a",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/999922baed3a80b581ce46daa01c4cbca4fcbfd8/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/999922baed3a80b581ce46daa01c4cbca4fcbfd8/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=999922baed3a80b581ce46daa01c4cbca4fcbfd8",
        "patch": "@@ -371,7 +371,7 @@ def on_version(self, message):\n \n     # Connection helper methods\n \n-    def wait_until(self, test_function, timeout):\n+    def wait_until(self, test_function, timeout=60):\n         wait_until(test_function, timeout=timeout, lock=mininode_lock, timeout_factor=self.timeout_factor)\n \n     def wait_for_disconnect(self, timeout=60):"
      }
    ]
  },
  {
    "sha": "fa80b4788bbe3ef00c5d767c0d89ba9809d8707c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTgwYjQ3ODhiYmUzZWYwMGM1ZDc2N2MwZDg5YmE5ODA5ZDg3MDdj",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-05-23T13:49:16Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-05-23T14:01:10Z"
      },
      "message": "test: Remove global wait_until from p2p_getdata",
      "tree": {
        "sha": "a22bd67be72c4562ada10503b6820fa4fa9d4685",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a22bd67be72c4562ada10503b6820fa4fa9d4685"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa80b4788bbe3ef00c5d767c0d89ba9809d8707c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUiOAgwAkdpaxAi7/BNcU2JOnAW2g0Xcxcfn0OMSn6hLoEjWAcEVlkQmU2ITIDP4\n/fah7GQ1SABAjzplXLWJj0b0vFwPBAeDruXox1RWAEpiq68huslTOhFKtDzWgvmP\nFA2SNe+DmV8R5HG6+Bxaoy6amcrt+ZHfN7yFw3QVIo0GsCY24AheGHFkLL8OAxyZ\nyYvYfXx9wApe9OVeYjdqkK4X/VF9Gpe/Glc4erZkLJoGmwM+GnCVfsIWn6EnmQMg\n4AoF8mxEP/vxdw+LTPbW8VFlFE3yi3a8Lg/ApYLys1+W3is0AMfKBCvhFR0iKxuz\nm/lRaTstmAxK2duCZscccxxHY3AgtU9/dpZyZ7Nvyed9WkGwr/LGtkgu9jXA+Jkb\n7ztZmOch7MBR+ET15UjmfGPCpwc5dirgj9lTRy0mIArGnUyIFRyG8lBBV0nGw1a/\nFkJO3ZFm8/to0/yruDIsfKDST6ygAFGhkSRMDGY0H0hnkSAilhtk74vk6CP3AL6r\nReyf6yiB\n=fxIK\n-----END PGP SIGNATURE-----",
        "payload": "tree a22bd67be72c4562ada10503b6820fa4fa9d4685\nparent 999922baed3a80b581ce46daa01c4cbca4fcbfd8\nauthor MarcoFalke <falke.marco@gmail.com> 1590241756 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1590242470 -0400\n\ntest: Remove global wait_until from p2p_getdata\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa80b4788bbe3ef00c5d767c0d89ba9809d8707c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa80b4788bbe3ef00c5d767c0d89ba9809d8707c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa80b4788bbe3ef00c5d767c0d89ba9809d8707c/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "999922baed3a80b581ce46daa01c4cbca4fcbfd8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/999922baed3a80b581ce46daa01c4cbca4fcbfd8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/999922baed3a80b581ce46daa01c4cbca4fcbfd8"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 5,
      "deletions": 9
    },
    "files": [
      {
        "sha": "d1b11c2c613305dd2e76b56c0247775ee4f9586a",
        "filename": "test/functional/p2p_getdata.py",
        "status": "modified",
        "additions": 5,
        "deletions": 9,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa80b4788bbe3ef00c5d767c0d89ba9809d8707c/test/functional/p2p_getdata.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa80b4788bbe3ef00c5d767c0d89ba9809d8707c/test/functional/p2p_getdata.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_getdata.py?ref=fa80b4788bbe3ef00c5d767c0d89ba9809d8707c",
        "patch": "@@ -9,12 +9,8 @@\n     CInv,\n     msg_getdata,\n )\n-from test_framework.mininode import (\n-    mininode_lock,\n-    P2PInterface,\n-)\n+from test_framework.mininode import P2PInterface\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import wait_until\n \n \n class P2PStoreBlock(P2PInterface):\n@@ -32,21 +28,21 @@ def set_test_params(self):\n         self.num_nodes = 1\n \n     def run_test(self):\n-        self.nodes[0].add_p2p_connection(P2PStoreBlock())\n+        p2p_block_store = self.nodes[0].add_p2p_connection(P2PStoreBlock())\n \n         self.log.info(\"test that an invalid GETDATA doesn't prevent processing of future messages\")\n \n         # Send invalid message and verify that node responds to later ping\n         invalid_getdata = msg_getdata()\n         invalid_getdata.inv.append(CInv(t=0, h=0))  # INV type 0 is invalid.\n-        self.nodes[0].p2ps[0].send_and_ping(invalid_getdata)\n+        p2p_block_store.send_and_ping(invalid_getdata)\n \n         # Check getdata still works by fetching tip block\n         best_block = int(self.nodes[0].getbestblockhash(), 16)\n         good_getdata = msg_getdata()\n         good_getdata.inv.append(CInv(t=2, h=best_block))\n-        self.nodes[0].p2ps[0].send_and_ping(good_getdata)\n-        wait_until(lambda: self.nodes[0].p2ps[0].blocks[best_block] == 1, timeout=30, lock=mininode_lock)\n+        p2p_block_store.send_and_ping(good_getdata)\n+        p2p_block_store.wait_until(lambda: self.nodes[0].p2ps[0].blocks[best_block] == 1)\n \n \n if __name__ == '__main__':"
      }
    ]
  },
  {
    "sha": "ef17c03e074b6c3f185afa4eff572ba687c2a171",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZjE3YzAzZTA3NGI2YzNmMTg1YWZhNGVmZjU3MmJhNjg3YzJhMTcx",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-05-24T17:34:52Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-05-24T17:34:52Z"
      },
      "message": "Convert wallet to new serialization",
      "tree": {
        "sha": "0cdd2ce4516205a4c80c5d4400ad75af68de3e6c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0cdd2ce4516205a4c80c5d4400ad75af68de3e6c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ef17c03e074b6c3f185afa4eff572ba687c2a171",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef17c03e074b6c3f185afa4eff572ba687c2a171",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ef17c03e074b6c3f185afa4eff572ba687c2a171",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef17c03e074b6c3f185afa4eff572ba687c2a171/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "65c589e45e8b8914698a0fd25cd5aafdda30869c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65c589e45e8b8914698a0fd25cd5aafdda30869c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/65c589e45e8b8914698a0fd25cd5aafdda30869c"
      }
    ],
    "stats": {
      "total": 136,
      "additions": 60,
      "deletions": 76
    },
    "files": [
      {
        "sha": "f2df786e2e7c05e0f444c7ea4d57d0c833171a6c",
        "filename": "src/wallet/crypter.h",
        "status": "modified",
        "additions": 3,
        "deletions": 9,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ef17c03e074b6c3f185afa4eff572ba687c2a171/src/wallet/crypter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ef17c03e074b6c3f185afa4eff572ba687c2a171/src/wallet/crypter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/crypter.h?ref=ef17c03e074b6c3f185afa4eff572ba687c2a171",
        "patch": "@@ -43,15 +43,9 @@ class CMasterKey\n     //! such as the various parameters to scrypt\n     std::vector<unsigned char> vchOtherDerivationParameters;\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(vchCryptedKey);\n-        READWRITE(vchSalt);\n-        READWRITE(nDerivationMethod);\n-        READWRITE(nDeriveIterations);\n-        READWRITE(vchOtherDerivationParameters);\n+    SERIALIZE_METHODS(CMasterKey, obj)\n+    {\n+        READWRITE(obj.vchCryptedKey, obj.vchSalt, obj.nDerivationMethod, obj.nDeriveIterations, obj.vchOtherDerivationParameters);\n     }\n \n     CMasterKey()"
      },
      {
        "sha": "be3116170fa3844d1e0c13d1cd1e72c7b6f7595c",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 28,
        "deletions": 27,
        "changes": 55,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ef17c03e074b6c3f185afa4eff572ba687c2a171/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ef17c03e074b6c3f185afa4eff572ba687c2a171/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=ef17c03e074b6c3f185afa4eff572ba687c2a171",
        "patch": "@@ -110,36 +110,37 @@ class CKeyPool\n     CKeyPool();\n     CKeyPool(const CPubKey& vchPubKeyIn, bool internalIn);\n \n-    ADD_SERIALIZE_METHODS;\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        int nVersion = s.GetVersion();\n+        if (!(s.GetType() & SER_GETHASH)) {\n+            s << nVersion;\n+        }\n+        s << nTime << vchPubKey << fInternal << m_pre_split;\n+    }\n \n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n         int nVersion = s.GetVersion();\n-        if (!(s.GetType() & SER_GETHASH))\n-            READWRITE(nVersion);\n-        READWRITE(nTime);\n-        READWRITE(vchPubKey);\n-        if (ser_action.ForRead()) {\n-            try {\n-                READWRITE(fInternal);\n-            }\n-            catch (std::ios_base::failure&) {\n-                /* flag as external address if we can't read the internal boolean\n-                   (this will be the case for any wallet before the HD chain split version) */\n-                fInternal = false;\n-            }\n-            try {\n-                READWRITE(m_pre_split);\n-            }\n-            catch (std::ios_base::failure&) {\n-                /* flag as postsplit address if we can't read the m_pre_split boolean\n-                   (this will be the case for any wallet that upgrades to HD chain split)*/\n-                m_pre_split = false;\n-            }\n+        if (!(s.GetType() & SER_GETHASH)) {\n+            s >> nVersion;\n+        }\n+        s >> nTime >> vchPubKey;\n+        try {\n+            s >> fInternal;\n+        } catch (std::ios_base::failure&) {\n+            /* flag as external address if we can't read the internal boolean\n+               (this will be the case for any wallet before the HD chain split version) */\n+            fInternal = false;\n         }\n-        else {\n-            READWRITE(fInternal);\n-            READWRITE(m_pre_split);\n+        try {\n+            s >> m_pre_split;\n+        } catch (std::ios_base::failure&) {\n+            /* flag as postsplit address if we can't read the m_pre_split boolean\n+               (this will be the case for any wallet that upgrades to HD chain split) */\n+            m_pre_split = false;\n         }\n     }\n };"
      },
      {
        "sha": "dfec3dba60d88e4a5062300ce080a0d2ec2a1d4f",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 14,
        "deletions": 21,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ef17c03e074b6c3f185afa4eff572ba687c2a171/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ef17c03e074b6c3f185afa4eff572ba687c2a171/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=ef17c03e074b6c3f185afa4eff572ba687c2a171",
        "patch": "@@ -98,15 +98,13 @@ class CHDChain\n     int nVersion;\n \n     CHDChain() { SetNull(); }\n-    ADD_SERIALIZE_METHODS;\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action)\n+\n+    SERIALIZE_METHODS(CHDChain, obj)\n     {\n-        READWRITE(this->nVersion);\n-        READWRITE(nExternalChainCounter);\n-        READWRITE(seed_id);\n-        if (this->nVersion >= VERSION_HD_CHAIN_SPLIT)\n-            READWRITE(nInternalChainCounter);\n+        READWRITE(obj.nVersion, obj.nExternalChainCounter, obj.seed_id);\n+        if (obj.nVersion >= VERSION_HD_CHAIN_SPLIT) {\n+            READWRITE(obj.nInternalChainCounter);\n+        }\n     }\n \n     void SetNull()\n@@ -142,21 +140,16 @@ class CKeyMetadata\n         nCreateTime = nCreateTime_;\n     }\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(this->nVersion);\n-        READWRITE(nCreateTime);\n-        if (this->nVersion >= VERSION_WITH_HDDATA)\n-        {\n-            READWRITE(hdKeypath);\n-            READWRITE(hd_seed_id);\n+    SERIALIZE_METHODS(CKeyMetadata, obj)\n+    {\n+        READWRITE(obj.nVersion, obj.nCreateTime);\n+        if (obj.nVersion >= VERSION_WITH_HDDATA) {\n+            READWRITE(obj.hdKeypath, obj.hd_seed_id);\n         }\n-        if (this->nVersion >= VERSION_WITH_KEY_ORIGIN)\n+        if (obj.nVersion >= VERSION_WITH_KEY_ORIGIN)\n         {\n-            READWRITE(key_origin);\n-            READWRITE(has_key_origin);\n+            READWRITE(obj.key_origin);\n+            READWRITE(obj.has_key_origin);\n         }\n     }\n "
      },
      {
        "sha": "a4e4fda8a1f029336394ea29cef85a06afd88118",
        "filename": "src/wallet/walletutil.h",
        "status": "modified",
        "additions": 15,
        "deletions": 19,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ef17c03e074b6c3f185afa4eff572ba687c2a171/src/wallet/walletutil.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ef17c03e074b6c3f185afa4eff572ba687c2a171/src/wallet/walletutil.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletutil.h?ref=ef17c03e074b6c3f185afa4eff572ba687c2a171",
        "patch": "@@ -98,26 +98,22 @@ class WalletDescriptor\n     int32_t next_index = 0; // Position of the next item to generate\n     DescriptorCache cache;\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        if (ser_action.ForRead()) {\n-            std::string desc;\n-            std::string error;\n-            READWRITE(desc);\n-            FlatSigningProvider keys;\n-            descriptor = Parse(desc, keys, error, true);\n-            if (!descriptor) {\n-                throw std::ios_base::failure(\"Invalid descriptor: \" + error);\n-            }\n-        } else {\n-            READWRITE(descriptor->ToString());\n+    void DeserializeDescriptor(const std::string& str)\n+    {\n+        std::string error;\n+        FlatSigningProvider keys;\n+        descriptor = Parse(str, keys, error, true);\n+        if (!descriptor) {\n+            throw std::ios_base::failure(\"Invalid descriptor: \" + error);\n         }\n-        READWRITE(creation_time);\n-        READWRITE(next_index);\n-        READWRITE(range_start);\n-        READWRITE(range_end);\n+    }\n+\n+    SERIALIZE_METHODS(WalletDescriptor, obj)\n+    {\n+        std::string descriptor_str;\n+        SER_WRITE(obj, descriptor_str = obj.descriptor->ToString());\n+        READWRITE(descriptor_str, obj.creation_time, obj.next_index, obj.range_start, obj.range_end);\n+        SER_READ(obj, obj.DeserializeDescriptor(descriptor_str));\n     }\n \n     WalletDescriptor() {}"
      }
    ]
  },
  {
    "sha": "92beff15d3ae2646c00bd78146d7592a7097ce9c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MmJlZmYxNWQzYWUyNjQ2YzAwYmQ3ODE0NmQ3NTkyYTcwOTdjZTlj",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-05-20T18:13:06Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-05-24T17:35:00Z"
      },
      "message": "Convert LimitedString to formatter",
      "tree": {
        "sha": "bb88450e1500034b00d626e1e2babeb8bc977d5a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bb88450e1500034b00d626e1e2babeb8bc977d5a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/92beff15d3ae2646c00bd78146d7592a7097ce9c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92beff15d3ae2646c00bd78146d7592a7097ce9c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/92beff15d3ae2646c00bd78146d7592a7097ce9c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92beff15d3ae2646c00bd78146d7592a7097ce9c/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ef17c03e074b6c3f185afa4eff572ba687c2a171",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef17c03e074b6c3f185afa4eff572ba687c2a171",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ef17c03e074b6c3f185afa4eff572ba687c2a171"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 9,
      "deletions": 17
    },
    "files": [
      {
        "sha": "c2e863d97a57f4a31ce890a4d4c2fb80dd0d1ba0",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 7,
        "deletions": 15,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92beff15d3ae2646c00bd78146d7592a7097ce9c/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92beff15d3ae2646c00bd78146d7592a7097ce9c/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=92beff15d3ae2646c00bd78146d7592a7097ce9c",
        "patch": "@@ -503,7 +503,7 @@ static inline Wrapper<Formatter, T&> Using(T&& t) { return Wrapper<Formatter, T&\n #define VARINT_MODE(obj, mode) Using<VarIntFormatter<mode>>(obj)\n #define VARINT(obj) Using<VarIntFormatter<VarIntMode::DEFAULT>>(obj)\n #define COMPACTSIZE(obj) Using<CompactSizeFormatter>(obj)\n-#define LIMITED_STRING(obj,n) LimitedString< n >(REF(obj))\n+#define LIMITED_STRING(obj,n) Using<LimitedStringFormatter<n>>(obj)\n \n /** Serialization wrapper class for integers in VarInt format. */\n template<VarIntMode Mode>\n@@ -588,31 +588,23 @@ struct CompactSizeFormatter\n };\n \n template<size_t Limit>\n-class LimitedString\n+struct LimitedStringFormatter\n {\n-protected:\n-    std::string& string;\n-public:\n-    explicit LimitedString(std::string& _string) : string(_string) {}\n-\n     template<typename Stream>\n-    void Unserialize(Stream& s)\n+    void Unser(Stream& s, std::string& v)\n     {\n         size_t size = ReadCompactSize(s);\n         if (size > Limit) {\n             throw std::ios_base::failure(\"String length limit exceeded\");\n         }\n-        string.resize(size);\n-        if (size != 0)\n-            s.read((char*)string.data(), size);\n+        v.resize(size);\n+        if (size != 0) s.read((char*)v.data(), size);\n     }\n \n     template<typename Stream>\n-    void Serialize(Stream& s) const\n+    void Ser(Stream& s, const std::string& v)\n     {\n-        WriteCompactSize(s, string.size());\n-        if (!string.empty())\n-            s.write((char*)string.data(), string.size());\n+        s << v;\n     }\n };\n "
      },
      {
        "sha": "50984b1aefb0bd95b83267c157defc7cfaaee9aa",
        "filename": "src/test/fuzz/string.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92beff15d3ae2646c00bd78146d7592a7097ce9c/src/test/fuzz/string.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92beff15d3ae2646c00bd78146d7592a7097ce9c/src/test/fuzz/string.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/string.cpp?ref=92beff15d3ae2646c00bd78146d7592a7097ce9c",
        "patch": "@@ -93,7 +93,7 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n     {\n         CDataStream data_stream{SER_NETWORK, INIT_PROTO_VERSION};\n         std::string s;\n-        LimitedString<10> limited_string = LIMITED_STRING(s, 10);\n+        auto limited_string = LIMITED_STRING(s, 10);\n         data_stream << random_string_1;\n         try {\n             data_stream >> limited_string;\n@@ -108,7 +108,7 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n     }\n     {\n         CDataStream data_stream{SER_NETWORK, INIT_PROTO_VERSION};\n-        const LimitedString<10> limited_string = LIMITED_STRING(random_string_1, 10);\n+        const auto limited_string = LIMITED_STRING(random_string_1, 10);\n         data_stream << limited_string;\n         std::string deserialized_string;\n         data_stream >> deserialized_string;"
      }
    ]
  },
  {
    "sha": "71f016c6eb42e1ac2c905e04ba4d20c2009e533f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MWYwMTZjNmViNDJlMWFjMmM5MDVlMDRiYTRkMjBjMjAwOWU1MzNm",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-05-20T18:13:25Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-05-24T17:35:00Z"
      },
      "message": "Remove old serialization primitives",
      "tree": {
        "sha": "dc5d877d37f31c07f8988391f9efb4de3ea179a3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dc5d877d37f31c07f8988391f9efb4de3ea179a3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/71f016c6eb42e1ac2c905e04ba4d20c2009e533f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71f016c6eb42e1ac2c905e04ba4d20c2009e533f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/71f016c6eb42e1ac2c905e04ba4d20c2009e533f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71f016c6eb42e1ac2c905e04ba4d20c2009e533f/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "92beff15d3ae2646c00bd78146d7592a7097ce9c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92beff15d3ae2646c00bd78146d7592a7097ce9c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/92beff15d3ae2646c00bd78146d7592a7097ce9c"
      }
    ],
    "stats": {
      "total": 38,
      "additions": 1,
      "deletions": 37
    },
    "files": [
      {
        "sha": "71c2cfa164f6af8c9f9e53b9a40b9240641135a4",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 1,
        "deletions": 37,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71f016c6eb42e1ac2c905e04ba4d20c2009e533f/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71f016c6eb42e1ac2c905e04ba4d20c2009e533f/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=71f016c6eb42e1ac2c905e04ba4d20c2009e533f",
        "patch": "@@ -43,26 +43,6 @@ static const unsigned int MAX_VECTOR_ALLOCATE = 5000000;\n struct deserialize_type {};\n constexpr deserialize_type deserialize {};\n \n-/**\n- * Used to bypass the rule against non-const reference to temporary\n- * where it makes sense with wrappers.\n- */\n-template<typename T>\n-inline T& REF(const T& val)\n-{\n-    return const_cast<T&>(val);\n-}\n-\n-/**\n- * Used to acquire a non-const pointer \"this\" to generate bodies\n- * of const serialization operations from a template\n- */\n-template<typename T>\n-inline T* NCONST_PTR(const T* val)\n-{\n-    return const_cast<T*>(val);\n-}\n-\n //! Safely convert odd char pointer types to standard ones.\n inline char* CharCast(char* c) { return c; }\n inline char* CharCast(unsigned char* c) { return (char*)c; }\n@@ -193,22 +173,6 @@ template<typename X> const X& ReadWriteAsHelper(const X& x) { return x; }\n #define SER_READ(obj, code) ::SerRead(s, ser_action, obj, [&](Stream& s, typename std::remove_const<Type>::type& obj) { code; })\n #define SER_WRITE(obj, code) ::SerWrite(s, ser_action, obj, [&](Stream& s, const Type& obj) { code; })\n \n-/**\n- * Implement three methods for serializable objects. These are actually wrappers over\n- * \"SerializationOp\" template, which implements the body of each class' serialization\n- * code. Adding \"ADD_SERIALIZE_METHODS\" in the body of the class causes these wrappers to be\n- * added as members.\n- */\n-#define ADD_SERIALIZE_METHODS                                         \\\n-    template<typename Stream>                                         \\\n-    void Serialize(Stream& s) const {                                 \\\n-        NCONST_PTR(this)->SerializationOp(s, CSerActionSerialize());  \\\n-    }                                                                 \\\n-    template<typename Stream>                                         \\\n-    void Unserialize(Stream& s) {                                     \\\n-        SerializationOp(s, CSerActionUnserialize());                  \\\n-    }\n-\n /**\n  * Implement the Ser and Unser methods needed for implementing a formatter (see Using below).\n  *\n@@ -1004,7 +968,7 @@ void Unserialize(Stream& is, std::shared_ptr<const T>& p)\n \n \n /**\n- * Support for ADD_SERIALIZE_METHODS and READWRITE macro\n+ * Support for SERIALIZE_METHODS and READWRITE macro.\n  */\n struct CSerActionSerialize\n {"
      }
    ]
  },
  {
    "sha": "f9b22e3bdb54acb2f830b3ebbad47ff17dfb5781",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmOWIyMmUzYmRiNTRhY2IyZjgzMGIzZWJiYWQ0N2ZmMTdkZmI1Nzgx",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-04-28T12:27:56Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-05-25T10:05:06Z"
      },
      "message": "tests: Add fuzzing harness for CCoinsViewCache",
      "tree": {
        "sha": "92fe0607d55de25c993027e29cba4e68413fc0f9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/92fe0607d55de25c993027e29cba4e68413fc0f9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f9b22e3bdb54acb2f830b3ebbad47ff17dfb5781",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f9b22e3bdb54acb2f830b3ebbad47ff17dfb5781",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f9b22e3bdb54acb2f830b3ebbad47ff17dfb5781",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f9b22e3bdb54acb2f830b3ebbad47ff17dfb5781/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "24f70290642c9c5108d3dc62dbe055f5d1bcff9d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/24f70290642c9c5108d3dc62dbe055f5d1bcff9d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/24f70290642c9c5108d3dc62dbe055f5d1bcff9d"
      }
    ],
    "stats": {
      "total": 313,
      "additions": 313,
      "deletions": 0
    },
    "files": [
      {
        "sha": "2480cdadbbd4ab704ca3d511c108220ade629cbb",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f9b22e3bdb54acb2f830b3ebbad47ff17dfb5781/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f9b22e3bdb54acb2f830b3ebbad47ff17dfb5781/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=f9b22e3bdb54acb2f830b3ebbad47ff17dfb5781",
        "patch": "@@ -31,6 +31,7 @@ FUZZ_TARGETS = \\\n   test/fuzz/chain \\\n   test/fuzz/checkqueue \\\n   test/fuzz/coins_deserialize \\\n+  test/fuzz/coins_view \\\n   test/fuzz/cuckoocache \\\n   test/fuzz/decode_tx \\\n   test/fuzz/descriptor_parse \\\n@@ -466,6 +467,12 @@ test_fuzz_coins_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_coins_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n test_fuzz_coins_deserialize_SOURCES = test/fuzz/deserialize.cpp\n \n+test_fuzz_coins_view_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_coins_view_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_coins_view_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_coins_view_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_coins_view_SOURCES = test/fuzz/coins_view.cpp\n+\n test_fuzz_cuckoocache_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n test_fuzz_cuckoocache_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_cuckoocache_LDADD = $(FUZZ_SUITE_LD_COMMON)"
      },
      {
        "sha": "52dd62a14561d5138d2f56018eb5d9e8f2edb2e2",
        "filename": "src/test/fuzz/coins_view.cpp",
        "status": "added",
        "additions": 294,
        "deletions": 0,
        "changes": 294,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f9b22e3bdb54acb2f830b3ebbad47ff17dfb5781/src/test/fuzz/coins_view.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f9b22e3bdb54acb2f830b3ebbad47ff17dfb5781/src/test/fuzz/coins_view.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/coins_view.cpp?ref=f9b22e3bdb54acb2f830b3ebbad47ff17dfb5781",
        "patch": "@@ -0,0 +1,294 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <amount.h>\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <coins.h>\n+#include <consensus/tx_verify.h>\n+#include <consensus/validation.h>\n+#include <key.h>\n+#include <node/coinstats.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <pubkey.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <validation.h>\n+\n+#include <cstdint>\n+#include <limits>\n+#include <optional>\n+#include <string>\n+#include <vector>\n+\n+namespace {\n+const Coin EMPTY_COIN{};\n+\n+bool operator==(const Coin& a, const Coin& b)\n+{\n+    if (a.IsSpent() && b.IsSpent()) return true;\n+    return a.fCoinBase == b.fCoinBase && a.nHeight == b.nHeight && a.out == b.out;\n+}\n+} // namespace\n+\n+void initialize()\n+{\n+    static const ECCVerifyHandle ecc_verify_handle;\n+    ECC_Start();\n+    SelectParams(CBaseChainParams::REGTEST);\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    CCoinsView backend_coins_view;\n+    CCoinsViewCache coins_view_cache{&backend_coins_view};\n+    COutPoint random_out_point;\n+    Coin random_coin;\n+    CMutableTransaction random_mutable_transaction;\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 9)) {\n+        case 0: {\n+            if (random_coin.IsSpent()) {\n+                break;\n+            }\n+            Coin coin = random_coin;\n+            bool expected_code_path = false;\n+            const bool possible_overwrite = fuzzed_data_provider.ConsumeBool();\n+            try {\n+                coins_view_cache.AddCoin(random_out_point, std::move(coin), possible_overwrite);\n+                expected_code_path = true;\n+            } catch (const std::logic_error& e) {\n+                if (e.what() == std::string{\"Attempted to overwrite an unspent coin (when possible_overwrite is false)\"}) {\n+                    assert(!possible_overwrite);\n+                    expected_code_path = true;\n+                }\n+            }\n+            assert(expected_code_path);\n+            break;\n+        }\n+        case 1: {\n+            (void)coins_view_cache.Flush();\n+            break;\n+        }\n+        case 2: {\n+            coins_view_cache.SetBestBlock(ConsumeUInt256(fuzzed_data_provider));\n+            break;\n+        }\n+        case 3: {\n+            Coin move_to;\n+            (void)coins_view_cache.SpendCoin(random_out_point, fuzzed_data_provider.ConsumeBool() ? &move_to : nullptr);\n+            break;\n+        }\n+        case 4: {\n+            coins_view_cache.Uncache(random_out_point);\n+            break;\n+        }\n+        case 5: {\n+            if (fuzzed_data_provider.ConsumeBool()) {\n+                backend_coins_view = CCoinsView{};\n+            }\n+            coins_view_cache.SetBackend(backend_coins_view);\n+            break;\n+        }\n+        case 6: {\n+            const std::optional<COutPoint> opt_out_point = ConsumeDeserializable<COutPoint>(fuzzed_data_provider);\n+            if (!opt_out_point) {\n+                break;\n+            }\n+            random_out_point = *opt_out_point;\n+            break;\n+        }\n+        case 7: {\n+            const std::optional<Coin> opt_coin = ConsumeDeserializable<Coin>(fuzzed_data_provider);\n+            if (!opt_coin) {\n+                break;\n+            }\n+            random_coin = *opt_coin;\n+            break;\n+        }\n+        case 8: {\n+            const std::optional<CMutableTransaction> opt_mutable_transaction = ConsumeDeserializable<CMutableTransaction>(fuzzed_data_provider);\n+            if (!opt_mutable_transaction) {\n+                break;\n+            }\n+            random_mutable_transaction = *opt_mutable_transaction;\n+            break;\n+        }\n+        case 9: {\n+            CCoinsMap coins_map;\n+            while (fuzzed_data_provider.ConsumeBool()) {\n+                CCoinsCacheEntry coins_cache_entry;\n+                coins_cache_entry.flags = fuzzed_data_provider.ConsumeIntegral<unsigned char>();\n+                if (fuzzed_data_provider.ConsumeBool()) {\n+                    coins_cache_entry.coin = random_coin;\n+                } else {\n+                    const std::optional<Coin> opt_coin = ConsumeDeserializable<Coin>(fuzzed_data_provider);\n+                    if (!opt_coin) {\n+                        break;\n+                    }\n+                    coins_cache_entry.coin = *opt_coin;\n+                }\n+                coins_map.emplace(random_out_point, std::move(coins_cache_entry));\n+            }\n+            bool expected_code_path = false;\n+            try {\n+                coins_view_cache.BatchWrite(coins_map, fuzzed_data_provider.ConsumeBool() ? ConsumeUInt256(fuzzed_data_provider) : coins_view_cache.GetBestBlock());\n+                expected_code_path = true;\n+            } catch (const std::logic_error& e) {\n+                if (e.what() == std::string{\"FRESH flag misapplied to coin that exists in parent cache\"}) {\n+                    expected_code_path = true;\n+                }\n+            }\n+            assert(expected_code_path);\n+            break;\n+        }\n+        }\n+    }\n+\n+    {\n+        const Coin& coin_using_access_coin = coins_view_cache.AccessCoin(random_out_point);\n+        const bool exists_using_access_coin = !(coin_using_access_coin == EMPTY_COIN);\n+        const bool exists_using_have_coin = coins_view_cache.HaveCoin(random_out_point);\n+        const bool exists_using_have_coin_in_cache = coins_view_cache.HaveCoinInCache(random_out_point);\n+        Coin coin_using_get_coin;\n+        const bool exists_using_get_coin = coins_view_cache.GetCoin(random_out_point, coin_using_get_coin);\n+        if (exists_using_get_coin) {\n+            assert(coin_using_get_coin == coin_using_access_coin);\n+        }\n+        assert((exists_using_access_coin && exists_using_have_coin_in_cache && exists_using_have_coin && exists_using_get_coin) ||\n+               (!exists_using_access_coin && !exists_using_have_coin_in_cache && !exists_using_have_coin && !exists_using_get_coin));\n+        const bool exists_using_have_coin_in_backend = backend_coins_view.HaveCoin(random_out_point);\n+        if (exists_using_have_coin_in_backend) {\n+            assert(exists_using_have_coin);\n+        }\n+        Coin coin_using_backend_get_coin;\n+        if (backend_coins_view.GetCoin(random_out_point, coin_using_backend_get_coin)) {\n+            assert(exists_using_have_coin_in_backend);\n+            assert(coin_using_get_coin == coin_using_backend_get_coin);\n+        } else {\n+            assert(!exists_using_have_coin_in_backend);\n+        }\n+    }\n+\n+    {\n+        bool expected_code_path = false;\n+        try {\n+            (void)coins_view_cache.Cursor();\n+        } catch (const std::logic_error&) {\n+            expected_code_path = true;\n+        }\n+        assert(expected_code_path);\n+        (void)coins_view_cache.DynamicMemoryUsage();\n+        (void)coins_view_cache.EstimateSize();\n+        (void)coins_view_cache.GetBestBlock();\n+        (void)coins_view_cache.GetCacheSize();\n+        (void)coins_view_cache.GetHeadBlocks();\n+        (void)coins_view_cache.HaveInputs(CTransaction{random_mutable_transaction});\n+    }\n+\n+    {\n+        const CCoinsViewCursor* coins_view_cursor = backend_coins_view.Cursor();\n+        assert(coins_view_cursor == nullptr);\n+        (void)backend_coins_view.EstimateSize();\n+        (void)backend_coins_view.GetBestBlock();\n+        (void)backend_coins_view.GetHeadBlocks();\n+    }\n+\n+    if (fuzzed_data_provider.ConsumeBool()) {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 6)) {\n+        case 0: {\n+            const CTransaction transaction{random_mutable_transaction};\n+            bool is_spent = false;\n+            for (const CTxOut& tx_out : transaction.vout) {\n+                if (Coin{tx_out, 0, transaction.IsCoinBase()}.IsSpent()) {\n+                    is_spent = true;\n+                }\n+            }\n+            if (is_spent) {\n+                // Avoid:\n+                // coins.cpp:69: void CCoinsViewCache::AddCoin(const COutPoint &, Coin &&, bool): Assertion `!coin.IsSpent()' failed.\n+                break;\n+            }\n+            bool expected_code_path = false;\n+            const int height = fuzzed_data_provider.ConsumeIntegral<int>();\n+            const bool possible_overwrite = fuzzed_data_provider.ConsumeBool();\n+            try {\n+                AddCoins(coins_view_cache, transaction, height, possible_overwrite);\n+                expected_code_path = true;\n+            } catch (const std::logic_error& e) {\n+                if (e.what() == std::string{\"Attempted to overwrite an unspent coin (when possible_overwrite is false)\"}) {\n+                    assert(!possible_overwrite);\n+                    expected_code_path = true;\n+                }\n+            }\n+            assert(expected_code_path);\n+            break;\n+        }\n+        case 1: {\n+            (void)AreInputsStandard(CTransaction{random_mutable_transaction}, coins_view_cache);\n+            break;\n+        }\n+        case 2: {\n+            TxValidationState state;\n+            CAmount tx_fee_out;\n+            const CTransaction transaction{random_mutable_transaction};\n+            if (ContainsSpentInput(transaction, coins_view_cache)) {\n+                // Avoid:\n+                // consensus/tx_verify.cpp:171: bool Consensus::CheckTxInputs(const CTransaction &, TxValidationState &, const CCoinsViewCache &, int, CAmount &): Assertion `!coin.IsSpent()' failed.\n+                break;\n+            }\n+            try {\n+                (void)Consensus::CheckTxInputs(transaction, state, coins_view_cache, fuzzed_data_provider.ConsumeIntegralInRange<int>(0, std::numeric_limits<int>::max()), tx_fee_out);\n+                assert(MoneyRange(tx_fee_out));\n+            } catch (const std::runtime_error&) {\n+            }\n+            break;\n+        }\n+        case 3: {\n+            const CTransaction transaction{random_mutable_transaction};\n+            if (ContainsSpentInput(transaction, coins_view_cache)) {\n+                // Avoid:\n+                // consensus/tx_verify.cpp:130: unsigned int GetP2SHSigOpCount(const CTransaction &, const CCoinsViewCache &): Assertion `!coin.IsSpent()' failed.\n+                break;\n+            }\n+            (void)GetP2SHSigOpCount(transaction, coins_view_cache);\n+            break;\n+        }\n+        case 4: {\n+            const CTransaction transaction{random_mutable_transaction};\n+            if (ContainsSpentInput(transaction, coins_view_cache)) {\n+                // Avoid:\n+                // consensus/tx_verify.cpp:130: unsigned int GetP2SHSigOpCount(const CTransaction &, const CCoinsViewCache &): Assertion `!coin.IsSpent()' failed.\n+                break;\n+            }\n+            const int flags = fuzzed_data_provider.ConsumeIntegral<int>();\n+            if (!transaction.vin.empty() && (flags & SCRIPT_VERIFY_WITNESS) != 0 && (flags & SCRIPT_VERIFY_P2SH) == 0) {\n+                // Avoid:\n+                // script/interpreter.cpp:1705: size_t CountWitnessSigOps(const CScript &, const CScript &, const CScriptWitness *, unsigned int): Assertion `(flags & SCRIPT_VERIFY_P2SH) != 0' failed.\n+                break;\n+            }\n+            (void)GetTransactionSigOpCost(transaction, coins_view_cache, flags);\n+            break;\n+        }\n+        case 5: {\n+            CCoinsStats stats;\n+            bool expected_code_path = false;\n+            try {\n+                (void)GetUTXOStats(&coins_view_cache, stats);\n+            } catch (const std::logic_error&) {\n+                expected_code_path = true;\n+            }\n+            assert(expected_code_path);\n+            break;\n+        }\n+        case 6: {\n+            (void)IsWitnessStandard(CTransaction{random_mutable_transaction}, coins_view_cache);\n+            break;\n+        }\n+        }\n+    }\n+}"
      },
      {
        "sha": "9d0fb02128baa93538e2abae0d9ba4083f684525",
        "filename": "src/test/fuzz/util.h",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f9b22e3bdb54acb2f830b3ebbad47ff17dfb5781/src/test/fuzz/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f9b22e3bdb54acb2f830b3ebbad47ff17dfb5781/src/test/fuzz/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/util.h?ref=f9b22e3bdb54acb2f830b3ebbad47ff17dfb5781",
        "patch": "@@ -8,6 +8,7 @@\n #include <amount.h>\n #include <arith_uint256.h>\n #include <attributes.h>\n+#include <coins.h>\n #include <consensus/consensus.h>\n #include <primitives/transaction.h>\n #include <script/script.h>\n@@ -149,4 +150,15 @@ NODISCARD bool AdditionOverflow(const T i, const T j) noexcept\n     return std::numeric_limits<T>::max() - i < j;\n }\n \n+NODISCARD inline bool ContainsSpentInput(const CTransaction& tx, const CCoinsViewCache& inputs) noexcept\n+{\n+    for (const CTxIn& tx_in : tx.vin) {\n+        const Coin& coin = inputs.AccessCoin(tx_in.prevout);\n+        if (coin.IsSpent()) {\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n+\n #endif // BITCOIN_TEST_FUZZ_UTIL_H"
      }
    ]
  },
  {
    "sha": "86e224b7c4ea295e3adbaeef2ddf4c853643b6f7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NmUyMjRiN2M0ZWEyOTVlM2FkYmFlZWYyZGRmNGM4NTM2NDNiNmY3",
    "commit": {
      "author": {
        "name": "codeShark149",
        "email": "rajarshi149@gmail.com",
        "date": "2020-05-24T12:58:56Z"
      },
      "committer": {
        "name": "codeShark149",
        "email": "rajarshi149@gmail.com",
        "date": "2020-05-25T13:22:58Z"
      },
      "message": "RPC: testmempoolaccept returns transaction fee\n\nThis commit returns 'fee' in the testmempoolaccept rpc results.\n'fee' is only returned if the transaction is accepted in mempool.\n\nExisting functional tests are modified to reflect changed behaviour.",
      "tree": {
        "sha": "97b66d34d8996969c20e305597ea7befff8f3850",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/97b66d34d8996969c20e305597ea7befff8f3850"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/86e224b7c4ea295e3adbaeef2ddf4c853643b6f7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86e224b7c4ea295e3adbaeef2ddf4c853643b6f7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/86e224b7c4ea295e3adbaeef2ddf4c853643b6f7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86e224b7c4ea295e3adbaeef2ddf4c853643b6f7/comments",
    "author": {
      "login": "rajarshimaitra",
      "id": 36541669,
      "node_id": "MDQ6VXNlcjM2NTQxNjY5",
      "avatar_url": "https://avatars.githubusercontent.com/u/36541669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rajarshimaitra",
      "html_url": "https://github.com/rajarshimaitra",
      "followers_url": "https://api.github.com/users/rajarshimaitra/followers",
      "following_url": "https://api.github.com/users/rajarshimaitra/following{/other_user}",
      "gists_url": "https://api.github.com/users/rajarshimaitra/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rajarshimaitra/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rajarshimaitra/subscriptions",
      "organizations_url": "https://api.github.com/users/rajarshimaitra/orgs",
      "repos_url": "https://api.github.com/users/rajarshimaitra/repos",
      "events_url": "https://api.github.com/users/rajarshimaitra/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rajarshimaitra/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rajarshimaitra",
      "id": 36541669,
      "node_id": "MDQ6VXNlcjM2NTQxNjY5",
      "avatar_url": "https://avatars.githubusercontent.com/u/36541669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rajarshimaitra",
      "html_url": "https://github.com/rajarshimaitra",
      "followers_url": "https://api.github.com/users/rajarshimaitra/followers",
      "following_url": "https://api.github.com/users/rajarshimaitra/following{/other_user}",
      "gists_url": "https://api.github.com/users/rajarshimaitra/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rajarshimaitra/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rajarshimaitra/subscriptions",
      "organizations_url": "https://api.github.com/users/rajarshimaitra/orgs",
      "repos_url": "https://api.github.com/users/rajarshimaitra/repos",
      "events_url": "https://api.github.com/users/rajarshimaitra/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rajarshimaitra/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "24f70290642c9c5108d3dc62dbe055f5d1bcff9d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/24f70290642c9c5108d3dc62dbe055f5d1bcff9d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/24f70290642c9c5108d3dc62dbe055f5d1bcff9d"
      }
    ],
    "stats": {
      "total": 52,
      "additions": 33,
      "deletions": 19
    },
    "files": [
      {
        "sha": "519ae9b5732a37cc978e16edc15bdc0ab5825d27",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86e224b7c4ea295e3adbaeef2ddf4c853643b6f7/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86e224b7c4ea295e3adbaeef2ddf4c853643b6f7/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=86e224b7c4ea295e3adbaeef2ddf4c853643b6f7",
        "patch": "@@ -870,6 +870,7 @@ static UniValue testmempoolaccept(const JSONRPCRequest& request)\n                         {\n                             {RPCResult::Type::STR_HEX, \"txid\", \"The transaction hash in hex\"},\n                             {RPCResult::Type::BOOL, \"allowed\", \"If the mempool allows this tx to be inserted\"},\n+                            {RPCResult::Type::NUM, \"fee\", \"Fee provided in this transaction (only present when 'allowed' is true)\"},\n                             {RPCResult::Type::STR, \"reject-reason\", \"Rejection string (only present when 'allowed' is false)\"},\n                         }},\n                     }\n@@ -916,10 +917,11 @@ static UniValue testmempoolaccept(const JSONRPCRequest& request)\n \n     TxValidationState state;\n     bool test_accept_res;\n+    CAmount fee = 0;\n     {\n         LOCK(cs_main);\n         test_accept_res = AcceptToMemoryPool(mempool, state, std::move(tx),\n-            nullptr /* plTxnReplaced */, false /* bypass_limits */, max_raw_tx_fee, /* test_accept */ true);\n+            nullptr /* plTxnReplaced */, false /* bypass_limits */, max_raw_tx_fee, /* test_accept */ true, &fee);\n     }\n     result_0.pushKV(\"allowed\", test_accept_res);\n     if (!test_accept_res) {\n@@ -933,6 +935,10 @@ static UniValue testmempoolaccept(const JSONRPCRequest& request)\n             result_0.pushKV(\"reject-reason\", state.GetRejectReason());\n         }\n     }\n+    // Push tx fee, only if test_accept_res == true\n+    else {\n+        result_0.pushKV(\"fee\", fee);\n+    }\n \n     result.push_back(std::move(result_0));\n     return result;"
      },
      {
        "sha": "f93c677dfe6ce05eacdba1a3add7c43e3e5fa12f",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 10,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86e224b7c4ea295e3adbaeef2ddf4c853643b6f7/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86e224b7c4ea295e3adbaeef2ddf4c853643b6f7/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=86e224b7c4ea295e3adbaeef2ddf4c853643b6f7",
        "patch": "@@ -474,8 +474,8 @@ class MemPoolAccept\n         const bool m_test_accept;\n     };\n \n-    // Single transaction acceptance\n-    bool AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+    // Single transaction acceptance, optionally takes an arguement to return tx fee to the caller\n+    bool AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n private:\n     // All the intermediate state that gets passed between the various levels\n@@ -500,7 +500,8 @@ class MemPoolAccept\n     // Looks up inputs, calculates feerate, considers replacement, evaluates\n     // package limits, etc. As this function can be invoked for \"free\" by a peer,\n     // only tests that are fast should be done here (to avoid CPU DoS).\n-    bool PreChecks(ATMPArgs& args, Workspace& ws) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_pool.cs);\n+    // optionally takes an arguement to return tx fee to the caller.\n+    bool PreChecks(ATMPArgs& args, Workspace& ws, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_pool.cs);\n \n     // Run the script checks using our policy flags. As this can be slow, we should\n     // only invoke this on transactions that have otherwise passed policy checks.\n@@ -546,7 +547,7 @@ class MemPoolAccept\n     size_t m_limit_descendant_size;\n };\n \n-bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n+bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws, CAmount* fee_out)\n {\n     const CTransactionRef& ptx = ws.m_ptx;\n     const CTransaction& tx = *ws.m_ptx;\n@@ -683,6 +684,12 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n         return error(\"%s: Consensus::CheckTxInputs: %s, %s\", __func__, tx.GetHash().ToString(), state.ToString());\n     }\n \n+    // If fee_out is passed, return the fee to the caller\n+    if (fee_out != nullptr){\n+        *fee_out = nFees;\n+    }\n+\n+\n     // Check for non-standard pay-to-script-hash in inputs\n     if (fRequireStandard && !AreInputsStandard(tx, m_view))\n         return state.Invalid(TxValidationResult::TX_NOT_STANDARD, \"bad-txns-nonstandard-inputs\");\n@@ -1022,14 +1029,14 @@ bool MemPoolAccept::Finalize(ATMPArgs& args, Workspace& ws)\n     return true;\n }\n \n-bool MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args)\n+bool MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args, CAmount* fee_out)\n {\n     AssertLockHeld(cs_main);\n     LOCK(m_pool.cs); // mempool \"read lock\" (held through GetMainSignals().TransactionAddedToMempool())\n \n     Workspace workspace(ptx);\n \n-    if (!PreChecks(args, workspace)) return false;\n+    if (!PreChecks(args, workspace, fee_out)) return false;\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n@@ -1056,11 +1063,11 @@ bool MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs\n /** (try to) add transaction to memory pool with a specified acceptance time **/\n static bool AcceptToMemoryPoolWithTime(const CChainParams& chainparams, CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n                         int64_t nAcceptTime, std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, const CAmount nAbsurdFee, bool test_accept) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+                        bool bypass_limits, const CAmount nAbsurdFee, bool test_accept, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     std::vector<COutPoint> coins_to_uncache;\n     MemPoolAccept::ATMPArgs args { chainparams, state, nAcceptTime, plTxnReplaced, bypass_limits, nAbsurdFee, coins_to_uncache, test_accept };\n-    bool res = MemPoolAccept(pool).AcceptSingleTransaction(tx, args);\n+    bool res = MemPoolAccept(pool).AcceptSingleTransaction(tx, args, fee_out);\n     if (!res) {\n         // Remove coins that were not present in the coins cache before calling ATMPW;\n         // this is to prevent memory DoS in case we receive a large number of\n@@ -1078,10 +1085,10 @@ static bool AcceptToMemoryPoolWithTime(const CChainParams& chainparams, CTxMemPo\n \n bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n                         std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, const CAmount nAbsurdFee, bool test_accept)\n+                        bool bypass_limits, const CAmount nAbsurdFee, bool test_accept, CAmount* fee_out)\n {\n     const CChainParams& chainparams = Params();\n-    return AcceptToMemoryPoolWithTime(chainparams, pool, state, tx, GetTime(), plTxnReplaced, bypass_limits, nAbsurdFee, test_accept);\n+    return AcceptToMemoryPoolWithTime(chainparams, pool, state, tx, GetTime(), plTxnReplaced, bypass_limits, nAbsurdFee, test_accept, fee_out);\n }\n \n /**"
      },
      {
        "sha": "a3dd3ef525342eb0280c1aff565679d5ee27c976",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86e224b7c4ea295e3adbaeef2ddf4c853643b6f7/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86e224b7c4ea295e3adbaeef2ddf4c853643b6f7/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=86e224b7c4ea295e3adbaeef2ddf4c853643b6f7",
        "patch": "@@ -188,10 +188,11 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n /** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool **/\n+ * plTxnReplaced will be appended to with all transactions replaced from mempool\n+ * optionally takes an arguement to return tx fee to the caller **/\n bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n                         std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, const CAmount nAbsurdFee, bool test_accept=false) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+                        bool bypass_limits, const CAmount nAbsurdFee, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n /** Get the BIP9 state for a given deployment at the current tip. */\n ThresholdState VersionBitsTipState(const Consensus::Params& params, Consensus::DeploymentPos pos);"
      },
      {
        "sha": "8118dd494fe986ddbc811c335632e7a7aaa62e7b",
        "filename": "test/functional/mempool_accept.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86e224b7c4ea295e3adbaeef2ddf4c853643b6f7/test/functional/mempool_accept.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86e224b7c4ea295e3adbaeef2ddf4c853643b6f7/test/functional/mempool_accept.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_accept.py?ref=86e224b7c4ea295e3adbaeef2ddf4c853643b6f7",
        "patch": "@@ -91,7 +91,7 @@ def run_test(self):\n         tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_0)))\n         txid_0 = tx.rehash()\n         self.check_mempool_result(\n-            result_expected=[{'txid': txid_0, 'allowed': True}],\n+            result_expected=[{'txid': txid_0, 'allowed': True, 'fee': fee * COIN}],\n             rawtxs=[raw_tx_0],\n         )\n \n@@ -104,7 +104,7 @@ def run_test(self):\n         ))['hex']\n         tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_final)))\n         self.check_mempool_result(\n-            result_expected=[{'txid': tx.rehash(), 'allowed': True}],\n+            result_expected=[{'txid': tx.rehash(), 'allowed': True, 'fee': (int(coin['amount']) - (0.025)) * COIN}],\n             rawtxs=[tx.serialize().hex()],\n             maxfeerate=0,\n         )\n@@ -127,7 +127,7 @@ def run_test(self):\n         tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_0)))\n         txid_0 = tx.rehash()\n         self.check_mempool_result(\n-            result_expected=[{'txid': txid_0, 'allowed': True}],\n+            result_expected=[{'txid': txid_0, 'allowed': True, 'fee': (2 * fee * COIN)}],\n             rawtxs=[raw_tx_0],\n         )\n \n@@ -187,7 +187,7 @@ def run_test(self):\n         tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_reference)))\n         # Reference tx should be valid on itself\n         self.check_mempool_result(\n-            result_expected=[{'txid': tx.rehash(), 'allowed': True}],\n+            result_expected=[{'txid': tx.rehash(), 'allowed': True, 'fee': (0.1 - 0.05) * COIN}],\n             rawtxs=[tx.serialize().hex()],\n             maxfeerate=0,\n         )"
      },
      {
        "sha": "ee264482ead99980d8f27ff921a83518ddd3d736",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86e224b7c4ea295e3adbaeef2ddf4c853643b6f7/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86e224b7c4ea295e3adbaeef2ddf4c853643b6f7/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=86e224b7c4ea295e3adbaeef2ddf4c853643b6f7",
        "patch": "@@ -664,13 +664,13 @@ def test_standardness_v0(self):\n         if not self.segwit_active:\n             # Just check mempool acceptance, but don't add the transaction to the mempool, since witness is disallowed\n             # in blocks and the tx is impossible to mine right now.\n-            assert_equal(self.nodes[0].testmempoolaccept([tx3.serialize_with_witness().hex()]), [{'txid': tx3.hash, 'allowed': True}])\n+            assert_equal(self.nodes[0].testmempoolaccept([tx3.serialize_with_witness().hex()]), [{'txid': tx3.hash, 'allowed': True, 'fee': 1000}])\n             # Create the same output as tx3, but by replacing tx\n             tx3_out = tx3.vout[0]\n             tx3 = tx\n             tx3.vout = [tx3_out]\n             tx3.rehash()\n-            assert_equal(self.nodes[0].testmempoolaccept([tx3.serialize_with_witness().hex()]), [{'txid': tx3.hash, 'allowed': True}])\n+            assert_equal(self.nodes[0].testmempoolaccept([tx3.serialize_with_witness().hex()]), [{'txid': tx3.hash, 'allowed': True, 'fee': 11000}])\n         test_transaction_acceptance(self.nodes[0], self.test_node, tx3, with_witness=True, accepted=True)\n \n         self.nodes[0].generate(1)"
      }
    ]
  },
  {
    "sha": "c87770915b88d195d264b58111c64142b1965cfa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjODc3NzA5MTViODhkMTk1ZDI2NGI1ODExMWM2NDE0MmIxOTY1Y2Zh",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-05-08T21:06:16Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-05-25T16:36:48Z"
      },
      "message": "wallettool: Add a salvage command",
      "tree": {
        "sha": "a150e2e78a68ff57912d7baa57d65eea6f947749",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a150e2e78a68ff57912d7baa57d65eea6f947749"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c87770915b88d195d264b58111c64142b1965cfa",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c87770915b88d195d264b58111c64142b1965cfa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c87770915b88d195d264b58111c64142b1965cfa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c87770915b88d195d264b58111c64142b1965cfa/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "448bdff26307981b7e32ba5610dad6674c1fe46d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/448bdff26307981b7e32ba5610dad6674c1fe46d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/448bdff26307981b7e32ba5610dad6674c1fe46d"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 34,
      "deletions": 5
    },
    "files": [
      {
        "sha": "b420463c00700efa82c7728e56add42bb0e9712e",
        "filename": "src/bitcoin-wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c87770915b88d195d264b58111c64142b1965cfa/src/bitcoin-wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c87770915b88d195d264b58111c64142b1965cfa/src/bitcoin-wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-wallet.cpp?ref=c87770915b88d195d264b58111c64142b1965cfa",
        "patch": "@@ -31,6 +31,7 @@ static void SetupWalletToolArgs()\n \n     gArgs.AddArg(\"info\", \"Get wallet info\", ArgsManager::ALLOW_ANY, OptionsCategory::COMMANDS);\n     gArgs.AddArg(\"create\", \"Create new wallet file\", ArgsManager::ALLOW_ANY, OptionsCategory::COMMANDS);\n+    gArgs.AddArg(\"salvage\", \"Attempt to recover private keys from a corrupt wallet\", ArgsManager::ALLOW_ANY, OptionsCategory::COMMANDS);\n }\n \n static bool WalletAppInit(int argc, char* argv[])"
      },
      {
        "sha": "89645fb5cd78afb7400e0c4d11dc993c418d8838",
        "filename": "src/wallet/wallettool.cpp",
        "status": "modified",
        "additions": 33,
        "deletions": 5,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c87770915b88d195d264b58111c64142b1965cfa/src/wallet/wallettool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c87770915b88d195d264b58111c64142b1965cfa/src/wallet/wallettool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallettool.cpp?ref=c87770915b88d195d264b58111c64142b1965cfa",
        "patch": "@@ -103,6 +103,29 @@ static void WalletShowInfo(CWallet* wallet_instance)\n     tfm::format(std::cout, \"Address Book: %zu\\n\", wallet_instance->m_address_book.size());\n }\n \n+static bool SalvageWallet(const fs::path& path)\n+{\n+    // Create a Database handle to allow for the db to be initialized before recovery\n+    std::unique_ptr<WalletDatabase> database = WalletDatabase::Create(path);\n+\n+    // Initialize the environment before recovery\n+    bilingual_str error_string;\n+    try {\n+        WalletBatch::VerifyEnvironment(path, error_string);\n+    } catch (const fs::filesystem_error& e) {\n+        error_string = Untranslated(strprintf(\"Error loading wallet. %s\", fsbridge::get_filesystem_error_message(e)));\n+    }\n+    if (!error_string.original.empty()) {\n+        tfm::format(std::cerr, \"Failed to open wallet for salvage :%s\\n\", error_string.original);\n+        return false;\n+    }\n+\n+    // Perform the recovery\n+    CWallet dummy_wallet(nullptr, WalletLocation(), WalletDatabase::CreateDummy());\n+    std::string backup_filename;\n+    return WalletBatch::Recover(path, (void*)&dummy_wallet, WalletBatch::RecoverKeysOnlyFilter, backup_filename);\n+}\n+\n bool ExecuteWalletToolFunc(const std::string& command, const std::string& name)\n {\n     fs::path path = fs::absolute(name, GetWalletDir());\n@@ -113,7 +136,7 @@ bool ExecuteWalletToolFunc(const std::string& command, const std::string& name)\n             WalletShowInfo(wallet_instance.get());\n             wallet_instance->Flush(true);\n         }\n-    } else if (command == \"info\") {\n+    } else if (command == \"info\" || command == \"salvage\") {\n         if (!fs::exists(path)) {\n             tfm::format(std::cerr, \"Error: no wallet file at %s\\n\", name);\n             return false;\n@@ -123,10 +146,15 @@ bool ExecuteWalletToolFunc(const std::string& command, const std::string& name)\n             tfm::format(std::cerr, \"%s\\nError loading %s. Is wallet being used by other process?\\n\", error.original, name);\n             return false;\n         }\n-        std::shared_ptr<CWallet> wallet_instance = LoadWallet(name, path);\n-        if (!wallet_instance) return false;\n-        WalletShowInfo(wallet_instance.get());\n-        wallet_instance->Flush(true);\n+\n+        if (command == \"info\") {\n+            std::shared_ptr<CWallet> wallet_instance = LoadWallet(name, path);\n+            if (!wallet_instance) return false;\n+            WalletShowInfo(wallet_instance.get());\n+            wallet_instance->Flush(true);\n+        } else if (command == \"salvage\") {\n+            return SalvageWallet(path);\n+        }\n     } else {\n         tfm::format(std::cerr, \"Invalid command: %s\\n\", command);\n         return false;"
      }
    ]
  },
  {
    "sha": "cdd955e580dff99f3fa440494ed2b348f7f094af",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZGQ5NTVlNTgwZGZmOTlmM2ZhNDQwNDk0ZWQyYjM0OGY3ZjA5NGFm",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-05-25T16:23:26Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-05-25T16:37:53Z"
      },
      "message": "Add basic test for bitcoin-wallet salvage",
      "tree": {
        "sha": "5b2ab923046218c63dc1ddeb7cfa52d77fd1cd1f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5b2ab923046218c63dc1ddeb7cfa52d77fd1cd1f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cdd955e580dff99f3fa440494ed2b348f7f094af",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cdd955e580dff99f3fa440494ed2b348f7f094af",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cdd955e580dff99f3fa440494ed2b348f7f094af",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cdd955e580dff99f3fa440494ed2b348f7f094af/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c87770915b88d195d264b58111c64142b1965cfa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c87770915b88d195d264b58111c64142b1965cfa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c87770915b88d195d264b58111c64142b1965cfa"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 9,
      "deletions": 1
    },
    "files": [
      {
        "sha": "524e1593bae5cd4457fa18317d5a1d372be1885f",
        "filename": "test/functional/tool_wallet.py",
        "status": "modified",
        "additions": 9,
        "deletions": 1,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cdd955e580dff99f3fa440494ed2b348f7f094af/test/functional/tool_wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cdd955e580dff99f3fa440494ed2b348f7f094af/test/functional/tool_wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/tool_wallet.py?ref=cdd955e580dff99f3fa440494ed2b348f7f094af",
        "patch": "@@ -203,6 +203,14 @@ def test_getwalletinfo_on_different_wallet(self):\n         assert_equal(shasum_after, shasum_before)\n         self.log.debug('Wallet file shasum unchanged\\n')\n \n+    def test_salvage(self):\n+        # TODO: Check salvage actually salvages and doesn't break things. https://github.com/bitcoin/bitcoin/issues/7463\n+        self.log.info('Check salvage')\n+        self.start_node(0, ['-wallet=salvage'])\n+        self.stop_node(0)\n+\n+        self.assert_tool_output('', '-wallet=salvage', 'salvage')\n+\n     def run_test(self):\n         self.wallet_path = os.path.join(self.nodes[0].datadir, self.chain, 'wallets', 'wallet.dat')\n         self.test_invalid_tool_commands_and_args()\n@@ -211,7 +219,7 @@ def run_test(self):\n         self.test_tool_wallet_info_after_transaction()\n         self.test_tool_wallet_create_on_existing_wallet()\n         self.test_getwalletinfo_on_different_wallet()\n-\n+        self.test_salvage()\n \n if __name__ == '__main__':\n     ToolWalletTest().main()"
      }
    ]
  },
  {
    "sha": "d321046f4bb4887742699c586755a21f3a2edbe1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMzIxMDQ2ZjRiYjQ4ODc3NDI2OTljNTg2NzU1YTIxZjNhMmVkYmUx",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-05-08T21:10:59Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-05-25T16:39:40Z"
      },
      "message": "wallet: remove -salvagewallet",
      "tree": {
        "sha": "983706f8795aa6e503103d11bc73e0cf11271e8d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/983706f8795aa6e503103d11bc73e0cf11271e8d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d321046f4bb4887742699c586755a21f3a2edbe1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d321046f4bb4887742699c586755a21f3a2edbe1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d321046f4bb4887742699c586755a21f3a2edbe1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d321046f4bb4887742699c586755a21f3a2edbe1/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cdd955e580dff99f3fa440494ed2b348f7f094af",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cdd955e580dff99f3fa440494ed2b348f7f094af",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cdd955e580dff99f3fa440494ed2b348f7f094af"
      }
    ],
    "stats": {
      "total": 43,
      "additions": 5,
      "deletions": 38
    },
    "files": [
      {
        "sha": "3885eb6185437e5a8f4719cab0217642180cf4fe",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 11,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d321046f4bb4887742699c586755a21f3a2edbe1/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d321046f4bb4887742699c586755a21f3a2edbe1/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=d321046f4bb4887742699c586755a21f3a2edbe1",
        "patch": "@@ -54,7 +54,6 @@ void WalletInit::AddWalletOptions() const\n     gArgs.AddArg(\"-paytxfee=<amt>\", strprintf(\"Fee (in %s/kB) to add to transactions you send (default: %s)\",\n                                                             CURRENCY_UNIT, FormatMoney(CFeeRate{DEFAULT_PAY_TX_FEE}.GetFeePerK())), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n     gArgs.AddArg(\"-rescan\", \"Rescan the block chain for missing wallet transactions on startup\", ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n-    gArgs.AddArg(\"-salvagewallet\", \"Attempt to recover private keys from a corrupt wallet on startup\", ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n     gArgs.AddArg(\"-spendzeroconfchange\", strprintf(\"Spend unconfirmed change when sending transactions (default: %u)\", DEFAULT_SPEND_ZEROCONF_CHANGE), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n     gArgs.AddArg(\"-txconfirmtarget=<n>\", strprintf(\"If paytxfee is not set, include enough fee so transactions begin confirmation on average within n blocks (default: %u)\", DEFAULT_TX_CONFIRM_TARGET), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n     gArgs.AddArg(\"-wallet=<path>\", \"Specify wallet database path. Can be specified multiple times to load multiple wallets. Path is interpreted relative to <walletdir> if it is not absolute, and will be created if it does not exist (as a directory containing a wallet.dat file and log files). For backwards compatibility this will also accept names of existing data files in <walletdir>.)\", ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::WALLET);\n@@ -89,16 +88,6 @@ bool WalletInit::ParameterInteraction() const\n         LogPrintf(\"%s: parameter interaction: -blocksonly=1 -> setting -walletbroadcast=0\\n\", __func__);\n     }\n \n-    if (gArgs.GetBoolArg(\"-salvagewallet\", false)) {\n-        if (is_multiwallet) {\n-            return InitError(strprintf(Untranslated(\"%s is only allowed with a single wallet file\"), \"-salvagewallet\"));\n-        }\n-        // Rewrite just private keys: rescan to find transactions\n-        if (gArgs.SoftSetBoolArg(\"-rescan\", true)) {\n-            LogPrintf(\"%s: parameter interaction: -salvagewallet=1 -> setting -rescan=1\\n\", __func__);\n-        }\n-    }\n-\n     bool zapwallettxes = gArgs.GetBoolArg(\"-zapwallettxes\", false);\n     // -zapwallettxes implies dropping the mempool on startup\n     if (zapwallettxes && gArgs.SoftSetBoolArg(\"-persistmempool\", false)) {"
      },
      {
        "sha": "8df3e78215cdeb74d15ee0e40d60f1f3fd40f4f3",
        "filename": "src/wallet/load.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 6,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d321046f4bb4887742699c586755a21f3a2edbe1/src/wallet/load.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d321046f4bb4887742699c586755a21f3a2edbe1/src/wallet/load.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/load.cpp?ref=d321046f4bb4887742699c586755a21f3a2edbe1",
        "patch": "@@ -37,11 +37,6 @@ bool VerifyWallets(interfaces::Chain& chain, const std::vector<std::string>& wal\n \n     chain.initMessage(_(\"Verifying wallet(s)...\").translated);\n \n-    // Parameter interaction code should have thrown an error if -salvagewallet\n-    // was enabled with more than wallet file, so the wallet_files size check\n-    // here should have no effect.\n-    bool salvage_wallet = gArgs.GetBoolArg(\"-salvagewallet\", false) && wallet_files.size() <= 1;\n-\n     // Keep track of each wallet absolute path to detect duplicates.\n     std::set<fs::path> wallet_paths;\n \n@@ -55,7 +50,7 @@ bool VerifyWallets(interfaces::Chain& chain, const std::vector<std::string>& wal\n \n         bilingual_str error_string;\n         std::vector<bilingual_str> warnings;\n-        bool verify_success = CWallet::Verify(chain, location, salvage_wallet, error_string, warnings);\n+        bool verify_success = CWallet::Verify(chain, location, error_string, warnings);\n         if (!warnings.empty()) chain.initWarning(Join(warnings, Untranslated(\"\\n\")));\n         if (!verify_success) {\n             chain.initError(error_string);"
      },
      {
        "sha": "e24b1f2e6924127163cd90c077c66f5bfabed857",
        "filename": "src/wallet/load.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d321046f4bb4887742699c586755a21f3a2edbe1/src/wallet/load.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d321046f4bb4887742699c586755a21f3a2edbe1/src/wallet/load.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/load.h?ref=d321046f4bb4887742699c586755a21f3a2edbe1",
        "patch": "@@ -16,8 +16,6 @@ class Chain;\n } // namespace interfaces\n \n //! Responsible for reading and validating the -wallet arguments and verifying the wallet database.\n-//! This function will perform salvage on the wallet if requested, as long as only one wallet is\n-//! being loaded (WalletInit::ParameterInteraction() forbids -salvagewallet, -zapwallettxes or -upgradewallet with multiwallet).\n bool VerifyWallets(interfaces::Chain& chain, const std::vector<std::string>& wallet_files);\n \n //! Load wallet databases."
      },
      {
        "sha": "3c968abea073cfaec594cdae08f0d309a23f44db",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 12,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d321046f4bb4887742699c586755a21f3a2edbe1/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d321046f4bb4887742699c586755a21f3a2edbe1/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=d321046f4bb4887742699c586755a21f3a2edbe1",
        "patch": "@@ -153,7 +153,7 @@ void UnloadWallet(std::shared_ptr<CWallet>&& wallet)\n std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const WalletLocation& location, bilingual_str& error, std::vector<bilingual_str>& warnings)\n {\n     try {\n-        if (!CWallet::Verify(chain, location, false, error, warnings)) {\n+        if (!CWallet::Verify(chain, location, error, warnings)) {\n             error = Untranslated(\"Wallet file verification failed.\") + Untranslated(\" \") + error;\n             return nullptr;\n         }\n@@ -195,7 +195,7 @@ WalletCreationStatus CreateWallet(interfaces::Chain& chain, const SecureString&\n     }\n \n     // Wallet::Verify will check if we're trying to create a wallet with a duplicate name.\n-    if (!CWallet::Verify(chain, location, false, error, warnings)) {\n+    if (!CWallet::Verify(chain, location, error, warnings)) {\n         error = Untranslated(\"Wallet file verification failed.\") + Untranslated(\" \") + error;\n         return WalletCreationStatus::CREATION_FAILED;\n     }\n@@ -3654,7 +3654,7 @@ std::vector<std::string> CWallet::GetDestValues(const std::string& prefix) const\n     return values;\n }\n \n-bool CWallet::Verify(interfaces::Chain& chain, const WalletLocation& location, bool salvage_wallet, bilingual_str& error_string, std::vector<bilingual_str>& warnings)\n+bool CWallet::Verify(interfaces::Chain& chain, const WalletLocation& location, bilingual_str& error_string, std::vector<bilingual_str>& warnings)\n {\n     // Do some checking on wallet path. It should be either a:\n     //\n@@ -3694,15 +3694,6 @@ bool CWallet::Verify(interfaces::Chain& chain, const WalletLocation& location, b\n         return false;\n     }\n \n-    if (salvage_wallet) {\n-        // Recover readable keypairs:\n-        CWallet dummyWallet(&chain, WalletLocation(), WalletDatabase::CreateDummy());\n-        std::string backup_filename;\n-        if (!WalletBatch::Recover(wallet_path, (void *)&dummyWallet, WalletBatch::RecoverKeysOnlyFilter, backup_filename)) {\n-            return false;\n-        }\n-    }\n-\n     return WalletBatch::VerifyDatabaseFile(wallet_path, warnings, error_string);\n }\n "
      },
      {
        "sha": "fc4cc9495caf5d9c825c769be290b1d946136913",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d321046f4bb4887742699c586755a21f3a2edbe1/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d321046f4bb4887742699c586755a21f3a2edbe1/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=d321046f4bb4887742699c586755a21f3a2edbe1",
        "patch": "@@ -1137,7 +1137,7 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n     bool MarkReplaced(const uint256& originalHash, const uint256& newHash);\n \n     //! Verify wallet naming and perform salvage on the wallet if required\n-    static bool Verify(interfaces::Chain& chain, const WalletLocation& location, bool salvage_wallet, bilingual_str& error_string, std::vector<bilingual_str>& warnings);\n+    static bool Verify(interfaces::Chain& chain, const WalletLocation& location, bilingual_str& error_string, std::vector<bilingual_str>& warnings);\n \n     /* Initializes the wallet, returns a new CWallet instance or a null pointer in case of an error */\n     static std::shared_ptr<CWallet> CreateWalletFromFile(interfaces::Chain& chain, const WalletLocation& location, bilingual_str& error, std::vector<bilingual_str>& warnings, uint64_t wallet_creation_flags = 0);"
      },
      {
        "sha": "797c903dd34af6e8ef218e901281a1754b77d832",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d321046f4bb4887742699c586755a21f3a2edbe1/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d321046f4bb4887742699c586755a21f3a2edbe1/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=d321046f4bb4887742699c586755a21f3a2edbe1",
        "patch": "@@ -404,8 +404,6 @@ def run_test(self):\n             '-reindex',\n             '-zapwallettxes=1',\n             '-zapwallettxes=2',\n-            # disabled until issue is fixed: https://github.com/bitcoin/bitcoin/issues/7463\n-            # '-salvagewallet',\n         ]\n         chainlimit = 6\n         for m in maintenance:"
      },
      {
        "sha": "ff9ff341853928a6447d9d0e19ba2af1af447a9a",
        "filename": "test/functional/wallet_multiwallet.py",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d321046f4bb4887742699c586755a21f3a2edbe1/test/functional/wallet_multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d321046f4bb4887742699c586755a21f3a2edbe1/test/functional/wallet_multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_multiwallet.py?ref=d321046f4bb4887742699c586755a21f3a2edbe1",
        "patch": "@@ -122,10 +122,6 @@ def wallet_file(name):\n         self.nodes[0].assert_start_raises_init_error(['-zapwallettxes=1', '-wallet=w1', '-wallet=w2'], \"Error: -zapwallettxes is only allowed with a single wallet file\")\n         self.nodes[0].assert_start_raises_init_error(['-zapwallettxes=2', '-wallet=w1', '-wallet=w2'], \"Error: -zapwallettxes is only allowed with a single wallet file\")\n \n-        self.log.info(\"Do not allow -salvagewallet with multiwallet\")\n-        self.nodes[0].assert_start_raises_init_error(['-salvagewallet', '-wallet=w1', '-wallet=w2'], \"Error: -salvagewallet is only allowed with a single wallet file\")\n-        self.nodes[0].assert_start_raises_init_error(['-salvagewallet=1', '-wallet=w1', '-wallet=w2'], \"Error: -salvagewallet is only allowed with a single wallet file\")\n-\n         # if wallets/ doesn't exist, datadir should be the default wallet dir\n         wallet_dir2 = data_dir('walletdir')\n         os.rename(wallet_dir(), wallet_dir2)"
      }
    ]
  },
  {
    "sha": "8ebcbc85c652665b78dcfd2ad55fa67cafd42c73",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZWJjYmM4NWM2NTI2NjViNzhkY2ZkMmFkNTVmYTY3Y2FmZDQyYzcz",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-05-08T22:44:21Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-05-25T16:59:22Z"
      },
      "message": "walletdb: don't automatically salvage when corruption is detected",
      "tree": {
        "sha": "413e5c364282fdc3316554ca6046463ffa784f8e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/413e5c364282fdc3316554ca6046463ffa784f8e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8ebcbc85c652665b78dcfd2ad55fa67cafd42c73",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ebcbc85c652665b78dcfd2ad55fa67cafd42c73",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8ebcbc85c652665b78dcfd2ad55fa67cafd42c73",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ebcbc85c652665b78dcfd2ad55fa67cafd42c73/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d321046f4bb4887742699c586755a21f3a2edbe1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d321046f4bb4887742699c586755a21f3a2edbe1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d321046f4bb4887742699c586755a21f3a2edbe1"
      }
    ],
    "stats": {
      "total": 50,
      "additions": 11,
      "deletions": 39
    },
    "files": [
      {
        "sha": "34babd268176bca07eb8415516d87a0b863800a6",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 23,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8ebcbc85c652665b78dcfd2ad55fa67cafd42c73/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8ebcbc85c652665b78dcfd2ad55fa67cafd42c73/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=8ebcbc85c652665b78dcfd2ad55fa67cafd42c73",
        "patch": "@@ -268,21 +268,14 @@ BerkeleyEnvironment::BerkeleyEnvironment()\n     fMockDb = true;\n }\n \n-BerkeleyEnvironment::VerifyResult BerkeleyEnvironment::Verify(const std::string& strFile, recoverFunc_type recoverFunc, std::string& out_backup_filename)\n+bool BerkeleyEnvironment::Verify(const std::string& strFile)\n {\n     LOCK(cs_db);\n     assert(mapFileUseCount.count(strFile) == 0);\n \n     Db db(dbenv.get(), 0);\n     int result = db.verify(strFile.c_str(), nullptr, nullptr, 0);\n-    if (result == 0)\n-        return VerifyResult::VERIFY_OK;\n-    else if (recoverFunc == nullptr)\n-        return VerifyResult::RECOVER_FAIL;\n-\n-    // Try to recover:\n-    bool fRecovered = (*recoverFunc)(fs::path(strPath) / strFile, out_backup_filename);\n-    return (fRecovered ? VerifyResult::RECOVER_OK : VerifyResult::RECOVER_FAIL);\n+    return result == 0;\n }\n \n BerkeleyBatch::SafeDbt::SafeDbt()\n@@ -410,27 +403,16 @@ bool BerkeleyBatch::VerifyEnvironment(const fs::path& file_path, bilingual_str&\n     return true;\n }\n \n-bool BerkeleyBatch::VerifyDatabaseFile(const fs::path& file_path, std::vector<bilingual_str>& warnings, bilingual_str& errorStr, BerkeleyEnvironment::recoverFunc_type recoverFunc)\n+bool BerkeleyBatch::VerifyDatabaseFile(const fs::path& file_path, bilingual_str& errorStr)\n {\n     std::string walletFile;\n     std::shared_ptr<BerkeleyEnvironment> env = GetWalletEnv(file_path, walletFile);\n     fs::path walletDir = env->Directory();\n \n     if (fs::exists(walletDir / walletFile))\n     {\n-        std::string backup_filename;\n-        BerkeleyEnvironment::VerifyResult r = env->Verify(walletFile, recoverFunc, backup_filename);\n-        if (r == BerkeleyEnvironment::VerifyResult::RECOVER_OK)\n-        {\n-            warnings.push_back(strprintf(_(\"Warning: Wallet file corrupt, data salvaged!\"\n-                                     \" Original %s saved as %s in %s; if\"\n-                                     \" your balance or transactions are incorrect you should\"\n-                                     \" restore from a backup.\"),\n-                walletFile, backup_filename, walletDir));\n-        }\n-        if (r == BerkeleyEnvironment::VerifyResult::RECOVER_FAIL)\n-        {\n-            errorStr = strprintf(_(\"%s corrupt, salvage failed\"), walletFile);\n+        if (!env->Verify(walletFile)) {\n+            errorStr = strprintf(_(\"%s corrupt. Try using the wallet tool bitcoin-wallet to salvage or restoring a backup.\"), walletFile);\n             return false;\n         }\n     }"
      },
      {
        "sha": "1151124da3e321a1408429268bc2b0a3a2223844",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 2,
        "deletions": 12,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8ebcbc85c652665b78dcfd2ad55fa67cafd42c73/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8ebcbc85c652665b78dcfd2ad55fa67cafd42c73/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=8ebcbc85c652665b78dcfd2ad55fa67cafd42c73",
        "patch": "@@ -66,17 +66,7 @@ class BerkeleyEnvironment\n     bool IsDatabaseLoaded(const std::string& db_filename) const { return m_databases.find(db_filename) != m_databases.end(); }\n     fs::path Directory() const { return strPath; }\n \n-    /**\n-     * Verify that database file strFile is OK. If it is not,\n-     * call the callback to try to recover.\n-     * This must be called BEFORE strFile is opened.\n-     * Returns true if strFile is OK.\n-     */\n-    enum class VerifyResult { VERIFY_OK,\n-                        RECOVER_OK,\n-                        RECOVER_FAIL };\n-    typedef bool (*recoverFunc_type)(const fs::path& file_path, std::string& out_backup_filename);\n-    VerifyResult Verify(const std::string& strFile, recoverFunc_type recoverFunc, std::string& out_backup_filename);\n+    bool Verify(const std::string& strFile);\n     /**\n      * Salvage data from a file that Verify says is bad.\n      * fAggressive sets the DB_AGGRESSIVE flag (see berkeley DB->verify() method documentation).\n@@ -253,7 +243,7 @@ class BerkeleyBatch\n     /* verifies the database environment */\n     static bool VerifyEnvironment(const fs::path& file_path, bilingual_str& errorStr);\n     /* verifies the database file */\n-    static bool VerifyDatabaseFile(const fs::path& file_path, std::vector<bilingual_str>& warnings, bilingual_str& errorStr, BerkeleyEnvironment::recoverFunc_type recoverFunc);\n+    static bool VerifyDatabaseFile(const fs::path& file_path, bilingual_str& errorStr);\n \n     template <typename K, typename T>\n     bool Read(const K& key, T& value)"
      },
      {
        "sha": "6826782073bb35ec040d5190d831c5aef96367ba",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8ebcbc85c652665b78dcfd2ad55fa67cafd42c73/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8ebcbc85c652665b78dcfd2ad55fa67cafd42c73/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=8ebcbc85c652665b78dcfd2ad55fa67cafd42c73",
        "patch": "@@ -3694,7 +3694,7 @@ bool CWallet::Verify(interfaces::Chain& chain, const WalletLocation& location, b\n         return false;\n     }\n \n-    return WalletBatch::VerifyDatabaseFile(wallet_path, warnings, error_string);\n+    return WalletBatch::VerifyDatabaseFile(wallet_path, error_string);\n }\n \n std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain, const WalletLocation& location, bilingual_str& error, std::vector<bilingual_str>& warnings, uint64_t wallet_creation_flags)"
      },
      {
        "sha": "c0c408e2ecbc4ae9f4f76fc5abaa8b7805d0993d",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8ebcbc85c652665b78dcfd2ad55fa67cafd42c73/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8ebcbc85c652665b78dcfd2ad55fa67cafd42c73/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=8ebcbc85c652665b78dcfd2ad55fa67cafd42c73",
        "patch": "@@ -922,9 +922,9 @@ bool WalletBatch::VerifyEnvironment(const fs::path& wallet_path, bilingual_str&\n     return BerkeleyBatch::VerifyEnvironment(wallet_path, errorStr);\n }\n \n-bool WalletBatch::VerifyDatabaseFile(const fs::path& wallet_path, std::vector<bilingual_str>& warnings, bilingual_str& errorStr)\n+bool WalletBatch::VerifyDatabaseFile(const fs::path& wallet_path, bilingual_str& errorStr)\n {\n-    return BerkeleyBatch::VerifyDatabaseFile(wallet_path, warnings, errorStr, WalletBatch::Recover);\n+    return BerkeleyBatch::VerifyDatabaseFile(wallet_path, errorStr);\n }\n \n bool WalletBatch::WriteDestData(const std::string &address, const std::string &key, const std::string &value)"
      },
      {
        "sha": "26c7ae4360f97e753812b2728d1f476bd385c405",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8ebcbc85c652665b78dcfd2ad55fa67cafd42c73/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8ebcbc85c652665b78dcfd2ad55fa67cafd42c73/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=8ebcbc85c652665b78dcfd2ad55fa67cafd42c73",
        "patch": "@@ -274,7 +274,7 @@ class WalletBatch\n     /* verifies the database environment */\n     static bool VerifyEnvironment(const fs::path& wallet_path, bilingual_str& errorStr);\n     /* verifies the database file */\n-    static bool VerifyDatabaseFile(const fs::path& wallet_path, std::vector<bilingual_str>& warnings, bilingual_str& errorStr);\n+    static bool VerifyDatabaseFile(const fs::path& wallet_path, bilingual_str& errorStr);\n \n     //! write the hdchain model (external chain child index counter)\n     bool WriteHDChain(const CHDChain& chain);"
      }
    ]
  },
  {
    "sha": "07250b8dcebe2b97ed0fd900ad35cba4091b8ecf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNzI1MGI4ZGNlYmUyYjk3ZWQwZmQ5MDBhZDM1Y2JhNDA5MWI4ZWNm",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-05-15T22:48:33Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-05-25T16:59:29Z"
      },
      "message": "walletdb: remove fAggressive from Salvage\n\nThe only call to Salvage set fAggressive = true so remove that parameter\nand always use DB_AGGRESSIVE",
      "tree": {
        "sha": "29ce903b15ace19b83fd55bfd3d8d8b9d33cc75c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/29ce903b15ace19b83fd55bfd3d8d8b9d33cc75c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/07250b8dcebe2b97ed0fd900ad35cba4091b8ecf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/07250b8dcebe2b97ed0fd900ad35cba4091b8ecf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/07250b8dcebe2b97ed0fd900ad35cba4091b8ecf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/07250b8dcebe2b97ed0fd900ad35cba4091b8ecf/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8ebcbc85c652665b78dcfd2ad55fa67cafd42c73",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ebcbc85c652665b78dcfd2ad55fa67cafd42c73",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8ebcbc85c652665b78dcfd2ad55fa67cafd42c73"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 4,
      "deletions": 12
    },
    "files": [
      {
        "sha": "c51401c1029affb2ae00381c70468f4a01e65f33",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 11,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/07250b8dcebe2b97ed0fd900ad35cba4091b8ecf/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/07250b8dcebe2b97ed0fd900ad35cba4091b8ecf/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=07250b8dcebe2b97ed0fd900ad35cba4091b8ecf",
        "patch": "@@ -343,7 +343,7 @@ bool BerkeleyBatch::Recover(const fs::path& file_path, void *callbackDataIn, boo\n     }\n \n     std::vector<BerkeleyEnvironment::KeyValPair> salvagedData;\n-    bool fSuccess = env->Salvage(newFilename, true, salvagedData);\n+    bool fSuccess = env->Salvage(newFilename, salvagedData);\n     if (salvagedData.empty())\n     {\n         LogPrintf(\"Salvage(aggressive) found no records in %s.\\n\", newFilename);\n@@ -425,25 +425,17 @@ static const char *HEADER_END = \"HEADER=END\";\n /* End of key/value data */\n static const char *DATA_END = \"DATA=END\";\n \n-bool BerkeleyEnvironment::Salvage(const std::string& strFile, bool fAggressive, std::vector<BerkeleyEnvironment::KeyValPair>& vResult)\n+bool BerkeleyEnvironment::Salvage(const std::string& strFile, std::vector<BerkeleyEnvironment::KeyValPair>& vResult)\n {\n     LOCK(cs_db);\n     assert(mapFileUseCount.count(strFile) == 0);\n \n-    u_int32_t flags = DB_SALVAGE;\n-    if (fAggressive)\n-        flags |= DB_AGGRESSIVE;\n-\n     std::stringstream strDump;\n \n     Db db(dbenv.get(), 0);\n-    int result = db.verify(strFile.c_str(), nullptr, &strDump, flags);\n+    int result = db.verify(strFile.c_str(), nullptr, &strDump, DB_SALVAGE | DB_AGGRESSIVE);\n     if (result == DB_VERIFY_BAD) {\n         LogPrintf(\"BerkeleyEnvironment::Salvage: Database salvage found errors, all data may not be recoverable.\\n\");\n-        if (!fAggressive) {\n-            LogPrintf(\"BerkeleyEnvironment::Salvage: Rerun with aggressive mode to ignore errors and continue.\\n\");\n-            return false;\n-        }\n     }\n     if (result != 0 && result != DB_VERIFY_BAD) {\n         LogPrintf(\"BerkeleyEnvironment::Salvage: Database salvage failed with result %d.\\n\", result);"
      },
      {
        "sha": "4543c8c7e0a7750fd7b255d096a9f5bc141d182c",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/07250b8dcebe2b97ed0fd900ad35cba4091b8ecf/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/07250b8dcebe2b97ed0fd900ad35cba4091b8ecf/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=07250b8dcebe2b97ed0fd900ad35cba4091b8ecf",
        "patch": "@@ -75,7 +75,7 @@ class BerkeleyEnvironment\n      * for huge databases.\n      */\n     typedef std::pair<std::vector<unsigned char>, std::vector<unsigned char> > KeyValPair;\n-    bool Salvage(const std::string& strFile, bool fAggressive, std::vector<KeyValPair>& vResult);\n+    bool Salvage(const std::string& strFile, std::vector<KeyValPair>& vResult);\n \n     bool Open(bool retry);\n     void Close();"
      }
    ]
  },
  {
    "sha": "ced95d0e43389fe62b5d30fcc7c42dbca0e88242",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZWQ5NWQwZTQzMzg5ZmU2MmI1ZDMwZmNjN2M0MmRiY2EwZTg4MjQy",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-05-15T22:54:18Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-05-25T16:59:29Z"
      },
      "message": "Move BerkeleyEnvironment::Salvage into BerkeleyBatch::Recover",
      "tree": {
        "sha": "9fe3918c67177101656bfbaee8f0d45f86a6844e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9fe3918c67177101656bfbaee8f0d45f86a6844e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ced95d0e43389fe62b5d30fcc7c42dbca0e88242",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ced95d0e43389fe62b5d30fcc7c42dbca0e88242",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ced95d0e43389fe62b5d30fcc7c42dbca0e88242",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ced95d0e43389fe62b5d30fcc7c42dbca0e88242/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "07250b8dcebe2b97ed0fd900ad35cba4091b8ecf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/07250b8dcebe2b97ed0fd900ad35cba4091b8ecf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/07250b8dcebe2b97ed0fd900ad35cba4091b8ecf"
      }
    ],
    "stats": {
      "total": 132,
      "additions": 62,
      "deletions": 70
    },
    "files": [
      {
        "sha": "c115786b7f42e4e7144320c63c5362a2d87bd324",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 62,
        "deletions": 61,
        "changes": 123,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ced95d0e43389fe62b5d30fcc7c42dbca0e88242/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ced95d0e43389fe62b5d30fcc7c42dbca0e88242/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=ced95d0e43389fe62b5d30fcc7c42dbca0e88242",
        "patch": "@@ -317,6 +317,12 @@ BerkeleyBatch::SafeDbt::operator Dbt*()\n     return &m_dbt;\n }\n \n+/* End of headers, beginning of key/value data */\n+static const char *HEADER_END = \"HEADER=END\";\n+/* End of key/value data */\n+static const char *DATA_END = \"DATA=END\";\n+typedef std::pair<std::vector<unsigned char>, std::vector<unsigned char> > KeyValPair;\n+\n bool BerkeleyBatch::Recover(const fs::path& file_path, void *callbackDataIn, bool (*recoverKVcallback)(void* callbackData, CDataStream ssKey, CDataStream ssValue), std::string& newFilename)\n {\n     std::string filename;\n@@ -342,8 +348,61 @@ bool BerkeleyBatch::Recover(const fs::path& file_path, void *callbackDataIn, boo\n         return false;\n     }\n \n-    std::vector<BerkeleyEnvironment::KeyValPair> salvagedData;\n-    bool fSuccess = env->Salvage(newFilename, salvagedData);\n+    /**\n+     * Salvage data from a file. The DB_AGGRESSIVE flag is being used (see berkeley DB->verify() method documentation).\n+     * key/value pairs are appended to salvagedData which are then written out to a new wallet file.\n+     * NOTE: reads the entire database into memory, so cannot be used\n+     * for huge databases.\n+     */\n+    std::vector<KeyValPair> salvagedData;\n+\n+    std::stringstream strDump;\n+\n+    Db db(env->dbenv.get(), 0);\n+    result = db.verify(newFilename.c_str(), nullptr, &strDump, DB_SALVAGE | DB_AGGRESSIVE);\n+    if (result == DB_VERIFY_BAD) {\n+        LogPrintf(\"Salvage: Database salvage found errors, all data may not be recoverable.\\n\");\n+    }\n+    if (result != 0 && result != DB_VERIFY_BAD) {\n+        LogPrintf(\"Salvage: Database salvage failed with result %d.\\n\", result);\n+        return false;\n+    }\n+\n+    // Format of bdb dump is ascii lines:\n+    // header lines...\n+    // HEADER=END\n+    //  hexadecimal key\n+    //  hexadecimal value\n+    //  ... repeated\n+    // DATA=END\n+\n+    std::string strLine;\n+    while (!strDump.eof() && strLine != HEADER_END)\n+        getline(strDump, strLine); // Skip past header\n+\n+    std::string keyHex, valueHex;\n+    while (!strDump.eof() && keyHex != DATA_END) {\n+        getline(strDump, keyHex);\n+        if (keyHex != DATA_END) {\n+            if (strDump.eof())\n+                break;\n+            getline(strDump, valueHex);\n+            if (valueHex == DATA_END) {\n+                LogPrintf(\"Salvage: WARNING: Number of keys in data does not match number of values.\\n\");\n+                break;\n+            }\n+            salvagedData.push_back(make_pair(ParseHex(keyHex), ParseHex(valueHex)));\n+        }\n+    }\n+\n+    bool fSuccess;\n+    if (keyHex != DATA_END) {\n+        LogPrintf(\"Salvage: WARNING: Unexpected end of file while reading salvage output.\\n\");\n+        fSuccess = false;\n+    } else {\n+        fSuccess = (result == 0);\n+    }\n+\n     if (salvagedData.empty())\n     {\n         LogPrintf(\"Salvage(aggressive) found no records in %s.\\n\", newFilename);\n@@ -365,7 +424,7 @@ bool BerkeleyBatch::Recover(const fs::path& file_path, void *callbackDataIn, boo\n     }\n \n     DbTxn* ptxn = env->TxnBegin();\n-    for (BerkeleyEnvironment::KeyValPair& row : salvagedData)\n+    for (KeyValPair& row : salvagedData)\n     {\n         if (recoverKVcallback)\n         {\n@@ -420,64 +479,6 @@ bool BerkeleyBatch::VerifyDatabaseFile(const fs::path& file_path, bilingual_str&\n     return true;\n }\n \n-/* End of headers, beginning of key/value data */\n-static const char *HEADER_END = \"HEADER=END\";\n-/* End of key/value data */\n-static const char *DATA_END = \"DATA=END\";\n-\n-bool BerkeleyEnvironment::Salvage(const std::string& strFile, std::vector<BerkeleyEnvironment::KeyValPair>& vResult)\n-{\n-    LOCK(cs_db);\n-    assert(mapFileUseCount.count(strFile) == 0);\n-\n-    std::stringstream strDump;\n-\n-    Db db(dbenv.get(), 0);\n-    int result = db.verify(strFile.c_str(), nullptr, &strDump, DB_SALVAGE | DB_AGGRESSIVE);\n-    if (result == DB_VERIFY_BAD) {\n-        LogPrintf(\"BerkeleyEnvironment::Salvage: Database salvage found errors, all data may not be recoverable.\\n\");\n-    }\n-    if (result != 0 && result != DB_VERIFY_BAD) {\n-        LogPrintf(\"BerkeleyEnvironment::Salvage: Database salvage failed with result %d.\\n\", result);\n-        return false;\n-    }\n-\n-    // Format of bdb dump is ascii lines:\n-    // header lines...\n-    // HEADER=END\n-    //  hexadecimal key\n-    //  hexadecimal value\n-    //  ... repeated\n-    // DATA=END\n-\n-    std::string strLine;\n-    while (!strDump.eof() && strLine != HEADER_END)\n-        getline(strDump, strLine); // Skip past header\n-\n-    std::string keyHex, valueHex;\n-    while (!strDump.eof() && keyHex != DATA_END) {\n-        getline(strDump, keyHex);\n-        if (keyHex != DATA_END) {\n-            if (strDump.eof())\n-                break;\n-            getline(strDump, valueHex);\n-            if (valueHex == DATA_END) {\n-                LogPrintf(\"BerkeleyEnvironment::Salvage: WARNING: Number of keys in data does not match number of values.\\n\");\n-                break;\n-            }\n-            vResult.push_back(make_pair(ParseHex(keyHex), ParseHex(valueHex)));\n-        }\n-    }\n-\n-    if (keyHex != DATA_END) {\n-        LogPrintf(\"BerkeleyEnvironment::Salvage: WARNING: Unexpected end of file while reading salvage output.\\n\");\n-        return false;\n-    }\n-\n-    return (result == 0);\n-}\n-\n-\n void BerkeleyEnvironment::CheckpointLSN(const std::string& strFile)\n {\n     dbenv->txn_checkpoint(0, 0, 0);"
      },
      {
        "sha": "4acb414a5b5070baa5672998d203b500403e220a",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 0,
        "deletions": 9,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ced95d0e43389fe62b5d30fcc7c42dbca0e88242/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ced95d0e43389fe62b5d30fcc7c42dbca0e88242/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=ced95d0e43389fe62b5d30fcc7c42dbca0e88242",
        "patch": "@@ -67,15 +67,6 @@ class BerkeleyEnvironment\n     fs::path Directory() const { return strPath; }\n \n     bool Verify(const std::string& strFile);\n-    /**\n-     * Salvage data from a file that Verify says is bad.\n-     * fAggressive sets the DB_AGGRESSIVE flag (see berkeley DB->verify() method documentation).\n-     * Appends binary key/value pairs to vResult, returns true if successful.\n-     * NOTE: reads the entire database into memory, so cannot be used\n-     * for huge databases.\n-     */\n-    typedef std::pair<std::vector<unsigned char>, std::vector<unsigned char> > KeyValPair;\n-    bool Salvage(const std::string& strFile, std::vector<KeyValPair>& vResult);\n \n     bool Open(bool retry);\n     void Close();"
      }
    ]
  },
  {
    "sha": "2741774214168eb287c7066d6823afe5e570381d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNzQxNzc0MjE0MTY4ZWIyODdjNzA2NmQ2ODIzYWZlNWU1NzAzODFk",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-05-15T23:15:50Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-05-25T16:59:29Z"
      },
      "message": "Expose a version of ReadKeyValue and use it in RecoverKeysOnlyFilter\n\nWe need this exposed for BerkeleyBatch::Recover to be moved out.",
      "tree": {
        "sha": "237e7fd9da491764d1d4ea2cc84dff370324337e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/237e7fd9da491764d1d4ea2cc84dff370324337e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2741774214168eb287c7066d6823afe5e570381d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2741774214168eb287c7066d6823afe5e570381d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2741774214168eb287c7066d6823afe5e570381d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2741774214168eb287c7066d6823afe5e570381d/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ced95d0e43389fe62b5d30fcc7c42dbca0e88242",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ced95d0e43389fe62b5d30fcc7c42dbca0e88242",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ced95d0e43389fe62b5d30fcc7c42dbca0e88242"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 11,
      "deletions": 3
    },
    "files": [
      {
        "sha": "c04637934ddc8df7e5d8d134b3ae90696663f5d4",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 3,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2741774214168eb287c7066d6823afe5e570381d/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2741774214168eb287c7066d6823afe5e570381d/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=2741774214168eb287c7066d6823afe5e570381d",
        "patch": "@@ -588,6 +588,13 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n     return true;\n }\n \n+bool ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue, std::string& strType, std::string& strErr)\n+{\n+    CWalletScanState dummy_wss;\n+    LOCK(pwallet->cs_wallet);\n+    return ReadKeyValue(pwallet, ssKey, ssValue, dummy_wss, strType, strErr);\n+}\n+\n bool WalletBatch::IsKeyType(const std::string& strType)\n {\n     return (strType == DBKeys::KEY ||\n@@ -896,14 +903,12 @@ bool WalletBatch::Recover(const fs::path& wallet_path, std::string& out_backup_f\n bool WalletBatch::RecoverKeysOnlyFilter(void *callbackData, CDataStream ssKey, CDataStream ssValue)\n {\n     CWallet *dummyWallet = reinterpret_cast<CWallet*>(callbackData);\n-    CWalletScanState dummyWss;\n     std::string strType, strErr;\n     bool fReadOK;\n     {\n         // Required in LoadKeyMetadata():\n         LOCK(dummyWallet->cs_wallet);\n-        fReadOK = ReadKeyValue(dummyWallet, ssKey, ssValue,\n-                               dummyWss, strType, strErr);\n+        fReadOK = ReadKeyValue(dummyWallet, ssKey, ssValue, strType, strErr);\n     }\n     if (!IsKeyType(strType) && strType != DBKeys::HDCHAIN) {\n         return false;"
      },
      {
        "sha": "155046dfba1de91e33cda4648bd32e2b861fc384",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2741774214168eb287c7066d6823afe5e570381d/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2741774214168eb287c7066d6823afe5e570381d/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=2741774214168eb287c7066d6823afe5e570381d",
        "patch": "@@ -294,4 +294,7 @@ class WalletBatch\n //! Compacts BDB state so that wallet.dat is self-contained (if there are changes)\n void MaybeCompactWalletDB();\n \n+//! Unserialize a given Key-Value pair and load it into the wallet\n+bool ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue, std::string& strType, std::string& strErr);\n+\n #endif // BITCOIN_WALLET_WALLETDB_H"
      }
    ]
  },
  {
    "sha": "b426c7764d26e280e1f814cf36e050743c45cd12",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNDI2Yzc3NjRkMjZlMjgwZTFmODE0Y2YzNmUwNTA3NDNjNDVjZDEy",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-05-15T23:24:26Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-05-25T16:59:29Z"
      },
      "message": "Make BerkeleyBatch::Recover and WalletBatch::RecoverKeysOnlyFilter standalone\n\nInstead of having these be class static functions, just make them be\nstandalone. Also removes WalletBatch::Recover which just passed through\nto BerkeleyBatch::Recover.",
      "tree": {
        "sha": "0291aa49cb78fefc8f5428e3f3fd4d662795d79c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0291aa49cb78fefc8f5428e3f3fd4d662795d79c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b426c7764d26e280e1f814cf36e050743c45cd12",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b426c7764d26e280e1f814cf36e050743c45cd12",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b426c7764d26e280e1f814cf36e050743c45cd12",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b426c7764d26e280e1f814cf36e050743c45cd12/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2741774214168eb287c7066d6823afe5e570381d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2741774214168eb287c7066d6823afe5e570381d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2741774214168eb287c7066d6823afe5e570381d"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 9,
      "deletions": 26
    },
    "files": [
      {
        "sha": "cff83e3d0113db877f5b1954cc19e925b08afb17",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b426c7764d26e280e1f814cf36e050743c45cd12/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b426c7764d26e280e1f814cf36e050743c45cd12/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=b426c7764d26e280e1f814cf36e050743c45cd12",
        "patch": "@@ -323,7 +323,7 @@ static const char *HEADER_END = \"HEADER=END\";\n static const char *DATA_END = \"DATA=END\";\n typedef std::pair<std::vector<unsigned char>, std::vector<unsigned char> > KeyValPair;\n \n-bool BerkeleyBatch::Recover(const fs::path& file_path, void *callbackDataIn, bool (*recoverKVcallback)(void* callbackData, CDataStream ssKey, CDataStream ssValue), std::string& newFilename)\n+bool RecoverDatabaseFile(const fs::path& file_path, void *callbackDataIn, bool (*recoverKVcallback)(void* callbackData, CDataStream ssKey, CDataStream ssValue), std::string& newFilename)\n {\n     std::string filename;\n     std::shared_ptr<BerkeleyEnvironment> env = GetWalletEnv(file_path, filename);"
      },
      {
        "sha": "c8024700456a981acf2257f57742fcc4271bac4e",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b426c7764d26e280e1f814cf36e050743c45cd12/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b426c7764d26e280e1f814cf36e050743c45cd12/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=b426c7764d26e280e1f814cf36e050743c45cd12",
        "patch": "@@ -226,7 +226,6 @@ class BerkeleyBatch\n \n     void Flush();\n     void Close();\n-    static bool Recover(const fs::path& file_path, void *callbackDataIn, bool (*recoverKVcallback)(void* callbackData, CDataStream ssKey, CDataStream ssValue), std::string& out_backup_filename);\n \n     /* flush the wallet passively (TRY_LOCK)\n        ideal to be called periodically */\n@@ -390,6 +389,8 @@ class BerkeleyBatch\n     bool static Rewrite(BerkeleyDatabase& database, const char* pszSkip = nullptr);\n };\n \n+bool RecoverDatabaseFile(const fs::path& file_path, void *callbackDataIn, bool (*recoverKVcallback)(void* callbackData, CDataStream ssKey, CDataStream ssValue), std::string& out_backup_filename);\n+\n std::string BerkeleyDatabaseVersion();\n \n #endif // BITCOIN_WALLET_DB_H"
      },
      {
        "sha": "2a3daf59b4f999a83c82f7882f7119d148d7ed08",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 17,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b426c7764d26e280e1f814cf36e050743c45cd12/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b426c7764d26e280e1f814cf36e050743c45cd12/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=b426c7764d26e280e1f814cf36e050743c45cd12",
        "patch": "@@ -885,22 +885,7 @@ void MaybeCompactWalletDB()\n     fOneThread = false;\n }\n \n-//\n-// Try to (very carefully!) recover wallet file if there is a problem.\n-//\n-bool WalletBatch::Recover(const fs::path& wallet_path, void *callbackDataIn, bool (*recoverKVcallback)(void* callbackData, CDataStream ssKey, CDataStream ssValue), std::string& out_backup_filename)\n-{\n-    return BerkeleyBatch::Recover(wallet_path, callbackDataIn, recoverKVcallback, out_backup_filename);\n-}\n-\n-bool WalletBatch::Recover(const fs::path& wallet_path, std::string& out_backup_filename)\n-{\n-    // recover without a key filter callback\n-    // results in recovering all record types\n-    return WalletBatch::Recover(wallet_path, nullptr, nullptr, out_backup_filename);\n-}\n-\n-bool WalletBatch::RecoverKeysOnlyFilter(void *callbackData, CDataStream ssKey, CDataStream ssValue)\n+bool RecoverKeysOnlyFilter(void *callbackData, CDataStream ssKey, CDataStream ssValue)\n {\n     CWallet *dummyWallet = reinterpret_cast<CWallet*>(callbackData);\n     std::string strType, strErr;\n@@ -910,7 +895,7 @@ bool WalletBatch::RecoverKeysOnlyFilter(void *callbackData, CDataStream ssKey, C\n         LOCK(dummyWallet->cs_wallet);\n         fReadOK = ReadKeyValue(dummyWallet, ssKey, ssValue, strType, strErr);\n     }\n-    if (!IsKeyType(strType) && strType != DBKeys::HDCHAIN) {\n+    if (!WalletBatch::IsKeyType(strType) && strType != DBKeys::HDCHAIN) {\n         return false;\n     }\n     if (!fReadOK)"
      },
      {
        "sha": "389b96189fb0ccd526fab69b7b65c973b2d52c7c",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 3,
        "deletions": 6,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b426c7764d26e280e1f814cf36e050743c45cd12/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b426c7764d26e280e1f814cf36e050743c45cd12/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=b426c7764d26e280e1f814cf36e050743c45cd12",
        "patch": "@@ -263,12 +263,6 @@ class WalletBatch\n     DBErrors FindWalletTx(std::vector<uint256>& vTxHash, std::list<CWalletTx>& vWtx);\n     DBErrors ZapWalletTx(std::list<CWalletTx>& vWtx);\n     DBErrors ZapSelectTx(std::vector<uint256>& vHashIn, std::vector<uint256>& vHashOut);\n-    /* Try to (very carefully!) recover wallet database (with a possible key type filter) */\n-    static bool Recover(const fs::path& wallet_path, void *callbackDataIn, bool (*recoverKVcallback)(void* callbackData, CDataStream ssKey, CDataStream ssValue), std::string& out_backup_filename);\n-    /* Recover convenience-function to bypass the key filter callback, called when verify fails, recovers everything */\n-    static bool Recover(const fs::path& wallet_path, std::string& out_backup_filename);\n-    /* Recover filter (used as callback), will only let keys (cryptographical keys) as KV/key-type pass through */\n-    static bool RecoverKeysOnlyFilter(void *callbackData, CDataStream ssKey, CDataStream ssValue);\n     /* Function to determine if a certain KV/key-type is a key (cryptographical key) type */\n     static bool IsKeyType(const std::string& strType);\n     /* verifies the database environment */\n@@ -297,4 +291,7 @@ void MaybeCompactWalletDB();\n //! Unserialize a given Key-Value pair and load it into the wallet\n bool ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue, std::string& strType, std::string& strErr);\n \n+/* Recover filter (used as callback), will only let keys (cryptographical keys) as KV/key-type pass through */\n+bool RecoverKeysOnlyFilter(void *callbackData, CDataStream ssKey, CDataStream ssValue);\n+\n #endif // BITCOIN_WALLET_WALLETDB_H"
      },
      {
        "sha": "2b46eef0e001ad385ed5aae66959bcdaf21b0f1e",
        "filename": "src/wallet/wallettool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b426c7764d26e280e1f814cf36e050743c45cd12/src/wallet/wallettool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b426c7764d26e280e1f814cf36e050743c45cd12/src/wallet/wallettool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallettool.cpp?ref=b426c7764d26e280e1f814cf36e050743c45cd12",
        "patch": "@@ -123,7 +123,7 @@ static bool SalvageWallet(const fs::path& path)\n     // Perform the recovery\n     CWallet dummy_wallet(nullptr, WalletLocation(), WalletDatabase::CreateDummy());\n     std::string backup_filename;\n-    return WalletBatch::Recover(path, (void*)&dummy_wallet, WalletBatch::RecoverKeysOnlyFilter, backup_filename);\n+    return RecoverDatabaseFile(path, (void*)&dummy_wallet, RecoverKeysOnlyFilter, backup_filename);\n }\n \n bool ExecuteWalletToolFunc(const std::string& command, const std::string& name)"
      }
    ]
  },
  {
    "sha": "9ea2d258b46e8a9776100633585ed0feede5c2a4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZWEyZDI1OGI0NmU4YTk3NzYxMDA2MzM1ODVlZDBmZWVkZTVjMmE0",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-05-15T23:37:55Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-05-25T16:59:29Z"
      },
      "message": "Move RecoverDatabaseFile and RecoverKeysOnlyFilter into salvage.{cpp/h}",
      "tree": {
        "sha": "9a43aee82423a3629108f1c5a237d221dd820292",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9a43aee82423a3629108f1c5a237d221dd820292"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9ea2d258b46e8a9776100633585ed0feede5c2a4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ea2d258b46e8a9776100633585ed0feede5c2a4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9ea2d258b46e8a9776100633585ed0feede5c2a4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ea2d258b46e8a9776100633585ed0feede5c2a4/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b426c7764d26e280e1f814cf36e050743c45cd12",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b426c7764d26e280e1f814cf36e050743c45cd12",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b426c7764d26e280e1f814cf36e050743c45cd12"
      }
    ],
    "stats": {
      "total": 335,
      "additions": 180,
      "deletions": 155
    },
    "files": [
      {
        "sha": "0f562433ded65e0a50c740ce1322bf5e92b5f9ee",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ea2d258b46e8a9776100633585ed0feede5c2a4/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ea2d258b46e8a9776100633585ed0feede5c2a4/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=9ea2d258b46e8a9776100633585ed0feede5c2a4",
        "patch": "@@ -243,6 +243,7 @@ BITCOIN_CORE_H = \\\n   wallet/ismine.h \\\n   wallet/load.h \\\n   wallet/rpcwallet.h \\\n+  wallet/salvage.h \\\n   wallet/scriptpubkeyman.h \\\n   wallet/wallet.h \\\n   wallet/walletdb.h \\\n@@ -351,6 +352,7 @@ libbitcoin_wallet_a_SOURCES = \\\n   wallet/load.cpp \\\n   wallet/rpcdump.cpp \\\n   wallet/rpcwallet.cpp \\\n+  wallet/salvage.cpp \\\n   wallet/scriptpubkeyman.cpp \\\n   wallet/wallet.cpp \\\n   wallet/walletdb.cpp \\"
      },
      {
        "sha": "4ed28b06230d2b7b04c96d8e114b308a9f16332e",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 128,
        "changes": 128,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ea2d258b46e8a9776100633585ed0feede5c2a4/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ea2d258b46e8a9776100633585ed0feede5c2a4/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=9ea2d258b46e8a9776100633585ed0feede5c2a4",
        "patch": "@@ -317,134 +317,6 @@ BerkeleyBatch::SafeDbt::operator Dbt*()\n     return &m_dbt;\n }\n \n-/* End of headers, beginning of key/value data */\n-static const char *HEADER_END = \"HEADER=END\";\n-/* End of key/value data */\n-static const char *DATA_END = \"DATA=END\";\n-typedef std::pair<std::vector<unsigned char>, std::vector<unsigned char> > KeyValPair;\n-\n-bool RecoverDatabaseFile(const fs::path& file_path, void *callbackDataIn, bool (*recoverKVcallback)(void* callbackData, CDataStream ssKey, CDataStream ssValue), std::string& newFilename)\n-{\n-    std::string filename;\n-    std::shared_ptr<BerkeleyEnvironment> env = GetWalletEnv(file_path, filename);\n-\n-    // Recovery procedure:\n-    // move wallet file to walletfilename.timestamp.bak\n-    // Call Salvage with fAggressive=true to\n-    // get as much data as possible.\n-    // Rewrite salvaged data to fresh wallet file\n-    // Set -rescan so any missing transactions will be\n-    // found.\n-    int64_t now = GetTime();\n-    newFilename = strprintf(\"%s.%d.bak\", filename, now);\n-\n-    int result = env->dbenv->dbrename(nullptr, filename.c_str(), nullptr,\n-                                       newFilename.c_str(), DB_AUTO_COMMIT);\n-    if (result == 0)\n-        LogPrintf(\"Renamed %s to %s\\n\", filename, newFilename);\n-    else\n-    {\n-        LogPrintf(\"Failed to rename %s to %s\\n\", filename, newFilename);\n-        return false;\n-    }\n-\n-    /**\n-     * Salvage data from a file. The DB_AGGRESSIVE flag is being used (see berkeley DB->verify() method documentation).\n-     * key/value pairs are appended to salvagedData which are then written out to a new wallet file.\n-     * NOTE: reads the entire database into memory, so cannot be used\n-     * for huge databases.\n-     */\n-    std::vector<KeyValPair> salvagedData;\n-\n-    std::stringstream strDump;\n-\n-    Db db(env->dbenv.get(), 0);\n-    result = db.verify(newFilename.c_str(), nullptr, &strDump, DB_SALVAGE | DB_AGGRESSIVE);\n-    if (result == DB_VERIFY_BAD) {\n-        LogPrintf(\"Salvage: Database salvage found errors, all data may not be recoverable.\\n\");\n-    }\n-    if (result != 0 && result != DB_VERIFY_BAD) {\n-        LogPrintf(\"Salvage: Database salvage failed with result %d.\\n\", result);\n-        return false;\n-    }\n-\n-    // Format of bdb dump is ascii lines:\n-    // header lines...\n-    // HEADER=END\n-    //  hexadecimal key\n-    //  hexadecimal value\n-    //  ... repeated\n-    // DATA=END\n-\n-    std::string strLine;\n-    while (!strDump.eof() && strLine != HEADER_END)\n-        getline(strDump, strLine); // Skip past header\n-\n-    std::string keyHex, valueHex;\n-    while (!strDump.eof() && keyHex != DATA_END) {\n-        getline(strDump, keyHex);\n-        if (keyHex != DATA_END) {\n-            if (strDump.eof())\n-                break;\n-            getline(strDump, valueHex);\n-            if (valueHex == DATA_END) {\n-                LogPrintf(\"Salvage: WARNING: Number of keys in data does not match number of values.\\n\");\n-                break;\n-            }\n-            salvagedData.push_back(make_pair(ParseHex(keyHex), ParseHex(valueHex)));\n-        }\n-    }\n-\n-    bool fSuccess;\n-    if (keyHex != DATA_END) {\n-        LogPrintf(\"Salvage: WARNING: Unexpected end of file while reading salvage output.\\n\");\n-        fSuccess = false;\n-    } else {\n-        fSuccess = (result == 0);\n-    }\n-\n-    if (salvagedData.empty())\n-    {\n-        LogPrintf(\"Salvage(aggressive) found no records in %s.\\n\", newFilename);\n-        return false;\n-    }\n-    LogPrintf(\"Salvage(aggressive) found %u records\\n\", salvagedData.size());\n-\n-    std::unique_ptr<Db> pdbCopy = MakeUnique<Db>(env->dbenv.get(), 0);\n-    int ret = pdbCopy->open(nullptr,               // Txn pointer\n-                            filename.c_str(),   // Filename\n-                            \"main\",             // Logical db name\n-                            DB_BTREE,           // Database type\n-                            DB_CREATE,          // Flags\n-                            0);\n-    if (ret > 0) {\n-        LogPrintf(\"Cannot create database file %s\\n\", filename);\n-        pdbCopy->close(0);\n-        return false;\n-    }\n-\n-    DbTxn* ptxn = env->TxnBegin();\n-    for (KeyValPair& row : salvagedData)\n-    {\n-        if (recoverKVcallback)\n-        {\n-            CDataStream ssKey(row.first, SER_DISK, CLIENT_VERSION);\n-            CDataStream ssValue(row.second, SER_DISK, CLIENT_VERSION);\n-            if (!(*recoverKVcallback)(callbackDataIn, ssKey, ssValue))\n-                continue;\n-        }\n-        Dbt datKey(&row.first[0], row.first.size());\n-        Dbt datValue(&row.second[0], row.second.size());\n-        int ret2 = pdbCopy->put(ptxn, &datKey, &datValue, DB_NOOVERWRITE);\n-        if (ret2 > 0)\n-            fSuccess = false;\n-    }\n-    ptxn->commit(0);\n-    pdbCopy->close(0);\n-\n-    return fSuccess;\n-}\n-\n bool BerkeleyBatch::VerifyEnvironment(const fs::path& file_path, bilingual_str& errorStr)\n {\n     std::string walletFile;"
      },
      {
        "sha": "54ce144ffc4b062143a6ae9383f953b433713edb",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ea2d258b46e8a9776100633585ed0feede5c2a4/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ea2d258b46e8a9776100633585ed0feede5c2a4/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=9ea2d258b46e8a9776100633585ed0feede5c2a4",
        "patch": "@@ -389,8 +389,6 @@ class BerkeleyBatch\n     bool static Rewrite(BerkeleyDatabase& database, const char* pszSkip = nullptr);\n };\n \n-bool RecoverDatabaseFile(const fs::path& file_path, void *callbackDataIn, bool (*recoverKVcallback)(void* callbackData, CDataStream ssKey, CDataStream ssValue), std::string& out_backup_filename);\n-\n std::string BerkeleyDatabaseVersion();\n \n #endif // BITCOIN_WALLET_DB_H"
      },
      {
        "sha": "99d62384903a2359f2eb0dcd20967c4eaab57df6",
        "filename": "src/wallet/salvage.cpp",
        "status": "added",
        "additions": 160,
        "deletions": 0,
        "changes": 160,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ea2d258b46e8a9776100633585ed0feede5c2a4/src/wallet/salvage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ea2d258b46e8a9776100633585ed0feede5c2a4/src/wallet/salvage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/salvage.cpp?ref=9ea2d258b46e8a9776100633585ed0feede5c2a4",
        "patch": "@@ -0,0 +1,160 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <fs.h>\n+#include <streams.h>\n+#include <wallet/salvage.h>\n+#include <wallet/wallet.h>\n+#include <wallet/walletdb.h>\n+\n+/* End of headers, beginning of key/value data */\n+static const char *HEADER_END = \"HEADER=END\";\n+/* End of key/value data */\n+static const char *DATA_END = \"DATA=END\";\n+typedef std::pair<std::vector<unsigned char>, std::vector<unsigned char> > KeyValPair;\n+\n+bool RecoverDatabaseFile(const fs::path& file_path, void *callbackDataIn, bool (*recoverKVcallback)(void* callbackData, CDataStream ssKey, CDataStream ssValue), std::string& newFilename)\n+{\n+    std::string filename;\n+    std::shared_ptr<BerkeleyEnvironment> env = GetWalletEnv(file_path, filename);\n+\n+    // Recovery procedure:\n+    // move wallet file to walletfilename.timestamp.bak\n+    // Call Salvage with fAggressive=true to\n+    // get as much data as possible.\n+    // Rewrite salvaged data to fresh wallet file\n+    // Set -rescan so any missing transactions will be\n+    // found.\n+    int64_t now = GetTime();\n+    newFilename = strprintf(\"%s.%d.bak\", filename, now);\n+\n+    int result = env->dbenv->dbrename(nullptr, filename.c_str(), nullptr,\n+                                       newFilename.c_str(), DB_AUTO_COMMIT);\n+    if (result == 0)\n+        LogPrintf(\"Renamed %s to %s\\n\", filename, newFilename);\n+    else\n+    {\n+        LogPrintf(\"Failed to rename %s to %s\\n\", filename, newFilename);\n+        return false;\n+    }\n+\n+    /**\n+     * Salvage data from a file. The DB_AGGRESSIVE flag is being used (see berkeley DB->verify() method documentation).\n+     * key/value pairs are appended to salvagedData which are then written out to a new wallet file.\n+     * NOTE: reads the entire database into memory, so cannot be used\n+     * for huge databases.\n+     */\n+    std::vector<KeyValPair> salvagedData;\n+\n+    std::stringstream strDump;\n+\n+    Db db(env->dbenv.get(), 0);\n+    result = db.verify(newFilename.c_str(), nullptr, &strDump, DB_SALVAGE | DB_AGGRESSIVE);\n+    if (result == DB_VERIFY_BAD) {\n+        LogPrintf(\"Salvage: Database salvage found errors, all data may not be recoverable.\\n\");\n+    }\n+    if (result != 0 && result != DB_VERIFY_BAD) {\n+        LogPrintf(\"Salvage: Database salvage failed with result %d.\\n\", result);\n+        return false;\n+    }\n+\n+    // Format of bdb dump is ascii lines:\n+    // header lines...\n+    // HEADER=END\n+    //  hexadecimal key\n+    //  hexadecimal value\n+    //  ... repeated\n+    // DATA=END\n+\n+    std::string strLine;\n+    while (!strDump.eof() && strLine != HEADER_END)\n+        getline(strDump, strLine); // Skip past header\n+\n+    std::string keyHex, valueHex;\n+    while (!strDump.eof() && keyHex != DATA_END) {\n+        getline(strDump, keyHex);\n+        if (keyHex != DATA_END) {\n+            if (strDump.eof())\n+                break;\n+            getline(strDump, valueHex);\n+            if (valueHex == DATA_END) {\n+                LogPrintf(\"Salvage: WARNING: Number of keys in data does not match number of values.\\n\");\n+                break;\n+            }\n+            salvagedData.push_back(make_pair(ParseHex(keyHex), ParseHex(valueHex)));\n+        }\n+    }\n+\n+    bool fSuccess;\n+    if (keyHex != DATA_END) {\n+        LogPrintf(\"Salvage: WARNING: Unexpected end of file while reading salvage output.\\n\");\n+        fSuccess = false;\n+    } else {\n+        fSuccess = (result == 0);\n+    }\n+\n+    if (salvagedData.empty())\n+    {\n+        LogPrintf(\"Salvage(aggressive) found no records in %s.\\n\", newFilename);\n+        return false;\n+    }\n+    LogPrintf(\"Salvage(aggressive) found %u records\\n\", salvagedData.size());\n+\n+    std::unique_ptr<Db> pdbCopy = MakeUnique<Db>(env->dbenv.get(), 0);\n+    int ret = pdbCopy->open(nullptr,               // Txn pointer\n+                            filename.c_str(),   // Filename\n+                            \"main\",             // Logical db name\n+                            DB_BTREE,           // Database type\n+                            DB_CREATE,          // Flags\n+                            0);\n+    if (ret > 0) {\n+        LogPrintf(\"Cannot create database file %s\\n\", filename);\n+        pdbCopy->close(0);\n+        return false;\n+    }\n+\n+    DbTxn* ptxn = env->TxnBegin();\n+    for (KeyValPair& row : salvagedData)\n+    {\n+        if (recoverKVcallback)\n+        {\n+            CDataStream ssKey(row.first, SER_DISK, CLIENT_VERSION);\n+            CDataStream ssValue(row.second, SER_DISK, CLIENT_VERSION);\n+            if (!(*recoverKVcallback)(callbackDataIn, ssKey, ssValue))\n+                continue;\n+        }\n+        Dbt datKey(&row.first[0], row.first.size());\n+        Dbt datValue(&row.second[0], row.second.size());\n+        int ret2 = pdbCopy->put(ptxn, &datKey, &datValue, DB_NOOVERWRITE);\n+        if (ret2 > 0)\n+            fSuccess = false;\n+    }\n+    ptxn->commit(0);\n+    pdbCopy->close(0);\n+\n+    return fSuccess;\n+}\n+\n+bool RecoverKeysOnlyFilter(void *callbackData, CDataStream ssKey, CDataStream ssValue)\n+{\n+    CWallet *dummyWallet = reinterpret_cast<CWallet*>(callbackData);\n+    std::string strType, strErr;\n+    bool fReadOK;\n+    {\n+        // Required in LoadKeyMetadata():\n+        LOCK(dummyWallet->cs_wallet);\n+        fReadOK = ReadKeyValue(dummyWallet, ssKey, ssValue, strType, strErr);\n+    }\n+    if (!WalletBatch::IsKeyType(strType) && strType != DBKeys::HDCHAIN) {\n+        return false;\n+    }\n+    if (!fReadOK)\n+    {\n+        LogPrintf(\"WARNING: WalletBatch::Recover skipping %s: %s\\n\", strType, strErr);\n+        return false;\n+    }\n+\n+    return true;\n+}"
      },
      {
        "sha": "e501c54456e0c6294f94e8830492c52b34979468",
        "filename": "src/wallet/salvage.h",
        "status": "added",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ea2d258b46e8a9776100633585ed0feede5c2a4/src/wallet/salvage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ea2d258b46e8a9776100633585ed0feede5c2a4/src/wallet/salvage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/salvage.h?ref=9ea2d258b46e8a9776100633585ed0feede5c2a4",
        "patch": "@@ -0,0 +1,17 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SALVAGE_H\n+#define BITCOIN_WALLET_SALVAGE_H\n+\n+#include <fs.h>\n+#include <streams.h>\n+\n+bool RecoverDatabaseFile(const fs::path& file_path, void *callbackDataIn, bool (*recoverKVcallback)(void* callbackData, CDataStream ssKey, CDataStream ssValue), std::string& out_backup_filename);\n+\n+/* Recover filter (used as callback), will only let keys (cryptographical keys) as KV/key-type pass through */\n+bool RecoverKeysOnlyFilter(void *callbackData, CDataStream ssKey, CDataStream ssValue);\n+\n+#endif // BITCOIN_WALLET_SALVAGE_H"
      },
      {
        "sha": "32fc00266011ff84aedf46d877b9616e01ddd90f",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 22,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ea2d258b46e8a9776100633585ed0feede5c2a4/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ea2d258b46e8a9776100633585ed0feede5c2a4/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=9ea2d258b46e8a9776100633585ed0feede5c2a4",
        "patch": "@@ -885,28 +885,6 @@ void MaybeCompactWalletDB()\n     fOneThread = false;\n }\n \n-bool RecoverKeysOnlyFilter(void *callbackData, CDataStream ssKey, CDataStream ssValue)\n-{\n-    CWallet *dummyWallet = reinterpret_cast<CWallet*>(callbackData);\n-    std::string strType, strErr;\n-    bool fReadOK;\n-    {\n-        // Required in LoadKeyMetadata():\n-        LOCK(dummyWallet->cs_wallet);\n-        fReadOK = ReadKeyValue(dummyWallet, ssKey, ssValue, strType, strErr);\n-    }\n-    if (!WalletBatch::IsKeyType(strType) && strType != DBKeys::HDCHAIN) {\n-        return false;\n-    }\n-    if (!fReadOK)\n-    {\n-        LogPrintf(\"WARNING: WalletBatch::Recover skipping %s: %s\\n\", strType, strErr);\n-        return false;\n-    }\n-\n-    return true;\n-}\n-\n bool WalletBatch::VerifyEnvironment(const fs::path& wallet_path, bilingual_str& errorStr)\n {\n     return BerkeleyBatch::VerifyEnvironment(wallet_path, errorStr);"
      },
      {
        "sha": "bcd1f9303d79314c4a78d84d3212800df4209f0b",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ea2d258b46e8a9776100633585ed0feede5c2a4/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ea2d258b46e8a9776100633585ed0feede5c2a4/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=9ea2d258b46e8a9776100633585ed0feede5c2a4",
        "patch": "@@ -291,7 +291,4 @@ void MaybeCompactWalletDB();\n //! Unserialize a given Key-Value pair and load it into the wallet\n bool ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue, std::string& strType, std::string& strErr);\n \n-/* Recover filter (used as callback), will only let keys (cryptographical keys) as KV/key-type pass through */\n-bool RecoverKeysOnlyFilter(void *callbackData, CDataStream ssKey, CDataStream ssValue);\n-\n #endif // BITCOIN_WALLET_WALLETDB_H"
      },
      {
        "sha": "ab5cf0061c6943c26292ff98073c8200e637e617",
        "filename": "src/wallet/wallettool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ea2d258b46e8a9776100633585ed0feede5c2a4/src/wallet/wallettool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ea2d258b46e8a9776100633585ed0feede5c2a4/src/wallet/wallettool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallettool.cpp?ref=9ea2d258b46e8a9776100633585ed0feede5c2a4",
        "patch": "@@ -5,6 +5,7 @@\n #include <fs.h>\n #include <util/system.h>\n #include <util/translation.h>\n+#include <wallet/salvage.h>\n #include <wallet/wallet.h>\n #include <wallet/walletutil.h>\n "
      }
    ]
  },
  {
    "sha": "ea337f2d0318a860f695698cfb3aa91c03ded858",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYTMzN2YyZDAzMThhODYwZjY5NTY5OGNmYjNhYTkxYzAzZGVkODU4",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-05-15T23:45:19Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-05-25T16:59:29Z"
      },
      "message": "Move RecoverKeysOnlyFilter into RecoverDataBaseFile",
      "tree": {
        "sha": "3aef1e31c2018054257081bc2e09a729b68bf301",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3aef1e31c2018054257081bc2e09a729b68bf301"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ea337f2d0318a860f695698cfb3aa91c03ded858",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea337f2d0318a860f695698cfb3aa91c03ded858",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ea337f2d0318a860f695698cfb3aa91c03ded858",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea337f2d0318a860f695698cfb3aa91c03ded858/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9ea2d258b46e8a9776100633585ed0feede5c2a4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ea2d258b46e8a9776100633585ed0feede5c2a4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9ea2d258b46e8a9776100633585ed0feede5c2a4"
      }
    ],
    "stats": {
      "total": 57,
      "additions": 21,
      "deletions": 36
    },
    "files": [
      {
        "sha": "70067ebef0462d8afd184481be1e41499de01efc",
        "filename": "src/wallet/salvage.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 29,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ea337f2d0318a860f695698cfb3aa91c03ded858/src/wallet/salvage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ea337f2d0318a860f695698cfb3aa91c03ded858/src/wallet/salvage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/salvage.cpp?ref=ea337f2d0318a860f695698cfb3aa91c03ded858",
        "patch": "@@ -15,7 +15,7 @@ static const char *HEADER_END = \"HEADER=END\";\n static const char *DATA_END = \"DATA=END\";\n typedef std::pair<std::vector<unsigned char>, std::vector<unsigned char> > KeyValPair;\n \n-bool RecoverDatabaseFile(const fs::path& file_path, void *callbackDataIn, bool (*recoverKVcallback)(void* callbackData, CDataStream ssKey, CDataStream ssValue), std::string& newFilename)\n+bool RecoverDatabaseFile(const fs::path& file_path)\n {\n     std::string filename;\n     std::shared_ptr<BerkeleyEnvironment> env = GetWalletEnv(file_path, filename);\n@@ -28,7 +28,7 @@ bool RecoverDatabaseFile(const fs::path& file_path, void *callbackDataIn, bool (\n     // Set -rescan so any missing transactions will be\n     // found.\n     int64_t now = GetTime();\n-    newFilename = strprintf(\"%s.%d.bak\", filename, now);\n+    std::string newFilename = strprintf(\"%s.%d.bak\", filename, now);\n \n     int result = env->dbenv->dbrename(nullptr, filename.c_str(), nullptr,\n                                        newFilename.c_str(), DB_AUTO_COMMIT);\n@@ -116,14 +116,26 @@ bool RecoverDatabaseFile(const fs::path& file_path, void *callbackDataIn, bool (\n     }\n \n     DbTxn* ptxn = env->TxnBegin();\n+    CWallet dummyWallet(nullptr, WalletLocation(), WalletDatabase::CreateDummy());\n     for (KeyValPair& row : salvagedData)\n     {\n-        if (recoverKVcallback)\n+        /* Filter for only private key type KV pairs to be added to the salvaged wallet */\n+        CDataStream ssKey(row.first, SER_DISK, CLIENT_VERSION);\n+        CDataStream ssValue(row.second, SER_DISK, CLIENT_VERSION);\n+        std::string strType, strErr;\n+        bool fReadOK;\n         {\n-            CDataStream ssKey(row.first, SER_DISK, CLIENT_VERSION);\n-            CDataStream ssValue(row.second, SER_DISK, CLIENT_VERSION);\n-            if (!(*recoverKVcallback)(callbackDataIn, ssKey, ssValue))\n-                continue;\n+            // Required in LoadKeyMetadata():\n+            LOCK(dummyWallet.cs_wallet);\n+            fReadOK = ReadKeyValue(&dummyWallet, ssKey, ssValue, strType, strErr);\n+        }\n+        if (!WalletBatch::IsKeyType(strType) && strType != DBKeys::HDCHAIN) {\n+            continue;\n+        }\n+        if (!fReadOK)\n+        {\n+            LogPrintf(\"WARNING: WalletBatch::Recover skipping %s: %s\\n\", strType, strErr);\n+            continue;\n         }\n         Dbt datKey(&row.first[0], row.first.size());\n         Dbt datValue(&row.second[0], row.second.size());\n@@ -136,25 +148,3 @@ bool RecoverDatabaseFile(const fs::path& file_path, void *callbackDataIn, bool (\n \n     return fSuccess;\n }\n-\n-bool RecoverKeysOnlyFilter(void *callbackData, CDataStream ssKey, CDataStream ssValue)\n-{\n-    CWallet *dummyWallet = reinterpret_cast<CWallet*>(callbackData);\n-    std::string strType, strErr;\n-    bool fReadOK;\n-    {\n-        // Required in LoadKeyMetadata():\n-        LOCK(dummyWallet->cs_wallet);\n-        fReadOK = ReadKeyValue(dummyWallet, ssKey, ssValue, strType, strErr);\n-    }\n-    if (!WalletBatch::IsKeyType(strType) && strType != DBKeys::HDCHAIN) {\n-        return false;\n-    }\n-    if (!fReadOK)\n-    {\n-        LogPrintf(\"WARNING: WalletBatch::Recover skipping %s: %s\\n\", strType, strErr);\n-        return false;\n-    }\n-\n-    return true;\n-}"
      },
      {
        "sha": "e361930f5ed90186a509de3e6c21a01731682095",
        "filename": "src/wallet/salvage.h",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ea337f2d0318a860f695698cfb3aa91c03ded858/src/wallet/salvage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ea337f2d0318a860f695698cfb3aa91c03ded858/src/wallet/salvage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/salvage.h?ref=ea337f2d0318a860f695698cfb3aa91c03ded858",
        "patch": "@@ -9,9 +9,6 @@\n #include <fs.h>\n #include <streams.h>\n \n-bool RecoverDatabaseFile(const fs::path& file_path, void *callbackDataIn, bool (*recoverKVcallback)(void* callbackData, CDataStream ssKey, CDataStream ssValue), std::string& out_backup_filename);\n-\n-/* Recover filter (used as callback), will only let keys (cryptographical keys) as KV/key-type pass through */\n-bool RecoverKeysOnlyFilter(void *callbackData, CDataStream ssKey, CDataStream ssValue);\n+bool RecoverDatabaseFile(const fs::path& file_path);\n \n #endif // BITCOIN_WALLET_SALVAGE_H"
      },
      {
        "sha": "be07c285030243ad4b7538b6336c018487ebab22",
        "filename": "src/wallet/wallettool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ea337f2d0318a860f695698cfb3aa91c03ded858/src/wallet/wallettool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ea337f2d0318a860f695698cfb3aa91c03ded858/src/wallet/wallettool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallettool.cpp?ref=ea337f2d0318a860f695698cfb3aa91c03ded858",
        "patch": "@@ -122,9 +122,7 @@ static bool SalvageWallet(const fs::path& path)\n     }\n \n     // Perform the recovery\n-    CWallet dummy_wallet(nullptr, WalletLocation(), WalletDatabase::CreateDummy());\n-    std::string backup_filename;\n-    return RecoverDatabaseFile(path, (void*)&dummy_wallet, RecoverKeysOnlyFilter, backup_filename);\n+    return RecoverDatabaseFile(path);\n }\n \n bool ExecuteWalletToolFunc(const std::string& command, const std::string& name)"
      }
    ]
  },
  {
    "sha": "84ae0578b6c68dda145ca65fef510ce0fdac0d7b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NGFlMDU3OGI2YzY4ZGRhMTQ1Y2E2NWZlZjUxMGNlMGZkYWMwZDdi",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-05-21T18:33:54Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-05-25T16:59:29Z"
      },
      "message": "Add release notes about salvage changes",
      "tree": {
        "sha": "39806b180094ad967cf64e0285d787681323af2f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/39806b180094ad967cf64e0285d787681323af2f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/84ae0578b6c68dda145ca65fef510ce0fdac0d7b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/84ae0578b6c68dda145ca65fef510ce0fdac0d7b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/84ae0578b6c68dda145ca65fef510ce0fdac0d7b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/84ae0578b6c68dda145ca65fef510ce0fdac0d7b/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ea337f2d0318a860f695698cfb3aa91c03ded858",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea337f2d0318a860f695698cfb3aa91c03ded858",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ea337f2d0318a860f695698cfb3aa91c03ded858"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "f57a62eeb7d48370697992edec0d2cc0e72916d8",
        "filename": "doc/release-notes-18918.md",
        "status": "added",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84ae0578b6c68dda145ca65fef510ce0fdac0d7b/doc/release-notes-18918.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84ae0578b6c68dda145ca65fef510ce0fdac0d7b/doc/release-notes-18918.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-18918.md?ref=84ae0578b6c68dda145ca65fef510ce0fdac0d7b",
        "patch": "@@ -0,0 +1,3 @@\n+# Wallet\n+\n+The `-salvagewallet` startup option has been removed. A new `salvage` command has been added to the `bitcoin-wallet` tool which performs the salvage operations that `-salvagewallet` did."
      }
    ]
  },
  {
    "sha": "14f8447777465ffc8eb644bad1dbc52362c4362f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNGY4NDQ3Nzc3NDY1ZmZjOGViNjQ0YmFkMWRiYzUyMzYyYzQzNjJm",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2020-05-26T00:30:35Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2020-05-26T00:55:22Z"
      },
      "message": "Merge #19059: gui: update Qt base translations for macOS release\n\n69bfcac27a83440092bc6e61904ded910ed4baf4 gui: update Qt base translations for macOS release (fanquake)\n\nPull request description:\n\n  These haven't been updated since their addition, so this updates the list that\n  controls which qt base translations are bundled with the macOS binary, to all the\n  languages that are available with qt 5.9.8.\n\n  This could probably be improved in some way, however qt updates are infrequent,\n  and I didn't want to spend any more time looking at this. Also given that no-one\n  seems to have noticed and/or reported this it wouldn't seem high-priority.\n\n  Could be backported to 0.20.1.\n\n  Master:\n  ![master](https://user-images.githubusercontent.com/863730/82729428-11bce200-9d2a-11ea-8569-ee65d46c7403.png)\n\n  This PR:\n  ![fixed](https://user-images.githubusercontent.com/863730/82729427-0f5a8800-9d2a-11ea-86dd-1e6a3e211efa.png)\n\nACKs for top commit:\n  hebasto:\n    ACK 69bfcac27a83440092bc6e61904ded910ed4baf4, tested on macOS 10.15.\n\nTree-SHA512: df142fb16097deb514e72e005b73aafc4eb4ff0c17e423ba5040a3ec6874020a733e1c5259a88923580e71ef73c16222aed28f482b8c270a544a85b745a7b327",
      "tree": {
        "sha": "77d1ce2cac423b2a8deffb79b5d435213664011f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/77d1ce2cac423b2a8deffb79b5d435213664011f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/14f8447777465ffc8eb644bad1dbc52362c4362f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl7MaPoACgkQLuufXMCV\nJsFGxxAAnWsuQb3cXYhFwKKmpEGwSHvH3M5tMzdYSgQ9z2aWtDK3DGVcum0Q4MjP\nJyFBshgbzbn7xLgmJbZsXhfswMMz8SX8sh9IJrYUj9c4UDszXZQRkhdSLVdyVuu2\nE/uNeeQgFRN4bnGStMbGyX7Y3/7/FWTaFfHOUpUIm8h3Q5Qh7XmzN3ge3KJbiewJ\nFB+4D+5lUg76CLvPPJ/HJV+32b6WvxQkv0WkBFr4UdTLLNhMBl7TPbaP4S5iAh/c\nSEW2sUs8zKkmeN8/QVSwjJNlVzDfFYuEdxco/hbO4rPvk1gNzg2po6JMRfnOG6R5\nUQCUG+o3BDIuBYpGbSVnGJH8WGPLKcdhDNwNGYOzkD7TwuwFwZ/dHOhQXD7AL0oh\nBN1YcDwARE0/BOZaE0oH/fDEwPs1piIWYfWUuFtvxaBmWabqRxHDN7dtazc11iQ5\nKTmmcJKbb0hTV2a8kIo5I+wK6S7FA4bXtACwlSkv9ZO1bBgt5tIxbwpjrllwznLU\nzH9c/wLtdqsPHHdSzmNzHXoeMM2SMw0hNRagSf7ejhjF+DFURCJL23C5i5V4cnE/\nGbSrhdT93Sdjpu2p2H3jQaIStnAysQt/BMPwYBVUy6XSZ4bPPzNVoEkUGBX7+VmX\n+7dR6n/NmHs6TZeP/eAEAmY4RJPw85Ipct+EHGvf70qfV81tszo=\n=ZSSz\n-----END PGP SIGNATURE-----",
        "payload": "tree 77d1ce2cac423b2a8deffb79b5d435213664011f\nparent 24f70290642c9c5108d3dc62dbe055f5d1bcff9d\nparent 69bfcac27a83440092bc6e61904ded910ed4baf4\nauthor fanquake <fanquake@gmail.com> 1590453035 +0800\ncommitter fanquake <fanquake@gmail.com> 1590454522 +0800\n\nMerge #19059: gui: update Qt base translations for macOS release\n\n69bfcac27a83440092bc6e61904ded910ed4baf4 gui: update Qt base translations for macOS release (fanquake)\n\nPull request description:\n\n  These haven't been updated since their addition, so this updates the list that\n  controls which qt base translations are bundled with the macOS binary, to all the\n  languages that are available with qt 5.9.8.\n\n  This could probably be improved in some way, however qt updates are infrequent,\n  and I didn't want to spend any more time looking at this. Also given that no-one\n  seems to have noticed and/or reported this it wouldn't seem high-priority.\n\n  Could be backported to 0.20.1.\n\n  Master:\n  ![master](https://user-images.githubusercontent.com/863730/82729428-11bce200-9d2a-11ea-8569-ee65d46c7403.png)\n\n  This PR:\n  ![fixed](https://user-images.githubusercontent.com/863730/82729427-0f5a8800-9d2a-11ea-86dd-1e6a3e211efa.png)\n\nACKs for top commit:\n  hebasto:\n    ACK 69bfcac27a83440092bc6e61904ded910ed4baf4, tested on macOS 10.15.\n\nTree-SHA512: df142fb16097deb514e72e005b73aafc4eb4ff0c17e423ba5040a3ec6874020a733e1c5259a88923580e71ef73c16222aed28f482b8c270a544a85b745a7b327\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14f8447777465ffc8eb644bad1dbc52362c4362f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/14f8447777465ffc8eb644bad1dbc52362c4362f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14f8447777465ffc8eb644bad1dbc52362c4362f/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "24f70290642c9c5108d3dc62dbe055f5d1bcff9d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/24f70290642c9c5108d3dc62dbe055f5d1bcff9d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/24f70290642c9c5108d3dc62dbe055f5d1bcff9d"
      },
      {
        "sha": "69bfcac27a83440092bc6e61904ded910ed4baf4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/69bfcac27a83440092bc6e61904ded910ed4baf4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/69bfcac27a83440092bc6e61904ded910ed4baf4"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "45dab3930d622df1049cbb9495871fbbe391034d",
        "filename": "Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14f8447777465ffc8eb644bad1dbc52362c4362f/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14f8447777465ffc8eb644bad1dbc52362c4362f/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=14f8447777465ffc8eb644bad1dbc52362c4362f",
        "patch": "@@ -41,7 +41,7 @@ OSX_DEPLOY_SCRIPT=$(top_srcdir)/contrib/macdeploy/macdeployqtplus\n OSX_FANCY_PLIST=$(top_srcdir)/contrib/macdeploy/fancy.plist\n OSX_INSTALLER_ICONS=$(top_srcdir)/src/qt/res/icons/bitcoin.icns\n OSX_PLIST=$(top_builddir)/share/qt/Info.plist #not installed\n-OSX_QT_TRANSLATIONS = da,de,es,hu,ru,uk,zh_CN,zh_TW\n+OSX_QT_TRANSLATIONS = ar,bg,ca,cs,da,de,es,fa,fi,fr,gd,gl,he,hu,it,ja,ko,lt,lv,pl,pt,ru,sk,sl,sv,uk,zh_CN,zh_TW\n \n DIST_CONTRIB = \\\n \t       $(top_srcdir)/contrib/linearize/linearize-data.py \\"
      },
      {
        "sha": "631851855a0bd79533d8fbab0d3f5391fa204c0d",
        "filename": "depends/packages/qt.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14f8447777465ffc8eb644bad1dbc52362c4362f/depends/packages/qt.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14f8447777465ffc8eb644bad1dbc52362c4362f/depends/packages/qt.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/qt.mk?ref=14f8447777465ffc8eb644bad1dbc52362c4362f",
        "patch": "@@ -10,6 +10,7 @@ $(package)_build_subdir=qtbase\n $(package)_qt_libs=corelib network widgets gui plugins testlib\n $(package)_patches=fix_qt_pkgconfig.patch mac-qmake.conf fix_configure_mac.patch fix_no_printer.patch fix_rcc_determinism.patch fix_riscv64_arch.patch xkb-default.patch no-xlib.patch fix_android_qmake_conf.patch fix_android_jni_static.patch\n \n+# Update OSX_QT_TRANSLATIONS when this is updated\n $(package)_qttranslations_file_name=qttranslations-$($(package)_suffix)\n $(package)_qttranslations_sha256_hash=fb5a47799754af73d3bf501fe513342cfe2fc37f64e80df5533f6110e804220c\n "
      }
    ]
  },
  {
    "sha": "7d32cce3e75b99ea7f7ec829b04945f9d2d898ce",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZDMyY2NlM2U3NWI5OWVhN2Y3ZWM4MjliMDQ5NDVmOWQyZDg5OGNl",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-05-26T11:20:17Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-05-26T11:27:00Z"
      },
      "message": "Merge #19010: net processing: Add support for getcfheaders\n\n5308c97ccaf0955e5840956bc1636108a43e6f46 [test] Add test for cfheaders (Jim Posen)\nf6b58c150686e90bc4952976e488b1605f3ae02a [net processing] Message handling for getcfheaders. (Jim Posen)\n3bdc7c2d3977a7864aacea80bffc4df7f37cac51 [doc] Add comment for m_headers_cache (John Newbery)\n\nPull request description:\n\n  Support `getcfheaders` requests when `-peerblockfilters` is set.\n\n  Does not advertise compact filter support in version messages.\n\nACKs for top commit:\n  jkczyz:\n    ACK 5308c97ccaf0955e5840956bc1636108a43e6f46\n  MarcoFalke:\n    re-ACK 5308c97cca , only change is doc related \ud83d\uddc2\n  theStack:\n    ACK 5308c97ccaf0955e5840956bc1636108a43e6f46 :rocket:\n\nTree-SHA512: 240fc654f6f634c191d9f7628b6c4801f87ed514a1dd55c7de5d454d4012d1c09509a2d5a246bc7da445cd920252b4cd56a493c060cdb207b04af4ffe53b95f7",
      "tree": {
        "sha": "2ab4c116fbc40387b77ecc111a572b0e286724f7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2ab4c116fbc40387b77ecc111a572b0e286724f7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7d32cce3e75b99ea7f7ec829b04945f9d2d898ce",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUjdFgv9G7aVju9KRNzJTCxN5M45hlwaGqK4W7lrFGUxcRtFpwCOeYDxG9bTwwR7\nW+XCda135GzFvO9DSEGrfaIe4iQvPbZBYUu9uujrdfd4NLbWWVeqPBxiT5VfL8EO\njXYts73vlHey36EjNG5C2jm5Bl5vMd0yg2cDwencD1L3p8oIiNsi8qDw5RMP4j/d\navga4mET3yV4uBJQNvQrAA9Z1dVMlP7lJMQLqauDNzBLSRBeGI/WYBZjzut/I4nj\nGz0+M1jQZqyTONyPSTN9wgVn2hiYSr5EkRZQ+fq9sbf107pqh9/HNIrV7r00/AtB\nrp9u98GoUnDbOZ/Whsed1zW5hlgbNjOZKJbOPILx4FIEvgoHwgFwBEcr67Tff4ij\nqOnEWbRdaFpCQPd0wG7NRRvxpDPMoFGDcj/a6GHumA1UhfFu3hFUIqOZpJMFTDFB\nmreurrb9QkL5pIIfNFvf5JGgyYKDcl9L82dxXfCXMaAuZ3mO1HxXbiMxTUtapNsE\nbVuGzGan\n=ILRi\n-----END PGP SIGNATURE-----",
        "payload": "tree 2ab4c116fbc40387b77ecc111a572b0e286724f7\nparent 14f8447777465ffc8eb644bad1dbc52362c4362f\nparent 5308c97ccaf0955e5840956bc1636108a43e6f46\nauthor MarcoFalke <falke.marco@gmail.com> 1590492017 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1590492420 -0400\n\nMerge #19010: net processing: Add support for getcfheaders\n\n5308c97ccaf0955e5840956bc1636108a43e6f46 [test] Add test for cfheaders (Jim Posen)\nf6b58c150686e90bc4952976e488b1605f3ae02a [net processing] Message handling for getcfheaders. (Jim Posen)\n3bdc7c2d3977a7864aacea80bffc4df7f37cac51 [doc] Add comment for m_headers_cache (John Newbery)\n\nPull request description:\n\n  Support `getcfheaders` requests when `-peerblockfilters` is set.\n\n  Does not advertise compact filter support in version messages.\n\nACKs for top commit:\n  jkczyz:\n    ACK 5308c97ccaf0955e5840956bc1636108a43e6f46\n  MarcoFalke:\n    re-ACK 5308c97cca , only change is doc related \ud83d\uddc2\n  theStack:\n    ACK 5308c97ccaf0955e5840956bc1636108a43e6f46 :rocket:\n\nTree-SHA512: 240fc654f6f634c191d9f7628b6c4801f87ed514a1dd55c7de5d454d4012d1c09509a2d5a246bc7da445cd920252b4cd56a493c060cdb207b04af4ffe53b95f7\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7d32cce3e75b99ea7f7ec829b04945f9d2d898ce",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7d32cce3e75b99ea7f7ec829b04945f9d2d898ce",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7d32cce3e75b99ea7f7ec829b04945f9d2d898ce/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "14f8447777465ffc8eb644bad1dbc52362c4362f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14f8447777465ffc8eb644bad1dbc52362c4362f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/14f8447777465ffc8eb644bad1dbc52362c4362f"
      },
      {
        "sha": "5308c97ccaf0955e5840956bc1636108a43e6f46",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5308c97ccaf0955e5840956bc1636108a43e6f46",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5308c97ccaf0955e5840956bc1636108a43e6f46"
      }
    ],
    "stats": {
      "total": 214,
      "additions": 208,
      "deletions": 6
    },
    "files": [
      {
        "sha": "317f8c0e40fe71019b05d815d02e0b07cd768ef3",
        "filename": "src/index/blockfilterindex.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d32cce3e75b99ea7f7ec829b04945f9d2d898ce/src/index/blockfilterindex.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d32cce3e75b99ea7f7ec829b04945f9d2d898ce/src/index/blockfilterindex.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/blockfilterindex.h?ref=7d32cce3e75b99ea7f7ec829b04945f9d2d898ce",
        "patch": "@@ -39,6 +39,7 @@ class BlockFilterIndex final : public BaseIndex\n     size_t WriteFilterToDisk(FlatFilePos& pos, const BlockFilter& filter);\n \n     Mutex m_cs_headers_cache;\n+    /** cache of block hash to filter header, to avoid disk access when responding to getcfcheckpt. */\n     std::unordered_map<uint256, uint256, FilterHeaderHasher> m_headers_cache GUARDED_BY(m_cs_headers_cache);\n \n protected:"
      },
      {
        "sha": "159036a23763f3e371226c1850a5c0a697c126c5",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 83,
        "deletions": 3,
        "changes": 86,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d32cce3e75b99ea7f7ec829b04945f9d2d898ce/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d32cce3e75b99ea7f7ec829b04945f9d2d898ce/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=7d32cce3e75b99ea7f7ec829b04945f9d2d898ce",
        "patch": "@@ -129,6 +129,8 @@ static constexpr unsigned int INVENTORY_BROADCAST_MAX = 7 * INVENTORY_BROADCAST_\n static constexpr unsigned int AVG_FEEFILTER_BROADCAST_INTERVAL = 10 * 60;\n /** Maximum feefilter broadcast delay after significant change. */\n static constexpr unsigned int MAX_FEEFILTER_CHANGE_DELAY = 5 * 60;\n+/** Maximum number of cf hashes that may be requested with one getcfheaders. See BIP 157. */\n+static constexpr uint32_t MAX_GETCFHEADERS_SIZE = 2000;\n \n struct COrphanTx {\n     // When modifying, adapt the copy of this definition in tests/DoS_tests.\n@@ -1989,14 +1991,16 @@ void static ProcessOrphanTx(CConnman* connman, CTxMemPool& mempool, std::set<uin\n  * @param[in]   pfrom           The peer that we received the request from\n  * @param[in]   chain_params    Chain parameters\n  * @param[in]   filter_type     The filter type the request is for. Must be basic filters.\n+ * @param[in]   start_height    The start height for the request\n  * @param[in]   stop_hash       The stop_hash for the request\n+ * @param[in]   max_height_diff The maximum number of items permitted to request, as specified in BIP 157\n  * @param[out]  stop_index      The CBlockIndex for the stop_hash block, if the request can be serviced.\n  * @param[out]  filter_index    The filter index, if the request can be serviced.\n  * @return                      True if the request can be serviced.\n  */\n static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n-                                      BlockFilterType filter_type,\n-                                      const uint256& stop_hash,\n+                                      BlockFilterType filter_type, uint32_t start_height,\n+                                      const uint256& stop_hash, uint32_t max_height_diff,\n                                       const CBlockIndex*& stop_index,\n                                       BlockFilterIndex*& filter_index)\n {\n@@ -2023,6 +2027,21 @@ static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_pa\n         }\n     }\n \n+    uint32_t stop_height = stop_index->nHeight;\n+    if (start_height > stop_height) {\n+        LogPrint(BCLog::NET, \"peer %d sent invalid getcfilters/getcfheaders with \" /* Continued */\n+                 \"start height %d and stop height %d\\n\",\n+                 pfrom->GetId(), start_height, stop_height);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+    if (stop_height - start_height >= max_height_diff) {\n+        LogPrint(BCLog::NET, \"peer %d requested too many cfilters/cfheaders: %d / %d\\n\",\n+                 pfrom->GetId(), stop_height - start_height + 1, max_height_diff);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n     filter_index = GetBlockFilterIndex(filter_type);\n     if (!filter_index) {\n         LogPrint(BCLog::NET, \"Filter index for supported type %s not found\\n\", BlockFilterTypeName(filter_type));\n@@ -2032,6 +2051,61 @@ static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_pa\n     return true;\n }\n \n+/**\n+ * Handle a cfheaders request.\n+ *\n+ * May disconnect from the peer in the case of a bad request.\n+ *\n+ * @param[in]   pfrom           The peer that we received the request from\n+ * @param[in]   vRecv           The raw message received\n+ * @param[in]   chain_params    Chain parameters\n+ * @param[in]   connman         Pointer to the connection manager\n+ */\n+static void ProcessGetCFHeaders(CNode* pfrom, CDataStream& vRecv, const CChainParams& chain_params,\n+                                CConnman* connman)\n+{\n+    uint8_t filter_type_ser;\n+    uint32_t start_height;\n+    uint256 stop_hash;\n+\n+    vRecv >> filter_type_ser >> start_height >> stop_hash;\n+\n+    const BlockFilterType filter_type = static_cast<BlockFilterType>(filter_type_ser);\n+\n+    const CBlockIndex* stop_index;\n+    BlockFilterIndex* filter_index;\n+    if (!PrepareBlockFilterRequest(pfrom, chain_params, filter_type, start_height, stop_hash,\n+                                   MAX_GETCFHEADERS_SIZE, stop_index, filter_index)) {\n+        return;\n+    }\n+\n+    uint256 prev_header;\n+    if (start_height > 0) {\n+        const CBlockIndex* const prev_block =\n+            stop_index->GetAncestor(static_cast<int>(start_height - 1));\n+        if (!filter_index->LookupFilterHeader(prev_block, prev_header)) {\n+            LogPrint(BCLog::NET, \"Failed to find block filter header in index: filter_type=%s, block_hash=%s\\n\",\n+                         BlockFilterTypeName(filter_type), prev_block->GetBlockHash().ToString());\n+            return;\n+        }\n+    }\n+\n+    std::vector<uint256> filter_hashes;\n+    if (!filter_index->LookupFilterHashRange(start_height, stop_index, filter_hashes)) {\n+        LogPrint(BCLog::NET, \"Failed to find block filter hashes in index: filter_type=%s, start_height=%d, stop_hash=%s\\n\",\n+                     BlockFilterTypeName(filter_type), start_height, stop_hash.ToString());\n+        return;\n+    }\n+\n+    CSerializedNetMsg msg = CNetMsgMaker(pfrom->GetSendVersion())\n+        .Make(NetMsgType::CFHEADERS,\n+              filter_type_ser,\n+              stop_index->GetBlockHash(),\n+              prev_header,\n+              filter_hashes);\n+    connman->PushMessage(pfrom, std::move(msg));\n+}\n+\n /**\n  * Handle a getcfcheckpt request.\n  *\n@@ -2054,7 +2128,8 @@ static void ProcessGetCFCheckPt(CNode* pfrom, CDataStream& vRecv, const CChainPa\n \n     const CBlockIndex* stop_index;\n     BlockFilterIndex* filter_index;\n-    if (!PrepareBlockFilterRequest(pfrom, chain_params, filter_type, stop_hash,\n+    if (!PrepareBlockFilterRequest(pfrom, chain_params, filter_type, /*start_height=*/0, stop_hash,\n+                                   /*max_height_diff=*/std::numeric_limits<uint32_t>::max(),\n                                    stop_index, filter_index)) {\n         return;\n     }\n@@ -3391,6 +3466,11 @@ bool ProcessMessage(CNode* pfrom, const std::string& msg_type, CDataStream& vRec\n         return true;\n     }\n \n+    if (msg_type == NetMsgType::GETCFHEADERS) {\n+        ProcessGetCFHeaders(pfrom, vRecv, chainparams, connman);\n+        return true;\n+    }\n+\n     if (msg_type == NetMsgType::GETCFCHECKPT) {\n         ProcessGetCFCheckPt(pfrom, vRecv, chainparams, connman);\n         return true;"
      },
      {
        "sha": "243111c449191acc30f4620a29b8cd1ca9711fd9",
        "filename": "src/protocol.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d32cce3e75b99ea7f7ec829b04945f9d2d898ce/src/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d32cce3e75b99ea7f7ec829b04945f9d2d898ce/src/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.cpp?ref=7d32cce3e75b99ea7f7ec829b04945f9d2d898ce",
        "patch": "@@ -40,6 +40,8 @@ const char *SENDCMPCT=\"sendcmpct\";\n const char *CMPCTBLOCK=\"cmpctblock\";\n const char *GETBLOCKTXN=\"getblocktxn\";\n const char *BLOCKTXN=\"blocktxn\";\n+const char *GETCFHEADERS=\"getcfheaders\";\n+const char *CFHEADERS=\"cfheaders\";\n const char *GETCFCHECKPT=\"getcfcheckpt\";\n const char *CFCHECKPT=\"cfcheckpt\";\n } // namespace NetMsgType\n@@ -73,6 +75,8 @@ const static std::string allNetMessageTypes[] = {\n     NetMsgType::CMPCTBLOCK,\n     NetMsgType::GETBLOCKTXN,\n     NetMsgType::BLOCKTXN,\n+    NetMsgType::GETCFHEADERS,\n+    NetMsgType::CFHEADERS,\n     NetMsgType::GETCFCHECKPT,\n     NetMsgType::CFCHECKPT,\n };"
      },
      {
        "sha": "9527dce960516b261513901d6c6e71195087569e",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 13,
        "deletions": 2,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d32cce3e75b99ea7f7ec829b04945f9d2d898ce/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d32cce3e75b99ea7f7ec829b04945f9d2d898ce/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=7d32cce3e75b99ea7f7ec829b04945f9d2d898ce",
        "patch": "@@ -225,6 +225,19 @@ extern const char* GETBLOCKTXN;\n  * @since protocol version 70014 as described by BIP 152\n  */\n extern const char* BLOCKTXN;\n+/**\n+ * getcfheaders requests a compact filter header and the filter hashes for a\n+ * range of blocks, which can then be used to reconstruct the filter headers\n+ * for those blocks.\n+ * Only available with service bit NODE_COMPACT_FILTERS as described by\n+ * BIP 157 & 158.\n+ */\n+extern const char* GETCFHEADERS;\n+/**\n+ * cfheaders is a response to a getcfheaders request containing a filter header\n+ * and a vector of filter hashes for each subsequent block in the requested range.\n+ */\n+extern const char* CFHEADERS;\n /**\n  * getcfcheckpt requests evenly spaced compact filter headers, enabling\n  * parallelized download and validation of the headers between them.\n@@ -235,8 +248,6 @@ extern const char* GETCFCHECKPT;\n /**\n  * cfcheckpt is a response to a getcfcheckpt request containing a vector of\n  * evenly spaced filter headers for blocks on the requested chain.\n- * Only available with service bit NODE_COMPACT_FILTERS as described by\n- * BIP 157 & 158.\n  */\n extern const char* CFCHECKPT;\n }; // namespace NetMsgType"
      },
      {
        "sha": "9ff76b4b3d71162bc6b2205691467f5822b207f3",
        "filename": "test/functional/p2p_blockfilters.py",
        "status": "modified",
        "additions": 51,
        "deletions": 1,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d32cce3e75b99ea7f7ec829b04945f9d2d898ce/test/functional/p2p_blockfilters.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d32cce3e75b99ea7f7ec829b04945f9d2d898ce/test/functional/p2p_blockfilters.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_blockfilters.py?ref=7d32cce3e75b99ea7f7ec829b04945f9d2d898ce",
        "patch": "@@ -5,12 +5,16 @@\n \"\"\"Tests NODE_COMPACT_FILTERS (BIP 157/158).\n \n Tests that a node configured with -blockfilterindex and -peerblockfilters can serve\n-cfcheckpts.\n+cfheaders and cfcheckpts.\n \"\"\"\n \n from test_framework.messages import (\n     FILTER_TYPE_BASIC,\n+    hash256,\n     msg_getcfcheckpt,\n+    msg_getcfheaders,\n+    ser_uint256,\n+    uint256_from_str,\n )\n from test_framework.mininode import P2PInterface\n from test_framework.test_framework import BitcoinTestFramework\n@@ -100,12 +104,45 @@ def run_test(self):\n             [int(header, 16) for header in (stale_cfcheckpt,)]\n         )\n \n+        self.log.info(\"Check that peers can fetch cfheaders on active chain.\")\n+        request = msg_getcfheaders(\n+            filter_type=FILTER_TYPE_BASIC,\n+            start_height=1,\n+            stop_hash=int(main_block_hash, 16)\n+        )\n+        node0.send_and_ping(request)\n+        response = node0.last_message['cfheaders']\n+        assert_equal(len(response.hashes), 1000)\n+        assert_equal(\n+            compute_last_header(response.prev_header, response.hashes),\n+            int(main_cfcheckpt, 16)\n+        )\n+\n+        self.log.info(\"Check that peers can fetch cfheaders on stale chain.\")\n+        request = msg_getcfheaders(\n+            filter_type=FILTER_TYPE_BASIC,\n+            start_height=1,\n+            stop_hash=int(stale_block_hash, 16)\n+        )\n+        node0.send_and_ping(request)\n+        response = node0.last_message['cfheaders']\n+        assert_equal(len(response.hashes), 1000)\n+        assert_equal(\n+            compute_last_header(response.prev_header, response.hashes),\n+            int(stale_cfcheckpt, 16)\n+        )\n+\n         self.log.info(\"Requests to node 1 without NODE_COMPACT_FILTERS results in disconnection.\")\n         requests = [\n             msg_getcfcheckpt(\n                 filter_type=FILTER_TYPE_BASIC,\n                 stop_hash=int(main_block_hash, 16)\n             ),\n+            msg_getcfheaders(\n+                filter_type=FILTER_TYPE_BASIC,\n+                start_height=1000,\n+                stop_hash=int(main_block_hash, 16)\n+            ),\n         ]\n         for request in requests:\n             node1 = self.nodes[1].add_p2p_connection(P2PInterface())\n@@ -114,6 +151,12 @@ def run_test(self):\n \n         self.log.info(\"Check that invalid requests result in disconnection.\")\n         requests = [\n+            # Requesting too many filter headers results in disconnection.\n+            msg_getcfheaders(\n+                filter_type=FILTER_TYPE_BASIC,\n+                start_height=0,\n+                stop_hash=int(tip_hash, 16)\n+            ),\n             # Requesting unknown filter type results in disconnection.\n             msg_getcfcheckpt(\n                 filter_type=255,\n@@ -130,5 +173,12 @@ def run_test(self):\n             node0.send_message(request)\n             node0.wait_for_disconnect()\n \n+def compute_last_header(prev_header, hashes):\n+    \"\"\"Compute the last filter header from a starting header and a sequence of filter hashes.\"\"\"\n+    header = ser_uint256(prev_header)\n+    for filter_hash in hashes:\n+        header = hash256(ser_uint256(filter_hash) + header)\n+    return uint256_from_str(header)\n+\n if __name__ == '__main__':\n     CompactFiltersTest().main()"
      },
      {
        "sha": "d178e79541636eeca3dcd57bc9ae3684ee5c0434",
        "filename": "test/functional/test_framework/messages.py",
        "status": "modified",
        "additions": 53,
        "deletions": 0,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d32cce3e75b99ea7f7ec829b04945f9d2d898ce/test/functional/test_framework/messages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d32cce3e75b99ea7f7ec829b04945f9d2d898ce/test/functional/test_framework/messages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/messages.py?ref=7d32cce3e75b99ea7f7ec829b04945f9d2d898ce",
        "patch": "@@ -1516,6 +1516,59 @@ class msg_no_witness_blocktxn(msg_blocktxn):\n     def serialize(self):\n         return self.block_transactions.serialize(with_witness=False)\n \n+class msg_getcfheaders:\n+    __slots__ = (\"filter_type\", \"start_height\", \"stop_hash\")\n+    msgtype =  b\"getcfheaders\"\n+\n+    def __init__(self, filter_type, start_height, stop_hash):\n+        self.filter_type = filter_type\n+        self.start_height = start_height\n+        self.stop_hash = stop_hash\n+\n+    def deserialize(self, f):\n+        self.filter_type = struct.unpack(\"<B\", f.read(1))[0]\n+        self.start_height = struct.unpack(\"<I\", f.read(4))[0]\n+        self.stop_hash = deser_uint256(f)\n+\n+    def serialize(self):\n+        r = b\"\"\n+        r += struct.pack(\"<B\", self.filter_type)\n+        r += struct.pack(\"<I\", self.start_height)\n+        r += ser_uint256(self.stop_hash)\n+        return r\n+\n+    def __repr__(self):\n+        return \"msg_getcfheaders(filter_type={:#x}, start_height={}, stop_hash={:x})\".format(\n+            self.filter_type, self.start_height, self.stop_hash)\n+\n+class msg_cfheaders:\n+    __slots__ = (\"filter_type\", \"stop_hash\", \"prev_header\", \"hashes\")\n+    msgtype =  b\"cfheaders\"\n+\n+    def __init__(self, filter_type=None, stop_hash=None, prev_header=None, hashes=None):\n+        self.filter_type = filter_type\n+        self.stop_hash = stop_hash\n+        self.prev_header = prev_header\n+        self.hashes = hashes\n+\n+    def deserialize(self, f):\n+        self.filter_type = struct.unpack(\"<B\", f.read(1))[0]\n+        self.stop_hash = deser_uint256(f)\n+        self.prev_header = deser_uint256(f)\n+        self.hashes = deser_uint256_vector(f)\n+\n+    def serialize(self):\n+        r = b\"\"\n+        r += struct.pack(\"<B\", self.filter_type)\n+        r += ser_uint256(self.stop_hash)\n+        r += ser_uint256(self.prev_header)\n+        r += ser_uint256_vector(self.hashes)\n+        return r\n+\n+    def __repr__(self):\n+        return \"msg_cfheaders(filter_type={:#x}, stop_hash={:x})\".format(\n+            self.filter_type, self.stop_hash)\n+\n class msg_getcfcheckpt:\n     __slots__ = (\"filter_type\", \"stop_hash\")\n     msgtype =  b\"getcfcheckpt\""
      },
      {
        "sha": "4609703057306736689184992569fddc471aac75",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d32cce3e75b99ea7f7ec829b04945f9d2d898ce/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d32cce3e75b99ea7f7ec829b04945f9d2d898ce/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=7d32cce3e75b99ea7f7ec829b04945f9d2d898ce",
        "patch": "@@ -31,6 +31,7 @@\n     msg_block,\n     MSG_BLOCK,\n     msg_blocktxn,\n+    msg_cfheaders,\n     msg_cfcheckpt,\n     msg_cmpctblock,\n     msg_feefilter,\n@@ -68,6 +69,7 @@\n     b\"addr\": msg_addr,\n     b\"block\": msg_block,\n     b\"blocktxn\": msg_blocktxn,\n+    b\"cfheaders\": msg_cfheaders,\n     b\"cfcheckpt\": msg_cfcheckpt,\n     b\"cmpctblock\": msg_cmpctblock,\n     b\"feefilter\": msg_feefilter,\n@@ -330,6 +332,7 @@ def on_close(self):\n     def on_addr(self, message): pass\n     def on_block(self, message): pass\n     def on_blocktxn(self, message): pass\n+    def on_cfheaders(self, message): pass\n     def on_cfcheckpt(self, message): pass\n     def on_cmpctblock(self, message): pass\n     def on_feefilter(self, message): pass"
      }
    ]
  },
  {
    "sha": "d3b0ef80f6533e58e1ce4a5cbdaa9919872033fa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkM2IwZWY4MGY2NTMzZTU4ZTFjZTRhNWNiZGFhOTkxOTg3MjAzM2Zh",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-05-26T11:29:35Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-05-26T11:29:44Z"
      },
      "message": "Merge #18867: tests: Add fuzzing harness for CCoinsViewCache\n\nf9b22e3bdb54acb2f830b3ebbad47ff17dfb5781 tests: Add fuzzing harness for CCoinsViewCache (practicalswift)\n\nPull request description:\n\n  Add fuzzing harness for `CCoinsViewCache`.\n\n  See [`doc/fuzzing.md`](https://github.com/bitcoin/bitcoin/blob/master/doc/fuzzing.md) for information on how to fuzz Bitcoin Core. Don't forget to contribute any coverage increasing inputs you find to the [Bitcoin Core fuzzing corpus repo](https://github.com/bitcoin-core/qa-assets).\n\n  Happy fuzzing :)\n\nACKs for top commit:\n  MarcoFalke:\n    ACK f9b22e3bdb \ud83d\udceb\n\nTree-SHA512: 4fa79aab683875eef128b672cf199909c86e4d2ed7c406f006fa27a546dafc9cb0061c4de5e660e622458072f1dab69dbf6b6b03d5b863f81c5710bf4cee6c0c",
      "tree": {
        "sha": "7189aacbcd2d59ced19059dce9f7c54fa0f4d852",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7189aacbcd2d59ced19059dce9f7c54fa0f4d852"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d3b0ef80f6533e58e1ce4a5cbdaa9919872033fa",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUj/ygv8CzecgxDVsUJB38TpKdo9rUGa3NjSBSCWJwAVhvIqIqoGL8LCRBeCUp9N\nPQTVTfZn+npkHbV3ScOvbNP9Xb8SjNGxPAubDHN8YFr3VuGXPdlyT+UhHVQvEDKy\nk/RZFP7qmUxFoj6+dOwtT32zg7bsGFkbCW+1hAoSfG9P3LZBLXSbvkIaNd/jz0KC\n+ilIOwsnzbPjia9OwPXlI2rPPzzOuNMFRuRV8gCrjDlBMG8L4uA/NI9cUvaxHn0q\nxi6SC5wNKtHsKhhfcwG2mvqUmKKHGrkECB61OBG+p8FoEEYs3w7R4qcF1wdtSkxA\nxBa1Hrg1mDWLwUpX8hX2UDSymo2S3oPtD6LRduIrcvIlmoveMgSzW1JUDCkTF5Mg\nzPD0Hkl/UW9VJ9QyCn5JFROK4bM6Pt6fGW+3/U3nbJoHP2sOZgn+ixn5+gKqn/aK\nmBg3UckE88KXlsfWr8ZGfplIFUsh9pJ1jVNyEJJkrFbAaPpm/gJGAYnsHcl38nBz\nuFP3Axve\n=WFSN\n-----END PGP SIGNATURE-----",
        "payload": "tree 7189aacbcd2d59ced19059dce9f7c54fa0f4d852\nparent 7d32cce3e75b99ea7f7ec829b04945f9d2d898ce\nparent f9b22e3bdb54acb2f830b3ebbad47ff17dfb5781\nauthor MarcoFalke <falke.marco@gmail.com> 1590492575 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1590492584 -0400\n\nMerge #18867: tests: Add fuzzing harness for CCoinsViewCache\n\nf9b22e3bdb54acb2f830b3ebbad47ff17dfb5781 tests: Add fuzzing harness for CCoinsViewCache (practicalswift)\n\nPull request description:\n\n  Add fuzzing harness for `CCoinsViewCache`.\n\n  See [`doc/fuzzing.md`](https://github.com/bitcoin/bitcoin/blob/master/doc/fuzzing.md) for information on how to fuzz Bitcoin Core. Don't forget to contribute any coverage increasing inputs you find to the [Bitcoin Core fuzzing corpus repo](https://github.com/bitcoin-core/qa-assets).\n\n  Happy fuzzing :)\n\nACKs for top commit:\n  MarcoFalke:\n    ACK f9b22e3bdb \ud83d\udceb\n\nTree-SHA512: 4fa79aab683875eef128b672cf199909c86e4d2ed7c406f006fa27a546dafc9cb0061c4de5e660e622458072f1dab69dbf6b6b03d5b863f81c5710bf4cee6c0c\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3b0ef80f6533e58e1ce4a5cbdaa9919872033fa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d3b0ef80f6533e58e1ce4a5cbdaa9919872033fa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3b0ef80f6533e58e1ce4a5cbdaa9919872033fa/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7d32cce3e75b99ea7f7ec829b04945f9d2d898ce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7d32cce3e75b99ea7f7ec829b04945f9d2d898ce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7d32cce3e75b99ea7f7ec829b04945f9d2d898ce"
      },
      {
        "sha": "f9b22e3bdb54acb2f830b3ebbad47ff17dfb5781",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f9b22e3bdb54acb2f830b3ebbad47ff17dfb5781",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f9b22e3bdb54acb2f830b3ebbad47ff17dfb5781"
      }
    ],
    "stats": {
      "total": 313,
      "additions": 313,
      "deletions": 0
    },
    "files": [
      {
        "sha": "2480cdadbbd4ab704ca3d511c108220ade629cbb",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d3b0ef80f6533e58e1ce4a5cbdaa9919872033fa/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d3b0ef80f6533e58e1ce4a5cbdaa9919872033fa/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=d3b0ef80f6533e58e1ce4a5cbdaa9919872033fa",
        "patch": "@@ -31,6 +31,7 @@ FUZZ_TARGETS = \\\n   test/fuzz/chain \\\n   test/fuzz/checkqueue \\\n   test/fuzz/coins_deserialize \\\n+  test/fuzz/coins_view \\\n   test/fuzz/cuckoocache \\\n   test/fuzz/decode_tx \\\n   test/fuzz/descriptor_parse \\\n@@ -466,6 +467,12 @@ test_fuzz_coins_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_coins_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n test_fuzz_coins_deserialize_SOURCES = test/fuzz/deserialize.cpp\n \n+test_fuzz_coins_view_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_coins_view_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_coins_view_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_coins_view_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_coins_view_SOURCES = test/fuzz/coins_view.cpp\n+\n test_fuzz_cuckoocache_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n test_fuzz_cuckoocache_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_cuckoocache_LDADD = $(FUZZ_SUITE_LD_COMMON)"
      },
      {
        "sha": "52dd62a14561d5138d2f56018eb5d9e8f2edb2e2",
        "filename": "src/test/fuzz/coins_view.cpp",
        "status": "added",
        "additions": 294,
        "deletions": 0,
        "changes": 294,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d3b0ef80f6533e58e1ce4a5cbdaa9919872033fa/src/test/fuzz/coins_view.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d3b0ef80f6533e58e1ce4a5cbdaa9919872033fa/src/test/fuzz/coins_view.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/coins_view.cpp?ref=d3b0ef80f6533e58e1ce4a5cbdaa9919872033fa",
        "patch": "@@ -0,0 +1,294 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <amount.h>\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <coins.h>\n+#include <consensus/tx_verify.h>\n+#include <consensus/validation.h>\n+#include <key.h>\n+#include <node/coinstats.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <pubkey.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <validation.h>\n+\n+#include <cstdint>\n+#include <limits>\n+#include <optional>\n+#include <string>\n+#include <vector>\n+\n+namespace {\n+const Coin EMPTY_COIN{};\n+\n+bool operator==(const Coin& a, const Coin& b)\n+{\n+    if (a.IsSpent() && b.IsSpent()) return true;\n+    return a.fCoinBase == b.fCoinBase && a.nHeight == b.nHeight && a.out == b.out;\n+}\n+} // namespace\n+\n+void initialize()\n+{\n+    static const ECCVerifyHandle ecc_verify_handle;\n+    ECC_Start();\n+    SelectParams(CBaseChainParams::REGTEST);\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    CCoinsView backend_coins_view;\n+    CCoinsViewCache coins_view_cache{&backend_coins_view};\n+    COutPoint random_out_point;\n+    Coin random_coin;\n+    CMutableTransaction random_mutable_transaction;\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 9)) {\n+        case 0: {\n+            if (random_coin.IsSpent()) {\n+                break;\n+            }\n+            Coin coin = random_coin;\n+            bool expected_code_path = false;\n+            const bool possible_overwrite = fuzzed_data_provider.ConsumeBool();\n+            try {\n+                coins_view_cache.AddCoin(random_out_point, std::move(coin), possible_overwrite);\n+                expected_code_path = true;\n+            } catch (const std::logic_error& e) {\n+                if (e.what() == std::string{\"Attempted to overwrite an unspent coin (when possible_overwrite is false)\"}) {\n+                    assert(!possible_overwrite);\n+                    expected_code_path = true;\n+                }\n+            }\n+            assert(expected_code_path);\n+            break;\n+        }\n+        case 1: {\n+            (void)coins_view_cache.Flush();\n+            break;\n+        }\n+        case 2: {\n+            coins_view_cache.SetBestBlock(ConsumeUInt256(fuzzed_data_provider));\n+            break;\n+        }\n+        case 3: {\n+            Coin move_to;\n+            (void)coins_view_cache.SpendCoin(random_out_point, fuzzed_data_provider.ConsumeBool() ? &move_to : nullptr);\n+            break;\n+        }\n+        case 4: {\n+            coins_view_cache.Uncache(random_out_point);\n+            break;\n+        }\n+        case 5: {\n+            if (fuzzed_data_provider.ConsumeBool()) {\n+                backend_coins_view = CCoinsView{};\n+            }\n+            coins_view_cache.SetBackend(backend_coins_view);\n+            break;\n+        }\n+        case 6: {\n+            const std::optional<COutPoint> opt_out_point = ConsumeDeserializable<COutPoint>(fuzzed_data_provider);\n+            if (!opt_out_point) {\n+                break;\n+            }\n+            random_out_point = *opt_out_point;\n+            break;\n+        }\n+        case 7: {\n+            const std::optional<Coin> opt_coin = ConsumeDeserializable<Coin>(fuzzed_data_provider);\n+            if (!opt_coin) {\n+                break;\n+            }\n+            random_coin = *opt_coin;\n+            break;\n+        }\n+        case 8: {\n+            const std::optional<CMutableTransaction> opt_mutable_transaction = ConsumeDeserializable<CMutableTransaction>(fuzzed_data_provider);\n+            if (!opt_mutable_transaction) {\n+                break;\n+            }\n+            random_mutable_transaction = *opt_mutable_transaction;\n+            break;\n+        }\n+        case 9: {\n+            CCoinsMap coins_map;\n+            while (fuzzed_data_provider.ConsumeBool()) {\n+                CCoinsCacheEntry coins_cache_entry;\n+                coins_cache_entry.flags = fuzzed_data_provider.ConsumeIntegral<unsigned char>();\n+                if (fuzzed_data_provider.ConsumeBool()) {\n+                    coins_cache_entry.coin = random_coin;\n+                } else {\n+                    const std::optional<Coin> opt_coin = ConsumeDeserializable<Coin>(fuzzed_data_provider);\n+                    if (!opt_coin) {\n+                        break;\n+                    }\n+                    coins_cache_entry.coin = *opt_coin;\n+                }\n+                coins_map.emplace(random_out_point, std::move(coins_cache_entry));\n+            }\n+            bool expected_code_path = false;\n+            try {\n+                coins_view_cache.BatchWrite(coins_map, fuzzed_data_provider.ConsumeBool() ? ConsumeUInt256(fuzzed_data_provider) : coins_view_cache.GetBestBlock());\n+                expected_code_path = true;\n+            } catch (const std::logic_error& e) {\n+                if (e.what() == std::string{\"FRESH flag misapplied to coin that exists in parent cache\"}) {\n+                    expected_code_path = true;\n+                }\n+            }\n+            assert(expected_code_path);\n+            break;\n+        }\n+        }\n+    }\n+\n+    {\n+        const Coin& coin_using_access_coin = coins_view_cache.AccessCoin(random_out_point);\n+        const bool exists_using_access_coin = !(coin_using_access_coin == EMPTY_COIN);\n+        const bool exists_using_have_coin = coins_view_cache.HaveCoin(random_out_point);\n+        const bool exists_using_have_coin_in_cache = coins_view_cache.HaveCoinInCache(random_out_point);\n+        Coin coin_using_get_coin;\n+        const bool exists_using_get_coin = coins_view_cache.GetCoin(random_out_point, coin_using_get_coin);\n+        if (exists_using_get_coin) {\n+            assert(coin_using_get_coin == coin_using_access_coin);\n+        }\n+        assert((exists_using_access_coin && exists_using_have_coin_in_cache && exists_using_have_coin && exists_using_get_coin) ||\n+               (!exists_using_access_coin && !exists_using_have_coin_in_cache && !exists_using_have_coin && !exists_using_get_coin));\n+        const bool exists_using_have_coin_in_backend = backend_coins_view.HaveCoin(random_out_point);\n+        if (exists_using_have_coin_in_backend) {\n+            assert(exists_using_have_coin);\n+        }\n+        Coin coin_using_backend_get_coin;\n+        if (backend_coins_view.GetCoin(random_out_point, coin_using_backend_get_coin)) {\n+            assert(exists_using_have_coin_in_backend);\n+            assert(coin_using_get_coin == coin_using_backend_get_coin);\n+        } else {\n+            assert(!exists_using_have_coin_in_backend);\n+        }\n+    }\n+\n+    {\n+        bool expected_code_path = false;\n+        try {\n+            (void)coins_view_cache.Cursor();\n+        } catch (const std::logic_error&) {\n+            expected_code_path = true;\n+        }\n+        assert(expected_code_path);\n+        (void)coins_view_cache.DynamicMemoryUsage();\n+        (void)coins_view_cache.EstimateSize();\n+        (void)coins_view_cache.GetBestBlock();\n+        (void)coins_view_cache.GetCacheSize();\n+        (void)coins_view_cache.GetHeadBlocks();\n+        (void)coins_view_cache.HaveInputs(CTransaction{random_mutable_transaction});\n+    }\n+\n+    {\n+        const CCoinsViewCursor* coins_view_cursor = backend_coins_view.Cursor();\n+        assert(coins_view_cursor == nullptr);\n+        (void)backend_coins_view.EstimateSize();\n+        (void)backend_coins_view.GetBestBlock();\n+        (void)backend_coins_view.GetHeadBlocks();\n+    }\n+\n+    if (fuzzed_data_provider.ConsumeBool()) {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 6)) {\n+        case 0: {\n+            const CTransaction transaction{random_mutable_transaction};\n+            bool is_spent = false;\n+            for (const CTxOut& tx_out : transaction.vout) {\n+                if (Coin{tx_out, 0, transaction.IsCoinBase()}.IsSpent()) {\n+                    is_spent = true;\n+                }\n+            }\n+            if (is_spent) {\n+                // Avoid:\n+                // coins.cpp:69: void CCoinsViewCache::AddCoin(const COutPoint &, Coin &&, bool): Assertion `!coin.IsSpent()' failed.\n+                break;\n+            }\n+            bool expected_code_path = false;\n+            const int height = fuzzed_data_provider.ConsumeIntegral<int>();\n+            const bool possible_overwrite = fuzzed_data_provider.ConsumeBool();\n+            try {\n+                AddCoins(coins_view_cache, transaction, height, possible_overwrite);\n+                expected_code_path = true;\n+            } catch (const std::logic_error& e) {\n+                if (e.what() == std::string{\"Attempted to overwrite an unspent coin (when possible_overwrite is false)\"}) {\n+                    assert(!possible_overwrite);\n+                    expected_code_path = true;\n+                }\n+            }\n+            assert(expected_code_path);\n+            break;\n+        }\n+        case 1: {\n+            (void)AreInputsStandard(CTransaction{random_mutable_transaction}, coins_view_cache);\n+            break;\n+        }\n+        case 2: {\n+            TxValidationState state;\n+            CAmount tx_fee_out;\n+            const CTransaction transaction{random_mutable_transaction};\n+            if (ContainsSpentInput(transaction, coins_view_cache)) {\n+                // Avoid:\n+                // consensus/tx_verify.cpp:171: bool Consensus::CheckTxInputs(const CTransaction &, TxValidationState &, const CCoinsViewCache &, int, CAmount &): Assertion `!coin.IsSpent()' failed.\n+                break;\n+            }\n+            try {\n+                (void)Consensus::CheckTxInputs(transaction, state, coins_view_cache, fuzzed_data_provider.ConsumeIntegralInRange<int>(0, std::numeric_limits<int>::max()), tx_fee_out);\n+                assert(MoneyRange(tx_fee_out));\n+            } catch (const std::runtime_error&) {\n+            }\n+            break;\n+        }\n+        case 3: {\n+            const CTransaction transaction{random_mutable_transaction};\n+            if (ContainsSpentInput(transaction, coins_view_cache)) {\n+                // Avoid:\n+                // consensus/tx_verify.cpp:130: unsigned int GetP2SHSigOpCount(const CTransaction &, const CCoinsViewCache &): Assertion `!coin.IsSpent()' failed.\n+                break;\n+            }\n+            (void)GetP2SHSigOpCount(transaction, coins_view_cache);\n+            break;\n+        }\n+        case 4: {\n+            const CTransaction transaction{random_mutable_transaction};\n+            if (ContainsSpentInput(transaction, coins_view_cache)) {\n+                // Avoid:\n+                // consensus/tx_verify.cpp:130: unsigned int GetP2SHSigOpCount(const CTransaction &, const CCoinsViewCache &): Assertion `!coin.IsSpent()' failed.\n+                break;\n+            }\n+            const int flags = fuzzed_data_provider.ConsumeIntegral<int>();\n+            if (!transaction.vin.empty() && (flags & SCRIPT_VERIFY_WITNESS) != 0 && (flags & SCRIPT_VERIFY_P2SH) == 0) {\n+                // Avoid:\n+                // script/interpreter.cpp:1705: size_t CountWitnessSigOps(const CScript &, const CScript &, const CScriptWitness *, unsigned int): Assertion `(flags & SCRIPT_VERIFY_P2SH) != 0' failed.\n+                break;\n+            }\n+            (void)GetTransactionSigOpCost(transaction, coins_view_cache, flags);\n+            break;\n+        }\n+        case 5: {\n+            CCoinsStats stats;\n+            bool expected_code_path = false;\n+            try {\n+                (void)GetUTXOStats(&coins_view_cache, stats);\n+            } catch (const std::logic_error&) {\n+                expected_code_path = true;\n+            }\n+            assert(expected_code_path);\n+            break;\n+        }\n+        case 6: {\n+            (void)IsWitnessStandard(CTransaction{random_mutable_transaction}, coins_view_cache);\n+            break;\n+        }\n+        }\n+    }\n+}"
      },
      {
        "sha": "9d0fb02128baa93538e2abae0d9ba4083f684525",
        "filename": "src/test/fuzz/util.h",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d3b0ef80f6533e58e1ce4a5cbdaa9919872033fa/src/test/fuzz/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d3b0ef80f6533e58e1ce4a5cbdaa9919872033fa/src/test/fuzz/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/util.h?ref=d3b0ef80f6533e58e1ce4a5cbdaa9919872033fa",
        "patch": "@@ -8,6 +8,7 @@\n #include <amount.h>\n #include <arith_uint256.h>\n #include <attributes.h>\n+#include <coins.h>\n #include <consensus/consensus.h>\n #include <primitives/transaction.h>\n #include <script/script.h>\n@@ -149,4 +150,15 @@ NODISCARD bool AdditionOverflow(const T i, const T j) noexcept\n     return std::numeric_limits<T>::max() - i < j;\n }\n \n+NODISCARD inline bool ContainsSpentInput(const CTransaction& tx, const CCoinsViewCache& inputs) noexcept\n+{\n+    for (const CTxIn& tx_in : tx.vin) {\n+        const Coin& coin = inputs.AccessCoin(tx_in.prevout);\n+        if (coin.IsSpent()) {\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n+\n #endif // BITCOIN_TEST_FUZZ_UTIL_H"
      }
    ]
  },
  {
    "sha": "13397dc78fd6a6a57bdc91db66c51788603267bb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMzM5N2RjNzhmZDZhNmE1N2JkYzkxZGI2NmM1MTc4ODYwMzI2N2Ji",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-05-26T11:32:14Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-05-26T11:33:43Z"
      },
      "message": "Merge #19056: rpc: Make gettxoutsetinfo/GetUTXOStats interruptible\n\nfa756928c3f455943086051c5fe1d5bb09962248 rpc: Make gettxoutsetinfo/GetUTXOStats interruptible (MarcoFalke)\nfa7fc5a8e0fcf9ca81e84b3631f18ae40502be60 rpc: factor out RpcInterruptionPoint from dumptxoutset (MarcoFalke)\n\nPull request description:\n\n  Make it interruptible, so that shutdown doesn't block for up to one hour.\n\n  Fixes (partially) #13217\n\nACKs for top commit:\n  Empact:\n    Code Review ACK https://github.com/bitcoin/bitcoin/pull/19056/commits/fa756928c3f455943086051c5fe1d5bb09962248\n  laanwj:\n    Code review ACK fa756928c3f455943086051c5fe1d5bb09962248\n\nTree-SHA512: 298261e0ff7d79fab542b8f6828cc0ac451cbafe396d5f0816c9d36437faba1330f5c4cb2a25c5540e202bfb9783da6ec858bd453056ce488d21e36335d3d42c",
      "tree": {
        "sha": "1c6c78f1020c4c48da91e05b5aa767240d1129f0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1c6c78f1020c4c48da91e05b5aa767240d1129f0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/13397dc78fd6a6a57bdc91db66c51788603267bb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUjIAAv7BXV0ghBbcanuzbMWk4lde1OKJvCQ0Z0FWKE8S8/gY6+Vd3ZfmfUYob1J\nTxsPvNurrbnycyRVQAhIxRYOU20tUQj9fdfO/5YAXe0niIOgKHJT0T7Vt0/Eqblh\n2owMVGNOSVdekz1ZYqsDKcX4CKKXSMVzIRDLqV2A90xdYc+Zx8jx7/tm2XI5s4NI\njvQuhkC7Xy44gWozj6npyU8jcrUUXAaSniPXGPp5ItuhgLGx8k+Y1+pBoLCx3cq1\nlam6KksL1E8KnXxtoryGc2+1TVPRn/Mw9oh1e5GtW33N2JQdskvOTOvXOIbI9I/i\nprWKbm2atHGsQ4ErI+96fvzMDnTm7H2IBZWhXIozunVDtjpKC6UutbbQnYJCePWp\nGGApOGLWTSvY/fpVpUKHUBAqR9I1JT4WmvEADug2sTfXQL+4YIOYICJgOSS0U3da\naqt2TU5fPmOOgwRCfmCc2ySNZZ5YTWE5wWqNICT91Z0l888KF1708ONAm2djWa1s\nQwLZ8qJy\n=hhG5\n-----END PGP SIGNATURE-----",
        "payload": "tree 1c6c78f1020c4c48da91e05b5aa767240d1129f0\nparent d3b0ef80f6533e58e1ce4a5cbdaa9919872033fa\nparent fa756928c3f455943086051c5fe1d5bb09962248\nauthor MarcoFalke <falke.marco@gmail.com> 1590492734 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1590492823 -0400\n\nMerge #19056: rpc: Make gettxoutsetinfo/GetUTXOStats interruptible\n\nfa756928c3f455943086051c5fe1d5bb09962248 rpc: Make gettxoutsetinfo/GetUTXOStats interruptible (MarcoFalke)\nfa7fc5a8e0fcf9ca81e84b3631f18ae40502be60 rpc: factor out RpcInterruptionPoint from dumptxoutset (MarcoFalke)\n\nPull request description:\n\n  Make it interruptible, so that shutdown doesn't block for up to one hour.\n\n  Fixes (partially) #13217\n\nACKs for top commit:\n  Empact:\n    Code Review ACK https://github.com/bitcoin/bitcoin/pull/19056/commits/fa756928c3f455943086051c5fe1d5bb09962248\n  laanwj:\n    Code review ACK fa756928c3f455943086051c5fe1d5bb09962248\n\nTree-SHA512: 298261e0ff7d79fab542b8f6828cc0ac451cbafe396d5f0816c9d36437faba1330f5c4cb2a25c5540e202bfb9783da6ec858bd453056ce488d21e36335d3d42c\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/13397dc78fd6a6a57bdc91db66c51788603267bb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/13397dc78fd6a6a57bdc91db66c51788603267bb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/13397dc78fd6a6a57bdc91db66c51788603267bb/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d3b0ef80f6533e58e1ce4a5cbdaa9919872033fa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3b0ef80f6533e58e1ce4a5cbdaa9919872033fa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d3b0ef80f6533e58e1ce4a5cbdaa9919872033fa"
      },
      {
        "sha": "fa756928c3f455943086051c5fe1d5bb09962248",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa756928c3f455943086051c5fe1d5bb09962248",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa756928c3f455943086051c5fe1d5bb09962248"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 18,
      "deletions": 9
    },
    "files": [
      {
        "sha": "e3c4c828b65759dbfeb8116093ebccb420c39b60",
        "filename": "src/node/coinstats.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13397dc78fd6a6a57bdc91db66c51788603267bb/src/node/coinstats.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13397dc78fd6a6a57bdc91db66c51788603267bb/src/node/coinstats.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/coinstats.cpp?ref=13397dc78fd6a6a57bdc91db66c51788603267bb",
        "patch": "@@ -33,7 +33,7 @@ static void ApplyStats(CCoinsStats &stats, CHashWriter& ss, const uint256& hash,\n }\n \n //! Calculate statistics about the unspent transaction output set\n-bool GetUTXOStats(CCoinsView *view, CCoinsStats &stats)\n+bool GetUTXOStats(CCoinsView* view, CCoinsStats& stats, const std::function<void()>& interruption_point)\n {\n     stats = CCoinsStats();\n     std::unique_ptr<CCoinsViewCursor> pcursor(view->Cursor());\n@@ -49,6 +49,7 @@ bool GetUTXOStats(CCoinsView *view, CCoinsStats &stats)\n     uint256 prevkey;\n     std::map<uint32_t, Coin> outputs;\n     while (pcursor->Valid()) {\n+        interruption_point();\n         COutPoint key;\n         Coin coin;\n         if (pcursor->GetKey(key) && pcursor->GetValue(coin)) {"
      },
      {
        "sha": "d9cdaa30360649c000d7998be7d49c68d021e387",
        "filename": "src/node/coinstats.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13397dc78fd6a6a57bdc91db66c51788603267bb/src/node/coinstats.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13397dc78fd6a6a57bdc91db66c51788603267bb/src/node/coinstats.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/coinstats.h?ref=13397dc78fd6a6a57bdc91db66c51788603267bb",
        "patch": "@@ -10,6 +10,7 @@\n #include <uint256.h>\n \n #include <cstdint>\n+#include <functional>\n \n class CCoinsView;\n \n@@ -29,6 +30,6 @@ struct CCoinsStats\n };\n \n //! Calculate statistics about the unspent transaction output set\n-bool GetUTXOStats(CCoinsView* view, CCoinsStats& stats);\n+bool GetUTXOStats(CCoinsView* view, CCoinsStats& stats, const std::function<void()>& interruption_point = {});\n \n #endif // BITCOIN_NODE_COINSTATS_H"
      },
      {
        "sha": "7d43de6646c7bc626c91ac4a9540f816005857c2",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13397dc78fd6a6a57bdc91db66c51788603267bb/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13397dc78fd6a6a57bdc91db66c51788603267bb/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=13397dc78fd6a6a57bdc91db66c51788603267bb",
        "patch": "@@ -996,7 +996,7 @@ static UniValue gettxoutsetinfo(const JSONRPCRequest& request)\n     ::ChainstateActive().ForceFlushStateToDisk();\n \n     CCoinsView* coins_view = WITH_LOCK(cs_main, return &ChainstateActive().CoinsDB());\n-    if (GetUTXOStats(coins_view, stats)) {\n+    if (GetUTXOStats(coins_view, stats, RpcInterruptionPoint)) {\n         ret.pushKV(\"height\", (int64_t)stats.nHeight);\n         ret.pushKV(\"bestblock\", stats.hashBlock.GetHex());\n         ret.pushKV(\"transactions\", (int64_t)stats.nTransactions);\n@@ -1974,6 +1974,7 @@ bool FindScriptPubKey(std::atomic<int>& scan_progress, const std::atomic<bool>&\n         Coin coin;\n         if (!cursor->GetKey(key) || !cursor->GetValue(coin)) return false;\n         if (++count % 8192 == 0) {\n+            RpcInterruptionPoint();\n             if (should_abort) {\n                 // allow to abort the scan via the abort reference\n                 return false;\n@@ -2317,7 +2318,7 @@ UniValue dumptxoutset(const JSONRPCRequest& request)\n \n         ::ChainstateActive().ForceFlushStateToDisk();\n \n-        if (!GetUTXOStats(&::ChainstateActive().CoinsDB(), stats)) {\n+        if (!GetUTXOStats(&::ChainstateActive().CoinsDB(), stats, RpcInterruptionPoint)) {\n             throw JSONRPCError(RPC_INTERNAL_ERROR, \"Unable to read UTXO set\");\n         }\n \n@@ -2335,9 +2336,7 @@ UniValue dumptxoutset(const JSONRPCRequest& request)\n     unsigned int iter{0};\n \n     while (pcursor->Valid()) {\n-        if (iter % 5000 == 0 && !IsRPCRunning()) {\n-            throw JSONRPCError(RPC_CLIENT_NOT_CONNECTED, \"Shutting down\");\n-        }\n+        if (iter % 5000 == 0) RpcInterruptionPoint();\n         ++iter;\n         if (pcursor->GetKey(key) && pcursor->GetValue(coin)) {\n             afile << key;"
      },
      {
        "sha": "99c649d15a2b8e32ac4cb6d2f5524ef0a4173ee2",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13397dc78fd6a6a57bdc91db66c51788603267bb/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13397dc78fd6a6a57bdc91db66c51788603267bb/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=13397dc78fd6a6a57bdc91db66c51788603267bb",
        "patch": "@@ -11,9 +11,9 @@\n #include <util/strencodings.h>\n #include <util/system.h>\n \n-#include <boost/signals2/signal.hpp>\n #include <boost/algorithm/string/classification.hpp>\n #include <boost/algorithm/string/split.hpp>\n+#include <boost/signals2/signal.hpp>\n \n #include <memory> // for unique_ptr\n #include <unordered_map>\n@@ -309,6 +309,11 @@ bool IsRPCRunning()\n     return g_rpc_running;\n }\n \n+void RpcInterruptionPoint()\n+{\n+    if (!IsRPCRunning()) throw JSONRPCError(RPC_CLIENT_NOT_CONNECTED, \"Shutting down\");\n+}\n+\n void SetRPCWarmupStatus(const std::string& newStatus)\n {\n     LOCK(cs_rpcWarmup);"
      },
      {
        "sha": "d7a04ff6e8b08c72300256345c3e8cd9fb283fe7",
        "filename": "src/rpc/server.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13397dc78fd6a6a57bdc91db66c51788603267bb/src/rpc/server.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13397dc78fd6a6a57bdc91db66c51788603267bb/src/rpc/server.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.h?ref=13397dc78fd6a6a57bdc91db66c51788603267bb",
        "patch": "@@ -9,10 +9,10 @@\n #include <amount.h>\n #include <rpc/request.h>\n \n+#include <functional>\n #include <map>\n #include <stdint.h>\n #include <string>\n-#include <functional>\n \n #include <univalue.h>\n \n@@ -29,6 +29,9 @@ namespace RPCServer\n /** Query whether RPC is running */\n bool IsRPCRunning();\n \n+/** Throw JSONRPCError if RPC is not running */\n+void RpcInterruptionPoint();\n+\n /**\n  * Set the RPC warmup status.  When this is done, all RPC calls will error out\n  * immediately with RPC_IN_WARMUP."
      }
    ]
  },
  {
    "sha": "fe1357a03af108c41baa6bd31903f2cfb0d75ef5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZTEzNTdhMDNhZjEwOGM0MWJhYTZiZDMxOTAzZjJjZmIwZDc1ZWY1",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-05-26T12:14:39Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-05-26T12:14:57Z"
      },
      "message": "Merge #18881: Prevent UB in DeleteLock() function\n\n90eb027204f5a9d7c00fa97d4112243bd37a9012 doc: Add and fix comments about never destroyed objects (Hennadii Stepanov)\n26c093a9957756f3743c2347fe0abd90f81159c4 Replace thread_local g_lockstack with a mutex-protected map (Hennadii Stepanov)\n58e6881bc5be002e8ddbc9b75422c0deae66a2df refactor: Refactor duplicated code into LockHeld() (Hennadii Stepanov)\nf511f61dda4e860079153d5e51d64658cc265283 refactor: Add LockPair type alias (Hennadii Stepanov)\n8d8921abd35c3ac1b8ebacb11de8e1bbc7b28d66 refactor: Add LockStackItem type alias (Hennadii Stepanov)\n458992b06d80eb568141f60a33d38e12e894e27a Prevent UB in DeleteLock() function (Hennadii Stepanov)\n\nPull request description:\n\n  Tracking our instrumented mutexes (`Mutex` and `RecursiveMutex` types) requires that all involved objects should not be destroyed until after their last use. On master (ec79b5f86b22ad8f77c736f9bb76c2e4d7faeaa4) we have two problems related to the object destroying order:\n  - the function-local `static` `lockdata` object that is destroyed at [program exit](https://en.cppreference.com/w/cpp/utility/program/exit)\n  - the `thread_local` `g_lockstack` that is destroyed at [thread exit](https://en.cppreference.com/w/cpp/language/destructor)\n\n  Both cases could cause UB at program exit in so far as mutexes are used in other static object destructors.\n\n  Fix #18824\n\nACKs for top commit:\n  MarcoFalke:\n    re-ACK 90eb027204, only change is new doc commit \ud83d\udc60\n  ryanofsky:\n    Code review ACK 90eb027204f5a9d7c00fa97d4112243bd37a9012 because all the changes look correct and safe. But I don't know the purpose of commit  26c093a9957756f3743c2347fe0abd90f81159c4 \"Replace thread_local g_lockstack with a mutex-protected map (5/6).\" It seems like it could have a bad impact on debug performance, and the commit message and PR description don't give a reason for the change.\n\nTree-SHA512: 99f29157fd1278994e3f6eebccedfd9dae540450f5f8b980518345a89d56b635f943a85b20864cef087027fd0fcdb4880b659ef59bfe5626d110452ae22031c6",
      "tree": {
        "sha": "79395357aae57300859d1c25416a666a9a33068e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/79395357aae57300859d1c25416a666a9a33068e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fe1357a03af108c41baa6bd31903f2cfb0d75ef5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUinYgwAvXR/xNekQ+lB3Q+SFKaB6bPJXKH6F0nqGVDVVMakKIhS4f2E/JWMEJf/\ncqbyoTUfh6EwQiQoyUVMI+LwcnyqJJ/+RJ18oG/f/ryK/np2uzZCAlYbbexPPWKu\nku+UOpye41VnIfWpwUkGJSCiO6zrJcUG4KnJw93kDJmcZHgQrCP2ahXGzXwpVhLj\nO0414DCh0ikC6wS6R07qamo5HdZCi/MQHVqQWawvhxmy6cXBiCttFmHXQrit52Y6\n4dggpSRWuuw1Q4FFXp8SRYDmPjyAyYHE43vGncBgsBKZuP0se1MRREdF8FcvIYON\nD3RBhD6IgMtR6tnsP1vcjbYKq1sGr2Luj6+unpQ2DyIo8ltj8FSQKvHZSFg/QINP\noxCVND1gj+DX9i/L0KG5ediff7rAT4+PdKlmoIXgV/vfOSrd5DxFAVH6T0qUXP09\njap5ApcrqqXLoLmWDJQ5BMvfru0PPj5I2NiN5e43OtecA6Ya/FoALP8X4iaH7Zer\n2RCqM/o6\n=9EIa\n-----END PGP SIGNATURE-----",
        "payload": "tree 79395357aae57300859d1c25416a666a9a33068e\nparent 13397dc78fd6a6a57bdc91db66c51788603267bb\nparent 90eb027204f5a9d7c00fa97d4112243bd37a9012\nauthor MarcoFalke <falke.marco@gmail.com> 1590495279 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1590495297 -0400\n\nMerge #18881: Prevent UB in DeleteLock() function\n\n90eb027204f5a9d7c00fa97d4112243bd37a9012 doc: Add and fix comments about never destroyed objects (Hennadii Stepanov)\n26c093a9957756f3743c2347fe0abd90f81159c4 Replace thread_local g_lockstack with a mutex-protected map (Hennadii Stepanov)\n58e6881bc5be002e8ddbc9b75422c0deae66a2df refactor: Refactor duplicated code into LockHeld() (Hennadii Stepanov)\nf511f61dda4e860079153d5e51d64658cc265283 refactor: Add LockPair type alias (Hennadii Stepanov)\n8d8921abd35c3ac1b8ebacb11de8e1bbc7b28d66 refactor: Add LockStackItem type alias (Hennadii Stepanov)\n458992b06d80eb568141f60a33d38e12e894e27a Prevent UB in DeleteLock() function (Hennadii Stepanov)\n\nPull request description:\n\n  Tracking our instrumented mutexes (`Mutex` and `RecursiveMutex` types) requires that all involved objects should not be destroyed until after their last use. On master (ec79b5f86b22ad8f77c736f9bb76c2e4d7faeaa4) we have two problems related to the object destroying order:\n  - the function-local `static` `lockdata` object that is destroyed at [program exit](https://en.cppreference.com/w/cpp/utility/program/exit)\n  - the `thread_local` `g_lockstack` that is destroyed at [thread exit](https://en.cppreference.com/w/cpp/language/destructor)\n\n  Both cases could cause UB at program exit in so far as mutexes are used in other static object destructors.\n\n  Fix #18824\n\nACKs for top commit:\n  MarcoFalke:\n    re-ACK 90eb027204, only change is new doc commit \ud83d\udc60\n  ryanofsky:\n    Code review ACK 90eb027204f5a9d7c00fa97d4112243bd37a9012 because all the changes look correct and safe. But I don't know the purpose of commit  26c093a9957756f3743c2347fe0abd90f81159c4 \"Replace thread_local g_lockstack with a mutex-protected map (5/6).\" It seems like it could have a bad impact on debug performance, and the commit message and PR description don't give a reason for the change.\n\nTree-SHA512: 99f29157fd1278994e3f6eebccedfd9dae540450f5f8b980518345a89d56b635f943a85b20864cef087027fd0fcdb4880b659ef59bfe5626d110452ae22031c6\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe1357a03af108c41baa6bd31903f2cfb0d75ef5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fe1357a03af108c41baa6bd31903f2cfb0d75ef5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe1357a03af108c41baa6bd31903f2cfb0d75ef5/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "13397dc78fd6a6a57bdc91db66c51788603267bb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/13397dc78fd6a6a57bdc91db66c51788603267bb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/13397dc78fd6a6a57bdc91db66c51788603267bb"
      },
      {
        "sha": "90eb027204f5a9d7c00fa97d4112243bd37a9012",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90eb027204f5a9d7c00fa97d4112243bd37a9012",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/90eb027204f5a9d7c00fa97d4112243bd37a9012"
      }
    ],
    "stats": {
      "total": 125,
      "additions": 75,
      "deletions": 50
    },
    "files": [
      {
        "sha": "56c44ae1ea4aa2f4510d558bd63a123bc8e524f9",
        "filename": "src/logging.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe1357a03af108c41baa6bd31903f2cfb0d75ef5/src/logging.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe1357a03af108c41baa6bd31903f2cfb0d75ef5/src/logging.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/logging.cpp?ref=fe1357a03af108c41baa6bd31903f2cfb0d75ef5",
        "patch": "@@ -22,8 +22,8 @@ BCLog::Logger& LogInstance()\n  * access the logger. When the shutdown sequence is fully audited and tested,\n  * explicit destruction of these objects can be implemented by changing this\n  * from a raw pointer to a std::unique_ptr.\n- * Since the destructor is never called, the logger and all its members must\n- * have a trivial destructor.\n+ * Since the ~Logger() destructor is never called, the Logger class and all\n+ * its subclasses must have implicitly-defined destructors.\n  *\n  * This method of initialization was originally introduced in\n  * ee3374234c60aba2cc4c5cd5cac1c0aefc2d817c."
      },
      {
        "sha": "c3312b5a00ed9578a86685d23d04f1b7f81dd342",
        "filename": "src/sync.cpp",
        "status": "modified",
        "additions": 73,
        "deletions": 48,
        "changes": 121,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe1357a03af108c41baa6bd31903f2cfb0d75ef5/src/sync.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe1357a03af108c41baa6bd31903f2cfb0d75ef5/src/sync.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.cpp?ref=fe1357a03af108c41baa6bd31903f2cfb0d75ef5",
        "patch": "@@ -7,15 +7,19 @@\n #endif\n \n #include <sync.h>\n-#include <tinyformat.h>\n \n #include <logging.h>\n+#include <tinyformat.h>\n #include <util/strencodings.h>\n #include <util/threadnames.h>\n \n #include <map>\n #include <set>\n #include <system_error>\n+#include <thread>\n+#include <unordered_map>\n+#include <utility>\n+#include <vector>\n \n #ifdef DEBUG_LOCKCONTENTION\n #if !defined(HAVE_THREAD_LOCAL)\n@@ -73,35 +77,35 @@ struct CLockLocation {\n     int sourceLine;\n };\n \n-typedef std::vector<std::pair<void*, CLockLocation> > LockStack;\n-typedef std::map<std::pair<void*, void*>, LockStack> LockOrders;\n-typedef std::set<std::pair<void*, void*> > InvLockOrders;\n+using LockStackItem = std::pair<void*, CLockLocation>;\n+using LockStack = std::vector<LockStackItem>;\n+using LockStacks = std::unordered_map<std::thread::id, LockStack>;\n \n-struct LockData {\n-    // Very ugly hack: as the global constructs and destructors run single\n-    // threaded, we use this boolean to know whether LockData still exists,\n-    // as DeleteLock can get called by global RecursiveMutex destructors\n-    // after LockData disappears.\n-    bool available;\n-    LockData() : available(true) {}\n-    ~LockData() { available = false; }\n+using LockPair = std::pair<void*, void*>;\n+using LockOrders = std::map<LockPair, LockStack>;\n+using InvLockOrders = std::set<LockPair>;\n \n+struct LockData {\n+    LockStacks m_lock_stacks;\n     LockOrders lockorders;\n     InvLockOrders invlockorders;\n     std::mutex dd_mutex;\n };\n+\n LockData& GetLockData() {\n-    static LockData lockdata;\n-    return lockdata;\n+    // This approach guarantees that the object is not destroyed until after its last use.\n+    // The operating system automatically reclaims all the memory in a program's heap when that program exits.\n+    // Since the ~LockData() destructor is never called, the LockData class and all\n+    // its subclasses must have implicitly-defined destructors.\n+    static LockData& lock_data = *new LockData();\n+    return lock_data;\n }\n \n-static thread_local LockStack g_lockstack;\n-\n-static void potential_deadlock_detected(const std::pair<void*, void*>& mismatch, const LockStack& s1, const LockStack& s2)\n+static void potential_deadlock_detected(const LockPair& mismatch, const LockStack& s1, const LockStack& s2)\n {\n     LogPrintf(\"POTENTIAL DEADLOCK DETECTED\\n\");\n     LogPrintf(\"Previous lock order was:\\n\");\n-    for (const std::pair<void*, CLockLocation> & i : s2) {\n+    for (const LockStackItem& i : s2) {\n         if (i.first == mismatch.first) {\n             LogPrintf(\" (1)\"); /* Continued */\n         }\n@@ -111,7 +115,7 @@ static void potential_deadlock_detected(const std::pair<void*, void*>& mismatch,\n         LogPrintf(\" %s\\n\", i.second.ToString());\n     }\n     LogPrintf(\"Current lock order is:\\n\");\n-    for (const std::pair<void*, CLockLocation> & i : s1) {\n+    for (const LockStackItem& i : s1) {\n         if (i.first == mismatch.first) {\n             LogPrintf(\" (1)\"); /* Continued */\n         }\n@@ -132,18 +136,18 @@ static void push_lock(void* c, const CLockLocation& locklocation)\n     LockData& lockdata = GetLockData();\n     std::lock_guard<std::mutex> lock(lockdata.dd_mutex);\n \n-    g_lockstack.push_back(std::make_pair(c, locklocation));\n-\n-    for (const std::pair<void*, CLockLocation>& i : g_lockstack) {\n+    LockStack& lock_stack = lockdata.m_lock_stacks[std::this_thread::get_id()];\n+    lock_stack.emplace_back(c, locklocation);\n+    for (const LockStackItem& i : lock_stack) {\n         if (i.first == c)\n             break;\n \n-        std::pair<void*, void*> p1 = std::make_pair(i.first, c);\n+        const LockPair p1 = std::make_pair(i.first, c);\n         if (lockdata.lockorders.count(p1))\n             continue;\n-        lockdata.lockorders.emplace(p1, g_lockstack);\n+        lockdata.lockorders.emplace(p1, lock_stack);\n \n-        std::pair<void*, void*> p2 = std::make_pair(c, i.first);\n+        const LockPair p2 = std::make_pair(c, i.first);\n         lockdata.invlockorders.insert(p2);\n         if (lockdata.lockorders.count(p2))\n             potential_deadlock_detected(p1, lockdata.lockorders[p2], lockdata.lockorders[p1]);\n@@ -152,7 +156,14 @@ static void push_lock(void* c, const CLockLocation& locklocation)\n \n static void pop_lock()\n {\n-    g_lockstack.pop_back();\n+    LockData& lockdata = GetLockData();\n+    std::lock_guard<std::mutex> lock(lockdata.dd_mutex);\n+\n+    LockStack& lock_stack = lockdata.m_lock_stacks[std::this_thread::get_id()];\n+    lock_stack.pop_back();\n+    if (lock_stack.empty()) {\n+        lockdata.m_lock_stacks.erase(std::this_thread::get_id());\n+    }\n }\n \n void EnterCritical(const char* pszName, const char* pszFile, int nLine, void* cs, bool fTry)\n@@ -162,11 +173,17 @@ void EnterCritical(const char* pszName, const char* pszFile, int nLine, void* cs\n \n void CheckLastCritical(void* cs, std::string& lockname, const char* guardname, const char* file, int line)\n {\n-    if (!g_lockstack.empty()) {\n-        const auto& lastlock = g_lockstack.back();\n-        if (lastlock.first == cs) {\n-            lockname = lastlock.second.Name();\n-            return;\n+    {\n+        LockData& lockdata = GetLockData();\n+        std::lock_guard<std::mutex> lock(lockdata.dd_mutex);\n+\n+        const LockStack& lock_stack = lockdata.m_lock_stacks[std::this_thread::get_id()];\n+        if (!lock_stack.empty()) {\n+            const auto& lastlock = lock_stack.back();\n+            if (lastlock.first == cs) {\n+                lockname = lastlock.second.Name();\n+                return;\n+            }\n         }\n     }\n     throw std::system_error(EPERM, std::generic_category(), strprintf(\"%s:%s %s was not most recent critical section locked\", file, line, guardname));\n@@ -179,49 +196,57 @@ void LeaveCritical()\n \n std::string LocksHeld()\n {\n+    LockData& lockdata = GetLockData();\n+    std::lock_guard<std::mutex> lock(lockdata.dd_mutex);\n+\n+    const LockStack& lock_stack = lockdata.m_lock_stacks[std::this_thread::get_id()];\n     std::string result;\n-    for (const std::pair<void*, CLockLocation>& i : g_lockstack)\n+    for (const LockStackItem& i : lock_stack)\n         result += i.second.ToString() + std::string(\"\\n\");\n     return result;\n }\n \n+static bool LockHeld(void* mutex)\n+{\n+    LockData& lockdata = GetLockData();\n+    std::lock_guard<std::mutex> lock(lockdata.dd_mutex);\n+\n+    const LockStack& lock_stack = lockdata.m_lock_stacks[std::this_thread::get_id()];\n+    for (const LockStackItem& i : lock_stack) {\n+        if (i.first == mutex) return true;\n+    }\n+\n+    return false;\n+}\n+\n void AssertLockHeldInternal(const char* pszName, const char* pszFile, int nLine, void* cs)\n {\n-    for (const std::pair<void*, CLockLocation>& i : g_lockstack)\n-        if (i.first == cs)\n-            return;\n+    if (LockHeld(cs)) return;\n     tfm::format(std::cerr, \"Assertion failed: lock %s not held in %s:%i; locks held:\\n%s\", pszName, pszFile, nLine, LocksHeld());\n     abort();\n }\n \n void AssertLockNotHeldInternal(const char* pszName, const char* pszFile, int nLine, void* cs)\n {\n-    for (const std::pair<void*, CLockLocation>& i : g_lockstack) {\n-        if (i.first == cs) {\n-            tfm::format(std::cerr, \"Assertion failed: lock %s held in %s:%i; locks held:\\n%s\", pszName, pszFile, nLine, LocksHeld());\n-            abort();\n-        }\n-    }\n+    if (!LockHeld(cs)) return;\n+    tfm::format(std::cerr, \"Assertion failed: lock %s held in %s:%i; locks held:\\n%s\", pszName, pszFile, nLine, LocksHeld());\n+    abort();\n }\n \n void DeleteLock(void* cs)\n {\n     LockData& lockdata = GetLockData();\n-    if (!lockdata.available) {\n-        // We're already shutting down.\n-        return;\n-    }\n     std::lock_guard<std::mutex> lock(lockdata.dd_mutex);\n-    std::pair<void*, void*> item = std::make_pair(cs, nullptr);\n+    const LockPair item = std::make_pair(cs, nullptr);\n     LockOrders::iterator it = lockdata.lockorders.lower_bound(item);\n     while (it != lockdata.lockorders.end() && it->first.first == cs) {\n-        std::pair<void*, void*> invitem = std::make_pair(it->first.second, it->first.first);\n+        const LockPair invitem = std::make_pair(it->first.second, it->first.first);\n         lockdata.invlockorders.erase(invitem);\n         lockdata.lockorders.erase(it++);\n     }\n     InvLockOrders::iterator invit = lockdata.invlockorders.lower_bound(item);\n     while (invit != lockdata.invlockorders.end() && invit->first == cs) {\n-        std::pair<void*, void*> invinvitem = std::make_pair(invit->second, invit->first);\n+        const LockPair invinvitem = std::make_pair(invit->second, invit->first);\n         lockdata.lockorders.erase(invinvitem);\n         lockdata.invlockorders.erase(invit++);\n     }"
      }
    ]
  },
  {
    "sha": "dcacea096e029a02a937bf96d002ca7e94c48c15",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkY2FjZWEwOTZlMDI5YTAyYTkzN2JmOTZkMDAyY2E3ZTk0YzQ4YzE1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2020-05-26T13:12:30Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2020-05-26T13:45:50Z"
      },
      "message": "Merge #19032: Serialization improvements: final step\n\n71f016c6eb42e1ac2c905e04ba4d20c2009e533f Remove old serialization primitives (Pieter Wuille)\n92beff15d3ae2646c00bd78146d7592a7097ce9c Convert LimitedString to formatter (Pieter Wuille)\nef17c03e074b6c3f185afa4eff572ba687c2a171 Convert wallet to new serialization (Pieter Wuille)\n65c589e45e8b8914698a0fd25cd5aafdda30869c Convert Qt to new serialization (Pieter Wuille)\n\nPull request description:\n\n  This is the final step \ud83e\udd73 of the serialization improvements extracted from #10785.\n\n  It converts the LimitedString wrapper to a new-style formatter, and updates the wallet and Qt code to use the new serialization framework. Finally all remaining old primitives are removed.\n\nACKs for top commit:\n  jonatack:\n    ACK 71f016c6eb42e1ac2 reviewed diff, builds/tests/re-fuzzed.\n  laanwj:\n    Code review ACK 71f016c6eb42e1ac2c905e04ba4d20c2009e533f\n\nTree-SHA512: d952194bc73259f6510bd4ab1348a1febbbf9862af30f905991812fb0e1f23f15948cdb3fc662be54d648e8f6d95b11060055d2e7a8c2cb5bf008224870b1ea1",
      "tree": {
        "sha": "227bbdb35c42932692121e5b0ca11c4d062b6735",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/227bbdb35c42932692121e5b0ca11c4d062b6735"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dcacea096e029a02a937bf96d002ca7e94c48c15",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAl7NHY4ACgkQHkrtYphs\n0l12aggAwmhK3IVOGs0xtbvF8/x1JBbz1JXN/hyiOSxXueSst+rqWraw37oiBRSq\nXI2w9fBvUMAioLX4srXdrFoacQAx5Tp5g4iT7RsENw1RnavXS3WyXfDbqA6AMoGm\nQr27z6M4Yomz4kOUb9vFlhI/NJVAT4/fhD7T7WDiSbTXMPtYgqv15Q/GgXQHPAZF\n2hSvv/5UZX0yuCmIsLfazo7ZUxeoSkEduDfdnEODPBT9BmWn6cQ9OpgeNCu7QNWT\n/RoAcD4BDG4/6Iuh+cYPu//Al1n1HJ353q1xz0EJTX0PJK8d9oyoebLqCQsENgXW\niED7XL1lbA10suCG9f9x6LgUdDzfLw==\n=vfv9\n-----END PGP SIGNATURE-----",
        "payload": "tree 227bbdb35c42932692121e5b0ca11c4d062b6735\nparent fe1357a03af108c41baa6bd31903f2cfb0d75ef5\nparent 71f016c6eb42e1ac2c905e04ba4d20c2009e533f\nauthor Wladimir J. van der Laan <laanwj@protonmail.com> 1590498750 +0200\ncommitter Wladimir J. van der Laan <laanwj@protonmail.com> 1590500750 +0200\n\nMerge #19032: Serialization improvements: final step\n\n71f016c6eb42e1ac2c905e04ba4d20c2009e533f Remove old serialization primitives (Pieter Wuille)\n92beff15d3ae2646c00bd78146d7592a7097ce9c Convert LimitedString to formatter (Pieter Wuille)\nef17c03e074b6c3f185afa4eff572ba687c2a171 Convert wallet to new serialization (Pieter Wuille)\n65c589e45e8b8914698a0fd25cd5aafdda30869c Convert Qt to new serialization (Pieter Wuille)\n\nPull request description:\n\n  This is the final step \ud83e\udd73 of the serialization improvements extracted from #10785.\n\n  It converts the LimitedString wrapper to a new-style formatter, and updates the wallet and Qt code to use the new serialization framework. Finally all remaining old primitives are removed.\n\nACKs for top commit:\n  jonatack:\n    ACK 71f016c6eb42e1ac2 reviewed diff, builds/tests/re-fuzzed.\n  laanwj:\n    Code review ACK 71f016c6eb42e1ac2c905e04ba4d20c2009e533f\n\nTree-SHA512: d952194bc73259f6510bd4ab1348a1febbbf9862af30f905991812fb0e1f23f15948cdb3fc662be54d648e8f6d95b11060055d2e7a8c2cb5bf008224870b1ea1\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dcacea096e029a02a937bf96d002ca7e94c48c15",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dcacea096e029a02a937bf96d002ca7e94c48c15",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dcacea096e029a02a937bf96d002ca7e94c48c15/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fe1357a03af108c41baa6bd31903f2cfb0d75ef5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe1357a03af108c41baa6bd31903f2cfb0d75ef5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fe1357a03af108c41baa6bd31903f2cfb0d75ef5"
      },
      {
        "sha": "71f016c6eb42e1ac2c905e04ba4d20c2009e533f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71f016c6eb42e1ac2c905e04ba4d20c2009e533f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/71f016c6eb42e1ac2c905e04ba4d20c2009e533f"
      }
    ],
    "stats": {
      "total": 251,
      "additions": 87,
      "deletions": 164
    },
    "files": [
      {
        "sha": "c0bd3461bb4108647a42e756f7a7e60d9c9ba616",
        "filename": "src/qt/recentrequeststablemodel.h",
        "status": "modified",
        "additions": 5,
        "deletions": 13,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dcacea096e029a02a937bf96d002ca7e94c48c15/src/qt/recentrequeststablemodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dcacea096e029a02a937bf96d002ca7e94c48c15/src/qt/recentrequeststablemodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/recentrequeststablemodel.h?ref=dcacea096e029a02a937bf96d002ca7e94c48c15",
        "patch": "@@ -24,19 +24,11 @@ class RecentRequestEntry\n     QDateTime date;\n     SendCoinsRecipient recipient;\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        unsigned int nDate = date.toTime_t();\n-\n-        READWRITE(this->nVersion);\n-        READWRITE(id);\n-        READWRITE(nDate);\n-        READWRITE(recipient);\n-\n-        if (ser_action.ForRead())\n-            date = QDateTime::fromTime_t(nDate);\n+    SERIALIZE_METHODS(RecentRequestEntry, obj) {\n+        unsigned int date_timet;\n+        SER_WRITE(obj, date_timet = obj.date.toTime_t());\n+        READWRITE(obj.nVersion, obj.id, date_timet, obj.recipient);\n+        SER_READ(obj, obj.date = QDateTime::fromTime_t(date_timet));\n     }\n };\n "
      },
      {
        "sha": "6619faf417f6cf688e3731d5e8f2330c3ecb9a0e",
        "filename": "src/qt/sendcoinsrecipient.h",
        "status": "modified",
        "additions": 12,
        "deletions": 21,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dcacea096e029a02a937bf96d002ca7e94c48c15/src/qt/sendcoinsrecipient.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dcacea096e029a02a937bf96d002ca7e94c48c15/src/qt/sendcoinsrecipient.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsrecipient.h?ref=dcacea096e029a02a937bf96d002ca7e94c48c15",
        "patch": "@@ -44,30 +44,21 @@ class SendCoinsRecipient\n     static const int CURRENT_VERSION = 1;\n     int nVersion;\n \n-    ADD_SERIALIZE_METHODS;\n+    SERIALIZE_METHODS(SendCoinsRecipient, obj)\n+    {\n+        std::string address_str, label_str, message_str, auth_merchant_str;\n \n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        std::string sAddress = address.toStdString();\n-        std::string sLabel = label.toStdString();\n-        std::string sMessage = message.toStdString();\n-        std::string sAuthenticatedMerchant = authenticatedMerchant.toStdString();\n+        SER_WRITE(obj, address_str = obj.address.toStdString());\n+        SER_WRITE(obj, label_str = obj.label.toStdString());\n+        SER_WRITE(obj, message_str = obj.message.toStdString());\n+        SER_WRITE(obj, auth_merchant_str = obj.authenticatedMerchant.toStdString());\n \n-        READWRITE(this->nVersion);\n-        READWRITE(sAddress);\n-        READWRITE(sLabel);\n-        READWRITE(amount);\n-        READWRITE(sMessage);\n-        READWRITE(sPaymentRequest);\n-        READWRITE(sAuthenticatedMerchant);\n+        READWRITE(obj.nVersion, address_str, label_str, obj.amount, message_str, obj.sPaymentRequest, auth_merchant_str);\n \n-        if (ser_action.ForRead())\n-        {\n-            address = QString::fromStdString(sAddress);\n-            label = QString::fromStdString(sLabel);\n-            message = QString::fromStdString(sMessage);\n-            authenticatedMerchant = QString::fromStdString(sAuthenticatedMerchant);\n-        }\n+        SER_READ(obj, obj.address = QString::fromStdString(address_str));\n+        SER_READ(obj, obj.label = QString::fromStdString(label_str));\n+        SER_READ(obj, obj.message = QString::fromStdString(message_str));\n+        SER_READ(obj, obj.authenticatedMerchant = QString::fromStdString(auth_merchant_str));\n     }\n };\n "
      },
      {
        "sha": "71c2cfa164f6af8c9f9e53b9a40b9240641135a4",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 8,
        "deletions": 52,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dcacea096e029a02a937bf96d002ca7e94c48c15/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dcacea096e029a02a937bf96d002ca7e94c48c15/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=dcacea096e029a02a937bf96d002ca7e94c48c15",
        "patch": "@@ -43,26 +43,6 @@ static const unsigned int MAX_VECTOR_ALLOCATE = 5000000;\n struct deserialize_type {};\n constexpr deserialize_type deserialize {};\n \n-/**\n- * Used to bypass the rule against non-const reference to temporary\n- * where it makes sense with wrappers.\n- */\n-template<typename T>\n-inline T& REF(const T& val)\n-{\n-    return const_cast<T&>(val);\n-}\n-\n-/**\n- * Used to acquire a non-const pointer \"this\" to generate bodies\n- * of const serialization operations from a template\n- */\n-template<typename T>\n-inline T* NCONST_PTR(const T* val)\n-{\n-    return const_cast<T*>(val);\n-}\n-\n //! Safely convert odd char pointer types to standard ones.\n inline char* CharCast(char* c) { return c; }\n inline char* CharCast(unsigned char* c) { return (char*)c; }\n@@ -193,22 +173,6 @@ template<typename X> const X& ReadWriteAsHelper(const X& x) { return x; }\n #define SER_READ(obj, code) ::SerRead(s, ser_action, obj, [&](Stream& s, typename std::remove_const<Type>::type& obj) { code; })\n #define SER_WRITE(obj, code) ::SerWrite(s, ser_action, obj, [&](Stream& s, const Type& obj) { code; })\n \n-/**\n- * Implement three methods for serializable objects. These are actually wrappers over\n- * \"SerializationOp\" template, which implements the body of each class' serialization\n- * code. Adding \"ADD_SERIALIZE_METHODS\" in the body of the class causes these wrappers to be\n- * added as members.\n- */\n-#define ADD_SERIALIZE_METHODS                                         \\\n-    template<typename Stream>                                         \\\n-    void Serialize(Stream& s) const {                                 \\\n-        NCONST_PTR(this)->SerializationOp(s, CSerActionSerialize());  \\\n-    }                                                                 \\\n-    template<typename Stream>                                         \\\n-    void Unserialize(Stream& s) {                                     \\\n-        SerializationOp(s, CSerActionUnserialize());                  \\\n-    }\n-\n /**\n  * Implement the Ser and Unser methods needed for implementing a formatter (see Using below).\n  *\n@@ -503,7 +467,7 @@ static inline Wrapper<Formatter, T&> Using(T&& t) { return Wrapper<Formatter, T&\n #define VARINT_MODE(obj, mode) Using<VarIntFormatter<mode>>(obj)\n #define VARINT(obj) Using<VarIntFormatter<VarIntMode::DEFAULT>>(obj)\n #define COMPACTSIZE(obj) Using<CompactSizeFormatter>(obj)\n-#define LIMITED_STRING(obj,n) LimitedString< n >(REF(obj))\n+#define LIMITED_STRING(obj,n) Using<LimitedStringFormatter<n>>(obj)\n \n /** Serialization wrapper class for integers in VarInt format. */\n template<VarIntMode Mode>\n@@ -588,31 +552,23 @@ struct CompactSizeFormatter\n };\n \n template<size_t Limit>\n-class LimitedString\n+struct LimitedStringFormatter\n {\n-protected:\n-    std::string& string;\n-public:\n-    explicit LimitedString(std::string& _string) : string(_string) {}\n-\n     template<typename Stream>\n-    void Unserialize(Stream& s)\n+    void Unser(Stream& s, std::string& v)\n     {\n         size_t size = ReadCompactSize(s);\n         if (size > Limit) {\n             throw std::ios_base::failure(\"String length limit exceeded\");\n         }\n-        string.resize(size);\n-        if (size != 0)\n-            s.read((char*)string.data(), size);\n+        v.resize(size);\n+        if (size != 0) s.read((char*)v.data(), size);\n     }\n \n     template<typename Stream>\n-    void Serialize(Stream& s) const\n+    void Ser(Stream& s, const std::string& v)\n     {\n-        WriteCompactSize(s, string.size());\n-        if (!string.empty())\n-            s.write((char*)string.data(), string.size());\n+        s << v;\n     }\n };\n \n@@ -1012,7 +968,7 @@ void Unserialize(Stream& is, std::shared_ptr<const T>& p)\n \n \n /**\n- * Support for ADD_SERIALIZE_METHODS and READWRITE macro\n+ * Support for SERIALIZE_METHODS and READWRITE macro.\n  */\n struct CSerActionSerialize\n {"
      },
      {
        "sha": "50984b1aefb0bd95b83267c157defc7cfaaee9aa",
        "filename": "src/test/fuzz/string.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dcacea096e029a02a937bf96d002ca7e94c48c15/src/test/fuzz/string.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dcacea096e029a02a937bf96d002ca7e94c48c15/src/test/fuzz/string.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/string.cpp?ref=dcacea096e029a02a937bf96d002ca7e94c48c15",
        "patch": "@@ -93,7 +93,7 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n     {\n         CDataStream data_stream{SER_NETWORK, INIT_PROTO_VERSION};\n         std::string s;\n-        LimitedString<10> limited_string = LIMITED_STRING(s, 10);\n+        auto limited_string = LIMITED_STRING(s, 10);\n         data_stream << random_string_1;\n         try {\n             data_stream >> limited_string;\n@@ -108,7 +108,7 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n     }\n     {\n         CDataStream data_stream{SER_NETWORK, INIT_PROTO_VERSION};\n-        const LimitedString<10> limited_string = LIMITED_STRING(random_string_1, 10);\n+        const auto limited_string = LIMITED_STRING(random_string_1, 10);\n         data_stream << limited_string;\n         std::string deserialized_string;\n         data_stream >> deserialized_string;"
      },
      {
        "sha": "f2df786e2e7c05e0f444c7ea4d57d0c833171a6c",
        "filename": "src/wallet/crypter.h",
        "status": "modified",
        "additions": 3,
        "deletions": 9,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dcacea096e029a02a937bf96d002ca7e94c48c15/src/wallet/crypter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dcacea096e029a02a937bf96d002ca7e94c48c15/src/wallet/crypter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/crypter.h?ref=dcacea096e029a02a937bf96d002ca7e94c48c15",
        "patch": "@@ -43,15 +43,9 @@ class CMasterKey\n     //! such as the various parameters to scrypt\n     std::vector<unsigned char> vchOtherDerivationParameters;\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(vchCryptedKey);\n-        READWRITE(vchSalt);\n-        READWRITE(nDerivationMethod);\n-        READWRITE(nDeriveIterations);\n-        READWRITE(vchOtherDerivationParameters);\n+    SERIALIZE_METHODS(CMasterKey, obj)\n+    {\n+        READWRITE(obj.vchCryptedKey, obj.vchSalt, obj.nDerivationMethod, obj.nDeriveIterations, obj.vchOtherDerivationParameters);\n     }\n \n     CMasterKey()"
      },
      {
        "sha": "d62d30f339d6e0be5645703a65596fb5e48625f7",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 28,
        "deletions": 27,
        "changes": 55,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dcacea096e029a02a937bf96d002ca7e94c48c15/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dcacea096e029a02a937bf96d002ca7e94c48c15/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=dcacea096e029a02a937bf96d002ca7e94c48c15",
        "patch": "@@ -112,36 +112,37 @@ class CKeyPool\n     CKeyPool();\n     CKeyPool(const CPubKey& vchPubKeyIn, bool internalIn);\n \n-    ADD_SERIALIZE_METHODS;\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        int nVersion = s.GetVersion();\n+        if (!(s.GetType() & SER_GETHASH)) {\n+            s << nVersion;\n+        }\n+        s << nTime << vchPubKey << fInternal << m_pre_split;\n+    }\n \n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n         int nVersion = s.GetVersion();\n-        if (!(s.GetType() & SER_GETHASH))\n-            READWRITE(nVersion);\n-        READWRITE(nTime);\n-        READWRITE(vchPubKey);\n-        if (ser_action.ForRead()) {\n-            try {\n-                READWRITE(fInternal);\n-            }\n-            catch (std::ios_base::failure&) {\n-                /* flag as external address if we can't read the internal boolean\n-                   (this will be the case for any wallet before the HD chain split version) */\n-                fInternal = false;\n-            }\n-            try {\n-                READWRITE(m_pre_split);\n-            }\n-            catch (std::ios_base::failure&) {\n-                /* flag as postsplit address if we can't read the m_pre_split boolean\n-                   (this will be the case for any wallet that upgrades to HD chain split)*/\n-                m_pre_split = false;\n-            }\n+        if (!(s.GetType() & SER_GETHASH)) {\n+            s >> nVersion;\n+        }\n+        s >> nTime >> vchPubKey;\n+        try {\n+            s >> fInternal;\n+        } catch (std::ios_base::failure&) {\n+            /* flag as external address if we can't read the internal boolean\n+               (this will be the case for any wallet before the HD chain split version) */\n+            fInternal = false;\n         }\n-        else {\n-            READWRITE(fInternal);\n-            READWRITE(m_pre_split);\n+        try {\n+            s >> m_pre_split;\n+        } catch (std::ios_base::failure&) {\n+            /* flag as postsplit address if we can't read the m_pre_split boolean\n+               (this will be the case for any wallet that upgrades to HD chain split) */\n+            m_pre_split = false;\n         }\n     }\n };"
      },
      {
        "sha": "a2788ed6c44e13e2f81af49a4deacf982714626b",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 14,
        "deletions": 21,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dcacea096e029a02a937bf96d002ca7e94c48c15/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dcacea096e029a02a937bf96d002ca7e94c48c15/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=dcacea096e029a02a937bf96d002ca7e94c48c15",
        "patch": "@@ -98,15 +98,13 @@ class CHDChain\n     int nVersion;\n \n     CHDChain() { SetNull(); }\n-    ADD_SERIALIZE_METHODS;\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action)\n+\n+    SERIALIZE_METHODS(CHDChain, obj)\n     {\n-        READWRITE(this->nVersion);\n-        READWRITE(nExternalChainCounter);\n-        READWRITE(seed_id);\n-        if (this->nVersion >= VERSION_HD_CHAIN_SPLIT)\n-            READWRITE(nInternalChainCounter);\n+        READWRITE(obj.nVersion, obj.nExternalChainCounter, obj.seed_id);\n+        if (obj.nVersion >= VERSION_HD_CHAIN_SPLIT) {\n+            READWRITE(obj.nInternalChainCounter);\n+        }\n     }\n \n     void SetNull()\n@@ -147,21 +145,16 @@ class CKeyMetadata\n         nCreateTime = nCreateTime_;\n     }\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(this->nVersion);\n-        READWRITE(nCreateTime);\n-        if (this->nVersion >= VERSION_WITH_HDDATA)\n-        {\n-            READWRITE(hdKeypath);\n-            READWRITE(hd_seed_id);\n+    SERIALIZE_METHODS(CKeyMetadata, obj)\n+    {\n+        READWRITE(obj.nVersion, obj.nCreateTime);\n+        if (obj.nVersion >= VERSION_WITH_HDDATA) {\n+            READWRITE(obj.hdKeypath, obj.hd_seed_id);\n         }\n-        if (this->nVersion >= VERSION_WITH_KEY_ORIGIN)\n+        if (obj.nVersion >= VERSION_WITH_KEY_ORIGIN)\n         {\n-            READWRITE(key_origin);\n-            READWRITE(has_key_origin);\n+            READWRITE(obj.key_origin);\n+            READWRITE(obj.has_key_origin);\n         }\n     }\n "
      },
      {
        "sha": "a4e4fda8a1f029336394ea29cef85a06afd88118",
        "filename": "src/wallet/walletutil.h",
        "status": "modified",
        "additions": 15,
        "deletions": 19,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dcacea096e029a02a937bf96d002ca7e94c48c15/src/wallet/walletutil.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dcacea096e029a02a937bf96d002ca7e94c48c15/src/wallet/walletutil.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletutil.h?ref=dcacea096e029a02a937bf96d002ca7e94c48c15",
        "patch": "@@ -98,26 +98,22 @@ class WalletDescriptor\n     int32_t next_index = 0; // Position of the next item to generate\n     DescriptorCache cache;\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        if (ser_action.ForRead()) {\n-            std::string desc;\n-            std::string error;\n-            READWRITE(desc);\n-            FlatSigningProvider keys;\n-            descriptor = Parse(desc, keys, error, true);\n-            if (!descriptor) {\n-                throw std::ios_base::failure(\"Invalid descriptor: \" + error);\n-            }\n-        } else {\n-            READWRITE(descriptor->ToString());\n+    void DeserializeDescriptor(const std::string& str)\n+    {\n+        std::string error;\n+        FlatSigningProvider keys;\n+        descriptor = Parse(str, keys, error, true);\n+        if (!descriptor) {\n+            throw std::ios_base::failure(\"Invalid descriptor: \" + error);\n         }\n-        READWRITE(creation_time);\n-        READWRITE(next_index);\n-        READWRITE(range_start);\n-        READWRITE(range_end);\n+    }\n+\n+    SERIALIZE_METHODS(WalletDescriptor, obj)\n+    {\n+        std::string descriptor_str;\n+        SER_WRITE(obj, descriptor_str = obj.descriptor->ToString());\n+        READWRITE(descriptor_str, obj.creation_time, obj.next_index, obj.range_start, obj.range_end);\n+        SER_READ(obj, obj.DeserializeDescriptor(descriptor_str));\n     }\n \n     WalletDescriptor() {}"
      }
    ]
  },
  {
    "sha": "4c825792dd9f4eaf4936c3e376ac7a5c177528e2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YzgyNTc5MmRkOWY0ZWFmNDkzNmMzZTM3NmFjN2E1YzE3NzUyOGUy",
    "commit": {
      "author": {
        "name": "Elichai Turkel",
        "email": "elichai.turkel@gmail.com",
        "date": "2020-05-26T15:39:01Z"
      },
      "committer": {
        "name": "Elichai Turkel",
        "email": "elichai.turkel@gmail.com",
        "date": "2020-05-26T15:39:01Z"
      },
      "message": "Remove outdated comment about DER encoding",
      "tree": {
        "sha": "6c3ab778617ec70a5750fe8e608e6d85df873e2c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6c3ab778617ec70a5750fe8e608e6d85df873e2c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4c825792dd9f4eaf4936c3e376ac7a5c177528e2",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJNBAABCAA3FiEEC5PUstyhDoo+NyfXk4PN6ejman8FAl7NOBUZHGVsaWNoYWku\ndHVya2VsQGdtYWlsLmNvbQAKCRCTg83p6OZqf1exEACVRnANz07+lFQV1xERzLit\nCdD2JOBCcnOcpRsGjYLiKfSUDyisEKmEUh65kzBvaXSYjDueTkkYWpZLtpqYx26I\ni8dMwHVmv3BTrJSocdwNRVzuoS6BKERJRAL/U/v8EYvhoRjdMAJRMPHJD8mUsZ2z\nfwaM4tKvmOcJK5WjlfhmFdTU4UQRBhzEFutHhikc+lOw4n9adfFIVP69S91KedlV\nQNdJsEVjD7BPZr8gjVvotZF4Qy9htUDUO9SJIvwkZC0iXgfDU/+jPImile8IIi34\niItPfuPV+hO+DoL02TuaToczDRLpjF9zeiuW6ksI2lft2G6RIP9VcGzyLp36E6LB\n14T1VMyiRAbUjAoRXqbZLi/lRmgoUXnrhM0u2Y41HMR35W5NOztYfDP7rNLgzUS0\nORzb/3dVXhtsfLrvIByWiqQshiSevdT4rT9GXQq3imXR3O7R5wWfPbKFv0HELh8d\nPPqpkuZ+BRvMjum4mEpJ7KPHyOk/PyteJ4s8xEyIUW3ftkciLDO4uWBCHtvq2DDn\napcAPnFpkCibt/2WqQ84QIGmM5X9tOOZqrOeMdqzbnL37EU53+qdKz4tIZm2fdhQ\nBRXPm56bnEtgtaTqgFsjY/vZ74qcuUVQLMSlCrO3TIoii31GCVcxfJWB+AX2iNgN\nWeVyfZbIXIhFIDyc/idCOw==\n=yL7i\n-----END PGP SIGNATURE-----",
        "payload": "tree 6c3ab778617ec70a5750fe8e608e6d85df873e2c\nparent dcacea096e029a02a937bf96d002ca7e94c48c15\nauthor Elichai Turkel <elichai.turkel@gmail.com> 1590507541 +0300\ncommitter Elichai Turkel <elichai.turkel@gmail.com> 1590507541 +0300\n\nRemove outdated comment about DER encoding\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4c825792dd9f4eaf4936c3e376ac7a5c177528e2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4c825792dd9f4eaf4936c3e376ac7a5c177528e2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4c825792dd9f4eaf4936c3e376ac7a5c177528e2/comments",
    "author": {
      "login": "elichai",
      "id": 2167860,
      "node_id": "MDQ6VXNlcjIxNjc4NjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/elichai",
      "html_url": "https://github.com/elichai",
      "followers_url": "https://api.github.com/users/elichai/followers",
      "following_url": "https://api.github.com/users/elichai/following{/other_user}",
      "gists_url": "https://api.github.com/users/elichai/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/elichai/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
      "organizations_url": "https://api.github.com/users/elichai/orgs",
      "repos_url": "https://api.github.com/users/elichai/repos",
      "events_url": "https://api.github.com/users/elichai/events{/privacy}",
      "received_events_url": "https://api.github.com/users/elichai/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "elichai",
      "id": 2167860,
      "node_id": "MDQ6VXNlcjIxNjc4NjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/elichai",
      "html_url": "https://github.com/elichai",
      "followers_url": "https://api.github.com/users/elichai/followers",
      "following_url": "https://api.github.com/users/elichai/following{/other_user}",
      "gists_url": "https://api.github.com/users/elichai/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/elichai/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
      "organizations_url": "https://api.github.com/users/elichai/orgs",
      "repos_url": "https://api.github.com/users/elichai/repos",
      "events_url": "https://api.github.com/users/elichai/events{/privacy}",
      "received_events_url": "https://api.github.com/users/elichai/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dcacea096e029a02a937bf96d002ca7e94c48c15",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dcacea096e029a02a937bf96d002ca7e94c48c15",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dcacea096e029a02a937bf96d002ca7e94c48c15"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 1,
      "deletions": 2
    },
    "files": [
      {
        "sha": "8e50e064bbb3508aa848ab40f05eafcfb560e5bd",
        "filename": "src/script/standard.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c825792dd9f4eaf4936c3e376ac7a5c177528e2/src/script/standard.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c825792dd9f4eaf4936c3e376ac7a5c177528e2/src/script/standard.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.h?ref=4c825792dd9f4eaf4936c3e376ac7a5c177528e2",
        "patch": "@@ -44,8 +44,7 @@ extern unsigned nMaxDatacarrierBytes;\n /**\n  * Mandatory script verification flags that all new blocks must comply with for\n  * them to be valid. (but old blocks may not comply with) Currently just P2SH,\n- * but in the future other flags may be added, such as a soft-fork to enforce\n- * strict DER encoding.\n+ * but in the future other flags may be added.\n  *\n  * Failing one of these tests may trigger a DoS ban - see CheckInputScripts() for\n  * details."
      }
    ]
  },
  {
    "sha": "4af01b37d40246cd1fdb54719855927e36a36b46",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YWYwMWIzN2Q0MDI0NmNkMWZkYjU0NzE5ODU1OTI3ZTM2YTM2YjQ2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2020-05-26T16:27:21Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2020-05-26T17:06:12Z"
      },
      "message": "Merge #19060: test: Remove global wait_until from p2p_getdata\n\nfa80b4788bbe3ef00c5d767c0d89ba9809d8707c test: Remove global wait_until from p2p_getdata (MarcoFalke)\n999922baed3a80b581ce46daa01c4cbca4fcbfd8 test: Default mininode.wait_until timeout to 60s (MarcoFalke)\nfab47375fe0bdec1e557e087fdb0707c4dfa7cc2 test: pep-8 p2p_getdata.py (MarcoFalke)\n\nPull request description:\n\n  Using the global wait_until makes it impossible to adjust the timeout based on the hardware the test is running on.\n\n  Fix that by using the mininode member function.\n\n  So for example, `./test/functional/p2p_getdata.py  --timeout-factor=0.04` gives a timeout of 2.4 seconds.\n\nACKs for top commit:\n  laanwj:\n    ACK fa80b4788bbe3ef00c5d767c0d89ba9809d8707c\n\nTree-SHA512: ebb1b7860a64451de2b8ee9a0966faddb13b84af711f6744e8260d7c9bc0b382e8fb259897df5212190821e850ed30d4d5c2d7af45a97f207fd4511b06b6674a",
      "tree": {
        "sha": "a9a259ac85810babea941fdb39d83a1bcd2a9113",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a9a259ac85810babea941fdb39d83a1bcd2a9113"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4af01b37d40246cd1fdb54719855927e36a36b46",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAl7NTIUACgkQHkrtYphs\n0l3Kgwf+N7GdJGBCK2bJU5FehXHmRoSblHSVSzhrpVrxSsQNr7/IV3eKrYV6suHq\nnizbQJrvdeP9abBLYIzFjx1/V40dTb52Cy99rXfqijeITeIyr7bjcK6GqGyDgoVZ\nOP5ohbB6ftKntloX0dG3AzfhBRtocm/TmC0gG29PAE/2aaCJEDprQ7qRS9tuMAs+\n30/RPUl1LSFrhrklo+jSuIrnokhoWRGPer2Eu6KDHq6M7wOOPTiN33wh1oZOUN65\nXsHSCLo/grd/Hxm/pyGFnIJj8NIJWsPGiZNcwhVu75Fsp8Fo8VYIOsDLmuqyePdA\nylAqj2qmGo4OTZfLR6gWbNyjQ1BlLw==\n=UWwO\n-----END PGP SIGNATURE-----",
        "payload": "tree a9a259ac85810babea941fdb39d83a1bcd2a9113\nparent dcacea096e029a02a937bf96d002ca7e94c48c15\nparent fa80b4788bbe3ef00c5d767c0d89ba9809d8707c\nauthor Wladimir J. van der Laan <laanwj@protonmail.com> 1590510441 +0200\ncommitter Wladimir J. van der Laan <laanwj@protonmail.com> 1590512772 +0200\n\nMerge #19060: test: Remove global wait_until from p2p_getdata\n\nfa80b4788bbe3ef00c5d767c0d89ba9809d8707c test: Remove global wait_until from p2p_getdata (MarcoFalke)\n999922baed3a80b581ce46daa01c4cbca4fcbfd8 test: Default mininode.wait_until timeout to 60s (MarcoFalke)\nfab47375fe0bdec1e557e087fdb0707c4dfa7cc2 test: pep-8 p2p_getdata.py (MarcoFalke)\n\nPull request description:\n\n  Using the global wait_until makes it impossible to adjust the timeout based on the hardware the test is running on.\n\n  Fix that by using the mininode member function.\n\n  So for example, `./test/functional/p2p_getdata.py  --timeout-factor=0.04` gives a timeout of 2.4 seconds.\n\nACKs for top commit:\n  laanwj:\n    ACK fa80b4788bbe3ef00c5d767c0d89ba9809d8707c\n\nTree-SHA512: ebb1b7860a64451de2b8ee9a0966faddb13b84af711f6744e8260d7c9bc0b382e8fb259897df5212190821e850ed30d4d5c2d7af45a97f207fd4511b06b6674a\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4af01b37d40246cd1fdb54719855927e36a36b46",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4af01b37d40246cd1fdb54719855927e36a36b46",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4af01b37d40246cd1fdb54719855927e36a36b46/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dcacea096e029a02a937bf96d002ca7e94c48c15",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dcacea096e029a02a937bf96d002ca7e94c48c15",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dcacea096e029a02a937bf96d002ca7e94c48c15"
      },
      {
        "sha": "fa80b4788bbe3ef00c5d767c0d89ba9809d8707c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa80b4788bbe3ef00c5d767c0d89ba9809d8707c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa80b4788bbe3ef00c5d767c0d89ba9809d8707c"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 9,
      "deletions": 11
    },
    "files": [
      {
        "sha": "d1b11c2c613305dd2e76b56c0247775ee4f9586a",
        "filename": "test/functional/p2p_getdata.py",
        "status": "modified",
        "additions": 8,
        "deletions": 10,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4af01b37d40246cd1fdb54719855927e36a36b46/test/functional/p2p_getdata.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4af01b37d40246cd1fdb54719855927e36a36b46/test/functional/p2p_getdata.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_getdata.py?ref=4af01b37d40246cd1fdb54719855927e36a36b46",
        "patch": "@@ -9,15 +9,11 @@\n     CInv,\n     msg_getdata,\n )\n-from test_framework.mininode import (\n-    mininode_lock,\n-    P2PInterface,\n-)\n+from test_framework.mininode import P2PInterface\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import wait_until\n \n-class P2PStoreBlock(P2PInterface):\n \n+class P2PStoreBlock(P2PInterface):\n     def __init__(self):\n         super().__init__()\n         self.blocks = defaultdict(int)\n@@ -26,26 +22,28 @@ def on_block(self, message):\n         message.block.calc_sha256()\n         self.blocks[message.block.sha256] += 1\n \n+\n class GetdataTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n \n     def run_test(self):\n-        self.nodes[0].add_p2p_connection(P2PStoreBlock())\n+        p2p_block_store = self.nodes[0].add_p2p_connection(P2PStoreBlock())\n \n         self.log.info(\"test that an invalid GETDATA doesn't prevent processing of future messages\")\n \n         # Send invalid message and verify that node responds to later ping\n         invalid_getdata = msg_getdata()\n         invalid_getdata.inv.append(CInv(t=0, h=0))  # INV type 0 is invalid.\n-        self.nodes[0].p2ps[0].send_and_ping(invalid_getdata)\n+        p2p_block_store.send_and_ping(invalid_getdata)\n \n         # Check getdata still works by fetching tip block\n         best_block = int(self.nodes[0].getbestblockhash(), 16)\n         good_getdata = msg_getdata()\n         good_getdata.inv.append(CInv(t=2, h=best_block))\n-        self.nodes[0].p2ps[0].send_and_ping(good_getdata)\n-        wait_until(lambda: self.nodes[0].p2ps[0].blocks[best_block] == 1, timeout=30, lock=mininode_lock)\n+        p2p_block_store.send_and_ping(good_getdata)\n+        p2p_block_store.wait_until(lambda: self.nodes[0].p2ps[0].blocks[best_block] == 1)\n+\n \n if __name__ == '__main__':\n     GetdataTest().main()"
      },
      {
        "sha": "d1e982ac3ef7b0f261b46c4ab543c23e88c209d3",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4af01b37d40246cd1fdb54719855927e36a36b46/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4af01b37d40246cd1fdb54719855927e36a36b46/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=4af01b37d40246cd1fdb54719855927e36a36b46",
        "patch": "@@ -374,7 +374,7 @@ def on_version(self, message):\n \n     # Connection helper methods\n \n-    def wait_until(self, test_function, timeout):\n+    def wait_until(self, test_function, timeout=60):\n         wait_until(test_function, timeout=timeout, lock=mininode_lock, timeout_factor=self.timeout_factor)\n \n     def wait_for_disconnect(self, timeout=60):"
      }
    ]
  },
  {
    "sha": "520e435b5e56dec7e86b0e5dbc50e3906e586a82",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MjBlNDM1YjVlNTZkZWM3ZTg2YjBlNWRiYzUwZTM5MDZlNTg2YTgy",
    "commit": {
      "author": {
        "name": "Samuel Dobson",
        "email": "dobsonsa68@gmail.com",
        "date": "2020-05-27T01:58:09Z"
      },
      "committer": {
        "name": "Samuel Dobson",
        "email": "dobsonsa68@gmail.com",
        "date": "2020-05-27T02:51:49Z"
      },
      "message": "Merge #18918: wallet: Move salvagewallet into wallettool\n\n84ae0578b6c68dda145ca65fef510ce0fdac0d7b Add release notes about salvage changes (Andrew Chow)\nea337f2d0318a860f695698cfb3aa91c03ded858 Move RecoverKeysOnlyFilter into RecoverDataBaseFile (Andrew Chow)\n9ea2d258b46e8a9776100633585ed0feede5c2a4 Move RecoverDatabaseFile and RecoverKeysOnlyFilter into salvage.{cpp/h} (Andrew Chow)\nb426c7764d26e280e1f814cf36e050743c45cd12 Make BerkeleyBatch::Recover and WalletBatch::RecoverKeysOnlyFilter standalone (Andrew Chow)\n2741774214168eb287c7066d6823afe5e570381d Expose a version of ReadKeyValue and use it in RecoverKeysOnlyFilter (Andrew Chow)\nced95d0e43389fe62b5d30fcc7c42dbca0e88242 Move BerkeleyEnvironment::Salvage into BerkeleyBatch::Recover (Andrew Chow)\n07250b8dcebe2b97ed0fd900ad35cba4091b8ecf walletdb: remove fAggressive from Salvage (Andrew Chow)\n8ebcbc85c652665b78dcfd2ad55fa67cafd42c73 walletdb: don't automatically salvage when corruption is detected (Andrew Chow)\nd321046f4bb4887742699c586755a21f3a2edbe1 wallet: remove -salvagewallet (Andrew Chow)\ncdd955e580dff99f3fa440494ed2b348f7f094af Add basic test for bitcoin-wallet salvage (Andrew Chow)\nc87770915b88d195d264b58111c64142b1965cfa wallettool: Add a salvage command (Andrew Chow)\n\nPull request description:\n\n  Removes the `-salvagewallet` startup option and adds a `salvage` command to the `bitcoin-wallet` tool. As such, `-salvagewallet` is removed. Additionally, the automatic salvage that is done if the wallet file fails to load is removed.\n\n  Lastly the salvage code entirely is moved out entirely into `bitcoin-wallet` from `walletdb.{cpp/h}` and `db.{cpp/h}`.\n\nACKs for top commit:\n  jonatack:\n    ACK 84ae0578b6c68dda145ca65fef510ce0fdac0d7b feedback taken, and compared to my previous review, the bitcoin-wallet salvage command now seems to run and it exits without raising. The new test passes at both 9454105 and 84ae057 so as a sanity check I'd agree there is room for improvement, if possible.\n  MarcoFalke:\n    re-ACK 84ae0578b6 \ud83c\udfc9\n  Empact:\n    Code Review ACK https://github.com/bitcoin/bitcoin/pull/18918/commits/84ae0578b6c68dda145ca65fef510ce0fdac0d7b\n  ryanofsky:\n    Code review ACK 84ae0578b6c68dda145ca65fef510ce0fdac0d7b. Lot of small changes since previous review: added verify step before salvage, added basic test in new commit, removed unused scanstate variable and warnings parameter, tweaked various comments and strings, moved fsuccess variable declaration\n  meshcollider:\n    Concept / light code review ACK 84ae0578b6c68dda145ca65fef510ce0fdac0d7b\n\nTree-SHA512: 05be116b56ecade1c58faca1728c8fe4b78f0a082dbc2544a3f7507dd155f1f4f39070bd1fe90053444384337bc48b97149df5c1010230d78f8ecc08e69d93af",
      "tree": {
        "sha": "75c82d2a968ea2a50b83350899f7be700b4dd888",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/75c82d2a968ea2a50b83350899f7be700b4dd888"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/520e435b5e56dec7e86b0e5dbc50e3906e586a82",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEygOILLH8BntdOs/k0wARbhyHWj0FAl7N1cUACgkQ0wARbhyH\nWj1FEBAAhr7JJLe87NDpPBn0JKCp2DIuXKE5h61i1Es05EFcK6HL2PYvVUal6yv5\n/ubIYWcYimhA7oYe9/wGAz38BSuPlaRwphk2LAKQmjou5EdIMy1UpG8jxVvxJZ9s\nWm4iR3roDWvw1Pc4rWp0wPpfgVSd5kv5ajyqWbUJjPJiHFJb2aJSVwW8nJaCZBoP\nKnNP14YK8b6z7zFg+lVX5QsniNZuy+TCU1AaA5hqZhpvsW20laCcDj3dbeSXVqiI\nYKK+i8adEXrzBFhabrNfQgnCGJE5myOhC1yvMqbw/YNKEaN97uM2hJyzBRfSLgzT\nAVA9YI+Ic0jB/kXYXOB8mdxcNxaUnBbsTZIPiuaKMP2bIjjbw5epRiF8PsHQ7VCz\nZq1RDObe6LT4mG/UIYxPKcQhKvggSUVblVvlirE3A3tcByStizEcOmUFoaXCJYVw\n4g3e4H9K1X5pOA0aucT+Xsl6zLsTd3RaPLjdA8YtOWRanL9l8ImLoqNP0X3CvOGp\nSj1qzXqNNQvVHU7cDerrJOl0SQWwDg7A5wKmRc4vICaegp1B8nNyyxJTZGNr+MPH\nDMldYiLAI3Bc9yH7Eo+tAHy+33s+mONEmO55oM21J8lDJXg8FRzHIWTNJPWQy+sg\nZw/eaxnOFJ5Uqy41zcR/tv9e3jd6b59wbSVG6nnufdWTVzx+9m4=\n=n/Ys\n-----END PGP SIGNATURE-----",
        "payload": "tree 75c82d2a968ea2a50b83350899f7be700b4dd888\nparent 4af01b37d40246cd1fdb54719855927e36a36b46\nparent 84ae0578b6c68dda145ca65fef510ce0fdac0d7b\nauthor Samuel Dobson <dobsonsa68@gmail.com> 1590544689 +1200\ncommitter Samuel Dobson <dobsonsa68@gmail.com> 1590547909 +1200\n\nMerge #18918: wallet: Move salvagewallet into wallettool\n\n84ae0578b6c68dda145ca65fef510ce0fdac0d7b Add release notes about salvage changes (Andrew Chow)\nea337f2d0318a860f695698cfb3aa91c03ded858 Move RecoverKeysOnlyFilter into RecoverDataBaseFile (Andrew Chow)\n9ea2d258b46e8a9776100633585ed0feede5c2a4 Move RecoverDatabaseFile and RecoverKeysOnlyFilter into salvage.{cpp/h} (Andrew Chow)\nb426c7764d26e280e1f814cf36e050743c45cd12 Make BerkeleyBatch::Recover and WalletBatch::RecoverKeysOnlyFilter standalone (Andrew Chow)\n2741774214168eb287c7066d6823afe5e570381d Expose a version of ReadKeyValue and use it in RecoverKeysOnlyFilter (Andrew Chow)\nced95d0e43389fe62b5d30fcc7c42dbca0e88242 Move BerkeleyEnvironment::Salvage into BerkeleyBatch::Recover (Andrew Chow)\n07250b8dcebe2b97ed0fd900ad35cba4091b8ecf walletdb: remove fAggressive from Salvage (Andrew Chow)\n8ebcbc85c652665b78dcfd2ad55fa67cafd42c73 walletdb: don't automatically salvage when corruption is detected (Andrew Chow)\nd321046f4bb4887742699c586755a21f3a2edbe1 wallet: remove -salvagewallet (Andrew Chow)\ncdd955e580dff99f3fa440494ed2b348f7f094af Add basic test for bitcoin-wallet salvage (Andrew Chow)\nc87770915b88d195d264b58111c64142b1965cfa wallettool: Add a salvage command (Andrew Chow)\n\nPull request description:\n\n  Removes the `-salvagewallet` startup option and adds a `salvage` command to the `bitcoin-wallet` tool. As such, `-salvagewallet` is removed. Additionally, the automatic salvage that is done if the wallet file fails to load is removed.\n\n  Lastly the salvage code entirely is moved out entirely into `bitcoin-wallet` from `walletdb.{cpp/h}` and `db.{cpp/h}`.\n\nACKs for top commit:\n  jonatack:\n    ACK 84ae0578b6c68dda145ca65fef510ce0fdac0d7b feedback taken, and compared to my previous review, the bitcoin-wallet salvage command now seems to run and it exits without raising. The new test passes at both 9454105 and 84ae057 so as a sanity check I'd agree there is room for improvement, if possible.\n  MarcoFalke:\n    re-ACK 84ae0578b6 \ud83c\udfc9\n  Empact:\n    Code Review ACK https://github.com/bitcoin/bitcoin/pull/18918/commits/84ae0578b6c68dda145ca65fef510ce0fdac0d7b\n  ryanofsky:\n    Code review ACK 84ae0578b6c68dda145ca65fef510ce0fdac0d7b. Lot of small changes since previous review: added verify step before salvage, added basic test in new commit, removed unused scanstate variable and warnings parameter, tweaked various comments and strings, moved fsuccess variable declaration\n  meshcollider:\n    Concept / light code review ACK 84ae0578b6c68dda145ca65fef510ce0fdac0d7b\n\nTree-SHA512: 05be116b56ecade1c58faca1728c8fe4b78f0a082dbc2544a3f7507dd155f1f4f39070bd1fe90053444384337bc48b97149df5c1010230d78f8ecc08e69d93af\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/520e435b5e56dec7e86b0e5dbc50e3906e586a82",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/520e435b5e56dec7e86b0e5dbc50e3906e586a82",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/520e435b5e56dec7e86b0e5dbc50e3906e586a82/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4af01b37d40246cd1fdb54719855927e36a36b46",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4af01b37d40246cd1fdb54719855927e36a36b46",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4af01b37d40246cd1fdb54719855927e36a36b46"
      },
      {
        "sha": "84ae0578b6c68dda145ca65fef510ce0fdac0d7b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/84ae0578b6c68dda145ca65fef510ce0fdac0d7b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/84ae0578b6c68dda145ca65fef510ce0fdac0d7b"
      }
    ],
    "stats": {
      "total": 510,
      "additions": 237,
      "deletions": 273
    },
    "files": [
      {
        "sha": "f57a62eeb7d48370697992edec0d2cc0e72916d8",
        "filename": "doc/release-notes-18918.md",
        "status": "added",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/520e435b5e56dec7e86b0e5dbc50e3906e586a82/doc/release-notes-18918.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/520e435b5e56dec7e86b0e5dbc50e3906e586a82/doc/release-notes-18918.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-18918.md?ref=520e435b5e56dec7e86b0e5dbc50e3906e586a82",
        "patch": "@@ -0,0 +1,3 @@\n+# Wallet\n+\n+The `-salvagewallet` startup option has been removed. A new `salvage` command has been added to the `bitcoin-wallet` tool which performs the salvage operations that `-salvagewallet` did."
      },
      {
        "sha": "2b004691fd8569d529efc28ace7ca0c623b6e7e5",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/520e435b5e56dec7e86b0e5dbc50e3906e586a82/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/520e435b5e56dec7e86b0e5dbc50e3906e586a82/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=520e435b5e56dec7e86b0e5dbc50e3906e586a82",
        "patch": "@@ -248,6 +248,7 @@ BITCOIN_CORE_H = \\\n   wallet/ismine.h \\\n   wallet/load.h \\\n   wallet/rpcwallet.h \\\n+  wallet/salvage.h \\\n   wallet/scriptpubkeyman.h \\\n   wallet/wallet.h \\\n   wallet/walletdb.h \\\n@@ -356,6 +357,7 @@ libbitcoin_wallet_a_SOURCES = \\\n   wallet/load.cpp \\\n   wallet/rpcdump.cpp \\\n   wallet/rpcwallet.cpp \\\n+  wallet/salvage.cpp \\\n   wallet/scriptpubkeyman.cpp \\\n   wallet/wallet.cpp \\\n   wallet/walletdb.cpp \\"
      },
      {
        "sha": "b420463c00700efa82c7728e56add42bb0e9712e",
        "filename": "src/bitcoin-wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/520e435b5e56dec7e86b0e5dbc50e3906e586a82/src/bitcoin-wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/520e435b5e56dec7e86b0e5dbc50e3906e586a82/src/bitcoin-wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-wallet.cpp?ref=520e435b5e56dec7e86b0e5dbc50e3906e586a82",
        "patch": "@@ -31,6 +31,7 @@ static void SetupWalletToolArgs()\n \n     gArgs.AddArg(\"info\", \"Get wallet info\", ArgsManager::ALLOW_ANY, OptionsCategory::COMMANDS);\n     gArgs.AddArg(\"create\", \"Create new wallet file\", ArgsManager::ALLOW_ANY, OptionsCategory::COMMANDS);\n+    gArgs.AddArg(\"salvage\", \"Attempt to recover private keys from a corrupt wallet\", ArgsManager::ALLOW_ANY, OptionsCategory::COMMANDS);\n }\n \n static bool WalletAppInit(int argc, char* argv[])"
      },
      {
        "sha": "4ed28b06230d2b7b04c96d8e114b308a9f16332e",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 158,
        "changes": 163,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/520e435b5e56dec7e86b0e5dbc50e3906e586a82/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/520e435b5e56dec7e86b0e5dbc50e3906e586a82/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=520e435b5e56dec7e86b0e5dbc50e3906e586a82",
        "patch": "@@ -268,21 +268,14 @@ BerkeleyEnvironment::BerkeleyEnvironment()\n     fMockDb = true;\n }\n \n-BerkeleyEnvironment::VerifyResult BerkeleyEnvironment::Verify(const std::string& strFile, recoverFunc_type recoverFunc, std::string& out_backup_filename)\n+bool BerkeleyEnvironment::Verify(const std::string& strFile)\n {\n     LOCK(cs_db);\n     assert(mapFileUseCount.count(strFile) == 0);\n \n     Db db(dbenv.get(), 0);\n     int result = db.verify(strFile.c_str(), nullptr, nullptr, 0);\n-    if (result == 0)\n-        return VerifyResult::VERIFY_OK;\n-    else if (recoverFunc == nullptr)\n-        return VerifyResult::RECOVER_FAIL;\n-\n-    // Try to recover:\n-    bool fRecovered = (*recoverFunc)(fs::path(strPath) / strFile, out_backup_filename);\n-    return (fRecovered ? VerifyResult::RECOVER_OK : VerifyResult::RECOVER_FAIL);\n+    return result == 0;\n }\n \n BerkeleyBatch::SafeDbt::SafeDbt()\n@@ -324,75 +317,6 @@ BerkeleyBatch::SafeDbt::operator Dbt*()\n     return &m_dbt;\n }\n \n-bool BerkeleyBatch::Recover(const fs::path& file_path, void *callbackDataIn, bool (*recoverKVcallback)(void* callbackData, CDataStream ssKey, CDataStream ssValue), std::string& newFilename)\n-{\n-    std::string filename;\n-    std::shared_ptr<BerkeleyEnvironment> env = GetWalletEnv(file_path, filename);\n-\n-    // Recovery procedure:\n-    // move wallet file to walletfilename.timestamp.bak\n-    // Call Salvage with fAggressive=true to\n-    // get as much data as possible.\n-    // Rewrite salvaged data to fresh wallet file\n-    // Set -rescan so any missing transactions will be\n-    // found.\n-    int64_t now = GetTime();\n-    newFilename = strprintf(\"%s.%d.bak\", filename, now);\n-\n-    int result = env->dbenv->dbrename(nullptr, filename.c_str(), nullptr,\n-                                       newFilename.c_str(), DB_AUTO_COMMIT);\n-    if (result == 0)\n-        LogPrintf(\"Renamed %s to %s\\n\", filename, newFilename);\n-    else\n-    {\n-        LogPrintf(\"Failed to rename %s to %s\\n\", filename, newFilename);\n-        return false;\n-    }\n-\n-    std::vector<BerkeleyEnvironment::KeyValPair> salvagedData;\n-    bool fSuccess = env->Salvage(newFilename, true, salvagedData);\n-    if (salvagedData.empty())\n-    {\n-        LogPrintf(\"Salvage(aggressive) found no records in %s.\\n\", newFilename);\n-        return false;\n-    }\n-    LogPrintf(\"Salvage(aggressive) found %u records\\n\", salvagedData.size());\n-\n-    std::unique_ptr<Db> pdbCopy = MakeUnique<Db>(env->dbenv.get(), 0);\n-    int ret = pdbCopy->open(nullptr,               // Txn pointer\n-                            filename.c_str(),   // Filename\n-                            \"main\",             // Logical db name\n-                            DB_BTREE,           // Database type\n-                            DB_CREATE,          // Flags\n-                            0);\n-    if (ret > 0) {\n-        LogPrintf(\"Cannot create database file %s\\n\", filename);\n-        pdbCopy->close(0);\n-        return false;\n-    }\n-\n-    DbTxn* ptxn = env->TxnBegin();\n-    for (BerkeleyEnvironment::KeyValPair& row : salvagedData)\n-    {\n-        if (recoverKVcallback)\n-        {\n-            CDataStream ssKey(row.first, SER_DISK, CLIENT_VERSION);\n-            CDataStream ssValue(row.second, SER_DISK, CLIENT_VERSION);\n-            if (!(*recoverKVcallback)(callbackDataIn, ssKey, ssValue))\n-                continue;\n-        }\n-        Dbt datKey(&row.first[0], row.first.size());\n-        Dbt datValue(&row.second[0], row.second.size());\n-        int ret2 = pdbCopy->put(ptxn, &datKey, &datValue, DB_NOOVERWRITE);\n-        if (ret2 > 0)\n-            fSuccess = false;\n-    }\n-    ptxn->commit(0);\n-    pdbCopy->close(0);\n-\n-    return fSuccess;\n-}\n-\n bool BerkeleyBatch::VerifyEnvironment(const fs::path& file_path, bilingual_str& errorStr)\n {\n     std::string walletFile;\n@@ -410,100 +334,23 @@ bool BerkeleyBatch::VerifyEnvironment(const fs::path& file_path, bilingual_str&\n     return true;\n }\n \n-bool BerkeleyBatch::VerifyDatabaseFile(const fs::path& file_path, std::vector<bilingual_str>& warnings, bilingual_str& errorStr, BerkeleyEnvironment::recoverFunc_type recoverFunc)\n+bool BerkeleyBatch::VerifyDatabaseFile(const fs::path& file_path, bilingual_str& errorStr)\n {\n     std::string walletFile;\n     std::shared_ptr<BerkeleyEnvironment> env = GetWalletEnv(file_path, walletFile);\n     fs::path walletDir = env->Directory();\n \n     if (fs::exists(walletDir / walletFile))\n     {\n-        std::string backup_filename;\n-        BerkeleyEnvironment::VerifyResult r = env->Verify(walletFile, recoverFunc, backup_filename);\n-        if (r == BerkeleyEnvironment::VerifyResult::RECOVER_OK)\n-        {\n-            warnings.push_back(strprintf(_(\"Warning: Wallet file corrupt, data salvaged!\"\n-                                     \" Original %s saved as %s in %s; if\"\n-                                     \" your balance or transactions are incorrect you should\"\n-                                     \" restore from a backup.\"),\n-                walletFile, backup_filename, walletDir));\n-        }\n-        if (r == BerkeleyEnvironment::VerifyResult::RECOVER_FAIL)\n-        {\n-            errorStr = strprintf(_(\"%s corrupt, salvage failed\"), walletFile);\n+        if (!env->Verify(walletFile)) {\n+            errorStr = strprintf(_(\"%s corrupt. Try using the wallet tool bitcoin-wallet to salvage or restoring a backup.\"), walletFile);\n             return false;\n         }\n     }\n     // also return true if files does not exists\n     return true;\n }\n \n-/* End of headers, beginning of key/value data */\n-static const char *HEADER_END = \"HEADER=END\";\n-/* End of key/value data */\n-static const char *DATA_END = \"DATA=END\";\n-\n-bool BerkeleyEnvironment::Salvage(const std::string& strFile, bool fAggressive, std::vector<BerkeleyEnvironment::KeyValPair>& vResult)\n-{\n-    LOCK(cs_db);\n-    assert(mapFileUseCount.count(strFile) == 0);\n-\n-    u_int32_t flags = DB_SALVAGE;\n-    if (fAggressive)\n-        flags |= DB_AGGRESSIVE;\n-\n-    std::stringstream strDump;\n-\n-    Db db(dbenv.get(), 0);\n-    int result = db.verify(strFile.c_str(), nullptr, &strDump, flags);\n-    if (result == DB_VERIFY_BAD) {\n-        LogPrintf(\"BerkeleyEnvironment::Salvage: Database salvage found errors, all data may not be recoverable.\\n\");\n-        if (!fAggressive) {\n-            LogPrintf(\"BerkeleyEnvironment::Salvage: Rerun with aggressive mode to ignore errors and continue.\\n\");\n-            return false;\n-        }\n-    }\n-    if (result != 0 && result != DB_VERIFY_BAD) {\n-        LogPrintf(\"BerkeleyEnvironment::Salvage: Database salvage failed with result %d.\\n\", result);\n-        return false;\n-    }\n-\n-    // Format of bdb dump is ascii lines:\n-    // header lines...\n-    // HEADER=END\n-    //  hexadecimal key\n-    //  hexadecimal value\n-    //  ... repeated\n-    // DATA=END\n-\n-    std::string strLine;\n-    while (!strDump.eof() && strLine != HEADER_END)\n-        getline(strDump, strLine); // Skip past header\n-\n-    std::string keyHex, valueHex;\n-    while (!strDump.eof() && keyHex != DATA_END) {\n-        getline(strDump, keyHex);\n-        if (keyHex != DATA_END) {\n-            if (strDump.eof())\n-                break;\n-            getline(strDump, valueHex);\n-            if (valueHex == DATA_END) {\n-                LogPrintf(\"BerkeleyEnvironment::Salvage: WARNING: Number of keys in data does not match number of values.\\n\");\n-                break;\n-            }\n-            vResult.push_back(make_pair(ParseHex(keyHex), ParseHex(valueHex)));\n-        }\n-    }\n-\n-    if (keyHex != DATA_END) {\n-        LogPrintf(\"BerkeleyEnvironment::Salvage: WARNING: Unexpected end of file while reading salvage output.\\n\");\n-        return false;\n-    }\n-\n-    return (result == 0);\n-}\n-\n-\n void BerkeleyEnvironment::CheckpointLSN(const std::string& strFile)\n {\n     dbenv->txn_checkpoint(0, 0, 0);"
      },
      {
        "sha": "54ce144ffc4b062143a6ae9383f953b433713edb",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 2,
        "deletions": 22,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/520e435b5e56dec7e86b0e5dbc50e3906e586a82/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/520e435b5e56dec7e86b0e5dbc50e3906e586a82/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=520e435b5e56dec7e86b0e5dbc50e3906e586a82",
        "patch": "@@ -66,26 +66,7 @@ class BerkeleyEnvironment\n     bool IsDatabaseLoaded(const std::string& db_filename) const { return m_databases.find(db_filename) != m_databases.end(); }\n     fs::path Directory() const { return strPath; }\n \n-    /**\n-     * Verify that database file strFile is OK. If it is not,\n-     * call the callback to try to recover.\n-     * This must be called BEFORE strFile is opened.\n-     * Returns true if strFile is OK.\n-     */\n-    enum class VerifyResult { VERIFY_OK,\n-                        RECOVER_OK,\n-                        RECOVER_FAIL };\n-    typedef bool (*recoverFunc_type)(const fs::path& file_path, std::string& out_backup_filename);\n-    VerifyResult Verify(const std::string& strFile, recoverFunc_type recoverFunc, std::string& out_backup_filename);\n-    /**\n-     * Salvage data from a file that Verify says is bad.\n-     * fAggressive sets the DB_AGGRESSIVE flag (see berkeley DB->verify() method documentation).\n-     * Appends binary key/value pairs to vResult, returns true if successful.\n-     * NOTE: reads the entire database into memory, so cannot be used\n-     * for huge databases.\n-     */\n-    typedef std::pair<std::vector<unsigned char>, std::vector<unsigned char> > KeyValPair;\n-    bool Salvage(const std::string& strFile, bool fAggressive, std::vector<KeyValPair>& vResult);\n+    bool Verify(const std::string& strFile);\n \n     bool Open(bool retry);\n     void Close();\n@@ -245,15 +226,14 @@ class BerkeleyBatch\n \n     void Flush();\n     void Close();\n-    static bool Recover(const fs::path& file_path, void *callbackDataIn, bool (*recoverKVcallback)(void* callbackData, CDataStream ssKey, CDataStream ssValue), std::string& out_backup_filename);\n \n     /* flush the wallet passively (TRY_LOCK)\n        ideal to be called periodically */\n     static bool PeriodicFlush(BerkeleyDatabase& database);\n     /* verifies the database environment */\n     static bool VerifyEnvironment(const fs::path& file_path, bilingual_str& errorStr);\n     /* verifies the database file */\n-    static bool VerifyDatabaseFile(const fs::path& file_path, std::vector<bilingual_str>& warnings, bilingual_str& errorStr, BerkeleyEnvironment::recoverFunc_type recoverFunc);\n+    static bool VerifyDatabaseFile(const fs::path& file_path, bilingual_str& errorStr);\n \n     template <typename K, typename T>\n     bool Read(const K& key, T& value)"
      },
      {
        "sha": "3885eb6185437e5a8f4719cab0217642180cf4fe",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 11,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/520e435b5e56dec7e86b0e5dbc50e3906e586a82/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/520e435b5e56dec7e86b0e5dbc50e3906e586a82/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=520e435b5e56dec7e86b0e5dbc50e3906e586a82",
        "patch": "@@ -54,7 +54,6 @@ void WalletInit::AddWalletOptions() const\n     gArgs.AddArg(\"-paytxfee=<amt>\", strprintf(\"Fee (in %s/kB) to add to transactions you send (default: %s)\",\n                                                             CURRENCY_UNIT, FormatMoney(CFeeRate{DEFAULT_PAY_TX_FEE}.GetFeePerK())), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n     gArgs.AddArg(\"-rescan\", \"Rescan the block chain for missing wallet transactions on startup\", ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n-    gArgs.AddArg(\"-salvagewallet\", \"Attempt to recover private keys from a corrupt wallet on startup\", ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n     gArgs.AddArg(\"-spendzeroconfchange\", strprintf(\"Spend unconfirmed change when sending transactions (default: %u)\", DEFAULT_SPEND_ZEROCONF_CHANGE), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n     gArgs.AddArg(\"-txconfirmtarget=<n>\", strprintf(\"If paytxfee is not set, include enough fee so transactions begin confirmation on average within n blocks (default: %u)\", DEFAULT_TX_CONFIRM_TARGET), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n     gArgs.AddArg(\"-wallet=<path>\", \"Specify wallet database path. Can be specified multiple times to load multiple wallets. Path is interpreted relative to <walletdir> if it is not absolute, and will be created if it does not exist (as a directory containing a wallet.dat file and log files). For backwards compatibility this will also accept names of existing data files in <walletdir>.)\", ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::WALLET);\n@@ -89,16 +88,6 @@ bool WalletInit::ParameterInteraction() const\n         LogPrintf(\"%s: parameter interaction: -blocksonly=1 -> setting -walletbroadcast=0\\n\", __func__);\n     }\n \n-    if (gArgs.GetBoolArg(\"-salvagewallet\", false)) {\n-        if (is_multiwallet) {\n-            return InitError(strprintf(Untranslated(\"%s is only allowed with a single wallet file\"), \"-salvagewallet\"));\n-        }\n-        // Rewrite just private keys: rescan to find transactions\n-        if (gArgs.SoftSetBoolArg(\"-rescan\", true)) {\n-            LogPrintf(\"%s: parameter interaction: -salvagewallet=1 -> setting -rescan=1\\n\", __func__);\n-        }\n-    }\n-\n     bool zapwallettxes = gArgs.GetBoolArg(\"-zapwallettxes\", false);\n     // -zapwallettxes implies dropping the mempool on startup\n     if (zapwallettxes && gArgs.SoftSetBoolArg(\"-persistmempool\", false)) {"
      },
      {
        "sha": "8df3e78215cdeb74d15ee0e40d60f1f3fd40f4f3",
        "filename": "src/wallet/load.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 6,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/520e435b5e56dec7e86b0e5dbc50e3906e586a82/src/wallet/load.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/520e435b5e56dec7e86b0e5dbc50e3906e586a82/src/wallet/load.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/load.cpp?ref=520e435b5e56dec7e86b0e5dbc50e3906e586a82",
        "patch": "@@ -37,11 +37,6 @@ bool VerifyWallets(interfaces::Chain& chain, const std::vector<std::string>& wal\n \n     chain.initMessage(_(\"Verifying wallet(s)...\").translated);\n \n-    // Parameter interaction code should have thrown an error if -salvagewallet\n-    // was enabled with more than wallet file, so the wallet_files size check\n-    // here should have no effect.\n-    bool salvage_wallet = gArgs.GetBoolArg(\"-salvagewallet\", false) && wallet_files.size() <= 1;\n-\n     // Keep track of each wallet absolute path to detect duplicates.\n     std::set<fs::path> wallet_paths;\n \n@@ -55,7 +50,7 @@ bool VerifyWallets(interfaces::Chain& chain, const std::vector<std::string>& wal\n \n         bilingual_str error_string;\n         std::vector<bilingual_str> warnings;\n-        bool verify_success = CWallet::Verify(chain, location, salvage_wallet, error_string, warnings);\n+        bool verify_success = CWallet::Verify(chain, location, error_string, warnings);\n         if (!warnings.empty()) chain.initWarning(Join(warnings, Untranslated(\"\\n\")));\n         if (!verify_success) {\n             chain.initError(error_string);"
      },
      {
        "sha": "e24b1f2e6924127163cd90c077c66f5bfabed857",
        "filename": "src/wallet/load.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/520e435b5e56dec7e86b0e5dbc50e3906e586a82/src/wallet/load.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/520e435b5e56dec7e86b0e5dbc50e3906e586a82/src/wallet/load.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/load.h?ref=520e435b5e56dec7e86b0e5dbc50e3906e586a82",
        "patch": "@@ -16,8 +16,6 @@ class Chain;\n } // namespace interfaces\n \n //! Responsible for reading and validating the -wallet arguments and verifying the wallet database.\n-//! This function will perform salvage on the wallet if requested, as long as only one wallet is\n-//! being loaded (WalletInit::ParameterInteraction() forbids -salvagewallet, -zapwallettxes or -upgradewallet with multiwallet).\n bool VerifyWallets(interfaces::Chain& chain, const std::vector<std::string>& wallet_files);\n \n //! Load wallet databases."
      },
      {
        "sha": "70067ebef0462d8afd184481be1e41499de01efc",
        "filename": "src/wallet/salvage.cpp",
        "status": "added",
        "additions": 150,
        "deletions": 0,
        "changes": 150,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/520e435b5e56dec7e86b0e5dbc50e3906e586a82/src/wallet/salvage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/520e435b5e56dec7e86b0e5dbc50e3906e586a82/src/wallet/salvage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/salvage.cpp?ref=520e435b5e56dec7e86b0e5dbc50e3906e586a82",
        "patch": "@@ -0,0 +1,150 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <fs.h>\n+#include <streams.h>\n+#include <wallet/salvage.h>\n+#include <wallet/wallet.h>\n+#include <wallet/walletdb.h>\n+\n+/* End of headers, beginning of key/value data */\n+static const char *HEADER_END = \"HEADER=END\";\n+/* End of key/value data */\n+static const char *DATA_END = \"DATA=END\";\n+typedef std::pair<std::vector<unsigned char>, std::vector<unsigned char> > KeyValPair;\n+\n+bool RecoverDatabaseFile(const fs::path& file_path)\n+{\n+    std::string filename;\n+    std::shared_ptr<BerkeleyEnvironment> env = GetWalletEnv(file_path, filename);\n+\n+    // Recovery procedure:\n+    // move wallet file to walletfilename.timestamp.bak\n+    // Call Salvage with fAggressive=true to\n+    // get as much data as possible.\n+    // Rewrite salvaged data to fresh wallet file\n+    // Set -rescan so any missing transactions will be\n+    // found.\n+    int64_t now = GetTime();\n+    std::string newFilename = strprintf(\"%s.%d.bak\", filename, now);\n+\n+    int result = env->dbenv->dbrename(nullptr, filename.c_str(), nullptr,\n+                                       newFilename.c_str(), DB_AUTO_COMMIT);\n+    if (result == 0)\n+        LogPrintf(\"Renamed %s to %s\\n\", filename, newFilename);\n+    else\n+    {\n+        LogPrintf(\"Failed to rename %s to %s\\n\", filename, newFilename);\n+        return false;\n+    }\n+\n+    /**\n+     * Salvage data from a file. The DB_AGGRESSIVE flag is being used (see berkeley DB->verify() method documentation).\n+     * key/value pairs are appended to salvagedData which are then written out to a new wallet file.\n+     * NOTE: reads the entire database into memory, so cannot be used\n+     * for huge databases.\n+     */\n+    std::vector<KeyValPair> salvagedData;\n+\n+    std::stringstream strDump;\n+\n+    Db db(env->dbenv.get(), 0);\n+    result = db.verify(newFilename.c_str(), nullptr, &strDump, DB_SALVAGE | DB_AGGRESSIVE);\n+    if (result == DB_VERIFY_BAD) {\n+        LogPrintf(\"Salvage: Database salvage found errors, all data may not be recoverable.\\n\");\n+    }\n+    if (result != 0 && result != DB_VERIFY_BAD) {\n+        LogPrintf(\"Salvage: Database salvage failed with result %d.\\n\", result);\n+        return false;\n+    }\n+\n+    // Format of bdb dump is ascii lines:\n+    // header lines...\n+    // HEADER=END\n+    //  hexadecimal key\n+    //  hexadecimal value\n+    //  ... repeated\n+    // DATA=END\n+\n+    std::string strLine;\n+    while (!strDump.eof() && strLine != HEADER_END)\n+        getline(strDump, strLine); // Skip past header\n+\n+    std::string keyHex, valueHex;\n+    while (!strDump.eof() && keyHex != DATA_END) {\n+        getline(strDump, keyHex);\n+        if (keyHex != DATA_END) {\n+            if (strDump.eof())\n+                break;\n+            getline(strDump, valueHex);\n+            if (valueHex == DATA_END) {\n+                LogPrintf(\"Salvage: WARNING: Number of keys in data does not match number of values.\\n\");\n+                break;\n+            }\n+            salvagedData.push_back(make_pair(ParseHex(keyHex), ParseHex(valueHex)));\n+        }\n+    }\n+\n+    bool fSuccess;\n+    if (keyHex != DATA_END) {\n+        LogPrintf(\"Salvage: WARNING: Unexpected end of file while reading salvage output.\\n\");\n+        fSuccess = false;\n+    } else {\n+        fSuccess = (result == 0);\n+    }\n+\n+    if (salvagedData.empty())\n+    {\n+        LogPrintf(\"Salvage(aggressive) found no records in %s.\\n\", newFilename);\n+        return false;\n+    }\n+    LogPrintf(\"Salvage(aggressive) found %u records\\n\", salvagedData.size());\n+\n+    std::unique_ptr<Db> pdbCopy = MakeUnique<Db>(env->dbenv.get(), 0);\n+    int ret = pdbCopy->open(nullptr,               // Txn pointer\n+                            filename.c_str(),   // Filename\n+                            \"main\",             // Logical db name\n+                            DB_BTREE,           // Database type\n+                            DB_CREATE,          // Flags\n+                            0);\n+    if (ret > 0) {\n+        LogPrintf(\"Cannot create database file %s\\n\", filename);\n+        pdbCopy->close(0);\n+        return false;\n+    }\n+\n+    DbTxn* ptxn = env->TxnBegin();\n+    CWallet dummyWallet(nullptr, WalletLocation(), WalletDatabase::CreateDummy());\n+    for (KeyValPair& row : salvagedData)\n+    {\n+        /* Filter for only private key type KV pairs to be added to the salvaged wallet */\n+        CDataStream ssKey(row.first, SER_DISK, CLIENT_VERSION);\n+        CDataStream ssValue(row.second, SER_DISK, CLIENT_VERSION);\n+        std::string strType, strErr;\n+        bool fReadOK;\n+        {\n+            // Required in LoadKeyMetadata():\n+            LOCK(dummyWallet.cs_wallet);\n+            fReadOK = ReadKeyValue(&dummyWallet, ssKey, ssValue, strType, strErr);\n+        }\n+        if (!WalletBatch::IsKeyType(strType) && strType != DBKeys::HDCHAIN) {\n+            continue;\n+        }\n+        if (!fReadOK)\n+        {\n+            LogPrintf(\"WARNING: WalletBatch::Recover skipping %s: %s\\n\", strType, strErr);\n+            continue;\n+        }\n+        Dbt datKey(&row.first[0], row.first.size());\n+        Dbt datValue(&row.second[0], row.second.size());\n+        int ret2 = pdbCopy->put(ptxn, &datKey, &datValue, DB_NOOVERWRITE);\n+        if (ret2 > 0)\n+            fSuccess = false;\n+    }\n+    ptxn->commit(0);\n+    pdbCopy->close(0);\n+\n+    return fSuccess;\n+}"
      },
      {
        "sha": "e361930f5ed90186a509de3e6c21a01731682095",
        "filename": "src/wallet/salvage.h",
        "status": "added",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/520e435b5e56dec7e86b0e5dbc50e3906e586a82/src/wallet/salvage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/520e435b5e56dec7e86b0e5dbc50e3906e586a82/src/wallet/salvage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/salvage.h?ref=520e435b5e56dec7e86b0e5dbc50e3906e586a82",
        "patch": "@@ -0,0 +1,14 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SALVAGE_H\n+#define BITCOIN_WALLET_SALVAGE_H\n+\n+#include <fs.h>\n+#include <streams.h>\n+\n+bool RecoverDatabaseFile(const fs::path& file_path);\n+\n+#endif // BITCOIN_WALLET_SALVAGE_H"
      },
      {
        "sha": "78245632540bb7cf822ef38f0ab8778db99562cc",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 13,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/520e435b5e56dec7e86b0e5dbc50e3906e586a82/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/520e435b5e56dec7e86b0e5dbc50e3906e586a82/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=520e435b5e56dec7e86b0e5dbc50e3906e586a82",
        "patch": "@@ -153,7 +153,7 @@ void UnloadWallet(std::shared_ptr<CWallet>&& wallet)\n std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const WalletLocation& location, bilingual_str& error, std::vector<bilingual_str>& warnings)\n {\n     try {\n-        if (!CWallet::Verify(chain, location, false, error, warnings)) {\n+        if (!CWallet::Verify(chain, location, error, warnings)) {\n             error = Untranslated(\"Wallet file verification failed.\") + Untranslated(\" \") + error;\n             return nullptr;\n         }\n@@ -195,7 +195,7 @@ WalletCreationStatus CreateWallet(interfaces::Chain& chain, const SecureString&\n     }\n \n     // Wallet::Verify will check if we're trying to create a wallet with a duplicate name.\n-    if (!CWallet::Verify(chain, location, false, error, warnings)) {\n+    if (!CWallet::Verify(chain, location, error, warnings)) {\n         error = Untranslated(\"Wallet file verification failed.\") + Untranslated(\" \") + error;\n         return WalletCreationStatus::CREATION_FAILED;\n     }\n@@ -3650,7 +3650,7 @@ std::vector<std::string> CWallet::GetDestValues(const std::string& prefix) const\n     return values;\n }\n \n-bool CWallet::Verify(interfaces::Chain& chain, const WalletLocation& location, bool salvage_wallet, bilingual_str& error_string, std::vector<bilingual_str>& warnings)\n+bool CWallet::Verify(interfaces::Chain& chain, const WalletLocation& location, bilingual_str& error_string, std::vector<bilingual_str>& warnings)\n {\n     // Do some checking on wallet path. It should be either a:\n     //\n@@ -3690,16 +3690,7 @@ bool CWallet::Verify(interfaces::Chain& chain, const WalletLocation& location, b\n         return false;\n     }\n \n-    if (salvage_wallet) {\n-        // Recover readable keypairs:\n-        CWallet dummyWallet(&chain, WalletLocation(), WalletDatabase::CreateDummy());\n-        std::string backup_filename;\n-        if (!WalletBatch::Recover(wallet_path, (void *)&dummyWallet, WalletBatch::RecoverKeysOnlyFilter, backup_filename)) {\n-            return false;\n-        }\n-    }\n-\n-    return WalletBatch::VerifyDatabaseFile(wallet_path, warnings, error_string);\n+    return WalletBatch::VerifyDatabaseFile(wallet_path, error_string);\n }\n \n std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain, const WalletLocation& location, bilingual_str& error, std::vector<bilingual_str>& warnings, uint64_t wallet_creation_flags)"
      },
      {
        "sha": "29d04a0cbad8489189c5e79dfce63e601ce92882",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/520e435b5e56dec7e86b0e5dbc50e3906e586a82/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/520e435b5e56dec7e86b0e5dbc50e3906e586a82/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=520e435b5e56dec7e86b0e5dbc50e3906e586a82",
        "patch": "@@ -1136,7 +1136,7 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n     bool MarkReplaced(const uint256& originalHash, const uint256& newHash);\n \n     //! Verify wallet naming and perform salvage on the wallet if required\n-    static bool Verify(interfaces::Chain& chain, const WalletLocation& location, bool salvage_wallet, bilingual_str& error_string, std::vector<bilingual_str>& warnings);\n+    static bool Verify(interfaces::Chain& chain, const WalletLocation& location, bilingual_str& error_string, std::vector<bilingual_str>& warnings);\n \n     /* Initializes the wallet, returns a new CWallet instance or a null pointer in case of an error */\n     static std::shared_ptr<CWallet> CreateWalletFromFile(interfaces::Chain& chain, const WalletLocation& location, bilingual_str& error, std::vector<bilingual_str>& warnings, uint64_t wallet_creation_flags = 0);"
      },
      {
        "sha": "e7adbfea7749a34e3dc7944439d1be62a95b9aed",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 41,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/520e435b5e56dec7e86b0e5dbc50e3906e586a82/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/520e435b5e56dec7e86b0e5dbc50e3906e586a82/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=520e435b5e56dec7e86b0e5dbc50e3906e586a82",
        "patch": "@@ -672,6 +672,13 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n     return true;\n }\n \n+bool ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue, std::string& strType, std::string& strErr)\n+{\n+    CWalletScanState dummy_wss;\n+    LOCK(pwallet->cs_wallet);\n+    return ReadKeyValue(pwallet, ssKey, ssValue, dummy_wss, strType, strErr);\n+}\n+\n bool WalletBatch::IsKeyType(const std::string& strType)\n {\n     return (strType == DBKeys::KEY ||\n@@ -976,53 +983,14 @@ void MaybeCompactWalletDB()\n     fOneThread = false;\n }\n \n-//\n-// Try to (very carefully!) recover wallet file if there is a problem.\n-//\n-bool WalletBatch::Recover(const fs::path& wallet_path, void *callbackDataIn, bool (*recoverKVcallback)(void* callbackData, CDataStream ssKey, CDataStream ssValue), std::string& out_backup_filename)\n-{\n-    return BerkeleyBatch::Recover(wallet_path, callbackDataIn, recoverKVcallback, out_backup_filename);\n-}\n-\n-bool WalletBatch::Recover(const fs::path& wallet_path, std::string& out_backup_filename)\n-{\n-    // recover without a key filter callback\n-    // results in recovering all record types\n-    return WalletBatch::Recover(wallet_path, nullptr, nullptr, out_backup_filename);\n-}\n-\n-bool WalletBatch::RecoverKeysOnlyFilter(void *callbackData, CDataStream ssKey, CDataStream ssValue)\n-{\n-    CWallet *dummyWallet = reinterpret_cast<CWallet*>(callbackData);\n-    CWalletScanState dummyWss;\n-    std::string strType, strErr;\n-    bool fReadOK;\n-    {\n-        // Required in LoadKeyMetadata():\n-        LOCK(dummyWallet->cs_wallet);\n-        fReadOK = ReadKeyValue(dummyWallet, ssKey, ssValue,\n-                               dummyWss, strType, strErr);\n-    }\n-    if (!IsKeyType(strType) && strType != DBKeys::HDCHAIN) {\n-        return false;\n-    }\n-    if (!fReadOK)\n-    {\n-        LogPrintf(\"WARNING: WalletBatch::Recover skipping %s: %s\\n\", strType, strErr);\n-        return false;\n-    }\n-\n-    return true;\n-}\n-\n bool WalletBatch::VerifyEnvironment(const fs::path& wallet_path, bilingual_str& errorStr)\n {\n     return BerkeleyBatch::VerifyEnvironment(wallet_path, errorStr);\n }\n \n-bool WalletBatch::VerifyDatabaseFile(const fs::path& wallet_path, std::vector<bilingual_str>& warnings, bilingual_str& errorStr)\n+bool WalletBatch::VerifyDatabaseFile(const fs::path& wallet_path, bilingual_str& errorStr)\n {\n-    return BerkeleyBatch::VerifyDatabaseFile(wallet_path, warnings, errorStr, WalletBatch::Recover);\n+    return BerkeleyBatch::VerifyDatabaseFile(wallet_path, errorStr);\n }\n \n bool WalletBatch::WriteDestData(const std::string &address, const std::string &key, const std::string &value)"
      },
      {
        "sha": "b95ed24d121828dffa56df38451eae8183f8f60b",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 4,
        "deletions": 7,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/520e435b5e56dec7e86b0e5dbc50e3906e586a82/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/520e435b5e56dec7e86b0e5dbc50e3906e586a82/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=520e435b5e56dec7e86b0e5dbc50e3906e586a82",
        "patch": "@@ -261,18 +261,12 @@ class WalletBatch\n     DBErrors FindWalletTx(std::vector<uint256>& vTxHash, std::list<CWalletTx>& vWtx);\n     DBErrors ZapWalletTx(std::list<CWalletTx>& vWtx);\n     DBErrors ZapSelectTx(std::vector<uint256>& vHashIn, std::vector<uint256>& vHashOut);\n-    /* Try to (very carefully!) recover wallet database (with a possible key type filter) */\n-    static bool Recover(const fs::path& wallet_path, void *callbackDataIn, bool (*recoverKVcallback)(void* callbackData, CDataStream ssKey, CDataStream ssValue), std::string& out_backup_filename);\n-    /* Recover convenience-function to bypass the key filter callback, called when verify fails, recovers everything */\n-    static bool Recover(const fs::path& wallet_path, std::string& out_backup_filename);\n-    /* Recover filter (used as callback), will only let keys (cryptographical keys) as KV/key-type pass through */\n-    static bool RecoverKeysOnlyFilter(void *callbackData, CDataStream ssKey, CDataStream ssValue);\n     /* Function to determine if a certain KV/key-type is a key (cryptographical key) type */\n     static bool IsKeyType(const std::string& strType);\n     /* verifies the database environment */\n     static bool VerifyEnvironment(const fs::path& wallet_path, bilingual_str& errorStr);\n     /* verifies the database file */\n-    static bool VerifyDatabaseFile(const fs::path& wallet_path, std::vector<bilingual_str>& warnings, bilingual_str& errorStr);\n+    static bool VerifyDatabaseFile(const fs::path& wallet_path, bilingual_str& errorStr);\n \n     //! write the hdchain model (external chain child index counter)\n     bool WriteHDChain(const CHDChain& chain);\n@@ -292,4 +286,7 @@ class WalletBatch\n //! Compacts BDB state so that wallet.dat is self-contained (if there are changes)\n void MaybeCompactWalletDB();\n \n+//! Unserialize a given Key-Value pair and load it into the wallet\n+bool ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue, std::string& strType, std::string& strErr);\n+\n #endif // BITCOIN_WALLET_WALLETDB_H"
      },
      {
        "sha": "be07c285030243ad4b7538b6336c018487ebab22",
        "filename": "src/wallet/wallettool.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 5,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/520e435b5e56dec7e86b0e5dbc50e3906e586a82/src/wallet/wallettool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/520e435b5e56dec7e86b0e5dbc50e3906e586a82/src/wallet/wallettool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallettool.cpp?ref=520e435b5e56dec7e86b0e5dbc50e3906e586a82",
        "patch": "@@ -5,6 +5,7 @@\n #include <fs.h>\n #include <util/system.h>\n #include <util/translation.h>\n+#include <wallet/salvage.h>\n #include <wallet/wallet.h>\n #include <wallet/walletutil.h>\n \n@@ -103,6 +104,27 @@ static void WalletShowInfo(CWallet* wallet_instance)\n     tfm::format(std::cout, \"Address Book: %zu\\n\", wallet_instance->m_address_book.size());\n }\n \n+static bool SalvageWallet(const fs::path& path)\n+{\n+    // Create a Database handle to allow for the db to be initialized before recovery\n+    std::unique_ptr<WalletDatabase> database = WalletDatabase::Create(path);\n+\n+    // Initialize the environment before recovery\n+    bilingual_str error_string;\n+    try {\n+        WalletBatch::VerifyEnvironment(path, error_string);\n+    } catch (const fs::filesystem_error& e) {\n+        error_string = Untranslated(strprintf(\"Error loading wallet. %s\", fsbridge::get_filesystem_error_message(e)));\n+    }\n+    if (!error_string.original.empty()) {\n+        tfm::format(std::cerr, \"Failed to open wallet for salvage :%s\\n\", error_string.original);\n+        return false;\n+    }\n+\n+    // Perform the recovery\n+    return RecoverDatabaseFile(path);\n+}\n+\n bool ExecuteWalletToolFunc(const std::string& command, const std::string& name)\n {\n     fs::path path = fs::absolute(name, GetWalletDir());\n@@ -113,7 +135,7 @@ bool ExecuteWalletToolFunc(const std::string& command, const std::string& name)\n             WalletShowInfo(wallet_instance.get());\n             wallet_instance->Flush(true);\n         }\n-    } else if (command == \"info\") {\n+    } else if (command == \"info\" || command == \"salvage\") {\n         if (!fs::exists(path)) {\n             tfm::format(std::cerr, \"Error: no wallet file at %s\\n\", name);\n             return false;\n@@ -123,10 +145,15 @@ bool ExecuteWalletToolFunc(const std::string& command, const std::string& name)\n             tfm::format(std::cerr, \"%s\\nError loading %s. Is wallet being used by other process?\\n\", error.original, name);\n             return false;\n         }\n-        std::shared_ptr<CWallet> wallet_instance = LoadWallet(name, path);\n-        if (!wallet_instance) return false;\n-        WalletShowInfo(wallet_instance.get());\n-        wallet_instance->Flush(true);\n+\n+        if (command == \"info\") {\n+            std::shared_ptr<CWallet> wallet_instance = LoadWallet(name, path);\n+            if (!wallet_instance) return false;\n+            WalletShowInfo(wallet_instance.get());\n+            wallet_instance->Flush(true);\n+        } else if (command == \"salvage\") {\n+            return SalvageWallet(path);\n+        }\n     } else {\n         tfm::format(std::cerr, \"Invalid command: %s\\n\", command);\n         return false;"
      },
      {
        "sha": "524e1593bae5cd4457fa18317d5a1d372be1885f",
        "filename": "test/functional/tool_wallet.py",
        "status": "modified",
        "additions": 9,
        "deletions": 1,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/520e435b5e56dec7e86b0e5dbc50e3906e586a82/test/functional/tool_wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/520e435b5e56dec7e86b0e5dbc50e3906e586a82/test/functional/tool_wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/tool_wallet.py?ref=520e435b5e56dec7e86b0e5dbc50e3906e586a82",
        "patch": "@@ -203,6 +203,14 @@ def test_getwalletinfo_on_different_wallet(self):\n         assert_equal(shasum_after, shasum_before)\n         self.log.debug('Wallet file shasum unchanged\\n')\n \n+    def test_salvage(self):\n+        # TODO: Check salvage actually salvages and doesn't break things. https://github.com/bitcoin/bitcoin/issues/7463\n+        self.log.info('Check salvage')\n+        self.start_node(0, ['-wallet=salvage'])\n+        self.stop_node(0)\n+\n+        self.assert_tool_output('', '-wallet=salvage', 'salvage')\n+\n     def run_test(self):\n         self.wallet_path = os.path.join(self.nodes[0].datadir, self.chain, 'wallets', 'wallet.dat')\n         self.test_invalid_tool_commands_and_args()\n@@ -211,7 +219,7 @@ def run_test(self):\n         self.test_tool_wallet_info_after_transaction()\n         self.test_tool_wallet_create_on_existing_wallet()\n         self.test_getwalletinfo_on_different_wallet()\n-\n+        self.test_salvage()\n \n if __name__ == '__main__':\n     ToolWalletTest().main()"
      },
      {
        "sha": "797c903dd34af6e8ef218e901281a1754b77d832",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/520e435b5e56dec7e86b0e5dbc50e3906e586a82/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/520e435b5e56dec7e86b0e5dbc50e3906e586a82/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=520e435b5e56dec7e86b0e5dbc50e3906e586a82",
        "patch": "@@ -404,8 +404,6 @@ def run_test(self):\n             '-reindex',\n             '-zapwallettxes=1',\n             '-zapwallettxes=2',\n-            # disabled until issue is fixed: https://github.com/bitcoin/bitcoin/issues/7463\n-            # '-salvagewallet',\n         ]\n         chainlimit = 6\n         for m in maintenance:"
      },
      {
        "sha": "ff9ff341853928a6447d9d0e19ba2af1af447a9a",
        "filename": "test/functional/wallet_multiwallet.py",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/520e435b5e56dec7e86b0e5dbc50e3906e586a82/test/functional/wallet_multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/520e435b5e56dec7e86b0e5dbc50e3906e586a82/test/functional/wallet_multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_multiwallet.py?ref=520e435b5e56dec7e86b0e5dbc50e3906e586a82",
        "patch": "@@ -122,10 +122,6 @@ def wallet_file(name):\n         self.nodes[0].assert_start_raises_init_error(['-zapwallettxes=1', '-wallet=w1', '-wallet=w2'], \"Error: -zapwallettxes is only allowed with a single wallet file\")\n         self.nodes[0].assert_start_raises_init_error(['-zapwallettxes=2', '-wallet=w1', '-wallet=w2'], \"Error: -zapwallettxes is only allowed with a single wallet file\")\n \n-        self.log.info(\"Do not allow -salvagewallet with multiwallet\")\n-        self.nodes[0].assert_start_raises_init_error(['-salvagewallet', '-wallet=w1', '-wallet=w2'], \"Error: -salvagewallet is only allowed with a single wallet file\")\n-        self.nodes[0].assert_start_raises_init_error(['-salvagewallet=1', '-wallet=w1', '-wallet=w2'], \"Error: -salvagewallet is only allowed with a single wallet file\")\n-\n         # if wallets/ doesn't exist, datadir should be the default wallet dir\n         wallet_dir2 = data_dir('walletdir')\n         os.rename(wallet_dir(), wallet_dir2)"
      }
    ]
  },
  {
    "sha": "1c91ffefcf54d22f805c86318ea32d23b9d20c96",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYzkxZmZlZmNmNTRkMjJmODA1Yzg2MzE4ZWEzMmQyM2I5ZDIwYzk2",
    "commit": {
      "author": {
        "name": "pad",
        "email": "pad@maitrebitcoin.com",
        "date": "2020-05-27T06:02:00Z"
      },
      "committer": {
        "name": "pad",
        "email": "pad@maitrebitcoin.com",
        "date": "2020-05-27T06:02:00Z"
      },
      "message": "doc : add link to readme.md in the first section",
      "tree": {
        "sha": "361bff85aae0a874f433d2f2cdee4a0a7ac4bde6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/361bff85aae0a874f433d2f2cdee4a0a7ac4bde6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1c91ffefcf54d22f805c86318ea32d23b9d20c96",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c91ffefcf54d22f805c86318ea32d23b9d20c96",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1c91ffefcf54d22f805c86318ea32d23b9d20c96",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c91ffefcf54d22f805c86318ea32d23b9d20c96/comments",
    "author": {
      "login": "maitrebitcoin",
      "id": 58720518,
      "node_id": "MDQ6VXNlcjU4NzIwNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/58720518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/maitrebitcoin",
      "html_url": "https://github.com/maitrebitcoin",
      "followers_url": "https://api.github.com/users/maitrebitcoin/followers",
      "following_url": "https://api.github.com/users/maitrebitcoin/following{/other_user}",
      "gists_url": "https://api.github.com/users/maitrebitcoin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/maitrebitcoin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/maitrebitcoin/subscriptions",
      "organizations_url": "https://api.github.com/users/maitrebitcoin/orgs",
      "repos_url": "https://api.github.com/users/maitrebitcoin/repos",
      "events_url": "https://api.github.com/users/maitrebitcoin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/maitrebitcoin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "maitrebitcoin",
      "id": 58720518,
      "node_id": "MDQ6VXNlcjU4NzIwNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/58720518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/maitrebitcoin",
      "html_url": "https://github.com/maitrebitcoin",
      "followers_url": "https://api.github.com/users/maitrebitcoin/followers",
      "following_url": "https://api.github.com/users/maitrebitcoin/following{/other_user}",
      "gists_url": "https://api.github.com/users/maitrebitcoin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/maitrebitcoin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/maitrebitcoin/subscriptions",
      "organizations_url": "https://api.github.com/users/maitrebitcoin/orgs",
      "repos_url": "https://api.github.com/users/maitrebitcoin/repos",
      "events_url": "https://api.github.com/users/maitrebitcoin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/maitrebitcoin/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "24f70290642c9c5108d3dc62dbe055f5d1bcff9d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/24f70290642c9c5108d3dc62dbe055f5d1bcff9d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/24f70290642c9c5108d3dc62dbe055f5d1bcff9d"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "d3dc467f198031f794041698dd6359153beb5783",
        "filename": "doc/build-windows.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1c91ffefcf54d22f805c86318ea32d23b9d20c96/doc/build-windows.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1c91ffefcf54d22f805c86318ea32d23b9d20c96/doc/build-windows.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-windows.md?ref=1c91ffefcf54d22f805c86318ea32d23b9d20c96",
        "patch": "@@ -9,7 +9,7 @@ The options known to work for building Bitcoin Core on Windows are:\n and is the platform used to build the Bitcoin Core Windows release binaries.\n * On Windows, using [Windows\n Subsystem for Linux (WSL)](https://docs.microsoft.com/windows/wsl/about) and the Mingw-w64 cross compiler tool chain.\n-* On Windows, using a native compiler tool chain such as [Visual Studio](https://www.visualstudio.com).\n+* On Windows, using a native compiler tool chain such as [Visual Studio](https://www.visualstudio.com). See [README.md](/build_msvc/README.md).\n \n Other options which may work, but which have not been extensively tested are (please contribute instructions):\n "
      }
    ]
  },
  {
    "sha": "48e114e0a86f0b3e97303333877d1c3086155c2f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0OGUxMTRlMGE4NmYwYjNlOTczMDMzMzM4NzdkMWMzMDg2MTU1YzJm",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2020-05-27T09:11:12Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2020-05-27T09:51:05Z"
      },
      "message": "Merge #19061: doc: Add link to Visual Studio build readme\n\n1c91ffefcf54d22f805c86318ea32d23b9d20c96 doc : add link to readme.md in the first section (pad)\n\nPull request description:\n\n  I have searched how to do it in this doc for some time :-(\n  I think it might help other newbies interested in building with visual studio.\n\nACKs for top commit:\n  hebasto:\n    ACK 1c91ffefcf54d22f805c86318ea32d23b9d20c96, a new link works as expected :)\n\nTree-SHA512: 42ef3ba374bced9b4ab0010fe8c30de06f59ff8a84f8e02f8a91f33e7e403cf91d624fc7df3f45096df53171a90b9ff60277969cc30f1357d92094ad72ca9d53",
      "tree": {
        "sha": "6b75c16f6e9a368b4a845776824bed04990cdd17",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6b75c16f6e9a368b4a845776824bed04990cdd17"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/48e114e0a86f0b3e97303333877d1c3086155c2f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl7OOAkACgkQLuufXMCV\nJsEPjA//Wg2lb9oLTTYz1sckLV+0vzAUF61ckM8nSCTZdZx9f0kiXyqHuaItJ1jW\nfFo5qaM4RcYDGyBw4DAw0NPdJKKEyOMKKsaj+CgJPE23zPxSv6CHfcuXCMisLdcs\nptjn8WT6Xk5CPGRDeV/sqg+1EAySAcw8icBOHCPo+phnkWvpHI0Mjm3lqQwhwRer\nwb9d12yyIEJX6LH+1vh9rL14ywvGHhmsvEnbgy7v1hvxYF8dzeabWZeIVgm+XEaB\ny1YZMSQWHWuU+A4eVMdmEdZCOzWUvOVuFCUTw332eO59498jyW7xl7JG72CL2Ruc\nttrbp+aVtFQJDG4a1M+QP+XFH+cssouC6tM9DC/u0xF/ZE9P3GATM3VUh4iUA05D\ndisT+xqavaWq2MRj41/FFpqDpE9BnoJd1KCKtV0ReeUtt6Oq/6wzh8QPjESKI3aQ\nwUprCQ2qMuLRAKDVAbGKC7PDZ71sMPKjvZWcebLhgca54Dfk6BZW8R8BuvFqcsac\nHHtUAri49oV/tWhSPsLTD3EBFlGADa+WPT9wJQWevgZGJzJs7YHd/rkCN+m02aJR\njpPXCvpLO+sqppyzLefJgslyMi0eIaEIRXDApDkQEEixdhuIuZSeWzlgFNh19jZy\nnSKGRd2UkI0u7G6o6Oq9As0TNfHLDw6Vn+085OPfZD2SKEQszkw=\n=21A2\n-----END PGP SIGNATURE-----",
        "payload": "tree 6b75c16f6e9a368b4a845776824bed04990cdd17\nparent 520e435b5e56dec7e86b0e5dbc50e3906e586a82\nparent 1c91ffefcf54d22f805c86318ea32d23b9d20c96\nauthor fanquake <fanquake@gmail.com> 1590570672 +0800\ncommitter fanquake <fanquake@gmail.com> 1590573065 +0800\n\nMerge #19061: doc: Add link to Visual Studio build readme\n\n1c91ffefcf54d22f805c86318ea32d23b9d20c96 doc : add link to readme.md in the first section (pad)\n\nPull request description:\n\n  I have searched how to do it in this doc for some time :-(\n  I think it might help other newbies interested in building with visual studio.\n\nACKs for top commit:\n  hebasto:\n    ACK 1c91ffefcf54d22f805c86318ea32d23b9d20c96, a new link works as expected :)\n\nTree-SHA512: 42ef3ba374bced9b4ab0010fe8c30de06f59ff8a84f8e02f8a91f33e7e403cf91d624fc7df3f45096df53171a90b9ff60277969cc30f1357d92094ad72ca9d53\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/48e114e0a86f0b3e97303333877d1c3086155c2f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/48e114e0a86f0b3e97303333877d1c3086155c2f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/48e114e0a86f0b3e97303333877d1c3086155c2f/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "520e435b5e56dec7e86b0e5dbc50e3906e586a82",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/520e435b5e56dec7e86b0e5dbc50e3906e586a82",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/520e435b5e56dec7e86b0e5dbc50e3906e586a82"
      },
      {
        "sha": "1c91ffefcf54d22f805c86318ea32d23b9d20c96",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c91ffefcf54d22f805c86318ea32d23b9d20c96",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1c91ffefcf54d22f805c86318ea32d23b9d20c96"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "d3dc467f198031f794041698dd6359153beb5783",
        "filename": "doc/build-windows.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/48e114e0a86f0b3e97303333877d1c3086155c2f/doc/build-windows.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/48e114e0a86f0b3e97303333877d1c3086155c2f/doc/build-windows.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-windows.md?ref=48e114e0a86f0b3e97303333877d1c3086155c2f",
        "patch": "@@ -9,7 +9,7 @@ The options known to work for building Bitcoin Core on Windows are:\n and is the platform used to build the Bitcoin Core Windows release binaries.\n * On Windows, using [Windows\n Subsystem for Linux (WSL)](https://docs.microsoft.com/windows/wsl/about) and the Mingw-w64 cross compiler tool chain.\n-* On Windows, using a native compiler tool chain such as [Visual Studio](https://www.visualstudio.com).\n+* On Windows, using a native compiler tool chain such as [Visual Studio](https://www.visualstudio.com). See [README.md](/build_msvc/README.md).\n \n Other options which may work, but which have not been extensively tested are (please contribute instructions):\n "
      }
    ]
  },
  {
    "sha": "cffbf1eb9a4771034bda6f0a4faa2465e7640b2e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZmZiZjFlYjlhNDc3MTAzNGJkYTZmMGE0ZmFhMjQ2NWU3NjQwYjJl",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2020-05-27T10:14:55Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2020-05-27T10:35:54Z"
      },
      "message": "Merge #19073: Remove outdated comment about DER encoding\n\n4c825792dd9f4eaf4936c3e376ac7a5c177528e2 Remove outdated comment about DER encoding (Elichai Turkel)\n\nPull request description:\n\n  This comment got me confused about the status of BIP66 (Thanks jnewbery for explaining)\n  The comment was added in: https://github.com/bitcoin/bitcoin/pull/3843\n  But in https://github.com/bitcoin/bitcoin/pull/5713 strict DER encoding was enforced in consensus,\n  and is now it's buried and enforced by the height of the block here: https://github.com/bitcoin/bitcoin/blob/4af01b37d40246cd1fdb54719855927e36a36b46/src/validation.cpp#L1889\n\n  P.S. This is also quite confusing: https://github.com/bitcoin/bitcoin/blob/4af01b37d40246cd1fdb54719855927e36a36b46/src/validation.cpp#L1560-L1563 But seems to be intentional: https://github.com/bitcoin/bitcoin/blob/4af01b37d40246cd1fdb54719855927e36a36b46/src/validation.cpp#L1510-L1511\n\nACKs for top commit:\n  laanwj:\n    ACK 4c825792dd9f4eaf4936c3e376ac7a5c177528e2\n\nTree-SHA512: 7afbbae84ed4ecfaa0a273ae024b14f2b7ffe65307f078086fe0b5b645c57722bc2952fb15d167d9e4fa5b052d1d0ac6e5e33f57e8fc881c0ea611d352bccc1e",
      "tree": {
        "sha": "452671a06e3458d1dee76a25909e847f9252eff4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/452671a06e3458d1dee76a25909e847f9252eff4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cffbf1eb9a4771034bda6f0a4faa2465e7640b2e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl7OQooACgkQLuufXMCV\nJsHnXQ//XhZQfucE/2pojjy6WSGzcCsoM5vwg53B100hy4/VXABQ+vbM1rZeXGV5\nvxGY8j6EOrnU9LYFXijdg9aBxr9IH8nSi+3iviRdn3tf9yYG4bi5zq3rjErpTsku\nNBWK4L9vzLWv57ufB5Zgc2eQMjOzqcny4fRqylN3N/Kayrf4zlf6q8+DQGCc3grK\nUK0EW6uHkpsDKs/ZadY0GT8TqC2a81tDdrFioVCigxyZZo0Xwx2nD5LfsyTqrE1H\nfXomfyaSCWqxfOp1dasgtqLYy9d+gMLB4k0tbtKW+mhX4FZ70Lynk/1pDEIMn3Ub\nBCJ+J8NXJpCSy1wVrst9A6UDySH/FCYQG1m+ajqMr/UKoFaFG6IkdcqUIkhGotqD\n2YUn3VXvCSn02H7UUkU88zKKoRx3G9XUcIRq5rNiPzbUJfaToHtjTXwzhd6Zv+7+\n7SjzkC/QYOcVO1DXiDA3QQpFO0QRHexsV7DnfPWjIxZSff0iLlIwzN8N3T/dNod8\noqOsraZ+IDvQzllbVOJgjdU6U/wbGtpmLpIfRvzihGqLx5TBbwAIhPzrcY6TYM4h\nXW3p39LcYrQRHt3U32xXzIf7dmrhN5oVWbG8KtR4tDVIGc7eu4AuLiaAipIqqWmX\nyDOLicQlZSx9jtN+n2x/H6QmxsGwu8+Naac5zPppxZXr6TxAE8s=\n=vlup\n-----END PGP SIGNATURE-----",
        "payload": "tree 452671a06e3458d1dee76a25909e847f9252eff4\nparent 48e114e0a86f0b3e97303333877d1c3086155c2f\nparent 4c825792dd9f4eaf4936c3e376ac7a5c177528e2\nauthor fanquake <fanquake@gmail.com> 1590574495 +0800\ncommitter fanquake <fanquake@gmail.com> 1590575754 +0800\n\nMerge #19073: Remove outdated comment about DER encoding\n\n4c825792dd9f4eaf4936c3e376ac7a5c177528e2 Remove outdated comment about DER encoding (Elichai Turkel)\n\nPull request description:\n\n  This comment got me confused about the status of BIP66 (Thanks jnewbery for explaining)\n  The comment was added in: https://github.com/bitcoin/bitcoin/pull/3843\n  But in https://github.com/bitcoin/bitcoin/pull/5713 strict DER encoding was enforced in consensus,\n  and is now it's buried and enforced by the height of the block here: https://github.com/bitcoin/bitcoin/blob/4af01b37d40246cd1fdb54719855927e36a36b46/src/validation.cpp#L1889\n\n  P.S. This is also quite confusing: https://github.com/bitcoin/bitcoin/blob/4af01b37d40246cd1fdb54719855927e36a36b46/src/validation.cpp#L1560-L1563 But seems to be intentional: https://github.com/bitcoin/bitcoin/blob/4af01b37d40246cd1fdb54719855927e36a36b46/src/validation.cpp#L1510-L1511\n\nACKs for top commit:\n  laanwj:\n    ACK 4c825792dd9f4eaf4936c3e376ac7a5c177528e2\n\nTree-SHA512: 7afbbae84ed4ecfaa0a273ae024b14f2b7ffe65307f078086fe0b5b645c57722bc2952fb15d167d9e4fa5b052d1d0ac6e5e33f57e8fc881c0ea611d352bccc1e\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cffbf1eb9a4771034bda6f0a4faa2465e7640b2e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cffbf1eb9a4771034bda6f0a4faa2465e7640b2e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cffbf1eb9a4771034bda6f0a4faa2465e7640b2e/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "48e114e0a86f0b3e97303333877d1c3086155c2f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/48e114e0a86f0b3e97303333877d1c3086155c2f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/48e114e0a86f0b3e97303333877d1c3086155c2f"
      },
      {
        "sha": "4c825792dd9f4eaf4936c3e376ac7a5c177528e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4c825792dd9f4eaf4936c3e376ac7a5c177528e2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4c825792dd9f4eaf4936c3e376ac7a5c177528e2"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 1,
      "deletions": 2
    },
    "files": [
      {
        "sha": "8e50e064bbb3508aa848ab40f05eafcfb560e5bd",
        "filename": "src/script/standard.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cffbf1eb9a4771034bda6f0a4faa2465e7640b2e/src/script/standard.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cffbf1eb9a4771034bda6f0a4faa2465e7640b2e/src/script/standard.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.h?ref=cffbf1eb9a4771034bda6f0a4faa2465e7640b2e",
        "patch": "@@ -44,8 +44,7 @@ extern unsigned nMaxDatacarrierBytes;\n /**\n  * Mandatory script verification flags that all new blocks must comply with for\n  * them to be valid. (but old blocks may not comply with) Currently just P2SH,\n- * but in the future other flags may be added, such as a soft-fork to enforce\n- * strict DER encoding.\n+ * but in the future other flags may be added.\n  *\n  * Failing one of these tests may trigger a DoS ban - see CheckInputScripts() for\n  * details."
      }
    ]
  },
  {
    "sha": "9ccaee1d5e2e4b79b0a7c29aadb41b97e4741332",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5Y2NhZWUxZDVlMmU0Yjc5YjBhN2MyOWFhZGI0MWI5N2U0NzQxMzMy",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-05-27T11:15:53Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-05-27T11:16:10Z"
      },
      "message": "Merge #19004: refactor: Replace const char* to std::string\n\nc57f03ce1741b38af448bec7b22ab9f8ac21f067 refactor: Replace const char* to std::string (Calvin Kim)\n\nPull request description:\n\n  Rationale: Addresses #19000\n  Some functions should be returning std::string instead of const char*.\n  This commit changes that.\n\n  Main benefits/reasoning:\n\n  1.  The functions never return nullptr, so returning a string makes code at call sites easier to review (reviewers don't have to read the source code to verify that a nullptr is never returned)\n  2. All call sites convert to string anyway\n\nACKs for top commit:\n  MarcoFalke:\n    re-ACK c57f03ce17 (no changes since previous review) \ud83d\ude83\n  Empact:\n    Fair enough, Code Review ACK https://github.com/bitcoin/bitcoin/pull/19004/commits/c57f03ce1741b38af448bec7b22ab9f8ac21f067\n  practicalswift:\n    ACK c57f03ce1741b38af448bec7b22ab9f8ac21f067 -- patch looks correct\n  hebasto:\n    re-ACK c57f03ce1741b38af448bec7b22ab9f8ac21f067\n\nTree-SHA512: 9ce99bb38fe399b54844315048204cafce0f27fd8f24cae357fa7ac6f5d8094d57bbf5f5c1f5878a65f2d35e4a3f95d527eb17f49250b690c591c0df86ca84fd",
      "tree": {
        "sha": "1740174c473596d3dc51b618d2aa88f1a90f96ed",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1740174c473596d3dc51b618d2aa88f1a90f96ed"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9ccaee1d5e2e4b79b0a7c29aadb41b97e4741332",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUiTGwv9Hn5IO9veCYIxxUywipBrZzsHcX6031IHivt3blRA76y57ndl1EUyxy8F\npVsUq9AtLYoazpl/xm6d+7z80ENjeMfpkrICo3ytBwZFNNau/WxkAW/0XfPblZve\nx5mifi+Rwtz/dSbUtz9Ra6Xmjd6GPO/wXwx0/7X+23VPGMl0IOE0Vh4xF+bzFrS/\nngDMGl9aR1fYk7/oj9nuouoDXyrvVLzz+F06wdwBQYMIFH3u4v1xGxgLa4mm27Dc\nGBTh33CAkHal7U1fLDvWCZNWbvqmdHJY9VqEdVV7yklXpEYcxIajwhw5rHiB9Ir9\n48pCWCbCij/Ihyaw4AFvScHlbwkFZTKMB3COlozsoOclNXTguaYJe/L5Z5OuixSC\nvpfJmqcWJKap3YNWk76pYVsunLxbu24pPLILQCLsRdbh576VMZPeiOQanZsEcKIw\nw1ZbDMF+uwemmzD9tWZZoTOOcwA/51/WXmytdWjVXPAtkCqZPDHjvwNzdHazcdgW\nO/027mZ3\n=4Zsj\n-----END PGP SIGNATURE-----",
        "payload": "tree 1740174c473596d3dc51b618d2aa88f1a90f96ed\nparent cffbf1eb9a4771034bda6f0a4faa2465e7640b2e\nparent c57f03ce1741b38af448bec7b22ab9f8ac21f067\nauthor MarcoFalke <falke.marco@gmail.com> 1590578153 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1590578170 -0400\n\nMerge #19004: refactor: Replace const char* to std::string\n\nc57f03ce1741b38af448bec7b22ab9f8ac21f067 refactor: Replace const char* to std::string (Calvin Kim)\n\nPull request description:\n\n  Rationale: Addresses #19000\n  Some functions should be returning std::string instead of const char*.\n  This commit changes that.\n\n  Main benefits/reasoning:\n\n  1.  The functions never return nullptr, so returning a string makes code at call sites easier to review (reviewers don't have to read the source code to verify that a nullptr is never returned)\n  2. All call sites convert to string anyway\n\nACKs for top commit:\n  MarcoFalke:\n    re-ACK c57f03ce17 (no changes since previous review) \ud83d\ude83\n  Empact:\n    Fair enough, Code Review ACK https://github.com/bitcoin/bitcoin/pull/19004/commits/c57f03ce1741b38af448bec7b22ab9f8ac21f067\n  practicalswift:\n    ACK c57f03ce1741b38af448bec7b22ab9f8ac21f067 -- patch looks correct\n  hebasto:\n    re-ACK c57f03ce1741b38af448bec7b22ab9f8ac21f067\n\nTree-SHA512: 9ce99bb38fe399b54844315048204cafce0f27fd8f24cae357fa7ac6f5d8094d57bbf5f5c1f5878a65f2d35e4a3f95d527eb17f49250b690c591c0df86ca84fd\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ccaee1d5e2e4b79b0a7c29aadb41b97e4741332",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9ccaee1d5e2e4b79b0a7c29aadb41b97e4741332",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ccaee1d5e2e4b79b0a7c29aadb41b97e4741332/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cffbf1eb9a4771034bda6f0a4faa2465e7640b2e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cffbf1eb9a4771034bda6f0a4faa2465e7640b2e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cffbf1eb9a4771034bda6f0a4faa2465e7640b2e"
      },
      {
        "sha": "c57f03ce1741b38af448bec7b22ab9f8ac21f067",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c57f03ce1741b38af448bec7b22ab9f8ac21f067",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c57f03ce1741b38af448bec7b22ab9f8ac21f067"
      }
    ],
    "stats": {
      "total": 37,
      "additions": 24,
      "deletions": 13
    },
    "files": [
      {
        "sha": "8d85789b4ebbb809f4095248bfac2a7a7c1ed70a",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ccaee1d5e2e4b79b0a7c29aadb41b97e4741332/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ccaee1d5e2e4b79b0a7c29aadb41b97e4741332/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=9ccaee1d5e2e4b79b0a7c29aadb41b97e4741332",
        "patch": "@@ -21,6 +21,7 @@\n #include <functional>\n #include <memory>\n #include <stdio.h>\n+#include <string>\n #include <tuple>\n \n #include <event2/buffer.h>\n@@ -158,7 +159,7 @@ struct HTTPReply\n     std::string body;\n };\n \n-static const char *http_errorstring(int code)\n+static std::string http_errorstring(int code)\n {\n     switch(code) {\n #if LIBEVENT_VERSION_NUMBER >= 0x02010300"
      },
      {
        "sha": "1c0a8a096dcc1480e38f4518dfb72408b3d5084a",
        "filename": "src/core_read.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ccaee1d5e2e4b79b0a7c29aadb41b97e4741332/src/core_read.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ccaee1d5e2e4b79b0a7c29aadb41b97e4741332/src/core_read.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_read.cpp?ref=9ccaee1d5e2e4b79b0a7c29aadb41b97e4741332",
        "patch": "@@ -19,6 +19,7 @@\n #include <boost/algorithm/string/split.hpp>\n \n #include <algorithm>\n+#include <string>\n \n CScript ParseScript(const std::string& s)\n {\n@@ -34,10 +35,9 @@ CScript ParseScript(const std::string& s)\n             if (op < OP_NOP && op != OP_RESERVED)\n                 continue;\n \n-            const char* name = GetOpName(static_cast<opcodetype>(op));\n-            if (strcmp(name, \"OP_UNKNOWN\") == 0)\n+            std::string strName = GetOpName(static_cast<opcodetype>(op));\n+            if (strName == \"OP_UNKNOWN\")\n                 continue;\n-            std::string strName(name);\n             mapOpNames[strName] = static_cast<opcodetype>(op);\n             // Convenience: OP_ADD and just ADD are both recognized:\n             boost::algorithm::replace_first(strName, \"OP_\", \"\");"
      },
      {
        "sha": "92c6fe7785fc3ac34c806b4a672a3af79debf5b4",
        "filename": "src/script/script.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ccaee1d5e2e4b79b0a7c29aadb41b97e4741332/src/script/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ccaee1d5e2e4b79b0a7c29aadb41b97e4741332/src/script/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.cpp?ref=9ccaee1d5e2e4b79b0a7c29aadb41b97e4741332",
        "patch": "@@ -7,7 +7,9 @@\n \n #include <util/strencodings.h>\n \n-const char* GetOpName(opcodetype opcode)\n+#include <string>\n+\n+std::string GetOpName(opcodetype opcode)\n {\n     switch (opcode)\n     {"
      },
      {
        "sha": "c1f2b669218f44a3ab9fdd702b67bb4329e25de6",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ccaee1d5e2e4b79b0a7c29aadb41b97e4741332/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ccaee1d5e2e4b79b0a7c29aadb41b97e4741332/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=9ccaee1d5e2e4b79b0a7c29aadb41b97e4741332",
        "patch": "@@ -193,7 +193,7 @@ enum opcodetype\n // Maximum value that an opcode can be\n static const unsigned int MAX_OPCODE = OP_NOP10;\n \n-const char* GetOpName(opcodetype opcode);\n+std::string GetOpName(opcodetype opcode);\n \n class scriptnum_error : public std::runtime_error\n {"
      },
      {
        "sha": "69e14803f1b5d48805c14991e180b05b39f65b3d",
        "filename": "src/script/script_error.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ccaee1d5e2e4b79b0a7c29aadb41b97e4741332/src/script/script_error.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ccaee1d5e2e4b79b0a7c29aadb41b97e4741332/src/script/script_error.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script_error.cpp?ref=9ccaee1d5e2e4b79b0a7c29aadb41b97e4741332",
        "patch": "@@ -5,7 +5,9 @@\n \n #include <script/script_error.h>\n \n-const char* ScriptErrorString(const ScriptError serror)\n+#include <string>\n+\n+std::string ScriptErrorString(const ScriptError serror)\n {\n     switch (serror)\n     {"
      },
      {
        "sha": "2978c147e144277190604345617df95e52d47e4c",
        "filename": "src/script/script_error.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ccaee1d5e2e4b79b0a7c29aadb41b97e4741332/src/script/script_error.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ccaee1d5e2e4b79b0a7c29aadb41b97e4741332/src/script/script_error.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script_error.h?ref=9ccaee1d5e2e4b79b0a7c29aadb41b97e4741332",
        "patch": "@@ -6,6 +6,8 @@\n #ifndef BITCOIN_SCRIPT_SCRIPT_ERROR_H\n #define BITCOIN_SCRIPT_SCRIPT_ERROR_H\n \n+#include <string>\n+\n typedef enum ScriptError_t\n {\n     SCRIPT_ERR_OK = 0,\n@@ -73,6 +75,6 @@ typedef enum ScriptError_t\n \n #define SCRIPT_ERR_LAST SCRIPT_ERR_ERROR_COUNT\n \n-const char* ScriptErrorString(const ScriptError error);\n+std::string ScriptErrorString(const ScriptError error);\n \n #endif // BITCOIN_SCRIPT_SCRIPT_ERROR_H"
      },
      {
        "sha": "c90c2c24a01fb66506f73086548b30fc3891408d",
        "filename": "src/script/standard.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ccaee1d5e2e4b79b0a7c29aadb41b97e4741332/src/script/standard.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ccaee1d5e2e4b79b0a7c29aadb41b97e4741332/src/script/standard.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.cpp?ref=9ccaee1d5e2e4b79b0a7c29aadb41b97e4741332",
        "patch": "@@ -9,6 +9,8 @@\n #include <pubkey.h>\n #include <script/script.h>\n \n+#include <string>\n+\n typedef std::vector<unsigned char> valtype;\n \n bool fAcceptDatacarrier = DEFAULT_ACCEPT_DATACARRIER;\n@@ -25,7 +27,7 @@ WitnessV0ScriptHash::WitnessV0ScriptHash(const CScript& in)\n     CSHA256().Write(in.data(), in.size()).Finalize(begin());\n }\n \n-const char* GetTxnOutputType(txnouttype t)\n+std::string GetTxnOutputType(txnouttype t)\n {\n     switch (t)\n     {\n@@ -39,7 +41,7 @@ const char* GetTxnOutputType(txnouttype t)\n     case TX_WITNESS_V0_SCRIPTHASH: return \"witness_v0_scripthash\";\n     case TX_WITNESS_UNKNOWN: return \"witness_unknown\";\n     }\n-    return nullptr;\n+    assert(false);\n }\n \n static bool MatchPayToPubkey(const CScript& script, valtype& pubkey)"
      },
      {
        "sha": "29294256705e6a3d6c6149ddb21036d81534cf50",
        "filename": "src/script/standard.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ccaee1d5e2e4b79b0a7c29aadb41b97e4741332/src/script/standard.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ccaee1d5e2e4b79b0a7c29aadb41b97e4741332/src/script/standard.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.h?ref=9ccaee1d5e2e4b79b0a7c29aadb41b97e4741332",
        "patch": "@@ -11,6 +11,8 @@\n \n #include <boost/variant.hpp>\n \n+#include <string>\n+\n \n static const bool DEFAULT_ACCEPT_DATACARRIER = true;\n \n@@ -145,7 +147,7 @@ typedef boost::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash,\n bool IsValidDestination(const CTxDestination& dest);\n \n /** Get the name of a txnouttype as a C string, or nullptr if unknown. */\n-const char* GetTxnOutputType(txnouttype t);\n+std::string GetTxnOutputType(txnouttype t);\n \n /**\n  * Parse a scriptPubKey and identify script type for standard scripts. If"
      },
      {
        "sha": "cb3ae290d107b0a3e912e6f67f96a94781e424f5",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ccaee1d5e2e4b79b0a7c29aadb41b97e4741332/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ccaee1d5e2e4b79b0a7c29aadb41b97e4741332/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=9ccaee1d5e2e4b79b0a7c29aadb41b97e4741332",
        "patch": "@@ -102,7 +102,7 @@ static ScriptErrorDesc script_errors[]={\n     {SCRIPT_ERR_SIG_FINDANDDELETE, \"SIG_FINDANDDELETE\"},\n };\n \n-static const char *FormatScriptError(ScriptError_t err)\n+static std::string FormatScriptError(ScriptError_t err)\n {\n     for (unsigned int i=0; i<ARRAYLEN(script_errors); ++i)\n         if (script_errors[i].err == err)\n@@ -134,7 +134,7 @@ void DoTest(const CScript& scriptPubKey, const CScript& scriptSig, const CScript\n     CMutableTransaction tx = BuildSpendingTransaction(scriptSig, scriptWitness, txCredit);\n     CMutableTransaction tx2 = tx;\n     BOOST_CHECK_MESSAGE(VerifyScript(scriptSig, scriptPubKey, &scriptWitness, flags, MutableTransactionSignatureChecker(&tx, 0, txCredit.vout[0].nValue), &err) == expect, message);\n-    BOOST_CHECK_MESSAGE(err == scriptError, std::string(FormatScriptError(err)) + \" where \" + std::string(FormatScriptError((ScriptError_t)scriptError)) + \" expected: \" + message);\n+    BOOST_CHECK_MESSAGE(err == scriptError, FormatScriptError(err) + \" where \" + FormatScriptError((ScriptError_t)scriptError) + \" expected: \" + message);\n \n     // Verify that removing flags from a passing test or adding flags to a failing test does not change the result.\n     for (int i = 0; i < 16; ++i) {"
      }
    ]
  },
  {
    "sha": "a9d6f398d51c5934b7c69dd15d4f4ffb3a558692",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphOWQ2ZjM5OGQ1MWM1OTM0YjdjNjlkZDE1ZDRmNGZmYjNhNTU4Njky",
    "commit": {
      "author": {
        "name": "codeShark149",
        "email": "rajarshi149@gmail.com",
        "date": "2020-05-27T18:17:19Z"
      },
      "committer": {
        "name": "codeShark149",
        "email": "rajarshi149@gmail.com",
        "date": "2020-05-27T18:40:55Z"
      },
      "message": "RPC: testmempoolaccept returns transaction fee\n\nThis commit returns 'fee' in the testmempoolaccept rpc results.\n'fee' is only returned if the transaction is accepted in mempool.\n\nExisting functional tests are modified to reflect changed behaviour.",
      "tree": {
        "sha": "f1d92176dec4be7e08d5111a5ef1595bf85682b0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f1d92176dec4be7e08d5111a5ef1595bf85682b0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a9d6f398d51c5934b7c69dd15d4f4ffb3a558692",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9d6f398d51c5934b7c69dd15d4f4ffb3a558692",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a9d6f398d51c5934b7c69dd15d4f4ffb3a558692",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9d6f398d51c5934b7c69dd15d4f4ffb3a558692/comments",
    "author": {
      "login": "rajarshimaitra",
      "id": 36541669,
      "node_id": "MDQ6VXNlcjM2NTQxNjY5",
      "avatar_url": "https://avatars.githubusercontent.com/u/36541669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rajarshimaitra",
      "html_url": "https://github.com/rajarshimaitra",
      "followers_url": "https://api.github.com/users/rajarshimaitra/followers",
      "following_url": "https://api.github.com/users/rajarshimaitra/following{/other_user}",
      "gists_url": "https://api.github.com/users/rajarshimaitra/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rajarshimaitra/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rajarshimaitra/subscriptions",
      "organizations_url": "https://api.github.com/users/rajarshimaitra/orgs",
      "repos_url": "https://api.github.com/users/rajarshimaitra/repos",
      "events_url": "https://api.github.com/users/rajarshimaitra/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rajarshimaitra/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rajarshimaitra",
      "id": 36541669,
      "node_id": "MDQ6VXNlcjM2NTQxNjY5",
      "avatar_url": "https://avatars.githubusercontent.com/u/36541669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rajarshimaitra",
      "html_url": "https://github.com/rajarshimaitra",
      "followers_url": "https://api.github.com/users/rajarshimaitra/followers",
      "following_url": "https://api.github.com/users/rajarshimaitra/following{/other_user}",
      "gists_url": "https://api.github.com/users/rajarshimaitra/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rajarshimaitra/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rajarshimaitra/subscriptions",
      "organizations_url": "https://api.github.com/users/rajarshimaitra/orgs",
      "repos_url": "https://api.github.com/users/rajarshimaitra/repos",
      "events_url": "https://api.github.com/users/rajarshimaitra/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rajarshimaitra/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9ccaee1d5e2e4b79b0a7c29aadb41b97e4741332",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ccaee1d5e2e4b79b0a7c29aadb41b97e4741332",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9ccaee1d5e2e4b79b0a7c29aadb41b97e4741332"
      },
      {
        "sha": "86e224b7c4ea295e3adbaeef2ddf4c853643b6f7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86e224b7c4ea295e3adbaeef2ddf4c853643b6f7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/86e224b7c4ea295e3adbaeef2ddf4c853643b6f7"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 27,
      "deletions": 13
    },
    "files": [
      {
        "sha": "519ae9b5732a37cc978e16edc15bdc0ab5825d27",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9d6f398d51c5934b7c69dd15d4f4ffb3a558692/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9d6f398d51c5934b7c69dd15d4f4ffb3a558692/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=a9d6f398d51c5934b7c69dd15d4f4ffb3a558692",
        "patch": "@@ -870,6 +870,7 @@ static UniValue testmempoolaccept(const JSONRPCRequest& request)\n                         {\n                             {RPCResult::Type::STR_HEX, \"txid\", \"The transaction hash in hex\"},\n                             {RPCResult::Type::BOOL, \"allowed\", \"If the mempool allows this tx to be inserted\"},\n+                            {RPCResult::Type::NUM, \"fee\", \"Fee provided in this transaction (only present when 'allowed' is true)\"},\n                             {RPCResult::Type::STR, \"reject-reason\", \"Rejection string (only present when 'allowed' is false)\"},\n                         }},\n                     }\n@@ -916,10 +917,11 @@ static UniValue testmempoolaccept(const JSONRPCRequest& request)\n \n     TxValidationState state;\n     bool test_accept_res;\n+    CAmount fee = 0;\n     {\n         LOCK(cs_main);\n         test_accept_res = AcceptToMemoryPool(mempool, state, std::move(tx),\n-            nullptr /* plTxnReplaced */, false /* bypass_limits */, max_raw_tx_fee, /* test_accept */ true);\n+            nullptr /* plTxnReplaced */, false /* bypass_limits */, max_raw_tx_fee, /* test_accept */ true, &fee);\n     }\n     result_0.pushKV(\"allowed\", test_accept_res);\n     if (!test_accept_res) {\n@@ -933,6 +935,10 @@ static UniValue testmempoolaccept(const JSONRPCRequest& request)\n             result_0.pushKV(\"reject-reason\", state.GetRejectReason());\n         }\n     }\n+    // Push tx fee, only if test_accept_res == true\n+    else {\n+        result_0.pushKV(\"fee\", fee);\n+    }\n \n     result.push_back(std::move(result_0));\n     return result;"
      },
      {
        "sha": "286a0194f37352487a2355b7a31460352794faf5",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 4,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9d6f398d51c5934b7c69dd15d4f4ffb3a558692/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9d6f398d51c5934b7c69dd15d4f4ffb3a558692/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=a9d6f398d51c5934b7c69dd15d4f4ffb3a558692",
        "patch": "@@ -472,6 +472,7 @@ class MemPoolAccept\n          */\n         std::vector<COutPoint>& m_coins_to_uncache;\n         const bool m_test_accept;\n+        CAmount* fee;\n     };\n \n     // Single transaction acceptance\n@@ -683,6 +684,12 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n         return error(\"%s: Consensus::CheckTxInputs: %s, %s\", __func__, tx.GetHash().ToString(), state.ToString());\n     }\n \n+    // If fee_out is passed, return the fee to the caller\n+    if (args.fee != nullptr){\n+        *args.fee = nFees;\n+    }\n+\n+\n     // Check for non-standard pay-to-script-hash in inputs\n     if (fRequireStandard && !AreInputsStandard(tx, m_view))\n         return state.Invalid(TxValidationResult::TX_NOT_STANDARD, \"bad-txns-nonstandard-inputs\");\n@@ -1056,10 +1063,10 @@ bool MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs\n /** (try to) add transaction to memory pool with a specified acceptance time **/\n static bool AcceptToMemoryPoolWithTime(const CChainParams& chainparams, CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n                         int64_t nAcceptTime, std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, const CAmount nAbsurdFee, bool test_accept) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+                        bool bypass_limits, const CAmount nAbsurdFee, bool test_accept, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     std::vector<COutPoint> coins_to_uncache;\n-    MemPoolAccept::ATMPArgs args { chainparams, state, nAcceptTime, plTxnReplaced, bypass_limits, nAbsurdFee, coins_to_uncache, test_accept };\n+    MemPoolAccept::ATMPArgs args { chainparams, state, nAcceptTime, plTxnReplaced, bypass_limits, nAbsurdFee, coins_to_uncache, test_accept, fee_out };\n     bool res = MemPoolAccept(pool).AcceptSingleTransaction(tx, args);\n     if (!res) {\n         // Remove coins that were not present in the coins cache before calling ATMPW;\n@@ -1078,10 +1085,10 @@ static bool AcceptToMemoryPoolWithTime(const CChainParams& chainparams, CTxMemPo\n \n bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n                         std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, const CAmount nAbsurdFee, bool test_accept)\n+                        bool bypass_limits, const CAmount nAbsurdFee, bool test_accept, CAmount* fee_out)\n {\n     const CChainParams& chainparams = Params();\n-    return AcceptToMemoryPoolWithTime(chainparams, pool, state, tx, GetTime(), plTxnReplaced, bypass_limits, nAbsurdFee, test_accept);\n+    return AcceptToMemoryPoolWithTime(chainparams, pool, state, tx, GetTime(), plTxnReplaced, bypass_limits, nAbsurdFee, test_accept, fee_out);\n }\n \n /**"
      },
      {
        "sha": "a3dd3ef525342eb0280c1aff565679d5ee27c976",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9d6f398d51c5934b7c69dd15d4f4ffb3a558692/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9d6f398d51c5934b7c69dd15d4f4ffb3a558692/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=a9d6f398d51c5934b7c69dd15d4f4ffb3a558692",
        "patch": "@@ -188,10 +188,11 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n /** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool **/\n+ * plTxnReplaced will be appended to with all transactions replaced from mempool\n+ * optionally takes an arguement to return tx fee to the caller **/\n bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n                         std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, const CAmount nAbsurdFee, bool test_accept=false) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+                        bool bypass_limits, const CAmount nAbsurdFee, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n /** Get the BIP9 state for a given deployment at the current tip. */\n ThresholdState VersionBitsTipState(const Consensus::Params& params, Consensus::DeploymentPos pos);"
      },
      {
        "sha": "8118dd494fe986ddbc811c335632e7a7aaa62e7b",
        "filename": "test/functional/mempool_accept.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9d6f398d51c5934b7c69dd15d4f4ffb3a558692/test/functional/mempool_accept.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9d6f398d51c5934b7c69dd15d4f4ffb3a558692/test/functional/mempool_accept.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_accept.py?ref=a9d6f398d51c5934b7c69dd15d4f4ffb3a558692",
        "patch": "@@ -91,7 +91,7 @@ def run_test(self):\n         tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_0)))\n         txid_0 = tx.rehash()\n         self.check_mempool_result(\n-            result_expected=[{'txid': txid_0, 'allowed': True}],\n+            result_expected=[{'txid': txid_0, 'allowed': True, 'fee': fee * COIN}],\n             rawtxs=[raw_tx_0],\n         )\n \n@@ -104,7 +104,7 @@ def run_test(self):\n         ))['hex']\n         tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_final)))\n         self.check_mempool_result(\n-            result_expected=[{'txid': tx.rehash(), 'allowed': True}],\n+            result_expected=[{'txid': tx.rehash(), 'allowed': True, 'fee': (int(coin['amount']) - (0.025)) * COIN}],\n             rawtxs=[tx.serialize().hex()],\n             maxfeerate=0,\n         )\n@@ -127,7 +127,7 @@ def run_test(self):\n         tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_0)))\n         txid_0 = tx.rehash()\n         self.check_mempool_result(\n-            result_expected=[{'txid': txid_0, 'allowed': True}],\n+            result_expected=[{'txid': txid_0, 'allowed': True, 'fee': (2 * fee * COIN)}],\n             rawtxs=[raw_tx_0],\n         )\n \n@@ -187,7 +187,7 @@ def run_test(self):\n         tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_reference)))\n         # Reference tx should be valid on itself\n         self.check_mempool_result(\n-            result_expected=[{'txid': tx.rehash(), 'allowed': True}],\n+            result_expected=[{'txid': tx.rehash(), 'allowed': True, 'fee': (0.1 - 0.05) * COIN}],\n             rawtxs=[tx.serialize().hex()],\n             maxfeerate=0,\n         )"
      },
      {
        "sha": "ee264482ead99980d8f27ff921a83518ddd3d736",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9d6f398d51c5934b7c69dd15d4f4ffb3a558692/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9d6f398d51c5934b7c69dd15d4f4ffb3a558692/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=a9d6f398d51c5934b7c69dd15d4f4ffb3a558692",
        "patch": "@@ -664,13 +664,13 @@ def test_standardness_v0(self):\n         if not self.segwit_active:\n             # Just check mempool acceptance, but don't add the transaction to the mempool, since witness is disallowed\n             # in blocks and the tx is impossible to mine right now.\n-            assert_equal(self.nodes[0].testmempoolaccept([tx3.serialize_with_witness().hex()]), [{'txid': tx3.hash, 'allowed': True}])\n+            assert_equal(self.nodes[0].testmempoolaccept([tx3.serialize_with_witness().hex()]), [{'txid': tx3.hash, 'allowed': True, 'fee': 1000}])\n             # Create the same output as tx3, but by replacing tx\n             tx3_out = tx3.vout[0]\n             tx3 = tx\n             tx3.vout = [tx3_out]\n             tx3.rehash()\n-            assert_equal(self.nodes[0].testmempoolaccept([tx3.serialize_with_witness().hex()]), [{'txid': tx3.hash, 'allowed': True}])\n+            assert_equal(self.nodes[0].testmempoolaccept([tx3.serialize_with_witness().hex()]), [{'txid': tx3.hash, 'allowed': True, 'fee': 11000}])\n         test_transaction_acceptance(self.nodes[0], self.test_node, tx3, with_witness=True, accepted=True)\n \n         self.nodes[0].generate(1)"
      }
    ]
  }
]