[
  {
    "sha": "7384a3584929c3650a191d34d09f54e7ec828597",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3Mzg0YTM1ODQ5MjljMzY1MGExOTFkMzRkMDlmNTRlN2VjODI4NTk3",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-05-09T19:42:41Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-05-09T19:42:41Z"
      },
      "message": "[tests] Remove spurious error log in p2p_segwit.py\n\nSince 265d7c44b1aae06aee93f745a865807732218a73, when wait_until() fails,\nan error message is logged to the test framework log. This means that if\nwait_until() is called inside a try-except with the expectation that it\nwill fail, a spurious error message is logged.\n\nwait_until() shouldn't be called with the expectation of failure. Fix\nthat in p2p_segwit.py.",
      "tree": {
        "sha": "49a4a469d0cadd06ba5ae132019ba652c16b6b9f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/49a4a469d0cadd06ba5ae132019ba652c16b6b9f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7384a3584929c3650a191d34d09f54e7ec828597",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7384a3584929c3650a191d34d09f54e7ec828597",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7384a3584929c3650a191d34d09f54e7ec828597",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7384a3584929c3650a191d34d09f54e7ec828597/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fc642cbdad6e5bef42dddfbb0b76e662a6a5de6c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc642cbdad6e5bef42dddfbb0b76e662a6a5de6c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fc642cbdad6e5bef42dddfbb0b76e662a6a5de6c"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 7,
      "deletions": 8
    },
    "files": [
      {
        "sha": "9982b0e7e53131d3be4b0687ee682e722a4a1024",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 7,
        "deletions": 8,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7384a3584929c3650a191d34d09f54e7ec828597/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7384a3584929c3650a191d34d09f54e7ec828597/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=7384a3584929c3650a191d34d09f54e7ec828597",
        "patch": "@@ -73,11 +73,15 @@ def on_getdata(self, message):\n         for inv in message.inv:\n             self.getdataset.add(inv.hash)\n \n-    def announce_tx_and_wait_for_getdata(self, tx, timeout=60):\n+    def announce_tx_and_wait_for_getdata(self, tx, timeout=60, success=True):\n         with mininode_lock:\n             self.last_message.pop(\"getdata\", None)\n         self.send_message(msg_inv(inv=[CInv(1, tx.sha256)]))\n-        self.wait_for_getdata(timeout)\n+        if success:\n+            self.wait_for_getdata(timeout)\n+        else:\n+            time.sleep(timeout)\n+            assert not self.last_message.get(\"getdata\")\n \n     def announce_block_and_wait_for_getdata(self, block, use_header, timeout=60):\n         with mininode_lock:\n@@ -908,12 +912,7 @@ def test_witness_tx_relay_before_segwit_activation(self):\n \n         # Since we haven't delivered the tx yet, inv'ing the same tx from\n         # a witness transaction ought not result in a getdata.\n-        try:\n-            self.test_node.announce_tx_and_wait_for_getdata(tx, timeout=2)\n-            self.log.error(\"Error: duplicate tx getdata!\")\n-            assert(False)\n-        except AssertionError:\n-            pass\n+        self.test_node.announce_tx_and_wait_for_getdata(tx, timeout=2, success=False)\n \n         # Delivering this transaction with witness should fail (no matter who\n         # its from)"
      }
    ]
  }
]