[
  {
    "sha": "59eae4a0064ae2ffd4b560edd9689c94380bc053",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1OWVhZTRhMDA2NGFlMmZmZDRiNTYwZWRkOTY4OWM5NDM4MGJjMDUz",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2019-01-25T17:37:42Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2019-01-25T20:03:15Z"
      },
      "message": "Flush without erasing cache during periodic and pruning flushes",
      "tree": {
        "sha": "c74583c086220ac529bf979dcf9cd4b36b597160",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c74583c086220ac529bf979dcf9cd4b36b597160"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/59eae4a0064ae2ffd4b560edd9689c94380bc053",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/59eae4a0064ae2ffd4b560edd9689c94380bc053",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/59eae4a0064ae2ffd4b560edd9689c94380bc053",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/59eae4a0064ae2ffd4b560edd9689c94380bc053/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ab46fe6ec1b37e88c5a06ee7a06ab31cbd18304f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab46fe6ec1b37e88c5a06ee7a06ab31cbd18304f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ab46fe6ec1b37e88c5a06ee7a06ab31cbd18304f"
      }
    ],
    "stats": {
      "total": 52,
      "additions": 35,
      "deletions": 17
    },
    "files": [
      {
        "sha": "8f989f25680738892b61b55e9f98d55b515281dd",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 7,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/59eae4a0064ae2ffd4b560edd9689c94380bc053/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/59eae4a0064ae2ffd4b560edd9689c94380bc053/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=59eae4a0064ae2ffd4b560edd9689c94380bc053",
        "patch": "@@ -11,7 +11,7 @@\n bool CCoinsView::GetCoin(const COutPoint &outpoint, Coin &coin) const { return false; }\n uint256 CCoinsView::GetBestBlock() const { return uint256(); }\n std::vector<uint256> CCoinsView::GetHeadBlocks() const { return std::vector<uint256>(); }\n-bool CCoinsView::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) { return false; }\n+bool CCoinsView::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock, bool erase_from_map) { return false; }\n CCoinsViewCursor *CCoinsView::Cursor() const { return nullptr; }\n \n bool CCoinsView::HaveCoin(const COutPoint &outpoint) const\n@@ -26,7 +26,7 @@ bool CCoinsViewBacked::HaveCoin(const COutPoint &outpoint) const { return base->\n uint256 CCoinsViewBacked::GetBestBlock() const { return base->GetBestBlock(); }\n std::vector<uint256> CCoinsViewBacked::GetHeadBlocks() const { return base->GetHeadBlocks(); }\n void CCoinsViewBacked::SetBackend(CCoinsView &viewIn) { base = &viewIn; }\n-bool CCoinsViewBacked::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) { return base->BatchWrite(mapCoins, hashBlock); }\n+bool CCoinsViewBacked::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock, bool erase_from_map) { return base->BatchWrite(mapCoins, hashBlock, erase_from_map); }\n CCoinsViewCursor *CCoinsViewBacked::Cursor() const { return base->Cursor(); }\n size_t CCoinsViewBacked::EstimateSize() const { return base->EstimateSize(); }\n \n@@ -143,7 +143,8 @@ void CCoinsViewCache::SetBestBlock(const uint256 &hashBlockIn) {\n     hashBlock = hashBlockIn;\n }\n \n-bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn) {\n+bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn, bool erase_from_map) {\n+    assert(erase_from_map); // We do not implement writes to a cache where we don't erase from the child!\n     for (CCoinsMap::iterator it = mapCoins.begin(); it != mapCoins.end(); it = mapCoins.erase(it)) {\n         // Ignore non-dirty entries (optimization).\n         if (!(it->second.flags & CCoinsCacheEntry::DIRTY)) {\n@@ -201,10 +202,24 @@ bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn\n     return true;\n }\n \n-bool CCoinsViewCache::Flush() {\n-    bool fOk = base->BatchWrite(cacheCoins, hashBlock);\n-    cacheCoins.clear();\n-    cachedCoinsUsage = 0;\n+bool CCoinsViewCache::Flush(bool clear_cache /*= true*/) {\n+    bool fOk = base->BatchWrite(cacheCoins, hashBlock, clear_cache);\n+    if (clear_cache) {\n+        cacheCoins.clear();\n+        cachedCoinsUsage = 0;\n+    } else {\n+        // Instead of clearing the cache, just clear the FRESH/DIRTY\n+        // flags, and erase any spent coins\n+        for (auto it = cacheCoins.begin(); it != cacheCoins.end(); ) {\n+            it->second.flags = 0;\n+            if (it->second.coin.IsSpent()) {\n+                cachedCoinsUsage -= it->second.coin.DynamicMemoryUsage();\n+                it = cacheCoins.erase(it);\n+            } else {\n+                ++it;\n+            }\n+        }\n+    }\n     return fOk;\n }\n "
      },
      {
        "sha": "f6670994bbc1d90964e85cc1ef64c82635d64da1",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/59eae4a0064ae2ffd4b560edd9689c94380bc053/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/59eae4a0064ae2ffd4b560edd9689c94380bc053/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=59eae4a0064ae2ffd4b560edd9689c94380bc053",
        "patch": "@@ -165,7 +165,7 @@ class CCoinsView\n \n     //! Do a bulk modification (multiple Coin changes + BestBlock change).\n     //! The passed mapCoins can be modified.\n-    virtual bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock);\n+    virtual bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock, bool erase_from_map);\n \n     //! Get a cursor to iterate over the whole state\n     virtual CCoinsViewCursor *Cursor() const;\n@@ -191,7 +191,7 @@ class CCoinsViewBacked : public CCoinsView\n     uint256 GetBestBlock() const override;\n     std::vector<uint256> GetHeadBlocks() const override;\n     void SetBackend(CCoinsView &viewIn);\n-    bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) override;\n+    bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock, bool erase_from_map) override;\n     CCoinsViewCursor *Cursor() const override;\n     size_t EstimateSize() const override;\n };\n@@ -224,7 +224,7 @@ class CCoinsViewCache : public CCoinsViewBacked\n     bool HaveCoin(const COutPoint &outpoint) const override;\n     uint256 GetBestBlock() const override;\n     void SetBestBlock(const uint256 &hashBlock);\n-    bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) override;\n+    bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock, bool erase_from_map) override;\n     CCoinsViewCursor* Cursor() const override {\n         throw std::logic_error(\"CCoinsViewCache cursor iteration not supported.\");\n     }\n@@ -265,8 +265,9 @@ class CCoinsViewCache : public CCoinsViewBacked\n      * Push the modifications applied to this cache to its base.\n      * Failure to call this method before destruction will cause the changes to be forgotten.\n      * If false is returned, the state of this cache (and its backing view) will be undefined.\n+     * Set clear_cache to False to preserve the contents of the cache (excluding spent coins).\n      */\n-    bool Flush();\n+    bool Flush(bool clear_cache=true);\n \n     /**\n      * Removes the UTXO with the given outpoint from the cache, if it is"
      },
      {
        "sha": "3ea271dd7798a6e66cf7630fd5e9ec7d34738cba",
        "filename": "src/test/coins_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/59eae4a0064ae2ffd4b560edd9689c94380bc053/src/test/coins_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/59eae4a0064ae2ffd4b560edd9689c94380bc053/src/test/coins_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/coins_tests.cpp?ref=59eae4a0064ae2ffd4b560edd9689c94380bc053",
        "patch": "@@ -53,7 +53,7 @@ class CCoinsViewTest : public CCoinsView\n \n     uint256 GetBestBlock() const override { return hashBestBlock_; }\n \n-    bool BatchWrite(CCoinsMap& mapCoins, const uint256& hashBlock) override\n+    bool BatchWrite(CCoinsMap& mapCoins, const uint256& hashBlock, bool erase_from_map) override\n     {\n         for (CCoinsMap::iterator it = mapCoins.begin(); it != mapCoins.end(); ) {\n             if (it->second.flags & CCoinsCacheEntry::DIRTY) {\n@@ -589,7 +589,7 @@ void WriteCoinsViewEntry(CCoinsView& view, CAmount value, char flags)\n {\n     CCoinsMap map;\n     InsertCoinsMapEntry(map, value, flags);\n-    BOOST_CHECK(view.BatchWrite(map, {}));\n+    BOOST_CHECK(view.BatchWrite(map, {}, true));\n }\n \n class SingleEntryCacheTest"
      },
      {
        "sha": "33a2faa800aa0beca94017afcf5416a02f519f83",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/59eae4a0064ae2ffd4b560edd9689c94380bc053/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/59eae4a0064ae2ffd4b560edd9689c94380bc053/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=59eae4a0064ae2ffd4b560edd9689c94380bc053",
        "patch": "@@ -80,7 +80,7 @@ std::vector<uint256> CCoinsViewDB::GetHeadBlocks() const {\n     return vhashHeadBlocks;\n }\n \n-bool CCoinsViewDB::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) {\n+bool CCoinsViewDB::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock, bool erase_from_map) {\n     CDBBatch batch(db);\n     size_t count = 0;\n     size_t changed = 0;\n@@ -116,7 +116,7 @@ bool CCoinsViewDB::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) {\n         }\n         count++;\n         CCoinsMap::iterator itOld = it++;\n-        mapCoins.erase(itOld);\n+        if (erase_from_map) mapCoins.erase(itOld);\n         if (batch.SizeEstimate() > batch_size) {\n             LogPrint(BCLog::COINDB, \"Writing partial batch of %.2f MiB\\n\", batch.SizeEstimate() * (1.0 / 1048576.0));\n             db.WriteBatch(batch);"
      },
      {
        "sha": "385d476c15aebadb77481de697939ea72bb03023",
        "filename": "src/txdb.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/59eae4a0064ae2ffd4b560edd9689c94380bc053/src/txdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/59eae4a0064ae2ffd4b560edd9689c94380bc053/src/txdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.h?ref=59eae4a0064ae2ffd4b560edd9689c94380bc053",
        "patch": "@@ -52,7 +52,7 @@ class CCoinsViewDB final : public CCoinsView\n     bool HaveCoin(const COutPoint &outpoint) const override;\n     uint256 GetBestBlock() const override;\n     std::vector<uint256> GetHeadBlocks() const override;\n-    bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) override;\n+    bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock, bool erase_from_map) override;\n     CCoinsViewCursor *Cursor() const override;\n \n     //! Attempt to update from an older database format. Returns whether an error occurred."
      },
      {
        "sha": "676c4cb19b3bf50e61c59295f6198fc2fe16582b",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/59eae4a0064ae2ffd4b560edd9689c94380bc053/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/59eae4a0064ae2ffd4b560edd9689c94380bc053/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=59eae4a0064ae2ffd4b560edd9689c94380bc053",
        "patch": "@@ -2140,6 +2140,8 @@ bool static FlushStateToDisk(const CChainParams& chainparams, CValidationState &\n         bool fPeriodicFlush = mode == FlushStateMode::PERIODIC && nNow > nLastFlush + (int64_t)DATABASE_FLUSH_INTERVAL * 1000000;\n         // Combine all conditions that result in a full cache flush.\n         fDoFullFlush = (mode == FlushStateMode::ALWAYS) || fCacheLarge || fCacheCritical || fPeriodicFlush || fFlushForPrune;\n+        // Don't wipe the cache (just sync to disk) if we're not close to the limit\n+        bool clear_cache = fCacheLarge || fCacheCritical;\n         // Write blocks and block index to disk.\n         if (fDoFullFlush || fPeriodicWrite) {\n             // Depend on nMinDiskSpace to ensure we can write block index\n@@ -2180,7 +2182,7 @@ bool static FlushStateToDisk(const CChainParams& chainparams, CValidationState &\n             if (!CheckDiskSpace(48 * 2 * 2 * pcoinsTip->GetCacheSize()))\n                 return state.Error(\"out of disk space\");\n             // Flush the chainstate (which may refer to block index entries).\n-            if (!pcoinsTip->Flush())\n+            if (!pcoinsTip->Flush(clear_cache))\n                 return AbortNode(state, \"Failed to write to coin database\");\n             nLastFlush = nNow;\n             full_flush_completed = true;"
      }
    ]
  }
]