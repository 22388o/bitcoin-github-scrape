[
  {
    "sha": "f28aec014edd29cfc669cf1c3f795c0f1e2ae7e2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMjhhZWMwMTRlZGQyOWNmYzY2OWNmMWMzZjc5NWMwZjFlMmFlN2Uy",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-09-03T07:01:24Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-09-23T20:29:12Z"
      },
      "message": "Use ModifyCoins instead of mutable GetCoins.\n\nReplace the mutable non-copying GetCoins method with a ModifyCoins, which\nreturns an encapsulated iterator, so we can keep track of concurrent\nmodifications (as iterators can be invalidated by those) and run cleanup\ncode after a modification is finished.\n\nThis also removes the overloading of the 'GetCoins' name.",
      "tree": {
        "sha": "92c7e9e24f52b4294249b7eeee6e6e3525d1618a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/92c7e9e24f52b4294249b7eeee6e6e3525d1618a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f28aec014edd29cfc669cf1c3f795c0f1e2ae7e2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f28aec014edd29cfc669cf1c3f795c0f1e2ae7e2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f28aec014edd29cfc669cf1c3f795c0f1e2ae7e2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f28aec014edd29cfc669cf1c3f795c0f1e2ae7e2/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7a04f3d708faab4af1f1a6aeddc5a6a4db3849a5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a04f3d708faab4af1f1a6aeddc5a6a4db3849a5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7a04f3d708faab4af1f1a6aeddc5a6a4db3849a5"
      }
    ],
    "stats": {
      "total": 170,
      "additions": 108,
      "deletions": 62
    },
    "files": [
      {
        "sha": "4d6dbc1dfcf205169d8e8080855717a75d1840bd",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 10,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f28aec014edd29cfc669cf1c3f795c0f1e2ae7e2/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f28aec014edd29cfc669cf1c3f795c0f1e2ae7e2/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=f28aec014edd29cfc669cf1c3f795c0f1e2ae7e2",
        "patch": "@@ -384,21 +384,19 @@ static void MutateTxSign(CMutableTransaction& tx, const string& flagStr)\n             vector<unsigned char> pkData(ParseHexUV(prevOut, \"scriptPubKey\"));\n             CScript scriptPubKey(pkData.begin(), pkData.end());\n \n-            CCoins coins;\n-            if (view.GetCoins(txid, coins)) {\n-                if (coins.IsAvailable(nOut) && coins.vout[nOut].scriptPubKey != scriptPubKey) {\n+            {\n+                CCoinsModifier coins = view.ModifyCoins(txid);\n+                if (coins->IsAvailable(nOut) && coins->vout[nOut].scriptPubKey != scriptPubKey) {\n                     string err(\"Previous output scriptPubKey mismatch:\\n\");\n-                    err = err + coins.vout[nOut].scriptPubKey.ToString() + \"\\nvs:\\n\"+\n+                    err = err + coins->vout[nOut].scriptPubKey.ToString() + \"\\nvs:\\n\"+\n                         scriptPubKey.ToString();\n                     throw runtime_error(err);\n                 }\n-                // what todo if txid is known, but the actual output isn't?\n+                if ((unsigned int)nOut >= coins->vout.size())\n+                    coins->vout.resize(nOut+1);\n+                coins->vout[nOut].scriptPubKey = scriptPubKey;\n+                coins->vout[nOut].nValue = 0; // we don't know the actual output value\n             }\n-            if ((unsigned int)nOut >= coins.vout.size())\n-                coins.vout.resize(nOut+1);\n-            coins.vout[nOut].scriptPubKey = scriptPubKey;\n-            coins.vout[nOut].nValue = 0; // we don't know the actual output value\n-            view.SetCoins(txid, coins);\n \n             // if redeemScript given and private keys given,\n             // add redeemScript to the tempKeystore so it can be signed:"
      },
      {
        "sha": "2b93c74c3a34e23c40ad055959bfbd527951ff30",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 11,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f28aec014edd29cfc669cf1c3f795c0f1e2ae7e2/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f28aec014edd29cfc669cf1c3f795c0f1e2ae7e2/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=f28aec014edd29cfc669cf1c3f795c0f1e2ae7e2",
        "patch": "@@ -73,7 +73,7 @@ bool CCoinsViewBacked::GetStats(CCoinsStats &stats) const { return base->GetStat\n \n CCoinsKeyHasher::CCoinsKeyHasher() : salt(GetRandHash()) {}\n \n-CCoinsViewCache::CCoinsViewCache(CCoinsView &baseIn, bool fDummy) : CCoinsViewBacked(baseIn), hashBlock(0) { }\n+CCoinsViewCache::CCoinsViewCache(CCoinsView &baseIn, bool fDummy) : CCoinsViewBacked(baseIn), hasModifier(false), hashBlock(0) { }\n \n bool CCoinsViewCache::GetCoins(const uint256 &txid, CCoins &coins) const {\n     if (cacheCoins.count(txid)) {\n@@ -87,7 +87,12 @@ bool CCoinsViewCache::GetCoins(const uint256 &txid, CCoins &coins) const {\n     return false;\n }\n \n-CCoinsMap::iterator CCoinsViewCache::FetchCoins(const uint256 &txid) {\n+CCoinsViewCache::~CCoinsViewCache()\n+{\n+    assert(!hasModifier);\n+}\n+\n+CCoinsMap::const_iterator CCoinsViewCache::FetchCoins(const uint256 &txid) const {\n     CCoinsMap::iterator it = cacheCoins.find(txid);\n     if (it != cacheCoins.end())\n         return it;\n@@ -99,15 +104,15 @@ CCoinsMap::iterator CCoinsViewCache::FetchCoins(const uint256 &txid) {\n     return ret;\n }\n \n-CCoinsMap::const_iterator CCoinsViewCache::FetchCoins(const uint256 &txid) const {\n-    /* Avoid redundant implementation with the const-cast.  */\n-    return const_cast<CCoinsViewCache*>(this)->FetchCoins(txid);\n-}\n-\n-CCoins &CCoinsViewCache::GetCoins(const uint256 &txid) {\n-    CCoinsMap::iterator it = FetchCoins(txid);\n-    assert(it != cacheCoins.end());\n-    return it->second;\n+CCoinsModifier CCoinsViewCache::ModifyCoins(const uint256 &txid) {\n+    assert(!hasModifier);\n+    hasModifier = true;\n+    std::pair<CCoinsMap::iterator, bool> ret = cacheCoins.insert(std::make_pair(txid, CCoins()));\n+    if (ret.second) {\n+        if (!base->GetCoins(txid, ret.first->second))\n+            ret.first->second.Clear();\n+    }\n+    return CCoinsModifier(*this, ret.first);\n }\n \n const CCoins* CCoinsViewCache::AccessCoins(const uint256 &txid) const {\n@@ -145,6 +150,7 @@ bool CCoinsViewCache::SetBestBlock(const uint256 &hashBlockIn) {\n }\n \n bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn) {\n+    assert(!hasModifier);\n     for (CCoinsMap::iterator it = mapCoins.begin(); it != mapCoins.end();) {\n         cacheCoins[it->first].swap(it->second);\n         CCoinsMap::iterator itOld = it++;\n@@ -213,3 +219,11 @@ double CCoinsViewCache::GetPriority(const CTransaction &tx, int nHeight) const\n     }\n     return tx.ComputePriority(dResult);\n }\n+\n+CCoinsModifier::CCoinsModifier(CCoinsViewCache& cache_, CCoinsMap::iterator it_) : cache(cache_), it(it_) {}\n+\n+CCoinsModifier::~CCoinsModifier() {\n+    assert(cache.hasModifier);\n+    cache.hasModifier = false;\n+    it->second.Cleanup();\n+}"
      },
      {
        "sha": "62beea3c23c21e97333312191dbd8e2ba84854cb",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 45,
        "deletions": 4,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f28aec014edd29cfc669cf1c3f795c0f1e2ae7e2/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f28aec014edd29cfc669cf1c3f795c0f1e2ae7e2/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=f28aec014edd29cfc669cf1c3f795c0f1e2ae7e2",
        "patch": "@@ -83,11 +83,26 @@ class CCoins\n     // as new tx version will probably only be introduced at certain heights\n     int nVersion;\n \n-    // construct a CCoins from a CTransaction, at a given height\n-    CCoins(const CTransaction &tx, int nHeightIn) : fCoinBase(tx.IsCoinBase()), vout(tx.vout), nHeight(nHeightIn), nVersion(tx.nVersion) {\n+    void FromTx(const CTransaction &tx, int nHeightIn) {\n+        fCoinBase = tx.IsCoinBase();\n+        vout = tx.vout;\n+        nHeight = nHeightIn;\n+        nVersion = tx.nVersion;\n         ClearUnspendable();\n     }\n \n+    // construct a CCoins from a CTransaction, at a given height\n+    CCoins(const CTransaction &tx, int nHeightIn) {\n+        FromTx(tx, nHeightIn);\n+    }\n+\n+    void Clear() {\n+        fCoinBase = false;\n+        std::vector<CTxOut>().swap(vout);\n+        nHeight = 0;\n+        nVersion = 0;\n+    }\n+\n     // empty constructor\n     CCoins() : fCoinBase(false), vout(0), nHeight(0), nVersion(0) { }\n \n@@ -323,10 +338,31 @@ class CCoinsViewBacked : public CCoinsView\n };\n \n \n+class CCoinsViewCache;\n+\n+/** A reference to a mutable cache entry. Encapsulating it allows us to run\n+ *  cleanup code after the modification is finished, and keeping track of\n+ *  concurrent modifications. */\n+class CCoinsModifier\n+{\n+private:\n+    CCoinsViewCache& cache;\n+    CCoinsMap::iterator it;\n+    CCoinsModifier(CCoinsViewCache& cache_, CCoinsMap::iterator it_);\n+\n+public:\n+    CCoins* operator->() { return &it->second; }\n+    CCoins& operator*() { return it->second; }\n+    ~CCoinsModifier();\n+    friend class CCoinsViewCache;\n+};\n+\n /** CCoinsView that adds a memory cache for transactions to another CCoinsView */\n class CCoinsViewCache : public CCoinsViewBacked\n {\n protected:\n+    /* Whether this cache has an active modifier. */\n+    bool hasModifier;\n \n     /* Make mutable so that we can \"fill the cache\" even from Get-methods\n        declared as \"const\".  */\n@@ -335,6 +371,7 @@ class CCoinsViewCache : public CCoinsViewBacked\n \n public:\n     CCoinsViewCache(CCoinsView &baseIn, bool fDummy = false);\n+    ~CCoinsViewCache();\n \n     // Standard CCoinsView methods\n     bool GetCoins(const uint256 &txid, CCoins &coins) const;\n@@ -349,8 +386,10 @@ class CCoinsViewCache : public CCoinsViewBacked\n     // allowed while accessing the returned pointer.\n     const CCoins* AccessCoins(const uint256 &txid) const;\n \n-    // Return a modifiable reference to a CCoins. Check HaveCoins first.\n-    CCoins &GetCoins(const uint256 &txid);\n+    // Return a modifiable reference to a CCoins. If no entry with the given\n+    // txid exists, a new one is created. Simultaneous modifications are not\n+    // allowed.\n+    CCoinsModifier ModifyCoins(const uint256 &txid);\n \n     // Push the modifications applied to this cache to its base.\n     // Failure to call this method before destruction will cause the changes to be forgotten.\n@@ -377,6 +416,8 @@ class CCoinsViewCache : public CCoinsViewBacked\n \n     const CTxOut &GetOutputFor(const CTxIn& input) const;\n \n+    friend class CCoinsModifier;\n+\n private:\n     CCoinsMap::iterator FetchCoins(const uint256 &txid);\n     CCoinsMap::const_iterator FetchCoins(const uint256 &txid) const;"
      },
      {
        "sha": "5aed3a2528cbf9ceda23951de7068da85289d296",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 27,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f28aec014edd29cfc669cf1c3f795c0f1e2ae7e2/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f28aec014edd29cfc669cf1c3f795c0f1e2ae7e2/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=f28aec014edd29cfc669cf1c3f795c0f1e2ae7e2",
        "patch": "@@ -1348,22 +1348,18 @@ void static InvalidBlockFound(CBlockIndex *pindex, const CValidationState &state\n \n void UpdateCoins(const CTransaction& tx, CValidationState &state, CCoinsViewCache &inputs, CTxUndo &txundo, int nHeight)\n {\n-    bool ret;\n     // mark inputs spent\n     if (!tx.IsCoinBase()) {\n         txundo.vprevout.reserve(tx.vin.size());\n-        for (unsigned int i = 0; i < tx.vin.size(); i++) {\n-            const CTxIn &txin = tx.vin[i];\n-            CCoins &coins = inputs.GetCoins(txin.prevout.hash);\n+        BOOST_FOREACH(const CTxIn &txin, tx.vin) {\n             txundo.vprevout.push_back(CTxInUndo());\n-            ret = coins.Spend(txin.prevout, txundo.vprevout.back());\n+            bool ret = inputs.ModifyCoins(txin.prevout.hash)->Spend(txin.prevout, txundo.vprevout.back());\n             assert(ret);\n         }\n     }\n \n     // add outputs\n-    ret = inputs.SetCoins(tx.GetHash(), CCoins(tx, nHeight));\n-    assert(ret);\n+    inputs.ModifyCoins(tx.GetHash())->FromTx(tx, nHeight);\n }\n \n bool CScriptCheck::operator()() const {\n@@ -1504,21 +1500,23 @@ bool DisconnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex\n         // exactly. Note that transactions with only provably unspendable outputs won't\n         // have outputs available even in the block itself, so we handle that case\n         // specially with outsEmpty.\n+        {\n         CCoins outsEmpty;\n-        CCoins &outs = view.HaveCoins(hash) ? view.GetCoins(hash) : outsEmpty;\n-        outs.ClearUnspendable();\n+        CCoinsModifier outs = view.ModifyCoins(hash);\n+        outs->ClearUnspendable();\n \n-        CCoins outsBlock = CCoins(tx, pindex->nHeight);\n+        CCoins outsBlock(tx, pindex->nHeight);\n         // The CCoins serialization does not serialize negative numbers.\n         // No network rules currently depend on the version here, so an inconsistency is harmless\n         // but it must be corrected before txout nversion ever influences a network rule.\n         if (outsBlock.nVersion < 0)\n-            outs.nVersion = outsBlock.nVersion;\n-        if (outs != outsBlock)\n+            outs->nVersion = outsBlock.nVersion;\n+        if (*outs != outsBlock)\n             fClean = fClean && error(\"DisconnectBlock() : added transaction mismatch? database corrupted\");\n \n         // remove outputs\n-        outs = CCoins();\n+        outs->Clear();\n+        }\n \n         // restore inputs\n         if (i > 0) { // not coinbases\n@@ -1528,27 +1526,24 @@ bool DisconnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex\n             for (unsigned int j = tx.vin.size(); j-- > 0;) {\n                 const COutPoint &out = tx.vin[j].prevout;\n                 const CTxInUndo &undo = txundo.vprevout[j];\n-                CCoins coins;\n-                view.GetCoins(out.hash, coins); // this can fail if the prevout was already entirely spent\n+                CCoinsModifier coins = view.ModifyCoins(out.hash);\n                 if (undo.nHeight != 0) {\n                     // undo data contains height: this is the last output of the prevout tx being spent\n-                    if (!coins.IsPruned())\n+                    if (!coins->IsPruned())\n                         fClean = fClean && error(\"DisconnectBlock() : undo data overwriting existing transaction\");\n-                    coins = CCoins();\n-                    coins.fCoinBase = undo.fCoinBase;\n-                    coins.nHeight = undo.nHeight;\n-                    coins.nVersion = undo.nVersion;\n+                    coins->Clear();\n+                    coins->fCoinBase = undo.fCoinBase;\n+                    coins->nHeight = undo.nHeight;\n+                    coins->nVersion = undo.nVersion;\n                 } else {\n-                    if (coins.IsPruned())\n+                    if (coins->IsPruned())\n                         fClean = fClean && error(\"DisconnectBlock() : undo data adding output to missing transaction\");\n                 }\n-                if (coins.IsAvailable(out.n))\n+                if (coins->IsAvailable(out.n))\n                     fClean = fClean && error(\"DisconnectBlock() : undo data overwriting existing output\");\n-                if (coins.vout.size() < out.n+1)\n-                    coins.vout.resize(out.n+1);\n-                coins.vout[out.n] = undo.txout;\n-                if (!view.SetCoins(out.hash, coins))\n-                    return error(\"DisconnectBlock() : cannot restore coin inputs\");\n+                if (coins->vout.size() < out.n+1)\n+                    coins->vout.resize(out.n+1);\n+                coins->vout[out.n] = undo.txout;\n             }\n         }\n     }"
      },
      {
        "sha": "da2421f38e281b581fd7b26d5c7b6f8ae0cc4742",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 10,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f28aec014edd29cfc669cf1c3f795c0f1e2ae7e2/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f28aec014edd29cfc669cf1c3f795c0f1e2ae7e2/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=f28aec014edd29cfc669cf1c3f795c0f1e2ae7e2",
        "patch": "@@ -612,21 +612,19 @@ Value signrawtransaction(const Array& params, bool fHelp)\n             vector<unsigned char> pkData(ParseHexO(prevOut, \"scriptPubKey\"));\n             CScript scriptPubKey(pkData.begin(), pkData.end());\n \n-            CCoins coins;\n-            if (view.GetCoins(txid, coins)) {\n-                if (coins.IsAvailable(nOut) && coins.vout[nOut].scriptPubKey != scriptPubKey) {\n+            {\n+                CCoinsModifier coins = view.ModifyCoins(txid);\n+                if (coins->IsAvailable(nOut) && coins->vout[nOut].scriptPubKey != scriptPubKey) {\n                     string err(\"Previous output scriptPubKey mismatch:\\n\");\n-                    err = err + coins.vout[nOut].scriptPubKey.ToString() + \"\\nvs:\\n\"+\n+                    err = err + coins->vout[nOut].scriptPubKey.ToString() + \"\\nvs:\\n\"+\n                         scriptPubKey.ToString();\n                     throw JSONRPCError(RPC_DESERIALIZATION_ERROR, err);\n                 }\n-                // what todo if txid is known, but the actual output isn't?\n+                if ((unsigned int)nOut >= coins->vout.size())\n+                    coins->vout.resize(nOut+1);\n+                coins->vout[nOut].scriptPubKey = scriptPubKey;\n+                coins->vout[nOut].nValue = 0; // we don't know the actual output value\n             }\n-            if ((unsigned int)nOut >= coins.vout.size())\n-                coins.vout.resize(nOut+1);\n-            coins.vout[nOut].scriptPubKey = scriptPubKey;\n-            coins.vout[nOut].nValue = 0; // we don't know the actual output value\n-            view.SetCoins(txid, coins);\n \n             // if redeemScript given and not using the local wallet (private keys\n             // given), add redeemScript to the tempKeystore so it can be signed:"
      }
    ]
  },
  {
    "sha": "c9d1a81ce76737a73c9706e074a4fe8440c8277e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjOWQxYTgxY2U3NjczN2E3M2M5NzA2ZTA3NGE0ZmU4NDQwYzgyNzdl",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-09-03T07:25:32Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-09-23T20:29:21Z"
      },
      "message": "Get rid of CCoinsView's SetCoins and SetBestBlock.\n\nAll direct modifications are now done through ModifyCoins, and BatchWrite is\nused for pushing batches of queued modifications up, so we don't need the\nlow-level SetCoins and SetBestBlock anymore in the top-level CCoinsView class.",
      "tree": {
        "sha": "e0632f5b7e27ff788ecfef97e0bfd7d31ef12b21",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e0632f5b7e27ff788ecfef97e0bfd7d31ef12b21"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c9d1a81ce76737a73c9706e074a4fe8440c8277e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c9d1a81ce76737a73c9706e074a4fe8440c8277e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c9d1a81ce76737a73c9706e074a4fe8440c8277e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c9d1a81ce76737a73c9706e074a4fe8440c8277e/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f28aec014edd29cfc669cf1c3f795c0f1e2ae7e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f28aec014edd29cfc669cf1c3f795c0f1e2ae7e2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f28aec014edd29cfc669cf1c3f795c0f1e2ae7e2"
      }
    ],
    "stats": {
      "total": 52,
      "additions": 8,
      "deletions": 44
    },
    "files": [
      {
        "sha": "9632e67f207f21426d8eb7a93c1dfdb4e4eb0301",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 11,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9d1a81ce76737a73c9706e074a4fe8440c8277e/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9d1a81ce76737a73c9706e074a4fe8440c8277e/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=c9d1a81ce76737a73c9706e074a4fe8440c8277e",
        "patch": "@@ -53,20 +53,16 @@ bool CCoins::Spend(int nPos) {\n \n \n bool CCoinsView::GetCoins(const uint256 &txid, CCoins &coins) const { return false; }\n-bool CCoinsView::SetCoins(const uint256 &txid, const CCoins &coins) { return false; }\n bool CCoinsView::HaveCoins(const uint256 &txid) const { return false; }\n uint256 CCoinsView::GetBestBlock() const { return uint256(0); }\n-bool CCoinsView::SetBestBlock(const uint256 &hashBlock) { return false; }\n bool CCoinsView::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) { return false; }\n bool CCoinsView::GetStats(CCoinsStats &stats) const { return false; }\n \n \n CCoinsViewBacked::CCoinsViewBacked(CCoinsView &viewIn) : base(&viewIn) { }\n bool CCoinsViewBacked::GetCoins(const uint256 &txid, CCoins &coins) const { return base->GetCoins(txid, coins); }\n-bool CCoinsViewBacked::SetCoins(const uint256 &txid, const CCoins &coins) { return base->SetCoins(txid, coins); }\n bool CCoinsViewBacked::HaveCoins(const uint256 &txid) const { return base->HaveCoins(txid); }\n uint256 CCoinsViewBacked::GetBestBlock() const { return base->GetBestBlock(); }\n-bool CCoinsViewBacked::SetBestBlock(const uint256 &hashBlock) { return base->SetBestBlock(hashBlock); }\n void CCoinsViewBacked::SetBackend(CCoinsView &viewIn) { base = &viewIn; }\n bool CCoinsViewBacked::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) { return base->BatchWrite(mapCoins, hashBlock); }\n bool CCoinsViewBacked::GetStats(CCoinsStats &stats) const { return base->GetStats(stats); }\n@@ -124,11 +120,6 @@ const CCoins* CCoinsViewCache::AccessCoins(const uint256 &txid) const {\n     }\n }\n \n-bool CCoinsViewCache::SetCoins(const uint256 &txid, const CCoins &coins) {\n-    cacheCoins[txid] = coins;\n-    return true;\n-}\n-\n bool CCoinsViewCache::HaveCoins(const uint256 &txid) const {\n     CCoinsMap::const_iterator it = FetchCoins(txid);\n     // We're using vtx.empty() instead of IsPruned here for performance reasons,\n@@ -144,9 +135,8 @@ uint256 CCoinsViewCache::GetBestBlock() const {\n     return hashBlock;\n }\n \n-bool CCoinsViewCache::SetBestBlock(const uint256 &hashBlockIn) {\n+void CCoinsViewCache::SetBestBlock(const uint256 &hashBlockIn) {\n     hashBlock = hashBlockIn;\n-    return true;\n }\n \n bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn) {"
      },
      {
        "sha": "ce7a79740b583d9292d5963e5e496ed4eb4e1751",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 2,
        "deletions": 11,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9d1a81ce76737a73c9706e074a4fe8440c8277e/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9d1a81ce76737a73c9706e074a4fe8440c8277e/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=c9d1a81ce76737a73c9706e074a4fe8440c8277e",
        "patch": "@@ -294,20 +294,14 @@ class CCoinsView\n     // Retrieve the CCoins (unspent transaction outputs) for a given txid\n     virtual bool GetCoins(const uint256 &txid, CCoins &coins) const;\n \n-    // Modify the CCoins for a given txid\n-    virtual bool SetCoins(const uint256 &txid, const CCoins &coins);\n-\n     // Just check whether we have data for a given txid.\n     // This may (but cannot always) return true for fully spent transactions\n     virtual bool HaveCoins(const uint256 &txid) const;\n \n     // Retrieve the block hash whose state this CCoinsView currently represents\n     virtual uint256 GetBestBlock() const;\n \n-    // Modify the currently active block hash\n-    virtual bool SetBestBlock(const uint256 &hashBlock);\n-\n-    // Do a bulk modification (multiple SetCoins + one SetBestBlock).\n+    // Do a bulk modification (multiple CCoins changes + BestBlock change).\n     // The passed mapCoins can be modified.\n     virtual bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock);\n \n@@ -328,10 +322,8 @@ class CCoinsViewBacked : public CCoinsView\n public:\n     CCoinsViewBacked(CCoinsView &viewIn);\n     bool GetCoins(const uint256 &txid, CCoins &coins) const;\n-    bool SetCoins(const uint256 &txid, const CCoins &coins);\n     bool HaveCoins(const uint256 &txid) const;\n     uint256 GetBestBlock() const;\n-    bool SetBestBlock(const uint256 &hashBlock);\n     void SetBackend(CCoinsView &viewIn);\n     bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock);\n     bool GetStats(CCoinsStats &stats) const;\n@@ -375,10 +367,9 @@ class CCoinsViewCache : public CCoinsViewBacked\n \n     // Standard CCoinsView methods\n     bool GetCoins(const uint256 &txid, CCoins &coins) const;\n-    bool SetCoins(const uint256 &txid, const CCoins &coins);\n     bool HaveCoins(const uint256 &txid) const;\n     uint256 GetBestBlock() const;\n-    bool SetBestBlock(const uint256 &hashBlock);\n+    void SetBestBlock(const uint256 &hashBlock);\n     bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock);\n \n     // Return a pointer to CCoins in the cache, or NULL if not found. This is"
      },
      {
        "sha": "af8810ebd6fa048b1da8e819336c5b49d3b98810",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9d1a81ce76737a73c9706e074a4fe8440c8277e/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9d1a81ce76737a73c9706e074a4fe8440c8277e/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=c9d1a81ce76737a73c9706e074a4fe8440c8277e",
        "patch": "@@ -1753,9 +1753,7 @@ bool ConnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, C\n             return state.Abort(_(\"Failed to write transaction index\"));\n \n     // add this block to the view's block chain\n-    bool ret;\n-    ret = view.SetBestBlock(pindex->GetBlockHash());\n-    assert(ret);\n+    view.SetBestBlock(pindex->GetBlockHash());\n \n     int64_t nTime3 = GetTimeMicros(); nTimeIndex += nTime3 - nTime2;\n     LogPrint(\"bench\", \"    - Index writing: %.2fms [%.2fs]\\n\", 0.001 * (nTime3 - nTime2), nTimeIndex * 0.000001);"
      },
      {
        "sha": "645d3c691856002287119db940e139397e990872",
        "filename": "src/test/script_P2SH_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9d1a81ce76737a73c9706e074a4fe8440c8277e/src/test/script_P2SH_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9d1a81ce76737a73c9706e074a4fe8440c8277e/src/test/script_P2SH_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_P2SH_tests.cpp?ref=c9d1a81ce76737a73c9706e074a4fe8440c8277e",
        "patch": "@@ -312,8 +312,7 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n     txFrom.vout[6].scriptPubKey = GetScriptForDestination(twentySigops.GetID());\n     txFrom.vout[6].nValue = 6000;\n \n-\n-    coins.SetCoins(txFrom.GetHash(), CCoins(txFrom, 0));\n+    coins.ModifyCoins(txFrom.GetHash())->FromTx(txFrom, 0);\n \n     CMutableTransaction txTo;\n     txTo.vout.resize(1);"
      },
      {
        "sha": "15c0034bfb3a9d4e96ed28fc0adc52a321eca0be",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9d1a81ce76737a73c9706e074a4fe8440c8277e/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9d1a81ce76737a73c9706e074a4fe8440c8277e/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=c9d1a81ce76737a73c9706e074a4fe8440c8277e",
        "patch": "@@ -225,7 +225,7 @@ BOOST_AUTO_TEST_CASE(basic_transaction_tests)\n // paid to a TX_PUBKEYHASH.\n //\n static std::vector<CMutableTransaction>\n-SetupDummyInputs(CBasicKeyStore& keystoreRet, CCoinsView & coinsRet)\n+SetupDummyInputs(CBasicKeyStore& keystoreRet, CCoinsViewCache& coinsRet)\n {\n     std::vector<CMutableTransaction> dummyTransactions;\n     dummyTransactions.resize(2);\n@@ -244,14 +244,14 @@ SetupDummyInputs(CBasicKeyStore& keystoreRet, CCoinsView & coinsRet)\n     dummyTransactions[0].vout[0].scriptPubKey << key[0].GetPubKey() << OP_CHECKSIG;\n     dummyTransactions[0].vout[1].nValue = 50*CENT;\n     dummyTransactions[0].vout[1].scriptPubKey << key[1].GetPubKey() << OP_CHECKSIG;\n-    coinsRet.SetCoins(dummyTransactions[0].GetHash(), CCoins(dummyTransactions[0], 0));\n+    coinsRet.ModifyCoins(dummyTransactions[0].GetHash())->FromTx(dummyTransactions[0], 0);\n \n     dummyTransactions[1].vout.resize(2);\n     dummyTransactions[1].vout[0].nValue = 21*CENT;\n     dummyTransactions[1].vout[0].scriptPubKey = GetScriptForDestination(key[2].GetPubKey().GetID());\n     dummyTransactions[1].vout[1].nValue = 22*CENT;\n     dummyTransactions[1].vout[1].scriptPubKey = GetScriptForDestination(key[3].GetPubKey().GetID());\n-    coinsRet.SetCoins(dummyTransactions[1].GetHash(), CCoins(dummyTransactions[1], 0));\n+    coinsRet.ModifyCoins(dummyTransactions[1].GetHash())->FromTx(dummyTransactions[1], 0);\n \n     return dummyTransactions;\n }"
      },
      {
        "sha": "3b353ab6249a0fe32732ada348bf41182741990e",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 12,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9d1a81ce76737a73c9706e074a4fe8440c8277e/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9d1a81ce76737a73c9706e074a4fe8440c8277e/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=c9d1a81ce76737a73c9706e074a4fe8440c8277e",
        "patch": "@@ -33,12 +33,6 @@ bool CCoinsViewDB::GetCoins(const uint256 &txid, CCoins &coins) const {\n     return db.Read(make_pair('c', txid), coins);\n }\n \n-bool CCoinsViewDB::SetCoins(const uint256 &txid, const CCoins &coins) {\n-    CLevelDBBatch batch;\n-    BatchWriteCoins(batch, txid, coins);\n-    return db.WriteBatch(batch);\n-}\n-\n bool CCoinsViewDB::HaveCoins(const uint256 &txid) const {\n     return db.Exists(make_pair('c', txid));\n }\n@@ -50,12 +44,6 @@ uint256 CCoinsViewDB::GetBestBlock() const {\n     return hashBestChain;\n }\n \n-bool CCoinsViewDB::SetBestBlock(const uint256 &hashBlock) {\n-    CLevelDBBatch batch;\n-    BatchWriteHashBestChain(batch, hashBlock);\n-    return db.WriteBatch(batch);\n-}\n-\n bool CCoinsViewDB::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) {\n     LogPrint(\"coindb\", \"Committing %u changed transactions to coin database...\\n\", (unsigned int)mapCoins.size());\n "
      },
      {
        "sha": "8f2bd9af4d15f2e1b5cb7590d52d0c8db32af903",
        "filename": "src/txdb.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9d1a81ce76737a73c9706e074a4fe8440c8277e/src/txdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9d1a81ce76737a73c9706e074a4fe8440c8277e/src/txdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.h?ref=c9d1a81ce76737a73c9706e074a4fe8440c8277e",
        "patch": "@@ -33,10 +33,8 @@ class CCoinsViewDB : public CCoinsView\n     CCoinsViewDB(size_t nCacheSize, bool fMemory = false, bool fWipe = false);\n \n     bool GetCoins(const uint256 &txid, CCoins &coins) const;\n-    bool SetCoins(const uint256 &txid, const CCoins &coins);\n     bool HaveCoins(const uint256 &txid) const;\n     uint256 GetBestBlock() const;\n-    bool SetBestBlock(const uint256 &hashBlock);\n     bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock);\n     bool GetStats(CCoinsStats &stats) const;\n };"
      }
    ]
  },
  {
    "sha": "058b08c147a6d56b57221faa5b6fcdb83b4140b2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNThiMDhjMTQ3YTZkNTZiNTcyMjFmYWE1YjZmY2RiODNiNDE0MGIy",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-09-03T07:37:47Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-09-23T20:29:43Z"
      },
      "message": "Do not keep fully spent but unwritten CCoins entries cached.\n\nInstead of storing CCoins entries directly in CCoinsMap, store a CCoinsCacheEntry\nwhich additionally keeps track of whether a particular entry is:\n* dirty: potentially different from its parent view.\n* fresh: the parent view is known to not have a non-pruned version.\n\nThis allows us to skip non-dirty cache entries when pushing batches of changes up,\nand to remove CCoins entries about transactions that are fully spent before the\nparent cache learns about them.",
      "tree": {
        "sha": "c8a44779f36d1c2b7a0fe41287eeddecb4aa4e77",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c8a44779f36d1c2b7a0fe41287eeddecb4aa4e77"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/058b08c147a6d56b57221faa5b6fcdb83b4140b2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/058b08c147a6d56b57221faa5b6fcdb83b4140b2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/058b08c147a6d56b57221faa5b6fcdb83b4140b2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/058b08c147a6d56b57221faa5b6fcdb83b4140b2/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c9d1a81ce76737a73c9706e074a4fe8440c8277e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c9d1a81ce76737a73c9706e074a4fe8440c8277e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c9d1a81ce76737a73c9706e074a4fe8440c8277e"
      }
    ],
    "stats": {
      "total": 119,
      "additions": 88,
      "deletions": 31
    },
    "files": [
      {
        "sha": "9d60089bf5e57a0483212c58bfa22f9ac756a4e2",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 62,
        "deletions": 23,
        "changes": 85,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/058b08c147a6d56b57221faa5b6fcdb83b4140b2/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/058b08c147a6d56b57221faa5b6fcdb83b4140b2/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=058b08c147a6d56b57221faa5b6fcdb83b4140b2",
        "patch": "@@ -71,18 +71,6 @@ CCoinsKeyHasher::CCoinsKeyHasher() : salt(GetRandHash()) {}\n \n CCoinsViewCache::CCoinsViewCache(CCoinsView &baseIn, bool fDummy) : CCoinsViewBacked(baseIn), hasModifier(false), hashBlock(0) { }\n \n-bool CCoinsViewCache::GetCoins(const uint256 &txid, CCoins &coins) const {\n-    if (cacheCoins.count(txid)) {\n-        coins = cacheCoins[txid];\n-        return true;\n-    }\n-    if (base->GetCoins(txid, coins)) {\n-        cacheCoins[txid] = coins;\n-        return true;\n-    }\n-    return false;\n-}\n-\n CCoinsViewCache::~CCoinsViewCache()\n {\n     assert(!hasModifier);\n@@ -93,21 +81,43 @@ CCoinsMap::const_iterator CCoinsViewCache::FetchCoins(const uint256 &txid) const\n     if (it != cacheCoins.end())\n         return it;\n     CCoins tmp;\n-    if (!base->GetCoins(txid,tmp))\n+    if (!base->GetCoins(txid, tmp))\n         return cacheCoins.end();\n-    CCoinsMap::iterator ret = cacheCoins.insert(it, std::make_pair(txid, CCoins()));\n-    tmp.swap(ret->second);\n+    CCoinsMap::iterator ret = cacheCoins.insert(std::make_pair(txid, CCoinsCacheEntry())).first;\n+    tmp.swap(ret->second.coins);\n+    if (ret->second.coins.IsPruned()) {\n+        // The parent only has an empty entry for this txid; we can consider our\n+        // version as fresh.\n+        ret->second.flags = CCoinsCacheEntry::FRESH;\n+    }\n     return ret;\n }\n \n+bool CCoinsViewCache::GetCoins(const uint256 &txid, CCoins &coins) const {\n+    CCoinsMap::const_iterator it = FetchCoins(txid);\n+    if (it != cacheCoins.end()) {\n+        coins = it->second.coins;\n+        return true;\n+    }\n+    return false;\n+}\n+\n CCoinsModifier CCoinsViewCache::ModifyCoins(const uint256 &txid) {\n     assert(!hasModifier);\n     hasModifier = true;\n-    std::pair<CCoinsMap::iterator, bool> ret = cacheCoins.insert(std::make_pair(txid, CCoins()));\n+    std::pair<CCoinsMap::iterator, bool> ret = cacheCoins.insert(std::make_pair(txid, CCoinsCacheEntry()));\n     if (ret.second) {\n-        if (!base->GetCoins(txid, ret.first->second))\n-            ret.first->second.Clear();\n+        if (!base->GetCoins(txid, ret.first->second.coins)) {\n+            // The parent view does not have this entry; mark it as fresh.\n+            ret.first->second.coins.Clear();\n+            ret.first->second.flags = CCoinsCacheEntry::FRESH;\n+        } else if (ret.first->second.coins.IsPruned()) {\n+            // The parent view only has a pruned entry for this; mark it as fresh.\n+            ret.first->second.flags = CCoinsCacheEntry::FRESH;\n+        }\n     }\n+    // Assume that whenever ModifyCoins is called, the entry will be modified.\n+    ret.first->second.flags |= CCoinsCacheEntry::DIRTY;\n     return CCoinsModifier(*this, ret.first);\n }\n \n@@ -116,7 +126,7 @@ const CCoins* CCoinsViewCache::AccessCoins(const uint256 &txid) const {\n     if (it == cacheCoins.end()) {\n         return NULL;\n     } else {\n-        return &it->second;\n+        return &it->second.coins;\n     }\n }\n \n@@ -126,7 +136,7 @@ bool CCoinsViewCache::HaveCoins(const uint256 &txid) const {\n     // as we only care about the case where an transaction was replaced entirely\n     // in a reorganization (which wipes vout entirely, as opposed to spending\n     // which just cleans individual outputs).\n-    return (it != cacheCoins.end() && !it->second.vout.empty());\n+    return (it != cacheCoins.end() && !it->second.coins.vout.empty());\n }\n \n uint256 CCoinsViewCache::GetBestBlock() const {\n@@ -142,7 +152,32 @@ void CCoinsViewCache::SetBestBlock(const uint256 &hashBlockIn) {\n bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn) {\n     assert(!hasModifier);\n     for (CCoinsMap::iterator it = mapCoins.begin(); it != mapCoins.end();) {\n-        cacheCoins[it->first].swap(it->second);\n+        if (it->second.flags & CCoinsCacheEntry::DIRTY) { // Ignore non-dirty entries (optimization).\n+            CCoinsMap::iterator itUs = cacheCoins.find(it->first);\n+            if (itUs == cacheCoins.end()) {\n+                if (!it->second.coins.IsPruned()) {\n+                    // The parent cache does not have an entry, while the child\n+                    // cache does have (a non-pruned) one. Move the data up, and\n+                    // mark it as fresh (if the grandparent did have it, we\n+                    // would have pulled it in at first GetCoins).\n+                    assert(it->second.flags & CCoinsCacheEntry::FRESH);\n+                    CCoinsCacheEntry& entry = cacheCoins[it->first];\n+                    entry.coins.swap(it->second.coins);\n+                    entry.flags = CCoinsCacheEntry::DIRTY | CCoinsCacheEntry::FRESH;\n+                }\n+            } else {\n+                if ((itUs->second.flags & CCoinsCacheEntry::FRESH) && it->second.coins.IsPruned()) {\n+                    // The grandparent does not have an entry, and the child is\n+                    // modified and being pruned. This means we can just delete\n+                    // it from the parent.\n+                    cacheCoins.erase(itUs);\n+                } else {\n+                    // A normal modification.\n+                    itUs->second.coins.swap(it->second.coins);\n+                    itUs->second.flags |= CCoinsCacheEntry::DIRTY;\n+                }\n+            }\n+        }\n         CCoinsMap::iterator itOld = it++;\n         mapCoins.erase(itOld);\n     }\n@@ -212,8 +247,12 @@ double CCoinsViewCache::GetPriority(const CTransaction &tx, int nHeight) const\n \n CCoinsModifier::CCoinsModifier(CCoinsViewCache& cache_, CCoinsMap::iterator it_) : cache(cache_), it(it_) {}\n \n-CCoinsModifier::~CCoinsModifier() {\n+CCoinsModifier::~CCoinsModifier()\n+{\n     assert(cache.hasModifier);\n     cache.hasModifier = false;\n-    it->second.Cleanup();\n+    it->second.coins.Cleanup();\n+    if ((it->second.flags & CCoinsCacheEntry::FRESH) && it->second.coins.IsPruned()) {\n+        cache.cacheCoins.erase(it);\n+    }\n }"
      },
      {
        "sha": "71aea79adcf9f67061cecf4426400dfb6e2b81cb",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 16,
        "deletions": 3,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/058b08c147a6d56b57221faa5b6fcdb83b4140b2/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/058b08c147a6d56b57221faa5b6fcdb83b4140b2/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=058b08c147a6d56b57221faa5b6fcdb83b4140b2",
        "patch": "@@ -271,7 +271,20 @@ class CCoinsKeyHasher\n     }\n };\n \n-typedef boost::unordered_map<uint256, CCoins, CCoinsKeyHasher> CCoinsMap;\n+struct CCoinsCacheEntry\n+{\n+    CCoins coins; // The actual cached data.\n+    unsigned char flags;\n+\n+    enum Flags {\n+        DIRTY = (1 << 0), // This cache entry is potentially different from the version in the parent view.\n+        FRESH = (1 << 1), // The parent view does not have this entry (or it is pruned).\n+    };\n+\n+    CCoinsCacheEntry() : coins(), flags(0) {}\n+};\n+\n+typedef boost::unordered_map<uint256, CCoinsCacheEntry, CCoinsKeyHasher> CCoinsMap;\n \n struct CCoinsStats\n {\n@@ -343,8 +356,8 @@ class CCoinsModifier\n     CCoinsModifier(CCoinsViewCache& cache_, CCoinsMap::iterator it_);\n \n public:\n-    CCoins* operator->() { return &it->second; }\n-    CCoins& operator*() { return it->second; }\n+    CCoins* operator->() { return &it->second.coins; }\n+    CCoins& operator*() { return it->second.coins; }\n     ~CCoinsModifier();\n     friend class CCoinsViewCache;\n };"
      },
      {
        "sha": "fbe63411d767588639f0bdb6ce82858cb995be1c",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/058b08c147a6d56b57221faa5b6fcdb83b4140b2/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/058b08c147a6d56b57221faa5b6fcdb83b4140b2/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=058b08c147a6d56b57221faa5b6fcdb83b4140b2",
        "patch": "@@ -1797,10 +1797,10 @@ void static UpdateTip(CBlockIndex *pindexNew) {\n     nTimeBestReceived = GetTime();\n     mempool.AddTransactionsUpdated(1);\n \n-    LogPrintf(\"UpdateTip: new best=%s  height=%d  log2_work=%.8g  tx=%lu  date=%s progress=%f\\n\",\n+    LogPrintf(\"UpdateTip: new best=%s  height=%d  log2_work=%.8g  tx=%lu  date=%s progress=%f  cache=%u\\n\",\n       chainActive.Tip()->GetBlockHash().ToString(), chainActive.Height(), log(chainActive.Tip()->nChainWork.getdouble())/log(2.0), (unsigned long)chainActive.Tip()->nChainTx,\n       DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", chainActive.Tip()->GetBlockTime()),\n-      Checkpoints::GuessVerificationProgress(chainActive.Tip()));\n+      Checkpoints::GuessVerificationProgress(chainActive.Tip()), (unsigned int)pcoinsTip->GetCacheSize());\n \n     cvBlockChange.notify_all();\n "
      },
      {
        "sha": "89830ced736dfbaea69443cffd7fc7abd76cf2d8",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 3,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/058b08c147a6d56b57221faa5b6fcdb83b4140b2/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/058b08c147a6d56b57221faa5b6fcdb83b4140b2/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=058b08c147a6d56b57221faa5b6fcdb83b4140b2",
        "patch": "@@ -45,17 +45,22 @@ uint256 CCoinsViewDB::GetBestBlock() const {\n }\n \n bool CCoinsViewDB::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) {\n-    LogPrint(\"coindb\", \"Committing %u changed transactions to coin database...\\n\", (unsigned int)mapCoins.size());\n-\n     CLevelDBBatch batch;\n+    size_t count = 0;\n+    size_t changed = 0;\n     for (CCoinsMap::iterator it = mapCoins.begin(); it != mapCoins.end();) {\n-        BatchWriteCoins(batch, it->first, it->second);\n+        if (it->second.flags & CCoinsCacheEntry::DIRTY) {\n+            BatchWriteCoins(batch, it->first, it->second.coins);\n+            changed++;\n+        }\n+        count++;\n         CCoinsMap::iterator itOld = it++;\n         mapCoins.erase(itOld);\n     }\n     if (hashBlock != uint256(0))\n         BatchWriteHashBestChain(batch, hashBlock);\n \n+    LogPrint(\"coindb\", \"Committing %u changed transactions (out of %u) to coin database...\\n\", (unsigned int)changed, (unsigned int)count);\n     return db.WriteBatch(batch);\n }\n "
      }
    ]
  },
  {
    "sha": "ed27e53c9be3c2e194b3e7cff85933531aef4cc8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZDI3ZTUzYzliZTNjMmUxOTRiM2U3Y2ZmODU5MzM1MzFhZWY0Y2M4",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-09-16T23:27:06Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-09-23T20:29:45Z"
      },
      "message": "Add coins_tests with a large randomized CCoinViewCache test.",
      "tree": {
        "sha": "11ca83b1f338d38c5e4f91102d1edc5e40c988fb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/11ca83b1f338d38c5e4f91102d1edc5e40c988fb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ed27e53c9be3c2e194b3e7cff85933531aef4cc8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed27e53c9be3c2e194b3e7cff85933531aef4cc8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ed27e53c9be3c2e194b3e7cff85933531aef4cc8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed27e53c9be3c2e194b3e7cff85933531aef4cc8/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "058b08c147a6d56b57221faa5b6fcdb83b4140b2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/058b08c147a6d56b57221faa5b6fcdb83b4140b2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/058b08c147a6d56b57221faa5b6fcdb83b4140b2"
      }
    ],
    "stats": {
      "total": 179,
      "additions": 179,
      "deletions": 0
    },
    "files": [
      {
        "sha": "99ac09e1a4741dbc36d0d30f8a7bcf71802e76a0",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed27e53c9be3c2e194b3e7cff85933531aef4cc8/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed27e53c9be3c2e194b3e7cff85933531aef4cc8/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=ed27e53c9be3c2e194b3e7cff85933531aef4cc8",
        "patch": "@@ -44,6 +44,7 @@ BITCOIN_TESTS =\\\n   test/checkblock_tests.cpp \\\n   test/Checkpoints_tests.cpp \\\n   test/compress_tests.cpp \\\n+  test/coins_tests.cpp \\\n   test/crypto_tests.cpp \\\n   test/DoS_tests.cpp \\\n   test/getarg_tests.cpp \\"
      },
      {
        "sha": "214aaff900d5081b5eb84c5467b02dbb7b391b32",
        "filename": "src/test/coins_tests.cpp",
        "status": "added",
        "additions": 178,
        "deletions": 0,
        "changes": 178,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed27e53c9be3c2e194b3e7cff85933531aef4cc8/src/test/coins_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed27e53c9be3c2e194b3e7cff85933531aef4cc8/src/test/coins_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/coins_tests.cpp?ref=ed27e53c9be3c2e194b3e7cff85933531aef4cc8",
        "patch": "@@ -0,0 +1,178 @@\n+// Copyright (c) 2014 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"coins.h\"\n+#include \"random.h\"\n+#include \"uint256.h\"\n+\n+#include <vector>\n+#include <map>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+namespace\n+{\n+class CCoinsViewTest : public CCoinsView\n+{\n+    uint256 hashBestBlock_;\n+    std::map<uint256, CCoins> map_;\n+\n+public:\n+    bool GetCoins(const uint256& txid, CCoins& coins) const\n+    {\n+        std::map<uint256, CCoins>::const_iterator it = map_.find(txid);\n+        if (it == map_.end()) {\n+            return false;\n+        }\n+        coins = it->second;\n+        if (coins.IsPruned() && insecure_rand() % 2 == 0) {\n+            // Randomly return false in case of an empty entry.\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    bool HaveCoins(const uint256& txid) const\n+    {\n+        CCoins coins;\n+        return GetCoins(txid, coins);\n+    }\n+\n+    uint256 GetBestBlock() const { return hashBestBlock_; }\n+\n+    bool BatchWrite(CCoinsMap& mapCoins, const uint256& hashBlock)\n+    {\n+        for (CCoinsMap::iterator it = mapCoins.begin(); it != mapCoins.end(); ) {\n+            map_[it->first] = it->second.coins;\n+            if (it->second.coins.IsPruned() && insecure_rand() % 3 == 0) {\n+                // Randomly delete empty entries on write.\n+                map_.erase(it->first);\n+            }\n+            mapCoins.erase(it++);\n+        }\n+        mapCoins.clear();\n+        hashBestBlock_ = hashBlock;\n+        return true;\n+    }\n+\n+    bool GetStats(CCoinsStats& stats) const { return false; }\n+};\n+}\n+\n+BOOST_AUTO_TEST_SUITE(coins_tests)\n+\n+static const unsigned int NUM_SIMULATION_ITERATIONS = 40000;\n+\n+// This is a large randomized insert/remove simulation test on a variable-size\n+// stack of caches on top of CCoinsViewTest.\n+//\n+// It will randomly create/update/delete CCoins entries to a tip of caches, with\n+// txids picked from a limited list of random 256-bit hashes. Occasionally, a\n+// new tip is added to the stack of caches, or the tip is flushed and removed.\n+//\n+// During the process, booleans are kept to make sure that the randomized\n+// operation hits all branches.\n+BOOST_AUTO_TEST_CASE(coins_cache_simulation_test)\n+{\n+    // Various coverage trackers.\n+    bool removed_all_caches = false;\n+    bool reached_4_caches = false;\n+    bool added_an_entry = false;\n+    bool removed_an_entry = false;\n+    bool updated_an_entry = false;\n+    bool found_an_entry = false;\n+    bool missed_an_entry = false;\n+\n+    // A simple map to track what we expect the cache stack to represent.\n+    std::map<uint256, CCoins> result;\n+\n+    // The cache stack.\n+    CCoinsViewTest base; // A CCoinsViewTest at the bottom.\n+    std::vector<CCoinsViewCache*> stack; // A stack of CCoinsViewCaches on top.\n+    stack.push_back(new CCoinsViewCache(base, false)); // Start with one cache.\n+\n+    // Use a limited set of random transaction ids, so we do test overwriting entries.\n+    std::vector<uint256> txids;\n+    txids.resize(NUM_SIMULATION_ITERATIONS / 8);\n+    for (unsigned int i = 0; i < txids.size(); i++) {\n+        txids[i] = GetRandHash();\n+    }\n+\n+    for (unsigned int i = 0; i < NUM_SIMULATION_ITERATIONS; i++) {\n+        // Do a random modification.\n+        {\n+            uint256 txid = txids[insecure_rand() % txids.size()]; // txid we're going to modify in this iteration.\n+            CCoins& coins = result[txid];\n+            CCoinsModifier entry = stack.back()->ModifyCoins(txid);\n+            BOOST_CHECK(coins == *entry);\n+            if (insecure_rand() % 5 == 0 || coins.IsPruned()) {\n+                if (coins.IsPruned()) {\n+                    added_an_entry = true;\n+                } else {\n+                    updated_an_entry = true;\n+                }\n+                coins.nVersion = insecure_rand();\n+                coins.vout.resize(1);\n+                coins.vout[0].nValue = insecure_rand();\n+                *entry = coins;\n+            } else {\n+                coins.Clear();\n+                entry->Clear();\n+                removed_an_entry = true;\n+            }\n+        }\n+\n+        // Once every 1000 iterations and at the end, verify the full cache.\n+        if (insecure_rand() % 1000 == 1 || i == NUM_SIMULATION_ITERATIONS - 1) {\n+            for (std::map<uint256, CCoins>::iterator it = result.begin(); it != result.end(); it++) {\n+                const CCoins* coins = stack.back()->AccessCoins(it->first);\n+                if (coins) {\n+                    BOOST_CHECK(*coins == it->second);\n+                    found_an_entry = true;\n+                } else {\n+                    BOOST_CHECK(it->second.IsPruned());\n+                    missed_an_entry = true;\n+                }\n+            }\n+        }\n+\n+        if (insecure_rand() % 100 == 0) {\n+            // Every 100 iterations, change the cache stack.\n+            if (stack.size() > 0 && insecure_rand() % 2 == 0) {\n+                stack.back()->Flush();\n+                delete stack.back();\n+                stack.pop_back();\n+            }\n+            if (stack.size() == 0 || (stack.size() < 4 && insecure_rand() % 2)) {\n+                CCoinsView* tip = &base;\n+                if (stack.size() > 0) {\n+                    tip = stack.back();\n+                } else {\n+                    removed_all_caches = true;\n+                }\n+                stack.push_back(new CCoinsViewCache(*tip, false));\n+                if (stack.size() == 4) {\n+                    reached_4_caches = true;\n+                }\n+            }\n+        }\n+    }\n+\n+    // Clean up the stack.\n+    while (stack.size() > 0) {\n+        delete stack.back();\n+        stack.pop_back();\n+    }\n+\n+    // Verify coverage.\n+    BOOST_CHECK(removed_all_caches);\n+    BOOST_CHECK(reached_4_caches);\n+    BOOST_CHECK(added_an_entry);\n+    BOOST_CHECK(removed_an_entry);\n+    BOOST_CHECK(updated_an_entry);\n+    BOOST_CHECK(found_an_entry);\n+    BOOST_CHECK(missed_an_entry);\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "7c70438dc67547e83953ba0343a071fae304ce65",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YzcwNDM4ZGM2NzU0N2U4Mzk1M2JhMDM0M2EwNzFmYWUzMDRjZTY1",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-09-24T01:19:04Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-09-24T01:19:04Z"
      },
      "message": "Get rid of the dummy CCoinsViewCache constructor arg",
      "tree": {
        "sha": "88683dd773ad889a630e5262b5051e85262c6bdc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/88683dd773ad889a630e5262b5051e85262c6bdc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7c70438dc67547e83953ba0343a071fae304ce65",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7c70438dc67547e83953ba0343a071fae304ce65",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7c70438dc67547e83953ba0343a071fae304ce65",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7c70438dc67547e83953ba0343a071fae304ce65/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ed27e53c9be3c2e194b3e7cff85933531aef4cc8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed27e53c9be3c2e194b3e7cff85933531aef4cc8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ed27e53c9be3c2e194b3e7cff85933531aef4cc8"
      }
    ],
    "stats": {
      "total": 48,
      "additions": 24,
      "deletions": 24
    },
    "files": [
      {
        "sha": "7ce80a04cbca89b091ce58916863ca778637cbdd",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c70438dc67547e83953ba0343a071fae304ce65/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c70438dc67547e83953ba0343a071fae304ce65/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=7c70438dc67547e83953ba0343a071fae304ce65",
        "patch": "@@ -340,7 +340,7 @@ static void MutateTxSign(CMutableTransaction& tx, const string& flagStr)\n     CMutableTransaction mergedTx(txVariants[0]);\n     bool fComplete = true;\n     CCoinsView viewDummy;\n-    CCoinsViewCache view(viewDummy);\n+    CCoinsViewCache view(&viewDummy);\n \n     if (!registers.count(\"privatekeys\"))\n         throw runtime_error(\"privatekeys register variable must be set.\");"
      },
      {
        "sha": "6b7ebf60783b9c237ef8863ad0685eead1919738",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c70438dc67547e83953ba0343a071fae304ce65/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c70438dc67547e83953ba0343a071fae304ce65/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=7c70438dc67547e83953ba0343a071fae304ce65",
        "patch": "@@ -59,7 +59,7 @@ bool CCoinsView::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) { ret\n bool CCoinsView::GetStats(CCoinsStats &stats) const { return false; }\n \n \n-CCoinsViewBacked::CCoinsViewBacked(CCoinsView &viewIn) : base(&viewIn) { }\n+CCoinsViewBacked::CCoinsViewBacked(CCoinsView *viewIn) : base(viewIn) { }\n bool CCoinsViewBacked::GetCoins(const uint256 &txid, CCoins &coins) const { return base->GetCoins(txid, coins); }\n bool CCoinsViewBacked::HaveCoins(const uint256 &txid) const { return base->HaveCoins(txid); }\n uint256 CCoinsViewBacked::GetBestBlock() const { return base->GetBestBlock(); }\n@@ -69,7 +69,7 @@ bool CCoinsViewBacked::GetStats(CCoinsStats &stats) const { return base->GetStat\n \n CCoinsKeyHasher::CCoinsKeyHasher() : salt(GetRandHash()) {}\n \n-CCoinsViewCache::CCoinsViewCache(CCoinsView &baseIn, bool fDummy) : CCoinsViewBacked(baseIn), hasModifier(false), hashBlock(0) { }\n+CCoinsViewCache::CCoinsViewCache(CCoinsView *baseIn) : CCoinsViewBacked(baseIn), hasModifier(false), hashBlock(0) { }\n \n CCoinsViewCache::~CCoinsViewCache()\n {"
      },
      {
        "sha": "4cb28e40c4f016d15422e7dc4cbfb83a4663b551",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c70438dc67547e83953ba0343a071fae304ce65/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c70438dc67547e83953ba0343a071fae304ce65/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=7c70438dc67547e83953ba0343a071fae304ce65",
        "patch": "@@ -333,7 +333,7 @@ class CCoinsViewBacked : public CCoinsView\n     CCoinsView *base;\n \n public:\n-    CCoinsViewBacked(CCoinsView &viewIn);\n+    CCoinsViewBacked(CCoinsView *viewIn);\n     bool GetCoins(const uint256 &txid, CCoins &coins) const;\n     bool HaveCoins(const uint256 &txid) const;\n     uint256 GetBestBlock() const;\n@@ -375,7 +375,7 @@ class CCoinsViewCache : public CCoinsViewBacked\n     mutable CCoinsMap cacheCoins;\n \n public:\n-    CCoinsViewCache(CCoinsView &baseIn, bool fDummy = false);\n+    CCoinsViewCache(CCoinsView *baseIn);\n     ~CCoinsViewCache();\n \n     // Standard CCoinsView methods"
      },
      {
        "sha": "787b850e74667da83b4277227c15df562bd0a3be",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c70438dc67547e83953ba0343a071fae304ce65/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c70438dc67547e83953ba0343a071fae304ce65/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=7c70438dc67547e83953ba0343a071fae304ce65",
        "patch": "@@ -958,7 +958,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n \n                 pblocktree = new CBlockTreeDB(nBlockTreeDBCache, false, fReindex);\n                 pcoinsdbview = new CCoinsViewDB(nCoinDBCache, false, fReindex);\n-                pcoinsTip = new CCoinsViewCache(*pcoinsdbview);\n+                pcoinsTip = new CCoinsViewCache(pcoinsdbview);\n \n                 if (fReindex)\n                     pblocktree->WriteReindexing(true);"
      },
      {
        "sha": "0b3eaafcb1abcaca98e9dea05d63407d2aa58e66",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c70438dc67547e83953ba0343a071fae304ce65/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c70438dc67547e83953ba0343a071fae304ce65/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=7c70438dc67547e83953ba0343a071fae304ce65",
        "patch": "@@ -896,12 +896,12 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n \n     {\n         CCoinsView dummy;\n-        CCoinsViewCache view(dummy);\n+        CCoinsViewCache view(&dummy);\n \n         int64_t nValueIn = 0;\n         {\n         LOCK(pool.cs);\n-        CCoinsViewMemPool viewMemPool(*pcoinsTip, pool);\n+        CCoinsViewMemPool viewMemPool(pcoinsTip, pool);\n         view.SetBackend(viewMemPool);\n \n         // do we already have it?\n@@ -1835,7 +1835,7 @@ bool static DisconnectTip(CValidationState &state) {\n     // Apply the block atomically to the chain state.\n     int64_t nStart = GetTimeMicros();\n     {\n-        CCoinsViewCache view(*pcoinsTip, true);\n+        CCoinsViewCache view(pcoinsTip);\n         if (!DisconnectBlock(block, state, pindexDelete, view))\n             return error(\"DisconnectTip() : DisconnectBlock %s failed\", pindexDelete->GetBlockHash().ToString());\n         assert(view.Flush());\n@@ -1888,7 +1888,7 @@ bool static ConnectTip(CValidationState &state, CBlockIndex *pindexNew, CBlock *\n     int64_t nTime3;\n     LogPrint(\"bench\", \"  - Load block from disk: %.2fms [%.2fs]\\n\", (nTime2 - nTime1) * 0.001, nTimeReadFromDisk * 0.000001);\n     {\n-        CCoinsViewCache view(*pcoinsTip, true);\n+        CCoinsViewCache view(pcoinsTip);\n         CInv inv(MSG_BLOCK, pindexNew->GetBlockHash());\n         if (!ConnectBlock(*pblock, state, pindexNew, view)) {\n             if (state.IsInvalid())\n@@ -2936,7 +2936,7 @@ bool CVerifyDB::VerifyDB(CCoinsView *coinsview, int nCheckLevel, int nCheckDepth\n         nCheckDepth = chainActive.Height();\n     nCheckLevel = std::max(0, std::min(4, nCheckLevel));\n     LogPrintf(\"Verifying last %i blocks at level %i\\n\", nCheckDepth, nCheckLevel);\n-    CCoinsViewCache coins(*coinsview, true);\n+    CCoinsViewCache coins(coinsview);\n     CBlockIndex* pindexState = chainActive.Tip();\n     CBlockIndex* pindexFailure = NULL;\n     int nGoodTransactions = 0;"
      },
      {
        "sha": "010ee844aff136a0f9d2043332bb6f7520096958",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c70438dc67547e83953ba0343a071fae304ce65/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c70438dc67547e83953ba0343a071fae304ce65/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=7c70438dc67547e83953ba0343a071fae304ce65",
        "patch": "@@ -116,7 +116,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n     {\n         LOCK2(cs_main, mempool.cs);\n         CBlockIndex* pindexPrev = chainActive.Tip();\n-        CCoinsViewCache view(*pcoinsTip, true);\n+        CCoinsViewCache view(pcoinsTip);\n \n         // Priority order to process transactions\n         list<COrphan> vOrphan; // list memory doesn't move\n@@ -316,7 +316,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n         CBlockIndex indexDummy(*pblock);\n         indexDummy.pprev = pindexPrev;\n         indexDummy.nHeight = pindexPrev->nHeight + 1;\n-        CCoinsViewCache viewNew(*pcoinsTip, true);\n+        CCoinsViewCache viewNew(pcoinsTip);\n         CValidationState state;\n         if (!ConnectBlock(*pblock, state, &indexDummy, viewNew, true))\n             throw std::runtime_error(\"CreateNewBlock() : ConnectBlock failed\");"
      },
      {
        "sha": "24175215bf71e8e6cdb54b5a66d864c95f8945d5",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c70438dc67547e83953ba0343a071fae304ce65/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c70438dc67547e83953ba0343a071fae304ce65/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=7c70438dc67547e83953ba0343a071fae304ce65",
        "patch": "@@ -381,7 +381,7 @@ Value gettxout(const Array& params, bool fHelp)\n     CCoins coins;\n     if (fMempool) {\n         LOCK(mempool.cs);\n-        CCoinsViewMemPool view(*pcoinsTip, mempool);\n+        CCoinsViewMemPool view(pcoinsTip, mempool);\n         if (!view.GetCoins(hash, coins))\n             return Value::null;\n         mempool.pruneSpent(hash, coins); // TODO: this should be done by the CCoinsViewMemPool"
      },
      {
        "sha": "a85a6e0ad0aa41d91b2c5f86506c3e937fdf626c",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c70438dc67547e83953ba0343a071fae304ce65/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c70438dc67547e83953ba0343a071fae304ce65/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=7c70438dc67547e83953ba0343a071fae304ce65",
        "patch": "@@ -557,11 +557,11 @@ Value signrawtransaction(const Array& params, bool fHelp)\n \n     // Fetch previous transactions (inputs):\n     CCoinsView viewDummy;\n-    CCoinsViewCache view(viewDummy);\n+    CCoinsViewCache view(&viewDummy);\n     {\n         LOCK(mempool.cs);\n         CCoinsViewCache &viewChain = *pcoinsTip;\n-        CCoinsViewMemPool viewMempool(viewChain, mempool);\n+        CCoinsViewMemPool viewMempool(&viewChain, mempool);\n         view.SetBackend(viewMempool); // temporarily switch cache backend to db+mempool view\n \n         BOOST_FOREACH(const CTxIn& txin, mergedTx.vin) {"
      },
      {
        "sha": "3ecd301bc749c40f213543ab620c98e7eb89eba0",
        "filename": "src/test/coins_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c70438dc67547e83953ba0343a071fae304ce65/src/test/coins_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c70438dc67547e83953ba0343a071fae304ce65/src/test/coins_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/coins_tests.cpp?ref=7c70438dc67547e83953ba0343a071fae304ce65",
        "patch": "@@ -90,7 +90,7 @@ BOOST_AUTO_TEST_CASE(coins_cache_simulation_test)\n     // The cache stack.\n     CCoinsViewTest base; // A CCoinsViewTest at the bottom.\n     std::vector<CCoinsViewCache*> stack; // A stack of CCoinsViewCaches on top.\n-    stack.push_back(new CCoinsViewCache(base, false)); // Start with one cache.\n+    stack.push_back(new CCoinsViewCache(&base)); // Start with one cache.\n \n     // Use a limited set of random transaction ids, so we do test overwriting entries.\n     std::vector<uint256> txids;\n@@ -151,7 +151,7 @@ BOOST_AUTO_TEST_CASE(coins_cache_simulation_test)\n                 } else {\n                     removed_all_caches = true;\n                 }\n-                stack.push_back(new CCoinsViewCache(*tip, false));\n+                stack.push_back(new CCoinsViewCache(tip));\n                 if (stack.size() == 4) {\n                     reached_4_caches = true;\n                 }"
      },
      {
        "sha": "5d962ca3c116fd3fbcd7aaf9b8285bcd53c3256d",
        "filename": "src/test/script_P2SH_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c70438dc67547e83953ba0343a071fae304ce65/src/test/script_P2SH_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c70438dc67547e83953ba0343a071fae304ce65/src/test/script_P2SH_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_P2SH_tests.cpp?ref=7c70438dc67547e83953ba0343a071fae304ce65",
        "patch": "@@ -255,7 +255,7 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n {\n     LOCK(cs_main);\n     CCoinsView coinsDummy;\n-    CCoinsViewCache coins(coinsDummy);\n+    CCoinsViewCache coins(&coinsDummy);\n     CBasicKeyStore keystore;\n     CKey key[6];\n     vector<CPubKey> keys;"
      },
      {
        "sha": "04f9c708cb0ac17927ec2859dcba19c10d7c8665",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c70438dc67547e83953ba0343a071fae304ce65/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c70438dc67547e83953ba0343a071fae304ce65/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=7c70438dc67547e83953ba0343a071fae304ce65",
        "patch": "@@ -41,7 +41,7 @@ struct TestingSetup {\n         mapArgs[\"-datadir\"] = pathTemp.string();\n         pblocktree = new CBlockTreeDB(1 << 20, true);\n         pcoinsdbview = new CCoinsViewDB(1 << 23, true);\n-        pcoinsTip = new CCoinsViewCache(*pcoinsdbview);\n+        pcoinsTip = new CCoinsViewCache(pcoinsdbview);\n         InitBlockIndex();\n #ifdef ENABLE_WALLET\n         bool fFirstRun;"
      },
      {
        "sha": "68f3ebf342af970bb5c0a8aaf2402cd292c05fcb",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c70438dc67547e83953ba0343a071fae304ce65/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c70438dc67547e83953ba0343a071fae304ce65/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=7c70438dc67547e83953ba0343a071fae304ce65",
        "patch": "@@ -260,7 +260,7 @@ BOOST_AUTO_TEST_CASE(test_Get)\n {\n     CBasicKeyStore keystore;\n     CCoinsView coinsDummy;\n-    CCoinsViewCache coins(coinsDummy);\n+    CCoinsViewCache coins(&coinsDummy);\n     std::vector<CMutableTransaction> dummyTransactions = SetupDummyInputs(keystore, coins);\n \n     CMutableTransaction t1;\n@@ -295,7 +295,7 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     LOCK(cs_main);\n     CBasicKeyStore keystore;\n     CCoinsView coinsDummy;\n-    CCoinsViewCache coins(coinsDummy);\n+    CCoinsViewCache coins(&coinsDummy);\n     std::vector<CMutableTransaction> dummyTransactions = SetupDummyInputs(keystore, coins);\n \n     CMutableTransaction t;"
      },
      {
        "sha": "bfa8dbb4653020a30c9466205379f85977e1d7ca",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c70438dc67547e83953ba0343a071fae304ce65/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c70438dc67547e83953ba0343a071fae304ce65/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=7c70438dc67547e83953ba0343a071fae304ce65",
        "patch": "@@ -630,7 +630,7 @@ void CTxMemPool::ClearPrioritisation(const uint256 hash)\n }\n \n \n-CCoinsViewMemPool::CCoinsViewMemPool(CCoinsView &baseIn, CTxMemPool &mempoolIn) : CCoinsViewBacked(baseIn), mempool(mempoolIn) { }\n+CCoinsViewMemPool::CCoinsViewMemPool(CCoinsView *baseIn, CTxMemPool &mempoolIn) : CCoinsViewBacked(baseIn), mempool(mempoolIn) { }\n \n bool CCoinsViewMemPool::GetCoins(const uint256 &txid, CCoins &coins) const {\n     // If an entry in the mempool exists, always return that one, as it's guaranteed to never"
      },
      {
        "sha": "9e91e6d48ce93d43e09dec0b71d8c5d5eb980ad6",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c70438dc67547e83953ba0343a071fae304ce65/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c70438dc67547e83953ba0343a071fae304ce65/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=7c70438dc67547e83953ba0343a071fae304ce65",
        "patch": "@@ -144,7 +144,7 @@ class CCoinsViewMemPool : public CCoinsViewBacked\n     CTxMemPool &mempool;\n \n public:\n-    CCoinsViewMemPool(CCoinsView &baseIn, CTxMemPool &mempoolIn);\n+    CCoinsViewMemPool(CCoinsView *baseIn, CTxMemPool &mempoolIn);\n     bool GetCoins(const uint256 &txid, CCoins &coins) const;\n     bool HaveCoins(const uint256 &txid) const;\n };"
      }
    ]
  }
]