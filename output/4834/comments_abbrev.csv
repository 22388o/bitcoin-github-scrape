sipa,2014-09-04T13:04:39Z,"Strange, test_bitcoin works perfectly here - even under valgrind.\n",https://github.com/bitcoin/bitcoin/pull/4834#issuecomment-54471481,54471481,
sipa,2014-09-04T19:10:20Z,"Bug fixed.\n\nLet it be known that\n\n```\nunordered_map::iterator it = mapA.find(x);\nif (it != mapB.end()) {\n```\n\nworks in recent Boost, but not in older Boost... (I assume that in newer ones, end() returns a map-independent constant).\n",https://github.com/bitcoin/bitcoin/pull/4834#issuecomment-54529133,54529133,
sipa,2014-09-17T00:03:51Z,Added a large randomized test for CCoinsViewCache that hopefully triggers all edge cases.\n,https://github.com/bitcoin/bitcoin/pull/4834#issuecomment-55831762,55831762,
sipa,2014-09-22T19:58:38Z,@laanwj Can you have a look at this? Are the tests sufficient?\n,https://github.com/bitcoin/bitcoin/pull/4834#issuecomment-56431811,56431811,
sipa,2014-09-23T23:25:18Z,Replaced the dummy arg with an explicit constructor.\n,https://github.com/bitcoin/bitcoin/pull/4834#issuecomment-56605404,56605404,
sipa,2014-09-24T01:19:55Z,"Nope, that didn't work - the compiler still uses the explicit constructor for assignment (because the type is different). Solved it now by passing a pointer rather than a reference (in a separate commit).\n",https://github.com/bitcoin/bitcoin/pull/4834#issuecomment-56613389,56613389,
BitcoinPullTester,2014-09-24T01:34:13Z,"Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/p4834_7c70438dc67547e83953ba0343a071fae304ce65/ for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-te",https://github.com/bitcoin/bitcoin/pull/4834#issuecomment-56614283,56614283,
laanwj,2014-09-24T10:42:41Z,"Works for me, tested ACK\n",https://github.com/bitcoin/bitcoin/pull/4834#issuecomment-56652851,56652851,
sipa,2014-09-26T18:47:37Z,@gmaxwell @jgarzik Comments?\n,https://github.com/bitcoin/bitcoin/pull/4834#issuecomment-57004196,57004196,
gmaxwell,2014-10-08T08:35:12Z,ACK. (tested a previous version but moving my test hosts to the current version now)\n,https://github.com/bitcoin/bitcoin/pull/4834#issuecomment-58326510,58326510,
Diapolo,2014-09-08T17:41:00Z,"Unrelated question, fDummy looks unused to me (even my compiler sais that ^^). Why is that flag there in the first place?\n",https://github.com/bitcoin/bitcoin/pull/4834#discussion_r17253674,17253674,src/coins.cpp
sipa,2014-09-08T17:42:44Z,"That's the point of a dummy :).\n\nThe reason it's there is to avoid having the compiler think that this is a copy constructor, IIRC.\n",https://github.com/bitcoin/bitcoin/pull/4834#discussion_r17253792,17253792,src/coins.cpp
Diapolo,2014-09-08T17:44:27Z,"Thanks for clarification ^^, is there a comment about that fact or is this common pratcise in C++ anyway?\n",https://github.com/bitcoin/bitcoin/pull/4834#discussion_r17253912,17253912,src/coins.cpp
laanwj,2014-09-23T09:51:02Z,"Wouldn't ""explicit"" be enough to convince the compiler of that?\n",https://github.com/bitcoin/bitcoin/pull/4834#discussion_r17899618,17899618,src/coins.cpp
laanwj,2014-09-23T10:02:03Z,We no longer check the result of Spend() here. Is this on purpose?\n,https://github.com/bitcoin/bitcoin/pull/4834#discussion_r17899969,17899969,src/main.cpp
laanwj,2014-09-23T10:09:42Z,"Do we need a flag/bitfield here to distinguish the cases\n\na) expect an entry to be already there for txid, creating a new one would be a mistake \n\nb) expect to create a new entry for txid, having one there already would be a mistake\n\nc) entry could be already there or be created anew, don't care\n\nIt appears we're slightly weakening the integrity checks in that regard.\n",https://github.com/bitcoin/bitcoin/pull/4834#discussion_r17900205,17900205,src/coins.cpp
laanwj,2014-09-23T10:19:16Z,"We could add `assert(!hasModifier);` in the CCoinsViewCache destructor, to assert that the modifier never outlives the cache.\n",https://github.com/bitcoin/bitcoin/pull/4834#discussion_r17900510,17900510,src/coins.h
laanwj,2014-09-23T10:35:26Z,"Does this mean that the test can randomly fail? (ie, if due to randomness it does not hit a branch?)\n",https://github.com/bitcoin/bitcoin/pull/4834#discussion_r17901060,17901060,src/test/coins_tests.cpp
sipa,2014-09-23T20:12:34Z,Fixed.\n,https://github.com/bitcoin/bitcoin/pull/4834#discussion_r17935751,17935751,src/main.cpp
sipa,2014-09-23T21:58:00Z,Done.\n,https://github.com/bitcoin/bitcoin/pull/4834#discussion_r17942381,17942381,src/coins.h
sipa,2014-09-23T21:59:18Z,"Given that we're doing 40000 iterations of it, that should be exceedingly unlikely (plus the random numbers are deterministic, so it would only break after actual code changes).\n",https://github.com/bitcoin/bitcoin/pull/4834#discussion_r17942448,17942448,src/test/coins_tests.cpp
sipa,2014-09-23T23:38:43Z,"This really complicates things. We're in many cases already treating no-entry as empty-CCoins, and have had problems with incorrectly treating differences between them (on a reorg we may replace added entries with empties, for example).\n\nPerhaps we already have problems in this space; I'm more in favor of an interface that explicitly treats them identically for this reason.\n\nAre there any use ",https://github.com/bitcoin/bitcoin/pull/4834#discussion_r17946444,17946444,src/coins.cpp
sipa,2014-09-24T01:51:10Z,"Just a 1000 iterations is enough to trigger all branches, by the way.\n",https://github.com/bitcoin/bitcoin/pull/4834#discussion_r17950444,17950444,src/test/coins_tests.cpp
laanwj,2014-09-24T09:13:23Z,"OK - good idea to make it determinisic, so at least in the case that it fails it will fail every time.\n",https://github.com/bitcoin/bitcoin/pull/4834#discussion_r17961163,17961163,src/test/coins_tests.cpp
rebroad,2014-12-10T02:22:00Z,How useful is this extra debug info? Can it be made optional perhaps?\n,https://github.com/bitcoin/bitcoin/pull/4834#discussion_r21580505,21580505,src/main.cpp
