[
  {
    "sha": "86d5634941734cbde54e47fc6288f21104acf26e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NmQ1NjM0OTQxNzM0Y2JkZTU0ZTQ3ZmM2Mjg4ZjIxMTA0YWNmMjZl",
    "commit": {
      "author": {
        "name": "sje397",
        "email": "sje397@gmail.com",
        "date": "2012-02-17T14:34:53Z"
      },
      "committer": {
        "name": "sje397",
        "email": "sje397@gmail.com",
        "date": "2012-04-10T14:07:32Z"
      },
      "message": "Toggle main window hide on tray icon click\n\n- converted openBictoinAction to toggleHideAction\n- put GUIUtil functions into a namespace instead of a class\n- put window-related functions together in optionsdialog\n\nReasoning:\n- toggle is more typical behaviour\n- it's more functional\n- better UX\n\nThe typical issue with toggling visibility is that when a window\nis obscured by other windows but in the 'shown' state, hiding it\nisn't what you want. I've added an 'isObscured' function to GUIUtil\nthat checks several pixels in the window to see if they are visible\non the desktop so that an obscured but shown window can be raised.\n\nConflicts:\n\n\tsrc/qt/guiutil.cpp\n\tsrc/qt/guiutil.h",
      "tree": {
        "sha": "92d639cc51a3d725e66d09a78cbbcbf2e69e78cb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/92d639cc51a3d725e66d09a78cbbcbf2e69e78cb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/86d5634941734cbde54e47fc6288f21104acf26e",
      "comment_count": 1,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86d5634941734cbde54e47fc6288f21104acf26e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/86d5634941734cbde54e47fc6288f21104acf26e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86d5634941734cbde54e47fc6288f21104acf26e/comments",
    "author": {
      "login": "sje397",
      "id": 214252,
      "node_id": "MDQ6VXNlcjIxNDI1Mg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/214252?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sje397",
      "html_url": "https://github.com/sje397",
      "followers_url": "https://api.github.com/users/sje397/followers",
      "following_url": "https://api.github.com/users/sje397/following{/other_user}",
      "gists_url": "https://api.github.com/users/sje397/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sje397/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sje397/subscriptions",
      "organizations_url": "https://api.github.com/users/sje397/orgs",
      "repos_url": "https://api.github.com/users/sje397/repos",
      "events_url": "https://api.github.com/users/sje397/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sje397/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sje397",
      "id": 214252,
      "node_id": "MDQ6VXNlcjIxNDI1Mg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/214252?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sje397",
      "html_url": "https://github.com/sje397",
      "followers_url": "https://api.github.com/users/sje397/followers",
      "following_url": "https://api.github.com/users/sje397/following{/other_user}",
      "gists_url": "https://api.github.com/users/sje397/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sje397/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sje397/subscriptions",
      "organizations_url": "https://api.github.com/users/sje397/orgs",
      "repos_url": "https://api.github.com/users/sje397/repos",
      "events_url": "https://api.github.com/users/sje397/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sje397/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "962e2fcdb6aa43c9998b2be2ff96a679ff9db660",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/962e2fcdb6aa43c9998b2be2ff96a679ff9db660",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/962e2fcdb6aa43c9998b2be2ff96a679ff9db660"
      }
    ],
    "stats": {
      "total": 132,
      "additions": 89,
      "deletions": 43
    },
    "files": [
      {
        "sha": "9c1e05d0c16c24696f032ed6f812d97d9c55049d",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 5,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86d5634941734cbde54e47fc6288f21104acf26e/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86d5634941734cbde54e47fc6288f21104acf26e/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=86d5634941734cbde54e47fc6288f21104acf26e",
        "patch": "@@ -23,6 +23,7 @@\n #include \"guiconstants.h\"\n #include \"askpassphrasedialog.h\"\n #include \"notificator.h\"\n+#include \"guiutil.h\"\n \n #ifdef Q_WS_MAC\n #include \"macdockiconhandler.h\"\n@@ -239,8 +240,8 @@ void BitcoinGUI::createActions()\n     optionsAction = new QAction(QIcon(\":/icons/options\"), tr(\"&Options...\"), this);\n     optionsAction->setToolTip(tr(\"Modify configuration options for bitcoin\"));\n     optionsAction->setMenuRole(QAction::PreferencesRole);\n-    openBitcoinAction = new QAction(QIcon(\":/icons/bitcoin\"), tr(\"Open &Bitcoin\"), this);\n-    openBitcoinAction->setToolTip(tr(\"Show the Bitcoin window\"));\n+    toggleHideAction = new QAction(QIcon(\":/icons/bitcoin\"), tr(\"Show/Hide &Bitcoin\"), this);\n+    toggleHideAction->setToolTip(tr(\"Show or Hide the Bitcoin window\"));\n     exportAction = new QAction(QIcon(\":/icons/export\"), tr(\"&Export...\"), this);\n     exportAction->setToolTip(tr(\"Export the data in the current tab to a file\"));\n     encryptWalletAction = new QAction(QIcon(\":/icons/lock_closed\"), tr(\"&Encrypt Wallet\"), this);\n@@ -255,7 +256,7 @@ void BitcoinGUI::createActions()\n     connect(optionsAction, SIGNAL(triggered()), this, SLOT(optionsClicked()));\n     connect(aboutAction, SIGNAL(triggered()), this, SLOT(aboutClicked()));\n     connect(aboutQtAction, SIGNAL(triggered()), qApp, SLOT(aboutQt()));\n-    connect(openBitcoinAction, SIGNAL(triggered()), this, SLOT(showNormalIfMinimized()));\n+    connect(toggleHideAction, SIGNAL(triggered()), this, SLOT(toggleHidden()));\n     connect(encryptWalletAction, SIGNAL(triggered(bool)), this, SLOT(encryptWallet(bool)));\n     connect(backupWalletAction, SIGNAL(triggered()), this, SLOT(backupWallet()));\n     connect(changePassphraseAction, SIGNAL(triggered()), this, SLOT(changePassphrase()));\n@@ -392,7 +393,7 @@ void BitcoinGUI::createTrayIcon()\n #endif\n \n     // Configuration of the tray icon (or dock icon) icon menu\n-    trayIconMenu->addAction(openBitcoinAction);\n+    trayIconMenu->addAction(toggleHideAction);\n     trayIconMenu->addSeparator();\n     trayIconMenu->addAction(messageAction);\n #ifndef FIRST_CLASS_MESSAGING\n@@ -416,11 +417,33 @@ void BitcoinGUI::trayIconActivated(QSystemTrayIcon::ActivationReason reason)\n     if(reason == QSystemTrayIcon::Trigger)\n     {\n         // Click on system tray icon triggers \"open bitcoin\"\n-        openBitcoinAction->trigger();\n+        toggleHideAction->trigger();\n     }\n }\n #endif\n \n+void BitcoinGUI::toggleHidden()\n+{\n+    // activateWindow() (sometimes) helps with keyboard focus on Windows\n+    if(isHidden())\n+    {\n+        show();\n+        activateWindow();\n+    }\n+    else if(isMinimized())\n+    {\n+        showNormal();\n+        activateWindow();\n+    }\n+    else if(GUIUtil::isObscured(this))\n+    {\n+        raise();\n+        activateWindow();\n+    }\n+    else\n+        hide();\n+}\n+\n void BitcoinGUI::optionsClicked()\n {\n     if(!clientModel || !clientModel->getOptionsModel())"
      },
      {
        "sha": "2cce8d3459d007c375d8bab3a071af1cd4dba33c",
        "filename": "src/qt/bitcoingui.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86d5634941734cbde54e47fc6288f21104acf26e/src/qt/bitcoingui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86d5634941734cbde54e47fc6288f21104acf26e/src/qt/bitcoingui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.h?ref=86d5634941734cbde54e47fc6288f21104acf26e",
        "patch": "@@ -81,7 +81,7 @@ class BitcoinGUI : public QMainWindow\n     QAction *aboutAction;\n     QAction *receiveCoinsAction;\n     QAction *optionsAction;\n-    QAction *openBitcoinAction;\n+    QAction *toggleHideAction;\n     QAction *exportAction;\n     QAction *encryptWalletAction;\n     QAction *backupWalletAction;\n@@ -166,6 +166,8 @@ private slots:\n \n     /** Show window if hidden, unminimize when minimized */\n     void showNormalIfMinimized();\n+    /** Hide window if visible, show if hidden */\n+    void toggleHidden();\n };\n \n #endif"
      },
      {
        "sha": "cb2473240e0d53ee234448bcce4eb9d0ee0e8ba8",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 14,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86d5634941734cbde54e47fc6288f21104acf26e/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86d5634941734cbde54e47fc6288f21104acf26e/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=86d5634941734cbde54e47fc6288f21104acf26e",
        "patch": "@@ -19,31 +19,33 @@\n #include <QDesktopServices>\n #include <QThread>\n \n-QString GUIUtil::dateTimeStr(qint64 nTime)\n+namespace GUIUtil {\n+\n+QString dateTimeStr(const QDateTime &date)\n {\n-    return dateTimeStr(QDateTime::fromTime_t((qint32)nTime));\n+    return date.date().toString(Qt::SystemLocaleShortDate) + QString(\" \") + date.toString(\"hh:mm\");\n }\n \n-QString GUIUtil::dateTimeStr(const QDateTime &date)\n+QString dateTimeStr(qint64 nTime)\n {\n-    return date.date().toString(Qt::SystemLocaleShortDate) + QString(\" \") + date.toString(\"hh:mm\");\n+    return dateTimeStr(QDateTime::fromTime_t((qint32)nTime));\n }\n \n-QFont GUIUtil::bitcoinAddressFont()\n+QFont bitcoinAddressFont()\n {\n     QFont font(\"Monospace\");\n     font.setStyleHint(QFont::TypeWriter);\n     return font;\n }\n \n-void GUIUtil::setupAddressWidget(QLineEdit *widget, QWidget *parent)\n+void setupAddressWidget(QLineEdit *widget, QWidget *parent)\n {\n     widget->setMaxLength(BitcoinAddressValidator::MaxAddressLength);\n     widget->setValidator(new BitcoinAddressValidator(parent));\n     widget->setFont(bitcoinAddressFont());\n }\n \n-void GUIUtil::setupAmountWidget(QLineEdit *widget, QWidget *parent)\n+void setupAmountWidget(QLineEdit *widget, QWidget *parent)\n {\n     QDoubleValidator *amountValidator = new QDoubleValidator(parent);\n     amountValidator->setDecimals(8);\n@@ -52,7 +54,7 @@ void GUIUtil::setupAmountWidget(QLineEdit *widget, QWidget *parent)\n     widget->setAlignment(Qt::AlignRight|Qt::AlignVCenter);\n }\n \n-bool GUIUtil::parseBitcoinURI(const QUrl &uri, SendCoinsRecipient *out)\n+bool parseBitcoinURI(const QUrl &uri, SendCoinsRecipient *out)\n {\n     if(uri.scheme() != QString(\"bitcoin\"))\n         return false;\n@@ -97,7 +99,7 @@ bool GUIUtil::parseBitcoinURI(const QUrl &uri, SendCoinsRecipient *out)\n     return true;\n }\n \n-bool GUIUtil::parseBitcoinURI(QString uri, SendCoinsRecipient *out)\n+bool parseBitcoinURI(QString uri, SendCoinsRecipient *out)\n {\n     // Convert bitcoin:// to bitcoin:\n     //\n@@ -111,7 +113,7 @@ bool GUIUtil::parseBitcoinURI(QString uri, SendCoinsRecipient *out)\n     return parseBitcoinURI(uriInstance, out);\n }\n \n-QString GUIUtil::HtmlEscape(const QString& str, bool fMultiLine)\n+QString HtmlEscape(const QString& str, bool fMultiLine)\n {\n     QString escaped = Qt::escape(str);\n     if(fMultiLine)\n@@ -121,12 +123,12 @@ QString GUIUtil::HtmlEscape(const QString& str, bool fMultiLine)\n     return escaped;\n }\n \n-QString GUIUtil::HtmlEscape(const std::string& str, bool fMultiLine)\n+QString HtmlEscape(const std::string& str, bool fMultiLine)\n {\n     return HtmlEscape(QString::fromStdString(str), fMultiLine);\n }\n \n-void GUIUtil::copyEntryData(QAbstractItemView *view, int column, int role)\n+void copyEntryData(QAbstractItemView *view, int column, int role)\n {\n     if(!view || !view->selectionModel())\n         return;\n@@ -139,7 +141,7 @@ void GUIUtil::copyEntryData(QAbstractItemView *view, int column, int role)\n     }\n }\n \n-QString GUIUtil::getSaveFileName(QWidget *parent, const QString &caption,\n+QString getSaveFileName(QWidget *parent, const QString &caption,\n                                  const QString &dir,\n                                  const QString &filter,\n                                  QString *selectedSuffixOut)\n@@ -185,7 +187,7 @@ QString GUIUtil::getSaveFileName(QWidget *parent, const QString &caption,\n     return result;\n }\n \n-Qt::ConnectionType GUIUtil::blockingGUIThreadConnection()\n+Qt::ConnectionType blockingGUIThreadConnection()\n {\n     if(QThread::currentThread() != QCoreApplication::instance()->thread())\n     {\n@@ -196,3 +198,23 @@ Qt::ConnectionType GUIUtil::blockingGUIThreadConnection()\n         return Qt::DirectConnection;\n     }\n }\n+\n+bool checkPoint(const QPoint &p, const QWidget *w)\n+{\n+  QWidget *atW = qApp->widgetAt(w->mapToGlobal(p));\n+  if(!atW) return false;\n+  return atW->topLevelWidget() == w;\n+}\n+\n+bool isObscured(QWidget *w)\n+{\n+\n+  return !(checkPoint(QPoint(0, 0), w)\n+           && checkPoint(QPoint(w->width() - 1, 0), w)\n+           && checkPoint(QPoint(0, w->height() - 1), w)\n+           && checkPoint(QPoint(w->width() - 1, w->height() - 1), w)\n+           && checkPoint(QPoint(w->width()/2, w->height()/2), w));\n+}\n+\n+} // namespace GUIUtil\n+"
      },
      {
        "sha": "ea1a4795c034ab5ace1640e744daf67e72a6ab9b",
        "filename": "src/qt/guiutil.h",
        "status": "modified",
        "additions": 18,
        "deletions": 17,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86d5634941734cbde54e47fc6288f21104acf26e/src/qt/guiutil.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86d5634941734cbde54e47fc6288f21104acf26e/src/qt/guiutil.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.h?ref=86d5634941734cbde54e47fc6288f21104acf26e",
        "patch": "@@ -13,38 +13,37 @@ class QAbstractItemView;\n QT_END_NAMESPACE\n class SendCoinsRecipient;\n \n-/** Static utility functions used by the Bitcoin Qt UI.\n+/** Utility functions used by the Bitcoin Qt UI.\n  */\n-class GUIUtil\n+namespace GUIUtil\n {\n-public:\n     // Create human-readable string from date\n-    static QString dateTimeStr(qint64 nTime);\n-    static QString dateTimeStr(const QDateTime &datetime);\n+    QString dateTimeStr(const QDateTime &datetime);\n+    QString dateTimeStr(qint64 nTime);\n \n     // Render bitcoin addresses in monospace font\n-    static QFont bitcoinAddressFont();\n+    QFont bitcoinAddressFont();\n \n     // Set up widgets for address and amounts\n-    static void setupAddressWidget(QLineEdit *widget, QWidget *parent);\n-    static void setupAmountWidget(QLineEdit *widget, QWidget *parent);\n+    void setupAddressWidget(QLineEdit *widget, QWidget *parent);\n+    void setupAmountWidget(QLineEdit *widget, QWidget *parent);\n \n     // Parse \"bitcoin:\" URI into recipient object, return true on succesful parsing\n     // See Bitcoin URI definition discussion here: https://bitcointalk.org/index.php?topic=33490.0\n-    static bool parseBitcoinURI(const QUrl &, SendCoinsRecipient *out);\n-    static bool parseBitcoinURI(QString uri, SendCoinsRecipient *out);\n+    bool parseBitcoinURI(const QUrl &uri, SendCoinsRecipient *out);\n+    bool parseBitcoinURI(QString uri, SendCoinsRecipient *out);\n \n     // HTML escaping for rich text controls\n-    static QString HtmlEscape(const QString& str, bool fMultiLine=false);\n-    static QString HtmlEscape(const std::string& str, bool fMultiLine=false);\n+    QString HtmlEscape(const QString& str, bool fMultiLine=false);\n+    QString HtmlEscape(const std::string& str, bool fMultiLine=false);\n \n     /** Copy a field of the currently selected entry of a view to the clipboard. Does nothing if nothing\n         is selected.\n        @param[in] column  Data column to extract from the model\n        @param[in] role    Data role to extract from the model\n        @see  TransactionView::copyLabel, TransactionView::copyAmount, TransactionView::copyAddress\n      */\n-    static void copyEntryData(QAbstractItemView *view, int column, int role=Qt::EditRole);\n+    void copyEntryData(QAbstractItemView *view, int column, int role=Qt::EditRole);\n \n     /** Get save file name, mimics QFileDialog::getSaveFileName, except that it appends a default suffix\n         when no suffix is provided by the user.\n@@ -56,18 +55,20 @@ class GUIUtil\n       @param[out] selectedSuffixOut  Pointer to return the suffix (file type) that was selected (or 0).\n                   Can be useful when choosing the save file format based on suffix.\n      */\n-    static QString getSaveFileName(QWidget *parent=0, const QString &caption=QString(),\n+    QString getSaveFileName(QWidget *parent=0, const QString &caption=QString(),\n                                    const QString &dir=QString(), const QString &filter=QString(),\n                                    QString *selectedSuffixOut=0);\n \n-\n     /** Get connection type to call object slot in GUI thread with invokeMethod. The call will be blocking.\n \n        @returns If called from the GUI thread, return a Qt::DirectConnection.\n                 If called from another thread, return a Qt::BlockingQueuedConnection.\n     */\n-    static Qt::ConnectionType blockingGUIThreadConnection();\n+    Qt::ConnectionType blockingGUIThreadConnection();\n+\n+    // Determine whether a widget is hidden behind other windows\n+    bool isObscured(QWidget *w);\n \n-};\n+} // namespace GUIUtil\n \n #endif // GUIUTIL_H"
      },
      {
        "sha": "34d303233cad048fdff6c4424473437e5bcba74e",
        "filename": "src/qt/optionsdialog.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 6,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86d5634941734cbde54e47fc6288f21104acf26e/src/qt/optionsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86d5634941734cbde54e47fc6288f21104acf26e/src/qt/optionsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsdialog.cpp?ref=86d5634941734cbde54e47fc6288f21104acf26e",
        "patch": "@@ -175,18 +175,16 @@ MainOptionsPage::MainOptionsPage(QWidget *parent):\n     minimize_to_tray = new QCheckBox(tr(\"&Minimize to the tray instead of the taskbar\"));\n     minimize_to_tray->setToolTip(tr(\"Show only a tray icon after minimizing the window\"));\n     layout->addWidget(minimize_to_tray);\n-#endif\n-\n-    map_port_upnp = new QCheckBox(tr(\"Map port using &UPnP\"));\n-    map_port_upnp->setToolTip(tr(\"Automatically open the Bitcoin client port on the router. This only works when your router supports UPnP and it is enabled.\"));\n-    layout->addWidget(map_port_upnp);\n \n-#ifndef Q_WS_MAC\n     minimize_on_close = new QCheckBox(tr(\"M&inimize on close\"));\n     minimize_on_close->setToolTip(tr(\"Minimize instead of exit the application when the window is closed. When this option is enabled, the application will be closed only after selecting Quit in the menu.\"));\n     layout->addWidget(minimize_on_close);\n #endif\n \n+    map_port_upnp = new QCheckBox(tr(\"Map port using &UPnP\"));\n+    map_port_upnp->setToolTip(tr(\"Automatically open the Bitcoin client port on the router. This only works when your router supports UPnP and it is enabled.\"));\n+    layout->addWidget(map_port_upnp);\n+\n     connect_socks4 = new QCheckBox(tr(\"&Connect through SOCKS4 proxy:\"));\n     connect_socks4->setToolTip(tr(\"Connect to the Bitcon network through a SOCKS4 proxy (e.g. when connecting through Tor)\"));\n     layout->addWidget(connect_socks4);"
      }
    ]
  }
]