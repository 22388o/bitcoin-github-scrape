[
  {
    "sha": "3fb81a8480582d96e8c87ef1b963a11c55064d57",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZmI4MWE4NDgwNTgyZDk2ZThjODdlZjFiOTYzYTExYzU1MDY0ZDU3",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-06-06T19:15:28Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-06-06T19:29:16Z"
      },
      "message": "Use list initialization (C++11) for maps/vectors instead of boost::assign::map_list_of/list_of",
      "tree": {
        "sha": "281172cf926a2384dbada8832f6e55fe995b8631",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/281172cf926a2384dbada8832f6e55fe995b8631"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3fb81a8480582d96e8c87ef1b963a11c55064d57",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3fb81a8480582d96e8c87ef1b963a11c55064d57",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3fb81a8480582d96e8c87ef1b963a11c55064d57",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3fb81a8480582d96e8c87ef1b963a11c55064d57/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1b708f2cf3e6e6a17c5b6dbf2909a2ed2e35755a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b708f2cf3e6e6a17c5b6dbf2909a2ed2e35755a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1b708f2cf3e6e6a17c5b6dbf2909a2ed2e35755a"
      }
    ],
    "stats": {
      "total": 232,
      "additions": 108,
      "deletions": 124
    },
    "files": [
      {
        "sha": "b9e6822f8dd205bcc61c9ca0aa94b290d5881675",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fb81a8480582d96e8c87ef1b963a11c55064d57/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fb81a8480582d96e8c87ef1b963a11c55064d57/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=3fb81a8480582d96e8c87ef1b963a11c55064d57",
        "patch": "@@ -24,7 +24,6 @@\n #include <stdio.h>\n \n #include <boost/algorithm/string.hpp>\n-#include <boost/assign/list_of.hpp>\n \n static bool fCreateBlank;\n static std::map<std::string,UniValue> registers;\n@@ -546,7 +545,11 @@ static void MutateTxSign(CMutableTransaction& tx, const std::string& flagStr)\n             if (!prevOut.isObject())\n                 throw std::runtime_error(\"expected prevtxs internal object\");\n \n-            std::map<std::string,UniValue::VType> types = boost::assign::map_list_of(\"txid\", UniValue::VSTR)(\"vout\",UniValue::VNUM)(\"scriptPubKey\",UniValue::VSTR);\n+            std::map<std::string, UniValue::VType> types = {\n+                {\"txid\", UniValue::VSTR},\n+                {\"vout\", UniValue::VNUM},\n+                {\"scriptPubKey\", UniValue::VSTR},\n+            };\n             if (!prevOut.checkObject(types))\n                 throw std::runtime_error(\"prevtxs internal object typecheck fail\");\n "
      },
      {
        "sha": "3b42c5fb23e22c41574710190e5fa28b83fbd92f",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 27,
        "changes": 55,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fb81a8480582d96e8c87ef1b963a11c55064d57/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fb81a8480582d96e8c87ef1b963a11c55064d57/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=3fb81a8480582d96e8c87ef1b963a11c55064d57",
        "patch": "@@ -12,8 +12,6 @@\n \n #include <assert.h>\n \n-#include <boost/assign/list_of.hpp>\n-\n #include \"chainparamsseeds.h\"\n \n static CBlock CreateGenesisBlock(const char* pszTimestamp, const CScript& genesisOutputScript, uint32_t nTime, uint32_t nNonce, uint32_t nBits, int32_t nVersion, const CAmount& genesisReward)\n@@ -136,8 +134,8 @@ class CMainParams : public CChainParams {\n         base58Prefixes[PUBKEY_ADDRESS] = std::vector<unsigned char>(1,0);\n         base58Prefixes[SCRIPT_ADDRESS] = std::vector<unsigned char>(1,5);\n         base58Prefixes[SECRET_KEY] =     std::vector<unsigned char>(1,128);\n-        base58Prefixes[EXT_PUBLIC_KEY] = boost::assign::list_of(0x04)(0x88)(0xB2)(0x1E).convert_to_container<std::vector<unsigned char> >();\n-        base58Prefixes[EXT_SECRET_KEY] = boost::assign::list_of(0x04)(0x88)(0xAD)(0xE4).convert_to_container<std::vector<unsigned char> >();\n+        base58Prefixes[EXT_PUBLIC_KEY] = {0x04, 0x88, 0xB2, 0x1E};\n+        base58Prefixes[EXT_SECRET_KEY] = {0x04, 0x88, 0xAD, 0xE4};\n \n         vFixedSeeds = std::vector<SeedSpec6>(pnSeed6_main, pnSeed6_main + ARRAYLEN(pnSeed6_main));\n \n@@ -146,20 +144,21 @@ class CMainParams : public CChainParams {\n         fMineBlocksOnDemand = false;\n \n         checkpointData = (CCheckpointData) {\n-            boost::assign::map_list_of\n-            ( 11111, uint256S(\"0x0000000069e244f73d78e8fd29ba2fd2ed618bd6fa2ee92559f542fdb26e7c1d\"))\n-            ( 33333, uint256S(\"0x000000002dd5588a74784eaa7ab0507a18ad16a236e7b1ce69f00d7ddfb5d0a6\"))\n-            ( 74000, uint256S(\"0x0000000000573993a3c9e41ce34471c079dcf5f52a0e824a81e7f953b8661a20\"))\n-            (105000, uint256S(\"0x00000000000291ce28027faea320c8d2b054b2e0fe44a773f3eefb151d6bdc97\"))\n-            (134444, uint256S(\"0x00000000000005b12ffd4cd315cd34ffd4a594f430ac814c91184a0d42d2b0fe\"))\n-            (168000, uint256S(\"0x000000000000099e61ea72015e79632f216fe6cb33d7899acb35b75c8303b763\"))\n-            (193000, uint256S(\"0x000000000000059f452a5f7340de6682a977387c17010ff6e6c3bd83ca8b1317\"))\n-            (210000, uint256S(\"0x000000000000048b95347e83192f69cf0366076336c639f9b7228e9ba171342e\"))\n-            (216116, uint256S(\"0x00000000000001b4f4b433e81ee46494af945cf96014816a4e2370f11b23df4e\"))\n-            (225430, uint256S(\"0x00000000000001c108384350f74090433e7fcf79a606b8e797f065b130575932\"))\n-            (250000, uint256S(\"0x000000000000003887df1f29024b06fc2200b55f8af8f35453d7be294df2d214\"))\n-            (279000, uint256S(\"0x0000000000000001ae8c72a0b0c301f67e3afca10e819efa9041e458e9bd7e40\"))\n-            (295000, uint256S(\"0x00000000000000004d9b4ef50f0f9d686fd69db2e03af35a100370c64632a983\"))\n+            {\n+                { 11111, uint256S(\"0x0000000069e244f73d78e8fd29ba2fd2ed618bd6fa2ee92559f542fdb26e7c1d\")},\n+                { 33333, uint256S(\"0x000000002dd5588a74784eaa7ab0507a18ad16a236e7b1ce69f00d7ddfb5d0a6\")},\n+                { 74000, uint256S(\"0x0000000000573993a3c9e41ce34471c079dcf5f52a0e824a81e7f953b8661a20\")},\n+                {105000, uint256S(\"0x00000000000291ce28027faea320c8d2b054b2e0fe44a773f3eefb151d6bdc97\")},\n+                {134444, uint256S(\"0x00000000000005b12ffd4cd315cd34ffd4a594f430ac814c91184a0d42d2b0fe\")},\n+                {168000, uint256S(\"0x000000000000099e61ea72015e79632f216fe6cb33d7899acb35b75c8303b763\")},\n+                {193000, uint256S(\"0x000000000000059f452a5f7340de6682a977387c17010ff6e6c3bd83ca8b1317\")},\n+                {210000, uint256S(\"0x000000000000048b95347e83192f69cf0366076336c639f9b7228e9ba171342e\")},\n+                {216116, uint256S(\"0x00000000000001b4f4b433e81ee46494af945cf96014816a4e2370f11b23df4e\")},\n+                {225430, uint256S(\"0x00000000000001c108384350f74090433e7fcf79a606b8e797f065b130575932\")},\n+                {250000, uint256S(\"0x000000000000003887df1f29024b06fc2200b55f8af8f35453d7be294df2d214\")},\n+                {279000, uint256S(\"0x0000000000000001ae8c72a0b0c301f67e3afca10e819efa9041e458e9bd7e40\")},\n+                {295000, uint256S(\"0x00000000000000004d9b4ef50f0f9d686fd69db2e03af35a100370c64632a983\")},\n+            }\n         };\n \n         chainTxData = ChainTxData{\n@@ -234,8 +233,8 @@ class CTestNetParams : public CChainParams {\n         base58Prefixes[PUBKEY_ADDRESS] = std::vector<unsigned char>(1,111);\n         base58Prefixes[SCRIPT_ADDRESS] = std::vector<unsigned char>(1,196);\n         base58Prefixes[SECRET_KEY] =     std::vector<unsigned char>(1,239);\n-        base58Prefixes[EXT_PUBLIC_KEY] = boost::assign::list_of(0x04)(0x35)(0x87)(0xCF).convert_to_container<std::vector<unsigned char> >();\n-        base58Prefixes[EXT_SECRET_KEY] = boost::assign::list_of(0x04)(0x35)(0x83)(0x94).convert_to_container<std::vector<unsigned char> >();\n+        base58Prefixes[EXT_PUBLIC_KEY] = {0x04, 0x35, 0x87, 0xCF};\n+        base58Prefixes[EXT_SECRET_KEY] = {0x04, 0x35, 0x83, 0x94};\n \n         vFixedSeeds = std::vector<SeedSpec6>(pnSeed6_test, pnSeed6_test + ARRAYLEN(pnSeed6_test));\n \n@@ -245,8 +244,9 @@ class CTestNetParams : public CChainParams {\n \n \n         checkpointData = (CCheckpointData) {\n-            boost::assign::map_list_of\n-            ( 546, uint256S(\"000000002a936ca763904c3c35fce2f3556c559c0214345d31b1bcebf76acb70\")),\n+            {\n+                {546, uint256S(\"000000002a936ca763904c3c35fce2f3556c559c0214345d31b1bcebf76acb70\")},\n+            }\n         };\n \n         chainTxData = ChainTxData{\n@@ -313,9 +313,10 @@ class CRegTestParams : public CChainParams {\n         fRequireStandard = false;\n         fMineBlocksOnDemand = true;\n \n-        checkpointData = (CCheckpointData){\n-            boost::assign::map_list_of\n-            ( 0, uint256S(\"0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206\"))\n+        checkpointData = (CCheckpointData) {\n+            {\n+                {0, uint256S(\"0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206\")},\n+            }\n         };\n \n         chainTxData = ChainTxData{\n@@ -327,8 +328,8 @@ class CRegTestParams : public CChainParams {\n         base58Prefixes[PUBKEY_ADDRESS] = std::vector<unsigned char>(1,111);\n         base58Prefixes[SCRIPT_ADDRESS] = std::vector<unsigned char>(1,196);\n         base58Prefixes[SECRET_KEY] =     std::vector<unsigned char>(1,239);\n-        base58Prefixes[EXT_PUBLIC_KEY] = boost::assign::list_of(0x04)(0x35)(0x87)(0xCF).convert_to_container<std::vector<unsigned char> >();\n-        base58Prefixes[EXT_SECRET_KEY] = boost::assign::list_of(0x04)(0x35)(0x83)(0x94).convert_to_container<std::vector<unsigned char> >();\n+        base58Prefixes[EXT_PUBLIC_KEY] = {0x04, 0x35, 0x87, 0xCF};\n+        base58Prefixes[EXT_SECRET_KEY] = {0x04, 0x35, 0x83, 0x94};\n     }\n };\n "
      },
      {
        "sha": "bb716aa26bd139120caf32a50d1a4e3f7bf8ebd5",
        "filename": "src/core_read.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fb81a8480582d96e8c87ef1b963a11c55064d57/src/core_read.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fb81a8480582d96e8c87ef1b963a11c55064d57/src/core_read.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_read.cpp?ref=3fb81a8480582d96e8c87ef1b963a11c55064d57",
        "patch": "@@ -18,7 +18,6 @@\n #include <boost/algorithm/string/predicate.hpp>\n #include <boost/algorithm/string/replace.hpp>\n #include <boost/algorithm/string/split.hpp>\n-#include <boost/assign/list_of.hpp>\n \n CScript ParseScript(const std::string& s)\n {"
      },
      {
        "sha": "178519daf11faec4b3b69704422cecb05f4bfdba",
        "filename": "src/core_write.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 10,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fb81a8480582d96e8c87ef1b963a11c55064d57/src/core_write.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fb81a8480582d96e8c87ef1b963a11c55064d57/src/core_write.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_write.cpp?ref=3fb81a8480582d96e8c87ef1b963a11c55064d57",
        "patch": "@@ -15,7 +15,6 @@\n #include \"utilmoneystr.h\"\n #include \"utilstrencodings.h\"\n \n-#include <boost/assign/list_of.hpp>\n #include <boost/foreach.hpp>\n \n std::string FormatScript(const CScript& script)\n@@ -53,15 +52,14 @@ std::string FormatScript(const CScript& script)\n     return ret.substr(0, ret.size() - 1);\n }\n \n-const std::map<unsigned char, std::string> mapSigHashTypes =\n-    boost::assign::map_list_of\n-    (static_cast<unsigned char>(SIGHASH_ALL), std::string(\"ALL\"))\n-    (static_cast<unsigned char>(SIGHASH_ALL|SIGHASH_ANYONECANPAY), std::string(\"ALL|ANYONECANPAY\"))\n-    (static_cast<unsigned char>(SIGHASH_NONE), std::string(\"NONE\"))\n-    (static_cast<unsigned char>(SIGHASH_NONE|SIGHASH_ANYONECANPAY), std::string(\"NONE|ANYONECANPAY\"))\n-    (static_cast<unsigned char>(SIGHASH_SINGLE), std::string(\"SINGLE\"))\n-    (static_cast<unsigned char>(SIGHASH_SINGLE|SIGHASH_ANYONECANPAY), std::string(\"SINGLE|ANYONECANPAY\"))\n-    ;\n+const std::map<unsigned char, std::string> mapSigHashTypes = {\n+    {static_cast<unsigned char>(SIGHASH_ALL), std::string(\"ALL\")},\n+    {static_cast<unsigned char>(SIGHASH_ALL|SIGHASH_ANYONECANPAY), std::string(\"ALL|ANYONECANPAY\")},\n+    {static_cast<unsigned char>(SIGHASH_NONE), std::string(\"NONE\")},\n+    {static_cast<unsigned char>(SIGHASH_NONE|SIGHASH_ANYONECANPAY), std::string(\"NONE|ANYONECANPAY\")},\n+    {static_cast<unsigned char>(SIGHASH_SINGLE), std::string(\"SINGLE\")},\n+    {static_cast<unsigned char>(SIGHASH_SINGLE|SIGHASH_ANYONECANPAY), std::string(\"SINGLE|ANYONECANPAY\")},\n+};\n \n /**\n  * Create the assembly string representation of a CScript object."
      },
      {
        "sha": "1f14abf2c99ac5cfac1837ca6297ab71dcd57894",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fb81a8480582d96e8c87ef1b963a11c55064d57/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fb81a8480582d96e8c87ef1b963a11c55064d57/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=3fb81a8480582d96e8c87ef1b963a11c55064d57",
        "patch": "@@ -20,8 +20,6 @@\n #include \"validation.h\" // For mempool\n #include \"wallet/wallet.h\"\n \n-#include <boost/assign/list_of.hpp> // for 'map_list_of()'\n-\n #include <QApplication>\n #include <QCheckBox>\n #include <QCursor>"
      },
      {
        "sha": "d8c47023460d7ce6f48d890ed1aaba27f1d80e99",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fb81a8480582d96e8c87ef1b963a11c55064d57/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fb81a8480582d96e8c87ef1b963a11c55064d57/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=3fb81a8480582d96e8c87ef1b963a11c55064d57",
        "patch": "@@ -27,8 +27,6 @@\n #include <memory>\n #include <stdint.h>\n \n-#include <boost/assign/list_of.hpp>\n-\n #include <univalue.h>\n \n /**\n@@ -819,7 +817,7 @@ UniValue estimatefee(const JSONRPCRequest& request)\n             + HelpExampleCli(\"estimatefee\", \"6\")\n             );\n \n-    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VNUM));\n+    RPCTypeCheck(request.params, {UniValue::VNUM});\n \n     int nBlocks = request.params[0].get_int();\n     if (nBlocks < 1)\n@@ -860,7 +858,7 @@ UniValue estimatesmartfee(const JSONRPCRequest& request)\n             + HelpExampleCli(\"estimatesmartfee\", \"6\")\n             );\n \n-    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VNUM));\n+    RPCTypeCheck(request.params, {UniValue::VNUM});\n \n     int nBlocks = request.params[0].get_int();\n     bool conservative = true;\n@@ -917,7 +915,7 @@ UniValue estimaterawfee(const JSONRPCRequest& request)\n             + HelpExampleCli(\"estimaterawfee\", \"6 0.9 1\")\n             );\n \n-    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VNUM)(UniValue::VNUM)(UniValue::VNUM), true);\n+    RPCTypeCheck(request.params, {UniValue::VNUM, UniValue::VNUM, UniValue::VNUM}, true);\n     RPCTypeCheckArgument(request.params[0], UniValue::VNUM);\n     int nBlocks = request.params[0].get_int();\n     double threshold = 0.95;"
      },
      {
        "sha": "f6f01eef4b609db2f10e0c2a41cede6cdde5d8a1",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fb81a8480582d96e8c87ef1b963a11c55064d57/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fb81a8480582d96e8c87ef1b963a11c55064d57/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=3fb81a8480582d96e8c87ef1b963a11c55064d57",
        "patch": "@@ -27,8 +27,6 @@\n #include <malloc.h>\n #endif\n \n-#include <boost/assign/list_of.hpp>\n-\n #include <univalue.h>\n \n /**\n@@ -472,7 +470,7 @@ UniValue setmocktime(const JSONRPCRequest& request)\n     // ensure all call sites of GetTime() are accessing this safely.\n     LOCK(cs_main);\n \n-    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VNUM));\n+    RPCTypeCheck(request.params, {UniValue::VNUM});\n     SetMockTime(request.params[0].get_int64());\n \n     return NullUniValue;"
      },
      {
        "sha": "0fc5e89809d75757c36c05c228f1a60b864e865d",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 16,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fb81a8480582d96e8c87ef1b963a11c55064d57/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fb81a8480582d96e8c87ef1b963a11c55064d57/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=3fb81a8480582d96e8c87ef1b963a11c55064d57",
        "patch": "@@ -30,8 +30,6 @@\n \n #include <stdint.h>\n \n-#include <boost/assign/list_of.hpp>\n-\n #include <univalue.h>\n \n \n@@ -325,7 +323,7 @@ UniValue createrawtransaction(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"createrawtransaction\", \"\\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"myid\\\\\\\",\\\\\\\"vout\\\\\\\":0}]\\\", \\\"{\\\\\\\"data\\\\\\\":\\\\\\\"00010203\\\\\\\"}\\\"\")\n         );\n \n-    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VARR)(UniValue::VOBJ)(UniValue::VNUM), true);\n+    RPCTypeCheck(request.params, {UniValue::VARR, UniValue::VOBJ, UniValue::VNUM}, true);\n     if (request.params[0].isNull() || request.params[1].isNull())\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, arguments 1 and 2 must be non-null\");\n \n@@ -456,7 +454,7 @@ UniValue decoderawtransaction(const JSONRPCRequest& request)\n         );\n \n     LOCK(cs_main);\n-    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR));\n+    RPCTypeCheck(request.params, {UniValue::VSTR});\n \n     CMutableTransaction mtx;\n \n@@ -494,7 +492,7 @@ UniValue decodescript(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"decodescript\", \"\\\"hexstring\\\"\")\n         );\n \n-    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR));\n+    RPCTypeCheck(request.params, {UniValue::VSTR});\n \n     UniValue r(UniValue::VOBJ);\n     CScript script;\n@@ -605,7 +603,7 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n #else\n     LOCK(cs_main);\n #endif\n-    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VARR)(UniValue::VARR)(UniValue::VSTR), true);\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VARR, UniValue::VARR, UniValue::VSTR}, true);\n \n     std::vector<unsigned char> txData(ParseHexV(request.params[0], \"argument 1\"));\n     CDataStream ssData(txData, SER_NETWORK, PROTOCOL_VERSION);\n@@ -740,15 +738,14 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n \n     int nHashType = SIGHASH_ALL;\n     if (request.params.size() > 3 && !request.params[3].isNull()) {\n-        static std::map<std::string, int> mapSigHashValues =\n-            boost::assign::map_list_of\n-            (std::string(\"ALL\"), int(SIGHASH_ALL))\n-            (std::string(\"ALL|ANYONECANPAY\"), int(SIGHASH_ALL|SIGHASH_ANYONECANPAY))\n-            (std::string(\"NONE\"), int(SIGHASH_NONE))\n-            (std::string(\"NONE|ANYONECANPAY\"), int(SIGHASH_NONE|SIGHASH_ANYONECANPAY))\n-            (std::string(\"SINGLE\"), int(SIGHASH_SINGLE))\n-            (std::string(\"SINGLE|ANYONECANPAY\"), int(SIGHASH_SINGLE|SIGHASH_ANYONECANPAY))\n-            ;\n+        static std::map<std::string, int> mapSigHashValues = {\n+            {std::string(\"ALL\"), int(SIGHASH_ALL)},\n+            {std::string(\"ALL|ANYONECANPAY\"), int(SIGHASH_ALL|SIGHASH_ANYONECANPAY)},\n+            {std::string(\"NONE\"), int(SIGHASH_NONE)},\n+            {std::string(\"NONE|ANYONECANPAY\"), int(SIGHASH_NONE|SIGHASH_ANYONECANPAY)},\n+            {std::string(\"SINGLE\"), int(SIGHASH_SINGLE)},\n+            {std::string(\"SINGLE|ANYONECANPAY\"), int(SIGHASH_SINGLE|SIGHASH_ANYONECANPAY)},\n+        };\n         std::string strHashType = request.params[3].get_str();\n         if (mapSigHashValues.count(strHashType))\n             nHashType = mapSigHashValues[strHashType];\n@@ -830,7 +827,7 @@ UniValue sendrawtransaction(const JSONRPCRequest& request)\n         );\n \n     LOCK(cs_main);\n-    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VBOOL));\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VBOOL});\n \n     // parse hex string from parameter\n     CMutableTransaction mtx;"
      },
      {
        "sha": "fd7d450908dca70acfe6c93c27296d5025cc52c5",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fb81a8480582d96e8c87ef1b963a11c55064d57/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fb81a8480582d96e8c87ef1b963a11c55064d57/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=3fb81a8480582d96e8c87ef1b963a11c55064d57",
        "patch": "@@ -18,7 +18,6 @@\n \n #include <stdint.h>\n \n-#include <boost/assign/list_of.hpp> // for 'map_list_of()'\n #include <boost/date_time/posix_time/posix_time_types.hpp>\n #include <boost/foreach.hpp>\n #include <boost/test/unit_test.hpp>"
      },
      {
        "sha": "73bd89205b9794ce34bce824674c78ad120d5c09",
        "filename": "src/test/crypto_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fb81a8480582d96e8c87ef1b963a11c55064d57/src/test/crypto_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fb81a8480582d96e8c87ef1b963a11c55064d57/src/test/crypto_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/crypto_tests.cpp?ref=3fb81a8480582d96e8c87ef1b963a11c55064d57",
        "patch": "@@ -17,7 +17,6 @@\n \n #include <vector>\n \n-#include <boost/assign/list_of.hpp>\n #include <boost/test/unit_test.hpp>\n #include <openssl/aes.h>\n #include <openssl/evp.h>"
      },
      {
        "sha": "e4b4b857208640855cddb3c78bb8d34f3946720d",
        "filename": "src/test/netbase_tests.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 13,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fb81a8480582d96e8c87ef1b963a11c55064d57/src/test/netbase_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fb81a8480582d96e8c87ef1b963a11c55064d57/src/test/netbase_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/netbase_tests.cpp?ref=3fb81a8480582d96e8c87ef1b963a11c55064d57",
        "patch": "@@ -7,7 +7,6 @@\n \n #include <string>\n \n-#include <boost/assign/list_of.hpp>\n #include <boost/test/unit_test.hpp>\n \n BOOST_FIXTURE_TEST_SUITE(netbase_tests, BasicTestingSetup)\n@@ -269,18 +268,18 @@ BOOST_AUTO_TEST_CASE(subnet_test)\n BOOST_AUTO_TEST_CASE(netbase_getgroup)\n {\n \n-    BOOST_CHECK(ResolveIP(\"127.0.0.1\").GetGroup() == boost::assign::list_of(0)); // Local -> !Routable()\n-    BOOST_CHECK(ResolveIP(\"257.0.0.1\").GetGroup() == boost::assign::list_of(0)); // !Valid -> !Routable()\n-    BOOST_CHECK(ResolveIP(\"10.0.0.1\").GetGroup() == boost::assign::list_of(0)); // RFC1918 -> !Routable()\n-    BOOST_CHECK(ResolveIP(\"169.254.1.1\").GetGroup() == boost::assign::list_of(0)); // RFC3927 -> !Routable()\n-    BOOST_CHECK(ResolveIP(\"1.2.3.4\").GetGroup() == boost::assign::list_of((unsigned char)NET_IPV4)(1)(2)); // IPv4\n-    BOOST_CHECK(ResolveIP(\"::FFFF:0:102:304\").GetGroup() == boost::assign::list_of((unsigned char)NET_IPV4)(1)(2)); // RFC6145\n-    BOOST_CHECK(ResolveIP(\"64:FF9B::102:304\").GetGroup() == boost::assign::list_of((unsigned char)NET_IPV4)(1)(2)); // RFC6052\n-    BOOST_CHECK(ResolveIP(\"2002:102:304:9999:9999:9999:9999:9999\").GetGroup() == boost::assign::list_of((unsigned char)NET_IPV4)(1)(2)); // RFC3964\n-    BOOST_CHECK(ResolveIP(\"2001:0:9999:9999:9999:9999:FEFD:FCFB\").GetGroup() == boost::assign::list_of((unsigned char)NET_IPV4)(1)(2)); // RFC4380\n-    BOOST_CHECK(ResolveIP(\"FD87:D87E:EB43:edb1:8e4:3588:e546:35ca\").GetGroup() == boost::assign::list_of((unsigned char)NET_TOR)(239)); // Tor\n-    BOOST_CHECK(ResolveIP(\"2001:470:abcd:9999:9999:9999:9999:9999\").GetGroup() == boost::assign::list_of((unsigned char)NET_IPV6)(32)(1)(4)(112)(175)); //he.net\n-    BOOST_CHECK(ResolveIP(\"2001:2001:9999:9999:9999:9999:9999:9999\").GetGroup() == boost::assign::list_of((unsigned char)NET_IPV6)(32)(1)(32)(1)); //IPv6\n+    BOOST_CHECK(ResolveIP(\"127.0.0.1\").GetGroup() == std::vector<unsigned char>({0})); // Local -> !Routable()\n+    BOOST_CHECK(ResolveIP(\"257.0.0.1\").GetGroup() == std::vector<unsigned char>({0})); // !Valid -> !Routable()\n+    BOOST_CHECK(ResolveIP(\"10.0.0.1\").GetGroup() == std::vector<unsigned char>({0})); // RFC1918 -> !Routable()\n+    BOOST_CHECK(ResolveIP(\"169.254.1.1\").GetGroup() == std::vector<unsigned char>({0})); // RFC3927 -> !Routable()\n+    BOOST_CHECK(ResolveIP(\"1.2.3.4\").GetGroup() == std::vector<unsigned char>({(unsigned char)NET_IPV4, 1, 2})); // IPv4\n+    BOOST_CHECK(ResolveIP(\"::FFFF:0:102:304\").GetGroup() == std::vector<unsigned char>({(unsigned char)NET_IPV4, 1, 2})); // RFC6145\n+    BOOST_CHECK(ResolveIP(\"64:FF9B::102:304\").GetGroup() == std::vector<unsigned char>({(unsigned char)NET_IPV4, 1, 2})); // RFC6052\n+    BOOST_CHECK(ResolveIP(\"2002:102:304:9999:9999:9999:9999:9999\").GetGroup() == std::vector<unsigned char>({(unsigned char)NET_IPV4, 1, 2})); // RFC3964\n+    BOOST_CHECK(ResolveIP(\"2001:0:9999:9999:9999:9999:FEFD:FCFB\").GetGroup() == std::vector<unsigned char>({(unsigned char)NET_IPV4, 1, 2})); // RFC4380\n+    BOOST_CHECK(ResolveIP(\"FD87:D87E:EB43:edb1:8e4:3588:e546:35ca\").GetGroup() == std::vector<unsigned char>({(unsigned char)NET_TOR, 239})); // Tor\n+    BOOST_CHECK(ResolveIP(\"2001:470:abcd:9999:9999:9999:9999:9999\").GetGroup() == std::vector<unsigned char>({(unsigned char)NET_IPV6, 32, 1, 4, 112, 175})); //he.net\n+    BOOST_CHECK(ResolveIP(\"2001:2001:9999:9999:9999:9999:9999:9999\").GetGroup() == std::vector<unsigned char>({(unsigned char)NET_IPV6, 32, 1, 32, 1})); //IPv6\n \n }\n "
      },
      {
        "sha": "e63b34e783607d228d8b4cd1fe95bd4dcd2d1599",
        "filename": "src/test/pmt_tests.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fb81a8480582d96e8c87ef1b963a11c55064d57/src/test/pmt_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fb81a8480582d96e8c87ef1b963a11c55064d57/src/test/pmt_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/pmt_tests.cpp?ref=3fb81a8480582d96e8c87ef1b963a11c55064d57",
        "patch": "@@ -14,7 +14,6 @@\n \n #include <vector>\n \n-#include <boost/assign/list_of.hpp>\n #include <boost/test/unit_test.hpp>\n \n class CPartialMerkleTreeTester : public CPartialMerkleTree\n@@ -110,14 +109,15 @@ BOOST_AUTO_TEST_CASE(pmt_test1)\n \n BOOST_AUTO_TEST_CASE(pmt_malleability)\n {\n-    std::vector<uint256> vTxid = boost::assign::list_of\n-        (ArithToUint256(1))(ArithToUint256(2))\n-        (ArithToUint256(3))(ArithToUint256(4))\n-        (ArithToUint256(5))(ArithToUint256(6))\n-        (ArithToUint256(7))(ArithToUint256(8))\n-        (ArithToUint256(9))(ArithToUint256(10))\n-        (ArithToUint256(9))(ArithToUint256(10));\n-    std::vector<bool> vMatch = boost::assign::list_of(false)(false)(false)(false)(false)(false)(false)(false)(false)(true)(true)(false);\n+    std::vector<uint256> vTxid = {\n+        ArithToUint256(1), ArithToUint256(2),\n+        ArithToUint256(3), ArithToUint256(4),\n+        ArithToUint256(5), ArithToUint256(6),\n+        ArithToUint256(7), ArithToUint256(8),\n+        ArithToUint256(9), ArithToUint256(10),\n+        ArithToUint256(9), ArithToUint256(10),\n+    };\n+    std::vector<bool> vMatch = {false, false, false, false, false, false, false, false, false, true, true, false};\n \n     CPartialMerkleTree tree(vTxid, vMatch);\n     std::vector<unsigned int> vIndex;"
      },
      {
        "sha": "134bd7c6094f15cfccb39692ef80ab5dd028b1d7",
        "filename": "src/test/rpc_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fb81a8480582d96e8c87ef1b963a11c55064d57/src/test/rpc_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fb81a8480582d96e8c87ef1b963a11c55064d57/src/test/rpc_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_tests.cpp?ref=3fb81a8480582d96e8c87ef1b963a11c55064d57",
        "patch": "@@ -11,7 +11,6 @@\n #include \"test/test_bitcoin.h\"\n \n #include <boost/algorithm/string.hpp>\n-#include <boost/assign/list_of.hpp>\n #include <boost/test/unit_test.hpp>\n \n #include <univalue.h>\n@@ -324,20 +323,20 @@ BOOST_AUTO_TEST_CASE(rpc_convert_values_generatetoaddress)\n {\n     UniValue result;\n \n-    BOOST_CHECK_NO_THROW(result = RPCConvertValues(\"generatetoaddress\", boost::assign::list_of(\"101\")(\"mkESjLZW66TmHhiFX8MCaBjrhZ543PPh9a\")));\n+    BOOST_CHECK_NO_THROW(result = RPCConvertValues(\"generatetoaddress\", {\"101\", \"mkESjLZW66TmHhiFX8MCaBjrhZ543PPh9a\"}));\n     BOOST_CHECK_EQUAL(result[0].get_int(), 101);\n     BOOST_CHECK_EQUAL(result[1].get_str(), \"mkESjLZW66TmHhiFX8MCaBjrhZ543PPh9a\");\n \n-    BOOST_CHECK_NO_THROW(result = RPCConvertValues(\"generatetoaddress\", boost::assign::list_of(\"101\")(\"mhMbmE2tE9xzJYCV9aNC8jKWN31vtGrguU\")));\n+    BOOST_CHECK_NO_THROW(result = RPCConvertValues(\"generatetoaddress\", {\"101\", \"mhMbmE2tE9xzJYCV9aNC8jKWN31vtGrguU\"}));\n     BOOST_CHECK_EQUAL(result[0].get_int(), 101);\n     BOOST_CHECK_EQUAL(result[1].get_str(), \"mhMbmE2tE9xzJYCV9aNC8jKWN31vtGrguU\");\n \n-    BOOST_CHECK_NO_THROW(result = RPCConvertValues(\"generatetoaddress\", boost::assign::list_of(\"1\")(\"mkESjLZW66TmHhiFX8MCaBjrhZ543PPh9a\")(\"9\")));\n+    BOOST_CHECK_NO_THROW(result = RPCConvertValues(\"generatetoaddress\", {\"1\", \"mkESjLZW66TmHhiFX8MCaBjrhZ543PPh9a\", \"9\"}));\n     BOOST_CHECK_EQUAL(result[0].get_int(), 1);\n     BOOST_CHECK_EQUAL(result[1].get_str(), \"mkESjLZW66TmHhiFX8MCaBjrhZ543PPh9a\");\n     BOOST_CHECK_EQUAL(result[2].get_int(), 9);\n \n-    BOOST_CHECK_NO_THROW(result = RPCConvertValues(\"generatetoaddress\", boost::assign::list_of(\"1\")(\"mhMbmE2tE9xzJYCV9aNC8jKWN31vtGrguU\")(\"9\")));\n+    BOOST_CHECK_NO_THROW(result = RPCConvertValues(\"generatetoaddress\", {\"1\", \"mhMbmE2tE9xzJYCV9aNC8jKWN31vtGrguU\", \"9\"}));\n     BOOST_CHECK_EQUAL(result[0].get_int(), 1);\n     BOOST_CHECK_EQUAL(result[1].get_str(), \"mhMbmE2tE9xzJYCV9aNC8jKWN31vtGrguU\");\n     BOOST_CHECK_EQUAL(result[2].get_int(), 9);"
      },
      {
        "sha": "e146bb238c4253598ea59de287a5aaeec06a5aac",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 20,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fb81a8480582d96e8c87ef1b963a11c55064d57/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fb81a8480582d96e8c87ef1b963a11c55064d57/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=3fb81a8480582d96e8c87ef1b963a11c55064d57",
        "patch": "@@ -26,9 +26,7 @@\n \n #include <boost/algorithm/string/classification.hpp>\n #include <boost/algorithm/string/split.hpp>\n-#include <boost/assign/list_of.hpp>\n #include <boost/test/unit_test.hpp>\n-#include <boost/assign/list_of.hpp>\n #include <boost/foreach.hpp>\n \n #include <univalue.h>\n@@ -38,24 +36,25 @@ typedef std::vector<unsigned char> valtype;\n // In script_tests.cpp\n extern UniValue read_json(const std::string& jsondata);\n \n-static std::map<std::string, unsigned int> mapFlagNames = boost::assign::map_list_of\n-    (std::string(\"NONE\"), (unsigned int)SCRIPT_VERIFY_NONE)\n-    (std::string(\"P2SH\"), (unsigned int)SCRIPT_VERIFY_P2SH)\n-    (std::string(\"STRICTENC\"), (unsigned int)SCRIPT_VERIFY_STRICTENC)\n-    (std::string(\"DERSIG\"), (unsigned int)SCRIPT_VERIFY_DERSIG)\n-    (std::string(\"LOW_S\"), (unsigned int)SCRIPT_VERIFY_LOW_S)\n-    (std::string(\"SIGPUSHONLY\"), (unsigned int)SCRIPT_VERIFY_SIGPUSHONLY)\n-    (std::string(\"MINIMALDATA\"), (unsigned int)SCRIPT_VERIFY_MINIMALDATA)\n-    (std::string(\"NULLDUMMY\"), (unsigned int)SCRIPT_VERIFY_NULLDUMMY)\n-    (std::string(\"DISCOURAGE_UPGRADABLE_NOPS\"), (unsigned int)SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS)\n-    (std::string(\"CLEANSTACK\"), (unsigned int)SCRIPT_VERIFY_CLEANSTACK)\n-    (std::string(\"MINIMALIF\"), (unsigned int)SCRIPT_VERIFY_MINIMALIF)\n-    (std::string(\"NULLFAIL\"), (unsigned int)SCRIPT_VERIFY_NULLFAIL)\n-    (std::string(\"CHECKLOCKTIMEVERIFY\"), (unsigned int)SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY)\n-    (std::string(\"CHECKSEQUENCEVERIFY\"), (unsigned int)SCRIPT_VERIFY_CHECKSEQUENCEVERIFY)\n-    (std::string(\"WITNESS\"), (unsigned int)SCRIPT_VERIFY_WITNESS)\n-    (std::string(\"DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM\"), (unsigned int)SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM)\n-    (std::string(\"WITNESS_PUBKEYTYPE\"), (unsigned int)SCRIPT_VERIFY_WITNESS_PUBKEYTYPE);\n+static std::map<std::string, unsigned int> mapFlagNames = {\n+    {std::string(\"NONE\"), (unsigned int)SCRIPT_VERIFY_NONE},\n+    {std::string(\"P2SH\"), (unsigned int)SCRIPT_VERIFY_P2SH},\n+    {std::string(\"STRICTENC\"), (unsigned int)SCRIPT_VERIFY_STRICTENC},\n+    {std::string(\"DERSIG\"), (unsigned int)SCRIPT_VERIFY_DERSIG},\n+    {std::string(\"LOW_S\"), (unsigned int)SCRIPT_VERIFY_LOW_S},\n+    {std::string(\"SIGPUSHONLY\"), (unsigned int)SCRIPT_VERIFY_SIGPUSHONLY},\n+    {std::string(\"MINIMALDATA\"), (unsigned int)SCRIPT_VERIFY_MINIMALDATA},\n+    {std::string(\"NULLDUMMY\"), (unsigned int)SCRIPT_VERIFY_NULLDUMMY},\n+    {std::string(\"DISCOURAGE_UPGRADABLE_NOPS\"), (unsigned int)SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS},\n+    {std::string(\"CLEANSTACK\"), (unsigned int)SCRIPT_VERIFY_CLEANSTACK},\n+    {std::string(\"MINIMALIF\"), (unsigned int)SCRIPT_VERIFY_MINIMALIF},\n+    {std::string(\"NULLFAIL\"), (unsigned int)SCRIPT_VERIFY_NULLFAIL},\n+    {std::string(\"CHECKLOCKTIMEVERIFY\"), (unsigned int)SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY},\n+    {std::string(\"CHECKSEQUENCEVERIFY\"), (unsigned int)SCRIPT_VERIFY_CHECKSEQUENCEVERIFY},\n+    {std::string(\"WITNESS\"), (unsigned int)SCRIPT_VERIFY_WITNESS},\n+    {std::string(\"DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM\"), (unsigned int)SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM},\n+    {std::string(\"WITNESS_PUBKEYTYPE\"), (unsigned int)SCRIPT_VERIFY_WITNESS_PUBKEYTYPE},\n+};\n \n unsigned int ParseScriptFlags(std::string strFlags)\n {"
      },
      {
        "sha": "e771ce9bb3fe316781f8dad148fd2b6374937f54",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fb81a8480582d96e8c87ef1b963a11c55064d57/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fb81a8480582d96e8c87ef1b963a11c55064d57/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=3fb81a8480582d96e8c87ef1b963a11c55064d57",
        "patch": "@@ -26,7 +26,6 @@\n \n #include <univalue.h>\n \n-#include <boost/assign/list_of.hpp>\n #include <boost/foreach.hpp>\n \n std::string static EncodeDumpTime(int64_t nTime) {\n@@ -1070,7 +1069,7 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n \n     // clang-format on\n \n-    RPCTypeCheck(mainRequest.params, boost::assign::list_of(UniValue::VARR)(UniValue::VOBJ));\n+    RPCTypeCheck(mainRequest.params, {UniValue::VARR, UniValue::VOBJ});\n \n     const UniValue& requests = mainRequest.params[0];\n "
      },
      {
        "sha": "655ea222c264264cdd6b64dc7ecaa39d5a2fdb05",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 7,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fb81a8480582d96e8c87ef1b963a11c55064d57/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fb81a8480582d96e8c87ef1b963a11c55064d57/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=3fb81a8480582d96e8c87ef1b963a11c55064d57",
        "patch": "@@ -27,8 +27,6 @@\n \n #include <stdint.h>\n \n-#include <boost/assign/list_of.hpp>\n-\n #include <univalue.h>\n \n CWallet *GetWalletForJSONRPCRequest(const JSONRPCRequest& request)\n@@ -2254,9 +2252,9 @@ UniValue lockunspent(const JSONRPCRequest& request)\n     LOCK2(cs_main, pwallet->cs_wallet);\n \n     if (request.params.size() == 1)\n-        RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VBOOL));\n+        RPCTypeCheck(request.params, {UniValue::VBOOL});\n     else\n-        RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VBOOL)(UniValue::VARR));\n+        RPCTypeCheck(request.params, {UniValue::VBOOL, UniValue::VARR});\n \n     bool fUnlock = request.params[0].get_bool();\n \n@@ -2676,7 +2674,7 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n                             + HelpExampleCli(\"sendrawtransaction\", \"\\\"signedtransactionhex\\\"\")\n                             );\n \n-    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR));\n+    RPCTypeCheck(request.params, {UniValue::VSTR});\n \n     CTxDestination changeAddress = CNoDestination();\n     int changePosition = -1;\n@@ -2694,7 +2692,7 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n         includeWatching = request.params[1].get_bool();\n       }\n       else {\n-        RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VOBJ));\n+        RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VOBJ});\n \n         UniValue options = request.params[1];\n \n@@ -2829,7 +2827,7 @@ UniValue bumpfee(const JSONRPCRequest& request)\n             HelpExampleCli(\"bumpfee\", \"<txid>\"));\n     }\n \n-    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VOBJ));\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VOBJ});\n     uint256 hash;\n     hash.SetHex(request.params[0].get_str());\n "
      }
    ]
  }
]