[
  {
    "sha": "4521f005a1e61969f21b91a7e8eef5a5cdfdd191",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NTIxZjAwNWExZTYxOTY5ZjIxYjkxYTdlOGVlZjVhNWNkZmRkMTkx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-04-09T04:52:43Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-04-09T07:17:51Z"
      },
      "message": "tests: add varints_bitpatterns test\n\nThe current tests for varint only check that\nserialization-deserialization is a roundtrip. That is a useful test, but\nit is also good to check for some exact bit patterns, to prevent a code\nchange that changes the serialization format from going undetected.\n\nAs the varint functions are templated, also check with different types.",
      "tree": {
        "sha": "70aecb9ac4ba2d2121f0d889a983416efca24ae3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/70aecb9ac4ba2d2121f0d889a983416efca24ae3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4521f005a1e61969f21b91a7e8eef5a5cdfdd191",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4521f005a1e61969f21b91a7e8eef5a5cdfdd191",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4521f005a1e61969f21b91a7e8eef5a5cdfdd191",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4521f005a1e61969f21b91a7e8eef5a5cdfdd191/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0afac87e8173dd71616e211aa08dcd59cb5cf90e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0afac87e8173dd71616e211aa08dcd59cb5cf90e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0afac87e8173dd71616e211aa08dcd59cb5cf90e"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 21,
      "deletions": 0
    },
    "files": [
      {
        "sha": "bec2c7459d8c998b5e4c5c8b84a8ffddfa6034cf",
        "filename": "src/test/serialize_tests.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 0,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4521f005a1e61969f21b91a7e8eef5a5cdfdd191/src/test/serialize_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4521f005a1e61969f21b91a7e8eef5a5cdfdd191/src/test/serialize_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/serialize_tests.cpp?ref=4521f005a1e61969f21b91a7e8eef5a5cdfdd191",
        "patch": "@@ -160,6 +160,27 @@ BOOST_AUTO_TEST_CASE(varints)\n     }\n }\n \n+BOOST_AUTO_TEST_CASE(varints_bitpatterns)\n+{\n+    CDataStream ss(SER_DISK, 0);\n+    ss << VARINT(0); BOOST_CHECK_EQUAL(HexStr(ss), \"00\"); ss.clear();\n+    ss << VARINT(0x7f); BOOST_CHECK_EQUAL(HexStr(ss), \"7f\"); ss.clear();\n+    ss << VARINT((int8_t)0x7f); BOOST_CHECK_EQUAL(HexStr(ss), \"7f\"); ss.clear();\n+    ss << VARINT(0x80); BOOST_CHECK_EQUAL(HexStr(ss), \"8000\"); ss.clear();\n+    ss << VARINT((uint8_t)0x80); BOOST_CHECK_EQUAL(HexStr(ss), \"8000\"); ss.clear();\n+    ss << VARINT(0x1234); BOOST_CHECK_EQUAL(HexStr(ss), \"a334\"); ss.clear();\n+    ss << VARINT((int16_t)0x1234); BOOST_CHECK_EQUAL(HexStr(ss), \"a334\"); ss.clear();\n+    ss << VARINT(0xffff); BOOST_CHECK_EQUAL(HexStr(ss), \"82fe7f\"); ss.clear();\n+    ss << VARINT((uint16_t)0xffff); BOOST_CHECK_EQUAL(HexStr(ss), \"82fe7f\"); ss.clear();\n+    ss << VARINT(0x123456); BOOST_CHECK_EQUAL(HexStr(ss), \"c7e756\"); ss.clear();\n+    ss << VARINT((int32_t)0x123456); BOOST_CHECK_EQUAL(HexStr(ss), \"c7e756\"); ss.clear();\n+    ss << VARINT(0x80123456U); BOOST_CHECK_EQUAL(HexStr(ss), \"86ffc7e756\"); ss.clear();\n+    ss << VARINT((uint32_t)0x80123456U); BOOST_CHECK_EQUAL(HexStr(ss), \"86ffc7e756\"); ss.clear();\n+    ss << VARINT(0xffffffff); BOOST_CHECK_EQUAL(HexStr(ss), \"8efefefe7f\"); ss.clear();\n+    ss << VARINT(0x7fffffffffffffffLL); BOOST_CHECK_EQUAL(HexStr(ss), \"fefefefefefefefe7f\"); ss.clear();\n+    ss << VARINT(0xffffffffffffffffULL); BOOST_CHECK_EQUAL(HexStr(ss), \"80fefefefefefefefe7f\"); ss.clear();\n+}\n+\n BOOST_AUTO_TEST_CASE(compactsize)\n {\n     CDataStream ss(SER_DISK, 0);"
      }
    ]
  }
]