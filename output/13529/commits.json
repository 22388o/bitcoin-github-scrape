[
  {
    "sha": "f78558f1e39198779bdb17e2b0e256fb99ad4b28",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNzg1NThmMWUzOTE5ODc3OWJkYjE3ZTJiMGUyNTZmYjk5YWQ0YjI4",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-06-24T15:18:22Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-08-21T08:43:54Z"
      },
      "message": "qt: Use new Qt5 connect syntax",
      "tree": {
        "sha": "e70cf07bb8f64df2f4b65a4999b8bafa435d9d51",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e70cf07bb8f64df2f4b65a4999b8bafa435d9d51"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f78558f1e39198779bdb17e2b0e256fb99ad4b28",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f78558f1e39198779bdb17e2b0e256fb99ad4b28",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f78558f1e39198779bdb17e2b0e256fb99ad4b28",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f78558f1e39198779bdb17e2b0e256fb99ad4b28/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8aa9badf5ea3ea98980f50d924e88e46c4d5ee38",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8aa9badf5ea3ea98980f50d924e88e46c4d5ee38",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8aa9badf5ea3ea98980f50d924e88e46c4d5ee38"
      }
    ],
    "stats": {
      "total": 608,
      "additions": 304,
      "deletions": 304
    },
    "files": [
      {
        "sha": "26bdf60d4a0f7b4c1d9868b6e67f561e62af1ca4",
        "filename": "src/qt/addressbookpage.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f78558f1e39198779bdb17e2b0e256fb99ad4b28/src/qt/addressbookpage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f78558f1e39198779bdb17e2b0e256fb99ad4b28/src/qt/addressbookpage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addressbookpage.cpp?ref=f78558f1e39198779bdb17e2b0e256fb99ad4b28",
        "patch": "@@ -85,7 +85,7 @@ AddressBookPage::AddressBookPage(const PlatformStyle *platformStyle, Mode _mode,\n         case SendingTab: setWindowTitle(tr(\"Choose the address to send coins to\")); break;\n         case ReceivingTab: setWindowTitle(tr(\"Choose the address to receive coins with\")); break;\n         }\n-        connect(ui->tableView, SIGNAL(doubleClicked(QModelIndex)), this, SLOT(accept()));\n+        connect(ui->tableView, &QTableView::doubleClicked, this, &QDialog::accept);\n         ui->tableView->setEditTriggers(QAbstractItemView::NoEditTriggers);\n         ui->tableView->setFocus();\n         ui->closeButton->setText(tr(\"C&hoose\"));\n@@ -129,14 +129,14 @@ AddressBookPage::AddressBookPage(const PlatformStyle *platformStyle, Mode _mode,\n     contextMenu->addSeparator();\n \n     // Connect signals for context menu actions\n-    connect(copyAddressAction, SIGNAL(triggered()), this, SLOT(on_copyAddress_clicked()));\n-    connect(copyLabelAction, SIGNAL(triggered()), this, SLOT(onCopyLabelAction()));\n-    connect(editAction, SIGNAL(triggered()), this, SLOT(onEditAction()));\n-    connect(deleteAction, SIGNAL(triggered()), this, SLOT(on_deleteAddress_clicked()));\n+    connect(copyAddressAction, &QAction::triggered, this, &AddressBookPage::on_copyAddress_clicked);\n+    connect(copyLabelAction, &QAction::triggered, this, &AddressBookPage::onCopyLabelAction);\n+    connect(editAction, &QAction::triggered, this, &AddressBookPage::onEditAction);\n+    connect(deleteAction, &QAction::triggered, this, &AddressBookPage::on_deleteAddress_clicked);\n \n-    connect(ui->tableView, SIGNAL(customContextMenuRequested(QPoint)), this, SLOT(contextualMenu(QPoint)));\n+    connect(ui->tableView, &QWidget::customContextMenuRequested, this, &AddressBookPage::contextualMenu);\n \n-    connect(ui->closeButton, SIGNAL(clicked()), this, SLOT(accept()));\n+    connect(ui->closeButton, &QPushButton::clicked, this, &QDialog::accept);\n }\n \n AddressBookPage::~AddressBookPage()\n@@ -154,7 +154,7 @@ void AddressBookPage::setModel(AddressTableModel *_model)\n     proxyModel = new AddressBookSortFilterProxyModel(type, this);\n     proxyModel->setSourceModel(_model);\n \n-    connect(ui->searchLineEdit, SIGNAL(textChanged(QString)), proxyModel, SLOT(setFilterWildcard(QString)));\n+    connect(ui->searchLineEdit, &QLineEdit::textChanged, proxyModel, &QSortFilterProxyModel::setFilterWildcard);\n \n     ui->tableView->setModel(proxyModel);\n     ui->tableView->sortByColumn(0, Qt::AscendingOrder);\n@@ -163,11 +163,11 @@ void AddressBookPage::setModel(AddressTableModel *_model)\n     ui->tableView->horizontalHeader()->setSectionResizeMode(AddressTableModel::Label, QHeaderView::Stretch);\n     ui->tableView->horizontalHeader()->setSectionResizeMode(AddressTableModel::Address, QHeaderView::ResizeToContents);\n \n-    connect(ui->tableView->selectionModel(), SIGNAL(selectionChanged(QItemSelection,QItemSelection)),\n-        this, SLOT(selectionChanged()));\n+    connect(ui->tableView->selectionModel(), &QItemSelectionModel::selectionChanged,\n+        this, &AddressBookPage::selectionChanged);\n \n     // Select row for newly created address\n-    connect(_model, SIGNAL(rowsInserted(QModelIndex,int,int)), this, SLOT(selectNewAddress(QModelIndex,int,int)));\n+    connect(_model, &AddressTableModel::rowsInserted, this, &AddressBookPage::selectNewAddress);\n \n     selectionChanged();\n }"
      },
      {
        "sha": "673f63a19bbfa5247a065b5ef98c03f62e377cc7",
        "filename": "src/qt/askpassphrasedialog.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f78558f1e39198779bdb17e2b0e256fb99ad4b28/src/qt/askpassphrasedialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f78558f1e39198779bdb17e2b0e256fb99ad4b28/src/qt/askpassphrasedialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/askpassphrasedialog.cpp?ref=f78558f1e39198779bdb17e2b0e256fb99ad4b28",
        "patch": "@@ -70,10 +70,10 @@ AskPassphraseDialog::AskPassphraseDialog(Mode _mode, QWidget *parent) :\n             break;\n     }\n     textChanged();\n-    connect(ui->toggleShowPasswordButton, SIGNAL(toggled(bool)), this, SLOT(toggleShowPassword(bool)));\n-    connect(ui->passEdit1, SIGNAL(textChanged(QString)), this, SLOT(textChanged()));\n-    connect(ui->passEdit2, SIGNAL(textChanged(QString)), this, SLOT(textChanged()));\n-    connect(ui->passEdit3, SIGNAL(textChanged(QString)), this, SLOT(textChanged()));\n+    connect(ui->toggleShowPasswordButton, &QPushButton::toggled, this, &AskPassphraseDialog::toggleShowPassword);\n+    connect(ui->passEdit1, &QLineEdit::textChanged, this, &AskPassphraseDialog::textChanged);\n+    connect(ui->passEdit2, &QLineEdit::textChanged, this, &AskPassphraseDialog::textChanged);\n+    connect(ui->passEdit3, &QLineEdit::textChanged, this, &AskPassphraseDialog::textChanged);\n }\n \n AskPassphraseDialog::~AskPassphraseDialog()"
      },
      {
        "sha": "85fb88d33824e216fadb13b43a0011c24abbb2d5",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 20,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f78558f1e39198779bdb17e2b0e256fb99ad4b28/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f78558f1e39198779bdb17e2b0e256fb99ad4b28/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=f78558f1e39198779bdb17e2b0e256fb99ad4b28",
        "patch": "@@ -353,7 +353,7 @@ void BitcoinApplication::createWindow(const NetworkStyle *networkStyle)\n     window = new BitcoinGUI(m_node, platformStyle, networkStyle, 0);\n \n     pollShutdownTimer = new QTimer(window);\n-    connect(pollShutdownTimer, SIGNAL(timeout()), window, SLOT(detectShutdown()));\n+    connect(pollShutdownTimer, &QTimer::timeout, window, &BitcoinGUI::detectShutdown);\n }\n \n void BitcoinApplication::createSplashScreen(const NetworkStyle *networkStyle)\n@@ -362,8 +362,8 @@ void BitcoinApplication::createSplashScreen(const NetworkStyle *networkStyle)\n     // We don't hold a direct pointer to the splash screen after creation, but the splash\n     // screen will take care of deleting itself when slotFinish happens.\n     splash->show();\n-    connect(this, SIGNAL(splashFinished(QWidget*)), splash, SLOT(slotFinish(QWidget*)));\n-    connect(this, SIGNAL(requestedShutdown()), splash, SLOT(close()));\n+    connect(this, &BitcoinApplication::splashFinished, splash, &SplashScreen::slotFinish);\n+    connect(this, &BitcoinApplication::requestedShutdown, splash, &QWidget::close);\n }\n \n void BitcoinApplication::startThread()\n@@ -375,14 +375,14 @@ void BitcoinApplication::startThread()\n     executor->moveToThread(coreThread);\n \n     /*  communication to and from thread */\n-    connect(executor, SIGNAL(initializeResult(bool)), this, SLOT(initializeResult(bool)));\n-    connect(executor, SIGNAL(shutdownResult()), this, SLOT(shutdownResult()));\n-    connect(executor, SIGNAL(runawayException(QString)), this, SLOT(handleRunawayException(QString)));\n-    connect(this, SIGNAL(requestedInitialize()), executor, SLOT(initialize()));\n-    connect(this, SIGNAL(requestedShutdown()), executor, SLOT(shutdown()));\n+    connect(executor, &BitcoinCore::initializeResult, this, &BitcoinApplication::initializeResult);\n+    connect(executor, &BitcoinCore::shutdownResult, this, &BitcoinApplication::shutdownResult);\n+    connect(executor, &BitcoinCore::runawayException, this, &BitcoinApplication::handleRunawayException);\n+    connect(this, &BitcoinApplication::requestedInitialize, executor, &BitcoinCore::initialize);\n+    connect(this, &BitcoinApplication::requestedShutdown, executor, &BitcoinCore::shutdown);\n     /*  make sure executor object is deleted in its own thread */\n-    connect(this, SIGNAL(stopThread()), executor, SLOT(deleteLater()));\n-    connect(this, SIGNAL(stopThread()), coreThread, SLOT(quit()));\n+    connect(this, &BitcoinApplication::stopThread, executor, &QObject::deleteLater);\n+    connect(this, &BitcoinApplication::stopThread, coreThread, &QThread::quit);\n \n     coreThread->start();\n }\n@@ -442,9 +442,9 @@ void BitcoinApplication::addWallet(WalletModel* walletModel)\n         window->setCurrentWallet(walletModel->getWalletName());\n     }\n \n-    connect(walletModel, SIGNAL(coinsSent(WalletModel*, SendCoinsRecipient, QByteArray)),\n-        paymentServer, SLOT(fetchPaymentACK(WalletModel*, const SendCoinsRecipient&, QByteArray)));\n-    connect(walletModel, SIGNAL(unload()), this, SLOT(removeWallet()));\n+    connect(walletModel, &WalletModel::coinsSent,\n+        paymentServer, &PaymentServer::fetchPaymentACK);\n+    connect(walletModel, &WalletModel::unload, this, &BitcoinApplication::removeWallet);\n \n     m_wallet_models.push_back(walletModel);\n #endif\n@@ -504,13 +504,12 @@ void BitcoinApplication::initializeResult(bool success)\n #ifdef ENABLE_WALLET\n         // Now that initialization/startup is done, process any command-line\n         // bitcoin: URIs or payment requests:\n-        connect(paymentServer, SIGNAL(receivedPaymentRequest(SendCoinsRecipient)),\n-                         window, SLOT(handlePaymentRequest(SendCoinsRecipient)));\n-        connect(window, SIGNAL(receivedURI(QString)),\n-                         paymentServer, SLOT(handleURIOrFile(QString)));\n-        connect(paymentServer, SIGNAL(message(QString,QString,unsigned int)),\n-                         window, SLOT(message(QString,QString,unsigned int)));\n-        QTimer::singleShot(100, paymentServer, SLOT(uiReady()));\n+        connect(paymentServer, &PaymentServer::receivedPaymentRequest, window, &BitcoinGUI::handlePaymentRequest);\n+        connect(window, &BitcoinGUI::receivedURI, paymentServer, &PaymentServer::handleURIOrFile);\n+        connect(paymentServer, &PaymentServer::message, [this](const QString& title, const QString& message, unsigned int style) {\n+            window->message(title, message, style);\n+        });\n+        QTimer::singleShot(100, paymentServer, &PaymentServer::uiReady);\n #endif\n         pollShutdownTimer->start(200);\n     } else {"
      },
      {
        "sha": "b68f3a439b1b4635a4fc525e3257dfc4a3992c86",
        "filename": "src/qt/bitcoinamountfield.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f78558f1e39198779bdb17e2b0e256fb99ad4b28/src/qt/bitcoinamountfield.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f78558f1e39198779bdb17e2b0e256fb99ad4b28/src/qt/bitcoinamountfield.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinamountfield.cpp?ref=f78558f1e39198779bdb17e2b0e256fb99ad4b28",
        "patch": "@@ -29,7 +29,7 @@ class AmountSpinBox: public QAbstractSpinBox\n     {\n         setAlignment(Qt::AlignRight);\n \n-        connect(lineEdit(), SIGNAL(textEdited(QString)), this, SIGNAL(valueChanged()));\n+        connect(lineEdit(), &QLineEdit::textEdited, this, &AmountSpinBox::valueChanged);\n     }\n \n     QValidator::State validate(QString &text, int &pos) const\n@@ -213,8 +213,8 @@ BitcoinAmountField::BitcoinAmountField(QWidget *parent) :\n     setFocusProxy(amount);\n \n     // If one if the widgets changes, the combined content changes as well\n-    connect(amount, SIGNAL(valueChanged()), this, SIGNAL(valueChanged()));\n-    connect(unit, SIGNAL(currentIndexChanged(int)), this, SLOT(unitChanged(int)));\n+    connect(amount, &AmountSpinBox::valueChanged, this, &BitcoinAmountField::valueChanged);\n+    connect(unit, static_cast<void (QComboBox::*)(int)>(&QComboBox::currentIndexChanged), this, &BitcoinAmountField::unitChanged);\n \n     // Set default based on configuration\n     unitChanged(unit->currentIndex());"
      },
      {
        "sha": "cefa9004ed26fc5bf45150648194bdf7b6a9c5db",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 47,
        "deletions": 46,
        "changes": 93,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f78558f1e39198779bdb17e2b0e256fb99ad4b28/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f78558f1e39198779bdb17e2b0e256fb99ad4b28/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=f78558f1e39198779bdb17e2b0e256fb99ad4b28",
        "patch": "@@ -203,9 +203,9 @@ BitcoinGUI::BitcoinGUI(interfaces::Node& node, const PlatformStyle *_platformSty\n     modalOverlay = new ModalOverlay(this->centralWidget());\n #ifdef ENABLE_WALLET\n     if(enableWallet) {\n-        connect(walletFrame, SIGNAL(requestedSyncWarningInfo()), this, SLOT(showModalOverlay()));\n-        connect(labelBlocksIcon, SIGNAL(clicked(QPoint)), this, SLOT(showModalOverlay()));\n-        connect(progressBar, SIGNAL(clicked(QPoint)), this, SLOT(showModalOverlay()));\n+        connect(walletFrame, &WalletFrame::requestedSyncWarningInfo, this, &BitcoinGUI::showModalOverlay);\n+        connect(labelBlocksIcon, &GUIUtil::ClickableLabel::clicked, this, &BitcoinGUI::showModalOverlay);\n+        connect(progressBar, &GUIUtil::ClickableProgressBar::clicked, this, &BitcoinGUI::showModalOverlay);\n     }\n #endif\n }\n@@ -270,18 +270,18 @@ void BitcoinGUI::createActions()\n #ifdef ENABLE_WALLET\n     // These showNormalIfMinimized are needed because Send Coins and Receive Coins\n     // can be triggered from the tray menu, and need to show the GUI to be useful.\n-    connect(overviewAction, SIGNAL(triggered()), this, SLOT(showNormalIfMinimized()));\n-    connect(overviewAction, SIGNAL(triggered()), this, SLOT(gotoOverviewPage()));\n-    connect(sendCoinsAction, SIGNAL(triggered()), this, SLOT(showNormalIfMinimized()));\n-    connect(sendCoinsAction, SIGNAL(triggered()), this, SLOT(gotoSendCoinsPage()));\n-    connect(sendCoinsMenuAction, SIGNAL(triggered()), this, SLOT(showNormalIfMinimized()));\n-    connect(sendCoinsMenuAction, SIGNAL(triggered()), this, SLOT(gotoSendCoinsPage()));\n-    connect(receiveCoinsAction, SIGNAL(triggered()), this, SLOT(showNormalIfMinimized()));\n-    connect(receiveCoinsAction, SIGNAL(triggered()), this, SLOT(gotoReceiveCoinsPage()));\n-    connect(receiveCoinsMenuAction, SIGNAL(triggered()), this, SLOT(showNormalIfMinimized()));\n-    connect(receiveCoinsMenuAction, SIGNAL(triggered()), this, SLOT(gotoReceiveCoinsPage()));\n-    connect(historyAction, SIGNAL(triggered()), this, SLOT(showNormalIfMinimized()));\n-    connect(historyAction, SIGNAL(triggered()), this, SLOT(gotoHistoryPage()));\n+    connect(overviewAction, &QAction::triggered, this, static_cast<void (BitcoinGUI::*)()>(&BitcoinGUI::showNormalIfMinimized));\n+    connect(overviewAction, &QAction::triggered, this, &BitcoinGUI::gotoOverviewPage);\n+    connect(sendCoinsAction, &QAction::triggered, this, static_cast<void (BitcoinGUI::*)()>(&BitcoinGUI::showNormalIfMinimized));\n+    connect(sendCoinsAction, &QAction::triggered, [this]{ gotoSendCoinsPage(); });\n+    connect(sendCoinsMenuAction, &QAction::triggered, this, static_cast<void (BitcoinGUI::*)()>(&BitcoinGUI::showNormalIfMinimized));\n+    connect(sendCoinsMenuAction, &QAction::triggered, [this]{ gotoSendCoinsPage(); });\n+    connect(receiveCoinsAction, &QAction::triggered, this, static_cast<void (BitcoinGUI::*)()>(&BitcoinGUI::showNormalIfMinimized));\n+    connect(receiveCoinsAction, &QAction::triggered, this, &BitcoinGUI::gotoReceiveCoinsPage);\n+    connect(receiveCoinsMenuAction, &QAction::triggered, this, static_cast<void (BitcoinGUI::*)()>(&BitcoinGUI::showNormalIfMinimized));\n+    connect(receiveCoinsMenuAction, &QAction::triggered, this, &BitcoinGUI::gotoReceiveCoinsPage);\n+    connect(historyAction, &QAction::triggered, this, static_cast<void (BitcoinGUI::*)()>(&BitcoinGUI::showNormalIfMinimized));\n+    connect(historyAction, &QAction::triggered, this, &BitcoinGUI::gotoHistoryPage);\n #endif // ENABLE_WALLET\n \n     quitAction = new QAction(platformStyle->TextColorIcon(\":/icons/quit\"), tr(\"E&xit\"), this);\n@@ -331,32 +331,32 @@ void BitcoinGUI::createActions()\n     showHelpMessageAction->setMenuRole(QAction::NoRole);\n     showHelpMessageAction->setStatusTip(tr(\"Show the %1 help message to get a list with possible Bitcoin command-line options\").arg(tr(PACKAGE_NAME)));\n \n-    connect(quitAction, SIGNAL(triggered()), qApp, SLOT(quit()));\n-    connect(aboutAction, SIGNAL(triggered()), this, SLOT(aboutClicked()));\n-    connect(aboutQtAction, SIGNAL(triggered()), qApp, SLOT(aboutQt()));\n-    connect(optionsAction, SIGNAL(triggered()), this, SLOT(optionsClicked()));\n-    connect(toggleHideAction, SIGNAL(triggered()), this, SLOT(toggleHidden()));\n-    connect(showHelpMessageAction, SIGNAL(triggered()), this, SLOT(showHelpMessageClicked()));\n-    connect(openRPCConsoleAction, SIGNAL(triggered()), this, SLOT(showDebugWindow()));\n+    connect(quitAction, &QAction::triggered, qApp, QApplication::quit);\n+    connect(aboutAction, &QAction::triggered, this, &BitcoinGUI::aboutClicked);\n+    connect(aboutQtAction, &QAction::triggered, qApp, QApplication::aboutQt);\n+    connect(optionsAction, &QAction::triggered, this, &BitcoinGUI::optionsClicked);\n+    connect(toggleHideAction, &QAction::triggered, this, &BitcoinGUI::toggleHidden);\n+    connect(showHelpMessageAction, &QAction::triggered, this, &BitcoinGUI::showHelpMessageClicked);\n+    connect(openRPCConsoleAction, &QAction::triggered, this, &BitcoinGUI::showDebugWindow);\n     // prevents an open debug window from becoming stuck/unusable on client shutdown\n-    connect(quitAction, SIGNAL(triggered()), rpcConsole, SLOT(hide()));\n+    connect(quitAction, &QAction::triggered, rpcConsole, &QWidget::hide);\n \n #ifdef ENABLE_WALLET\n     if(walletFrame)\n     {\n-        connect(encryptWalletAction, SIGNAL(triggered(bool)), walletFrame, SLOT(encryptWallet(bool)));\n-        connect(backupWalletAction, SIGNAL(triggered()), walletFrame, SLOT(backupWallet()));\n-        connect(changePassphraseAction, SIGNAL(triggered()), walletFrame, SLOT(changePassphrase()));\n-        connect(signMessageAction, SIGNAL(triggered()), this, SLOT(gotoSignMessageTab()));\n-        connect(verifyMessageAction, SIGNAL(triggered()), this, SLOT(gotoVerifyMessageTab()));\n-        connect(usedSendingAddressesAction, SIGNAL(triggered()), walletFrame, SLOT(usedSendingAddresses()));\n-        connect(usedReceivingAddressesAction, SIGNAL(triggered()), walletFrame, SLOT(usedReceivingAddresses()));\n-        connect(openAction, SIGNAL(triggered()), this, SLOT(openClicked()));\n+        connect(encryptWalletAction, &QAction::triggered, walletFrame, &WalletFrame::encryptWallet);\n+        connect(backupWalletAction, &QAction::triggered, walletFrame, &WalletFrame::backupWallet);\n+        connect(changePassphraseAction, &QAction::triggered, walletFrame, &WalletFrame::changePassphrase);\n+        connect(signMessageAction, &QAction::triggered, [this]{ gotoSignMessageTab(); });\n+        connect(verifyMessageAction, &QAction::triggered, [this]{ gotoVerifyMessageTab(); });\n+        connect(usedSendingAddressesAction, &QAction::triggered, walletFrame, &WalletFrame::usedSendingAddresses);\n+        connect(usedReceivingAddressesAction, &QAction::triggered, walletFrame, &WalletFrame::usedReceivingAddresses);\n+        connect(openAction, &QAction::triggered, this, &BitcoinGUI::openClicked);\n     }\n #endif // ENABLE_WALLET\n \n-    new QShortcut(QKeySequence(Qt::CTRL + Qt::SHIFT + Qt::Key_C), this, SLOT(showDebugWindowActivateConsole()));\n-    new QShortcut(QKeySequence(Qt::CTRL + Qt::SHIFT + Qt::Key_D), this, SLOT(showDebugWindow()));\n+    connect(new QShortcut(QKeySequence(Qt::CTRL + Qt::SHIFT + Qt::Key_C), this), &QShortcut::activated, this, &BitcoinGUI::showDebugWindowActivateConsole);\n+    connect(new QShortcut(QKeySequence(Qt::CTRL + Qt::SHIFT + Qt::Key_D), this), &QShortcut::activated, this, &BitcoinGUI::showDebugWindow);\n }\n \n void BitcoinGUI::createMenuBar()\n@@ -425,7 +425,7 @@ void BitcoinGUI::createToolBars()\n         toolbar->addWidget(spacer);\n \n         m_wallet_selector = new QComboBox();\n-        connect(m_wallet_selector, SIGNAL(currentIndexChanged(int)), this, SLOT(setCurrentWalletBySelectorIndex(int)));\n+        connect(m_wallet_selector, static_cast<void (QComboBox::*)(int)>(&QComboBox::currentIndexChanged), this, &BitcoinGUI::setCurrentWalletBySelectorIndex);\n \n         m_wallet_selector_label = new QLabel();\n         m_wallet_selector_label->setText(tr(\"Wallet:\") + \" \");\n@@ -451,18 +451,20 @@ void BitcoinGUI::setClientModel(ClientModel *_clientModel)\n \n         // Keep up to date with client\n         updateNetworkState();\n-        connect(_clientModel, SIGNAL(numConnectionsChanged(int)), this, SLOT(setNumConnections(int)));\n-        connect(_clientModel, SIGNAL(networkActiveChanged(bool)), this, SLOT(setNetworkActive(bool)));\n+        connect(_clientModel, &ClientModel::numConnectionsChanged, this, &BitcoinGUI::setNumConnections);\n+        connect(_clientModel, &ClientModel::networkActiveChanged, this, &BitcoinGUI::setNetworkActive);\n \n         modalOverlay->setKnownBestHeight(_clientModel->getHeaderTipHeight(), QDateTime::fromTime_t(_clientModel->getHeaderTipTime()));\n         setNumBlocks(m_node.getNumBlocks(), QDateTime::fromTime_t(m_node.getLastBlockTime()), m_node.getVerificationProgress(), false);\n-        connect(_clientModel, SIGNAL(numBlocksChanged(int,QDateTime,double,bool)), this, SLOT(setNumBlocks(int,QDateTime,double,bool)));\n+        connect(_clientModel, &ClientModel::numBlocksChanged, this, &BitcoinGUI::setNumBlocks);\n \n         // Receive and report messages from client model\n-        connect(_clientModel, SIGNAL(message(QString,QString,unsigned int)), this, SLOT(message(QString,QString,unsigned int)));\n+        connect(_clientModel, &ClientModel::message, [this](const QString &title, const QString &message, unsigned int style){\n+            this->message(title, message, style);\n+        });\n \n         // Show progress dialog\n-        connect(_clientModel, SIGNAL(showProgress(QString,int)), this, SLOT(showProgress(QString,int)));\n+        connect(_clientModel, &ClientModel::showProgress, this, &BitcoinGUI::showProgress);\n \n         rpcConsole->setClientModel(_clientModel);\n \n@@ -480,7 +482,7 @@ void BitcoinGUI::setClientModel(ClientModel *_clientModel)\n         if(optionsModel)\n         {\n             // be aware of the tray icon disable state change reported by the OptionsModel object.\n-            connect(optionsModel,SIGNAL(hideTrayIconChanged(bool)),this,SLOT(setTrayIconVisible(bool)));\n+            connect(optionsModel, &OptionsModel::hideTrayIconChanged, this, &BitcoinGUI::setTrayIconVisible);\n \n             // initialize the disable state of the tray icon with the current value in the model.\n             setTrayIconVisible(optionsModel->getHideTrayIcon());\n@@ -601,8 +603,7 @@ void BitcoinGUI::createTrayIconMenu()\n     trayIconMenu = new QMenu(this);\n     trayIcon->setContextMenu(trayIconMenu);\n \n-    connect(trayIcon, SIGNAL(activated(QSystemTrayIcon::ActivationReason)),\n-            this, SLOT(trayIconActivated(QSystemTrayIcon::ActivationReason)));\n+    connect(trayIcon, &QSystemTrayIcon::activated, this, &BitcoinGUI::trayIconActivated);\n #else\n     // Note: On Mac, the dock icon is used to provide the tray's functionality.\n     MacDockIconHandler *dockIconHandler = MacDockIconHandler::instance();\n@@ -956,12 +957,12 @@ void BitcoinGUI::changeEvent(QEvent *e)\n             QWindowStateChangeEvent *wsevt = static_cast<QWindowStateChangeEvent*>(e);\n             if(!(wsevt->oldState() & Qt::WindowMinimized) && isMinimized())\n             {\n-                QTimer::singleShot(0, this, SLOT(hide()));\n+                QTimer::singleShot(0, this, &BitcoinGUI::hide);\n                 e->ignore();\n             }\n             else if((wsevt->oldState() & Qt::WindowMinimized) && !isMinimized())\n             {\n-                QTimer::singleShot(0, this, SLOT(show()));\n+                QTimer::singleShot(0, this, &BitcoinGUI::show);\n                 e->ignore();\n             }\n         }\n@@ -1276,7 +1277,7 @@ void UnitDisplayStatusBarControl::createContextMenu()\n         menuAction->setData(QVariant(u));\n         menu->addAction(menuAction);\n     }\n-    connect(menu,SIGNAL(triggered(QAction*)),this,SLOT(onMenuSelection(QAction*)));\n+    connect(menu, &QMenu::triggered, this, &UnitDisplayStatusBarControl::onMenuSelection);\n }\n \n /** Lets the control know about the Options Model (and its signals) */\n@@ -1287,7 +1288,7 @@ void UnitDisplayStatusBarControl::setOptionsModel(OptionsModel *_optionsModel)\n         this->optionsModel = _optionsModel;\n \n         // be aware of a display unit change reported by the OptionsModel object.\n-        connect(_optionsModel,SIGNAL(displayUnitChanged(int)),this,SLOT(updateDisplayUnit(int)));\n+        connect(_optionsModel, &OptionsModel::displayUnitChanged, this, &UnitDisplayStatusBarControl::updateDisplayUnit);\n \n         // initialize the display units label with the current value in the model.\n         updateDisplayUnit(_optionsModel->getDisplayUnit());"
      },
      {
        "sha": "61cd6f76cc1573154df048d528b1e6c5ca6e0995",
        "filename": "src/qt/bitcoingui.h",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f78558f1e39198779bdb17e2b0e256fb99ad4b28/src/qt/bitcoingui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f78558f1e39198779bdb17e2b0e256fb99ad4b28/src/qt/bitcoingui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.h?ref=f78558f1e39198779bdb17e2b0e256fb99ad4b28",
        "patch": "@@ -49,6 +49,7 @@ QT_END_NAMESPACE\n \n namespace GUIUtil {\n class ClickableLabel;\n+class ClickableProgressBar;\n }\n \n /**\n@@ -101,9 +102,9 @@ class BitcoinGUI : public QMainWindow\n     QLabel* labelWalletHDStatusIcon = nullptr;\n     GUIUtil::ClickableLabel* labelProxyIcon = nullptr;\n     GUIUtil::ClickableLabel* connectionsControl = nullptr;\n-    QLabel* labelBlocksIcon = nullptr;\n+    GUIUtil::ClickableLabel* labelBlocksIcon = nullptr;\n     QLabel* progressBarLabel = nullptr;\n-    QProgressBar* progressBar = nullptr;\n+    GUIUtil::ClickableProgressBar* progressBar = nullptr;\n     QProgressDialog* progressDialog = nullptr;\n \n     QMenuBar* appMenuBar = nullptr;\n@@ -227,7 +228,7 @@ public Q_SLOTS:\n     /** Set the proxy-enabled icon as shown in the UI. */\n     void updateProxyIcon();\n \n-private Q_SLOTS:\n+public Q_SLOTS:\n #ifdef ENABLE_WALLET\n     /** Switch to overview (home) page */\n     void gotoOverviewPage();\n@@ -262,7 +263,8 @@ private Q_SLOTS:\n #endif\n \n     /** Show window if hidden, unminimize when minimized, rise when obscured or show if hidden and fToggleHidden is true */\n-    void showNormalIfMinimized(bool fToggleHidden = false);\n+    void showNormalIfMinimized() { showNormalIfMinimized(false); }\n+    void showNormalIfMinimized(bool fToggleHidden);\n     /** Simply calls showNormalIfMinimized(true) for use in SLOT() macro */\n     void toggleHidden();\n "
      },
      {
        "sha": "b2cf4b63997aa8b2b9e9b0eeda58143fef99de8a",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f78558f1e39198779bdb17e2b0e256fb99ad4b28/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f78558f1e39198779bdb17e2b0e256fb99ad4b28/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=f78558f1e39198779bdb17e2b0e256fb99ad4b28",
        "patch": "@@ -44,7 +44,7 @@ ClientModel::ClientModel(interfaces::Node& node, OptionsModel *_optionsModel, QO\n     peerTableModel = new PeerTableModel(m_node, this);\n     banTableModel = new BanTableModel(m_node, this);\n     pollTimer = new QTimer(this);\n-    connect(pollTimer, SIGNAL(timeout()), this, SLOT(updateTimer()));\n+    connect(pollTimer, &QTimer::timeout, this, &ClientModel::updateTimer);\n     pollTimer->start(MODEL_UPDATE_DELAY);\n \n     subscribeToCoreSignals();"
      },
      {
        "sha": "68330c51fa52ce716a8f078fc02c87ef5e969d2c",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 20,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f78558f1e39198779bdb17e2b0e256fb99ad4b28/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f78558f1e39198779bdb17e2b0e256fb99ad4b28/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=f78558f1e39198779bdb17e2b0e256fb99ad4b28",
        "patch": "@@ -68,13 +68,13 @@ CoinControlDialog::CoinControlDialog(const PlatformStyle *_platformStyle, QWidge\n     contextMenu->addAction(unlockAction);\n \n     // context menu signals\n-    connect(ui->treeWidget, SIGNAL(customContextMenuRequested(QPoint)), this, SLOT(showMenu(QPoint)));\n-    connect(copyAddressAction, SIGNAL(triggered()), this, SLOT(copyAddress()));\n-    connect(copyLabelAction, SIGNAL(triggered()), this, SLOT(copyLabel()));\n-    connect(copyAmountAction, SIGNAL(triggered()), this, SLOT(copyAmount()));\n-    connect(copyTransactionHashAction, SIGNAL(triggered()), this, SLOT(copyTransactionHash()));\n-    connect(lockAction, SIGNAL(triggered()), this, SLOT(lockCoin()));\n-    connect(unlockAction, SIGNAL(triggered()), this, SLOT(unlockCoin()));\n+    connect(ui->treeWidget, &QWidget::customContextMenuRequested, this, &CoinControlDialog::showMenu);\n+    connect(copyAddressAction, &QAction::triggered, this, &CoinControlDialog::copyAddress);\n+    connect(copyLabelAction, &QAction::triggered, this, &CoinControlDialog::copyLabel);\n+    connect(copyAmountAction, &QAction::triggered, this, &CoinControlDialog::copyAmount);\n+    connect(copyTransactionHashAction, &QAction::triggered, this, &CoinControlDialog::copyTransactionHash);\n+    connect(lockAction, &QAction::triggered, this, &CoinControlDialog::lockCoin);\n+    connect(unlockAction, &QAction::triggered, this, &CoinControlDialog::unlockCoin);\n \n     // clipboard actions\n     QAction *clipboardQuantityAction = new QAction(tr(\"Copy quantity\"), this);\n@@ -85,13 +85,13 @@ CoinControlDialog::CoinControlDialog(const PlatformStyle *_platformStyle, QWidge\n     QAction *clipboardLowOutputAction = new QAction(tr(\"Copy dust\"), this);\n     QAction *clipboardChangeAction = new QAction(tr(\"Copy change\"), this);\n \n-    connect(clipboardQuantityAction, SIGNAL(triggered()), this, SLOT(clipboardQuantity()));\n-    connect(clipboardAmountAction, SIGNAL(triggered()), this, SLOT(clipboardAmount()));\n-    connect(clipboardFeeAction, SIGNAL(triggered()), this, SLOT(clipboardFee()));\n-    connect(clipboardAfterFeeAction, SIGNAL(triggered()), this, SLOT(clipboardAfterFee()));\n-    connect(clipboardBytesAction, SIGNAL(triggered()), this, SLOT(clipboardBytes()));\n-    connect(clipboardLowOutputAction, SIGNAL(triggered()), this, SLOT(clipboardLowOutput()));\n-    connect(clipboardChangeAction, SIGNAL(triggered()), this, SLOT(clipboardChange()));\n+    connect(clipboardQuantityAction, &QAction::triggered, this, &CoinControlDialog::clipboardQuantity);\n+    connect(clipboardAmountAction, &QAction::triggered, this, &CoinControlDialog::clipboardAmount);\n+    connect(clipboardFeeAction, &QAction::triggered, this, &CoinControlDialog::clipboardFee);\n+    connect(clipboardAfterFeeAction, &QAction::triggered, this, &CoinControlDialog::clipboardAfterFee);\n+    connect(clipboardBytesAction, &QAction::triggered, this, &CoinControlDialog::clipboardBytes);\n+    connect(clipboardLowOutputAction, &QAction::triggered, this, &CoinControlDialog::clipboardLowOutput);\n+    connect(clipboardChangeAction, &QAction::triggered, this, &CoinControlDialog::clipboardChange);\n \n     ui->labelCoinControlQuantity->addAction(clipboardQuantityAction);\n     ui->labelCoinControlAmount->addAction(clipboardAmountAction);\n@@ -102,21 +102,21 @@ CoinControlDialog::CoinControlDialog(const PlatformStyle *_platformStyle, QWidge\n     ui->labelCoinControlChange->addAction(clipboardChangeAction);\n \n     // toggle tree/list mode\n-    connect(ui->radioTreeMode, SIGNAL(toggled(bool)), this, SLOT(radioTreeMode(bool)));\n-    connect(ui->radioListMode, SIGNAL(toggled(bool)), this, SLOT(radioListMode(bool)));\n+    connect(ui->radioTreeMode, &QRadioButton::toggled, this, &CoinControlDialog::radioTreeMode);\n+    connect(ui->radioListMode, &QRadioButton::toggled, this, &CoinControlDialog::radioListMode);\n \n     // click on checkbox\n-    connect(ui->treeWidget, SIGNAL(itemChanged(QTreeWidgetItem*, int)), this, SLOT(viewItemChanged(QTreeWidgetItem*, int)));\n+    connect(ui->treeWidget, &QTreeWidget::itemChanged, this, &CoinControlDialog::viewItemChanged);\n \n     // click on header\n     ui->treeWidget->header()->setSectionsClickable(true);\n-    connect(ui->treeWidget->header(), SIGNAL(sectionClicked(int)), this, SLOT(headerSectionClicked(int)));\n+    connect(ui->treeWidget->header(), &QHeaderView::sectionClicked, this, &CoinControlDialog::headerSectionClicked);\n \n     // ok button\n-    connect(ui->buttonBox, SIGNAL(clicked( QAbstractButton*)), this, SLOT(buttonBoxClicked(QAbstractButton*)));\n+    connect(ui->buttonBox, &QDialogButtonBox::clicked, this, &CoinControlDialog::buttonBoxClicked);\n \n     // (un)select all\n-    connect(ui->pushButtonSelectAll, SIGNAL(clicked()), this, SLOT(buttonSelectAllClicked()));\n+    connect(ui->pushButtonSelectAll, &QPushButton::clicked, this, &CoinControlDialog::buttonSelectAllClicked);\n \n     ui->treeWidget->setColumnWidth(COLUMN_CHECKBOX, 84);\n     ui->treeWidget->setColumnWidth(COLUMN_AMOUNT, 110);"
      },
      {
        "sha": "bbf60d96fd6da27d8e43c8cdee020d4626805891",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f78558f1e39198779bdb17e2b0e256fb99ad4b28/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f78558f1e39198779bdb17e2b0e256fb99ad4b28/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=f78558f1e39198779bdb17e2b0e256fb99ad4b28",
        "patch": "@@ -409,15 +409,15 @@ bool ToolTipToRichTextFilter::eventFilter(QObject *obj, QEvent *evt)\n \n void TableViewLastColumnResizingFixer::connectViewHeadersSignals()\n {\n-    connect(tableView->horizontalHeader(), SIGNAL(sectionResized(int,int,int)), this, SLOT(on_sectionResized(int,int,int)));\n-    connect(tableView->horizontalHeader(), SIGNAL(geometriesChanged()), this, SLOT(on_geometriesChanged()));\n+    connect(tableView->horizontalHeader(), &QHeaderView::sectionResized, this, &TableViewLastColumnResizingFixer::on_sectionResized);\n+    connect(tableView->horizontalHeader(), &QHeaderView::geometriesChanged, this, &TableViewLastColumnResizingFixer::on_geometriesChanged);\n }\n \n // We need to disconnect these while handling the resize events, otherwise we can enter infinite loops.\n void TableViewLastColumnResizingFixer::disconnectViewHeadersSignals()\n {\n-    disconnect(tableView->horizontalHeader(), SIGNAL(sectionResized(int,int,int)), this, SLOT(on_sectionResized(int,int,int)));\n-    disconnect(tableView->horizontalHeader(), SIGNAL(geometriesChanged()), this, SLOT(on_geometriesChanged()));\n+    disconnect(tableView->horizontalHeader(), &QHeaderView::sectionResized, this, &TableViewLastColumnResizingFixer::on_sectionResized);\n+    disconnect(tableView->horizontalHeader(), &QHeaderView::geometriesChanged, this, &TableViewLastColumnResizingFixer::on_geometriesChanged);\n }\n \n // Setup the resize mode, handles compatibility for Qt5 and below as the method signatures changed."
      },
      {
        "sha": "b19cc17a4d8426e3fe5708e8b5988aa5c7f8a61f",
        "filename": "src/qt/intro.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f78558f1e39198779bdb17e2b0e256fb99ad4b28/src/qt/intro.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f78558f1e39198779bdb17e2b0e256fb99ad4b28/src/qt/intro.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.cpp?ref=f78558f1e39198779bdb17e2b0e256fb99ad4b28",
        "patch": "@@ -303,11 +303,11 @@ void Intro::startThread()\n     FreespaceChecker *executor = new FreespaceChecker(this);\n     executor->moveToThread(thread);\n \n-    connect(executor, SIGNAL(reply(int,QString,quint64)), this, SLOT(setStatus(int,QString,quint64)));\n-    connect(this, SIGNAL(requestCheck()), executor, SLOT(check()));\n+    connect(executor, &FreespaceChecker::reply, this, &Intro::setStatus);\n+    connect(this, &Intro::requestCheck, executor, &FreespaceChecker::check);\n     /*  make sure executor object is deleted in its own thread */\n-    connect(this, SIGNAL(stopThread()), executor, SLOT(deleteLater()));\n-    connect(this, SIGNAL(stopThread()), thread, SLOT(quit()));\n+    connect(this, &Intro::stopThread, executor, &QObject::deleteLater);\n+    connect(this, &Intro::stopThread, thread, &QThread::quit);\n \n     thread->start();\n }"
      },
      {
        "sha": "c5bedf007a6aea90a29fa95d24a711c8da8b25e9",
        "filename": "src/qt/modaloverlay.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f78558f1e39198779bdb17e2b0e256fb99ad4b28/src/qt/modaloverlay.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f78558f1e39198779bdb17e2b0e256fb99ad4b28/src/qt/modaloverlay.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/modaloverlay.cpp?ref=f78558f1e39198779bdb17e2b0e256fb99ad4b28",
        "patch": "@@ -21,7 +21,7 @@ layerIsVisible(false),\n userClosed(false)\n {\n     ui->setupUi(this);\n-    connect(ui->closeButton, SIGNAL(clicked()), this, SLOT(closeClicked()));\n+    connect(ui->closeButton, &QPushButton::clicked, this, &ModalOverlay::closeClicked);\n     if (parent) {\n         parent->installEventFilter(this);\n         raise();"
      },
      {
        "sha": "b51322394fce19fd39d4deac1a9ee318f0672822",
        "filename": "src/qt/optionsdialog.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 23,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f78558f1e39198779bdb17e2b0e256fb99ad4b28/src/qt/optionsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f78558f1e39198779bdb17e2b0e256fb99ad4b28/src/qt/optionsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsdialog.cpp?ref=f78558f1e39198779bdb17e2b0e256fb99ad4b28",
        "patch": "@@ -46,7 +46,7 @@ OptionsDialog::OptionsDialog(QWidget *parent, bool enableWallet) :\n     ui->pruneWarning->setStyleSheet(\"QLabel { color: red; }\");\n \n     ui->pruneSize->setEnabled(false);\n-    connect(ui->prune, SIGNAL(toggled(bool)), ui->pruneSize, SLOT(setEnabled(bool)));\n+    connect(ui->prune, &QPushButton::toggled, ui->pruneSize, &QWidget::setEnabled);\n \n     /* Network elements init */\n #ifndef USE_UPNP\n@@ -61,13 +61,13 @@ OptionsDialog::OptionsDialog(QWidget *parent, bool enableWallet) :\n     ui->proxyPortTor->setEnabled(false);\n     ui->proxyPortTor->setValidator(new QIntValidator(1, 65535, this));\n \n-    connect(ui->connectSocks, SIGNAL(toggled(bool)), ui->proxyIp, SLOT(setEnabled(bool)));\n-    connect(ui->connectSocks, SIGNAL(toggled(bool)), ui->proxyPort, SLOT(setEnabled(bool)));\n-    connect(ui->connectSocks, SIGNAL(toggled(bool)), this, SLOT(updateProxyValidationState()));\n+    connect(ui->connectSocks, &QPushButton::toggled, ui->proxyIp, &QWidget::setEnabled);\n+    connect(ui->connectSocks, &QPushButton::toggled, ui->proxyPort, &QWidget::setEnabled);\n+    connect(ui->connectSocks, &QPushButton::toggled, this, &OptionsDialog::updateProxyValidationState);\n \n-    connect(ui->connectSocksTor, SIGNAL(toggled(bool)), ui->proxyIpTor, SLOT(setEnabled(bool)));\n-    connect(ui->connectSocksTor, SIGNAL(toggled(bool)), ui->proxyPortTor, SLOT(setEnabled(bool)));\n-    connect(ui->connectSocksTor, SIGNAL(toggled(bool)), this, SLOT(updateProxyValidationState()));\n+    connect(ui->connectSocksTor, &QPushButton::toggled, ui->proxyIpTor, &QWidget::setEnabled);\n+    connect(ui->connectSocksTor, &QPushButton::toggled, ui->proxyPortTor, &QWidget::setEnabled);\n+    connect(ui->connectSocksTor, &QPushButton::toggled, this, &OptionsDialog::updateProxyValidationState);\n \n     /* Window elements init */\n #ifdef Q_OS_MAC\n@@ -122,10 +122,10 @@ OptionsDialog::OptionsDialog(QWidget *parent, bool enableWallet) :\n     /* setup/change UI elements when proxy IPs are invalid/valid */\n     ui->proxyIp->setCheckValidator(new ProxyAddressValidator(parent));\n     ui->proxyIpTor->setCheckValidator(new ProxyAddressValidator(parent));\n-    connect(ui->proxyIp, SIGNAL(validationDidChange(QValidatedLineEdit *)), this, SLOT(updateProxyValidationState()));\n-    connect(ui->proxyIpTor, SIGNAL(validationDidChange(QValidatedLineEdit *)), this, SLOT(updateProxyValidationState()));\n-    connect(ui->proxyPort, SIGNAL(textChanged(const QString&)), this, SLOT(updateProxyValidationState()));\n-    connect(ui->proxyPortTor, SIGNAL(textChanged(const QString&)), this, SLOT(updateProxyValidationState()));\n+    connect(ui->proxyIp, &QValidatedLineEdit::validationDidChange, this, &OptionsDialog::updateProxyValidationState);\n+    connect(ui->proxyIpTor, &QValidatedLineEdit::validationDidChange, this, &OptionsDialog::updateProxyValidationState);\n+    connect(ui->proxyPort, &QLineEdit::textChanged, this, &OptionsDialog::updateProxyValidationState);\n+    connect(ui->proxyPortTor, &QLineEdit::textChanged, this, &OptionsDialog::updateProxyValidationState);\n }\n \n OptionsDialog::~OptionsDialog()\n@@ -158,20 +158,20 @@ void OptionsDialog::setModel(OptionsModel *_model)\n     /* warn when one of the following settings changes by user action (placed here so init via mapper doesn't trigger them) */\n \n     /* Main */\n-    connect(ui->prune, SIGNAL(clicked(bool)), this, SLOT(showRestartWarning()));\n-    connect(ui->prune, SIGNAL(clicked(bool)), this, SLOT(togglePruneWarning(bool)));\n-    connect(ui->pruneSize, SIGNAL(valueChanged(int)), this, SLOT(showRestartWarning()));\n-    connect(ui->databaseCache, SIGNAL(valueChanged(int)), this, SLOT(showRestartWarning()));\n-    connect(ui->threadsScriptVerif, SIGNAL(valueChanged(int)), this, SLOT(showRestartWarning()));\n+    connect(ui->prune, &QCheckBox::clicked, this, &OptionsDialog::showRestartWarning);\n+    connect(ui->prune, &QCheckBox::clicked, this, &OptionsDialog::togglePruneWarning);\n+    connect(ui->pruneSize, static_cast<void (QSpinBox::*)(int)>(&QSpinBox::valueChanged), this, &OptionsDialog::showRestartWarning);\n+    connect(ui->databaseCache, static_cast<void (QSpinBox::*)(int)>(&QSpinBox::valueChanged), this, &OptionsDialog::showRestartWarning);\n+    connect(ui->threadsScriptVerif, static_cast<void (QSpinBox::*)(int)>(&QSpinBox::valueChanged), this, &OptionsDialog::showRestartWarning);\n     /* Wallet */\n-    connect(ui->spendZeroConfChange, SIGNAL(clicked(bool)), this, SLOT(showRestartWarning()));\n+    connect(ui->spendZeroConfChange, &QCheckBox::clicked, this, &OptionsDialog::showRestartWarning);\n     /* Network */\n-    connect(ui->allowIncoming, SIGNAL(clicked(bool)), this, SLOT(showRestartWarning()));\n-    connect(ui->connectSocks, SIGNAL(clicked(bool)), this, SLOT(showRestartWarning()));\n-    connect(ui->connectSocksTor, SIGNAL(clicked(bool)), this, SLOT(showRestartWarning()));\n+    connect(ui->allowIncoming, &QCheckBox::clicked, this, &OptionsDialog::showRestartWarning);\n+    connect(ui->connectSocks, &QCheckBox::clicked, this, &OptionsDialog::showRestartWarning);\n+    connect(ui->connectSocksTor, &QCheckBox::clicked, this, &OptionsDialog::showRestartWarning);\n     /* Display */\n-    connect(ui->lang, SIGNAL(valueChanged()), this, SLOT(showRestartWarning()));\n-    connect(ui->thirdPartyTxUrls, SIGNAL(textChanged(const QString &)), this, SLOT(showRestartWarning()));\n+    connect(ui->lang, static_cast<void (QValueComboBox::*)()>(&QValueComboBox::valueChanged), [this]{ showRestartWarning(); });\n+    connect(ui->thirdPartyTxUrls, &QLineEdit::textChanged, [this]{ showRestartWarning(); });\n }\n \n void OptionsDialog::setCurrentTab(OptionsDialog::Tab tab)\n@@ -300,7 +300,7 @@ void OptionsDialog::showRestartWarning(bool fPersistent)\n         ui->statusLabel->setText(tr(\"This change would require a client restart.\"));\n         // clear non-persistent status label after 10 seconds\n         // Todo: should perhaps be a class attribute, if we extend the use of statusLabel\n-        QTimer::singleShot(10000, this, SLOT(clearStatusLabel()));\n+        QTimer::singleShot(10000, this, &OptionsDialog::clearStatusLabel);\n     }\n }\n "
      },
      {
        "sha": "1db9609979d2afa36f0c7a14a308a74804c4d6e0",
        "filename": "src/qt/overviewpage.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f78558f1e39198779bdb17e2b0e256fb99ad4b28/src/qt/overviewpage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f78558f1e39198779bdb17e2b0e256fb99ad4b28/src/qt/overviewpage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/overviewpage.cpp?ref=f78558f1e39198779bdb17e2b0e256fb99ad4b28",
        "patch": "@@ -133,12 +133,12 @@ OverviewPage::OverviewPage(const PlatformStyle *platformStyle, QWidget *parent)\n     ui->listTransactions->setMinimumHeight(NUM_ITEMS * (DECORATION_SIZE + 2));\n     ui->listTransactions->setAttribute(Qt::WA_MacShowFocusRect, false);\n \n-    connect(ui->listTransactions, SIGNAL(clicked(QModelIndex)), this, SLOT(handleTransactionClicked(QModelIndex)));\n+    connect(ui->listTransactions, &QListView::clicked, this, &OverviewPage::handleTransactionClicked);\n \n     // start with displaying the \"out of sync\" warnings\n     showOutOfSyncWarning(true);\n-    connect(ui->labelWalletStatus, SIGNAL(clicked()), this, SLOT(handleOutOfSyncWarningClicks()));\n-    connect(ui->labelTransactionsStatus, SIGNAL(clicked()), this, SLOT(handleOutOfSyncWarningClicks()));\n+    connect(ui->labelWalletStatus, &QPushButton::clicked, this, &OverviewPage::handleOutOfSyncWarningClicks);\n+    connect(ui->labelTransactionsStatus, &QPushButton::clicked, this, &OverviewPage::handleOutOfSyncWarningClicks);\n }\n \n void OverviewPage::handleTransactionClicked(const QModelIndex &index)\n@@ -201,7 +201,7 @@ void OverviewPage::setClientModel(ClientModel *model)\n     if(model)\n     {\n         // Show warning if this is a prerelease version\n-        connect(model, SIGNAL(alertsChanged(QString)), this, SLOT(updateAlerts(QString)));\n+        connect(model, &ClientModel::alertsChanged, this, &OverviewPage::updateAlerts);\n         updateAlerts(model->getStatusBarWarnings());\n     }\n }\n@@ -227,12 +227,12 @@ void OverviewPage::setWalletModel(WalletModel *model)\n         interfaces::Wallet& wallet = model->wallet();\n         interfaces::WalletBalances balances = wallet.getBalances();\n         setBalance(balances);\n-        connect(model, SIGNAL(balanceChanged(interfaces::WalletBalances)), this, SLOT(setBalance(interfaces::WalletBalances)));\n+        connect(model, &WalletModel::balanceChanged, this, &OverviewPage::setBalance);\n \n-        connect(model->getOptionsModel(), SIGNAL(displayUnitChanged(int)), this, SLOT(updateDisplayUnit()));\n+        connect(model->getOptionsModel(), &OptionsModel::displayUnitChanged, this, &OverviewPage::updateDisplayUnit);\n \n         updateWatchOnlyLabels(wallet.haveWatchOnly());\n-        connect(model, SIGNAL(notifyWatchonlyChanged(bool)), this, SLOT(updateWatchOnlyLabels(bool)));\n+        connect(model, &WalletModel::notifyWatchonlyChanged, this, &OverviewPage::updateWatchOnlyLabels);\n     }\n \n     // update the display unit, to not use the default (\"BTC\")"
      },
      {
        "sha": "bcafc8f859f9a71e9e46d5aa6cadcc4668f6d360",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 8,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f78558f1e39198779bdb17e2b0e256fb99ad4b28/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f78558f1e39198779bdb17e2b0e256fb99ad4b28/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=f78558f1e39198779bdb17e2b0e256fb99ad4b28",
        "patch": "@@ -318,8 +318,8 @@ PaymentServer::PaymentServer(QObject* parent, bool startLocalServer) :\n                 tr(\"Cannot start bitcoin: click-to-pay handler\"));\n         }\n         else {\n-            connect(uriServer, SIGNAL(newConnection()), this, SLOT(handleURIConnection()));\n-            connect(this, SIGNAL(receivedPaymentACK(QString)), this, SLOT(handlePaymentACK(QString)));\n+            connect(uriServer, &QLocalServer::newConnection, this, &PaymentServer::handleURIConnection);\n+            connect(this, &PaymentServer::receivedPaymentACK, this, &PaymentServer::handlePaymentACK);\n         }\n     }\n }\n@@ -369,10 +369,8 @@ void PaymentServer::initNetManager()\n     else\n         qDebug() << \"PaymentServer::initNetManager: No active proxy server found.\";\n \n-    connect(netManager, SIGNAL(finished(QNetworkReply*)),\n-            this, SLOT(netRequestFinished(QNetworkReply*)));\n-    connect(netManager, SIGNAL(sslErrors(QNetworkReply*, const QList<QSslError> &)),\n-            this, SLOT(reportSslErrors(QNetworkReply*, const QList<QSslError> &)));\n+    connect(netManager, &QNetworkAccessManager::finished, this, &PaymentServer::netRequestFinished);\n+    connect(netManager, &QNetworkAccessManager::sslErrors, this, &PaymentServer::reportSslErrors);\n }\n \n void PaymentServer::uiReady()\n@@ -470,8 +468,7 @@ void PaymentServer::handleURIConnection()\n     while (clientConnection->bytesAvailable() < (int)sizeof(quint32))\n         clientConnection->waitForReadyRead();\n \n-    connect(clientConnection, SIGNAL(disconnected()),\n-            clientConnection, SLOT(deleteLater()));\n+    connect(clientConnection, &QLocalSocket::disconnected, clientConnection, &QLocalSocket::deleteLater);\n \n     QDataStream in(clientConnection);\n     in.setVersion(QDataStream::Qt_4_0);"
      },
      {
        "sha": "59a751fb124f151f53c8b188c89478ffd382c7f6",
        "filename": "src/qt/peertablemodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f78558f1e39198779bdb17e2b0e256fb99ad4b28/src/qt/peertablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f78558f1e39198779bdb17e2b0e256fb99ad4b28/src/qt/peertablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/peertablemodel.cpp?ref=f78558f1e39198779bdb17e2b0e256fb99ad4b28",
        "patch": "@@ -113,7 +113,7 @@ PeerTableModel::PeerTableModel(interfaces::Node& node, ClientModel *parent) :\n \n     // set up timer for auto refresh\n     timer = new QTimer(this);\n-    connect(timer, SIGNAL(timeout()), SLOT(refresh()));\n+    connect(timer, &QTimer::timeout, this, &PeerTableModel::refresh);\n     timer->setInterval(MODEL_UPDATE_DELAY);\n \n     // load initial data"
      },
      {
        "sha": "85c5a58a843c381802e14ae3d90bb77c14d32feb",
        "filename": "src/qt/qvalidatedlineedit.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f78558f1e39198779bdb17e2b0e256fb99ad4b28/src/qt/qvalidatedlineedit.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f78558f1e39198779bdb17e2b0e256fb99ad4b28/src/qt/qvalidatedlineedit.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/qvalidatedlineedit.cpp?ref=f78558f1e39198779bdb17e2b0e256fb99ad4b28",
        "patch": "@@ -12,7 +12,7 @@ QValidatedLineEdit::QValidatedLineEdit(QWidget *parent) :\n     valid(true),\n     checkValidator(0)\n {\n-    connect(this, SIGNAL(textChanged(QString)), this, SLOT(markValid()));\n+    connect(this, &QValidatedLineEdit::textChanged, this, &QValidatedLineEdit::markValid);\n }\n \n void QValidatedLineEdit::setValid(bool _valid)"
      },
      {
        "sha": "76f94ecf85debd3eea701324ed81566fc1fe4b47",
        "filename": "src/qt/qvaluecombobox.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f78558f1e39198779bdb17e2b0e256fb99ad4b28/src/qt/qvaluecombobox.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f78558f1e39198779bdb17e2b0e256fb99ad4b28/src/qt/qvaluecombobox.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/qvaluecombobox.cpp?ref=f78558f1e39198779bdb17e2b0e256fb99ad4b28",
        "patch": "@@ -7,7 +7,7 @@\n QValueComboBox::QValueComboBox(QWidget *parent) :\n         QComboBox(parent), role(Qt::UserRole)\n {\n-    connect(this, SIGNAL(currentIndexChanged(int)), this, SLOT(handleSelectionChanged(int)));\n+    connect(this, static_cast<void (QComboBox::*)(int)>(&QComboBox::currentIndexChanged), this, &QValueComboBox::handleSelectionChanged);\n }\n \n QVariant QValueComboBox::value() const"
      },
      {
        "sha": "a7cc5da19e12b95215e79ff33ef94a8026b0aba0",
        "filename": "src/qt/receivecoinsdialog.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f78558f1e39198779bdb17e2b0e256fb99ad4b28/src/qt/receivecoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f78558f1e39198779bdb17e2b0e256fb99ad4b28/src/qt/receivecoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/receivecoinsdialog.cpp?ref=f78558f1e39198779bdb17e2b0e256fb99ad4b28",
        "patch": "@@ -57,13 +57,13 @@ ReceiveCoinsDialog::ReceiveCoinsDialog(const PlatformStyle *_platformStyle, QWid\n     contextMenu->addAction(copyAmountAction);\n \n     // context menu signals\n-    connect(ui->recentRequestsView, SIGNAL(customContextMenuRequested(QPoint)), this, SLOT(showMenu(QPoint)));\n-    connect(copyURIAction, SIGNAL(triggered()), this, SLOT(copyURI()));\n-    connect(copyLabelAction, SIGNAL(triggered()), this, SLOT(copyLabel()));\n-    connect(copyMessageAction, SIGNAL(triggered()), this, SLOT(copyMessage()));\n-    connect(copyAmountAction, SIGNAL(triggered()), this, SLOT(copyAmount()));\n+    connect(ui->recentRequestsView, &QWidget::customContextMenuRequested, this, &ReceiveCoinsDialog::showMenu);\n+    connect(copyURIAction, &QAction::triggered, this, &ReceiveCoinsDialog::copyURI);\n+    connect(copyLabelAction, &QAction::triggered, this, &ReceiveCoinsDialog::copyLabel);\n+    connect(copyMessageAction, &QAction::triggered, this, &ReceiveCoinsDialog::copyMessage);\n+    connect(copyAmountAction, &QAction::triggered, this, &ReceiveCoinsDialog::copyAmount);\n \n-    connect(ui->clearButton, SIGNAL(clicked()), this, SLOT(clear()));\n+    connect(ui->clearButton, &QPushButton::clicked, this, &ReceiveCoinsDialog::clear);\n }\n \n void ReceiveCoinsDialog::setModel(WalletModel *_model)\n@@ -73,7 +73,7 @@ void ReceiveCoinsDialog::setModel(WalletModel *_model)\n     if(_model && _model->getOptionsModel())\n     {\n         _model->getRecentRequestsTableModel()->sort(RecentRequestsTableModel::Date, Qt::DescendingOrder);\n-        connect(_model->getOptionsModel(), SIGNAL(displayUnitChanged(int)), this, SLOT(updateDisplayUnit()));\n+        connect(_model->getOptionsModel(), &OptionsModel::displayUnitChanged, this, &ReceiveCoinsDialog::updateDisplayUnit);\n         updateDisplayUnit();\n \n         QTableView* tableView = ui->recentRequestsView;\n@@ -89,8 +89,8 @@ void ReceiveCoinsDialog::setModel(WalletModel *_model)\n         tableView->setColumnWidth(RecentRequestsTableModel::Amount, AMOUNT_MINIMUM_COLUMN_WIDTH);\n \n         connect(tableView->selectionModel(),\n-            SIGNAL(selectionChanged(QItemSelection, QItemSelection)), this,\n-            SLOT(recentRequestsView_selectionChanged(QItemSelection, QItemSelection)));\n+            &QItemSelectionModel::selectionChanged, this,\n+            &ReceiveCoinsDialog::recentRequestsView_selectionChanged);\n         // Last 2 columns are set by the columnResizingFixer, when the table geometry is ready.\n         columnResizingFixer = new GUIUtil::TableViewLastColumnResizingFixer(tableView, AMOUNT_MINIMUM_COLUMN_WIDTH, DATE_COLUMN_WIDTH, this);\n "
      },
      {
        "sha": "c561d948beb56f73e79434ec258161fad358f9b2",
        "filename": "src/qt/receiverequestdialog.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f78558f1e39198779bdb17e2b0e256fb99ad4b28/src/qt/receiverequestdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f78558f1e39198779bdb17e2b0e256fb99ad4b28/src/qt/receiverequestdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/receiverequestdialog.cpp?ref=f78558f1e39198779bdb17e2b0e256fb99ad4b28",
        "patch": "@@ -30,10 +30,10 @@ QRImageWidget::QRImageWidget(QWidget *parent):\n {\n     contextMenu = new QMenu(this);\n     QAction *saveImageAction = new QAction(tr(\"&Save Image...\"), this);\n-    connect(saveImageAction, SIGNAL(triggered()), this, SLOT(saveImage()));\n+    connect(saveImageAction, &QAction::triggered, this, &QRImageWidget::saveImage);\n     contextMenu->addAction(saveImageAction);\n     QAction *copyImageAction = new QAction(tr(\"&Copy Image\"), this);\n-    connect(copyImageAction, SIGNAL(triggered()), this, SLOT(copyImage()));\n+    connect(copyImageAction, &QAction::triggered, this, &QRImageWidget::copyImage);\n     contextMenu->addAction(copyImageAction);\n }\n \n@@ -97,7 +97,7 @@ ReceiveRequestDialog::ReceiveRequestDialog(QWidget *parent) :\n     ui->lblQRCode->setVisible(false);\n #endif\n \n-    connect(ui->btnSaveAs, SIGNAL(clicked()), ui->lblQRCode, SLOT(saveImage()));\n+    connect(ui->btnSaveAs, &QPushButton::clicked, ui->lblQRCode, &QRImageWidget::saveImage);\n }\n \n ReceiveRequestDialog::~ReceiveRequestDialog()\n@@ -110,7 +110,7 @@ void ReceiveRequestDialog::setModel(WalletModel *_model)\n     this->model = _model;\n \n     if (_model)\n-        connect(_model->getOptionsModel(), SIGNAL(displayUnitChanged(int)), this, SLOT(update()));\n+        connect(_model->getOptionsModel(), &OptionsModel::displayUnitChanged, this, &ReceiveRequestDialog::update);\n \n     // update the display unit if necessary\n     update();"
      },
      {
        "sha": "82ab48ac20c144f5fd1b26b5b590a6fb1ba73c3c",
        "filename": "src/qt/recentrequeststablemodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f78558f1e39198779bdb17e2b0e256fb99ad4b28/src/qt/recentrequeststablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f78558f1e39198779bdb17e2b0e256fb99ad4b28/src/qt/recentrequeststablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/recentrequeststablemodel.cpp?ref=f78558f1e39198779bdb17e2b0e256fb99ad4b28",
        "patch": "@@ -26,7 +26,7 @@ RecentRequestsTableModel::RecentRequestsTableModel(WalletModel *parent) :\n     /* These columns must match the indices in the ColumnIndex enumeration */\n     columns << tr(\"Date\") << tr(\"Label\") << tr(\"Message\") << getAmountTitle();\n \n-    connect(walletModel->getOptionsModel(), SIGNAL(displayUnitChanged(int)), this, SLOT(updateDisplayUnit()));\n+    connect(walletModel->getOptionsModel(), &OptionsModel::displayUnitChanged, this, &RecentRequestsTableModel::updateDisplayUnit);\n }\n \n RecentRequestsTableModel::~RecentRequestsTableModel()"
      },
      {
        "sha": "66e36f0b677a07a159169e50dc0925daf93983c3",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 31,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f78558f1e39198779bdb17e2b0e256fb99ad4b28/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f78558f1e39198779bdb17e2b0e256fb99ad4b28/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=f78558f1e39198779bdb17e2b0e256fb99ad4b28",
        "patch": "@@ -105,12 +105,10 @@ class QtRPCTimerBase: public QObject, public RPCTimerBase\n         func(_func)\n     {\n         timer.setSingleShot(true);\n-        connect(&timer, SIGNAL(timeout()), this, SLOT(timeout()));\n+        connect(&timer, &QTimer::timeout, [this]{ func(); });\n         timer.start(millis);\n     }\n     ~QtRPCTimerBase() {}\n-private Q_SLOTS:\n-    void timeout() { func(); }\n private:\n     QTimer timer;\n     std::function<void(void)> func;\n@@ -474,10 +472,10 @@ RPCConsole::RPCConsole(interfaces::Node& node, const PlatformStyle *_platformSty\n     ui->lineEdit->installEventFilter(this);\n     ui->messagesWidget->installEventFilter(this);\n \n-    connect(ui->clearButton, SIGNAL(clicked()), this, SLOT(clear()));\n-    connect(ui->fontBiggerButton, SIGNAL(clicked()), this, SLOT(fontBigger()));\n-    connect(ui->fontSmallerButton, SIGNAL(clicked()), this, SLOT(fontSmaller()));\n-    connect(ui->btnClearTrafficGraph, SIGNAL(clicked()), ui->trafficGraph, SLOT(clear()));\n+    connect(ui->clearButton, &QPushButton::clicked, this, &RPCConsole::clear);\n+    connect(ui->fontBiggerButton, &QPushButton::clicked, this, &RPCConsole::fontBigger);\n+    connect(ui->fontSmallerButton, &QPushButton::clicked, this, &RPCConsole::fontSmaller);\n+    connect(ui->btnClearTrafficGraph, &QPushButton::clicked, ui->trafficGraph, &TrafficGraphWidget::clear);\n \n     // disable the wallet selector by default\n     ui->WalletSelector->setVisible(false);\n@@ -565,19 +563,19 @@ void RPCConsole::setClientModel(ClientModel *model)\n     if (model && clientModel->getPeerTableModel() && clientModel->getBanTableModel()) {\n         // Keep up to date with client\n         setNumConnections(model->getNumConnections());\n-        connect(model, SIGNAL(numConnectionsChanged(int)), this, SLOT(setNumConnections(int)));\n+        connect(model, &ClientModel::numConnectionsChanged, this, &RPCConsole::setNumConnections);\n \n         interfaces::Node& node = clientModel->node();\n         setNumBlocks(node.getNumBlocks(), QDateTime::fromTime_t(node.getLastBlockTime()), node.getVerificationProgress(), false);\n-        connect(model, SIGNAL(numBlocksChanged(int,QDateTime,double,bool)), this, SLOT(setNumBlocks(int,QDateTime,double,bool)));\n+        connect(model, &ClientModel::numBlocksChanged, this, &RPCConsole::setNumBlocks);\n \n         updateNetworkState();\n-        connect(model, SIGNAL(networkActiveChanged(bool)), this, SLOT(setNetworkActive(bool)));\n+        connect(model, &ClientModel::networkActiveChanged, this, &RPCConsole::setNetworkActive);\n \n         updateTrafficStats(node.getTotalBytesRecv(), node.getTotalBytesSent());\n-        connect(model, SIGNAL(bytesChanged(quint64,quint64)), this, SLOT(updateTrafficStats(quint64, quint64)));\n+        connect(model, &ClientModel::bytesChanged, this, &RPCConsole::updateTrafficStats);\n \n-        connect(model, SIGNAL(mempoolSizeChanged(long,size_t)), this, SLOT(setMempoolSize(long,size_t)));\n+        connect(model, &ClientModel::mempoolSizeChanged, this, &RPCConsole::setMempoolSize);\n \n         // set up peer table\n         ui->peerWidget->setModel(model->getPeerTableModel());\n@@ -614,23 +612,22 @@ void RPCConsole::setClientModel(ClientModel *model)\n         signalMapper->setMapping(banAction24h, 60*60*24);\n         signalMapper->setMapping(banAction7d, 60*60*24*7);\n         signalMapper->setMapping(banAction365d, 60*60*24*365);\n-        connect(banAction1h, SIGNAL(triggered()), signalMapper, SLOT(map()));\n-        connect(banAction24h, SIGNAL(triggered()), signalMapper, SLOT(map()));\n-        connect(banAction7d, SIGNAL(triggered()), signalMapper, SLOT(map()));\n-        connect(banAction365d, SIGNAL(triggered()), signalMapper, SLOT(map()));\n-        connect(signalMapper, SIGNAL(mapped(int)), this, SLOT(banSelectedNode(int)));\n+        connect(banAction1h, &QAction::triggered, signalMapper, static_cast<void (QSignalMapper::*)()>(&QSignalMapper::map));\n+        connect(banAction24h, &QAction::triggered, signalMapper, static_cast<void (QSignalMapper::*)()>(&QSignalMapper::map));\n+        connect(banAction7d, &QAction::triggered, signalMapper, static_cast<void (QSignalMapper::*)()>(&QSignalMapper::map));\n+        connect(banAction365d, &QAction::triggered, signalMapper, static_cast<void (QSignalMapper::*)()>(&QSignalMapper::map));\n+        connect(signalMapper, static_cast<void (QSignalMapper::*)(int)>(&QSignalMapper::mapped), this, &RPCConsole::banSelectedNode);\n \n         // peer table context menu signals\n-        connect(ui->peerWidget, SIGNAL(customContextMenuRequested(const QPoint&)), this, SLOT(showPeersTableContextMenu(const QPoint&)));\n-        connect(disconnectAction, SIGNAL(triggered()), this, SLOT(disconnectSelectedNode()));\n+        connect(ui->peerWidget, &QTableView::customContextMenuRequested, this, &RPCConsole::showPeersTableContextMenu);\n+        connect(disconnectAction, &QAction::triggered, this, &RPCConsole::disconnectSelectedNode);\n \n         // peer table signal handling - update peer details when selecting new node\n-        connect(ui->peerWidget->selectionModel(), SIGNAL(selectionChanged(const QItemSelection &, const QItemSelection &)),\n-            this, SLOT(peerSelected(const QItemSelection &, const QItemSelection &)));\n+        connect(ui->peerWidget->selectionModel(), &QItemSelectionModel::selectionChanged, this, &RPCConsole::peerSelected);\n         // peer table signal handling - update peer details when new nodes are added to the model\n-        connect(model->getPeerTableModel(), SIGNAL(layoutChanged()), this, SLOT(peerLayoutChanged()));\n+        connect(model->getPeerTableModel(), &PeerTableModel::layoutChanged, this, &RPCConsole::peerLayoutChanged);\n         // peer table signal handling - cache selected node ids\n-        connect(model->getPeerTableModel(), SIGNAL(layoutAboutToBeChanged()), this, SLOT(peerLayoutAboutToChange()));\n+        connect(model->getPeerTableModel(), &PeerTableModel::layoutAboutToBeChanged, this, &RPCConsole::peerLayoutAboutToChange);\n \n         // set up ban table\n         ui->banlistWidget->setModel(model->getBanTableModel());\n@@ -651,13 +648,13 @@ void RPCConsole::setClientModel(ClientModel *model)\n         banTableContextMenu->addAction(unbanAction);\n \n         // ban table context menu signals\n-        connect(ui->banlistWidget, SIGNAL(customContextMenuRequested(const QPoint&)), this, SLOT(showBanTableContextMenu(const QPoint&)));\n-        connect(unbanAction, SIGNAL(triggered()), this, SLOT(unbanSelectedNode()));\n+        connect(ui->banlistWidget, &QTableView::customContextMenuRequested, this, &RPCConsole::showBanTableContextMenu);\n+        connect(unbanAction, &QAction::triggered, this, &RPCConsole::unbanSelectedNode);\n \n         // ban table signal handling - clear peer details when clicking a peer in the ban table\n-        connect(ui->banlistWidget, SIGNAL(clicked(const QModelIndex&)), this, SLOT(clearSelectedNode()));\n+        connect(ui->banlistWidget, &QTableView::clicked, this, &RPCConsole::clearSelectedNode);\n         // ban table signal handling - ensure ban table is shown or hidden (if empty)\n-        connect(model->getBanTableModel(), SIGNAL(layoutChanged()), this, SLOT(showOrHideBanTableIfRequired()));\n+        connect(model->getBanTableModel(), &BanTableModel::layoutChanged, this, &RPCConsole::showOrHideBanTableIfRequired);\n         showOrHideBanTableIfRequired();\n \n         // Provide initial values\n@@ -972,15 +969,16 @@ void RPCConsole::startExecutor()\n     executor->moveToThread(&thread);\n \n     // Replies from executor object must go to this object\n-    connect(executor, SIGNAL(reply(int,QString)), this, SLOT(message(int,QString)));\n+    connect(executor, &RPCExecutor::reply, this, static_cast<void (RPCConsole::*)(int, const QString&)>(&RPCConsole::message));\n+\n     // Requests from this object must go to executor\n-    connect(this, SIGNAL(cmdRequest(QString, QString)), executor, SLOT(request(QString, QString)));\n+    connect(this, &RPCConsole::cmdRequest, executor, &RPCExecutor::request);\n \n     // On stopExecutor signal\n     // - quit the Qt event loop in the execution thread\n-    connect(this, SIGNAL(stopExecutor()), &thread, SLOT(quit()));\n+    connect(this, &RPCConsole::stopExecutor, &thread, &QThread::quit);\n     // - queue executor for deletion (in execution thread)\n-    connect(&thread, SIGNAL(finished()), executor, SLOT(deleteLater()), Qt::DirectConnection);\n+    connect(&thread, &QThread::finished, executor, &RPCExecutor::deleteLater, Qt::DirectConnection);\n \n     // Default implementation of QThread::run() simply spins up an event loop in the thread,\n     // which is what we want."
      },
      {
        "sha": "db77043951db841d864bddb826030060d6d16e86",
        "filename": "src/qt/rpcconsole.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f78558f1e39198779bdb17e2b0e256fb99ad4b28/src/qt/rpcconsole.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f78558f1e39198779bdb17e2b0e256fb99ad4b28/src/qt/rpcconsole.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.h?ref=f78558f1e39198779bdb17e2b0e256fb99ad4b28",
        "patch": "@@ -96,7 +96,8 @@ public Q_SLOTS:\n     void fontSmaller();\n     void setFontSize(int newSize);\n     /** Append the message to the message widget */\n-    void message(int category, const QString &message, bool html = false);\n+    void message(int category, const QString &msg) { message(category, msg, false); }\n+    void message(int category, const QString &message, bool html);\n     /** Set number of connections shown in the UI */\n     void setNumConnections(int count);\n     /** Set network state shown in the UI */"
      },
      {
        "sha": "eed71397abd6bc77e975465df5159a673e0964d4",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 32,
        "changes": 64,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f78558f1e39198779bdb17e2b0e256fb99ad4b28/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f78558f1e39198779bdb17e2b0e256fb99ad4b28/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=f78558f1e39198779bdb17e2b0e256fb99ad4b28",
        "patch": "@@ -72,13 +72,13 @@ SendCoinsDialog::SendCoinsDialog(const PlatformStyle *_platformStyle, QWidget *p\n \n     addEntry();\n \n-    connect(ui->addButton, SIGNAL(clicked()), this, SLOT(addEntry()));\n-    connect(ui->clearButton, SIGNAL(clicked()), this, SLOT(clear()));\n+    connect(ui->addButton, &QPushButton::clicked, this, &SendCoinsDialog::addEntry);\n+    connect(ui->clearButton, &QPushButton::clicked, this, &SendCoinsDialog::clear);\n \n     // Coin Control\n-    connect(ui->pushButtonCoinControl, SIGNAL(clicked()), this, SLOT(coinControlButtonClicked()));\n-    connect(ui->checkBoxCoinControlChange, SIGNAL(stateChanged(int)), this, SLOT(coinControlChangeChecked(int)));\n-    connect(ui->lineEditCoinControlChange, SIGNAL(textEdited(const QString &)), this, SLOT(coinControlChangeEdited(const QString &)));\n+    connect(ui->pushButtonCoinControl, &QPushButton::clicked, this, &SendCoinsDialog::coinControlButtonClicked);\n+    connect(ui->checkBoxCoinControlChange, &QCheckBox::stateChanged, this, &SendCoinsDialog::coinControlChangeChecked);\n+    connect(ui->lineEditCoinControlChange, &QValidatedLineEdit::textEdited, this, &SendCoinsDialog::coinControlChangeEdited);\n \n     // Coin Control: clipboard actions\n     QAction *clipboardQuantityAction = new QAction(tr(\"Copy quantity\"), this);\n@@ -88,13 +88,13 @@ SendCoinsDialog::SendCoinsDialog(const PlatformStyle *_platformStyle, QWidget *p\n     QAction *clipboardBytesAction = new QAction(tr(\"Copy bytes\"), this);\n     QAction *clipboardLowOutputAction = new QAction(tr(\"Copy dust\"), this);\n     QAction *clipboardChangeAction = new QAction(tr(\"Copy change\"), this);\n-    connect(clipboardQuantityAction, SIGNAL(triggered()), this, SLOT(coinControlClipboardQuantity()));\n-    connect(clipboardAmountAction, SIGNAL(triggered()), this, SLOT(coinControlClipboardAmount()));\n-    connect(clipboardFeeAction, SIGNAL(triggered()), this, SLOT(coinControlClipboardFee()));\n-    connect(clipboardAfterFeeAction, SIGNAL(triggered()), this, SLOT(coinControlClipboardAfterFee()));\n-    connect(clipboardBytesAction, SIGNAL(triggered()), this, SLOT(coinControlClipboardBytes()));\n-    connect(clipboardLowOutputAction, SIGNAL(triggered()), this, SLOT(coinControlClipboardLowOutput()));\n-    connect(clipboardChangeAction, SIGNAL(triggered()), this, SLOT(coinControlClipboardChange()));\n+    connect(clipboardQuantityAction, &QAction::triggered, this, &SendCoinsDialog::coinControlClipboardQuantity);\n+    connect(clipboardAmountAction, &QAction::triggered, this, &SendCoinsDialog::coinControlClipboardAmount);\n+    connect(clipboardFeeAction, &QAction::triggered, this, &SendCoinsDialog::coinControlClipboardFee);\n+    connect(clipboardAfterFeeAction, &QAction::triggered, this, &SendCoinsDialog::coinControlClipboardAfterFee);\n+    connect(clipboardBytesAction, &QAction::triggered, this, &SendCoinsDialog::coinControlClipboardBytes);\n+    connect(clipboardLowOutputAction, &QAction::triggered, this, &SendCoinsDialog::coinControlClipboardLowOutput);\n+    connect(clipboardChangeAction, &QAction::triggered, this, &SendCoinsDialog::coinControlClipboardChange);\n     ui->labelCoinControlQuantity->addAction(clipboardQuantityAction);\n     ui->labelCoinControlAmount->addAction(clipboardAmountAction);\n     ui->labelCoinControlFee->addAction(clipboardFeeAction);\n@@ -130,7 +130,7 @@ void SendCoinsDialog::setClientModel(ClientModel *_clientModel)\n     this->clientModel = _clientModel;\n \n     if (_clientModel) {\n-        connect(_clientModel, SIGNAL(numBlocksChanged(int,QDateTime,double,bool)), this, SLOT(updateSmartFeeLabel()));\n+        connect(_clientModel, &ClientModel::numBlocksChanged, this, &SendCoinsDialog::updateSmartFeeLabel);\n     }\n }\n \n@@ -151,30 +151,30 @@ void SendCoinsDialog::setModel(WalletModel *_model)\n \n         interfaces::WalletBalances balances = _model->wallet().getBalances();\n         setBalance(balances);\n-        connect(_model, SIGNAL(balanceChanged(interfaces::WalletBalances)), this, SLOT(setBalance(interfaces::WalletBalances)));\n-        connect(_model->getOptionsModel(), SIGNAL(displayUnitChanged(int)), this, SLOT(updateDisplayUnit()));\n+        connect(_model, &WalletModel::balanceChanged, this, &SendCoinsDialog::setBalance);\n+        connect(_model->getOptionsModel(), &OptionsModel::displayUnitChanged, this, &SendCoinsDialog::updateDisplayUnit);\n         updateDisplayUnit();\n \n         // Coin Control\n-        connect(_model->getOptionsModel(), SIGNAL(displayUnitChanged(int)), this, SLOT(coinControlUpdateLabels()));\n-        connect(_model->getOptionsModel(), SIGNAL(coinControlFeaturesChanged(bool)), this, SLOT(coinControlFeatureChanged(bool)));\n+        connect(_model->getOptionsModel(), &OptionsModel::displayUnitChanged, this, &SendCoinsDialog::coinControlUpdateLabels);\n+        connect(_model->getOptionsModel(), &OptionsModel::coinControlFeaturesChanged, this, &SendCoinsDialog::coinControlFeatureChanged);\n         ui->frameCoinControl->setVisible(_model->getOptionsModel()->getCoinControlFeatures());\n         coinControlUpdateLabels();\n \n         // fee section\n         for (const int n : confTargets) {\n             ui->confTargetSelector->addItem(tr(\"%1 (%2 blocks)\").arg(GUIUtil::formatNiceTimeOffset(n*Params().GetConsensus().nPowTargetSpacing)).arg(n));\n         }\n-        connect(ui->confTargetSelector, SIGNAL(currentIndexChanged(int)), this, SLOT(updateSmartFeeLabel()));\n-        connect(ui->confTargetSelector, SIGNAL(currentIndexChanged(int)), this, SLOT(coinControlUpdateLabels()));\n-        connect(ui->groupFee, SIGNAL(buttonClicked(int)), this, SLOT(updateFeeSectionControls()));\n-        connect(ui->groupFee, SIGNAL(buttonClicked(int)), this, SLOT(coinControlUpdateLabels()));\n-        connect(ui->customFee, SIGNAL(valueChanged()), this, SLOT(coinControlUpdateLabels()));\n-        connect(ui->checkBoxMinimumFee, SIGNAL(stateChanged(int)), this, SLOT(setMinimumFee()));\n-        connect(ui->checkBoxMinimumFee, SIGNAL(stateChanged(int)), this, SLOT(updateFeeSectionControls()));\n-        connect(ui->checkBoxMinimumFee, SIGNAL(stateChanged(int)), this, SLOT(coinControlUpdateLabels()));\n-        connect(ui->optInRBF, SIGNAL(stateChanged(int)), this, SLOT(updateSmartFeeLabel()));\n-        connect(ui->optInRBF, SIGNAL(stateChanged(int)), this, SLOT(coinControlUpdateLabels()));\n+        connect(ui->confTargetSelector, static_cast<void (QComboBox::*)(int)>(&QComboBox::currentIndexChanged), this, &SendCoinsDialog::updateSmartFeeLabel);\n+        connect(ui->confTargetSelector, static_cast<void (QComboBox::*)(int)>(&QComboBox::currentIndexChanged), this, &SendCoinsDialog::coinControlUpdateLabels);\n+        connect(ui->groupFee, static_cast<void (QButtonGroup::*)(int)>(&QButtonGroup::buttonClicked), this, &SendCoinsDialog::updateFeeSectionControls);\n+        connect(ui->groupFee, static_cast<void (QButtonGroup::*)(int)>(&QButtonGroup::buttonClicked), this, &SendCoinsDialog::coinControlUpdateLabels);\n+        connect(ui->customFee, &BitcoinAmountField::valueChanged, this, &SendCoinsDialog::coinControlUpdateLabels);\n+        connect(ui->checkBoxMinimumFee, &QCheckBox::stateChanged, this, &SendCoinsDialog::setMinimumFee);\n+        connect(ui->checkBoxMinimumFee, &QCheckBox::stateChanged, this, &SendCoinsDialog::updateFeeSectionControls);\n+        connect(ui->checkBoxMinimumFee, &QCheckBox::stateChanged, this, &SendCoinsDialog::coinControlUpdateLabels);\n+        connect(ui->optInRBF, &QCheckBox::stateChanged, this, &SendCoinsDialog::updateSmartFeeLabel);\n+        connect(ui->optInRBF, &QCheckBox::stateChanged, this, &SendCoinsDialog::coinControlUpdateLabels);\n         ui->customFee->setSingleStep(model->wallet().getRequiredFee(1000));\n         updateFeeSectionControls();\n         updateMinFeeLabel();\n@@ -417,10 +417,10 @@ SendCoinsEntry *SendCoinsDialog::addEntry()\n     SendCoinsEntry *entry = new SendCoinsEntry(platformStyle, this);\n     entry->setModel(model);\n     ui->entries->addWidget(entry);\n-    connect(entry, SIGNAL(removeEntry(SendCoinsEntry*)), this, SLOT(removeEntry(SendCoinsEntry*)));\n-    connect(entry, SIGNAL(useAvailableBalance(SendCoinsEntry*)), this, SLOT(useAvailableBalance(SendCoinsEntry*)));\n-    connect(entry, SIGNAL(payAmountChanged()), this, SLOT(coinControlUpdateLabels()));\n-    connect(entry, SIGNAL(subtractFeeFromAmountChanged()), this, SLOT(coinControlUpdateLabels()));\n+    connect(entry, &SendCoinsEntry::removeEntry, this, &SendCoinsDialog::removeEntry);\n+    connect(entry, &SendCoinsEntry::useAvailableBalance, this, &SendCoinsDialog::useAvailableBalance);\n+    connect(entry, &SendCoinsEntry::payAmountChanged, this, &SendCoinsDialog::coinControlUpdateLabels);\n+    connect(entry, &SendCoinsEntry::subtractFeeFromAmountChanged, this, &SendCoinsDialog::coinControlUpdateLabels);\n \n     // Focus the field, so that entry can start immediately\n     entry->clear();\n@@ -897,7 +897,7 @@ SendConfirmationDialog::SendConfirmationDialog(const QString &title, const QStri\n     setDefaultButton(QMessageBox::Cancel);\n     yesButton = button(QMessageBox::Yes);\n     updateYesButton();\n-    connect(&countDownTimer, SIGNAL(timeout()), this, SLOT(countDown()));\n+    connect(&countDownTimer, &QTimer::timeout, this, &SendConfirmationDialog::countDown);\n }\n \n int SendConfirmationDialog::exec()"
      },
      {
        "sha": "b394ff31500f238e9616074499101101e6aab2af",
        "filename": "src/qt/sendcoinsentry.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f78558f1e39198779bdb17e2b0e256fb99ad4b28/src/qt/sendcoinsentry.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f78558f1e39198779bdb17e2b0e256fb99ad4b28/src/qt/sendcoinsentry.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsentry.cpp?ref=f78558f1e39198779bdb17e2b0e256fb99ad4b28",
        "patch": "@@ -40,12 +40,12 @@ SendCoinsEntry::SendCoinsEntry(const PlatformStyle *_platformStyle, QWidget *par\n     ui->payTo_is->setFont(GUIUtil::fixedPitchFont());\n \n     // Connect signals\n-    connect(ui->payAmount, SIGNAL(valueChanged()), this, SIGNAL(payAmountChanged()));\n-    connect(ui->checkboxSubtractFeeFromAmount, SIGNAL(toggled(bool)), this, SIGNAL(subtractFeeFromAmountChanged()));\n-    connect(ui->deleteButton, SIGNAL(clicked()), this, SLOT(deleteClicked()));\n-    connect(ui->deleteButton_is, SIGNAL(clicked()), this, SLOT(deleteClicked()));\n-    connect(ui->deleteButton_s, SIGNAL(clicked()), this, SLOT(deleteClicked()));\n-    connect(ui->useAvailableBalanceButton, SIGNAL(clicked()), this, SLOT(useAvailableBalanceClicked()));\n+    connect(ui->payAmount, &BitcoinAmountField::valueChanged, this, &SendCoinsEntry::payAmountChanged);\n+    connect(ui->checkboxSubtractFeeFromAmount, &QCheckBox::toggled, this, &SendCoinsEntry::subtractFeeFromAmountChanged);\n+    connect(ui->deleteButton, &QPushButton::clicked, this, &SendCoinsEntry::deleteClicked);\n+    connect(ui->deleteButton_is, &QPushButton::clicked, this, &SendCoinsEntry::deleteClicked);\n+    connect(ui->deleteButton_s, &QPushButton::clicked, this, &SendCoinsEntry::deleteClicked);\n+    connect(ui->useAvailableBalanceButton, &QPushButton::clicked, this, &SendCoinsEntry::useAvailableBalanceClicked);\n }\n \n SendCoinsEntry::~SendCoinsEntry()\n@@ -82,7 +82,7 @@ void SendCoinsEntry::setModel(WalletModel *_model)\n     this->model = _model;\n \n     if (_model && _model->getOptionsModel())\n-        connect(_model->getOptionsModel(), SIGNAL(displayUnitChanged(int)), this, SLOT(updateDisplayUnit()));\n+        connect(_model->getOptionsModel(), &OptionsModel::displayUnitChanged, this, &SendCoinsEntry::updateDisplayUnit);\n \n     clear();\n }"
      },
      {
        "sha": "5384b9e8b01a8f4514557578379611a0b1949a7f",
        "filename": "src/qt/test/paymentservertests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f78558f1e39198779bdb17e2b0e256fb99ad4b28/src/qt/test/paymentservertests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f78558f1e39198779bdb17e2b0e256fb99ad4b28/src/qt/test/paymentservertests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/paymentservertests.cpp?ref=f78558f1e39198779bdb17e2b0e256fb99ad4b28",
        "patch": "@@ -39,8 +39,8 @@ X509 *parse_b64der_cert(const char* cert_data)\n static SendCoinsRecipient handleRequest(PaymentServer* server, std::vector<unsigned char>& data)\n {\n     RecipientCatcher sigCatcher;\n-    QObject::connect(server, SIGNAL(receivedPaymentRequest(SendCoinsRecipient)),\n-        &sigCatcher, SLOT(getRecipient(SendCoinsRecipient)));\n+    QObject::connect(server, &PaymentServer::receivedPaymentRequest,\n+        &sigCatcher, &RecipientCatcher::getRecipient);\n \n     // Write data to a temp file:\n     QTemporaryFile f;\n@@ -57,8 +57,8 @@ static SendCoinsRecipient handleRequest(PaymentServer* server, std::vector<unsig\n     // which will lead to a test failure anyway.\n     QCoreApplication::sendEvent(&object, &event);\n \n-    QObject::disconnect(server, SIGNAL(receivedPaymentRequest(SendCoinsRecipient)),\n-        &sigCatcher, SLOT(getRecipient(SendCoinsRecipient)));\n+    QObject::disconnect(server, &PaymentServer::receivedPaymentRequest,\n+        &sigCatcher, &RecipientCatcher::getRecipient);\n \n     // Return results from sigCatcher\n     return sigCatcher.recipient;"
      },
      {
        "sha": "0bd719326e36af6d3bef8a3475b9cbcb64ac8228",
        "filename": "src/qt/test/util.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f78558f1e39198779bdb17e2b0e256fb99ad4b28/src/qt/test/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f78558f1e39198779bdb17e2b0e256fb99ad4b28/src/qt/test/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/util.cpp?ref=f78558f1e39198779bdb17e2b0e256fb99ad4b28",
        "patch": "@@ -18,5 +18,5 @@ void ConfirmMessage(QString* text, int msec)\n             }\n         }\n         delete callback;\n-    }), SLOT(call()));\n+    }), &Callback::call);\n }"
      },
      {
        "sha": "a0cfe8ae8786c3d19503ee7bd93033f495da9e7b",
        "filename": "src/qt/test/wallettests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f78558f1e39198779bdb17e2b0e256fb99ad4b28/src/qt/test/wallettests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f78558f1e39198779bdb17e2b0e256fb99ad4b28/src/qt/test/wallettests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/wallettests.cpp?ref=f78558f1e39198779bdb17e2b0e256fb99ad4b28",
        "patch": "@@ -50,7 +50,7 @@ void ConfirmSend(QString* text = nullptr, bool cancel = false)\n             }\n         }\n         delete callback;\n-    }), SLOT(call()));\n+    }), &Callback::call);\n }\n \n //! Send coins to address and return txid."
      },
      {
        "sha": "f087e7569cdf964dd9547efa1713a8df8b9202eb",
        "filename": "src/qt/trafficgraphwidget.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f78558f1e39198779bdb17e2b0e256fb99ad4b28/src/qt/trafficgraphwidget.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f78558f1e39198779bdb17e2b0e256fb99ad4b28/src/qt/trafficgraphwidget.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/trafficgraphwidget.cpp?ref=f78558f1e39198779bdb17e2b0e256fb99ad4b28",
        "patch": "@@ -29,7 +29,7 @@ TrafficGraphWidget::TrafficGraphWidget(QWidget *parent) :\n     clientModel(0)\n {\n     timer = new QTimer(this);\n-    connect(timer, SIGNAL(timeout()), SLOT(updateRates()));\n+    connect(timer, &QTimer::timeout, this, &TrafficGraphWidget::updateRates);\n }\n \n void TrafficGraphWidget::setClientModel(ClientModel *model)"
      },
      {
        "sha": "e379b70553ce970ce8c009b073108e769efccc03",
        "filename": "src/qt/transactiontablemodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f78558f1e39198779bdb17e2b0e256fb99ad4b28/src/qt/transactiontablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f78558f1e39198779bdb17e2b0e256fb99ad4b28/src/qt/transactiontablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiontablemodel.cpp?ref=f78558f1e39198779bdb17e2b0e256fb99ad4b28",
        "patch": "@@ -226,7 +226,7 @@ TransactionTableModel::TransactionTableModel(const PlatformStyle *_platformStyle\n     columns << QString() << QString() << tr(\"Date\") << tr(\"Type\") << tr(\"Label\") << BitcoinUnits::getAmountColumnTitle(walletModel->getOptionsModel()->getDisplayUnit());\n     priv->refreshWallet(walletModel->wallet());\n \n-    connect(walletModel->getOptionsModel(), SIGNAL(displayUnitChanged(int)), this, SLOT(updateDisplayUnit()));\n+    connect(walletModel->getOptionsModel(), &OptionsModel::displayUnitChanged, this, &TransactionTableModel::updateDisplayUnit);\n \n     subscribeToCoreSignals();\n }"
      },
      {
        "sha": "6d08a3b0fb637e828fa8afd1197483708eca6891",
        "filename": "src/qt/transactionview.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 28,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f78558f1e39198779bdb17e2b0e256fb99ad4b28/src/qt/transactionview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f78558f1e39198779bdb17e2b0e256fb99ad4b28/src/qt/transactionview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionview.cpp?ref=f78558f1e39198779bdb17e2b0e256fb99ad4b28",
        "patch": "@@ -176,30 +176,31 @@ TransactionView::TransactionView(const PlatformStyle *platformStyle, QWidget *pa\n     mapperThirdPartyTxUrls = new QSignalMapper(this);\n \n     // Connect actions\n-    connect(mapperThirdPartyTxUrls, SIGNAL(mapped(QString)), this, SLOT(openThirdPartyTxUrl(QString)));\n-\n-    connect(dateWidget, SIGNAL(activated(int)), this, SLOT(chooseDate(int)));\n-    connect(typeWidget, SIGNAL(activated(int)), this, SLOT(chooseType(int)));\n-    connect(watchOnlyWidget, SIGNAL(activated(int)), this, SLOT(chooseWatchonly(int)));\n-    connect(amountWidget, SIGNAL(textChanged(QString)), amount_typing_delay, SLOT(start()));\n-    connect(amount_typing_delay, SIGNAL(timeout()), this, SLOT(changedAmount()));\n-    connect(search_widget, SIGNAL(textChanged(QString)), prefix_typing_delay, SLOT(start()));\n-    connect(prefix_typing_delay, SIGNAL(timeout()), this, SLOT(changedSearch()));\n-\n-    connect(view, SIGNAL(doubleClicked(QModelIndex)), this, SIGNAL(doubleClicked(QModelIndex)));\n-    connect(view, SIGNAL(customContextMenuRequested(QPoint)), this, SLOT(contextualMenu(QPoint)));\n-\n-    connect(bumpFeeAction, SIGNAL(triggered()), this, SLOT(bumpFee()));\n-    connect(abandonAction, SIGNAL(triggered()), this, SLOT(abandonTx()));\n-    connect(copyAddressAction, SIGNAL(triggered()), this, SLOT(copyAddress()));\n-    connect(copyLabelAction, SIGNAL(triggered()), this, SLOT(copyLabel()));\n-    connect(copyAmountAction, SIGNAL(triggered()), this, SLOT(copyAmount()));\n-    connect(copyTxIDAction, SIGNAL(triggered()), this, SLOT(copyTxID()));\n-    connect(copyTxHexAction, SIGNAL(triggered()), this, SLOT(copyTxHex()));\n-    connect(copyTxPlainText, SIGNAL(triggered()), this, SLOT(copyTxPlainText()));\n-    connect(editLabelAction, SIGNAL(triggered()), this, SLOT(editLabel()));\n-    connect(showDetailsAction, SIGNAL(triggered()), this, SLOT(showDetails()));\n-\n+    connect(mapperThirdPartyTxUrls, static_cast<void (QSignalMapper::*)(const QString&)>(&QSignalMapper::mapped), this, &TransactionView::openThirdPartyTxUrl);\n+\n+    connect(dateWidget, static_cast<void (QComboBox::*)(int)>(&QComboBox::activated), this, &TransactionView::chooseDate);\n+    connect(typeWidget, static_cast<void (QComboBox::*)(int)>(&QComboBox::activated), this, &TransactionView::chooseType);\n+    connect(watchOnlyWidget, static_cast<void (QComboBox::*)(int)>(&QComboBox::activated), this, &TransactionView::chooseWatchonly);\n+    connect(amountWidget, &QLineEdit::textChanged, amount_typing_delay, static_cast<void (QTimer::*)()>(&QTimer::start));\n+    connect(amount_typing_delay, &QTimer::timeout, this, &TransactionView::changedAmount);\n+    connect(search_widget, &QLineEdit::textChanged, prefix_typing_delay, static_cast<void (QTimer::*)()>(&QTimer::start));\n+    connect(prefix_typing_delay, &QTimer::timeout, this, &TransactionView::changedSearch);\n+\n+    connect(view, &QTableView::doubleClicked, this, &TransactionView::doubleClicked);\n+    connect(view, &QTableView::customContextMenuRequested, this, &TransactionView::contextualMenu);\n+\n+    connect(bumpFeeAction, &QAction::triggered, this, &TransactionView::bumpFee);\n+    connect(abandonAction, &QAction::triggered, this, &TransactionView::abandonTx);\n+    connect(copyAddressAction, &QAction::triggered, this, &TransactionView::copyAddress);\n+    connect(copyLabelAction, &QAction::triggered, this, &TransactionView::copyLabel);\n+    connect(copyAmountAction, &QAction::triggered, this, &TransactionView::copyAmount);\n+    connect(copyTxIDAction, &QAction::triggered, this, &TransactionView::copyTxID);\n+    connect(copyTxHexAction, &QAction::triggered, this, &TransactionView::copyTxHex);\n+    connect(copyTxPlainText, &QAction::triggered, this, &TransactionView::copyTxPlainText);\n+    connect(editLabelAction, &QAction::triggered, this, &TransactionView::editLabel);\n+    connect(showDetailsAction, &QAction::triggered, this, &TransactionView::showDetails);\n+    // Double-clicking on a transaction on the transaction history page shows details\n+    connect(this, &TransactionView::doubleClicked, this, &TransactionView::showDetails);\n     // Highlight transaction after fee bump\n     connect(this, &TransactionView::bumpedFee, [this](const uint256& txid) {\n       focusTransaction(txid);\n@@ -249,7 +250,7 @@ void TransactionView::setModel(WalletModel *_model)\n                     if (i == 0)\n                         contextMenu->addSeparator();\n                     contextMenu->addAction(thirdPartyTxUrlAction);\n-                    connect(thirdPartyTxUrlAction, SIGNAL(triggered()), mapperThirdPartyTxUrls, SLOT(map()));\n+                    connect(thirdPartyTxUrlAction, &QAction::triggered, mapperThirdPartyTxUrls, static_cast<void (QSignalMapper::*)()>(&QSignalMapper::map));\n                     mapperThirdPartyTxUrls->setMapping(thirdPartyTxUrlAction, listUrls[i].trimmed());\n                 }\n             }\n@@ -259,7 +260,7 @@ void TransactionView::setModel(WalletModel *_model)\n         updateWatchOnlyColumn(_model->wallet().haveWatchOnly());\n \n         // Watch-only signal\n-        connect(_model, SIGNAL(notifyWatchonlyChanged(bool)), this, SLOT(updateWatchOnlyColumn(bool)));\n+        connect(_model, &WalletModel::notifyWatchonlyChanged, this, &TransactionView::updateWatchOnlyColumn);\n     }\n }\n \n@@ -573,8 +574,8 @@ QWidget *TransactionView::createDateRangeWidget()\n     dateRangeWidget->setVisible(false);\n \n     // Notify on change\n-    connect(dateFrom, SIGNAL(dateChanged(QDate)), this, SLOT(dateRangeChanged()));\n-    connect(dateTo, SIGNAL(dateChanged(QDate)), this, SLOT(dateRangeChanged()));\n+    connect(dateFrom, &QDateTimeEdit::dateChanged, this, &TransactionView::dateRangeChanged);\n+    connect(dateTo, &QDateTimeEdit::dateChanged, this, &TransactionView::dateRangeChanged);\n \n     return dateRangeWidget;\n }"
      },
      {
        "sha": "d15bd95b8ee5f9735b3d47ec130da05ecab56f3b",
        "filename": "src/qt/walletframe.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f78558f1e39198779bdb17e2b0e256fb99ad4b28/src/qt/walletframe.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f78558f1e39198779bdb17e2b0e256fb99ad4b28/src/qt/walletframe.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletframe.cpp?ref=f78558f1e39198779bdb17e2b0e256fb99ad4b28",
        "patch": "@@ -68,9 +68,11 @@ bool WalletFrame::addWallet(WalletModel *walletModel)\n     mapWalletViews[name] = walletView;\n \n     // Ensure a walletView is able to show the main window\n-    connect(walletView, SIGNAL(showNormalIfMinimized()), gui, SLOT(showNormalIfMinimized()));\n+    connect(walletView, &WalletView::showNormalIfMinimized, [this]{\n+      gui->showNormalIfMinimized();\n+    });\n \n-    connect(walletView, SIGNAL(outOfSyncWarningClicked()), this, SLOT(outOfSyncWarningClicked()));\n+    connect(walletView, &WalletView::outOfSyncWarningClicked, this, &WalletFrame::outOfSyncWarningClicked);\n \n     return true;\n }"
      },
      {
        "sha": "18a5bda9c39d8ef8f4e09c52cab096892220ff97",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f78558f1e39198779bdb17e2b0e256fb99ad4b28/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f78558f1e39198779bdb17e2b0e256fb99ad4b28/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=f78558f1e39198779bdb17e2b0e256fb99ad4b28",
        "patch": "@@ -44,7 +44,7 @@ WalletModel::WalletModel(std::unique_ptr<interfaces::Wallet> wallet, interfaces:\n \n     // This timer will be fired repeatedly to update the balance\n     pollTimer = new QTimer(this);\n-    connect(pollTimer, SIGNAL(timeout()), this, SLOT(pollBalanceChanged()));\n+    connect(pollTimer, &QTimer::timeout, this, &WalletModel::pollBalanceChanged);\n     pollTimer->start(MODEL_UPDATE_DELAY);\n \n     subscribeToCoreSignals();"
      },
      {
        "sha": "053e951921b649dc5c041cab602ee2654ec984f6",
        "filename": "src/qt/walletview.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 21,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f78558f1e39198779bdb17e2b0e256fb99ad4b28/src/qt/walletview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f78558f1e39198779bdb17e2b0e256fb99ad4b28/src/qt/walletview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletview.cpp?ref=f78558f1e39198779bdb17e2b0e256fb99ad4b28",
        "patch": "@@ -66,22 +66,20 @@ WalletView::WalletView(const PlatformStyle *_platformStyle, QWidget *parent):\n     addWidget(sendCoinsPage);\n \n     // Clicking on a transaction on the overview pre-selects the transaction on the transaction history page\n-    connect(overviewPage, SIGNAL(transactionClicked(QModelIndex)), transactionView, SLOT(focusTransaction(QModelIndex)));\n-    connect(overviewPage, SIGNAL(outOfSyncWarningClicked()), this, SLOT(requestedSyncWarningInfo()));\n+    connect(overviewPage, &OverviewPage::transactionClicked, transactionView, static_cast<void (TransactionView::*)(const QModelIndex&)>(&TransactionView::focusTransaction));\n \n-    // Highlight transaction after send\n-    connect(sendCoinsPage, SIGNAL(coinsSent(uint256)), transactionView, SLOT(focusTransaction(uint256)));\n+    connect(overviewPage, &OverviewPage::outOfSyncWarningClicked, this, &WalletView::requestedSyncWarningInfo);\n \n-    // Double-clicking on a transaction on the transaction history page shows details\n-    connect(transactionView, SIGNAL(doubleClicked(QModelIndex)), transactionView, SLOT(showDetails()));\n+    // Highlight transaction after send\n+    connect(sendCoinsPage, &SendCoinsDialog::coinsSent, transactionView, static_cast<void (TransactionView::*)(const uint256&)>(&TransactionView::focusTransaction));\n \n     // Clicking on \"Export\" allows to export the transaction list\n-    connect(exportButton, SIGNAL(clicked()), transactionView, SLOT(exportClicked()));\n+    connect(exportButton, &QPushButton::clicked, transactionView, &TransactionView::exportClicked);\n \n     // Pass through messages from sendCoinsPage\n-    connect(sendCoinsPage, SIGNAL(message(QString,QString,unsigned int)), this, SIGNAL(message(QString,QString,unsigned int)));\n+    connect(sendCoinsPage, &SendCoinsDialog::message, this, &WalletView::message);\n     // Pass through messages from transactionView\n-    connect(transactionView, SIGNAL(message(QString,QString,unsigned int)), this, SIGNAL(message(QString,QString,unsigned int)));\n+    connect(transactionView, &TransactionView::message, this, &WalletView::message);\n }\n \n WalletView::~WalletView()\n@@ -93,22 +91,24 @@ void WalletView::setBitcoinGUI(BitcoinGUI *gui)\n     if (gui)\n     {\n         // Clicking on a transaction on the overview page simply sends you to transaction history page\n-        connect(overviewPage, SIGNAL(transactionClicked(QModelIndex)), gui, SLOT(gotoHistoryPage()));\n+        connect(overviewPage, &OverviewPage::transactionClicked, gui, &BitcoinGUI::gotoHistoryPage);\n \n         // Navigate to transaction history page after send\n-        connect(sendCoinsPage, SIGNAL(coinsSent(uint256)), gui, SLOT(gotoHistoryPage()));\n+        connect(sendCoinsPage, &SendCoinsDialog::coinsSent, gui, &BitcoinGUI::gotoHistoryPage);\n \n         // Receive and report messages\n-        connect(this, SIGNAL(message(QString,QString,unsigned int)), gui, SLOT(message(QString,QString,unsigned int)));\n+        connect(this, &WalletView::message, [gui](const QString &title, const QString &message, unsigned int style) {\n+            gui->message(title, message, style);\n+        });\n \n         // Pass through encryption status changed signals\n-        connect(this, SIGNAL(encryptionStatusChanged()), gui, SLOT(updateWalletStatus()));\n+        connect(this, &WalletView::encryptionStatusChanged, gui, &BitcoinGUI::updateWalletStatus);\n \n         // Pass through transaction notifications\n-        connect(this, SIGNAL(incomingTransaction(QString,int,CAmount,QString,QString,QString,QString)), gui, SLOT(incomingTransaction(QString,int,CAmount,QString,QString,QString,QString)));\n+        connect(this, &WalletView::incomingTransaction, gui, &BitcoinGUI::incomingTransaction);\n \n         // Connect HD enabled state signal\n-        connect(this, SIGNAL(hdEnabledStatusChanged()), gui, SLOT(updateWalletStatus()));\n+        connect(this, &WalletView::hdEnabledStatusChanged, gui, &BitcoinGUI::updateWalletStatus);\n     }\n }\n \n@@ -135,24 +135,23 @@ void WalletView::setWalletModel(WalletModel *_walletModel)\n     if (_walletModel)\n     {\n         // Receive and pass through messages from wallet model\n-        connect(_walletModel, SIGNAL(message(QString,QString,unsigned int)), this, SIGNAL(message(QString,QString,unsigned int)));\n+        connect(_walletModel, &WalletModel::message, this, &WalletView::message);\n \n         // Handle changes in encryption status\n-        connect(_walletModel, SIGNAL(encryptionStatusChanged()), this, SIGNAL(encryptionStatusChanged()));\n+        connect(_walletModel, &WalletModel::encryptionStatusChanged, this, &WalletView::encryptionStatusChanged);\n         updateEncryptionStatus();\n \n         // update HD status\n         Q_EMIT hdEnabledStatusChanged();\n \n         // Balloon pop-up for new transaction\n-        connect(_walletModel->getTransactionTableModel(), SIGNAL(rowsInserted(QModelIndex,int,int)),\n-                this, SLOT(processNewTransaction(QModelIndex,int,int)));\n+        connect(_walletModel->getTransactionTableModel(), &TransactionTableModel::rowsInserted, this, &WalletView::processNewTransaction);\n \n         // Ask for passphrase if needed\n-        connect(_walletModel, SIGNAL(requireUnlock()), this, SLOT(unlockWallet()));\n+        connect(_walletModel, &WalletModel::requireUnlock, this, &WalletView::unlockWallet);\n \n         // Show progress dialog\n-        connect(_walletModel, SIGNAL(showProgress(QString,int)), this, SLOT(showProgress(QString,int)));\n+        connect(_walletModel, &WalletModel::showProgress, this, &WalletView::showProgress);\n     }\n }\n "
      }
    ]
  },
  {
    "sha": "3567b247f43decb6fc102d5b0989d1746fce0441",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNTY3YjI0N2Y0M2RlY2I2ZmMxMDJkNWIwOTg5ZDE3NDZmY2UwNDQx",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-06-24T17:12:07Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-08-21T08:43:55Z"
      },
      "message": "test: Add lint to prevent SIGNAL/SLOT connect style",
      "tree": {
        "sha": "cd704fc12c8131d8a378ec53a5b4e616b492c849",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cd704fc12c8131d8a378ec53a5b4e616b492c849"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3567b247f43decb6fc102d5b0989d1746fce0441",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3567b247f43decb6fc102d5b0989d1746fce0441",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3567b247f43decb6fc102d5b0989d1746fce0441",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3567b247f43decb6fc102d5b0989d1746fce0441/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f78558f1e39198779bdb17e2b0e256fb99ad4b28",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f78558f1e39198779bdb17e2b0e256fb99ad4b28",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f78558f1e39198779bdb17e2b0e256fb99ad4b28"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 20,
      "deletions": 0
    },
    "files": [
      {
        "sha": "2e77682aa243f52e9ca6af487552ec1664b50202",
        "filename": "test/lint/lint-qt.sh",
        "status": "added",
        "additions": 20,
        "deletions": 0,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3567b247f43decb6fc102d5b0989d1746fce0441/test/lint/lint-qt.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3567b247f43decb6fc102d5b0989d1746fce0441/test/lint/lint-qt.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-qt.sh?ref=3567b247f43decb6fc102d5b0989d1746fce0441",
        "patch": "@@ -0,0 +1,20 @@\n+#!/usr/bin/env bash\n+#\n+# Copyright (c) 2018 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#\n+# Check for SIGNAL/SLOT connect style, removed since Qt4 support drop.\n+\n+export LC_ALL=C\n+\n+EXIT_CODE=0\n+\n+OUTPUT=$(git grep -E '(SIGNAL|, ?SLOT)\\(' -- src/qt)\n+if [[ ${OUTPUT} != \"\" ]]; then\n+    echo \"Use Qt5 connect style in:\"\n+    echo \"$OUTPUT\"\n+    EXIT_CODE=1\n+fi\n+\n+exit ${EXIT_CODE}"
      }
    ]
  }
]