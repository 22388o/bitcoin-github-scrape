[
  {
    "sha": "8a1a11b77fa1447749c93224054d8ffb9200b594",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YTFhMTFiNzdmYTE0NDc3NDljOTMyMjQwNTRkOGZmYjkyMDBiNTk0",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-11-10T09:27:04Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Add missing locks to init.cpp (in AppInitMain + ThreadImport) and validation.cpp\n\nLocks added to init.cpp due to the following locking requirements:\n* reading the value pointed to by 'pblocktree' requires holding mutex 'cs_main'\n* reading the value pointed to by 'pblocktree' requires holding mutex 'cs_main'\n* reading variable 'mapBlockIndex' requires holding mutex 'cs_main'\n* reading the value pointed to by 'pcoinsdbview' requires holding mutex 'cs_main'\n* reading the value pointed to by 'pcoinsTip' requires holding mutex 'cs_main'\n* reading variable 'chainActive' requires holding mutex 'cs_main'\n* reading variable 'chainActive' requires holding mutex 'cs_main'\n* reading variable 'chainActive' requires holding mutex 'cs_main'\n* reading variables 'mapBlockIndex' and 'chainActive' require holding mutex 'cs_main'\n\nLocks added to validation.cpp due to the following locking requirements:\n* reading variable 'scriptExecutionCache' requires holding mutex 'cs_main'\n* writing variable 'fCheckForPruning' requires holding mutex 'cs_LastBlockFile' exclusively\n* reading variable 'mapBlockIndex' requires holding mutex 'cs_main'\n* reading variable 'nLastBlockFile' requires holding mutex 'cs_LastBlockFile'\n* reading variables 'mapBlockIndex' and 'chainActive' require holding mutex 'cs_main'\n* writing variable 'nLastBlockFile' requires holding mutex 'cs_LastBlockFile' exclusively\n* writing variable 'nBlockSequenceId' requires holding mutex 'cs_nBlockSequenceId' exclusively",
      "tree": {
        "sha": "2a0c9b31ae7cb5e93444345aa75d62955a9ecdd6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2a0c9b31ae7cb5e93444345aa75d62955a9ecdd6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8a1a11b77fa1447749c93224054d8ffb9200b594",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8a1a11b77fa1447749c93224054d8ffb9200b594",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8a1a11b77fa1447749c93224054d8ffb9200b594",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8a1a11b77fa1447749c93224054d8ffb9200b594/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "24df9af81625122c816a0ae6bb842ea47a4041ff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/24df9af81625122c816a0ae6bb842ea47a4041ff",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/24df9af81625122c816a0ae6bb842ea47a4041ff"
      }
    ],
    "stats": {
      "total": 76,
      "additions": 57,
      "deletions": 19
    },
    "files": [
      {
        "sha": "e46a19a8309dac6b028cb759889ab16f12d9f046",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 37,
        "deletions": 15,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a1a11b77fa1447749c93224054d8ffb9200b594/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a1a11b77fa1447749c93224054d8ffb9200b594/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=8a1a11b77fa1447749c93224054d8ffb9200b594",
        "patch": "@@ -633,7 +633,10 @@ void ThreadImport(std::vector<fs::path> vImportFiles)\n             LoadExternalBlockFile(chainparams, file, &pos);\n             nFile++;\n         }\n-        pblocktree->WriteReindexing(false);\n+        {\n+            LOCK(cs_main);\n+            pblocktree->WriteReindexing(false);\n+        }\n         fReindex = false;\n         LogPrintf(\"Reindexing finished\\n\");\n         // To avoid ending up in a situation without genesis block, re-try initializing (no-op if reindexing worked):\n@@ -1418,7 +1421,10 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n                 pblocktree.reset(new CBlockTreeDB(nBlockTreeDBCache, false, fReset));\n \n                 if (fReset) {\n-                    pblocktree->WriteReindexing(true);\n+                    {\n+                        LOCK(cs_main);\n+                        pblocktree->WriteReindexing(true);\n+                    }\n                     //If we're reindexing in prune mode, wipe away unusable block files and all undo data files\n                     if (fPruneMode)\n                         CleanupBlockRevFiles();\n@@ -1438,8 +1444,11 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n                 // If the loaded chain has a wrong genesis, bail out immediately\n                 // (we're likely using a testnet datadir, or the other way around).\n-                if (!mapBlockIndex.empty() && mapBlockIndex.count(chainparams.GetConsensus().hashGenesisBlock) == 0)\n-                    return InitError(_(\"Incorrect or no genesis block found. Wrong datadir for network?\"));\n+                {\n+                    LOCK(cs_main);\n+                    if (!mapBlockIndex.empty() && mapBlockIndex.count(chainparams.GetConsensus().hashGenesisBlock) == 0)\n+                        return InitError(_(\"Incorrect or no genesis block found. Wrong datadir for network?\"));\n+                }\n \n                 // Check for changed -txindex state\n                 if (fTxIndex != gArgs.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX)) {\n@@ -1471,9 +1480,12 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n                 // If necessary, upgrade from older database format.\n                 // This is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n-                if (!pcoinsdbview->Upgrade()) {\n-                    strLoadError = _(\"Error upgrading chainstate database\");\n-                    break;\n+                {\n+                    LOCK(cs_main);\n+                    if (!pcoinsdbview->Upgrade()) {\n+                        strLoadError = _(\"Error upgrading chainstate database\");\n+                        break;\n+                    }\n                 }\n \n                 // ReplayBlocks is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n@@ -1485,13 +1497,18 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n                 // The on-disk coinsdb is now in a good state, create the cache\n                 pcoinsTip.reset(new CCoinsViewCache(pcoinscatcher.get()));\n \n-                bool is_coinsview_empty = fReset || fReindexChainState || pcoinsTip->GetBestBlock().IsNull();\n+                bool is_coinsview_empty;\n+                {\n+                    LOCK(cs_main);\n+                    is_coinsview_empty = fReset || fReindexChainState || pcoinsTip->GetBestBlock().IsNull();\n+                }\n                 if (!is_coinsview_empty) {\n                     // LoadChainTip sets chainActive based on pcoinsTip's best block\n                     if (!LoadChainTip(chainparams)) {\n                         strLoadError = _(\"Error initializing block database\");\n                         break;\n                     }\n+                    LOCK(cs_main);\n                     assert(chainActive.Tip() != nullptr);\n                 }\n \n@@ -1514,8 +1531,11 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n                     }\n \n                     {\n-                        LOCK(cs_main);\n-                        CBlockIndex* tip = chainActive.Tip();\n+                        CBlockIndex* tip;\n+                        {\n+                            LOCK(cs_main);\n+                            tip = chainActive.Tip();\n+                        }\n                         RPCNotifyBlockChange(true, tip);\n                         if (tip && tip->nTime > GetAdjustedTime() + 2 * 60 * 60) {\n                             strLoadError = _(\"The block database contains a block which appears to be from the future. \"\n@@ -1615,11 +1635,13 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n         return false;\n \n     // Either install a handler to notify us when genesis activates, or set fHaveGenesis directly.\n-    // No locking, as this happens before any background thread is started.\n-    if (chainActive.Tip() == nullptr) {\n-        uiInterface.NotifyBlockTip.connect(BlockNotifyGenesisWait);\n-    } else {\n-        fHaveGenesis = true;\n+    {\n+        LOCK(cs_main);\n+        if (chainActive.Tip() == nullptr) {\n+            uiInterface.NotifyBlockTip.connect(BlockNotifyGenesisWait);\n+        } else {\n+            fHaveGenesis = true;\n+        }\n     }\n \n     if (gArgs.IsArgSet(\"-blocknotify\"))"
      },
      {
        "sha": "af672f78e388ee6fc9795bf19a9631cc1331f0ff",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 4,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a1a11b77fa1447749c93224054d8ffb9200b594/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a1a11b77fa1447749c93224054d8ffb9200b594/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=8a1a11b77fa1447749c93224054d8ffb9200b594",
        "patch": "@@ -1249,7 +1249,11 @@ void InitScriptExecutionCache() {\n     // nMaxCacheSize is unsigned. If -maxsigcachesize is set to zero,\n     // setup_bytes creates the minimum possible cache (2 elements).\n     size_t nMaxCacheSize = std::min(std::max((int64_t)0, gArgs.GetArg(\"-maxsigcachesize\", DEFAULT_MAX_SIG_CACHE_SIZE) / 2), MAX_MAX_SIG_CACHE_SIZE) * ((size_t) 1 << 20);\n-    size_t nElems = scriptExecutionCache.setup_bytes(nMaxCacheSize);\n+    size_t nElems;\n+    {\n+        LOCK(cs_main);\n+        nElems = scriptExecutionCache.setup_bytes(nMaxCacheSize);\n+    }\n     LogPrintf(\"Using %zu MiB out of %zu/2 requested for script execution cache, able to store %zu elements\\n\",\n             (nElems*sizeof(uint256)) >>20, (nMaxCacheSize*2)>>20, nElems);\n }\n@@ -2026,7 +2030,10 @@ void FlushStateToDisk() {\n \n void PruneAndFlush() {\n     CValidationState state;\n-    fCheckForPruning = true;\n+    {\n+        LOCK(cs_LastBlockFile);\n+        fCheckForPruning = true;\n+    }\n     const CChainParams& chainparams = Params();\n     FlushStateToDisk(chainparams, state, FLUSH_STATE_NONE);\n }\n@@ -3539,6 +3546,7 @@ CBlockIndex * InsertBlockIndex(uint256 hash)\n \n bool static LoadBlockIndexDB(const CChainParams& chainparams)\n {\n+    LOCK(cs_main);\n     if (!pblocktree->LoadBlockIndexGuts(chainparams.GetConsensus(), InsertBlockIndex))\n         return false;\n \n@@ -3586,6 +3594,7 @@ bool static LoadBlockIndexDB(const CChainParams& chainparams)\n             pindexBestHeader = pindex;\n     }\n \n+    LOCK(cs_LastBlockFile);\n     // Load block file info\n     pblocktree->ReadLastBlockFile(nLastBlockFile);\n     vinfoBlockFile.resize(nLastBlockFile + 1);\n@@ -3640,6 +3649,7 @@ bool static LoadBlockIndexDB(const CChainParams& chainparams)\n \n bool LoadChainTip(const CChainParams& chainparams)\n {\n+    LOCK(cs_main);\n     if (chainActive.Tip() && chainActive.Tip()->GetBlockHash() == pcoinsTip->GetBestBlock()) return true;\n \n     if (pcoinsTip->GetBestBlock().IsNull() && mapBlockIndex.size() == 1) {\n@@ -3963,8 +3973,14 @@ void UnloadBlockIndex()\n     mempool.clear();\n     mapBlocksUnlinked.clear();\n     vinfoBlockFile.clear();\n-    nLastBlockFile = 0;\n-    nBlockSequenceId = 1;\n+    {\n+        LOCK(cs_LastBlockFile);\n+        nLastBlockFile = 0;\n+    }\n+    {\n+        LOCK(cs_nBlockSequenceId);\n+        nBlockSequenceId = 1;\n+    }\n     setDirtyBlockIndex.clear();\n     g_failed_blocks.clear();\n     setDirtyFileInfo.clear();"
      }
    ]
  },
  {
    "sha": "aeafe946af2e037ea0102387abaef47d0bac4a22",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZWFmZTk0NmFmMmUwMzdlYTAxMDIzODdhYmFlZjQ3ZDBiYWM0YTIy",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-09-01T17:14:29Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Add LOCK(cs). The variables 'mapTx' and 'mapNextTx' are guarded by that mutex.",
      "tree": {
        "sha": "04339dca36d9784ee6dff67c2fec74097e60ab75",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/04339dca36d9784ee6dff67c2fec74097e60ab75"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aeafe946af2e037ea0102387abaef47d0bac4a22",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aeafe946af2e037ea0102387abaef47d0bac4a22",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/aeafe946af2e037ea0102387abaef47d0bac4a22",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aeafe946af2e037ea0102387abaef47d0bac4a22/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8a1a11b77fa1447749c93224054d8ffb9200b594",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8a1a11b77fa1447749c93224054d8ffb9200b594",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8a1a11b77fa1447749c93224054d8ffb9200b594"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "19063a50911ba6e5204127f6ea18044c64da4d8c",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aeafe946af2e037ea0102387abaef47d0bac4a22/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aeafe946af2e037ea0102387abaef47d0bac4a22/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=aeafe946af2e037ea0102387abaef47d0bac4a22",
        "patch": "@@ -624,6 +624,7 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n     if (GetRand(std::numeric_limits<uint32_t>::max()) >= nCheckFrequency)\n         return;\n \n+    LOCK(cs);\n     LogPrint(BCLog::MEMPOOL, \"Checking mempool with %u transactions and %u inputs\\n\", (unsigned int)mapTx.size(), (unsigned int)mapNextTx.size());\n \n     uint64_t checkTotal = 0;\n@@ -632,7 +633,6 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n     CCoinsViewCache mempoolDuplicate(const_cast<CCoinsViewCache*>(pcoins));\n     const int64_t spendheight = GetSpendHeight(mempoolDuplicate);\n \n-    LOCK(cs);\n     std::list<const CTxMemPoolEntry*> waitingOnDependants;\n     for (indexed_transaction_set::const_iterator it = mapTx.begin(); it != mapTx.end(); it++) {\n         unsigned int i = 0;"
      }
    ]
  },
  {
    "sha": "37fad6a00375cf55493e9a745909630168cc0b27",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozN2ZhZDZhMDAzNzVjZjU1NDkzZTlhNzQ1OTA5NjMwMTY4Y2MwYjI3",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-09-01T14:56:24Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Add LOCK(cs_main). The variable 'mapNodeState' (accessed via ProcessBlockAvailability(...)/State(...)) is guarded by that mutex.",
      "tree": {
        "sha": "72ea0b96010f3bec4d7dfef4b93a5fd2d1c6d82a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/72ea0b96010f3bec4d7dfef4b93a5fd2d1c6d82a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/37fad6a00375cf55493e9a745909630168cc0b27",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/37fad6a00375cf55493e9a745909630168cc0b27",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/37fad6a00375cf55493e9a745909630168cc0b27",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/37fad6a00375cf55493e9a745909630168cc0b27/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "aeafe946af2e037ea0102387abaef47d0bac4a22",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aeafe946af2e037ea0102387abaef47d0bac4a22",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/aeafe946af2e037ea0102387abaef47d0bac4a22"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "4e58e9754e4b75d29cd9cdd4d516f100d2172dbe",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37fad6a00375cf55493e9a745909630168cc0b27/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37fad6a00375cf55493e9a745909630168cc0b27/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=37fad6a00375cf55493e9a745909630168cc0b27",
        "patch": "@@ -870,6 +870,7 @@ void PeerLogicValidation::NewPoWValidBlock(const CBlockIndex *pindex, const std:\n         // TODO: Avoid the repeated-serialization here\n         if (pnode->nVersion < INVALID_CB_NO_BAN_VERSION || pnode->fDisconnect)\n             return;\n+        LOCK(cs_main);\n         ProcessBlockAvailability(pnode->GetId());\n         CNodeState &state = *State(pnode->GetId());\n         // If the peer has, or we announced to them the previous block already,"
      }
    ]
  },
  {
    "sha": "2e7344abdb3b8905dd90e79463cba9ac97296c55",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZTczNDRhYmRiM2I4OTA1ZGQ5MGU3OTQ2M2NiYTlhYzk3Mjk2YzU1",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-09-01T14:54:03Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Add LOCK(node->cs_filter). The variable 'fRelayTxes' is guarded by that mutex.",
      "tree": {
        "sha": "bbfc51a3da6ab18d601821229cb0bad523b951e6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bbfc51a3da6ab18d601821229cb0bad523b951e6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2e7344abdb3b8905dd90e79463cba9ac97296c55",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2e7344abdb3b8905dd90e79463cba9ac97296c55",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2e7344abdb3b8905dd90e79463cba9ac97296c55",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2e7344abdb3b8905dd90e79463cba9ac97296c55/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "37fad6a00375cf55493e9a745909630168cc0b27",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/37fad6a00375cf55493e9a745909630168cc0b27",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/37fad6a00375cf55493e9a745909630168cc0b27"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "765494ee19d7238759098184253a31afe0c4f8ad",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2e7344abdb3b8905dd90e79463cba9ac97296c55/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2e7344abdb3b8905dd90e79463cba9ac97296c55/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=2e7344abdb3b8905dd90e79463cba9ac97296c55",
        "patch": "@@ -992,6 +992,7 @@ bool CConnman::AttemptToEvictConnection()\n                 continue;\n             if (node->fDisconnect)\n                 continue;\n+            LOCK(node->cs_filter);\n             NodeEvictionCandidate candidate = {node->GetId(), node->nTimeConnected, node->nMinPingUsecTime,\n                                                node->nLastBlockTime, node->nLastTXTime,\n                                                HasAllDesirableServiceFlags(node->nServices),"
      }
    ]
  },
  {
    "sha": "1543ad0f59dbbb743145b2f14bb4ba7a573d5f5c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNTQzYWQwZjU5ZGJiYjc0MzE0NWIyZjE0YmI0YmE3YTU3M2Q1ZjVj",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-09-01T17:26:46Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Add LOCK(walletInstance->cs_wallet). The variable 'mapWallet' is guarded by that mutex.",
      "tree": {
        "sha": "44baddc712d369b57474a2206a4bd0b30ace4a91",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/44baddc712d369b57474a2206a4bd0b30ace4a91"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1543ad0f59dbbb743145b2f14bb4ba7a573d5f5c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1543ad0f59dbbb743145b2f14bb4ba7a573d5f5c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1543ad0f59dbbb743145b2f14bb4ba7a573d5f5c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1543ad0f59dbbb743145b2f14bb4ba7a573d5f5c/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2e7344abdb3b8905dd90e79463cba9ac97296c55",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2e7344abdb3b8905dd90e79463cba9ac97296c55",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2e7344abdb3b8905dd90e79463cba9ac97296c55"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "eb1408eccfa7b734cb8deaa1a8a218583ee68958",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1543ad0f59dbbb743145b2f14bb4ba7a573d5f5c/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1543ad0f59dbbb743145b2f14bb4ba7a573d5f5c/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=1543ad0f59dbbb743145b2f14bb4ba7a573d5f5c",
        "patch": "@@ -4009,6 +4009,7 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n             for (const CWalletTx& wtxOld : vWtx)\n             {\n                 uint256 hash = wtxOld.GetHash();\n+                LOCK(walletInstance->cs_wallet);\n                 std::map<uint256, CWalletTx>::iterator mi = walletInstance->mapWallet.find(hash);\n                 if (mi != walletInstance->mapWallet.end())\n                 {"
      }
    ]
  },
  {
    "sha": "5f8ab503b0879ea35341bc723a8f43bd14887a0e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZjhhYjUwM2IwODc5ZWEzNTM0MWJjNzIzYThmNDNiZDE0ODg3YTBl",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-09-01T09:13:03Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Add GUARDED_BY(cs) [CAddrMan] annotation",
      "tree": {
        "sha": "b70234b89c2325e6fd568c0f5fc3404a49087343",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b70234b89c2325e6fd568c0f5fc3404a49087343"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5f8ab503b0879ea35341bc723a8f43bd14887a0e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f8ab503b0879ea35341bc723a8f43bd14887a0e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5f8ab503b0879ea35341bc723a8f43bd14887a0e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f8ab503b0879ea35341bc723a8f43bd14887a0e/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1543ad0f59dbbb743145b2f14bb4ba7a573d5f5c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1543ad0f59dbbb743145b2f14bb4ba7a573d5f5c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1543ad0f59dbbb743145b2f14bb4ba7a573d5f5c"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 6,
      "deletions": 6
    },
    "files": [
      {
        "sha": "685b4ed3b2272ddc4aa166a7d5e82cf17b9c89da",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f8ab503b0879ea35341bc723a8f43bd14887a0e/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f8ab503b0879ea35341bc723a8f43bd14887a0e/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=5f8ab503b0879ea35341bc723a8f43bd14887a0e",
        "patch": "@@ -413,10 +413,10 @@ class CTxMemPool\n {\n private:\n     uint32_t nCheckFrequency; //!< Value n means that n times in 2^32 we check.\n-    unsigned int nTransactionsUpdated; //!< Used by getblocktemplate to trigger CreateNewBlock() invocation\n+    unsigned int nTransactionsUpdated GUARDED_BY(cs); //!< Used by getblocktemplate to trigger CreateNewBlock() invocation\n     CBlockPolicyEstimator* minerPolicyEstimator;\n \n-    uint64_t totalTxSize;      //!< sum of all mempool tx's virtual sizes. Differs from serialized tx size since witness data is discounted. Defined in BIP 141.\n+    uint64_t totalTxSize GUARDED_BY(cs); //!< sum of all mempool tx's virtual sizes. Differs from serialized tx size since witness data is discounted. Defined in BIP 141.\n     uint64_t cachedInnerUsage; //!< sum of dynamic memory usage of all the map elements (NOT the maps themselves)\n \n     mutable int64_t lastRollingFeeUpdate;\n@@ -462,10 +462,10 @@ class CTxMemPool\n     > indexed_transaction_set;\n \n     mutable CCriticalSection cs;\n-    indexed_transaction_set mapTx;\n+    indexed_transaction_set mapTx GUARDED_BY(cs);\n \n     typedef indexed_transaction_set::nth_index<0>::type::iterator txiter;\n-    std::vector<std::pair<uint256, txiter> > vTxHashes; //!< All tx witness hashes/entries in mapTx, in random order\n+    std::vector<std::pair<uint256, txiter>> vTxHashes GUARDED_BY(cs); //!< All tx witness hashes/entries in mapTx, in random order\n \n     struct CompareIteratorByHash {\n         bool operator()(const txiter &a, const txiter &b) const {\n@@ -493,8 +493,8 @@ class CTxMemPool\n     std::vector<indexed_transaction_set::const_iterator> GetSortedDepthAndScore() const;\n \n public:\n-    indirectmap<COutPoint, const CTransaction*> mapNextTx;\n-    std::map<uint256, CAmount> mapDeltas;\n+    indirectmap<COutPoint, const CTransaction*> mapNextTx GUARDED_BY(cs);\n+    std::map<uint256, CAmount> mapDeltas GUARDED_BY(cs);\n \n     /** Create a new CTxMemPool.\n      */"
      }
    ]
  },
  {
    "sha": "aedabc66774028031dd6fa1f8e6d25de5ac7229f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZWRhYmM2Njc3NDAyODAzMWRkNmZhMWY4ZTZkMjVkZTVhYzcyMjlm",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-09-01T09:09:55Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Add GUARDED_BY(cs) [CTxMemPool] annotation",
      "tree": {
        "sha": "b693c126f81ec57734523e83c469c9a6da352375",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b693c126f81ec57734523e83c469c9a6da352375"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aedabc66774028031dd6fa1f8e6d25de5ac7229f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aedabc66774028031dd6fa1f8e6d25de5ac7229f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/aedabc66774028031dd6fa1f8e6d25de5ac7229f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aedabc66774028031dd6fa1f8e6d25de5ac7229f/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5f8ab503b0879ea35341bc723a8f43bd14887a0e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f8ab503b0879ea35341bc723a8f43bd14887a0e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5f8ab503b0879ea35341bc723a8f43bd14887a0e"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "655beb33d464bf12558f8d667e0f59c250230227",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aedabc66774028031dd6fa1f8e6d25de5ac7229f/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aedabc66774028031dd6fa1f8e6d25de5ac7229f/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=aedabc66774028031dd6fa1f8e6d25de5ac7229f",
        "patch": "@@ -195,7 +195,7 @@ class CAddrMan\n     std::map<CNetAddr, int> mapAddr;\n \n     //! randomly-ordered vector of all nIds\n-    std::vector<int> vRandom;\n+    std::vector<int> vRandom GUARDED_BY(cs);\n \n     // number of \"tried\" entries\n     int nTried;"
      }
    ]
  },
  {
    "sha": "0fec14b4bcdaaf5384e42d0262f5337f8bbb62e7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZmVjMTRiNGJjZGFhZjUzODRlNDJkMDI2MmY1MzM3ZjhiYmI2MmU3",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-09-01T12:14:59Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Add GUARDED_BY(cs_addrLocal) annotation",
      "tree": {
        "sha": "08e6b22f00638282bf3e45726bfb240813d606ae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/08e6b22f00638282bf3e45726bfb240813d606ae"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0fec14b4bcdaaf5384e42d0262f5337f8bbb62e7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0fec14b4bcdaaf5384e42d0262f5337f8bbb62e7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0fec14b4bcdaaf5384e42d0262f5337f8bbb62e7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0fec14b4bcdaaf5384e42d0262f5337f8bbb62e7/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "aedabc66774028031dd6fa1f8e6d25de5ac7229f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aedabc66774028031dd6fa1f8e6d25de5ac7229f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/aedabc66774028031dd6fa1f8e6d25de5ac7229f"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "3aa98942409fa5544b293a8b0293ea503f4731b4",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fec14b4bcdaaf5384e42d0262f5337f8bbb62e7/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fec14b4bcdaaf5384e42d0262f5337f8bbb62e7/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=0fec14b4bcdaaf5384e42d0262f5337f8bbb62e7",
        "patch": "@@ -738,8 +738,8 @@ class CNode\n     std::string addrName;\n \n     // Our address, as reported by the peer\n-    CService addrLocal;\n     mutable CCriticalSection cs_addrLocal;\n+    CService addrLocal GUARDED_BY(cs_addrLocal);\n public:\n \n     NodeId GetId() const {"
      }
    ]
  },
  {
    "sha": "3c7f4c135e24f44509e38adb4bd6f935ed757279",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYzdmNGMxMzVlMjRmNDQ1MDllMzhhZGI0YmQ2ZjkzNWVkNzU3Mjc5",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-09-01T12:14:36Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Add GUARDED_BY(cs_addrName) annotation",
      "tree": {
        "sha": "07c1db7d4b22878499115b679a786c833b00e7f2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/07c1db7d4b22878499115b679a786c833b00e7f2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3c7f4c135e24f44509e38adb4bd6f935ed757279",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c7f4c135e24f44509e38adb4bd6f935ed757279",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3c7f4c135e24f44509e38adb4bd6f935ed757279",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c7f4c135e24f44509e38adb4bd6f935ed757279/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0fec14b4bcdaaf5384e42d0262f5337f8bbb62e7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0fec14b4bcdaaf5384e42d0262f5337f8bbb62e7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0fec14b4bcdaaf5384e42d0262f5337f8bbb62e7"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "cbdf413786fb49781aa2b396c6cbca1a695ce096",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c7f4c135e24f44509e38adb4bd6f935ed757279/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c7f4c135e24f44509e38adb4bd6f935ed757279/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=3c7f4c135e24f44509e38adb4bd6f935ed757279",
        "patch": "@@ -735,7 +735,7 @@ class CNode\n     std::list<CNetMessage> vRecvMsg;  // Used only by SocketHandler thread\n \n     mutable CCriticalSection cs_addrName;\n-    std::string addrName;\n+    std::string addrName GUARDED_BY(cs_addrName);\n \n     // Our address, as reported by the peer\n     mutable CCriticalSection cs_addrLocal;"
      }
    ]
  },
  {
    "sha": "e0a8d2a17246fa1581b656cfc3fb3b48c8557c70",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMGE4ZDJhMTcyNDZmYTE1ODFiNjU2Y2ZjM2ZiM2I0OGM4NTU3Yzcw",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-09-01T09:15:37Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Add GUARDED_BY(cs_args) annotation",
      "tree": {
        "sha": "29717b5377b812230e07ba20f97061f6e9788aab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/29717b5377b812230e07ba20f97061f6e9788aab"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e0a8d2a17246fa1581b656cfc3fb3b48c8557c70",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0a8d2a17246fa1581b656cfc3fb3b48c8557c70",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e0a8d2a17246fa1581b656cfc3fb3b48c8557c70",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0a8d2a17246fa1581b656cfc3fb3b48c8557c70/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3c7f4c135e24f44509e38adb4bd6f935ed757279",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c7f4c135e24f44509e38adb4bd6f935ed757279",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3c7f4c135e24f44509e38adb4bd6f935ed757279"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "d0f6e8dd75e1b060e141027e9ca1900599710b1b",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e0a8d2a17246fa1581b656cfc3fb3b48c8557c70/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e0a8d2a17246fa1581b656cfc3fb3b48c8557c70/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=e0a8d2a17246fa1581b656cfc3fb3b48c8557c70",
        "patch": "@@ -199,8 +199,8 @@ class ArgsManager\n {\n protected:\n     mutable CCriticalSection cs_args;\n-    std::map<std::string, std::string> mapArgs;\n-    std::map<std::string, std::vector<std::string>> mapMultiArgs;\n+    std::map<std::string, std::string> mapArgs GUARDED_BY(cs_args);\n+    std::map<std::string, std::vector<std::string>> mapMultiArgs GUARDED_BY(cs_args);\n public:\n     void ParseParameters(int argc, const char*const argv[]);\n     void ReadConfigFile(const std::string& confPath);"
      }
    ]
  },
  {
    "sha": "41534f724271fa1e5f533e9a995be41f6c079a41",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MTUzNGY3MjQyNzFmYTFlNWY1MzNlOWE5OTViZTQxZjZjMDc5YTQx",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-09-01T09:15:52Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Add GUARDED_BY(cs_db) annotation",
      "tree": {
        "sha": "dd880af96869a70fa0c967f2ea13462f2cf1e9a9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dd880af96869a70fa0c967f2ea13462f2cf1e9a9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/41534f724271fa1e5f533e9a995be41f6c079a41",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41534f724271fa1e5f533e9a995be41f6c079a41",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/41534f724271fa1e5f533e9a995be41f6c079a41",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41534f724271fa1e5f533e9a995be41f6c079a41/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e0a8d2a17246fa1581b656cfc3fb3b48c8557c70",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0a8d2a17246fa1581b656cfc3fb3b48c8557c70",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e0a8d2a17246fa1581b656cfc3fb3b48c8557c70"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "7cd0b86e36fb300f6bc526ec87ab7fc62781909b",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41534f724271fa1e5f533e9a995be41f6c079a41/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41534f724271fa1e5f533e9a995be41f6c079a41/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=41534f724271fa1e5f533e9a995be41f6c079a41",
        "patch": "@@ -37,8 +37,8 @@ class CDBEnv\n public:\n     mutable CCriticalSection cs_db;\n     std::unique_ptr<DbEnv> dbenv;\n-    std::map<std::string, int> mapFileUseCount;\n-    std::map<std::string, Db*> mapDb;\n+    std::map<std::string, int> mapFileUseCount GUARDED_BY(cs_db);\n+    std::map<std::string, Db*> mapDb GUARDED_BY(cs_db);\n \n     CDBEnv();\n     ~CDBEnv();"
      }
    ]
  },
  {
    "sha": "4a7ae5510823f289540845d4d261b48e67342463",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YTdhZTU1MTA4MjNmMjg5NTQwODQ1ZDRkMjYxYjQ4ZTY3MzQyNDYz",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-09-01T09:11:58Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Add GUARDED_BY(cs_feeEstimator) annotation",
      "tree": {
        "sha": "c8e9a09e0769455b46c4a22707d8a678e14a8371",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c8e9a09e0769455b46c4a22707d8a678e14a8371"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4a7ae5510823f289540845d4d261b48e67342463",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a7ae5510823f289540845d4d261b48e67342463",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4a7ae5510823f289540845d4d261b48e67342463",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a7ae5510823f289540845d4d261b48e67342463/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "41534f724271fa1e5f533e9a995be41f6c079a41",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41534f724271fa1e5f533e9a995be41f6c079a41",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/41534f724271fa1e5f533e9a995be41f6c079a41"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 14,
      "deletions": 14
    },
    "files": [
      {
        "sha": "fb2276c82acc2ffac951023c4b9bde5a80ee068a",
        "filename": "src/policy/fees.h",
        "status": "modified",
        "additions": 14,
        "deletions": 14,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a7ae5510823f289540845d4d261b48e67342463/src/policy/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a7ae5510823f289540845d4d261b48e67342463/src/policy/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.h?ref=4a7ae5510823f289540845d4d261b48e67342463",
        "patch": "@@ -229,10 +229,12 @@ class CBlockPolicyEstimator\n     unsigned int HighestTargetTracked(FeeEstimateHorizon horizon) const;\n \n private:\n-    unsigned int nBestSeenHeight;\n-    unsigned int firstRecordedHeight;\n-    unsigned int historicalFirst;\n-    unsigned int historicalBest;\n+    mutable CCriticalSection cs_feeEstimator;\n+\n+    unsigned int nBestSeenHeight GUARDED_BY(cs_feeEstimator);\n+    unsigned int firstRecordedHeight GUARDED_BY(cs_feeEstimator);\n+    unsigned int historicalFirst GUARDED_BY(cs_feeEstimator);\n+    unsigned int historicalBest GUARDED_BY(cs_feeEstimator);\n \n     struct TxStatsInfo\n     {\n@@ -242,20 +244,18 @@ class CBlockPolicyEstimator\n     };\n \n     // map of txids to information about that transaction\n-    std::map<uint256, TxStatsInfo> mapMemPoolTxs;\n+    std::map<uint256, TxStatsInfo> mapMemPoolTxs GUARDED_BY(cs_feeEstimator);\n \n     /** Classes to track historical data on transaction confirmations */\n-    std::unique_ptr<TxConfirmStats> feeStats;\n-    std::unique_ptr<TxConfirmStats> shortStats;\n-    std::unique_ptr<TxConfirmStats> longStats;\n+    std::unique_ptr<TxConfirmStats> feeStats PT_GUARDED_BY(cs_feeEstimator);\n+    std::unique_ptr<TxConfirmStats> shortStats PT_GUARDED_BY(cs_feeEstimator);\n+    std::unique_ptr<TxConfirmStats> longStats PT_GUARDED_BY(cs_feeEstimator);\n \n-    unsigned int trackedTxs;\n-    unsigned int untrackedTxs;\n+    unsigned int trackedTxs GUARDED_BY(cs_feeEstimator);\n+    unsigned int untrackedTxs GUARDED_BY(cs_feeEstimator);\n \n-    std::vector<double> buckets;              // The upper-bound of the range for the bucket (inclusive)\n-    std::map<double, unsigned int> bucketMap; // Map of bucket upper-bound to index into all vectors by bucket\n-\n-    mutable CCriticalSection cs_feeEstimator;\n+    std::vector<double> buckets GUARDED_BY(cs_feeEstimator); // The upper-bound of the range for the bucket (inclusive)\n+    std::map<double, unsigned int> bucketMap GUARDED_BY(cs_feeEstimator); // Map of bucket upper-bound to index into all vectors by bucket\n \n     /** Process a transaction confirmed in a block*/\n     bool processBlockTx(unsigned int nBlockHeight, const CTxMemPoolEntry* entry);"
      }
    ]
  },
  {
    "sha": "94c7702dfac1694b36db5b7fc400d0cd14515e88",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NGM3NzAyZGZhYzE2OTRiMzZkYjViN2ZjNDAwZDBjZDE0NTE1ZTg4",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-09-01T12:05:48Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Add GUARDED_BY(cs_feeFilter) annotation",
      "tree": {
        "sha": "651ee8da59178c4458c0ee1a3e86c400bd071461",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/651ee8da59178c4458c0ee1a3e86c400bd071461"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/94c7702dfac1694b36db5b7fc400d0cd14515e88",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94c7702dfac1694b36db5b7fc400d0cd14515e88",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/94c7702dfac1694b36db5b7fc400d0cd14515e88",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94c7702dfac1694b36db5b7fc400d0cd14515e88/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4a7ae5510823f289540845d4d261b48e67342463",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a7ae5510823f289540845d4d261b48e67342463",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4a7ae5510823f289540845d4d261b48e67342463"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "ecc6d1f35617fa6d7fc4ac4bfe948ca670c3d808",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94c7702dfac1694b36db5b7fc400d0cd14515e88/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94c7702dfac1694b36db5b7fc400d0cd14515e88/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=94c7702dfac1694b36db5b7fc400d0cd14515e88",
        "patch": "@@ -715,8 +715,8 @@ class CNode\n     // Whether a ping is requested.\n     std::atomic<bool> fPingQueued;\n     // Minimum fee rate with which to filter inv's to this node\n-    CAmount minFeeFilter;\n     CCriticalSection cs_feeFilter;\n+    CAmount minFeeFilter GUARDED_BY(cs_feeFilter);\n     CAmount lastSentFeeFilter;\n     int64_t nextSendTimeFeeFilter;\n "
      }
    ]
  },
  {
    "sha": "faffd219bdd3253bab0b96e43ff8253f1e01bf9a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWZmZDIxOWJkZDMyNTNiYWIwYjk2ZTQzZmY4MjUzZjFlMDFiZjlh",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-09-01T12:11:09Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Add GUARDED_BY(cs_filter) annotation",
      "tree": {
        "sha": "73fefaaae8d58b5e54b8281b981692fc2e808293",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/73fefaaae8d58b5e54b8281b981692fc2e808293"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/faffd219bdd3253bab0b96e43ff8253f1e01bf9a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faffd219bdd3253bab0b96e43ff8253f1e01bf9a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/faffd219bdd3253bab0b96e43ff8253f1e01bf9a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faffd219bdd3253bab0b96e43ff8253f1e01bf9a/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "94c7702dfac1694b36db5b7fc400d0cd14515e88",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94c7702dfac1694b36db5b7fc400d0cd14515e88",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/94c7702dfac1694b36db5b7fc400d0cd14515e88"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 3,
      "deletions": 2
    },
    "files": [
      {
        "sha": "3024f32f273919c3ffd33d893a6074f4f488ea67",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faffd219bdd3253bab0b96e43ff8253f1e01bf9a/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faffd219bdd3253bab0b96e43ff8253f1e01bf9a/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=faffd219bdd3253bab0b96e43ff8253f1e01bf9a",
        "patch": "@@ -650,11 +650,12 @@ class CNode\n     // a) it allows us to not relay tx invs before receiving the peer's version message\n     // b) the peer may tell us in its version message that we should not relay tx invs\n     //    unless it loads a bloom filter.\n-    bool fRelayTxes; //protected by cs_filter\n+    CCriticalSection cs_filter;\n+    bool fRelayTxes GUARDED_BY(cs_filter);\n     bool fSentAddr;\n     CSemaphoreGrant grantOutbound;\n     CCriticalSection cs_filter;\n-    std::unique_ptr<CBloomFilter> pfilter;\n+    std::unique_ptr<CBloomFilter> pfilter PT_GUARDED_BY(cs_filter);\n     std::atomic<int> nRefCount;\n \n     const uint64_t nKeyedNetGroup;"
      }
    ]
  },
  {
    "sha": "4724e2ba9961d368faacde823e6bffa0aed1a088",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NzI0ZTJiYTk5NjFkMzY4ZmFhY2RlODIzZTZiZmZhMGFlZDFhMDg4",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-09-01T12:16:52Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Add GUARDED_BY(cs_hSocket) annotation",
      "tree": {
        "sha": "a66d5180e2b9c5835608306ffd9781190a790a79",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a66d5180e2b9c5835608306ffd9781190a790a79"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4724e2ba9961d368faacde823e6bffa0aed1a088",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4724e2ba9961d368faacde823e6bffa0aed1a088",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4724e2ba9961d368faacde823e6bffa0aed1a088",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4724e2ba9961d368faacde823e6bffa0aed1a088/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "faffd219bdd3253bab0b96e43ff8253f1e01bf9a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faffd219bdd3253bab0b96e43ff8253f1e01bf9a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/faffd219bdd3253bab0b96e43ff8253f1e01bf9a"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "34357fea44bec7764349fa13dc4507e25964ef9c",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4724e2ba9961d368faacde823e6bffa0aed1a088/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4724e2ba9961d368faacde823e6bffa0aed1a088/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=4724e2ba9961d368faacde823e6bffa0aed1a088",
        "patch": "@@ -604,13 +604,13 @@ class CNode\n public:\n     // socket\n     std::atomic<ServiceFlags> nServices;\n-    SOCKET hSocket;\n+    CCriticalSection cs_hSocket;\n+    SOCKET hSocket GUARDED_BY(cs_hSocket);\n     size_t nSendSize; // total size of all vSendMsg entries\n     size_t nSendOffset; // offset inside the first vSendMsg already sent\n     uint64_t nSendBytes;\n     std::deque<std::vector<unsigned char>> vSendMsg;\n     CCriticalSection cs_vSend;\n-    CCriticalSection cs_hSocket;\n     CCriticalSection cs_vRecv;\n \n     CCriticalSection cs_vProcessMsg;"
      }
    ]
  },
  {
    "sha": "0cd42f04a4543c2559fd43a36b1110c74b18138b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowY2Q0MmYwNGE0NTQzYzI1NTlmZDQzYTM2YjExMTBjNzRiMTgxMzhi",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-09-01T12:12:32Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Add GUARDED_BY(cs_inventory) annotation",
      "tree": {
        "sha": "ea454d5f979c3ada92441986635853358c1d43e1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ea454d5f979c3ada92441986635853358c1d43e1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0cd42f04a4543c2559fd43a36b1110c74b18138b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0cd42f04a4543c2559fd43a36b1110c74b18138b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0cd42f04a4543c2559fd43a36b1110c74b18138b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0cd42f04a4543c2559fd43a36b1110c74b18138b/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4724e2ba9961d368faacde823e6bffa0aed1a088",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4724e2ba9961d368faacde823e6bffa0aed1a088",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4724e2ba9961d368faacde823e6bffa0aed1a088"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "c118ed39e6dc66f36b062f19bf261e694dd27d7f",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0cd42f04a4543c2559fd43a36b1110c74b18138b/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0cd42f04a4543c2559fd43a36b1110c74b18138b/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=0cd42f04a4543c2559fd43a36b1110c74b18138b",
        "patch": "@@ -678,24 +678,24 @@ class CNode\n     int64_t nNextAddrSend;\n     int64_t nNextLocalAddrSend;\n \n+    CCriticalSection cs_inventory;\n     // inventory based relay\n-    CRollingBloomFilter filterInventoryKnown;\n+    CRollingBloomFilter filterInventoryKnown GUARDED_BY(cs_inventory);\n     // Set of transaction ids we still have to announce.\n     // They are sorted by the mempool before relay, so the order is not important.\n     std::set<uint256> setInventoryTxToSend;\n     // List of block ids we still have announce.\n     // There is no final sorting before sending, as they are always sent immediately\n     // and in the order requested.\n-    std::vector<uint256> vInventoryBlockToSend;\n-    CCriticalSection cs_inventory;\n+    std::vector<uint256> vInventoryBlockToSend GUARDED_BY(cs_inventory);\n     std::set<uint256> setAskFor;\n     std::multimap<int64_t, CInv> mapAskFor;\n     int64_t nNextInvSend;\n     // Used for headers announcements - unfiltered blocks to relay\n     // Also protected by cs_inventory\n-    std::vector<uint256> vBlockHashesToAnnounce;\n+    std::vector<uint256> vBlockHashesToAnnounce GUARDED_BY(cs_inventory);\n     // Used for BIP35 mempool sending, also protected by cs_inventory\n-    bool fSendMempool;\n+    bool fSendMempool GUARDED_BY(cs_inventory);\n \n     // Last time a \"MEMPOOL\" request was serviced.\n     std::atomic<int64_t> timeLastMempoolReq;"
      }
    ]
  },
  {
    "sha": "8d30aa314b22f1b6b827a3e29991e5ebb4cacada",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZDMwYWEzMTRiMjJmMWI2YjgyN2EzZTI5OTkxZTVlYmI0Y2FjYWRh",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-09-01T17:23:39Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Add GUARDED_BY(cs_KeyStore) annotation",
      "tree": {
        "sha": "6fca5a3797bfc634489c4e5c2c565bd42f6226e6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6fca5a3797bfc634489c4e5c2c565bd42f6226e6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8d30aa314b22f1b6b827a3e29991e5ebb4cacada",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d30aa314b22f1b6b827a3e29991e5ebb4cacada",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8d30aa314b22f1b6b827a3e29991e5ebb4cacada",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d30aa314b22f1b6b827a3e29991e5ebb4cacada/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0cd42f04a4543c2559fd43a36b1110c74b18138b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0cd42f04a4543c2559fd43a36b1110c74b18138b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0cd42f04a4543c2559fd43a36b1110c74b18138b"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "28c96548098c042e9f2c5cd34ded5242fd75355a",
        "filename": "src/wallet/crypter.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d30aa314b22f1b6b827a3e29991e5ebb4cacada/src/wallet/crypter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d30aa314b22f1b6b827a3e29991e5ebb4cacada/src/wallet/crypter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/crypter.h?ref=8d30aa314b22f1b6b827a3e29991e5ebb4cacada",
        "patch": "@@ -116,7 +116,7 @@ class CCryptoKeyStore : public CBasicKeyStore\n {\n private:\n \n-    CKeyingMaterial vMasterKey;\n+    CKeyingMaterial vMasterKey GUARDED_BY(cs_KeyStore);\n \n     //! if fUseCrypto is true, mapKeys must be empty\n     //! if fUseCrypto is false, vMasterKey must be empty"
      }
    ]
  },
  {
    "sha": "742c48998ca18c58ac6621da29b49515397d7f3d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NDJjNDg5OThjYTE4YzU4YWM2NjIxZGEyOWI0OTUxNTM5N2Q3ZjNk",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-09-01T09:22:05Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Add GUARDED_BY(cs_main) annotation",
      "tree": {
        "sha": "6d6a134e1483e2f3a042bf3f402fbc1bc0e4428e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6d6a134e1483e2f3a042bf3f402fbc1bc0e4428e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/742c48998ca18c58ac6621da29b49515397d7f3d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/742c48998ca18c58ac6621da29b49515397d7f3d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/742c48998ca18c58ac6621da29b49515397d7f3d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/742c48998ca18c58ac6621da29b49515397d7f3d/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8d30aa314b22f1b6b827a3e29991e5ebb4cacada",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d30aa314b22f1b6b827a3e29991e5ebb4cacada",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8d30aa314b22f1b6b827a3e29991e5ebb4cacada"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "2e54431b1cfd89c8448b8488d02526f049bbb17a",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/742c48998ca18c58ac6621da29b49515397d7f3d/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/742c48998ca18c58ac6621da29b49515397d7f3d/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=742c48998ca18c58ac6621da29b49515397d7f3d",
        "patch": "@@ -82,7 +82,7 @@ namespace {\n      * Set mapBlockSource[hash].second to false if the node should not be\n      * punished if the block is invalid.\n      */\n-    std::map<uint256, std::pair<NodeId, bool>> mapBlockSource;\n+    std::map<uint256, std::pair<NodeId, bool>> mapBlockSource GUARDED_BY(cs_main);\n \n     /**\n      * Filter for transactions that were recently rejected by\n@@ -114,7 +114,7 @@ namespace {\n         bool fValidatedHeaders;                                  //!< Whether this block has validated headers at the time of request.\n         std::unique_ptr<PartiallyDownloadedBlock> partialBlock;  //!< Optional, used for CMPCTBLOCK downloads\n     };\n-    std::map<uint256, std::pair<NodeId, std::list<QueuedBlock>::iterator> > mapBlocksInFlight;\n+    std::map<uint256, std::pair<NodeId, std::list<QueuedBlock>::iterator>> mapBlocksInFlight GUARDED_BY(cs_main);\n \n     /** Stack of nodes which we have set to announce using compact blocks */\n     std::list<NodeId> lNodesAnnouncingHeaderAndIDs;\n@@ -266,7 +266,7 @@ struct CNodeState {\n };\n \n /** Map maintaining per-node state. Requires cs_main. */\n-std::map<NodeId, CNodeState> mapNodeState;\n+std::map<NodeId, CNodeState> mapNodeState GUARDED_BY(cs_main);\n \n // Requires cs_main.\n CNodeState *State(NodeId pnode) {"
      }
    ]
  },
  {
    "sha": "7649019575fb354842fd29b358c043a2d1865739",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NjQ5MDE5NTc1ZmIzNTQ4NDJmZDI5YjM1OGMwNDNhMmQxODY1NzM5",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-09-01T12:05:18Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Add GUARDED_BY(cs_mapLocalHost) annotation",
      "tree": {
        "sha": "cef24e8efd4b5312933746573bc700e86b648fba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cef24e8efd4b5312933746573bc700e86b648fba"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7649019575fb354842fd29b358c043a2d1865739",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7649019575fb354842fd29b358c043a2d1865739",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7649019575fb354842fd29b358c043a2d1865739",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7649019575fb354842fd29b358c043a2d1865739/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "742c48998ca18c58ac6621da29b49515397d7f3d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/742c48998ca18c58ac6621da29b49515397d7f3d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/742c48998ca18c58ac6621da29b49515397d7f3d"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "b8197f61dd45130debd75e4b7264df3fc8e51f62",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7649019575fb354842fd29b358c043a2d1865739/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7649019575fb354842fd29b358c043a2d1865739/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=7649019575fb354842fd29b358c043a2d1865739",
        "patch": "@@ -515,7 +515,7 @@ struct LocalServiceInfo {\n };\n \n extern CCriticalSection cs_mapLocalHost;\n-extern std::map<CNetAddr, LocalServiceInfo> mapLocalHost;\n+extern std::map<CNetAddr, LocalServiceInfo> mapLocalHost GUARDED_BY(cs_mapLocalHost);\n typedef std::map<std::string, uint64_t> mapMsgCmdSize; //command, total bytes\n \n class CNodeStats"
      }
    ]
  },
  {
    "sha": "51e756f0e8a9050cea9056197f420aaa5c38701f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MWU3NTZmMGU4YTkwNTBjZWE5MDU2MTk3ZjQyMGFhYTVjMzg3MDFm",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-09-01T09:21:39Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Add GUARDED_BY(cs_most_recent_block) annotation",
      "tree": {
        "sha": "46010cd7fddebf983bafcf8ebc4c8d07c5fdbb74",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/46010cd7fddebf983bafcf8ebc4c8d07c5fdbb74"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/51e756f0e8a9050cea9056197f420aaa5c38701f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/51e756f0e8a9050cea9056197f420aaa5c38701f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/51e756f0e8a9050cea9056197f420aaa5c38701f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/51e756f0e8a9050cea9056197f420aaa5c38701f/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7649019575fb354842fd29b358c043a2d1865739",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7649019575fb354842fd29b358c043a2d1865739",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7649019575fb354842fd29b358c043a2d1865739"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "9c6668f4286c56c32616bec25c17eb97c9af21ac",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51e756f0e8a9050cea9056197f420aaa5c38701f/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51e756f0e8a9050cea9056197f420aaa5c38701f/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=51e756f0e8a9050cea9056197f420aaa5c38701f",
        "patch": "@@ -839,10 +839,10 @@ void PeerLogicValidation::BlockConnected(const std::shared_ptr<const CBlock>& pb\n \n // All of the following cache a recent block, and are protected by cs_most_recent_block\n static CCriticalSection cs_most_recent_block;\n-static std::shared_ptr<const CBlock> most_recent_block;\n-static std::shared_ptr<const CBlockHeaderAndShortTxIDs> most_recent_compact_block;\n-static uint256 most_recent_block_hash;\n-static bool fWitnessesPresentInMostRecentCompactBlock;\n+static std::shared_ptr<const CBlock> most_recent_block PT_GUARDED_BY(cs_most_recent_block);\n+static std::shared_ptr<const CBlockHeaderAndShortTxIDs> most_recent_compact_block PT_GUARDED_BY(cs_most_recent_block);\n+static uint256 most_recent_block_hash GUARDED_BY(cs_most_recent_block);\n+static bool fWitnessesPresentInMostRecentCompactBlock GUARDED_BY(cs_most_recent_block);\n \n void PeerLogicValidation::NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock>& pblock) {\n     std::shared_ptr<const CBlockHeaderAndShortTxIDs> pcmpctblock = std::make_shared<const CBlockHeaderAndShortTxIDs> (*pblock, true);"
      }
    ]
  },
  {
    "sha": "1ed45d11e4659ebf98fe37b7b5ca8a25e913b509",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZWQ0NWQxMWU0NjU5ZWJmOThmZTM3YjdiNWNhOGEyNWU5MTNiNTA5",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-09-01T09:15:20Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Add GUARDED_BY(cs_proxyInfos) annotation",
      "tree": {
        "sha": "676e7abced1d309e5e6e88477a990efeaddd15aa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/676e7abced1d309e5e6e88477a990efeaddd15aa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1ed45d11e4659ebf98fe37b7b5ca8a25e913b509",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ed45d11e4659ebf98fe37b7b5ca8a25e913b509",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1ed45d11e4659ebf98fe37b7b5ca8a25e913b509",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ed45d11e4659ebf98fe37b7b5ca8a25e913b509/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "51e756f0e8a9050cea9056197f420aaa5c38701f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/51e756f0e8a9050cea9056197f420aaa5c38701f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/51e756f0e8a9050cea9056197f420aaa5c38701f"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "79b89a676489e5075d7b56566647d68c87f77128",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1ed45d11e4659ebf98fe37b7b5ca8a25e913b509/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1ed45d11e4659ebf98fe37b7b5ca8a25e913b509/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=1ed45d11e4659ebf98fe37b7b5ca8a25e913b509",
        "patch": "@@ -30,9 +30,9 @@\n #endif\n \n // Settings\n-static proxyType proxyInfo[NET_MAX];\n-static proxyType nameProxy;\n static CCriticalSection cs_proxyInfos;\n+static proxyType proxyInfo[NET_MAX] GUARDED_BY(cs_proxyInfos);\n+static proxyType nameProxy GUARDED_BY(cs_proxyInfos);\n int nConnectTimeout = DEFAULT_CONNECT_TIMEOUT;\n bool fNameLookup = DEFAULT_NAME_LOOKUP;\n "
      }
    ]
  },
  {
    "sha": "8d7f2ad1256caeaa75fb1d85b04fd8807b247dbe",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZDdmMmFkMTI1NmNhZWFhNzVmYjFkODViMDRmZDg4MDdiMjQ3ZGJl",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-09-01T12:09:07Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Add GUARDED_BY(cs_sendProcessing) annotation",
      "tree": {
        "sha": "309e71f2f065c3e31a10384098c3182829f8bbe4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/309e71f2f065c3e31a10384098c3182829f8bbe4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8d7f2ad1256caeaa75fb1d85b04fd8807b247dbe",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d7f2ad1256caeaa75fb1d85b04fd8807b247dbe",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8d7f2ad1256caeaa75fb1d85b04fd8807b247dbe",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d7f2ad1256caeaa75fb1d85b04fd8807b247dbe/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1ed45d11e4659ebf98fe37b7b5ca8a25e913b509",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ed45d11e4659ebf98fe37b7b5ca8a25e913b509",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1ed45d11e4659ebf98fe37b7b5ca8a25e913b509"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "1b73919deeebb1fa4b359ba4b120dcca78c3ccae",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d7f2ad1256caeaa75fb1d85b04fd8807b247dbe/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d7f2ad1256caeaa75fb1d85b04fd8807b247dbe/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=8d7f2ad1256caeaa75fb1d85b04fd8807b247dbe",
        "patch": "@@ -675,8 +675,8 @@ class CNode\n     CRollingBloomFilter addrKnown;\n     bool fGetAddr;\n     std::set<uint256> setKnown;\n-    int64_t nNextAddrSend;\n-    int64_t nNextLocalAddrSend;\n+    int64_t nNextAddrSend GUARDED_BY(cs_sendProcessing);\n+    int64_t nNextLocalAddrSend GUARDED_BY(cs_sendProcessing);\n \n     CCriticalSection cs_inventory;\n     // inventory based relay"
      }
    ]
  },
  {
    "sha": "ae800092d6080cc626db9426aa49b213732611ee",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZTgwMDA5MmQ2MDgwY2M2MjZkYjk0MjZhYTQ5YjIxMzczMjYxMWVl",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-09-01T12:28:27Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Add GUARDED_BY(cs_vSend) annotation",
      "tree": {
        "sha": "c69982d3ee59745cd66fdeca1f7608fb299b2448",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c69982d3ee59745cd66fdeca1f7608fb299b2448"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ae800092d6080cc626db9426aa49b213732611ee",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae800092d6080cc626db9426aa49b213732611ee",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ae800092d6080cc626db9426aa49b213732611ee",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae800092d6080cc626db9426aa49b213732611ee/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8d7f2ad1256caeaa75fb1d85b04fd8807b247dbe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d7f2ad1256caeaa75fb1d85b04fd8807b247dbe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8d7f2ad1256caeaa75fb1d85b04fd8807b247dbe"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "0a477f8bab8e5458f53e87860e65e0e799de80fc",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae800092d6080cc626db9426aa49b213732611ee/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae800092d6080cc626db9426aa49b213732611ee/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=ae800092d6080cc626db9426aa49b213732611ee",
        "patch": "@@ -608,8 +608,8 @@ class CNode\n     SOCKET hSocket GUARDED_BY(cs_hSocket);\n     size_t nSendSize; // total size of all vSendMsg entries\n     size_t nSendOffset; // offset inside the first vSendMsg already sent\n-    uint64_t nSendBytes;\n-    std::deque<std::vector<unsigned char>> vSendMsg;\n+    uint64_t nSendBytes GUARDED_BY(cs_vSend);\n+    std::deque<std::vector<unsigned char>> vSendMsg GUARDED_BY(cs_vSend);\n     CCriticalSection cs_vSend;\n     CCriticalSection cs_vRecv;\n \n@@ -663,7 +663,7 @@ class CNode\n     std::atomic_bool fPauseSend;\n protected:\n \n-    mapMsgCmdSize mapSendBytesPerMsgCmd;\n+    mapMsgCmdSize mapSendBytesPerMsgCmd GUARDED_BY(cs_vSend);\n     mapMsgCmdSize mapRecvBytesPerMsgCmd;\n \n public:"
      }
    ]
  },
  {
    "sha": "38dd5f03be11474c83e1390b23e34d38c221925d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozOGRkNWYwM2JlMTE0NzRjODNlMTM5MGIyM2UzNGQzOGMyMjE5MjVk",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-09-01T09:26:32Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Add GUARDED_BY(cs_setBanned) annotation",
      "tree": {
        "sha": "b04fb1ae3a9346e69826b91ea65c3c96a9b8776d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b04fb1ae3a9346e69826b91ea65c3c96a9b8776d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/38dd5f03be11474c83e1390b23e34d38c221925d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38dd5f03be11474c83e1390b23e34d38c221925d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/38dd5f03be11474c83e1390b23e34d38c221925d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38dd5f03be11474c83e1390b23e34d38c221925d/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ae800092d6080cc626db9426aa49b213732611ee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae800092d6080cc626db9426aa49b213732611ee",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ae800092d6080cc626db9426aa49b213732611ee"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "da326ec6f7a9513efa5b08da58ca0b9c9fc6198b",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38dd5f03be11474c83e1390b23e34d38c221925d/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38dd5f03be11474c83e1390b23e34d38c221925d/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=38dd5f03be11474c83e1390b23e34d38c221925d",
        "patch": "@@ -388,9 +388,9 @@ class CConnman\n \n     std::vector<ListenSocket> vhListenSocket;\n     std::atomic<bool> fNetworkActive;\n-    banmap_t setBanned;\n     CCriticalSection cs_setBanned;\n-    bool setBannedIsDirty;\n+    banmap_t setBanned GUARDED_BY(cs_setBanned);\n+    bool setBannedIsDirty GUARDED_BY(cs_setBanned);\n     bool fAddressesInitialized;\n     CAddrMan addrman;\n     std::deque<std::string> vOneShots;"
      }
    ]
  },
  {
    "sha": "96fcd0f0c83d12ee3beb24be0494fe488db2b8b8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NmZjZDBmMGM4M2QxMmVlM2JlYjI0YmUwNDk0ZmU0ODhkYjJiOGI4",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-09-01T12:11:52Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Add GUARDED_BY(cs_SubVer) annotation",
      "tree": {
        "sha": "99c28255d92eb82a2712f4a3563c961178f3eafa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/99c28255d92eb82a2712f4a3563c961178f3eafa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/96fcd0f0c83d12ee3beb24be0494fe488db2b8b8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/96fcd0f0c83d12ee3beb24be0494fe488db2b8b8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/96fcd0f0c83d12ee3beb24be0494fe488db2b8b8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/96fcd0f0c83d12ee3beb24be0494fe488db2b8b8/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "38dd5f03be11474c83e1390b23e34d38c221925d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38dd5f03be11474c83e1390b23e34d38c221925d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/38dd5f03be11474c83e1390b23e34d38c221925d"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "dd05d67e02d43b7af4fed6ba378e77d97d2d31cb",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/96fcd0f0c83d12ee3beb24be0494fe488db2b8b8/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/96fcd0f0c83d12ee3beb24be0494fe488db2b8b8/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=96fcd0f0c83d12ee3beb24be0494fe488db2b8b8",
        "patch": "@@ -636,8 +636,8 @@ class CNode\n     // to be printed out, displayed to humans in various forms and so on. So we sanitize it and\n     // store the sanitized version in cleanSubVer. The original should be used when dealing with\n     // the network or wire types and the cleaned string used when displayed or logged.\n-    std::string strSubVer, cleanSubVer;\n     CCriticalSection cs_SubVer; // used for both cleanSubVer and strSubVer\n+    std::string strSubVer GUARDED_BY(cs_SubVer), cleanSubVer GUARDED_BY(cs_SubVer);\n     bool fWhitelisted; // This peer can bypass DoS banning.\n     bool fFeeler; // If true this node is being used as a short lived feeler.\n     bool fOneShot;"
      }
    ]
  },
  {
    "sha": "fca5c87ca86d9dc4886e0e685b7bf6cf79ff381e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmY2E1Yzg3Y2E4NmQ5ZGM0ODg2ZTBlNjg1YjdiZjZjZjc5ZmYzODFl",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-09-01T12:22:57Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Add GUARDED_BY(cs_vAddedNodes) annotation",
      "tree": {
        "sha": "70066b3d974b55771d74bc7ea90aed7448d4443b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/70066b3d974b55771d74bc7ea90aed7448d4443b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fca5c87ca86d9dc4886e0e685b7bf6cf79ff381e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fca5c87ca86d9dc4886e0e685b7bf6cf79ff381e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fca5c87ca86d9dc4886e0e685b7bf6cf79ff381e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fca5c87ca86d9dc4886e0e685b7bf6cf79ff381e/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "96fcd0f0c83d12ee3beb24be0494fe488db2b8b8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/96fcd0f0c83d12ee3beb24be0494fe488db2b8b8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/96fcd0f0c83d12ee3beb24be0494fe488db2b8b8"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "605edcc76cf9308641fbdfba6ef594376315700e",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fca5c87ca86d9dc4886e0e685b7bf6cf79ff381e/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fca5c87ca86d9dc4886e0e685b7bf6cf79ff381e/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=fca5c87ca86d9dc4886e0e685b7bf6cf79ff381e",
        "patch": "@@ -393,10 +393,10 @@ class CConnman\n     bool setBannedIsDirty GUARDED_BY(cs_setBanned);\n     bool fAddressesInitialized;\n     CAddrMan addrman;\n-    std::deque<std::string> vOneShots;\n     CCriticalSection cs_vOneShots;\n     std::vector<std::string> vAddedNodes GUARDED_BY(cs_vAddedNodes);\n     CCriticalSection cs_vAddedNodes;\n+    std::vector<std::string> vAddedNodes GUARDED_BY(cs_vAddedNodes);\n     std::vector<CNode*> vNodes;\n     std::list<CNode*> vNodesDisconnected;\n     mutable CCriticalSection cs_vNodes;"
      }
    ]
  },
  {
    "sha": "778635e83b5485264f53616d9c4940e673105acd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3Nzg2MzVlODNiNTQ4NTI2NGY1MzYxNmQ5YzQ5NDBlNjczMTA1YWNk",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-09-01T12:24:09Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Add GUARDED_BY(cs_vNodes) annotation",
      "tree": {
        "sha": "fe027ff48ce2db201870be72429e42d771d5bf10",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fe027ff48ce2db201870be72429e42d771d5bf10"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/778635e83b5485264f53616d9c4940e673105acd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/778635e83b5485264f53616d9c4940e673105acd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/778635e83b5485264f53616d9c4940e673105acd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/778635e83b5485264f53616d9c4940e673105acd/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fca5c87ca86d9dc4886e0e685b7bf6cf79ff381e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fca5c87ca86d9dc4886e0e685b7bf6cf79ff381e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fca5c87ca86d9dc4886e0e685b7bf6cf79ff381e"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "93036728c5a6355338a0107ae98e2cd64d278f87",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/778635e83b5485264f53616d9c4940e673105acd/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/778635e83b5485264f53616d9c4940e673105acd/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=778635e83b5485264f53616d9c4940e673105acd",
        "patch": "@@ -397,9 +397,9 @@ class CConnman\n     std::vector<std::string> vAddedNodes GUARDED_BY(cs_vAddedNodes);\n     CCriticalSection cs_vAddedNodes;\n     std::vector<std::string> vAddedNodes GUARDED_BY(cs_vAddedNodes);\n-    std::vector<CNode*> vNodes;\n-    std::list<CNode*> vNodesDisconnected;\n     mutable CCriticalSection cs_vNodes;\n+    std::vector<CNode*> vNodes GUARDED_BY(cs_vNodes);\n+    std::list<CNode*> vNodesDisconnected;\n     std::atomic<NodeId> nLastNodeId;\n \n     /** Services this instance offers */"
      }
    ]
  },
  {
    "sha": "d294f95fa8acd47f3ff33758bfecc70e21eb02d5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMjk0Zjk1ZmE4YWNkNDdmM2ZmMzM3NThiZmVjYzcwZTIxZWIwMmQ1",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-09-03T16:16:01Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Add GUARDED_BY(cs_vOneShots) annotation",
      "tree": {
        "sha": "885e9957d20b3cbb62cf91254a466f8915cc14b6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/885e9957d20b3cbb62cf91254a466f8915cc14b6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d294f95fa8acd47f3ff33758bfecc70e21eb02d5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d294f95fa8acd47f3ff33758bfecc70e21eb02d5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d294f95fa8acd47f3ff33758bfecc70e21eb02d5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d294f95fa8acd47f3ff33758bfecc70e21eb02d5/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "778635e83b5485264f53616d9c4940e673105acd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/778635e83b5485264f53616d9c4940e673105acd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/778635e83b5485264f53616d9c4940e673105acd"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "6cdcae330ec1b7950e276b719c81200e09329591",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d294f95fa8acd47f3ff33758bfecc70e21eb02d5/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d294f95fa8acd47f3ff33758bfecc70e21eb02d5/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=d294f95fa8acd47f3ff33758bfecc70e21eb02d5",
        "patch": "@@ -394,7 +394,7 @@ class CConnman\n     bool fAddressesInitialized;\n     CAddrMan addrman;\n     CCriticalSection cs_vOneShots;\n-    std::vector<std::string> vAddedNodes GUARDED_BY(cs_vAddedNodes);\n+    std::deque<std::string> vOneShots GUARDED_BY(cs_vOneShots);\n     CCriticalSection cs_vAddedNodes;\n     std::vector<std::string> vAddedNodes GUARDED_BY(cs_vAddedNodes);\n     mutable CCriticalSection cs_vNodes;"
      }
    ]
  },
  {
    "sha": "8821c19f642a09614a005ab69430c1bda96cea2b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ODIxYzE5ZjY0MmEwOTYxNGEwMDVhYjY5NDMwYzFiZGE5NmNlYTJi",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-09-01T12:25:24Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Add GUARDED_BY(cs_vProcessMsg) annotation",
      "tree": {
        "sha": "9740658e76ac35f48bb5f44e9bd15b17bcd6c1a3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9740658e76ac35f48bb5f44e9bd15b17bcd6c1a3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8821c19f642a09614a005ab69430c1bda96cea2b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8821c19f642a09614a005ab69430c1bda96cea2b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8821c19f642a09614a005ab69430c1bda96cea2b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8821c19f642a09614a005ab69430c1bda96cea2b/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d294f95fa8acd47f3ff33758bfecc70e21eb02d5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d294f95fa8acd47f3ff33758bfecc70e21eb02d5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d294f95fa8acd47f3ff33758bfecc70e21eb02d5"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "d4765dc19fa83b6bd2a211a1ab9b664399317657",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8821c19f642a09614a005ab69430c1bda96cea2b/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8821c19f642a09614a005ab69430c1bda96cea2b/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=8821c19f642a09614a005ab69430c1bda96cea2b",
        "patch": "@@ -614,7 +614,7 @@ class CNode\n     CCriticalSection cs_vRecv;\n \n     CCriticalSection cs_vProcessMsg;\n-    std::list<CNetMessage> vProcessMsg;\n+    std::list<CNetMessage> vProcessMsg GUARDED_BY(cs_vProcessMsg);\n     size_t nProcessQueueSize;\n \n     CCriticalSection cs_sendProcessing;"
      }
    ]
  },
  {
    "sha": "738f9b333bdc432eaf81e76172342414a518602c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MzhmOWIzMzNiZGM0MzJlYWY4MWU3NjE3MjM0MjQxNGE1MTg2MDJj",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-09-01T12:26:22Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Add GUARDED_BY(cs_vRecv) annotation",
      "tree": {
        "sha": "4627ffe81cb77c628d8d7ce9ee72bafd3ea03888",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4627ffe81cb77c628d8d7ce9ee72bafd3ea03888"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/738f9b333bdc432eaf81e76172342414a518602c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/738f9b333bdc432eaf81e76172342414a518602c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/738f9b333bdc432eaf81e76172342414a518602c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/738f9b333bdc432eaf81e76172342414a518602c/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8821c19f642a09614a005ab69430c1bda96cea2b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8821c19f642a09614a005ab69430c1bda96cea2b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8821c19f642a09614a005ab69430c1bda96cea2b"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "e199396c274d93c985db9ef52cffa32d440d4df4",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/738f9b333bdc432eaf81e76172342414a518602c/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/738f9b333bdc432eaf81e76172342414a518602c/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=738f9b333bdc432eaf81e76172342414a518602c",
        "patch": "@@ -620,7 +620,7 @@ class CNode\n     CCriticalSection cs_sendProcessing;\n \n     std::deque<CInv> vRecvGetData;\n-    uint64_t nRecvBytes;\n+    uint64_t nRecvBytes GUARDED_BY(cs_vRecv);\n     std::atomic<int> nRecvVersion;\n \n     std::atomic<int64_t> nLastSend;\n@@ -664,7 +664,7 @@ class CNode\n protected:\n \n     mapMsgCmdSize mapSendBytesPerMsgCmd GUARDED_BY(cs_vSend);\n-    mapMsgCmdSize mapRecvBytesPerMsgCmd;\n+    mapMsgCmdSize mapRecvBytesPerMsgCmd GUARDED_BY(cs_vRecv);\n \n public:\n     uint256 hashContinue;"
      }
    ]
  },
  {
    "sha": "2632c859b4cdbadeca2df858af2f01b8c041d50b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNjMyYzg1OWI0Y2RiYWRlY2EyZGY4NThhZjJmMDFiOGMwNDFkNTBi",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-09-01T09:14:18Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Add GUARDED_BY(cs_wallet) annotation",
      "tree": {
        "sha": "3dc894caa9cf7e9292998a93eee2e43e7dedba85",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3dc894caa9cf7e9292998a93eee2e43e7dedba85"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2632c859b4cdbadeca2df858af2f01b8c041d50b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2632c859b4cdbadeca2df858af2f01b8c041d50b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2632c859b4cdbadeca2df858af2f01b8c041d50b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2632c859b4cdbadeca2df858af2f01b8c041d50b/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "738f9b333bdc432eaf81e76172342414a518602c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/738f9b333bdc432eaf81e76172342414a518602c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/738f9b333bdc432eaf81e76172342414a518602c"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 6,
      "deletions": 6
    },
    "files": [
      {
        "sha": "97f20fd6523e59ba8629073c6556e9590aa276e4",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2632c859b4cdbadeca2df858af2f01b8c041d50b/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2632c859b4cdbadeca2df858af2f01b8c041d50b/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=2632c859b4cdbadeca2df858af2f01b8c041d50b",
        "patch": "@@ -701,8 +701,8 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     /* HD derive new child key (on internal or external chain) */\n     void DeriveNewChildKey(CWalletDB &walletdb, CKeyMetadata& metadata, CKey& secret, bool internal = false);\n \n-    std::set<int64_t> setInternalKeyPool;\n-    std::set<int64_t> setExternalKeyPool;\n+    std::set<int64_t> setInternalKeyPool GUARDED_BY(cs_wallet);\n+    std::set<int64_t> setExternalKeyPool GUARDED_BY(cs_wallet);\n     int64_t m_max_keypool_index;\n     std::map<CKeyID, int64_t> m_pool_key_to_index;\n \n@@ -766,7 +766,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     std::map<CTxDestination, CKeyMetadata> mapKeyMetadata;\n \n     typedef std::map<unsigned int, CMasterKey> MasterKeyMap;\n-    MasterKeyMap mapMasterKeys;\n+    MasterKeyMap mapMasterKeys GUARDED_BY(cs_wallet);\n     unsigned int nMasterKeyMaxID;\n \n     // Create wallet with dummy database handle\n@@ -805,7 +805,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n         fScanningWallet = false;\n     }\n \n-    std::map<uint256, CWalletTx> mapWallet;\n+    std::map<uint256, CWalletTx> mapWallet GUARDED_BY(cs_wallet);\n     std::list<CAccountingEntry> laccentries;\n \n     typedef std::pair<CWalletTx*, CAccountingEntry*> TxPair;\n@@ -814,11 +814,11 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n \n     int64_t nOrderPosNext;\n     uint64_t nAccountingEntryNumber;\n-    std::map<uint256, int> mapRequestCount;\n+    std::map<uint256, int> mapRequestCount GUARDED_BY(cs_wallet);\n \n     std::map<CTxDestination, CAddressBookData> mapAddressBook;\n \n-    std::set<COutPoint> setLockedCoins;\n+    std::set<COutPoint> setLockedCoins GUARDED_BY(cs_wallet);\n \n     const CWalletTx* GetWalletTx(const uint256& hash) const;\n "
      }
    ]
  },
  {
    "sha": "e05f0d434c055e01026191b4bd61dcd69532f8bb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMDVmMGQ0MzRjMDU1ZTAxMDI2MTkxYjRiZDYxZGNkNjk1MzJmOGJi",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-09-01T09:16:08Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Add GUARDED_BY(cs_warnings) annotation",
      "tree": {
        "sha": "8815f7dcfbaf93a6b09ae6a7ae0f3d73095e084d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8815f7dcfbaf93a6b09ae6a7ae0f3d73095e084d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e05f0d434c055e01026191b4bd61dcd69532f8bb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e05f0d434c055e01026191b4bd61dcd69532f8bb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e05f0d434c055e01026191b4bd61dcd69532f8bb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e05f0d434c055e01026191b4bd61dcd69532f8bb/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2632c859b4cdbadeca2df858af2f01b8c041d50b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2632c859b4cdbadeca2df858af2f01b8c041d50b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2632c859b4cdbadeca2df858af2f01b8c041d50b"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "71354bbd3e5e026aadda4c444ff8958eafe0a3a4",
        "filename": "src/warnings.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e05f0d434c055e01026191b4bd61dcd69532f8bb/src/warnings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e05f0d434c055e01026191b4bd61dcd69532f8bb/src/warnings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/warnings.cpp?ref=e05f0d434c055e01026191b4bd61dcd69532f8bb",
        "patch": "@@ -9,7 +9,7 @@\n #include <warnings.h>\n \n CCriticalSection cs_warnings;\n-std::string strMiscWarning;\n+std::string strMiscWarning GUARDED_BY(cs_warnings);\n bool fLargeWorkForkFound = false;\n bool fLargeWorkInvalidChainFound = false;\n "
      }
    ]
  },
  {
    "sha": "e30b8b6b39b623747c0cdfcbea7543fcf60206aa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMzBiOGI2YjM5YjYyMzc0N2MwY2RmY2JlYTc1NDNmY2Y2MDIwNmFh",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-09-01T09:13:31Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Add GUARDED_BY(csPathCached) annotation",
      "tree": {
        "sha": "305ba59c0e68080b5256a54dd0dcdaafe74b4f1d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/305ba59c0e68080b5256a54dd0dcdaafe74b4f1d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e30b8b6b39b623747c0cdfcbea7543fcf60206aa",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e30b8b6b39b623747c0cdfcbea7543fcf60206aa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e30b8b6b39b623747c0cdfcbea7543fcf60206aa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e30b8b6b39b623747c0cdfcbea7543fcf60206aa/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e05f0d434c055e01026191b4bd61dcd69532f8bb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e05f0d434c055e01026191b4bd61dcd69532f8bb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e05f0d434c055e01026191b4bd61dcd69532f8bb"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "a13f8437cde3b3208bf32f501367077eb4857c09",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e30b8b6b39b623747c0cdfcbea7543fcf60206aa/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e30b8b6b39b623747c0cdfcbea7543fcf60206aa/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=e30b8b6b39b623747c0cdfcbea7543fcf60206aa",
        "patch": "@@ -562,9 +562,9 @@ fs::path GetDefaultDataDir()\n #endif\n }\n \n-static fs::path pathCached;\n-static fs::path pathCachedNetSpecific;\n static CCriticalSection csPathCached;\n+static fs::path pathCached GUARDED_BY(csPathCached);\n+static fs::path pathCachedNetSpecific GUARDED_BY(csPathCached);\n \n const fs::path &GetDataDir(bool fNetSpecific)\n {"
      }
    ]
  },
  {
    "sha": "e9bb3dd0ff795bb6ece3df20c403889902f849fe",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplOWJiM2RkMGZmNzk1YmI2ZWNlM2RmMjBjNDAzODg5OTAyZjg0OWZl",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-09-01T09:12:30Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Add GUARDED_BY(m_cs_callbacks_pending) annotation",
      "tree": {
        "sha": "aac8833e7ebf3d66dc94354251add08f12f6fe44",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/aac8833e7ebf3d66dc94354251add08f12f6fe44"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e9bb3dd0ff795bb6ece3df20c403889902f849fe",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9bb3dd0ff795bb6ece3df20c403889902f849fe",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e9bb3dd0ff795bb6ece3df20c403889902f849fe",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9bb3dd0ff795bb6ece3df20c403889902f849fe/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e30b8b6b39b623747c0cdfcbea7543fcf60206aa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e30b8b6b39b623747c0cdfcbea7543fcf60206aa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e30b8b6b39b623747c0cdfcbea7543fcf60206aa"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "d4450d218cdbc39a5234c2809d039808022bdbd3",
        "filename": "src/scheduler.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9bb3dd0ff795bb6ece3df20c403889902f849fe/src/scheduler.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9bb3dd0ff795bb6ece3df20c403889902f849fe/src/scheduler.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/scheduler.h?ref=e9bb3dd0ff795bb6ece3df20c403889902f849fe",
        "patch": "@@ -95,7 +95,7 @@ class SingleThreadedSchedulerClient {\n     CScheduler *m_pscheduler;\n \n     CCriticalSection m_cs_callbacks_pending;\n-    std::list<std::function<void (void)>> m_callbacks_pending;\n+    std::list<std::function<void (void)>> m_callbacks_pending GUARDED_BY(m_cs_callbacks_pending);\n     bool m_are_callbacks_running = false;\n \n     void MaybeScheduleProcessQueue();"
      }
    ]
  },
  {
    "sha": "66411edf67d291985ae641e8446698a5281d1c34",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NjQxMWVkZjY3ZDI5MTk4NWFlNjQxZTg0NDY2OThhNTI4MWQxYzM0",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-09-01T17:27:36Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Add EXCLUSIVE_LOCKS_REQUIRED(...) annotations",
      "tree": {
        "sha": "f31a202fc38e2c7ee8b800bd70e9090b3ed26317",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f31a202fc38e2c7ee8b800bd70e9090b3ed26317"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/66411edf67d291985ae641e8446698a5281d1c34",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/66411edf67d291985ae641e8446698a5281d1c34",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/66411edf67d291985ae641e8446698a5281d1c34",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/66411edf67d291985ae641e8446698a5281d1c34/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e9bb3dd0ff795bb6ece3df20c403889902f849fe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9bb3dd0ff795bb6ece3df20c403889902f849fe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e9bb3dd0ff795bb6ece3df20c403889902f849fe"
      }
    ],
    "stats": {
      "total": 155,
      "additions": 74,
      "deletions": 81
    },
    "files": [
      {
        "sha": "9bcc20b02bfc21538ecd68578a426cfeef219701",
        "filename": "src/addrman.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/66411edf67d291985ae641e8446698a5281d1c34/src/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/66411edf67d291985ae641e8446698a5281d1c34/src/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.cpp?ref=66411edf67d291985ae641e8446698a5281d1c34",
        "patch": "@@ -78,7 +78,7 @@ CAddrInfo* CAddrMan::Find(const CNetAddr& addr, int* pnId)\n     return nullptr;\n }\n \n-CAddrInfo* CAddrMan::Create(const CAddress& addr, const CNetAddr& addrSource, int* pnId)\n+CAddrInfo* CAddrMan::Create(const CAddress& addr, const CNetAddr& addrSource, int* pnId) EXCLUSIVE_LOCKS_REQUIRED(cs)\n {\n     int nId = nIdCount++;\n     mapInfo[nId] = CAddrInfo(addr, addrSource);\n@@ -90,7 +90,7 @@ CAddrInfo* CAddrMan::Create(const CAddress& addr, const CNetAddr& addrSource, in\n     return &mapInfo[nId];\n }\n \n-void CAddrMan::SwapRandom(unsigned int nRndPos1, unsigned int nRndPos2)\n+void CAddrMan::SwapRandom(unsigned int nRndPos1, unsigned int nRndPos2) EXCLUSIVE_LOCKS_REQUIRED(cs)\n {\n     if (nRndPos1 == nRndPos2)\n         return;\n@@ -110,7 +110,7 @@ void CAddrMan::SwapRandom(unsigned int nRndPos1, unsigned int nRndPos2)\n     vRandom[nRndPos2] = nId1;\n }\n \n-void CAddrMan::Delete(int nId)\n+void CAddrMan::Delete(int nId) EXCLUSIVE_LOCKS_REQUIRED(cs)\n {\n     assert(mapInfo.count(nId) != 0);\n     CAddrInfo& info = mapInfo[nId];\n@@ -124,7 +124,7 @@ void CAddrMan::Delete(int nId)\n     nNew--;\n }\n \n-void CAddrMan::ClearNew(int nUBucket, int nUBucketPos)\n+void CAddrMan::ClearNew(int nUBucket, int nUBucketPos) EXCLUSIVE_LOCKS_REQUIRED(cs)\n {\n     // if there is an entry in the specified bucket, delete it.\n     if (vvNew[nUBucket][nUBucketPos] != -1) {\n@@ -139,7 +139,7 @@ void CAddrMan::ClearNew(int nUBucket, int nUBucketPos)\n     }\n }\n \n-void CAddrMan::MakeTried(CAddrInfo& info, int nId)\n+void CAddrMan::MakeTried(CAddrInfo& info, int nId) EXCLUSIVE_LOCKS_REQUIRED(cs)\n {\n     // remove the entry from all new buckets\n     for (int bucket = 0; bucket < ADDRMAN_NEW_BUCKET_COUNT; bucket++) {\n@@ -187,7 +187,7 @@ void CAddrMan::MakeTried(CAddrInfo& info, int nId)\n     info.fInTried = true;\n }\n \n-void CAddrMan::Good_(const CService& addr, int64_t nTime)\n+void CAddrMan::Good_(const CService& addr, int64_t nTime) EXCLUSIVE_LOCKS_REQUIRED(cs)\n {\n     int nId;\n \n@@ -239,7 +239,7 @@ void CAddrMan::Good_(const CService& addr, int64_t nTime)\n     MakeTried(info, nId);\n }\n \n-bool CAddrMan::Add_(const CAddress& addr, const CNetAddr& source, int64_t nTimePenalty)\n+bool CAddrMan::Add_(const CAddress& addr, const CNetAddr& source, int64_t nTimePenalty) EXCLUSIVE_LOCKS_REQUIRED(cs)\n {\n     if (!addr.IsRoutable())\n         return false;\n@@ -459,7 +459,7 @@ int CAddrMan::Check_()\n }\n #endif\n \n-void CAddrMan::GetAddr_(std::vector<CAddress>& vAddr)\n+void CAddrMan::GetAddr_(std::vector<CAddress>& vAddr) EXCLUSIVE_LOCKS_REQUIRED(cs)\n {\n     unsigned int nNodes = ADDRMAN_GETADDR_MAX_PCT * vRandom.size() / 100;\n     if (nNodes > ADDRMAN_GETADDR_MAX)"
      },
      {
        "sha": "0d4f85788c10eb05d102a781736333b154e1755c",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/66411edf67d291985ae641e8446698a5281d1c34/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/66411edf67d291985ae641e8446698a5281d1c34/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=66411edf67d291985ae641e8446698a5281d1c34",
        "patch": "@@ -283,7 +283,7 @@ int BlockAssembler::UpdatePackagesForAdded(const CTxMemPool::setEntries& already\n // guaranteed to fail again, but as a belt-and-suspenders check we put it in\n // failedTx and avoid re-evaluation, since the re-evaluation would be using\n // cached size/sigops/fee values that are not actually correct.\n-bool BlockAssembler::SkipMapTxEntry(CTxMemPool::txiter it, indexed_modified_transaction_set &mapModifiedTx, CTxMemPool::setEntries &failedTx)\n+bool BlockAssembler::SkipMapTxEntry(CTxMemPool::txiter it, indexed_modified_transaction_set &mapModifiedTx, CTxMemPool::setEntries &failedTx) EXCLUSIVE_LOCKS_REQUIRED(mempool.cs)\n {\n     assert (it != mempool.mapTx.end());\n     return mapModifiedTx.count(it) || inBlock.count(it) || failedTx.count(it);\n@@ -310,7 +310,7 @@ void BlockAssembler::SortForBlock(const CTxMemPool::setEntries& package, CTxMemP\n // Each time through the loop, we compare the best transaction in\n // mapModifiedTxs with the next transaction in the mempool to decide what\n // transaction package to work on next.\n-void BlockAssembler::addPackageTxs(int &nPackagesSelected, int &nDescendantsUpdated)\n+void BlockAssembler::addPackageTxs(int &nPackagesSelected, int &nDescendantsUpdated) EXCLUSIVE_LOCKS_REQUIRED(mempool.cs)\n {\n     // mapModifiedTx will store sorted packages after they are modified\n     // because some of their txs are already in the block"
      },
      {
        "sha": "55bf382bccc520eb030bd91dc8b5687e55fe687d",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/66411edf67d291985ae641e8446698a5281d1c34/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/66411edf67d291985ae641e8446698a5281d1c34/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=66411edf67d291985ae641e8446698a5281d1c34",
        "patch": "@@ -864,7 +864,7 @@ const uint256& CNetMessage::GetMessageHash() const\n \n \n // requires LOCK(cs_vSend)\n-size_t CConnman::SocketSendData(CNode *pnode) const\n+size_t CConnman::SocketSendData(CNode *pnode) const EXCLUSIVE_LOCKS_REQUIRED(pnode->cs_vSend)\n {\n     auto it = pnode->vSendMsg.begin();\n     size_t nSentSize = 0;\n@@ -2266,7 +2266,7 @@ bool CConnman::InitBinds(const std::vector<CService>& binds, const std::vector<C\n     return fBound;\n }\n \n-bool CConnman::Start(CScheduler& scheduler, const Options& connOptions)\n+bool CConnman::Start(CScheduler& scheduler, const Options& connOptions) EXCLUSIVE_LOCKS_REQUIRED(cs_totalBytesRecv, cs_totalBytesSent)\n {\n     Init(connOptions);\n \n@@ -2424,7 +2424,7 @@ void CConnman::Interrupt()\n     }\n }\n \n-void CConnman::Stop()\n+void CConnman::Stop() EXCLUSIVE_LOCKS_REQUIRED(cs_vNodes)\n {\n     if (threadMessageHandler.joinable())\n         threadMessageHandler.join();"
      },
      {
        "sha": "3cd9a6ba98007808f67ebf996ed672250055fc98",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 18,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/66411edf67d291985ae641e8446698a5281d1c34/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/66411edf67d291985ae641e8446698a5281d1c34/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=66411edf67d291985ae641e8446698a5281d1c34",
        "patch": "@@ -269,7 +269,7 @@ struct CNodeState {\n std::map<NodeId, CNodeState> mapNodeState GUARDED_BY(cs_main);\n \n // Requires cs_main.\n-CNodeState *State(NodeId pnode) {\n+CNodeState *State(NodeId pnode) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n     std::map<NodeId, CNodeState>::iterator it = mapNodeState.find(pnode);\n     if (it == mapNodeState.end())\n         return nullptr;\n@@ -310,7 +310,7 @@ void PushNodeVersion(CNode *pnode, CConnman* connman, int64_t nTime)\n // Requires cs_main.\n // Returns a bool indicating whether we requested this block.\n // Also used if a block was /not/ received and timed out or started with another peer\n-bool MarkBlockAsReceived(const uint256& hash) {\n+bool MarkBlockAsReceived(const uint256& hash) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n     std::map<uint256, std::pair<NodeId, std::list<QueuedBlock>::iterator> >::iterator itInFlight = mapBlocksInFlight.find(hash);\n     if (itInFlight != mapBlocksInFlight.end()) {\n         CNodeState *state = State(itInFlight->second.first);\n@@ -336,7 +336,7 @@ bool MarkBlockAsReceived(const uint256& hash) {\n // Requires cs_main.\n // returns false, still setting pit, if the block was already in flight from the same peer\n // pit will only be valid as long as the same cs_main lock is being held\n-bool MarkBlockAsInFlight(NodeId nodeid, const uint256& hash, const CBlockIndex* pindex = nullptr, std::list<QueuedBlock>::iterator** pit = nullptr) {\n+bool MarkBlockAsInFlight(NodeId nodeid, const uint256& hash, const CBlockIndex* pindex = nullptr, std::list<QueuedBlock>::iterator** pit = nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n     CNodeState *state = State(nodeid);\n     assert(state != nullptr);\n \n@@ -370,7 +370,7 @@ bool MarkBlockAsInFlight(NodeId nodeid, const uint256& hash, const CBlockIndex*\n }\n \n /** Check whether the last unknown block a peer advertised is not yet known. */\n-void ProcessBlockAvailability(NodeId nodeid) {\n+void ProcessBlockAvailability(NodeId nodeid) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n     CNodeState *state = State(nodeid);\n     assert(state != nullptr);\n \n@@ -385,7 +385,7 @@ void ProcessBlockAvailability(NodeId nodeid) {\n }\n \n /** Update tracking information about which blocks a peer is assumed to have. */\n-void UpdateBlockAvailability(NodeId nodeid, const uint256 &hash) {\n+void UpdateBlockAvailability(NodeId nodeid, const uint256 &hash) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n     CNodeState *state = State(nodeid);\n     assert(state != nullptr);\n \n@@ -402,7 +402,7 @@ void UpdateBlockAvailability(NodeId nodeid, const uint256 &hash) {\n     }\n }\n \n-void MaybeSetPeerAsAnnouncingHeaderAndIDs(NodeId nodeid, CConnman* connman) {\n+void MaybeSetPeerAsAnnouncingHeaderAndIDs(NodeId nodeid, CConnman* connman) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n     AssertLockHeld(cs_main);\n     CNodeState* nodestate = State(nodeid);\n     if (!nodestate || !nodestate->fSupportsDesiredCmpctVersion) {\n@@ -462,7 +462,7 @@ bool PeerHasHeader(CNodeState *state, const CBlockIndex *pindex)\n \n /** Update pindexLastCommonBlock and add not-in-flight missing successors to vBlocks, until it has\n  *  at most count entries. */\n-void FindNextBlocksToDownload(NodeId nodeid, unsigned int count, std::vector<const CBlockIndex*>& vBlocks, NodeId& nodeStaller, const Consensus::Params& consensusParams) {\n+void FindNextBlocksToDownload(NodeId nodeid, unsigned int count, std::vector<const CBlockIndex*>& vBlocks, NodeId& nodeStaller, const Consensus::Params& consensusParams) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n     if (count == 0)\n         return;\n \n@@ -748,7 +748,7 @@ unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans) EXCLUSIVE_LOCKS_REQUIRE\n }\n \n // Requires cs_main.\n-void Misbehaving(NodeId pnode, int howmuch)\n+void Misbehaving(NodeId pnode, int howmuch) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     if (howmuch == 0)\n         return;\n@@ -767,13 +767,6 @@ void Misbehaving(NodeId pnode, int howmuch)\n         LogPrintf(\"%s: %s peer=%d (%d -> %d)\\n\", __func__, state->name, pnode, state->nMisbehavior-howmuch, state->nMisbehavior);\n }\n \n-\n-\n-\n-\n-\n-\n-\n //////////////////////////////////////////////////////////////////////////////\n //\n // blockchain -> download logic notification\n@@ -1214,7 +1207,7 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n     }\n }\n \n-uint32_t GetFetchFlags(CNode* pfrom) {\n+uint32_t GetFetchFlags(CNode* pfrom) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n     uint32_t nFetchFlags = 0;\n     if ((pfrom->GetLocalServices() & NODE_WITNESS) && State(pfrom->GetId())->fHaveWitness) {\n         nFetchFlags |= MSG_WITNESS_FLAG;\n@@ -2820,7 +2813,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n     return true;\n }\n \n-static bool SendRejectsAndCheckIfBanned(CNode* pnode, CConnman* connman)\n+static bool SendRejectsAndCheckIfBanned(CNode* pnode, CConnman* connman) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     AssertLockHeld(cs_main);\n     CNodeState &state = *State(pnode->GetId());\n@@ -3117,7 +3110,7 @@ class CompareInvMempoolOrder\n     }\n };\n \n-bool PeerLogicValidation::SendMessages(CNode* pto, std::atomic<bool>& interruptMsgProc)\n+bool PeerLogicValidation::SendMessages(CNode* pto, std::atomic<bool>& interruptMsgProc) EXCLUSIVE_LOCKS_REQUIRED(pto->cs_sendProcessing)\n {\n     const Consensus::Params& consensusParams = Params().GetConsensus();\n     {"
      },
      {
        "sha": "8bf3771b2561e94ea2aea4ad298b094bff6d3711",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/66411edf67d291985ae641e8446698a5281d1c34/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/66411edf67d291985ae641e8446698a5281d1c34/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=66411edf67d291985ae641e8446698a5281d1c34",
        "patch": "@@ -596,7 +596,7 @@ void CBlockPolicyEstimator::processTransaction(const CTxMemPoolEntry& entry, boo\n     assert(bucketIndex == bucketIndex3);\n }\n \n-bool CBlockPolicyEstimator::processBlockTx(unsigned int nBlockHeight, const CTxMemPoolEntry* entry)\n+bool CBlockPolicyEstimator::processBlockTx(unsigned int nBlockHeight, const CTxMemPoolEntry* entry) EXCLUSIVE_LOCKS_REQUIRED(cs_feeEstimator)\n {\n     if (!removeTx(entry->GetTx().GetHash(), true)) {\n         // This transaction wasn't being tracked for fee estimation\n@@ -719,7 +719,7 @@ CFeeRate CBlockPolicyEstimator::estimateRawFee(int confTarget, double successThr\n     return CFeeRate(llround(median));\n }\n \n-unsigned int CBlockPolicyEstimator::HighestTargetTracked(FeeEstimateHorizon horizon) const\n+unsigned int CBlockPolicyEstimator::HighestTargetTracked(FeeEstimateHorizon horizon) const EXCLUSIVE_LOCKS_REQUIRED(cs_feeEstimator)\n {\n     switch (horizon) {\n     case FeeEstimateHorizon::SHORT_HALFLIFE: {\n@@ -737,15 +737,15 @@ unsigned int CBlockPolicyEstimator::HighestTargetTracked(FeeEstimateHorizon hori\n     }\n }\n \n-unsigned int CBlockPolicyEstimator::BlockSpan() const\n+unsigned int CBlockPolicyEstimator::BlockSpan() const EXCLUSIVE_LOCKS_REQUIRED(cs_feeEstimator)\n {\n     if (firstRecordedHeight == 0) return 0;\n     assert(nBestSeenHeight >= firstRecordedHeight);\n \n     return nBestSeenHeight - firstRecordedHeight;\n }\n \n-unsigned int CBlockPolicyEstimator::HistoricalBlockSpan() const\n+unsigned int CBlockPolicyEstimator::HistoricalBlockSpan() const EXCLUSIVE_LOCKS_REQUIRED(cs_feeEstimator)\n {\n     if (historicalFirst == 0) return 0;\n     assert(historicalBest >= historicalFirst);\n@@ -755,7 +755,7 @@ unsigned int CBlockPolicyEstimator::HistoricalBlockSpan() const\n     return historicalBest - historicalFirst;\n }\n \n-unsigned int CBlockPolicyEstimator::MaxUsableEstimate() const\n+unsigned int CBlockPolicyEstimator::MaxUsableEstimate() const EXCLUSIVE_LOCKS_REQUIRED(cs_feeEstimator)\n {\n     // Block spans are divided by 2 to make sure there are enough potential failing data points for the estimate\n     return std::min(longStats->GetMaxConfirms(), std::max(BlockSpan(), HistoricalBlockSpan()) / 2);\n@@ -765,7 +765,7 @@ unsigned int CBlockPolicyEstimator::MaxUsableEstimate() const\n  * time horizon which tracks confirmations up to the desired target.  If\n  * checkShorterHorizon is requested, also allow short time horizon estimates\n  * for a lower target to reduce the given answer */\n-double CBlockPolicyEstimator::estimateCombinedFee(unsigned int confTarget, double successThreshold, bool checkShorterHorizon, EstimationResult *result) const\n+double CBlockPolicyEstimator::estimateCombinedFee(unsigned int confTarget, double successThreshold, bool checkShorterHorizon, EstimationResult *result) const EXCLUSIVE_LOCKS_REQUIRED(cs_feeEstimator)\n {\n     double estimate = -1;\n     if (confTarget >= 1 && confTarget <= longStats->GetMaxConfirms()) {\n@@ -804,7 +804,7 @@ double CBlockPolicyEstimator::estimateCombinedFee(unsigned int confTarget, doubl\n /** Ensure that for a conservative estimate, the DOUBLE_SUCCESS_PCT is also met\n  * at 2 * target for any longer time horizons.\n  */\n-double CBlockPolicyEstimator::estimateConservativeFee(unsigned int doubleTarget, EstimationResult *result) const\n+double CBlockPolicyEstimator::estimateConservativeFee(unsigned int doubleTarget, EstimationResult *result) const EXCLUSIVE_LOCKS_REQUIRED(cs_feeEstimator)\n {\n     double estimate = -1;\n     EstimationResult tempResult;"
      },
      {
        "sha": "8a8ed15f662d48bf4eb68e4f06eb6140ae8aec53",
        "filename": "src/policy/rbf.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/66411edf67d291985ae641e8446698a5281d1c34/src/policy/rbf.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/66411edf67d291985ae641e8446698a5281d1c34/src/policy/rbf.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/rbf.cpp?ref=66411edf67d291985ae641e8446698a5281d1c34",
        "patch": "@@ -14,7 +14,7 @@ bool SignalsOptInRBF(const CTransaction &tx)\n     return false;\n }\n \n-RBFTransactionState IsRBFOptIn(const CTransaction &tx, CTxMemPool &pool)\n+RBFTransactionState IsRBFOptIn(const CTransaction &tx, CTxMemPool &pool) EXCLUSIVE_LOCKS_REQUIRED(pool.cs)\n {\n     AssertLockHeld(pool.cs);\n "
      },
      {
        "sha": "d65696c161607f33934450732782cbab86f80e06",
        "filename": "src/qt/transactiontablemodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/66411edf67d291985ae641e8446698a5281d1c34/src/qt/transactiontablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/66411edf67d291985ae641e8446698a5281d1c34/src/qt/transactiontablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiontablemodel.cpp?ref=66411edf67d291985ae641e8446698a5281d1c34",
        "patch": "@@ -737,7 +737,7 @@ struct TransactionNotification\n static bool fQueueNotifications = false;\n static std::vector< TransactionNotification > vQueueNotifications;\n \n-static void NotifyTransactionChanged(TransactionTableModel *ttm, CWallet *wallet, const uint256 &hash, ChangeType status)\n+static void NotifyTransactionChanged(TransactionTableModel *ttm, CWallet *wallet, const uint256 &hash, ChangeType status) EXCLUSIVE_LOCKS_REQUIRED(wallet->cs_wallet)\n {\n     // Find transaction in wallet\n     std::map<uint256, CWalletTx>::iterator mi = wallet->mapWallet.find(hash);"
      },
      {
        "sha": "d05e65638a3df25b40f240a32e597e73f5aff688",
        "filename": "src/test/mempool_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/66411edf67d291985ae641e8446698a5281d1c34/src/test/mempool_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/66411edf67d291985ae641e8446698a5281d1c34/src/test/mempool_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/mempool_tests.cpp?ref=66411edf67d291985ae641e8446698a5281d1c34",
        "patch": "@@ -106,7 +106,7 @@ BOOST_AUTO_TEST_CASE(MempoolRemoveTest)\n }\n \n template<typename name>\n-void CheckSort(CTxMemPool &pool, std::vector<std::string> &sortedOrder)\n+void CheckSort(CTxMemPool &pool, std::vector<std::string> &sortedOrder) EXCLUSIVE_LOCKS_REQUIRED(pool.cs)\n {\n     BOOST_CHECK_EQUAL(pool.size(), sortedOrder.size());\n     typename CTxMemPool::indexed_transaction_set::index<name>::type::iterator it = pool.mapTx.get<name>().begin();"
      },
      {
        "sha": "72b171d3c4a8427b79a07c518988447a10bd6a18",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/66411edf67d291985ae641e8446698a5281d1c34/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/66411edf67d291985ae641e8446698a5281d1c34/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=66411edf67d291985ae641e8446698a5281d1c34",
        "patch": "@@ -59,7 +59,7 @@ size_t CTxMemPoolEntry::GetTxSize() const\n // Update the given tx for any in-mempool descendants.\n // Assumes that setMemPoolChildren is correct for the given tx and all\n // descendants.\n-void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendants, const std::set<uint256> &setExclude)\n+void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendants, const std::set<uint256> &setExclude) EXCLUSIVE_LOCKS_REQUIRED(cs)\n {\n     setEntries stageEntries, setAllDescendants;\n     stageEntries = GetMemPoolChildren(updateIt);\n@@ -213,7 +213,7 @@ bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntr\n     return true;\n }\n \n-void CTxMemPool::UpdateAncestorsOf(bool add, txiter it, setEntries &setAncestors)\n+void CTxMemPool::UpdateAncestorsOf(bool add, txiter it, setEntries &setAncestors) EXCLUSIVE_LOCKS_REQUIRED(cs)\n {\n     setEntries parentIters = GetMemPoolParents(it);\n     // add or remove this tx as a child of each parent\n@@ -228,7 +228,7 @@ void CTxMemPool::UpdateAncestorsOf(bool add, txiter it, setEntries &setAncestors\n     }\n }\n \n-void CTxMemPool::UpdateEntryForAncestors(txiter it, const setEntries &setAncestors)\n+void CTxMemPool::UpdateEntryForAncestors(txiter it, const setEntries &setAncestors) EXCLUSIVE_LOCKS_REQUIRED(cs)\n {\n     int64_t updateCount = setAncestors.size();\n     int64_t updateSize = 0;\n@@ -250,7 +250,7 @@ void CTxMemPool::UpdateChildrenForRemoval(txiter it)\n     }\n }\n \n-void CTxMemPool::UpdateForRemoveFromMempool(const setEntries &entriesToRemove, bool updateDescendants)\n+void CTxMemPool::UpdateForRemoveFromMempool(const setEntries &entriesToRemove, bool updateDescendants) EXCLUSIVE_LOCKS_REQUIRED(cs)\n {\n     // For each entry, walk back all ancestors and decrement size associated with this\n     // transaction\n@@ -416,7 +416,7 @@ bool CTxMemPool::addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry,\n     return true;\n }\n \n-void CTxMemPool::removeUnchecked(txiter it, MemPoolRemovalReason reason)\n+void CTxMemPool::removeUnchecked(txiter it, MemPoolRemovalReason reason) EXCLUSIVE_LOCKS_REQUIRED(cs)\n {\n     NotifyEntryRemoved(it->GetSharedTx(), reason);\n     const uint256 hash = it->GetTx().GetHash();\n@@ -588,7 +588,7 @@ void CTxMemPool::removeForBlock(const std::vector<CTransactionRef>& vtx, unsigne\n     blockSinceLastRollingFeeBump = true;\n }\n \n-void CTxMemPool::_clear()\n+void CTxMemPool::_clear() EXCLUSIVE_LOCKS_REQUIRED(cs)\n {\n     mapLinks.clear();\n     mapTx.clear();\n@@ -769,7 +769,7 @@ class DepthAndScoreComparator\n };\n } // namespace\n \n-std::vector<CTxMemPool::indexed_transaction_set::const_iterator> CTxMemPool::GetSortedDepthAndScore() const\n+std::vector<CTxMemPool::indexed_transaction_set::const_iterator> CTxMemPool::GetSortedDepthAndScore() const EXCLUSIVE_LOCKS_REQUIRED(cs)\n {\n     std::vector<indexed_transaction_set::const_iterator> iters;\n     AssertLockHeld(cs);\n@@ -910,7 +910,7 @@ size_t CTxMemPool::DynamicMemoryUsage() const {\n     return memusage::MallocUsage(sizeof(CTxMemPoolEntry) + 15 * sizeof(void*)) * mapTx.size() + memusage::DynamicUsage(mapNextTx) + memusage::DynamicUsage(mapDeltas) + memusage::DynamicUsage(mapLinks) + memusage::DynamicUsage(vTxHashes) + cachedInnerUsage;\n }\n \n-void CTxMemPool::RemoveStaged(setEntries &stage, bool updateDescendants, MemPoolRemovalReason reason) {\n+void CTxMemPool::RemoveStaged(setEntries &stage, bool updateDescendants, MemPoolRemovalReason reason) EXCLUSIVE_LOCKS_REQUIRED(cs) {\n     AssertLockHeld(cs);\n     UpdateForRemoveFromMempool(stage, updateDescendants);\n     for (const txiter& it : stage) {\n@@ -964,15 +964,15 @@ void CTxMemPool::UpdateParent(txiter entry, txiter parent, bool add)\n     }\n }\n \n-const CTxMemPool::setEntries & CTxMemPool::GetMemPoolParents(txiter entry) const\n+const CTxMemPool::setEntries & CTxMemPool::GetMemPoolParents(txiter entry) const EXCLUSIVE_LOCKS_REQUIRED(cs)\n {\n     assert (entry != mapTx.end());\n     txlinksMap::const_iterator it = mapLinks.find(entry);\n     assert(it != mapLinks.end());\n     return it->second.parents;\n }\n \n-const CTxMemPool::setEntries & CTxMemPool::GetMemPoolChildren(txiter entry) const\n+const CTxMemPool::setEntries & CTxMemPool::GetMemPoolChildren(txiter entry) const EXCLUSIVE_LOCKS_REQUIRED(cs)\n {\n     assert (entry != mapTx.end());\n     txlinksMap::const_iterator it = mapLinks.find(entry);"
      },
      {
        "sha": "55497f4b8ad52b5a03a2297975023d11d2ca7d98",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/66411edf67d291985ae641e8446698a5281d1c34/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/66411edf67d291985ae641e8446698a5281d1c34/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=66411edf67d291985ae641e8446698a5281d1c34",
        "patch": "@@ -23,7 +23,7 @@\n // calculation, but we should be able to refactor after priority is removed).\n // NOTE: this requires that all inputs must be in mapWallet (eg the tx should\n // be IsAllFromMe).\n-static int64_t CalculateMaximumSignedTxSize(const CTransaction &tx, const CWallet *wallet)\n+static int64_t CalculateMaximumSignedTxSize(const CTransaction &tx, const CWallet *wallet) EXCLUSIVE_LOCKS_REQUIRED(wallet->cs_wallet)\n {\n     CMutableTransaction txNew(tx);\n     std::vector<CInputCoin> vCoins;"
      },
      {
        "sha": "51626a2eb864f7e00d79352e5ce30e42565b429c",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/66411edf67d291985ae641e8446698a5281d1c34/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/66411edf67d291985ae641e8446698a5281d1c34/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=66411edf67d291985ae641e8446698a5281d1c34",
        "patch": "@@ -1338,7 +1338,7 @@ struct tallyitem\n     }\n };\n \n-UniValue ListReceived(CWallet * const pwallet, const UniValue& params, bool fByAccounts)\n+UniValue ListReceived(CWallet * const pwallet, const UniValue& params, bool fByAccounts) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n {\n     // Minimum confirmations\n     int nMinDepth = 1;"
      },
      {
        "sha": "c7cff764a3a01644a18447e571229d383d4668f1",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 26,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/66411edf67d291985ae641e8446698a5281d1c34/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/66411edf67d291985ae641e8446698a5281d1c34/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=66411edf67d291985ae641e8446698a5281d1c34",
        "patch": "@@ -480,7 +480,7 @@ bool CWallet::SetMaxVersion(int nVersion)\n     return true;\n }\n \n-std::set<uint256> CWallet::GetConflicts(const uint256& txid) const\n+std::set<uint256> CWallet::GetConflicts(const uint256& txid) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\n {\n     std::set<uint256> result;\n     AssertLockHeld(cs_wallet);\n@@ -515,7 +515,7 @@ void CWallet::Flush(bool shutdown)\n     dbw->Flush(shutdown);\n }\n \n-void CWallet::SyncMetaData(std::pair<TxSpends::iterator, TxSpends::iterator> range)\n+void CWallet::SyncMetaData(std::pair<TxSpends::iterator, TxSpends::iterator> range) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\n {\n     // We want all the wallet transactions in range to have the same metadata as\n     // the oldest (smallest nOrderPos).\n@@ -560,7 +560,7 @@ void CWallet::SyncMetaData(std::pair<TxSpends::iterator, TxSpends::iterator> ran\n  * Outpoint is spent if any non-conflicted transaction\n  * spends it:\n  */\n-bool CWallet::IsSpent(const uint256& hash, unsigned int n) const\n+bool CWallet::IsSpent(const uint256& hash, unsigned int n) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\n {\n     const COutPoint outpoint(hash, n);\n     std::pair<TxSpends::const_iterator, TxSpends::const_iterator> range;\n@@ -579,7 +579,7 @@ bool CWallet::IsSpent(const uint256& hash, unsigned int n) const\n     return false;\n }\n \n-void CWallet::AddToSpends(const COutPoint& outpoint, const uint256& wtxid)\n+void CWallet::AddToSpends(const COutPoint& outpoint, const uint256& wtxid) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\n {\n     mapTxSpends.insert(std::make_pair(outpoint, wtxid));\n \n@@ -589,7 +589,7 @@ void CWallet::AddToSpends(const COutPoint& outpoint, const uint256& wtxid)\n }\n \n \n-void CWallet::AddToSpends(const uint256& wtxid)\n+void CWallet::AddToSpends(const uint256& wtxid) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\n {\n     auto it = mapWallet.find(wtxid);\n     assert(it != mapWallet.end());\n@@ -815,7 +815,7 @@ bool CWallet::AccountMove(std::string strFrom, std::string strTo, CAmount nAmoun\n     return true;\n }\n \n-bool CWallet::GetAccountPubkey(CPubKey &pubKey, std::string strAccount, bool bForceNew)\n+bool CWallet::GetAccountPubkey(CPubKey &pubKey, std::string strAccount, bool bForceNew) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\n {\n     CWalletDB walletdb(*dbw);\n \n@@ -975,7 +975,7 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFlushOnClose)\n     return true;\n }\n \n-bool CWallet::LoadToWallet(const CWalletTx& wtxIn)\n+bool CWallet::LoadToWallet(const CWalletTx& wtxIn) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\n {\n     uint256 hash = wtxIn.GetHash();\n \n@@ -1010,7 +1010,7 @@ bool CWallet::LoadToWallet(const CWalletTx& wtxIn)\n  * Abandoned state should probably be more carefully tracked via different\n  * posInBlock signals or by checking mempool presence when necessary.\n  */\n-bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef& ptx, const CBlockIndex* pIndex, int posInBlock, bool fUpdate)\n+bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef& ptx, const CBlockIndex* pIndex, int posInBlock, bool fUpdate) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\n {\n     const CTransaction& tx = *ptx;\n     {\n@@ -1198,7 +1198,7 @@ void CWallet::MarkConflicted(const uint256& hashBlock, const uint256& hashTx)\n     }\n }\n \n-void CWallet::SyncTransaction(const CTransactionRef& ptx, const CBlockIndex *pindex, int posInBlock) {\n+void CWallet::SyncTransaction(const CTransactionRef& ptx, const CBlockIndex *pindex, int posInBlock) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet) {\n     const CTransaction& tx = *ptx;\n \n     if (!AddToWalletIfInvolvingMe(ptx, pindex, posInBlock, true))\n@@ -1745,7 +1745,7 @@ bool CWalletTx::RelayWalletTransaction(CConnman* connman)\n     return false;\n }\n \n-std::set<uint256> CWalletTx::GetConflicts() const\n+std::set<uint256> CWalletTx::GetConflicts() const EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n {\n     std::set<uint256> result;\n     if (pwallet != nullptr)\n@@ -1835,7 +1835,7 @@ CAmount CWalletTx::GetImmatureCredit(bool fUseCache) const\n     return 0;\n }\n \n-CAmount CWalletTx::GetAvailableCredit(bool fUseCache) const\n+CAmount CWalletTx::GetAvailableCredit(bool fUseCache) const EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n {\n     if (pwallet == nullptr)\n         return 0;\n@@ -1879,7 +1879,7 @@ CAmount CWalletTx::GetImmatureWatchOnlyCredit(const bool& fUseCache) const\n     return 0;\n }\n \n-CAmount CWalletTx::GetAvailableWatchOnlyCredit(const bool& fUseCache) const\n+CAmount CWalletTx::GetAvailableWatchOnlyCredit(const bool& fUseCache) const EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n {\n     if (pwallet == nullptr)\n         return 0;\n@@ -2326,7 +2326,7 @@ std::map<CTxDestination, std::vector<COutput>> CWallet::ListCoins() const\n     return result;\n }\n \n-const CTxOut& CWallet::FindNonChangeParentOutput(const CTransaction& tx, int output) const\n+const CTxOut& CWallet::FindNonChangeParentOutput(const CTransaction& tx, int output) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\n {\n     const CTransaction* ptx = &tx;\n     int n = output;\n@@ -2495,7 +2495,7 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const int nConfMin\n     return true;\n }\n \n-bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAmount& nTargetValue, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, const CCoinControl* coinControl) const\n+bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAmount& nTargetValue, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, const CCoinControl* coinControl) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\n {\n     std::vector<COutput> vCoins(vAvailableCoins);\n \n@@ -2564,7 +2564,7 @@ bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAm\n     return res;\n }\n \n-bool CWallet::SignTransaction(CMutableTransaction &tx)\n+bool CWallet::SignTransaction(CMutableTransaction &tx) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\n {\n     AssertLockHeld(cs_wallet); // mapWallet\n \n@@ -3100,7 +3100,7 @@ DBErrors CWallet::LoadWallet(bool& fFirstRunRet)\n     return DB_LOAD_OK;\n }\n \n-DBErrors CWallet::ZapSelectTx(std::vector<uint256>& vHashIn, std::vector<uint256>& vHashOut)\n+DBErrors CWallet::ZapSelectTx(std::vector<uint256>& vHashIn, std::vector<uint256>& vHashOut) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\n {\n     AssertLockHeld(cs_wallet); // mapWallet\n     DBErrors nZapSelectTxRet = CWalletDB(*dbw,\"cr+\").ZapSelectTx(vHashIn, vHashOut);\n@@ -3236,13 +3236,13 @@ bool CWallet::NewKeyPool()\n     return true;\n }\n \n-size_t CWallet::KeypoolCountExternalKeys()\n+size_t CWallet::KeypoolCountExternalKeys() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\n {\n     AssertLockHeld(cs_wallet); // setExternalKeyPool\n     return setExternalKeyPool.size();\n }\n \n-void CWallet::LoadKeyPool(int64_t nIndex, const CKeyPool &keypool)\n+void CWallet::LoadKeyPool(int64_t nIndex, const CKeyPool &keypool) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\n {\n     AssertLockHeld(cs_wallet);\n     if (keypool.fInternal) {\n@@ -3466,7 +3466,7 @@ std::map<CTxDestination, CAmount> CWallet::GetAddressBalances()\n     return balances;\n }\n \n-std::set< std::set<CTxDestination> > CWallet::GetAddressGroupings()\n+std::set< std::set<CTxDestination> > CWallet::GetAddressGroupings() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\n {\n     AssertLockHeld(cs_wallet); // mapWallet\n     std::set< std::set<CTxDestination> > groupings;\n@@ -3608,7 +3608,7 @@ void CReserveKey::ReturnKey()\n     vchPubKey = CPubKey();\n }\n \n-void CWallet::MarkReserveKeysAsUsed(int64_t keypool_id)\n+void CWallet::MarkReserveKeysAsUsed(int64_t keypool_id) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\n {\n     AssertLockHeld(cs_wallet);\n     bool internal = setInternalKeyPool.count(keypool_id);\n@@ -3642,33 +3642,33 @@ void CWallet::GetScriptForMining(std::shared_ptr<CReserveScript> &script)\n     script->reserveScript = CScript() << ToByteVector(pubkey) << OP_CHECKSIG;\n }\n \n-void CWallet::LockCoin(const COutPoint& output)\n+void CWallet::LockCoin(const COutPoint& output) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\n {\n     AssertLockHeld(cs_wallet); // setLockedCoins\n     setLockedCoins.insert(output);\n }\n \n-void CWallet::UnlockCoin(const COutPoint& output)\n+void CWallet::UnlockCoin(const COutPoint& output) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\n {\n     AssertLockHeld(cs_wallet); // setLockedCoins\n     setLockedCoins.erase(output);\n }\n \n-void CWallet::UnlockAllCoins()\n+void CWallet::UnlockAllCoins() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\n {\n     AssertLockHeld(cs_wallet); // setLockedCoins\n     setLockedCoins.clear();\n }\n \n-bool CWallet::IsLockedCoin(uint256 hash, unsigned int n) const\n+bool CWallet::IsLockedCoin(uint256 hash, unsigned int n) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\n {\n     AssertLockHeld(cs_wallet); // setLockedCoins\n     COutPoint outpt(hash, n);\n \n     return (setLockedCoins.count(outpt) > 0);\n }\n \n-void CWallet::ListLockedCoins(std::vector<COutPoint>& vOutpts) const\n+void CWallet::ListLockedCoins(std::vector<COutPoint>& vOutpts) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\n {\n     AssertLockHeld(cs_wallet); // setLockedCoins\n     for (std::set<COutPoint>::iterator it = setLockedCoins.begin();\n@@ -3680,7 +3680,7 @@ void CWallet::ListLockedCoins(std::vector<COutPoint>& vOutpts) const\n \n /** @} */ // end of Actions\n \n-void CWallet::GetKeyBirthTimes(std::map<CTxDestination, int64_t> &mapKeyBirth) const {\n+void CWallet::GetKeyBirthTimes(std::map<CTxDestination, int64_t> &mapKeyBirth) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet) {\n     AssertLockHeld(cs_wallet); // mapKeyMetadata\n     mapKeyBirth.clear();\n "
      },
      {
        "sha": "dff560336be46af9cf435af724b3c185908bd9b0",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/66411edf67d291985ae641e8446698a5281d1c34/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/66411edf67d291985ae641e8446698a5281d1c34/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=66411edf67d291985ae641e8446698a5281d1c34",
        "patch": "@@ -1032,7 +1032,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n \n     void GetScriptForMining(std::shared_ptr<CReserveScript> &script);\n     \n-    unsigned int GetKeyPoolSize()\n+    unsigned int GetKeyPoolSize() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\n     {\n         AssertLockHeld(cs_wallet); // set{Ex,In}ternalKeyPool\n         return setInternalKeyPool.size() + setExternalKeyPool.size();"
      },
      {
        "sha": "b1f6218a762e26eda82257499f65df4506a027a9",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/66411edf67d291985ae641e8446698a5281d1c34/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/66411edf67d291985ae641e8446698a5281d1c34/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=66411edf67d291985ae641e8446698a5281d1c34",
        "patch": "@@ -242,7 +242,7 @@ class CWalletScanState {\n \n bool\n ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n-             CWalletScanState &wss, std::string& strType, std::string& strErr)\n+             CWalletScanState &wss, std::string& strType, std::string& strErr) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n {\n     try {\n         // Unserialize"
      }
    ]
  },
  {
    "sha": "1a3dbf3cb7e268dfecc490d543ee6a95616074b1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYTNkYmYzY2I3ZTI2OGRmZWNjNDkwZDU0M2VlNmE5NTYxNjA3NGIx",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-09-04T09:03:02Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Add EXCLUSIVE_LOCKS_REQUIRED(cs_LastBlockFile). cs_LastBlockFile is guarding nLastBlockFile.",
      "tree": {
        "sha": "2b9cbd524d9bbc91d7813a7228ea6ad9e23115dd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2b9cbd524d9bbc91d7813a7228ea6ad9e23115dd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1a3dbf3cb7e268dfecc490d543ee6a95616074b1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a3dbf3cb7e268dfecc490d543ee6a95616074b1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1a3dbf3cb7e268dfecc490d543ee6a95616074b1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a3dbf3cb7e268dfecc490d543ee6a95616074b1/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "66411edf67d291985ae641e8446698a5281d1c34",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/66411edf67d291985ae641e8446698a5281d1c34",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/66411edf67d291985ae641e8446698a5281d1c34"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "79c878053bd3261de8f7bcfdcb1e95e9961c008c",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a3dbf3cb7e268dfecc490d543ee6a95616074b1/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a3dbf3cb7e268dfecc490d543ee6a95616074b1/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=1a3dbf3cb7e268dfecc490d543ee6a95616074b1",
        "patch": "@@ -137,7 +137,7 @@ namespace {\n \n     CCriticalSection cs_LastBlockFile;\n     std::vector<CBlockFileInfo> vinfoBlockFile;\n-    int nLastBlockFile = 0;\n+    int nLastBlockFile = 0; // GUARDED_BY(cs_LastBlockFile)\n     /** Global flag to indicate we should check to see if there are\n      *  block/undo files that should be deleted.  Set on startup\n      *  or if we allocate more file space when we're in prune mode\n@@ -3544,7 +3544,7 @@ CBlockIndex * InsertBlockIndex(uint256 hash)\n     return pindexNew;\n }\n \n-bool static LoadBlockIndexDB(const CChainParams& chainparams)\n+bool static LoadBlockIndexDB(const CChainParams& chainparams) EXCLUSIVE_LOCKS_REQUIRED(cs_LastBlockFile)\n {\n     LOCK(cs_main);\n     if (!pblocktree->LoadBlockIndexGuts(chainparams.GetConsensus(), InsertBlockIndex))\n@@ -3996,7 +3996,7 @@ void UnloadBlockIndex()\n     fHavePruned = false;\n }\n \n-bool LoadBlockIndex(const CChainParams& chainparams)\n+bool LoadBlockIndex(const CChainParams& chainparams) EXCLUSIVE_LOCKS_REQUIRED(cs_LastBlockFile)\n {\n     // Load block index from databases\n     bool needs_init = fReindex;"
      }
    ]
  },
  {
    "sha": "9c9d4d6f83d40429ae84cc06d65c5d2555eeef30",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YzlkNGQ2ZjgzZDQwNDI5YWU4NGNjMDZkNjVjNWQyNTU1ZWVlZjMw",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-09-04T19:20:15Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Add EXCLUSIVE_LOCKS_REQUIRED(cs_wallet). cs_wallet is guarding nWalletVersion and nWalletMaxVersion.",
      "tree": {
        "sha": "8d0c64e4f4132450a663ee2e1c17ece3981165ad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8d0c64e4f4132450a663ee2e1c17ece3981165ad"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9c9d4d6f83d40429ae84cc06d65c5d2555eeef30",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c9d4d6f83d40429ae84cc06d65c5d2555eeef30",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9c9d4d6f83d40429ae84cc06d65c5d2555eeef30",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c9d4d6f83d40429ae84cc06d65c5d2555eeef30/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1a3dbf3cb7e268dfecc490d543ee6a95616074b1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a3dbf3cb7e268dfecc490d543ee6a95616074b1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1a3dbf3cb7e268dfecc490d543ee6a95616074b1"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 6,
      "deletions": 6
    },
    "files": [
      {
        "sha": "06816377bd4f81899e64f500204de8e89bbacb96",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c9d4d6f83d40429ae84cc06d65c5d2555eeef30/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c9d4d6f83d40429ae84cc06d65c5d2555eeef30/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=9c9d4d6f83d40429ae84cc06d65c5d2555eeef30",
        "patch": "@@ -143,7 +143,7 @@ const CWalletTx* CWallet::GetWalletTx(const uint256& hash) const\n     return &(it->second);\n }\n \n-CPubKey CWallet::GenerateNewKey(CWalletDB &walletdb, bool internal)\n+CPubKey CWallet::GenerateNewKey(CWalletDB &walletdb, bool internal) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\n {\n     AssertLockHeld(cs_wallet); // mapKeyMetadata\n     bool fCompressed = CanSupportFeature(FEATURE_COMPRPUBKEY); // default to compressed public keys if we want 0.6.0 wallets\n@@ -178,7 +178,7 @@ CPubKey CWallet::GenerateNewKey(CWalletDB &walletdb, bool internal)\n     return pubkey;\n }\n \n-void CWallet::DeriveNewChildKey(CWalletDB &walletdb, CKeyMetadata& metadata, CKey& secret, bool internal)\n+void CWallet::DeriveNewChildKey(CWalletDB &walletdb, CKeyMetadata& metadata, CKey& secret, bool internal) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\n {\n     // for now we use a fixed keypath scheme of m/0'/0'/k\n     CKey key;                      //master key seed (256bit)"
      },
      {
        "sha": "5c2ebf61c158ab37ba1ad9abeefe2631b6df9329",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c9d4d6f83d40429ae84cc06d65c5d2555eeef30/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c9d4d6f83d40429ae84cc06d65c5d2555eeef30/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=9c9d4d6f83d40429ae84cc06d65c5d2555eeef30",
        "patch": "@@ -667,10 +667,10 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     CWalletDB *pwalletdbEncryption;\n \n     //! the current wallet version: clients below this version are not able to load the wallet\n-    int nWalletVersion;\n+    int nWalletVersion; // GUARDED_BY(cs_wallet)\n \n     //! the maximum wallet format version: memory-only variable that specifies to what version this wallet may be upgraded\n-    int nWalletMaxVersion;\n+    int nWalletMaxVersion; // GUARDED_BY(cs_wallet)\n \n     int64_t nNextResend;\n     int64_t nLastResend;\n@@ -823,7 +823,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     const CWalletTx* GetWalletTx(const uint256& hash) const;\n \n     //! check whether we are allowed to upgrade (or already support) to the named feature\n-    bool CanSupportFeature(enum WalletFeature wf) const { AssertLockHeld(cs_wallet); return nWalletMaxVersion >= wf; }\n+    bool CanSupportFeature(enum WalletFeature wf) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet) { AssertLockHeld(cs_wallet); return nWalletMaxVersion >= wf; }\n \n     /**\n      * populate vCoins with vector of available COutputs.\n@@ -876,7 +876,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     //! Load metadata (used by LoadWallet)\n     bool LoadKeyMetadata(const CTxDestination& pubKey, const CKeyMetadata &metadata);\n \n-    bool LoadMinVersion(int nVersion) { AssertLockHeld(cs_wallet); nWalletVersion = nVersion; nWalletMaxVersion = std::max(nWalletMaxVersion, nVersion); return true; }\n+    bool LoadMinVersion(int nVersion) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet) { AssertLockHeld(cs_wallet); nWalletVersion = nVersion; nWalletMaxVersion = std::max(nWalletMaxVersion, nVersion); return true; }\n     void UpdateTimeFirstKey(int64_t nCreateTime);\n \n     //! Adds an encrypted key to the store, and saves it to disk."
      }
    ]
  },
  {
    "sha": "855c071fcb8d47934706a3bd9f0f0db3fb2660bb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NTVjMDcxZmNiOGQ0NzkzNDcwNmEzYmQ5ZjBmMGRiM2ZiMjY2MGJi",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-09-04T14:58:08Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Rename CAddrMan.cs to CAddrMan.cs_addrMan. Rename CTxMemPool.cs to CTxMemPool.cs_txMemPool.",
      "tree": {
        "sha": "9399219624ccd9d768e1f67b9c5379d6009317a2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9399219624ccd9d768e1f67b9c5379d6009317a2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/855c071fcb8d47934706a3bd9f0f0db3fb2660bb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/855c071fcb8d47934706a3bd9f0f0db3fb2660bb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/855c071fcb8d47934706a3bd9f0f0db3fb2660bb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/855c071fcb8d47934706a3bd9f0f0db3fb2660bb/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9c9d4d6f83d40429ae84cc06d65c5d2555eeef30",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c9d4d6f83d40429ae84cc06d65c5d2555eeef30",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9c9d4d6f83d40429ae84cc06d65c5d2555eeef30"
      }
    ],
    "stats": {
      "total": 208,
      "additions": 104,
      "deletions": 104
    },
    "files": [
      {
        "sha": "9968cbb88330b9d5861c1a971cf58c4d5a3615a8",
        "filename": "src/addrman.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/855c071fcb8d47934706a3bd9f0f0db3fb2660bb/src/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/855c071fcb8d47934706a3bd9f0f0db3fb2660bb/src/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.cpp?ref=855c071fcb8d47934706a3bd9f0f0db3fb2660bb",
        "patch": "@@ -78,7 +78,7 @@ CAddrInfo* CAddrMan::Find(const CNetAddr& addr, int* pnId)\n     return nullptr;\n }\n \n-CAddrInfo* CAddrMan::Create(const CAddress& addr, const CNetAddr& addrSource, int* pnId) EXCLUSIVE_LOCKS_REQUIRED(cs)\n+CAddrInfo* CAddrMan::Create(const CAddress& addr, const CNetAddr& addrSource, int* pnId) EXCLUSIVE_LOCKS_REQUIRED(cs_addrMan)\n {\n     int nId = nIdCount++;\n     mapInfo[nId] = CAddrInfo(addr, addrSource);\n@@ -90,7 +90,7 @@ CAddrInfo* CAddrMan::Create(const CAddress& addr, const CNetAddr& addrSource, in\n     return &mapInfo[nId];\n }\n \n-void CAddrMan::SwapRandom(unsigned int nRndPos1, unsigned int nRndPos2) EXCLUSIVE_LOCKS_REQUIRED(cs)\n+void CAddrMan::SwapRandom(unsigned int nRndPos1, unsigned int nRndPos2) EXCLUSIVE_LOCKS_REQUIRED(cs_addrMan)\n {\n     if (nRndPos1 == nRndPos2)\n         return;\n@@ -110,7 +110,7 @@ void CAddrMan::SwapRandom(unsigned int nRndPos1, unsigned int nRndPos2) EXCLUSIV\n     vRandom[nRndPos2] = nId1;\n }\n \n-void CAddrMan::Delete(int nId) EXCLUSIVE_LOCKS_REQUIRED(cs)\n+void CAddrMan::Delete(int nId) EXCLUSIVE_LOCKS_REQUIRED(cs_addrMan)\n {\n     assert(mapInfo.count(nId) != 0);\n     CAddrInfo& info = mapInfo[nId];\n@@ -124,7 +124,7 @@ void CAddrMan::Delete(int nId) EXCLUSIVE_LOCKS_REQUIRED(cs)\n     nNew--;\n }\n \n-void CAddrMan::ClearNew(int nUBucket, int nUBucketPos) EXCLUSIVE_LOCKS_REQUIRED(cs)\n+void CAddrMan::ClearNew(int nUBucket, int nUBucketPos) EXCLUSIVE_LOCKS_REQUIRED(cs_addrMan)\n {\n     // if there is an entry in the specified bucket, delete it.\n     if (vvNew[nUBucket][nUBucketPos] != -1) {\n@@ -139,7 +139,7 @@ void CAddrMan::ClearNew(int nUBucket, int nUBucketPos) EXCLUSIVE_LOCKS_REQUIRED(\n     }\n }\n \n-void CAddrMan::MakeTried(CAddrInfo& info, int nId) EXCLUSIVE_LOCKS_REQUIRED(cs)\n+void CAddrMan::MakeTried(CAddrInfo& info, int nId) EXCLUSIVE_LOCKS_REQUIRED(cs_addrMan)\n {\n     // remove the entry from all new buckets\n     for (int bucket = 0; bucket < ADDRMAN_NEW_BUCKET_COUNT; bucket++) {\n@@ -187,7 +187,7 @@ void CAddrMan::MakeTried(CAddrInfo& info, int nId) EXCLUSIVE_LOCKS_REQUIRED(cs)\n     info.fInTried = true;\n }\n \n-void CAddrMan::Good_(const CService& addr, int64_t nTime) EXCLUSIVE_LOCKS_REQUIRED(cs)\n+void CAddrMan::Good_(const CService& addr, int64_t nTime) EXCLUSIVE_LOCKS_REQUIRED(cs_addrMan)\n {\n     int nId;\n \n@@ -239,7 +239,7 @@ void CAddrMan::Good_(const CService& addr, int64_t nTime) EXCLUSIVE_LOCKS_REQUIR\n     MakeTried(info, nId);\n }\n \n-bool CAddrMan::Add_(const CAddress& addr, const CNetAddr& source, int64_t nTimePenalty) EXCLUSIVE_LOCKS_REQUIRED(cs)\n+bool CAddrMan::Add_(const CAddress& addr, const CNetAddr& source, int64_t nTimePenalty) EXCLUSIVE_LOCKS_REQUIRED(cs_addrMan)\n {\n     if (!addr.IsRoutable())\n         return false;\n@@ -459,7 +459,7 @@ int CAddrMan::Check_()\n }\n #endif\n \n-void CAddrMan::GetAddr_(std::vector<CAddress>& vAddr) EXCLUSIVE_LOCKS_REQUIRED(cs)\n+void CAddrMan::GetAddr_(std::vector<CAddress>& vAddr) EXCLUSIVE_LOCKS_REQUIRED(cs_addrMan)\n {\n     unsigned int nNodes = ADDRMAN_GETADDR_MAX_PCT * vRandom.size() / 100;\n     if (nNodes > ADDRMAN_GETADDR_MAX)"
      },
      {
        "sha": "ebad2a1e2142fd59fe8d98a6668ae936b9581263",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 14,
        "deletions": 14,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/855c071fcb8d47934706a3bd9f0f0db3fb2660bb/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/855c071fcb8d47934706a3bd9f0f0db3fb2660bb/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=855c071fcb8d47934706a3bd9f0f0db3fb2660bb",
        "patch": "@@ -183,7 +183,7 @@ class CAddrMan\n {\n private:\n     //! critical section to protect the inner data structures\n-    mutable CCriticalSection cs;\n+    mutable CCriticalSection cs_addrMan;\n \n     //! last used nId\n     int nIdCount;\n@@ -195,7 +195,7 @@ class CAddrMan\n     std::map<CNetAddr, int> mapAddr;\n \n     //! randomly-ordered vector of all nIds\n-    std::vector<int> vRandom GUARDED_BY(cs);\n+    std::vector<int> vRandom GUARDED_BY(cs_addrMan);\n \n     // number of \"tried\" entries\n     int nTried;\n@@ -300,7 +300,7 @@ class CAddrMan\n     template<typename Stream>\n     void Serialize(Stream &s) const\n     {\n-        LOCK(cs);\n+        LOCK(cs_addrMan);\n \n         unsigned char nVersion = 1;\n         s << nVersion;\n@@ -350,7 +350,7 @@ class CAddrMan\n     template<typename Stream>\n     void Unserialize(Stream& s)\n     {\n-        LOCK(cs);\n+        LOCK(cs_addrMan);\n \n         Clear();\n \n@@ -490,7 +490,7 @@ class CAddrMan\n     //! Return the number of (unique) addresses in all tables.\n     size_t size() const\n     {\n-        LOCK(cs); // TODO: Cache this in an atomic to avoid this overhead\n+        LOCK(cs_addrMan); // TODO: Cache this in an atomic to avoid this overhead\n         return vRandom.size();\n     }\n \n@@ -499,7 +499,7 @@ class CAddrMan\n     {\n #ifdef DEBUG_ADDRMAN\n         {\n-            LOCK(cs);\n+            LOCK(cs_addrMan);\n             int err;\n             if ((err=Check_()))\n                 LogPrintf(\"ADDRMAN CONSISTENCY CHECK FAILED!!! err=%i\\n\", err);\n@@ -510,7 +510,7 @@ class CAddrMan\n     //! Add a single address.\n     bool Add(const CAddress &addr, const CNetAddr& source, int64_t nTimePenalty = 0)\n     {\n-        LOCK(cs);\n+        LOCK(cs_addrMan);\n         bool fRet = false;\n         Check();\n         fRet |= Add_(addr, source, nTimePenalty);\n@@ -524,7 +524,7 @@ class CAddrMan\n     //! Add multiple addresses.\n     bool Add(const std::vector<CAddress> &vAddr, const CNetAddr& source, int64_t nTimePenalty = 0)\n     {\n-        LOCK(cs);\n+        LOCK(cs_addrMan);\n         int nAdd = 0;\n         Check();\n         for (std::vector<CAddress>::const_iterator it = vAddr.begin(); it != vAddr.end(); it++)\n@@ -539,7 +539,7 @@ class CAddrMan\n     //! Mark an entry as accessible.\n     void Good(const CService &addr, int64_t nTime = GetAdjustedTime())\n     {\n-        LOCK(cs);\n+        LOCK(cs_addrMan);\n         Check();\n         Good_(addr, nTime);\n         Check();\n@@ -548,7 +548,7 @@ class CAddrMan\n     //! Mark an entry as connection attempted to.\n     void Attempt(const CService &addr, bool fCountFailure, int64_t nTime = GetAdjustedTime())\n     {\n-        LOCK(cs);\n+        LOCK(cs_addrMan);\n         Check();\n         Attempt_(addr, fCountFailure, nTime);\n         Check();\n@@ -561,7 +561,7 @@ class CAddrMan\n     {\n         CAddrInfo addrRet;\n         {\n-            LOCK(cs);\n+            LOCK(cs_addrMan);\n             Check();\n             addrRet = Select_(newOnly);\n             Check();\n@@ -575,7 +575,7 @@ class CAddrMan\n         Check();\n         std::vector<CAddress> vAddr;\n         {\n-            LOCK(cs);\n+            LOCK(cs_addrMan);\n             GetAddr_(vAddr);\n         }\n         Check();\n@@ -585,15 +585,15 @@ class CAddrMan\n     //! Mark an entry as currently-connected-to.\n     void Connected(const CService &addr, int64_t nTime = GetAdjustedTime())\n     {\n-        LOCK(cs);\n+        LOCK(cs_addrMan);\n         Check();\n         Connected_(addr, nTime);\n         Check();\n     }\n \n     void SetServices(const CService &addr, ServiceFlags nServices)\n     {\n-        LOCK(cs);\n+        LOCK(cs_addrMan);\n         Check();\n         SetServices_(addr, nServices);\n         Check();"
      },
      {
        "sha": "7e2cbeebc46cd4b30539ac3c406677f46bcee532",
        "filename": "src/blockencodings.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/855c071fcb8d47934706a3bd9f0f0db3fb2660bb/src/blockencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/855c071fcb8d47934706a3bd9f0f0db3fb2660bb/src/blockencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockencodings.cpp?ref=855c071fcb8d47934706a3bd9f0f0db3fb2660bb",
        "patch": "@@ -103,7 +103,7 @@ ReadStatus PartiallyDownloadedBlock::InitData(const CBlockHeaderAndShortTxIDs& c\n \n     std::vector<bool> have_txn(txn_available.size());\n     {\n-    LOCK(pool->cs);\n+    LOCK(pool->cs_txMemPool);\n     const std::vector<std::pair<uint256, CTxMemPool::txiter> >& vTxHashes = pool->vTxHashes;\n     for (size_t i = 0; i < vTxHashes.size(); i++) {\n         uint64_t shortid = cmpctblock.GetShortID(vTxHashes[i].first);"
      },
      {
        "sha": "1a002eb5cff0ccac04a97cfc9ca49cdadb09fef1",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/855c071fcb8d47934706a3bd9f0f0db3fb2660bb/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/855c071fcb8d47934706a3bd9f0f0db3fb2660bb/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=855c071fcb8d47934706a3bd9f0f0db3fb2660bb",
        "patch": "@@ -123,7 +123,7 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& sc\n     pblocktemplate->vTxFees.push_back(-1); // updated at end\n     pblocktemplate->vTxSigOpsCost.push_back(-1); // updated at end\n \n-    LOCK2(cs_main, mempool.cs);\n+    LOCK2(cs_main, mempool.cs_txMemPool);\n     CBlockIndex* pindexPrev = chainActive.Tip();\n     assert(pindexPrev != nullptr);\n     nHeight = pindexPrev->nHeight + 1;\n@@ -283,7 +283,7 @@ int BlockAssembler::UpdatePackagesForAdded(const CTxMemPool::setEntries& already\n // guaranteed to fail again, but as a belt-and-suspenders check we put it in\n // failedTx and avoid re-evaluation, since the re-evaluation would be using\n // cached size/sigops/fee values that are not actually correct.\n-bool BlockAssembler::SkipMapTxEntry(CTxMemPool::txiter it, indexed_modified_transaction_set &mapModifiedTx, CTxMemPool::setEntries &failedTx) EXCLUSIVE_LOCKS_REQUIRED(mempool.cs)\n+bool BlockAssembler::SkipMapTxEntry(CTxMemPool::txiter it, indexed_modified_transaction_set &mapModifiedTx, CTxMemPool::setEntries &failedTx) EXCLUSIVE_LOCKS_REQUIRED(mempool.cs_txMemPool)\n {\n     assert (it != mempool.mapTx.end());\n     return mapModifiedTx.count(it) || inBlock.count(it) || failedTx.count(it);\n@@ -310,7 +310,7 @@ void BlockAssembler::SortForBlock(const CTxMemPool::setEntries& package, CTxMemP\n // Each time through the loop, we compare the best transaction in\n // mapModifiedTxs with the next transaction in the mempool to decide what\n // transaction package to work on next.\n-void BlockAssembler::addPackageTxs(int &nPackagesSelected, int &nDescendantsUpdated) EXCLUSIVE_LOCKS_REQUIRED(mempool.cs)\n+void BlockAssembler::addPackageTxs(int &nPackagesSelected, int &nDescendantsUpdated) EXCLUSIVE_LOCKS_REQUIRED(mempool.cs_txMemPool)\n {\n     // mapModifiedTx will store sorted packages after they are modified\n     // because some of their txs are already in the block"
      },
      {
        "sha": "96628fa02000327dc986f9019e94f95a4c6afd37",
        "filename": "src/policy/rbf.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/855c071fcb8d47934706a3bd9f0f0db3fb2660bb/src/policy/rbf.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/855c071fcb8d47934706a3bd9f0f0db3fb2660bb/src/policy/rbf.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/rbf.cpp?ref=855c071fcb8d47934706a3bd9f0f0db3fb2660bb",
        "patch": "@@ -14,9 +14,9 @@ bool SignalsOptInRBF(const CTransaction &tx)\n     return false;\n }\n \n-RBFTransactionState IsRBFOptIn(const CTransaction &tx, CTxMemPool &pool) EXCLUSIVE_LOCKS_REQUIRED(pool.cs)\n+RBFTransactionState IsRBFOptIn(const CTransaction &tx, CTxMemPool &pool) EXCLUSIVE_LOCKS_REQUIRED(pool.cs_txMemPool)\n {\n-    AssertLockHeld(pool.cs);\n+    AssertLockHeld(pool.cs_txMemPool);\n \n     CTxMemPool::setEntries setAncestors;\n "
      },
      {
        "sha": "83c934d9fb3ba79eec378263abda6c11797982a9",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/855c071fcb8d47934706a3bd9f0f0db3fb2660bb/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/855c071fcb8d47934706a3bd9f0f0db3fb2660bb/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=855c071fcb8d47934706a3bd9f0f0db3fb2660bb",
        "patch": "@@ -487,7 +487,7 @@ static bool rest_getutxos(HTTPRequest* req, const std::string& strURIPart)\n     std::vector<bool> hits;\n     bitmap.resize((vOutPoints.size() + 7) / 8);\n     {\n-        LOCK2(cs_main, mempool.cs);\n+        LOCK2(cs_main, mempool.cs_txMemPool);\n \n         CCoinsView viewDummy;\n         CCoinsViewCache view(&viewDummy);"
      },
      {
        "sha": "86dae98b3631b3d28106851a579ad3d1d876b024",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/855c071fcb8d47934706a3bd9f0f0db3fb2660bb/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/855c071fcb8d47934706a3bd9f0f0db3fb2660bb/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=855c071fcb8d47934706a3bd9f0f0db3fb2660bb",
        "patch": "@@ -354,7 +354,7 @@ std::string EntryDescriptionString()\n \n void entryToJSON(UniValue &info, const CTxMemPoolEntry &e)\n {\n-    AssertLockHeld(mempool.cs);\n+    AssertLockHeld(mempool.cs_txMemPool);\n \n     info.push_back(Pair(\"size\", (int)e.GetTxSize()));\n     info.push_back(Pair(\"fee\", ValueFromAmount(e.GetFee())));\n@@ -389,7 +389,7 @@ UniValue mempoolToJSON(bool fVerbose)\n {\n     if (fVerbose)\n     {\n-        LOCK(mempool.cs);\n+        LOCK(mempool.cs_txMemPool);\n         UniValue o(UniValue::VOBJ);\n         for (const CTxMemPoolEntry& e : mempool.mapTx)\n         {\n@@ -477,7 +477,7 @@ UniValue getmempoolancestors(const JSONRPCRequest& request)\n \n     uint256 hash = ParseHashV(request.params[0], \"parameter 1\");\n \n-    LOCK(mempool.cs);\n+    LOCK(mempool.cs_txMemPool);\n \n     CTxMemPool::txiter it = mempool.mapTx.find(hash);\n     if (it == mempool.mapTx.end()) {\n@@ -541,7 +541,7 @@ UniValue getmempooldescendants(const JSONRPCRequest& request)\n \n     uint256 hash = ParseHashV(request.params[0], \"parameter 1\");\n \n-    LOCK(mempool.cs);\n+    LOCK(mempool.cs_txMemPool);\n \n     CTxMemPool::txiter it = mempool.mapTx.find(hash);\n     if (it == mempool.mapTx.end()) {\n@@ -593,7 +593,7 @@ UniValue getmempoolentry(const JSONRPCRequest& request)\n \n     uint256 hash = ParseHashV(request.params[0], \"parameter 1\");\n \n-    LOCK(mempool.cs);\n+    LOCK(mempool.cs_txMemPool);\n \n     CTxMemPool::txiter it = mempool.mapTx.find(hash);\n     if (it == mempool.mapTx.end()) {\n@@ -995,7 +995,7 @@ UniValue gettxout(const JSONRPCRequest& request)\n \n     Coin coin;\n     if (fMempool) {\n-        LOCK(mempool.cs);\n+        LOCK(mempool.cs_txMemPool);\n         CCoinsViewMemPool view(pcoinsTip.get(), mempool);\n         if (!view.GetCoin(out, coin) || mempool.isSpent(out)) {\n             return NullUniValue;"
      },
      {
        "sha": "828ac84c0a7b6ce5a941287e9d1fb5862cb40909",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/855c071fcb8d47934706a3bd9f0f0db3fb2660bb/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/855c071fcb8d47934706a3bd9f0f0db3fb2660bb/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=855c071fcb8d47934706a3bd9f0f0db3fb2660bb",
        "patch": "@@ -602,7 +602,7 @@ UniValue combinerawtransaction(const JSONRPCRequest& request)\n     CCoinsViewCache view(&viewDummy);\n     {\n         LOCK(cs_main);\n-        LOCK(mempool.cs);\n+        LOCK(mempool.cs_txMemPool);\n         CCoinsViewCache &viewChain = *pcoinsTip;\n         CCoinsViewMemPool viewMempool(&viewChain, mempool);\n         view.SetBackend(viewMempool); // temporarily switch cache backend to db+mempool view\n@@ -723,7 +723,7 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n     CCoinsView viewDummy;\n     CCoinsViewCache view(&viewDummy);\n     {\n-        LOCK(mempool.cs);\n+        LOCK(mempool.cs_txMemPool);\n         CCoinsViewCache &viewChain = *pcoinsTip;\n         CCoinsViewMemPool viewMempool(&viewChain, mempool);\n         view.SetBackend(viewMempool); // temporarily switch cache backend to db+mempool view"
      },
      {
        "sha": "984724366fed252508dd21287076930094b4e476",
        "filename": "src/test/blockencodings_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/855c071fcb8d47934706a3bd9f0f0db3fb2660bb/src/test/blockencodings_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/855c071fcb8d47934706a3bd9f0f0db3fb2660bb/src/test/blockencodings_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/blockencodings_tests.cpp?ref=855c071fcb8d47934706a3bd9f0f0db3fb2660bb",
        "patch": "@@ -62,7 +62,7 @@ BOOST_AUTO_TEST_CASE(SimpleRoundTripTest)\n     CBlock block(BuildBlockTestCase());\n \n     pool.addUnchecked(block.vtx[2]->GetHash(), entry.FromTx(*block.vtx[2]));\n-    LOCK(pool.cs);\n+    LOCK(pool.cs_txMemPool);\n     BOOST_CHECK_EQUAL(pool.mapTx.find(block.vtx[2]->GetHash())->GetSharedTx().use_count(), SHARED_TX_OFFSET + 0);\n \n     // Do a simple ShortTxIDs RT\n@@ -162,7 +162,7 @@ BOOST_AUTO_TEST_CASE(NonCoinbasePreforwardRTTest)\n     CBlock block(BuildBlockTestCase());\n \n     pool.addUnchecked(block.vtx[2]->GetHash(), entry.FromTx(*block.vtx[2]));\n-    LOCK(pool.cs);\n+    LOCK(pool.cs_txMemPool);\n     BOOST_CHECK_EQUAL(pool.mapTx.find(block.vtx[2]->GetHash())->GetSharedTx().use_count(), SHARED_TX_OFFSET + 0);\n \n     uint256 txhash;\n@@ -229,7 +229,7 @@ BOOST_AUTO_TEST_CASE(SufficientPreforwardRTTest)\n     CBlock block(BuildBlockTestCase());\n \n     pool.addUnchecked(block.vtx[1]->GetHash(), entry.FromTx(*block.vtx[1]));\n-    LOCK(pool.cs);\n+    LOCK(pool.cs_txMemPool);\n     BOOST_CHECK_EQUAL(pool.mapTx.find(block.vtx[1]->GetHash())->GetSharedTx().use_count(), SHARED_TX_OFFSET + 0);\n \n     uint256 txhash;"
      },
      {
        "sha": "8d44471c7d0c469e4e302c3e6a3f04a0f57ac42b",
        "filename": "src/test/mempool_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/855c071fcb8d47934706a3bd9f0f0db3fb2660bb/src/test/mempool_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/855c071fcb8d47934706a3bd9f0f0db3fb2660bb/src/test/mempool_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/mempool_tests.cpp?ref=855c071fcb8d47934706a3bd9f0f0db3fb2660bb",
        "patch": "@@ -106,7 +106,7 @@ BOOST_AUTO_TEST_CASE(MempoolRemoveTest)\n }\n \n template<typename name>\n-void CheckSort(CTxMemPool &pool, std::vector<std::string> &sortedOrder) EXCLUSIVE_LOCKS_REQUIRED(pool.cs)\n+void CheckSort(CTxMemPool &pool, std::vector<std::string> &sortedOrder) EXCLUSIVE_LOCKS_REQUIRED(pool.cs_txMemPool)\n {\n     BOOST_CHECK_EQUAL(pool.size(), sortedOrder.size());\n     typename CTxMemPool::indexed_transaction_set::index<name>::type::iterator it = pool.mapTx.get<name>().begin();\n@@ -165,7 +165,7 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n     sortedOrder[2] = tx1.GetHash().ToString(); // 10000\n     sortedOrder[3] = tx4.GetHash().ToString(); // 15000\n     sortedOrder[4] = tx2.GetHash().ToString(); // 20000\n-    LOCK(pool.cs);\n+    LOCK(pool.cs_txMemPool);\n     CheckSort<descendant_score>(pool, sortedOrder);\n \n     /* low fee but with high fee child */\n@@ -376,7 +376,7 @@ BOOST_AUTO_TEST_CASE(MempoolAncestorIndexingTest)\n     }\n     sortedOrder[4] = tx3.GetHash().ToString(); // 0\n \n-    LOCK(pool.cs);\n+    LOCK(pool.cs_txMemPool);\n     CheckSort<ancestor_score>(pool, sortedOrder);\n \n     /* low fee parent with high fee child */"
      },
      {
        "sha": "9f6bd45a6e6c7cca6647705a515b73ce73f0a752",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/855c071fcb8d47934706a3bd9f0f0db3fb2660bb/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/855c071fcb8d47934706a3bd9f0f0db3fb2660bb/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=855c071fcb8d47934706a3bd9f0f0db3fb2660bb",
        "patch": "@@ -81,7 +81,7 @@ CBlockIndex CreateBlockIndex(int nHeight)\n \n bool TestSequenceLocks(const CTransaction &tx, int flags)\n {\n-    LOCK(mempool.cs);\n+    LOCK(mempool.cs_txMemPool);\n     return CheckSequenceLocks(tx, flags);\n }\n "
      },
      {
        "sha": "c027d105e00f6b910bb5c929aeef5a9c43cdce62",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 39,
        "deletions": 39,
        "changes": 78,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/855c071fcb8d47934706a3bd9f0f0db3fb2660bb/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/855c071fcb8d47934706a3bd9f0f0db3fb2660bb/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=855c071fcb8d47934706a3bd9f0f0db3fb2660bb",
        "patch": "@@ -59,7 +59,7 @@ size_t CTxMemPoolEntry::GetTxSize() const\n // Update the given tx for any in-mempool descendants.\n // Assumes that setMemPoolChildren is correct for the given tx and all\n // descendants.\n-void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendants, const std::set<uint256> &setExclude) EXCLUSIVE_LOCKS_REQUIRED(cs)\n+void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendants, const std::set<uint256> &setExclude) EXCLUSIVE_LOCKS_REQUIRED(cs_txMemPool)\n {\n     setEntries stageEntries, setAllDescendants;\n     stageEntries = GetMemPoolChildren(updateIt);\n@@ -108,7 +108,7 @@ void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendan\n // for each such descendant, also update the ancestor state to include the parent.\n void CTxMemPool::UpdateTransactionsFromBlock(const std::vector<uint256> &vHashesToUpdate)\n {\n-    LOCK(cs);\n+    LOCK(cs_txMemPool);\n     // For each entry in vHashesToUpdate, store the set of in-mempool, but not\n     // in-vHashesToUpdate transactions, so that we don't have to recalculate\n     // descendants when we come across a previously seen entry.\n@@ -151,7 +151,7 @@ void CTxMemPool::UpdateTransactionsFromBlock(const std::vector<uint256> &vHashes\n \n bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntries &setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string &errString, bool fSearchForParents /* = true */) const\n {\n-    LOCK(cs);\n+    LOCK(cs_txMemPool);\n \n     setEntries parentHashes;\n     const CTransaction &tx = entry.GetTx();\n@@ -213,7 +213,7 @@ bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntr\n     return true;\n }\n \n-void CTxMemPool::UpdateAncestorsOf(bool add, txiter it, setEntries &setAncestors) EXCLUSIVE_LOCKS_REQUIRED(cs)\n+void CTxMemPool::UpdateAncestorsOf(bool add, txiter it, setEntries &setAncestors) EXCLUSIVE_LOCKS_REQUIRED(cs_txMemPool)\n {\n     setEntries parentIters = GetMemPoolParents(it);\n     // add or remove this tx as a child of each parent\n@@ -228,7 +228,7 @@ void CTxMemPool::UpdateAncestorsOf(bool add, txiter it, setEntries &setAncestors\n     }\n }\n \n-void CTxMemPool::UpdateEntryForAncestors(txiter it, const setEntries &setAncestors) EXCLUSIVE_LOCKS_REQUIRED(cs)\n+void CTxMemPool::UpdateEntryForAncestors(txiter it, const setEntries &setAncestors) EXCLUSIVE_LOCKS_REQUIRED(cs_txMemPool)\n {\n     int64_t updateCount = setAncestors.size();\n     int64_t updateSize = 0;\n@@ -250,7 +250,7 @@ void CTxMemPool::UpdateChildrenForRemoval(txiter it)\n     }\n }\n \n-void CTxMemPool::UpdateForRemoveFromMempool(const setEntries &entriesToRemove, bool updateDescendants) EXCLUSIVE_LOCKS_REQUIRED(cs)\n+void CTxMemPool::UpdateForRemoveFromMempool(const setEntries &entriesToRemove, bool updateDescendants) EXCLUSIVE_LOCKS_REQUIRED(cs_txMemPool)\n {\n     // For each entry, walk back all ancestors and decrement size associated with this\n     // transaction\n@@ -341,19 +341,19 @@ CTxMemPool::CTxMemPool(CBlockPolicyEstimator* estimator) :\n \n bool CTxMemPool::isSpent(const COutPoint& outpoint)\n {\n-    LOCK(cs);\n+    LOCK(cs_txMemPool);\n     return mapNextTx.count(outpoint);\n }\n \n unsigned int CTxMemPool::GetTransactionsUpdated() const\n {\n-    LOCK(cs);\n+    LOCK(cs_txMemPool);\n     return nTransactionsUpdated;\n }\n \n void CTxMemPool::AddTransactionsUpdated(unsigned int n)\n {\n-    LOCK(cs);\n+    LOCK(cs_txMemPool);\n     nTransactionsUpdated += n;\n }\n \n@@ -363,7 +363,7 @@ bool CTxMemPool::addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry,\n     // Add to memory pool without checking anything.\n     // Used by AcceptToMemoryPool(), which DOES do\n     // all the appropriate checks.\n-    LOCK(cs);\n+    LOCK(cs_txMemPool);\n     indexed_transaction_set::iterator newit = mapTx.insert(entry).first;\n     mapLinks.insert(make_pair(newit, TxLinks()));\n \n@@ -416,7 +416,7 @@ bool CTxMemPool::addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry,\n     return true;\n }\n \n-void CTxMemPool::removeUnchecked(txiter it, MemPoolRemovalReason reason) EXCLUSIVE_LOCKS_REQUIRED(cs)\n+void CTxMemPool::removeUnchecked(txiter it, MemPoolRemovalReason reason) EXCLUSIVE_LOCKS_REQUIRED(cs_txMemPool)\n {\n     NotifyEntryRemoved(it->GetSharedTx(), reason);\n     const uint256 hash = it->GetTx().GetHash();\n@@ -474,7 +474,7 @@ void CTxMemPool::removeRecursive(const CTransaction &origTx, MemPoolRemovalReaso\n {\n     // Remove transaction from memory pool\n     {\n-        LOCK(cs);\n+        LOCK(cs_txMemPool);\n         setEntries txToRemove;\n         txiter origit = mapTx.find(origTx.GetHash());\n         if (origit != mapTx.end()) {\n@@ -505,7 +505,7 @@ void CTxMemPool::removeRecursive(const CTransaction &origTx, MemPoolRemovalReaso\n void CTxMemPool::removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMemPoolHeight, int flags)\n {\n     // Remove transactions spending a coinbase which are now immature and no-longer-final transactions\n-    LOCK(cs);\n+    LOCK(cs_txMemPool);\n     setEntries txToRemove;\n     for (indexed_transaction_set::const_iterator it = mapTx.begin(); it != mapTx.end(); it++) {\n         const CTransaction& tx = it->GetTx();\n@@ -542,7 +542,7 @@ void CTxMemPool::removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMem\n void CTxMemPool::removeConflicts(const CTransaction &tx)\n {\n     // Remove transactions which depend on inputs of tx, recursively\n-    LOCK(cs);\n+    LOCK(cs_txMemPool);\n     for (const CTxIn &txin : tx.vin) {\n         auto it = mapNextTx.find(txin.prevout);\n         if (it != mapNextTx.end()) {\n@@ -561,7 +561,7 @@ void CTxMemPool::removeConflicts(const CTransaction &tx)\n  */\n void CTxMemPool::removeForBlock(const std::vector<CTransactionRef>& vtx, unsigned int nBlockHeight)\n {\n-    LOCK(cs);\n+    LOCK(cs_txMemPool);\n     std::vector<const CTxMemPoolEntry*> entries;\n     for (const auto& tx : vtx)\n     {\n@@ -588,7 +588,7 @@ void CTxMemPool::removeForBlock(const std::vector<CTransactionRef>& vtx, unsigne\n     blockSinceLastRollingFeeBump = true;\n }\n \n-void CTxMemPool::_clear() EXCLUSIVE_LOCKS_REQUIRED(cs)\n+void CTxMemPool::_clear() EXCLUSIVE_LOCKS_REQUIRED(cs_txMemPool)\n {\n     mapLinks.clear();\n     mapTx.clear();\n@@ -603,7 +603,7 @@ void CTxMemPool::_clear() EXCLUSIVE_LOCKS_REQUIRED(cs)\n \n void CTxMemPool::clear()\n {\n-    LOCK(cs);\n+    LOCK(cs_txMemPool);\n     _clear();\n }\n \n@@ -624,7 +624,7 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n     if (GetRand(std::numeric_limits<uint32_t>::max()) >= nCheckFrequency)\n         return;\n \n-    LOCK(cs);\n+    LOCK(cs_txMemPool);\n     LogPrint(BCLog::MEMPOOL, \"Checking mempool with %u transactions and %u inputs\\n\", (unsigned int)mapTx.size(), (unsigned int)mapNextTx.size());\n \n     uint64_t checkTotal = 0;\n@@ -740,7 +740,7 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n \n bool CTxMemPool::CompareDepthAndScore(const uint256& hasha, const uint256& hashb)\n {\n-    LOCK(cs);\n+    LOCK(cs_txMemPool);\n     indexed_transaction_set::const_iterator i = mapTx.find(hasha);\n     if (i == mapTx.end()) return false;\n     indexed_transaction_set::const_iterator j = mapTx.find(hashb);\n@@ -769,10 +769,10 @@ class DepthAndScoreComparator\n };\n } // namespace\n \n-std::vector<CTxMemPool::indexed_transaction_set::const_iterator> CTxMemPool::GetSortedDepthAndScore() const EXCLUSIVE_LOCKS_REQUIRED(cs)\n+std::vector<CTxMemPool::indexed_transaction_set::const_iterator> CTxMemPool::GetSortedDepthAndScore() const EXCLUSIVE_LOCKS_REQUIRED(cs_txMemPool)\n {\n     std::vector<indexed_transaction_set::const_iterator> iters;\n-    AssertLockHeld(cs);\n+    AssertLockHeld(cs_txMemPool);\n \n     iters.reserve(mapTx.size());\n \n@@ -785,7 +785,7 @@ std::vector<CTxMemPool::indexed_transaction_set::const_iterator> CTxMemPool::Get\n \n void CTxMemPool::queryHashes(std::vector<uint256>& vtxid)\n {\n-    LOCK(cs);\n+    LOCK(cs_txMemPool);\n     auto iters = GetSortedDepthAndScore();\n \n     vtxid.clear();\n@@ -802,7 +802,7 @@ static TxMempoolInfo GetInfo(CTxMemPool::indexed_transaction_set::const_iterator\n \n std::vector<TxMempoolInfo> CTxMemPool::infoAll() const\n {\n-    LOCK(cs);\n+    LOCK(cs_txMemPool);\n     auto iters = GetSortedDepthAndScore();\n \n     std::vector<TxMempoolInfo> ret;\n@@ -816,7 +816,7 @@ std::vector<TxMempoolInfo> CTxMemPool::infoAll() const\n \n CTransactionRef CTxMemPool::get(const uint256& hash) const\n {\n-    LOCK(cs);\n+    LOCK(cs_txMemPool);\n     indexed_transaction_set::const_iterator i = mapTx.find(hash);\n     if (i == mapTx.end())\n         return nullptr;\n@@ -825,7 +825,7 @@ CTransactionRef CTxMemPool::get(const uint256& hash) const\n \n TxMempoolInfo CTxMemPool::info(const uint256& hash) const\n {\n-    LOCK(cs);\n+    LOCK(cs_txMemPool);\n     indexed_transaction_set::const_iterator i = mapTx.find(hash);\n     if (i == mapTx.end())\n         return TxMempoolInfo();\n@@ -835,7 +835,7 @@ TxMempoolInfo CTxMemPool::info(const uint256& hash) const\n void CTxMemPool::PrioritiseTransaction(const uint256& hash, const CAmount& nFeeDelta)\n {\n     {\n-        LOCK(cs);\n+        LOCK(cs_txMemPool);\n         CAmount &delta = mapDeltas[hash];\n         delta += nFeeDelta;\n         txiter it = mapTx.find(hash);\n@@ -864,7 +864,7 @@ void CTxMemPool::PrioritiseTransaction(const uint256& hash, const CAmount& nFeeD\n \n void CTxMemPool::ApplyDelta(const uint256 hash, CAmount &nFeeDelta) const\n {\n-    LOCK(cs);\n+    LOCK(cs_txMemPool);\n     std::map<uint256, CAmount>::const_iterator pos = mapDeltas.find(hash);\n     if (pos == mapDeltas.end())\n         return;\n@@ -874,7 +874,7 @@ void CTxMemPool::ApplyDelta(const uint256 hash, CAmount &nFeeDelta) const\n \n void CTxMemPool::ClearPrioritisation(const uint256 hash)\n {\n-    LOCK(cs);\n+    LOCK(cs_txMemPool);\n     mapDeltas.erase(hash);\n }\n \n@@ -905,21 +905,21 @@ bool CCoinsViewMemPool::GetCoin(const COutPoint &outpoint, Coin &coin) const {\n }\n \n size_t CTxMemPool::DynamicMemoryUsage() const {\n-    LOCK(cs);\n+    LOCK(cs_txMemPool);\n     // Estimate the overhead of mapTx to be 15 pointers + an allocation, as no exact formula for boost::multi_index_contained is implemented.\n     return memusage::MallocUsage(sizeof(CTxMemPoolEntry) + 15 * sizeof(void*)) * mapTx.size() + memusage::DynamicUsage(mapNextTx) + memusage::DynamicUsage(mapDeltas) + memusage::DynamicUsage(mapLinks) + memusage::DynamicUsage(vTxHashes) + cachedInnerUsage;\n }\n \n-void CTxMemPool::RemoveStaged(setEntries &stage, bool updateDescendants, MemPoolRemovalReason reason) EXCLUSIVE_LOCKS_REQUIRED(cs) {\n-    AssertLockHeld(cs);\n+void CTxMemPool::RemoveStaged(setEntries &stage, bool updateDescendants, MemPoolRemovalReason reason) EXCLUSIVE_LOCKS_REQUIRED(cs_txMemPool) {\n+    AssertLockHeld(cs_txMemPool);\n     UpdateForRemoveFromMempool(stage, updateDescendants);\n     for (const txiter& it : stage) {\n         removeUnchecked(it, reason);\n     }\n }\n \n int CTxMemPool::Expire(int64_t time) {\n-    LOCK(cs);\n+    LOCK(cs_txMemPool);\n     indexed_transaction_set::index<entry_time>::type::iterator it = mapTx.get<entry_time>().begin();\n     setEntries toremove;\n     while (it != mapTx.get<entry_time>().end() && it->GetTime() < time) {\n@@ -936,7 +936,7 @@ int CTxMemPool::Expire(int64_t time) {\n \n bool CTxMemPool::addUnchecked(const uint256&hash, const CTxMemPoolEntry &entry, bool validFeeEstimate)\n {\n-    LOCK(cs);\n+    LOCK(cs_txMemPool);\n     setEntries setAncestors;\n     uint64_t nNoLimit = std::numeric_limits<uint64_t>::max();\n     std::string dummy;\n@@ -964,15 +964,15 @@ void CTxMemPool::UpdateParent(txiter entry, txiter parent, bool add)\n     }\n }\n \n-const CTxMemPool::setEntries & CTxMemPool::GetMemPoolParents(txiter entry) const EXCLUSIVE_LOCKS_REQUIRED(cs)\n+const CTxMemPool::setEntries & CTxMemPool::GetMemPoolParents(txiter entry) const EXCLUSIVE_LOCKS_REQUIRED(cs_txMemPool)\n {\n     assert (entry != mapTx.end());\n     txlinksMap::const_iterator it = mapLinks.find(entry);\n     assert(it != mapLinks.end());\n     return it->second.parents;\n }\n \n-const CTxMemPool::setEntries & CTxMemPool::GetMemPoolChildren(txiter entry) const EXCLUSIVE_LOCKS_REQUIRED(cs)\n+const CTxMemPool::setEntries & CTxMemPool::GetMemPoolChildren(txiter entry) const EXCLUSIVE_LOCKS_REQUIRED(cs_txMemPool)\n {\n     assert (entry != mapTx.end());\n     txlinksMap::const_iterator it = mapLinks.find(entry);\n@@ -981,7 +981,7 @@ const CTxMemPool::setEntries & CTxMemPool::GetMemPoolChildren(txiter entry) cons\n }\n \n CFeeRate CTxMemPool::GetMinFee(size_t sizelimit) const {\n-    LOCK(cs);\n+    LOCK(cs_txMemPool);\n     if (!blockSinceLastRollingFeeBump || rollingMinimumFeeRate == 0)\n         return CFeeRate(llround(rollingMinimumFeeRate));\n \n@@ -1005,15 +1005,15 @@ CFeeRate CTxMemPool::GetMinFee(size_t sizelimit) const {\n }\n \n void CTxMemPool::trackPackageRemoved(const CFeeRate& rate) {\n-    AssertLockHeld(cs);\n+    AssertLockHeld(cs_txMemPool);\n     if (rate.GetFeePerK() > rollingMinimumFeeRate) {\n         rollingMinimumFeeRate = rate.GetFeePerK();\n         blockSinceLastRollingFeeBump = false;\n     }\n }\n \n void CTxMemPool::TrimToSize(size_t sizelimit, std::vector<COutPoint>* pvNoSpendsRemaining) {\n-    LOCK(cs);\n+    LOCK(cs_txMemPool);\n \n     unsigned nTxnRemoved = 0;\n     CFeeRate maxFeeRateRemoved(0);\n@@ -1056,7 +1056,7 @@ void CTxMemPool::TrimToSize(size_t sizelimit, std::vector<COutPoint>* pvNoSpends\n }\n \n bool CTxMemPool::TransactionWithinChainLimit(const uint256& txid, size_t chainLimit) const {\n-    LOCK(cs);\n+    LOCK(cs_txMemPool);\n     auto it = mapTx.find(txid);\n     return it == mapTx.end() || (it->GetCountWithAncestors() < chainLimit &&\n        it->GetCountWithDescendants() < chainLimit);"
      },
      {
        "sha": "ee351db53c04c4042eb48853fef267a3133ad43c",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/855c071fcb8d47934706a3bd9f0f0db3fb2660bb/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/855c071fcb8d47934706a3bd9f0f0db3fb2660bb/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=855c071fcb8d47934706a3bd9f0f0db3fb2660bb",
        "patch": "@@ -413,10 +413,10 @@ class CTxMemPool\n {\n private:\n     uint32_t nCheckFrequency; //!< Value n means that n times in 2^32 we check.\n-    unsigned int nTransactionsUpdated GUARDED_BY(cs); //!< Used by getblocktemplate to trigger CreateNewBlock() invocation\n+    unsigned int nTransactionsUpdated GUARDED_BY(cs_txMemPool); //!< Used by getblocktemplate to trigger CreateNewBlock() invocation\n     CBlockPolicyEstimator* minerPolicyEstimator;\n \n-    uint64_t totalTxSize GUARDED_BY(cs); //!< sum of all mempool tx's virtual sizes. Differs from serialized tx size since witness data is discounted. Defined in BIP 141.\n+    uint64_t totalTxSize GUARDED_BY(cs_txMemPool); //!< sum of all mempool tx's virtual sizes. Differs from serialized tx size since witness data is discounted. Defined in BIP 141.\n     uint64_t cachedInnerUsage; //!< sum of dynamic memory usage of all the map elements (NOT the maps themselves)\n \n     mutable int64_t lastRollingFeeUpdate;\n@@ -461,11 +461,11 @@ class CTxMemPool\n         >\n     > indexed_transaction_set;\n \n-    mutable CCriticalSection cs;\n-    indexed_transaction_set mapTx GUARDED_BY(cs);\n+    mutable CCriticalSection cs_txMemPool;\n+    indexed_transaction_set mapTx GUARDED_BY(cs_txMemPool);\n \n     typedef indexed_transaction_set::nth_index<0>::type::iterator txiter;\n-    std::vector<std::pair<uint256, txiter>> vTxHashes GUARDED_BY(cs); //!< All tx witness hashes/entries in mapTx, in random order\n+    std::vector<std::pair<uint256, txiter>> vTxHashes GUARDED_BY(cs_txMemPool); //!< All tx witness hashes/entries in mapTx, in random order\n \n     struct CompareIteratorByHash {\n         bool operator()(const txiter &a, const txiter &b) const {\n@@ -493,8 +493,8 @@ class CTxMemPool\n     std::vector<indexed_transaction_set::const_iterator> GetSortedDepthAndScore() const;\n \n public:\n-    indirectmap<COutPoint, const CTransaction*> mapNextTx GUARDED_BY(cs);\n-    std::map<uint256, CAmount> mapDeltas GUARDED_BY(cs);\n+    indirectmap<COutPoint, const CTransaction*> mapNextTx GUARDED_BY(cs_txMemPool);\n+    std::map<uint256, CAmount> mapDeltas GUARDED_BY(cs_txMemPool);\n \n     /** Create a new CTxMemPool.\n      */\n@@ -602,19 +602,19 @@ class CTxMemPool\n \n     unsigned long size()\n     {\n-        LOCK(cs);\n+        LOCK(cs_txMemPool);\n         return mapTx.size();\n     }\n \n     uint64_t GetTotalTxSize() const\n     {\n-        LOCK(cs);\n+        LOCK(cs_txMemPool);\n         return totalTxSize;\n     }\n \n     bool exists(uint256 hash) const\n     {\n-        LOCK(cs);\n+        LOCK(cs_txMemPool);\n         return (mapTx.count(hash) != 0);\n     }\n "
      },
      {
        "sha": "ce75af777295fb6071285ee2a01fb3c1c8824576",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/855c071fcb8d47934706a3bd9f0f0db3fb2660bb/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/855c071fcb8d47934706a3bd9f0f0db3fb2660bb/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=855c071fcb8d47934706a3bd9f0f0db3fb2660bb",
        "patch": "@@ -272,7 +272,7 @@ bool TestLockPointValidity(const LockPoints* lp)\n bool CheckSequenceLocks(const CTransaction &tx, int flags, LockPoints* lp, bool useExistingLockPoints)\n {\n     AssertLockHeld(cs_main);\n-    AssertLockHeld(mempool.cs);\n+    AssertLockHeld(mempool.cs_txMemPool);\n \n     CBlockIndex* tip = chainActive.Tip();\n     assert(tip != nullptr);\n@@ -435,10 +435,10 @@ static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, CValidationSt\n                  unsigned int flags, bool cacheSigStore, PrecomputedTransactionData& txdata) {\n     AssertLockHeld(cs_main);\n \n-    // pool.cs should be locked already, but go ahead and re-take the lock here\n+    // pool.cs_txMemPool should be locked already, but go ahead and re-take the lock here\n     // to enforce that mempool doesn't change between when we check the view\n     // and when we actually call through to CheckInputs\n-    LOCK(pool.cs);\n+    LOCK(pool.cs_txMemPool);\n \n     assert(!tx.IsCoinBase());\n     for (const CTxIn& txin : tx.vin) {\n@@ -507,7 +507,7 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n     // Check for conflicts with in-memory transactions\n     std::set<uint256> setConflicts;\n     {\n-    LOCK(pool.cs); // protect pool.mapNextTx\n+    LOCK(pool.cs_txMemPool); // protect pool.mapNextTx\n     for (const CTxIn &txin : tx.vin)\n     {\n         auto itConflicting = pool.mapNextTx.find(txin.prevout);\n@@ -556,7 +556,7 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n \n         LockPoints lp;\n         {\n-        LOCK(pool.cs);\n+        LOCK(pool.cs_txMemPool);\n         CCoinsViewMemPool viewMemPool(pcoinsTip.get(), pool);\n         view.SetBackend(viewMemPool);\n \n@@ -590,7 +590,7 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n         // Only accept BIP68 sequence locked transactions that can be mined in the next\n         // block; we don't want our mempool filled up with transactions that can't\n         // be mined yet.\n-        // Must keep pool.cs for this unless we change CheckSequenceLocks to take a\n+        // Must keep pool.cs_txMemPool for this unless we change CheckSequenceLocks to take a\n         // CoinsViewCache instead of create its own\n         if (!CheckSequenceLocks(tx, STANDARD_LOCKTIME_VERIFY_FLAGS, &lp))\n             return state.DoS(0, false, REJECT_NONSTANDARD, \"non-BIP68-final\");\n@@ -693,7 +693,7 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n         // If we don't hold the lock allConflicting might be incomplete; the\n         // subsequent RemoveStaged() and addUnchecked() calls don't guarantee\n         // mempool consistency for us.\n-        LOCK(pool.cs);\n+        LOCK(pool.cs_txMemPool);\n         const bool fReplacementTransaction = setConflicts.size();\n         if (fReplacementTransaction)\n         {\n@@ -4469,7 +4469,7 @@ bool DumpMempool(void)\n     std::vector<TxMempoolInfo> vinfo;\n \n     {\n-        LOCK(mempool.cs);\n+        LOCK(mempool.cs_txMemPool);\n         for (const auto &i : mempool.mapDeltas) {\n             mapDeltas[i.first] = i.second;\n         }"
      },
      {
        "sha": "27df2215d4200956dc4f3ce420e176d7e85c8faa",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/855c071fcb8d47934706a3bd9f0f0db3fb2660bb/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/855c071fcb8d47934706a3bd9f0f0db3fb2660bb/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=855c071fcb8d47934706a3bd9f0f0db3fb2660bb",
        "patch": "@@ -53,7 +53,7 @@ static feebumper::Result PreconditionChecks(const CWallet* wallet, const CWallet\n     }\n \n     {\n-        LOCK(mempool.cs);\n+        LOCK(mempool.cs_txMemPool);\n         auto it_mp = mempool.mapTx.find(wtx.GetHash());\n         if (it_mp != mempool.mapTx.end() && it_mp->GetCountWithDescendants() > 1) {\n             errors.push_back(\"Transaction has descendants in the mempool\");"
      },
      {
        "sha": "5951e23856ba048a9148d89c437abede0954ad69",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/855c071fcb8d47934706a3bd9f0f0db3fb2660bb/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/855c071fcb8d47934706a3bd9f0f0db3fb2660bb/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=855c071fcb8d47934706a3bd9f0f0db3fb2660bb",
        "patch": "@@ -108,7 +108,7 @@ void WalletTxToJSON(const CWalletTx& wtx, UniValue& entry)\n     // Add opt-in RBF status\n     std::string rbfStatus = \"no\";\n     if (confirms <= 0) {\n-        LOCK(mempool.cs);\n+        LOCK(mempool.cs_txMemPool);\n         RBFTransactionState rbfState = IsRBFOptIn(*wtx.tx, mempool);\n         if (rbfState == RBF_TRANSACTIONSTATE_UNKNOWN)\n             rbfStatus = \"unknown\";"
      },
      {
        "sha": "e45021d02696f62ef33339efc30b484fa904edde",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/855c071fcb8d47934706a3bd9f0f0db3fb2660bb/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/855c071fcb8d47934706a3bd9f0f0db3fb2660bb/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=855c071fcb8d47934706a3bd9f0f0db3fb2660bb",
        "patch": "@@ -1717,7 +1717,7 @@ void CWallet::ReacceptWalletTransactions()\n     {\n         CWalletTx& wtx = *(item.second);\n \n-        LOCK(mempool.cs);\n+        LOCK(mempool.cs_txMemPool);\n         CValidationState state;\n         wtx.AcceptToMemoryPool(maxTxFee, state);\n     }"
      }
    ]
  },
  {
    "sha": "00f5c213a2098b393eb3b89ca0036343ddfba197",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMGY1YzIxM2EyMDk4YjM5M2ViM2I4OWNhMDAzNjM0M2RkZmJhMTk3",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-09-04T19:49:00Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Add EXCLUSIVE_LOCKS_REQUIRED(cs_wallet). cs_wallet is guarding nOrderPosNext.",
      "tree": {
        "sha": "b4f9b211d9eb6b5c285d9f24f104e10d7c489e70",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b4f9b211d9eb6b5c285d9f24f104e10d7c489e70"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/00f5c213a2098b393eb3b89ca0036343ddfba197",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/00f5c213a2098b393eb3b89ca0036343ddfba197",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/00f5c213a2098b393eb3b89ca0036343ddfba197",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/00f5c213a2098b393eb3b89ca0036343ddfba197/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "855c071fcb8d47934706a3bd9f0f0db3fb2660bb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/855c071fcb8d47934706a3bd9f0f0db3fb2660bb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/855c071fcb8d47934706a3bd9f0f0db3fb2660bb"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "5ca17709acabb1a0d4cbc551ea641a3dade037a1",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/00f5c213a2098b393eb3b89ca0036343ddfba197/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/00f5c213a2098b393eb3b89ca0036343ddfba197/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=00f5c213a2098b393eb3b89ca0036343ddfba197",
        "patch": "@@ -769,7 +769,7 @@ DBErrors CWallet::ReorderTransactions()\n     return DB_LOAD_OK;\n }\n \n-int64_t CWallet::IncOrderPosNext(CWalletDB *pwalletdb)\n+int64_t CWallet::IncOrderPosNext(CWalletDB *pwalletdb) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\n {\n     AssertLockHeld(cs_wallet); // nOrderPosNext\n     int64_t nRet = nOrderPosNext++;\n@@ -781,7 +781,7 @@ int64_t CWallet::IncOrderPosNext(CWalletDB *pwalletdb)\n     return nRet;\n }\n \n-bool CWallet::AccountMove(std::string strFrom, std::string strTo, CAmount nAmount, std::string strComment)\n+bool CWallet::AccountMove(std::string strFrom, std::string strTo, CAmount nAmount, std::string strComment) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\n {\n     CWalletDB walletdb(*dbw);\n     if (!walletdb.TxnBegin())"
      },
      {
        "sha": "10b7e47537c9726fe7bbfca303dc5e6eaffc682a",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/00f5c213a2098b393eb3b89ca0036343ddfba197/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/00f5c213a2098b393eb3b89ca0036343ddfba197/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=00f5c213a2098b393eb3b89ca0036343ddfba197",
        "patch": "@@ -787,13 +787,13 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n         pwalletdbEncryption = nullptr;\n     }\n \n-    void SetNull()\n+    void SetNull() NO_THREAD_SAFETY_ANALYSIS\n     {\n         nWalletVersion = FEATURE_BASE;\n         nWalletMaxVersion = FEATURE_BASE;\n         nMasterKeyMaxID = 0;\n         pwalletdbEncryption = nullptr;\n-        nOrderPosNext = 0;\n+        nOrderPosNext = 0; // NO_THREAD_SAFETY_ANALYSIS\n         nAccountingEntryNumber = 0;\n         nNextResend = 0;\n         nLastResend = 0;\n@@ -812,7 +812,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     typedef std::multimap<int64_t, TxPair > TxItems;\n     TxItems wtxOrdered;\n \n-    int64_t nOrderPosNext;\n+    int64_t nOrderPosNext GUARDED_BY(cs_wallet);\n     uint64_t nAccountingEntryNumber;\n     std::map<uint256, int> mapRequestCount GUARDED_BY(cs_wallet);\n "
      }
    ]
  },
  {
    "sha": "468ad0148db7ec8609b80cf5133de80973c13a83",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NjhhZDAxNDhkYjdlYzg2MDliODBjZjUxMzNkZTgwOTczYzEzYTgz",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-09-04T20:17:26Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Add EXCLUSIVE_LOCKS_REQUIRED(cs_wallet). cs_wallet is guarding mapKeyMetadata.",
      "tree": {
        "sha": "3e976259ce139cf2b43b5fe65161e260d7d84d2e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3e976259ce139cf2b43b5fe65161e260d7d84d2e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/468ad0148db7ec8609b80cf5133de80973c13a83",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/468ad0148db7ec8609b80cf5133de80973c13a83",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/468ad0148db7ec8609b80cf5133de80973c13a83",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/468ad0148db7ec8609b80cf5133de80973c13a83/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "00f5c213a2098b393eb3b89ca0036343ddfba197",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/00f5c213a2098b393eb3b89ca0036343ddfba197",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/00f5c213a2098b393eb3b89ca0036343ddfba197"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 8,
      "deletions": 8
    },
    "files": [
      {
        "sha": "e6406e2f81d0ba33b54d9ef3cd000403d54c49fa",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/468ad0148db7ec8609b80cf5133de80973c13a83/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/468ad0148db7ec8609b80cf5133de80973c13a83/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=468ad0148db7ec8609b80cf5133de80973c13a83",
        "patch": "@@ -120,7 +120,7 @@ class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n };\n #endif\n \n-UniValue validateaddress(const JSONRPCRequest& request)\n+UniValue validateaddress(const JSONRPCRequest& request) NO_THREAD_SAFETY_ANALYSIS\n {\n     if (request.fHelp || request.params.size() != 1)\n         throw std::runtime_error("
      },
      {
        "sha": "0df882980872d988ee1524ddcfeed297cd16be86",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/468ad0148db7ec8609b80cf5133de80973c13a83/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/468ad0148db7ec8609b80cf5133de80973c13a83/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=468ad0148db7ec8609b80cf5133de80973c13a83",
        "patch": "@@ -704,7 +704,7 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n }\n \n \n-UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, const int64_t timestamp)\n+UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n {\n     try {\n         bool success = false;"
      },
      {
        "sha": "2b8adc8988c9a21b594de37f197752b457e45f31",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/468ad0148db7ec8609b80cf5133de80973c13a83/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/468ad0148db7ec8609b80cf5133de80973c13a83/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=468ad0148db7ec8609b80cf5133de80973c13a83",
        "patch": "@@ -224,7 +224,7 @@ void CWallet::DeriveNewChildKey(CWalletDB &walletdb, CKeyMetadata& metadata, CKe\n         throw std::runtime_error(std::string(__func__) + \": Writing HD chain model failed\");\n }\n \n-bool CWallet::AddKeyPubKeyWithDB(CWalletDB &walletdb, const CKey& secret, const CPubKey &pubkey)\n+bool CWallet::AddKeyPubKeyWithDB(CWalletDB &walletdb, const CKey& secret, const CPubKey &pubkey) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\n {\n     AssertLockHeld(cs_wallet); // mapKeyMetadata\n \n@@ -260,7 +260,7 @@ bool CWallet::AddKeyPubKeyWithDB(CWalletDB &walletdb, const CKey& secret, const\n     return true;\n }\n \n-bool CWallet::AddKeyPubKey(const CKey& secret, const CPubKey &pubkey)\n+bool CWallet::AddKeyPubKey(const CKey& secret, const CPubKey &pubkey) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\n {\n     CWalletDB walletdb(*dbw);\n     return CWallet::AddKeyPubKeyWithDB(walletdb, secret, pubkey);\n@@ -284,7 +284,7 @@ bool CWallet::AddCryptedKey(const CPubKey &vchPubKey,\n     }\n }\n \n-bool CWallet::LoadKeyMetadata(const CTxDestination& keyID, const CKeyMetadata &meta)\n+bool CWallet::LoadKeyMetadata(const CTxDestination& keyID, const CKeyMetadata &meta) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\n {\n     AssertLockHeld(cs_wallet); // mapKeyMetadata\n     UpdateTimeFirstKey(meta.nCreateTime);\n@@ -336,7 +336,7 @@ bool CWallet::LoadCScript(const CScript& redeemScript)\n     return CCryptoKeyStore::AddCScript(redeemScript);\n }\n \n-bool CWallet::AddWatchOnly(const CScript& dest)\n+bool CWallet::AddWatchOnly(const CScript& dest) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\n {\n     if (!CCryptoKeyStore::AddWatchOnly(dest))\n         return false;\n@@ -346,7 +346,7 @@ bool CWallet::AddWatchOnly(const CScript& dest)\n     return CWalletDB(*dbw).WriteWatchOnly(dest, meta);\n }\n \n-bool CWallet::AddWatchOnly(const CScript& dest, int64_t nCreateTime)\n+bool CWallet::AddWatchOnly(const CScript& dest, int64_t nCreateTime) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\n {\n     mapKeyMetadata[CScriptID(dest)].nCreateTime = nCreateTime;\n     return AddWatchOnly(dest);"
      },
      {
        "sha": "aa1e8dbd3c1e506a11d401e6d8ac1d005bc88075",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/468ad0148db7ec8609b80cf5133de80973c13a83/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/468ad0148db7ec8609b80cf5133de80973c13a83/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=468ad0148db7ec8609b80cf5133de80973c13a83",
        "patch": "@@ -763,7 +763,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n \n     // Map from Key ID (for regular keys) or Script ID (for watch-only keys) to\n     // key metadata.\n-    std::map<CTxDestination, CKeyMetadata> mapKeyMetadata;\n+    std::map<CTxDestination, CKeyMetadata> mapKeyMetadata GUARDED_BY(cs_wallet);\n \n     typedef std::map<unsigned int, CMasterKey> MasterKeyMap;\n     MasterKeyMap mapMasterKeys GUARDED_BY(cs_wallet);"
      }
    ]
  },
  {
    "sha": "cb8a8d19ba13ea48b38c431daed17c359e6c9edd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYjhhOGQxOWJhMTNlYTQ4YjM4YzQzMWRhZWQxN2MzNTllNmM5ZWRk",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-09-04T21:02:56Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Add EXCLUSIVE_LOCKS_REQUIRED(cs_txMemPool). cs_txMemPool is guarding minerPolicyEstimator, cachedInnerUsage, lastRollingFeeUpdate, blockSinceLastRollingFeeBump and rollingMinimumFeeRate.",
      "tree": {
        "sha": "2921237abbe85a38c5ee73b75648b4b104cce7e8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2921237abbe85a38c5ee73b75648b4b104cce7e8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cb8a8d19ba13ea48b38c431daed17c359e6c9edd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb8a8d19ba13ea48b38c431daed17c359e6c9edd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cb8a8d19ba13ea48b38c431daed17c359e6c9edd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb8a8d19ba13ea48b38c431daed17c359e6c9edd/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "468ad0148db7ec8609b80cf5133de80973c13a83",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/468ad0148db7ec8609b80cf5133de80973c13a83",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/468ad0148db7ec8609b80cf5133de80973c13a83"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 8,
      "deletions": 8
    },
    "files": [
      {
        "sha": "0d77c38b63e69849cc71c04717c3db0ae3ea41f4",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb8a8d19ba13ea48b38c431daed17c359e6c9edd/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb8a8d19ba13ea48b38c431daed17c359e6c9edd/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=cb8a8d19ba13ea48b38c431daed17c359e6c9edd",
        "patch": "@@ -944,7 +944,7 @@ bool CTxMemPool::addUnchecked(const uint256&hash, const CTxMemPoolEntry &entry,\n     return addUnchecked(hash, entry, setAncestors, validFeeEstimate);\n }\n \n-void CTxMemPool::UpdateChild(txiter entry, txiter child, bool add)\n+void CTxMemPool::UpdateChild(txiter entry, txiter child, bool add) EXCLUSIVE_LOCKS_REQUIRED(cs_txMemPool)\n {\n     setEntries s;\n     if (add && mapLinks[entry].children.insert(child).second) {\n@@ -954,7 +954,7 @@ void CTxMemPool::UpdateChild(txiter entry, txiter child, bool add)\n     }\n }\n \n-void CTxMemPool::UpdateParent(txiter entry, txiter parent, bool add)\n+void CTxMemPool::UpdateParent(txiter entry, txiter parent, bool add) EXCLUSIVE_LOCKS_REQUIRED(cs_txMemPool)\n {\n     setEntries s;\n     if (add && mapLinks[entry].parents.insert(parent).second) {\n@@ -1004,7 +1004,7 @@ CFeeRate CTxMemPool::GetMinFee(size_t sizelimit) const {\n     return std::max(CFeeRate(llround(rollingMinimumFeeRate)), incrementalRelayFee);\n }\n \n-void CTxMemPool::trackPackageRemoved(const CFeeRate& rate) {\n+void CTxMemPool::trackPackageRemoved(const CFeeRate& rate) EXCLUSIVE_LOCKS_REQUIRED(cs_txMemPool) {\n     AssertLockHeld(cs_txMemPool);\n     if (rate.GetFeePerK() > rollingMinimumFeeRate) {\n         rollingMinimumFeeRate = rate.GetFeePerK();"
      },
      {
        "sha": "7bb1f1fa1a243fb1eea54bbcecf1903238c216b7",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb8a8d19ba13ea48b38c431daed17c359e6c9edd/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb8a8d19ba13ea48b38c431daed17c359e6c9edd/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=cb8a8d19ba13ea48b38c431daed17c359e6c9edd",
        "patch": "@@ -414,14 +414,14 @@ class CTxMemPool\n private:\n     uint32_t nCheckFrequency; //!< Value n means that n times in 2^32 we check.\n     unsigned int nTransactionsUpdated GUARDED_BY(cs_txMemPool); //!< Used by getblocktemplate to trigger CreateNewBlock() invocation\n-    CBlockPolicyEstimator* minerPolicyEstimator;\n+    CBlockPolicyEstimator* minerPolicyEstimator PT_GUARDED_BY(cs_txMemPool);\n \n     uint64_t totalTxSize GUARDED_BY(cs_txMemPool); //!< sum of all mempool tx's virtual sizes. Differs from serialized tx size since witness data is discounted. Defined in BIP 141.\n-    uint64_t cachedInnerUsage; //!< sum of dynamic memory usage of all the map elements (NOT the maps themselves)\n+    uint64_t cachedInnerUsage GUARDED_BY(cs_txMemPool); //!< sum of dynamic memory usage of all the map elements (NOT the maps themselves)\n \n-    mutable int64_t lastRollingFeeUpdate;\n-    mutable bool blockSinceLastRollingFeeBump;\n-    mutable double rollingMinimumFeeRate; //!< minimum fee to get into the pool, decreases exponentially\n+    mutable int64_t lastRollingFeeUpdate GUARDED_BY(cs_txMemPool);\n+    mutable bool blockSinceLastRollingFeeBump GUARDED_BY(cs_txMemPool);\n+    mutable double rollingMinimumFeeRate GUARDED_BY(cs_txMemPool); //!< minimum fee to get into the pool, decreases exponentially\n \n     void trackPackageRemoved(const CFeeRate& rate);\n "
      }
    ]
  },
  {
    "sha": "a2d7d5693aa9435d9fb7f8e2ee58dbc28ba41d00",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMmQ3ZDU2OTNhYTk0MzVkOWZiN2Y4ZTJlZTU4ZGJjMjhiYTQxZDAw",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-09-04T21:28:21Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Add EXCLUSIVE_LOCKS_REQUIRED(cs_wallet). cs_wallet is guarding mapTxSpends and nTimeFirstKey.",
      "tree": {
        "sha": "286e2847e13022b77ffba2fa455fc18d37c5f5ea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/286e2847e13022b77ffba2fa455fc18d37c5f5ea"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a2d7d5693aa9435d9fb7f8e2ee58dbc28ba41d00",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a2d7d5693aa9435d9fb7f8e2ee58dbc28ba41d00",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a2d7d5693aa9435d9fb7f8e2ee58dbc28ba41d00",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a2d7d5693aa9435d9fb7f8e2ee58dbc28ba41d00/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cb8a8d19ba13ea48b38c431daed17c359e6c9edd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb8a8d19ba13ea48b38c431daed17c359e6c9edd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cb8a8d19ba13ea48b38c431daed17c359e6c9edd"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 9,
      "deletions": 6
    },
    "files": [
      {
        "sha": "e9791b7fba7ab1ccea774551902e75d69f0d9ac9",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 4,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a2d7d5693aa9435d9fb7f8e2ee58dbc28ba41d00/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a2d7d5693aa9435d9fb7f8e2ee58dbc28ba41d00/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=a2d7d5693aa9435d9fb7f8e2ee58dbc28ba41d00",
        "patch": "@@ -301,7 +301,7 @@ bool CWallet::LoadCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigne\n  * Update wallet first key creation time. This should be called whenever keys\n  * are added to the wallet, with the oldest key creation time.\n  */\n-void CWallet::UpdateTimeFirstKey(int64_t nCreateTime)\n+void CWallet::UpdateTimeFirstKey(int64_t nCreateTime) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\n {\n     AssertLockHeld(cs_wallet);\n     if (nCreateTime <= 1) {\n@@ -503,7 +503,7 @@ std::set<uint256> CWallet::GetConflicts(const uint256& txid) const EXCLUSIVE_LOC\n     return result;\n }\n \n-bool CWallet::HasWalletSpend(const uint256& txid) const\n+bool CWallet::HasWalletSpend(const uint256& txid) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\n {\n     AssertLockHeld(cs_wallet);\n     auto iter = mapTxSpends.lower_bound(COutPoint(txid, 0));\n@@ -3991,8 +3991,11 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n \n         // No need to read and scan block if block was created before\n         // our wallet birthday (as adjusted for block time variability)\n-        while (pindexRescan && walletInstance->nTimeFirstKey && (pindexRescan->GetBlockTime() < (walletInstance->nTimeFirstKey - TIMESTAMP_WINDOW))) {\n-            pindexRescan = chainActive.Next(pindexRescan);\n+        {\n+            LOCK(walletInstance->cs_wallet);\n+            while (pindexRescan && walletInstance->nTimeFirstKey && (pindexRescan->GetBlockTime() < (walletInstance->nTimeFirstKey - TIMESTAMP_WINDOW))) {\n+                pindexRescan = chainActive.Next(pindexRescan);\n+            }\n         }\n \n         nStart = GetTimeMillis();"
      },
      {
        "sha": "0e45d16c134a0e9d80aa9d6d502354b6ca0a52e8",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a2d7d5693aa9435d9fb7f8e2ee58dbc28ba41d00/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a2d7d5693aa9435d9fb7f8e2ee58dbc28ba41d00/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=a2d7d5693aa9435d9fb7f8e2ee58dbc28ba41d00",
        "patch": "@@ -682,7 +682,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n      * mutated transactions where the mutant gets mined).\n      */\n     typedef std::multimap<COutPoint, uint256> TxSpends;\n-    TxSpends mapTxSpends;\n+    TxSpends mapTxSpends GUARDED_BY(cs_wallet);\n     void AddToSpends(const COutPoint& outpoint, const uint256& wtxid);\n     void AddToSpends(const uint256& wtxid);\n \n@@ -706,7 +706,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     int64_t m_max_keypool_index;\n     std::map<CKeyID, int64_t> m_pool_key_to_index;\n \n-    int64_t nTimeFirstKey;\n+    int64_t nTimeFirstKey GUARDED_BY(cs_wallet);\n \n     /**\n      * Private version of AddWatchOnly method which does not accept a"
      }
    ]
  },
  {
    "sha": "1aa043c306838f10c659e3882a6e611520fa7f5c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYWEwNDNjMzA2ODM4ZjEwYzY1OWUzODgyYTZlNjExNTIwZmE3ZjVj",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-09-11T08:15:24Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Add EXCLUSIVE_LOCKS_REQUIRED(mempool.cs_txMemPool). mempool.cs_txMemPool is guarding mempool.vTxHashes.",
      "tree": {
        "sha": "b113f58848297cee776f24cf7b59376c443004de",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b113f58848297cee776f24cf7b59376c443004de"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1aa043c306838f10c659e3882a6e611520fa7f5c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1aa043c306838f10c659e3882a6e611520fa7f5c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1aa043c306838f10c659e3882a6e611520fa7f5c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1aa043c306838f10c659e3882a6e611520fa7f5c/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a2d7d5693aa9435d9fb7f8e2ee58dbc28ba41d00",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a2d7d5693aa9435d9fb7f8e2ee58dbc28ba41d00",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a2d7d5693aa9435d9fb7f8e2ee58dbc28ba41d00"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "7870740cf10ee202621fe56818be4204858f8f68",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1aa043c306838f10c659e3882a6e611520fa7f5c/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1aa043c306838f10c659e3882a6e611520fa7f5c/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=1aa043c306838f10c659e3882a6e611520fa7f5c",
        "patch": "@@ -352,7 +352,7 @@ std::string EntryDescriptionString()\n            \"       ... ]\\n\";\n }\n \n-void entryToJSON(UniValue &info, const CTxMemPoolEntry &e)\n+void entryToJSON(UniValue &info, const CTxMemPoolEntry &e) EXCLUSIVE_LOCKS_REQUIRED(mempool.cs_txMemPool)\n {\n     AssertLockHeld(mempool.cs_txMemPool);\n "
      }
    ]
  },
  {
    "sha": "f3a9665abb3c1dfaf7075c65dc85690de551690a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmM2E5NjY1YWJiM2MxZGZhZjcwNzVjNjVkYzg1NjkwZGU1NTE2OTBh",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-09-12T19:49:34Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Rename locks to get consistent and unique names\n\n* Rename cs to cs_test\n* Rename csPathCached to cs_pathCached\n* Rename SingleThreadedSchedulerClient.m_cs_callbacks_pending to SingleThreadedSchedulerClient.cs_callbacks_pending",
      "tree": {
        "sha": "26149b514f8fd6b914cce46200d7cb56057bf141",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/26149b514f8fd6b914cce46200d7cb56057bf141"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f3a9665abb3c1dfaf7075c65dc85690de551690a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f3a9665abb3c1dfaf7075c65dc85690de551690a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f3a9665abb3c1dfaf7075c65dc85690de551690a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f3a9665abb3c1dfaf7075c65dc85690de551690a/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1aa043c306838f10c659e3882a6e611520fa7f5c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1aa043c306838f10c659e3882a6e611520fa7f5c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1aa043c306838f10c659e3882a6e611520fa7f5c"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 15,
      "deletions": 15
    },
    "files": [
      {
        "sha": "4e2534c07521aaacdb2fc3b57d9dc264cb762455",
        "filename": "src/scheduler.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3a9665abb3c1dfaf7075c65dc85690de551690a/src/scheduler.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3a9665abb3c1dfaf7075c65dc85690de551690a/src/scheduler.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/scheduler.cpp?ref=f3a9665abb3c1dfaf7075c65dc85690de551690a",
        "patch": "@@ -148,7 +148,7 @@ bool CScheduler::AreThreadsServicingQueue() const {\n \n void SingleThreadedSchedulerClient::MaybeScheduleProcessQueue() {\n     {\n-        LOCK(m_cs_callbacks_pending);\n+        LOCK(cs_callbacks_pending);\n         // Try to avoid scheduling too many copies here, but if we\n         // accidentally have two ProcessQueue's scheduled at once its\n         // not a big deal.\n@@ -161,7 +161,7 @@ void SingleThreadedSchedulerClient::MaybeScheduleProcessQueue() {\n void SingleThreadedSchedulerClient::ProcessQueue() {\n     std::function<void (void)> callback;\n     {\n-        LOCK(m_cs_callbacks_pending);\n+        LOCK(cs_callbacks_pending);\n         if (m_are_callbacks_running) return;\n         if (m_callbacks_pending.empty()) return;\n         m_are_callbacks_running = true;\n@@ -177,7 +177,7 @@ void SingleThreadedSchedulerClient::ProcessQueue() {\n         explicit RAIICallbacksRunning(SingleThreadedSchedulerClient* _instance) : instance(_instance) {}\n         ~RAIICallbacksRunning() {\n             {\n-                LOCK(instance->m_cs_callbacks_pending);\n+                LOCK(instance->cs_callbacks_pending);\n                 instance->m_are_callbacks_running = false;\n             }\n             instance->MaybeScheduleProcessQueue();\n@@ -191,7 +191,7 @@ void SingleThreadedSchedulerClient::AddToProcessQueue(std::function<void (void)>\n     assert(m_pscheduler);\n \n     {\n-        LOCK(m_cs_callbacks_pending);\n+        LOCK(cs_callbacks_pending);\n         m_callbacks_pending.emplace_back(std::move(func));\n     }\n     MaybeScheduleProcessQueue();\n@@ -202,7 +202,7 @@ void SingleThreadedSchedulerClient::EmptyQueue() {\n     bool should_continue = true;\n     while (should_continue) {\n         ProcessQueue();\n-        LOCK(m_cs_callbacks_pending);\n+        LOCK(cs_callbacks_pending);\n         should_continue = !m_callbacks_pending.empty();\n     }\n }"
      },
      {
        "sha": "4fea6a8c5d33768ea85371d15a74a704376bf797",
        "filename": "src/scheduler.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3a9665abb3c1dfaf7075c65dc85690de551690a/src/scheduler.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3a9665abb3c1dfaf7075c65dc85690de551690a/src/scheduler.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/scheduler.h?ref=f3a9665abb3c1dfaf7075c65dc85690de551690a",
        "patch": "@@ -94,8 +94,8 @@ class SingleThreadedSchedulerClient {\n private:\n     CScheduler *m_pscheduler;\n \n-    CCriticalSection m_cs_callbacks_pending;\n-    std::list<std::function<void (void)>> m_callbacks_pending GUARDED_BY(m_cs_callbacks_pending);\n+    CCriticalSection cs_callbacks_pending;\n+    std::list<std::function<void (void)>> m_callbacks_pending GUARDED_BY(cs_callbacks_pending);\n     bool m_are_callbacks_running = false;\n \n     void MaybeScheduleProcessQueue();"
      },
      {
        "sha": "71e19659f1140196d738726ece3a73feec363d26",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3a9665abb3c1dfaf7075c65dc85690de551690a/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3a9665abb3c1dfaf7075c65dc85690de551690a/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=f3a9665abb3c1dfaf7075c65dc85690de551690a",
        "patch": "@@ -20,17 +20,17 @@ BOOST_FIXTURE_TEST_SUITE(util_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(util_criticalsection)\n {\n-    CCriticalSection cs;\n+    CCriticalSection cs_test;\n \n     do {\n-        LOCK(cs);\n+        LOCK(cs_test);\n         break;\n \n         BOOST_ERROR(\"break was swallowed!\");\n     } while(0);\n \n     do {\n-        TRY_LOCK(cs, lockTest);\n+        TRY_LOCK(cs_test, lockTest);\n         if (lockTest)\n             break;\n "
      },
      {
        "sha": "a58d2dbc6c124587bab88db1b80ad589dbab9c38",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3a9665abb3c1dfaf7075c65dc85690de551690a/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3a9665abb3c1dfaf7075c65dc85690de551690a/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=f3a9665abb3c1dfaf7075c65dc85690de551690a",
        "patch": "@@ -562,14 +562,14 @@ fs::path GetDefaultDataDir()\n #endif\n }\n \n-static CCriticalSection csPathCached;\n-static fs::path pathCached GUARDED_BY(csPathCached);\n-static fs::path pathCachedNetSpecific GUARDED_BY(csPathCached);\n+static CCriticalSection cs_pathCached;\n+static fs::path pathCached GUARDED_BY(cs_pathCached);\n+static fs::path pathCachedNetSpecific GUARDED_BY(cs_pathCached);\n \n const fs::path &GetDataDir(bool fNetSpecific)\n {\n \n-    LOCK(csPathCached);\n+    LOCK(cs_pathCached);\n \n     fs::path &path = fNetSpecific ? pathCachedNetSpecific : pathCached;\n \n@@ -600,7 +600,7 @@ const fs::path &GetDataDir(bool fNetSpecific)\n \n void ClearDatadirCache()\n {\n-    LOCK(csPathCached);\n+    LOCK(cs_pathCached);\n \n     pathCached = fs::path();\n     pathCachedNetSpecific = fs::path();"
      }
    ]
  },
  {
    "sha": "45c436be3d656c6f9528ee6d6dc42d24f896922e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NWM0MzZiZTNkNjU2YzZmOTUyOGVlNmQ2ZGM0MmQyNGY4OTY5MjJl",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-09-14T09:00:58Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Add comment about fRPCInWarmup/rpcWarmupStatus being GUARDED_BY(cs_rpcWarmup)",
      "tree": {
        "sha": "2b2c1af034b7b3f1a3792cefcbd359c568a97bcf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2b2c1af034b7b3f1a3792cefcbd359c568a97bcf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/45c436be3d656c6f9528ee6d6dc42d24f896922e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45c436be3d656c6f9528ee6d6dc42d24f896922e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/45c436be3d656c6f9528ee6d6dc42d24f896922e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45c436be3d656c6f9528ee6d6dc42d24f896922e/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f3a9665abb3c1dfaf7075c65dc85690de551690a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f3a9665abb3c1dfaf7075c65dc85690de551690a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f3a9665abb3c1dfaf7075c65dc85690de551690a"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "91417410ab545d2ad07e494f477bdaecaf65037e",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45c436be3d656c6f9528ee6d6dc42d24f896922e/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45c436be3d656c6f9528ee6d6dc42d24f896922e/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=45c436be3d656c6f9528ee6d6dc42d24f896922e",
        "patch": "@@ -25,10 +25,10 @@\n #include <memory> // for unique_ptr\n #include <unordered_map>\n \n-static bool fRPCRunning = false;\n-static bool fRPCInWarmup = true;\n-static std::string rpcWarmupStatus(\"RPC server started\");\n static CCriticalSection cs_rpcWarmup;\n+static bool fRPCRunning = false;\n+static bool fRPCInWarmup = true; // GUARDED_BY(cs_rpcWarmup)\n+static std::string rpcWarmupStatus(\"RPC server started\"); // GUARDED_BY(cs_rpcWarmup)\n /* Timer-creating functions */\n static RPCTimerInterface* timerInterface = nullptr;\n /* Map of name to timer. */"
      }
    ]
  },
  {
    "sha": "64f012bb01f99098f2a50e806ed7b9f06c964da0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NGYwMTJiYjAxZjk5MDk4ZjJhNTBlODA2ZWQ3YjlmMDZjOTY0ZGEw",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-09-14T09:02:12Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Add GUARDED_BY(cs_nTimeOffset) annotation.",
      "tree": {
        "sha": "e44d588c73f771479354f5162251f5d06a250861",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e44d588c73f771479354f5162251f5d06a250861"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/64f012bb01f99098f2a50e806ed7b9f06c964da0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/64f012bb01f99098f2a50e806ed7b9f06c964da0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/64f012bb01f99098f2a50e806ed7b9f06c964da0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/64f012bb01f99098f2a50e806ed7b9f06c964da0/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "45c436be3d656c6f9528ee6d6dc42d24f896922e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45c436be3d656c6f9528ee6d6dc42d24f896922e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/45c436be3d656c6f9528ee6d6dc42d24f896922e"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "754c5a70dd1c8211d467eaa7d9a58b843f5dc34f",
        "filename": "src/timedata.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64f012bb01f99098f2a50e806ed7b9f06c964da0/src/timedata.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64f012bb01f99098f2a50e806ed7b9f06c964da0/src/timedata.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/timedata.cpp?ref=64f012bb01f99098f2a50e806ed7b9f06c964da0",
        "patch": "@@ -17,7 +17,7 @@\n \n \n static CCriticalSection cs_nTimeOffset;\n-static int64_t nTimeOffset = 0;\n+static int64_t nTimeOffset GUARDED_BY(cs_nTimeOffset) = 0;\n \n /**\n  * \"Never go to sea with two chronometers; take one or three.\""
      }
    ]
  },
  {
    "sha": "3a5cf6c452aaf7be30fc3c558518488c93656d84",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYTVjZjZjNDUyYWFmN2JlMzBmYzNjNTU4NTE4NDg4YzkzNjU2ZDg0",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-09-14T10:08:04Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Add GUARDED_BY(cs_LastBlockFile) annotation. Add EXCLUSIVE_LOCKS_REQUIRED(cs_LastBlockFile) annotation.",
      "tree": {
        "sha": "8ab31876f2149e0c07e8a9a6ae68040044dba55c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8ab31876f2149e0c07e8a9a6ae68040044dba55c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3a5cf6c452aaf7be30fc3c558518488c93656d84",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a5cf6c452aaf7be30fc3c558518488c93656d84",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3a5cf6c452aaf7be30fc3c558518488c93656d84",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a5cf6c452aaf7be30fc3c558518488c93656d84/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "64f012bb01f99098f2a50e806ed7b9f06c964da0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/64f012bb01f99098f2a50e806ed7b9f06c964da0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/64f012bb01f99098f2a50e806ed7b9f06c964da0"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "fb277ac0925033512af781d2fec291a12f3735d9",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3a5cf6c452aaf7be30fc3c558518488c93656d84/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3a5cf6c452aaf7be30fc3c558518488c93656d84/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=3a5cf6c452aaf7be30fc3c558518488c93656d84",
        "patch": "@@ -137,7 +137,7 @@ namespace {\n \n     CCriticalSection cs_LastBlockFile;\n     std::vector<CBlockFileInfo> vinfoBlockFile;\n-    int nLastBlockFile = 0; // GUARDED_BY(cs_LastBlockFile)\n+    int nLastBlockFile GUARDED_BY(cs_LastBlockFile) = 0;\n     /** Global flag to indicate we should check to see if there are\n      *  block/undo files that should be deleted.  Set on startup\n      *  or if we allocate more file space when we're in prune mode\n@@ -3963,7 +3963,7 @@ bool RewindBlockIndex(const CChainParams& params)\n // May NOT be used after any connections are up as much\n // of the peer-processing logic assumes a consistent\n // block index state\n-void UnloadBlockIndex()\n+void UnloadBlockIndex() EXCLUSIVE_LOCKS_REQUIRED(cs_LastBlockFile)\n {\n     LOCK(cs_main);\n     setBlockIndexCandidates.clear();"
      }
    ]
  },
  {
    "sha": "01ab138b80cd7bdc610658f3093f64f19b9044d9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMWFiMTM4YjgwY2Q3YmRjNjEwNjU4ZjMwOTNmNjRmMTliOTA0NGQ5",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-09-14T10:09:44Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Add GUARDED_BY(cs_nBlockSequenceId) annotation. Add EXCLUSIVE_LOCKS_REQUIRED(cs_nBlockSequenceId) annotation.",
      "tree": {
        "sha": "11937104d2741aecaf5b91642170af7ab17f9e16",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/11937104d2741aecaf5b91642170af7ab17f9e16"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/01ab138b80cd7bdc610658f3093f64f19b9044d9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01ab138b80cd7bdc610658f3093f64f19b9044d9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/01ab138b80cd7bdc610658f3093f64f19b9044d9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01ab138b80cd7bdc610658f3093f64f19b9044d9/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3a5cf6c452aaf7be30fc3c558518488c93656d84",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a5cf6c452aaf7be30fc3c558518488c93656d84",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3a5cf6c452aaf7be30fc3c558518488c93656d84"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "f3d890eb69bf9788aa2ba8b31a4981203c9513f8",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/01ab138b80cd7bdc610658f3093f64f19b9044d9/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/01ab138b80cd7bdc610658f3093f64f19b9044d9/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=01ab138b80cd7bdc610658f3093f64f19b9044d9",
        "patch": "@@ -150,7 +150,7 @@ namespace {\n      */\n     CCriticalSection cs_nBlockSequenceId;\n     /** Blocks loaded from disk are assigned id 0, so start the counter at 1. */\n-    int32_t nBlockSequenceId = 1;\n+    int32_t nBlockSequenceId GUARDED_BY(cs_nBlockSequenceId) = 1;\n     /** Decreasing counter (used by subsequent preciousblock calls). */\n     int32_t nBlockReverseSequenceId = -1;\n     /** chainwork for the last block that preciousblock has been applied to. */\n@@ -3963,7 +3963,7 @@ bool RewindBlockIndex(const CChainParams& params)\n // May NOT be used after any connections are up as much\n // of the peer-processing logic assumes a consistent\n // block index state\n-void UnloadBlockIndex() EXCLUSIVE_LOCKS_REQUIRED(cs_LastBlockFile)\n+void UnloadBlockIndex() EXCLUSIVE_LOCKS_REQUIRED(cs_LastBlockFile, cs_nBlockSequenceId)\n {\n     LOCK(cs_main);\n     setBlockIndexCandidates.clear();"
      }
    ]
  },
  {
    "sha": "5b39f27ac7bc23766b59f2ec95da46aa5e42b951",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YjM5ZjI3YWM3YmMyMzc2NmI1OWYyZWM5NWRhNDZhYTVlNDJiOTUx",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-09-14T10:11:35Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Add GUARDED_BY(cs_rpcWarmup) annotation.",
      "tree": {
        "sha": "c89c5ed416394d9c2d7ed566de2984728ced3497",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c89c5ed416394d9c2d7ed566de2984728ced3497"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5b39f27ac7bc23766b59f2ec95da46aa5e42b951",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b39f27ac7bc23766b59f2ec95da46aa5e42b951",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5b39f27ac7bc23766b59f2ec95da46aa5e42b951",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b39f27ac7bc23766b59f2ec95da46aa5e42b951/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "01ab138b80cd7bdc610658f3093f64f19b9044d9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01ab138b80cd7bdc610658f3093f64f19b9044d9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/01ab138b80cd7bdc610658f3093f64f19b9044d9"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "c2cf5a56b01b5c583cb816494319e98e86a6eabc",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b39f27ac7bc23766b59f2ec95da46aa5e42b951/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b39f27ac7bc23766b59f2ec95da46aa5e42b951/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=5b39f27ac7bc23766b59f2ec95da46aa5e42b951",
        "patch": "@@ -27,8 +27,8 @@\n \n static CCriticalSection cs_rpcWarmup;\n static bool fRPCRunning = false;\n-static bool fRPCInWarmup = true; // GUARDED_BY(cs_rpcWarmup)\n-static std::string rpcWarmupStatus(\"RPC server started\"); // GUARDED_BY(cs_rpcWarmup)\n+static bool fRPCInWarmup GUARDED_BY(cs_rpcWarmup) = true;\n+static std::string rpcWarmupStatus GUARDED_BY(cs_rpcWarmup) = \"RPC server started\";\n /* Timer-creating functions */\n static RPCTimerInterface* timerInterface = nullptr;\n /* Map of name to timer. */"
      }
    ]
  },
  {
    "sha": "fe7be0bc1334f4eee528b93f7d3234fbdefdd97e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZTdiZTBiYzEzMzRmNGVlZTUyOGI5M2Y3ZDMyMzRmYmRlZmRkOTdl",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-09-14T11:34:41Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Add GUARDED_BY(cs_wallet) annotation for nWalletVersion/nWalletMaxVersion",
      "tree": {
        "sha": "cefc3cefcfa41e066d0b9eb454f42c3f69cf3cc4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cefc3cefcfa41e066d0b9eb454f42c3f69cf3cc4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fe7be0bc1334f4eee528b93f7d3234fbdefdd97e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe7be0bc1334f4eee528b93f7d3234fbdefdd97e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fe7be0bc1334f4eee528b93f7d3234fbdefdd97e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe7be0bc1334f4eee528b93f7d3234fbdefdd97e/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5b39f27ac7bc23766b59f2ec95da46aa5e42b951",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b39f27ac7bc23766b59f2ec95da46aa5e42b951",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5b39f27ac7bc23766b59f2ec95da46aa5e42b951"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "ddf3488aa6715c510f14d2676c8581c92cceabec",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe7be0bc1334f4eee528b93f7d3234fbdefdd97e/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe7be0bc1334f4eee528b93f7d3234fbdefdd97e/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=fe7be0bc1334f4eee528b93f7d3234fbdefdd97e",
        "patch": "@@ -667,10 +667,10 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     CWalletDB *pwalletdbEncryption;\n \n     //! the current wallet version: clients below this version are not able to load the wallet\n-    int nWalletVersion; // GUARDED_BY(cs_wallet)\n+    int nWalletVersion GUARDED_BY(cs_wallet);\n \n     //! the maximum wallet format version: memory-only variable that specifies to what version this wallet may be upgraded\n-    int nWalletMaxVersion; // GUARDED_BY(cs_wallet)\n+    int nWalletMaxVersion GUARDED_BY(cs_wallet);\n \n     int64_t nNextResend;\n     int64_t nLastResend;"
      }
    ]
  },
  {
    "sha": "0e1f2cb1333552a601cf91b82e696f324557a98b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZTFmMmNiMTMzMzU1MmE2MDFjZjkxYjgyZTY5NmYzMjQ1NTdhOThi",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-09-14T12:34:11Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Add GUARDED_BY(cs_main) annotation",
      "tree": {
        "sha": "c725975bf897a7d54e16e405e80483139fedbfa6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c725975bf897a7d54e16e405e80483139fedbfa6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0e1f2cb1333552a601cf91b82e696f324557a98b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0e1f2cb1333552a601cf91b82e696f324557a98b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0e1f2cb1333552a601cf91b82e696f324557a98b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0e1f2cb1333552a601cf91b82e696f324557a98b/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fe7be0bc1334f4eee528b93f7d3234fbdefdd97e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe7be0bc1334f4eee528b93f7d3234fbdefdd97e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fe7be0bc1334f4eee528b93f7d3234fbdefdd97e"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 6,
      "deletions": 6
    },
    "files": [
      {
        "sha": "5a41fedab1c6f0921b079fc0d038339ece88e7b7",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0e1f2cb1333552a601cf91b82e696f324557a98b/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0e1f2cb1333552a601cf91b82e696f324557a98b/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=0e1f2cb1333552a601cf91b82e696f324557a98b",
        "patch": "@@ -104,8 +104,8 @@ namespace {\n      *\n      * Memory used: 1.3 MB\n      */\n-    std::unique_ptr<CRollingBloomFilter> recentRejects;\n-    uint256 hashRecentRejectsChainTip;\n+    std::unique_ptr<CRollingBloomFilter> recentRejects GUARDED_BY(cs_main);\n+    uint256 hashRecentRejectsChainTip GUARDED_BY(cs_main);\n \n     /** Blocks that are in flight, and that are in the queue to be downloaded. Protected by cs_main. */\n     struct QueuedBlock {\n@@ -133,9 +133,9 @@ namespace {\n \n     /** Relay map, protected by cs_main. */\n     typedef std::map<uint256, CTransactionRef> MapRelay;\n-    MapRelay mapRelay;\n+    MapRelay mapRelay GUARDED_BY(cs_main);\n     /** Expiration-time ordered list of (expire time, relay map entry) pairs, protected by cs_main). */\n-    std::deque<std::pair<int64_t, MapRelay::iterator>> vRelayExpiration;\n+    std::deque<std::pair<int64_t, MapRelay::iterator>> vRelayExpiration GUARDED_BY(cs_main);\n } // namespace\n \n namespace {"
      },
      {
        "sha": "8c3a29397ae2d425b5642f2c79683189e09a10b7",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0e1f2cb1333552a601cf91b82e696f324557a98b/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0e1f2cb1333552a601cf91b82e696f324557a98b/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=0e1f2cb1333552a601cf91b82e696f324557a98b",
        "patch": "@@ -1568,7 +1568,7 @@ void ThreadScriptCheck() {\n }\n \n // Protected by cs_main\n-VersionBitsCache versionbitscache;\n+VersionBitsCache versionbitscache GUARDED_BY(cs_main);\n \n int32_t ComputeBlockVersion(const CBlockIndex* pindexPrev, const Consensus::Params& params)\n {\n@@ -1610,7 +1610,7 @@ class WarningBitsConditionChecker : public AbstractThresholdConditionChecker\n };\n \n // Protected by cs_main\n-static ThresholdConditionCache warningcache[VERSIONBITS_NUM_BITS];\n+static ThresholdConditionCache warningcache[VERSIONBITS_NUM_BITS] GUARDED_BY(cs_main);\n \n static unsigned int GetBlockScriptFlags(const CBlockIndex* pindex, const Consensus::Params& consensusparams) {\n     AssertLockHeld(cs_main);"
      }
    ]
  },
  {
    "sha": "2e421e231408ff76a4dfacda2c3a2444bbf49922",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZTQyMWUyMzE0MDhmZjc2YTRkZmFjZGEyYzNhMjQ0NGJiZjQ5OTIy",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-09-14T12:53:47Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Add PT_GUARDED_BY(cs_main) annotation",
      "tree": {
        "sha": "aa72bfcc95816860168f9064658ced23c282dfc9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/aa72bfcc95816860168f9064658ced23c282dfc9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2e421e231408ff76a4dfacda2c3a2444bbf49922",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2e421e231408ff76a4dfacda2c3a2444bbf49922",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2e421e231408ff76a4dfacda2c3a2444bbf49922",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2e421e231408ff76a4dfacda2c3a2444bbf49922/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0e1f2cb1333552a601cf91b82e696f324557a98b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0e1f2cb1333552a601cf91b82e696f324557a98b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0e1f2cb1333552a601cf91b82e696f324557a98b"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "e8e51daf53b7317b9e5b94e58323cca15e82b679",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2e421e231408ff76a4dfacda2c3a2444bbf49922/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2e421e231408ff76a4dfacda2c3a2444bbf49922/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=2e421e231408ff76a4dfacda2c3a2444bbf49922",
        "patch": "@@ -444,7 +444,7 @@ bool ResetBlockFailureFlags(CBlockIndex *pindex);\n extern CChain chainActive;\n \n /** Global variable that points to the coins database (protected by cs_main) */\n-extern std::unique_ptr<CCoinsViewDB> pcoinsdbview;\n+extern std::unique_ptr<CCoinsViewDB> pcoinsdbview PT_GUARDED_BY(cs_main);\n \n /** Global variable that points to the active CCoinsView (protected by cs_main) */\n extern std::unique_ptr<CCoinsViewCache> pcoinsTip;"
      }
    ]
  },
  {
    "sha": "b8522130404c8f0dcc5e8dbd0bb86e6681225e4c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiODUyMjEzMDQwNGM4ZjBkY2M1ZThkYmQwYmI4NmU2NjgxMjI1ZTRj",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-09-14T13:14:01Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Add PT_GUARDED_BY(cs_main). Add EXCLUSIVE_LOCKS_REQUIRED(cs_main). cs_main is guarding *pcoinsTip.",
      "tree": {
        "sha": "a718de047c3d9fc5260f52a4055b4d8db88f3c9a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a718de047c3d9fc5260f52a4055b4d8db88f3c9a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b8522130404c8f0dcc5e8dbd0bb86e6681225e4c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b8522130404c8f0dcc5e8dbd0bb86e6681225e4c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b8522130404c8f0dcc5e8dbd0bb86e6681225e4c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b8522130404c8f0dcc5e8dbd0bb86e6681225e4c/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2e421e231408ff76a4dfacda2c3a2444bbf49922",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2e421e231408ff76a4dfacda2c3a2444bbf49922",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2e421e231408ff76a4dfacda2c3a2444bbf49922"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 14,
      "deletions": 14
    },
    "files": [
      {
        "sha": "f4a61f6aad536f81eae66557a376cc3ea4de268f",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b8522130404c8f0dcc5e8dbd0bb86e6681225e4c/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b8522130404c8f0dcc5e8dbd0bb86e6681225e4c/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=b8522130404c8f0dcc5e8dbd0bb86e6681225e4c",
        "patch": "@@ -344,7 +344,7 @@ bool CheckSequenceLocks(const CTransaction &tx, int flags, LockPoints* lp, bool\n // Returns the script flags which should be checked for a given block\n static unsigned int GetBlockScriptFlags(const CBlockIndex* pindex, const Consensus::Params& chainparams);\n \n-static void LimitMempoolSize(CTxMemPool& pool, size_t limit, unsigned long age) {\n+static void LimitMempoolSize(CTxMemPool& pool, size_t limit, unsigned long age) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n     int expired = pool.Expire(GetTime() - age);\n     if (expired != 0) {\n         LogPrint(BCLog::MEMPOOL, \"Expired %i transactions from the memory pool\\n\", expired);\n@@ -390,7 +390,7 @@ static bool IsCurrentForFeeEstimation()\n  * and instead just erase from the mempool as needed.\n  */\n \n-void UpdateMempoolForReorg(DisconnectedBlockTransactions &disconnectpool, bool fAddToMempool)\n+void UpdateMempoolForReorg(DisconnectedBlockTransactions &disconnectpool, bool fAddToMempool) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     AssertLockHeld(cs_main);\n     std::vector<uint256> vHashUpdate;\n@@ -432,7 +432,7 @@ void UpdateMempoolForReorg(DisconnectedBlockTransactions &disconnectpool, bool f\n // Used to avoid mempool polluting consensus critical paths if CCoinsViewMempool\n // were somehow broken and returning the wrong scriptPubKeys\n static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, CValidationState &state, const CCoinsViewCache &view, CTxMemPool& pool,\n-                 unsigned int flags, bool cacheSigStore, PrecomputedTransactionData& txdata) {\n+                                           unsigned int flags, bool cacheSigStore, PrecomputedTransactionData& txdata) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n     AssertLockHeld(cs_main);\n \n     // pool.cs_txMemPool should be locked already, but go ahead and re-take the lock here\n@@ -467,7 +467,7 @@ static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, CValidationSt\n \n static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool& pool, CValidationState& state, const CTransactionRef& ptx,\n                               bool* pfMissingInputs, int64_t nAcceptTime, std::list<CTransactionRef>* plTxnReplaced,\n-                              bool bypass_limits, const CAmount& nAbsurdFee, std::vector<COutPoint>& coins_to_uncache)\n+                              bool bypass_limits, const CAmount& nAbsurdFee, std::vector<COutPoint>& coins_to_uncache) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     const CTransaction& tx = *ptx;\n     const uint256 hash = tx.GetHash();\n@@ -903,8 +903,8 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n \n /** (try to) add transaction to memory pool with a specified acceptance time **/\n static bool AcceptToMemoryPoolWithTime(const CChainParams& chainparams, CTxMemPool& pool, CValidationState &state, const CTransactionRef &tx,\n-                        bool* pfMissingInputs, int64_t nAcceptTime, std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, const CAmount nAbsurdFee)\n+                                       bool* pfMissingInputs, int64_t nAcceptTime, std::list<CTransactionRef>* plTxnReplaced,\n+                                       bool bypass_limits, const CAmount nAbsurdFee) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     std::vector<COutPoint> coins_to_uncache;\n     bool res = AcceptToMemoryPoolWorker(chainparams, pool, state, tx, pfMissingInputs, nAcceptTime, plTxnReplaced, bypass_limits, nAbsurdFee, coins_to_uncache);\n@@ -920,7 +920,7 @@ static bool AcceptToMemoryPoolWithTime(const CChainParams& chainparams, CTxMemPo\n \n bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransactionRef &tx,\n                         bool* pfMissingInputs, std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, const CAmount nAbsurdFee)\n+                        bool bypass_limits, const CAmount nAbsurdFee) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     const CChainParams& chainparams = Params();\n     return AcceptToMemoryPoolWithTime(chainparams, pool, state, tx, pfMissingInputs, GetTime(), plTxnReplaced, bypass_limits, nAbsurdFee);\n@@ -2049,7 +2049,7 @@ static void DoWarning(const std::string& strWarning)\n }\n \n /** Update chainActive and related internal data structures. */\n-void static UpdateTip(CBlockIndex *pindexNew, const CChainParams& chainParams) {\n+void static UpdateTip(CBlockIndex *pindexNew, const CChainParams& chainParams) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n     chainActive.SetTip(pindexNew);\n \n     // New best block\n@@ -2112,7 +2112,7 @@ void static UpdateTip(CBlockIndex *pindexNew, const CChainParams& chainParams) {\n   * disconnectpool (note that the caller is responsible for mempool consistency\n   * in any case).\n   */\n-bool static DisconnectTip(CValidationState& state, const CChainParams& chainparams, DisconnectedBlockTransactions *disconnectpool)\n+bool static DisconnectTip(CValidationState& state, const CChainParams& chainparams, DisconnectedBlockTransactions *disconnectpool) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     CBlockIndex *pindexDelete = chainActive.Tip();\n     assert(pindexDelete);\n@@ -2234,7 +2234,7 @@ class ConnectTrace {\n  *\n  * The block is added to connectTrace if connection succeeds.\n  */\n-bool static ConnectTip(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexNew, const std::shared_ptr<const CBlock>& pblock, ConnectTrace& connectTrace, DisconnectedBlockTransactions &disconnectpool)\n+bool static ConnectTip(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexNew, const std::shared_ptr<const CBlock>& pblock, ConnectTrace& connectTrace, DisconnectedBlockTransactions &disconnectpool) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     assert(pindexNew->pprev == chainActive.Tip());\n     // Read block from disk.\n@@ -2362,7 +2362,7 @@ static void PruneBlockIndexCandidates() {\n  * Try to make some progress towards making pindexMostWork the active block.\n  * pblock is either nullptr or a pointer to a CBlock corresponding to pindexMostWork.\n  */\n-static bool ActivateBestChainStep(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexMostWork, const std::shared_ptr<const CBlock>& pblock, bool& fInvalidFound, ConnectTrace& connectTrace)\n+static bool ActivateBestChainStep(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexMostWork, const std::shared_ptr<const CBlock>& pblock, bool& fInvalidFound, ConnectTrace& connectTrace) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     AssertLockHeld(cs_main);\n     const CBlockIndex *pindexOldTip = chainActive.Tip();\n@@ -2570,7 +2570,7 @@ bool PreciousBlock(CValidationState& state, const CChainParams& params, CBlockIn\n     return ActivateBestChain(state, params);\n }\n \n-bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex *pindex)\n+bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex *pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     AssertLockHeld(cs_main);\n \n@@ -3647,7 +3647,7 @@ bool static LoadBlockIndexDB(const CChainParams& chainparams) EXCLUSIVE_LOCKS_RE\n     return true;\n }\n \n-bool LoadChainTip(const CChainParams& chainparams)\n+bool LoadChainTip(const CChainParams& chainparams) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     LOCK(cs_main);\n     if (chainActive.Tip() && chainActive.Tip()->GetBlockHash() == pcoinsTip->GetBestBlock()) return true;"
      },
      {
        "sha": "38f1b3077cde240f5e4c180380cc45d3da8c565a",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b8522130404c8f0dcc5e8dbd0bb86e6681225e4c/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b8522130404c8f0dcc5e8dbd0bb86e6681225e4c/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=b8522130404c8f0dcc5e8dbd0bb86e6681225e4c",
        "patch": "@@ -447,7 +447,7 @@ extern CChain chainActive;\n extern std::unique_ptr<CCoinsViewDB> pcoinsdbview PT_GUARDED_BY(cs_main);\n \n /** Global variable that points to the active CCoinsView (protected by cs_main) */\n-extern std::unique_ptr<CCoinsViewCache> pcoinsTip;\n+extern std::unique_ptr<CCoinsViewCache> pcoinsTip PT_GUARDED_BY(cs_main);\n \n /** Global variable that points to the active block tree (protected by cs_main) */\n extern std::unique_ptr<CBlockTreeDB> pblocktree;"
      }
    ]
  },
  {
    "sha": "0845e5da22b3084ecfad726b97b18dd2007e7c44",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowODQ1ZTVkYTIyYjMwODRlY2ZhZDcyNmI5N2IxOGRkMjAwN2U3YzQ0",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-09-14T13:53:23Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Add PT_GUARDED_BY(cs_main). Add EXCLUSIVE_LOCKS_REQUIRED(cs_main). cs_main is guarding *pblocktree.",
      "tree": {
        "sha": "e357b0a1019633f1e5a3ecdc5fa1f85ac23199c2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e357b0a1019633f1e5a3ecdc5fa1f85ac23199c2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0845e5da22b3084ecfad726b97b18dd2007e7c44",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0845e5da22b3084ecfad726b97b18dd2007e7c44",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0845e5da22b3084ecfad726b97b18dd2007e7c44",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0845e5da22b3084ecfad726b97b18dd2007e7c44/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b8522130404c8f0dcc5e8dbd0bb86e6681225e4c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b8522130404c8f0dcc5e8dbd0bb86e6681225e4c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b8522130404c8f0dcc5e8dbd0bb86e6681225e4c"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "03ef047b595b5d203bbcc7eb03af425a05b63b28",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0845e5da22b3084ecfad726b97b18dd2007e7c44/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0845e5da22b3084ecfad726b97b18dd2007e7c44/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=0845e5da22b3084ecfad726b97b18dd2007e7c44",
        "patch": "@@ -1661,7 +1661,7 @@ static int64_t nBlocksTotal = 0;\n  *  Validity checks that depend on the UTXO set are also done; ConnectBlock()\n  *  can fail if those validity checks fail (among other reasons). */\n static bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pindex,\n-                  CCoinsViewCache& view, const CChainParams& chainparams, bool fJustCheck = false)\n+                         CCoinsViewCache& view, const CChainParams& chainparams, bool fJustCheck = false) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     AssertLockHeld(cs_main);\n     assert(pindex);\n@@ -3302,7 +3302,7 @@ bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<cons\n     return true;\n }\n \n-bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams, const CBlock& block, CBlockIndex* pindexPrev, bool fCheckPOW, bool fCheckMerkleRoot)\n+bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams, const CBlock& block, CBlockIndex* pindexPrev, bool fCheckPOW, bool fCheckMerkleRoot) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     AssertLockHeld(cs_main);\n     assert(pindexPrev && pindexPrev == chainActive.Tip());\n@@ -3544,7 +3544,7 @@ CBlockIndex * InsertBlockIndex(uint256 hash)\n     return pindexNew;\n }\n \n-bool static LoadBlockIndexDB(const CChainParams& chainparams) EXCLUSIVE_LOCKS_REQUIRED(cs_LastBlockFile)\n+bool static LoadBlockIndexDB(const CChainParams& chainparams) EXCLUSIVE_LOCKS_REQUIRED(cs_main, cs_LastBlockFile)\n {\n     LOCK(cs_main);\n     if (!pblocktree->LoadBlockIndexGuts(chainparams.GetConsensus(), InsertBlockIndex))\n@@ -3996,7 +3996,7 @@ void UnloadBlockIndex() EXCLUSIVE_LOCKS_REQUIRED(cs_LastBlockFile, cs_nBlockSequ\n     fHavePruned = false;\n }\n \n-bool LoadBlockIndex(const CChainParams& chainparams) EXCLUSIVE_LOCKS_REQUIRED(cs_LastBlockFile)\n+bool LoadBlockIndex(const CChainParams& chainparams) EXCLUSIVE_LOCKS_REQUIRED(cs_LastBlockFile, cs_main)\n {\n     // Load block index from databases\n     bool needs_init = fReindex;"
      },
      {
        "sha": "60d4c476a0a9d52b0c146df8fae1152da9beecec",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0845e5da22b3084ecfad726b97b18dd2007e7c44/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0845e5da22b3084ecfad726b97b18dd2007e7c44/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=0845e5da22b3084ecfad726b97b18dd2007e7c44",
        "patch": "@@ -450,7 +450,7 @@ extern std::unique_ptr<CCoinsViewDB> pcoinsdbview PT_GUARDED_BY(cs_main);\n extern std::unique_ptr<CCoinsViewCache> pcoinsTip PT_GUARDED_BY(cs_main);\n \n /** Global variable that points to the active block tree (protected by cs_main) */\n-extern std::unique_ptr<CBlockTreeDB> pblocktree;\n+extern std::unique_ptr<CBlockTreeDB> pblocktree PT_GUARDED_BY(cs_main);\n \n /**\n  * Return the spend height, which is one more than the inputs.GetBestBlock()."
      }
    ]
  },
  {
    "sha": "e1d589b4f816e849a769a13b628ef6e1752ed10e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMWQ1ODliNGY4MTZlODQ5YTc2OWExM2I2MjhlZjZlMTc1MmVkMTBl",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-09-14T17:37:55Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Add LOCK(cs_main) where accessing chainActive",
      "tree": {
        "sha": "806137e2069bb30b0e24ebba600f11d1854b6254",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/806137e2069bb30b0e24ebba600f11d1854b6254"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e1d589b4f816e849a769a13b628ef6e1752ed10e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e1d589b4f816e849a769a13b628ef6e1752ed10e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e1d589b4f816e849a769a13b628ef6e1752ed10e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e1d589b4f816e849a769a13b628ef6e1752ed10e/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0845e5da22b3084ecfad726b97b18dd2007e7c44",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0845e5da22b3084ecfad726b97b18dd2007e7c44",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0845e5da22b3084ecfad726b97b18dd2007e7c44"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 26,
      "deletions": 10
    },
    "files": [
      {
        "sha": "f71879b9eef82c5fb4b40ec1401daa814021b06d",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 4,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1d589b4f816e849a769a13b628ef6e1752ed10e/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1d589b4f816e849a769a13b628ef6e1752ed10e/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=e1d589b4f816e849a769a13b628ef6e1752ed10e",
        "patch": "@@ -517,7 +517,10 @@ static bool rest_getutxos(HTTPRequest* req, const std::string& strURIPart)\n         // serialize data\n         // use exact same output as mentioned in Bip64\n         CDataStream ssGetUTXOResponse(SER_NETWORK, PROTOCOL_VERSION);\n-        ssGetUTXOResponse << chainActive.Height() << chainActive.Tip()->GetBlockHash() << bitmap << outs;\n+        {\n+            LOCK(cs_main);\n+            ssGetUTXOResponse << chainActive.Height() << chainActive.Tip()->GetBlockHash() << bitmap << outs;\n+        }\n         std::string ssGetUTXOResponseString = ssGetUTXOResponse.str();\n \n         req->WriteHeader(\"Content-Type\", \"application/octet-stream\");\n@@ -527,7 +530,10 @@ static bool rest_getutxos(HTTPRequest* req, const std::string& strURIPart)\n \n     case RF_HEX: {\n         CDataStream ssGetUTXOResponse(SER_NETWORK, PROTOCOL_VERSION);\n-        ssGetUTXOResponse << chainActive.Height() << chainActive.Tip()->GetBlockHash() << bitmap << outs;\n+        {\n+            LOCK(cs_main);\n+            ssGetUTXOResponse << chainActive.Height() << chainActive.Tip()->GetBlockHash() << bitmap << outs;\n+        }\n         std::string strHex = HexStr(ssGetUTXOResponse.begin(), ssGetUTXOResponse.end()) + \"\\n\";\n \n         req->WriteHeader(\"Content-Type\", \"text/plain\");\n@@ -540,8 +546,11 @@ static bool rest_getutxos(HTTPRequest* req, const std::string& strURIPart)\n \n         // pack in some essentials\n         // use more or less the same output as mentioned in Bip64\n-        objGetUTXOResponse.push_back(Pair(\"chainHeight\", chainActive.Height()));\n-        objGetUTXOResponse.push_back(Pair(\"chaintipHash\", chainActive.Tip()->GetBlockHash().GetHex()));\n+        {\n+            LOCK(cs_main);\n+            objGetUTXOResponse.push_back(Pair(\"chainHeight\", chainActive.Height()));\n+            objGetUTXOResponse.push_back(Pair(\"chaintipHash\", chainActive.Tip()->GetBlockHash().GetHex()));\n+        }\n         objGetUTXOResponse.push_back(Pair(\"bitmap\", bitmapStringRepresentation));\n \n         UniValue utxos(UniValue::VARR);"
      },
      {
        "sha": "bc809e741d13794dafbb8168ba6bc09b58496021",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1d589b4f816e849a769a13b628ef6e1752ed10e/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1d589b4f816e849a769a13b628ef6e1752ed10e/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=e1d589b4f816e849a769a13b628ef6e1752ed10e",
        "patch": "@@ -2727,8 +2727,11 @@ static bool ReceivedBlockTransactions(const CBlock &block, CValidationState& sta\n                 LOCK(cs_nBlockSequenceId);\n                 pindex->nSequenceId = nBlockSequenceId++;\n             }\n-            if (chainActive.Tip() == nullptr || !setBlockIndexCandidates.value_comp()(pindex, chainActive.Tip())) {\n-                setBlockIndexCandidates.insert(pindex);\n+            {\n+                LOCK(cs_main);\n+                if (chainActive.Tip() == nullptr || !setBlockIndexCandidates.value_comp()(pindex, chainActive.Tip())) {\n+                    setBlockIndexCandidates.insert(pindex);\n+                }\n             }\n             std::pair<std::multimap<CBlockIndex*, CBlockIndex*>::iterator, std::multimap<CBlockIndex*, CBlockIndex*>::iterator> range = mapBlocksUnlinked.equal_range(pindex);\n             while (range.first != range.second) {"
      },
      {
        "sha": "68c11449307dfc507db078ff027eb294121e6f15",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 4,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1d589b4f816e849a769a13b628ef6e1752ed10e/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1d589b4f816e849a769a13b628ef6e1752ed10e/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=e1d589b4f816e849a769a13b628ef6e1752ed10e",
        "patch": "@@ -2689,16 +2689,20 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n     // enough, that fee sniping isn't a problem yet, but by implementing a fix\n     // now we ensure code won't be written that makes assumptions about\n     // nLockTime that preclude a fix later.\n-    txNew.nLockTime = chainActive.Height();\n-\n+    {\n+        LOCK(cs_main);\n+        txNew.nLockTime = chainActive.Height();\n+    }\n     // Secondly occasionally randomly pick a nLockTime even further back, so\n     // that transactions that are delayed after signing for whatever reason,\n     // e.g. high-latency mix networks and some CoinJoin implementations, have\n     // better privacy.\n     if (GetRandInt(10) == 0)\n         txNew.nLockTime = std::max(0, (int)txNew.nLockTime - GetRandInt(100));\n-\n-    assert(txNew.nLockTime <= (unsigned int)chainActive.Height());\n+    {\n+        LOCK(cs_main);\n+        assert(txNew.nLockTime <= (unsigned int)chainActive.Height());\n+    }\n     assert(txNew.nLockTime < LOCKTIME_THRESHOLD);\n     FeeCalculation feeCalc;\n     CAmount nFeeNeeded;"
      }
    ]
  },
  {
    "sha": "9f95edba43a770dda6490738762a82c7749af09f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5Zjk1ZWRiYTQzYTc3MGRkYTY0OTA3Mzg3NjJhODJjNzc0OWFmMDlm",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-09-14T17:39:42Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Add PT_GUARDED_BY(cs_main). Add EXCLUSIVE_LOCKS_REQUIRED(cs_main). cs_main is guarding chainActive.",
      "tree": {
        "sha": "f32c6bde2b28685cd4584a6520d620a02784f675",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f32c6bde2b28685cd4584a6520d620a02784f675"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9f95edba43a770dda6490738762a82c7749af09f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9f95edba43a770dda6490738762a82c7749af09f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9f95edba43a770dda6490738762a82c7749af09f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9f95edba43a770dda6490738762a82c7749af09f/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e1d589b4f816e849a769a13b628ef6e1752ed10e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e1d589b4f816e849a769a13b628ef6e1752ed10e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e1d589b4f816e849a769a13b628ef6e1752ed10e"
      }
    ],
    "stats": {
      "total": 60,
      "additions": 30,
      "deletions": 30
    },
    "files": [
      {
        "sha": "a6656b225146345b99691fafb40325b77e9ea8d0",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f95edba43a770dda6490738762a82c7749af09f/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f95edba43a770dda6490738762a82c7749af09f/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=9f95edba43a770dda6490738762a82c7749af09f",
        "patch": "@@ -1200,7 +1200,7 @@ bool AppInitLockDataDirectory()\n     return true;\n }\n \n-bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n+bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler) NO_THREAD_SAFETY_ANALYSIS\n {\n     const CChainParams& chainparams = Params();\n     // ********************************************************* Step 4a: application initialization"
      },
      {
        "sha": "97002038b5211bafdac019c319993391162a3181",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f95edba43a770dda6490738762a82c7749af09f/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f95edba43a770dda6490738762a82c7749af09f/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=9f95edba43a770dda6490738762a82c7749af09f",
        "patch": "@@ -445,7 +445,7 @@ bool TipMayBeStale(const Consensus::Params &consensusParams)\n }\n \n // Requires cs_main\n-bool CanDirectFetch(const Consensus::Params &consensusParams)\n+bool CanDirectFetch(const Consensus::Params &consensusParams) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     return chainActive.Tip()->GetBlockTime() > GetAdjustedTime() - consensusParams.nPowTargetSpacing * 20;\n }"
      },
      {
        "sha": "34d47628f8a3be148d9b67b88c6815fb525c9501",
        "filename": "src/qt/transactiondesc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f95edba43a770dda6490738762a82c7749af09f/src/qt/transactiondesc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f95edba43a770dda6490738762a82c7749af09f/src/qt/transactiondesc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.cpp?ref=9f95edba43a770dda6490738762a82c7749af09f",
        "patch": "@@ -21,7 +21,7 @@\n #include <stdint.h>\n #include <string>\n \n-QString TransactionDesc::FormatTxStatus(const CWalletTx& wtx)\n+QString TransactionDesc::FormatTxStatus(const CWalletTx& wtx) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     AssertLockHeld(cs_main);\n     if (!CheckFinalTx(*wtx.tx))"
      },
      {
        "sha": "4b581b20bc1974951ee4ca47ef6ebc70345e02a7",
        "filename": "src/qt/transactionrecord.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f95edba43a770dda6490738762a82c7749af09f/src/qt/transactionrecord.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f95edba43a770dda6490738762a82c7749af09f/src/qt/transactionrecord.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.cpp?ref=9f95edba43a770dda6490738762a82c7749af09f",
        "patch": "@@ -161,7 +161,7 @@ QList<TransactionRecord> TransactionRecord::decomposeTransaction(const CWallet *\n     return parts;\n }\n \n-void TransactionRecord::updateStatus(const CWalletTx &wtx)\n+void TransactionRecord::updateStatus(const CWalletTx &wtx) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     AssertLockHeld(cs_main);\n     // Determine transaction status\n@@ -248,7 +248,7 @@ void TransactionRecord::updateStatus(const CWalletTx &wtx)\n     status.needsUpdate = false;\n }\n \n-bool TransactionRecord::statusUpdateNeeded() const\n+bool TransactionRecord::statusUpdateNeeded() const EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     AssertLockHeld(cs_main);\n     return status.cur_num_blocks != chainActive.Height() || status.needsUpdate;"
      },
      {
        "sha": "64dce99893fa3dc70a560a3f0040d45caf328692",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f95edba43a770dda6490738762a82c7749af09f/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f95edba43a770dda6490738762a82c7749af09f/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=9f95edba43a770dda6490738762a82c7749af09f",
        "patch": "@@ -47,7 +47,7 @@ static CUpdatedBlock latestblock;\n \n extern void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue& entry);\n \n-double GetDifficulty(const CBlockIndex* blockindex)\n+double GetDifficulty(const CBlockIndex* blockindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     if (blockindex == nullptr)\n     {\n@@ -76,7 +76,7 @@ double GetDifficulty(const CBlockIndex* blockindex)\n     return dDiff;\n }\n \n-UniValue blockheaderToJSON(const CBlockIndex* blockindex)\n+UniValue blockheaderToJSON(const CBlockIndex* blockindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     AssertLockHeld(cs_main);\n     UniValue result(UniValue::VOBJ);\n@@ -105,7 +105,7 @@ UniValue blockheaderToJSON(const CBlockIndex* blockindex)\n     return result;\n }\n \n-UniValue blockToJSON(const CBlock& block, const CBlockIndex* blockindex, bool txDetails)\n+UniValue blockToJSON(const CBlock& block, const CBlockIndex* blockindex, bool txDetails) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     AssertLockHeld(cs_main);\n     UniValue result(UniValue::VOBJ);"
      },
      {
        "sha": "83519eb951427731308b66a0b5a225cf32401cb4",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f95edba43a770dda6490738762a82c7749af09f/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f95edba43a770dda6490738762a82c7749af09f/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=9f95edba43a770dda6490738762a82c7749af09f",
        "patch": "@@ -46,7 +46,7 @@ unsigned int ParseConfirmTarget(const UniValue& value)\n  * or from the last difficulty change if 'lookup' is nonpositive.\n  * If 'height' is nonnegative, compute the estimate at the time when a given block was found.\n  */\n-UniValue GetNetworkHashPS(int lookup, int height) {\n+UniValue GetNetworkHashPS(int lookup, int height) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n     CBlockIndex *pb = chainActive.Tip();\n \n     if (height >= 0 && height < chainActive.Height())\n@@ -293,7 +293,7 @@ std::string gbt_vb_name(const Consensus::DeploymentPos pos) {\n     return s;\n }\n \n-UniValue getblocktemplate(const JSONRPCRequest& request)\n+UniValue getblocktemplate(const JSONRPCRequest& request) NO_THREAD_SAFETY_ANALYSIS\n {\n     if (request.fHelp || request.params.size() > 1)\n         throw std::runtime_error("
      },
      {
        "sha": "cd73c912451d426e585ab83861bd0706b4f7983d",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f95edba43a770dda6490738762a82c7749af09f/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f95edba43a770dda6490738762a82c7749af09f/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=9f95edba43a770dda6490738762a82c7749af09f",
        "patch": "@@ -37,7 +37,7 @@\n #include <univalue.h>\n \n \n-void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue& entry)\n+void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue& entry) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     // Call into TxToUniv() in bitcoin-common to decode the transaction hex.\n     //"
      },
      {
        "sha": "cb8807b3bca3b64e7be3dd68c5113d4460b22852",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f95edba43a770dda6490738762a82c7749af09f/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f95edba43a770dda6490738762a82c7749af09f/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=9f95edba43a770dda6490738762a82c7749af09f",
        "patch": "@@ -71,7 +71,7 @@ struct {\n     {2, 0xbbbeb305}, {2, 0xfe1c810a},\n };\n \n-CBlockIndex CreateBlockIndex(int nHeight)\n+CBlockIndex CreateBlockIndex(int nHeight) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     CBlockIndex index;\n     index.nHeight = nHeight;"
      },
      {
        "sha": "dcca6ff94604d4ea006f618291fadb669f520549",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f95edba43a770dda6490738762a82c7749af09f/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f95edba43a770dda6490738762a82c7749af09f/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=9f95edba43a770dda6490738762a82c7749af09f",
        "patch": "@@ -219,7 +219,7 @@ static void FindFilesToPrune(std::set<int>& setFilesToPrune, uint64_t nPruneAfte\n bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsViewCache &inputs, bool fScriptChecks, unsigned int flags, bool cacheSigStore, bool cacheFullScriptStore, PrecomputedTransactionData& txdata, std::vector<CScriptCheck> *pvChecks = nullptr);\n static FILE* OpenUndoFile(const CDiskBlockPos &pos, bool fReadOnly = false);\n \n-bool CheckFinalTx(const CTransaction &tx, int flags)\n+bool CheckFinalTx(const CTransaction &tx, int flags) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     AssertLockHeld(cs_main);\n \n@@ -251,7 +251,7 @@ bool CheckFinalTx(const CTransaction &tx, int flags)\n     return IsFinalTx(tx, nBlockHeight, nBlockTime);\n }\n \n-bool TestLockPointValidity(const LockPoints* lp)\n+bool TestLockPointValidity(const LockPoints* lp) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     AssertLockHeld(cs_main);\n     assert(lp);\n@@ -269,7 +269,7 @@ bool TestLockPointValidity(const LockPoints* lp)\n     return true;\n }\n \n-bool CheckSequenceLocks(const CTransaction &tx, int flags, LockPoints* lp, bool useExistingLockPoints)\n+bool CheckSequenceLocks(const CTransaction &tx, int flags, LockPoints* lp, bool useExistingLockPoints) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     AssertLockHeld(cs_main);\n     AssertLockHeld(mempool.cs_txMemPool);\n@@ -365,7 +365,7 @@ std::string FormatStateMessage(const CValidationState &state)\n         state.GetRejectCode());\n }\n \n-static bool IsCurrentForFeeEstimation()\n+static bool IsCurrentForFeeEstimation() EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     AssertLockHeld(cs_main);\n     if (IsInitialBlockDownload())\n@@ -1106,7 +1106,7 @@ static void AlertNotify(const std::string& strMessage)\n     boost::thread t(runCommand, strCmd); // thread runs free\n }\n \n-static void CheckForkWarningConditions()\n+static void CheckForkWarningConditions() EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     AssertLockHeld(cs_main);\n     // Before we get past initial download, we cannot reliably alert about forks\n@@ -1147,7 +1147,7 @@ static void CheckForkWarningConditions()\n     }\n }\n \n-static void CheckForkWarningConditionsOnNewFork(CBlockIndex* pindexNewForkTip)\n+static void CheckForkWarningConditionsOnNewFork(CBlockIndex* pindexNewForkTip) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     AssertLockHeld(cs_main);\n     // If we are on a fork that is sufficiently large, set a warning flag\n@@ -1180,7 +1180,7 @@ static void CheckForkWarningConditionsOnNewFork(CBlockIndex* pindexNewForkTip)\n     CheckForkWarningConditions();\n }\n \n-void static InvalidChainFound(CBlockIndex* pindexNew)\n+void static InvalidChainFound(CBlockIndex* pindexNew) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     if (!pindexBestInvalid || pindexNew->nChainWork > pindexBestInvalid->nChainWork)\n         pindexBestInvalid = pindexNew;\n@@ -1197,7 +1197,7 @@ void static InvalidChainFound(CBlockIndex* pindexNew)\n     CheckForkWarningConditions();\n }\n \n-void static InvalidBlockFound(CBlockIndex *pindex, const CValidationState &state) {\n+void static InvalidBlockFound(CBlockIndex *pindex, const CValidationState &state) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n     if (!state.CorruptionPossible()) {\n         pindex->nStatus |= BLOCK_FAILED_VALID;\n         g_failed_blocks.insert(pindex);\n@@ -2292,7 +2292,7 @@ bool static ConnectTip(CValidationState& state, const CChainParams& chainparams,\n  * Return the tip of the chain with the most work in it, that isn't\n  * known to be invalid (it's however far from certain to be valid).\n  */\n-static CBlockIndex* FindMostWorkChain() {\n+static CBlockIndex* FindMostWorkChain() EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n     do {\n         CBlockIndex *pindexNew = nullptr;\n \n@@ -2347,7 +2347,7 @@ static CBlockIndex* FindMostWorkChain() {\n }\n \n /** Delete all entries in setBlockIndexCandidates that are worse than the current tip. */\n-static void PruneBlockIndexCandidates() {\n+static void PruneBlockIndexCandidates() EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n     // Note that we can't delete the current block itself, as we may need to return to it later in case a\n     // reorganization to a better block fails.\n     std::set<CBlockIndex*, CBlockIndexWorkComparator>::iterator it = setBlockIndexCandidates.begin();\n@@ -2630,7 +2630,7 @@ bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, C\n     return true;\n }\n \n-bool ResetBlockFailureFlags(CBlockIndex *pindex) {\n+bool ResetBlockFailureFlags(CBlockIndex *pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n     AssertLockHeld(cs_main);\n \n     int nHeight = pindex->nHeight;\n@@ -3188,7 +3188,7 @@ bool ProcessNewBlockHeaders(const std::vector<CBlockHeader>& headers, CValidatio\n }\n \n /** Store block on disk. If dbp is non-nullptr, the file is known to already reside on disk */\n-static bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex, bool fRequested, const CDiskBlockPos* dbp, bool* fNewBlock)\n+static bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex, bool fRequested, const CDiskBlockPos* dbp, bool* fNewBlock) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     const CBlock& block = *pblock;\n "
      },
      {
        "sha": "aa2f3080cdd622bb6316954828d68b90a63938d7",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f95edba43a770dda6490738762a82c7749af09f/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f95edba43a770dda6490738762a82c7749af09f/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=9f95edba43a770dda6490738762a82c7749af09f",
        "patch": "@@ -441,7 +441,7 @@ bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, C\n bool ResetBlockFailureFlags(CBlockIndex *pindex);\n \n /** The currently-connected chain of blocks (protected by cs_main). */\n-extern CChain chainActive;\n+extern CChain chainActive GUARDED_BY(cs_main);\n \n /** Global variable that points to the coins database (protected by cs_main) */\n extern std::unique_ptr<CCoinsViewDB> pcoinsdbview PT_GUARDED_BY(cs_main);"
      },
      {
        "sha": "3265cd269f940ef9251e4d561df5aa6465a6f957",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f95edba43a770dda6490738762a82c7749af09f/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f95edba43a770dda6490738762a82c7749af09f/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=9f95edba43a770dda6490738762a82c7749af09f",
        "patch": "@@ -616,7 +616,7 @@ class ListCoinsTestingSetup : public TestChain100Setup\n         ::bitdb.Reset();\n     }\n \n-    CWalletTx& AddTx(CRecipient recipient)\n+    CWalletTx& AddTx(CRecipient recipient) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n     {\n         CWalletTx wtx;\n         CReserveKey reservekey(wallet.get());"
      },
      {
        "sha": "65a7391cb9cc5c6ce425ab15d0ae4af629ba93c7",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f95edba43a770dda6490738762a82c7749af09f/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f95edba43a770dda6490738762a82c7749af09f/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=9f95edba43a770dda6490738762a82c7749af09f",
        "patch": "@@ -1607,7 +1607,7 @@ void CWalletTx::GetAmounts(std::list<COutputEntry>& listReceived,\n  * @return Earliest timestamp that could be successfully scanned from. Timestamp\n  * returned will be higher than startTime if relevant blocks could not be read.\n  */\n-int64_t CWallet::RescanFromTime(int64_t startTime, bool update)\n+int64_t CWallet::RescanFromTime(int64_t startTime, bool update) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     AssertLockHeld(cs_main);\n     AssertLockHeld(cs_wallet);\n@@ -3684,7 +3684,7 @@ void CWallet::ListLockedCoins(std::vector<COutPoint>& vOutpts) const EXCLUSIVE_L\n \n /** @} */ // end of Actions\n \n-void CWallet::GetKeyBirthTimes(std::map<CTxDestination, int64_t> &mapKeyBirth) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet) {\n+void CWallet::GetKeyBirthTimes(std::map<CTxDestination, int64_t> &mapKeyBirth) const EXCLUSIVE_LOCKS_REQUIRED(cs_main, cs_wallet) {\n     AssertLockHeld(cs_wallet); // mapKeyMetadata\n     mapKeyBirth.clear();\n \n@@ -3852,7 +3852,7 @@ std::vector<std::string> CWallet::GetDestValues(const std::string& prefix) const\n     return values;\n }\n \n-CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n+CWallet* CWallet::CreateWalletFromFile(const std::string walletFile) NO_THREAD_SAFETY_ANALYSIS\n {\n     // needed to restore wallet transaction meta data after -zapwallettxes\n     std::vector<CWalletTx> vWtx;\n@@ -4093,7 +4093,7 @@ void CMerkleTx::SetMerkleBranch(const CBlockIndex* pindex, int posInBlock)\n     nIndex = posInBlock;\n }\n \n-int CMerkleTx::GetDepthInMainChain(const CBlockIndex* &pindexRet) const\n+int CMerkleTx::GetDepthInMainChain(const CBlockIndex* &pindexRet) const EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     if (hashUnset())\n         return 0;"
      }
    ]
  },
  {
    "sha": "3a622a2b3fddcf9da3a54ff73ba1559c0c28b60a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYTYyMmEyYjNmZGRjZjlkYTNhNTRmZjczYmExNTU5YzBjMjhiNjBh",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-09-14T19:25:26Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Add GUARDED_BY(cs_main). Add EXCLUSIVE_LOCKS_REQUIRED(cs_main). cs_main is guarding scriptExecutionCache.",
      "tree": {
        "sha": "dbaa1af9da8ba329c366cc58e1f9e5eca4ba7b01",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dbaa1af9da8ba329c366cc58e1f9e5eca4ba7b01"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3a622a2b3fddcf9da3a54ff73ba1559c0c28b60a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a622a2b3fddcf9da3a54ff73ba1559c0c28b60a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3a622a2b3fddcf9da3a54ff73ba1559c0c28b60a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a622a2b3fddcf9da3a54ff73ba1559c0c28b60a/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9f95edba43a770dda6490738762a82c7749af09f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9f95edba43a770dda6490738762a82c7749af09f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9f95edba43a770dda6490738762a82c7749af09f"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "1e75f345b3c0ebbb93aa79592646e8199f6ab37b",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3a622a2b3fddcf9da3a54ff73ba1559c0c28b60a/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3a622a2b3fddcf9da3a54ff73ba1559c0c28b60a/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=3a622a2b3fddcf9da3a54ff73ba1559c0c28b60a",
        "patch": "@@ -1242,10 +1242,10 @@ int GetSpendHeight(const CCoinsViewCache& inputs)\n }\n \n \n-static CuckooCache::cache<uint256, SignatureCacheHasher> scriptExecutionCache;\n+static CuckooCache::cache<uint256, SignatureCacheHasher> scriptExecutionCache GUARDED_BY(cs_main);\n static uint256 scriptExecutionCacheNonce(GetRandHash());\n \n-void InitScriptExecutionCache() {\n+void InitScriptExecutionCache() EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n     // nMaxCacheSize is unsigned. If -maxsigcachesize is set to zero,\n     // setup_bytes creates the minimum possible cache (2 elements).\n     size_t nMaxCacheSize = std::min(std::max((int64_t)0, gArgs.GetArg(\"-maxsigcachesize\", DEFAULT_MAX_SIG_CACHE_SIZE) / 2), MAX_MAX_SIG_CACHE_SIZE) * ((size_t) 1 << 20);\n@@ -1272,7 +1272,7 @@ void InitScriptExecutionCache() {\n  *\n  * Non-static (and re-declared) in src/test/txvalidationcache_tests.cpp\n  */\n-bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsViewCache &inputs, bool fScriptChecks, unsigned int flags, bool cacheSigStore, bool cacheFullScriptStore, PrecomputedTransactionData& txdata, std::vector<CScriptCheck> *pvChecks)\n+bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsViewCache &inputs, bool fScriptChecks, unsigned int flags, bool cacheSigStore, bool cacheFullScriptStore, PrecomputedTransactionData& txdata, std::vector<CScriptCheck> *pvChecks) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     if (!tx.IsCoinBase())\n     {"
      }
    ]
  },
  {
    "sha": "cbb6033f02cb35f5b8242f83bed82011577e883e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYmI2MDMzZjAyY2IzNWY1YjgyNDJmODNiZWQ4MjAxMTU3N2U4ODNl",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-09-15T08:42:15Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "CWallet::CreateWalletFromFile(...): Change from NO_THREAD_SAFETY_ANALYSIS to EXCLUSIVE_LOCKS_REQUIRED(cs_main)",
      "tree": {
        "sha": "f9ef4289d2039c9c9499e69540538a8728b3c429",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f9ef4289d2039c9c9499e69540538a8728b3c429"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cbb6033f02cb35f5b8242f83bed82011577e883e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cbb6033f02cb35f5b8242f83bed82011577e883e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cbb6033f02cb35f5b8242f83bed82011577e883e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cbb6033f02cb35f5b8242f83bed82011577e883e/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3a622a2b3fddcf9da3a54ff73ba1559c0c28b60a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a622a2b3fddcf9da3a54ff73ba1559c0c28b60a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3a622a2b3fddcf9da3a54ff73ba1559c0c28b60a"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "40c55addd6ed6e27799021a43ee11d974a97974d",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cbb6033f02cb35f5b8242f83bed82011577e883e/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cbb6033f02cb35f5b8242f83bed82011577e883e/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=cbb6033f02cb35f5b8242f83bed82011577e883e",
        "patch": "@@ -3852,7 +3852,7 @@ std::vector<std::string> CWallet::GetDestValues(const std::string& prefix) const\n     return values;\n }\n \n-CWallet* CWallet::CreateWalletFromFile(const std::string walletFile) NO_THREAD_SAFETY_ANALYSIS\n+CWallet* CWallet::CreateWalletFromFile(const std::string walletFile) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     // needed to restore wallet transaction meta data after -zapwallettxes\n     std::vector<CWalletTx> vWtx;"
      }
    ]
  },
  {
    "sha": "f2b4aa9d5fb8c738ca2ba6783d226ad4b900b173",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMmI0YWE5ZDVmYjhjNzM4Y2EyYmE2NzgzZDIyNmFkNGI5MDBiMTcz",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-09-15T08:38:44Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Document all NO_THREAD_SAFETY_ANALYSIS annotations",
      "tree": {
        "sha": "3e385a55ebfefa7c608b95886233549619a82cc1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3e385a55ebfefa7c608b95886233549619a82cc1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f2b4aa9d5fb8c738ca2ba6783d226ad4b900b173",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2b4aa9d5fb8c738ca2ba6783d226ad4b900b173",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f2b4aa9d5fb8c738ca2ba6783d226ad4b900b173",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2b4aa9d5fb8c738ca2ba6783d226ad4b900b173/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cbb6033f02cb35f5b8242f83bed82011577e883e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cbb6033f02cb35f5b8242f83bed82011577e883e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cbb6033f02cb35f5b8242f83bed82011577e883e"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 14,
      "deletions": 1
    },
    "files": [
      {
        "sha": "0e09227ad56ac2750fb364a1d5ff47737721bb8c",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f2b4aa9d5fb8c738ca2ba6783d226ad4b900b173/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f2b4aa9d5fb8c738ca2ba6783d226ad4b900b173/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=f2b4aa9d5fb8c738ca2ba6783d226ad4b900b173",
        "patch": "@@ -1200,6 +1200,8 @@ bool AppInitLockDataDirectory()\n     return true;\n }\n \n+// NO_THREAD_SAFETY_ANALYSIS: Access to guarded variables happens before any\n+// thread is started.\n bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler) NO_THREAD_SAFETY_ANALYSIS\n {\n     const CChainParams& chainparams = Params();"
      },
      {
        "sha": "fa9bd40ddc042e837c5bc2ddbb11098c0d0c1503",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f2b4aa9d5fb8c738ca2ba6783d226ad4b900b173/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f2b4aa9d5fb8c738ca2ba6783d226ad4b900b173/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=f2b4aa9d5fb8c738ca2ba6783d226ad4b900b173",
        "patch": "@@ -293,6 +293,8 @@ std::string gbt_vb_name(const Consensus::DeploymentPos pos) {\n     return s;\n }\n \n+// NO_THREAD_SAFETY_ANALYSIS: Intentionally accessing chainActive without\n+// holding cs_main (see LEAVE_CRITICAL_SECTION(cs_main)).\n UniValue getblocktemplate(const JSONRPCRequest& request) NO_THREAD_SAFETY_ANALYSIS\n {\n     if (request.fHelp || request.params.size() > 1)"
      },
      {
        "sha": "8e5767183463a4f738a08e7d2d9fc3144710fb87",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f2b4aa9d5fb8c738ca2ba6783d226ad4b900b173/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f2b4aa9d5fb8c738ca2ba6783d226ad4b900b173/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=f2b4aa9d5fb8c738ca2ba6783d226ad4b900b173",
        "patch": "@@ -120,6 +120,8 @@ class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n };\n #endif\n \n+// NO_THREAD_SAFETY_ANALYSIS: The conditional cs_wallet lock confuses the\n+// thread-safety analyzer.\n UniValue validateaddress(const JSONRPCRequest& request) NO_THREAD_SAFETY_ANALYSIS\n {\n     if (request.fHelp || request.params.size() != 1)"
      },
      {
        "sha": "2154df8ff618e0a9082e42ac8011ceafab71fb25",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f2b4aa9d5fb8c738ca2ba6783d226ad4b900b173/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f2b4aa9d5fb8c738ca2ba6783d226ad4b900b173/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=f2b4aa9d5fb8c738ca2ba6783d226ad4b900b173",
        "patch": "@@ -106,6 +106,10 @@ std::atomic<uint32_t> logCategories(0);\n \n /** Init OpenSSL library multithreading support */\n static std::unique_ptr<CCriticalSection[]> ppmutexOpenSSL;\n+\n+// NO_THREAD_SAFETY_ANALYSIS: Intentionally silencing the following warnings:\n+// * error: releasing mutex 'operator[](ppmutexOpenSSL, i)' that was not held [-Werror,-Wthread-safety-analysis]\n+// * error: mutex 'operator[](ppmutexOpenSSL, i)' is not held on every path through here [-Werror,-Wthread-safety-analysis]\n void locking_callback(int mode, int i, const char* file, int line) NO_THREAD_SAFETY_ANALYSIS\n {\n     if (mode & CRYPTO_LOCK) {"
      },
      {
        "sha": "1592e2acb7efe7adcd353e4925b1556f658ae5b5",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f2b4aa9d5fb8c738ca2ba6783d226ad4b900b173/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f2b4aa9d5fb8c738ca2ba6783d226ad4b900b173/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=f2b4aa9d5fb8c738ca2ba6783d226ad4b900b173",
        "patch": "@@ -787,13 +787,16 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n         pwalletdbEncryption = nullptr;\n     }\n \n+    // NO_THREAD_SAFETY_ANALYSIS: Intentionally setting\n+    // nOrderPosNext/nTimeFirstKey/nWalletVersion/nWalletMaxVersion without\n+    // holding cs_wallet.\n     void SetNull() NO_THREAD_SAFETY_ANALYSIS\n     {\n         nWalletVersion = FEATURE_BASE;\n         nWalletMaxVersion = FEATURE_BASE;\n         nMasterKeyMaxID = 0;\n         pwalletdbEncryption = nullptr;\n-        nOrderPosNext = 0; // NO_THREAD_SAFETY_ANALYSIS\n+        nOrderPosNext = 0;\n         nAccountingEntryNumber = 0;\n         nNextResend = 0;\n         nLastResend = 0;"
      }
    ]
  },
  {
    "sha": "29972813314bc9fe2cb1e3e5a2c43c88b4b01c3e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyOTk3MjgxMzMxNGJjOWZlMmNiMWUzZTVhMmM0M2M4OGI0YjAxYzNl",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-09-16T12:18:50Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Add LOCK(cs_main) when accessing mapBlockIndex",
      "tree": {
        "sha": "a3d8ad7731d1548df73c8fb70ff9227c9c9c927b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a3d8ad7731d1548df73c8fb70ff9227c9c9c927b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/29972813314bc9fe2cb1e3e5a2c43c88b4b01c3e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29972813314bc9fe2cb1e3e5a2c43c88b4b01c3e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/29972813314bc9fe2cb1e3e5a2c43c88b4b01c3e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29972813314bc9fe2cb1e3e5a2c43c88b4b01c3e/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f2b4aa9d5fb8c738ca2ba6783d226ad4b900b173",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2b4aa9d5fb8c738ca2ba6783d226ad4b900b173",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f2b4aa9d5fb8c738ca2ba6783d226ad4b900b173"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 21,
      "deletions": 18
    },
    "files": [
      {
        "sha": "ba74d95784917f33371e6626d21939dd085826f6",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 18,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29972813314bc9fe2cb1e3e5a2c43c88b4b01c3e/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29972813314bc9fe2cb1e3e5a2c43c88b4b01c3e/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=29972813314bc9fe2cb1e3e5a2c43c88b4b01c3e",
        "patch": "@@ -4102,25 +4102,28 @@ bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, CDiskB\n                 nRewind = blkdat.GetPos();\n \n                 // detect out of order blocks, and store them for later\n-                uint256 hash = block.GetHash();\n-                if (hash != chainparams.GetConsensus().hashGenesisBlock && mapBlockIndex.find(block.hashPrevBlock) == mapBlockIndex.end()) {\n-                    LogPrint(BCLog::REINDEX, \"%s: Out of order block %s, parent %s not known\\n\", __func__, hash.ToString(),\n-                            block.hashPrevBlock.ToString());\n-                    if (dbp)\n-                        mapBlocksUnknownParent.insert(std::make_pair(block.hashPrevBlock, *dbp));\n-                    continue;\n-                }\n-\n-                // process in case the block isn't known yet\n-                if (mapBlockIndex.count(hash) == 0 || (mapBlockIndex[hash]->nStatus & BLOCK_HAVE_DATA) == 0) {\n+                uint256 hash;\n+                {\n                     LOCK(cs_main);\n-                    CValidationState state;\n-                    if (AcceptBlock(pblock, state, chainparams, nullptr, true, dbp, nullptr))\n-                        nLoaded++;\n-                    if (state.IsError())\n-                        break;\n-                } else if (hash != chainparams.GetConsensus().hashGenesisBlock && mapBlockIndex[hash]->nHeight % 1000 == 0) {\n-                    LogPrint(BCLog::REINDEX, \"Block Import: already had block %s at height %d\\n\", hash.ToString(), mapBlockIndex[hash]->nHeight);\n+                    hash = block.GetHash();\n+                    if (hash != chainparams.GetConsensus().hashGenesisBlock && mapBlockIndex.find(block.hashPrevBlock) == mapBlockIndex.end()) {\n+                        LogPrint(BCLog::REINDEX, \"%s: Out of order block %s, parent %s not known\\n\", __func__, hash.ToString(),\n+                                 block.hashPrevBlock.ToString());\n+                        if (dbp)\n+                            mapBlocksUnknownParent.insert(std::make_pair(block.hashPrevBlock, *dbp));\n+                        continue;\n+                    }\n+\n+                    // process in case the block isn't known yet\n+                    if (mapBlockIndex.count(hash) == 0 || (mapBlockIndex[hash]->nStatus & BLOCK_HAVE_DATA) == 0) {\n+                        CValidationState state;\n+                        if (AcceptBlock(pblock, state, chainparams, nullptr, true, dbp, nullptr))\n+                            nLoaded++;\n+                        if (state.IsError())\n+                            break;\n+                    } else if (hash != chainparams.GetConsensus().hashGenesisBlock && mapBlockIndex[hash]->nHeight % 1000 == 0) {\n+                        LogPrint(BCLog::REINDEX, \"Block Import: already had block %s at height %d\\n\", hash.ToString(), mapBlockIndex[hash]->nHeight);\n+                    }\n                 }\n \n                 // Activate the genesis block so normal node progress can continue"
      }
    ]
  },
  {
    "sha": "147f44930bb6cea7a27ca06ca11426d609cd3d4b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNDdmNDQ5MzBiYjZjZWE3YTI3Y2EwNmNhMTE0MjZkNjA5Y2QzZDRi",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-09-16T12:19:43Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Add GUARDED_BY(cs_main). Add EXCLUSIVE_LOCKS_REQUIRED(cs_main). cs_main is guarding mapBlockIndex.",
      "tree": {
        "sha": "b8f1ec335264b2780fb4d53bee6db39e6ce36630",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b8f1ec335264b2780fb4d53bee6db39e6ce36630"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/147f44930bb6cea7a27ca06ca11426d609cd3d4b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/147f44930bb6cea7a27ca06ca11426d609cd3d4b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/147f44930bb6cea7a27ca06ca11426d609cd3d4b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/147f44930bb6cea7a27ca06ca11426d609cd3d4b/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "29972813314bc9fe2cb1e3e5a2c43c88b4b01c3e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29972813314bc9fe2cb1e3e5a2c43c88b4b01c3e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/29972813314bc9fe2cb1e3e5a2c43c88b4b01c3e"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 6,
      "deletions": 6
    },
    "files": [
      {
        "sha": "ed83f0d6b1987675417b3ecc51e0522190fa68c1",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/147f44930bb6cea7a27ca06ca11426d609cd3d4b/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/147f44930bb6cea7a27ca06ca11426d609cd3d4b/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=147f44930bb6cea7a27ca06ca11426d609cd3d4b",
        "patch": "@@ -62,7 +62,7 @@\n \n CCriticalSection cs_main;\n \n-BlockMap mapBlockIndex;\n+BlockMap mapBlockIndex GUARDED_BY(cs_main);\n CChain chainActive;\n CBlockIndex *pindexBestHeader = nullptr;\n CWaitableCriticalSection csBestBlock;\n@@ -183,7 +183,7 @@ namespace {\n     std::set<int> setDirtyFileInfo;\n } // anon namespace\n \n-CBlockIndex* FindForkInGlobalIndex(const CChain& chain, const CBlockLocator& locator)\n+CBlockIndex* FindForkInGlobalIndex(const CChain& chain, const CBlockLocator& locator) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     // Find the first block the caller has in the main chain\n     for (const uint256& hash : locator.vHave) {\n@@ -2664,7 +2664,7 @@ bool ResetBlockFailureFlags(CBlockIndex *pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_mai\n     return true;\n }\n \n-static CBlockIndex* AddToBlockIndex(const CBlockHeader& block)\n+static CBlockIndex* AddToBlockIndex(const CBlockHeader& block) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     // Check for duplicate\n     uint256 hash = block.GetHash();\n@@ -3107,7 +3107,7 @@ static bool ContextualCheckBlock(const CBlock& block, CValidationState& state, c\n     return true;\n }\n \n-static bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex)\n+static bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     AssertLockHeld(cs_main);\n     // Check for duplicate\n@@ -3345,7 +3345,7 @@ uint64_t CalculateCurrentUsage()\n }\n \n /* Prune a block file (modify associated database entries)*/\n-void PruneOneBlockFile(const int fileNumber)\n+void PruneOneBlockFile(const int fileNumber) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     LOCK(cs_LastBlockFile);\n \n@@ -3529,7 +3529,7 @@ fs::path GetBlockPosFilename(const CDiskBlockPos &pos, const char *prefix)\n     return GetDataDir() / \"blocks\" / strprintf(\"%s%05u.dat\", prefix, pos.nFile);\n }\n \n-CBlockIndex * InsertBlockIndex(uint256 hash)\n+CBlockIndex * InsertBlockIndex(uint256 hash) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     if (hash.IsNull())\n         return nullptr;"
      }
    ]
  },
  {
    "sha": "c145fe8bad3c11cb0da03f82150bfc1fdd8800ca",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMTQ1ZmU4YmFkM2MxMWNiMGRhMDNmODIxNTBiZmMxZmRkODgwMGNh",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-09-16T12:20:57Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Remove AssertLockHeld(cs_wallet) from CWallet::RescanFromTime(...)\n\ncs_wallet not needed. ScanForWalletTransactions(...) takes it itself.\n\nSee https://github.com/bitcoin/bitcoin/pull/11226#issuecomment-329863375",
      "tree": {
        "sha": "09a1277179190901ff621c88e950626d95142219",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/09a1277179190901ff621c88e950626d95142219"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c145fe8bad3c11cb0da03f82150bfc1fdd8800ca",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c145fe8bad3c11cb0da03f82150bfc1fdd8800ca",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c145fe8bad3c11cb0da03f82150bfc1fdd8800ca",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c145fe8bad3c11cb0da03f82150bfc1fdd8800ca/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "147f44930bb6cea7a27ca06ca11426d609cd3d4b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/147f44930bb6cea7a27ca06ca11426d609cd3d4b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/147f44930bb6cea7a27ca06ca11426d609cd3d4b"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 0,
      "deletions": 1
    },
    "files": [
      {
        "sha": "83957c0059e8d91115a0c041a7ed48b64f18666c",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c145fe8bad3c11cb0da03f82150bfc1fdd8800ca/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c145fe8bad3c11cb0da03f82150bfc1fdd8800ca/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=c145fe8bad3c11cb0da03f82150bfc1fdd8800ca",
        "patch": "@@ -1610,7 +1610,6 @@ void CWalletTx::GetAmounts(std::list<COutputEntry>& listReceived,\n int64_t CWallet::RescanFromTime(int64_t startTime, bool update) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     AssertLockHeld(cs_main);\n-    AssertLockHeld(cs_wallet);\n \n     // Find starting block. May be null if nCreateTime is greater than the\n     // highest blockchain timestamp, in which case there is nothing that needs"
      }
    ]
  },
  {
    "sha": "be28bf1b9638d76fe7ac705bfe2b92764f58ee1a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZTI4YmYxYjk2MzhkNzZmZTdhYzcwNWJmZTJiOTI3NjRmNThlZTFh",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-09-16T13:34:52Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Add LOCK(cs_addrMan) when accessing vRandom",
      "tree": {
        "sha": "9cd0d2e5c8c6f419688b0f9e53eb7f9f933509f5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9cd0d2e5c8c6f419688b0f9e53eb7f9f933509f5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/be28bf1b9638d76fe7ac705bfe2b92764f58ee1a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be28bf1b9638d76fe7ac705bfe2b92764f58ee1a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/be28bf1b9638d76fe7ac705bfe2b92764f58ee1a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be28bf1b9638d76fe7ac705bfe2b92764f58ee1a/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c145fe8bad3c11cb0da03f82150bfc1fdd8800ca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c145fe8bad3c11cb0da03f82150bfc1fdd8800ca",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c145fe8bad3c11cb0da03f82150bfc1fdd8800ca"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 4,
      "deletions": 2
    },
    "files": [
      {
        "sha": "18570e37beb73da56ea4922623799471a766b97a",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be28bf1b9638d76fe7ac705bfe2b92764f58ee1a/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be28bf1b9638d76fe7ac705bfe2b92764f58ee1a/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=be28bf1b9638d76fe7ac705bfe2b92764f58ee1a",
        "patch": "@@ -455,8 +455,10 @@ class CAddrMan\n \n     void Clear()\n     {\n-        LOCK(cs);\n-        std::vector<int>().swap(vRandom);\n+        {\n+            LOCK(cs_addrMan);\n+            std::vector<int>().swap(vRandom);\n+        }\n         nKey = GetRandHash();\n         for (size_t bucket = 0; bucket < ADDRMAN_NEW_BUCKET_COUNT; bucket++) {\n             for (size_t entry = 0; entry < ADDRMAN_BUCKET_SIZE; entry++) {"
      }
    ]
  },
  {
    "sha": "08dc5d679af2d71cf77b97a058471708f2865140",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowOGRjNWQ2NzlhZjJkNzFjZjc3Yjk3YTA1ODQ3MTcwOGYyODY1MTQw",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-09-16T13:36:57Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Use GUARDED_BY(...) instead of PT_GUARDED_BY(...) for guarded std::shared_ptr<T>:s",
      "tree": {
        "sha": "274dc3232e1fa90d0c0348b735e2f4e1ffbc1c73",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/274dc3232e1fa90d0c0348b735e2f4e1ffbc1c73"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/08dc5d679af2d71cf77b97a058471708f2865140",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/08dc5d679af2d71cf77b97a058471708f2865140",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/08dc5d679af2d71cf77b97a058471708f2865140",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/08dc5d679af2d71cf77b97a058471708f2865140/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "be28bf1b9638d76fe7ac705bfe2b92764f58ee1a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be28bf1b9638d76fe7ac705bfe2b92764f58ee1a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/be28bf1b9638d76fe7ac705bfe2b92764f58ee1a"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "a7947e077d457de1632fbf38856d791817f755bc",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/08dc5d679af2d71cf77b97a058471708f2865140/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/08dc5d679af2d71cf77b97a058471708f2865140/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=08dc5d679af2d71cf77b97a058471708f2865140",
        "patch": "@@ -832,8 +832,8 @@ void PeerLogicValidation::BlockConnected(const std::shared_ptr<const CBlock>& pb\n \n // All of the following cache a recent block, and are protected by cs_most_recent_block\n static CCriticalSection cs_most_recent_block;\n-static std::shared_ptr<const CBlock> most_recent_block PT_GUARDED_BY(cs_most_recent_block);\n-static std::shared_ptr<const CBlockHeaderAndShortTxIDs> most_recent_compact_block PT_GUARDED_BY(cs_most_recent_block);\n+static std::shared_ptr<const CBlock> most_recent_block GUARDED_BY(cs_most_recent_block);\n+static std::shared_ptr<const CBlockHeaderAndShortTxIDs> most_recent_compact_block GUARDED_BY(cs_most_recent_block);\n static uint256 most_recent_block_hash GUARDED_BY(cs_most_recent_block);\n static bool fWitnessesPresentInMostRecentCompactBlock GUARDED_BY(cs_most_recent_block);\n "
      }
    ]
  },
  {
    "sha": "a1c20893c6183bf9db5e8965e621bf3874bf2578",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMWMyMDg5M2M2MTgzYmY5ZGI1ZTg5NjVlNjIxYmYzODc0YmYyNTc4",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-09-16T13:41:49Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Add LOCK(pwallet->cs_wallet) when accessing mapWallet (via CWallet::IsSpent(...))",
      "tree": {
        "sha": "adb0867ed874cfb6756457bffacd58afea36a3d9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/adb0867ed874cfb6756457bffacd58afea36a3d9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a1c20893c6183bf9db5e8965e621bf3874bf2578",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1c20893c6183bf9db5e8965e621bf3874bf2578",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a1c20893c6183bf9db5e8965e621bf3874bf2578",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1c20893c6183bf9db5e8965e621bf3874bf2578/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "08dc5d679af2d71cf77b97a058471708f2865140",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/08dc5d679af2d71cf77b97a058471708f2865140",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/08dc5d679af2d71cf77b97a058471708f2865140"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 4,
      "deletions": 2
    },
    "files": [
      {
        "sha": "a608d9296d58e8ecfc921d1d37426390f59f04ca",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a1c20893c6183bf9db5e8965e621bf3874bf2578/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a1c20893c6183bf9db5e8965e621bf3874bf2578/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=a1c20893c6183bf9db5e8965e621bf3874bf2578",
        "patch": "@@ -1834,7 +1834,7 @@ CAmount CWalletTx::GetImmatureCredit(bool fUseCache) const\n     return 0;\n }\n \n-CAmount CWalletTx::GetAvailableCredit(bool fUseCache) const EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+CAmount CWalletTx::GetAvailableCredit(bool fUseCache) const\n {\n     if (pwallet == nullptr)\n         return 0;\n@@ -1850,6 +1850,7 @@ CAmount CWalletTx::GetAvailableCredit(bool fUseCache) const EXCLUSIVE_LOCKS_REQU\n     uint256 hashTx = GetHash();\n     for (unsigned int i = 0; i < tx->vout.size(); i++)\n     {\n+        LOCK(pwallet->cs_wallet);\n         if (!pwallet->IsSpent(hashTx, i))\n         {\n             const CTxOut &txout = tx->vout[i];\n@@ -1878,7 +1879,7 @@ CAmount CWalletTx::GetImmatureWatchOnlyCredit(const bool& fUseCache) const\n     return 0;\n }\n \n-CAmount CWalletTx::GetAvailableWatchOnlyCredit(const bool& fUseCache) const EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+CAmount CWalletTx::GetAvailableWatchOnlyCredit(const bool& fUseCache) const\n {\n     if (pwallet == nullptr)\n         return 0;\n@@ -1893,6 +1894,7 @@ CAmount CWalletTx::GetAvailableWatchOnlyCredit(const bool& fUseCache) const EXCL\n     CAmount nCredit = 0;\n     for (unsigned int i = 0; i < tx->vout.size(); i++)\n     {\n+        LOCK(pwallet->cs_wallet);\n         if (!pwallet->IsSpent(GetHash(), i))\n         {\n             const CTxOut &txout = tx->vout[i];"
      }
    ]
  },
  {
    "sha": "aedf8de36803568df4475b13244e88cf5b99431c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZWRmOGRlMzY4MDM1NjhkZjQ0NzViMTMyNDRlODhjZjViOTk0MzFj",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-09-16T13:47:29Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Add EXCLUSIVE_LOCKS_REQUIRED(cs_main). cs_main is guarding versionbitscache.",
      "tree": {
        "sha": "4b0aa4b5cfdf2b446c7ef00768a841610c2117f1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4b0aa4b5cfdf2b446c7ef00768a841610c2117f1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aedf8de36803568df4475b13244e88cf5b99431c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aedf8de36803568df4475b13244e88cf5b99431c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/aedf8de36803568df4475b13244e88cf5b99431c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aedf8de36803568df4475b13244e88cf5b99431c/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a1c20893c6183bf9db5e8965e621bf3874bf2578",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1c20893c6183bf9db5e8965e621bf3874bf2578",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a1c20893c6183bf9db5e8965e621bf3874bf2578"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "0a94ed67f820453447d0d7845cf9d3db76880e12",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aedf8de36803568df4475b13244e88cf5b99431c/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aedf8de36803568df4475b13244e88cf5b99431c/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=aedf8de36803568df4475b13244e88cf5b99431c",
        "patch": "@@ -1612,7 +1612,7 @@ class WarningBitsConditionChecker : public AbstractThresholdConditionChecker\n // Protected by cs_main\n static ThresholdConditionCache warningcache[VERSIONBITS_NUM_BITS] GUARDED_BY(cs_main);\n \n-static unsigned int GetBlockScriptFlags(const CBlockIndex* pindex, const Consensus::Params& consensusparams) {\n+static unsigned int GetBlockScriptFlags(const CBlockIndex* pindex, const Consensus::Params& consensusparams) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n     AssertLockHeld(cs_main);\n \n     unsigned int flags = SCRIPT_VERIFY_NONE;\n@@ -3026,7 +3026,7 @@ static bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationSta\n  *  in ConnectBlock().\n  *  Note that -reindex-chainstate skips the validation that happens here!\n  */\n-static bool ContextualCheckBlock(const CBlock& block, CValidationState& state, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev)\n+static bool ContextualCheckBlock(const CBlock& block, CValidationState& state, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     const int nHeight = pindexPrev == nullptr ? 0 : pindexPrev->nHeight + 1;\n "
      }
    ]
  },
  {
    "sha": "32ba72a021bdb2ce24961243c85bc0c3f84bbe15",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMmJhNzJhMDIxYmRiMmNlMjQ5NjEyNDNjODViYzBjM2Y4NGJiZTE1",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-09-16T14:22:51Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Operate directly on pool->vTxHashes to resolve Clang thread-safety analysis aliasing confusion",
      "tree": {
        "sha": "21d46e87c060f20b947cce9afbfa97d5f804fedf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/21d46e87c060f20b947cce9afbfa97d5f804fedf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/32ba72a021bdb2ce24961243c85bc0c3f84bbe15",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/32ba72a021bdb2ce24961243c85bc0c3f84bbe15",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/32ba72a021bdb2ce24961243c85bc0c3f84bbe15",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/32ba72a021bdb2ce24961243c85bc0c3f84bbe15/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "aedf8de36803568df4475b13244e88cf5b99431c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aedf8de36803568df4475b13244e88cf5b99431c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/aedf8de36803568df4475b13244e88cf5b99431c"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 3,
      "deletions": 4
    },
    "files": [
      {
        "sha": "b44a6fd107ed5a7b96847029cddb3b471c4bb241",
        "filename": "src/blockencodings.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/32ba72a021bdb2ce24961243c85bc0c3f84bbe15/src/blockencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/32ba72a021bdb2ce24961243c85bc0c3f84bbe15/src/blockencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockencodings.cpp?ref=32ba72a021bdb2ce24961243c85bc0c3f84bbe15",
        "patch": "@@ -104,13 +104,12 @@ ReadStatus PartiallyDownloadedBlock::InitData(const CBlockHeaderAndShortTxIDs& c\n     std::vector<bool> have_txn(txn_available.size());\n     {\n     LOCK(pool->cs_txMemPool);\n-    const std::vector<std::pair<uint256, CTxMemPool::txiter> >& vTxHashes = pool->vTxHashes;\n-    for (size_t i = 0; i < vTxHashes.size(); i++) {\n-        uint64_t shortid = cmpctblock.GetShortID(vTxHashes[i].first);\n+    for (size_t i = 0; i < pool->vTxHashes.size(); i++) {\n+        uint64_t shortid = cmpctblock.GetShortID(pool->vTxHashes[i].first);\n         std::unordered_map<uint64_t, uint16_t>::iterator idit = shorttxids.find(shortid);\n         if (idit != shorttxids.end()) {\n             if (!have_txn[idit->second]) {\n-                txn_available[idit->second] = vTxHashes[i].second->GetSharedTx();\n+                txn_available[idit->second] = pool->vTxHashes[i].second->GetSharedTx();\n                 have_txn[idit->second]  = true;\n                 mempool_count++;\n             } else {"
      }
    ]
  },
  {
    "sha": "0c470a1611e480965eba681d6ee583c482048ec2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYzQ3MGExNjExZTQ4MDk2NWViYTY4MWQ2ZWU1ODNjNDgyMDQ4ZWMy",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-09-16T14:32:19Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "[tentative/experimental change, needs review before merge] Lock env->cs_db instead of bitdb.cs_db",
      "tree": {
        "sha": "4fc003c4a9de517e25681ea693171c28385d0c52",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4fc003c4a9de517e25681ea693171c28385d0c52"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0c470a1611e480965eba681d6ee583c482048ec2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c470a1611e480965eba681d6ee583c482048ec2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0c470a1611e480965eba681d6ee583c482048ec2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c470a1611e480965eba681d6ee583c482048ec2/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "32ba72a021bdb2ce24961243c85bc0c3f84bbe15",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/32ba72a021bdb2ce24961243c85bc0c3f84bbe15",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/32ba72a021bdb2ce24961243c85bc0c3f84bbe15"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "78451284cc38aba3fd8357f4437a59b356feecab",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c470a1611e480965eba681d6ee583c482048ec2/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c470a1611e480965eba681d6ee583c482048ec2/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=0c470a1611e480965eba681d6ee583c482048ec2",
        "patch": "@@ -639,7 +639,7 @@ bool CDB::PeriodicFlush(CWalletDBWrapper& dbw)\n     bool ret = false;\n     CDBEnv *env = dbw.env;\n     const std::string& strFile = dbw.strFile;\n-    TRY_LOCK(bitdb.cs_db,lockDb);\n+    TRY_LOCK(env->cs_db, lockDb);\n     if (lockDb)\n     {\n         // Don't do this if any databases are in use"
      }
    ]
  },
  {
    "sha": "3d61525a9bc69a80090532424fa814b98073d3fc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZDYxNTI1YTliYzY5YTgwMDkwNTMyNDI0ZmE4MTRiOTgwNzNkM2Zj",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-09-16T15:08:48Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Make sure the cs_main lock covers all chainActive accesses while limiting the lock scope. Avoid keeping cs_main locked during wait_until(...).",
      "tree": {
        "sha": "7de4b4bd28251c9ec87e2fab4ecbb5cd4c346eae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7de4b4bd28251c9ec87e2fab4ecbb5cd4c346eae"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3d61525a9bc69a80090532424fa814b98073d3fc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d61525a9bc69a80090532424fa814b98073d3fc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3d61525a9bc69a80090532424fa814b98073d3fc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d61525a9bc69a80090532424fa814b98073d3fc/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0c470a1611e480965eba681d6ee583c482048ec2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c470a1611e480965eba681d6ee583c482048ec2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0c470a1611e480965eba681d6ee583c482048ec2"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 12,
      "deletions": 8
    },
    "files": [
      {
        "sha": "93b8790dadf913603bc55e77f145549e28a742bd",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 8,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d61525a9bc69a80090532424fa814b98073d3fc/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d61525a9bc69a80090532424fa814b98073d3fc/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=3d61525a9bc69a80090532424fa814b98073d3fc",
        "patch": "@@ -293,9 +293,7 @@ std::string gbt_vb_name(const Consensus::DeploymentPos pos) {\n     return s;\n }\n \n-// NO_THREAD_SAFETY_ANALYSIS: Intentionally accessing chainActive without\n-// holding cs_main (see LEAVE_CRITICAL_SECTION(cs_main)).\n-UniValue getblocktemplate(const JSONRPCRequest& request) NO_THREAD_SAFETY_ANALYSIS\n+UniValue getblocktemplate(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() > 1)\n         throw std::runtime_error(\n@@ -374,8 +372,6 @@ UniValue getblocktemplate(const JSONRPCRequest& request) NO_THREAD_SAFETY_ANALYS\n             + HelpExampleRpc(\"getblocktemplate\", \"\")\n          );\n \n-    LOCK(cs_main);\n-\n     std::string strMode = \"template\";\n     UniValue lpval = NullUniValue;\n     std::set<std::string> setClientRules;\n@@ -405,6 +401,7 @@ UniValue getblocktemplate(const JSONRPCRequest& request) NO_THREAD_SAFETY_ANALYS\n                 throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"Block decode failed\");\n \n             uint256 hash = block.GetHash();\n+            LOCK(cs_main);\n             BlockMap::iterator mi = mapBlockIndex.find(hash);\n             if (mi != mapBlockIndex.end()) {\n                 CBlockIndex *pindex = mi->second;\n@@ -470,18 +467,23 @@ UniValue getblocktemplate(const JSONRPCRequest& request) NO_THREAD_SAFETY_ANALYS\n         }\n         else\n         {\n+            LOCK(cs_main);\n             // NOTE: Spec does not specify behaviour for non-string longpollid, but this makes testing easier\n             hashWatchedChain = chainActive.Tip()->GetBlockHash();\n             nTransactionsUpdatedLastLP = nTransactionsUpdatedLast;\n         }\n \n         // Release the wallet and main lock while waiting\n-        LEAVE_CRITICAL_SECTION(cs_main);\n         {\n             checktxtime = std::chrono::steady_clock::now() + std::chrono::minutes(1);\n \n             WaitableLock lock(csBestBlock);\n-            while (chainActive.Tip()->GetBlockHash() == hashWatchedChain && IsRPCRunning())\n+            bool keepRunning;\n+            {\n+                LOCK(cs_main);\n+                keepRunning = chainActive.Tip()->GetBlockHash() == hashWatchedChain && IsRPCRunning();\n+            }\n+            while (keepRunning)\n             {\n                 if (cvBlockChange.wait_until(lock, checktxtime) == std::cv_status::timeout)\n                 {\n@@ -490,9 +492,10 @@ UniValue getblocktemplate(const JSONRPCRequest& request) NO_THREAD_SAFETY_ANALYS\n                         break;\n                     checktxtime += std::chrono::seconds(10);\n                 }\n+                LOCK(cs_main);\n+                keepRunning = chainActive.Tip()->GetBlockHash() == hashWatchedChain && IsRPCRunning();\n             }\n         }\n-        ENTER_CRITICAL_SECTION(cs_main);\n \n         if (!IsRPCRunning())\n             throw JSONRPCError(RPC_CLIENT_NOT_CONNECTED, \"Shutting down\");\n@@ -506,6 +509,7 @@ UniValue getblocktemplate(const JSONRPCRequest& request) NO_THREAD_SAFETY_ANALYS\n     bool fSupportsSegwit = setClientRules.find(segwit_info.name) != setClientRules.end();\n \n     // Update block\n+    LOCK(cs_main);\n     static CBlockIndex* pindexPrev;\n     static int64_t nStart;\n     static std::unique_ptr<CBlockTemplate> pblocktemplate;"
      }
    ]
  },
  {
    "sha": "33f2089264633a57ad0c80c92879149bcbf14391",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozM2YyMDg5MjY0NjMzYTU3YWQwYzgwYzkyODc5MTQ5YmNiZjE0Mzkx",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-09-16T15:22:19Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Add GUARDED_BY(cs_main). Add EXCLUSIVE_LOCKS_REQUIRED(cs_main). cs_main is guarding mapBlockIndex.",
      "tree": {
        "sha": "5c3f5c1f94d2c2f8ccfb3cd0186f4757dd66ca6e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5c3f5c1f94d2c2f8ccfb3cd0186f4757dd66ca6e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/33f2089264633a57ad0c80c92879149bcbf14391",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/33f2089264633a57ad0c80c92879149bcbf14391",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/33f2089264633a57ad0c80c92879149bcbf14391",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/33f2089264633a57ad0c80c92879149bcbf14391/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3d61525a9bc69a80090532424fa814b98073d3fc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d61525a9bc69a80090532424fa814b98073d3fc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3d61525a9bc69a80090532424fa814b98073d3fc"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "af3df80973f45fc1bda97dca0aa0f456d73ce497",
        "filename": "src/checkpoints.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/33f2089264633a57ad0c80c92879149bcbf14391/src/checkpoints.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/33f2089264633a57ad0c80c92879149bcbf14391/src/checkpoints.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.cpp?ref=33f2089264633a57ad0c80c92879149bcbf14391",
        "patch": "@@ -15,7 +15,7 @@\n \n namespace Checkpoints {\n \n-    CBlockIndex* GetLastCheckpoint(const CCheckpointData& data)\n+    CBlockIndex* GetLastCheckpoint(const CCheckpointData& data) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n     {\n         const MapCheckpoints& checkpoints = data.mapCheckpoints;\n "
      },
      {
        "sha": "14f601d639bcd27adecdcfcc4222797ce554496a",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/33f2089264633a57ad0c80c92879149bcbf14391/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/33f2089264633a57ad0c80c92879149bcbf14391/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=33f2089264633a57ad0c80c92879149bcbf14391",
        "patch": "@@ -159,7 +159,7 @@ extern CCriticalSection cs_main;\n extern CBlockPolicyEstimator feeEstimator;\n extern CTxMemPool mempool;\n typedef std::unordered_map<uint256, CBlockIndex*, BlockHasher> BlockMap;\n-extern BlockMap mapBlockIndex;\n+extern BlockMap mapBlockIndex GUARDED_BY(cs_main);\n extern uint64_t nLastBlockTx;\n extern uint64_t nLastBlockWeight;\n extern const std::string strMessageMagic;"
      },
      {
        "sha": "e3eb5a067aa78ebe8309c2014d20cf0437cfb5b1",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/33f2089264633a57ad0c80c92879149bcbf14391/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/33f2089264633a57ad0c80c92879149bcbf14391/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=33f2089264633a57ad0c80c92879149bcbf14391",
        "patch": "@@ -82,7 +82,7 @@ void EnsureWalletIsUnlocked(CWallet * const pwallet)\n     }\n }\n \n-void WalletTxToJSON(const CWalletTx& wtx, UniValue& entry)\n+void WalletTxToJSON(const CWalletTx& wtx, UniValue& entry) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     int confirms = wtx.GetDepthInMainChain();\n     entry.push_back(Pair(\"confirmations\", confirms));\n@@ -1569,7 +1569,7 @@ static void MaybePushAddress(UniValue & entry, const CTxDestination &dest)\n  * @param  ret        The UniValue into which the result is stored.\n  * @param  filter     The \"is mine\" filter bool.\n  */\n-void ListTransactions(CWallet* const pwallet, const CWalletTx& wtx, const std::string& strAccount, int nMinDepth, bool fLong, UniValue& ret, const isminefilter& filter)\n+void ListTransactions(CWallet* const pwallet, const CWalletTx& wtx, const std::string& strAccount, int nMinDepth, bool fLong, UniValue& ret, const isminefilter& filter) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     CAmount nFee;\n     std::string strSentAccount;"
      },
      {
        "sha": "52548041967ccf06cfcde3870ae237eac6b15fe9",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/33f2089264633a57ad0c80c92879149bcbf14391/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/33f2089264633a57ad0c80c92879149bcbf14391/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=33f2089264633a57ad0c80c92879149bcbf14391",
        "patch": "@@ -3757,7 +3757,7 @@ void CWallet::GetKeyBirthTimes(std::map<CTxDestination, int64_t> &mapKeyBirth) c\n  * https://bitcointalk.org/?topic=54527, or\n  * https://github.com/bitcoin/bitcoin/pull/1393.\n  */\n-unsigned int CWallet::ComputeTimeSmart(const CWalletTx& wtx) const\n+unsigned int CWallet::ComputeTimeSmart(const CWalletTx& wtx) const EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     unsigned int nTimeSmart = wtx.nTimeReceived;\n     if (!wtx.hashUnset()) {"
      }
    ]
  },
  {
    "sha": "ed86da25eac8c7d94176f47401dfcdce8d79f712",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZDg2ZGEyNWVhYzhjN2Q5NDE3NmY0NzQwMWRmY2RjZThkNzlmNzEy",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-09-16T18:52:49Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Add GUARDED_BY(cs_filter). Add EXCLUSIVE_LOCKS_REQUIRED(cs_filter). cs_main is guarding fRelayTxes.",
      "tree": {
        "sha": "2b8e0b357a5b31998d75624df7335a97b0b0408c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2b8e0b357a5b31998d75624df7335a97b0b0408c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ed86da25eac8c7d94176f47401dfcdce8d79f712",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed86da25eac8c7d94176f47401dfcdce8d79f712",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ed86da25eac8c7d94176f47401dfcdce8d79f712",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed86da25eac8c7d94176f47401dfcdce8d79f712/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "33f2089264633a57ad0c80c92879149bcbf14391",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/33f2089264633a57ad0c80c92879149bcbf14391",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/33f2089264633a57ad0c80c92879149bcbf14391"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 7,
      "deletions": 6
    },
    "files": [
      {
        "sha": "1be86c3f486cf6b5e72b14399684db6f7a720274",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed86da25eac8c7d94176f47401dfcdce8d79f712/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed86da25eac8c7d94176f47401dfcdce8d79f712/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=ed86da25eac8c7d94176f47401dfcdce8d79f712",
        "patch": "@@ -502,7 +502,8 @@ CAddress GetLocalAddress(const CNetAddr *paddrPeer, ServiceFlags nLocalServices)\n \n extern bool fDiscover;\n extern bool fListen;\n-extern bool fRelayTxes;\n+extern CCriticalSection cs_filter;\n+extern bool fRelayTxes GUARDED_BY(cs_filter);\n \n extern limitedmap<uint256, int64_t> mapAlreadyAskedFor;\n "
      },
      {
        "sha": "06fe1536872ae542131093ecf8c8507b58f72127",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed86da25eac8c7d94176f47401dfcdce8d79f712/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed86da25eac8c7d94176f47401dfcdce8d79f712/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=ed86da25eac8c7d94176f47401dfcdce8d79f712",
        "patch": "@@ -286,7 +286,7 @@ void UpdatePreferredDownload(CNode* node, CNodeState* state)\n     nPreferredDownload += state->fPreferredDownload;\n }\n \n-void PushNodeVersion(CNode *pnode, CConnman* connman, int64_t nTime)\n+void PushNodeVersion(CNode *pnode, CConnman* connman, int64_t nTime) EXCLUSIVE_LOCKS_REQUIRED(cs_filter)\n {\n     ServiceFlags nLocalNodeServices = pnode->GetLocalServices();\n     uint64_t nonce = pnode->GetLocalNonce();\n@@ -566,7 +566,7 @@ bool IsOutboundDisconnectionCandidate(const CNode *node)\n     return !(node->fInbound || node->m_manual_connection || node->fFeeler || node->fOneShot);\n }\n \n-void PeerLogicValidation::InitializeNode(CNode *pnode) {\n+void PeerLogicValidation::InitializeNode(CNode *pnode) EXCLUSIVE_LOCKS_REQUIRED(cs_filter) {\n     CAddress addr = pnode->addr;\n     std::string addrName = pnode->GetAddrName();\n     NodeId nodeid = pnode->GetId();\n@@ -1451,7 +1451,7 @@ bool static ProcessHeadersMessage(CNode *pfrom, CConnman *connman, const std::ve\n     return true;\n }\n \n-bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CConnman* connman, const std::atomic<bool>& interruptMsgProc)\n+bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CConnman* connman, const std::atomic<bool>& interruptMsgProc) EXCLUSIVE_LOCKS_REQUIRED(cs_filter)\n {\n     LogPrint(BCLog::NET, \"received: %s (%u bytes) peer=%d\\n\", SanitizeString(strCommand), vRecv.size(), pfrom->GetId());\n     if (gArgs.IsArgSet(\"-dropmessagestest\") && GetRand(gArgs.GetArg(\"-dropmessagestest\", 0)) == 0)\n@@ -2843,7 +2843,7 @@ static bool SendRejectsAndCheckIfBanned(CNode* pnode, CConnman* connman) EXCLUSI\n     return false;\n }\n \n-bool PeerLogicValidation::ProcessMessages(CNode* pfrom, std::atomic<bool>& interruptMsgProc)\n+bool PeerLogicValidation::ProcessMessages(CNode* pfrom, std::atomic<bool>& interruptMsgProc) EXCLUSIVE_LOCKS_REQUIRED(cs_filter)\n {\n     const CChainParams& chainparams = Params();\n     //"
      },
      {
        "sha": "9140a6ec38822da56dfddb6fe5b2f363ffae3244",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed86da25eac8c7d94176f47401dfcdce8d79f712/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed86da25eac8c7d94176f47401dfcdce8d79f712/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=ed86da25eac8c7d94176f47401dfcdce8d79f712",
        "patch": "@@ -413,7 +413,7 @@ static UniValue GetNetworksInfo()\n     return networks;\n }\n \n-UniValue getnetworkinfo(const JSONRPCRequest& request)\n+UniValue getnetworkinfo(const JSONRPCRequest& request) EXCLUSIVE_LOCKS_REQUIRED(cs_filter)\n {\n     if (request.fHelp || request.params.size() != 0)\n         throw std::runtime_error("
      }
    ]
  },
  {
    "sha": "cc900ec4c4fb4c683eb05f812c37aeed85f3d184",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYzkwMGVjNGM0ZmI0YzY4M2ViMDVmODEyYzM3YWVlZDg1ZjNkMTg0",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-09-16T18:57:52Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Add GUARDED_BY(cs_main). cs_main is guarding versionbitscache.",
      "tree": {
        "sha": "e98b612867471518ef94ce4f2d6cc5b139853a8e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e98b612867471518ef94ce4f2d6cc5b139853a8e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cc900ec4c4fb4c683eb05f812c37aeed85f3d184",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc900ec4c4fb4c683eb05f812c37aeed85f3d184",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cc900ec4c4fb4c683eb05f812c37aeed85f3d184",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc900ec4c4fb4c683eb05f812c37aeed85f3d184/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ed86da25eac8c7d94176f47401dfcdce8d79f712",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed86da25eac8c7d94176f47401dfcdce8d79f712",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ed86da25eac8c7d94176f47401dfcdce8d79f712"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "869a17545bb2201c88fa7d76489803fd58631072",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc900ec4c4fb4c683eb05f812c37aeed85f3d184/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc900ec4c4fb4c683eb05f812c37aeed85f3d184/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=cc900ec4c4fb4c683eb05f812c37aeed85f3d184",
        "patch": "@@ -459,7 +459,7 @@ extern std::unique_ptr<CBlockTreeDB> pblocktree PT_GUARDED_BY(cs_main);\n  */\n int GetSpendHeight(const CCoinsViewCache& inputs);\n \n-extern VersionBitsCache versionbitscache;\n+extern VersionBitsCache versionbitscache GUARDED_BY(cs_main);\n \n /**\n  * Determine what nVersion a new block should use."
      }
    ]
  },
  {
    "sha": "56a201b153bf38709153c6428aa121cc976c9718",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NmEyMDFiMTUzYmYzODcwOTE1M2M2NDI4YWExMjFjYzk3NmM5NzE4",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-09-16T19:05:01Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Add GUARDED_BY(cs_main). cs_main is guarding mapOrphanTransactions.",
      "tree": {
        "sha": "cc94628180ede5cef53cdc8d11361e2a987d36f8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cc94628180ede5cef53cdc8d11361e2a987d36f8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/56a201b153bf38709153c6428aa121cc976c9718",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/56a201b153bf38709153c6428aa121cc976c9718",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/56a201b153bf38709153c6428aa121cc976c9718",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/56a201b153bf38709153c6428aa121cc976c9718/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cc900ec4c4fb4c683eb05f812c37aeed85f3d184",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc900ec4c4fb4c683eb05f812c37aeed85f3d184",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cc900ec4c4fb4c683eb05f812c37aeed85f3d184"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "bba392da6974ebb843f7a4209d63a18e8e5f8a13",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/56a201b153bf38709153c6428aa121cc976c9718/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/56a201b153bf38709153c6428aa121cc976c9718/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=56a201b153bf38709153c6428aa121cc976c9718",
        "patch": "@@ -29,7 +29,7 @@ struct COrphanTx {\n     NodeId fromPeer;\n     int64_t nTimeExpire;\n };\n-extern std::map<uint256, COrphanTx> mapOrphanTransactions;\n+extern std::map<uint256, COrphanTx> mapOrphanTransactions GUARDED_BY(cs_main);\n \n CService ip(uint32_t i)\n {"
      }
    ]
  },
  {
    "sha": "288630a83c3fac490a3686311c3432e72947c90b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyODg2MzBhODNjM2ZhYzQ5MGEzNjg2MzExYzM0MzJlNzI5NDdjOTBi",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-09-17T18:54:47Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Add GUARDED_BY(cs_warnings). cs_warnings is guarding fLargeWorkForkFound/fLargeWorkInvalidChainFound.",
      "tree": {
        "sha": "d783159f3b6cabd549e62eb62d0dba773df4299f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d783159f3b6cabd549e62eb62d0dba773df4299f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/288630a83c3fac490a3686311c3432e72947c90b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/288630a83c3fac490a3686311c3432e72947c90b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/288630a83c3fac490a3686311c3432e72947c90b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/288630a83c3fac490a3686311c3432e72947c90b/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "56a201b153bf38709153c6428aa121cc976c9718",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/56a201b153bf38709153c6428aa121cc976c9718",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/56a201b153bf38709153c6428aa121cc976c9718"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "32b44af5ce488a7e3635ce806de4bd59039fe4fe",
        "filename": "src/warnings.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/288630a83c3fac490a3686311c3432e72947c90b/src/warnings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/288630a83c3fac490a3686311c3432e72947c90b/src/warnings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/warnings.cpp?ref=288630a83c3fac490a3686311c3432e72947c90b",
        "patch": "@@ -10,8 +10,8 @@\n \n CCriticalSection cs_warnings;\n std::string strMiscWarning GUARDED_BY(cs_warnings);\n-bool fLargeWorkForkFound = false;\n-bool fLargeWorkInvalidChainFound = false;\n+bool fLargeWorkForkFound GUARDED_BY(cs_warnings) = false;\n+bool fLargeWorkInvalidChainFound GUARDED_BY(cs_warnings) = false;\n \n void SetMiscWarning(const std::string& strWarning)\n {"
      }
    ]
  },
  {
    "sha": "195196332c607481e7086169b254077e1bf05711",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxOTUxOTYzMzJjNjA3NDgxZTcwODYxNjliMjU0MDc3ZTFiZjA1NzEx",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-09-17T19:16:15Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Add LOCK(cs_KeyStore) when accessing mapKeys/mapWatchKeys/mapScripts/setWatchOnly",
      "tree": {
        "sha": "a4b3d6f046cb7763934eb5a0e35ea28d1162cd23",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a4b3d6f046cb7763934eb5a0e35ea28d1162cd23"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/195196332c607481e7086169b254077e1bf05711",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/195196332c607481e7086169b254077e1bf05711",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/195196332c607481e7086169b254077e1bf05711",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/195196332c607481e7086169b254077e1bf05711/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "288630a83c3fac490a3686311c3432e72947c90b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/288630a83c3fac490a3686311c3432e72947c90b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/288630a83c3fac490a3686311c3432e72947c90b"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 4,
      "deletions": 1
    },
    "files": [
      {
        "sha": "ca634771347933a7da8676ca7c2a6dce8a8fe670",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/195196332c607481e7086169b254077e1bf05711/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/195196332c607481e7086169b254077e1bf05711/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=195196332c607481e7086169b254077e1bf05711",
        "patch": "@@ -3095,7 +3095,10 @@ DBErrors CWallet::LoadWallet(bool& fFirstRunRet)\n     }\n \n     // This wallet is in its first run if all of these are empty\n-    fFirstRunRet = mapKeys.empty() && mapCryptedKeys.empty() && mapWatchKeys.empty() && setWatchOnly.empty() && mapScripts.empty();\n+    {\n+        LOCK(cs_KeyStore);\n+        fFirstRunRet = mapKeys.empty() && mapCryptedKeys.empty() && mapWatchKeys.empty() && setWatchOnly.empty() && mapScripts.empty();\n+    }\n \n     if (nLoadWalletRet != DB_LOAD_OK)\n         return nLoadWalletRet;"
      }
    ]
  },
  {
    "sha": "00d046fe6848525d864ac66ef003d2e182c85e78",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMGQwNDZmZTY4NDg1MjVkODY0YWM2NmVmMDAzZDJlMTgyYzg1ZTc4",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-09-17T19:15:10Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Add GUARDED_BY(cs_KeyStore). cs_KeyStore is guarding mapKeys/mapWatchKeys/mapScripts/setWatchOnly.",
      "tree": {
        "sha": "e4bc7a677991176c2edde587c094b92d2a95187d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e4bc7a677991176c2edde587c094b92d2a95187d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/00d046fe6848525d864ac66ef003d2e182c85e78",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/00d046fe6848525d864ac66ef003d2e182c85e78",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/00d046fe6848525d864ac66ef003d2e182c85e78",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/00d046fe6848525d864ac66ef003d2e182c85e78/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "195196332c607481e7086169b254077e1bf05711",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/195196332c607481e7086169b254077e1bf05711",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/195196332c607481e7086169b254077e1bf05711"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "235996cd8235be490d2f3d1883ac9ef90f58a971",
        "filename": "src/keystore.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/00d046fe6848525d864ac66ef003d2e182c85e78/src/keystore.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/00d046fe6848525d864ac66ef003d2e182c85e78/src/keystore.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.h?ref=00d046fe6848525d864ac66ef003d2e182c85e78",
        "patch": "@@ -54,10 +54,10 @@ typedef std::set<CScript> WatchOnlySet;\n class CBasicKeyStore : public CKeyStore\n {\n protected:\n-    KeyMap mapKeys;\n-    WatchKeyMap mapWatchKeys;\n-    ScriptMap mapScripts;\n-    WatchOnlySet setWatchOnly;\n+    KeyMap mapKeys GUARDED_BY(cs_KeyStore);\n+    WatchKeyMap mapWatchKeys GUARDED_BY(cs_KeyStore);\n+    ScriptMap mapScripts GUARDED_BY(cs_KeyStore);\n+    WatchOnlySet setWatchOnly GUARDED_BY(cs_KeyStore);\n \n public:\n     bool AddKeyPubKey(const CKey& key, const CPubKey &pubkey) override;"
      }
    ]
  },
  {
    "sha": "1752e15b7b4ae3526e3fd80e4fa971a717b424d1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNzUyZTE1YjdiNGFlMzUyNmUzZmQ4MGU0ZmE5NzFhNzE3YjQyNGQx",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-09-17T19:32:20Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Add NO_THREAD_SAFETY_ANALYSIS annotation for Init(const Options& connOptions)",
      "tree": {
        "sha": "72df87bf58858a46976fbfd8ac752bd39eb0959c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/72df87bf58858a46976fbfd8ac752bd39eb0959c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1752e15b7b4ae3526e3fd80e4fa971a717b424d1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1752e15b7b4ae3526e3fd80e4fa971a717b424d1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1752e15b7b4ae3526e3fd80e4fa971a717b424d1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1752e15b7b4ae3526e3fd80e4fa971a717b424d1/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "00d046fe6848525d864ac66ef003d2e182c85e78",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/00d046fe6848525d864ac66ef003d2e182c85e78",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/00d046fe6848525d864ac66ef003d2e182c85e78"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 4,
      "deletions": 1
    },
    "files": [
      {
        "sha": "10556a9f4afcda99362dcdbfd7efd541678b09a0",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1752e15b7b4ae3526e3fd80e4fa971a717b424d1/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1752e15b7b4ae3526e3fd80e4fa971a717b424d1/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=1752e15b7b4ae3526e3fd80e4fa971a717b424d1",
        "patch": "@@ -147,7 +147,10 @@ class CConnman\n         std::vector<std::string> m_added_nodes;\n     };\n \n-    void Init(const Options& connOptions) {\n+    // NO_THREAD_SAFETY_ANALYSIS: Intentionally setting\n+    // nMaxOutboundTimeframe/nMaxOutboundLimit without holding\n+    // cs_totalBytesSent.\n+    void Init(const Options& connOptions) NO_THREAD_SAFETY_ANALYSIS {\n         nLocalServices = connOptions.nLocalServices;\n         nMaxConnections = connOptions.nMaxConnections;\n         nMaxOutbound = std::min(connOptions.nMaxOutbound, connOptions.nMaxConnections);"
      }
    ]
  },
  {
    "sha": "01097f7c471be840616d6784558156d965d8c0c6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMTA5N2Y3YzQ3MWJlODQwNjE2ZDY3ODQ1NTgxNTZkOTY1ZDhjMGM2",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-09-17T19:38:04Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Add GUARDED_BY(cs_mapLocalHost). cs_mapLocalHost is guarding mapLocalHost/vfLimited.",
      "tree": {
        "sha": "b09f003da44881188746c3d65b353f5640a28e61",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b09f003da44881188746c3d65b353f5640a28e61"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/01097f7c471be840616d6784558156d965d8c0c6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01097f7c471be840616d6784558156d965d8c0c6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/01097f7c471be840616d6784558156d965d8c0c6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01097f7c471be840616d6784558156d965d8c0c6/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1752e15b7b4ae3526e3fd80e4fa971a717b424d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1752e15b7b4ae3526e3fd80e4fa971a717b424d1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1752e15b7b4ae3526e3fd80e4fa971a717b424d1"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "d59484837e0db597d931a4935e99cbdaa5071c42",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/01097f7c471be840616d6784558156d965d8c0c6/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/01097f7c471be840616d6784558156d965d8c0c6/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=01097f7c471be840616d6784558156d965d8c0c6",
        "patch": "@@ -83,8 +83,8 @@ bool fDiscover = true;\n bool fListen = true;\n bool fRelayTxes = true;\n CCriticalSection cs_mapLocalHost;\n-std::map<CNetAddr, LocalServiceInfo> mapLocalHost;\n-static bool vfLimited[NET_MAX] = {};\n+std::map<CNetAddr, LocalServiceInfo> mapLocalHost GUARDED_BY(cs_mapLocalHost);\n+static bool vfLimited[NET_MAX] GUARDED_BY(cs_mapLocalHost) = {};\n std::string strSubVersion;\n \n limitedmap<uint256, int64_t> mapAlreadyAskedFor(MAX_INV_SZ);"
      }
    ]
  },
  {
    "sha": "4b003e8b083f6f88c7a3328e8aef3570d6c33025",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YjAwM2U4YjA4M2Y2Zjg4YzdhMzMyOGU4YWVmMzU3MGQ2YzMzMDI1",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-09-17T19:44:38Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Add PT_GUARDED_BY(cs_main). cs_main is guarding *pindexBestHeader.",
      "tree": {
        "sha": "f223039ade4c052ef1222912e94caf2c0aeeb808",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f223039ade4c052ef1222912e94caf2c0aeeb808"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4b003e8b083f6f88c7a3328e8aef3570d6c33025",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b003e8b083f6f88c7a3328e8aef3570d6c33025",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4b003e8b083f6f88c7a3328e8aef3570d6c33025",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b003e8b083f6f88c7a3328e8aef3570d6c33025/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "01097f7c471be840616d6784558156d965d8c0c6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01097f7c471be840616d6784558156d965d8c0c6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/01097f7c471be840616d6784558156d965d8c0c6"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "f5ff165c99b864d694a8898e888ab72ce05eefc0",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b003e8b083f6f88c7a3328e8aef3570d6c33025/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b003e8b083f6f88c7a3328e8aef3570d6c33025/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=4b003e8b083f6f88c7a3328e8aef3570d6c33025",
        "patch": "@@ -64,7 +64,7 @@ CCriticalSection cs_main;\n \n BlockMap mapBlockIndex GUARDED_BY(cs_main);\n CChain chainActive;\n-CBlockIndex *pindexBestHeader = nullptr;\n+CBlockIndex *pindexBestHeader PT_GUARDED_BY(cs_main) = nullptr;\n CWaitableCriticalSection csBestBlock;\n CConditionVariable cvBlockChange;\n int nScriptCheckThreads = 0;"
      },
      {
        "sha": "9cd253b16dfd57c207d943a3e2a290b21e5956ae",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b003e8b083f6f88c7a3328e8aef3570d6c33025/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b003e8b083f6f88c7a3328e8aef3570d6c33025/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=4b003e8b083f6f88c7a3328e8aef3570d6c33025",
        "patch": "@@ -189,7 +189,7 @@ extern uint256 hashAssumeValid;\n extern arith_uint256 nMinimumChainWork;\n \n /** Best header we've seen so far (used for getheaders queries' starting points). */\n-extern CBlockIndex *pindexBestHeader;\n+extern CBlockIndex *pindexBestHeader PT_GUARDED_BY(cs_main);\n \n /** Minimum disk space required - used in CheckDiskSpace() */\n static const uint64_t nMinDiskSpace = 52428800;"
      }
    ]
  },
  {
    "sha": "c42ed7da9b35ef7e2479773ba0f0e4190a932774",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNDJlZDdkYTliMzVlZjdlMjQ3OTc3M2JhMGYwZTQxOTBhOTMyNzc0",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-09-17T20:01:18Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Add GUARDED_BY(cs_wallet). Add EXCLUSIVE_LOCKS_REQUIRED(cs_wallet). cs_wallet is guarding mapAddressBook.",
      "tree": {
        "sha": "1b711979e0e2d4ebc9adceb986130842566614a1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1b711979e0e2d4ebc9adceb986130842566614a1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c42ed7da9b35ef7e2479773ba0f0e4190a932774",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c42ed7da9b35ef7e2479773ba0f0e4190a932774",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c42ed7da9b35ef7e2479773ba0f0e4190a932774",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c42ed7da9b35ef7e2479773ba0f0e4190a932774/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4b003e8b083f6f88c7a3328e8aef3570d6c33025",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b003e8b083f6f88c7a3328e8aef3570d6c33025",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4b003e8b083f6f88c7a3328e8aef3570d6c33025"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 7,
      "deletions": 7
    },
    "files": [
      {
        "sha": "48ab3382e0b3d8a538723424d86cacda71d50eac",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c42ed7da9b35ef7e2479773ba0f0e4190a932774/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c42ed7da9b35ef7e2479773ba0f0e4190a932774/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=c42ed7da9b35ef7e2479773ba0f0e4190a932774",
        "patch": "@@ -1569,7 +1569,7 @@ static void MaybePushAddress(UniValue & entry, const CTxDestination &dest)\n  * @param  ret        The UniValue into which the result is stored.\n  * @param  filter     The \"is mine\" filter bool.\n  */\n-void ListTransactions(CWallet* const pwallet, const CWalletTx& wtx, const std::string& strAccount, int nMinDepth, bool fLong, UniValue& ret, const isminefilter& filter) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+void ListTransactions(CWallet* const pwallet, const CWalletTx& wtx, const std::string& strAccount, int nMinDepth, bool fLong, UniValue& ret, const isminefilter& filter) EXCLUSIVE_LOCKS_REQUIRED(cs_main, pwallet->cs_wallet)\n {\n     CAmount nFee;\n     std::string strSentAccount;"
      },
      {
        "sha": "4def240eb7bb3b331d36d9f3a3a8458a1a9bf62f",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c42ed7da9b35ef7e2479773ba0f0e4190a932774/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c42ed7da9b35ef7e2479773ba0f0e4190a932774/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=c42ed7da9b35ef7e2479773ba0f0e4190a932774",
        "patch": "@@ -3199,7 +3199,7 @@ bool CWallet::DelAddressBook(const CTxDestination& address)\n     return CWalletDB(*dbw).EraseName(EncodeDestination(address));\n }\n \n-const std::string& CWallet::GetAccountName(const CScript& scriptPubKey) const\n+const std::string& CWallet::GetAccountName(const CScript& scriptPubKey) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\n {\n     CTxDestination address;\n     if (ExtractDestination(scriptPubKey, address) && !scriptPubKey.IsUnspendable()) {\n@@ -3804,7 +3804,7 @@ unsigned int CWallet::ComputeTimeSmart(const CWalletTx& wtx) const EXCLUSIVE_LOC\n     return nTimeSmart;\n }\n \n-bool CWallet::AddDestData(const CTxDestination &dest, const std::string &key, const std::string &value)\n+bool CWallet::AddDestData(const CTxDestination &dest, const std::string &key, const std::string &value) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\n {\n     if (boost::get<CNoDestination>(&dest))\n         return false;\n@@ -3813,20 +3813,20 @@ bool CWallet::AddDestData(const CTxDestination &dest, const std::string &key, co\n     return CWalletDB(*dbw).WriteDestData(EncodeDestination(dest), key, value);\n }\n \n-bool CWallet::EraseDestData(const CTxDestination &dest, const std::string &key)\n+bool CWallet::EraseDestData(const CTxDestination &dest, const std::string &key) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\n {\n     if (!mapAddressBook[dest].destdata.erase(key))\n         return false;\n     return CWalletDB(*dbw).EraseDestData(EncodeDestination(dest), key);\n }\n \n-bool CWallet::LoadDestData(const CTxDestination &dest, const std::string &key, const std::string &value)\n+bool CWallet::LoadDestData(const CTxDestination &dest, const std::string &key, const std::string &value) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\n {\n     mapAddressBook[dest].destdata.insert(std::make_pair(key, value));\n     return true;\n }\n \n-bool CWallet::GetDestData(const CTxDestination &dest, const std::string &key, std::string *value) const\n+bool CWallet::GetDestData(const CTxDestination &dest, const std::string &key, std::string *value) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\n {\n     std::map<CTxDestination, CAddressBookData>::const_iterator i = mapAddressBook.find(dest);\n     if(i != mapAddressBook.end())"
      },
      {
        "sha": "7c906b9364c4d0d48589e1a9f7d2e65de60d8715",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c42ed7da9b35ef7e2479773ba0f0e4190a932774/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c42ed7da9b35ef7e2479773ba0f0e4190a932774/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=c42ed7da9b35ef7e2479773ba0f0e4190a932774",
        "patch": "@@ -819,7 +819,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     uint64_t nAccountingEntryNumber;\n     std::map<uint256, int> mapRequestCount GUARDED_BY(cs_wallet);\n \n-    std::map<CTxDestination, CAddressBookData> mapAddressBook;\n+    std::map<CTxDestination, CAddressBookData> mapAddressBook GUARDED_BY(cs_wallet);\n \n     std::set<COutPoint> setLockedCoins GUARDED_BY(cs_wallet);\n "
      }
    ]
  },
  {
    "sha": "b7dceee2ce00c7197d7abeb013683663ba56ea51",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiN2RjZWVlMmNlMDBjNzE5N2Q3YWJlYjAxMzY4MzY2M2JhNTZlYTUx",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-09-18T06:26:58Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Add GUARDED_BY(cs_callbacks_pending). cs_callbacks_pending is guarding m_are_callbacks_running.",
      "tree": {
        "sha": "3d5ddeb79bfed93f8f5b2ecf964f2bee16b5919e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3d5ddeb79bfed93f8f5b2ecf964f2bee16b5919e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b7dceee2ce00c7197d7abeb013683663ba56ea51",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7dceee2ce00c7197d7abeb013683663ba56ea51",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b7dceee2ce00c7197d7abeb013683663ba56ea51",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7dceee2ce00c7197d7abeb013683663ba56ea51/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c42ed7da9b35ef7e2479773ba0f0e4190a932774",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c42ed7da9b35ef7e2479773ba0f0e4190a932774",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c42ed7da9b35ef7e2479773ba0f0e4190a932774"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "dfc72ad4fb902173249f47cc3a35aac2183a9809",
        "filename": "src/scheduler.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7dceee2ce00c7197d7abeb013683663ba56ea51/src/scheduler.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7dceee2ce00c7197d7abeb013683663ba56ea51/src/scheduler.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/scheduler.h?ref=b7dceee2ce00c7197d7abeb013683663ba56ea51",
        "patch": "@@ -96,7 +96,7 @@ class SingleThreadedSchedulerClient {\n \n     CCriticalSection cs_callbacks_pending;\n     std::list<std::function<void (void)>> m_callbacks_pending GUARDED_BY(cs_callbacks_pending);\n-    bool m_are_callbacks_running = false;\n+    bool m_are_callbacks_running GUARDED_BY(cs_callbacks_pending) = false;\n \n     void MaybeScheduleProcessQueue();\n     void ProcessQueue();"
      }
    ]
  },
  {
    "sha": "f7560f7e33c5c6c685e91fc5ef52860090b45c29",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNzU2MGY3ZTMzYzVjNmM2ODVlOTFmYzVlZjUyODYwMDkwYjQ1YzI5",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-09-18T06:42:21Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Add GUARDED_BY(cs_LastBlockFile). Add EXCLUSIVE_LOCKS_REQUIRED(cs_LastBlockFile). cs_LastBlockFile is guarding fCheckForPruning.",
      "tree": {
        "sha": "f0d37c46328a04a8dae569ed8120e0475d41c03b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f0d37c46328a04a8dae569ed8120e0475d41c03b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f7560f7e33c5c6c685e91fc5ef52860090b45c29",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f7560f7e33c5c6c685e91fc5ef52860090b45c29",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f7560f7e33c5c6c685e91fc5ef52860090b45c29",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f7560f7e33c5c6c685e91fc5ef52860090b45c29/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b7dceee2ce00c7197d7abeb013683663ba56ea51",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7dceee2ce00c7197d7abeb013683663ba56ea51",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b7dceee2ce00c7197d7abeb013683663ba56ea51"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "2a80c65f6321f4b332a23eaf1951d1d30445af34",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7560f7e33c5c6c685e91fc5ef52860090b45c29/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7560f7e33c5c6c685e91fc5ef52860090b45c29/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=f7560f7e33c5c6c685e91fc5ef52860090b45c29",
        "patch": "@@ -142,7 +142,7 @@ namespace {\n      *  block/undo files that should be deleted.  Set on startup\n      *  or if we allocate more file space when we're in prune mode\n      */\n-    bool fCheckForPruning = false;\n+    bool fCheckForPruning GUARDED_BY(cs_LastBlockFile) = false;\n \n     /**\n      * Every received block is assigned a unique and increasing identifier, so we\n@@ -2028,7 +2028,7 @@ void FlushStateToDisk() {\n     FlushStateToDisk(chainparams, state, FLUSH_STATE_ALWAYS);\n }\n \n-void PruneAndFlush() {\n+void PruneAndFlush() EXCLUSIVE_LOCKS_REQUIRED(cs_LastBlockFile) {\n     CValidationState state;\n     {\n         LOCK(cs_LastBlockFile);\n@@ -3188,7 +3188,7 @@ bool ProcessNewBlockHeaders(const std::vector<CBlockHeader>& headers, CValidatio\n }\n \n /** Store block on disk. If dbp is non-nullptr, the file is known to already reside on disk */\n-static bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex, bool fRequested, const CDiskBlockPos* dbp, bool* fNewBlock) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+static bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex, bool fRequested, const CDiskBlockPos* dbp, bool* fNewBlock) EXCLUSIVE_LOCKS_REQUIRED(cs_main, cs_LastBlockFile)\n {\n     const CBlock& block = *pblock;\n \n@@ -3273,7 +3273,7 @@ static bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidation\n     return true;\n }\n \n-bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, bool fForceProcessing, bool *fNewBlock)\n+bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, bool fForceProcessing, bool *fNewBlock) EXCLUSIVE_LOCKS_REQUIRED(cs_LastBlockFile)\n {\n     {\n         CBlockIndex *pindex = nullptr;\n@@ -4055,7 +4055,7 @@ bool LoadGenesisBlock(const CChainParams& chainparams)\n     return true;\n }\n \n-bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, CDiskBlockPos *dbp)\n+bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, CDiskBlockPos *dbp) EXCLUSIVE_LOCKS_REQUIRED(cs_LastBlockFile)\n {\n     // Map of disk positions for blocks with unknown parent (only used for reindex)\n     static std::multimap<uint256, CDiskBlockPos> mapBlocksUnknownParent;"
      }
    ]
  },
  {
    "sha": "df76e327ae41ee83ed2a4e4d7f11a24379e01ed4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZjc2ZTMyN2FlNDFlZTgzZWQyYTRlNGQ3ZjExYTI0Mzc5ZTAxZWQ0",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-09-18T07:37:18Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Add GUARDED_BY(cs_KeyStore). cs_KeyStore is guarding mapCryptedKeys.",
      "tree": {
        "sha": "2521f83e40479641aef0df62f53fb02e90c8459c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2521f83e40479641aef0df62f53fb02e90c8459c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/df76e327ae41ee83ed2a4e4d7f11a24379e01ed4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df76e327ae41ee83ed2a4e4d7f11a24379e01ed4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/df76e327ae41ee83ed2a4e4d7f11a24379e01ed4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df76e327ae41ee83ed2a4e4d7f11a24379e01ed4/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f7560f7e33c5c6c685e91fc5ef52860090b45c29",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f7560f7e33c5c6c685e91fc5ef52860090b45c29",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f7560f7e33c5c6c685e91fc5ef52860090b45c29"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "e43a3118f2d17c611ec6bb8a8ddce94a624e720c",
        "filename": "src/wallet/crypter.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df76e327ae41ee83ed2a4e4d7f11a24379e01ed4/src/wallet/crypter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df76e327ae41ee83ed2a4e4d7f11a24379e01ed4/src/wallet/crypter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/crypter.h?ref=df76e327ae41ee83ed2a4e4d7f11a24379e01ed4",
        "patch": "@@ -132,7 +132,7 @@ class CCryptoKeyStore : public CBasicKeyStore\n     bool EncryptKeys(CKeyingMaterial& vMasterKeyIn);\n \n     bool Unlock(const CKeyingMaterial& vMasterKeyIn);\n-    CryptedKeyMap mapCryptedKeys;\n+    CryptedKeyMap mapCryptedKeys GUARDED_BY(cs_KeyStore);\n \n public:\n     CCryptoKeyStore() : fUseCrypto(false), fDecryptionThoroughlyChecked(false)"
      }
    ]
  },
  {
    "sha": "c534d2b3a8b89be1aa30a43b204124d433ab70cc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNTM0ZDJiM2E4Yjg5YmUxYWEzMGE0M2IyMDQxMjRkNDMzYWI3MGNj",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-09-18T07:57:48Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Add SendMessages(...) lock requirement (pto->cs_sendProcessing) also to the header file",
      "tree": {
        "sha": "a835450088a5cf64119ebfcea778709d1c28d2f0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a835450088a5cf64119ebfcea778709d1c28d2f0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c534d2b3a8b89be1aa30a43b204124d433ab70cc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c534d2b3a8b89be1aa30a43b204124d433ab70cc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c534d2b3a8b89be1aa30a43b204124d433ab70cc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c534d2b3a8b89be1aa30a43b204124d433ab70cc/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "df76e327ae41ee83ed2a4e4d7f11a24379e01ed4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df76e327ae41ee83ed2a4e4d7f11a24379e01ed4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/df76e327ae41ee83ed2a4e4d7f11a24379e01ed4"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "6eb858cb11059dbb591179bd5e9681e24c6d93de",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c534d2b3a8b89be1aa30a43b204124d433ab70cc/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c534d2b3a8b89be1aa30a43b204124d433ab70cc/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=c534d2b3a8b89be1aa30a43b204124d433ab70cc",
        "patch": "@@ -59,7 +59,7 @@ class PeerLogicValidation : public CValidationInterface, public NetEventsInterfa\n     * @param[in]   interrupt       Interrupt condition for processing threads\n     * @return                      True if there is more work to be done\n     */\n-    bool SendMessages(CNode* pto, std::atomic<bool>& interrupt) override;\n+    bool SendMessages(CNode* pto, std::atomic<bool>& interrupt) override EXCLUSIVE_LOCKS_REQUIRED(pto->cs_sendProcessing);\n \n     void ConsiderEviction(CNode *pto, int64_t time_in_seconds);\n     void CheckForStaleTipAndEvictPeers(const Consensus::Params &consensusParams);"
      }
    ]
  },
  {
    "sha": "e442df06e23893996062dbfac551a2b7cb1e0ed7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNDQyZGYwNmUyMzg5Mzk5NjA2MmRiZmFjNTUxYTJiN2NiMWUwZWQ3",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-09-18T22:36:55Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Add EXCLUSIVE_LOCKS_REQUIRED(cs_addrMan) - needed when building with DEBUG_ADDRMAN. cs_addrMan is guarding vRandom.",
      "tree": {
        "sha": "ea73fdff2554f7993b35bca6f30d4545bb15fe6f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ea73fdff2554f7993b35bca6f30d4545bb15fe6f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e442df06e23893996062dbfac551a2b7cb1e0ed7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e442df06e23893996062dbfac551a2b7cb1e0ed7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e442df06e23893996062dbfac551a2b7cb1e0ed7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e442df06e23893996062dbfac551a2b7cb1e0ed7/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c534d2b3a8b89be1aa30a43b204124d433ab70cc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c534d2b3a8b89be1aa30a43b204124d433ab70cc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c534d2b3a8b89be1aa30a43b204124d433ab70cc"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "a5529d976273270cb0ccac3717b6d7b9f072d6c1",
        "filename": "src/addrman.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e442df06e23893996062dbfac551a2b7cb1e0ed7/src/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e442df06e23893996062dbfac551a2b7cb1e0ed7/src/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.cpp?ref=e442df06e23893996062dbfac551a2b7cb1e0ed7",
        "patch": "@@ -382,7 +382,7 @@ CAddrInfo CAddrMan::Select_(bool newOnly)\n }\n \n #ifdef DEBUG_ADDRMAN\n-int CAddrMan::Check_()\n+int CAddrMan::Check_() EXCLUSIVE_LOCKS_REQUIRED(cs_addrMan)\n {\n     std::set<int> setTried;\n     std::map<int, int> mapNew;"
      }
    ]
  },
  {
    "sha": "d6995395facd2496602a9da3273676fedb8c31e9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNjk5NTM5NWZhY2QyNDk2NjAyYTlkYTMyNzM2NzZmZWRiOGMzMWU5",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-10-05T08:16:54Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Revert \"Add LOCK(node->cs_filter). The variable 'fRelayTxes' is guarded by that mutex.\"\n\nThis reverts commit c17eedee26c492f4b6abd1a4baead30afc4e742c.",
      "tree": {
        "sha": "5d1e2b65da015767174276fe88e9a228914d2ef5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5d1e2b65da015767174276fe88e9a228914d2ef5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d6995395facd2496602a9da3273676fedb8c31e9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6995395facd2496602a9da3273676fedb8c31e9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d6995395facd2496602a9da3273676fedb8c31e9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6995395facd2496602a9da3273676fedb8c31e9/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e442df06e23893996062dbfac551a2b7cb1e0ed7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e442df06e23893996062dbfac551a2b7cb1e0ed7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e442df06e23893996062dbfac551a2b7cb1e0ed7"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 0,
      "deletions": 1
    },
    "files": [
      {
        "sha": "ad9fbe6a03a3bd56277f530c1d3dac678e6e1121",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6995395facd2496602a9da3273676fedb8c31e9/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6995395facd2496602a9da3273676fedb8c31e9/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=d6995395facd2496602a9da3273676fedb8c31e9",
        "patch": "@@ -992,7 +992,6 @@ bool CConnman::AttemptToEvictConnection()\n                 continue;\n             if (node->fDisconnect)\n                 continue;\n-            LOCK(node->cs_filter);\n             NodeEvictionCandidate candidate = {node->GetId(), node->nTimeConnected, node->nMinPingUsecTime,\n                                                node->nLastBlockTime, node->nLastTXTime,\n                                                HasAllDesirableServiceFlags(node->nServices),"
      }
    ]
  },
  {
    "sha": "3d05a8f5bdb908f833fabdfd25a99e404a9db606",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZDA1YThmNWJkYjkwOGY4MzNmYWJkZmQyNWE5OWU0MDRhOWRiNjA2",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-10-05T08:28:27Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Revert \"Add GUARDED_BY(cs_filter). Add EXCLUSIVE_LOCKS_REQUIRED(cs_filter). cs_main is guarding fRelayTxes.\"\n\nThis reverts commit edd8005e1a60d2652544c6287677f19a47a7c63a.",
      "tree": {
        "sha": "49d77b38d0a091562fc1b8df6b64eaa31cb45cd9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/49d77b38d0a091562fc1b8df6b64eaa31cb45cd9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3d05a8f5bdb908f833fabdfd25a99e404a9db606",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d05a8f5bdb908f833fabdfd25a99e404a9db606",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3d05a8f5bdb908f833fabdfd25a99e404a9db606",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d05a8f5bdb908f833fabdfd25a99e404a9db606/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d6995395facd2496602a9da3273676fedb8c31e9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6995395facd2496602a9da3273676fedb8c31e9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d6995395facd2496602a9da3273676fedb8c31e9"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 5,
      "deletions": 6
    },
    "files": [
      {
        "sha": "819e1955e85ce7c2e05373f479b04f1a64ccbe60",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d05a8f5bdb908f833fabdfd25a99e404a9db606/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d05a8f5bdb908f833fabdfd25a99e404a9db606/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=3d05a8f5bdb908f833fabdfd25a99e404a9db606",
        "patch": "@@ -505,8 +505,7 @@ CAddress GetLocalAddress(const CNetAddr *paddrPeer, ServiceFlags nLocalServices)\n \n extern bool fDiscover;\n extern bool fListen;\n-extern CCriticalSection cs_filter;\n-extern bool fRelayTxes GUARDED_BY(cs_filter);\n+extern bool fRelayTxes;\n \n extern limitedmap<uint256, int64_t> mapAlreadyAskedFor;\n "
      },
      {
        "sha": "e0f51c871cc1c10971e59e0897a674d42be1fb0e",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d05a8f5bdb908f833fabdfd25a99e404a9db606/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d05a8f5bdb908f833fabdfd25a99e404a9db606/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=3d05a8f5bdb908f833fabdfd25a99e404a9db606",
        "patch": "@@ -286,7 +286,7 @@ void UpdatePreferredDownload(CNode* node, CNodeState* state)\n     nPreferredDownload += state->fPreferredDownload;\n }\n \n-void PushNodeVersion(CNode *pnode, CConnman* connman, int64_t nTime) EXCLUSIVE_LOCKS_REQUIRED(cs_filter)\n+void PushNodeVersion(CNode *pnode, CConnman* connman, int64_t nTime)\n {\n     ServiceFlags nLocalNodeServices = pnode->GetLocalServices();\n     uint64_t nonce = pnode->GetLocalNonce();\n@@ -1451,7 +1451,7 @@ bool static ProcessHeadersMessage(CNode *pfrom, CConnman *connman, const std::ve\n     return true;\n }\n \n-bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CConnman* connman, const std::atomic<bool>& interruptMsgProc) EXCLUSIVE_LOCKS_REQUIRED(cs_filter)\n+bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CConnman* connman, const std::atomic<bool>& interruptMsgProc)\n {\n     LogPrint(BCLog::NET, \"received: %s (%u bytes) peer=%d\\n\", SanitizeString(strCommand), vRecv.size(), pfrom->GetId());\n     if (gArgs.IsArgSet(\"-dropmessagestest\") && GetRand(gArgs.GetArg(\"-dropmessagestest\", 0)) == 0)\n@@ -2843,7 +2843,7 @@ static bool SendRejectsAndCheckIfBanned(CNode* pnode, CConnman* connman) EXCLUSI\n     return false;\n }\n \n-bool PeerLogicValidation::ProcessMessages(CNode* pfrom, std::atomic<bool>& interruptMsgProc) EXCLUSIVE_LOCKS_REQUIRED(cs_filter)\n+bool PeerLogicValidation::ProcessMessages(CNode* pfrom, std::atomic<bool>& interruptMsgProc)\n {\n     const CChainParams& chainparams = Params();\n     //"
      },
      {
        "sha": "9de249855cc6a0f0226bb4ddcd37ceb4d6c56191",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d05a8f5bdb908f833fabdfd25a99e404a9db606/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d05a8f5bdb908f833fabdfd25a99e404a9db606/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=3d05a8f5bdb908f833fabdfd25a99e404a9db606",
        "patch": "@@ -413,7 +413,7 @@ static UniValue GetNetworksInfo()\n     return networks;\n }\n \n-UniValue getnetworkinfo(const JSONRPCRequest& request) EXCLUSIVE_LOCKS_REQUIRED(cs_filter)\n+UniValue getnetworkinfo(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 0)\n         throw std::runtime_error("
      }
    ]
  },
  {
    "sha": "8917d74ed0b1e638d28bf399f08014e38ba168d6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4OTE3ZDc0ZWQwYjFlNjM4ZDI4YmYzOTlmMDgwMTRlMzhiYTE2OGQ2",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-10-05T08:35:33Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Revert \"Add GUARDED_BY(cs_filter) annotation\"\n\nThis reverts commit 1d8b7fa0a47b49e538606363db71ad5d1407c866.",
      "tree": {
        "sha": "7c6c51edf201458ee340b014691f8a06208b7e10",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7c6c51edf201458ee340b014691f8a06208b7e10"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8917d74ed0b1e638d28bf399f08014e38ba168d6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8917d74ed0b1e638d28bf399f08014e38ba168d6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8917d74ed0b1e638d28bf399f08014e38ba168d6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8917d74ed0b1e638d28bf399f08014e38ba168d6/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3d05a8f5bdb908f833fabdfd25a99e404a9db606",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d05a8f5bdb908f833fabdfd25a99e404a9db606",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3d05a8f5bdb908f833fabdfd25a99e404a9db606"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 1,
      "deletions": 2
    },
    "files": [
      {
        "sha": "1f2b4dcf610d35f0d0a0060086dc723d8138713e",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8917d74ed0b1e638d28bf399f08014e38ba168d6/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8917d74ed0b1e638d28bf399f08014e38ba168d6/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=8917d74ed0b1e638d28bf399f08014e38ba168d6",
        "patch": "@@ -653,8 +653,7 @@ class CNode\n     // a) it allows us to not relay tx invs before receiving the peer's version message\n     // b) the peer may tell us in its version message that we should not relay tx invs\n     //    unless it loads a bloom filter.\n-    CCriticalSection cs_filter;\n-    bool fRelayTxes GUARDED_BY(cs_filter);\n+    bool fRelayTxes; //protected by cs_filter\n     bool fSentAddr;\n     CSemaphoreGrant grantOutbound;\n     CCriticalSection cs_filter;"
      }
    ]
  },
  {
    "sha": "54d4facd1586bf5cdb9453875e1bcc73627c6dd2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NGQ0ZmFjZDE1ODZiZjVjZGI5NDUzODc1ZTFiY2M3MzYyN2M2ZGQy",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-10-18T15:17:41Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Add EXCLUSIVE_LOCKS_REQUIRED(cs_main) to StaleBlockRequestAllowed(...)",
      "tree": {
        "sha": "4403d711111684bdf708e02d6f77ec0b27dc2d7e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4403d711111684bdf708e02d6f77ec0b27dc2d7e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/54d4facd1586bf5cdb9453875e1bcc73627c6dd2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/54d4facd1586bf5cdb9453875e1bcc73627c6dd2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/54d4facd1586bf5cdb9453875e1bcc73627c6dd2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/54d4facd1586bf5cdb9453875e1bcc73627c6dd2/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8917d74ed0b1e638d28bf399f08014e38ba168d6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8917d74ed0b1e638d28bf399f08014e38ba168d6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8917d74ed0b1e638d28bf399f08014e38ba168d6"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "3e4a33e0ffa3ff804934890b6cbd9dbc670a0cf1",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/54d4facd1586bf5cdb9453875e1bcc73627c6dd2/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/54d4facd1586bf5cdb9453875e1bcc73627c6dd2/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=54d4facd1586bf5cdb9453875e1bcc73627c6dd2",
        "patch": "@@ -776,7 +776,7 @@ void Misbehaving(NodeId pnode, int howmuch) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n // active chain if they are no more than a month older (both in time, and in\n // best equivalent proof of work) than the best header chain we know about and\n // we fully-validated them at some point.\n-static bool BlockRequestAllowed(const CBlockIndex* pindex, const Consensus::Params& consensusParams)\n+static bool BlockRequestAllowed(const CBlockIndex* pindex, const Consensus::Params& consensusParams) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     AssertLockHeld(cs_main);\n     if (chainActive.Contains(pindex)) return true;"
      }
    ]
  },
  {
    "sha": "49b8c3adad9460a80ed3de70e810e464b027b342",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0OWI4YzNhZGFkOTQ2MGE4MGVkM2RlNzBlODEwZTQ2NGIwMjdiMzQy",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-10-30T22:11:54Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Add EXCLUSIVE_LOCKS_REQUIRED(env.cs_db). env.cs_db is guarding mapDb.",
      "tree": {
        "sha": "5925b09f81d65a898b94b9eaa662aa9bee5cb05c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5925b09f81d65a898b94b9eaa662aa9bee5cb05c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/49b8c3adad9460a80ed3de70e810e464b027b342",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49b8c3adad9460a80ed3de70e810e464b027b342",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/49b8c3adad9460a80ed3de70e810e464b027b342",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49b8c3adad9460a80ed3de70e810e464b027b342/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "54d4facd1586bf5cdb9453875e1bcc73627c6dd2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/54d4facd1586bf5cdb9453875e1bcc73627c6dd2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/54d4facd1586bf5cdb9453875e1bcc73627c6dd2"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "3b703ee50d0e38071b4bee63e6a30f5fd76a649e",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49b8c3adad9460a80ed3de70e810e464b027b342/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49b8c3adad9460a80ed3de70e810e464b027b342/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=49b8c3adad9460a80ed3de70e810e464b027b342",
        "patch": "@@ -31,7 +31,7 @@ namespace {\n //! (https://docs.oracle.com/cd/E17275_01/html/programmer_reference/program_copy.html),\n //! so bitcoin should never create different databases with the same fileid, but\n //! this error can be triggered if users manually copy database files.\n-void CheckUniqueFileid(const CDBEnv& env, const std::string& filename, Db& db)\n+void CheckUniqueFileid(const CDBEnv& env, const std::string& filename, Db& db) EXCLUSIVE_LOCKS_REQUIRED(env.cs_db)\n {\n     if (env.IsMock()) return;\n "
      }
    ]
  },
  {
    "sha": "1f6ff489e2a8a686a04294486a149a6abe0d1a2f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZjZmZjQ4OWUyYThhNjg2YTA0Mjk0NDg2YTE0OWE2YWJlMGQxYTJm",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-10-30T22:20:36Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Add EXCLUSIVE_LOCKS_REQUIRED(cs_main). cs_main is guarding chainActive and mapNodeState.",
      "tree": {
        "sha": "4a70ce982484e8e939514031edb4f1a4ca067f0f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4a70ce982484e8e939514031edb4f1a4ca067f0f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1f6ff489e2a8a686a04294486a149a6abe0d1a2f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f6ff489e2a8a686a04294486a149a6abe0d1a2f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1f6ff489e2a8a686a04294486a149a6abe0d1a2f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f6ff489e2a8a686a04294486a149a6abe0d1a2f/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "49b8c3adad9460a80ed3de70e810e464b027b342",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49b8c3adad9460a80ed3de70e810e464b027b342",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/49b8c3adad9460a80ed3de70e810e464b027b342"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "b48ef9dfb7b5badb252bfeaaff2b8c1280d4d49a",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1f6ff489e2a8a686a04294486a149a6abe0d1a2f/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1f6ff489e2a8a686a04294486a149a6abe0d1a2f/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=1f6ff489e2a8a686a04294486a149a6abe0d1a2f",
        "patch": "@@ -2963,7 +2963,7 @@ bool PeerLogicValidation::ProcessMessages(CNode* pfrom, std::atomic<bool>& inter\n     return fMoreWork;\n }\n \n-void PeerLogicValidation::ConsiderEviction(CNode *pto, int64_t time_in_seconds)\n+void PeerLogicValidation::ConsiderEviction(CNode *pto, int64_t time_in_seconds) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     AssertLockHeld(cs_main);\n "
      }
    ]
  },
  {
    "sha": "bdca80cffaaf065281291e551554468727dbc8c5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZGNhODBjZmZhYWYwNjUyODEyOTFlNTUxNTU0NDY4NzI3ZGJjOGM1",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-10-30T22:22:39Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Remove EXCLUSIVE_LOCKS_REQUIRED(cs_filter) from PeerLogicValidation::InitializeNode(CNode *pnode)",
      "tree": {
        "sha": "d4dc5b401f94026f0223debf48a897d871a5efb1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d4dc5b401f94026f0223debf48a897d871a5efb1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bdca80cffaaf065281291e551554468727dbc8c5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bdca80cffaaf065281291e551554468727dbc8c5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bdca80cffaaf065281291e551554468727dbc8c5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bdca80cffaaf065281291e551554468727dbc8c5/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1f6ff489e2a8a686a04294486a149a6abe0d1a2f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f6ff489e2a8a686a04294486a149a6abe0d1a2f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1f6ff489e2a8a686a04294486a149a6abe0d1a2f"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "03774c0a057f2a4672334e47bec33855db0eb3e5",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bdca80cffaaf065281291e551554468727dbc8c5/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bdca80cffaaf065281291e551554468727dbc8c5/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=bdca80cffaaf065281291e551554468727dbc8c5",
        "patch": "@@ -566,7 +566,7 @@ bool IsOutboundDisconnectionCandidate(const CNode *node)\n     return !(node->fInbound || node->m_manual_connection || node->fFeeler || node->fOneShot);\n }\n \n-void PeerLogicValidation::InitializeNode(CNode *pnode) EXCLUSIVE_LOCKS_REQUIRED(cs_filter) {\n+void PeerLogicValidation::InitializeNode(CNode *pnode) {\n     CAddress addr = pnode->addr;\n     std::string addrName = pnode->GetAddrName();\n     NodeId nodeid = pnode->GetId();"
      }
    ]
  },
  {
    "sha": "6622f35d7f59a2947ced5f776fbd5688d4b1e915",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NjIyZjM1ZDdmNTlhMjk0N2NlZDVmNzc2ZmJkNTY4OGQ0YjFlOTE1",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-10-31T16:36:20Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Add GUARDED_BY(cs_addrMan). Add EXCLUSIVE_LOCKS_REQUIRED(cs_addrMan). Change lock scope.",
      "tree": {
        "sha": "bd219ae0177cbdad8f49cd5c77e4ebc18da51436",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bd219ae0177cbdad8f49cd5c77e4ebc18da51436"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6622f35d7f59a2947ced5f776fbd5688d4b1e915",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6622f35d7f59a2947ced5f776fbd5688d4b1e915",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6622f35d7f59a2947ced5f776fbd5688d4b1e915",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6622f35d7f59a2947ced5f776fbd5688d4b1e915/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bdca80cffaaf065281291e551554468727dbc8c5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bdca80cffaaf065281291e551554468727dbc8c5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bdca80cffaaf065281291e551554468727dbc8c5"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 15,
      "deletions": 17
    },
    "files": [
      {
        "sha": "5c26f66a9bcf49f05ab05c6d338c39cd048586a2",
        "filename": "src/addrman.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6622f35d7f59a2947ced5f776fbd5688d4b1e915/src/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6622f35d7f59a2947ced5f776fbd5688d4b1e915/src/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.cpp?ref=6622f35d7f59a2947ced5f776fbd5688d4b1e915",
        "patch": "@@ -65,7 +65,7 @@ double CAddrInfo::GetChance(int64_t nNow) const\n     return fChance;\n }\n \n-CAddrInfo* CAddrMan::Find(const CNetAddr& addr, int* pnId)\n+CAddrInfo* CAddrMan::Find(const CNetAddr& addr, int* pnId) EXCLUSIVE_LOCKS_REQUIRED(cs_addrMan)\n {\n     std::map<CNetAddr, int>::iterator it = mapAddr.find(addr);\n     if (it == mapAddr.end())\n@@ -312,7 +312,7 @@ bool CAddrMan::Add_(const CAddress& addr, const CNetAddr& source, int64_t nTimeP\n     return fNew;\n }\n \n-void CAddrMan::Attempt_(const CService& addr, bool fCountFailure, int64_t nTime)\n+void CAddrMan::Attempt_(const CService& addr, bool fCountFailure, int64_t nTime) EXCLUSIVE_LOCKS_REQUIRED(cs_addrMan)\n {\n     CAddrInfo* pinfo = Find(addr);\n \n@@ -334,7 +334,7 @@ void CAddrMan::Attempt_(const CService& addr, bool fCountFailure, int64_t nTime)\n     }\n }\n \n-CAddrInfo CAddrMan::Select_(bool newOnly)\n+CAddrInfo CAddrMan::Select_(bool newOnly) EXCLUSIVE_LOCKS_REQUIRED(cs_addrMan)\n {\n     if (size() == 0)\n         return CAddrInfo();\n@@ -480,7 +480,7 @@ void CAddrMan::GetAddr_(std::vector<CAddress>& vAddr) EXCLUSIVE_LOCKS_REQUIRED(c\n     }\n }\n \n-void CAddrMan::Connected_(const CService& addr, int64_t nTime)\n+void CAddrMan::Connected_(const CService& addr, int64_t nTime) EXCLUSIVE_LOCKS_REQUIRED(cs_addrMan)\n {\n     CAddrInfo* pinfo = Find(addr);\n \n@@ -500,7 +500,7 @@ void CAddrMan::Connected_(const CService& addr, int64_t nTime)\n         info.nTime = nTime;\n }\n \n-void CAddrMan::SetServices_(const CService& addr, ServiceFlags nServices)\n+void CAddrMan::SetServices_(const CService& addr, ServiceFlags nServices) EXCLUSIVE_LOCKS_REQUIRED(cs_addrMan)\n {\n     CAddrInfo* pinfo = Find(addr);\n "
      },
      {
        "sha": "d3ea04911d6753bb38e293a6820e1bdc15907018",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 10,
        "deletions": 12,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6622f35d7f59a2947ced5f776fbd5688d4b1e915/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6622f35d7f59a2947ced5f776fbd5688d4b1e915/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=6622f35d7f59a2947ced5f776fbd5688d4b1e915",
        "patch": "@@ -186,31 +186,31 @@ class CAddrMan\n     mutable CCriticalSection cs_addrMan;\n \n     //! last used nId\n-    int nIdCount;\n+    int nIdCount GUARDED_BY(cs_addrMan);\n \n     //! table with information about all nIds\n-    std::map<int, CAddrInfo> mapInfo;\n+    std::map<int, CAddrInfo> mapInfo GUARDED_BY(cs_addrMan);\n \n     //! find an nId based on its network address\n-    std::map<CNetAddr, int> mapAddr;\n+    std::map<CNetAddr, int> mapAddr GUARDED_BY(cs_addrMan);\n \n     //! randomly-ordered vector of all nIds\n     std::vector<int> vRandom GUARDED_BY(cs_addrMan);\n \n     // number of \"tried\" entries\n-    int nTried;\n+    int nTried GUARDED_BY(cs_addrMan);\n \n     //! list of \"tried\" buckets\n-    int vvTried[ADDRMAN_TRIED_BUCKET_COUNT][ADDRMAN_BUCKET_SIZE];\n+    int vvTried[ADDRMAN_TRIED_BUCKET_COUNT][ADDRMAN_BUCKET_SIZE] GUARDED_BY(cs_addrMan);\n \n     //! number of (unique) \"new\" entries\n-    int nNew;\n+    int nNew GUARDED_BY(cs_addrMan);\n \n     //! list of \"new\" buckets\n-    int vvNew[ADDRMAN_NEW_BUCKET_COUNT][ADDRMAN_BUCKET_SIZE];\n+    int vvNew[ADDRMAN_NEW_BUCKET_COUNT][ADDRMAN_BUCKET_SIZE] GUARDED_BY(cs_addrMan);\n \n     //! last time Good was called (memory only)\n-    int64_t nLastGood;\n+    int64_t nLastGood GUARDED_BY(cs_addrMan);\n \n protected:\n     //! secret key to randomize bucket select with\n@@ -455,10 +455,8 @@ class CAddrMan\n \n     void Clear()\n     {\n-        {\n-            LOCK(cs_addrMan);\n-            std::vector<int>().swap(vRandom);\n-        }\n+        LOCK(cs_addrMan);\n+        std::vector<int>().swap(vRandom);\n         nKey = GetRandHash();\n         for (size_t bucket = 0; bucket < ADDRMAN_NEW_BUCKET_COUNT; bucket++) {\n             for (size_t entry = 0; entry < ADDRMAN_BUCKET_SIZE; entry++) {"
      }
    ]
  },
  {
    "sha": "9267aa0bedd1c02e4593224542fbfec47a872fcf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MjY3YWEwYmVkZDFjMDJlNDU5MzIyNDU0MmZiZmVjNDdhODcyZmNm",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-11-02T21:05:33Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Add EXCLUSIVE_LOCKS_REQUIRED(cs_main) to ReceivedBlockTransactions. Remove redundant lock.",
      "tree": {
        "sha": "8c03152a60435e99f5e12f9cfc745219b20e003e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8c03152a60435e99f5e12f9cfc745219b20e003e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9267aa0bedd1c02e4593224542fbfec47a872fcf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9267aa0bedd1c02e4593224542fbfec47a872fcf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9267aa0bedd1c02e4593224542fbfec47a872fcf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9267aa0bedd1c02e4593224542fbfec47a872fcf/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6622f35d7f59a2947ced5f776fbd5688d4b1e915",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6622f35d7f59a2947ced5f776fbd5688d4b1e915",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6622f35d7f59a2947ced5f776fbd5688d4b1e915"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 3,
      "deletions": 6
    },
    "files": [
      {
        "sha": "0bdf9f9fbd52fa840d17a30f93567acd412c9a76",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 6,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9267aa0bedd1c02e4593224542fbfec47a872fcf/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9267aa0bedd1c02e4593224542fbfec47a872fcf/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=9267aa0bedd1c02e4593224542fbfec47a872fcf",
        "patch": "@@ -2699,7 +2699,7 @@ static CBlockIndex* AddToBlockIndex(const CBlockHeader& block) EXCLUSIVE_LOCKS_R\n }\n \n /** Mark a block as having its data received and checked (up to BLOCK_VALID_TRANSACTIONS). */\n-static bool ReceivedBlockTransactions(const CBlock &block, CValidationState& state, CBlockIndex *pindexNew, const CDiskBlockPos& pos, const Consensus::Params& consensusParams)\n+static bool ReceivedBlockTransactions(const CBlock &block, CValidationState& state, CBlockIndex *pindexNew, const CDiskBlockPos& pos, const Consensus::Params& consensusParams) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     pindexNew->nTx = block.vtx.size();\n     pindexNew->nChainTx = 0;\n@@ -2727,11 +2727,8 @@ static bool ReceivedBlockTransactions(const CBlock &block, CValidationState& sta\n                 LOCK(cs_nBlockSequenceId);\n                 pindex->nSequenceId = nBlockSequenceId++;\n             }\n-            {\n-                LOCK(cs_main);\n-                if (chainActive.Tip() == nullptr || !setBlockIndexCandidates.value_comp()(pindex, chainActive.Tip())) {\n-                    setBlockIndexCandidates.insert(pindex);\n-                }\n+            if (chainActive.Tip() == nullptr || !setBlockIndexCandidates.value_comp()(pindex, chainActive.Tip())) {\n+                setBlockIndexCandidates.insert(pindex);\n             }\n             std::pair<std::multimap<CBlockIndex*, CBlockIndex*>::iterator, std::multimap<CBlockIndex*, CBlockIndex*>::iterator> range = mapBlocksUnlinked.equal_range(pindex);\n             while (range.first != range.second) {"
      }
    ]
  },
  {
    "sha": "f67c107cab12082ff584afe5bdae5f19c0d57f26",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNjdjMTA3Y2FiMTIwODJmZjU4NGFmZTViZGFlNWYxOWMwZDU3ZjI2",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-11-02T21:06:57Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Remove invalid assert and corresponding lock. chainActive height can go down.",
      "tree": {
        "sha": "dc1658884e23a42e3bb159cc81a4e5d4b3702580",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dc1658884e23a42e3bb159cc81a4e5d4b3702580"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f67c107cab12082ff584afe5bdae5f19c0d57f26",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f67c107cab12082ff584afe5bdae5f19c0d57f26",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f67c107cab12082ff584afe5bdae5f19c0d57f26",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f67c107cab12082ff584afe5bdae5f19c0d57f26/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9267aa0bedd1c02e4593224542fbfec47a872fcf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9267aa0bedd1c02e4593224542fbfec47a872fcf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9267aa0bedd1c02e4593224542fbfec47a872fcf"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 0,
      "deletions": 4
    },
    "files": [
      {
        "sha": "4cb949a2ea3ca696a2d71441864e8f1478610273",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f67c107cab12082ff584afe5bdae5f19c0d57f26/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f67c107cab12082ff584afe5bdae5f19c0d57f26/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=f67c107cab12082ff584afe5bdae5f19c0d57f26",
        "patch": "@@ -2700,10 +2700,6 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n     // better privacy.\n     if (GetRandInt(10) == 0)\n         txNew.nLockTime = std::max(0, (int)txNew.nLockTime - GetRandInt(100));\n-    {\n-        LOCK(cs_main);\n-        assert(txNew.nLockTime <= (unsigned int)chainActive.Height());\n-    }\n     assert(txNew.nLockTime < LOCKTIME_THRESHOLD);\n     FeeCalculation feeCalc;\n     CAmount nFeeNeeded;"
      }
    ]
  },
  {
    "sha": "e376f750388863270034e6bbafc74d24efe933f8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMzc2Zjc1MDM4ODg2MzI3MDAzNGU2YmJhZmM3NGQyNGVmZTkzM2Y4",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-11-03T10:28:02Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Add GetDepthInMainChain lock requirement to header file. Add locking requirements that follow.",
      "tree": {
        "sha": "3515a0d98656259bdb8dfb00a6aa57348f0b7f30",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3515a0d98656259bdb8dfb00a6aa57348f0b7f30"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e376f750388863270034e6bbafc74d24efe933f8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e376f750388863270034e6bbafc74d24efe933f8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e376f750388863270034e6bbafc74d24efe933f8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e376f750388863270034e6bbafc74d24efe933f8/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f67c107cab12082ff584afe5bdae5f19c0d57f26",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f67c107cab12082ff584afe5bdae5f19c0d57f26",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f67c107cab12082ff584afe5bdae5f19c0d57f26"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 19,
      "deletions": 17
    },
    "files": [
      {
        "sha": "4fda1916dcf5946662581e9f075015558f67584e",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e376f750388863270034e6bbafc74d24efe933f8/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e376f750388863270034e6bbafc74d24efe933f8/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=e376f750388863270034e6bbafc74d24efe933f8",
        "patch": "@@ -45,7 +45,7 @@ static int64_t CalculateMaximumSignedTxSize(const CTransaction &tx, const CWalle\n \n //! Check whether transaction has descendant in wallet or mempool, or has been\n //! mined, or conflicts with a mined transaction. Return a feebumper::Result.\n-static feebumper::Result PreconditionChecks(const CWallet* wallet, const CWalletTx& wtx, std::vector<std::string>& errors)\n+static feebumper::Result PreconditionChecks(const CWallet* wallet, const CWalletTx& wtx, std::vector<std::string>& errors) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     if (wallet->HasWalletSpend(wtx.GetHash())) {\n         errors.push_back(\"Transaction has descendants in the wallet\");"
      },
      {
        "sha": "bb477c73a46854292991e80705d29e24f1def264",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e376f750388863270034e6bbafc74d24efe933f8/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e376f750388863270034e6bbafc74d24efe933f8/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=e376f750388863270034e6bbafc74d24efe933f8",
        "patch": "@@ -1338,7 +1338,7 @@ struct tallyitem\n     }\n };\n \n-UniValue ListReceived(CWallet * const pwallet, const UniValue& params, bool fByAccounts) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+UniValue ListReceived(CWallet * const pwallet, const UniValue& params, bool fByAccounts) EXCLUSIVE_LOCKS_REQUIRED(cs_main, pwallet->cs_wallet)\n {\n     // Minimum confirmations\n     int nMinDepth = 1;"
      },
      {
        "sha": "d19cd9a95b22e149401968d2e36b45054c23b057",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e376f750388863270034e6bbafc74d24efe933f8/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e376f750388863270034e6bbafc74d24efe933f8/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=e376f750388863270034e6bbafc74d24efe933f8",
        "patch": "@@ -560,7 +560,7 @@ void CWallet::SyncMetaData(std::pair<TxSpends::iterator, TxSpends::iterator> ran\n  * Outpoint is spent if any non-conflicted transaction\n  * spends it:\n  */\n-bool CWallet::IsSpent(const uint256& hash, unsigned int n) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\n+bool CWallet::IsSpent(const uint256& hash, unsigned int n) const EXCLUSIVE_LOCKS_REQUIRED(cs_main, cs_wallet)\n {\n     const COutPoint outpoint(hash, n);\n     std::pair<TxSpends::const_iterator, TxSpends::const_iterator> range;\n@@ -1722,7 +1722,7 @@ void CWallet::ReacceptWalletTransactions()\n     }\n }\n \n-bool CWalletTx::RelayWalletTransaction(CConnman* connman)\n+bool CWalletTx::RelayWalletTransaction(CConnman* connman) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     assert(pwallet->GetBroadcastTransactions());\n     if (!IsCoinBase() && !isAbandoned() && GetDepthInMainChain() == 0)\n@@ -1820,7 +1820,7 @@ CAmount CWalletTx::GetCredit(const isminefilter& filter) const\n     return credit;\n }\n \n-CAmount CWalletTx::GetImmatureCredit(bool fUseCache) const\n+CAmount CWalletTx::GetImmatureCredit(bool fUseCache) const EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     if (IsCoinBase() && GetBlocksToMaturity() > 0 && IsInMainChain())\n     {\n@@ -1834,7 +1834,7 @@ CAmount CWalletTx::GetImmatureCredit(bool fUseCache) const\n     return 0;\n }\n \n-CAmount CWalletTx::GetAvailableCredit(bool fUseCache) const\n+CAmount CWalletTx::GetAvailableCredit(bool fUseCache) const EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     if (pwallet == nullptr)\n         return 0;\n@@ -1865,7 +1865,7 @@ CAmount CWalletTx::GetAvailableCredit(bool fUseCache) const\n     return nCredit;\n }\n \n-CAmount CWalletTx::GetImmatureWatchOnlyCredit(const bool& fUseCache) const\n+CAmount CWalletTx::GetImmatureWatchOnlyCredit(const bool& fUseCache) const EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     if (IsCoinBase() && GetBlocksToMaturity() > 0 && IsInMainChain())\n     {\n@@ -1879,7 +1879,7 @@ CAmount CWalletTx::GetImmatureWatchOnlyCredit(const bool& fUseCache) const\n     return 0;\n }\n \n-CAmount CWalletTx::GetAvailableWatchOnlyCredit(const bool& fUseCache) const\n+CAmount CWalletTx::GetAvailableWatchOnlyCredit(const bool& fUseCache) const EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     if (pwallet == nullptr)\n         return 0;\n@@ -1923,7 +1923,7 @@ bool CWalletTx::InMempool() const\n     return fInMempool;\n }\n \n-bool CWalletTx::IsTrusted() const\n+bool CWalletTx::IsTrusted() const EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     // Quick answer in most cases\n     if (!CheckFinalTx(*tx))\n@@ -1963,7 +1963,7 @@ bool CWalletTx::IsEquivalentTo(const CWalletTx& _tx) const\n         return CTransaction(tx1) == CTransaction(tx2);\n }\n \n-std::vector<uint256> CWallet::ResendWalletTransactionsBefore(int64_t nTime, CConnman* connman)\n+std::vector<uint256> CWallet::ResendWalletTransactionsBefore(int64_t nTime, CConnman* connman) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     std::vector<uint256> result;\n \n@@ -1988,7 +1988,7 @@ std::vector<uint256> CWallet::ResendWalletTransactionsBefore(int64_t nTime, CCon\n     return result;\n }\n \n-void CWallet::ResendWalletTransactions(int64_t nBestBlockTime, CConnman* connman)\n+void CWallet::ResendWalletTransactions(int64_t nBestBlockTime, CConnman* connman) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     // Do this infrequently and randomly to avoid giving away\n     // that these are our transactions.\n@@ -3430,7 +3430,7 @@ int64_t CWallet::GetOldestKeyPoolTime()\n     return oldestKey;\n }\n \n-std::map<CTxDestination, CAmount> CWallet::GetAddressBalances()\n+std::map<CTxDestination, CAmount> CWallet::GetAddressBalances() EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     std::map<CTxDestination, CAmount> balances;\n \n@@ -4048,7 +4048,7 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile) EXCLUSIVE_L\n \n std::atomic<bool> CWallet::fFlushScheduled(false);\n \n-void CWallet::postInitProcess(CScheduler& scheduler)\n+void CWallet::postInitProcess(CScheduler& scheduler) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     // Add wallet transactions that aren't already in a block to mempool\n     // Do this here as mempool requires genesis block to be loaded\n@@ -4112,7 +4112,7 @@ int CMerkleTx::GetDepthInMainChain(const CBlockIndex* &pindexRet) const EXCLUSIV\n     return ((nIndex == -1) ? (-1) : 1) * (chainActive.Height() - pindex->nHeight + 1);\n }\n \n-int CMerkleTx::GetBlocksToMaturity() const\n+int CMerkleTx::GetBlocksToMaturity() const EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     if (!IsCoinBase())\n         return 0;"
      },
      {
        "sha": "665952dd5fe0fe2bb15db8603ca6dc70de4bde1a",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e376f750388863270034e6bbafc74d24efe933f8/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e376f750388863270034e6bbafc74d24efe933f8/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=e376f750388863270034e6bbafc74d24efe933f8",
        "patch": "@@ -29,6 +29,8 @@\n #include <utility>\n #include <vector>\n \n+extern CCriticalSection cs_main;\n+\n typedef CWallet* CWalletRef;\n extern std::vector<CWalletRef> vpwallets;\n \n@@ -244,9 +246,9 @@ class CMerkleTx\n      *  0  : in memory pool, waiting to be included in a block\n      * >=1 : this many blocks deep in the main chain\n      */\n-    int GetDepthInMainChain(const CBlockIndex* &pindexRet) const;\n-    int GetDepthInMainChain() const { const CBlockIndex *pindexRet; return GetDepthInMainChain(pindexRet); }\n-    bool IsInMainChain() const { const CBlockIndex *pindexRet; return GetDepthInMainChain(pindexRet) > 0; }\n+    int GetDepthInMainChain(const CBlockIndex* &pindexRet) const EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+    int GetDepthInMainChain() const EXCLUSIVE_LOCKS_REQUIRED(cs_main) { const CBlockIndex *pindexRet; return GetDepthInMainChain(pindexRet); }\n+    bool IsInMainChain() const EXCLUSIVE_LOCKS_REQUIRED(cs_main) { const CBlockIndex *pindexRet; return GetDepthInMainChain(pindexRet) > 0; }\n     int GetBlocksToMaturity() const;\n     bool hashUnset() const { return (hashBlock.IsNull() || hashBlock == ABANDON_HASH); }\n     bool isAbandoned() const { return (hashBlock == ABANDON_HASH); }"
      }
    ]
  },
  {
    "sha": "7bf10ac5d6eb125f337241da018e17149dec9026",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YmYxMGFjNWQ2ZWIxMjVmMzM3MjQxZGEwMThlMTcxNDlkZWM5MDI2",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-11-03T14:28:02Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Add EXCLUSIVE_LOCKS_REQUIRED(cs_main). cs_main is guarding g_last_tip_update.",
      "tree": {
        "sha": "3b8a8448213523dd6eb0a9dd743bf0f666e481fb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3b8a8448213523dd6eb0a9dd743bf0f666e481fb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7bf10ac5d6eb125f337241da018e17149dec9026",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7bf10ac5d6eb125f337241da018e17149dec9026",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7bf10ac5d6eb125f337241da018e17149dec9026",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7bf10ac5d6eb125f337241da018e17149dec9026/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e376f750388863270034e6bbafc74d24efe933f8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e376f750388863270034e6bbafc74d24efe933f8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e376f750388863270034e6bbafc74d24efe933f8"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "4b0426150b16dc126e619491f950439f17197329",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7bf10ac5d6eb125f337241da018e17149dec9026/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7bf10ac5d6eb125f337241da018e17149dec9026/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=7bf10ac5d6eb125f337241da018e17149dec9026",
        "patch": "@@ -129,7 +129,7 @@ namespace {\n     int g_outbound_peers_with_protect_from_disconnect = 0;\n \n     /** When our tip was last updated. */\n-    int64_t g_last_tip_update = 0;\n+    int64_t g_last_tip_update GUARDED_BY(cs_main) = 0;\n \n     /** Relay map, protected by cs_main. */\n     typedef std::map<uint256, CTransactionRef> MapRelay;\n@@ -435,7 +435,7 @@ void MaybeSetPeerAsAnnouncingHeaderAndIDs(NodeId nodeid, CConnman* connman) EXCL\n     }\n }\n \n-bool TipMayBeStale(const Consensus::Params &consensusParams)\n+bool TipMayBeStale(const Consensus::Params &consensusParams) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     AssertLockHeld(cs_main);\n     if (g_last_tip_update == 0) {"
      }
    ]
  },
  {
    "sha": "e8641cd848f2f883dad61951d92fe22872e14dc6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplODY0MWNkODQ4ZjJmODgzZGFkNjE5NTFkOTJmZTIyODcyZTE0ZGM2",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-11-03T15:07:25Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Repeat already held lock inside lambda to please clang -Wthread-safety",
      "tree": {
        "sha": "d8f8ece97dca25c790e614448ef83d057128a50f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d8f8ece97dca25c790e614448ef83d057128a50f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e8641cd848f2f883dad61951d92fe22872e14dc6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8641cd848f2f883dad61951d92fe22872e14dc6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e8641cd848f2f883dad61951d92fe22872e14dc6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8641cd848f2f883dad61951d92fe22872e14dc6/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7bf10ac5d6eb125f337241da018e17149dec9026",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7bf10ac5d6eb125f337241da018e17149dec9026",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7bf10ac5d6eb125f337241da018e17149dec9026"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 4,
      "deletions": 0
    },
    "files": [
      {
        "sha": "b02f145682ac7ac64594abd58c7a3f6b0c1bfc6c",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8641cd848f2f883dad61951d92fe22872e14dc6/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8641cd848f2f883dad61951d92fe22872e14dc6/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=e8641cd848f2f883dad61951d92fe22872e14dc6",
        "patch": "@@ -3031,6 +3031,8 @@ void PeerLogicValidation::EvictExtraOutboundPeers(int64_t time_in_seconds)\n         LOCK(cs_main);\n \n         connman->ForEachNode([&](CNode* pnode) {\n+            AssertLockHeld(cs_main);\n+            LOCK(cs_main); // repeat lock in inside lambda to please clang -Wthread-safety\n             // Ignore non-outbound peers, or nodes marked for disconnect already\n             if (!IsOutboundDisconnectionCandidate(pnode) || pnode->fDisconnect) return;\n             CNodeState *state = State(pnode->GetId());\n@@ -3044,6 +3046,8 @@ void PeerLogicValidation::EvictExtraOutboundPeers(int64_t time_in_seconds)\n         });\n         if (worst_peer != -1) {\n             bool disconnected = connman->ForNode(worst_peer, [&](CNode *pnode) {\n+                AssertLockHeld(cs_main);\n+                LOCK(cs_main); // repeat lock inside lambda to please clang -Wthread-safety\n                 // Only disconnect a peer that has been connected to us for\n                 // some reasonable fraction of our check-frequency, to give\n                 // it time for new information to have arrived."
      }
    ]
  },
  {
    "sha": "ac75e0aee4211f0221ee07a6f4ccaaa82024d6e5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYzc1ZTBhZWU0MjExZjAyMjFlZTA3YTZmNGNjYWFhODIwMjRkNmU1",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-11-06T10:04:09Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Mirror locking requirements to header files.",
      "tree": {
        "sha": "c2f10ea7061fa19c8d591403d90874f86f54328a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c2f10ea7061fa19c8d591403d90874f86f54328a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ac75e0aee4211f0221ee07a6f4ccaaa82024d6e5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ac75e0aee4211f0221ee07a6f4ccaaa82024d6e5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ac75e0aee4211f0221ee07a6f4ccaaa82024d6e5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ac75e0aee4211f0221ee07a6f4ccaaa82024d6e5/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e8641cd848f2f883dad61951d92fe22872e14dc6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8641cd848f2f883dad61951d92fe22872e14dc6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e8641cd848f2f883dad61951d92fe22872e14dc6"
      }
    ],
    "stats": {
      "total": 296,
      "additions": 158,
      "deletions": 138
    },
    "files": [
      {
        "sha": "4454c7d55d13b0e6f991c37f08c0855540197c9e",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 14,
        "deletions": 14,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ac75e0aee4211f0221ee07a6f4ccaaa82024d6e5/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ac75e0aee4211f0221ee07a6f4ccaaa82024d6e5/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=ac75e0aee4211f0221ee07a6f4ccaaa82024d6e5",
        "patch": "@@ -220,52 +220,52 @@ class CAddrMan\n     FastRandomContext insecure_rand;\n \n     //! Find an entry.\n-    CAddrInfo* Find(const CNetAddr& addr, int *pnId = nullptr);\n+    CAddrInfo* Find(const CNetAddr& addr, int *pnId = nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_addrMan);\n \n     //! find an entry, creating it if necessary.\n     //! nTime and nServices of the found node are updated, if necessary.\n-    CAddrInfo* Create(const CAddress &addr, const CNetAddr &addrSource, int *pnId = nullptr);\n+    CAddrInfo* Create(const CAddress &addr, const CNetAddr &addrSource, int *pnId = nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_addrMan);\n \n     //! Swap two elements in vRandom.\n-    void SwapRandom(unsigned int nRandomPos1, unsigned int nRandomPos2);\n+    void SwapRandom(unsigned int nRandomPos1, unsigned int nRandomPos2) EXCLUSIVE_LOCKS_REQUIRED(cs_addrMan);\n \n     //! Move an entry from the \"new\" table(s) to the \"tried\" table\n-    void MakeTried(CAddrInfo& info, int nId);\n+    void MakeTried(CAddrInfo& info, int nId) EXCLUSIVE_LOCKS_REQUIRED(cs_addrMan);\n \n     //! Delete an entry. It must not be in tried, and have refcount 0.\n-    void Delete(int nId);\n+    void Delete(int nId) EXCLUSIVE_LOCKS_REQUIRED(cs_addrMan);\n \n     //! Clear a position in a \"new\" table. This is the only place where entries are actually deleted.\n-    void ClearNew(int nUBucket, int nUBucketPos);\n+    void ClearNew(int nUBucket, int nUBucketPos) EXCLUSIVE_LOCKS_REQUIRED(cs_addrMan);\n \n     //! Mark an entry \"good\", possibly moving it from \"new\" to \"tried\".\n-    void Good_(const CService &addr, int64_t nTime);\n+    void Good_(const CService &addr, int64_t nTime) EXCLUSIVE_LOCKS_REQUIRED(cs_addrMan);\n \n     //! Add an entry to the \"new\" table.\n-    bool Add_(const CAddress &addr, const CNetAddr& source, int64_t nTimePenalty);\n+    bool Add_(const CAddress &addr, const CNetAddr& source, int64_t nTimePenalty) EXCLUSIVE_LOCKS_REQUIRED(cs_addrMan);\n \n     //! Mark an entry as attempted to connect.\n-    void Attempt_(const CService &addr, bool fCountFailure, int64_t nTime);\n+    void Attempt_(const CService &addr, bool fCountFailure, int64_t nTime) EXCLUSIVE_LOCKS_REQUIRED(cs_addrMan);\n \n     //! Select an address to connect to, if newOnly is set to true, only the new table is selected from.\n-    CAddrInfo Select_(bool newOnly);\n+    CAddrInfo Select_(bool newOnly) EXCLUSIVE_LOCKS_REQUIRED(cs_addrMan);\n \n     //! Wraps GetRandInt to allow tests to override RandomInt and make it determinismistic.\n     virtual int RandomInt(int nMax);\n \n #ifdef DEBUG_ADDRMAN\n     //! Perform consistency check. Returns an error code or zero.\n-    int Check_();\n+    int Check_() EXCLUSIVE_LOCKS_REQUIRED(cs_addrMan);\n #endif\n \n     //! Select several addresses at once.\n-    void GetAddr_(std::vector<CAddress> &vAddr);\n+    void GetAddr_(std::vector<CAddress> &vAddr) EXCLUSIVE_LOCKS_REQUIRED(cs_addrMan);\n \n     //! Mark an entry as currently-connected-to.\n-    void Connected_(const CService &addr, int64_t nTime);\n+    void Connected_(const CService &addr, int64_t nTime) EXCLUSIVE_LOCKS_REQUIRED(cs_addrMan);\n \n     //! Update an entry's service bits.\n-    void SetServices_(const CService &addr, ServiceFlags nServices);\n+    void SetServices_(const CService &addr, ServiceFlags nServices) EXCLUSIVE_LOCKS_REQUIRED(cs_addrMan);\n \n public:\n     /**"
      },
      {
        "sha": "a626233d51aee2b593a2872fd7104132f7f68c7f",
        "filename": "src/checkpoints.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ac75e0aee4211f0221ee07a6f4ccaaa82024d6e5/src/checkpoints.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ac75e0aee4211f0221ee07a6f4ccaaa82024d6e5/src/checkpoints.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.h?ref=ac75e0aee4211f0221ee07a6f4ccaaa82024d6e5",
        "patch": "@@ -5,12 +5,14 @@\n #ifndef BITCOIN_CHECKPOINTS_H\n #define BITCOIN_CHECKPOINTS_H\n \n+#include <sync.h>\n #include <uint256.h>\n \n #include <map>\n \n class CBlockIndex;\n struct CCheckpointData;\n+extern CCriticalSection cs_main;\n \n /**\n  * Block-chain checkpoints are compiled-in sanity checks.\n@@ -20,7 +22,7 @@ namespace Checkpoints\n {\n \n //! Returns last CBlockIndex* in mapBlockIndex that is a checkpoint\n-CBlockIndex* GetLastCheckpoint(const CCheckpointData& data);\n+CBlockIndex* GetLastCheckpoint(const CCheckpointData& data) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n } //namespace Checkpoints\n "
      },
      {
        "sha": "144cc3fc265daa27157520b9dd21b3a6018b3bde",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ac75e0aee4211f0221ee07a6f4ccaaa82024d6e5/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ac75e0aee4211f0221ee07a6f4ccaaa82024d6e5/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=ac75e0aee4211f0221ee07a6f4ccaaa82024d6e5",
        "patch": "@@ -611,7 +611,7 @@ void CleanupBlockRevFiles()\n     }\n }\n \n-void ThreadImport(std::vector<fs::path> vImportFiles)\n+void ThreadImport(std::vector<fs::path> vImportFiles) EXCLUSIVE_LOCKS_REQUIRED(cs_LastBlockFile)\n {\n     const CChainParams& chainparams = Params();\n     RenameThread(\"bitcoin-loadblk\");"
      },
      {
        "sha": "1bdd7949027bf7673c2ee721127d56c855220abd",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ac75e0aee4211f0221ee07a6f4ccaaa82024d6e5/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ac75e0aee4211f0221ee07a6f4ccaaa82024d6e5/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=ac75e0aee4211f0221ee07a6f4ccaaa82024d6e5",
        "patch": "@@ -8,6 +8,7 @@\n \n #include <primitives/block.h>\n #include <txmempool.h>\n+#include <validation.h>\n \n #include <stdint.h>\n #include <memory>\n@@ -178,7 +179,7 @@ class BlockAssembler\n     /** Add transactions based on feerate including unconfirmed ancestors\n       * Increments nPackagesSelected / nDescendantsUpdated with corresponding\n       * statistics from the package selection (for logging statistics). */\n-    void addPackageTxs(int &nPackagesSelected, int &nDescendantsUpdated);\n+    void addPackageTxs(int &nPackagesSelected, int &nDescendantsUpdated) EXCLUSIVE_LOCKS_REQUIRED(mempool.cs_txMemPool);\n \n     // helper functions for addPackageTxs()\n     /** Remove confirmed (inBlock) entries from given set */\n@@ -192,7 +193,7 @@ class BlockAssembler\n     bool TestPackageTransactions(const CTxMemPool::setEntries& package);\n     /** Return true if given transaction from mapTx has already been evaluated,\n       * or if the transaction's cached data in mapTx is incorrect. */\n-    bool SkipMapTxEntry(CTxMemPool::txiter it, indexed_modified_transaction_set &mapModifiedTx, CTxMemPool::setEntries &failedTx);\n+    bool SkipMapTxEntry(CTxMemPool::txiter it, indexed_modified_transaction_set &mapModifiedTx, CTxMemPool::setEntries &failedTx) EXCLUSIVE_LOCKS_REQUIRED(mempool.cs_txMemPool);\n     /** Sort the package in an order that is valid to appear in a block */\n     void SortForBlock(const CTxMemPool::setEntries& package, CTxMemPool::txiter entry, std::vector<CTxMemPool::txiter>& sortedEntries);\n     /** Add descendants of given transactions to mapModifiedTx with ancestor"
      },
      {
        "sha": "7bf1f6d98ba545bbe09103b9697674ca59c8539e",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ac75e0aee4211f0221ee07a6f4ccaaa82024d6e5/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ac75e0aee4211f0221ee07a6f4ccaaa82024d6e5/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=ac75e0aee4211f0221ee07a6f4ccaaa82024d6e5",
        "patch": "@@ -175,7 +175,7 @@ class CConnman\n \n     CConnman(uint64_t seed0, uint64_t seed1);\n     ~CConnman();\n-    bool Start(CScheduler& scheduler, const Options& options);\n+    bool Start(CScheduler& scheduler, const Options& options) EXCLUSIVE_LOCKS_REQUIRED(cs_totalBytesRecv, cs_totalBytesSent);\n     void Stop();\n     void Interrupt();\n     bool GetNetworkActive() const { return fNetworkActive; };"
      },
      {
        "sha": "6dc3484e84bcdc62537528da0016c82616757619",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ac75e0aee4211f0221ee07a6f4ccaaa82024d6e5/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ac75e0aee4211f0221ee07a6f4ccaaa82024d6e5/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=ac75e0aee4211f0221ee07a6f4ccaaa82024d6e5",
        "patch": "@@ -10,6 +10,8 @@\n #include <validationinterface.h>\n #include <consensus/params.h>\n \n+extern CCriticalSection cs_main;\n+\n /** Default for -maxorphantx, maximum number of orphan transactions kept in memory */\n static const unsigned int DEFAULT_MAX_ORPHAN_TRANSACTIONS = 100;\n /** Expiration time for orphan transactions in seconds */\n@@ -61,7 +63,7 @@ class PeerLogicValidation : public CValidationInterface, public NetEventsInterfa\n     */\n     bool SendMessages(CNode* pto, std::atomic<bool>& interrupt) override EXCLUSIVE_LOCKS_REQUIRED(pto->cs_sendProcessing);\n \n-    void ConsiderEviction(CNode *pto, int64_t time_in_seconds);\n+    void ConsiderEviction(CNode *pto, int64_t time_in_seconds) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n     void CheckForStaleTipAndEvictPeers(const Consensus::Params &consensusParams);\n     void EvictExtraOutboundPeers(int64_t time_in_seconds);\n \n@@ -79,6 +81,6 @@ struct CNodeStateStats {\n /** Get statistics from node state */\n bool GetNodeStateStats(NodeId nodeid, CNodeStateStats &stats);\n /** Increase a node's misbehavior score. */\n-void Misbehaving(NodeId nodeid, int howmuch);\n+void Misbehaving(NodeId nodeid, int howmuch) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n #endif // BITCOIN_NET_PROCESSING_H"
      },
      {
        "sha": "f9eed61fd25ea8caa5a4cc0276ac3e0b9641b59c",
        "filename": "src/policy/fees.h",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ac75e0aee4211f0221ee07a6f4ccaaa82024d6e5/src/policy/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ac75e0aee4211f0221ee07a6f4ccaaa82024d6e5/src/policy/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.h?ref=ac75e0aee4211f0221ee07a6f4ccaaa82024d6e5",
        "patch": "@@ -258,18 +258,18 @@ class CBlockPolicyEstimator\n     std::map<double, unsigned int> bucketMap GUARDED_BY(cs_feeEstimator); // Map of bucket upper-bound to index into all vectors by bucket\n \n     /** Process a transaction confirmed in a block*/\n-    bool processBlockTx(unsigned int nBlockHeight, const CTxMemPoolEntry* entry);\n+    bool processBlockTx(unsigned int nBlockHeight, const CTxMemPoolEntry* entry) EXCLUSIVE_LOCKS_REQUIRED(cs_feeEstimator);\n \n     /** Helper for estimateSmartFee */\n-    double estimateCombinedFee(unsigned int confTarget, double successThreshold, bool checkShorterHorizon, EstimationResult *result) const;\n+    double estimateCombinedFee(unsigned int confTarget, double successThreshold, bool checkShorterHorizon, EstimationResult *result) const EXCLUSIVE_LOCKS_REQUIRED(cs_feeEstimator);\n     /** Helper for estimateSmartFee */\n-    double estimateConservativeFee(unsigned int doubleTarget, EstimationResult *result) const;\n+    double estimateConservativeFee(unsigned int doubleTarget, EstimationResult *result) const EXCLUSIVE_LOCKS_REQUIRED(cs_feeEstimator);\n     /** Number of blocks of data recorded while fee estimates have been running */\n-    unsigned int BlockSpan() const;\n+    unsigned int BlockSpan() const EXCLUSIVE_LOCKS_REQUIRED(cs_feeEstimator);\n     /** Number of blocks of recorded fee estimate data represented in saved data file */\n-    unsigned int HistoricalBlockSpan() const;\n+    unsigned int HistoricalBlockSpan() const EXCLUSIVE_LOCKS_REQUIRED(cs_feeEstimator);\n     /** Calculation of highest target that reasonable estimate can be provided for */\n-    unsigned int MaxUsableEstimate() const;\n+    unsigned int MaxUsableEstimate() const EXCLUSIVE_LOCKS_REQUIRED(cs_feeEstimator);\n };\n \n class FeeFilterRounder"
      },
      {
        "sha": "499a97d5afeaf7a798091f310bffdd52f2ac4d9c",
        "filename": "src/policy/rbf.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ac75e0aee4211f0221ee07a6f4ccaaa82024d6e5/src/policy/rbf.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ac75e0aee4211f0221ee07a6f4ccaaa82024d6e5/src/policy/rbf.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/rbf.h?ref=ac75e0aee4211f0221ee07a6f4ccaaa82024d6e5",
        "patch": "@@ -23,6 +23,6 @@ bool SignalsOptInRBF(const CTransaction &tx);\n // according to BIP 125\n // This involves checking sequence numbers of the transaction, as well\n // as the sequence numbers of all in-mempool ancestors.\n-RBFTransactionState IsRBFOptIn(const CTransaction &tx, CTxMemPool &pool);\n+RBFTransactionState IsRBFOptIn(const CTransaction &tx, CTxMemPool &pool) EXCLUSIVE_LOCKS_REQUIRED(pool.cs_txMemPool);\n \n #endif // BITCOIN_POLICY_RBF_H"
      },
      {
        "sha": "bec9daabd9aee90c9ea5f1f8f749891467aa219e",
        "filename": "src/qt/transactiondesc.h",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ac75e0aee4211f0221ee07a6f4ccaaa82024d6e5/src/qt/transactiondesc.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ac75e0aee4211f0221ee07a6f4ccaaa82024d6e5/src/qt/transactiondesc.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.h?ref=ac75e0aee4211f0221ee07a6f4ccaaa82024d6e5",
        "patch": "@@ -8,11 +8,15 @@\n #include <QObject>\n #include <QString>\n \n+#include \"sync.h\"\n+\n class TransactionRecord;\n \n class CWallet;\n class CWalletTx;\n \n+extern CCriticalSection cs_main;\n+\n /** Provide a human-readable extended HTML description of a transaction.\n  */\n class TransactionDesc: public QObject\n@@ -25,7 +29,7 @@ class TransactionDesc: public QObject\n private:\n     TransactionDesc() {}\n \n-    static QString FormatTxStatus(const CWalletTx& wtx);\n+    static QString FormatTxStatus(const CWalletTx& wtx) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n };\n \n #endif // BITCOIN_QT_TRANSACTIONDESC_H"
      },
      {
        "sha": "7717e24c71a9e9595c58332345ab72aec8a96f03",
        "filename": "src/qt/transactionrecord.h",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ac75e0aee4211f0221ee07a6f4ccaaa82024d6e5/src/qt/transactionrecord.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ac75e0aee4211f0221ee07a6f4ccaaa82024d6e5/src/qt/transactionrecord.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.h?ref=ac75e0aee4211f0221ee07a6f4ccaaa82024d6e5",
        "patch": "@@ -6,6 +6,7 @@\n #define BITCOIN_QT_TRANSACTIONRECORD_H\n \n #include <amount.h>\n+#include <sync.h>\n #include <uint256.h>\n \n #include <QList>\n@@ -14,6 +15,8 @@\n class CWallet;\n class CWalletTx;\n \n+extern CCriticalSection cs_main;\n+\n /** UI model for transaction status. The transaction status is the part of a transaction that will change over time.\n  */\n class TransactionStatus\n@@ -136,11 +139,11 @@ class TransactionRecord\n \n     /** Update status from core wallet tx.\n      */\n-    void updateStatus(const CWalletTx &wtx);\n+    void updateStatus(const CWalletTx &wtx) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n     /** Return whether a status update is needed.\n      */\n-    bool statusUpdateNeeded() const;\n+    bool statusUpdateNeeded() const EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n };\n \n #endif // BITCOIN_QT_TRANSACTIONRECORD_H"
      },
      {
        "sha": "cf9795382580560065d7a16d395152fcffd4e56b",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ac75e0aee4211f0221ee07a6f4ccaaa82024d6e5/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ac75e0aee4211f0221ee07a6f4ccaaa82024d6e5/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=ac75e0aee4211f0221ee07a6f4ccaaa82024d6e5",
        "patch": "@@ -45,7 +45,7 @@ static std::mutex cs_blockchange;\n static std::condition_variable cond_blockchange;\n static CUpdatedBlock latestblock;\n \n-extern void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue& entry);\n+extern void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue& entry) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n double GetDifficulty(const CBlockIndex* blockindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {"
      },
      {
        "sha": "2b224c0273212187649d317657dea01ebbec6f2c",
        "filename": "src/rpc/blockchain.h",
        "status": "modified",
        "additions": 7,
        "deletions": 3,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ac75e0aee4211f0221ee07a6f4ccaaa82024d6e5/src/rpc/blockchain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ac75e0aee4211f0221ee07a6f4ccaaa82024d6e5/src/rpc/blockchain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.h?ref=ac75e0aee4211f0221ee07a6f4ccaaa82024d6e5",
        "patch": "@@ -5,24 +5,28 @@\n #ifndef BITCOIN_RPC_BLOCKCHAIN_H\n #define BITCOIN_RPC_BLOCKCHAIN_H\n \n+#include \"sync.h\"\n+\n class CBlock;\n class CBlockIndex;\n class UniValue;\n \n+extern CCriticalSection cs_main;\n+\n /**\n  * Get the difficulty of the net wrt to the given block index, or the chain tip if\n  * not provided.\n  *\n  * @return A floating point number that is a multiple of the main net minimum\n  * difficulty (4295032833 hashes).\n  */\n-double GetDifficulty(const CBlockIndex* blockindex = nullptr);\n+double GetDifficulty(const CBlockIndex* blockindex = nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n /** Callback for when block tip changed. */\n void RPCNotifyBlockChange(bool ibd, const CBlockIndex *);\n \n /** Block description to JSON */\n-UniValue blockToJSON(const CBlock& block, const CBlockIndex* blockindex, bool txDetails = false);\n+UniValue blockToJSON(const CBlock& block, const CBlockIndex* blockindex, bool txDetails = false) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n /** Mempool information to JSON */\n UniValue mempoolInfoToJSON();\n@@ -31,7 +35,7 @@ UniValue mempoolInfoToJSON();\n UniValue mempoolToJSON(bool fVerbose = false);\n \n /** Block header to JSON */\n-UniValue blockheaderToJSON(const CBlockIndex* blockindex);\n+UniValue blockheaderToJSON(const CBlockIndex* blockindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n #endif\n "
      },
      {
        "sha": "23e5cdb6be240763a591ef2efcd50d31f7e8b604",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ac75e0aee4211f0221ee07a6f4ccaaa82024d6e5/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ac75e0aee4211f0221ee07a6f4ccaaa82024d6e5/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=ac75e0aee4211f0221ee07a6f4ccaaa82024d6e5",
        "patch": "@@ -105,7 +105,7 @@ UniValue getnetworkhashps(const JSONRPCRequest& request)\n     return GetNetworkHashPS(!request.params[0].isNull() ? request.params[0].get_int() : 120, !request.params[1].isNull() ? request.params[1].get_int() : -1);\n }\n \n-UniValue generateBlocks(std::shared_ptr<CReserveScript> coinbaseScript, int nGenerate, uint64_t nMaxTries, bool keepScript)\n+UniValue generateBlocks(std::shared_ptr<CReserveScript> coinbaseScript, int nGenerate, uint64_t nMaxTries, bool keepScript) EXCLUSIVE_LOCKS_REQUIRED(cs_LastBlockFile)\n {\n     static const int nInnerLoopCount = 0x10000;\n     int nHeightEnd = 0;\n@@ -153,7 +153,7 @@ UniValue generateBlocks(std::shared_ptr<CReserveScript> coinbaseScript, int nGen\n     return blockHashes;\n }\n \n-UniValue generatetoaddress(const JSONRPCRequest& request)\n+UniValue generatetoaddress(const JSONRPCRequest& request) EXCLUSIVE_LOCKS_REQUIRED(cs_LastBlockFile)\n {\n     if (request.fHelp || request.params.size() < 2 || request.params.size() > 3)\n         throw std::runtime_error(\n@@ -707,7 +707,7 @@ class submitblock_StateCatcher : public CValidationInterface\n     }\n };\n \n-UniValue submitblock(const JSONRPCRequest& request)\n+UniValue submitblock(const JSONRPCRequest& request) EXCLUSIVE_LOCKS_REQUIRED(cs_LastBlockFile)\n {\n     // We allow 2 arguments for compliance with BIP22. Argument 2 is ignored.\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2) {"
      },
      {
        "sha": "42bfe2f342022d771b21ff7050f38adde5de9dc8",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ac75e0aee4211f0221ee07a6f4ccaaa82024d6e5/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ac75e0aee4211f0221ee07a6f4ccaaa82024d6e5/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=ac75e0aee4211f0221ee07a6f4ccaaa82024d6e5",
        "patch": "@@ -242,7 +242,7 @@ void CTxMemPool::UpdateEntryForAncestors(txiter it, const setEntries &setAncesto\n     mapTx.modify(it, update_ancestor_state(updateSize, updateFee, updateCount, updateSigOpsCost));\n }\n \n-void CTxMemPool::UpdateChildrenForRemoval(txiter it)\n+void CTxMemPool::UpdateChildrenForRemoval(txiter it) EXCLUSIVE_LOCKS_REQUIRED(cs_txMemPool)\n {\n     const setEntries &setMemPoolChildren = GetMemPoolChildren(it);\n     for (txiter updateIt : setMemPoolChildren) {\n@@ -447,7 +447,7 @@ void CTxMemPool::removeUnchecked(txiter it, MemPoolRemovalReason reason) EXCLUSI\n // Also assumes that if an entry is in setDescendants already, then all\n // in-mempool descendants of it are already in setDescendants as well, so that we\n // can save time by not iterating over those entries.\n-void CTxMemPool::CalculateDescendants(txiter entryit, setEntries &setDescendants)\n+void CTxMemPool::CalculateDescendants(txiter entryit, setEntries &setDescendants) EXCLUSIVE_LOCKS_REQUIRED(cs_txMemPool)\n {\n     setEntries stage;\n     if (setDescendants.count(entryit) == 0) {\n@@ -502,7 +502,7 @@ void CTxMemPool::removeRecursive(const CTransaction &origTx, MemPoolRemovalReaso\n     }\n }\n \n-void CTxMemPool::removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMemPoolHeight, int flags)\n+void CTxMemPool::removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMemPoolHeight, int flags) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     // Remove transactions spending a coinbase which are now immature and no-longer-final transactions\n     LOCK(cs_txMemPool);"
      },
      {
        "sha": "a7c229fe768576cd4dc735693482eac13ed4930f",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ac75e0aee4211f0221ee07a6f4ccaaa82024d6e5/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ac75e0aee4211f0221ee07a6f4ccaaa82024d6e5/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=ac75e0aee4211f0221ee07a6f4ccaaa82024d6e5",
        "patch": "@@ -423,7 +423,7 @@ class CTxMemPool\n     mutable bool blockSinceLastRollingFeeBump GUARDED_BY(cs_txMemPool);\n     mutable double rollingMinimumFeeRate GUARDED_BY(cs_txMemPool); //!< minimum fee to get into the pool, decreases exponentially\n \n-    void trackPackageRemoved(const CFeeRate& rate);\n+    void trackPackageRemoved(const CFeeRate& rate) EXCLUSIVE_LOCKS_REQUIRED(cs_txMemPool);\n \n public:\n \n@@ -474,8 +474,8 @@ class CTxMemPool\n     };\n     typedef std::set<txiter, CompareIteratorByHash> setEntries;\n \n-    const setEntries & GetMemPoolParents(txiter entry) const;\n-    const setEntries & GetMemPoolChildren(txiter entry) const;\n+    const setEntries & GetMemPoolParents(txiter entry) const EXCLUSIVE_LOCKS_REQUIRED(cs_txMemPool);\n+    const setEntries & GetMemPoolChildren(txiter entry) const EXCLUSIVE_LOCKS_REQUIRED(cs_txMemPool);\n private:\n     typedef std::map<txiter, setEntries, CompareIteratorByHash> cacheMap;\n \n@@ -487,10 +487,10 @@ class CTxMemPool\n     typedef std::map<txiter, TxLinks, CompareIteratorByHash> txlinksMap;\n     txlinksMap mapLinks;\n \n-    void UpdateParent(txiter entry, txiter parent, bool add);\n-    void UpdateChild(txiter entry, txiter child, bool add);\n+    void UpdateParent(txiter entry, txiter parent, bool add) EXCLUSIVE_LOCKS_REQUIRED(cs_txMemPool);\n+    void UpdateChild(txiter entry, txiter child, bool add) EXCLUSIVE_LOCKS_REQUIRED(cs_txMemPool);\n \n-    std::vector<indexed_transaction_set::const_iterator> GetSortedDepthAndScore() const;\n+    std::vector<indexed_transaction_set::const_iterator> GetSortedDepthAndScore() const EXCLUSIVE_LOCKS_REQUIRED(cs_txMemPool);\n \n public:\n     indirectmap<COutPoint, const CTransaction*> mapNextTx GUARDED_BY(cs_txMemPool);\n@@ -525,7 +525,7 @@ class CTxMemPool\n     void removeForBlock(const std::vector<CTransactionRef>& vtx, unsigned int nBlockHeight);\n \n     void clear();\n-    void _clear(); //lock free\n+    void _clear() EXCLUSIVE_LOCKS_REQUIRED(cs_txMemPool); //lock free\n     bool CompareDepthAndScore(const uint256& hasha, const uint256& hashb);\n     void queryHashes(std::vector<uint256>& vtxid);\n     bool isSpent(const COutPoint& outpoint);\n@@ -550,7 +550,7 @@ class CTxMemPool\n      *  Set updateDescendants to true when removing a tx that was in a block, so\n      *  that any in-mempool descendants have their ancestor state updated.\n      */\n-    void RemoveStaged(setEntries &stage, bool updateDescendants, MemPoolRemovalReason reason = MemPoolRemovalReason::UNKNOWN);\n+    void RemoveStaged(setEntries &stage, bool updateDescendants, MemPoolRemovalReason reason = MemPoolRemovalReason::UNKNOWN) EXCLUSIVE_LOCKS_REQUIRED(cs_txMemPool);\n \n     /** When adding transactions from a disconnected block back to the mempool,\n      *  new mempool entries may have children in the mempool (which is generally\n@@ -643,15 +643,15 @@ class CTxMemPool\n      */\n     void UpdateForDescendants(txiter updateIt,\n             cacheMap &cachedDescendants,\n-            const std::set<uint256> &setExclude);\n+            const std::set<uint256> &setExclude) EXCLUSIVE_LOCKS_REQUIRED(cs_txMemPool);\n     /** Update ancestors of hash to add/remove it as a descendant transaction. */\n-    void UpdateAncestorsOf(bool add, txiter hash, setEntries &setAncestors);\n+    void UpdateAncestorsOf(bool add, txiter hash, setEntries &setAncestors) EXCLUSIVE_LOCKS_REQUIRED(cs_txMemPool);\n     /** Set ancestor state for an entry */\n-    void UpdateEntryForAncestors(txiter it, const setEntries &setAncestors);\n+    void UpdateEntryForAncestors(txiter it, const setEntries &setAncestors) EXCLUSIVE_LOCKS_REQUIRED(cs_txMemPool);\n     /** For each transaction being removed, update ancestors and any direct children.\n       * If updateDescendants is true, then also update in-mempool descendants'\n       * ancestor state. */\n-    void UpdateForRemoveFromMempool(const setEntries &entriesToRemove, bool updateDescendants);\n+    void UpdateForRemoveFromMempool(const setEntries &entriesToRemove, bool updateDescendants) EXCLUSIVE_LOCKS_REQUIRED(cs_txMemPool);\n     /** Sever link between specified transaction and direct children. */\n     void UpdateChildrenForRemoval(txiter entry);\n \n@@ -663,7 +663,7 @@ class CTxMemPool\n      *  transactions in a chain before we've updated all the state for the\n      *  removal.\n      */\n-    void removeUnchecked(txiter entry, MemPoolRemovalReason reason = MemPoolRemovalReason::UNKNOWN);\n+    void removeUnchecked(txiter entry, MemPoolRemovalReason reason = MemPoolRemovalReason::UNKNOWN) EXCLUSIVE_LOCKS_REQUIRED(cs_txMemPool);\n };\n \n /** "
      },
      {
        "sha": "f17547c29cfbd4902a0fb96b3f6ead696c93c17d",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ac75e0aee4211f0221ee07a6f4ccaaa82024d6e5/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ac75e0aee4211f0221ee07a6f4ccaaa82024d6e5/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=ac75e0aee4211f0221ee07a6f4ccaaa82024d6e5",
        "patch": "@@ -98,6 +98,9 @@ CScript COINBASE_FLAGS;\n \n const std::string strMessageMagic = \"Bitcoin Signed Message:\\n\";\n \n+CCriticalSection cs_LastBlockFile;\n+CCriticalSection cs_nBlockSequenceId;\n+\n // Internal stuff\n namespace {\n \n@@ -135,7 +138,6 @@ namespace {\n      */\n     std::multimap<CBlockIndex*, CBlockIndex*> mapBlocksUnlinked;\n \n-    CCriticalSection cs_LastBlockFile;\n     std::vector<CBlockFileInfo> vinfoBlockFile;\n     int nLastBlockFile GUARDED_BY(cs_LastBlockFile) = 0;\n     /** Global flag to indicate we should check to see if there are\n@@ -148,7 +150,6 @@ namespace {\n      * Every received block is assigned a unique and increasing identifier, so we\n      * know which one to give priority in case of a fork.\n      */\n-    CCriticalSection cs_nBlockSequenceId;\n     /** Blocks loaded from disk are assigned id 0, so start the counter at 1. */\n     int32_t nBlockSequenceId GUARDED_BY(cs_nBlockSequenceId) = 1;\n     /** Decreasing counter (used by subsequent preciousblock calls). */\n@@ -2978,7 +2979,7 @@ std::vector<unsigned char> GenerateCoinbaseCommitment(CBlock& block, const CBloc\n  *  in ConnectBlock().\n  *  Note that -reindex-chainstate skips the validation that happens here!\n  */\n-static bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, const CChainParams& params, const CBlockIndex* pindexPrev, int64_t nAdjustedTime)\n+static bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, const CChainParams& params, const CBlockIndex* pindexPrev, int64_t nAdjustedTime) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     assert(pindexPrev != nullptr);\n     const int nHeight = pindexPrev->nHeight + 1;\n@@ -3185,7 +3186,7 @@ bool ProcessNewBlockHeaders(const std::vector<CBlockHeader>& headers, CValidatio\n }\n \n /** Store block on disk. If dbp is non-nullptr, the file is known to already reside on disk */\n-static bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex, bool fRequested, const CDiskBlockPos* dbp, bool* fNewBlock) EXCLUSIVE_LOCKS_REQUIRED(cs_main, cs_LastBlockFile)\n+static bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex, bool fRequested, const CDiskBlockPos* dbp, bool* fNewBlock) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     const CBlock& block = *pblock;\n "
      },
      {
        "sha": "9b39655085e86993a8718e32845faa8a6686e359",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 19,
        "deletions": 16,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ac75e0aee4211f0221ee07a6f4ccaaa82024d6e5/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ac75e0aee4211f0221ee07a6f4ccaaa82024d6e5/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=ac75e0aee4211f0221ee07a6f4ccaaa82024d6e5",
        "patch": "@@ -217,6 +217,9 @@ static const unsigned int DEFAULT_CHECKLEVEL = 3;\n // Setting the target to > than 550MB will make it likely we can respect the target.\n static const uint64_t MIN_DISK_SPACE_FOR_BLOCK_FILES = 550 * 1024 * 1024;\n \n+extern CCriticalSection cs_LastBlockFile;\n+extern CCriticalSection cs_nBlockSequenceId;\n+\n /** \n  * Process an incoming block. This only returns after the best known valid\n  * block is made active. Note that it does not, however, guarantee that the\n@@ -258,16 +261,16 @@ FILE* OpenBlockFile(const CDiskBlockPos &pos, bool fReadOnly = false);\n /** Translation to a filesystem path */\n fs::path GetBlockPosFilename(const CDiskBlockPos &pos, const char *prefix);\n /** Import blocks from an external file */\n-bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, CDiskBlockPos *dbp = nullptr);\n+bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, CDiskBlockPos *dbp = nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_LastBlockFile);\n /** Ensures we have a genesis block in the block tree, possibly writing one to disk. */\n bool LoadGenesisBlock(const CChainParams& chainparams);\n /** Load the block tree and coins database from disk,\n  * initializing state if we're running with -reindex. */\n-bool LoadBlockIndex(const CChainParams& chainparams);\n+bool LoadBlockIndex(const CChainParams& chainparams) EXCLUSIVE_LOCKS_REQUIRED(cs_LastBlockFile, cs_main);\n /** Update the chain tip based on database information. */\n-bool LoadChainTip(const CChainParams& chainparams);\n+bool LoadChainTip(const CChainParams& chainparams) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n /** Unload database information */\n-void UnloadBlockIndex();\n+void UnloadBlockIndex() EXCLUSIVE_LOCKS_REQUIRED(cs_LastBlockFile, cs_nBlockSequenceId);\n /** Run an instance of the script checking thread */\n void ThreadScriptCheck();\n /** Check whether we are doing an initial block download (synchronizing from disk or network) */\n@@ -287,27 +290,27 @@ uint64_t CalculateCurrentUsage();\n /**\n  *  Mark one block file as pruned.\n  */\n-void PruneOneBlockFile(const int fileNumber);\n+void PruneOneBlockFile(const int fileNumber) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n /**\n  *  Actually unlink the specified files\n  */\n void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n \n /** Create a new block index entry for a given block hash */\n-CBlockIndex * InsertBlockIndex(uint256 hash);\n+CBlockIndex * InsertBlockIndex(uint256 hash) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n /** Flush all state, indexes and buffers to disk. */\n void FlushStateToDisk();\n /** Prune block files and flush state to disk. */\n-void PruneAndFlush();\n+void PruneAndFlush() EXCLUSIVE_LOCKS_REQUIRED(cs_LastBlockFile);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n /** (try to) add transaction to memory pool\n  * plTxnReplaced will be appended to with all transactions replaced from mempool **/\n bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransactionRef &tx,\n                         bool* pfMissingInputs, std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, const CAmount nAbsurdFee);\n+                        bool bypass_limits, const CAmount nAbsurdFee) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n /** Convert CValidationState to a human-readable message for logging */\n std::string FormatStateMessage(const CValidationState &state);\n@@ -334,12 +337,12 @@ void UpdateCoins(const CTransaction& tx, CCoinsViewCache& inputs, int nHeight);\n  *\n  * See consensus/consensus.h for flag definitions.\n  */\n-bool CheckFinalTx(const CTransaction &tx, int flags = -1);\n+bool CheckFinalTx(const CTransaction &tx, int flags = -1) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n /**\n  * Test whether the LockPoints height and time are still valid on the current chain\n  */\n-bool TestLockPointValidity(const LockPoints* lp);\n+bool TestLockPointValidity(const LockPoints* lp) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n /**\n  * Check if transaction will be BIP 68 final in the next block to be created.\n@@ -352,7 +355,7 @@ bool TestLockPointValidity(const LockPoints* lp);\n  *\n  * See consensus/consensus.h for flag definitions.\n  */\n-bool CheckSequenceLocks(const CTransaction &tx, int flags, LockPoints* lp = nullptr, bool useExistingLockPoints = false);\n+bool CheckSequenceLocks(const CTransaction &tx, int flags, LockPoints* lp = nullptr, bool useExistingLockPoints = false) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n /**\n  * Closure representing one script verification\n@@ -390,7 +393,7 @@ class CScriptCheck\n };\n \n /** Initializes the script-execution cache */\n-void InitScriptExecutionCache();\n+void InitScriptExecutionCache() EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n \n /** Functions for disk access for blocks */\n@@ -403,7 +406,7 @@ bool ReadBlockFromDisk(CBlock& block, const CBlockIndex* pindex, const Consensus\n bool CheckBlock(const CBlock& block, CValidationState& state, const Consensus::Params& consensusParams, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n \n /** Check a block is completely valid from start to finish (only works on top of our current best block, with cs_main held) */\n-bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams, const CBlock& block, CBlockIndex* pindexPrev, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n+bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams, const CBlock& block, CBlockIndex* pindexPrev, bool fCheckPOW = true, bool fCheckMerkleRoot = true) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n /** Check whether witness commitments are required for block. */\n bool IsWitnessEnabled(const CBlockIndex* pindexPrev, const Consensus::Params& params);\n@@ -429,16 +432,16 @@ class CVerifyDB {\n bool ReplayBlocks(const CChainParams& params, CCoinsView* view);\n \n /** Find the last common block between the parameter chain and a locator. */\n-CBlockIndex* FindForkInGlobalIndex(const CChain& chain, const CBlockLocator& locator);\n+CBlockIndex* FindForkInGlobalIndex(const CChain& chain, const CBlockLocator& locator) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n /** Mark a block as precious and reorganize. */\n bool PreciousBlock(CValidationState& state, const CChainParams& params, CBlockIndex *pindex);\n \n /** Mark a block as invalid. */\n-bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex *pindex);\n+bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex *pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n /** Remove invalidity status from a block and its descendants. */\n-bool ResetBlockFailureFlags(CBlockIndex *pindex);\n+bool ResetBlockFailureFlags(CBlockIndex *pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n /** The currently-connected chain of blocks (protected by cs_main). */\n extern CChain chainActive GUARDED_BY(cs_main);"
      },
      {
        "sha": "24f202eeaf438df34f9ad7a4bfeadc5093121c34",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ac75e0aee4211f0221ee07a6f4ccaaa82024d6e5/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ac75e0aee4211f0221ee07a6f4ccaaa82024d6e5/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=ac75e0aee4211f0221ee07a6f4ccaaa82024d6e5",
        "patch": "@@ -45,7 +45,7 @@ static int64_t CalculateMaximumSignedTxSize(const CTransaction &tx, const CWalle\n \n //! Check whether transaction has descendant in wallet or mempool, or has been\n //! mined, or conflicts with a mined transaction. Return a feebumper::Result.\n-static feebumper::Result PreconditionChecks(const CWallet* wallet, const CWalletTx& wtx, std::vector<std::string>& errors) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+static feebumper::Result PreconditionChecks(const CWallet* wallet, const CWalletTx& wtx, std::vector<std::string>& errors) EXCLUSIVE_LOCKS_REQUIRED(cs_main, pWallet->cs_wallet)\n {\n     if (wallet->HasWalletSpend(wtx.GetHash())) {\n         errors.push_back(\"Transaction has descendants in the wallet\");"
      },
      {
        "sha": "d333ddefdbada00b93a515963ad3b45205a4acca",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ac75e0aee4211f0221ee07a6f4ccaaa82024d6e5/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ac75e0aee4211f0221ee07a6f4ccaaa82024d6e5/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=ac75e0aee4211f0221ee07a6f4ccaaa82024d6e5",
        "patch": "@@ -251,7 +251,7 @@ bool VerifyWallets()\n     return true;\n }\n \n-bool OpenWallets()\n+bool OpenWallets() EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     if (gArgs.GetBoolArg(\"-disablewallet\", DEFAULT_DISABLE_WALLET)) {\n         LogPrintf(\"Wallet disabled!\\n\");\n@@ -269,7 +269,7 @@ bool OpenWallets()\n     return true;\n }\n \n-void StartWallets(CScheduler& scheduler) {\n+void StartWallets(CScheduler& scheduler) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n     for (CWalletRef pwallet : vpwallets) {\n         pwallet->postInitProcess(scheduler);\n     }"
      },
      {
        "sha": "01ade803ac2a742f2ec102828f7fd50100c94897",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ac75e0aee4211f0221ee07a6f4ccaaa82024d6e5/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ac75e0aee4211f0221ee07a6f4ccaaa82024d6e5/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=ac75e0aee4211f0221ee07a6f4ccaaa82024d6e5",
        "patch": "@@ -182,7 +182,7 @@ UniValue abortrescan(const JSONRPCRequest& request)\n }\n \n void ImportAddress(CWallet*, const CTxDestination& dest, const std::string& strLabel);\n-void ImportScript(CWallet* const pwallet, const CScript& script, const std::string& strLabel, bool isRedeemScript)\n+void ImportScript(CWallet* const pwallet, const CScript& script, const std::string& strLabel, bool isRedeemScript) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n {\n     if (!isRedeemScript && ::IsMine(*pwallet, script) == ISMINE_SPENDABLE) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n@@ -207,7 +207,7 @@ void ImportScript(CWallet* const pwallet, const CScript& script, const std::stri\n     }\n }\n \n-void ImportAddress(CWallet* const pwallet, const CTxDestination& dest, const std::string& strLabel)\n+void ImportAddress(CWallet* const pwallet, const CTxDestination& dest, const std::string& strLabel) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n {\n     CScript script = GetScriptForDestination(dest);\n     ImportScript(pwallet, script, strLabel, false);"
      },
      {
        "sha": "766ab09861be5d676978e626efca29330b9c2663",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ac75e0aee4211f0221ee07a6f4ccaaa82024d6e5/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ac75e0aee4211f0221ee07a6f4ccaaa82024d6e5/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=ac75e0aee4211f0221ee07a6f4ccaaa82024d6e5",
        "patch": "@@ -175,7 +175,7 @@ UniValue getnewaddress(const JSONRPCRequest& request)\n }\n \n \n-CTxDestination GetAccountAddress(CWallet* const pwallet, std::string strAccount, bool bForceNew=false)\n+CTxDestination GetAccountAddress(CWallet* const pwallet, std::string strAccount, bool bForceNew=false) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n {\n     CPubKey pubKey;\n     if (!pwallet->GetAccountPubkey(pubKey, strAccount, bForceNew)) {"
      },
      {
        "sha": "37b5cc618eb76029d68844ec752a1f45239fe6c1",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ac75e0aee4211f0221ee07a6f4ccaaa82024d6e5/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ac75e0aee4211f0221ee07a6f4ccaaa82024d6e5/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=ac75e0aee4211f0221ee07a6f4ccaaa82024d6e5",
        "patch": "@@ -891,7 +891,7 @@ bool CWallet::MarkReplaced(const uint256& originalHash, const uint256& newHash)\n     return success;\n }\n \n-bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFlushOnClose)\n+bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFlushOnClose) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     LOCK(cs_wallet);\n \n@@ -1010,7 +1010,7 @@ bool CWallet::LoadToWallet(const CWalletTx& wtxIn) EXCLUSIVE_LOCKS_REQUIRED(cs_w\n  * Abandoned state should probably be more carefully tracked via different\n  * posInBlock signals or by checking mempool presence when necessary.\n  */\n-bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef& ptx, const CBlockIndex* pIndex, int posInBlock, bool fUpdate) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\n+bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef& ptx, const CBlockIndex* pIndex, int posInBlock, bool fUpdate) EXCLUSIVE_LOCKS_REQUIRED(cs_main, cs_wallet)\n {\n     const CTransaction& tx = *ptx;\n     {\n@@ -1198,7 +1198,7 @@ void CWallet::MarkConflicted(const uint256& hashBlock, const uint256& hashTx)\n     }\n }\n \n-void CWallet::SyncTransaction(const CTransactionRef& ptx, const CBlockIndex *pindex, int posInBlock) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet) {\n+void CWallet::SyncTransaction(const CTransactionRef& ptx, const CBlockIndex *pindex, int posInBlock) EXCLUSIVE_LOCKS_REQUIRED(cs_main, cs_wallet) {\n     const CTransaction& tx = *ptx;\n \n     if (!AddToWalletIfInvolvingMe(ptx, pindex, posInBlock, true))\n@@ -1787,7 +1787,7 @@ CAmount CWalletTx::GetDebit(const isminefilter& filter) const\n     return debit;\n }\n \n-CAmount CWalletTx::GetCredit(const isminefilter& filter) const\n+CAmount CWalletTx::GetCredit(const isminefilter& filter) const EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     // Must wait until coinbase is safely deep enough in the chain before valuing it\n     if (IsCoinBase() && GetBlocksToMaturity() > 0)\n@@ -4120,7 +4120,7 @@ int CMerkleTx::GetBlocksToMaturity() const EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n }\n \n \n-bool CWalletTx::AcceptToMemoryPool(const CAmount& nAbsurdFee, CValidationState& state)\n+bool CWalletTx::AcceptToMemoryPool(const CAmount& nAbsurdFee, CValidationState& state) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     // We must set fInMempool here - while it will be re-set to true by the\n     // entered-mempool callback, if we did not there would be a race where a"
      },
      {
        "sha": "9457c7d2c499d129a27263957462c05a59831b0a",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 53,
        "deletions": 53,
        "changes": 106,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ac75e0aee4211f0221ee07a6f4ccaaa82024d6e5/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ac75e0aee4211f0221ee07a6f4ccaaa82024d6e5/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=ac75e0aee4211f0221ee07a6f4ccaaa82024d6e5",
        "patch": "@@ -249,7 +249,7 @@ class CMerkleTx\n     int GetDepthInMainChain(const CBlockIndex* &pindexRet) const EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n     int GetDepthInMainChain() const EXCLUSIVE_LOCKS_REQUIRED(cs_main) { const CBlockIndex *pindexRet; return GetDepthInMainChain(pindexRet); }\n     bool IsInMainChain() const EXCLUSIVE_LOCKS_REQUIRED(cs_main) { const CBlockIndex *pindexRet; return GetDepthInMainChain(pindexRet) > 0; }\n-    int GetBlocksToMaturity() const;\n+    int GetBlocksToMaturity() const EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n     bool hashUnset() const { return (hashBlock.IsNull() || hashBlock == ABANDON_HASH); }\n     bool isAbandoned() const { return (hashBlock == ABANDON_HASH); }\n     void setAbandoned() { hashBlock = ABANDON_HASH; }\n@@ -445,10 +445,10 @@ class CWalletTx : public CMerkleTx\n     //! filter decides which addresses will count towards the debit\n     CAmount GetDebit(const isminefilter& filter) const;\n     CAmount GetCredit(const isminefilter& filter) const;\n-    CAmount GetImmatureCredit(bool fUseCache=true) const;\n-    CAmount GetAvailableCredit(bool fUseCache=true) const;\n-    CAmount GetImmatureWatchOnlyCredit(const bool& fUseCache=true) const;\n-    CAmount GetAvailableWatchOnlyCredit(const bool& fUseCache=true) const;\n+    CAmount GetImmatureCredit(bool fUseCache=true) const EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+    CAmount GetAvailableCredit(bool fUseCache=true) const EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+    CAmount GetImmatureWatchOnlyCredit(const bool& fUseCache=true) const EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+    CAmount GetAvailableWatchOnlyCredit(const bool& fUseCache=true) const EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n     CAmount GetChange() const;\n \n     void GetAmounts(std::list<COutputEntry>& listReceived,\n@@ -463,13 +463,13 @@ class CWalletTx : public CMerkleTx\n     bool IsEquivalentTo(const CWalletTx& tx) const;\n \n     bool InMempool() const;\n-    bool IsTrusted() const;\n+    bool IsTrusted() const EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n     int64_t GetTxTime() const;\n     int GetRequestCount() const;\n \n     // RelayWalletTransaction may only be called if fBroadcastTransactions!\n-    bool RelayWalletTransaction(CConnman* connman);\n+    bool RelayWalletTransaction(CConnman* connman) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n     /** Pass this transaction to the mempool. Fails if absolute fee exceeds absurd fee. */\n     bool AcceptToMemoryPool(const CAmount& nAbsurdFee, CValidationState& state);\n@@ -664,7 +664,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n      * all coins from coinControl are selected; Never select unconfirmed coins\n      * if they are not ours\n      */\n-    bool SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAmount& nTargetValue, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, const CCoinControl *coinControl = nullptr) const;\n+    bool SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAmount& nTargetValue, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, const CCoinControl *coinControl = nullptr) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     CWalletDB *pwalletdbEncryption;\n \n@@ -685,23 +685,23 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n      */\n     typedef std::multimap<COutPoint, uint256> TxSpends;\n     TxSpends mapTxSpends GUARDED_BY(cs_wallet);\n-    void AddToSpends(const COutPoint& outpoint, const uint256& wtxid);\n-    void AddToSpends(const uint256& wtxid);\n+    void AddToSpends(const COutPoint& outpoint, const uint256& wtxid) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    void AddToSpends(const uint256& wtxid) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     /* Mark a transaction (and its in-wallet descendants) as conflicting with a particular block. */\n     void MarkConflicted(const uint256& hashBlock, const uint256& hashTx);\n \n-    void SyncMetaData(std::pair<TxSpends::iterator, TxSpends::iterator>);\n+    void SyncMetaData(std::pair<TxSpends::iterator, TxSpends::iterator>) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     /* Used by TransactionAddedToMemorypool/BlockConnected/Disconnected.\n      * Should be called with pindexBlock and posInBlock if this is for a transaction that is included in a block. */\n-    void SyncTransaction(const CTransactionRef& tx, const CBlockIndex *pindex = nullptr, int posInBlock = 0);\n+    void SyncTransaction(const CTransactionRef& tx, const CBlockIndex *pindex = nullptr, int posInBlock = 0) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     /* the HD chain data model (external chain counters) */\n     CHDChain hdChain;\n \n     /* HD derive new child key (on internal or external chain) */\n-    void DeriveNewChildKey(CWalletDB &walletdb, CKeyMetadata& metadata, CKey& secret, bool internal = false);\n+    void DeriveNewChildKey(CWalletDB &walletdb, CKeyMetadata& metadata, CKey& secret, bool internal = false) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     std::set<int64_t> setInternalKeyPool GUARDED_BY(cs_wallet);\n     std::set<int64_t> setExternalKeyPool GUARDED_BY(cs_wallet);\n@@ -719,7 +719,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n      * of the other AddWatchOnly which accepts a timestamp and sets\n      * nTimeFirstKey more intelligently for more efficient rescans.\n      */\n-    bool AddWatchOnly(const CScript& dest) override;\n+    bool AddWatchOnly(const CScript& dest) override EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     std::unique_ptr<CWalletDBWrapper> dbw;\n \n@@ -761,7 +761,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n         }\n     }\n \n-    void LoadKeyPool(int64_t nIndex, const CKeyPool &keypool);\n+    void LoadKeyPool(int64_t nIndex, const CKeyPool &keypool) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     // Map from Key ID (for regular keys) or Script ID (for watch-only keys) to\n     // key metadata.\n@@ -843,7 +843,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     /**\n      * Find non-change parent output.\n      */\n-    const CTxOut& FindNonChangeParentOutput(const CTransaction& tx, int output) const;\n+    const CTxOut& FindNonChangeParentOutput(const CTransaction& tx, int output) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     /**\n      * Shuffle and select coins until nTargetValue is reached while avoiding\n@@ -853,13 +853,13 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n      */\n     bool SelectCoinsMinConf(const CAmount& nTargetValue, int nConfMine, int nConfTheirs, uint64_t nMaxAncestors, std::vector<COutput> vCoins, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet) const;\n \n-    bool IsSpent(const uint256& hash, unsigned int n) const;\n+    bool IsSpent(const uint256& hash, unsigned int n) const EXCLUSIVE_LOCKS_REQUIRED(cs_main, cs_wallet);\n \n-    bool IsLockedCoin(uint256 hash, unsigned int n) const;\n-    void LockCoin(const COutPoint& output);\n-    void UnlockCoin(const COutPoint& output);\n-    void UnlockAllCoins();\n-    void ListLockedCoins(std::vector<COutPoint>& vOutpts) const;\n+    bool IsLockedCoin(uint256 hash, unsigned int n) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    void LockCoin(const COutPoint& output) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    void UnlockCoin(const COutPoint& output) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    void UnlockAllCoins()EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    void ListLockedCoins(std::vector<COutPoint>& vOutpts) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     /*\n      * Rescan abort properties\n@@ -872,17 +872,17 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n      * keystore implementation\n      * Generate a new key\n      */\n-    CPubKey GenerateNewKey(CWalletDB& walletdb, bool internal = false);\n+    CPubKey GenerateNewKey(CWalletDB& walletdb, bool internal = false) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     //! Adds a key to the store, and saves it to disk.\n-    bool AddKeyPubKey(const CKey& key, const CPubKey &pubkey) override;\n-    bool AddKeyPubKeyWithDB(CWalletDB &walletdb,const CKey& key, const CPubKey &pubkey);\n+    bool AddKeyPubKey(const CKey& key, const CPubKey &pubkey) override EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    bool AddKeyPubKeyWithDB(CWalletDB &walletdb,const CKey& key, const CPubKey &pubkey) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     //! Adds a key to the store, without saving it to disk (used by LoadWallet)\n     bool LoadKey(const CKey& key, const CPubKey &pubkey) { return CCryptoKeyStore::AddKeyPubKey(key, pubkey); }\n     //! Load metadata (used by LoadWallet)\n-    bool LoadKeyMetadata(const CTxDestination& pubKey, const CKeyMetadata &metadata);\n+    bool LoadKeyMetadata(const CTxDestination& pubKey, const CKeyMetadata &metadata) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     bool LoadMinVersion(int nVersion) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet) { AssertLockHeld(cs_wallet); nWalletVersion = nVersion; nWalletMaxVersion = std::max(nWalletMaxVersion, nVersion); return true; }\n-    void UpdateTimeFirstKey(int64_t nCreateTime);\n+    void UpdateTimeFirstKey(int64_t nCreateTime) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     //! Adds an encrypted key to the store, and saves it to disk.\n     bool AddCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret) override;\n@@ -892,18 +892,18 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     bool LoadCScript(const CScript& redeemScript);\n \n     //! Adds a destination data tuple to the store, and saves it to disk\n-    bool AddDestData(const CTxDestination &dest, const std::string &key, const std::string &value);\n+    bool AddDestData(const CTxDestination &dest, const std::string &key, const std::string &value) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     //! Erases a destination data tuple in the store and on disk\n-    bool EraseDestData(const CTxDestination &dest, const std::string &key);\n+    bool EraseDestData(const CTxDestination &dest, const std::string &key) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     //! Adds a destination data tuple to the store, without saving it to disk\n-    bool LoadDestData(const CTxDestination &dest, const std::string &key, const std::string &value);\n+    bool LoadDestData(const CTxDestination &dest, const std::string &key, const std::string &value) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     //! Look up a destination data tuple in the store, return true if found false otherwise\n-    bool GetDestData(const CTxDestination &dest, const std::string &key, std::string *value) const;\n+    bool GetDestData(const CTxDestination &dest, const std::string &key, std::string *value) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     //! Get all destination values matching a prefix.\n     std::vector<std::string> GetDestValues(const std::string& prefix) const;\n \n     //! Adds a watch-only address to the store, and saves it to disk.\n-    bool AddWatchOnly(const CScript& dest, int64_t nCreateTime);\n+    bool AddWatchOnly(const CScript& dest, int64_t nCreateTime) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     bool RemoveWatchOnly(const CScript &dest) override;\n     //! Adds a watch-only address to the store, without saving it to disk (used by LoadWallet)\n     bool LoadWatchOnly(const CScript &dest);\n@@ -915,32 +915,32 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     bool ChangeWalletPassphrase(const SecureString& strOldWalletPassphrase, const SecureString& strNewWalletPassphrase);\n     bool EncryptWallet(const SecureString& strWalletPassphrase);\n \n-    void GetKeyBirthTimes(std::map<CTxDestination, int64_t> &mapKeyBirth) const;\n-    unsigned int ComputeTimeSmart(const CWalletTx& wtx) const;\n+    void GetKeyBirthTimes(std::map<CTxDestination, int64_t> &mapKeyBirth) const EXCLUSIVE_LOCKS_REQUIRED(cs_main, cs_wallet);\n+    unsigned int ComputeTimeSmart(const CWalletTx& wtx) const EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n     /** \n      * Increment the next transaction order id\n      * @return next transaction order id\n      */\n-    int64_t IncOrderPosNext(CWalletDB *pwalletdb = nullptr);\n+    int64_t IncOrderPosNext(CWalletDB *pwalletdb = nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     DBErrors ReorderTransactions();\n-    bool AccountMove(std::string strFrom, std::string strTo, CAmount nAmount, std::string strComment = \"\");\n-    bool GetAccountPubkey(CPubKey &pubKey, std::string strAccount, bool bForceNew = false);\n+    bool AccountMove(std::string strFrom, std::string strTo, CAmount nAmount, std::string strComment = \"\") EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    bool GetAccountPubkey(CPubKey &pubKey, std::string strAccount, bool bForceNew = false) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     void MarkDirty();\n     bool AddToWallet(const CWalletTx& wtxIn, bool fFlushOnClose=true);\n-    bool LoadToWallet(const CWalletTx& wtxIn);\n+    bool LoadToWallet(const CWalletTx& wtxIn) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     void TransactionAddedToMempool(const CTransactionRef& tx) override;\n     void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex *pindex, const std::vector<CTransactionRef>& vtxConflicted) override;\n     void BlockDisconnected(const std::shared_ptr<const CBlock>& pblock) override;\n-    bool AddToWalletIfInvolvingMe(const CTransactionRef& tx, const CBlockIndex* pIndex, int posInBlock, bool fUpdate);\n-    int64_t RescanFromTime(int64_t startTime, bool update);\n+    bool AddToWalletIfInvolvingMe(const CTransactionRef& tx, const CBlockIndex* pIndex, int posInBlock, bool fUpdate) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    int64_t RescanFromTime(int64_t startTime, bool update) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n     CBlockIndex* ScanForWalletTransactions(CBlockIndex* pindexStart, CBlockIndex* pindexStop, bool fUpdate = false);\n     void TransactionRemovedFromMempool(const CTransactionRef &ptx) override;\n     void ReacceptWalletTransactions();\n-    void ResendWalletTransactions(int64_t nBestBlockTime, CConnman* connman) override;\n+    void ResendWalletTransactions(int64_t nBestBlockTime, CConnman* connman) override EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n     // ResendWalletTransactionsBefore may only be called if fBroadcastTransactions!\n-    std::vector<uint256> ResendWalletTransactionsBefore(int64_t nTime, CConnman* connman);\n+    std::vector<uint256> ResendWalletTransactionsBefore(int64_t nTime, CConnman* connman) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n     CAmount GetBalance() const;\n     CAmount GetUnconfirmedBalance() const;\n     CAmount GetImmatureBalance() const;\n@@ -955,7 +955,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n      * calling CreateTransaction();\n      */\n     bool FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, int& nChangePosInOut, std::string& strFailReason, bool lockUnspents, const std::set<int>& setSubtractFeeFromOutputs, CCoinControl);\n-    bool SignTransaction(CMutableTransaction& tx);\n+    bool SignTransaction(CMutableTransaction& tx) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     /**\n      * Create a new transaction paying the recipients with a set of coins\n@@ -977,7 +977,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     static CFeeRate m_discard_rate;\n \n     bool NewKeyPool();\n-    size_t KeypoolCountExternalKeys();\n+    size_t KeypoolCountExternalKeys() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     bool TopUpKeyPool(unsigned int kpSize = 0);\n     void ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool, bool fRequestedInternal);\n     void KeepKey(int64_t nIndex);\n@@ -987,11 +987,11 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     /**\n      * Marks all keys in the keypool up to and including reserve_key as used.\n      */\n-    void MarkReserveKeysAsUsed(int64_t keypool_id);\n+    void MarkReserveKeysAsUsed(int64_t keypool_id) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     const std::map<CKeyID, int64_t>& GetAllReserveKeys() const { return m_pool_key_to_index; }\n \n-    std::set< std::set<CTxDestination> > GetAddressGroupings();\n-    std::map<CTxDestination, CAmount> GetAddressBalances();\n+    std::set< std::set<CTxDestination> > GetAddressGroupings() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    std::map<CTxDestination, CAmount> GetAddressBalances() EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n     std::set<CTxDestination> GetAccountAddresses(const std::string& strAccount) const;\n \n@@ -1017,13 +1017,13 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n \n     DBErrors LoadWallet(bool& fFirstRunRet);\n     DBErrors ZapWalletTx(std::vector<CWalletTx>& vWtx);\n-    DBErrors ZapSelectTx(std::vector<uint256>& vHashIn, std::vector<uint256>& vHashOut);\n+    DBErrors ZapSelectTx(std::vector<uint256>& vHashIn, std::vector<uint256>& vHashOut) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     bool SetAddressBook(const CTxDestination& address, const std::string& strName, const std::string& purpose);\n \n     bool DelAddressBook(const CTxDestination& address);\n \n-    const std::string& GetAccountName(const CScript& scriptPubKey) const;\n+    const std::string& GetAccountName(const CScript& scriptPubKey) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     void Inventory(const uint256 &hash) override\n     {\n@@ -1053,10 +1053,10 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     int GetVersion() { LOCK(cs_wallet); return nWalletVersion; }\n \n     //! Get wallet transactions that conflict with given transaction (spend same outputs)\n-    std::set<uint256> GetConflicts(const uint256& txid) const;\n+    std::set<uint256> GetConflicts(const uint256& txid) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     //! Check if a given transaction has any of its outputs spent by another transaction in the wallet\n-    bool HasWalletSpend(const uint256& txid) const;\n+    bool HasWalletSpend(const uint256& txid) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     //! Flush wallet (bitdb flush)\n     void Flush(bool shutdown=false);\n@@ -1098,13 +1098,13 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     bool MarkReplaced(const uint256& originalHash, const uint256& newHash);\n \n     /* Initializes the wallet, returns a new CWallet instance or a null pointer in case of an error */\n-    static CWallet* CreateWalletFromFile(const std::string walletFile);\n+    static CWallet* CreateWalletFromFile(const std::string walletFile) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n     /**\n      * Wallet post-init setup\n      * Gives the wallet a chance to register repetitive tasks and complete post-init tasks\n      */\n-    void postInitProcess(CScheduler& scheduler);\n+    void postInitProcess(CScheduler& scheduler) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n     bool BackupWallet(const std::string& strDest);\n "
      }
    ]
  },
  {
    "sha": "a93483f8702b7c1825de7cc6ab8106c4685035f2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphOTM0ODNmODcwMmI3YzE4MjVkZTdjYzZhYjgxMDZjNDY4NTAzNWYy",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-11-06T10:10:20Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Add missing locks to tests",
      "tree": {
        "sha": "a6bc0156d268320bdc9bbdc95b7de46f2bdcf404",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a6bc0156d268320bdc9bbdc95b7de46f2bdcf404"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a93483f8702b7c1825de7cc6ab8106c4685035f2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a93483f8702b7c1825de7cc6ab8106c4685035f2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a93483f8702b7c1825de7cc6ab8106c4685035f2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a93483f8702b7c1825de7cc6ab8106c4685035f2/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ac75e0aee4211f0221ee07a6f4ccaaa82024d6e5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ac75e0aee4211f0221ee07a6f4ccaaa82024d6e5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ac75e0aee4211f0221ee07a6f4ccaaa82024d6e5"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "2765f93f277728f4210ac6b45e4b45de65e61576",
        "filename": "src/test/addrman_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a93483f8702b7c1825de7cc6ab8106c4685035f2/src/test/addrman_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a93483f8702b7c1825de7cc6ab8106c4685035f2/src/test/addrman_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/addrman_tests.cpp?ref=a93483f8702b7c1825de7cc6ab8106c4685035f2",
        "patch": "@@ -38,17 +38,17 @@ class CAddrManTest : public CAddrMan\n         return (unsigned int)(state % nMax);\n     }\n \n-    CAddrInfo* Find(const CNetAddr& addr, int* pnId = nullptr)\n+    CAddrInfo* Find(const CNetAddr& addr, int* pnId = nullptr) NO_THREAD_SAFETY_ANALYSIS\n     {\n         return CAddrMan::Find(addr, pnId);\n     }\n \n-    CAddrInfo* Create(const CAddress& addr, const CNetAddr& addrSource, int* pnId = nullptr)\n+    CAddrInfo* Create(const CAddress& addr, const CNetAddr& addrSource, int* pnId = nullptr) NO_THREAD_SAFETY_ANALYSIS\n     {\n         return CAddrMan::Create(addr, addrSource, pnId);\n     }\n \n-    void Delete(int nId)\n+    void Delete(int nId) NO_THREAD_SAFETY_ANALYSIS\n     {\n         CAddrMan::Delete(nId);\n     }"
      },
      {
        "sha": "b4766d81f84c7aad0f359f46435cb178cdefa223",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a93483f8702b7c1825de7cc6ab8106c4685035f2/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a93483f8702b7c1825de7cc6ab8106c4685035f2/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=a93483f8702b7c1825de7cc6ab8106c4685035f2",
        "patch": "@@ -81,7 +81,7 @@ CBlockIndex CreateBlockIndex(int nHeight) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n \n bool TestSequenceLocks(const CTransaction &tx, int flags)\n {\n-    LOCK(mempool.cs_txMemPool);\n+    LOCK2(cs_main, mempool.cs_txMemPool);\n     return CheckSequenceLocks(tx, flags);\n }\n "
      }
    ]
  },
  {
    "sha": "86b35047eb7e015624988772e89b71a6e774504d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NmIzNTA0N2ViN2UwMTU2MjQ5ODg3NzJlODliNzFhNmU3NzQ1MDRk",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-11-06T10:11:58Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Remove incorrect lock requirement annotation from ProcessNewBlock",
      "tree": {
        "sha": "863f81140e59ddea01c3e5fd18f106717bcee312",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/863f81140e59ddea01c3e5fd18f106717bcee312"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/86b35047eb7e015624988772e89b71a6e774504d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86b35047eb7e015624988772e89b71a6e774504d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/86b35047eb7e015624988772e89b71a6e774504d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86b35047eb7e015624988772e89b71a6e774504d/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a93483f8702b7c1825de7cc6ab8106c4685035f2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a93483f8702b7c1825de7cc6ab8106c4685035f2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a93483f8702b7c1825de7cc6ab8106c4685035f2"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "2817b0976d08ef149011d3655fb6074c4ef24941",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86b35047eb7e015624988772e89b71a6e774504d/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86b35047eb7e015624988772e89b71a6e774504d/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=86b35047eb7e015624988772e89b71a6e774504d",
        "patch": "@@ -3271,7 +3271,7 @@ static bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidation\n     return true;\n }\n \n-bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, bool fForceProcessing, bool *fNewBlock) EXCLUSIVE_LOCKS_REQUIRED(cs_LastBlockFile)\n+bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, bool fForceProcessing, bool *fNewBlock)\n {\n     {\n         CBlockIndex *pindex = nullptr;"
      }
    ]
  },
  {
    "sha": "89cfabfefa313cf4dd99ce7d5844e77b46d366cc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4OWNmYWJmZWZhMzEzY2Y0ZGQ5OWNlN2Q1ODQ0ZTc3YjQ2ZDM2NmNj",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-11-06T10:21:15Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Add missing cs_LastBlockFile lock when accessing fCheckForPruning\n\nThe variable fCheckForPruning is guarded by the mutex cs_LastBlockFile.",
      "tree": {
        "sha": "67a6e71ffcc8cc8cffaf0fbb524b1f1e2b0eab1c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/67a6e71ffcc8cc8cffaf0fbb524b1f1e2b0eab1c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/89cfabfefa313cf4dd99ce7d5844e77b46d366cc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/89cfabfefa313cf4dd99ce7d5844e77b46d366cc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/89cfabfefa313cf4dd99ce7d5844e77b46d366cc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/89cfabfefa313cf4dd99ce7d5844e77b46d366cc/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "86b35047eb7e015624988772e89b71a6e774504d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86b35047eb7e015624988772e89b71a6e774504d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/86b35047eb7e015624988772e89b71a6e774504d"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "4cbb764b739c37d6bd3356b1b9563504daf3cf57",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/89cfabfefa313cf4dd99ce7d5844e77b46d366cc/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/89cfabfefa313cf4dd99ce7d5844e77b46d366cc/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=89cfabfefa313cf4dd99ce7d5844e77b46d366cc",
        "patch": "@@ -3265,6 +3265,7 @@ static bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidation\n         return AbortNode(state, std::string(\"System error: \") + e.what());\n     }\n \n+    LOCK(cs_LastBlockFile);\n     if (fCheckForPruning)\n         FlushStateToDisk(chainparams, state, FLUSH_STATE_NONE); // we just allocated more disk space for block files\n "
      }
    ]
  },
  {
    "sha": "f1996dc599042bf468b7e870a6c006c0ccc302f3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMTk5NmRjNTk5MDQyYmY0NjhiN2U4NzBhNmMwMDZjMGNjYzMwMmYz",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-11-08T09:06:20Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Add locking to SetNull(). Remove NO_THREAD_SAFETY_ANALYSIS.",
      "tree": {
        "sha": "6415c8f9c0f81a2a6483256df1231b654510a48c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6415c8f9c0f81a2a6483256df1231b654510a48c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f1996dc599042bf468b7e870a6c006c0ccc302f3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f1996dc599042bf468b7e870a6c006c0ccc302f3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f1996dc599042bf468b7e870a6c006c0ccc302f3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f1996dc599042bf468b7e870a6c006c0ccc302f3/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "89cfabfefa313cf4dd99ce7d5844e77b46d366cc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/89cfabfefa313cf4dd99ce7d5844e77b46d366cc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/89cfabfefa313cf4dd99ce7d5844e77b46d366cc"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 8,
      "deletions": 5
    },
    "files": [
      {
        "sha": "583dbf21d8fcf528c196b8b9f02921e065f11290",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 8,
        "deletions": 5,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f1996dc599042bf468b7e870a6c006c0ccc302f3/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f1996dc599042bf468b7e870a6c006c0ccc302f3/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=f1996dc599042bf468b7e870a6c006c0ccc302f3",
        "patch": "@@ -792,18 +792,21 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     // NO_THREAD_SAFETY_ANALYSIS: Intentionally setting\n     // nOrderPosNext/nTimeFirstKey/nWalletVersion/nWalletMaxVersion without\n     // holding cs_wallet.\n-    void SetNull() NO_THREAD_SAFETY_ANALYSIS\n+    void SetNull()\n     {\n-        nWalletVersion = FEATURE_BASE;\n-        nWalletMaxVersion = FEATURE_BASE;\n+        {\n+            LOCK(cs_wallet);\n+            nWalletVersion = FEATURE_BASE;\n+            nWalletMaxVersion = FEATURE_BASE;\n+            nOrderPosNext = 0;\n+            nTimeFirstKey = 0;\n+        }\n         nMasterKeyMaxID = 0;\n         pwalletdbEncryption = nullptr;\n-        nOrderPosNext = 0;\n         nAccountingEntryNumber = 0;\n         nNextResend = 0;\n         nLastResend = 0;\n         m_max_keypool_index = 0;\n-        nTimeFirstKey = 0;\n         fBroadcastTransactions = false;\n         nRelockTime = 0;\n         fAbortRescan = false;"
      }
    ]
  },
  {
    "sha": "f82c0f577f467f8b8588c3b169b14de5da33bdea",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmODJjMGY1NzdmNDY3ZjhiODU4OGMzYjE2OWIxNGRlNWRhMzNiZGVh",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-11-08T09:07:22Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Perform locking inside CConnman::Start",
      "tree": {
        "sha": "66e06e6b707d6cd449ac8e0ae5f46b046b1749a8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/66e06e6b707d6cd449ac8e0ae5f46b046b1749a8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f82c0f577f467f8b8588c3b169b14de5da33bdea",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f82c0f577f467f8b8588c3b169b14de5da33bdea",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f82c0f577f467f8b8588c3b169b14de5da33bdea",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f82c0f577f467f8b8588c3b169b14de5da33bdea/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f1996dc599042bf468b7e870a6c006c0ccc302f3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f1996dc599042bf468b7e870a6c006c0ccc302f3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f1996dc599042bf468b7e870a6c006c0ccc302f3"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "a19a66c09d6bb49c39491e6337906449cb783fab",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f82c0f577f467f8b8588c3b169b14de5da33bdea/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f82c0f577f467f8b8588c3b169b14de5da33bdea/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=f82c0f577f467f8b8588c3b169b14de5da33bdea",
        "patch": "@@ -2265,7 +2265,7 @@ bool CConnman::InitBinds(const std::vector<CService>& binds, const std::vector<C\n     return fBound;\n }\n \n-bool CConnman::Start(CScheduler& scheduler, const Options& connOptions) EXCLUSIVE_LOCKS_REQUIRED(cs_totalBytesRecv, cs_totalBytesSent)\n+bool CConnman::Start(CScheduler& scheduler, const Options& connOptions)\n {\n     Init(connOptions);\n "
      }
    ]
  },
  {
    "sha": "963317b78e92a81d4f4cbd7ccd16e4ee56108a31",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NjMzMTdiNzhlOTJhODFkNGY0Y2JkN2NjZDE2ZTRlZTU2MTA4YTMx",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-11-08T09:08:18Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Clarify NO_THREAD_SAFETY_ANALYSIS comment",
      "tree": {
        "sha": "f23d40bdf707714c1213b5a98f8e2c0a7c9df35c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f23d40bdf707714c1213b5a98f8e2c0a7c9df35c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/963317b78e92a81d4f4cbd7ccd16e4ee56108a31",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/963317b78e92a81d4f4cbd7ccd16e4ee56108a31",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/963317b78e92a81d4f4cbd7ccd16e4ee56108a31",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/963317b78e92a81d4f4cbd7ccd16e4ee56108a31/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f82c0f577f467f8b8588c3b169b14de5da33bdea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f82c0f577f467f8b8588c3b169b14de5da33bdea",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f82c0f577f467f8b8588c3b169b14de5da33bdea"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "2ada2acec361acfc6a57bcbeb3f31f9b3d4d6143",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/963317b78e92a81d4f4cbd7ccd16e4ee56108a31/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/963317b78e92a81d4f4cbd7ccd16e4ee56108a31/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=963317b78e92a81d4f4cbd7ccd16e4ee56108a31",
        "patch": "@@ -121,7 +121,7 @@ class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n #endif\n \n // NO_THREAD_SAFETY_ANALYSIS: The conditional cs_wallet lock confuses the\n-// thread-safety analyzer.\n+// Clang thread-safety analyzer.\n UniValue validateaddress(const JSONRPCRequest& request) NO_THREAD_SAFETY_ANALYSIS\n {\n     if (request.fHelp || request.params.size() != 1)"
      }
    ]
  },
  {
    "sha": "e0eadcf7e507ac0755bfd1630f60d232ed210955",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMGVhZGNmN2U1MDdhYzA3NTViZmQxNjMwZjYwZDIzMmVkMjEwOTU1",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-11-08T09:10:47Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Add locking to Init()",
      "tree": {
        "sha": "e14a43df0c572e1418cbe077a765f0d456cb3a97",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e14a43df0c572e1418cbe077a765f0d456cb3a97"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e0eadcf7e507ac0755bfd1630f60d232ed210955",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0eadcf7e507ac0755bfd1630f60d232ed210955",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e0eadcf7e507ac0755bfd1630f60d232ed210955",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0eadcf7e507ac0755bfd1630f60d232ed210955/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "963317b78e92a81d4f4cbd7ccd16e4ee56108a31",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/963317b78e92a81d4f4cbd7ccd16e4ee56108a31",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/963317b78e92a81d4f4cbd7ccd16e4ee56108a31"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 2,
      "deletions": 5
    },
    "files": [
      {
        "sha": "633f2fbb2267f523e334e2af3756cf05b40a9801",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e0eadcf7e507ac0755bfd1630f60d232ed210955/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e0eadcf7e507ac0755bfd1630f60d232ed210955/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=e0eadcf7e507ac0755bfd1630f60d232ed210955",
        "patch": "@@ -147,10 +147,7 @@ class CConnman\n         std::vector<std::string> m_added_nodes;\n     };\n \n-    // NO_THREAD_SAFETY_ANALYSIS: Intentionally setting\n-    // nMaxOutboundTimeframe/nMaxOutboundLimit without holding\n-    // cs_totalBytesSent.\n-    void Init(const Options& connOptions) NO_THREAD_SAFETY_ANALYSIS {\n+    void Init(const Options& connOptions) {\n         nLocalServices = connOptions.nLocalServices;\n         nMaxConnections = connOptions.nMaxConnections;\n         nMaxOutbound = std::min(connOptions.nMaxOutbound, connOptions.nMaxConnections);\n@@ -175,7 +172,7 @@ class CConnman\n \n     CConnman(uint64_t seed0, uint64_t seed1);\n     ~CConnman();\n-    bool Start(CScheduler& scheduler, const Options& options) EXCLUSIVE_LOCKS_REQUIRED(cs_totalBytesRecv, cs_totalBytesSent);\n+    bool Start(CScheduler& scheduler, const Options& options);\n     void Stop();\n     void Interrupt();\n     bool GetNetworkActive() const { return fNetworkActive; };"
      }
    ]
  },
  {
    "sha": "5b8b4499e1015f627c81d8f99a05f794d76fe96e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YjhiNDQ5OWUxMDE1ZjYyN2M4MWQ4Zjk5YTA1Zjc5NGQ3NmZlOTZl",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-11-09T23:19:51Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Remove NO_THREAD_SAFETY_ANALYSIS annotation from validateaddress(...)\n\nUse locking logic that does not confuse the Clang thread-safety analyzer.",
      "tree": {
        "sha": "a1ef727a9567dd53a9ec941539f9fd0c43094340",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a1ef727a9567dd53a9ec941539f9fd0c43094340"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5b8b4499e1015f627c81d8f99a05f794d76fe96e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b8b4499e1015f627c81d8f99a05f794d76fe96e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5b8b4499e1015f627c81d8f99a05f794d76fe96e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b8b4499e1015f627c81d8f99a05f794d76fe96e/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e0eadcf7e507ac0755bfd1630f60d232ed210955",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0eadcf7e507ac0755bfd1630f60d232ed210955",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e0eadcf7e507ac0755bfd1630f60d232ed210955"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 10,
      "deletions": 15
    },
    "files": [
      {
        "sha": "c77905c53e034fabdac4f31d551065e99477455e",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 15,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b8b4499e1015f627c81d8f99a05f794d76fe96e/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b8b4499e1015f627c81d8f99a05f794d76fe96e/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=5b8b4499e1015f627c81d8f99a05f794d76fe96e",
        "patch": "@@ -120,9 +120,7 @@ class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n };\n #endif\n \n-// NO_THREAD_SAFETY_ANALYSIS: The conditional cs_wallet lock confuses the\n-// Clang thread-safety analyzer.\n-UniValue validateaddress(const JSONRPCRequest& request) NO_THREAD_SAFETY_ANALYSIS\n+UniValue validateaddress(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 1)\n         throw std::runtime_error(\n@@ -160,11 +158,8 @@ UniValue validateaddress(const JSONRPCRequest& request) NO_THREAD_SAFETY_ANALYSI\n \n #ifdef ENABLE_WALLET\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-\n-    LOCK2(cs_main, pwallet ? &pwallet->cs_wallet : nullptr);\n-#else\n-    LOCK(cs_main);\n #endif\n+    LOCK(cs_main);\n \n     CTxDestination dest = DecodeDestination(request.params[0].get_str());\n     bool isValid = IsValidDestination(dest);\n@@ -185,17 +180,17 @@ UniValue validateaddress(const JSONRPCRequest& request) NO_THREAD_SAFETY_ANALYSI\n         ret.push_back(Pair(\"iswatchonly\", bool(mine & ISMINE_WATCH_ONLY)));\n         UniValue detail = boost::apply_visitor(DescribeAddressVisitor(pwallet), dest);\n         ret.pushKVs(detail);\n-        if (pwallet && pwallet->mapAddressBook.count(dest)) {\n-            ret.push_back(Pair(\"account\", pwallet->mapAddressBook[dest].name));\n-        }\n         if (pwallet) {\n-            const auto& meta = pwallet->mapKeyMetadata;\n+            LOCK(pwallet->cs_wallet);\n+            if (pwallet->mapAddressBook.count(dest)) {\n+                ret.push_back(Pair(\"account\", pwallet->mapAddressBook[dest].name));\n+            }\n             const CKeyID *keyID = boost::get<CKeyID>(&dest);\n-            auto it = keyID ? meta.find(*keyID) : meta.end();\n-            if (it == meta.end()) {\n-                it = meta.find(CScriptID(scriptPubKey));\n+            auto it = keyID ? pwallet->mapKeyMetadata.find(*keyID) : pwallet->mapKeyMetadata.end();\n+            if (it == pwallet->mapKeyMetadata.end()) {\n+                it = pwallet->mapKeyMetadata.find(CScriptID(scriptPubKey));\n             }\n-            if (it != meta.end()) {\n+            if (it != pwallet->mapKeyMetadata.end()) {\n                 ret.push_back(Pair(\"timestamp\", it->second.nCreateTime));\n                 if (!it->second.hdKeypath.empty()) {\n                     ret.push_back(Pair(\"hdkeypath\", it->second.hdKeypath));"
      }
    ]
  },
  {
    "sha": "6d768ed4de057c4b17232a63121affe9fa2d13f4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZDc2OGVkNGRlMDU3YzRiMTcyMzJhNjMxMjFhZmZlOWZhMmQxM2Y0",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-11-09T23:22:10Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Remove incorrect NO_THREAD_SAFETY_ANALYSIS comment",
      "tree": {
        "sha": "34544ebfbe081564ad3e5f9712cb70b9520f01d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/34544ebfbe081564ad3e5f9712cb70b9520f01d1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6d768ed4de057c4b17232a63121affe9fa2d13f4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6d768ed4de057c4b17232a63121affe9fa2d13f4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6d768ed4de057c4b17232a63121affe9fa2d13f4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6d768ed4de057c4b17232a63121affe9fa2d13f4/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5b8b4499e1015f627c81d8f99a05f794d76fe96e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b8b4499e1015f627c81d8f99a05f794d76fe96e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5b8b4499e1015f627c81d8f99a05f794d76fe96e"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 0,
      "deletions": 3
    },
    "files": [
      {
        "sha": "0f0b308d6b1de0607d1732e6d57c30dc87360c64",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d768ed4de057c4b17232a63121affe9fa2d13f4/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d768ed4de057c4b17232a63121affe9fa2d13f4/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=6d768ed4de057c4b17232a63121affe9fa2d13f4",
        "patch": "@@ -789,9 +789,6 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n         pwalletdbEncryption = nullptr;\n     }\n \n-    // NO_THREAD_SAFETY_ANALYSIS: Intentionally setting\n-    // nOrderPosNext/nTimeFirstKey/nWalletVersion/nWalletMaxVersion without\n-    // holding cs_wallet.\n     void SetNull()\n     {\n         {"
      }
    ]
  },
  {
    "sha": "b305c66b5d5cf0af03d2f3506e5882c8d62c146b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMzA1YzY2YjVkNWNmMGFmMDNkMmYzNTA2ZTU4ODJjOGQ2MmMxNDZi",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-11-10T08:34:30Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Remove NO_THREAD_SAFETY_ANALYSIS from AppInitMain. Add locking to AppInitMain, ThreadImport and validation.cpp.",
      "tree": {
        "sha": "af97c769320c273a0c207d383189f6483f0a044e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/af97c769320c273a0c207d383189f6483f0a044e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b305c66b5d5cf0af03d2f3506e5882c8d62c146b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b305c66b5d5cf0af03d2f3506e5882c8d62c146b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b305c66b5d5cf0af03d2f3506e5882c8d62c146b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b305c66b5d5cf0af03d2f3506e5882c8d62c146b/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6d768ed4de057c4b17232a63121affe9fa2d13f4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6d768ed4de057c4b17232a63121affe9fa2d13f4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6d768ed4de057c4b17232a63121affe9fa2d13f4"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 16,
      "deletions": 18
    },
    "files": [
      {
        "sha": "a0beabe1d3db8ab491ac176c803b2cfb2ca8e397",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 8,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b305c66b5d5cf0af03d2f3506e5882c8d62c146b/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b305c66b5d5cf0af03d2f3506e5882c8d62c146b/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=b305c66b5d5cf0af03d2f3506e5882c8d62c146b",
        "patch": "@@ -634,7 +634,7 @@ void ThreadImport(std::vector<fs::path> vImportFiles) EXCLUSIVE_LOCKS_REQUIRED(c\n             nFile++;\n         }\n         {\n-            LOCK(cs_main);\n+            LOCK(cs_main); // reading the value pointed to by 'pblocktree' requires holding mutex 'cs_main'\n             pblocktree->WriteReindexing(false);\n         }\n         fReindex = false;\n@@ -1200,9 +1200,7 @@ bool AppInitLockDataDirectory()\n     return true;\n }\n \n-// NO_THREAD_SAFETY_ANALYSIS: Access to guarded variables happens before any\n-// thread is started.\n-bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler) NO_THREAD_SAFETY_ANALYSIS\n+bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n {\n     const CChainParams& chainparams = Params();\n     // ********************************************************* Step 4a: application initialization\n@@ -1424,7 +1422,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler) NO_THR\n \n                 if (fReset) {\n                     {\n-                        LOCK(cs_main);\n+                        LOCK(cs_main); // reading the value pointed to by 'pblocktree' requires holding mutex 'cs_main'\n                         pblocktree->WriteReindexing(true);\n                     }\n                     //If we're reindexing in prune mode, wipe away unusable block files and all undo data files\n@@ -1483,7 +1481,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler) NO_THR\n                 // If necessary, upgrade from older database format.\n                 // This is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n                 {\n-                    LOCK(cs_main);\n+                    LOCK(cs_main); // reading the value pointed to by 'pcoinsdbview' requires holding mutex 'cs_main'\n                     if (!pcoinsdbview->Upgrade()) {\n                         strLoadError = _(\"Error upgrading chainstate database\");\n                         break;\n@@ -1501,7 +1499,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler) NO_THR\n \n                 bool is_coinsview_empty;\n                 {\n-                    LOCK(cs_main);\n+                    LOCK(cs_main); // reading the value pointed to by 'pcoinsTip' requires holding mutex 'cs_main'\n                     is_coinsview_empty = fReset || fReindexChainState || pcoinsTip->GetBestBlock().IsNull();\n                 }\n                 if (!is_coinsview_empty) {\n@@ -1671,7 +1669,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler) NO_THR\n \n     //// debug print\n     {\n-        LOCK(cs_main);\n+        LOCK(cs_main); // reading variables 'mapBlockIndex' and 'chainActive' require holding mutex 'cs_main'\n         LogPrintf(\"mapBlockIndex.size() = %u\\n\", mapBlockIndex.size());\n         chain_active_height = chainActive.Height();\n     }"
      },
      {
        "sha": "2b1cd1d521ad4183045667855a7872e3873f1bf5",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b305c66b5d5cf0af03d2f3506e5882c8d62c146b/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b305c66b5d5cf0af03d2f3506e5882c8d62c146b/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=b305c66b5d5cf0af03d2f3506e5882c8d62c146b",
        "patch": "@@ -1246,7 +1246,7 @@ int GetSpendHeight(const CCoinsViewCache& inputs)\n static CuckooCache::cache<uint256, SignatureCacheHasher> scriptExecutionCache GUARDED_BY(cs_main);\n static uint256 scriptExecutionCacheNonce(GetRandHash());\n \n-void InitScriptExecutionCache() EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n+void InitScriptExecutionCache() {\n     // nMaxCacheSize is unsigned. If -maxsigcachesize is set to zero,\n     // setup_bytes creates the minimum possible cache (2 elements).\n     size_t nMaxCacheSize = std::min(std::max((int64_t)0, gArgs.GetArg(\"-maxsigcachesize\", DEFAULT_MAX_SIG_CACHE_SIZE) / 2), MAX_MAX_SIG_CACHE_SIZE) * ((size_t) 1 << 20);\n@@ -2029,7 +2029,7 @@ void FlushStateToDisk() {\n     FlushStateToDisk(chainparams, state, FLUSH_STATE_ALWAYS);\n }\n \n-void PruneAndFlush() EXCLUSIVE_LOCKS_REQUIRED(cs_LastBlockFile) {\n+void PruneAndFlush() {\n     CValidationState state;\n     {\n         LOCK(cs_LastBlockFile);\n@@ -3546,7 +3546,7 @@ CBlockIndex * InsertBlockIndex(uint256 hash) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n     return pindexNew;\n }\n \n-bool static LoadBlockIndexDB(const CChainParams& chainparams) EXCLUSIVE_LOCKS_REQUIRED(cs_main, cs_LastBlockFile)\n+bool static LoadBlockIndexDB(const CChainParams& chainparams)\n {\n     LOCK(cs_main);\n     if (!pblocktree->LoadBlockIndexGuts(chainparams.GetConsensus(), InsertBlockIndex))\n@@ -3649,7 +3649,7 @@ bool static LoadBlockIndexDB(const CChainParams& chainparams) EXCLUSIVE_LOCKS_RE\n     return true;\n }\n \n-bool LoadChainTip(const CChainParams& chainparams) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+bool LoadChainTip(const CChainParams& chainparams)\n {\n     LOCK(cs_main);\n     if (chainActive.Tip() && chainActive.Tip()->GetBlockHash() == pcoinsTip->GetBestBlock()) return true;\n@@ -3965,7 +3965,7 @@ bool RewindBlockIndex(const CChainParams& params)\n // May NOT be used after any connections are up as much\n // of the peer-processing logic assumes a consistent\n // block index state\n-void UnloadBlockIndex() EXCLUSIVE_LOCKS_REQUIRED(cs_LastBlockFile, cs_nBlockSequenceId)\n+void UnloadBlockIndex()\n {\n     LOCK(cs_main);\n     setBlockIndexCandidates.clear();"
      },
      {
        "sha": "1b8d4c946aa8a65c574509915a16f647b403c788",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b305c66b5d5cf0af03d2f3506e5882c8d62c146b/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b305c66b5d5cf0af03d2f3506e5882c8d62c146b/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=b305c66b5d5cf0af03d2f3506e5882c8d62c146b",
        "patch": "@@ -266,11 +266,11 @@ bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, CDiskB\n bool LoadGenesisBlock(const CChainParams& chainparams);\n /** Load the block tree and coins database from disk,\n  * initializing state if we're running with -reindex. */\n-bool LoadBlockIndex(const CChainParams& chainparams) EXCLUSIVE_LOCKS_REQUIRED(cs_LastBlockFile, cs_main);\n+bool LoadBlockIndex(const CChainParams& chainparams);\n /** Update the chain tip based on database information. */\n-bool LoadChainTip(const CChainParams& chainparams) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+bool LoadChainTip(const CChainParams& chainparams);\n /** Unload database information */\n-void UnloadBlockIndex() EXCLUSIVE_LOCKS_REQUIRED(cs_LastBlockFile, cs_nBlockSequenceId);\n+void UnloadBlockIndex();\n /** Run an instance of the script checking thread */\n void ThreadScriptCheck();\n /** Check whether we are doing an initial block download (synchronizing from disk or network) */\n@@ -302,7 +302,7 @@ CBlockIndex * InsertBlockIndex(uint256 hash) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n /** Flush all state, indexes and buffers to disk. */\n void FlushStateToDisk();\n /** Prune block files and flush state to disk. */\n-void PruneAndFlush() EXCLUSIVE_LOCKS_REQUIRED(cs_LastBlockFile);\n+void PruneAndFlush();\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n@@ -393,7 +393,7 @@ class CScriptCheck\n };\n \n /** Initializes the script-execution cache */\n-void InitScriptExecutionCache() EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+void InitScriptExecutionCache();\n \n \n /** Functions for disk access for blocks */"
      }
    ]
  },
  {
    "sha": "529aa91df90bc591e44c31f1d201df88c57f05f3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MjlhYTkxZGY5MGJjNTkxZTQ0YzMxZjFkMjAxZGY4OGM1N2YwNWYz",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-11-10T16:13:52Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Use correct locking in TestSequenceLocks.",
      "tree": {
        "sha": "d81b6158ada657e14641f02c97c6a249a76444f1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d81b6158ada657e14641f02c97c6a249a76444f1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/529aa91df90bc591e44c31f1d201df88c57f05f3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/529aa91df90bc591e44c31f1d201df88c57f05f3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/529aa91df90bc591e44c31f1d201df88c57f05f3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/529aa91df90bc591e44c31f1d201df88c57f05f3/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b305c66b5d5cf0af03d2f3506e5882c8d62c146b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b305c66b5d5cf0af03d2f3506e5882c8d62c146b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b305c66b5d5cf0af03d2f3506e5882c8d62c146b"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "8957fd794027f54625afbf7eb5af509991b2be21",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/529aa91df90bc591e44c31f1d201df88c57f05f3/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/529aa91df90bc591e44c31f1d201df88c57f05f3/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=529aa91df90bc591e44c31f1d201df88c57f05f3",
        "patch": "@@ -79,9 +79,9 @@ CBlockIndex CreateBlockIndex(int nHeight) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n     return index;\n }\n \n-bool TestSequenceLocks(const CTransaction &tx, int flags)\n+bool TestSequenceLocks(const CTransaction &tx, int flags) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n-    LOCK2(cs_main, mempool.cs_txMemPool);\n+    LOCK(mempool.cs_txMemPool);\n     return CheckSequenceLocks(tx, flags);\n }\n "
      }
    ]
  },
  {
    "sha": "5b031f281f27925c90d5d35a1b1f953c7e81ec2a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YjAzMWYyODFmMjc5MjVjOTBkNWQzNWExYjFmOTUzYzdlODFlYzJh",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-11-14T17:21:13Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Add temporary documentation with references to PR:s adding LOCK(...):s",
      "tree": {
        "sha": "316190922de08fa528c950ba5a4ff802a65a3c6b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/316190922de08fa528c950ba5a4ff802a65a3c6b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5b031f281f27925c90d5d35a1b1f953c7e81ec2a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b031f281f27925c90d5d35a1b1f953c7e81ec2a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5b031f281f27925c90d5d35a1b1f953c7e81ec2a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b031f281f27925c90d5d35a1b1f953c7e81ec2a/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "529aa91df90bc591e44c31f1d201df88c57f05f3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/529aa91df90bc591e44c31f1d201df88c57f05f3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/529aa91df90bc591e44c31f1d201df88c57f05f3"
      }
    ],
    "stats": {
      "total": 67,
      "additions": 31,
      "deletions": 36
    },
    "files": [
      {
        "sha": "6f4a57a7a352c74ab8e267652877635092cdf05e",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b031f281f27925c90d5d35a1b1f953c7e81ec2a/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b031f281f27925c90d5d35a1b1f953c7e81ec2a/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=5b031f281f27925c90d5d35a1b1f953c7e81ec2a",
        "patch": "@@ -634,7 +634,7 @@ void ThreadImport(std::vector<fs::path> vImportFiles) EXCLUSIVE_LOCKS_REQUIRED(c\n             nFile++;\n         }\n         {\n-            LOCK(cs_main); // reading the value pointed to by 'pblocktree' requires holding mutex 'cs_main'\n+            LOCK(cs_main); // WIP: lock submitted in https://github.com/bitcoin/bitcoin/pull/11652/files\n             pblocktree->WriteReindexing(false);\n         }\n         fReindex = false;\n@@ -1422,7 +1422,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n                 if (fReset) {\n                     {\n-                        LOCK(cs_main); // reading the value pointed to by 'pblocktree' requires holding mutex 'cs_main'\n+                        LOCK(cs_main); // WIP: lock submitted in https://github.com/bitcoin/bitcoin/pull/11652/files\n                         pblocktree->WriteReindexing(true);\n                     }\n                     //If we're reindexing in prune mode, wipe away unusable block files and all undo data files\n@@ -1445,7 +1445,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n                 // If the loaded chain has a wrong genesis, bail out immediately\n                 // (we're likely using a testnet datadir, or the other way around).\n                 {\n-                    LOCK(cs_main);\n+                    LOCK(cs_main); // WIP: lock submitted in https://github.com/bitcoin/bitcoin/pull/11652/files\n                     if (!mapBlockIndex.empty() && mapBlockIndex.count(chainparams.GetConsensus().hashGenesisBlock) == 0)\n                         return InitError(_(\"Incorrect or no genesis block found. Wrong datadir for network?\"));\n                 }\n@@ -1481,7 +1481,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n                 // If necessary, upgrade from older database format.\n                 // This is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n                 {\n-                    LOCK(cs_main); // reading the value pointed to by 'pcoinsdbview' requires holding mutex 'cs_main'\n+                    LOCK(cs_main); // WIP: lock submitted in https://github.com/bitcoin/bitcoin/pull/11652/files\n                     if (!pcoinsdbview->Upgrade()) {\n                         strLoadError = _(\"Error upgrading chainstate database\");\n                         break;\n@@ -1499,7 +1499,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n                 bool is_coinsview_empty;\n                 {\n-                    LOCK(cs_main); // reading the value pointed to by 'pcoinsTip' requires holding mutex 'cs_main'\n+                    LOCK(cs_main); // WIP: lock submitted in https://github.com/bitcoin/bitcoin/pull/11652/files\n                     is_coinsview_empty = fReset || fReindexChainState || pcoinsTip->GetBestBlock().IsNull();\n                 }\n                 if (!is_coinsview_empty) {\n@@ -1508,7 +1508,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n                         strLoadError = _(\"Error initializing block database\");\n                         break;\n                     }\n-                    LOCK(cs_main);\n+                    LOCK(cs_main); // WIP: lock submitted in https://github.com/bitcoin/bitcoin/pull/11652/files\n                     assert(chainActive.Tip() != nullptr);\n                 }\n \n@@ -1533,7 +1533,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n                     {\n                         CBlockIndex* tip;\n                         {\n-                            LOCK(cs_main);\n+                            LOCK(cs_main); // WIP: lock submitted in https://github.com/bitcoin/bitcoin/pull/11652/files\n                             tip = chainActive.Tip();\n                         }\n                         RPCNotifyBlockChange(true, tip);\n@@ -1636,7 +1636,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n     // Either install a handler to notify us when genesis activates, or set fHaveGenesis directly.\n     {\n-        LOCK(cs_main);\n+        LOCK(cs_main); // WIP: lock submitted in https://github.com/bitcoin/bitcoin/pull/11652/files\n         if (chainActive.Tip() == nullptr) {\n             uiInterface.NotifyBlockTip.connect(BlockNotifyGenesisWait);\n         } else {"
      },
      {
        "sha": "3fffa56f189e09fc1c126afe6a96c3cd36521d7f",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 13,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b031f281f27925c90d5d35a1b1f953c7e81ec2a/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b031f281f27925c90d5d35a1b1f953c7e81ec2a/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=5b031f281f27925c90d5d35a1b1f953c7e81ec2a",
        "patch": "@@ -485,6 +485,8 @@ static bool rest_getutxos(HTTPRequest* req, const std::string& strURIPart)\n     std::vector<CCoin> outs;\n     std::string bitmapStringRepresentation;\n     std::vector<bool> hits;\n+    int chainActiveHeight;\n+    uint256 chainActiveTipBlockHash;\n     bitmap.resize((vOutPoints.size() + 7) / 8);\n     {\n         LOCK2(cs_main, mempool.cs_txMemPool);\n@@ -510,17 +512,17 @@ static bool rest_getutxos(HTTPRequest* req, const std::string& strURIPart)\n             bitmapStringRepresentation.append(hit ? \"1\" : \"0\"); // form a binary string representation (human-readable for json output)\n             bitmap[i / 8] |= ((uint8_t)hit) << (i % 8);\n         }\n+\n+        chainActiveHeight = chainActive.Height();\n+        chainActiveTipBlockHash = chainActive.Tip()->GetBlockHash();\n     }\n \n     switch (rf) {\n     case RF_BINARY: {\n         // serialize data\n         // use exact same output as mentioned in Bip64\n         CDataStream ssGetUTXOResponse(SER_NETWORK, PROTOCOL_VERSION);\n-        {\n-            LOCK(cs_main);\n-            ssGetUTXOResponse << chainActive.Height() << chainActive.Tip()->GetBlockHash() << bitmap << outs;\n-        }\n+        ssGetUTXOResponse << chainActiveHeight << chainActiveTipBlockHash << bitmap << outs;\n         std::string ssGetUTXOResponseString = ssGetUTXOResponse.str();\n \n         req->WriteHeader(\"Content-Type\", \"application/octet-stream\");\n@@ -530,10 +532,7 @@ static bool rest_getutxos(HTTPRequest* req, const std::string& strURIPart)\n \n     case RF_HEX: {\n         CDataStream ssGetUTXOResponse(SER_NETWORK, PROTOCOL_VERSION);\n-        {\n-            LOCK(cs_main);\n-            ssGetUTXOResponse << chainActive.Height() << chainActive.Tip()->GetBlockHash() << bitmap << outs;\n-        }\n+        ssGetUTXOResponse << chainActiveHeight << chainActiveTipBlockHash << bitmap << outs;\n         std::string strHex = HexStr(ssGetUTXOResponse.begin(), ssGetUTXOResponse.end()) + \"\\n\";\n \n         req->WriteHeader(\"Content-Type\", \"text/plain\");\n@@ -546,11 +545,8 @@ static bool rest_getutxos(HTTPRequest* req, const std::string& strURIPart)\n \n         // pack in some essentials\n         // use more or less the same output as mentioned in Bip64\n-        {\n-            LOCK(cs_main);\n-            objGetUTXOResponse.push_back(Pair(\"chainHeight\", chainActive.Height()));\n-            objGetUTXOResponse.push_back(Pair(\"chaintipHash\", chainActive.Tip()->GetBlockHash().GetHex()));\n-        }\n+        objGetUTXOResponse.push_back(Pair(\"chainHeight\", chainActiveHeight));\n+        objGetUTXOResponse.push_back(Pair(\"chaintipHash\", chainActiveTipBlockHash.GetHex()));\n         objGetUTXOResponse.push_back(Pair(\"bitmap\", bitmapStringRepresentation));\n \n         UniValue utxos(UniValue::VARR);"
      },
      {
        "sha": "c68c02a55a4cf58e23552138109eccb9a21bd666",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 10,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b031f281f27925c90d5d35a1b1f953c7e81ec2a/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b031f281f27925c90d5d35a1b1f953c7e81ec2a/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=5b031f281f27925c90d5d35a1b1f953c7e81ec2a",
        "patch": "@@ -1252,7 +1252,7 @@ void InitScriptExecutionCache() {\n     size_t nMaxCacheSize = std::min(std::max((int64_t)0, gArgs.GetArg(\"-maxsigcachesize\", DEFAULT_MAX_SIG_CACHE_SIZE) / 2), MAX_MAX_SIG_CACHE_SIZE) * ((size_t) 1 << 20);\n     size_t nElems;\n     {\n-        LOCK(cs_main);\n+        LOCK(cs_main); // WIP: lock submitted in https://github.com/bitcoin/bitcoin/pull/11652/files\n         nElems = scriptExecutionCache.setup_bytes(nMaxCacheSize);\n     }\n     LogPrintf(\"Using %zu MiB out of %zu/2 requested for script execution cache, able to store %zu elements\\n\",\n@@ -2032,7 +2032,7 @@ void FlushStateToDisk() {\n void PruneAndFlush() {\n     CValidationState state;\n     {\n-        LOCK(cs_LastBlockFile);\n+        LOCK(cs_LastBlockFile); // WIP: lock submitted in https://github.com/bitcoin/bitcoin/pull/11652/files\n         fCheckForPruning = true;\n     }\n     const CChainParams& chainparams = Params();\n@@ -3265,9 +3265,8 @@ static bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidation\n         return AbortNode(state, std::string(\"System error: \") + e.what());\n     }\n \n-    LOCK(cs_LastBlockFile);\n-    if (fCheckForPruning)\n-        FlushStateToDisk(chainparams, state, FLUSH_STATE_NONE); // we just allocated more disk space for block files\n+    // WIP: lock submitted in https://github.com/bitcoin/bitcoin/pull/11617/files\n+    FlushStateToDisk(chainparams, state, FLUSH_STATE_NONE); // we just allocated more disk space for block files\n \n     return true;\n }\n@@ -3548,7 +3547,7 @@ CBlockIndex * InsertBlockIndex(uint256 hash) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n \n bool static LoadBlockIndexDB(const CChainParams& chainparams)\n {\n-    LOCK(cs_main);\n+    LOCK(cs_main); // WIP: lock submitted in https://github.com/bitcoin/bitcoin/pull/11652/files\n     if (!pblocktree->LoadBlockIndexGuts(chainparams.GetConsensus(), InsertBlockIndex))\n         return false;\n \n@@ -3596,7 +3595,7 @@ bool static LoadBlockIndexDB(const CChainParams& chainparams)\n             pindexBestHeader = pindex;\n     }\n \n-    LOCK(cs_LastBlockFile);\n+    LOCK(cs_LastBlockFile); // WIP: lock submitted in https://github.com/bitcoin/bitcoin/pull/11652/files\n     // Load block file info\n     pblocktree->ReadLastBlockFile(nLastBlockFile);\n     vinfoBlockFile.resize(nLastBlockFile + 1);\n@@ -3651,7 +3650,7 @@ bool static LoadBlockIndexDB(const CChainParams& chainparams)\n \n bool LoadChainTip(const CChainParams& chainparams)\n {\n-    LOCK(cs_main);\n+    LOCK(cs_main); // WIP: lock submitted in https://github.com/bitcoin/bitcoin/pull/11652/files\n     if (chainActive.Tip() && chainActive.Tip()->GetBlockHash() == pcoinsTip->GetBestBlock()) return true;\n \n     if (pcoinsTip->GetBestBlock().IsNull() && mapBlockIndex.size() == 1) {\n@@ -3976,11 +3975,11 @@ void UnloadBlockIndex()\n     mapBlocksUnlinked.clear();\n     vinfoBlockFile.clear();\n     {\n-        LOCK(cs_LastBlockFile);\n+        LOCK(cs_LastBlockFile); // WIP: lock submitted in https://github.com/bitcoin/bitcoin/pull/11652/files\n         nLastBlockFile = 0;\n     }\n     {\n-        LOCK(cs_nBlockSequenceId);\n+        LOCK(cs_nBlockSequenceId); // WIP: lock submitted in https://github.com/bitcoin/bitcoin/pull/11652/files\n         nBlockSequenceId = 1;\n     }\n     setDirtyBlockIndex.clear();"
      },
      {
        "sha": "905c7c98502ff566ebbd1f80473acecb408a24e1",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b031f281f27925c90d5d35a1b1f953c7e81ec2a/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b031f281f27925c90d5d35a1b1f953c7e81ec2a/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=5b031f281f27925c90d5d35a1b1f953c7e81ec2a",
        "patch": "@@ -1848,9 +1848,9 @@ CAmount CWalletTx::GetAvailableCredit(bool fUseCache) const EXCLUSIVE_LOCKS_REQU\n \n     CAmount nCredit = 0;\n     uint256 hashTx = GetHash();\n+    LOCK(pwallet->cs_wallet); // WIP: lock submitted in https://github.com/bitcoin/bitcoin/pull/11634/files\n     for (unsigned int i = 0; i < tx->vout.size(); i++)\n     {\n-        LOCK(pwallet->cs_wallet);\n         if (!pwallet->IsSpent(hashTx, i))\n         {\n             const CTxOut &txout = tx->vout[i];\n@@ -2691,7 +2691,7 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n     // now we ensure code won't be written that makes assumptions about\n     // nLockTime that preclude a fix later.\n     {\n-        LOCK(cs_main);\n+        LOCK(cs_main); // WIP: lock submitted in https://github.com/bitcoin/bitcoin/pull/11596/files\n         txNew.nLockTime = chainActive.Height();\n     }\n     // Secondly occasionally randomly pick a nLockTime even further back, so\n@@ -3092,7 +3092,7 @@ DBErrors CWallet::LoadWallet(bool& fFirstRunRet)\n \n     // This wallet is in its first run if all of these are empty\n     {\n-        LOCK(cs_KeyStore);\n+        LOCK(cs_KeyStore); // WIP: lock submitted in https://github.com/bitcoin/bitcoin/pull/11634/files\n         fFirstRunRet = mapKeys.empty() && mapCryptedKeys.empty() && mapWatchKeys.empty() && setWatchOnly.empty() && mapScripts.empty();\n     }\n \n@@ -3996,7 +3996,7 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile) EXCLUSIVE_L\n         // No need to read and scan block if block was created before\n         // our wallet birthday (as adjusted for block time variability)\n         {\n-            LOCK(walletInstance->cs_wallet);\n+            LOCK(walletInstance->cs_wallet); // WIP: lock submitted in https://github.com/bitcoin/bitcoin/pull/11634/files\n             while (pindexRescan && walletInstance->nTimeFirstKey && (pindexRescan->GetBlockTime() < (walletInstance->nTimeFirstKey - TIMESTAMP_WINDOW))) {\n                 pindexRescan = chainActive.Next(pindexRescan);\n             }\n@@ -4011,12 +4011,12 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile) EXCLUSIVE_L\n         // Restore wallet transaction metadata after -zapwallettxes=1\n         if (gArgs.GetBoolArg(\"-zapwallettxes\", false) && gArgs.GetArg(\"-zapwallettxes\", \"1\") != \"2\")\n         {\n+            LOCK(walletInstance->cs_wallet); // WIP: lock submitted in https://github.com/bitcoin/bitcoin/pull/11634/files\n             CWalletDB walletdb(*walletInstance->dbw);\n \n             for (const CWalletTx& wtxOld : vWtx)\n             {\n                 uint256 hash = wtxOld.GetHash();\n-                LOCK(walletInstance->cs_wallet);\n                 std::map<uint256, CWalletTx>::iterator mi = walletInstance->mapWallet.find(hash);\n                 if (mi != walletInstance->mapWallet.end())\n                 {"
      }
    ]
  },
  {
    "sha": "de9907cf3595f319839d6eba0a7c00b1636ca916",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZTk5MDdjZjM1OTVmMzE5ODM5ZDZlYmEwYTdjMDBiMTYzNmNhOTE2",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-11-14T22:40:37Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Avoid new lock by moving LogPrint statement",
      "tree": {
        "sha": "b2fca6b8c82f7bd5da4b0a422a94273e04ed5bea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b2fca6b8c82f7bd5da4b0a422a94273e04ed5bea"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/de9907cf3595f319839d6eba0a7c00b1636ca916",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/de9907cf3595f319839d6eba0a7c00b1636ca916",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/de9907cf3595f319839d6eba0a7c00b1636ca916",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/de9907cf3595f319839d6eba0a7c00b1636ca916/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5b031f281f27925c90d5d35a1b1f953c7e81ec2a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b031f281f27925c90d5d35a1b1f953c7e81ec2a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5b031f281f27925c90d5d35a1b1f953c7e81ec2a"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "18b41ed3f66ee0cb63aa888941d3341b4f30f2c3",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/de9907cf3595f319839d6eba0a7c00b1636ca916/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/de9907cf3595f319839d6eba0a7c00b1636ca916/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=de9907cf3595f319839d6eba0a7c00b1636ca916",
        "patch": "@@ -624,15 +624,15 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n     if (GetRand(std::numeric_limits<uint32_t>::max()) >= nCheckFrequency)\n         return;\n \n-    LOCK(cs_txMemPool);\n-    LogPrint(BCLog::MEMPOOL, \"Checking mempool with %u transactions and %u inputs\\n\", (unsigned int)mapTx.size(), (unsigned int)mapNextTx.size());\n-\n     uint64_t checkTotal = 0;\n     uint64_t innerUsage = 0;\n \n     CCoinsViewCache mempoolDuplicate(const_cast<CCoinsViewCache*>(pcoins));\n     const int64_t spendheight = GetSpendHeight(mempoolDuplicate);\n \n+    LOCK(cs_txMemPool);\n+    LogPrint(BCLog::MEMPOOL, \"Checking mempool with %u transactions and %u inputs\\n\", (unsigned int)mapTx.size(), (unsigned int)mapNextTx.size());\n+\n     std::list<const CTxMemPoolEntry*> waitingOnDependants;\n     for (indexed_transaction_set::const_iterator it = mapTx.begin(); it != mapTx.end(); it++) {\n         unsigned int i = 0;"
      }
    ]
  },
  {
    "sha": "6a2cacd571a0aa16eeeb90d145ecd83c612f7b24",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YTJjYWNkNTcxYTBhYTE2ZWVlYjkwZDE0NWVjZDgzYzYxMmY3YjI0",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-11-14T17:40:11Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "[wip] Document why newly introduced locks are needed",
      "tree": {
        "sha": "eb1d4e9188fff720deec48bc68f3c402c6995d1a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/eb1d4e9188fff720deec48bc68f3c402c6995d1a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6a2cacd571a0aa16eeeb90d145ecd83c612f7b24",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a2cacd571a0aa16eeeb90d145ecd83c612f7b24",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6a2cacd571a0aa16eeeb90d145ecd83c612f7b24",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a2cacd571a0aa16eeeb90d145ecd83c612f7b24/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "de9907cf3595f319839d6eba0a7c00b1636ca916",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/de9907cf3595f319839d6eba0a7c00b1636ca916",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/de9907cf3595f319839d6eba0a7c00b1636ca916"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 10,
      "deletions": 9
    },
    "files": [
      {
        "sha": "d01a3ff0623f5c396aa8b9d06bcec4186041eeb4",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a2cacd571a0aa16eeeb90d145ecd83c612f7b24/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a2cacd571a0aa16eeeb90d145ecd83c612f7b24/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=6a2cacd571a0aa16eeeb90d145ecd83c612f7b24",
        "patch": "@@ -2270,11 +2270,11 @@ bool CConnman::Start(CScheduler& scheduler, const Options& connOptions)\n     Init(connOptions);\n \n     {\n-        LOCK(cs_totalBytesRecv);\n+        LOCK(cs_totalBytesRecv); // writing variable 'nTotalBytesRecv' requires holding mutex 'cs_totalBytesRecv' exclusively\n         nTotalBytesRecv = 0;\n     }\n     {\n-        LOCK(cs_totalBytesSent);\n+        LOCK(cs_totalBytesSent); // writing variables 'nTotalBytesSent'/'nMaxOutboundTotalBytesSentInCycle'/'nMaxOutboundCycleStartTime' require holding mutex 'cs_totalBytesSent' exclusively\n         nTotalBytesSent = 0;\n         nMaxOutboundTotalBytesSentInCycle = 0;\n         nMaxOutboundCycleStartTime = 0;"
      },
      {
        "sha": "5b95f09b708540c167f3b863546b022363e5a02c",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a2cacd571a0aa16eeeb90d145ecd83c612f7b24/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a2cacd571a0aa16eeeb90d145ecd83c612f7b24/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=6a2cacd571a0aa16eeeb90d145ecd83c612f7b24",
        "patch": "@@ -159,13 +159,13 @@ class CConnman\n         nSendBufferMaxSize = connOptions.nSendBufferMaxSize;\n         nReceiveFloodSize = connOptions.nReceiveFloodSize;\n         {\n-            LOCK(cs_totalBytesSent);\n+            LOCK(cs_totalBytesSent); // writing variable 'nMaxOutboundTimeframe'/'nMaxOutboundLimit' require holding mutex 'cs_totalBytesSent' exclusively\n             nMaxOutboundTimeframe = connOptions.nMaxOutboundTimeframe;\n             nMaxOutboundLimit = connOptions.nMaxOutboundLimit;\n         }\n         vWhitelistedRange = connOptions.vWhitelistedRange;\n         {\n-            LOCK(cs_vAddedNodes);\n+            LOCK(cs_vAddedNodes); // writing variable 'vAddedNodes' requires holding mutex 'cs_vAddedNodes' exclusively\n             vAddedNodes = connOptions.m_added_nodes;\n         }\n     }"
      },
      {
        "sha": "a8576f0ff5cd4a126c34f1ddfb7f476fb4d27a69",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a2cacd571a0aa16eeeb90d145ecd83c612f7b24/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a2cacd571a0aa16eeeb90d145ecd83c612f7b24/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=6a2cacd571a0aa16eeeb90d145ecd83c612f7b24",
        "patch": "@@ -863,7 +863,8 @@ void PeerLogicValidation::NewPoWValidBlock(const CBlockIndex *pindex, const std:\n         // TODO: Avoid the repeated-serialization here\n         if (pnode->nVersion < INVALID_CB_NO_BAN_VERSION || pnode->fDisconnect)\n             return;\n-        LOCK(cs_main);\n+        AssertLockHeld(cs_main);\n+        LOCK(cs_main); // [remove lock when https://github.com/bitcoin/bitcoin/pull/11604 has been merged] repeat lock inside lambda to please clang -Wthread-safety\n         ProcessBlockAvailability(pnode->GetId());\n         CNodeState &state = *State(pnode->GetId());\n         // If the peer has, or we announced to them the previous block already,\n@@ -3032,7 +3033,7 @@ void PeerLogicValidation::EvictExtraOutboundPeers(int64_t time_in_seconds)\n \n         connman->ForEachNode([&](CNode* pnode) {\n             AssertLockHeld(cs_main);\n-            LOCK(cs_main); // repeat lock in inside lambda to please clang -Wthread-safety\n+            LOCK(cs_main); // [remove lock when https://github.com/bitcoin/bitcoin/pull/11604 has been merged] repeat lock inside lambda to please clang -Wthread-safety\n             // Ignore non-outbound peers, or nodes marked for disconnect already\n             if (!IsOutboundDisconnectionCandidate(pnode) || pnode->fDisconnect) return;\n             CNodeState *state = State(pnode->GetId());\n@@ -3047,7 +3048,7 @@ void PeerLogicValidation::EvictExtraOutboundPeers(int64_t time_in_seconds)\n         if (worst_peer != -1) {\n             bool disconnected = connman->ForNode(worst_peer, [&](CNode *pnode) {\n                 AssertLockHeld(cs_main);\n-                LOCK(cs_main); // repeat lock inside lambda to please clang -Wthread-safety\n+                LOCK(cs_main); // [remove lock when https://github.com/bitcoin/bitcoin/pull/11604 has been merged] repeat lock inside lambda to please clang -Wthread-safety\n                 // Only disconnect a peer that has been connected to us for\n                 // some reasonable fraction of our check-frequency, to give\n                 // it time for new information to have arrived."
      },
      {
        "sha": "15f8153e74805ce99802b3bdc32001f5937ff083",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a2cacd571a0aa16eeeb90d145ecd83c612f7b24/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a2cacd571a0aa16eeeb90d145ecd83c612f7b24/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=6a2cacd571a0aa16eeeb90d145ecd83c612f7b24",
        "patch": "@@ -1892,9 +1892,9 @@ CAmount CWalletTx::GetAvailableWatchOnlyCredit(const bool& fUseCache) const EXCL\n         return nAvailableWatchCreditCached;\n \n     CAmount nCredit = 0;\n+    LOCK(pwallet->cs_wallet); // calling function 'IsSpent' requires holding mutex 'pwallet->cs_wallet' exclusively\n     for (unsigned int i = 0; i < tx->vout.size(); i++)\n     {\n-        LOCK(pwallet->cs_wallet);\n         if (!pwallet->IsSpent(GetHash(), i))\n         {\n             const CTxOut &txout = tx->vout[i];"
      },
      {
        "sha": "1bcd053eda51e83ecee65d805ca5c60f09aae38b",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a2cacd571a0aa16eeeb90d145ecd83c612f7b24/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a2cacd571a0aa16eeeb90d145ecd83c612f7b24/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=6a2cacd571a0aa16eeeb90d145ecd83c612f7b24",
        "patch": "@@ -792,7 +792,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     void SetNull()\n     {\n         {\n-            LOCK(cs_wallet);\n+            LOCK(cs_wallet); // writing variable 'nWalletVersion'/'nWalletMaxVersion'/'nOrderPosNext'/'nTimeFirstKey' requires holding mutex 'cs_wallet' exclusively\n             nWalletVersion = FEATURE_BASE;\n             nWalletMaxVersion = FEATURE_BASE;\n             nOrderPosNext = 0;"
      }
    ]
  },
  {
    "sha": "825061717b376ae9e270fe4f515b29ee854b46ef",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MjUwNjE3MTdiMzc2YWU5ZTI3MGZlNGY1MTViMjllZTg1NGI0NmVm",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-11-15T15:03:40Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Revert locking changes in getblocktemplate(...)",
      "tree": {
        "sha": "3025e7889c578ce6e05419800f1c994a0c7d17ff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3025e7889c578ce6e05419800f1c994a0c7d17ff"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/825061717b376ae9e270fe4f515b29ee854b46ef",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/825061717b376ae9e270fe4f515b29ee854b46ef",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/825061717b376ae9e270fe4f515b29ee854b46ef",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/825061717b376ae9e270fe4f515b29ee854b46ef/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6a2cacd571a0aa16eeeb90d145ecd83c612f7b24",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a2cacd571a0aa16eeeb90d145ecd83c612f7b24",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6a2cacd571a0aa16eeeb90d145ecd83c612f7b24"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 11,
      "deletions": 10
    },
    "files": [
      {
        "sha": "0cfa8c165f5ac7ada523ef15fb3e7ef3a788eb6f",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 10,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/825061717b376ae9e270fe4f515b29ee854b46ef/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/825061717b376ae9e270fe4f515b29ee854b46ef/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=825061717b376ae9e270fe4f515b29ee854b46ef",
        "patch": "@@ -372,6 +372,8 @@ UniValue getblocktemplate(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"getblocktemplate\", \"\")\n          );\n \n+    LOCK(cs_main);\n+\n     std::string strMode = \"template\";\n     UniValue lpval = NullUniValue;\n     std::set<std::string> setClientRules;\n@@ -401,7 +403,6 @@ UniValue getblocktemplate(const JSONRPCRequest& request)\n                 throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"Block decode failed\");\n \n             uint256 hash = block.GetHash();\n-            LOCK(cs_main);\n             BlockMap::iterator mi = mapBlockIndex.find(hash);\n             if (mi != mapBlockIndex.end()) {\n                 CBlockIndex *pindex = mi->second;\n@@ -467,23 +468,25 @@ UniValue getblocktemplate(const JSONRPCRequest& request)\n         }\n         else\n         {\n-            LOCK(cs_main);\n             // NOTE: Spec does not specify behaviour for non-string longpollid, but this makes testing easier\n             hashWatchedChain = chainActive.Tip()->GetBlockHash();\n             nTransactionsUpdatedLastLP = nTransactionsUpdatedLast;\n         }\n \n         // Release the wallet and main lock while waiting\n+        LEAVE_CRITICAL_SECTION(cs_main);\n         {\n             checktxtime = std::chrono::steady_clock::now() + std::chrono::minutes(1);\n \n             WaitableLock lock(csBestBlock);\n-            bool keepRunning;\n-            {\n+\n+            auto KeepRunning = [&]() -> bool {\n                 LOCK(cs_main);\n-                keepRunning = chainActive.Tip()->GetBlockHash() == hashWatchedChain && IsRPCRunning();\n-            }\n-            while (keepRunning)\n+                assert(chainActive.Tip());\n+                return chainActive.Tip()->GetBlockHash() == hashWatchedChain && IsRPCRunning();\n+            };\n+\n+            while (KeepRunning())\n             {\n                 if (cvBlockChange.wait_until(lock, checktxtime) == std::cv_status::timeout)\n                 {\n@@ -492,10 +495,9 @@ UniValue getblocktemplate(const JSONRPCRequest& request)\n                         break;\n                     checktxtime += std::chrono::seconds(10);\n                 }\n-                LOCK(cs_main);\n-                keepRunning = chainActive.Tip()->GetBlockHash() == hashWatchedChain && IsRPCRunning();\n             }\n         }\n+        ENTER_CRITICAL_SECTION(cs_main);\n \n         if (!IsRPCRunning())\n             throw JSONRPCError(RPC_CLIENT_NOT_CONNECTED, \"Shutting down\");\n@@ -509,7 +511,6 @@ UniValue getblocktemplate(const JSONRPCRequest& request)\n     bool fSupportsSegwit = setClientRules.find(segwit_info.name) != setClientRules.end();\n \n     // Update block\n-    LOCK(cs_main);\n     static CBlockIndex* pindexPrev;\n     static int64_t nStart;\n     static std::unique_ptr<CBlockTemplate> pblocktemplate;"
      }
    ]
  },
  {
    "sha": "4c01a4507c93354dd975f859abd8dcad1861e557",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YzAxYTQ1MDdjOTMzNTRkZDk3NWY4NTlhYmQ4ZGNhZDE4NjFlNTU3",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-11-16T08:45:02Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Add GUARDED_BY(cs_txMemPool) to nCheckFrequency. Add corresponding LOCK(...).",
      "tree": {
        "sha": "682a16218533efc95c8eef416f49ff71121d50b1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/682a16218533efc95c8eef416f49ff71121d50b1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4c01a4507c93354dd975f859abd8dcad1861e557",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4c01a4507c93354dd975f859abd8dcad1861e557",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4c01a4507c93354dd975f859abd8dcad1861e557",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4c01a4507c93354dd975f859abd8dcad1861e557/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "825061717b376ae9e270fe4f515b29ee854b46ef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/825061717b376ae9e270fe4f515b29ee854b46ef",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/825061717b376ae9e270fe4f515b29ee854b46ef"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 6,
      "deletions": 5
    },
    "files": [
      {
        "sha": "45510dc9ec07dd0f6d46540b238c2ef0dd545dfe",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c01a4507c93354dd975f859abd8dcad1861e557/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c01a4507c93354dd975f859abd8dcad1861e557/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=4c01a4507c93354dd975f859abd8dcad1861e557",
        "patch": "@@ -618,21 +618,22 @@ static void CheckInputsAndUpdateCoins(const CTransaction& tx, CCoinsViewCache& m\n \n void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n {\n+    LOCK(cs_txMemPool);\n+\n     if (nCheckFrequency == 0)\n         return;\n \n     if (GetRand(std::numeric_limits<uint32_t>::max()) >= nCheckFrequency)\n         return;\n \n+    LogPrint(BCLog::MEMPOOL, \"Checking mempool with %u transactions and %u inputs\\n\", (unsigned int)mapTx.size(), (unsigned int)mapNextTx.size());\n+\n     uint64_t checkTotal = 0;\n     uint64_t innerUsage = 0;\n \n     CCoinsViewCache mempoolDuplicate(const_cast<CCoinsViewCache*>(pcoins));\n     const int64_t spendheight = GetSpendHeight(mempoolDuplicate);\n \n-    LOCK(cs_txMemPool);\n-    LogPrint(BCLog::MEMPOOL, \"Checking mempool with %u transactions and %u inputs\\n\", (unsigned int)mapTx.size(), (unsigned int)mapNextTx.size());\n-\n     std::list<const CTxMemPoolEntry*> waitingOnDependants;\n     for (indexed_transaction_set::const_iterator it = mapTx.begin(); it != mapTx.end(); it++) {\n         unsigned int i = 0;"
      },
      {
        "sha": "d2954457ac5e9ef9a413b46389ba7a68da9b3ab5",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c01a4507c93354dd975f859abd8dcad1861e557/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c01a4507c93354dd975f859abd8dcad1861e557/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=4c01a4507c93354dd975f859abd8dcad1861e557",
        "patch": "@@ -412,7 +412,7 @@ class SaltedTxidHasher\n class CTxMemPool\n {\n private:\n-    uint32_t nCheckFrequency; //!< Value n means that n times in 2^32 we check.\n+    uint32_t nCheckFrequency GUARDED_BY(cs_txMemPool); //!< Value n means that n times in 2^32 we check.\n     unsigned int nTransactionsUpdated GUARDED_BY(cs_txMemPool); //!< Used by getblocktemplate to trigger CreateNewBlock() invocation\n     CBlockPolicyEstimator* minerPolicyEstimator PT_GUARDED_BY(cs_txMemPool);\n \n@@ -507,7 +507,7 @@ class CTxMemPool\n      * check does nothing.\n      */\n     void check(const CCoinsViewCache *pcoins) const;\n-    void setSanityCheck(double dFrequency = 1.0) { nCheckFrequency = static_cast<uint32_t>(dFrequency * 4294967295.0); }\n+    void setSanityCheck(double dFrequency = 1.0) { LOCK(cs_txMemPool); nCheckFrequency = static_cast<uint32_t>(dFrequency * 4294967295.0); }\n \n     // addUnchecked must updated state for all ancestors of a given transaction,\n     // to track size/count of descendant transactions.  First version of"
      }
    ]
  },
  {
    "sha": "789a315013b41eb085a0ab356d39be63a1ed777e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ODlhMzE1MDEzYjQxZWIwODVhMGFiMzU2ZDM5YmU2M2ExZWQ3Nzdl",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-11-16T13:07:55Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Fix incorrect PT_GUARDED_BY locks. Add GUARDED_BY(cs_filter) fRelayTxes. Add corresponding LOCK(...):s.",
      "tree": {
        "sha": "f7ce7dc8eb15df770e924c1b6b9dc5fce0937079",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f7ce7dc8eb15df770e924c1b6b9dc5fce0937079"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/789a315013b41eb085a0ab356d39be63a1ed777e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/789a315013b41eb085a0ab356d39be63a1ed777e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/789a315013b41eb085a0ab356d39be63a1ed777e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/789a315013b41eb085a0ab356d39be63a1ed777e/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4c01a4507c93354dd975f859abd8dcad1861e557",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4c01a4507c93354dd975f859abd8dcad1861e557",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4c01a4507c93354dd975f859abd8dcad1861e557"
      }
    ],
    "stats": {
      "total": 94,
      "additions": 51,
      "deletions": 43
    },
    "files": [
      {
        "sha": "5c1569c5e031d14d7308714b60c8e6e946c7e6d3",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 35,
        "deletions": 30,
        "changes": 65,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/789a315013b41eb085a0ab356d39be63a1ed777e/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/789a315013b41eb085a0ab356d39be63a1ed777e/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=789a315013b41eb085a0ab356d39be63a1ed777e",
        "patch": "@@ -216,8 +216,11 @@ void Shutdown()\n     }\n \n     // FlushStateToDisk generates a SetBestChain callback, which we should avoid missing\n-    if (pcoinsTip != nullptr) {\n-        FlushStateToDisk();\n+    {\n+        LOCK(cs_main);\n+        if (pcoinsTip != nullptr) {\n+            FlushStateToDisk();\n+        }\n     }\n \n     // After there are no more peers/RPC left to give us new data which may generate\n@@ -1415,10 +1418,13 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n         do {\n             try {\n                 UnloadBlockIndex();\n-                pcoinsTip.reset();\n-                pcoinsdbview.reset();\n-                pcoinscatcher.reset();\n-                pblocktree.reset(new CBlockTreeDB(nBlockTreeDBCache, false, fReset));\n+                {\n+                    LOCK(cs_main);\n+                    pcoinsTip.reset();\n+                    pcoinsdbview.reset();\n+                    pcoinscatcher.reset();\n+                    pblocktree.reset(new CBlockTreeDB(nBlockTreeDBCache, false, fReset));\n+                }\n \n                 if (fReset) {\n                     {\n@@ -1472,34 +1478,30 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n                     break;\n                 }\n \n-                // At this point we're either in reindex or we've loaded a useful\n-                // block tree into mapBlockIndex!\n-\n-                pcoinsdbview.reset(new CCoinsViewDB(nCoinDBCache, false, fReset || fReindexChainState));\n-                pcoinscatcher.reset(new CCoinsViewErrorCatcher(pcoinsdbview.get()));\n-\n-                // If necessary, upgrade from older database format.\n-                // This is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n+                bool is_coinsview_empty;\n                 {\n-                    LOCK(cs_main); // WIP: lock submitted in https://github.com/bitcoin/bitcoin/pull/11652/files\n+                    LOCK(cs_main);\n+                    // At this point we're either in reindex or we've loaded a useful\n+                    // block tree into mapBlockIndex!\n+                    pcoinsdbview.reset(new CCoinsViewDB(nCoinDBCache, false, fReset || fReindexChainState));\n+                    pcoinscatcher.reset(new CCoinsViewErrorCatcher(pcoinsdbview.get()));\n+\n+                    // If necessary, upgrade from older database format.\n+                    // This is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n                     if (!pcoinsdbview->Upgrade()) {\n                         strLoadError = _(\"Error upgrading chainstate database\");\n                         break;\n                     }\n-                }\n \n-                // ReplayBlocks is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n-                if (!ReplayBlocks(chainparams, pcoinsdbview.get())) {\n-                    strLoadError = _(\"Unable to replay blocks. You will need to rebuild the database using -reindex-chainstate.\");\n-                    break;\n-                }\n+                    // ReplayBlocks is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n+                    if (!ReplayBlocks(chainparams, pcoinsdbview.get())) {\n+                        strLoadError = _(\"Unable to replay blocks. You will need to rebuild the database using -reindex-chainstate.\");\n+                        break;\n+                    }\n \n-                // The on-disk coinsdb is now in a good state, create the cache\n-                pcoinsTip.reset(new CCoinsViewCache(pcoinscatcher.get()));\n+                    // The on-disk coinsdb is now in a good state, create the cache\n+                    pcoinsTip.reset(new CCoinsViewCache(pcoinscatcher.get()));\n \n-                bool is_coinsview_empty;\n-                {\n-                    LOCK(cs_main); // WIP: lock submitted in https://github.com/bitcoin/bitcoin/pull/11652/files\n                     is_coinsview_empty = fReset || fReindexChainState || pcoinsTip->GetBestBlock().IsNull();\n                 }\n                 if (!is_coinsview_empty) {\n@@ -1545,10 +1547,13 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n                         }\n                     }\n \n-                    if (!CVerifyDB().VerifyDB(chainparams, pcoinsdbview.get(), gArgs.GetArg(\"-checklevel\", DEFAULT_CHECKLEVEL),\n-                                  gArgs.GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS))) {\n-                        strLoadError = _(\"Corrupted block database detected\");\n-                        break;\n+                    {\n+                        LOCK(cs_main);\n+                        if (!CVerifyDB().VerifyDB(chainparams, pcoinsdbview.get(), gArgs.GetArg(\"-checklevel\", DEFAULT_CHECKLEVEL),\n+                                                  gArgs.GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS))) {\n+                            strLoadError = _(\"Corrupted block database detected\");\n+                            break;\n+                        }\n                     }\n                 }\n             } catch (const std::exception& e) {"
      },
      {
        "sha": "aebf8d606470388a58c4ed4bf6e9b81bfddf6055",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/789a315013b41eb085a0ab356d39be63a1ed777e/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/789a315013b41eb085a0ab356d39be63a1ed777e/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=789a315013b41eb085a0ab356d39be63a1ed777e",
        "patch": "@@ -985,13 +985,14 @@ bool CConnman::AttemptToEvictConnection()\n     {\n         LOCK(cs_vNodes);\n \n-        for (const CNode* node : vNodes) {\n+        for (CNode* node : vNodes) {\n             if (node->fWhitelisted)\n                 continue;\n             if (!node->fInbound)\n                 continue;\n             if (node->fDisconnect)\n                 continue;\n+            LOCK(node->cs_filter);\n             NodeEvictionCandidate candidate = {node->GetId(), node->nTimeConnected, node->nMinPingUsecTime,\n                                                node->nLastBlockTime, node->nLastTXTime,\n                                                HasAllDesirableServiceFlags(node->nServices),"
      },
      {
        "sha": "143d829c4693425d42c11eb78987233a5a443828",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/789a315013b41eb085a0ab356d39be63a1ed777e/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/789a315013b41eb085a0ab356d39be63a1ed777e/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=789a315013b41eb085a0ab356d39be63a1ed777e",
        "patch": "@@ -650,11 +650,11 @@ class CNode\n     // a) it allows us to not relay tx invs before receiving the peer's version message\n     // b) the peer may tell us in its version message that we should not relay tx invs\n     //    unless it loads a bloom filter.\n-    bool fRelayTxes; //protected by cs_filter\n+    bool fRelayTxes GUARDED_BY(cs_filter); //protected by cs_filter\n     bool fSentAddr;\n     CSemaphoreGrant grantOutbound;\n     CCriticalSection cs_filter;\n-    std::unique_ptr<CBloomFilter> pfilter PT_GUARDED_BY(cs_filter);\n+    std::unique_ptr<CBloomFilter> pfilter GUARDED_BY(cs_filter);\n     std::atomic<int> nRefCount;\n \n     const uint64_t nKeyedNetGroup;"
      },
      {
        "sha": "04f7765c63220232c21847e39871bce6f2f198c4",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/789a315013b41eb085a0ab356d39be63a1ed777e/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/789a315013b41eb085a0ab356d39be63a1ed777e/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=789a315013b41eb085a0ab356d39be63a1ed777e",
        "patch": "@@ -683,6 +683,7 @@ CFeeRate CBlockPolicyEstimator::estimateFee(int confTarget) const\n \n CFeeRate CBlockPolicyEstimator::estimateRawFee(int confTarget, double successThreshold, FeeEstimateHorizon horizon, EstimationResult* result) const\n {\n+    LOCK(cs_feeEstimator);\n     TxConfirmStats* stats;\n     double sufficientTxs = SUFFICIENT_FEETXS;\n     switch (horizon) {\n@@ -704,7 +705,6 @@ CFeeRate CBlockPolicyEstimator::estimateRawFee(int confTarget, double successThr\n     }\n     }\n \n-    LOCK(cs_feeEstimator);\n     // Return failure if trying to analyze a target we're not tracking\n     if (confTarget <= 0 || (unsigned int)confTarget > stats->GetMaxConfirms())\n         return CFeeRate(0);"
      },
      {
        "sha": "dbfad94b67d161b822e2123ee1188676ae49e715",
        "filename": "src/policy/fees.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/789a315013b41eb085a0ab356d39be63a1ed777e/src/policy/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/789a315013b41eb085a0ab356d39be63a1ed777e/src/policy/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.h?ref=789a315013b41eb085a0ab356d39be63a1ed777e",
        "patch": "@@ -247,9 +247,9 @@ class CBlockPolicyEstimator\n     std::map<uint256, TxStatsInfo> mapMemPoolTxs GUARDED_BY(cs_feeEstimator);\n \n     /** Classes to track historical data on transaction confirmations */\n-    std::unique_ptr<TxConfirmStats> feeStats PT_GUARDED_BY(cs_feeEstimator);\n-    std::unique_ptr<TxConfirmStats> shortStats PT_GUARDED_BY(cs_feeEstimator);\n-    std::unique_ptr<TxConfirmStats> longStats PT_GUARDED_BY(cs_feeEstimator);\n+    std::unique_ptr<TxConfirmStats> feeStats GUARDED_BY(cs_feeEstimator);\n+    std::unique_ptr<TxConfirmStats> shortStats GUARDED_BY(cs_feeEstimator);\n+    std::unique_ptr<TxConfirmStats> longStats GUARDED_BY(cs_feeEstimator);\n \n     unsigned int trackedTxs GUARDED_BY(cs_feeEstimator);\n     unsigned int untrackedTxs GUARDED_BY(cs_feeEstimator);"
      },
      {
        "sha": "8fe586f177d472d73d2bc20e84f589b8ac0b16b3",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/789a315013b41eb085a0ab356d39be63a1ed777e/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/789a315013b41eb085a0ab356d39be63a1ed777e/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=789a315013b41eb085a0ab356d39be63a1ed777e",
        "patch": "@@ -928,6 +928,7 @@ UniValue gettxoutsetinfo(const JSONRPCRequest& request)\n \n     CCoinsStats stats;\n     FlushStateToDisk();\n+    LOCK(cs_main);\n     if (GetUTXOStats(pcoinsdbview.get(), stats)) {\n         ret.push_back(Pair(\"height\", (int64_t)stats.nHeight));\n         ret.push_back(Pair(\"bestblock\", stats.hashBlock.GetHex()));"
      },
      {
        "sha": "80b1fe067dd3e4b6d7c967e4ee3042e688068814",
        "filename": "src/test/txvalidationcache_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/789a315013b41eb085a0ab356d39be63a1ed777e/src/test/txvalidationcache_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/789a315013b41eb085a0ab356d39be63a1ed777e/src/test/txvalidationcache_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidationcache_tests.cpp?ref=789a315013b41eb085a0ab356d39be63a1ed777e",
        "patch": "@@ -120,6 +120,7 @@ void ValidateCheckInputsForAllFlags(CMutableTransaction &tx, uint32_t failing_fl\n             // WITNESS requires P2SH\n             test_flags |= SCRIPT_VERIFY_P2SH;\n         }\n+        LOCK(cs_main);\n         bool ret = CheckInputs(tx, state, pcoinsTip.get(), true, test_flags, true, add_to_cache, txdata, nullptr);\n         // CheckInputs should succeed iff test_flags doesn't intersect with\n         // failing_flags"
      },
      {
        "sha": "1c930e0b5e63817c91e406a7789c47447f57881d",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/789a315013b41eb085a0ab356d39be63a1ed777e/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/789a315013b41eb085a0ab356d39be63a1ed777e/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=789a315013b41eb085a0ab356d39be63a1ed777e",
        "patch": "@@ -414,7 +414,7 @@ class CTxMemPool\n private:\n     uint32_t nCheckFrequency GUARDED_BY(cs_txMemPool); //!< Value n means that n times in 2^32 we check.\n     unsigned int nTransactionsUpdated GUARDED_BY(cs_txMemPool); //!< Used by getblocktemplate to trigger CreateNewBlock() invocation\n-    CBlockPolicyEstimator* minerPolicyEstimator PT_GUARDED_BY(cs_txMemPool);\n+    CBlockPolicyEstimator* minerPolicyEstimator GUARDED_BY(cs_txMemPool);\n \n     uint64_t totalTxSize GUARDED_BY(cs_txMemPool); //!< sum of all mempool tx's virtual sizes. Differs from serialized tx size since witness data is discounted. Defined in BIP 141.\n     uint64_t cachedInnerUsage GUARDED_BY(cs_txMemPool); //!< sum of dynamic memory usage of all the map elements (NOT the maps themselves)"
      },
      {
        "sha": "f062ae056cacb5b40538c97ab7413f8e569677c5",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/789a315013b41eb085a0ab356d39be63a1ed777e/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/789a315013b41eb085a0ab356d39be63a1ed777e/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=789a315013b41eb085a0ab356d39be63a1ed777e",
        "patch": "@@ -64,7 +64,7 @@ CCriticalSection cs_main;\n \n BlockMap mapBlockIndex GUARDED_BY(cs_main);\n CChain chainActive;\n-CBlockIndex *pindexBestHeader PT_GUARDED_BY(cs_main) = nullptr;\n+CBlockIndex *pindexBestHeader GUARDED_BY(cs_main) = nullptr;\n CWaitableCriticalSection csBestBlock;\n CConditionVariable cvBlockChange;\n int nScriptCheckThreads = 0;"
      },
      {
        "sha": "e90b9aaedc9cfc7b8a3bf37dbf8c61c9131d1c62",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/789a315013b41eb085a0ab356d39be63a1ed777e/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/789a315013b41eb085a0ab356d39be63a1ed777e/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=789a315013b41eb085a0ab356d39be63a1ed777e",
        "patch": "@@ -189,7 +189,7 @@ extern uint256 hashAssumeValid;\n extern arith_uint256 nMinimumChainWork;\n \n /** Best header we've seen so far (used for getheaders queries' starting points). */\n-extern CBlockIndex *pindexBestHeader PT_GUARDED_BY(cs_main);\n+extern CBlockIndex *pindexBestHeader GUARDED_BY(cs_main);\n \n /** Minimum disk space required - used in CheckDiskSpace() */\n static const uint64_t nMinDiskSpace = 52428800;\n@@ -447,13 +447,13 @@ bool ResetBlockFailureFlags(CBlockIndex *pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_mai\n extern CChain chainActive GUARDED_BY(cs_main);\n \n /** Global variable that points to the coins database (protected by cs_main) */\n-extern std::unique_ptr<CCoinsViewDB> pcoinsdbview PT_GUARDED_BY(cs_main);\n+extern std::unique_ptr<CCoinsViewDB> pcoinsdbview GUARDED_BY(cs_main);\n \n /** Global variable that points to the active CCoinsView (protected by cs_main) */\n-extern std::unique_ptr<CCoinsViewCache> pcoinsTip PT_GUARDED_BY(cs_main);\n+extern std::unique_ptr<CCoinsViewCache> pcoinsTip GUARDED_BY(cs_main);\n \n /** Global variable that points to the active block tree (protected by cs_main) */\n-extern std::unique_ptr<CBlockTreeDB> pblocktree PT_GUARDED_BY(cs_main);\n+extern std::unique_ptr<CBlockTreeDB> pblocktree GUARDED_BY(cs_main);\n \n /**\n  * Return the spend height, which is one more than the inputs.GetBestBlock()."
      }
    ]
  },
  {
    "sha": "5d8e34545a32621095ed31828552ab2433e2bc9a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZDhlMzQ1NDVhMzI2MjEwOTVlZDMxODI4NTUyYWIyNDMzZTJiYzlh",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-11-16T22:04:44Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Fix variable name typo",
      "tree": {
        "sha": "b24fe3ad413105a3827c2b555de81ea0d052bdc8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b24fe3ad413105a3827c2b555de81ea0d052bdc8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5d8e34545a32621095ed31828552ab2433e2bc9a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d8e34545a32621095ed31828552ab2433e2bc9a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5d8e34545a32621095ed31828552ab2433e2bc9a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d8e34545a32621095ed31828552ab2433e2bc9a/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "789a315013b41eb085a0ab356d39be63a1ed777e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/789a315013b41eb085a0ab356d39be63a1ed777e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/789a315013b41eb085a0ab356d39be63a1ed777e"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "d9efe5b54db33d0d58a03af63869f9e936eae9ea",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d8e34545a32621095ed31828552ab2433e2bc9a/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d8e34545a32621095ed31828552ab2433e2bc9a/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=5d8e34545a32621095ed31828552ab2433e2bc9a",
        "patch": "@@ -45,7 +45,7 @@ static int64_t CalculateMaximumSignedTxSize(const CTransaction &tx, const CWalle\n \n //! Check whether transaction has descendant in wallet or mempool, or has been\n //! mined, or conflicts with a mined transaction. Return a feebumper::Result.\n-static feebumper::Result PreconditionChecks(const CWallet* wallet, const CWalletTx& wtx, std::vector<std::string>& errors) EXCLUSIVE_LOCKS_REQUIRED(cs_main, pWallet->cs_wallet)\n+static feebumper::Result PreconditionChecks(const CWallet* wallet, const CWalletTx& wtx, std::vector<std::string>& errors) EXCLUSIVE_LOCKS_REQUIRED(cs_main, wallet->cs_wallet)\n {\n     if (wallet->HasWalletSpend(wtx.GetHash())) {\n         errors.push_back(\"Transaction has descendants in the wallet\");"
      }
    ]
  },
  {
    "sha": "2909d8a4ae5d7d237caa1992e3bd8f43256cb867",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyOTA5ZDhhNGFlNWQ3ZDIzN2NhYTE5OTJlM2JkOGY0MzI1NmNiODY3",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-11-20T10:05:08Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Add GUARDED_BY(cs_wallet) to nRelockTime. Add corresponding LOCK(...).",
      "tree": {
        "sha": "dc677e896024f8711745b2e43db85a941c1b3245",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dc677e896024f8711745b2e43db85a941c1b3245"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2909d8a4ae5d7d237caa1992e3bd8f43256cb867",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2909d8a4ae5d7d237caa1992e3bd8f43256cb867",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2909d8a4ae5d7d237caa1992e3bd8f43256cb867",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2909d8a4ae5d7d237caa1992e3bd8f43256cb867/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5d8e34545a32621095ed31828552ab2433e2bc9a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d8e34545a32621095ed31828552ab2433e2bc9a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5d8e34545a32621095ed31828552ab2433e2bc9a"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "1fdf85ddb0c8a226571bf6a093cb1e0ff98785cf",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2909d8a4ae5d7d237caa1992e3bd8f43256cb867/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2909d8a4ae5d7d237caa1992e3bd8f43256cb867/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=2909d8a4ae5d7d237caa1992e3bd8f43256cb867",
        "patch": "@@ -797,6 +797,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n             nWalletMaxVersion = FEATURE_BASE;\n             nOrderPosNext = 0;\n             nTimeFirstKey = 0;\n+            nRelockTime = 0;\n         }\n         nMasterKeyMaxID = 0;\n         pwalletdbEncryption = nullptr;\n@@ -805,7 +806,6 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n         nLastResend = 0;\n         m_max_keypool_index = 0;\n         fBroadcastTransactions = false;\n-        nRelockTime = 0;\n         fAbortRescan = false;\n         fScanningWallet = false;\n     }\n@@ -909,7 +909,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     bool LoadWatchOnly(const CScript &dest);\n \n     //! Holds a timestamp at which point the wallet is scheduled (externally) to be relocked. Caller must arrange for actual relocking to occur via Lock().\n-    int64_t nRelockTime;\n+    int64_t nRelockTime GUARDED_BY(cs_wallet);\n \n     bool Unlock(const SecureString& strWalletPassphrase);\n     bool ChangeWalletPassphrase(const SecureString& strOldWalletPassphrase, const SecureString& strNewWalletPassphrase);"
      }
    ]
  },
  {
    "sha": "e7b27cddbeff9c2281e8da6006fc0f4755f8ed23",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplN2IyN2NkZGJlZmY5YzIyODFlOGRhNjAwNmZjMGY0NzU1ZjhlZDIz",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-11-20T10:17:18Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Add GUARDED_BY(cs_LastBlockFile) to vinfoBlockFile. Add corresponding LOCK(...).",
      "tree": {
        "sha": "c855b859b4f56ad0b423f2127d48a0a8ad8533f6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c855b859b4f56ad0b423f2127d48a0a8ad8533f6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e7b27cddbeff9c2281e8da6006fc0f4755f8ed23",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e7b27cddbeff9c2281e8da6006fc0f4755f8ed23",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e7b27cddbeff9c2281e8da6006fc0f4755f8ed23",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e7b27cddbeff9c2281e8da6006fc0f4755f8ed23/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2909d8a4ae5d7d237caa1992e3bd8f43256cb867",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2909d8a4ae5d7d237caa1992e3bd8f43256cb867",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2909d8a4ae5d7d237caa1992e3bd8f43256cb867"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "fb34ee1b66b0c3b12fb4951be1e286c469104649",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e7b27cddbeff9c2281e8da6006fc0f4755f8ed23/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e7b27cddbeff9c2281e8da6006fc0f4755f8ed23/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=e7b27cddbeff9c2281e8da6006fc0f4755f8ed23",
        "patch": "@@ -138,7 +138,7 @@ namespace {\n      */\n     std::multimap<CBlockIndex*, CBlockIndex*> mapBlocksUnlinked;\n \n-    std::vector<CBlockFileInfo> vinfoBlockFile;\n+    std::vector<CBlockFileInfo> vinfoBlockFile GUARDED_BY(cs_LastBlockFile);\n     int nLastBlockFile GUARDED_BY(cs_LastBlockFile) = 0;\n     /** Global flag to indicate we should check to see if there are\n      *  block/undo files that should be deleted.  Set on startup\n@@ -3973,10 +3973,10 @@ void UnloadBlockIndex()\n     pindexBestHeader = nullptr;\n     mempool.clear();\n     mapBlocksUnlinked.clear();\n-    vinfoBlockFile.clear();\n     {\n         LOCK(cs_LastBlockFile); // WIP: lock submitted in https://github.com/bitcoin/bitcoin/pull/11652/files\n         nLastBlockFile = 0;\n+        vinfoBlockFile.clear();\n     }\n     {\n         LOCK(cs_nBlockSequenceId); // WIP: lock submitted in https://github.com/bitcoin/bitcoin/pull/11652/files"
      }
    ]
  },
  {
    "sha": "f131976e169e523e4642809a5942ce8709dc444d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMTMxOTc2ZTE2OWU1MjNlNDY0MjgwOWE1OTQyY2U4NzA5ZGM0NDRk",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-11-20T17:42:40Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "WIP: Fix conditional locking in validateaddress(...)",
      "tree": {
        "sha": "eb693ebf5cddaa52042cbf703d5c336e5d65451a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/eb693ebf5cddaa52042cbf703d5c336e5d65451a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f131976e169e523e4642809a5942ce8709dc444d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f131976e169e523e4642809a5942ce8709dc444d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f131976e169e523e4642809a5942ce8709dc444d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f131976e169e523e4642809a5942ce8709dc444d/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e7b27cddbeff9c2281e8da6006fc0f4755f8ed23",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e7b27cddbeff9c2281e8da6006fc0f4755f8ed23",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e7b27cddbeff9c2281e8da6006fc0f4755f8ed23"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 4,
      "deletions": 1
    },
    "files": [
      {
        "sha": "2fab81807133013e16734ce05d2101b5a13240ec",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f131976e169e523e4642809a5942ce8709dc444d/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f131976e169e523e4642809a5942ce8709dc444d/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=f131976e169e523e4642809a5942ce8709dc444d",
        "patch": "@@ -158,8 +158,11 @@ UniValue validateaddress(const JSONRPCRequest& request)\n \n #ifdef ENABLE_WALLET\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-#endif\n+\n+    LOCK2(cs_main, pwallet ? &pwallet->cs_wallet : nullptr);\n+#else\n     LOCK(cs_main);\n+#endif\n \n     CTxDestination dest = DecodeDestination(request.params[0].get_str());\n     bool isValid = IsValidDestination(dest);"
      }
    ]
  },
  {
    "sha": "91f8024d027e729295ca4b9f39ea5f092c8f2c72",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MWY4MDI0ZDAyN2U3MjkyOTVjYTRiOWYzOWVhNWYwOTJjOGYyYzcy",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-11-21T16:44:15Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Add refereces to tracking GitHub issues",
      "tree": {
        "sha": "658bd5aca133d9f9a51424a3e8b75288c147c63b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/658bd5aca133d9f9a51424a3e8b75288c147c63b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/91f8024d027e729295ca4b9f39ea5f092c8f2c72",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91f8024d027e729295ca4b9f39ea5f092c8f2c72",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/91f8024d027e729295ca4b9f39ea5f092c8f2c72",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91f8024d027e729295ca4b9f39ea5f092c8f2c72/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f131976e169e523e4642809a5942ce8709dc444d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f131976e169e523e4642809a5942ce8709dc444d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f131976e169e523e4642809a5942ce8709dc444d"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 6,
      "deletions": 6
    },
    "files": [
      {
        "sha": "d94a0fbd643737daaa45dafaf43b514ddfff4f15",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91f8024d027e729295ca4b9f39ea5f092c8f2c72/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91f8024d027e729295ca4b9f39ea5f092c8f2c72/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=91f8024d027e729295ca4b9f39ea5f092c8f2c72",
        "patch": "@@ -2271,11 +2271,11 @@ bool CConnman::Start(CScheduler& scheduler, const Options& connOptions)\n     Init(connOptions);\n \n     {\n-        LOCK(cs_totalBytesRecv); // writing variable 'nTotalBytesRecv' requires holding mutex 'cs_totalBytesRecv' exclusively\n+        LOCK(cs_totalBytesRecv); // WIP: lock submitted in https://github.com/bitcoin/bitcoin/pull/11744/files\n         nTotalBytesRecv = 0;\n     }\n     {\n-        LOCK(cs_totalBytesSent); // writing variables 'nTotalBytesSent'/'nMaxOutboundTotalBytesSentInCycle'/'nMaxOutboundCycleStartTime' require holding mutex 'cs_totalBytesSent' exclusively\n+        LOCK(cs_totalBytesSent); // WIP: lock submitted in https://github.com/bitcoin/bitcoin/pull/11744/files\n         nTotalBytesSent = 0;\n         nMaxOutboundTotalBytesSentInCycle = 0;\n         nMaxOutboundCycleStartTime = 0;"
      },
      {
        "sha": "97f5c922592f02ba6a8830cdedcb573fe8c144e1",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91f8024d027e729295ca4b9f39ea5f092c8f2c72/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91f8024d027e729295ca4b9f39ea5f092c8f2c72/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=91f8024d027e729295ca4b9f39ea5f092c8f2c72",
        "patch": "@@ -159,13 +159,13 @@ class CConnman\n         nSendBufferMaxSize = connOptions.nSendBufferMaxSize;\n         nReceiveFloodSize = connOptions.nReceiveFloodSize;\n         {\n-            LOCK(cs_totalBytesSent); // writing variable 'nMaxOutboundTimeframe'/'nMaxOutboundLimit' require holding mutex 'cs_totalBytesSent' exclusively\n+            LOCK(cs_totalBytesSent); // WIP: lock submitted in https://github.com/bitcoin/bitcoin/pull/11744/files\n             nMaxOutboundTimeframe = connOptions.nMaxOutboundTimeframe;\n             nMaxOutboundLimit = connOptions.nMaxOutboundLimit;\n         }\n         vWhitelistedRange = connOptions.vWhitelistedRange;\n         {\n-            LOCK(cs_vAddedNodes); // writing variable 'vAddedNodes' requires holding mutex 'cs_vAddedNodes' exclusively\n+            LOCK(cs_vAddedNodes); // WIP: lock submitted in https://github.com/bitcoin/bitcoin/pull/11744/files\n             vAddedNodes = connOptions.m_added_nodes;\n         }\n     }"
      },
      {
        "sha": "007fc0fe32177e59ae03822ebafc60cca4cc381b",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91f8024d027e729295ca4b9f39ea5f092c8f2c72/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91f8024d027e729295ca4b9f39ea5f092c8f2c72/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=91f8024d027e729295ca4b9f39ea5f092c8f2c72",
        "patch": "@@ -1892,7 +1892,7 @@ CAmount CWalletTx::GetAvailableWatchOnlyCredit(const bool& fUseCache) const EXCL\n         return nAvailableWatchCreditCached;\n \n     CAmount nCredit = 0;\n-    LOCK(pwallet->cs_wallet); // calling function 'IsSpent' requires holding mutex 'pwallet->cs_wallet' exclusively\n+    LOCK(pwallet->cs_wallet); // WIP: lock submitted in https://github.com/bitcoin/bitcoin/pull/11634/files\n     for (unsigned int i = 0; i < tx->vout.size(); i++)\n     {\n         if (!pwallet->IsSpent(GetHash(), i))"
      },
      {
        "sha": "d6fbf7d869ca23fefc809ac1cc70a10333753215",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91f8024d027e729295ca4b9f39ea5f092c8f2c72/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91f8024d027e729295ca4b9f39ea5f092c8f2c72/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=91f8024d027e729295ca4b9f39ea5f092c8f2c72",
        "patch": "@@ -792,7 +792,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     void SetNull()\n     {\n         {\n-            LOCK(cs_wallet); // writing variable 'nWalletVersion'/'nWalletMaxVersion'/'nOrderPosNext'/'nTimeFirstKey' requires holding mutex 'cs_wallet' exclusively\n+            LOCK(cs_wallet); // WIP: lock submitted in https://github.com/bitcoin/bitcoin/pull/11634/files\n             nWalletVersion = FEATURE_BASE;\n             nWalletMaxVersion = FEATURE_BASE;\n             nOrderPosNext = 0;"
      }
    ]
  },
  {
    "sha": "358aa923f98f4a9c88fefb93c73cbfa5f54f7286",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNThhYTkyM2Y5OGY0YTljODhmZWZiOTNjNzNjYmZhNWY1NGY3Mjg2",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-11-21T16:51:22Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Remove comment for already merged LOCK(...)",
      "tree": {
        "sha": "3b7ab6810ec1573288ac64f5525c4b2bed0958f8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3b7ab6810ec1573288ac64f5525c4b2bed0958f8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/358aa923f98f4a9c88fefb93c73cbfa5f54f7286",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/358aa923f98f4a9c88fefb93c73cbfa5f54f7286",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/358aa923f98f4a9c88fefb93c73cbfa5f54f7286",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/358aa923f98f4a9c88fefb93c73cbfa5f54f7286/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "91f8024d027e729295ca4b9f39ea5f092c8f2c72",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91f8024d027e729295ca4b9f39ea5f092c8f2c72",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/91f8024d027e729295ca4b9f39ea5f092c8f2c72"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "de5fd8d68b71cefdda93d698c85c0d8fc5e68c6e",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/358aa923f98f4a9c88fefb93c73cbfa5f54f7286/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/358aa923f98f4a9c88fefb93c73cbfa5f54f7286/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=358aa923f98f4a9c88fefb93c73cbfa5f54f7286",
        "patch": "@@ -1674,7 +1674,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n     //// debug print\n     {\n-        LOCK(cs_main); // reading variables 'mapBlockIndex' and 'chainActive' require holding mutex 'cs_main'\n+        LOCK(cs_main);\n         LogPrintf(\"mapBlockIndex.size() = %u\\n\", mapBlockIndex.size());\n         chain_active_height = chainActive.Height();\n     }"
      }
    ]
  },
  {
    "sha": "192a550fc894cfca79d4cbd6e0900e31934df451",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxOTJhNTUwZmM4OTRjZmNhNzlkNGNiZDZlMDkwMGUzMTkzNGRmNDUx",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-11-22T09:33:23Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Set m_last_block_processed to nullptr in SetNull(). Acquire mutex cs_wallet when accessing m_last_block_processed.",
      "tree": {
        "sha": "dc0c1f48fab2f563d4aef2f8fa274497449e649d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dc0c1f48fab2f563d4aef2f8fa274497449e649d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/192a550fc894cfca79d4cbd6e0900e31934df451",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/192a550fc894cfca79d4cbd6e0900e31934df451",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/192a550fc894cfca79d4cbd6e0900e31934df451",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/192a550fc894cfca79d4cbd6e0900e31934df451/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "358aa923f98f4a9c88fefb93c73cbfa5f54f7286",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/358aa923f98f4a9c88fefb93c73cbfa5f54f7286",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/358aa923f98f4a9c88fefb93c73cbfa5f54f7286"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 8,
      "deletions": 7
    },
    "files": [
      {
        "sha": "4e07ca55a548951acc139e07c1584ebec9721f92",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/192a550fc894cfca79d4cbd6e0900e31934df451/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/192a550fc894cfca79d4cbd6e0900e31934df451/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=192a550fc894cfca79d4cbd6e0900e31934df451",
        "patch": "@@ -1272,10 +1272,7 @@ void CWallet::BlockUntilSyncedToCurrentChain() {\n     {\n         // Skip the queue-draining stuff if we know we're caught up with\n         // chainActive.Tip()...\n-        // We could also take cs_wallet here, and call m_last_block_processed\n-        // protected by cs_wallet instead of cs_main, but as long as we need\n-        // cs_main here anyway, its easier to just call it cs_main-protected.\n-        LOCK(cs_main);\n+        LOCK2(cs_main, cs_wallet);\n         const CBlockIndex* initialChainTip = chainActive.Tip();\n \n         if (m_last_block_processed->GetAncestor(initialChainTip->nHeight) == initialChainTip) {\n@@ -3970,7 +3967,10 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile) EXCLUSIVE_L\n             pindexRescan = FindForkInGlobalIndex(chainActive, locator);\n     }\n \n-    walletInstance->m_last_block_processed = chainActive.Tip();\n+    {\n+        LOCK(walletInstance->cs_wallet);\n+        walletInstance->m_last_block_processed = chainActive.Tip();\n+    }\n     RegisterValidationInterface(walletInstance);\n \n     if (chainActive.Tip() && chainActive.Tip() != pindexRescan)"
      },
      {
        "sha": "78371a63126c6339cde1cc7069b21e8b424e9165",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/192a550fc894cfca79d4cbd6e0900e31934df451/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/192a550fc894cfca79d4cbd6e0900e31934df451/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=192a550fc894cfca79d4cbd6e0900e31934df451",
        "patch": "@@ -731,9 +731,9 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n      * to have seen all transactions in the chain, but is only used to track\n      * live BlockConnected callbacks.\n      *\n-     * Protected by cs_main (see BlockUntilSyncedToCurrentChain)\n+     * Protected by cs_wallet\n      */\n-    const CBlockIndex* m_last_block_processed;\n+    const CBlockIndex* m_last_block_processed GUARDED_BY(cs_wallet);\n \n public:\n     /*\n@@ -798,6 +798,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n             nOrderPosNext = 0;\n             nTimeFirstKey = 0;\n             nRelockTime = 0;\n+            m_last_block_processed = nullptr;\n         }\n         nMasterKeyMaxID = 0;\n         pwalletdbEncryption = nullptr;"
      }
    ]
  },
  {
    "sha": "baf7c1ff9e07111661968bb4f9e89aeb4a0bd838",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYWY3YzFmZjllMDcxMTE2NjE5NjhiYjRmOWU4OWFlYjRhMGJkODM4",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-11-24T18:37:42Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-12-04T19:56:04Z"
      },
      "message": "Avoid locking mutexes that are already held by the same thread",
      "tree": {
        "sha": "a6047cf3bc32247c3a3dbd7f97b79b386c25d4eb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a6047cf3bc32247c3a3dbd7f97b79b386c25d4eb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/baf7c1ff9e07111661968bb4f9e89aeb4a0bd838",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/baf7c1ff9e07111661968bb4f9e89aeb4a0bd838",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/baf7c1ff9e07111661968bb4f9e89aeb4a0bd838",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/baf7c1ff9e07111661968bb4f9e89aeb4a0bd838/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "192a550fc894cfca79d4cbd6e0900e31934df451",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/192a550fc894cfca79d4cbd6e0900e31934df451",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/192a550fc894cfca79d4cbd6e0900e31934df451"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 6,
      "deletions": 6
    },
    "files": [
      {
        "sha": "889ea47b34982e1343598eea7c1e6ce61f410376",
        "filename": "src/test/txvalidationcache_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/baf7c1ff9e07111661968bb4f9e89aeb4a0bd838/src/test/txvalidationcache_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/baf7c1ff9e07111661968bb4f9e89aeb4a0bd838/src/test/txvalidationcache_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidationcache_tests.cpp?ref=baf7c1ff9e07111661968bb4f9e89aeb4a0bd838",
        "patch": "@@ -24,9 +24,9 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsVi\n BOOST_AUTO_TEST_SUITE(tx_validationcache_tests)\n \n static bool\n-ToMemPool(CMutableTransaction& tx)\n+ToMemPool(CMutableTransaction& tx) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n-    LOCK(cs_main);\n+    AssertLockHeld(cs_main);\n \n     CValidationState state;\n     return AcceptToMemoryPool(mempool, state, MakeTransactionRef(tx), nullptr /* pfMissingInputs */,"
      },
      {
        "sha": "23bfa879a3382960e58185c210e236b18d8d0f2f",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/baf7c1ff9e07111661968bb4f9e89aeb4a0bd838/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/baf7c1ff9e07111661968bb4f9e89aeb4a0bd838/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=baf7c1ff9e07111661968bb4f9e89aeb4a0bd838",
        "patch": "@@ -539,10 +539,10 @@ void CTxMemPool::removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMem\n     RemoveStaged(setAllRemoves, false, MemPoolRemovalReason::REORG);\n }\n \n-void CTxMemPool::removeConflicts(const CTransaction &tx)\n+void CTxMemPool::removeConflicts(const CTransaction &tx) EXCLUSIVE_LOCKS_REQUIRED(cs_txMemPool)\n {\n     // Remove transactions which depend on inputs of tx, recursively\n-    LOCK(cs_txMemPool);\n+    AssertLockHeld(cs_txMemPool);\n     for (const CTxIn &txin : tx.vin) {\n         auto it = mapNextTx.find(txin.prevout);\n         if (it != mapNextTx.end()) {"
      },
      {
        "sha": "41ff400e16ab67f7d601a918a15cdfc01b94d711",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/baf7c1ff9e07111661968bb4f9e89aeb4a0bd838/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/baf7c1ff9e07111661968bb4f9e89aeb4a0bd838/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=baf7c1ff9e07111661968bb4f9e89aeb4a0bd838",
        "patch": "@@ -522,13 +522,13 @@ bool CWalletDB::IsKeyType(const std::string& strType)\n             strType == \"mkey\" || strType == \"ckey\");\n }\n \n-DBErrors CWalletDB::LoadWallet(CWallet* pwallet)\n+DBErrors CWalletDB::LoadWallet(CWallet* pwallet) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n {\n     CWalletScanState wss;\n     bool fNoncriticalErrors = false;\n     DBErrors result = DB_LOAD_OK;\n \n-    LOCK(pwallet->cs_wallet);\n+    AssertLockHeld(pwallet->cs_wallet);\n     try {\n         int nMinVersion = 0;\n         if (batch.Read((std::string)\"minversion\", nMinVersion))"
      }
    ]
  }
]