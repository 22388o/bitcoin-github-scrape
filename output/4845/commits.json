[
  {
    "sha": "357c35cb47a2aa6ceae6c87a8386bb1ea186f6d5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNTdjMzVjYjQ3YTJhYTZjZWFlNmM4N2E4Mzg2YmIxZWExODZmNmQ1",
    "commit": {
      "author": {
        "name": "SergioDemianLerner",
        "email": "Sergio.d.Lerner@gmail.com",
        "date": "2014-09-04T19:23:42Z"
      },
      "committer": {
        "name": "SergioDemianLerner",
        "email": "Sergio.d.Lerner@gmail.com",
        "date": "2014-09-04T19:23:42Z"
      },
      "message": "Switch testing framework from MAIN to new UNITTEST network\n\nUNITTEST inherites from MAIN but allows synamically changing its parameters using the ModifiableParams() interface",
      "tree": {
        "sha": "34b0b63b9f1ba41f255e28ca0ca8eda8d0be2c44",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/34b0b63b9f1ba41f255e28ca0ca8eda8d0be2c44"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/357c35cb47a2aa6ceae6c87a8386bb1ea186f6d5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/357c35cb47a2aa6ceae6c87a8386bb1ea186f6d5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/357c35cb47a2aa6ceae6c87a8386bb1ea186f6d5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/357c35cb47a2aa6ceae6c87a8386bb1ea186f6d5/comments",
    "author": {
      "login": "SergioDemianLerner",
      "id": 1752347,
      "node_id": "MDQ6VXNlcjE3NTIzNDc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1752347?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SergioDemianLerner",
      "html_url": "https://github.com/SergioDemianLerner",
      "followers_url": "https://api.github.com/users/SergioDemianLerner/followers",
      "following_url": "https://api.github.com/users/SergioDemianLerner/following{/other_user}",
      "gists_url": "https://api.github.com/users/SergioDemianLerner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SergioDemianLerner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SergioDemianLerner/subscriptions",
      "organizations_url": "https://api.github.com/users/SergioDemianLerner/orgs",
      "repos_url": "https://api.github.com/users/SergioDemianLerner/repos",
      "events_url": "https://api.github.com/users/SergioDemianLerner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SergioDemianLerner/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "SergioDemianLerner",
      "id": 1752347,
      "node_id": "MDQ6VXNlcjE3NTIzNDc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1752347?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SergioDemianLerner",
      "html_url": "https://github.com/SergioDemianLerner",
      "followers_url": "https://api.github.com/users/SergioDemianLerner/followers",
      "following_url": "https://api.github.com/users/SergioDemianLerner/following{/other_user}",
      "gists_url": "https://api.github.com/users/SergioDemianLerner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SergioDemianLerner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SergioDemianLerner/subscriptions",
      "organizations_url": "https://api.github.com/users/SergioDemianLerner/orgs",
      "repos_url": "https://api.github.com/users/SergioDemianLerner/repos",
      "events_url": "https://api.github.com/users/SergioDemianLerner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SergioDemianLerner/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2e731f24b5a5c894e013a6d752f1cd409303e916",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2e731f24b5a5c894e013a6d752f1cd409303e916",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2e731f24b5a5c894e013a6d752f1cd409303e916"
      }
    ],
    "stats": {
      "total": 330,
      "additions": 327,
      "deletions": 3
    },
    "files": [
      {
        "sha": "5b44b86869c6e78b86a43554337565018443ae98",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/357c35cb47a2aa6ceae6c87a8386bb1ea186f6d5/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/357c35cb47a2aa6ceae6c87a8386bb1ea186f6d5/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=357c35cb47a2aa6ceae6c87a8386bb1ea186f6d5",
        "patch": "@@ -50,6 +50,7 @@ BITCOIN_TESTS =\\\n   test/key_tests.cpp \\\n   test/main_tests.cpp \\\n   test/miner_tests.cpp \\\n+  test/blockv2_tests.cpp \\\n   test/mruset_tests.cpp \\\n   test/multisig_tests.cpp \\\n   test/netbase_tests.cpp \\"
      },
      {
        "sha": "b4954281e3164066c5ad78f2ebc813081ed939ea",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 45,
        "deletions": 0,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/357c35cb47a2aa6ceae6c87a8386bb1ea186f6d5/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/357c35cb47a2aa6ceae6c87a8386bb1ea186f6d5/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=357c35cb47a2aa6ceae6c87a8386bb1ea186f6d5",
        "patch": "@@ -214,8 +214,50 @@ class CRegTestParams : public CTestNetParams {\n };\n static CRegTestParams regTestParams;\n \n+//\n+// Regression test\n+//\n+class CUnitTestParams : public CMainParams, public CModifiableParams {\n+public:\n+    CUnitTestParams() {\n+        networkID = CBaseChainParams::UNITTEST;\n+        strNetworkID = \"unittest\";\n+        nDefaultPort = 18445;\n+        vFixedSeeds.clear();\n+        vSeeds.clear();  // Regtest mode doesn't have any DNS seeds.\n+\n+        fRequireRPCPassword = false;\n+        fMiningRequiresPeers = false;\n+        fDefaultCheckMemPool = true;\n+        fAllowMinDifficultyBlocks = false;\n+        fMineBlocksOnDemand = true;\n+        fSkipProofOfWorkCheck = false;\n+    }\n+    virtual bool SkipProofOfWorkCheck() const { return fSkipProofOfWorkCheck; }    \n+protected:\n+    bool fSkipProofOfWorkCheck;\n+public:    \n+    // Published setters to allow changing values in unit test cases\n+    virtual void setSubsidyHalvingInterval(int anSubsidyHalvingInterval)  { nSubsidyHalvingInterval=anSubsidyHalvingInterval; }\n+    virtual void setEnforceBlockUpgradeMajority(int anEnforceBlockUpgradeMajority)  { nEnforceBlockUpgradeMajority=anEnforceBlockUpgradeMajority; }\n+    virtual void setRejectBlockOutdatedMajority(int anRejectBlockOutdatedMajority)  { nRejectBlockOutdatedMajority=anRejectBlockOutdatedMajority; }\n+    virtual void setToCheckBlockUpgradeMajority(int anToCheckBlockUpgradeMajority)  { nToCheckBlockUpgradeMajority=anToCheckBlockUpgradeMajority; }\n+    virtual void setDefaultCheckMemPool(bool aDefaultCheckMemPool)  { fDefaultCheckMemPool=aDefaultCheckMemPool; }\n+    virtual void setAllowMinDifficultyBlocks(bool aAllowMinDifficultyBlocks) {  fAllowMinDifficultyBlocks=aAllowMinDifficultyBlocks; }\n+    virtual void setSkipProofOfWorkCheck(bool aSkipProofOfWorkCheck) { fSkipProofOfWorkCheck = aSkipProofOfWorkCheck; }    \n+};\n+static CUnitTestParams unitTestParams;\n+\n+\n static CChainParams *pCurrentParams = 0;\n \n+CModifiableParams *ModifiableParams()\n+{\n+   assert(pCurrentParams);\n+   assert(pCurrentParams==&unitTestParams);\n+   return (CModifiableParams*)&unitTestParams;\n+}\n+\n const CChainParams &Params() {\n     assert(pCurrentParams);\n     return *pCurrentParams;\n@@ -233,6 +275,9 @@ void SelectParams(CBaseChainParams::Network network) {\n         case CBaseChainParams::REGTEST:\n             pCurrentParams = &regTestParams;\n             break;\n+        case CBaseChainParams::UNITTEST:\n+            pCurrentParams = &unitTestParams;\n+            break;            \n         default:\n             assert(false && \"Unimplemented network\");\n             return;"
      },
      {
        "sha": "c324954fa30fc7587d11ff7d02da4d99aac4e325",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/357c35cb47a2aa6ceae6c87a8386bb1ea186f6d5/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/357c35cb47a2aa6ceae6c87a8386bb1ea186f6d5/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=357c35cb47a2aa6ceae6c87a8386bb1ea186f6d5",
        "patch": "@@ -61,6 +61,8 @@ class CChainParams\n     bool DefaultCheckMemPool() const { return fDefaultCheckMemPool; }\n     /* Allow mining of a min-difficulty block */\n     bool AllowMinDifficultyBlocks() const { return fAllowMinDifficultyBlocks; }\n+    /* Skip proof-of-work check: allow mining of any difficulty block */\n+    virtual bool SkipProofOfWorkCheck() const { return false; }    \n     /* Make standard checks */\n     bool RequireStandard() const { return fRequireStandard; }\n     int64_t TargetTimespan() const { return nTargetTimespan; }\n@@ -105,12 +107,32 @@ class CChainParams\n     bool fMineBlocksOnDemand;\n };\n \n+/** Modifiable parameters interface is used by test cases to adapt the parameters in order\n+*** to test specific features more easily. Test cases should always restore the previous\n+*** values after finalization.\n+**/\n+\n+class CModifiableParams {\n+public:    \n+    // Published setters to allow changing values in unit test cases\n+    virtual void setSubsidyHalvingInterval(int anSubsidyHalvingInterval) =0;\n+    virtual void setEnforceBlockUpgradeMajority(int anEnforceBlockUpgradeMajority)=0;\n+    virtual void setRejectBlockOutdatedMajority(int anRejectBlockOutdatedMajority)=0;\n+    virtual void setToCheckBlockUpgradeMajority(int anToCheckBlockUpgradeMajority)=0;\n+    virtual void setDefaultCheckMemPool(bool aDefaultCheckMemPool)=0;\n+    virtual void setAllowMinDifficultyBlocks(bool aAllowMinDifficultyBlocks)=0;\n+    virtual void setSkipProofOfWorkCheck(bool aSkipProofOfWorkCheck)=0;\n+};\n+\n+\n /**\n  * Return the currently selected parameters. This won't change after app startup\n  * outside of the unit tests.\n  */\n const CChainParams &Params();\n \n+CModifiableParams *ModifiableParams();\n+\n /** Sets the params returned by Params() to those for the given network. */\n void SelectParams(CBaseChainParams::Network network);\n "
      },
      {
        "sha": "d73ce58badcc48c9859665f68521ee6dd6d43c8f",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/357c35cb47a2aa6ceae6c87a8386bb1ea186f6d5/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/357c35cb47a2aa6ceae6c87a8386bb1ea186f6d5/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=357c35cb47a2aa6ceae6c87a8386bb1ea186f6d5",
        "patch": "@@ -51,6 +51,18 @@ class CBaseRegTestParams : public CBaseTestNetParams {\n };\n static CBaseRegTestParams regTestParams;\n \n+//\n+// Unit test\n+//\n+class CBaseUnitTestParams : public CBaseMainParams {\n+public:\n+    CBaseUnitTestParams() {\n+        networkID = CBaseChainParams::UNITTEST;\n+        strDataDir = \"unittest\";\n+    }\n+};\n+static CBaseUnitTestParams unitTestParams;\n+\n static CBaseChainParams *pCurrentBaseParams = 0;\n \n const CBaseChainParams &BaseParams() {\n@@ -69,6 +81,9 @@ void SelectBaseParams(CBaseChainParams::Network network) {\n         case CBaseChainParams::REGTEST:\n             pCurrentBaseParams = &regTestParams;\n             break;\n+        case CBaseChainParams::UNITTEST:\n+            pCurrentBaseParams = &unitTestParams;\n+            break;            \n         default:\n             assert(false && \"Unimplemented network\");\n             return;"
      },
      {
        "sha": "a19b7973b463f32f13f526b75ad36c7beb7d5e56",
        "filename": "src/chainparamsbase.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/357c35cb47a2aa6ceae6c87a8386bb1ea186f6d5/src/chainparamsbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/357c35cb47a2aa6ceae6c87a8386bb1ea186f6d5/src/chainparamsbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.h?ref=357c35cb47a2aa6ceae6c87a8386bb1ea186f6d5",
        "patch": "@@ -19,6 +19,7 @@ class CBaseChainParams\n         MAIN,\n         TESTNET,\n         REGTEST,\n+        UNITTEST,\n \n         MAX_NETWORK_TYPES\n     };"
      },
      {
        "sha": "6b71a7fe748c5cd0cc22d726444693cb8f1d872f",
        "filename": "src/checkpoints.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/357c35cb47a2aa6ceae6c87a8386bb1ea186f6d5/src/checkpoints.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/357c35cb47a2aa6ceae6c87a8386bb1ea186f6d5/src/checkpoints.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.cpp?ref=357c35cb47a2aa6ceae6c87a8386bb1ea186f6d5",
        "patch": "@@ -88,6 +88,8 @@ namespace Checkpoints {\n             return dataTestnet;\n         else if (Params().NetworkID() == CBaseChainParams::MAIN)\n             return data;\n+        else if (Params().NetworkID() == CBaseChainParams::UNITTEST) // UnitTest share the same checkpoints as MAIN\n+            return data;            \n         else\n             return dataRegtest;\n     }"
      },
      {
        "sha": "71532cb35dc01f91df5f45968a0b6562d37ff873",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/357c35cb47a2aa6ceae6c87a8386bb1ea186f6d5/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/357c35cb47a2aa6ceae6c87a8386bb1ea186f6d5/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=357c35cb47a2aa6ceae6c87a8386bb1ea186f6d5",
        "patch": "@@ -2330,6 +2330,7 @@ bool AcceptBlockHeader(CBlockHeader& block, CValidationState& state, CBlockIndex\n         nHeight = pindexPrev->nHeight+1;\n \n         // Check proof of work\n+        if (!Params().SkipProofOfWorkCheck())\n         if (block.nBits != GetNextWorkRequired(pindexPrev, &block))\n             return state.DoS(100, error(\"AcceptBlock() : incorrect proof of work\"),\n                              REJECT_INVALID, \"bad-diffbits\");"
      },
      {
        "sha": "280a0107dc6045fab108639aa9fd02c31956d017",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/357c35cb47a2aa6ceae6c87a8386bb1ea186f6d5/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/357c35cb47a2aa6ceae6c87a8386bb1ea186f6d5/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=357c35cb47a2aa6ceae6c87a8386bb1ea186f6d5",
        "patch": "@@ -81,6 +81,10 @@ bool CheckProofOfWork(uint256 hash, unsigned int nBits)\n     bool fNegative;\n     bool fOverflow;\n     uint256 bnTarget;\n+    \n+    if (Params().SkipProofOfWorkCheck())\n+       return true;\n+\n     bnTarget.SetCompact(nBits, &fNegative, &fOverflow);\n \n     // Check range"
      },
      {
        "sha": "726c547a6b19def5efb8d83b3be5db8b5e8f58be",
        "filename": "src/test/base58_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/357c35cb47a2aa6ceae6c87a8386bb1ea186f6d5/src/test/base58_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/357c35cb47a2aa6ceae6c87a8386bb1ea186f6d5/src/test/base58_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base58_tests.cpp?ref=357c35cb47a2aa6ceae6c87a8386bb1ea186f6d5",
        "patch": "@@ -175,7 +175,7 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_parse)\n             BOOST_CHECK_MESSAGE(!secret.IsValid(), \"IsValid pubkey as privkey:\" + strTest);\n         }\n     }\n-    SelectParams(CBaseChainParams::MAIN);\n+    SelectParams(CBaseChainParams::UNITTEST);\n }\n \n // Goal: check that generated keys match test vectors\n@@ -243,7 +243,7 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_gen)\n     CTxDestination nodest = CNoDestination();\n     BOOST_CHECK(!dummyAddr.Set(nodest));\n \n-    SelectParams(CBaseChainParams::MAIN);\n+    SelectParams(CBaseChainParams::UNITTEST);\n }\n \n // Goal: check that base58 parsing code is robust against a variety of corrupted data"
      },
      {
        "sha": "c9959e4c3d446f8323a6ae60186ccf30cd05bfe8",
        "filename": "src/test/blockv2_tests.cpp",
        "status": "added",
        "additions": 232,
        "deletions": 0,
        "changes": 232,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/357c35cb47a2aa6ceae6c87a8386bb1ea186f6d5/src/test/blockv2_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/357c35cb47a2aa6ceae6c87a8386bb1ea186f6d5/src/test/blockv2_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/blockv2_tests.cpp?ref=357c35cb47a2aa6ceae6c87a8386bb1ea186f6d5",
        "patch": "@@ -0,0 +1,232 @@\n+// Copyright (c) 2011-2014 The Bitcoin Core developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"main.h\"\n+#include \"miner.h\"\n+#include \"uint256.h\"\n+#include \"util.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+\n+// Tests the majority rule which states that after 1000 v2 blocks no v1 block can go\n+BOOST_AUTO_TEST_SUITE(blockv2_tests)\n+\n+static CScript scriptPubKey = CScript() << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\") << OP_CHECKSIG;\n+\n+static void SetEmptyBlock(CBlock * pblock)\n+{\n+        pblock->nVersion = 2;\n+        pblock->nTime = chainActive.Tip()->GetMedianTimePast()+1;\n+        pblock->nNonce = 0;\n+}\n+        \n+static void SetBlockDefaultAttributesAndHeight(CBlock * pblock,bool addHeight,int difValue)\n+{\n+        SetEmptyBlock(pblock);\n+\n+        // Add the coinbase\n+        CMutableTransaction txCoinbase(pblock->vtx[0]);\n+        \n+        if (addHeight) \n+            txCoinbase.vin[0].scriptSig = (CScript() << (chainActive.Height()+1+difValue) << 0);\n+            else\n+            txCoinbase.vin[0].scriptSig = (CScript() << difValue << 0); // At least size 2, this is a protocol spec\n+            \n+        txCoinbase.vout[0].scriptPubKey = CScript();\n+        pblock->vtx[0] = CTransaction(txCoinbase);\n+        pblock->hashMerkleRoot = pblock->BuildMerkleTree();\n+}\n+\n+void CheckSubsidyHalving(CBlockTemplate * &pblocktemplate, CBlock * &pblock)\n+{\n+    if ((chainActive.Height()+1) % Params().SubsidyHalvingInterval() == 0)\n+        {\n+            // The RegTest network has a low subsidy halving interval (150) so \n+            // we must recompute the coinbase subsidy if we reach the boundary.\n+\n+            // preserve parent hash\n+            uint256 prevParent = pblock->hashPrevBlock;\n+            delete pblocktemplate;\n+            pblocktemplate = CreateNewBlock(scriptPubKey);   \n+            pblock = &pblocktemplate->block; // pointer for convenience\n+            pblock->hashPrevBlock = prevParent;\n+        }\n+}\n+\n+void Blockv2test()\n+{\n+    assert(Params().NetworkID() == CBaseChainParams::UNITTEST); \n+    ModifiableParams()->setSkipProofOfWorkCheck(true);\n+    \n+    // We don't know the state of the block-chain here: it depends on which other tests are run before this test.\n+    // See https://github.com/bitcoin/bitcoin/pull/4688 for a patch that allows the re-creation of the block-chain\n+    // for each testcase that requires it.\n+\n+    // If miner_tests.cpp is run before, the chain will be 100 blocks long, and all of them will be v1\n+\n+    \n+    LogPrintf(\"Blockv2test testcase starts\\n\"); \n+        \n+    CBlockTemplate *pblocktemplate;\n+    CScript script;\n+    uint256 hash;\n+    int PreviousHeight;\n+\n+    \n+    LOCK(cs_main);\n+        \n+    \n+    // Simple block creation, nothing special yet.\n+    pblocktemplate = CreateNewBlock(scriptPubKey);   \n+    CBlock *pblock = &pblocktemplate->block; // pointer for convenience\n+   \n+    LogPrintf(\"Blockv2test block v1 add begin\\n\");  \n+    // First create a block v1, check that it is accepted. The block has an invalid height\n+    SetBlockDefaultAttributesAndHeight(pblock,false,5000);\n+    pblock->nVersion = 1;\n+    CValidationState state1;\n+    PreviousHeight = chainActive.Height();\n+    BOOST_CHECK(ProcessBlock(state1, NULL, pblock));\n+    BOOST_CHECK(state1.IsValid());\n+    BOOST_CHECK((PreviousHeight+1) == chainActive.Height()); // to differentiate from orphan blocks, which also get accepted in ProcessBlock()\t\n+    pblock->hashPrevBlock = pblock->GetHash(); // update parent\n+    \n+    \n+    // Now create exactly 1000 blocks v2\n+    \n+    // First check that the supermajority threshold is exactly 1000 blocks\n+    BOOST_CHECK(Params().ToCheckBlockUpgradeMajority()==1000);  // \n+    BOOST_CHECK(Params().EnforceBlockUpgradeMajority()==750);\n+    BOOST_CHECK(Params().RejectBlockOutdatedMajority()==950);\n+    \n+    // Over the last 1000 blocks, 750 blocks must be v2 to switch to v2-only mode.\n+    // Here we're testing only the last 750, not any subset.\n+    \n+    LogPrintf(\"Blockv2test BIP30 repetition begin\\n\");  \n+\n+    // First, if we try to add a block v2 with the same coinbase tx, we should get\n+    // \"bad-txns-BIP30\" because the coinbase tx has the same hash as the previous.\n+    // Unluckily, even if ConnectBlock returns a \"bad-txns-BIP30\", ActivateBestChainStep clears\n+    // the state, so we get true here and the \"bad-txns-BIP30\" reason is lost.\n+    // We verify instead that the chain height has not been incremented.\n+    \n+    CValidationState state7;\n+    PreviousHeight = chainActive.Height();\n+    CheckSubsidyHalving(pblocktemplate,pblock);\t\n+    SetBlockDefaultAttributesAndHeight(pblock,false,5000); //\n+    pblock->nVersion = 2;\n+    BOOST_CHECK(ProcessBlock(state7, NULL, pblock)); // should we care about the return value?\n+    BOOST_CHECK(state7.IsValid());\n+    BOOST_CHECK(PreviousHeight == chainActive.Height()); // we check the block has not been added.\n+    \n+    LogPrintf(\"Blockv2test 750 v2 blocks  begin\\n\");    \n+    for (int i=0;i<750;i++) \n+    {\n+        \n+        LogPrintf(\"Blockv2test block %d begin\\n\",i);    \n+\n+        CheckSubsidyHalving(pblocktemplate,pblock);\t\n+       \n+        // We add a value to the height to make is NOT equal to the actual height.\n+        SetBlockDefaultAttributesAndHeight(pblock,true,1000); // blocks version 2 without height are allowed! for only 750 blocks\n+        pblock->nVersion = 2;\n+        CValidationState state;\n+                    \n+        PreviousHeight = chainActive.Height();\n+        BOOST_CHECK(ProcessBlock(state, NULL, pblock));\n+        BOOST_CHECK(state.IsValid());\n+        BOOST_CHECK((PreviousHeight+1) == chainActive.Height()); // to differentiate from orphan blocks, which also get accepted in ProcessBlock()\n+        pblock->hashPrevBlock = pblock->GetHash(); // update parent\n+    }\n+\n+    LogPrintf(\"Blockv2test v2 without height rejected begin\\n\"); \n+    \n+    // Now we try to add a block v2, with an invalid height and it should be rejected. We use 2000 because is not in the range [1000..1750].\n+    CheckSubsidyHalving(pblocktemplate,pblock);\t\n+    SetBlockDefaultAttributesAndHeight(pblock,true,2000); // \n+    pblock->nVersion = 2;\n+    CValidationState state0;\n+    BOOST_CHECK(ProcessBlock(state0, NULL, pblock)==false);\n+    BOOST_CHECK(!state0.IsValid());\n+    BOOST_CHECK(state0.GetRejectReason()==\"bad-cb-height\"); \n+    // Do not update parent since block has failed\n+    \n+    LogPrintf(\"Blockv2test v2 with height accepted begin\\n\");    \n+    \n+    \n+    // Now we add a block with height, must be ok.\n+    for (int i=0;i<200;i++) \n+    {\n+        \n+        LogPrintf(\"Blockv2test v2block %d begin\\n\",i);      \n+        CheckSubsidyHalving(pblocktemplate,pblock);\n+        SetBlockDefaultAttributesAndHeight(pblock,true,0);\n+        pblock->nVersion = 2;\n+        CValidationState state;\n+        PreviousHeight = chainActive.Height();\n+        BOOST_CHECK(ProcessBlock(state, NULL, pblock));\n+        BOOST_CHECK(state.IsValid());\n+        BOOST_CHECK((PreviousHeight+1) == chainActive.Height()); // to differentiate from orphan blocks, which also get accepted in ProcessBlock()\n+\n+        pblock->hashPrevBlock = pblock->GetHash(); // update parent\n+    }\n+\n+    \n+    LogPrintf(\"Blockv2test block v1 rejected\\n\");   \n+    // Now we add 200 additional blocks, until we get 950 (the threshold were v1 blocks are not accepted anymore)\n+    // Now we try to add a block v1, it should be rejected, even if it hash the height field\n+    CheckSubsidyHalving(pblocktemplate,pblock);\t\n+    SetBlockDefaultAttributesAndHeight(pblock,true,0);\n+    pblock->nVersion = 1;\n+    CValidationState state2;\n+    BOOST_CHECK(ProcessBlock(state2, NULL, pblock)==false);\n+    BOOST_CHECK(!state2.IsValid());\n+    BOOST_CHECK(state2.GetRejectReason()==\"bad-version\");\n+    // Do not update parent since block has failed\n+    \n+    \n+    \n+    // Some other missing tests, added here as bonus...\n+    \n+    // Block time too old check\n+    CheckSubsidyHalving(pblocktemplate,pblock);\t\n+    SetBlockDefaultAttributesAndHeight(pblock,true,0);\n+    pblock->nVersion = 2;\n+    pblock->nTime = chainActive.Tip()->GetMedianTimePast()-1;\n+    CValidationState state4;\n+    BOOST_CHECK(ProcessBlock(state4, NULL, pblock)==false);\n+    BOOST_CHECK(!state4.IsValid());\n+    BOOST_CHECK(state4.GetRejectReason()==\"time-too-old\");\n+    // Do not update parent since block has failed\n+    \n+    // Adding a non-final coinbase, must modify coinbase\n+    CheckSubsidyHalving(pblocktemplate,pblock);\t\n+    SetEmptyBlock(pblock);\n+    // Use a mutable coinbase to change nLockTime and  nSequence\n+    CMutableTransaction txCoinbase(pblock->vtx[0]);\n+    txCoinbase.vin[0].scriptSig = (CScript() << chainActive.Height() << 0); \n+    txCoinbase.nLockTime = LOCKTIME_THRESHOLD-1; // refers to height\n+    txCoinbase.vin[0].nSequence = 1; // non-zero sequence\n+    pblock->vtx[0] = CTransaction(txCoinbase);\n+    pblock->nVersion = 2;\n+    pblock->hashMerkleRoot = pblock->BuildMerkleTree();\n+    CValidationState state5;\n+    BOOST_CHECK(ProcessBlock(state5, NULL, pblock)==false);\n+    BOOST_CHECK(!state5.IsValid());\n+    BOOST_CHECK(state5.GetRejectReason()==\"bad-txns-nonfinal\");\n+    // Do not update parent since block has failed\n+    \n+    \n+    delete pblocktemplate;\n+    \n+    ModifiableParams()->setSkipProofOfWorkCheck(false);\n+    LogPrintf(\"Blockv2test testcase ends\\n\");   \n+}\n+\n+BOOST_AUTO_TEST_CASE(Blockv2testcase)\n+{\n+    Blockv2test();\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "10c1bfe876f02ceba97242b7ccd4181efbad572e",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/357c35cb47a2aa6ceae6c87a8386bb1ea186f6d5/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/357c35cb47a2aa6ceae6c87a8386bb1ea186f6d5/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=357c35cb47a2aa6ceae6c87a8386bb1ea186f6d5",
        "patch": "@@ -253,6 +253,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n \n     chainActive.Tip()->nHeight--;\n     SetMockTime(0);\n+    mempool.clear();\n \n     BOOST_FOREACH(CTransaction *tx, txFirst)\n         delete tx;"
      },
      {
        "sha": "6e5f0e3facc90bbfbfd8eb76cbbaf6db3dc807a1",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/357c35cb47a2aa6ceae6c87a8386bb1ea186f6d5/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/357c35cb47a2aa6ceae6c87a8386bb1ea186f6d5/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=357c35cb47a2aa6ceae6c87a8386bb1ea186f6d5",
        "patch": "@@ -31,7 +31,7 @@ struct TestingSetup {\n \n     TestingSetup() {\n         fPrintToDebugLog = false; // don't want to write to debug.log file\n-        SelectParams(CBaseChainParams::MAIN);\n+        SelectParams(CBaseChainParams::UNITTEST);\n         noui_connect();\n #ifdef ENABLE_WALLET\n         bitdb.MakeMock();"
      }
    ]
  },
  {
    "sha": "eda4aa19d3cafc1644f5c28c687741a6c255b9a6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZGE0YWExOWQzY2FmYzE2NDRmNWMyOGM2ODc3NDFhNmMyNTViOWE2",
    "commit": {
      "author": {
        "name": "SergioDemianLerner",
        "email": "Sergio.d.Lerner@gmail.com",
        "date": "2014-09-09T16:29:24Z"
      },
      "committer": {
        "name": "SergioDemianLerner",
        "email": "Sergio.d.Lerner@gmail.com",
        "date": "2014-09-09T16:29:24Z"
      },
      "message": "Suggested corrections on comments, variable names.\nAlso new test case testing the PoW skip in UNITTEST.",
      "tree": {
        "sha": "06da96093a4c7d6179791ea2e0a087fb3c23795f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/06da96093a4c7d6179791ea2e0a087fb3c23795f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eda4aa19d3cafc1644f5c28c687741a6c255b9a6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eda4aa19d3cafc1644f5c28c687741a6c255b9a6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eda4aa19d3cafc1644f5c28c687741a6c255b9a6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eda4aa19d3cafc1644f5c28c687741a6c255b9a6/comments",
    "author": {
      "login": "SergioDemianLerner",
      "id": 1752347,
      "node_id": "MDQ6VXNlcjE3NTIzNDc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1752347?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SergioDemianLerner",
      "html_url": "https://github.com/SergioDemianLerner",
      "followers_url": "https://api.github.com/users/SergioDemianLerner/followers",
      "following_url": "https://api.github.com/users/SergioDemianLerner/following{/other_user}",
      "gists_url": "https://api.github.com/users/SergioDemianLerner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SergioDemianLerner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SergioDemianLerner/subscriptions",
      "organizations_url": "https://api.github.com/users/SergioDemianLerner/orgs",
      "repos_url": "https://api.github.com/users/SergioDemianLerner/repos",
      "events_url": "https://api.github.com/users/SergioDemianLerner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SergioDemianLerner/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "SergioDemianLerner",
      "id": 1752347,
      "node_id": "MDQ6VXNlcjE3NTIzNDc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1752347?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SergioDemianLerner",
      "html_url": "https://github.com/SergioDemianLerner",
      "followers_url": "https://api.github.com/users/SergioDemianLerner/followers",
      "following_url": "https://api.github.com/users/SergioDemianLerner/following{/other_user}",
      "gists_url": "https://api.github.com/users/SergioDemianLerner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SergioDemianLerner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SergioDemianLerner/subscriptions",
      "organizations_url": "https://api.github.com/users/SergioDemianLerner/orgs",
      "repos_url": "https://api.github.com/users/SergioDemianLerner/repos",
      "events_url": "https://api.github.com/users/SergioDemianLerner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SergioDemianLerner/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "357c35cb47a2aa6ceae6c87a8386bb1ea186f6d5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/357c35cb47a2aa6ceae6c87a8386bb1ea186f6d5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/357c35cb47a2aa6ceae6c87a8386bb1ea186f6d5"
      }
    ],
    "stats": {
      "total": 151,
      "additions": 97,
      "deletions": 54
    },
    "files": [
      {
        "sha": "3a379c17f5178c770ac09efdd74b2722de1200f2",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eda4aa19d3cafc1644f5c28c687741a6c255b9a6/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eda4aa19d3cafc1644f5c28c687741a6c255b9a6/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=eda4aa19d3cafc1644f5c28c687741a6c255b9a6",
        "patch": "@@ -215,7 +215,7 @@ class CRegTestParams : public CTestNetParams {\n static CRegTestParams regTestParams;\n \n //\n-// Regression test\n+// Unit test\n //\n class CUnitTestParams : public CMainParams, public CModifiableParams {\n public:\n@@ -242,9 +242,9 @@ class CUnitTestParams : public CMainParams, public CModifiableParams {\n     virtual void setEnforceBlockUpgradeMajority(int anEnforceBlockUpgradeMajority)  { nEnforceBlockUpgradeMajority=anEnforceBlockUpgradeMajority; }\n     virtual void setRejectBlockOutdatedMajority(int anRejectBlockOutdatedMajority)  { nRejectBlockOutdatedMajority=anRejectBlockOutdatedMajority; }\n     virtual void setToCheckBlockUpgradeMajority(int anToCheckBlockUpgradeMajority)  { nToCheckBlockUpgradeMajority=anToCheckBlockUpgradeMajority; }\n-    virtual void setDefaultCheckMemPool(bool aDefaultCheckMemPool)  { fDefaultCheckMemPool=aDefaultCheckMemPool; }\n-    virtual void setAllowMinDifficultyBlocks(bool aAllowMinDifficultyBlocks) {  fAllowMinDifficultyBlocks=aAllowMinDifficultyBlocks; }\n-    virtual void setSkipProofOfWorkCheck(bool aSkipProofOfWorkCheck) { fSkipProofOfWorkCheck = aSkipProofOfWorkCheck; }    \n+    virtual void setDefaultCheckMemPool(bool afDefaultCheckMemPool)  { fDefaultCheckMemPool=afDefaultCheckMemPool; }\n+    virtual void setAllowMinDifficultyBlocks(bool afAllowMinDifficultyBlocks) {  fAllowMinDifficultyBlocks=afAllowMinDifficultyBlocks; }\n+    virtual void setSkipProofOfWorkCheck(bool afSkipProofOfWorkCheck) { fSkipProofOfWorkCheck = afSkipProofOfWorkCheck; }    \n };\n static CUnitTestParams unitTestParams;\n "
      },
      {
        "sha": "a4d9630454694393e4eff09dd82ace5d35955bc9",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eda4aa19d3cafc1644f5c28c687741a6c255b9a6/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eda4aa19d3cafc1644f5c28c687741a6c255b9a6/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=eda4aa19d3cafc1644f5c28c687741a6c255b9a6",
        "patch": "@@ -2330,8 +2330,8 @@ bool AcceptBlockHeader(CBlockHeader& block, CValidationState& state, CBlockIndex\n         nHeight = pindexPrev->nHeight+1;\n \n         // Check proof of work\n-        if (!Params().SkipProofOfWorkCheck())\n-        if (block.nBits != GetNextWorkRequired(pindexPrev, &block))\n+        if ((!Params().SkipProofOfWorkCheck()) &&\n+           (block.nBits != GetNextWorkRequired(pindexPrev, &block)))\n             return state.DoS(100, error(\"AcceptBlock() : incorrect proof of work\"),\n                              REJECT_INVALID, \"bad-diffbits\");\n "
      },
      {
        "sha": "26818d1f924fd0b54ddff1c6649af443b09a23b6",
        "filename": "src/test/blockv2_tests.cpp",
        "status": "modified",
        "additions": 91,
        "deletions": 48,
        "changes": 139,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eda4aa19d3cafc1644f5c28c687741a6c255b9a6/src/test/blockv2_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eda4aa19d3cafc1644f5c28c687741a6c255b9a6/src/test/blockv2_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/blockv2_tests.cpp?ref=eda4aa19d3cafc1644f5c28c687741a6c255b9a6",
        "patch": "@@ -9,33 +9,34 @@\n \n #include <boost/test/unit_test.hpp>\n \n-// Tests the majority rule which states that after 1000 v2 blocks no v1 block can go\n+// This test cheecks the majority rule which states that after 1000 v2 blocks no new v1 block can be part of that branch.\n+\n BOOST_AUTO_TEST_SUITE(blockv2_tests)\n \n static CScript scriptPubKey = CScript() << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\") << OP_CHECKSIG;\n \n static void SetEmptyBlock(CBlock * pblock)\n {\n-        pblock->nVersion = 2;\n-        pblock->nTime = chainActive.Tip()->GetMedianTimePast()+1;\n-        pblock->nNonce = 0;\n+    pblock->nVersion = 2;\n+    pblock->nTime = chainActive.Tip()->GetMedianTimePast()+1;\n+    pblock->nNonce = 0;\n }\n         \n-static void SetBlockDefaultAttributesAndHeight(CBlock * pblock,bool addHeight,int difValue)\n+static void SetBlockDefaultAttributesAndHeight(CBlock * pblock,bool addHeight,int heightDifference)\n {\n-        SetEmptyBlock(pblock);\n+    SetEmptyBlock(pblock);\n \n-        // Add the coinbase\n-        CMutableTransaction txCoinbase(pblock->vtx[0]);\n+    // Add the coinbase\n+    CMutableTransaction txCoinbase(pblock->vtx[0]);\n+    \n+    if (addHeight) \n+        txCoinbase.vin[0].scriptSig = (CScript() << (chainActive.Height()+1+heightDifference) << 0);\n+        else\n+        txCoinbase.vin[0].scriptSig = (CScript() << heightDifference << 0); // At least size 2, this is a protocol spec\n         \n-        if (addHeight) \n-            txCoinbase.vin[0].scriptSig = (CScript() << (chainActive.Height()+1+difValue) << 0);\n-            else\n-            txCoinbase.vin[0].scriptSig = (CScript() << difValue << 0); // At least size 2, this is a protocol spec\n-            \n-        txCoinbase.vout[0].scriptPubKey = CScript();\n-        pblock->vtx[0] = CTransaction(txCoinbase);\n-        pblock->hashMerkleRoot = pblock->BuildMerkleTree();\n+    txCoinbase.vout[0].scriptPubKey = CScript();\n+    pblock->vtx[0] = CTransaction(txCoinbase);\n+    pblock->hashMerkleRoot = pblock->BuildMerkleTree();\n }\n \n void CheckSubsidyHalving(CBlockTemplate * &pblocktemplate, CBlock * &pblock)\n@@ -44,6 +45,8 @@ void CheckSubsidyHalving(CBlockTemplate * &pblocktemplate, CBlock * &pblock)\n         {\n             // The RegTest network has a low subsidy halving interval (150) so \n             // we must recompute the coinbase subsidy if we reach the boundary.\n+            // The unittest network allows modifying this interval. We check it so this\n+            // test can work in any network.\n \n             // preserve parent hash\n             uint256 prevParent = pblock->hashPrevBlock;\n@@ -54,6 +57,22 @@ void CheckSubsidyHalving(CBlockTemplate * &pblocktemplate, CBlock * &pblock)\n         }\n }\n \n+void CheckBlockAddedToBestChainSuccessfully(CBlock *pblock)\n+{\n+    int PreviousHeight;\n+    CValidationState state;\n+    \n+    PreviousHeight = chainActive.Height();\n+    BOOST_CHECK(ProcessBlock(state, NULL, pblock));\n+    BOOST_CHECK(state.IsValid());\n+    BOOST_CHECK((PreviousHeight+1) == chainActive.Height()); // to differentiate from orphan blocks, which also get accepted in ProcessBlock()\n+    \n+    // Previous checks do not assure the current best chain has pblock as tip. It could be the case that a because\n+    // of a malfunction in the chain reorganization code, a reorganization causes an increase of the chain length, but with another tip.\n+    // So we also check that.\n+    BOOST_CHECK(chainActive.Tip()->GetBlockHash()==pblock->GetHash());\n+}\n+\n void Blockv2test()\n {\n     assert(Params().NetworkID() == CBaseChainParams::UNITTEST); \n@@ -72,17 +91,18 @@ void Blockv2test()\n     CScript script;\n     uint256 hash;\n     int PreviousHeight;\n-\n     \n-    LOCK(cs_main);\n-        \n+    LOCK(cs_main);        \n     \n     // Simple block creation, nothing special yet.\n     pblocktemplate = CreateNewBlock(scriptPubKey);   \n     CBlock *pblock = &pblocktemplate->block; // pointer for convenience\n    \n     LogPrintf(\"Blockv2test block v1 add begin\\n\");  \n-    // First create a block v1, check that it is accepted. The block has an invalid height\n+    \n+    ////////////////////////////////////////////////////////////////////////////////////////    \n+    // First create a block v1, check that it is accepted. The block has an invalid height.\n+    ////////////////////////////////////////////////////////////////////////////////////////\n     SetBlockDefaultAttributesAndHeight(pblock,false,5000);\n     pblock->nVersion = 1;\n     CValidationState state1;\n@@ -93,7 +113,6 @@ void Blockv2test()\n     pblock->hashPrevBlock = pblock->GetHash(); // update parent\n     \n     \n-    // Now create exactly 1000 blocks v2\n     \n     // First check that the supermajority threshold is exactly 1000 blocks\n     BOOST_CHECK(Params().ToCheckBlockUpgradeMajority()==1000);  // \n@@ -105,11 +124,19 @@ void Blockv2test()\n     \n     LogPrintf(\"Blockv2test BIP30 repetition begin\\n\");  \n \n+    ///////////////////////////////////////////////////////////////////////////////////////////////////////\n     // First, if we try to add a block v2 with the same coinbase tx, we should get\n     // \"bad-txns-BIP30\" because the coinbase tx has the same hash as the previous.\n-    // Unluckily, even if ConnectBlock returns a \"bad-txns-BIP30\", ActivateBestChainStep clears\n-    // the state, so we get true here and the \"bad-txns-BIP30\" reason is lost.\n-    // We verify instead that the chain height has not been incremented.\n+    // Even if ConnectBlock returns a \"bad-txns-BIP30\", ActivateBestChainStep clears\n+    // the state, so we get true here and the \"bad-txns-BIP30\" reason is lost. But this\n+    // is the intended behaviour: Receiving a single block can cause zero or multiple blocks to be \n+    // connected, and ActivateBestChain's responsibility is just switching the best block whatsoever.\n+    // Feedback about failures causes a reject message to be sent to the peer from which we received \n+    // the actual block (not necessarily the same as from whom we got the block that caused the reorg), \n+    // for which we remember the peerid. \n+    // Because we cannot access the failure reason here, we just verify instead that the chain \n+    // height has not been incremented.\n+    //////////////////////////////////////////////////////////////////////////////////////////////////////\n     \n     CValidationState state7;\n     PreviousHeight = chainActive.Height();\n@@ -121,6 +148,11 @@ void Blockv2test()\n     BOOST_CHECK(PreviousHeight == chainActive.Height()); // we check the block has not been added.\n     \n     LogPrintf(\"Blockv2test 750 v2 blocks  begin\\n\");    \n+    \n+    ////////////////////////////\n+    // Now create 750 v2 blocks \n+    ////////////////////////////\n+    \n     for (int i=0;i<750;i++) \n     {\n         \n@@ -131,18 +163,17 @@ void Blockv2test()\n         // We add a value to the height to make is NOT equal to the actual height.\n         SetBlockDefaultAttributesAndHeight(pblock,true,1000); // blocks version 2 without height are allowed! for only 750 blocks\n         pblock->nVersion = 2;\n-        CValidationState state;\n-                    \n-        PreviousHeight = chainActive.Height();\n-        BOOST_CHECK(ProcessBlock(state, NULL, pblock));\n-        BOOST_CHECK(state.IsValid());\n-        BOOST_CHECK((PreviousHeight+1) == chainActive.Height()); // to differentiate from orphan blocks, which also get accepted in ProcessBlock()\n+        \n+        CheckBlockAddedToBestChainSuccessfully(pblock);\n         pblock->hashPrevBlock = pblock->GetHash(); // update parent\n     }\n \n     LogPrintf(\"Blockv2test v2 without height rejected begin\\n\"); \n     \n-    // Now we try to add a block v2, with an invalid height and it should be rejected. We use 2000 because is not in the range [1000..1750].\n+    /////////////////////////////////////////////////////////////////////////////////////\n+    // Now we try to add a block v2, with an invalid height and it should be rejected. \n+    // We use 2000 as argument heightDifference because is not in the range [1000..1750].\n+    /////////////////////////////////////////////////////////////////////////////////////\n     CheckSubsidyHalving(pblocktemplate,pblock);\t\n     SetBlockDefaultAttributesAndHeight(pblock,true,2000); // \n     pblock->nVersion = 2;\n@@ -152,44 +183,41 @@ void Blockv2test()\n     BOOST_CHECK(state0.GetRejectReason()==\"bad-cb-height\"); \n     // Do not update parent since block has failed\n     \n-    LogPrintf(\"Blockv2test v2 with height accepted begin\\n\");    \n+    LogPrintf(\"Blockv2test v2 with height accepted begin\\n\");       \n     \n-    \n-    // Now we add a block with height, must be ok.\n+    /////////////////////////////////////////////////////////////\n+    // Now we add 200 additional blocks, until we get 950 \n+    // (the threshold where v1 blocks are not accepted anymore)\n+    /////////////////////////////////////////////////////////////\n     for (int i=0;i<200;i++) \n     {\n         \n         LogPrintf(\"Blockv2test v2block %d begin\\n\",i);      \n         CheckSubsidyHalving(pblocktemplate,pblock);\n         SetBlockDefaultAttributesAndHeight(pblock,true,0);\n-        pblock->nVersion = 2;\n-        CValidationState state;\n-        PreviousHeight = chainActive.Height();\n-        BOOST_CHECK(ProcessBlock(state, NULL, pblock));\n-        BOOST_CHECK(state.IsValid());\n-        BOOST_CHECK((PreviousHeight+1) == chainActive.Height()); // to differentiate from orphan blocks, which also get accepted in ProcessBlock()\n-\n+        pblock->nVersion = 2;       \n+        CheckBlockAddedToBestChainSuccessfully(pblock);\n         pblock->hashPrevBlock = pblock->GetHash(); // update parent\n     }\n \n     \n     LogPrintf(\"Blockv2test block v1 rejected\\n\");   \n-    // Now we add 200 additional blocks, until we get 950 (the threshold were v1 blocks are not accepted anymore)\n+    \n+    /////////////////////////////////////////////////////////////////////////////////////////\n     // Now we try to add a block v1, it should be rejected, even if it hash the height field\n+    /////////////////////////////////////////////////////////////////////////////////////////\n     CheckSubsidyHalving(pblocktemplate,pblock);\t\n     SetBlockDefaultAttributesAndHeight(pblock,true,0);\n     pblock->nVersion = 1;\n     CValidationState state2;\n     BOOST_CHECK(ProcessBlock(state2, NULL, pblock)==false);\n     BOOST_CHECK(!state2.IsValid());\n     BOOST_CHECK(state2.GetRejectReason()==\"bad-version\");\n-    // Do not update parent since block has failed\n-    \n-    \n-    \n-    // Some other missing tests, added here as bonus...\n+    // Do not update parent since block has failed       \n     \n+    ////////////////////////////////////////////////////////\n     // Block time too old check\n+    ////////////////////////////////////////////////////////\n     CheckSubsidyHalving(pblocktemplate,pblock);\t\n     SetBlockDefaultAttributesAndHeight(pblock,true,0);\n     pblock->nVersion = 2;\n@@ -200,7 +228,9 @@ void Blockv2test()\n     BOOST_CHECK(state4.GetRejectReason()==\"time-too-old\");\n     // Do not update parent since block has failed\n     \n+    ////////////////////////////////////////////////////////\n     // Adding a non-final coinbase, must modify coinbase\n+    ////////////////////////////////////////////////////////\n     CheckSubsidyHalving(pblocktemplate,pblock);\t\n     SetEmptyBlock(pblock);\n     // Use a mutable coinbase to change nLockTime and  nSequence\n@@ -217,10 +247,23 @@ void Blockv2test()\n     BOOST_CHECK(state5.GetRejectReason()==\"bad-txns-nonfinal\");\n     // Do not update parent since block has failed\n     \n+    ModifiableParams()->setSkipProofOfWorkCheck(false);\n+    \n+    ////////////////////////////////////////////////////////////////////////////////\n+    // Just to be sure that proof-of-work skipping is working ok, we submit a block \n+    // without enought proof of work and it must be rejected. \n+    ////////////////////////////////////////////////////////////////////////////////\n+    CheckSubsidyHalving(pblocktemplate,pblock);\n+    SetBlockDefaultAttributesAndHeight(pblock,true,0);\n+    pblock->nVersion = 2;\n+    CValidationState state6;\n+    BOOST_CHECK(ProcessBlock(state6, NULL, pblock)==false);\n+    BOOST_CHECK(!state6.IsValid());\n+    BOOST_CHECK(state6.GetRejectReason()==\"high-hash\");\n     \n     delete pblocktemplate;\n     \n-    ModifiableParams()->setSkipProofOfWorkCheck(false);\n+    \n     LogPrintf(\"Blockv2test testcase ends\\n\");   \n }\n "
      }
    ]
  }
]