[
  {
    "sha": "526023aa7a99955dffcd406224963e6c193c1ddf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MjYwMjNhYTdhOTk5NTVkZmZjZDQwNjIyNDk2M2U2YzE5M2MxZGRm",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2017-10-17T08:47:57Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-11-07T03:09:05Z"
      },
      "message": "Improve handling of BIP9Deployment limits\n\nSmall tweaks by Pieter Wuille.",
      "tree": {
        "sha": "e0c7c12f8f527197b960dd86b2cee08f2d1b3f2c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e0c7c12f8f527197b960dd86b2cee08f2d1b3f2c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/526023aa7a99955dffcd406224963e6c193c1ddf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/526023aa7a99955dffcd406224963e6c193c1ddf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/526023aa7a99955dffcd406224963e6c193c1ddf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/526023aa7a99955dffcd406224963e6c193c1ddf/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6157e8ce3937af3f46d3e7dd922d19d6dc272145",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6157e8ce3937af3f46d3e7dd922d19d6dc272145",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6157e8ce3937af3f46d3e7dd922d19d6dc272145"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 7,
      "deletions": 3
    },
    "files": [
      {
        "sha": "9aa100f49fa8fa3982758f2841f5ac6b499af506",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/526023aa7a99955dffcd406224963e6c193c1ddf/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/526023aa7a99955dffcd406224963e6c193c1ddf/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=526023aa7a99955dffcd406224963e6c193c1ddf",
        "patch": "@@ -283,13 +283,13 @@ class CRegTestParams : public CChainParams {\n         consensus.nMinerConfirmationWindow = 144; // Faster than normal for regtest (144 instead of 2016)\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 0;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = 999999999999ULL;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = Consensus::BIP9Deployment::NO_TIMEOUT;\n         consensus.vDeployments[Consensus::DEPLOYMENT_CSV].bit = 0;\n         consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nStartTime = 0;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nTimeout = 999999999999ULL;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nTimeout = Consensus::BIP9Deployment::NO_TIMEOUT;\n         consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].bit = 1;\n         consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nStartTime = 0;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nTimeout = 999999999999ULL;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nTimeout = Consensus::BIP9Deployment::NO_TIMEOUT;\n \n         // The best chain should have at least this much work.\n         consensus.nMinimumChainWork = uint256S(\"0x00\");"
      },
      {
        "sha": "9d60c2413a7c62c99c832f47d680aa507f5558bb",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/526023aa7a99955dffcd406224963e6c193c1ddf/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/526023aa7a99955dffcd406224963e6c193c1ddf/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=526023aa7a99955dffcd406224963e6c193c1ddf",
        "patch": "@@ -7,6 +7,7 @@\n #define BITCOIN_CONSENSUS_PARAMS_H\n \n #include \"uint256.h\"\n+#include <limits>\n #include <map>\n #include <string>\n \n@@ -31,6 +32,9 @@ struct BIP9Deployment {\n     int64_t nStartTime;\n     /** Timeout/expiry MedianTime for the deployment attempt. */\n     int64_t nTimeout;\n+\n+    /** Constant for nTimeout very far in the future. */\n+    static constexpr int64_t NO_TIMEOUT = std::numeric_limits<int64_t>::max();\n };\n \n /**"
      }
    ]
  },
  {
    "sha": "18e071841e83044b47aa45c3e98c0796a407d445",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxOGUwNzE4NDFlODMwNDRiNDdhYTQ1YzNlOThjMDc5NmE0MDdkNDQ1",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-10-13T15:35:18Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-11-07T03:09:12Z"
      },
      "message": "[consensus] Pin P2SH activation to block 173805 on mainnet",
      "tree": {
        "sha": "ec4f134a88e4a6c451ffc815763c69d9d6bc356e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ec4f134a88e4a6c451ffc815763c69d9d6bc356e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/18e071841e83044b47aa45c3e98c0796a407d445",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/18e071841e83044b47aa45c3e98c0796a407d445",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/18e071841e83044b47aa45c3e98c0796a407d445",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/18e071841e83044b47aa45c3e98c0796a407d445/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "526023aa7a99955dffcd406224963e6c193c1ddf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/526023aa7a99955dffcd406224963e6c193c1ddf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/526023aa7a99955dffcd406224963e6c193c1ddf"
      }
    ],
    "stats": {
      "total": 49,
      "additions": 28,
      "deletions": 21
    },
    "files": [
      {
        "sha": "81ebdd46020a25bb1ed22ce2ef360a569ad98545",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/18e071841e83044b47aa45c3e98c0796a407d445/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/18e071841e83044b47aa45c3e98c0796a407d445/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=18e071841e83044b47aa45c3e98c0796a407d445",
        "patch": "@@ -75,6 +75,7 @@ class CMainParams : public CChainParams {\n     CMainParams() {\n         strNetworkID = \"main\";\n         consensus.nSubsidyHalvingInterval = 210000;\n+        consensus.BIP16Height = 173805; // 00000000000000ce80a7e057163a4db1d5ad7b20fb6f598c9597b9665c8fb0d4 - April 1, 2012\n         consensus.BIP34Height = 227931;\n         consensus.BIP34Hash = uint256S(\"0x000000000000024b89b42a942fe0d9fea3bb44ab7bd1b19115dd6a759c0808b8\");\n         consensus.BIP65Height = 388381; // 000000000000000004c2b624ed5d7756c508d90fd0da2c7c679febfa6c4735f0\n@@ -181,6 +182,7 @@ class CTestNetParams : public CChainParams {\n     CTestNetParams() {\n         strNetworkID = \"test\";\n         consensus.nSubsidyHalvingInterval = 210000;\n+        consensus.BIP16Height = 514; // 00000000040b4e986385315e14bee30ad876d8b47f748025b26683116d21aa65\n         consensus.BIP34Height = 21111;\n         consensus.BIP34Hash = uint256S(\"0x0000000023b3a96d3484e5abb3755c413e7d41500f8e2a5c3f0dd01299cd8ef8\");\n         consensus.BIP65Height = 581885; // 00000000007f6655f22f98e72ed80d8b06dc761d5da09df0fa1dc4be4f861eb6\n@@ -270,6 +272,7 @@ class CRegTestParams : public CChainParams {\n     CRegTestParams() {\n         strNetworkID = \"regtest\";\n         consensus.nSubsidyHalvingInterval = 150;\n+        consensus.BIP16Height = 0; // always enforce P2SH BIP16 on regtest\n         consensus.BIP34Height = 100000000; // BIP34 has not activated on regtest (far in the future so block v1 are not rejected in tests)\n         consensus.BIP34Hash = uint256();\n         consensus.BIP65Height = 1351; // BIP65 activated on regtest (Used in rpc activation tests)"
      },
      {
        "sha": "0bdf838208425f4b39d91fc67679aaf46a58a1fa",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/18e071841e83044b47aa45c3e98c0796a407d445/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/18e071841e83044b47aa45c3e98c0796a407d445/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=18e071841e83044b47aa45c3e98c0796a407d445",
        "patch": "@@ -43,6 +43,8 @@ struct BIP9Deployment {\n struct Params {\n     uint256 hashGenesisBlock;\n     int nSubsidyHalvingInterval;\n+    /** Block height at which BIP16 becomes active */\n+    int BIP16Height;\n     /** Block height and hash at which BIP34 becomes active */\n     int BIP34Height;\n     uint256 BIP34Hash;"
      },
      {
        "sha": "2851808cf4a5ef898790f16b4cba3ed71de26f7e",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 17,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/18e071841e83044b47aa45c3e98c0796a407d445/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/18e071841e83044b47aa45c3e98c0796a407d445/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=18e071841e83044b47aa45c3e98c0796a407d445",
        "patch": "@@ -335,23 +335,6 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     BOOST_CHECK_THROW(AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey), std::runtime_error);\n     mempool.clear();\n \n-    // invalid (pre-p2sh) txn in mempool, template creation fails\n-    tx.vin[0].prevout.hash = txFirst[0]->GetHash();\n-    tx.vin[0].prevout.n = 0;\n-    tx.vin[0].scriptSig = CScript() << OP_1;\n-    tx.vout[0].nValue = BLOCKSUBSIDY-LOWFEE;\n-    script = CScript() << OP_0;\n-    tx.vout[0].scriptPubKey = GetScriptForDestination(CScriptID(script));\n-    hash = tx.GetHash();\n-    mempool.addUnchecked(hash, entry.Fee(LOWFEE).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n-    tx.vin[0].prevout.hash = hash;\n-    tx.vin[0].scriptSig = CScript() << std::vector<unsigned char>(script.begin(), script.end());\n-    tx.vout[0].nValue -= LOWFEE;\n-    hash = tx.GetHash();\n-    mempool.addUnchecked(hash, entry.Fee(LOWFEE).Time(GetTime()).SpendsCoinbase(false).FromTx(tx));\n-    BOOST_CHECK_THROW(AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey), std::runtime_error);\n-    mempool.clear();\n-\n     // double spend txn pair in mempool, template creation fails\n     tx.vin[0].prevout.hash = txFirst[0]->GetHash();\n     tx.vin[0].scriptSig = CScript() << OP_1;\n@@ -391,6 +374,24 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         chainActive.SetTip(next);\n     }\n     BOOST_CHECK(pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey));\n+\n+    // invalid p2sh txn in mempool, template creation fails\n+    tx.vin[0].prevout.hash = txFirst[0]->GetHash();\n+    tx.vin[0].prevout.n = 0;\n+    tx.vin[0].scriptSig = CScript() << OP_1;\n+    tx.vout[0].nValue = BLOCKSUBSIDY-LOWFEE;\n+    script = CScript() << OP_0;\n+    tx.vout[0].scriptPubKey = GetScriptForDestination(CScriptID(script));\n+    hash = tx.GetHash();\n+    mempool.addUnchecked(hash, entry.Fee(LOWFEE).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n+    tx.vin[0].prevout.hash = hash;\n+    tx.vin[0].scriptSig = CScript() << std::vector<unsigned char>(script.begin(), script.end());\n+    tx.vout[0].nValue -= LOWFEE;\n+    hash = tx.GetHash();\n+    mempool.addUnchecked(hash, entry.Fee(LOWFEE).Time(GetTime()).SpendsCoinbase(false).FromTx(tx));\n+    BOOST_CHECK_THROW(AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey), std::runtime_error);\n+    mempool.clear();\n+\n     // Delete the dummy blocks again.\n     while (chainActive.Tip()->nHeight > nHeight) {\n         CBlockIndex* del = chainActive.Tip();"
      },
      {
        "sha": "f0c05e92f279e35379fa1dda4302d93609d47742",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/18e071841e83044b47aa45c3e98c0796a407d445/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/18e071841e83044b47aa45c3e98c0796a407d445/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=18e071841e83044b47aa45c3e98c0796a407d445",
        "patch": "@@ -1590,11 +1590,12 @@ static ThresholdConditionCache warningcache[VERSIONBITS_NUM_BITS];\n static unsigned int GetBlockScriptFlags(const CBlockIndex* pindex, const Consensus::Params& consensusparams) {\n     AssertLockHeld(cs_main);\n \n-    // BIP16 didn't become active until Apr 1 2012\n-    int64_t nBIP16SwitchTime = 1333238400;\n-    bool fStrictPayToScriptHash = (pindex->GetBlockTime() >= nBIP16SwitchTime);\n+    unsigned int flags = SCRIPT_VERIFY_NONE;\n \n-    unsigned int flags = fStrictPayToScriptHash ? SCRIPT_VERIFY_P2SH : SCRIPT_VERIFY_NONE;\n+    // Start enforcing P2SH (BIP16)\n+    if (pindex->nHeight >= consensusparams.BIP16Height) {\n+        flags |= SCRIPT_VERIFY_P2SH;\n+    }\n \n     // Start enforcing the DERSIG (BIP66) rule\n     if (pindex->nHeight >= consensusparams.BIP66Height) {"
      }
    ]
  },
  {
    "sha": "d07ee77ab9e62560c8bbd167207d42aa7686cd7a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMDdlZTc3YWI5ZTYyNTYwYzhiYmQxNjcyMDdkNDJhYTc2ODZjZDdh",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-10-12T03:25:05Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-11-07T03:19:10Z"
      },
      "message": "Always-active versionbits support",
      "tree": {
        "sha": "c4e3e5c1620f3fc22bbb5fb04587385537347731",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c4e3e5c1620f3fc22bbb5fb04587385537347731"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d07ee77ab9e62560c8bbd167207d42aa7686cd7a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d07ee77ab9e62560c8bbd167207d42aa7686cd7a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d07ee77ab9e62560c8bbd167207d42aa7686cd7a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d07ee77ab9e62560c8bbd167207d42aa7686cd7a/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "18e071841e83044b47aa45c3e98c0796a407d445",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/18e071841e83044b47aa45c3e98c0796a407d445",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/18e071841e83044b47aa45c3e98c0796a407d445"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 16,
      "deletions": 0
    },
    "files": [
      {
        "sha": "fd0946a6125c590df0b3c43403f942cd84a8d9d2",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d07ee77ab9e62560c8bbd167207d42aa7686cd7a/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d07ee77ab9e62560c8bbd167207d42aa7686cd7a/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=d07ee77ab9e62560c8bbd167207d42aa7686cd7a",
        "patch": "@@ -35,6 +35,12 @@ struct BIP9Deployment {\n \n     /** Constant for nTimeout very far in the future. */\n     static constexpr int64_t NO_TIMEOUT = std::numeric_limits<int64_t>::max();\n+\n+    /** Special value for nStartTime indicating that the deployment is always active.\n+     *  This is useful for testing, as it means tests don't need to deal with the activation\n+     *  process (which takes at least 3 BIP9 intervals). Only tests that specifically test the\n+     *  behaviour during activation cannot use this. */\n+    static constexpr int64_t ALWAYS_ACTIVE = -1;\n };\n \n /**"
      },
      {
        "sha": "fc1acb32583465e17dae5db590dfacec180d3ff3",
        "filename": "src/versionbits.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d07ee77ab9e62560c8bbd167207d42aa7686cd7a/src/versionbits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d07ee77ab9e62560c8bbd167207d42aa7686cd7a/src/versionbits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.cpp?ref=d07ee77ab9e62560c8bbd167207d42aa7686cd7a",
        "patch": "@@ -27,6 +27,11 @@ ThresholdState AbstractThresholdConditionChecker::GetStateFor(const CBlockIndex*\n     int64_t nTimeStart = BeginTime(params);\n     int64_t nTimeTimeout = EndTime(params);\n \n+    // Check if this deployment is always active.\n+    if (nTimeStart == Consensus::BIP9Deployment::ALWAYS_ACTIVE) {\n+        return THRESHOLD_ACTIVE;\n+    }\n+\n     // A block's state is always the same as that of the first of its period, so it is computed based on a pindexPrev whose height equals a multiple of nPeriod - 1.\n     if (pindexPrev != nullptr) {\n         pindexPrev = pindexPrev->GetAncestor(pindexPrev->nHeight - ((pindexPrev->nHeight + 1) % nPeriod));\n@@ -136,6 +141,11 @@ BIP9Stats AbstractThresholdConditionChecker::GetStateStatisticsFor(const CBlockI\n \n int AbstractThresholdConditionChecker::GetStateSinceHeightFor(const CBlockIndex* pindexPrev, const Consensus::Params& params, ThresholdConditionCache& cache) const\n {\n+    int64_t start_time = BeginTime(params);\n+    if (start_time == Consensus::BIP9Deployment::ALWAYS_ACTIVE) {\n+        return 0;\n+    }\n+\n     const ThresholdState initialState = GetStateFor(pindexPrev, params, cache);\n \n     // BIP 9 about state DEFINED: \"The genesis block is by definition in this state for each deployment.\""
      }
    ]
  },
  {
    "sha": "4bd89210a1484d00abba27c50ac4c07dcc05c2e0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YmQ4OTIxMGExNDg0ZDAwYWJiYTI3YzUwYWM0YzA3ZGNjMDVjMmUw",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2017-10-17T08:24:46Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-11-07T03:23:40Z"
      },
      "message": "Unit tests for always-active versionbits.",
      "tree": {
        "sha": "e408aaf6c18bcd00d8ebc6b12d538395d579e119",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e408aaf6c18bcd00d8ebc6b12d538395d579e119"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4bd89210a1484d00abba27c50ac4c07dcc05c2e0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4bd89210a1484d00abba27c50ac4c07dcc05c2e0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4bd89210a1484d00abba27c50ac4c07dcc05c2e0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4bd89210a1484d00abba27c50ac4c07dcc05c2e0/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d07ee77ab9e62560c8bbd167207d42aa7686cd7a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d07ee77ab9e62560c8bbd167207d42aa7686cd7a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d07ee77ab9e62560c8bbd167207d42aa7686cd7a"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 15,
      "deletions": 0
    },
    "files": [
      {
        "sha": "db537d3932d5f9f410546d2388ee7a57ea5d6120",
        "filename": "src/test/versionbits_tests.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4bd89210a1484d00abba27c50ac4c07dcc05c2e0/src/test/versionbits_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4bd89210a1484d00abba27c50ac4c07dcc05c2e0/src/test/versionbits_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/versionbits_tests.cpp?ref=4bd89210a1484d00abba27c50ac4c07dcc05c2e0",
        "patch": "@@ -32,6 +32,12 @@ class TestConditionChecker : public AbstractThresholdConditionChecker\n     int GetStateSinceHeightFor(const CBlockIndex* pindexPrev) const { return AbstractThresholdConditionChecker::GetStateSinceHeightFor(pindexPrev, paramsDummy, cache); }\n };\n \n+class TestAlwaysActiveConditionChecker : public TestConditionChecker\n+{\n+public:\n+    int64_t BeginTime(const Consensus::Params& params) const override { return Consensus::BIP9Deployment::ALWAYS_ACTIVE; }\n+};\n+\n #define CHECKERS 6\n \n class VersionBitsTester\n@@ -43,6 +49,8 @@ class VersionBitsTester\n     // The first one performs all checks, the second only 50%, the third only 25%, etc...\n     // This is to test whether lack of cached information leads to the same results.\n     TestConditionChecker checker[CHECKERS];\n+    // Another 6 that assume always active activation\n+    TestAlwaysActiveConditionChecker checker_always[CHECKERS];\n \n     // Test counter (to identify failures)\n     int num;\n@@ -56,6 +64,7 @@ class VersionBitsTester\n         }\n         for (unsigned int  i = 0; i < CHECKERS; i++) {\n             checker[i] = TestConditionChecker();\n+            checker_always[i] = TestAlwaysActiveConditionChecker();\n         }\n         vpblock.clear();\n         return *this;\n@@ -82,6 +91,7 @@ class VersionBitsTester\n         for (int i = 0; i < CHECKERS; i++) {\n             if (InsecureRandBits(i) == 0) {\n                 BOOST_CHECK_MESSAGE(checker[i].GetStateSinceHeightFor(vpblock.empty() ? nullptr : vpblock.back()) == height, strprintf(\"Test %i for StateSinceHeight\", num));\n+                BOOST_CHECK_MESSAGE(checker_always[i].GetStateSinceHeightFor(vpblock.empty() ? nullptr : vpblock.back()) == 0, strprintf(\"Test %i for StateSinceHeight (always active)\", num));\n             }\n         }\n         num++;\n@@ -92,6 +102,7 @@ class VersionBitsTester\n         for (int i = 0; i < CHECKERS; i++) {\n             if (InsecureRandBits(i) == 0) {\n                 BOOST_CHECK_MESSAGE(checker[i].GetStateFor(vpblock.empty() ? nullptr : vpblock.back()) == THRESHOLD_DEFINED, strprintf(\"Test %i for DEFINED\", num));\n+                BOOST_CHECK_MESSAGE(checker_always[i].GetStateFor(vpblock.empty() ? nullptr : vpblock.back()) == THRESHOLD_ACTIVE, strprintf(\"Test %i for ACTIVE (always active)\", num));\n             }\n         }\n         num++;\n@@ -102,6 +113,7 @@ class VersionBitsTester\n         for (int i = 0; i < CHECKERS; i++) {\n             if (InsecureRandBits(i) == 0) {\n                 BOOST_CHECK_MESSAGE(checker[i].GetStateFor(vpblock.empty() ? nullptr : vpblock.back()) == THRESHOLD_STARTED, strprintf(\"Test %i for STARTED\", num));\n+                BOOST_CHECK_MESSAGE(checker_always[i].GetStateFor(vpblock.empty() ? nullptr : vpblock.back()) == THRESHOLD_ACTIVE, strprintf(\"Test %i for ACTIVE (always active)\", num));\n             }\n         }\n         num++;\n@@ -112,6 +124,7 @@ class VersionBitsTester\n         for (int i = 0; i < CHECKERS; i++) {\n             if (InsecureRandBits(i) == 0) {\n                 BOOST_CHECK_MESSAGE(checker[i].GetStateFor(vpblock.empty() ? nullptr : vpblock.back()) == THRESHOLD_LOCKED_IN, strprintf(\"Test %i for LOCKED_IN\", num));\n+                BOOST_CHECK_MESSAGE(checker_always[i].GetStateFor(vpblock.empty() ? nullptr : vpblock.back()) == THRESHOLD_ACTIVE, strprintf(\"Test %i for ACTIVE (always active)\", num));\n             }\n         }\n         num++;\n@@ -122,6 +135,7 @@ class VersionBitsTester\n         for (int i = 0; i < CHECKERS; i++) {\n             if (InsecureRandBits(i) == 0) {\n                 BOOST_CHECK_MESSAGE(checker[i].GetStateFor(vpblock.empty() ? nullptr : vpblock.back()) == THRESHOLD_ACTIVE, strprintf(\"Test %i for ACTIVE\", num));\n+                BOOST_CHECK_MESSAGE(checker_always[i].GetStateFor(vpblock.empty() ? nullptr : vpblock.back()) == THRESHOLD_ACTIVE, strprintf(\"Test %i for ACTIVE (always active)\", num));\n             }\n         }\n         num++;\n@@ -132,6 +146,7 @@ class VersionBitsTester\n         for (int i = 0; i < CHECKERS; i++) {\n             if (InsecureRandBits(i) == 0) {\n                 BOOST_CHECK_MESSAGE(checker[i].GetStateFor(vpblock.empty() ? nullptr : vpblock.back()) == THRESHOLD_FAILED, strprintf(\"Test %i for FAILED\", num));\n+                BOOST_CHECK_MESSAGE(checker_always[i].GetStateFor(vpblock.empty() ? nullptr : vpblock.back()) == THRESHOLD_ACTIVE, strprintf(\"Test %i for ACTIVE (always active)\", num));\n             }\n         }\n         num++;"
      }
    ]
  },
  {
    "sha": "d618458184742b15a7ab0349127ede7a2946a182",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNjE4NDU4MTg0NzQyYjE1YTdhYjAzNDkxMjdlZGU3YTI5NDZhMTgy",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-10-12T03:25:18Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-11-07T03:29:20Z"
      },
      "message": "Have SegWit active by default",
      "tree": {
        "sha": "5c08e3162c6ac3f53dd8362fe0ae1b505c5186ad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5c08e3162c6ac3f53dd8362fe0ae1b505c5186ad"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d618458184742b15a7ab0349127ede7a2946a182",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d618458184742b15a7ab0349127ede7a2946a182",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d618458184742b15a7ab0349127ede7a2946a182",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d618458184742b15a7ab0349127ede7a2946a182/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4bd89210a1484d00abba27c50ac4c07dcc05c2e0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4bd89210a1484d00abba27c50ac4c07dcc05c2e0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4bd89210a1484d00abba27c50ac4c07dcc05c2e0"
      }
    ],
    "stats": {
      "total": 46,
      "additions": 30,
      "deletions": 16
    },
    "files": [
      {
        "sha": "950bdd945cc20e81b43e02b364fc4a7cc14af2dd",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d618458184742b15a7ab0349127ede7a2946a182/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d618458184742b15a7ab0349127ede7a2946a182/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=d618458184742b15a7ab0349127ede7a2946a182",
        "patch": "@@ -291,7 +291,7 @@ class CRegTestParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nStartTime = 0;\n         consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nTimeout = Consensus::BIP9Deployment::NO_TIMEOUT;\n         consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].bit = 1;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nStartTime = 0;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nStartTime = Consensus::BIP9Deployment::ALWAYS_ACTIVE;\n         consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nTimeout = Consensus::BIP9Deployment::NO_TIMEOUT;\n \n         // The best chain should have at least this much work."
      },
      {
        "sha": "8a7140d52264294c4594bb68ec1657ded6302ad2",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d618458184742b15a7ab0349127ede7a2946a182/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d618458184742b15a7ab0349127ede7a2946a182/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=d618458184742b15a7ab0349127ede7a2946a182",
        "patch": "@@ -106,6 +106,9 @@ TestingSetup::~TestingSetup()\n \n TestChain100Setup::TestChain100Setup() : TestingSetup(CBaseChainParams::REGTEST)\n {\n+    // CreateAndProcessBlock() does not support building SegWit blocks, so don't activate in these tests.\n+    // TODO: fix the code to support SegWit blocks.\n+    UpdateVersionBitsParameters(Consensus::DEPLOYMENT_SEGWIT, 0, Consensus::BIP9Deployment::NO_TIMEOUT);\n     // Generate a 100-block chain:\n     coinbaseKey.MakeNewKey(true);\n     CScript scriptPubKey = CScript() <<  ToByteVector(coinbaseKey.GetPubKey()) << OP_CHECKSIG;"
      },
      {
        "sha": "7bc7c168f4bf902dbd4bda119e7273fedfd901d6",
        "filename": "test/functional/nulldummy.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d618458184742b15a7ab0349127ede7a2946a182/test/functional/nulldummy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d618458184742b15a7ab0349127ede7a2946a182/test/functional/nulldummy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/nulldummy.py?ref=d618458184742b15a7ab0349127ede7a2946a182",
        "patch": "@@ -40,7 +40,9 @@ class NULLDUMMYTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n-        self.extra_args = [['-whitelist=127.0.0.1', '-walletprematurewitness']]\n+        # This script tests NULLDUMMY activation, which is part of the 'segwit' deployment, so we go through\n+        # normal segwit activation here (and don't use the default always-on behaviour).\n+        self.extra_args = [['-whitelist=127.0.0.1', '-walletprematurewitness', '-vbparams=segwit:0:999999999999']]\n \n     def run_test(self):\n         self.address = self.nodes[0].getnewaddress()"
      },
      {
        "sha": "e3f986d80b67de1b1659ff6dc51e67ef4f1ce8c9",
        "filename": "test/functional/p2p-compactblocks.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d618458184742b15a7ab0349127ede7a2946a182/test/functional/p2p-compactblocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d618458184742b15a7ab0349127ede7a2946a182/test/functional/p2p-compactblocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-compactblocks.py?ref=d618458184742b15a7ab0349127ede7a2946a182",
        "patch": "@@ -93,7 +93,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         # Node0 = pre-segwit, node1 = segwit-aware\n         self.num_nodes = 2\n-        self.extra_args = [[\"-vbparams=segwit:0:0\"], [\"-txindex\"]]\n+        # This test was written assuming SegWit is activated using BIP9 at height 432 (3x confirmation window).\n+        # TODO: Rewrite this test to support SegWit being always active.\n+        self.extra_args = [[\"-vbparams=segwit:0:0\"], [\"-vbparams=segwit:0:999999999999\", \"-txindex\"]]\n         self.utxos = []\n \n     def build_block_on_tip(self, node, segwit=False):"
      },
      {
        "sha": "49de1a6e87723ef19797b204dd79f27b148380a1",
        "filename": "test/functional/p2p-segwit.py",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d618458184742b15a7ab0349127ede7a2946a182/test/functional/p2p-segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d618458184742b15a7ab0349127ede7a2946a182/test/functional/p2p-segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-segwit.py?ref=d618458184742b15a7ab0349127ede7a2946a182",
        "patch": "@@ -111,7 +111,8 @@ class SegWitTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n-        self.extra_args = [[\"-whitelist=127.0.0.1\"], [\"-whitelist=127.0.0.1\", \"-acceptnonstdtxn=0\"], [\"-whitelist=127.0.0.1\", \"-vbparams=segwit:0:0\"]]\n+        # This test tests SegWit both pre and post-activation, so use the normal BIP9 activation.\n+        self.extra_args = [[\"-whitelist=127.0.0.1\", \"-vbparams=segwit:0:999999999999\"], [\"-whitelist=127.0.0.1\", \"-acceptnonstdtxn=0\", \"-vbparams=segwit:0:999999999999\"], [\"-whitelist=127.0.0.1\", \"-vbparams=segwit:0:0\"]]\n \n     def setup_network(self):\n         self.setup_nodes()\n@@ -1493,7 +1494,7 @@ def test_upgrade_after_activation(self, node_id):\n \n         # Restart with the new binary\n         self.stop_node(node_id)\n-        self.start_node(node_id, extra_args=[])\n+        self.start_node(node_id, extra_args=[\"-vbparams=segwit:0:999999999999\"])\n         connect_nodes(self.nodes[0], node_id)\n \n         sync_blocks(self.nodes)"
      },
      {
        "sha": "338fa1bc526ac141f885cb87b221b91a387ce0bc",
        "filename": "test/functional/segwit.py",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d618458184742b15a7ab0349127ede7a2946a182/test/functional/segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d618458184742b15a7ab0349127ede7a2946a182/test/functional/segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/segwit.py?ref=d618458184742b15a7ab0349127ede7a2946a182",
        "patch": "@@ -77,9 +77,10 @@ class SegWitTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n-        self.extra_args = [[\"-walletprematurewitness\", \"-rpcserialversion=0\"],\n-                           [\"-blockversion=4\", \"-promiscuousmempoolflags=517\", \"-prematurewitness\", \"-walletprematurewitness\", \"-rpcserialversion=1\"],\n-                           [\"-blockversion=536870915\", \"-promiscuousmempoolflags=517\", \"-prematurewitness\", \"-walletprematurewitness\"]]\n+        # This test tests SegWit both pre and post-activation, so use the normal BIP9 activation.\n+        self.extra_args = [[\"-walletprematurewitness\", \"-rpcserialversion=0\", \"-vbparams=segwit:0:999999999999\"],\n+                           [\"-blockversion=4\", \"-promiscuousmempoolflags=517\", \"-prematurewitness\", \"-walletprematurewitness\", \"-rpcserialversion=1\", \"-vbparams=segwit:0:999999999999\"],\n+                           [\"-blockversion=536870915\", \"-promiscuousmempoolflags=517\", \"-prematurewitness\", \"-walletprematurewitness\", \"-vbparams=segwit:0:999999999999\"]]\n \n     def setup_network(self):\n         super().setup_network()"
      },
      {
        "sha": "23a74a5f53ae3458e3604f892919f9a22823edb5",
        "filename": "test/functional/sendheaders.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d618458184742b15a7ab0349127ede7a2946a182/test/functional/sendheaders.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d618458184742b15a7ab0349127ede7a2946a182/test/functional/sendheaders.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/sendheaders.py?ref=d618458184742b15a7ab0349127ede7a2946a182",
        "patch": "@@ -215,7 +215,7 @@ def run_test(self):\n         connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], inv_node))\n         # Set nServices to 0 for test_node, so no block download will occur outside of\n         # direct fetching\n-        connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], test_node, services=0))\n+        connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], test_node, services=NODE_WITNESS))\n         inv_node.add_connection(connections[0])\n         test_node.add_connection(connections[1])\n "
      },
      {
        "sha": "051c57a6c73f30d1a0d28499b170b3b0a6488d96",
        "filename": "test/functional/test_framework/blockstore.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d618458184742b15a7ab0349127ede7a2946a182/test/functional/test_framework/blockstore.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d618458184742b15a7ab0349127ede7a2946a182/test/functional/test_framework/blockstore.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/blockstore.py?ref=d618458184742b15a7ab0349127ede7a2946a182",
        "patch": "@@ -100,7 +100,7 @@ def add_header(self, header):\n     def get_blocks(self, inv):\n         responses = []\n         for i in inv:\n-            if (i.type == 2): # MSG_BLOCK\n+            if (i.type == 2 or i.type == (2 | (1 << 30))): # MSG_BLOCK or MSG_WITNESS_BLOCK\n                 data = self.get(i.hash)\n                 if data is not None:\n                     # Use msg_generic to avoid re-serialization\n@@ -153,7 +153,7 @@ def add_transaction(self, tx):\n     def get_transactions(self, inv):\n         responses = []\n         for i in inv:\n-            if (i.type == 1): # MSG_TX\n+            if (i.type == 1 or i.type == (1 | (1 << 30))): # MSG_TX or MSG_WITNESS_TX\n                 tx = self.get(i.hash)\n                 if tx is not None:\n                     responses.append(msg_generic(b\"tx\", tx))"
      },
      {
        "sha": "39a81a267fbc01f75b5f4c17d07a9a4ccb123358",
        "filename": "test/functional/test_framework/comptool.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d618458184742b15a7ab0349127ede7a2946a182/test/functional/test_framework/comptool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d618458184742b15a7ab0349127ede7a2946a182/test/functional/test_framework/comptool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/comptool.py?ref=d618458184742b15a7ab0349127ede7a2946a182",
        "patch": "@@ -80,9 +80,9 @@ def on_getdata(self, conn, message):\n         [conn.send_message(r) for r in self.tx_store.get_transactions(message.inv)]\n \n         for i in message.inv:\n-            if i.type == 1:\n+            if i.type == 1 or i.type == 1 | (1 << 30): # MSG_TX or MSG_WITNESS_TX\n                 self.tx_request_map[i.hash] = True\n-            elif i.type == 2:\n+            elif i.type == 2 or i.type == 2 | (1 << 30): # MSG_BLOCK or MSG_WITNESS_BLOCK\n                 self.block_request_map[i.hash] = True\n \n     def on_inv(self, conn, message):"
      },
      {
        "sha": "3e751f0f321923edbb6603b10049cb53091680d7",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d618458184742b15a7ab0349127ede7a2946a182/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d618458184742b15a7ab0349127ede7a2946a182/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=d618458184742b15a7ab0349127ede7a2946a182",
        "patch": "@@ -949,7 +949,7 @@ class msg_version():\n \n     def __init__(self):\n         self.nVersion = MY_VERSION\n-        self.nServices = 1\n+        self.nServices = NODE_NETWORK | NODE_WITNESS\n         self.nTime = int(time.time())\n         self.addrTo = CAddress()\n         self.addrFrom = CAddress()\n@@ -1649,7 +1649,7 @@ class NodeConn(asyncore.dispatcher):\n         \"regtest\": b\"\\xfa\\xbf\\xb5\\xda\",   # regtest\n     }\n \n-    def __init__(self, dstaddr, dstport, rpc, callback, net=\"regtest\", services=NODE_NETWORK, send_version=True):\n+    def __init__(self, dstaddr, dstport, rpc, callback, net=\"regtest\", services=NODE_NETWORK|NODE_WITNESS, send_version=True):\n         asyncore.dispatcher.__init__(self, map=mininode_socket_map)\n         self.dstaddr = dstaddr\n         self.dstport = dstport"
      },
      {
        "sha": "fa30318416b4af674b15c39a3959bd923f6cd785",
        "filename": "test/functional/zmq_test.py",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d618458184742b15a7ab0349127ede7a2946a182/test/functional/zmq_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d618458184742b15a7ab0349127ede7a2946a182/test/functional/zmq_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/zmq_test.py?ref=d618458184742b15a7ab0349127ede7a2946a182",
        "patch": "@@ -8,10 +8,12 @@\n import struct\n \n from test_framework.test_framework import BitcoinTestFramework, SkipTest\n+from test_framework.mininode import CTransaction\n from test_framework.util import (assert_equal,\n                                  bytes_to_hex_str,\n                                  hash256,\n                                 )\n+from io import BytesIO\n \n class ZMQSubscriber:\n     def __init__(self, socket, topic):\n@@ -93,7 +95,10 @@ def _zmq_test(self):\n \n             # Should receive the coinbase raw transaction.\n             hex = self.rawtx.receive()\n-            assert_equal(hash256(hex), txid)\n+            tx = CTransaction()\n+            tx.deserialize(BytesIO(hex))\n+            tx.calc_sha256()\n+            assert_equal(tx.hash, bytes_to_hex_str(txid))\n \n             # Should receive the generated block hash.\n             hash = bytes_to_hex_str(self.hashblock.receive())"
      }
    ]
  }
]