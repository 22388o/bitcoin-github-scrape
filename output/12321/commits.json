[
  {
    "sha": "4f933b3d23010d3b03998460290faed97cd6f236",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZjkzM2IzZDIzMDEwZDNiMDM5OTg0NjAyOTBmYWVkOTdjZDZmMjM2",
    "commit": {
      "author": {
        "name": "fivepiece",
        "email": "fivepiece@users.noreply.github.com",
        "date": "2018-02-01T00:40:47Z"
      },
      "committer": {
        "name": "fivepiece",
        "email": "fivepiece@users.noreply.github.com",
        "date": "2018-03-06T21:10:18Z"
      },
      "message": "p2wpkh, p2wsh and p2sh-nested scripts in decodescript\n\nplus tests",
      "tree": {
        "sha": "e52334ace7fcf7821b91a9e9db80d11f68cfa690",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e52334ace7fcf7821b91a9e9db80d11f68cfa690"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4f933b3d23010d3b03998460290faed97cd6f236",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4f933b3d23010d3b03998460290faed97cd6f236",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4f933b3d23010d3b03998460290faed97cd6f236",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4f933b3d23010d3b03998460290faed97cd6f236/comments",
    "author": {
      "login": "fivepiece",
      "id": 5624963,
      "node_id": "MDQ6VXNlcjU2MjQ5NjM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5624963?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fivepiece",
      "html_url": "https://github.com/fivepiece",
      "followers_url": "https://api.github.com/users/fivepiece/followers",
      "following_url": "https://api.github.com/users/fivepiece/following{/other_user}",
      "gists_url": "https://api.github.com/users/fivepiece/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fivepiece/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fivepiece/subscriptions",
      "organizations_url": "https://api.github.com/users/fivepiece/orgs",
      "repos_url": "https://api.github.com/users/fivepiece/repos",
      "events_url": "https://api.github.com/users/fivepiece/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fivepiece/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fivepiece",
      "id": 5624963,
      "node_id": "MDQ6VXNlcjU2MjQ5NjM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5624963?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fivepiece",
      "html_url": "https://github.com/fivepiece",
      "followers_url": "https://api.github.com/users/fivepiece/followers",
      "following_url": "https://api.github.com/users/fivepiece/following{/other_user}",
      "gists_url": "https://api.github.com/users/fivepiece/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fivepiece/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fivepiece/subscriptions",
      "organizations_url": "https://api.github.com/users/fivepiece/orgs",
      "repos_url": "https://api.github.com/users/fivepiece/repos",
      "events_url": "https://api.github.com/users/fivepiece/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fivepiece/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d09968f4d00668b990ae19aed024ff3fd27072b8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d09968f4d00668b990ae19aed024ff3fd27072b8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d09968f4d00668b990ae19aed024ff3fd27072b8"
      }
    ],
    "stats": {
      "total": 92,
      "additions": 89,
      "deletions": 3
    },
    "files": [
      {
        "sha": "b99906edf45e8c6abcd5f26d458465e13e80e588",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 0,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f933b3d23010d3b03998460290faed97cd6f236/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f933b3d23010d3b03998460290faed97cd6f236/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=4f933b3d23010d3b03998460290faed97cd6f236",
        "patch": "@@ -563,6 +563,38 @@ UniValue decodescript(const JSONRPCRequest& request)\n         // P2SH cannot be wrapped in a P2SH. If this script is already a P2SH,\n         // don't return the address for a P2SH of the P2SH.\n         r.pushKV(\"p2sh\", EncodeDestination(CScriptID(script)));\n+        // P2SH and witness programs cannot be wrapped in P2WSH, if this script\n+        // is a witness program, don't return addresses for a segwit programs.\n+        if (type.get_str().find(\"witness\") == std::string::npos) {\n+            txnouttype which_type;\n+            std::vector<std::vector<unsigned char>> solutions_data;\n+            Solver(script, which_type, solutions_data);\n+            // Uncompressed pubkeys cannot be used with segwit checksigs.\n+            // If the script contains an uncompressed pubkey, skip encoding of a segwit program.\n+            if ((which_type == TX_PUBKEY) || (which_type == TX_MULTISIG)) {\n+                for (const auto& solution : solutions_data) {\n+                    if ((solution.size() != 1) && !CPubKey(solution).IsCompressed()) {\n+                        return r;\n+                    }\n+                }\n+            }\n+            UniValue sr(UniValue::VOBJ);\n+            CScript segwitScr;\n+            if (which_type == TX_PUBKEY) {\n+                segwitScr = GetScriptForDestination(WitnessV0KeyHash(Hash160(solutions_data[0].begin(), solutions_data[0].end())));\n+            } else if (which_type == TX_PUBKEYHASH) {\n+                segwitScr = GetScriptForDestination(WitnessV0KeyHash(solutions_data[0]));\n+            } else {\n+                // Scripts that are not fit for P2WPKH are encoded as P2WSH.\n+                // Newer segwit program versions should be considered when then become available.\n+                uint256 scriptHash;\n+                CSHA256().Write(script.data(), script.size()).Finalize(scriptHash.begin());\n+                segwitScr = GetScriptForDestination(WitnessV0ScriptHash(scriptHash));\n+            }\n+            ScriptPubKeyToUniv(segwitScr, sr, true);\n+            sr.pushKV(\"p2sh-segwit\", EncodeDestination(CScriptID(segwitScr)));\n+            r.pushKV(\"segwit\", sr);\n+        }\n     }\n \n     return r;"
      },
      {
        "sha": "d588151768058ee2459fc4fa6adda6bc3d85ac4f",
        "filename": "test/functional/rpc_decodescript.py",
        "status": "modified",
        "additions": 57,
        "deletions": 3,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f933b3d23010d3b03998460290faed97cd6f236/test/functional/rpc_decodescript.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f933b3d23010d3b03998460290faed97cd6f236/test/functional/rpc_decodescript.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_decodescript.py?ref=4f933b3d23010d3b03998460290faed97cd6f236",
        "patch": "@@ -50,34 +50,47 @@ def decodescript_script_sig(self):\n     def decodescript_script_pub_key(self):\n         public_key = '03b0da749730dc9b4b1f4a14d6902877a92541f5368778853d9c4a0cb7802dcfb2'\n         push_public_key = '21' + public_key\n-        public_key_hash = '11695b6cd891484c2d49ec5aa738ec2b2f897777'\n+        public_key_hash = '5dd1d3a048119c27b28293056724d9522f26d945'\n         push_public_key_hash = '14' + public_key_hash\n+        uncompressed_public_key = '04b0da749730dc9b4b1f4a14d6902877a92541f5368778853d9c4a0cb7802dcfb25e01fc8fde47c96c98a4f3a8123e33a38a50cf9025cc8c4494a518f991792bb7'\n+        push_uncompressed_public_key = '41' + uncompressed_public_key\n+        p2wsh_p2pk_script_hash = 'd8590cf8ea0674cf3d49fd7ca249b85ef7485dea62c138468bddeb20cd6519f7'\n \n         # below are test cases for all of the standard transaction types\n \n         # 1) P2PK scriptPubKey\n         # <pubkey> OP_CHECKSIG\n         rpc_result = self.nodes[0].decodescript(push_public_key + 'ac')\n         assert_equal(public_key + ' OP_CHECKSIG', rpc_result['asm'])\n+        # P2PK is translated to P2WPKH\n+        assert_equal('0 ' + public_key_hash, rpc_result['segwit']['asm'])\n \n         # 2) P2PKH scriptPubKey\n         # OP_DUP OP_HASH160 <PubKeyHash> OP_EQUALVERIFY OP_CHECKSIG\n         rpc_result = self.nodes[0].decodescript('76a9' + push_public_key_hash + '88ac')\n         assert_equal('OP_DUP OP_HASH160 ' + public_key_hash + ' OP_EQUALVERIFY OP_CHECKSIG', rpc_result['asm'])\n+        # P2PKH is translated to P2WPKH\n+        assert_equal('0 ' + public_key_hash, rpc_result['segwit']['asm'])\n \n         # 3) multisig scriptPubKey\n         # <m> <A pubkey> <B pubkey> <C pubkey> <n> OP_CHECKMULTISIG\n         # just imagine that the pub keys used below are different.\n         # for our purposes here it does not matter that they are the same even though it is unrealistic.\n-        rpc_result = self.nodes[0].decodescript('52' + push_public_key + push_public_key + push_public_key + '53ae')\n+        multisig_script = '52' + push_public_key + push_public_key + push_public_key + '53ae'\n+        rpc_result = self.nodes[0].decodescript(multisig_script)\n         assert_equal('2 ' + public_key + ' ' + public_key + ' ' + public_key +  ' 3 OP_CHECKMULTISIG', rpc_result['asm'])\n+        # multisig in P2WSH\n+        multisig_script_hash = bytes_to_hex_str(sha256(hex_str_to_bytes(multisig_script)))\n+        assert_equal('0 ' + multisig_script_hash, rpc_result['segwit']['asm'])\n \n         # 4) P2SH scriptPubKey\n         # OP_HASH160 <Hash160(redeemScript)> OP_EQUAL.\n         # push_public_key_hash here should actually be the hash of a redeem script.\n         # but this works the same for purposes of this test.\n         rpc_result = self.nodes[0].decodescript('a9' + push_public_key_hash + '87')\n         assert_equal('OP_HASH160 ' + public_key_hash + ' OP_EQUAL', rpc_result['asm'])\n+        # P2SH does not work in segwit secripts. decodescript should not return a result for it.\n+        assert 'segwit' not in rpc_result\n \n         # 5) null data scriptPubKey\n         # use a signature look-alike here to make sure that we do not decode random data as a signature.\n@@ -101,8 +114,49 @@ def decodescript_script_pub_key(self):\n         # <sender-pubkey> OP_CHECKSIG\n         #\n         # lock until block 500,000\n-        rpc_result = self.nodes[0].decodescript('63' + push_public_key + 'ad670320a107b17568' + push_public_key + 'ac')\n+        cltv_script = '63' + push_public_key + 'ad670320a107b17568' + push_public_key + 'ac'\n+        rpc_result = self.nodes[0].decodescript(cltv_script)\n         assert_equal('OP_IF ' + public_key + ' OP_CHECKSIGVERIFY OP_ELSE 500000 OP_CHECKLOCKTIMEVERIFY OP_DROP OP_ENDIF ' + public_key + ' OP_CHECKSIG', rpc_result['asm'])\n+        # CLTV script in P2WSH\n+        cltv_script_hash = bytes_to_hex_str(sha256(hex_str_to_bytes(cltv_script)))\n+        assert_equal('0 ' + cltv_script_hash, rpc_result['segwit']['asm'])\n+\n+        # 7) P2PK scriptPubKey\n+        # <pubkey> OP_CHECKSIG\n+        rpc_result = self.nodes[0].decodescript(push_uncompressed_public_key + 'ac')\n+        assert_equal(uncompressed_public_key + ' OP_CHECKSIG', rpc_result['asm'])\n+        # uncompressed pubkeys are invalid for checksigs in segwit scripts.\n+        # decodescript should not return a P2WPKH equivalent.\n+        assert 'segwit' not in rpc_result\n+\n+        # 8) multisig scriptPubKey with an uncompressed pubkey\n+        # <m> <A pubkey> <B pubkey> <n> OP_CHECKMULTISIG\n+        # just imagine that the pub keys used below are different.\n+        # the purpose of this test is to check that a segwit script is not returned for bare multisig scripts\n+        # with an uncompressed pubkey in them.\n+        rpc_result = self.nodes[0].decodescript('52' + push_public_key + push_uncompressed_public_key +'52ae')\n+        assert_equal('2 ' + public_key + ' ' + uncompressed_public_key + ' 2 OP_CHECKMULTISIG', rpc_result['asm'])\n+        # uncompressed pubkeys are invalid for checksigs in segwit scripts.\n+        # decodescript should not return a P2WPKH equivalent.\n+        assert 'segwit' not in rpc_result\n+\n+        # 9) P2WPKH scriptpubkey\n+        # 0 <PubKeyHash>\n+        rpc_result = self.nodes[0].decodescript('00' + push_public_key_hash)\n+        assert_equal('0 ' + public_key_hash, rpc_result['asm'])\n+        # segwit scripts do not work nested into each other.\n+        # a nested segwit script should not be returned in the results.\n+        assert 'segwit' not in rpc_result\n+\n+        # 10) P2WSH scriptpubkey\n+        # 0 <ScriptHash>\n+        # even though this hash is of a P2PK script which is better used as bare P2WPKH, it should not matter\n+        # for the purpose of this test.\n+        rpc_result = self.nodes[0].decodescript('0020' + p2wsh_p2pk_script_hash)\n+        assert_equal('0 ' + p2wsh_p2pk_script_hash, rpc_result['asm'])\n+        # segwit scripts do not work nested into each other.\n+        # a nested segwit script should not be returned in the results.\n+        assert 'segwit' not in rpc_result\n \n     def decoderawtransaction_asm_sighashtype(self):\n         \"\"\"Test decoding scripts via RPC command \"decoderawtransaction\"."
      }
    ]
  },
  {
    "sha": "41ff9675a92f6c080a4bb171e286060ef864a803",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MWZmOTY3NWE5MmY2YzA4MGE0YmIxNzFlMjg2MDYwZWY4NjRhODAz",
    "commit": {
      "author": {
        "name": "fivepiece",
        "email": "fivepiece@users.noreply.github.com",
        "date": "2018-04-07T21:03:04Z"
      },
      "committer": {
        "name": "fivepiece",
        "email": "fivepiece@users.noreply.github.com",
        "date": "2018-04-07T21:03:04Z"
      },
      "message": "list the types of scripts we should consider for a witness program",
      "tree": {
        "sha": "3e4ff03ddf114e5cbfe6596c044ac317105cd739",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3e4ff03ddf114e5cbfe6596c044ac317105cd739"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/41ff9675a92f6c080a4bb171e286060ef864a803",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41ff9675a92f6c080a4bb171e286060ef864a803",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/41ff9675a92f6c080a4bb171e286060ef864a803",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41ff9675a92f6c080a4bb171e286060ef864a803/comments",
    "author": {
      "login": "fivepiece",
      "id": 5624963,
      "node_id": "MDQ6VXNlcjU2MjQ5NjM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5624963?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fivepiece",
      "html_url": "https://github.com/fivepiece",
      "followers_url": "https://api.github.com/users/fivepiece/followers",
      "following_url": "https://api.github.com/users/fivepiece/following{/other_user}",
      "gists_url": "https://api.github.com/users/fivepiece/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fivepiece/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fivepiece/subscriptions",
      "organizations_url": "https://api.github.com/users/fivepiece/orgs",
      "repos_url": "https://api.github.com/users/fivepiece/repos",
      "events_url": "https://api.github.com/users/fivepiece/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fivepiece/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fivepiece",
      "id": 5624963,
      "node_id": "MDQ6VXNlcjU2MjQ5NjM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5624963?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fivepiece",
      "html_url": "https://github.com/fivepiece",
      "followers_url": "https://api.github.com/users/fivepiece/followers",
      "following_url": "https://api.github.com/users/fivepiece/following{/other_user}",
      "gists_url": "https://api.github.com/users/fivepiece/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fivepiece/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fivepiece/subscriptions",
      "organizations_url": "https://api.github.com/users/fivepiece/orgs",
      "repos_url": "https://api.github.com/users/fivepiece/repos",
      "events_url": "https://api.github.com/users/fivepiece/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fivepiece/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4f933b3d23010d3b03998460290faed97cd6f236",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4f933b3d23010d3b03998460290faed97cd6f236",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4f933b3d23010d3b03998460290faed97cd6f236"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "4897a2d9724003cdf630291ae6892accc60c492e",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41ff9675a92f6c080a4bb171e286060ef864a803/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41ff9675a92f6c080a4bb171e286060ef864a803/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=41ff9675a92f6c080a4bb171e286060ef864a803",
        "patch": "@@ -565,7 +565,7 @@ UniValue decodescript(const JSONRPCRequest& request)\n         r.pushKV(\"p2sh\", EncodeDestination(CScriptID(script)));\n         // P2SH and witness programs cannot be wrapped in P2WSH, if this script\n         // is a witness program, don't return addresses for a segwit programs.\n-        if (type.get_str().find(\"witness\") == std::string::npos) {\n+        if (type.get_str() == \"pubkey\" || type.get_str() == \"pubkeyhash\" || type.get_str() == \"multisig\" || type.get_str() == \"nonstandard\") {\n             txnouttype which_type;\n             std::vector<std::vector<unsigned char>> solutions_data;\n             Solver(script, which_type, solutions_data);"
      }
    ]
  }
]