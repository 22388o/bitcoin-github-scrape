fivepiece,2018-02-01T01:21:01Z,"Again I'm only considering the edge cases after clicking ""create pull request""..  What if the script contains a checksig with an uncompressed pubkey?\nObviously not ready.",https://github.com/bitcoin/bitcoin/pull/12321#issuecomment-362126899,362126899,
meshcollider,2018-02-01T01:30:01Z,@fivepiece feel free to add [WIP] to the title of your PR if its work in progress :) It's usually fine to open up a PR before its completely ready because other contributors might like to give feedback on the approach or high level concept ACK/NACKs regardless. Thanks for helping out!,https://github.com/bitcoin/bitcoin/pull/12321#issuecomment-362128524,362128524,
fivepiece,2018-02-01T01:34:36Z,"Cheers, title changed\n(and now changed back :) )",https://github.com/bitcoin/bitcoin/pull/12321#issuecomment-362129314,362129314,
fivepiece,2018-02-01T20:24:09Z,"Ideas welcome, returning a p2wsh for a p2pk or multisig with an uncompressed pubkey can result in fund loss, then again `decodescript` already returns p2sh addresses even for complete garbage.\nWhat should this change to `decodescript` take into account when deciding whether to post a p2wsh address to the user?",https://github.com/bitcoin/bitcoin/pull/12321#issuecomment-362390742,362390742,
instagibbs,2018-02-01T22:14:12Z,"concept ACK\n\nI think returning garbage is fine. It can be something unprovably unspendable even, and I don't think it's the job of this tool to check. \n\nWonder if it's worth it to have it also return a p2sh-p2wsh version, in other words interpreting the script as a witnessscript, if applicable?",https://github.com/bitcoin/bitcoin/pull/12321#issuecomment-362420032,362420032,
fivepiece,2018-02-01T23:10:26Z,"Agreed.  Keeping the simple check that this is not a bare witness program seems to be in line with the check above it not letting p2sh be re-encoded into p2sh.\nThis commit adds p2sh-p2wsh as well. ",https://github.com/bitcoin/bitcoin/pull/12321#issuecomment-362432972,362432972,
fivepiece,2018-02-08T14:38:50Z,"@promag wouldn't moving this to `ScriptPubKeyToUniv` cause script translation to all these types of addresses to fire on `decoderawtransaction` as well?\nSorry if I misunderstood your comment.\n\nI will be looking into adding tests as well.",https://github.com/bitcoin/bitcoin/pull/12321#issuecomment-364131011,364131011,
fivepiece,2018-02-09T19:31:15Z,"I've made some changes to this:\n\n1. Segwit stuff is handled in a generic way using `GetScriptForWitness()`.  This allows to return a more appropriate p2wpkh for p2pkh and p2pk scriptpubkeys, and (currently) p2wsh for all the rest.\n2. The data returned for the segwit scripts is its own univalue object (@promag suggestion), so it includes more useful info like the segwit scriptpubkey and type,",https://github.com/bitcoin/bitcoin/pull/12321#issuecomment-364537391,364537391,
fivepiece,2018-02-16T14:39:30Z,"This is pretty much a complete rewrite taking into account @sipa's suggestion (on irc) to use the same logic from `validateaddress` in here.\n\n1. Uncompressed pubkeys are handled correctly - meaning standard scripts containing them will not be encoded in segwit scriptpubkeys.\n2. Added a few tests on top of the existing `rpc_decodescript.py`.  I couldn't find a way to easily test that segwit o",https://github.com/bitcoin/bitcoin/pull/12321#issuecomment-366252840,366252840,
instagibbs,2018-02-16T14:44:41Z,"kicked travis.\n\n> I couldn't find a way to easily test that segwit output is not returned for standard scripts with uncompressed pubkeys.\n\nhm? Your gist has examples that you could use.\n",https://github.com/bitcoin/bitcoin/pull/12321#issuecomment-366254202,366254202,
fivepiece,2018-02-16T14:48:20Z,"Specifically, I don't know how to assert that a value (say `rpc_result['segwit']`) does not exist in the returned univalue.",https://github.com/bitcoin/bitcoin/pull/12321#issuecomment-366255195,366255195,
instagibbs,2018-02-16T14:51:06Z,in python `'segwit' not in rpc_result` ?,https://github.com/bitcoin/bitcoin/pull/12321#issuecomment-366256014,366256014,
fivepiece,2018-02-16T14:54:49Z,"Ah, I was trying to bend `assert_array_result` to do the check but your way works.",https://github.com/bitcoin/bitcoin/pull/12321#issuecomment-366257069,366257069,
fivepiece,2018-02-17T09:12:23Z,Added tests for checking `'segwit'` value is not returned when inappropriate. ,https://github.com/bitcoin/bitcoin/pull/12321#issuecomment-366428315,366428315,
instagibbs,2018-03-06T14:06:50Z,"utACK https://github.com/bitcoin/bitcoin/pull/12321/commits/785bd02cda896c92190a8a9bba3d1b40fd2812b9\n\nI think you can squash almost all these commits.",https://github.com/bitcoin/bitcoin/pull/12321#issuecomment-370791833,370791833,
fivepiece,2018-03-06T19:39:12Z,"Cool, I'll squash it all into a single commit if this current change looks good, or two if it's better to separate work done on core from the tests.  Let me know which is better.",https://github.com/bitcoin/bitcoin/pull/12321#issuecomment-370902315,370902315,
instagibbs,2018-03-06T19:41:29Z,"whatever's easier to you, 1 or 2",https://github.com/bitcoin/bitcoin/pull/12321#issuecomment-370903005,370903005,
fivepiece,2018-03-06T19:55:24Z,Two commits now.  No problem changing later on if needed.,https://github.com/bitcoin/bitcoin/pull/12321#issuecomment-370907399,370907399,
fivepiece,2018-03-06T21:11:11Z,Good call.  All in a single commit now.,https://github.com/bitcoin/bitcoin/pull/12321#issuecomment-370929567,370929567,
instagibbs,2018-03-06T21:26:19Z,re-utACK https://github.com/bitcoin/bitcoin/pull/12321/commits/4f933b3d23010d3b03998460290faed97cd6f236,https://github.com/bitcoin/bitcoin/pull/12321#issuecomment-370934016,370934016,
fivepiece,2018-04-07T22:03:24Z,Updated to address @laanwj's comment,https://github.com/bitcoin/bitcoin/pull/12321#issuecomment-379502377,379502377,
laanwj,2018-04-08T17:34:45Z,"Thank you\nutACK https://github.com/bitcoin/bitcoin/pull/12321/commits/41ff9675a92f6c080a4bb171e286060ef864a803",https://github.com/bitcoin/bitcoin/pull/12321#issuecomment-379567546,379567546,
instagibbs,2018-03-06T14:05:15Z,could you generate this dynamically instead of hardcoding the long hex?,https://github.com/bitcoin/bitcoin/pull/12321#discussion_r172524899,172524899,test/functional/rpc_decodescript.py
instagibbs,2018-03-06T14:05:24Z,could you generate this dynamically instead of hardcoding the long hex?,https://github.com/bitcoin/bitcoin/pull/12321#discussion_r172524936,172524936,test/functional/rpc_decodescript.py
instagibbs,2018-03-06T20:00:55Z,just return `r` here. then remove the conditional later?,https://github.com/bitcoin/bitcoin/pull/12321#discussion_r172641751,172641751,src/rpc/rawtransaction.cpp
fivepiece,2018-03-06T20:20:47Z,"Ah I see what you mean, looking into this.",https://github.com/bitcoin/bitcoin/pull/12321#discussion_r172647200,172647200,src/rpc/rawtransaction.cpp
laanwj,2018-04-07T19:19:15Z,"Searching for a string in the type name seems brittle - if we have to work with strings here (there seems to be no other accessible way) let's explicitly list the options. e.g. according to current selection that would be\n```\n""nonstandard""\n""pubkey""\n""pubkeyhash""\n""scripthash""\n""multisig""\n""nulldata""\n```",https://github.com/bitcoin/bitcoin/pull/12321#discussion_r179925590,179925590,src/rpc/rawtransaction.cpp
