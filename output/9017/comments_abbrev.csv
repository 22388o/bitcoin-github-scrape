sipa,2016-11-04T00:29:52Z,"Why do you need GetWitnessKeyID in keystore? That doesn't seem to be something that belongs in the interface, and could just be implemented on top in the signing logic.\n",https://github.com/bitcoin/bitcoin/pull/9017#issuecomment-258314207,258314207,
instagibbs,2016-11-04T16:28:36Z,"@sipa it certainly does not need to be there and is likely inappropriate. I'm not sure exactly where to put it:\nWill require access to a wallet, and is used in rpcmisc, rpcdump, and rpcwallet.cpp.\n",https://github.com/bitcoin/bitcoin/pull/9017#issuecomment-258479838,258479838,
sipa,2016-11-04T16:31:49Z,"It only needs access to a keystore, no? Not to a wallet.\n",https://github.com/bitcoin/bitcoin/pull/9017#issuecomment-258480675,258480675,
instagibbs,2016-11-04T16:33:34Z,"@sipa yes, I misspoke \n",https://github.com/bitcoin/bitcoin/pull/9017#issuecomment-258481111,258481111,
instagibbs,2016-11-07T17:27:43Z,Moved GetWitnessKeyID outside of Keystore and addressed some nits.\n,https://github.com/bitcoin/bitcoin/pull/9017#issuecomment-258902484,258902484,
jtimon,2017-01-25T21:05:17Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/9017#issuecomment-275232558,275232558,
instagibbs,2017-02-28T21:17:37Z,"I'm going to close this.\n\nSegwit activation is a bit away so there's not much rush for this code, and we're expecting a new address format regardless so we'll likely only be supporting that.",https://github.com/bitcoin/bitcoin/pull/9017#issuecomment-283163157,283163157,
luke-jr,2017-08-18T14:54:48Z,"> we're expecting a new address format regardless so we'll likely only be supporting that.\n\nUnlikely. Current wallets, even 0.15, can't send to bech32, so we'll need to support P2SH-wrapped addresses at least initially.",https://github.com/bitcoin/bitcoin/pull/9017#issuecomment-323375819,323375819,
instagibbs,2017-08-18T16:55:46Z,Re-opening since segwit is actually activating.,https://github.com/bitcoin/bitcoin/pull/9017#issuecomment-323406140,323406140,
instagibbs,2017-08-18T17:17:26Z,"oops, @luke-jr opened his own pared-down copy, closing",https://github.com/bitcoin/bitcoin/pull/9017#issuecomment-323410967,323410967,
JeremyRubin,2016-10-25T20:41:31Z,"This is safe, but technically you are copying the vchData, which is specified to be zero_after_free memory, so you lose any guarantee that isn't somewhere in memory still.\n\nYou also may as well just directly use &scriptID (or scriptID.begin()) here rather than creating a temp.\n",https://github.com/bitcoin/bitcoin/pull/9017#discussion_r84996167,84996167,src/base58.cpp
ryanofsky,2016-11-03T17:29:22Z,"Curious when the pubkey.IsCompressed condition would not be true? Might be nice to note when the condition is expected in a comment. Alternately it might make more sense as an assertion if it's never expected, or as a separate JSON attribute like in the CKeyID handler above (line 123): `obj.push_back(Pair(""iscompressed"", vchPubKey.IsCompressed()));`\n",https://github.com/bitcoin/bitcoin/pull/9017#discussion_r86399208,86399208,src/rpc/misc.cpp
ryanofsky,2016-11-03T17:44:15Z,"Unless I'm missing something, nothing in this function seems specific to the `CCryptoKeyStore` type as opposed to a more general type like `CKeyStore`. If this is the case, it might be better to make this a `CKeyStore` member or a standalone function taking a `const CKeyStore&`.\n",https://github.com/bitcoin/bitcoin/pull/9017#discussion_r86402388,86402388,src/wallet/crypter.cpp
ryanofsky,2016-11-03T18:07:12Z,The size 20 check and explicit uint160 construction below seem like low level encoding details that are out of place here. Maybe this logic could go into to a new CScript method like: `bool CScript::GetWitnessKeyID(CKeyID& keyID)` or `bool CScript::GetV0WitnessKeyID(uint160& keyID)`.\n,https://github.com/bitcoin/bitcoin/pull/9017#discussion_r86407532,86407532,src/wallet/crypter.cpp
ryanofsky,2016-11-03T18:17:28Z,Should at least replace `&id` with id.begin()` on this line to avoid making an assumption about the layout of uint160 objects.\n,https://github.com/bitcoin/bitcoin/pull/9017#discussion_r86409948,86409948,src/base58.cpp
ryanofsky,2016-11-03T18:30:44Z,"This change makes the error message below somewhat inaccurate. Maybe replace `""Invalid Bitcoin address""` with `string(""Invalid Bitcoin address for network "") + Params().NetworkIDString()` below.\n",https://github.com/bitcoin/bitcoin/pull/9017#discussion_r86412900,86412900,src/wallet/rpcdump.cpp
ryanofsky,2016-11-03T18:34:16Z,Maybe note in commit description that this change is moveonly (no code changes).\n,https://github.com/bitcoin/bitcoin/pull/9017#discussion_r86413633,86413633,src/wallet/rpcwallet.cpp
ryanofsky,2016-11-03T18:47:08Z,"It might be easier for callers if instead of exposing the `Witnessifier` class in wallet.h, you expose a simpler function that can be called by both `importprivkey` and `addwitnessaddress` and hides all the boost visitor implementation details:\n\n`bool AddWitnessCScript(CTxDestination dest, CScriptID &id);`\n\nThis could even be a CWallet member function.\n",https://github.com/bitcoin/bitcoin/pull/9017#discussion_r86416529,86416529,src/wallet/wallet.h
ryanofsky,2016-11-03T19:13:10Z,This block of code seems very similar to code in `addwitnessaddress`:\n\nhttps://github.com/instagibbs/bitcoin/blob/1237cee5ab3506188fec78d33577f49ac78cd570/src/wallet/rpcwallet.cpp#L1053\n\nexcept this ignores the apply_visitor return value and passes a nonempty strlabel to SetAddressBook. Can both places be changed to call a common function?\n\nAlso is it ok to ignore the apply_visitor return va,https://github.com/bitcoin/bitcoin/pull/9017#discussion_r86421555,86421555,src/wallet/rpcdump.cpp
ryanofsky,2016-11-03T19:32:01Z,Would it be useful to callers to have an error message in the case where an update to the address book is skipped because this condition is false? Either way an explanatory comment might be good here.\n,https://github.com/bitcoin/bitcoin/pull/9017#discussion_r86424969,86424969,src/wallet/rpcdump.cpp
instagibbs,2016-11-03T19:56:37Z,"True an assert may make the most sense here. It really shouldn't happen, and if it is we want to find out as soon as possible to avoid loss of funds.\n",https://github.com/bitcoin/bitcoin/pull/9017#discussion_r86429536,86429536,src/rpc/misc.cpp
instagibbs,2016-11-03T19:58:22Z,"CKeyStore doesn't have access to keys if they're crypted.\n\nA standalone function may make more sense, I'm really ambivalent about this.\n",https://github.com/bitcoin/bitcoin/pull/9017#discussion_r86429920,86429920,src/wallet/crypter.cpp
instagibbs,2016-11-04T13:33:36Z,"Hmm, actually you're right, nothing in particular needs a CCryptoKeyStore. I thoroughly convinced myself otherwise previously somehow. Regardless, I'll divorce it from the keystore altogether.\n",https://github.com/bitcoin/bitcoin/pull/9017#discussion_r86545230,86545230,src/wallet/crypter.cpp
instagibbs,2016-11-04T14:10:04Z,"Not sure I should over-optimize this for 2 instances. Although I'm also getting concerned about the logic in this commit.\n\n1) If the user already has the p2pkh key in address book but not the nested version, it won't rescan(just a bug I can fix)\n2) I'm concerned of the user flow here. As soon as segwit activates it starts adding segwit addresses to the address book. This kind of behavior would ",https://github.com/bitcoin/bitcoin/pull/9017#discussion_r86552294,86552294,src/wallet/rpcdump.cpp
instagibbs,2016-11-04T14:19:00Z,"Sounds like a good refactor for another PR, especially if I get rid of importprivkey commit. I'll drop this commit as well otherwise.\n",https://github.com/bitcoin/bitcoin/pull/9017#discussion_r86554049,86554049,src/wallet/wallet.h
luke-jr,2017-02-03T05:28:27Z,I'm not sure we want to extend the current message signing to new address formats as-is. Maybe better to leave this out for now...,https://github.com/bitcoin/bitcoin/pull/9017#discussion_r99279048,99279048,src/rpc/misc.cpp
kallewoof,2017-02-28T20:18:00Z,"A bit hard to interpret this line. Maybe\n```C++\n        if (pwalletMain &&\n            (address.GetKeyID(keyID) || (address.GetScriptID(scriptID) && GetWitnessKeyID(pwalletMain, scriptID, keyID))) &&\n            pwalletMain->mapKeyMetadata.count(keyID) &&\n            !pwalletMain->mapKeyMetadata[keyID].hdKeypath.empty())\n```\nI also think a simple inline method like\n```C++\ninline ",https://github.com/bitcoin/bitcoin/pull/9017#discussion_r103542630,103542630,src/rpc/misc.cpp
kallewoof,2017-02-28T20:49:35Z,"I know this is done a lot elsewhere, but I think `Get` prefixed methods should return the result, not store it in a by-ref parameter. It's super easy to get confused especially with lines like `if (GetX(y)) ...`, where you presume it's some operation based on `y` returning an `x`, when in reality `y` is set and something else is returned.\n\nMaybe use a different verb like `FetchScriptID` or `Ma",https://github.com/bitcoin/bitcoin/pull/9017#discussion_r103548552,103548552,src/base58.cpp
kallewoof,2017-02-28T20:50:48Z,See previous comment regarding `Get` prefix.,https://github.com/bitcoin/bitcoin/pull/9017#discussion_r103548776,103548776,src/wallet/wallet.cpp
kallewoof,2017-02-28T21:03:39Z,"Assuming an inline method as described on line 216 is added,\n```C++\n        if (!address.GetKeyID(keyID) && (!address.GetScriptID(scriptID) || !GetWitnessKeyID(pwalletMain, scriptID, keyID)))\n```\n->\n```C++\n        if (!FetchWalletKeyID(pwalletMain, address, keyID))\n```\n",https://github.com/bitcoin/bitcoin/pull/9017#discussion_r103551019,103551019,src/rpc/misc.cpp
kallewoof,2017-02-28T21:10:51Z,"If I read this right, the logic is the same as previous two cases, except you are preferring witness style fetch over address.GetKeyID fetch. If this is not done for a specific reason, you can\n```C++\n    if (!FetchWalletKeyID(pwalletMain, address, keyID)) {\n```\n",https://github.com/bitcoin/bitcoin/pull/9017#discussion_r103552331,103552331,src/wallet/rpcdump.cpp
kallewoof,2017-02-28T21:11:50Z,"```C++\n    if (!FetchWalletKeyID(pwalletMain, addr, keyID))\n```\n",https://github.com/bitcoin/bitcoin/pull/9017#discussion_r103552499,103552499,src/wallet/rpcwallet.cpp
