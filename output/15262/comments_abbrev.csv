DrahtBot,2019-01-25T19:34:10Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#15320](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15320.html) ([Do Not Merge] break < Qt5.6 compatibility ",https://github.com/bitcoin/bitcoin/pull/15262#issuecomment-457697616,457697616,
ken2812221,2019-02-10T09:50:01Z,"You could also replace `boost::shared_mutex` with `std::shared_timed_mutex` becuase they are the same thing.\nhttps://github.com/bitcoin/bitcoin/blob/2945492424934fa360f86b116184ee8e34f19d0a/src/script/sigcache.cpp#L30",https://github.com/bitcoin/bitcoin/pull/15262#issuecomment-462118343,462118343,
gmaxwell,2019-02-11T20:49:11Z,"NAK.   As far as I know, C++14 is not very interesting (C++17 OTOH...) and it is still incompatible with the latest releases of widely used supported GNU/Linux distros as pointed out on #13356.\n\nMoving the minimum required language requires balancing the negative trade-offs of incompatibility with the positive benefits of the new language features.   I'm not aware of any C++14 features that wo",https://github.com/bitcoin/bitcoin/pull/15262#issuecomment-462488567,462488567,
laanwj,2019-02-12T09:14:22Z,"I agree with @gmaxwell here. Would have been nice to have this discussion (say, in a IRC meeting) before spending a lot of time polishing, but it's true, C++14 doesn't bring much, and will be an annoyance to users which suddenly need a newer compiler.",https://github.com/bitcoin/bitcoin/pull/15262#issuecomment-462679116,462679116,
luke-jr,2019-02-12T14:33:57Z,There was plenty of discussion in #13356...,https://github.com/bitcoin/bitcoin/pull/15262#issuecomment-462782086,462782086,
MarcoFalke,2019-10-01T16:09:12Z,"Rebase, maybe?",https://github.com/bitcoin/bitcoin/pull/15262#issuecomment-537109431,537109431,
laanwj,2019-10-02T08:04:25Z,"Did anything change here? If not, I still don't think c++14 is worth it.",https://github.com/bitcoin/bitcoin/pull/15262#issuecomment-537383682,537383682,
practicalswift,2019-10-02T08:06:00Z,@laanwj This happened: https://github.com/bitcoin/bitcoin/issues/13356#issuecomment-537024144 + https://github.com/bitcoin/bitcoin/pull/15262#issuecomment-537109431,https://github.com/bitcoin/bitcoin/pull/15262#issuecomment-537384220,537384220,
elichai,2019-10-03T14:36:31Z,I would argue for skipping C++14 directly to 17 (assuming all stable distros ship with GCC7+ already)  CC https://github.com/bitcoin/bitcoin/issues/16684,https://github.com/bitcoin/bitcoin/pull/15262#issuecomment-537973615,537973615,
MarcoFalke,2019-10-03T14:43:57Z,"Makes sense, closing then",https://github.com/bitcoin/bitcoin/pull/15262#issuecomment-537976912,537976912,
laanwj,2019-10-08T10:53:25Z,"Agree w.r.t. skipping directly to 17, when possible/appropriate.\n\nOn Thu, Oct 3, 2019, 16:36 Elichai Turkel <notifications@github.com> wrote:\n\n> I would argue for skipping C++14 directly to 17 (assuming all stable\n> distros ship with GCC7+ already) CC #16684\n> <https://github.com/bitcoin/bitcoin/issues/16684>\n>\n> â€”\n> You are receiving this because you were mentioned.\n> Reply to this emai",https://github.com/bitcoin/bitcoin/pull/15262#issuecomment-539459863,539459863,
MarcoFalke,2019-01-25T19:35:56Z,I'd prefer to defer this stylistic-only scripted diff to avoid merge conflicts,https://github.com/bitcoin/bitcoin/pull/15262#discussion_r251110176,251110176,src/bench/bench_bitcoin.cpp
practicalswift,2019-01-26T01:23:04Z,Good point. Now fixed. Leaving one use of `std::make_unique` to prove that we're using C++14 :-),https://github.com/bitcoin/bitcoin/pull/15262#discussion_r251181125,251181125,src/bench/bench_bitcoin.cpp
ken2812221,2019-01-26T03:37:13Z,"~~Could add `deprecated` attribute and remove them in the following few PRs.~~\nLooks like MSVC would treat it as an error.",https://github.com/bitcoin/bitcoin/pull/15262#discussion_r251186717,251186717,src/util/memory.h
fanquake,2019-01-26T03:49:11Z,"Shouldn't this be 3.4+? Looking at [C++ Support in Clang](https://clang.llvm.org/cxx_status.html):\n> Clang 3.4 and later implement all of the ISO C++ 2014 standard.\nYou can use Clang in C++14 mode with the -std=c++14 option (use -std=c++1y in Clang 3.4 and earlier).",https://github.com/bitcoin/bitcoin/pull/15262#discussion_r251186950,251186950,doc/dependencies.md
fanquake,2019-01-26T04:06:33Z,"I think this should be GCC 5+, see [C++ Standards Support in GCC](https://gcc.gnu.org/projects/cxx-status.html#cxx14).",https://github.com/bitcoin/bitcoin/pull/15262#discussion_r251187290,251187290,doc/dependencies.md
practicalswift,2019-01-26T08:23:49Z,When trying out the different versions I tested by checking which versions accepted `-std=c++11` and handled `std::make_unique` (as a sanity check). Do we want to go with the `-std=c++1y` route instead of `-std=c++11`?,https://github.com/bitcoin/bitcoin/pull/15262#discussion_r251192368,251192368,doc/dependencies.md
practicalswift,2019-01-26T08:28:12Z,"Ah, full C++14 support came in gcc 5 although gcc 4.9+ accepted `-std=c++11`. Changing. Thanks!",https://github.com/bitcoin/bitcoin/pull/15262#discussion_r251192461,251192461,doc/dependencies.md
practicalswift,2019-01-26T08:29:30Z,What would MSVC treat as an error? :-),https://github.com/bitcoin/bitcoin/pull/15262#discussion_r251192499,251192499,src/util/memory.h
ken2812221,2019-01-26T08:43:22Z,It would throw warning [C4996](https://docs.microsoft.com/en-us/cpp/error-messages/compiler-warnings/compiler-warning-level-3-c4996) and we treat it as an error in MSVC. Maybe you could add 4996 in MSVC's warning ignore list.,https://github.com/bitcoin/bitcoin/pull/15262#discussion_r251192835,251192835,src/util/memory.h
practicalswift,2019-01-26T08:46:47Z,@ken2812221 My suggestion is that we simply remove `MakeUnique` in a scripted-diff follow-up PR as soon as this PR is merged as discussed in https://github.com/bitcoin/bitcoin/pull/15262#discussion_r251110176. Makes sense?,https://github.com/bitcoin/bitcoin/pull/15262#discussion_r251192907,251192907,src/util/memory.h
laanwj,2019-01-28T10:45:22Z,"> @ken2812221 My suggestion is that we simply remove MakeUnique in a scripted-diff follow-up PR as soon as this PR is merged as discussed in #15262 (comment). Makes sense?\n\nTo be honest, if it's a scripted diff we could just as well do it in one go (in a sep commit) here. No need to drag this out, it's not controversial in any way once we've decided to go to C++14.",https://github.com/bitcoin/bitcoin/pull/15262#discussion_r251361307,251361307,src/util/memory.h
practicalswift,2019-01-28T11:57:00Z,@laanwj That's how I did it initially in this PR but @MarcoFalke suggested it should be done in a follow-up PR -- see comment https://github.com/bitcoin/bitcoin/pull/15262#discussion_r251110176 :-),https://github.com/bitcoin/bitcoin/pull/15262#discussion_r251385274,251385274,src/util/memory.h
MarcoFalke,2019-01-28T15:42:32Z,"The rationale behind this was that any pull requests that are expected to be open for ""longer"" should minimize any (silent) merge conflicts.",https://github.com/bitcoin/bitcoin/pull/15262#discussion_r251469705,251469705,src/util/memory.h
practicalswift,2019-01-28T19:10:44Z,I agree with that @MarcoFalke. Especially since it looks like this PR will be open for quite a while?,https://github.com/bitcoin/bitcoin/pull/15262#discussion_r251553111,251553111,src/util/memory.h
Empact,2019-02-01T06:19:30Z,"The `-std=c++1y` route makes sense to me, may as well enforce that which we require.",https://github.com/bitcoin/bitcoin/pull/15262#discussion_r252943672,252943672,doc/dependencies.md
laanwj,2019-02-02T10:52:47Z,"> The rationale behind this was that any pull requests that are expected to be open for ""longer"" should minimize any (silent) merge conflicts.\n\nMostly I'd agree. But OTOH if the merge conflict is in the scripted-diff part then rebasing should be trivial.\n\nI don't like the prospect of follow-up PR after follow-up PR. Better IMO to do it at once. But okay.\n\n> I agree with that @MarcoFalk",https://github.com/bitcoin/bitcoin/pull/15262#discussion_r253262001,253262001,src/util/memory.h
