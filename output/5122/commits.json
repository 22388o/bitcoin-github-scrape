[
  {
    "sha": "ea120928bb033089eaed2e7ac2f544c6812f3dd1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYTEyMDkyOGJiMDMzMDg5ZWFlZDJlN2FjMmY1NDRjNjgxMmYzZGQx",
    "commit": {
      "author": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2014-10-15T13:49:01Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2014-10-23T08:25:23Z"
      },
      "message": "fix indentation",
      "tree": {
        "sha": "0b416fe753d104e86310c01f9887debbe32696a9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0b416fe753d104e86310c01f9887debbe32696a9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ea120928bb033089eaed2e7ac2f544c6812f3dd1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea120928bb033089eaed2e7ac2f544c6812f3dd1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ea120928bb033089eaed2e7ac2f544c6812f3dd1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea120928bb033089eaed2e7ac2f544c6812f3dd1/comments",
    "author": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "25cc1cf8dc03b9ba0ae886d354855adc207b5b6e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/25cc1cf8dc03b9ba0ae886d354855adc207b5b6e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/25cc1cf8dc03b9ba0ae886d354855adc207b5b6e"
      }
    ],
    "stats": {
      "total": 82,
      "additions": 41,
      "deletions": 41
    },
    "files": [
      {
        "sha": "c64ae732deab7eca803e49252100091403c83b14",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 41,
        "deletions": 41,
        "changes": 82,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ea120928bb033089eaed2e7ac2f544c6812f3dd1/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ea120928bb033089eaed2e7ac2f544c6812f3dd1/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=ea120928bb033089eaed2e7ac2f544c6812f3dd1",
        "patch": "@@ -1972,51 +1972,51 @@ static bool ActivateBestChainStep(CValidationState &state, CBlockIndex *pindexMo\n     bool fContinue = true;\n     int nHeight = pindexFork ? pindexFork->nHeight : -1;\n     while (fContinue && nHeight != pindexMostWork->nHeight) {\n-    // Don't iterate the entire list of potential improvements toward the best tip, as we likely only need\n-    // a few blocks along the way.\n-    int nTargetHeight = std::min(nHeight + 32, pindexMostWork->nHeight);\n-    vpindexToConnect.clear();\n-    vpindexToConnect.reserve(nTargetHeight - nHeight);\n-    CBlockIndex *pindexIter = pindexMostWork->GetAncestor(nTargetHeight);\n-    while (pindexIter && pindexIter->nHeight != nHeight) {\n-        vpindexToConnect.push_back(pindexIter);\n-        pindexIter = pindexIter->pprev;\n-    }\n-    nHeight = nTargetHeight;\n-\n-    // Connect new blocks.\n-    BOOST_REVERSE_FOREACH(CBlockIndex *pindexConnect, vpindexToConnect) {\n-        if (!ConnectTip(state, pindexConnect, pindexConnect == pindexMostWork ? pblock : NULL)) {\n-            if (state.IsInvalid()) {\n-                // The block violates a consensus rule.\n-                if (!state.CorruptionPossible())\n-                    InvalidChainFound(vpindexToConnect.back());\n-                state = CValidationState();\n-                fInvalidFound = true;\n-                fContinue = false;\n-                break;\n+        // Don't iterate the entire list of potential improvements toward the best tip, as we likely only need\n+        // a few blocks along the way.\n+        int nTargetHeight = std::min(nHeight + 32, pindexMostWork->nHeight);\n+        vpindexToConnect.clear();\n+        vpindexToConnect.reserve(nTargetHeight - nHeight);\n+        CBlockIndex *pindexIter = pindexMostWork->GetAncestor(nTargetHeight);\n+        while (pindexIter && pindexIter->nHeight != nHeight) {\n+            vpindexToConnect.push_back(pindexIter);\n+            pindexIter = pindexIter->pprev;\n+        }\n+        nHeight = nTargetHeight;\n+\n+        // Connect new blocks.\n+        BOOST_REVERSE_FOREACH(CBlockIndex *pindexConnect, vpindexToConnect) {\n+            if (!ConnectTip(state, pindexConnect, pindexConnect == pindexMostWork ? pblock : NULL)) {\n+                if (state.IsInvalid()) {\n+                    // The block violates a consensus rule.\n+                    if (!state.CorruptionPossible())\n+                        InvalidChainFound(vpindexToConnect.back());\n+                    state = CValidationState();\n+                    fInvalidFound = true;\n+                    fContinue = false;\n+                    break;\n+                } else {\n+                    // A system error occurred (disk space, database error, ...).\n+                    return false;\n+                }\n             } else {\n-                // A system error occurred (disk space, database error, ...).\n-                return false;\n-            }\n-        } else {\n-            // Delete all entries in setBlockIndexCandidates that are worse than our new current block.\n-            // Note that we can't delete the current block itself, as we may need to return to it later in case a\n-            // reorganization to a better block fails.\n-            std::set<CBlockIndex*, CBlockIndexWorkComparator>::iterator it = setBlockIndexCandidates.begin();\n-            while (setBlockIndexCandidates.value_comp()(*it, chainActive.Tip())) {\n-                setBlockIndexCandidates.erase(it++);\n-            }\n-            // Either the current tip or a successor of it we're working towards is left in setBlockIndexCandidates.\n-            assert(!setBlockIndexCandidates.empty());\n-            if (!pindexOldTip || chainActive.Tip()->nChainWork > pindexOldTip->nChainWork) {\n-                // We're in a better position than we were. Return temporarily to release the lock.\n-                fContinue = false;\n-                break;\n+                // Delete all entries in setBlockIndexCandidates that are worse than our new current block.\n+                // Note that we can't delete the current block itself, as we may need to return to it later in case a\n+                // reorganization to a better block fails.\n+                std::set<CBlockIndex*, CBlockIndexWorkComparator>::iterator it = setBlockIndexCandidates.begin();\n+                while (setBlockIndexCandidates.value_comp()(*it, chainActive.Tip())) {\n+                    setBlockIndexCandidates.erase(it++);\n+                }\n+                // Either the current tip or a successor of it we're working towards is left in setBlockIndexCandidates.\n+                assert(!setBlockIndexCandidates.empty());\n+                if (!pindexOldTip || chainActive.Tip()->nChainWork > pindexOldTip->nChainWork) {\n+                    // We're in a better position than we were. Return temporarily to release the lock.\n+                    fContinue = false;\n+                    break;\n+                }\n             }\n         }\n     }\n-    }\n \n     // Callbacks/notifications for a new best chain.\n     if (fInvalidFound)"
      }
    ]
  }
]