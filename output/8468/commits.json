[
  {
    "sha": "09a0658689149caa66c1e5cb4487ce31eeaea634",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowOWEwNjU4Njg5MTQ5Y2FhNjZjMWU1Y2I0NDg3Y2UzMWVlYWVhNjM0",
    "commit": {
      "author": {
        "name": "Pavel Jan\u00edk",
        "email": "Pavel@Janik.cz",
        "date": "2016-08-05T19:52:07Z"
      },
      "committer": {
        "name": "Pavel Jan\u00edk",
        "email": "Pavel@Janik.cz",
        "date": "2016-09-30T06:08:48Z"
      },
      "message": "Do not shadow member variables in serialization",
      "tree": {
        "sha": "edb7c0f746830a69de6bb01d2294ffdbeb4b3d0a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/edb7c0f746830a69de6bb01d2294ffdbeb4b3d0a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/09a0658689149caa66c1e5cb4487ce31eeaea634",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/09a0658689149caa66c1e5cb4487ce31eeaea634",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/09a0658689149caa66c1e5cb4487ce31eeaea634",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/09a0658689149caa66c1e5cb4487ce31eeaea634/comments",
    "author": {
      "login": "paveljanik",
      "id": 6848764,
      "node_id": "MDQ6VXNlcjY4NDg3NjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6848764?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paveljanik",
      "html_url": "https://github.com/paveljanik",
      "followers_url": "https://api.github.com/users/paveljanik/followers",
      "following_url": "https://api.github.com/users/paveljanik/following{/other_user}",
      "gists_url": "https://api.github.com/users/paveljanik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paveljanik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paveljanik/subscriptions",
      "organizations_url": "https://api.github.com/users/paveljanik/orgs",
      "repos_url": "https://api.github.com/users/paveljanik/repos",
      "events_url": "https://api.github.com/users/paveljanik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paveljanik/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "paveljanik",
      "id": 6848764,
      "node_id": "MDQ6VXNlcjY4NDg3NjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6848764?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paveljanik",
      "html_url": "https://github.com/paveljanik",
      "followers_url": "https://api.github.com/users/paveljanik/followers",
      "following_url": "https://api.github.com/users/paveljanik/following{/other_user}",
      "gists_url": "https://api.github.com/users/paveljanik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paveljanik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paveljanik/subscriptions",
      "organizations_url": "https://api.github.com/users/paveljanik/orgs",
      "repos_url": "https://api.github.com/users/paveljanik/repos",
      "events_url": "https://api.github.com/users/paveljanik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paveljanik/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f560d9564f74ae8f4b449121b22703b23db3d010",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f560d9564f74ae8f4b449121b22703b23db3d010",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f560d9564f74ae8f4b449121b22703b23db3d010"
      }
    ],
    "stats": {
      "total": 100,
      "additions": 50,
      "deletions": 50
    },
    "files": [
      {
        "sha": "99b7e5e97ffa90d0f73eec58c804d927ef5cec0a",
        "filename": "src/addrdb.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/09a0658689149caa66c1e5cb4487ce31eeaea634/src/addrdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/09a0658689149caa66c1e5cb4487ce31eeaea634/src/addrdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrdb.h?ref=09a0658689149caa66c1e5cb4487ce31eeaea634",
        "patch": "@@ -46,7 +46,7 @@ class CBanEntry\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int _nVersion) {\n         READWRITE(this->nVersion);\n         READWRITE(nCreateTime);\n         READWRITE(nBanUntil);"
      },
      {
        "sha": "fe3c36ed1fe7d6653d9723c5fafb5d469ffb2ea6",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 17,
        "deletions": 17,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/09a0658689149caa66c1e5cb4487ce31eeaea634/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/09a0658689149caa66c1e5cb4487ce31eeaea634/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=09a0658689149caa66c1e5cb4487ce31eeaea634",
        "patch": "@@ -153,7 +153,7 @@ class CCoins\n         return fCoinBase;\n     }\n \n-    unsigned int GetSerializeSize(int nType, int nVersion) const {\n+    unsigned int GetSerializeSize(int nType, int _nVersion) const {\n         unsigned int nSize = 0;\n         unsigned int nMaskSize = 0, nMaskCode = 0;\n         CalcMaskSize(nMaskSize, nMaskCode);\n@@ -162,56 +162,56 @@ class CCoins\n         assert(fFirst || fSecond || nMaskCode);\n         unsigned int nCode = 8*(nMaskCode - (fFirst || fSecond ? 0 : 1)) + (fCoinBase ? 1 : 0) + (fFirst ? 2 : 0) + (fSecond ? 4 : 0);\n         // version\n-        nSize += ::GetSerializeSize(VARINT(this->nVersion), nType, nVersion);\n+        nSize += ::GetSerializeSize(VARINT(this->nVersion), nType, _nVersion);\n         // size of header code\n-        nSize += ::GetSerializeSize(VARINT(nCode), nType, nVersion);\n+        nSize += ::GetSerializeSize(VARINT(nCode), nType, _nVersion);\n         // spentness bitmask\n         nSize += nMaskSize;\n         // txouts themself\n         for (unsigned int i = 0; i < vout.size(); i++)\n             if (!vout[i].IsNull())\n-                nSize += ::GetSerializeSize(CTxOutCompressor(REF(vout[i])), nType, nVersion);\n+                nSize += ::GetSerializeSize(CTxOutCompressor(REF(vout[i])), nType, _nVersion);\n         // height\n-        nSize += ::GetSerializeSize(VARINT(nHeight), nType, nVersion);\n+        nSize += ::GetSerializeSize(VARINT(nHeight), nType, _nVersion);\n         return nSize;\n     }\n \n     template<typename Stream>\n-    void Serialize(Stream &s, int nType, int nVersion) const {\n+    void Serialize(Stream &s, int nType, int _nVersion) const {\n         unsigned int nMaskSize = 0, nMaskCode = 0;\n         CalcMaskSize(nMaskSize, nMaskCode);\n         bool fFirst = vout.size() > 0 && !vout[0].IsNull();\n         bool fSecond = vout.size() > 1 && !vout[1].IsNull();\n         assert(fFirst || fSecond || nMaskCode);\n         unsigned int nCode = 8*(nMaskCode - (fFirst || fSecond ? 0 : 1)) + (fCoinBase ? 1 : 0) + (fFirst ? 2 : 0) + (fSecond ? 4 : 0);\n         // version\n-        ::Serialize(s, VARINT(this->nVersion), nType, nVersion);\n+        ::Serialize(s, VARINT(this->nVersion), nType, _nVersion);\n         // header code\n-        ::Serialize(s, VARINT(nCode), nType, nVersion);\n+        ::Serialize(s, VARINT(nCode), nType, _nVersion);\n         // spentness bitmask\n         for (unsigned int b = 0; b<nMaskSize; b++) {\n             unsigned char chAvail = 0;\n             for (unsigned int i = 0; i < 8 && 2+b*8+i < vout.size(); i++)\n                 if (!vout[2+b*8+i].IsNull())\n                     chAvail |= (1 << i);\n-            ::Serialize(s, chAvail, nType, nVersion);\n+            ::Serialize(s, chAvail, nType, _nVersion);\n         }\n         // txouts themself\n         for (unsigned int i = 0; i < vout.size(); i++) {\n             if (!vout[i].IsNull())\n-                ::Serialize(s, CTxOutCompressor(REF(vout[i])), nType, nVersion);\n+                ::Serialize(s, CTxOutCompressor(REF(vout[i])), nType, _nVersion);\n         }\n         // coinbase height\n-        ::Serialize(s, VARINT(nHeight), nType, nVersion);\n+        ::Serialize(s, VARINT(nHeight), nType, _nVersion);\n     }\n \n     template<typename Stream>\n-    void Unserialize(Stream &s, int nType, int nVersion) {\n+    void Unserialize(Stream &s, int nType, int _nVersion) {\n         unsigned int nCode = 0;\n         // version\n-        ::Unserialize(s, VARINT(this->nVersion), nType, nVersion);\n+        ::Unserialize(s, VARINT(this->nVersion), nType, _nVersion);\n         // header code\n-        ::Unserialize(s, VARINT(nCode), nType, nVersion);\n+        ::Unserialize(s, VARINT(nCode), nType, _nVersion);\n         fCoinBase = nCode & 1;\n         std::vector<bool> vAvail(2, false);\n         vAvail[0] = (nCode & 2) != 0;\n@@ -220,7 +220,7 @@ class CCoins\n         // spentness bitmask\n         while (nMaskCode > 0) {\n             unsigned char chAvail = 0;\n-            ::Unserialize(s, chAvail, nType, nVersion);\n+            ::Unserialize(s, chAvail, nType, _nVersion);\n             for (unsigned int p = 0; p < 8; p++) {\n                 bool f = (chAvail & (1 << p)) != 0;\n                 vAvail.push_back(f);\n@@ -232,10 +232,10 @@ class CCoins\n         vout.assign(vAvail.size(), CTxOut());\n         for (unsigned int i = 0; i < vAvail.size(); i++) {\n             if (vAvail[i])\n-                ::Unserialize(s, REF(CTxOutCompressor(vout[i])), nType, nVersion);\n+                ::Unserialize(s, REF(CTxOutCompressor(vout[i])), nType, _nVersion);\n         }\n         // coinbase height\n-        ::Unserialize(s, VARINT(nHeight), nType, nVersion);\n+        ::Unserialize(s, VARINT(nHeight), nType, _nVersion);\n         Cleanup();\n     }\n "
      },
      {
        "sha": "68ed54d28744ca0999961d7829f3bd58c6582d31",
        "filename": "src/primitives/block.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/09a0658689149caa66c1e5cb4487ce31eeaea634/src/primitives/block.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/09a0658689149caa66c1e5cb4487ce31eeaea634/src/primitives/block.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.h?ref=09a0658689149caa66c1e5cb4487ce31eeaea634",
        "patch": "@@ -36,7 +36,7 @@ class CBlockHeader\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int _nVersion) {\n         READWRITE(this->nVersion);\n         READWRITE(hashPrevBlock);\n         READWRITE(hashMerkleRoot);"
      },
      {
        "sha": "030b5ae7b7e305c7ad208b8e9639a50ed9b53625",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/09a0658689149caa66c1e5cb4487ce31eeaea634/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/09a0658689149caa66c1e5cb4487ce31eeaea634/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=09a0658689149caa66c1e5cb4487ce31eeaea634",
        "patch": "@@ -387,8 +387,8 @@ class CTransaction\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        SerializeTransaction(*this, s, ser_action, nType, nVersion);\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int _nVersion) {\n+        SerializeTransaction(*this, s, ser_action, nType, _nVersion);\n         if (ser_action.ForRead()) {\n             UpdateHash();\n         }\n@@ -458,8 +458,8 @@ struct CMutableTransaction\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        SerializeTransaction(*this, s, ser_action, nType, nVersion);\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int _nVersion) {\n+        SerializeTransaction(*this, s, ser_action, nType, _nVersion);\n     }\n \n     /** Compute the hash of this CMutableTransaction. This is computed on the"
      },
      {
        "sha": "5a9bd49413041ea4741f0d6dbaa8e3835da6e2fe",
        "filename": "src/qt/recentrequeststablemodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/09a0658689149caa66c1e5cb4487ce31eeaea634/src/qt/recentrequeststablemodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/09a0658689149caa66c1e5cb4487ce31eeaea634/src/qt/recentrequeststablemodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/recentrequeststablemodel.h?ref=09a0658689149caa66c1e5cb4487ce31eeaea634",
        "patch": "@@ -27,7 +27,7 @@ class RecentRequestEntry\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int _nVersion) {\n         unsigned int nDate = date.toTime_t();\n \n         READWRITE(this->nVersion);"
      },
      {
        "sha": "f3d6efea7dbc879fc0084a31f0a9153622a4c4e3",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/09a0658689149caa66c1e5cb4487ce31eeaea634/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/09a0658689149caa66c1e5cb4487ce31eeaea634/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=09a0658689149caa66c1e5cb4487ce31eeaea634",
        "patch": "@@ -65,7 +65,7 @@ class SendCoinsRecipient\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int _nVersion) {\n         std::string sAddress = address.toStdString();\n         std::string sLabel = label.toStdString();\n         std::string sMessage = message.toStdString();"
      },
      {
        "sha": "8f8b6b50c9c06c20cb7de87a8840c00ce237ba70",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/09a0658689149caa66c1e5cb4487ce31eeaea634/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/09a0658689149caa66c1e5cb4487ce31eeaea634/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=09a0658689149caa66c1e5cb4487ce31eeaea634",
        "patch": "@@ -169,18 +169,18 @@ enum\n  * added as members. \n  */\n #define ADD_SERIALIZE_METHODS                                                          \\\n-    size_t GetSerializeSize(int nType, int nVersion) const {                         \\\n-        CSizeComputer s(nType, nVersion);                                            \\\n-        NCONST_PTR(this)->SerializationOp(s, CSerActionSerialize(), nType, nVersion);\\\n+    size_t GetSerializeSize(int nType, int _nVersion) const {                         \\\n+        CSizeComputer s(nType, _nVersion);                                            \\\n+        NCONST_PTR(this)->SerializationOp(s, CSerActionSerialize(), nType, _nVersion);\\\n         return s.size();                                                             \\\n     }                                                                                \\\n     template<typename Stream>                                                        \\\n-    void Serialize(Stream& s, int nType, int nVersion) const {                       \\\n-        NCONST_PTR(this)->SerializationOp(s, CSerActionSerialize(), nType, nVersion);\\\n+    void Serialize(Stream& s, int nType, int _nVersion) const {                       \\\n+        NCONST_PTR(this)->SerializationOp(s, CSerActionSerialize(), nType, _nVersion);\\\n     }                                                                                \\\n     template<typename Stream>                                                        \\\n-    void Unserialize(Stream& s, int nType, int nVersion) {                           \\\n-        SerializationOp(s, CSerActionUnserialize(), nType, nVersion);                \\\n+    void Unserialize(Stream& s, int nType, int _nVersion) {                           \\\n+        SerializationOp(s, CSerActionUnserialize(), nType, _nVersion);                \\\n     }\n \n /*\n@@ -472,7 +472,7 @@ class LimitedString\n protected:\n     std::string& string;\n public:\n-    LimitedString(std::string& string) : string(string) {}\n+    LimitedString(std::string& _string) : string(_string) {}\n \n     template<typename Stream>\n     void Unserialize(Stream& s, int, int=0)\n@@ -943,9 +943,9 @@ class CSizeComputer\n \n     CSizeComputer(int nTypeIn, int nVersionIn) : nSize(0), nType(nTypeIn), nVersion(nVersionIn) {}\n \n-    CSizeComputer& write(const char *psz, size_t nSize)\n+    CSizeComputer& write(const char *psz, size_t _nSize)\n     {\n-        this->nSize += nSize;\n+        this->nSize += _nSize;\n         return *this;\n     }\n "
      },
      {
        "sha": "b1121c1df5eb05276828fdfba2057cb2d48b39d4",
        "filename": "src/streams.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/09a0658689149caa66c1e5cb4487ce31eeaea634/src/streams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/09a0658689149caa66c1e5cb4487ce31eeaea634/src/streams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/streams.h?ref=09a0658689149caa66c1e5cb4487ce31eeaea634",
        "patch": "@@ -297,7 +297,7 @@ class CDataStream\n     }\n \n     template<typename Stream>\n-    void Serialize(Stream& s, int nType, int nVersion) const\n+    void Serialize(Stream& s, int _nType, int _nVersion) const\n     {\n         // Special case: stream << stream concatenates like stream += stream\n         if (!vch.empty())"
      },
      {
        "sha": "5e700d506a01f20bde5275879306568c01702487",
        "filename": "src/undo.h",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/09a0658689149caa66c1e5cb4487ce31eeaea634/src/undo.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/09a0658689149caa66c1e5cb4487ce31eeaea634/src/undo.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/undo.h?ref=09a0658689149caa66c1e5cb4487ce31eeaea634",
        "patch": "@@ -27,29 +27,29 @@ class CTxInUndo\n     CTxInUndo() : txout(), fCoinBase(false), nHeight(0), nVersion(0) {}\n     CTxInUndo(const CTxOut &txoutIn, bool fCoinBaseIn = false, unsigned int nHeightIn = 0, int nVersionIn = 0) : txout(txoutIn), fCoinBase(fCoinBaseIn), nHeight(nHeightIn), nVersion(nVersionIn) { }\n \n-    unsigned int GetSerializeSize(int nType, int nVersion) const {\n-        return ::GetSerializeSize(VARINT(nHeight*2+(fCoinBase ? 1 : 0)), nType, nVersion) +\n-               (nHeight > 0 ? ::GetSerializeSize(VARINT(this->nVersion), nType, nVersion) : 0) +\n-               ::GetSerializeSize(CTxOutCompressor(REF(txout)), nType, nVersion);\n+    unsigned int GetSerializeSize(int nType, int _nVersion) const {\n+        return ::GetSerializeSize(VARINT(nHeight*2+(fCoinBase ? 1 : 0)), nType, _nVersion) +\n+               (nHeight > 0 ? ::GetSerializeSize(VARINT(this->nVersion), nType, _nVersion) : 0) +\n+               ::GetSerializeSize(CTxOutCompressor(REF(txout)), nType, _nVersion);\n     }\n \n     template<typename Stream>\n-    void Serialize(Stream &s, int nType, int nVersion) const {\n-        ::Serialize(s, VARINT(nHeight*2+(fCoinBase ? 1 : 0)), nType, nVersion);\n+    void Serialize(Stream &s, int nType, int _nVersion) const {\n+        ::Serialize(s, VARINT(nHeight*2+(fCoinBase ? 1 : 0)), nType, _nVersion);\n         if (nHeight > 0)\n-            ::Serialize(s, VARINT(this->nVersion), nType, nVersion);\n-        ::Serialize(s, CTxOutCompressor(REF(txout)), nType, nVersion);\n+            ::Serialize(s, VARINT(this->nVersion), nType, _nVersion);\n+        ::Serialize(s, CTxOutCompressor(REF(txout)), nType, _nVersion);\n     }\n \n     template<typename Stream>\n-    void Unserialize(Stream &s, int nType, int nVersion) {\n+    void Unserialize(Stream &s, int nType, int _nVersion) {\n         unsigned int nCode = 0;\n-        ::Unserialize(s, VARINT(nCode), nType, nVersion);\n+        ::Unserialize(s, VARINT(nCode), nType, _nVersion);\n         nHeight = nCode / 2;\n         fCoinBase = nCode & 1;\n         if (nHeight > 0)\n-            ::Unserialize(s, VARINT(this->nVersion), nType, nVersion);\n-        ::Unserialize(s, REF(CTxOutCompressor(REF(txout))), nType, nVersion);\n+            ::Unserialize(s, VARINT(this->nVersion), nType, _nVersion);\n+        ::Unserialize(s, REF(CTxOutCompressor(REF(txout))), nType, _nVersion);\n     }\n };\n "
      },
      {
        "sha": "79c2b8e4a48a2ce5fa64056b59102985b9a76bed",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/09a0658689149caa66c1e5cb4487ce31eeaea634/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/09a0658689149caa66c1e5cb4487ce31eeaea634/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=09a0658689149caa66c1e5cb4487ce31eeaea634",
        "patch": "@@ -54,7 +54,7 @@ class CHDChain\n     CHDChain() { SetNull(); }\n     ADD_SERIALIZE_METHODS;\n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion)\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int _nVersion)\n     {\n         READWRITE(this->nVersion);\n         READWRITE(nExternalChainCounter);\n@@ -93,7 +93,7 @@ class CKeyMetadata\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int _nVersion) {\n         READWRITE(this->nVersion);\n         READWRITE(nCreateTime);\n         if (this->nVersion >= VERSION_WITH_HDDATA)"
      }
    ]
  }
]