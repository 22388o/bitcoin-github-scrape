[
  {
    "sha": "faf7e9280487d643cf59681df2711d72675b5ad4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWY3ZTkyODA0ODdkNjQzY2Y1OTY4MWRmMjcxMWQ3MjY3NWI1YWQ0",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-07-27T11:26:11Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-08-19T13:30:07Z"
      },
      "message": "test: Add generate* calls to test framework",
      "tree": {
        "sha": "ba5e0fd925ed3d9fbdf037680b94cebc6d6efabb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ba5e0fd925ed3d9fbdf037680b94cebc6d6efabb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/faf7e9280487d643cf59681df2711d72675b5ad4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUgyxAv/cEe3JhTEdT4pm9hlvarc1/hjSPHsOgu97oieSFQoxpZGr5OktCPfOGXS\ntFl+SxVk4ReI6WFbN/QnLVWQ8Y6WT6To1eEswqhedvMOHoWFxB/XYw6l1GxyrYRO\n5FzUA14Hw2kGLTXU3OUUNHi3sHYHO/jKphN9WubmWFcSbhqlBpkQpOoBenB77ck5\nyKsvBoZGmGLSATCV7P0dbsfCyT6RVtp1bdR93cPUES7Afqa2aNFke6/NNmabn3Ae\nqULmcxF1uWbm05QCypVRw68EGyT0l1v7H2qKSyT1KCcLKifqD+D4YoinGyW5MZMB\nGatE6h2/CZK2CCuQHnFOeE59hd4H+9ZpVa9+k6RanQ84MNLp3RZ9TP0bxGpOYtlt\n5nQaWAdpo3Tx5aXB5MLoO5i2Eqa0z8EjGWlCf9Ay42//6cp4u9KDgUb51jJn8arQ\n89Gz5A3vps4u6UmfD0Vr9/2qD5XIY8B67OVNayiixpx3gwev1ExZ+XMb1bZtF+Ub\ngxIWia8o\n=N0DF\n-----END PGP SIGNATURE-----",
        "payload": "tree ba5e0fd925ed3d9fbdf037680b94cebc6d6efabb\nparent 38975eccd498175ca91a837deefe8d820f16a53e\nauthor MarcoFalke <falke.marco@gmail.com> 1627385171 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1629379807 +0200\n\ntest: Add generate* calls to test framework\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faf7e9280487d643cf59681df2711d72675b5ad4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/faf7e9280487d643cf59681df2711d72675b5ad4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faf7e9280487d643cf59681df2711d72675b5ad4/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "38975eccd498175ca91a837deefe8d820f16a53e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38975eccd498175ca91a837deefe8d820f16a53e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/38975eccd498175ca91a837deefe8d820f16a53e"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 16,
      "deletions": 0
    },
    "files": [
      {
        "sha": "fe17b83632b9a792635561ef7e6aa8b8d5bef071",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faf7e9280487d643cf59681df2711d72675b5ad4/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faf7e9280487d643cf59681df2711d72675b5ad4/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=faf7e9280487d643cf59681df2711d72675b5ad4",
        "patch": "@@ -619,6 +619,22 @@ def join_network(self):\n         self.connect_nodes(1, 2)\n         self.sync_all()\n \n+    def generate(self, generator, *args, **kwargs):\n+        blocks = generator.generate(*args, **kwargs)\n+        return blocks\n+\n+    def generateblock(self, generator, *args, **kwargs):\n+        blocks = generator.generateblock(*args, **kwargs)\n+        return blocks\n+\n+    def generatetoaddress(self, generator, *args, **kwargs):\n+        blocks = generator.generatetoaddress(*args, **kwargs)\n+        return blocks\n+\n+    def generatetodescriptor(self, generator, *args, **kwargs):\n+        blocks = generator.generatetodescriptor(*args, **kwargs)\n+        return blocks\n+\n     def sync_blocks(self, nodes=None, wait=1, timeout=60):\n         \"\"\"\n         Wait until everybody has the same tip."
      }
    ]
  },
  {
    "sha": "fab2e23b579c44f1b4bed4d813bbe5a21eaa22c8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWIyZTIzYjU3OWM0NGYxYjRiZWQ0ZDgxM2JiZTVhMjFlYWEyMmM4",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-07-27T18:04:51Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-08-19T17:02:11Z"
      },
      "message": "Use generate* from TestFramework\n\nThe changes in feature_rbf can be reviewed with\n--color-moved=dimmed-zebra --color-moved-ws=ignore-all-space",
      "tree": {
        "sha": "7409c4da5d5b76eb6046a1441e0f120ae7f89f01",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7409c4da5d5b76eb6046a1441e0f120ae7f89f01"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fab2e23b579c44f1b4bed4d813bbe5a21eaa22c8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUg9agv/aRo4aXUsWUU9GdZ3uRFgdatshNAAbn/jmD+uw42sXdbiyVgrkEYj1/Tx\nXD60QDM38t06gkitm3o2ET5gdT50AazY0Qm+6eevNvgaM4piuz4773ntY7EPM2EN\nI/OxGQLbel7C3LreZZWS+G8G+Pi1zB+X5x9xB3tC1omtFwKxxGywMtpeTvWC9ecj\n3wg5gfOteUYBsQHsPYkzjyJfBgZagAqlP0pXx7yl7h7giezhy7Gf5yx/jQnC80Fw\nT5SWdLyzK6RDtRpgVYk1KfRWhuhwRB32Zq26rNGoW+ibWuy3YW+/65fkCwKHC4Zv\n9Gc+m9BpPyZBYI4If0gdPPCYsdw59GwWHcqarQbgPrG3RnuQHQ2Kjf9nQOqDVbnC\nSJ+MNeXP2L3IsPkdR4obcRGj7+YePOo1UFgpMf3kBBxEsg40Of+259Xe0nGwFjIb\nctYS+VFurtIkGXQneoJDLeRHNtBmSu/RxAuoNPomuLGJWjrsOYL0ysYamXsc4EkO\nEuuHbwM5\n=f9XW\n-----END PGP SIGNATURE-----",
        "payload": "tree 7409c4da5d5b76eb6046a1441e0f120ae7f89f01\nparent faf7e9280487d643cf59681df2711d72675b5ad4\nauthor MarcoFalke <falke.marco@gmail.com> 1627409091 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1629392531 +0200\n\nUse generate* from TestFramework\n\nThe changes in feature_rbf can be reviewed with\n--color-moved=dimmed-zebra --color-moved-ws=ignore-all-space\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fab2e23b579c44f1b4bed4d813bbe5a21eaa22c8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fab2e23b579c44f1b4bed4d813bbe5a21eaa22c8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fab2e23b579c44f1b4bed4d813bbe5a21eaa22c8/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "faf7e9280487d643cf59681df2711d72675b5ad4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faf7e9280487d643cf59681df2711d72675b5ad4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/faf7e9280487d643cf59681df2711d72675b5ad4"
      }
    ],
    "stats": {
      "total": 167,
      "additions": 83,
      "deletions": 84
    },
    "files": [
      {
        "sha": "f0766ca7c21ee778ec66b7fd3ba968431d397c6b",
        "filename": "test/functional/feature_dbcrash.py",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab2e23b579c44f1b4bed4d813bbe5a21eaa22c8/test/functional/feature_dbcrash.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab2e23b579c44f1b4bed4d813bbe5a21eaa22c8/test/functional/feature_dbcrash.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_dbcrash.py?ref=fab2e23b579c44f1b4bed4d813bbe5a21eaa22c8",
        "patch": "@@ -217,7 +217,7 @@ def run_test(self):\n \n         # Start by creating a lot of utxos on node3\n         initial_height = self.nodes[3].getblockcount()\n-        utxo_list = create_confirmed_utxos(self.nodes[3].getnetworkinfo()['relayfee'], self.nodes[3], 5000)\n+        utxo_list = create_confirmed_utxos(self, self.nodes[3].getnetworkinfo()['relayfee'], self.nodes[3], 5000)\n         self.log.info(f\"Prepped {len(utxo_list)} utxo entries\")\n \n         # Sync these blocks with the other nodes\n@@ -253,7 +253,8 @@ def run_test(self):\n             self.log.debug(\"Mining longer tip\")\n             block_hashes = []\n             while current_height + 1 > self.nodes[3].getblockcount():\n-                block_hashes.extend(self.nodes[3].generatetoaddress(\n+                block_hashes.extend(self.generatetoaddress(\n+                    self.nodes[3],\n                     nblocks=min(10, current_height + 1 - self.nodes[3].getblockcount()),\n                     # new address to avoid mining a block that has just been invalidated\n                     address=self.nodes[3].getnewaddress(),"
      },
      {
        "sha": "bd615997cb43b972bafc2558cdeb2a058303d914",
        "filename": "test/functional/feature_maxuploadtarget.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab2e23b579c44f1b4bed4d813bbe5a21eaa22c8/test/functional/feature_maxuploadtarget.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab2e23b579c44f1b4bed4d813bbe5a21eaa22c8/test/functional/feature_maxuploadtarget.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_maxuploadtarget.py?ref=fab2e23b579c44f1b4bed4d813bbe5a21eaa22c8",
        "patch": "@@ -67,7 +67,7 @@ def run_test(self):\n             p2p_conns.append(self.nodes[0].add_p2p_connection(TestP2PConn()))\n \n         # Now mine a big block\n-        mine_large_block(self.nodes[0], self.utxo_cache)\n+        mine_large_block(self, self.nodes[0], self.utxo_cache)\n \n         # Store the hash; we'll request this later\n         big_old_block = self.nodes[0].getbestblockhash()\n@@ -78,7 +78,7 @@ def run_test(self):\n         self.nodes[0].setmocktime(int(time.time()) - 2*60*60*24)\n \n         # Mine one more block, so that the prior block looks old\n-        mine_large_block(self.nodes[0], self.utxo_cache)\n+        mine_large_block(self, self.nodes[0], self.utxo_cache)\n \n         # We'll be requesting this new block too\n         big_new_block = self.nodes[0].getbestblockhash()"
      },
      {
        "sha": "694cca15fd574e1680c93e41ab4b7dd8604867c7",
        "filename": "test/functional/feature_rbf.py",
        "status": "modified",
        "additions": 53,
        "deletions": 56,
        "changes": 109,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab2e23b579c44f1b4bed4d813bbe5a21eaa22c8/test/functional/feature_rbf.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab2e23b579c44f1b4bed4d813bbe5a21eaa22c8/test/functional/feature_rbf.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_rbf.py?ref=fab2e23b579c44f1b4bed4d813bbe5a21eaa22c8",
        "patch": "@@ -23,49 +23,6 @@\n from test_framework.wallet import MiniWallet\n \n MAX_REPLACEMENT_LIMIT = 100\n-\n-\n-def make_utxo(node, amount, confirmed=True, scriptPubKey=DUMMY_P2WPKH_SCRIPT):\n-    \"\"\"Create a txout with a given amount and scriptPubKey\n-\n-    Mines coins as needed.\n-\n-    confirmed - txouts created will be confirmed in the blockchain;\n-                unconfirmed otherwise.\n-    \"\"\"\n-    fee = 1 * COIN\n-    while node.getbalance() < satoshi_round((amount + fee) / COIN):\n-        node.generate(COINBASE_MATURITY)\n-\n-    new_addr = node.getnewaddress()\n-    txid = node.sendtoaddress(new_addr, satoshi_round((amount + fee) / COIN))\n-    tx1 = node.getrawtransaction(txid, 1)\n-    txid = int(txid, 16)\n-    i, _ = next(filter(lambda vout: new_addr == vout[1]['scriptPubKey']['address'], enumerate(tx1['vout'])))\n-\n-    tx2 = CTransaction()\n-    tx2.vin = [CTxIn(COutPoint(txid, i))]\n-    tx2.vout = [CTxOut(amount, scriptPubKey)]\n-    tx2.rehash()\n-\n-    signed_tx = node.signrawtransactionwithwallet(tx2.serialize().hex())\n-\n-    txid = node.sendrawtransaction(signed_tx['hex'], 0)\n-\n-    # If requested, ensure txouts are confirmed.\n-    if confirmed:\n-        mempool_size = len(node.getrawmempool())\n-        while mempool_size > 0:\n-            node.generate(1)\n-            new_size = len(node.getrawmempool())\n-            # Error out if we have something stuck in the mempool, as this\n-            # would likely be a bug.\n-            assert new_size < mempool_size\n-            mempool_size = new_size\n-\n-    return COutPoint(int(txid, 16), 0)\n-\n-\n class ReplaceByFeeTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n@@ -129,6 +86,46 @@ def run_test(self):\n \n         self.log.info(\"Passed\")\n \n+    def make_utxo(self, node, amount, confirmed=True, scriptPubKey=DUMMY_P2WPKH_SCRIPT):\n+        \"\"\"Create a txout with a given amount and scriptPubKey\n+\n+        Mines coins as needed.\n+\n+        confirmed - txouts created will be confirmed in the blockchain;\n+                    unconfirmed otherwise.\n+        \"\"\"\n+        fee = 1 * COIN\n+        while node.getbalance() < satoshi_round((amount + fee) / COIN):\n+            self.generate(node, COINBASE_MATURITY)\n+\n+        new_addr = node.getnewaddress()\n+        txid = node.sendtoaddress(new_addr, satoshi_round((amount + fee) / COIN))\n+        tx1 = node.getrawtransaction(txid, 1)\n+        txid = int(txid, 16)\n+        i, _ = next(filter(lambda vout: new_addr == vout[1]['scriptPubKey']['address'], enumerate(tx1['vout'])))\n+\n+        tx2 = CTransaction()\n+        tx2.vin = [CTxIn(COutPoint(txid, i))]\n+        tx2.vout = [CTxOut(amount, scriptPubKey)]\n+        tx2.rehash()\n+\n+        signed_tx = node.signrawtransactionwithwallet(tx2.serialize().hex())\n+\n+        txid = node.sendrawtransaction(signed_tx['hex'], 0)\n+\n+        # If requested, ensure txouts are confirmed.\n+        if confirmed:\n+            mempool_size = len(node.getrawmempool())\n+            while mempool_size > 0:\n+                self.generate(node, 1)\n+                new_size = len(node.getrawmempool())\n+                # Error out if we have something stuck in the mempool, as this\n+                # would likely be a bug.\n+                assert new_size < mempool_size\n+                mempool_size = new_size\n+\n+        return COutPoint(int(txid, 16), 0)\n+\n     def test_simple_doublespend(self):\n         \"\"\"Simple doublespend\"\"\"\n         # we use MiniWallet to create a transaction template with inputs correctly set,\n@@ -165,7 +162,7 @@ def test_doublespend_chain(self):\n         \"\"\"Doublespend of a long chain\"\"\"\n \n         initial_nValue = 50 * COIN\n-        tx0_outpoint = make_utxo(self.nodes[0], initial_nValue)\n+        tx0_outpoint = self.make_utxo(self.nodes[0], initial_nValue)\n \n         prevout = tx0_outpoint\n         remaining_value = initial_nValue\n@@ -205,7 +202,7 @@ def test_doublespend_tree(self):\n         \"\"\"Doublespend of a big tree of transactions\"\"\"\n \n         initial_nValue = 50 * COIN\n-        tx0_outpoint = make_utxo(self.nodes[0], initial_nValue)\n+        tx0_outpoint = self.make_utxo(self.nodes[0], initial_nValue)\n \n         def branch(prevout, initial_value, max_txs, tree_width=5, fee=0.0001 * COIN, _total_txs=None):\n             if _total_txs is None:\n@@ -268,7 +265,7 @@ def branch(prevout, initial_value, max_txs, tree_width=5, fee=0.0001 * COIN, _to\n         # double-spent at once\" anti-DoS limit.\n         for n in (MAX_REPLACEMENT_LIMIT + 1, MAX_REPLACEMENT_LIMIT * 2):\n             fee = int(0.0001 * COIN)\n-            tx0_outpoint = make_utxo(self.nodes[0], initial_nValue)\n+            tx0_outpoint = self.make_utxo(self.nodes[0], initial_nValue)\n             tree_txs = list(branch(tx0_outpoint, initial_nValue, n, fee=fee))\n             assert_equal(len(tree_txs), n)\n \n@@ -285,7 +282,7 @@ def branch(prevout, initial_value, max_txs, tree_width=5, fee=0.0001 * COIN, _to\n \n     def test_replacement_feeperkb(self):\n         \"\"\"Replacement requires fee-per-KB to be higher\"\"\"\n-        tx0_outpoint = make_utxo(self.nodes[0], int(1.1 * COIN))\n+        tx0_outpoint = self.make_utxo(self.nodes[0], int(1.1 * COIN))\n \n         tx1a = CTransaction()\n         tx1a.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n@@ -305,8 +302,8 @@ def test_replacement_feeperkb(self):\n \n     def test_spends_of_conflicting_outputs(self):\n         \"\"\"Replacements that spend conflicting tx outputs are rejected\"\"\"\n-        utxo1 = make_utxo(self.nodes[0], int(1.2 * COIN))\n-        utxo2 = make_utxo(self.nodes[0], 3 * COIN)\n+        utxo1 = self.make_utxo(self.nodes[0], int(1.2 * COIN))\n+        utxo2 = self.make_utxo(self.nodes[0], 3 * COIN)\n \n         tx1a = CTransaction()\n         tx1a.vin = [CTxIn(utxo1, nSequence=0)]\n@@ -345,8 +342,8 @@ def test_spends_of_conflicting_outputs(self):\n \n     def test_new_unconfirmed_inputs(self):\n         \"\"\"Replacements that add new unconfirmed inputs are rejected\"\"\"\n-        confirmed_utxo = make_utxo(self.nodes[0], int(1.1 * COIN))\n-        unconfirmed_utxo = make_utxo(self.nodes[0], int(0.1 * COIN), False)\n+        confirmed_utxo = self.make_utxo(self.nodes[0], int(1.1 * COIN))\n+        unconfirmed_utxo = self.make_utxo(self.nodes[0], int(0.1 * COIN), False)\n \n         tx1 = CTransaction()\n         tx1.vin = [CTxIn(confirmed_utxo)]\n@@ -369,7 +366,7 @@ def test_too_many_replacements(self):\n \n         # Start by creating a single transaction with many outputs\n         initial_nValue = 10 * COIN\n-        utxo = make_utxo(self.nodes[0], initial_nValue)\n+        utxo = self.make_utxo(self.nodes[0], initial_nValue)\n         fee = int(0.0001 * COIN)\n         split_value = int((initial_nValue - fee) / (MAX_REPLACEMENT_LIMIT + 1))\n \n@@ -417,7 +414,7 @@ def test_too_many_replacements(self):\n \n     def test_opt_in(self):\n         \"\"\"Replacing should only work if orig tx opted in\"\"\"\n-        tx0_outpoint = make_utxo(self.nodes[0], int(1.1 * COIN))\n+        tx0_outpoint = self.make_utxo(self.nodes[0], int(1.1 * COIN))\n \n         # Create a non-opting in transaction\n         tx1a = CTransaction()\n@@ -438,7 +435,7 @@ def test_opt_in(self):\n         # This will raise an exception\n         assert_raises_rpc_error(-26, \"txn-mempool-conflict\", self.nodes[0].sendrawtransaction, tx1b_hex, 0)\n \n-        tx1_outpoint = make_utxo(self.nodes[0], int(1.1 * COIN))\n+        tx1_outpoint = self.make_utxo(self.nodes[0], int(1.1 * COIN))\n \n         # Create a different non-opting in transaction\n         tx2a = CTransaction()\n@@ -494,7 +491,7 @@ def test_prioritised_transactions(self):\n         # correctly used by replacement logic\n \n         # 1. Check that feeperkb uses modified fees\n-        tx0_outpoint = make_utxo(self.nodes[0], int(1.1 * COIN))\n+        tx0_outpoint = self.make_utxo(self.nodes[0], int(1.1 * COIN))\n \n         tx1a = CTransaction()\n         tx1a.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n@@ -520,7 +517,7 @@ def test_prioritised_transactions(self):\n         assert tx1b_txid in self.nodes[0].getrawmempool()\n \n         # 2. Check that absolute fee checks use modified fee.\n-        tx1_outpoint = make_utxo(self.nodes[0], int(1.1 * COIN))\n+        tx1_outpoint = self.make_utxo(self.nodes[0], int(1.1 * COIN))\n \n         tx2a = CTransaction()\n         tx2a.vin = [CTxIn(tx1_outpoint, nSequence=0)]"
      },
      {
        "sha": "6686f77a44aaccd41cefefe00d53d59431e39d23",
        "filename": "test/functional/interface_zmq.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab2e23b579c44f1b4bed4d813bbe5a21eaa22c8/test/functional/interface_zmq.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab2e23b579c44f1b4bed4d813bbe5a21eaa22c8/test/functional/interface_zmq.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_zmq.py?ref=fab2e23b579c44f1b4bed4d813bbe5a21eaa22c8",
        "patch": "@@ -82,8 +82,8 @@ class ZMQTestSetupBlock:\n     raw transaction data.\n     \"\"\"\n \n-    def __init__(self, node):\n-        self.block_hash = node.generate(1)[0]\n+    def __init__(self, test_framework, node):\n+        self.block_hash = test_framework.generate(node, 1)[0]\n         coinbase = node.getblock(self.block_hash, 2)['tx'][0]\n         self.tx_hash = coinbase['txid']\n         self.raw_tx = coinbase['hex']\n@@ -147,7 +147,7 @@ def setup_zmq_test(self, services, *, recv_timeout=60, sync_blocks=True):\n         for sub in subscribers:\n             sub.socket.set(zmq.RCVTIMEO, 1000)\n         while True:\n-            test_block = ZMQTestSetupBlock(self.nodes[0])\n+            test_block = ZMQTestSetupBlock(self, self.nodes[0])\n             recv_failed = False\n             for sub in subscribers:\n                 try:"
      },
      {
        "sha": "1b1ac23024782c585c18215ef570f85fcdd931ba",
        "filename": "test/functional/mempool_limit.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab2e23b579c44f1b4bed4d813bbe5a21eaa22c8/test/functional/mempool_limit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab2e23b579c44f1b4bed4d813bbe5a21eaa22c8/test/functional/mempool_limit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_limit.py?ref=fab2e23b579c44f1b4bed4d813bbe5a21eaa22c8",
        "patch": "@@ -32,7 +32,7 @@ def run_test(self):\n         assert_equal(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n \n         txids = []\n-        utxos = create_confirmed_utxos(relayfee, self.nodes[0], 91)\n+        utxos = create_confirmed_utxos(self, relayfee, self.nodes[0], 91)\n \n         self.log.info('Create a mempool tx that will be evicted')\n         us0 = utxos.pop()"
      },
      {
        "sha": "be03be24ec12245518b396874f94cb6d377e0c89",
        "filename": "test/functional/mempool_unbroadcast.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab2e23b579c44f1b4bed4d813bbe5a21eaa22c8/test/functional/mempool_unbroadcast.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab2e23b579c44f1b4bed4d813bbe5a21eaa22c8/test/functional/mempool_unbroadcast.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_unbroadcast.py?ref=fab2e23b579c44f1b4bed4d813bbe5a21eaa22c8",
        "patch": "@@ -32,7 +32,7 @@ def test_broadcast(self):\n         node = self.nodes[0]\n \n         min_relay_fee = node.getnetworkinfo()[\"relayfee\"]\n-        utxos = create_confirmed_utxos(min_relay_fee, node, 10)\n+        utxos = create_confirmed_utxos(self, min_relay_fee, node, 10)\n \n         self.disconnect_nodes(0, 1)\n "
      },
      {
        "sha": "30036277781490055c42f7ee2cf4328a736114ba",
        "filename": "test/functional/mining_getblocktemplate_longpoll.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab2e23b579c44f1b4bed4d813bbe5a21eaa22c8/test/functional/mining_getblocktemplate_longpoll.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab2e23b579c44f1b4bed4d813bbe5a21eaa22c8/test/functional/mining_getblocktemplate_longpoll.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining_getblocktemplate_longpoll.py?ref=fab2e23b579c44f1b4bed4d813bbe5a21eaa22c8",
        "patch": "@@ -48,17 +48,17 @@ def run_test(self):\n         thr.join(5)  # wait 5 seconds or until thread exits\n         assert thr.is_alive()\n \n-        miniwallets = [ MiniWallet(node) for node in self.nodes ]\n+        miniwallets = [MiniWallet(node) for node in self.nodes]\n         self.log.info(\"Test that longpoll will terminate if another node generates a block\")\n-        miniwallets[1].generate(1)  # generate a block on another node\n+        self.generate(miniwallets[1], 1)  # generate a block on another node\n         # check that thread will exit now that new transaction entered mempool\n         thr.join(5)  # wait 5 seconds or until thread exits\n         assert not thr.is_alive()\n \n         self.log.info(\"Test that longpoll will terminate if we generate a block ourselves\")\n         thr = LongpollThread(self.nodes[0])\n         thr.start()\n-        miniwallets[0].generate(1)  # generate a block on own node\n+        self.generate(miniwallets[0], 1)  # generate a block on own node\n         thr.join(5)  # wait 5 seconds or until thread exits\n         assert not thr.is_alive()\n "
      },
      {
        "sha": "d357e2ed479ba7ab31e9ccb3b997f9c93abc93b1",
        "filename": "test/functional/mining_prioritisetransaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab2e23b579c44f1b4bed4d813bbe5a21eaa22c8/test/functional/mining_prioritisetransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab2e23b579c44f1b4bed4d813bbe5a21eaa22c8/test/functional/mining_prioritisetransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining_prioritisetransaction.py?ref=fab2e23b579c44f1b4bed4d813bbe5a21eaa22c8",
        "patch": "@@ -48,7 +48,7 @@ def run_test(self):\n         self.relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n \n         utxo_count = 90\n-        utxos = create_confirmed_utxos(self.relayfee, self.nodes[0], utxo_count)\n+        utxos = create_confirmed_utxos(self, self.relayfee, self.nodes[0], utxo_count)\n         base_fee = self.relayfee*100 # our transactions are smaller than 100kb\n         txids = []\n "
      },
      {
        "sha": "a9d5ed970a9465c2d379459f177ec22293fe15de",
        "filename": "test/functional/p2p_unrequested_blocks.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab2e23b579c44f1b4bed4d813bbe5a21eaa22c8/test/functional/p2p_unrequested_blocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab2e23b579c44f1b4bed4d813bbe5a21eaa22c8/test/functional/p2p_unrequested_blocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_unrequested_blocks.py?ref=fab2e23b579c44f1b4bed4d813bbe5a21eaa22c8",
        "patch": "@@ -77,7 +77,7 @@ def run_test(self):\n         min_work_node = self.nodes[1].add_p2p_connection(P2PInterface())\n \n         # 1. Have nodes mine a block (leave IBD)\n-        [n.generatetoaddress(1, n.get_deterministic_priv_key().address) for n in self.nodes]\n+        [self.generatetoaddress(n, 1, n.get_deterministic_priv_key().address) for n in self.nodes]\n         tips = [int(\"0x\" + n.getbestblockhash(), 0) for n in self.nodes]\n \n         # 2. Send one block that builds on each tip."
      },
      {
        "sha": "c18f5f98cc2cfd5f967ccaf69889c6f3f0cd10ef",
        "filename": "test/functional/rpc_signrawtransaction.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab2e23b579c44f1b4bed4d813bbe5a21eaa22c8/test/functional/rpc_signrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab2e23b579c44f1b4bed4d813bbe5a21eaa22c8/test/functional/rpc_signrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_signrawtransaction.py?ref=fab2e23b579c44f1b4bed4d813bbe5a21eaa22c8",
        "patch": "@@ -274,7 +274,7 @@ def test_signing_with_csv(self):\n         getcontext().prec = 8\n \n         # Make sure CSV is active\n-        generate_to_height(self.nodes[0], CSV_ACTIVATION_HEIGHT)\n+        generate_to_height(self, self.nodes[0], CSV_ACTIVATION_HEIGHT)\n         assert self.nodes[0].getblockchaininfo()['softforks']['csv']['active']\n \n         # Create a P2WSH script with CSV\n@@ -310,7 +310,7 @@ def test_signing_with_cltv(self):\n         getcontext().prec = 8\n \n         # Make sure CLTV is active\n-        generate_to_height(self.nodes[0], CLTV_HEIGHT)\n+        generate_to_height(self, self.nodes[0], CLTV_HEIGHT)\n         assert self.nodes[0].getblockchaininfo()['softforks']['bip65']['active']\n \n         # Create a P2WSH script with CLTV"
      },
      {
        "sha": "f382e0fdb3f1ff15a73ca618e24914735886c4ed",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab2e23b579c44f1b4bed4d813bbe5a21eaa22c8/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab2e23b579c44f1b4bed4d813bbe5a21eaa22c8/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=fab2e23b579c44f1b4bed4d813bbe5a21eaa22c8",
        "patch": "@@ -410,7 +410,7 @@ def setup_nodes(self):\n             # To ensure that all nodes are out of IBD, the most recent block\n             # must have a timestamp not too old (see IsInitialBlockDownload()).\n             self.log.debug('Generate a block with current time')\n-            block_hash = self.nodes[0].generate(1)[0]\n+            block_hash = self.generate(self.nodes[0], 1)[0]\n             block = self.nodes[0].getblock(blockhash=block_hash, verbosity=0)\n             for n in self.nodes:\n                 n.submitblock(block)\n@@ -765,7 +765,8 @@ def _initialize_chain(self):\n             gen_addresses = [k.address for k in TestNode.PRIV_KEYS][:3] + [ADDRESS_BCRT1_P2WSH_OP_TRUE]\n             assert_equal(len(gen_addresses), 4)\n             for i in range(8):\n-                cache_node.generatetoaddress(\n+                self.generatetoaddress(\n+                    cache_node,\n                     nblocks=25 if i != 7 else 24,\n                     address=gen_addresses[i % len(gen_addresses)],\n                 )"
      },
      {
        "sha": "ec27fd7f8583e6a7f7df3afe5103a684988d5819",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab2e23b579c44f1b4bed4d813bbe5a21eaa22c8/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab2e23b579c44f1b4bed4d813bbe5a21eaa22c8/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=fab2e23b579c44f1b4bed4d813bbe5a21eaa22c8",
        "patch": "@@ -445,10 +445,10 @@ def find_output(node, txid, amount, *, blockhash=None):\n \n # Helper to create at least \"count\" utxos\n # Pass in a fee that is sufficient for relay and mining new transactions.\n-def create_confirmed_utxos(fee, node, count):\n+def create_confirmed_utxos(test_framework, fee, node, count):\n     to_generate = int(0.5 * count) + 101\n     while to_generate > 0:\n-        node.generate(min(25, to_generate))\n+        test_framework.generate(node, min(25, to_generate))\n         to_generate -= 25\n     utxos = node.listunspent()\n     iterations = count - len(utxos)\n@@ -469,7 +469,7 @@ def create_confirmed_utxos(fee, node, count):\n         node.sendrawtransaction(signed_tx)\n \n     while (node.getmempoolinfo()['size'] > 0):\n-        node.generate(1)\n+        test_framework.generate(node, 1)\n \n     utxos = node.listunspent()\n     assert len(utxos) >= count\n@@ -541,7 +541,7 @@ def create_lots_of_big_transactions(node, txouts, utxos, num, fee):\n     return txids\n \n \n-def mine_large_block(node, utxos=None):\n+def mine_large_block(test_framework, node, utxos=None):\n     # generate a 66k transaction,\n     # and 14 of them is close to the 1MB block limit\n     num = 14\n@@ -552,17 +552,17 @@ def mine_large_block(node, utxos=None):\n         utxos.extend(node.listunspent())\n     fee = 100 * node.getnetworkinfo()[\"relayfee\"]\n     create_lots_of_big_transactions(node, txouts, utxos, num, fee=fee)\n-    node.generate(1)\n+    test_framework.generate(node, 1)\n \n \n-def generate_to_height(node, target_height):\n+def generate_to_height(test_framework, node, target_height):\n     \"\"\"Generates blocks until a given target block height has been reached.\n        To prevent timeouts, only up to 200 blocks are generated per RPC call.\n        Can be used to activate certain soft-forks (e.g. CSV, CLTV).\"\"\"\n     current_height = node.getblockcount()\n     while current_height < target_height:\n         nblocks = min(200, target_height - current_height)\n-        current_height += len(node.generate(nblocks))\n+        current_height += len(test_framework.generate(node, nblocks))\n     assert_equal(node.getblockcount(), target_height)\n \n "
      },
      {
        "sha": "17a4c79da3f0a042c009940b65ec79b798616f37",
        "filename": "test/functional/wallet_descriptor.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab2e23b579c44f1b4bed4d813bbe5a21eaa22c8/test/functional/wallet_descriptor.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab2e23b579c44f1b4bed4d813bbe5a21eaa22c8/test/functional/wallet_descriptor.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_descriptor.py?ref=fab2e23b579c44f1b4bed4d813bbe5a21eaa22c8",
        "patch": "@@ -84,7 +84,7 @@ def run_test(self):\n         send_wrpc = self.nodes[0].get_wallet_rpc(\"desc1\")\n \n         # Generate some coins\n-        send_wrpc.generatetoaddress(COINBASE_MATURITY + 1, send_wrpc.getnewaddress())\n+        self.generatetoaddress(send_wrpc, COINBASE_MATURITY + 1, send_wrpc.getnewaddress())\n \n         # Make transactions\n         self.log.info(\"Test sending and receiving\")"
      },
      {
        "sha": "4cb311983c5b88afc5f47c9f223d8fbb34a20b84",
        "filename": "test/functional/wallet_importdescriptors.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab2e23b579c44f1b4bed4d813bbe5a21eaa22c8/test/functional/wallet_importdescriptors.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab2e23b579c44f1b4bed4d813bbe5a21eaa22c8/test/functional/wallet_importdescriptors.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_importdescriptors.py?ref=fab2e23b579c44f1b4bed4d813bbe5a21eaa22c8",
        "patch": "@@ -74,7 +74,7 @@ def run_test(self):\n         assert_equal(wpriv.getwalletinfo()['keypoolsize'], 0)\n \n         self.log.info('Mining coins')\n-        w0.generatetoaddress(COINBASE_MATURITY + 1, w0.getnewaddress())\n+        self.generatetoaddress(w0, COINBASE_MATURITY + 1, w0.getnewaddress())\n \n         # RPC importdescriptors -----------------------------------------------\n \n@@ -405,7 +405,7 @@ def run_test(self):\n                      solvable=True,\n                      ismine=True)\n         txid = w0.sendtoaddress(address, 49.99995540)\n-        w0.generatetoaddress(6, w0.getnewaddress())\n+        self.generatetoaddress(w0, 6, w0.getnewaddress())\n         self.sync_blocks()\n         tx = wpriv.createrawtransaction([{\"txid\": txid, \"vout\": 0}], {w0.getnewaddress(): 49.999})\n         signed_tx = wpriv.signrawtransactionwithwallet(tx)"
      }
    ]
  }
]