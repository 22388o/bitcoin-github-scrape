gmaxwell,2019-04-22T18:44:06Z,"Concept ACK.\n\nThere is an argument against doing things like this:  that it's better to fail deterministically rather than fail randomly at some point in the future and have created incorrect expectations of functionality.  But setting prune to some large ""future"" amount is a perfectly reasonable configuration.  And this doesn't cause it to fail randomly, but rather work until it doesn't.  So ",https://github.com/bitcoin/bitcoin/pull/15870#issuecomment-485509311,485509311,
ryanofsky,2019-04-22T19:16:50Z,"This seems to affect importaddress, importpubkey, importprivkey, and importwallet but not importmulti. I wonder how the new behavior compares to importmulti behavior, and if there's a difference, whether that's justified.",https://github.com/bitcoin/bitcoin/pull/15870#issuecomment-485519649,485519649,
DrahtBot,2019-04-22T19:30:28Z,<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.,https://github.com/bitcoin/bitcoin/pull/15870#issuecomment-485523746,485523746,
MarcoFalke,2019-04-22T19:34:12Z,"@ryanofsky The only difference between importmulti and the other calls is that in importmulti you can ""opt-out"" of scanning early blocks by setting a later timestamp. Otherwise, my change makes all calls behave in the same way.\n\nEdit: I believe the only difference is that importmulti will import the keys and then fail the rescan, whereas the other calls will exit early and not attempt to impor",https://github.com/bitcoin/bitcoin/pull/15870#issuecomment-485524753,485524753,
promag,2019-04-24T20:12:51Z,"> Edit: I believe the only difference is that importmulti will import the keys and then fail the rescan, whereas the other calls will exit early and not attempt to import anything.\n\nWhy a different behavior? It's already possible to call `importmulti ... '{""rescan"": false}'` and then `rescanblockchain ...`? I think RPCs should (try to) be atomic so that the client doesn't have to figure out wh",https://github.com/bitcoin/bitcoin/pull/15870#issuecomment-486407340,486407340,
MarcoFalke,2019-04-24T20:23:33Z,"> Why a different behavior?\n\nI don't know. I didn't write the importmulti RPC and I don't plan to change it in this pull request.",https://github.com/bitcoin/bitcoin/pull/15870#issuecomment-486411063,486411063,
MarcoFalke,2019-04-24T21:03:53Z,"> Concept ACK. Correct me if I'm wrong, but it doesn't have to fail if all required blocks are available right?\n\nimportmulti does not fail the rescan when all blocks after the timestamp are available, but it fails *after* the import if a block is missing.\nthe other import* (after my change) also do not fail the rescan when all blocks after time=0 are available. However, they fail *before* th",https://github.com/bitcoin/bitcoin/pull/15870#issuecomment-486425232,486425232,
luke-jr,2019-05-01T06:02:21Z,"Let's use prune height instead, so `rescanblockchain` can be picky about it?",https://github.com/bitcoin/bitcoin/pull/15870#issuecomment-488217020,488217020,
MarcoFalke,2019-05-01T14:02:10Z,I am not touching `rescanblockchain` at all. Could you explain what you mean?,https://github.com/bitcoin/bitcoin/pull/15870#issuecomment-488290292,488290292,
luke-jr,2019-05-01T23:26:52Z,"I mean it would make sense to use a common interface with `rescanblockchain`, which would need prune-height rather than have-pruned.",https://github.com/bitcoin/bitcoin/pull/15870#issuecomment-488489329,488489329,
MarcoFalke,2019-05-02T13:10:42Z,"Oh, the RPCs I touch are already deprecated in favor of importmulti, so I'd rather not add features to them.",https://github.com/bitcoin/bitcoin/pull/15870#issuecomment-488666562,488666562,
luke-jr,2019-05-02T18:17:24Z,I'm commenting on the src/interfaces changes specifically.,https://github.com/bitcoin/bitcoin/pull/15870#issuecomment-488777086,488777086,
MarcoFalke,2019-05-02T18:21:29Z,"Ah. Yeah, since we don't store the prune height, this would complicate my changes slightly. I think the additional code can be added later (when needed in rescanblockchain).",https://github.com/bitcoin/bitcoin/pull/15870#issuecomment-488778502,488778502,
jnewbery,2019-05-03T17:25:58Z,"I'm a little concerned about this change. Anywhere that `havePruned()` is called without `cs_main` is racy, since a block may be pruned after `havePruned()` is called. We therefore need to make sure that the code after those `havePruned()` calls is robust against being run when blocks have been pruned. If that's the case, why not just remove the `chain().getPruneMode()` check entirely and let the ",https://github.com/bitcoin/bitcoin/pull/15870#issuecomment-489175006,489175006,
MarcoFalke,2019-05-03T17:49:27Z,"@jnewbery The check is only there to provide a nice error message. As you correctly observe it is not needed for correctness. Should I clarify that with a comment?\n\nThe error message otherwise would be https://github.com/bitcoin/bitcoin/pull/15870#discussion_r278315111",https://github.com/bitcoin/bitcoin/pull/15870#issuecomment-489182583,489182583,
jnewbery,2019-05-03T17:57:12Z,"> The check is only there to provide a nice error message. As you correctly observe it is not needed for correctness. Should I clarify that with a comment?\n\nYes, that sounds good. Thanks!",https://github.com/bitcoin/bitcoin/pull/15870#issuecomment-489185056,489185056,
jnewbery,2019-05-03T19:46:56Z,utACK fa9f3cc89442e9b332a27b81b04201bb4a0caf28,https://github.com/bitcoin/bitcoin/pull/15870#issuecomment-489218060,489218060,
sipa,2019-05-09T22:59:06Z,"Concept ACK. My first read of this was that it'd permit rescanning pruned chains, as long as the to-be-rescanned blocks are not pruned, but it seems to just be about whether or not any blocks are actually pruned (independent of the ones to be rescanned), right?",https://github.com/bitcoin/bitcoin/pull/15870#issuecomment-491096807,491096807,
MarcoFalke,2019-05-10T12:22:33Z,"The legacy calls would always rescan the whole chain. As soon as one block is pruned, it fails.",https://github.com/bitcoin/bitcoin/pull/15870#issuecomment-491269852,491269852,
wpaulino,2019-05-15T04:40:40Z,Out of scope for this PR but somewhat related -- would there be any reason to not attempt to fetch the pruned blocks from the P2P network to allow the rescan to happen?,https://github.com/bitcoin/bitcoin/pull/15870#issuecomment-492500634,492500634,
MarcoFalke,2019-05-15T12:00:37Z,"Jup, but that might be something to do only after #15946",https://github.com/bitcoin/bitcoin/pull/15870#issuecomment-492624925,492624925,
jamesob,2019-05-15T17:23:12Z,"utACK https://github.com/bitcoin/bitcoin/pull/15870/commits/aaaa57c2aad3a6278559ae3db5d953c847c6ffcb\n\nMakes a lot of sense to allow rescanning for as long as we can as @gmaxwell notes above - and indeed it might even be prudent for most users to set a future-proofing prune value that reflects their disk limitations at startup time. Better that your node start pruning vs. run out of disk space ",https://github.com/bitcoin/bitcoin/pull/15870#issuecomment-492746119,492746119,
promag,2019-05-15T17:29:35Z,@jamesob you mean an option to ensure a minimum free space?,https://github.com/bitcoin/bitcoin/pull/15870#issuecomment-492748421,492748421,
jamesob,2019-05-16T14:13:43Z,"> @jamesob you mean an option to ensure a minimum free space?\n\nIf you mean ""prune as little as possible and only until necessitated by lack of space,"" yes. Some kind of adaptive prune would just be a measure to avoid hitting an out-of-disk error for as long as possible. But this is out of scope in terms of this PR so maybe I'll file an issue later or something.",https://github.com/bitcoin/bitcoin/pull/15870#issuecomment-493084995,493084995,
Sjors,2019-05-16T15:54:11Z,post-merge utACK,https://github.com/bitcoin/bitcoin/pull/15870#issuecomment-493126097,493126097,
promag,2019-04-24T20:33:49Z,Move to the chain lock?,https://github.com/bitcoin/bitcoin/pull/15870#discussion_r278306246,278306246,src/interfaces/chain.cpp
promag,2019-04-24T20:38:11Z,A block can be pruned before RescanWallet (L202). What would be the error then?,https://github.com/bitcoin/bitcoin/pull/15870#discussion_r278307845,278307845,src/wallet/rpcdump.cpp
MarcoFalke,2019-04-24T20:57:57Z,"It will throw an error `""Rescan was unable to fully rescan the blockchain. Some transactions may be missing.""`",https://github.com/bitcoin/bitcoin/pull/15870#discussion_r278315111,278315111,src/wallet/rpcdump.cpp
MarcoFalke,2019-04-24T20:58:28Z,Why?,https://github.com/bitcoin/bitcoin/pull/15870#discussion_r278315293,278315293,src/interfaces/chain.cpp
MarcoFalke,2019-04-24T21:00:32Z,"Sorry for the brief reply, but see here:\n\nhttps://github.com/bitcoin/bitcoin/blob/fad84519391a05f2ad42381cca9135323b709657/src/interfaces/chain.h#L69-L73\n\nThe chain lock is deprecated and will be removed in the future.",https://github.com/bitcoin/bitcoin/pull/15870#discussion_r278316048,278316048,src/interfaces/chain.cpp
jnewbery,2019-05-03T18:59:19Z,"nit: indentation\n\nEDIT: just remove this function entirely",https://github.com/bitcoin/bitcoin/pull/15870#discussion_r280892339,280892339,test/functional/wallet_import_rescan.py
MarcoFalke,2019-05-03T19:33:35Z,Done,https://github.com/bitcoin/bitcoin/pull/15870#discussion_r280902472,280902472,test/functional/wallet_import_rescan.py
jonatack,2019-05-06T16:11:54Z,Nit: Update year in line 1? `// Copyright (c) 2009-2018 The Bitcoin Core developers`,https://github.com/bitcoin/bitcoin/pull/15870#discussion_r281252918,281252918,src/wallet/rpcdump.cpp
jonatack,2019-05-06T16:13:15Z,Nit: space after // in lines 4222 and 4223,https://github.com/bitcoin/bitcoin/pull/15870#discussion_r281253401,281253401,src/wallet/wallet.cpp
jonatack,2019-05-06T16:16:25Z,"Perhaps out of PR scope but the docs in lines 4222 and 4223 could be clearer, e.g. is ""error"" the end of a sentence and ""this"" the start of a sentence, or...",https://github.com/bitcoin/bitcoin/pull/15870#discussion_r281254503,281254503,src/wallet/wallet.cpp
jonatack,2019-05-06T16:36:31Z,Does the code doc in 588 correspond correctly with the error message in 589? ,https://github.com/bitcoin/bitcoin/pull/15870#discussion_r281261523,281261523,src/wallet/rpcdump.cpp
jonatack,2019-05-06T16:45:40Z,"Would it be worth extracting this code block repeated in `importprivkey`, `importaddress`, `importpubkey`, and `importwallet` (the latter with a different error message).\n\n```cpp\n    if (fRescan && pwallet->chain().havePruned()) {\n        // Exit early and print an error.\n        // If a block is pruned after this check, we will import the key(s),\n        // but fail the rescan with a ",https://github.com/bitcoin/bitcoin/pull/15870#discussion_r281264587,281264587,src/wallet/rpcdump.cpp
MarcoFalke,2019-05-06T17:01:41Z,"Yes, ""importing wallet"" means ""importing key(s)"", I believe.",https://github.com/bitcoin/bitcoin/pull/15870#discussion_r281270503,281270503,src/wallet/rpcdump.cpp
MarcoFalke,2019-05-06T17:02:40Z,"Yeah, could make sense. Will do if I have to touch for other reasons.",https://github.com/bitcoin/bitcoin/pull/15870#discussion_r281270849,281270849,src/wallet/rpcdump.cpp
MarcoFalke,2019-05-06T17:03:36Z,"This is only a dev comment, so no need to over-optimize. Will take specific suggestions if I need to touch this pull for other reasons, though.",https://github.com/bitcoin/bitcoin/pull/15870#discussion_r281271143,281271143,src/wallet/wallet.cpp
jnewbery,2019-05-06T17:20:58Z,"I don't think ""no need to over-optimize"" is a helpful response. The grammar is wrong. Why not correct it?",https://github.com/bitcoin/bitcoin/pull/15870#discussion_r281277772,281277772,src/wallet/wallet.cpp
MarcoFalke,2019-05-06T18:07:26Z,Done with a scripted diff,https://github.com/bitcoin/bitcoin/pull/15870#discussion_r281294785,281294785,src/wallet/rpcdump.cpp
MarcoFalke,2019-05-06T18:07:46Z,Added a dot and space if that is what you meant,https://github.com/bitcoin/bitcoin/pull/15870#discussion_r281294894,281294894,src/wallet/wallet.cpp
ryanofsky,2019-05-15T16:05:35Z,Maybe `s/in pruned mode/when blocks are pruned/` for consistency with the other error messages.,https://github.com/bitcoin/bitcoin/pull/15870#discussion_r284334252,284334252,src/wallet/rpcdump.cpp
ryanofsky,2019-05-15T17:07:07Z,"Now there is no longer any test coverage for the ""rescan is disabled"" cases, but I'm not sure if there's an easy way to add it back. Maybe a `pruneblockchain` RPC call could be added.",https://github.com/bitcoin/bitcoin/pull/15870#discussion_r284359219,284359219,test/functional/wallet_import_rescan.py
MarcoFalke,2019-05-15T17:50:55Z,"If a test was added, it should also (or more importantly) test `importmulti`, so I am not actually decreasing test coverage here.",https://github.com/bitcoin/bitcoin/pull/15870#discussion_r284376933,284376933,test/functional/wallet_import_rescan.py
MarcoFalke,2019-05-15T17:51:21Z,"I agree that a test would be nice for that case, but can be done in a follow up pull request.",https://github.com/bitcoin/bitcoin/pull/15870#discussion_r284377125,284377125,test/functional/wallet_import_rescan.py
ryanofsky,2019-05-15T18:01:30Z,"> it should also (or more importantly) test importmulti\n\nIn case it helps, there is currently a unit test for importmulti behavior with pruning: https://github.com/bitcoin/bitcoin/blob/2d16fb7a2b6a9e5a2535295d2de03e27c2438d1f/src/wallet/test/wallet_tests.cpp#L158",https://github.com/bitcoin/bitcoin/pull/15870#discussion_r284381570,284381570,test/functional/wallet_import_rescan.py
MarcoFalke,2019-05-15T18:11:59Z,Done (and added a release note),https://github.com/bitcoin/bitcoin/pull/15870#discussion_r284385846,284385846,src/wallet/rpcdump.cpp
promag,2019-05-16T13:44:38Z,"faf3729242c5e9486e137e549f05bf20bd3908a0\n\nYeah, in a follow up is fine.",https://github.com/bitcoin/bitcoin/pull/15870#discussion_r284713285,284713285,src/wallet/rpcdump.cpp
promag,2019-05-16T13:53:10Z,"fa7e311e169349bfcf1dab8b980724e8ddf4e749\n\nThis should be in 1s commit.",https://github.com/bitcoin/bitcoin/pull/15870#discussion_r284717609,284717609,src/wallet/rpcdump.cpp
promag,2019-05-16T13:55:09Z,"faf3729242c5e9486e137e549f05bf20bd3908a0\n\nThe dump file contains timestamps so, correct me if I'm wrong, it could only throw this error if earliest is pruned - the same for `importmulti` if timestamps are given.\n\nEdit: especially when manual pruning.",https://github.com/bitcoin/bitcoin/pull/15870#discussion_r284718591,284718591,src/wallet/rpcdump.cpp
jnewbery,2019-05-16T14:50:51Z,"I'm not suggesting you change this PR, but for future reference we now have a handy `WITH_LOCK` macro: https://github.com/bitcoin/bitcoin/blob/fd61b9fc22faaa946ca43211c6c43b40ca4a860c/src/sync.h#L209",https://github.com/bitcoin/bitcoin/pull/15870#discussion_r284747583,284747583,src/interfaces/chain.cpp
MarcoFalke,2019-05-16T15:20:10Z,Sounds like a nice follow up pull request,https://github.com/bitcoin/bitcoin/pull/15870#discussion_r284762760,284762760,src/wallet/rpcdump.cpp
MarcoFalke,2019-05-16T15:20:55Z,I fail to see how this makes the code any easier to read,https://github.com/bitcoin/bitcoin/pull/15870#discussion_r284763116,284763116,src/interfaces/chain.cpp
