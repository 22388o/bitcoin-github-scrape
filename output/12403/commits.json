[
  {
    "sha": "ff08eb545d04957ad70bee6655bd47dcb61c2b60",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZjA4ZWI1NDVkMDQ5NTdhZDcwYmVlNjY1NWJkNDdkY2I2MWMyYjYw",
    "commit": {
      "author": {
        "name": "zablon Baraka",
        "email": "zonjoro@yahoo.ca",
        "date": "2018-02-10T08:04:24Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2018-02-10T08:04:24Z"
      },
      "message": "Update miner.cpp",
      "tree": {
        "sha": "b6bd89a4f6e6dca5461b9acd686582da38a2e4f4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b6bd89a4f6e6dca5461b9acd686582da38a2e4f4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ff08eb545d04957ad70bee6655bd47dcb61c2b60",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJafqeICRBK7hj4Ov3rIwAAdHIIAJOD3mS65zqfC3teMeGQtsvs\nFsvS1HNxkn9zlOHoPosoe7BMRAU0UzoGn2mCZc5zl1VZngeDSbnfm4EXZR9PS40e\niwYC0FpS1moIpaDDN7WzixcdtY/EPbdWgJap1p3A1GxaKLs7mMBYn3schm6JEMn4\n7TT+kw2BK7bdqQdksy+g3jK+/mb29F5BPHqCcY7D8IkJguLGxw0bGwJGJ0CiGUQN\nwVJ2Q692HuBCKeUmdw/t2elZ5ZdnW8VL1/kzd4HsFGdm/ltL80vSHmDSglJIOyrQ\noxq7BYX0Jp6lZOOBRMVQ+8DHGd6A53VtRkDtFljTSWHC4/8X9EBDjn/wKDmV+6E=\n=ce/Z\n-----END PGP SIGNATURE-----\n",
        "payload": "tree b6bd89a4f6e6dca5461b9acd686582da38a2e4f4\nparent 89005ddad1c4a9732ecae47c7de34b4de157f48f\nauthor zablon Baraka <zonjoro@yahoo.ca> 1518249864 +0000\ncommitter GitHub <noreply@github.com> 1518249864 +0000\n\nUpdate miner.cpp"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff08eb545d04957ad70bee6655bd47dcb61c2b60",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ff08eb545d04957ad70bee6655bd47dcb61c2b60",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff08eb545d04957ad70bee6655bd47dcb61c2b60/comments",
    "author": {
      "login": "zablonbaraka85",
      "id": 22521681,
      "node_id": "MDQ6VXNlcjIyNTIxNjgx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22521681?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zablonbaraka85",
      "html_url": "https://github.com/zablonbaraka85",
      "followers_url": "https://api.github.com/users/zablonbaraka85/followers",
      "following_url": "https://api.github.com/users/zablonbaraka85/following{/other_user}",
      "gists_url": "https://api.github.com/users/zablonbaraka85/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zablonbaraka85/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zablonbaraka85/subscriptions",
      "organizations_url": "https://api.github.com/users/zablonbaraka85/orgs",
      "repos_url": "https://api.github.com/users/zablonbaraka85/repos",
      "events_url": "https://api.github.com/users/zablonbaraka85/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zablonbaraka85/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "89005ddad1c4a9732ecae47c7de34b4de157f48f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/89005ddad1c4a9732ecae47c7de34b4de157f48f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/89005ddad1c4a9732ecae47c7de34b4de157f48f"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 7,
      "deletions": 28
    },
    "files": [
      {
        "sha": "7eb0579c0620329ce813c543fc0a5766f6056a94",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 28,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff08eb545d04957ad70bee6655bd47dcb61c2b60/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff08eb545d04957ad70bee6655bd47dcb61c2b60/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=ff08eb545d04957ad70bee6655bd47dcb61c2b60",
        "patch": "@@ -1,7 +1,5 @@\n-// Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2017 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+// Copyright (c) 2018 zablon onjoro\n+\n \n #include <miner.h>\n \n@@ -141,11 +139,7 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& sc\n                        : pblock->GetBlockTime();\n \n     // Decide whether to include witness transactions\n-    // This is only needed in case the witness softfork activation is reverted\n-    // (which would require a very deep reorganization) or when\n-    // -promiscuousmempoolflags is used.\n-    // TODO: replace this with a call to main to assess validity of a mempool\n-    // transaction (which in most cases can be a no-op).\n+   \n     fIncludeWitness = IsWitnessEnabled(pindexPrev, chainparams.GetConsensus()) && fMineWitnessTx;\n \n     int nPackagesSelected = 0;\n@@ -213,9 +207,7 @@ bool BlockAssembler::TestPackage(uint64_t packageSize, int64_t packageSigOpsCost\n }\n \n // Perform transaction-level checks before adding to block:\n-// - transaction finality (locktime)\n-// - premature witness (in case segwit transactions are added to mempool before\n-//   segwit activation)\n+\n bool BlockAssembler::TestPackageTransactions(const CTxMemPool::setEntries& package)\n {\n     for (const CTxMemPool::txiter it : package) {\n@@ -273,15 +265,7 @@ int BlockAssembler::UpdatePackagesForAdded(const CTxMemPool::setEntries& already\n     return nDescendantsUpdated;\n }\n \n-// Skip entries in mapTx that are already in a block or are present\n-// in mapModifiedTx (which implies that the mapTx ancestor state is\n-// stale due to ancestor inclusion in the block)\n-// Also skip transactions that we've already failed to add. This can happen if\n-// we consider a transaction in mapModifiedTx and it fails: we can then\n-// potentially consider it again while walking mapTx.  It's currently\n-// guaranteed to fail again, but as a belt-and-suspenders check we put it in\n-// failedTx and avoid re-evaluation, since the re-evaluation would be using\n-// cached size/sigops/fee values that are not actually correct.\n+// Skip entries in mapTx that are already in a block \n bool BlockAssembler::SkipMapTxEntry(CTxMemPool::txiter it, indexed_modified_transaction_set &mapModifiedTx, CTxMemPool::setEntries &failedTx)\n {\n     assert (it != mempool.mapTx.end());\n@@ -291,9 +275,7 @@ bool BlockAssembler::SkipMapTxEntry(CTxMemPool::txiter it, indexed_modified_tran\n void BlockAssembler::SortForBlock(const CTxMemPool::setEntries& package, CTxMemPool::txiter entry, std::vector<CTxMemPool::txiter>& sortedEntries)\n {\n     // Sort package by ancestor count\n-    // If a transaction A depends on transaction B, then A's ancestor count\n-    // must be greater than B's.  So this is sufficient to validly order the\n-    // transactions for block inclusion.\n+    \n     sortedEntries.clear();\n     sortedEntries.insert(sortedEntries.begin(), package.begin(), package.end());\n     std::sort(sortedEntries.begin(), sortedEntries.end(), CompareTxIterByAncestorCount());\n@@ -305,10 +287,7 @@ void BlockAssembler::SortForBlock(const CTxMemPool::setEntries& package, CTxMemP\n // for block inclusion, we need an alternate method of updating the feerate\n // of a transaction with its not-yet-selected ancestors as we go.\n // This is accomplished by walking the in-mempool descendants of selected\n-// transactions and storing a temporary modified state in mapModifiedTxs.\n-// Each time through the loop, we compare the best transaction in\n-// mapModifiedTxs with the next transaction in the mempool to decide what\n-// transaction package to work on next.\n+// transactions and storing a temp\n void BlockAssembler::addPackageTxs(int &nPackagesSelected, int &nDescendantsUpdated)\n {\n     // mapModifiedTx will store sorted packages after they are modified"
      }
    ]
  }
]