[
  {
    "sha": "923463a05be5822800e65be1783a3fcff80c5845",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MjM0NjNhMDViZTU4MjI4MDBlNjViZTE3ODNhM2ZjZmY4MGM1ODQ1",
    "commit": {
      "author": {
        "name": "Jeff Garzik",
        "email": "jeff@garzik.org",
        "date": "2011-08-08T20:08:49Z"
      },
      "committer": {
        "name": "Jeff Garzik",
        "email": "jgarzik@pobox.com",
        "date": "2011-08-08T20:08:49Z"
      },
      "message": "RPC: form basis of RPC API versioning, and declare current one v1\n\nRPC server will now accept and parse /api/v%d URLs.  Any version other\nthan one (/api/v1) will be rejected with 404 not found.  URLs outside\n/api/v%d are ignored by this processing.\n\nCredit to 'cdhowie' for original code, which I stripped down quite\na bit from there.",
      "tree": {
        "sha": "f901e30e69d72100ea3b92912afea84275542a13",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f901e30e69d72100ea3b92912afea84275542a13"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/923463a05be5822800e65be1783a3fcff80c5845",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/923463a05be5822800e65be1783a3fcff80c5845",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/923463a05be5822800e65be1783a3fcff80c5845",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/923463a05be5822800e65be1783a3fcff80c5845/comments",
    "author": null,
    "committer": {
      "login": "jgarzik",
      "id": 494411,
      "node_id": "MDQ6VXNlcjQ5NDQxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/494411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jgarzik",
      "html_url": "https://github.com/jgarzik",
      "followers_url": "https://api.github.com/users/jgarzik/followers",
      "following_url": "https://api.github.com/users/jgarzik/following{/other_user}",
      "gists_url": "https://api.github.com/users/jgarzik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jgarzik/subscriptions",
      "organizations_url": "https://api.github.com/users/jgarzik/orgs",
      "repos_url": "https://api.github.com/users/jgarzik/repos",
      "events_url": "https://api.github.com/users/jgarzik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jgarzik/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eb20f3c8f5258076d195176ac589a869a9f24708",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb20f3c8f5258076d195176ac589a869a9f24708",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eb20f3c8f5258076d195176ac589a869a9f24708"
      }
    ],
    "stats": {
      "total": 60,
      "additions": 54,
      "deletions": 6
    },
    "files": [
      {
        "sha": "1551657f7b56bc468d084dcfdb23079c6df23949",
        "filename": "src/rpc.cpp",
        "status": "modified",
        "additions": 54,
        "deletions": 6,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/923463a05be5822800e65be1783a3fcff80c5845/src/rpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/923463a05be5822800e65be1783a3fcff80c5845/src/rpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc.cpp?ref=923463a05be5822800e65be1783a3fcff80c5845",
        "patch": "@@ -1837,7 +1837,18 @@ static string HTTPReply(int nStatus, const string& strMsg)\n         strMsg.c_str());\n }\n \n-int ReadHTTPStatus(std::basic_istream<char>& stream)\n+string ReadHTTPRequestLine(std::basic_istream<char>& stream)\n+{\n+    string str;\n+    getline(stream, str);\n+    vector<string> vWords;\n+    boost::split(vWords, str, boost::is_any_of(\" \"));\n+    if (vWords.size() < 2)\n+        return \"\";\n+    return vWords[1];\n+}\n+\n+int ReadHTTPResponseStatus(std::basic_istream<char>& stream)\n {\n     string str;\n     getline(stream, str);\n@@ -1873,13 +1884,38 @@ int ReadHTTPHeader(std::basic_istream<char>& stream, map<string, string>& mapHea\n     return nLen;\n }\n \n-int ReadHTTP(std::basic_istream<char>& stream, map<string, string>& mapHeadersRet, string& strMessageRet)\n+bool ReadHTTPRequest(std::basic_istream<char>& stream, string& strUrl, map<string, string>& mapHeadersRet, string& strMessageRet)\n+{\n+    mapHeadersRet.clear();\n+    strMessageRet = \"\";\n+\n+    // Read request URL\n+    strUrl = ReadHTTPRequestLine(stream);\n+    if (strUrl == \"\")\n+        return false;\n+\n+    // Read headers\n+    int nLen = ReadHTTPHeader(stream, mapHeadersRet);\n+    if (nLen < 0 || nLen > MAX_SIZE)\n+        return false;\n+\n+    if (nLen > 0)\n+    {\n+        vector<char> vch(nLen);\n+        stream.read(&vch[0], nLen);\n+        strMessageRet = string(vch.begin(), vch.end());\n+    }\n+\n+    return true;\n+}\n+\n+int ReadHTTPResponse(std::basic_istream<char>& stream, map<string, string>& mapHeadersRet, string& strMessageRet)\n {\n     mapHeadersRet.clear();\n     strMessageRet = \"\";\n \n     // Read status\n-    int nStatus = ReadHTTPStatus(stream);\n+    int nStatus = ReadHTTPResponseStatus(stream);\n \n     // Read header\n     int nLen = ReadHTTPHeader(stream, mapHeadersRet);\n@@ -2158,17 +2194,29 @@ void ThreadRPCServer2(void* parg)\n             continue;\n         }\n \n+        string strUrl;\n         map<string, string> mapHeaders;\n         string strRequest;\n \n-        boost::thread api_caller(ReadHTTP, boost::ref(stream), boost::ref(mapHeaders), boost::ref(strRequest));\n+        int api_version = 1;\n+\n+        boost::thread api_caller(ReadHTTPRequest, boost::ref(stream), boost::ref(strUrl), boost::ref(mapHeaders), boost::ref(strRequest));\n         if (!api_caller.timed_join(boost::posix_time::seconds(GetArg(\"-rpctimeout\", 30))))\n         {   // Timed out:\n             acceptor.cancel();\n-            printf(\"ThreadRPCServer ReadHTTP timeout\\n\");\n+            printf(\"ThreadRPCServer ReadHTTPRequest timeout\\n\");\n             continue;\n         }\n \n+        static const char *chUrlPrefix = \"/api/v\";\n+        if (boost::starts_with(strUrl, chUrlPrefix)) {\n+            api_version = atoi(&(strUrl.c_str())[strlen(chUrlPrefix)]);\n+            if (api_version != 1) {\n+                stream << HTTPReply(404, \"\") << std::flush;\n+                continue;\n+            }\n+        }\n+\n         // Check authorization\n         if (mapHeaders.count(\"authorization\") == 0)\n         {\n@@ -2298,7 +2346,7 @@ Object CallRPC(const string& strMethod, const Array& params)\n     // Receive reply\n     map<string, string> mapHeaders;\n     string strReply;\n-    int nStatus = ReadHTTP(stream, mapHeaders, strReply);\n+    int nStatus = ReadHTTPResponse(stream, mapHeaders, strReply);\n     if (nStatus == 401)\n         throw runtime_error(\"incorrect rpcuser or rpcpassword (authorization failed)\");\n     else if (nStatus >= 400 && nStatus != 400 && nStatus != 404 && nStatus != 500)"
      }
    ]
  }
]