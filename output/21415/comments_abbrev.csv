DrahtBot,2021-03-11 06:58:35,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #21413 ([rfc] add option to bypass contextual timelocks in testmempoolaccept? by glozow)\n* #21365 (Basic Taproot signing ",https://github.com/bitcoin/bitcoin/pull/21415#issuecomment-796510429,796510429,
JeremyRubin,2021-03-11 17:58:30,might be worth changing the style guide -- I personally think that using nullopt is a good tradeoff between verbosity and legibility ie https://stackoverflow.com/questions/62933403/why-do-we-need-stdnullopt in many cases.,https://github.com/bitcoin/bitcoin/pull/21415#issuecomment-796927801,796927801,
jonatack,2021-03-11 18:05:18,"> might be worth changing the style guide -- I personally think that using nullopt is a good tradeoff between verbosity and legibility ie https://stackoverflow.com/questions/62933403/why-do-we-need-stdnullopt in many cases.\n\nSimilar questions in a couple places today: https://github.com/bitcoin/bitcoin/pull/21407#discussion_r592261547",https://github.com/bitcoin/bitcoin/pull/21415#issuecomment-796932839,796932839,
practicalswift,2021-03-11 22:12:32,"Concept ACK\n\nThanks for removing old cruft!",https://github.com/bitcoin/bitcoin/pull/21415#issuecomment-797084608,797084608,
fanquake,2021-03-15 04:03:16,"[Similar to #21404](https://github.com/bitcoin/bitcoin/pull/21404#issuecomment-797163202) I've left comments where new `Optional<>` usage is being introduced. i.e [here](https://github.com/bitcoin/bitcoin/pull/16037/files#r594007135), [here](https://github.com/bitcoin/bitcoin/pull/16545/files#r594006161), [here](https://github.com/bitcoin/bitcoin/pull/18554/files#r594005916) etc.\n\n> why no s/#",https://github.com/bitcoin/bitcoin/pull/21415#issuecomment-799073629,799073629,
fanquake,2021-03-15 08:49:50,"I've added new includes, sorted existing includes, removed a comment and realigned other comments.",https://github.com/bitcoin/bitcoin/pull/21415#issuecomment-799235675,799235675,
jnewbery,2021-03-15 09:53:27,ACK dca584e768,https://github.com/bitcoin/bitcoin/pull/21415#issuecomment-799282384,799282384,
practicalswift,2021-03-15 16:06:58,cr ACK dca584e7684c38afb9e5267104d0c0a008fd7477: patch looks correct. The AppVeyor failure looks spurious.,https://github.com/bitcoin/bitcoin/pull/21415#issuecomment-799541587,799541587,
DrahtBot,2021-03-15 16:48:45,<!--4a62be1de6b64f3ed646cdc7932c8cf5-->\n🕵️ @achow101 @sipa have been requested to review this pull request as specified in the REVIEWERS file.,https://github.com/bitcoin/bitcoin/pull/21415#issuecomment-799573635,799573635,
laanwj,2021-03-16 12:58:40,"> I personally think that using nullopt is a good tradeoff between verbosity and legibility ie https://stackoverflow.com/questions/62933403/why-do-we-need-stdnullopt in many cases.\n\nI have the same opinion about this. Using `std::optional` is a no-brainer but replacing `nullopt` with `{}` doesn't always seem like a readability improvement to me. `{}` is this kind of wildcard that can be anythi",https://github.com/bitcoin/bitcoin/pull/21415#issuecomment-800236640,800236640,
fanquake,2021-03-17 07:05:10,"> I have the same opinion about this.\n\nOk. I've  dropped f603e792c083fe9c9072dc3e753dcf9922583ee0.",https://github.com/bitcoin/bitcoin/pull/21415#issuecomment-800849639,800849639,
practicalswift,2021-03-17 08:28:20,cr ACK ebc4ab721b0371c0ef217c0f5bd7d42613e951e6: patch looks correct,https://github.com/bitcoin/bitcoin/pull/21415#issuecomment-800894960,800894960,
jnewbery,2021-03-17 09:04:40,utACK ebc4ab721b0371c0ef217c0f5bd7d42613e951e6,https://github.com/bitcoin/bitcoin/pull/21415#issuecomment-800917743,800917743,
laanwj,2021-03-17 11:17:10,Code review ACK ebc4ab721b0371c0ef217c0f5bd7d42613e951e6,https://github.com/bitcoin/bitcoin/pull/21415#issuecomment-801001195,801001195,
jnewbery,2021-03-11 10:29:22,You could realign these comments if you wanted to be nice.,https://github.com/bitcoin/bitcoin/pull/21415#discussion_r592242476,592242476,src/node/psbt.h
jnewbery,2021-03-11 10:37:53,It may be slightly more idiomatic to replace all the `return std::nullopt;` with `return {};`,https://github.com/bitcoin/bitcoin/pull/21415#discussion_r592248462,592248462,src/net.cpp
jnewbery,2021-03-11 10:39:08,Perhaps `msg.reset()` is more idiomatic.,https://github.com/bitcoin/bitcoin/pull/21415#discussion_r592249385,592249385,src/net.cpp
jnewbery,2021-03-11 10:41:11,"```suggestion\n    return {};\n```",https://github.com/bitcoin/bitcoin/pull/21415#discussion_r592250795,592250795,src/txmempool.cpp
jnewbery,2021-03-11 10:43:01,No need for these initializers. `std::optional` default initializes to `std::nullopt`,https://github.com/bitcoin/bitcoin/pull/21415#discussion_r592252059,592252059,src/validation.h
jnewbery,2021-03-11 10:43:44,"More idiomatic:\n\n```suggestion\n        if (active && type) {\n```",https://github.com/bitcoin/bitcoin/pull/21415#discussion_r592252607,592252607,src/wallet/rpcdump.cpp
jnewbery,2021-03-11 10:44:26,"```suggestion\n        if (!cc.m_signal_bip125_rbf) cc.m_signal_bip125_rbf = true;\n```",https://github.com/bitcoin/bitcoin/pull/21415#discussion_r592253079,592253079,src/wallet/rpcwallet.cpp
jnewbery,2021-03-11 10:45:18,"```suggestion\n    if (!load_on_startup) return;\n```",https://github.com/bitcoin/bitcoin/pull/21415#discussion_r592253680,592253680,src/wallet/wallet.cpp
jnewbery,2021-03-11 10:47:08,Not required. `std::optional<>` will default initialize to `std::nullopt`. These lines can be removed entirely.,https://github.com/bitcoin/bitcoin/pull/21415#discussion_r592254980,592254980,src/miner.cpp
MarcoFalke,2021-03-11 11:16:36,"They are static, but this should still zero initialize: https://en.cppreference.com/w/cpp/language/zero_initialization",https://github.com/bitcoin/bitcoin/pull/21415#discussion_r592274874,592274874,src/miner.cpp
MarcoFalke,2021-03-11 11:18:07,run a scripted diff with clang format on the diff? (*hides),https://github.com/bitcoin/bitcoin/pull/21415#discussion_r592275982,592275982,src/node/psbt.h
jnewbery,2021-03-11 13:45:07,"Does this seem right to you, @MarcoFalke:\n\n```diff\ndiff --git a/src/miner.cpp b/src/miner.cpp\nindex 56543e743e..5239836e0f 100644\n--- a/src/miner.cpp\n+++ b/src/miner.cpp\n@@ -96,8 +96,8 @@ void BlockAssembler::resetBlock()\n     nFees = 0;\n }\n \n-std::optional<int64_t> BlockAssembler::m_last_block_num_txs{std::nullopt};\n-std::optional<int64_t> BlockAssembler::m_last_block_weig",https://github.com/bitcoin/bitcoin/pull/21415#discussion_r592370974,592370974,src/miner.cpp
MarcoFalke,2021-03-11 15:36:09,Is the `inline` needed? Any version that passes mining_basic.py under valgrind should be correct. See fa178a6385bf300499fb18940051fc4142fb5b6b,https://github.com/bitcoin/bitcoin/pull/21415#discussion_r592464712,592464712,src/miner.cpp
jnewbery,2021-03-11 17:13:10,"I'm pretty sure inline is required. Here's what you get if the variables aren't `inline`:\n\n```\nIn file included from miner.cpp:6:\n./miner.h:162:35: error: non-const static data member must be initialized out of line\n    static std::optional<int64_t> m_last_block_num_txs{};\n                                  ^~~~~~~~~~~~~~~~~~~~~~\n./miner.h:163:35: error: non-const static data member m",https://github.com/bitcoin/bitcoin/pull/21415#discussion_r592546422,592546422,src/miner.cpp
MarcoFalke,2021-03-11 20:02:45,thanks. Seems fine to change this to `inline static` initialization.,https://github.com/bitcoin/bitcoin/pull/21415#discussion_r592683221,592683221,src/miner.cpp
fanquake,2021-03-15 05:07:33,"This should also finally quell the `-Wmaybe-uninitialized ` false positives we've seen. i.e #21318, #21248. ",https://github.com/bitcoin/bitcoin/pull/21415#discussion_r594052832,594052832,src/txmempool.cpp
jnewbery,2021-03-15 07:59:36,Are you able to separate the standard library includes from the local project includes?,https://github.com/bitcoin/bitcoin/pull/21415#discussion_r594116665,594116665,src/bench/wallet_balance.cpp
jnewbery,2021-03-15 08:00:32,Remove comment (and separate from project includes),https://github.com/bitcoin/bitcoin/pull/21415#discussion_r594117169,594117169,src/interfaces/chain.h
MarcoFalke,2021-03-15 08:08:22,"style nit: :eye: Comment wrong. Also, would be nice if you sorted the includes",https://github.com/bitcoin/bitcoin/pull/21415#discussion_r594121340,594121340,src/interfaces/chain.h
jnewbery,2021-03-15 08:16:04,"Just remove these from the initializer list entirely:\n\n```\n    explicit MempoolAcceptResult(TxValidationState state)\n        : m_result_type(ResultType::INVALID), m_state(state)\n    { Assume(!state.IsValid()); } // Can be invalid or error\n```",https://github.com/bitcoin/bitcoin/pull/21415#discussion_r594125452,594125452,src/validation.h
practicalswift,2021-03-15 16:00:22,Nit: `msg.reset();` is now used on L755. Was the intention to use it also on L750?,https://github.com/bitcoin/bitcoin/pull/21415#discussion_r594466260,594466260,src/net.cpp
ryanofsky,2021-03-15 19:15:25,"At first glance, I thought adding inline keyword here might cause separate `m_last_block_num_txs` and `m_last_block_weight` variable instances to exist in different translation units (different variables with the same name `miner.cpp` and `rpc/mining.cpp` that would lead to bugs), but apparently there is new linker magic in c++17 to prevent this!",https://github.com/bitcoin/bitcoin/pull/21415#discussion_r594615829,594615829,src/miner.h
jnewbery,2021-03-15 19:30:26,✨ m a g i c ✨,https://github.com/bitcoin/bitcoin/pull/21415#discussion_r594625426,594625426,src/miner.h
laanwj,2021-03-16 12:55:14,Good to know this,https://github.com/bitcoin/bitcoin/pull/21415#discussion_r595141262,595141262,src/miner.h
jnewbery,2021-03-16 13:24:15,(more background here: https://github.com/bitcoin/bitcoin/pull/21415#discussion_r592546422),https://github.com/bitcoin/bitcoin/pull/21415#discussion_r595163911,595163911,src/miner.h
