[
  {
    "sha": "57e980d13ca488031bde6ef197cf34d493d36796",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1N2U5ODBkMTNjYTQ4ODAzMWJkZTZlZjE5N2NmMzRkNDkzZDM2Nzk2",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-03-15T02:41:30Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-03-15T02:41:30Z"
      },
      "message": "scripted-diff: remove Optional & nullopt\n\n-BEGIN VERIFY SCRIPT-\ngit rm src/optional.h\n\nsed -i -e 's/Optional</std::optional</g' $(git grep -l 'Optional<' src)\n\nsed -i -e 's/{nullopt}/{std::nullopt}/g' $(git grep -l 'nullopt' src)\nsed -i -e 's/ nullopt;/ std::nullopt;/g' $(git grep -l 'nullopt' src)\nsed -i -e 's/ nullopt)/ std::nullopt)/g' $(git grep -l 'nullopt' src)\nsed -i -e 's/(nullopt)/(std::nullopt)/g' $(git grep -l 'nullopt' src)\nsed -i -e 's/ nullopt,/ std::nullopt,/g' $(git grep -l 'nullopt' src)\nsed -i -e 's/? nullopt :/? std::nullopt :/g' $(git grep -l 'nullopt' src)\nsed -i -e 's/: nullopt}/: std::nullopt}/g' $(git grep -l 'nullopt' src)\n\nsed -i -e '/optional.h \\\\/d' src/Makefile.am\n\nsed -i -e '/#include <optional.h>/d' src/test/fuzz/autofile.cpp src/test/fuzz/buffered_file.cpp src/test/fuzz/node_eviction.cpp\n\nsed -i -e 's/#include <optional.h>/#include <optional>/g' $(git grep -l '#include <optional.h>' src)\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "c9e6cfe95fcf86a5618bda499e72b570fdb2efcc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c9e6cfe95fcf86a5618bda499e72b570fdb2efcc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/57e980d13ca488031bde6ef197cf34d493d36796",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmBOyVoACgkQLuufXMCV\nJsEUBxAAmfLLcoRfKzRYk0nk3pcpfVdCZbvAZ90LHqRoIgN7ysrTRfNsvBsSQyOS\noBoBxP14deqlvbA5Z28kAmo2S/qeLPjQ2ykVb61aXHbbxg3l3suqu9bsFsT9Uqyw\ntrVkq0hp/jD9Ig3lAjKjN/a6pq3ZImVXtO47nkVtKF/Bickmsxgh7lhd17KZlNIu\nZfB0EjqZ/nRxwqmuEgoXhn2fLuP/nPyvEHSIWUi8LSKLe2Ll5t8UJ1WaFFUxycbN\n/lQA4HScDOMMoUA+jNjEXW+f4v5uyHrQRm6CtwqLTMV2RwJTygt4KyJ94JAH11Mw\nzVlryuTkYEiyulunPAI40SvUKVKpXEZywELmf39gx3b30oN/OB7P9aA4W+pNn3wE\n2Z8vbljkQvCWD5pJYRKd8G/yWe8BsTBIgjdpEjqSZIf7LPx9RuAHJZDqL2IFzES7\ntCkNB/PKfl6TPjhxqMV/xLWT73A41tM6BQKs6XBSCIzKIYobfKwsmm7mGerd36Lu\nzSjQpzTPFx+IGWIS6HAJ42/HOMxMwMn3D27lt+zhV0HOeeowj9q/HW/D/LRdWouf\n9uk/WhftA6EQFtEMq8VHkywISgthXQ23aUn8XK6eei2HFU5utIo6bfBmwLcFJqMP\noJKtlnP1TcDny3NyjuqFIFArWs+RL/yYf+Fdh0k9BrlrDGT0hP8=\n=fPhp\n-----END PGP SIGNATURE-----",
        "payload": "tree c9e6cfe95fcf86a5618bda499e72b570fdb2efcc\nparent 3c631917f3e0da84ee48295b7d2e93bc202bae0c\nauthor fanquake <fanquake@gmail.com> 1615776090 +0800\ncommitter fanquake <fanquake@gmail.com> 1615776090 +0800\n\nscripted-diff: remove Optional & nullopt\n\n-BEGIN VERIFY SCRIPT-\ngit rm src/optional.h\n\nsed -i -e 's/Optional</std::optional</g' $(git grep -l 'Optional<' src)\n\nsed -i -e 's/{nullopt}/{std::nullopt}/g' $(git grep -l 'nullopt' src)\nsed -i -e 's/ nullopt;/ std::nullopt;/g' $(git grep -l 'nullopt' src)\nsed -i -e 's/ nullopt)/ std::nullopt)/g' $(git grep -l 'nullopt' src)\nsed -i -e 's/(nullopt)/(std::nullopt)/g' $(git grep -l 'nullopt' src)\nsed -i -e 's/ nullopt,/ std::nullopt,/g' $(git grep -l 'nullopt' src)\nsed -i -e 's/? nullopt :/? std::nullopt :/g' $(git grep -l 'nullopt' src)\nsed -i -e 's/: nullopt}/: std::nullopt}/g' $(git grep -l 'nullopt' src)\n\nsed -i -e '/optional.h \\\\/d' src/Makefile.am\n\nsed -i -e '/#include <optional.h>/d' src/test/fuzz/autofile.cpp src/test/fuzz/buffered_file.cpp src/test/fuzz/node_eviction.cpp\n\nsed -i -e 's/#include <optional.h>/#include <optional>/g' $(git grep -l '#include <optional.h>' src)\n-END VERIFY SCRIPT-\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/57e980d13ca488031bde6ef197cf34d493d36796",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/57e980d13ca488031bde6ef197cf34d493d36796",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/57e980d13ca488031bde6ef197cf34d493d36796/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3c631917f3e0da84ee48295b7d2e93bc202bae0c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c631917f3e0da84ee48295b7d2e93bc202bae0c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3c631917f3e0da84ee48295b7d2e93bc202bae0c"
      }
    ],
    "stats": {
      "total": 354,
      "additions": 165,
      "deletions": 189
    },
    "files": [
      {
        "sha": "07d046c32d1a4631607f61e9b78fc2371807b698",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57e980d13ca488031bde6ef197cf34d493d36796/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57e980d13ca488031bde6ef197cf34d493d36796/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=57e980d13ca488031bde6ef197cf34d493d36796",
        "patch": "@@ -182,7 +182,6 @@ BITCOIN_CORE_H = \\\n   node/ui_interface.h \\\n   node/utxo_snapshot.h \\\n   noui.h \\\n-  optional.h \\\n   outputtype.h \\\n   policy/feerate.h \\\n   policy/fees.h \\"
      },
      {
        "sha": "867be7296b4da3ad443267ebe4dbe04681dfb051",
        "filename": "src/bench/wallet_balance.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57e980d13ca488031bde6ef197cf34d493d36796/src/bench/wallet_balance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57e980d13ca488031bde6ef197cf34d493d36796/src/bench/wallet_balance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/wallet_balance.cpp?ref=57e980d13ca488031bde6ef197cf34d493d36796",
        "patch": "@@ -5,7 +5,7 @@\n #include <bench/bench.h>\n #include <interfaces/chain.h>\n #include <node/context.h>\n-#include <optional.h>\n+#include <optional>\n #include <test/util/mining.h>\n #include <test/util/setup_common.h>\n #include <test/util/wallet.h>\n@@ -26,7 +26,7 @@ static void WalletBalance(benchmark::Bench& bench, const bool set_dirty, const b\n     }\n     auto handler = test_setup->m_node.chain->handleNotifications({&wallet, [](CWallet*) {}});\n \n-    const Optional<std::string> address_mine{add_mine ? Optional<std::string>{getnewaddress(wallet)} : nullopt};\n+    const std::optional<std::string> address_mine{add_mine ? std::optional<std::string>{getnewaddress(wallet)} : std::nullopt};\n     if (add_watchonly) importaddress(wallet, ADDRESS_WATCHONLY);\n \n     for (int i = 0; i < 100; ++i) {"
      },
      {
        "sha": "de3c73c78a43a0e28c915171db1956519011ce10",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57e980d13ca488031bde6ef197cf34d493d36796/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57e980d13ca488031bde6ef197cf34d493d36796/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=57e980d13ca488031bde6ef197cf34d493d36796",
        "patch": "@@ -9,7 +9,7 @@\n \n #include <chainparamsbase.h>\n #include <clientversion.h>\n-#include <optional.h>\n+#include <optional>\n #include <rpc/client.h>\n #include <rpc/mining.h>\n #include <rpc/protocol.h>\n@@ -611,7 +611,7 @@ class DefaultRequestHandler: public BaseRequestHandler {\n     }\n };\n \n-static UniValue CallRPC(BaseRequestHandler* rh, const std::string& strMethod, const std::vector<std::string>& args, const Optional<std::string>& rpcwallet = {})\n+static UniValue CallRPC(BaseRequestHandler* rh, const std::string& strMethod, const std::vector<std::string>& args, const std::optional<std::string>& rpcwallet = {})\n {\n     std::string host;\n     // In preference order, we choose the following for the port:\n@@ -733,7 +733,7 @@ static UniValue CallRPC(BaseRequestHandler* rh, const std::string& strMethod, co\n  * @returns the RPC response as a UniValue object.\n  * @throws a CConnectionFailed std::runtime_error if connection failed or RPC server still in warmup.\n  */\n-static UniValue ConnectAndCallRPC(BaseRequestHandler* rh, const std::string& strMethod, const std::vector<std::string>& args, const Optional<std::string>& rpcwallet = {})\n+static UniValue ConnectAndCallRPC(BaseRequestHandler* rh, const std::string& strMethod, const std::vector<std::string>& args, const std::optional<std::string>& rpcwallet = {})\n {\n     UniValue response(UniValue::VOBJ);\n     // Execute and handle connection failures with -rpcwait.\n@@ -817,7 +817,7 @@ static void GetWalletBalances(UniValue& result)\n  */\n static UniValue GetNewAddress()\n {\n-    Optional<std::string> wallet_name{};\n+    std::optional<std::string> wallet_name{};\n     if (gArgs.IsArgSet(\"-rpcwallet\")) wallet_name = gArgs.GetArg(\"-rpcwallet\", \"\");\n     DefaultRequestHandler rh;\n     return ConnectAndCallRPC(&rh, \"getnewaddress\", /* args=*/{}, wallet_name);\n@@ -922,7 +922,7 @@ static int CommandLineRPC(int argc, char *argv[])\n         }\n         if (nRet == 0) {\n             // Perform RPC call\n-            Optional<std::string> wallet_name{};\n+            std::optional<std::string> wallet_name{};\n             if (gArgs.IsArgSet(\"-rpcwallet\")) wallet_name = gArgs.GetArg(\"-rpcwallet\", \"\");\n             const UniValue reply = ConnectAndCallRPC(rh.get(), method, args, wallet_name);\n "
      },
      {
        "sha": "50294ee375b5be0c6b5e81a265cfce72d8a61f19",
        "filename": "src/interfaces/chain.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57e980d13ca488031bde6ef197cf34d493d36796/src/interfaces/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57e980d13ca488031bde6ef197cf34d493d36796/src/interfaces/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.h?ref=57e980d13ca488031bde6ef197cf34d493d36796",
        "patch": "@@ -5,7 +5,7 @@\n #ifndef BITCOIN_INTERFACES_CHAIN_H\n #define BITCOIN_INTERFACES_CHAIN_H\n \n-#include <optional.h>               // For Optional and nullopt\n+#include <optional>               // For Optional and nullopt\n #include <primitives/transaction.h> // For CTransactionRef\n #include <util/settings.h>          // For util::SettingsValue\n \n@@ -94,7 +94,7 @@ class Chain\n     //! Get current chain height, not including genesis block (returns 0 if\n     //! chain only contains genesis block, nullopt if chain does not contain\n     //! any blocks)\n-    virtual Optional<int> getHeight() = 0;\n+    virtual std::optional<int> getHeight() = 0;\n \n     //! Get block hash. Height must be valid or this function will abort.\n     virtual uint256 getBlockHash(int height) = 0;\n@@ -109,7 +109,7 @@ class Chain\n     //! Return height of the highest block on chain in common with the locator,\n     //! which will either be the original block used to create the locator,\n     //! or one of its ancestors.\n-    virtual Optional<int> findLocatorFork(const CBlockLocator& locator) = 0;\n+    virtual std::optional<int> findLocatorFork(const CBlockLocator& locator) = 0;\n \n     //! Check if transaction will be final given chain height current time.\n     virtual bool checkFinalTx(const CTransaction& tx) = 0;\n@@ -154,7 +154,7 @@ class Chain\n     //! Return true if data is available for all blocks in the specified range\n     //! of blocks. This checks all blocks that are ancestors of block_hash in\n     //! the height range from min_height to max_height, inclusive.\n-    virtual bool hasBlocks(const uint256& block_hash, int min_height = 0, Optional<int> max_height = {}) = 0;\n+    virtual bool hasBlocks(const uint256& block_hash, int min_height = 0, std::optional<int> max_height = {}) = 0;\n \n     //! Check if transaction is RBF opt in.\n     virtual RBFTransactionState isRBFOptIn(const CTransaction& tx) = 0;"
      },
      {
        "sha": "53404e2b9d6406e6ef07741a7b658b2cadc6ac8b",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57e980d13ca488031bde6ef197cf34d493d36796/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57e980d13ca488031bde6ef197cf34d493d36796/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=57e980d13ca488031bde6ef197cf34d493d36796",
        "patch": "@@ -96,8 +96,8 @@ void BlockAssembler::resetBlock()\n     nFees = 0;\n }\n \n-Optional<int64_t> BlockAssembler::m_last_block_num_txs{nullopt};\n-Optional<int64_t> BlockAssembler::m_last_block_weight{nullopt};\n+std::optional<int64_t> BlockAssembler::m_last_block_num_txs{std::nullopt};\n+std::optional<int64_t> BlockAssembler::m_last_block_weight{std::nullopt};\n \n std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(CChainState& chainstate, const CScript& scriptPubKeyIn)\n {"
      },
      {
        "sha": "236d792f1e8946690422e98ca423080769a45c1b",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57e980d13ca488031bde6ef197cf34d493d36796/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57e980d13ca488031bde6ef197cf34d493d36796/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=57e980d13ca488031bde6ef197cf34d493d36796",
        "patch": "@@ -6,7 +6,7 @@\n #ifndef BITCOIN_MINER_H\n #define BITCOIN_MINER_H\n \n-#include <optional.h>\n+#include <optional>\n #include <primitives/block.h>\n #include <txmempool.h>\n #include <validation.h>\n@@ -160,8 +160,8 @@ class BlockAssembler\n     /** Construct a new block template with coinbase to scriptPubKeyIn */\n     std::unique_ptr<CBlockTemplate> CreateNewBlock(CChainState& chainstate, const CScript& scriptPubKeyIn);\n \n-    static Optional<int64_t> m_last_block_num_txs;\n-    static Optional<int64_t> m_last_block_weight;\n+    static std::optional<int64_t> m_last_block_num_txs;\n+    static std::optional<int64_t> m_last_block_weight;\n \n private:\n     // utility functions"
      },
      {
        "sha": "fb8e06d14ba7e464a5eeab1e34a07efe4338bd7c",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57e980d13ca488031bde6ef197cf34d493d36796/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57e980d13ca488031bde6ef197cf34d493d36796/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=57e980d13ca488031bde6ef197cf34d493d36796",
        "patch": "@@ -18,7 +18,7 @@\n #include <net_permissions.h>\n #include <netbase.h>\n #include <node/ui_interface.h>\n-#include <optional.h>\n+#include <optional>\n #include <protocol.h>\n #include <random.h>\n #include <scheduler.h>\n@@ -193,7 +193,7 @@ bool IsPeerAddrLocalGood(CNode *pnode)\n            IsReachable(addrLocal.GetNetwork());\n }\n \n-Optional<CAddress> GetLocalAddrForPeer(CNode *pnode)\n+std::optional<CAddress> GetLocalAddrForPeer(CNode *pnode)\n {\n     CAddress addrLocal = GetLocalAddress(&pnode->addr, pnode->GetLocalServices());\n     if (gArgs.GetBoolArg(\"-addrmantest\", false)) {\n@@ -215,7 +215,7 @@ Optional<CAddress> GetLocalAddrForPeer(CNode *pnode)\n         return addrLocal;\n     }\n     // Address is unroutable. Don't advertise.\n-    return nullopt;\n+    return std::nullopt;\n }\n \n // learn a new local address\n@@ -632,7 +632,7 @@ bool CNode::ReceiveMsgBytes(Span<const uint8_t> msg_bytes, bool& complete)\n         if (m_deserializer->Complete()) {\n             // decompose a transport agnostic CNetMessage from the deserializer\n             uint32_t out_err_raw_size{0};\n-            Optional<CNetMessage> result{m_deserializer->GetMessage(time, out_err_raw_size)};\n+            std::optional<CNetMessage> result{m_deserializer->GetMessage(time, out_err_raw_size)};\n             if (!result) {\n                 // Message deserialization failed.  Drop the message but don't disconnect the peer.\n                 // store the size of the corrupt message\n@@ -723,10 +723,10 @@ const uint256& V1TransportDeserializer::GetMessageHash() const\n     return data_hash;\n }\n \n-Optional<CNetMessage> V1TransportDeserializer::GetMessage(const std::chrono::microseconds time, uint32_t& out_err_raw_size)\n+std::optional<CNetMessage> V1TransportDeserializer::GetMessage(const std::chrono::microseconds time, uint32_t& out_err_raw_size)\n {\n     // decompose a single CNetMessage from the TransportDeserializer\n-    Optional<CNetMessage> msg(std::move(vRecv));\n+    std::optional<CNetMessage> msg(std::move(vRecv));\n \n     // store command string, time, and sizes\n     msg->m_command = hdr.GetCommand();\n@@ -747,12 +747,12 @@ Optional<CNetMessage> V1TransportDeserializer::GetMessage(const std::chrono::mic\n                  HexStr(hdr.pchChecksum),\n                  m_node_id);\n         out_err_raw_size = msg->m_raw_message_size;\n-        msg = nullopt;\n+        msg = std::nullopt;\n     } else if (!hdr.IsCommandValid()) {\n         LogPrint(BCLog::NET, \"HEADER ERROR - COMMAND (%s, %u bytes), peer=%d\\n\",\n                  hdr.GetCommand(), msg->m_message_size, m_node_id);\n         out_err_raw_size = msg->m_raw_message_size;\n-        msg = nullopt;\n+        msg = std::nullopt;\n     }\n \n     // Always reset the network deserializer (prepare for the next message)\n@@ -879,7 +879,7 @@ static void EraseLastKElements(std::vector<T> &elements, Comparator comparator,\n     elements.erase(elements.end() - eraseSize, elements.end());\n }\n \n-[[nodiscard]] Optional<NodeId> SelectNodeToEvict(std::vector<NodeEvictionCandidate>&& vEvictionCandidates)\n+[[nodiscard]] std::optional<NodeId> SelectNodeToEvict(std::vector<NodeEvictionCandidate>&& vEvictionCandidates)\n {\n     // Protect connections with certain characteristics\n \n@@ -918,7 +918,7 @@ static void EraseLastKElements(std::vector<T> &elements, Comparator comparator,\n     total_protect_size -= initial_size - vEvictionCandidates.size();\n     EraseLastKElements(vEvictionCandidates, ReverseCompareNodeTimeConnected, total_protect_size);\n \n-    if (vEvictionCandidates.empty()) return nullopt;\n+    if (vEvictionCandidates.empty()) return std::nullopt;\n \n     // If any remaining peers are preferred for eviction consider only them.\n     // This happens after the other preferences since if a peer is really the best by other criteria (esp relaying blocks)\n@@ -989,7 +989,7 @@ bool CConnman::AttemptToEvictConnection()\n             vEvictionCandidates.push_back(candidate);\n         }\n     }\n-    const Optional<NodeId> node_id_to_evict = SelectNodeToEvict(std::move(vEvictionCandidates));\n+    const std::optional<NodeId> node_id_to_evict = SelectNodeToEvict(std::move(vEvictionCandidates));\n     if (!node_id_to_evict) {\n         return false;\n     }"
      },
      {
        "sha": "2eab20f243a45539be0b1db593dddb8143cf4e21",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57e980d13ca488031bde6ef197cf34d493d36796/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57e980d13ca488031bde6ef197cf34d493d36796/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=57e980d13ca488031bde6ef197cf34d493d36796",
        "patch": "@@ -18,7 +18,7 @@\n #include <net_permissions.h>\n #include <netaddress.h>\n #include <netbase.h>\n-#include <optional.h>\n+#include <optional>\n #include <policy/feerate.h>\n #include <protocol.h>\n #include <random.h>\n@@ -200,7 +200,7 @@ enum\n \n bool IsPeerAddrLocalGood(CNode *pnode);\n /** Returns a local address that we should advertise to this peer */\n-Optional<CAddress> GetLocalAddrForPeer(CNode *pnode);\n+std::optional<CAddress> GetLocalAddrForPeer(CNode *pnode);\n \n /**\n  * Mark a network as reachable or unreachable (no automatic connects to it)\n@@ -311,7 +311,7 @@ class TransportDeserializer {\n     /** read and deserialize data, advances msg_bytes data pointer */\n     virtual int Read(Span<const uint8_t>& msg_bytes) = 0;\n     // decomposes a message from the context\n-    virtual Optional<CNetMessage> GetMessage(std::chrono::microseconds time, uint32_t& out_err) = 0;\n+    virtual std::optional<CNetMessage> GetMessage(std::chrono::microseconds time, uint32_t& out_err) = 0;\n     virtual ~TransportDeserializer() {}\n };\n \n@@ -375,7 +375,7 @@ class V1TransportDeserializer final : public TransportDeserializer\n         }\n         return ret;\n     }\n-    Optional<CNetMessage> GetMessage(std::chrono::microseconds time, uint32_t& out_err_raw_size) override;\n+    std::optional<CNetMessage> GetMessage(std::chrono::microseconds time, uint32_t& out_err_raw_size) override;\n };\n \n /** The TransportSerializer prepares messages for the network transport\n@@ -1283,6 +1283,6 @@ struct NodeEvictionCandidate\n     bool m_is_local;\n };\n \n-[[nodiscard]] Optional<NodeId> SelectNodeToEvict(std::vector<NodeEvictionCandidate>&& vEvictionCandidates);\n+[[nodiscard]] std::optional<NodeId> SelectNodeToEvict(std::vector<NodeEvictionCandidate>&& vEvictionCandidates);\n \n #endif // BITCOIN_NET_H"
      },
      {
        "sha": "4d9dc2204d432073649942feb67aaeb799c54e1e",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57e980d13ca488031bde6ef197cf34d493d36796/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57e980d13ca488031bde6ef197cf34d493d36796/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=57e980d13ca488031bde6ef197cf34d493d36796",
        "patch": "@@ -4222,7 +4222,7 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n             if (pto->m_next_local_addr_send != 0us) {\n                 pto->m_addr_known->reset();\n             }\n-            if (Optional<CAddress> local_addr = GetLocalAddrForPeer(pto)) {\n+            if (std::optional<CAddress> local_addr = GetLocalAddrForPeer(pto)) {\n                 FastRandomContext insecure_rand;\n                 pto->PushAddress(*local_addr, insecure_rand);\n             }"
      },
      {
        "sha": "7a4fa0a613df9c89644e439932c01f5fb67938bf",
        "filename": "src/node/interfaces.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57e980d13ca488031bde6ef197cf34d493d36796/src/node/interfaces.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57e980d13ca488031bde6ef197cf34d493d36796/src/node/interfaces.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/interfaces.cpp?ref=57e980d13ca488031bde6ef197cf34d493d36796",
        "patch": "@@ -415,15 +415,15 @@ class ChainImpl : public Chain\n {\n public:\n     explicit ChainImpl(NodeContext& node) : m_node(node) {}\n-    Optional<int> getHeight() override\n+    std::optional<int> getHeight() override\n     {\n         LOCK(::cs_main);\n         const CChain& active = Assert(m_node.chainman)->ActiveChain();\n         int height = active.Height();\n         if (height >= 0) {\n             return height;\n         }\n-        return nullopt;\n+        return std::nullopt;\n     }\n     uint256 getBlockHash(int height) override\n     {\n@@ -452,15 +452,15 @@ class ChainImpl : public Chain\n         assert(std::addressof(::ChainActive()) == std::addressof(m_node.chainman->ActiveChain()));\n         return CheckFinalTx(m_node.chainman->ActiveChain().Tip(), tx);\n     }\n-    Optional<int> findLocatorFork(const CBlockLocator& locator) override\n+    std::optional<int> findLocatorFork(const CBlockLocator& locator) override\n     {\n         LOCK(cs_main);\n         const CChain& active = Assert(m_node.chainman)->ActiveChain();\n         assert(std::addressof(g_chainman) == std::addressof(*m_node.chainman));\n         if (CBlockIndex* fork = m_node.chainman->m_blockman.FindForkInGlobalIndex(active, locator)) {\n             return fork->nHeight;\n         }\n-        return nullopt;\n+        return std::nullopt;\n     }\n     bool findBlock(const uint256& hash, const FoundBlock& block) override\n     {\n@@ -518,7 +518,7 @@ class ChainImpl : public Chain\n         assert(std::addressof(g_chainman) == std::addressof(*m_node.chainman));\n         return GuessVerificationProgress(Params().TxData(), m_node.chainman->m_blockman.LookupBlockIndex(block_hash));\n     }\n-    bool hasBlocks(const uint256& block_hash, int min_height, Optional<int> max_height) override\n+    bool hasBlocks(const uint256& block_hash, int min_height, std::optional<int> max_height) override\n     {\n         // hasBlocks returns true if all ancestors of block_hash in specified\n         // range have block data (are not pruned), false if any ancestors in"
      },
      {
        "sha": "009e0941e1a351aea7857d7cbd6bb864b33dcbda",
        "filename": "src/node/psbt.h",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57e980d13ca488031bde6ef197cf34d493d36796/src/node/psbt.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57e980d13ca488031bde6ef197cf34d493d36796/src/node/psbt.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/psbt.h?ref=57e980d13ca488031bde6ef197cf34d493d36796",
        "patch": "@@ -25,18 +25,18 @@ struct PSBTInputAnalysis {\n  * Holds the results of AnalyzePSBT (miscellaneous information about a PSBT)\n  */\n struct PSBTAnalysis {\n-    Optional<size_t> estimated_vsize;      //!< Estimated weight of the transaction\n-    Optional<CFeeRate> estimated_feerate;  //!< Estimated feerate (fee / weight) of the transaction\n-    Optional<CAmount> fee;                 //!< Amount of fee being paid by the transaction\n+    std::optional<size_t> estimated_vsize;      //!< Estimated weight of the transaction\n+    std::optional<CFeeRate> estimated_feerate;  //!< Estimated feerate (fee / weight) of the transaction\n+    std::optional<CAmount> fee;                 //!< Amount of fee being paid by the transaction\n     std::vector<PSBTInputAnalysis> inputs; //!< More information about the individual inputs of the transaction\n     PSBTRole next;                         //!< Which of the BIP 174 roles needs to handle the transaction next\n     std::string error;                     //!< Error message\n \n     void SetInvalid(std::string err_msg)\n     {\n-        estimated_vsize = nullopt;\n-        estimated_feerate = nullopt;\n-        fee = nullopt;\n+        estimated_vsize = std::nullopt;\n+        estimated_feerate = std::nullopt;\n+        fee = std::nullopt;\n         inputs.clear();\n         next = PSBTRole::CREATOR;\n         error = err_msg;"
      },
      {
        "sha": "583c56eabdab5004a6251f0937f1430c812d785d",
        "filename": "src/optional.h",
        "status": "removed",
        "additions": 0,
        "deletions": 20,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c631917f3e0da84ee48295b7d2e93bc202bae0c/src/optional.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c631917f3e0da84ee48295b7d2e93bc202bae0c/src/optional.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/optional.h?ref=3c631917f3e0da84ee48295b7d2e93bc202bae0c",
        "patch": "@@ -1,20 +0,0 @@\n-// Copyright (c) 2017-2020 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#ifndef BITCOIN_OPTIONAL_H\n-#define BITCOIN_OPTIONAL_H\n-\n-#include <optional>\n-#include <utility>\n-\n-//! Substitute for C++17 std::optional\n-//! DEPRECATED use std::optional in new code.\n-template <typename T>\n-using Optional = std::optional<T>;\n-\n-//! Substitute for C++17 std::nullopt\n-//! DEPRECATED use std::nullopt in new code.\n-static auto& nullopt = std::nullopt;\n-\n-#endif // BITCOIN_OPTIONAL_H"
      },
      {
        "sha": "319eb48cb02b8ad3150fad21040ca9e9556922d4",
        "filename": "src/psbt.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57e980d13ca488031bde6ef197cf34d493d36796/src/psbt.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57e980d13ca488031bde6ef197cf34d493d36796/src/psbt.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.h?ref=57e980d13ca488031bde6ef197cf34d493d36796",
        "patch": "@@ -7,7 +7,7 @@\n \n #include <attributes.h>\n #include <node/transaction.h>\n-#include <optional.h>\n+#include <optional>\n #include <policy/feerate.h>\n #include <primitives/transaction.h>\n #include <pubkey.h>\n@@ -389,7 +389,7 @@ struct PSBTOutput\n /** A version of CTransaction with the PSBT format*/\n struct PartiallySignedTransaction\n {\n-    Optional<CMutableTransaction> tx;\n+    std::optional<CMutableTransaction> tx;\n     std::vector<PSBTInput> inputs;\n     std::vector<PSBTOutput> outputs;\n     std::map<std::vector<unsigned char>, std::vector<unsigned char>> unknown;"
      },
      {
        "sha": "a0260692325e07dd8190b36e76aa052a48d2a56f",
        "filename": "src/qt/test/addressbooktests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57e980d13ca488031bde6ef197cf34d493d36796/src/qt/test/addressbooktests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57e980d13ca488031bde6ef197cf34d493d36796/src/qt/test/addressbooktests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/addressbooktests.cpp?ref=57e980d13ca488031bde6ef197cf34d493d36796",
        "patch": "@@ -112,7 +112,7 @@ void TestAddAddressesToSendBook(interfaces::Node& node)\n     ClientModel clientModel(node, &optionsModel);\n     AddWallet(wallet);\n     WalletModel walletModel(interfaces::MakeWallet(wallet), clientModel, platformStyle.get());\n-    RemoveWallet(wallet, nullopt);\n+    RemoveWallet(wallet, std::nullopt);\n     EditAddressDialog editAddressDialog(EditAddressDialog::NewSendingAddress);\n     editAddressDialog.setModel(walletModel.getAddressTableModel());\n "
      },
      {
        "sha": "1107c44dc9fb0cdf1fcff75429b94ac1693c7c6a",
        "filename": "src/qt/test/wallettests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57e980d13ca488031bde6ef197cf34d493d36796/src/qt/test/wallettests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57e980d13ca488031bde6ef197cf34d493d36796/src/qt/test/wallettests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/wallettests.cpp?ref=57e980d13ca488031bde6ef197cf34d493d36796",
        "patch": "@@ -167,7 +167,7 @@ void TestGUI(interfaces::Node& node)\n     ClientModel clientModel(node, &optionsModel);\n     AddWallet(wallet);\n     WalletModel walletModel(interfaces::MakeWallet(wallet), clientModel, platformStyle.get());\n-    RemoveWallet(wallet, nullopt);\n+    RemoveWallet(wallet, std::nullopt);\n     sendCoinsDialog.setModel(&walletModel);\n     transactionView.setModel(&walletModel);\n "
      },
      {
        "sha": "2f92a321f8ec846973e5e1783c1fdff43b68a38b",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57e980d13ca488031bde6ef197cf34d493d36796/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57e980d13ca488031bde6ef197cf34d493d36796/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=57e980d13ca488031bde6ef197cf34d493d36796",
        "patch": "@@ -1828,13 +1828,13 @@ static RPCHelpMan analyzepsbt()\n     }\n     if (!inputs_result.empty()) result.pushKV(\"inputs\", inputs_result);\n \n-    if (psbta.estimated_vsize != nullopt) {\n+    if (psbta.estimated_vsize != std::nullopt) {\n         result.pushKV(\"estimated_vsize\", (int)*psbta.estimated_vsize);\n     }\n-    if (psbta.estimated_feerate != nullopt) {\n+    if (psbta.estimated_feerate != std::nullopt) {\n         result.pushKV(\"estimated_feerate\", ValueFromAmount(psbta.estimated_feerate->GetFeePerK()));\n     }\n-    if (psbta.fee != nullopt) {\n+    if (psbta.fee != std::nullopt) {\n         result.pushKV(\"fee\", ValueFromAmount(*psbta.fee));\n     }\n     result.pushKV(\"next\", PSBTRoleName(psbta.next));"
      },
      {
        "sha": "cfe1da12e8445fb182e507e1d180636372d0c609",
        "filename": "src/script/descriptor.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57e980d13ca488031bde6ef197cf34d493d36796/src/script/descriptor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57e980d13ca488031bde6ef197cf34d493d36796/src/script/descriptor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.cpp?ref=57e980d13ca488031bde6ef197cf34d493d36796",
        "patch": "@@ -632,7 +632,7 @@ class DescriptorImpl : public Descriptor\n         }\n     }\n \n-    Optional<OutputType> GetOutputType() const override { return nullopt; }\n+    std::optional<OutputType> GetOutputType() const override { return std::nullopt; }\n };\n \n /** A parsed addr(A) descriptor. */\n@@ -646,7 +646,7 @@ class AddressDescriptor final : public DescriptorImpl\n     AddressDescriptor(CTxDestination destination) : DescriptorImpl({}, {}, \"addr\"), m_destination(std::move(destination)) {}\n     bool IsSolvable() const final { return false; }\n \n-    Optional<OutputType> GetOutputType() const override\n+    std::optional<OutputType> GetOutputType() const override\n     {\n         switch (m_destination.index()) {\n             case 1 /* PKHash */:\n@@ -655,7 +655,7 @@ class AddressDescriptor final : public DescriptorImpl\n             case 4 /* WitnessV0KeyHash */:\n             case 5 /* WitnessUnknown */: return OutputType::BECH32;\n             case 0 /* CNoDestination */:\n-            default: return nullopt;\n+            default: return std::nullopt;\n         }\n     }\n     bool IsSingleType() const final { return true; }\n@@ -672,7 +672,7 @@ class RawDescriptor final : public DescriptorImpl\n     RawDescriptor(CScript script) : DescriptorImpl({}, {}, \"raw\"), m_script(std::move(script)) {}\n     bool IsSolvable() const final { return false; }\n \n-    Optional<OutputType> GetOutputType() const override\n+    std::optional<OutputType> GetOutputType() const override\n     {\n         CTxDestination dest;\n         ExtractDestination(m_script, dest);\n@@ -683,7 +683,7 @@ class RawDescriptor final : public DescriptorImpl\n             case 4 /* WitnessV0KeyHash */:\n             case 5 /* WitnessUnknown */: return OutputType::BECH32;\n             case 0 /* CNoDestination */:\n-            default: return nullopt;\n+            default: return std::nullopt;\n         }\n     }\n     bool IsSingleType() const final { return true; }\n@@ -711,7 +711,7 @@ class PKHDescriptor final : public DescriptorImpl\n     }\n public:\n     PKHDescriptor(std::unique_ptr<PubkeyProvider> prov) : DescriptorImpl(Vector(std::move(prov)), {}, \"pkh\") {}\n-    Optional<OutputType> GetOutputType() const override { return OutputType::LEGACY; }\n+    std::optional<OutputType> GetOutputType() const override { return OutputType::LEGACY; }\n     bool IsSingleType() const final { return true; }\n };\n \n@@ -727,7 +727,7 @@ class WPKHDescriptor final : public DescriptorImpl\n     }\n public:\n     WPKHDescriptor(std::unique_ptr<PubkeyProvider> prov) : DescriptorImpl(Vector(std::move(prov)), {}, \"wpkh\") {}\n-    Optional<OutputType> GetOutputType() const override { return OutputType::BECH32; }\n+    std::optional<OutputType> GetOutputType() const override { return OutputType::BECH32; }\n     bool IsSingleType() const final { return true; }\n };\n \n@@ -783,7 +783,7 @@ class SHDescriptor final : public DescriptorImpl\n public:\n     SHDescriptor(std::unique_ptr<DescriptorImpl> desc) : DescriptorImpl({}, std::move(desc), \"sh\") {}\n \n-    Optional<OutputType> GetOutputType() const override\n+    std::optional<OutputType> GetOutputType() const override\n     {\n         assert(m_subdescriptor_arg);\n         if (m_subdescriptor_arg->GetOutputType() == OutputType::BECH32) return OutputType::P2SH_SEGWIT;\n@@ -799,7 +799,7 @@ class WSHDescriptor final : public DescriptorImpl\n     std::vector<CScript> MakeScripts(const std::vector<CPubKey>&, const CScript* script, FlatSigningProvider&) const override { return Vector(GetScriptForDestination(WitnessV0ScriptHash(*script))); }\n public:\n     WSHDescriptor(std::unique_ptr<DescriptorImpl> desc) : DescriptorImpl({}, std::move(desc), \"wsh\") {}\n-    Optional<OutputType> GetOutputType() const override { return OutputType::BECH32; }\n+    std::optional<OutputType> GetOutputType() const override { return OutputType::BECH32; }\n     bool IsSingleType() const final { return true; }\n };\n "
      },
      {
        "sha": "c8d9efb11fb0c7c1f56be1fc10fc87e633f2e168",
        "filename": "src/script/descriptor.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57e980d13ca488031bde6ef197cf34d493d36796/src/script/descriptor.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57e980d13ca488031bde6ef197cf34d493d36796/src/script/descriptor.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.h?ref=57e980d13ca488031bde6ef197cf34d493d36796",
        "patch": "@@ -5,7 +5,7 @@\n #ifndef BITCOIN_SCRIPT_DESCRIPTOR_H\n #define BITCOIN_SCRIPT_DESCRIPTOR_H\n \n-#include <optional.h>\n+#include <optional>\n #include <outputtype.h>\n #include <script/script.h>\n #include <script/sign.h>\n@@ -124,7 +124,7 @@ struct Descriptor {\n     virtual void ExpandPrivate(int pos, const SigningProvider& provider, FlatSigningProvider& out) const = 0;\n \n     /** @return The OutputType of the scriptPubKey(s) produced by this descriptor. Or nullopt if indeterminate (multiple or none) */\n-    virtual Optional<OutputType> GetOutputType() const = 0;\n+    virtual std::optional<OutputType> GetOutputType() const = 0;\n };\n \n /** Parse a `descriptor` string. Included private keys are put in `out`."
      },
      {
        "sha": "fb41e43752cf1bd1f27ba0e6e0d5e1f2df82d3e5",
        "filename": "src/signet.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57e980d13ca488031bde6ef197cf34d493d36796/src/signet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57e980d13ca488031bde6ef197cf34d493d36796/src/signet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/signet.cpp?ref=57e980d13ca488031bde6ef197cf34d493d36796",
        "patch": "@@ -65,7 +65,7 @@ static uint256 ComputeModifiedMerkleRoot(const CMutableTransaction& cb, const CB\n     return ComputeMerkleRoot(std::move(leaves));\n }\n \n-Optional<SignetTxs> SignetTxs::Create(const CBlock& block, const CScript& challenge)\n+std::optional<SignetTxs> SignetTxs::Create(const CBlock& block, const CScript& challenge)\n {\n     CMutableTransaction tx_to_spend;\n     tx_to_spend.nVersion = 0;\n@@ -83,12 +83,12 @@ Optional<SignetTxs> SignetTxs::Create(const CBlock& block, const CScript& challe\n     // responses from block coinbase tx\n \n     // find and delete signet signature\n-    if (block.vtx.empty()) return nullopt; // no coinbase tx in block; invalid\n+    if (block.vtx.empty()) return std::nullopt; // no coinbase tx in block; invalid\n     CMutableTransaction modified_cb(*block.vtx.at(0));\n \n     const int cidx = GetWitnessCommitmentIndex(block);\n     if (cidx == NO_WITNESS_COMMITMENT) {\n-        return nullopt; // require a witness commitment\n+        return std::nullopt; // require a witness commitment\n     }\n \n     CScript& witness_commitment = modified_cb.vout.at(cidx).scriptPubKey;\n@@ -101,9 +101,9 @@ Optional<SignetTxs> SignetTxs::Create(const CBlock& block, const CScript& challe\n             VectorReader v(SER_NETWORK, INIT_PROTO_VERSION, signet_solution, 0);\n             v >> tx_spending.vin[0].scriptSig;\n             v >> tx_spending.vin[0].scriptWitness.stack;\n-            if (!v.empty()) return nullopt; // extraneous data encountered\n+            if (!v.empty()) return std::nullopt; // extraneous data encountered\n         } catch (const std::exception&) {\n-            return nullopt; // parsing error\n+            return std::nullopt; // parsing error\n         }\n     }\n     uint256 signet_merkle = ComputeModifiedMerkleRoot(modified_cb, block);\n@@ -129,7 +129,7 @@ bool CheckSignetBlockSolution(const CBlock& block, const Consensus::Params& cons\n     }\n \n     const CScript challenge(consensusParams.signet_challenge.begin(), consensusParams.signet_challenge.end());\n-    const Optional<SignetTxs> signet_txs = SignetTxs::Create(block, challenge);\n+    const std::optional<SignetTxs> signet_txs = SignetTxs::Create(block, challenge);\n \n     if (!signet_txs) {\n         LogPrint(BCLog::VALIDATION, \"CheckSignetBlockSolution: Errors in block (block solution parse failure)\\n\");"
      },
      {
        "sha": "f876488c0ae8ff5227b25292c4a2180d4325f64e",
        "filename": "src/signet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57e980d13ca488031bde6ef197cf34d493d36796/src/signet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57e980d13ca488031bde6ef197cf34d493d36796/src/signet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/signet.h?ref=57e980d13ca488031bde6ef197cf34d493d36796",
        "patch": "@@ -9,7 +9,7 @@\n #include <primitives/block.h>\n #include <primitives/transaction.h>\n \n-#include <optional.h>\n+#include <optional>\n \n /**\n  * Extract signature and check whether a block has a valid solution\n@@ -28,7 +28,7 @@ class SignetTxs {\n     SignetTxs(const T1& to_spend, const T2& to_sign) : m_to_spend{to_spend}, m_to_sign{to_sign} { }\n \n public:\n-    static Optional<SignetTxs> Create(const CBlock& block, const CScript& challenge);\n+    static std::optional<SignetTxs> Create(const CBlock& block, const CScript& challenge);\n \n     const CTransaction m_to_spend;\n     const CTransaction m_to_sign;"
      },
      {
        "sha": "791480a6c594ce3773b407ba61d840b1440b9858",
        "filename": "src/test/descriptor_tests.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57e980d13ca488031bde6ef197cf34d493d36796/src/test/descriptor_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57e980d13ca488031bde6ef197cf34d493d36796/src/test/descriptor_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/descriptor_tests.cpp?ref=57e980d13ca488031bde6ef197cf34d493d36796",
        "patch": "@@ -65,7 +65,7 @@ std::string UseHInsteadOfApostrophe(const std::string& desc)\n \n const std::set<std::vector<uint32_t>> ONLY_EMPTY{{}};\n \n-void DoCheck(const std::string& prv, const std::string& pub, const std::string& norm_prv, const std::string& norm_pub, int flags, const std::vector<std::vector<std::string>>& scripts, const Optional<OutputType>& type, const std::set<std::vector<uint32_t>>& paths = ONLY_EMPTY,\n+void DoCheck(const std::string& prv, const std::string& pub, const std::string& norm_prv, const std::string& norm_pub, int flags, const std::vector<std::vector<std::string>>& scripts, const std::optional<OutputType>& type, const std::set<std::vector<uint32_t>>& paths = ONLY_EMPTY,\n     bool replace_apostrophe_with_h_in_prv=false, bool replace_apostrophe_with_h_in_pub=false)\n {\n     FlatSigningProvider keys_priv, keys_pub;\n@@ -262,7 +262,7 @@ void DoCheck(const std::string& prv, const std::string& pub, const std::string&\n     BOOST_CHECK_MESSAGE(left_paths.empty(), \"Not all expected key paths found: \" + prv);\n }\n \n-void Check(const std::string& prv, const std::string& pub, const std::string& norm_prv, const std::string& norm_pub, int flags, const std::vector<std::vector<std::string>>& scripts, const Optional<OutputType>& type, const std::set<std::vector<uint32_t>>& paths = ONLY_EMPTY)\n+void Check(const std::string& prv, const std::string& pub, const std::string& norm_prv, const std::string& norm_pub, int flags, const std::vector<std::vector<std::string>>& scripts, const std::optional<OutputType>& type, const std::set<std::vector<uint32_t>>& paths = ONLY_EMPTY)\n {\n     bool found_apostrophes_in_prv = false;\n     bool found_apostrophes_in_pub = false;\n@@ -295,8 +295,8 @@ BOOST_FIXTURE_TEST_SUITE(descriptor_tests, BasicTestingSetup)\n BOOST_AUTO_TEST_CASE(descriptor_test)\n {\n     // Basic single-key compressed\n-    Check(\"combo(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)\", \"combo(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)\", \"combo(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)\", \"combo(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)\", SIGNABLE, {{\"2103a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bdac\",\"76a9149a1c78a507689f6f54b847ad1cef1e614ee23f1e88ac\",\"00149a1c78a507689f6f54b847ad1cef1e614ee23f1e\",\"a91484ab21b1b2fd065d4504ff693d832434b6108d7b87\"}}, nullopt);\n-    Check(\"pk(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)\", \"pk(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)\", \"pk(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)\", \"pk(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)\", SIGNABLE, {{\"2103a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bdac\"}}, nullopt);\n+    Check(\"combo(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)\", \"combo(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)\", \"combo(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)\", \"combo(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)\", SIGNABLE, {{\"2103a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bdac\",\"76a9149a1c78a507689f6f54b847ad1cef1e614ee23f1e88ac\",\"00149a1c78a507689f6f54b847ad1cef1e614ee23f1e\",\"a91484ab21b1b2fd065d4504ff693d832434b6108d7b87\"}}, std::nullopt);\n+    Check(\"pk(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)\", \"pk(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)\", \"pk(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)\", \"pk(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)\", SIGNABLE, {{\"2103a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bdac\"}}, std::nullopt);\n     Check(\"pkh([deadbeef/1/2'/3/4']L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)\", \"pkh([deadbeef/1/2'/3/4']03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)\", \"pkh([deadbeef/1/2'/3/4']L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)\", \"pkh([deadbeef/1/2'/3/4']03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)\", SIGNABLE, {{\"76a9149a1c78a507689f6f54b847ad1cef1e614ee23f1e88ac\"}}, OutputType::LEGACY, {{1,0x80000002UL,3,0x80000004UL}});\n     Check(\"wpkh(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)\", \"wpkh(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)\", \"wpkh(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)\", \"wpkh(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)\", SIGNABLE, {{\"00149a1c78a507689f6f54b847ad1cef1e614ee23f1e\"}}, OutputType::BECH32);\n     Check(\"sh(wpkh(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1))\", \"sh(wpkh(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd))\", \"sh(wpkh(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1))\", \"sh(wpkh(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd))\", SIGNABLE, {{\"a91484ab21b1b2fd065d4504ff693d832434b6108d7b87\"}}, OutputType::P2SH_SEGWIT);\n@@ -305,8 +305,8 @@ BOOST_AUTO_TEST_CASE(descriptor_test)\n     CheckUnparsable(\"pkh([deadbeef]/1/2'/3/4']L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)\", \"pkh([deadbeef]/1/2'/3/4']03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)\", \"Multiple ']' characters found for a single pubkey\"); // Multiple end brackets in key origin\n \n     // Basic single-key uncompressed\n-    Check(\"combo(5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss)\", \"combo(04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235)\", \"combo(5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss)\", \"combo(04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235)\",SIGNABLE, {{\"4104a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235ac\",\"76a914b5bd079c4d57cc7fc28ecf8213a6b791625b818388ac\"}}, nullopt);\n-    Check(\"pk(5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss)\", \"pk(04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235)\", \"pk(5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss)\", \"pk(04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235)\", SIGNABLE, {{\"4104a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235ac\"}}, nullopt);\n+    Check(\"combo(5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss)\", \"combo(04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235)\", \"combo(5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss)\", \"combo(04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235)\",SIGNABLE, {{\"4104a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235ac\",\"76a914b5bd079c4d57cc7fc28ecf8213a6b791625b818388ac\"}}, std::nullopt);\n+    Check(\"pk(5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss)\", \"pk(04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235)\", \"pk(5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss)\", \"pk(04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235)\", SIGNABLE, {{\"4104a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235ac\"}}, std::nullopt);\n     Check(\"pkh(5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss)\", \"pkh(04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235)\", \"pkh(5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss)\", \"pkh(04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235)\", SIGNABLE, {{\"76a914b5bd079c4d57cc7fc28ecf8213a6b791625b818388ac\"}}, OutputType::LEGACY);\n     CheckUnparsable(\"wpkh(5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss)\", \"wpkh(04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235)\", \"Uncompressed keys are not allowed\"); // No uncompressed keys in witness\n     CheckUnparsable(\"wsh(pk(5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss))\", \"wsh(pk(04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235))\", \"Uncompressed keys are not allowed\"); // No uncompressed keys in witness\n@@ -321,23 +321,23 @@ BOOST_AUTO_TEST_CASE(descriptor_test)\n     Check(\"sh(wsh(pkh(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)))\", \"sh(wsh(pkh(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)))\", \"sh(wsh(pkh(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)))\", \"sh(wsh(pkh(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)))\", SIGNABLE, {{\"a914b61b92e2ca21bac1e72a3ab859a742982bea960a87\"}}, OutputType::P2SH_SEGWIT);\n \n     // Versions with BIP32 derivations\n-    Check(\"combo([01234567]xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc)\", \"combo([01234567]xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL)\", \"combo([01234567]xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc)\", \"combo([01234567]xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL)\", SIGNABLE, {{\"2102d2b36900396c9282fa14628566582f206a5dd0bcc8d5e892611806cafb0301f0ac\",\"76a91431a507b815593dfc51ffc7245ae7e5aee304246e88ac\",\"001431a507b815593dfc51ffc7245ae7e5aee304246e\",\"a9142aafb926eb247cb18240a7f4c07983ad1f37922687\"}}, nullopt);\n-    Check(\"pk(xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L/0)\", \"pk(xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y/0)\", \"pk(xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L/0)\", \"pk(xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y/0)\", DEFAULT, {{\"210379e45b3cf75f9c5f9befd8e9506fb962f6a9d185ac87001ec44a8d3df8d4a9e3ac\"}}, nullopt, {{0}});\n+    Check(\"combo([01234567]xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc)\", \"combo([01234567]xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL)\", \"combo([01234567]xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc)\", \"combo([01234567]xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL)\", SIGNABLE, {{\"2102d2b36900396c9282fa14628566582f206a5dd0bcc8d5e892611806cafb0301f0ac\",\"76a91431a507b815593dfc51ffc7245ae7e5aee304246e88ac\",\"001431a507b815593dfc51ffc7245ae7e5aee304246e\",\"a9142aafb926eb247cb18240a7f4c07983ad1f37922687\"}}, std::nullopt);\n+    Check(\"pk(xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L/0)\", \"pk(xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y/0)\", \"pk(xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L/0)\", \"pk(xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y/0)\", DEFAULT, {{\"210379e45b3cf75f9c5f9befd8e9506fb962f6a9d185ac87001ec44a8d3df8d4a9e3ac\"}}, std::nullopt, {{0}});\n     Check(\"pkh(xprv9s21ZrQH143K31xYSDQpPDxsXRTUcvj2iNHm5NUtrGiGG5e2DtALGdso3pGz6ssrdK4PFmM8NSpSBHNqPqm55Qn3LqFtT2emdEXVYsCzC2U/2147483647'/0)\", \"pkh(xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/2147483647'/0)\", \"pkh([bd16bee5/2147483647']xprv9vHkqa6XAPwKqSKSEJMcAB3yoCZhaSVsGZbSkFY5L3Lfjjk8sjZucbsbvEw5o3QrSA69nPfZDCgFnNnLhQ2ohpZuwummndnPasDw2Qr6dC2/0)\", \"pkh([bd16bee5/2147483647']xpub69H7F5dQzmVd3vPuLKtcXJziMEQByuDidnX3YdwgtNsecY5HRGtAAQC5mXTt4dsv9RzyjgDjAQs9VGVV6ydYCHnprc9vvaA5YtqWyL6hyds/0)\", HARDENED, {{\"76a914ebdc90806a9c4356c1c88e42216611e1cb4c1c1788ac\"}}, OutputType::LEGACY, {{0xFFFFFFFFUL,0}});\n     Check(\"wpkh([ffffffff/13']xprv9vHkqa6EV4sPZHYqZznhT2NPtPCjKuDKGY38FBWLvgaDx45zo9WQRUT3dKYnjwih2yJD9mkrocEZXo1ex8G81dwSM1fwqWpWkeS3v86pgKt/1/2/*)\", \"wpkh([ffffffff/13']xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/1/2/*)\", \"wpkh([ffffffff/13']xprv9vHkqa6EV4sPZHYqZznhT2NPtPCjKuDKGY38FBWLvgaDx45zo9WQRUT3dKYnjwih2yJD9mkrocEZXo1ex8G81dwSM1fwqWpWkeS3v86pgKt/1/2/*)\", \"wpkh([ffffffff/13']xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/1/2/*)\", RANGE, {{\"0014326b2249e3a25d5dc60935f044ee835d090ba859\"},{\"0014af0bd98abc2f2cae66e36896a39ffe2d32984fb7\"},{\"00141fa798efd1cbf95cebf912c031b8a4a6e9fb9f27\"}}, OutputType::BECH32, {{0x8000000DUL, 1, 2, 0}, {0x8000000DUL, 1, 2, 1}, {0x8000000DUL, 1, 2, 2}});\n     Check(\"sh(wpkh(xprv9s21ZrQH143K3QTDL4LXw2F7HEK3wJUD2nW2nRk4stbPy6cq3jPPqjiChkVvvNKmPGJxWUtg6LnF5kejMRNNU3TGtRBeJgk33yuGBxrMPHi/10/20/30/40/*'))\", \"sh(wpkh(xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8/10/20/30/40/*'))\", \"sh(wpkh(xprv9s21ZrQH143K3QTDL4LXw2F7HEK3wJUD2nW2nRk4stbPy6cq3jPPqjiChkVvvNKmPGJxWUtg6LnF5kejMRNNU3TGtRBeJgk33yuGBxrMPHi/10/20/30/40/*'))\", \"sh(wpkh(xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8/10/20/30/40/*'))\", RANGE | HARDENED | DERIVE_HARDENED, {{\"a9149a4d9901d6af519b2a23d4a2f51650fcba87ce7b87\"},{\"a914bed59fc0024fae941d6e20a3b44a109ae740129287\"},{\"a9148483aa1116eb9c05c482a72bada4b1db24af654387\"}}, OutputType::P2SH_SEGWIT, {{10, 20, 30, 40, 0x80000000UL}, {10, 20, 30, 40, 0x80000001UL}, {10, 20, 30, 40, 0x80000002UL}});\n-    Check(\"combo(xprvA2JDeKCSNNZky6uBCviVfJSKyQ1mDYahRjijr5idH2WwLsEd4Hsb2Tyh8RfQMuPh7f7RtyzTtdrbdqqsunu5Mm3wDvUAKRHSC34sJ7in334/*)\", \"combo(xpub6FHa3pjLCk84BayeJxFW2SP4XRrFd1JYnxeLeU8EqN3vDfZmbqBqaGJAyiLjTAwm6ZLRQUMv1ZACTj37sR62cfN7fe5JnJ7dh8zL4fiyLHV/*)\", \"combo(xprvA2JDeKCSNNZky6uBCviVfJSKyQ1mDYahRjijr5idH2WwLsEd4Hsb2Tyh8RfQMuPh7f7RtyzTtdrbdqqsunu5Mm3wDvUAKRHSC34sJ7in334/*)\", \"combo(xpub6FHa3pjLCk84BayeJxFW2SP4XRrFd1JYnxeLeU8EqN3vDfZmbqBqaGJAyiLjTAwm6ZLRQUMv1ZACTj37sR62cfN7fe5JnJ7dh8zL4fiyLHV/*)\", RANGE, {{\"2102df12b7035bdac8e3bab862a3a83d06ea6b17b6753d52edecba9be46f5d09e076ac\",\"76a914f90e3178ca25f2c808dc76624032d352fdbdfaf288ac\",\"0014f90e3178ca25f2c808dc76624032d352fdbdfaf2\",\"a91408f3ea8c68d4a7585bf9e8bda226723f70e445f087\"},{\"21032869a233c9adff9a994e4966e5b821fd5bac066da6c3112488dc52383b4a98ecac\",\"76a914a8409d1b6dfb1ed2a3e8aa5e0ef2ff26b15b75b788ac\",\"0014a8409d1b6dfb1ed2a3e8aa5e0ef2ff26b15b75b7\",\"a91473e39884cb71ae4e5ac9739e9225026c99763e6687\"}}, nullopt, {{0}, {1}});\n+    Check(\"combo(xprvA2JDeKCSNNZky6uBCviVfJSKyQ1mDYahRjijr5idH2WwLsEd4Hsb2Tyh8RfQMuPh7f7RtyzTtdrbdqqsunu5Mm3wDvUAKRHSC34sJ7in334/*)\", \"combo(xpub6FHa3pjLCk84BayeJxFW2SP4XRrFd1JYnxeLeU8EqN3vDfZmbqBqaGJAyiLjTAwm6ZLRQUMv1ZACTj37sR62cfN7fe5JnJ7dh8zL4fiyLHV/*)\", \"combo(xprvA2JDeKCSNNZky6uBCviVfJSKyQ1mDYahRjijr5idH2WwLsEd4Hsb2Tyh8RfQMuPh7f7RtyzTtdrbdqqsunu5Mm3wDvUAKRHSC34sJ7in334/*)\", \"combo(xpub6FHa3pjLCk84BayeJxFW2SP4XRrFd1JYnxeLeU8EqN3vDfZmbqBqaGJAyiLjTAwm6ZLRQUMv1ZACTj37sR62cfN7fe5JnJ7dh8zL4fiyLHV/*)\", RANGE, {{\"2102df12b7035bdac8e3bab862a3a83d06ea6b17b6753d52edecba9be46f5d09e076ac\",\"76a914f90e3178ca25f2c808dc76624032d352fdbdfaf288ac\",\"0014f90e3178ca25f2c808dc76624032d352fdbdfaf2\",\"a91408f3ea8c68d4a7585bf9e8bda226723f70e445f087\"},{\"21032869a233c9adff9a994e4966e5b821fd5bac066da6c3112488dc52383b4a98ecac\",\"76a914a8409d1b6dfb1ed2a3e8aa5e0ef2ff26b15b75b788ac\",\"0014a8409d1b6dfb1ed2a3e8aa5e0ef2ff26b15b75b7\",\"a91473e39884cb71ae4e5ac9739e9225026c99763e6687\"}}, std::nullopt, {{0}, {1}});\n     CheckUnparsable(\"combo([012345678]xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc)\", \"combo([012345678]xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL)\", \"Fingerprint is not 4 bytes (9 characters instead of 8 characters)\"); // Too long key fingerprint\n     CheckUnparsable(\"pkh(xprv9s21ZrQH143K31xYSDQpPDxsXRTUcvj2iNHm5NUtrGiGG5e2DtALGdso3pGz6ssrdK4PFmM8NSpSBHNqPqm55Qn3LqFtT2emdEXVYsCzC2U/2147483648)\", \"pkh(xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/2147483648)\", \"Key path value 2147483648 is out of range\"); // BIP 32 path element overflow\n     CheckUnparsable(\"pkh(xprv9s21ZrQH143K31xYSDQpPDxsXRTUcvj2iNHm5NUtrGiGG5e2DtALGdso3pGz6ssrdK4PFmM8NSpSBHNqPqm55Qn3LqFtT2emdEXVYsCzC2U/1aa)\", \"pkh(xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/1aa)\", \"Key path value '1aa' is not a valid uint32\"); // Path is not valid uint\n     Check(\"pkh([01234567/10/20]xprv9s21ZrQH143K31xYSDQpPDxsXRTUcvj2iNHm5NUtrGiGG5e2DtALGdso3pGz6ssrdK4PFmM8NSpSBHNqPqm55Qn3LqFtT2emdEXVYsCzC2U/2147483647'/0)\", \"pkh([01234567/10/20]xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/2147483647'/0)\", \"pkh([01234567/10/20/2147483647']xprv9vHkqa6XAPwKqSKSEJMcAB3yoCZhaSVsGZbSkFY5L3Lfjjk8sjZucbsbvEw5o3QrSA69nPfZDCgFnNnLhQ2ohpZuwummndnPasDw2Qr6dC2/0)\", \"pkh([01234567/10/20/2147483647']xpub69H7F5dQzmVd3vPuLKtcXJziMEQByuDidnX3YdwgtNsecY5HRGtAAQC5mXTt4dsv9RzyjgDjAQs9VGVV6ydYCHnprc9vvaA5YtqWyL6hyds/0)\", HARDENED, {{\"76a914ebdc90806a9c4356c1c88e42216611e1cb4c1c1788ac\"}}, OutputType::LEGACY, {{10, 20, 0xFFFFFFFFUL, 0}});\n \n     // Multisig constructions\n-    Check(\"multi(1,L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1,5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss)\", \"multi(1,03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd,04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235)\", \"multi(1,L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1,5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss)\", \"multi(1,03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd,04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235)\", SIGNABLE, {{\"512103a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd4104a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea23552ae\"}}, nullopt);\n-    Check(\"sortedmulti(1,L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1,5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss)\", \"sortedmulti(1,03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd,04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235)\", \"sortedmulti(1,L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1,5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss)\", \"sortedmulti(1,03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd,04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235)\", SIGNABLE, {{\"512103a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd4104a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea23552ae\"}}, nullopt);\n-    Check(\"sortedmulti(1,5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss,L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)\", \"sortedmulti(1,04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235,03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)\", \"sortedmulti(1,5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss,L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)\", \"sortedmulti(1,04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235,03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)\", SIGNABLE, {{\"512103a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd4104a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea23552ae\"}}, nullopt);\n+    Check(\"multi(1,L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1,5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss)\", \"multi(1,03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd,04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235)\", \"multi(1,L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1,5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss)\", \"multi(1,03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd,04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235)\", SIGNABLE, {{\"512103a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd4104a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea23552ae\"}}, std::nullopt);\n+    Check(\"sortedmulti(1,L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1,5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss)\", \"sortedmulti(1,03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd,04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235)\", \"sortedmulti(1,L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1,5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss)\", \"sortedmulti(1,03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd,04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235)\", SIGNABLE, {{\"512103a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd4104a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea23552ae\"}}, std::nullopt);\n+    Check(\"sortedmulti(1,5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss,L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)\", \"sortedmulti(1,04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235,03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)\", \"sortedmulti(1,5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss,L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)\", \"sortedmulti(1,04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235,03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)\", SIGNABLE, {{\"512103a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd4104a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea23552ae\"}}, std::nullopt);\n     Check(\"sh(multi(2,[00000000/111'/222]xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc,xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L/0))\", \"sh(multi(2,[00000000/111'/222]xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL,xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y/0))\", \"sh(multi(2,[00000000/111'/222]xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc,xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L/0))\", \"sh(multi(2,[00000000/111'/222]xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL,xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y/0))\", DEFAULT, {{\"a91445a9a622a8b0a1269944be477640eedc447bbd8487\"}}, OutputType::LEGACY, {{0x8000006FUL,222},{0}});\n-    Check(\"sortedmulti(2,xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc/*,xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L/0/0/*)\", \"sortedmulti(2,xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL/*,xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y/0/0/*)\", \"sortedmulti(2,xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc/*,xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L/0/0/*)\", \"sortedmulti(2,xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL/*,xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y/0/0/*)\", RANGE, {{\"5221025d5fc65ebb8d44a5274b53bac21ff8307fec2334a32df05553459f8b1f7fe1b62102fbd47cc8034098f0e6a94c6aeee8528abf0a2153a5d8e46d325b7284c046784652ae\"}, {\"52210264fd4d1f5dea8ded94c61e9641309349b62f27fbffe807291f664e286bfbe6472103f4ece6dfccfa37b211eb3d0af4d0c61dba9ef698622dc17eecdf764beeb005a652ae\"}, {\"5221022ccabda84c30bad578b13c89eb3b9544ce149787e5b538175b1d1ba259cbb83321024d902e1a2fc7a8755ab5b694c575fce742c48d9ff192e63df5193e4c7afe1f9c52ae\"}}, nullopt, {{0}, {1}, {2}, {0, 0, 0}, {0, 0, 1}, {0, 0, 2}});\n+    Check(\"sortedmulti(2,xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc/*,xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L/0/0/*)\", \"sortedmulti(2,xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL/*,xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y/0/0/*)\", \"sortedmulti(2,xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc/*,xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L/0/0/*)\", \"sortedmulti(2,xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL/*,xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y/0/0/*)\", RANGE, {{\"5221025d5fc65ebb8d44a5274b53bac21ff8307fec2334a32df05553459f8b1f7fe1b62102fbd47cc8034098f0e6a94c6aeee8528abf0a2153a5d8e46d325b7284c046784652ae\"}, {\"52210264fd4d1f5dea8ded94c61e9641309349b62f27fbffe807291f664e286bfbe6472103f4ece6dfccfa37b211eb3d0af4d0c61dba9ef698622dc17eecdf764beeb005a652ae\"}, {\"5221022ccabda84c30bad578b13c89eb3b9544ce149787e5b538175b1d1ba259cbb83321024d902e1a2fc7a8755ab5b694c575fce742c48d9ff192e63df5193e4c7afe1f9c52ae\"}}, std::nullopt, {{0}, {1}, {2}, {0, 0, 0}, {0, 0, 1}, {0, 0, 2}});\n     Check(\"wsh(multi(2,xprv9s21ZrQH143K31xYSDQpPDxsXRTUcvj2iNHm5NUtrGiGG5e2DtALGdso3pGz6ssrdK4PFmM8NSpSBHNqPqm55Qn3LqFtT2emdEXVYsCzC2U/2147483647'/0,xprv9vHkqa6EV4sPZHYqZznhT2NPtPCjKuDKGY38FBWLvgaDx45zo9WQRUT3dKYnjwih2yJD9mkrocEZXo1ex8G81dwSM1fwqWpWkeS3v86pgKt/1/2/*,xprv9s21ZrQH143K3QTDL4LXw2F7HEK3wJUD2nW2nRk4stbPy6cq3jPPqjiChkVvvNKmPGJxWUtg6LnF5kejMRNNU3TGtRBeJgk33yuGBxrMPHi/10/20/30/40/*'))\", \"wsh(multi(2,xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/2147483647'/0,xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/1/2/*,xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8/10/20/30/40/*'))\", \"wsh(multi(2,[bd16bee5/2147483647']xprv9vHkqa6XAPwKqSKSEJMcAB3yoCZhaSVsGZbSkFY5L3Lfjjk8sjZucbsbvEw5o3QrSA69nPfZDCgFnNnLhQ2ohpZuwummndnPasDw2Qr6dC2/0,xprv9vHkqa6EV4sPZHYqZznhT2NPtPCjKuDKGY38FBWLvgaDx45zo9WQRUT3dKYnjwih2yJD9mkrocEZXo1ex8G81dwSM1fwqWpWkeS3v86pgKt/1/2/*,xprv9s21ZrQH143K3QTDL4LXw2F7HEK3wJUD2nW2nRk4stbPy6cq3jPPqjiChkVvvNKmPGJxWUtg6LnF5kejMRNNU3TGtRBeJgk33yuGBxrMPHi/10/20/30/40/*'))\", \"wsh(multi(2,[bd16bee5/2147483647']xpub69H7F5dQzmVd3vPuLKtcXJziMEQByuDidnX3YdwgtNsecY5HRGtAAQC5mXTt4dsv9RzyjgDjAQs9VGVV6ydYCHnprc9vvaA5YtqWyL6hyds/0,xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/1/2/*,xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8/10/20/30/40/*'))\", HARDENED | RANGE | DERIVE_HARDENED, {{\"0020b92623201f3bb7c3771d45b2ad1d0351ea8fbf8cfe0a0e570264e1075fa1948f\"},{\"002036a08bbe4923af41cf4316817c93b8d37e2f635dd25cfff06bd50df6ae7ea203\"},{\"0020a96e7ab4607ca6b261bfe3245ffda9c746b28d3f59e83d34820ec0e2b36c139c\"}}, OutputType::BECH32, {{0xFFFFFFFFUL,0}, {1,2,0}, {1,2,1}, {1,2,2}, {10, 20, 30, 40, 0x80000000UL}, {10, 20, 30, 40, 0x80000001UL}, {10, 20, 30, 40, 0x80000002UL}});\n     Check(\"sh(wsh(multi(16,KzoAz5CanayRKex3fSLQ2BwJpN7U52gZvxMyk78nDMHuqrUxuSJy,KwGNz6YCCQtYvFzMtrC6D3tKTKdBBboMrLTsjr2NYVBwapCkn7Mr,KxogYhiNfwxuswvXV66eFyKcCpm7dZ7TqHVqujHAVUjJxyivxQ9X,L2BUNduTSyZwZjwNHynQTF14mv2uz2NRq5n5sYWTb4FkkmqgEE9f,L1okJGHGn1kFjdXHKxXjwVVtmCMR2JA5QsbKCSpSb7ReQjezKeoD,KxDCNSST75HFPaW5QKpzHtAyaCQC7p9Vo3FYfi2u4dXD1vgMiboK,L5edQjFtnkcf5UWURn6UuuoFrabgDQUHdheKCziwN42aLwS3KizU,KzF8UWFcEC7BYTq8Go1xVimMkDmyNYVmXV5PV7RuDicvAocoPB8i,L3nHUboKG2w4VSJ5jYZ5CBM97oeK6YuKvfZxrefdShECcjEYKMWZ,KyjHo36dWkYhimKmVVmQTq3gERv3pnqA4xFCpvUgbGDJad7eS8WE,KwsfyHKRUTZPQtysN7M3tZ4GXTnuov5XRgjdF2XCG8faAPmFruRF,KzCUbGhN9LJhdeFfL9zQgTJMjqxdBKEekRGZX24hXdgCNCijkkap,KzgpMBwwsDLwkaC5UrmBgCYaBD2WgZ7PBoGYXR8KT7gCA9UTN5a3,KyBXTPy4T7YG4q9tcAM3LkvfRpD1ybHMvcJ2ehaWXaSqeGUxEdkP,KzJDe9iwJRPtKP2F2AoN6zBgzS7uiuAwhWCfGdNeYJ3PC1HNJ8M8,L1xbHrxynrqLKkoYc4qtoQPx6uy5qYXR5ZDYVYBSRmCV5piU3JG9)))\",\"sh(wsh(multi(16,03669b8afcec803a0d323e9a17f3ea8e68e8abe5a278020a929adbec52421adbd0,0260b2003c386519fc9eadf2b5cf124dd8eea4c4e68d5e154050a9346ea98ce600,0362a74e399c39ed5593852a30147f2959b56bb827dfa3e60e464b02ccf87dc5e8,0261345b53de74a4d721ef877c255429961b7e43714171ac06168d7e08c542a8b8,02da72e8b46901a65d4374fe6315538d8f368557dda3a1dcf9ea903f3afe7314c8,0318c82dd0b53fd3a932d16e0ba9e278fcc937c582d5781be626ff16e201f72286,0297ccef1ef99f9d73dec9ad37476ddb232f1238aff877af19e72ba04493361009,02e502cfd5c3f972fe9a3e2a18827820638f96b6f347e54d63deb839011fd5765d,03e687710f0e3ebe81c1037074da939d409c0025f17eb86adb9427d28f0f7ae0e9,02c04d3a5274952acdbc76987f3184b346a483d43be40874624b29e3692c1df5af,02ed06e0f418b5b43a7ec01d1d7d27290fa15f75771cb69b642a51471c29c84acd,036d46073cbb9ffee90473f3da429abc8de7f8751199da44485682a989a4bebb24,02f5d1ff7c9029a80a4e36b9a5497027ef7f3e73384a4a94fbfe7c4e9164eec8bc,02e41deffd1b7cce11cde209a781adcffdabd1b91c0ba0375857a2bfd9302419f3,02d76625f7956a7fc505ab02556c23ee72d832f1bac391bcd2d3abce5710a13d06,0399eb0a5487515802dc14544cf10b3666623762fbed2ec38a3975716e2c29c232)))\", \"sh(wsh(multi(16,KzoAz5CanayRKex3fSLQ2BwJpN7U52gZvxMyk78nDMHuqrUxuSJy,KwGNz6YCCQtYvFzMtrC6D3tKTKdBBboMrLTsjr2NYVBwapCkn7Mr,KxogYhiNfwxuswvXV66eFyKcCpm7dZ7TqHVqujHAVUjJxyivxQ9X,L2BUNduTSyZwZjwNHynQTF14mv2uz2NRq5n5sYWTb4FkkmqgEE9f,L1okJGHGn1kFjdXHKxXjwVVtmCMR2JA5QsbKCSpSb7ReQjezKeoD,KxDCNSST75HFPaW5QKpzHtAyaCQC7p9Vo3FYfi2u4dXD1vgMiboK,L5edQjFtnkcf5UWURn6UuuoFrabgDQUHdheKCziwN42aLwS3KizU,KzF8UWFcEC7BYTq8Go1xVimMkDmyNYVmXV5PV7RuDicvAocoPB8i,L3nHUboKG2w4VSJ5jYZ5CBM97oeK6YuKvfZxrefdShECcjEYKMWZ,KyjHo36dWkYhimKmVVmQTq3gERv3pnqA4xFCpvUgbGDJad7eS8WE,KwsfyHKRUTZPQtysN7M3tZ4GXTnuov5XRgjdF2XCG8faAPmFruRF,KzCUbGhN9LJhdeFfL9zQgTJMjqxdBKEekRGZX24hXdgCNCijkkap,KzgpMBwwsDLwkaC5UrmBgCYaBD2WgZ7PBoGYXR8KT7gCA9UTN5a3,KyBXTPy4T7YG4q9tcAM3LkvfRpD1ybHMvcJ2ehaWXaSqeGUxEdkP,KzJDe9iwJRPtKP2F2AoN6zBgzS7uiuAwhWCfGdNeYJ3PC1HNJ8M8,L1xbHrxynrqLKkoYc4qtoQPx6uy5qYXR5ZDYVYBSRmCV5piU3JG9)))\",\"sh(wsh(multi(16,03669b8afcec803a0d323e9a17f3ea8e68e8abe5a278020a929adbec52421adbd0,0260b2003c386519fc9eadf2b5cf124dd8eea4c4e68d5e154050a9346ea98ce600,0362a74e399c39ed5593852a30147f2959b56bb827dfa3e60e464b02ccf87dc5e8,0261345b53de74a4d721ef877c255429961b7e43714171ac06168d7e08c542a8b8,02da72e8b46901a65d4374fe6315538d8f368557dda3a1dcf9ea903f3afe7314c8,0318c82dd0b53fd3a932d16e0ba9e278fcc937c582d5781be626ff16e201f72286,0297ccef1ef99f9d73dec9ad37476ddb232f1238aff877af19e72ba04493361009,02e502cfd5c3f972fe9a3e2a18827820638f96b6f347e54d63deb839011fd5765d,03e687710f0e3ebe81c1037074da939d409c0025f17eb86adb9427d28f0f7ae0e9,02c04d3a5274952acdbc76987f3184b346a483d43be40874624b29e3692c1df5af,02ed06e0f418b5b43a7ec01d1d7d27290fa15f75771cb69b642a51471c29c84acd,036d46073cbb9ffee90473f3da429abc8de7f8751199da44485682a989a4bebb24,02f5d1ff7c9029a80a4e36b9a5497027ef7f3e73384a4a94fbfe7c4e9164eec8bc,02e41deffd1b7cce11cde209a781adcffdabd1b91c0ba0375857a2bfd9302419f3,02d76625f7956a7fc505ab02556c23ee72d832f1bac391bcd2d3abce5710a13d06,0399eb0a5487515802dc14544cf10b3666623762fbed2ec38a3975716e2c29c232)))\", SIGNABLE, {{\"a9147fc63e13dc25e8a95a3cee3d9a714ac3afd96f1e87\"}}, OutputType::P2SH_SEGWIT);\n     CheckUnparsable(\"sh(multi(16,KzoAz5CanayRKex3fSLQ2BwJpN7U52gZvxMyk78nDMHuqrUxuSJy,KwGNz6YCCQtYvFzMtrC6D3tKTKdBBboMrLTsjr2NYVBwapCkn7Mr,KxogYhiNfwxuswvXV66eFyKcCpm7dZ7TqHVqujHAVUjJxyivxQ9X,L2BUNduTSyZwZjwNHynQTF14mv2uz2NRq5n5sYWTb4FkkmqgEE9f,L1okJGHGn1kFjdXHKxXjwVVtmCMR2JA5QsbKCSpSb7ReQjezKeoD,KxDCNSST75HFPaW5QKpzHtAyaCQC7p9Vo3FYfi2u4dXD1vgMiboK,L5edQjFtnkcf5UWURn6UuuoFrabgDQUHdheKCziwN42aLwS3KizU,KzF8UWFcEC7BYTq8Go1xVimMkDmyNYVmXV5PV7RuDicvAocoPB8i,L3nHUboKG2w4VSJ5jYZ5CBM97oeK6YuKvfZxrefdShECcjEYKMWZ,KyjHo36dWkYhimKmVVmQTq3gERv3pnqA4xFCpvUgbGDJad7eS8WE,KwsfyHKRUTZPQtysN7M3tZ4GXTnuov5XRgjdF2XCG8faAPmFruRF,KzCUbGhN9LJhdeFfL9zQgTJMjqxdBKEekRGZX24hXdgCNCijkkap,KzgpMBwwsDLwkaC5UrmBgCYaBD2WgZ7PBoGYXR8KT7gCA9UTN5a3,KyBXTPy4T7YG4q9tcAM3LkvfRpD1ybHMvcJ2ehaWXaSqeGUxEdkP,KzJDe9iwJRPtKP2F2AoN6zBgzS7uiuAwhWCfGdNeYJ3PC1HNJ8M8,L1xbHrxynrqLKkoYc4qtoQPx6uy5qYXR5ZDYVYBSRmCV5piU3JG9))\",\"sh(multi(16,03669b8afcec803a0d323e9a17f3ea8e68e8abe5a278020a929adbec52421adbd0,0260b2003c386519fc9eadf2b5cf124dd8eea4c4e68d5e154050a9346ea98ce600,0362a74e399c39ed5593852a30147f2959b56bb827dfa3e60e464b02ccf87dc5e8,0261345b53de74a4d721ef877c255429961b7e43714171ac06168d7e08c542a8b8,02da72e8b46901a65d4374fe6315538d8f368557dda3a1dcf9ea903f3afe7314c8,0318c82dd0b53fd3a932d16e0ba9e278fcc937c582d5781be626ff16e201f72286,0297ccef1ef99f9d73dec9ad37476ddb232f1238aff877af19e72ba04493361009,02e502cfd5c3f972fe9a3e2a18827820638f96b6f347e54d63deb839011fd5765d,03e687710f0e3ebe81c1037074da939d409c0025f17eb86adb9427d28f0f7ae0e9,02c04d3a5274952acdbc76987f3184b346a483d43be40874624b29e3692c1df5af,02ed06e0f418b5b43a7ec01d1d7d27290fa15f75771cb69b642a51471c29c84acd,036d46073cbb9ffee90473f3da429abc8de7f8751199da44485682a989a4bebb24,02f5d1ff7c9029a80a4e36b9a5497027ef7f3e73384a4a94fbfe7c4e9164eec8bc,02e41deffd1b7cce11cde209a781adcffdabd1b91c0ba0375857a2bfd9302419f3,02d76625f7956a7fc505ab02556c23ee72d832f1bac391bcd2d3abce5710a13d06,0399eb0a5487515802dc14544cf10b3666623762fbed2ec38a3975716e2c29c232))\", \"P2SH script is too large, 547 bytes is larger than 520 bytes\"); // P2SH does not fit 16 compressed pubkeys in a redeemscript"
      },
      {
        "sha": "479342e4be85d6f6f9157ff50cee2b75b4e1496d",
        "filename": "src/test/fuzz/autofile.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57e980d13ca488031bde6ef197cf34d493d36796/src/test/fuzz/autofile.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57e980d13ca488031bde6ef197cf34d493d36796/src/test/fuzz/autofile.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/autofile.cpp?ref=57e980d13ca488031bde6ef197cf34d493d36796",
        "patch": "@@ -2,7 +2,6 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <optional.h>\n #include <streams.h>\n #include <test/fuzz/FuzzedDataProvider.h>\n #include <test/fuzz/fuzz.h>"
      },
      {
        "sha": "ed72260d109a205ce966122eb9f7ded65301f7f7",
        "filename": "src/test/fuzz/buffered_file.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57e980d13ca488031bde6ef197cf34d493d36796/src/test/fuzz/buffered_file.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57e980d13ca488031bde6ef197cf34d493d36796/src/test/fuzz/buffered_file.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/buffered_file.cpp?ref=57e980d13ca488031bde6ef197cf34d493d36796",
        "patch": "@@ -2,7 +2,6 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <optional.h>\n #include <streams.h>\n #include <test/fuzz/FuzzedDataProvider.h>\n #include <test/fuzz/fuzz.h>"
      },
      {
        "sha": "66b0fdc090df98f206ced3193853eb8ccf4219eb",
        "filename": "src/test/fuzz/deserialize.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57e980d13ca488031bde6ef197cf34d493d36796/src/test/fuzz/deserialize.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57e980d13ca488031bde6ef197cf34d493d36796/src/test/fuzz/deserialize.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/deserialize.cpp?ref=57e980d13ca488031bde6ef197cf34d493d36796",
        "patch": "@@ -15,7 +15,7 @@\n #include <net.h>\n #include <netbase.h>\n #include <node/utxo_snapshot.h>\n-#include <optional.h>\n+#include <optional>\n #include <primitives/block.h>\n #include <protocol.h>\n #include <psbt.h>\n@@ -69,7 +69,7 @@ T Deserialize(CDataStream ds)\n }\n \n template <typename T>\n-void DeserializeFromFuzzingInput(FuzzBufferType buffer, T& obj, const Optional<int> protocol_version = nullopt)\n+void DeserializeFromFuzzingInput(FuzzBufferType buffer, T& obj, const std::optional<int> protocol_version = std::nullopt)\n {\n     CDataStream ds(buffer, SER_NETWORK, INIT_PROTO_VERSION);\n     if (protocol_version) {"
      },
      {
        "sha": "dc2f1e21608b5261b2da518fdcef06fe45ba0859",
        "filename": "src/test/fuzz/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57e980d13ca488031bde6ef197cf34d493d36796/src/test/fuzz/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57e980d13ca488031bde6ef197cf34d493d36796/src/test/fuzz/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/net.cpp?ref=57e980d13ca488031bde6ef197cf34d493d36796",
        "patch": "@@ -7,7 +7,7 @@\n #include <net.h>\n #include <net_permissions.h>\n #include <netaddress.h>\n-#include <optional.h>\n+#include <optional>\n #include <protocol.h>\n #include <random.h>\n #include <test/fuzz/FuzzedDataProvider.h>"
      },
      {
        "sha": "603d520cf5b0de9748ba68edb10f22dac4499557",
        "filename": "src/test/fuzz/node_eviction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57e980d13ca488031bde6ef197cf34d493d36796/src/test/fuzz/node_eviction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57e980d13ca488031bde6ef197cf34d493d36796/src/test/fuzz/node_eviction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/node_eviction.cpp?ref=57e980d13ca488031bde6ef197cf34d493d36796",
        "patch": "@@ -3,7 +3,6 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <net.h>\n-#include <optional.h>\n #include <protocol.h>\n #include <test/fuzz/FuzzedDataProvider.h>\n #include <test/fuzz/fuzz.h>\n@@ -37,7 +36,7 @@ FUZZ_TARGET(node_eviction)\n     // Make a copy since eviction_candidates may be in some valid but otherwise\n     // indeterminate state after the SelectNodeToEvict(&&) call.\n     const std::vector<NodeEvictionCandidate> eviction_candidates_copy = eviction_candidates;\n-    const Optional<NodeId> node_to_evict = SelectNodeToEvict(std::move(eviction_candidates));\n+    const std::optional<NodeId> node_to_evict = SelectNodeToEvict(std::move(eviction_candidates));\n     if (node_to_evict) {\n         assert(std::any_of(eviction_candidates_copy.begin(), eviction_candidates_copy.end(), [&node_to_evict](const NodeEvictionCandidate& eviction_candidate) { return *node_to_evict == eviction_candidate.id; }));\n     }"
      },
      {
        "sha": "c07cf9322e2ffc8d209f6f3042353b661ce6c439",
        "filename": "src/test/fuzz/p2p_transport_deserializer.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57e980d13ca488031bde6ef197cf34d493d36796/src/test/fuzz/p2p_transport_deserializer.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57e980d13ca488031bde6ef197cf34d493d36796/src/test/fuzz/p2p_transport_deserializer.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/p2p_transport_deserializer.cpp?ref=57e980d13ca488031bde6ef197cf34d493d36796",
        "patch": "@@ -30,7 +30,7 @@ FUZZ_TARGET_INIT(p2p_transport_deserializer, initialize_p2p_transport_deserializ\n         if (deserializer.Complete()) {\n             const std::chrono::microseconds m_time{std::numeric_limits<int64_t>::max()};\n             uint32_t out_err_raw_size{0};\n-            Optional<CNetMessage> result{deserializer.GetMessage(m_time, out_err_raw_size)};\n+            std::optional<CNetMessage> result{deserializer.GetMessage(m_time, out_err_raw_size)};\n             if (result) {\n                 assert(result->m_command.size() <= CMessageHeader::COMMAND_SIZE);\n                 assert(result->m_raw_message_size <= buffer.size());"
      },
      {
        "sha": "e06f9d33bc1118eca2439f9f2d981063f312cdd7",
        "filename": "src/test/fuzz/psbt.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57e980d13ca488031bde6ef197cf34d493d36796/src/test/fuzz/psbt.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57e980d13ca488031bde6ef197cf34d493d36796/src/test/fuzz/psbt.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/psbt.cpp?ref=57e980d13ca488031bde6ef197cf34d493d36796",
        "patch": "@@ -5,7 +5,7 @@\n #include <test/fuzz/fuzz.h>\n \n #include <node/psbt.h>\n-#include <optional.h>\n+#include <optional>\n #include <psbt.h>\n #include <pubkey.h>\n #include <script/script.h>\n@@ -39,7 +39,7 @@ FUZZ_TARGET_INIT(psbt, initialize_psbt)\n \n     (void)psbt.IsNull();\n \n-    Optional<CMutableTransaction> tx = psbt.tx;\n+    std::optional<CMutableTransaction> tx = psbt.tx;\n     if (tx) {\n         const CMutableTransaction& mtx = *tx;\n         const PartiallySignedTransaction psbt_from_tx{mtx};"
      },
      {
        "sha": "7c88fb2f47e69ab0e71352c60026951974df273c",
        "filename": "src/test/fuzz/script_descriptor_cache.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57e980d13ca488031bde6ef197cf34d493d36796/src/test/fuzz/script_descriptor_cache.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57e980d13ca488031bde6ef197cf34d493d36796/src/test/fuzz/script_descriptor_cache.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/script_descriptor_cache.cpp?ref=57e980d13ca488031bde6ef197cf34d493d36796",
        "patch": "@@ -2,7 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <optional.h>\n+#include <optional>\n #include <pubkey.h>\n #include <script/descriptor.h>\n #include <test/fuzz/FuzzedDataProvider.h>"
      },
      {
        "sha": "b25dcfcd3bd76bbaec994330d70d9a449dca1953",
        "filename": "src/test/fuzz/system.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57e980d13ca488031bde6ef197cf34d493d36796/src/test/fuzz/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57e980d13ca488031bde6ef197cf34d493d36796/src/test/fuzz/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/system.cpp?ref=57e980d13ca488031bde6ef197cf34d493d36796",
        "patch": "@@ -51,7 +51,7 @@ FUZZ_TARGET(system)\n                 // Avoid hitting:\n                 // util/system.cpp:425: void ArgsManager::AddArg(const std::string &, const std::string &, unsigned int, const OptionsCategory &): Assertion `ret.second' failed.\n                 const std::string argument_name = GetArgumentName(fuzzed_data_provider.ConsumeRandomLengthString(16));\n-                if (args_manager.GetArgFlags(argument_name) != nullopt) {\n+                if (args_manager.GetArgFlags(argument_name) != std::nullopt) {\n                     return;\n                 }\n                 args_manager.AddArg(argument_name, fuzzed_data_provider.ConsumeRandomLengthString(16), fuzzed_data_provider.ConsumeIntegral<unsigned int>() & ~ArgsManager::COMMAND, options_category);\n@@ -63,7 +63,7 @@ FUZZ_TARGET(system)\n                 std::vector<std::string> hidden_arguments;\n                 for (const std::string& name : names) {\n                     const std::string hidden_argument = GetArgumentName(name);\n-                    if (args_manager.GetArgFlags(hidden_argument) != nullopt) {\n+                    if (args_manager.GetArgFlags(hidden_argument) != std::nullopt) {\n                         continue;\n                     }\n                     if (std::find(hidden_arguments.begin(), hidden_arguments.end(), hidden_argument) != hidden_arguments.end()) {"
      },
      {
        "sha": "4509d0b68c7b6906f2761912272fe4cf21315553",
        "filename": "src/test/net_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57e980d13ca488031bde6ef197cf34d493d36796/src/test/net_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57e980d13ca488031bde6ef197cf34d493d36796/src/test/net_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/net_tests.cpp?ref=57e980d13ca488031bde6ef197cf34d493d36796",
        "patch": "@@ -9,7 +9,7 @@\n #include <cstdint>\n #include <net.h>\n #include <netbase.h>\n-#include <optional.h>\n+#include <optional>\n #include <serialize.h>\n #include <span.h>\n #include <streams.h>\n@@ -827,7 +827,7 @@ std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_c\n bool IsEvicted(std::vector<NodeEvictionCandidate> candidates, const std::vector<NodeId>& node_ids, FastRandomContext& random_context)\n {\n     Shuffle(candidates.begin(), candidates.end(), random_context);\n-    const Optional<NodeId> evicted_node_id = SelectNodeToEvict(std::move(candidates));\n+    const std::optional<NodeId> evicted_node_id = SelectNodeToEvict(std::move(candidates));\n     if (!evicted_node_id) {\n         return false;\n     }"
      },
      {
        "sha": "deb5e1e7204ab5aa0e3aeb2faaac2f8654b70a8b",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57e980d13ca488031bde6ef197cf34d493d36796/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57e980d13ca488031bde6ef197cf34d493d36796/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=57e980d13ca488031bde6ef197cf34d493d36796",
        "patch": "@@ -7,7 +7,7 @@\n #include <clientversion.h>\n #include <hash.h> // For Hash()\n #include <key.h>  // For CKey\n-#include <optional.h>\n+#include <optional>\n #include <sync.h>\n #include <test/util/logging.h>\n #include <test/util/setup_common.h>\n@@ -227,9 +227,9 @@ class CheckValueTest : public TestChain100Setup\n         bool default_int = false;\n         bool default_bool = false;\n         const char* string_value = nullptr;\n-        Optional<int64_t> int_value;\n-        Optional<bool> bool_value;\n-        Optional<std::vector<std::string>> list_value;\n+        std::optional<int64_t> int_value;\n+        std::optional<bool> bool_value;\n+        std::optional<std::vector<std::string>> list_value;\n         const char* error = nullptr;\n \n         explicit Expect(util::SettingsValue s) : setting(std::move(s)) {}"
      },
      {
        "sha": "5691a5faf5755f64ff880299f20913bd91894b92",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57e980d13ca488031bde6ef197cf34d493d36796/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57e980d13ca488031bde6ef197cf34d493d36796/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=57e980d13ca488031bde6ef197cf34d493d36796",
        "patch": "@@ -8,7 +8,7 @@\n #include <consensus/consensus.h>\n #include <consensus/tx_verify.h>\n #include <consensus/validation.h>\n-#include <optional.h>\n+#include <optional>\n #include <policy/fees.h>\n #include <policy/policy.h>\n #include <policy/settings.h>\n@@ -159,7 +159,7 @@ bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntr\n         // GetMemPoolParents() is only valid for entries in the mempool, so we\n         // iterate mapTx to find parents.\n         for (unsigned int i = 0; i < tx.vin.size(); i++) {\n-            Optional<txiter> piter = GetIter(tx.vin[i].prevout.hash);\n+            std::optional<txiter> piter = GetIter(tx.vin[i].prevout.hash);\n             if (piter) {\n                 staged_ancestors.insert(**piter);\n                 if (staged_ancestors.size() + 1 > limitAncestorCount) {\n@@ -890,11 +890,11 @@ const CTransaction* CTxMemPool::GetConflictTx(const COutPoint& prevout) const\n     return it == mapNextTx.end() ? nullptr : it->second;\n }\n \n-Optional<CTxMemPool::txiter> CTxMemPool::GetIter(const uint256& txid) const\n+std::optional<CTxMemPool::txiter> CTxMemPool::GetIter(const uint256& txid) const\n {\n     auto it = mapTx.find(txid);\n     if (it != mapTx.end()) return it;\n-    return Optional<txiter>{};\n+    return std::optional<txiter>{};\n }\n \n CTxMemPool::setEntries CTxMemPool::GetIterSet(const std::set<uint256>& hashes) const"
      },
      {
        "sha": "658efbce8393f9358a7dbcb45426f01e22e0a65f",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57e980d13ca488031bde6ef197cf34d493d36796/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57e980d13ca488031bde6ef197cf34d493d36796/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=57e980d13ca488031bde6ef197cf34d493d36796",
        "patch": "@@ -16,7 +16,7 @@\n #include <amount.h>\n #include <coins.h>\n #include <indirectmap.h>\n-#include <optional.h>\n+#include <optional>\n #include <policy/feerate.h>\n #include <primitives/transaction.h>\n #include <random.h>\n@@ -644,7 +644,7 @@ class CTxMemPool\n     const CTransaction* GetConflictTx(const COutPoint& prevout) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n     /** Returns an iterator to the given hash, if found */\n-    Optional<txiter> GetIter(const uint256& txid) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n+    std::optional<txiter> GetIter(const uint256& txid) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n     /** Translate a set of hashes into a set of pool iterators to avoid repeated lookups */\n     setEntries GetIterSet(const std::set<uint256>& hashes) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n@@ -841,7 +841,7 @@ class CTxMemPool\n         return m_epoch.visited(it->m_epoch_marker);\n     }\n \n-    bool visited(Optional<txiter> it) const EXCLUSIVE_LOCKS_REQUIRED(cs, m_epoch)\n+    bool visited(std::optional<txiter> it) const EXCLUSIVE_LOCKS_REQUIRED(cs, m_epoch)\n     {\n         assert(m_epoch.guarded()); // verify guard even when it==nullopt\n         return !it || visited(*it);"
      },
      {
        "sha": "0b83a76504ad88b93dbe66f43b7367720087b5f1",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57e980d13ca488031bde6ef197cf34d493d36796/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57e980d13ca488031bde6ef197cf34d493d36796/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=57e980d13ca488031bde6ef197cf34d493d36796",
        "patch": "@@ -315,7 +315,7 @@ bool ArgsManager::ParseParameters(int argc, const char* const argv[], std::strin\n         if (key[0] != '-') {\n             if (!m_accept_any_command && m_command.empty()) {\n                 // The first non-dash arg is a registered command\n-                Optional<unsigned int> flags = GetArgFlags(key);\n+                std::optional<unsigned int> flags = GetArgFlags(key);\n                 if (!flags || !(*flags & ArgsManager::COMMAND)) {\n                     error = strprintf(\"Invalid command '%s'\", argv[i]);\n                     return false;\n@@ -337,7 +337,7 @@ bool ArgsManager::ParseParameters(int argc, const char* const argv[], std::strin\n         key.erase(0, 1);\n         std::string section;\n         util::SettingsValue value = InterpretOption(section, key, val);\n-        Optional<unsigned int> flags = GetArgFlags('-' + key);\n+        std::optional<unsigned int> flags = GetArgFlags('-' + key);\n \n         // Unknown command line options and command line options with dot\n         // characters (which are returned from InterpretOption with nonempty\n@@ -363,7 +363,7 @@ bool ArgsManager::ParseParameters(int argc, const char* const argv[], std::strin\n     return success;\n }\n \n-Optional<unsigned int> ArgsManager::GetArgFlags(const std::string& name) const\n+std::optional<unsigned int> ArgsManager::GetArgFlags(const std::string& name) const\n {\n     LOCK(cs_args);\n     for (const auto& arg_map : m_available_args) {\n@@ -372,7 +372,7 @@ Optional<unsigned int> ArgsManager::GetArgFlags(const std::string& name) const\n             return search->second.m_flags;\n         }\n     }\n-    return nullopt;\n+    return std::nullopt;\n }\n \n std::optional<const ArgsManager::Command> ArgsManager::GetCommand() const\n@@ -874,7 +874,7 @@ bool ArgsManager::ReadConfigStream(std::istream& stream, const std::string& file\n         std::string section;\n         std::string key = option.first;\n         util::SettingsValue value = InterpretOption(section, key, option.second);\n-        Optional<unsigned int> flags = GetArgFlags('-' + key);\n+        std::optional<unsigned int> flags = GetArgFlags('-' + key);\n         if (flags) {\n             if (!CheckValid(key, value, *flags, error)) {\n                 return false;\n@@ -1034,7 +1034,7 @@ void ArgsManager::logArgsPrefix(\n     std::string section_str = section.empty() ? \"\" : \"[\" + section + \"] \";\n     for (const auto& arg : args) {\n         for (const auto& value : arg.second) {\n-            Optional<unsigned int> flags = GetArgFlags('-' + arg.first);\n+            std::optional<unsigned int> flags = GetArgFlags('-' + arg.first);\n             if (flags) {\n                 std::string value_str = (*flags & SENSITIVE) ? \"****\" : value.write();\n                 LogPrintf(\"%s %s%s=%s\\n\", prefix, section_str, arg.first, value_str);"
      },
      {
        "sha": "4c965ce1144ee40ccd0723c5585c96d8fd5cbc32",
        "filename": "src/util/system.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57e980d13ca488031bde6ef197cf34d493d36796/src/util/system.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57e980d13ca488031bde6ef197cf34d493d36796/src/util/system.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.h?ref=57e980d13ca488031bde6ef197cf34d493d36796",
        "patch": "@@ -19,7 +19,7 @@\n #include <compat/assumptions.h>\n #include <fs.h>\n #include <logging.h>\n-#include <optional.h>\n+#include <optional>\n #include <sync.h>\n #include <tinyformat.h>\n #include <util/settings.h>\n@@ -375,7 +375,7 @@ class ArgsManager\n      * Return Flags for known arg.\n      * Return nullopt for unknown arg.\n      */\n-    Optional<unsigned int> GetArgFlags(const std::string& name) const;\n+    std::optional<unsigned int> GetArgFlags(const std::string& name) const;\n \n     /**\n      * Read and update settings file with saved settings. This needs to be"
      },
      {
        "sha": "e48bea4b89edccb2f2b4ddd1b91e1daa3bc4a76e",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57e980d13ca488031bde6ef197cf34d493d36796/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57e980d13ca488031bde6ef197cf34d493d36796/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=57e980d13ca488031bde6ef197cf34d493d36796",
        "patch": "@@ -23,7 +23,7 @@\n #include <logging/timer.h>\n #include <node/coinstats.h>\n #include <node/ui_interface.h>\n-#include <optional.h>\n+#include <optional>\n #include <policy/policy.h>\n #include <policy/settings.h>\n #include <pow.h>\n@@ -5175,7 +5175,7 @@ double GuessVerificationProgress(const ChainTxData& data, const CBlockIndex *pin\n     return std::min<double>(pindex->nChainTx / fTxTotal, 1.0);\n }\n \n-Optional<uint256> ChainstateManager::SnapshotBlockhash() const {\n+std::optional<uint256> ChainstateManager::SnapshotBlockhash() const {\n     LOCK(::cs_main);\n     if (m_active_chainstate != nullptr &&\n             !m_active_chainstate->m_from_snapshot_blockhash.IsNull()) {"
      },
      {
        "sha": "119e4bb544c128c28fa99d1dfcf67bb3f97bf231",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57e980d13ca488031bde6ef197cf34d493d36796/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57e980d13ca488031bde6ef197cf34d493d36796/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=57e980d13ca488031bde6ef197cf34d493d36796",
        "patch": "@@ -17,7 +17,7 @@\n #include <crypto/common.h> // for ReadLE64\n #include <fs.h>\n #include <node/utxo_snapshot.h>\n-#include <optional.h>\n+#include <optional>\n #include <policy/feerate.h>\n #include <protocol.h> // For CMessageHeader::MessageStartChars\n #include <script/script_error.h>\n@@ -206,7 +206,7 @@ struct MempoolAcceptResult {\n     /** Constructor for failure case */\n     explicit MempoolAcceptResult(TxValidationState state)\n         : m_result_type(ResultType::INVALID),\n-        m_state(state), m_replaced_transactions(nullopt), m_base_fees(nullopt) {\n+        m_state(state), m_replaced_transactions(std::nullopt), m_base_fees(std::nullopt) {\n             Assume(!state.IsValid()); // Can be invalid or error\n         }\n \n@@ -924,7 +924,7 @@ class ChainstateManager\n \n     bool IsSnapshotActive() const;\n \n-    Optional<uint256> SnapshotBlockhash() const;\n+    std::optional<uint256> SnapshotBlockhash() const;\n \n     //! Is there a snapshot in use and has it been fully validated?\n     bool IsSnapshotValidated() const { return m_snapshot_validated; }"
      },
      {
        "sha": "bf7107d0d5fe847e1f195a0c73782dc9adce765f",
        "filename": "src/wallet/coincontrol.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57e980d13ca488031bde6ef197cf34d493d36796/src/wallet/coincontrol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57e980d13ca488031bde6ef197cf34d493d36796/src/wallet/coincontrol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coincontrol.h?ref=57e980d13ca488031bde6ef197cf34d493d36796",
        "patch": "@@ -5,7 +5,7 @@\n #ifndef BITCOIN_WALLET_COINCONTROL_H\n #define BITCOIN_WALLET_COINCONTROL_H\n \n-#include <optional.h>\n+#include <optional>\n #include <outputtype.h>\n #include <policy/feerate.h>\n #include <policy/fees.h>\n@@ -25,7 +25,7 @@ class CCoinControl\n     //! Custom change destination, if not set an address is generated\n     CTxDestination destChange;\n     //! Override the default change type if set, ignored if destChange is set\n-    Optional<OutputType> m_change_type;\n+    std::optional<OutputType> m_change_type;\n     //! If false, only selected inputs are used\n     bool m_add_inputs;\n     //! If false, allows unselected inputs, but requires all selected inputs be used\n@@ -35,11 +35,11 @@ class CCoinControl\n     //! Override automatic min/max checks on fee, m_feerate must be set if true\n     bool fOverrideFeeRate;\n     //! Override the wallet's m_pay_tx_fee if set\n-    Optional<CFeeRate> m_feerate;\n+    std::optional<CFeeRate> m_feerate;\n     //! Override the default confirmation target if set\n-    Optional<unsigned int> m_confirm_target;\n+    std::optional<unsigned int> m_confirm_target;\n     //! Override the wallet's m_signal_rbf if set\n-    Optional<bool> m_signal_bip125_rbf;\n+    std::optional<bool> m_signal_bip125_rbf;\n     //! Avoid partial use of funds sent to a given address\n     bool m_avoid_partial_spends;\n     //! Forbids inclusion of dirty (previously used) addresses"
      },
      {
        "sha": "fe4ef21d288783a6ef1c4ad7235d33762365f8b3",
        "filename": "src/wallet/coinselection.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57e980d13ca488031bde6ef197cf34d493d36796/src/wallet/coinselection.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57e980d13ca488031bde6ef197cf34d493d36796/src/wallet/coinselection.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coinselection.cpp?ref=57e980d13ca488031bde6ef197cf34d493d36796",
        "patch": "@@ -4,7 +4,7 @@\n \n #include <wallet/coinselection.h>\n \n-#include <optional.h>\n+#include <optional>\n #include <policy/feerate.h>\n #include <util/system.h>\n #include <util/moneystr.h>\n@@ -222,7 +222,7 @@ bool KnapsackSolver(const CAmount& nTargetValue, std::vector<OutputGroup>& group\n     nValueRet = 0;\n \n     // List of values less than target\n-    Optional<OutputGroup> lowest_larger;\n+    std::optional<OutputGroup> lowest_larger;\n     std::vector<OutputGroup> applicable_groups;\n     CAmount nTotalLower = 0;\n "
      },
      {
        "sha": "2bc50bacfd101b15eb0adf31fb84143a8bc5c204",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57e980d13ca488031bde6ef197cf34d493d36796/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57e980d13ca488031bde6ef197cf34d493d36796/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=57e980d13ca488031bde6ef197cf34d493d36796",
        "patch": "@@ -8,7 +8,7 @@\n \n #include <clientversion.h>\n #include <fs.h>\n-#include <optional.h>\n+#include <optional>\n #include <streams.h>\n #include <support/allocators/secure.h>\n \n@@ -203,7 +203,7 @@ enum class DatabaseFormat {\n struct DatabaseOptions {\n     bool require_existing = false;\n     bool require_create = false;\n-    Optional<DatabaseFormat> require_format;\n+    std::optional<DatabaseFormat> require_format;\n     uint64_t create_flags = 0;\n     SecureString create_passphrase;\n     bool verify = true;"
      },
      {
        "sha": "4543f6fb4cc25b3554b9a44d426df7cfd60c7af0",
        "filename": "src/wallet/load.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57e980d13ca488031bde6ef197cf34d493d36796/src/wallet/load.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57e980d13ca488031bde6ef197cf34d493d36796/src/wallet/load.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/load.cpp?ref=57e980d13ca488031bde6ef197cf34d493d36796",
        "patch": "@@ -154,7 +154,7 @@ void UnloadWallets()\n         auto wallet = wallets.back();\n         wallets.pop_back();\n         std::vector<bilingual_str> warnings;\n-        RemoveWallet(wallet, nullopt, warnings);\n+        RemoveWallet(wallet, std::nullopt, warnings);\n         UnloadWallet(std::move(wallet));\n     }\n }"
      },
      {
        "sha": "a6e7956262b65e94c8db7aad1c9cca632f0b2fa4",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57e980d13ca488031bde6ef197cf34d493d36796/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57e980d13ca488031bde6ef197cf34d493d36796/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=57e980d13ca488031bde6ef197cf34d493d36796",
        "patch": "@@ -1788,7 +1788,7 @@ RPCHelpMan listdescriptors()\n         const bool active = active_spk_mans.count(desc_spk_man) != 0;\n         spk.pushKV(\"active\", active);\n         const auto& type = wallet_descriptor.descriptor->GetOutputType();\n-        if (active && type != nullopt) {\n+        if (active && type != std::nullopt) {\n             spk.pushKV(\"internal\", wallet->GetScriptPubKeyMan(*type, true) == desc_spk_man);\n         }\n         if (wallet_descriptor.descriptor->IsRange()) {"
      },
      {
        "sha": "cf71f1e163a29fa405857b2f56a826d0640392b3",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57e980d13ca488031bde6ef197cf34d493d36796/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57e980d13ca488031bde6ef197cf34d493d36796/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=57e980d13ca488031bde6ef197cf34d493d36796",
        "patch": "@@ -8,7 +8,7 @@\n #include <interfaces/chain.h>\n #include <key_io.h>\n #include <node/context.h>\n-#include <optional.h>\n+#include <optional>\n #include <outputtype.h>\n #include <policy/feerate.h>\n #include <policy/fees.h>\n@@ -219,7 +219,7 @@ static void SetFeeEstimateMode(const CWallet& wallet, CCoinControl& cc, const Un\n         cc.m_feerate = CFeeRate(AmountFromValue(fee_rate), COIN);\n         if (override_min_fee) cc.fOverrideFeeRate = true;\n         // Default RBF to true for explicit fee_rate, if unset.\n-        if (cc.m_signal_bip125_rbf == nullopt) cc.m_signal_bip125_rbf = true;\n+        if (cc.m_signal_bip125_rbf == std::nullopt) cc.m_signal_bip125_rbf = true;\n         return;\n     }\n     if (!estimate_mode.isNull() && !FeeModeFromString(estimate_mode.get_str(), cc.m_fee_mode)) {\n@@ -1564,8 +1564,8 @@ static RPCHelpMan listsinceblock()\n \n     LOCK(wallet.cs_wallet);\n \n-    Optional<int> height;    // Height of the specified block or the common ancestor, if the block provided was in a deactivated chain.\n-    Optional<int> altheight; // Height of the specified block, even if it's in a deactivated chain.\n+    std::optional<int> height;    // Height of the specified block or the common ancestor, if the block provided was in a deactivated chain.\n+    std::optional<int> altheight; // Height of the specified block, even if it's in a deactivated chain.\n     int target_confirms = 1;\n     isminefilter filter = ISMINE_SPENDABLE;\n \n@@ -2590,7 +2590,7 @@ static RPCHelpMan loadwallet()\n     options.require_existing = true;\n     bilingual_str error;\n     std::vector<bilingual_str> warnings;\n-    Optional<bool> load_on_start = request.params[1].isNull() ? nullopt : Optional<bool>(request.params[1].get_bool());\n+    std::optional<bool> load_on_start = request.params[1].isNull() ? std::nullopt : std::optional<bool>(request.params[1].get_bool());\n     std::shared_ptr<CWallet> const wallet = LoadWallet(*context.chain, name, load_on_start, options, status, error, warnings);\n     if (!wallet) {\n         // Map bad format to not found, since bad format is returned when the\n@@ -2764,7 +2764,7 @@ static RPCHelpMan createwallet()\n     options.create_flags = flags;\n     options.create_passphrase = passphrase;\n     bilingual_str error;\n-    Optional<bool> load_on_start = request.params[6].isNull() ? nullopt : Optional<bool>(request.params[6].get_bool());\n+    std::optional<bool> load_on_start = request.params[6].isNull() ? std::nullopt : std::optional<bool>(request.params[6].get_bool());\n     std::shared_ptr<CWallet> wallet = CreateWallet(*context.chain, request.params[0].get_str(), load_on_start, options, status, error, warnings);\n     if (!wallet) {\n         RPCErrorCode code = status == DatabaseStatus::FAILED_ENCRYPT ? RPC_WALLET_ENCRYPTION_FAILED : RPC_WALLET_ERROR;\n@@ -2816,7 +2816,7 @@ static RPCHelpMan unloadwallet()\n     // Note that any attempt to load the same wallet would fail until the wallet\n     // is destroyed (see CheckUniqueFileid).\n     std::vector<bilingual_str> warnings;\n-    Optional<bool> load_on_start = request.params[1].isNull() ? nullopt : Optional<bool>(request.params[1].get_bool());\n+    std::optional<bool> load_on_start = request.params[1].isNull() ? std::nullopt : std::optional<bool>(request.params[1].get_bool());\n     if (!RemoveWallet(wallet, load_on_start, warnings)) {\n         throw JSONRPCError(RPC_MISC_ERROR, \"Requested wallet already unloaded\");\n     }\n@@ -3587,7 +3587,7 @@ static RPCHelpMan rescanblockchain()\n     }\n \n     int start_height = 0;\n-    Optional<int> stop_height;\n+    std::optional<int> stop_height;\n     uint256 start_block;\n     {\n         LOCK(pwallet->cs_wallet);"
      },
      {
        "sha": "2ec1430c838379a4fdb3a979d2c84b590a61e301",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57e980d13ca488031bde6ef197cf34d493d36796/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57e980d13ca488031bde6ef197cf34d493d36796/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=57e980d13ca488031bde6ef197cf34d493d36796",
        "patch": "@@ -1607,7 +1607,7 @@ bool DescriptorScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDest\n     {\n         LOCK(cs_desc_man);\n         assert(m_wallet_descriptor.descriptor->IsSingleType()); // This is a combo descriptor which should not be an active descriptor\n-        Optional<OutputType> desc_addr_type = m_wallet_descriptor.descriptor->GetOutputType();\n+        std::optional<OutputType> desc_addr_type = m_wallet_descriptor.descriptor->GetOutputType();\n         assert(desc_addr_type);\n         if (type != *desc_addr_type) {\n             throw std::runtime_error(std::string(__func__) + \": Types are inconsistent\");\n@@ -1629,7 +1629,7 @@ bool DescriptorScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDest\n             return false;\n         }\n \n-        Optional<OutputType> out_script_type = m_wallet_descriptor.descriptor->GetOutputType();\n+        std::optional<OutputType> out_script_type = m_wallet_descriptor.descriptor->GetOutputType();\n         if (out_script_type && out_script_type == type) {\n             ExtractDestination(scripts_temp[0], dest);\n         } else {"
      },
      {
        "sha": "30cc4520657a86ffb5168ee223d5f70402f920f4",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57e980d13ca488031bde6ef197cf34d493d36796/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57e980d13ca488031bde6ef197cf34d493d36796/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=57e980d13ca488031bde6ef197cf34d493d36796",
        "patch": "@@ -228,7 +228,7 @@ BOOST_FIXTURE_TEST_CASE(importmulti_rescan, TestChain100Setup)\n                       \"downloading and rescanning the relevant blocks (see -reindex and -rescan \"\n                       \"options).\\\"}},{\\\"success\\\":true}]\",\n                               0, oldTip->GetBlockTimeMax(), TIMESTAMP_WINDOW));\n-        RemoveWallet(wallet, nullopt);\n+        RemoveWallet(wallet, std::nullopt);\n     }\n }\n \n@@ -271,7 +271,7 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n         request.params.push_back(backup_file);\n \n         ::dumpwallet().HandleRequest(request);\n-        RemoveWallet(wallet, nullopt);\n+        RemoveWallet(wallet, std::nullopt);\n     }\n \n     // Call importwallet RPC and verify all blocks with timestamps >= BLOCK_TIME\n@@ -288,7 +288,7 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n         AddWallet(wallet);\n         wallet->SetLastBlockProcessed(::ChainActive().Height(), ::ChainActive().Tip()->GetBlockHash());\n         ::importwallet().HandleRequest(request);\n-        RemoveWallet(wallet, nullopt);\n+        RemoveWallet(wallet, std::nullopt);\n \n         BOOST_CHECK_EQUAL(wallet->mapWallet.size(), 3U);\n         BOOST_CHECK_EQUAL(m_coinbase_txns.size(), 103U);"
      },
      {
        "sha": "ad1d04d084f9332690cea0aaa691c20d9b1f79c2",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57e980d13ca488031bde6ef197cf34d493d36796/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57e980d13ca488031bde6ef197cf34d493d36796/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=57e980d13ca488031bde6ef197cf34d493d36796",
        "patch": "@@ -13,7 +13,7 @@\n #include <interfaces/wallet.h>\n #include <key.h>\n #include <key_io.h>\n-#include <optional.h>\n+#include <optional>\n #include <outputtype.h>\n #include <policy/fees.h>\n #include <policy/policy.h>\n@@ -84,10 +84,10 @@ bool RemoveWalletSetting(interfaces::Chain& chain, const std::string& wallet_nam\n \n static void UpdateWalletSetting(interfaces::Chain& chain,\n                                 const std::string& wallet_name,\n-                                Optional<bool> load_on_startup,\n+                                std::optional<bool> load_on_startup,\n                                 std::vector<bilingual_str>& warnings)\n {\n-    if (load_on_startup == nullopt) return;\n+    if (load_on_startup == std::nullopt) return;\n     if (load_on_startup.value() && !AddWalletSetting(chain, wallet_name)) {\n         warnings.emplace_back(Untranslated(\"Wallet load on startup setting could not be updated, so wallet may not be loaded next node startup.\"));\n     } else if (!load_on_startup.value() && !RemoveWalletSetting(chain, wallet_name)) {\n@@ -107,7 +107,7 @@ bool AddWallet(const std::shared_ptr<CWallet>& wallet)\n     return true;\n }\n \n-bool RemoveWallet(const std::shared_ptr<CWallet>& wallet, Optional<bool> load_on_start, std::vector<bilingual_str>& warnings)\n+bool RemoveWallet(const std::shared_ptr<CWallet>& wallet, std::optional<bool> load_on_start, std::vector<bilingual_str>& warnings)\n {\n     assert(wallet);\n \n@@ -127,7 +127,7 @@ bool RemoveWallet(const std::shared_ptr<CWallet>& wallet, Optional<bool> load_on\n     return true;\n }\n \n-bool RemoveWallet(const std::shared_ptr<CWallet>& wallet, Optional<bool> load_on_start)\n+bool RemoveWallet(const std::shared_ptr<CWallet>& wallet, std::optional<bool> load_on_start)\n {\n     std::vector<bilingual_str> warnings;\n     return RemoveWallet(wallet, load_on_start, warnings);\n@@ -204,7 +204,7 @@ void UnloadWallet(std::shared_ptr<CWallet>&& wallet)\n }\n \n namespace {\n-std::shared_ptr<CWallet> LoadWalletInternal(interfaces::Chain& chain, const std::string& name, Optional<bool> load_on_start, const DatabaseOptions& options, DatabaseStatus& status, bilingual_str& error, std::vector<bilingual_str>& warnings)\n+std::shared_ptr<CWallet> LoadWalletInternal(interfaces::Chain& chain, const std::string& name, std::optional<bool> load_on_start, const DatabaseOptions& options, DatabaseStatus& status, bilingual_str& error, std::vector<bilingual_str>& warnings)\n {\n     try {\n         std::unique_ptr<WalletDatabase> database = MakeWalletDatabase(name, options, status, error);\n@@ -234,7 +234,7 @@ std::shared_ptr<CWallet> LoadWalletInternal(interfaces::Chain& chain, const std:\n }\n } // namespace\n \n-std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const std::string& name, Optional<bool> load_on_start, const DatabaseOptions& options, DatabaseStatus& status, bilingual_str& error, std::vector<bilingual_str>& warnings)\n+std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const std::string& name, std::optional<bool> load_on_start, const DatabaseOptions& options, DatabaseStatus& status, bilingual_str& error, std::vector<bilingual_str>& warnings)\n {\n     auto result = WITH_LOCK(g_loading_wallet_mutex, return g_loading_wallet_set.insert(name));\n     if (!result.second) {\n@@ -247,7 +247,7 @@ std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const std::string&\n     return wallet;\n }\n \n-std::shared_ptr<CWallet> CreateWallet(interfaces::Chain& chain, const std::string& name, Optional<bool> load_on_start, DatabaseOptions& options, DatabaseStatus& status, bilingual_str& error, std::vector<bilingual_str>& warnings)\n+std::shared_ptr<CWallet> CreateWallet(interfaces::Chain& chain, const std::string& name, std::optional<bool> load_on_start, DatabaseOptions& options, DatabaseStatus& status, bilingual_str& error, std::vector<bilingual_str>& warnings)\n {\n     uint64_t wallet_creation_flags = options.create_flags;\n     const SecureString& passphrase = options.create_passphrase;\n@@ -1763,7 +1763,7 @@ int64_t CWallet::RescanFromTime(int64_t startTime, const WalletRescanReserver& r\n  * the main chain after to the addition of any new keys you want to detect\n  * transactions for.\n  */\n-CWallet::ScanResult CWallet::ScanForWalletTransactions(const uint256& start_block, int start_height, Optional<int> max_height, const WalletRescanReserver& reserver, bool fUpdate)\n+CWallet::ScanResult CWallet::ScanForWalletTransactions(const uint256& start_block, int start_height, std::optional<int> max_height, const WalletRescanReserver& reserver, bool fUpdate)\n {\n     int64_t nNow = GetTime();\n     int64_t start_time = GetTimeMillis();\n@@ -2725,7 +2725,7 @@ static uint32_t GetLocktimeForNewTransaction(interfaces::Chain& chain, const uin\n     return locktime;\n }\n \n-OutputType CWallet::TransactionChangeType(const Optional<OutputType>& change_type, const std::vector<CRecipient>& vecSend) const\n+OutputType CWallet::TransactionChangeType(const std::optional<OutputType>& change_type, const std::vector<CRecipient>& vecSend) const\n {\n     // If -changetype is specified, always use that change type.\n     if (change_type) {\n@@ -4067,13 +4067,13 @@ std::shared_ptr<CWallet> CWallet::Create(interfaces::Chain& chain, const std::st\n         WalletBatch batch(walletInstance->GetDatabase());\n         CBlockLocator locator;\n         if (batch.ReadBestBlock(locator)) {\n-            if (const Optional<int> fork_height = chain.findLocatorFork(locator)) {\n+            if (const std::optional<int> fork_height = chain.findLocatorFork(locator)) {\n                 rescan_height = *fork_height;\n             }\n         }\n     }\n \n-    const Optional<int> tip_height = chain.getHeight();\n+    const std::optional<int> tip_height = chain.getHeight();\n     if (tip_height) {\n         walletInstance->m_last_block_processed = chain.getBlockHash(*tip_height);\n         walletInstance->m_last_block_processed_height = *tip_height;\n@@ -4107,7 +4107,7 @@ std::shared_ptr<CWallet> CWallet::Create(interfaces::Chain& chain, const std::st\n \n         // No need to read and scan block if block was created before\n         // our wallet birthday (as adjusted for block time variability)\n-        Optional<int64_t> time_first_key;\n+        std::optional<int64_t> time_first_key;\n         for (auto spk_man : walletInstance->GetAllScriptPubKeyMans()) {\n             int64_t time = spk_man->GetTimeFirstKey();\n             if (!time_first_key || time < *time_first_key) time_first_key = time;"
      },
      {
        "sha": "5087ffb35c37815f9cc2cc28b6eabb8fe0553aa9",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57e980d13ca488031bde6ef197cf34d493d36796/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57e980d13ca488031bde6ef197cf34d493d36796/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=57e980d13ca488031bde6ef197cf34d493d36796",
        "patch": "@@ -51,12 +51,12 @@ struct bilingual_str;\n void UnloadWallet(std::shared_ptr<CWallet>&& wallet);\n \n bool AddWallet(const std::shared_ptr<CWallet>& wallet);\n-bool RemoveWallet(const std::shared_ptr<CWallet>& wallet, Optional<bool> load_on_start, std::vector<bilingual_str>& warnings);\n-bool RemoveWallet(const std::shared_ptr<CWallet>& wallet, Optional<bool> load_on_start);\n+bool RemoveWallet(const std::shared_ptr<CWallet>& wallet, std::optional<bool> load_on_start, std::vector<bilingual_str>& warnings);\n+bool RemoveWallet(const std::shared_ptr<CWallet>& wallet, std::optional<bool> load_on_start);\n std::vector<std::shared_ptr<CWallet>> GetWallets();\n std::shared_ptr<CWallet> GetWallet(const std::string& name);\n-std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const std::string& name, Optional<bool> load_on_start, const DatabaseOptions& options, DatabaseStatus& status, bilingual_str& error, std::vector<bilingual_str>& warnings);\n-std::shared_ptr<CWallet> CreateWallet(interfaces::Chain& chain, const std::string& name, Optional<bool> load_on_start, DatabaseOptions& options, DatabaseStatus& status, bilingual_str& error, std::vector<bilingual_str>& warnings);\n+std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const std::string& name, std::optional<bool> load_on_start, const DatabaseOptions& options, DatabaseStatus& status, bilingual_str& error, std::vector<bilingual_str>& warnings);\n+std::shared_ptr<CWallet> CreateWallet(interfaces::Chain& chain, const std::string& name, std::optional<bool> load_on_start, DatabaseOptions& options, DatabaseStatus& status, bilingual_str& error, std::vector<bilingual_str>& warnings);\n std::unique_ptr<interfaces::Handler> HandleLoadWallet(LoadWalletFn load_wallet);\n std::unique_ptr<WalletDatabase> MakeWalletDatabase(const std::string& name, const DatabaseOptions& options, DatabaseStatus& status, bilingual_str& error);\n \n@@ -923,15 +923,15 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n         //! Unset if no blocks were scanned due to read errors or the chain\n         //! being empty.\n         uint256 last_scanned_block;\n-        Optional<int> last_scanned_height;\n+        std::optional<int> last_scanned_height;\n \n         //! Height of the most recent block that could not be scanned due to\n         //! read errors or pruning. Will be set if status is FAILURE, unset if\n         //! status is SUCCESS, and may or may not be set if status is\n         //! USER_ABORT.\n         uint256 last_failed_block;\n     };\n-    ScanResult ScanForWalletTransactions(const uint256& start_block, int start_height, Optional<int> max_height, const WalletRescanReserver& reserver, bool fUpdate);\n+    ScanResult ScanForWalletTransactions(const uint256& start_block, int start_height, std::optional<int> max_height, const WalletRescanReserver& reserver, bool fUpdate);\n     void transactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRemovalReason reason, uint64_t mempool_sequence) override;\n     void ReacceptWalletTransactions() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     void ResendWalletTransactions();\n@@ -946,7 +946,7 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n     Balance GetBalance(int min_depth = 0, bool avoid_reuse = true) const;\n     CAmount GetAvailableBalance(const CCoinControl* coinControl = nullptr) const;\n \n-    OutputType TransactionChangeType(const Optional<OutputType>& change_type, const std::vector<CRecipient>& vecSend) const;\n+    OutputType TransactionChangeType(const std::optional<OutputType>& change_type, const std::vector<CRecipient>& vecSend) const;\n \n     /**\n      * Insert additional inputs into the transaction by\n@@ -1031,7 +1031,7 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n      * (see -changetype option documentation and implementation in\n      * CWallet::TransactionChangeType for details).\n      */\n-    Optional<OutputType> m_default_change_type{};\n+    std::optional<OutputType> m_default_change_type{};\n     /** Absolute maximum transaction fee (in satoshis) used by default for the wallet */\n     CAmount m_default_max_tx_fee{DEFAULT_TRANSACTION_MAXFEE};\n "
      },
      {
        "sha": "c9bb73bb7c901cc4f3ff02139889165331f19568",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57e980d13ca488031bde6ef197cf34d493d36796/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57e980d13ca488031bde6ef197cf34d493d36796/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=57e980d13ca488031bde6ef197cf34d493d36796",
        "patch": "@@ -1015,7 +1015,7 @@ std::unique_ptr<WalletDatabase> MakeDatabase(const fs::path& path, const Databas\n         return nullptr;\n     }\n \n-    Optional<DatabaseFormat> format;\n+    std::optional<DatabaseFormat> format;\n     if (exists) {\n         if (IsBDBFile(BDBDataFile(path))) {\n             format = DatabaseFormat::BERKELEY;"
      }
    ]
  },
  {
    "sha": "ebc4ab721b0371c0ef217c0f5bd7d42613e951e6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYmM0YWI3MjFiMDM3MWMwZWYyMTdjMGY1YmQ3ZDQyNjEzZTk1MWU2",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-03-15T03:59:05Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-03-17T06:56:20Z"
      },
      "message": "refactor: post Optional<> removal cleanups",
      "tree": {
        "sha": "c4f91deb60589d4d6e5c347d99ca7c611a01ee79",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c4f91deb60589d4d6e5c347d99ca7c611a01ee79"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ebc4ab721b0371c0ef217c0f5bd7d42613e951e6",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmBRqBQACgkQLuufXMCV\nJsGwLQ//eAqALNhF9NjSAYgcqkp1t42Qj93evSEEGeU2ppofV7K1PyVLOEgu7Hlc\n5ZcNXyaSI7AVcXlxm/VDiBx86C/NG/JPctPXfB0aQ9esf8StigQNBsLZXZWrXZjP\nd4pywcQsFPMs1+NGav5c8yaS/bxEX5o2MSobTeSTZGntFxZtj/EC9o1nktsxXrGS\nTMy27xTIsekkbCgGVy+Q38WqXfWIsAMzwlTfRIktM3lHbnrjRVScdmqMCL2jxV5o\nWy/So0p3Ed65xoqWtIbM37SiQLG6wmU1mgo1h6FCTeGb7bBvmk4qmBp8lgAd81nG\nC2/ZZ7OgPDNJ9AM06vbJ5I7WJko4IFCj9IWy2bZIISik1NkZjo4ldk+GCEFVnmpg\nSP3rCnhoUA8yF1FcjhN9VbuPsaRiz+d7QZ5XHw/ooCQa1lCwFxaXW4W/ahr/uGgC\nG0qLw/Oz820BxgtJad4pEoYd/kqyYrmN0cacvNjzdPTSa48HnEfJLoVcP4Qd81c5\nyl/q6UuINGOXLv53gifKn0iPGrJFycHhdM21GYnIeg+52l/i6Ve5jxVp7LwJGoFa\nC538+oa0yUelVmNzlRSk3IwwmcQMNUdww7eD6+51TY703YjF72cnVBCwIiD+60yT\nhoWweQdwoN38BaoU18EPAPexM/J4LABZkYnPTnYfuNSoJN863h0=\n=uW4i\n-----END PGP SIGNATURE-----",
        "payload": "tree c4f91deb60589d4d6e5c347d99ca7c611a01ee79\nparent 57e980d13ca488031bde6ef197cf34d493d36796\nauthor fanquake <fanquake@gmail.com> 1615780745 +0800\ncommitter fanquake <fanquake@gmail.com> 1615964180 +0800\n\nrefactor: post Optional<> removal cleanups\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ebc4ab721b0371c0ef217c0f5bd7d42613e951e6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ebc4ab721b0371c0ef217c0f5bd7d42613e951e6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ebc4ab721b0371c0ef217c0f5bd7d42613e951e6/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "57e980d13ca488031bde6ef197cf34d493d36796",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/57e980d13ca488031bde6ef197cf34d493d36796",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/57e980d13ca488031bde6ef197cf34d493d36796"
      }
    ],
    "stats": {
      "total": 92,
      "additions": 53,
      "deletions": 39
    },
    "files": [
      {
        "sha": "d7cc167885d886ffb22bd685abfcc0c631036627",
        "filename": "src/bench/wallet_balance.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ebc4ab721b0371c0ef217c0f5bd7d42613e951e6/src/bench/wallet_balance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ebc4ab721b0371c0ef217c0f5bd7d42613e951e6/src/bench/wallet_balance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/wallet_balance.cpp?ref=ebc4ab721b0371c0ef217c0f5bd7d42613e951e6",
        "patch": "@@ -5,13 +5,14 @@\n #include <bench/bench.h>\n #include <interfaces/chain.h>\n #include <node/context.h>\n-#include <optional>\n #include <test/util/mining.h>\n #include <test/util/setup_common.h>\n #include <test/util/wallet.h>\n #include <validationinterface.h>\n #include <wallet/wallet.h>\n \n+#include <optional>\n+\n static void WalletBalance(benchmark::Bench& bench, const bool set_dirty, const bool add_watchonly, const bool add_mine)\n {\n     const auto test_setup = MakeNoLogFileContext<const TestingSetup>();"
      },
      {
        "sha": "ecd08c62ebb265a67230bd00e6aa079299a0a4b2",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ebc4ab721b0371c0ef217c0f5bd7d42613e951e6/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ebc4ab721b0371c0ef217c0f5bd7d42613e951e6/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=ebc4ab721b0371c0ef217c0f5bd7d42613e951e6",
        "patch": "@@ -9,7 +9,6 @@\n \n #include <chainparamsbase.h>\n #include <clientversion.h>\n-#include <optional>\n #include <rpc/client.h>\n #include <rpc/mining.h>\n #include <rpc/protocol.h>\n@@ -24,6 +23,7 @@\n #include <cmath>\n #include <functional>\n #include <memory>\n+#include <optional>\n #include <stdio.h>\n #include <string>\n #include <tuple>"
      },
      {
        "sha": "1b4ca3e9a83bdc2ef44181d967f4bb593541bf7f",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ebc4ab721b0371c0ef217c0f5bd7d42613e951e6/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ebc4ab721b0371c0ef217c0f5bd7d42613e951e6/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=ebc4ab721b0371c0ef217c0f5bd7d42613e951e6",
        "patch": "@@ -25,6 +25,7 @@\n #include <util/url.h>\n \n #include <functional>\n+#include <optional>\n \n const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n UrlDecodeFn* const URL_DECODE = urlDecode;"
      },
      {
        "sha": "3395741b1beb32b809fb747b11d383dbbcb7068b",
        "filename": "src/interfaces/chain.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ebc4ab721b0371c0ef217c0f5bd7d42613e951e6/src/interfaces/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ebc4ab721b0371c0ef217c0f5bd7d42613e951e6/src/interfaces/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.h?ref=ebc4ab721b0371c0ef217c0f5bd7d42613e951e6",
        "patch": "@@ -5,12 +5,12 @@\n #ifndef BITCOIN_INTERFACES_CHAIN_H\n #define BITCOIN_INTERFACES_CHAIN_H\n \n-#include <optional>               // For Optional and nullopt\n #include <primitives/transaction.h> // For CTransactionRef\n #include <util/settings.h>          // For util::SettingsValue\n \n #include <functional>\n #include <memory>\n+#include <optional>\n #include <stddef.h>\n #include <stdint.h>\n #include <string>"
      },
      {
        "sha": "fe7a54c05237eb084275fd1a0c4c4817090401d5",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ebc4ab721b0371c0ef217c0f5bd7d42613e951e6/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ebc4ab721b0371c0ef217c0f5bd7d42613e951e6/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=ebc4ab721b0371c0ef217c0f5bd7d42613e951e6",
        "patch": "@@ -96,9 +96,6 @@ void BlockAssembler::resetBlock()\n     nFees = 0;\n }\n \n-std::optional<int64_t> BlockAssembler::m_last_block_num_txs{std::nullopt};\n-std::optional<int64_t> BlockAssembler::m_last_block_weight{std::nullopt};\n-\n std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(CChainState& chainstate, const CScript& scriptPubKeyIn)\n {\n     int64_t nTimeStart = GetTimeMicros();"
      },
      {
        "sha": "023635814cf13f922c302c4971ff3c88e3d38ae3",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ebc4ab721b0371c0ef217c0f5bd7d42613e951e6/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ebc4ab721b0371c0ef217c0f5bd7d42613e951e6/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=ebc4ab721b0371c0ef217c0f5bd7d42613e951e6",
        "patch": "@@ -6,12 +6,12 @@\n #ifndef BITCOIN_MINER_H\n #define BITCOIN_MINER_H\n \n-#include <optional>\n #include <primitives/block.h>\n #include <txmempool.h>\n #include <validation.h>\n \n #include <memory>\n+#include <optional>\n #include <stdint.h>\n \n #include <boost/multi_index_container.hpp>\n@@ -160,8 +160,8 @@ class BlockAssembler\n     /** Construct a new block template with coinbase to scriptPubKeyIn */\n     std::unique_ptr<CBlockTemplate> CreateNewBlock(CChainState& chainstate, const CScript& scriptPubKeyIn);\n \n-    static std::optional<int64_t> m_last_block_num_txs;\n-    static std::optional<int64_t> m_last_block_weight;\n+    inline static std::optional<int64_t> m_last_block_num_txs{};\n+    inline static std::optional<int64_t> m_last_block_weight{};\n \n private:\n     // utility functions"
      },
      {
        "sha": "6a2469f9506313b60629cd07f3be27a630c90c03",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ebc4ab721b0371c0ef217c0f5bd7d42613e951e6/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ebc4ab721b0371c0ef217c0f5bd7d42613e951e6/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=ebc4ab721b0371c0ef217c0f5bd7d42613e951e6",
        "patch": "@@ -18,7 +18,6 @@\n #include <net_permissions.h>\n #include <netbase.h>\n #include <node/ui_interface.h>\n-#include <optional>\n #include <protocol.h>\n #include <random.h>\n #include <scheduler.h>\n@@ -39,6 +38,7 @@\n #include <algorithm>\n #include <cstdint>\n #include <functional>\n+#include <optional>\n #include <unordered_map>\n \n #include <math.h>\n@@ -752,7 +752,7 @@ std::optional<CNetMessage> V1TransportDeserializer::GetMessage(const std::chrono\n         LogPrint(BCLog::NET, \"HEADER ERROR - COMMAND (%s, %u bytes), peer=%d\\n\",\n                  hdr.GetCommand(), msg->m_message_size, m_node_id);\n         out_err_raw_size = msg->m_raw_message_size;\n-        msg = std::nullopt;\n+        msg.reset();\n     }\n \n     // Always reset the network deserializer (prepare for the next message)"
      },
      {
        "sha": "48d37084a06be2934a1b1fd7484529c4580029fd",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ebc4ab721b0371c0ef217c0f5bd7d42613e951e6/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ebc4ab721b0371c0ef217c0f5bd7d42613e951e6/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=ebc4ab721b0371c0ef217c0f5bd7d42613e951e6",
        "patch": "@@ -18,7 +18,6 @@\n #include <net_permissions.h>\n #include <netaddress.h>\n #include <netbase.h>\n-#include <optional>\n #include <policy/feerate.h>\n #include <protocol.h>\n #include <random.h>\n@@ -35,6 +34,7 @@\n #include <deque>\n #include <map>\n #include <memory>\n+#include <optional>\n #include <thread>\n #include <vector>\n "
      },
      {
        "sha": "b600cc3a1a748fa49afd85edd35b2f9d8f5a61df",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ebc4ab721b0371c0ef217c0f5bd7d42613e951e6/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ebc4ab721b0371c0ef217c0f5bd7d42613e951e6/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=ebc4ab721b0371c0ef217c0f5bd7d42613e951e6",
        "patch": "@@ -34,6 +34,7 @@\n #include <validation.h>\n \n #include <memory>\n+#include <optional>\n #include <typeinfo>\n \n /** How long to cache transactions in mapRelay for normal relay */"
      },
      {
        "sha": "50c8c291758dd8e42c3c58d14c0b847b0160cc59",
        "filename": "src/node/interfaces.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ebc4ab721b0371c0ef217c0f5bd7d42613e951e6/src/node/interfaces.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ebc4ab721b0371c0ef217c0f5bd7d42613e951e6/src/node/interfaces.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/interfaces.cpp?ref=ebc4ab721b0371c0ef217c0f5bd7d42613e951e6",
        "patch": "@@ -50,6 +50,7 @@\n #endif\n \n #include <memory>\n+#include <optional>\n #include <utility>\n \n using interfaces::BlockTip;"
      },
      {
        "sha": "def4385c09ce819db950729514fff388b0d6933d",
        "filename": "src/node/psbt.h",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ebc4ab721b0371c0ef217c0f5bd7d42613e951e6/src/node/psbt.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ebc4ab721b0371c0ef217c0f5bd7d42613e951e6/src/node/psbt.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/psbt.h?ref=ebc4ab721b0371c0ef217c0f5bd7d42613e951e6",
        "patch": "@@ -7,6 +7,8 @@\n \n #include <psbt.h>\n \n+#include <optional>\n+\n /**\n  * Holds an analysis of one input from a PSBT\n  */\n@@ -28,9 +30,9 @@ struct PSBTAnalysis {\n     std::optional<size_t> estimated_vsize;      //!< Estimated weight of the transaction\n     std::optional<CFeeRate> estimated_feerate;  //!< Estimated feerate (fee / weight) of the transaction\n     std::optional<CAmount> fee;                 //!< Amount of fee being paid by the transaction\n-    std::vector<PSBTInputAnalysis> inputs; //!< More information about the individual inputs of the transaction\n-    PSBTRole next;                         //!< Which of the BIP 174 roles needs to handle the transaction next\n-    std::string error;                     //!< Error message\n+    std::vector<PSBTInputAnalysis> inputs;      //!< More information about the individual inputs of the transaction\n+    PSBTRole next;                              //!< Which of the BIP 174 roles needs to handle the transaction next\n+    std::string error;                          //!< Error message\n \n     void SetInvalid(std::string err_msg)\n     {"
      },
      {
        "sha": "96ae39fdb81fa5a28cdb7cc1600b2ba437e60123",
        "filename": "src/psbt.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ebc4ab721b0371c0ef217c0f5bd7d42613e951e6/src/psbt.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ebc4ab721b0371c0ef217c0f5bd7d42613e951e6/src/psbt.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.h?ref=ebc4ab721b0371c0ef217c0f5bd7d42613e951e6",
        "patch": "@@ -7,13 +7,14 @@\n \n #include <attributes.h>\n #include <node/transaction.h>\n-#include <optional>\n #include <policy/feerate.h>\n #include <primitives/transaction.h>\n #include <pubkey.h>\n #include <script/sign.h>\n #include <script/signingprovider.h>\n \n+#include <optional>\n+\n // Magic bytes\n static constexpr uint8_t PSBT_MAGIC_BYTES[5] = {'p', 's', 'b', 't', 0xff};\n "
      },
      {
        "sha": "30399dca5125627d124bc467d04110166242a7b4",
        "filename": "src/script/descriptor.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ebc4ab721b0371c0ef217c0f5bd7d42613e951e6/src/script/descriptor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ebc4ab721b0371c0ef217c0f5bd7d42613e951e6/src/script/descriptor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.cpp?ref=ebc4ab721b0371c0ef217c0f5bd7d42613e951e6",
        "patch": "@@ -17,6 +17,7 @@\n #include <util/vector.h>\n \n #include <memory>\n+#include <optional>\n #include <string>\n #include <vector>\n "
      },
      {
        "sha": "332ae2f230382f00a7d741f0336d0c26e4b2447f",
        "filename": "src/script/descriptor.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ebc4ab721b0371c0ef217c0f5bd7d42613e951e6/src/script/descriptor.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ebc4ab721b0371c0ef217c0f5bd7d42613e951e6/src/script/descriptor.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.h?ref=ebc4ab721b0371c0ef217c0f5bd7d42613e951e6",
        "patch": "@@ -5,12 +5,12 @@\n #ifndef BITCOIN_SCRIPT_DESCRIPTOR_H\n #define BITCOIN_SCRIPT_DESCRIPTOR_H\n \n-#include <optional>\n #include <outputtype.h>\n #include <script/script.h>\n #include <script/sign.h>\n #include <script/signingprovider.h>\n \n+#include <optional>\n #include <vector>\n \n using ExtPubKeyMap = std::unordered_map<uint32_t, CExtPubKey>;"
      },
      {
        "sha": "aecf955fee7f2272c92d2f2f1532d42811331a32",
        "filename": "src/test/descriptor_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ebc4ab721b0371c0ef217c0f5bd7d42613e951e6/src/test/descriptor_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ebc4ab721b0371c0ef217c0f5bd7d42613e951e6/src/test/descriptor_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/descriptor_tests.cpp?ref=ebc4ab721b0371c0ef217c0f5bd7d42613e951e6",
        "patch": "@@ -10,6 +10,7 @@\n \n #include <boost/test/unit_test.hpp>\n \n+#include <optional>\n #include <string>\n #include <vector>\n "
      },
      {
        "sha": "1290c78712b4405d92f98778226324f8394df54c",
        "filename": "src/test/fuzz/deserialize.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ebc4ab721b0371c0ef217c0f5bd7d42613e951e6/src/test/fuzz/deserialize.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ebc4ab721b0371c0ef217c0f5bd7d42613e951e6/src/test/fuzz/deserialize.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/deserialize.cpp?ref=ebc4ab721b0371c0ef217c0f5bd7d42613e951e6",
        "patch": "@@ -15,7 +15,6 @@\n #include <net.h>\n #include <netbase.h>\n #include <node/utxo_snapshot.h>\n-#include <optional>\n #include <primitives/block.h>\n #include <protocol.h>\n #include <psbt.h>\n@@ -26,6 +25,7 @@\n #include <version.h>\n \n #include <exception>\n+#include <optional>\n #include <stdexcept>\n #include <stdint.h>\n #include <unistd.h>"
      },
      {
        "sha": "272f6415a9a386834b4dcd5048efc01242fe48d7",
        "filename": "src/test/fuzz/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ebc4ab721b0371c0ef217c0f5bd7d42613e951e6/src/test/fuzz/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ebc4ab721b0371c0ef217c0f5bd7d42613e951e6/src/test/fuzz/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/net.cpp?ref=ebc4ab721b0371c0ef217c0f5bd7d42613e951e6",
        "patch": "@@ -7,7 +7,6 @@\n #include <net.h>\n #include <net_permissions.h>\n #include <netaddress.h>\n-#include <optional>\n #include <protocol.h>\n #include <random.h>\n #include <test/fuzz/FuzzedDataProvider.h>\n@@ -17,6 +16,7 @@\n #include <test/util/setup_common.h>\n \n #include <cstdint>\n+#include <optional>\n #include <string>\n #include <vector>\n "
      },
      {
        "sha": "3a1fdaad8fec96be7dc51781c99922c108af7b6e",
        "filename": "src/test/fuzz/p2p_transport_deserializer.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ebc4ab721b0371c0ef217c0f5bd7d42613e951e6/src/test/fuzz/p2p_transport_deserializer.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ebc4ab721b0371c0ef217c0f5bd7d42613e951e6/src/test/fuzz/p2p_transport_deserializer.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/p2p_transport_deserializer.cpp?ref=ebc4ab721b0371c0ef217c0f5bd7d42613e951e6",
        "patch": "@@ -10,6 +10,7 @@\n #include <cassert>\n #include <cstdint>\n #include <limits>\n+#include <optional>\n #include <vector>\n \n void initialize_p2p_transport_deserializer()"
      },
      {
        "sha": "d1cc6f9c7ebc7e262c39b8025976e830c12acd6e",
        "filename": "src/test/fuzz/psbt.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ebc4ab721b0371c0ef217c0f5bd7d42613e951e6/src/test/fuzz/psbt.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ebc4ab721b0371c0ef217c0f5bd7d42613e951e6/src/test/fuzz/psbt.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/psbt.cpp?ref=ebc4ab721b0371c0ef217c0f5bd7d42613e951e6",
        "patch": "@@ -5,14 +5,14 @@\n #include <test/fuzz/fuzz.h>\n \n #include <node/psbt.h>\n-#include <optional>\n #include <psbt.h>\n #include <pubkey.h>\n #include <script/script.h>\n #include <streams.h>\n #include <version.h>\n \n #include <cstdint>\n+#include <optional>\n #include <string>\n #include <vector>\n "
      },
      {
        "sha": "6ce13d56792afc25d2b890c4052481beee6b1bd3",
        "filename": "src/test/fuzz/script_descriptor_cache.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ebc4ab721b0371c0ef217c0f5bd7d42613e951e6/src/test/fuzz/script_descriptor_cache.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ebc4ab721b0371c0ef217c0f5bd7d42613e951e6/src/test/fuzz/script_descriptor_cache.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/script_descriptor_cache.cpp?ref=ebc4ab721b0371c0ef217c0f5bd7d42613e951e6",
        "patch": "@@ -2,14 +2,14 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <optional>\n #include <pubkey.h>\n #include <script/descriptor.h>\n #include <test/fuzz/FuzzedDataProvider.h>\n #include <test/fuzz/fuzz.h>\n #include <test/fuzz/util.h>\n \n #include <cstdint>\n+#include <optional>\n #include <string>\n #include <vector>\n "
      },
      {
        "sha": "3172f119bd4f6a11936fe5f9f14f9580bbb23ce6",
        "filename": "src/test/net_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ebc4ab721b0371c0ef217c0f5bd7d42613e951e6/src/test/net_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ebc4ab721b0371c0ef217c0f5bd7d42613e951e6/src/test/net_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/net_tests.cpp?ref=ebc4ab721b0371c0ef217c0f5bd7d42613e951e6",
        "patch": "@@ -9,7 +9,6 @@\n #include <cstdint>\n #include <net.h>\n #include <netbase.h>\n-#include <optional>\n #include <serialize.h>\n #include <span.h>\n #include <streams.h>\n@@ -24,6 +23,7 @@\n #include <algorithm>\n #include <ios>\n #include <memory>\n+#include <optional>\n #include <string>\n \n using namespace std::literals;"
      },
      {
        "sha": "55f1069d0c3eacfbf0f51b3ef4c3461f299afb04",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ebc4ab721b0371c0ef217c0f5bd7d42613e951e6/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ebc4ab721b0371c0ef217c0f5bd7d42613e951e6/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=ebc4ab721b0371c0ef217c0f5bd7d42613e951e6",
        "patch": "@@ -7,7 +7,6 @@\n #include <clientversion.h>\n #include <hash.h> // For Hash()\n #include <key.h>  // For CKey\n-#include <optional>\n #include <sync.h>\n #include <test/util/logging.h>\n #include <test/util/setup_common.h>\n@@ -23,6 +22,7 @@\n #include <util/vector.h>\n \n #include <array>\n+#include <optional>\n #include <stdint.h>\n #include <string.h>\n #include <thread>"
      },
      {
        "sha": "faccd1ade0bbf5957f9bbc809ff7a6119b9feb7a",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ebc4ab721b0371c0ef217c0f5bd7d42613e951e6/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ebc4ab721b0371c0ef217c0f5bd7d42613e951e6/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=ebc4ab721b0371c0ef217c0f5bd7d42613e951e6",
        "patch": "@@ -8,7 +8,6 @@\n #include <consensus/consensus.h>\n #include <consensus/tx_verify.h>\n #include <consensus/validation.h>\n-#include <optional>\n #include <policy/fees.h>\n #include <policy/policy.h>\n #include <policy/settings.h>\n@@ -19,6 +18,8 @@\n #include <validation.h>\n #include <validationinterface.h>\n \n+#include <optional>\n+\n CTxMemPoolEntry::CTxMemPoolEntry(const CTransactionRef& _tx, const CAmount& _nFee,\n                                  int64_t _nTime, unsigned int _entryHeight,\n                                  bool _spendsCoinbase, int64_t _sigOpsCost, LockPoints lp)\n@@ -894,7 +895,7 @@ std::optional<CTxMemPool::txiter> CTxMemPool::GetIter(const uint256& txid) const\n {\n     auto it = mapTx.find(txid);\n     if (it != mapTx.end()) return it;\n-    return std::optional<txiter>{};\n+    return {};\n }\n \n CTxMemPool::setEntries CTxMemPool::GetIterSet(const std::set<uint256>& hashes) const"
      },
      {
        "sha": "9d4ea760e7e24fd87e1a1d06b7f2d0a3f2e525df",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ebc4ab721b0371c0ef217c0f5bd7d42613e951e6/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ebc4ab721b0371c0ef217c0f5bd7d42613e951e6/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=ebc4ab721b0371c0ef217c0f5bd7d42613e951e6",
        "patch": "@@ -8,6 +8,7 @@\n \n #include <atomic>\n #include <map>\n+#include <optional>\n #include <set>\n #include <string>\n #include <utility>\n@@ -16,7 +17,6 @@\n #include <amount.h>\n #include <coins.h>\n #include <indirectmap.h>\n-#include <optional>\n #include <policy/feerate.h>\n #include <primitives/transaction.h>\n #include <random.h>"
      },
      {
        "sha": "291f3f5541374bc210082ac05beda6736efd0f2c",
        "filename": "src/util/system.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ebc4ab721b0371c0ef217c0f5bd7d42613e951e6/src/util/system.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ebc4ab721b0371c0ef217c0f5bd7d42613e951e6/src/util/system.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.h?ref=ebc4ab721b0371c0ef217c0f5bd7d42613e951e6",
        "patch": "@@ -19,7 +19,6 @@\n #include <compat/assumptions.h>\n #include <fs.h>\n #include <logging.h>\n-#include <optional>\n #include <sync.h>\n #include <tinyformat.h>\n #include <util/settings.h>\n@@ -28,6 +27,7 @@\n \n #include <exception>\n #include <map>\n+#include <optional>\n #include <set>\n #include <stdint.h>\n #include <string>"
      },
      {
        "sha": "4c091cd2e69e82ab58952538cca510a409dcf32b",
        "filename": "src/util/tokenpipe.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ebc4ab721b0371c0ef217c0f5bd7d42613e951e6/src/util/tokenpipe.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ebc4ab721b0371c0ef217c0f5bd7d42613e951e6/src/util/tokenpipe.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/tokenpipe.cpp?ref=ebc4ab721b0371c0ef217c0f5bd7d42613e951e6",
        "patch": "@@ -9,6 +9,7 @@\n \n #include <errno.h>\n #include <fcntl.h>\n+#include <optional>\n #include <unistd.h>\n \n TokenPipeEnd TokenPipe::TakeReadEnd()"
      },
      {
        "sha": "b50edeb6fa5e3a965a2270eb744ac3ecfb98b1d2",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ebc4ab721b0371c0ef217c0f5bd7d42613e951e6/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ebc4ab721b0371c0ef217c0f5bd7d42613e951e6/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=ebc4ab721b0371c0ef217c0f5bd7d42613e951e6",
        "patch": "@@ -23,7 +23,6 @@\n #include <logging/timer.h>\n #include <node/coinstats.h>\n #include <node/ui_interface.h>\n-#include <optional>\n #include <policy/policy.h>\n #include <policy/settings.h>\n #include <pow.h>\n@@ -50,6 +49,7 @@\n #include <validationinterface.h>\n #include <warnings.h>\n \n+#include <optional>\n #include <string>\n \n #include <boost/algorithm/string/replace.hpp>"
      },
      {
        "sha": "1d3be63a568b87fd5cc09f3f482437c32cfee8cf",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ebc4ab721b0371c0ef217c0f5bd7d42613e951e6/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ebc4ab721b0371c0ef217c0f5bd7d42613e951e6/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=ebc4ab721b0371c0ef217c0f5bd7d42613e951e6",
        "patch": "@@ -17,7 +17,6 @@\n #include <crypto/common.h> // for ReadLE64\n #include <fs.h>\n #include <node/utxo_snapshot.h>\n-#include <optional>\n #include <policy/feerate.h>\n #include <protocol.h> // For CMessageHeader::MessageStartChars\n #include <script/script_error.h>\n@@ -32,6 +31,7 @@\n #include <atomic>\n #include <map>\n #include <memory>\n+#include <optional>\n #include <set>\n #include <stdint.h>\n #include <string>\n@@ -205,8 +205,7 @@ struct MempoolAcceptResult {\n \n     /** Constructor for failure case */\n     explicit MempoolAcceptResult(TxValidationState state)\n-        : m_result_type(ResultType::INVALID),\n-        m_state(state), m_replaced_transactions(std::nullopt), m_base_fees(std::nullopt) {\n+        : m_result_type(ResultType::INVALID), m_state(state) {\n             Assume(!state.IsValid()); // Can be invalid or error\n         }\n "
      },
      {
        "sha": "d25a3fb3fa1fe5bf57a6628c905be629a377de5f",
        "filename": "src/wallet/coincontrol.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ebc4ab721b0371c0ef217c0f5bd7d42613e951e6/src/wallet/coincontrol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ebc4ab721b0371c0ef217c0f5bd7d42613e951e6/src/wallet/coincontrol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coincontrol.h?ref=ebc4ab721b0371c0ef217c0f5bd7d42613e951e6",
        "patch": "@@ -5,13 +5,14 @@\n #ifndef BITCOIN_WALLET_COINCONTROL_H\n #define BITCOIN_WALLET_COINCONTROL_H\n \n-#include <optional>\n #include <outputtype.h>\n #include <policy/feerate.h>\n #include <policy/fees.h>\n #include <primitives/transaction.h>\n #include <script/standard.h>\n \n+#include <optional>\n+\n const int DEFAULT_MIN_DEPTH = 0;\n const int DEFAULT_MAX_DEPTH = 9999999;\n "
      },
      {
        "sha": "5a18308a733c99265c51ebbf94f28e12900350bb",
        "filename": "src/wallet/coinselection.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ebc4ab721b0371c0ef217c0f5bd7d42613e951e6/src/wallet/coinselection.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ebc4ab721b0371c0ef217c0f5bd7d42613e951e6/src/wallet/coinselection.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coinselection.cpp?ref=ebc4ab721b0371c0ef217c0f5bd7d42613e951e6",
        "patch": "@@ -4,11 +4,12 @@\n \n #include <wallet/coinselection.h>\n \n-#include <optional>\n #include <policy/feerate.h>\n #include <util/system.h>\n #include <util/moneystr.h>\n \n+#include <optional>\n+\n // Descending order comparator\n struct {\n     bool operator()(const OutputGroup& a, const OutputGroup& b) const"
      },
      {
        "sha": "7a0d3d2e07ad116b86ececbdde6bb9f87ce388f3",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ebc4ab721b0371c0ef217c0f5bd7d42613e951e6/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ebc4ab721b0371c0ef217c0f5bd7d42613e951e6/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=ebc4ab721b0371c0ef217c0f5bd7d42613e951e6",
        "patch": "@@ -8,12 +8,12 @@\n \n #include <clientversion.h>\n #include <fs.h>\n-#include <optional>\n #include <streams.h>\n #include <support/allocators/secure.h>\n \n #include <atomic>\n #include <memory>\n+#include <optional>\n #include <string>\n \n struct bilingual_str;"
      },
      {
        "sha": "0737e68cf3a633fb4b294f7c9276b0853e285833",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ebc4ab721b0371c0ef217c0f5bd7d42613e951e6/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ebc4ab721b0371c0ef217c0f5bd7d42613e951e6/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=ebc4ab721b0371c0ef217c0f5bd7d42613e951e6",
        "patch": "@@ -1788,7 +1788,7 @@ RPCHelpMan listdescriptors()\n         const bool active = active_spk_mans.count(desc_spk_man) != 0;\n         spk.pushKV(\"active\", active);\n         const auto& type = wallet_descriptor.descriptor->GetOutputType();\n-        if (active && type != std::nullopt) {\n+        if (active && type) {\n             spk.pushKV(\"internal\", wallet->GetScriptPubKeyMan(*type, true) == desc_spk_man);\n         }\n         if (wallet_descriptor.descriptor->IsRange()) {"
      },
      {
        "sha": "f6bae473652fbeed8a3f664e2856c45b66558f1d",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ebc4ab721b0371c0ef217c0f5bd7d42613e951e6/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ebc4ab721b0371c0ef217c0f5bd7d42613e951e6/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=ebc4ab721b0371c0ef217c0f5bd7d42613e951e6",
        "patch": "@@ -8,7 +8,6 @@\n #include <interfaces/chain.h>\n #include <key_io.h>\n #include <node/context.h>\n-#include <optional>\n #include <outputtype.h>\n #include <policy/feerate.h>\n #include <policy/fees.h>\n@@ -38,6 +37,7 @@\n #include <wallet/walletdb.h>\n #include <wallet/walletutil.h>\n \n+#include <optional>\n #include <stdint.h>\n \n #include <univalue.h>\n@@ -219,7 +219,7 @@ static void SetFeeEstimateMode(const CWallet& wallet, CCoinControl& cc, const Un\n         cc.m_feerate = CFeeRate(AmountFromValue(fee_rate), COIN);\n         if (override_min_fee) cc.fOverrideFeeRate = true;\n         // Default RBF to true for explicit fee_rate, if unset.\n-        if (cc.m_signal_bip125_rbf == std::nullopt) cc.m_signal_bip125_rbf = true;\n+        if (!cc.m_signal_bip125_rbf) cc.m_signal_bip125_rbf = true;\n         return;\n     }\n     if (!estimate_mode.isNull() && !FeeModeFromString(estimate_mode.get_str(), cc.m_fee_mode)) {"
      },
      {
        "sha": "54319ca662225be7fa4c4bbe8ccd13b12773b6cc",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ebc4ab721b0371c0ef217c0f5bd7d42613e951e6/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ebc4ab721b0371c0ef217c0f5bd7d42613e951e6/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=ebc4ab721b0371c0ef217c0f5bd7d42613e951e6",
        "patch": "@@ -16,6 +16,8 @@\n #include <wallet/external_signer.h>\n #include <wallet/scriptpubkeyman.h>\n \n+#include <optional>\n+\n //! Value for the first BIP 32 hardened derivation. Can be used as a bit mask and as a value. See BIP 32 for more details.\n const uint32_t BIP32_HARDENED_KEY_LIMIT = 0x80000000;\n "
      },
      {
        "sha": "2b36da2e0eac3ddad5d37ff92311766b9723559b",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ebc4ab721b0371c0ef217c0f5bd7d42613e951e6/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ebc4ab721b0371c0ef217c0f5bd7d42613e951e6/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=ebc4ab721b0371c0ef217c0f5bd7d42613e951e6",
        "patch": "@@ -13,7 +13,6 @@\n #include <interfaces/wallet.h>\n #include <key.h>\n #include <key_io.h>\n-#include <optional>\n #include <outputtype.h>\n #include <policy/fees.h>\n #include <policy/policy.h>\n@@ -40,6 +39,7 @@\n \n #include <algorithm>\n #include <assert.h>\n+#include <optional>\n \n #include <boost/algorithm/string/replace.hpp>\n \n@@ -87,7 +87,7 @@ static void UpdateWalletSetting(interfaces::Chain& chain,\n                                 std::optional<bool> load_on_startup,\n                                 std::vector<bilingual_str>& warnings)\n {\n-    if (load_on_startup == std::nullopt) return;\n+    if (!load_on_startup) return;\n     if (load_on_startup.value() && !AddWalletSetting(chain, wallet_name)) {\n         warnings.emplace_back(Untranslated(\"Wallet load on startup setting could not be updated, so wallet may not be loaded next node startup.\"));\n     } else if (!load_on_startup.value() && !RemoveWalletSetting(chain, wallet_name)) {"
      },
      {
        "sha": "13a856afb08522dc793dcc0e86dcd89069a59fc1",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ebc4ab721b0371c0ef217c0f5bd7d42613e951e6/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ebc4ab721b0371c0ef217c0f5bd7d42613e951e6/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=ebc4ab721b0371c0ef217c0f5bd7d42613e951e6",
        "patch": "@@ -30,6 +30,7 @@\n #include <atomic>\n #include <map>\n #include <memory>\n+#include <optional>\n #include <set>\n #include <stdexcept>\n #include <stdint.h>"
      },
      {
        "sha": "3d9248009fdb63e0156f1fa9f1ea08934c8f5543",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ebc4ab721b0371c0ef217c0f5bd7d42613e951e6/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ebc4ab721b0371c0ef217c0f5bd7d42613e951e6/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=ebc4ab721b0371c0ef217c0f5bd7d42613e951e6",
        "patch": "@@ -23,6 +23,7 @@\n #include <wallet/wallet.h>\n \n #include <atomic>\n+#include <optional>\n #include <string>\n \n namespace DBKeys {"
      }
    ]
  }
]