sipa,2021-05-05 02:04:18,@sipsorcery Could you help with adding MSVC build config here?,https://github.com/bitcoin/bitcoin/pull/21859#issuecomment-832366353,832366353,
sipsorcery,2021-05-05 07:23:51,@sipa will do.,https://github.com/bitcoin/bitcoin/pull/21859#issuecomment-832472531,832472531,
MarcoFalke,2021-05-05 07:28:12,"From ci:\n\n```\n\nSUMMARY: MemorySanitizer: use-of-uninitialized-value /tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/minisketch/src/fields/clmul_common_impl.h:23:23 in unsigned int (anonymous namespace)::MulWithClMulReduce<unsigned int, 32, 141u>(unsigned int, unsigned int)\n  ORIGIN: invalid (0). Might be a bug in MemorySanitizer origin tracking.\n    This could sti",https://github.com/bitcoin/bitcoin/pull/21859#issuecomment-832474947,832474947,
sipa,2021-05-05 07:31:37,@MarcoFalke I believe it is simply msan not being able to reason through the intrinsics (see src/minisketch/src/field/clmul_common_impl.h).,https://github.com/bitcoin/bitcoin/pull/21859#issuecomment-832476787,832476787,
sipsorcery,2021-05-05 14:31:30,"Attached diff adds a `minisketch` project to the msvc build config. I did make a few small code changes to `minisketch.h` and `minisketch.cpp` to remove a warning and change the location for a header.\n\n[minisketch.diff.gz](https://github.com/bitcoin/bitcoin/files/6427858/minisketch.diff.gz)\n",https://github.com/bitcoin/bitcoin/pull/21859#issuecomment-832736638,832736638,
jnewbery,2021-05-06 09:56:20,"Do minisketch's own tests get run when running `make check` from bitcoin's base directory? I think it'd be good to modify `make check` to only run the base bitcoin tests, and then have another build target (`make check_all`?) that also runs the subtree unit tests. Those subtrees only get updated every few months. I expect many developers run `make check` many times a day and it seems wasteful to r",https://github.com/bitcoin/bitcoin/pull/21859#issuecomment-833397513,833397513,
MarcoFalke,2021-05-06 10:12:07,"CI would need to run them, though. As this is the only place where sanitizers are run regularly.",https://github.com/bitcoin/bitcoin/pull/21859#issuecomment-833407347,833407347,
DrahtBot,2021-05-07 09:10:15,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#22646](https://github.com/bitcoin/bitcoin/pull/22646) ([POC] Tighter Univalue integration, remove `--with-system-univalu",https://github.com/bitcoin/bitcoin/pull/21859#issuecomment-834196929,834196929,
MarcoFalke,2021-05-07 09:18:59,"Failure on arm: `./build-aux/test-driver: line 107: ./test-verify: cannot execute binary file: Exec format error`\n\nYou might have to modify the `./ci/test/wrap-qemu.sh` script.",https://github.com/bitcoin/bitcoin/pull/21859#issuecomment-834202423,834202423,
sipa,2021-05-07 19:06:31,"@sipsorcery Thanks, I've incorporated some of your changes (see https://github.com/sipa/minisketch/pull/36), and MSVC build/test works now.\n\nAt least one issue remains: when running the minisketch tests, wine can't find libgcc and other dlls. In minisketch's own CI that's worked around by passing `CXXFLAGS=-static -static-libgcc -static-libstdc++`, but it's a bit ugly to pass that through to t",https://github.com/bitcoin/bitcoin/pull/21859#issuecomment-834703011,834703011,
practicalswift,2021-05-07 20:22:21,"Concept ACK\n\nVery nice work sipa, gmaxwell and naumenkogs!\n\nIs it mentioned somewhere in the documentation that `Minisketch::Add` is not an idempotent operation?\n\nIn other words that …\n\n```\nsketch.Add(i);\n```\n\n… does not have the same effect as …\n\n```\nsketch.Add(i);\nsketch.Add(i);\n```\n\nFWIW I couldn't find any such note in `src/minisketch/include/minisketch.h`",https://github.com/bitcoin/bitcoin/pull/21859#issuecomment-834750354,834750354,
sipa,2021-05-07 21:10:06,"@practicalswift It's explained in https://github.com/sipa/minisketch/#readme at least, and inherent to symmetric set reconciliation. I don't think the header file should try to explain set reconciliation in detail, but if you have specific suggestions to improve the header, feel free to PR them (in the minisketch repo).",https://github.com/bitcoin/bitcoin/pull/21859#issuecomment-834782141,834782141,
practicalswift,2021-05-07 21:57:00,"> @practicalswift It's explained in https://github.com/sipa/minisketch/#readme at least, and inherent to symmetric set reconciliation. I don't think the header file should try to explain set reconciliation in detail, but if you have specific suggestions to improve the header, feel free to PR them (in the minisketch repo).\n\nI think the following should be enough to help avoid unnecessary mistak",https://github.com/bitcoin/bitcoin/pull/21859#issuecomment-834807963,834807963,
practicalswift,2021-05-08 15:12:24,"Another interface design question:\n\nThe `Minisketch` constructor does not signal constructor failure by throwing.\n\nIs that intentional to allow for use in non-Bitcoin Core environments where using exceptions may not be an option?\n\nI'm a bit worried that the current design might introduce a gotcha/sharp edge which is probably best illustrated by the example below.\n\nTo be clear: I un",https://github.com/bitcoin/bitcoin/pull/21859#issuecomment-835397936,835397936,
sipa,2021-05-08 15:19:18,"@practicalswift You mean because the construction internally OOMs? If that happens you have bigger problems, I think, as you'd generally use this with capacities of 10s to maybe 1000s. Beyond that, O(n^2) decoding cost starts to make it unusable.",https://github.com/bitcoin/bitcoin/pull/21859#issuecomment-835399963,835399963,
practicalswift,2021-05-08 17:41:50,"> You mean because the construction internally OOMs? If that happens you have bigger problems, I think, as you'd generally use this with capacities of 10s to maybe 1000s. Beyond that, O(n^2) decoding cost starts to make it unusable.\n\n@sipa No, note that the user code in the example is very careful about not processing large inputs, so memory exhaustion or excessive run-time is not the problem ",https://github.com/bitcoin/bitcoin/pull/21859#issuecomment-835442997,835442997,
sipa,2021-05-08 17:47:11,"@practicalswift You can use `if (sketch)` to detect if a sketch is usable, which may be the case for several reasons (field not implemented, implementation number too high or incompatible with field, illegal capacity, OOM, ...).\n\nSee https://github.com/sipa/minisketch/pull/39 for some improvements to the documentation.",https://github.com/bitcoin/bitcoin/pull/21859#issuecomment-835445069,835445069,
practicalswift,2021-05-08 22:36:19,"@sipa \n\n> You can use `if (sketch)` to detect if a sketch is usable, which may be the case for several reasons (field not implemented, implementation number too high or incompatible with field, illegal capacity, OOM, ...).\n>\n> See [sipa/minisketch#39](https://github.com/sipa/minisketch/pull/39) for some improvements to the documentation.\n\nThanks for updating the documentation. Now the ",https://github.com/bitcoin/bitcoin/pull/21859#issuecomment-835550512,835550512,
sipa,2021-05-09 00:15:46,"@practicalswift Exceptions in my opinion are for exceptional situations - things that couldn't have been reasonably prevented by the programmer (things like I/O failure, for example), as they can be deep down in a function call stack, and dealing with them along the way there is both inconvenient and pointless. Except for OOM perhaps, none of the cases where Minisketch construction fails are like ",https://github.com/bitcoin/bitcoin/pull/21859#issuecomment-835587369,835587369,
practicalswift,2021-05-09 22:31:26,"@sipa\n\nAssuming that we really don't want to throw in the constructor:\n\nPerhaps an alternative could be to use the named constructor idiom and return `std::optional<Minisketch>`? (With `std::nullopt` being returned if a valid/usable `Minisketch` object could not constructed.)\n\nSomething along the lines of:\n\n```c++\nclass Minisketch {\nprivate:\n    Minisketch(uint32_t bits, uint",https://github.com/bitcoin/bitcoin/pull/21859#issuecomment-835912345,835912345,
sipa,2021-05-09 22:35:14,"> Perhaps an alternative could be to use the named constructor idiom and return std::optional<Minisketch>\n\nI think that's rather silly, because that's effectively what a Minisketch object already is. It is a simple wrapper around std::unique_ptr<internal type>, and behaves exactly like that (except that the internal object is not accessible).",https://github.com/bitcoin/bitcoin/pull/21859#issuecomment-835913660,835913660,
practicalswift,2021-05-09 22:49:02,"@sipa \n\nI think you're missing my point.\n\nPerhaps my point is better explained in code.\n\nExecuting …\n\n```\nMinisketch sketch{32, 0, /* likely to be attacker controlled */ 0};\nsketch.GetCapacity(); // or really any operation on the invalid Minisketch zombie object\n```\n\n… currently yields …\n\n```\n==30177==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000008 (",https://github.com/bitcoin/bitcoin/pull/21859#issuecomment-835918711,835918711,
sipa,2021-05-09 23:28:02,"@practicalswift I understand your point, but I don't think there is a big difference with what you're suggesting.\n\n```c++\nstd::optional<Minisketch> sketch = Minisketch::Create(32, 0, 0);\nsketch->GetCapacity();\n```\n\nis equally going to cause problems, if the API user isn't aware the create call can fail. And when those problems appear, it'll be obvious where the problem is.\n\nPerha",https://github.com/bitcoin/bitcoin/pull/21859#issuecomment-835937493,835937493,
jnewbery,2021-05-10 08:07:26,"@sipa I haven't read all the discussion in this PR so don't want to weigh in on the interface design, but:\n\n> I don't think there is a big difference with what you're suggesting.\n> \n> ```\n> std::optional<Minisketch> sketch = Minisketch::Create(32, 0, 0);\n> sketch->GetCapacity();\n> ```\n>\n> is equally going to cause problems, if the API user isn't aware the create call can fail.\n",https://github.com/bitcoin/bitcoin/pull/21859#issuecomment-836337858,836337858,
sipa,2021-05-10 21:13:13,"@jnewbery Sure, it's better at conveying to the API user that the call may fail. But I think that's the wrong information: it'll only fail when used incorrectly (*). It's not something the user should be checking for in the first place - what would be done at runtime with that information? The only thing that needs to happen is fixing the code. Putting an optional around it adds both unnecessary o",https://github.com/bitcoin/bitcoin/pull/21859#issuecomment-837351795,837351795,
practicalswift,2021-05-11 14:13:30,"@sipa \n\nThanks for addressing the `capacity=0` edge case. That resolves my concern.\n\nI'm not particularly worried about the other two constructor failure cases (`std::bad_alloc` and unavailable combination of `bits`/`implementation`) since the conditions triggering them are much less likely to be under attacker control.",https://github.com/bitcoin/bitcoin/pull/21859#issuecomment-838548466,838548466,
MarcoFalke,2021-05-12 14:59:18,"<details><summary>make check-symbols</summary>\n\n```\n+ make -C src --jobs=1 check-symbols V=1\nmake: Entering directory '/distsrc-base/distsrc-202a89b644f0-x86_64-linux-gnu/src'\nChecking glibc back compat...\nCPPFILT=/root/.guix-profile/bin/x86_64-linux-gnu-c++filt /root/.guix-profile/bin/python3.8 ../contrib/devtools/symbol-check.py bitcoind  bitcoin-cli bitcoin-tx bitcoin-wallet bitcoin",https://github.com/bitcoin/bitcoin/pull/21859#issuecomment-839842726,839842726,
sipa,2021-05-12 18:53:29,"@MarcoFalke Ok, please advise?",https://github.com/bitcoin/bitcoin/pull/21859#issuecomment-840020185,840020185,
MarcoFalke,2021-05-12 19:24:34,No idea what that failure is. The build people will have to take a look.,https://github.com/bitcoin/bitcoin/pull/21859#issuecomment-840038554,840038554,
MarcoFalke,2021-05-12 19:25:03,I am just saying that this can't be merged (yet) because it would break the guix build.,https://github.com/bitcoin/bitcoin/pull/21859#issuecomment-840038832,840038832,
sipa,2021-05-12 19:33:58,"Oh, I see. I thought it was a clarification on why it's complaining about missing libraries (but it may well be related).\n\n> The build people will have to take a look.\n\nThe great miners and craftsmen of the mountain halls?",https://github.com/bitcoin/bitcoin/pull/21859#issuecomment-840043666,840043666,
practicalswift,2021-05-13 07:05:18,"cr ACK b195ae3af078a9038c7d654a267eb14b9332ae70 modulo CI green: patch looks correct, minisketch is awesome and changes are limited to `Makefile.am`, `build_msvc/`, `ci/`, `configure.ac`, `src/Makefile.*`, `src/minisketch/`, `src/minisketchwrapper.cpp`, `src/minisketchwrapper.h`, `src/test/minisketch_tests.cpp` and `test/lint/`.",https://github.com/bitcoin/bitcoin/pull/21859#issuecomment-840363543,840363543,
sipa,2021-05-16 03:39:38,"@MarcoFalke Build issues resolved, I believe.",https://github.com/bitcoin/bitcoin/pull/21859#issuecomment-841760973,841760973,
practicalswift,2021-05-16 15:49:59,"cr re-ACK 35049cf2a16a63bd1adf511e8c0ac526be5e4e8a CI now green, patch looks correct, minisketch is still awesome and changes are limited to `Makefile.am`, `build_msvc/`, `ci/`, `configure.ac`, `src/Makefile.*`, `src/minisketch/`, `src/minisketchwrapper.cpp`, `src/minisketchwrapper.h`, `src/test/minisketch_tests.cpp` and `test/lint/`.",https://github.com/bitcoin/bitcoin/pull/21859#issuecomment-841835509,841835509,
sipa,2021-06-02 04:06:57,"It appears that linking in libminisketch causes `bitcoind` and other binaries to suddenly export(?) libstdc++ symbols. This is beyond my skills, I humbly request the services of the Build People.",https://github.com/bitcoin/bitcoin/pull/21859#issuecomment-852702915,852702915,
TheCharlatan,2021-06-03 18:34:08,"Edit: Disregard, seems to be an issue with all posted guix builds, so unrelated to minisketch.\n\nDidn't find anything about libstdc++ being included in the bitcoind binary, but on Ubuntu 18.04 running `ldd bitcoind` on the provided guix binaries errors on:\n\n```\n./bitcoind: /lib/x86_64-linux-gnu/libm.so.6: version `GLIBC_2.29' not found (required by ./bitcoind)\n./bitcoind: /lib/x86_64-li",https://github.com/bitcoin/bitcoin/pull/21859#issuecomment-854089288,854089288,
fanquake,2021-06-04 01:14:44,"> Edit: Disregard, seems to be an issue with all posted guix builds, so unrelated to minisketch.\n\nIndeed, this is #21454, which does need fixing, but is not introduced by this PR.",https://github.com/bitcoin/bitcoin/pull/21859#issuecomment-854285518,854285518,
sipa,2021-06-04 02:09:34,"Well, there is still something making the guix build fail, with this in `guix_build.log`, which isn't in master's build:\n\n```\nChecking glibc back compat...\nChecking glibc back compat...\nCPPFILT=/root/.guix-profile/bin/x86_64-linux-gnu-c++filt /root/.guix-profile/bin/python3.8 ../contrib/devtools/symbol-check.py bitcoind  bitcoin-cli bitcoin-tx bitcoin-wallet bitcoin-util test/test_bitcoi",https://github.com/bitcoin/bitcoin/pull/21859#issuecomment-854303336,854303336,
fanquake,2021-06-04 12:35:52,"> Well, there is still something making the guix build fail,\n\nGiven the symbols that are being exported, is this be some sort of C++ version/ABI incompatibility problem? Will have a closer look shortly.",https://github.com/bitcoin/bitcoin/pull/21859#issuecomment-854677006,854677006,
sipa,2021-07-02 23:52:06,"Rebased, and updated to include https://github.com/sipa/minisketch/pull/44.",https://github.com/bitcoin/bitcoin/pull/21859#issuecomment-873307477,873307477,
sipa,2021-07-06 04:27:23,"I still get these failures in guix that I can't explain. @dongcarl @fanquake \n\n```\nqt/bitcoin-qt: symbol operator delete[](void*, unsigned long) from unsupported version CXXABI_1.3.9\nqt/bitcoin-qt: symbol std::basic_istream<char, std::char_traits<char> >& std::getline<char, std::char_traits<char>, std::allocator<char> >(std::basic_istream<char, std::char_traits<char> >&, std::__cxx11::basi",https://github.com/bitcoin/bitcoin/pull/21859#issuecomment-874449826,874449826,
fanquake,2021-07-06 08:58:59,"> I still get these failures in guix that I can't explain. @dongcarl @fanquake\n\nThis will fix them:\n```diff\ndiff --git a/contrib/guix/libexec/build.sh b/contrib/guix/libexec/build.sh\nindex e457840d1..9092c8862 100755\n--- a/contrib/guix/libexec/build.sh\n+++ b/contrib/guix/libexec/build.sh\n@@ -287,7 +287,7 @@ mkdir -p ""$DISTSRC""\n                     ${HOST_CXXFLAGS:+CXXFLAGS=""${HOS",https://github.com/bitcoin/bitcoin/pull/21859#issuecomment-874587226,874587226,
sipa,2021-07-06 17:46:22,"@fanquake That fixed it, great!",https://github.com/bitcoin/bitcoin/pull/21859#issuecomment-874959564,874959564,
sipa,2021-07-06 17:46:55,"(don't merge this yet, as it includes the as-of-yet unmerged  sipa/minisketch#44)",https://github.com/bitcoin/bitcoin/pull/21859#issuecomment-874959938,874959938,
fanquake,2021-07-16 05:53:57,"After some discussion with @theuni, we are going to take a different approach to integrating the minisketch subtree, than what is currently proposed here. The new approach will be result in a somewhat cleaner integration, remove the need for running a sub-configure, as well as ensure we are building the minisketch library only using Bitcoin Cores build options, compiler flags etc. I expect there w",https://github.com/bitcoin/bitcoin/pull/21859#issuecomment-881196317,881196317,
theuni,2021-07-16 14:55:22,"That's a little more definitive than I would've put it, but yes, my preference would be tighter integration for the reasons @fanquake mentioned.\n\n@sipa [Here's ](https://github.com/bitcoin-core/univalue/pull/19)my original POC demonstrating what I had in mind, matching the approach I've suggested for univalue (https://github.com/bitcoin-core/univalue/pull/19). I've started working on a more co",https://github.com/bitcoin/bitcoin/pull/21859#issuecomment-881510333,881510333,
sipa,2021-07-17 19:20:47,@theuni @fanquake Sounds good to me.,https://github.com/bitcoin/bitcoin/pull/21859#issuecomment-881947740,881947740,
sipa,2021-07-17 19:36:05,@ariard I think your comments are more useful on https://github.com/sipa/minisketch.,https://github.com/bitcoin/bitcoin/pull/21859#issuecomment-881949489,881949489,
theuni,2021-07-20 16:29:15,@sipa Is building the non-verify version of the lib and tests sufficient for Core? Or is it useful/necessary to run the `-verify` version as well along with our tests?,https://github.com/bitcoin/bitcoin/pull/21859#issuecomment-883529658,883529658,
sipa,2021-07-20 19:15:26,"@theuni If it's an issue, I think non-verify is sufficient. The verify mode mostly adds algorithmic property checks, not things that I'd expect to be very architecture/build dependent.",https://github.com/bitcoin/bitcoin/pull/21859#issuecomment-883631922,883631922,
theuni,2021-07-20 20:22:49,"It's not much of an issue, it's just kinda hacky to build everything twice, especially if it's unlikely to be as useful as it is running in the upstream tests. I can add it back if there's a need.\n\nSee here for a current integration branch: https://github.com/theuni/bitcoin/commits/minisketch-split . Not sure if it's easier for you to integrate that into this PR or for me to pull your other ch",https://github.com/bitcoin/bitcoin/pull/21859#issuecomment-883670217,883670217,
fanquake,2021-08-12 07:28:57,"I've put together a branch for this. It's based off current master and includes all the latest changes from upstream minisketch, as well as integrating the changes here with @theuni's build changes. It's available here: https://github.com/fanquake/bitcoin/tree/minisketch_integration.\n\nNote that I've included some of the review suggestions, as well as squashed one commit (https://github.com/the",https://github.com/bitcoin/bitcoin/pull/21859#issuecomment-897412769,897412769,
fanquake,2021-09-16 04:55:11,"I've updated my branch (https://github.com/fanquake/bitcoin/tree/minisketch_integration) to be rebased on master, include the upstream minisktech changes, namely https://github.com/sipa/minisketch/pull/45 & https://github.com/sipa/minisketch/pull/47 and update our integration accordingly. Had a conflict in the MSVC config files, not 100% sure if how it's been resolved is correct.",https://github.com/bitcoin/bitcoin/pull/21859#issuecomment-920574629,920574629,
sipa,2021-09-17 15:46:10,"Reviewed @fanquake's branch, and switched to it.",https://github.com/bitcoin/bitcoin/pull/21859#issuecomment-921899200,921899200,
DrahtBot,2021-09-19 01:23:10,<!--9cd9c72976c961c55c7acef8f6ba82cd-->\n### Guix builds\n\n| File | commit e69cbac628bfdca4a8e4ead821190eaf5b6b3d07<br>(master) | commit d40c25adfc5a07488fdd4cd168af74ed520bac2f<br>(master and this pull) |\n|--|--|--|\n| SHA256SUMS.part | [`3a878af99efa151a...`](https://drahtbot.space/guix/bitcoin/bitcoin/e69cbac628bfdca4a8e4ead821190eaf5b6b3d07/SHA256SUMS.part) |  |\n| *-aarch64-linux-gnu-debug.,https://github.com/bitcoin/bitcoin/pull/21859#issuecomment-922398092,922398092,
fanquake,2021-09-22 01:05:33,"I've pushed some fixups to https://github.com/fanquake/bitcoin/tree/minisketch_integration (sorry @sipa). `make dist(dir)` and the Guix build have both been fixed. I also added a missing exclude for minisketch to the copyright header update script.\n\nGuix build:\n```bash\nbash-5.1# find guix-build-$(git rev-parse --short=12 HEAD)/output/ -type f -print0 | env LC_ALL=C sort -z | xargs -r0 sha2",https://github.com/bitcoin/bitcoin/pull/21859#issuecomment-924499138,924499138,
fanquake,2021-09-28 07:08:41,Closing in favour of #23114.,https://github.com/bitcoin/bitcoin/pull/21859#issuecomment-928916969,928916969,
sipsorcery,2021-05-05 12:04:35,`ba` isn't used. Can it be removed?,https://github.com/bitcoin/bitcoin/pull/21859#discussion_r626504683,626504683,src/minisketch/src/minisketch.cpp
sipsorcery,2021-05-05 12:05:23,ba isn't used. Can it be removed?,https://github.com/bitcoin/bitcoin/pull/21859#discussion_r626505082,626505082,src/minisketch/src/minisketch.cpp
sipa,2021-05-07 19:01:30,"Indeed, removed.",https://github.com/bitcoin/bitcoin/pull/21859#discussion_r628444294,628444294,src/minisketch/src/minisketch.cpp
sipa,2021-05-07 19:01:37,"Indeed, removed.",https://github.com/bitcoin/bitcoin/pull/21859#discussion_r628444409,628444409,src/minisketch/src/minisketch.cpp
jnewbery,2021-05-20 10:57:56,"Perhaps:\n\n```suggestion\n#include <logging.h>\n#include <util/time.h>\n\n#include <minisketch.h>\n```\n(since minisketch.h is a separate library import)",https://github.com/bitcoin/bitcoin/pull/21859#discussion_r635995151,635995151,src/minisketchwrapper.cpp
jnewbery,2021-05-20 10:58:46,I think the c++ headers are generally preferred (cstddef and cstdint),https://github.com/bitcoin/bitcoin/pull/21859#discussion_r635995669,635995669,src/minisketchwrapper.cpp
jnewbery,2021-05-20 10:59:13,"Perhaps:\n\n```suggestion\n        std::array<int64_t, 11> benches;\n```\n\nSince the capacity is known upfront?",https://github.com/bitcoin/bitcoin/pull/21859#discussion_r635995919,635995919,src/minisketchwrapper.cpp
jnewbery,2021-05-20 11:00:40,"Separate standard library imports:\n\n```suggestion\n#include <minisketch.h>\n\n#include <cstddef>\n#include <cstdint>\n```",https://github.com/bitcoin/bitcoin/pull/21859#discussion_r635996839,635996839,src/minisketchwrapper.h
jnewbery,2021-05-20 11:01:12,"```suggestion\n\n#include <boost/test/unit_test.hpp>\n\n#include <vector>\n```",https://github.com/bitcoin/bitcoin/pull/21859#discussion_r635997171,635997171,src/test/minisketch_tests.cpp
ariard,2021-07-15 00:06:57,"Reading from the fuzzy paper ""Codes and Syndromes"", should one interpret the capacity as the error-correcting distance `C` (here instantiated as binary BCH codes) ? \n\nFurther the documentation says the decoding is always successful when the number of elements in the set is not higher than the capacity, though in fact set size != sketch capacity, as afaiu 0 element are pruned out of the sketch,",https://github.com/bitcoin/bitcoin/pull/21859#discussion_r670032987,670032987,src/minisketch/include/minisketch.h
ariard,2021-07-15 00:15:14,"IIUC, sketches are initialized by default with `std::random_device`. If a user has a better source of randomness rather than this implementation-defined pseudo-random number generator, it should rather rely on it ? \n\nIf so, I think comment could be clearer about when a user should decide between default random seed and user-provided value.",https://github.com/bitcoin/bitcoin/pull/21859#discussion_r670035887,670035887,src/minisketch/include/minisketch.h
ariard,2021-07-15 00:40:13,"Maybe you should point out to protocoltips.md, that's the only other documentation place where collisions and their risks are explained ?\n\nZooming out, what's the collision model we care for Erlay ? I think there was an irc discussion a while back pointing that malicious inputs provoking collisions don't really matter as if your peer want to fail transaction announcement there is a reduction t",https://github.com/bitcoin/bitcoin/pull/21859#discussion_r670043855,670043855,src/minisketch/include/minisketch.h
ariard,2021-07-15 00:55:47,"nit: could be called `is_valid`, more Core's nomenclature-like imo?",https://github.com/bitcoin/bitcoin/pull/21859#discussion_r670048599,670048599,src/minisketch/include/minisketch.h
ariard,2021-07-15 01:01:53,"nit: make the ""may"" a ""must"", at least I interpret the requirement on the non-wrapped construction already as a must ""Use operator bool() to check that this isn't the case before performing any other operations""",https://github.com/bitcoin/bitcoin/pull/21859#discussion_r670050525,670050525,src/minisketch/include/minisketch.h
sipa,2021-07-17 19:15:44,"The distance of the implicit BCH code is 2C+1. I don't understand the rest of what you're trying to say.\n\nEDIT: I was wrong earlier; the distance is 2C+1, not C+1.",https://github.com/bitcoin/bitcoin/pull/21859#discussion_r671733490,671733490,src/minisketch/include/minisketch.h
sipa,2021-07-17 19:17:15,https://en.wikipedia.org/wiki/Birthday_problem,https://github.com/bitcoin/bitcoin/pull/21859#discussion_r671733597,671733597,src/minisketch/include/minisketch.h
sipa,2021-07-17 19:17:34,"This isn't Bitcoin Core, and I think this is the the most ideomatic approach (especially with the `explicit` which avoids accidental conversions).",https://github.com/bitcoin/bitcoin/pull/21859#discussion_r671733622,671733622,src/minisketch/include/minisketch.h
sipa,2021-07-17 19:20:23,"See the comment above, which describes the conditions under which an invalid object may be constructed. There are reasonable use cases where you don't need to check (you already made sure the fieldsize/implementation combination is supported, and you're ok with treating OOM as a fatal error).",https://github.com/bitcoin/bitcoin/pull/21859#discussion_r671733923,671733923,src/minisketch/include/minisketch.h
GeneFerneau,2021-07-30 19:15:38,May be helpful to add a fuzz harness for sketch deserialization. A large number of security bugs come from deserializing untrusted data.,https://github.com/bitcoin/bitcoin/pull/21859#discussion_r680167874,680167874,src/minisketch/src/sketch_impl.h
MarcoFalke,2021-09-19 07:10:46,"```\nOptions used to compile and link:\n  external signer = yes\n  multiprocess    = no\n  with libs       = yes\n  with wallet     = yes\n    with sqlite   = yes\n    with bdb      = yes\n  with gui / qt   = yes\n    with qr       = yes\n  with zmq        = yes\n  with test       = yes\n  with bench      = no\n  with upnp       = yes\n  with natpmp     = yes\n  use asm         = ye",https://github.com/bitcoin/bitcoin/pull/21859#discussion_r711696845,711696845,contrib/guix/libexec/build.sh
theuni,2021-09-21 20:10:09,"Pretty sure there's no need for this since we're building it ourselves. IIRC including it here was problematic while I was testing, but I've forgotten why.",https://github.com/bitcoin/bitcoin/pull/21859#discussion_r713382337,713382337,src/Makefile.am
fanquake,2021-09-22 01:05:14,"Yea this isn't needed, and was breaking `make dist`. Have dropped it from my branch.",https://github.com/bitcoin/bitcoin/pull/21859#discussion_r713518567,713518567,src/Makefile.am
fanquake,2021-09-22 01:05:17,We can remove this now that we've integrated the minisketch build. Have dropped it from my branch.,https://github.com/bitcoin/bitcoin/pull/21859#discussion_r713518591,713518591,contrib/guix/libexec/build.sh
