[
  {
    "sha": "14f5c796765b5555d772d7c0d000dab4e21f46c8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNGY1Yzc5Njc2NWI1NTU1ZDc3MmQ3YzBkMDAwZGFiNGUyMWY0NmM4",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-02-28T00:08:31Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-02-28T00:08:31Z"
      },
      "message": "RPC: Introduce -rpcamountdecimals for the RPC to use other units than BTC",
      "tree": {
        "sha": "7d90f47320f25033320602a49d71dda34fdf4054",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7d90f47320f25033320602a49d71dda34fdf4054"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/14f5c796765b5555d772d7c0d000dab4e21f46c8",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJYtL9/AAoJEKT10UHAGgOHuJ4P/1ga6QU9S8sflB7JojxIzlt2\nP2/AtrJxIedU5nQY1QLQC/KPFn850HaZTZ6LEXekT1u03QJ2lq+NA/hywI1XAG0L\nM3Yu8y4e50OM2hw+/MJJfqQwxDE90hkws+oT6XP9rHHeCHECndlZnHx1mhZ15Hub\nkCm1r9Plb1+Lnc/CIbVzK7egMF9IMiUUpuQfrxgua1Wf59qUUhjRb7HB9PbI2uAY\nNdThd1BjVXhY7Tfj5ifb5g2FPo6Dy0X4QoB8jZsbFghjmGV4320799x38xrMvNNp\nxIUF/9QTp2Hj3qiZwOV8wFDFnRKthi01p2Dl0DaWe1NU4+HeTfuF2oDAloEGjt8L\nKYXrwKm4g5q4iBz9Yn7b19f3191VjdkFuSzpLiYpP1oC9GvnmI75n39yE0DHSDm/\nd3NthKnCdL6wD5NflwKqmjMwlZ/j3hikC/1Pbtr++ebzD/fGSle+tYsY1AEqp5GC\nzkgiudJqQp/a9yOTuruJK99TjdUTv//2DZS+RANfAKknLZiUVkbpuJ5gSAiSHOih\nrqwACf1WS2O852F5cjR9JIvL/LhZWlYe47GpCrLXLxBUQU/fepam9kHgGidy0KXP\nRiqqublJI9Z8EupfPv0YV8YczOWh8VpV9pkvQMYCg3ZHhwPv0jj+pfp0HOg1ooJD\nW7KDzqLAClYQSbogmFWr\n=nL+n\n-----END PGP SIGNATURE-----",
        "payload": "tree 7d90f47320f25033320602a49d71dda34fdf4054\nparent 94e5ba9ba2901c8205c1814ece8e2fafbff63a03\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1488240511 +0100\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1488240511 +0100\n\nRPC: Introduce -rpcamountdecimals for the RPC to use other units than BTC\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14f5c796765b5555d772d7c0d000dab4e21f46c8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/14f5c796765b5555d772d7c0d000dab4e21f46c8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14f5c796765b5555d772d7c0d000dab4e21f46c8/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "94e5ba9ba2901c8205c1814ece8e2fafbff63a03",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94e5ba9ba2901c8205c1814ece8e2fafbff63a03",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/94e5ba9ba2901c8205c1814ece8e2fafbff63a03"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 20,
      "deletions": 3
    },
    "files": [
      {
        "sha": "2f068615159988c54729e30f37ef14251ae49702",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14f5c796765b5555d772d7c0d000dab4e21f46c8/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14f5c796765b5555d772d7c0d000dab4e21f46c8/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=14f5c796765b5555d772d7c0d000dab4e21f46c8",
        "patch": "@@ -492,6 +492,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-rpcport=<port>\", strprintf(_(\"Listen for JSON-RPC connections on <port> (default: %u or testnet: %u)\"), BaseParams(CBaseChainParams::MAIN).RPCPort(), BaseParams(CBaseChainParams::TESTNET).RPCPort()));\n     strUsage += HelpMessageOpt(\"-rpcallowip=<ip>\", _(\"Allow JSON-RPC connections from specified source. Valid for <ip> are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times\"));\n     strUsage += HelpMessageOpt(\"-rpcthreads=<n>\", strprintf(_(\"Set the number of threads to service RPC calls (default: %d)\"), DEFAULT_HTTP_THREADS));\n+    strUsage += HelpMessageOpt(\"-rpcamountdecimals=<n>\", strprintf(_(\"Number of decimals for amount values in RPC (default: %d [ie unit BTC], allowed: from 0 to 8)\"), DEFAULT_RPC_AMOUNT_DECIMALS));\n     if (showDebug) {\n         strUsage += HelpMessageOpt(\"-rpcworkqueue=<n>\", strprintf(\"Set the depth of the work queue to service RPC calls (default: %d)\", DEFAULT_HTTP_WORKQUEUE));\n         strUsage += HelpMessageOpt(\"-rpcservertimeout=<n>\", strprintf(\"Timeout during HTTP requests (default: %d)\", DEFAULT_HTTP_SERVER_TIMEOUT));\n@@ -1040,6 +1041,9 @@ bool AppInitParameterInteraction()\n     if (GetArg(\"-rpcserialversion\", DEFAULT_RPC_SERIALIZE_VERSION) > 1)\n         return InitError(\"unknown rpcserialversion requested.\");\n \n+    if (!SetRpcAmountDecimals(GetArg(\"-rpcamountdecimals\", DEFAULT_RPC_AMOUNT_DECIMALS)))\n+        return InitError(\"-rpcamountdecimals must be between 0 and 8.\");\n+\n     nMaxTipAge = GetArg(\"-maxtipage\", DEFAULT_MAX_TIP_AGE);\n \n     fEnableReplacement = GetBoolArg(\"-mempoolreplacement\", DEFAULT_ENABLE_REPLACEMENT);"
      },
      {
        "sha": "fabeacc4395083496689088a3058ba51e11ff365",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 3,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14f5c796765b5555d772d7c0d000dab4e21f46c8/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14f5c796765b5555d772d7c0d000dab4e21f46c8/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=14f5c796765b5555d772d7c0d000dab4e21f46c8",
        "patch": "@@ -31,6 +31,7 @@ using namespace std;\n \n static bool fRPCRunning = false;\n static bool fRPCInWarmup = true;\n+static unsigned int nRPCAmountDecimals = DEFAULT_RPC_AMOUNT_DECIMALS;\n static std::string rpcWarmupStatus(\"RPC server started\");\n static CCriticalSection cs_rpcWarmup;\n /* Timer-creating functions */\n@@ -121,12 +122,21 @@ void RPCTypeCheckObj(const UniValue& o,\n     }\n }\n \n+bool SetRpcAmountDecimals(unsigned int decimals)\n+{\n+    if (decimals <= 8) {\n+        nRPCAmountDecimals = decimals;\n+        return true;\n+    }\n+    return false;\n+}\n+\n CAmount AmountFromValue(const UniValue& value)\n {\n     if (!value.isNum() && !value.isStr())\n         throw JSONRPCError(RPC_TYPE_ERROR, \"Amount is not a number or string\");\n     CAmount amount;\n-    if (!ParseFixedPoint(value.getValStr(), 8, &amount))\n+    if (!ParseFixedPoint(value.getValStr(), nRPCAmountDecimals, &amount))\n         throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid amount\");\n     if (!MoneyRange(amount))\n         throw JSONRPCError(RPC_TYPE_ERROR, \"Amount out of range\");\n@@ -137,8 +147,9 @@ UniValue ValueFromAmount(const CAmount& amount)\n {\n     bool sign = amount < 0;\n     int64_t n_abs = (sign ? -amount : amount);\n-    int64_t quotient = n_abs / COIN;\n-    int64_t remainder = n_abs % COIN;\n+    unsigned int nRpcUnit = pow(10, nRPCAmountDecimals);\n+    int64_t quotient = n_abs / nRpcUnit;\n+    int64_t remainder = n_abs % nRpcUnit;\n     return UniValue(UniValue::VNUM,\n             strprintf(\"%s%d.%08d\", sign ? \"-\" : \"\", quotient, remainder));\n }"
      },
      {
        "sha": "e34160f639d391e2342a28716037a8ae95e69fe2",
        "filename": "src/rpc/server.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14f5c796765b5555d772d7c0d000dab4e21f46c8/src/rpc/server.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14f5c796765b5555d772d7c0d000dab4e21f46c8/src/rpc/server.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.h?ref=14f5c796765b5555d772d7c0d000dab4e21f46c8",
        "patch": "@@ -20,6 +20,7 @@\n #include <univalue.h>\n \n static const unsigned int DEFAULT_RPC_SERIALIZE_VERSION = 1;\n+static const unsigned int DEFAULT_RPC_AMOUNT_DECIMALS = 8;\n \n class CRPCCommand;\n \n@@ -191,6 +192,7 @@ extern std::vector<unsigned char> ParseHexV(const UniValue& v, std::string strNa\n extern std::vector<unsigned char> ParseHexO(const UniValue& o, std::string strKey);\n \n extern int64_t nWalletUnlockTime;\n+bool SetRpcAmountDecimals(unsigned int decimals);\n extern CAmount AmountFromValue(const UniValue& value);\n extern UniValue ValueFromAmount(const CAmount& amount);\n extern double GetDifficulty(const CBlockIndex* blockindex = NULL);"
      }
    ]
  },
  {
    "sha": "ee5f0701b28928c0eb44b7904037f43686a77ac6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZTVmMDcwMWIyODkyOGMwZWI0NGI3OTA0MDM3ZjQzNjg2YTc3YWM2",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-02-28T00:09:17Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-02-28T00:09:17Z"
      },
      "message": "QA: Use -rpcamountdecimals in rawtransactions.py",
      "tree": {
        "sha": "a814ea3f1c60d276a7df2d8641b88987ddf4d98b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a814ea3f1c60d276a7df2d8641b88987ddf4d98b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ee5f0701b28928c0eb44b7904037f43686a77ac6",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJYtL+tAAoJEKT10UHAGgOHP4IP/1zupO5DQvh7GeuWc08fc/c4\nsxFy0q1n5K5JzkeftqtCagtc6CJyKtpY91HXbJ7CbM2+pO5lschdaRGRbtTD/ISF\nfGzX4HYs1x2sPdtLDgeq6lnuGvC7cyQmr5lZJWscIkC/0xgZBZtNn5rBsf+k7skN\nYX3h25IrRqhVgCV2gldUXJUO6QuS3DSmQU7FG1rik1622J/YqRWCDMspW9PaYGm3\npRPMgtuARwk1UQ+nVRojO9mbFQJ7TAxKvdmq7I/mamrTLHgVGtcXZ8UGQq7K6SXV\nOXLY0K+TMCG1wjua6PEDN8/f20iICZUNZsSDQdiIHvAHKg6thHk9o7w3RGux6Wd0\nsoQdpBwrC2uzCwTakGUhHtJ4snpqRLiiRb9K28CO/OZcGN68ulg0r8Q2qJleLsOA\nIxxbdo1/yEW/NTvtGYUaGuqCMsupN0iSqguP3jr8krg61SPp/cUstD5YAcabcwGQ\nel5Epg/ATwssMUVg+vnaNEwwivzvEhf03oiVE28v7K+n05u1WUCm7KyHlbZO2767\nqPyweYpJgzJqtJICyFc6BL3S9wO+LIRpP+qs7NqUZIo6y4XQCuBj8LZxsNURPG5a\nAqjp2IXOTx9GTf1LFXLjBq5kpLyTLlBWbaB3TFAeaxoWbG+PPmZTs6/EzOXrm96O\nvWU7ipfP3o7EAAwhA5A8\n=gnxW\n-----END PGP SIGNATURE-----",
        "payload": "tree a814ea3f1c60d276a7df2d8641b88987ddf4d98b\nparent 14f5c796765b5555d772d7c0d000dab4e21f46c8\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1488240557 +0100\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1488240557 +0100\n\nQA: Use -rpcamountdecimals in rawtransactions.py\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee5f0701b28928c0eb44b7904037f43686a77ac6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ee5f0701b28928c0eb44b7904037f43686a77ac6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee5f0701b28928c0eb44b7904037f43686a77ac6/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "14f5c796765b5555d772d7c0d000dab4e21f46c8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14f5c796765b5555d772d7c0d000dab4e21f46c8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/14f5c796765b5555d772d7c0d000dab4e21f46c8"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 15,
      "deletions": 15
    },
    "files": [
      {
        "sha": "43eb57193abdcfad784e69dd4cd9000121ac3b48",
        "filename": "qa/rpc-tests/rawtransactions.py",
        "status": "modified",
        "additions": 15,
        "deletions": 15,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee5f0701b28928c0eb44b7904037f43686a77ac6/qa/rpc-tests/rawtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee5f0701b28928c0eb44b7904037f43686a77ac6/qa/rpc-tests/rawtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rawtransactions.py?ref=ee5f0701b28928c0eb44b7904037f43686a77ac6",
        "patch": "@@ -24,7 +24,7 @@ def __init__(self):\n         self.num_nodes = 3\n \n     def setup_network(self, split=False):\n-        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir)\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, extra_args=[[\"--rpcamountdecimals=0\"], [\"--rpcamountdecimals=0\"], [\"--rpcamountdecimals=0\"]])\n \n         #connect to a local machine for debugging\n         #url = \"http://bitcoinrpc:DP6DvqZtqXarpeNWyN3LZTFchCCyCUuHwNF7E8pX99x1@%s:%d\" % ('127.0.0.1', 18332)\n@@ -46,9 +46,9 @@ def run_test(self):\n         self.sync_all()\n         self.nodes[0].generate(101)\n         self.sync_all()\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.5)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.0)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),5.0)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 150000000)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 100000000)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 500000000)\n         self.sync_all()\n         self.nodes[0].generate(5)\n         self.sync_all()\n@@ -57,7 +57,7 @@ def run_test(self):\n         # sendrawtransaction with missing input #\n         #########################################\n         inputs  = [ {'txid' : \"1d1d4e24ed99057e84c3f80fd8fbec79ed9e1acee37da269356ecea000000000\", 'vout' : 1}] #won't exists\n-        outputs = { self.nodes[0].getnewaddress() : 4.998 }\n+        outputs = { self.nodes[0].getnewaddress() : 499800000 }\n         rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n         rawtx   = self.nodes[2].signrawtransaction(rawtx)\n \n@@ -86,11 +86,11 @@ def run_test(self):\n         bal = self.nodes[2].getbalance()\n \n         # send 1.2 BTC to msig adr\n-        txId = self.nodes[0].sendtoaddress(mSigObj, 1.2)\n+        txId = self.nodes[0].sendtoaddress(mSigObj, 120000000)\n         self.sync_all()\n         self.nodes[0].generate(1)\n         self.sync_all()\n-        assert_equal(self.nodes[2].getbalance(), bal+Decimal('1.20000000')) #node2 has both keys of the 2of2 ms addr., tx should affect the balance\n+        assert_equal(self.nodes[2].getbalance(), bal+Decimal('120000000')) #node2 has both keys of the 2of2 ms addr., tx should affect the balance\n \n \n         # 2of3 test from different nodes\n@@ -106,7 +106,7 @@ def run_test(self):\n         mSigObj = self.nodes[2].addmultisigaddress(2, [addr1Obj['pubkey'], addr2Obj['pubkey'], addr3Obj['pubkey']])\n         mSigObjValid = self.nodes[2].validateaddress(mSigObj)\n \n-        txId = self.nodes[0].sendtoaddress(mSigObj, 2.2)\n+        txId = self.nodes[0].sendtoaddress(mSigObj, 220000000)\n         decTx = self.nodes[0].gettransaction(txId)\n         rawTx = self.nodes[0].decoderawtransaction(decTx['hex'])\n         sPK = rawTx['vout'][0]['scriptPubKey']['hex']\n@@ -122,13 +122,13 @@ def run_test(self):\n         rawTx = self.nodes[0].decoderawtransaction(txDetails['hex'])\n         vout = False\n         for outpoint in rawTx['vout']:\n-            if outpoint['value'] == Decimal('2.20000000'):\n+            if outpoint['value'] == Decimal('220000000'):\n                 vout = outpoint\n                 break\n \n         bal = self.nodes[0].getbalance()\n         inputs = [{ \"txid\" : txId, \"vout\" : vout['n'], \"scriptPubKey\" : vout['scriptPubKey']['hex']}]\n-        outputs = { self.nodes[0].getnewaddress() : 2.19 }\n+        outputs = { self.nodes[0].getnewaddress() : 219000000 }\n         rawTx = self.nodes[2].createrawtransaction(inputs, outputs)\n         rawTxPartialSigned = self.nodes[1].signrawtransaction(rawTx, inputs)\n         assert_equal(rawTxPartialSigned['complete'], False) #node1 only has one key, can't comp. sign the tx\n@@ -140,7 +140,7 @@ def run_test(self):\n         self.sync_all()\n         self.nodes[0].generate(1)\n         self.sync_all()\n-        assert_equal(self.nodes[0].getbalance(), bal+Decimal('50.00000000')+Decimal('2.19000000')) #block reward + tx\n+        assert_equal(self.nodes[0].getbalance(), bal+Decimal('5000000000')+Decimal('219000000')) #block reward + tx\n \n         # getrawtransaction tests\n         # 1. valid parameters - only supply txid\n@@ -170,21 +170,21 @@ def run_test(self):\n         assert_raises(JSONRPCException, self.nodes[0].getrawtransaction, txHash, {})\n \n         inputs  = [ {'txid' : \"1d1d4e24ed99057e84c3f80fd8fbec79ed9e1acee37da269356ecea000000000\", 'vout' : 1, 'sequence' : 1000}]\n-        outputs = { self.nodes[0].getnewaddress() : 1 }\n+        outputs = { self.nodes[0].getnewaddress() : 100000000 }\n         rawtx   = self.nodes[0].createrawtransaction(inputs, outputs)\n         decrawtx= self.nodes[0].decoderawtransaction(rawtx)\n         assert_equal(decrawtx['vin'][0]['sequence'], 1000)\n         \n         inputs  = [ {'txid' : \"1d1d4e24ed99057e84c3f80fd8fbec79ed9e1acee37da269356ecea000000000\", 'vout' : 1, 'sequence' : -1}]\n-        outputs = { self.nodes[0].getnewaddress() : 1 }\n+        outputs = { self.nodes[0].getnewaddress() : 100000000 }\n         assert_raises(JSONRPCException, self.nodes[0].createrawtransaction, inputs, outputs)\n         \n         inputs  = [ {'txid' : \"1d1d4e24ed99057e84c3f80fd8fbec79ed9e1acee37da269356ecea000000000\", 'vout' : 1, 'sequence' : 4294967296}]\n-        outputs = { self.nodes[0].getnewaddress() : 1 }\n+        outputs = { self.nodes[0].getnewaddress() : 100000000 }\n         assert_raises(JSONRPCException, self.nodes[0].createrawtransaction, inputs, outputs)\n         \n         inputs  = [ {'txid' : \"1d1d4e24ed99057e84c3f80fd8fbec79ed9e1acee37da269356ecea000000000\", 'vout' : 1, 'sequence' : 4294967294}]\n-        outputs = { self.nodes[0].getnewaddress() : 1 }\n+        outputs = { self.nodes[0].getnewaddress() : 100000000 }\n         rawtx   = self.nodes[0].createrawtransaction(inputs, outputs)\n         decrawtx= self.nodes[0].decoderawtransaction(rawtx)\n         assert_equal(decrawtx['vin'][0]['sequence'], 4294967294)"
      }
    ]
  }
]