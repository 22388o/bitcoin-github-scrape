practicalswift,2021-06-06 11:10:34,Concept ACK: as we all know by know explicit is better than implicit :),https://github.com/bitcoin/bitcoin/pull/22167#issuecomment-855381333,855381333,
DrahtBot,2021-06-06 14:34:48,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#22981](https://github.com/bitcoin/bitcoin/pull/22981) (doc: Fix incorrect C++ named args by MarcoFalke)\n* [#19690](http",https://github.com/bitcoin/bitcoin/pull/22167#issuecomment-855409202,855409202,
Empact,2021-06-07 04:14:57,Concept ACK,https://github.com/bitcoin/bitcoin/pull/22167#issuecomment-855562050,855562050,
theStack,2021-06-18 14:38:04,Concept ACK,https://github.com/bitcoin/bitcoin/pull/22167#issuecomment-864086143,864086143,
MarcoFalke,2021-11-02 16:03:56,Added a commit to  remove MakeUCharSpan where not needed ,https://github.com/bitcoin/bitcoin/pull/22167#issuecomment-957882022,957882022,
sipa,2021-11-02 16:22:15,"Concept ACK, though I wonder if this alternative approach isn't better:\n\nC++20 `std::span` has `std::as_bytes` and `std::as_writable_bytes` functions to convert spans to equivalent spans-to-byte-representation. While we don't have `std::byte` yet, we could introduce equivalent operations that use `unsigned char` instead.\n\nIf the stream write/read functions were changed to take `Span<(const",https://github.com/bitcoin/bitcoin/pull/22167#issuecomment-957914034,957914034,
MarcoFalke,2021-11-04 13:32:24,"> If the stream write/read functions were changed to take Span<(const) unsigned char>, many of the cases here could very naturally be written as s.write(AsWritableUChar(Span{arg})); for example.\n\nOk, will do that instead. It will require changing twice as many lines of code, but given that we are starting to use spans consistently, it will likely happen anyway at some point. Combining this Spa",https://github.com/bitcoin/bitcoin/pull/22167#issuecomment-960936147,960936147,
Empact,2021-06-07 04:12:58,nit: `Uint8Ptr` unnecessary as this is already `uint8_t*`,https://github.com/bitcoin/bitcoin/pull/22167#discussion_r646259193,646259193,src/serialize.h
MarcoFalke,2021-06-07 07:08:15,I think I'll keep this as is for symmetry with the other helpers.,https://github.com/bitcoin/bitcoin/pull/22167#discussion_r646323210,646323210,src/serialize.h
sipa,2021-11-02 16:08:31,"Nit: for something that looks like an integer type, I find initializing with 0 (`uint8_t a{0};`) more naturally looking than a char literal.",https://github.com/bitcoin/bitcoin/pull/22167#discussion_r741249026,741249026,src/bench/checkblock.cpp
sipa,2021-11-02 16:13:03,"I think this can be written more simply as `template<typename Stream> void Serialize(Stream&, char) = delete;` (though perhaps with a slightly less clear error message).",https://github.com/bitcoin/bitcoin/pull/22167#discussion_r741253294,741253294,src/serialize.h
