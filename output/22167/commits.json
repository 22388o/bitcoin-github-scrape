[
  {
    "sha": "fa4238e70ff7f1055044a746c1729e756be9a38e",
    "node_id": "C_kwDOABII59oAKGZhNDIzOGU3MGZmN2YxMDU1MDQ0YTc0NmMxNzI5ZTc1NmJlOWEzOGU",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-05-17T07:38:42Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-11-02T12:56:02Z"
      },
      "message": "refactor: Remove char serialize",
      "tree": {
        "sha": "3c793fc2c1c8f67d1f80a11cf811aeec7422d043",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3c793fc2c1c8f67d1f80a11cf811aeec7422d043"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa4238e70ff7f1055044a746c1729e756be9a38e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUgATwwAvGlyQYl1QNxb3SyFvdP3SMRtlVF3IbSSRe0BTdFCTWF+kOW4YHmmPL0P\nO1ksbNDuAYnnl1jzjrvWsZooYbfuiTwhuD+o6rwQzxzC0Fj9yu8Sms7u7VZnw6j5\ns3u5wvox4YXGwKzUS5xlG6ircfGD9CSbsmOrjnuLp45moNl0KA/ivHBEiyXF70RR\nuPQil8BUH+vPI4a3Y5yfznLlvoWKsL1gu4f/Z5lfYnhvwtUYHHGcZTmx7BOhyUhC\n2u/8BYtqTdqyQPG0akr/PtSphYrP8FCJpbjag3l/AYYjQ7H61a1BFgc3KWQPPFmI\nuJspNaZyGqIN8cgM28X1LH/8QwqyZtkdPDJYVsu4rOJy4E/63PDXG54d6/o12Af0\nwnLI2ietFI+W0ZwntGbI9FOIroxUbqmHG/gq6Ql8R+IaMtoK/kIhaUZzuq0epP4u\npG+/jlCaPSDcAf0vl2tXgFIdU6qzBEFrlQCv7Dv1/TDkGtWayCUPh0W1gCGwC9CR\n5CyCQHMo\n=6Y/k\n-----END PGP SIGNATURE-----",
        "payload": "tree 3c793fc2c1c8f67d1f80a11cf811aeec7422d043\nparent 9e3f7dcaa2f89efff48d299132f4998bf701c264\nauthor MarcoFalke <falke.marco@gmail.com> 1621237122 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1635857762 +0100\n\nrefactor: Remove char serialize\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa4238e70ff7f1055044a746c1729e756be9a38e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa4238e70ff7f1055044a746c1729e756be9a38e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa4238e70ff7f1055044a746c1729e756be9a38e/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9e3f7dcaa2f89efff48d299132f4998bf701c264",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e3f7dcaa2f89efff48d299132f4998bf701c264",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9e3f7dcaa2f89efff48d299132f4998bf701c264"
      }
    ],
    "stats": {
      "total": 209,
      "additions": 102,
      "deletions": 107
    },
    "files": [
      {
        "sha": "fc04921af0db930a46afd61706a8d3d59cfaeddf",
        "filename": "src/bench/checkblock.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa4238e70ff7f1055044a746c1729e756be9a38e/src/bench/checkblock.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa4238e70ff7f1055044a746c1729e756be9a38e/src/bench/checkblock.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/checkblock.cpp?ref=fa4238e70ff7f1055044a746c1729e756be9a38e",
        "patch": "@@ -17,7 +17,7 @@\n static void DeserializeBlockTest(benchmark::Bench& bench)\n {\n     CDataStream stream(benchmark::data::block413567, SER_NETWORK, PROTOCOL_VERSION);\n-    char a = '\\0';\n+    uint8_t a{'\\0'};\n     stream.write(&a, 1); // Prevent compaction\n \n     bench.unit(\"block\").run([&] {\n@@ -31,7 +31,7 @@ static void DeserializeBlockTest(benchmark::Bench& bench)\n static void DeserializeAndCheckBlockTest(benchmark::Bench& bench)\n {\n     CDataStream stream(benchmark::data::block413567, SER_NETWORK, PROTOCOL_VERSION);\n-    char a = '\\0';\n+    uint8_t a{'\\0'};\n     stream.write(&a, 1); // Prevent compaction\n \n     ArgsManager bench_args;"
      },
      {
        "sha": "0b311ef49c0a24d856a10d6a76cd9578368695de",
        "filename": "src/bench/rpc_blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa4238e70ff7f1055044a746c1729e756be9a38e/src/bench/rpc_blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa4238e70ff7f1055044a746c1729e756be9a38e/src/bench/rpc_blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/rpc_blockchain.cpp?ref=fa4238e70ff7f1055044a746c1729e756be9a38e",
        "patch": "@@ -23,7 +23,7 @@ struct TestBlockAndIndex {\n     TestBlockAndIndex()\n     {\n         CDataStream stream(benchmark::data::block413567, SER_NETWORK, PROTOCOL_VERSION);\n-        char a = '\\0';\n+        uint8_t a{'\\0'};\n         stream.write(&a, 1); // Prevent compaction\n \n         stream >> block;"
      },
      {
        "sha": "8ab9297403e60e19f78c6aa5e2448832403908f6",
        "filename": "src/hash.h",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa4238e70ff7f1055044a746c1729e756be9a38e/src/hash.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa4238e70ff7f1055044a746c1729e756be9a38e/src/hash.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hash.h?ref=fa4238e70ff7f1055044a746c1729e756be9a38e",
        "patch": "@@ -111,8 +111,9 @@ class CHashWriter\n     int GetType() const { return nType; }\n     int GetVersion() const { return nVersion; }\n \n-    void write(const char *pch, size_t size) {\n-        ctx.Write((const unsigned char*)pch, size);\n+    void write(const uint8_t* pch, size_t size)\n+    {\n+        ctx.Write(pch, size);\n     }\n \n     /** Compute the double-SHA256 hash of all data written to this object.\n@@ -162,15 +163,15 @@ class CHashVerifier : public CHashWriter\n public:\n     explicit CHashVerifier(Source* source_) : CHashWriter(source_->GetType(), source_->GetVersion()), source(source_) {}\n \n-    void read(char* pch, size_t nSize)\n+    void read(uint8_t* pch, size_t nSize)\n     {\n         source->read(pch, nSize);\n         this->write(pch, nSize);\n     }\n \n     void ignore(size_t nSize)\n     {\n-        char data[1024];\n+        uint8_t data[1024];\n         while (nSize > 0) {\n             size_t now = std::min<size_t>(nSize, 1024);\n             read(data, now);"
      },
      {
        "sha": "b49f2a372c06d697261b656262974eae27621294",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa4238e70ff7f1055044a746c1729e756be9a38e/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa4238e70ff7f1055044a746c1729e756be9a38e/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=fa4238e70ff7f1055044a746c1729e756be9a38e",
        "patch": "@@ -3097,11 +3097,11 @@ void CaptureMessage(const CAddress& addr, const std::string& msg_type, const Spa\n     CAutoFile f(fsbridge::fopen(path, \"ab\"), SER_DISK, CLIENT_VERSION);\n \n     ser_writedata64(f, now.count());\n-    f.write(msg_type.data(), msg_type.length());\n+    f.write(Uint8Ptr(msg_type.data()), msg_type.length());\n     for (auto i = msg_type.length(); i < CMessageHeader::COMMAND_SIZE; ++i) {\n         f << uint8_t{'\\0'};\n     }\n     uint32_t size = data.size();\n     ser_writedata32(f, size);\n-    f.write((const char*)data.data(), data.size());\n+    f.write(data.data(), data.size());\n }"
      },
      {
        "sha": "7dc8a69e8a95c0183399af66500cf54735056b03",
        "filename": "src/node/blockstorage.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa4238e70ff7f1055044a746c1729e756be9a38e/src/node/blockstorage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa4238e70ff7f1055044a746c1729e756be9a38e/src/node/blockstorage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/blockstorage.cpp?ref=fa4238e70ff7f1055044a746c1729e756be9a38e",
        "patch": "@@ -435,7 +435,7 @@ bool ReadRawBlockFromDisk(std::vector<uint8_t>& block, const FlatFilePos& pos, c\n         }\n \n         block.resize(blk_size); // Zeroing of memory is intentional here\n-        filein.read((char*)block.data(), blk_size);\n+        filein.read(block.data(), blk_size);\n     } catch (const std::exception& e) {\n         return error(\"%s: Read from block file failed: %s for %s\", __func__, e.what(), pos.ToString());\n     }"
      },
      {
        "sha": "21c7026dece83e46eb1c7f9a7e82c493b0147ebb",
        "filename": "src/pubkey.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa4238e70ff7f1055044a746c1729e756be9a38e/src/pubkey.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa4238e70ff7f1055044a746c1729e756be9a38e/src/pubkey.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pubkey.h?ref=fa4238e70ff7f1055044a746c1729e756be9a38e",
        "patch": "@@ -136,20 +136,20 @@ class CPubKey\n     {\n         unsigned int len = size();\n         ::WriteCompactSize(s, len);\n-        s.write((char*)vch, len);\n+        s.write(vch, len);\n     }\n     template <typename Stream>\n     void Unserialize(Stream& s)\n     {\n         unsigned int len = ::ReadCompactSize(s);\n         if (len <= SIZE) {\n-            s.read((char*)vch, len);\n+            s.read(vch, len);\n             if (len != size()) {\n                 Invalidate();\n             }\n         } else {\n             // invalid pubkey, skip available data\n-            char dummy;\n+            uint8_t dummy;\n             while (len--)\n                 s.read(&dummy, 1);\n             Invalidate();"
      },
      {
        "sha": "e7aad9f6d2141dc57c897700ecfd6393ac7e47be",
        "filename": "src/script/bitcoinconsensus.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa4238e70ff7f1055044a746c1729e756be9a38e/src/script/bitcoinconsensus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa4238e70ff7f1055044a746c1729e756be9a38e/src/script/bitcoinconsensus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/bitcoinconsensus.cpp?ref=fa4238e70ff7f1055044a746c1729e756be9a38e",
        "patch": "@@ -22,7 +22,7 @@ class TxInputStream\n     m_remaining(txToLen)\n     {}\n \n-    void read(char* pch, size_t nSize)\n+    void read(uint8_t* pch, size_t nSize)\n     {\n         if (nSize > m_remaining)\n             throw std::ios_base::failure(std::string(__func__) + \": end of data\");"
      },
      {
        "sha": "e838301bac662812a31b64097d6b7eb77ba9b818",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa4238e70ff7f1055044a746c1729e756be9a38e/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa4238e70ff7f1055044a746c1729e756be9a38e/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=fa4238e70ff7f1055044a746c1729e756be9a38e",
        "patch": "@@ -1303,12 +1303,12 @@ class CTransactionSignatureSerializer\n         it = itBegin;\n         while (scriptCode.GetOp(it, opcode)) {\n             if (opcode == OP_CODESEPARATOR) {\n-                s.write((char*)&itBegin[0], it-itBegin-1);\n+                s.write(&itBegin[0], it - itBegin - 1);\n                 itBegin = it;\n             }\n         }\n         if (itBegin != scriptCode.end())\n-            s.write((char*)&itBegin[0], it-itBegin);\n+            s.write(&itBegin[0], it - itBegin);\n     }\n \n     /** Serialize an input of txTo */"
      },
      {
        "sha": "65a1e792947f48b9158a3f4cb6d28314a29e3c2b",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 38,
        "deletions": 39,
        "changes": 77,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa4238e70ff7f1055044a746c1729e756be9a38e/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa4238e70ff7f1055044a746c1729e756be9a38e/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=fa4238e70ff7f1055044a746c1729e756be9a38e",
        "patch": "@@ -23,6 +23,7 @@\n \n #include <prevector.h>\n #include <span.h>\n+#include <util/types.h>\n \n /**\n  * The maximum size of a serialized object in bytes or number of elements\n@@ -47,87 +48,85 @@ static const unsigned int MAX_VECTOR_ALLOCATE = 5000000;\n struct deserialize_type {};\n constexpr deserialize_type deserialize {};\n \n-//! Safely convert odd char pointer types to standard ones.\n-inline char* CharCast(char* c) { return c; }\n-inline char* CharCast(unsigned char* c) { return (char*)c; }\n-inline const char* CharCast(const char* c) { return c; }\n-inline const char* CharCast(const unsigned char* c) { return (const char*)c; }\n+//! Safely convert a data pointer to a uint8_t data pointer.\n+inline uint8_t* Uint8Ptr(void* data) { return reinterpret_cast<uint8_t*>(data); }\n+inline const uint8_t* Uint8Ptr(const void* data) { return reinterpret_cast<const uint8_t*>(data); }\n \n /*\n  * Lowest-level serialization and conversion.\n  * @note Sizes of these types are verified in the tests\n  */\n template<typename Stream> inline void ser_writedata8(Stream &s, uint8_t obj)\n {\n-    s.write((char*)&obj, 1);\n+    s.write(Uint8Ptr(&obj), 1);\n }\n template<typename Stream> inline void ser_writedata16(Stream &s, uint16_t obj)\n {\n     obj = htole16(obj);\n-    s.write((char*)&obj, 2);\n+    s.write(Uint8Ptr(&obj), 2);\n }\n template<typename Stream> inline void ser_writedata16be(Stream &s, uint16_t obj)\n {\n     obj = htobe16(obj);\n-    s.write((char*)&obj, 2);\n+    s.write(Uint8Ptr(&obj), 2);\n }\n template<typename Stream> inline void ser_writedata32(Stream &s, uint32_t obj)\n {\n     obj = htole32(obj);\n-    s.write((char*)&obj, 4);\n+    s.write(Uint8Ptr(&obj), 4);\n }\n template<typename Stream> inline void ser_writedata32be(Stream &s, uint32_t obj)\n {\n     obj = htobe32(obj);\n-    s.write((char*)&obj, 4);\n+    s.write(Uint8Ptr(&obj), 4);\n }\n template<typename Stream> inline void ser_writedata64(Stream &s, uint64_t obj)\n {\n     obj = htole64(obj);\n-    s.write((char*)&obj, 8);\n+    s.write(Uint8Ptr(&obj), 8);\n }\n template<typename Stream> inline uint8_t ser_readdata8(Stream &s)\n {\n     uint8_t obj;\n-    s.read((char*)&obj, 1);\n+    s.read(Uint8Ptr(&obj), 1);\n     return obj;\n }\n template<typename Stream> inline uint16_t ser_readdata16(Stream &s)\n {\n     uint16_t obj;\n-    s.read((char*)&obj, 2);\n+    s.read(Uint8Ptr(&obj), 2);\n     return le16toh(obj);\n }\n template<typename Stream> inline uint16_t ser_readdata16be(Stream &s)\n {\n     uint16_t obj;\n-    s.read((char*)&obj, 2);\n+    s.read(Uint8Ptr(&obj), 2);\n     return be16toh(obj);\n }\n template<typename Stream> inline uint32_t ser_readdata32(Stream &s)\n {\n     uint32_t obj;\n-    s.read((char*)&obj, 4);\n+    s.read(Uint8Ptr(&obj), 4);\n     return le32toh(obj);\n }\n template<typename Stream> inline uint32_t ser_readdata32be(Stream &s)\n {\n     uint32_t obj;\n-    s.read((char*)&obj, 4);\n+    s.read(Uint8Ptr(&obj), 4);\n     return be32toh(obj);\n }\n template<typename Stream> inline uint64_t ser_readdata64(Stream &s)\n {\n     uint64_t obj;\n-    s.read((char*)&obj, 8);\n+    s.read(Uint8Ptr(&obj), 8);\n     return le64toh(obj);\n }\n \n \n /////////////////////////////////////////////////////////////////\n //\n // Templates for serializing to anything that looks like a stream,\n-// i.e. anything that supports .read(char*, size_t) and .write(char*, size_t)\n+// i.e. anything that supports .read(uint8_t*, size_t) and .write(uint8_t*, size_t)\n //\n \n class CSizeComputer;\n@@ -196,7 +195,7 @@ template<typename X> const X& ReadWriteAsHelper(const X& x) { return x; }\n     FORMATTER_METHODS(cls, obj)\n \n #ifndef CHAR_EQUALS_INT8\n-template<typename Stream> inline void Serialize(Stream& s, char a    ) { ser_writedata8(s, a); } // TODO Get rid of bare char\n+template<typename Stream> void Serialize(Stream&, char) { static_assert(ALWAYS_FALSE<Stream>, \"char serialization forbidden use uint8_t or int8_t\"); }\n #endif\n template<typename Stream> inline void Serialize(Stream& s, int8_t a  ) { ser_writedata8(s, a); }\n template<typename Stream> inline void Serialize(Stream& s, uint8_t a ) { ser_writedata8(s, a); }\n@@ -206,13 +205,13 @@ template<typename Stream> inline void Serialize(Stream& s, int32_t a ) { ser_wri\n template<typename Stream> inline void Serialize(Stream& s, uint32_t a) { ser_writedata32(s, a); }\n template<typename Stream> inline void Serialize(Stream& s, int64_t a ) { ser_writedata64(s, a); }\n template<typename Stream> inline void Serialize(Stream& s, uint64_t a) { ser_writedata64(s, a); }\n-template<typename Stream, int N> inline void Serialize(Stream& s, const char (&a)[N]) { s.write(a, N); }\n-template<typename Stream, int N> inline void Serialize(Stream& s, const unsigned char (&a)[N]) { s.write(CharCast(a), N); }\n-template<typename Stream> inline void Serialize(Stream& s, const Span<const unsigned char>& span) { s.write(CharCast(span.data()), span.size()); }\n-template<typename Stream> inline void Serialize(Stream& s, const Span<unsigned char>& span) { s.write(CharCast(span.data()), span.size()); }\n+template<typename Stream, int N> inline void Serialize(Stream& s, const char (&a)[N]) { s.write(Uint8Ptr(a), N); }\n+template<typename Stream, int N> inline void Serialize(Stream& s, const unsigned char (&a)[N]) { s.write(a, N); }\n+template<typename Stream> inline void Serialize(Stream& s, const Span<const unsigned char>& span) { s.write(span.data(), span.size()); }\n+template<typename Stream> inline void Serialize(Stream& s, const Span<unsigned char>& span) { s.write(span.data(), span.size()); }\n \n #ifndef CHAR_EQUALS_INT8\n-template<typename Stream> inline void Unserialize(Stream& s, char& a    ) { a = ser_readdata8(s); } // TODO Get rid of bare char\n+template<typename Stream> void Unserialize(Stream&, char) { static_assert(ALWAYS_FALSE<Stream>, \"char serialization forbidden use uint8_t or int8_t\"); }\n #endif\n template<typename Stream> inline void Unserialize(Stream& s, int8_t& a  ) { a = ser_readdata8(s); }\n template<typename Stream> inline void Unserialize(Stream& s, uint8_t& a ) { a = ser_readdata8(s); }\n@@ -222,9 +221,9 @@ template<typename Stream> inline void Unserialize(Stream& s, int32_t& a ) { a =\n template<typename Stream> inline void Unserialize(Stream& s, uint32_t& a) { a = ser_readdata32(s); }\n template<typename Stream> inline void Unserialize(Stream& s, int64_t& a ) { a = ser_readdata64(s); }\n template<typename Stream> inline void Unserialize(Stream& s, uint64_t& a) { a = ser_readdata64(s); }\n-template<typename Stream, int N> inline void Unserialize(Stream& s, char (&a)[N]) { s.read(a, N); }\n-template<typename Stream, int N> inline void Unserialize(Stream& s, unsigned char (&a)[N]) { s.read(CharCast(a), N); }\n-template<typename Stream> inline void Unserialize(Stream& s, Span<unsigned char>& span) { s.read(CharCast(span.data()), span.size()); }\n+template<typename Stream, int N> inline void Unserialize(Stream& s, char (&a)[N]) { s.read(Uint8Ptr(a), N); }\n+template<typename Stream, int N> inline void Unserialize(Stream& s, unsigned char (&a)[N]) { s.read(a, N); }\n+template<typename Stream> inline void Unserialize(Stream& s, Span<unsigned char>& span) { s.read(span.data(), span.size()); }\n \n template <typename Stream> inline void Serialize(Stream& s, bool a) { uint8_t f = a; ser_writedata8(s, f); }\n template <typename Stream> inline void Unserialize(Stream& s, bool& a) { uint8_t f = ser_readdata8(s); a = f; }\n@@ -479,10 +478,10 @@ struct CustomUintFormatter\n         if (v < 0 || v > MAX) throw std::ios_base::failure(\"CustomUintFormatter value out of range\");\n         if (BigEndian) {\n             uint64_t raw = htobe64(v);\n-            s.write(((const char*)&raw) + 8 - Bytes, Bytes);\n+            s.write(Uint8Ptr(&raw) + 8 - Bytes, Bytes);\n         } else {\n             uint64_t raw = htole64(v);\n-            s.write((const char*)&raw, Bytes);\n+            s.write(Uint8Ptr(&raw), Bytes);\n         }\n     }\n \n@@ -492,10 +491,10 @@ struct CustomUintFormatter\n         static_assert(std::numeric_limits<U>::max() >= MAX && std::numeric_limits<U>::min() <= 0, \"Assigned type too small\");\n         uint64_t raw = 0;\n         if (BigEndian) {\n-            s.read(((char*)&raw) + 8 - Bytes, Bytes);\n+            s.read(Uint8Ptr(&raw) + 8 - Bytes, Bytes);\n             v = static_cast<I>(be64toh(raw));\n         } else {\n-            s.read((char*)&raw, Bytes);\n+            s.read(Uint8Ptr(&raw), Bytes);\n             v = static_cast<I>(le64toh(raw));\n         }\n     }\n@@ -538,7 +537,7 @@ struct LimitedStringFormatter\n             throw std::ios_base::failure(\"String length limit exceeded\");\n         }\n         v.resize(size);\n-        if (size != 0) s.read((char*)v.data(), size);\n+        if (size != 0) s.read(Uint8Ptr(v.data()), size);\n     }\n \n     template<typename Stream>\n@@ -702,7 +701,7 @@ void Serialize(Stream& os, const std::basic_string<C>& str)\n {\n     WriteCompactSize(os, str.size());\n     if (!str.empty())\n-        os.write((char*)str.data(), str.size() * sizeof(C));\n+        os.write(Uint8Ptr(str.data()), str.size() * sizeof(C));\n }\n \n template<typename Stream, typename C>\n@@ -711,7 +710,7 @@ void Unserialize(Stream& is, std::basic_string<C>& str)\n     unsigned int nSize = ReadCompactSize(is);\n     str.resize(nSize);\n     if (nSize != 0)\n-        is.read((char*)str.data(), nSize * sizeof(C));\n+        is.read(Uint8Ptr(str.data()), nSize * sizeof(C));\n }\n \n \n@@ -724,7 +723,7 @@ void Serialize_impl(Stream& os, const prevector<N, T>& v, const unsigned char&)\n {\n     WriteCompactSize(os, v.size());\n     if (!v.empty())\n-        os.write((char*)v.data(), v.size() * sizeof(T));\n+        os.write(Uint8Ptr(v.data()), v.size() * sizeof(T));\n }\n \n template<typename Stream, unsigned int N, typename T, typename V>\n@@ -751,7 +750,7 @@ void Unserialize_impl(Stream& is, prevector<N, T>& v, const unsigned char&)\n     {\n         unsigned int blk = std::min(nSize - i, (unsigned int)(1 + 4999999 / sizeof(T)));\n         v.resize_uninitialized(i + blk);\n-        is.read((char*)&v[i], blk * sizeof(T));\n+        is.read(Uint8Ptr(&v[i]), blk * sizeof(T));\n         i += blk;\n     }\n }\n@@ -778,7 +777,7 @@ void Serialize_impl(Stream& os, const std::vector<T, A>& v, const unsigned char&\n {\n     WriteCompactSize(os, v.size());\n     if (!v.empty())\n-        os.write((char*)v.data(), v.size() * sizeof(T));\n+        os.write(Uint8Ptr(v.data()), v.size() * sizeof(T));\n }\n \n template<typename Stream, typename T, typename A>\n@@ -817,7 +816,7 @@ void Unserialize_impl(Stream& is, std::vector<T, A>& v, const unsigned char&)\n     {\n         unsigned int blk = std::min(nSize - i, (unsigned int)(1 + 4999999 / sizeof(T)));\n         v.resize(i + blk);\n-        is.read((char*)&v[i], blk * sizeof(T));\n+        is.read(Uint8Ptr(&v[i]), blk * sizeof(T));\n         i += blk;\n     }\n }\n@@ -982,7 +981,7 @@ class CSizeComputer\n public:\n     explicit CSizeComputer(int nVersionIn) : nSize(0), nVersion(nVersionIn) {}\n \n-    void write(const char *psz, size_t _nSize)\n+    void write(const uint8_t* psz, size_t _nSize)\n     {\n         this->nSize += _nSize;\n     }"
      },
      {
        "sha": "0f88369522d0ad3ac58a20c2c754c9d22e4c3947",
        "filename": "src/streams.h",
        "status": "modified",
        "additions": 17,
        "deletions": 15,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa4238e70ff7f1055044a746c1729e756be9a38e/src/streams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa4238e70ff7f1055044a746c1729e756be9a38e/src/streams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/streams.h?ref=fa4238e70ff7f1055044a746c1729e756be9a38e",
        "patch": "@@ -49,12 +49,12 @@ class OverrideStream\n         return (*this);\n     }\n \n-    void write(const char* pch, size_t nSize)\n+    void write(const uint8_t* pch, size_t nSize)\n     {\n         stream->write(pch, nSize);\n     }\n \n-    void read(char* pch, size_t nSize)\n+    void read(uint8_t* pch, size_t nSize)\n     {\n         stream->read(pch, nSize);\n     }\n@@ -94,15 +94,15 @@ class CVectorWriter\n     {\n         ::SerializeMany(*this, std::forward<Args>(args)...);\n     }\n-    void write(const char* pch, size_t nSize)\n+    void write(const uint8_t* pch, size_t nSize)\n     {\n         assert(nPos <= vchData.size());\n         size_t nOverwrite = std::min(nSize, vchData.size() - nPos);\n         if (nOverwrite) {\n-            memcpy(vchData.data() + nPos, reinterpret_cast<const unsigned char*>(pch), nOverwrite);\n+            memcpy(vchData.data() + nPos, pch, nOverwrite);\n         }\n         if (nOverwrite < nSize) {\n-            vchData.insert(vchData.end(), reinterpret_cast<const unsigned char*>(pch) + nOverwrite, reinterpret_cast<const unsigned char*>(pch) + nSize);\n+            vchData.insert(vchData.end(), pch + nOverwrite, pch + nSize);\n         }\n         nPos += nSize;\n     }\n@@ -180,7 +180,7 @@ class VectorReader\n     size_t size() const { return m_data.size() - m_pos; }\n     bool empty() const { return m_data.size() == m_pos; }\n \n-    void read(char* dst, size_t n)\n+    void read(uint8_t* dst, size_t n)\n     {\n         if (n == 0) {\n             return;\n@@ -278,7 +278,7 @@ class CDataStream\n             vch.insert(it, first, last);\n     }\n \n-    void insert(iterator it, const char* first, const char* last)\n+    void insert(iterator it, const uint8_t* first, const uint8_t* last)\n     {\n         if (last == first) return;\n         assert(last - first > 0);\n@@ -362,7 +362,7 @@ class CDataStream\n     void SetVersion(int n)       { nVersion = n; }\n     int GetVersion() const       { return nVersion; }\n \n-    void read(char* pch, size_t nSize)\n+    void read(uint8_t* pch, size_t nSize)\n     {\n         if (nSize == 0) return;\n \n@@ -399,7 +399,7 @@ class CDataStream\n         nReadPos = nReadPosNext;\n     }\n \n-    void write(const char* pch, size_t nSize)\n+    void write(const uint8_t* pch, size_t nSize)\n     {\n         // Write to the end of the buffer\n         vch.insert(vch.end(), pch, pch + nSize);\n@@ -410,7 +410,7 @@ class CDataStream\n     {\n         // Special case: stream << stream concatenates like stream += stream\n         if (!vch.empty())\n-            s.write((char*)vch.data(), vch.size() * sizeof(value_type));\n+            s.write(vch.data(), vch.size() * sizeof(value_type));\n     }\n \n     template<typename T>\n@@ -614,7 +614,7 @@ class CAutoFile\n     int GetType() const          { return nType; }\n     int GetVersion() const       { return nVersion; }\n \n-    void read(char* pch, size_t nSize)\n+    void read(uint8_t* pch, size_t nSize)\n     {\n         if (!file)\n             throw std::ios_base::failure(\"CAutoFile::read: file handle is nullptr\");\n@@ -635,7 +635,7 @@ class CAutoFile\n         }\n     }\n \n-    void write(const char* pch, size_t nSize)\n+    void write(const uint8_t* pch, size_t nSize)\n     {\n         if (!file)\n             throw std::ios_base::failure(\"CAutoFile::write: file handle is nullptr\");\n@@ -681,7 +681,7 @@ class CBufferedFile\n     uint64_t nReadPos;    //!< how many bytes have been read from this\n     uint64_t nReadLimit;  //!< up to which position we're allowed to read\n     uint64_t nRewind;     //!< how many bytes we guarantee to rewind\n-    std::vector<char> vchBuf; //!< the buffer\n+    std::vector<uint8_t> vchBuf; //!< the buffer\n \n protected:\n     //! read data from the source to fill the buffer\n@@ -736,7 +736,8 @@ class CBufferedFile\n     }\n \n     //! read a number of bytes\n-    void read(char *pch, size_t nSize) {\n+    void read(uint8_t* pch, size_t nSize)\n+    {\n         if (nSize + nReadPos > nReadLimit)\n             throw std::ios_base::failure(\"Read attempted past buffer limit\");\n         while (nSize > 0) {\n@@ -794,7 +795,8 @@ class CBufferedFile\n     }\n \n     //! search for a given byte in the stream, and remain positioned on it\n-    void FindByte(char ch) {\n+    void FindByte(uint8_t ch)\n+    {\n         while (true) {\n             if (nReadPos == nSrcPos)\n                 Fill();"
      },
      {
        "sha": "2bbbdcbfd7f70584692c07fcfb58d74f2ef119f0",
        "filename": "src/test/fuzz/autofile.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa4238e70ff7f1055044a746c1729e756be9a38e/src/test/fuzz/autofile.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa4238e70ff7f1055044a746c1729e756be9a38e/src/test/fuzz/autofile.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/autofile.cpp?ref=fa4238e70ff7f1055044a746c1729e756be9a38e",
        "patch": "@@ -25,14 +25,14 @@ FUZZ_TARGET(autofile)\n             [&] {\n                 std::array<uint8_t, 4096> arr{};\n                 try {\n-                    auto_file.read((char*)arr.data(), fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, 4096));\n+                    auto_file.read(arr.data(), fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, 4096));\n                 } catch (const std::ios_base::failure&) {\n                 }\n             },\n             [&] {\n                 const std::array<uint8_t, 4096> arr{};\n                 try {\n-                    auto_file.write((const char*)arr.data(), fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, 4096));\n+                    auto_file.write(arr.data(), fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, 4096));\n                 } catch (const std::ios_base::failure&) {\n                 }\n             },"
      },
      {
        "sha": "0924c60cd2eb9226d93c611a429d3d251ec512da",
        "filename": "src/test/fuzz/buffered_file.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa4238e70ff7f1055044a746c1729e756be9a38e/src/test/fuzz/buffered_file.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa4238e70ff7f1055044a746c1729e756be9a38e/src/test/fuzz/buffered_file.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/buffered_file.cpp?ref=fa4238e70ff7f1055044a746c1729e756be9a38e",
        "patch": "@@ -35,7 +35,7 @@ FUZZ_TARGET(buffered_file)\n                 [&] {\n                     std::array<uint8_t, 4096> arr{};\n                     try {\n-                        opt_buffered_file->read((char*)arr.data(), fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, 4096));\n+                        opt_buffered_file->read(arr.data(), fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, 4096));\n                     } catch (const std::ios_base::failure&) {\n                     }\n                 },\n@@ -53,7 +53,7 @@ FUZZ_TARGET(buffered_file)\n                         return;\n                     }\n                     try {\n-                        opt_buffered_file->FindByte(fuzzed_data_provider.ConsumeIntegral<char>());\n+                        opt_buffered_file->FindByte(fuzzed_data_provider.ConsumeIntegral<uint8_t>());\n                     } catch (const std::ios_base::failure&) {\n                     }\n                 },"
      },
      {
        "sha": "5f898fa03a339b5a6c9481f1849ee3d041645442",
        "filename": "src/test/fuzz/integer.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa4238e70ff7f1055044a746c1729e756be9a38e/src/test/fuzz/integer.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa4238e70ff7f1055044a746c1729e756be9a38e/src/test/fuzz/integer.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/integer.cpp?ref=fa4238e70ff7f1055044a746c1729e756be9a38e",
        "patch": "@@ -209,11 +209,6 @@ FUZZ_TARGET_INIT(integer, initialize_integer)\n         stream >> deserialized_i8;\n         assert(i8 == deserialized_i8 && stream.empty());\n \n-        char deserialized_ch;\n-        stream << ch;\n-        stream >> deserialized_ch;\n-        assert(ch == deserialized_ch && stream.empty());\n-\n         bool deserialized_b;\n         stream << b;\n         stream >> deserialized_b;"
      },
      {
        "sha": "432df8543b67bdf69e53c8bc211dc642adcc4b14",
        "filename": "src/test/fuzz/util.h",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa4238e70ff7f1055044a746c1729e756be9a38e/src/test/fuzz/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa4238e70ff7f1055044a746c1729e756be9a38e/src/test/fuzz/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/util.h?ref=fa4238e70ff7f1055044a746c1729e756be9a38e",
        "patch": "@@ -337,7 +337,6 @@ void WriteToStream(FuzzedDataProvider& fuzzed_data_provider, Stream& stream) noe\n             CallOneOf(\n                 fuzzed_data_provider,\n                 WRITE_TO_STREAM_CASE(bool, fuzzed_data_provider.ConsumeBool()),\n-                WRITE_TO_STREAM_CASE(char, fuzzed_data_provider.ConsumeIntegral<char>()),\n                 WRITE_TO_STREAM_CASE(int8_t, fuzzed_data_provider.ConsumeIntegral<int8_t>()),\n                 WRITE_TO_STREAM_CASE(uint8_t, fuzzed_data_provider.ConsumeIntegral<uint8_t>()),\n                 WRITE_TO_STREAM_CASE(int16_t, fuzzed_data_provider.ConsumeIntegral<int16_t>()),\n@@ -347,7 +346,7 @@ void WriteToStream(FuzzedDataProvider& fuzzed_data_provider, Stream& stream) noe\n                 WRITE_TO_STREAM_CASE(int64_t, fuzzed_data_provider.ConsumeIntegral<int64_t>()),\n                 WRITE_TO_STREAM_CASE(uint64_t, fuzzed_data_provider.ConsumeIntegral<uint64_t>()),\n                 WRITE_TO_STREAM_CASE(std::string, fuzzed_data_provider.ConsumeRandomLengthString(32)),\n-                WRITE_TO_STREAM_CASE(std::vector<char>, ConsumeRandomLengthIntegralVector<char>(fuzzed_data_provider)));\n+                WRITE_TO_STREAM_CASE(std::vector<uint8_t>, ConsumeRandomLengthIntegralVector<uint8_t>(fuzzed_data_provider)));\n         } catch (const std::ios_base::failure&) {\n             break;\n         }\n@@ -367,7 +366,6 @@ void ReadFromStream(FuzzedDataProvider& fuzzed_data_provider, Stream& stream) no\n             CallOneOf(\n                 fuzzed_data_provider,\n                 READ_FROM_STREAM_CASE(bool),\n-                READ_FROM_STREAM_CASE(char),\n                 READ_FROM_STREAM_CASE(int8_t),\n                 READ_FROM_STREAM_CASE(uint8_t),\n                 READ_FROM_STREAM_CASE(int16_t),\n@@ -377,7 +375,7 @@ void ReadFromStream(FuzzedDataProvider& fuzzed_data_provider, Stream& stream) no\n                 READ_FROM_STREAM_CASE(int64_t),\n                 READ_FROM_STREAM_CASE(uint64_t),\n                 READ_FROM_STREAM_CASE(std::string),\n-                READ_FROM_STREAM_CASE(std::vector<char>));\n+                READ_FROM_STREAM_CASE(std::vector<uint8_t>));\n         } catch (const std::ios_base::failure&) {\n             break;\n         }"
      },
      {
        "sha": "9b9f6e4bce03595a810088ff24d1ebb143e0b4f9",
        "filename": "src/test/serialize_tests.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa4238e70ff7f1055044a746c1729e756be9a38e/src/test/serialize_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa4238e70ff7f1055044a746c1729e756be9a38e/src/test/serialize_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/serialize_tests.cpp?ref=fa4238e70ff7f1055044a746c1729e756be9a38e",
        "patch": "@@ -61,7 +61,7 @@ class CSerializeMethodsTestMany : public CSerializeMethodsTestSingle\n \n BOOST_AUTO_TEST_CASE(sizes)\n {\n-    BOOST_CHECK_EQUAL(sizeof(char), GetSerializeSize(char(0), 0));\n+    BOOST_CHECK_EQUAL(sizeof(unsigned char), GetSerializeSize((unsigned char)0, 0));\n     BOOST_CHECK_EQUAL(sizeof(int8_t), GetSerializeSize(int8_t(0), 0));\n     BOOST_CHECK_EQUAL(sizeof(uint8_t), GetSerializeSize(uint8_t(0), 0));\n     BOOST_CHECK_EQUAL(sizeof(int16_t), GetSerializeSize(int16_t(0), 0));\n@@ -74,7 +74,7 @@ BOOST_AUTO_TEST_CASE(sizes)\n     BOOST_CHECK_EQUAL(sizeof(uint8_t), GetSerializeSize(bool(0), 0));\n \n     // Sanity-check GetSerializeSize and c++ type matching\n-    BOOST_CHECK_EQUAL(GetSerializeSize(char(0), 0), 1U);\n+    BOOST_CHECK_EQUAL(GetSerializeSize((unsigned char)0, 0), 1U);\n     BOOST_CHECK_EQUAL(GetSerializeSize(int8_t(0), 0), 1U);\n     BOOST_CHECK_EQUAL(GetSerializeSize(uint8_t(0), 0), 1U);\n     BOOST_CHECK_EQUAL(GetSerializeSize(int16_t(0), 0), 2U);\n@@ -186,32 +186,32 @@ BOOST_AUTO_TEST_CASE(noncanonical)\n     std::vector<char>::size_type n;\n \n     // zero encoded with three bytes:\n-    ss.write(\"\\xfd\\x00\\x00\", 3);\n+    ss.write(Uint8Ptr(\"\\xfd\\x00\\x00\"), 3);\n     BOOST_CHECK_EXCEPTION(ReadCompactSize(ss), std::ios_base::failure, isCanonicalException);\n \n     // 0xfc encoded with three bytes:\n-    ss.write(\"\\xfd\\xfc\\x00\", 3);\n+    ss.write(Uint8Ptr(\"\\xfd\\xfc\\x00\"), 3);\n     BOOST_CHECK_EXCEPTION(ReadCompactSize(ss), std::ios_base::failure, isCanonicalException);\n \n     // 0xfd encoded with three bytes is OK:\n-    ss.write(\"\\xfd\\xfd\\x00\", 3);\n+    ss.write(Uint8Ptr(\"\\xfd\\xfd\\x00\"), 3);\n     n = ReadCompactSize(ss);\n     BOOST_CHECK(n == 0xfd);\n \n     // zero encoded with five bytes:\n-    ss.write(\"\\xfe\\x00\\x00\\x00\\x00\", 5);\n+    ss.write(Uint8Ptr(\"\\xfe\\x00\\x00\\x00\\x00\"), 5);\n     BOOST_CHECK_EXCEPTION(ReadCompactSize(ss), std::ios_base::failure, isCanonicalException);\n \n     // 0xffff encoded with five bytes:\n-    ss.write(\"\\xfe\\xff\\xff\\x00\\x00\", 5);\n+    ss.write(Uint8Ptr(\"\\xfe\\xff\\xff\\x00\\x00\"), 5);\n     BOOST_CHECK_EXCEPTION(ReadCompactSize(ss), std::ios_base::failure, isCanonicalException);\n \n     // zero encoded with nine bytes:\n-    ss.write(\"\\xff\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\", 9);\n+    ss.write(Uint8Ptr(\"\\xff\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"), 9);\n     BOOST_CHECK_EXCEPTION(ReadCompactSize(ss), std::ios_base::failure, isCanonicalException);\n \n     // 0x01ffffff encoded with nine bytes:\n-    ss.write(\"\\xff\\xff\\xff\\xff\\x01\\x00\\x00\\x00\\x00\", 9);\n+    ss.write(Uint8Ptr(\"\\xff\\xff\\xff\\xff\\x01\\x00\\x00\\x00\\x00\"), 9);\n     BOOST_CHECK_EXCEPTION(ReadCompactSize(ss), std::ios_base::failure, isCanonicalException);\n }\n \n@@ -221,7 +221,7 @@ BOOST_AUTO_TEST_CASE(insert_delete)\n     CDataStream ss(SER_DISK, 0);\n     BOOST_CHECK_EQUAL(ss.size(), 0U);\n \n-    ss.write(\"\\x00\\x01\\x02\\xff\", 4);\n+    ss.write(Uint8Ptr(\"\\x00\\x01\\x02\\xff\"), 4);\n     BOOST_CHECK_EQUAL(ss.size(), 4U);\n \n     char c = (char)11;"
      },
      {
        "sha": "368ec657d4f72a07c270c8b9692fc4294ea22817",
        "filename": "src/uint256.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa4238e70ff7f1055044a746c1729e756be9a38e/src/uint256.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa4238e70ff7f1055044a746c1729e756be9a38e/src/uint256.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/uint256.h?ref=fa4238e70ff7f1055044a746c1729e756be9a38e",
        "patch": "@@ -96,13 +96,13 @@ class base_blob\n     template<typename Stream>\n     void Serialize(Stream& s) const\n     {\n-        s.write((char*)m_data, sizeof(m_data));\n+        s.write(m_data, sizeof(m_data));\n     }\n \n     template<typename Stream>\n     void Unserialize(Stream& s)\n     {\n-        s.read((char*)m_data, sizeof(m_data));\n+        s.read(m_data, sizeof(m_data));\n     }\n };\n "
      },
      {
        "sha": "f076de57fd07cb6426905a29ed6d53cb48d17cb6",
        "filename": "src/wallet/bdb.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa4238e70ff7f1055044a746c1729e756be9a38e/src/wallet/bdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa4238e70ff7f1055044a746c1729e756be9a38e/src/wallet/bdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/bdb.cpp?ref=fa4238e70ff7f1055044a746c1729e756be9a38e",
        "patch": "@@ -680,10 +680,10 @@ bool BerkeleyBatch::ReadAtCursor(CDataStream& ssKey, CDataStream& ssValue, bool&\n     // Convert to streams\n     ssKey.SetType(SER_DISK);\n     ssKey.clear();\n-    ssKey.write((char*)datKey.get_data(), datKey.get_size());\n+    ssKey.write(Uint8Ptr(datKey.get_data()), datKey.get_size());\n     ssValue.SetType(SER_DISK);\n     ssValue.clear();\n-    ssValue.write((char*)datValue.get_data(), datValue.get_size());\n+    ssValue.write(Uint8Ptr(datValue.get_data()), datValue.get_size());\n     return true;\n }\n \n@@ -755,7 +755,7 @@ bool BerkeleyBatch::ReadKey(CDataStream&& key, CDataStream& value)\n     SafeDbt datValue;\n     int ret = pdb->get(activeTxn, datKey, datValue, 0);\n     if (ret == 0 && datValue.get_data() != nullptr) {\n-        value.write((char*)datValue.get_data(), datValue.get_size());\n+        value.write(Uint8Ptr(datValue.get_data()), datValue.get_size());\n         return true;\n     }\n     return false;"
      },
      {
        "sha": "0ddf28cad31516870d71ed367c271bdfe17fbe1b",
        "filename": "src/wallet/dump.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa4238e70ff7f1055044a746c1729e756be9a38e/src/wallet/dump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa4238e70ff7f1055044a746c1729e756be9a38e/src/wallet/dump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/dump.cpp?ref=fa4238e70ff7f1055044a746c1729e756be9a38e",
        "patch": "@@ -46,12 +46,12 @@ bool DumpWallet(CWallet& wallet, bilingual_str& error)\n     // Write out a magic string with version\n     std::string line = strprintf(\"%s,%u\\n\", DUMP_MAGIC, DUMP_VERSION);\n     dump_file.write(line.data(), line.size());\n-    hasher.write(line.data(), line.size());\n+    hasher.write(Uint8Ptr(line.data()), line.size());\n \n     // Write out the file format\n     line = strprintf(\"%s,%s\\n\", \"format\", db.Format());\n     dump_file.write(line.data(), line.size());\n-    hasher.write(line.data(), line.size());\n+    hasher.write(Uint8Ptr(line.data()), line.size());\n \n     if (ret) {\n \n@@ -72,7 +72,7 @@ bool DumpWallet(CWallet& wallet, bilingual_str& error)\n             std::string value_str = HexStr(ss_value);\n             line = strprintf(\"%s,%s\\n\", key_str, value_str);\n             dump_file.write(line.data(), line.size());\n-            hasher.write(line.data(), line.size());\n+            hasher.write(Uint8Ptr(line.data()), line.size());\n         }\n     }\n \n@@ -149,7 +149,7 @@ bool CreateFromDump(const std::string& name, const fs::path& wallet_path, biling\n         return false;\n     }\n     std::string magic_hasher_line = strprintf(\"%s,%s\\n\", magic_key, version_value);\n-    hasher.write(magic_hasher_line.data(), magic_hasher_line.size());\n+    hasher.write(Uint8Ptr(magic_hasher_line.data()), magic_hasher_line.size());\n \n     // Get the stored file format\n     std::string format_key;\n@@ -180,7 +180,7 @@ bool CreateFromDump(const std::string& name, const fs::path& wallet_path, biling\n         warnings.push_back(strprintf(_(\"Warning: Dumpfile wallet format \\\"%s\\\" does not match command line specified format \\\"%s\\\".\"), format_value, file_format));\n     }\n     std::string format_hasher_line = strprintf(\"%s,%s\\n\", format_key, format_value);\n-    hasher.write(format_hasher_line.data(), format_hasher_line.size());\n+    hasher.write(Uint8Ptr(format_hasher_line.data()), format_hasher_line.size());\n \n     DatabaseOptions options;\n     DatabaseStatus status;\n@@ -219,7 +219,7 @@ bool CreateFromDump(const std::string& name, const fs::path& wallet_path, biling\n             }\n \n             std::string line = strprintf(\"%s,%s\\n\", key, value);\n-            hasher.write(line.data(), line.size());\n+            hasher.write(Uint8Ptr(line.data()), line.size());\n \n             if (key.empty() || value.empty()) {\n                 continue;"
      },
      {
        "sha": "6eb4000cbaace460848d4c819934228504053002",
        "filename": "src/wallet/sqlite.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa4238e70ff7f1055044a746c1729e756be9a38e/src/wallet/sqlite.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa4238e70ff7f1055044a746c1729e756be9a38e/src/wallet/sqlite.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/sqlite.cpp?ref=fa4238e70ff7f1055044a746c1729e756be9a38e",
        "patch": "@@ -394,7 +394,7 @@ bool SQLiteBatch::ReadKey(CDataStream&& key, CDataStream& value)\n         return false;\n     }\n     // Leftmost column in result is index 0\n-    const char* data = reinterpret_cast<const char*>(sqlite3_column_blob(m_read_stmt, 0));\n+    const uint8_t* data{Uint8Ptr(sqlite3_column_blob(m_read_stmt, 0))};\n     int data_size = sqlite3_column_bytes(m_read_stmt, 0);\n     value.write(data, data_size);\n \n@@ -511,10 +511,10 @@ bool SQLiteBatch::ReadAtCursor(CDataStream& key, CDataStream& value, bool& compl\n     }\n \n     // Leftmost column in result is index 0\n-    const char* key_data = reinterpret_cast<const char*>(sqlite3_column_blob(m_cursor_stmt, 0));\n+    const uint8_t* key_data{Uint8Ptr(sqlite3_column_blob(m_cursor_stmt, 0))};\n     int key_data_size = sqlite3_column_bytes(m_cursor_stmt, 0);\n     key.write(key_data, key_data_size);\n-    const char* value_data = reinterpret_cast<const char*>(sqlite3_column_blob(m_cursor_stmt, 1));\n+    const uint8_t* value_data{Uint8Ptr(sqlite3_column_blob(m_cursor_stmt, 1))};\n     int value_data_size = sqlite3_column_bytes(m_cursor_stmt, 1);\n     value.write(value_data, value_data_size);\n     return true;"
      }
    ]
  },
  {
    "sha": "fa1db77edfcb1a004845cd69e45fe7f1074b1e71",
    "node_id": "C_kwDOABII59oAKGZhMWRiNzdlZGZjYjFhMDA0ODQ1Y2Q2OWU0NWZlN2YxMDc0YjFlNzE",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-11-02T13:12:02Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-11-02T13:02:42Z"
      },
      "message": "Remove MakeUCharSpan where not needed",
      "tree": {
        "sha": "e023a42a51dd667e024cfbc48778a6bd8906dfa0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e023a42a51dd667e024cfbc48778a6bd8906dfa0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa1db77edfcb1a004845cd69e45fe7f1074b1e71",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUiqhgv/epsr86F4Fo2xQSlwKvOAjqZu8h0fMZT/2b1/JEKnkC1JBKxrMORTDqFI\ni4XqlAbM6+85032/ZA4CbYfPo5ZDbmjr/ybPoi/noP3dwklxfkehTMP7a+vN9xUR\nAnl6O2thQy1LvzzEn08U3IooM491mDxxIfNS0cOgX017NKO9UC40ZMeS6GRp4oUp\nHl0tu7Nuh1Z4XXAiOg7oW1c2hTgmCZZ7CmR+dsCfrmIcckzpbWTB8o7PYrNqntoD\nM4ZTEFLmSZluNdDZiA+VRt0yMGZVRWiCIkepKUkGfEjU/7GMvYtV/wYVIkMqhatR\np9vxnSaONcQTMRU+biYtd8lyTeHZ62lNcbai0KUV8wl7fO8PZKCbjJvMYmF8evx/\nNf5gBHt4t9vTMLU+nkrSwaRMQ203QnVLHKHWVYsoECwS7NEUgf76pEQ9Qw5SUL0X\n0Qw8ya8TiIgDT+UC05oIccGwjglvysKVw7BgTryS4zOlwFSVZLjqRSW3rIjYnL/v\nDAZOyZ94\n=BFJ0\n-----END PGP SIGNATURE-----",
        "payload": "tree e023a42a51dd667e024cfbc48778a6bd8906dfa0\nparent fa4238e70ff7f1055044a746c1729e756be9a38e\nauthor MarcoFalke <falke.marco@gmail.com> 1635858722 +0100\ncommitter MarcoFalke <falke.marco@gmail.com> 1635858162 +0100\n\nRemove MakeUCharSpan where not needed\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa1db77edfcb1a004845cd69e45fe7f1074b1e71",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa1db77edfcb1a004845cd69e45fe7f1074b1e71",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa1db77edfcb1a004845cd69e45fe7f1074b1e71/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa4238e70ff7f1055044a746c1729e756be9a38e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa4238e70ff7f1055044a746c1729e756be9a38e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa4238e70ff7f1055044a746c1729e756be9a38e"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 7,
      "deletions": 7
    },
    "files": [
      {
        "sha": "3c17c385928fe418fb576c88b87a19e7ed28ddf8",
        "filename": "src/index/coinstatsindex.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa1db77edfcb1a004845cd69e45fe7f1074b1e71/src/index/coinstatsindex.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa1db77edfcb1a004845cd69e45fe7f1074b1e71/src/index/coinstatsindex.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/coinstatsindex.cpp?ref=fa1db77edfcb1a004845cd69e45fe7f1074b1e71",
        "patch": "@@ -158,7 +158,7 @@ bool CoinStatsIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n                     continue;\n                 }\n \n-                m_muhash.Insert(MakeUCharSpan(TxOutSer(outpoint, coin)));\n+                m_muhash.Insert(TxOutSer(outpoint, coin));\n \n                 if (tx->IsCoinBase()) {\n                     m_total_coinbase_amount += coin.out.nValue;\n@@ -179,7 +179,7 @@ bool CoinStatsIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n                     Coin coin{tx_undo.vprevout[j]};\n                     COutPoint outpoint{tx->vin[j].prevout.hash, tx->vin[j].prevout.n};\n \n-                    m_muhash.Remove(MakeUCharSpan(TxOutSer(outpoint, coin)));\n+                    m_muhash.Remove(TxOutSer(outpoint, coin));\n \n                     m_total_prevout_spent_amount += coin.out.nValue;\n \n@@ -421,7 +421,7 @@ bool CoinStatsIndex::ReverseBlock(const CBlock& block, const CBlockIndex* pindex\n                 continue;\n             }\n \n-            m_muhash.Remove(MakeUCharSpan(TxOutSer(outpoint, coin)));\n+            m_muhash.Remove(TxOutSer(outpoint, coin));\n \n             if (tx->IsCoinBase()) {\n                 m_total_coinbase_amount -= coin.out.nValue;\n@@ -442,7 +442,7 @@ bool CoinStatsIndex::ReverseBlock(const CBlock& block, const CBlockIndex* pindex\n                 Coin coin{tx_undo.vprevout[j]};\n                 COutPoint outpoint{tx->vin[j].prevout.hash, tx->vin[j].prevout.n};\n \n-                m_muhash.Insert(MakeUCharSpan(TxOutSer(outpoint, coin)));\n+                m_muhash.Insert(TxOutSer(outpoint, coin));\n \n                 m_total_prevout_spent_amount -= coin.out.nValue;\n "
      },
      {
        "sha": "33fd7af4a196276681662f40d24294765528f074",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa1db77edfcb1a004845cd69e45fe7f1074b1e71/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa1db77edfcb1a004845cd69e45fe7f1074b1e71/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=fa1db77edfcb1a004845cd69e45fe7f1074b1e71",
        "patch": "@@ -4108,7 +4108,7 @@ bool PeerManagerImpl::ProcessMessages(CNode* pfrom, std::atomic<bool>& interrupt\n     );\n \n     if (gArgs.GetBoolArg(\"-capturemessages\", false)) {\n-        CaptureMessage(pfrom->addr, msg.m_command, MakeUCharSpan(msg.m_recv), /* incoming */ true);\n+        CaptureMessage(pfrom->addr, msg.m_command, msg.m_recv, /* incoming */ true);\n     }\n \n     msg.SetVersion(pfrom->GetCommonVersion());"
      },
      {
        "sha": "a1f35db99215aaf53b1bb030ebf9e207c5976fac",
        "filename": "src/node/coinstats.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa1db77edfcb1a004845cd69e45fe7f1074b1e71/src/node/coinstats.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa1db77edfcb1a004845cd69e45fe7f1074b1e71/src/node/coinstats.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/coinstats.cpp?ref=fa1db77edfcb1a004845cd69e45fe7f1074b1e71",
        "patch": "@@ -72,7 +72,7 @@ static void ApplyHash(MuHash3072& muhash, const uint256& hash, const std::map<ui\n     for (auto it = outputs.begin(); it != outputs.end(); ++it) {\n         COutPoint outpoint = COutPoint(hash, it->first);\n         Coin coin = it->second;\n-        muhash.Insert(MakeUCharSpan(TxOutSer(outpoint, coin)));\n+        muhash.Insert(TxOutSer(outpoint, coin));\n     }\n }\n "
      },
      {
        "sha": "55075d93a194dd5b181618eed8457032e2912695",
        "filename": "src/test/fuzz/p2p_transport_serialization.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa1db77edfcb1a004845cd69e45fe7f1074b1e71/src/test/fuzz/p2p_transport_serialization.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa1db77edfcb1a004845cd69e45fe7f1074b1e71/src/test/fuzz/p2p_transport_serialization.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/p2p_transport_serialization.cpp?ref=fa1db77edfcb1a004845cd69e45fe7f1074b1e71",
        "patch": "@@ -76,7 +76,7 @@ FUZZ_TARGET_INIT(p2p_transport_serialization, initialize_p2p_transport_serializa\n             assert(msg.m_time == m_time);\n \n             std::vector<unsigned char> header;\n-            auto msg2 = CNetMsgMaker{msg.m_recv.GetVersion()}.Make(msg.m_command, MakeUCharSpan(msg.m_recv));\n+            auto msg2 = CNetMsgMaker{msg.m_recv.GetVersion()}.Make(msg.m_command, msg.m_recv);\n             serializer.prepareForTransport(msg2, header);\n         }\n     }"
      }
    ]
  }
]