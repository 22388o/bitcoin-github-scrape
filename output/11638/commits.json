[
  {
    "sha": "2904e301c5b5bae917f5c199dbabee415915debb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyOTA0ZTMwMWM1YjViYWU5MTdmNWMxOTlkYmFiZWU0MTU5MTVkZWJi",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-10-17T02:31:18Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-11-08T20:29:27Z"
      },
      "message": "[tests] Remove dead code from mininode.py\n\nRemoves the dead deliver_sleep_time and EarlyDisconnectError code",
      "tree": {
        "sha": "cd9ccd9d0e8da351d060435d3c77fe9a08c54633",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cd9ccd9d0e8da351d060435d3c77fe9a08c54633"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2904e301c5b5bae917f5c199dbabee415915debb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2904e301c5b5bae917f5c199dbabee415915debb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2904e301c5b5bae917f5c199dbabee415915debb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2904e301c5b5bae917f5c199dbabee415915debb/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f7388e93d3dd91a90239aedac4ec58404f103a2e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f7388e93d3dd91a90239aedac4ec58404f103a2e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f7388e93d3dd91a90239aedac4ec58404f103a2e"
      }
    ],
    "stats": {
      "total": 37,
      "additions": 5,
      "deletions": 32
    },
    "files": [
      {
        "sha": "49dc644ac14dae72cff1e9fcd02bfc77f28905e2",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 5,
        "deletions": 32,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2904e301c5b5bae917f5c199dbabee415915debb/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2904e301c5b5bae917f5c199dbabee415915debb/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=2904e301c5b5bae917f5c199dbabee415915debb",
        "patch": "@@ -1458,9 +1458,7 @@ class NodeConnCB():\n     \"\"\"Callback and helper functions for P2P connection to a bitcoind node.\n \n     Individual testcases should subclass this and override the on_* methods\n-    if they want to alter message handling behaviour.\n-    \"\"\"\n-\n+    if they want to alter message handling behaviour.\"\"\"\n     def __init__(self):\n         # Track whether we have a P2P connection open to the node\n         self.connected = False\n@@ -1474,25 +1472,13 @@ def __init__(self):\n         # A count of the number of ping messages we've sent to the node\n         self.ping_counter = 1\n \n-        # deliver_sleep_time is helpful for debugging race conditions in p2p\n-        # tests; it causes message delivery to sleep for the specified time\n-        # before acquiring the global lock and delivering the next message.\n-        self.deliver_sleep_time = None\n-\n     # Message receiving methods\n \n     def deliver(self, conn, message):\n         \"\"\"Receive message and dispatch message to appropriate callback.\n \n         We keep a count of how many of each message type has been received\n-        and the most recent message of each type.\n-\n-        Optionally waits for deliver_sleep_time before dispatching message.\n-        \"\"\"\n-\n-        deliver_sleep = self.get_deliver_sleep_time()\n-        if deliver_sleep is not None:\n-            time.sleep(deliver_sleep)\n+        and the most recent message of each type.\"\"\"\n         with mininode_lock:\n             try:\n                 command = message.command.decode('ascii')\n@@ -1504,10 +1490,6 @@ def deliver(self, conn, message):\n                                                     sys.exc_info()[0]))\n                 raise\n \n-    def get_deliver_sleep_time(self):\n-        with mininode_lock:\n-            return self.deliver_sleep_time\n-\n     # Callback methods. Can be overridden by subclasses in individual test\n     # cases to provide custom message handling behaviour.\n \n@@ -1616,9 +1598,10 @@ def sync_with_ping(self, timeout=60):\n         wait_until(test_function, timeout=timeout, lock=mininode_lock)\n         self.ping_counter += 1\n \n-# The actual NodeConn class\n-# This class provides an interface for a p2p connection to a specified node\n class NodeConn(asyncore.dispatcher):\n+    \"\"\"The actual NodeConn class\n+\n+    This class provides an interface for a p2p connection to a specified node.\"\"\"\n     messagemap = {\n         b\"version\": msg_version,\n         b\"verack\": msg_verack,\n@@ -1838,13 +1821,3 @@ def run(self):\n             [ obj.handle_close() for obj in disconnected ]\n             asyncore.loop(0.1, use_poll=True, map=mininode_socket_map, count=1)\n         logger.debug(\"Network thread closing\")\n-\n-\n-# An exception we can raise if we detect a potential disconnect\n-# (p2p or rpc) before the test is complete\n-class EarlyDisconnectError(Exception):\n-    def __init__(self, value):\n-        self.value = value\n-\n-    def __str__(self):\n-        return repr(self.value)"
      }
    ]
  },
  {
    "sha": "c0b1274705f89de86db90bb31d6eb2164639dded",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMGIxMjc0NzA1Zjg5ZGU4NmRiOTBiYjMxZDZlYjIxNjQ2MzlkZGVk",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-10-17T11:57:37Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-11-08T20:30:44Z"
      },
      "message": "[tests] Remove support for bre-BIP31 ping messages\n\nBIP31 support was added to Bitcoin Core in version 0.6.1. Our test\nframework is incompatible with Bitcoin Core versions that old, so remove\nall special logic for handling pre-BIP31 pings.",
      "tree": {
        "sha": "f1037d744e4a5a00a7cd68c3f515f0436895ce09",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f1037d744e4a5a00a7cd68c3f515f0436895ce09"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c0b1274705f89de86db90bb31d6eb2164639dded",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c0b1274705f89de86db90bb31d6eb2164639dded",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c0b1274705f89de86db90bb31d6eb2164639dded",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c0b1274705f89de86db90bb31d6eb2164639dded/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2904e301c5b5bae917f5c199dbabee415915debb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2904e301c5b5bae917f5c199dbabee415915debb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2904e301c5b5bae917f5c199dbabee415915debb"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 1,
      "deletions": 22
    },
    "files": [
      {
        "sha": "0028f81173db0187e6bea66b29269c9a06cb7b04",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 1,
        "deletions": 22,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0b1274705f89de86db90bb31d6eb2164639dded/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0b1274705f89de86db90bb31d6eb2164639dded/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=c0b1274705f89de86db90bb31d6eb2164639dded",
        "patch": "@@ -37,7 +37,6 @@\n from test_framework.siphash import siphash256\n from test_framework.util import hex_str_to_bytes, bytes_to_hex_str, wait_until\n \n-BIP0031_VERSION = 60000\n MY_VERSION = 70014  # past bip-31 for ping/pong\n MY_SUBVERSION = b\"/python-mininode-tester:0.0.3/\"\n MY_RELAY = 1 # from version 70001 onwards, fRelay should be appended to version messages (BIP37)\n@@ -1195,22 +1194,6 @@ def __repr__(self):\n         return \"msg_getaddr()\"\n \n \n-class msg_ping_prebip31():\n-    command = b\"ping\"\n-\n-    def __init__(self):\n-        pass\n-\n-    def deserialize(self, f):\n-        pass\n-\n-    def serialize(self):\n-        return b\"\"\n-\n-    def __repr__(self):\n-        return \"msg_ping() (pre-bip31)\"\n-\n-\n class msg_ping():\n     command = b\"ping\"\n \n@@ -1528,8 +1511,7 @@ def on_inv(self, conn, message):\n             conn.send_message(want)\n \n     def on_ping(self, conn, message):\n-        if conn.ver_send > BIP0031_VERSION:\n-            conn.send_message(msg_pong(message.nonce))\n+        conn.send_message(msg_pong(message.nonce))\n \n     def on_verack(self, conn, message):\n         conn.ver_recv = conn.ver_send\n@@ -1786,9 +1768,6 @@ def send_message(self, message, pushbuf=False):\n             self.last_sent = time.time()\n \n     def got_message(self, message):\n-        if message.command == b\"version\":\n-            if message.nVersion <= BIP0031_VERSION:\n-                self.messagemap[b'ping'] = msg_ping_prebip31\n         if self.last_sent + 30 * 60 < time.time():\n             self.send_message(self.messagemap[b'ping']())\n         self._log_message(\"receive\", message)"
      }
    ]
  },
  {
    "sha": "3858aabbd084b2cc4534c40a178bbcc22fb82968",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozODU4YWFiYmQwODRiMmNjNDUzNGM0MGExNzhiYmNjMjJmYjgyOTY4",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-10-17T15:01:37Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-11-08T20:43:24Z"
      },
      "message": "[tests] Remove support for p2p alert messages\n\nAlert messages were removed in p2p version 70013 (Bitcoin Core V0.13.0)",
      "tree": {
        "sha": "7c1b2350b7885e1bb4a6f2a1562375a2a0e2a4d8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7c1b2350b7885e1bb4a6f2a1562375a2a0e2a4d8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3858aabbd084b2cc4534c40a178bbcc22fb82968",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3858aabbd084b2cc4534c40a178bbcc22fb82968",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3858aabbd084b2cc4534c40a178bbcc22fb82968",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3858aabbd084b2cc4534c40a178bbcc22fb82968/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c0b1274705f89de86db90bb31d6eb2164639dded",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c0b1274705f89de86db90bb31d6eb2164639dded",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c0b1274705f89de86db90bb31d6eb2164639dded"
      }
    ],
    "stats": {
      "total": 97,
      "additions": 0,
      "deletions": 97
    },
    "files": [
      {
        "sha": "a6e47b5df6fbf61e6c118fb2a6c3a86ee4fb8ce2",
        "filename": "test/functional/p2p-leaktests.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3858aabbd084b2cc4534c40a178bbcc22fb82968/test/functional/p2p-leaktests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3858aabbd084b2cc4534c40a178bbcc22fb82968/test/functional/p2p-leaktests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-leaktests.py?ref=3858aabbd084b2cc4534c40a178bbcc22fb82968",
        "patch": "@@ -39,7 +39,6 @@ def on_verack(self, conn, message): self.bad_message(message)\n     def on_reject(self, conn, message): self.bad_message(message)\n     def on_inv(self, conn, message): self.bad_message(message)\n     def on_addr(self, conn, message): self.bad_message(message)\n-    def on_alert(self, conn, message): self.bad_message(message)\n     def on_getdata(self, conn, message): self.bad_message(message)\n     def on_getblocks(self, conn, message): self.bad_message(message)\n     def on_tx(self, conn, message): self.bad_message(message)"
      },
      {
        "sha": "805d0886168b8a94be0014ad521b3def2deb9890",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 0,
        "deletions": 96,
        "changes": 96,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3858aabbd084b2cc4534c40a178bbcc22fb82968/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3858aabbd084b2cc4534c40a178bbcc22fb82968/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=3858aabbd084b2cc4534c40a178bbcc22fb82968",
        "patch": "@@ -665,81 +665,6 @@ def __repr__(self):\n                time.ctime(self.nTime), self.nBits, self.nNonce, repr(self.vtx))\n \n \n-class CUnsignedAlert():\n-    def __init__(self):\n-        self.nVersion = 1\n-        self.nRelayUntil = 0\n-        self.nExpiration = 0\n-        self.nID = 0\n-        self.nCancel = 0\n-        self.setCancel = []\n-        self.nMinVer = 0\n-        self.nMaxVer = 0\n-        self.setSubVer = []\n-        self.nPriority = 0\n-        self.strComment = b\"\"\n-        self.strStatusBar = b\"\"\n-        self.strReserved = b\"\"\n-\n-    def deserialize(self, f):\n-        self.nVersion = struct.unpack(\"<i\", f.read(4))[0]\n-        self.nRelayUntil = struct.unpack(\"<q\", f.read(8))[0]\n-        self.nExpiration = struct.unpack(\"<q\", f.read(8))[0]\n-        self.nID = struct.unpack(\"<i\", f.read(4))[0]\n-        self.nCancel = struct.unpack(\"<i\", f.read(4))[0]\n-        self.setCancel = deser_int_vector(f)\n-        self.nMinVer = struct.unpack(\"<i\", f.read(4))[0]\n-        self.nMaxVer = struct.unpack(\"<i\", f.read(4))[0]\n-        self.setSubVer = deser_string_vector(f)\n-        self.nPriority = struct.unpack(\"<i\", f.read(4))[0]\n-        self.strComment = deser_string(f)\n-        self.strStatusBar = deser_string(f)\n-        self.strReserved = deser_string(f)\n-\n-    def serialize(self):\n-        r = b\"\"\n-        r += struct.pack(\"<i\", self.nVersion)\n-        r += struct.pack(\"<q\", self.nRelayUntil)\n-        r += struct.pack(\"<q\", self.nExpiration)\n-        r += struct.pack(\"<i\", self.nID)\n-        r += struct.pack(\"<i\", self.nCancel)\n-        r += ser_int_vector(self.setCancel)\n-        r += struct.pack(\"<i\", self.nMinVer)\n-        r += struct.pack(\"<i\", self.nMaxVer)\n-        r += ser_string_vector(self.setSubVer)\n-        r += struct.pack(\"<i\", self.nPriority)\n-        r += ser_string(self.strComment)\n-        r += ser_string(self.strStatusBar)\n-        r += ser_string(self.strReserved)\n-        return r\n-\n-    def __repr__(self):\n-        return \"CUnsignedAlert(nVersion %d, nRelayUntil %d, nExpiration %d, nID %d, nCancel %d, nMinVer %d, nMaxVer %d, nPriority %d, strComment %s, strStatusBar %s, strReserved %s)\" \\\n-            % (self.nVersion, self.nRelayUntil, self.nExpiration, self.nID,\n-               self.nCancel, self.nMinVer, self.nMaxVer, self.nPriority,\n-               self.strComment, self.strStatusBar, self.strReserved)\n-\n-\n-class CAlert():\n-    def __init__(self):\n-        self.vchMsg = b\"\"\n-        self.vchSig = b\"\"\n-\n-    def deserialize(self, f):\n-        self.vchMsg = deser_string(f)\n-        self.vchSig = deser_string(f)\n-\n-    def serialize(self):\n-        r = b\"\"\n-        r += ser_string(self.vchMsg)\n-        r += ser_string(self.vchSig)\n-        return r\n-\n-    def __repr__(self):\n-        return \"CAlert(vchMsg.sz %d, vchSig.sz %d)\" \\\n-            % (len(self.vchMsg), len(self.vchSig))\n-\n-\n class PrefilledTransaction():\n     def __init__(self, index=0, tx = None):\n         self.index = index\n@@ -1043,25 +968,6 @@ def __repr__(self):\n         return \"msg_addr(addrs=%s)\" % (repr(self.addrs))\n \n \n-class msg_alert():\n-    command = b\"alert\"\n-\n-    def __init__(self):\n-        self.alert = CAlert()\n-\n-    def deserialize(self, f):\n-        self.alert = CAlert()\n-        self.alert.deserialize(f)\n-\n-    def serialize(self):\n-        r = b\"\"\n-        r += self.alert.serialize()\n-        return r\n-\n-    def __repr__(self):\n-        return \"msg_alert(alert=%s)\" % (repr(self.alert), )\n-\n-\n class msg_inv():\n     command = b\"inv\"\n \n@@ -1484,7 +1390,6 @@ def on_close(self, conn):\n         self.connection = None\n \n     def on_addr(self, conn, message): pass\n-    def on_alert(self, conn, message): pass\n     def on_block(self, conn, message): pass\n     def on_blocktxn(self, conn, message): pass\n     def on_cmpctblock(self, conn, message): pass\n@@ -1588,7 +1493,6 @@ class NodeConn(asyncore.dispatcher):\n         b\"version\": msg_version,\n         b\"verack\": msg_verack,\n         b\"addr\": msg_addr,\n-        b\"alert\": msg_alert,\n         b\"inv\": msg_inv,\n         b\"getdata\": msg_getdata,\n         b\"getblocks\": msg_getblocks,"
      }
    ]
  },
  {
    "sha": "fb00c45c32ef061d7f16672bca170d47f1f0b772",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYjAwYzQ1YzMyZWYwNjFkN2YxNjY3MmJjYTE3MGQ0N2YxZjBiNzcy",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-10-17T14:59:20Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-11-08T20:43:45Z"
      },
      "message": "[tests] Explicitly disallow support for p2p versions below 60001\n\nThe mininode module includes code to support p2p versions below\n60001. However, the test_framework does not support versions\nof Bitcoin Core before V0.13.0. Remove code supporting\np2p versions before 60001 (which has never been run).",
      "tree": {
        "sha": "d48b5ca1c9572520eaf0c682eccc4cc61e5761d9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d48b5ca1c9572520eaf0c682eccc4cc61e5761d9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fb00c45c32ef061d7f16672bca170d47f1f0b772",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb00c45c32ef061d7f16672bca170d47f1f0b772",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fb00c45c32ef061d7f16672bca170d47f1f0b772",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb00c45c32ef061d7f16672bca170d47f1f0b772/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3858aabbd084b2cc4534c40a178bbcc22fb82968",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3858aabbd084b2cc4534c40a178bbcc22fb82968",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3858aabbd084b2cc4534c40a178bbcc22fb82968"
      }
    ],
    "stats": {
      "total": 68,
      "additions": 26,
      "deletions": 42
    },
    "files": [
      {
        "sha": "8fbc63fba4c59e82181b9b740ffb78dac6f60c51",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 26,
        "deletions": 42,
        "changes": 68,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb00c45c32ef061d7f16672bca170d47f1f0b772/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb00c45c32ef061d7f16672bca170d47f1f0b772/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=fb00c45c32ef061d7f16672bca170d47f1f0b772",
        "patch": "@@ -37,6 +37,7 @@\n from test_framework.siphash import siphash256\n from test_framework.util import hex_str_to_bytes, bytes_to_hex_str, wait_until\n \n+MIN_VERSION_SUPPORTED = 60001\n MY_VERSION = 70014  # past bip-31 for ping/pong\n MY_SUBVERSION = b\"/python-mininode-tester:0.0.3/\"\n MY_RELAY = 1 # from version 70001 onwards, fRelay should be appended to version messages (BIP37)\n@@ -1423,11 +1424,8 @@ def on_verack(self, conn, message):\n         self.verack_received = True\n \n     def on_version(self, conn, message):\n-        if message.nVersion >= 209:\n-            conn.send_message(msg_verack())\n-        conn.ver_send = min(MY_VERSION, message.nVersion)\n-        if message.nVersion < 209:\n-            conn.ver_recv = conn.ver_send\n+        assert message.nVersion >= MIN_VERSION_SUPPORTED, \"Version {} received. Test framework only supports versions greater than {}\".format(message.nVersion, MIN_VERSION_SUPPORTED)\n+        conn.send_message(msg_verack())\n         conn.nServices = message.nServices\n \n     # Connection helper methods\n@@ -1609,40 +1607,27 @@ def got_data(self):\n                     return\n                 if self.recvbuf[:4] != self.MAGIC_BYTES[self.network]:\n                     raise ValueError(\"got garbage %s\" % repr(self.recvbuf))\n-                if self.ver_recv < 209:\n-                    if len(self.recvbuf) < 4 + 12 + 4:\n-                        return\n-                    command = self.recvbuf[4:4+12].split(b\"\\x00\", 1)[0]\n-                    msglen = struct.unpack(\"<i\", self.recvbuf[4+12:4+12+4])[0]\n-                    checksum = None\n-                    if len(self.recvbuf) < 4 + 12 + 4 + msglen:\n-                        return\n-                    msg = self.recvbuf[4+12+4:4+12+4+msglen]\n-                    self.recvbuf = self.recvbuf[4+12+4+msglen:]\n-                else:\n-                    if len(self.recvbuf) < 4 + 12 + 4 + 4:\n-                        return\n-                    command = self.recvbuf[4:4+12].split(b\"\\x00\", 1)[0]\n-                    msglen = struct.unpack(\"<i\", self.recvbuf[4+12:4+12+4])[0]\n-                    checksum = self.recvbuf[4+12+4:4+12+4+4]\n-                    if len(self.recvbuf) < 4 + 12 + 4 + 4 + msglen:\n-                        return\n-                    msg = self.recvbuf[4+12+4+4:4+12+4+4+msglen]\n-                    th = sha256(msg)\n-                    h = sha256(th)\n-                    if checksum != h[:4]:\n-                        raise ValueError(\"got bad checksum \" + repr(self.recvbuf))\n-                    self.recvbuf = self.recvbuf[4+12+4+4+msglen:]\n-                if command in self.messagemap:\n-                    f = BytesIO(msg)\n-                    t = self.messagemap[command]()\n-                    t.deserialize(f)\n-                    self.got_message(t)\n-                else:\n-                    logger.warning(\"Received unknown command from %s:%d: '%s' %s\" % (self.dstaddr, self.dstport, command, repr(msg)))\n-                    raise ValueError(\"Unknown command: '%s'\" % (command))\n+                if len(self.recvbuf) < 4 + 12 + 4 + 4:\n+                    return\n+                command = self.recvbuf[4:4+12].split(b\"\\x00\", 1)[0]\n+                msglen = struct.unpack(\"<i\", self.recvbuf[4+12:4+12+4])[0]\n+                checksum = self.recvbuf[4+12+4:4+12+4+4]\n+                if len(self.recvbuf) < 4 + 12 + 4 + 4 + msglen:\n+                    return\n+                msg = self.recvbuf[4+12+4+4:4+12+4+4+msglen]\n+                th = sha256(msg)\n+                h = sha256(th)\n+                if checksum != h[:4]:\n+                    raise ValueError(\"got bad checksum \" + repr(self.recvbuf))\n+                self.recvbuf = self.recvbuf[4+12+4+4+msglen:]\n+                if command not in self.messagemap:\n+                    raise ValueError(\"Received unknown command from %s:%d: '%s' %s\" % (self.dstaddr, self.dstport, command, repr(msg)))\n+                f = BytesIO(msg)\n+                t = self.messagemap[command]()\n+                t.deserialize(f)\n+                self.got_message(t)\n         except Exception as e:\n-            logger.exception('got_data:', repr(e))\n+            logger.exception('Error reading message:', repr(e))\n             raise\n \n     def send_message(self, message, pushbuf=False):\n@@ -1655,10 +1640,9 @@ def send_message(self, message, pushbuf=False):\n         tmsg += command\n         tmsg += b\"\\x00\" * (12 - len(command))\n         tmsg += struct.pack(\"<I\", len(data))\n-        if self.ver_send >= 209:\n-            th = sha256(data)\n-            h = sha256(th)\n-            tmsg += h[:4]\n+        th = sha256(data)\n+        h = sha256(th)\n+        tmsg += h[:4]\n         tmsg += data\n         with mininode_lock:\n             if (len(self.sendbuf) == 0 and not pushbuf):"
      }
    ]
  }
]