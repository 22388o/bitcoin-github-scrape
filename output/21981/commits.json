[
  {
    "sha": "fa57a8fed196c5e89659265e1b39efb0e2bec9d0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTU3YThmZWQxOTZjNWU4OTY1OTI2NWUxYjM5ZWZiMGUyYmVjOWQw",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-05-17T11:21:23Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-05-17T11:10:11Z"
      },
      "message": "Remove unused float serialization",
      "tree": {
        "sha": "6dfb904d5f3c483351a0efe4ef4b5405947cbc3e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6dfb904d5f3c483351a0efe4ef4b5405947cbc3e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa57a8fed196c5e89659265e1b39efb0e2bec9d0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUgwgwv+MbsB5F46KUZ/Fc5+saHqahnjSic2r9TFFcgqT989A+ELJi9nTZ98VXps\nd1RcnGhwuZ+FrXRPR/rj6rCSeqsvaIQE7Gg65kDZ44A9+0eC7JRNyhjIueHArsHa\nvnN+XzPkyp1Ogty9Q4pm+1lPd9hNdIU2uCE8fSR8PujTHeCRjFRZsaqgscX9evuC\nhGHX1DYLql/PmmTIG0BNHZ2QsluOdffPxX8nZsTTgM/iLrSQw0R0P3Ses2aOvWD6\nkIyrp4AUkObr92Ej1ZxndaIep8vZ2cXCAvNXHQTclrX3UgYilCm1GXacrBLlXlw4\n3sYkXeJwvbXqH2l4tdV4rri7HZg4db/Jeggi11+tczRL6nfFrnhz3rtM8VhhBEi6\npnLMDWFECvJ3M8jSTAlk35lOMAcyoPLUv9/bW+bGF0AdzhofOY/3ZkVriBOiogD0\ntcrSOszvd5EpP/2Gkoh7rRI0JPGD6MiNzZmhAaMzC3bBirWTKBXwHFzoO1QC4wOg\nMCimSebz\n=Ztwk\n-----END PGP SIGNATURE-----",
        "payload": "tree 6dfb904d5f3c483351a0efe4ef4b5405947cbc3e\nparent c8571486364d6e9ca8c86bd1c81e230ca64f8904\nauthor MarcoFalke <falke.marco@gmail.com> 1621250483 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1621249811 +0200\n\nRemove unused float serialization\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa57a8fed196c5e89659265e1b39efb0e2bec9d0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa57a8fed196c5e89659265e1b39efb0e2bec9d0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa57a8fed196c5e89659265e1b39efb0e2bec9d0/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c8571486364d6e9ca8c86bd1c81e230ca64f8904",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c8571486364d6e9ca8c86bd1c81e230ca64f8904",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c8571486364d6e9ca8c86bd1c81e230ca64f8904"
      }
    ],
    "stats": {
      "total": 84,
      "additions": 15,
      "deletions": 69
    },
    "files": [
      {
        "sha": "c5a7d0ad3172b99f4aaad61ab1b386ce8acfecb9",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa57a8fed196c5e89659265e1b39efb0e2bec9d0/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa57a8fed196c5e89659265e1b39efb0e2bec9d0/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=fa57a8fed196c5e89659265e1b39efb0e2bec9d0",
        "patch": "@@ -264,6 +264,7 @@ BITCOIN_CORE_H = \\\n   util/tokenpipe.h \\\n   util/trace.h \\\n   util/translation.h \\\n+  util/types.h \\\n   util/ui_change_type.h \\\n   util/url.h \\\n   util/vector.h \\"
      },
      {
        "sha": "276f643c7f1d7677513f77210fe0422818503dfa",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 3,
        "deletions": 16,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa57a8fed196c5e89659265e1b39efb0e2bec9d0/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa57a8fed196c5e89659265e1b39efb0e2bec9d0/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=fa57a8fed196c5e89659265e1b39efb0e2bec9d0",
        "patch": "@@ -23,6 +23,7 @@\n \n #include <prevector.h>\n #include <span.h>\n+#include <util/types.h>\n \n /**\n  * The maximum size of a serialized object in bytes or number of elements\n@@ -129,27 +130,13 @@ inline uint64_t ser_double_to_uint64(double x)\n     static_assert(sizeof(tmp) == sizeof(x), \"double and uint64_t assumed to have the same size\");\n     return tmp;\n }\n-inline uint32_t ser_float_to_uint32(float x)\n-{\n-    uint32_t tmp;\n-    std::memcpy(&tmp, &x, sizeof(x));\n-    static_assert(sizeof(tmp) == sizeof(x), \"float and uint32_t assumed to have the same size\");\n-    return tmp;\n-}\n inline double ser_uint64_to_double(uint64_t y)\n {\n     double tmp;\n     std::memcpy(&tmp, &y, sizeof(y));\n     static_assert(sizeof(tmp) == sizeof(y), \"double and uint64_t assumed to have the same size\");\n     return tmp;\n }\n-inline float ser_uint32_to_float(uint32_t y)\n-{\n-    float tmp;\n-    std::memcpy(&tmp, &y, sizeof(y));\n-    static_assert(sizeof(tmp) == sizeof(y), \"float and uint32_t assumed to have the same size\");\n-    return tmp;\n-}\n \n \n /////////////////////////////////////////////////////////////////\n@@ -234,7 +221,7 @@ template<typename Stream> inline void Serialize(Stream& s, int32_t a ) { ser_wri\n template<typename Stream> inline void Serialize(Stream& s, uint32_t a) { ser_writedata32(s, a); }\n template<typename Stream> inline void Serialize(Stream& s, int64_t a ) { ser_writedata64(s, a); }\n template<typename Stream> inline void Serialize(Stream& s, uint64_t a) { ser_writedata64(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, float a   ) { ser_writedata32(s, ser_float_to_uint32(a)); }\n+template<typename Stream> inline void Serialize(Stream& s, float a   ) { static_assert(ALWAYS_FALSE<Stream>, \"Not implemented\"); }\n template<typename Stream> inline void Serialize(Stream& s, double a  ) { ser_writedata64(s, ser_double_to_uint64(a)); }\n template<typename Stream, int N> inline void Serialize(Stream& s, const char (&a)[N]) { s.write(a, N); }\n template<typename Stream, int N> inline void Serialize(Stream& s, const unsigned char (&a)[N]) { s.write(CharCast(a), N); }\n@@ -252,7 +239,7 @@ template<typename Stream> inline void Unserialize(Stream& s, int32_t& a ) { a =\n template<typename Stream> inline void Unserialize(Stream& s, uint32_t& a) { a = ser_readdata32(s); }\n template<typename Stream> inline void Unserialize(Stream& s, int64_t& a ) { a = ser_readdata64(s); }\n template<typename Stream> inline void Unserialize(Stream& s, uint64_t& a) { a = ser_readdata64(s); }\n-template<typename Stream> inline void Unserialize(Stream& s, float& a   ) { a = ser_uint32_to_float(ser_readdata32(s)); }\n+template<typename Stream> inline void Unserialize(Stream& s, float& a   ) { static_assert(ALWAYS_FALSE<Stream>, \"Not implemented\"); }\n template<typename Stream> inline void Unserialize(Stream& s, double& a  ) { a = ser_uint64_to_double(ser_readdata64(s)); }\n template<typename Stream, int N> inline void Unserialize(Stream& s, char (&a)[N]) { s.read(a, N); }\n template<typename Stream, int N> inline void Unserialize(Stream& s, unsigned char (&a)[N]) { s.read(CharCast(a), N); }"
      },
      {
        "sha": "f806c82d14b4c59bf50b79f5884b4fef027a416b",
        "filename": "src/test/fuzz/float.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 12,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa57a8fed196c5e89659265e1b39efb0e2bec9d0/src/test/fuzz/float.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa57a8fed196c5e89659265e1b39efb0e2bec9d0/src/test/fuzz/float.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/float.cpp?ref=fa57a8fed196c5e89659265e1b39efb0e2bec9d0",
        "patch": "@@ -27,16 +27,4 @@ FUZZ_TARGET(float)\n         stream >> d_deserialized;\n         assert(d == d_deserialized);\n     }\n-\n-    {\n-        const float f = fuzzed_data_provider.ConsumeFloatingPoint<float>();\n-        (void)memusage::DynamicUsage(f);\n-        assert(ser_uint32_to_float(ser_float_to_uint32(f)) == f);\n-\n-        CDataStream stream(SER_NETWORK, INIT_PROTO_VERSION);\n-        stream << f;\n-        float f_deserialized;\n-        stream >> f_deserialized;\n-        assert(f == f_deserialized);\n-    }\n }"
      },
      {
        "sha": "ac8df782be85e373e632babf5da7491e5caf3f98",
        "filename": "src/test/fuzz/util.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa57a8fed196c5e89659265e1b39efb0e2bec9d0/src/test/fuzz/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa57a8fed196c5e89659265e1b39efb0e2bec9d0/src/test/fuzz/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/util.h?ref=fa57a8fed196c5e89659265e1b39efb0e2bec9d0",
        "patch": "@@ -513,7 +513,6 @@ void WriteToStream(FuzzedDataProvider& fuzzed_data_provider, Stream& stream) noe\n                 WRITE_TO_STREAM_CASE(uint32_t, fuzzed_data_provider.ConsumeIntegral<uint32_t>()),\n                 WRITE_TO_STREAM_CASE(int64_t, fuzzed_data_provider.ConsumeIntegral<int64_t>()),\n                 WRITE_TO_STREAM_CASE(uint64_t, fuzzed_data_provider.ConsumeIntegral<uint64_t>()),\n-                WRITE_TO_STREAM_CASE(float, fuzzed_data_provider.ConsumeFloatingPoint<float>()),\n                 WRITE_TO_STREAM_CASE(double, fuzzed_data_provider.ConsumeFloatingPoint<double>()),\n                 WRITE_TO_STREAM_CASE(std::string, fuzzed_data_provider.ConsumeRandomLengthString(32)),\n                 WRITE_TO_STREAM_CASE(std::vector<char>, ConsumeRandomLengthIntegralVector<char>(fuzzed_data_provider)));\n@@ -545,7 +544,6 @@ void ReadFromStream(FuzzedDataProvider& fuzzed_data_provider, Stream& stream) no\n                 READ_FROM_STREAM_CASE(uint32_t),\n                 READ_FROM_STREAM_CASE(int64_t),\n                 READ_FROM_STREAM_CASE(uint64_t),\n-                READ_FROM_STREAM_CASE(float),\n                 READ_FROM_STREAM_CASE(double),\n                 READ_FROM_STREAM_CASE(std::string),\n                 READ_FROM_STREAM_CASE(std::vector<char>));"
      },
      {
        "sha": "0fdf48182362c39b29be974c104b54037ae31496",
        "filename": "src/test/serialize_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 39,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa57a8fed196c5e89659265e1b39efb0e2bec9d0/src/test/serialize_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa57a8fed196c5e89659265e1b39efb0e2bec9d0/src/test/serialize_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/serialize_tests.cpp?ref=fa57a8fed196c5e89659265e1b39efb0e2bec9d0",
        "patch": "@@ -70,7 +70,6 @@ BOOST_AUTO_TEST_CASE(sizes)\n     BOOST_CHECK_EQUAL(sizeof(uint32_t), GetSerializeSize(uint32_t(0), 0));\n     BOOST_CHECK_EQUAL(sizeof(int64_t), GetSerializeSize(int64_t(0), 0));\n     BOOST_CHECK_EQUAL(sizeof(uint64_t), GetSerializeSize(uint64_t(0), 0));\n-    BOOST_CHECK_EQUAL(sizeof(float), GetSerializeSize(float(0), 0));\n     BOOST_CHECK_EQUAL(sizeof(double), GetSerializeSize(double(0), 0));\n     // Bool is serialized as char\n     BOOST_CHECK_EQUAL(sizeof(char), GetSerializeSize(bool(0), 0));\n@@ -85,30 +84,10 @@ BOOST_AUTO_TEST_CASE(sizes)\n     BOOST_CHECK_EQUAL(GetSerializeSize(uint32_t(0), 0), 4U);\n     BOOST_CHECK_EQUAL(GetSerializeSize(int64_t(0), 0), 8U);\n     BOOST_CHECK_EQUAL(GetSerializeSize(uint64_t(0), 0), 8U);\n-    BOOST_CHECK_EQUAL(GetSerializeSize(float(0), 0), 4U);\n     BOOST_CHECK_EQUAL(GetSerializeSize(double(0), 0), 8U);\n     BOOST_CHECK_EQUAL(GetSerializeSize(bool(0), 0), 1U);\n }\n \n-BOOST_AUTO_TEST_CASE(floats_conversion)\n-{\n-    // Choose values that map unambiguously to binary floating point to avoid\n-    // rounding issues at the compiler side.\n-    BOOST_CHECK_EQUAL(ser_uint32_to_float(0x00000000), 0.0F);\n-    BOOST_CHECK_EQUAL(ser_uint32_to_float(0x3f000000), 0.5F);\n-    BOOST_CHECK_EQUAL(ser_uint32_to_float(0x3f800000), 1.0F);\n-    BOOST_CHECK_EQUAL(ser_uint32_to_float(0x40000000), 2.0F);\n-    BOOST_CHECK_EQUAL(ser_uint32_to_float(0x40800000), 4.0F);\n-    BOOST_CHECK_EQUAL(ser_uint32_to_float(0x44444444), 785.066650390625F);\n-\n-    BOOST_CHECK_EQUAL(ser_float_to_uint32(0.0F), 0x00000000U);\n-    BOOST_CHECK_EQUAL(ser_float_to_uint32(0.5F), 0x3f000000U);\n-    BOOST_CHECK_EQUAL(ser_float_to_uint32(1.0F), 0x3f800000U);\n-    BOOST_CHECK_EQUAL(ser_float_to_uint32(2.0F), 0x40000000U);\n-    BOOST_CHECK_EQUAL(ser_float_to_uint32(4.0F), 0x40800000U);\n-    BOOST_CHECK_EQUAL(ser_float_to_uint32(785.066650390625F), 0x44444444U);\n-}\n-\n BOOST_AUTO_TEST_CASE(doubles_conversion)\n {\n     // Choose values that map unambiguously to binary floating point to avoid\n@@ -135,26 +114,8 @@ Python code to generate the below hashes:\n     def dsha256(x):\n         return hashlib.sha256(hashlib.sha256(x).digest()).digest()\n \n-    reversed_hex(dsha256(''.join(struct.pack('<f', x) for x in range(0,1000)))) == '8e8b4cf3e4df8b332057e3e23af42ebc663b61e0495d5e7e32d85099d7f3fe0c'\n     reversed_hex(dsha256(''.join(struct.pack('<d', x) for x in range(0,1000)))) == '43d0c82591953c4eafe114590d392676a01585d25b25d433557f0d7878b23f96'\n */\n-BOOST_AUTO_TEST_CASE(floats)\n-{\n-    CDataStream ss(SER_DISK, 0);\n-    // encode\n-    for (int i = 0; i < 1000; i++) {\n-        ss << float(i);\n-    }\n-    BOOST_CHECK(Hash(ss) == uint256S(\"8e8b4cf3e4df8b332057e3e23af42ebc663b61e0495d5e7e32d85099d7f3fe0c\"));\n-\n-    // decode\n-    for (int i = 0; i < 1000; i++) {\n-        float j;\n-        ss >> j;\n-        BOOST_CHECK_MESSAGE(i == j, \"decoded:\" << j << \" expected:\" << i);\n-    }\n-}\n-\n BOOST_AUTO_TEST_CASE(doubles)\n {\n     CDataStream ss(SER_DISK, 0);"
      },
      {
        "sha": "0047b00026b48443e4897c25440ac5354503cead",
        "filename": "src/util/types.h",
        "status": "added",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa57a8fed196c5e89659265e1b39efb0e2bec9d0/src/util/types.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa57a8fed196c5e89659265e1b39efb0e2bec9d0/src/util/types.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/types.h?ref=fa57a8fed196c5e89659265e1b39efb0e2bec9d0",
        "patch": "@@ -0,0 +1,11 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_TYPES_H\n+#define BITCOIN_UTIL_TYPES_H\n+\n+template <class>\n+inline constexpr bool ALWAYS_FALSE{false};\n+\n+#endif // BITCOIN_UTIL_TYPES_H"
      }
    ]
  }
]