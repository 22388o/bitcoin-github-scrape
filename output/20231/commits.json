[
  {
    "sha": "995dd4a6e7c21665472e71d7aac0251f379e3420",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5OTVkZDRhNmU3YzIxNjY1NDcyZTcxZDdhYWMwMjUxZjM3OWUzNDIw",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-10-22T13:50:03Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-10-23T09:58:25Z"
      },
      "message": "wallet, bugfix: fix rpc bumpfee with BTC/kB and sat/B estimation modes",
      "tree": {
        "sha": "05f34b3457d46971b54cbd82b07d9b5364a1d976",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/05f34b3457d46971b54cbd82b07d9b5364a1d976"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/995dd4a6e7c21665472e71d7aac0251f379e3420",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAl+SqVYACgkQT1chs9Dj\nkh1Urw/+KnCjBLyWGIuhZ9i3ayIjGaHwMrDQnavBeIobAM8i5796Kaq6itNcQuJF\nZzj/2AivSQSc+2D8eLDRHzLvNWDwy4RiuPDtJKUNdW2MBGOFwh3mDG/Ieyv35Cc4\nvakYjFrt/0PnPWzVXRtxCqpN6dVbSrG6RUpVZMUMDU2uwTQoQDMqQcK16cTPIUkk\n0fvmRuvrMmLYYKduqP0TC+t42MIwL2I8mgJdZdMJisg/J2h6hVIkPuWUzfo37ZFl\njWlwkztYNdrcn3DQxbO3ltVYiuudvuQZMfkpZOhTasC6uG9UX7UTGKGhSBY4mOs7\nIK+4u09cZ8GzFSeCkcJynDw0YbC+uSX7fqM+kwcQOR+97oGKGz5iqW7+7c1EdD63\nlsmFKZcJIb8AL4tQsTp5M9kltkqAwUoi0b8LRMBVtf4o6rUOwYVoAQ1V7N+Pvr70\n0DGA69dwoqvAzGIF8DYOlc9IWgLmApLo5Dxt+k74vq7MkE6p0GUAqZXEb0NNBEnT\nQI+uLwaAz8ZyvK50YRASfG/6WaDU1ZLbZ11+ZNsW6tnfa10O50VtaJUQuk0CLLxw\nOUwQVCgM0yW5DBxhluVvlRQwU45L6Wns55TAtEyn9vIH70bNv5U7gbziOCPjROBV\nm9xYNssqBGBe64szR0OBvLwFbPFC8tJFJAD6t1rILiAAAHwrnIY=\n=cD05\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwINHWaLfPEzIDQrDizBqq/FPurdWunsxS69XObeNCRxWlCP/wEB4J5f5htTon\ny2pi8EZHNyoI8QRfkqlY8AiIdvDjUxjrGwCD3+MNLvkMjiwraHR0cHM6Ly9ib2Iu\nYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZ//wEJQbBXXslWBei+stwfMV\nJZkI8QRfkqlX8Aj2gUWC+xZwNQCD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5idGMu\nY2FsZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn//AQu/sWb9HjfmcLd5HcNIoTbQjx\nBF+SqVnwCOeLFsbqGL3+AIPf4w0u+QyOKShodHRwczovL2Zpbm5leS5jYWxlbmRh\nci5ldGVybml0eXdhbGwuY29t8BDNITB+yA4nphtNpxN/Yl+TCPEEX5KpV/AI6f+9\nd7Vf63UAg9/jDS75DI4jImh0dHBzOi8vYnRjLmNhbGVuZGFyLmNhdGFsbGF4eS5j\nb20=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 05f34b3457d46971b54cbd82b07d9b5364a1d976\nparent 80c8a02f1b4f6ad2b5c02595d66a74db22373ed4\nauthor Jon Atack <jon@atack.com> 1603374603 +0200\ncommitter Jon Atack <jon@atack.com> 1603447105 +0200\n\nwallet, bugfix: fix rpc bumpfee with BTC/kB and sat/B estimation modes\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/995dd4a6e7c21665472e71d7aac0251f379e3420",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/995dd4a6e7c21665472e71d7aac0251f379e3420",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/995dd4a6e7c21665472e71d7aac0251f379e3420/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "80c8a02f1b4f6ad2b5c02595d66a74db22373ed4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80c8a02f1b4f6ad2b5c02595d66a74db22373ed4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/80c8a02f1b4f6ad2b5c02595d66a74db22373ed4"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 12,
      "deletions": 4
    },
    "files": [
      {
        "sha": "46e27bb4bfb036df38d59d6363bb69d1f20543e6",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/995dd4a6e7c21665472e71d7aac0251f379e3420/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/995dd4a6e7c21665472e71d7aac0251f379e3420/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=995dd4a6e7c21665472e71d7aac0251f379e3420",
        "patch": "@@ -3461,7 +3461,6 @@ static RPCHelpMan bumpfee_helper(std::string method_name)\n             if (options.exists(\"fee_rate\")) {\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, \"conf_target can't be set with fee_rate. Please provide either a confirmation target in blocks for automatic fee estimation, or an explicit fee rate.\");\n             }\n-            coin_control.m_confirm_target = ParseConfirmTarget(conf_target, pwallet->chain().estimateMaxBlocks());\n         } else if (options.exists(\"fee_rate\")) {\n             CFeeRate fee_rate(AmountFromValue(options[\"fee_rate\"]));\n             if (fee_rate <= CFeeRate(0)) {"
      },
      {
        "sha": "7dac2d7eaf798e637bb4ecedf902a5cbab822ce3",
        "filename": "test/functional/wallet_bumpfee.py",
        "status": "modified",
        "additions": 12,
        "deletions": 3,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/995dd4a6e7c21665472e71d7aac0251f379e3420/test/functional/wallet_bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/995dd4a6e7c21665472e71d7aac0251f379e3420/test/functional/wallet_bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_bumpfee.py?ref=995dd4a6e7c21665472e71d7aac0251f379e3420",
        "patch": "@@ -17,7 +17,7 @@\n import io\n \n from test_framework.blocktools import add_witness_commitment, create_block, create_coinbase, send_to_witness\n-from test_framework.messages import BIP125_SEQUENCE_NUMBER, CTransaction\n+from test_framework.messages import BIP125_SEQUENCE_NUMBER, COIN, CTransaction\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n@@ -36,6 +36,8 @@\n HIGH         = 0.00500000\n TOO_HIGH     = 1.00000000\n \n+BTC_MODE = \"BTC/kB\"\n+SAT_MODE = \"sat/B\"\n \n class BumpFeeTest(BitcoinTestFramework):\n     def set_test_params(self):\n@@ -77,8 +79,8 @@ def run_test(self):\n         self.log.info(\"Running tests\")\n         dest_address = peer_node.getnewaddress()\n         self.test_invalid_parameters(rbf_node, dest_address)\n-        test_simple_bumpfee_succeeds(self, \"default\", rbf_node, peer_node, dest_address)\n-        test_simple_bumpfee_succeeds(self, \"fee_rate\", rbf_node, peer_node, dest_address)\n+        for mode in [\"default\", \"fee_rate\", BTC_MODE, SAT_MODE]:\n+            test_simple_bumpfee_succeeds(self, mode, rbf_node, peer_node, dest_address)\n         test_feerate_args(self, rbf_node, peer_node, dest_address)\n         test_segwit_bumpfee_succeeds(self, rbf_node, dest_address)\n         test_nonrbf_bumpfee_fails(self, peer_node, dest_address)\n@@ -132,6 +134,13 @@ def test_simple_bumpfee_succeeds(self, mode, rbf_node, peer_node, dest_address):\n     if mode == \"fee_rate\":\n         bumped_psbt = rbf_node.psbtbumpfee(rbfid, {\"fee_rate\": NORMAL})\n         bumped_tx = rbf_node.bumpfee(rbfid, {\"fee_rate\": NORMAL})\n+    elif mode == BTC_MODE:\n+        bumped_psbt = rbf_node.psbtbumpfee(rbfid, {\"conf_target\": NORMAL, \"estimate_mode\": BTC_MODE})\n+        bumped_tx = rbf_node.bumpfee(rbfid, {\"conf_target\": NORMAL, \"estimate_mode\": BTC_MODE})\n+    elif mode == SAT_MODE:\n+        sat_fee = NORMAL * COIN / 1000  # convert NORMAL from BTC/kB to sat/B\n+        bumped_psbt = rbf_node.psbtbumpfee(rbfid, {\"conf_target\": sat_fee, \"estimate_mode\": SAT_MODE})\n+        bumped_tx = rbf_node.bumpfee(rbfid, {\"conf_target\": sat_fee, \"estimate_mode\": SAT_MODE})\n     else:\n         bumped_psbt = rbf_node.psbtbumpfee(rbfid)\n         bumped_tx = rbf_node.bumpfee(rbfid)"
      }
    ]
  },
  {
    "sha": "70b793c2b3b91b012316292cd87a093871dd714a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MGI3OTNjMmIzYjkxYjAxMjMxNjI5MmNkODdhMDkzODcxZGQ3MTRh",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-06-27T03:53:17Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-10-23T09:58:50Z"
      },
      "message": "wallet: add bumpfee feerate coverage, improve error/help",
      "tree": {
        "sha": "7f14b1ef4e5cc82c9ac965ddfe16f48e6113a6e1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7f14b1ef4e5cc82c9ac965ddfe16f48e6113a6e1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/70b793c2b3b91b012316292cd87a093871dd714a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAl+SqWwACgkQT1chs9Dj\nkh3kGA//QCdazAhISxDo1I4mLu2piSwglWUoLcES5HCZXm8MWRFB0/Yd9QrO6Jav\n+lSC5ur+nQA1ZaKYwI3SSG6V7MLHdSJKGfhqAOXsqRIQ1pwtuolWajMCKsi45fwb\nBGInmpHLVcBhQQF9P75P0lR5CQctxqMKCXqqTbnwsvTR0O3CAVklxxiq5Xvsn1zt\nQspLwZz5GdXfgMVBj18Je4NtZTHQ0WS7ZDdAIoy+OHbMm82zF0lhtMvXPfJ0I+Qe\nY8/pJusoh1ewSyykzA+EzZkOEIWInKaNlMBGM9kmtq90fg19KbWjMo8oSJQFUJK+\nYouq5OxQ7xRSe2bmFZ7dnaHeQLs9NWFof8ITyAII/JWlyIGf1JLtFtgEMYZInfkp\non3HtvTDUKXsPOkKY3eBTipe8mekjH+W8SREBcrY+KB4GTtSnoZ2jcvk6xGl7M+x\nSzzpB7rZBj/O0dFrOP6UGNgsQBPb14Tjx6+LCy9e5Jz1vjffBvLGdBG2s738BCL2\nrfAId6sFMWv3xr2NLtxravK0CKpRqPWemS7UQafImHoxINYSOxWZoxH5/2NfWfk/\nppf2UgYbURI44GX42BK/29VHCGglu5Y0TBmAOUTy6iUDNgKnkArRN7tg6nV3iCd9\n3SwoktnlmzqkeI3PE1VfHafABiSzQVO6YH4hvs3EdJPLwUWbyoM=\n=Wv4u\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIB/pKxLpbmjl6YzHMrgZT4CJwUSqdLlKmCv7iQwqH9krCP/wEBk83xl02Oii\nuK1F5k8UsawI8QRfkqlt8AiwTQ+r0xAEjQCD3+MNLvkMji4taHR0cHM6Ly9hbGlj\nZS5idGMuY2FsZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn//AQoIfovkter1z6o2I+\nHWMOswjxBF+SqW/wCM/founfe81BAIPf4w0u+QyOKShodHRwczovL2Zpbm5leS5j\nYWxlbmRhci5ldGVybml0eXdhbGwuY29t//AQqtQGyp7zZiIySZ+Uj1GPKQjxBF+S\nqW7wCAgcqVzbJHZbAIPf4w0u+QyOLCtodHRwczovL2JvYi5idGMuY2FsZW5kYXIu\nb3BlbnRpbWVzdGFtcHMub3Jn8BDld7W///lGk94EoxEKm0sxCPEEX5KpbvAIV5BR\nJK+0NFwAg9/jDS75DI4jImh0dHBzOi8vYnRjLmNhbGVuZGFyLmNhdGFsbGF4eS5j\nb20=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 7f14b1ef4e5cc82c9ac965ddfe16f48e6113a6e1\nparent 995dd4a6e7c21665472e71d7aac0251f379e3420\nauthor Jon Atack <jon@atack.com> 1593229997 +0200\ncommitter Jon Atack <jon@atack.com> 1603447130 +0200\n\nwallet: add bumpfee feerate coverage, improve error/help\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/70b793c2b3b91b012316292cd87a093871dd714a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/70b793c2b3b91b012316292cd87a093871dd714a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/70b793c2b3b91b012316292cd87a093871dd714a/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "995dd4a6e7c21665472e71d7aac0251f379e3420",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/995dd4a6e7c21665472e71d7aac0251f379e3420",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/995dd4a6e7c21665472e71d7aac0251f379e3420"
      }
    ],
    "stats": {
      "total": 48,
      "additions": 39,
      "deletions": 9
    },
    "files": [
      {
        "sha": "7ace3cd4bd504013bd8484834e954535eaed777c",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70b793c2b3b91b012316292cd87a093871dd714a/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70b793c2b3b91b012316292cd87a093871dd714a/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=70b793c2b3b91b012316292cd87a093871dd714a",
        "patch": "@@ -3373,7 +3373,7 @@ static RPCHelpMan bumpfee_helper(std::string method_name)\n         \"The command will pay the additional fee by reducing change outputs or adding inputs when necessary. It may add a new change output if one does not already exist.\\n\"\n         \"All inputs in the original transaction will be included in the replacement transaction.\\n\"\n         \"The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\\n\"\n-        \"By default, the new fee will be calculated automatically using estimatesmartfee.\\n\"\n+        \"By default, the new fee will be calculated automatically using the estimatesmartfee RPC.\\n\"\n         \"The user can specify a confirmation target for estimatesmartfee.\\n\"\n         \"Alternatively, the user can specify a fee_rate (\" + CURRENCY_UNIT + \" per kB) for the new transaction.\\n\"\n         \"At a minimum, the new fee rate must be high enough to pay an additional new relay fee (incrementalfee\\n\"\n@@ -3459,7 +3459,7 @@ static RPCHelpMan bumpfee_helper(std::string method_name)\n \n         if (!conf_target.isNull()) {\n             if (options.exists(\"fee_rate\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"conf_target can't be set with fee_rate. Please provide either a confirmation target in blocks for automatic fee estimation, or an explicit fee rate.\");\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot specify both conf_target and fee_rate. Please provide either a confirmation target in blocks for automatic fee estimation, or an explicit fee rate.\");\n             }\n         } else if (options.exists(\"fee_rate\")) {\n             CFeeRate fee_rate(AmountFromValue(options[\"fee_rate\"]));"
      },
      {
        "sha": "1adfab84302dd813ed9399d6c11960ad3a3d5d97",
        "filename": "test/functional/wallet_bumpfee.py",
        "status": "modified",
        "additions": 37,
        "deletions": 7,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70b793c2b3b91b012316292cd87a093871dd714a/test/functional/wallet_bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70b793c2b3b91b012316292cd87a093871dd714a/test/functional/wallet_bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_bumpfee.py?ref=70b793c2b3b91b012316292cd87a093871dd714a",
        "patch": "@@ -168,24 +168,54 @@ def test_simple_bumpfee_succeeds(self, mode, rbf_node, peer_node, dest_address):\n \n \n def test_feerate_args(self, rbf_node, peer_node, dest_address):\n-    self.log.info('Test fee_rate args')\n+    self.log.info('Test feerate args')\n     rbfid = spend_one_input(rbf_node, dest_address)\n     self.sync_mempools((rbf_node, peer_node))\n     assert rbfid in rbf_node.getrawmempool() and rbfid in peer_node.getrawmempool()\n \n-    assert_raises_rpc_error(-8, \"conf_target can't be set with fee_rate. Please provide either a confirmation target in blocks for automatic fee estimation, or an explicit fee rate.\", rbf_node.bumpfee, rbfid, {\"fee_rate\": NORMAL, \"confTarget\": 1})\n-\n     assert_raises_rpc_error(-3, \"Unexpected key totalFee\", rbf_node.bumpfee, rbfid, {\"totalFee\": NORMAL})\n-    assert_raises_rpc_error(-8, \"conf_target can't be set with fee_rate. Please provide either a confirmation target in blocks for automatic fee estimation, or an explicit fee rate.\", rbf_node.bumpfee, rbfid, {\"fee_rate\":0.00001, \"confTarget\": 1})\n \n     # Bumping to just above minrelay should fail to increase total fee enough, at least\n     assert_raises_rpc_error(-8, \"Insufficient total fee\", rbf_node.bumpfee, rbfid, {\"fee_rate\": INSUFFICIENT})\n-\n     assert_raises_rpc_error(-3, \"Amount out of range\", rbf_node.bumpfee, rbfid, {\"fee_rate\": -1})\n-\n     assert_raises_rpc_error(-4, \"is too high (cannot be higher than\", rbf_node.bumpfee, rbfid, {\"fee_rate\": TOO_HIGH})\n-    self.clear_mempool()\n \n+    self.log.info(\"Test explicit feerate raises RPC error if estimate_mode is passed without a conf_target\")\n+    assert_raises_rpc_error(-8, \"Selected estimate_mode requires a fee rate\", rbf_node.bumpfee, rbfid, {\"fee_rate\": NORMAL, \"estimate_mode\": BTC_MODE})\n+    assert_raises_rpc_error(-8, \"Selected estimate_mode requires a fee rate\", rbf_node.bumpfee, rbfid, {\"fee_rate\": 10, \"estimate_mode\": SAT_MODE})\n+\n+    self.log.info(\"Test explicit feerate raises RPC error if both fee_rate and conf_target are passed\")\n+    msg = \"Cannot specify both conf_target and fee_rate. Please provide either a confirmation \" \\\n+          \"target in blocks for automatic fee estimation, or an explicit fee rate.\"\n+    assert_raises_rpc_error(-8, msg, rbf_node.bumpfee, rbfid, {\"conf_target\": NORMAL, \"fee_rate\": NORMAL})\n+\n+    self.log.info(\"Test invalid conf_target settings\")\n+    for field in [\"confTarget\", \"conf_target\"]:\n+        assert_raises_rpc_error(-8, msg, rbf_node.bumpfee, rbfid, {field: 1, \"fee_rate\": NORMAL})\n+    too_high = \"is too high (cannot be higher than -maxtxfee\"\n+    assert_raises_rpc_error(-4, too_high, lambda: rbf_node.bumpfee(rbfid, {\"estimate_mode\": BTC_MODE, \"conf_target\": 2009}))\n+    assert_raises_rpc_error(-4, too_high, lambda: rbf_node.bumpfee(rbfid, {\"estimate_mode\": SAT_MODE, \"conf_target\": 2009 * 10000}))\n+\n+    self.log.info(\"Test invalid estimate_mode settings\")\n+    for k, v in {\"number\": 42, \"object\": {\"foo\": \"bar\"}}.items():\n+        assert_raises_rpc_error(-3, \"Expected type string for estimate_mode, got {}\".format(k),\n+                                lambda: rbf_node.bumpfee(rbfid, {\"estimate_mode\": v, \"fee_rate\": NORMAL}))\n+    for mode in [\"foo\", Decimal(\"3.141592\")]:\n+        assert_raises_rpc_error(-8, \"Invalid estimate_mode parameter\",\n+                                lambda: rbf_node.bumpfee(rbfid, {\"estimate_mode\": mode, \"fee_rate\": NORMAL}))\n+\n+    self.log.info(\"Test invalid fee_rate settings\")\n+    for mode in [\"unset\", \"economical\", \"conservative\", BTC_MODE, SAT_MODE]:\n+        self.log.debug(\"{}\".format(mode))\n+        for k, v in {\"string\": \"\", \"object\": {\"foo\": \"bar\"}}.items():\n+            assert_raises_rpc_error(-3, \"Expected type number for fee_rate, got {}\".format(k),\n+                                    lambda: rbf_node.bumpfee(rbfid, {\"estimate_mode\": mode, \"fee_rate\": v}))\n+        assert_raises_rpc_error(-3, \"Amount out of range\",\n+                                lambda: rbf_node.bumpfee(rbfid, {\"estimate_mode\": mode, \"fee_rate\": -1}))\n+        assert_raises_rpc_error(-8, \"Invalid fee_rate 0.00000000 BTC/kB (must be greater than 0)\",\n+                                lambda: rbf_node.bumpfee(rbfid, {\"estimate_mode\": mode, \"fee_rate\": 0}))\n+\n+    self.clear_mempool()\n \n def test_segwit_bumpfee_succeeds(self, rbf_node, dest_address):\n     self.log.info('Test that segwit-sourcing bumpfee works')"
      }
    ]
  },
  {
    "sha": "9ea6d390c26975c98a9cf28cf816bcbded9aa3d1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZWE2ZDM5MGMyNjk3NWM5OGE5Y2YyOGNmODE2YmNiZGVkOWFhM2Qx",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-10-22T15:01:10Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-10-23T09:59:12Z"
      },
      "message": "wallet, test: combine bumpfee overlapping invalid params and args tests",
      "tree": {
        "sha": "d1eba290424655d3d678b7e2eb31eea1e5399472",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d1eba290424655d3d678b7e2eb31eea1e5399472"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9ea6d390c26975c98a9cf28cf816bcbded9aa3d1",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAl+SqXwACgkQT1chs9Dj\nkh0bqw//Y1UJmpVQ2vWMAh85M/A2C+qEcEhyeu8inVyAH0HWCZKaj+oe0MXTJ8nD\nbB/ZnBVlz+nuJ3IQONsCqQCqxElWSgSGNCMsH7UPea61c3xza+bZ/2FTAhbnIAEM\nj+oK/SaBx/IYr5rrzFHhqV6mt2gCkBGdlLJ3yPZP1sCpj7TbJlmcPVxqBVKMbkVM\nKZCvODfJe4JaUVCPP/6Egmn8+T2HHMY7NtmRQdxfkjfaVVt1SCYH7LAY121non3+\nQIQ5BShWn/32sNT6FA479qn1UzWkBJGnVCvmW0ONa0b/QAa73+ueZPVdASy21P/p\nUy6pzJ0z+LRZYVO65lD9lkjJT5xFyOiKJE45FNIgGQVsrmdMfxUbCWTGzxH4b3uH\npGdDPsQuuGdR55EY246mi753qZWfLKFqfgDa/o3bbDr4VsvU83crn9GktEepptKj\n9A8aIJ5m9/8Dly/MHUi25c1DgcFOswyHElXdW2xdWL9oD/kNFkGu8FAJjyp+1XrC\n/K032Toqmus+HEhku1trAFwBmJSOi8yXvjrdhL+e8zAIISatmdMZrZStE5yW82zY\nyB78psDbrEmanrhBYubeZt1AvBLGMNSvrJQbdfJpQp2kgN1iQsxsxJLxZaWDxFEq\nwsZ/jI74P5d3dnDnClTCUU3mUv01owO7SQN/dJYrSjrCHhL4unE=\n=OGel\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIIcYxxGOwbzFJY60B+PsiS0KYSlcNs3F28CAXU2bbXLTCP/wEBDs/Q1Yfr7v\nyyD8RsEN4gsI8QRfkql+8AhDB1yMjhXP4QCD3+MNLvkMjiMiaHR0cHM6Ly9idGMu\nY2FsZW5kYXIuY2F0YWxsYXh5LmNvbf/wEBZ4HGp+053wzKf9z6neAL0I8QRfkql9\n8AhEzSU91G+QxQCD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5idGMuY2FsZW5kYXIu\nb3BlbnRpbWVzdGFtcHMub3Jn//AQqP6aayM4Jnzy4fGXyHu0KwjxBF+SqX/wCAd9\nFrg8lONBAIPf4w0u+QyOKShodHRwczovL2Zpbm5leS5jYWxlbmRhci5ldGVybml0\neXdhbGwuY29t8BDvlkLroPLNEhVxp2Gja2x1CPEEX5KpfvAI/o7ZAN1dcFYAg9/j\nDS75DI4sK2h0dHBzOi8vYm9iLmJ0Yy5jYWxlbmRhci5vcGVudGltZXN0YW1wcy5v\ncmc=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree d1eba290424655d3d678b7e2eb31eea1e5399472\nparent 70b793c2b3b91b012316292cd87a093871dd714a\nauthor Jon Atack <jon@atack.com> 1603378870 +0200\ncommitter Jon Atack <jon@atack.com> 1603447152 +0200\n\nwallet, test: combine bumpfee overlapping invalid params and args tests\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ea6d390c26975c98a9cf28cf816bcbded9aa3d1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9ea6d390c26975c98a9cf28cf816bcbded9aa3d1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ea6d390c26975c98a9cf28cf816bcbded9aa3d1/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "70b793c2b3b91b012316292cd87a093871dd714a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/70b793c2b3b91b012316292cd87a093871dd714a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/70b793c2b3b91b012316292cd87a093871dd714a"
      }
    ],
    "stats": {
      "total": 124,
      "additions": 50,
      "deletions": 74
    },
    "files": [
      {
        "sha": "755306acbaed24c9086cf35b73b90178355e5388",
        "filename": "test/functional/wallet_bumpfee.py",
        "status": "modified",
        "additions": 50,
        "deletions": 74,
        "changes": 124,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ea6d390c26975c98a9cf28cf816bcbded9aa3d1/test/functional/wallet_bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ea6d390c26975c98a9cf28cf816bcbded9aa3d1/test/functional/wallet_bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_bumpfee.py?ref=9ea6d390c26975c98a9cf28cf816bcbded9aa3d1",
        "patch": "@@ -78,10 +78,9 @@ def run_test(self):\n \n         self.log.info(\"Running tests\")\n         dest_address = peer_node.getnewaddress()\n-        self.test_invalid_parameters(rbf_node, dest_address)\n         for mode in [\"default\", \"fee_rate\", BTC_MODE, SAT_MODE]:\n             test_simple_bumpfee_succeeds(self, mode, rbf_node, peer_node, dest_address)\n-        test_feerate_args(self, rbf_node, peer_node, dest_address)\n+        self.test_invalid_parameters(rbf_node, peer_node, dest_address)\n         test_segwit_bumpfee_succeeds(self, rbf_node, dest_address)\n         test_nonrbf_bumpfee_fails(self, peer_node, dest_address)\n         test_notmine_bumpfee_fails(self, rbf_node, peer_node, dest_address)\n@@ -100,28 +99,55 @@ def run_test(self):\n         test_small_output_with_feerate_succeeds(self, rbf_node, dest_address)\n         test_no_more_inputs_fails(self, rbf_node, dest_address)\n \n-    def test_invalid_parameters(self, node, dest_address):\n-        txid = spend_one_input(node, dest_address)\n-        # invalid estimate mode\n-        assert_raises_rpc_error(-8, \"Invalid estimate_mode parameter\", node.bumpfee, txid, {\n-            \"estimate_mode\": \"moo\",\n-        })\n-        assert_raises_rpc_error(-3, \"Expected type string\", node.bumpfee, txid, {\n-            \"estimate_mode\": 38,\n-        })\n-        assert_raises_rpc_error(-3, \"Expected type string\", node.bumpfee, txid, {\n-            \"estimate_mode\": {\n-                \"foo\": \"bar\",\n-            },\n-        })\n-        assert_raises_rpc_error(-8, \"Invalid estimate_mode parameter\", node.bumpfee, txid, {\n-            \"estimate_mode\": Decimal(\"3.141592\"),\n-        })\n-        # confTarget and conf_target\n-        assert_raises_rpc_error(-8, \"confTarget and conf_target options should not both be set\", node.bumpfee, txid, {\n-            \"confTarget\": 123,\n-            \"conf_target\": 456,\n-        })\n+    def test_invalid_parameters(self, rbf_node, peer_node, dest_address):\n+        self.log.info('Test invalid parameters')\n+        rbfid = spend_one_input(rbf_node, dest_address)\n+        self.sync_mempools((rbf_node, peer_node))\n+        assert rbfid in rbf_node.getrawmempool() and rbfid in peer_node.getrawmempool()\n+\n+        assert_raises_rpc_error(-3, \"Unexpected key totalFee\", rbf_node.bumpfee, rbfid, {\"totalFee\": NORMAL})\n+        assert_raises_rpc_error(-4, \"is too high (cannot be higher than\", rbf_node.bumpfee, rbfid, {\"fee_rate\": TOO_HIGH})\n+\n+        # Bumping to just above minrelay should fail to increase total fee enough, at least\n+        assert_raises_rpc_error(-8, \"Insufficient total fee\", rbf_node.bumpfee, rbfid, {\"fee_rate\": INSUFFICIENT})\n+\n+        self.log.info(\"Test explicit feerate raises RPC error if estimate_mode is passed without a conf_target\")\n+        assert_raises_rpc_error(-8, \"Selected estimate_mode requires a fee rate\", rbf_node.bumpfee, rbfid, {\"fee_rate\": HIGH, \"estimate_mode\": BTC_MODE})\n+        assert_raises_rpc_error(-8, \"Selected estimate_mode requires a fee rate\", rbf_node.bumpfee, rbfid, {\"fee_rate\": 1000, \"estimate_mode\": SAT_MODE})\n+\n+        self.log.info(\"Test explicit feerate raises RPC error if both fee_rate and conf_target are passed\")\n+        msg = \"Cannot specify both conf_target and fee_rate. Please provide either a confirmation \" \\\n+              \"target in blocks for automatic fee estimation, or an explicit fee rate.\"\n+        assert_raises_rpc_error(-8, msg, rbf_node.bumpfee, rbfid, {\"conf_target\": NORMAL, \"fee_rate\": NORMAL})\n+\n+        self.log.info(\"Test invalid conf_target settings\")\n+        assert_raises_rpc_error(-8, \"confTarget and conf_target options should not both be set\",\n+                                rbf_node.bumpfee, rbfid, {\"confTarget\": 123, \"conf_target\": 456})\n+        for field in [\"confTarget\", \"conf_target\"]:\n+            assert_raises_rpc_error(-4, \"is too high (cannot be higher than -maxtxfee\",\n+                                    lambda: rbf_node.bumpfee(rbfid, {\"estimate_mode\": BTC_MODE, \"conf_target\": 2009}))\n+            assert_raises_rpc_error(-4, \"is too high (cannot be higher than -maxtxfee\",\n+                                    lambda: rbf_node.bumpfee(rbfid, {\"estimate_mode\": SAT_MODE, \"conf_target\": 2009 * 10000}))\n+\n+        self.log.info(\"Test invalid estimate_mode settings\")\n+        for k, v in {\"number\": 42, \"object\": {\"foo\": \"bar\"}}.items():\n+            assert_raises_rpc_error(-3, \"Expected type string for estimate_mode, got {}\".format(k),\n+                                    lambda: rbf_node.bumpfee(rbfid, {\"estimate_mode\": v, \"fee_rate\": NORMAL}))\n+        for mode in [\"foo\", Decimal(\"3.141592\")]:\n+            assert_raises_rpc_error(-8, \"Invalid estimate_mode parameter\",\n+                                    lambda: rbf_node.bumpfee(rbfid, {\"estimate_mode\": mode, \"fee_rate\": NORMAL}))\n+\n+        self.log.info(\"Test invalid fee_rate settings\")\n+        for mode in [\"unset\", \"economical\", \"conservative\", BTC_MODE, SAT_MODE]:\n+            self.log.debug(\"{}\".format(mode))\n+            for k, v in {\"string\": \"\", \"object\": {\"foo\": \"bar\"}}.items():\n+                assert_raises_rpc_error(-3, \"Expected type number for fee_rate, got {}\".format(k),\n+                                        lambda: rbf_node.bumpfee(rbfid, {\"estimate_mode\": mode, \"fee_rate\": v}))\n+                assert_raises_rpc_error(-3, \"Amount out of range\",\n+                                        lambda: rbf_node.bumpfee(rbfid, {\"estimate_mode\": mode, \"fee_rate\": -1}))\n+                assert_raises_rpc_error(-8, \"Invalid fee_rate 0.00000000 BTC/kB (must be greater than 0)\",\n+                                        lambda: rbf_node.bumpfee(rbfid, {\"estimate_mode\": mode, \"fee_rate\": 0}))\n+\n         self.clear_mempool()\n \n \n@@ -167,56 +193,6 @@ def test_simple_bumpfee_succeeds(self, mode, rbf_node, peer_node, dest_address):\n     self.clear_mempool()\n \n \n-def test_feerate_args(self, rbf_node, peer_node, dest_address):\n-    self.log.info('Test feerate args')\n-    rbfid = spend_one_input(rbf_node, dest_address)\n-    self.sync_mempools((rbf_node, peer_node))\n-    assert rbfid in rbf_node.getrawmempool() and rbfid in peer_node.getrawmempool()\n-\n-    assert_raises_rpc_error(-3, \"Unexpected key totalFee\", rbf_node.bumpfee, rbfid, {\"totalFee\": NORMAL})\n-\n-    # Bumping to just above minrelay should fail to increase total fee enough, at least\n-    assert_raises_rpc_error(-8, \"Insufficient total fee\", rbf_node.bumpfee, rbfid, {\"fee_rate\": INSUFFICIENT})\n-    assert_raises_rpc_error(-3, \"Amount out of range\", rbf_node.bumpfee, rbfid, {\"fee_rate\": -1})\n-    assert_raises_rpc_error(-4, \"is too high (cannot be higher than\", rbf_node.bumpfee, rbfid, {\"fee_rate\": TOO_HIGH})\n-\n-    self.log.info(\"Test explicit feerate raises RPC error if estimate_mode is passed without a conf_target\")\n-    assert_raises_rpc_error(-8, \"Selected estimate_mode requires a fee rate\", rbf_node.bumpfee, rbfid, {\"fee_rate\": NORMAL, \"estimate_mode\": BTC_MODE})\n-    assert_raises_rpc_error(-8, \"Selected estimate_mode requires a fee rate\", rbf_node.bumpfee, rbfid, {\"fee_rate\": 10, \"estimate_mode\": SAT_MODE})\n-\n-    self.log.info(\"Test explicit feerate raises RPC error if both fee_rate and conf_target are passed\")\n-    msg = \"Cannot specify both conf_target and fee_rate. Please provide either a confirmation \" \\\n-          \"target in blocks for automatic fee estimation, or an explicit fee rate.\"\n-    assert_raises_rpc_error(-8, msg, rbf_node.bumpfee, rbfid, {\"conf_target\": NORMAL, \"fee_rate\": NORMAL})\n-\n-    self.log.info(\"Test invalid conf_target settings\")\n-    for field in [\"confTarget\", \"conf_target\"]:\n-        assert_raises_rpc_error(-8, msg, rbf_node.bumpfee, rbfid, {field: 1, \"fee_rate\": NORMAL})\n-    too_high = \"is too high (cannot be higher than -maxtxfee\"\n-    assert_raises_rpc_error(-4, too_high, lambda: rbf_node.bumpfee(rbfid, {\"estimate_mode\": BTC_MODE, \"conf_target\": 2009}))\n-    assert_raises_rpc_error(-4, too_high, lambda: rbf_node.bumpfee(rbfid, {\"estimate_mode\": SAT_MODE, \"conf_target\": 2009 * 10000}))\n-\n-    self.log.info(\"Test invalid estimate_mode settings\")\n-    for k, v in {\"number\": 42, \"object\": {\"foo\": \"bar\"}}.items():\n-        assert_raises_rpc_error(-3, \"Expected type string for estimate_mode, got {}\".format(k),\n-                                lambda: rbf_node.bumpfee(rbfid, {\"estimate_mode\": v, \"fee_rate\": NORMAL}))\n-    for mode in [\"foo\", Decimal(\"3.141592\")]:\n-        assert_raises_rpc_error(-8, \"Invalid estimate_mode parameter\",\n-                                lambda: rbf_node.bumpfee(rbfid, {\"estimate_mode\": mode, \"fee_rate\": NORMAL}))\n-\n-    self.log.info(\"Test invalid fee_rate settings\")\n-    for mode in [\"unset\", \"economical\", \"conservative\", BTC_MODE, SAT_MODE]:\n-        self.log.debug(\"{}\".format(mode))\n-        for k, v in {\"string\": \"\", \"object\": {\"foo\": \"bar\"}}.items():\n-            assert_raises_rpc_error(-3, \"Expected type number for fee_rate, got {}\".format(k),\n-                                    lambda: rbf_node.bumpfee(rbfid, {\"estimate_mode\": mode, \"fee_rate\": v}))\n-        assert_raises_rpc_error(-3, \"Amount out of range\",\n-                                lambda: rbf_node.bumpfee(rbfid, {\"estimate_mode\": mode, \"fee_rate\": -1}))\n-        assert_raises_rpc_error(-8, \"Invalid fee_rate 0.00000000 BTC/kB (must be greater than 0)\",\n-                                lambda: rbf_node.bumpfee(rbfid, {\"estimate_mode\": mode, \"fee_rate\": 0}))\n-\n-    self.clear_mempool()\n-\n def test_segwit_bumpfee_succeeds(self, rbf_node, dest_address):\n     self.log.info('Test that segwit-sourcing bumpfee works')\n     # Create a transaction with segwit output, then create an RBF transaction"
      }
    ]
  },
  {
    "sha": "84fc42f32c8f649918e3db55d1dcc62d9f402224",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NGZjNDJmMzJjOGY2NDk5MThlM2RiNTVkMWRjYzYyZDlmNDAyMjI0",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-10-19T09:35:10Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-10-23T10:51:25Z"
      },
      "message": "wallet: fundrawtransaction feerate coverage, fixup ParseConfirmTarget()",
      "tree": {
        "sha": "6c2bbd0b6244e73770b6e52f99a0e2fa514e07ce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6c2bbd0b6244e73770b6e52f99a0e2fa514e07ce"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/84fc42f32c8f649918e3db55d1dcc62d9f402224",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAl+StbQACgkQT1chs9Dj\nkh30MRAAsCBdUPBV/f7WLUWAg3Wvk58w/oboosYGc+6CX63xyxuij/t2te0nvZSS\ny7GEf1kTNFUgqhhtwWgT4HmlsJrUz/R33b/PUetz6s9th3jR99KOr76uskD2YMrp\n5Tut9hd1zG9wy2qrr/SO6xevJCANhcdSAbHSpmSmL9FRdWpHCJm7To3Vp7BSlvXW\n8GSuiYHOouX/WBNHN9trmPArKOIgLC5cuREB/PaXcmeMmv8v/jggkncS2AG8k/1D\n+XXx1dy7qXSuq4LwT24oNDaIM9sbuRVqFomKq1kQbmsdAfgxNrAo8a5BDEhvYpta\nXCJdG5pozA11UuDxJThza8BzTm/6c4JjERyPvCCnHxv5SsdinbTLZudNqvtS4xfG\nu0UmpnsNZ9Lra8QruLLcSwpj8pMnMdWaHI460aYA/LmjI6rS9QJ4mlJjQqvdBwAr\nl5pEDM+GkStlseRi7ZrMJVgtcD3jMBwqlO2C6IVMcgGRX/TSmo82+KnRNvuXuQPl\nDK1Bxndm/7CHJU3Ug4CzHNB4E/9S3/VR5pxSlgeNwEMvPZWVV+iq32uSatn+pOIW\ngnxbmur1h/uXM7xsQJ4rzp4wO0Q99eu0R75ZLeYZBgU3Vn717etLgiD1j8fsaE8+\nq2FrK5C/mSuACqI3vnhZiCfY+r6sQzKtou9LtSfMBDoE1z5i6FA=\n=Y6Si\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwINF+Je7ajdlAfzmFZUVtdHeEgkSRvaqtExU3fUp1I5P4CP/wEI/9OePSe9xc\nB56At8wOOuoI8QRfkrW28Agiu0idLCczEgCD3+MNLvkMjiwraHR0cHM6Ly9ib2Iu\nYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZ//wEJJgPF16pNPEVEM2Lw/N\nvWcI8QRfkrW18Ah3cH1I9cPrMACD3+MNLvkMjiMiaHR0cHM6Ly9idGMuY2FsZW5k\nYXIuY2F0YWxsYXh5LmNvbf/wEOtONQ5EbDRmaw556uMLVSwI8CDs2XO0hxNzJRuU\nf5G3e6OLldvEw/p7KeZBFocu1wmZjQjxBF+StbbwCDn5c/fJU0UQAIPf4w0u+QyO\nLi1odHRwczovL2FsaWNlLmJ0Yy5jYWxlbmRhci5vcGVudGltZXN0YW1wcy5vcmfw\nEPUuchrW0oD6UcPUM+ntn9sI8QRfkrW48AgzdHMCS8LXWQCD3+MNLvkMjikoaHR0\ncHM6Ly9maW5uZXkuY2FsZW5kYXIuZXRlcm5pdHl3YWxsLmNvbQ==\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 6c2bbd0b6244e73770b6e52f99a0e2fa514e07ce\nparent 9ea6d390c26975c98a9cf28cf816bcbded9aa3d1\nauthor Jon Atack <jon@atack.com> 1603100110 +0200\ncommitter Jon Atack <jon@atack.com> 1603450285 +0200\n\nwallet: fundrawtransaction feerate coverage, fixup ParseConfirmTarget()\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/84fc42f32c8f649918e3db55d1dcc62d9f402224",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/84fc42f32c8f649918e3db55d1dcc62d9f402224",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/84fc42f32c8f649918e3db55d1dcc62d9f402224/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9ea6d390c26975c98a9cf28cf816bcbded9aa3d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ea6d390c26975c98a9cf28cf816bcbded9aa3d1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9ea6d390c26975c98a9cf28cf816bcbded9aa3d1"
      }
    ],
    "stats": {
      "total": 58,
      "additions": 54,
      "deletions": 4
    },
    "files": [
      {
        "sha": "1b21587b6dc79bc8d8b2fd3f5865518c6d9c00b6",
        "filename": "src/rpc/util.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84fc42f32c8f649918e3db55d1dcc62d9f402224/src/rpc/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84fc42f32c8f649918e3db55d1dcc62d9f402224/src/rpc/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.cpp?ref=84fc42f32c8f649918e3db55d1dcc62d9f402224",
        "patch": "@@ -272,11 +272,12 @@ UniValue DescribeAddress(const CTxDestination& dest)\n \n unsigned int ParseConfirmTarget(const UniValue& value, unsigned int max_target)\n {\n-    int target = value.get_int();\n-    if (target < 1 || (unsigned int)target > max_target) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Invalid conf_target, must be between %u - %u\", 1, max_target));\n+    const int target{value.get_int()};\n+    const unsigned int unsigned_target{static_cast<unsigned int>(target)};\n+    if (target < 1 || unsigned_target > max_target) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Invalid conf_target, must be between %u and %u\", 1, max_target));\n     }\n-    return (unsigned int)target;\n+    return unsigned_target;\n }\n \n RPCErrorCode RPCErrorFromTransactionError(TransactionError terr)"
      },
      {
        "sha": "4c0fd0a603f687d8f0fcf1b41aa8ef0cc06225d7",
        "filename": "test/functional/rpc_fundrawtransaction.py",
        "status": "modified",
        "additions": 49,
        "deletions": 0,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84fc42f32c8f649918e3db55d1dcc62d9f402224/test/functional/rpc_fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84fc42f32c8f649918e3db55d1dcc62d9f402224/test/functional/rpc_fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_fundrawtransaction.py?ref=84fc42f32c8f649918e3db55d1dcc62d9f402224",
        "patch": "@@ -7,6 +7,7 @@\n from decimal import Decimal\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n+    assert_approx,\n     assert_equal,\n     assert_fee_amount,\n     assert_greater_than,\n@@ -89,6 +90,7 @@ def run_test(self):\n         self.test_op_return()\n         self.test_watchonly()\n         self.test_all_watched_funds()\n+        self.test_feerate_with_conf_target_and_estimate_mode()\n         self.test_option_feerate()\n         self.test_address_reuse()\n         self.test_option_subtract_fee_from_outputs()\n@@ -672,6 +674,53 @@ def test_option_feerate(self):\n         assert_fee_amount(result2['fee'], count_bytes(result2['hex']), 2 * result_fee_rate)\n         assert_fee_amount(result3['fee'], count_bytes(result3['hex']), 10 * result_fee_rate)\n \n+    def test_feerate_with_conf_target_and_estimate_mode(self):\n+        self.log.info(\"Test fundrawtxn passing an explicit feerate using conf_target and estimate_mode\")\n+        node = self.nodes[3]\n+        # Make sure there is exactly one input so coin selection can't skew the result.\n+        assert_equal(len(node.listunspent(1)), 1)\n+        inputs = []\n+        outputs = {node.getnewaddress() : 1}\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+\n+        for unit, feerate in {\"btc/kb\": 0.1, \"sat/b\": 10000}.items():\n+            self.log.info(\"Test fundrawtxn with conf_target {} estimate_mode {} produces expected fee\".format(feerate, unit))\n+            # With no arguments passed, expect fee of 141 sats/b.\n+            assert_approx(node.fundrawtransaction(rawtx)[\"fee\"], vexp=0.00000141, vspan=0.00000001)\n+            # Expect fee to be 10,000x higher when explicit fee 10,000x greater is specified.\n+            result = node.fundrawtransaction(rawtx, {\"conf_target\": feerate, \"estimate_mode\": unit})\n+            assert_approx(result[\"fee\"], vexp=0.0141, vspan=0.0001)\n+\n+        for field, feerate in {\"conf_target\": 0.1, \"estimate_mode\": \"sat/b\"}.items():\n+            self.log.info(\"Test fundrawtxn raises RPC error if both feeRate and {} are passed\".format(field))\n+            assert_raises_rpc_error(\n+                -8, \"Cannot specify both {} and feeRate\".format(field),\n+                lambda: node.fundrawtransaction(rawtx, {\"feeRate\": 0.1, field: feerate}))\n+\n+        self.log.info(\"Test fundrawtxn with invalid estimate_mode settings\")\n+        for k, v in {\"number\": 42, \"object\": {\"foo\": \"bar\"}}.items():\n+            assert_raises_rpc_error(-3, \"Expected type string for estimate_mode, got {}\".format(k),\n+                lambda: self.nodes[1].fundrawtransaction(rawtx, {\"estimate_mode\": v, \"conf_target\": 0.1}))\n+        for mode in [\"foo\", Decimal(\"3.141592\")]:\n+            assert_raises_rpc_error(-8, \"Invalid estimate_mode parameter\",\n+                lambda: self.nodes[1].fundrawtransaction(rawtx, {\"estimate_mode\": mode, \"conf_target\": 0.1}))\n+\n+        self.log.info(\"Test fundrawtxn with invalid conf_target settings\")\n+        for mode in [\"unset\", \"economical\", \"conservative\", \"btc/kb\", \"sat/b\"]:\n+            self.log.debug(\"{}\".format(mode))\n+            for k, v in {\"string\": \"\", \"object\": {\"foo\": \"bar\"}}.items():\n+                assert_raises_rpc_error(-3, \"Expected type number for conf_target, got {}\".format(k),\n+                    lambda: self.nodes[1].fundrawtransaction(rawtx, {\"estimate_mode\": mode, \"conf_target\": v}))\n+            if mode in [\"btc/kb\", \"sat/b\"]:\n+                assert_raises_rpc_error(-3, \"Amount out of range\",\n+                    lambda: self.nodes[1].fundrawtransaction(rawtx, {\"estimate_mode\": mode, \"conf_target\": -1}))\n+                assert_raises_rpc_error(-4, \"Fee rate (0.00000000 BTC/kB) is lower than the minimum fee rate setting (0.00001000 BTC/kB)\",\n+                    lambda: self.nodes[1].fundrawtransaction(rawtx, {\"estimate_mode\": mode, \"conf_target\": 0}))\n+            else:\n+                for n in [-1, 0, 1009]:\n+                    assert_raises_rpc_error(-8, \"Invalid conf_target, must be between 1 and 1008\",\n+                        lambda: self.nodes[1].fundrawtransaction(rawtx, {\"estimate_mode\": mode, \"conf_target\": n}))\n+\n     def test_address_reuse(self):\n         \"\"\"Test no address reuse occurs.\"\"\"\n         self.log.info(\"Test fundrawtxn does not reuse addresses\")"
      }
    ]
  },
  {
    "sha": "1b498b9b6aa4d2d7c1d316f9ab4bc4c96728cd6a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYjQ5OGI5YjZhYTRkMmQ3YzFkMzE2ZjlhYjRiYzRjOTY3MjhjZDZh",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-06-26T14:05:03Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-10-23T10:51:34Z"
      },
      "message": "test: refactor rpc_psbt.py for walletcreatefundedpsbt feerate coverage",
      "tree": {
        "sha": "7209bcb63f2cc15e3e42beddf852e97394ee3902",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7209bcb63f2cc15e3e42beddf852e97394ee3902"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1b498b9b6aa4d2d7c1d316f9ab4bc4c96728cd6a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAl+StbYACgkQT1chs9Dj\nkh2atBAAkGitdwoqORLRlsOJJsT2gzrb9NMsM98V/vUeWmKWoLQt/HoYNt9G7muO\nj4v9+4IC1lC59dylczmFwLiel4Vy4kDXS5rXh5AVjifoN/jHrstkAN8AC8YjDeaZ\nnhyujUBihOsRQXgwdRBhgVKNb/XCvOaQLTVJsNXGNIETpc7R6dQ/nXZ9M6hXNzC9\n9tBdpay9v2OMuYTKEsKRSJMHduqggJ20BrcmriSnl4lSAMCi1th2YW9RhaomCjCf\ntPaMqlKZrE2JjII3u+OKcRz4OaGIkpbL3/RL9ubiGihz0wAmz9gXOMhgL4xvyCOm\n6v1bJKiOrYLqP2fq2gtn/xBxVlyDQZ9JG2FMfRaswLielebiVR35Eb2jHgg6ozCh\n3Ro9AmQl8XYT4767tSSPeWagf3UTLkkPWV3hMwLB1GtIBnQUf7PiruWLk+UHdeTW\nzP0SOOvOogrjeThLTNBbCPYqFY3mVFv+RTyMxmyC9wOpOI371h+xjvNtpzN+jp/r\nqAEIk/ul+BKKnVBma3OzofRLZW6XQbGUE4RFILxQjt3oS/G4nW+rsy+VqwQEoBM2\n5rgsIjyg8Rls2cF6Q2OuiYydoFhNDxY7tQtUtiLbT5Cqxe4LEymvkmS/VfHoKuYh\nahh0EBGPbmlSEkbrV0NN4hokeT66IMYmtnDhIWGZpCus8BdwNjc=\n=MOxF\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwILpj9GdVN1ZIXQLwpkWkDhYgtNziA+LBDkCV8d+dGCYQCP/wEC5l6HZzE9ck\n67iOUBi8clQI8QRfkrW48Agi8AAhB7CyZgCD3+MNLvkMjiwraHR0cHM6Ly9ib2Iu\nYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZ//wEF+EgdyjCSSPLojjPcoO\nSEgI8QRfkrW68AgYIaurc3kIDACD3+MNLvkMjikoaHR0cHM6Ly9maW5uZXkuY2Fs\nZW5kYXIuZXRlcm5pdHl3YWxsLmNvbf/wENylP4xGbDEWyBf/WQx76VMI8QRfkrW4\n8Aip/rf+KGAeiACD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5idGMuY2FsZW5kYXIu\nb3BlbnRpbWVzdGFtcHMub3Jn8BDnV2qH4cyac1sBucsESfT3CPEEX5K1uPAI7u42\nQXdqUfIAg9/jDS75DI4jImh0dHBzOi8vYnRjLmNhbGVuZGFyLmNhdGFsbGF4eS5j\nb20=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 7209bcb63f2cc15e3e42beddf852e97394ee3902\nparent 84fc42f32c8f649918e3db55d1dcc62d9f402224\nauthor Jon Atack <jon@atack.com> 1593180303 +0200\ncommitter Jon Atack <jon@atack.com> 1603450294 +0200\n\ntest: refactor rpc_psbt.py for walletcreatefundedpsbt feerate coverage\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b498b9b6aa4d2d7c1d316f9ab4bc4c96728cd6a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1b498b9b6aa4d2d7c1d316f9ab4bc4c96728cd6a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b498b9b6aa4d2d7c1d316f9ab4bc4c96728cd6a/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "84fc42f32c8f649918e3db55d1dcc62d9f402224",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/84fc42f32c8f649918e3db55d1dcc62d9f402224",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/84fc42f32c8f649918e3db55d1dcc62d9f402224"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 10,
      "deletions": 6
    },
    "files": [
      {
        "sha": "790c857d5851a92780aae92ff53ac579b7a4511d",
        "filename": "test/functional/rpc_psbt.py",
        "status": "modified",
        "additions": 10,
        "deletions": 6,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b498b9b6aa4d2d7c1d316f9ab4bc4c96728cd6a/test/functional/rpc_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b498b9b6aa4d2d7c1d316f9ab4bc4c96728cd6a/test/functional/rpc_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_psbt.py?ref=1b498b9b6aa4d2d7c1d316f9ab4bc4c96728cd6a",
        "patch": "@@ -174,8 +174,11 @@ def run_test(self):\n             elif out['scriptPubKey']['addresses'][0] == p2pkh:\n                 p2pkh_pos = out['n']\n \n+        inputs = [{\"txid\": txid, \"vout\": p2wpkh_pos}, {\"txid\": txid, \"vout\": p2sh_p2wpkh_pos}, {\"txid\": txid, \"vout\": p2pkh_pos}]\n+        addr = {self.nodes[1].getnewaddress(): 29.99}\n+\n         # spend single key from node 1\n-        created_psbt = self.nodes[1].walletcreatefundedpsbt([{\"txid\":txid,\"vout\":p2wpkh_pos},{\"txid\":txid,\"vout\":p2sh_p2wpkh_pos},{\"txid\":txid,\"vout\":p2pkh_pos}], {self.nodes[1].getnewaddress():29.99})\n+        created_psbt = self.nodes[1].walletcreatefundedpsbt(inputs, addr)\n         walletprocesspsbt_out = self.nodes[1].walletprocesspsbt(created_psbt['psbt'])\n         # Make sure it has both types of UTXOs\n         decoded = self.nodes[1].decodepsbt(walletprocesspsbt_out['psbt'])\n@@ -186,14 +189,15 @@ def run_test(self):\n         assert_equal(walletprocesspsbt_out['complete'], True)\n         self.nodes[1].sendrawtransaction(self.nodes[1].finalizepsbt(walletprocesspsbt_out['psbt'])['hex'])\n \n-        # feeRate of 0.1 BTC / KB produces a total fee slightly below -maxtxfee (~0.05280000):\n-        res = self.nodes[1].walletcreatefundedpsbt([{\"txid\":txid,\"vout\":p2wpkh_pos},{\"txid\":txid,\"vout\":p2sh_p2wpkh_pos},{\"txid\":txid,\"vout\":p2pkh_pos}], {self.nodes[1].getnewaddress():29.99}, 0, {\"feeRate\": 0.1, \"add_inputs\": True})\n+        self.log.info(\"Test feeRate of 0.1 BTC / KB produces a total fee slightly below -maxtxfee (~0.05280000)\")\n+        res = self.nodes[1].walletcreatefundedpsbt(inputs, addr, 0, {\"feeRate\": 0.1, \"add_inputs\": True})\n         assert_approx(res[\"fee\"], 0.055, 0.005)\n \n-        # feeRate of 10 BTC / KB produces a total fee well above -maxtxfee\n+        self.log.info(\"Test feeRate of 10 BTC/KB produces total fee well above -maxtxfee and raises RPC error\")\n         # previously this was silently capped at -maxtxfee\n-        assert_raises_rpc_error(-4, \"Fee exceeds maximum configured by user (e.g. -maxtxfee, maxfeerate)\", self.nodes[1].walletcreatefundedpsbt, [{\"txid\":txid,\"vout\":p2wpkh_pos},{\"txid\":txid,\"vout\":p2sh_p2wpkh_pos},{\"txid\":txid,\"vout\":p2pkh_pos}], {self.nodes[1].getnewaddress():29.99}, 0, {\"feeRate\": 10, \"add_inputs\": True})\n-        assert_raises_rpc_error(-4, \"Fee exceeds maximum configured by user (e.g. -maxtxfee, maxfeerate)\", self.nodes[1].walletcreatefundedpsbt, [{\"txid\":txid,\"vout\":p2wpkh_pos},{\"txid\":txid,\"vout\":p2sh_p2wpkh_pos},{\"txid\":txid,\"vout\":p2pkh_pos}], {self.nodes[1].getnewaddress():1}, 0, {\"feeRate\": 10, \"add_inputs\": False})\n+        for bool_add, addr in {True: addr, False: {self.nodes[1].getnewaddress(): 1}}.items():\n+            assert_raises_rpc_error(-4, \"Fee exceeds maximum configured by user (e.g. -maxtxfee, maxfeerate)\",\n+                                    self.nodes[1].walletcreatefundedpsbt, inputs, addr, 0, {\"feeRate\": 10, \"add_inputs\": bool_add})\n \n         # partially sign multisig things with node 1\n         psbtx = wmulti.walletcreatefundedpsbt(inputs=[{\"txid\":txid,\"vout\":p2wsh_pos},{\"txid\":txid,\"vout\":p2sh_pos},{\"txid\":txid,\"vout\":p2sh_p2wsh_pos}], outputs={self.nodes[1].getnewaddress():29.99}, options={'changeAddress': self.nodes[1].getrawchangeaddress()})['psbt']"
      }
    ]
  },
  {
    "sha": "6ad143c294858af93d22012c2d52997b05db0028",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YWQxNDNjMjk0ODU4YWY5M2QyMjAxMmMyZDUyOTk3YjA1ZGIwMDI4",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-06-26T14:06:43Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-10-23T10:51:36Z"
      },
      "message": "wallet: add walletcreatefundedpsbt feerate coverage",
      "tree": {
        "sha": "416c9ec2cbcdd03958796c00b2bca0b625938ca8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/416c9ec2cbcdd03958796c00b2bca0b625938ca8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6ad143c294858af93d22012c2d52997b05db0028",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAl+StbkACgkQT1chs9Dj\nkh17LRAAwnQcOxilpk1vDJtaU0NOsPQrLUpMPRLbbmd6+pxPSxVmQfh/3PDTtAIL\nEYqKoVITh7DJ9f60RA+0t7+h7K4yUTi01d6H1sK+76zFHsODV//t42Eiw0SY/kOy\n4y6tx1sg6zisTWKIDMP2NKQW+GLt35SlUu55aER98JwZTL8g1nK2qORIYQEzg0+K\naNyyVv5K0I+RWgc9rrNGHq7gIwFIpOFib9XoKzQ42Wxv+lye95T/4e/kYSHVxPSr\n6jJqzqHbjPaYyzQhP5ChY2xhcitxyQLLBzXDSBdtNSfrfzRTQoYH4aRDg9Dk6VFT\nsOKG7MHgjdL82uRJgJCWZ+Uz3oqIoFEC3xKxWR1pLVyPy3TBK7w+747nv8v1MhJY\niZEA9WFbYi1vDKbW9ugj03Mt5rzQJYbyvBErlmMUh0tr+DlnZ9j0zkRHTEhSWYKA\nf9puvEIEvYVlO9u3sF5ZtUCVy8PAdzeYDNuQVqR8DkLsu3ZpjrtpU1zAKXSZaVUd\n+Mxv54avJQj/k8VobDhOP9k+HJ5Al/SBoD3VGvWZLf3rhO7LlvXRfSiTkaqYK0l4\nR7uja8+3Ut7B8nVawwbiHII45usCdAygwglCnZlukEYMt6vwn5v2AfP5+SXPZHoE\n1qYPlrT/Zne8yadVoArhN1Ow7Pc98pK6n058kfBmOSx10uOL58E=\n=TZXT\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIK5PalrM9jDPpXzGibk4pe9vnZgzaiBDSLit8ZeRUEk+CP/wEAMhPho3aZ34\nlFJKSSteu8wI8QRfkrW68AhQjD8NOsDc6gCD3+MNLvkMjiwraHR0cHM6Ly9ib2Iu\nYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZ//wEMIEemd7pQ9lW5fMBHio\n3cgI8QRfkrW68Ag6YoBYPN8i6wCD3+MNLvkMjiMiaHR0cHM6Ly9idGMuY2FsZW5k\nYXIuY2F0YWxsYXh5LmNvbf/wEOuYv/EUHkoJF+uA4BxiNnMI8SBiOiJ1W3J8f2Rm\nSGlUAarO+SNN/DvpeA510dO1gU6fYQjxBF+StbzwCIi0/d7S8eCmAIPf4w0u+QyO\nKShodHRwczovL2Zpbm5leS5jYWxlbmRhci5ldGVybml0eXdhbGwuY29t8BDy4xD1\nLUKb2eOVRHI63/ubCPEEX5K1uvAI/VT8RQVBr5UAg9/jDS75DI4uLWh0dHBzOi8v\nYWxpY2UuYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZw==\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 416c9ec2cbcdd03958796c00b2bca0b625938ca8\nparent 1b498b9b6aa4d2d7c1d316f9ab4bc4c96728cd6a\nauthor Jon Atack <jon@atack.com> 1593180403 +0200\ncommitter Jon Atack <jon@atack.com> 1603450296 +0200\n\nwallet: add walletcreatefundedpsbt feerate coverage\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ad143c294858af93d22012c2d52997b05db0028",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6ad143c294858af93d22012c2d52997b05db0028",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ad143c294858af93d22012c2d52997b05db0028/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1b498b9b6aa4d2d7c1d316f9ab4bc4c96728cd6a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b498b9b6aa4d2d7c1d316f9ab4bc4c96728cd6a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1b498b9b6aa4d2d7c1d316f9ab4bc4c96728cd6a"
      }
    ],
    "stats": {
      "total": 38,
      "additions": 37,
      "deletions": 1
    },
    "files": [
      {
        "sha": "9390a01b241498318c650010a4b37e96aff77141",
        "filename": "test/functional/rpc_psbt.py",
        "status": "modified",
        "additions": 37,
        "deletions": 1,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ad143c294858af93d22012c2d52997b05db0028/test/functional/rpc_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ad143c294858af93d22012c2d52997b05db0028/test/functional/rpc_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_psbt.py?ref=6ad143c294858af93d22012c2d52997b05db0028",
        "patch": "@@ -189,10 +189,46 @@ def run_test(self):\n         assert_equal(walletprocesspsbt_out['complete'], True)\n         self.nodes[1].sendrawtransaction(self.nodes[1].finalizepsbt(walletprocesspsbt_out['psbt'])['hex'])\n \n-        self.log.info(\"Test feeRate of 0.1 BTC / KB produces a total fee slightly below -maxtxfee (~0.05280000)\")\n+        self.log.info(\"Test feeRate of 0.1 BTC / KB produces a total fee at or slightly below -maxtxfee (~0.05290000)\")\n         res = self.nodes[1].walletcreatefundedpsbt(inputs, addr, 0, {\"feeRate\": 0.1, \"add_inputs\": True})\n         assert_approx(res[\"fee\"], 0.055, 0.005)\n \n+        self.log.info(\"Test passing walletcreatefundedpsbt explicit feerate with conf_target and estimate_mode\")\n+        for unit, feerate in {\"btc/kb\": 0.1, \"sat/b\": 10000}.items():\n+            fee = self.nodes[1].walletcreatefundedpsbt(inputs, addr, 0, {\"conf_target\": feerate, \"estimate_mode\": unit, \"add_inputs\": True})[\"fee\"]\n+            self.log.info(\"- conf_target {}, estimate_mode {} produces fee {} at or slightly below -maxtxfee (~0.05290000)\".format(feerate, unit, fee))\n+            assert_approx(fee, vexp=0.055, vspan=0.005)\n+\n+        for field, feerate in {\"conf_target\": 0.1, \"estimate_mode\": \"sat/b\"}.items():\n+            self.log.info(\"Test walletcreatefundedpsbt raises RPC error if both feeRate and {} are passed\".format(field))\n+            assert_raises_rpc_error(\n+                -8, \"Cannot specify both {} and feeRate\".format(field),\n+                lambda: self.nodes[1].walletcreatefundedpsbt(inputs, addr, 0, {\"feeRate\": 0.1, field: feerate, \"add_inputs\": True}))\n+\n+        self.log.info(\"Test walletcreatefundedpsbt with invalid estimate_mode settings\")\n+        for k, v in {\"number\": 42, \"object\": {\"foo\": \"bar\"}}.items():\n+            assert_raises_rpc_error(-3, \"Expected type string for estimate_mode, got {}\".format(k),\n+                lambda: self.nodes[1].walletcreatefundedpsbt(inputs, addr, 0, {\"estimate_mode\": v, \"conf_target\": 0.1, \"add_inputs\": True}))\n+        for mode in [\"foo\", Decimal(\"3.141592\")]:\n+            assert_raises_rpc_error(-8, \"Invalid estimate_mode parameter\",\n+                lambda: self.nodes[1].walletcreatefundedpsbt(inputs, addr, 0, {\"estimate_mode\": mode, \"conf_target\": 0.1, \"add_inputs\": True}))\n+\n+        self.log.info(\"Test walletcreatefundedpsbt with invalid conf_target settings\")\n+        for mode in [\"unset\", \"economical\", \"conservative\", \"btc/kb\", \"sat/b\"]:\n+            self.log.debug(\"{}\".format(mode))\n+            for k, v in {\"string\": \"\", \"object\": {\"foo\": \"bar\"}}.items():\n+                assert_raises_rpc_error(-3, \"Expected type number for conf_target, got {}\".format(k),\n+                    lambda: self.nodes[1].walletcreatefundedpsbt(inputs, addr, 0, {\"estimate_mode\": mode, \"conf_target\": v, \"add_inputs\": True}))\n+            if mode in [\"btc/kb\", \"sat/b\"]:\n+                assert_raises_rpc_error(-3, \"Amount out of range\",\n+                    lambda: self.nodes[1].walletcreatefundedpsbt(inputs, addr, 0, {\"estimate_mode\": mode, \"conf_target\": -1, \"add_inputs\": True}))\n+                assert_raises_rpc_error(-4, \"Fee rate (0.00000000 BTC/kB) is lower than the minimum fee rate setting (0.00001000 BTC/kB)\",\n+                    lambda: self.nodes[1].walletcreatefundedpsbt(inputs, addr, 0, {\"estimate_mode\": mode, \"conf_target\": 0, \"add_inputs\": True}))\n+            else:\n+                for n in [-1, 0, 1009]:\n+                    assert_raises_rpc_error(-8, \"Invalid conf_target, must be between 1 and 1008\",\n+                        lambda: self.nodes[1].walletcreatefundedpsbt(inputs, addr, 0, {\"estimate_mode\": mode, \"conf_target\": n, \"add_inputs\": True}))\n+\n         self.log.info(\"Test feeRate of 10 BTC/KB produces total fee well above -maxtxfee and raises RPC error\")\n         # previously this was silently capped at -maxtxfee\n         for bool_add, addr in {True: addr, False: {self.nodes[1].getnewaddress(): 1}}.items():"
      }
    ]
  },
  {
    "sha": "77a4f98897ab4430311cff3f2226f274fad20d6a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3N2E0Zjk4ODk3YWI0NDMwMzExY2ZmM2YyMjI2ZjI3NGZhZDIwZDZh",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-10-19T12:23:35Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-10-23T10:51:38Z"
      },
      "message": "wallet, rpc: improve rpc send subtract_fee_from_outputs help",
      "tree": {
        "sha": "29be47b8b60a5ea0372d6bdafb7803f3a2cea11a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/29be47b8b60a5ea0372d6bdafb7803f3a2cea11a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/77a4f98897ab4430311cff3f2226f274fad20d6a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAl+StbsACgkQT1chs9Dj\nkh2JjQ//W5TsGxkCDwOOK4uDljTuzbNx6LN00Ec7KazsoUZD/+Yc2H+YDRi2ezcG\nqezLa8NKWoJoaJ8NI6DcS/6LO1cSl9d7PfYB8yD44AvLFvZOi0bYGh8dKzgk3pUZ\nWpTT5ZoseL9FHA4MCAXcQzF5zmF/pLHL2Ys3hmDxK/Ha9ctUDAHuBmYA2Hn1DFpi\nM0uM1u9p63HkuLoNhRibtS6RqcgZLJoDAC131yvJ5pF3EEXyhiIp89kOZGIZLwya\ngU8rIiExZDoUC+OXaUcO1L0rr1+RIYc218rt4pnvDpwuvJdiBgc9hAiwr1Z3JtIL\noWnVTzijYIodfrB96Is40SzJXW/Ss67NpGst9Wt7Cg9up2Yc6GsQpjKSwh1NQG9t\nlEMUgenTlBRwNkBWM+C5FxzAlUlX/OMEu1EqORwYO2Vc9Qa/EIuAfwAfCZL5izuC\nkDz58iRsO6EDsA+G+FsTZsJg87z+UQ79NaamrkhJQVkNBxwHrBQHwix84SVxsfah\nMPtitMc/qsBYE1UHOZJ2FRKwLIAN4YdRJC5anUiAKzJx8ctl630iM8UWneSgzgN5\nVFvYB1vHW5VQlKaM99NvJiVP57QP0Hg+9zeGtm00lOe7sXlkVzpCY1DS4BoiV78/\nLBsOC4QOtDWvHBRVB+w23Is5JXY6pheLv/H1ldsHBkWdK3PYflk=\n=DsBM\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIDYf3yI5NPeFcyW2FPD1V68db2SMaj+Qw5bhgf2iB1fXCP/wEGgAzs6vLiVV\nvc3bmSmpLPAI8QRfkrW88AhnVesFwbFFjgCD3+MNLvkMjiMiaHR0cHM6Ly9idGMu\nY2FsZW5kYXIuY2F0YWxsYXh5LmNvbf/wEIqZF+u2ednsUAT7IgFgbjwI8SCj8r3y\n2hLiLunb/mweDXuct5MMnH1F89Ggt7z2+NhgUAjxBF+Stb7wCB4yo7D3gM8LAIPf\n4w0u+QyOKShodHRwczovL2Zpbm5leS5jYWxlbmRhci5ldGVybml0eXdhbGwuY29t\n//AQ6ncir4d+ofgFGUN2CqNeOwjxIBiszwnGemnYlXa7d7cj3NDIRA7Lsuy28uks\nm62yDrHnCPEEX5K1vPAIgcuvAZ8di/oAg9/jDS75DI4sK2h0dHBzOi8vYm9iLmJ0\nYy5jYWxlbmRhci5vcGVudGltZXN0YW1wcy5vcmfwEOxjtweD55BU14onOWniRWgI\n8QRfkrW88AgCxx+ar8TzjgCD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5idGMuY2Fs\nZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 29be47b8b60a5ea0372d6bdafb7803f3a2cea11a\nparent 6ad143c294858af93d22012c2d52997b05db0028\nauthor Jon Atack <jon@atack.com> 1603110215 +0200\ncommitter Jon Atack <jon@atack.com> 1603450298 +0200\n\nwallet, rpc: improve rpc send subtract_fee_from_outputs help\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77a4f98897ab4430311cff3f2226f274fad20d6a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/77a4f98897ab4430311cff3f2226f274fad20d6a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77a4f98897ab4430311cff3f2226f274fad20d6a/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6ad143c294858af93d22012c2d52997b05db0028",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ad143c294858af93d22012c2d52997b05db0028",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6ad143c294858af93d22012c2d52997b05db0028"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "2838d16634fdb21075dac62cc7b936a99dfc8687",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77a4f98897ab4430311cff3f2226f274fad20d6a/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77a4f98897ab4430311cff3f2226f274fad20d6a/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=77a4f98897ab4430311cff3f2226f274fad20d6a",
        "patch": "@@ -4034,7 +4034,7 @@ static RPCHelpMan send()\n                     {\"locktime\", RPCArg::Type::NUM, /* default */ \"0\", \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n                     {\"lock_unspents\", RPCArg::Type::BOOL, /* default */ \"false\", \"Lock selected unspent outputs\"},\n                     {\"psbt\", RPCArg::Type::BOOL,  /* default */ \"automatic\", \"Always return a PSBT, implies add_to_wallet=false.\"},\n-                    {\"subtract_fee_from_outputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"A JSON array of integers.\\n\"\n+                    {\"subtract_fee_from_outputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"Outputs to subtract the fee from, specified as integer indices.\\n\"\n                     \"The fee will be equally deducted from the amount of each specified output.\\n\"\n                     \"Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\"\n                     \"If no outputs are specified here, the sender pays the fee.\","
      }
    ]
  },
  {
    "sha": "f97a3cd3e6e229305a4451d611d77cbf3892381f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmOTdhM2NkM2U2ZTIyOTMwNWE0NDUxZDYxMWQ3N2NiZjM4OTIzODFm",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-10-22T15:19:38Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-10-23T10:51:40Z"
      },
      "message": "wallet, rpc: update rpc \"conf_target\" helps with missing units/info\n\nfor sendtoaddress, sendmany, send, fundrawtransaction, walletcreatefundedpsbt, bumpfee",
      "tree": {
        "sha": "3998607d78ad412362ef08270ba23424cf421307",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3998607d78ad412362ef08270ba23424cf421307"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f97a3cd3e6e229305a4451d611d77cbf3892381f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAl+Stb0ACgkQT1chs9Dj\nkh2EpQ//QZp9n4Jc/biHDR/kDpm4YqFt8bzzzC58WmK+oFDqQXtHHFU+Pndc77Wd\ns9Mf7X0gwujJlb0im0SnplUJ26Ai9caUjill1eni4FeIo+DqK0m+Zhul6Z+IkE2v\n5RZivQYWERfCfN620y9LxY2yvYFCCJFMNvLrhRm9oCtx6yufsc1uphlW5gcvOCYQ\nLgA4KkoP7HDL0QVkrBOGhzmlJ+uvfoy/S4bDpVRSOwOCttH6uYGkI+aG7Yc5IV3S\nK0Uq/HEbCsTAYp7Im/SfIRSWyidgC/qhNsluMZ56rq/opZefaBskfAE4Q3KTEZq9\nmMiOuqMUBANeoHkJQB2ojOkrtLkeoMgnPDq4I6sRS5pvd7BrcyBgzhLd1T79gCJN\nbQIbYFWhAHkBawYt7VQ9OJ4MCP6IfNmlMU5Ueg3YvrRR8ebDAgEdNsIskwGLDMXx\nQy7AsmjdQ489/h5KHKvAmIAra8++XrBPnjERHB0++onYJ7jlM5dCudzuFPWUYbBP\neqGM4Y7MIve2NVuHLGdRxAY+oVK7KSllO6BLv26XjcYfyNZLlY2FAPm7pTmUVB0E\nL2+pBNehlEdKx3v0XfMgKgLbwMGXlYnW8u91GQ+YyEX/m5xtDPTPx5Mf27VPEsB5\nuPvNxhbSaDd8sVVElCMZPPEJ/qgBKTPbDKP6PlI7ddP/y8x+SYE=\n=qlKm\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIMY94/HSL+fFmrPTaDwc2ERqjROaZEBYBMO1o8nPPhueCP/wECVQ/geL2NE7\noJ+FY3Bo1kkI8QRfkrW+8AhoVZ6F+GD3FQCD3+MNLvkMjiwraHR0cHM6Ly9ib2Iu\nYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZ//wEJz61NI3S/Z2PPX5vtgw\nMgkI8QRfkrW+8Ahr23fO77kiZQCD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5idGMu\nY2FsZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn//AQufhD45ngA2pdTin4UxQekwjx\nBF+Stb7wCEgdTuCyPLgmAIPf4w0u+QyOIyJodHRwczovL2J0Yy5jYWxlbmRhci5j\nYXRhbGxheHkuY29t8BD4Jc4Acl3p1AzqGcghLOzYCPEEX5K1wPAIt8ry27Jcy/MA\ng9/jDS75DI4pKGh0dHBzOi8vZmlubmV5LmNhbGVuZGFyLmV0ZXJuaXR5d2FsbC5j\nb20=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 3998607d78ad412362ef08270ba23424cf421307\nparent 77a4f98897ab4430311cff3f2226f274fad20d6a\nauthor Jon Atack <jon@atack.com> 1603379978 +0200\ncommitter Jon Atack <jon@atack.com> 1603450300 +0200\n\nwallet, rpc: update rpc \"conf_target\" helps with missing units/info\n\nfor sendtoaddress, sendmany, send, fundrawtransaction, walletcreatefundedpsbt, bumpfee\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f97a3cd3e6e229305a4451d611d77cbf3892381f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f97a3cd3e6e229305a4451d611d77cbf3892381f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f97a3cd3e6e229305a4451d611d77cbf3892381f/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "77a4f98897ab4430311cff3f2226f274fad20d6a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77a4f98897ab4430311cff3f2226f274fad20d6a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/77a4f98897ab4430311cff3f2226f274fad20d6a"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 16,
      "deletions": 9
    },
    "files": [
      {
        "sha": "739be3b07697cb30c8eb823265ddaab824a608ab",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 9,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f97a3cd3e6e229305a4451d611d77cbf3892381f/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f97a3cd3e6e229305a4451d611d77cbf3892381f/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=f97a3cd3e6e229305a4451d611d77cbf3892381f",
        "patch": "@@ -440,7 +440,8 @@ static RPCHelpMan sendtoaddress()\n                     {\"subtractfeefromamount\", RPCArg::Type::BOOL, /* default */ \"false\", \"The fee will be deducted from the amount being sent.\\n\"\n                                          \"The recipient will receive less bitcoins than you enter in the amount field.\"},\n                     {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"wallet default\", \"Allow this transaction to be replaced by a transaction with higher fees via BIP 125\"},\n-                    {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet default\", \"Confirmation target (in blocks), or fee rate (for \" + CURRENCY_UNIT + \"/kB or \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n+                    {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet -txconfirmtarget\", \"Confirmation target (in blocks)\\n\"\n+                            \"or fee rate (for \" + CURRENCY_UNIT + \"/kB and \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n                     {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n             \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n                     {\"avoid_reuse\", RPCArg::Type::BOOL, /* default */ \"true\", \"(only available if avoid_reuse wallet flag is set) Avoid spending from dirty addresses; addresses are considered\\n\"\n@@ -868,7 +869,8 @@ static RPCHelpMan sendmany()\n                         },\n                     },\n                     {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"wallet default\", \"Allow this transaction to be replaced by a transaction with higher fees via BIP 125\"},\n-                    {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet default\", \"Confirmation target (in blocks), or fee rate (for \" + CURRENCY_UNIT + \"/kB or \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n+                    {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet -txconfirmtarget\", \"Confirmation target (in blocks)\\n\"\n+                            \"or fee rate (for \" + CURRENCY_UNIT + \"/kB and \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n                     {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n             \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n                     {\"verbose\", RPCArg::Type::BOOL, /* default */ \"false\", \"If true, return extra infomration about the transaction.\"},\n@@ -3205,7 +3207,8 @@ static RPCHelpMan fundrawtransaction()\n                             },\n                             {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"wallet default\", \"Marks this transaction as BIP125 replaceable.\\n\"\n                                                           \"Allows this transaction to be replaced by a transaction with higher fees\"},\n-                            {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet default\", \"Confirmation target (in blocks), or fee rate (for \" + CURRENCY_UNIT + \"/kB or \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n+                            {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet -txconfirmtarget\", \"Confirmation target (in blocks)\\n\"\n+                                    \"or fee rate (for \" + CURRENCY_UNIT + \"/kB and \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n                             {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n                             \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n                         },\n@@ -3382,10 +3385,11 @@ static RPCHelpMan bumpfee_helper(std::string method_name)\n             {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The txid to be bumped\"},\n             {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n                 {\n-                    {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet default\", \"Confirmation target (in blocks)\"},\n-                    {\"fee_rate\", RPCArg::Type::NUM, /* default */ \"fall back to 'conf_target'\", \"fee rate (NOT total fee) to pay, in \" + CURRENCY_UNIT + \" per kB\\n\"\n+                    {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet -txconfirmtarget\", \"Confirmation target (in blocks)\\n\"\n+                            \"or fee rate (for \" + CURRENCY_UNIT + \"/kB and \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n+                    {\"fee_rate\", RPCArg::Type::NUM, /* default */ \"fall back to 'conf_target'\", \"fee rate (NOT total fee) to pay, in \" + CURRENCY_UNIT + \"/kB.\\n\"\n                              \"Specify a fee rate instead of relying on the built-in fee estimator.\\n\"\n-                             \"Must be at least 0.0001 \" + CURRENCY_UNIT + \" per kB higher than the current transaction fee rate.\\n\"},\n+                             \"Must be at least 0.0001 \" + CURRENCY_UNIT + \"/kB higher than the current transaction fee rate.\\n\"},\n                     {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"true\", \"Whether the new transaction should still be\\n\"\n                              \"marked bip-125 replaceable. If true, the sequence numbers in the transaction will\\n\"\n                              \"be left unchanged from the original. If false, any input sequence numbers in the\\n\"\n@@ -4008,7 +4012,8 @@ static RPCHelpMan send()\n                     },\n                 },\n             },\n-            {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet default\", \"Confirmation target (in blocks), or fee rate (for \" + CURRENCY_UNIT + \"/kB or \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n+            {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet -txconfirmtarget\", \"Confirmation target (in blocks)\\n\"\n+                    \"or fee rate (for \" + CURRENCY_UNIT + \"/kB and \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n             {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n                         \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n             {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n@@ -4018,7 +4023,8 @@ static RPCHelpMan send()\n                     {\"change_address\", RPCArg::Type::STR_HEX, /* default */ \"pool address\", \"The bitcoin address to receive the change\"},\n                     {\"change_position\", RPCArg::Type::NUM, /* default */ \"random\", \"The index of the change output\"},\n                     {\"change_type\", RPCArg::Type::STR, /* default */ \"set by -changetype\", \"The output type to use. Only valid if change_address is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n-                    {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet default\", \"Confirmation target (in blocks), or fee rate (for \" + CURRENCY_UNIT + \"/kB or \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n+                    {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet -txconfirmtarget\", \"Confirmation target (in blocks)\\n\"\n+                            \"or fee rate (for \" + CURRENCY_UNIT + \"/kB and \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n                     {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n             \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n                     {\"include_watching\", RPCArg::Type::BOOL, /* default */ \"true for watch-only wallets, otherwise false\", \"Also select inputs which are watch only.\\n\"\n@@ -4356,7 +4362,8 @@ static RPCHelpMan walletcreatefundedpsbt()\n                             },\n                             {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"wallet default\", \"Marks this transaction as BIP125 replaceable.\\n\"\n                                                           \"Allows this transaction to be replaced by a transaction with higher fees\"},\n-                            {\"conf_target\", RPCArg::Type::NUM, /* default */ \"fall back to wallet's confirmation target (txconfirmtarget)\", \"Confirmation target (in blocks)\"},\n+                            {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet -txconfirmtarget\", \"Confirmation target (in blocks)\\n\"\n+                                    \"or fee rate (for \" + CURRENCY_UNIT + \"/kB and \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n                             {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n                             \"         \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n                         },"
      }
    ]
  },
  {
    "sha": "0f2eb167ddfa7d2612708d09e05189f969699121",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZjJlYjE2N2RkZmE3ZDI2MTI3MDhkMDllMDUxODlmOTY5Njk5MTIx",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-10-23T16:05:03Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-10-23T18:39:34Z"
      },
      "message": "wallet, rpc: add new fixed-unit fee_rate param (in sat/vB)",
      "tree": {
        "sha": "788b7718e336940fe058b070de58201f9573e62a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/788b7718e336940fe058b070de58201f9573e62a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0f2eb167ddfa7d2612708d09e05189f969699121",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAl+TI2sACgkQT1chs9Dj\nkh2ChQ//TUMuvUlf1cM0LjxhrgFh4ZKZy/WuzW1Rw994Vxr5I/EjD5l3U1D+b7l4\nw4oXi9xAzjgJYBw+a4C+w3a4iUEakFDv4XP6k+UI9WcENM5nOK+L1y84DGBsZ0GM\nuw4G6ejg6Fk0SKJzC/5tfag4/jfU9pm/+3RGc9IJYtCD+Su0/fQFgkNzTaSit5rJ\n3kDV2w+4xQe7iSQv/RTvIJLAynTDe1+wX9rV+RTM2Gphcfaxoiksf97lEi6ii8EK\nyQuFVdoCZqgWNnb6UhoSRdBd/WwJ3jin8DfOWaVBKvB0QSXjiZ18bzSR1vTtLOXE\nwx9J6nEoOtoVfU9/jEurrCUgOemXOs4zoTwLQ3tm+wxiziMxxzBZM8cj5cRwmqTc\n8PWCChpzmqqj7MF0Kre9lznOwVGKisM7Oy9SiMFURGt/5zOpIrhZjJ5+mc/jCz2P\ngUHyK2j0mAlZsrQW7ewQk9kAKYJQtHxsniscSzUpSOzdAR/CuLH42vSPI35A38oU\n3e3dsykr3uSRWptrClx8GXstn7wA6kF/xUlqGtpMgXsnyJggilSWsJG0r0e3ABRY\nWPCwHOhm3nD72nLFno7k3IOPF5FV058DFHKI/WbmkKWv5B1akYHI7Bhg+bQTKgiP\n2g0G8KLRCwwUKkLVPT/GcSczTU4vuXRoQT0zRP6ykUnH5QBsANQ=\n=bCLs\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIFwhGqG7ngkWvr0NOA9QlX8nRNgx5qiu5erjaZT4lXXvCP/wEA4IPbl7z9e+\nPA+FoTFgnAUI8QRfkyNt8AgWgJpr18JIowCD3+MNLvkMjiwraHR0cHM6Ly9ib2Iu\nYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZ//wEDtHWZHOL7pFoTyFsniJ\nT2UI8QRfkyNv8AgsVWcUy+/ICwCD3+MNLvkMjikoaHR0cHM6Ly9maW5uZXkuY2Fs\nZW5kYXIuZXRlcm5pdHl3YWxsLmNvbf/wEFKCWTRkW5PVPvuc/Oem7xEI8QRfkyNt\n8AhAYFGdtxS/zgCD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5idGMuY2FsZW5kYXIu\nb3BlbnRpbWVzdGFtcHMub3Jn8BDhD1OXzh14QvU1avh6l1NECPEEX5MjbfAI3RSS\noC5goSMAg9/jDS75DI4jImh0dHBzOi8vYnRjLmNhbGVuZGFyLmNhdGFsbGF4eS5j\nb20=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 788b7718e336940fe058b070de58201f9573e62a\nparent f97a3cd3e6e229305a4451d611d77cbf3892381f\nauthor Jon Atack <jon@atack.com> 1603469103 +0200\ncommitter Jon Atack <jon@atack.com> 1603478374 +0200\n\nwallet, rpc: add new fixed-unit fee_rate param (in sat/vB)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f2eb167ddfa7d2612708d09e05189f969699121",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0f2eb167ddfa7d2612708d09e05189f969699121",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f2eb167ddfa7d2612708d09e05189f969699121/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f97a3cd3e6e229305a4451d611d77cbf3892381f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f97a3cd3e6e229305a4451d611d77cbf3892381f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f97a3cd3e6e229305a4451d611d77cbf3892381f"
      }
    ],
    "stats": {
      "total": 203,
      "additions": 46,
      "deletions": 157
    },
    "files": [
      {
        "sha": "9a1cea1d4e42b468fca2792e3d2829bccb166c4c",
        "filename": "src/util/fees.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0f2eb167ddfa7d2612708d09e05189f969699121/src/util/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0f2eb167ddfa7d2612708d09e05189f969699121/src/util/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/fees.cpp?ref=0f2eb167ddfa7d2612708d09e05189f969699121",
        "patch": "@@ -40,8 +40,6 @@ const std::vector<std::pair<std::string, FeeEstimateMode>>& FeeModeMap()\n         {\"unset\", FeeEstimateMode::UNSET},\n         {\"economical\", FeeEstimateMode::ECONOMICAL},\n         {\"conservative\", FeeEstimateMode::CONSERVATIVE},\n-        {(CURRENCY_UNIT + \"/kB\"), FeeEstimateMode::BTC_KB},\n-        {(CURRENCY_ATOM + \"/B\"), FeeEstimateMode::SAT_B},\n     };\n     return FEE_MODES;\n }"
      },
      {
        "sha": "a47e267f8f65498cb306762a0196e006805c95f6",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 31,
        "deletions": 45,
        "changes": 76,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0f2eb167ddfa7d2612708d09e05189f969699121/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0f2eb167ddfa7d2612708d09e05189f969699121/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=0f2eb167ddfa7d2612708d09e05189f969699121",
        "patch": "@@ -200,34 +200,22 @@ static std::string LabelFromValue(const UniValue& value)\n  *\n  * @param[in]     pwallet        Wallet pointer\n  * @param[in,out] cc             Coin control which is to be updated\n- * @param[in]     estimate_mode  String value (e.g. \"ECONOMICAL\")\n- * @param[in]     estimate_param Parameter (blocks to confirm, explicit fee rate, etc)\n- * @throws a JSONRPCError if estimate_mode is unknown, or if estimate_param is missing when required\n+ * @param[in]     estimate_mode  UniValue string (\"UNSET\", \"ECONOMICAL\" or \"CONSERVATIVE\")\n+ * @param[in]     conf_target    UniValue integer confirmation target (in blocks)\n+ * @param[in]     fee_rate       UniValue real, fee rate in sat/vB\n+ * @throws a JSONRPCError if estimate_mode is unknown\n  */\n-static void SetFeeEstimateMode(const CWallet* pwallet, CCoinControl& cc, const UniValue& estimate_mode, const UniValue& estimate_param)\n+static void SetFeeEstimateMode(const CWallet* pwallet, CCoinControl& cc, const UniValue& estimate_mode, const UniValue& conf_target, const UniValue& fee_rate)\n {\n-    if (!estimate_mode.isNull()) {\n+    if (!fee_rate.isNull()) {\n+        cc.m_feerate = CFeeRate(AmountFromValue(fee_rate) / WALLET_BTC_KB_TO_SAT_B);\n+        // Default RBF to true for explicit fee_rate, if unset.\n+        if (cc.m_signal_bip125_rbf == nullopt) cc.m_signal_bip125_rbf = true;\n+    } else if (!estimate_mode.isNull() && !conf_target.isNull()) {\n         if (!FeeModeFromString(estimate_mode.get_str(), cc.m_fee_mode)) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid estimate_mode parameter\");\n         }\n-    }\n-\n-    if (cc.m_fee_mode == FeeEstimateMode::BTC_KB || cc.m_fee_mode == FeeEstimateMode::SAT_B) {\n-        if (estimate_param.isNull()) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Selected estimate_mode requires a fee rate\");\n-        }\n-\n-        CAmount fee_rate = AmountFromValue(estimate_param);\n-        if (cc.m_fee_mode == FeeEstimateMode::SAT_B) {\n-            fee_rate /= WALLET_BTC_KB_TO_SAT_B;\n-        }\n-\n-        cc.m_feerate = CFeeRate(fee_rate);\n-\n-        // default RBF to true for explicit fee rate modes\n-        if (cc.m_signal_bip125_rbf == nullopt) cc.m_signal_bip125_rbf = true;\n-    } else if (!estimate_param.isNull()) {\n-        cc.m_confirm_target = ParseConfirmTarget(estimate_param, pwallet->chain().estimateMaxBlocks());\n+        cc.m_confirm_target = ParseConfirmTarget(conf_target, pwallet->chain().estimateMaxBlocks());\n     }\n }\n \n@@ -440,12 +428,12 @@ static RPCHelpMan sendtoaddress()\n                     {\"subtractfeefromamount\", RPCArg::Type::BOOL, /* default */ \"false\", \"The fee will be deducted from the amount being sent.\\n\"\n                                          \"The recipient will receive less bitcoins than you enter in the amount field.\"},\n                     {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"wallet default\", \"Allow this transaction to be replaced by a transaction with higher fees via BIP 125\"},\n-                    {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet -txconfirmtarget\", \"Confirmation target (in blocks)\\n\"\n-                            \"or fee rate (for \" + CURRENCY_UNIT + \"/kB and \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n+                    {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet -txconfirmtarget\", \"Confirmation target (in blocks)\"},\n                     {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n-            \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+                                         \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n                     {\"avoid_reuse\", RPCArg::Type::BOOL, /* default */ \"true\", \"(only available if avoid_reuse wallet flag is set) Avoid spending from dirty addresses; addresses are considered\\n\"\n                                          \"dirty if they have previously been used in a transaction.\"},\n+                    {\"fee_rate\", RPCArg::Type::AMOUNT, /* default */ \"not set, fall back to wallet fee estimation\", \"Set a specific fee rate (in \" + CURRENCY_ATOM + \"/B).\"},\n                     {\"verbose\", RPCArg::Type::BOOL, /* default */ \"false\", \"If true, return extra information about the transaction.\"},\n                 },\n                 {\n@@ -501,7 +489,7 @@ static RPCHelpMan sendtoaddress()\n     // We also enable partial spend avoidance if reuse avoidance is set.\n     coin_control.m_avoid_partial_spends |= coin_control.m_avoid_address_reuse;\n \n-    SetFeeEstimateMode(pwallet, coin_control, request.params[7], request.params[6]);\n+    SetFeeEstimateMode(pwallet, coin_control, request.params[7], request.params[6], request.params[9]);\n \n     EnsureWalletIsUnlocked(pwallet);\n \n@@ -515,7 +503,7 @@ static RPCHelpMan sendtoaddress()\n \n     std::vector<CRecipient> recipients;\n     ParseRecipients(address_amounts, subtractFeeFromAmount, recipients);\n-    bool verbose = request.params[9].isNull() ? false: request.params[9].get_bool();\n+    const bool verbose{request.params[10].isNull() ? false : request.params[10].get_bool()};\n \n     return SendMoney(pwallet, coin_control, recipients, mapValue, verbose);\n },\n@@ -869,10 +857,10 @@ static RPCHelpMan sendmany()\n                         },\n                     },\n                     {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"wallet default\", \"Allow this transaction to be replaced by a transaction with higher fees via BIP 125\"},\n-                    {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet -txconfirmtarget\", \"Confirmation target (in blocks)\\n\"\n-                            \"or fee rate (for \" + CURRENCY_UNIT + \"/kB and \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n+                    {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet -txconfirmtarget\", \"Confirmation target (in blocks)\"},\n                     {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n-            \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+                                       \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+                    {\"fee_rate\", RPCArg::Type::AMOUNT, /* default */ \"not set, fall back to wallet fee estimation\", \"Set a specific fee rate (in \" + CURRENCY_ATOM + \"/B).\"},\n                     {\"verbose\", RPCArg::Type::BOOL, /* default */ \"false\", \"If true, return extra infomration about the transaction.\"},\n                 },\n                 {\n@@ -929,11 +917,11 @@ static RPCHelpMan sendmany()\n         coin_control.m_signal_bip125_rbf = request.params[5].get_bool();\n     }\n \n-    SetFeeEstimateMode(pwallet, coin_control, request.params[7], request.params[6]);\n+    SetFeeEstimateMode(pwallet, coin_control, request.params[7], request.params[6], /* fee_rate=*/request.params[8]);\n \n     std::vector<CRecipient> recipients;\n     ParseRecipients(sendTo, subtractFeeFromAmount, recipients);\n-    bool verbose = request.params[8].isNull() ? false : request.params[8].get_bool();\n+    const bool verbose{request.params[9].isNull() ? false : request.params[9].get_bool()};\n \n     return SendMoney(pwallet, coin_control, recipients, std::move(mapValue), verbose);\n },\n@@ -3129,7 +3117,6 @@ void FundTransaction(CWallet* const pwallet, CMutableTransaction& tx, CAmount& f\n             if (options.exists(\"estimate_mode\")) {\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot specify both estimate_mode and feeRate\");\n             }\n-            coinControl.m_feerate = CFeeRate(AmountFromValue(options[\"feeRate\"]));\n             coinControl.fOverrideFeeRate = true;\n         }\n \n@@ -3139,7 +3126,7 @@ void FundTransaction(CWallet* const pwallet, CMutableTransaction& tx, CAmount& f\n         if (options.exists(\"replaceable\")) {\n             coinControl.m_signal_bip125_rbf = options[\"replaceable\"].get_bool();\n         }\n-        SetFeeEstimateMode(pwallet, coinControl, options[\"estimate_mode\"], options[\"conf_target\"]);\n+        SetFeeEstimateMode(pwallet, coinControl, options[\"estimate_mode\"], options[\"conf_target\"], options[\"feeRate\"]);\n       }\n     } else {\n         // if options is null and not a bool\n@@ -3196,7 +3183,7 @@ static RPCHelpMan fundrawtransaction()\n                                                           \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n                                                           \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n                             {\"lockUnspents\", RPCArg::Type::BOOL, /* default */ \"false\", \"Lock selected unspent outputs\"},\n-                            {\"feeRate\", RPCArg::Type::AMOUNT, /* default */ \"not set: makes wallet determine the fee\", \"Set a specific fee rate in \" + CURRENCY_UNIT + \"/kB\"},\n+                            {\"feeRate\", RPCArg::Type::AMOUNT, /* default */ \"not set, fall back to wallet fee estimation\", \"Set a specific fee rate (in \" + CURRENCY_ATOM + \"/B).\"},\n                             {\"subtractFeeFromOutputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"The integers.\\n\"\n                                                           \"The fee will be equally deducted from the amount of each specified output.\\n\"\n                                                           \"Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\"\n@@ -3207,10 +3194,9 @@ static RPCHelpMan fundrawtransaction()\n                             },\n                             {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"wallet default\", \"Marks this transaction as BIP125 replaceable.\\n\"\n                                                           \"Allows this transaction to be replaced by a transaction with higher fees\"},\n-                            {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet -txconfirmtarget\", \"Confirmation target (in blocks)\\n\"\n-                                    \"or fee rate (for \" + CURRENCY_UNIT + \"/kB and \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n+                            {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet -txconfirmtarget\", \"Confirmation target (in blocks)\"},\n                             {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n-                            \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+                                                          \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n                         },\n                         \"options\"},\n                     {\"iswitness\", RPCArg::Type::BOOL, /* default */ \"depends on heuristic tests\", \"Whether the transaction hex is a serialized witness transaction.\\n\"\n@@ -3476,7 +3462,7 @@ static RPCHelpMan bumpfee_helper(std::string method_name)\n         if (options.exists(\"replaceable\")) {\n             coin_control.m_signal_bip125_rbf = options[\"replaceable\"].get_bool();\n         }\n-        SetFeeEstimateMode(pwallet, coin_control, options[\"estimate_mode\"], conf_target);\n+        SetFeeEstimateMode(pwallet, coin_control, options[\"estimate_mode\"], conf_target, /* fee_rate=*/0);\n     }\n \n     // Make sure the results are valid at least up to the most recent block\n@@ -4023,10 +4009,10 @@ static RPCHelpMan send()\n                     {\"change_address\", RPCArg::Type::STR_HEX, /* default */ \"pool address\", \"The bitcoin address to receive the change\"},\n                     {\"change_position\", RPCArg::Type::NUM, /* default */ \"random\", \"The index of the change output\"},\n                     {\"change_type\", RPCArg::Type::STR, /* default */ \"set by -changetype\", \"The output type to use. Only valid if change_address is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n-                    {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet -txconfirmtarget\", \"Confirmation target (in blocks)\\n\"\n-                            \"or fee rate (for \" + CURRENCY_UNIT + \"/kB and \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n+                    {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet -txconfirmtarget\", \"Confirmation target (in blocks)\"},\n                     {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n-            \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+                            \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+                    {\"feeRate\", RPCArg::Type::AMOUNT, /* default */ \"not set, fall back to wallet fee estimation\", \"Set a specific fee rate (in \" + CURRENCY_ATOM + \"/B).\"},\n                     {\"include_watching\", RPCArg::Type::BOOL, /* default */ \"true for watch-only wallets, otherwise false\", \"Also select inputs which are watch only.\\n\"\n                                           \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n                                           \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n@@ -4537,8 +4523,8 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             \"removeprunedfunds\",                &removeprunedfunds,             {\"txid\"} },\n     { \"wallet\",             \"rescanblockchain\",                 &rescanblockchain,              {\"start_height\", \"stop_height\"} },\n     { \"wallet\",             \"send\",                             &send,                          {\"outputs\",\"conf_target\",\"estimate_mode\",\"options\"} },\n-    { \"wallet\",             \"sendmany\",                         &sendmany,                      {\"dummy\",\"amounts\",\"minconf\",\"comment\",\"subtractfeefrom\",\"replaceable\",\"conf_target\",\"estimate_mode\",\"verbose\"} },\n-    { \"wallet\",             \"sendtoaddress\",                    &sendtoaddress,                 {\"address\",\"amount\",\"comment\",\"comment_to\",\"subtractfeefromamount\",\"replaceable\",\"conf_target\",\"estimate_mode\",\"avoid_reuse\",\"verbose\"} },\n+    { \"wallet\",             \"sendmany\",                         &sendmany,                      {\"dummy\",\"amounts\",\"minconf\",\"comment\",\"subtractfeefrom\",\"replaceable\",\"conf_target\",\"estimate_mode\",\"fee_rate\",\"verbose\"} },\n+    { \"wallet\",             \"sendtoaddress\",                    &sendtoaddress,                 {\"address\",\"amount\",\"comment\",\"comment_to\",\"subtractfeefromamount\",\"replaceable\",\"conf_target\",\"estimate_mode\",\"avoid_reuse\",\"fee_rate\",\"verbose\"} },\n     { \"wallet\",             \"sethdseed\",                        &sethdseed,                     {\"newkeypool\",\"seed\"} },\n     { \"wallet\",             \"setlabel\",                         &setlabel,                      {\"address\",\"label\"} },\n     { \"wallet\",             \"settxfee\",                         &settxfee,                      {\"amount\"} },"
      },
      {
        "sha": "c261001e2207b9b261dbbf9fa51fed15fa4313ab",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 15,
        "deletions": 110,
        "changes": 125,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0f2eb167ddfa7d2612708d09e05189f969699121/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0f2eb167ddfa7d2612708d09e05189f969699121/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=0f2eb167ddfa7d2612708d09e05189f969699121",
        "patch": "@@ -226,60 +226,6 @@ def run_test(self):\n         assert_equal(self.nodes[2].getbalance(), node_2_bal)\n         node_0_bal = self.check_fee_amount(self.nodes[0].getbalance(), node_0_bal + Decimal('10'), fee_per_byte, self.get_vsize(self.nodes[2].gettransaction(txid)['hex']))\n \n-        # Sendmany with explicit fee (BTC/kB)\n-        # Throw if no conf_target provided\n-        assert_raises_rpc_error(-8, \"Selected estimate_mode requires a fee rate\",\n-            self.nodes[2].sendmany,\n-            amounts={ address: 10 },\n-            estimate_mode='bTc/kB')\n-        # Throw if negative feerate\n-        assert_raises_rpc_error(-3, \"Amount out of range\",\n-            self.nodes[2].sendmany,\n-            amounts={ address: 10 },\n-            conf_target=-1,\n-            estimate_mode='bTc/kB')\n-        fee_per_kb = 0.0002500\n-        explicit_fee_per_byte = Decimal(fee_per_kb) / 1000\n-        txid = self.nodes[2].sendmany(\n-            amounts={ address: 10 },\n-            conf_target=fee_per_kb,\n-            estimate_mode='bTc/kB',\n-        )\n-        self.nodes[2].generate(1)\n-        self.sync_all(self.nodes[0:3])\n-        node_2_bal = self.check_fee_amount(self.nodes[2].getbalance(), node_2_bal - Decimal('10'), explicit_fee_per_byte, self.get_vsize(self.nodes[2].gettransaction(txid)['hex']))\n-        assert_equal(self.nodes[2].getbalance(), node_2_bal)\n-        node_0_bal += Decimal('10')\n-        assert_equal(self.nodes[0].getbalance(), node_0_bal)\n-\n-        # Sendmany with explicit fee (SAT/B)\n-        # Throw if no conf_target provided\n-        assert_raises_rpc_error(-8, \"Selected estimate_mode requires a fee rate\",\n-            self.nodes[2].sendmany,\n-            amounts={ address: 10 },\n-            estimate_mode='sat/b')\n-        # Throw if negative feerate\n-        assert_raises_rpc_error(-3, \"Amount out of range\",\n-            self.nodes[2].sendmany,\n-            amounts={ address: 10 },\n-            conf_target=-1,\n-            estimate_mode='sat/b')\n-        fee_sat_per_b = 2\n-        fee_per_kb = fee_sat_per_b / 100000.0\n-        explicit_fee_per_byte = Decimal(fee_per_kb) / 1000\n-        txid = self.nodes[2].sendmany(\n-            amounts={ address: 10 },\n-            conf_target=fee_sat_per_b,\n-            estimate_mode='sAT/b',\n-        )\n-        self.nodes[2].generate(1)\n-        self.sync_all(self.nodes[0:3])\n-        balance = self.nodes[2].getbalance()\n-        node_2_bal = self.check_fee_amount(balance, node_2_bal - Decimal('10'), explicit_fee_per_byte, self.get_vsize(self.nodes[2].gettransaction(txid)['hex']))\n-        assert_equal(balance, node_2_bal)\n-        node_0_bal += Decimal('10')\n-        assert_equal(self.nodes[0].getbalance(), node_0_bal)\n-\n         self.start_node(3, self.nodes[3].extra_args)\n         connect_nodes(self.nodes[0], 3)\n         self.sync_all()\n@@ -411,69 +357,28 @@ def run_test(self):\n             address_to_import = self.nodes[2].getnewaddress()\n             txid = self.nodes[0].sendtoaddress(address_to_import, 1)\n             self.nodes[0].generate(1)\n-            self.sync_all(self.nodes[0:3])\n \n-            # send with explicit btc/kb fee\n-            self.log.info(\"test explicit fee (sendtoaddress as btc/kb)\")\n-            self.nodes[0].generate(1)\n+            self.log.info(\"Test sendtoaddress with explicit feerate sat/vB option)\")\n             self.sync_all(self.nodes[0:3])\n-            prebalance = self.nodes[2].getbalance()\n-            assert prebalance > 2\n-            address = self.nodes[1].getnewaddress()\n-            # Throw if no conf_target provided\n-            assert_raises_rpc_error(-8, \"Selected estimate_mode requires a fee rate\",\n-                self.nodes[2].sendtoaddress,\n-                address=address,\n-                amount=1.0,\n-                estimate_mode='BTc/Kb')\n-            # Throw if negative feerate\n-            assert_raises_rpc_error(-3, \"Amount out of range\",\n-                self.nodes[2].sendtoaddress,\n-                address=address,\n-                amount=1.0,\n-                conf_target=-1,\n-                estimate_mode='btc/kb')\n-            txid = self.nodes[2].sendtoaddress(\n-                address=address,\n-                amount=1.0,\n-                conf_target=0.00002500,\n-                estimate_mode='btc/kb',\n-            )\n-            tx_size = self.get_vsize(self.nodes[2].gettransaction(txid)['hex'])\n-            self.sync_all(self.nodes[0:3])\n-            self.nodes[0].generate(1)\n-            self.sync_all(self.nodes[0:3])\n-            postbalance = self.nodes[2].getbalance()\n-            fee = prebalance - postbalance - Decimal('1')\n-            assert_fee_amount(fee, tx_size, Decimal('0.00002500'))\n-\n-            # send with explicit sat/b fee\n-            self.sync_all(self.nodes[0:3])\n-            self.log.info(\"test explicit fee (sendtoaddress as sat/b)\")\n             self.nodes[0].generate(1)\n             prebalance = self.nodes[2].getbalance()\n             assert prebalance > 2\n             address = self.nodes[1].getnewaddress()\n-            # Throw if no conf_target provided\n-            assert_raises_rpc_error(-8, \"Selected estimate_mode requires a fee rate\",\n-                self.nodes[2].sendtoaddress,\n-                address=address,\n-                amount=1.0,\n-                estimate_mode='SAT/b')\n-            # Throw if negative feerate\n+\n+            # Test that setting a feerate of -1 raises out of range.\n             assert_raises_rpc_error(-3, \"Amount out of range\",\n-                self.nodes[2].sendtoaddress,\n-                address=address,\n-                amount=1.0,\n-                conf_target=-1,\n-                estimate_mode='SAT/b')\n-            txid = self.nodes[2].sendtoaddress(\n-                address=address,\n-                amount=1.0,\n-                conf_target=2,\n-                estimate_mode='SAT/B',\n-            )\n-            tx_size = self.get_vsize(self.nodes[2].gettransaction(txid)['hex'])\n+                                    self.nodes[2].sendtoaddress, address=address, amount=1.0, fee_rate=-1)\n+\n+            # Test that setting feerates of 0, 0.999, and 0.99999 raise for being lower the the minimum feerate setting.\n+            assert_raises_rpc_error(-6, \"Fee rate (0.00000000 BTC/kB) is lower than the minimum fee rate setting (0.00001000 BTC/kB)\",\n+                                    self.nodes[2].sendtoaddress, address=address, amount=1.0, fee_rate=0)\n+            for fee_rate in [0.999, 0.99999]:\n+                assert_raises_rpc_error(-6, \"Fee rate (0.00000999 BTC/kB) is lower than the minimum fee rate setting (0.00001000 BTC/kB)\",\n+                                        self.nodes[2].sendtoaddress, address=address, amount=1.0, fee_rate=fee_rate)\n+\n+            # Test that setting a valid feerate yields the expected result.\n+            txid = self.nodes[2].sendtoaddress(address=address, amount=1.0, fee_rate=2)\n+            tx_size = self.get_vsize(self.nodes[2].gettransaction(txid)[\"hex\"])\n             self.sync_all(self.nodes[0:3])\n             self.nodes[0].generate(1)\n             self.sync_all(self.nodes[0:3])"
      }
    ]
  }
]