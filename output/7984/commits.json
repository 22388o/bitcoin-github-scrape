[
  {
    "sha": "bb29ad388f546f72a46f6c111326fb82deb77d82",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYjI5YWQzODhmNTQ2ZjcyYTQ2ZjZjMTExMzI2ZmI4MmRlYjc3ZDgy",
    "commit": {
      "author": {
        "name": "Andrew",
        "email": "achow101@gmail.com",
        "date": "2016-04-26T20:13:18Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101@gmail.com",
        "date": "2016-05-01T18:38:44Z"
      },
      "message": "add parameters for optional start height for rescans\n\nWhen importing an address, privkey, or pubkey, there is now an option which allows users to set the height from which to start rescanning to save time.",
      "tree": {
        "sha": "16c168c29b302b236ddc629cdad9ab1393ebc897",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/16c168c29b302b236ddc629cdad9ab1393ebc897"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bb29ad388f546f72a46f6c111326fb82deb77d82",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb29ad388f546f72a46f6c111326fb82deb77d82",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bb29ad388f546f72a46f6c111326fb82deb77d82",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb29ad388f546f72a46f6c111326fb82deb77d82/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0ad104190465d8d65c2344bbe10dcf3df025d86c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ad104190465d8d65c2344bbe10dcf3df025d86c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0ad104190465d8d65c2344bbe10dcf3df025d86c"
      }
    ],
    "stats": {
      "total": 43,
      "additions": 33,
      "deletions": 10
    },
    "files": [
      {
        "sha": "7548e443cfddd656e572e2d4c60483f9a0fbb05a",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb29ad388f546f72a46f6c111326fb82deb77d82/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb29ad388f546f72a46f6c111326fb82deb77d82/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=bb29ad388f546f72a46f6c111326fb82deb77d82",
        "patch": "@@ -87,9 +87,12 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"lockunspent\", 0 },\n     { \"lockunspent\", 1 },\n     { \"importprivkey\", 2 },\n+    { \"importprivkey\", 3 },\n     { \"importaddress\", 2 },\n     { \"importaddress\", 3 },\n+    { \"importaddress\", 4 },\n     { \"importpubkey\", 2 },\n+    { \"importpubkey\", 3 },\n     { \"verifychain\", 0 },\n     { \"verifychain\", 1 },\n     { \"keypoolrefill\", 0 },"
      },
      {
        "sha": "a295fd0f1e3b959515f9f6ae196eb493d5d3cfe1",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 30,
        "deletions": 10,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb29ad388f546f72a46f6c111326fb82deb77d82/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb29ad388f546f72a46f6c111326fb82deb77d82/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=bb29ad388f546f72a46f6c111326fb82deb77d82",
        "patch": "@@ -79,14 +79,15 @@ UniValue importprivkey(const UniValue& params, bool fHelp)\n     if (!EnsureWalletIsAvailable(fHelp))\n         return NullUniValue;\n     \n-    if (fHelp || params.size() < 1 || params.size() > 3)\n+    if (fHelp || params.size() < 1 || params.size() > 4)\n         throw runtime_error(\n-            \"importprivkey \\\"bitcoinprivkey\\\" ( \\\"label\\\" rescan )\\n\"\n+            \"importprivkey \\\"bitcoinprivkey\\\" ( \\\"label\\\" rescan fromheight )\\n\"\n             \"\\nAdds a private key (as returned by dumpprivkey) to your wallet.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"bitcoinprivkey\\\"   (string, required) The private key (see dumpprivkey)\\n\"\n             \"2. \\\"label\\\"            (string, optional, default=\\\"\\\") An optional label\\n\"\n             \"3. rescan               (boolean, optional, default=true) Rescan the wallet for transactions\\n\"\n+            \"4. fromheight\t     (numeric, optional, default=0) If rescanning, start rescanning from this height\\n\"\n             \"\\nNote: This call can take minutes to complete if rescan is true.\\n\"\n             \"\\nExamples:\\n\"\n             \"\\nDump a private key\\n\"\n@@ -145,7 +146,13 @@ UniValue importprivkey(const UniValue& params, bool fHelp)\n         pwalletMain->nTimeFirstKey = 1; // 0 would be considered 'no value'\n \n         if (fRescan) {\n-            pwalletMain->ScanForWalletTransactions(chainActive.Genesis(), true);\n+            \n+        // Get the start height\n+        CBlockIndex *start = chainActive.Genesis();\n+        if (params.size() > 3 && fRescan)\n+            start = chainActive[params[3].get_int()];\n+\n+            pwalletMain->ScanForWalletTransactions(start, true);\n         }\n     }\n \n@@ -184,15 +191,16 @@ UniValue importaddress(const UniValue& params, bool fHelp)\n     if (!EnsureWalletIsAvailable(fHelp))\n         return NullUniValue;\n     \n-    if (fHelp || params.size() < 1 || params.size() > 4)\n+    if (fHelp || params.size() < 1 || params.size() > 5)\n         throw runtime_error(\n-            \"importaddress \\\"address\\\" ( \\\"label\\\" rescan p2sh )\\n\"\n+            \"importaddress \\\"address\\\" ( \\\"label\\\" rescan p2sh fromheight )\\n\"\n             \"\\nAdds a script (in hex) or address that can be watched as if it were in your wallet but cannot be used to spend.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"script\\\"           (string, required) The hex-encoded script (or address)\\n\"\n             \"2. \\\"label\\\"            (string, optional, default=\\\"\\\") An optional label\\n\"\n             \"3. rescan               (boolean, optional, default=true) Rescan the wallet for transactions\\n\"\n             \"4. p2sh                 (boolean, optional, default=false) Add the P2SH version of the script as well\\n\"\n+            \"5. fromheight\t     (numeric, optional, default=0) If rescanning, start rescanning from this height\\n\"\n             \"\\nNote: This call can take minutes to complete if rescan is true.\\n\"\n             \"If you have the full public key, you should call importpubkey instead of this.\\n\"\n             \"\\nExamples:\\n\"\n@@ -238,7 +246,12 @@ UniValue importaddress(const UniValue& params, bool fHelp)\n \n     if (fRescan)\n     {\n-        pwalletMain->ScanForWalletTransactions(chainActive.Genesis(), true);\n+        // Get the start height\n+        CBlockIndex* start = chainActive.Genesis();\n+        if (params.size() > 4 && fRescan)\n+            start = chainActive[params[4].get_int()];\n+\n+        pwalletMain->ScanForWalletTransactions(start, true);\n         pwalletMain->ReacceptWalletTransactions();\n     }\n \n@@ -353,14 +366,15 @@ UniValue importpubkey(const UniValue& params, bool fHelp)\n     if (!EnsureWalletIsAvailable(fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() < 1 || params.size() > 4)\n+    if (fHelp || params.size() < 1 || params.size() > 5)\n         throw runtime_error(\n-            \"importpubkey \\\"pubkey\\\" ( \\\"label\\\" rescan )\\n\"\n+            \"importpubkey \\\"pubkey\\\" ( \\\"label\\\" rescan fromheight )\\n\"\n             \"\\nAdds a public key (in hex) that can be watched as if it were in your wallet but cannot be used to spend.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"pubkey\\\"           (string, required) The hex-encoded public key\\n\"\n             \"2. \\\"label\\\"            (string, optional, default=\\\"\\\") An optional label\\n\"\n-            \"3. rescan               (boolean, optional, default=true) Rescan the wallet for transactions\\n\"\n+            \"3. rescan               (boolean, optional, default=true) Rescan the wallet for transactions\\n\"\t\t\t\n+            \"4. fromheight\t     (numeric, optional, default=0) If rescanning, start rescanning from this height\\n\"\n             \"\\nNote: This call can take minutes to complete if rescan is true.\\n\"\n             \"\\nExamples:\\n\"\n             \"\\nImport a public key with rescan\\n\"\n@@ -398,7 +412,13 @@ UniValue importpubkey(const UniValue& params, bool fHelp)\n \n     if (fRescan)\n     {\n-        pwalletMain->ScanForWalletTransactions(chainActive.Genesis(), true);\n+        \n+        // Get the start height\n+        CBlockIndex* start = chainActive.Genesis();\n+        if (params.size() > 3 && fRescan)\n+            start = chainActive[params[3].get_int()];\n+\n+        pwalletMain->ScanForWalletTransactions(start, true);\n         pwalletMain->ReacceptWalletTransactions();\n     }\n "
      }
    ]
  },
  {
    "sha": "175e0f50ece9ec68a3553b4539f7fd49ca483536",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNzVlMGY1MGVjZTllYzY4YTM1NTNiNDUzOWY3ZmQ0OWNhNDgzNTM2",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101@gmail.com",
        "date": "2016-04-30T02:47:24Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101@gmail.com",
        "date": "2016-05-01T18:38:54Z"
      },
      "message": "Optional parameter to init rescan option\n\nAdd the optional parameter to the -rescan command line option to allow rescanning from a block height.",
      "tree": {
        "sha": "f3b65826ffce73887dcdf7d2fd920f31f1ed68fd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f3b65826ffce73887dcdf7d2fd920f31f1ed68fd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/175e0f50ece9ec68a3553b4539f7fd49ca483536",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/175e0f50ece9ec68a3553b4539f7fd49ca483536",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/175e0f50ece9ec68a3553b4539f7fd49ca483536",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/175e0f50ece9ec68a3553b4539f7fd49ca483536/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bb29ad388f546f72a46f6c111326fb82deb77d82",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb29ad388f546f72a46f6c111326fb82deb77d82",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bb29ad388f546f72a46f6c111326fb82deb77d82"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "9e9740b6270c04cae32f6c1f8c1f6b55372b754b",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/175e0f50ece9ec68a3553b4539f7fd49ca483536/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/175e0f50ece9ec68a3553b4539f7fd49ca483536/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=175e0f50ece9ec68a3553b4539f7fd49ca483536",
        "patch": "@@ -3030,7 +3030,7 @@ std::string CWallet::GetWalletHelpString(bool showDebug)\n                                                             CURRENCY_UNIT, FormatMoney(DEFAULT_TRANSACTION_MINFEE)));\n     strUsage += HelpMessageOpt(\"-paytxfee=<amt>\", strprintf(_(\"Fee (in %s/kB) to add to transactions you send (default: %s)\"),\n                                                             CURRENCY_UNIT, FormatMoney(payTxFee.GetFeePerK())));\n-    strUsage += HelpMessageOpt(\"-rescan\", _(\"Rescan the block chain for missing wallet transactions on startup\"));\n+    strUsage += HelpMessageOpt(\"-rescan=<n>\", _(\"Rescan the block chain for missing wallet transactions on startup starting from block n (default: 0)\"));\n     strUsage += HelpMessageOpt(\"-salvagewallet\", _(\"Attempt to recover private keys from a corrupt wallet on startup\"));\n     if (showDebug)\n         strUsage += HelpMessageOpt(\"-sendfreetransactions\", strprintf(_(\"Send transactions as zero-fee transactions if possible (default: %u)\"), DEFAULT_SEND_FREE_TRANSACTIONS));\n@@ -3141,7 +3141,7 @@ bool CWallet::InitLoadWallet()\n \n     CBlockIndex *pindexRescan = chainActive.Tip();\n     if (GetBoolArg(\"-rescan\", false))\n-        pindexRescan = chainActive.Genesis();\n+        pindexRescan = chainActive[GetArg(\"-rescan\", 0)];\n     else\n     {\n         CWalletDB walletdb(walletFile);"
      }
    ]
  },
  {
    "sha": "2297b6ca87c2d8ad7e38524516e5b98bb588c108",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMjk3YjZjYTg3YzJkOGFkN2UzODUyNDUxNmU1Yjk4YmI1ODhjMTA4",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101@gmail.com",
        "date": "2016-05-01T03:06:48Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101@gmail.com",
        "date": "2016-05-01T18:39:00Z"
      },
      "message": "Tests for rescanning from heights\n\nAdd tests for the optional parameters to rescan from height for importaddress, importprivkey, and importpubkey.",
      "tree": {
        "sha": "0163e2f6cc6c24c2e1fcf3cb8ff61860bf944f36",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0163e2f6cc6c24c2e1fcf3cb8ff61860bf944f36"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2297b6ca87c2d8ad7e38524516e5b98bb588c108",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2297b6ca87c2d8ad7e38524516e5b98bb588c108",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2297b6ca87c2d8ad7e38524516e5b98bb588c108",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2297b6ca87c2d8ad7e38524516e5b98bb588c108/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "175e0f50ece9ec68a3553b4539f7fd49ca483536",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/175e0f50ece9ec68a3553b4539f7fd49ca483536",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/175e0f50ece9ec68a3553b4539f7fd49ca483536"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 39,
      "deletions": 1
    },
    "files": [
      {
        "sha": "d6ccb213e5767e39e2e7121cda16d2b85bbd9757",
        "filename": "qa/rpc-tests/wallet.py",
        "status": "modified",
        "additions": 39,
        "deletions": 1,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2297b6ca87c2d8ad7e38524516e5b98bb588c108/qa/rpc-tests/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2297b6ca87c2d8ad7e38524516e5b98bb588c108/qa/rpc-tests/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/wallet.py?ref=2297b6ca87c2d8ad7e38524516e5b98bb588c108",
        "patch": "@@ -21,7 +21,7 @@ def check_fee_amount(self, curr_balance, balance_with_fee, fee_per_byte, tx_size\n \n     def setup_chain(self):\n         print(\"Initializing test directory \"+self.options.tmpdir)\n-        initialize_chain_clean(self.options.tmpdir, 4)\n+        initialize_chain_clean(self.options.tmpdir, 5)\n \n     def setup_network(self, split=False):\n         self.nodes = start_nodes(3, self.options.tmpdir)\n@@ -297,6 +297,44 @@ def run_test (self):\n                            {\"address\": address_to_import},\n                            {\"spendable\": True})\n \n+        # Import address, private key, and public key with rescanning from a specified block height\n+        # 1. Send some coins to generate four new UTXOs.\n+        address_to_import = self.nodes[2].getnewaddress()\n+        for x in xrange(4):\n+            self.nodes[0].sendtoaddress(address_to_import, 1)\n+            self.nodes[0].generate(1)\n+            self.sync_all()\n+        self.nodes[0].generate(1) # Generate one extra block to make the last tx 2 blocks deep.\n+        self.sync_all()\n+\n+        # 2. Import address from node2 to node1\n+        cur_height = self.nodes[1].getblockcount()\n+        self.nodes[1].importaddress(address_to_import, \"\", True, False, cur_height - 1)\n+\n+        # 3. Validate that there is only one UTXO from the imported address\n+        assert_equal(len(self.nodes[1].listunspent(1, 9999999, [address_to_import])), 1)\n+\n+        # 4. Import public key of address from node2 to node0\n+        pub_key = self.nodes[2].validateaddress(address_to_import)['pubkey']\n+        self.nodes[1].importpubkey(pub_key, \"\", True, cur_height - 2)\n+\n+        # 5. Validate that there are only three UTXO from the imported public key\n+        assert_equal(len(self.nodes[1].listunspent(1, 9999999, [address_to_import])), 2)\n+\n+        # 6. Import private key of address from node2 to node1\n+        priv_key = self.nodes[2].dumpprivkey(address_to_import)\n+        self.nodes[1].importprivkey(priv_key, \"\", True, cur_height - 3)\n+\n+        # 7. Validate that there are only two UTXO from the imported private key\n+        assert_equal(len(self.nodes[1].listunspent(1, 9999999, [address_to_import])), 3)\n+\n+        # Reset by rescanning all\n+        stop_nodes(self.nodes)\n+        wait_bitcoinds()\n+        self.nodes = start_nodes(3, self.options.tmpdir, [[\"-rescan\"]] * 3)\n+        connect_nodes_bi(self.nodes,0,1)\n+        connect_nodes_bi(self.nodes,1,2)\n+\n         # Mine a block from node0 to an address from node1\n         cbAddr = self.nodes[1].getnewaddress()\n         blkHash = self.nodes[0].generatetoaddress(1, cbAddr)[0]"
      }
    ]
  }
]