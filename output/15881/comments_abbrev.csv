sipa,2019-04-23T21:02:55Z,"I don't think we want to do this generically, as it will prevent testing the normal relay logic?",https://github.com/bitcoin/bitcoin/pull/15881#issuecomment-485973426,485973426,
MarcoFalke,2019-04-23T21:07:25Z,"This preserves the normal relay logic except that the delay is always zero (for inbound and outbound peers). Testing that there is a difference in the delay between inbound and outbound peers was already impossible, I believe, since we can not create outbound connections.",https://github.com/bitcoin/bitcoin/pull/15881#issuecomment-485974991,485974991,
naumenkogs,2019-04-23T21:20:43Z,"> Testing that there is a difference in the delay between inbound and outbound peers was already impossible, I believe, since we can not create outbound connections.\n\nIt's not fundamentally impossible though, is it? I think remember using part of some stuck PR (Luke's?) to test both directions.\n\nAnyway, could you motivate this change a bit? I see some description in #15858, but it is close",https://github.com/bitcoin/bitcoin/pull/15881#issuecomment-485979354,485979354,
MarcoFalke,2019-04-23T21:38:40Z,Added a commit to make it a regtest command line flag,https://github.com/bitcoin/bitcoin/pull/15881#issuecomment-485984818,485984818,
DrahtBot,2019-04-23T22:52:57Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#15759](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15759.html) ([p2p] Add 2 outbound blocks-only connection",https://github.com/bitcoin/bitcoin/pull/15881#issuecomment-486003228,486003228,
gmaxwell,2019-04-24T05:29:36Z,"I really don't like special casing the tests like this, the more we do this the more tests become useless just for show things-- and, of course, the special casing code itself can contribute to bugs too.  Wouldn't it be better to run some of these tests in parallel so that their latency is less relevant?",https://github.com/bitcoin/bitcoin/pull/15881#issuecomment-486073658,486073658,
AM5800,2019-04-24T08:13:18Z,"@gmaxwell but if there are no tests for delay, what is the point of keeping delay in tests at all? If it breaks, no one will notice it anyway.\n\nAlso on:\n> Testing that there is a difference in the delay between inbound and outbound peers was already impossible, I believe, since we can not create outbound connections.\n\nHow about starting 3 nodes like this: `node0 -> node1 -> node2` and th",https://github.com/bitcoin/bitcoin/pull/15881#issuecomment-486117696,486117696,
AM5800,2019-04-24T08:20:11Z,"By the way, @MarcoFalke, if your intent is to only speedup several tests in which p2p is not test subject - you can just whitelist peers in such tests.",https://github.com/bitcoin/bitcoin/pull/15881#issuecomment-486120128,486120128,
MarcoFalke,2019-04-24T12:03:20Z,"I'd rather not whitelist peers in tests. Not only is it tedious to pass in the command line flag, but also it affects DoS scores and some other things, I believe.",https://github.com/bitcoin/bitcoin/pull/15881#issuecomment-486199483,486199483,
jnewbery,2019-04-24T14:00:51Z,"Concept ACK adding this as default in the functional tests.\n\n> I don't think we want to do this generically, as it will prevent testing the normal relay logic\n\nI can't think of any cases in the functional tests where we do anything except submit a transaction and wait for it to propagate. Running with `m_tx_relay_force_flush` will achieve exactly the same except that wait will be much shor",https://github.com/bitcoin/bitcoin/pull/15881#issuecomment-486245470,486245470,
sdaftuar,2019-04-24T14:39:45Z,"My instinct here is that our design goal should be to make the p2p connections in regtest be more like mainnet, and not less.  We already have a problem that in regtest, we don't exercise our networking code enough (as mentioned in #14210 -- an issue I opened after I got the impression that many people were unaware of our code-coverage deficiences with respect to p2p behavior).  So adding more spe",https://github.com/bitcoin/bitcoin/pull/15881#issuecomment-486270546,486270546,
MarcoFalke,2019-04-24T15:35:30Z,"The response to ""the tests run slow"" shouldn't be ""just run more of them in parallel"". We might have users or developers that would like to run the tests on weak hardware (e.g. dual core cpu or hdd). Those constraints set a limit on how many tests can be run in parallel. Some of the tests might have random sleeps in them, but you can't rely on those because they are -- after all -- *random*.\n\n",https://github.com/bitcoin/bitcoin/pull/15881#issuecomment-486294253,486294253,
jnewbery,2019-04-24T15:53:52Z,":slightly_frowning_face: I much prefer this approach to #15858 and don't see why adding 30 lines of gnarly topo-sort code in the test framework is in any way preferable to adding the one-line change:\n\n```c++\n            bool fSendTrickle = pto->fWhitelisted;\n            bool fSendTrickle = connman->m_tx_relay_force_flush || pto->fWhitelisted;\n```\n\nin `SendMessages()`. If the concern ",https://github.com/bitcoin/bitcoin/pull/15881#issuecomment-486302258,486302258,
gmaxwell,2019-04-24T18:08:00Z,"> The response to ""the tests run slow"" shouldn't be ""just run more of them in parallel""\n\nWhy not?  At least to the extent that slowness is due to sleeps in the protocol design then running them in parallel is a perfectly reasonable response to it.\n\n> but if there are no tests for delay, what is the point of keeping delay in tests at all? If it breaks, no one will notice it anyway.\n\nBec",https://github.com/bitcoin/bitcoin/pull/15881#issuecomment-486364075,486364075,
kostyantyn,2019-04-25T08:55:03Z,"It looks that the main concern is that this PR introduces a new case condition and if we misapply it, some part of the code (concretely `PoissonNextSend`) might not be executed when it's expected to be called or another way around.\n\nWhat if we instead of enabling/disabling the delay, we pass a parameter to the function (actually `PoissonNextSend` already accepts `average_interval_seconds` but ",https://github.com/bitcoin/bitcoin/pull/15881#issuecomment-486579970,486579970,
instagibbs,2019-04-25T19:26:06Z,"@kostyantyn yes I think if this kind of approach is to be taken at all, it should be parameterized and shortened by default.",https://github.com/bitcoin/bitcoin/pull/15881#issuecomment-486806354,486806354,
gmaxwell,2019-04-26T00:07:54Z,"@kostyantyn  The ""unit test"" aspect is only part of it.  In complex systems many interesting bugs emerge out of interactions of multiple parts. If all the tests significantly change the delays then conditions that are only reachable in the presence of delays won't get hit. Testing both with and without delays is probably better, but if only one is done it should be kept closer to actual use.",https://github.com/bitcoin/bitcoin/pull/15881#issuecomment-486880258,486880258,
jonasschnelli,2019-04-29T07:16:25Z,"I tend to agree with @gmaxwell, @sdaftuar, @sipa.\nOptimizing tests for performance by reducing test-authenticity seems suboptimal to me.\n\n> We might have users or developers that would like to run the tests on weak hardware (e.g. dual core cpu or hdd). Those constraints set a limit on how many tests can be run in parallel.\n\nIMO the last important property a test should have is beeing fas",https://github.com/bitcoin/bitcoin/pull/15881#issuecomment-487473653,487473653,
MarcoFalke,2019-04-30T19:49:54Z,"Devs are less likely to run the tests (or a specific test) if it takes too long to run. We might as well remove slow tests if only one or two devs run them on high-end hardware. Long tests are excluded on travis and I doubt that a bunch of developers on different architectures pass in `--extended`.\n\nMoreover, our unit or functional tests are horribly unsuitable to find actual issues with the p",https://github.com/bitcoin/bitcoin/pull/15881#issuecomment-488090695,488090695,
jnewbery,2019-04-30T20:11:22Z,"> Devs are less likely to run the tests (or a specific test) if it takes too long to run. \n\nTotally agree with this. I doubt *anyone* runs the dbcache test for example.\n\nWhen rebasing a PR with many commits, I would like to run the entire test suite over every commit to make sure that no intermediate commits break anything. Having very long running tests precludes this.\n\n> our unit or ",https://github.com/bitcoin/bitcoin/pull/15881#issuecomment-488097563,488097563,
laanwj,2019-05-01T07:02:47Z,"> Devs are less likely to run the tests (or a specific test)  if it takes too long to run. We might as well remove slow tests if only  one or two devs run them on high-end hardware. Long tests are excluded  on travis and I doubt that a bunch of developers on different  architectures pass in --extended.\n\nIMO fast tests are very good. It encourages running the tests more often, makes Travis fast",https://github.com/bitcoin/bitcoin/pull/15881#issuecomment-488223238,488223238,
MarcoFalke,2019-05-01T17:38:57Z,">  I personally prefer #15858's appraoch\n\nThat other approach is going to bypass p2p tx relay completely. So is guaranteed to decrease test coverage.\n\nThis pull request is a one-line patch to net_processing (off by default) so that both scenarios are tested. This is increasing test coverage, as I explained above.",https://github.com/bitcoin/bitcoin/pull/15881#issuecomment-488353713,488353713,
