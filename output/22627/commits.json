[
  {
    "sha": "60e0cbdd574bb9109bcad1e0c27c7936a534a0e7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MGUwY2JkZDU3NGJiOTEwOWJjYWQxZTBjMjdjNzkzNmE1MzRhMGU3",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-07-23T00:00:36Z"
      },
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-08-16T05:35:13Z"
      },
      "message": "[addrman] Merge the two Add() functions\n\nMerge the two definitions of this overloaded function to reduce code\nduplication.",
      "tree": {
        "sha": "b3c49dced04e42234b507682e033706b99d12232",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b3c49dced04e42234b507682e033706b99d12232"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/60e0cbdd574bb9109bcad1e0c27c7936a534a0e7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/60e0cbdd574bb9109bcad1e0c27c7936a534a0e7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/60e0cbdd574bb9109bcad1e0c27c7936a534a0e7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/60e0cbdd574bb9109bcad1e0c27c7936a534a0e7/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3facf0a8ae99a03f5e2fb709b8d86c47328d363c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3facf0a8ae99a03f5e2fb709b8d86c47328d363c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3facf0a8ae99a03f5e2fb709b8d86c47328d363c"
      }
    ],
    "stats": {
      "total": 110,
      "additions": 42,
      "deletions": 68
    },
    "files": [
      {
        "sha": "fa155fb00a53f4c42b644c67e5eee2e49bd2e4f2",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 1,
        "deletions": 16,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60e0cbdd574bb9109bcad1e0c27c7936a534a0e7/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60e0cbdd574bb9109bcad1e0c27c7936a534a0e7/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=60e0cbdd574bb9109bcad1e0c27c7936a534a0e7",
        "patch": "@@ -517,22 +517,7 @@ class CAddrMan\n         return vRandom.size();\n     }\n \n-    //! Add a single address.\n-    bool Add(const CAddress &addr, const CNetAddr& source, int64_t nTimePenalty = 0)\n-        EXCLUSIVE_LOCKS_REQUIRED(!cs)\n-    {\n-        LOCK(cs);\n-        bool fRet = false;\n-        Check();\n-        fRet |= Add_(addr, source, nTimePenalty);\n-        Check();\n-        if (fRet) {\n-            LogPrint(BCLog::ADDRMAN, \"Added %s from %s: %i tried, %i new\\n\", addr.ToStringIPPort(), source.ToString(), nTried, nNew);\n-        }\n-        return fRet;\n-    }\n-\n-    //! Add multiple addresses.\n+    //! Add addresses to addrman's new table.\n     bool Add(const std::vector<CAddress> &vAddr, const CNetAddr& source, int64_t nTimePenalty = 0)\n         EXCLUSIVE_LOCKS_REQUIRED(!cs)\n     {"
      },
      {
        "sha": "861b8891186f284c425a9a538e7a7c4cc1c29bae",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60e0cbdd574bb9109bcad1e0c27c7936a534a0e7/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60e0cbdd574bb9109bcad1e0c27c7936a534a0e7/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=60e0cbdd574bb9109bcad1e0c27c7936a534a0e7",
        "patch": "@@ -951,7 +951,7 @@ static RPCHelpMan addpeeraddress()\n         address.nTime = GetAdjustedTime();\n         // The source address is set equal to the address. This is equivalent to the peer\n         // announcing itself.\n-        if (node.addrman->Add(address, address)) success = true;\n+        if (node.addrman->Add({address}, address)) success = true;\n     }\n \n     obj.pushKV(\"success\", success);"
      },
      {
        "sha": "cead0489b02412cad4079aa69032d8c6ff55dab9",
        "filename": "src/test/addrman_tests.cpp",
        "status": "modified",
        "additions": 37,
        "deletions": 41,
        "changes": 78,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60e0cbdd574bb9109bcad1e0c27c7936a534a0e7/src/test/addrman_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60e0cbdd574bb9109bcad1e0c27c7936a534a0e7/src/test/addrman_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/addrman_tests.cpp?ref=60e0cbdd574bb9109bcad1e0c27c7936a534a0e7",
        "patch": "@@ -126,15 +126,15 @@ BOOST_AUTO_TEST_CASE(addrman_simple)\n \n     // Test: Does Addrman::Add work as expected.\n     CService addr1 = ResolveService(\"250.1.1.1\", 8333);\n-    BOOST_CHECK(addrman.Add(CAddress(addr1, NODE_NONE), source));\n+    BOOST_CHECK(addrman.Add({CAddress(addr1, NODE_NONE)}, source));\n     BOOST_CHECK_EQUAL(addrman.size(), 1U);\n     CAddrInfo addr_ret1 = addrman.Select();\n     BOOST_CHECK_EQUAL(addr_ret1.ToString(), \"250.1.1.1:8333\");\n \n     // Test: Does IP address deduplication work correctly.\n     //  Expected dup IP should not be added.\n     CService addr1_dup = ResolveService(\"250.1.1.1\", 8333);\n-    BOOST_CHECK(!addrman.Add(CAddress(addr1_dup, NODE_NONE), source));\n+    BOOST_CHECK(!addrman.Add({CAddress(addr1_dup, NODE_NONE)}, source));\n     BOOST_CHECK_EQUAL(addrman.size(), 1U);\n \n \n@@ -145,7 +145,7 @@ BOOST_AUTO_TEST_CASE(addrman_simple)\n     // success.\n \n     CService addr2 = ResolveService(\"250.1.1.2\", 8333);\n-    BOOST_CHECK(addrman.Add(CAddress(addr2, NODE_NONE), source));\n+    BOOST_CHECK(addrman.Add({CAddress(addr2, NODE_NONE)}, source));\n     BOOST_CHECK(addrman.size() >= 1);\n \n     // Test: AddrMan::Clear() should empty the new table.\n@@ -172,11 +172,11 @@ BOOST_AUTO_TEST_CASE(addrman_ports)\n \n     // Test 7; Addr with same IP but diff port does not replace existing addr.\n     CService addr1 = ResolveService(\"250.1.1.1\", 8333);\n-    BOOST_CHECK(addrman.Add(CAddress(addr1, NODE_NONE), source));\n+    BOOST_CHECK(addrman.Add({CAddress(addr1, NODE_NONE)}, source));\n     BOOST_CHECK_EQUAL(addrman.size(), 1U);\n \n     CService addr1_port = ResolveService(\"250.1.1.1\", 8334);\n-    BOOST_CHECK(!addrman.Add(CAddress(addr1_port, NODE_NONE), source));\n+    BOOST_CHECK(!addrman.Add({CAddress(addr1_port, NODE_NONE)}, source));\n     BOOST_CHECK_EQUAL(addrman.size(), 1U);\n     CAddrInfo addr_ret2 = addrman.Select();\n     BOOST_CHECK_EQUAL(addr_ret2.ToString(), \"250.1.1.1:8333\");\n@@ -199,7 +199,7 @@ BOOST_AUTO_TEST_CASE(addrman_select)\n \n     // Test: Select from new with 1 addr in new.\n     CService addr1 = ResolveService(\"250.1.1.1\", 8333);\n-    BOOST_CHECK(addrman.Add(CAddress(addr1, NODE_NONE), source));\n+    BOOST_CHECK(addrman.Add({CAddress(addr1, NODE_NONE)}, source));\n     BOOST_CHECK_EQUAL(addrman.size(), 1U);\n \n     bool newOnly = true;\n@@ -223,20 +223,20 @@ BOOST_AUTO_TEST_CASE(addrman_select)\n     CService addr3 = ResolveService(\"250.3.2.2\", 9999);\n     CService addr4 = ResolveService(\"250.3.3.3\", 9999);\n \n-    BOOST_CHECK(addrman.Add(CAddress(addr2, NODE_NONE), ResolveService(\"250.3.1.1\", 8333)));\n-    BOOST_CHECK(addrman.Add(CAddress(addr3, NODE_NONE), ResolveService(\"250.3.1.1\", 8333)));\n-    BOOST_CHECK(addrman.Add(CAddress(addr4, NODE_NONE), ResolveService(\"250.4.1.1\", 8333)));\n+    BOOST_CHECK(addrman.Add({CAddress(addr2, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n+    BOOST_CHECK(addrman.Add({CAddress(addr3, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n+    BOOST_CHECK(addrman.Add({CAddress(addr4, NODE_NONE)}, ResolveService(\"250.4.1.1\", 8333)));\n \n     // Add three addresses to tried table.\n     CService addr5 = ResolveService(\"250.4.4.4\", 8333);\n     CService addr6 = ResolveService(\"250.4.5.5\", 7777);\n     CService addr7 = ResolveService(\"250.4.6.6\", 8333);\n \n-    BOOST_CHECK(addrman.Add(CAddress(addr5, NODE_NONE), ResolveService(\"250.3.1.1\", 8333)));\n+    BOOST_CHECK(addrman.Add({CAddress(addr5, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n     addrman.Good(CAddress(addr5, NODE_NONE));\n-    BOOST_CHECK(addrman.Add(CAddress(addr6, NODE_NONE), ResolveService(\"250.3.1.1\", 8333)));\n+    BOOST_CHECK(addrman.Add({CAddress(addr6, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n     addrman.Good(CAddress(addr6, NODE_NONE));\n-    BOOST_CHECK(addrman.Add(CAddress(addr7, NODE_NONE), ResolveService(\"250.1.1.3\", 8333)));\n+    BOOST_CHECK(addrman.Add({CAddress(addr7, NODE_NONE)}, ResolveService(\"250.1.1.3\", 8333)));\n     addrman.Good(CAddress(addr7, NODE_NONE));\n \n     // Test: 6 addrs + 1 addr from last test = 7.\n@@ -262,7 +262,7 @@ BOOST_AUTO_TEST_CASE(addrman_new_collisions)\n \n     while (num_addrs < 22) {  // Magic number! 250.1.1.1 - 250.1.1.22 do not collide with deterministic key = 1\n         CService addr = ResolveService(\"250.1.1.\" + ToString(++num_addrs));\n-        BOOST_CHECK(addrman.Add(CAddress(addr, NODE_NONE), source));\n+        BOOST_CHECK(addrman.Add({CAddress(addr, NODE_NONE)}, source));\n \n         //Test: No collision in new table yet.\n         BOOST_CHECK_EQUAL(addrman.size(), num_addrs);\n@@ -271,11 +271,11 @@ BOOST_AUTO_TEST_CASE(addrman_new_collisions)\n     //Test: new table collision!\n     CService addr1 = ResolveService(\"250.1.1.\" + ToString(++num_addrs));\n     uint32_t collisions{1};\n-    BOOST_CHECK(addrman.Add(CAddress(addr1, NODE_NONE), source));\n+    BOOST_CHECK(addrman.Add({CAddress(addr1, NODE_NONE)}, source));\n     BOOST_CHECK_EQUAL(addrman.size(), num_addrs - collisions);\n \n     CService addr2 = ResolveService(\"250.1.1.\" + ToString(++num_addrs));\n-    BOOST_CHECK(addrman.Add(CAddress(addr2, NODE_NONE), source));\n+    BOOST_CHECK(addrman.Add({CAddress(addr2, NODE_NONE)}, source));\n     BOOST_CHECK_EQUAL(addrman.size(), num_addrs - collisions);\n }\n \n@@ -291,7 +291,7 @@ BOOST_AUTO_TEST_CASE(addrman_tried_collisions)\n \n     while (num_addrs < 64) {  // Magic number! 250.1.1.1 - 250.1.1.64 do not collide with deterministic key = 1\n         CService addr = ResolveService(\"250.1.1.\" + ToString(++num_addrs));\n-        BOOST_CHECK(addrman.Add(CAddress(addr, NODE_NONE), source));\n+        BOOST_CHECK(addrman.Add({CAddress(addr, NODE_NONE)}, source));\n         addrman.Good(CAddress(addr, NODE_NONE));\n \n         //Test: No collision in tried table yet.\n@@ -301,11 +301,11 @@ BOOST_AUTO_TEST_CASE(addrman_tried_collisions)\n     //Test: tried table collision!\n     CService addr1 = ResolveService(\"250.1.1.\" + ToString(++num_addrs));\n     uint32_t collisions{1};\n-    BOOST_CHECK(addrman.Add(CAddress(addr1, NODE_NONE), source));\n+    BOOST_CHECK(addrman.Add({CAddress(addr1, NODE_NONE)}, source));\n     BOOST_CHECK_EQUAL(addrman.size(), num_addrs - collisions);\n \n     CService addr2 = ResolveService(\"250.1.1.\" + ToString(++num_addrs));\n-    BOOST_CHECK(addrman.Add(CAddress(addr2, NODE_NONE), source));\n+    BOOST_CHECK(addrman.Add({CAddress(addr2, NODE_NONE)}, source));\n     BOOST_CHECK_EQUAL(addrman.size(), num_addrs - collisions);\n }\n \n@@ -322,9 +322,9 @@ BOOST_AUTO_TEST_CASE(addrman_find)\n     CNetAddr source1 = ResolveIP(\"250.1.2.1\");\n     CNetAddr source2 = ResolveIP(\"250.1.2.2\");\n \n-    BOOST_CHECK(addrman.Add(addr1, source1));\n-    BOOST_CHECK(!addrman.Add(addr2, source2));\n-    BOOST_CHECK(addrman.Add(addr3, source1));\n+    BOOST_CHECK(addrman.Add({addr1}, source1));\n+    BOOST_CHECK(!addrman.Add({addr2}, source2));\n+    BOOST_CHECK(addrman.Add({addr3}, source1));\n \n     // Test: ensure Find returns an IP matching what we searched on.\n     CAddrInfo* info1 = addrman.Find(addr1);\n@@ -406,11 +406,8 @@ BOOST_AUTO_TEST_CASE(addrman_getaddr)\n     CNetAddr source2 = ResolveIP(\"250.2.3.3\");\n \n     // Test: Ensure GetAddr works with new addresses.\n-    BOOST_CHECK(addrman.Add(addr1, source1));\n-    BOOST_CHECK(addrman.Add(addr2, source2));\n-    BOOST_CHECK(addrman.Add(addr3, source1));\n-    BOOST_CHECK(addrman.Add(addr4, source2));\n-    BOOST_CHECK(addrman.Add(addr5, source1));\n+    BOOST_CHECK(addrman.Add({addr1, addr3, addr5}, source1));\n+    BOOST_CHECK(addrman.Add({addr2, addr4}, source2));\n \n     BOOST_CHECK_EQUAL(addrman.GetAddr(/* max_addresses */ 0, /* max_pct */ 0, /* network */ std::nullopt).size(), 5U);\n     // Net processing asks for 23% of addresses. 23% of 5 is 1 rounded down.\n@@ -431,7 +428,7 @@ BOOST_AUTO_TEST_CASE(addrman_getaddr)\n \n         // Ensure that for all addrs in addrman, isTerrible == false.\n         addr.nTime = GetAdjustedTime();\n-        addrman.Add(addr, ResolveIP(strAddr));\n+        addrman.Add({addr}, ResolveIP(strAddr));\n         if (i % 8 == 0)\n             addrman.Good(addr);\n     }\n@@ -726,7 +723,7 @@ BOOST_AUTO_TEST_CASE(addrman_serialization)\n     CNetAddr default_source;\n \n \n-    addrman_asmap1.Add(addr, default_source);\n+    addrman_asmap1.Add({addr}, default_source);\n \n     stream << addrman_asmap1;\n     // serizalizing/deserializing addrman with the same asmap\n@@ -751,7 +748,7 @@ BOOST_AUTO_TEST_CASE(addrman_serialization)\n     // deserializing non-asmaped peers.dat to asmaped addrman\n     addrman_asmap1.Clear();\n     addrman_noasmap.Clear();\n-    addrman_noasmap.Add(addr, default_source);\n+    addrman_noasmap.Add({addr}, default_source);\n     stream << addrman_noasmap;\n     stream >> addrman_asmap1;\n     std::pair<int, int> bucketAndEntry_asmap1_deser = addrman_asmap1.GetBucketAndEntry(addr);\n@@ -765,8 +762,7 @@ BOOST_AUTO_TEST_CASE(addrman_serialization)\n     addrman_noasmap.Clear();\n     CAddress addr1 = CAddress(ResolveService(\"250.1.1.1\"), NODE_NONE);\n     CAddress addr2 = CAddress(ResolveService(\"250.2.1.1\"), NODE_NONE);\n-    addrman_noasmap.Add(addr, default_source);\n-    addrman_noasmap.Add(addr2, default_source);\n+    addrman_noasmap.Add({addr, addr2}, default_source);\n     std::pair<int, int> bucketAndEntry_noasmap_addr1 = addrman_noasmap.GetBucketAndEntry(addr1);\n     std::pair<int, int> bucketAndEntry_noasmap_addr2 = addrman_noasmap.GetBucketAndEntry(addr2);\n     BOOST_CHECK(bucketAndEntry_noasmap_addr1.first != bucketAndEntry_noasmap_addr2.first);\n@@ -833,7 +829,7 @@ BOOST_AUTO_TEST_CASE(addrman_selecttriedcollision)\n     CNetAddr source = ResolveIP(\"252.2.2.2\");\n     for (unsigned int i = 1; i < 23; i++) {\n         CService addr = ResolveService(\"250.1.1.\"+ToString(i));\n-        BOOST_CHECK(addrman.Add(CAddress(addr, NODE_NONE), source));\n+        BOOST_CHECK(addrman.Add({CAddress(addr, NODE_NONE)}, source));\n         addrman.Good(addr);\n \n         // No collisions yet.\n@@ -860,7 +856,7 @@ BOOST_AUTO_TEST_CASE(addrman_noevict)\n     CNetAddr source = ResolveIP(\"252.2.2.2\");\n     for (unsigned int i = 1; i < 36; i++) {\n         CService addr = ResolveService(\"250.1.1.\"+ToString(i));\n-        BOOST_CHECK(addrman.Add(CAddress(addr, NODE_NONE), source));\n+        BOOST_CHECK(addrman.Add({CAddress(addr, NODE_NONE)}, source));\n         addrman.Good(addr);\n \n         // No collision yet.\n@@ -870,7 +866,7 @@ BOOST_AUTO_TEST_CASE(addrman_noevict)\n \n     // Collision between 36 and 19.\n     CService addr36 = ResolveService(\"250.1.1.36\");\n-    BOOST_CHECK(addrman.Add(CAddress(addr36, NODE_NONE), source));\n+    BOOST_CHECK(addrman.Add({CAddress(addr36, NODE_NONE)}, source));\n     addrman.Good(addr36);\n \n     BOOST_CHECK(addrman.size() == 36);\n@@ -883,7 +879,7 @@ BOOST_AUTO_TEST_CASE(addrman_noevict)\n     // Lets create two collisions.\n     for (unsigned int i = 37; i < 59; i++) {\n         CService addr = ResolveService(\"250.1.1.\"+ToString(i));\n-        BOOST_CHECK(addrman.Add(CAddress(addr, NODE_NONE), source));\n+        BOOST_CHECK(addrman.Add({CAddress(addr, NODE_NONE)}, source));\n         addrman.Good(addr);\n \n         BOOST_CHECK(addrman.size() == i);\n@@ -892,14 +888,14 @@ BOOST_AUTO_TEST_CASE(addrman_noevict)\n \n     // Cause a collision.\n     CService addr59 = ResolveService(\"250.1.1.59\");\n-    BOOST_CHECK(addrman.Add(CAddress(addr59, NODE_NONE), source));\n+    BOOST_CHECK(addrman.Add({CAddress(addr59, NODE_NONE)}, source));\n     addrman.Good(addr59);\n     BOOST_CHECK(addrman.size() == 59);\n \n     BOOST_CHECK_EQUAL(addrman.SelectTriedCollision().ToString(), \"250.1.1.10:0\");\n \n     // Cause a second collision.\n-    BOOST_CHECK(!addrman.Add(CAddress(addr36, NODE_NONE), source));\n+    BOOST_CHECK(!addrman.Add({CAddress(addr36, NODE_NONE)}, source));\n     addrman.Good(addr36);\n     BOOST_CHECK(addrman.size() == 59);\n \n@@ -921,7 +917,7 @@ BOOST_AUTO_TEST_CASE(addrman_evictionworks)\n     CNetAddr source = ResolveIP(\"252.2.2.2\");\n     for (unsigned int i = 1; i < 36; i++) {\n         CService addr = ResolveService(\"250.1.1.\"+ToString(i));\n-        BOOST_CHECK(addrman.Add(CAddress(addr, NODE_NONE), source));\n+        BOOST_CHECK(addrman.Add({CAddress(addr, NODE_NONE)}, source));\n         addrman.Good(addr);\n \n         // No collision yet.\n@@ -931,7 +927,7 @@ BOOST_AUTO_TEST_CASE(addrman_evictionworks)\n \n     // Collision between 36 and 19.\n     CService addr = ResolveService(\"250.1.1.36\");\n-    BOOST_CHECK(addrman.Add(CAddress(addr, NODE_NONE), source));\n+    BOOST_CHECK(addrman.Add({CAddress(addr, NODE_NONE)}, source));\n     addrman.Good(addr);\n \n     BOOST_CHECK_EQUAL(addrman.size(), 36);\n@@ -946,14 +942,14 @@ BOOST_AUTO_TEST_CASE(addrman_evictionworks)\n     BOOST_CHECK(addrman.SelectTriedCollision().ToString() == \"[::]:0\");\n \n     // If 36 was swapped for 19, then this should cause no collisions.\n-    BOOST_CHECK(!addrman.Add(CAddress(addr, NODE_NONE), source));\n+    BOOST_CHECK(!addrman.Add({CAddress(addr, NODE_NONE)}, source));\n     addrman.Good(addr);\n \n     BOOST_CHECK(addrman.SelectTriedCollision().ToString() == \"[::]:0\");\n \n     // If we insert 19 it should collide with 36\n     CService addr19 = ResolveService(\"250.1.1.19\");\n-    BOOST_CHECK(!addrman.Add(CAddress(addr19, NODE_NONE), source));\n+    BOOST_CHECK(!addrman.Add({CAddress(addr19, NODE_NONE)}, source));\n     addrman.Good(addr19);\n \n     BOOST_CHECK_EQUAL(addrman.SelectTriedCollision().ToString(), \"250.1.1.36:0\");"
      },
      {
        "sha": "bc41180a8fa9679df6aff74425e04ce5b6bfcaac",
        "filename": "src/test/fuzz/addrman.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 7,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60e0cbdd574bb9109bcad1e0c27c7936a534a0e7/src/test/fuzz/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60e0cbdd574bb9109bcad1e0c27c7936a534a0e7/src/test/fuzz/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/addrman.cpp?ref=60e0cbdd574bb9109bcad1e0c27c7936a534a0e7",
        "patch": "@@ -252,13 +252,6 @@ FUZZ_TARGET_INIT(addrman, initialize_addrman)\n             [&] {\n                 (void)addr_man.SelectTriedCollision();\n             },\n-            [&] {\n-                const std::optional<CAddress> opt_address = ConsumeDeserializable<CAddress>(fuzzed_data_provider);\n-                const std::optional<CNetAddr> opt_net_addr = ConsumeDeserializable<CNetAddr>(fuzzed_data_provider);\n-                if (opt_address && opt_net_addr) {\n-                    addr_man.Add(*opt_address, *opt_net_addr, fuzzed_data_provider.ConsumeIntegralInRange<int64_t>(0, 100000000));\n-                }\n-            },\n             [&] {\n                 std::vector<CAddress> addresses;\n                 while (fuzzed_data_provider.ConsumeBool()) {"
      },
      {
        "sha": "9ac200cbc7e3c2b10d8b5c82852be9aa5e908d77",
        "filename": "src/test/net_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60e0cbdd574bb9109bcad1e0c27c7936a534a0e7/src/test/net_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60e0cbdd574bb9109bcad1e0c27c7936a534a0e7/src/test/net_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/net_tests.cpp?ref=60e0cbdd574bb9109bcad1e0c27c7936a534a0e7",
        "patch": "@@ -112,9 +112,9 @@ BOOST_AUTO_TEST_CASE(caddrdb_read)\n     // Add three addresses to new table.\n     CService source;\n     BOOST_CHECK(Lookup(\"252.5.1.1\", source, 8333, false));\n-    BOOST_CHECK(addrmanUncorrupted.Add(CAddress(addr1, NODE_NONE), source));\n-    BOOST_CHECK(addrmanUncorrupted.Add(CAddress(addr2, NODE_NONE), source));\n-    BOOST_CHECK(addrmanUncorrupted.Add(CAddress(addr3, NODE_NONE), source));\n+    std::vector<CAddress> addresses{CAddress(addr1, NODE_NONE), CAddress(addr2, NODE_NONE), CAddress(addr3, NODE_NONE)};\n+    BOOST_CHECK(addrmanUncorrupted.Add(addresses, source));\n+    BOOST_CHECK(addrmanUncorrupted.size() == 3);\n \n     // Test that the de-serialization does not throw an exception.\n     CDataStream ssPeers1 = AddrmanToStream(addrmanUncorrupted);"
      }
    ]
  }
]