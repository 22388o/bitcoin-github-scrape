[
  {
    "sha": "90593ed92cfd5d49900a6fb6c2c10a482ab9fdbb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MDU5M2VkOTJjZmQ1ZDQ5OTAwYTZmYjZjMmMxMGE0ODJhYjlmZGJi",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-06-04T20:45:22Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-06-04T22:52:36Z"
      },
      "message": "Limit variable scope",
      "tree": {
        "sha": "1f830a3679ef00b774dc8ac6b216366f2ed52a68",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1f830a3679ef00b774dc8ac6b216366f2ed52a68"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/90593ed92cfd5d49900a6fb6c2c10a482ab9fdbb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90593ed92cfd5d49900a6fb6c2c10a482ab9fdbb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/90593ed92cfd5d49900a6fb6c2c10a482ab9fdbb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90593ed92cfd5d49900a6fb6c2c10a482ab9fdbb/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f259263a7b11c6ff925851985ef0082b0a190a57",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f259263a7b11c6ff925851985ef0082b0a190a57",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f259263a7b11c6ff925851985ef0082b0a190a57"
      }
    ],
    "stats": {
      "total": 44,
      "additions": 21,
      "deletions": 23
    },
    "files": [
      {
        "sha": "5e70d25eeeef4862bccaf2b64647411ba3f0673c",
        "filename": "src/crypto/aes.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/90593ed92cfd5d49900a6fb6c2c10a482ab9fdbb/src/crypto/aes.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/90593ed92cfd5d49900a6fb6c2c10a482ab9fdbb/src/crypto/aes.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/aes.cpp?ref=90593ed92cfd5d49900a6fb6c2c10a482ab9fdbb",
        "patch": "@@ -112,7 +112,6 @@ static int CBCEncrypt(const T& enc, const unsigned char iv[AES_BLOCKSIZE], const\n template <typename T>\n static int CBCDecrypt(const T& dec, const unsigned char iv[AES_BLOCKSIZE], const unsigned char* data, int size, bool pad, unsigned char* out)\n {\n-    unsigned char padsize = 0;\n     int written = 0;\n     bool fail = false;\n     const unsigned char* prev = iv;\n@@ -136,7 +135,7 @@ static int CBCDecrypt(const T& dec, const unsigned char iv[AES_BLOCKSIZE], const\n     if (pad) {\n         // If used, padding size is the value of the last decrypted byte. For\n         // it to be valid, It must be between 1 and AES_BLOCKSIZE.\n-        padsize = *--out;\n+        unsigned char padsize = *--out;\n         fail = !padsize | (padsize > AES_BLOCKSIZE);\n \n         // If not well-formed, treat it as though there's no padding."
      },
      {
        "sha": "d22b4e06e4c0e7678ab06bb8b6653dab921d4db3",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/90593ed92cfd5d49900a6fb6c2c10a482ab9fdbb/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/90593ed92cfd5d49900a6fb6c2c10a482ab9fdbb/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=90593ed92cfd5d49900a6fb6c2c10a482ab9fdbb",
        "patch": "@@ -855,13 +855,13 @@ bool CBlockPolicyEstimator::Read(CAutoFile& filein)\n     try {\n         LOCK(cs_feeEstimator);\n         int nVersionRequired, nVersionThatWrote;\n-        unsigned int nFileBestSeenHeight, nFileHistoricalFirst, nFileHistoricalBest;\n         filein >> nVersionRequired >> nVersionThatWrote;\n         if (nVersionRequired > CLIENT_VERSION)\n             return error(\"CBlockPolicyEstimator::Read(): up-version (%d) fee estimate file\", nVersionRequired);\n \n         // Read fee estimates file into temporary variables so existing data\n         // structures aren't corrupted if there is an exception.\n+        unsigned int nFileBestSeenHeight;\n         filein >> nFileBestSeenHeight;\n \n         if (nVersionThatWrote < 149900) {\n@@ -890,6 +890,7 @@ bool CBlockPolicyEstimator::Read(CAutoFile& filein)\n             }\n         }\n         else { // nVersionThatWrote >= 149900\n+            unsigned int nFileHistoricalFirst, nFileHistoricalBest;\n             filein >> nFileHistoricalFirst >> nFileHistoricalBest;\n             if (nFileHistoricalFirst > nFileHistoricalBest || nFileHistoricalBest > nFileBestSeenHeight) {\n                 throw std::runtime_error(\"Corrupt estimates file. Historical block range for estimates is invalid\");"
      },
      {
        "sha": "88510b61681dcc06d75a42787faf3bb1e0d5c204",
        "filename": "src/qt/coincontroltreewidget.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/90593ed92cfd5d49900a6fb6c2c10a482ab9fdbb/src/qt/coincontroltreewidget.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/90593ed92cfd5d49900a6fb6c2c10a482ab9fdbb/src/qt/coincontroltreewidget.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroltreewidget.cpp?ref=90593ed92cfd5d49900a6fb6c2c10a482ab9fdbb",
        "patch": "@@ -16,9 +16,10 @@ void CoinControlTreeWidget::keyPressEvent(QKeyEvent *event)\n     if (event->key() == Qt::Key_Space) // press spacebar -> select checkbox\n     {\n         event->ignore();\n-        int COLUMN_CHECKBOX = 0;\n-        if(this->currentItem())\n+        if (this->currentItem()) {\n+            int COLUMN_CHECKBOX = 0;\n             this->currentItem()->setCheckState(COLUMN_CHECKBOX, ((this->currentItem()->checkState(COLUMN_CHECKBOX) == Qt::Checked) ? Qt::Unchecked : Qt::Checked));\n+        }\n     }\n     else if (event->key() == Qt::Key_Escape) // press esc -> close dialog\n     {"
      },
      {
        "sha": "e4c857e40b2fddebc9cc04ed1d1aaae3e97c29fd",
        "filename": "src/qt/recentrequeststablemodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/90593ed92cfd5d49900a6fb6c2c10a482ab9fdbb/src/qt/recentrequeststablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/90593ed92cfd5d49900a6fb6c2c10a482ab9fdbb/src/qt/recentrequeststablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/recentrequeststablemodel.cpp?ref=90593ed92cfd5d49900a6fb6c2c10a482ab9fdbb",
        "patch": "@@ -55,10 +55,9 @@ QVariant RecentRequestsTableModel::data(const QModelIndex &index, int role) cons\n     if(!index.isValid() || index.row() >= list.length())\n         return QVariant();\n \n-    const RecentRequestEntry *rec = &list[index.row()];\n-\n     if(role == Qt::DisplayRole || role == Qt::EditRole)\n     {\n+        const RecentRequestEntry *rec = &list[index.row()];\n         switch(index.column())\n         {\n         case Date:"
      },
      {
        "sha": "06f9c5134a4e72c2cabd6275ba625f8f755a79a1",
        "filename": "src/qt/trafficgraphwidget.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/90593ed92cfd5d49900a6fb6c2c10a482ab9fdbb/src/qt/trafficgraphwidget.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/90593ed92cfd5d49900a6fb6c2c10a482ab9fdbb/src/qt/trafficgraphwidget.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/trafficgraphwidget.cpp?ref=90593ed92cfd5d49900a6fb6c2c10a482ab9fdbb",
        "patch": "@@ -47,13 +47,14 @@ int TrafficGraphWidget::getGraphRangeMins() const\n \n void TrafficGraphWidget::paintPath(QPainterPath &path, QQueue<float> &samples)\n {\n-    int h = height() - YMARGIN * 2, w = width() - XMARGIN * 2;\n-    int sampleCount = samples.size(), x = XMARGIN + w, y;\n+    int sampleCount = samples.size();\n     if(sampleCount > 0) {\n+        int h = height() - YMARGIN * 2, w = width() - XMARGIN * 2;\n+        int x = XMARGIN + w;\n         path.moveTo(x, YMARGIN + h);\n         for(int i = 0; i < sampleCount; ++i) {\n             x = XMARGIN + w - w * i / DESIRED_SAMPLES;\n-            y = YMARGIN + h - (int)(h * samples.at(i) / fMax);\n+            int y = YMARGIN + h - (int)(h * samples.at(i) / fMax);\n             path.lineTo(x, y);\n         }\n         path.lineTo(x, YMARGIN + h);"
      },
      {
        "sha": "c6903b83166feaf0429b7e5f919fb372e59679bb",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/90593ed92cfd5d49900a6fb6c2c10a482ab9fdbb/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/90593ed92cfd5d49900a6fb6c2c10a482ab9fdbb/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=90593ed92cfd5d49900a6fb6c2c10a482ab9fdbb",
        "patch": "@@ -98,15 +98,13 @@ UniValue getnetworkhashps(const JSONRPCRequest& request)\n UniValue generateBlocks(std::shared_ptr<CReserveScript> coinbaseScript, int nGenerate, uint64_t nMaxTries, bool keepScript)\n {\n     static const int nInnerLoopCount = 0x10000;\n-    int nHeightStart = 0;\n     int nHeightEnd = 0;\n     int nHeight = 0;\n \n     {   // Don't keep cs_main locked\n         LOCK(cs_main);\n-        nHeightStart = chainActive.Height();\n-        nHeight = nHeightStart;\n-        nHeightEnd = nHeightStart+nGenerate;\n+        nHeight = chainActive.Height();\n+        nHeightEnd = nHeight+nGenerate;\n     }\n     unsigned int nExtraNonce = 0;\n     UniValue blockHashes(UniValue::VARR);"
      },
      {
        "sha": "f5d876c4027c89dabc808a37ccd75e183cad0a0f",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/90593ed92cfd5d49900a6fb6c2c10a482ab9fdbb/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/90593ed92cfd5d49900a6fb6c2c10a482ab9fdbb/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=90593ed92cfd5d49900a6fb6c2c10a482ab9fdbb",
        "patch": "@@ -838,7 +838,6 @@ UniValue sendrawtransaction(const JSONRPCRequest& request)\n     CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n     const uint256& hashTx = tx->GetHash();\n \n-    bool fLimitFree = true;\n     CAmount nMaxRawTxFee = maxTxFee;\n     if (request.params.size() > 1 && request.params[1].get_bool())\n         nMaxRawTxFee = 0;\n@@ -851,6 +850,7 @@ UniValue sendrawtransaction(const JSONRPCRequest& request)\n         // push to local node and sync with wallets\n         CValidationState state;\n         bool fMissingInputs;\n+        bool fLimitFree = true;\n         if (!AcceptToMemoryPool(mempool, state, std::move(tx), fLimitFree, &fMissingInputs, NULL, false, nMaxRawTxFee)) {\n             if (state.IsInvalid()) {\n                 throw JSONRPCError(RPC_TRANSACTION_REJECTED, strprintf(\"%i: %s\", state.GetRejectCode(), state.GetRejectReason()));"
      },
      {
        "sha": "123f88bd6f32530d6e26a18bef21686d8c309a87",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/90593ed92cfd5d49900a6fb6c2c10a482ab9fdbb/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/90593ed92cfd5d49900a6fb6c2c10a482ab9fdbb/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=90593ed92cfd5d49900a6fb6c2c10a482ab9fdbb",
        "patch": "@@ -141,10 +141,9 @@ static CScript PushAll(const std::vector<valtype>& values)\n bool ProduceSignature(const BaseSignatureCreator& creator, const CScript& fromPubKey, SignatureData& sigdata)\n {\n     CScript script = fromPubKey;\n-    bool solved = true;\n     std::vector<valtype> result;\n     txnouttype whichType;\n-    solved = SignStep(creator, script, result, whichType, SIGVERSION_BASE);\n+    bool solved = SignStep(creator, script, result, whichType, SIGVERSION_BASE);\n     bool P2SH = false;\n     CScript subscript;\n     sigdata.scriptWitness.stack.clear();"
      },
      {
        "sha": "baf18fd190274105709b8cc87a8e17521f4a95d1",
        "filename": "src/test/checkqueue_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/90593ed92cfd5d49900a6fb6c2c10a482ab9fdbb/src/test/checkqueue_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/90593ed92cfd5d49900a6fb6c2c10a482ab9fdbb/src/test/checkqueue_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/checkqueue_tests.cpp?ref=90593ed92cfd5d49900a6fb6c2c10a482ab9fdbb",
        "patch": "@@ -402,12 +402,12 @@ BOOST_AUTO_TEST_CASE(test_CheckQueueControl_Locks)\n     {\n         boost::thread_group tg;\n         std::mutex m;\n-        bool has_lock {false};\n-        bool has_tried {false};\n-        bool done {false};\n-        bool done_ack {false};\n         std::condition_variable cv;\n         {\n+            bool has_lock {false};\n+            bool has_tried {false};\n+            bool done {false};\n+            bool done_ack {false};\n             std::unique_lock<std::mutex> l(m);\n             tg.create_thread([&]{\n                     CCheckQueueControl<FakeCheck> control(queue.get());"
      },
      {
        "sha": "2df438989afc8637ad3cd5ece680550cfa89e621",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/90593ed92cfd5d49900a6fb6c2c10a482ab9fdbb/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/90593ed92cfd5d49900a6fb6c2c10a482ab9fdbb/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=90593ed92cfd5d49900a6fb6c2c10a482ab9fdbb",
        "patch": "@@ -361,7 +361,6 @@ void CDBEnv::CheckpointLSN(const std::string& strFile)\n \n CDB::CDB(CWalletDBWrapper& dbw, const char* pszMode, bool fFlushOnCloseIn) : pdb(NULL), activeTxn(NULL)\n {\n-    int ret;\n     fReadOnly = (!strchr(pszMode, '+') && !strchr(pszMode, 'w'));\n     fFlushOnClose = fFlushOnCloseIn;\n     env = dbw.env;\n@@ -384,6 +383,7 @@ CDB::CDB(CWalletDBWrapper& dbw, const char* pszMode, bool fFlushOnCloseIn) : pdb\n         ++env->mapFileUseCount[strFile];\n         pdb = env->mapDb[strFile];\n         if (pdb == NULL) {\n+            int ret;\n             pdb = new Db(env->dbenv, 0);\n \n             bool fMockDb = env->IsMock();"
      },
      {
        "sha": "2eed116dd3be4966a3e278bcb6c6942fee388da1",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/90593ed92cfd5d49900a6fb6c2c10a482ab9fdbb/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/90593ed92cfd5d49900a6fb6c2c10a482ab9fdbb/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=90593ed92cfd5d49900a6fb6c2c10a482ab9fdbb",
        "patch": "@@ -3196,10 +3196,10 @@ void CWallet::ReturnKey(int64_t nIndex)\n \n bool CWallet::GetKeyFromPool(CPubKey& result, bool internal)\n {\n-    int64_t nIndex = 0;\n     CKeyPool keypool;\n     {\n         LOCK(cs_wallet);\n+        int64_t nIndex = 0;\n         ReserveKeyFromKeyPool(nIndex, keypool, internal);\n         if (nIndex == -1)\n         {"
      }
    ]
  }
]