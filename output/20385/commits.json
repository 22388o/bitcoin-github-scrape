[
  {
    "sha": "21f24336019d438e225c7bd6653871119883a4ee",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMWYyNDMzNjAxOWQ0MzhlMjI1YzdiZDY2NTM4NzExMTk4ODNhNGVl",
    "commit": {
      "author": {
        "name": "Michael Dietz",
        "email": "michaeldietz@Michaels-MacBook-Air.local",
        "date": "2020-11-13T22:55:20Z"
      },
      "committer": {
        "name": "Michael Dietz",
        "email": "michaeldietz@Michaels-MacBook-Air.local",
        "date": "2020-11-16T15:05:34Z"
      },
      "message": "test: run mempool_spend_coinbase.py even with wallet disabled",
      "tree": {
        "sha": "c8a9b53143f59a5493a73847000b8ea98b7ef011",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c8a9b53143f59a5493a73847000b8ea98b7ef011"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/21f24336019d438e225c7bd6653871119883a4ee",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/21f24336019d438e225c7bd6653871119883a4ee",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/21f24336019d438e225c7bd6653871119883a4ee",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/21f24336019d438e225c7bd6653871119883a4ee/comments",
    "author": {
      "login": "mjdietzx",
      "id": 7217256,
      "node_id": "MDQ6VXNlcjcyMTcyNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7217256?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mjdietzx",
      "html_url": "https://github.com/mjdietzx",
      "followers_url": "https://api.github.com/users/mjdietzx/followers",
      "following_url": "https://api.github.com/users/mjdietzx/following{/other_user}",
      "gists_url": "https://api.github.com/users/mjdietzx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
      "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
      "repos_url": "https://api.github.com/users/mjdietzx/repos",
      "events_url": "https://api.github.com/users/mjdietzx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "mjdietzx",
      "id": 7217256,
      "node_id": "MDQ6VXNlcjcyMTcyNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7217256?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mjdietzx",
      "html_url": "https://github.com/mjdietzx",
      "followers_url": "https://api.github.com/users/mjdietzx/followers",
      "following_url": "https://api.github.com/users/mjdietzx/following{/other_user}",
      "gists_url": "https://api.github.com/users/mjdietzx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
      "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
      "repos_url": "https://api.github.com/users/mjdietzx/repos",
      "events_url": "https://api.github.com/users/mjdietzx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "79a3b59cc70622fbadc43ade5fce31fcf94d852d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/79a3b59cc70622fbadc43ade5fce31fcf94d852d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/79a3b59cc70622fbadc43ade5fce31fcf94d852d"
      }
    ],
    "stats": {
      "total": 45,
      "additions": 30,
      "deletions": 15
    },
    "files": [
      {
        "sha": "86d382ff69f0a86ddb145e070bf28c1a00aec6c4",
        "filename": "test/functional/mempool_spend_coinbase.py",
        "status": "modified",
        "additions": 16,
        "deletions": 12,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21f24336019d438e225c7bd6653871119883a4ee/test/functional/mempool_spend_coinbase.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21f24336019d438e225c7bd6653871119883a4ee/test/functional/mempool_spend_coinbase.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_spend_coinbase.py?ref=21f24336019d438e225c7bd6653871119883a4ee",
        "patch": "@@ -13,44 +13,48 @@\n \"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.blocktools import create_raw_transaction\n from test_framework.util import assert_equal, assert_raises_rpc_error\n+from test_framework.wallet import MiniWallet\n \n \n class MempoolSpendCoinbaseTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n-\n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n+        self.setup_clean_chain = True\n \n     def run_test(self):\n+        wallet = MiniWallet(self.nodes[0])\n+\n+        wallet.generate(200)\n         chain_height = self.nodes[0].getblockcount()\n         assert_equal(chain_height, 200)\n-        node0_address = self.nodes[0].getnewaddress()\n \n         # Coinbase at height chain_height-100+1 ok in mempool, should\n         # get mined. Coinbase at height chain_height-100+2 is\n-        # is too immature to spend.\n+        # too immature to spend.\n         b = [self.nodes[0].getblockhash(n) for n in range(101, 103)]\n         coinbase_txids = [self.nodes[0].getblock(h)['tx'][0] for h in b]\n-        spends_raw = [create_raw_transaction(self.nodes[0], txid, node0_address, amount=49.99) for txid in coinbase_txids]\n+        utxo_101 = wallet.get_utxo(txid=coinbase_txids[0])\n+        utxo_102 = wallet.get_utxo(txid=coinbase_txids[1])\n \n-        spend_101_id = self.nodes[0].sendrawtransaction(spends_raw[0])\n+        spend_101_id = wallet.send_self_transfer(from_node=self.nodes[0], utxo_to_spend=utxo_101)[\"txid\"]\n \n         # coinbase at height 102 should be too immature to spend\n-        assert_raises_rpc_error(-26,\"bad-txns-premature-spend-of-coinbase\", self.nodes[0].sendrawtransaction, spends_raw[1])\n+        assert_raises_rpc_error(-26,\n+                                \"bad-txns-premature-spend-of-coinbase\",\n+                                lambda: wallet.send_self_transfer(from_node=self.nodes[0], utxo_to_spend=utxo_102))\n \n         # mempool should have just spend_101:\n-        assert_equal(self.nodes[0].getrawmempool(), [ spend_101_id ])\n+        assert_equal(self.nodes[0].getrawmempool(), [spend_101_id])\n \n         # mine a block, spend_101 should get confirmed\n         self.nodes[0].generate(1)\n         assert_equal(set(self.nodes[0].getrawmempool()), set())\n \n         # ... and now height 102 can be spent:\n-        spend_102_id = self.nodes[0].sendrawtransaction(spends_raw[1])\n-        assert_equal(self.nodes[0].getrawmempool(), [ spend_102_id ])\n+        spend_102_id = wallet.send_self_transfer(from_node=self.nodes[0], utxo_to_spend=utxo_102)[\"txid\"]\n+        assert_equal(self.nodes[0].getrawmempool(), [spend_102_id])\n+\n \n if __name__ == '__main__':\n     MempoolSpendCoinbaseTest().main()"
      },
      {
        "sha": "a71f2c69cbe151a1e92f82cbeceb6bd330b00682",
        "filename": "test/functional/test_framework/wallet.py",
        "status": "modified",
        "additions": 14,
        "deletions": 3,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21f24336019d438e225c7bd6653871119883a4ee/test/functional/test_framework/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21f24336019d438e225c7bd6653871119883a4ee/test/functional/test_framework/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/wallet.py?ref=21f24336019d438e225c7bd6653871119883a4ee",
        "patch": "@@ -40,9 +40,20 @@ def generate(self, num_blocks):\n             self._utxos.append({'txid': cb_tx['txid'], 'vout': 0, 'value': cb_tx['vout'][0]['value']})\n         return blocks\n \n-    def get_utxo(self):\n-        \"\"\"Return the last utxo. Can be used to get the change output immediately after a send_self_transfer\"\"\"\n-        return self._utxos.pop()\n+    def get_utxo(self, *, txid=''):\n+        \"\"\"\n+        Returns a utxo and marks it as spent (pops it from the internal list)\n+\n+        Args:\n+        txid (string), optional: get the first utxo we find from a specific transaction\n+\n+        Note: Can be used to get the change output immediately after a send_self_transfer\n+        \"\"\"\n+        index = -1  # by default the last utxo\n+        if txid:\n+            utxo = next(filter(lambda utxo: txid == utxo['txid'], self._utxos))\n+            index = self._utxos.index(utxo)\n+        return self._utxos.pop(index)\n \n     def send_self_transfer(self, *, fee_rate=Decimal(\"0.003\"), from_node, utxo_to_spend=None):\n         \"\"\"Create and send a tx with the specified fee_rate. Fee may be exact or at most one satoshi higher than needed.\"\"\""
      }
    ]
  }
]