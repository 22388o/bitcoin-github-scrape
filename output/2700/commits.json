[
  {
    "sha": "a9380c72bee0fc134a2215d7919b52936bd8158d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphOTM4MGM3MmJlZTBmYzEzNGEyMjE1ZDc5MTliNTI5MzZiZDgxNThk",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "theuni-nospam-@xbmc.org",
        "date": "2013-05-28T20:00:17Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "theuni-nospam-@xbmc.org",
        "date": "2013-06-04T07:53:40Z"
      },
      "message": "build: prepare to move DetectShutdownThread",
      "tree": {
        "sha": "5425fb91a8917c344ddc96afec579df010c43a95",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5425fb91a8917c344ddc96afec579df010c43a95"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a9380c72bee0fc134a2215d7919b52936bd8158d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9380c72bee0fc134a2215d7919b52936bd8158d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a9380c72bee0fc134a2215d7919b52936bd8158d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9380c72bee0fc134a2215d7919b52936bd8158d/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "c83d4d2170bf00863bd5c21c6eaea91b00390e72",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c83d4d2170bf00863bd5c21c6eaea91b00390e72",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c83d4d2170bf00863bd5c21c6eaea91b00390e72"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 5,
      "deletions": 3
    },
    "files": [
      {
        "sha": "6777f48d57edd6073f0b0282862760d29510f60b",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9380c72bee0fc134a2215d7919b52936bd8158d/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9380c72bee0fc134a2215d7919b52936bd8158d/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=a9380c72bee0fc134a2215d7919b52936bd8158d",
        "patch": "@@ -123,13 +123,15 @@ void Shutdown()\n //\n void DetectShutdownThread(boost::thread_group* threadGroup)\n {\n+    bool shutdown = ShutdownRequested();\n     // Tell the main threads to shutdown.\n-    while (!fRequestShutdown)\n+    while (!shutdown)\n     {\n         MilliSleep(200);\n-        if (fRequestShutdown)\n-            threadGroup->interrupt_all();\n+        shutdown = ShutdownRequested();\n     }\n+    if (threadGroup)\n+        threadGroup->interrupt_all();\n }\n \n void HandleSIGTERM(int)"
      }
    ]
  },
  {
    "sha": "c862d2ff22f06cb15fb9492b9f0b69e3d91a7e44",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjODYyZDJmZjIyZjA2Y2IxNWZiOTQ5MmI5ZjBiNjllM2Q5MWE3ZTQ0",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "theuni-nospam-@xbmc.org",
        "date": "2013-05-26T17:48:30Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "theuni-nospam-@xbmc.org",
        "date": "2013-06-04T07:54:14Z"
      },
      "message": "build: split the non-gui startup routines into a new file\n\nThis will allow each to have its own main(), meaning that we can build a common\nbase client and simply link in the correct startup object to create the\nappropriate binary.",
      "tree": {
        "sha": "9c42a039cebd847704637de61d6f08e942f86f82",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9c42a039cebd847704637de61d6f08e942f86f82"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c862d2ff22f06cb15fb9492b9f0b69e3d91a7e44",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c862d2ff22f06cb15fb9492b9f0b69e3d91a7e44",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c862d2ff22f06cb15fb9492b9f0b69e3d91a7e44",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c862d2ff22f06cb15fb9492b9f0b69e3d91a7e44/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "a9380c72bee0fc134a2215d7919b52936bd8158d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9380c72bee0fc134a2215d7919b52936bd8158d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a9380c72bee0fc134a2215d7919b52936bd8158d"
      }
    ],
    "stats": {
      "total": 282,
      "additions": 144,
      "deletions": 138
    },
    "files": [
      {
        "sha": "81f67802dad6cb4f4395ba9c47938c1ec9a9b6ef",
        "filename": "src/bitcoind.cpp",
        "status": "added",
        "additions": 136,
        "deletions": 0,
        "changes": 136,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c862d2ff22f06cb15fb9492b9f0b69e3d91a7e44/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c862d2ff22f06cb15fb9492b9f0b69e3d91a7e44/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=c862d2ff22f06cb15fb9492b9f0b69e3d91a7e44",
        "patch": "@@ -0,0 +1,136 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2012 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"init.h\"\n+#include \"bitcoinrpc.h\"\n+#include <boost/algorithm/string/predicate.hpp>\n+\n+void DetectShutdownThread(boost::thread_group* threadGroup)\n+{\n+    bool shutdown = ShutdownRequested();\n+    // Tell the main threads to shutdown.\n+    while (!shutdown)\n+    {\n+        MilliSleep(200);\n+        shutdown = ShutdownRequested();\n+    }\n+    if (threadGroup)\n+        threadGroup->interrupt_all();\n+}\n+\n+//////////////////////////////////////////////////////////////////////////////\n+//\n+// Start\n+//\n+bool AppInit(int argc, char* argv[])\n+{\n+    boost::thread_group threadGroup;\n+    boost::thread* detectShutdownThread = NULL;\n+\n+    bool fRet = false;\n+    try\n+    {\n+        //\n+        // Parameters\n+        //\n+        // If Qt is used, parameters/bitcoin.conf are parsed in qt/bitcoin.cpp's main()\n+        ParseParameters(argc, argv);\n+        if (!boost::filesystem::is_directory(GetDataDir(false)))\n+        {\n+            fprintf(stderr, \"Error: Specified directory does not exist\\n\");\n+            Shutdown();\n+        }\n+        ReadConfigFile(mapArgs, mapMultiArgs);\n+\n+        if (mapArgs.count(\"-?\") || mapArgs.count(\"--help\"))\n+        {\n+            // First part of help message is specific to bitcoind / RPC client\n+            std::string strUsage = _(\"Bitcoin version\") + \" \" + FormatFullVersion() + \"\\n\\n\" +\n+                _(\"Usage:\") + \"\\n\" +\n+                  \"  bitcoind [options]                     \" + \"\\n\" +\n+                  \"  bitcoind [options] <command> [params]  \" + _(\"Send command to -server or bitcoind\") + \"\\n\" +\n+                  \"  bitcoind [options] help                \" + _(\"List commands\") + \"\\n\" +\n+                  \"  bitcoind [options] help <command>      \" + _(\"Get help for a command\") + \"\\n\";\n+\n+            strUsage += \"\\n\" + HelpMessage();\n+\n+            fprintf(stdout, \"%s\", strUsage.c_str());\n+            return false;\n+        }\n+\n+        // Command-line RPC\n+        for (int i = 1; i < argc; i++)\n+            if (!IsSwitchChar(argv[i][0]) && !boost::algorithm::istarts_with(argv[i], \"bitcoin:\"))\n+                fCommandLine = true;\n+\n+        if (fCommandLine)\n+        {\n+            int ret = CommandLineRPC(argc, argv);\n+            exit(ret);\n+        }\n+#if !defined(WIN32)\n+        fDaemon = GetBoolArg(\"-daemon\", false);\n+        if (fDaemon)\n+        {\n+            // Daemonize\n+            pid_t pid = fork();\n+            if (pid < 0)\n+            {\n+                fprintf(stderr, \"Error: fork() returned %d errno %d\\n\", pid, errno);\n+                return false;\n+            }\n+            if (pid > 0) // Parent process, pid is child process id\n+            {\n+                CreatePidFile(GetPidFile(), pid);\n+                return true;\n+            }\n+            // Child process falls through to rest of initialization\n+\n+            pid_t sid = setsid();\n+            if (sid < 0)\n+                fprintf(stderr, \"Error: setsid() returned %d errno %d\\n\", sid, errno);\n+        }\n+#endif\n+\n+        detectShutdownThread = new boost::thread(boost::bind(&DetectShutdownThread, &threadGroup));\n+        fRet = AppInit2(threadGroup);\n+    }\n+    catch (std::exception& e) {\n+        PrintExceptionContinue(&e, \"AppInit()\");\n+    } catch (...) {\n+        PrintExceptionContinue(NULL, \"AppInit()\");\n+    }\n+    if (!fRet) {\n+        if (detectShutdownThread)\n+            detectShutdownThread->interrupt();\n+        threadGroup.interrupt_all();\n+    }\n+\n+    if (detectShutdownThread)\n+    {\n+        detectShutdownThread->join();\n+        delete detectShutdownThread;\n+        detectShutdownThread = NULL;\n+    }\n+    Shutdown();\n+\n+    return fRet;\n+}\n+\n+extern void noui_connect();\n+int main(int argc, char* argv[])\n+{\n+    bool fRet = false;\n+\n+    // Connect bitcoind signal handlers\n+    noui_connect();\n+\n+    fRet = AppInit(argc, argv);\n+\n+    if (fRet && fDaemon)\n+        return 0;\n+\n+    return (fRet ? 0 : 1);\n+}"
      },
      {
        "sha": "e9e5e278b0693532cdb3e61bfc6f3d6832d20711",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 134,
        "changes": 134,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c862d2ff22f06cb15fb9492b9f0b69e3d91a7e44/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c862d2ff22f06cb15fb9492b9f0b69e3d91a7e44/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=c862d2ff22f06cb15fb9492b9f0b69e3d91a7e44",
        "patch": "@@ -121,19 +121,6 @@ void Shutdown()\n //\n // Signal handlers are very limited in what they are allowed to do, so:\n //\n-void DetectShutdownThread(boost::thread_group* threadGroup)\n-{\n-    bool shutdown = ShutdownRequested();\n-    // Tell the main threads to shutdown.\n-    while (!shutdown)\n-    {\n-        MilliSleep(200);\n-        shutdown = ShutdownRequested();\n-    }\n-    if (threadGroup)\n-        threadGroup->interrupt_all();\n-}\n-\n void HandleSIGTERM(int)\n {\n     fRequestShutdown = true;\n@@ -144,127 +131,6 @@ void HandleSIGHUP(int)\n     fReopenDebugLog = true;\n }\n \n-\n-\n-\n-\n-//////////////////////////////////////////////////////////////////////////////\n-//\n-// Start\n-//\n-#if !defined(QT_GUI)\n-bool AppInit(int argc, char* argv[])\n-{\n-    boost::thread_group threadGroup;\n-    boost::thread* detectShutdownThread = NULL;\n-\n-    bool fRet = false;\n-    try\n-    {\n-        //\n-        // Parameters\n-        //\n-        // If Qt is used, parameters/bitcoin.conf are parsed in qt/bitcoin.cpp's main()\n-        ParseParameters(argc, argv);\n-        if (!boost::filesystem::is_directory(GetDataDir(false)))\n-        {\n-            fprintf(stderr, \"Error: Specified directory does not exist\\n\");\n-            Shutdown();\n-        }\n-        ReadConfigFile(mapArgs, mapMultiArgs);\n-\n-        if (mapArgs.count(\"-?\") || mapArgs.count(\"--help\"))\n-        {\n-            // First part of help message is specific to bitcoind / RPC client\n-            std::string strUsage = _(\"Bitcoin version\") + \" \" + FormatFullVersion() + \"\\n\\n\" +\n-                _(\"Usage:\") + \"\\n\" +\n-                  \"  bitcoind [options]                     \" + \"\\n\" +\n-                  \"  bitcoind [options] <command> [params]  \" + _(\"Send command to -server or bitcoind\") + \"\\n\" +\n-                  \"  bitcoind [options] help                \" + _(\"List commands\") + \"\\n\" +\n-                  \"  bitcoind [options] help <command>      \" + _(\"Get help for a command\") + \"\\n\";\n-\n-            strUsage += \"\\n\" + HelpMessage();\n-\n-            fprintf(stdout, \"%s\", strUsage.c_str());\n-            return false;\n-        }\n-\n-        // Command-line RPC\n-        for (int i = 1; i < argc; i++)\n-            if (!IsSwitchChar(argv[i][0]) && !boost::algorithm::istarts_with(argv[i], \"bitcoin:\"))\n-                fCommandLine = true;\n-\n-        if (fCommandLine)\n-        {\n-            int ret = CommandLineRPC(argc, argv);\n-            exit(ret);\n-        }\n-#if !defined(WIN32)\n-        fDaemon = GetBoolArg(\"-daemon\", false);\n-        if (fDaemon)\n-        {\n-            // Daemonize\n-            pid_t pid = fork();\n-            if (pid < 0)\n-            {\n-                fprintf(stderr, \"Error: fork() returned %d errno %d\\n\", pid, errno);\n-                return false;\n-            }\n-            if (pid > 0) // Parent process, pid is child process id\n-            {\n-                CreatePidFile(GetPidFile(), pid);\n-                return true;\n-            }\n-            // Child process falls through to rest of initialization\n-\n-            pid_t sid = setsid();\n-            if (sid < 0)\n-                fprintf(stderr, \"Error: setsid() returned %d errno %d\\n\", sid, errno);\n-        }\n-#endif\n-\n-        detectShutdownThread = new boost::thread(boost::bind(&DetectShutdownThread, &threadGroup));\n-        fRet = AppInit2(threadGroup);\n-    }\n-    catch (std::exception& e) {\n-        PrintExceptionContinue(&e, \"AppInit()\");\n-    } catch (...) {\n-        PrintExceptionContinue(NULL, \"AppInit()\");\n-    }\n-    if (!fRet) {\n-        if (detectShutdownThread)\n-            detectShutdownThread->interrupt();\n-        threadGroup.interrupt_all();\n-    }\n-\n-    if (detectShutdownThread)\n-    {\n-        detectShutdownThread->join();\n-        delete detectShutdownThread;\n-        detectShutdownThread = NULL;\n-    }\n-    Shutdown();\n-\n-    return fRet;\n-}\n-\n-extern void noui_connect();\n-int main(int argc, char* argv[])\n-{\n-    bool fRet = false;\n-\n-    // Connect bitcoind signal handlers\n-    noui_connect();\n-\n-    fRet = AppInit(argc, argv);\n-\n-    if (fRet && fDaemon)\n-        return 0;\n-\n-    return (fRet ? 0 : 1);\n-}\n-#endif\n-\n bool static InitError(const std::string &str)\n {\n     uiInterface.ThreadSafeMessageBox(str, \"\", CClientUIInterface::MSG_ERROR);"
      },
      {
        "sha": "114a9491bd43753531adadde6f60533b2a19965d",
        "filename": "src/makefile.linux-mingw",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c862d2ff22f06cb15fb9492b9f0b69e3d91a7e44/src/makefile.linux-mingw",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c862d2ff22f06cb15fb9492b9f0b69e3d91a7e44/src/makefile.linux-mingw",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.linux-mingw?ref=c862d2ff22f06cb15fb9492b9f0b69e3d91a7e44",
        "patch": "@@ -71,6 +71,7 @@ OBJS= \\\n     obj/key.o \\\n     obj/db.o \\\n     obj/init.o \\\n+    obj/bitcoind.o \\\n     obj/keystore.o \\\n     obj/main.o \\\n     obj/net.o \\\n@@ -116,7 +117,7 @@ TESTOBJS := $(patsubst test/%.cpp,obj-test/%.o,$(wildcard test/*.cpp))\n obj-test/%.o: test/%.cpp $(HEADERS)\n \t$(CXX) -c $(TESTDEFS) $(xCXXFLAGS) -o $@ $<\n \n-test_bitcoin.exe: $(TESTOBJS) $(filter-out obj/init.o,$(OBJS:obj/%=obj/%))\n+test_bitcoin.exe: $(TESTOBJS) $(filter-out obj/init.o obj/bitcoind.o,$(OBJS:obj/%=obj/%))\n \t$(CXX) $(xCXXFLAGS) $(xLDFLAGS) -o $@ $(LIBPATHS) $^ -lboost_unit_test_framework-mt-s $(LIBS)\n \n "
      },
      {
        "sha": "34ddc3eeceae36ba58bf45c467bd21c23c7bae2a",
        "filename": "src/makefile.mingw",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c862d2ff22f06cb15fb9492b9f0b69e3d91a7e44/src/makefile.mingw",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c862d2ff22f06cb15fb9492b9f0b69e3d91a7e44/src/makefile.mingw",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.mingw?ref=c862d2ff22f06cb15fb9492b9f0b69e3d91a7e44",
        "patch": "@@ -79,6 +79,7 @@ OBJS= \\\n     obj/key.o \\\n     obj/db.o \\\n     obj/init.o \\\n+    obj/bitcoind.o \\\n     obj/keystore.o \\\n     obj/main.o \\\n     obj/net.o \\\n@@ -127,7 +128,7 @@ TESTOBJS := $(patsubst test/%.cpp,obj-test/%.o,$(wildcard test/*.cpp))\n obj-test/%.o: test/%.cpp $(HEADERS)\n \t$(CXX) -c $(TESTDEFS) $(CFLAGS) -o $@ $<\n \n-test_bitcoin.exe: $(TESTOBJS) $(filter-out obj/init.o,$(OBJS:obj/%=obj/%))\n+test_bitcoin.exe: $(TESTOBJS) $(filter-out obj/init.o obj/bitcoind.o,$(OBJS:obj/%=obj/%))\n \t$(CXX) $(CFLAGS) $(LDFLAGS) -o $@ $(LIBPATHS) $^ -lboost_unit_test_framework$(BOOST_SUFFIX) $(LIBS)\n \n clean:"
      },
      {
        "sha": "4ee0edcb9527e3fd785df336d733e9a645be699e",
        "filename": "src/makefile.osx",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c862d2ff22f06cb15fb9492b9f0b69e3d91a7e44/src/makefile.osx",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c862d2ff22f06cb15fb9492b9f0b69e3d91a7e44/src/makefile.osx",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.osx?ref=c862d2ff22f06cb15fb9492b9f0b69e3d91a7e44",
        "patch": "@@ -82,6 +82,7 @@ OBJS= \\\n     obj/key.o \\\n     obj/db.o \\\n     obj/init.o \\\n+    obj/bitcoind.o \\\n     obj/keystore.o \\\n     obj/main.o \\\n     obj/net.o \\\n@@ -162,7 +163,7 @@ obj-test/%.o: test/%.cpp\n \t      -e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \\\n \t  rm -f $(@:%.o=%.d)\n \n-test_bitcoin: $(TESTOBJS) $(filter-out obj/init.o,$(OBJS:obj/%=obj/%))\n+test_bitcoin: $(TESTOBJS) $(filter-out obj/init.o obj/bitcoind.o,$(OBJS:obj/%=obj/%))\n \t$(CXX) $(CFLAGS) -o $@ $(LIBPATHS) $^ $(LIBS) $(TESTLIBS)\n \n clean:"
      },
      {
        "sha": "f8042b2930d86b32ca9b2d571d16b1e4b4c664f3",
        "filename": "src/makefile.unix",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c862d2ff22f06cb15fb9492b9f0b69e3d91a7e44/src/makefile.unix",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c862d2ff22f06cb15fb9492b9f0b69e3d91a7e44/src/makefile.unix",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.unix?ref=c862d2ff22f06cb15fb9492b9f0b69e3d91a7e44",
        "patch": "@@ -121,6 +121,7 @@ OBJS= \\\n     obj/key.o \\\n     obj/db.o \\\n     obj/init.o \\\n+    obj/bitcoind.o \\\n     obj/keystore.o \\\n     obj/main.o \\\n     obj/net.o \\\n@@ -187,7 +188,7 @@ obj-test/%.o: test/%.cpp\n \t      -e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \\\n \t  rm -f $(@:%.o=%.d)\n \n-test_bitcoin: $(TESTOBJS) $(filter-out obj/init.o,$(OBJS:obj/%=obj/%))\n+test_bitcoin: $(TESTOBJS) $(filter-out obj/init.o obj/bitcoind.o,$(OBJS:obj/%=obj/%))\n \t$(LINK) $(xCXXFLAGS) -o $@ $(LIBPATHS) $^ $(TESTLIBS) $(xLDFLAGS) $(LIBS)\n \n clean:"
      }
    ]
  },
  {
    "sha": "13c84b3bd550f93bf6c2bf57677a08a1ea858c60",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxM2M4NGIzYmQ1NTBmOTNiZjZjMmJmNTc2NzdhMDhhMWVhODU4YzYw",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "theuni-nospam-@xbmc.org",
        "date": "2013-05-26T18:00:16Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "theuni-nospam-@xbmc.org",
        "date": "2013-06-04T07:54:14Z"
      },
      "message": "build: add global var for whether or not the gui is enabled",
      "tree": {
        "sha": "5c9b91ad4cf68647d933ff9936a273d4c93ab8cd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5c9b91ad4cf68647d933ff9936a273d4c93ab8cd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/13c84b3bd550f93bf6c2bf57677a08a1ea858c60",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/13c84b3bd550f93bf6c2bf57677a08a1ea858c60",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/13c84b3bd550f93bf6c2bf57677a08a1ea858c60",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/13c84b3bd550f93bf6c2bf57677a08a1ea858c60/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "c862d2ff22f06cb15fb9492b9f0b69e3d91a7e44",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c862d2ff22f06cb15fb9492b9f0b69e3d91a7e44",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c862d2ff22f06cb15fb9492b9f0b69e3d91a7e44"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 5,
      "deletions": 0
    },
    "files": [
      {
        "sha": "682a214fb221922310e1f022fef8e2b81e9cb661",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13c84b3bd550f93bf6c2bf57677a08a1ea858c60/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13c84b3bd550f93bf6c2bf57677a08a1ea858c60/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=13c84b3bd550f93bf6c2bf57677a08a1ea858c60",
        "patch": "@@ -123,6 +123,7 @@ extern void noui_connect();\n int main(int argc, char* argv[])\n {\n     bool fRet = false;\n+    fHaveGUI = false;\n \n     // Connect bitcoind signal handlers\n     noui_connect();"
      },
      {
        "sha": "b8b777161119be5ee9a44c1c5735c76d0fae0fa8",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13c84b3bd550f93bf6c2bf57677a08a1ea858c60/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13c84b3bd550f93bf6c2bf57677a08a1ea858c60/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=13c84b3bd550f93bf6c2bf57677a08a1ea858c60",
        "patch": "@@ -48,6 +48,7 @@ bool fReindex = false;\n bool fBenchmark = false;\n bool fTxIndex = false;\n unsigned int nCoinCacheSize = 5000;\n+bool fHaveGUI = false;\n \n /** Fees smaller than this (in satoshi) are considered zero fee (for transaction creation) */\n int64 CTransaction::nMinTxFee = 10000;  // Override with -mintxfee"
      },
      {
        "sha": "fae37ea512c09a9cbf423d2afe9f898f644bf2de",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13c84b3bd550f93bf6c2bf57677a08a1ea858c60/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13c84b3bd550f93bf6c2bf57677a08a1ea858c60/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=13c84b3bd550f93bf6c2bf57677a08a1ea858c60",
        "patch": "@@ -94,6 +94,7 @@ extern bool fBenchmark;\n extern int nScriptCheckThreads;\n extern bool fTxIndex;\n extern unsigned int nCoinCacheSize;\n+extern bool fHaveGUI;\n \n // Settings\n extern int64 nTransactionFee;"
      },
      {
        "sha": "76e88b36a741cec20bb2e44b9790415a8418d410",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13c84b3bd550f93bf6c2bf57677a08a1ea858c60/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13c84b3bd550f93bf6c2bf57677a08a1ea858c60/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=13c84b3bd550f93bf6c2bf57677a08a1ea858c60",
        "patch": "@@ -113,6 +113,8 @@ static void handleRunawayException(std::exception *e)\n #ifndef BITCOIN_QT_TEST\n int main(int argc, char *argv[])\n {\n+    fHaveGUI = true;\n+\n     // Command-line options take precedence:\n     ParseParameters(argc, argv);\n "
      }
    ]
  },
  {
    "sha": "c98c88b3abf35d04c2058bd50ae50f2496e09594",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjOThjODhiM2FiZjM1ZDA0YzIwNThiZDUwYWU1MGYyNDk2ZTA5NTk0",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "theuni-nospam-@xbmc.org",
        "date": "2013-05-26T18:05:53Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "theuni-nospam-@xbmc.org",
        "date": "2013-06-04T07:54:14Z"
      },
      "message": "build: cosmetic: split usage string for easier formatting",
      "tree": {
        "sha": "7484ecb1faf69f68a4e9085e2ccf9520a5c514c9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7484ecb1faf69f68a4e9085e2ccf9520a5c514c9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c98c88b3abf35d04c2058bd50ae50f2496e09594",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c98c88b3abf35d04c2058bd50ae50f2496e09594",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c98c88b3abf35d04c2058bd50ae50f2496e09594",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c98c88b3abf35d04c2058bd50ae50f2496e09594/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "13c84b3bd550f93bf6c2bf57677a08a1ea858c60",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/13c84b3bd550f93bf6c2bf57677a08a1ea858c60",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/13c84b3bd550f93bf6c2bf57677a08a1ea858c60"
      }
    ],
    "stats": {
      "total": 140,
      "additions": 70,
      "deletions": 70
    },
    "files": [
      {
        "sha": "75229a3d659e082ee060d4094066513acf7d8632",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 70,
        "deletions": 70,
        "changes": 140,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c98c88b3abf35d04c2058bd50ae50f2496e09594/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c98c88b3abf35d04c2058bd50ae50f2496e09594/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=c98c88b3abf35d04c2058bd50ae50f2496e09594",
        "patch": "@@ -158,89 +158,89 @@ bool static Bind(const CService &addr, unsigned int flags) {\n // Core-specific options shared between UI and daemon\n std::string HelpMessage()\n {\n-    string strUsage = _(\"Options:\") + \"\\n\" +\n-        \"  -?                     \" + _(\"This help message\") + \"\\n\" +\n-        \"  -conf=<file>           \" + _(\"Specify configuration file (default: bitcoin.conf)\") + \"\\n\" +\n-        \"  -pid=<file>            \" + _(\"Specify pid file (default: bitcoind.pid)\") + \"\\n\" +\n-        \"  -gen                   \" + _(\"Generate coins (default: 0)\") + \"\\n\" +\n-        \"  -datadir=<dir>         \" + _(\"Specify data directory\") + \"\\n\" +\n-        \"  -dbcache=<n>           \" + _(\"Set database cache size in megabytes (default: 25)\") + \"\\n\" +\n-        \"  -timeout=<n>           \" + _(\"Specify connection timeout in milliseconds (default: 5000)\") + \"\\n\" +\n-        \"  -proxy=<ip:port>       \" + _(\"Connect through socks proxy\") + \"\\n\" +\n-        \"  -socks=<n>             \" + _(\"Select the version of socks proxy to use (4-5, default: 5)\") + \"\\n\" +\n-        \"  -tor=<ip:port>         \" + _(\"Use proxy to reach tor hidden services (default: same as -proxy)\") + \"\\n\"\n-        \"  -dns                   \" + _(\"Allow DNS lookups for -addnode, -seednode and -connect\") + \"\\n\" +\n-        \"  -port=<port>           \" + _(\"Listen for connections on <port> (default: 8333 or testnet: 18333)\") + \"\\n\" +\n-        \"  -maxconnections=<n>    \" + _(\"Maintain at most <n> connections to peers (default: 125)\") + \"\\n\" +\n-        \"  -addnode=<ip>          \" + _(\"Add a node to connect to and attempt to keep the connection open\") + \"\\n\" +\n-        \"  -connect=<ip>          \" + _(\"Connect only to the specified node(s)\") + \"\\n\" +\n-        \"  -seednode=<ip>         \" + _(\"Connect to a node to retrieve peer addresses, and disconnect\") + \"\\n\" +\n-        \"  -externalip=<ip>       \" + _(\"Specify your own public address\") + \"\\n\" +\n-        \"  -onlynet=<net>         \" + _(\"Only connect to nodes in network <net> (IPv4, IPv6 or Tor)\") + \"\\n\" +\n-        \"  -discover              \" + _(\"Discover own IP address (default: 1 when listening and no -externalip)\") + \"\\n\" +\n-        \"  -checkpoints           \" + _(\"Only accept block chain matching built-in checkpoints (default: 1)\") + \"\\n\" +\n-        \"  -listen                \" + _(\"Accept connections from outside (default: 1 if no -proxy or -connect)\") + \"\\n\" +\n-        \"  -bind=<addr>           \" + _(\"Bind to given address and always listen on it. Use [host]:port notation for IPv6\") + \"\\n\" +\n-        \"  -dnsseed               \" + _(\"Find peers using DNS lookup (default: 1 unless -connect)\") + \"\\n\" +\n-        \"  -banscore=<n>          \" + _(\"Threshold for disconnecting misbehaving peers (default: 100)\") + \"\\n\" +\n-        \"  -bantime=<n>           \" + _(\"Number of seconds to keep misbehaving peers from reconnecting (default: 86400)\") + \"\\n\" +\n-        \"  -maxreceivebuffer=<n>  \" + _(\"Maximum per-connection receive buffer, <n>*1000 bytes (default: 5000)\") + \"\\n\" +\n-        \"  -maxsendbuffer=<n>     \" + _(\"Maximum per-connection send buffer, <n>*1000 bytes (default: 1000)\") + \"\\n\" +\n+    string strUsage = _(\"Options:\") + \"\\n\";\n+    strUsage += \"  -?                     \" + _(\"This help message\") + \"\\n\";\n+    strUsage += \"  -conf=<file>           \" + _(\"Specify configuration file (default: bitcoin.conf)\") + \"\\n\";\n+    strUsage += \"  -pid=<file>            \" + _(\"Specify pid file (default: bitcoind.pid)\") + \"\\n\";\n+    strUsage += \"  -gen                   \" + _(\"Generate coins (default: 0)\") + \"\\n\";\n+    strUsage += \"  -datadir=<dir>         \" + _(\"Specify data directory\") + \"\\n\";\n+    strUsage += \"  -dbcache=<n>           \" + _(\"Set database cache size in megabytes (default: 25)\") + \"\\n\";\n+    strUsage += \"  -timeout=<n>           \" + _(\"Specify connection timeout in milliseconds (default: 5000)\") + \"\\n\";\n+    strUsage += \"  -proxy=<ip:port>       \" + _(\"Connect through socks proxy\") + \"\\n\";\n+    strUsage += \"  -socks=<n>             \" + _(\"Select the version of socks proxy to use (4-5, default: 5)\") + \"\\n\";\n+    strUsage += \"  -tor=<ip:port>         \" + _(\"Use proxy to reach tor hidden services (default: same as -proxy)\") + \"\\n\";\n+    strUsage += \"  -dns                   \" + _(\"Allow DNS lookups for -addnode, -seednode and -connect\") + \"\\n\";\n+    strUsage += \"  -port=<port>           \" + _(\"Listen for connections on <port> (default: 8333 or testnet: 18333)\") + \"\\n\";\n+    strUsage += \"  -maxconnections=<n>    \" + _(\"Maintain at most <n> connections to peers (default: 125)\") + \"\\n\";\n+    strUsage += \"  -addnode=<ip>          \" + _(\"Add a node to connect to and attempt to keep the connection open\") + \"\\n\";\n+    strUsage += \"  -connect=<ip>          \" + _(\"Connect only to the specified node(s)\") + \"\\n\";\n+    strUsage += \"  -seednode=<ip>         \" + _(\"Connect to a node to retrieve peer addresses, and disconnect\") + \"\\n\";\n+    strUsage += \"  -externalip=<ip>       \" + _(\"Specify your own public address\") + \"\\n\";\n+    strUsage += \"  -onlynet=<net>         \" + _(\"Only connect to nodes in network <net> (IPv4, IPv6 or Tor)\") + \"\\n\";\n+    strUsage += \"  -discover              \" + _(\"Discover own IP address (default: 1 when listening and no -externalip)\") + \"\\n\";\n+    strUsage += \"  -checkpoints           \" + _(\"Only accept block chain matching built-in checkpoints (default: 1)\") + \"\\n\";\n+    strUsage += \"  -listen                \" + _(\"Accept connections from outside (default: 1 if no -proxy or -connect)\") + \"\\n\";\n+    strUsage += \"  -bind=<addr>           \" + _(\"Bind to given address and always listen on it. Use [host]:port notation for IPv6\") + \"\\n\";\n+    strUsage += \"  -dnsseed               \" + _(\"Find peers using DNS lookup (default: 1 unless -connect)\") + \"\\n\";\n+    strUsage += \"  -banscore=<n>          \" + _(\"Threshold for disconnecting misbehaving peers (default: 100)\") + \"\\n\";\n+    strUsage += \"  -bantime=<n>           \" + _(\"Number of seconds to keep misbehaving peers from reconnecting (default: 86400)\") + \"\\n\";\n+    strUsage += \"  -maxreceivebuffer=<n>  \" + _(\"Maximum per-connection receive buffer, <n>*1000 bytes (default: 5000)\") + \"\\n\";\n+    strUsage += \"  -maxsendbuffer=<n>     \" + _(\"Maximum per-connection send buffer, <n>*1000 bytes (default: 1000)\") + \"\\n\";\n #ifdef USE_UPNP\n #if USE_UPNP\n-        \"  -upnp                  \" + _(\"Use UPnP to map the listening port (default: 1 when listening)\") + \"\\n\" +\n+    strUsage += \"  -upnp                  \" + _(\"Use UPnP to map the listening port (default: 1 when listening)\") + \"\\n\";\n #else\n-        \"  -upnp                  \" + _(\"Use UPnP to map the listening port (default: 0)\") + \"\\n\" +\n+    strUsage += \"  -upnp                  \" + _(\"Use UPnP to map the listening port (default: 0)\") + \"\\n\";\n #endif\n #endif\n-        \"  -paytxfee=<amt>        \" + _(\"Fee per KB to add to transactions you send\") + \"\\n\" +\n+    strUsage += \"  -paytxfee=<amt>        \" + _(\"Fee per KB to add to transactions you send\") + \"\\n\";\n #ifdef QT_GUI\n-        \"  -server                \" + _(\"Accept command line and JSON-RPC commands\") + \"\\n\" +\n+    strUsage += \"  -server                \" + _(\"Accept command line and JSON-RPC commands\") + \"\\n\";\n #endif\n #if !defined(WIN32) && !defined(QT_GUI)\n-        \"  -daemon                \" + _(\"Run in the background as a daemon and accept commands\") + \"\\n\" +\n+    strUsage += \"  -daemon                \" + _(\"Run in the background as a daemon and accept commands\") + \"\\n\";\n #endif\n-        \"  -testnet               \" + _(\"Use the test network\") + \"\\n\" +\n-        \"  -debug                 \" + _(\"Output extra debugging information. Implies all other -debug* options\") + \"\\n\" +\n-        \"  -debugnet              \" + _(\"Output extra network debugging information\") + \"\\n\" +\n-        \"  -logtimestamps         \" + _(\"Prepend debug output with timestamp\") + \"\\n\" +\n-        \"  -shrinkdebugfile       \" + _(\"Shrink debug.log file on client startup (default: 1 when no -debug)\") + \"\\n\" +\n-        \"  -printtoconsole        \" + _(\"Send trace/debug info to console instead of debug.log file\") + \"\\n\" +\n+    strUsage += \"  -testnet               \" + _(\"Use the test network\") + \"\\n\";\n+    strUsage += \"  -debug                 \" + _(\"Output extra debugging information. Implies all other -debug* options\") + \"\\n\";\n+    strUsage += \"  -debugnet              \" + _(\"Output extra network debugging information\") + \"\\n\";\n+    strUsage += \"  -logtimestamps         \" + _(\"Prepend debug output with timestamp\") + \"\\n\";\n+    strUsage += \"  -shrinkdebugfile       \" + _(\"Shrink debug.log file on client startup (default: 1 when no -debug)\") + \"\\n\";\n+    strUsage += \"  -printtoconsole        \" + _(\"Send trace/debug info to console instead of debug.log file\") + \"\\n\";\n #ifdef WIN32\n-        \"  -printtodebugger       \" + _(\"Send trace/debug info to debugger\") + \"\\n\" +\n+    strUsage += \"  -printtodebugger       \" + _(\"Send trace/debug info to debugger\") + \"\\n\";\n #endif\n-        \"  -rpcuser=<user>        \" + _(\"Username for JSON-RPC connections\") + \"\\n\" +\n-        \"  -rpcpassword=<pw>      \" + _(\"Password for JSON-RPC connections\") + \"\\n\" +\n-        \"  -rpcport=<port>        \" + _(\"Listen for JSON-RPC connections on <port> (default: 8332 or testnet: 18332)\") + \"\\n\" +\n-        \"  -rpcallowip=<ip>       \" + _(\"Allow JSON-RPC connections from specified IP address\") + \"\\n\" +\n+    strUsage += \"  -rpcuser=<user>        \" + _(\"Username for JSON-RPC connections\") + \"\\n\";\n+    strUsage += \"  -rpcpassword=<pw>      \" + _(\"Password for JSON-RPC connections\") + \"\\n\";\n+    strUsage += \"  -rpcport=<port>        \" + _(\"Listen for JSON-RPC connections on <port> (default: 8332 or testnet: 18332)\") + \"\\n\";\n+    strUsage += \"  -rpcallowip=<ip>       \" + _(\"Allow JSON-RPC connections from specified IP address\") + \"\\n\";\n #ifndef QT_GUI\n-        \"  -rpcconnect=<ip>       \" + _(\"Send commands to node running on <ip> (default: 127.0.0.1)\") + \"\\n\" +\n+    strUsage += \"  -rpcconnect=<ip>       \" + _(\"Send commands to node running on <ip> (default: 127.0.0.1)\") + \"\\n\";\n #endif\n-        \"  -rpcthreads=<n>        \" + _(\"Set the number of threads to service RPC calls (default: 4)\") + \"\\n\" +\n-        \"  -blocknotify=<cmd>     \" + _(\"Execute command when the best block changes (%s in cmd is replaced by block hash)\") + \"\\n\" +\n-        \"  -walletnotify=<cmd>    \" + _(\"Execute command when a wallet transaction changes (%s in cmd is replaced by TxID)\") + \"\\n\" +\n-        \"  -alertnotify=<cmd>     \" + _(\"Execute command when a relevant alert is received (%s in cmd is replaced by message)\") + \"\\n\" +\n-        \"  -upgradewallet         \" + _(\"Upgrade wallet to latest format\") + \"\\n\" +\n-        \"  -keypool=<n>           \" + _(\"Set key pool size to <n> (default: 100)\") + \"\\n\" +\n-        \"  -rescan                \" + _(\"Rescan the block chain for missing wallet transactions\") + \"\\n\" +\n-        \"  -salvagewallet         \" + _(\"Attempt to recover private keys from a corrupt wallet.dat\") + \"\\n\" +\n-        \"  -checkblocks=<n>       \" + _(\"How many blocks to check at startup (default: 288, 0 = all)\") + \"\\n\" +\n-        \"  -checklevel=<n>        \" + _(\"How thorough the block verification is (0-4, default: 3)\") + \"\\n\" +\n-        \"  -txindex               \" + _(\"Maintain a full transaction index (default: 0)\") + \"\\n\" +\n-        \"  -loadblock=<file>      \" + _(\"Imports blocks from external blk000??.dat file\") + \"\\n\" +\n-        \"  -reindex               \" + _(\"Rebuild block chain index from current blk000??.dat files\") + \"\\n\" +\n-        \"  -par=<n>               \" + _(\"Set the number of script verification threads (up to 16, 0 = auto, <0 = leave that many cores free, default: 0)\") + \"\\n\" +\n-\n-        \"\\n\" + _(\"Block creation options:\") + \"\\n\" +\n-        \"  -blockminsize=<n>      \"   + _(\"Set minimum block size in bytes (default: 0)\") + \"\\n\" +\n-        \"  -blockmaxsize=<n>      \"   + _(\"Set maximum block size in bytes (default: 250000)\") + \"\\n\" +\n-        \"  -blockprioritysize=<n> \"   + _(\"Set maximum size of high-priority/low-fee transactions in bytes (default: 27000)\") + \"\\n\" +\n-\n-        \"\\n\" + _(\"SSL options: (see the Bitcoin Wiki for SSL setup instructions)\") + \"\\n\" +\n-        \"  -rpcssl                                  \" + _(\"Use OpenSSL (https) for JSON-RPC connections\") + \"\\n\" +\n-        \"  -rpcsslcertificatechainfile=<file.cert>  \" + _(\"Server certificate file (default: server.cert)\") + \"\\n\" +\n-        \"  -rpcsslprivatekeyfile=<file.pem>         \" + _(\"Server private key (default: server.pem)\") + \"\\n\" +\n-        \"  -rpcsslciphers=<ciphers>                 \" + _(\"Acceptable ciphers (default: TLSv1+HIGH:!SSLv2:!aNULL:!eNULL:!AH:!3DES:@STRENGTH)\") + \"\\n\";\n+    strUsage += \"  -rpcthreads=<n>        \" + _(\"Set the number of threads to service RPC calls (default: 4)\") + \"\\n\";\n+    strUsage += \"  -blocknotify=<cmd>     \" + _(\"Execute command when the best block changes (%s in cmd is replaced by block hash)\") + \"\\n\";\n+    strUsage += \"  -walletnotify=<cmd>    \" + _(\"Execute command when a wallet transaction changes (%s in cmd is replaced by TxID)\") + \"\\n\";\n+    strUsage += \"  -alertnotify=<cmd>     \" + _(\"Execute command when a relevant alert is received (%s in cmd is replaced by message)\") + \"\\n\";\n+    strUsage += \"  -upgradewallet         \" + _(\"Upgrade wallet to latest format\") + \"\\n\";\n+    strUsage += \"  -keypool=<n>           \" + _(\"Set key pool size to <n> (default: 100)\") + \"\\n\";\n+    strUsage += \"  -rescan                \" + _(\"Rescan the block chain for missing wallet transactions\") + \"\\n\";\n+    strUsage += \"  -salvagewallet         \" + _(\"Attempt to recover private keys from a corrupt wallet.dat\") + \"\\n\";\n+    strUsage += \"  -checkblocks=<n>       \" + _(\"How many blocks to check at startup (default: 288, 0 = all)\") + \"\\n\";\n+    strUsage += \"  -checklevel=<n>        \" + _(\"How thorough the block verification is (0-4, default: 3)\") + \"\\n\";\n+    strUsage += \"  -txindex               \" + _(\"Maintain a full transaction index (default: 0)\") + \"\\n\";\n+    strUsage += \"  -loadblock=<file>      \" + _(\"Imports blocks from external blk000??.dat file\") + \"\\n\";\n+    strUsage += \"  -reindex               \" + _(\"Rebuild block chain index from current blk000??.dat files\") + \"\\n\";\n+    strUsage += \"  -par=<n>               \" + _(\"Set the number of script verification threads (up to 16, 0 = auto, <0 = leave that many cores free, default: 0)\") + \"\\n\";\n+\n+    strUsage += \"\\n\"; _(\"Block creation options:\") + \"\\n\";\n+    strUsage += \"  -blockminsize=<n>      \"   + _(\"Set minimum block size in bytes (default: 0)\") + \"\\n\";\n+    strUsage += \"  -blockmaxsize=<n>      \"   + _(\"Set maximum block size in bytes (default: 250000)\") + \"\\n\";\n+    strUsage += \"  -blockprioritysize=<n> \"   + _(\"Set maximum size of high-priority/low-fee transactions in bytes (default: 27000)\") + \"\\n\";\n+\n+    strUsage += \"\\n\"; _(\"SSL options: (see the Bitcoin Wiki for SSL setup instructions)\") + \"\\n\";\n+    strUsage += \"  -rpcssl                                  \" + _(\"Use OpenSSL (https) for JSON-RPC connections\") + \"\\n\";\n+    strUsage += \"  -rpcsslcertificatechainfile=<file.cert>  \" + _(\"Server certificate file (default: server.cert)\") + \"\\n\";\n+    strUsage += \"  -rpcsslprivatekeyfile=<file.pem>         \" + _(\"Server private key (default: server.pem)\") + \"\\n\";\n+    strUsage += \"  -rpcsslciphers=<ciphers>                 \" + _(\"Acceptable ciphers (default: TLSv1+HIGH:!SSLv2:!aNULL:!eNULL:!AH:!3DES:@STRENGTH)\") + \"\\n\";\n \n     return strUsage;\n }"
      }
    ]
  },
  {
    "sha": "7f61f1ac78039d713f034e648f4efad3649e04c3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZjYxZjFhYzc4MDM5ZDcxM2YwMzRlNjQ4ZjRlZmFkMzY0OWUwNGMz",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "theuni-nospam-@xbmc.org",
        "date": "2013-05-26T18:10:38Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "theuni-nospam-@xbmc.org",
        "date": "2013-06-04T07:54:14Z"
      },
      "message": "build: use runtime setting for displaying the help message rather than QT_GUI define",
      "tree": {
        "sha": "21344611428ce29ace3b400cbd0d00ccfb9c9d36",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/21344611428ce29ace3b400cbd0d00ccfb9c9d36"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7f61f1ac78039d713f034e648f4efad3649e04c3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f61f1ac78039d713f034e648f4efad3649e04c3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7f61f1ac78039d713f034e648f4efad3649e04c3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f61f1ac78039d713f034e648f4efad3649e04c3/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "c98c88b3abf35d04c2058bd50ae50f2496e09594",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c98c88b3abf35d04c2058bd50ae50f2496e09594",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c98c88b3abf35d04c2058bd50ae50f2496e09594"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 9,
      "deletions": 11
    },
    "files": [
      {
        "sha": "dcc43d8368ac3111af1c7eaaac81a28098547de7",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 11,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7f61f1ac78039d713f034e648f4efad3649e04c3/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7f61f1ac78039d713f034e648f4efad3649e04c3/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=7f61f1ac78039d713f034e648f4efad3649e04c3",
        "patch": "@@ -194,11 +194,11 @@ std::string HelpMessage()\n #endif\n #endif\n     strUsage += \"  -paytxfee=<amt>        \" + _(\"Fee per KB to add to transactions you send\") + \"\\n\";\n-#ifdef QT_GUI\n-    strUsage += \"  -server                \" + _(\"Accept command line and JSON-RPC commands\") + \"\\n\";\n-#endif\n-#if !defined(WIN32) && !defined(QT_GUI)\n-    strUsage += \"  -daemon                \" + _(\"Run in the background as a daemon and accept commands\") + \"\\n\";\n+    if (fHaveGUI)\n+        strUsage += \"  -server                \" + _(\"Accept command line and JSON-RPC commands\") + \"\\n\";\n+#if !defined(WIN32)\n+    if (fHaveGUI)\n+        strUsage += \"  -daemon                \" + _(\"Run in the background as a daemon and accept commands\") + \"\\n\";\n #endif\n     strUsage += \"  -testnet               \" + _(\"Use the test network\") + \"\\n\";\n     strUsage += \"  -debug                 \" + _(\"Output extra debugging information. Implies all other -debug* options\") + \"\\n\";\n@@ -213,9 +213,8 @@ std::string HelpMessage()\n     strUsage += \"  -rpcpassword=<pw>      \" + _(\"Password for JSON-RPC connections\") + \"\\n\";\n     strUsage += \"  -rpcport=<port>        \" + _(\"Listen for JSON-RPC connections on <port> (default: 8332 or testnet: 18332)\") + \"\\n\";\n     strUsage += \"  -rpcallowip=<ip>       \" + _(\"Allow JSON-RPC connections from specified IP address\") + \"\\n\";\n-#ifndef QT_GUI\n-    strUsage += \"  -rpcconnect=<ip>       \" + _(\"Send commands to node running on <ip> (default: 127.0.0.1)\") + \"\\n\";\n-#endif\n+    if (!fHaveGUI)\n+        strUsage += \"  -rpcconnect=<ip>       \" + _(\"Send commands to node running on <ip> (default: 127.0.0.1)\") + \"\\n\";\n     strUsage += \"  -rpcthreads=<n>        \" + _(\"Set the number of threads to service RPC calls (default: 4)\") + \"\\n\";\n     strUsage += \"  -blocknotify=<cmd>     \" + _(\"Execute command when the best block changes (%s in cmd is replaced by block hash)\") + \"\\n\";\n     strUsage += \"  -walletnotify=<cmd>    \" + _(\"Execute command when a wallet transaction changes (%s in cmd is replaced by TxID)\") + \"\\n\";\n@@ -435,9 +434,8 @@ bool AppInit2(boost::thread_group& threadGroup)\n         fServer = GetBoolArg(\"-server\", false);\n \n     /* force fServer when running without GUI */\n-#if !defined(QT_GUI)\n-    fServer = true;\n-#endif\n+    if (!fHaveGUI)\n+        fServer = true;\n     fPrintToConsole = GetBoolArg(\"-printtoconsole\", false);\n     fPrintToDebugger = GetBoolArg(\"-printtodebugger\", false);\n     fLogTimestamps = GetBoolArg(\"-logtimestamps\", false);"
      }
    ]
  },
  {
    "sha": "ee4b170c929b0f0d0b5a9fcaa0c35c79e9ac157c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZTRiMTcwYzkyOWIwZjBkMGI1YTlmY2FhMGMzNWM3OWU5YWMxNTdj",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "theuni-nospam-@xbmc.org",
        "date": "2013-05-26T18:17:18Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "theuni-nospam-@xbmc.org",
        "date": "2013-06-04T07:54:14Z"
      },
      "message": "build: use runtime setting for wallet rather than QT_GUI define",
      "tree": {
        "sha": "e6832adf2210afe40b78979a2ac0cb27e3b28291",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e6832adf2210afe40b78979a2ac0cb27e3b28291"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ee4b170c929b0f0d0b5a9fcaa0c35c79e9ac157c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee4b170c929b0f0d0b5a9fcaa0c35c79e9ac157c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ee4b170c929b0f0d0b5a9fcaa0c35c79e9ac157c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee4b170c929b0f0d0b5a9fcaa0c35c79e9ac157c/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "7f61f1ac78039d713f034e648f4efad3649e04c3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f61f1ac78039d713f034e648f4efad3649e04c3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7f61f1ac78039d713f034e648f4efad3649e04c3"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 3,
      "deletions": 2
    },
    "files": [
      {
        "sha": "17a35d94030e2df8880de9bb425be35bfbf7047b",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee4b170c929b0f0d0b5a9fcaa0c35c79e9ac157c/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee4b170c929b0f0d0b5a9fcaa0c35c79e9ac157c/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=ee4b170c929b0f0d0b5a9fcaa0c35c79e9ac157c",
        "patch": "@@ -459,7 +459,8 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn)\n         if (fInsertedNew || fUpdated)\n             if (!wtx.WriteToDisk())\n                 return false;\n-#ifndef QT_GUI\n+\n+        if (!fHaveGUI) {\n         // If default receiving address gets used, replace it with a new one\n         if (vchDefaultKey.IsValid()) {\n             CScript scriptDefaultKey;\n@@ -477,7 +478,7 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn)\n                 }\n             }\n         }\n-#endif\n+        }\n         // since AddToWallet is called directly for self-originating transactions, check for consumption of own coins\n         WalletUpdateSpent(wtx);\n "
      }
    ]
  },
  {
    "sha": "34994ebcb0cb5164f515266ebc5524a9608cb1c8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNDk5NGViY2IwY2I1MTY0ZjUxNTI2NmViYzU1MjRhOTYwOGNiMWM4",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "theuni-nospam-@xbmc.org",
        "date": "2013-05-26T18:18:33Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "theuni-nospam-@xbmc.org",
        "date": "2013-06-04T07:54:14Z"
      },
      "message": "build: cosmetics after last commit",
      "tree": {
        "sha": "f427a850ce641e023c50ef945677f18cb769c4ac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f427a850ce641e023c50ef945677f18cb769c4ac"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/34994ebcb0cb5164f515266ebc5524a9608cb1c8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34994ebcb0cb5164f515266ebc5524a9608cb1c8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/34994ebcb0cb5164f515266ebc5524a9608cb1c8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34994ebcb0cb5164f515266ebc5524a9608cb1c8/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "ee4b170c929b0f0d0b5a9fcaa0c35c79e9ac157c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee4b170c929b0f0d0b5a9fcaa0c35c79e9ac157c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ee4b170c929b0f0d0b5a9fcaa0c35c79e9ac157c"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 12,
      "deletions": 12
    },
    "files": [
      {
        "sha": "549d9bbf4bfb53d6680e8591ee1c157969f712c0",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34994ebcb0cb5164f515266ebc5524a9608cb1c8/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34994ebcb0cb5164f515266ebc5524a9608cb1c8/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=34994ebcb0cb5164f515266ebc5524a9608cb1c8",
        "patch": "@@ -461,24 +461,24 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn)\n                 return false;\n \n         if (!fHaveGUI) {\n-        // If default receiving address gets used, replace it with a new one\n-        if (vchDefaultKey.IsValid()) {\n-            CScript scriptDefaultKey;\n-            scriptDefaultKey.SetDestination(vchDefaultKey.GetID());\n-            BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n-            {\n-                if (txout.scriptPubKey == scriptDefaultKey)\n+            // If default receiving address gets used, replace it with a new one\n+            if (vchDefaultKey.IsValid()) {\n+                CScript scriptDefaultKey;\n+                scriptDefaultKey.SetDestination(vchDefaultKey.GetID());\n+                BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n                 {\n-                    CPubKey newDefaultKey;\n-                    if (GetKeyFromPool(newDefaultKey, false))\n+                    if (txout.scriptPubKey == scriptDefaultKey)\n                     {\n-                        SetDefaultKey(newDefaultKey);\n-                        SetAddressBookName(vchDefaultKey.GetID(), \"\");\n+                        CPubKey newDefaultKey;\n+                        if (GetKeyFromPool(newDefaultKey, false))\n+                        {\n+                            SetDefaultKey(newDefaultKey);\n+                            SetAddressBookName(vchDefaultKey.GetID(), \"\");\n+                        }\n                     }\n                 }\n             }\n         }\n-        }\n         // since AddToWallet is called directly for self-originating transactions, check for consumption of own coins\n         WalletUpdateSpent(wtx);\n "
      }
    ]
  },
  {
    "sha": "6887bb9ad7f6722a64e9fbdf0a780f362dc796a1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ODg3YmI5YWQ3ZjY3MjJhNjRlOWZiZGYwYTc4MGYzNjJkYzc5NmEx",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "theuni-nospam-@xbmc.org",
        "date": "2013-05-26T18:19:04Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "theuni-nospam-@xbmc.org",
        "date": "2013-06-04T07:54:14Z"
      },
      "message": "build: kill off the QT_GUI define",
      "tree": {
        "sha": "c16cc15a8d9f21f1b616f6f6c337696a9277913d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c16cc15a8d9f21f1b616f6f6c337696a9277913d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6887bb9ad7f6722a64e9fbdf0a780f362dc796a1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6887bb9ad7f6722a64e9fbdf0a780f362dc796a1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6887bb9ad7f6722a64e9fbdf0a780f362dc796a1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6887bb9ad7f6722a64e9fbdf0a780f362dc796a1/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "34994ebcb0cb5164f515266ebc5524a9608cb1c8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34994ebcb0cb5164f515266ebc5524a9608cb1c8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/34994ebcb0cb5164f515266ebc5524a9608cb1c8"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "ec9f5e4a1ad4344c437ab0dd47db10d97809fd99",
        "filename": "bitcoin-qt.pro",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6887bb9ad7f6722a64e9fbdf0a780f362dc796a1/bitcoin-qt.pro",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6887bb9ad7f6722a64e9fbdf0a780f362dc796a1/bitcoin-qt.pro",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/bitcoin-qt.pro?ref=6887bb9ad7f6722a64e9fbdf0a780f362dc796a1",
        "patch": "@@ -5,7 +5,7 @@ VERSION = 0.8.2\n INCLUDEPATH += src src/json src/qt\n QT += core gui network\n greaterThan(QT_MAJOR_VERSION, 4): QT += widgets\n-DEFINES += QT_GUI BOOST_THREAD_USE_LIB BOOST_SPIRIT_THREADSAFE\n+DEFINES += BOOST_THREAD_USE_LIB BOOST_SPIRIT_THREADSAFE\n CONFIG += no_include_pwd\n CONFIG += thread\n "
      }
    ]
  }
]