BitcoinPullTester,2013-05-26T19:24:44Z,"Automatic sanity-testing: FAILED BUILD/TEST, see http://jenkins.bluematt.me/pull-tester/37d4ab5e11da48e7627b446a2fae716555c58f18 for binaries and test log.\n\nThis could happen for one of several reasons:\n1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts (please tweak those patches in contrib/tes",https://github.com/bitcoin/bitcoin/pull/2700#issuecomment-18468130,18468130,
BitcoinPullTester,2013-05-26T20:43:18Z,"Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/feb4b7ef8d3ffb49b9bca41928051f7a8f6b4f29 for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/cu",https://github.com/bitcoin/bitcoin/pull/2700#issuecomment-18469401,18469401,
jonasschnelli,2013-05-27T13:54:51Z,What's the benefit of this refactor?\nI like ifdefs.\nThis change will mean we have GUI only code in the non-GUI binary (and vicaversa).\n,https://github.com/bitcoin/bitcoin/pull/2700#issuecomment-18499731,18499731,
laanwj,2013-05-27T14:41:44Z,"@jonasschnelli: Compilation speed and sanity. This allows compiling the\ncore objects only once and storing them in an archive (library) to be used\nby the all of bitcoin-qt, bitcoind and the tests.\n\nThere are only very few differences left under QT_GUI defines (some help\nmessages, and the default key which is going away anyway) so I honestly\ndon't see the ""GUI code in non-GUI"" problem.\n",https://github.com/bitcoin/bitcoin/pull/2700#issuecomment-18501757,18501757,
sipa,2013-05-27T15:03:59Z,Any QT_GUI ifdef in the core code means that the core <-> GUI split wasn't done correctly in the first place. The core semantics shouldn't depend on whether there is a GUI on top of it or not...\n,https://github.com/bitcoin/bitcoin/pull/2700#issuecomment-18502766,18502766,
gavinandresen,2013-05-27T18:51:47Z,ACK on the concept; I haven't compiled/tested.\n,https://github.com/bitcoin/bitcoin/pull/2700#issuecomment-18510763,18510763,
jonasschnelli,2013-05-27T19:04:07Z,ACK\ncompile and run (Bitcoin-Qt.app and bitcoind) smooth on osx 10.8.\n,https://github.com/bitcoin/bitcoin/pull/2700#issuecomment-18511115,18511115,
theuni,2013-05-27T20:13:20Z,"@jonasschnelli you said: ""I like ifdefs"". If that's the resounding attitude here, I'll need to reevaluate my autotools work. Ifdefs are a portability nightmare if used to control runtime behavior. In this case, depending on the compiler/linker/settings used, the unreachable paths might be stripped away just as if ifdefs had been used.\n\nWould you mind explaining your position, and if it's common ",https://github.com/bitcoin/bitcoin/pull/2700#issuecomment-18513128,18513128,
luke-jr,2013-05-27T20:30:43Z,"@theuni I don't think @jonasschnelli 's ifdef love is representative of most developers here. It makes sense for some optional build-time features (UPnP, IPv6), but not so much in this case.\n",https://github.com/bitcoin/bitcoin/pull/2700#issuecomment-18513680,18513680,
jonasschnelli,2013-05-27T20:31:16Z,@theuni: no. just go on (even when i – generally – like #ifdef's). I just like binaries that only containing code which will be runned through. But for this case ifdefs are not the right thing.\n,https://github.com/bitcoin/bitcoin/pull/2700#issuecomment-18513701,18513701,
theuni,2013-05-27T20:40:57Z,"Roger, thanks. I have more to say on the subject, but I'll do it in code/PR form as I go rather than discussing vague concepts here.\n",https://github.com/bitcoin/bitcoin/pull/2700#issuecomment-18513998,18513998,
jgarzik,2013-05-28T13:21:54Z,"#ifdefs are evaluated on a case-by-case basis, if they make sense.  If the GUI supports a runtime switch that forces daemon mode, then ""#ifdef GUI"" construct is not applicable for that build.  It depends on the build and platform.  Clearly, #ifdef GUI is applicable to a bitcoind-only build.\n\nThus, just giving that one example, you can see where #ifdef is, and is not, applicable.  Personal prefer",https://github.com/bitcoin/bitcoin/pull/2700#issuecomment-18549718,18549718,
jgarzik,2013-05-28T13:22:23Z,ACK on the general concept\n,https://github.com/bitcoin/bitcoin/pull/2700#issuecomment-18549741,18549741,
theuni,2013-05-28T20:06:18Z,"Ok, I've pushed changes to address comments here. I'll squash it down if everyone is ok with the above.\n",https://github.com/bitcoin/bitcoin/pull/2700#issuecomment-18576315,18576315,
BitcoinPullTester,2013-05-28T20:54:45Z,"Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/c5e9ebcfb206deb19db166db4063120f220a3f3b for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/cu",https://github.com/bitcoin/bitcoin/pull/2700#issuecomment-18579388,18579388,
sipa,2013-05-30T02:41:04Z,Any reason why the init_noui code isn't just in noui?\n,https://github.com/bitcoin/bitcoin/pull/2700#issuecomment-18658528,18658528,
laanwj,2013-05-30T07:15:52Z,"Agree with @sipa. We could call the resulting file `bitcoind.cpp`, which is more descriptive than `noui.cpp`.\n",https://github.com/bitcoin/bitcoin/pull/2700#issuecomment-18665129,18665129,
sipa,2013-05-30T07:17:13Z,Good idea.\n,https://github.com/bitcoin/bitcoin/pull/2700#issuecomment-18665158,18665158,
theuni,2013-05-30T07:17:16Z,"yep, makes perfect sense. will do.\n",https://github.com/bitcoin/bitcoin/pull/2700#issuecomment-18665159,18665159,
theuni,2013-06-04T07:56:55Z,"renamed init_noui.cpp to bitcoind.cpp, rebased to current HEAD, and squashed logically.\n\nAnything else needed?\n",https://github.com/bitcoin/bitcoin/pull/2700#issuecomment-18894308,18894308,
theuni,2013-06-04T07:59:51Z,"Grr, I just reread the comment above and realized I didn't make the change you guys were after. doing now.\n",https://github.com/bitcoin/bitcoin/pull/2700#issuecomment-18894412,18894412,
theuni,2013-06-04T08:09:57Z,"Actually, the noui stuff can't move into bitcoind.cpp, as that would defeat the purpose of this rework. That would mean that test_bitcoin would have to link in bitcoind.o for noui_connect(), while also pulling in a conflicting main().\n\nThe object containing main() needs to stay as thin as possible.\n",https://github.com/bitcoin/bitcoin/pull/2700#issuecomment-18894825,18894825,
BitcoinPullTester,2013-06-04T08:49:04Z,"Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/6887bb9ad7f6722a64e9fbdf0a780f362dc796a1 for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/cu",https://github.com/bitcoin/bitcoin/pull/2700#issuecomment-18896467,18896467,
sipa,2013-06-05T02:12:15Z,ACK\n,https://github.com/bitcoin/bitcoin/pull/2700#issuecomment-18951572,18951572,
laanwj,2013-06-05T16:31:43Z,ACK\n,https://github.com/bitcoin/bitcoin/pull/2700#issuecomment-18989866,18989866,
jgarzik,2013-06-05T17:24:47Z,"ACK\n\nCoordination note:  Recommend waiting until #2154 is merged, to merge this.\n",https://github.com/bitcoin/bitcoin/pull/2700#issuecomment-18993190,18993190,
theuni,2013-06-05T17:35:58Z,"@jgarzik This is holding up my autotools pull request (it depends on this work), and it looks like #2154 could be a while. Could i convince you to change your mind on that?\n",https://github.com/bitcoin/bitcoin/pull/2700#issuecomment-18993907,18993907,
jgarzik,2013-06-05T17:46:33Z,#2154 won't be a while.  See that pull req already discussing a hold on other pull reqs.\n,https://github.com/bitcoin/bitcoin/pull/2700#issuecomment-18994551,18994551,
sipa,2013-06-05T17:48:57Z,"Just tested: #2700 and #2154 do not conflict with each other, so this can be merged independently.\n",https://github.com/bitcoin/bitcoin/pull/2700#issuecomment-18994693,18994693,
jgarzik,2013-06-05T17:56:11Z,"Great, best of all worlds :)\n",https://github.com/bitcoin/bitcoin/pull/2700#issuecomment-18995190,18995190,
theuni,2013-06-05T18:06:40Z,"great, thanks\n",https://github.com/bitcoin/bitcoin/pull/2700#issuecomment-18995827,18995827,
laanwj,2013-05-27T15:59:52Z,"Suggestion: move AppInit to this file as well. It is a bit empty, and AppInit is only used by the bitcoind (not by either bitcoin-qt or the tests), so it fits here.\n",https://github.com/bitcoin/bitcoin/pull/2700#discussion_r4402342,4402342,src/init_noui.cpp
theuni,2013-05-27T20:04:39Z,"I left AppInit where it was because there's no logical reason to split it out (meaning no risk of symbol collisions if left in the static archive). It could feasibly be used to start a non-graphical session via the qt binary using something like 'bitcoin-qt --no-gui' if such behavior was ever desired in the future. But if there's opposition, sure, I can do that.\n",https://github.com/bitcoin/bitcoin/pull/2700#discussion_r4404207,4404207,src/init_noui.cpp
laanwj,2013-05-28T07:18:51Z,"Such a feature (start a daemon session from bitcoin-qt) will never be\nsupported. There is already the debug console window and the --server\noption.\n\nFunctions that are only used by either the UI or daemon should be moved to\ntheir respective frontends (unless there is a very good reason not to, like\nkeeping methods acting on an object together, but I disagree there is one\nin this case).\n",https://github.com/bitcoin/bitcoin/pull/2700#discussion_r4407666,4407666,src/init_noui.cpp
theuni,2013-05-28T08:01:55Z,OK. Will move.\n,https://github.com/bitcoin/bitcoin/pull/2700#discussion_r4408106,4408106,src/init_noui.cpp
