[
  {
    "sha": "4a3fc35629a2820cecd15898f112fa730e5adcec",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YTNmYzM1NjI5YTI4MjBjZWNkMTU4OThmMTEyZmE3MzBlNWFkY2Vj",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-04-19T16:55:32Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-07-15T01:25:21Z"
      },
      "message": "Track keypool entries as internal vs external in memory\n\nThis resolves a super minor performance regressions in several\nkeypool-handling functions",
      "tree": {
        "sha": "189446bca88ad269279c6eb87afa295674fcb25e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/189446bca88ad269279c6eb87afa295674fcb25e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4a3fc35629a2820cecd15898f112fa730e5adcec",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a3fc35629a2820cecd15898f112fa730e5adcec",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4a3fc35629a2820cecd15898f112fa730e5adcec",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a3fc35629a2820cecd15898f112fa730e5adcec/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d083bd9b9c5249f21b8b7e4abd7aee48a25806b1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d083bd9b9c5249f21b8b7e4abd7aee48a25806b1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d083bd9b9c5249f21b8b7e4abd7aee48a25806b1"
      }
    ],
    "stats": {
      "total": 202,
      "additions": 102,
      "deletions": 100
    },
    "files": [
      {
        "sha": "cc4d99d301e7a1baeba8ab54b470d414388cb640",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 89,
        "deletions": 94,
        "changes": 183,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a3fc35629a2820cecd15898f112fa730e5adcec/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a3fc35629a2820cecd15898f112fa730e5adcec/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=4a3fc35629a2820cecd15898f112fa730e5adcec",
        "patch": "@@ -2941,7 +2941,8 @@ DBErrors CWallet::LoadWallet(bool& fFirstRunRet)\n         if (dbw->Rewrite(\"\\x04pool\"))\n         {\n             LOCK(cs_wallet);\n-            setKeyPool.clear();\n+            setInternalKeyPool.clear();\n+            setExternalKeyPool.clear();\n             // Note: can't top-up keypool here, because wallet is locked.\n             // User will be prompted to unlock wallet the next operation\n             // that requires a new key.\n@@ -2969,7 +2970,8 @@ DBErrors CWallet::ZapSelectTx(std::vector<uint256>& vHashIn, std::vector<uint256\n     {\n         if (dbw->Rewrite(\"\\x04pool\"))\n         {\n-            setKeyPool.clear();\n+            setInternalKeyPool.clear();\n+            setExternalKeyPool.clear();\n             // Note: can't top-up keypool here, because wallet is locked.\n             // User will be prompted to unlock wallet the next operation\n             // that requires a new key.\n@@ -2994,7 +2996,8 @@ DBErrors CWallet::ZapWalletTx(std::vector<CWalletTx>& vWtx)\n         if (dbw->Rewrite(\"\\x04pool\"))\n         {\n             LOCK(cs_wallet);\n-            setKeyPool.clear();\n+            setInternalKeyPool.clear();\n+            setExternalKeyPool.clear();\n             // Note: can't top-up keypool here, because wallet is locked.\n             // User will be prompted to unlock wallet the next operation\n             // that requires a new key.\n@@ -3078,9 +3081,12 @@ bool CWallet::NewKeyPool()\n     {\n         LOCK(cs_wallet);\n         CWalletDB walletdb(*dbw);\n-        for (int64_t nIndex : setKeyPool)\n+        for (int64_t nIndex : setInternalKeyPool)\n             walletdb.ErasePool(nIndex);\n-        setKeyPool.clear();\n+        setInternalKeyPool.clear();\n+        BOOST_FOREACH(int64_t nIndex, setExternalKeyPool)\n+            walletdb.ErasePool(nIndex);\n+        setExternalKeyPool.clear();\n \n         if (!TopUpKeyPool()) {\n             return false;\n@@ -3092,25 +3098,8 @@ bool CWallet::NewKeyPool()\n \n size_t CWallet::KeypoolCountExternalKeys()\n {\n-    AssertLockHeld(cs_wallet); // setKeyPool\n-\n-    // immediately return setKeyPool's size if HD or HD_SPLIT is disabled or not supported\n-    if (!IsHDEnabled() || !CanSupportFeature(FEATURE_HD_SPLIT))\n-        return setKeyPool.size();\n-\n-    CWalletDB walletdb(*dbw);\n-\n-    // count amount of external keys\n-    size_t amountE = 0;\n-    for(const int64_t& id : setKeyPool)\n-    {\n-        CKeyPool tmpKeypool;\n-        if (!walletdb.ReadPool(id, tmpKeypool))\n-            throw std::runtime_error(std::string(__func__) + \": read failed\");\n-        amountE += !tmpKeypool.fInternal;\n-    }\n-\n-    return amountE;\n+    AssertLockHeld(cs_wallet); // setExternalKeyPool\n+    return setExternalKeyPool.size();\n }\n \n bool CWallet::TopUpKeyPool(unsigned int kpSize)\n@@ -3130,10 +3119,8 @@ bool CWallet::TopUpKeyPool(unsigned int kpSize)\n \n         // count amount of available keys (internal, external)\n         // make sure the keypool of external and internal keys fits the user selected target (-keypool)\n-        int64_t amountExternal = KeypoolCountExternalKeys();\n-        int64_t amountInternal = setKeyPool.size() - amountExternal;\n-        int64_t missingExternal = std::max(std::max((int64_t) nTargetSize, (int64_t) 1) - amountExternal, (int64_t) 0);\n-        int64_t missingInternal = std::max(std::max((int64_t) nTargetSize, (int64_t) 1) - amountInternal, (int64_t) 0);\n+        int64_t missingExternal = std::max(std::max((int64_t) nTargetSize, (int64_t) 1) - (int64_t)setExternalKeyPool.size(), (int64_t) 0);\n+        int64_t missingInternal = std::max(std::max((int64_t) nTargetSize, (int64_t) 1) - (int64_t)setInternalKeyPool.size(), (int64_t) 0);\n \n         if (!IsHDEnabled() || !CanSupportFeature(FEATURE_HD_SPLIT))\n         {\n@@ -3147,18 +3134,26 @@ bool CWallet::TopUpKeyPool(unsigned int kpSize)\n             int64_t nEnd = 1;\n             if (i < missingInternal)\n                 internal = true;\n-            if (!setKeyPool.empty())\n-                nEnd = *(--setKeyPool.end()) + 1;\n+            if (!setInternalKeyPool.empty())\n+                nEnd = *(--setInternalKeyPool.end()) + 1;\n+            if (!setExternalKeyPool.empty())\n+                nEnd = std::max(nEnd, *(--setExternalKeyPool.end()) + 1);\n+\n             if (!walletdb.WritePool(nEnd, CKeyPool(GenerateNewKey(internal), internal)))\n                 throw std::runtime_error(std::string(__func__) + \": writing generated key failed\");\n-            setKeyPool.insert(nEnd);\n-            LogPrintf(\"keypool added key %d, size=%u, internal=%d\\n\", nEnd, setKeyPool.size(), internal);\n+\n+            if (internal) {\n+                setInternalKeyPool.insert(nEnd);\n+            } else {\n+                setExternalKeyPool.insert(nEnd);\n+            }\n+            LogPrintf(\"keypool added key %d, size=%u (%u internal), new key is %s\\n\", nEnd, setInternalKeyPool.size() + setExternalKeyPool.size(), setInternalKeyPool.size(), internal ? \"internal\" : \"external\");\n         }\n     }\n     return true;\n }\n \n-void CWallet::ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool, bool internal)\n+void CWallet::ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool, bool fRequestedInternal)\n {\n     nIndex = -1;\n     keypool.vchPubKey = CPubKey();\n@@ -3168,30 +3163,30 @@ void CWallet::ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool, bool int\n         if (!IsLocked())\n             TopUpKeyPool();\n \n+        bool fReturningInternal = IsHDEnabled() && CanSupportFeature(FEATURE_HD_SPLIT) && fRequestedInternal;\n+        std::set<int64_t>& setKeyPool = fReturningInternal ? setInternalKeyPool : setExternalKeyPool;\n+\n         // Get the oldest key\n         if(setKeyPool.empty())\n             return;\n \n         CWalletDB walletdb(*dbw);\n \n-        // try to find a key that matches the internal/external filter\n-        for(const int64_t& id : setKeyPool)\n-        {\n-            CKeyPool tmpKeypool;\n-            if (!walletdb.ReadPool(id, tmpKeypool))\n-                throw std::runtime_error(std::string(__func__) + \": read failed\");\n-            if (!HaveKey(tmpKeypool.vchPubKey.GetID()))\n-                throw std::runtime_error(std::string(__func__) + \": unknown key in key pool\");\n-            if (!IsHDEnabled() || !CanSupportFeature(FEATURE_HD_SPLIT) || tmpKeypool.fInternal == internal)\n-            {\n-                nIndex = id;\n-                keypool = tmpKeypool;\n-                setKeyPool.erase(id);\n-                assert(keypool.vchPubKey.IsValid());\n-                LogPrintf(\"keypool reserve %d\\n\", nIndex);\n-                return;\n-            }\n+        auto it = setKeyPool.begin();\n+        nIndex = *it;\n+        setKeyPool.erase(it);\n+        if (!walletdb.ReadPool(nIndex, keypool)) {\n+            throw std::runtime_error(std::string(__func__) + \": read failed\");\n         }\n+        if (!HaveKey(keypool.vchPubKey.GetID())) {\n+            throw std::runtime_error(std::string(__func__) + \": unknown key in key pool\");\n+        }\n+        if (keypool.fInternal != fReturningInternal) {\n+            throw std::runtime_error(std::string(__func__) + \": keypool entry misclassified\");\n+        }\n+\n+        assert(keypool.vchPubKey.IsValid());\n+        LogPrintf(\"keypool reserve %d\\n\", nIndex);\n     }\n }\n \n@@ -3203,12 +3198,16 @@ void CWallet::KeepKey(int64_t nIndex)\n     LogPrintf(\"keypool keep %d\\n\", nIndex);\n }\n \n-void CWallet::ReturnKey(int64_t nIndex)\n+void CWallet::ReturnKey(int64_t nIndex, bool fInternal)\n {\n     // Return to key pool\n     {\n         LOCK(cs_wallet);\n-        setKeyPool.insert(nIndex);\n+        if (fInternal) {\n+            setInternalKeyPool.insert(nIndex);\n+        } else {\n+            setExternalKeyPool.insert(nIndex);\n+        }\n     }\n     LogPrintf(\"keypool return %d\\n\", nIndex);\n }\n@@ -3232,48 +3231,34 @@ bool CWallet::GetKeyFromPool(CPubKey& result, bool internal)\n     return true;\n }\n \n-int64_t CWallet::GetOldestKeyPoolTime()\n-{\n-    LOCK(cs_wallet);\n-\n-    // if the keypool is empty, return <NOW>\n-    if (setKeyPool.empty())\n+static int64_t GetOldestKeyTimeInPool(const std::set<int64_t>& setKeyPool, CWalletDB& walletdb) {\n+    if (setKeyPool.empty()) {\n         return GetTime();\n+    }\n \n     CKeyPool keypool;\n-    CWalletDB walletdb(*dbw);\n-\n-    if (IsHDEnabled() && CanSupportFeature(FEATURE_HD_SPLIT))\n-    {\n-        // if HD & HD Chain Split is enabled, response max(oldest-internal-key, oldest-external-key)\n-        int64_t now = GetTime();\n-        int64_t oldest_external = now, oldest_internal = now;\n-\n-        for(const int64_t& id : setKeyPool)\n-        {\n-            if (!walletdb.ReadPool(id, keypool)) {\n-                throw std::runtime_error(std::string(__func__) + \": read failed\");\n-            }\n-            if (keypool.fInternal && keypool.nTime < oldest_internal) {\n-                oldest_internal = keypool.nTime;\n-            }\n-            else if (!keypool.fInternal && keypool.nTime < oldest_external) {\n-                oldest_external = keypool.nTime;\n-            }\n-            if (oldest_internal != now && oldest_external != now) {\n-                break;\n-            }\n-        }\n-        return std::max(oldest_internal, oldest_external);\n-    }\n-    // load oldest key from keypool, get time and return\n     int64_t nIndex = *(setKeyPool.begin());\n     if (!walletdb.ReadPool(nIndex, keypool))\n         throw std::runtime_error(std::string(__func__) + \": read oldest key in keypool failed\");\n     assert(keypool.vchPubKey.IsValid());\n     return keypool.nTime;\n }\n \n+int64_t CWallet::GetOldestKeyPoolTime()\n+{\n+    LOCK(cs_wallet);\n+\n+    CWalletDB walletdb(*dbw);\n+\n+    // load oldest key from keypool, get time and return\n+    int64_t oldestKey = GetOldestKeyTimeInPool(setExternalKeyPool, walletdb);\n+    if (IsHDEnabled() && CanSupportFeature(FEATURE_HD_SPLIT)) {\n+        oldestKey = std::max(GetOldestKeyTimeInPool(setInternalKeyPool, walletdb), oldestKey);\n+    }\n+\n+    return oldestKey;\n+}\n+\n std::map<CTxDestination, CAmount> CWallet::GetAddressBalances()\n {\n     std::map<CTxDestination, CAmount> balances;\n@@ -3432,6 +3417,7 @@ bool CReserveKey::GetReservedKey(CPubKey& pubkey, bool internal)\n         else {\n             return false;\n         }\n+        fInternal = keypool.fInternal;\n     }\n     assert(vchPubKey.IsValid());\n     pubkey = vchPubKey;\n@@ -3449,31 +3435,40 @@ void CReserveKey::KeepKey()\n void CReserveKey::ReturnKey()\n {\n     if (nIndex != -1)\n-        pwallet->ReturnKey(nIndex);\n+        pwallet->ReturnKey(nIndex, fInternal);\n     nIndex = -1;\n     vchPubKey = CPubKey();\n }\n \n-void CWallet::GetAllReserveKeys(std::set<CKeyID>& setAddress) const\n-{\n-    setAddress.clear();\n-\n-    CWalletDB walletdb(*dbw);\n-\n-    LOCK2(cs_main, cs_wallet);\n+static void LoadReserveKeysToSet(std::set<CKeyID>& setAddress, const std::set<int64_t>& setKeyPool, CWalletDB& walletdb) {\n     for (const int64_t& id : setKeyPool)\n     {\n         CKeyPool keypool;\n         if (!walletdb.ReadPool(id, keypool))\n             throw std::runtime_error(std::string(__func__) + \": read failed\");\n         assert(keypool.vchPubKey.IsValid());\n         CKeyID keyID = keypool.vchPubKey.GetID();\n-        if (!HaveKey(keyID))\n-            throw std::runtime_error(std::string(__func__) + \": unknown key in key pool\");\n         setAddress.insert(keyID);\n     }\n }\n \n+void CWallet::GetAllReserveKeys(std::set<CKeyID>& setAddress) const\n+{\n+    setAddress.clear();\n+\n+    CWalletDB walletdb(*dbw);\n+\n+    LOCK2(cs_main, cs_wallet);\n+    LoadReserveKeysToSet(setAddress, setInternalKeyPool, walletdb);\n+    LoadReserveKeysToSet(setAddress, setExternalKeyPool, walletdb);\n+\n+    for (const CKeyID& keyID : setAddress) {\n+        if (!HaveKey(keyID)) {\n+            throw std::runtime_error(std::string(__func__) + \": unknown key in key pool\");\n+        }\n+    }\n+}\n+\n void CWallet::GetScriptForMining(std::shared_ptr<CReserveScript> &script)\n {\n     std::shared_ptr<CReserveKey> rKey = std::make_shared<CReserveKey>(this);"
      },
      {
        "sha": "c1e05e8611547d7dee0511352c3b424fe1379a5f",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 13,
        "deletions": 6,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a3fc35629a2820cecd15898f112fa730e5adcec/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a3fc35629a2820cecd15898f112fa730e5adcec/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=4a3fc35629a2820cecd15898f112fa730e5adcec",
        "patch": "@@ -696,7 +696,8 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     /* HD derive new child key (on internal or external chain) */\n     void DeriveNewChildKey(CKeyMetadata& metadata, CKey& secret, bool internal = false);\n \n-    std::set<int64_t> setKeyPool;\n+    std::set<int64_t> setInternalKeyPool;\n+    std::set<int64_t> setExternalKeyPool;\n \n     int64_t nTimeFirstKey;\n \n@@ -741,7 +742,11 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n \n     void LoadKeyPool(int nIndex, const CKeyPool &keypool)\n     {\n-        setKeyPool.insert(nIndex);\n+        if (keypool.fInternal) {\n+            setInternalKeyPool.insert(nIndex);\n+        } else {\n+            setExternalKeyPool.insert(nIndex);\n+        }\n \n         // If no metadata exists yet, create a default with the pool key's\n         // creation time. Note that this may be overwritten by actually\n@@ -970,9 +975,9 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     bool NewKeyPool();\n     size_t KeypoolCountExternalKeys();\n     bool TopUpKeyPool(unsigned int kpSize = 0);\n-    void ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool, bool internal);\n+    void ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool, bool fRequestedInternal);\n     void KeepKey(int64_t nIndex);\n-    void ReturnKey(int64_t nIndex);\n+    void ReturnKey(int64_t nIndex, bool fInternal);\n     bool GetKeyFromPool(CPubKey &key, bool internal = false);\n     int64_t GetOldestKeyPoolTime();\n     void GetAllReserveKeys(std::set<CKeyID>& setAddress) const;\n@@ -1026,8 +1031,8 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     \n     unsigned int GetKeyPoolSize()\n     {\n-        AssertLockHeld(cs_wallet); // setKeyPool\n-        return setKeyPool.size();\n+        AssertLockHeld(cs_wallet); // set{Ex,In}ternalKeyPool\n+        return setInternalKeyPool.size() + setExternalKeyPool.size();\n     }\n \n     bool SetDefaultKey(const CPubKey &vchPubKey);\n@@ -1131,11 +1136,13 @@ class CReserveKey : public CReserveScript\n     CWallet* pwallet;\n     int64_t nIndex;\n     CPubKey vchPubKey;\n+    bool fInternal;\n public:\n     CReserveKey(CWallet* pwalletIn)\n     {\n         nIndex = -1;\n         pwallet = pwalletIn;\n+        fInternal = false;\n     }\n \n     CReserveKey() = default;"
      }
    ]
  },
  {
    "sha": "28301b9780b05b1d80767835987da1317ce4200a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyODMwMWI5NzgwYjA1YjFkODA3Njc4MzU5ODdkYTEzMTdjZTQyMDBh",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-04-19T17:11:16Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-07-15T01:25:24Z"
      },
      "message": "Meet code style on lines changed in the previous commit",
      "tree": {
        "sha": "729657f7c3e4e329281b15fccb2b6cabf42ba212",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/729657f7c3e4e329281b15fccb2b6cabf42ba212"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/28301b9780b05b1d80767835987da1317ce4200a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28301b9780b05b1d80767835987da1317ce4200a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/28301b9780b05b1d80767835987da1317ce4200a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28301b9780b05b1d80767835987da1317ce4200a/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4a3fc35629a2820cecd15898f112fa730e5adcec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a3fc35629a2820cecd15898f112fa730e5adcec",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4a3fc35629a2820cecd15898f112fa730e5adcec"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 17,
      "deletions": 7
    },
    "files": [
      {
        "sha": "61d975246037b068513f458c6169bc46ca45dd19",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 7,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/28301b9780b05b1d80767835987da1317ce4200a/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/28301b9780b05b1d80767835987da1317ce4200a/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=28301b9780b05b1d80767835987da1317ce4200a",
        "patch": "@@ -3081,11 +3081,15 @@ bool CWallet::NewKeyPool()\n     {\n         LOCK(cs_wallet);\n         CWalletDB walletdb(*dbw);\n-        for (int64_t nIndex : setInternalKeyPool)\n+\n+        for (int64_t nIndex : setInternalKeyPool) {\n             walletdb.ErasePool(nIndex);\n+        }\n         setInternalKeyPool.clear();\n-        BOOST_FOREACH(int64_t nIndex, setExternalKeyPool)\n+\n+        for (int64_t nIndex : setExternalKeyPool) {\n             walletdb.ErasePool(nIndex);\n+        }\n         setExternalKeyPool.clear();\n \n         if (!TopUpKeyPool()) {\n@@ -3132,12 +3136,16 @@ bool CWallet::TopUpKeyPool(unsigned int kpSize)\n         for (int64_t i = missingInternal + missingExternal; i--;)\n         {\n             int64_t nEnd = 1;\n-            if (i < missingInternal)\n+            if (i < missingInternal) {\n                 internal = true;\n-            if (!setInternalKeyPool.empty())\n+            }\n+\n+            if (!setInternalKeyPool.empty()) {\n                 nEnd = *(--setInternalKeyPool.end()) + 1;\n-            if (!setExternalKeyPool.empty())\n+            }\n+            if (!setExternalKeyPool.empty()) {\n                 nEnd = std::max(nEnd, *(--setExternalKeyPool.end()) + 1);\n+            }\n \n             if (!walletdb.WritePool(nEnd, CKeyPool(GenerateNewKey(internal), internal)))\n                 throw std::runtime_error(std::string(__func__) + \": writing generated key failed\");\n@@ -3238,8 +3246,9 @@ static int64_t GetOldestKeyTimeInPool(const std::set<int64_t>& setKeyPool, CWall\n \n     CKeyPool keypool;\n     int64_t nIndex = *(setKeyPool.begin());\n-    if (!walletdb.ReadPool(nIndex, keypool))\n+    if (!walletdb.ReadPool(nIndex, keypool)) {\n         throw std::runtime_error(std::string(__func__) + \": read oldest key in keypool failed\");\n+    }\n     assert(keypool.vchPubKey.IsValid());\n     return keypool.nTime;\n }\n@@ -3434,8 +3443,9 @@ void CReserveKey::KeepKey()\n \n void CReserveKey::ReturnKey()\n {\n-    if (nIndex != -1)\n+    if (nIndex != -1) {\n         pwallet->ReturnKey(nIndex, fInternal);\n+    }\n     nIndex = -1;\n     vchPubKey = CPubKey();\n }"
      }
    ]
  },
  {
    "sha": "d40a72ccbb71d61b43cbf4d222ca2ab5d3ca7510",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNDBhNzJjY2JiNzFkNjFiNDNjYmY0ZDIyMmNhMmFiNWQzY2E3NTEw",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-07-11T16:02:42Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-07-15T01:25:24Z"
      },
      "message": "Clarify *(--.end()) iterator semantics in CWallet::TopUpKeyPool",
      "tree": {
        "sha": "c82233f12fba4065e08dcdd2753e0adcb79da6e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c82233f12fba4065e08dcdd2753e0adcb79da6e2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d40a72ccbb71d61b43cbf4d222ca2ab5d3ca7510",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d40a72ccbb71d61b43cbf4d222ca2ab5d3ca7510",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d40a72ccbb71d61b43cbf4d222ca2ab5d3ca7510",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d40a72ccbb71d61b43cbf4d222ca2ab5d3ca7510/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "28301b9780b05b1d80767835987da1317ce4200a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28301b9780b05b1d80767835987da1317ce4200a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/28301b9780b05b1d80767835987da1317ce4200a"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "63d0a3c0c40a9df42112b7eddcc6627d467b79f8",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d40a72ccbb71d61b43cbf4d222ca2ab5d3ca7510/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d40a72ccbb71d61b43cbf4d222ca2ab5d3ca7510/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=d40a72ccbb71d61b43cbf4d222ca2ab5d3ca7510",
        "patch": "@@ -3141,10 +3141,10 @@ bool CWallet::TopUpKeyPool(unsigned int kpSize)\n             }\n \n             if (!setInternalKeyPool.empty()) {\n-                nEnd = *(--setInternalKeyPool.end()) + 1;\n+                nEnd = *(setInternalKeyPool.rbegin()) + 1;\n             }\n             if (!setExternalKeyPool.empty()) {\n-                nEnd = std::max(nEnd, *(--setExternalKeyPool.end()) + 1);\n+                nEnd = std::max(nEnd, *(setExternalKeyPool.rbegin()) + 1);\n             }\n \n             if (!walletdb.WritePool(nEnd, CKeyPool(GenerateNewKey(internal), internal)))"
      }
    ]
  }
]