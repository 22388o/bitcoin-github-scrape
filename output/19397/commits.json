[
  {
    "sha": "c48c68099386efb1290312639e61e0fcf16359f3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNDhjNjgwOTkzODZlZmIxMjkwMzEyNjM5ZTYxZTBmY2YxNjM1OWYz",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-06-27T07:40:41Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-06-29T03:18:23Z"
      },
      "message": "Add tests for block propagation after invalidateblock",
      "tree": {
        "sha": "89c5dd464f1e5e6c3433a24aae3a8d6033bdea45",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/89c5dd464f1e5e6c3433a24aae3a8d6033bdea45"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c48c68099386efb1290312639e61e0fcf16359f3",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAl75XYQACgkQT1chs9Dj\nkh2BPg/9Eh8LjS/n5y00EBfSDtCbjHhGdMc0gXQp5xBcq8/pY+iASM7W9cKFYpTw\nRPYrOdnrsPkpzaPtHSpPL6zXW6zCZo3O2Oo/vo0h4mX5pLhAy9x2BCSBpsPJ5och\nMWN7mlcE5BE9KfTQnG+vLYi5b4RSx/f1ZwIgyKNCw9nQQDJ9ekuqecIQL5M7/acP\nazdhsyOAvBrL064HT8X+ZwfSbMez/ga9FW+npZz/oaHvQrOQjIsetsMxNO0CA12v\nH9sM4er+/hAI6lj39O54JA/N/owTo/Frpk68UpQr8UbqKYAT2l7SFgAIGoGBGTBf\n2BMkzXd+eicAWvJnxh2EOp56Blx+azK7B/npxRZBIuS2ZnD8N52HPOEyO+dO+Cvh\nYflLb0lsDpNkZO80LC+F7cGZHDRb1rjLIt7P0+qf9HBUl5I5HeOvLCcZ2Q11lww1\ni6BVMH7847d3ODC57haWu6zT6ZQzzj2BXDCITDRnRKem/NBA3w0tODEl2rqsBSfE\nhF/mY1xj0jEIZyq+UH9ix1bInQ736R4NnT/hFNeUpwqTXxVe8WRYJn991VIABVLX\nGPcmyqCkN00tCYkeNQn+rV9GaG8oQKhpJ77hywK0qgsFCNbRTJpkH1q4eAPtq+I6\nhuA4w5gitgWwdoMu3rqQ31YW4CBmka4RbYLe6nTxoiBV51kcXr0=\n=KQ+q\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIJP+yOWde7H6Og21e77GnUtLlqHIktGWHgJA4iI5rp3CCP/wEB+WjmrzwJpz\nEz7p8DyMlsQI8QRe+V2G8AgmiVWbafY/DwCD3+MNLvkMji4taHR0cHM6Ly9hbGlj\nZS5idGMuY2FsZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn//AQUOmN2Vh5eBQ50XkW\n211ntwjxBF75XYbwCIjlIeNp8LBBAIPf4w0u+QyOKShodHRwczovL2Zpbm5leS5j\nYWxlbmRhci5ldGVybml0eXdhbGwuY29t//AQb59T+a3U6HTaFNrKp4RdIQjxBF75\nXYXwCG+YQL0XXEmiAIPf4w0u+QyOLCtodHRwczovL2JvYi5idGMuY2FsZW5kYXIu\nb3BlbnRpbWVzdGFtcHMub3Jn8BCkzsqQGPcJ7crjqqkjF9uJCPEEXvldhvAI2Rea\nWdYzCEIAg9/jDS75DI4jImh0dHBzOi8vYnRjLmNhbGVuZGFyLmNhdGFsbGF4eS5j\nb20=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 89c5dd464f1e5e6c3433a24aae3a8d6033bdea45\nparent 49464004701e5ac256fe1f3e969464012af7c598\nauthor Jon Atack <jon@atack.com> 1593243641 +0200\ncommitter Jon Atack <jon@atack.com> 1593400703 +0200\n\nAdd tests for block propagation after invalidateblock\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c48c68099386efb1290312639e61e0fcf16359f3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c48c68099386efb1290312639e61e0fcf16359f3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c48c68099386efb1290312639e61e0fcf16359f3/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "49464004701e5ac256fe1f3e969464012af7c598",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49464004701e5ac256fe1f3e969464012af7c598",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/49464004701e5ac256fe1f3e969464012af7c598"
      }
    ],
    "stats": {
      "total": 113,
      "additions": 113,
      "deletions": 0
    },
    "files": [
      {
        "sha": "e041b2b4d91c6bc4addf6e3c9b85cf4f957ad6e9",
        "filename": "test/functional/p2p_invalidateblock.py",
        "status": "added",
        "additions": 112,
        "deletions": 0,
        "changes": 112,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c48c68099386efb1290312639e61e0fcf16359f3/test/functional/p2p_invalidateblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c48c68099386efb1290312639e61e0fcf16359f3/test/functional/p2p_invalidateblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalidateblock.py?ref=c48c68099386efb1290312639e61e0fcf16359f3",
        "patch": "@@ -0,0 +1,112 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test block propagation and sync to the new chain tip after invalidateblock.\n+\n+1) Generate N+1 blocks on node0.\n+2) Invalidate a block on both nodes using invalidateblock.\n+3) Generate N blocks on node0.\n+3) Check if both node0 and non-mining node1 sync to the new, shorter chain tip.\n+4) Generate 1 more block on node0, verify both nodes sync.\n+4) Generate N more blocks on node0, verify both nodes sync.\n+\n+This test is performed twice, order-independently:\n+N = MAX_BLOCKS_IN_TRANSIT_PER_PEER + 1 -> node0 succeeds, node1 often degraded\n+N = MAX_BLOCKS_IN_TRANSIT_PER_PEER     -> succeeds for both nodes\n+\n+For the non-mining peer, sync to the new tip on the first coinbase transaction\n+appears to be degraded beyond the limit of MAX_BLOCKS_IN_TRANSIT_PER_PEER. The\n+first 16 blocks succeed because of the call to GETDATA on processing each INV,\n+which occurs until the number of blocks in flight to the peer is maxed out.\n+See issue #5806.\n+\n+\"\"\"\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, assert_greater_than\n+\n+BLOCKS = 16  # Number of blocks to test, equal to MAX_BLOCKS_IN_TRANSIT_PER_PEER\n+\n+# Hardcoded addresses from test_node.py::PRIV_KEYS. They are used to generate\n+# to different addresses at each step, to ensure that the coinbase transaction\n+# (and therefore the block hash) is different.\n+ADDRESSES = [\n+    \"mjTkW3DjgyZck4KbiRusZsqTgaYTxdSz6z\",\n+    \"msX6jQXvxiNhx3Q62PKeLPrhrqZQdSimTg\",\n+    \"mnonCMyH9TmAsSj3M59DsbH8H63U3RKoFP\",\n+    \"mqJupas8Dt2uestQDvV2NH3RU8uZh2dqQR\",\n+    \"msYac7Rvd5ywm6pEmkjyxhbCDKqWsVeYws\",\n+    \"n2rnuUnwLgXqf9kk2kjvVm8R5BZK1yxQBi\",\n+    \"myzuPxRwsf3vvGzEuzPfK9Nf2RfwauwYe6\",\n+    \"mumwTaMtbxEPUswmLBBN3vM9oGRtGBrys8\",\n+]\n+\n+\n+class P2PInvalidateBlockTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.addr_index = 0\n+\n+    def assert_block_counts(self, expected):\n+        for node in self.nodes:\n+            assert_equal(expected, node.getblockcount())\n+\n+    def test_invalidate_regenerate(self, block_count, blocks):\n+        self.log.info(\"Test syncing {} blocks to new tip after invalidateblock\".format(blocks))\n+        self.log.info(\" Generate {} + 1 blocks on node0\".format(blocks))\n+        block_hashes = self.nodes[0].generatetoaddress(blocks + 1, ADDRESSES[self.addr_index])\n+        self.addr_index += 1\n+        self.sync_blocks()\n+        self.assert_block_counts(expected=block_count + blocks + 1)\n+        self.log.info(\" Invalidate a block\")\n+        for node in self.nodes:\n+            node.invalidateblock(block_hashes[0])\n+        self.assert_block_counts(expected=block_count)\n+        self.log.info(\" Generate an alternate chain of {} blocks on node0\".format(blocks))\n+        self.nodes[0].generatetoaddress(blocks, ADDRESSES[self.addr_index])\n+        self.addr_index += 1\n+\n+    def test_sync_after_more_blocks(self, block_count, blocks):\n+        self.log.info(\" Generate {} more block(s) on the new chain on node0\".format(blocks))\n+        self.nodes[0].generatetoaddress(blocks, ADDRESSES[self.addr_index])\n+        self.addr_index += 1\n+        self.log.info(\" Verify both nodes sync to the new tip\")\n+        self.sync_blocks()\n+        self.assert_block_counts(expected=block_count + blocks)\n+\n+    def test_sync_MAX_BLOCKS_IN_TRANSIT_PER_PEER_blocks_after_invalidateblock(self):\n+        block_count = self.nodes[0].getblockcount()\n+        target_height = block_count + BLOCKS\n+        self.test_invalidate_regenerate(block_count, blocks=BLOCKS)\n+        self.log.info(\" Verify both nodes sync to the new tip\")\n+        self.sync_blocks()\n+        self.assert_block_counts(expected=target_height)\n+        self.test_sync_after_more_blocks(target_height, blocks=1)\n+        self.test_sync_after_more_blocks(target_height + 1, blocks=BLOCKS)\n+\n+    def test_sync_n_plus_MAX_BLOCKS_IN_TRANSIT_PER_PEER_blocks_after_invalidateblock(self, n=1):\n+        block_count = self.nodes[0].getblockcount()\n+        target_height = block_count + BLOCKS + n\n+        self.test_invalidate_regenerate(block_count, blocks=BLOCKS + n)\n+        # Usually node1 doesn't sync past MAX_BLOCKS_IN_TRANSIT_PER_PEER and times out, but it\n+        # can sometimes succeed. Handle both cases to aid in diagnosing and fixing the issue.\n+        try:\n+            self.sync_blocks(timeout=3)\n+        except AssertionError:\n+            self.log.info(\" Verify node1 fails to sync to the new tip\")\n+            assert_greater_than(target_height, self.nodes[1].getblockcount())\n+        else:\n+            self.log.info(\" Verify node1 syncs to the new tip\")\n+            assert_equal(target_height, self.nodes[1].getblockcount())\n+        self.log.info(\" Verify node0 syncs to the new tip\")\n+        assert_equal(target_height, self.nodes[0].getblockcount())\n+        self.test_sync_after_more_blocks(target_height, blocks=1)\n+        self.test_sync_after_more_blocks(target_height + 1, blocks=BLOCKS + n)\n+\n+    def run_test(self):\n+        self.test_sync_n_plus_MAX_BLOCKS_IN_TRANSIT_PER_PEER_blocks_after_invalidateblock()\n+        self.test_sync_MAX_BLOCKS_IN_TRANSIT_PER_PEER_blocks_after_invalidateblock()\n+\n+\n+if __name__ == '__main__':\n+    P2PInvalidateBlockTest().main()"
      },
      {
        "sha": "17d4b2a284c2e253e5259e33c438e02a53a3e1fd",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c48c68099386efb1290312639e61e0fcf16359f3/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c48c68099386efb1290312639e61e0fcf16359f3/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=c48c68099386efb1290312639e61e0fcf16359f3",
        "patch": "@@ -227,6 +227,7 @@\n     'wallet_coinbase_category.py',\n     'feature_filelock.py',\n     'feature_loadblock.py',\n+    'p2p_invalidateblock.py',\n     'p2p_dos_header_tree.py',\n     'p2p_unrequested_blocks.py',\n     'p2p_blockfilters.py',"
      }
    ]
  }
]