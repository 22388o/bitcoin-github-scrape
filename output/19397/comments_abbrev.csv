jnewbery,2020-06-27 18:11:34,"Concept ACK. Thanks for picking this up, Jon!",https://github.com/bitcoin/bitcoin/pull/19397#issuecomment-650594428,650594428,
jonatack,2020-06-28 08:40:58,"> Concept ACK. Thanks for picking this up, Jon!\n\nThanks, John. The interesting thing is, unlike the PR17335 description, the original issue reported by @sdaftuar still appears to be unresolved.",https://github.com/bitcoin/bitcoin/pull/19397#issuecomment-650718770,650718770,
jonatack,2020-06-29 03:15:41,Rebased to add more tests to verify that the non-mining node does catch up to the chain tip on the next coinbase transactions after the first one.,https://github.com/bitcoin/bitcoin/pull/19397#issuecomment-650880434,650880434,
jnewbery,2020-06-29 15:39:29,"Thanks for digging into this more, @jonatack . I've run the test with the assert catching removed to reproduce the error. I've attached a combined log (best viewed with `less -r`). Here's what's happening:\n\nIf we invalidate `MAX_BLOCKS_IN_TRANSIT_PER_PEER + 2` blocks and then regenerate `MAX_BLOCKS_IN_TRANSIT_PER_PEER + 1` blocks on node0, node0 doesn't announce those new blocks to the peer us",https://github.com/bitcoin/bitcoin/pull/19397#issuecomment-651200239,651200239,
jonatack,2020-07-23 17:15:33,No ACKs. Closing.,https://github.com/bitcoin/bitcoin/pull/19397#issuecomment-663128137,663128137,
jonatack,2020-06-27 16:21:28,"This line is a leftover remnant, will remove.",https://github.com/bitcoin/bitcoin/pull/19397#discussion_r446542156,446542156,test/functional/p2p_invalidateblock.py
