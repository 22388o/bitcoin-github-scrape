luke-jr,2014-05-11T07:39:18Z,"A reject message seems appropriate. It may be necessary to disconnect the peer as well, since the blockchain downloading code cannot handle a peer's failure to provide the block.\n",https://github.com/bitcoin/bitcoin/pull/4173#issuecomment-42764257,42764257,
ashleyholman,2014-05-11T08:09:40Z,"@luke-jr currently all of the rejection states seem to relate to the peer doing something unacceptable (MALFORMED, INVALID, OBSOLETE, DUPLICATE, NONSTANDARD, DUST, INSUFFICIENTFEE, CHECKPOINT).  Does there need to be an additional state added for when the request was unable to be fulfilled due to some runtime issue?  like, REJECT_UNAVAILABLE?  Similar in purpose to an HTTP 503.\n",https://github.com/bitcoin/bitcoin/pull/4173#issuecomment-42764746,42764746,
gmaxwell,2014-05-11T08:11:34Z,"This should just be an assert right now, it's not a covered case in the code. (we probably should test for it at startup too).\n",https://github.com/bitcoin/bitcoin/pull/4173#issuecomment-42764774,42764774,
ashleyholman,2014-05-11T08:20:24Z,"@gmaxwell That makes sense.  So the process is terminated if a missing block is requested.  Would this behaviour address the concern raised by @luke-jr, ie. the requesting node will continue syncing?\n\nI will also work on doing the check of blk*.dat files on startup so it can be merged at the same time.\n",https://github.com/bitcoin/bitcoin/pull/4173#issuecomment-42764918,42764918,
gmaxwell,2014-05-11T08:22:35Z,"Hanging up should make the peer choose a new syncnode, so it should indeed fix that.\n",https://github.com/bitcoin/bitcoin/pull/4173#issuecomment-42764949,42764949,
sipa,2014-05-11T08:23:09Z,"Indeed, there is currently no level of service you can indicate to peers between NODE_NETWORK and nothing it all. If you can't serve every block you advertise, you're lying to your peers. You could in theory downgrade to nothing at all, but that's pointless, as peers also won't expect you to validate or relay transactions anymore.\n\nFor now, this should just cause the program to quit. In the long",https://github.com/bitcoin/bitcoin/pull/4173#issuecomment-42764959,42764959,
ashleyholman,2014-05-11T10:01:51Z,"Further question: Considering this can and will shut down peoples nodes, ideally there is some communication to the user about what has happened and how they can repair it.  So what are the steps to repair this problem?  I tried restarting with a -rescan but it didn't fix the problem.  I also had bootstrap.dat present but it said ""Already have block 1"" even though it was missing from disk.  Does t",https://github.com/bitcoin/bitcoin/pull/4173#issuecomment-42766648,42766648,
ashleyholman,2014-05-11T10:11:20Z,"Oh, I just realised that -reindex fixes it.  So, I guess it should automatically run a -reindex if the startup check finds any missing .dat files?\n",https://github.com/bitcoin/bitcoin/pull/4173#issuecomment-42766838,42766838,
ashleyholman,2014-05-11T12:13:54Z,"See attached new patches.\n- On startup, LoadBlockIndexDB() does an additional scan of blk*.dat files to check that all files required by the index are present and readable.\n- If ""getdata"" is received for a block thats file is missing, the process will abort with a failed assertion.\n\nThis hooks into the existing code that says ""Error loading block database.  Do you want to rebuild the block dat",https://github.com/bitcoin/bitcoin/pull/4173#issuecomment-42769014,42769014,
sipa,2014-05-11T12:58:07Z,Pulltester hasn't even begun sending any blocks at the time it fails. There's no blocks to load.\n,https://github.com/bitcoin/bitcoin/pull/4173#issuecomment-42769880,42769880,
ashleyholman,2014-05-11T13:01:18Z,"@sipa It seems my code is failing on first startup with a blank datadir.  nLastBlockFile defaults to 0, but blk00000.dat isn't there yet at that point.  I'm trying to find if there's a nice solution to this, other than skipping the check with nLastBlockFile == 0.\n",https://github.com/bitcoin/bitcoin/pull/4173#issuecomment-42769953,42769953,
sipa,2014-05-11T13:07:57Z,"You can iterate the mapBlockIndex entries, and build a set of the occurring nBlockFile fields of those with BLOCK_HAVE_DATA set.\n",https://github.com/bitcoin/bitcoin/pull/4173#issuecomment-42770097,42770097,
ashleyholman,2014-05-11T14:01:21Z,Updated patch to use @sipa's method for finding blk files used by the index.\n,https://github.com/bitcoin/bitcoin/pull/4173#issuecomment-42771248,42771248,
sipa,2014-05-11T19:09:23Z,Untested ACK.\n,https://github.com/bitcoin/bitcoin/pull/4173#issuecomment-42779804,42779804,
ashleyholman,2014-05-12T01:52:01Z,Renamed this pull request to better describe the new patch.\n,https://github.com/bitcoin/bitcoin/pull/4173#issuecomment-42790571,42790571,
laanwj,2014-05-12T11:40:34Z,Untested ACK\n,https://github.com/bitcoin/bitcoin/pull/4173#issuecomment-42821856,42821856,
ashleyholman,2014-05-12T12:52:35Z,"Oh I see.  I had assumed that the file gets closed when the pointer goes out of scope.  C++ is kinda new for me :)\n\nThe same type of loop is in ThreadImport() as well when reindex is done, so possibly that code also leaves file handles open.\n\nMy code should really just use a stat() call instead but I wanted to re-use the existing OpenBlockFile code to prevent having to hardcode the file paths ",https://github.com/bitcoin/bitcoin/pull/4173#issuecomment-42827710,42827710,
ashleyholman,2014-05-12T13:11:02Z,Pushed new patch which wraps it in CAutoFile. (and re-tested)\n\nThanks for the review.\n,https://github.com/bitcoin/bitcoin/pull/4173#issuecomment-42829537,42829537,
laanwj,2014-05-12T13:25:24Z,"@ashleyholman Yup, it's indeed error-prone to have to manually close handles. We try to write code that frees something automatically when it goes out of scope, and if not we create RAII wrappers such as CAutoFile, which you've already found :)\n",https://github.com/bitcoin/bitcoin/pull/4173#issuecomment-42830978,42830978,
BitcoinPullTester,2014-05-12T13:55:47Z,"Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/8c93bf4c2857cdc01f0e5efca2becef08d2c5f1e for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/cu",https://github.com/bitcoin/bitcoin/pull/4173#issuecomment-42834514,42834514,
ashleyholman,2014-05-13T03:26:06Z,"> The same type of loop is in ThreadImport() as well when reindex is done, so possibly that code also leaves file handles open.\n\nFalse alarm.  ThreadImport() doesn't leak any file handles because LoadExternalBlockFile() closes them.\n",https://github.com/bitcoin/bitcoin/pull/4173#issuecomment-42913615,42913615,
laanwj,2014-05-19T14:58:11Z,"ACK, works for me.\nI've tried moving blk00000 and blk00001 out of the way and successfully got an error.\nMoved them back and bitcoind worked again.\n",https://github.com/bitcoin/bitcoin/pull/4173#issuecomment-43514770,43514770,
cozz,2014-05-12T12:08:44Z,Any reason not to fclose? All file descriptors stay open this way...\n,https://github.com/bitcoin/bitcoin/pull/4173#discussion_r12524777,12524777,src/main.cpp
sipa,2014-05-12T12:31:52Z,Good point. Wrapping the OpenBlockFile call in a CAutoFile would also\nautomatically close it again.\n,https://github.com/bitcoin/bitcoin/pull/4173#discussion_r12525506,12525506,src/main.cpp
