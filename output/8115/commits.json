[
  {
    "sha": "63ff57db4beb2e92b3d8ed396da016f29f790195",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2M2ZmNTdkYjRiZWIyZTkyYjNkOGVkMzk2ZGEwMTZmMjlmNzkwMTk1",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2016-05-29T01:36:52Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2016-05-30T22:07:56Z"
      },
      "message": "Avoid integer division in the benchmark inner-most loop.\n\nPreviously the benchmark code used an integer division (%) with\n a non-constant in the inner-loop.  This is quite slow on many\n processors, especially ones like ARM that lack a hardware divide.\n\nEven on fairly recent x86_64 like haswell an integer division can\n take something like 100 cycles-- making it comparable to the\n runtime of siphash.\n\nThis change avoids the division by using bitmasking instead. This\n was especially easy since the count was only increased by doubling.\n\nThis change also restarts the timing when the execution time was\n very low this avoids mintimes of zero in cases where one execution\n ends up below the timer resolution. It also reduces the impact of\n the overhead on the final result.\n\nThe formatting of the prints is changed to not use scientific\n notation make it more machine readable (in particular, gnuplot\n croaks on the non-fixedpoint, and it doesn't sort correctly).\n\nThis also hoists out all the floating point divisions out of the\n semi-hot path because it was easy to do so.\n\nIt might be prudent to break out the critical test into a macro\n just to guarantee that it gets inlined.  It might also make sense\n to just save out the intermediate counts and times and get the\n floating point completely out of the timing loop (because e.g.\n on hardware without a fast hardware FPU like some ARM it will\n still be slow enough to distort the results). I haven't done\n either of these in this commit.",
      "tree": {
        "sha": "70f938749a9c7ca4e5401f382b485942cf3b181b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/70f938749a9c7ca4e5401f382b485942cf3b181b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/63ff57db4beb2e92b3d8ed396da016f29f790195",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/63ff57db4beb2e92b3d8ed396da016f29f790195",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/63ff57db4beb2e92b3d8ed396da016f29f790195",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/63ff57db4beb2e92b3d8ed396da016f29f790195/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a80de15113166354cdf208e3d8b6e25f4511a591",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a80de15113166354cdf208e3d8b6e25f4511a591",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a80de15113166354cdf208e3d8b6e25f4511a591"
      }
    ],
    "stats": {
      "total": 42,
      "additions": 28,
      "deletions": 14
    },
    "files": [
      {
        "sha": "227546a7a78a3a8d5c78f98659b079ab7f273564",
        "filename": "src/bench/bench.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 11,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63ff57db4beb2e92b3d8ed396da016f29f790195/src/bench/bench.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63ff57db4beb2e92b3d8ed396da016f29f790195/src/bench/bench.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench.cpp?ref=63ff57db4beb2e92b3d8ed396da016f29f790195",
        "patch": "@@ -5,6 +5,7 @@\n #include \"bench.h\"\n \n #include <iostream>\n+#include <iomanip>\n #include <sys/time.h>\n \n using namespace benchmark;\n@@ -25,7 +26,7 @@ BenchRunner::BenchRunner(std::string name, BenchFunction func)\n void\n BenchRunner::RunAll(double elapsedTimeForOne)\n {\n-    std::cout << \"Benchmark\" << \",\" << \"count\" << \",\" << \"min\" << \",\" << \"max\" << \",\" << \"average\" << \"\\n\";\n+    std::cout << \"#Benchmark\" << \",\" << \"count\" << \",\" << \"min\" << \",\" << \"max\" << \",\" << \"average\" << \"\\n\";\n \n     for (std::map<std::string,BenchFunction>::iterator it = benchmarks.begin();\n          it != benchmarks.end(); ++it) {\n@@ -38,22 +39,34 @@ BenchRunner::RunAll(double elapsedTimeForOne)\n \n bool State::KeepRunning()\n {\n+    if (count & countMask) {\n+      ++count;\n+      return true;\n+    }\n     double now;\n     if (count == 0) {\n-        beginTime = now = gettimedouble();\n+        lastTime = beginTime = now = gettimedouble();\n     }\n     else {\n-        // timeCheckCount is used to avoid calling gettime most of the time,\n-        // so benchmarks that run very quickly get consistent results.\n-        if ((count+1)%timeCheckCount != 0) {\n-            ++count;\n-            return true; // keep going\n-        }\n         now = gettimedouble();\n-        double elapsedOne = (now - lastTime)/timeCheckCount;\n+        double elapsed = now - lastTime;\n+        double elapsedOne = elapsed * countMaskInv;\n         if (elapsedOne < minTime) minTime = elapsedOne;\n         if (elapsedOne > maxTime) maxTime = elapsedOne;\n-        if (elapsedOne*timeCheckCount < maxElapsed/16) timeCheckCount *= 2;\n+        if (elapsed*128 < maxElapsed) {\n+          // If the execution was much too fast (1/128th of maxElapsed), increase the count mask by 8x and restart timing.\n+          // The restart avoids including the overhead of this code in the measurement.\n+          countMask = ((countMask<<3)|7) & ((1LL<<60)-1);\n+          countMaskInv = 1./(countMask+1);\n+          count = 0;\n+          minTime = std::numeric_limits<double>::max();\n+          maxTime = std::numeric_limits<double>::min();\n+          return true;\n+        }\n+        if (elapsed*16 < maxElapsed) {\n+          countMask = ((countMask<<1)|1) & ((1LL<<60)-1);\n+          countMaskInv = 1./(countMask+1);\n+        }\n     }\n     lastTime = now;\n     ++count;\n@@ -64,7 +77,7 @@ bool State::KeepRunning()\n \n     // Output results\n     double average = (now-beginTime)/count;\n-    std::cout << name << \",\" << count << \",\" << minTime << \",\" << maxTime << \",\" << average << \"\\n\";\n+    std::cout << std::fixed << std::setprecision(15) << name << \",\" << count << \",\" << minTime << \",\" << maxTime << \",\" << average << \"\\n\";\n \n     return false;\n }"
      },
      {
        "sha": "f13b145aaf0c78788c311e6dff1a034a95ace45e",
        "filename": "src/bench/bench.h",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63ff57db4beb2e92b3d8ed396da016f29f790195/src/bench/bench.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63ff57db4beb2e92b3d8ed396da016f29f790195/src/bench/bench.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench.h?ref=63ff57db4beb2e92b3d8ed396da016f29f790195",
        "patch": "@@ -40,14 +40,15 @@ namespace benchmark {\n         std::string name;\n         double maxElapsed;\n         double beginTime;\n-        double lastTime, minTime, maxTime;\n+        double lastTime, minTime, maxTime, countMaskInv;\n         int64_t count;\n-        int64_t timeCheckCount;\n+        int64_t countMask;\n     public:\n         State(std::string _name, double _maxElapsed) : name(_name), maxElapsed(_maxElapsed), count(0) {\n             minTime = std::numeric_limits<double>::max();\n             maxTime = std::numeric_limits<double>::min();\n-            timeCheckCount = 1;\n+            countMask = 1;\n+            countMaskInv = 1./(countMask + 1);\n         }\n         bool KeepRunning();\n     };"
      }
    ]
  }
]