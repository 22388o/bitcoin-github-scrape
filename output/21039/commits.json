[
  {
    "sha": "3b9227567fafe9c4a9f165d1fd8f0eaa8ebe476a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYjkyMjc1NjdmYWZlOWM0YTlmMTY1ZDFmZDhmMGVhYThlYmU0NzZh",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-01-31T09:17:16Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-01-31T10:49:24Z"
      },
      "message": "refactor: don't throw in GetChainName()\n\nCurrently if you start bitcoind with multiple chain options, bitcoind\nwill fail an assertion rather than exit gracefully. i.e:\n```bash\nsrc/bitcoind -testnet -regtest\n\n************************\nEXCEPTION: St13runtime_error\nInvalid combination of -regtest, -signet, -testnet and -chain. Can use at most one.\nbitcoin in AppInit()\n\nAssertion failed: (globalChainBaseParams), function BaseParams, file chainparamsbase.cpp, line 36.\n```\n\nRather than throw in GetChainName(), return the error and throw in\nCreateBaseChainParams() which will fail grafully. i.e:\n```bash\nsrc/bitcoind -testnet -regtest\nError: CreateBaseChainParams: Unknown chain: Invalid combination of -regtest, -signet, -testnet or -chain.\n```",
      "tree": {
        "sha": "cd5f78efeeba373c5d169c1e1d1ff42697be7646",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cd5f78efeeba373c5d169c1e1d1ff42697be7646"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3b9227567fafe9c4a9f165d1fd8f0eaa8ebe476a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmAWizQACgkQLuufXMCV\nJsF45w//VCBY2qCiW383yIT+mCKa+6zMwahTQ1wa59oy0Szv+bryLUUjySMM/LJp\nnl5wTJNpmnJSPpvTHo+rsvKDpqztqflu0iw/zHf+XQjKqI6volWDhxwoG275/OcZ\nzitAxliLihd0L0+0LTBpuLXfs6EM/W9yH1XkcP9CFP70q+M/+7TBsD8JFNgrhKPC\ne1tzGlzSFZXfDhgQMcCfcfRbpehKp3OfHvh7k86tkhYgixKRrYcVm1PbUuJKpRoc\nMjXjYpJo8nsJ0Lwijz8I+J9g39266/IL7JgtEkZhEWOIDNlKLO+LeV1Jcia8kacS\nN8vP3pJA0DuRKotdlmeuBJYZmhsvfk2qprE8+BAksE8FU4NbA/bHCDZmhe0fX8/I\nTjxWhJ1KPQd/bL7F9Q3howirPYrB0hbGdBmyzHEdj1hdoqiW/lLTmKSOMYaWv2m7\nzdSOw/JIThmB4ZxdBtkWWU/jn5uWqXYXcfHz01iNbM3ninFoDpJ8XA86vE/C84Rd\nwgoQn3/6CaMOu948HIZgKFzoWfmq8AgF8Dn1b37dm2A6cD//59sHtLtYUn5mNur+\nrl4jKCMUIYtNRlG3JlOBmb8YESccxqHMVwEKsU16YKeqrA/x41yQG1wtbMSvKBqR\nvEGj6ewQSs5N+oeyo+KbTy4IStBjIhQhfPKhOQBO2rChrTHRsFs=\n=sO1E\n-----END PGP SIGNATURE-----",
        "payload": "tree cd5f78efeeba373c5d169c1e1d1ff42697be7646\nparent 1f514332eda21ef29be9931f48390e67f7323bd6\nauthor fanquake <fanquake@gmail.com> 1612084636 +0800\ncommitter fanquake <fanquake@gmail.com> 1612090164 +0800\n\nrefactor: don't throw in GetChainName()\n\nCurrently if you start bitcoind with multiple chain options, bitcoind\nwill fail an assertion rather than exit gracefully. i.e:\n```bash\nsrc/bitcoind -testnet -regtest\n\n************************\nEXCEPTION: St13runtime_error\nInvalid combination of -regtest, -signet, -testnet and -chain. Can use at most one.\nbitcoin in AppInit()\n\nAssertion failed: (globalChainBaseParams), function BaseParams, file chainparamsbase.cpp, line 36.\n```\n\nRather than throw in GetChainName(), return the error and throw in\nCreateBaseChainParams() which will fail grafully. i.e:\n```bash\nsrc/bitcoind -testnet -regtest\nError: CreateBaseChainParams: Unknown chain: Invalid combination of -regtest, -signet, -testnet or -chain.\n```\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b9227567fafe9c4a9f165d1fd8f0eaa8ebe476a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3b9227567fafe9c4a9f165d1fd8f0eaa8ebe476a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b9227567fafe9c4a9f165d1fd8f0eaa8ebe476a/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1f514332eda21ef29be9931f48390e67f7323bd6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f514332eda21ef29be9931f48390e67f7323bd6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1f514332eda21ef29be9931f48390e67f7323bd6"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 5,
      "deletions": 26
    },
    "files": [
      {
        "sha": "ceb73c7e32649dc0f70c90bae7eb2e84f2403bf5",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b9227567fafe9c4a9f165d1fd8f0eaa8ebe476a/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b9227567fafe9c4a9f165d1fd8f0eaa8ebe476a/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=3b9227567fafe9c4a9f165d1fd8f0eaa8ebe476a",
        "patch": "@@ -52,7 +52,7 @@ std::unique_ptr<CBaseChainParams> CreateBaseChainParams(const std::string& chain\n     } else if (chain == CBaseChainParams::REGTEST) {\n         return MakeUnique<CBaseChainParams>(\"regtest\", 18443, 18445);\n     }\n-    throw std::runtime_error(strprintf(\"%s: Unknown chain %s.\", __func__, chain));\n+    throw std::runtime_error(strprintf(\"%s: Unknown chain: %s.\", __func__, chain));\n }\n \n void SelectBaseParams(const std::string& chain)"
      },
      {
        "sha": "73e59f2c92b2324ca02c57667d648623712abf08",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 24,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b9227567fafe9c4a9f165d1fd8f0eaa8ebe476a/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b9227567fafe9c4a9f165d1fd8f0eaa8ebe476a/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=3b9227567fafe9c4a9f165d1fd8f0eaa8ebe476a",
        "patch": "@@ -785,7 +785,7 @@ BOOST_AUTO_TEST_CASE(util_GetChainName)\n     BOOST_CHECK_EQUAL(test_args.GetChainName(), \"test\");\n \n     BOOST_CHECK(test_args.ParseParameters(3, (char**)argv_both, error));\n-    BOOST_CHECK_THROW(test_args.GetChainName(), std::runtime_error);\n+    BOOST_CHECK_EQUAL(test_args.GetChainName(), \"Invalid combination of -regtest, -signet, -testnet or -chain\");\n \n     BOOST_CHECK(test_args.ParseParameters(0, (char**)argv_testnet, error));\n     test_args.ReadConfigString(testnetconf);\n@@ -795,18 +795,10 @@ BOOST_AUTO_TEST_CASE(util_GetChainName)\n     test_args.ReadConfigString(testnetconf);\n     BOOST_CHECK_EQUAL(test_args.GetChainName(), \"test\");\n \n-    BOOST_CHECK(test_args.ParseParameters(2, (char**)argv_regtest, error));\n-    test_args.ReadConfigString(testnetconf);\n-    BOOST_CHECK_THROW(test_args.GetChainName(), std::runtime_error);\n-\n     BOOST_CHECK(test_args.ParseParameters(3, (char**)argv_test_no_reg, error));\n     test_args.ReadConfigString(testnetconf);\n     BOOST_CHECK_EQUAL(test_args.GetChainName(), \"test\");\n \n-    BOOST_CHECK(test_args.ParseParameters(3, (char**)argv_both, error));\n-    test_args.ReadConfigString(testnetconf);\n-    BOOST_CHECK_THROW(test_args.GetChainName(), std::runtime_error);\n-\n     // check setting the network to test (and thus making\n     // [test] regtest=1 potentially relevant) doesn't break things\n     test_args.SelectConfigNetwork(\"test\");\n@@ -819,17 +811,9 @@ BOOST_AUTO_TEST_CASE(util_GetChainName)\n     test_args.ReadConfigString(testnetconf);\n     BOOST_CHECK_EQUAL(test_args.GetChainName(), \"test\");\n \n-    BOOST_CHECK(test_args.ParseParameters(2, (char**)argv_regtest, error));\n-    test_args.ReadConfigString(testnetconf);\n-    BOOST_CHECK_THROW(test_args.GetChainName(), std::runtime_error);\n-\n     BOOST_CHECK(test_args.ParseParameters(2, (char**)argv_test_no_reg, error));\n     test_args.ReadConfigString(testnetconf);\n     BOOST_CHECK_EQUAL(test_args.GetChainName(), \"test\");\n-\n-    BOOST_CHECK(test_args.ParseParameters(3, (char**)argv_both, error));\n-    test_args.ReadConfigString(testnetconf);\n-    BOOST_CHECK_THROW(test_args.GetChainName(), std::runtime_error);\n }\n \n // Test different ways settings can be merged, and verify results. This test can\n@@ -1099,12 +1083,7 @@ BOOST_FIXTURE_TEST_CASE(util_ChainMerge, ChainMergeTestingSetup)\n         BOOST_CHECK_EQUAL(error, \"\");\n \n         desc += \" || \";\n-        try {\n-            desc += parser.GetChainName();\n-        } catch (const std::runtime_error& e) {\n-            desc += \"error: \";\n-            desc += e.what();\n-        }\n+        desc += parser.GetChainName();\n         desc += \"\\n\";\n \n         out_sha.Write(MakeUCharSpan(desc));\n@@ -1131,7 +1110,7 @@ BOOST_FIXTURE_TEST_CASE(util_ChainMerge, ChainMergeTestingSetup)\n     // Results file is formatted like:\n     //\n     //   <input> || <output>\n-    BOOST_CHECK_EQUAL(out_sha_hex, \"f263493e300023b6509963887444c41386f44b63bc30047eb8402e8c1144854c\");\n+    BOOST_CHECK_EQUAL(out_sha_hex, \"2d624b0755a88d8a3d52f878eb07dd6bbb6f5cd91f651e51abc8434f2ef63294\");\n }\n \n BOOST_AUTO_TEST_CASE(util_ReadWriteSettings)"
      },
      {
        "sha": "2ffdb904713f0bfebcc37dbd3214b633258251ca",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b9227567fafe9c4a9f165d1fd8f0eaa8ebe476a/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b9227567fafe9c4a9f165d1fd8f0eaa8ebe476a/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=3b9227567fafe9c4a9f165d1fd8f0eaa8ebe476a",
        "patch": "@@ -945,7 +945,7 @@ std::string ArgsManager::GetChainName() const\n     const bool is_chain_arg_set = IsArgSet(\"-chain\");\n \n     if ((int)is_chain_arg_set + (int)fRegTest + (int)fSigNet + (int)fTestNet > 1) {\n-        throw std::runtime_error(\"Invalid combination of -regtest, -signet, -testnet and -chain. Can use at most one.\");\n+        return \"Invalid combination of -regtest, -signet, -testnet or -chain\";\n     }\n     if (fRegTest)\n         return CBaseChainParams::REGTEST;"
      }
    ]
  }
]