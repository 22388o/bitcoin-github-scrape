practicalswift,2021-01-31 21:18:18,Concept ACK: +5 âˆ’26 **and** a better user experience. Nice!,https://github.com/bitcoin/bitcoin/pull/21039#issuecomment-770452611,770452611,
MarcoFalke,2021-02-01 08:22:09,"Btw, this was my attempt at this #14309 ",https://github.com/bitcoin/bitcoin/pull/21039#issuecomment-770667110,770667110,
michaelfolkson,2021-02-01 23:17:57,"Concept ACK\n\nAt least in theory (if not in practice) `src/bitcoind -testnet -regtest` could be handled as `src/bitcoind -testnet` first and then `src/bitcoind -regtest` right? You can run two or more chains in parallel on the same machine. Not suggesting this as viable alternative though, just asking for own understanding.\n\n",https://github.com/bitcoin/bitcoin/pull/21039#issuecomment-771228441,771228441,
sipa,2021-02-01 23:24:49,"@michaelfolkson You can run multiple `bitcoind` processes on the same machine, whether they operate on the same chain or different chains. But at least for now there is no way to have one process run on multiple chains simultaneously, and I don't expect there will be, so it's unclear what specifying multiple chains would mean.\n\nIt's also unrelated to this PR.",https://github.com/bitcoin/bitcoin/pull/21039#issuecomment-771231401,771231401,
laanwj,2021-02-02 08:35:05,"It would IMO be unnecessary complication to run multiple chains in one process. When you can solve something using multiple processes that tends to be (definitely from a decoupling angle) a better design.\n\nOfftopic also: I understand the confusion though. In retrospect I think we should have bitten the bullet and switched to `-chain=X`, instead of an option per chain, such an option maps much ",https://github.com/bitcoin/bitcoin/pull/21039#issuecomment-771464499,771464499,
MarcoFalke,2021-03-13 09:53:24,Is this up for grabs?,https://github.com/bitcoin/bitcoin/pull/21039#issuecomment-798055485,798055485,
fanquake,2021-03-29 03:17:03,"> Is this up for grabs?\n\nðŸ¤· It's got 2 ACKs, 1 Concept ACK, 1 suggestion to take a different approach, and 1 alternative to the different approach. Happy for someone else to take a stab.",https://github.com/bitcoin/bitcoin/pull/21039#issuecomment-809036586,809036586,
jonatack,2021-01-31 18:26:54,"maybe suggest valid values to the user\n```suggestion\n    throw std::runtime_error(strprintf(""%s: Unknown chain: %s. Please provide one of: main, test, signet, regtest"", __func__, chain));\n```",https://github.com/bitcoin/bitcoin/pull/21039#discussion_r567464690,567464690,src/chainparamsbase.cpp
MarcoFalke,2021-02-01 08:24:15,"I am not convinced that an error should be encoded as special chain name of ""Invalid..."". Even if this compiles right now, this is asking for issues down the road where the caller doesn't sanitize the chain name.",https://github.com/bitcoin/bitcoin/pull/21039#discussion_r567635299,567635299,src/util/system.cpp
laanwj,2021-02-01 13:20:57,"Agree, special-case values are prone to breakage.\nThis is what std::optional is for! Let's use it.",https://github.com/bitcoin/bitcoin/pull/21039#discussion_r567818741,567818741,src/util/system.cpp
ajtowns,2021-02-04 14:18:07,"Doing this with std::optional everywhere seems pretty ugly, here's an alternative approach: https://github.com/ajtowns/bitcoin/commits/202102-getchainname . Probably better to have `string GetChainName()` and `string GetChainNameCheck()` and a private `bool GetChainName(string&)` that they both call than moving the exception message to the various callers though.",https://github.com/bitcoin/bitcoin/pull/21039#discussion_r570257907,570257907,src/util/system.cpp
