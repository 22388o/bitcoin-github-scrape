fanquake,2020-11-19 04:55:59,"This is currently failing on just the macOS cross build because it has `-Werror` enabled, which means means`-Werror=gnu`, and [`-Wzero-length-array`](https://releases.llvm.org/11.0.0/tools/clang/docs/DiagnosticsReference.html#wzero-length-array) is included in [`-Wgnu`](https://releases.llvm.org/11.0.0/tools/clang/docs/DiagnosticsReference.html#wgnu):\n```bash\n/usr/bin/ccache /tmp/cirrus-ci-bui",https://github.com/bitcoin/bitcoin/pull/20421#issuecomment-730129103,730129103,
hebasto,2020-11-19 09:45:16,Concept ACK.,https://github.com/bitcoin/bitcoin/pull/20421#issuecomment-730253976,730253976,
practicalswift,2020-11-19 10:54:36,"Concept ACK\n\nThanks for taking care of the version leaking. I've never understood why miniupnpc choose to leak verbose version info like this: it reduces the cost of successful attack a lot.",https://github.com/bitcoin/bitcoin/pull/20421#issuecomment-730292733,730292733,
laanwj,2020-11-23 14:54:26,"The problem is that there is no legal way to do this in C++ at all, besides through the GNU extension. The `[1]` hack is all you can get away with in any standard, and it might run into issues with static and dynamic checkers.\n\nIf you want that, you can apparently stop clang from defining `__GNUC__` with `-fgnuc-version=0`. That said, passing `-Wno-zero-length-array`  might be more reasonable.",https://github.com/bitcoin/bitcoin/pull/20421#issuecomment-732212138,732212138,
luke-jr,2020-11-24 23:57:58,Concept ACK,https://github.com/bitcoin/bitcoin/pull/20421#issuecomment-733318642,733318642,
fanquake,2021-03-23 00:49:01,"> I think CI will pass after #20182 (https://cirrus-ci.com/build/6495395879583744).\n\nI'm not sure why that would make a difference? The same code causing the `-Wzero-length-array` issue is still in the `upnpdev.h` header, and we're still building with `--enable-werror`:\n```bash\nIn file included from mapport.cpp:25:\nIn file included from bitcoin/depends/x86_64-apple-darwin19.6.0/include/m",https://github.com/bitcoin/bitcoin/pull/20421#issuecomment-804501471,804501471,
hebasto,2021-03-23 02:06:50,"> ... and we're still building with `--enable-werror`\n\nRight. Plus `--enable-suppress-external-warnings` :)\n\n",https://github.com/bitcoin/bitcoin/pull/20421#issuecomment-804527966,804527966,
fanquake,2021-03-23 02:08:33,"> Right. Plus --enable-suppress-external-warnings :)\n\nSure, in the CI. However that's not useful for regular users who just want to build with `--enable-werror`. Seems like you're suggesting that `--enable-werror` is going to become useless without `--enable-suppress-external-warnings`? That's not really a path I want to go down. I don't like the idea of just suppressing everything for the sak",https://github.com/bitcoin/bitcoin/pull/20421#issuecomment-804528566,804528566,
hebasto,2021-03-23 02:10:58,"> > Right. Plus --enable-suppress-external-warnings :)\n> \n> Sure, in the CI. However that's not useful for regular users who just want to build with `--enable-werror`. Seems like you're suggesting that `--enable-werror` is going to become useless without `--enable-suppress-external-warnings`?\n\nThat was the point to introduce the latter, no?",https://github.com/bitcoin/bitcoin/pull/20421#issuecomment-804529342,804529342,
laanwj,2021-03-23 19:34:56,"I've done a gitian build and my hashes exactly match @hebasto's\nCode review ACK 180dc3c8863fc42e93657eda839001a2a35ef634",https://github.com/bitcoin/bitcoin/pull/20421#issuecomment-805177668,805177668,
laanwj,2020-11-19 09:28:47,"Nice, thanks for doing this.",https://github.com/bitcoin/bitcoin/pull/20421#discussion_r526712881,526712881,depends/patches/miniupnpc/dont_leak_info.patch
luke-jr,2020-11-24 23:55:42,Can we upstream this as a public API option?,https://github.com/bitcoin/bitcoin/pull/20421#discussion_r530019881,530019881,depends/patches/miniupnpc/dont_leak_info.patch
