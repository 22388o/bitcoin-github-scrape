sipa,2016-06-07T14:14:58Z,utACK d3d02d51453943bfe3a9edb944eb48f9f1e01aca\n,https://github.com/bitcoin/bitcoin/pull/8154#issuecomment-224293585,224293585,
laanwj,2016-06-09T06:12:40Z,utACK https://github.com/bitcoin/bitcoin/pull/8154/commits/d3d02d51453943bfe3a9edb944eb48f9f1e01aca\n,https://github.com/bitcoin/bitcoin/pull/8154#issuecomment-224808673,224808673,
sipa,2016-06-06T22:28:38Z,"I don't think this frees up space.\n\nTo do so, I think you need the amazing idiom `std::vector<CAdress>().swap(pto->vAddrToSend)`. Since c++11 you can also use `pto->vAddrToSend.shrink_to_fit()` as a non-binding request.\n",https://github.com/bitcoin/bitcoin/pull/8154#discussion_r65981246,65981246,src/main.cpp
kazcw,2016-06-06T22:59:03Z,"Wow, is the temporary-swap still necessary? I was so happy thinking we left that behind with C++98. I think a move assignment would work -- for compatible allocators its time complexity is documented as constant in the size of the other vector, which is only possible if it adopts the other vector's storage.\n\nI'm inclined to go with the straightforward `shrink_to_fit`. It's non-binding specifical",https://github.com/bitcoin/bitcoin/pull/8154#discussion_r65984737,65984737,src/main.cpp
sipa,2016-06-07T00:50:58Z,I just tested. Your old code indeed would not reduce capacity for me. _However_ `pto->vAddrToSend = std::vector<CAddress>{}` does reduce it to 0. I wonder what the difference is between a type name being present before the {} or not.\n,https://github.com/bitcoin/bitcoin/pull/8154#discussion_r65994854,65994854,src/main.cpp
sipa,2016-06-07T00:51:53Z,"Oh, I think that without type name, the initializer list assignment is called: (3) here: http://en.cppreference.com/w/cpp/container/vector/operator%3D\n",https://github.com/bitcoin/bitcoin/pull/8154#discussion_r65994934,65994934,src/main.cpp
kazcw,2016-06-07T02:15:29Z,"Yeah, I wrote it that way thinking it would construct a temporary from the initializer list and then move-assign from the rvalue temporary. That's what it _would_ do, if assigning from an initializer list weren't overridden to provide subtly different behaviour... but of course the standard library conveniently has an override for everything :P\n",https://github.com/bitcoin/bitcoin/pull/8154#discussion_r66000838,66000838,src/main.cpp
