[
  {
    "sha": "1ef33d8d78237595d7b0a34eddf058042657bbb3",
    "node_id": "C_kwDOABII59oAKDFlZjMzZDhkNzgyMzc1OTVkN2IwYTM0ZWRkZjA1ODA0MjY1N2JiYjM",
    "commit": {
      "author": {
        "name": "Michael Dietz",
        "email": "michael.dietz@waya.ai",
        "date": "2021-09-01T16:44:27Z"
      },
      "committer": {
        "name": "Michael Dietz",
        "email": "michael.dietz@waya.ai",
        "date": "2021-11-21T22:00:06Z"
      },
      "message": "test: clarify no inherited replaceability assertions",
      "tree": {
        "sha": "e46d428dfbe2bdf40bd57469faf4963d569851cb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e46d428dfbe2bdf40bd57469faf4963d569851cb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1ef33d8d78237595d7b0a34eddf058042657bbb3",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEENKwpEUV32QrrIOeYc3/VzfHRRrkFAmGawYMACgkQc3/VzfHR\nRrkg+g/+Ky22yBJ97B4F0bV0GaAVR2HF8mWeqov74De6DU2KgmhjTX9mz3rWfycq\nDOaNKEiM8BE/Sfa++BydI+z8ksjOSdInTVC3ZtcV1RFTgRVoksWkf0DZFfxpUaa0\nqJLaIaB9NI3Yn8E2O+rOsCrGeMeYtEFfpxjkbtcqX6IvKSmnt0lXSAbzNL8K2RXI\nn+J3cJ4FzYwMEYDfWcSjqtJKgjeO0STZi63lyku1abtbTIm5llFx471OzIvQjsnb\nHUb7kfBqlAP0iAWacvp0dyLwT2vSjjAtuJOlpSXaMF7KZGIwhPgLULi6xVCv5Vum\nXdoSkKrpLFKJxXu8XXCMDlGA/kG0J1lmyC5MuxyuFLwvxeWHEvnvqRQfz9OuVNnJ\n4eGD+LAv4BNLz2utkwcQB0AOZaeg3/+Nhx5aDwefDZxpqyl/iPCX0Tej0/s2IbjU\nIfQu77wJA5CdnNixtVcAPMyykp/5fUwqivWqxLeBcb5anqFmY6a0yiPlBed1G9Zt\nZ/7eb8U08awCDc56aDopYvV2DbvvnIrdNviY3S7bIYrtYF2OgtlL+a9EawKrbl4U\noR67TEt/J2WhkJVKhrlXw2wckLY6Vxk0G4IM0AFvpysUZH7VPGFpVVwukrPuOMDz\nRqpnQKn4eN//j/XTLvxFK9U0ZN6bDTMpU9sr4giKRZKZrdFEfbQ=\n=B3Dc\n-----END PGP SIGNATURE-----",
        "payload": "tree e46d428dfbe2bdf40bd57469faf4963d569851cb\nparent 19815b096c6a2b2e0bcb802e9e5842e67952993e\nauthor Michael Dietz <michael.dietz@waya.ai> 1630514667 -0500\ncommitter Michael Dietz <michael.dietz@waya.ai> 1637532006 -0600\n\ntest: clarify no inherited replaceability assertions\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ef33d8d78237595d7b0a34eddf058042657bbb3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1ef33d8d78237595d7b0a34eddf058042657bbb3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ef33d8d78237595d7b0a34eddf058042657bbb3/comments",
    "author": {
      "login": "mjdietzx",
      "id": 7217256,
      "node_id": "MDQ6VXNlcjcyMTcyNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7217256?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mjdietzx",
      "html_url": "https://github.com/mjdietzx",
      "followers_url": "https://api.github.com/users/mjdietzx/followers",
      "following_url": "https://api.github.com/users/mjdietzx/following{/other_user}",
      "gists_url": "https://api.github.com/users/mjdietzx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
      "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
      "repos_url": "https://api.github.com/users/mjdietzx/repos",
      "events_url": "https://api.github.com/users/mjdietzx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "mjdietzx",
      "id": 7217256,
      "node_id": "MDQ6VXNlcjcyMTcyNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7217256?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mjdietzx",
      "html_url": "https://github.com/mjdietzx",
      "followers_url": "https://api.github.com/users/mjdietzx/followers",
      "following_url": "https://api.github.com/users/mjdietzx/following{/other_user}",
      "gists_url": "https://api.github.com/users/mjdietzx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
      "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
      "repos_url": "https://api.github.com/users/mjdietzx/repos",
      "events_url": "https://api.github.com/users/mjdietzx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "19815b096c6a2b2e0bcb802e9e5842e67952993e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/19815b096c6a2b2e0bcb802e9e5842e67952993e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/19815b096c6a2b2e0bcb802e9e5842e67952993e"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 6,
      "deletions": 8
    },
    "files": [
      {
        "sha": "85aa38ade170e95d7a06e8e419d77a39eb54ddf6",
        "filename": "test/functional/feature_rbf.py",
        "status": "modified",
        "additions": 6,
        "deletions": 8,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1ef33d8d78237595d7b0a34eddf058042657bbb3/test/functional/feature_rbf.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1ef33d8d78237595d7b0a34eddf058042657bbb3/test/functional/feature_rbf.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_rbf.py?ref=1ef33d8d78237595d7b0a34eddf058042657bbb3",
        "patch": "@@ -586,6 +586,7 @@ def test_no_inherited_signaling(self):\n         # Reports true due to inheritance\n         assert_equal(True, self.nodes[0].getmempoolentry(optout_child_tx['txid'])['bip125-replaceable'])\n \n+        self.log.info('Check that the (optout) child tx can not be replaced directly')\n         replacement_child_tx = self.wallet.create_self_transfer(\n             from_node=self.nodes[0],\n             utxo_to_spend=parent_utxo,\n@@ -594,14 +595,11 @@ def test_no_inherited_signaling(self):\n             mempool_valid=False,\n         )\n \n-        # Broadcast replacement child tx\n-        # BIP 125 :\n-        # 1. The original transactions signal replaceability explicitly or through inheritance as described in the above\n-        # Summary section.\n-        # The original transaction (`optout_child_tx`) doesn't signal RBF but its parent (`optin_parent_tx`) does.\n-        # The replacement transaction (`replacement_child_tx`) should be able to replace the original transaction.\n-        # See CVE-2021-31876 for further explanations.\n-        assert_equal(True, self.nodes[0].getmempoolentry(optin_parent_tx['txid'])['bip125-replaceable'])\n+        # The transaction we are attempting to replace (`optout_child_tx`) doesn't signal RBF but its parent (`optin_parent_tx`) does.\n+        # The replacement transaction (`replacement_child_tx`) should be able to replace `optout_child_tx` due to replaceability through inheritance.\n+        # Here we show that this isn't the case. See CVE-2021-31876 for further explanations.\n+        assert_equal(True, self.nodes[0].getmempoolentry(optin_parent_tx['txid'])['bip125-replaceable'])  # explicitly signals replaceability\n+        assert_equal(True, self.nodes[0].getmempoolentry(optout_child_tx['txid'])['bip125-replaceable'])  # reports `True` due to inherited signaling from `optin_parent_tx`\n         assert_raises_rpc_error(-26, 'txn-mempool-conflict', self.nodes[0].sendrawtransaction, replacement_child_tx[\"hex\"], 0)\n \n         self.log.info('Check that the child tx can still be replaced (via a tx that also replaces the parent)')"
      }
    ]
  },
  {
    "sha": "9fd6fa11e37f7138abb7f36ecac9c4a0f2f4d359",
    "node_id": "C_kwDOABII59oAKDlmZDZmYTExZTM3ZjcxMzhhYmI3ZjM2ZWNhYzljNGEwZjJmNGQzNTk",
    "commit": {
      "author": {
        "name": "Michael Dietz",
        "email": "michael.dietz@waya.ai",
        "date": "2021-09-02T20:35:52Z"
      },
      "committer": {
        "name": "Michael Dietz",
        "email": "michael.dietz@waya.ai",
        "date": "2021-11-21T22:01:20Z"
      },
      "message": "test: replacement tx rejected bc conflicts may be double counted",
      "tree": {
        "sha": "4f63decc8add4e33a82753915e815014d4833f19",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4f63decc8add4e33a82753915e815014d4833f19"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9fd6fa11e37f7138abb7f36ecac9c4a0f2f4d359",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEENKwpEUV32QrrIOeYc3/VzfHRRrkFAmGawn8ACgkQc3/VzfHR\nRrmQdA//cWjrsfuL7AJi/ClublmJg3FU6GzEOaTRWHh6DaPn1OnxYoukE+xFtGAV\naZlS2uZ9xr/sasSu3KsMgckUEBqHrU/t4+H+vAcrR7qLS91lOf5StqJzx7YbROAy\n9vk3Fo6IWqfGFSugzc5bKG4J35XCLlYzyBWjA2akQuU6h0vBFqbMEs4eoh6FXfTM\nBOMWsTuu4Z1sk+nnyrWt3NX9uktgDxGiqy8ubI6nbR2TnaN/bPxtahbv1tpbcpQm\nuXqjyF/er+382JW7jztw157XjEwMRbn5BszpOMTByVK1kCQRyK0FZWqHdtbnP1Ib\nOg27i2DKgsoYpZV6REf1PMQnZYgkxMgL6JkSRZLCFw0pWF1sYVzhq28E9iWn+P2p\nzdc0aq1i4jmNQKq7HujF7QQX3xb3mG+ms9sRY7voEAzrP+ZIdZ//SydeSxEdWL7m\ngcNogvmwCT7cttX31fwSk8tWNsORtLW9zbfxfHrbeIFJEnlUqLlWzZJd5gMZn05J\n+id42YUK9fsxDtiUfxqZbfxIEkKkXFdqFHUzPAjJAKNEET4RDJDJqruhoI19mpm8\nlC1vzieAgHhB3JX2jzGwthZc77e2pbGjLUivZ3aRMRzTG/exSGNXv3uVSFGu20G3\n1/edP2wV6BlObbbYFnxR4Z2w/cmZtnVvur8I41SoPFO8fll8yrs=\n=SajU\n-----END PGP SIGNATURE-----",
        "payload": "tree 4f63decc8add4e33a82753915e815014d4833f19\nparent 1ef33d8d78237595d7b0a34eddf058042657bbb3\nauthor Michael Dietz <michael.dietz@waya.ai> 1630614952 -0500\ncommitter Michael Dietz <michael.dietz@waya.ai> 1637532080 -0600\n\ntest: replacement tx rejected bc conflicts may be double counted\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9fd6fa11e37f7138abb7f36ecac9c4a0f2f4d359",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9fd6fa11e37f7138abb7f36ecac9c4a0f2f4d359",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9fd6fa11e37f7138abb7f36ecac9c4a0f2f4d359/comments",
    "author": {
      "login": "mjdietzx",
      "id": 7217256,
      "node_id": "MDQ6VXNlcjcyMTcyNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7217256?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mjdietzx",
      "html_url": "https://github.com/mjdietzx",
      "followers_url": "https://api.github.com/users/mjdietzx/followers",
      "following_url": "https://api.github.com/users/mjdietzx/following{/other_user}",
      "gists_url": "https://api.github.com/users/mjdietzx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
      "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
      "repos_url": "https://api.github.com/users/mjdietzx/repos",
      "events_url": "https://api.github.com/users/mjdietzx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "mjdietzx",
      "id": 7217256,
      "node_id": "MDQ6VXNlcjcyMTcyNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7217256?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mjdietzx",
      "html_url": "https://github.com/mjdietzx",
      "followers_url": "https://api.github.com/users/mjdietzx/followers",
      "following_url": "https://api.github.com/users/mjdietzx/following{/other_user}",
      "gists_url": "https://api.github.com/users/mjdietzx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
      "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
      "repos_url": "https://api.github.com/users/mjdietzx/repos",
      "events_url": "https://api.github.com/users/mjdietzx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1ef33d8d78237595d7b0a34eddf058042657bbb3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ef33d8d78237595d7b0a34eddf058042657bbb3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1ef33d8d78237595d7b0a34eddf058042657bbb3"
      }
    ],
    "stats": {
      "total": 77,
      "additions": 76,
      "deletions": 1
    },
    "files": [
      {
        "sha": "bb4400b355a277781bdd85568cca2b59ae19ddbf",
        "filename": "test/functional/feature_rbf.py",
        "status": "modified",
        "additions": 76,
        "deletions": 1,
        "changes": 77,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fd6fa11e37f7138abb7f36ecac9c4a0f2f4d359/test/functional/feature_rbf.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fd6fa11e37f7138abb7f36ecac9c4a0f2f4d359/test/functional/feature_rbf.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_rbf.py?ref=9fd6fa11e37f7138abb7f36ecac9c4a0f2f4d359",
        "patch": "@@ -36,7 +36,7 @@ def set_test_params(self):\n             [\n                 \"-acceptnonstdtxn=1\",\n                 \"-maxorphantx=1000\",\n-                \"-limitancestorcount=50\",\n+                f\"-limitancestorcount={MAX_REPLACEMENT_LIMIT + 1}\", # enough room to test BIP125 Rule #5\n                 \"-limitancestorsize=101\",\n                 \"-limitdescendantcount=200\",\n                 \"-limitdescendantsize=101\",\n@@ -87,6 +87,9 @@ def run_test(self):\n         self.log.info(\"Running test replacement relay fee...\")\n         self.test_replacement_relay_fee()\n \n+        self.log.info(\"Running test prechecks overestimates replacements...\")\n+        self.test_prechecks_overestimates_replacements()\n+\n         self.log.info(\"Passed\")\n \n     def make_utxo(self, node, amount, confirmed=True, scriptPubKey=DUMMY_P2WPKH_SCRIPT):\n@@ -110,6 +113,19 @@ def make_utxo(self, node, amount, confirmed=True, scriptPubKey=DUMMY_P2WPKH_SCRI\n \n         return COutPoint(int(txid, 16), n)\n \n+    def create_double_input_self_transfer(self, input_utxos, fee_rate):\n+        \"\"\"Given two input utxos, create one transaction that spends both of them\"\"\"\n+        [tx, staging_tx] = list(map(lambda utxo: self.wallet.create_self_transfer(\n+            from_node=self.nodes[0],\n+            utxo_to_spend=utxo,\n+            fee_rate=fee_rate,\n+        )[\"tx\"], input_utxos))\n+\n+        tx.vin.append(staging_tx.vin[0])\n+        tx.wit.vtxinwit.append(staging_tx.wit.vtxinwit[0])\n+        tx.vout[0].nValue = tx.vout[0].nValue + staging_tx.vout[0].nValue\n+        return tx.serialize().hex()\n+\n     def test_simple_doublespend(self):\n         \"\"\"Simple doublespend\"\"\"\n         # we use MiniWallet to create a transaction template with inputs correctly set,\n@@ -621,5 +637,64 @@ def test_replacement_relay_fee(self):\n         tx.vout[0].nValue -= 1\n         assert_raises_rpc_error(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, tx.serialize().hex())\n \n+    def test_prechecks_overestimates_replacements(self):\n+        confirmed_utxos = [self.wallet.get_utxo(), self.wallet.get_utxo()]\n+\n+        # Two opt-in parent transactions\n+        parent_txs = list(map(lambda utxo: self.wallet.send_self_transfer(\n+            from_node=self.nodes[0],\n+            utxo_to_spend=utxo,\n+            sequence=BIP125_SEQUENCE_NUMBER,\n+            fee_rate=Decimal('0.0001'),\n+        ), confirmed_utxos))\n+\n+        # Craft a transaction that spends both parents so we can create one chain of descendant transactions\n+        parent_utxos = list(map(lambda tx: self.wallet.get_utxo(txid=tx['txid']), parent_txs))\n+        joined_tx_hex = self.create_double_input_self_transfer(parent_utxos, Decimal('0.0001'))\n+        joined_tx_txid = self.nodes[0].sendrawtransaction(joined_tx_hex)\n+\n+        # Get the `joined_tx` utxo into our wallet so we can spend a chain of descendants from it\n+        joined_tx = self.nodes[0].decoderawtransaction(joined_tx_hex)\n+        self.wallet.scan_tx(joined_tx)\n+        joined_utxo = self.wallet.get_utxo(txid=joined_tx_txid)\n+\n+        # Create a chain half the size of `MAX_REPLACEMENT_LIMIT` spending `joined_tx` - well under the BIP125 Rule #5 imposed limit\n+        tx = None\n+        for _ in range(MAX_REPLACEMENT_LIMIT // 2):\n+            tx = self.wallet.send_self_transfer(\n+                from_node=self.nodes[0],\n+                utxo_to_spend=joined_utxo if tx is None else self.wallet.get_utxo(txid=tx['txid']),  # a straight line of descendants\n+                fee_rate=Decimal('0.0001'),\n+            )\n+\n+        # Even though there are well under `MAX_REPLACEMENT_LIMIT` transactions that will be evicted due to this replacement,\n+        # in this case we still reject the replacement attempt because of the way `MemPoolAccept::PreChecks` double-counts descendants.\n+        # Each `confirmed_utxo` has the exact same descendants, but they are each counted twice!\n+        replacement_attempt_tx_hex = self.create_double_input_self_transfer(confirmed_utxos, Decimal('0.01'))\n+        assert_raises_rpc_error(-26, 'too many potential replacements', self.nodes[0].sendrawtransaction, replacement_attempt_tx_hex, 0)\n+\n+        # However, we can still craft a transaction that replaces the entire descendant chain by only replacing one of the `parent_txs`\n+        replacement_tx = self.wallet.send_self_transfer(\n+            from_node=self.nodes[0],\n+            utxo_to_spend=confirmed_utxos[0],  # replace the opt-in parent transaction\n+            sequence=BIP125_SEQUENCE_NUMBER,\n+            fee_rate=Decimal('0.01'),\n+        )\n+        mempool = self.nodes[0].getrawmempool()\n+        assert replacement_tx['txid'] in mempool\n+        assert parent_txs[0]['txid'] not in mempool\n+        assert parent_txs[1]['txid'] in mempool\n+        assert tx['txid'] not in mempool\n+\n+        # And funny enough, _now_ we can successfully broadcast that same `replacement_tx_hex` which just failed with the\n+        # \"too many potential replacements\" error. It was just a little tricky to get around `MemPoolAccept::PreChecks`\n+        # double-counting evictions.\n+        replacement_attempt_tx_txid = self.nodes[0].sendrawtransaction(replacement_attempt_tx_hex, 0)\n+        mempool = self.nodes[0].getrawmempool()\n+        assert replacement_attempt_tx_txid in mempool\n+        assert replacement_tx['txid'] not in mempool\n+        for parent_tx in parent_txs:\n+            assert parent_tx not in mempool\n+\n if __name__ == '__main__':\n     ReplaceByFeeTest().main()"
      }
    ]
  },
  {
    "sha": "44bffc15d4d92abef49a188e28dc214baab1b333",
    "node_id": "C_kwDOABII59oAKDQ0YmZmYzE1ZDRkOTJhYmVmNDlhMTg4ZTI4ZGMyMTRiYWFiMWIzMzM",
    "commit": {
      "author": {
        "name": "Michael Dietz",
        "email": "michael.dietz@waya.ai",
        "date": "2021-09-02T21:29:53Z"
      },
      "committer": {
        "name": "Michael Dietz",
        "email": "michael.dietz@waya.ai",
        "date": "2021-11-21T22:28:38Z"
      },
      "message": "test: dynamic rbf inherited signaling in the case of a reorg\n\nIn the event of a reorg, the assumption that a newly added tx has no\nin-mempool children is false. If the children opted-out of rbf they\nwould show \\`RBFTransactionState::FINAL\\` prior to the reorg.\nUpon their rbf opt-in parent being accepted back into the mempool, they\nwould show \\`RBFTransactionState::REPLACEABLE_BIP125\\`.",
      "tree": {
        "sha": "8938fdef0a2496896e5ba8c90598b033fd021f90",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8938fdef0a2496896e5ba8c90598b033fd021f90"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/44bffc15d4d92abef49a188e28dc214baab1b333",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEENKwpEUV32QrrIOeYc3/VzfHRRrkFAmGayOoACgkQc3/VzfHR\nRrnALQ/+O9V+x4ueVr0NiK+peY64WAGDzR6xu4My5Uai+qEFVGALAqp1LmL50Lbx\ncIi6rsGqeTsDyvd9+POQC7FRm+sTHhlekZjFIFhBzeAVjnWXdMw3p40XW8WehdN3\nlzXA1UGFmB/nGOPWIaOxcLP0MO5jIGuOagVJQ0GBm/XLCPezBMpYbfOLXR27VElk\nhpQap2DDEVUj1GssEu7+0ubNugmvLi/pr5YdE4kjgsHotoC8YP/7pd2wDrZDcdz/\nHbxndYWgvegzVXoBnrNolhVlt2J78gnH0+1/0Hl0pZFzuoOVR+KKxM6YrJFi3r/L\nurFGvWNFA8S2FwgFXbup3zSYWJMlG+kROWLvnFL4CuTahPqpMHnqqrd+4442b7c2\nxmMM+P0xGVG8dW/D5nvAofvUDenkQuH15SpBdWEBr2QI+Zi23UWFqxwkzxDnuPL/\nwzm8hW2m3FAccaui/eZ94PClOfxnkJT3a3GK85WQAv3KNrHHbTOPgMzH5SCPQlWj\nXn7YfQCJp9nUJNZX/UeodUjokRfNGDWcSJvOFZUges7YiNwTGLtTJ9eXD+mniTCC\nKA0wD5+fpvQfHyLUYlUBcXmmCb+VuRZnVO9Mf8B7u/DfM9cVOo0/m7xma19AOz5x\n3QUP0mmq2Gf2PpuFVE2F3pPz/rZM86Q5muEjli28/Dpg+5oXrDg=\n=EdTd\n-----END PGP SIGNATURE-----",
        "payload": "tree 8938fdef0a2496896e5ba8c90598b033fd021f90\nparent 9fd6fa11e37f7138abb7f36ecac9c4a0f2f4d359\nauthor Michael Dietz <michael.dietz@waya.ai> 1630618193 -0500\ncommitter Michael Dietz <michael.dietz@waya.ai> 1637533718 -0600\n\ntest: dynamic rbf inherited signaling in the case of a reorg\n\nIn the event of a reorg, the assumption that a newly added tx has no\nin-mempool children is false. If the children opted-out of rbf they\nwould show \\`RBFTransactionState::FINAL\\` prior to the reorg.\nUpon their rbf opt-in parent being accepted back into the mempool, they\nwould show \\`RBFTransactionState::REPLACEABLE_BIP125\\`.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/44bffc15d4d92abef49a188e28dc214baab1b333",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/44bffc15d4d92abef49a188e28dc214baab1b333",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/44bffc15d4d92abef49a188e28dc214baab1b333/comments",
    "author": {
      "login": "mjdietzx",
      "id": 7217256,
      "node_id": "MDQ6VXNlcjcyMTcyNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7217256?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mjdietzx",
      "html_url": "https://github.com/mjdietzx",
      "followers_url": "https://api.github.com/users/mjdietzx/followers",
      "following_url": "https://api.github.com/users/mjdietzx/following{/other_user}",
      "gists_url": "https://api.github.com/users/mjdietzx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
      "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
      "repos_url": "https://api.github.com/users/mjdietzx/repos",
      "events_url": "https://api.github.com/users/mjdietzx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "mjdietzx",
      "id": 7217256,
      "node_id": "MDQ6VXNlcjcyMTcyNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7217256?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mjdietzx",
      "html_url": "https://github.com/mjdietzx",
      "followers_url": "https://api.github.com/users/mjdietzx/followers",
      "following_url": "https://api.github.com/users/mjdietzx/following{/other_user}",
      "gists_url": "https://api.github.com/users/mjdietzx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
      "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
      "repos_url": "https://api.github.com/users/mjdietzx/repos",
      "events_url": "https://api.github.com/users/mjdietzx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9fd6fa11e37f7138abb7f36ecac9c4a0f2f4d359",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9fd6fa11e37f7138abb7f36ecac9c4a0f2f4d359",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9fd6fa11e37f7138abb7f36ecac9c4a0f2f4d359"
      }
    ],
    "stats": {
      "total": 46,
      "additions": 44,
      "deletions": 2
    },
    "files": [
      {
        "sha": "1447759edcd462a4446aceb7f01fdc73c1ffff03",
        "filename": "test/functional/feature_rbf.py",
        "status": "modified",
        "additions": 44,
        "deletions": 2,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/44bffc15d4d92abef49a188e28dc214baab1b333/test/functional/feature_rbf.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/44bffc15d4d92abef49a188e28dc214baab1b333/test/functional/feature_rbf.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_rbf.py?ref=44bffc15d4d92abef49a188e28dc214baab1b333",
        "patch": "@@ -19,6 +19,7 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n+    assert_greater_than,\n     assert_raises_rpc_error,\n )\n from test_framework.script_util import (\n@@ -36,7 +37,7 @@ def set_test_params(self):\n             [\n                 \"-acceptnonstdtxn=1\",\n                 \"-maxorphantx=1000\",\n-                f\"-limitancestorcount={MAX_REPLACEMENT_LIMIT + 1}\", # enough room to test BIP125 Rule #5\n+                f\"-limitancestorcount={MAX_REPLACEMENT_LIMIT + 3}\", # enough room to test BIP125 Rule #5\n                 \"-limitancestorsize=101\",\n                 \"-limitdescendantcount=200\",\n                 \"-limitdescendantsize=101\",\n@@ -90,6 +91,9 @@ def run_test(self):\n         self.log.info(\"Running test prechecks overestimates replacements...\")\n         self.test_prechecks_overestimates_replacements()\n \n+        self.log.info(\"Running test reorged inherited signaling...\")\n+        self.test_reorged_inherited_signaling()\n+\n         self.log.info(\"Passed\")\n \n     def make_utxo(self, node, amount, confirmed=True, scriptPubKey=DUMMY_P2WPKH_SCRIPT):\n@@ -113,11 +117,12 @@ def make_utxo(self, node, amount, confirmed=True, scriptPubKey=DUMMY_P2WPKH_SCRI\n \n         return COutPoint(int(txid, 16), n)\n \n-    def create_double_input_self_transfer(self, input_utxos, fee_rate):\n+    def create_double_input_self_transfer(self, input_utxos, fee_rate, sequence=BIP125_SEQUENCE_NUMBER):\n         \"\"\"Given two input utxos, create one transaction that spends both of them\"\"\"\n         [tx, staging_tx] = list(map(lambda utxo: self.wallet.create_self_transfer(\n             from_node=self.nodes[0],\n             utxo_to_spend=utxo,\n+            sequence=sequence,\n             fee_rate=fee_rate,\n         )[\"tx\"], input_utxos))\n \n@@ -696,5 +701,42 @@ def test_prechecks_overestimates_replacements(self):\n         for parent_tx in parent_txs:\n             assert parent_tx not in mempool\n \n+        # clean up all evicted utxos / update wallet utxo state\n+        self.wallet.get_utxo(txid=tx['txid'])\n+        self.wallet.get_utxo(txid=replacement_tx['txid'])\n+\n+    def test_reorged_inherited_signaling(self):\n+        confirmed_utxos = [self.wallet.get_utxo(), self.wallet.get_utxo()]\n+\n+        # One opt-in parent transaction, one opt-out\n+        parent_txs = list(map(lambda utxo: self.wallet.send_self_transfer(\n+            from_node=self.nodes[0],\n+            utxo_to_spend=utxo,\n+            sequence=BIP125_SEQUENCE_NUMBER if confirmed_utxos.index(utxo) == 0 else 0xffffffff,\n+            fee_rate=Decimal('0.0001'),\n+        ), confirmed_utxos))\n+        optin_parent_tx, optout_parent_tx = parent_txs\n+\n+        # Craft a transaction that spends both parents so we can create one chain of descendant transactions\n+        parent_utxos = list(map(lambda tx: self.wallet.get_utxo(txid=tx['txid']), parent_txs))\n+        joined_tx_hex = self.create_double_input_self_transfer(parent_utxos, Decimal('0.0001'), sequence=0xffffffff)\n+        joined_tx_txid = self.nodes[0].sendrawtransaction(joined_tx_hex)\n+\n+        # Only a single input needs to signal replaceability (whether explicitly or through inheritance) for the resulting transaction to signal\n+        assert_equal(True, self.nodes[0].getmempoolentry(joined_tx_txid)['bip125-replaceable'])\n+\n+        # Get the `joined_tx` utxo into our wallet so we can spend a chain of descendants from it\n+        joined_tx = self.nodes[0].decoderawtransaction(joined_tx_hex)\n+        self.wallet.scan_tx(joined_tx)\n+        joined_utxo = self.wallet.get_utxo(txid=joined_tx_txid)\n+\n+        # If we confirm `optin_parent_tx` descendants will no longer inherit signaling\n+        hash = self.generateblock(self.nodes[0], output=self.wallet.get_address(), transactions=[optin_parent_tx['txid']])['hash']\n+        assert_equal(False, self.nodes[0].getmempoolentry(joined_tx_txid)['bip125-replaceable'])\n+\n+        # Get `optin_parent_tx` back in our mempool, once again descendants inherit signaling\n+        self.nodes[0].invalidateblock(hash)\n+        assert_equal(True, self.nodes[0].getmempoolentry(joined_tx_txid)['bip125-replaceable'])\n+\n if __name__ == '__main__':\n     ReplaceByFeeTest().main()"
      }
    ]
  },
  {
    "sha": "3fc1f8b612aa721b059639f83d9eb5cc22de3531",
    "node_id": "C_kwDOABII59oAKDNmYzFmOGI2MTJhYTcyMWIwNTk2MzlmODNkOWViNWNjMjJkZTM1MzE",
    "commit": {
      "author": {
        "name": "Michael Dietz",
        "email": "michael.dietz@waya.ai",
        "date": "2021-11-21T22:36:33Z"
      },
      "committer": {
        "name": "Michael Dietz",
        "email": "michael.dietz@waya.ai",
        "date": "2021-11-21T22:36:33Z"
      },
      "message": "test: incorrect rbf status when max replacement limit exceeded\n\nHighlight that transactions may signal they are replaceable even\nthough they are not due to BIP125 RBF (Rule #5).",
      "tree": {
        "sha": "db0f4cae56fcaf9fa307366d582db6f4630475e4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/db0f4cae56fcaf9fa307366d582db6f4630475e4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3fc1f8b612aa721b059639f83d9eb5cc22de3531",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEENKwpEUV32QrrIOeYc3/VzfHRRrkFAmGayuIACgkQc3/VzfHR\nRrnFnw//cVKbYn1yLKWAp0orJ/b/f67X/AqH1+BaZbZEXFY9KQy3PKPLhOt/xBea\nNXO617uKhelVHVEVCFj4WvO+Q5S75tVGu+8lTMNO7qvCtkhqjtx1MRF7lpHWx9kX\nymU1f8K7ouCIflug22PZxcTez5qFGQNatyXbu+lf3xPTf6hnn10MPlYt78aZK4PZ\nTnFyL9PyCouwkHrRVzDUgNRFJ5+KYLoBVgpUjqabnSdcP3qV/HZ+5wyN0eVXR25G\nan5jtqfDIM7AFH/DJf3iKwpYsGhpx2wWXEJBaqd2avWFPPkmyP8vw6WpOC99ChVi\n6UKduFzpag30LAMUrPNfAryaEFTENczk7iafJ1khsHmN8VNTCzKS1Bl8Ew26i6DC\n5uJSP737vUknQTBXyrjjVqPCCSR6hlyjui8hEF+ZCUX8JEZo0SOsS67RtuZQKUZF\nkdOthSdTEzWMUPD5x2BkQQrkg4gjMY0fZfx1MaJG6CtG//Od4DdUXh3h1dtKcomQ\nUWF1hT8zeWtYuwi4Pw7gKhilcO4UdmPwILPgXyjE6tp4iA3kXPoMFYFk7+vhSZy7\n7kHV70DePpzx1ov4Oiw3zF5CT9nzL2eD+p002mayVflD8814UZEn8gvbkPHlonYr\nVOZcZEuiCYFqRFR/3lpkOVOOr+pARUImcSPzdpXXVdIQze2D7Gg=\n=6lb5\n-----END PGP SIGNATURE-----",
        "payload": "tree db0f4cae56fcaf9fa307366d582db6f4630475e4\nparent 44bffc15d4d92abef49a188e28dc214baab1b333\nauthor Michael Dietz <michael.dietz@waya.ai> 1637534193 -0600\ncommitter Michael Dietz <michael.dietz@waya.ai> 1637534193 -0600\n\ntest: incorrect rbf status when max replacement limit exceeded\n\nHighlight that transactions may signal they are replaceable even\nthough they are not due to BIP125 RBF (Rule #5).\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3fc1f8b612aa721b059639f83d9eb5cc22de3531",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3fc1f8b612aa721b059639f83d9eb5cc22de3531",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3fc1f8b612aa721b059639f83d9eb5cc22de3531/comments",
    "author": {
      "login": "mjdietzx",
      "id": 7217256,
      "node_id": "MDQ6VXNlcjcyMTcyNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7217256?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mjdietzx",
      "html_url": "https://github.com/mjdietzx",
      "followers_url": "https://api.github.com/users/mjdietzx/followers",
      "following_url": "https://api.github.com/users/mjdietzx/following{/other_user}",
      "gists_url": "https://api.github.com/users/mjdietzx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
      "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
      "repos_url": "https://api.github.com/users/mjdietzx/repos",
      "events_url": "https://api.github.com/users/mjdietzx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "mjdietzx",
      "id": 7217256,
      "node_id": "MDQ6VXNlcjcyMTcyNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7217256?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mjdietzx",
      "html_url": "https://github.com/mjdietzx",
      "followers_url": "https://api.github.com/users/mjdietzx/followers",
      "following_url": "https://api.github.com/users/mjdietzx/following{/other_user}",
      "gists_url": "https://api.github.com/users/mjdietzx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
      "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
      "repos_url": "https://api.github.com/users/mjdietzx/repos",
      "events_url": "https://api.github.com/users/mjdietzx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "44bffc15d4d92abef49a188e28dc214baab1b333",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/44bffc15d4d92abef49a188e28dc214baab1b333",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/44bffc15d4d92abef49a188e28dc214baab1b333"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 32,
      "deletions": 3
    },
    "files": [
      {
        "sha": "7264b1180f7c160adcc0e0e7609ce2d165de933d",
        "filename": "test/functional/feature_rbf.py",
        "status": "modified",
        "additions": 32,
        "deletions": 3,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fc1f8b612aa721b059639f83d9eb5cc22de3531/test/functional/feature_rbf.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fc1f8b612aa721b059639f83d9eb5cc22de3531/test/functional/feature_rbf.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_rbf.py?ref=3fc1f8b612aa721b059639f83d9eb5cc22de3531",
        "patch": "@@ -91,8 +91,8 @@ def run_test(self):\n         self.log.info(\"Running test prechecks overestimates replacements...\")\n         self.test_prechecks_overestimates_replacements()\n \n-        self.log.info(\"Running test reorged inherited signaling...\")\n-        self.test_reorged_inherited_signaling()\n+        self.log.info(\"Running test reorged inherited signaling and descendant limit...\")\n+        self.test_reorged_inherited_signaling_and_descendant_limit()\n \n         self.log.info(\"Passed\")\n \n@@ -705,7 +705,7 @@ def test_prechecks_overestimates_replacements(self):\n         self.wallet.get_utxo(txid=tx['txid'])\n         self.wallet.get_utxo(txid=replacement_tx['txid'])\n \n-    def test_reorged_inherited_signaling(self):\n+    def test_reorged_inherited_signaling_and_descendant_limit(self):\n         confirmed_utxos = [self.wallet.get_utxo(), self.wallet.get_utxo()]\n \n         # One opt-in parent transaction, one opt-out\n@@ -738,5 +738,34 @@ def test_reorged_inherited_signaling(self):\n         self.nodes[0].invalidateblock(hash)\n         assert_equal(True, self.nodes[0].getmempoolentry(joined_tx_txid)['bip125-replaceable'])\n \n+        # Create a chain the size of `MAX_REPLACEMENT_LIMIT` spending `joined_tx` - the BIP125 Rule #5 imposed limit\n+        tx = None\n+        for _ in range(MAX_REPLACEMENT_LIMIT - 1):\n+            tx = self.wallet.send_self_transfer(\n+                from_node=self.nodes[0],\n+                utxo_to_spend=joined_utxo if tx is None else self.wallet.get_utxo(txid=tx['txid']),  # a straight line of descendants\n+                sequence=0xffffffff,\n+                fee_rate=Decimal('0.0001'),\n+            )\n+            assert_equal(True, self.nodes[0].getmempoolentry(tx['txid'])['bip125-replaceable'])  # inherited\n+        # Now we have a chain of: `optin_parent_tx`, `joined_tx`, and 99 txs. The last tx in the loop exceeded `MAX_REPLACEMENT_LIMIT`\n+\n+        # Attempting to replace the opt-in parent transaction will now result in more than `MAX_REPLACEMENT_LIMIT`\n+        # conflicting txns being evicted from the mempool. However, it (and all of its descendants) are still signaling replaceability.\n+        # We would've expected that once `MAX_REPLACEMENT_LIMIT` is exceeded, the opt-in parent txn stops signaling\n+        # replaceability, along with _all_ of its descendants.\n+        entry = self.nodes[0].getmempoolentry(optin_parent_tx[\"txid\"])\n+        assert_greater_than(entry['descendantcount'], MAX_REPLACEMENT_LIMIT)\n+        assert_equal(True, entry['bip125-replaceable'])\n+        assert_equal(True, self.nodes[0].getmempoolentry(tx[\"txid\"])['bip125-replaceable'])\n+\n+        # Case in point, we can't actually replace `optin_parent_tx` once it has `MAX_REPLACEMENT_LIMIT` descendants\n+        self.wallet.create_self_transfer(\n+            from_node=self.nodes[0],\n+            utxo_to_spend=confirmed_utxos[0],\n+            fee_rate=Decimal('0.01'),\n+            mempool_valid=False,\n+        )\n+\n if __name__ == '__main__':\n     ReplaceByFeeTest().main()"
      }
    ]
  },
  {
    "sha": "16ef543ef18a3ff4016fb52b9996cbd1318fa623",
    "node_id": "C_kwDOABII59oAKDE2ZWY1NDNlZjE4YTNmZjQwMTZmYjUyYjk5OTZjYmQxMzE4ZmE2MjM",
    "commit": {
      "author": {
        "name": "Michael Dietz",
        "email": "michael.dietz@waya.ai",
        "date": "2021-11-26T16:01:50Z"
      },
      "committer": {
        "name": "Michael Dietz",
        "email": "michael.dietz@waya.ai",
        "date": "2021-11-28T20:00:11Z"
      },
      "message": "policy: bip125-replaceable status can't be determined w/o mempool\n\nThe number of original transactions to be replaced and their\ndescendant transactions must not exceed `MAX_BIP125_REPLACEMENT_CANDIDATES`.\nThis is according to BIP125 RBF (Rule 5). Without an entry in the mempool\n(whether it's because we don't have a local mempool or we don't have `tx` in\nour mempool) this check can't be done, and therefore the bip125-replaceable\nstatus will be unknown regardless of how `tx` itself signals.",
      "tree": {
        "sha": "d7125718fa63c3f74870716c9f142ce22557a8da",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d7125718fa63c3f74870716c9f142ce22557a8da"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/16ef543ef18a3ff4016fb52b9996cbd1318fa623",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEENKwpEUV32QrrIOeYc3/VzfHRRrkFAmGj4AQACgkQc3/VzfHR\nRrlV0w//cP5KtzU56lCoMAjgYszaRRrRnU8pjZfAJhbP7cPBthVH9m4tnpTNezUq\nH/iThNIKKOswpk1YIz97jSGiHSrP19IpGtJMbGnHSQD0jt9H/pfG+qVXbVT0iOiy\nghItj9mB0CTIXZa372YJOCUSYAQX3l+3mVtcvjsX4HLiylnzBq6zZTOsbqYPU4jR\nximUMXCTl6FyT8xG/3kj3o1eWkY4xxlEZaMdpy9OCckI6fM3Onj+D3dX4rwIBKOO\ncG1NoGnM61bQWzbETr91pCBvGJOLLstV+bG//jPQOuTxb6t3fx35d+L0vh6xqaSG\nqg19sBhYYq1qunTAGPQdJg0xuR9DiIqiDVFL+4aPb/Dauc5Am44yAOUs5j6Zndo8\ngP4DDOsriS/tDT7+GsDUZOMiDVjzeSn6HPMAVEHrmygkQsBAJejzR2eay94/eE9u\not//1598oQPJjNu+gDJ427ieX/sYZQRrNBNxV+QxofaG9nXMqJtt0NDPBtmvvIdc\nu5XDD2G5LGMzXoauFK6bOfX/gfl3glm1xWQYWnuLDRaYqdegJXU2oWN1/4M500gH\nf809VxPlyNvwlpSXCsb/JHH3ZFTlFORaUgniLzdzygIgKgGzzTzlvnt+bH8gdCLH\n2Xrjt3Q9NMuIYBK3hlG9zR1s9I8bztHbvGBl+WduCfO4jxfkGnc=\n=G6Ph\n-----END PGP SIGNATURE-----",
        "payload": "tree d7125718fa63c3f74870716c9f142ce22557a8da\nparent 3fc1f8b612aa721b059639f83d9eb5cc22de3531\nauthor Michael Dietz <michael.dietz@waya.ai> 1637942510 -0600\ncommitter Michael Dietz <michael.dietz@waya.ai> 1638129611 -0600\n\npolicy: bip125-replaceable status can't be determined w/o mempool\n\nThe number of original transactions to be replaced and their\ndescendant transactions must not exceed `MAX_BIP125_REPLACEMENT_CANDIDATES`.\nThis is according to BIP125 RBF (Rule 5). Without an entry in the mempool\n(whether it's because we don't have a local mempool or we don't have `tx` in\nour mempool) this check can't be done, and therefore the bip125-replaceable\nstatus will be unknown regardless of how `tx` itself signals.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/16ef543ef18a3ff4016fb52b9996cbd1318fa623",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/16ef543ef18a3ff4016fb52b9996cbd1318fa623",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/16ef543ef18a3ff4016fb52b9996cbd1318fa623/comments",
    "author": {
      "login": "mjdietzx",
      "id": 7217256,
      "node_id": "MDQ6VXNlcjcyMTcyNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7217256?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mjdietzx",
      "html_url": "https://github.com/mjdietzx",
      "followers_url": "https://api.github.com/users/mjdietzx/followers",
      "following_url": "https://api.github.com/users/mjdietzx/following{/other_user}",
      "gists_url": "https://api.github.com/users/mjdietzx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
      "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
      "repos_url": "https://api.github.com/users/mjdietzx/repos",
      "events_url": "https://api.github.com/users/mjdietzx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "mjdietzx",
      "id": 7217256,
      "node_id": "MDQ6VXNlcjcyMTcyNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7217256?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mjdietzx",
      "html_url": "https://github.com/mjdietzx",
      "followers_url": "https://api.github.com/users/mjdietzx/followers",
      "following_url": "https://api.github.com/users/mjdietzx/following{/other_user}",
      "gists_url": "https://api.github.com/users/mjdietzx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
      "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
      "repos_url": "https://api.github.com/users/mjdietzx/repos",
      "events_url": "https://api.github.com/users/mjdietzx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3fc1f8b612aa721b059639f83d9eb5cc22de3531",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3fc1f8b612aa721b059639f83d9eb5cc22de3531",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3fc1f8b612aa721b059639f83d9eb5cc22de3531"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 8,
      "deletions": 15
    },
    "files": [
      {
        "sha": "9c6c95e91af3f2cbbeba7967f83c814a59f2e511",
        "filename": "src/node/interfaces.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/16ef543ef18a3ff4016fb52b9996cbd1318fa623/src/node/interfaces.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/16ef543ef18a3ff4016fb52b9996cbd1318fa623/src/node/interfaces.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/interfaces.cpp?ref=16ef543ef18a3ff4016fb52b9996cbd1318fa623",
        "patch": "@@ -570,7 +570,7 @@ class ChainImpl : public Chain\n     }\n     RBFTransactionState isRBFOptIn(const CTransaction& tx) override\n     {\n-        if (!m_node.mempool) return IsRBFOptInEmptyMempool(tx);\n+        if (!m_node.mempool) return RBFTransactionState::UNKNOWN;\n         LOCK(m_node.mempool->cs);\n         return IsRBFOptIn(tx, *m_node.mempool);\n     }"
      },
      {
        "sha": "51ad55df0b5141bd859d8bc5e08013d20f1caa14",
        "filename": "src/policy/rbf.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 11,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/16ef543ef18a3ff4016fb52b9996cbd1318fa623/src/policy/rbf.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/16ef543ef18a3ff4016fb52b9996cbd1318fa623/src/policy/rbf.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/rbf.cpp?ref=16ef543ef18a3ff4016fb52b9996cbd1318fa623",
        "patch": "@@ -15,17 +15,17 @@ RBFTransactionState IsRBFOptIn(const CTransaction& tx, const CTxMemPool& pool)\n \n     CTxMemPool::setEntries ancestors;\n \n-    // First check the transaction itself.\n-    if (SignalsOptInRBF(tx)) {\n-        return RBFTransactionState::REPLACEABLE_BIP125;\n-    }\n-\n     // If this transaction is not in our mempool, then we can't be sure\n     // we will know about all its inputs.\n     if (!pool.exists(GenTxid::Txid(tx.GetHash()))) {\n         return RBFTransactionState::UNKNOWN;\n     }\n \n+    // First check the transaction itself.\n+    if (SignalsOptInRBF(tx)) {\n+        return RBFTransactionState::REPLACEABLE_BIP125;\n+    }\n+\n     // If all the inputs have nSequence >= maxint-1, it still might be\n     // signaled for RBF if any unconfirmed parents have signaled.\n     uint64_t noLimit = std::numeric_limits<uint64_t>::max();\n@@ -41,12 +41,6 @@ RBFTransactionState IsRBFOptIn(const CTransaction& tx, const CTxMemPool& pool)\n     return RBFTransactionState::FINAL;\n }\n \n-RBFTransactionState IsRBFOptInEmptyMempool(const CTransaction& tx)\n-{\n-    // If we don't have a local mempool we can only check the transaction itself.\n-    return SignalsOptInRBF(tx) ? RBFTransactionState::REPLACEABLE_BIP125 : RBFTransactionState::UNKNOWN;\n-}\n-\n std::optional<std::string> GetEntriesForConflicts(const CTransaction& tx,\n                                                   CTxMemPool& pool,\n                                                   const CTxMemPool::setEntries& iters_conflicting,"
      },
      {
        "sha": "c1742184d9543c96ecc4d463153e44775b657df8",
        "filename": "src/policy/rbf.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/16ef543ef18a3ff4016fb52b9996cbd1318fa623/src/policy/rbf.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/16ef543ef18a3ff4016fb52b9996cbd1318fa623/src/policy/rbf.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/rbf.h?ref=16ef543ef18a3ff4016fb52b9996cbd1318fa623",
        "patch": "@@ -38,7 +38,6 @@ enum class RBFTransactionState {\n  * @return     The rbf state\n  */\n RBFTransactionState IsRBFOptIn(const CTransaction& tx, const CTxMemPool& pool) EXCLUSIVE_LOCKS_REQUIRED(pool.cs);\n-RBFTransactionState IsRBFOptInEmptyMempool(const CTransaction& tx);\n \n /** Get all descendants of iters_conflicting. Also enforce BIP125 Rule #5, \"The number of original\n  * transactions to be replaced and their descendant transactions which will be evicted from the"
      },
      {
        "sha": "f66cffb1f01d0ef6d5a80468e55608b57ba537d1",
        "filename": "test/functional/wallet_listtransactions.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/16ef543ef18a3ff4016fb52b9996cbd1318fa623/test/functional/wallet_listtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/16ef543ef18a3ff4016fb52b9996cbd1318fa623/test/functional/wallet_listtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listtransactions.py?ref=16ef543ef18a3ff4016fb52b9996cbd1318fa623",
        "patch": "@@ -198,7 +198,7 @@ def get_unconfirmed_utxo_entry(node, txid_to_match):\n         for n in self.nodes[0:2]:\n             assert_equal(n.gettransaction(txid_1)[\"bip125-replaceable\"], \"no\")\n             assert_equal(n.gettransaction(txid_2)[\"bip125-replaceable\"], \"no\")\n-            assert_equal(n.gettransaction(txid_3)[\"bip125-replaceable\"], \"yes\")\n+            assert_equal(n.gettransaction(txid_3)[\"bip125-replaceable\"], \"unknown\")\n             assert_equal(n.gettransaction(txid_3b)[\"bip125-replaceable\"], \"yes\")\n             assert_equal(n.gettransaction(txid_4)[\"bip125-replaceable\"], \"unknown\")\n \n@@ -207,7 +207,7 @@ def get_unconfirmed_utxo_entry(node, txid_to_match):\n             txs = {tx['txid']: tx['bip125-replaceable'] for tx in n.listsinceblock()['transactions']}\n             assert_equal(txs[txid_1], \"no\")\n             assert_equal(txs[txid_2], \"no\")\n-            assert_equal(txs[txid_3], \"yes\")\n+            assert_equal(txs[txid_3], \"unknown\")\n             assert_equal(txs[txid_3b], \"yes\")\n             assert_equal(txs[txid_4], \"unknown\")\n "
      }
    ]
  },
  {
    "sha": "59f1323e7650a403d077f3b770d899bd7f799e21",
    "node_id": "C_kwDOABII59oAKDU5ZjEzMjNlNzY1MGE0MDNkMDc3ZjNiNzcwZDg5OWJkN2Y3OTllMjE",
    "commit": {
      "author": {
        "name": "Michael Dietz",
        "email": "michael.dietz@waya.ai",
        "date": "2021-11-26T15:09:18Z"
      },
      "committer": {
        "name": "Michael Dietz",
        "email": "michael.dietz@waya.ai",
        "date": "2021-11-28T20:02:01Z"
      },
      "message": "policy: `getmempoolentry` return \"correct\" bip125-replaceable status\n\nNow RBF signaling adheres to BIP125 RBF (Rule 5) which states that the number\nof original transactions to be replaced and their descendant transactions\nmust not exceed `MAX_BIP125_REPLACEMENT_CANDIDATES`. Prior to this commit,\nthe bip125-replaceable status of a given transaction indicated whether the\ntransaction or _any_ of its unconfirmed ancestors opted-in to RBF, with no\nconsideration of this limitation.\n\nNote: the bip125-replaceable status that `getmempoolentry` returns is still\ninconsistent with what the mempool will treat as replaceable, as the mempool\ndoes not (yet) allow inherited signaling.",
      "tree": {
        "sha": "c8a7221d8d9e99d3b76b9721f901ed9af71a6e9f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c8a7221d8d9e99d3b76b9721f901ed9af71a6e9f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/59f1323e7650a403d077f3b770d899bd7f799e21",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEENKwpEUV32QrrIOeYc3/VzfHRRrkFAmGj4MYACgkQc3/VzfHR\nRrlEQBAAsmPZYuX5et9PtXqUE0N8Y/r3uj7guo2yfMR4GEPhRJXjnGcEduEExouh\nKaCBXoZR39yYIcfkWNrz/SHdhSXc3ENDq5/hv2sa6Tl+yPuJx3UTGbhVB8uEpVpT\nFhfJQSKrlaiALcGI4reA7429ZXQsGNrhIx6g+bI4vdSdRB6bNXnRr0FjjLI9XZxx\n6bT/wOFb73NrFpRcJeVSvBxJcOCepOu4w9xQiiyusKo6sniSW/MkrHnaYe7NWIXv\no6u9BDava6LOTAHD1OyibbCbygAXRre1+ii7kiOt+mcxb1S2eDnIQ6kJYJbfX7sH\nmXlL+q/Hlw1IM5j5BN+eQosaVeSMwO1Eei10vFVMsnFAms1S7UIcmjFYbGEolspy\nAyrmGyEsahW0/pW1V2fOl6w7g0j9C0HMUJc72/PCTPJ1A1lC+PHRN/Hn0YCWcEpI\nIQ7890Y+wuo9R8zrRkBY/YysI/4Ii9mhu6kzEfYaBfct8ojvCZ/ia554MRTu3V53\nX9sokcSB1Y9MR4XeGLG2YetwQfbpT+PoMCJSakX20Teh//HBitABT6UAneTb3iW0\nY25uyJki3Lvs8WG39v5X/WO1djsMnBGu7AmaUqZ3JyVu/Rl4awgFsBugNUqyhTyC\nUxYlH+trgvayRG/fV/7aDvvIU8iQxKbZBsl2acqthunWcF9e+us=\n=H9KB\n-----END PGP SIGNATURE-----",
        "payload": "tree c8a7221d8d9e99d3b76b9721f901ed9af71a6e9f\nparent 16ef543ef18a3ff4016fb52b9996cbd1318fa623\nauthor Michael Dietz <michael.dietz@waya.ai> 1637939358 -0600\ncommitter Michael Dietz <michael.dietz@waya.ai> 1638129721 -0600\n\npolicy: `getmempoolentry` return \"correct\" bip125-replaceable status\n\nNow RBF signaling adheres to BIP125 RBF (Rule 5) which states that the number\nof original transactions to be replaced and their descendant transactions\nmust not exceed `MAX_BIP125_REPLACEMENT_CANDIDATES`. Prior to this commit,\nthe bip125-replaceable status of a given transaction indicated whether the\ntransaction or _any_ of its unconfirmed ancestors opted-in to RBF, with no\nconsideration of this limitation.\n\nNote: the bip125-replaceable status that `getmempoolentry` returns is still\ninconsistent with what the mempool will treat as replaceable, as the mempool\ndoes not (yet) allow inherited signaling.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/59f1323e7650a403d077f3b770d899bd7f799e21",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/59f1323e7650a403d077f3b770d899bd7f799e21",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/59f1323e7650a403d077f3b770d899bd7f799e21/comments",
    "author": {
      "login": "mjdietzx",
      "id": 7217256,
      "node_id": "MDQ6VXNlcjcyMTcyNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7217256?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mjdietzx",
      "html_url": "https://github.com/mjdietzx",
      "followers_url": "https://api.github.com/users/mjdietzx/followers",
      "following_url": "https://api.github.com/users/mjdietzx/following{/other_user}",
      "gists_url": "https://api.github.com/users/mjdietzx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
      "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
      "repos_url": "https://api.github.com/users/mjdietzx/repos",
      "events_url": "https://api.github.com/users/mjdietzx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "mjdietzx",
      "id": 7217256,
      "node_id": "MDQ6VXNlcjcyMTcyNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7217256?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mjdietzx",
      "html_url": "https://github.com/mjdietzx",
      "followers_url": "https://api.github.com/users/mjdietzx/followers",
      "following_url": "https://api.github.com/users/mjdietzx/following{/other_user}",
      "gists_url": "https://api.github.com/users/mjdietzx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
      "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
      "repos_url": "https://api.github.com/users/mjdietzx/repos",
      "events_url": "https://api.github.com/users/mjdietzx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "16ef543ef18a3ff4016fb52b9996cbd1318fa623",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/16ef543ef18a3ff4016fb52b9996cbd1318fa623",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/16ef543ef18a3ff4016fb52b9996cbd1318fa623"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 15,
      "deletions": 11
    },
    "files": [
      {
        "sha": "604dd418861df63db7717bf06f2fa1e9a6e8c72d",
        "filename": "src/policy/rbf.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/59f1323e7650a403d077f3b770d899bd7f799e21/src/policy/rbf.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/59f1323e7650a403d077f3b770d899bd7f799e21/src/policy/rbf.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/rbf.cpp?ref=59f1323e7650a403d077f3b770d899bd7f799e21",
        "patch": "@@ -21,20 +21,21 @@ RBFTransactionState IsRBFOptIn(const CTransaction& tx, const CTxMemPool& pool)\n         return RBFTransactionState::UNKNOWN;\n     }\n \n-    // First check the transaction itself.\n-    if (SignalsOptInRBF(tx)) {\n+    CTxMemPoolEntry entry = *pool.mapTx.find(tx.GetHash());\n+    if (entry.GetCountWithDescendants() > MAX_BIP125_REPLACEMENT_CANDIDATES) {\n+        return RBFTransactionState::FINAL;\n+    } else if (SignalsOptInRBF(tx)) {\n         return RBFTransactionState::REPLACEABLE_BIP125;\n     }\n \n     // If all the inputs have nSequence >= maxint-1, it still might be\n     // signaled for RBF if any unconfirmed parents have signaled.\n     uint64_t noLimit = std::numeric_limits<uint64_t>::max();\n     std::string dummy;\n-    CTxMemPoolEntry entry = *pool.mapTx.find(tx.GetHash());\n     pool.CalculateMemPoolAncestors(entry, ancestors, noLimit, noLimit, noLimit, noLimit, dummy, false);\n \n     for (CTxMemPool::txiter it : ancestors) {\n-        if (SignalsOptInRBF(it->GetTx())) {\n+        if (SignalsOptInRBF(it->GetTx()) && it->GetCountWithDescendants() <= MAX_BIP125_REPLACEMENT_CANDIDATES) {\n             return RBFTransactionState::REPLACEABLE_BIP125;\n         }\n     }"
      },
      {
        "sha": "b15828774ecf1fd6aba5e953df74b6083b51efdb",
        "filename": "src/policy/rbf.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/59f1323e7650a403d077f3b770d899bd7f799e21/src/policy/rbf.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/59f1323e7650a403d077f3b770d899bd7f799e21/src/policy/rbf.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/rbf.h?ref=59f1323e7650a403d077f3b770d899bd7f799e21",
        "patch": "@@ -30,7 +30,10 @@ enum class RBFTransactionState {\n  * Determine whether an unconfirmed transaction is signaling opt-in to RBF\n  * according to BIP 125\n  * This involves checking sequence numbers of the transaction, as well\n- * as the sequence numbers of all in-mempool ancestors.\n+ * as the sequence numbers of all in-mempool ancestors for inherited signaling.\n+ * This also takes the number of original transactions to be replaced and their\n+ * descendant transactions into consideration as according to BIP125 RBF (Rule #5)\n+ * this must not exceed `MAX_BIP125_REPLACEMENT_CANDIDATES`.\n  *\n  * @param tx   The unconfirmed transaction\n  * @param pool The mempool, which may contain the tx"
      },
      {
        "sha": "8169bcdf7cb4032e10614f0559bcbd1fb4abb492",
        "filename": "test/functional/feature_rbf.py",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/59f1323e7650a403d077f3b770d899bd7f799e21/test/functional/feature_rbf.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/59f1323e7650a403d077f3b770d899bd7f799e21/test/functional/feature_rbf.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_rbf.py?ref=59f1323e7650a403d077f3b770d899bd7f799e21",
        "patch": "@@ -740,24 +740,24 @@ def test_reorged_inherited_signaling_and_descendant_limit(self):\n \n         # Create a chain the size of `MAX_REPLACEMENT_LIMIT` spending `joined_tx` - the BIP125 Rule #5 imposed limit\n         tx = None\n-        for _ in range(MAX_REPLACEMENT_LIMIT - 1):\n+        for i in range(MAX_REPLACEMENT_LIMIT - 1):\n             tx = self.wallet.send_self_transfer(\n                 from_node=self.nodes[0],\n                 utxo_to_spend=joined_utxo if tx is None else self.wallet.get_utxo(txid=tx['txid']),  # a straight line of descendants\n                 sequence=0xffffffff,\n                 fee_rate=Decimal('0.0001'),\n             )\n-            assert_equal(True, self.nodes[0].getmempoolentry(tx['txid'])['bip125-replaceable'])  # inherited\n+            assert_equal(i < MAX_REPLACEMENT_LIMIT - 2, self.nodes[0].getmempoolentry(tx['txid'])['bip125-replaceable'])  # inherited\n         # Now we have a chain of: `optin_parent_tx`, `joined_tx`, and 99 txs. The last tx in the loop exceeded `MAX_REPLACEMENT_LIMIT`\n \n         # Attempting to replace the opt-in parent transaction will now result in more than `MAX_REPLACEMENT_LIMIT`\n-        # conflicting txns being evicted from the mempool. However, it (and all of its descendants) are still signaling replaceability.\n-        # We would've expected that once `MAX_REPLACEMENT_LIMIT` is exceeded, the opt-in parent txn stops signaling\n+        # conflicting txns being evicted from the mempool. Therefore, it (and all of its descendants) no longer signal replaceability.\n+        # Since `MAX_REPLACEMENT_LIMIT` is exceeded, the opt-in parent txn stops signaling\n         # replaceability, along with _all_ of its descendants.\n         entry = self.nodes[0].getmempoolentry(optin_parent_tx[\"txid\"])\n         assert_greater_than(entry['descendantcount'], MAX_REPLACEMENT_LIMIT)\n-        assert_equal(True, entry['bip125-replaceable'])\n-        assert_equal(True, self.nodes[0].getmempoolentry(tx[\"txid\"])['bip125-replaceable'])\n+        assert_equal(False, entry['bip125-replaceable'])\n+        assert_equal(False, self.nodes[0].getmempoolentry(tx[\"txid\"])['bip125-replaceable'])\n \n         # Case in point, we can't actually replace `optin_parent_tx` once it has `MAX_REPLACEMENT_LIMIT` descendants\n         self.wallet.create_self_transfer("
      }
    ]
  },
  {
    "sha": "e54978f1e865dfc8d54ee14bfa2aa07a4e4a122f",
    "node_id": "C_kwDOABII59oAKGU1NDk3OGYxZTg2NWRmYzhkNTRlZTE0YmZhMmFhMDdhNGU0YTEyMmY",
    "commit": {
      "author": {
        "name": "Michael Dietz",
        "email": "michael.dietz@waya.ai",
        "date": "2021-11-26T22:32:12Z"
      },
      "committer": {
        "name": "Michael Dietz",
        "email": "michael.dietz@waya.ai",
        "date": "2021-11-28T20:49:57Z"
      },
      "message": "validation: `MemPoolAccept::PreChecks` allow rbf inherited signaling\n\nResolves issue #22209.\n\nThe bip125-replaceable status that `getmempoolentry` returns is now\nconsistent with what the mempool will treat as replaceable. Transactions signal\n\"correctly\" w.r.t. inherited signaling, and the mempool will accept a\nreplacement of any transaction signaling replaceability via RBF.",
      "tree": {
        "sha": "cf6d44e9fdad8b9a402d1f5c2502c0a318e013c5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cf6d44e9fdad8b9a402d1f5c2502c0a318e013c5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e54978f1e865dfc8d54ee14bfa2aa07a4e4a122f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEENKwpEUV32QrrIOeYc3/VzfHRRrkFAmGj64gACgkQc3/VzfHR\nRrlp0xAAlPTp024O6Tn8S90V/w8B/H+5vl2nFIZfQm3Az22Rov72gHsyXOrMrsk3\npCTxcsh0eIfFngwgTaRQ3D9ck6RRK2msDpYBmIVBRI6xcWnPAc/Dh/LlLah58sK/\n0WedNhwM5KVxkEXDJSQ03GP3rA3wbaZcog1vuM0ikQH5kKyx4hAiMmTEpTV5nNJt\nV0SdTIog8jfDQWSrs8Anzv7IMjPm7+yLzmzr8IXlLXoszC/R0vqLbKar4LQyqCEw\ndRduhwZQ2WJ4tK/QxiFv1pCIyCIWjlvsP3eNSGcBPWPPYwcSCBwn31AJW/CJ5ubE\nnUnNVn0REDnY8iqVcJPEqu240dOUR0Rqb1qIIfMlLCmK/t3VbNOc2fL3XhBXmrhQ\npFSjoDjbB9jfcn0X+mYb4deuEXRRHjn96yG05NC/fcoMzNCMppNtLzTzI7vcnlrK\n2erzJzYHgvzQivPn8dzQY0lOw+yXk9p7kKVJ1AhAotNxU2AsFOJfn62qywUQYXFu\nk2AQMPXomnNWO1MbFolojT/Mm7o9iTc4XqW5wkETOIsQAaxGi7Ga2BmQqeSTVm06\nG4zT8QaX85geoRQCfKLjlXDMElo4OPzgMIIyTOyYBzaPW/YGcLmWqXIRBvuYRLHI\nsHas3MtiXkD5ARki3M1yRT/Nr8Gr9mNGafgIeEptKj+hRoI2yLE=\n=owZD\n-----END PGP SIGNATURE-----",
        "payload": "tree cf6d44e9fdad8b9a402d1f5c2502c0a318e013c5\nparent 59f1323e7650a403d077f3b770d899bd7f799e21\nauthor Michael Dietz <michael.dietz@waya.ai> 1637965932 -0600\ncommitter Michael Dietz <michael.dietz@waya.ai> 1638132597 -0600\n\nvalidation: `MemPoolAccept::PreChecks` allow rbf inherited signaling\n\nResolves issue #22209.\n\nThe bip125-replaceable status that `getmempoolentry` returns is now\nconsistent with what the mempool will treat as replaceable. Transactions signal\n\"correctly\" w.r.t. inherited signaling, and the mempool will accept a\nreplacement of any transaction signaling replaceability via RBF.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e54978f1e865dfc8d54ee14bfa2aa07a4e4a122f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e54978f1e865dfc8d54ee14bfa2aa07a4e4a122f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e54978f1e865dfc8d54ee14bfa2aa07a4e4a122f/comments",
    "author": {
      "login": "mjdietzx",
      "id": 7217256,
      "node_id": "MDQ6VXNlcjcyMTcyNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7217256?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mjdietzx",
      "html_url": "https://github.com/mjdietzx",
      "followers_url": "https://api.github.com/users/mjdietzx/followers",
      "following_url": "https://api.github.com/users/mjdietzx/following{/other_user}",
      "gists_url": "https://api.github.com/users/mjdietzx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
      "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
      "repos_url": "https://api.github.com/users/mjdietzx/repos",
      "events_url": "https://api.github.com/users/mjdietzx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "mjdietzx",
      "id": 7217256,
      "node_id": "MDQ6VXNlcjcyMTcyNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7217256?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mjdietzx",
      "html_url": "https://github.com/mjdietzx",
      "followers_url": "https://api.github.com/users/mjdietzx/followers",
      "following_url": "https://api.github.com/users/mjdietzx/following{/other_user}",
      "gists_url": "https://api.github.com/users/mjdietzx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
      "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
      "repos_url": "https://api.github.com/users/mjdietzx/repos",
      "events_url": "https://api.github.com/users/mjdietzx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "59f1323e7650a403d077f3b770d899bd7f799e21",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/59f1323e7650a403d077f3b770d899bd7f799e21",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/59f1323e7650a403d077f3b770d899bd7f799e21"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 7,
      "deletions": 24
    },
    "files": [
      {
        "sha": "362e4bc0ac31d42577f9409ea2b73687b7b9eaad",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 9,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e54978f1e865dfc8d54ee14bfa2aa07a4e4a122f/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e54978f1e865dfc8d54ee14bfa2aa07a4e4a122f/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=e54978f1e865dfc8d54ee14bfa2aa07a4e4a122f",
        "patch": "@@ -659,15 +659,8 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n             }\n             if (!ws.m_conflicts.count(ptxConflicting->GetHash()))\n             {\n-                // Transactions that don't explicitly signal replaceability are\n-                // *not* replaceable with the current logic, even if one of their\n-                // unconfirmed ancestors signals replaceability. This diverges\n-                // from BIP125's inherited signaling description (see CVE-2021-31876).\n-                // Applications relying on first-seen mempool behavior should\n-                // check all unconfirmed ancestors; otherwise an opt-in ancestor\n-                // might be replaced, causing removal of this descendant.\n-                if (!SignalsOptInRBF(*ptxConflicting)) {\n-                    return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"txn-mempool-conflict\");\n+                if (IsRBFOptIn(*ptxConflicting, m_pool) != RBFTransactionState::REPLACEABLE_BIP125) {\n+                    return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, SignalsOptInRBF(*ptxConflicting) ? \"too many potential replacements\" : \"txn-mempool-conflict\");\n                 }\n \n                 ws.m_conflicts.insert(ptxConflicting->GetHash());"
      },
      {
        "sha": "f423439881d221119bbd99bb885ccc52390bf245",
        "filename": "test/functional/feature_rbf.py",
        "status": "modified",
        "additions": 5,
        "deletions": 15,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e54978f1e865dfc8d54ee14bfa2aa07a4e4a122f/test/functional/feature_rbf.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e54978f1e865dfc8d54ee14bfa2aa07a4e4a122f/test/functional/feature_rbf.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_rbf.py?ref=e54978f1e865dfc8d54ee14bfa2aa07a4e4a122f",
        "patch": "@@ -82,8 +82,8 @@ def run_test(self):\n         self.log.info(\"Running test prioritised transactions...\")\n         self.test_prioritised_transactions()\n \n-        self.log.info(\"Running test no inherited signaling...\")\n-        self.test_no_inherited_signaling()\n+        self.log.info(\"Running test inherited signaling...\")\n+        self.test_inherited_signaling()\n \n         self.log.info(\"Running test replacement relay fee...\")\n         self.test_replacement_relay_fee()\n@@ -570,7 +570,7 @@ def test_rpc(self):\n             assert_equal(json0[\"vin\"][0][\"sequence\"], 4294967293)\n             assert_equal(json1[\"vin\"][0][\"sequence\"], 4294967294)\n \n-    def test_no_inherited_signaling(self):\n+    def test_inherited_signaling(self):\n         confirmed_utxo = self.wallet.get_utxo()\n \n         # Create an explicitly opt-in parent transaction\n@@ -607,29 +607,19 @@ def test_no_inherited_signaling(self):\n         # Reports true due to inheritance\n         assert_equal(True, self.nodes[0].getmempoolentry(optout_child_tx['txid'])['bip125-replaceable'])\n \n-        self.log.info('Check that the (optout) child tx can not be replaced directly')\n+        self.log.info('Check that the (optout) child tx can be replaced directly')\n         replacement_child_tx = self.wallet.create_self_transfer(\n             from_node=self.nodes[0],\n             utxo_to_spend=parent_utxo,\n             sequence=0xffffffff,\n             fee_rate=Decimal('0.02'),\n-            mempool_valid=False,\n         )\n \n         # The transaction we are attempting to replace (`optout_child_tx`) doesn't signal RBF but its parent (`optin_parent_tx`) does.\n         # The replacement transaction (`replacement_child_tx`) should be able to replace `optout_child_tx` due to replaceability through inheritance.\n-        # Here we show that this isn't the case. See CVE-2021-31876 for further explanations.\n         assert_equal(True, self.nodes[0].getmempoolentry(optin_parent_tx['txid'])['bip125-replaceable'])  # explicitly signals replaceability\n         assert_equal(True, self.nodes[0].getmempoolentry(optout_child_tx['txid'])['bip125-replaceable'])  # reports `True` due to inherited signaling from `optin_parent_tx`\n-        assert_raises_rpc_error(-26, 'txn-mempool-conflict', self.nodes[0].sendrawtransaction, replacement_child_tx[\"hex\"], 0)\n-\n-        self.log.info('Check that the child tx can still be replaced (via a tx that also replaces the parent)')\n-        replacement_parent_tx = self.wallet.send_self_transfer(\n-            from_node=self.nodes[0],\n-            utxo_to_spend=confirmed_utxo,\n-            sequence=0xffffffff,\n-            fee_rate=Decimal('0.03'),\n-        )\n+        self.nodes[0].sendrawtransaction(replacement_child_tx[\"hex\"], 0)\n         # Check that child is removed and update wallet utxo state\n         assert_raises_rpc_error(-5, 'Transaction not in mempool', self.nodes[0].getmempoolentry, optout_child_tx['txid'])\n         self.wallet.get_utxo(txid=optout_child_tx['txid'])"
      }
    ]
  },
  {
    "sha": "67a3df7c7dd0eaf0dce307cbfdd43f48d8a24f5d",
    "node_id": "C_kwDOABII59oAKDY3YTNkZjdjN2RkMGVhZjBkY2UzMDdjYmZkZDQzZjQ4ZDhhMjRmNWQ",
    "commit": {
      "author": {
        "name": "Michael Dietz",
        "email": "michael.dietz@waya.ai",
        "date": "2021-11-27T21:23:28Z"
      },
      "committer": {
        "name": "Michael Dietz",
        "email": "michael.dietz@waya.ai",
        "date": "2021-11-28T20:50:16Z"
      },
      "message": "validation: `MemPoolAccept::PreChecks` count evictions accurately\n\nPreviously when enforcing BIP125 Rule 5, the number of actual descendants of a set\nof conflicts will be counted multiple times in some cases (ie if multiple conflicts\nshare a descendant). This was done to be conservative and avoid doing too much work.\nHowever, it seems preferable to be accurate as there is no major cost or performance\nbottleneck/tradeoff to do this exactly, and the code is simplified.",
      "tree": {
        "sha": "5e365e3fa8840f7831bd6069ce4325062fe393ac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5e365e3fa8840f7831bd6069ce4325062fe393ac"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/67a3df7c7dd0eaf0dce307cbfdd43f48d8a24f5d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEENKwpEUV32QrrIOeYc3/VzfHRRrkFAmGj64gACgkQc3/VzfHR\nRrn5ThAAs3MqzZlmZXWEoaBm9eJGjFh878/C3Pylo6Eg9D6cEGhsxSKbMJJDwy4f\nv6URT6eKBadaKXDy3fQrCajdk2gzwhcJ9xICZhk+XaaplGqfpufJeADE/bV29b1d\n21F4w+RPnjxy2bcgvv9xdWCz4Y4v0LhW93rGEaj1hy1WDW/TEly3vnofTCiB4WD7\nDL+94/8n+ZOyWxKFU0T25bklvD9VWGpnsubtoev3oFWfhZegNp1/Ta6juMPoLn1D\npYn7b9XGDmPHr6BWRPN1EpMSFLI6M5oAaCBMnhsSYc+mCgPxMjVSAXLHbSwJE0Yr\nGxX8q6a//fHb1WhImkpvM22A/uut5ml7O4z4my7kevNSptGKFcJqCDpkhTrOX/2N\n2/lJnzNBZ3FRm7lSmkHPAdZ7mAyQ0tli+1yKaAwQGDu9rD08QyN4vKlYBlfTr1IN\nUWPBa1Bqu918PQjN9s+uF1bcYKQ6XGR2Ks1HmJpl54jeATuZII4TnZDketE2rf/r\nNpWCwgFyd/OQthtzQO5eXbG78ruor7iPbRMfyq6Fbm4pGFQ7CgUncaM/bntqh6zA\ngwZrXI2KokvfBrEO9sbpOsSRbVJQEpKu67pwce7iSSWpdkuffaWDN4wNAgUpxQvY\nEIRnknuq3rlW2fV7Vxs/3hKIGO8p++2jf1uzkMkUURdQ7d9mOIU=\n=aYsd\n-----END PGP SIGNATURE-----",
        "payload": "tree 5e365e3fa8840f7831bd6069ce4325062fe393ac\nparent e54978f1e865dfc8d54ee14bfa2aa07a4e4a122f\nauthor Michael Dietz <michael.dietz@waya.ai> 1638048208 -0600\ncommitter Michael Dietz <michael.dietz@waya.ai> 1638132616 -0600\n\nvalidation: `MemPoolAccept::PreChecks` count evictions accurately\n\nPreviously when enforcing BIP125 Rule 5, the number of actual descendants of a set\nof conflicts will be counted multiple times in some cases (ie if multiple conflicts\nshare a descendant). This was done to be conservative and avoid doing too much work.\nHowever, it seems preferable to be accurate as there is no major cost or performance\nbottleneck/tradeoff to do this exactly, and the code is simplified.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67a3df7c7dd0eaf0dce307cbfdd43f48d8a24f5d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/67a3df7c7dd0eaf0dce307cbfdd43f48d8a24f5d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67a3df7c7dd0eaf0dce307cbfdd43f48d8a24f5d/comments",
    "author": {
      "login": "mjdietzx",
      "id": 7217256,
      "node_id": "MDQ6VXNlcjcyMTcyNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7217256?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mjdietzx",
      "html_url": "https://github.com/mjdietzx",
      "followers_url": "https://api.github.com/users/mjdietzx/followers",
      "following_url": "https://api.github.com/users/mjdietzx/following{/other_user}",
      "gists_url": "https://api.github.com/users/mjdietzx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
      "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
      "repos_url": "https://api.github.com/users/mjdietzx/repos",
      "events_url": "https://api.github.com/users/mjdietzx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "mjdietzx",
      "id": 7217256,
      "node_id": "MDQ6VXNlcjcyMTcyNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7217256?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mjdietzx",
      "html_url": "https://github.com/mjdietzx",
      "followers_url": "https://api.github.com/users/mjdietzx/followers",
      "following_url": "https://api.github.com/users/mjdietzx/following{/other_user}",
      "gists_url": "https://api.github.com/users/mjdietzx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
      "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
      "repos_url": "https://api.github.com/users/mjdietzx/repos",
      "events_url": "https://api.github.com/users/mjdietzx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e54978f1e865dfc8d54ee14bfa2aa07a4e4a122f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e54978f1e865dfc8d54ee14bfa2aa07a4e4a122f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e54978f1e865dfc8d54ee14bfa2aa07a4e4a122f"
      }
    ],
    "stats": {
      "total": 57,
      "additions": 16,
      "deletions": 41
    },
    "files": [
      {
        "sha": "7ae981666cdfa6bc69cddb5f6dccd4ef39b34e78",
        "filename": "src/policy/rbf.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 15,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67a3df7c7dd0eaf0dce307cbfdd43f48d8a24f5d/src/policy/rbf.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67a3df7c7dd0eaf0dce307cbfdd43f48d8a24f5d/src/policy/rbf.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/rbf.cpp?ref=67a3df7c7dd0eaf0dce307cbfdd43f48d8a24f5d",
        "patch": "@@ -48,25 +48,19 @@ std::optional<std::string> GetEntriesForConflicts(const CTransaction& tx,\n                                                   CTxMemPool::setEntries& all_conflicts)\n {\n     AssertLockHeld(pool.cs);\n-    const uint256 txid = tx.GetHash();\n-    uint64_t nConflictingCount = 0;\n-    for (const auto& mi : iters_conflicting) {\n-        nConflictingCount += mi->GetCountWithDescendants();\n-        // BIP125 Rule #5: don't consider replacing more than MAX_BIP125_REPLACEMENT_CANDIDATES\n-        // entries from the mempool. This potentially overestimates the number of actual\n-        // descendants (i.e. if multiple conflicts share a descendant, it will be counted multiple\n-        // times), but we just want to be conservative to avoid doing too much work.\n-        if (nConflictingCount > MAX_BIP125_REPLACEMENT_CANDIDATES) {\n-            return strprintf(\"rejecting replacement %s; too many potential replacements (%d > %d)\\n\",\n-                             txid.ToString(),\n-                             nConflictingCount,\n-                             MAX_BIP125_REPLACEMENT_CANDIDATES);\n-        }\n-    }\n+\n     // Calculate the set of all transactions that would have to be evicted.\n     for (CTxMemPool::txiter it : iters_conflicting) {\n         pool.CalculateDescendants(it, all_conflicts);\n     }\n+\n+    // BIP125 Rule #5: don't consider replacing more than MAX_BIP125_REPLACEMENT_CANDIDATES entries from the mempool.\n+    if (all_conflicts.size() > MAX_BIP125_REPLACEMENT_CANDIDATES) {\n+        return strprintf(\"rejecting replacement %s; too many potential replacements (%d > %d)\\n\",\n+                         tx.GetHash().ToString(),\n+                         all_conflicts.size(),\n+                         MAX_BIP125_REPLACEMENT_CANDIDATES);\n+    }\n     return std::nullopt;\n }\n "
      },
      {
        "sha": "45c9e0205fdcb0145baf0eaa42ecf5c97f47faad",
        "filename": "test/functional/feature_rbf.py",
        "status": "modified",
        "additions": 7,
        "deletions": 26,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67a3df7c7dd0eaf0dce307cbfdd43f48d8a24f5d/test/functional/feature_rbf.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67a3df7c7dd0eaf0dce307cbfdd43f48d8a24f5d/test/functional/feature_rbf.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_rbf.py?ref=67a3df7c7dd0eaf0dce307cbfdd43f48d8a24f5d",
        "patch": "@@ -88,8 +88,8 @@ def run_test(self):\n         self.log.info(\"Running test replacement relay fee...\")\n         self.test_replacement_relay_fee()\n \n-        self.log.info(\"Running test prechecks overestimates replacements...\")\n-        self.test_prechecks_overestimates_replacements()\n+        self.log.info(\"Running test prechecks does not overestimate replacements...\")\n+        self.test_prechecks_does_not_overestimate_replacements()\n \n         self.log.info(\"Running test reorged inherited signaling and descendant limit...\")\n         self.test_reorged_inherited_signaling_and_descendant_limit()\n@@ -632,7 +632,7 @@ def test_replacement_relay_fee(self):\n         tx.vout[0].nValue -= 1\n         assert_raises_rpc_error(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, tx.serialize().hex())\n \n-    def test_prechecks_overestimates_replacements(self):\n+    def test_prechecks_does_not_overestimate_replacements(self):\n         confirmed_utxos = [self.wallet.get_utxo(), self.wallet.get_utxo()]\n \n         # Two opt-in parent transactions\n@@ -662,38 +662,19 @@ def test_prechecks_overestimates_replacements(self):\n                 fee_rate=Decimal('0.0001'),\n             )\n \n-        # Even though there are well under `MAX_REPLACEMENT_LIMIT` transactions that will be evicted due to this replacement,\n-        # in this case we still reject the replacement attempt because of the way `MemPoolAccept::PreChecks` double-counts descendants.\n-        # Each `confirmed_utxo` has the exact same descendants, but they are each counted twice!\n+        # There are well under `MAX_REPLACEMENT_LIMIT` transactions that will be evicted due to this replacement\n+        # because `confirmed_utxo` has the exact same descendants, so we ensure they are not counted twice!\n+        # Makes sure `MemPoolAccept::PreChecks` doesn't double-counts descendants.\n         replacement_attempt_tx_hex = self.create_double_input_self_transfer(confirmed_utxos, Decimal('0.01'))\n-        assert_raises_rpc_error(-26, 'too many potential replacements', self.nodes[0].sendrawtransaction, replacement_attempt_tx_hex, 0)\n-\n-        # However, we can still craft a transaction that replaces the entire descendant chain by only replacing one of the `parent_txs`\n-        replacement_tx = self.wallet.send_self_transfer(\n-            from_node=self.nodes[0],\n-            utxo_to_spend=confirmed_utxos[0],  # replace the opt-in parent transaction\n-            sequence=BIP125_SEQUENCE_NUMBER,\n-            fee_rate=Decimal('0.01'),\n-        )\n-        mempool = self.nodes[0].getrawmempool()\n-        assert replacement_tx['txid'] in mempool\n-        assert parent_txs[0]['txid'] not in mempool\n-        assert parent_txs[1]['txid'] in mempool\n-        assert tx['txid'] not in mempool\n-\n-        # And funny enough, _now_ we can successfully broadcast that same `replacement_tx_hex` which just failed with the\n-        # \"too many potential replacements\" error. It was just a little tricky to get around `MemPoolAccept::PreChecks`\n-        # double-counting evictions.\n         replacement_attempt_tx_txid = self.nodes[0].sendrawtransaction(replacement_attempt_tx_hex, 0)\n         mempool = self.nodes[0].getrawmempool()\n         assert replacement_attempt_tx_txid in mempool\n-        assert replacement_tx['txid'] not in mempool\n+        assert tx['txid'] not in mempool\n         for parent_tx in parent_txs:\n             assert parent_tx not in mempool\n \n         # clean up all evicted utxos / update wallet utxo state\n         self.wallet.get_utxo(txid=tx['txid'])\n-        self.wallet.get_utxo(txid=replacement_tx['txid'])\n \n     def test_reorged_inherited_signaling_and_descendant_limit(self):\n         confirmed_utxos = [self.wallet.get_utxo(), self.wallet.get_utxo()]"
      }
    ]
  },
  {
    "sha": "a672b3151b19737b4a19fcecd238937234121091",
    "node_id": "C_kwDOABII59oAKGE2NzJiMzE1MWIxOTczN2I0YTE5ZmNlY2QyMzg5MzcyMzQxMjEwOTE",
    "commit": {
      "author": {
        "name": "Michael Dietz",
        "email": "michael.dietz@waya.ai",
        "date": "2021-11-28T20:42:03Z"
      },
      "committer": {
        "name": "Michael Dietz",
        "email": "michael.dietz@waya.ai",
        "date": "2021-11-28T20:50:17Z"
      },
      "message": "doc: add release notes for rbf improvements",
      "tree": {
        "sha": "f3e076190a10039e897b881f78c6413c28f17e3a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f3e076190a10039e897b881f78c6413c28f17e3a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a672b3151b19737b4a19fcecd238937234121091",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEENKwpEUV32QrrIOeYc3/VzfHRRrkFAmGj64kACgkQc3/VzfHR\nRrkenw//f+V7CswMyM7Ju785KD/wnyUSlAzBYdq6gIBHyhe7DO1bRK1M3J49MpHk\n5ZSaz9ojOgUSbLgivIEi8ug4m8OF8EwtMWCqz84kBMQM5/rlLf+pSOnW7SQEZols\nYgR1ArmrFWHe3drACdz2UfpKYYYwu3O9bIDqOWPjbKXUNX1VXnnVsO3h9eGxMO2O\nxNUqdiiKr2o9FHu46FXvCb11oWWapJkX+Tqx9vVwUQqoz7JQA3gH2OsKVdZP+SW2\n2ygphB0LlhdA1dR2mSogyrv0TaPumVsCSt25J5982vzLcgS9z13UUMw8hpJnpiLM\n9XuTJ1fsXYBZIYZEDwdSx2dyFDs5bq8H7dfocRU/tv1lxjOFrwPF6AfaMm4cN/KI\n9pdTNQ1mUa7fJRt1IWmOqoPOdF7Xk1ROGq5zy7CUmr6/h4mrzluuRzXOekUXkPDM\npFQaCFMmueSPM/yhn5Gg8b7MLW4JMg0IMiRJVNiUP+o9U6maFgGVM7Da67nxQG+U\nqkGxKZrQDexk3wreiZyQN9h8jqPM9eCzK/L3WJYro9Edvd85DDQCtGLdwyBx3yL7\nWpt/nwwM3nSVXeWtEBWeOTZNhnt6kroP4tFmKGz1XYOVb98B/S3aTrQV5UFufxJz\nq7EWXDogDXu5QF9lIlQLSVnDOY+w+3vUaP0U1nhlor3i7mqi8Lk=\n=RQoj\n-----END PGP SIGNATURE-----",
        "payload": "tree f3e076190a10039e897b881f78c6413c28f17e3a\nparent 67a3df7c7dd0eaf0dce307cbfdd43f48d8a24f5d\nauthor Michael Dietz <michael.dietz@waya.ai> 1638132123 -0600\ncommitter Michael Dietz <michael.dietz@waya.ai> 1638132617 -0600\n\ndoc: add release notes for rbf improvements\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a672b3151b19737b4a19fcecd238937234121091",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a672b3151b19737b4a19fcecd238937234121091",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a672b3151b19737b4a19fcecd238937234121091/comments",
    "author": {
      "login": "mjdietzx",
      "id": 7217256,
      "node_id": "MDQ6VXNlcjcyMTcyNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7217256?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mjdietzx",
      "html_url": "https://github.com/mjdietzx",
      "followers_url": "https://api.github.com/users/mjdietzx/followers",
      "following_url": "https://api.github.com/users/mjdietzx/following{/other_user}",
      "gists_url": "https://api.github.com/users/mjdietzx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
      "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
      "repos_url": "https://api.github.com/users/mjdietzx/repos",
      "events_url": "https://api.github.com/users/mjdietzx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "mjdietzx",
      "id": 7217256,
      "node_id": "MDQ6VXNlcjcyMTcyNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7217256?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mjdietzx",
      "html_url": "https://github.com/mjdietzx",
      "followers_url": "https://api.github.com/users/mjdietzx/followers",
      "following_url": "https://api.github.com/users/mjdietzx/following{/other_user}",
      "gists_url": "https://api.github.com/users/mjdietzx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
      "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
      "repos_url": "https://api.github.com/users/mjdietzx/repos",
      "events_url": "https://api.github.com/users/mjdietzx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "67a3df7c7dd0eaf0dce307cbfdd43f48d8a24f5d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67a3df7c7dd0eaf0dce307cbfdd43f48d8a24f5d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/67a3df7c7dd0eaf0dce307cbfdd43f48d8a24f5d"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 17,
      "deletions": 0
    },
    "files": [
      {
        "sha": "6bb50d1e74f3e14252c0a7eb6e2b33898763c0e5",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a672b3151b19737b4a19fcecd238937234121091/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a672b3151b19737b4a19fcecd238937234121091/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=a672b3151b19737b4a19fcecd238937234121091",
        "patch": "@@ -54,6 +54,12 @@ unsupported systems.\n Notable changes\n ===============\n \n+Mempool policy changed such that now RBF inherited signaling is supported (transactions\n+that don't explicitly signal replaceability are replaceable for as long as any one\n+of their ancestors signals replaceability and remains unconfirmed). Previously\n+the mempool only accepted replacements for transactions that themselves opted-in\n+to RBF. See `getmempoolentry` in the \"Updated RPCs\" section below for more details. (#22698)\n+\n P2P and network changes\n -----------------------\n \n@@ -99,6 +105,17 @@ Updated RPCs\n   causes the lock to be written persistently to the wallet database. This\n   allows UTXOs to remain locked even after node restarts or crashes. (#23065)\n \n+- `getmempoolentry` now returns the \"correct\" bip125-replaceable status,\n+  resolving issue #22209. This status is now consistent with what the mempool\n+  treats as replaceable. Before, `getmempoolentry` would show replaceability due\n+  to inherited signaling, but the mempool only accepted replacements for\n+  transactions that themselves opted-in to RBF (ie the mempool did not support\n+  inherited signaling). Some other discrepancies b/w how `getmempoolentry`\n+  signals, and what the mempool accepts were also made consistent. As well as\n+  more closely adhering to the rules outlined in BIP125 (specifically Rule #5).\n+  The result is increased confidence that the bip125-replaceable status returned\n+  by `getmempoolentry` is accurate. (#22698)\n+\n New RPCs\n --------\n "
      }
    ]
  }
]