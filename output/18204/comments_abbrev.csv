DrahtBot,2020-02-25 02:20:47,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #16710 (build: Enable -Wsuggest-override if available by hebasto)\n* #16116 (Avoid unnecessary signing provider copies on ",https://github.com/bitcoin/bitcoin/pull/18204#issuecomment-590647940,590647940,
achow101,2020-02-25 20:10:07,Fixed the assertion. Travis seems to be seeing a memory leak but I'm having trouble figuring out where that is.,https://github.com/bitcoin/bitcoin/pull/18204#issuecomment-591045213,591045213,
achow101,2020-02-26 01:17:15,"I've reworked how the caching works to get rid of the `global_pos` and `internal_pos` stuff.\n\nInstead of having `ExpandHelper` go through the cache and find the pubkeys, we pass the cache into the `PubkeyProvider`s and let them do the cache lookups. Since really only `BIP32PubkeyProvider` uses the cache, we can get rid of the position stuff by having it store only xpubs in a map. So for all de",https://github.com/bitcoin/bitcoin/pull/18204#issuecomment-591184682,591184682,
achow101,2020-02-26 17:59:24,"I've squashed the middle three commits together (the ones that just changed to using DescriptorCache) so that the signature of `Expand` and `ExpandHelper` don't change so many times.\n\n> Switching from pubkeys to xpubs plus origin info increases the cache size by ~40 bytes per key, or 240 KB for a typical descriptor wallet with change & receive for three output types, with the first 1000 keys e",https://github.com/bitcoin/bitcoin/pull/18204#issuecomment-591559861,591559861,
instagibbs,2020-02-27 17:31:02,"Unable to ""review"" at the moment due to github issues, but https://github.com/bitcoin/bitcoin/pull/18204/commits/d90075e586b2a4b1fbc1c511d662c0b918023595 looks logically correct (will swing back here when back up and drop comments)",https://github.com/bitcoin/bitcoin/pull/18204#issuecomment-592081988,592081988,
achow101,2020-02-27 18:26:48,"> Can you move 568a90f and 23aef19 from #16528 to here? 568a90f could use a test to show that nothing is added to cache.\n\nDone. Also squashed a bit and added tests.",https://github.com/bitcoin/bitcoin/pull/18204#issuecomment-592107250,592107250,
Sjors,2020-02-28 11:58:30,Travis and AppVeyor didn't run. Probably because of the Github problems yesterday. It might help to force push some trivial change.,https://github.com/bitcoin/bitcoin/pull/18204#issuecomment-592482741,592482741,
achow101,2020-02-28 21:59:49,I've added another commit to internally cache that parent xpub inside of `BIP32PubkeyProvider` so the `Expand` doesn't constantly re-derive the same xpub.,https://github.com/bitcoin/bitcoin/pull/18204#issuecomment-592748507,592748507,
Sjors,2020-03-03 19:16:36,Code review re-ACK 1373d9d885fdc671a7538f9ea6410582bcaee1d5,https://github.com/bitcoin/bitcoin/pull/18204#issuecomment-594120140,594120140,
instagibbs,2020-03-03 21:27:20,"The logic seems correct, but only once I did my own little refactorings to make it more understandable what everything was doing: https://github.com/instagibbs/bitcoin/commit/9c169165cbfb1565c28b8969733351e5611db6ac\n\nI'm willing to ACK the logic as-is, but I find it extremely opaque and would immediately open up a PR with these changes.",https://github.com/bitcoin/bitcoin/pull/18204#issuecomment-594177852,594177852,
achow101,2020-03-03 22:53:18,I've pulled in @instagibbs suggested changes with only one small modification.,https://github.com/bitcoin/bitcoin/pull/18204#issuecomment-594213072,594213072,
instagibbs,2020-03-04 00:32:46,"code review ACK https://github.com/bitcoin/bitcoin/pull/18204/commits/1c20f259cf8f406254989d4ecca1c52d858209ae\n\nthanks for pulling in most the suggestions!\n",https://github.com/bitcoin/bitcoin/pull/18204#issuecomment-594243308,594243308,
achow101,2020-03-04 21:03:37,"I've changed the cache back to using position, but this time with `unordered_map`s instead of a vector. This requires using two maps, one for the derived keys, and one for the parent xpubs.\n\nTo facilitate this, `PubkeyProvider`s will now store their position in the descriptor. This position is established during parsing.\n\nAlso dropped the commit for `GetNotCached`.",https://github.com/bitcoin/bitcoin/pull/18204#issuecomment-594839723,594839723,
instagibbs,2020-03-05 18:23:53,code review re-ACK https://github.com/bitcoin/bitcoin/pull/18204/commits/d7b241109f74b3c1c407929930e7d035cdcf60c9,https://github.com/bitcoin/bitcoin/pull/18204#issuecomment-595376100,595376100,
Sjors,2020-03-07 14:54:08,re-ACK 31304fc4f8f0d7870794d8c675831d8c73c959cb,https://github.com/bitcoin/bitcoin/pull/18204#issuecomment-596096561,596096561,
instagibbs,2020-03-09 20:52:27,code review re-re-ACK https://github.com/bitcoin/bitcoin/pull/18204/commits/09e25071f40c564af08a1386c39c4f2d8eb484b6,https://github.com/bitcoin/bitcoin/pull/18204#issuecomment-596773416,596773416,
Sjors,2020-02-25 10:08:02,`global_pos` and `internal_pos` could use documentation. Would it make sense to cache all pubkeys (for a given position) in one operation?,https://github.com/bitcoin/bitcoin/pull/18204#discussion_r383778842,383778842,src/script/descriptor.h
instagibbs,2020-02-25 13:54:47,nit: it's named `global_pos` in the definition which lines up with `GetCachedPubKey`,https://github.com/bitcoin/bitcoin/pull/18204#discussion_r383891841,383891841,src/script/descriptor.h
instagibbs,2020-02-25 13:55:10,this needs a description as well,https://github.com/bitcoin/bitcoin/pull/18204#discussion_r383892053,383892053,src/script/descriptor.h
Sjors,2020-02-26 14:40:50,"We should compare path elements first (`max(a.path.size(), b.path.size())`) and size after.\n\nSince `std::map<KeyOriginInfo, CExtPubKey> m_xpubs` is serialised, I'd prefer to tidy up the ordering. Whether this matters depends on how you rebase https://github.com/bitcoin/bitcoin/pull/16528/commits/35bb585b28e5de43553bfd52d2257db9400199be, if it remains a blob or becomes multiple entries keyed by",https://github.com/bitcoin/bitcoin/pull/18204#discussion_r384534021,384534021,src/script/keyorigin.h
Sjors,2020-02-26 15:09:57,nit: maybe rename `spks_cached1` to `spks1_from_cache`,https://github.com/bitcoin/bitcoin/pull/18204#discussion_r384554045,384554045,src/test/descriptor_tests.cpp
Sjors,2020-02-26 15:12:26,"`but use the cache generated while expanding i. This cache won't have the pubkeys for i + 1, but`",https://github.com/bitcoin/bitcoin/pull/18204#discussion_r384555695,384555695,src/test/descriptor_tests.cpp
Sjors,2020-02-26 15:19:36,"`xpub or xpriv`, unless you neuter it at the end and have it return a `CExtPubKey&`",https://github.com/bitcoin/bitcoin/pull/18204#discussion_r384560821,384560821,src/script/descriptor.cpp
Sjors,2020-02-26 15:45:35,Is it worth skipping the parent `write` once it's done?,https://github.com/bitcoin/bitcoin/pull/18204#discussion_r384579514,384579514,src/script/descriptor.cpp
achow101,2020-02-26 17:41:37,"A lookup is just as expensive as an insertion, so I don't think so.",https://github.com/bitcoin/bitcoin/pull/18204#discussion_r384655169,384655169,src/script/descriptor.cpp
achow101,2020-02-26 17:56:20,Done,https://github.com/bitcoin/bitcoin/pull/18204#discussion_r384663400,384663400,src/script/keyorigin.h
achow101,2020-02-26 17:56:24,Done,https://github.com/bitcoin/bitcoin/pull/18204#discussion_r384663446,384663446,src/test/descriptor_tests.cpp
achow101,2020-02-26 17:56:31,Done,https://github.com/bitcoin/bitcoin/pull/18204#discussion_r384663507,384663507,src/test/descriptor_tests.cpp
achow101,2020-02-26 17:56:41,Changed to xprv,https://github.com/bitcoin/bitcoin/pull/18204#discussion_r384663587,384663587,src/script/descriptor.cpp
promag,2020-02-26 22:39:04,Can be removed.,https://github.com/bitcoin/bitcoin/pull/18204#discussion_r384811070,384811070,src/script/keyorigin.h
promag,2020-02-26 22:43:17,Will this return false in a follow up change?,https://github.com/bitcoin/bitcoin/pull/18204#discussion_r384812839,384812839,src/script/descriptor.h
achow101,2020-02-27 02:05:12,Done,https://github.com/bitcoin/bitcoin/pull/18204#discussion_r384875316,384875316,src/script/keyorigin.h
achow101,2020-02-27 02:05:20,No. I've made it `void`,https://github.com/bitcoin/bitcoin/pull/18204#discussion_r384875354,384875354,src/script/descriptor.h
promag,2020-02-27 08:57:05,Does it make sense to `assert(m_xpubs.count(origin_info) == 0)`?,https://github.com/bitcoin/bitcoin/pull/18204#discussion_r384987867,384987867,src/script/descriptor.cpp
Sjors,2020-02-27 13:08:52,Not at the moment: https://github.com/bitcoin/bitcoin/pull/18204#discussion_r384655169,https://github.com/bitcoin/bitcoin/pull/18204#discussion_r385114549,385114549,src/script/descriptor.cpp
Sjors,2020-02-27 13:41:22,"This `CExtPubKey` juggling still confuses me :-)\n\nI added some comments for my own sanity. Will probably need to read this again later.\n\n```\nCExtPubKey extkey_out = m_extkey;    // to hold extended key for *key (m/.../k)\nCExtPubKey extkey_parent = m_extkey; // to hold extended key for the parent of *key (m/.../k/pos)\n```\n",https://github.com/bitcoin/bitcoin/pull/18204#discussion_r385131791,385131791,src/script/descriptor.cpp
Sjors,2020-02-27 13:46:43,"```\n// Check if the parent at m/.../k is cached\n```",https://github.com/bitcoin/bitcoin/pull/18204#discussion_r385134821,385134821,src/script/descriptor.cpp
Sjors,2020-02-27 13:48:10,"```\n// Get the extended private key at m/.../k\n```",https://github.com/bitcoin/bitcoin/pull/18204#discussion_r385135647,385135647,src/script/descriptor.cpp
Sjors,2020-02-27 13:50:53,"```\n// Get the extended public key at m/.../k/i or m/.../k/i'\n```",https://github.com/bitcoin/bitcoin/pull/18204#discussion_r385137236,385137236,src/script/descriptor.cpp
Sjors,2020-02-27 13:54:23,"(one line up)\n```\n// Set parent to the extended public key at m/.../k\n```",https://github.com/bitcoin/bitcoin/pull/18204#discussion_r385139315,385139315,src/script/descriptor.cpp
Sjors,2020-02-27 13:56:18,"(above)\n```\n// If this is not a ranged descriptor, we return the public key at `m/.../k`, otherwise at `m/.../k/i\n```",https://github.com/bitcoin/bitcoin/pull/18204#discussion_r385140390,385140390,src/script/descriptor.cpp
instagibbs,2020-02-27 14:00:07,much clearer now :+1: ,https://github.com/bitcoin/bitcoin/pull/18204#discussion_r385142659,385142659,src/script/descriptor.h
instagibbs,2020-02-27 14:18:43,I made this complaint long ago but I'd really prefer some constant for `4` being littered everywhere.,https://github.com/bitcoin/bitcoin/pull/18204#discussion_r385154331,385154331,src/script/keyorigin.h
instagibbs,2020-02-27 14:21:08,"future work: Noticed there are no unit tests for `KeyOriginInfo`, would be nice to have",https://github.com/bitcoin/bitcoin/pull/18204#discussion_r385155902,385155902,src/script/keyorigin.h
instagibbs,2020-02-27 14:29:12,A few words on the new optional args?,https://github.com/bitcoin/bitcoin/pull/18204#discussion_r385161281,385161281,src/script/descriptor.cpp
instagibbs,2020-02-27 15:20:43,any? The whole path has to be unhardened right?,https://github.com/bitcoin/bitcoin/pull/18204#discussion_r385180274,385180274,src/script/descriptor.cpp
achow101,2020-02-27 18:21:21,"Just the last range step. The range derivation type has to be unhardened or none. This means it either ends with `*` or with an absolute path. There can be hardened steps in between, and even have the last step be hardened if it is not a range.\n\nThis thing about a non-ranged path is kind of a hack to make sure that we cache the pubkey for descriptors that have keys like `xprv../1'`. We have so",https://github.com/bitcoin/bitcoin/pull/18204#discussion_r385287770,385287770,src/script/descriptor.cpp
achow101,2020-02-27 18:25:30,Added some comments.,https://github.com/bitcoin/bitcoin/pull/18204#discussion_r385290029,385290029,src/script/descriptor.cpp
promag,2020-02-27 18:30:33,"Performance penalty aside, makes sense to assert it's the same xpub if already cached?",https://github.com/bitcoin/bitcoin/pull/18204#discussion_r385292764,385292764,src/script/descriptor.cpp
Sjors,2020-02-27 18:42:54,"Just to clarify, there's no test for this AFAIK, but `xpriv/../*/...` isn't allowed, right?",https://github.com/bitcoin/bitcoin/pull/18204#discussion_r385299363,385299363,src/script/descriptor.cpp
instagibbs,2020-02-27 19:00:07,"I see, so we don't do any intermediate caching if we can always generate from ""root"" anyways with pubkey.",https://github.com/bitcoin/bitcoin/pull/18204#discussion_r385308764,385308764,src/script/descriptor.cpp
achow101,2020-02-27 19:05:06,"> Just to clarify, there's no test for this AFAIK, but `xpriv/../*/...` isn't allowed, right?\n\nYes. Maybe we should add a `CheckUnparsable` for that.\n\n> I see, so we don't do any intermediate caching if we can always generate from ""root"" anyways with pubkey.\n\nActually no. We always cache if there are xpubs. If the descriptor has just an xpub, e.g. `wpkh(xpub...)`, we actually would cac",https://github.com/bitcoin/bitcoin/pull/18204#discussion_r385311318,385311318,src/script/descriptor.cpp
instagibbs,2020-02-27 19:09:30,I think I'm agreeing with you here.,https://github.com/bitcoin/bitcoin/pull/18204#discussion_r385313609,385313609,src/script/descriptor.cpp
Sjors,2020-02-28 12:37:13,"```\n// For a ranged descriptor, add derivation step to path, otherwise return public key at current depth.\n```",https://github.com/bitcoin/bitcoin/pull/18204#discussion_r385672434,385672434,src/script/descriptor.cpp
Sjors,2020-02-28 12:47:05,nit: assert `Derive()` succeeds,https://github.com/bitcoin/bitcoin/pull/18204#discussion_r385676713,385676713,src/script/descriptor.cpp
Sjors,2020-02-28 12:47:21,nit: assert `Derive()` succeeds,https://github.com/bitcoin/bitcoin/pull/18204#discussion_r385676836,385676836,src/script/descriptor.cpp
Sjors,2020-02-28 12:52:48,"You don't need this temporary variable anymore, suggest renaming `info` to `info_out` instead. ",https://github.com/bitcoin/bitcoin/pull/18204#discussion_r385679014,385679014,src/script/descriptor.cpp
Sjors,2020-02-28 13:04:17,"`CPubKey* key` can be a reference now, and you can drop `if(key)` in a few places. The `nullptr` was only used for caching individual pubkeys.",https://github.com/bitcoin/bitcoin/pull/18204#discussion_r385683704,385683704,src/script/descriptor.cpp
achow101,2020-02-28 18:21:11,We want to avoid modifying `info` in case later steps fail.,https://github.com/bitcoin/bitcoin/pull/18204#discussion_r385849377,385849377,src/script/descriptor.cpp
instagibbs,2020-02-28 18:26:03,might be worth a comment(took me a bit to convince myself what it was doing),https://github.com/bitcoin/bitcoin/pull/18204#discussion_r385851709,385851709,src/script/descriptor.cpp
Sjors,2020-02-28 18:51:57,"Then we need another test, because everything passed when I changed that.",https://github.com/bitcoin/bitcoin/pull/18204#discussion_r385863672,385863672,src/script/descriptor.cpp
achow101,2020-02-28 19:34:46,I added a comment. I don't think a test is useful. Everything still passes because `ExpandHelper` does the same thing. Just keeping it for belt-and-suspenders.,https://github.com/bitcoin/bitcoin/pull/18204#discussion_r385883261,385883261,src/script/descriptor.cpp
achow101,2020-02-28 19:35:12,Done here and elsewhere.,https://github.com/bitcoin/bitcoin/pull/18204#discussion_r385883435,385883435,src/script/descriptor.cpp
achow101,2020-02-28 19:35:19,Added,https://github.com/bitcoin/bitcoin/pull/18204#discussion_r385883484,385883484,src/script/descriptor.cpp
achow101,2020-02-28 19:35:27,Done,https://github.com/bitcoin/bitcoin/pull/18204#discussion_r385883549,385883549,src/script/descriptor.cpp
Sjors,2020-02-29 08:21:22,"Thanks for adding the asserts, but now they violate ""Assertions should not have side-effects"": https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#general-c",https://github.com/bitcoin/bitcoin/pull/18204#discussion_r386011800,386011800,src/script/descriptor.cpp
Sjors,2020-02-29 08:35:43,"In 2f04cc4c50a9ef94f6e67d97ea552e7b6e03cec7 : maybe change to `m_derive != DeriveType:: UNHARDENED` for readability, since there's no point in calling `GetCachedExtPubKey(parent_info` for `DeriveType:: NONE`, because `parent_info == info_out` in that case.",https://github.com/bitcoin/bitcoin/pull/18204#discussion_r386012519,386012519,src/script/descriptor.cpp
Sjors,2020-02-29 08:37:11,With my previous suggestion this `assert` would go away.,https://github.com/bitcoin/bitcoin/pull/18204#discussion_r386012626,386012626,src/script/descriptor.cpp
Sjors,2020-02-29 16:43:50,The exclusive use of either `read_cache` or `write_cache` trips me up. A reminder like `assert(!(read_cache && write_cache));` may be helpful.,https://github.com/bitcoin/bitcoin/pull/18204#discussion_r386039834,386039834,src/script/descriptor.cpp
Sjors,2020-02-29 16:54:31,"The `skip_unhardened` argument of `CacheExtPubKey` is a nett confusion increase for me, try:\n```cpp\n// Cache parent instead of child if there is any unhardened derivation\nif (m_derive != DeriveType::HARDENED) {\n  write_cache->CacheExtPubKey(parent_info, parent);\n} else if (info_out.path.size() > 0) {\n  write_cache->CacheExtPubKey(info_out, extkey);\n}\n```",https://github.com/bitcoin/bitcoin/pull/18204#discussion_r386040461,386040461,src/script/descriptor.cpp
Sjors,2020-02-29 17:13:00,"```\n// If we don't have a read_cache, we have a write_cache\n```",https://github.com/bitcoin/bitcoin/pull/18204#discussion_r386041610,386041610,src/script/descriptor.cpp
achow101,2020-03-02 17:50:32,I don't think exclusive use is really needed or enforced.,https://github.com/bitcoin/bitcoin/pull/18204#discussion_r386549347,386549347,src/script/descriptor.cpp
Sjors,2020-03-02 18:40:35,All tests pass if I put the assert there. That implies we're not testing mixed use. ,https://github.com/bitcoin/bitcoin/pull/18204#discussion_r386575643,386575643,src/script/descriptor.cpp
achow101,2020-03-02 18:44:35,"Yes, it is currently not possible to have mixed use, but I don't think we should enforce non-mixed use. This should work regardless of mixed use and I don't want to make it such that mixed use is not an intended use case.",https://github.com/bitcoin/bitcoin/pull/18204#discussion_r386577777,386577777,src/script/descriptor.cpp
achow101,2020-03-02 18:51:43,Removed the asserts then.,https://github.com/bitcoin/bitcoin/pull/18204#discussion_r386581770,386581770,src/script/descriptor.cpp
achow101,2020-03-02 18:51:50,Done,https://github.com/bitcoin/bitcoin/pull/18204#discussion_r386581840,386581840,src/script/descriptor.cpp
achow101,2020-03-02 18:52:00,Done,https://github.com/bitcoin/bitcoin/pull/18204#discussion_r386581946,386581946,src/script/descriptor.cpp
achow101,2020-03-02 18:52:14,Done. Removed `skip_unhardened`.,https://github.com/bitcoin/bitcoin/pull/18204#discussion_r386582085,386582085,src/script/descriptor.cpp
Sjors,2020-03-03 17:56:08,"Maybe add the assert, with a comment above it along the lines of `// Mixed use of read_cache and write_cache should be possible, but is currently untested`? (or just the comment)",https://github.com/bitcoin/bitcoin/pull/18204#discussion_r387193334,387193334,src/script/descriptor.cpp
achow101,2020-03-03 18:42:00,I really don't think it is necessary to have an assert here.,https://github.com/bitcoin/bitcoin/pull/18204#discussion_r387217912,387217912,src/script/descriptor.cpp
achow101,2020-03-03 19:02:31,I've added asserts in that shouldn't have side effects.,https://github.com/bitcoin/bitcoin/pull/18204#discussion_r387229455,387229455,src/script/descriptor.cpp
instagibbs,2020-03-03 21:23:40,It's gotta be documented at least.,https://github.com/bitcoin/bitcoin/pull/18204#discussion_r387301667,387301667,src/script/descriptor.cpp
achow101,2020-03-03 23:14:15,I've mentioned it in the comment for `GetPubKey` in `PubkeyProvider`.,https://github.com/bitcoin/bitcoin/pull/18204#discussion_r387351840,387351840,src/script/descriptor.cpp
sipa,2020-03-04 02:18:53,"You can probably write this more readably as:\n\n```\nif (std::lexicographic_compare(std::begin(a.fingerprint), std::end(a.fingerprint), std::begin(b.fingerprint), std::end(b.fingerprint)) return true;\nif (std::lexicographic_compare(std::begin(b.fingerprint), std::end(b.fingerprint), std::begin(a.fingerprint), std::end(a.fingerprint)) return false;\n```\n\netc., which also avoids the magic",https://github.com/bitcoin/bitcoin/pull/18204#discussion_r387413284,387413284,src/script/keyorigin.h
sipa,2020-03-04 02:21:33,"Same here:\n\n```\nif (std::lexicographic_compare(std::begin(a.path), std::end(a.path), std::begin(b.path), std::end(b.path)) return true;\nif (std::lexicographic_compare(std::begin(b.path), std::end(b.path), std::begin(a.path), std::end(a.path)) return false;\n```\n\nWhich also avoids manually comparing lengths.",https://github.com/bitcoin/bitcoin/pull/18204#discussion_r387413876,387413876,src/script/keyorigin.h
sipa,2020-03-04 02:29:58,"It's not necessarily the root, right? For example in `[012345678/0']xpub.../0/1` this variable would correspond to the 2nd level intermediary node.",https://github.com/bitcoin/bitcoin/pull/18204#discussion_r387416099,387416099,src/script/descriptor.cpp
sipa,2020-03-04 02:48:08,Shouldn't this be a multimap? There can be collisions in the fingerprint + all subsequent path elements.,https://github.com/bitcoin/bitcoin/pull/18204#discussion_r387420972,387420972,src/script/descriptor.h
sipa,2020-03-04 02:49:48,Shouldn't the entry with overridden origin info be stored in the write cache here?,https://github.com/bitcoin/bitcoin/pull/18204#discussion_r387421686,387421686,src/script/descriptor.cpp
achow101,2020-03-04 03:08:03,"Sure, but it's easier to just call this the root and it's the root key that we do all our later derivation from.",https://github.com/bitcoin/bitcoin/pull/18204#discussion_r387426672,387426672,src/script/descriptor.cpp
achow101,2020-03-04 03:12:08,I think that's extremely unlikely. It would require several thousand xpubs in the descriptor itself. I think we have a few other places where we assume origin info don't colide.,https://github.com/bitcoin/bitcoin/pull/18204#discussion_r387427656,387427656,src/script/descriptor.h
achow101,2020-03-04 03:17:29,I don't think it would be useful to do that since we aren't reading from the cache here.,https://github.com/bitcoin/bitcoin/pull/18204#discussion_r387428849,387428849,src/script/descriptor.cpp
achow101,2020-03-04 03:20:10,Done,https://github.com/bitcoin/bitcoin/pull/18204#discussion_r387429413,387429413,src/script/keyorigin.h
achow101,2020-03-04 03:20:15,Done,https://github.com/bitcoin/bitcoin/pull/18204#discussion_r387429433,387429433,src/script/keyorigin.h
sipa,2020-03-04 06:01:30,"With 93 entries there is a 1 in a million chance for a collision... I agree it's low, but it's not so low that it is negligible, and certainly not so low that one couldn't grind a descriptor to intentionally cause a collision.\n\nThis makes me wonder if using KeyOriginInfo as key is the right approach. In theory, it should be sufficient to just key by the index of the key expression in the descr",https://github.com/bitcoin/bitcoin/pull/18204#discussion_r387463282,387463282,src/script/descriptor.h
instagibbs,2020-03-04 14:06:02,">index of the key expression in the descriptor\n\nthe what?",https://github.com/bitcoin/bitcoin/pull/18204#discussion_r387686744,387686744,src/script/descriptor.h
sipa,2020-03-04 15:57:05,"Every descriptor consists of some functions that combine the output of key expressions (pubkeys, xpubs, origin info, derivation paths, ...). We can assign the successive key expressions numbers 0, 1, 2, ... and use those index positions as key in the map (which would then become a std::map<int, CExtPubKey>).",https://github.com/bitcoin/bitcoin/pull/18204#discussion_r387761668,387761668,src/script/descriptor.h
achow101,2020-03-04 16:53:37,"I don't really like using the position to index into the cache. It requires the `PubkeyProviders` to know their position within the descriptor when it really doesn't matter to them.\n\nIf this was changed to a multimap, how would we decide which xpub to use in the event that there is a collision?",https://github.com/bitcoin/bitcoin/pull/18204#discussion_r387799544,387799544,src/script/descriptor.h
sipa,2020-03-04 17:19:32,"I think that's not a useful argument. If the current way the code works makes it hard to implement the right solution, the code should be changed. It seems to me that using position is the more concise, exact, and efficient way of doing it, and ignoring current code architecture it also seems the simplest, so I think it would be preferable.\n\nYou're right that a multimap wouldn't work. Using a Ke",https://github.com/bitcoin/bitcoin/pull/18204#discussion_r387814756,387814756,src/script/descriptor.h
instagibbs,2020-03-04 17:20:28,"@achow101 well it requires the *user/builder* of the cache to know each pubkey position, at least, right?",https://github.com/bitcoin/bitcoin/pull/18204#discussion_r387815296,387815296,src/script/descriptor.h
Sjors,2020-03-05 10:51:48,"It would be more readable to map this the other way around:\n```cpp\n// Map key expression index to xpub\nusing ExtPubKeyMap = std::unordered_map<uint32_t, CExtPubKey>;\n\n// Map derivation index to ExtPubKeyMap\nstd::unordered_map<uint32_t, ExtPubKeyMap> m_derived_xpubs;\n```",https://github.com/bitcoin/bitcoin/pull/18204#discussion_r388217325,388217325,src/script/descriptor.h
instagibbs,2020-03-05 14:32:29,"Suggested reword:\n\n// Cache for a single descriptor's derived extended pubkeys",https://github.com/bitcoin/bitcoin/pull/18204#discussion_r388330036,388330036,src/script/descriptor.h
instagibbs,2020-03-05 14:34:22,this doesn't appear to exist,https://github.com/bitcoin/bitcoin/pull/18204#discussion_r388331268,388331268,src/script/descriptor.h
instagibbs,2020-03-05 14:34:50,@param[out] xpub The CExtPubKey to get from cache,https://github.com/bitcoin/bitcoin/pull/18204#discussion_r388331595,388331595,src/script/descriptor.h
instagibbs,2020-03-05 14:37:32,`@param[out] xpub The CExtPubKey to get from cache`,https://github.com/bitcoin/bitcoin/pull/18204#discussion_r388333320,388333320,src/script/descriptor.h
instagibbs,2020-03-05 14:39:39,"A quick example wouldn't hurt(I was confused), which would also show what index it starts at :)",https://github.com/bitcoin/bitcoin/pull/18204#discussion_r388334656,388334656,src/script/descriptor.cpp
instagibbs,2020-03-05 14:45:41,"bikeshed: `m_expr_index` disallows my brain from guessing random words like `expect`, `expub`(??? thanks brain)",https://github.com/bitcoin/bitcoin/pull/18204#discussion_r388338598,388338598,src/script/descriptor.cpp
instagibbs,2020-03-05 15:00:07,"apologies for re-litigating variable naming after making you change it once: it's either child or ""parent"" depending on the derivation, same with `child_extkey` and `child_info_out`, maybe just rename everything `final_*`?\n\nReviewing the latest changes made me realize my folly of naming it this way.",https://github.com/bitcoin/bitcoin/pull/18204#discussion_r388348343,388348343,src/script/descriptor.cpp
instagibbs,2020-03-05 15:08:12,In what situations would you like to start with non-0 index?,https://github.com/bitcoin/bitcoin/pull/18204#discussion_r388354155,388354155,src/script/descriptor.cpp
achow101,2020-03-05 16:13:28,"I think that's really inefficient. In most cases, that would mean a map for every single derived xpub, and that map just has one element. In the current mapping, it's only two maps.",https://github.com/bitcoin/bitcoin/pull/18204#discussion_r388399524,388399524,src/script/descriptor.h
instagibbs,2020-03-05 16:15:14,I found the code as-is completely understandable fwiw. Maybe suggest a renaming/rewording somewhere?,https://github.com/bitcoin/bitcoin/pull/18204#discussion_r388400687,388400687,src/script/descriptor.h
instagibbs,2020-03-05 16:16:06,maybe just make it more visual: `map: key expression index -> key derivation index -> xpub`,https://github.com/bitcoin/bitcoin/pull/18204#discussion_r388401264,388401264,src/script/descriptor.h
achow101,2020-03-05 16:21:52,"None, but this is recursive.",https://github.com/bitcoin/bitcoin/pull/18204#discussion_r388405043,388405043,src/script/descriptor.cpp
instagibbs,2020-03-05 16:24:19,Ah! Duh.,https://github.com/bitcoin/bitcoin/pull/18204#discussion_r388406669,388406669,src/script/descriptor.cpp
achow101,2020-03-05 16:50:27,I've clarified the comment.,https://github.com/bitcoin/bitcoin/pull/18204#discussion_r388423855,388423855,src/script/descriptor.h
achow101,2020-03-05 16:50:32,Done,https://github.com/bitcoin/bitcoin/pull/18204#discussion_r388423908,388423908,src/script/descriptor.h
achow101,2020-03-05 16:50:38,Fixed,https://github.com/bitcoin/bitcoin/pull/18204#discussion_r388423977,388423977,src/script/descriptor.h
achow101,2020-03-05 16:50:45,Done,https://github.com/bitcoin/bitcoin/pull/18204#discussion_r388424066,388424066,src/script/descriptor.h
achow101,2020-03-05 16:50:50,Done,https://github.com/bitcoin/bitcoin/pull/18204#discussion_r388424132,388424132,src/script/descriptor.h
achow101,2020-03-05 16:51:00,I added an example to the comment.,https://github.com/bitcoin/bitcoin/pull/18204#discussion_r388424254,388424254,src/script/descriptor.cpp
achow101,2020-03-05 16:51:06,Done,https://github.com/bitcoin/bitcoin/pull/18204#discussion_r388424314,388424314,src/script/descriptor.cpp
achow101,2020-03-05 16:51:12,Done,https://github.com/bitcoin/bitcoin/pull/18204#discussion_r388424370,388424370,src/script/descriptor.cpp
instagibbs,2020-03-05 17:56:53,Was also thinking changing this to `final_extkey` as well for same reason.,https://github.com/bitcoin/bitcoin/pull/18204#discussion_r388462936,388462936,src/script/descriptor.cpp
achow101,2020-03-05 18:21:56,Done,https://github.com/bitcoin/bitcoin/pull/18204#discussion_r388476524,388476524,src/script/descriptor.cpp
Sjors,2020-03-06 11:19:02,"Nit, to get doxygen to pick this up:\n```cpp\n/** Cache for single descriptor's derived extended pubkeys */\n```",https://github.com/bitcoin/bitcoin/pull/18204#discussion_r388848544,388848544,src/script/descriptor.h
Sjors,2020-03-06 11:19:29,"```cpp\n/** Map key expression index -> map of (key derivation index -> xpub) */\n```",https://github.com/bitcoin/bitcoin/pull/18204#discussion_r388848732,388848732,src/script/descriptor.h
Sjors,2020-03-06 11:20:08,"```cpp\n/** Map key expression index -> parent xpub */\n```",https://github.com/bitcoin/bitcoin/pull/18204#discussion_r388849029,388849029,src/script/descriptor.h
Sjors,2020-03-06 11:23:27,"```cpp\n    /** Retrieve all cached parent xpubs */\n```",https://github.com/bitcoin/bitcoin/pull/18204#discussion_r388850443,388850443,src/script/descriptor.h
Sjors,2020-03-06 11:23:40,"```cpp\n    /** Retrieve all cached final xpubs */\n```",https://github.com/bitcoin/bitcoin/pull/18204#discussion_r388850544,388850544,src/script/descriptor.h
Sjors,2020-03-06 12:03:24,"Only `multi` and `sortedmulti` can cause `key_exp_index` to be non-zero, and those don't recurse. You could make `uint32_t key_exp_index` local to just that if branch, and hardcode `0` in all other calls to `ParsePubkey(0`.\n\nHowever with an eye on miniscript, we do expect to support scripts inside `threshold`, so might as well be ready for that. ",https://github.com/bitcoin/bitcoin/pull/18204#discussion_r388865999,388865999,src/script/descriptor.cpp
Sjors,2020-03-06 12:06:53,`m_base_extkey ` could be a nice alternative,https://github.com/bitcoin/bitcoin/pull/18204#discussion_r388867305,388867305,src/script/descriptor.cpp
Sjors,2020-03-06 13:25:16,e4262c45655b4f79ddfd9905db66dc44b8f5148c doesn't compile (`child_info_out`  is  renamed in In d7b241109f74b3c1c407929930e7d035cdcf60c9 `to `child_info_out`),https://github.com/bitcoin/bitcoin/pull/18204#discussion_r388900093,388900093,src/script/descriptor.cpp
achow101,2020-03-06 23:36:01,I think there's enough bikeshedding in this pr :/,https://github.com/bitcoin/bitcoin/pull/18204#discussion_r389193895,389193895,src/script/descriptor.cpp
achow101,2020-03-06 23:37:02,"I was intending for this to be generic so that it would work with future changes to descriptors, including miniscript. So I think I will leave it as is.",https://github.com/bitcoin/bitcoin/pull/18204#discussion_r389194107,389194107,src/script/descriptor.cpp
achow101,2020-03-07 14:44:34,Done,https://github.com/bitcoin/bitcoin/pull/18204#discussion_r389259344,389259344,src/script/descriptor.h
achow101,2020-03-07 14:44:41,Done,https://github.com/bitcoin/bitcoin/pull/18204#discussion_r389259351,389259351,src/script/descriptor.h
achow101,2020-03-07 14:44:47,Done,https://github.com/bitcoin/bitcoin/pull/18204#discussion_r389259357,389259357,src/script/descriptor.h
achow101,2020-03-07 14:44:52,Done,https://github.com/bitcoin/bitcoin/pull/18204#discussion_r389259363,389259363,src/script/descriptor.h
achow101,2020-03-07 14:44:58,Done,https://github.com/bitcoin/bitcoin/pull/18204#discussion_r389259367,389259367,src/script/descriptor.h
achow101,2020-03-07 14:45:06,Fixed,https://github.com/bitcoin/bitcoin/pull/18204#discussion_r389259375,389259375,src/script/descriptor.cpp
Sjors,2020-03-07 14:53:50,"It needs to be on the line above, otherwise this happens:\n<img width=""808"" alt=""Schermafbeelding 2020-03-07 om 15 53 36"" src=""https://user-images.githubusercontent.com/10217/76145663-d47e7780-608b-11ea-8f09-8d4399a0d315.png"">\n",https://github.com/bitcoin/bitcoin/pull/18204#discussion_r389259898,389259898,src/script/descriptor.h
achow101,2020-03-07 15:13:59,Fixed,https://github.com/bitcoin/bitcoin/pull/18204#discussion_r389261149,389261149,src/script/descriptor.h
