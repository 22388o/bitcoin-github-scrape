[
  {
    "sha": "474ea3b927ddc67e64ae78e08c20c9264817e84d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NzRlYTNiOTI3ZGRjNjdlNjRhZTc4ZTA4YzIwYzkyNjQ4MTdlODRk",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-02-24T20:09:15Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-03-07T15:13:43Z"
      },
      "message": "Introduce DescriptorCache struct which caches xpubs",
      "tree": {
        "sha": "9df5a282c1556c87a807c389b811fbc83867bdf5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9df5a282c1556c87a807c389b811fbc83867bdf5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/474ea3b927ddc67e64ae78e08c20c9264817e84d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/474ea3b927ddc67e64ae78e08c20c9264817e84d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/474ea3b927ddc67e64ae78e08c20c9264817e84d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/474ea3b927ddc67e64ae78e08c20c9264817e84d/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c3b471592346b98ae9aedf7cbc2a4058061b1ad8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c3b471592346b98ae9aedf7cbc2a4058061b1ad8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c3b471592346b98ae9aedf7cbc2a4058061b1ad8"
      }
    ],
    "stats": {
      "total": 82,
      "additions": 82,
      "deletions": 0
    },
    "files": [
      {
        "sha": "f71e3b901fe613e055cb9b5996fe33383b001f54",
        "filename": "src/script/descriptor.cpp",
        "status": "modified",
        "additions": 39,
        "deletions": 0,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/474ea3b927ddc67e64ae78e08c20c9264817e84d/src/script/descriptor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/474ea3b927ddc67e64ae78e08c20c9264817e84d/src/script/descriptor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.cpp?ref=474ea3b927ddc67e64ae78e08c20c9264817e84d",
        "patch": "@@ -1050,3 +1050,42 @@ std::unique_ptr<Descriptor> InferDescriptor(const CScript& script, const Signing\n {\n     return InferScript(script, ParseScriptContext::TOP, provider);\n }\n+\n+void DescriptorCache::CacheParentExtPubKey(uint32_t key_exp_pos, const CExtPubKey& xpub)\n+{\n+    m_parent_xpubs[key_exp_pos] = xpub;\n+}\n+\n+void DescriptorCache::CacheDerivedExtPubKey(uint32_t key_exp_pos, uint32_t der_index, const CExtPubKey& xpub)\n+{\n+    auto& xpubs = m_derived_xpubs[key_exp_pos];\n+    xpubs[der_index] = xpub;\n+}\n+\n+bool DescriptorCache::GetCachedParentExtPubKey(uint32_t key_exp_pos, CExtPubKey& xpub) const\n+{\n+    const auto& it = m_parent_xpubs.find(key_exp_pos);\n+    if (it == m_parent_xpubs.end()) return false;\n+    xpub = it->second;\n+    return true;\n+}\n+\n+bool DescriptorCache::GetCachedDerivedExtPubKey(uint32_t key_exp_pos, uint32_t der_index, CExtPubKey& xpub) const\n+{\n+    const auto& key_exp_it = m_derived_xpubs.find(key_exp_pos);\n+    if (key_exp_it == m_derived_xpubs.end()) return false;\n+    const auto& der_it = key_exp_it->second.find(der_index);\n+    if (der_it == key_exp_it->second.end()) return false;\n+    xpub = der_it->second;\n+    return true;\n+}\n+\n+const ExtPubKeyMap DescriptorCache::GetCachedParentExtPubKeys() const\n+{\n+    return m_parent_xpubs;\n+}\n+\n+const std::unordered_map<uint32_t, ExtPubKeyMap> DescriptorCache::GetCachedDerivedExtPubKeys() const\n+{\n+    return m_derived_xpubs;\n+}"
      },
      {
        "sha": "5c686d68c10995646199f3c9e297e05fa9fdc68d",
        "filename": "src/script/descriptor.h",
        "status": "modified",
        "additions": 43,
        "deletions": 0,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/474ea3b927ddc67e64ae78e08c20c9264817e84d/src/script/descriptor.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/474ea3b927ddc67e64ae78e08c20c9264817e84d/src/script/descriptor.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.h?ref=474ea3b927ddc67e64ae78e08c20c9264817e84d",
        "patch": "@@ -13,6 +13,49 @@\n \n #include <vector>\n \n+using ExtPubKeyMap = std::unordered_map<uint32_t, CExtPubKey>;\n+\n+/** Cache for single descriptor's derived extended pubkeys */\n+class DescriptorCache {\n+private:\n+    /** Map key expression index -> map of (key derivation index -> xpub) */\n+    std::unordered_map<uint32_t, ExtPubKeyMap> m_derived_xpubs;\n+    /** Map key expression index -> parent xpub */\n+    ExtPubKeyMap m_parent_xpubs;\n+\n+public:\n+    /** Cache a parent xpub\n+     *\n+     * @param[in] key_exp_pos Position of the key expression within the descriptor\n+     * @param[in] xpub The CExtPubKey to cache\n+     */\n+    void CacheParentExtPubKey(uint32_t key_exp_pos, const CExtPubKey& xpub);\n+    /** Retrieve a cached parent xpub\n+     *\n+     * @param[in] key_exp_pos Position of the key expression within the descriptor\n+     * @param[in] xpub The CExtPubKey to get from cache\n+     */\n+    bool GetCachedParentExtPubKey(uint32_t key_exp_pos, CExtPubKey& xpub) const;\n+    /** Cache an xpub derived at an index\n+     *\n+     * @param[in] key_exp_pos Position of the key expression within the descriptor\n+     * @param[in] der_index Derivation index of the xpub\n+     * @param[in] xpub The CExtPubKey to cache\n+     */\n+    void CacheDerivedExtPubKey(uint32_t key_exp_pos, uint32_t der_index, const CExtPubKey& xpub);\n+    /** Retrieve a cached xpub derived at an index\n+     *\n+     * @param[in] key_exp_pos Position of the key expression within the descriptor\n+     * @param[in] der_index Derivation index of the xpub\n+     * @param[in] xpub The CExtPubKey to get from cache\n+     */\n+    bool GetCachedDerivedExtPubKey(uint32_t key_exp_pos, uint32_t der_index, CExtPubKey& xpub) const;\n+\n+    /** Retrieve all cached parent xpubs */\n+    const ExtPubKeyMap GetCachedParentExtPubKeys() const;\n+    /** Retrieve all cached derived xpubs */\n+    const std::unordered_map<uint32_t, ExtPubKeyMap> GetCachedDerivedExtPubKeys() const;\n+};\n \n /** \\brief Interface for parsed descriptor objects.\n  *"
      }
    ]
  },
  {
    "sha": "df55d44d0de2174ba74ed3a28bef5e83b0a51b47",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZjU1ZDQ0ZDBkZTIxNzRiYTc0ZWQzYTI4YmVmNWU4M2IwYTUxYjQ3",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-03-04T18:20:21Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-03-07T15:13:47Z"
      },
      "message": "Track the index of the key expression in PubkeyProvider",
      "tree": {
        "sha": "3cb851b30f5ed8c867bf847ed643425b97df0805",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3cb851b30f5ed8c867bf847ed643425b97df0805"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/df55d44d0de2174ba74ed3a28bef5e83b0a51b47",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df55d44d0de2174ba74ed3a28bef5e83b0a51b47",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/df55d44d0de2174ba74ed3a28bef5e83b0a51b47",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df55d44d0de2174ba74ed3a28bef5e83b0a51b47/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "474ea3b927ddc67e64ae78e08c20c9264817e84d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/474ea3b927ddc67e64ae78e08c20c9264817e84d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/474ea3b927ddc67e64ae78e08c20c9264817e84d"
      }
    ],
    "stats": {
      "total": 53,
      "additions": 31,
      "deletions": 22
    },
    "files": [
      {
        "sha": "b528aa2ce8887ecaca97b8ff23ea4055a5865f2b",
        "filename": "src/script/descriptor.cpp",
        "status": "modified",
        "additions": 31,
        "deletions": 22,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df55d44d0de2174ba74ed3a28bef5e83b0a51b47/src/script/descriptor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df55d44d0de2174ba74ed3a28bef5e83b0a51b47/src/script/descriptor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.cpp?ref=df55d44d0de2174ba74ed3a28bef5e83b0a51b47",
        "patch": "@@ -150,6 +150,14 @@ typedef std::vector<uint32_t> KeyPath;\n /** Interface for public key objects in descriptors. */\n struct PubkeyProvider\n {\n+protected:\n+    //! Index of this key expression in the descriptor\n+    //! E.g. If this PubkeyProvider is key1 in multi(2, key1, key2, key3), then m_expr_index = 0\n+    uint32_t m_expr_index;\n+\n+public:\n+    PubkeyProvider(uint32_t exp_index) : m_expr_index(exp_index) {}\n+\n     virtual ~PubkeyProvider() = default;\n \n     /** Derive a public key. If key==nullptr, only info is desired. */\n@@ -182,7 +190,7 @@ class OriginPubkeyProvider final : public PubkeyProvider\n     }\n \n public:\n-    OriginPubkeyProvider(KeyOriginInfo info, std::unique_ptr<PubkeyProvider> provider) : m_origin(std::move(info)), m_provider(std::move(provider)) {}\n+    OriginPubkeyProvider(uint32_t exp_index, KeyOriginInfo info, std::unique_ptr<PubkeyProvider> provider) : PubkeyProvider(exp_index), m_origin(std::move(info)), m_provider(std::move(provider)) {}\n     bool GetPubKey(int pos, const SigningProvider& arg, CPubKey* key, KeyOriginInfo& info) const override\n     {\n         if (!m_provider->GetPubKey(pos, arg, key, info)) return false;\n@@ -212,7 +220,7 @@ class ConstPubkeyProvider final : public PubkeyProvider\n     CPubKey m_pubkey;\n \n public:\n-    ConstPubkeyProvider(const CPubKey& pubkey) : m_pubkey(pubkey) {}\n+    ConstPubkeyProvider(uint32_t exp_index, const CPubKey& pubkey) : PubkeyProvider(exp_index), m_pubkey(pubkey) {}\n     bool GetPubKey(int pos, const SigningProvider& arg, CPubKey* key, KeyOriginInfo& info) const override\n     {\n         if (key) *key = m_pubkey;\n@@ -272,7 +280,7 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n     }\n \n public:\n-    BIP32PubkeyProvider(const CExtPubKey& extkey, KeyPath path, DeriveType derive) : m_extkey(extkey), m_path(std::move(path)), m_derive(derive) {}\n+    BIP32PubkeyProvider(uint32_t exp_index, const CExtPubKey& extkey, KeyPath path, DeriveType derive) : PubkeyProvider(exp_index), m_extkey(extkey), m_path(std::move(path)), m_derive(derive) {}\n     bool IsRange() const override { return m_derive != DeriveType::NO; }\n     size_t GetSize() const override { return 33; }\n     bool GetPubKey(int pos, const SigningProvider& arg, CPubKey* key, KeyOriginInfo& info) const override\n@@ -698,7 +706,7 @@ NODISCARD bool ParseKeyPath(const std::vector<Span<const char>>& split, KeyPath&\n }\n \n /** Parse a public key that excludes origin information. */\n-std::unique_ptr<PubkeyProvider> ParsePubkeyInner(const Span<const char>& sp, bool permit_uncompressed, FlatSigningProvider& out, std::string& error)\n+std::unique_ptr<PubkeyProvider> ParsePubkeyInner(uint32_t key_exp_index, const Span<const char>& sp, bool permit_uncompressed, FlatSigningProvider& out, std::string& error)\n {\n     using namespace spanparsing;\n \n@@ -714,7 +722,7 @@ std::unique_ptr<PubkeyProvider> ParsePubkeyInner(const Span<const char>& sp, boo\n             CPubKey pubkey(data);\n             if (pubkey.IsFullyValid()) {\n                 if (permit_uncompressed || pubkey.IsCompressed()) {\n-                    return MakeUnique<ConstPubkeyProvider>(pubkey);\n+                    return MakeUnique<ConstPubkeyProvider>(key_exp_index, pubkey);\n                 } else {\n                     error = \"Uncompressed keys are not allowed\";\n                     return nullptr;\n@@ -728,7 +736,7 @@ std::unique_ptr<PubkeyProvider> ParsePubkeyInner(const Span<const char>& sp, boo\n             if (permit_uncompressed || key.IsCompressed()) {\n                 CPubKey pubkey = key.GetPubKey();\n                 out.keys.emplace(pubkey.GetID(), key);\n-                return MakeUnique<ConstPubkeyProvider>(pubkey);\n+                return MakeUnique<ConstPubkeyProvider>(key_exp_index, pubkey);\n             } else {\n                 error = \"Uncompressed keys are not allowed\";\n                 return nullptr;\n@@ -755,11 +763,11 @@ std::unique_ptr<PubkeyProvider> ParsePubkeyInner(const Span<const char>& sp, boo\n         extpubkey = extkey.Neuter();\n         out.keys.emplace(extpubkey.pubkey.GetID(), extkey.key);\n     }\n-    return MakeUnique<BIP32PubkeyProvider>(extpubkey, std::move(path), type);\n+    return MakeUnique<BIP32PubkeyProvider>(key_exp_index, extpubkey, std::move(path), type);\n }\n \n /** Parse a public key including origin information (if enabled). */\n-std::unique_ptr<PubkeyProvider> ParsePubkey(const Span<const char>& sp, bool permit_uncompressed, FlatSigningProvider& out, std::string& error)\n+std::unique_ptr<PubkeyProvider> ParsePubkey(uint32_t key_exp_index, const Span<const char>& sp, bool permit_uncompressed, FlatSigningProvider& out, std::string& error)\n {\n     using namespace spanparsing;\n \n@@ -768,7 +776,7 @@ std::unique_ptr<PubkeyProvider> ParsePubkey(const Span<const char>& sp, bool per\n         error = \"Multiple ']' characters found for a single pubkey\";\n         return nullptr;\n     }\n-    if (origin_split.size() == 1) return ParsePubkeyInner(origin_split[0], permit_uncompressed, out, error);\n+    if (origin_split.size() == 1) return ParsePubkeyInner(key_exp_index, origin_split[0], permit_uncompressed, out, error);\n     if (origin_split[0].size() < 1 || origin_split[0][0] != '[') {\n         error = strprintf(\"Key origin start '[ character expected but not found, got '%c' instead\", origin_split[0][0]);\n         return nullptr;\n@@ -789,30 +797,30 @@ std::unique_ptr<PubkeyProvider> ParsePubkey(const Span<const char>& sp, bool per\n     assert(fpr_bytes.size() == 4);\n     std::copy(fpr_bytes.begin(), fpr_bytes.end(), info.fingerprint);\n     if (!ParseKeyPath(slash_split, info.path, error)) return nullptr;\n-    auto provider = ParsePubkeyInner(origin_split[1], permit_uncompressed, out, error);\n+    auto provider = ParsePubkeyInner(key_exp_index, origin_split[1], permit_uncompressed, out, error);\n     if (!provider) return nullptr;\n-    return MakeUnique<OriginPubkeyProvider>(std::move(info), std::move(provider));\n+    return MakeUnique<OriginPubkeyProvider>(key_exp_index, std::move(info), std::move(provider));\n }\n \n /** Parse a script in a particular context. */\n-std::unique_ptr<DescriptorImpl> ParseScript(Span<const char>& sp, ParseScriptContext ctx, FlatSigningProvider& out, std::string& error)\n+std::unique_ptr<DescriptorImpl> ParseScript(uint32_t key_exp_index, Span<const char>& sp, ParseScriptContext ctx, FlatSigningProvider& out, std::string& error)\n {\n     using namespace spanparsing;\n \n     auto expr = Expr(sp);\n     bool sorted_multi = false;\n     if (Func(\"pk\", expr)) {\n-        auto pubkey = ParsePubkey(expr, ctx != ParseScriptContext::P2WSH, out, error);\n+        auto pubkey = ParsePubkey(key_exp_index, expr, ctx != ParseScriptContext::P2WSH, out, error);\n         if (!pubkey) return nullptr;\n         return MakeUnique<PKDescriptor>(std::move(pubkey));\n     }\n     if (Func(\"pkh\", expr)) {\n-        auto pubkey = ParsePubkey(expr, ctx != ParseScriptContext::P2WSH, out, error);\n+        auto pubkey = ParsePubkey(key_exp_index, expr, ctx != ParseScriptContext::P2WSH, out, error);\n         if (!pubkey) return nullptr;\n         return MakeUnique<PKHDescriptor>(std::move(pubkey));\n     }\n     if (ctx == ParseScriptContext::TOP && Func(\"combo\", expr)) {\n-        auto pubkey = ParsePubkey(expr, true, out, error);\n+        auto pubkey = ParsePubkey(key_exp_index, expr, true, out, error);\n         if (!pubkey) return nullptr;\n         return MakeUnique<ComboDescriptor>(std::move(pubkey));\n     } else if (ctx != ParseScriptContext::TOP && Func(\"combo\", expr)) {\n@@ -834,10 +842,11 @@ std::unique_ptr<DescriptorImpl> ParseScript(Span<const char>& sp, ParseScriptCon\n                 return nullptr;\n             }\n             auto arg = Expr(expr);\n-            auto pk = ParsePubkey(arg, ctx != ParseScriptContext::P2WSH, out, error);\n+            auto pk = ParsePubkey(key_exp_index, arg, ctx != ParseScriptContext::P2WSH, out, error);\n             if (!pk) return nullptr;\n             script_size += pk->GetSize() + 1;\n             providers.emplace_back(std::move(pk));\n+            key_exp_index++;\n         }\n         if (providers.size() < 1 || providers.size() > 16) {\n             error = strprintf(\"Cannot have %u keys in multisig; must have between 1 and 16 keys, inclusive\", providers.size());\n@@ -864,23 +873,23 @@ std::unique_ptr<DescriptorImpl> ParseScript(Span<const char>& sp, ParseScriptCon\n         return MakeUnique<MultisigDescriptor>(thres, std::move(providers), sorted_multi);\n     }\n     if (ctx != ParseScriptContext::P2WSH && Func(\"wpkh\", expr)) {\n-        auto pubkey = ParsePubkey(expr, false, out, error);\n+        auto pubkey = ParsePubkey(key_exp_index, expr, false, out, error);\n         if (!pubkey) return nullptr;\n         return MakeUnique<WPKHDescriptor>(std::move(pubkey));\n     } else if (ctx == ParseScriptContext::P2WSH && Func(\"wpkh\", expr)) {\n         error = \"Cannot have wpkh within wsh\";\n         return nullptr;\n     }\n     if (ctx == ParseScriptContext::TOP && Func(\"sh\", expr)) {\n-        auto desc = ParseScript(expr, ParseScriptContext::P2SH, out, error);\n+        auto desc = ParseScript(key_exp_index, expr, ParseScriptContext::P2SH, out, error);\n         if (!desc || expr.size()) return nullptr;\n         return MakeUnique<SHDescriptor>(std::move(desc));\n     } else if (ctx != ParseScriptContext::TOP && Func(\"sh\", expr)) {\n         error = \"Cannot have sh in non-top level\";\n         return nullptr;\n     }\n     if (ctx != ParseScriptContext::P2WSH && Func(\"wsh\", expr)) {\n-        auto desc = ParseScript(expr, ParseScriptContext::P2WSH, out, error);\n+        auto desc = ParseScript(key_exp_index, expr, ParseScriptContext::P2WSH, out, error);\n         if (!desc || expr.size()) return nullptr;\n         return MakeUnique<WSHDescriptor>(std::move(desc));\n     } else if (ctx == ParseScriptContext::P2WSH && Func(\"wsh\", expr)) {\n@@ -917,10 +926,10 @@ std::unique_ptr<DescriptorImpl> ParseScript(Span<const char>& sp, ParseScriptCon\n \n std::unique_ptr<PubkeyProvider> InferPubkey(const CPubKey& pubkey, ParseScriptContext, const SigningProvider& provider)\n {\n-    std::unique_ptr<PubkeyProvider> key_provider = MakeUnique<ConstPubkeyProvider>(pubkey);\n+    std::unique_ptr<PubkeyProvider> key_provider = MakeUnique<ConstPubkeyProvider>(0, pubkey);\n     KeyOriginInfo info;\n     if (provider.GetKeyOrigin(pubkey.GetID(), info)) {\n-        return MakeUnique<OriginPubkeyProvider>(std::move(info), std::move(key_provider));\n+        return MakeUnique<OriginPubkeyProvider>(0, std::move(info), std::move(key_provider));\n     }\n     return key_provider;\n }\n@@ -1032,7 +1041,7 @@ std::unique_ptr<Descriptor> Parse(const std::string& descriptor, FlatSigningProv\n {\n     Span<const char> sp(descriptor.data(), descriptor.size());\n     if (!CheckChecksum(sp, require_checksum, error)) return nullptr;\n-    auto ret = ParseScript(sp, ParseScriptContext::TOP, out, error);\n+    auto ret = ParseScript(0, sp, ParseScriptContext::TOP, out, error);\n     if (sp.size() == 0 && ret) return std::unique_ptr<Descriptor>(std::move(ret));\n     return nullptr;\n }"
      }
    ]
  },
  {
    "sha": "66c2cadc91d26074b89e5ada68350b5c8676efac",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NmMyY2FkYzkxZDI2MDc0Yjg5ZTVhZGE2ODM1MGI1Yzg2NzZlZmFj",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-03-03T22:16:40Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-03-07T15:13:47Z"
      },
      "message": "Rename BIP32PubkeyProvider.m_extkey to m_root_extkey\n\nRenaming clarifies that m_extkey is actually the root\nextkey that keys are derived from.",
      "tree": {
        "sha": "2dd25a3e423ee68a50ee40474ad9f3867f9d8b20",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2dd25a3e423ee68a50ee40474ad9f3867f9d8b20"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/66c2cadc91d26074b89e5ada68350b5c8676efac",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/66c2cadc91d26074b89e5ada68350b5c8676efac",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/66c2cadc91d26074b89e5ada68350b5c8676efac",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/66c2cadc91d26074b89e5ada68350b5c8676efac/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "df55d44d0de2174ba74ed3a28bef5e83b0a51b47",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df55d44d0de2174ba74ed3a28bef5e83b0a51b47",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/df55d44d0de2174ba74ed3a28bef5e83b0a51b47"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 11,
      "deletions": 10
    },
    "files": [
      {
        "sha": "95291ef31720991620a4bbb74955abaed39fffe2",
        "filename": "src/script/descriptor.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 10,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/66c2cadc91d26074b89e5ada68350b5c8676efac/src/script/descriptor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/66c2cadc91d26074b89e5ada68350b5c8676efac/src/script/descriptor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.cpp?ref=66c2cadc91d26074b89e5ada68350b5c8676efac",
        "patch": "@@ -254,18 +254,19 @@ enum class DeriveType {\n /** An object representing a parsed extended public key in a descriptor. */\n class BIP32PubkeyProvider final : public PubkeyProvider\n {\n-    CExtPubKey m_extkey;\n+    // Root xpub, path, and final derivation step type being used, if any\n+    CExtPubKey m_root_extkey;\n     KeyPath m_path;\n     DeriveType m_derive;\n \n     bool GetExtKey(const SigningProvider& arg, CExtKey& ret) const\n     {\n         CKey key;\n-        if (!arg.GetKey(m_extkey.pubkey.GetID(), key)) return false;\n-        ret.nDepth = m_extkey.nDepth;\n-        std::copy(m_extkey.vchFingerprint, m_extkey.vchFingerprint + sizeof(ret.vchFingerprint), ret.vchFingerprint);\n-        ret.nChild = m_extkey.nChild;\n-        ret.chaincode = m_extkey.chaincode;\n+        if (!arg.GetKey(m_root_extkey.pubkey.GetID(), key)) return false;\n+        ret.nDepth = m_root_extkey.nDepth;\n+        std::copy(m_root_extkey.vchFingerprint, m_root_extkey.vchFingerprint + sizeof(ret.vchFingerprint), ret.vchFingerprint);\n+        ret.nChild = m_root_extkey.nChild;\n+        ret.chaincode = m_root_extkey.chaincode;\n         ret.key = key;\n         return true;\n     }\n@@ -280,7 +281,7 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n     }\n \n public:\n-    BIP32PubkeyProvider(uint32_t exp_index, const CExtPubKey& extkey, KeyPath path, DeriveType derive) : PubkeyProvider(exp_index), m_extkey(extkey), m_path(std::move(path)), m_derive(derive) {}\n+    BIP32PubkeyProvider(uint32_t exp_index, const CExtPubKey& extkey, KeyPath path, DeriveType derive) : PubkeyProvider(exp_index), m_root_extkey(extkey), m_path(std::move(path)), m_derive(derive) {}\n     bool IsRange() const override { return m_derive != DeriveType::NO; }\n     size_t GetSize() const override { return 33; }\n     bool GetPubKey(int pos, const SigningProvider& arg, CPubKey* key, KeyOriginInfo& info) const override\n@@ -292,7 +293,7 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n                 *key = priv_key.GetPubKey();\n             } else {\n                 // TODO: optimize by caching\n-                CExtPubKey extkey = m_extkey;\n+                CExtPubKey extkey = m_root_extkey;\n                 for (auto entry : m_path) {\n                     extkey.Derive(extkey, entry);\n                 }\n@@ -301,7 +302,7 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n                 *key = extkey.pubkey;\n             }\n         }\n-        CKeyID keyid = m_extkey.pubkey.GetID();\n+        CKeyID keyid = m_root_extkey.pubkey.GetID();\n         std::copy(keyid.begin(), keyid.begin() + sizeof(info.fingerprint), info.fingerprint);\n         info.path = m_path;\n         if (m_derive == DeriveType::UNHARDENED) info.path.push_back((uint32_t)pos);\n@@ -310,7 +311,7 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n     }\n     std::string ToString() const override\n     {\n-        std::string ret = EncodeExtPubKey(m_extkey) + FormatHDKeypath(m_path);\n+        std::string ret = EncodeExtPubKey(m_root_extkey) + FormatHDKeypath(m_path);\n         if (IsRange()) {\n             ret += \"/*\";\n             if (m_derive == DeriveType::HARDENED) ret += '\\'';"
      }
    ]
  },
  {
    "sha": "58f54b686f663e4c46a2cf7a64560409007c7eb3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1OGY1NGI2ODZmNjYzZTRjNDZhMmNmN2E2NDU2MDQwOTAwN2M3ZWIz",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-02-25T21:01:58Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-03-07T15:13:47Z"
      },
      "message": "Add DescriptorCache* read_cache and DescriptorCache* write_cache to Expand and GetPubKey\n\nHave Expand, ExpandFromCache, and ExpandHelper take additional DescriptorCache\nparameters. These are then passed into PubkeyProvider::GetPubKey which\nalso takes them as arguments.\n\nReading and writing to the cache is pushed down into GetPubKey. The old cache where\npubkeys are serialized to a vector is completely removed and instead xpubs are being\ncached in DescriptorCache.",
      "tree": {
        "sha": "51b1604332b9a8f589041a61e06be1df3ce759c7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/51b1604332b9a8f589041a61e06be1df3ce759c7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/58f54b686f663e4c46a2cf7a64560409007c7eb3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/58f54b686f663e4c46a2cf7a64560409007c7eb3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/58f54b686f663e4c46a2cf7a64560409007c7eb3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/58f54b686f663e4c46a2cf7a64560409007c7eb3/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "66c2cadc91d26074b89e5ada68350b5c8676efac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/66c2cadc91d26074b89e5ada68350b5c8676efac",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/66c2cadc91d26074b89e5ada68350b5c8676efac"
      }
    ],
    "stats": {
      "total": 133,
      "additions": 73,
      "deletions": 60
    },
    "files": [
      {
        "sha": "ac872c8cd224d9c345041616d2a24b71ff0a410d",
        "filename": "src/script/descriptor.cpp",
        "status": "modified",
        "additions": 66,
        "deletions": 53,
        "changes": 119,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/58f54b686f663e4c46a2cf7a64560409007c7eb3/src/script/descriptor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/58f54b686f663e4c46a2cf7a64560409007c7eb3/src/script/descriptor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.cpp?ref=58f54b686f663e4c46a2cf7a64560409007c7eb3",
        "patch": "@@ -160,8 +160,12 @@ struct PubkeyProvider\n \n     virtual ~PubkeyProvider() = default;\n \n-    /** Derive a public key. If key==nullptr, only info is desired. */\n-    virtual bool GetPubKey(int pos, const SigningProvider& arg, CPubKey* key, KeyOriginInfo& info) const = 0;\n+    /** Derive a public key.\n+     *  read_cache is the cache to read keys from (if not nullptr)\n+     *  write_cache is the cache to write keys to (if not nullptr)\n+     *  Caches are not exclusive but this is not tested. Currently we use them exclusively\n+     */\n+    virtual bool GetPubKey(int pos, const SigningProvider& arg, CPubKey& key, KeyOriginInfo& info, const DescriptorCache* read_cache = nullptr, DescriptorCache* write_cache = nullptr) const = 0;\n \n     /** Whether this represent multiple public keys at different positions. */\n     virtual bool IsRange() const = 0;\n@@ -191,9 +195,9 @@ class OriginPubkeyProvider final : public PubkeyProvider\n \n public:\n     OriginPubkeyProvider(uint32_t exp_index, KeyOriginInfo info, std::unique_ptr<PubkeyProvider> provider) : PubkeyProvider(exp_index), m_origin(std::move(info)), m_provider(std::move(provider)) {}\n-    bool GetPubKey(int pos, const SigningProvider& arg, CPubKey* key, KeyOriginInfo& info) const override\n+    bool GetPubKey(int pos, const SigningProvider& arg, CPubKey& key, KeyOriginInfo& info, const DescriptorCache* read_cache = nullptr, DescriptorCache* write_cache = nullptr) const override\n     {\n-        if (!m_provider->GetPubKey(pos, arg, key, info)) return false;\n+        if (!m_provider->GetPubKey(pos, arg, key, info, read_cache, write_cache)) return false;\n         std::copy(std::begin(m_origin.fingerprint), std::end(m_origin.fingerprint), info.fingerprint);\n         info.path.insert(info.path.begin(), m_origin.path.begin(), m_origin.path.end());\n         return true;\n@@ -221,9 +225,9 @@ class ConstPubkeyProvider final : public PubkeyProvider\n \n public:\n     ConstPubkeyProvider(uint32_t exp_index, const CPubKey& pubkey) : PubkeyProvider(exp_index), m_pubkey(pubkey) {}\n-    bool GetPubKey(int pos, const SigningProvider& arg, CPubKey* key, KeyOriginInfo& info) const override\n+    bool GetPubKey(int pos, const SigningProvider& arg, CPubKey& key, KeyOriginInfo& info, const DescriptorCache* read_cache = nullptr, DescriptorCache* write_cache = nullptr) const override\n     {\n-        if (key) *key = m_pubkey;\n+        key = m_pubkey;\n         info.path.clear();\n         CKeyID keyid = m_pubkey.GetID();\n         std::copy(keyid.begin(), keyid.begin() + sizeof(info.fingerprint), info.fingerprint);\n@@ -271,6 +275,16 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n         return true;\n     }\n \n+    // Derives the last xprv\n+    bool GetDerivedExtKey(const SigningProvider& arg, CExtKey& xprv) const\n+    {\n+        if (!GetExtKey(arg, xprv)) return false;\n+        for (auto entry : m_path) {\n+            xprv.Derive(xprv, entry);\n+        }\n+        return true;\n+    }\n+\n     bool IsHardened() const\n     {\n         if (m_derive == DeriveType::HARDENED) return true;\n@@ -284,29 +298,47 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n     BIP32PubkeyProvider(uint32_t exp_index, const CExtPubKey& extkey, KeyPath path, DeriveType derive) : PubkeyProvider(exp_index), m_root_extkey(extkey), m_path(std::move(path)), m_derive(derive) {}\n     bool IsRange() const override { return m_derive != DeriveType::NO; }\n     size_t GetSize() const override { return 33; }\n-    bool GetPubKey(int pos, const SigningProvider& arg, CPubKey* key, KeyOriginInfo& info) const override\n+    bool GetPubKey(int pos, const SigningProvider& arg, CPubKey& key_out, KeyOriginInfo& final_info_out, const DescriptorCache* read_cache = nullptr, DescriptorCache* write_cache = nullptr) const override\n     {\n-        if (key) {\n-            if (IsHardened()) {\n-                CKey priv_key;\n-                if (!GetPrivKey(pos, arg, priv_key)) return false;\n-                *key = priv_key.GetPubKey();\n-            } else {\n-                // TODO: optimize by caching\n-                CExtPubKey extkey = m_root_extkey;\n-                for (auto entry : m_path) {\n-                    extkey.Derive(extkey, entry);\n-                }\n-                if (m_derive == DeriveType::UNHARDENED) extkey.Derive(extkey, pos);\n-                assert(m_derive != DeriveType::HARDENED);\n-                *key = extkey.pubkey;\n+        // Info of parent of the to be derived pubkey\n+        KeyOriginInfo parent_info;\n+        CKeyID keyid = m_root_extkey.pubkey.GetID();\n+        std::copy(keyid.begin(), keyid.begin() + sizeof(parent_info.fingerprint), parent_info.fingerprint);\n+        parent_info.path = m_path;\n+\n+        // Info of the derived key itself which is copied out upon successful completion\n+        KeyOriginInfo final_info_out_tmp = parent_info;\n+        if (m_derive == DeriveType::UNHARDENED) final_info_out_tmp.path.push_back((uint32_t)pos);\n+        if (m_derive == DeriveType::HARDENED) final_info_out_tmp.path.push_back(((uint32_t)pos) | 0x80000000L);\n+\n+        // Derive keys or fetch them from cache\n+        CExtPubKey final_extkey = m_root_extkey;\n+        bool der = true;\n+        if (read_cache) {\n+            if (!read_cache->GetCachedDerivedExtPubKey(m_expr_index, pos, final_extkey)) return false;\n+        } else if (IsHardened()) {\n+            CExtKey xprv;\n+            if (!GetDerivedExtKey(arg, xprv)) return false;\n+            if (m_derive == DeriveType::UNHARDENED) der = xprv.Derive(xprv, pos);\n+            if (m_derive == DeriveType::HARDENED) der = xprv.Derive(xprv, pos | 0x80000000UL);\n+            final_extkey = xprv.Neuter();\n+        } else {\n+            for (auto entry : m_path) {\n+                der = final_extkey.Derive(final_extkey, entry);\n+                assert(der);\n             }\n+            if (m_derive == DeriveType::UNHARDENED) der = final_extkey.Derive(final_extkey, pos);\n+            assert(m_derive != DeriveType::HARDENED);\n         }\n-        CKeyID keyid = m_root_extkey.pubkey.GetID();\n-        std::copy(keyid.begin(), keyid.begin() + sizeof(info.fingerprint), info.fingerprint);\n-        info.path = m_path;\n-        if (m_derive == DeriveType::UNHARDENED) info.path.push_back((uint32_t)pos);\n-        if (m_derive == DeriveType::HARDENED) info.path.push_back(((uint32_t)pos) | 0x80000000L);\n+        assert(der);\n+\n+        final_info_out = final_info_out_tmp;\n+        key_out = final_extkey.pubkey;\n+\n+        if (write_cache) {\n+            write_cache->CacheDerivedExtPubKey(m_expr_index, pos, final_extkey);\n+        }\n+\n         return true;\n     }\n     std::string ToString() const override\n@@ -332,10 +364,7 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n     bool GetPrivKey(int pos, const SigningProvider& arg, CKey& key) const override\n     {\n         CExtKey extkey;\n-        if (!GetExtKey(arg, extkey)) return false;\n-        for (auto entry : m_path) {\n-            extkey.Derive(extkey, entry);\n-        }\n+        if (!GetDerivedExtKey(arg, extkey)) return false;\n         if (m_derive == DeriveType::UNHARDENED) extkey.Derive(extkey, pos);\n         if (m_derive == DeriveType::HARDENED) extkey.Derive(extkey, pos | 0x80000000UL);\n         key = extkey.key;\n@@ -434,35 +463,20 @@ class DescriptorImpl : public Descriptor\n         return ret;\n     }\n \n-    bool ExpandHelper(int pos, const SigningProvider& arg, Span<const unsigned char>* cache_read, std::vector<CScript>& output_scripts, FlatSigningProvider& out, std::vector<unsigned char>* cache_write) const\n+    bool ExpandHelper(int pos, const SigningProvider& arg, const DescriptorCache* read_cache, std::vector<CScript>& output_scripts, FlatSigningProvider& out, DescriptorCache* write_cache) const\n     {\n         std::vector<std::pair<CPubKey, KeyOriginInfo>> entries;\n         entries.reserve(m_pubkey_args.size());\n \n         // Construct temporary data in `entries` and `subscripts`, to avoid producing output in case of failure.\n         for (const auto& p : m_pubkey_args) {\n             entries.emplace_back();\n-            // If we have a cache, we don't need GetPubKey to compute the public key.\n-            // Pass in nullptr to signify only origin info is desired.\n-            if (!p->GetPubKey(pos, arg, cache_read ? nullptr : &entries.back().first, entries.back().second)) return false;\n-            if (cache_read) {\n-                // Cached expanded public key exists, use it.\n-                if (cache_read->size() == 0) return false;\n-                bool compressed = ((*cache_read)[0] == 0x02 || (*cache_read)[0] == 0x03) && cache_read->size() >= 33;\n-                bool uncompressed = ((*cache_read)[0] == 0x04) && cache_read->size() >= 65;\n-                if (!(compressed || uncompressed)) return false;\n-                CPubKey pubkey(cache_read->begin(), cache_read->begin() + (compressed ? 33 : 65));\n-                entries.back().first = pubkey;\n-                *cache_read = cache_read->subspan(compressed ? 33 : 65);\n-            }\n-            if (cache_write) {\n-                cache_write->insert(cache_write->end(), entries.back().first.begin(), entries.back().first.end());\n-            }\n+            if (!p->GetPubKey(pos, arg, entries.back().first, entries.back().second, read_cache, write_cache)) return false;\n         }\n         std::vector<CScript> subscripts;\n         if (m_subdescriptor_arg) {\n             FlatSigningProvider subprovider;\n-            if (!m_subdescriptor_arg->ExpandHelper(pos, arg, cache_read, subscripts, subprovider, cache_write)) return false;\n+            if (!m_subdescriptor_arg->ExpandHelper(pos, arg, read_cache, subscripts, subprovider, write_cache)) return false;\n             out = Merge(out, subprovider);\n         }\n \n@@ -486,15 +500,14 @@ class DescriptorImpl : public Descriptor\n         return true;\n     }\n \n-    bool Expand(int pos, const SigningProvider& provider, std::vector<CScript>& output_scripts, FlatSigningProvider& out, std::vector<unsigned char>* cache = nullptr) const final\n+    bool Expand(int pos, const SigningProvider& provider, std::vector<CScript>& output_scripts, FlatSigningProvider& out, DescriptorCache* write_cache = nullptr) const final\n     {\n-        return ExpandHelper(pos, provider, nullptr, output_scripts, out, cache);\n+        return ExpandHelper(pos, provider, nullptr, output_scripts, out, write_cache);\n     }\n \n-    bool ExpandFromCache(int pos, const std::vector<unsigned char>& cache, std::vector<CScript>& output_scripts, FlatSigningProvider& out) const final\n+    bool ExpandFromCache(int pos, const DescriptorCache& read_cache, std::vector<CScript>& output_scripts, FlatSigningProvider& out) const final\n     {\n-        Span<const unsigned char> span = MakeSpan(cache);\n-        return ExpandHelper(pos, DUMMY_SIGNING_PROVIDER, &span, output_scripts, out, nullptr) && span.size() == 0;\n+        return ExpandHelper(pos, DUMMY_SIGNING_PROVIDER, &read_cache, output_scripts, out, nullptr);\n     }\n \n     void ExpandPrivate(int pos, const SigningProvider& provider, FlatSigningProvider& out) const final"
      },
      {
        "sha": "34cd5760de184946c3d85762c8b9f8bf70b26252",
        "filename": "src/script/descriptor.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/58f54b686f663e4c46a2cf7a64560409007c7eb3/src/script/descriptor.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/58f54b686f663e4c46a2cf7a64560409007c7eb3/src/script/descriptor.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.h?ref=58f54b686f663e4c46a2cf7a64560409007c7eb3",
        "patch": "@@ -96,18 +96,18 @@ struct Descriptor {\n      * @param[in] provider The provider to query for private keys in case of hardened derivation.\n      * @param[out] output_scripts The expanded scriptPubKeys.\n      * @param[out] out Scripts and public keys necessary for solving the expanded scriptPubKeys (may be equal to `provider`).\n-     * @param[out] cache Cache data necessary to evaluate the descriptor at this point without access to private keys.\n+     * @param[out] write_cache Cache data necessary to evaluate the descriptor at this point without access to private keys.\n      */\n-    virtual bool Expand(int pos, const SigningProvider& provider, std::vector<CScript>& output_scripts, FlatSigningProvider& out, std::vector<unsigned char>* cache = nullptr) const = 0;\n+    virtual bool Expand(int pos, const SigningProvider& provider, std::vector<CScript>& output_scripts, FlatSigningProvider& out, DescriptorCache* write_cache = nullptr) const = 0;\n \n     /** Expand a descriptor at a specified position using cached expansion data.\n      *\n      * @param[in] pos The position at which to expand the descriptor. If IsRange() is false, this is ignored.\n-     * @param[in] cache Cached expansion data.\n+     * @param[in] read_cache Cached expansion data.\n      * @param[out] output_scripts The expanded scriptPubKeys.\n      * @param[out] out Scripts and public keys necessary for solving the expanded scriptPubKeys (may be equal to `provider`).\n      */\n-    virtual bool ExpandFromCache(int pos, const std::vector<unsigned char>& cache, std::vector<CScript>& output_scripts, FlatSigningProvider& out) const = 0;\n+    virtual bool ExpandFromCache(int pos, const DescriptorCache& read_cache, std::vector<CScript>& output_scripts, FlatSigningProvider& out) const = 0;\n \n     /** Expand the private key for a descriptor at a specified position, if possible.\n      *"
      },
      {
        "sha": "f20a6bcd1d235ae69186bb480e5b152f34509359",
        "filename": "src/test/descriptor_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/58f54b686f663e4c46a2cf7a64560409007c7eb3/src/test/descriptor_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/58f54b686f663e4c46a2cf7a64560409007c7eb3/src/test/descriptor_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/descriptor_tests.cpp?ref=58f54b686f663e4c46a2cf7a64560409007c7eb3",
        "patch": "@@ -135,14 +135,14 @@ void DoCheck(const std::string& prv, const std::string& pub, int flags, const st\n             // Evaluate the descriptor selected by `t` in poisition `i`.\n             FlatSigningProvider script_provider, script_provider_cached;\n             std::vector<CScript> spks, spks_cached;\n-            std::vector<unsigned char> cache;\n-            BOOST_CHECK((t ? parse_priv : parse_pub)->Expand(i, key_provider, spks, script_provider, &cache));\n+            DescriptorCache desc_cache;\n+            BOOST_CHECK((t ? parse_priv : parse_pub)->Expand(i, key_provider, spks, script_provider, &desc_cache));\n \n             // Compare the output with the expected result.\n             BOOST_CHECK_EQUAL(spks.size(), ref.size());\n \n             // Try to expand again using cached data, and compare.\n-            BOOST_CHECK(parse_pub->ExpandFromCache(i, cache, spks_cached, script_provider_cached));\n+            BOOST_CHECK(parse_pub->ExpandFromCache(i, desc_cache, spks_cached, script_provider_cached));\n             BOOST_CHECK(spks == spks_cached);\n             BOOST_CHECK(script_provider.pubkeys == script_provider_cached.pubkeys);\n             BOOST_CHECK(script_provider.scripts == script_provider_cached.scripts);"
      }
    ]
  },
  {
    "sha": "f76733eda5f4c161e9eb47c74b949582ab8f448a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNzY3MzNlZGE1ZjRjMTYxZTllYjQ3Yzc0Yjk0OTU4MmFiOGY0NDhh",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-02-25T23:28:05Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-03-07T15:13:47Z"
      },
      "message": "Cache the immediate derivation parent xpub\n\nIf unhardened derivation is used, cache the immediate derivation\nparent xpub and use it for unhardened derivation",
      "tree": {
        "sha": "ca3ff2eb6bc4496b7d61d2d3a87f752f099fc85a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ca3ff2eb6bc4496b7d61d2d3a87f752f099fc85a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f76733eda5f4c161e9eb47c74b949582ab8f448a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f76733eda5f4c161e9eb47c74b949582ab8f448a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f76733eda5f4c161e9eb47c74b949582ab8f448a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f76733eda5f4c161e9eb47c74b949582ab8f448a/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "58f54b686f663e4c46a2cf7a64560409007c7eb3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/58f54b686f663e4c46a2cf7a64560409007c7eb3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/58f54b686f663e4c46a2cf7a64560409007c7eb3"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 34,
      "deletions": 5
    },
    "files": [
      {
        "sha": "30384fbd06992af6de09ef100f55c8d66f1bead0",
        "filename": "src/script/descriptor.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 3,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f76733eda5f4c161e9eb47c74b949582ab8f448a/src/script/descriptor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f76733eda5f4c161e9eb47c74b949582ab8f448a/src/script/descriptor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.cpp?ref=f76733eda5f4c161e9eb47c74b949582ab8f448a",
        "patch": "@@ -313,21 +313,30 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n \n         // Derive keys or fetch them from cache\n         CExtPubKey final_extkey = m_root_extkey;\n+        CExtPubKey parent_extkey = m_root_extkey;\n         bool der = true;\n         if (read_cache) {\n-            if (!read_cache->GetCachedDerivedExtPubKey(m_expr_index, pos, final_extkey)) return false;\n+            if (!read_cache->GetCachedDerivedExtPubKey(m_expr_index, pos, final_extkey)) {\n+                if (m_derive == DeriveType::HARDENED) return false;\n+                // Try to get the derivation parent\n+                if (!read_cache->GetCachedParentExtPubKey(m_expr_index, parent_extkey)) return false;\n+                final_extkey = parent_extkey;\n+                if (m_derive == DeriveType::UNHARDENED) der = parent_extkey.Derive(final_extkey, pos);\n+            }\n         } else if (IsHardened()) {\n             CExtKey xprv;\n             if (!GetDerivedExtKey(arg, xprv)) return false;\n+            parent_extkey = xprv.Neuter();\n             if (m_derive == DeriveType::UNHARDENED) der = xprv.Derive(xprv, pos);\n             if (m_derive == DeriveType::HARDENED) der = xprv.Derive(xprv, pos | 0x80000000UL);\n             final_extkey = xprv.Neuter();\n         } else {\n             for (auto entry : m_path) {\n-                der = final_extkey.Derive(final_extkey, entry);\n+                der = parent_extkey.Derive(parent_extkey, entry);\n                 assert(der);\n             }\n-            if (m_derive == DeriveType::UNHARDENED) der = final_extkey.Derive(final_extkey, pos);\n+            final_extkey = parent_extkey;\n+            if (m_derive == DeriveType::UNHARDENED) der = parent_extkey.Derive(final_extkey, pos);\n             assert(m_derive != DeriveType::HARDENED);\n         }\n         assert(der);\n@@ -337,6 +346,10 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n \n         if (write_cache) {\n             write_cache->CacheDerivedExtPubKey(m_expr_index, pos, final_extkey);\n+            // Only cache parent if there is any unhardened derivation\n+            if (m_derive != DeriveType::HARDENED) {\n+                write_cache->CacheParentExtPubKey(m_expr_index, parent_extkey);\n+            }\n         }\n \n         return true;"
      },
      {
        "sha": "7f20a5c022322119178e9d56452e4f719fb76fa8",
        "filename": "src/test/descriptor_tests.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 2,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f76733eda5f4c161e9eb47c74b949582ab8f448a/src/test/descriptor_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f76733eda5f4c161e9eb47c74b949582ab8f448a/src/test/descriptor_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/descriptor_tests.cpp?ref=f76733eda5f4c161e9eb47c74b949582ab8f448a",
        "patch": "@@ -29,6 +29,7 @@ constexpr int RANGE = 1; // Expected to be ranged descriptor\n constexpr int HARDENED = 2; // Derivation needs access to private keys\n constexpr int UNSOLVABLE = 4; // This descriptor is not expected to be solvable\n constexpr int SIGNABLE = 8; // We can sign with this descriptor (this is not true when actual BIP32 derivation is used, as that's not integrated in our signing code)\n+constexpr int DERIVE_HARDENED = 16; // The final derivation is hardened, i.e. ends with *' or *h\n \n /** Compare two descriptors. If only one of them has a checksum, the checksum is ignored. */\n bool EqualDescriptor(std::string a, std::string b)\n@@ -148,6 +149,21 @@ void DoCheck(const std::string& prv, const std::string& pub, int flags, const st\n             BOOST_CHECK(script_provider.scripts == script_provider_cached.scripts);\n             BOOST_CHECK(script_provider.origins == script_provider_cached.origins);\n \n+            // Make sure we can expand using cached xpubs for unhardened derivation\n+            if (!(flags & DERIVE_HARDENED)) {\n+                // Evaluate the descriptor at i + 1\n+                FlatSigningProvider script_provider1, script_provider_cached1;\n+                std::vector<CScript> spks1, spk1_from_cache;\n+                BOOST_CHECK((t ? parse_priv : parse_pub)->Expand(i + 1, key_provider, spks1, script_provider1, nullptr));\n+\n+                // Try again but use the cache from expanding i. That cache won't have the pubkeys for i + 1, but will have the parent xpub for derivation.\n+                BOOST_CHECK(parse_pub->ExpandFromCache(i + 1, desc_cache, spk1_from_cache, script_provider_cached1));\n+                BOOST_CHECK(spks1 == spk1_from_cache);\n+                BOOST_CHECK(script_provider1.pubkeys == script_provider_cached1.pubkeys);\n+                BOOST_CHECK(script_provider1.scripts == script_provider_cached1.scripts);\n+                BOOST_CHECK(script_provider1.origins == script_provider_cached1.origins);\n+            }\n+\n             // For each of the produced scripts, verify solvability, and when possible, try to sign a transaction spending it.\n             for (size_t n = 0; n < spks.size(); ++n) {\n                 BOOST_CHECK_EQUAL(ref[n], HexStr(spks[n].begin(), spks[n].end()));\n@@ -248,7 +264,7 @@ BOOST_AUTO_TEST_CASE(descriptor_test)\n     Check(\"pk(xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L/0)\", \"pk(xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y/0)\", DEFAULT, {{\"210379e45b3cf75f9c5f9befd8e9506fb962f6a9d185ac87001ec44a8d3df8d4a9e3ac\"}}, nullopt, {{0}});\n     Check(\"pkh(xprv9s21ZrQH143K31xYSDQpPDxsXRTUcvj2iNHm5NUtrGiGG5e2DtALGdso3pGz6ssrdK4PFmM8NSpSBHNqPqm55Qn3LqFtT2emdEXVYsCzC2U/2147483647'/0)\", \"pkh(xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/2147483647'/0)\", HARDENED, {{\"76a914ebdc90806a9c4356c1c88e42216611e1cb4c1c1788ac\"}}, OutputType::LEGACY, {{0xFFFFFFFFUL,0}});\n     Check(\"wpkh([ffffffff/13']xprv9vHkqa6EV4sPZHYqZznhT2NPtPCjKuDKGY38FBWLvgaDx45zo9WQRUT3dKYnjwih2yJD9mkrocEZXo1ex8G81dwSM1fwqWpWkeS3v86pgKt/1/2/*)\", \"wpkh([ffffffff/13']xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/1/2/*)\", RANGE, {{\"0014326b2249e3a25d5dc60935f044ee835d090ba859\"},{\"0014af0bd98abc2f2cae66e36896a39ffe2d32984fb7\"},{\"00141fa798efd1cbf95cebf912c031b8a4a6e9fb9f27\"}}, OutputType::BECH32, {{0x8000000DUL, 1, 2, 0}, {0x8000000DUL, 1, 2, 1}, {0x8000000DUL, 1, 2, 2}});\n-    Check(\"sh(wpkh(xprv9s21ZrQH143K3QTDL4LXw2F7HEK3wJUD2nW2nRk4stbPy6cq3jPPqjiChkVvvNKmPGJxWUtg6LnF5kejMRNNU3TGtRBeJgk33yuGBxrMPHi/10/20/30/40/*'))\", \"sh(wpkh(xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8/10/20/30/40/*'))\", RANGE | HARDENED, {{\"a9149a4d9901d6af519b2a23d4a2f51650fcba87ce7b87\"},{\"a914bed59fc0024fae941d6e20a3b44a109ae740129287\"},{\"a9148483aa1116eb9c05c482a72bada4b1db24af654387\"}}, OutputType::P2SH_SEGWIT, {{10, 20, 30, 40, 0x80000000UL}, {10, 20, 30, 40, 0x80000001UL}, {10, 20, 30, 40, 0x80000002UL}});\n+    Check(\"sh(wpkh(xprv9s21ZrQH143K3QTDL4LXw2F7HEK3wJUD2nW2nRk4stbPy6cq3jPPqjiChkVvvNKmPGJxWUtg6LnF5kejMRNNU3TGtRBeJgk33yuGBxrMPHi/10/20/30/40/*'))\", \"sh(wpkh(xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8/10/20/30/40/*'))\", RANGE | HARDENED | DERIVE_HARDENED, {{\"a9149a4d9901d6af519b2a23d4a2f51650fcba87ce7b87\"},{\"a914bed59fc0024fae941d6e20a3b44a109ae740129287\"},{\"a9148483aa1116eb9c05c482a72bada4b1db24af654387\"}}, OutputType::P2SH_SEGWIT, {{10, 20, 30, 40, 0x80000000UL}, {10, 20, 30, 40, 0x80000001UL}, {10, 20, 30, 40, 0x80000002UL}});\n     Check(\"combo(xprvA2JDeKCSNNZky6uBCviVfJSKyQ1mDYahRjijr5idH2WwLsEd4Hsb2Tyh8RfQMuPh7f7RtyzTtdrbdqqsunu5Mm3wDvUAKRHSC34sJ7in334/*)\", \"combo(xpub6FHa3pjLCk84BayeJxFW2SP4XRrFd1JYnxeLeU8EqN3vDfZmbqBqaGJAyiLjTAwm6ZLRQUMv1ZACTj37sR62cfN7fe5JnJ7dh8zL4fiyLHV/*)\", RANGE, {{\"2102df12b7035bdac8e3bab862a3a83d06ea6b17b6753d52edecba9be46f5d09e076ac\",\"76a914f90e3178ca25f2c808dc76624032d352fdbdfaf288ac\",\"0014f90e3178ca25f2c808dc76624032d352fdbdfaf2\",\"a91408f3ea8c68d4a7585bf9e8bda226723f70e445f087\"},{\"21032869a233c9adff9a994e4966e5b821fd5bac066da6c3112488dc52383b4a98ecac\",\"76a914a8409d1b6dfb1ed2a3e8aa5e0ef2ff26b15b75b788ac\",\"0014a8409d1b6dfb1ed2a3e8aa5e0ef2ff26b15b75b7\",\"a91473e39884cb71ae4e5ac9739e9225026c99763e6687\"}}, nullopt, {{0}, {1}});\n     CheckUnparsable(\"combo([012345678]xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc)\", \"combo([012345678]xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL)\", \"Fingerprint is not 4 bytes (9 characters instead of 8 characters)\"); // Too long key fingerprint\n     CheckUnparsable(\"pkh(xprv9s21ZrQH143K31xYSDQpPDxsXRTUcvj2iNHm5NUtrGiGG5e2DtALGdso3pGz6ssrdK4PFmM8NSpSBHNqPqm55Qn3LqFtT2emdEXVYsCzC2U/2147483648)\", \"pkh(xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/2147483648)\", \"Key path value 2147483648 is out of range\"); // BIP 32 path element overflow\n@@ -260,7 +276,7 @@ BOOST_AUTO_TEST_CASE(descriptor_test)\n     Check(\"sortedmulti(1,5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss,L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)\", \"sortedmulti(1,04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235,03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)\", SIGNABLE, {{\"512103a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd4104a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea23552ae\"}}, nullopt);\n     Check(\"sh(multi(2,[00000000/111'/222]xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc,xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L/0))\", \"sh(multi(2,[00000000/111'/222]xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL,xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y/0))\", DEFAULT, {{\"a91445a9a622a8b0a1269944be477640eedc447bbd8487\"}}, OutputType::LEGACY, {{0x8000006FUL,222},{0}});\n     Check(\"sortedmulti(2,xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc/*,xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L/0/0/*)\", \"sortedmulti(2,xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL/*,xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y/0/0/*)\", RANGE, {{\"5221025d5fc65ebb8d44a5274b53bac21ff8307fec2334a32df05553459f8b1f7fe1b62102fbd47cc8034098f0e6a94c6aeee8528abf0a2153a5d8e46d325b7284c046784652ae\"}, {\"52210264fd4d1f5dea8ded94c61e9641309349b62f27fbffe807291f664e286bfbe6472103f4ece6dfccfa37b211eb3d0af4d0c61dba9ef698622dc17eecdf764beeb005a652ae\"}, {\"5221022ccabda84c30bad578b13c89eb3b9544ce149787e5b538175b1d1ba259cbb83321024d902e1a2fc7a8755ab5b694c575fce742c48d9ff192e63df5193e4c7afe1f9c52ae\"}}, nullopt, {{0}, {1}, {2}, {0, 0, 0}, {0, 0, 1}, {0, 0, 2}});\n-    Check(\"wsh(multi(2,xprv9s21ZrQH143K31xYSDQpPDxsXRTUcvj2iNHm5NUtrGiGG5e2DtALGdso3pGz6ssrdK4PFmM8NSpSBHNqPqm55Qn3LqFtT2emdEXVYsCzC2U/2147483647'/0,xprv9vHkqa6EV4sPZHYqZznhT2NPtPCjKuDKGY38FBWLvgaDx45zo9WQRUT3dKYnjwih2yJD9mkrocEZXo1ex8G81dwSM1fwqWpWkeS3v86pgKt/1/2/*,xprv9s21ZrQH143K3QTDL4LXw2F7HEK3wJUD2nW2nRk4stbPy6cq3jPPqjiChkVvvNKmPGJxWUtg6LnF5kejMRNNU3TGtRBeJgk33yuGBxrMPHi/10/20/30/40/*'))\", \"wsh(multi(2,xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/2147483647'/0,xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/1/2/*,xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8/10/20/30/40/*'))\", HARDENED | RANGE, {{\"0020b92623201f3bb7c3771d45b2ad1d0351ea8fbf8cfe0a0e570264e1075fa1948f\"},{\"002036a08bbe4923af41cf4316817c93b8d37e2f635dd25cfff06bd50df6ae7ea203\"},{\"0020a96e7ab4607ca6b261bfe3245ffda9c746b28d3f59e83d34820ec0e2b36c139c\"}}, OutputType::BECH32, {{0xFFFFFFFFUL,0}, {1,2,0}, {1,2,1}, {1,2,2}, {10, 20, 30, 40, 0x80000000UL}, {10, 20, 30, 40, 0x80000001UL}, {10, 20, 30, 40, 0x80000002UL}});\n+    Check(\"wsh(multi(2,xprv9s21ZrQH143K31xYSDQpPDxsXRTUcvj2iNHm5NUtrGiGG5e2DtALGdso3pGz6ssrdK4PFmM8NSpSBHNqPqm55Qn3LqFtT2emdEXVYsCzC2U/2147483647'/0,xprv9vHkqa6EV4sPZHYqZznhT2NPtPCjKuDKGY38FBWLvgaDx45zo9WQRUT3dKYnjwih2yJD9mkrocEZXo1ex8G81dwSM1fwqWpWkeS3v86pgKt/1/2/*,xprv9s21ZrQH143K3QTDL4LXw2F7HEK3wJUD2nW2nRk4stbPy6cq3jPPqjiChkVvvNKmPGJxWUtg6LnF5kejMRNNU3TGtRBeJgk33yuGBxrMPHi/10/20/30/40/*'))\", \"wsh(multi(2,xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/2147483647'/0,xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/1/2/*,xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8/10/20/30/40/*'))\", HARDENED | RANGE | DERIVE_HARDENED, {{\"0020b92623201f3bb7c3771d45b2ad1d0351ea8fbf8cfe0a0e570264e1075fa1948f\"},{\"002036a08bbe4923af41cf4316817c93b8d37e2f635dd25cfff06bd50df6ae7ea203\"},{\"0020a96e7ab4607ca6b261bfe3245ffda9c746b28d3f59e83d34820ec0e2b36c139c\"}}, OutputType::BECH32, {{0xFFFFFFFFUL,0}, {1,2,0}, {1,2,1}, {1,2,2}, {10, 20, 30, 40, 0x80000000UL}, {10, 20, 30, 40, 0x80000001UL}, {10, 20, 30, 40, 0x80000002UL}});\n     Check(\"sh(wsh(multi(16,KzoAz5CanayRKex3fSLQ2BwJpN7U52gZvxMyk78nDMHuqrUxuSJy,KwGNz6YCCQtYvFzMtrC6D3tKTKdBBboMrLTsjr2NYVBwapCkn7Mr,KxogYhiNfwxuswvXV66eFyKcCpm7dZ7TqHVqujHAVUjJxyivxQ9X,L2BUNduTSyZwZjwNHynQTF14mv2uz2NRq5n5sYWTb4FkkmqgEE9f,L1okJGHGn1kFjdXHKxXjwVVtmCMR2JA5QsbKCSpSb7ReQjezKeoD,KxDCNSST75HFPaW5QKpzHtAyaCQC7p9Vo3FYfi2u4dXD1vgMiboK,L5edQjFtnkcf5UWURn6UuuoFrabgDQUHdheKCziwN42aLwS3KizU,KzF8UWFcEC7BYTq8Go1xVimMkDmyNYVmXV5PV7RuDicvAocoPB8i,L3nHUboKG2w4VSJ5jYZ5CBM97oeK6YuKvfZxrefdShECcjEYKMWZ,KyjHo36dWkYhimKmVVmQTq3gERv3pnqA4xFCpvUgbGDJad7eS8WE,KwsfyHKRUTZPQtysN7M3tZ4GXTnuov5XRgjdF2XCG8faAPmFruRF,KzCUbGhN9LJhdeFfL9zQgTJMjqxdBKEekRGZX24hXdgCNCijkkap,KzgpMBwwsDLwkaC5UrmBgCYaBD2WgZ7PBoGYXR8KT7gCA9UTN5a3,KyBXTPy4T7YG4q9tcAM3LkvfRpD1ybHMvcJ2ehaWXaSqeGUxEdkP,KzJDe9iwJRPtKP2F2AoN6zBgzS7uiuAwhWCfGdNeYJ3PC1HNJ8M8,L1xbHrxynrqLKkoYc4qtoQPx6uy5qYXR5ZDYVYBSRmCV5piU3JG9)))\",\"sh(wsh(multi(16,03669b8afcec803a0d323e9a17f3ea8e68e8abe5a278020a929adbec52421adbd0,0260b2003c386519fc9eadf2b5cf124dd8eea4c4e68d5e154050a9346ea98ce600,0362a74e399c39ed5593852a30147f2959b56bb827dfa3e60e464b02ccf87dc5e8,0261345b53de74a4d721ef877c255429961b7e43714171ac06168d7e08c542a8b8,02da72e8b46901a65d4374fe6315538d8f368557dda3a1dcf9ea903f3afe7314c8,0318c82dd0b53fd3a932d16e0ba9e278fcc937c582d5781be626ff16e201f72286,0297ccef1ef99f9d73dec9ad37476ddb232f1238aff877af19e72ba04493361009,02e502cfd5c3f972fe9a3e2a18827820638f96b6f347e54d63deb839011fd5765d,03e687710f0e3ebe81c1037074da939d409c0025f17eb86adb9427d28f0f7ae0e9,02c04d3a5274952acdbc76987f3184b346a483d43be40874624b29e3692c1df5af,02ed06e0f418b5b43a7ec01d1d7d27290fa15f75771cb69b642a51471c29c84acd,036d46073cbb9ffee90473f3da429abc8de7f8751199da44485682a989a4bebb24,02f5d1ff7c9029a80a4e36b9a5497027ef7f3e73384a4a94fbfe7c4e9164eec8bc,02e41deffd1b7cce11cde209a781adcffdabd1b91c0ba0375857a2bfd9302419f3,02d76625f7956a7fc505ab02556c23ee72d832f1bac391bcd2d3abce5710a13d06,0399eb0a5487515802dc14544cf10b3666623762fbed2ec38a3975716e2c29c232)))\", SIGNABLE, {{\"a9147fc63e13dc25e8a95a3cee3d9a714ac3afd96f1e87\"}}, OutputType::P2SH_SEGWIT);\n     CheckUnparsable(\"sh(multi(16,KzoAz5CanayRKex3fSLQ2BwJpN7U52gZvxMyk78nDMHuqrUxuSJy,KwGNz6YCCQtYvFzMtrC6D3tKTKdBBboMrLTsjr2NYVBwapCkn7Mr,KxogYhiNfwxuswvXV66eFyKcCpm7dZ7TqHVqujHAVUjJxyivxQ9X,L2BUNduTSyZwZjwNHynQTF14mv2uz2NRq5n5sYWTb4FkkmqgEE9f,L1okJGHGn1kFjdXHKxXjwVVtmCMR2JA5QsbKCSpSb7ReQjezKeoD,KxDCNSST75HFPaW5QKpzHtAyaCQC7p9Vo3FYfi2u4dXD1vgMiboK,L5edQjFtnkcf5UWURn6UuuoFrabgDQUHdheKCziwN42aLwS3KizU,KzF8UWFcEC7BYTq8Go1xVimMkDmyNYVmXV5PV7RuDicvAocoPB8i,L3nHUboKG2w4VSJ5jYZ5CBM97oeK6YuKvfZxrefdShECcjEYKMWZ,KyjHo36dWkYhimKmVVmQTq3gERv3pnqA4xFCpvUgbGDJad7eS8WE,KwsfyHKRUTZPQtysN7M3tZ4GXTnuov5XRgjdF2XCG8faAPmFruRF,KzCUbGhN9LJhdeFfL9zQgTJMjqxdBKEekRGZX24hXdgCNCijkkap,KzgpMBwwsDLwkaC5UrmBgCYaBD2WgZ7PBoGYXR8KT7gCA9UTN5a3,KyBXTPy4T7YG4q9tcAM3LkvfRpD1ybHMvcJ2ehaWXaSqeGUxEdkP,KzJDe9iwJRPtKP2F2AoN6zBgzS7uiuAwhWCfGdNeYJ3PC1HNJ8M8,L1xbHrxynrqLKkoYc4qtoQPx6uy5qYXR5ZDYVYBSRmCV5piU3JG9))\",\"sh(multi(16,03669b8afcec803a0d323e9a17f3ea8e68e8abe5a278020a929adbec52421adbd0,0260b2003c386519fc9eadf2b5cf124dd8eea4c4e68d5e154050a9346ea98ce600,0362a74e399c39ed5593852a30147f2959b56bb827dfa3e60e464b02ccf87dc5e8,0261345b53de74a4d721ef877c255429961b7e43714171ac06168d7e08c542a8b8,02da72e8b46901a65d4374fe6315538d8f368557dda3a1dcf9ea903f3afe7314c8,0318c82dd0b53fd3a932d16e0ba9e278fcc937c582d5781be626ff16e201f72286,0297ccef1ef99f9d73dec9ad37476ddb232f1238aff877af19e72ba04493361009,02e502cfd5c3f972fe9a3e2a18827820638f96b6f347e54d63deb839011fd5765d,03e687710f0e3ebe81c1037074da939d409c0025f17eb86adb9427d28f0f7ae0e9,02c04d3a5274952acdbc76987f3184b346a483d43be40874624b29e3692c1df5af,02ed06e0f418b5b43a7ec01d1d7d27290fa15f75771cb69b642a51471c29c84acd,036d46073cbb9ffee90473f3da429abc8de7f8751199da44485682a989a4bebb24,02f5d1ff7c9029a80a4e36b9a5497027ef7f3e73384a4a94fbfe7c4e9164eec8bc,02e41deffd1b7cce11cde209a781adcffdabd1b91c0ba0375857a2bfd9302419f3,02d76625f7956a7fc505ab02556c23ee72d832f1bac391bcd2d3abce5710a13d06,0399eb0a5487515802dc14544cf10b3666623762fbed2ec38a3975716e2c29c232))\", \"P2SH script is too large, 547 bytes is larger than 520 bytes\"); // P2SH does not fit 16 compressed pubkeys in a redeemscript\n     CheckUnparsable(\"wsh(multi(2,[aaaaaaaa][aaaaaaaa]xprv9s21ZrQH143K31xYSDQpPDxsXRTUcvj2iNHm5NUtrGiGG5e2DtALGdso3pGz6ssrdK4PFmM8NSpSBHNqPqm55Qn3LqFtT2emdEXVYsCzC2U/2147483647'/0,xprv9vHkqa6EV4sPZHYqZznhT2NPtPCjKuDKGY38FBWLvgaDx45zo9WQRUT3dKYnjwih2yJD9mkrocEZXo1ex8G81dwSM1fwqWpWkeS3v86pgKt/1/2/*,xprv9s21ZrQH143K3QTDL4LXw2F7HEK3wJUD2nW2nRk4stbPy6cq3jPPqjiChkVvvNKmPGJxWUtg6LnF5kejMRNNU3TGtRBeJgk33yuGBxrMPHi/10/20/30/40/*'))\", \"wsh(multi(2,[aaaaaaaa][aaaaaaaa]xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/2147483647'/0,xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/1/2/*,xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8/10/20/30/40/*'))\", \"Multiple ']' characters found for a single pubkey\"); // Double key origin descriptor"
      }
    ]
  },
  {
    "sha": "deb791c7ba057a3765d09b12bf3e55547a5298e4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZWI3OTFjN2JhMDU3YTM3NjVkMDliMTJiZjNlNTU1NDdhNTI5OGU0",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-02-26T21:52:03Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-03-07T15:13:47Z"
      },
      "message": "Only cache xpubs that have a hardened last step\n\nAlso adds tests for this:\nFor ranged descriptors with unhardened derivation, we expect to\nfind parent keys in the cache but no child keys.\n\nFor descriptors containing an xpub but do not have unhardened derivation\n(i.e. hardened derivation or single xpub with or without derivation),\nwe expect to find all of the keys in the cache, and the same\nnumber of keys in the cache as in the SigningProvider.\n\nFor everything else (no xpub), nothing should be cached at all.",
      "tree": {
        "sha": "8ed217eb7166a4a171b55ba4c1ebe90bfc736442",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8ed217eb7166a4a171b55ba4c1ebe90bfc736442"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/deb791c7ba057a3765d09b12bf3e55547a5298e4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/deb791c7ba057a3765d09b12bf3e55547a5298e4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/deb791c7ba057a3765d09b12bf3e55547a5298e4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/deb791c7ba057a3765d09b12bf3e55547a5298e4/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f76733eda5f4c161e9eb47c74b949582ab8f448a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f76733eda5f4c161e9eb47c74b949582ab8f448a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f76733eda5f4c161e9eb47c74b949582ab8f448a"
      }
    ],
    "stats": {
      "total": 51,
      "additions": 50,
      "deletions": 1
    },
    "files": [
      {
        "sha": "588e5833390ce21436ed895ac6b2ea0556545dbc",
        "filename": "src/script/descriptor.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/deb791c7ba057a3765d09b12bf3e55547a5298e4/src/script/descriptor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/deb791c7ba057a3765d09b12bf3e55547a5298e4/src/script/descriptor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.cpp?ref=deb791c7ba057a3765d09b12bf3e55547a5298e4",
        "patch": "@@ -345,10 +345,11 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n         key_out = final_extkey.pubkey;\n \n         if (write_cache) {\n-            write_cache->CacheDerivedExtPubKey(m_expr_index, pos, final_extkey);\n             // Only cache parent if there is any unhardened derivation\n             if (m_derive != DeriveType::HARDENED) {\n                 write_cache->CacheParentExtPubKey(m_expr_index, parent_extkey);\n+            } else if (final_info_out.path.size() > 0) {\n+                write_cache->CacheDerivedExtPubKey(m_expr_index, pos, final_extkey);\n             }\n         }\n "
      },
      {
        "sha": "3154c619d2a027e9efcdbb48cabe8465f11cd7f7",
        "filename": "src/test/descriptor_tests.cpp",
        "status": "modified",
        "additions": 48,
        "deletions": 0,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/deb791c7ba057a3765d09b12bf3e55547a5298e4/src/test/descriptor_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/deb791c7ba057a3765d09b12bf3e55547a5298e4/src/test/descriptor_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/descriptor_tests.cpp?ref=deb791c7ba057a3765d09b12bf3e55547a5298e4",
        "patch": "@@ -149,6 +149,54 @@ void DoCheck(const std::string& prv, const std::string& pub, int flags, const st\n             BOOST_CHECK(script_provider.scripts == script_provider_cached.scripts);\n             BOOST_CHECK(script_provider.origins == script_provider_cached.origins);\n \n+            // Check whether keys are in the cache\n+            const auto& der_xpub_cache = desc_cache.GetCachedDerivedExtPubKeys();\n+            const auto& parent_xpub_cache = desc_cache.GetCachedParentExtPubKeys();\n+            if ((flags & RANGE) && !(flags & DERIVE_HARDENED)) {\n+                // For ranged, unhardened derivation, None of the keys in origins should appear in the cache but the cache should have parent keys\n+                // But we can derive one level from each of those parent keys and find them all\n+                BOOST_CHECK(der_xpub_cache.empty());\n+                BOOST_CHECK(parent_xpub_cache.size() > 0);\n+                std::set<CPubKey> pubkeys;\n+                for (const auto& xpub_pair : parent_xpub_cache) {\n+                    const CExtPubKey& xpub = xpub_pair.second;\n+                    CExtPubKey der;\n+                    xpub.Derive(der, i);\n+                    pubkeys.insert(der.pubkey);\n+                }\n+                for (const auto& origin_pair : script_provider_cached.origins) {\n+                    const CPubKey& pk = origin_pair.second.first;\n+                    BOOST_CHECK(pubkeys.count(pk) > 0);\n+                }\n+            } else if (pub1.find(\"xpub\") != std::string::npos) {\n+                // For ranged, hardened derivation, or not ranged, but has an xpub, all of the keys should appear in the cache\n+                BOOST_CHECK(der_xpub_cache.size() + parent_xpub_cache.size() == script_provider_cached.origins.size());\n+                // Get all of the derived pubkeys\n+                std::set<CPubKey> pubkeys;\n+                for (const auto& xpub_map_pair : der_xpub_cache) {\n+                    for (const auto& xpub_pair : xpub_map_pair.second) {\n+                        const CExtPubKey& xpub = xpub_pair.second;\n+                        pubkeys.insert(xpub.pubkey);\n+                    }\n+                }\n+                // Derive one level from all of the parents\n+                for (const auto& xpub_pair : parent_xpub_cache) {\n+                    const CExtPubKey& xpub = xpub_pair.second;\n+                    pubkeys.insert(xpub.pubkey);\n+                    CExtPubKey der;\n+                    xpub.Derive(der, i);\n+                    pubkeys.insert(der.pubkey);\n+                }\n+                for (const auto& origin_pair : script_provider_cached.origins) {\n+                    const CPubKey& pk = origin_pair.second.first;\n+                    BOOST_CHECK(pubkeys.count(pk) > 0);\n+                }\n+            } else {\n+                // No xpub, nothing should be cached\n+                BOOST_CHECK(der_xpub_cache.empty());\n+                BOOST_CHECK(parent_xpub_cache.empty());\n+            }\n+\n             // Make sure we can expand using cached xpubs for unhardened derivation\n             if (!(flags & DERIVE_HARDENED)) {\n                 // Evaluate the descriptor at i + 1"
      }
    ]
  },
  {
    "sha": "09e25071f40c564af08a1386c39c4f2d8eb484b6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowOWUyNTA3MWY0MGM1NjRhZjA4YTEzODZjMzljNGYyZDhlYjQ4NGI2",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-02-28T21:55:24Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-03-07T15:13:47Z"
      },
      "message": "Cache parent xpub inside of BIP32PubkeyProvider\n\nOptimize Expand by having BIP32PubkeyProvider also cache the parent\n(or only) xpub within itself. Since Expand does not provide a read\ncache, it is useful to internally cache this xpub to avoid re-deriving\nthe same xpub.",
      "tree": {
        "sha": "6469e968a89929f5d3d1859544c07e9c45d834c6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6469e968a89929f5d3d1859544c07e9c45d834c6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/09e25071f40c564af08a1386c39c4f2d8eb484b6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/09e25071f40c564af08a1386c39c4f2d8eb484b6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/09e25071f40c564af08a1386c39c4f2d8eb484b6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/09e25071f40c564af08a1386c39c4f2d8eb484b6/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "deb791c7ba057a3765d09b12bf3e55547a5298e4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/deb791c7ba057a3765d09b12bf3e55547a5298e4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/deb791c7ba057a3765d09b12bf3e55547a5298e4"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 15,
      "deletions": 4
    },
    "files": [
      {
        "sha": "83dc046ca15e77b1743919637300b0726dc1b995",
        "filename": "src/script/descriptor.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 4,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/09e25071f40c564af08a1386c39c4f2d8eb484b6/src/script/descriptor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/09e25071f40c564af08a1386c39c4f2d8eb484b6/src/script/descriptor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.cpp?ref=09e25071f40c564af08a1386c39c4f2d8eb484b6",
        "patch": "@@ -165,7 +165,7 @@ struct PubkeyProvider\n      *  write_cache is the cache to write keys to (if not nullptr)\n      *  Caches are not exclusive but this is not tested. Currently we use them exclusively\n      */\n-    virtual bool GetPubKey(int pos, const SigningProvider& arg, CPubKey& key, KeyOriginInfo& info, const DescriptorCache* read_cache = nullptr, DescriptorCache* write_cache = nullptr) const = 0;\n+    virtual bool GetPubKey(int pos, const SigningProvider& arg, CPubKey& key, KeyOriginInfo& info, const DescriptorCache* read_cache = nullptr, DescriptorCache* write_cache = nullptr) = 0;\n \n     /** Whether this represent multiple public keys at different positions. */\n     virtual bool IsRange() const = 0;\n@@ -195,7 +195,7 @@ class OriginPubkeyProvider final : public PubkeyProvider\n \n public:\n     OriginPubkeyProvider(uint32_t exp_index, KeyOriginInfo info, std::unique_ptr<PubkeyProvider> provider) : PubkeyProvider(exp_index), m_origin(std::move(info)), m_provider(std::move(provider)) {}\n-    bool GetPubKey(int pos, const SigningProvider& arg, CPubKey& key, KeyOriginInfo& info, const DescriptorCache* read_cache = nullptr, DescriptorCache* write_cache = nullptr) const override\n+    bool GetPubKey(int pos, const SigningProvider& arg, CPubKey& key, KeyOriginInfo& info, const DescriptorCache* read_cache = nullptr, DescriptorCache* write_cache = nullptr) override\n     {\n         if (!m_provider->GetPubKey(pos, arg, key, info, read_cache, write_cache)) return false;\n         std::copy(std::begin(m_origin.fingerprint), std::end(m_origin.fingerprint), info.fingerprint);\n@@ -225,7 +225,7 @@ class ConstPubkeyProvider final : public PubkeyProvider\n \n public:\n     ConstPubkeyProvider(uint32_t exp_index, const CPubKey& pubkey) : PubkeyProvider(exp_index), m_pubkey(pubkey) {}\n-    bool GetPubKey(int pos, const SigningProvider& arg, CPubKey& key, KeyOriginInfo& info, const DescriptorCache* read_cache = nullptr, DescriptorCache* write_cache = nullptr) const override\n+    bool GetPubKey(int pos, const SigningProvider& arg, CPubKey& key, KeyOriginInfo& info, const DescriptorCache* read_cache = nullptr, DescriptorCache* write_cache = nullptr) override\n     {\n         key = m_pubkey;\n         info.path.clear();\n@@ -262,6 +262,9 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n     CExtPubKey m_root_extkey;\n     KeyPath m_path;\n     DeriveType m_derive;\n+    // Cache of the parent of the final derived pubkeys.\n+    // Primarily useful for situations when no read_cache is provided\n+    CExtPubKey m_cached_xpub;\n \n     bool GetExtKey(const SigningProvider& arg, CExtKey& ret) const\n     {\n@@ -298,7 +301,7 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n     BIP32PubkeyProvider(uint32_t exp_index, const CExtPubKey& extkey, KeyPath path, DeriveType derive) : PubkeyProvider(exp_index), m_root_extkey(extkey), m_path(std::move(path)), m_derive(derive) {}\n     bool IsRange() const override { return m_derive != DeriveType::NO; }\n     size_t GetSize() const override { return 33; }\n-    bool GetPubKey(int pos, const SigningProvider& arg, CPubKey& key_out, KeyOriginInfo& final_info_out, const DescriptorCache* read_cache = nullptr, DescriptorCache* write_cache = nullptr) const override\n+    bool GetPubKey(int pos, const SigningProvider& arg, CPubKey& key_out, KeyOriginInfo& final_info_out, const DescriptorCache* read_cache = nullptr, DescriptorCache* write_cache = nullptr) override\n     {\n         // Info of parent of the to be derived pubkey\n         KeyOriginInfo parent_info;\n@@ -323,6 +326,9 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n                 final_extkey = parent_extkey;\n                 if (m_derive == DeriveType::UNHARDENED) der = parent_extkey.Derive(final_extkey, pos);\n             }\n+        } else if (m_cached_xpub.pubkey.IsValid() && m_derive != DeriveType::HARDENED) {\n+            parent_extkey = final_extkey = m_cached_xpub;\n+            if (m_derive == DeriveType::UNHARDENED) der = parent_extkey.Derive(final_extkey, pos);\n         } else if (IsHardened()) {\n             CExtKey xprv;\n             if (!GetDerivedExtKey(arg, xprv)) return false;\n@@ -344,6 +350,11 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n         final_info_out = final_info_out_tmp;\n         key_out = final_extkey.pubkey;\n \n+        // We rely on the consumer to check that m_derive isn't HARDENED as above\n+        // But we can't have already cached something in case we read something from the cache\n+        // and parent_extkey isn't actually the parent.\n+        if (!m_cached_xpub.pubkey.IsValid()) m_cached_xpub = parent_extkey;\n+\n         if (write_cache) {\n             // Only cache parent if there is any unhardened derivation\n             if (m_derive != DeriveType::HARDENED) {"
      }
    ]
  }
]