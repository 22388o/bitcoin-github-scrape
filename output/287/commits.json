[
  {
    "sha": "ff8c58818c366e922591c3612ee5b73360852735",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZjhjNTg4MThjMzY2ZTkyMjU5MWMzNjEyZWU1YjczMzYwODUyNzM1",
    "commit": {
      "author": {
        "name": "Gabriel De Repentigny",
        "email": "gabriel@defectless.com",
        "date": "2011-05-30T22:02:48Z"
      },
      "committer": {
        "name": "Gabriel De Repentigny",
        "email": "gabriel@defectless.com",
        "date": "2011-05-30T22:02:48Z"
      },
      "message": "Support for customized wallet location",
      "tree": {
        "sha": "5eb1048d295e35ddb5a75370221c42acaeb1174c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5eb1048d295e35ddb5a75370221c42acaeb1174c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ff8c58818c366e922591c3612ee5b73360852735",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff8c58818c366e922591c3612ee5b73360852735",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ff8c58818c366e922591c3612ee5b73360852735",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff8c58818c366e922591c3612ee5b73360852735/comments",
    "author": {
      "login": "bittrader",
      "id": 819465,
      "node_id": "MDQ6VXNlcjgxOTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/819465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bittrader",
      "html_url": "https://github.com/bittrader",
      "followers_url": "https://api.github.com/users/bittrader/followers",
      "following_url": "https://api.github.com/users/bittrader/following{/other_user}",
      "gists_url": "https://api.github.com/users/bittrader/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bittrader/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bittrader/subscriptions",
      "organizations_url": "https://api.github.com/users/bittrader/orgs",
      "repos_url": "https://api.github.com/users/bittrader/repos",
      "events_url": "https://api.github.com/users/bittrader/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bittrader/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "bittrader",
      "id": 819465,
      "node_id": "MDQ6VXNlcjgxOTQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/819465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bittrader",
      "html_url": "https://github.com/bittrader",
      "followers_url": "https://api.github.com/users/bittrader/followers",
      "following_url": "https://api.github.com/users/bittrader/following{/other_user}",
      "gists_url": "https://api.github.com/users/bittrader/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bittrader/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bittrader/subscriptions",
      "organizations_url": "https://api.github.com/users/bittrader/orgs",
      "repos_url": "https://api.github.com/users/bittrader/repos",
      "events_url": "https://api.github.com/users/bittrader/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bittrader/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5fecb27c1ec6b583fa07028cd26c21dd191c125f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5fecb27c1ec6b583fa07028cd26c21dd191c125f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5fecb27c1ec6b583fa07028cd26c21dd191c125f"
      }
    ],
    "stats": {
      "total": 84,
      "additions": 63,
      "deletions": 21
    },
    "files": [
      {
        "sha": "e78feb10a086852de347fbcffc4b1b3bdf11cc0e",
        "filename": "src/db.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 13,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff8c58818c366e922591c3612ee5b73360852735/src/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff8c58818c366e922591c3612ee5b73360852735/src/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.cpp?ref=ff8c58818c366e922591c3612ee5b73360852735",
        "patch": "@@ -12,6 +12,7 @@ void ThreadFlushWalletDB(void* parg);\n \n unsigned int nWalletDBUpdated;\n uint64 nAccountingEntryNumber = 0;\n+string strWalletFilePath; // updated when the user's wallet is loaded\n \n \n \n@@ -94,6 +95,16 @@ CDB::CDB(const char* pszFile, const char* pszMode) : pdb(NULL)\n         {\n             pdb = new Db(&dbenv, 0);\n \n+            // Prevent multiple processes from accessing the database files simultaneously via file lock\n+            filesystem::path pathFile(pszFile);\n+            // If the database file we're about to open is in the main datadir, we don't need to lock now\n+            // because the datadir is locked when the app initializes\n+            if (pathFile.is_complete() && pathFile.parent_path().string() != GetDataDir())\n+            {\n+                if (!LockDirectory(pathFile.parent_path().string()))\n+                    throw runtime_error(strprintf(\"Cannot obtain a lock on database directory %s.\", pathFile.parent_path().string().c_str()));\n+            }\n+\n             ret = pdb->open(NULL,      // Txn pointer\n                             pszFile,   // Filename\n                             \"main\",    // Logical db name\n@@ -584,6 +595,8 @@ bool LoadAddresses()\n static set<int64> setKeyPool;\n static CCriticalSection cs_setKeyPool;\n \n+char* CWalletDB::pszSavedWalletFilePath; // saved the first time CWalletDB is initialized with a file path\n+\n bool CWalletDB::ReadAccount(const string& strAccount, CAccount& account)\n {\n     account.SetNull();\n@@ -828,10 +841,11 @@ bool CWalletDB::LoadWallet()\n     return true;\n }\n \n-bool LoadWallet(bool& fFirstRunRet)\n+bool LoadWallet(bool& fFirstRunRet, const char* pszWalletFilePath)\n {\n     fFirstRunRet = false;\n-    if (!CWalletDB(\"cr+\").LoadWallet())\n+    strWalletFilePath = pszWalletFilePath;\n+    if (!CWalletDB(\"cr+\", pszWalletFilePath).LoadWallet())\n         return false;\n     fFirstRunRet = vchDefaultKey.empty();\n \n@@ -894,8 +908,7 @@ void ThreadFlushWalletDB(void* parg)\n \n                 if (nRefCount == 0 && !fShutdown)\n                 {\n-                    string strFile = \"wallet.dat\";\n-                    map<string, int>::iterator mi = mapFileUseCount.find(strFile);\n+                    map<string, int>::iterator mi = mapFileUseCount.find(strWalletFilePath);\n                     if (mi != mapFileUseCount.end())\n                     {\n                         printf(\"%s \", DateTimeStrFormat(\"%x %H:%M:%S\", GetTime()).c_str());\n@@ -904,9 +917,9 @@ void ThreadFlushWalletDB(void* parg)\n                         int64 nStart = GetTimeMillis();\n \n                         // Flush wallet.dat so it's self contained\n-                        CloseDb(strFile);\n+                        CloseDb(strWalletFilePath);\n                         dbenv.txn_checkpoint(0, 0, 0);\n-                        dbenv.lsn_reset(strFile.c_str(), 0);\n+                        dbenv.lsn_reset(strWalletFilePath.c_str(), 0);\n \n                         mapFileUseCount.erase(mi++);\n                         printf(\"Flushed wallet.dat %\"PRI64d\"ms\\n\", GetTimeMillis() - nStart);\n@@ -923,20 +936,19 @@ void BackupWallet(const string& strDest)\n     {\n         CRITICAL_BLOCK(cs_db)\n         {\n-            const string strFile = \"wallet.dat\";\n-            if (!mapFileUseCount.count(strFile) || mapFileUseCount[strFile] == 0)\n+            if (!mapFileUseCount.count(strWalletFilePath) || mapFileUseCount[strWalletFilePath] == 0)\n             {\n                 // Flush log data to the dat file\n-                CloseDb(strFile);\n+                CloseDb(strWalletFilePath);\n                 dbenv.txn_checkpoint(0, 0, 0);\n-                dbenv.lsn_reset(strFile.c_str(), 0);\n-                mapFileUseCount.erase(strFile);\n+                dbenv.lsn_reset(strWalletFilePath.c_str(), 0);\n+                mapFileUseCount.erase(strWalletFilePath);\n \n                 // Copy wallet.dat\n-                filesystem::path pathSrc(GetDataDir() + \"/\" + strFile);\n+                filesystem::path pathSrc(strWalletFilePath);\n                 filesystem::path pathDest(strDest);\n                 if (filesystem::is_directory(pathDest))\n-                    pathDest = pathDest / strFile;\n+                    pathDest = pathDest / pathSrc.filename();\n #if BOOST_VERSION >= 104000\n                 filesystem::copy_file(pathSrc, pathDest, filesystem::copy_option::overwrite_if_exists);\n #else"
      },
      {
        "sha": "94140c47d491ed511a564e7988746518c294b03a",
        "filename": "src/db.h",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff8c58818c366e922591c3612ee5b73360852735/src/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff8c58818c366e922591c3612ee5b73360852735/src/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.h?ref=ff8c58818c366e922591c3612ee5b73360852735",
        "patch": "@@ -356,12 +356,16 @@ class CKeyPool\n class CWalletDB : public CDB\n {\n public:\n-    CWalletDB(const char* pszMode=\"r+\") : CDB(\"wallet.dat\", pszMode)\n+    CWalletDB(const char* pszMode=\"r+\", const char* pszWalletFilePath=pszSavedWalletFilePath) : CDB(pszWalletFilePath, pszMode)\n     {\n+        // For ease-of-use, the wallet file path only needs to be passed in to CWalletDB the first time it's initialized. After that, it'll remember it automatically\n+        if (pszWalletFilePath != NULL)\n+            pszSavedWalletFilePath = const_cast<char*>(pszWalletFilePath);\n     }\n private:\n     CWalletDB(const CWalletDB&);\n     void operator=(const CWalletDB&);\n+    static char* pszSavedWalletFilePath;\n public:\n     bool ReadName(const std::string& strAddress, std::string& strName)\n     {\n@@ -469,7 +473,7 @@ class CWalletDB : public CDB\n     friend int64 GetOldestKeyPoolTime();\n };\n \n-bool LoadWallet(bool& fFirstRunRet);\n+bool LoadWallet(bool& fFirstRunRet, const char* pszWalletFilePath);\n void BackupWallet(const std::string& strDest);\n \n inline bool SetAddressBookName(const std::string& strAddress, const std::string& strName)"
      },
      {
        "sha": "7ac8de240fe424c4da33e2733d3efc6e891de208",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 6,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff8c58818c366e922591c3612ee5b73360852735/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff8c58818c366e922591c3612ee5b73360852735/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=ff8c58818c366e922591c3612ee5b73360852735",
        "patch": "@@ -152,6 +152,7 @@ bool AppInit2(int argc, char* argv[])\n             \"  -gen=0           \\t\\t  \" + _(\"Don't generate coins\\n\") +\n             \"  -min             \\t\\t  \" + _(\"Start minimized\\n\") +\n             \"  -datadir=<dir>   \\t\\t  \" + _(\"Specify data directory\\n\") +\n+            \"  -wallet=<file>   \\t\\t  \" + _(\"Specify wallet file (default: wallet.dat)\\n\") +\n             \"  -proxy=<ip:port> \\t  \"   + _(\"Connect through socks4 proxy\\n\") +\n             \"  -dns             \\t  \"   + _(\"Allow DNS lookups for addnode and connect\\n\") +\n             \"  -addnode=<ip>    \\t  \"   + _(\"Add a node to connect to\\n\") +\n@@ -321,11 +322,7 @@ bool AppInit2(int argc, char* argv[])\n #endif\n \n     // Make sure only a single bitcoin process is using the data directory.\n-    string strLockFile = GetDataDir() + \"/.lock\";\n-    FILE* file = fopen(strLockFile.c_str(), \"a\"); // empty lock file; created if it doesn't exist.\n-    if (file) fclose(file);\n-    static boost::interprocess::file_lock lock(strLockFile.c_str());\n-    if (!lock.try_lock())\n+    if (!LockDirectory(GetDataDir()))\n     {\n         wxMessageBox(strprintf(_(\"Cannot obtain a lock on data directory %s.  Bitcoin is probably already running.\"), GetDataDir().c_str()), \"Bitcoin\");\n         return false;\n@@ -364,8 +361,9 @@ bool AppInit2(int argc, char* argv[])\n \n     printf(\"Loading wallet...\\n\");\n     nStart = GetTimeMillis();\n+    filesystem::path pathWalletFilePath = filesystem::system_complete(GetWalletFile());\n     bool fFirstRun;\n-    if (!LoadWallet(fFirstRun))\n+    if (!LoadWallet(fFirstRun, pathWalletFilePath.string().c_str()))\n         strErrors += _(\"Error loading wallet.dat      \\n\");\n     printf(\" wallet      %15\"PRI64d\"ms\\n\", GetTimeMillis() - nStart);\n "
      },
      {
        "sha": "769dd5fc3d97ded6cdda44d866db99a318f2fa15",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 0,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff8c58818c366e922591c3612ee5b73360852735/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff8c58818c366e922591c3612ee5b73360852735/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=ff8c58818c366e922591c3612ee5b73360852735",
        "patch": "@@ -725,6 +725,17 @@ string GetConfigFile()\n     return pathConfig.string();\n }\n \n+string GetWalletFile()\n+{\n+    namespace fs = boost::filesystem;\n+    fs::path pathWallet(GetArg(\"-wallet\", \"wallet.dat\"));\n+    if (is_directory(pathWallet))\n+        pathWallet = pathWallet / fs::path(\"wallet.dat\");\n+    if (!pathWallet.is_complete())\n+        pathWallet = fs::path(GetDataDir()) / pathWallet;\n+    return pathWallet.string();\n+}\n+\n void ReadConfigFile(map<string, string>& mapSettingsRet,\n                     map<string, vector<string> >& mapMultiSettingsRet)\n {\n@@ -903,4 +914,19 @@ string FormatFullVersion()\n \n \n \n+bool LockDirectory(string dir)\n+{\n+    string strLockFile = dir + \"/.lock\";\n+    FILE* file = fopen(strLockFile.c_str(), \"a\"); // empty lock file; created if it doesn't exist.\n+    if (file) fclose(file);\n+    static boost::interprocess::file_lock lock(strLockFile.c_str());\n+    if (lock.try_lock())\n+        return true;\n+    else\n+        return false;\n+}\n+\n+\n+\n+\n "
      },
      {
        "sha": "949b636e901a330f9ff301dd3baf245d6d4b888a",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff8c58818c366e922591c3612ee5b73360852735/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff8c58818c366e922591c3612ee5b73360852735/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=ff8c58818c366e922591c3612ee5b73360852735",
        "patch": "@@ -193,6 +193,7 @@ bool WildcardMatch(const std::string& str, const std::string& mask);\n int GetFilesize(FILE* file);\n void GetDataDir(char* pszDirRet);\n std::string GetConfigFile();\n+std::string GetWalletFile();\n std::string GetPidFile();\n void CreatePidFile(std::string pidFile, pid_t pid);\n void ReadConfigFile(std::map<std::string, std::string>& mapSettingsRet, std::map<std::string, std::vector<std::string> >& mapMultiSettingsRet);\n@@ -208,6 +209,7 @@ int64 GetTime();\n int64 GetAdjustedTime();\n void AddTimeData(unsigned int ip, int64 nTime);\n std::string FormatFullVersion();\n+bool LockDirectory(std::string dir);\n \n \n "
      }
    ]
  }
]