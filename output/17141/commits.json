[
  {
    "sha": "eebcdfa86a3dad4969fa9994614bcb446849ed2b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZWJjZGZhODZhM2RhZDQ5NjlmYTk5OTQ2MTRiY2I0NDY4NDllZDJi",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-10-14T21:04:34Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-10-14T21:13:05Z"
      },
      "message": "[test] rename SegwitVersion1SignatureHash()\n\nThe function implementing segwit v0 signature hash was originally named\nSegwitVersion1SignatureHash() (presumably before segwit v0 was named\nsegwit v0). Rename it to SegwitV0SignatureHash().\n\nAlso rename SignatureHash() to LegacySignatureHash() for disambiguation.",
      "tree": {
        "sha": "8908e1db3b4a1ea49d30da00b7f67f8384accf17",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8908e1db3b4a1ea49d30da00b7f67f8384accf17"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eebcdfa86a3dad4969fa9994614bcb446849ed2b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eebcdfa86a3dad4969fa9994614bcb446849ed2b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eebcdfa86a3dad4969fa9994614bcb446849ed2b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eebcdfa86a3dad4969fa9994614bcb446849ed2b/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b33c03b0cb82e57eb862542c9d331b7ceb8f3a62",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b33c03b0cb82e57eb862542c9d331b7ceb8f3a62",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b33c03b0cb82e57eb862542c9d331b7ceb8f3a62"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 12,
      "deletions": 12
    },
    "files": [
      {
        "sha": "c7e98bd4dbe95cae87cc7014bf3571831ac99129",
        "filename": "test/functional/feature_block.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eebcdfa86a3dad4969fa9994614bcb446849ed2b/test/functional/feature_block.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eebcdfa86a3dad4969fa9994614bcb446849ed2b/test/functional/feature_block.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_block.py?ref=eebcdfa86a3dad4969fa9994614bcb446849ed2b",
        "patch": "@@ -46,7 +46,7 @@\n     OP_RETURN,\n     OP_TRUE,\n     SIGHASH_ALL,\n-    SignatureHash,\n+    LegacySignatureHash,\n     hash160,\n )\n from test_framework.test_framework import BitcoinTestFramework\n@@ -532,7 +532,7 @@ def run_test(self):\n             # second input is corresponding P2SH output from b39\n             tx.vin.append(CTxIn(COutPoint(b39.vtx[i].sha256, 0), b''))\n             # Note: must pass the redeem_script (not p2sh_script) to the signature hash function\n-            (sighash, err) = SignatureHash(redeem_script, tx, 1, SIGHASH_ALL)\n+            (sighash, err) = LegacySignatureHash(redeem_script, tx, 1, SIGHASH_ALL)\n             sig = self.coinbase_key.sign_ecdsa(sighash) + bytes(bytearray([SIGHASH_ALL]))\n             scriptSig = CScript([sig, redeem_script])\n \n@@ -1312,7 +1312,7 @@ def sign_tx(self, tx, spend_tx):\n         if (scriptPubKey[0] == OP_TRUE):  # an anyone-can-spend\n             tx.vin[0].scriptSig = CScript()\n             return\n-        (sighash, err) = SignatureHash(spend_tx.vout[0].scriptPubKey, tx, 0, SIGHASH_ALL)\n+        (sighash, err) = LegacySignatureHash(spend_tx.vout[0].scriptPubKey, tx, 0, SIGHASH_ALL)\n         tx.vin[0].scriptSig = CScript([self.coinbase_key.sign_ecdsa(sighash) + bytes(bytearray([SIGHASH_ALL]))])\n \n     def create_and_sign_transaction(self, spend_tx, value, script=CScript([OP_TRUE])):"
      },
      {
        "sha": "0c7edbf4342d68293f9a0310b61c83345c0306cb",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eebcdfa86a3dad4969fa9994614bcb446849ed2b/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eebcdfa86a3dad4969fa9994614bcb446849ed2b/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=eebcdfa86a3dad4969fa9994614bcb446849ed2b",
        "patch": "@@ -67,8 +67,8 @@\n     SIGHASH_ANYONECANPAY,\n     SIGHASH_NONE,\n     SIGHASH_SINGLE,\n-    SegwitVersion1SignatureHash,\n-    SignatureHash,\n+    SegwitV0SignatureHash,\n+    LegacySignatureHash,\n     hash160,\n )\n from test_framework.test_framework import BitcoinTestFramework\n@@ -103,7 +103,7 @@ def get_p2pkh_script(pubkeyhash):\n \n def sign_p2pk_witness_input(script, tx_to, in_idx, hashtype, value, key):\n     \"\"\"Add signature for a P2PK witness program.\"\"\"\n-    tx_hash = SegwitVersion1SignatureHash(script, tx_to, in_idx, hashtype, value)\n+    tx_hash = SegwitV0SignatureHash(script, tx_to, in_idx, hashtype, value)\n     signature = key.sign_ecdsa(tx_hash) + chr(hashtype).encode('latin-1')\n     tx_to.wit.vtxinwit[in_idx].scriptWitness.stack = [signature, script]\n     tx_to.rehash()\n@@ -1489,7 +1489,7 @@ def test_uncompressed_pubkey(self):\n         tx2.vin.append(CTxIn(COutPoint(tx.sha256, 0), b\"\"))\n         tx2.vout.append(CTxOut(tx.vout[0].nValue - 1000, script_wsh))\n         script = get_p2pkh_script(pubkeyhash)\n-        sig_hash = SegwitVersion1SignatureHash(script, tx2, 0, SIGHASH_ALL, tx.vout[0].nValue)\n+        sig_hash = SegwitV0SignatureHash(script, tx2, 0, SIGHASH_ALL, tx.vout[0].nValue)\n         signature = key.sign_ecdsa(sig_hash) + b'\\x01'  # 0x1 is SIGHASH_ALL\n         tx2.wit.vtxinwit.append(CTxInWitness())\n         tx2.wit.vtxinwit[0].scriptWitness.stack = [signature, pubkey]\n@@ -1543,7 +1543,7 @@ def test_uncompressed_pubkey(self):\n         tx5 = CTransaction()\n         tx5.vin.append(CTxIn(COutPoint(tx4.sha256, 0), b\"\"))\n         tx5.vout.append(CTxOut(tx4.vout[0].nValue - 1000, CScript([OP_TRUE])))\n-        (sig_hash, err) = SignatureHash(script_pubkey, tx5, 0, SIGHASH_ALL)\n+        (sig_hash, err) = LegacySignatureHash(script_pubkey, tx5, 0, SIGHASH_ALL)\n         signature = key.sign_ecdsa(sig_hash) + b'\\x01'  # 0x1 is SIGHASH_ALL\n         tx5.vin[0].scriptSig = CScript([signature, pubkey])\n         tx5.rehash()\n@@ -1693,7 +1693,7 @@ def test_signature_version_1(self):\n         tx2.vout.append(CTxOut(tx.vout[0].nValue, CScript([OP_TRUE])))\n \n         script = get_p2pkh_script(pubkeyhash)\n-        sig_hash = SegwitVersion1SignatureHash(script, tx2, 0, SIGHASH_ALL, tx.vout[0].nValue)\n+        sig_hash = SegwitV0SignatureHash(script, tx2, 0, SIGHASH_ALL, tx.vout[0].nValue)\n         signature = key.sign_ecdsa(sig_hash) + b'\\x01'  # 0x1 is SIGHASH_ALL\n \n         # Check that we can't have a scriptSig"
      },
      {
        "sha": "51aa9057f79f8d977dcb2fa283a8f0a9eff5202b",
        "filename": "test/functional/test_framework/script.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eebcdfa86a3dad4969fa9994614bcb446849ed2b/test/functional/test_framework/script.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eebcdfa86a3dad4969fa9994614bcb446849ed2b/test/functional/test_framework/script.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/script.py?ref=eebcdfa86a3dad4969fa9994614bcb446849ed2b",
        "patch": "@@ -2,7 +2,7 @@\n # Copyright (c) 2015-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\"\"\"Functionality to build scripts, as well as SignatureHash().\n+\"\"\"Functionality to build scripts, as well as signature hash functions.\n \n This file is modified from python-bitcoinlib.\n \"\"\"\n@@ -608,7 +608,7 @@ def FindAndDelete(script, sig):\n     return CScript(r)\n \n \n-def SignatureHash(script, txTo, inIdx, hashtype):\n+def LegacySignatureHash(script, txTo, inIdx, hashtype):\n     \"\"\"Consensus-correct SignatureHash\n \n     Returns (hash, err) to precisely match the consensus-critical behavior of\n@@ -662,7 +662,7 @@ def SignatureHash(script, txTo, inIdx, hashtype):\n # Performance optimization probably not necessary for python tests, however.\n # Note that this corresponds to sigversion == 1 in EvalScript, which is used\n # for version 0 witnesses.\n-def SegwitVersion1SignatureHash(script, txTo, inIdx, hashtype, amount):\n+def SegwitV0SignatureHash(script, txTo, inIdx, hashtype, amount):\n \n     hashPrevouts = 0\n     hashSequence = 0"
      }
    ]
  }
]