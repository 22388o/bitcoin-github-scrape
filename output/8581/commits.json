[
  {
    "sha": "fab5ecb7719063aa72751df1258dfa4cf4a9a4a9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWI1ZWNiNzcxOTA2M2FhNzI3NTFkZjEyNThkZmE0Y2Y0YTlhNGE5",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-08-24T17:21:27Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-08-24T17:28:04Z"
      },
      "message": "[wallet] rpc: Drop misleading option",
      "tree": {
        "sha": "7e1dd14a5d0cb16ecc556b9d1f44cb7a1d71f2c2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7e1dd14a5d0cb16ecc556b9d1f44cb7a1d71f2c2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fab5ecb7719063aa72751df1258dfa4cf4a9a4a9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fab5ecb7719063aa72751df1258dfa4cf4a9a4a9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fab5ecb7719063aa72751df1258dfa4cf4a9a4a9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fab5ecb7719063aa72751df1258dfa4cf4a9a4a9/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "62a5a8a01866b2af2c93125c6501538a3feab724",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/62a5a8a01866b2af2c93125c6501538a3feab724",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/62a5a8a01866b2af2c93125c6501538a3feab724"
      }
    ],
    "stats": {
      "total": 50,
      "additions": 22,
      "deletions": 28
    },
    "files": [
      {
        "sha": "0be192233d5ea9c2180f323872d76461c2be2352",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab5ecb7719063aa72751df1258dfa4cf4a9a4a9/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab5ecb7719063aa72751df1258dfa4cf4a9a4a9/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=fab5ecb7719063aa72751df1258dfa4cf4a9a4a9",
        "patch": "@@ -41,6 +41,14 @@ report issues about Windows XP to the issue tracker.\n Notable changes\n ===============\n \n+Low-level RPC changes\n+----------------------\n+\n+- `importprunedfunds` only accepts two required arguments. Some versions accept\n+  an optional third arg, which was always ignored. Make sure to never pass more\n+  than two arguments.\n+\n+\n 0.14.0 Change log\n =================\n "
      },
      {
        "sha": "0dee8ad4ec922d3d2f6c000479d0e24d66530ef8",
        "filename": "qa/rpc-tests/importprunedfunds.py",
        "status": "modified",
        "additions": 13,
        "deletions": 22,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab5ecb7719063aa72751df1258dfa4cf4a9a4a9/qa/rpc-tests/importprunedfunds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab5ecb7719063aa72751df1258dfa4cf4a9a4a9/qa/rpc-tests/importprunedfunds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/importprunedfunds.py?ref=fab5ecb7719063aa72751df1258dfa4cf4a9a4a9",
        "patch": "@@ -20,14 +20,10 @@ def setup_network(self, split=False):\n         self.is_network_split=False\n         self.sync_all()\n \n-    def run_test (self):\n-        import time\n-        begintime = int(time.time())\n-\n+    def run_test(self):\n         print(\"Mining blocks...\")\n         self.nodes[0].generate(101)\n \n-        # sync\n         self.sync_all()\n         \n         # address\n@@ -72,7 +68,6 @@ def run_test (self):\n         rawtxn2 = self.nodes[0].gettransaction(txnid2)['hex']\n         proof2 = self.nodes[0].gettxoutproof([txnid2])\n \n-\n         txnid3 = self.nodes[0].sendtoaddress(address3, 0.025)\n         self.nodes[0].generate(1)\n         rawtxn3 = self.nodes[0].gettransaction(txnid3)['hex']\n@@ -82,28 +77,27 @@ def run_test (self):\n \n         #Import with no affiliated address\n         try:\n-            result1 = self.nodes[1].importprunedfunds(rawtxn1, proof1, \"\")\n+            self.nodes[1].importprunedfunds(rawtxn1, proof1)\n         except JSONRPCException as e:\n             assert('No addresses' in e.error['message'])\n         else:\n             assert(False)\n \n-\n         balance1 = self.nodes[1].getbalance(\"\", 0, True)\n         assert_equal(balance1, Decimal(0))\n \n         #Import with affiliated address with no rescan\n-        self.nodes[1].importaddress(address2, \"\", False)\n-        result2 = self.nodes[1].importprunedfunds(rawtxn2, proof2, \"\")\n-        balance2 = Decimal(self.nodes[1].getbalance(\"\", 0, True))\n+        self.nodes[1].importaddress(address2, \"add2\", False)\n+        result2 = self.nodes[1].importprunedfunds(rawtxn2, proof2)\n+        balance2 = self.nodes[1].getbalance(\"add2\", 0, True)\n         assert_equal(balance2, Decimal('0.05'))\n \n         #Import with private key with no rescan\n-        self.nodes[1].importprivkey(address3_privkey, \"\", False)\n-        result3 = self.nodes[1].importprunedfunds(rawtxn3, proof3, \"\")\n-        balance3 = Decimal(self.nodes[1].getbalance(\"\", 0, False))\n+        self.nodes[1].importprivkey(address3_privkey, \"add3\", False)\n+        result3 = self.nodes[1].importprunedfunds(rawtxn3, proof3)\n+        balance3 = self.nodes[1].getbalance(\"add3\", 0, False)\n         assert_equal(balance3, Decimal('0.025'))\n-        balance3 = Decimal(self.nodes[1].getbalance(\"\", 0, True))\n+        balance3 = self.nodes[1].getbalance(\"*\", 0, True)\n         assert_equal(balance3, Decimal('0.075'))\n \n         #Addresses Test - after import\n@@ -118,26 +112,23 @@ def run_test (self):\n         assert_equal(address_info['ismine'], True)\n \n         #Remove transactions\n-\n         try:\n             self.nodes[1].removeprunedfunds(txnid1)\n         except JSONRPCException as e:\n             assert('does not exist' in e.error['message'])\n         else:\n             assert(False)\n \n-\n-        balance1 = Decimal(self.nodes[1].getbalance(\"\", 0, True))\n+        balance1 = self.nodes[1].getbalance(\"*\", 0, True)\n         assert_equal(balance1, Decimal('0.075'))\n \n-\n         self.nodes[1].removeprunedfunds(txnid2)\n-        balance2 = Decimal(self.nodes[1].getbalance(\"\", 0, True))\n+        balance2 = self.nodes[1].getbalance(\"*\", 0, True)\n         assert_equal(balance2, Decimal('0.025'))\n \n         self.nodes[1].removeprunedfunds(txnid3)\n-        balance3 = Decimal(self.nodes[1].getbalance(\"\", 0, True))\n+        balance3 = self.nodes[1].getbalance(\"*\", 0, True)\n         assert_equal(balance3, Decimal('0.0'))\n \n if __name__ == '__main__':\n-    ImportPrunedFundsTest ().main ()\n+    ImportPrunedFundsTest().main()"
      },
      {
        "sha": "42ebdb9b9b861c05eef47cf89b956d448644b360",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 6,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab5ecb7719063aa72751df1258dfa4cf4a9a4a9/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab5ecb7719063aa72751df1258dfa4cf4a9a4a9/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=fab5ecb7719063aa72751df1258dfa4cf4a9a4a9",
        "patch": "@@ -257,14 +257,13 @@ UniValue importprunedfunds(const UniValue& params, bool fHelp)\n     if (!EnsureWalletIsAvailable(fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() < 2 || params.size() > 3)\n+    if (fHelp || params.size() != 2)\n         throw runtime_error(\n             \"importprunedfunds\\n\"\n             \"\\nImports funds without rescan. Corresponding address or script must previously be included in wallet. Aimed towards pruned wallets. The end-user is responsible to import additional transactions that subsequently spend the imported outputs or rescan after the point in the blockchain the transaction is included.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"rawtransaction\\\" (string, required) A raw transaction in hex funding an already-existing address in wallet\\n\"\n             \"2. \\\"txoutproof\\\"     (string, required) The hex output from gettxoutproof that contains the transaction\\n\"\n-            \"3. \\\"label\\\"          (string, optional) An optional label\\n\"\n         );\n \n     CTransaction tx;\n@@ -277,10 +276,6 @@ UniValue importprunedfunds(const UniValue& params, bool fHelp)\n     CMerkleBlock merkleBlock;\n     ssMB >> merkleBlock;\n \n-    string strLabel = \"\";\n-    if (params.size() == 3)\n-        strLabel = params[2].get_str();\n-\n     //Search partial merkle tree in proof for our transaction and index in valid block\n     vector<uint256> vMatch;\n     vector<unsigned int> vIndex;"
      }
    ]
  }
]