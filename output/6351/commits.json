[
  {
    "sha": "287f54fc90c29301faede8d4ac2ea24a91441917",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyODdmNTRmYzkwYzI5MzAxZmFlZGU4ZDRhYzJlYTI0YTkxNDQxOTE3",
    "commit": {
      "author": {
        "name": "Peter Todd",
        "email": "pete@petertodd.org",
        "date": "2015-06-28T18:30:50Z"
      },
      "committer": {
        "name": "Peter Todd",
        "email": "pete@petertodd.org",
        "date": "2015-10-08T15:23:22Z"
      },
      "message": "Add CHECKLOCKTIMEVERIFY (BIP65) soft-fork logic\n\nBased on the earlier BIP66 soft-fork logic implemented by Pieter\nWuille's 5a47811da5158df763aa2fca09ce646ee0c51e7b",
      "tree": {
        "sha": "61c3f8edef89edbf7507360fc0c0fcc68f38af7d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/61c3f8edef89edbf7507360fc0c0fcc68f38af7d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/287f54fc90c29301faede8d4ac2ea24a91441917",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/287f54fc90c29301faede8d4ac2ea24a91441917",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/287f54fc90c29301faede8d4ac2ea24a91441917",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/287f54fc90c29301faede8d4ac2ea24a91441917/comments",
    "author": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d479311dba25d6a697a0c5bebbb1e913a0121b9f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d479311dba25d6a697a0c5bebbb1e913a0121b9f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d479311dba25d6a697a0c5bebbb1e913a0121b9f"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 18,
      "deletions": 5
    },
    "files": [
      {
        "sha": "61c0d8e1c9bada145be9f08674a8dee098112ef9",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 1,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/287f54fc90c29301faede8d4ac2ea24a91441917/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/287f54fc90c29301faede8d4ac2ea24a91441917/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=287f54fc90c29301faede8d4ac2ea24a91441917",
        "patch": "@@ -1740,11 +1740,18 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n \n     unsigned int flags = fStrictPayToScriptHash ? SCRIPT_VERIFY_P2SH : SCRIPT_VERIFY_NONE;\n \n-    // Start enforcing the DERSIG (BIP66) rules, for block.nVersion=3 blocks, when 75% of the network has upgraded:\n+    // Start enforcing the DERSIG (BIP66) rules, for block.nVersion=3 blocks,\n+    // when 75% of the network has upgraded:\n     if (block.nVersion >= 3 && IsSuperMajority(3, pindex->pprev, chainparams.GetConsensus().nMajorityEnforceBlockUpgrade, chainparams.GetConsensus())) {\n         flags |= SCRIPT_VERIFY_DERSIG;\n     }\n \n+    // Start enforcing CHECKLOCKTIMEVERIFY, (BIP65) for block.nVersion=4\n+    // blocks, when 75% of the network has upgraded:\n+    if (block.nVersion >= 4 && IsSuperMajority(4, pindex->pprev, chainparams.GetConsensus().nMajorityEnforceBlockUpgrade, chainparams.GetConsensus())) {\n+        flags |= SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY;\n+    }\n+\n     CBlockUndo blockundo;\n \n     CCheckQueueControl<CScriptCheck> control(fScriptChecks && nScriptCheckThreads ? &scriptcheckqueue : NULL);\n@@ -2684,6 +2691,11 @@ bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& sta\n         return state.Invalid(error(\"%s : rejected nVersion=2 block\", __func__),\n                              REJECT_OBSOLETE, \"bad-version\");\n \n+    // Reject block.nVersion=3 blocks when 95% (75% on testnet) of the network has upgraded:\n+    if (block.nVersion < 4 && IsSuperMajority(4, pindexPrev, consensusParams.nMajorityRejectBlockOutdated, consensusParams))\n+        return state.Invalid(error(\"%s : rejected nVersion=3 block\", __func__),\n+                             REJECT_OBSOLETE, \"bad-version\");\n+\n     return true;\n }\n "
      },
      {
        "sha": "54731ff55736332161b24052f6838dcf348c41ae",
        "filename": "src/primitives/block.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/287f54fc90c29301faede8d4ac2ea24a91441917/src/primitives/block.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/287f54fc90c29301faede8d4ac2ea24a91441917/src/primitives/block.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.h?ref=287f54fc90c29301faede8d4ac2ea24a91441917",
        "patch": "@@ -21,7 +21,7 @@ class CBlockHeader\n {\n public:\n     // header\n-    static const int32_t CURRENT_VERSION=3;\n+    static const int32_t CURRENT_VERSION=4;\n     int32_t nVersion;\n     uint256 hashPrevBlock;\n     uint256 hashMerkleRoot;"
      },
      {
        "sha": "a48ff1e18d3a41c89ccf4b4686be51844a135635",
        "filename": "src/script/bitcoinconsensus.h",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/287f54fc90c29301faede8d4ac2ea24a91441917/src/script/bitcoinconsensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/287f54fc90c29301faede8d4ac2ea24a91441917/src/script/bitcoinconsensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/bitcoinconsensus.h?ref=287f54fc90c29301faede8d4ac2ea24a91441917",
        "patch": "@@ -44,9 +44,10 @@ typedef enum bitcoinconsensus_error_t\n /** Script verification flags */\n enum\n {\n-    bitcoinconsensus_SCRIPT_FLAGS_VERIFY_NONE      = 0,\n-    bitcoinconsensus_SCRIPT_FLAGS_VERIFY_P2SH      = (1U << 0), // evaluate P2SH (BIP16) subscripts\n-    bitcoinconsensus_SCRIPT_FLAGS_VERIFY_DERSIG    = (1U << 2), // enforce strict DER (BIP66) compliance\n+    bitcoinconsensus_SCRIPT_FLAGS_VERIFY_NONE                = 0,\n+    bitcoinconsensus_SCRIPT_FLAGS_VERIFY_P2SH                = (1U << 0), // evaluate P2SH (BIP16) subscripts\n+    bitcoinconsensus_SCRIPT_FLAGS_VERIFY_DERSIG              = (1U << 2), // enforce strict DER (BIP66) compliance\n+    bitcoinconsensus_SCRIPT_FLAGS_VERIFY_CHECKLOCKTIMEVERIFY = (1U << 9), // enable CHECKLOCKTIMEVERIFY (BIP65)\n };\n \n /// Returns 1 if the input nIn of the serialized transaction pointed to by"
      }
    ]
  },
  {
    "sha": "cde7ab2d4ea7fbf71497c42edc1a82b9c8e6c91d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZGU3YWIyZDRlYTdmYmY3MTQ5N2M0MmVkYzFhODJiOWM4ZTZjOTFk",
    "commit": {
      "author": {
        "name": "Peter Todd",
        "email": "pete@petertodd.org",
        "date": "2015-06-28T18:42:17Z"
      },
      "committer": {
        "name": "Peter Todd",
        "email": "pete@petertodd.org",
        "date": "2015-10-08T15:25:25Z"
      },
      "message": "Add RPC tests for the CHECKLOCKTIMEVERIFY (BIP65) soft-fork\n\nbip65-cltv.py is based on the earlier BIP66 soft-fork RPC test\nimplemented by Pieter Wuille's 819bcf9b9902319176cdb1d476cacfee9b3727ec\n\nbip65-cltv-p2p.py is based on the earlier BIP66 P2P test by Suhas\nDaftuar's d76412b068d95454732aa3def95decf35251759a",
      "tree": {
        "sha": "5174cb10323a2aef3e78d40b29f0cb75ca92a1db",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5174cb10323a2aef3e78d40b29f0cb75ca92a1db"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cde7ab2d4ea7fbf71497c42edc1a82b9c8e6c91d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cde7ab2d4ea7fbf71497c42edc1a82b9c8e6c91d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cde7ab2d4ea7fbf71497c42edc1a82b9c8e6c91d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cde7ab2d4ea7fbf71497c42edc1a82b9c8e6c91d/comments",
    "author": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "287f54fc90c29301faede8d4ac2ea24a91441917",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/287f54fc90c29301faede8d4ac2ea24a91441917",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/287f54fc90c29301faede8d4ac2ea24a91441917"
      }
    ],
    "stats": {
      "total": 266,
      "additions": 266,
      "deletions": 0
    },
    "files": [
      {
        "sha": "09ee9a36a908b834a88248ecb2791ce3118389de",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cde7ab2d4ea7fbf71497c42edc1a82b9c8e6c91d/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cde7ab2d4ea7fbf71497c42edc1a82b9c8e6c91d/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=cde7ab2d4ea7fbf71497c42edc1a82b9c8e6c91d",
        "patch": "@@ -69,6 +69,8 @@\n     'p2p-fullblocktest.py',\n ]\n testScriptsExt = [\n+    'bip65-cltv.py',\n+    'bip65-cltv-p2p.py',\n     'bipdersig-p2p.py',\n     'bipdersig.py',\n     'getblocktemplate_longpoll.py',"
      },
      {
        "sha": "1f8548c21933eab8ece7565787bba51f39aeb055",
        "filename": "qa/rpc-tests/bip65-cltv-p2p.py",
        "status": "added",
        "additions": 175,
        "deletions": 0,
        "changes": 175,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cde7ab2d4ea7fbf71497c42edc1a82b9c8e6c91d/qa/rpc-tests/bip65-cltv-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cde7ab2d4ea7fbf71497c42edc1a82b9c8e6c91d/qa/rpc-tests/bip65-cltv-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip65-cltv-p2p.py?ref=cde7ab2d4ea7fbf71497c42edc1a82b9c8e6c91d",
        "patch": "@@ -0,0 +1,175 @@\n+#!/usr/bin/env python2\n+#\n+# Distributed under the MIT/X11 software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#\n+\n+from test_framework.test_framework import ComparisonTestFramework\n+from test_framework.util import *\n+from test_framework.mininode import CTransaction, NetworkThread\n+from test_framework.blocktools import create_coinbase, create_block\n+from test_framework.comptool import TestInstance, TestManager\n+from test_framework.script import CScript, OP_1NEGATE, OP_NOP2, OP_DROP\n+from binascii import hexlify, unhexlify\n+import cStringIO\n+import time\n+\n+def cltv_invalidate(tx):\n+    '''Modify the signature in vin 0 of the tx to fail CLTV\n+\n+    Prepends -1 CLTV DROP in the scriptSig itself.\n+    '''\n+    tx.vin[0].scriptSig = CScript([OP_1NEGATE, OP_NOP2, OP_DROP] +\n+                                  list(CScript(tx.vin[0].scriptSig)))\n+\n+'''\n+This test is meant to exercise BIP65 (CHECKLOCKTIMEVERIFY)\n+Connect to a single node.\n+Mine 2 (version 3) blocks (save the coinbases for later).\n+Generate 98 more version 3 blocks, verify the node accepts.\n+Mine 749 version 4 blocks, verify the node accepts.\n+Check that the new CLTV rules are not enforced on the 750th version 4 block.\n+Check that the new CLTV rules are enforced on the 751st version 4 block.\n+Mine 199 new version blocks.\n+Mine 1 old-version block.\n+Mine 1 new version block.\n+Mine 1 old version block, see that the node rejects.\n+'''\n+\n+class BIP65Test(ComparisonTestFramework):\n+\n+    def __init__(self):\n+        self.num_nodes = 1\n+\n+    def setup_network(self):\n+        # Must set the blockversion for this test\n+        self.nodes = start_nodes(1, self.options.tmpdir,\n+                                 extra_args=[['-debug', '-whitelist=127.0.0.1', '-blockversion=3']],\n+                                 binary=[self.options.testbinary])\n+\n+    def run_test(self):\n+        test = TestManager(self, self.options.tmpdir)\n+        test.add_all_connections(self.nodes)\n+        NetworkThread().start() # Start up network handling in another thread\n+        test.run()\n+\n+    def create_transaction(self, node, coinbase, to_address, amount):\n+        from_txid = node.getblock(coinbase)['tx'][0]\n+        inputs = [{ \"txid\" : from_txid, \"vout\" : 0}]\n+        outputs = { to_address : amount }\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+        signresult = node.signrawtransaction(rawtx)\n+        tx = CTransaction()\n+        f = cStringIO.StringIO(unhexlify(signresult['hex']))\n+        tx.deserialize(f)\n+        return tx\n+\n+    def get_tests(self):\n+\n+        self.coinbase_blocks = self.nodes[0].generate(2)\n+        self.tip = int (\"0x\" + self.nodes[0].getbestblockhash() + \"L\", 0)\n+        self.nodeaddress = self.nodes[0].getnewaddress()\n+        self.last_block_time = time.time()\n+\n+        ''' 98 more version 3 blocks '''\n+        test_blocks = []\n+        for i in xrange(98):\n+            block = create_block(self.tip, create_coinbase(2), self.last_block_time + 1)\n+            block.nVersion = 3\n+            block.rehash()\n+            block.solve()\n+            test_blocks.append([block, True])\n+            self.last_block_time += 1\n+            self.tip = block.sha256\n+        yield TestInstance(test_blocks, sync_every_block=False)\n+\n+        ''' Mine 749 version 4 blocks '''\n+        test_blocks = []\n+        for i in xrange(749):\n+            block = create_block(self.tip, create_coinbase(2), self.last_block_time + 1)\n+            block.nVersion = 4\n+            block.rehash()\n+            block.solve()\n+            test_blocks.append([block, True])\n+            self.last_block_time += 1\n+            self.tip = block.sha256\n+        yield TestInstance(test_blocks, sync_every_block=False)\n+\n+        '''\n+        Check that the new CLTV rules are not enforced in the 750th\n+        version 3 block.\n+        '''\n+        spendtx = self.create_transaction(self.nodes[0],\n+                self.coinbase_blocks[0], self.nodeaddress, 1.0)\n+        cltv_invalidate(spendtx)\n+        spendtx.rehash()\n+\n+        block = create_block(self.tip, create_coinbase(2), self.last_block_time + 1)\n+        block.nVersion = 4\n+        block.vtx.append(spendtx)\n+        block.hashMerkleRoot = block.calc_merkle_root()\n+        block.rehash()\n+        block.solve()\n+\n+        self.last_block_time += 1\n+        self.tip = block.sha256\n+        yield TestInstance([[block, True]])\n+\n+        '''\n+        Check that the new CLTV rules are enforced in the 751st version 4\n+        block.\n+        '''\n+        spendtx = self.create_transaction(self.nodes[0],\n+                self.coinbase_blocks[1], self.nodeaddress, 1.0)\n+        cltv_invalidate(spendtx)\n+        spendtx.rehash()\n+\n+        block = create_block(self.tip, create_coinbase(1), self.last_block_time + 1)\n+        block.nVersion = 4\n+        block.vtx.append(spendtx)\n+        block.hashMerkleRoot = block.calc_merkle_root()\n+        block.rehash()\n+        block.solve()\n+        self.last_block_time += 1\n+        yield TestInstance([[block, False]])\n+\n+        ''' Mine 199 new version blocks on last valid tip '''\n+        test_blocks = []\n+        for i in xrange(199):\n+            block = create_block(self.tip, create_coinbase(1), self.last_block_time + 1)\n+            block.nVersion = 4\n+            block.rehash()\n+            block.solve()\n+            test_blocks.append([block, True])\n+            self.last_block_time += 1\n+            self.tip = block.sha256\n+        yield TestInstance(test_blocks, sync_every_block=False)\n+\n+        ''' Mine 1 old version block '''\n+        block = create_block(self.tip, create_coinbase(1), self.last_block_time + 1)\n+        block.nVersion = 3\n+        block.rehash()\n+        block.solve()\n+        self.last_block_time += 1\n+        self.tip = block.sha256\n+        yield TestInstance([[block, True]])\n+\n+        ''' Mine 1 new version block '''\n+        block = create_block(self.tip, create_coinbase(1), self.last_block_time + 1)\n+        block.nVersion = 4\n+        block.rehash()\n+        block.solve()\n+        self.last_block_time += 1\n+        self.tip = block.sha256\n+        yield TestInstance([[block, True]])\n+\n+        ''' Mine 1 old version block, should be invalid '''\n+        block = create_block(self.tip, create_coinbase(1), self.last_block_time + 1)\n+        block.nVersion = 3\n+        block.rehash()\n+        block.solve()\n+        self.last_block_time += 1\n+        yield TestInstance([[block, False]])\n+\n+if __name__ == '__main__':\n+    BIP65Test().main()"
      },
      {
        "sha": "e90e11e6a75a8960e3aa403e67ad4249ab646f24",
        "filename": "qa/rpc-tests/bip65-cltv.py",
        "status": "added",
        "additions": 89,
        "deletions": 0,
        "changes": 89,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cde7ab2d4ea7fbf71497c42edc1a82b9c8e6c91d/qa/rpc-tests/bip65-cltv.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cde7ab2d4ea7fbf71497c42edc1a82b9c8e6c91d/qa/rpc-tests/bip65-cltv.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip65-cltv.py?ref=cde7ab2d4ea7fbf71497c42edc1a82b9c8e6c91d",
        "patch": "@@ -0,0 +1,89 @@\n+#!/usr/bin/env python2\n+# Copyright (c) 2015 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#\n+# Test the CHECKLOCKTIMEVERIFY (BIP65) soft-fork logic\n+#\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+import os\n+import shutil\n+\n+class BIP65Test(BitcoinTestFramework):\n+\n+    def setup_network(self):\n+        self.nodes = []\n+        self.nodes.append(start_node(0, self.options.tmpdir, []))\n+        self.nodes.append(start_node(1, self.options.tmpdir, [\"-blockversion=3\"]))\n+        self.nodes.append(start_node(2, self.options.tmpdir, [\"-blockversion=4\"]))\n+        connect_nodes(self.nodes[1], 0)\n+        connect_nodes(self.nodes[2], 0)\n+        self.is_network_split = False\n+        self.sync_all()\n+\n+    def run_test(self):\n+        cnt = self.nodes[0].getblockcount()\n+\n+        # Mine some old-version blocks\n+        self.nodes[1].generate(100)\n+        self.sync_all()\n+        if (self.nodes[0].getblockcount() != cnt + 100):\n+            raise AssertionError(\"Failed to mine 100 version=3 blocks\")\n+\n+        # Mine 750 new-version blocks\n+        for i in xrange(15):\n+            self.nodes[2].generate(50)\n+        self.sync_all()\n+        if (self.nodes[0].getblockcount() != cnt + 850):\n+            raise AssertionError(\"Failed to mine 750 version=4 blocks\")\n+\n+        # TODO: check that new CHECKLOCKTIMEVERIFY rules are not enforced\n+\n+        # Mine 1 new-version block\n+        self.nodes[2].generate(1)\n+        self.sync_all()\n+        if (self.nodes[0].getblockcount() != cnt + 851):\n+            raise AssertionFailure(\"Failed to mine a version=4 blocks\")\n+\n+        # TODO: check that new CHECKLOCKTIMEVERIFY rules are enforced\n+\n+        # Mine 198 new-version blocks\n+        for i in xrange(2):\n+            self.nodes[2].generate(99)\n+        self.sync_all()\n+        if (self.nodes[0].getblockcount() != cnt + 1049):\n+            raise AssertionError(\"Failed to mine 198 version=4 blocks\")\n+\n+        # Mine 1 old-version block\n+        self.nodes[1].generate(1)\n+        self.sync_all()\n+        if (self.nodes[0].getblockcount() != cnt + 1050):\n+            raise AssertionError(\"Failed to mine a version=3 block after 949 version=4 blocks\")\n+\n+        # Mine 1 new-version blocks\n+        self.nodes[2].generate(1)\n+        self.sync_all()\n+        if (self.nodes[0].getblockcount() != cnt + 1051):\n+            raise AssertionError(\"Failed to mine a version=4 block\")\n+\n+        # Mine 1 old-version blocks\n+        try:\n+            self.nodes[1].generate(1)\n+            raise AssertionError(\"Succeeded to mine a version=3 block after 950 version=4 blocks\")\n+        except JSONRPCException:\n+            pass\n+        self.sync_all()\n+        if (self.nodes[0].getblockcount() != cnt + 1051):\n+            raise AssertionError(\"Accepted a version=3 block after 950 version=4 blocks\")\n+\n+        # Mine 1 new-version blocks\n+        self.nodes[2].generate(1)\n+        self.sync_all()\n+        if (self.nodes[0].getblockcount() != cnt + 1052):\n+            raise AssertionError(\"Failed to mine a version=4 block\")\n+\n+if __name__ == '__main__':\n+    BIP65Test().main()"
      }
    ]
  },
  {
    "sha": "65ef3723024881b7b21597bb784503094a323fb4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NWVmMzcyMzAyNDg4MWI3YjIxNTk3YmI3ODQ1MDMwOTRhMzIzZmI0",
    "commit": {
      "author": {
        "name": "Peter Todd",
        "email": "pete@petertodd.org",
        "date": "2015-09-27T18:32:10Z"
      },
      "committer": {
        "name": "Peter Todd",
        "email": "pete@petertodd.org",
        "date": "2015-10-08T15:37:10Z"
      },
      "message": "Add BIP65 to getblockchaininfo softforks list",
      "tree": {
        "sha": "507c6b2d9f2880fced0700aaade8a2000667db52",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/507c6b2d9f2880fced0700aaade8a2000667db52"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/65ef3723024881b7b21597bb784503094a323fb4",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGrBAABCACVBQJWFo2oXhSAAAAAABUAQGJsb2NraGFzaEBiaXRjb2luLm9yZzAw\nMDAwMDAwMDAwMDAwMDAwMTBhNzM3MDkwMmI0MzFmZjE4MDM2ODQ0YjgzZThlNjBi\nMWM1NDAzMzQwOWNlZmYvFIAAAAAAFQARcGthLWFkZHJlc3NAZ251cGcub3JncGV0\nZUBwZXRlcnRvZC5vcmcACgkQwIXyHOf0udy32Qf/Xc53j5l2tL1Yo48/xs1/TgKX\nGre4Z36uX4sRqbY0/RNcztUV902zsmXwMz0ZOtSpXLSLANfJ31UvWrs3xi2gOrY5\nagjz4CxBGQYm3GmUFrt/zCJUiNniCo5bAOGuKQdtSoJDOs47CwN+oSrqlC4Ut3pg\nELYN+Itqvos0MZwDz+aPrX7yz33MECD6cMy6tPWGr3ZizloytasCHi9VzMdgSU73\nLGJzJExrCWSVONT3jIYpVSjXmTJPBr4JfWlvqQai4Nx3+0DE6l+tmW52++x4QTuL\nrXe+TSofF6CZsHCGQGIhZ7jrAiN0sZcZQSS0fzGR+FP8MOW6q++YgMk6cG9cKQ==\n=nQ8q\n-----END PGP SIGNATURE-----",
        "payload": "tree 507c6b2d9f2880fced0700aaade8a2000667db52\nparent cde7ab2d4ea7fbf71497c42edc1a82b9c8e6c91d\nauthor Peter Todd <pete@petertodd.org> 1443378730 -0400\ncommitter Peter Todd <pete@petertodd.org> 1444318630 +0200\n\nAdd BIP65 to getblockchaininfo softforks list\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65ef3723024881b7b21597bb784503094a323fb4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/65ef3723024881b7b21597bb784503094a323fb4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65ef3723024881b7b21597bb784503094a323fb4/comments",
    "author": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cde7ab2d4ea7fbf71497c42edc1a82b9c8e6c91d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cde7ab2d4ea7fbf71497c42edc1a82b9c8e6c91d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cde7ab2d4ea7fbf71497c42edc1a82b9c8e6c91d"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "20c0c1fb2f2e46b0be7c554ba294b0fbc2364117",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65ef3723024881b7b21597bb784503094a323fb4/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65ef3723024881b7b21597bb784503094a323fb4/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=65ef3723024881b7b21597bb784503094a323fb4",
        "patch": "@@ -648,6 +648,7 @@ UniValue getblockchaininfo(const UniValue& params, bool fHelp)\n     UniValue softforks(UniValue::VARR);\n     softforks.push_back(SoftForkDesc(\"bip34\", 2, tip, consensusParams));\n     softforks.push_back(SoftForkDesc(\"bip66\", 3, tip, consensusParams));\n+    softforks.push_back(SoftForkDesc(\"bip65\", 4, tip, consensusParams));\n     obj.push_back(Pair(\"softforks\",             softforks));\n \n     if (fPruneMode)"
      }
    ]
  }
]