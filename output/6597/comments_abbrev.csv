dcousens,2015-08-29T01:28:35Z,> Apart from being a minimal optimization\n\nHow is this an optimization?  You are now comparing the blocks hash against the genesis block every time `ConnectBlock` is called?\n,https://github.com/bitcoin/bitcoin/pull/6597#issuecomment-135925165,135925165,
jtimon,2015-08-29T01:36:13Z,"> How is this an optimization? \n\nBy saving some checks for the genesis block.\n\n> You are now comparing the blocks hash against the genesis block every time ConnectBlock is called?\n\nThe check in ConnectBlock was already there, now `CheckBlock` is not called if the block being checked is the genesis block (ie the checks has just been moved below the genesis block check).\n",https://github.com/bitcoin/bitcoin/pull/6597#issuecomment-135925472,135925472,
jtimon,2015-08-29T01:40:29Z,"In any case, benchmarking welcomed.\n",https://github.com/bitcoin/bitcoin/pull/6597#issuecomment-135925772,135925772,
jtimon,2015-11-11T22:59:09Z,"Rebased and simplified. Looking at it again, @dcousens was right that many of the changes would have affected performance negatively. Besides they were (or at least they currently seem to be) unnecessary for #6382 (or for facilitating the creating of testchains in general by not requiring tester to ""mine"" the genesis block of their testchains: the genesis block is correct by definition).\nNow it s",https://github.com/bitcoin/bitcoin/pull/6597#issuecomment-155936477,155936477,
dcousens,2015-11-11T23:13:00Z,utACK\n,https://github.com/bitcoin/bitcoin/pull/6597#issuecomment-155939066,155939066,
sipa,2015-11-12T23:19:51Z,ACK\n,https://github.com/bitcoin/bitcoin/pull/6597#issuecomment-156268372,156268372,
gmaxwell,2015-11-17T01:34:15Z,Care to pass in the params from above like #6986?\n,https://github.com/bitcoin/bitcoin/pull/6597#issuecomment-157232943,157232943,
jtimon,2015-11-17T03:06:10Z,@gmaxwell you mean passing it explicitly to CBlockTreeDB::LoadBlockIndexGuts()?\n,https://github.com/bitcoin/bitcoin/pull/6597#issuecomment-157253509,157253509,
gmaxwell,2015-11-17T06:02:04Z,@jtimon Right. Do you agree it would be the correct and consistent thing to do?\n,https://github.com/bitcoin/bitcoin/pull/6597#issuecomment-157279917,157279917,
jtimon,2015-11-17T11:27:43Z,"Sure, using the local variable is in preparation for that at some point later (see #5970), but I'm happy to do it here directly.\n",https://github.com/bitcoin/bitcoin/pull/6597#issuecomment-157342728,157342728,
jtimon,2015-11-17T13:54:56Z,Updated with @gmaxwell 's nit solved.\n,https://github.com/bitcoin/bitcoin/pull/6597#issuecomment-157375686,157375686,
sipa,2015-11-28T13:08:35Z,Still ACK\n,https://github.com/bitcoin/bitcoin/pull/6597#issuecomment-160294721,160294721,
jtimon,2015-12-18T05:18:49Z,"still ping, I've been thinking about closing this and reopen it whith a test that makes sure a new non-mined chain wold work (that means another chain in master),\n",https://github.com/bitcoin/bitcoin/pull/6597#issuecomment-165675646,165675646,
dcousens,2015-12-18T23:30:48Z,"re-ACK e4037dd,  @jtimon test sounds good too :+1: \n",https://github.com/bitcoin/bitcoin/pull/6597#issuecomment-165920244,165920244,
sipa,2016-01-06T19:36:20Z,"From experience elsewhere: if you introduce a new chain with an ""invalid"" genesis block and this change, it will fail to reindex, as the check is still done in that case.\n\nSuggested fix: see https://github.com/sipa/bitcoin/commit/f7a1a470634bdfeb52d961894e204fc1a1159e72\n",https://github.com/bitcoin/bitcoin/pull/6597#issuecomment-169435385,169435385,
jtimon,2016-01-07T12:47:36Z,"Mhmm, why #6382 seems to be working just fine with reindex then? Have you actually reproduced the error you claim would appear?\n\nThis shouldn't be necessary, certainly not in CheckBlockHeader(). In AcceptBlockHeader, it won't be called for the genesis block, see https://github.com/bitcoin/bitcoin/blob/master/src/main.cpp#L3071\nMaybe it is required on TestBlockValidity() or something else that c",https://github.com/bitcoin/bitcoin/pull/6597#issuecomment-169654749,169654749,
laanwj,2016-01-18T15:58:07Z,Let's try to get agreement here @sipa @jtimon\n,https://github.com/bitcoin/bitcoin/pull/6597#issuecomment-172569312,172569312,
sipa,2016-01-18T16:10:37Z,"@jtimon Because Bitcoin's genesis block does actually pass PoW checks.\n\nWhat I mean is that this patch is effectively removing the invariant that\ngenesis blocks have to be valid. However, if you actually try with an\ninvalid genesis block, reindex fails.\n\nTechnically not a concern for Bitcoin at this point, so this is not a\nblocker for merge. Just some advice that if we'd actually want to st",https://github.com/bitcoin/bitcoin/pull/6597#issuecomment-172572987,172572987,
jtimon,2016-01-19T11:28:32Z,"Genesis blocks are valid by definition and should never be checked (whether they pass pow or not). \nIn any case, IIRC last time I tested #6382 it worked just fine even when reindexing the chain, therefore I disagree with sipa that this patch isn't enough. As said the very fact that we disagree on whether or not this is enough for its stated goal, means IMO that this should be introduced with  tes",https://github.com/bitcoin/bitcoin/pull/6597#issuecomment-172822950,172822950,
sipa,2016-01-21T12:26:05Z,I'm not against merging this! I was simply giving a suggestion for further work towards its stated goal.\n,https://github.com/bitcoin/bitcoin/pull/6597#issuecomment-173556142,173556142,
jtimon,2016-01-21T12:44:41Z,"And I'm  saying I believe this is enough for fulfilling its stated goal, but the fact that we disagree means we should introduce tests here to make sure the goal is achieved (and later merges don't  ruin it).\nBut as said I don't  plan to write those tests until #6907. This was not merged before forking 0.12 so I'm  not in a hurry anyway. As long as I reopen it before 0.13 is forked I'm happy clos",https://github.com/bitcoin/bitcoin/pull/6597#issuecomment-173559498,173559498,
sipa,2015-11-12T15:40:24Z,Is the genesis block expected to fail PoW?\n,https://github.com/bitcoin/bitcoin/pull/6597#discussion_r44671670,44671670,src/txdb.cpp
jtimon,2015-11-12T17:19:13Z,"Not usually, but this is useful for creating new testchains (whether those testchains are merged in master or not) without having to spend costly PoW to ""mine"" a genesis block to hardcode.\nFor example, #6382 introduces std::numeric_limits<uint64_t>::max() new testchains whose genesis blocks are created dynamically (but not mined dynamically in chainparams.cpp) and will therefore fail PoW.\nFor an",https://github.com/bitcoin/bitcoin/pull/6597#discussion_r44685822,44685822,src/txdb.cpp
sipa,2015-11-12T23:18:56Z,Fair enough.\n,https://github.com/bitcoin/bitcoin/pull/6597#discussion_r44730188,44730188,src/txdb.cpp
