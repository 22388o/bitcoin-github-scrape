[
  {
    "sha": "c93beac43fa66c8431e3952283edb5be8c65606c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjOTNiZWFjNDNmYTY2Yzg0MzFlMzk1MjI4M2VkYjViZThjNjU2MDZj",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2016-10-26T17:03:30Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2016-11-03T16:26:37Z"
      },
      "message": "[qa] Test that invalid compactblocks don't result in ban",
      "tree": {
        "sha": "ddc2874142acefb3a11208ef6a134e13c23ae413",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ddc2874142acefb3a11208ef6a134e13c23ae413"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c93beac43fa66c8431e3952283edb5be8c65606c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c93beac43fa66c8431e3952283edb5be8c65606c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c93beac43fa66c8431e3952283edb5be8c65606c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c93beac43fa66c8431e3952283edb5be8c65606c/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3665483be7be177dfa6cb608818e04f68f173c53",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3665483be7be177dfa6cb608818e04f68f173c53",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3665483be7be177dfa6cb608818e04f68f173c53"
      }
    ],
    "stats": {
      "total": 37,
      "additions": 37,
      "deletions": 0
    },
    "files": [
      {
        "sha": "6d1fb3fd9aa300b254ad64db156f97cf6f275bfc",
        "filename": "qa/rpc-tests/p2p-compactblocks.py",
        "status": "modified",
        "additions": 37,
        "deletions": 0,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c93beac43fa66c8431e3952283edb5be8c65606c/qa/rpc-tests/p2p-compactblocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c93beac43fa66c8431e3952283edb5be8c65606c/qa/rpc-tests/p2p-compactblocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-compactblocks.py?ref=c93beac43fa66c8431e3952283edb5be8c65606c",
        "patch": "@@ -708,6 +708,33 @@ def test_end_to_end_block_relay(self, node, listeners):\n                 l.last_cmpctblock.header_and_shortids.header.calc_sha256()\n                 assert_equal(l.last_cmpctblock.header_and_shortids.header.sha256, block.sha256)\n \n+    # Test that we don't get disconnected if we relay a compact block with valid header,\n+    # but invalid transactions.\n+    def test_invalid_tx_in_compactblock(self, node, test_node, use_segwit):\n+        assert(len(self.utxos))\n+        utxo = self.utxos[0]\n+\n+        block = self.build_block_with_transactions(node, utxo, 5)\n+        del block.vtx[3]\n+        block.hashMerkleRoot = block.calc_merkle_root()\n+        if use_segwit:\n+            # If we're testing with segwit, also drop the coinbase witness,\n+            # but include the witness commitment.\n+            add_witness_commitment(block)\n+            block.vtx[0].wit.vtxinwit = []\n+        block.solve()\n+\n+        # Now send the compact block with all transactions prefilled, and\n+        # verify that we don't get disconnected.\n+        comp_block = HeaderAndShortIDs()\n+        comp_block.initialize_from_block(block, prefill_list=[0, 1, 2, 3, 4], use_witness=use_segwit)\n+        msg = msg_cmpctblock(comp_block.to_p2p())\n+        test_node.send_and_ping(msg)\n+\n+        # Check that the tip didn't advance\n+        assert(int(node.getbestblockhash(), 16) is not block.sha256)\n+        test_node.sync_with_ping()\n+\n     # Helper for enabling cb announcements\n     # Send the sendcmpct request and sync headers\n     def request_cb_announcements(self, peer, node, version):\n@@ -798,6 +825,11 @@ def run_test(self):\n         self.test_end_to_end_block_relay(self.nodes[0], [self.segwit_node, self.test_node, self.old_node])\n         self.test_end_to_end_block_relay(self.nodes[1], [self.segwit_node, self.test_node, self.old_node])\n \n+        print(\"\\tTesting handling of invalid compact blocks...\")\n+        self.test_invalid_tx_in_compactblock(self.nodes[0], self.test_node, False)\n+        self.test_invalid_tx_in_compactblock(self.nodes[1], self.segwit_node, False)\n+        self.test_invalid_tx_in_compactblock(self.nodes[1], self.old_node, False)\n+\n         # Advance to segwit activation\n         print (\"\\nAdvancing to segwit activation\\n\")\n         self.activate_segwit(self.nodes[1])\n@@ -844,6 +876,11 @@ def run_test(self):\n         self.request_cb_announcements(self.segwit_node, self.nodes[1], 2)\n         self.test_end_to_end_block_relay(self.nodes[1], [self.segwit_node, self.test_node, self.old_node])\n \n+        print(\"\\tTesting handling of invalid compact blocks...\")\n+        self.test_invalid_tx_in_compactblock(self.nodes[0], self.test_node, False)\n+        self.test_invalid_tx_in_compactblock(self.nodes[1], self.segwit_node, True)\n+        self.test_invalid_tx_in_compactblock(self.nodes[1], self.old_node, True)\n+\n         print(\"\\tTesting invalid index in cmpctblock message...\")\n         self.test_invalid_cmpctblock_message()\n "
      }
    ]
  },
  {
    "sha": "88c35491ab19f9afdf9b3fa9356a072f70ef2f55",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4OGMzNTQ5MWFiMTlmOWFmZGY5YjNmYTkzNTZhMDcyZjcwZWYyZjU1",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2016-10-31T14:03:49Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2016-11-03T17:07:12Z"
      },
      "message": "Fix compact block handling to not ban if block is invalid",
      "tree": {
        "sha": "979296a970eea7001a5133bb792bda690bcb428c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/979296a970eea7001a5133bb792bda690bcb428c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/88c35491ab19f9afdf9b3fa9356a072f70ef2f55",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/88c35491ab19f9afdf9b3fa9356a072f70ef2f55",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/88c35491ab19f9afdf9b3fa9356a072f70ef2f55",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/88c35491ab19f9afdf9b3fa9356a072f70ef2f55/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c93beac43fa66c8431e3952283edb5be8c65606c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c93beac43fa66c8431e3952283edb5be8c65606c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c93beac43fa66c8431e3952283edb5be8c65606c"
      }
    ],
    "stats": {
      "total": 60,
      "additions": 40,
      "deletions": 20
    },
    "files": [
      {
        "sha": "737102f1680e1d2bec7ef0c038c5d3ab71379f35",
        "filename": "src/blockencodings.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/88c35491ab19f9afdf9b3fa9356a072f70ef2f55/src/blockencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/88c35491ab19f9afdf9b3fa9356a072f70ef2f55/src/blockencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockencodings.cpp?ref=88c35491ab19f9afdf9b3fa9356a072f70ef2f55",
        "patch": "@@ -167,7 +167,7 @@ ReadStatus PartiallyDownloadedBlock::FillBlock(CBlock& block, const std::vector<\n         // check its own merkle root and cache that check.\n         if (state.CorruptionPossible())\n             return READ_STATUS_FAILED; // Possible Short ID collision\n-        return READ_STATUS_INVALID;\n+        return READ_STATUS_CHECKBLOCK_FAILED;\n     }\n \n     LogPrint(\"cmpctblock\", \"Successfully reconstructed block %s with %lu txn prefilled, %lu txn from mempool and %lu txn requested\\n\", header.GetHash().ToString(), prefilled_count, mempool_count, vtx_missing.size());"
      },
      {
        "sha": "705eaf28aa50b4cd7bd79f4f2cbb14da06d9b198",
        "filename": "src/blockencodings.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/88c35491ab19f9afdf9b3fa9356a072f70ef2f55/src/blockencodings.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/88c35491ab19f9afdf9b3fa9356a072f70ef2f55/src/blockencodings.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockencodings.h?ref=88c35491ab19f9afdf9b3fa9356a072f70ef2f55",
        "patch": "@@ -124,6 +124,8 @@ typedef enum ReadStatus_t\n     READ_STATUS_OK,\n     READ_STATUS_INVALID, // Invalid object, peer is sending bogus crap\n     READ_STATUS_FAILED, // Failed to process object\n+    READ_STATUS_CHECKBLOCK_FAILED, // Used only by FillBlock to indicate a\n+                                   // failure in CheckBlock.\n } ReadStatus;\n \n class CBlockHeaderAndShortTxIDs {"
      },
      {
        "sha": "b65b9874e93140048291c1c6c32e1861ab50caaf",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 14,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/88c35491ab19f9afdf9b3fa9356a072f70ef2f55/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/88c35491ab19f9afdf9b3fa9356a072f70ef2f55/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=88c35491ab19f9afdf9b3fa9356a072f70ef2f55",
        "patch": "@@ -179,8 +179,10 @@ namespace {\n      * Sources of received blocks, saved to be able to send them reject\n      * messages or ban them when processing happens afterwards. Protected by\n      * cs_main.\n+     * Set mapBlockSource[hash].second to false if the node should not be\n+     * punished if the block is invalid.\n      */\n-    map<uint256, NodeId> mapBlockSource;\n+    map<uint256, std::pair<NodeId, bool>> mapBlockSource;\n \n     /**\n      * Filter for transactions that were recently rejected by\n@@ -3759,7 +3761,7 @@ static bool AcceptBlock(const CBlock& block, CValidationState& state, const CCha\n     return true;\n }\n \n-bool ProcessNewBlock(CValidationState& state, const CChainParams& chainparams, CNode* pfrom, const CBlock* pblock, bool fForceProcessing, const CDiskBlockPos* dbp)\n+bool ProcessNewBlock(CValidationState& state, const CChainParams& chainparams, CNode* pfrom, const CBlock* pblock, bool fForceProcessing, const CDiskBlockPos* dbp, bool fMayBanPeerIfInvalid)\n {\n     {\n         LOCK(cs_main);\n@@ -3769,7 +3771,7 @@ bool ProcessNewBlock(CValidationState& state, const CChainParams& chainparams, C\n         bool fNewBlock = false;\n         bool ret = AcceptBlock(*pblock, state, chainparams, &pindex, fForceProcessing, dbp, &fNewBlock);\n         if (pindex && pfrom) {\n-            mapBlockSource[pindex->GetBlockHash()] = pfrom->GetId();\n+            mapBlockSource[pindex->GetBlockHash()] = std::make_pair(pfrom->GetId(), fMayBanPeerIfInvalid);\n             if (fNewBlock) pfrom->nLastBlockTime = GetTime();\n         }\n         CheckBlockIndex(chainparams.GetConsensus());\n@@ -4749,16 +4751,16 @@ void PeerLogicValidation::BlockChecked(const CBlock& block, const CValidationSta\n     LOCK(cs_main);\n \n     const uint256 hash(block.GetHash());\n-    std::map<uint256, NodeId>::iterator it = mapBlockSource.find(hash);\n+    std::map<uint256, std::pair<NodeId, bool>>::iterator it = mapBlockSource.find(hash);\n \n     int nDoS = 0;\n     if (state.IsInvalid(nDoS)) {\n-        if (it != mapBlockSource.end() && State(it->second)) {\n+        if (it != mapBlockSource.end() && State(it->second.first)) {\n             assert (state.GetRejectCode() < REJECT_INTERNAL); // Blocks are never rejected with internal reject codes\n             CBlockReject reject = {(unsigned char)state.GetRejectCode(), state.GetRejectReason().substr(0, MAX_REJECT_MESSAGE_LENGTH), hash};\n-            State(it->second)->rejects.push_back(reject);\n-            if (nDoS > 0)\n-                Misbehaving(it->second, nDoS);\n+            State(it->second.first)->rejects.push_back(reject);\n+            if (nDoS > 0 && it->second.second)\n+                Misbehaving(it->second.first, nDoS);\n         }\n     }\n     if (it != mapBlockSource.end())\n@@ -5868,6 +5870,23 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                 invs.push_back(CInv(MSG_BLOCK | GetFetchFlags(pfrom, chainActive.Tip(), chainparams.GetConsensus()), resp.blockhash));\n                 pfrom->PushMessage(NetMsgType::GETDATA, invs);\n             } else {\n+                // Block is either okay, or possibly we received\n+                // READ_STATUS_CHECKBLOCK_FAILED.\n+                // Note that CheckBlock can only fail for one of a few reasons:\n+                // 1. bad-proof-of-work (impossible here, because we've already\n+                //    accepted the header)\n+                // 2. merkleroot doesn't match the transactions given (already\n+                //    caught in FillBlock with READ_STATUS_FAILED, so\n+                //    impossible here)\n+                // 3. the block is otherwise invalid (eg invalid coinbase,\n+                //    block is too big, too many legacy sigops, etc).\n+                // So if CheckBlock failed, #3 is the only possibility.\n+                // Under BIP 152, we don't DoS-ban unless proof of work is\n+                // invalid (we don't require all the stateless checks to have\n+                // been run).  This is handled below, so just treat this as\n+                // though the block was successfully read, and rely on the\n+                // handling in ProcessNewBlock to ensure the block index is\n+                // updated, reject messages go out, etc.\n                 MarkBlockAsReceived(resp.blockhash); // it is now an empty pointer\n                 fBlockRead = true;\n             }\n@@ -5876,16 +5895,15 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             CValidationState state;\n             // Since we requested this block (it was in mapBlocksInFlight), force it to be processed,\n             // even if it would not be a candidate for new tip (missing previous block, chain not long enough, etc)\n-            ProcessNewBlock(state, chainparams, pfrom, &block, true, NULL);\n+            // BIP 152 permits peers to relay compact blocks after validating\n+            // the header only; we should not punish peers if the block turns\n+            // out to be invalid.\n+            ProcessNewBlock(state, chainparams, pfrom, &block, true, NULL, false);\n             int nDoS;\n             if (state.IsInvalid(nDoS)) {\n                 assert (state.GetRejectCode() < REJECT_INTERNAL); // Blocks are never rejected with internal reject codes\n                 pfrom->PushMessage(NetMsgType::REJECT, strCommand, (unsigned char)state.GetRejectCode(),\n                                    state.GetRejectReason().substr(0, MAX_REJECT_MESSAGE_LENGTH), block.GetHash());\n-                if (nDoS > 0) {\n-                    LOCK(cs_main);\n-                    Misbehaving(pfrom->GetId(), nDoS);\n-                }\n             }\n         }\n     }\n@@ -6056,7 +6074,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             // need it even though it is not a candidate for a new best tip.\n             forceProcessing |= MarkBlockAsReceived(block.GetHash());\n         }\n-        ProcessNewBlock(state, chainparams, pfrom, &block, forceProcessing, NULL);\n+        ProcessNewBlock(state, chainparams, pfrom, &block, forceProcessing, NULL, true);\n         int nDoS;\n         if (state.IsInvalid(nDoS)) {\n             assert (state.GetRejectCode() < REJECT_INTERNAL); // Blocks are never rejected with internal reject codes"
      },
      {
        "sha": "9343330587affa36aff05979028f5e36f4166efa",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/88c35491ab19f9afdf9b3fa9356a072f70ef2f55/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/88c35491ab19f9afdf9b3fa9356a072f70ef2f55/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=88c35491ab19f9afdf9b3fa9356a072f70ef2f55",
        "patch": "@@ -223,7 +223,7 @@ static const uint64_t MIN_DISK_SPACE_FOR_BLOCK_FILES = 550 * 1024 * 1024;\n  * @param[out]  dbp     The already known disk position of pblock, or NULL if not yet stored.\n  * @return True if state.IsValid()\n  */\n-bool ProcessNewBlock(CValidationState& state, const CChainParams& chainparams, CNode* pfrom, const CBlock* pblock, bool fForceProcessing, const CDiskBlockPos* dbp);\n+bool ProcessNewBlock(CValidationState& state, const CChainParams& chainparams, CNode* pfrom, const CBlock* pblock, bool fForceProcessing, const CDiskBlockPos* dbp, bool fMayBanPeerIfInvalid);\n /** Check whether enough disk space is available for an incoming block */\n bool CheckDiskSpace(uint64_t nAdditionalBytes = 0);\n /** Open a block file (blk?????.dat) */"
      },
      {
        "sha": "564102ff952c7d4a98362c3c375dcb79c671ee5d",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/88c35491ab19f9afdf9b3fa9356a072f70ef2f55/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/88c35491ab19f9afdf9b3fa9356a072f70ef2f55/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=88c35491ab19f9afdf9b3fa9356a072f70ef2f55",
        "patch": "@@ -132,7 +132,7 @@ UniValue generateBlocks(boost::shared_ptr<CReserveScript> coinbaseScript, int nG\n             continue;\n         }\n         CValidationState state;\n-        if (!ProcessNewBlock(state, Params(), NULL, pblock, true, NULL))\n+        if (!ProcessNewBlock(state, Params(), NULL, pblock, true, NULL, false))\n             throw JSONRPCError(RPC_INTERNAL_ERROR, \"ProcessNewBlock, block not accepted\");\n         ++nHeight;\n         blockHashes.push_back(pblock->GetHash().GetHex());\n@@ -757,7 +757,7 @@ UniValue submitblock(const JSONRPCRequest& request)\n     CValidationState state;\n     submitblock_StateCatcher sc(block.GetHash());\n     RegisterValidationInterface(&sc);\n-    bool fAccepted = ProcessNewBlock(state, Params(), NULL, &block, true, NULL);\n+    bool fAccepted = ProcessNewBlock(state, Params(), NULL, &block, true, NULL, false);\n     UnregisterValidationInterface(&sc);\n     if (fBlockPresent)\n     {"
      },
      {
        "sha": "2762cafa38caf71204b587ca67207dc37d0e0147",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/88c35491ab19f9afdf9b3fa9356a072f70ef2f55/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/88c35491ab19f9afdf9b3fa9356a072f70ef2f55/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=88c35491ab19f9afdf9b3fa9356a072f70ef2f55",
        "patch": "@@ -223,7 +223,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         pblock->hashMerkleRoot = BlockMerkleRoot(*pblock);\n         pblock->nNonce = blockinfo[i].nonce;\n         CValidationState state;\n-        BOOST_CHECK(ProcessNewBlock(state, chainparams, NULL, pblock, true, NULL));\n+        BOOST_CHECK(ProcessNewBlock(state, chainparams, NULL, pblock, true, NULL, false));\n         BOOST_CHECK(state.IsValid());\n         pblock->hashPrevBlock = pblock->GetHash();\n     }"
      },
      {
        "sha": "3da0be8ca409dddd1766922cc53e0cafb54b9f04",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/88c35491ab19f9afdf9b3fa9356a072f70ef2f55/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/88c35491ab19f9afdf9b3fa9356a072f70ef2f55/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=88c35491ab19f9afdf9b3fa9356a072f70ef2f55",
        "patch": "@@ -127,7 +127,7 @@ TestChain100Setup::CreateAndProcessBlock(const std::vector<CMutableTransaction>&\n     while (!CheckProofOfWork(block.GetHash(), block.nBits, chainparams.GetConsensus())) ++block.nNonce;\n \n     CValidationState state;\n-    ProcessNewBlock(state, chainparams, NULL, &block, true, NULL);\n+    ProcessNewBlock(state, chainparams, NULL, &block, true, NULL, false);\n \n     CBlock result = block;\n     return result;"
      }
    ]
  },
  {
    "sha": "d4833ff74701cc97aab733c54adb8f46e602fa5e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNDgzM2ZmNzQ3MDFjYzk3YWFiNzMzYzU0YWRiOGY0NmU2MDJmYTVl",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2016-11-01T15:12:43Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2016-11-03T17:07:13Z"
      },
      "message": "Bump the protocol version to distinguish new banning behavior.\n\nThis allows future software that would relay compact blocks before\nfull validation to announce only to peers that will not ban if the\nblock turns out to be invalid.",
      "tree": {
        "sha": "a2adf634501111c7fcba293ac237e3234404168c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a2adf634501111c7fcba293ac237e3234404168c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d4833ff74701cc97aab733c54adb8f46e602fa5e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d4833ff74701cc97aab733c54adb8f46e602fa5e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d4833ff74701cc97aab733c54adb8f46e602fa5e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d4833ff74701cc97aab733c54adb8f46e602fa5e/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "88c35491ab19f9afdf9b3fa9356a072f70ef2f55",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/88c35491ab19f9afdf9b3fa9356a072f70ef2f55",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/88c35491ab19f9afdf9b3fa9356a072f70ef2f55"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 4,
      "deletions": 1
    },
    "files": [
      {
        "sha": "87fb1a3a75b08fc0af8292b2d8b75f7d4d1bb236",
        "filename": "src/version.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4833ff74701cc97aab733c54adb8f46e602fa5e/src/version.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4833ff74701cc97aab733c54adb8f46e602fa5e/src/version.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/version.h?ref=d4833ff74701cc97aab733c54adb8f46e602fa5e",
        "patch": "@@ -9,7 +9,7 @@\n  * network protocol versioning\n  */\n \n-static const int PROTOCOL_VERSION = 70014;\n+static const int PROTOCOL_VERSION = 70015;\n \n //! initial proto version, to be increased after version/verack negotiation\n static const int INIT_PROTO_VERSION = 209;\n@@ -42,4 +42,7 @@ static const int FEEFILTER_VERSION = 70013;\n //! short-id-based block download starts with this version\n static const int SHORT_IDS_BLOCKS_VERSION = 70014;\n \n+//! not banning for invalid compact blocks starts with this version\n+static const int INVALID_CB_NO_BAN_VERSION = 70015;\n+\n #endif // BITCOIN_VERSION_H"
      }
    ]
  }
]