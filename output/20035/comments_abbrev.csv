MarcoFalke,2020-09-29 12:41:36,"Too sad that teaching the compiler to warn about this would make the code massively verbose, but maybe it is worth a shot now that this is the second time this year?\n\n\n<!--\n==2844273== Thread 24 b-msghand:\n==2844273== Conditional jump or move depends on uninitialised value(s)\n==2844273==    at 0x5335DD: WarningBitsConditionChecker::Condition(CBlockIndex const*, Consensus::Params const&",https://github.com/bitcoin/bitcoin/pull/20035#issuecomment-700675784,700675784,
theStack,2020-09-29 12:54:57,"Concept ACK\n\nThe parameters `BIP16Exception` and `BIP34Hash` are also not initialized for Signet?",https://github.com/bitcoin/bitcoin/pull/20035#issuecomment-700683117,700683117,
MarcoFalke,2020-09-29 13:01:28,unit256 are default initialized to all-zeros,https://github.com/bitcoin/bitcoin/pull/20035#issuecomment-700686646,700686646,
theStack,2020-09-29 13:24:31,"> unit256 are default initialized to all-zeros\n\n\nRight, in those case there is no uninitialized read.\n\nStill, looking at mainnet, testnet and regtest, without exception _all_ parameters (i.e. all 22 fields of `struct Params`) are explicitely initialized -- hence I think for signet and all future *nets the same should be done. Both for consistency and do avoid such uninitialized read erro",https://github.com/bitcoin/bitcoin/pull/20035#issuecomment-700700349,700700349,
practicalswift,2020-09-29 19:47:12,"@MarcoFalke Nice catch! How did you find this one?\n\nIt's always a bit sad to see unitialized reads enter our code base without being caught automatically at CI stage by either dynamic analysis (MSAN or Valgrind) or static analysis :(",https://github.com/bitcoin/bitcoin/pull/20035#issuecomment-700946845,700946845,
practicalswift,2020-09-30 04:32:51,"The UUM takes place in `WarningBitsConditionChecker::Condition` which is executed in the message handler thread:\n\n```\n$ valgrind --exit-on-first-error=yes --track-origins=yes --suppressions=contrib/valgrind.supp src/bitcoind -signet\n…\n==9443== Thread 23 b-msghand:\n==9443== Conditional jump or move depends on uninitialised value(s)\n==9443==    at 0x6F3E65: WarningBitsConditionChecker:",https://github.com/bitcoin/bitcoin/pull/20035#issuecomment-701150491,701150491,
practicalswift,2020-09-30 04:39:02,"Unfortunately it seems like this UUM is not triggered by the code paths exercised by `feature_signet.py`. Covering the triggering code path in the functional test would be nice as part of this fix :)\n\n```\n$ test/functional/test_runner.py --valgrind --timeout-factor=0 feature_signet\n\nTEST              | STATUS    | DURATION\n\nfeature_signet.py | ✓ Passed  | 151 s\n\nALL              ",https://github.com/bitcoin/bitcoin/pull/20035#issuecomment-701151899,701151899,
MarcoFalke,2020-09-30 12:53:03,Pushed some non-bugfix changes,https://github.com/bitcoin/bitcoin/pull/20035#issuecomment-701370891,701370891,
DrahtBot,2020-09-30 19:24:23,<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.,https://github.com/bitcoin/bitcoin/pull/20035#issuecomment-701594670,701594670,
practicalswift,2020-10-01 06:37:55,@kallewoof @MarcoFalke Have someone investigated why this UUM appear not to be exercised in the functional tests?,https://github.com/bitcoin/bitcoin/pull/20035#issuecomment-701921669,701921669,
kallewoof,2020-10-01 07:03:09,"@practicalswift @MarcoFalke I made a minimal test that fails on master: https://github.com/kallewoof/bitcoin/tree/202010-signet-uuv-min9-test\n```\ntest/validation_block_tests.cpp:379: error: in ""validation_block_tests/chainparameters"": check chain->GetConsensus().MinBIP9WarningHeight == 0 has failed [809056355 != 0]\n2020-10-01T06:51:08.729020Z [scheduler] scheduler thread exit\ntest/validati",https://github.com/bitcoin/bitcoin/pull/20035#issuecomment-701933216,701933216,
MarcoFalke,2020-10-01 07:08:27,"The versionbits condition isn't evaluated for the first retarget period after the genesis block, so no test hits it.",https://github.com/bitcoin/bitcoin/pull/20035#issuecomment-701935793,701935793,
jonatack,2020-10-01 08:27:59,Great find -- LGTM modulo the two comments,https://github.com/bitcoin/bitcoin/pull/20035#issuecomment-701977741,701977741,
jonatack,2020-10-01 11:28:15,Code review ACK fa82143e41c067e7d16d612c775701be94974d54,https://github.com/bitcoin/bitcoin/pull/20035#issuecomment-702070706,702070706,
practicalswift,2020-10-01 16:22:08,"@MarcoFalke \n\nWant to share how you found this one (great find!)? :) Was it found by static analysis or dynamic analysis? Automatic testing or manual testing?\n\nI'm thinking about what we can learn from this UUM case. More specifically I'm thinking about potential ways to improve manual and/or automated processes to catch UUM:s pre-merge (in the spirit of #18288, #17633, #18159, #18166 and ",https://github.com/bitcoin/bitcoin/pull/20035#issuecomment-702248040,702248040,
MarcoFalke,2020-10-01 16:26:17,It was found by reading/reviewing the code,https://github.com/bitcoin/bitcoin/pull/20035#issuecomment-702250569,702250569,
michaelfolkson,2020-10-06 12:52:23,"Concept ACK, Approach ACK\n\nHaven't looked into @kallewoof [test](https://github.com/bitcoin/bitcoin/pull/20035#issuecomment-701933216) but presumably that will be in a follow up PR.\n\nThanks for sharing resources too @practicalswift. Added to a StackExchange [post](https://bitcoin.stackexchange.com/questions/99300/what-is-an-uninitialized-read-can-you-point-out-some-examples-found-in-bitcoi",https://github.com/bitcoin/bitcoin/pull/20035#issuecomment-704247512,704247512,
practicalswift,2020-10-06 18:29:04,ACK fa82143e41c067e7d16d612c775701be94974d54: diff looks correct,https://github.com/bitcoin/bitcoin/pull/20035#issuecomment-704466800,704466800,
laanwj,2020-10-15 08:57:26,"Sorry, needs rebase (probably with taproot changes)",https://github.com/bitcoin/bitcoin/pull/20035#issuecomment-709010210,709010210,
MarcoFalke,2020-10-15 09:30:31,Rebased,https://github.com/bitcoin/bitcoin/pull/20035#issuecomment-709037567,709037567,
MarcoFalke,2020-10-16 04:32:54,Fixed typo in commit msg,https://github.com/bitcoin/bitcoin/pull/20035#issuecomment-709753279,709753279,
practicalswift,2020-10-16 06:07:47,re-ACK fa723e3d43e63e8424d97d21d8f2cc8136aba206: patch still looks correct,https://github.com/bitcoin/bitcoin/pull/20035#issuecomment-709820400,709820400,
jonatack,2020-10-01 08:27:12,"fadb384e perhaps group `MinBIP9WarningHeight` with the other height settings as done in the other three chains\n ```diff\n--- a/src/chainparams.cpp\n+++ b/src/chainparams.cpp\n@@ -309,13 +309,13 @@ public:\n         consensus.BIP66Height = 1;\n         consensus.CSVHeight = 1;\n         consensus.SegwitHeight = 1;\n+        consensus.MinBIP9WarningHeight = 0;\n         consensus.nPowTarge",https://github.com/bitcoin/bitcoin/pull/20035#discussion_r498070401,498070401,src/chainparams.cpp
MarcoFalke,2020-10-01 08:32:43,"I've put it in the line right before powLimit, like in all other chain constructors",https://github.com/bitcoin/bitcoin/pull/20035#discussion_r498073904,498073904,src/chainparams.cpp
promag,2020-10-01 08:43:10,"fa82143e41c067e7d16d612c775701be94974d54\n\nNot sure what is the motivation of being explicit here, I'd just remove these cases.",https://github.com/bitcoin/bitcoin/pull/20035#discussion_r498080341,498080341,src/chainparams.cpp
MarcoFalke,2020-10-01 08:58:19,https://github.com/bitcoin/bitcoin/pull/20035#issuecomment-700700349,https://github.com/bitcoin/bitcoin/pull/20035#discussion_r498089590,498089590,src/chainparams.cpp
