[
  {
    "sha": "543f1ae4ef5b629a50ec7b305d855a1efd5a1c22",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NDNmMWFlNGVmNWI2MjlhNTBlYzdiMzA1ZDg1NWExZWZkNWExYzIy",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-09-16T22:33:20Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-09-17T18:04:39Z"
      },
      "message": "contrib: verifybinaries: clean up binary verify output\n\nPrefix errors, warnings, and failures and output them to stderr.",
      "tree": {
        "sha": "ec694a5754693d8c2979c3f9c544ccbdd96aa688",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ec694a5754693d8c2979c3f9c544ccbdd96aa688"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/543f1ae4ef5b629a50ec7b305d855a1efd5a1c22",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEGNRVI1NPYuZCSIrGepNdrbLETwUFAmFE2LcACgkQepNdrbLE\nTwWq8A/+Kvxs05BIkK/cAqkwGFDPR7v2ccDisEiuOA+dsNb+WOFresWxj4jZNgBv\n1KKj6xSYE4DWDB/EOSPUVc2iEsz9ysYEqn6NsYyw98LtKs7ss/gwRJ/TIsX7+xhp\naLbwxOcy9KVfiEODFP4i3LcOXEmeK4kpAdj8TGgG11oknXvIJeT3S+yQQI2wkHXD\nFD5HtyEQ5LA/Ye3eCD2d8dJq9tDu1V3jSUq9o8O5zszck2spD6JN4Acc5pUmtKDO\njczWPRFiuhzvfFCyp6Kpk/NFoGOagT/FjzFAtqiKHV2oezAug4kDCYmTPQMXj2hP\nLOY27s7AiSarwPXuMVoFizYz0oqvkODWFBGaJsOMNughi/pgURnMj3dMP4ByEr0M\n61IWfg7w5Ym5XfHA74M3ChvvbOacPXVdVlwwRSBRuBpyKVpnUdQsHVORjGRrr79O\ngScG8CG5qXWjVEFi7thvR/U982axqYxmjjnQgoumof+m4vIORimyx+G15gWPgHTB\nDm7m06AHdc+9ucc0xDFUYSDMfBLvny1ModXZdRc6iASFLu/y5kNNZ02HCEzR+yWg\n7oJrI7ZFJqnZKTqFym82QBkIjPKy5+VsgEvy+UL4XAmzHE7Qo6Q5CVpeGbyj5GCY\nIF7nFtMMAGJRumVolvkYdt/Z76hJ6mkuuDJ1yi+yOjZUW8YKrX0=\n=WsmU\n-----END PGP SIGNATURE-----",
        "payload": "tree ec694a5754693d8c2979c3f9c544ccbdd96aa688\nparent 6ef84e0503994c53f77093e7ea5951a7b0edea7a\nauthor James O'Beirne <james.obeirne@pm.me> 1631831600 -0400\ncommitter James O'Beirne <james.obeirne@pm.me> 1631901879 -0400\n\ncontrib: verifybinaries: clean up binary verify output\n\nPrefix errors, warnings, and failures and output them to stderr.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/543f1ae4ef5b629a50ec7b305d855a1efd5a1c22",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/543f1ae4ef5b629a50ec7b305d855a1efd5a1c22",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/543f1ae4ef5b629a50ec7b305d855a1efd5a1c22/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6ef84e0503994c53f77093e7ea5951a7b0edea7a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ef84e0503994c53f77093e7ea5951a7b0edea7a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6ef84e0503994c53f77093e7ea5951a7b0edea7a"
      }
    ],
    "stats": {
      "total": 62,
      "additions": 39,
      "deletions": 23
    },
    "files": [
      {
        "sha": "439933d23f858ef0ee35d03b0fe63eed11a82ffb",
        "filename": "contrib/verifybinaries/verify.py",
        "status": "modified",
        "additions": 39,
        "deletions": 23,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/543f1ae4ef5b629a50ec7b305d855a1efd5a1c22/contrib/verifybinaries/verify.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/543f1ae4ef5b629a50ec7b305d855a1efd5a1c22/contrib/verifybinaries/verify.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verifybinaries/verify.py?ref=543f1ae4ef5b629a50ec7b305d855a1efd5a1c22",
        "patch": "@@ -70,7 +70,7 @@ def files_are_equal(filename1, filename2):\n def verify_with_gpg(signature_filename, output_filename):\n     result = subprocess.run(['gpg', '--yes', '--decrypt', '--output',\n                              output_filename, signature_filename],\n-                             stderr=subprocess.STDOUT, stdout=subprocess.PIPE)\n+                            stderr=subprocess.STDOUT, stdout=subprocess.PIPE)\n     return result.returncode, result.stdout.decode().rstrip()\n \n \n@@ -79,10 +79,23 @@ def remove_files(filenames):\n         os.remove(filename)\n \n \n+def print_err(*args, prefix='Error: ', **kwargs):\n+    kwargs['file'] = sys.stderr\n+    print(f\"{prefix}{args[0]}\", *args[1:], **kwargs)\n+\n+\n+def print_warn(*args, **kwargs):\n+    print_err(*args, **kwargs, prefix=\"WARNING: \")\n+\n+\n+def print_fail(*args, **kwargs):\n+    print_err(*args, **kwargs, prefix=\"FAIL: \")\n+\n+\n def main(args):\n     # sanity check\n     if len(args) < 1:\n-        print(\"Error: need to specify a version on the command line\")\n+        print_err(\"need to specify a version on the command line\")\n         return 3\n \n     # determine remote dir dependent on provided version string\n@@ -100,41 +113,43 @@ def main(args):\n     sigfile1 = SIGNATUREFILENAME\n     success, output = download_with_wget(HOST1 + remote_sigfile, sigfile1)\n     if not success:\n-        print(\"Error: couldn't fetch signature file. \"\n-              \"Have you specified the version number in the following format?\")\n-        print(f\"[{VERSIONPREFIX}]<version>[-rc[0-9]][-platform] \"\n-              f\"(example: {VERSIONPREFIX}0.21.0-rc3-osx)\")\n-        print(\"wget output:\")\n-        print(indent(output, '\\t'))\n+        indented_output = indent(output, '\\t')\n+        print_err(\n+            f\"couldn't fetch signature file. \"\n+            \"Have you specified the version number in the following format?\\n\"\n+            f\"[{VERSIONPREFIX}]<version>[-rc[0-9]][-platform] \"\n+            f\"(example: {VERSIONPREFIX}0.21.0-rc3-osx)\\n\"\n+            f\"wget output:\\n{indented_output}\")\n         return 4\n \n     # fetch second signature file\n     sigfile2 = SIGNATUREFILENAME + \".2\"\n     success, output = download_with_wget(HOST2 + remote_sigfile, sigfile2)\n     if not success:\n-        print(\"bitcoin.org failed to provide signature file, \"\n-              \"but bitcoincore.org did?\")\n-        print(\"wget output:\")\n-        print(indent(output, '\\t'))\n+        indented_output = indent(output, '\\t')\n+        print_err(\n+            \"bitcoin.org failed to provide signature file, but bitcoincore.org did?\\n\"\n+            f\"wget output:\\n{indented_output}\")\n         remove_files([sigfile1])\n         return 5\n \n     # ensure that both signature files are equal\n     if not files_are_equal(sigfile1, sigfile2):\n-        print(\"bitcoin.org and bitcoincore.org signature files were not equal?\")\n-        print(f\"See files {WORKINGDIR}/{sigfile1} and {WORKINGDIR}/{sigfile2}\")\n+        print_err(\n+            \"bitcoin.org and bitcoincore.org signature files were not equal?\\n\"\n+            f\"See files {WORKINGDIR}/{sigfile1} and {WORKINGDIR}/{sigfile2}\")\n         return 6\n \n     # check signature and extract data into file\n     retval, output = verify_with_gpg(sigfile1, HASHFILE)\n     if retval != 0:\n         if retval == 1:\n-            print(\"Bad signature.\")\n+            print_err(\"Bad signature.\")\n         elif retval == 2:\n-            print(\"gpg error. Do you have the Bitcoin Core binary release \"\n-                  \"signing key installed?\")\n-        print(\"gpg output:\")\n-        print(indent(output, '\\t'))\n+            print_err(\"gpg error. Do you have the Bitcoin Core binary release \"\n+                      \"signing key installed?\")\n+        indented_output = indent(output, '\\t')\n+        print_err(f\"gpg output:\\n{indented_output}\")\n         remove_files([sigfile1, sigfile2, HASHFILE])\n         return 1\n \n@@ -145,7 +160,7 @@ def main(args):\n             line.split()[:2] for line in hash_file if os_filter in line]\n     remove_files([HASHFILE])\n     if not hashes_to_verify:\n-        print(\"error: no files matched the platform specified\")\n+        print_err(\"no files matched the platform specified\")\n         return 7\n \n     # download binaries\n@@ -161,9 +176,10 @@ def main(args):\n         if hash_calculated != hash_expected:\n             offending_files.append(binary_filename)\n     if offending_files:\n-        print(\"Hashes don't match.\")\n-        print(\"Offending files:\")\n-        print('\\n'.join(offending_files))\n+        joined_files = '\\n'.join(offending_files)\n+        print_fail(\n+            \"Hashes don't match.\\n\"\n+            f\"Offending files:\\n{joined_files}\")\n         return 1\n     verified_binaries = [entry[1] for entry in hashes_to_verify]\n "
      }
    ]
  },
  {
    "sha": "15f8126c3de128333e08326e17c5bb9a7908ab51",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNWY4MTI2YzNkZTEyODMzM2UwODMyNmUxN2M1YmI5YTc5MDhhYjUx",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-09-16T22:51:15Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-09-17T18:04:40Z"
      },
      "message": "contrib: verifybinaries: improve version msg",
      "tree": {
        "sha": "c3a134214a3a36cf9bd0dccdabed602e8c2e6246",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c3a134214a3a36cf9bd0dccdabed602e8c2e6246"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/15f8126c3de128333e08326e17c5bb9a7908ab51",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEGNRVI1NPYuZCSIrGepNdrbLETwUFAmFE2LgACgkQepNdrbLE\nTwV05xAAio6sKeKKkgSGxdWxbkuLwC1i49JBwMLZoFqx03hlUaGPqksfh/eA5rll\nBmIPS+3QaBiCwUqk2ckJCBZR7M8zfGCJU0eOqSyKO7YKy9OA2J++2w9yIdtSjP4n\nBYO5RYONiuD0L5EJts0OXNhFuNbURc7R5uH6Fto0Ksfn2UTeZPvhd8pnRREW1CMj\n7y41inOfza8YUjfgM1SBV4gT83iehDHd1x/uyPH3CfGhashcAkFRSQijBuj1pcby\nfgiIn7wY6e1SChH1LOvZLIEB1/jW936hz2T5FZ6wpWBSWmijCnWhpVWhIb8ZdwlJ\n8PqehJKhyTPvwUwBxTLIpC06dswS0TWDEFJmfaz+fOwfHsX8coC/QoNWqW2P5y53\nEJ1ifKfNaAO1zrHbkb4uVXRPusF/srffYcb52w/H+qwiWDSPz2Ho33wdTBtCP9sE\n7hZVWDbm3okXl7efsMzv2Ot8y68weTexixkTz9DY/4DZO3QB1V6lDy0JqBgQMIb2\nKVhIFsDifEndGsZhQwYf7xRZNAPckOI5N2fIP6GtuB8myGYw6jbkthPWJWyDR1Tx\n8pDJ6ab+935YmrybmUIycy19UZ7NGBk1ljYdM78lsoTrhWE4FqbaEwZFz2waYF/b\nVc5Dx0TKzHq2Pns1w5eVGgOG9HwYSez5e0pXsgqWatWxD6ckPgo=\n=ygU4\n-----END PGP SIGNATURE-----",
        "payload": "tree c3a134214a3a36cf9bd0dccdabed602e8c2e6246\nparent 543f1ae4ef5b629a50ec7b305d855a1efd5a1c22\nauthor James O'Beirne <james.obeirne@pm.me> 1631832675 -0400\ncommitter James O'Beirne <james.obeirne@pm.me> 1631901880 -0400\n\ncontrib: verifybinaries: improve version msg\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/15f8126c3de128333e08326e17c5bb9a7908ab51",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/15f8126c3de128333e08326e17c5bb9a7908ab51",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/15f8126c3de128333e08326e17c5bb9a7908ab51/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "543f1ae4ef5b629a50ec7b305d855a1efd5a1c22",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/543f1ae4ef5b629a50ec7b305d855a1efd5a1c22",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/543f1ae4ef5b629a50ec7b305d855a1efd5a1c22"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 9,
      "deletions": 3
    },
    "files": [
      {
        "sha": "4538266b54fa67be2f2ec90c1997b47bf4ef3b62",
        "filename": "contrib/verifybinaries/verify.py",
        "status": "modified",
        "additions": 9,
        "deletions": 3,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15f8126c3de128333e08326e17c5bb9a7908ab51/contrib/verifybinaries/verify.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15f8126c3de128333e08326e17c5bb9a7908ab51/contrib/verifybinaries/verify.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verifybinaries/verify.py?ref=15f8126c3de128333e08326e17c5bb9a7908ab51",
        "patch": "@@ -92,10 +92,16 @@ def print_fail(*args, **kwargs):\n     print_err(*args, **kwargs, prefix=\"FAIL: \")\n \n \n+VERSION_FORMAT = \"<major>.<minor>[.<patch>][-rc[0-9]][-platform]\"\n+VERSION_EXAMPLE = \"22.0-rc2-x86_64-linux-gnu or 0.21.0-rc2-osx\"\n+\n def main(args):\n     # sanity check\n     if len(args) < 1:\n-        print_err(\"need to specify a version on the command line\")\n+        print_err(\n+            f\"need to specify a version on the command line of the form {VERSION_FORMAT} \"\n+            f\"(e.g. {VERSION_EXAMPLE})\"\n+        )\n         return 3\n \n     # determine remote dir dependent on provided version string\n@@ -117,8 +123,8 @@ def main(args):\n         print_err(\n             f\"couldn't fetch signature file. \"\n             \"Have you specified the version number in the following format?\\n\"\n-            f\"[{VERSIONPREFIX}]<version>[-rc[0-9]][-platform] \"\n-            f\"(example: {VERSIONPREFIX}0.21.0-rc3-osx)\\n\"\n+            f\"[{VERSIONPREFIX}]{VERSION_FORMAT} \"\n+            f\"(example: {VERSIONPREFIX}{VERSION_EXAMPLE})\\n\"\n             f\"wget output:\\n{indented_output}\")\n         return 4\n "
      }
    ]
  },
  {
    "sha": "1e900e71d830d31cebb610ec5ad7b58d557a07f5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZTkwMGU3MWQ4MzBkMzFjZWJiNjEwZWM1YWQ3YjU4ZDU1N2EwN2Y1",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-09-16T23:01:23Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-09-17T18:04:41Z"
      },
      "message": "contrib: verifybinaries: don't require both hosts by default\n\nSince bitcoin.org can lag behind bitcoincore.org.",
      "tree": {
        "sha": "22cfb9db4f98531b49976cb7ca53af42db598dbe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/22cfb9db4f98531b49976cb7ca53af42db598dbe"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1e900e71d830d31cebb610ec5ad7b58d557a07f5",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEGNRVI1NPYuZCSIrGepNdrbLETwUFAmFE2LkACgkQepNdrbLE\nTwXhfA/7BbM9C7of+AA6n/AU/Y4sBCvcUogpHl1ImyKD/qJw35hwRlEQVwmkiStu\nRM803/DUK63txCK6wCBAdjTwgQoXNCrPbLNkVPmacBwM5rIhw/ZrHE9BDtmZ2UrF\ni7jAIUyXnFkb7AVjRGrKmukiI8hoynQXl8xIDSZ5t/6HItpX9F5KZKjtbcna3cXR\nFeq7lp2u8M9ZItFusH+3rdyLEMOI7hCDHyva0sd8HjB7YoA4pVugAXn6AoH2h6x/\nHELfUaunGylKHmAoIKjtLPRo39ikRJf+nA4uDQm5KIyt+iE91mkhdY/CjPjKiVlF\nTJimvu2Gb66Bqer5DOzwPWUvQ+AuS/43nPhCxnD2NqUryN4b1DXUME3KG/NfRk9O\n9rtea+i5FdPPBTlMhr2AU+6u/OFtN097q9XWALLZhwdpb1FxwThVzLwg84hqUVRw\nWzETDv1o6gYSZCpotZTccve3GpFKn67ynBWK7VK9aUUurWsdLVYe8qGkOpIFmO3R\n+KdM+EAZCLl4hnwDSWJRDEk/AxvfRWmMJIFgQVE99yaela6Z/rO3V5ScLPxRbBXE\ng+w0x/JGd/UKyr4abP84kC+sSXGD78EwsRwgvB2u2irqoz7fQJ0dIYVSUC0kCJfw\nVsi4xGBcvWzzyv2DEulyEamKs57//tY4gVswH7LXqJ5vgJwl/N4=\n=f8bN\n-----END PGP SIGNATURE-----",
        "payload": "tree 22cfb9db4f98531b49976cb7ca53af42db598dbe\nparent 15f8126c3de128333e08326e17c5bb9a7908ab51\nauthor James O'Beirne <james.obeirne@pm.me> 1631833283 -0400\ncommitter James O'Beirne <james.obeirne@pm.me> 1631901881 -0400\n\ncontrib: verifybinaries: don't require both hosts by default\n\nSince bitcoin.org can lag behind bitcoincore.org.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e900e71d830d31cebb610ec5ad7b58d557a07f5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1e900e71d830d31cebb610ec5ad7b58d557a07f5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e900e71d830d31cebb610ec5ad7b58d557a07f5/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "15f8126c3de128333e08326e17c5bb9a7908ab51",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/15f8126c3de128333e08326e17c5bb9a7908ab51",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/15f8126c3de128333e08326e17c5bb9a7908ab51"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 18,
      "deletions": 9
    },
    "files": [
      {
        "sha": "e6aced7289565754171a1f44fd6911299d651a8a",
        "filename": "contrib/verifybinaries/verify.py",
        "status": "modified",
        "additions": 18,
        "deletions": 9,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e900e71d830d31cebb610ec5ad7b58d557a07f5/contrib/verifybinaries/verify.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e900e71d830d31cebb610ec5ad7b58d557a07f5/contrib/verifybinaries/verify.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verifybinaries/verify.py?ref=1e900e71d830d31cebb610ec5ad7b58d557a07f5",
        "patch": "@@ -26,6 +26,10 @@\n VERSIONPREFIX = \"bitcoin-core-\"\n SIGNATUREFILENAME = \"SHA256SUMS.asc\"\n \n+# If set, require both bitcoincore.org and bitcoin.org to provide signatures.\n+# (Sometimes bitcoin.org lags behind bitcoincore.org.)\n+REQUIRE_BOTH_HOSTS = bool(os.environ.get('REQUIRE_BOTH_HOSTS'))\n+\n \n def parse_version_string(version_str):\n     if version_str.startswith(VERSIONPREFIX):  # remove version prefix\n@@ -131,20 +135,25 @@ def main(args):\n     # fetch second signature file\n     sigfile2 = SIGNATUREFILENAME + \".2\"\n     success, output = download_with_wget(HOST2 + remote_sigfile, sigfile2)\n-    if not success:\n+    got_both = success\n+    if REQUIRE_BOTH_HOSTS and not success:\n         indented_output = indent(output, '\\t')\n         print_err(\n-            \"bitcoin.org failed to provide signature file, but bitcoincore.org did?\\n\"\n+            f\"{HOST2} failed to provide signature file, but {HOST1} did?\\n\"\n             f\"wget output:\\n{indented_output}\")\n         remove_files([sigfile1])\n         return 5\n-\n-    # ensure that both signature files are equal\n-    if not files_are_equal(sigfile1, sigfile2):\n-        print_err(\n-            \"bitcoin.org and bitcoincore.org signature files were not equal?\\n\"\n-            f\"See files {WORKINGDIR}/{sigfile1} and {WORKINGDIR}/{sigfile2}\")\n-        return 6\n+    elif not success:\n+        print_warn(\n+            f\"{HOST2} failed to provide signature file. Continuing based solely upon {HOST1}\")\n+\n+    if got_both:\n+        # ensure that both signature files are equal\n+        if not files_are_equal(sigfile1, sigfile2):\n+            print_err(\n+                f\"{HOST1} and {HOST2} signature files were not equal?\\n\"\n+                f\"See files {WORKINGDIR}/{sigfile1} and {WORKINGDIR}/{sigfile2}\")\n+            return 6\n \n     # check signature and extract data into file\n     retval, output = verify_with_gpg(sigfile1, HASHFILE)"
      }
    ]
  },
  {
    "sha": "0bd3220200f9b87a2bb7b1644cb67b55cce4f3d0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYmQzMjIwMjAwZjliODdhMmJiN2IxNjQ0Y2I2N2I1NWNjZTRmM2Qw",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-09-17T00:11:59Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-09-17T18:04:42Z"
      },
      "message": "contrib: verifybinaries: implement builder key diffing\n\nRetrieve builder keys from a local source and the remote Github\nrepository and, if both are available, diff them.",
      "tree": {
        "sha": "1a018d2dec0ad6d50d3d4f165a9b8811c0f0a478",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1a018d2dec0ad6d50d3d4f165a9b8811c0f0a478"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0bd3220200f9b87a2bb7b1644cb67b55cce4f3d0",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEGNRVI1NPYuZCSIrGepNdrbLETwUFAmFE2LoACgkQepNdrbLE\nTwU58Q//VU7t77a6jjKD2kWRjilyNj5UHu6u0P91OxQDoI1/v+B2JEfqB1LjSd8d\nvN05qEUsxOWrSdIiCLUc1Gihsez7sXnImcOKyqTgaJr4q7ag86w84Zd3ugJrdNOM\n6gbKw/sSyC0s0mVMa+8K52iGBKgnHLExGFEHHByRpUOeEWVVNzq1ZbGZ/bRlK9jv\nKhOR69QsxBUu92lsFuTpjPYOeMKsxmzlpHgtirbmRj3i3KHZz6rPkgGCzzftV2Sh\nS01X0f+Q0Fr0eU+BTgJUIV9QQY4dJ7M+1Wky3t4fn9jdK7o8d/w0KP/uyutblkRC\nxpoqd+kg8mYAexrU0EsmsIJysbLmGYAkzafeZPkavgJ+fiq0BS4qswayFsqGnIry\ndM+fVImKTRgF2Otd9fSdFICw7QtoIxzttn4uDWe/OFeWl2Q0Ss/j1ZS3t/wf0gkM\nxwGKkgVhoRfFjz8jyHq+nzBeVNpd1ZIhedLUkkAaiC1kHi01MSkBM1PL6CAriWMn\nCi6c76fg3a5E8GyLq3eOWAJc4BWe10H+0KuH7uue19p6ciY0WRGwPLgnBSaRgncr\nSnN70BY0qIYnWcHWT+N2VJcn+jY1sWo3td/BTyTZMuuDVtVmgjwAKB28Pv7QhwEL\nMl13LyRUyaU07HfL1dOPKWAFLhsomvRy9Ql+rnFca8obqEx7aqE=\n=xXMk\n-----END PGP SIGNATURE-----",
        "payload": "tree 1a018d2dec0ad6d50d3d4f165a9b8811c0f0a478\nparent 1e900e71d830d31cebb610ec5ad7b58d557a07f5\nauthor James O'Beirne <james.obeirne@pm.me> 1631837519 -0400\ncommitter James O'Beirne <james.obeirne@pm.me> 1631901882 -0400\n\ncontrib: verifybinaries: implement builder key diffing\n\nRetrieve builder keys from a local source and the remote Github\nrepository and, if both are available, diff them.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0bd3220200f9b87a2bb7b1644cb67b55cce4f3d0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0bd3220200f9b87a2bb7b1644cb67b55cce4f3d0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0bd3220200f9b87a2bb7b1644cb67b55cce4f3d0/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1e900e71d830d31cebb610ec5ad7b58d557a07f5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e900e71d830d31cebb610ec5ad7b58d557a07f5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1e900e71d830d31cebb610ec5ad7b58d557a07f5"
      }
    ],
    "stats": {
      "total": 55,
      "additions": 49,
      "deletions": 6
    },
    "files": [
      {
        "sha": "19c5f5d2031d17441797c4fc35d657794fcce53b",
        "filename": "contrib/verifybinaries/verify.py",
        "status": "modified",
        "additions": 49,
        "deletions": 6,
        "changes": 55,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0bd3220200f9b87a2bb7b1644cb67b55cce4f3d0/contrib/verifybinaries/verify.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0bd3220200f9b87a2bb7b1644cb67b55cce4f3d0/contrib/verifybinaries/verify.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verifybinaries/verify.py?ref=0bd3220200f9b87a2bb7b1644cb67b55cce4f3d0",
        "patch": "@@ -14,22 +14,30 @@\n return value is >= 2.\n \"\"\"\n from hashlib import sha256\n+import difflib\n import os\n import subprocess\n import sys\n+import urllib.request\n from textwrap import indent\n+from pathlib import Path\n \n WORKINGDIR = \"/tmp/bitcoin_verify_binaries\"\n HASHFILE = \"hashes.tmp\"\n HOST1 = \"https://bitcoincore.org\"\n HOST2 = \"https://bitcoin.org\"\n VERSIONPREFIX = \"bitcoin-core-\"\n SIGNATUREFILENAME = \"SHA256SUMS.asc\"\n+BUILDER_KEYS_GH_URL = (\n+    \"https://raw.githubusercontent.com/bitcoin/bitcoin/master/contrib/builder-keys/keys.txt\"\n+)\n \n-# If set, require both bitcoincore.org and bitcoin.org to provide signatures.\n-# (Sometimes bitcoin.org lags behind bitcoincore.org.)\n-REQUIRE_BOTH_HOSTS = bool(os.environ.get('REQUIRE_BOTH_HOSTS'))\n-\n+class Config:\n+    # If set, require both bitcoincore.org and bitcoin.org to provide signatures.\n+    # (Sometimes bitcoin.org lags behind bitcoincore.org.)\n+    require_both_hosts = bool(os.environ.get('REQUIRE_BOTH_HOSTS'))\n+    bitcoin_src_path = (\n+        Path(os.environ.get('BITCOIN_SRC_PATH')) if 'BITCOIN_SRC_PATH' in os.environ else None)\n \n def parse_version_string(version_str):\n     if version_str.startswith(VERSIONPREFIX):  # remove version prefix\n@@ -63,6 +71,17 @@ def download_with_wget(remote_file, local_file=None):\n     return result.returncode == 0, result.stdout.decode().rstrip()\n \n \n+def download_lines_with_urllib(url) -> (bool, [str]):\n+    \"\"\"Get (success, text lines of a file) over HTTP.\"\"\"\n+    try:\n+        return True, [l.strip().decode() for l in urllib.request.urlopen(url).readlines()]\n+    except urllib.request.HTTPError:\n+        print_warn(f\"HTTP request to {url} failed (HTTPError)\")\n+    except Exception as e:\n+        print_warn(f\"HTTP request to {url} failed ({e})\")\n+    return (False, [])\n+\n+\n def files_are_equal(filename1, filename2):\n     with open(filename1, 'rb') as file1:\n         contents1 = file1.read()\n@@ -115,6 +134,7 @@ def main(args):\n         remote_dir += f\"test.{version_rc}/\"\n     remote_sigfile = remote_dir + SIGNATUREFILENAME\n \n+    bitcoin_dir_maybe = Config.bitcoin_src_path or Path.cwd()\n     # create working directory\n     os.makedirs(WORKINGDIR, exist_ok=True)\n     os.chdir(WORKINGDIR)\n@@ -136,7 +156,7 @@ def main(args):\n     sigfile2 = SIGNATUREFILENAME + \".2\"\n     success, output = download_with_wget(HOST2 + remote_sigfile, sigfile2)\n     got_both = success\n-    if REQUIRE_BOTH_HOSTS and not success:\n+    if Config.require_both_hosts and not success:\n         indented_output = indent(output, '\\t')\n         print_err(\n             f\"{HOST2} failed to provide signature file, but {HOST1} did?\\n\"\n@@ -145,7 +165,7 @@ def main(args):\n         return 5\n     elif not success:\n         print_warn(\n-            f\"{HOST2} failed to provide signature file. Continuing based solely upon {HOST1}\")\n+            f\"{HOST2} failed to provide signature file. Continuing based solely upon {HOST1}.\")\n \n     if got_both:\n         # ensure that both signature files are equal\n@@ -155,6 +175,29 @@ def main(args):\n                 f\"See files {WORKINGDIR}/{sigfile1} and {WORKINGDIR}/{sigfile2}\")\n             return 6\n \n+    # get builder keys - if we have them locally, compare them to the github repo\n+    local_builder_keys = []\n+    local_builder_path = bitcoin_dir_maybe / 'contrib' / 'builder-keys' / 'keys.txt'\n+    if local_builder_path.exists():\n+        local_builder_keys = local_builder_path.read_text().splitlines()\n+\n+    success, gh_builder_keys = download_lines_with_urllib(BUILDER_KEYS_GH_URL)\n+    if not success:\n+        print_warn(f\"unable to retrieve builder keys from {BUILDER_KEYS_GH_URL}\")\n+\n+    if not (success or local_builder_keys):\n+        print_err(\"unable to retrieve builder keys locally or remotely\")\n+\n+    # check the local and remote builder keys against each other and report diff\n+    if local_builder_keys and gh_builder_keys:\n+        if local_builder_keys != gh_builder_keys:\n+            diff = '\\n'.join(difflib.ndiff(local_builder_keys, gh_builder_keys))\n+            print_warn(f\"found diff in builder keys:\\n\\n{diff}\")\n+\n+    # \"Can't check signature\"\n+    # 'Good signature from \"...\"'\n+    # 'BAD signature from \"...\"'\n+\n     # check signature and extract data into file\n     retval, output = verify_with_gpg(sigfile1, HASHFILE)\n     if retval != 0:"
      }
    ]
  },
  {
    "sha": "030c9cbaba15645cf159c71e3432a4257ce993a5",
    "node_id": "C_kwDOABII59oAKDAzMGM5Y2JhYmExNTY0NWNmMTU5YzcxZTM0MzJhNDI1N2NlOTkzYTU",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-09-17T16:34:48Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-09-22T15:41:35Z"
      },
      "message": "contrib: verifybinaries: implement granular sig checking\n\nThis commit adds the functionality necessary to transition from\ndoing binary verification on the basis of a single signature to\nrequiring a minimum threshold of trusted signatures.\n\n\"Trust\" is established based upon the union of keys which are marked\nlocally in GPG as being trusted and keys that appear in the builder-keys\nlisting in the bitcoin/bitcoin repository.\n\nA signature can appear as \"good\" from GPG output, but it may not\nnecessarily be trusted by us based upon the criteria above. We call\nthese \"good, untrusted\" signatures and they are reported but not used in\nthe final tally to satisfy the signature threshold.\n\nWe report bad signatures but do not necessarily fail in their presence,\nsince a bad signature might coexist with enough good, trusted signatures\nto fulfill our criteria.\n\nIf \"noninteractive\" is not enabled, we will prompt the user to\noptionally try to retrieve unknown keys. Marking them as trusted locally\nis a WIP, but keys which are retrieved successfully and appear on the\nbuilder-keys list will immediately count as being useful towards\nfulfilling the threshold.",
      "tree": {
        "sha": "ee00606e6bcf749ada6806ba2df168ad4930686f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ee00606e6bcf749ada6806ba2df168ad4930686f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/030c9cbaba15645cf159c71e3432a4257ce993a5",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEGNRVI1NPYuZCSIrGepNdrbLETwUFAmFLTrEACgkQepNdrbLE\nTwVlkQ/8CRvokuLpWlEEJ/LIW7ATDOr879J9/ivB9ERHH1ZF2PyW1zsOHPdYU/Xf\nIDASV1P8gaFta5IKQ6X4IbNPdu0PTFL0v1qYhbx9fneBWebiK+WfxgSpBHCOMuYu\n5fapipddu9BE7BXZlBgw6hN+vMziybEJ48fpVEA/Z6x7CV/K+ngVropJlKKdUm4y\nqYQn8F2ZxuaLqIZekq34GWjKQ2nnNY4uTqWT0hB+qicBnWMETJkgL5j97QYdcFbn\nvMFbDMGfmJsHf9sbCMmjWvPecetdowSQ0Ftd/LeGbBiD28lzCcy2m8hzYSchSTef\ncmQTXso6qJdN5+nkx/epsNzpV6Rhn2pP1obJOIjobrOGOSsbSHXOYAoAJiUNiEEk\nCgrcsCuFp2VzfhtBEbOhLwmSq81YgwlXBg1cE9VJSVQ36wEyMcmGPTX3XZ/ZdKMy\nAG96UQ/mcn73CSM0eC5LC2cvpAzv3hRufdXr7S/z0p1T+3uc39XWrIeUSrVD9GGI\nmzO3VpWZY0VD5pOhJHr9xTh2zZJLzQ1GkXAwU7uwRDiqJuas/yScWLujEsCLwDAs\nePH5Q45cdb/7KZ5P4IbCYYLboFIZBn4i0NUb0L7F/qzvvN+cqlm/Wf4MS/a158g+\nE0tYDNYZHyAP+FN7zzpNb0ofRkfXCUe3jmxfsUBZbmGL09YuBuk=\n=PSWj\n-----END PGP SIGNATURE-----",
        "payload": "tree ee00606e6bcf749ada6806ba2df168ad4930686f\nparent 0bd3220200f9b87a2bb7b1644cb67b55cce4f3d0\nauthor James O'Beirne <james.obeirne@pm.me> 1631896488 -0400\ncommitter James O'Beirne <james.obeirne@pm.me> 1632325295 -0400\n\ncontrib: verifybinaries: implement granular sig checking\n\nThis commit adds the functionality necessary to transition from\ndoing binary verification on the basis of a single signature to\nrequiring a minimum threshold of trusted signatures.\n\n\"Trust\" is established based upon the union of keys which are marked\nlocally in GPG as being trusted and keys that appear in the builder-keys\nlisting in the bitcoin/bitcoin repository.\n\nA signature can appear as \"good\" from GPG output, but it may not\nnecessarily be trusted by us based upon the criteria above. We call\nthese \"good, untrusted\" signatures and they are reported but not used in\nthe final tally to satisfy the signature threshold.\n\nWe report bad signatures but do not necessarily fail in their presence,\nsince a bad signature might coexist with enough good, trusted signatures\nto fulfill our criteria.\n\nIf \"noninteractive\" is not enabled, we will prompt the user to\noptionally try to retrieve unknown keys. Marking them as trusted locally\nis a WIP, but keys which are retrieved successfully and appear on the\nbuilder-keys list will immediately count as being useful towards\nfulfilling the threshold.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/030c9cbaba15645cf159c71e3432a4257ce993a5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/030c9cbaba15645cf159c71e3432a4257ce993a5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/030c9cbaba15645cf159c71e3432a4257ce993a5/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0bd3220200f9b87a2bb7b1644cb67b55cce4f3d0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0bd3220200f9b87a2bb7b1644cb67b55cce4f3d0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0bd3220200f9b87a2bb7b1644cb67b55cce4f3d0"
      }
    ],
    "stats": {
      "total": 303,
      "additions": 278,
      "deletions": 25
    },
    "files": [
      {
        "sha": "412ce69b81cc310b3d9157a2cb37c5e05d60c982",
        "filename": "contrib/verifybinaries/verify.py",
        "status": "modified",
        "additions": 278,
        "deletions": 25,
        "changes": 303,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/030c9cbaba15645cf159c71e3432a4257ce993a5/contrib/verifybinaries/verify.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/030c9cbaba15645cf159c71e3432a4257ce993a5/contrib/verifybinaries/verify.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verifybinaries/verify.py?ref=030c9cbaba15645cf159c71e3432a4257ce993a5",
        "patch": "@@ -17,27 +17,61 @@\n import difflib\n import os\n import subprocess\n+import re\n import sys\n import urllib.request\n+from collections import namedtuple\n from textwrap import indent\n from pathlib import Path\n \n WORKINGDIR = \"/tmp/bitcoin_verify_binaries\"\n-HASHFILE = \"hashes.tmp\"\n HOST1 = \"https://bitcoincore.org\"\n HOST2 = \"https://bitcoin.org\"\n VERSIONPREFIX = \"bitcoin-core-\"\n-SIGNATUREFILENAME = \"SHA256SUMS.asc\"\n+SUMS_FILENAME = 'SHA256SUMS'\n+SIGNATUREFILENAME = f\"{SUMS_FILENAME}.asc\"\n BUILDER_KEYS_GH_URL = (\n     \"https://raw.githubusercontent.com/bitcoin/bitcoin/master/contrib/builder-keys/keys.txt\"\n )\n \n+\n+def bool_from_env(key, default=False) -> bool:\n+    if key not in os.environ:\n+        return default\n+    raw = os.environ[key]\n+    return raw in ['1', 'True', 'true']\n+\n+\n class Config:\n+    # Run this script without user input.\n+    noninteractive = bool_from_env('BINVERIFY_NONINTERACTIVE')\n+\n     # If set, require both bitcoincore.org and bitcoin.org to provide signatures.\n     # (Sometimes bitcoin.org lags behind bitcoincore.org.)\n-    require_both_hosts = bool(os.environ.get('REQUIRE_BOTH_HOSTS'))\n+    require_both_hosts = bool_from_env('BINVERIFY_REQUIRE_BOTH_HOSTS')\n     bitcoin_src_path = (\n-        Path(os.environ.get('BITCOIN_SRC_PATH')) if 'BITCOIN_SRC_PATH' in os.environ else None)\n+        Path(os.environ.get('BINVERIFY_BITCOIN_SRC_PATH')) if\n+        'BINVERIFY_BITCOIN_SRC_PATH' in os.environ else None\n+    )\n+\n+    # Whether or not to prompt the user to import unrecognized builder keys.\n+    import_builders = (not noninteractive) and bool_from_env('BINVERIFY_IMPORT_BUILDERS', True)\n+\n+    # The minimum number of signatures from recognized keys to\n+    # require successful termination.\n+    min_recognized_sigs = (\n+        int(os.environ.get('BINVERIFY_MIN_RECOGNIZED_SIGS')) if\n+        'BINVERIFY_MIN_RECOGNIZED_SIGS' in os.environ else 4\n+    )\n+\n+    keyserver = os.environ.get('BINVERIFY_KEYSERVER', 'hkp://keyserver.ubuntu.com')\n+\n+    # A list of trusted GPG keys, specified as a CSV\n+    trusted_keys = os.environ.get('BINVERIFY_TRUSTED_KEYS', '')\n+\n+    # Whether or not to trust the pubkeys referenced in the builder-keys/keys.txt file\n+    trust_builder_keys = bool_from_env('BINVERIFY_TRUST_BUILDER_KEYS', True)\n+\n \n def parse_version_string(version_str):\n     if version_str.startswith(VERSIONPREFIX):  # remove version prefix\n@@ -90,9 +124,8 @@ def files_are_equal(filename1, filename2):\n     return contents1 == contents2\n \n \n-def verify_with_gpg(signature_filename, output_filename):\n-    result = subprocess.run(['gpg', '--yes', '--decrypt', '--output',\n-                             output_filename, signature_filename],\n+def verify_with_gpg(signature_filename):\n+    result = subprocess.run(['gpg', '--yes', '--decrypt', signature_filename],\n                             stderr=subprocess.STDOUT, stdout=subprocess.PIPE)\n     return result.returncode, result.stdout.decode().rstrip()\n \n@@ -115,6 +148,100 @@ def print_fail(*args, **kwargs):\n     print_err(*args, **kwargs, prefix=\"FAIL: \")\n \n \n+def print_info(*args, **kwargs):\n+    print_err(*args, **kwargs, prefix=\"INFO: \")\n+\n+\n+class SigData:\n+    \"\"\"GPG signature data as parsed from GPG stdout.\"\"\"\n+    def __init__(self, key: str, name: str, trusted: bool, status: str):\n+        self.key = key\n+        self.name = name\n+        self.trusted = trusted\n+        self.status = status\n+\n+    def __repr__(self):\n+        return (\n+            \"SigData(%r, %r, trusted=%s, status=%r)\" %\n+            (self.key, self.name, self.trusted, self.status))\n+\n+\n+def parse_gpg_result(output: str) -> ([SigData], [SigData], [SigData]):\n+    \"\"\"Returns good, unknown, and bad signatures from GPG stdout.\"\"\"\n+    good_sigs = []\n+    unknown_sigs = []\n+    bad_sigs = []\n+    total_resolved_sigs = 0\n+    curr_key = None\n+\n+    for i, line in enumerate(output):\n+        if 'using RSA key' in line:\n+            if curr_key:\n+                raise RuntimeError(\n+                    f\"WARNING: encountered a new sig without resolving the last ({curr_key}) - \"\n+                    \"this could mean we have encountered a bad signature! check GPG output!\")\n+            curr_key = line.split('key ')[-1].strip()\n+            assert len(curr_key) == 40\n+\n+        if \"Can't check signature: No public key\" in line:\n+            if not curr_key:\n+                raise RuntimeError(\"failed to detect signature being resolved\")\n+            unknown_sigs.append(SigData(curr_key, '', False, ''))\n+            curr_key = None\n+\n+        if 'Good signature from ' in line:\n+            if not curr_key:\n+                raise RuntimeError(\"failed to detect signature being resolved\")\n+            name, status = parse_gpg_from_line(line)\n+\n+            # It's safe to index output[i + 1] because if we saw a good sig, there should\n+            # always be another line\n+            trusted = (\n+                'This key is not certified with a trusted signature' not in output[i + 1])\n+            good_sigs.append(SigData(curr_key, name, trusted, status))\n+            curr_key = None\n+\n+        if 'bad signature from' in line.lower():\n+            if not curr_key:\n+                raise RuntimeError(\"failed to detect signature being resolved\")\n+            name, status = parse_gpg_from_line(line)\n+            bad_sigs.append(SigData(curr_key, name, False, status))\n+            curr_key = None\n+\n+        # Track total signatures included\n+        if ': Signature made ' in line:\n+            total_resolved_sigs += 1\n+\n+    all_found = len(good_sigs + bad_sigs + unknown_sigs)\n+    if all_found != total_resolved_sigs:\n+        raise RuntimeError(\n+            f\"failed to evaluate all signatures: found {all_found} \"\n+            f\"but expected {total_resolved_sigs}\")\n+\n+    return (good_sigs, unknown_sigs, bad_sigs)\n+\n+\n+def parse_gpg_from_line(line: str) -> (str, str):\n+    \"\"\"Returns name and expiration status.\"\"\"\n+    assert 'signature from' in line\n+\n+    name_end = line.split(' from ')[-1]\n+    m = re.search(r'(?P<name>\".+\") \\[(?P<status>\\w+)\\]', name_end)\n+    assert m\n+    (name, status) = m.groups()\n+    name = name.strip('\"\\'')\n+\n+    return (name, status)\n+\n+def gpg_add_full_trust(key: str):\n+    \"\"\"Programmatically update a GPG key as being fully trusted (4).\"\"\"\n+    # For whatever reason, fully = 5 (and not 4) here.\n+    trust_line = f'{key}:5:'\n+    print_info(f\"Updating GPG trust db with '{trust_line}'\")\n+    ran = subprocess.run(f\"echo '{trust_line}' | gpg --import-ownertrust\", shell=True)\n+    assert ran.returncode == 0\n+\n+\n VERSION_FORMAT = \"<major>.<minor>[.<patch>][-rc[0-9]][-platform]\"\n VERSION_EXAMPLE = \"22.0-rc2-x86_64-linux-gnu or 0.21.0-rc2-osx\"\n \n@@ -152,6 +279,16 @@ def main(args):\n             f\"wget output:\\n{indented_output}\")\n         return 4\n \n+    # fetch first sums text file\n+    sumfile1 = SUMS_FILENAME\n+    success, output = download_with_wget(HOST1 + remote_dir + SUMS_FILENAME, sumfile1)\n+    if not success:\n+        indented_output = indent(output, '\\t')\n+        print_err(\n+            f\"couldn't fetch {SUMS_FILENAME} file.\\n\"\n+            f\"wget output:\\n{indented_output}\")\n+        return 4\n+\n     # fetch second signature file\n     sigfile2 = SIGNATUREFILENAME + \".2\"\n     success, output = download_with_wget(HOST2 + remote_sigfile, sigfile2)\n@@ -167,13 +304,33 @@ def main(args):\n         print_warn(\n             f\"{HOST2} failed to provide signature file. Continuing based solely upon {HOST1}.\")\n \n+    # fetch second sums text file\n+    sumfile2 = SUMS_FILENAME + \".2\"\n+    success, output = download_with_wget(HOST2 + remote_dir + SUMS_FILENAME, sumfile2)\n+    got_both = got_both and success\n+    if Config.require_both_hosts and not success:\n+        indented_output = indent(output, '\\t')\n+        print_err(\n+            f\"{HOST2} failed to provide {SUMS_FILENAME} file, but {HOST1} did?\\n\"\n+            f\"wget output:\\n{indented_output}\")\n+        remove_files([sigfile1])\n+        return 5\n+    elif not success:\n+        print_warn(\n+            f\"{HOST2} failed to provide {SUMS_FILENAME} file. Continuing based solely upon {HOST1}.\")\n+\n     if got_both:\n         # ensure that both signature files are equal\n         if not files_are_equal(sigfile1, sigfile2):\n             print_err(\n                 f\"{HOST1} and {HOST2} signature files were not equal?\\n\"\n                 f\"See files {WORKINGDIR}/{sigfile1} and {WORKINGDIR}/{sigfile2}\")\n             return 6\n+        if not files_are_equal(sumfile1, sumfile2):\n+            print_err(\n+                f\"{HOST1} and {HOST2} {SUMS_FILENAME} files were not equal?\\n\"\n+                f\"See files {WORKINGDIR}/{sumfile1} and {WORKINGDIR}/{sumfile2}\")\n+            return 8\n \n     # get builder keys - if we have them locally, compare them to the github repo\n     local_builder_keys = []\n@@ -191,40 +348,136 @@ def main(args):\n     # check the local and remote builder keys against each other and report diff\n     if local_builder_keys and gh_builder_keys:\n         if local_builder_keys != gh_builder_keys:\n-            diff = '\\n'.join(difflib.ndiff(local_builder_keys, gh_builder_keys))\n-            print_warn(f\"found diff in builder keys:\\n\\n{diff}\")\n-\n-    # \"Can't check signature\"\n-    # 'Good signature from \"...\"'\n-    # 'BAD signature from \"...\"'\n-\n-    # check signature and extract data into file\n-    retval, output = verify_with_gpg(sigfile1, HASHFILE)\n-    if retval != 0:\n+            diff = indent(\n+                '\\n'.join(difflib.unified_diff(local_builder_keys, gh_builder_keys)), '\\t')\n+            print_warn(f\"found diff in builder keys:\\n{diff}\\n\")\n+\n+    builder_key_map = {}\n+    # Prefer local builder keys to those obtained remotely.\n+    builder_keys = local_builder_keys or gh_builder_keys or []\n+\n+    for i in builder_keys:\n+        key, name = i.split(' ', 1)\n+        builder_key_map[key] = name\n+\n+    def get_sigfiles_to_remove():\n+        return [sfile for sfile in (sigfile1, sigfile2) if Path(sfile).exists()]\n+\n+    # check signature\n+    #\n+    # We don't write output to a file because this command will almost certainly\n+    # fail with GPG exit code '2' (and so not writing to --output) because of the\n+    # likely presence of multiple untrusted signatures.\n+    retval, output = verify_with_gpg(sigfile1)\n+    indented_output = indent(output, '\\t')\n+\n+    good, unknown, bad = parse_gpg_result(output.splitlines())\n+\n+    # Retrieve unknown keys that are in the repo builder list and then try GPG again.\n+    if unknown and not Config.noninteractive:\n+        for unsig in unknown:\n+            name = builder_key_map.get(unsig.key, '<unknown>')\n+            if input(f\"Retrieve key {unsig.key} for {name}? (y/N) \").lower() == \"y\":\n+                ran = subprocess.run(\n+                    f\"gpg --keyserver {Config.keyserver} --recv-keys {unsig.key}\", shell=True)\n+\n+                # TODO: adding full trust doesn't actually fix the warnings; we need to sign\n+                # pubkeys with our key.\n+                #\n+                # if ran.returncode == 0:\n+                #     prompt = f\"  add full trust (4) to key {unsig.key} for {name}? (y/N) \"\n+                #     if input(prompt).lower() == \"y\":\n+                #         gpg_add_full_trust(unsig.key)\n+                if ran.returncode != 0:\n+                    print_warn(f\"failed to retrieve key {unsig.key} for {name}\")\n+\n+    # TODO: adding full trust doesn't actually fix the warnings; we need to sign\n+    # pubkeys with our key.\n+    # good_untrusted = [sig for sig in good if not sig.trusted]\n+    # if not Config.noninteractive:\n+    #     for sig in good_untrusted:\n+    #         if input(f\"add full trust (4) to key {sig.key} for {sig.name}? (y/N) \").lower() == \"y\":\n+    #             gpg_add_full_trust(sig.key)\n+\n+    good_expired = [sig for sig in good if sig.status == 'expired']\n+    for sig in good_expired:\n+        print_warn(f\"key {sig.key} for {sig.name} is expired\")\n+\n+    # Decide which keys we trust, though not \"trust\" in the GPG sense, but rather\n+    # which pubkeys convince us that this sums file is legitimate. In other words,\n+    # which pubkeys within the Bitcoin community do we trust for the purposes of\n+    # binary verification?\n+    trusted_keys = set()\n+    if Config.trust_builder_keys:\n+        trusted_keys |= set(builder_key_map.keys())\n+    if Config.trusted_keys:\n+        trusted_keys |= set(Config.trusted_keys.split(','))\n+\n+    if retval not in [0, 2]:\n         if retval == 1:\n             print_err(\"Bad signature.\")\n-        elif retval == 2:\n-            print_err(\"gpg error. Do you have the Bitcoin Core binary release \"\n-                      \"signing key installed?\")\n+        else:\n+            print_err(\"unexpected GPG exit code\")\n+\n         indented_output = indent(output, '\\t')\n         print_err(f\"gpg output:\\n{indented_output}\")\n-        remove_files([sigfile1, sigfile2, HASHFILE])\n+        remove_files([*get_sigfiles_to_remove(), SUMS_FILENAME])\n         return 1\n \n+    # Tally signatures and make sure we have enough good, trusted to fulfill\n+    # our threshold.\n+    good_trusted = set()\n+    for sig in good:\n+        if sig.trusted or sig.key in trusted_keys:\n+            good_trusted.add(sig)\n+            print_info(f\"GOOD SIGNATURE: {sig}\")\n+\n+    for sig in good:\n+        if sig not in good_trusted:\n+            print_info(f\"GOOD SIGNATURE (untrusted): {sig}\")\n+\n+    for sig in bad:\n+        print_warn(f\"BAD SIGNATURE: {sig}\")\n+\n+    for sig in unknown:\n+        print_warn(f\"UNKNOWN SIGNATURE: {sig}\")\n+\n+    num_trusted = len(good_trusted)\n+    print_info(f\"got {num_trusted} good, trusted signatures\")\n+    if num_trusted < Config.min_recognized_sigs:\n+        print_err(\n+            \"not enough trusted sigs to meet threshold \"\n+            f\"({num_trusted} vs. {Config.min_recognized_sigs})\")\n+        return 9\n+\n     # extract hashes/filenames of binaries to verify from hash file;\n     # each line has the following format: \"<hash> <binary_filename>\"\n-    with open(HASHFILE, 'r', encoding='utf8') as hash_file:\n+    with open(SUMS_FILENAME, 'r', encoding='utf8') as hash_file:\n         hashes_to_verify = [\n             line.split()[:2] for line in hash_file if os_filter in line]\n-    remove_files([HASHFILE])\n+    remove_files([SUMS_FILENAME])\n     if not hashes_to_verify:\n         print_err(\"no files matched the platform specified\")\n         return 7\n \n+    UNSIGNED_FRAGMENT = '-unsigned'\n+    unsigned = [i for i in hashes_to_verify if UNSIGNED_FRAGMENT in i[1]]\n+    if unsigned:\n+        unsigned_str = ', '.join(i[1] for i in unsigned)\n+        print_warn(\n+            f\"removing unsigned binaries ({unsigned_str}) from verification \"\n+            f\"since {HOST1} does not host unsigned binaries\")\n+        hashes_to_verify = [i for i in hashes_to_verify if UNSIGNED_FRAGMENT not in i[1]]\n+\n     # download binaries\n     for _, binary_filename in hashes_to_verify:\n         print(f\"Downloading {binary_filename}\")\n-        download_with_wget(HOST1 + remote_dir + binary_filename)\n+        success, output = download_with_wget(HOST1 + remote_dir + binary_filename)\n+\n+        if not success:\n+            indented_output = indent(output, '\\t')\n+            print_err(f\"failed to download {binary_filename}\\nwget output:\\n{indented_output}\")\n+            return 10\n \n     # verify hashes\n     offending_files = []\n@@ -244,7 +497,7 @@ def main(args):\n     # clean up files if desired\n     if len(args) >= 2:\n         print(\"Clean up the binaries\")\n-        remove_files([sigfile1, sigfile2] + verified_binaries)\n+        remove_files(get_sigfiles_to_remove() + verified_binaries)\n     else:\n         print(f\"Keep the binaries in {WORKINGDIR}\")\n "
      }
    ]
  },
  {
    "sha": "171bf6da453839a4496ab96dbf4dc63f5bad392c",
    "node_id": "C_kwDOABII59oAKDE3MWJmNmRhNDUzODM5YTQ0OTZhYjk2ZGJmNGRjNjNmNWJhZDM5MmM",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-09-17T16:51:01Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-09-22T15:41:41Z"
      },
      "message": "contrib: verifybinaries: structure output, add JSON option\n\nEnsure that all incidental logging is done to stderr and stdout\nis structured in a way that could be usefully parsed.\n\nAdd the option to output JSON that summarizes the whole sum\nsignature and binary verification processes.",
      "tree": {
        "sha": "9d1d21bd56d97cf37ce322e7560fe00ed927b935",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9d1d21bd56d97cf37ce322e7560fe00ed927b935"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/171bf6da453839a4496ab96dbf4dc63f5bad392c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEGNRVI1NPYuZCSIrGepNdrbLETwUFAmFLTrUACgkQepNdrbLE\nTwWnRA/+LXlOcvJXv11gqkyInG5E62l4/YziF3ivA268JNrcqCFL8aFX/GYAZmZd\npr+sLIEHGM8GNRv69vm/gc4J1lO5rp5pjsock6gytnSIgZdh8rswl5cUH9o6LSDT\ncMCRtERaZCKkrrRlfLXrBitZCLbO1RS02SzAQ3y/EtgiOHuO6T+4O3sODTvr8Tnl\nfEKPn3tMeyDBSayLDHM79B1ZetH+VNd3E5v2rtZJiWlZT4DBLlSWMwiaGoCXHAcc\njua9fQzB6rox92Ja+YxpGZhK8NdQGgFIf4x2DkITr1+eVEk+vQYxPEPRAn3qw9Ox\nvymWRQz/QUInTU4LOxn0RYnFFh6DsoiGiSecRVn7Ftobp89O7U+zNp62YmJ6/CA7\nFgXO0OMguonwJLzSVbuO7iVJpbGlOtHjlgAiD+NDUCrzmZfsRZjxQHNr1MeVLwRf\nhPWrnVjDfsNciMCrIMuBt4mYUFS39eIXPFc2kIScUPk/+AEjkBIvoPEaSSEf9hy6\nDfuETVVaTuJJGvBUzQ07SBXSOEq//LziYvnwbcv3rOdPnnYkW3JzZswSVTbN9yGc\nj1DVSryFvtAdc2YY/G1VA15vckujw8nKQ+b+pWF1p6BDLYGdEKR+EQouh33r6tB1\nmg9uer+r6vcikS3mWKKh655LBOo5shy5H/SUGM2Uu0ZU1LoTFWA=\n=94Hb\n-----END PGP SIGNATURE-----",
        "payload": "tree 9d1d21bd56d97cf37ce322e7560fe00ed927b935\nparent 030c9cbaba15645cf159c71e3432a4257ce993a5\nauthor James O'Beirne <james.obeirne@pm.me> 1631897461 -0400\ncommitter James O'Beirne <james.obeirne@pm.me> 1632325301 -0400\n\ncontrib: verifybinaries: structure output, add JSON option\n\nEnsure that all incidental logging is done to stderr and stdout\nis structured in a way that could be usefully parsed.\n\nAdd the option to output JSON that summarizes the whole sum\nsignature and binary verification processes.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/171bf6da453839a4496ab96dbf4dc63f5bad392c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/171bf6da453839a4496ab96dbf4dc63f5bad392c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/171bf6da453839a4496ab96dbf4dc63f5bad392c/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "030c9cbaba15645cf159c71e3432a4257ce993a5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/030c9cbaba15645cf159c71e3432a4257ce993a5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/030c9cbaba15645cf159c71e3432a4257ce993a5"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 26,
      "deletions": 9
    },
    "files": [
      {
        "sha": "b14ae91bdad0bcb4fe95f4698f6e6fd9c479cb3f",
        "filename": "contrib/verifybinaries/verify.py",
        "status": "modified",
        "additions": 26,
        "deletions": 9,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/171bf6da453839a4496ab96dbf4dc63f5bad392c/contrib/verifybinaries/verify.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/171bf6da453839a4496ab96dbf4dc63f5bad392c/contrib/verifybinaries/verify.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verifybinaries/verify.py?ref=171bf6da453839a4496ab96dbf4dc63f5bad392c",
        "patch": "@@ -15,6 +15,7 @@\n \"\"\"\n from hashlib import sha256\n import difflib\n+import json\n import os\n import subprocess\n import re\n@@ -69,9 +70,15 @@ class Config:\n     # A list of trusted GPG keys, specified as a CSV\n     trusted_keys = os.environ.get('BINVERIFY_TRUSTED_KEYS', '')\n \n-    # Whether or not to trust the pubkeys referenced in the builder-keys/keys.txt file\n+    # Whether or not to trust the pubkeys referenced in the builder-keys/keys.txt file.\n+    #\n+    # This might be set to False if you want to explicitly specify trusted keys using\n+    # BINVERIFY_TRUSTED_KEYS.\n     trust_builder_keys = bool_from_env('BINVERIFY_TRUST_BUILDER_KEYS', True)\n \n+    # Should we output JSON vs. text?\n+    json_output = bool_from_env('BINVERIFY_JSON')\n+\n \n def parse_version_string(version_str):\n     if version_str.startswith(VERSIONPREFIX):  # remove version prefix\n@@ -432,9 +439,9 @@ def get_sigfiles_to_remove():\n             good_trusted.add(sig)\n             print_info(f\"GOOD SIGNATURE: {sig}\")\n \n-    for sig in good:\n-        if sig not in good_trusted:\n-            print_info(f\"GOOD SIGNATURE (untrusted): {sig}\")\n+    good_untrusted = [sig for sig in good if sig not in good_trusted]\n+    for sig in good_untrusted:\n+        print_info(f\"GOOD SIGNATURE (untrusted): {sig}\")\n \n     for sig in bad:\n         print_warn(f\"BAD SIGNATURE: {sig}\")\n@@ -471,7 +478,7 @@ def get_sigfiles_to_remove():\n \n     # download binaries\n     for _, binary_filename in hashes_to_verify:\n-        print(f\"Downloading {binary_filename}\")\n+        print_info(f\"downloading {binary_filename}\")\n         success, output = download_with_wget(HOST1 + remote_dir + binary_filename)\n \n         if not success:\n@@ -496,13 +503,23 @@ def get_sigfiles_to_remove():\n \n     # clean up files if desired\n     if len(args) >= 2:\n-        print(\"Clean up the binaries\")\n         remove_files(get_sigfiles_to_remove() + verified_binaries)\n     else:\n-        print(f\"Keep the binaries in {WORKINGDIR}\")\n+        print_info(f\"did not clean up {WORKINGDIR}\")\n+\n+    if Config.json_output:\n+        output = {\n+            'good_trusted_sigs': [str(s) for s in good_trusted],\n+            'good_untrusted_sigs': [str(s) for s in good_untrusted],\n+            'unknown_sigs': [str(s) for s in unknown],\n+            'bad_sigs': [str(s) for s in bad],\n+            'verified_binaries': verified_binaries,\n+        }\n+        print(json.dumps(output, indent=2))\n+    else:\n+        for filename in verified_binaries:\n+            print(f\"VERIFIED: {filename}\")\n \n-    print(\"Verified hashes of\")\n-    print('\\n'.join(verified_binaries))\n     return 0\n \n "
      }
    ]
  },
  {
    "sha": "0023443077fcb847d725afa5b6b2a7e623437e54",
    "node_id": "C_kwDOABII59oAKDAwMjM0NDMwNzdmY2I4NDdkNzI1YWZhNWI2YjJhN2U2MjM0MzdlNTQ",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-09-17T16:58:03Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-09-22T15:41:42Z"
      },
      "message": "contrib: verifybinaries: doc update",
      "tree": {
        "sha": "a461baeb9c893e876e8a01015330ddb73fc62500",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a461baeb9c893e876e8a01015330ddb73fc62500"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0023443077fcb847d725afa5b6b2a7e623437e54",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEGNRVI1NPYuZCSIrGepNdrbLETwUFAmFLTrYACgkQepNdrbLE\nTwWRfQ/+PrtZ8od4W7OKu23gO5I3dBXmi5ix6EAmHNRhEW40ErXEfUjQ5mAUS9WB\nIRKPyAemNeHX6i/XR1IkivAoDun2B1ki3nBuobKDLNlN4ZD5HAr9ymzVUXetgBd0\ntlOtlvbNKxkLofWrJLIIA0L1tw6PhO9zOPYPmuNsVmLxuz4VGNz7zA4NMphkF2rd\nVAqkeQcj0gdk/jXW+xBfCkwOUanEJk38Afo+o/Q0x+0tIi/cREOcsyqKLACVNVqR\n9myE7Xpk13FG+NrLmDab9Ep8mRo6X1yw8QB+6n6qFgDFDrMpLcghWbMTWP7JmtoX\nj0qUuYdiiU83ADe2T3zouSnMrzGZHKd2FJdAcdX8Poeki3yMfTouowo/YJz5SVJK\nKI0YwLRRH+o/nTTCuePzE4o1OGOgeeGgPq/nPcvML3g3NRaG13tO3AuxiVqUJQXu\nwQEspoZMh8Su7SyiZvooB3f17vJtporPKbR1XMwQV7re0UZY8LaXtW+bAqUL2oke\nhqy/Bo09rh2fPHthjhxvEP8ovk/JST+fAm6uXkT+5q+nyjLfBnIVrhP9rn7GxbDd\nUADDyEbOE5TBfgtmP1ppI1jMrP2Vhw4l2MDrUFHjzkuM+7NdDBdKMrNP0ga5p1La\nOPsE3NrUGaIFDXvBxMYBEPb1OZX25krKCoKlDVPzhyod90qxID4=\n=WFFP\n-----END PGP SIGNATURE-----",
        "payload": "tree a461baeb9c893e876e8a01015330ddb73fc62500\nparent 171bf6da453839a4496ab96dbf4dc63f5bad392c\nauthor James O'Beirne <james.obeirne@pm.me> 1631897883 -0400\ncommitter James O'Beirne <james.obeirne@pm.me> 1632325302 -0400\n\ncontrib: verifybinaries: doc update\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0023443077fcb847d725afa5b6b2a7e623437e54",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0023443077fcb847d725afa5b6b2a7e623437e54",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0023443077fcb847d725afa5b6b2a7e623437e54/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "171bf6da453839a4496ab96dbf4dc63f5bad392c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/171bf6da453839a4496ab96dbf4dc63f5bad392c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/171bf6da453839a4496ab96dbf4dc63f5bad392c"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 19,
      "deletions": 8
    },
    "files": [
      {
        "sha": "28448a9a4a27adbd06510d3b4a766d3d8e16fdd0",
        "filename": "contrib/verifybinaries/verify.py",
        "status": "modified",
        "additions": 19,
        "deletions": 8,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0023443077fcb847d725afa5b6b2a7e623437e54/contrib/verifybinaries/verify.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0023443077fcb847d725afa5b6b2a7e623437e54/contrib/verifybinaries/verify.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verifybinaries/verify.py?ref=0023443077fcb847d725afa5b6b2a7e623437e54",
        "patch": "@@ -4,14 +4,25 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Script for verifying Bitcoin Core release binaries\n \n-This script attempts to download the signature file SHA256SUMS.asc from\n-bitcoincore.org and bitcoin.org and compares them.\n-It first checks if the signature passes, and then downloads the files\n-specified in the file, and checks if the hashes of these files match those\n-that are specified in the signature file.\n-The script returns 0 if everything passes the checks. It returns 1 if either\n-the signature check or the hash check doesn't pass. If an error occurs the\n-return value is >= 2.\n+This script attempts to download the sum file SHA256SUMS and corresponding\n+signature file SHA256SUMS.asc from bitcoincore.org and bitcoin.org and\n+compares them.\n+\n+The sum-signature file is signed by a number of builder keys. This script\n+ensures that there is a minimum threshold of signatures from pubkeys that\n+we trust. This trust is articulated on the basis of configuration options\n+here, but by default is based upon a unionof (i) local GPG trust settings,\n+and (ii) keys which appear in the builder-keys/keys.txt file.\n+\n+If a minimum good, trusted signature threshold is met on the sum file, we then\n+download the files specified in SHA256SUMS, and check if the hashes of these\n+files match those that are specified. The script returns 0 if everything passes\n+the checks. It returns 1 if either the signature check or the hash check\n+doesn't pass. If an error occurs the return value is >= 2.\n+\n+Logging output goes to stderr and final binary verification data goes to stdout.\n+\n+JSON output can by obtained by setting env BINVERIFY_JSON=1.\n \"\"\"\n from hashlib import sha256\n import difflib"
      }
    ]
  },
  {
    "sha": "efe9289fae431340b8507a05fbf85137e2fde26f",
    "node_id": "C_kwDOABII59oAKGVmZTkyODlmYWU0MzEzNDBiODUwN2EwNWZiZjg1MTM3ZTJmZGUyNmY",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-09-17T17:21:56Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-09-22T15:41:43Z"
      },
      "message": "contrib: verifybinaries: README update",
      "tree": {
        "sha": "5a18e5e840d343ae53bab8abd15f47cc7044eadf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5a18e5e840d343ae53bab8abd15f47cc7044eadf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/efe9289fae431340b8507a05fbf85137e2fde26f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEGNRVI1NPYuZCSIrGepNdrbLETwUFAmFLTrcACgkQepNdrbLE\nTwXBIQ/9Fd48kYymu95IQxoCN5Wha5DrZEg9P7w6ZQdGMRFJTwjeoqNMZF1qbsJ6\nkSEsty1OclGJ33dp3/dyFsOKd1qfrL04Deb54eK5USPP8BLK/coiDZUKlyhMxqb8\nhMiFiWH6qvCYXZ/lyxu9um8dMzsCSg+eZpycDBI2u4Bt3q2pOisaIU3c+mamkEkm\nuz19X/S+qsxjmOyzkWJMNgFMiHz6azSfgr8QWQhAEwBHeK2TvnR+iDPlEUhiXD7Y\nyrTXch/X0ftcnZRXME4YkRPa8j7jZr/DfARzYq3K9LnQkUC4c5LaUPCVv4l59xd9\nfiG9BcAd4UI64s2ISNG6x2x3WjU/lxdtQUzqjOq/2JLyAYRfoywSPIODuGcRt5UH\n+bu0nXBSr5+pTjBGLpSPlgGWTqmiK8b0lCzZKja0vjk1IuJqs75NvKlfh9cJpwL5\nEQnhCU6bODUoEjz/sUjG/kZgBtxYB0NhlVLU7//DFkYJ/kBd8pckd+oFAKQHTlj5\ngL9zCiK3w5VxTsKAuZ36jISE3zZ1YDmYpqXEyHhnpX2qQxaOd1j82MsWUa1jjmjG\ngzVD+rfUti4J+vNERR9UH7UpdR//qxw043qzfbzjA+0Ks0JvDzvPUkBtAIFMhK9G\n3uiH1imPD8Dtts11S1yxInpoYYxOemmkHy4hgwDvj0uF5vYv1lQ=\n=p9Q1\n-----END PGP SIGNATURE-----",
        "payload": "tree 5a18e5e840d343ae53bab8abd15f47cc7044eadf\nparent 0023443077fcb847d725afa5b6b2a7e623437e54\nauthor James O'Beirne <james.obeirne@pm.me> 1631899316 -0400\ncommitter James O'Beirne <james.obeirne@pm.me> 1632325303 -0400\n\ncontrib: verifybinaries: README update\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/efe9289fae431340b8507a05fbf85137e2fde26f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/efe9289fae431340b8507a05fbf85137e2fde26f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/efe9289fae431340b8507a05fbf85137e2fde26f/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0023443077fcb847d725afa5b6b2a7e623437e54",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0023443077fcb847d725afa5b6b2a7e623437e54",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0023443077fcb847d725afa5b6b2a7e623437e54"
      }
    ],
    "stats": {
      "total": 67,
      "additions": 48,
      "deletions": 19
    },
    "files": [
      {
        "sha": "1494b8bf0dda4b41e05fbfeb196459c2f988b4a7",
        "filename": "contrib/verifybinaries/README.md",
        "status": "modified",
        "additions": 48,
        "deletions": 19,
        "changes": 67,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/efe9289fae431340b8507a05fbf85137e2fde26f/contrib/verifybinaries/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/efe9289fae431340b8507a05fbf85137e2fde26f/contrib/verifybinaries/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verifybinaries/README.md?ref=efe9289fae431340b8507a05fbf85137e2fde26f",
        "patch": "@@ -1,41 +1,70 @@\n ### Verify Binaries\n \n-#### Preparation:\n+#### Preparation\n \n-Make sure you obtain the proper release signing key and verify the fingerprint with several independent sources.\n+Bitcoin releases are signed by a number of public keys on the basis of the [guix.sigs\n+repository](https://github.com/bitcoin-core/guix.sigs/). When verifying binary\n+downloads, you (the end user) decide which of these public keys you trust and then use\n+that trust model to evaluate the signature on a file that contains hashes of the\n+release binaries. The downloaded binaries are then hashed and compared to the signed\n+checksum file.\n \n-```sh\n-$ gpg --fingerprint \"Bitcoin Core binary release signing key\"\n-pub   4096R/36C2E964 2015-06-24 [expires: YYYY-MM-DD]\n-      Key fingerprint = 01EA 5486 DE18 A882 D4C2  6845 90C8 019E 36C2 E964\n-uid                  Wladimir J. van der Laan (Bitcoin Core binary release signing key) <laanwj@gmail.com>\n-```\n+First, you have to figure out which public keys to recognize. Browse the [list of frequent\n+builder-keys](https://github.com/bitcoin/bitcoin/tree/master/contrib/builder-keys) and\n+decide which of these keys you would like to trust. For each key you want to trust, you\n+must obtain that key for your local GPG installation (you can use this script to do\n+this automatically, or you can do it yourself). \n+\n+You can obtain these keys by \n+  - (most laborious) through a browser using a key server (e.g. https://keyserver.ubuntu.com/), \n+  - manually using the `gpg --keyserver <url> --recv-keys <key>` command, or\n+  - (easiest) you can run the packaged `verifybinaries.py` script to have it automatically \n+    retrieve unrecognized keys.\n+\n+Historially, the lead maintainer Wladimir J. van der Laan has provided the sole signing\n+key for releases, but since 22.0 Bitcoin release sum files are signed as described\n+above using a plurality of keys.\n+\n+#### Usage\n+\n+This script attempts to download the checksum file (`SHA256SUMS`) and corresponding \n+signature file `SHA256SUMS.asc` from a number of sources, but chiefly \n+https://bitcoincore.org.\n \n-#### Usage:\n+It first checks if the checksum file is valid based upon a plurality of signatures, and\n+then downloads the release files specified in the checksum file, and checks if the\n+hashes of the release files are as expected.\n \n-This script attempts to download the signature file `SHA256SUMS.asc` from https://bitcoin.org.\n+If we encounter pubkeys in the signature file that we do not recognize, the script\n+will prompt the user as to whether they'd like to download the pubkeys (unless the\n+`BINVERIFY_NONINTERACTIVE=1` option is set).\n \n-It first checks if the signature passes, and then downloads the files specified in the file, and checks if the hashes of these files match those that are specified in the signature file.\n+If the script is run from the root of the bitcoin/bitcoin repository, it will by\n+default use the `builder-keys/keys.txt` file to establish trusted pubkeys.\n \n-The script returns 0 if everything passes the checks. It returns 1 if either the signature check or the hash check doesn't pass. If an error occurs the return value is 2.\n+The script returns 0 if everything passes the checks. It returns 1 if either the\n+signature check or the hash check doesn't pass. An exit code of >2 indicates an error.\n \n+See the `Config` object for various options.\n \n ```sh\n-./verify.py bitcoin-core-0.11.2\n-./verify.py bitcoin-core-0.12.0\n-./verify.py bitcoin-core-0.13.0-rc3\n+./contrib/verifybinaries/verify.py bitcoin-core-22.0\n+./contrib/verifybinaries/verify.py bitcoin-core-22.0-rc2\n+./contrib/verifybinaries/verify.py bitcoin-core-0.11.2\n+./contrib/verifybinaries/verify.py bitcoin-core-0.12.0\n+./contrib/verifybinaries/verify.py bitcoin-core-0.13.0-rc3\n ```\n \n If you only want to download the binaries of certain platform, add the corresponding suffix, e.g.:\n \n ```sh\n-./verify.py bitcoin-core-0.11.2-osx\n-./verify.py 0.12.0-linux\n-./verify.py bitcoin-core-0.13.0-rc3-win64\n+./contrib/verifybinaries/verify.py bitcoin-core-0.11.2-osx\n+./contrib/verifybinaries/verify.py 0.12.0-linux\n+./contrib/verifybinaries/verify.py bitcoin-core-0.13.0-rc3-win64\n ```\n \n If you do not want to keep the downloaded binaries, specify anything as the second parameter.\n \n ```sh\n-./verify.py bitcoin-core-0.13.0 delete\n+./contrib/verifybinaries/verify.py bitcoin-core-22.0 delete\n ```"
      }
    ]
  },
  {
    "sha": "5b955eb5a3c2bbf353d00c071c6bfa94b224c872",
    "node_id": "C_kwDOABII59oAKDViOTU1ZWI1YTNjMmJiZjM1M2QwMGMwNzFjNmJmYTk0YjIyNGM4NzI",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-09-17T17:55:23Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-09-22T15:41:44Z"
      },
      "message": "contrib: verifybinaries: use argparse for better CLI",
      "tree": {
        "sha": "c44b3dc9e0689cfa06103859aadfe7cb3b351e5a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c44b3dc9e0689cfa06103859aadfe7cb3b351e5a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5b955eb5a3c2bbf353d00c071c6bfa94b224c872",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEGNRVI1NPYuZCSIrGepNdrbLETwUFAmFLTrgACgkQepNdrbLE\nTwU9WxAAnmwgYblEnFYYWfaj2Db9fRYz5sNdegas/xNtCklWjUmerdurG6SlSKDD\nzklgGfzmZfOf85HAXZ4QGT70a3Qi2Pl7m0pbuOiyhC7wFtmFE6/fWKSNWtSIeOeh\ni7PF9JQveUfJusZLksZ7abKIe1Y8ODr+w39dl+f4Q7wMS1+gNrgKdba8Sa5Dne74\nmr0eiDt3ow9uGZEMNZhIcozwan3cuGR9ihEv/gqJ1QLnrCFvaCe70+JUAbHsh+es\nfThK3FN4bffXLY2mKDeGUAY0SJoT1VezU7YgzQQ2E4VlsVzGg96BhE8IM02GeXPm\n4LUpeBTxD+tbU2SDdidOZLI+z8gQTjcAxhiRE05TzDFj0bzoim1bB5MEom+ZdG7B\nZDnA9FYBstpwunRGUShOqMOXA2d0n9+/PmORIRrKSTB87WBgqndUdCh4XhH19Klk\nnJZX0SId5AIFbW+ycoWkogko1EZauln+XnUGIFpgEo/dI/HoIQf4FI0TF9vf5/1n\nfGtgkyTkOzUx61Ktt8WkqbQKBTU2ja2xM+5jepO0bWm/8vfv3H0kepGX4mcXWWtA\nApN8xAVPNjhzngiYNnpzNCXfHgb/oH11+MKeihpJ6Cu4GGf+MCmQsCGlDXZt4x2D\nKqnVMz6jxtHIhjLGW0afA4BYQA/uigimJq/6Flq87RelHrptl4E=\n=2hF5\n-----END PGP SIGNATURE-----",
        "payload": "tree c44b3dc9e0689cfa06103859aadfe7cb3b351e5a\nparent efe9289fae431340b8507a05fbf85137e2fde26f\nauthor James O'Beirne <james.obeirne@pm.me> 1631901323 -0400\ncommitter James O'Beirne <james.obeirne@pm.me> 1632325304 -0400\n\ncontrib: verifybinaries: use argparse for better CLI\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b955eb5a3c2bbf353d00c071c6bfa94b224c872",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5b955eb5a3c2bbf353d00c071c6bfa94b224c872",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b955eb5a3c2bbf353d00c071c6bfa94b224c872/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "efe9289fae431340b8507a05fbf85137e2fde26f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/efe9289fae431340b8507a05fbf85137e2fde26f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/efe9289fae431340b8507a05fbf85137e2fde26f"
      }
    ],
    "stats": {
      "total": 184,
      "additions": 112,
      "deletions": 72
    },
    "files": [
      {
        "sha": "2836a2610cf03031d4b938cd721aa2a837b8e7e7",
        "filename": "contrib/verifybinaries/README.md",
        "status": "modified",
        "additions": 21,
        "deletions": 3,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b955eb5a3c2bbf353d00c071c6bfa94b224c872/contrib/verifybinaries/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b955eb5a3c2bbf353d00c071c6bfa94b224c872/contrib/verifybinaries/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verifybinaries/README.md?ref=5b955eb5a3c2bbf353d00c071c6bfa94b224c872",
        "patch": "@@ -47,14 +47,32 @@ signature check or the hash check doesn't pass. An exit code of >2 indicates an\n \n See the `Config` object for various options.\n \n+#### Examples\n+\n+Validate releases with default settings:\n ```sh\n-./contrib/verifybinaries/verify.py bitcoin-core-22.0\n-./contrib/verifybinaries/verify.py bitcoin-core-22.0-rc2\n-./contrib/verifybinaries/verify.py bitcoin-core-0.11.2\n+./contrib/verifybinaries/verify.py 22.0\n+./contrib/verifybinaries/verify.py 22.0-rc2\n+./contrib/verifybinaries/verify.py 0.11.2\n ./contrib/verifybinaries/verify.py bitcoin-core-0.12.0\n ./contrib/verifybinaries/verify.py bitcoin-core-0.13.0-rc3\n ```\n \n+Get JSON output and don't prompt for user input (no auto key import):\n+\n+```sh\n+./contrib/verifybinaries/verify.py 22.0-x86 --json --noninteractive\n+```\n+\n+Don't trust builder-keys by default, and rely only on local GPG state and manually\n+specified keys, while requiring a threshold of at least 10 trusted signatures:\n+```sh\n+./contrib/verifybinaries/verify.py 22.0-x86 \\\n+    --no-builder-keys \\\n+    --trusted-keys 74E2DEF5D77260B98BC19438099BAD163C70FBFA,9D3CC86A72F8494342EA5FD10A41BDC3F4FAFF1C \\\n+    --min-trusted-sigs 10\n+```\n+\n If you only want to download the binaries of certain platform, add the corresponding suffix, e.g.:\n \n ```sh"
      },
      {
        "sha": "d4c274a219b7d40012511df36122143f1aed0942",
        "filename": "contrib/verifybinaries/verify.py",
        "status": "modified",
        "additions": 91,
        "deletions": 69,
        "changes": 160,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b955eb5a3c2bbf353d00c071c6bfa94b224c872/contrib/verifybinaries/verify.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b955eb5a3c2bbf353d00c071c6bfa94b224c872/contrib/verifybinaries/verify.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verifybinaries/verify.py?ref=5b955eb5a3c2bbf353d00c071c6bfa94b224c872",
        "patch": "@@ -2,7 +2,7 @@\n # Copyright (c) 2020 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\"\"\"Script for verifying Bitcoin Core release binaries\n+\"\"\"Script for verifying Bitcoin Core release binaries.\n \n This script attempts to download the sum file SHA256SUMS and corresponding\n signature file SHA256SUMS.asc from bitcoincore.org and bitcoin.org and\n@@ -25,6 +25,7 @@\n JSON output can by obtained by setting env BINVERIFY_JSON=1.\n \"\"\"\n from hashlib import sha256\n+import argparse\n import difflib\n import json\n import os\n@@ -54,42 +55,69 @@ def bool_from_env(key, default=False) -> bool:\n     return raw in ['1', 'True', 'true']\n \n \n-class Config:\n-    # Run this script without user input.\n-    noninteractive = bool_from_env('BINVERIFY_NONINTERACTIVE')\n-\n-    # If set, require both bitcoincore.org and bitcoin.org to provide signatures.\n-    # (Sometimes bitcoin.org lags behind bitcoincore.org.)\n-    require_both_hosts = bool_from_env('BINVERIFY_REQUIRE_BOTH_HOSTS')\n-    bitcoin_src_path = (\n-        Path(os.environ.get('BINVERIFY_BITCOIN_SRC_PATH')) if\n-        'BINVERIFY_BITCOIN_SRC_PATH' in os.environ else None\n-    )\n-\n-    # Whether or not to prompt the user to import unrecognized builder keys.\n-    import_builders = (not noninteractive) and bool_from_env('BINVERIFY_IMPORT_BUILDERS', True)\n-\n-    # The minimum number of signatures from recognized keys to\n-    # require successful termination.\n-    min_recognized_sigs = (\n-        int(os.environ.get('BINVERIFY_MIN_RECOGNIZED_SIGS')) if\n-        'BINVERIFY_MIN_RECOGNIZED_SIGS' in os.environ else 4\n-    )\n-\n-    keyserver = os.environ.get('BINVERIFY_KEYSERVER', 'hkp://keyserver.ubuntu.com')\n-\n-    # A list of trusted GPG keys, specified as a CSV\n-    trusted_keys = os.environ.get('BINVERIFY_TRUSTED_KEYS', '')\n-\n-    # Whether or not to trust the pubkeys referenced in the builder-keys/keys.txt file.\n-    #\n-    # This might be set to False if you want to explicitly specify trusted keys using\n-    # BINVERIFY_TRUSTED_KEYS.\n-    trust_builder_keys = bool_from_env('BINVERIFY_TRUST_BUILDER_KEYS', True)\n-\n-    # Should we output JSON vs. text?\n-    json_output = bool_from_env('BINVERIFY_JSON')\n+VERSION_FORMAT = \"<major>.<minor>[.<patch>][-rc[0-9]][-platform]\"\n+VERSION_EXAMPLE = \"22.0-x86_64 or 0.21.0-rc2-osx\"\n \n+parser = argparse.ArgumentParser(description=__doc__)\n+parser.add_argument(\n+    'version', type=str, help=(\n+        f'version of the bitcoin release to download; of the format '\n+        f'{VERSION_FORMAT}. Example: {VERSION_EXAMPLE}')\n+)\n+parser.add_argument(\n+    '--cleanup', action='store_true',\n+    default=bool_from_env('BINVERIFY_CLEANUP'),\n+    help='if specified, clean up files afterwards'\n+)\n+parser.add_argument(\n+    '--noninteractive', action='store_true',\n+    default=bool_from_env('BINVERIFY_NONINTERACTIVE'),\n+    help='if specified, do not block for user input'\n+)\n+parser.add_argument(\n+    '--require-all-hosts', action='store_true',\n+    default=bool_from_env('BINVERIFY_REQUIRE_ALL_HOSTS'),\n+    help=(\n+        f'If set, require all hosts ({HOST1}, {HOST2}) to provide signatures. '\n+        '(Sometimes bitcoin.org lags behind bitcoincore.org.)')\n+)\n+parser.add_argument(\n+    '--bitcoin-src-path', action='store', nargs='?',\n+    default=os.environ.get('BINVERIFY_BITCOIN_SRC_PATH', ''),\n+    help='specify path to bitcoin repository. Used to find builder keys.',\n+)\n+parser.add_argument(\n+    '--skip-import-builders', action='store_true',\n+    default=bool_from_env('BINVERIFY_SKIP_IMPORT_BUILDERS'),\n+    help='If set, do not prompt to import builder pubkeys',\n+)\n+parser.add_argument(\n+    '--min-trusted-sigs', type=int, action='store', nargs='?',\n+    default=int(os.environ.get('BINVERIFY_MIN_TRUSTED_SIGS', 4)),\n+    help=(\n+        'The minimum number of good signatures from recognized keys to '\n+        'require successful termination.'),\n+)\n+parser.add_argument(\n+    '--keyserver', action='store', nargs='?',\n+    default=os.environ.get('BINVERIFY_KEYSERVER', 'hkp://keyserver.ubuntu.com'),\n+    help='which keyserver to use',\n+)\n+parser.add_argument(\n+    '--trusted-keys', action='store', nargs='?',\n+    default=os.environ.get('BINVERIFY_TRUSTED_KEYS', ''),\n+    help='A list of trusted builder GPG keys, specified as CSV',\n+)\n+parser.add_argument(\n+    '--no-builder-keys', action='store_true',\n+    default=bool_from_env('BINVERIFY_NO_BUILDER_KEYS'),\n+    help='If set, do not trust the builder-keys from the bitcoin repo by default',\n+)\n+parser.add_argument(\n+    '--json', action='store_true',\n+    default=bool_from_env('BINVERIFY_JSON'),\n+    help='If set, output the result as JSON',\n+)\n \n def parse_version_string(version_str):\n     if version_str.startswith(VERSIONPREFIX):  # remove version prefix\n@@ -260,26 +288,17 @@ def gpg_add_full_trust(key: str):\n     assert ran.returncode == 0\n \n \n-VERSION_FORMAT = \"<major>.<minor>[.<patch>][-rc[0-9]][-platform]\"\n-VERSION_EXAMPLE = \"22.0-rc2-x86_64-linux-gnu or 0.21.0-rc2-osx\"\n-\n def main(args):\n-    # sanity check\n-    if len(args) < 1:\n-        print_err(\n-            f\"need to specify a version on the command line of the form {VERSION_FORMAT} \"\n-            f\"(e.g. {VERSION_EXAMPLE})\"\n-        )\n-        return 3\n+    args = parser.parse_args()\n \n     # determine remote dir dependent on provided version string\n-    version_base, version_rc, os_filter = parse_version_string(args[0])\n+    version_base, version_rc, os_filter = parse_version_string(args.version)\n     remote_dir = f\"/bin/{VERSIONPREFIX}{version_base}/\"\n     if version_rc:\n         remote_dir += f\"test.{version_rc}/\"\n     remote_sigfile = remote_dir + SIGNATUREFILENAME\n \n-    bitcoin_dir_maybe = Config.bitcoin_src_path or Path.cwd()\n+    bitcoin_dir_maybe = Path(args.bitcoin_src_path) if args.bitcoin_src_path else Path.cwd()\n     # create working directory\n     os.makedirs(WORKINGDIR, exist_ok=True)\n     os.chdir(WORKINGDIR)\n@@ -311,7 +330,7 @@ def main(args):\n     sigfile2 = SIGNATUREFILENAME + \".2\"\n     success, output = download_with_wget(HOST2 + remote_sigfile, sigfile2)\n     got_both = success\n-    if Config.require_both_hosts and not success:\n+    if args.require_all_hosts and not success:\n         indented_output = indent(output, '\\t')\n         print_err(\n             f\"{HOST2} failed to provide signature file, but {HOST1} did?\\n\"\n@@ -326,7 +345,7 @@ def main(args):\n     sumfile2 = SUMS_FILENAME + \".2\"\n     success, output = download_with_wget(HOST2 + remote_dir + SUMS_FILENAME, sumfile2)\n     got_both = got_both and success\n-    if Config.require_both_hosts and not success:\n+    if args.require_all_hosts and not success:\n         indented_output = indent(output, '\\t')\n         print_err(\n             f\"{HOST2} failed to provide {SUMS_FILENAME} file, but {HOST1} did?\\n\"\n@@ -392,12 +411,12 @@ def get_sigfiles_to_remove():\n     good, unknown, bad = parse_gpg_result(output.splitlines())\n \n     # Retrieve unknown keys that are in the repo builder list and then try GPG again.\n-    if unknown and not Config.noninteractive:\n+    if unknown and not args.noninteractive and not args.skip_import_builders:\n         for unsig in unknown:\n             name = builder_key_map.get(unsig.key, '<unknown>')\n             if input(f\"Retrieve key {unsig.key} for {name}? (y/N) \").lower() == \"y\":\n                 ran = subprocess.run(\n-                    f\"gpg --keyserver {Config.keyserver} --recv-keys {unsig.key}\", shell=True)\n+                    f\"gpg --keyserver {args.keyserver} --recv-keys {unsig.key}\", shell=True)\n \n                 # TODO: adding full trust doesn't actually fix the warnings; we need to sign\n                 # pubkeys with our key.\n@@ -411,8 +430,9 @@ def get_sigfiles_to_remove():\n \n     # TODO: adding full trust doesn't actually fix the warnings; we need to sign\n     # pubkeys with our key.\n+    #\n     # good_untrusted = [sig for sig in good if not sig.trusted]\n-    # if not Config.noninteractive:\n+    # if not args.noninteractive:\n     #     for sig in good_untrusted:\n     #         if input(f\"add full trust (4) to key {sig.key} for {sig.name}? (y/N) \").lower() == \"y\":\n     #             gpg_add_full_trust(sig.key)\n@@ -426,10 +446,10 @@ def get_sigfiles_to_remove():\n     # which pubkeys within the Bitcoin community do we trust for the purposes of\n     # binary verification?\n     trusted_keys = set()\n-    if Config.trust_builder_keys:\n+    if not args.no_builder_keys:\n         trusted_keys |= set(builder_key_map.keys())\n-    if Config.trusted_keys:\n-        trusted_keys |= set(Config.trusted_keys.split(','))\n+    if args.trusted_keys:\n+        trusted_keys |= set(args.trusted_keys.split(','))\n \n     if retval not in [0, 2]:\n         if retval == 1:\n@@ -462,10 +482,10 @@ def get_sigfiles_to_remove():\n \n     num_trusted = len(good_trusted)\n     print_info(f\"got {num_trusted} good, trusted signatures\")\n-    if num_trusted < Config.min_recognized_sigs:\n+    if num_trusted < args.min_trusted_sigs:\n         print_err(\n             \"not enough trusted sigs to meet threshold \"\n-            f\"({num_trusted} vs. {Config.min_recognized_sigs})\")\n+            f\"({num_trusted} vs. {args.min_trusted_sigs})\")\n         return 9\n \n     # extract hashes/filenames of binaries to verify from hash file;\n@@ -478,14 +498,16 @@ def get_sigfiles_to_remove():\n         print_err(\"no files matched the platform specified\")\n         return 7\n \n-    UNSIGNED_FRAGMENT = '-unsigned'\n-    unsigned = [i for i in hashes_to_verify if UNSIGNED_FRAGMENT in i[1]]\n-    if unsigned:\n-        unsigned_str = ', '.join(i[1] for i in unsigned)\n-        print_warn(\n-            f\"removing unsigned binaries ({unsigned_str}) from verification \"\n-            f\"since {HOST1} does not host unsigned binaries\")\n-        hashes_to_verify = [i for i in hashes_to_verify if UNSIGNED_FRAGMENT not in i[1]]\n+    # remove binaries that are known not to be hosted by bitcoincore.org\n+    fragments_to_remove = ['-unsigned', '-debug']\n+    for fragment in fragments_to_remove:\n+        nobinaries = [i for i in hashes_to_verify if fragment in i[1]]\n+        if nobinaries:\n+            remove_str = ', '.join(i[1] for i in nobinaries)\n+            print_warn(\n+                f\"removing *{fragment} binaries ({remove_str}) from verification \"\n+                f\"since {HOST1} does not host *{fragment} binaries\")\n+            hashes_to_verify = [i for i in hashes_to_verify if fragment not in i[1]]\n \n     # download binaries\n     for _, binary_filename in hashes_to_verify:\n@@ -512,13 +534,13 @@ def get_sigfiles_to_remove():\n         return 1\n     verified_binaries = [entry[1] for entry in hashes_to_verify]\n \n-    # clean up files if desired\n-    if len(args) >= 2:\n+    if args.cleanup:\n+        print_info(\"cleaning up files\")\n         remove_files(get_sigfiles_to_remove() + verified_binaries)\n     else:\n         print_info(f\"did not clean up {WORKINGDIR}\")\n \n-    if Config.json_output:\n+    if args.json:\n         output = {\n             'good_trusted_sigs': [str(s) for s in good_trusted],\n             'good_untrusted_sigs': [str(s) for s in good_untrusted],"
      }
    ]
  },
  {
    "sha": "3f87dae286229e2559219d19e91883a739cc60dd",
    "node_id": "C_kwDOABII59oAKDNmODdkYWUyODYyMjllMjU1OTIxOWQxOWU5MTg4M2E3MzljYzYwZGQ",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-09-17T17:58:33Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-09-22T15:41:45Z"
      },
      "message": "contrib: verifybinaries: avoid tabs for indentation",
      "tree": {
        "sha": "91f157ac35dcaaf9a05026d3cc18263564e3636f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/91f157ac35dcaaf9a05026d3cc18263564e3636f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3f87dae286229e2559219d19e91883a739cc60dd",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEGNRVI1NPYuZCSIrGepNdrbLETwUFAmFLTrkACgkQepNdrbLE\nTwVBfA//RBsMBJK4BSY34BUAjOfXn9nAL05oPENLACQt7SY8Qkt3+x9M8JswFAsR\nrsVyHtiU/7dqk0pyerWEJNsVsLLKWnG3ZarheLPfcYl7QQrdgBie27l1EwYy496Z\n1/pNyJH58k9XB0BsVrXOJsYYTtgTexXfqK9dKTmhzsiyEv+YB0QxK+1cBb5yNx4v\nfe0ZEU9VGKrluvLOCKVlJQGYZlN7Ou5A+U7VKWeLD5nqlRplSzNrMeTSFO1ST9KV\nZfuvF/pzdUV2WuVdmsleSa31Fs+ILchI8xezaWapJpig/l64ZTflnM9DTtNVTrQL\n/54igT4JJr8/XYHYwl1wQh11P/+16ssCTZ0zq3fFxiH3qb2em1J0OZ4Jszb/MTYz\n5gdGZu8RmmYKFbxuzV0yHZfTDtmb1uZsSHPt6JfxsbTu1w/S8HG/D5ayHqWYBVUL\nZLd248xKEKRIn/AuFQvgd4Mwxvl149CAO1qO5Bxxz86eiKUWhC5SoFlevIdeaSpY\nRkED1deiSxaT4Ca7PAsTwUk+LDZ77OA3pE+khlrqy0eilBpYzDR4mnQ/D2RQUyA3\nvZzj+iYAT/ub2h5Q7b7C47bqqLe034gB/E1Ajvi/jh0DHsUyXsnRu8L+M2tVJPuV\nkWjn/+o1OWj9MO2q/4fTGL9S/Oa/u0yhg3g76r2I3rul1/4gHP0=\n=RbDF\n-----END PGP SIGNATURE-----",
        "payload": "tree 91f157ac35dcaaf9a05026d3cc18263564e3636f\nparent 5b955eb5a3c2bbf353d00c071c6bfa94b224c872\nauthor James O'Beirne <james.obeirne@pm.me> 1631901513 -0400\ncommitter James O'Beirne <james.obeirne@pm.me> 1632325305 -0400\n\ncontrib: verifybinaries: avoid tabs for indentation\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f87dae286229e2559219d19e91883a739cc60dd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3f87dae286229e2559219d19e91883a739cc60dd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f87dae286229e2559219d19e91883a739cc60dd/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5b955eb5a3c2bbf353d00c071c6bfa94b224c872",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b955eb5a3c2bbf353d00c071c6bfa94b224c872",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5b955eb5a3c2bbf353d00c071c6bfa94b224c872"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 13,
      "deletions": 17
    },
    "files": [
      {
        "sha": "507ffff900719b6b08e14fa166be42e6721433c3",
        "filename": "contrib/verifybinaries/verify.py",
        "status": "modified",
        "additions": 13,
        "deletions": 17,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f87dae286229e2559219d19e91883a739cc60dd/contrib/verifybinaries/verify.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f87dae286229e2559219d19e91883a739cc60dd/contrib/verifybinaries/verify.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verifybinaries/verify.py?ref=3f87dae286229e2559219d19e91883a739cc60dd",
        "patch": "@@ -24,17 +24,17 @@\n \n JSON output can by obtained by setting env BINVERIFY_JSON=1.\n \"\"\"\n-from hashlib import sha256\n import argparse\n import difflib\n import json\n import os\n import subprocess\n import re\n import sys\n+import textwrap\n import urllib.request\n from collections import namedtuple\n-from textwrap import indent\n+from hashlib import sha256\n from pathlib import Path\n \n WORKINGDIR = \"/tmp/bitcoin_verify_binaries\"\n@@ -48,6 +48,10 @@\n )\n \n \n+def indent(output: str) -> str:\n+    return textwrap.indent(output, '  ')\n+\n+\n def bool_from_env(key, default=False) -> bool:\n     if key not in os.environ:\n         return default\n@@ -307,34 +311,31 @@ def main(args):\n     sigfile1 = SIGNATUREFILENAME\n     success, output = download_with_wget(HOST1 + remote_sigfile, sigfile1)\n     if not success:\n-        indented_output = indent(output, '\\t')\n         print_err(\n             f\"couldn't fetch signature file. \"\n             \"Have you specified the version number in the following format?\\n\"\n             f\"[{VERSIONPREFIX}]{VERSION_FORMAT} \"\n             f\"(example: {VERSIONPREFIX}{VERSION_EXAMPLE})\\n\"\n-            f\"wget output:\\n{indented_output}\")\n+            f\"wget output:\\n{indent(output)}\")\n         return 4\n \n     # fetch first sums text file\n     sumfile1 = SUMS_FILENAME\n     success, output = download_with_wget(HOST1 + remote_dir + SUMS_FILENAME, sumfile1)\n     if not success:\n-        indented_output = indent(output, '\\t')\n         print_err(\n             f\"couldn't fetch {SUMS_FILENAME} file.\\n\"\n-            f\"wget output:\\n{indented_output}\")\n+            f\"wget output:\\n{indent(output)}\")\n         return 4\n \n     # fetch second signature file\n     sigfile2 = SIGNATUREFILENAME + \".2\"\n     success, output = download_with_wget(HOST2 + remote_sigfile, sigfile2)\n     got_both = success\n     if args.require_all_hosts and not success:\n-        indented_output = indent(output, '\\t')\n         print_err(\n             f\"{HOST2} failed to provide signature file, but {HOST1} did?\\n\"\n-            f\"wget output:\\n{indented_output}\")\n+            f\"wget output:\\n{indent(output)}\")\n         remove_files([sigfile1])\n         return 5\n     elif not success:\n@@ -346,10 +347,9 @@ def main(args):\n     success, output = download_with_wget(HOST2 + remote_dir + SUMS_FILENAME, sumfile2)\n     got_both = got_both and success\n     if args.require_all_hosts and not success:\n-        indented_output = indent(output, '\\t')\n         print_err(\n             f\"{HOST2} failed to provide {SUMS_FILENAME} file, but {HOST1} did?\\n\"\n-            f\"wget output:\\n{indented_output}\")\n+            f\"wget output:\\n{indent(output)}\")\n         remove_files([sigfile1])\n         return 5\n     elif not success:\n@@ -386,7 +386,7 @@ def main(args):\n     if local_builder_keys and gh_builder_keys:\n         if local_builder_keys != gh_builder_keys:\n             diff = indent(\n-                '\\n'.join(difflib.unified_diff(local_builder_keys, gh_builder_keys)), '\\t')\n+                '\\n'.join(difflib.unified_diff(local_builder_keys, gh_builder_keys)))\n             print_warn(f\"found diff in builder keys:\\n{diff}\\n\")\n \n     builder_key_map = {}\n@@ -406,8 +406,6 @@ def get_sigfiles_to_remove():\n     # fail with GPG exit code '2' (and so not writing to --output) because of the\n     # likely presence of multiple untrusted signatures.\n     retval, output = verify_with_gpg(sigfile1)\n-    indented_output = indent(output, '\\t')\n-\n     good, unknown, bad = parse_gpg_result(output.splitlines())\n \n     # Retrieve unknown keys that are in the repo builder list and then try GPG again.\n@@ -457,8 +455,7 @@ def get_sigfiles_to_remove():\n         else:\n             print_err(\"unexpected GPG exit code\")\n \n-        indented_output = indent(output, '\\t')\n-        print_err(f\"gpg output:\\n{indented_output}\")\n+        print_err(f\"gpg output:\\n{indent(output)}\")\n         remove_files([*get_sigfiles_to_remove(), SUMS_FILENAME])\n         return 1\n \n@@ -515,8 +512,7 @@ def get_sigfiles_to_remove():\n         success, output = download_with_wget(HOST1 + remote_dir + binary_filename)\n \n         if not success:\n-            indented_output = indent(output, '\\t')\n-            print_err(f\"failed to download {binary_filename}\\nwget output:\\n{indented_output}\")\n+            print_err(f\"failed to download {binary_filename}\\nwget output:\\n{indent(output)}\")\n             return 10\n \n     # verify hashes"
      }
    ]
  },
  {
    "sha": "80fd67b890d38f6685a19fab56ebdee86e510cf2",
    "node_id": "C_kwDOABII59oAKDgwZmQ2N2I4OTBkMzhmNjY4NWExOWZhYjU2ZWJkZWU4NmU1MTBjZjI",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-09-17T18:01:53Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-09-22T15:41:46Z"
      },
      "message": "contrib: verifybinaries: clarify builder diff message",
      "tree": {
        "sha": "1f03d9c4eff985b70b7653416e4a3a9f0631cd20",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1f03d9c4eff985b70b7653416e4a3a9f0631cd20"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/80fd67b890d38f6685a19fab56ebdee86e510cf2",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEGNRVI1NPYuZCSIrGepNdrbLETwUFAmFLTroACgkQepNdrbLE\nTwUExxAAiWabot5ih0sJ9k6Hoby04f0z4eI0l88nLhd8mbiNB1w+3n8YLzszf5WG\nluaUQCiErs+LUkoQoxR/RitRBl4mVgStPVmn3I1UAd0WCyVxI9ZnkAT3oFLikTut\nWwXyuRpAbgFym5LbRcszQ3fncbAtVrivA9/Xe21I/cL7LaPpR7RC61M8OHsUdGYq\nkhzJAVXoMGrRin0yh8J5HSsAA1TdNUCXyYLBBqnRQyENycdaLj1hCrKaFgZkabYf\nKNDIopib8ftEhn9i+zrb/92AYDTUkiN/nAQP5RQLHbk8mHmHJYCTpXlyvc/h5KcF\nC6NC7v7yXUXoKuWtsr743QfkYKG8r02VvOQyE2GQmVjhFEs3mYJNzKdMig3idoZi\nGKbjzWEJRZNaMKifnrjNplNtvIs85WQ7JP7N8kiJHTY8RgJay9VBgsU5P8telaWa\n5sTSfEimFa2Oj78c/NYlvq7ksi+XWDLb49dGbV0XNY3hKSOchP8RoWAuQe5gcWbF\n5QVV/Vl0p6R8GIiuT2E3/doq1oRR2+facHzhfhahmBes0Kp1BCxFX+g3DrKYqfxH\nxeOd8RRPaivdjywWAWfjc8ZM+KdoULG4i8yzCw9EptgsPknhxYXw4t2F2hXs7Sog\nz+fLUX6sxy5nOFAg5phHQ4GKFKw84h0Vz2VvGLD/CSMykCmn7Wo=\n=FDVe\n-----END PGP SIGNATURE-----",
        "payload": "tree 1f03d9c4eff985b70b7653416e4a3a9f0631cd20\nparent 3f87dae286229e2559219d19e91883a739cc60dd\nauthor James O'Beirne <james.obeirne@pm.me> 1631901713 -0400\ncommitter James O'Beirne <james.obeirne@pm.me> 1632325306 -0400\n\ncontrib: verifybinaries: clarify builder diff message\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80fd67b890d38f6685a19fab56ebdee86e510cf2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/80fd67b890d38f6685a19fab56ebdee86e510cf2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80fd67b890d38f6685a19fab56ebdee86e510cf2/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3f87dae286229e2559219d19e91883a739cc60dd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f87dae286229e2559219d19e91883a739cc60dd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3f87dae286229e2559219d19e91883a739cc60dd"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "a23c60defbcd2bb738460ff53072569e51476ac2",
        "filename": "contrib/verifybinaries/verify.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80fd67b890d38f6685a19fab56ebdee86e510cf2/contrib/verifybinaries/verify.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80fd67b890d38f6685a19fab56ebdee86e510cf2/contrib/verifybinaries/verify.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verifybinaries/verify.py?ref=80fd67b890d38f6685a19fab56ebdee86e510cf2",
        "patch": "@@ -387,7 +387,7 @@ def main(args):\n         if local_builder_keys != gh_builder_keys:\n             diff = indent(\n                 '\\n'.join(difflib.unified_diff(local_builder_keys, gh_builder_keys)))\n-            print_warn(f\"found diff in builder keys:\\n{diff}\\n\")\n+            print_warn(f\"found diff (local vs. GH) in builder keys:\\n{diff}\\n\")\n \n     builder_key_map = {}\n     # Prefer local builder keys to those obtained remotely."
      }
    ]
  },
  {
    "sha": "94fe6b991cc8abb870ea565bcfbdd4a48c6f7608",
    "node_id": "C_kwDOABII59oAKDk0ZmU2Yjk5MWNjOGFiYjg3MGVhNTY1YmNmYmRkNGE0OGM2Zjc2MDg",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-09-17T18:40:55Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-09-22T15:41:47Z"
      },
      "message": "contrib: verifybinaries: add verbose option",
      "tree": {
        "sha": "b2fa3dde31d48a03f68bf9ff0b6a5f703f5c7c4c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b2fa3dde31d48a03f68bf9ff0b6a5f703f5c7c4c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/94fe6b991cc8abb870ea565bcfbdd4a48c6f7608",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEGNRVI1NPYuZCSIrGepNdrbLETwUFAmFLTrsACgkQepNdrbLE\nTwXO5g/6AnLui2BMLuU2WvAr/XBmUKiVd/57oac3DSRydD/xM2cWS2YgN+ua5EuG\ndHB/tJfzWuZBTKCBW32d/MIJjXtfkWsmcr6hzktJsN06a+XD0oRGOO39VvG5Nm3N\nyLU9ML2IbHw3p3PSaP0wdWjaHbV7327YNcEgt1zOKhUyRyvOnRZ0XdyEoMocKyCq\n3CDk8UBFiwNiS5sLIyzcPVNbPfjTJBmndzehvrTR9uqPSveuazspWS7nWeRbhIqS\nr54MFgvwVSlaXFuav18NEQl7uUqMUtaIAYmODCHwhSV8Gc8oshlS359Xb4Vwn82c\n1kU8b7rjhh5xd4QYCA9ehhc8roIzBNkX+5OntGeu2kYpx78Z94cOnGIfmNNX5QqL\nUdSzgYfJjTqM2V9enFREhpGlgiQu1WyyB7NXyd1YUHmYyzPczc8gcorcbjBhp4uE\n4u+TDRnL6fLYdoLGUomugIrlH49gcjH6Az8bFaK8K6HBYDU1/+d6AX4gkKq80b6Q\nCLp3nI1gl7eotzUz1DENt0v9ehLvOLTIVn6xRPEUTXft/Fm9WyCc2ppc242lxaP8\nO2AIZ3Jjcacan+y5OkKnXjd7/Mit/9QnhMZw1ThxyCMMHDDd727iad024YbmBQgu\nvOl/AS0AFyIDT9bwFUtdrdAHq5rLNGpTG28mQjiS5ybcT4yiZYg=\n=EaEk\n-----END PGP SIGNATURE-----",
        "payload": "tree b2fa3dde31d48a03f68bf9ff0b6a5f703f5c7c4c\nparent 80fd67b890d38f6685a19fab56ebdee86e510cf2\nauthor James O'Beirne <james.obeirne@pm.me> 1631904055 -0400\ncommitter James O'Beirne <james.obeirne@pm.me> 1632325307 -0400\n\ncontrib: verifybinaries: add verbose option\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94fe6b991cc8abb870ea565bcfbdd4a48c6f7608",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/94fe6b991cc8abb870ea565bcfbdd4a48c6f7608",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94fe6b991cc8abb870ea565bcfbdd4a48c6f7608/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "80fd67b890d38f6685a19fab56ebdee86e510cf2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80fd67b890d38f6685a19fab56ebdee86e510cf2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/80fd67b890d38f6685a19fab56ebdee86e510cf2"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 8,
      "deletions": 0
    },
    "files": [
      {
        "sha": "8195956a089be59cff943c8a4aac168c50e4b11d",
        "filename": "contrib/verifybinaries/verify.py",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94fe6b991cc8abb870ea565bcfbdd4a48c6f7608/contrib/verifybinaries/verify.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94fe6b991cc8abb870ea565bcfbdd4a48c6f7608/contrib/verifybinaries/verify.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verifybinaries/verify.py?ref=94fe6b991cc8abb870ea565bcfbdd4a48c6f7608",
        "patch": "@@ -68,6 +68,10 @@ def bool_from_env(key, default=False) -> bool:\n         f'version of the bitcoin release to download; of the format '\n         f'{VERSION_FORMAT}. Example: {VERSION_EXAMPLE}')\n )\n+parser.add_argument(\n+    '--verbose', action='store_true',\n+    default=bool_from_env('BINVERIFY_VERBOSE'),\n+)\n parser.add_argument(\n     '--cleanup', action='store_true',\n     default=bool_from_env('BINVERIFY_CLEANUP'),\n@@ -406,6 +410,10 @@ def get_sigfiles_to_remove():\n     # fail with GPG exit code '2' (and so not writing to --output) because of the\n     # likely presence of multiple untrusted signatures.\n     retval, output = verify_with_gpg(sigfile1)\n+\n+    if args.verbose:\n+        print_info(f\"gpg output:\\n{indent(output)}\")\n+\n     good, unknown, bad = parse_gpg_result(output.splitlines())\n \n     # Retrieve unknown keys that are in the repo builder list and then try GPG again."
      }
    ]
  },
  {
    "sha": "d817c48556e640aa7b3c4f737ad3dc366739f4ea",
    "node_id": "C_kwDOABII59oAKGQ4MTdjNDg1NTZlNjQwYWE3YjNjNGY3MzdhZDNkYzM2NjczOWY0ZWE",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-09-17T18:54:52Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-09-22T15:41:48Z"
      },
      "message": "contrib: verifybinaries: omit -codesignature binaries",
      "tree": {
        "sha": "6513bd56421f43fbd05ddf1a9376a1c48b681ed9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6513bd56421f43fbd05ddf1a9376a1c48b681ed9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d817c48556e640aa7b3c4f737ad3dc366739f4ea",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEGNRVI1NPYuZCSIrGepNdrbLETwUFAmFLTrwACgkQepNdrbLE\nTwVKtQ//XqwvtUsznbEOoNqWxzaco4XIEzFpWPQFPF/5eMUUbPkwmFD8EcgW945T\nf+zaZm6teVlaUtP5u9WuaiLogdWXqJwVXuULHzp3fiDTx3QDfpQVJt4Y8Hx7Ip0/\nAN/+nnFxnosTMrCCAvzDC5/gawywP0TaVIWZsLMst0uLIeI39LtPn2wuni3VQT49\norxTrAzPpe2VKJ+qnaA7L9KRXXsDPfdW734BrQq1eha92Z/6cDQtz3E6RvBTJbL1\n/x0MwPQe3pUg9dtB9CZo1fuv6yP9WhJCJXlePP38qMN30p14pBEnnLH46Z5c6G0L\nd7u0Au73GmnzTAgrfDYetEpkE3uz2RSdKd1uJdYGv0xs+EgIXJFOxachkurYPQC8\nmLp7areevcxoTf38ztg0pT56OBqOpmit9cvpHQjjZZMpOT678rVypxKKiA0AjQH7\nWU3r5hA3hVf2ottYhCzUGE9ebTIP7D+7WWkdCr5Q/J2jFryXz+ZErnzEy1r+vcuJ\nU0K9PfHdVWNmmHm/dDCs8+0PnudfENhEgsC/8CHx4m7ghSycf/iiww2pMHjULxsM\nwj2svOeWlRyd3Qz6VT4bUd8/YErsNwYzJIjKQNFsxgVvpL9lF31755J+efRvAat5\nIMHVkWIbsjTUTidhJQDC+kIIOpwMmCu0kmgd8rxPbZDKTHV88Bg=\n=2uKg\n-----END PGP SIGNATURE-----",
        "payload": "tree 6513bd56421f43fbd05ddf1a9376a1c48b681ed9\nparent 94fe6b991cc8abb870ea565bcfbdd4a48c6f7608\nauthor James O'Beirne <james.obeirne@pm.me> 1631904892 -0400\ncommitter James O'Beirne <james.obeirne@pm.me> 1632325308 -0400\n\ncontrib: verifybinaries: omit -codesignature binaries\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d817c48556e640aa7b3c4f737ad3dc366739f4ea",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d817c48556e640aa7b3c4f737ad3dc366739f4ea",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d817c48556e640aa7b3c4f737ad3dc366739f4ea/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "94fe6b991cc8abb870ea565bcfbdd4a48c6f7608",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94fe6b991cc8abb870ea565bcfbdd4a48c6f7608",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/94fe6b991cc8abb870ea565bcfbdd4a48c6f7608"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "c86f9eacaa162b3f5b71b92d7c34b9eb919e8194",
        "filename": "contrib/verifybinaries/verify.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d817c48556e640aa7b3c4f737ad3dc366739f4ea/contrib/verifybinaries/verify.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d817c48556e640aa7b3c4f737ad3dc366739f4ea/contrib/verifybinaries/verify.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verifybinaries/verify.py?ref=d817c48556e640aa7b3c4f737ad3dc366739f4ea",
        "patch": "@@ -504,7 +504,7 @@ def get_sigfiles_to_remove():\n         return 7\n \n     # remove binaries that are known not to be hosted by bitcoincore.org\n-    fragments_to_remove = ['-unsigned', '-debug']\n+    fragments_to_remove = ['-unsigned', '-debug', '-codesignatures']\n     for fragment in fragments_to_remove:\n         nobinaries = [i for i in hashes_to_verify if fragment in i[1]]\n         if nobinaries:"
      }
    ]
  },
  {
    "sha": "16ff9825d156bb845060df792f64c8fe901e14a3",
    "node_id": "C_kwDOABII59oAKDE2ZmY5ODI1ZDE1NmJiODQ1MDYwZGY3OTJmNjRjOGZlOTAxZTE0YTM",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-09-17T19:12:44Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-09-22T15:41:49Z"
      },
      "message": "contrib: verifybinaries: lint fixes",
      "tree": {
        "sha": "977544a85eabc4a479113c304af7f752a91ec5c2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/977544a85eabc4a479113c304af7f752a91ec5c2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/16ff9825d156bb845060df792f64c8fe901e14a3",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEGNRVI1NPYuZCSIrGepNdrbLETwUFAmFLTr0ACgkQepNdrbLE\nTwXXqg/+MkwFCvToOYRBeB15olrn6DS2MikGoQVZDwiwlmpa5KpBtGxCPY1dQI77\n3WeGiqe5aDkEHDD9mMPj3TcepdJxKvwOTVEnyQERgVIktMQhtWMip31RXI6v7X03\nH2nyiBHHf0GxBbpyJKBV3mhV0Rr4ezkPQ5Mhqjjs8813ayqaXwDaJq0YihcL7g9/\n4+6TwzLGVxbUwJYiv7BErN7CLn4PsXmyS8BSK4Y0VZ85/gzEPKxnS0HdNCMaxtjo\nY60+LasNbnaUhFc83F9ENLpzbQhPsBaRK9qLE6i8kF8Q6B6fsZ8aF90rhDuZmN1A\nMRTFxfw9k/IcuZoL3ZtHF7AtBq9W5N/jeeMKLdsbie31eiNtLxNjSTnQadBOX3P7\n5YZJqtQq36Ih+u+NLnXoVarLrZZnIUxDdKFtg59kspX4mQ80yQrPTb0J6fd3PZ57\nDIw1mv3Yg80UhqKtzTK0zrTXQdvwks7WMd5l/YZhf752kasABgsV/D2YXJQw7pL0\nrJLqiE403J9AREaCz3UJIoaAEQ9jZhKJ9G0GfwAfVF0gHYkMjjkZF75BfWTqF4/M\nnMwAoXLf5yF3QuYAkkkuJ2Bka6KOAk2jE4ooqTzbpOJnFzTP1T4M6xutxNPjiYWC\n/lKiXwwQRt0o+4Z+55tJ4wFSS0HGmpUkuVC7EwQSlUgNd99xKjM=\n=gk2b\n-----END PGP SIGNATURE-----",
        "payload": "tree 977544a85eabc4a479113c304af7f752a91ec5c2\nparent d817c48556e640aa7b3c4f737ad3dc366739f4ea\nauthor James O'Beirne <james.obeirne@pm.me> 1631905964 -0400\ncommitter James O'Beirne <james.obeirne@pm.me> 1632325309 -0400\n\ncontrib: verifybinaries: lint fixes\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/16ff9825d156bb845060df792f64c8fe901e14a3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/16ff9825d156bb845060df792f64c8fe901e14a3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/16ff9825d156bb845060df792f64c8fe901e14a3/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d817c48556e640aa7b3c4f737ad3dc366739f4ea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d817c48556e640aa7b3c4f737ad3dc366739f4ea",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d817c48556e640aa7b3c4f737ad3dc366739f4ea"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 15,
      "deletions": 11
    },
    "files": [
      {
        "sha": "8711a2cd3d26418afde9b4181adfaf8e01504544",
        "filename": "contrib/verifybinaries/README.md",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/16ff9825d156bb845060df792f64c8fe901e14a3/contrib/verifybinaries/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/16ff9825d156bb845060df792f64c8fe901e14a3/contrib/verifybinaries/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verifybinaries/README.md?ref=16ff9825d156bb845060df792f64c8fe901e14a3",
        "patch": "@@ -13,12 +13,12 @@ First, you have to figure out which public keys to recognize. Browse the [list o\n builder-keys](https://github.com/bitcoin/bitcoin/tree/master/contrib/builder-keys) and\n decide which of these keys you would like to trust. For each key you want to trust, you\n must obtain that key for your local GPG installation (you can use this script to do\n-this automatically, or you can do it yourself). \n+this automatically, or you can do it yourself).\n \n-You can obtain these keys by \n-  - (most laborious) through a browser using a key server (e.g. https://keyserver.ubuntu.com/), \n+You can obtain these keys by\n+  - (most laborious) through a browser using a key server (e.g. https://keyserver.ubuntu.com/),\n   - manually using the `gpg --keyserver <url> --recv-keys <key>` command, or\n-  - (easiest) you can run the packaged `verifybinaries.py` script to have it automatically \n+  - (easiest) you can run the packaged `verifybinaries.py` script to have it automatically\n     retrieve unrecognized keys.\n \n Historially, the lead maintainer Wladimir J. van der Laan has provided the sole signing\n@@ -27,8 +27,8 @@ above using a plurality of keys.\n \n #### Usage\n \n-This script attempts to download the checksum file (`SHA256SUMS`) and corresponding \n-signature file `SHA256SUMS.asc` from a number of sources, but chiefly \n+This script attempts to download the checksum file (`SHA256SUMS`) and corresponding\n+signature file `SHA256SUMS.asc` from a number of sources, but chiefly\n https://bitcoincore.org.\n \n It first checks if the checksum file is valid based upon a plurality of signatures, and"
      },
      {
        "sha": "f46bfe3946930286c357b3acc8acc0c1b3d8eb34",
        "filename": "contrib/verifybinaries/verify.py",
        "status": "modified",
        "additions": 9,
        "deletions": 5,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/16ff9825d156bb845060df792f64c8fe901e14a3/contrib/verifybinaries/verify.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/16ff9825d156bb845060df792f64c8fe901e14a3/contrib/verifybinaries/verify.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verifybinaries/verify.py?ref=16ff9825d156bb845060df792f64c8fe901e14a3",
        "patch": "@@ -33,7 +33,6 @@\n import sys\n import textwrap\n import urllib.request\n-from collections import namedtuple\n from hashlib import sha256\n from pathlib import Path\n \n@@ -344,7 +343,8 @@ def main(args):\n         return 5\n     elif not success:\n         print_warn(\n-            f\"{HOST2} failed to provide signature file. Continuing based solely upon {HOST1}.\")\n+            f\"{HOST2} failed to provide signature file. \"\n+            f\"Continuing based solely upon {HOST1}.\")\n \n     # fetch second sums text file\n     sumfile2 = SUMS_FILENAME + \".2\"\n@@ -358,7 +358,8 @@ def main(args):\n         return 5\n     elif not success:\n         print_warn(\n-            f\"{HOST2} failed to provide {SUMS_FILENAME} file. Continuing based solely upon {HOST1}.\")\n+            f\"{HOST2} failed to provide {SUMS_FILENAME} file. \"\n+            f\"Continuing based solely upon {HOST1}.\")\n \n     if got_both:\n         # ensure that both signature files are equal\n@@ -440,7 +441,8 @@ def get_sigfiles_to_remove():\n     # good_untrusted = [sig for sig in good if not sig.trusted]\n     # if not args.noninteractive:\n     #     for sig in good_untrusted:\n-    #         if input(f\"add full trust (4) to key {sig.key} for {sig.name}? (y/N) \").lower() == \"y\":\n+    #         prompt = f\"add full trust (4) to key {sig.key} for {sig.name}? (y/N) \"\n+    #         if input(prompt).lower() == \"y\":\n     #             gpg_add_full_trust(sig.key)\n \n     good_expired = [sig for sig in good if sig.status == 'expired']\n@@ -520,7 +522,9 @@ def get_sigfiles_to_remove():\n         success, output = download_with_wget(HOST1 + remote_dir + binary_filename)\n \n         if not success:\n-            print_err(f\"failed to download {binary_filename}\\nwget output:\\n{indent(output)}\")\n+            print_err(\n+                f\"failed to download {binary_filename}\\n\"\n+                f\"wget output:\\n{indent(output)}\")\n             return 10\n \n     # verify hashes"
      }
    ]
  },
  {
    "sha": "fba33d5a76d5ac07e711ef66e881363a02ca3686",
    "node_id": "C_kwDOABII59oAKGZiYTMzZDVhNzZkNWFjMDdlNzExZWY2NmU4ODEzNjNhMDJjYTM2ODY",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-09-22T16:07:07Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-09-22T23:24:48Z"
      },
      "message": "contrib: verifybinaries: use logging package",
      "tree": {
        "sha": "db4b103b924fba22da80046f875361de20344f92",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/db4b103b924fba22da80046f875361de20344f92"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fba33d5a76d5ac07e711ef66e881363a02ca3686",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEGNRVI1NPYuZCSIrGepNdrbLETwUFAmFLu0IACgkQepNdrbLE\nTwWzxxAAnVXSO8pSR4Jg60gWUul+egdXmQyXbk/lYPAsK9Nl8WenOhZ+EPNLETUl\nMh6TwAu4B4JfjNEYWEYNN0CO0lXKGMIqRcOYJlpkxq/3h/xK2ggmQWR1taODJ0cb\nX5E2kqmoDJPzGFQ8/18tv9ibZHTKYTCN0LUMm52jYzxUM76cXF+L4krsur1WmWfY\nUQJftKcQ4m4AtV5ZI+uL6AEyMwJHGUKjfvidbcwvD4i5F6A0dMDVevl3XIZ526AO\nlLNv+U6k4UqLB2owo13+QHDQrB0L+QGZ0cpKQCSzkGMxD0Db2zp8AmVc0sMtQxMP\nScEcV5JgtZ+WBHcRx0JN7nErbWvvDYnojEOWWmMjUVmLaLO8CHcELg+bjld1pTyP\npLZdrhTqBxVFysGr1h5ZXqKxvENqlbNsJNMAAXNNqHq62Dn8v6Lrb4udsTTP8qfT\ndQNWb3bgjqm19vMG2zYi280tjimiXsPgkdu/TRCX6Pchtvky2gheV7CjkNVsKfQz\n3LJB2aJVnXw+nQHYtioskXHI2pN/4sml81wEMOCcJ0f+M2e0wjXnqeQe7gyIXd0f\nlA6hqtYmHx1mZNaS9Dv9ITGJ6NsbJNFZJdyDDuKJ8Ds2C3x0FFLeD8ULBRJinWpK\nouvYQ04dGGcfoo2S92cRFvEFO8mw+52nip+UBTYgoD+RlFThm4Y=\n=4t6j\n-----END PGP SIGNATURE-----",
        "payload": "tree db4b103b924fba22da80046f875361de20344f92\nparent 16ff9825d156bb845060df792f64c8fe901e14a3\nauthor James O'Beirne <james.obeirne@pm.me> 1632326827 -0400\ncommitter James O'Beirne <james.obeirne@pm.me> 1632353088 -0400\n\ncontrib: verifybinaries: use logging package\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fba33d5a76d5ac07e711ef66e881363a02ca3686",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fba33d5a76d5ac07e711ef66e881363a02ca3686",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fba33d5a76d5ac07e711ef66e881363a02ca3686/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "16ff9825d156bb845060df792f64c8fe901e14a3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/16ff9825d156bb845060df792f64c8fe901e14a3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/16ff9825d156bb845060df792f64c8fe901e14a3"
      }
    ],
    "stats": {
      "total": 103,
      "additions": 52,
      "deletions": 51
    },
    "files": [
      {
        "sha": "1f47064cd374b72f5c1ca43ef9542f0be8c44f18",
        "filename": "contrib/verifybinaries/verify.py",
        "status": "modified",
        "additions": 52,
        "deletions": 51,
        "changes": 103,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fba33d5a76d5ac07e711ef66e881363a02ca3686/contrib/verifybinaries/verify.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fba33d5a76d5ac07e711ef66e881363a02ca3686/contrib/verifybinaries/verify.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verifybinaries/verify.py?ref=fba33d5a76d5ac07e711ef66e881363a02ca3686",
        "patch": "@@ -27,6 +27,7 @@\n import argparse\n import difflib\n import json\n+import logging\n import os\n import subprocess\n import re\n@@ -47,6 +48,21 @@\n )\n \n \n+def set_up_logger(is_verbose: bool = False) -> logging.Logger:\n+    \"\"\"Set up a logger that writes to stderr.\"\"\"\n+    log = logging.getLogger(__name__)\n+    log.setLevel(logging.INFO if is_verbose else logging.WARNING)\n+    console = logging.StreamHandler(sys.stderr)  # log to stderr\n+    console.setLevel(logging.DEBUG)\n+    formatter = logging.Formatter('[%(levelname)s] %(message)s')\n+    console.setFormatter(formatter)\n+    log.addHandler(console)\n+    return log\n+\n+\n+log = set_up_logger()\n+\n+\n def indent(output: str) -> str:\n     return textwrap.indent(output, '  ')\n \n@@ -163,9 +179,9 @@ def download_lines_with_urllib(url) -> (bool, [str]):\n     try:\n         return True, [l.strip().decode() for l in urllib.request.urlopen(url).readlines()]\n     except urllib.request.HTTPError:\n-        print_warn(f\"HTTP request to {url} failed (HTTPError)\")\n+        log.warning(f\"HTTP request to {url} failed (HTTPError)\")\n     except Exception as e:\n-        print_warn(f\"HTTP request to {url} failed ({e})\")\n+        log.warning(f\"HTTP request to {url} failed ({e})\")\n     return (False, [])\n \n \n@@ -188,23 +204,6 @@ def remove_files(filenames):\n         os.remove(filename)\n \n \n-def print_err(*args, prefix='Error: ', **kwargs):\n-    kwargs['file'] = sys.stderr\n-    print(f\"{prefix}{args[0]}\", *args[1:], **kwargs)\n-\n-\n-def print_warn(*args, **kwargs):\n-    print_err(*args, **kwargs, prefix=\"WARNING: \")\n-\n-\n-def print_fail(*args, **kwargs):\n-    print_err(*args, **kwargs, prefix=\"FAIL: \")\n-\n-\n-def print_info(*args, **kwargs):\n-    print_err(*args, **kwargs, prefix=\"INFO: \")\n-\n-\n class SigData:\n     \"\"\"GPG signature data as parsed from GPG stdout.\"\"\"\n     def __init__(self, key: str, name: str, trusted: bool, status: str):\n@@ -290,13 +289,15 @@ def gpg_add_full_trust(key: str):\n     \"\"\"Programmatically update a GPG key as being fully trusted (4).\"\"\"\n     # For whatever reason, fully = 5 (and not 4) here.\n     trust_line = f'{key}:5:'\n-    print_info(f\"Updating GPG trust db with '{trust_line}'\")\n+    log.info(f\"Updating GPG trust db with '{trust_line}'\")\n     ran = subprocess.run(f\"echo '{trust_line}' | gpg --import-ownertrust\", shell=True)\n     assert ran.returncode == 0\n \n \n def main(args):\n     args = parser.parse_args()\n+    if args.verbose:\n+        log.setLevel(logging.INFO)\n \n     # determine remote dir dependent on provided version string\n     version_base, version_rc, os_filter = parse_version_string(args.version)\n@@ -314,7 +315,7 @@ def main(args):\n     sigfile1 = SIGNATUREFILENAME\n     success, output = download_with_wget(HOST1 + remote_sigfile, sigfile1)\n     if not success:\n-        print_err(\n+        log.error(\n             f\"couldn't fetch signature file. \"\n             \"Have you specified the version number in the following format?\\n\"\n             f\"[{VERSIONPREFIX}]{VERSION_FORMAT} \"\n@@ -326,7 +327,7 @@ def main(args):\n     sumfile1 = SUMS_FILENAME\n     success, output = download_with_wget(HOST1 + remote_dir + SUMS_FILENAME, sumfile1)\n     if not success:\n-        print_err(\n+        log.error(\n             f\"couldn't fetch {SUMS_FILENAME} file.\\n\"\n             f\"wget output:\\n{indent(output)}\")\n         return 4\n@@ -336,13 +337,13 @@ def main(args):\n     success, output = download_with_wget(HOST2 + remote_sigfile, sigfile2)\n     got_both = success\n     if args.require_all_hosts and not success:\n-        print_err(\n+        log.error(\n             f\"{HOST2} failed to provide signature file, but {HOST1} did?\\n\"\n             f\"wget output:\\n{indent(output)}\")\n         remove_files([sigfile1])\n         return 5\n     elif not success:\n-        print_warn(\n+        log.warning(\n             f\"{HOST2} failed to provide signature file. \"\n             f\"Continuing based solely upon {HOST1}.\")\n \n@@ -351,25 +352,25 @@ def main(args):\n     success, output = download_with_wget(HOST2 + remote_dir + SUMS_FILENAME, sumfile2)\n     got_both = got_both and success\n     if args.require_all_hosts and not success:\n-        print_err(\n+        log.error(\n             f\"{HOST2} failed to provide {SUMS_FILENAME} file, but {HOST1} did?\\n\"\n             f\"wget output:\\n{indent(output)}\")\n         remove_files([sigfile1])\n         return 5\n     elif not success:\n-        print_warn(\n+        log.warning(\n             f\"{HOST2} failed to provide {SUMS_FILENAME} file. \"\n             f\"Continuing based solely upon {HOST1}.\")\n \n     if got_both:\n         # ensure that both signature files are equal\n         if not files_are_equal(sigfile1, sigfile2):\n-            print_err(\n+            log.error(\n                 f\"{HOST1} and {HOST2} signature files were not equal?\\n\"\n                 f\"See files {WORKINGDIR}/{sigfile1} and {WORKINGDIR}/{sigfile2}\")\n             return 6\n         if not files_are_equal(sumfile1, sumfile2):\n-            print_err(\n+            log.error(\n                 f\"{HOST1} and {HOST2} {SUMS_FILENAME} files were not equal?\\n\"\n                 f\"See files {WORKINGDIR}/{sumfile1} and {WORKINGDIR}/{sumfile2}\")\n             return 8\n@@ -382,17 +383,17 @@ def main(args):\n \n     success, gh_builder_keys = download_lines_with_urllib(BUILDER_KEYS_GH_URL)\n     if not success:\n-        print_warn(f\"unable to retrieve builder keys from {BUILDER_KEYS_GH_URL}\")\n+        log.warning(f\"unable to retrieve builder keys from {BUILDER_KEYS_GH_URL}\")\n \n     if not (success or local_builder_keys):\n-        print_err(\"unable to retrieve builder keys locally or remotely\")\n+        log.error(\"unable to retrieve builder keys locally or remotely\")\n \n     # check the local and remote builder keys against each other and report diff\n     if local_builder_keys and gh_builder_keys:\n         if local_builder_keys != gh_builder_keys:\n             diff = indent(\n                 '\\n'.join(difflib.unified_diff(local_builder_keys, gh_builder_keys)))\n-            print_warn(f\"found diff (local vs. GH) in builder keys:\\n{diff}\\n\")\n+            log.warning(f\"found diff (local vs. GH) in builder keys:\\n{diff}\\n\")\n \n     builder_key_map = {}\n     # Prefer local builder keys to those obtained remotely.\n@@ -413,15 +414,15 @@ def get_sigfiles_to_remove():\n     retval, output = verify_with_gpg(sigfile1)\n \n     if args.verbose:\n-        print_info(f\"gpg output:\\n{indent(output)}\")\n+        log.info(f\"gpg output:\\n{indent(output)}\")\n \n     good, unknown, bad = parse_gpg_result(output.splitlines())\n \n     # Retrieve unknown keys that are in the repo builder list and then try GPG again.\n     if unknown and not args.noninteractive and not args.skip_import_builders:\n         for unsig in unknown:\n             name = builder_key_map.get(unsig.key, '<unknown>')\n-            if input(f\"Retrieve key {unsig.key} for {name}? (y/N) \").lower() == \"y\":\n+            if input(f\" ? Retrieve key {unsig.key} for {name}? (y/N) \").lower() == \"y\":\n                 ran = subprocess.run(\n                     f\"gpg --keyserver {args.keyserver} --recv-keys {unsig.key}\", shell=True)\n \n@@ -433,7 +434,7 @@ def get_sigfiles_to_remove():\n                 #     if input(prompt).lower() == \"y\":\n                 #         gpg_add_full_trust(unsig.key)\n                 if ran.returncode != 0:\n-                    print_warn(f\"failed to retrieve key {unsig.key} for {name}\")\n+                    log.warning(f\"failed to retrieve key {unsig.key} for {name}\")\n \n     # TODO: adding full trust doesn't actually fix the warnings; we need to sign\n     # pubkeys with our key.\n@@ -447,7 +448,7 @@ def get_sigfiles_to_remove():\n \n     good_expired = [sig for sig in good if sig.status == 'expired']\n     for sig in good_expired:\n-        print_warn(f\"key {sig.key} for {sig.name} is expired\")\n+        log.warning(f\"key {sig.key} for {sig.name} is expired\")\n \n     # Decide which keys we trust, though not \"trust\" in the GPG sense, but rather\n     # which pubkeys convince us that this sums file is legitimate. In other words,\n@@ -461,11 +462,11 @@ def get_sigfiles_to_remove():\n \n     if retval not in [0, 2]:\n         if retval == 1:\n-            print_err(\"Bad signature.\")\n+            log.error(\"Bad signature.\")\n         else:\n-            print_err(\"unexpected GPG exit code\")\n+            log.error(\"unexpected GPG exit code\")\n \n-        print_err(f\"gpg output:\\n{indent(output)}\")\n+        log.error(f\"gpg output:\\n{indent(output)}\")\n         remove_files([*get_sigfiles_to_remove(), SUMS_FILENAME])\n         return 1\n \n@@ -475,22 +476,22 @@ def get_sigfiles_to_remove():\n     for sig in good:\n         if sig.trusted or sig.key in trusted_keys:\n             good_trusted.add(sig)\n-            print_info(f\"GOOD SIGNATURE: {sig}\")\n+            log.info(f\"GOOD SIGNATURE: {sig}\")\n \n     good_untrusted = [sig for sig in good if sig not in good_trusted]\n     for sig in good_untrusted:\n-        print_info(f\"GOOD SIGNATURE (untrusted): {sig}\")\n+        log.info(f\"GOOD SIGNATURE (untrusted): {sig}\")\n \n     for sig in bad:\n-        print_warn(f\"BAD SIGNATURE: {sig}\")\n+        log.warning(f\"BAD SIGNATURE: {sig}\")\n \n     for sig in unknown:\n-        print_warn(f\"UNKNOWN SIGNATURE: {sig}\")\n+        log.warning(f\"UNKNOWN SIGNATURE: {sig}\")\n \n     num_trusted = len(good_trusted)\n-    print_info(f\"got {num_trusted} good, trusted signatures\")\n+    log.info(f\"got {num_trusted} good, trusted signatures\")\n     if num_trusted < args.min_trusted_sigs:\n-        print_err(\n+        log.error(\n             \"not enough trusted sigs to meet threshold \"\n             f\"({num_trusted} vs. {args.min_trusted_sigs})\")\n         return 9\n@@ -502,7 +503,7 @@ def get_sigfiles_to_remove():\n             line.split()[:2] for line in hash_file if os_filter in line]\n     remove_files([SUMS_FILENAME])\n     if not hashes_to_verify:\n-        print_err(\"no files matched the platform specified\")\n+        log.error(\"no files matched the platform specified\")\n         return 7\n \n     # remove binaries that are known not to be hosted by bitcoincore.org\n@@ -511,18 +512,18 @@ def get_sigfiles_to_remove():\n         nobinaries = [i for i in hashes_to_verify if fragment in i[1]]\n         if nobinaries:\n             remove_str = ', '.join(i[1] for i in nobinaries)\n-            print_warn(\n+            log.info(\n                 f\"removing *{fragment} binaries ({remove_str}) from verification \"\n                 f\"since {HOST1} does not host *{fragment} binaries\")\n             hashes_to_verify = [i for i in hashes_to_verify if fragment not in i[1]]\n \n     # download binaries\n     for _, binary_filename in hashes_to_verify:\n-        print_info(f\"downloading {binary_filename}\")\n+        log.info(f\"downloading {binary_filename}\")\n         success, output = download_with_wget(HOST1 + remote_dir + binary_filename)\n \n         if not success:\n-            print_err(\n+            log.error(\n                 f\"failed to download {binary_filename}\\n\"\n                 f\"wget output:\\n{indent(output)}\")\n             return 10\n@@ -536,17 +537,17 @@ def get_sigfiles_to_remove():\n             offending_files.append(binary_filename)\n     if offending_files:\n         joined_files = '\\n'.join(offending_files)\n-        print_fail(\n+        log.critical(\n             \"Hashes don't match.\\n\"\n             f\"Offending files:\\n{joined_files}\")\n         return 1\n     verified_binaries = [entry[1] for entry in hashes_to_verify]\n \n     if args.cleanup:\n-        print_info(\"cleaning up files\")\n+        log.info(\"cleaning up files\")\n         remove_files(get_sigfiles_to_remove() + verified_binaries)\n     else:\n-        print_info(f\"did not clean up {WORKINGDIR}\")\n+        log.info(f\"did not clean up {WORKINGDIR}\")\n \n     if args.json:\n         output = {"
      }
    ]
  },
  {
    "sha": "09fe45a1e88b79466202bb164e7f2534ce9eb342",
    "node_id": "C_kwDOABII59oAKDA5ZmU0NWExZTg4Yjc5NDY2MjAyYmIxNjRlN2YyNTM0Y2U5ZWIzNDI",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-09-22T22:20:00Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-09-23T00:03:10Z"
      },
      "message": "contrib: verifybinaries: restore legacy behavior\n\nFor releases pre-22.0, allow verification of the single-signature\nSHASUMS256.asc file in the same way this script did previously.\nDo so with the same output as the new procedure, including JSON format.\n\nAlso changes `verified_binaries` in the JSON format to include the hash.",
      "tree": {
        "sha": "6e73caa08acf2723314143969620fef103c7bfee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6e73caa08acf2723314143969620fef103c7bfee"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/09fe45a1e88b79466202bb164e7f2534ce9eb342",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEGNRVI1NPYuZCSIrGepNdrbLETwUFAmFLxEEACgkQepNdrbLE\nTwWm8w//eUuLnrEGc0EUfudxvnrtSTkzB68PEmt8TbZ4s4QUE9xSlI9Th3vlHVvN\nW9qRlxHXD1yuEukdaD2CL/Jg2QY/Cir16Ro55Sqln5J0Ml1UMffNEFyxFJWNVE2g\nH+iJcF32rlS8xwyVmS4RYBfMABX1pNTP9K/P5QCKO861Z9EwVNAPqmVXxrob/xAm\nHqDVI1M98Si2WgjeyXbzOaRfxSqF+CYYzVlM2pHTkzIDwYWv7o2Wzi1luPa0sDZH\nEew3gvde6vAIO527HTtZhxh6twdQZWEsELAk7oH52Q2JmYdtNNQ3AfDrISpEOgBR\n0Nm5YDw7W9kQ9eCL6UYO6lVxvQFFhwSmLUjBnlPhuJirEBqMPUK2LfNdbqTKcXbD\nqVBpfh6n0qZfnVgnpzrOznHmcszxyh3M43apHgnydTfvmI2Klgeh/tguFAPAz7PJ\nUehVebhOlAQyBHKXhX1to4qjZZrgqNLA5y/y03mCNfuWzIAtQH271j8Ax14YVXhU\n3jwQDi4O6CtxbxgooibvDChvSG853pKzaRKkk2nJEIiG+oS5kUWae2LzsK2oy1nI\nIISosiisa1U0FiiDCIYU9zFCs8XLz/Os1FIfoZJi3x3s6q7rhJR8EH1+URHh7Ld3\nTdrjXttNdMQXbl+tx0QAMS8KSIpD64W98qfwSbbKztA+IeCGQG8=\n=yqpH\n-----END PGP SIGNATURE-----",
        "payload": "tree 6e73caa08acf2723314143969620fef103c7bfee\nparent fba33d5a76d5ac07e711ef66e881363a02ca3686\nauthor James O'Beirne <james.obeirne@pm.me> 1632349200 -0400\ncommitter James O'Beirne <james.obeirne@pm.me> 1632355390 -0400\n\ncontrib: verifybinaries: restore legacy behavior\n\nFor releases pre-22.0, allow verification of the single-signature\nSHASUMS256.asc file in the same way this script did previously.\nDo so with the same output as the new procedure, including JSON format.\n\nAlso changes `verified_binaries` in the JSON format to include the hash.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/09fe45a1e88b79466202bb164e7f2534ce9eb342",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/09fe45a1e88b79466202bb164e7f2534ce9eb342",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/09fe45a1e88b79466202bb164e7f2534ce9eb342/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fba33d5a76d5ac07e711ef66e881363a02ca3686",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fba33d5a76d5ac07e711ef66e881363a02ca3686",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fba33d5a76d5ac07e711ef66e881363a02ca3686"
      }
    ],
    "stats": {
      "total": 355,
      "additions": 212,
      "deletions": 143
    },
    "files": [
      {
        "sha": "b5cd849fb1c6b9389dabc8ab8619069c2f870509",
        "filename": "contrib/verifybinaries/verify.py",
        "status": "modified",
        "additions": 212,
        "deletions": 143,
        "changes": 355,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/09fe45a1e88b79466202bb164e7f2534ce9eb342/contrib/verifybinaries/verify.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/09fe45a1e88b79466202bb164e7f2534ce9eb342/contrib/verifybinaries/verify.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verifybinaries/verify.py?ref=09fe45a1e88b79466202bb164e7f2534ce9eb342",
        "patch": "@@ -30,14 +30,17 @@\n import logging\n import os\n import subprocess\n+import typing as t\n import re\n import sys\n+import tempfile\n import textwrap\n import urllib.request\n+from enum import Enum\n from hashlib import sha256\n from pathlib import Path\n \n-WORKINGDIR = \"/tmp/bitcoin_verify_binaries\"\n+# The primary host; this will fail if we can't retrieve files from here.\n HOST1 = \"https://bitcoincore.org\"\n HOST2 = \"https://bitcoin.org\"\n VERSIONPREFIX = \"bitcoin-core-\"\n@@ -161,7 +164,6 @@ def parse_version_string(version_str):\n \n     return version_base, version_rc, version_os\n \n-\n def download_with_wget(remote_file, local_file=None):\n     if local_file:\n         wget_args = ['wget', '-O', local_file, remote_file]\n@@ -185,17 +187,12 @@ def download_lines_with_urllib(url) -> (bool, [str]):\n     return (False, [])\n \n \n-def files_are_equal(filename1, filename2):\n-    with open(filename1, 'rb') as file1:\n-        contents1 = file1.read()\n-    with open(filename2, 'rb') as file2:\n-        contents2 = file2.read()\n-    return contents1 == contents2\n-\n-\n-def verify_with_gpg(signature_filename):\n-    result = subprocess.run(['gpg', '--yes', '--decrypt', signature_filename],\n-                            stderr=subprocess.STDOUT, stdout=subprocess.PIPE)\n+def verify_with_gpg(signature_filename, output_filename: t.Optional[str] = None):\n+    args = ['gpg', '--yes', '--decrypt']\n+    if output_filename:\n+        args.extend(['--output', output_filename])\n+    args.append(signature_filename)\n+    result = subprocess.run(args, stderr=subprocess.STDOUT, stdout=subprocess.PIPE)\n     return result.returncode, result.stdout.decode().rstrip()\n \n \n@@ -233,7 +230,7 @@ def parse_gpg_result(output: str) -> ([SigData], [SigData], [SigData]):\n                     f\"WARNING: encountered a new sig without resolving the last ({curr_key}) - \"\n                     \"this could mean we have encountered a bad signature! check GPG output!\")\n             curr_key = line.split('key ')[-1].strip()\n-            assert len(curr_key) == 40\n+            assert len(curr_key) == 40 or (len(curr_key) == 18 and curr_key.startswith('0x'))\n \n         if \"Can't check signature: No public key\" in line:\n             if not curr_key:\n@@ -285,99 +282,106 @@ def parse_gpg_from_line(line: str) -> (str, str):\n \n     return (name, status)\n \n-def gpg_add_full_trust(key: str):\n-    \"\"\"Programmatically update a GPG key as being fully trusted (4).\"\"\"\n-    # For whatever reason, fully = 5 (and not 4) here.\n-    trust_line = f'{key}:5:'\n-    log.info(f\"Updating GPG trust db with '{trust_line}'\")\n-    ran = subprocess.run(f\"echo '{trust_line}' | gpg --import-ownertrust\", shell=True)\n-    assert ran.returncode == 0\n \n+class GetFilesResult(Enum):\n+    SUCCESS = 0\n+    GET_FAILED = 1\n+    MISSING_HOST = 2\n+    NOT_EQUAL = 3\n \n-def main(args):\n-    args = parser.parse_args()\n-    if args.verbose:\n-        log.setLevel(logging.INFO)\n \n-    # determine remote dir dependent on provided version string\n-    version_base, version_rc, os_filter = parse_version_string(args.version)\n-    remote_dir = f\"/bin/{VERSIONPREFIX}{version_base}/\"\n-    if version_rc:\n-        remote_dir += f\"test.{version_rc}/\"\n-    remote_sigfile = remote_dir + SIGNATUREFILENAME\n+def files_are_equal(filename1, filename2):\n+    with open(filename1, 'rb') as file1:\n+        contents1 = file1.read()\n+    with open(filename2, 'rb') as file2:\n+        contents2 = file2.read()\n+    eq = contents1 == contents2\n \n-    bitcoin_dir_maybe = Path(args.bitcoin_src_path) if args.bitcoin_src_path else Path.cwd()\n-    # create working directory\n-    os.makedirs(WORKINGDIR, exist_ok=True)\n-    os.chdir(WORKINGDIR)\n+    if not eq:\n+        with open(filename1, 'r', encoding='utf-8') as f1, \\\n+                open(filename2, 'r', encoding='utf-8') as f2:\n+            f1lines = f1.readlines()\n+            f2lines = f2.readlines()\n+\n+            diff = indent(\n+                ''.join(difflib.unified_diff(f1lines, f2lines)))\n+            log.warning(f\"found diff in files ({filename1}, {filename2}):\\n{diff}\\n\")\n \n-    # fetch first signature file\n-    sigfile1 = SIGNATUREFILENAME\n-    success, output = download_with_wget(HOST1 + remote_sigfile, sigfile1)\n+    return eq\n+\n+\n+def get_files_from_hosts_and_compare(\n+    hosts: t.List[str], path: str, filename: str, require_all: bool = False\n+) -> GetFilesResult:\n+    \"\"\"\n+    Retrieve the same file from a number of hosts and ensure they have the same contents.\n+    The first host given will be treated as the \"primary\" host, and is required to succeed.\n+\n+    Args:\n+        filename: for writing the file locally.\n+    \"\"\"\n+    assert len(hosts) > 1\n+    primary_host = hosts[0]\n+    other_hosts = hosts[1:]\n+    got_files = []\n+\n+    def join_url(host: str) -> str:\n+        return host.rstrip('/') + '/' + path.lstrip('/')\n+\n+    url = join_url(primary_host)\n+    success, output = download_with_wget(url, filename)\n     if not success:\n         log.error(\n-            f\"couldn't fetch signature file. \"\n+            f\"couldn't fetch file ({url}). \"\n             \"Have you specified the version number in the following format?\\n\"\n             f\"[{VERSIONPREFIX}]{VERSION_FORMAT} \"\n             f\"(example: {VERSIONPREFIX}{VERSION_EXAMPLE})\\n\"\n             f\"wget output:\\n{indent(output)}\")\n-        return 4\n+        return GetFilesResult.GET_FAILED\n+    else:\n+        log.info(f\"got file {url} as {filename}\")\n+        got_files.append(filename)\n \n-    # fetch first sums text file\n-    sumfile1 = SUMS_FILENAME\n-    success, output = download_with_wget(HOST1 + remote_dir + SUMS_FILENAME, sumfile1)\n-    if not success:\n-        log.error(\n-            f\"couldn't fetch {SUMS_FILENAME} file.\\n\"\n-            f\"wget output:\\n{indent(output)}\")\n-        return 4\n+    for i, host in enumerate(other_hosts):\n+        url = join_url(host)\n+        fname = filename + f'.{i + 2}'\n+        success, output = download_with_wget(url, fname)\n \n-    # fetch second signature file\n-    sigfile2 = SIGNATUREFILENAME + \".2\"\n-    success, output = download_with_wget(HOST2 + remote_sigfile, sigfile2)\n-    got_both = success\n-    if args.require_all_hosts and not success:\n-        log.error(\n-            f\"{HOST2} failed to provide signature file, but {HOST1} did?\\n\"\n-            f\"wget output:\\n{indent(output)}\")\n-        remove_files([sigfile1])\n-        return 5\n-    elif not success:\n-        log.warning(\n-            f\"{HOST2} failed to provide signature file. \"\n-            f\"Continuing based solely upon {HOST1}.\")\n-\n-    # fetch second sums text file\n-    sumfile2 = SUMS_FILENAME + \".2\"\n-    success, output = download_with_wget(HOST2 + remote_dir + SUMS_FILENAME, sumfile2)\n-    got_both = got_both and success\n-    if args.require_all_hosts and not success:\n-        log.error(\n-            f\"{HOST2} failed to provide {SUMS_FILENAME} file, but {HOST1} did?\\n\"\n-            f\"wget output:\\n{indent(output)}\")\n-        remove_files([sigfile1])\n-        return 5\n-    elif not success:\n-        log.warning(\n-            f\"{HOST2} failed to provide {SUMS_FILENAME} file. \"\n-            f\"Continuing based solely upon {HOST1}.\")\n-\n-    if got_both:\n-        # ensure that both signature files are equal\n-        if not files_are_equal(sigfile1, sigfile2):\n-            log.error(\n-                f\"{HOST1} and {HOST2} signature files were not equal?\\n\"\n-                f\"See files {WORKINGDIR}/{sigfile1} and {WORKINGDIR}/{sigfile2}\")\n-            return 6\n-        if not files_are_equal(sumfile1, sumfile2):\n+        if require_all and not success:\n             log.error(\n-                f\"{HOST1} and {HOST2} {SUMS_FILENAME} files were not equal?\\n\"\n-                f\"See files {WORKINGDIR}/{sumfile1} and {WORKINGDIR}/{sumfile2}\")\n-            return 8\n+                f\"{host} failed to provide file ({url}), but {primary_host} did?\\n\"\n+                f\"wget output:\\n{indent(output)}\")\n+            # TODO cleanup files\n+            # remove_files([sigfile1])\n+            return GetFilesResult.MISSING_HOST\n+        elif not success:\n+            log.warning(\n+                f\"{host} failed to provide file ({url}). \"\n+                f\"Continuing based solely upon {primary_host}.\")\n+        else:\n+            log.info(f\"got file {url} as {fname}\")\n+            got_files.append(fname)\n+\n+    for i, got_file in enumerate(got_files):\n+        if got_file == got_files[-1]:\n+            break  # break on last file, nothing after it to compare to\n+\n+        compare_to = got_files[i + 1]\n+        if not files_are_equal(got_file, compare_to):\n+            log.error(f\"files not equal: {got_file} and {compare_to}\")\n+            return GetFilesResult.NOT_EQUAL\n \n-    # get builder keys - if we have them locally, compare them to the github repo\n+    return GetFilesResult.SUCCESS\n+\n+\n+def get_builder_keys(bitcoin_dir: Path) -> t.Dict[str, str]:\n+    \"\"\"\n+    Return a map of builder key to name from a local or remote source,\n+    in that order of preference.\n+    If we have them locally, compare them to the github repo.\n+    \"\"\"\n     local_builder_keys = []\n-    local_builder_path = bitcoin_dir_maybe / 'contrib' / 'builder-keys' / 'keys.txt'\n+    local_builder_path = bitcoin_dir / 'contrib' / 'builder-keys' / 'keys.txt'\n     if local_builder_path.exists():\n         local_builder_keys = local_builder_path.read_text().splitlines()\n \n@@ -395,23 +399,26 @@ def main(args):\n                 '\\n'.join(difflib.unified_diff(local_builder_keys, gh_builder_keys)))\n             log.warning(f\"found diff (local vs. GH) in builder keys:\\n{diff}\\n\")\n \n-    builder_key_map = {}\n     # Prefer local builder keys to those obtained remotely.\n     builder_keys = local_builder_keys or gh_builder_keys or []\n \n+    builder_key_map = {}\n     for i in builder_keys:\n         key, name = i.split(' ', 1)\n         builder_key_map[key] = name\n \n-    def get_sigfiles_to_remove():\n-        return [sfile for sfile in (sigfile1, sigfile2) if Path(sfile).exists()]\n+    return builder_key_map\n+\n \n+def check_multisig(\n+    sigfilename: str, args: argparse.Namespace, builder_key_map: t.Dict[str, str]\n+):\n     # check signature\n     #\n     # We don't write output to a file because this command will almost certainly\n     # fail with GPG exit code '2' (and so not writing to --output) because of the\n     # likely presence of multiple untrusted signatures.\n-    retval, output = verify_with_gpg(sigfile1)\n+    retval, output = verify_with_gpg(sigfilename)\n \n     if args.verbose:\n         log.info(f\"gpg output:\\n{indent(output)}\")\n@@ -426,29 +433,95 @@ def get_sigfiles_to_remove():\n                 ran = subprocess.run(\n                     f\"gpg --keyserver {args.keyserver} --recv-keys {unsig.key}\", shell=True)\n \n-                # TODO: adding full trust doesn't actually fix the warnings; we need to sign\n-                # pubkeys with our key.\n-                #\n-                # if ran.returncode == 0:\n-                #     prompt = f\"  add full trust (4) to key {unsig.key} for {name}? (y/N) \"\n-                #     if input(prompt).lower() == \"y\":\n-                #         gpg_add_full_trust(unsig.key)\n                 if ran.returncode != 0:\n                     log.warning(f\"failed to retrieve key {unsig.key} for {name}\")\n \n-    # TODO: adding full trust doesn't actually fix the warnings; we need to sign\n-    # pubkeys with our key.\n-    #\n-    # good_untrusted = [sig for sig in good if not sig.trusted]\n-    # if not args.noninteractive:\n-    #     for sig in good_untrusted:\n-    #         prompt = f\"add full trust (4) to key {sig.key} for {sig.name}? (y/N) \"\n-    #         if input(prompt).lower() == \"y\":\n-    #             gpg_add_full_trust(sig.key)\n-\n-    good_expired = [sig for sig in good if sig.status == 'expired']\n-    for sig in good_expired:\n-        log.warning(f\"key {sig.key} for {sig.name} is expired\")\n+    return retval, output, good, unknown, bad\n+\n+\n+def check_single_sig(sigfilename: str, args: argparse.Namespace):\n+    retval, output = verify_with_gpg(sigfilename, SUMS_FILENAME)\n+\n+    if args.verbose:\n+        log.info(f\"gpg output:\\n{indent(output)}\")\n+\n+    good, unknown, bad = parse_gpg_result(output.splitlines())\n+\n+    return retval, output, good, unknown, bad\n+\n+\n+def main(args):\n+    args = parser.parse_args()\n+    if args.verbose:\n+        log.setLevel(logging.INFO)\n+\n+    WORKINGDIR = Path(tempfile.gettempdir()) / f\"bitcoin_verify_binaries.{args.version}\"\n+    # determine remote dir dependent on provided version string\n+    version_base, version_rc, os_filter = parse_version_string(args.version)\n+    remote_dir = f\"/bin/{VERSIONPREFIX}{version_base}/\"\n+    if version_rc:\n+        remote_dir += f\"test.{version_rc}/\"\n+    remote_sigs_path = remote_dir + SIGNATUREFILENAME\n+    remote_sums_path = remote_dir + SUMS_FILENAME\n+\n+    bitcoin_dir_maybe = Path(args.bitcoin_src_path) if args.bitcoin_src_path else Path.cwd()\n+    # create working directory\n+    os.makedirs(WORKINGDIR, exist_ok=True)\n+    os.chdir(WORKINGDIR)\n+\n+    version_tuple = [int(i) for i in version_base.split('.')]\n+    hosts = [HOST1, HOST2]\n+\n+    def code_for_getfilesresult(result: GetFilesResult) -> int:\n+        if result == GetFilesResult.GET_FAILED:\n+            return 4\n+        if result == GetFilesResult.MISSING_HOST:\n+            return 5\n+        if result == GetFilesResult.NOT_EQUAL:\n+            return 6\n+\n+    got_sig_status = get_files_from_hosts_and_compare(\n+        hosts, remote_sigs_path, SIGNATUREFILENAME, args.require_all_hosts)\n+    if got_sig_status != GetFilesResult.SUCCESS:\n+        return code_for_getfilesresult(got_sig_status)\n+\n+    # Multi-sig verification is available after 22.0.\n+    MULTISIG_SUPPORTED = version_tuple[0] >= 22\n+\n+    if MULTISIG_SUPPORTED:\n+        min_trusted_sigs = args.min_trusted_sigs\n+        gpg_allowed_codes = [0, 2]  # 2 is returned when untrusted signatures are present.\n+        builder_key_map = get_builder_keys(bitcoin_dir_maybe)\n+\n+        got_sums_status = get_files_from_hosts_and_compare(\n+            hosts, remote_sums_path, SUMS_FILENAME, args.require_all_hosts)\n+        if got_sums_status != GetFilesResult.SUCCESS:\n+            return code_for_getfilesresult(got_sig_status)\n+\n+        gpg_retval, gpg_output, good, unknown, bad = check_multisig(\n+            SIGNATUREFILENAME, args, builder_key_map)\n+    else:\n+        # As long as GPG return codes are okay, the sig is valid for pre-22.0.\n+        min_trusted_sigs = 0\n+        gpg_allowed_codes = [0]\n+        builder_key_map = {}\n+\n+        gpg_retval, gpg_output, good, unknown, bad = check_single_sig(\n+            SIGNATUREFILENAME, args)\n+\n+    if gpg_retval not in gpg_allowed_codes:\n+        if gpg_retval == 1:\n+            log.critical(\"Bad signature.\")\n+        if gpg_retval == 2:\n+            log.critical(\n+                \"gpg error. Do you have the Bitcoin Core binary release \"\n+                \"signing key installed?\")\n+        else:\n+            log.critical(\"unexpected GPG exit code\")\n+\n+        log.error(f\"gpg output:\\n{indent(gpg_output)}\")\n+        # TODO cleanup sig files\n+        return 1\n \n     # Decide which keys we trust, though not \"trust\" in the GPG sense, but rather\n     # which pubkeys convince us that this sums file is legitimate. In other words,\n@@ -460,47 +533,38 @@ def get_sigfiles_to_remove():\n     if args.trusted_keys:\n         trusted_keys |= set(args.trusted_keys.split(','))\n \n-    if retval not in [0, 2]:\n-        if retval == 1:\n-            log.error(\"Bad signature.\")\n-        else:\n-            log.error(\"unexpected GPG exit code\")\n-\n-        log.error(f\"gpg output:\\n{indent(output)}\")\n-        remove_files([*get_sigfiles_to_remove(), SUMS_FILENAME])\n-        return 1\n-\n     # Tally signatures and make sure we have enough good, trusted to fulfill\n     # our threshold.\n-    good_trusted = set()\n-    for sig in good:\n-        if sig.trusted or sig.key in trusted_keys:\n-            good_trusted.add(sig)\n-            log.info(f\"GOOD SIGNATURE: {sig}\")\n-\n+    good_trusted = {sig for sig in good if sig.trusted or sig.key in trusted_keys}\n     good_untrusted = [sig for sig in good if sig not in good_trusted]\n+    num_trusted = len(good_trusted)\n+    log.info(f\"got {num_trusted} good, trusted signatures\")\n+\n+    if num_trusted < min_trusted_sigs:\n+        log.error(\n+            \"not enough trusted sigs to meet threshold \"\n+            f\"({num_trusted} vs. {min_trusted_sigs})\")\n+        return 9\n+\n+    for sig in good_trusted:\n+        log.info(f\"GOOD SIGNATURE: {sig}\")\n+\n     for sig in good_untrusted:\n         log.info(f\"GOOD SIGNATURE (untrusted): {sig}\")\n \n+    for sig in [sig for sig in good if sig.status == 'expired']:\n+        log.warning(f\"key {sig.key} for {sig.name} is expired\")\n+\n     for sig in bad:\n         log.warning(f\"BAD SIGNATURE: {sig}\")\n \n     for sig in unknown:\n         log.warning(f\"UNKNOWN SIGNATURE: {sig}\")\n \n-    num_trusted = len(good_trusted)\n-    log.info(f\"got {num_trusted} good, trusted signatures\")\n-    if num_trusted < args.min_trusted_sigs:\n-        log.error(\n-            \"not enough trusted sigs to meet threshold \"\n-            f\"({num_trusted} vs. {args.min_trusted_sigs})\")\n-        return 9\n-\n     # extract hashes/filenames of binaries to verify from hash file;\n     # each line has the following format: \"<hash> <binary_filename>\"\n     with open(SUMS_FILENAME, 'r', encoding='utf8') as hash_file:\n-        hashes_to_verify = [\n-            line.split()[:2] for line in hash_file if os_filter in line]\n+        hashes_to_verify = [line.split()[:2] for line in hash_file if os_filter in line]\n     remove_files([SUMS_FILENAME])\n     if not hashes_to_verify:\n         log.error(\"no files matched the platform specified\")\n@@ -530,11 +594,16 @@ def get_sigfiles_to_remove():\n \n     # verify hashes\n     offending_files = []\n+    files_to_hashes = {}\n+\n     for hash_expected, binary_filename in hashes_to_verify:\n         with open(binary_filename, 'rb') as binary_file:\n             hash_calculated = sha256(binary_file.read()).hexdigest()\n         if hash_calculated != hash_expected:\n             offending_files.append(binary_filename)\n+        else:\n+            files_to_hashes[binary_filename] = hash_calculated\n+\n     if offending_files:\n         joined_files = '\\n'.join(offending_files)\n         log.critical(\n@@ -545,7 +614,7 @@ def get_sigfiles_to_remove():\n \n     if args.cleanup:\n         log.info(\"cleaning up files\")\n-        remove_files(get_sigfiles_to_remove() + verified_binaries)\n+        # TODO cleanup\n     else:\n         log.info(f\"did not clean up {WORKINGDIR}\")\n \n@@ -555,7 +624,7 @@ def get_sigfiles_to_remove():\n             'good_untrusted_sigs': [str(s) for s in good_untrusted],\n             'unknown_sigs': [str(s) for s in unknown],\n             'bad_sigs': [str(s) for s in bad],\n-            'verified_binaries': verified_binaries,\n+            'verified_binaries': files_to_hashes,\n         }\n         print(json.dumps(output, indent=2))\n     else:"
      }
    ]
  },
  {
    "sha": "9238cfb0751de0c668eb76311839d6ca1d924979",
    "node_id": "C_kwDOABII59oAKDkyMzhjZmIwNzUxZGUwYzY2OGViNzYzMTE4MzlkNmNhMWQ5MjQ5Nzk",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-09-22T22:56:55Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-09-23T00:03:16Z"
      },
      "message": "contrib: verifybinaries: use named return codes",
      "tree": {
        "sha": "ed31423e81c9ce0c22d034135cf02b78a31fe8d2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ed31423e81c9ce0c22d034135cf02b78a31fe8d2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9238cfb0751de0c668eb76311839d6ca1d924979",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEGNRVI1NPYuZCSIrGepNdrbLETwUFAmFLxEQACgkQepNdrbLE\nTwUBkQ//arg2fvw5d9rWHiYWtsaSrjOENSGe6/+L9oasvYUQojXuSAK6ETUU+fd2\n60bTTmT2bO0P2MLtWBX0aeRWj6hsukg5L738cHedlzVuAit9vVHRtlC/YLVwELny\nbTRXPi3gmJiobwvu6Krr9Lqyb/8/3f3L4SFUWg6E3PpBqeCJyJwPZC/wq7T6MFkS\nu3ut1SpUMygzc1jTtTLGXUPghcpyckKyoicIqtuYzjeUX44ndPFwJuiXFlqxlzpd\nfvllhmPRBDCucaHjtfswhEYR8TTIAxFuhts979E2OB22TlpikwHuyoxrnMdvIzsp\nPCr9VL15w027FA6rMnoUuCLayT6+UBDttgQkdg56H4aGRc0krSQu8ne3gC/MCyWz\naHpQVvkZYtspOlr8J/TZFVWRxlWMxBPA/exyvJ7IQw5edX2BxgzE/jfDC6UlJsrv\nSZ2wSSJnuxzfJXVOakODs1Lq9agpmkCpmSFu25r59Fh6wN5/G1pL7ZltI0/MdB+t\nn5HFnTw+CJc7dXFHDG4PwkfpI5sXQ9Tn7ZBAv/kv76smt9arNSRUNiTJxPtF+lKs\n6XHPJRm+jwM0ekdmzY07/2nWoQUfihu5SzmQbbvXUQZ1LDj+WoH+dgPmm8bh16PP\nAtW0B8e9gMjjbl/enGeN8qgUChIJ7lcP/0peTJaaMYHHbGdNIyA=\n=dmVn\n-----END PGP SIGNATURE-----",
        "payload": "tree ed31423e81c9ce0c22d034135cf02b78a31fe8d2\nparent 09fe45a1e88b79466202bb164e7f2534ce9eb342\nauthor James O'Beirne <james.obeirne@pm.me> 1632351415 -0400\ncommitter James O'Beirne <james.obeirne@pm.me> 1632355396 -0400\n\ncontrib: verifybinaries: use named return codes\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9238cfb0751de0c668eb76311839d6ca1d924979",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9238cfb0751de0c668eb76311839d6ca1d924979",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9238cfb0751de0c668eb76311839d6ca1d924979/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "09fe45a1e88b79466202bb164e7f2534ce9eb342",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/09fe45a1e88b79466202bb164e7f2534ce9eb342",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/09fe45a1e88b79466202bb164e7f2534ce9eb342"
      }
    ],
    "stats": {
      "total": 70,
      "additions": 35,
      "deletions": 35
    },
    "files": [
      {
        "sha": "f8c0114f0f64fa0dcf7dfbc5d1050e4eb263c07d",
        "filename": "contrib/verifybinaries/verify.py",
        "status": "modified",
        "additions": 35,
        "deletions": 35,
        "changes": 70,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9238cfb0751de0c668eb76311839d6ca1d924979/contrib/verifybinaries/verify.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9238cfb0751de0c668eb76311839d6ca1d924979/contrib/verifybinaries/verify.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verifybinaries/verify.py?ref=9238cfb0751de0c668eb76311839d6ca1d924979",
        "patch": "@@ -36,7 +36,7 @@\n import tempfile\n import textwrap\n import urllib.request\n-from enum import Enum\n+import enum\n from hashlib import sha256\n from pathlib import Path\n \n@@ -51,7 +51,18 @@\n )\n \n \n-def set_up_logger(is_verbose: bool = False) -> logging.Logger:\n+class ReturnCode(enum.IntEnum):\n+    SUCCESS = 0\n+    INTEGRITY_FAILURE = 1\n+    FILE_GET_FAILED = 4\n+    FILE_MISSING_FROM_ONE_HOST = 5\n+    FILES_NOT_EQUAL = 6\n+    NO_BINARIES_MATCH = 7\n+    NOT_ENOUGH_GOOD_SIGS = 9\n+    BINARY_DOWNLOAD_FAILED = 10\n+\n+\n+def set_up_logger(is_verbose: bool = True) -> logging.Logger:\n     \"\"\"Set up a logger that writes to stderr.\"\"\"\n     log = logging.getLogger(__name__)\n     log.setLevel(logging.INFO if is_verbose else logging.WARNING)\n@@ -87,9 +98,13 @@ def bool_from_env(key, default=False) -> bool:\n         f'{VERSION_FORMAT}. Example: {VERSION_EXAMPLE}')\n )\n parser.add_argument(\n-    '--verbose', action='store_true',\n+    '-v', '--verbose', action='store_true',\n     default=bool_from_env('BINVERIFY_VERBOSE'),\n )\n+parser.add_argument(\n+    '-q', '--quiet', action='store_true',\n+    default=bool_from_env('BINVERIFY_QUIET'),\n+)\n parser.add_argument(\n     '--cleanup', action='store_true',\n     default=bool_from_env('BINVERIFY_CLEANUP'),\n@@ -283,13 +298,6 @@ def parse_gpg_from_line(line: str) -> (str, str):\n     return (name, status)\n \n \n-class GetFilesResult(Enum):\n-    SUCCESS = 0\n-    GET_FAILED = 1\n-    MISSING_HOST = 2\n-    NOT_EQUAL = 3\n-\n-\n def files_are_equal(filename1, filename2):\n     with open(filename1, 'rb') as file1:\n         contents1 = file1.read()\n@@ -312,7 +320,7 @@ def files_are_equal(filename1, filename2):\n \n def get_files_from_hosts_and_compare(\n     hosts: t.List[str], path: str, filename: str, require_all: bool = False\n-) -> GetFilesResult:\n+) -> ReturnCode:\n     \"\"\"\n     Retrieve the same file from a number of hosts and ensure they have the same contents.\n     The first host given will be treated as the \"primary\" host, and is required to succeed.\n@@ -337,7 +345,7 @@ def join_url(host: str) -> str:\n             f\"[{VERSIONPREFIX}]{VERSION_FORMAT} \"\n             f\"(example: {VERSIONPREFIX}{VERSION_EXAMPLE})\\n\"\n             f\"wget output:\\n{indent(output)}\")\n-        return GetFilesResult.GET_FAILED\n+        return ReturnCode.FILE_GET_FAILED\n     else:\n         log.info(f\"got file {url} as {filename}\")\n         got_files.append(filename)\n@@ -353,7 +361,7 @@ def join_url(host: str) -> str:\n                 f\"wget output:\\n{indent(output)}\")\n             # TODO cleanup files\n             # remove_files([sigfile1])\n-            return GetFilesResult.MISSING_HOST\n+            return ReturnCode.FILE_MISSING_FROM_ONE_HOST\n         elif not success:\n             log.warning(\n                 f\"{host} failed to provide file ({url}). \"\n@@ -369,9 +377,9 @@ def join_url(host: str) -> str:\n         compare_to = got_files[i + 1]\n         if not files_are_equal(got_file, compare_to):\n             log.error(f\"files not equal: {got_file} and {compare_to}\")\n-            return GetFilesResult.NOT_EQUAL\n+            return ReturnCode.FILES_NOT_EQUAL\n \n-    return GetFilesResult.SUCCESS\n+    return ReturnCode.SUCCESS\n \n \n def get_builder_keys(bitcoin_dir: Path) -> t.Dict[str, str]:\n@@ -452,8 +460,8 @@ def check_single_sig(sigfilename: str, args: argparse.Namespace):\n \n def main(args):\n     args = parser.parse_args()\n-    if args.verbose:\n-        log.setLevel(logging.INFO)\n+    if args.quiet:\n+        log.setLevel(logging.WARNING)\n \n     WORKINGDIR = Path(tempfile.gettempdir()) / f\"bitcoin_verify_binaries.{args.version}\"\n     # determine remote dir dependent on provided version string\n@@ -472,18 +480,10 @@ def main(args):\n     version_tuple = [int(i) for i in version_base.split('.')]\n     hosts = [HOST1, HOST2]\n \n-    def code_for_getfilesresult(result: GetFilesResult) -> int:\n-        if result == GetFilesResult.GET_FAILED:\n-            return 4\n-        if result == GetFilesResult.MISSING_HOST:\n-            return 5\n-        if result == GetFilesResult.NOT_EQUAL:\n-            return 6\n-\n     got_sig_status = get_files_from_hosts_and_compare(\n         hosts, remote_sigs_path, SIGNATUREFILENAME, args.require_all_hosts)\n-    if got_sig_status != GetFilesResult.SUCCESS:\n-        return code_for_getfilesresult(got_sig_status)\n+    if got_sig_status != ReturnCode.SUCCESS:\n+        return got_sig_status\n \n     # Multi-sig verification is available after 22.0.\n     MULTISIG_SUPPORTED = version_tuple[0] >= 22\n@@ -495,8 +495,8 @@ def code_for_getfilesresult(result: GetFilesResult) -> int:\n \n         got_sums_status = get_files_from_hosts_and_compare(\n             hosts, remote_sums_path, SUMS_FILENAME, args.require_all_hosts)\n-        if got_sums_status != GetFilesResult.SUCCESS:\n-            return code_for_getfilesresult(got_sig_status)\n+        if got_sums_status != ReturnCode.SUCCESS:\n+            return got_sums_status\n \n         gpg_retval, gpg_output, good, unknown, bad = check_multisig(\n             SIGNATUREFILENAME, args, builder_key_map)\n@@ -521,7 +521,7 @@ def code_for_getfilesresult(result: GetFilesResult) -> int:\n \n         log.error(f\"gpg output:\\n{indent(gpg_output)}\")\n         # TODO cleanup sig files\n-        return 1\n+        return ReturnCode.INTEGRITY_FAILURE\n \n     # Decide which keys we trust, though not \"trust\" in the GPG sense, but rather\n     # which pubkeys convince us that this sums file is legitimate. In other words,\n@@ -544,7 +544,7 @@ def code_for_getfilesresult(result: GetFilesResult) -> int:\n         log.error(\n             \"not enough trusted sigs to meet threshold \"\n             f\"({num_trusted} vs. {min_trusted_sigs})\")\n-        return 9\n+        return ReturnCode.NOT_ENOUGH_GOOD_SIGS\n \n     for sig in good_trusted:\n         log.info(f\"GOOD SIGNATURE: {sig}\")\n@@ -568,7 +568,7 @@ def code_for_getfilesresult(result: GetFilesResult) -> int:\n     remove_files([SUMS_FILENAME])\n     if not hashes_to_verify:\n         log.error(\"no files matched the platform specified\")\n-        return 7\n+        return ReturnCode.NO_BINARIES_MATCH\n \n     # remove binaries that are known not to be hosted by bitcoincore.org\n     fragments_to_remove = ['-unsigned', '-debug', '-codesignatures']\n@@ -590,7 +590,7 @@ def code_for_getfilesresult(result: GetFilesResult) -> int:\n             log.error(\n                 f\"failed to download {binary_filename}\\n\"\n                 f\"wget output:\\n{indent(output)}\")\n-            return 10\n+            return ReturnCode.BINARY_DOWNLOAD_FAILED\n \n     # verify hashes\n     offending_files = []\n@@ -609,7 +609,7 @@ def code_for_getfilesresult(result: GetFilesResult) -> int:\n         log.critical(\n             \"Hashes don't match.\\n\"\n             f\"Offending files:\\n{joined_files}\")\n-        return 1\n+        return ReturnCode.INTEGRITY_FAILURE\n     verified_binaries = [entry[1] for entry in hashes_to_verify]\n \n     if args.cleanup:\n@@ -631,7 +631,7 @@ def code_for_getfilesresult(result: GetFilesResult) -> int:\n         for filename in verified_binaries:\n             print(f\"VERIFIED: {filename}\")\n \n-    return 0\n+    return ReturnCode.SUCCESS\n \n \n if __name__ == '__main__':"
      }
    ]
  },
  {
    "sha": "43c4767a71419d6e24eae25656b1a62620c42213",
    "node_id": "C_kwDOABII59oAKDQzYzQ3NjdhNzE0MTlkNmUyNGVhZTI1NjU2YjFhNjI2MjBjNDIyMTM",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-09-22T23:05:23Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-09-23T00:03:17Z"
      },
      "message": "contrib: verifybinaries: fix clenaup",
      "tree": {
        "sha": "63ed086fc08217d9dc9e48d1f3961e38fd12b055",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/63ed086fc08217d9dc9e48d1f3961e38fd12b055"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/43c4767a71419d6e24eae25656b1a62620c42213",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEGNRVI1NPYuZCSIrGepNdrbLETwUFAmFLxEUACgkQepNdrbLE\nTwWaohAAny3WGN1yNGQJbyQ6anOY4Yv7Q27I0HlrWRz4LX/ky81wKanlvOZy5NIb\n2NyKClTA1kcuiPm3ybNT8U+d+b7JTCDVsDWM9+KVl7SWy+eSXT5htHUIjI9gw1aK\ng2JibuFr/uNVO6LaVAnDamw8SPurkoZiHmnnZ1MSGEAm2ZhLSbgtfOOt3WC7vbPz\n+YQUsd69ktlCKa75uNJjR1GCaMIp7aaE3dU4Ay6SdmCGwu/NZNBZv0yNQ0/DS8HO\nZz4cIzUP6Jl9EgNCRW+rKY5he2tErOsBIdsH87CQj+hmv99eFnxey0qvLcsltgDW\nsWRwkd7heW601DPtYZ1nb/xdJNx8tHsB5taJgUEtaUawJOHsoVFyRpIeVjDT9K1s\nGs3lbjnDRggkTj50hzRWd3ImGHwAm6IxzcYzxXxiameYao8ZHCiuglVncX6V/dXg\n/CD4hNwuPri+pg5WVWIyCCdfHORrQ6UXJCVzWNR8mfDxxCdX1kWhwbyGCy4sxykG\nAAbicVrPODUx8GFCS2ySAuQA9WoxAowLos7g4QY4th9j1r6aoBBHcvP96OtPHnbG\nakEgbW69yF5xRuD6KnYKSc0ouNX7zBRCricW2Dec2ynWAFXk+Fp41q3K9M+jsz21\nAsLFXRal2vG1a7XaUSY6GQ+y425BQ2RvuLqFOrU5VxMzRx1Gu0Q=\n=MBTZ\n-----END PGP SIGNATURE-----",
        "payload": "tree 63ed086fc08217d9dc9e48d1f3961e38fd12b055\nparent 9238cfb0751de0c668eb76311839d6ca1d924979\nauthor James O'Beirne <james.obeirne@pm.me> 1632351923 -0400\ncommitter James O'Beirne <james.obeirne@pm.me> 1632355397 -0400\n\ncontrib: verifybinaries: fix clenaup\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/43c4767a71419d6e24eae25656b1a62620c42213",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/43c4767a71419d6e24eae25656b1a62620c42213",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/43c4767a71419d6e24eae25656b1a62620c42213/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9238cfb0751de0c668eb76311839d6ca1d924979",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9238cfb0751de0c668eb76311839d6ca1d924979",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9238cfb0751de0c668eb76311839d6ca1d924979"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 9,
      "deletions": 5
    },
    "files": [
      {
        "sha": "831e639f9e492f2507c38ad43d3052153e830111",
        "filename": "contrib/verifybinaries/verify.py",
        "status": "modified",
        "additions": 9,
        "deletions": 5,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/43c4767a71419d6e24eae25656b1a62620c42213/contrib/verifybinaries/verify.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/43c4767a71419d6e24eae25656b1a62620c42213/contrib/verifybinaries/verify.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verifybinaries/verify.py?ref=43c4767a71419d6e24eae25656b1a62620c42213",
        "patch": "@@ -33,6 +33,7 @@\n import typing as t\n import re\n import sys\n+import shutil\n import tempfile\n import textwrap\n import urllib.request\n@@ -359,8 +360,6 @@ def join_url(host: str) -> str:\n             log.error(\n                 f\"{host} failed to provide file ({url}), but {primary_host} did?\\n\"\n                 f\"wget output:\\n{indent(output)}\")\n-            # TODO cleanup files\n-            # remove_files([sigfile1])\n             return ReturnCode.FILE_MISSING_FROM_ONE_HOST\n         elif not success:\n             log.warning(\n@@ -464,6 +463,12 @@ def main(args):\n         log.setLevel(logging.WARNING)\n \n     WORKINGDIR = Path(tempfile.gettempdir()) / f\"bitcoin_verify_binaries.{args.version}\"\n+\n+    def cleanup():\n+        log.info(\"cleaning up files\")\n+        os.chdir(Path.home())\n+        shutil.rmtree(WORKINGDIR)\n+\n     # determine remote dir dependent on provided version string\n     version_base, version_rc, os_filter = parse_version_string(args.version)\n     remote_dir = f\"/bin/{VERSIONPREFIX}{version_base}/\"\n@@ -520,7 +525,7 @@ def main(args):\n             log.critical(\"unexpected GPG exit code\")\n \n         log.error(f\"gpg output:\\n{indent(gpg_output)}\")\n-        # TODO cleanup sig files\n+        cleanup()\n         return ReturnCode.INTEGRITY_FAILURE\n \n     # Decide which keys we trust, though not \"trust\" in the GPG sense, but rather\n@@ -613,8 +618,7 @@ def main(args):\n     verified_binaries = [entry[1] for entry in hashes_to_verify]\n \n     if args.cleanup:\n-        log.info(\"cleaning up files\")\n-        # TODO cleanup\n+        cleanup()\n     else:\n         log.info(f\"did not clean up {WORKINGDIR}\")\n "
      }
    ]
  },
  {
    "sha": "2187cfaab5c69f890e6874e15d99a0e37609700a",
    "node_id": "C_kwDOABII59oAKDIxODdjZmFhYjVjNjlmODkwZTY4NzRlMTVkOTlhMGUzNzYwOTcwMGE",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-09-22T23:06:23Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-09-23T14:38:39Z"
      },
      "message": "contrib: verifybinaries: pep8 fixes",
      "tree": {
        "sha": "404b53c9fd70ebe068241674c7b1ce8c8ebffb91",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/404b53c9fd70ebe068241674c7b1ce8c8ebffb91"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2187cfaab5c69f890e6874e15d99a0e37609700a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEGNRVI1NPYuZCSIrGepNdrbLETwUFAmFMkXQACgkQepNdrbLE\nTwW0iQ//UT0TlULonS5Q/RyWi/ETppjpgj9CREALPnx8RV1COnmImcmD71u4/Old\nVzgfnb2m2xgg1V12VlKb7gA4vTV+s1XWgC6d/B1GOe8gcXnjXl2zpCFD3tCRwbv9\njhhuldW15SrFa0vlTDvhRTaFg1nsWWpckysVeC9tNWsZ46kVuGLIouVC/z9++RbK\n5D2WTuCb71AbBVhi4SXURDoTIA4RZWynvR9tgdoiiNRQ+T/iBHokVsR19qMA2MdL\nzy0Zk1wFCGXMJ+lTTF7h8y4kOjaJV1AiHP0b4J8ZWxS1JcUex719gtLzHdbog7QO\nd8/jxIgxpCQU7nfTrTGTDVwl7rz+wKGozZHAgaNhcrEwNsrM2IM/tPUhUeB+8Qu4\ndI7JbMKXopIpLu6MIsNj/gr3+PfF43Sn+0/OWzl0merZJwDUEuxhO4E7XrLYBUW2\n+cyOqgb5UXzbdjIrK2Q6o3QM8yzaPnTYbY/h91m50LbdG+VWhHbwo0uEmhKpyK+k\nM2vu6ysjJJrptawKoibG6/FglzMDTuMAcyuVbfp+UwR6bgsnP6+8cfsfYqqASTYW\nRTbkfLS622ZsD2ahK21ZerjBwwZf96+JiJl64ZxtgdZUN5CfaS6Y0VgZPerY8wSP\n2+j9+EyAaKuMRwD8kRfzOUK0yhYO3TICmCLpMTDsM4e0RsDqVTA=\n=wKMr\n-----END PGP SIGNATURE-----",
        "payload": "tree 404b53c9fd70ebe068241674c7b1ce8c8ebffb91\nparent 43c4767a71419d6e24eae25656b1a62620c42213\nauthor James O'Beirne <james.obeirne@pm.me> 1632351983 -0400\ncommitter James O'Beirne <james.obeirne@pm.me> 1632407919 -0400\n\ncontrib: verifybinaries: pep8 fixes\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2187cfaab5c69f890e6874e15d99a0e37609700a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2187cfaab5c69f890e6874e15d99a0e37609700a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2187cfaab5c69f890e6874e15d99a0e37609700a/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "43c4767a71419d6e24eae25656b1a62620c42213",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/43c4767a71419d6e24eae25656b1a62620c42213",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/43c4767a71419d6e24eae25656b1a62620c42213"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 5,
      "deletions": 3
    },
    "files": [
      {
        "sha": "caf22dfb561bf8b05141e9fba8260f5da55dbfc6",
        "filename": "contrib/verifybinaries/verify.py",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2187cfaab5c69f890e6874e15d99a0e37609700a/contrib/verifybinaries/verify.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2187cfaab5c69f890e6874e15d99a0e37609700a/contrib/verifybinaries/verify.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verifybinaries/verify.py?ref=2187cfaab5c69f890e6874e15d99a0e37609700a",
        "patch": "@@ -161,6 +161,7 @@ def bool_from_env(key, default=False) -> bool:\n     help='If set, output the result as JSON',\n )\n \n+\n def parse_version_string(version_str):\n     if version_str.startswith(VERSIONPREFIX):  # remove version prefix\n         version_str = version_str[len(VERSIONPREFIX):]\n@@ -180,6 +181,7 @@ def parse_version_string(version_str):\n \n     return version_base, version_rc, version_os\n \n+\n def download_with_wget(remote_file, local_file=None):\n     if local_file:\n         wget_args = ['wget', '-O', local_file, remote_file]\n@@ -195,7 +197,8 @@ def download_with_wget(remote_file, local_file=None):\n def download_lines_with_urllib(url) -> (bool, [str]):\n     \"\"\"Get (success, text lines of a file) over HTTP.\"\"\"\n     try:\n-        return True, [l.strip().decode() for l in urllib.request.urlopen(url).readlines()]\n+        return True, [\n+            line.strip().decode() for line in urllib.request.urlopen(url).readlines()]\n     except urllib.request.HTTPError:\n         log.warning(f\"HTTP request to {url} failed (HTTPError)\")\n     except Exception as e:\n@@ -615,7 +618,6 @@ def cleanup():\n             \"Hashes don't match.\\n\"\n             f\"Offending files:\\n{joined_files}\")\n         return ReturnCode.INTEGRITY_FAILURE\n-    verified_binaries = [entry[1] for entry in hashes_to_verify]\n \n     if args.cleanup:\n         cleanup()\n@@ -632,7 +634,7 @@ def cleanup():\n         }\n         print(json.dumps(output, indent=2))\n     else:\n-        for filename in verified_binaries:\n+        for filename in files_to_hashes:\n             print(f\"VERIFIED: {filename}\")\n \n     return ReturnCode.SUCCESS"
      }
    ]
  },
  {
    "sha": "a2a28c958ddaf83658d99c0a14722acfbfe60aed",
    "node_id": "C_kwDOABII59oAKGEyYTI4Yzk1OGRkYWY4MzY1OGQ5OWMwYTE0NzIyYWNmYmZlNjBhZWQ",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-09-22T23:13:39Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-09-23T14:38:50Z"
      },
      "message": "contrib: verifybinaries: README update for legacy behavior",
      "tree": {
        "sha": "80471d6450faa57bc521658ba6cda96b70ed0d39",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/80471d6450faa57bc521658ba6cda96b70ed0d39"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a2a28c958ddaf83658d99c0a14722acfbfe60aed",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEGNRVI1NPYuZCSIrGepNdrbLETwUFAmFMkXoACgkQepNdrbLE\nTwWAtg/9EttmtVA1zZQ9WI3ipYgjWSWtkRgFtw19AoCKiiztIp2VCHugjM7ZrdKY\nECwx/AYlyKQa5XWgfDhp4RyuDeqmNYdlMiSDISsGB97iywTDseYjEm7AV1qE4okb\ndcP4vgqcXcNqlkeTdhSNheGWktOgfDpY5LrdEJdjP6Y0eVMaKOjgETsW5jZiYWcI\nFLuElfmj9LTiyjZ+TT/x9VGBH9rN5vRz1DydsYm22wrq4L/RSBlS9UPqrftTdT1X\nJIuYzdsTzA1F3/pIyQ4HAO6i6IzljyLJXJPoue2I/IfCu0madGaG0C+tK+TVn+CA\nB/3ZMNuYWpj1jMxvrzfcT+zYiZn9MEJYsp4Fc4bvuR7OTI7fdSh22Ud2ASQwyCSV\nbV6t2XY69SbC+hc4Sn/wh0uZOJI4QvE1veFks/1dVYJRp0tO6Shwjna+KewgTzyL\nyop8vAP9gfETxIyfRAVz2dDYdcY+cG1VrGBddE/xeYo6lhCj9aHdZVWcdVkprpGV\npnavR1s0ZHtgrAlYM4N2pefY3MCTU1KqGGjgWuZ0RyY9bDK/Ka1HYOtce8Xxcole\nIIsGYFIgLmpfKWdvUbs5Wjalx1RI7bpQdMxWuh3e3UbgtLA/KaPPT0al/iMfwbZM\nkoCzFlUnYdORl1nM+dNtiV/Z3sO/qfuIbwwK/AIxwY1TCNLxB7M=\n=zEXI\n-----END PGP SIGNATURE-----",
        "payload": "tree 80471d6450faa57bc521658ba6cda96b70ed0d39\nparent 2187cfaab5c69f890e6874e15d99a0e37609700a\nauthor James O'Beirne <james.obeirne@pm.me> 1632352419 -0400\ncommitter James O'Beirne <james.obeirne@pm.me> 1632407930 -0400\n\ncontrib: verifybinaries: README update for legacy behavior\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a2a28c958ddaf83658d99c0a14722acfbfe60aed",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a2a28c958ddaf83658d99c0a14722acfbfe60aed",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a2a28c958ddaf83658d99c0a14722acfbfe60aed/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2187cfaab5c69f890e6874e15d99a0e37609700a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2187cfaab5c69f890e6874e15d99a0e37609700a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2187cfaab5c69f890e6874e15d99a0e37609700a"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 13,
      "deletions": 7
    },
    "files": [
      {
        "sha": "3f344a9b1a41da10f65c5305d7916a9aa49b8e6e",
        "filename": "contrib/verifybinaries/README.md",
        "status": "modified",
        "additions": 13,
        "deletions": 7,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a2a28c958ddaf83658d99c0a14722acfbfe60aed/contrib/verifybinaries/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a2a28c958ddaf83658d99c0a14722acfbfe60aed/contrib/verifybinaries/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verifybinaries/README.md?ref=a2a28c958ddaf83658d99c0a14722acfbfe60aed",
        "patch": "@@ -2,12 +2,12 @@\n \n #### Preparation\n \n-Bitcoin releases are signed by a number of public keys on the basis of the [guix.sigs\n-repository](https://github.com/bitcoin-core/guix.sigs/). When verifying binary\n-downloads, you (the end user) decide which of these public keys you trust and then use\n-that trust model to evaluate the signature on a file that contains hashes of the\n-release binaries. The downloaded binaries are then hashed and compared to the signed\n-checksum file.\n+As of Bitcoin Core v22.0, releases are signed by a number of public keys on the basis\n+of the [guix.sigs repository](https://github.com/bitcoin-core/guix.sigs/). When\n+verifying binary downloads, you (the end user) decide which of these public keys you\n+trust and then use that trust model to evaluate the signature on a file that contains\n+hashes of the release binaries. The downloaded binaries are then hashed and compared to\n+the signed checksum file.\n \n First, you have to figure out which public keys to recognize. Browse the [list of frequent\n builder-keys](https://github.com/bitcoin/bitcoin/tree/master/contrib/builder-keys) and\n@@ -21,10 +21,16 @@ You can obtain these keys by\n   - (easiest) you can run the packaged `verifybinaries.py` script to have it automatically\n     retrieve unrecognized keys.\n \n-Historially, the lead maintainer Wladimir J. van der Laan has provided the sole signing\n+#### Legacy verification\n+\n+Historically, the lead maintainer Wladimir J. van der Laan has provided the sole signing\n key for releases, but since 22.0 Bitcoin release sum files are signed as described\n above using a plurality of keys.\n \n+Legacy verification is preserved for releases before v22.0; namely, GPG verification for\n+a checksum file based solely on a valid signature by the old release key\n+(`0x90C8019E36C2E964`).\n+\n #### Usage\n \n This script attempts to download the checksum file (`SHA256SUMS`) and corresponding"
      }
    ]
  },
  {
    "sha": "76130ce387014e2cee8ff48d867c527a7a95bd2e",
    "node_id": "C_kwDOABII59oAKDc2MTMwY2UzODcwMTRlMmNlZThmZjQ4ZDg2N2M1MjdhN2E5NWJkMmU",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-09-22T23:14:13Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-09-23T14:38:51Z"
      },
      "message": "contrib: verifybinaries: add basic functional tests",
      "tree": {
        "sha": "fe0ee9f06588c34cd927198c0f9132fc66b2ee20",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fe0ee9f06588c34cd927198c0f9132fc66b2ee20"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/76130ce387014e2cee8ff48d867c527a7a95bd2e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEGNRVI1NPYuZCSIrGepNdrbLETwUFAmFMkXsACgkQepNdrbLE\nTwXPYw//STLGsLSTTStIvvs5L/rMzpp3fxctCJoAEXeNPgfaB1zAaoFqOd2X0QOC\nynLA5WsD19aqvZZeDdmcgoruGdkQdyaNaAj0bZe6HcaiKsDvDGrxifKb0okzdoTX\n2jDVH8A83Ub45rBi4jmu9bPd26YWdPR/rzXq5psjuGukvx+eRmxcZ2LqZ53eHJqC\nIr+GndKThF/tG2eG5i6vLl4ZEEyRuWHW2KhP+u/7S25rMF7yk7gNYHOlhW1s61Vo\nX9NEtHE4TYFvjD/Mr4+vMPha4jgBZbyfsVJEyXLOTMbDqQWswYhoaeaB0hHesbuD\nZ2a17MEr640xNqQXQnKA+AGODp4JJWaCv5JmTajA1OKccJ8vT5KTNdxR/U+wfRNk\nOwCyVTBUeNHmsZcGH+OEDDMMKyJ3Av02da1VOVrt2IUvwBaCjcBaG8s1hN5kEpW2\nE9AEmn4DterhOz/h8eKL8bHlct6NF6OcGMemHPNzoVxl9814AFLPUdscRusvHbSO\nTGSUhgX/5Z7w9AyQgZBiXhMK724oH24kaHnN6JR2PWBp9lVojvLgm03KYD+TgJtF\nmaaJ0QCu3XF9A7xWNdGPJV0p9VpAfomL/mDftZ7WqPKsm8Nr24W4Qkjb99bQ/4YX\nv5PEw7TS9W42Quab20zT/CMa9gR6G2VJvBP8MKZTQyQItLgqsPY=\n=h1KX\n-----END PGP SIGNATURE-----",
        "payload": "tree fe0ee9f06588c34cd927198c0f9132fc66b2ee20\nparent a2a28c958ddaf83658d99c0a14722acfbfe60aed\nauthor James O'Beirne <james.obeirne@pm.me> 1632352453 -0400\ncommitter James O'Beirne <james.obeirne@pm.me> 1632407931 -0400\n\ncontrib: verifybinaries: add basic functional tests\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/76130ce387014e2cee8ff48d867c527a7a95bd2e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/76130ce387014e2cee8ff48d867c527a7a95bd2e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/76130ce387014e2cee8ff48d867c527a7a95bd2e/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a2a28c958ddaf83658d99c0a14722acfbfe60aed",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a2a28c958ddaf83658d99c0a14722acfbfe60aed",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a2a28c958ddaf83658d99c0a14722acfbfe60aed"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 39,
      "deletions": 0
    },
    "files": [
      {
        "sha": "9d1ebf27225ae761410113ad176efbcc9bd7805c",
        "filename": "contrib/verifybinaries/test.sh",
        "status": "added",
        "additions": 39,
        "deletions": 0,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76130ce387014e2cee8ff48d867c527a7a95bd2e/contrib/verifybinaries/test.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76130ce387014e2cee8ff48d867c527a7a95bd2e/contrib/verifybinaries/test.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verifybinaries/test.sh?ref=76130ce387014e2cee8ff48d867c527a7a95bd2e",
        "patch": "@@ -0,0 +1,39 @@\n+#!/usr/bin/env bash\n+export LC_ALL=C\n+set -e\n+\n+die() {\n+  echo \"FAILED: $1\"\n+  exit 1\n+}\n+\n+COMMAND=\"${1:-./contrib/verifybinaries/verify.py} --noninteractive --cleanup\"\n+\n+# Ordered roughly from faster to slower\n+\n+(! ${COMMAND} 0.22) \\\n+  || die \"Nonexistent version shouldn't succeed.\"\n+(! ${COMMAND} --require-all-hosts 22.0) \\\n+  || die \"Test require-all-hosts since bitcoin.org doesn't have the 22.0 files\"\n+(! ${COMMAND} 22.0 --min-trusted-sigs 20) \\\n+  || die \"--min-trusted-sigs 20 should fail\"\n+\n+JSON_22=$(${COMMAND} 22.0 --json)\n+RET=$?\n+if [ $RET -ne 0 ]; then\n+  die \"22.0 should succeed.\"\n+fi\n+\n+( echo ${JSON_22} | jq '.verified_binaries.\"bitcoin-22.0.tar.gz\"' \\\n+  | grep d0e9d089b57048b1555efa7cd5a63a7ed042482045f6f33402b1df425bf9613b ) \\\n+    || die \"22.0 hash mismatch\"\n+\n+( echo ${JSON_22} | jq '.verified_binaries.\"bitcoin-22.0-osx64.tar.gz\"' \\\n+  | grep 2744d199c3343b2d94faffdfb2c94d75a630ba27301a70e47b0ad30a7e0155e9 ) \\\n+    || die \"22.0 osx64 hash mismatch\"\n+\n+( echo ${JSON_22} | jq '.verified_binaries.\"bitcoin-22.0-x86_64-linux-gnu.tar.gz\"' \\\n+  | grep 59ebd25dd82a51638b7a6bb914586201e67db67b919b2a1ff08925a7936d1b16 ) \\\n+    || die \"22.0 linux-gnu hash mismatch\"\n+\n+(${COMMAND} 0.20.0) || die \"0.20.0 should succeed.\""
      }
    ]
  },
  {
    "sha": "a92ec88cbc6e153eabf5e809d8960454488cc391",
    "node_id": "C_kwDOABII59oAKGE5MmVjODhjYmM2ZTE1M2VhYmY1ZTgwOWQ4OTYwNDU0NDg4Y2MzOTE",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-10-14T17:33:54Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-10-14T17:33:54Z"
      },
      "message": "contrib: verifybinaries: enforce english output from gpg\n\nSince we're parsing gpg stdout text, standardize on English output.",
      "tree": {
        "sha": "75b31fab9eec74db8662a218bda8cd7b20362482",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/75b31fab9eec74db8662a218bda8cd7b20362482"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a92ec88cbc6e153eabf5e809d8960454488cc391",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEGNRVI1NPYuZCSIrGepNdrbLETwUFAmFoaisACgkQepNdrbLE\nTwXZRQ//ebLSwTOK5lJndPlKWaN2XqyZmVqWvnJXNFPEDgUhIHsrr15p5KJAK9UU\nKfHjXN7Ke4y/T4eRa9cNceYM9LxfzAqXEQgHBd2u5qUoLctDFR2HGIcDClNsVL1R\nGxpMCWf22K/YMWsIWtXyriKvNvXZsXQPAKCC5pepx3ARi3oA7wxz9TXM5IhMIcTS\n3yOJFyTsU+A0RSNTSbQ0vlaZcCDPuBD+kH921+RGXIPrhr42jKeg1/F0lViiQr1m\nd71yi1YHxU3Vcs/CyJjmw/3VEB92w053jOA1gBCMzrrmhRkHBEHtjU3tIh+vlQ9E\nCxLyQ0wiLKU6YyPOmWDUExaLpu1XP+brvYxF+5L4ccH8UJ85YZtA15wxovst4Nls\nXdyyWu7733Vda+q1x6XwrwuACy+1z/bxwVnMc6EsKau+Lt/8lhrSD5MACME9i7P7\nzdSYkYkrqlIaBR/l5YQOepfKD0u1YeoR/bm6CMwE+MlDVOw6n7uNkrVUS6XtN2rT\nrvA30ScnqsNAQ/p/jYSAfVoXlOAGMdKeRkOE6RgOPlkaJ8ivUp/m2RIntVdM4EjH\nrjdYgaFEgx/IB/jqjG1mrsJzXFuRwWgD3Sq8Z8Za6IHS9xyoRiKDBa2DGNOTCPHr\n/5yGgTSk4QY9snRIrMgGXyOMVSHcaD3gwdLp7DKmeCIUNqrZGJY=\n=6wDK\n-----END PGP SIGNATURE-----",
        "payload": "tree 75b31fab9eec74db8662a218bda8cd7b20362482\nparent 76130ce387014e2cee8ff48d867c527a7a95bd2e\nauthor James O'Beirne <james.obeirne@pm.me> 1634232834 -0400\ncommitter James O'Beirne <james.obeirne@pm.me> 1634232834 -0400\n\ncontrib: verifybinaries: enforce english output from gpg\n\nSince we're parsing gpg stdout text, standardize on English output.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a92ec88cbc6e153eabf5e809d8960454488cc391",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a92ec88cbc6e153eabf5e809d8960454488cc391",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a92ec88cbc6e153eabf5e809d8960454488cc391/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "76130ce387014e2cee8ff48d867c527a7a95bd2e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/76130ce387014e2cee8ff48d867c527a7a95bd2e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/76130ce387014e2cee8ff48d867c527a7a95bd2e"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 13,
      "deletions": 6
    },
    "files": [
      {
        "sha": "ed3f303d2a9c220941ba69590e7763c23ac43326",
        "filename": "contrib/verifybinaries/verify.py",
        "status": "modified",
        "additions": 13,
        "deletions": 6,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a92ec88cbc6e153eabf5e809d8960454488cc391/contrib/verifybinaries/verify.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a92ec88cbc6e153eabf5e809d8960454488cc391/contrib/verifybinaries/verify.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verifybinaries/verify.py?ref=a92ec88cbc6e153eabf5e809d8960454488cc391",
        "patch": "@@ -206,12 +206,19 @@ def download_lines_with_urllib(url) -> (bool, [str]):\n     return (False, [])\n \n \n-def verify_with_gpg(signature_filename, output_filename: t.Optional[str] = None):\n-    args = ['gpg', '--yes', '--decrypt']\n-    if output_filename:\n-        args.extend(['--output', output_filename])\n-    args.append(signature_filename)\n-    result = subprocess.run(args, stderr=subprocess.STDOUT, stdout=subprocess.PIPE)\n+def verify_with_gpg(\n+    signature_filename,\n+    output_filename: t.Optional[str] = None\n+) -> t.Tuple[int, str]:\n+    # Enforce English output since we're relying on output that contains natural language.\n+    # Use string-shell form (vs. args as list) because passing LANGUAGE via `env` doesn't\n+    # seem to work.\n+    args = (\n+        'LANGUAGE=en gpg --yes --decrypt '\n+        + (f' --output {output_filename} ' if output_filename else '')\n+        + signature_filename)\n+\n+    result = subprocess.run(args, shell=True, stderr=subprocess.STDOUT, stdout=subprocess.PIPE)\n     return result.returncode, result.stdout.decode().rstrip()\n \n "
      }
    ]
  }
]