[
  {
    "sha": "35b8af92265ed74de63c3818e5290c27b3f35df2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNWI4YWY5MjI2NWVkNzRkZTYzYzM4MThlNTI5MGMyN2IzZjM1ZGYy",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "theuni-nospam-@xbmc.org",
        "date": "2013-05-27T23:55:01Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "theuni-nospam-@xbmc.org",
        "date": "2013-09-06T01:31:03Z"
      },
      "message": "autotools: switch to autotools buildsystem",
      "tree": {
        "sha": "7cd074e2ba31ca9346d69922e312ebd3e7298711",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7cd074e2ba31ca9346d69922e312ebd3e7298711"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/35b8af92265ed74de63c3818e5290c27b3f35df2",
      "comment_count": 1,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/35b8af92265ed74de63c3818e5290c27b3f35df2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/35b8af92265ed74de63c3818e5290c27b3f35df2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/35b8af92265ed74de63c3818e5290c27b3f35df2/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "2fee100f036626866e5dca3f27b7562da25e43f3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2fee100f036626866e5dca3f27b7562da25e43f3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2fee100f036626866e5dca3f27b7562da25e43f3"
      }
    ],
    "stats": {
      "total": 5035,
      "additions": 3527,
      "deletions": 1508
    },
    "files": [
      {
        "sha": "069125d02fcaec81ad218b3e20c582972b2f062a",
        "filename": ".gitignore",
        "status": "modified",
        "additions": 61,
        "deletions": 1,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/35b8af92265ed74de63c3818e5290c27b3f35df2/.gitignore",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/35b8af92265ed74de63c3818e5290c27b3f35df2/.gitignore",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.gitignore?ref=35b8af92265ed74de63c3818e5290c27b3f35df2",
        "patch": "@@ -1,7 +1,46 @@\n+*.tar.gz\n+\n+*.exe\n src/*.exe\n+src/*/*.exe\n src/bitcoin\n src/bitcoind\n-src/test_bitcoin\n+src/test/test_bitcoin\n+src/qt/test/test_bitcoin-qt\n+\n+Makefile.in\n+aclocal.m4\n+autom4te.cache/\n+config.log\n+config.status\n+configure\n+src/.deps/\n+src/Makefile.in\n+src/bitcoin-config.h\n+src/bitcoin-config.h.in\n+src/build-aux/\n+src/qt/Makefile.in\n+src/stamp-h1\n+share/setup.nsi\n+share/qt/Info.plist\n+\n+src/leveldb/.deps/\n+\n+src/test/.deps\n+src/test/.dirstamp\n+\n+src/qt/.deps/\n+src/qt/.dirstamp\n+src/qt/*.moc\n+src/qt/moc_*.cpp\n+src/qt/forms/ui_*.h\n+\n+src/qt/test/.deps/\n+src/qt/test/.dirstamp\n+src/qt/test/moc*.cpp\n+src/qt/res/.deps/\n+src/qt/res/.dirstamp\n+\n .*.swp\n *.*~*\n *.bak\n@@ -10,6 +49,13 @@ src/test_bitcoin\n *.o\n *.patch\n .bitcoin\n+*.a\n+*.pb.cc\n+*.pb.h\n+\n+*.log\n+*.trs\n+*.dmg\n \n # Compilation and Qt preprocessor part\n *.qm\n@@ -31,4 +77,18 @@ qrc_*.cpp\n .DS_Store\n build\n \n+#lcov\n+*.gcno\n+/*.info\n+test_bitcoin.coverage/\n+total.coverage/\n+coverage_percent.txt\n+\n+#build tests\n+linux-coverage-build\n+linux-build\n+win32-build\n+qa/pull-tester/run-bitcoind-for-test.sh\n+qa/pull-tester/build-tests.sh\n+\n !src/leveldb-*/Makefile"
      },
      {
        "sha": "b4ea94ad62d9496f75f2f14a1ae6d0f4ce6813b0",
        "filename": "Makefile.am",
        "status": "added",
        "additions": 159,
        "deletions": 0,
        "changes": 159,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/35b8af92265ed74de63c3818e5290c27b3f35df2/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/35b8af92265ed74de63c3818e5290c27b3f35df2/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=35b8af92265ed74de63c3818e5290c27b3f35df2",
        "patch": "@@ -0,0 +1,159 @@\n+ACLOCAL_AMFLAGS = -I src/m4\n+SUBDIRS = src\n+.PHONY: deploy\n+\n+GZIP_ENV=\"-9n\"\n+\n+BITCOIND_BIN=$(top_builddir)/src/bitcoind$(EXEEXT)\n+BITCOIN_QT_BIN=$(top_builddir)/src/qt/bitcoin-qt$(EXEEXT)\n+BITCOIN_WIN_INSTALLER=$(PACKAGE)-$(PACKAGE_VERSION)-win32-setup$(EXEEXT)\n+\n+OSX_APP=Bitcoin-Qt.app\n+OSX_DMG=Bitcoin-Qt.dmg\n+OSX_DEPLOY_SCRIPT=$(top_srcdir)/contrib/macdeploy/macdeployqtplus\n+OSX_FANCY_PLIST=$(top_srcdir)/contrib/macdeploy/fancy.plist\n+OSX_INSTALLER_ICONS=$(top_srcdir)/src/qt/res/icons/bitcoin.icns\n+OSX_PLIST=$(top_srcdir)/share/qt/Info.plist #not installed\n+\n+WINDOWS_PACKAGING = $(top_srcdir)/share/pixmaps/bitcoin.ico \\\n+  $(top_srcdir)/share/pixmaps/nsis-header.bmp \\\n+  $(top_srcdir)/share/pixmaps/nsis-wizard.bmp \\\n+  $(top_srcdir)/doc/README_windows.txt\n+\n+OSX_PACKAGING = $(OSX_DEPLOY_SCRIPT) $(OSX_FANCY_PLIST) $(OSX_INSTALLER_ICONS) \\\n+  $(top_srcdir)/contrib/macdeploy/background.png\n+\n+COVERAGE_INFO = baseline_filtered_combined.info baseline.info block_test.info \\\n+  leveldb_baseline.info test_bitcoin_filtered.info total_coverage.info \\\n+  baseline_filtered.info block_test_filtered.info \\\n+  leveldb_baseline_filtered.info test_bitcoin_coverage.info test_bitcoin.info\n+\n+dist-hook:\n+\t-$(MAKE) -C $(top_distdir)/src/leveldb clean\n+\t-$(GIT) archive --format=tar HEAD -- src/version.cpp | $(AMTAR) -C $(top_distdir) -xf -\n+\n+distcheck-hook:\n+\t$(MKDIR_P) $(top_distdir)/_build/src/leveldb\n+\tcp -rf $(top_srcdir)/src/leveldb/* $(top_distdir)/_build/src/leveldb/\n+\t-$(MAKE) -C $(top_distdir)/_build/src/leveldb clean\n+\n+distcleancheck:\n+\t@:\n+\n+$(BITCOIN_WIN_INSTALLER): $(BITCOIND_BIN) $(BITCOIN_QT_BIN)\n+\t$(MAKE) distdir\n+\t$(MKDIR_P) $(top_builddir)/release\n+\t$(INSTALL_STRIP_PROGRAM) $(top_builddir)/src/bitcoind$(EXEEXT) $(top_builddir)/release\n+\t$(INSTALL_STRIP_PROGRAM) $(top_builddir)/src/qt/bitcoin-qt$(EXEEXT) $(top_builddir)/release\n+\t@test -f $(MAKENSIS) && $(MAKENSIS) $(top_builddir)/share/setup.nsi || \\\n+\t  echo error: could not build $@\n+\n+$(BITCOIND_BIN):\n+\tmake -C $(top_srcdir)/src bitcoind$(EXEEXT)\n+\n+$(BITCOIN_QT_BIN):\n+\tmake -C $(top_srcdir)/src/qt bitcoin-qt$(EXEEXT)\n+\n+\n+$(OSX_APP)/Contents/PkgInfo:\n+\t$(MKDIR_P) $(@D)\n+\t@echo \"APPL????\" > $@\n+\n+$(OSX_APP)/Contents/Resources/empty.lproj:\n+\t$(MKDIR_P) $(@D)\n+\t@touch $@\n+\n+$(OSX_APP)/Contents/Info.plist: $(OSX_PLIST)\n+\t$(MKDIR_P) $(@D)\n+\t$(INSTALL) $< $@\n+\n+$(OSX_APP)/Contents/Resources/bitcoin.icns: $(OSX_INSTALLER_ICONS)\n+\t$(MKDIR_P) $(@D)\n+\t$(INSTALL) $< $@\n+\n+$(OSX_APP)/Contents/MacOS/Bitcoin-Qt: $(BITCOIN_QT_BIN)\n+\t$(MKDIR_P) $(@D)\n+\t$(INSTALL_STRIP_PROGRAM)  $< $@\n+\n+OSX_APP_BUILT=$(OSX_APP)/Contents/PkgInfo $(OSX_APP)/Contents/Resources/empty.lproj \\\n+  $(OSX_APP)/Contents/Resources/bitcoin.icns $(OSX_APP)/Contents/Info.plist \\\n+  $(OSX_APP)/Contents/MacOS/Bitcoin-Qt\n+\n+$(OSX_DMG): $(OSX_APP_BUILT) $(OSX_PACKAGING)\n+\t$(OSX_DEPLOY_SCRIPT) $(OSX_APP) -add-qt-tr da,de,es,hu,ru,uk,zh_CN,zh_TW -dmg -fancy $(OSX_FANCY_PLIST) -verbose 2\n+\trm -rf $(OSX_APP)\n+\n+\n+if TARGET_DARWIN\n+deploy: $(OSX_DMG)\n+endif\n+if TARGET_WINDOWS\n+deploy: $(BITCOIN_WIN_INSTALLER)\n+endif\n+\n+if USE_LCOV\n+\n+baseline.info:\n+\t$(LCOV) -c -i -d $(abs_builddir)/src -o $@\n+\n+baseline_filtered.info: baseline.info\n+\t$(LCOV) -r $< \"/usr/include/*\" -o $@\n+\n+leveldb_baseline.info: baseline_filtered.info\n+\t$(LCOV) -c -i -d $(abs_builddir)/src/leveldb -b $(abs_builddir)/src/leveldb -o $@\n+\n+leveldb_baseline_filtered.info: leveldb_baseline.info\n+\t$(LCOV) -r $< \"/usr/include/*\" -o $@\n+\n+baseline_filtered_combined.info: leveldb_baseline_filtered.info baseline_filtered.info\n+\t$(LCOV) -a leveldb_baseline_filtered.info -a baseline_filtered.info -o $@\n+\n+test_bitcoin.info: baseline_filtered_combined.info\n+\t$(MAKE) -C src/ check\n+\t$(LCOV) -c -d $(abs_builddir)/src -t test_bitcoin -o $@\n+\t$(LCOV) -z -d $(abs_builddir)/src\n+\t$(LCOV) -z -d $(abs_builddir)/src/leveldb\n+\n+test_bitcoin_filtered.info: test_bitcoin.info\n+\t$(LCOV) -r $< \"/usr/include/*\" -o $@\n+\n+block_test.info: test_bitcoin_filtered.info\n+\t-@TIMEOUT=15 qa/pull-tester/run-bitcoind-for-test.sh $(JAVA) -Xmx2G -jar $(JAVA_COMPARISON_TOOL) 1 18444\n+\t$(LCOV) -c -d $(abs_builddir)/src --t BitcoinJBlockTest -o $@\n+\t$(LCOV) -z -d $(abs_builddir)/src\n+\t$(LCOV) -z -d $(abs_builddir)/src/leveldb\n+\n+block_test_filtered.info: block_test.info\n+\t$(LCOV) -r $< \"/usr/include/*\" -o $@\n+\n+test_bitcoin_coverage.info: baseline_filtered_combined.info test_bitcoin_filtered.info\n+\t$(LCOV) -a baseline_filtered.info -a leveldb_baseline_filtered.info -a test_bitcoin_filtered.info -o $@\n+\n+total_coverage.info:  baseline_filtered_combined.info test_bitcoin_filtered.info block_test_filtered.info\n+\t$(LCOV) -a baseline_filtered.info -a leveldb_baseline_filtered.info -a test_bitcoin_filtered.info -a block_test_filtered.info -o $@ | $(GREP) \"\\%\" | $(AWK) '{ print substr($$3,2,50) \"/\" $$5 }' > coverage_percent.txt\n+\n+test_bitcoin.coverage/.dirstamp:  test_bitcoin_coverage.info\n+\t$(GENHTML) -s $< -o $(@D)\n+\t@touch $@\n+\n+total.coverage/.dirstamp: total_coverage.info\n+\t$(GENHTML) -s $< -o $(@D)\n+\t@touch $@\n+\n+cov: test_bitcoin.coverage/.dirstamp total.coverage/.dirstamp\n+\n+endif\n+\n+if USE_COMPARISON_TOOL\n+check-local:\n+\t@qa/pull-tester/run-bitcoind-for-test.sh $(JAVA) -Xmx2G -jar $(JAVA_COMPARISON_TOOL) 1 18444\n+endif\n+\n+EXTRA_DIST = $(top_srcdir)/share/genbuild.sh qa/pull-tester/pull-tester.sh $(WINDOWS_PACKAGING) $(OSX_PACKAGING)\n+\n+CLEANFILES = $(OSX_DMG) $(BITCOIN_WIN_INSTALLER)\n+\n+.INTERMEDIATE: $(OSX_APP_BUILT) $(COVERAGE_INFO)\n+\n+clean-local:\n+\trm -rf test_bitcoin.coverage/ total.coverage/"
      },
      {
        "sha": "0ac3222328493ba4cb5d4eefe1b0a1bdbae6fd0d",
        "filename": "README.md",
        "status": "modified",
        "additions": 2,
        "deletions": 9,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/35b8af92265ed74de63c3818e5290c27b3f35df2/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/35b8af92265ed74de63c3818e5290c27b3f35df2/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/README.md?ref=35b8af92265ed74de63c3818e5290c27b3f35df2",
        "patch": "@@ -58,15 +58,8 @@ lots of money.\n Developers are strongly encouraged to write unit tests for new code, and to\n submit new unit tests for old code.\n \n-Unit tests for the core code are in `src/test/`. To compile and run them:\n-\n-    cd src; make -f makefile.unix test\n-\n-Unit tests for the GUI code are in `src/qt/test/`. To compile and run them:\n-\n-    qmake BITCOIN_QT_TEST=1 -o Makefile.test bitcoin-qt.pro\n-    make -f Makefile.test\n-    ./bitcoin-qt_test\n+Unit tests can be compiled and run (assuming they weren't disabled in configure) with:\n+  make check\n \n Every pull request is built for both Windows and Linux on a dedicated server,\n and unit and sanity tests are automatically run. The binaries produced may be"
      },
      {
        "sha": "4e7011a59658c80bd81d28ea744da0e4405181e6",
        "filename": "autogen.sh",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/35b8af92265ed74de63c3818e5290c27b3f35df2/autogen.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/35b8af92265ed74de63c3818e5290c27b3f35df2/autogen.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/autogen.sh?ref=35b8af92265ed74de63c3818e5290c27b3f35df2",
        "patch": "@@ -0,0 +1 @@\n+autoreconf -vif"
      },
      {
        "sha": "00dd02da58d8ca9761b50e976077eac1252ac504",
        "filename": "bitcoin-qt.pro",
        "status": "removed",
        "additions": 0,
        "deletions": 453,
        "changes": 453,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2fee100f036626866e5dca3f27b7562da25e43f3/bitcoin-qt.pro",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2fee100f036626866e5dca3f27b7562da25e43f3/bitcoin-qt.pro",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/bitcoin-qt.pro?ref=2fee100f036626866e5dca3f27b7562da25e43f3",
        "patch": "@@ -1,453 +0,0 @@\n-TEMPLATE = app\n-TARGET = bitcoin-qt\n-macx:TARGET = \"Bitcoin-Qt\"\n-VERSION = 0.8.2\n-INCLUDEPATH += src src/json src/qt\n-QT += core gui network\n-greaterThan(QT_MAJOR_VERSION, 4): QT += widgets\n-DEFINES += BOOST_THREAD_USE_LIB BOOST_SPIRIT_THREADSAFE\n-CONFIG += no_include_pwd\n-CONFIG += thread\n-\n-# for boost 1.37, add -mt to the boost libraries\n-# use: qmake BOOST_LIB_SUFFIX=-mt\n-# for boost thread win32 with _win32 sufix\n-# use: BOOST_THREAD_LIB_SUFFIX=_win32-...\n-# or when linking against a specific BerkelyDB version: BDB_LIB_SUFFIX=-4.8\n-\n-# Dependency library locations can be customized with:\n-#    BOOST_INCLUDE_PATH BOOST_LIB_PATH,\n-#    BDB_INCLUDE_PATH BDB_LIB_PATH,\n-#    OPENSSL_INCLUDE_PATH OPENSSL_LIB_PATH\n-#    PROTOBUF_INCLUDE_PATH PROTOBUF_LIB_PATH\n-#    PROTOC : protocol buffer compiler tool\n-\n-OBJECTS_DIR = build\n-MOC_DIR = build\n-UI_DIR = build\n-PROTO_DIR = build\n-PROTO_PATH = src/qt\n-\n-contains(BITCOIN_QT_TEST, 1) {\n-OBJECTS_DIR = build_test\n-MOC_DIR = build_test\n-UI_DIR = build_test\n-PROTO_DIR = build_test\n-\n-SOURCES += src/qt/test/test_main.cpp \\\n-    src/qt/test/uritests.cpp \\\n-    src/qt/test/paymentservertests.cpp\n-HEADERS += src/qt/test/uritests.h \\\n-    src/qt/test/paymentservertests.h\n-DEPENDPATH += src/qt/test\n-QT += testlib\n-TARGET = bitcoin-qt_test\n-DEFINES += BITCOIN_QT_TEST\n-macx: CONFIG -= app_bundle\n-}\n-\n-# use: qmake \"RELEASE=1\"\n-contains(RELEASE, 1) {\n-    # Mac: compile for maximum compatibility (10.5, 32-bit)\n-    macx:QMAKE_CXXFLAGS += -mmacosx-version-min=10.5 -arch i386 -isysroot /Developer/SDKs/MacOSX10.5.sdk\n-    macx:QMAKE_CFLAGS += -mmacosx-version-min=10.5 -arch i386 -isysroot /Developer/SDKs/MacOSX10.5.sdk\n-    macx:QMAKE_OBJECTIVE_CFLAGS += -mmacosx-version-min=10.5 -arch i386 -isysroot /Developer/SDKs/MacOSX10.5.sdk\n-\n-    !win32:!macx {\n-        # Linux: static link and extra security (see: https://wiki.debian.org/Hardening)\n-        LIBS += -Wl,-Bstatic -Wl,-z,relro -Wl,-z,now\n-    }\n-}\n-\n-!win32 {\n-    # for extra security against potential buffer overflows: enable GCCs Stack Smashing Protection\n-    QMAKE_CXXFLAGS *= -fstack-protector-all\n-    QMAKE_LFLAGS *= -fstack-protector-all\n-    # Exclude on Windows cross compile with MinGW 4.2.x, as it will result in a non-working executable!\n-    # This can be enabled for Windows, when we switch to MinGW >= 4.4.x.\n-}\n-# for extra security (see: https://wiki.debian.org/Hardening): this flag is GCC compiler-specific\n-QMAKE_CXXFLAGS *= -D_FORTIFY_SOURCE=2\n-# for extra security on Windows: enable ASLR and DEP via GCC linker flags\n-win32:QMAKE_LFLAGS *= -Wl,--dynamicbase -Wl,--nxcompat\n-# on Windows: enable GCC large address aware linker flag\n-win32:QMAKE_LFLAGS *= -Wl,--large-address-aware\n-\n-# use: qmake \"USE_QRCODE=1\"\n-# libqrencode (http://fukuchi.org/works/qrencode/index.en.html) must be installed for support\n-contains(USE_QRCODE, 1) {\n-    message(Building with QRCode support)\n-    DEFINES += USE_QRCODE\n-    LIBS += -lqrencode\n-}\n-\n-# use: qmake \"USE_UPNP=1\" ( enabled by default; default)\n-#  or: qmake \"USE_UPNP=0\" (disabled by default)\n-#  or: qmake \"USE_UPNP=-\" (not supported)\n-# miniupnpc (http://miniupnp.free.fr/files/) must be installed for support\n-contains(USE_UPNP, -) {\n-    message(Building without UPNP support)\n-} else {\n-    message(Building with UPNP support)\n-    count(USE_UPNP, 0) {\n-        USE_UPNP=1\n-    }\n-    DEFINES += USE_UPNP=$$USE_UPNP STATICLIB\n-    INCLUDEPATH += $$MINIUPNPC_INCLUDE_PATH\n-    LIBS += $$join(MINIUPNPC_LIB_PATH,,-L,) -lminiupnpc\n-    win32:LIBS += -liphlpapi\n-}\n-\n-# use: qmake \"USE_DBUS=1\"\n-contains(USE_DBUS, 1) {\n-    message(Building with DBUS (Freedesktop notifications) support)\n-    DEFINES += USE_DBUS\n-    QT += dbus\n-}\n-\n-# use: qmake \"USE_IPV6=1\" ( enabled by default; default)\n-#  or: qmake \"USE_IPV6=0\" (disabled by default)\n-#  or: qmake \"USE_IPV6=-\" (not supported)\n-contains(USE_IPV6, -) {\n-    message(Building without IPv6 support)\n-} else {\n-    count(USE_IPV6, 0) {\n-        USE_IPV6=1\n-    }\n-    DEFINES += USE_IPV6=$$USE_IPV6\n-}\n-\n-contains(BITCOIN_NEED_QT_PLUGINS, 1) {\n-    DEFINES += BITCOIN_NEED_QT_PLUGINS\n-    QTPLUGIN += qcncodecs qjpcodecs qtwcodecs qkrcodecs qtaccessiblewidgets\n-}\n-\n-INCLUDEPATH += src/leveldb/include src/leveldb/helpers\n-LIBS += $$PWD/src/leveldb/libleveldb.a $$PWD/src/leveldb/libmemenv.a\n-!win32 {\n-    # we use QMAKE_CXXFLAGS_RELEASE even without RELEASE=1 because we use RELEASE to indicate linking preferences not -O preferences\n-    genleveldb.commands = cd $$PWD/src/leveldb && CC=$$QMAKE_CC CXX=$$QMAKE_CXX $(MAKE) OPT=\\\"$$QMAKE_CXXFLAGS $$QMAKE_CXXFLAGS_RELEASE\\\" libleveldb.a libmemenv.a\n-} else {\n-    # make an educated guess about what the ranlib command is called\n-    isEmpty(QMAKE_RANLIB) {\n-        QMAKE_RANLIB = $$replace(QMAKE_STRIP, strip, ranlib)\n-    }\n-    LIBS += -lshlwapi\n-    genleveldb.commands = cd $$PWD/src/leveldb && CC=$$QMAKE_CC CXX=$$QMAKE_CXX TARGET_OS=OS_WINDOWS_CROSSCOMPILE $(MAKE) OPT=\\\"$$QMAKE_CXXFLAGS $$QMAKE_CXXFLAGS_RELEASE\\\" libleveldb.a libmemenv.a && $$QMAKE_RANLIB $$PWD/src/leveldb/libleveldb.a && $$QMAKE_RANLIB $$PWD/src/leveldb/libmemenv.a\n-}\n-genleveldb.target = $$PWD/src/leveldb/libleveldb.a\n-genleveldb.depends = FORCE\n-PRE_TARGETDEPS += $$PWD/src/leveldb/libleveldb.a\n-QMAKE_EXTRA_TARGETS += genleveldb\n-# Gross ugly hack that depends on qmake internals, unfortunately there is no other way to do it.\n-QMAKE_CLEAN += $$PWD/src/leveldb/libleveldb.a; cd $$PWD/src/leveldb ; $(MAKE) clean\n-\n-# regenerate build.h\n-!win32|contains(USE_BUILD_INFO, 1) {\n-    genbuild.depends = FORCE\n-    genbuild.commands = cd $$PWD; /bin/sh share/genbuild.sh $$OBJECTS_DIR/build.h\n-    genbuild.target = $$OBJECTS_DIR/build.h\n-    PRE_TARGETDEPS += $$OBJECTS_DIR/build.h\n-    QMAKE_EXTRA_TARGETS += genbuild\n-    DEFINES += HAVE_BUILD_INFO\n-}\n-\n-QMAKE_CXXFLAGS_WARN_ON = -fdiagnostics-show-option -Wall -Wextra -Wformat -Wformat-security -Wno-unused-parameter -Wstack-protector\n-\n-# Input\n-DEPENDPATH += src src/json src/qt\n-HEADERS += src/qt/bitcoingui.h \\\n-    src/qt/transactiontablemodel.h \\\n-    src/qt/addresstablemodel.h \\\n-    src/qt/optionsdialog.h \\\n-    src/qt/sendcoinsdialog.h \\\n-    src/qt/addressbookpage.h \\\n-    src/qt/signverifymessagedialog.h \\\n-    src/qt/aboutdialog.h \\\n-    src/qt/editaddressdialog.h \\\n-    src/qt/bitcoinaddressvalidator.h \\\n-    src/alert.h \\\n-    src/addrman.h \\\n-    src/base58.h \\\n-    src/bignum.h \\\n-    src/chainparams.h \\\n-    src/checkpoints.h \\\n-    src/compat.h \\\n-    src/sync.h \\\n-    src/util.h \\\n-    src/hash.h \\\n-    src/uint256.h \\\n-    src/serialize.h \\\n-    src/core.h \\\n-    src/main.h \\\n-    src/miner.h \\\n-    src/net.h \\\n-    src/key.h \\\n-    src/db.h \\\n-    src/walletdb.h \\\n-    src/script.h \\\n-    src/init.h \\\n-    src/bloom.h \\\n-    src/mruset.h \\\n-    src/checkqueue.h \\\n-    src/json/json_spirit_writer_template.h \\\n-    src/json/json_spirit_writer.h \\\n-    src/json/json_spirit_value.h \\\n-    src/json/json_spirit_utils.h \\\n-    src/json/json_spirit_stream_reader.h \\\n-    src/json/json_spirit_reader_template.h \\\n-    src/json/json_spirit_reader.h \\\n-    src/json/json_spirit_error_position.h \\\n-    src/json/json_spirit.h \\\n-    src/qt/clientmodel.h \\\n-    src/qt/guiutil.h \\\n-    src/qt/transactionrecord.h \\\n-    src/qt/guiconstants.h \\\n-    src/qt/optionsmodel.h \\\n-    src/qt/monitoreddatamapper.h \\\n-    src/qt/transactiondesc.h \\\n-    src/qt/transactiondescdialog.h \\\n-    src/qt/bitcoinamountfield.h \\\n-    src/wallet.h \\\n-    src/keystore.h \\\n-    src/qt/transactionfilterproxy.h \\\n-    src/qt/transactionview.h \\\n-    src/qt/walletmodel.h \\\n-    src/qt/walletview.h \\\n-    src/qt/walletstack.h \\\n-    src/qt/walletframe.h \\\n-    src/bitcoinrpc.h \\\n-    src/qt/overviewpage.h \\\n-    src/qt/csvmodelwriter.h \\\n-    src/crypter.h \\\n-    src/qt/sendcoinsentry.h \\\n-    src/qt/qvalidatedlineedit.h \\\n-    src/qt/bitcoinunits.h \\\n-    src/qt/qvaluecombobox.h \\\n-    src/qt/askpassphrasedialog.h \\\n-    src/protocol.h \\\n-    src/qt/notificator.h \\\n-    src/qt/paymentrequestplus.h \\\n-    src/qt/paymentserver.h \\\n-    src/allocators.h \\\n-    src/ui_interface.h \\\n-    src/qt/rpcconsole.h \\\n-    src/version.h \\\n-    src/netbase.h \\\n-    src/clientversion.h \\\n-    src/txdb.h \\\n-    src/leveldb.h \\\n-    src/threadsafety.h \\\n-    src/limitedmap.h \\\n-    src/qt/splashscreen.h \\\n-    src/qt/intro.h \\\n-    src/qt/walletmodeltransaction.h\n-\n-SOURCES += src/qt/bitcoin.cpp \\\n-    src/qt/bitcoingui.cpp \\\n-    src/qt/transactiontablemodel.cpp \\\n-    src/qt/addresstablemodel.cpp \\\n-    src/qt/optionsdialog.cpp \\\n-    src/qt/sendcoinsdialog.cpp \\\n-    src/qt/addressbookpage.cpp \\\n-    src/qt/signverifymessagedialog.cpp \\\n-    src/qt/aboutdialog.cpp \\\n-    src/qt/editaddressdialog.cpp \\\n-    src/qt/bitcoinaddressvalidator.cpp \\\n-    src/alert.cpp \\\n-    src/chainparams.cpp \\\n-    src/version.cpp \\\n-    src/sync.cpp \\\n-    src/util.cpp \\\n-    src/hash.cpp \\\n-    src/netbase.cpp \\\n-    src/key.cpp \\\n-    src/script.cpp \\\n-    src/core.cpp \\\n-    src/main.cpp \\\n-    src/init.cpp \\\n-    src/miner.cpp \\\n-    src/net.cpp \\\n-    src/bloom.cpp \\\n-    src/checkpoints.cpp \\\n-    src/addrman.cpp \\\n-    src/db.cpp \\\n-    src/walletdb.cpp \\\n-    src/qt/clientmodel.cpp \\\n-    src/qt/guiutil.cpp \\\n-    src/qt/transactionrecord.cpp \\\n-    src/qt/optionsmodel.cpp \\\n-    src/qt/monitoreddatamapper.cpp \\\n-    src/qt/transactiondesc.cpp \\\n-    src/qt/transactiondescdialog.cpp \\\n-    src/qt/bitcoinstrings.cpp \\\n-    src/qt/bitcoinamountfield.cpp \\\n-    src/wallet.cpp \\\n-    src/keystore.cpp \\\n-    src/qt/transactionfilterproxy.cpp \\\n-    src/qt/transactionview.cpp \\\n-    src/qt/walletmodel.cpp \\\n-    src/qt/walletview.cpp \\\n-    src/qt/walletstack.cpp \\\n-    src/qt/walletframe.cpp \\\n-    src/bitcoinrpc.cpp \\\n-    src/rpcdump.cpp \\\n-    src/rpcnet.cpp \\\n-    src/rpcmining.cpp \\\n-    src/rpcwallet.cpp \\\n-    src/rpcblockchain.cpp \\\n-    src/rpcrawtransaction.cpp \\\n-    src/qt/overviewpage.cpp \\\n-    src/qt/csvmodelwriter.cpp \\\n-    src/crypter.cpp \\\n-    src/qt/sendcoinsentry.cpp \\\n-    src/qt/qvalidatedlineedit.cpp \\\n-    src/qt/bitcoinunits.cpp \\\n-    src/qt/qvaluecombobox.cpp \\\n-    src/qt/askpassphrasedialog.cpp \\\n-    src/protocol.cpp \\\n-    src/qt/notificator.cpp \\\n-    src/qt/paymentrequestplus.cpp \\\n-    src/qt/paymentserver.cpp \\\n-    src/qt/rpcconsole.cpp \\\n-    src/noui.cpp \\\n-    src/leveldb.cpp \\\n-    src/txdb.cpp \\\n-    src/qt/splashscreen.cpp \\\n-    src/qt/intro.cpp \\\n-    src/qt/walletmodeltransaction.cpp\n-\n-RESOURCES += src/qt/bitcoin.qrc\n-\n-FORMS += src/qt/forms/sendcoinsdialog.ui \\\n-    src/qt/forms/addressbookpage.ui \\\n-    src/qt/forms/signverifymessagedialog.ui \\\n-    src/qt/forms/aboutdialog.ui \\\n-    src/qt/forms/editaddressdialog.ui \\\n-    src/qt/forms/transactiondescdialog.ui \\\n-    src/qt/forms/overviewpage.ui \\\n-    src/qt/forms/sendcoinsentry.ui \\\n-    src/qt/forms/askpassphrasedialog.ui \\\n-    src/qt/forms/rpcconsole.ui \\\n-    src/qt/forms/optionsdialog.ui \\\n-    src/qt/forms/intro.ui\n-\n-PROTOS = src/qt/paymentrequest.proto\n-include(share/qt/protobuf.pri)\n-\n-contains(USE_QRCODE, 1) {\n-HEADERS += src/qt/qrcodedialog.h\n-SOURCES += src/qt/qrcodedialog.cpp\n-FORMS += src/qt/forms/qrcodedialog.ui\n-}\n-\n-# Todo: Remove this line when switching to Qt5, as that option was removed\n-CODECFORTR = UTF-8\n-\n-# for lrelease/lupdate\n-# also add new translations to src/qt/bitcoin.qrc under translations/\n-TRANSLATIONS = $$files(src/qt/locale/bitcoin_*.ts)\n-\n-isEmpty(QMAKE_LRELEASE) {\n-    win32:QMAKE_LRELEASE = $$[QT_INSTALL_BINS]\\\\lrelease.exe\n-    else:QMAKE_LRELEASE = $$[QT_INSTALL_BINS]/lrelease\n-}\n-isEmpty(QM_DIR):QM_DIR = $$PWD/src/qt/locale\n-# automatically build translations, so they can be included in resource file\n-TSQM.name = lrelease ${QMAKE_FILE_IN}\n-TSQM.input = TRANSLATIONS\n-TSQM.output = $$QM_DIR/${QMAKE_FILE_BASE}.qm\n-TSQM.commands = $$QMAKE_LRELEASE ${QMAKE_FILE_IN} -qm ${QMAKE_FILE_OUT}\n-TSQM.CONFIG = no_link\n-QMAKE_EXTRA_COMPILERS += TSQM\n-\n-# \"Other files\" to show in Qt Creator\n-OTHER_FILES += README.md \\\n-    doc/*.txt \\\n-    doc/*.md \\\n-    src/bitcoind.cpp \\\n-    src/qt/res/bitcoin-qt.rc \\\n-    src/test/*.cpp \\\n-    src/test/*.h \\\n-    src/qt/test/*.cpp \\\n-    src/qt/test/*.h\n-\n-# platform specific defaults, if not overridden on command line\n-isEmpty(BOOST_LIB_SUFFIX) {\n-    macx:BOOST_LIB_SUFFIX = -mt\n-    win32:BOOST_LIB_SUFFIX = -mgw44-mt-s-1_50\n-}\n-\n-isEmpty(BOOST_THREAD_LIB_SUFFIX) {\n-    BOOST_THREAD_LIB_SUFFIX = $$BOOST_LIB_SUFFIX\n-}\n-\n-isEmpty(BDB_LIB_PATH) {\n-    macx:BDB_LIB_PATH = /opt/local/lib/db48\n-}\n-\n-isEmpty(BDB_LIB_SUFFIX) {\n-    macx:BDB_LIB_SUFFIX = -4.8\n-}\n-\n-isEmpty(BDB_INCLUDE_PATH) {\n-    macx:BDB_INCLUDE_PATH = /opt/local/include/db48\n-}\n-\n-isEmpty(BOOST_LIB_PATH) {\n-    macx:BOOST_LIB_PATH = /opt/local/lib\n-}\n-\n-isEmpty(BOOST_INCLUDE_PATH) {\n-    macx:BOOST_INCLUDE_PATH = /opt/local/include\n-}\n-\n-win32:DEFINES += WIN32\n-win32:RC_FILE = src/qt/res/bitcoin-qt.rc\n-\n-win32:!contains(MINGW_THREAD_BUGFIX, 0) {\n-    # At least qmake's win32-g++-cross profile is missing the -lmingwthrd\n-    # thread-safety flag. GCC has -mthreads to enable this, but it doesn't\n-    # work with static linking. -lmingwthrd must come BEFORE -lmingw, so\n-    # it is prepended to QMAKE_LIBS_QT_ENTRY.\n-    # It can be turned off with MINGW_THREAD_BUGFIX=0, just in case it causes\n-    # any problems on some untested qmake profile now or in the future.\n-    DEFINES += _MT\n-    QMAKE_LIBS_QT_ENTRY = -lmingwthrd $$QMAKE_LIBS_QT_ENTRY\n-}\n-\n-!win32:!macx {\n-    DEFINES += LINUX\n-    LIBS += -lrt\n-    # _FILE_OFFSET_BITS=64 lets 32-bit fopen transparently support large files.\n-    DEFINES += _FILE_OFFSET_BITS=64\n-}\n-\n-macx:HEADERS += src/qt/macdockiconhandler.h src/qt/macnotificationhandler.h\n-macx:OBJECTIVE_SOURCES += src/qt/macdockiconhandler.mm src/qt/macnotificationhandler.mm\n-macx:LIBS += -framework Foundation -framework ApplicationServices -framework AppKit -framework CoreServices\n-macx:DEFINES += MAC_OSX MSG_NOSIGNAL=0\n-macx:ICON = src/qt/res/icons/bitcoin.icns\n-macx:QMAKE_CFLAGS_THREAD += -pthread\n-macx:QMAKE_LFLAGS_THREAD += -pthread\n-macx:QMAKE_CXXFLAGS_THREAD += -pthread\n-macx:QMAKE_INFO_PLIST = share/qt/Info.plist\n-\n-# Set libraries and includes at end, to use platform-defined defaults if not overridden\n-INCLUDEPATH += $$BOOST_INCLUDE_PATH $$BDB_INCLUDE_PATH $$OPENSSL_INCLUDE_PATH $$PROTOBUF_INCLUDE_PATH $$QRENCODE_INCLUDE_PATH\n-LIBS += $$join(BOOST_LIB_PATH,,-L,) $$join(BDB_LIB_PATH,,-L,) $$join(OPENSSL_LIB_PATH,,-L,) $$join(PROTOBUF_LIB_PATH,,-L,) $$join(QRENCODE_LIB_PATH,,-L,)\n-LIBS += -lssl -lcrypto -ldb_cxx$$BDB_LIB_SUFFIX -lprotobuf\n-# -lgdi32 has to happen after -lcrypto (see  #681)\n-win32:LIBS += -lws2_32 -lshlwapi -lmswsock -lole32 -loleaut32 -luuid -lgdi32\n-LIBS += -lboost_system$$BOOST_LIB_SUFFIX -lboost_filesystem$$BOOST_LIB_SUFFIX -lboost_program_options$$BOOST_LIB_SUFFIX -lboost_thread$$BOOST_THREAD_LIB_SUFFIX\n-win32:LIBS += -lboost_chrono$$BOOST_LIB_SUFFIX\n-macx:LIBS += -lboost_chrono$$BOOST_LIB_SUFFIX\n-\n-contains(RELEASE, 1) {\n-    !win32:!macx {\n-        # Linux: turn dynamic linking back on for c/c++ runtime libraries\n-        LIBS += -Wl,-Bdynamic\n-    }\n-}\n-\n-system($$QMAKE_LRELEASE -silent $$TRANSLATIONS)"
      },
      {
        "sha": "aa4bb8bfd9d511b2920d17664173eeb6b13e94ff",
        "filename": "configure.ac",
        "status": "added",
        "additions": 714,
        "deletions": 0,
        "changes": 714,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/35b8af92265ed74de63c3818e5290c27b3f35df2/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/35b8af92265ed74de63c3818e5290c27b3f35df2/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=35b8af92265ed74de63c3818e5290c27b3f35df2",
        "patch": "@@ -0,0 +1,714 @@\n+dnl require autoconf 2.60 (AS_ECHO/AS_ECHO_N)\n+AC_PREREQ([2.60])\n+define(_CLIENT_VERSION_MAJOR, 0)\n+define(_CLIENT_VERSION_MINOR, 8)\n+define(_CLIENT_VERSION_REVISION, 99)\n+define(_CLIENT_VERSION_BUILD, 0)\n+define(_CLIENT_VERSION_IS_RELEASE, false)\n+define(_COPYRIGHT_YEAR, 2013)\n+AC_INIT([Bitcoin],[_CLIENT_VERSION_MAJOR._CLIENT_VERSION_MINOR._CLIENT_VERSION_REVISION],[info@bitcoin.org],[bitcoin])\n+AC_CONFIG_AUX_DIR([src/build-aux])\n+AC_CONFIG_MACRO_DIR([src/m4])\n+AC_CANONICAL_HOST\n+AH_TOP([#ifndef BITCOIN_CONFIG_H])\n+AH_TOP([#define BITCOIN_CONFIG_H])\n+AH_BOTTOM([#endif //BITCOIN_CONFIG_H])\n+\n+# This m4 will only be used if a system copy cannot be found. This is helpful\n+# on systems where autotools are installed but the pkg-config macros are not in\n+# a default location. It is currently used for building on OSX where autotools\n+# are preinstalled but pkg-config comes from macports or homebrew. It should\n+# probably be removed when building on <= 10.6 is no longer supported.\n+m4_include([pkg.m4])\n+\n+dnl reset CXXFLAGS if empty (autoconf adds its own defaults otherwise)\n+: ${CFLAGS=\"\"}\n+: ${CXXFLAGS=\"\"}\n+\n+dnl faketime breaks configure and is only needed for make. Disable it here.\n+unset FAKETIME\n+\n+dnl ==============================================================\n+dnl Setup for automake\n+dnl ==============================================================\n+\n+AM_INIT_AUTOMAKE([no-define subdir-objects foreign])\n+\n+dnl faketime messes with timestamps and causes configure to be re-run.\n+dnl --disable-maintainer-mode can be used to bypass this.\n+AM_MAINTAINER_MODE([enable])\n+\n+dnl make the compilation flags quiet unless V=1 is used\n+m4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])\n+\n+AC_ARG_WITH([miniupnpc],\n+  [AS_HELP_STRING([--with-miniupnpc],\n+  [enable UPNP (default is yes if libminiupnpc is found)])],\n+  [use_upnp=$withval],\n+  [use_upnp=auto])\n+\n+AC_ARG_ENABLE([upnp-default],\n+  [AS_HELP_STRING([--enable-upnp-default],\n+  [if UPNP is enabled, turn it on at startup (default is no)])],\n+  [use_upnp_default=$enableval],\n+  [use_upnp_default=no])\n+\n+dnl enable ipv6 support\n+AC_ARG_ENABLE([ipv6],\n+  [AS_HELP_STRING([--enable-ipv6],\n+  [enable ipv6 (default is yes)])],\n+  [use_ipv6=$enableval],\n+  [use_ipv6=yes])\n+\n+dnl enable qt support\n+AC_ARG_WITH([qt],\n+  [AS_HELP_STRING([--with-qt],\n+  [enable qt (default is yes)])],\n+  [use_qt=$withval],\n+  [use_qt=yes])\n+\n+dnl compile with full warnings and debugging symbols\n+AC_ARG_ENABLE(debug,\n+    AS_HELP_STRING([--enable-debug],[compile with debug symbols (default is yes)]),\n+    [use_debug=$enableval],\n+    [use_debug=yes])\n+    AC_MSG_CHECKING([if compiling with debugging symbols])\n+\n+AC_ARG_ENABLE(tests,\n+    AS_HELP_STRING([--enable-tests],[compile tests (default is yes)]),\n+    [use_tests=$enableval],\n+    [use_tests=yes])\n+\n+AC_ARG_WITH([comparison-tool],\n+    AS_HELP_STRING([with-comparison-tool],[path to java comparison tool (requires --enable-tests)]),\n+    [use_comparison_tool=$withval],\n+    [use_comparison_tool=no])\n+\n+AC_ARG_WITH([qrencode],\n+  [AS_HELP_STRING([--with-qrencode],\n+  [enable QR code support (default is yes if qt is enabled and libqrencode is found)])],\n+  [use_qr=$withval],\n+  [use_qr=auto])\n+\n+AC_ARG_WITH([qtdbus],\n+  [AS_HELP_STRING([--with-qtdbus],\n+  [enable DBus support (default is yes if qt is enabled and QtDBus is found)])],\n+  [use_dbus=$withval],\n+  [use_dbus=auto])\n+\n+AC_ARG_ENABLE([hardening],\n+  [AS_HELP_STRING([--enable-hardening],\n+  [attempt to harden the resulting executables (default is yes)])],\n+  [use_hardening=$enableval],\n+  [use_hardening=yes])\n+\n+AC_ARG_ENABLE([ccache],\n+  [AS_HELP_STRING([--enable-ccache],\n+  [enable building with ccache (default is yes if ccache is found)])],\n+  [use_ccache=$enableval],\n+  [use_ccache=auto])\n+\n+AC_ARG_ENABLE([lcov],\n+  [AS_HELP_STRING([--enable-lcov],\n+  [enable lcov testing (default is no)])],\n+  [use_lcov=yes],\n+  [use_lcov=no])\n+\n+AC_ARG_WITH([qt-incdir],[AS_HELP_STRING([--with-qt-incdir=INC_DIR],[specify qt include path (overridden by pkgconfig)])], [qt_include_path=$withval], [])\n+AC_ARG_WITH([qt-libdir],[AS_HELP_STRING([--with-qt-libdir=LIB_DIR],[specify qt lib path (overridden by pkgconfig)])], [qt_lib_path=$withval], [])\n+AC_ARG_WITH([qt-bindir],[AS_HELP_STRING([--with-qt-bindir=BIN_DIR],[specify qt bin path])], [qt_bin_path=$withval], [])\n+AC_ARG_WITH([qt-plugindir],[AS_HELP_STRING([--with-qt-plugindir=PLUGIN_DIR],[specify qt plugin path (overridden by pkgconfig)])], [qt_plugin_path=$withval], [])\n+AC_ARG_WITH([protoc-bindir],[AS_HELP_STRING([--with-protoc-bindir=BIN_DIR],[specify protoc bin path])], [protoc_bin_path=$withval], [])\n+\n+\n+AC_CONFIG_SRCDIR([src])\n+AC_CONFIG_HEADERS([src/bitcoin-config.h])\n+\n+dnl Checks for programs.\n+AC_PROG_CXX\n+AC_PROG_CC\n+AC_PROG_CPP\n+AC_PROG_INSTALL\n+AC_PROG_OBJC\n+m4_ifdef([AC_PROG_OBJCXX],[AC_PROG_OBJCXX])\n+AC_PROG_MKDIR_P\n+AC_PROG_SED\n+AC_PATH_TOOL(AR, ar)\n+AC_PATH_TOOL(RANLIB, ranlib)\n+AC_PATH_TOOL(WINDRES, windres)\n+AC_PATH_TOOL(STRIP, strip)\n+AC_PATH_TOOL(GCOV, gcov)\n+AC_PATH_PROG(LCOV, lcov)\n+AC_PATH_PROG(JAVA, java)\n+AC_PATH_PROG(GENHTML, genhtml)\n+AC_PATH_PROG([GIT], [git])\n+AC_PATH_PROGS([MOC], [moc moc-qt4],, $qt_bin_path:$PATH)\n+AC_PATH_PROGS([UIC], [uic uic-qt4],, $qt_bin_path:$PATH)\n+AC_PATH_PROG([RCC], [rcc],, $qt_bin_path:$PATH)\n+AC_PATH_PROG([LRELEASE], [lrelease],, $qt_bin_path:$PATH)\n+AC_PATH_PROG([PROTOC], [protoc],, $protoc_bin_path:$PATH)\n+AC_PATH_PROG(CCACHE,ccache)\n+PKG_PROG_PKG_CONFIG\n+\n+## TODO: Remove these hard-coded paths and flags. They are here for the sake of\n+##       compatibility with the legacy buildsystem.\n+##\n+CXXFLAGS=\"$CXXFLAGS -Wall -Wextra -Wformat -Wformat-security -Wno-unused-parameter\"\n+CPPFLAGS=\"$CPPFLAGS -DBOOST_SPIRIT_THREADSAFE -DHAVE_BUILD_INFO\"\n+DEBUG_CXXFLAGS=\"-g -ggdb\"\n+RELEASE_CXXFLAGS=\"-O2\"\n+\n+AC_LANG_PUSH([C++])\n+\n+use_pkgconfig=yes\n+case $host in\n+  *mingw*)\n+\n+     #pkgconfig does more harm than good with mingw\n+     use_pkgconfig=no\n+\n+     TARGET_OS=windows\n+     AC_CHECK_LIB([mingwthrd],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([kernel32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([user32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([gdi32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([comdlg32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([winspool],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([winmm],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([shell32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([comctl32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([ole32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([oleaut32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([uuid],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([rpcrt4],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([advapi32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([ws2_32],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([mswsock],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([shlwapi],      [main],, AC_MSG_ERROR(lib missing))\n+     AC_CHECK_LIB([iphlpapi],      [main],, AC_MSG_ERROR(lib missing))\n+\n+     AC_PATH_PROG([MAKENSIS], [makensis], none)\n+     if test x$MAKENSIS = xnone; then\n+       AC_MSG_WARN(\"makensis not found. Cannot create installer.\")\n+     fi\n+\n+     CPPFLAGS=\"$CPPFLAGS -D_MT -DWIN32 -D_WINDOWS -DBOOST_THREAD_USE_LIB\"\n+     LEVELDB_TARGET_FLAGS=\"TARGET_OS=OS_WINDOWS_CROSSCOMPILE\"\n+     CXXFLAGS=\"$CXXFLAGS -w\"\n+     ;;\n+  *darwin*)\n+     TARGET_OS=darwin\n+     LEVELDB_TARGET_FLAGS=\"TARGET_OS=Darwin\"\n+     if  test x$cross_compiling != xyes; then\n+       AC_CHECK_PROG([PORT],port, port)\n+       if test x$PORT = xport; then\n+         dnl add default macports paths\n+         CPPFLAGS=\"$CPPFLAGS -I/opt/local/include -I/opt/local/include/db48\"\n+         LIBS=\"$LIBS -L/opt/local/lib -L/opt/local/lib/db48\"\n+       fi\n+\n+       AC_CHECK_PROG([BREW],brew, brew)\n+       if test x$BREW = xbrew; then\n+         dnl add default homebrew paths\n+         openssl_prefix=`$BREW --prefix openssl`\n+         bdb_prefix=`$BREW --prefix berkeley-db4`\n+         export PKG_CONFIG_PATH=\"$openssl_prefix/lib/pkgconfig:$PKG_CONFIG_PATH\"\n+         CPPFLAGS=\"$CPPFLAGS -I$bdb_prefix/include\"\n+         LIBS=\"$LIBS -L/$bdb_prefix/lib\"\n+       fi\n+     fi\n+\n+     if test x$use_qt = xyes; then\n+       MOC_DEFS=\"-DQ_OS_MAC\"\n+       base_frameworks=\"-framework Foundation -framework ApplicationServices -framework AppKit\"\n+       AX_CHECK_LINK_FLAG([[$base_frameworks]],[LIBS=\"$LIBS $base_frameworks\"],[AC_MSG_ERROR(could not find base frameworks)])\n+     fi\n+\n+     AX_CHECK_COMPILE_FLAG([-mmacosx-version-min=10.5],[RELEASE_CXXFLAGS=\"$RELEASE_CXXFLAGS -mmacosx-version-min=10.5\"])\n+     AX_CHECK_COMPILE_FLAG([-arch i386],[RELEASE_CXXFLAGS=\"$RELEASE_CXXFLAGS -arch i386\"])\n+     RELEASE_CXXFLAGS=\"$RELEASE_CXXFLAGS -O3\"\n+     CPPFLAGS=\"$CPPFLAGS -DMAC_OSX\"\n+     TESTDEFS=\"-DBOOST_TEST_DYN_LINK\"\n+     ;;\n+   *)\n+     TESTDEFS=\"-DBOOST_TEST_DYN_LINK\"\n+     ;;\n+esac\n+\n+if test x$use_debug == xyes; then\n+  CXXFLAGS=\"$DEBUG_CXXFLAGS $CXXFLAGS\"\n+else\n+  CXXFLAGS=\"$RELEASE_CXXFLAGS $CXXFLAGS\"\n+fi\n+\n+if test x$use_comparison_tool != xno; then\n+  AC_SUBST(JAVA_COMPARISON_TOOL, $use_comparison_tool)\n+fi\n+\n+if test x$use_lcov == xyes; then\n+  if test x$LCOV == x; then\n+    AC_MSG_ERROR(\"lcov testing requested but lcov not found\")\n+  fi\n+  if test x$GCOV == x; then\n+    AC_MSG_ERROR(\"lcov testing requested but gcov not found\")\n+  fi\n+  if test x$JAVA == x; then\n+    AC_MSG_ERROR(\"lcov testing requested but java not found\")\n+  fi\n+  if test x$GENHTML == x; then\n+    AC_MSG_ERROR(\"lcov testing requested but genhtml not found\")\n+  fi\n+  if test x$use_comparison_tool == x; then\n+    AC_MSG_ERROR(\"lcov testing requested but comparison tool was not specified\")\n+  fi\n+  LCOV=\"$LCOV --gcov-tool=$GCOV\"\n+  AX_CHECK_COMPILE_FLAG([--coverage],[CXXFLAGS=\"$CXXFLAGS --coverage\"],\n+    [AC_MSG_ERROR(\"lcov testing requested but --coverage flag does not work\")])\n+fi\n+\n+dnl Require little endian\n+AC_C_BIGENDIAN([AC_MSG_ERROR(\"Big Endian not supported\")])\n+\n+dnl Check for pthread compile/link requirements\n+AX_PTHREAD\n+INCLUDES=\"$INCLUDES $PTHREAD_CFLAGS\"\n+\n+# The following macro will add the necessary defines to bitcoin-config.h, but\n+# they also need to be passed down to any subprojects. Pull the results out of\n+# the cache and add them to CPPFLAGS.\n+AC_SYS_LARGEFILE\n+\n+if test x$ac_cv_sys_file_offset_bits != x &&\n+   test x$ac_cv_sys_file_offset_bits != xno &&\n+   test x$ac_cv_sys_file_offset_bits != xunknown; then\n+  CPPFLAGS=\"$CPPFLAGS -D_FILE_OFFSET_BITS=$ac_cv_sys_file_offset_bits\"\n+fi\n+\n+if test x$ac_cv_sys_large_files != x &&\n+   test x$ac_cv_sys_large_files != xno &&\n+   test x$ac_cv_sys_large_files != xunknown; then\n+  CPPFLAGS=\"$CPPFLAGS -D_LARGE_FILES=$ac_cv_sys_large_files\"\n+fi\n+\n+AX_CHECK_LINK_FLAG([[-Wl,--large-address-aware]], [LDFLAGS=\"$LDFLAGS -Wl,--large-address-aware\"])\n+\n+if test x$use_hardening != xno; then\n+  AX_CHECK_COMPILE_FLAG([-Wstack-protector],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -Wstack-protector\"])\n+  AX_CHECK_COMPILE_FLAG([-fPIE],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -fPIE\"])\n+\n+  AX_CHECK_PREPROC_FLAG([-D_FORTIFY_SOURCE=2],[HARDENED_CPPFLAGS=\"$HARDENED_CPPFLAGS -D_FORTIFY_SOURCE=2\"])\n+\n+  AX_CHECK_LINK_FLAG([[-Wl,--dynamicbase]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,--dynamicbase\"])\n+  AX_CHECK_LINK_FLAG([[-Wl,--nxcompat]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,--nxcompat\"])\n+  AX_CHECK_LINK_FLAG([[-Wl,-z,relro]], [LDFLAGS=\"-Wl,-z,relro\"])\n+  AX_CHECK_LINK_FLAG([[-Wl,-z,now]], [LDFLAGS=\"-Wl,-z,now\"])\n+\n+  if test x$TARGET_OS != xwindows; then\n+    # -fstack-protector-all can produce broken binaries with mingw\n+    AX_CHECK_COMPILE_FLAG([-fno-stack-protector],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -fno-stack-protector\"])\n+    AX_CHECK_COMPILE_FLAG([-fstack-protector-all],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -fstack-protector-all\"])\n+\n+    # -pie will link successfully with mingw, but it's unsupported and leads to undeterministic binaries\n+    AX_CHECK_LINK_FLAG([[-pie]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -pie\"])\n+  fi\n+\n+  CXXFLAGS=\"$CXXFLAGS $HARDENED_CXXFLAGS\"\n+  CPPFLAGS=\"$CPPFLAGS $HARDENED_CPPFLAGS\"\n+  LDFLAGS=\"$LDFLAGS $HARDENED_LDFLAGS\"\n+  OBJCXXFLAGS=\"$CXXFLAGS\"\n+fi\n+\n+dnl this flag screws up non-darwin gcc even when the check fails. special-case it.\n+if test x$TARGET_OS = xdarwin; then\n+  AX_CHECK_LINK_FLAG([[-Wl,-dead_strip]], [LDFLAGS=\"$LDFLAGS -Wl,-dead_strip\"])\n+fi\n+\n+AC_CHECK_HEADERS([stdio.h stdlib.h unistd.h strings.h sys/types.h sys/stat.h])\n+\n+dnl Check for MSG_NOSIGNAL\n+AC_MSG_CHECKING(for MSG_NOSIGNAL)\n+AC_TRY_COMPILE([#include <sys/socket.h>],\n+ [ int f = MSG_NOSIGNAL; ],\n+ [ AC_MSG_RESULT(yes); AC_DEFINE(HAVE_MSG_NOSIGNAL, 1,[Define this symbol if you have MSG_NOSIGNAL]) ],\n+ [ AC_MSG_RESULT(no)]\n+)\n+\n+dnl Check for libdb_cxx\n+AC_CHECK_HEADER([db_cxx.h],,AC_MSG_ERROR(libdb_cxx headers missing))\n+AC_CHECK_LIB([db_cxx], [main],, AC_MSG_ERROR(libdb_cxx missing))\n+\n+dnl Check for libminiupnpc (optional)\n+if test x$use_upnp != xno; then\n+  AC_CHECK_LIB([miniupnpc], [main],, [have_miniupnpc=no])\n+fi\n+\n+dnl Check for boost libs\n+AX_BOOST_BASE\n+AX_BOOST_SYSTEM\n+AX_BOOST_FILESYSTEM\n+AX_BOOST_PROGRAM_OPTIONS\n+AX_BOOST_THREAD\n+AX_BOOST_CHRONO\n+\n+if test x$use_tests = xyes; then\n+  AX_BOOST_UNIT_TEST_FRAMEWORK\n+fi\n+\n+BOOST_LIBS=\"$BOOST_LDFLAGS $BOOST_SYSTEM_LIB $BOOST_FILESYSTEM_LIB $BOOST_PROGRAM_OPTIONS_LIB $BOOST_THREAD_LIB\"\n+BOOST_INCLUDES=\"$BOOST_CPPFLAGS\"\n+\n+dnl Boost >= 1.50 uses sleep_for rather than the now-deprecated sleep, however\n+dnl it was broken from 1.50 to 1.52 when backed by nanosleep. Use sleep_for if\n+dnl a working version is available, else fall back to sleep. sleep was removed\n+dnl after 1.56.\n+dnl If neither is available, abort.\n+dnl If sleep_for is used, boost_chrono becomes a requirement.\n+if test x$ax_cv_boost_chrono = xyes; then\n+TEMP_LIBS=\"$LIBS\"\n+LIBS=\"$LIBS $BOOST_LIBS $BOOST_CHRONO_LIB\"\n+AC_TRY_LINK([\n+  #include <boost/thread/thread.hpp>\n+  #include <boost/version.hpp>\n+  ],[\n+  #if BOOST_VERSION >= 105000 && (!defined(BOOST_HAS_NANOSLEEP) || BOOST_VERSION >= 105200)\n+      boost::this_thread::sleep_for(boost::chrono::milliseconds(0));\n+  #else\n+   choke me\n+  #endif\n+  ],\n+  [boost_sleep=yes; BOOST_LIBS=\"$BOOST_LIBS $BOOST_CHRONO_LIB\";\n+     AC_DEFINE(HAVE_WORKING_BOOST_SLEEP_FOR, 1, [Define this symbol if boost sleep_for works])],\n+  [boost_sleep=no])\n+LIBS=\"$TEMP_LIBS\"\n+fi\n+\n+if test x$boost_sleep != xyes; then\n+TEMP_LIBS=\"$LIBS\"\n+LIBS=\"$LIBS $BOOST_LIBS\"\n+AC_TRY_LINK([\n+  #include <boost/version.hpp>\n+  #include <boost/thread.hpp>\n+  #include <boost/date_time/posix_time/posix_time_types.hpp>\n+  ],[\n+  #if BOOST_VERSION <= 105600\n+      boost::this_thread::sleep(boost::posix_time::milliseconds(0));\n+  #else\n+   choke me\n+  #endif\n+  ],\n+  [boost_sleep=yes; AC_DEFINE(HAVE_WORKING_BOOST_SLEEP, 1, [Define this symbol if boost sleep works])],\n+  [boost_sleep=no])\n+LIBS=\"$TEMP_LIBS\"\n+fi\n+\n+if test x$boost_sleep != xyes; then\n+  AC_MSG_ERROR(No working boost sleep implementation found)\n+fi\n+\n+if test x$use_pkgconfig = xyes; then\n+\n+  if test x$PKG_CONFIG == x; then\n+    AC_MSG_ERROR(pkg-config not found.)]\n+  fi\n+\n+  : #NOP\n+  m4_ifdef(\n+    [PKG_CHECK_MODULES],\n+    [\n+      PKG_CHECK_MODULES([SSL], [libssl], [INCLUDES=\"$INCLUDES $SSL_CFLAGS\"; LIBS=\"$LIBS $SSL_LIBS\"], [AC_MSG_ERROR(openssl  not found.)])\n+      PKG_CHECK_MODULES([CRYPTO], [libcrypto], [INCLUDES=\"$INCLUDES $CRYPTO_CFLAGS\"; LIBS=\"$LIBS $CRYPTO_LIBS\"], [AC_MSG_ERROR(libcrypto  not found.)])\n+\n+      if test x$use_qt = xyes; then\n+        PKG_CHECK_MODULES([QT], [QtCore QtGui QtNetwork], [QT_INCLUDES=\"$QT_CFLAGS\"; have_qt=yes], [have_qt=no])\n+        if test x$use_tests = xyes; then\n+          PKG_CHECK_MODULES([QT_TEST], [QtTest], [QT_TEST_INCLUDES=\"$QT_TEST_CFLAGS\"; have_qt_test=yes], [have_qt_test=no])\n+        fi\n+        if test x$use_dbus != xno; then\n+          PKG_CHECK_MODULES([QT_DBUS], [QtDBus], [QT_DBUS_INCLUDES=\"$QT_DBUS_CFLAGS\"; have_qt_dbus=yes], [have_qt_dbus=no])\n+        fi\n+        if test x$use_qr != xno; then\n+          PKG_CHECK_MODULES([QR], [libqrencode], [have_qrencode=yes], [have_qrencode=no])\n+        fi\n+        PKG_CHECK_MODULES([PROTOBUF], [protobuf], [have_protobuf=yes], [AC_MSG_ERROR(libprotobuf not found.)])\n+      fi\n+    ]\n+  )\n+else\n+  AC_CHECK_HEADER([openssl/crypto.h],,AC_MSG_ERROR(libcrypto headers missing))\n+  AC_CHECK_LIB([crypto],      [main],, AC_MSG_ERROR(libcrypto missing))\n+\n+  AC_CHECK_HEADER([openssl/ssl.h],, AC_MSG_ERROR(libssl headers missing),)\n+  AC_CHECK_LIB([ssl],         [main],, AC_MSG_ERROR(libssl missing))\n+\n+  if test x$use_qt = xyes; then\n+    TEMP_LIBS=\"$LIBS\"\n+    LIBS=\n+    if test x$qt_lib_path != x; then\n+      QT_LIBS=\"$QT_LIBS -L$qt_lib_path\"\n+      LIBS=\"$QT_LIBS\"\n+    fi\n+    if test x$qt_plugin_path != x; then\n+      QT_LIBS=\"$QT_LIBS -L$qt_plugin_path/codecs\"\n+      LIBS=\"$QT_LIBS\"\n+    fi\n+\n+    if test x$TARGET_OS == xwindows; then\n+      AC_CHECK_LIB([imm32],      [main],, AC_MSG_ERROR(libimm32 not found. Install it or use --without-qt.))\n+    fi\n+\n+    #TODO: These are only needed when they're linked directly to parent libs. It really has nothing to do with windows.\n+    #Instead, check for missing functions in parent libs and assume static if they're absent.\n+    if test x$TARGET_OS == xwindows; then\n+      AC_CHECK_LIB([qcncodecs],      [main],, AC_MSG_ERROR(libqcncodecs not found. Install it or use --without-qt.))\n+      AC_CHECK_LIB([qjpcodecs],      [main],, AC_MSG_ERROR(libqjpcodecs not found. Install it or use --without-qt.))\n+      AC_CHECK_LIB([qkrcodecs],      [main],, AC_MSG_ERROR(libqkrcodecs not found. Install it or use --without-qt.))\n+      AC_CHECK_LIB([qtwcodecs],      [main],, AC_MSG_ERROR(libqtwcodecs not found. Install it or use --without-qt.))\n+    fi\n+\n+    AC_CHECK_LIB([QtCore],      [main],, AC_MSG_ERROR(libQtCore not found. Install it or use --without-qt.))\n+    AC_CHECK_LIB([QtGui],      [main],, AC_MSG_ERROR(libQtGui not found. Install it or use --without-qt.))\n+    AC_CHECK_LIB([QtNetwork],      [main],, AC_MSG_ERROR(libQtNetwork not found. Install it or use --without-qt.))\n+    AC_CHECK_LIB([protobuf],      [main],, AC_MSG_ERROR(libprotobuf not found. Install it or use --without-qt.))\n+    QT_LIBS=\"$LIBS\"\n+    LIBS=\"$TEMP_LIBS\"\n+\n+    TEMP_CPPFLAGS=\"$CPPFLAGS\"\n+    if test x$qt_include_path != x; then\n+      QT_INCLUDES=\"-I$qt_include_path -I$qt_include_path/QtCore -I$qt_include_path/QtGui -I$qt_include_path/QtNetwork -I$qt_include_path/QtTest -I$qt_include_path/QtDBus\"\n+      CPPFLAGS=\"$CPPFLAGS $QT_INCLUDES\"\n+    fi\n+    AC_CHECK_HEADER([QtPlugin],, AC_MSG_ERROR(QtCore headers missing. Install them or use --without-qt.),)\n+    AC_CHECK_HEADER([QApplication],, AC_MSG_ERROR(QtGUI headers missing. Install them or use --without-qt.),)\n+    AC_CHECK_HEADER([QLocalSocket],, AC_MSG_ERROR(QtNetwork headers missing. Install them or use --without-qt.),)\n+\n+    if test x$use_tests = xyes; then\n+      TEMP_LIBS=\"$LIBS\"\n+      LIBS=\n+      if test x$qt_lib_path != x; then\n+        LIBS=\"-L$qt_lib_path\"\n+      fi\n+      AC_CHECK_LIB([QtTest],      [main],, have_qt_test=no)\n+      AC_CHECK_HEADER([QTest],, have_qt_test=no)\n+      QT_TEST_LIBS=\"$LIBS\"\n+      LIBS=\"$TEMP_LIBS\"\n+    fi\n+    if test x$use_dbus != xno; then\n+      TEMP_LIBS=\"$LIBS\"\n+      LIBS=\n+      if test x$qt_lib_path != x; then\n+        LIBS=\"-L$qt_lib_path\"\n+      fi\n+      AC_CHECK_LIB([QtDBus],      [main],, have_qt_dbus=no)\n+      AC_CHECK_HEADER([QtDBus],, have_qt_dbus=no)\n+      QT_DBUS_LIBS=\"$LIBS\"\n+      LIBS=\"$TEMP_LIBS\"\n+    fi\n+    CPPFLAGS=\"$TEMP_CPPFLAGS\"\n+    if test x$use_qr != xno; then\n+      AC_CHECK_LIB([qrencode], [main],, [have_qrencode=no])\n+      AC_CHECK_HEADER([qrencode.h],, have_qrencode=no)\n+    fi\n+  fi\n+fi\n+\n+if test x$use_ipv6 = xyes; then\n+  dnl Check for ipv6 build requirements\n+  AC_MSG_CHECKING(for IPV6 build support)\n+  AC_TRY_LINK([\n+  #if defined(_WINDOWS)\n+  #include <winsock2.h>\n+  #else\n+  #include <sys/types.h>\n+  #include <sys/socket.h>\n+  #include <netinet/in.h>\n+  #endif\n+  ],[\n+  #if !defined(_WINDOWS)\n+  struct in6_addr ipv6Addr;\n+  struct sockaddr_in6 addr;\n+  #endif\n+  int temp = socket(AF_INET6, SOCK_STREAM, 0);],\n+  [AC_MSG_RESULT(yes); have_ipv6=yes; AC_DEFINE(HAVE_IPV6, 1, [Define this symbol if you have ipv6 build support])],\n+  [AC_MSG_RESULT(no)]; have_ipv6=no)\n+fi\n+AC_LANG_POP\n+\n+if test \"x$use_ccache\" != \"xno\"; then\n+  AC_MSG_CHECKING(if ccache should be enabled)\n+  if test x$CCACHE = x; then\n+    if test \"x$use_ccache\" = \"xyes\"; then\n+      AC_MSG_ERROR([ccache not found.]);\n+    else\n+      AC_MSG_NOTICE([ccache not found. Falling back to default CC])\n+      use_ccache=no\n+    fi\n+  else\n+    use_ccache=yes\n+    CC=\"$ac_cv_path_CCACHE $CC\"\n+    CXX=\"$ac_cv_path_CCACHE $CXX\"\n+  fi\n+  AC_MSG_RESULT($use_ccache)\n+fi\n+\n+dnl enable ipv6 support\n+AC_MSG_CHECKING([if ipv6 should be enabled])\n+if test x$have_ipv6 = xno; then\n+  if test x$use_ipv6 = xyes; then\n+     AC_MSG_ERROR(\"ipv6 requested but cannot be built. use --disable-ipv6\")\n+  fi\n+  AC_MSG_RESULT(no)\n+else\n+  if test x$use_ipv6 = xyes; then\n+      AC_MSG_RESULT(yes)\n+      AC_DEFINE([USE_IPV6],[1],[Define if ipv6 support should be compiled in])\n+  else\n+      AC_MSG_RESULT(no)\n+  fi\n+fi\n+\n+dnl enable upnp support\n+AC_MSG_CHECKING([if upnp should be enabled])\n+if test x$have_miniupnpc = xno; then\n+  if test x$use_upnp = xyes; then\n+     AC_MSG_ERROR(\"upnp requested but cannot be built. use --without-miniupnpc\")\n+  fi\n+  AC_MSG_RESULT(no)\n+else\n+  if test x$use_upnp != xno; then\n+    AC_MSG_RESULT(yes)\n+    AC_MSG_CHECKING([if upnp should be on by default])\n+    use_upnp=yes\n+    upnp_setting=0\n+    if test x$use_upnp_default != xno; then\n+      use_upnp_default=yes\n+      upnp_setting=1\n+    fi\n+    AC_MSG_RESULT($use_upnp_default)\n+    AC_DEFINE_UNQUOTED([USE_UPNP],[$upnp_setting],[Define to 1 for upnp runtime support])\n+    if test x$TARGET_OS = xwindows; then\n+      CPPFLAGS=\"$CPPFLAGS -DSTATICLIB\"\n+    fi\n+  else\n+    AC_MSG_RESULT(no)\n+  fi\n+fi\n+\n+dnl enable qt support\n+AC_MSG_CHECKING([if qt should be enabled])\n+if test x$use_qt = xyes; then\n+  if test x$have_qt = xno; then\n+     AC_MSG_ERROR(\"qt support requested but qt could not be located. use --without-qt\")\n+  fi\n+  if test x$MOC = x; then\n+    AC_MSG_ERROR(\"qt support requested but moc was not found. use --without-qt\")\n+  fi\n+  if test x$PROTOC = x; then\n+    AC_MSG_ERROR(\"qt support requested but protoc was not found. use --without-qt\")\n+  fi\n+  if test x$UIC = x; then\n+    AC_MSG_ERROR(\"qt support requested but uic was not found. use --without-qt\")\n+  fi\n+  if test x$RCC = x; then\n+    AC_MSG_ERROR(\"qt support requested but rcc was not found. use --without-qt\")\n+  fi\n+  if test x$LRELEASE = x; then\n+    AC_MSG_ERROR(\"qt support requested but lrelease was not found. use --without-qt\")\n+  fi\n+  if test x$use_tests = xyes; then\n+    if test x$have_qt_test = xno; then\n+      AC_MSG_ERROR(\"libQtTest not found. Use --disable-tests or --without-qt.\")\n+    fi\n+  fi\n+  if test x$have_qt_dbus = xno;  then\n+    use_dbus=no\n+    if test x$use_dbus = xyes; then\n+      AC_MSG_ERROR(\"libQtDBus not found. Use --without-qtdbus.\")\n+    fi\n+  fi\n+  BUILD_QT=qt\n+else\n+  use_qt=no\n+fi\n+\n+AC_MSG_RESULT($use_qt)\n+\n+dnl these are only used when qt is enabled\n+if test x$use_qt = xyes; then\n+\n+  dnl enable dbus support\n+  AC_MSG_CHECKING([if dbus should be enabled])\n+  if test x$use_dbus != xno; then\n+    use_dbus=yes\n+    AC_DEFINE([USE_DBUS],[1],[Define if dbus support should be compiled in])\n+  else\n+    use_dbus=no\n+  fi\n+  AC_MSG_RESULT($use_dbus)\n+\n+  dnl enable qr support\n+  AC_MSG_CHECKING([if qr should be enabled])\n+  if test x$have_qrencode = xno; then\n+    if test x$use_qr == xyes; then\n+     AC_MSG_ERROR(\"QR support requested but cannot be built. use --without-qrencode\")\n+    fi\n+    AC_MSG_RESULT(no)\n+  else\n+    if test x$use_qr != xno; then\n+      AC_MSG_RESULT(yes)\n+      AC_DEFINE([USE_QRCODE],[1],[Define if QR support should be compiled in])\n+      use_qr=yes\n+    else\n+      AC_MSG_RESULT(no)\n+    fi\n+  fi\n+\n+  if test x$use_tests = xyes; then\n+    BUILD_TEST_QT=\"test\"\n+  fi\n+fi\n+\n+if test x$use_tests = xyes; then\n+  BUILD_TEST=\"test\"\n+fi\n+\n+AM_CONDITIONAL([TARGET_DARWIN], [test x$TARGET_OS = xdarwin])\n+AM_CONDITIONAL([TARGET_WINDOWS], [test x$TARGET_OS = xwindows])\n+AM_CONDITIONAL([USE_QRCODE], [test x$use_qr = xyes])\n+AM_CONDITIONAL([USE_LCOV],[test x$use_lcov == xyes])\n+AM_CONDITIONAL([USE_COMPARISON_TOOL],[test x$use_comparison_tool != xno])\n+\n+AC_DEFINE(CLIENT_VERSION_MAJOR, _CLIENT_VERSION_MAJOR, [Major version])\n+AC_DEFINE(CLIENT_VERSION_MINOR, _CLIENT_VERSION_MINOR, [Minor version])\n+AC_DEFINE(CLIENT_VERSION_REVISION, _CLIENT_VERSION_REVISION, [Build revision])\n+AC_DEFINE(CLIENT_VERSION_BUILD, _CLIENT_VERSION_BUILD, [Version Build])\n+AC_DEFINE(CLIENT_VERSION_IS_RELEASE, _CLIENT_VERSION_IS_RELEASE, [Version is release])\n+AC_DEFINE(COPYRIGHT_YEAR, _COPYRIGHT_YEAR, [Version is release])\n+AC_SUBST(CLIENT_VERSION_MAJOR, _CLIENT_VERSION_MAJOR)\n+AC_SUBST(CLIENT_VERSION_MINOR, _CLIENT_VERSION_MINOR)\n+AC_SUBST(CLIENT_VERSION_REVISION, _CLIENT_VERSION_REVISION)\n+AC_SUBST(CLIENT_VERSION_BUILD, _CLIENT_VERSION_BUILD)\n+AC_SUBST(CLIENT_VERSION_IS_RELEASE, _CLIENT_VERSION_IS_RELEASE)\n+AC_SUBST(COPYRIGHT_YEAR, _COPYRIGHT_YEAR)\n+\n+\n+AC_SUBST(USE_UPNP)\n+AC_SUBST(USE_QRCODE)\n+AC_SUBST(USE_IPV6)\n+AC_SUBST(INCLUDES)\n+AC_SUBST(BOOST_LIBS)\n+AC_SUBST(MOC_DEFS)\n+AC_SUBST(QT_INCLUDES)\n+AC_SUBST(QT_TEST_LIBS)\n+AC_SUBST(QT_LIBS)\n+AC_SUBST(QT_DBUS_LIBS)\n+AC_SUBST(QT_DBUS_INCLUDES)\n+AC_SUBST(QT_TEST_INCLUDES)\n+AC_SUBST(TESTDEFS)\n+AC_SUBST(LEVELDB_TARGET_FLAGS)\n+AC_SUBST(BUILD_QT)\n+AC_SUBST(BUILD_TEST)\n+AC_SUBST(BUILD_TEST_QT)\n+AC_CONFIG_FILES([Makefile src/Makefile src/test/Makefile src/qt/Makefile src/qt/test/Makefile share/setup.nsi share/qt/Info.plist])\n+AC_CONFIG_FILES([qa/pull-tester/run-bitcoind-for-test.sh],[chmod +x qa/pull-tester/run-bitcoind-for-test.sh])\n+AC_CONFIG_FILES([qa/pull-tester/build-tests.sh],[chmod +x qa/pull-tester/build-tests.sh])\n+AC_OUTPUT"
      },
      {
        "sha": "0b181ef449aa903c788f95019edcc1a8a9989b27",
        "filename": "contrib/bitcoin-qt.pro",
        "status": "added",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/35b8af92265ed74de63c3818e5290c27b3f35df2/contrib/bitcoin-qt.pro",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/35b8af92265ed74de63c3818e5290c27b3f35df2/contrib/bitcoin-qt.pro",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/bitcoin-qt.pro?ref=35b8af92265ed74de63c3818e5290c27b3f35df2",
        "patch": "@@ -0,0 +1,17 @@\n+FORMS += \\\n+    ../src/qt/forms/transactiondescdialog.ui \\\n+    ../src/qt/forms/signverifymessagedialog.ui \\\n+    ../src/qt/forms/sendcoinsentry.ui \\\n+    ../src/qt/forms/sendcoinsdialog.ui \\\n+    ../src/qt/forms/rpcconsole.ui \\\n+    ../src/qt/forms/qrcodedialog.ui \\\n+    ../src/qt/forms/overviewpage.ui \\\n+    ../src/qt/forms/optionsdialog.ui \\\n+    ../src/qt/forms/intro.ui \\\n+    ../src/qt/forms/editaddressdialog.ui \\\n+    ../src/qt/forms/askpassphrasedialog.ui \\\n+    ../src/qt/forms/addressbookpage.ui \\\n+    ../src/qt/forms/aboutdialog.ui\n+\n+RESOURCES += \\\n+    ../src/qt/bitcoin.qrc"
      },
      {
        "sha": "b31a49760bcda840ee0a6e86bb3776b531f978d4",
        "filename": "contrib/gitian-descriptors/boost-win32.yml",
        "status": "modified",
        "additions": 7,
        "deletions": 12,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/35b8af92265ed74de63c3818e5290c27b3f35df2/contrib/gitian-descriptors/boost-win32.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/35b8af92265ed74de63c3818e5290c27b3f35df2/contrib/gitian-descriptors/boost-win32.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/boost-win32.yml?ref=35b8af92265ed74de63c3818e5290c27b3f35df2",
        "patch": "@@ -13,8 +13,8 @@ remotes: []\n files:\n - \"boost_1_50_0.tar.bz2\"\n script: |\n-  TMPDIR=\"$HOME/tmpdir\"\n-  mkdir -p $TMPDIR/bin/$GBUILD_BITS $TMPDIR/include\n+  INSTALLPREFIX=\"$OUTDIR/staging/boost\"\n+  mkdir -p \"$INSTALLPREFIX\"\n   tar xjf boost_1_50_0.tar.bz2\n   cd boost_1_50_0\n   echo \"using gcc : 4.4 : i586-mingw32msvc-g++\n@@ -24,15 +24,10 @@ script: |\n         <cxxflags>-frandom-seed=boost1\n   ;\" > user-config.jam\n   ./bootstrap.sh --without-icu\n-  ./bjam toolset=gcc target-os=windows threadapi=win32 threading=multi variant=release link=static --user-config=user-config.jam --without-mpi --without-python -sNO_BZIP2=1 -sNO_ZLIB=1 --layout=tagged --build-type=complete $MAKEOPTS stage\n-  for lib in chrono date_time exception filesystem graph iostreams math_c99f math_c99l math_c99 math_tr1f math_tr1l math_tr1 prg_exec_monitor program_options random regex serialization signals system test_exec_monitor thread_win32 unit_test_framework wave wserialization; do\n-      mkdir $lib\n-      (cd $lib ; ar xf ../stage/lib/libboost_${lib}-mt-s.a)\n-      mv $lib $TMPDIR/bin/$GBUILD_BITS\n-  done\n-  cp -a boost $TMPDIR/include\n-  cd $TMPDIR\n+  ./bjam toolset=gcc target-os=windows threadapi=win32 threading=multi variant=release link=static --user-config=user-config.jam --without-mpi --without-python -sNO_BZIP2=1 -sNO_ZLIB=1 --layout=tagged --build-type=complete --prefix=\"$INSTALLPREFIX\" $MAKEOPTS install\n+\n+  cd \"$INSTALLPREFIX\"\n   export LD_PRELOAD=/usr/lib/faketime/libfaketime.so.1\n   export FAKETIME=$REFERENCE_DATETIME\n-  zip -r boost-win32-1.50.0-gitian2.zip *\n-  cp boost-win32-1.50.0-gitian2.zip $OUTDIR\n+  zip -r boost-win32-1.50.0-gitian3.zip *\n+  cp boost-win32-1.50.0-gitian3.zip $OUTDIR"
      },
      {
        "sha": "98f69dddf0348b5040a0bc185449780eed832692",
        "filename": "contrib/gitian-descriptors/deps-win32.yml",
        "status": "modified",
        "additions": 24,
        "deletions": 14,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/35b8af92265ed74de63c3818e5290c27b3f35df2/contrib/gitian-descriptors/deps-win32.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/35b8af92265ed74de63c3818e5290c27b3f35df2/contrib/gitian-descriptors/deps-win32.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/deps-win32.yml?ref=35b8af92265ed74de63c3818e5290c27b3f35df2",
        "patch": "@@ -25,48 +25,58 @@ script: |\n   export LD_PRELOAD=/usr/lib/faketime/libfaketime.so.1\n   export FAKETIME=$REFERENCE_DATETIME\n   export TZ=UTC\n+  export INSTALLPREFIX=$OUTDIR/staging/deps\n+  export HOST=i586-mingw32msvc\n   #\n+  mkdir -p $INSTALLPREFIX\n+\n   tar xzf openssl-1.0.1c.tar.gz\n   cd openssl-1.0.1c\n-  ./Configure --cross-compile-prefix=i586-mingw32msvc- mingw\n+  ./Configure --cross-compile-prefix=$HOST- mingw --openssldir=$INSTALLPREFIX\n   make\n+  make install_sw\n   cd ..\n   #\n   tar xzf db-4.8.30.NC.tar.gz\n   cd db-4.8.30.NC/build_unix\n-  ../dist/configure --enable-mingw --enable-cxx --host=i586-mingw32msvc CFLAGS=\"-I/usr/i586-mingw32msvc/include\"\n-  make $MAKEOPTS\n+  ../dist/configure --prefix=$INSTALLPREFIX --enable-mingw --enable-cxx --host=$HOST\n+  make $MAKEOPTS library_build\n+  make install_lib install_include\n   cd ../..\n   #\n   tar xzf miniupnpc-1.6.tar.gz\n   cd miniupnpc-1.6\n   sed 's/dllwrap -k --driver-name gcc/$(DLLWRAP) -k --driver-name $(CC)/' -i Makefile.mingw\n   sed 's|wingenminiupnpcstrings $< $@|./wingenminiupnpcstrings $< $@|' -i Makefile.mingw\n-  make -f Makefile.mingw DLLWRAP=i586-mingw32msvc-dllwrap CC=i586-mingw32msvc-gcc AR=i586-mingw32msvc-ar\n+  mkdir -p dll\n+  make -f Makefile.mingw DLLWRAP=$HOST-dllwrap CC=$HOST-gcc AR=$HOST-ar libminiupnpc.a\n+  install -d $INSTALLPREFIX/include/miniupnpc\n+  install *.h $INSTALLPREFIX/include/miniupnpc\n+  install libminiupnpc.a  $INSTALLPREFIX/lib\n   cd ..\n-  mv miniupnpc-1.6 miniupnpc\n   #\n   tar xzf zlib-1.2.6.tar.gz\n   cd zlib-1.2.6\n-  make -f win32/Makefile.gcc PREFIX=i586-mingw32msvc- $MAKEOPTS\n+  CROSS_PREFIX=$HOST- ./configure --prefix=$INSTALLPREFIX --static\n+  make\n+  make install\n   cd ..\n   #\n   tar xzf libpng-1.5.9.tar.gz\n   cd libpng-1.5.9\n-  ./configure -disable-shared CC=i586-mingw32msvc-cc AR=i586-mingw32msvc-ar STRIP=i586-mingw32msvc-strip RANLIB=i586-mingw32msvc-ranlib OBJDUMP=i586-mingw32msvc-objdump LD=i586-mingw32msvc-ld LDFLAGS=\"-L../zlib-1.2.6/\" CFLAGS=\"-I../zlib-1.2.6/\"\n+  CFLAGS=\"-I$INSTALLPREFIX/include\" LDFLAGS=\"-L$INSTALLPREFIX/lib\" ./configure --disable-shared --prefix=$INSTALLPREFIX --host=$HOST\n   make $MAKEOPTS\n+  make install\n   cd ..\n   #\n   tar xjf qrencode-3.2.0.tar.bz2\n   cd qrencode-3.2.0\n-  ./configure CC=i586-mingw32msvc-cc AR=i586-mingw32msvc-ar STRIP=i586-mingw32msvc-strip RANLIB=i586-mingw32msvc-ranlib OBJDUMP=i586-mingw32msvc-objdump LD=i586-mingw32msvc-ld png_LIBS=\"../libpng-1.5.9/.libs/libpng15.a ../zlib-1.2.6/libz.a\" png_CFLAGS=\"-I../libpng-1.5.9\"\n-  make $MAKEOPTS\n+  png_CFLAGS=\"-I$INSTALLPREFIX/include\" png_LIBS=\"-L$INSTALLPREFIX/lib -lpng\" ./configure --prefix=$INSTALLPREFIX --host=i586-mingw32msvc\n+  make\n+  make install\n   cd ..\n   #\n-  zip -r $OUTDIR/bitcoin-deps-0.0.5.zip \\\n-    $(ls qrencode-*/{qrencode.h,.libs/libqrencode.{,l}a} | sort) \\\n-    $(ls db-*/build_unix/{libdb_cxx.a,db.h,db_cxx.h,libdb.a,.libs/libdb_cxx-?.?.a} | sort) \\\n-    $(find openssl-* -name '*.a' -o -name '*.h' | sort) \\\n-    $(find miniupnpc -name '*.h' -o -name 'libminiupnpc.a' | sort)\n+  cd $INSTALLPREFIX\n+  zip -r $OUTDIR/bitcoin-deps-0.0.6.zip include lib\n   # Kill wine processes as gitian won't figure out we are done otherwise\n   killall wineserver services.exe explorer.exe winedevice.exe"
      },
      {
        "sha": "04643c152228b35885bddd972fcc115103535e23",
        "filename": "contrib/gitian-descriptors/gitian-win32.yml",
        "status": "modified",
        "additions": 32,
        "deletions": 53,
        "changes": 85,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/35b8af92265ed74de63c3818e5290c27b3f35df2/contrib/gitian-descriptors/gitian-win32.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/35b8af92265ed74de63c3818e5290c27b3f35df2/contrib/gitian-descriptors/gitian-win32.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-win32.yml?ref=35b8af92265ed74de63c3818e5290c27b3f35df2",
        "patch": "@@ -10,69 +10,48 @@ packages:\n - \"unzip\"\n - \"nsis\"\n - \"faketime\"\n-reference_datetime: \"2011-01-30 00:00:00\"\n+- \"autoconf2.13\"\n+- \"libtool\"\n+- \"automake\"\n+- \"pkg-config\"\n+\n+reference_datetime: \"2013-06-01 00:00:00\"\n remotes:\n - \"url\": \"https://github.com/bitcoin/bitcoin.git\"\n   \"dir\": \"bitcoin\"\n files:\n-- \"qt-win32-4.8.3-gitian-r2.zip\"\n-- \"boost-win32-1.50.0-gitian2.zip\"\n-- \"bitcoin-deps-0.0.5.zip\"\n-- \"protobuf-win32-2.5.0-gitian-r1.zip\"\n+- \"qt-win32-4.8.3-gitian-r3.zip\"\n+- \"boost-win32-1.50.0-gitian3.zip\"\n+- \"bitcoin-deps-0.0.6.zip\"\n+- \"protobuf-win32-2.5.0-gitian-r2.zip\"\n script: |\n   #\n-  export QTDIR=$HOME/qt\n-  mkdir $QTDIR\n-  cd $QTDIR\n-  unzip ../build/qt-win32-4.8.3-gitian-r2.zip\n+  STAGING=$HOME/staging\n+  mkdir -p $STAGING\n+  cd $STAGING\n+  unzip ../build/qt-win32-4.8.3-gitian-r3.zip\n+  unzip ../build/boost-win32-1.50.0-gitian3.zip\n+  unzip ../build/bitcoin-deps-0.0.6.zip\n+  unzip ../build/protobuf-win32-2.5.0-gitian-r2.zip\n   cd $HOME/build/\n-  export PATH=$QTDIR/bin/:$PATH\n-  #\n-  mkdir boost_1_50_0\n-  cd boost_1_50_0\n-  mkdir -p stage/lib\n-  unzip ../boost-win32-1.50.0-gitian2.zip\n-  cd bin/$GBUILD_BITS\n-  for lib in *; do\n-    i586-mingw32msvc-ar rc ../../stage/lib/libboost_${lib}-mt-s.a $lib/*.o\n-    i586-mingw32msvc-ranlib ../../stage/lib/libboost_${lib}-mt-s.a\n-  done\n-  cd ../..\n-  mv include/boost .\n-  cd ..\n-  #\n-  unzip bitcoin-deps-0.0.5.zip\n-  #\n-  unzip protobuf-win32-2.5.0-gitian-r1.zip\n-  #\n-  find -type f | xargs touch --date=\"$REFERENCE_DATETIME\"\n   #\n   cd bitcoin\n-  mkdir -p $OUTDIR/src\n-  git archive HEAD | tar -x -C $OUTDIR/src\n-  cp $OUTDIR/src/doc/README_windows.txt $OUTDIR/readme.txt\n-  cp $OUTDIR/src/COPYING $OUTDIR/COPYING.txt\n+  export PATH=$STAGING/host/bin:$PATH\n+  export TAR_OPTIONS=--mtime=`echo $REFERENCE_DATETIME | awk '{ print $1 }'`\n+  ./autogen.sh\n+  ./configure --disable-debug --bindir=$OUTDIR --prefix=$STAGING --host=i586-mingw32msvc --with-qt-plugindir=$STAGING/plugins  --with-qt-incdir=$STAGING/include --with-qt-bindir=$STAGING/host/bin --with-boost=$STAGING --disable-maintainer-mode --with-protoc-bindir=$STAGING/host/bin --disable-dependency-tracking CPPFLAGS=\"-I$STAGING/include\" LDFLAGS=\"-L$STAGING/lib\" CXXFLAGS=\"-frandom-seed=bitcoin\"\n+  make dist\n+  mkdir -p distsrc\n+  cd distsrc\n+  tar --strip-components=1 -xf ../bitcoin-*.tar.*\n+  ./configure --disable-debug --bindir=$OUTDIR --prefix=$STAGING --host=i586-mingw32msvc --with-qt-plugindir=$STAGING/plugins  --with-qt-incdir=$STAGING/include --with-qt-bindir=$STAGING/host/bin --with-boost=$STAGING --disable-maintainer-mode --with-protoc-bindir=$STAGING/host/bin --disable-dependency-tracking CPPFLAGS=\"-I$STAGING/include\" LDFLAGS=\"-L$STAGING/lib\" CXXFLAGS=\"-frandom-seed=bitcoin\"\n   export LD_PRELOAD=/usr/lib/faketime/libfaketime.so.1\n   export FAKETIME=$REFERENCE_DATETIME\n   export TZ=UTC\n-  $QTDIR/bin/qmake -spec unsupported/win32-g++-cross PROTOBUF_LIB_PATH=$HOME/build/protobuf-win32 PROTOBUF_INCLUDE_PATH=$HOME/build/protobuf-win32 PROTOC=$HOME/build/protobuf-win32/protoc MINIUPNPC_LIB_PATH=$HOME/build/miniupnpc MINIUPNPC_INCLUDE_PATH=$HOME/build/ BDB_LIB_PATH=$HOME/build/db-4.8.30.NC/build_unix BDB_INCLUDE_PATH=$HOME/build/db-4.8.30.NC/build_unix BOOST_LIB_PATH=$HOME/build/boost_1_50_0/stage/lib BOOST_INCLUDE_PATH=$HOME/build/boost_1_50_0 BOOST_LIB_SUFFIX=-mt-s BOOST_THREAD_LIB_SUFFIX=_win32-mt-s OPENSSL_LIB_PATH=$HOME/build/openssl-1.0.1c OPENSSL_INCLUDE_PATH=$HOME/build/openssl-1.0.1c/include QRENCODE_LIB_PATH=$HOME/build/qrencode-3.2.0/.libs QRENCODE_INCLUDE_PATH=$HOME/build/qrencode-3.2.0 USE_QRCODE=1 INCLUDEPATH=$HOME/build DEFINES=BOOST_THREAD_USE_LIB BITCOIN_NEED_QT_PLUGINS=1 QMAKE_LRELEASE=lrelease QMAKE_CXXFLAGS=-frandom-seed=bitcoin USE_BUILD_INFO=1\n   make $MAKEOPTS\n-  cp release/bitcoin-qt.exe $OUTDIR/\n-  #\n-  cd src\n-  export LD_PRELOAD=/usr/lib/faketime/libfaketime.so.1\n-  export FAKETIME=$REFERENCE_DATETIME\n-  export TZ=UTC\n-  make -f makefile.linux-mingw $MAKEOPTS DEPSDIR=$HOME/build bitcoind.exe USE_UPNP=0 DEBUGFLAGS=\"-frandom-seed=bitcoin\"\n-  i586-mingw32msvc-strip bitcoind.exe\n-  mkdir $OUTDIR/daemon\n-  cp bitcoind.exe $OUTDIR/daemon\n-  cd ..\n-  mkdir nsis\n-  git archive HEAD | tar -x -C nsis\n-  cd nsis/src\n-  mkdir ../release\n-  cp ../../release/* ../release/\n-  cp ../../src/*.exe .\n-  makensis ../share/setup.nsi\n-  cp ../share/bitcoin-*-win32-setup.exe $OUTDIR/\n+  make deploy\n+  make install-strip\n+  cp -f bitcoin-*setup*.exe $OUTDIR/\n+\n+  mkdir -p $OUTDIR/src\n+  cp -f ../bitcoin-*.tar.* $OUTDIR/src"
      },
      {
        "sha": "47704bea29da62f853e2c55bc547e8d8f81e9fd1",
        "filename": "contrib/gitian-descriptors/gitian.yml",
        "status": "modified",
        "additions": 23,
        "deletions": 15,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/35b8af92265ed74de63c3818e5290c27b3f35df2/contrib/gitian-descriptors/gitian.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/35b8af92265ed74de63c3818e5290c27b3f35df2/contrib/gitian-descriptors/gitian.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian.yml?ref=35b8af92265ed74de63c3818e5290c27b3f35df2",
        "patch": "@@ -13,11 +13,16 @@ packages:\n - \"libboost-filesystem-dev\"\n - \"libboost-program-options-dev\"\n - \"libboost-thread-dev\"\n+- \"libboost-test-dev\"\n - \"libssl-dev\"\n - \"git-core\"\n - \"unzip\"\n - \"pkg-config\"\n - \"libpng12-dev\"\n+- \"autoconf2.13\"\n+- \"libtool\"\n+- \"automake\"\n+- \"faketime\"\n reference_datetime: \"2013-06-01 00:00:00\"\n remotes:\n - \"url\": \"https://github.com/bitcoin/bitcoin.git\"\n@@ -27,35 +32,38 @@ files:\n - \"qrencode-3.2.0.tar.bz2\"\n - \"protobuf-2.5.0.tar.bz2\"\n script: |\n-  INSTDIR=\"$HOME/install\"\n-  export LIBRARY_PATH=\"$INSTDIR/lib\"\n+  STAGING=\"$HOME/install\"\n+  export LIBRARY_PATH=\"$STAGING/lib\"\n   #\n   tar xzfm miniupnpc-1.6.tar.gz\n   cd miniupnpc-1.6\n-  INSTALLPREFIX=$INSTDIR make $MAKEOPTS install\n+  INSTALLPREFIX=$STAGING make $MAKEOPTS install\n   cd ..\n   #\n   tar xjfm qrencode-3.2.0.tar.bz2\n   cd qrencode-3.2.0\n-  ./configure --prefix=$INSTDIR --enable-static --disable-shared\n+  sed -i 's/@LIBPTHREAD@//' libqrencode.pc.in\n+  ./configure --prefix=$STAGING --enable-static --disable-shared\n   make $MAKEOPTS install\n   cd ..\n   #\n   tar xjfm protobuf-2.5.0.tar.bz2\n   cd protobuf-2.5.0\n-  ./configure --prefix=$INSTDIR --enable-static --disable-shared\n+  mkdir -p $STAGING/host/bin\n+  ./configure --prefix=$STAGING --bindir=$STAGING/host/bin --enable-static --disable-shared\n   make $MAKEOPTS install\n   cd ..\n   #\n   cd bitcoin\n-  mkdir -p $OUTDIR/src\n-  git archive HEAD | tar -x -C $OUTDIR/src\n-  cp $OUTDIR/src/doc/README.md $OUTDIR\n-  cp $OUTDIR/src/COPYING $OUTDIR\n-  mkdir -p $OUTDIR/bin/$GBUILD_BITS\n-  qmake INCLUDEPATH=\"$INSTDIR/include\" LIBS=\"-L$INSTDIR/lib\" PROTOC=\"$INSTDIR/bin/protoc\" PROTOBUF_LIB_PATH=\"$INSTDIR/lib\" PROTOBUF_INCLUDE_PATH=\"$INSTDIR/include\" RELEASE=1 USE_QRCODE=1\n+  export TAR_OPTIONS=--mtime=`echo $REFERENCE_DATETIME | awk '{ print $1 }'`\n+  ./autogen.sh\n+  ./configure --disable-debug --prefix=$STAGING --bindir=$OUTDIR --with-protoc-bindir=$STAGING/host/bin --disable-maintainer-mode --disable-dependency-tracking PKG_CONFIG_PATH=\"$STAGING/lib/pkgconfig\" CPPFLAGS=\"-I$STAGING/include\" LDFLAGS=\"-L$STAGING/lib\" CXXFLAGS=\"-frandom-seed=bitcoin\"\n+  make dist\n+  mkdir -p distsrc\n+  cd distsrc\n+  tar --strip-components=1 -xf ../bitcoin-*.tar.*\n+  ./configure --disable-debug --prefix=$STAGING --bindir=$OUTDIR --with-protoc-bindir=$STAGING/host/bin --disable-maintainer-mode --disable-dependency-tracking PKG_CONFIG_PATH=\"$STAGING/lib/pkgconfig\" CPPFLAGS=\"-I$STAGING/include\" LDFLAGS=\"-L$STAGING/lib\" CXXFLAGS=\"-frandom-seed=bitcoin\"\n   make $MAKEOPTS\n-  install bitcoin-qt $OUTDIR/bin/$GBUILD_BITS\n-  cd src\n-  make -f makefile.unix STATIC=1 OPENSSL_INCLUDE_PATH=\"$INSTDIR/include\" OPENSSL_LIB_PATH=\"$INSTDIR/lib\" $MAKEOPTS bitcoind USE_UPNP=0 DEBUGFLAGS=\n-  install -s bitcoind $OUTDIR/bin/$GBUILD_BITS\n+  make $MAKEOPTS install-strip\n+  mkdir -p $OUTDIR/src\n+  cp ../bitcoin-*.tar.* $OUTDIR/src"
      },
      {
        "sha": "ad676e5654b82a3118a12635b970733f6b806e88",
        "filename": "contrib/gitian-descriptors/protobuf-win32.yml",
        "status": "modified",
        "additions": 11,
        "deletions": 9,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/35b8af92265ed74de63c3818e5290c27b3f35df2/contrib/gitian-descriptors/protobuf-win32.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/35b8af92265ed74de63c3818e5290c27b3f35df2/contrib/gitian-descriptors/protobuf-win32.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/protobuf-win32.yml?ref=35b8af92265ed74de63c3818e5290c27b3f35df2",
        "patch": "@@ -17,21 +17,23 @@ script: |\n   export LD_PRELOAD=/usr/lib/faketime/libfaketime.so.1\n   export FAKETIME=$REFERENCE_DATETIME\n   export TZ=UTC\n+  export INSTALLPREFIX=$OUTDIR/staging/deps\n+  export HOST=i586-mingw32msvc\n   #\n+  #\n+  mkdir -p $INSTALLPREFIX\n+\n   tar xjf protobuf-2.5.0.tar.bz2\n   cd protobuf-2.5.0\n   # First: build a native (linux) protoc\n   ./configure --enable-shared=no --disable-dependency-tracking\n   make\n-  mkdir -p host\n-  cp src/protoc host\n+  mkdir -p $INSTALLPREFIX/host/bin\n+  cp src/protoc $INSTALLPREFIX/host/bin\n   # Now recompile with the mingw cross-compiler:\n   make distclean\n-  ./configure --enable-shared=no --disable-dependency-tracking --with-protoc=$(pwd)/host/protoc --host=i586-mingw32msvc CXXFLAGS=-frandom-seed=11\n+  ./configure --prefix=$INSTALLPREFIX --enable-shared=no --disable-dependency-tracking --with-protoc=$INSTALLPREFIX/host/bin/protoc --host=$HOST CXXFLAGS=-frandom-seed=11\n   make\n-  cd ..\n-  mkdir -p protobuf-win32\n-  cp protobuf-2.5.0/host/protoc protobuf-win32/protoc\n-  cp protobuf-2.5.0/src/.libs/libprotobuf.a protobuf-win32/libprotobuf.a\n-  cp -r protobuf-2.5.0/src/google protobuf-win32/\n-  zip -r $OUTDIR/protobuf-win32-2.5.0-gitian-r1.zip protobuf-win32\n+  make install\n+  cd $INSTALLPREFIX\n+  zip -r $OUTDIR/protobuf-win32-2.5.0-gitian-r2.zip include lib host"
      },
      {
        "sha": "6ab3bb477d34c8dc6ad680474c2e73e54308971a",
        "filename": "contrib/gitian-descriptors/qt-win32.yml",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/35b8af92265ed74de63c3818e5290c27b3f35df2/contrib/gitian-descriptors/qt-win32.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/35b8af92265ed74de63c3818e5290c27b3f35df2/contrib/gitian-descriptors/qt-win32.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/qt-win32.yml?ref=35b8af92265ed74de63c3818e5290c27b3f35df2",
        "patch": "@@ -8,17 +8,19 @@ packages:\n - \"mingw32\"\n - \"zip\"\n - \"faketime\"\n+- \"unzip\"\n reference_datetime: \"2011-01-30 00:00:00\"\n remotes: []\n files:\n - \"qt-everywhere-opensource-src-4.8.3.tar.gz\"\n-- \"bitcoin-deps-0.0.5.zip\"\n+- \"bitcoin-deps-0.0.6.zip\"\n script: |\n   INSTDIR=\"$HOME/qt/\"\n   mkdir $INSTDIR\n+  mkdir -p $INSTDIR/host/bin\n   #\n   # Need mingw-compiled openssl from bitcoin-deps:\n-  unzip bitcoin-deps-0.0.5.zip\n+  unzip bitcoin-deps-0.0.6.zip\n   DEPSDIR=`pwd`\n   #\n   tar xzf qt-everywhere-opensource-src-4.8.3.tar.gz\n@@ -44,7 +46,7 @@ script: |\n   export FAKETIME=$REFERENCE_DATETIME\n   export TZ=UTC\n   # Compile static libraries, and use statically linked openssl (-openssl-linked):\n-  OPENSSL_LIBS=\"-L$DEPSDIR/openssl-1.0.1c -lssl -lcrypto -lgdi32\" ./configure -prefix $INSTDIR -I $DEPSDIR/openssl-1.0.1c/include  -confirm-license -release -opensource -static -no-qt3support -xplatform unsupported/win32-g++-cross -no-multimedia -no-audio-backend -no-phonon -no-phonon-backend -no-declarative -no-script -no-scripttools -no-javascript-jit -no-webkit -no-svg -no-xmlpatterns -no-sql-sqlite -no-nis -no-cups -no-iconv -no-dbus -no-gif -no-libtiff -no-opengl -nomake examples -nomake demos -nomake docs -no-feature-style-plastique -no-feature-style-cleanlooks -no-feature-style-motif -no-feature-style-cde -no-feature-style-windowsce -no-feature-style-windowsmobile -no-feature-style-s60 -openssl-linked\n+  OPENSSL_LIBS=\"-L$DEPSDIR/lib -lssl -lcrypto -lgdi32\" ./configure -prefix $INSTDIR -bindir $INSTDIR/host/bin -I $DEPSDIR/include  -confirm-license -release -opensource -static -no-qt3support -xplatform unsupported/win32-g++-cross -no-multimedia -no-audio-backend -no-phonon -no-phonon-backend -no-declarative -no-script -no-scripttools -no-javascript-jit -no-webkit -no-svg -no-xmlpatterns -no-sql-sqlite -no-nis -no-cups -no-iconv -no-dbus -no-gif -no-libtiff -no-opengl -nomake examples -nomake demos -nomake docs -no-feature-style-plastique -no-feature-style-cleanlooks -no-feature-style-motif -no-feature-style-cde -no-feature-style-windowsce -no-feature-style-windowsmobile -no-feature-style-s60 -openssl-linked\n   find . -name *.prl | xargs -l sed 's|/\\.||' -i\n   find . -name *.prl | xargs -l sed 's|/$||' -i\n   make $MAKEOPTS install\n@@ -53,4 +55,4 @@ script: |\n \n   # as zip stores file timestamps, use faketime to intercept stat calls to set dates for all files to reference date\n   export LD_PRELOAD=/usr/lib/faketime/libfaketime.so.1\n-  zip -r $OUTDIR/qt-win32-4.8.3-gitian-r2.zip *\n+  zip -r $OUTDIR/qt-win32-4.8.3-gitian-r3.zip *"
      },
      {
        "sha": "533be6cffaf5e1c9d0eb287ffbdcbb831dc6074f",
        "filename": "contrib/macdeploy/macdeployqtplus",
        "status": "modified",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/35b8af92265ed74de63c3818e5290c27b3f35df2/contrib/macdeploy/macdeployqtplus",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/35b8af92265ed74de63c3818e5290c27b3f35df2/contrib/macdeploy/macdeployqtplus",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/macdeployqtplus?ref=35b8af92265ed74de63c3818e5290c27b3f35df2",
        "patch": "@@ -651,6 +651,23 @@ elif config.sign:\n # ------------------------------------------------\n \n if config.dmg is not None:\n+\n+    #Patch in check_output for Python 2.6\n+    if \"check_output\" not in dir( subprocess ):\n+        def f(*popenargs, **kwargs):\n+            if 'stdout' in kwargs:\n+                raise ValueError('stdout argument not allowed, it will be overridden.')\n+            process = subprocess.Popen(stdout=subprocess.PIPE, *popenargs, **kwargs)\n+            output, unused_err = process.communicate()\n+            retcode = process.poll()\n+            if retcode:\n+                cmd = kwargs.get(\"args\")\n+                if cmd is None:\n+                    cmd = popenargs[0]\n+                raise CalledProcessError(retcode, cmd)\n+            return output\n+        subprocess.check_output = f\n+\n     def runHDIUtil(verb, image_basename, **kwargs):\n         hdiutil_args = [\"hdiutil\", verb, image_basename + \".dmg\"]\n         if kwargs.has_key(\"capture_stdout\"):"
      },
      {
        "sha": "e7f62c4a3964d98741c036a0dde2983c556801c7",
        "filename": "contrib/macdeploy/notes.txt",
        "status": "modified",
        "additions": 6,
        "deletions": 18,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/35b8af92265ed74de63c3818e5290c27b3f35df2/contrib/macdeploy/notes.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/35b8af92265ed74de63c3818e5290c27b3f35df2/contrib/macdeploy/notes.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/notes.txt?ref=35b8af92265ed74de63c3818e5290c27b3f35df2",
        "patch": "@@ -1,26 +1,14 @@\n-\n-macdeployqtplus works best on OS X Lion, for Snow Leopard you'd need to install\n-Python 2.7 and make it your default Python installation.\n-\n You will need the appscript package for the fancy disk image creation to work.\n Install it by invoking \"sudo easy_install appscript\".\n \n-This script should be invoked in the target directory like this:\n-$source_dir/contrib/macdeploy/macdeployqtplus Bitcoin-Qt.app -add-qt-tr da,de,es,hu,ru,uk,zh_CN,zh_TW -dmg -fancy $source_dir/contrib/macdeploy/fancy.plist -verbose 2\n+For Snow Leopard (which uses Python 2.6), you will need the param_parser package.\n+Install it by invoking \"sudo easy_install argparse\"\n+\n+This script should not be run manually, instead, after building as usual:\n+\"make deploy\"\n \n During the process, the disk image window will pop up briefly where the fancy\n settings are applied. This is normal, please do not interfere.\n \n-You can also set up Qt Creator for invoking the script. For this, go to the\n-\"Projects\" tab on the left side, switch to \"Run Settings\" above and add a\n-deploy configuration. Next add a deploy step choosing \"Custom Process Step\".\n-Fill in the following.\n-\n-Enable custom process step: [x]\n-Command: %{sourceDir}/contrib/macdeploy/macdeployqtplus\n-Working directory: %{buildDir}\n-Command arguments: Bitcoin-Qt.app -add-qt-tr da,de,es,hu,ru,uk,zh_CN,zh_TW -dmg -fancy %{sourceDir}/contrib/macdeploy/fancy.plist -verbose 2\n-\n-After that you can start the deployment process through the menu with\n-Build -> Deploy Project \"bitcoin-qt\"\n+When finished, it will produce Bitcoin-Qt.dmg.\n "
      },
      {
        "sha": "b2573e49de6517807dcef0fced11b984058ae7af",
        "filename": "doc/build-unix.md",
        "status": "modified",
        "additions": 21,
        "deletions": 16,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/35b8af92265ed74de63c3818e5290c27b3f35df2/doc/build-unix.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/35b8af92265ed74de63c3818e5290c27b3f35df2/doc/build-unix.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-unix.md?ref=35b8af92265ed74de63c3818e5290c27b3f35df2",
        "patch": "@@ -5,10 +5,12 @@ Some notes on how to build Bitcoin in Unix.\n To Build\n ---------------------\n \n-\tcd src/\n-\tmake -f makefile.unix\t\t# Headless bitcoin\n+\t./autogen.sh\n+\t./configure\n+\tmake\n \n-See [readme-qt.md](readme-qt.md) for instructions on building Bitcoin-Qt, the graphical user interface.\n+This will build bitcoin-qt as well if the dependencies are met.\n+See [readme-qt.md](readme-qt.md) for more information.\n \n Dependencies\n ---------------------\n@@ -22,15 +24,15 @@ Dependencies\n \n [miniupnpc](http://miniupnp.free.fr/) may be used for UPnP port mapping.  It can be downloaded from [here](\n http://miniupnp.tuxfamily.org/files/).  UPnP support is compiled in and\n-turned off by default.  Set USE_UPNP to a different value to control this:\n+turned off by default.  See the configure options for upnp behavior desired:\n \n-\tUSE_UPNP=     No UPnP support miniupnp not required\n-\tUSE_UPNP=0    (the default) UPnP support turned off by default at runtime\n-\tUSE_UPNP=1    UPnP support turned on by default at runtime\n+\t--with-miniupnpc         No UPnP support miniupnp not required\n+\t--disable-upnp-default   (the default) UPnP support turned off by default at runtime\n+\t--enable-upnp-default    UPnP support turned on by default at runtime\n \n IPv6 support may be disabled by setting:\n \n-\tUSE_IPV6=0    Disable IPv6 support\n+\t--disable-ipv6           Disable IPv6 support\n \n Licenses of statically linked libraries:\n  Berkeley DB   New BSD license with additional requirement that linked\n@@ -70,7 +72,7 @@ for other Ubuntu & Debian:\n \n Optional:\n \n-\tsudo apt-get install libminiupnpc-dev (see USE_UPNP compile flag)\n+\tsudo apt-get install libminiupnpc-dev (see --with-miniupnpc and --enable-upnp-default)\n \n \n Dependency Build Instructions: Gentoo\n@@ -83,8 +85,9 @@ Note: If you just want to install bitcoind on Gentoo, you can add the Bitcoin ov\n \n Take the following steps to build (no UPnP support):\n \n-\tcd ${BITCOIN_DIR}/src\n-\tmake -f makefile.unix USE_UPNP= USE_IPV6=1 BDB_INCLUDE_PATH='/usr/include/db4.8'\n+\tcd ${BITCOIN_DIR}\n+\t./autogen.sh\n+\t./configure --without-miniupnpc CXXFLAGS=\"-i/usr/include/db4.8\"\n \tstrip bitcoind\n \n \n@@ -123,7 +126,13 @@ If you need to build Boost yourself:\n Security\n --------\n To help make your bitcoin installation more secure by making certain attacks impossible to\n-exploit even if a vulnerability is found, you can take the following measures:\n+exploit even if a vulnerability is found, binaries are hardened by default.\n+This can be disabled with:\n+\n+./configure --enable-hardening\n+\n+\n+Hardening enables the following features:\n \n * Position Independent Executable\n     Build position independent code to take advantage of Address Space Layout Randomization\n@@ -135,10 +144,6 @@ exploit even if a vulnerability is found, you can take the following measures:\n     On an Amd64 processor where a library was not compiled with -fPIC, this will cause an error\n     such as: \"relocation R_X86_64_32 against `......' can not be used when making a shared object;\"\n \n-    To build with PIE, use:\n-\n-    \tmake -f makefile.unix ... -e PIE=1\n-\n     To test that you have built PIE executable, install scanelf, part of paxutils, and use:\n \n     \tscanelf -e ./bitcoin"
      },
      {
        "sha": "5aa849af106c738c528a3d2a965e993912b81eca",
        "filename": "doc/readme-qt.md",
        "status": "modified",
        "additions": 12,
        "deletions": 39,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/35b8af92265ed74de63c3818e5290c27b3f35df2/doc/readme-qt.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/35b8af92265ed74de63c3818e5290c27b3f35df2/doc/readme-qt.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/readme-qt.md?ref=35b8af92265ed74de63c3818e5290c27b3f35df2",
        "patch": "@@ -31,14 +31,8 @@ For Qt 5 you need the following, otherwise you get an error with lrelease when r\n \n     apt-get install qt5-qmake libqt5gui5 libqt5core5 libqt5dbus5 qttools5-dev-tools\n \n-then execute the following:\n-\n-    qmake\n-    make\n-\n-Alternatively, install [Qt Creator](http://qt-project.org/downloads/) and open the `bitcoin-qt.pro` file. \n-An executable named `bitcoin-qt` will be built.\n-\n+Once these are installed, they will be found by configure and bitcoin-qt will be\n+built by default.\n \n \n ### Mac OS X\n@@ -55,52 +49,31 @@ An executable named `bitcoin-qt` will be built.\n \t\tbrew update\n \t\tbrew install boost miniupnpc openssl berkeley-db4 protobuf\n \n-- If using HomeBrew,  edit `bitcoin-qt.pro` to account for library location differences. There's a diff in `contrib/homebrew/bitcoin-qt-pro.patch` that shows what you need to change, or you can just patch by doing\n-\n-        patch -p1 < contrib/homebrew/bitcoin.qt.pro.patch\n-\n-- Open the bitcoin-qt.pro file in Qt Creator and build as normal (cmd+B)\n-\n-\n Build Configuration Options\n ---------------------\n \n ### UPnP port forwarding\n \n-To use UPnP for port forwarding behind a NAT router (recommended, as more connections overall allow for a faster and more stable bitcoin experience), pass the following argument to qmake:\n-\n+UPnP support is compiled in when possible and turned off by default.  See the\n+configure options for upnp behavior desired:\n \n-\n-    qmake \"USE_UPNP=1\"\n-\n-(in **Qt Creator**, you can find the setting for additional qmake arguments under \"Projects\" -> \"Build Settings\" -> \"Build Steps\", then click \"Details\" next to **qmake**)\n-\n-This requires miniupnpc for UPnP port mapping.  It can be downloaded from [here](\n-http://miniupnp.tuxfamily.org/files/).  UPnP support is not compiled in by default.\n-\n-Set USE_UPNP to a different value to control this:\n-\n-\n-\tUSE_UPNP=-\tno UPnP support, miniupnpc not required;                                 \n-\tUSE_UPNP=0  (the default) built with UPnP, support turned off by default at runtime; \n-\tUSE_UPNP=1  build with UPnP support turned on by default at runtime.                 \n+        --with-miniupnpc         No UPnP support miniupnp not required\n+        --disable-upnp-default   (the default) UPnP support turned off by default at runtime\n+        --enable-upnp-default    UPnP support turned on by default at runtime\n \n ### Notification support for recent (k)ubuntu versions\n \n-To see desktop notifications on (k)ubuntu versions starting from 10.04, enable usage of the\n-FreeDesktop notification interface through DBUS using the following qmake option:\n-\n-\n+DBUS support is enabled by default if dependencies are met.\n \n-    qmake \"USE_DBUS=1\"\n+See the --with-qtdbus configure option.\n \n ### Generation of QR codes\n \n-[libqrencode](http://fukuchi.org/works/qrencode/) may be used to generate QRCode images for payment requests. Pass the USE_QRCODE flag to qmake to control this:\n+[libqrencode](http://fukuchi.org/works/qrencode/) may be used to generate QRCode images for payment requests.\n \n+QR code support is enabled by default if dependencies are met.\n \n-\tUSE_QRCODE=0 \t(the default) No QRCode support - libarcode not required                 \n-\tUSE_QRCODE=1 \tQRCode support enabled                                                   \n+See the --with-qrencode configure option.\n \n Warnings\n ---------------------"
      },
      {
        "sha": "2c991eb03aa25f173f4275d72f2b66c246e219e1",
        "filename": "doc/unit-tests.md",
        "status": "modified",
        "additions": 10,
        "deletions": 27,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/35b8af92265ed74de63c3818e5290c27b3f35df2/doc/unit-tests.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/35b8af92265ed74de63c3818e5290c27b3f35df2/doc/unit-tests.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/unit-tests.md?ref=35b8af92265ed74de63c3818e5290c27b3f35df2",
        "patch": "@@ -1,35 +1,18 @@\n-Compiling/running bitcoind unit tests\n+Compiling/running unit tests\n ------------------------------------\n \n-bitcoind unit tests are in the `src/test/` directory; they\n-use the Boost::Test unit-testing framework.\n+Unit tests will be automatically compiled if dependencies were met in configure\n+and tests weren't explicitly disabled.\n \n-To compile and run the tests:\n+After configuring, they can be run with 'make check'.\n \n-\tcd src\n-\tmake -f makefile.unix test_bitcoin  # Replace makefile.unix if you're not on unix\n-\t./test_bitcoin   # Runs the unit tests\n+To run the bitcoind tests manually, launch src/test/test_bitcoin .\n \n-If all tests succeed the last line of output will be:\n-`*** No errors detected`\n-\n-To add more tests, add `BOOST_AUTO_TEST_CASE` functions to the existing\n+To add more bitcoind tests, add `BOOST_AUTO_TEST_CASE` functions to the existing\n .cpp files in the test/ directory or add new .cpp files that\n-implement new BOOST_AUTO_TEST_SUITE sections (the makefiles are\n-set up to add test/*.cpp to test_bitcoin automatically).\n-\n-\n-Compiling/running Bitcoin-Qt unit tests\n----------------------------------------\n-\n-Bitcoin-Qt unit tests are in the src/qt/test/ directory; they\n-use the Qt unit-testing framework.\n-\n-To compile and run the tests:\n+implement new BOOST_AUTO_TEST_SUITE sections.\n \n-\tqmake bitcoin-qt.pro BITCOIN_QT_TEST=1\n-\tmake\n-\t./bitcoin-qt_test\n+To run the bitcoin-qt tests manualy, launch src/qt/test/bitcoin-qt_test\n \n-To add more tests, add them to the `src/qt/test/` directory,\n-the `src/qt/test/test_main.cpp` file, and bitcoin-qt.pro.\n+To add more bitcoin-qt tests, add them to the `src/qt/test/` directory and\n+the `src/qt/test/test_main.cpp` file."
      },
      {
        "sha": "c5b26b52e6cdb5891332f7e87addae9306ba7107",
        "filename": "pkg.m4",
        "status": "added",
        "additions": 214,
        "deletions": 0,
        "changes": 214,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/35b8af92265ed74de63c3818e5290c27b3f35df2/pkg.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/35b8af92265ed74de63c3818e5290c27b3f35df2/pkg.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/pkg.m4?ref=35b8af92265ed74de63c3818e5290c27b3f35df2",
        "patch": "@@ -0,0 +1,214 @@\n+# pkg.m4 - Macros to locate and utilise pkg-config.            -*- Autoconf -*-\n+# serial 1 (pkg-config-0.24)\n+# \n+# Copyright \u00a9 2004 Scott James Remnant <scott@netsplit.com>.\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 2 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful, but\n+# WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+# General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program; if not, write to the Free Software\n+# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n+#\n+# As a special exception to the GNU General Public License, if you\n+# distribute this file as part of a program that contains a\n+# configuration script generated by Autoconf, you may include it under\n+# the same distribution terms that you use for the rest of that program.\n+\n+# PKG_PROG_PKG_CONFIG([MIN-VERSION])\n+# ----------------------------------\n+AC_DEFUN([PKG_PROG_PKG_CONFIG],\n+[m4_pattern_forbid([^_?PKG_[A-Z_]+$])\n+m4_pattern_allow([^PKG_CONFIG(_(PATH|LIBDIR|SYSROOT_DIR|ALLOW_SYSTEM_(CFLAGS|LIBS)))?$])\n+m4_pattern_allow([^PKG_CONFIG_(DISABLE_UNINSTALLED|TOP_BUILD_DIR|DEBUG_SPEW)$])\n+AC_ARG_VAR([PKG_CONFIG], [path to pkg-config utility])\n+AC_ARG_VAR([PKG_CONFIG_PATH], [directories to add to pkg-config's search path])\n+AC_ARG_VAR([PKG_CONFIG_LIBDIR], [path overriding pkg-config's built-in search path])\n+\n+if test \"x$ac_cv_env_PKG_CONFIG_set\" != \"xset\"; then\n+\tAC_PATH_TOOL([PKG_CONFIG], [pkg-config])\n+fi\n+if test -n \"$PKG_CONFIG\"; then\n+\t_pkg_min_version=m4_default([$1], [0.9.0])\n+\tAC_MSG_CHECKING([pkg-config is at least version $_pkg_min_version])\n+\tif $PKG_CONFIG --atleast-pkgconfig-version $_pkg_min_version; then\n+\t\tAC_MSG_RESULT([yes])\n+\telse\n+\t\tAC_MSG_RESULT([no])\n+\t\tPKG_CONFIG=\"\"\n+\tfi\n+fi[]dnl\n+])# PKG_PROG_PKG_CONFIG\n+\n+# PKG_CHECK_EXISTS(MODULES, [ACTION-IF-FOUND], [ACTION-IF-NOT-FOUND])\n+#\n+# Check to see whether a particular set of modules exists.  Similar\n+# to PKG_CHECK_MODULES(), but does not set variables or print errors.\n+#\n+# Please remember that m4 expands AC_REQUIRE([PKG_PROG_PKG_CONFIG])\n+# only at the first occurence in configure.ac, so if the first place\n+# it's called might be skipped (such as if it is within an \"if\", you\n+# have to call PKG_CHECK_EXISTS manually\n+# --------------------------------------------------------------\n+AC_DEFUN([PKG_CHECK_EXISTS],\n+[AC_REQUIRE([PKG_PROG_PKG_CONFIG])dnl\n+if test -n \"$PKG_CONFIG\" && \\\n+    AC_RUN_LOG([$PKG_CONFIG --exists --print-errors \"$1\"]); then\n+  m4_default([$2], [:])\n+m4_ifvaln([$3], [else\n+  $3])dnl\n+fi])\n+\n+# _PKG_CONFIG([VARIABLE], [COMMAND], [MODULES])\n+# ---------------------------------------------\n+m4_define([_PKG_CONFIG],\n+[if test -n \"$$1\"; then\n+    pkg_cv_[]$1=\"$$1\"\n+ elif test -n \"$PKG_CONFIG\"; then\n+    PKG_CHECK_EXISTS([$3],\n+                     [pkg_cv_[]$1=`$PKG_CONFIG --[]$2 \"$3\" 2>/dev/null`\n+\t\t      test \"x$?\" != \"x0\" && pkg_failed=yes ],\n+\t\t     [pkg_failed=yes])\n+ else\n+    pkg_failed=untried\n+fi[]dnl\n+])# _PKG_CONFIG\n+\n+# _PKG_SHORT_ERRORS_SUPPORTED\n+# -----------------------------\n+AC_DEFUN([_PKG_SHORT_ERRORS_SUPPORTED],\n+[AC_REQUIRE([PKG_PROG_PKG_CONFIG])\n+if $PKG_CONFIG --atleast-pkgconfig-version 0.20; then\n+        _pkg_short_errors_supported=yes\n+else\n+        _pkg_short_errors_supported=no\n+fi[]dnl\n+])# _PKG_SHORT_ERRORS_SUPPORTED\n+\n+\n+# PKG_CHECK_MODULES(VARIABLE-PREFIX, MODULES, [ACTION-IF-FOUND],\n+# [ACTION-IF-NOT-FOUND])\n+#\n+#\n+# Note that if there is a possibility the first call to\n+# PKG_CHECK_MODULES might not happen, you should be sure to include an\n+# explicit call to PKG_PROG_PKG_CONFIG in your configure.ac\n+#\n+#\n+# --------------------------------------------------------------\n+AC_DEFUN([PKG_CHECK_MODULES],\n+[AC_REQUIRE([PKG_PROG_PKG_CONFIG])dnl\n+AC_ARG_VAR([$1][_CFLAGS], [C compiler flags for $1, overriding pkg-config])dnl\n+AC_ARG_VAR([$1][_LIBS], [linker flags for $1, overriding pkg-config])dnl\n+\n+pkg_failed=no\n+AC_MSG_CHECKING([for $1])\n+\n+_PKG_CONFIG([$1][_CFLAGS], [cflags], [$2])\n+_PKG_CONFIG([$1][_LIBS], [libs], [$2])\n+\n+m4_define([_PKG_TEXT], [Alternatively, you may set the environment variables $1[]_CFLAGS\n+and $1[]_LIBS to avoid the need to call pkg-config.\n+See the pkg-config man page for more details.])\n+\n+if test $pkg_failed = yes; then\n+   \tAC_MSG_RESULT([no])\n+        _PKG_SHORT_ERRORS_SUPPORTED\n+        if test $_pkg_short_errors_supported = yes; then\n+\t        $1[]_PKG_ERRORS=`$PKG_CONFIG --short-errors --print-errors --cflags --libs \"$2\" 2>&1`\n+        else \n+\t        $1[]_PKG_ERRORS=`$PKG_CONFIG --print-errors --cflags --libs \"$2\" 2>&1`\n+        fi\n+\t# Put the nasty error message in config.log where it belongs\n+\techo \"$$1[]_PKG_ERRORS\" >&AS_MESSAGE_LOG_FD\n+\n+\tm4_default([$4], [AC_MSG_ERROR(\n+[Package requirements ($2) were not met:\n+\n+$$1_PKG_ERRORS\n+\n+Consider adjusting the PKG_CONFIG_PATH environment variable if you\n+installed software in a non-standard prefix.\n+\n+_PKG_TEXT])[]dnl\n+        ])\n+elif test $pkg_failed = untried; then\n+     \tAC_MSG_RESULT([no])\n+\tm4_default([$4], [AC_MSG_FAILURE(\n+[The pkg-config script could not be found or is too old.  Make sure it\n+is in your PATH or set the PKG_CONFIG environment variable to the full\n+path to pkg-config.\n+\n+_PKG_TEXT\n+\n+To get pkg-config, see <http://pkg-config.freedesktop.org/>.])[]dnl\n+        ])\n+else\n+\t$1[]_CFLAGS=$pkg_cv_[]$1[]_CFLAGS\n+\t$1[]_LIBS=$pkg_cv_[]$1[]_LIBS\n+        AC_MSG_RESULT([yes])\n+\t$3\n+fi[]dnl\n+])# PKG_CHECK_MODULES\n+\n+\n+# PKG_INSTALLDIR(DIRECTORY)\n+# -------------------------\n+# Substitutes the variable pkgconfigdir as the location where a module\n+# should install pkg-config .pc files. By default the directory is\n+# $libdir/pkgconfig, but the default can be changed by passing\n+# DIRECTORY. The user can override through the --with-pkgconfigdir\n+# parameter.\n+AC_DEFUN([PKG_INSTALLDIR],\n+[m4_pushdef([pkg_default], [m4_default([$1], ['${libdir}/pkgconfig'])])\n+m4_pushdef([pkg_description],\n+    [pkg-config installation directory @<:@]pkg_default[@:>@])\n+AC_ARG_WITH([pkgconfigdir],\n+    [AS_HELP_STRING([--with-pkgconfigdir], pkg_description)],,\n+    [with_pkgconfigdir=]pkg_default)\n+AC_SUBST([pkgconfigdir], [$with_pkgconfigdir])\n+m4_popdef([pkg_default])\n+m4_popdef([pkg_description])\n+]) dnl PKG_INSTALLDIR\n+\n+\n+# PKG_NOARCH_INSTALLDIR(DIRECTORY)\n+# -------------------------\n+# Substitutes the variable noarch_pkgconfigdir as the location where a\n+# module should install arch-independent pkg-config .pc files. By\n+# default the directory is $datadir/pkgconfig, but the default can be\n+# changed by passing DIRECTORY. The user can override through the\n+# --with-noarch-pkgconfigdir parameter.\n+AC_DEFUN([PKG_NOARCH_INSTALLDIR],\n+[m4_pushdef([pkg_default], [m4_default([$1], ['${datadir}/pkgconfig'])])\n+m4_pushdef([pkg_description],\n+    [pkg-config arch-independent installation directory @<:@]pkg_default[@:>@])\n+AC_ARG_WITH([noarch-pkgconfigdir],\n+    [AS_HELP_STRING([--with-noarch-pkgconfigdir], pkg_description)],,\n+    [with_noarch_pkgconfigdir=]pkg_default)\n+AC_SUBST([noarch_pkgconfigdir], [$with_noarch_pkgconfigdir])\n+m4_popdef([pkg_default])\n+m4_popdef([pkg_description])\n+]) dnl PKG_NOARCH_INSTALLDIR\n+\n+\n+# PKG_CHECK_VAR(VARIABLE, MODULE, CONFIG-VARIABLE,\n+# [ACTION-IF-FOUND], [ACTION-IF-NOT-FOUND])\n+# -------------------------------------------\n+# Retrieves the value of the pkg-config variable for the given module.\n+AC_DEFUN([PKG_CHECK_VAR],\n+[AC_REQUIRE([PKG_PROG_PKG_CONFIG])dnl\n+AC_ARG_VAR([$1], [value of $3 for $2, overriding pkg-config])dnl\n+\n+_PKG_CONFIG([$1], [variable=\"][$3][\"], [$2])\n+AS_VAR_COPY([$1], [pkg_cv_][$1])\n+\n+AS_VAR_IF([$1], [\"\"], [$5], [$4])dnl\n+])# PKG_CHECK_VAR"
      },
      {
        "sha": "b353c57909d4aa0c74228df8d5d95f83f68dd8e8",
        "filename": "qa/pull-tester/build-tests.sh.in",
        "status": "added",
        "additions": 45,
        "deletions": 0,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/35b8af92265ed74de63c3818e5290c27b3f35df2/qa/pull-tester/build-tests.sh.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/35b8af92265ed74de63c3818e5290c27b3f35df2/qa/pull-tester/build-tests.sh.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/build-tests.sh.in?ref=35b8af92265ed74de63c3818e5290c27b3f35df2",
        "patch": "@@ -0,0 +1,45 @@\n+#!/bin/bash\n+# Param1: The prefix to mingw staging\n+# Param2: Path to java comparison tool\n+# Param3: Number of make jobs. Defaults to 1.\n+\n+set -e\n+set -o xtrace\n+\n+MINGWPREFIX=$1\n+JAVA_COMPARISON_TOOL=$2\n+JOBS=${3-1}\n+\n+if [ $# -lt 2 ]; then\n+  echo \"Usage: $0 [mingw-prefix] [java-comparison-tool] <make jobs>\"\n+  exit 1\n+fi\n+\n+DISTDIR=@PACKAGE@-@VERSION@\n+\n+cd @abs_top_srcdir@\n+make distdir\n+mv $DISTDIR linux-build\n+cd linux-build\n+./configure --with-comparison-tool=\"$JAVA_COMPARISON_TOOL\"\n+make -j$JOBS\n+make check\n+\n+#Test code coverage\n+cd @abs_top_srcdir@\n+make distdir\n+mv $DISTDIR linux-coverage-build\n+cd linux-coverage-build\n+./configure --enable-lcov --with-comparison-tool=\"$JAVA_COMPARISON_TOOL\"\n+make -j$JOBS\n+make cov\n+\n+# win32 build disabled until pull-tester has updated dependencies\n+##Test win32 build\n+#cd @abs_top_srcdir@\n+#make distdir\n+#mv $DISTDIR win32-build\n+#cd win32-build\n+#./configure --prefix=$MINGWPREFIX --host=i586-mingw32msvc --with-qt-bindir=$MINGWPREFIX/host/bin --with-qt-plugindir=$MINGWPREFIX/plugins --with-qt-incdir=$MINGWPREFIX/include --with-boost=$MINGWPREFIX --with-protoc-bindir=$MINGWPREFIX/host/bin --with-comparison-tool=\"$JAVA_COMPARISON_TOOL\" CPPFLAGS=-I$MINGWPREFIX/include LDFLAGS=-L$MINGWPREFIX/lib\n+#make -j$JOBS\n+#make check"
      },
      {
        "sha": "13c800c16ac27b1758d4c2d8f4868e15d596cc0f",
        "filename": "qa/pull-tester/pull-tester.sh",
        "status": "added",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/35b8af92265ed74de63c3818e5290c27b3f35df2/qa/pull-tester/pull-tester.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/35b8af92265ed74de63c3818e5290c27b3f35df2/qa/pull-tester/pull-tester.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/pull-tester.sh?ref=35b8af92265ed74de63c3818e5290c27b3f35df2",
        "patch": "@@ -0,0 +1,15 @@\n+#!/bin/sh\n+# Helper script for pull-tester.\n+#Param 1: path to bitcoin srcroot\n+#Param ...: arguments for build-test.sh\n+\n+if [ $# -lt 1 ]; then\n+  echo \"usage: $0 [bitcoin srcroot] build-test arguments...\"\n+fi\n+\n+cd $1\n+shift\n+\n+./autogen.sh\n+./configure\n+./qa/pull-tester/build-tests.sh \"$@\""
      },
      {
        "sha": "e02fef3b56c7d36d46ec584a011e27dfc6c0804b",
        "filename": "qa/pull-tester/run-bitcoind-for-test.sh.in",
        "status": "added",
        "additions": 27,
        "deletions": 0,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/35b8af92265ed74de63c3818e5290c27b3f35df2/qa/pull-tester/run-bitcoind-for-test.sh.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/35b8af92265ed74de63c3818e5290c27b3f35df2/qa/pull-tester/run-bitcoind-for-test.sh.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/run-bitcoind-for-test.sh.in?ref=35b8af92265ed74de63c3818e5290c27b3f35df2",
        "patch": "@@ -0,0 +1,27 @@\n+#!/bin/bash\n+DATADIR=\"@abs_top_builddir@/.bitcoin\"\n+rm -rf \"$DATADIR\"\n+mkdir -p \"$DATADIR\"/regtest\n+touch \"$DATADIR/regtest/debug.log\"\n+tail -q -n 1 -F \"$DATADIR/regtest/debug.log\" | grep -m 1 -q \"Done loading\" &\n+WAITER=$!\n+\"@abs_top_builddir@/src/bitcoind@EXEEXT@\" -connect=0.0.0.0 -datadir=\"$DATADIR\" -rpcuser=user -rpcpassword=pass -listen -keypool=3 -debug -logtimestamps -port=18444 -regtest &\n+BITCOIND=$!\n+\n+#Install a watchdog.\n+(sleep 10 && kill -0 $WAITER 2>/dev/null && kill -9 $BITCOIND $$)&\n+wait $WAITER\n+\n+if [ -n \"$TIMEOUT\" ]; then\n+  timeout \"$TIMEOUT\"s \"$@\"\n+  RETURN=$?\n+else\n+  \"$@\"\n+  RETURN=$?\n+fi\n+\n+(sleep 15 && kill -0 $BITCOIND 2>/dev/null && kill -9 $BITCOIND $$)&\n+kill $BITCOIND && wait $BITCOIND\n+\n+# timeout returns 124 on timeout, otherwise the return value of the child\n+exit $RETURN"
      },
      {
        "sha": "da50b0d1099d4337c967e85dfe2f6c25e5d9924f",
        "filename": "share/genbuild.sh",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/35b8af92265ed74de63c3818e5290c27b3f35df2/share/genbuild.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/35b8af92265ed74de63c3818e5290c27b3f35df2/share/genbuild.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/genbuild.sh?ref=35b8af92265ed74de63c3818e5290c27b3f35df2",
        "patch": "@@ -1,17 +1,19 @@\n #!/bin/sh\n-\n+if [ $# -gt 1 ]; then\n+    cd \"$2\"\n+fi\n if [ $# -gt 0 ]; then\n     FILE=\"$1\"\n     shift\n     if [ -f \"$FILE\" ]; then\n         INFO=\"$(head -n 1 \"$FILE\")\"\n     fi\n else\n-    echo \"Usage: $0 <filename>\"\n+    echo \"Usage: $0 <filename> <srcroot>\"\n     exit 1\n fi\n \n-if [ -e \"$(which git)\" ]; then\n+if [ -e \"$(which git)\" -a -d \".git\" ]; then\n     # clean 'dirty' status of touched files that haven't been modified\n     git diff >/dev/null 2>/dev/null \n "
      },
      {
        "sha": "d0dd796561eeaefe0818d793d16773d3e31a691d",
        "filename": "share/qt/Info.plist.in",
        "status": "renamed",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/35b8af92265ed74de63c3818e5290c27b3f35df2/share/qt/Info.plist.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/35b8af92265ed74de63c3818e5290c27b3f35df2/share/qt/Info.plist.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/qt/Info.plist.in?ref=35b8af92265ed74de63c3818e5290c27b3f35df2",
        "patch": "@@ -7,11 +7,11 @@\n   <key>CFBundlePackageType</key>\n   <string>APPL</string>\n   <key>CFBundleGetInfoString</key>\n-  <string>$VERSION, Copyright \u00a9 2009-$YEAR The Bitcoin developers</string>\n+  <string>@CLIENT_VERSION_MAJOR@.@CLIENT_VERSION_MINOR@, Copyright \u00a9 2009-@COPYRIGHT_YEAR@ The Bitcoin developers</string>\n   <key>CFBundleShortVersionString</key>\n-  <string>$VERSION</string>\n+  <string>@CLIENT_VERSION_MAJOR@.@CLIENT_VERSION_MINOR@</string>\n   <key>CFBundleVersion</key>\n-  <string>$VERSION</string>\n+  <string>@CLIENT_VERSION_MAJOR@.@CLIENT_VERSION_MINOR@</string>\n   <key>CFBundleSignature</key>\n   <string>????</string>\n   <key>CFBundleExecutable</key>",
        "previous_filename": "share/qt/Info.plist"
      },
      {
        "sha": "dd378623823a7b4280edeb7e3f67a291003b9d81",
        "filename": "share/setup.nsi.in",
        "status": "renamed",
        "additions": 162,
        "deletions": 162,
        "changes": 324,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/35b8af92265ed74de63c3818e5290c27b3f35df2/share/setup.nsi.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/35b8af92265ed74de63c3818e5290c27b3f35df2/share/setup.nsi.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/setup.nsi.in?ref=35b8af92265ed74de63c3818e5290c27b3f35df2",
        "patch": "@@ -1,162 +1,162 @@\n-Name Bitcoin\r\n-\r\n-RequestExecutionLevel highest\r\n-SetCompressor /SOLID lzma\r\n-\r\n-# General Symbol Definitions\r\n-!define REGKEY \"SOFTWARE\\$(^Name)\"\r\n-!define VERSION 0.8.2\r\n-!define COMPANY \"Bitcoin project\"\r\n-!define URL http://www.bitcoin.org/\r\n-\r\n-# MUI Symbol Definitions\r\n-!define MUI_ICON \"../share/pixmaps/bitcoin.ico\"\r\n-!define MUI_WELCOMEFINISHPAGE_BITMAP \"../share/pixmaps/nsis-wizard.bmp\"\r\n-!define MUI_HEADERIMAGE\r\n-!define MUI_HEADERIMAGE_RIGHT\r\n-!define MUI_HEADERIMAGE_BITMAP \"../share/pixmaps/nsis-header.bmp\"\r\n-!define MUI_FINISHPAGE_NOAUTOCLOSE\r\n-!define MUI_STARTMENUPAGE_REGISTRY_ROOT HKLM\r\n-!define MUI_STARTMENUPAGE_REGISTRY_KEY ${REGKEY}\r\n-!define MUI_STARTMENUPAGE_REGISTRY_VALUENAME StartMenuGroup\r\n-!define MUI_STARTMENUPAGE_DEFAULTFOLDER Bitcoin\r\n-!define MUI_FINISHPAGE_RUN $INSTDIR\\bitcoin-qt.exe\r\n-!define MUI_UNICON \"${NSISDIR}\\Contrib\\Graphics\\Icons\\modern-uninstall.ico\"\r\n-!define MUI_UNWELCOMEFINISHPAGE_BITMAP \"../share/pixmaps/nsis-wizard.bmp\"\r\n-!define MUI_UNFINISHPAGE_NOAUTOCLOSE\r\n-\r\n-# Included files\r\n-!include Sections.nsh\r\n-!include MUI2.nsh\r\n-\r\n-# Variables\r\n-Var StartMenuGroup\r\n-\r\n-# Installer pages\r\n-!insertmacro MUI_PAGE_WELCOME\r\n-!insertmacro MUI_PAGE_DIRECTORY\r\n-!insertmacro MUI_PAGE_STARTMENU Application $StartMenuGroup\r\n-!insertmacro MUI_PAGE_INSTFILES\r\n-!insertmacro MUI_PAGE_FINISH\r\n-!insertmacro MUI_UNPAGE_CONFIRM\r\n-!insertmacro MUI_UNPAGE_INSTFILES\r\n-\r\n-# Installer languages\r\n-!insertmacro MUI_LANGUAGE English\r\n-\r\n-# Installer attributes\r\n-OutFile bitcoin-0.8.2-win32-setup.exe\r\n-InstallDir $PROGRAMFILES\\Bitcoin\r\n-CRCCheck on\r\n-XPStyle on\r\n-BrandingText \" \"\r\n-ShowInstDetails show\r\n-VIProductVersion 0.8.2.2\r\n-VIAddVersionKey ProductName Bitcoin\r\n-VIAddVersionKey ProductVersion \"${VERSION}\"\r\n-VIAddVersionKey CompanyName \"${COMPANY}\"\r\n-VIAddVersionKey CompanyWebsite \"${URL}\"\r\n-VIAddVersionKey FileVersion \"${VERSION}\"\r\n-VIAddVersionKey FileDescription \"\"\r\n-VIAddVersionKey LegalCopyright \"\"\r\n-InstallDirRegKey HKCU \"${REGKEY}\" Path\r\n-ShowUninstDetails show\r\n-\r\n-# Installer sections\r\n-Section -Main SEC0000\r\n-    SetOutPath $INSTDIR\r\n-    SetOverwrite on\r\n-    File ../release/bitcoin-qt.exe\r\n-    File /oname=COPYING.txt ../COPYING\r\n-    File /oname=readme.txt ../doc/README_windows.txt\r\n-    SetOutPath $INSTDIR\\daemon\r\n-    File ../src/bitcoind.exe\r\n-    SetOutPath $INSTDIR\\src\r\n-    File /r /x *.exe /x *.o ../src\\*.*\r\n-    SetOutPath $INSTDIR\r\n-    WriteRegStr HKCU \"${REGKEY}\\Components\" Main 1\r\n-\r\n-    # Remove old wxwidgets-based-bitcoin executable and locales:\r\n-    Delete /REBOOTOK $INSTDIR\\bitcoin.exe\r\n-    RMDir /r /REBOOTOK $INSTDIR\\locale\r\n-SectionEnd\r\n-\r\n-Section -post SEC0001\r\n-    WriteRegStr HKCU \"${REGKEY}\" Path $INSTDIR\r\n-    SetOutPath $INSTDIR\r\n-    WriteUninstaller $INSTDIR\\uninstall.exe\r\n-    !insertmacro MUI_STARTMENU_WRITE_BEGIN Application\r\n-    CreateDirectory $SMPROGRAMS\\$StartMenuGroup\r\n-    CreateShortcut \"$SMPROGRAMS\\$StartMenuGroup\\Bitcoin.lnk\" $INSTDIR\\bitcoin-qt.exe\r\n-    CreateShortcut \"$SMPROGRAMS\\$StartMenuGroup\\Uninstall Bitcoin.lnk\" $INSTDIR\\uninstall.exe\r\n-    !insertmacro MUI_STARTMENU_WRITE_END\r\n-    WriteRegStr HKCU \"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\$(^Name)\" DisplayName \"$(^Name)\"\r\n-    WriteRegStr HKCU \"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\$(^Name)\" DisplayVersion \"${VERSION}\"\r\n-    WriteRegStr HKCU \"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\$(^Name)\" Publisher \"${COMPANY}\"\r\n-    WriteRegStr HKCU \"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\$(^Name)\" URLInfoAbout \"${URL}\"\r\n-    WriteRegStr HKCU \"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\$(^Name)\" DisplayIcon $INSTDIR\\uninstall.exe\r\n-    WriteRegStr HKCU \"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\$(^Name)\" UninstallString $INSTDIR\\uninstall.exe\r\n-    WriteRegDWORD HKCU \"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\$(^Name)\" NoModify 1\r\n-    WriteRegDWORD HKCU \"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\$(^Name)\" NoRepair 1\r\n-    WriteRegStr HKCR \"bitcoin\" \"URL Protocol\" \"\"\r\n-    WriteRegStr HKCR \"bitcoin\" \"\" \"URL:Bitcoin\"\r\n-    WriteRegStr HKCR \"bitcoin\\DefaultIcon\" \"\" $INSTDIR\\bitcoin-qt.exe\r\n-    WriteRegStr HKCR \"bitcoin\\shell\\open\\command\" \"\" '\"$INSTDIR\\bitcoin-qt.exe\" \"%1\"'\r\n-SectionEnd\r\n-\r\n-# Macro for selecting uninstaller sections\r\n-!macro SELECT_UNSECTION SECTION_NAME UNSECTION_ID\r\n-    Push $R0\r\n-    ReadRegStr $R0 HKCU \"${REGKEY}\\Components\" \"${SECTION_NAME}\"\r\n-    StrCmp $R0 1 0 next${UNSECTION_ID}\r\n-    !insertmacro SelectSection \"${UNSECTION_ID}\"\r\n-    GoTo done${UNSECTION_ID}\r\n-next${UNSECTION_ID}:\r\n-    !insertmacro UnselectSection \"${UNSECTION_ID}\"\r\n-done${UNSECTION_ID}:\r\n-    Pop $R0\r\n-!macroend\r\n-\r\n-# Uninstaller sections\r\n-Section /o -un.Main UNSEC0000\r\n-    Delete /REBOOTOK $INSTDIR\\bitcoin-qt.exe\r\n-    Delete /REBOOTOK $INSTDIR\\COPYING.txt\r\n-    Delete /REBOOTOK $INSTDIR\\readme.txt\r\n-    RMDir /r /REBOOTOK $INSTDIR\\daemon\r\n-    RMDir /r /REBOOTOK $INSTDIR\\src\r\n-    DeleteRegValue HKCU \"${REGKEY}\\Components\" Main\r\n-SectionEnd\r\n-\r\n-Section -un.post UNSEC0001\r\n-    DeleteRegKey HKCU \"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\$(^Name)\"\r\n-    Delete /REBOOTOK \"$SMPROGRAMS\\$StartMenuGroup\\Uninstall Bitcoin.lnk\"\r\n-    Delete /REBOOTOK \"$SMPROGRAMS\\$StartMenuGroup\\Bitcoin.lnk\"\r\n-    Delete /REBOOTOK \"$SMSTARTUP\\Bitcoin.lnk\"\r\n-    Delete /REBOOTOK $INSTDIR\\uninstall.exe\r\n-    Delete /REBOOTOK $INSTDIR\\debug.log\r\n-    Delete /REBOOTOK $INSTDIR\\db.log\r\n-    DeleteRegValue HKCU \"${REGKEY}\" StartMenuGroup\r\n-    DeleteRegValue HKCU \"${REGKEY}\" Path\r\n-    DeleteRegKey /IfEmpty HKCU \"${REGKEY}\\Components\"\r\n-    DeleteRegKey /IfEmpty HKCU \"${REGKEY}\"\r\n-    DeleteRegKey HKCR \"bitcoin\"\r\n-    RmDir /REBOOTOK $SMPROGRAMS\\$StartMenuGroup\r\n-    RmDir /REBOOTOK $INSTDIR\r\n-    Push $R0\r\n-    StrCpy $R0 $StartMenuGroup 1\r\n-    StrCmp $R0 \">\" no_smgroup\r\n-no_smgroup:\r\n-    Pop $R0\r\n-SectionEnd\r\n-\r\n-# Installer functions\r\n-Function .onInit\r\n-    InitPluginsDir\r\n-FunctionEnd\r\n-\r\n-# Uninstaller functions\r\n-Function un.onInit\r\n-    ReadRegStr $INSTDIR HKCU \"${REGKEY}\" Path\r\n-    !insertmacro MUI_STARTMENU_GETFOLDER Application $StartMenuGroup\r\n-    !insertmacro SELECT_UNSECTION Main ${UNSEC0000}\r\n-FunctionEnd\r\n+Name @PACKAGE_NAME@\n+\n+RequestExecutionLevel highest\n+SetCompressor /SOLID lzma\n+\n+# General Symbol Definitions\n+!define REGKEY \"SOFTWARE\\$(^Name)\"\n+!define VERSION @CLIENT_VERSION_MAJOR@.@CLIENT_VERSION_MINOR@.@CLIENT_VERSION_REVISION@\n+!define COMPANY \"Bitcoin project\"\n+!define URL http://www.bitcoin.org/\n+\n+# MUI Symbol Definitions\n+!define MUI_ICON \"@abs_top_srcdir@/share/pixmaps/bitcoin.ico\"\n+!define MUI_WELCOMEFINISHPAGE_BITMAP \"@abs_top_srcdir@/share/pixmaps/nsis-wizard.bmp\"\n+!define MUI_HEADERIMAGE\n+!define MUI_HEADERIMAGE_RIGHT\n+!define MUI_HEADERIMAGE_BITMAP \"@abs_top_srcdir@/share/pixmaps/nsis-header.bmp\"\n+!define MUI_FINISHPAGE_NOAUTOCLOSE\n+!define MUI_STARTMENUPAGE_REGISTRY_ROOT HKLM\n+!define MUI_STARTMENUPAGE_REGISTRY_KEY ${REGKEY}\n+!define MUI_STARTMENUPAGE_REGISTRY_VALUENAME StartMenuGroup\n+!define MUI_STARTMENUPAGE_DEFAULTFOLDER @PACKAGE_NAME@\n+!define MUI_FINISHPAGE_RUN $INSTDIR\\bitcoin-qt.exe\n+!define MUI_UNICON \"${NSISDIR}\\Contrib\\Graphics\\Icons\\modern-uninstall.ico\"\n+!define MUI_UNWELCOMEFINISHPAGE_BITMAP \"@abs_top_srcdir@/share/pixmaps/nsis-wizard.bmp\"\n+!define MUI_UNFINISHPAGE_NOAUTOCLOSE\n+\n+# Included files\n+!include Sections.nsh\n+!include MUI2.nsh\n+\n+# Variables\n+Var StartMenuGroup\n+\n+# Installer pages\n+!insertmacro MUI_PAGE_WELCOME\n+!insertmacro MUI_PAGE_DIRECTORY\n+!insertmacro MUI_PAGE_STARTMENU Application $StartMenuGroup\n+!insertmacro MUI_PAGE_INSTFILES\n+!insertmacro MUI_PAGE_FINISH\n+!insertmacro MUI_UNPAGE_CONFIRM\n+!insertmacro MUI_UNPAGE_INSTFILES\n+\n+# Installer languages\n+!insertmacro MUI_LANGUAGE English\n+\n+# Installer attributes\n+OutFile @abs_top_srcdir@/bitcoin-${VERSION}-win32-setup.exe\n+InstallDir $PROGRAMFILES\\Bitcoin\n+CRCCheck on\n+XPStyle on\n+BrandingText \" \"\n+ShowInstDetails show\n+VIProductVersion ${VERSION}.@CLIENT_VERSION_BUILD@\n+VIAddVersionKey ProductName Bitcoin\n+VIAddVersionKey ProductVersion \"${VERSION}\"\n+VIAddVersionKey CompanyName \"${COMPANY}\"\n+VIAddVersionKey CompanyWebsite \"${URL}\"\n+VIAddVersionKey FileVersion \"${VERSION}\"\n+VIAddVersionKey FileDescription \"\"\n+VIAddVersionKey LegalCopyright \"\"\n+InstallDirRegKey HKCU \"${REGKEY}\" Path\n+ShowUninstDetails show\n+\n+# Installer sections\n+Section -Main SEC0000\n+    SetOutPath $INSTDIR\n+    SetOverwrite on\n+    File @abs_top_srcdir@/release/bitcoin-qt.exe\n+    File /oname=COPYING.txt @abs_top_srcdir@/COPYING\n+    File /oname=readme.txt @abs_top_srcdir@/doc/README_windows.txt\n+    SetOutPath $INSTDIR\\daemon\n+    File @abs_top_srcdir@/release/bitcoind.exe\n+    SetOutPath $INSTDIR\\src\n+    File /r @abs_top_srcdir@/@PACKAGE@-@VERSION@/src\\*.*\n+    SetOutPath $INSTDIR\n+    WriteRegStr HKCU \"${REGKEY}\\Components\" Main 1\n+\n+    # Remove old wxwidgets-based-bitcoin executable and locales:\n+    Delete /REBOOTOK $INSTDIR\\bitcoin.exe\n+    RMDir /r /REBOOTOK $INSTDIR\\locale\n+SectionEnd\n+\n+Section -post SEC0001\n+    WriteRegStr HKCU \"${REGKEY}\" Path $INSTDIR\n+    SetOutPath $INSTDIR\n+    WriteUninstaller $INSTDIR\\uninstall.exe\n+    !insertmacro MUI_STARTMENU_WRITE_BEGIN Application\n+    CreateDirectory $SMPROGRAMS\\$StartMenuGroup\n+    CreateShortcut \"$SMPROGRAMS\\$StartMenuGroup\\Bitcoin.lnk\" $INSTDIR\\bitcoin-qt.exe\n+    CreateShortcut \"$SMPROGRAMS\\$StartMenuGroup\\Uninstall Bitcoin.lnk\" $INSTDIR\\uninstall.exe\n+    !insertmacro MUI_STARTMENU_WRITE_END\n+    WriteRegStr HKCU \"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\$(^Name)\" DisplayName \"$(^Name)\"\n+    WriteRegStr HKCU \"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\$(^Name)\" DisplayVersion \"${VERSION}\"\n+    WriteRegStr HKCU \"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\$(^Name)\" Publisher \"${COMPANY}\"\n+    WriteRegStr HKCU \"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\$(^Name)\" URLInfoAbout \"${URL}\"\n+    WriteRegStr HKCU \"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\$(^Name)\" DisplayIcon $INSTDIR\\uninstall.exe\n+    WriteRegStr HKCU \"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\$(^Name)\" UninstallString $INSTDIR\\uninstall.exe\n+    WriteRegDWORD HKCU \"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\$(^Name)\" NoModify 1\n+    WriteRegDWORD HKCU \"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\$(^Name)\" NoRepair 1\n+    WriteRegStr HKCR \"bitcoin\" \"URL Protocol\" \"\"\n+    WriteRegStr HKCR \"bitcoin\" \"\" \"URL:Bitcoin\"\n+    WriteRegStr HKCR \"bitcoin\\DefaultIcon\" \"\" $INSTDIR\\bitcoin-qt.exe\n+    WriteRegStr HKCR \"bitcoin\\shell\\open\\command\" \"\" '\"$INSTDIR\\bitcoin-qt.exe\" \"%1\"'\n+SectionEnd\n+\n+# Macro for selecting uninstaller sections\n+!macro SELECT_UNSECTION SECTION_NAME UNSECTION_ID\n+    Push $R0\n+    ReadRegStr $R0 HKCU \"${REGKEY}\\Components\" \"${SECTION_NAME}\"\n+    StrCmp $R0 1 0 next${UNSECTION_ID}\n+    !insertmacro SelectSection \"${UNSECTION_ID}\"\n+    GoTo done${UNSECTION_ID}\n+next${UNSECTION_ID}:\n+    !insertmacro UnselectSection \"${UNSECTION_ID}\"\n+done${UNSECTION_ID}:\n+    Pop $R0\n+!macroend\n+\n+# Uninstaller sections\n+Section /o -un.Main UNSEC0000\n+    Delete /REBOOTOK $INSTDIR\\bitcoin-qt.exe\n+    Delete /REBOOTOK $INSTDIR\\COPYING.txt\n+    Delete /REBOOTOK $INSTDIR\\readme.txt\n+    RMDir /r /REBOOTOK $INSTDIR\\daemon\n+    RMDir /r /REBOOTOK $INSTDIR\\src\n+    DeleteRegValue HKCU \"${REGKEY}\\Components\" Main\n+SectionEnd\n+\n+Section -un.post UNSEC0001\n+    DeleteRegKey HKCU \"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\$(^Name)\"\n+    Delete /REBOOTOK \"$SMPROGRAMS\\$StartMenuGroup\\Uninstall Bitcoin.lnk\"\n+    Delete /REBOOTOK \"$SMPROGRAMS\\$StartMenuGroup\\Bitcoin.lnk\"\n+    Delete /REBOOTOK \"$SMSTARTUP\\Bitcoin.lnk\"\n+    Delete /REBOOTOK $INSTDIR\\uninstall.exe\n+    Delete /REBOOTOK $INSTDIR\\debug.log\n+    Delete /REBOOTOK $INSTDIR\\db.log\n+    DeleteRegValue HKCU \"${REGKEY}\" StartMenuGroup\n+    DeleteRegValue HKCU \"${REGKEY}\" Path\n+    DeleteRegKey /IfEmpty HKCU \"${REGKEY}\\Components\"\n+    DeleteRegKey /IfEmpty HKCU \"${REGKEY}\"\n+    DeleteRegKey HKCR \"bitcoin\"\n+    RmDir /REBOOTOK $SMPROGRAMS\\$StartMenuGroup\n+    RmDir /REBOOTOK $INSTDIR\n+    Push $R0\n+    StrCpy $R0 $StartMenuGroup 1\n+    StrCmp $R0 \">\" no_smgroup\n+no_smgroup:\n+    Pop $R0\n+SectionEnd\n+\n+# Installer functions\n+Function .onInit\n+    InitPluginsDir\n+FunctionEnd\n+\n+# Uninstaller functions\n+Function un.onInit\n+    ReadRegStr $INSTDIR HKCU \"${REGKEY}\" Path\n+    !insertmacro MUI_STARTMENU_GETFOLDER Application $StartMenuGroup\n+    !insertmacro SELECT_UNSECTION Main ${UNSEC0000}\n+FunctionEnd",
        "previous_filename": "share/setup.nsi"
      },
      {
        "sha": "3697b9ff2261412dceb64515892b58330d7d174c",
        "filename": "src/Makefile.am",
        "status": "added",
        "additions": 67,
        "deletions": 0,
        "changes": 67,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/35b8af92265ed74de63c3818e5290c27b3f35df2/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/35b8af92265ed74de63c3818e5290c27b3f35df2/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=35b8af92265ed74de63c3818e5290c27b3f35df2",
        "patch": "@@ -0,0 +1,67 @@\n+AM_CPPFLAGS =  $(INCLUDES) -I$(top_builddir)/src/obj \\\n+  -I$(top_srcdir)/src/leveldb/include -I$(top_srcdir)/src/leveldb/helpers \\\n+  $(BOOST_INCLUDES)\n+AM_LDFLAGS = $(PTHREAD_CFLAGS)\n+\n+noinst_LIBRARIES = libbitcoin.a\n+\n+bin_PROGRAMS = bitcoind\n+\n+SUBDIRS = . $(BUILD_QT) $(BUILD_TEST)\n+DIST_SUBDIRS = . qt test\n+.PHONY: FORCE\n+# bitcoin core #\n+BITCOIN_CORE_H = addrman.h alert.h allocators.h base58.h bignum.h \\\n+  bitcoinrpc.h bloom.h chainparams.h checkpoints.h checkqueue.h \\\n+  clientversion.h compat.h core.h crypter.h db.h hash.h init.h \\\n+  key.h keystore.h leveldb.h limitedmap.h main.h miner.h mruset.h \\\n+  netbase.h net.h protocol.h script.h serialize.h sync.h threadsafety.h \\\n+  txdb.h ui_interface.h uint256.h util.h version.h walletdb.h wallet.h\n+\n+JSON_H = json/json_spirit.h json/json_spirit_error_position.h \\\n+  json/json_spirit_reader.h json/json_spirit_reader_template.h \\\n+  json/json_spirit_stream_reader.h json/json_spirit_utils.h \\\n+  json/json_spirit_value.h json/json_spirit_writer.h \\\n+  json/json_spirit_writer_template.h\n+\n+obj/build.h: FORCE\n+\t@$(MKDIR_P) $(abs_top_builddir)/src/obj\n+\t@$(top_srcdir)/share/genbuild.sh $(abs_top_builddir)/src/obj/build.h \\\n+\t  $(abs_top_srcdir)\n+version.o: obj/build.h\n+\n+libbitcoin_a_SOURCES = addrman.cpp alert.cpp bitcoinrpc.cpp bloom.cpp \\\n+  chainparams.cpp checkpoints.cpp core.cpp crypter.cpp db.cpp hash.cpp \\\n+  init.cpp key.cpp keystore.cpp leveldb.cpp main.cpp miner.cpp \\\n+  netbase.cpp net.cpp noui.cpp protocol.cpp rpcblockchain.cpp rpcdump.cpp \\\n+  rpcmining.cpp rpcnet.cpp rpcrawtransaction.cpp rpcwallet.cpp script.cpp \\\n+  sync.cpp txdb.cpp util.cpp version.cpp wallet.cpp walletdb.cpp $(JSON_H) \\\n+  $(BITCOIN_CORE_H)\n+\n+nodist_libbitcoin_a_SOURCES = $(top_srcdir)/src/obj/build.h\n+#\n+\n+# bitcoind binary #\n+bitcoind_LDADD = libbitcoin.a leveldb/libleveldb.a leveldb/libmemenv.a \\\n+  $(BOOST_LIBS)\n+bitcoind_SOURCES = bitcoind.cpp\n+#\n+\n+leveldb/libleveldb.a:\n+\t@echo \"Building LevelDB ...\" && cd leveldb && CXX=\"$(CXX)\" CC=\"$(CC)\" \\\n+\t  PLATFORM=$(TARGET_OS) AR=\"$(AR)\" $(MAKE) $(LEVELDB_TARGET_FLAGS) OPT=\"$(CXXFLAGS) $(CPPFLAGS)\" libleveldb.a\n+\n+leveldb/libmemenv.a:\n+\t@echo \"Building LevelDB ...\" && cd leveldb && CXX=\"$(CXX)\" CC=\"$(CC)\" \\\n+\t  PLATFORM=$(TARGET_OS) AR=\"$(AR)\" $(MAKE) $(LEVELDB_TARGET_FLAGS) OPT=\"$(CXXFLAGS) $(CPPFLAGS)\" libmemenv.a\n+\n+CLEANFILES = leveldb/libleveldb.a leveldb/libmemenv.a *.gcda *.gcno\n+\n+DISTCLEANFILES = obj/build.h\n+\n+EXTRA_DIST = leveldb Makefile.include\n+\n+clean-local:\n+\t-$(MAKE) -C leveldb clean\n+\trm -f leveldb/port/*.gcno leveldb/db/*.gcno leveldb/table/*.gcno leveldb/helpers/*.gcno\n+\trm -f leveldb/util/*.gcno leveldb/helpers/memenv/*.gcno"
      },
      {
        "sha": "231888e49f175ee2375f060d35571bc99d3c4d10",
        "filename": "src/Makefile.include",
        "status": "added",
        "additions": 48,
        "deletions": 0,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/35b8af92265ed74de63c3818e5290c27b3f35df2/src/Makefile.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/35b8af92265ed74de63c3818e5290c27b3f35df2/src/Makefile.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.include?ref=35b8af92265ed74de63c3818e5290c27b3f35df2",
        "patch": "@@ -0,0 +1,48 @@\n+.PHONY: FORCE\n+\n+LIBBITCOIN=$(top_builddir)/src/libbitcoin.a\n+LIBLEVELDB=$(top_builddir)/src/leveldb/libleveldb.a\n+LIBMEMENV=$(top_builddir)/src/leveldb/libmemenv.a\n+LIBBITCOINQT=$(top_builddir)/src/qt/libbitcoinqt.a\n+\n+$(LIBBITCOIN):\n+\t$(MAKE) -C $(top_builddir)/src $(@F)\n+\n+$(LIBLEVELDB) $(LIBMEMENV):\n+\t$(MAKE) -C $(top_builddir)/src leveldb/$(@F)\n+\n+$(LIBBITCOINQT):\n+\t$(MAKE) -C $(top_builddir)/src/qt $(@F)\n+\n+.mm.o:\n+\t$(OBJC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \\\n+\t  $(CPPFLAGS) $(AM_CXXFLAGS) $(QT_INCLUDES) $(CXXFLAGS)  -c -o $@ $<\n+\n+.rc.o:\n+\t@test -f $(WINDRES) && $(WINDRES) -i $< -o $@ || \\\n+          echo error: could not build $@\n+\n+ui_%.h: %.ui\n+\t@test -d $(abs_builddir)/$(@D) || $(MKDIR_P) $(abs_builddir)/$(@D)\n+\t@test -f $(UIC) && $(UIC) -o $(abs_builddir)/$@ $(abs_srcdir)/$< || echo error: could not build $(abs_builddir)/$@\n+\t$(SED) -i.bak -e '/^\\*\\*.*Created:/d' $(abs_builddir)/$@ && rm $(abs_builddir)/$@.bak\n+\t$(SED) -i.bak -e '/^\\*\\*.*by:/d' $(abs_builddir)/$@ && rm $(abs_builddir)/$@.bak\n+\n+%.moc: %.cpp\n+\t$(MOC) $(QT_INCLUDES) $(MOC_DEFS) -o $@ $<\n+\t$(SED) -i.bak -e '/^\\*\\*.*Created:/d' $@ && rm $@.bak\n+\t$(SED) -i.bak -e '/^\\*\\*.*by:/d' $@ && rm $@.bak\n+\n+moc_%.cpp: %.h\n+\t$(MOC) $(QT_INCLUDES) $(MOC_DEFS) -o $@ $<\n+\t$(SED) -i.bak -e '/^\\*\\*.*Created:/d' $@ && rm $@.bak\n+\t$(SED) -i.bak -e '/^\\*\\*.*by:/d' $@ && rm $@.bak\n+\n+%.qm: %.ts\n+\t@test -d $(abs_builddir)/$(@D) || $(MKDIR_P) $(abs_builddir)/$(@D)\n+\t@test -f $(LRELEASE) && $(LRELEASE) $(abs_srcdir)/$< -qm $(abs_builddir)/$@ || \\\n+\t echo error: could not build $(abs_builddir)/$@\n+\n+%.pb.cc %.pb.h: %.proto\n+\ttest -f $(PROTOC) && $(PROTOC) --cpp_out=$(@D) --proto_path=$(abspath $(<D) $<)  || \\\n+\t  echo error: could not build $@"
      },
      {
        "sha": "b376a67c8a763f150dc57458719a85b11d3d61f2",
        "filename": "src/clientversion.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/35b8af92265ed74de63c3818e5290c27b3f35df2/src/clientversion.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/35b8af92265ed74de63c3818e5290c27b3f35df2/src/clientversion.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/clientversion.h?ref=35b8af92265ed74de63c3818e5290c27b3f35df2",
        "patch": "@@ -1,6 +1,9 @@\n #ifndef CLIENTVERSION_H\n #define CLIENTVERSION_H\n \n+#if defined(HAVE_CONFIG_H)\n+#include \"bitcoin-config.h\"\n+#else\n //\n // client versioning and copyright year\n //\n@@ -18,6 +21,8 @@\n // Todo: update this when changing our copyright comments in the source\n #define COPYRIGHT_YEAR 2013\n \n+#endif //HAVE_CONFIG_H\n+\n // Converts the parameter X to a string after macro replacement on X has been performed.\n // Don't merge these into one macro!\n #define STRINGIZE(X) DO_STRINGIZE(X)"
      },
      {
        "sha": "9caf5e481071f0902cf88ae38e0d7deabe1b306e",
        "filename": "src/compat.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/35b8af92265ed74de63c3818e5290c27b3f35df2/src/compat.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/35b8af92265ed74de63c3818e5290c27b3f35df2/src/compat.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat.h?ref=35b8af92265ed74de63c3818e5290c27b3f35df2",
        "patch": "@@ -26,7 +26,6 @@\n #endif\n \n #ifdef WIN32\n-#define MSG_NOSIGNAL        0\n #define MSG_DONTWAIT        0\n #else\n typedef u_int SOCKET;"
      },
      {
        "sha": "3c1ee24e2dcd781ffb6cc26d3ffd4c6e9a668eb5",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/35b8af92265ed74de63c3818e5290c27b3f35df2/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/35b8af92265ed74de63c3818e5290c27b3f35df2/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=35b8af92265ed74de63c3818e5290c27b3f35df2",
        "patch": "@@ -3,6 +3,10 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#if defined(HAVE_CONFIG_H)\n+#include \"bitcoin-config.h\"\n+#endif\n+\n #include \"init.h\"\n #include \"main.h\"\n #include \"core.h\""
      },
      {
        "sha": "54a2a1bee74e97f9c20eae32667dc6cf66c05bdd",
        "filename": "src/m4/ax_boost_base.m4",
        "status": "added",
        "additions": 258,
        "deletions": 0,
        "changes": 258,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/35b8af92265ed74de63c3818e5290c27b3f35df2/src/m4/ax_boost_base.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/35b8af92265ed74de63c3818e5290c27b3f35df2/src/m4/ax_boost_base.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/m4/ax_boost_base.m4?ref=35b8af92265ed74de63c3818e5290c27b3f35df2",
        "patch": "@@ -0,0 +1,258 @@\n+# ===========================================================================\n+#       http://www.gnu.org/software/autoconf-archive/ax_boost_base.html\n+# ===========================================================================\n+#\n+# SYNOPSIS\n+#\n+#   AX_BOOST_BASE([MINIMUM-VERSION], [ACTION-IF-FOUND], [ACTION-IF-NOT-FOUND])\n+#\n+# DESCRIPTION\n+#\n+#   Test for the Boost C++ libraries of a particular version (or newer)\n+#\n+#   If no path to the installed boost library is given the macro searchs\n+#   under /usr, /usr/local, /opt and /opt/local and evaluates the\n+#   $BOOST_ROOT environment variable. Further documentation is available at\n+#   <http://randspringer.de/boost/index.html>.\n+#\n+#   This macro calls:\n+#\n+#     AC_SUBST(BOOST_CPPFLAGS) / AC_SUBST(BOOST_LDFLAGS)\n+#\n+#   And sets:\n+#\n+#     HAVE_BOOST\n+#\n+# LICENSE\n+#\n+#   Copyright (c) 2008 Thomas Porschberg <thomas@randspringer.de>\n+#   Copyright (c) 2009 Peter Adolphs\n+#\n+#   Copying and distribution of this file, with or without modification, are\n+#   permitted in any medium without royalty provided the copyright notice\n+#   and this notice are preserved. This file is offered as-is, without any\n+#   warranty.\n+\n+#serial 20\n+\n+AC_DEFUN([AX_BOOST_BASE],\n+[\n+AC_ARG_WITH([boost],\n+  [AS_HELP_STRING([--with-boost@<:@=ARG@:>@],\n+    [use Boost library from a standard location (ARG=yes),\n+     from the specified location (ARG=<path>),\n+     or disable it (ARG=no)\n+     @<:@ARG=yes@:>@ ])],\n+    [\n+    if test \"$withval\" = \"no\"; then\n+        want_boost=\"no\"\n+    elif test \"$withval\" = \"yes\"; then\n+        want_boost=\"yes\"\n+        ac_boost_path=\"\"\n+    else\n+        want_boost=\"yes\"\n+        ac_boost_path=\"$withval\"\n+    fi\n+    ],\n+    [want_boost=\"yes\"])\n+\n+\n+AC_ARG_WITH([boost-libdir],\n+        AS_HELP_STRING([--with-boost-libdir=LIB_DIR],\n+        [Force given directory for boost libraries. Note that this will override library path detection, so use this parameter only if default library detection fails and you know exactly where your boost libraries are located.]),\n+        [\n+        if test -d \"$withval\"\n+        then\n+                ac_boost_lib_path=\"$withval\"\n+        else\n+                AC_MSG_ERROR(--with-boost-libdir expected directory name)\n+        fi\n+        ],\n+        [ac_boost_lib_path=\"\"]\n+)\n+\n+if test \"x$want_boost\" = \"xyes\"; then\n+    boost_lib_version_req=ifelse([$1], ,1.20.0,$1)\n+    boost_lib_version_req_shorten=`expr $boost_lib_version_req : '\\([[0-9]]*\\.[[0-9]]*\\)'`\n+    boost_lib_version_req_major=`expr $boost_lib_version_req : '\\([[0-9]]*\\)'`\n+    boost_lib_version_req_minor=`expr $boost_lib_version_req : '[[0-9]]*\\.\\([[0-9]]*\\)'`\n+    boost_lib_version_req_sub_minor=`expr $boost_lib_version_req : '[[0-9]]*\\.[[0-9]]*\\.\\([[0-9]]*\\)'`\n+    if test \"x$boost_lib_version_req_sub_minor\" = \"x\" ; then\n+        boost_lib_version_req_sub_minor=\"0\"\n+        fi\n+    WANT_BOOST_VERSION=`expr $boost_lib_version_req_major \\* 100000 \\+  $boost_lib_version_req_minor \\* 100 \\+ $boost_lib_version_req_sub_minor`\n+    AC_MSG_CHECKING(for boostlib >= $boost_lib_version_req)\n+    succeeded=no\n+\n+    dnl On 64-bit systems check for system libraries in both lib64 and lib.\n+    dnl The former is specified by FHS, but e.g. Debian does not adhere to\n+    dnl this (as it rises problems for generic multi-arch support).\n+    dnl The last entry in the list is chosen by default when no libraries\n+    dnl are found, e.g. when only header-only libraries are installed!\n+    libsubdirs=\"lib\"\n+    ax_arch=`uname -m`\n+    if test $ax_arch = x86_64 -o $ax_arch = ppc64 -o $ax_arch = s390x -o $ax_arch = sparc64; then\n+        libsubdirs=\"lib64 lib lib64\"\n+    fi\n+\n+    dnl first we check the system location for boost libraries\n+    dnl this location ist chosen if boost libraries are installed with the --layout=system option\n+    dnl or if you install boost with RPM\n+    if test \"$ac_boost_path\" != \"\"; then\n+        BOOST_CPPFLAGS=\"-I$ac_boost_path/include\"\n+        for ac_boost_path_tmp in $libsubdirs; do\n+                if test -d \"$ac_boost_path\"/\"$ac_boost_path_tmp\" ; then\n+                        BOOST_LDFLAGS=\"-L$ac_boost_path/$ac_boost_path_tmp\"\n+                        break\n+                fi\n+        done\n+    elif test \"$cross_compiling\" != yes; then\n+        for ac_boost_path_tmp in /usr /usr/local /opt /opt/local ; do\n+            if test -d \"$ac_boost_path_tmp/include/boost\" && test -r \"$ac_boost_path_tmp/include/boost\"; then\n+                for libsubdir in $libsubdirs ; do\n+                    if ls \"$ac_boost_path_tmp/$libsubdir/libboost_\"* >/dev/null 2>&1 ; then break; fi\n+                done\n+                BOOST_LDFLAGS=\"-L$ac_boost_path_tmp/$libsubdir\"\n+                BOOST_CPPFLAGS=\"-I$ac_boost_path_tmp/include\"\n+                break;\n+            fi\n+        done\n+    fi\n+\n+    dnl overwrite ld flags if we have required special directory with\n+    dnl --with-boost-libdir parameter\n+    if test \"$ac_boost_lib_path\" != \"\"; then\n+       BOOST_LDFLAGS=\"-L$ac_boost_lib_path\"\n+    fi\n+\n+    CPPFLAGS_SAVED=\"$CPPFLAGS\"\n+    CPPFLAGS=\"$CPPFLAGS $BOOST_CPPFLAGS\"\n+    export CPPFLAGS\n+\n+    LDFLAGS_SAVED=\"$LDFLAGS\"\n+    LDFLAGS=\"$LDFLAGS $BOOST_LDFLAGS\"\n+    export LDFLAGS\n+\n+    AC_REQUIRE([AC_PROG_CXX])\n+    AC_LANG_PUSH(C++)\n+        AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n+    @%:@include <boost/version.hpp>\n+    ]], [[\n+    #if BOOST_VERSION >= $WANT_BOOST_VERSION\n+    // Everything is okay\n+    #else\n+    #  error Boost version is too old\n+    #endif\n+    ]])],[\n+        AC_MSG_RESULT(yes)\n+    succeeded=yes\n+    found_system=yes\n+        ],[\n+        ])\n+    AC_LANG_POP([C++])\n+\n+\n+\n+    dnl if we found no boost with system layout we search for boost libraries\n+    dnl built and installed without the --layout=system option or for a staged(not installed) version\n+    if test \"x$succeeded\" != \"xyes\"; then\n+        _version=0\n+        if test \"$ac_boost_path\" != \"\"; then\n+            if test -d \"$ac_boost_path\" && test -r \"$ac_boost_path\"; then\n+                for i in `ls -d $ac_boost_path/include/boost-* 2>/dev/null`; do\n+                    _version_tmp=`echo $i | sed \"s#$ac_boost_path##\" | sed 's/\\/include\\/boost-//' | sed 's/_/./'`\n+                    V_CHECK=`expr $_version_tmp \\> $_version`\n+                    if test \"$V_CHECK\" = \"1\" ; then\n+                        _version=$_version_tmp\n+                    fi\n+                    VERSION_UNDERSCORE=`echo $_version | sed 's/\\./_/'`\n+                    BOOST_CPPFLAGS=\"-I$ac_boost_path/include/boost-$VERSION_UNDERSCORE\"\n+                done\n+            fi\n+        else\n+            if test \"$cross_compiling\" != yes; then\n+                for ac_boost_path in /usr /usr/local /opt /opt/local ; do\n+                    if test -d \"$ac_boost_path\" && test -r \"$ac_boost_path\"; then\n+                        for i in `ls -d $ac_boost_path/include/boost-* 2>/dev/null`; do\n+                            _version_tmp=`echo $i | sed \"s#$ac_boost_path##\" | sed 's/\\/include\\/boost-//' | sed 's/_/./'`\n+                            V_CHECK=`expr $_version_tmp \\> $_version`\n+                            if test \"$V_CHECK\" = \"1\" ; then\n+                                _version=$_version_tmp\n+                                best_path=$ac_boost_path\n+                            fi\n+                        done\n+                    fi\n+                done\n+\n+                VERSION_UNDERSCORE=`echo $_version | sed 's/\\./_/'`\n+                BOOST_CPPFLAGS=\"-I$best_path/include/boost-$VERSION_UNDERSCORE\"\n+                if test \"$ac_boost_lib_path\" = \"\"; then\n+                    for libsubdir in $libsubdirs ; do\n+                        if ls \"$best_path/$libsubdir/libboost_\"* >/dev/null 2>&1 ; then break; fi\n+                    done\n+                    BOOST_LDFLAGS=\"-L$best_path/$libsubdir\"\n+                fi\n+            fi\n+\n+            if test \"x$BOOST_ROOT\" != \"x\"; then\n+                for libsubdir in $libsubdirs ; do\n+                    if ls \"$BOOST_ROOT/stage/$libsubdir/libboost_\"* >/dev/null 2>&1 ; then break; fi\n+                done\n+                if test -d \"$BOOST_ROOT\" && test -r \"$BOOST_ROOT\" && test -d \"$BOOST_ROOT/stage/$libsubdir\" && test -r \"$BOOST_ROOT/stage/$libsubdir\"; then\n+                    version_dir=`expr //$BOOST_ROOT : '.*/\\(.*\\)'`\n+                    stage_version=`echo $version_dir | sed 's/boost_//' | sed 's/_/./g'`\n+                        stage_version_shorten=`expr $stage_version : '\\([[0-9]]*\\.[[0-9]]*\\)'`\n+                    V_CHECK=`expr $stage_version_shorten \\>\\= $_version`\n+                    if test \"$V_CHECK\" = \"1\" -a \"$ac_boost_lib_path\" = \"\" ; then\n+                        AC_MSG_NOTICE(We will use a staged boost library from $BOOST_ROOT)\n+                        BOOST_CPPFLAGS=\"-I$BOOST_ROOT\"\n+                        BOOST_LDFLAGS=\"-L$BOOST_ROOT/stage/$libsubdir\"\n+                    fi\n+                fi\n+            fi\n+        fi\n+\n+        CPPFLAGS=\"$CPPFLAGS $BOOST_CPPFLAGS\"\n+        export CPPFLAGS\n+        LDFLAGS=\"$LDFLAGS $BOOST_LDFLAGS\"\n+        export LDFLAGS\n+\n+        AC_LANG_PUSH(C++)\n+            AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n+        @%:@include <boost/version.hpp>\n+        ]], [[\n+        #if BOOST_VERSION >= $WANT_BOOST_VERSION\n+        // Everything is okay\n+        #else\n+        #  error Boost version is too old\n+        #endif\n+        ]])],[\n+            AC_MSG_RESULT(yes)\n+        succeeded=yes\n+        found_system=yes\n+            ],[\n+            ])\n+        AC_LANG_POP([C++])\n+    fi\n+\n+    if test \"$succeeded\" != \"yes\" ; then\n+        if test \"$_version\" = \"0\" ; then\n+            AC_MSG_NOTICE([[We could not detect the boost libraries (version $boost_lib_version_req_shorten or higher). If you have a staged boost library (still not installed) please specify \\$BOOST_ROOT in your environment and do not give a PATH to --with-boost option.  If you are sure you have boost installed, then check your version number looking in <boost/version.hpp>. See http://randspringer.de/boost for more documentation.]])\n+        else\n+            AC_MSG_NOTICE([Your boost libraries seems to old (version $_version).])\n+        fi\n+        # execute ACTION-IF-NOT-FOUND (if present):\n+        ifelse([$3], , :, [$3])\n+    else\n+        AC_SUBST(BOOST_CPPFLAGS)\n+        AC_SUBST(BOOST_LDFLAGS)\n+        AC_DEFINE(HAVE_BOOST,,[define if the Boost library is available])\n+        # execute ACTION-IF-FOUND (if present):\n+        ifelse([$2], , :, [$2])\n+    fi\n+\n+    CPPFLAGS=\"$CPPFLAGS_SAVED\"\n+    LDFLAGS=\"$LDFLAGS_SAVED\"\n+fi\n+\n+])"
      },
      {
        "sha": "9b3958ec74d2c32a02a0d32b7b23cba46e9fc383",
        "filename": "src/m4/ax_boost_chrono.m4",
        "status": "added",
        "additions": 118,
        "deletions": 0,
        "changes": 118,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/35b8af92265ed74de63c3818e5290c27b3f35df2/src/m4/ax_boost_chrono.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/35b8af92265ed74de63c3818e5290c27b3f35df2/src/m4/ax_boost_chrono.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/m4/ax_boost_chrono.m4?ref=35b8af92265ed74de63c3818e5290c27b3f35df2",
        "patch": "@@ -0,0 +1,118 @@\n+# ===========================================================================\n+#      http://www.gnu.org/software/autoconf-archive/ax_boost_chrono.html\n+# ===========================================================================\n+#\n+# SYNOPSIS\n+#\n+#   AX_BOOST_CHRONO\n+#\n+# DESCRIPTION\n+#\n+#   Test for System library from the Boost C++ libraries. The macro requires\n+#   a preceding call to AX_BOOST_BASE. Further documentation is available at\n+#   <http://randspringer.de/boost/index.html>.\n+#\n+#   This macro calls:\n+#\n+#     AC_SUBST(BOOST_CHRONO_LIB)\n+#\n+#   And sets:\n+#\n+#     HAVE_BOOST_CHRONO\n+#\n+# LICENSE\n+#\n+#   Copyright (c) 2012 Xiyue Deng <manphiz@gmail.com>\n+#\n+#   Copying and distribution of this file, with or without modification, are\n+#   permitted in any medium without royalty provided the copyright notice\n+#   and this notice are preserved. This file is offered as-is, without any\n+#   warranty.\n+\n+#serial 1\n+\n+AC_DEFUN([AX_BOOST_CHRONO],\n+[\n+\tAC_ARG_WITH([boost-chrono],\n+\tAS_HELP_STRING([--with-boost-chrono@<:@=special-lib@:>@],\n+                   [use the Chrono library from boost - it is possible to specify a certain library for the linker\n+                        e.g. --with-boost-chrono=boost_chrono-gcc-mt ]),\n+        [\n+        if test \"$withval\" = \"no\"; then\n+\t\t\twant_boost=\"no\"\n+        elif test \"$withval\" = \"yes\"; then\n+            want_boost=\"yes\"\n+            ax_boost_user_chrono_lib=\"\"\n+        else\n+\t\t    want_boost=\"yes\"\n+\t\tax_boost_user_chrono_lib=\"$withval\"\n+\t\tfi\n+        ],\n+        [want_boost=\"yes\"]\n+\t)\n+\n+\tif test \"x$want_boost\" = \"xyes\"; then\n+        AC_REQUIRE([AC_PROG_CC])\n+        AC_REQUIRE([AC_CANONICAL_BUILD])\n+\t\tCPPFLAGS_SAVED=\"$CPPFLAGS\"\n+\t\tCPPFLAGS=\"$CPPFLAGS $BOOST_CPPFLAGS\"\n+\t\texport CPPFLAGS\n+\n+\t\tLDFLAGS_SAVED=\"$LDFLAGS\"\n+\t\tLDFLAGS=\"$LDFLAGS $BOOST_LDFLAGS\"\n+\t\texport LDFLAGS\n+\n+        AC_CACHE_CHECK(whether the Boost::Chrono library is available,\n+\t\t\t\t\t   ax_cv_boost_chrono,\n+        [AC_LANG_PUSH([C++])\n+\t\t\t CXXFLAGS_SAVE=$CXXFLAGS\n+\n+\t\t\t AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[@%:@include <boost/chrono.hpp>]],\n+                                   [[boost::chrono::system_clock::time_point time;]])],\n+                   ax_cv_boost_chrono=yes, ax_cv_boost_chrono=no)\n+\t\t\t CXXFLAGS=$CXXFLAGS_SAVE\n+             AC_LANG_POP([C++])\n+\t\t])\n+\t\tif test \"x$ax_cv_boost_chrono\" = \"xyes\"; then\n+\t\t\tAC_SUBST(BOOST_CPPFLAGS)\n+\n+\t\t\tAC_DEFINE(HAVE_BOOST_CHRONO,,[define if the Boost::Chrono library is available])\n+            BOOSTLIBDIR=`echo $BOOST_LDFLAGS | sed -e 's/@<:@^\\/@:>@*//'`\n+\n+\t\t\tLDFLAGS_SAVE=$LDFLAGS\n+            if test \"x$ax_boost_user_chrono_lib\" = \"x\"; then\n+                for libextension in `ls $BOOSTLIBDIR/libboost_chrono*.so* $BOOSTLIBDIR/libboost_chrono*.dylib* $BOOSTLIBDIR/libboost_chrono*.a* 2>/dev/null | sed 's,.*/,,' | sed -e 's;^lib\\(boost_chrono.*\\)\\.so.*$;\\1;' -e 's;^lib\\(boost_chrono.*\\)\\.dylib.*$;\\1;' -e 's;^lib\\(boost_chrono.*\\)\\.a.*$;\\1;'` ; do\n+                     ax_lib=${libextension}\n+\t\t\t\t    AC_CHECK_LIB($ax_lib, exit,\n+                                 [BOOST_CHRONO_LIB=\"-l$ax_lib\"; AC_SUBST(BOOST_CHRONO_LIB) link_chrono=\"yes\"; break],\n+                                 [link_chrono=\"no\"])\n+\t\t\t\tdone\n+                if test \"x$link_chrono\" != \"xyes\"; then\n+                for libextension in `ls $BOOSTLIBDIR/boost_chrono*.dll* $BOOSTLIBDIR/boost_chrono*.a* 2>/dev/null | sed 's,.*/,,' | sed -e 's;^\\(boost_chrono.*\\)\\.dll.*$;\\1;' -e 's;^\\(boost_chrono.*\\)\\.a.*$;\\1;'` ; do\n+                     ax_lib=${libextension}\n+\t\t\t\t    AC_CHECK_LIB($ax_lib, exit,\n+                                 [BOOST_CHRONO_LIB=\"-l$ax_lib\"; AC_SUBST(BOOST_CHRONO_LIB) link_chrono=\"yes\"; break],\n+                                 [link_chrono=\"no\"])\n+\t\t\t\tdone\n+                fi\n+\n+            else\n+               for ax_lib in $ax_boost_user_chrono_lib boost_chrono-$ax_boost_user_chrono_lib; do\n+\t\t\t\t      AC_CHECK_LIB($ax_lib, exit,\n+                                   [BOOST_CHRONO_LIB=\"-l$ax_lib\"; AC_SUBST(BOOST_CHRONO_LIB) link_chrono=\"yes\"; break],\n+                                   [link_chrono=\"no\"])\n+                  done\n+\n+            fi\n+            if test \"x$ax_lib\" = \"x\"; then\n+                AC_MSG_ERROR(Could not find a version of the library!)\n+            fi\n+\t\t\tif test \"x$link_chrono\" = \"xno\"; then\n+\t\t\t\tAC_MSG_ERROR(Could not link against $ax_lib !)\n+\t\t\tfi\n+\t\tfi\n+\n+\t\tCPPFLAGS=\"$CPPFLAGS_SAVED\"\n+\tLDFLAGS=\"$LDFLAGS_SAVED\"\n+\tfi\n+])"
      },
      {
        "sha": "2a62da8d89f9e284edbe4f00a0988cc984dce23d",
        "filename": "src/m4/ax_boost_filesystem.m4",
        "status": "added",
        "additions": 118,
        "deletions": 0,
        "changes": 118,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/35b8af92265ed74de63c3818e5290c27b3f35df2/src/m4/ax_boost_filesystem.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/35b8af92265ed74de63c3818e5290c27b3f35df2/src/m4/ax_boost_filesystem.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/m4/ax_boost_filesystem.m4?ref=35b8af92265ed74de63c3818e5290c27b3f35df2",
        "patch": "@@ -0,0 +1,118 @@\n+# ===========================================================================\n+#    http://www.gnu.org/software/autoconf-archive/ax_boost_filesystem.html\n+# ===========================================================================\n+#\n+# SYNOPSIS\n+#\n+#   AX_BOOST_FILESYSTEM\n+#\n+# DESCRIPTION\n+#\n+#   Test for Filesystem library from the Boost C++ libraries. The macro\n+#   requires a preceding call to AX_BOOST_BASE. Further documentation is\n+#   available at <http://randspringer.de/boost/index.html>.\n+#\n+#   This macro calls:\n+#\n+#     AC_SUBST(BOOST_FILESYSTEM_LIB)\n+#\n+#   And sets:\n+#\n+#     HAVE_BOOST_FILESYSTEM\n+#\n+# LICENSE\n+#\n+#   Copyright (c) 2009 Thomas Porschberg <thomas@randspringer.de>\n+#   Copyright (c) 2009 Michael Tindal\n+#   Copyright (c) 2009 Roman Rybalko <libtorrent@romanr.info>\n+#\n+#   Copying and distribution of this file, with or without modification, are\n+#   permitted in any medium without royalty provided the copyright notice\n+#   and this notice are preserved. This file is offered as-is, without any\n+#   warranty.\n+\n+#serial 21\n+\n+AC_DEFUN([AX_BOOST_FILESYSTEM],\n+[\n+\tAC_ARG_WITH([boost-filesystem],\n+\tAS_HELP_STRING([--with-boost-filesystem@<:@=special-lib@:>@],\n+                   [use the Filesystem library from boost - it is possible to specify a certain library for the linker\n+                        e.g. --with-boost-filesystem=boost_filesystem-gcc-mt ]),\n+        [\n+        if test \"$withval\" = \"no\"; then\n+\t\t\twant_boost=\"no\"\n+        elif test \"$withval\" = \"yes\"; then\n+            want_boost=\"yes\"\n+            ax_boost_user_filesystem_lib=\"\"\n+        else\n+\t\t    want_boost=\"yes\"\n+\t\tax_boost_user_filesystem_lib=\"$withval\"\n+\t\tfi\n+        ],\n+        [want_boost=\"yes\"]\n+\t)\n+\n+\tif test \"x$want_boost\" = \"xyes\"; then\n+        AC_REQUIRE([AC_PROG_CC])\n+\t\tCPPFLAGS_SAVED=\"$CPPFLAGS\"\n+\t\tCPPFLAGS=\"$CPPFLAGS $BOOST_CPPFLAGS\"\n+\t\texport CPPFLAGS\n+\n+\t\tLDFLAGS_SAVED=\"$LDFLAGS\"\n+\t\tLDFLAGS=\"$LDFLAGS $BOOST_LDFLAGS\"\n+\t\texport LDFLAGS\n+\n+\t\tLIBS_SAVED=$LIBS\n+\t\tLIBS=\"$LIBS $BOOST_SYSTEM_LIB\"\n+\t\texport LIBS\n+\n+        AC_CACHE_CHECK(whether the Boost::Filesystem library is available,\n+\t\t\t\t\t   ax_cv_boost_filesystem,\n+        [AC_LANG_PUSH([C++])\n+         AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[@%:@include <boost/filesystem/path.hpp>]],\n+                                   [[using namespace boost::filesystem;\n+                                   path my_path( \"foo/bar/data.txt\" );\n+                                   return 0;]])],\n+\t\t\t\t\t       ax_cv_boost_filesystem=yes, ax_cv_boost_filesystem=no)\n+         AC_LANG_POP([C++])\n+\t\t])\n+\t\tif test \"x$ax_cv_boost_filesystem\" = \"xyes\"; then\n+\t\t\tAC_DEFINE(HAVE_BOOST_FILESYSTEM,,[define if the Boost::Filesystem library is available])\n+            BOOSTLIBDIR=`echo $BOOST_LDFLAGS | sed -e 's/@<:@^\\/@:>@*//'`\n+            if test \"x$ax_boost_user_filesystem_lib\" = \"x\"; then\n+                for libextension in `ls $BOOSTLIBDIR/libboost_filesystem*.so* $BOOSTLIBDIR/libboost_filesystem*.dylib* $BOOSTLIBDIR/libboost_filesystem*.a* 2>/dev/null | sed 's,.*/,,' | sed -e 's;^lib\\(boost_filesystem.*\\)\\.so.*$;\\1;' -e 's;^lib\\(boost_filesystem.*\\)\\.a*$;\\1;' -e 's;^lib\\(boost_filesystem.*\\)\\.dylib$;\\1;'` ; do\n+                     ax_lib=${libextension}\n+\t\t\t\t    AC_CHECK_LIB($ax_lib, exit,\n+                                 [BOOST_FILESYSTEM_LIB=\"-l$ax_lib\"; AC_SUBST(BOOST_FILESYSTEM_LIB) link_filesystem=\"yes\"; break],\n+                                 [link_filesystem=\"no\"])\n+\t\t\t\tdone\n+                if test \"x$link_program_options\" != \"xyes\"; then\n+                for libextension in `ls $BOOSTLIBDIR/boost_filesystem*.{dll,a}* 2>/dev/null | sed 's,.*/,,' | sed -e 's;^\\(boost_filesystem.*\\)\\.dll.*$;\\1;' -e 's;^\\(boost_filesystem.*\\)\\.a*$;\\1;'` ; do\n+                     ax_lib=${libextension}\n+\t\t\t\t    AC_CHECK_LIB($ax_lib, exit,\n+                                 [BOOST_FILESYSTEM_LIB=\"-l$ax_lib\"; AC_SUBST(BOOST_FILESYSTEM_LIB) link_filesystem=\"yes\"; break],\n+                                 [link_filesystem=\"no\"])\n+\t\t\t\tdone\n+\t\t    fi\n+            else\n+               for ax_lib in $ax_boost_user_filesystem_lib boost_filesystem-$ax_boost_user_filesystem_lib; do\n+\t\t\t\t      AC_CHECK_LIB($ax_lib, exit,\n+                                   [BOOST_FILESYSTEM_LIB=\"-l$ax_lib\"; AC_SUBST(BOOST_FILESYSTEM_LIB) link_filesystem=\"yes\"; break],\n+                                   [link_filesystem=\"no\"])\n+                  done\n+\n+            fi\n+            if test \"x$ax_lib\" = \"x\"; then\n+                AC_MSG_ERROR(Could not find a version of the library!)\n+            fi\n+\t\t\tif test \"x$link_filesystem\" != \"xyes\"; then\n+\t\t\t\tAC_MSG_ERROR(Could not link against $ax_lib !)\n+\t\t\tfi\n+\t\tfi\n+\n+\t\tCPPFLAGS=\"$CPPFLAGS_SAVED\"\n+\t\tLDFLAGS=\"$LDFLAGS_SAVED\"\n+\t\tLIBS=\"$LIBS_SAVED\"\n+\tfi\n+])"
      },
      {
        "sha": "d612f91da36a2d55f8676f958cb46397c4509135",
        "filename": "src/m4/ax_boost_program_options.m4",
        "status": "added",
        "additions": 108,
        "deletions": 0,
        "changes": 108,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/35b8af92265ed74de63c3818e5290c27b3f35df2/src/m4/ax_boost_program_options.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/35b8af92265ed74de63c3818e5290c27b3f35df2/src/m4/ax_boost_program_options.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/m4/ax_boost_program_options.m4?ref=35b8af92265ed74de63c3818e5290c27b3f35df2",
        "patch": "@@ -0,0 +1,108 @@\n+# ============================================================================\n+#  http://www.gnu.org/software/autoconf-archive/ax_boost_program_options.html\n+# ============================================================================\n+#\n+# SYNOPSIS\n+#\n+#   AX_BOOST_PROGRAM_OPTIONS\n+#\n+# DESCRIPTION\n+#\n+#   Test for program options library from the Boost C++ libraries. The macro\n+#   requires a preceding call to AX_BOOST_BASE. Further documentation is\n+#   available at <http://randspringer.de/boost/index.html>.\n+#\n+#   This macro calls:\n+#\n+#     AC_SUBST(BOOST_PROGRAM_OPTIONS_LIB)\n+#\n+#   And sets:\n+#\n+#     HAVE_BOOST_PROGRAM_OPTIONS\n+#\n+# LICENSE\n+#\n+#   Copyright (c) 2009 Thomas Porschberg <thomas@randspringer.de>\n+#\n+#   Copying and distribution of this file, with or without modification, are\n+#   permitted in any medium without royalty provided the copyright notice\n+#   and this notice are preserved. This file is offered as-is, without any\n+#   warranty.\n+\n+#serial 20\n+\n+AC_DEFUN([AX_BOOST_PROGRAM_OPTIONS],\n+[\n+\tAC_ARG_WITH([boost-program-options],\n+\t\tAS_HELP_STRING([--with-boost-program-options@<:@=special-lib@:>@],\n+                       [use the program options library from boost - it is possible to specify a certain library for the linker\n+                        e.g. --with-boost-program-options=boost_program_options-gcc-mt-1_33_1 ]),\n+        [\n+        if test \"$withval\" = \"no\"; then\n+\t\t\twant_boost=\"no\"\n+        elif test \"$withval\" = \"yes\"; then\n+            want_boost=\"yes\"\n+            ax_boost_user_program_options_lib=\"\"\n+        else\n+\t\t    want_boost=\"yes\"\n+\t\tax_boost_user_program_options_lib=\"$withval\"\n+\t\tfi\n+        ],\n+        [want_boost=\"yes\"]\n+\t)\n+\n+\tif test \"x$want_boost\" = \"xyes\"; then\n+        AC_REQUIRE([AC_PROG_CC])\n+\t    export want_boost\n+\t\tCPPFLAGS_SAVED=\"$CPPFLAGS\"\n+\t\tCPPFLAGS=\"$CPPFLAGS $BOOST_CPPFLAGS\"\n+\t\texport CPPFLAGS\n+\t\tLDFLAGS_SAVED=\"$LDFLAGS\"\n+\t\tLDFLAGS=\"$LDFLAGS $BOOST_LDFLAGS\"\n+\t\texport LDFLAGS\n+\t\tAC_CACHE_CHECK([whether the Boost::Program_Options library is available],\n+\t\t\t\t\t   ax_cv_boost_program_options,\n+\t\t\t\t\t   [AC_LANG_PUSH(C++)\n+\t\t\t\tAC_COMPILE_IFELSE([AC_LANG_PROGRAM([[@%:@include <boost/program_options.hpp>\n+                                                          ]],\n+                                  [[boost::program_options::options_description generic(\"Generic options\");\n+                                   return 0;]])],\n+                           ax_cv_boost_program_options=yes, ax_cv_boost_program_options=no)\n+\t\t\t\t\tAC_LANG_POP([C++])\n+\t\t])\n+\t\tif test \"$ax_cv_boost_program_options\" = yes; then\n+\t\t\t\tAC_DEFINE(HAVE_BOOST_PROGRAM_OPTIONS,,[define if the Boost::PROGRAM_OPTIONS library is available])\n+                  BOOSTLIBDIR=`echo $BOOST_LDFLAGS | sed -e 's/@<:@^\\/@:>@*//'`\n+                if test \"x$ax_boost_user_program_options_lib\" = \"x\"; then\n+                for libextension in `ls $BOOSTLIBDIR/libboost_program_options*.so* 2>/dev/null | sed 's,.*/,,' | sed -e 's;^lib\\(boost_program_options.*\\)\\.so.*$;\\1;'` `ls $BOOSTLIBDIR/libboost_program_options*.a* 2>/dev/null | sed 's,.*/,,' | sed -e 's;^lib\\(boost_program_options.*\\)\\.a*$;\\1;'` ; do\n+                     ax_lib=${libextension}\n+\t\t\t\t    AC_CHECK_LIB($ax_lib, exit,\n+                                 [BOOST_PROGRAM_OPTIONS_LIB=\"-l$ax_lib\"; AC_SUBST(BOOST_PROGRAM_OPTIONS_LIB) link_program_options=\"yes\"; break],\n+                                 [link_program_options=\"no\"])\n+\t\t\t\tdone\n+                if test \"x$link_program_options\" != \"xyes\"; then\n+                for libextension in `ls $BOOSTLIBDIR/boost_program_options*.dll* 2>/dev/null | sed 's,.*/,,' | sed -e 's;^\\(boost_program_options.*\\)\\.dll.*$;\\1;'` `ls $BOOSTLIBDIR/boost_program_options*.a* 2>/dev/null | sed 's,.*/,,' | sed -e 's;^\\(boost_program_options.*\\)\\.a*$;\\1;'` ; do\n+                     ax_lib=${libextension}\n+\t\t\t\t    AC_CHECK_LIB($ax_lib, exit,\n+                                 [BOOST_PROGRAM_OPTIONS_LIB=\"-l$ax_lib\"; AC_SUBST(BOOST_PROGRAM_OPTIONS_LIB) link_program_options=\"yes\"; break],\n+                                 [link_program_options=\"no\"])\n+\t\t\t\tdone\n+                fi\n+                else\n+                  for ax_lib in $ax_boost_user_program_options_lib boost_program_options-$ax_boost_user_program_options_lib; do\n+\t\t\t\t      AC_CHECK_LIB($ax_lib, main,\n+                                   [BOOST_PROGRAM_OPTIONS_LIB=\"-l$ax_lib\"; AC_SUBST(BOOST_PROGRAM_OPTIONS_LIB) link_program_options=\"yes\"; break],\n+                                   [link_program_options=\"no\"])\n+                  done\n+                fi\n+            if test \"x$ax_lib\" = \"x\"; then\n+                AC_MSG_ERROR(Could not find a version of the library!)\n+            fi\n+\t\t\t\tif test \"x$link_program_options\" != \"xyes\"; then\n+\t\t\t\t\tAC_MSG_ERROR([Could not link against [$ax_lib] !])\n+\t\t\t\tfi\n+\t\tfi\n+\t\tCPPFLAGS=\"$CPPFLAGS_SAVED\"\n+\tLDFLAGS=\"$LDFLAGS_SAVED\"\n+\tfi\n+])"
      },
      {
        "sha": "7fbf6d360d7f2ab8e9811ce0cfb6d40cef64ed17",
        "filename": "src/m4/ax_boost_system.m4",
        "status": "added",
        "additions": 120,
        "deletions": 0,
        "changes": 120,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/35b8af92265ed74de63c3818e5290c27b3f35df2/src/m4/ax_boost_system.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/35b8af92265ed74de63c3818e5290c27b3f35df2/src/m4/ax_boost_system.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/m4/ax_boost_system.m4?ref=35b8af92265ed74de63c3818e5290c27b3f35df2",
        "patch": "@@ -0,0 +1,120 @@\n+# ===========================================================================\n+#      http://www.gnu.org/software/autoconf-archive/ax_boost_system.html\n+# ===========================================================================\n+#\n+# SYNOPSIS\n+#\n+#   AX_BOOST_SYSTEM\n+#\n+# DESCRIPTION\n+#\n+#   Test for System library from the Boost C++ libraries. The macro requires\n+#   a preceding call to AX_BOOST_BASE. Further documentation is available at\n+#   <http://randspringer.de/boost/index.html>.\n+#\n+#   This macro calls:\n+#\n+#     AC_SUBST(BOOST_SYSTEM_LIB)\n+#\n+#   And sets:\n+#\n+#     HAVE_BOOST_SYSTEM\n+#\n+# LICENSE\n+#\n+#   Copyright (c) 2008 Thomas Porschberg <thomas@randspringer.de>\n+#   Copyright (c) 2008 Michael Tindal\n+#   Copyright (c) 2008 Daniel Casimiro <dan.casimiro@gmail.com>\n+#\n+#   Copying and distribution of this file, with or without modification, are\n+#   permitted in any medium without royalty provided the copyright notice\n+#   and this notice are preserved. This file is offered as-is, without any\n+#   warranty.\n+\n+#serial 14\n+\n+AC_DEFUN([AX_BOOST_SYSTEM],\n+[\n+\tAC_ARG_WITH([boost-system],\n+\tAS_HELP_STRING([--with-boost-system@<:@=special-lib@:>@],\n+                   [use the System library from boost - it is possible to specify a certain library for the linker\n+                        e.g. --with-boost-system=boost_system-gcc-mt ]),\n+        [\n+        if test \"$withval\" = \"no\"; then\n+\t\t\twant_boost=\"no\"\n+        elif test \"$withval\" = \"yes\"; then\n+            want_boost=\"yes\"\n+            ax_boost_user_system_lib=\"\"\n+        else\n+\t\t    want_boost=\"yes\"\n+\t\tax_boost_user_system_lib=\"$withval\"\n+\t\tfi\n+        ],\n+        [want_boost=\"yes\"]\n+\t)\n+\n+\tif test \"x$want_boost\" = \"xyes\"; then\n+        AC_REQUIRE([AC_PROG_CC])\n+        AC_REQUIRE([AC_CANONICAL_BUILD])\n+\t\tCPPFLAGS_SAVED=\"$CPPFLAGS\"\n+\t\tCPPFLAGS=\"$CPPFLAGS $BOOST_CPPFLAGS\"\n+\t\texport CPPFLAGS\n+\n+\t\tLDFLAGS_SAVED=\"$LDFLAGS\"\n+\t\tLDFLAGS=\"$LDFLAGS $BOOST_LDFLAGS\"\n+\t\texport LDFLAGS\n+\n+        AC_CACHE_CHECK(whether the Boost::System library is available,\n+\t\t\t\t\t   ax_cv_boost_system,\n+        [AC_LANG_PUSH([C++])\n+\t\t\t CXXFLAGS_SAVE=$CXXFLAGS\n+\n+\t\t\t AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[@%:@include <boost/system/error_code.hpp>]],\n+                                   [[boost::system::system_category]])],\n+                   ax_cv_boost_system=yes, ax_cv_boost_system=no)\n+\t\t\t CXXFLAGS=$CXXFLAGS_SAVE\n+             AC_LANG_POP([C++])\n+\t\t])\n+\t\tif test \"x$ax_cv_boost_system\" = \"xyes\"; then\n+\t\t\tAC_SUBST(BOOST_CPPFLAGS)\n+\n+\t\t\tAC_DEFINE(HAVE_BOOST_SYSTEM,,[define if the Boost::System library is available])\n+            BOOSTLIBDIR=`echo $BOOST_LDFLAGS | sed -e 's/@<:@^\\/@:>@*//'`\n+\n+\t\t\tLDFLAGS_SAVE=$LDFLAGS\n+            if test \"x$ax_boost_user_system_lib\" = \"x\"; then\n+                for libextension in `ls $BOOSTLIBDIR/libboost_system*.so* $BOOSTLIBDIR/libboost_system*.a* 2>/dev/null | sed 's,.*/,,' | sed -e 's;^lib\\(boost_system.*\\)\\.so.*$;\\1;' -e 's;^lib\\(boost_system.*\\)\\.a*$;\\1;'` ; do\n+                     ax_lib=${libextension}\n+\t\t\t\t    AC_CHECK_LIB($ax_lib, exit,\n+                                 [BOOST_SYSTEM_LIB=\"-l$ax_lib\"; AC_SUBST(BOOST_SYSTEM_LIB) link_system=\"yes\"; break],\n+                                 [link_system=\"no\"])\n+\t\t\t\tdone\n+                if test \"x$link_system\" != \"xyes\"; then\n+                for libextension in `ls $BOOSTLIBDIR/boost_system*.{dll,a}* 2>/dev/null | sed 's,.*/,,' | sed -e 's;^\\(boost_system.*\\)\\.dll.*$;\\1;' -e 's;^\\(boost_system.*\\)\\.a*$;\\1;'` ; do\n+                     ax_lib=${libextension}\n+\t\t\t\t    AC_CHECK_LIB($ax_lib, exit,\n+                                 [BOOST_SYSTEM_LIB=\"-l$ax_lib\"; AC_SUBST(BOOST_SYSTEM_LIB) link_system=\"yes\"; break],\n+                                 [link_system=\"no\"])\n+\t\t\t\tdone\n+                fi\n+\n+            else\n+               for ax_lib in $ax_boost_user_system_lib boost_system-$ax_boost_user_system_lib; do\n+\t\t\t\t      AC_CHECK_LIB($ax_lib, exit,\n+                                   [BOOST_SYSTEM_LIB=\"-l$ax_lib\"; AC_SUBST(BOOST_SYSTEM_LIB) link_system=\"yes\"; break],\n+                                   [link_system=\"no\"])\n+                  done\n+\n+            fi\n+            if test \"x$ax_lib\" = \"x\"; then\n+                AC_MSG_ERROR(Could not find a version of the library!)\n+            fi\n+\t\t\tif test \"x$link_system\" = \"xno\"; then\n+\t\t\t\tAC_MSG_ERROR(Could not link against $ax_lib !)\n+\t\t\tfi\n+\t\tfi\n+\n+\t\tCPPFLAGS=\"$CPPFLAGS_SAVED\"\n+\tLDFLAGS=\"$LDFLAGS_SAVED\"\n+\tfi\n+])"
      },
      {
        "sha": "d9cd8a1d1d4bf04e121976a9989dccf4b5c88a38",
        "filename": "src/m4/ax_boost_thread.m4",
        "status": "added",
        "additions": 153,
        "deletions": 0,
        "changes": 153,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/35b8af92265ed74de63c3818e5290c27b3f35df2/src/m4/ax_boost_thread.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/35b8af92265ed74de63c3818e5290c27b3f35df2/src/m4/ax_boost_thread.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/m4/ax_boost_thread.m4?ref=35b8af92265ed74de63c3818e5290c27b3f35df2",
        "patch": "@@ -0,0 +1,153 @@\n+# ===========================================================================\n+#      http://www.gnu.org/software/autoconf-archive/ax_boost_thread.html\n+# ===========================================================================\n+#\n+# SYNOPSIS\n+#\n+#   AX_BOOST_THREAD\n+#\n+# DESCRIPTION\n+#\n+#   Test for Thread library from the Boost C++ libraries. The macro requires\n+#   a preceding call to AX_BOOST_BASE. Further documentation is available at\n+#   <http://randspringer.de/boost/index.html>.\n+#\n+#   This macro calls:\n+#\n+#     AC_SUBST(BOOST_THREAD_LIB)\n+#\n+#   And sets:\n+#\n+#     HAVE_BOOST_THREAD\n+#\n+# LICENSE\n+#\n+#   Copyright (c) 2009 Thomas Porschberg <thomas@randspringer.de>\n+#   Copyright (c) 2009 Michael Tindal\n+#\n+#   Copying and distribution of this file, with or without modification, are\n+#   permitted in any medium without royalty provided the copyright notice\n+#   and this notice are preserved. This file is offered as-is, without any\n+#   warranty.\n+\n+#serial 22\n+\n+AC_DEFUN([AX_BOOST_THREAD],\n+[\n+\tAC_ARG_WITH([boost-thread],\n+\tAS_HELP_STRING([--with-boost-thread@<:@=special-lib@:>@],\n+                   [use the Thread library from boost - it is possible to specify a certain library for the linker\n+                        e.g. --with-boost-thread=boost_thread-gcc-mt ]),\n+        [\n+        if test \"$withval\" = \"no\"; then\n+\t\t\twant_boost=\"no\"\n+        elif test \"$withval\" = \"yes\"; then\n+            want_boost=\"yes\"\n+            ax_boost_user_thread_lib=\"\"\n+        else\n+\t\t    want_boost=\"yes\"\n+\t\tax_boost_user_thread_lib=\"$withval\"\n+\t\tfi\n+        ],\n+        [want_boost=\"yes\"]\n+\t)\n+\n+\tif test \"x$want_boost\" = \"xyes\"; then\n+        AC_REQUIRE([AC_PROG_CC])\n+        AC_REQUIRE([AC_CANONICAL_BUILD])\n+\t\tCPPFLAGS_SAVED=\"$CPPFLAGS\"\n+\t\tCPPFLAGS=\"$CPPFLAGS $BOOST_CPPFLAGS\"\n+\t\texport CPPFLAGS\n+\n+\t\tLDFLAGS_SAVED=\"$LDFLAGS\"\n+\t\tLDFLAGS=\"$LDFLAGS $BOOST_LDFLAGS\"\n+\t\texport LDFLAGS\n+\n+        AC_CACHE_CHECK(whether the Boost::Thread library is available,\n+\t\t\t\t\t   ax_cv_boost_thread,\n+        [AC_LANG_PUSH([C++])\n+\t\t\t CXXFLAGS_SAVE=$CXXFLAGS\n+\n+\t\t\t # let us handle platform dependent issues in\n+\t\t\t # configure.ac\n+\n+\t\t\t # if test \"x$build_os\" = \"xsolaris\" ; then\n+\t\t\t # \t CXXFLAGS=\"-pthreads $CXXFLAGS\"\n+\t\t\t # elif test \"x$build_os\" = \"xming32\" ; then\n+\t\t\t # \t CXXFLAGS=\"-mthreads $CXXFLAGS\"\n+\t\t\t # else\n+\t\t\t # \tCXXFLAGS=\"-pthread $CXXFLAGS\"\n+\t\t\t # fi\n+\n+\t\t\t AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[@%:@include <boost/thread/thread.hpp>]],\n+                                   [[boost::thread_group thrds;\n+                                   return 0;]])],\n+                   ax_cv_boost_thread=yes, ax_cv_boost_thread=no)\n+\t\t\t CXXFLAGS=$CXXFLAGS_SAVE\n+             AC_LANG_POP([C++])\n+\t\t])\n+\t\tif test \"x$ax_cv_boost_thread\" = \"xyes\"; then\n+           # if test \"x$build_os\" = \"xsolaris\" ; then\n+\t   # \t\t  BOOST_CPPFLAGS=\"-pthreads $BOOST_CPPFLAGS\"\n+\t   # \t   elif test \"x$build_os\" = \"xming32\" ; then\n+\t   # \t\t  BOOST_CPPFLAGS=\"-mthreads $BOOST_CPPFLAGS\"\n+\t   # \t   else\n+\t   # \t\t  BOOST_CPPFLAGS=\"-pthread $BOOST_CPPFLAGS\"\n+\t   # \t   fi\n+\n+\t\t\tAC_SUBST(BOOST_CPPFLAGS)\n+\n+\t\t\tAC_DEFINE(HAVE_BOOST_THREAD,,[define if the Boost::Thread library is available])\n+            BOOSTLIBDIR=`echo $BOOST_LDFLAGS | sed -e 's/@<:@^\\/@:>@*//'`\n+\n+\t\t\tLDFLAGS_SAVE=$LDFLAGS\n+                        # case \"x$build_os\" in\n+                        #   *bsd* )\n+                        #        LDFLAGS=\"-pthread $LDFLAGS\"\n+                        #   break;\n+                        #   ;;\n+                        # esac\n+            if test \"x$ax_boost_user_thread_lib\" = \"x\"; then\n+                for libextension in `ls $BOOSTLIBDIR/libboost_thread*.so* 2>/dev/null | sed 's,.*/,,' | sed -e 's;^lib\\(boost_thread.*\\)\\.so.*$;\\1;'` `ls $BOOSTLIBDIR/libboost_thread*.a* 2>/dev/null | sed 's,.*/,,' | sed -e 's;^lib\\(boost_thread.*\\)\\.a*$;\\1;'`; do\n+                     ax_lib=${libextension}\n+\t\t\t\t    AC_CHECK_LIB($ax_lib, exit,\n+                                 [BOOST_THREAD_LIB=\"-l$ax_lib\"; AC_SUBST(BOOST_THREAD_LIB) link_thread=\"yes\"; break],\n+                                 [link_thread=\"no\"])\n+\t\t\t\tdone\n+                if test \"x$link_thread\" != \"xyes\"; then\n+                for libextension in `ls $BOOSTLIBDIR/boost_thread*.dll* 2>/dev/null | sed 's,.*/,,' | sed -e 's;^\\(boost_thread.*\\)\\.dll.*$;\\1;'` `ls $BOOSTLIBDIR/boost_thread*.a* 2>/dev/null | sed 's,.*/,,' | sed -e 's;^\\(boost_thread.*\\)\\.a*$;\\1;'` ; do\n+                     ax_lib=${libextension}\n+\t\t\t\t    AC_CHECK_LIB($ax_lib, exit,\n+                                 [BOOST_THREAD_LIB=\"-l$ax_lib\"; AC_SUBST(BOOST_THREAD_LIB) link_thread=\"yes\"; break],\n+                                 [link_thread=\"no\"])\n+\t\t\t\tdone\n+                fi\n+\n+            else\n+               for ax_lib in $ax_boost_user_thread_lib boost_thread-$ax_boost_user_thread_lib; do\n+\t\t\t\t      AC_CHECK_LIB($ax_lib, exit,\n+                                   [BOOST_THREAD_LIB=\"-l$ax_lib\"; AC_SUBST(BOOST_THREAD_LIB) link_thread=\"yes\"; break],\n+                                   [link_thread=\"no\"])\n+                  done\n+\n+            fi\n+            if test \"x$ax_lib\" = \"x\"; then\n+                AC_MSG_ERROR(Could not find a version of the library!)\n+            fi\n+\t\t\t# if test \"x$link_thread\" = \"xno\"; then\n+\t\t\t# \tAC_MSG_ERROR(Could not link against $ax_lib !)\n+                        # else\n+                        #    case \"x$build_os\" in\n+                        #       *bsd* )\n+\t\t\t# \tBOOST_LDFLAGS=\"-pthread $BOOST_LDFLAGS\"\n+                        #       break;\n+                        #       ;;\n+                        #    esac\n+\n+\t\t\t# fi\n+\t\tfi\n+\n+\t\tCPPFLAGS=\"$CPPFLAGS_SAVED\"\n+\tLDFLAGS=\"$LDFLAGS_SAVED\"\n+\tfi\n+])"
      },
      {
        "sha": "1115f551212ae50807a3ae7aefe9477418a0103e",
        "filename": "src/m4/ax_boost_unit_test_framework.m4",
        "status": "added",
        "additions": 137,
        "deletions": 0,
        "changes": 137,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/35b8af92265ed74de63c3818e5290c27b3f35df2/src/m4/ax_boost_unit_test_framework.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/35b8af92265ed74de63c3818e5290c27b3f35df2/src/m4/ax_boost_unit_test_framework.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/m4/ax_boost_unit_test_framework.m4?ref=35b8af92265ed74de63c3818e5290c27b3f35df2",
        "patch": "@@ -0,0 +1,137 @@\n+# ================================================================================\n+#  http://www.gnu.org/software/autoconf-archive/ax_boost_unit_test_framework.html\n+# ================================================================================\n+#\n+# SYNOPSIS\n+#\n+#   AX_BOOST_UNIT_TEST_FRAMEWORK\n+#\n+# DESCRIPTION\n+#\n+#   Test for Unit_Test_Framework library from the Boost C++ libraries. The\n+#   macro requires a preceding call to AX_BOOST_BASE. Further documentation\n+#   is available at <http://randspringer.de/boost/index.html>.\n+#\n+#   This macro calls:\n+#\n+#     AC_SUBST(BOOST_UNIT_TEST_FRAMEWORK_LIB)\n+#\n+#   And sets:\n+#\n+#     HAVE_BOOST_UNIT_TEST_FRAMEWORK\n+#\n+# LICENSE\n+#\n+#   Copyright (c) 2008 Thomas Porschberg <thomas@randspringer.de>\n+#\n+#   Copying and distribution of this file, with or without modification, are\n+#   permitted in any medium without royalty provided the copyright notice\n+#   and this notice are preserved. This file is offered as-is, without any\n+#   warranty.\n+\n+#serial 19\n+\n+AC_DEFUN([AX_BOOST_UNIT_TEST_FRAMEWORK],\n+[\n+\tAC_ARG_WITH([boost-unit-test-framework],\n+\tAS_HELP_STRING([--with-boost-unit-test-framework@<:@=special-lib@:>@],\n+                   [use the Unit_Test_Framework library from boost - it is possible to specify a certain library for the linker\n+                        e.g. --with-boost-unit-test-framework=boost_unit_test_framework-gcc ]),\n+        [\n+        if test \"$withval\" = \"no\"; then\n+\t\t\twant_boost=\"no\"\n+        elif test \"$withval\" = \"yes\"; then\n+            want_boost=\"yes\"\n+            ax_boost_user_unit_test_framework_lib=\"\"\n+        else\n+\t\t    want_boost=\"yes\"\n+\t\tax_boost_user_unit_test_framework_lib=\"$withval\"\n+\t\tfi\n+        ],\n+        [want_boost=\"yes\"]\n+\t)\n+\n+\tif test \"x$want_boost\" = \"xyes\"; then\n+        AC_REQUIRE([AC_PROG_CC])\n+\t\tCPPFLAGS_SAVED=\"$CPPFLAGS\"\n+\t\tCPPFLAGS=\"$CPPFLAGS $BOOST_CPPFLAGS\"\n+\t\texport CPPFLAGS\n+\n+\t\tLDFLAGS_SAVED=\"$LDFLAGS\"\n+\t\tLDFLAGS=\"$LDFLAGS $BOOST_LDFLAGS\"\n+\t\texport LDFLAGS\n+\n+        AC_CACHE_CHECK(whether the Boost::Unit_Test_Framework library is available,\n+\t\t\t\t\t   ax_cv_boost_unit_test_framework,\n+        [AC_LANG_PUSH([C++])\n+\t\t\t AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[@%:@include <boost/test/unit_test.hpp>]],\n+                                    [[using boost::unit_test::test_suite;\n+\t\t\t\t\t\t\t test_suite* test= BOOST_TEST_SUITE( \"Unit test example 1\" ); return 0;]])],\n+                   ax_cv_boost_unit_test_framework=yes, ax_cv_boost_unit_test_framework=no)\n+         AC_LANG_POP([C++])\n+\t\t])\n+\t\tif test \"x$ax_cv_boost_unit_test_framework\" = \"xyes\"; then\n+\t\t\tAC_DEFINE(HAVE_BOOST_UNIT_TEST_FRAMEWORK,,[define if the Boost::Unit_Test_Framework library is available])\n+            BOOSTLIBDIR=`echo $BOOST_LDFLAGS | sed -e 's/@<:@^\\/@:>@*//'`\n+\n+            if test \"x$ax_boost_user_unit_test_framework_lib\" = \"x\"; then\n+\t\t\tsaved_ldflags=\"${LDFLAGS}\"\n+                for monitor_library in `ls $BOOSTLIBDIR/libboost_unit_test_framework*.so* $BOOSTLIBDIR/libboost_unit_test_framework*.dylib* $BOOSTLIBDIR/libboost_unit_test_framework*.a* 2>/dev/null` ; do\n+                    if test -r $monitor_library ; then\n+                       libextension=`echo $monitor_library | sed 's,.*/,,' | sed -e 's;^lib\\(boost_unit_test_framework.*\\)\\.so.*$;\\1;' -e 's;^lib\\(boost_unit_test_framework.*\\)\\.dylib.*$;\\1;' -e 's;^lib\\(boost_unit_test_framework.*\\)\\.a.*$;\\1;'`\n+                       ax_lib=${libextension}\n+                       link_unit_test_framework=\"yes\"\n+                    else\n+                       link_unit_test_framework=\"no\"\n+                    fi\n+\n+\t\t\t    if test \"x$link_unit_test_framework\" = \"xyes\"; then\n+                      BOOST_UNIT_TEST_FRAMEWORK_LIB=\"-l$ax_lib\"\n+                      AC_SUBST(BOOST_UNIT_TEST_FRAMEWORK_LIB)\n+\t\t\t\t\t  break\n+\t\t\t\t    fi\n+                done\n+                if test \"x$link_unit_test_framework\" != \"xyes\"; then\n+                for libextension in `ls $BOOSTLIBDIR/boost_unit_test_framework*.dll* $BOOSTLIBDIR/boost_unit_test_framework*.a* 2>/dev/null  | sed 's,.*/,,' | sed -e 's;^\\(boost_unit_test_framework.*\\)\\.dll.*$;\\1;' -e 's;^\\(boost_unit_test_framework.*\\)\\.a.*$;\\1;'` ; do\n+                     ax_lib=${libextension}\n+\t\t\t\t    AC_CHECK_LIB($ax_lib, exit,\n+                                 [BOOST_UNIT_TEST_FRAMEWORK_LIB=\"-l$ax_lib\"; AC_SUBST(BOOST_UNIT_TEST_FRAMEWORK_LIB) link_unit_test_framework=\"yes\"; break],\n+                                 [link_unit_test_framework=\"no\"])\n+\t\t\t\tdone\n+                fi\n+            else\n+                link_unit_test_framework=\"no\"\n+\t\t\tsaved_ldflags=\"${LDFLAGS}\"\n+                for ax_lib in boost_unit_test_framework-$ax_boost_user_unit_test_framework_lib $ax_boost_user_unit_test_framework_lib ; do\n+                   if test \"x$link_unit_test_framework\" = \"xyes\"; then\n+                      break;\n+                   fi\n+                   for unittest_library in `ls $BOOSTLIBDIR/lib${ax_lib}.so* $BOOSTLIBDIR/lib${ax_lib}.a* 2>/dev/null` ; do\n+                   if test -r $unittest_library ; then\n+                       libextension=`echo $unittest_library | sed 's,.*/,,' | sed -e 's;^lib\\(boost_unit_test_framework.*\\)\\.so.*$;\\1;' -e 's;^lib\\(boost_unit_test_framework.*\\)\\.a*$;\\1;'`\n+                       ax_lib=${libextension}\n+                       link_unit_test_framework=\"yes\"\n+                    else\n+                       link_unit_test_framework=\"no\"\n+                    fi\n+\n+\t\t\t\tif test \"x$link_unit_test_framework\" = \"xyes\"; then\n+                        BOOST_UNIT_TEST_FRAMEWORK_LIB=\"-l$ax_lib\"\n+                        AC_SUBST(BOOST_UNIT_TEST_FRAMEWORK_LIB)\n+\t\t\t\t\t    break\n+\t\t\t\t    fi\n+                  done\n+               done\n+            fi\n+            if test \"x$ax_lib\" = \"x\"; then\n+                AC_MSG_ERROR(Could not find a version of the library!)\n+            fi\n+\t\t\tif test \"x$link_unit_test_framework\" != \"xyes\"; then\n+\t\t\t\tAC_MSG_ERROR(Could not link against $ax_lib !)\n+\t\t\tfi\n+\t\tfi\n+\n+\t\tCPPFLAGS=\"$CPPFLAGS_SAVED\"\n+\tLDFLAGS=\"$LDFLAGS_SAVED\"\n+\tfi\n+])"
      },
      {
        "sha": "c3a8d695a1bcda95fd91cb6d8c03a94cdcb5b9c7",
        "filename": "src/m4/ax_check_compile_flag.m4",
        "status": "added",
        "additions": 72,
        "deletions": 0,
        "changes": 72,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/35b8af92265ed74de63c3818e5290c27b3f35df2/src/m4/ax_check_compile_flag.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/35b8af92265ed74de63c3818e5290c27b3f35df2/src/m4/ax_check_compile_flag.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/m4/ax_check_compile_flag.m4?ref=35b8af92265ed74de63c3818e5290c27b3f35df2",
        "patch": "@@ -0,0 +1,72 @@\n+# ===========================================================================\n+#   http://www.gnu.org/software/autoconf-archive/ax_check_compile_flag.html\n+# ===========================================================================\n+#\n+# SYNOPSIS\n+#\n+#   AX_CHECK_COMPILE_FLAG(FLAG, [ACTION-SUCCESS], [ACTION-FAILURE], [EXTRA-FLAGS])\n+#\n+# DESCRIPTION\n+#\n+#   Check whether the given FLAG works with the current language's compiler\n+#   or gives an error.  (Warnings, however, are ignored)\n+#\n+#   ACTION-SUCCESS/ACTION-FAILURE are shell commands to execute on\n+#   success/failure.\n+#\n+#   If EXTRA-FLAGS is defined, it is added to the current language's default\n+#   flags (e.g. CFLAGS) when the check is done.  The check is thus made with\n+#   the flags: \"CFLAGS EXTRA-FLAGS FLAG\".  This can for example be used to\n+#   force the compiler to issue an error when a bad flag is given.\n+#\n+#   NOTE: Implementation based on AX_CFLAGS_GCC_OPTION. Please keep this\n+#   macro in sync with AX_CHECK_{PREPROC,LINK}_FLAG.\n+#\n+# LICENSE\n+#\n+#   Copyright (c) 2008 Guido U. Draheim <guidod@gmx.de>\n+#   Copyright (c) 2011 Maarten Bosmans <mkbosmans@gmail.com>\n+#\n+#   This program is free software: you can redistribute it and/or modify it\n+#   under the terms of the GNU General Public License as published by the\n+#   Free Software Foundation, either version 3 of the License, or (at your\n+#   option) any later version.\n+#\n+#   This program is distributed in the hope that it will be useful, but\n+#   WITHOUT ANY WARRANTY; without even the implied warranty of\n+#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General\n+#   Public License for more details.\n+#\n+#   You should have received a copy of the GNU General Public License along\n+#   with this program. If not, see <http://www.gnu.org/licenses/>.\n+#\n+#   As a special exception, the respective Autoconf Macro's copyright owner\n+#   gives unlimited permission to copy, distribute and modify the configure\n+#   scripts that are the output of Autoconf when processing the Macro. You\n+#   need not follow the terms of the GNU General Public License when using\n+#   or distributing such scripts, even though portions of the text of the\n+#   Macro appear in them. The GNU General Public License (GPL) does govern\n+#   all other use of the material that constitutes the Autoconf Macro.\n+#\n+#   This special exception to the GPL applies to versions of the Autoconf\n+#   Macro released by the Autoconf Archive. When you make and distribute a\n+#   modified version of the Autoconf Macro, you may extend this special\n+#   exception to the GPL to apply to your modified version as well.\n+\n+#serial 2\n+\n+AC_DEFUN([AX_CHECK_COMPILE_FLAG],\n+[AC_PREREQ(2.59)dnl for _AC_LANG_PREFIX\n+AS_VAR_PUSHDEF([CACHEVAR],[ax_cv_check_[]_AC_LANG_ABBREV[]flags_$4_$1])dnl\n+AC_CACHE_CHECK([whether _AC_LANG compiler accepts $1], CACHEVAR, [\n+  ax_check_save_flags=$[]_AC_LANG_PREFIX[]FLAGS\n+  _AC_LANG_PREFIX[]FLAGS=\"$[]_AC_LANG_PREFIX[]FLAGS $4 $1\"\n+  AC_COMPILE_IFELSE([AC_LANG_PROGRAM()],\n+    [AS_VAR_SET(CACHEVAR,[yes])],\n+    [AS_VAR_SET(CACHEVAR,[no])])\n+  _AC_LANG_PREFIX[]FLAGS=$ax_check_save_flags])\n+AS_IF([test x\"AS_VAR_GET(CACHEVAR)\" = xyes],\n+  [m4_default([$2], :)],\n+  [m4_default([$3], :)])\n+AS_VAR_POPDEF([CACHEVAR])dnl\n+])dnl AX_CHECK_COMPILE_FLAGS"
      },
      {
        "sha": "e2d0d363e4c4ac672d36a2c964973136d007be73",
        "filename": "src/m4/ax_check_link_flag.m4",
        "status": "added",
        "additions": 71,
        "deletions": 0,
        "changes": 71,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/35b8af92265ed74de63c3818e5290c27b3f35df2/src/m4/ax_check_link_flag.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/35b8af92265ed74de63c3818e5290c27b3f35df2/src/m4/ax_check_link_flag.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/m4/ax_check_link_flag.m4?ref=35b8af92265ed74de63c3818e5290c27b3f35df2",
        "patch": "@@ -0,0 +1,71 @@\n+# ===========================================================================\n+#    http://www.gnu.org/software/autoconf-archive/ax_check_link_flag.html\n+# ===========================================================================\n+#\n+# SYNOPSIS\n+#\n+#   AX_CHECK_LINK_FLAG(FLAG, [ACTION-SUCCESS], [ACTION-FAILURE], [EXTRA-FLAGS])\n+#\n+# DESCRIPTION\n+#\n+#   Check whether the given FLAG works with the linker or gives an error.\n+#   (Warnings, however, are ignored)\n+#\n+#   ACTION-SUCCESS/ACTION-FAILURE are shell commands to execute on\n+#   success/failure.\n+#\n+#   If EXTRA-FLAGS is defined, it is added to the linker's default flags\n+#   when the check is done.  The check is thus made with the flags: \"LDFLAGS\n+#   EXTRA-FLAGS FLAG\".  This can for example be used to force the linker to\n+#   issue an error when a bad flag is given.\n+#\n+#   NOTE: Implementation based on AX_CFLAGS_GCC_OPTION. Please keep this\n+#   macro in sync with AX_CHECK_{PREPROC,COMPILE}_FLAG.\n+#\n+# LICENSE\n+#\n+#   Copyright (c) 2008 Guido U. Draheim <guidod@gmx.de>\n+#   Copyright (c) 2011 Maarten Bosmans <mkbosmans@gmail.com>\n+#\n+#   This program is free software: you can redistribute it and/or modify it\n+#   under the terms of the GNU General Public License as published by the\n+#   Free Software Foundation, either version 3 of the License, or (at your\n+#   option) any later version.\n+#\n+#   This program is distributed in the hope that it will be useful, but\n+#   WITHOUT ANY WARRANTY; without even the implied warranty of\n+#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General\n+#   Public License for more details.\n+#\n+#   You should have received a copy of the GNU General Public License along\n+#   with this program. If not, see <http://www.gnu.org/licenses/>.\n+#\n+#   As a special exception, the respective Autoconf Macro's copyright owner\n+#   gives unlimited permission to copy, distribute and modify the configure\n+#   scripts that are the output of Autoconf when processing the Macro. You\n+#   need not follow the terms of the GNU General Public License when using\n+#   or distributing such scripts, even though portions of the text of the\n+#   Macro appear in them. The GNU General Public License (GPL) does govern\n+#   all other use of the material that constitutes the Autoconf Macro.\n+#\n+#   This special exception to the GPL applies to versions of the Autoconf\n+#   Macro released by the Autoconf Archive. When you make and distribute a\n+#   modified version of the Autoconf Macro, you may extend this special\n+#   exception to the GPL to apply to your modified version as well.\n+\n+#serial 2\n+\n+AC_DEFUN([AX_CHECK_LINK_FLAG],\n+[AS_VAR_PUSHDEF([CACHEVAR],[ax_cv_check_ldflags_$4_$1])dnl\n+AC_CACHE_CHECK([whether the linker accepts $1], CACHEVAR, [\n+  ax_check_save_flags=$LDFLAGS\n+  LDFLAGS=\"$LDFLAGS $4 $1\"\n+  AC_LINK_IFELSE([AC_LANG_PROGRAM()],\n+    [AS_VAR_SET(CACHEVAR,[yes])],\n+    [AS_VAR_SET(CACHEVAR,[no])])\n+  LDFLAGS=$ax_check_save_flags])\n+AS_IF([test x\"AS_VAR_GET(CACHEVAR)\" = xyes],\n+  [m4_default([$2], :)],\n+  [m4_default([$3], :)])\n+AS_VAR_POPDEF([CACHEVAR])dnl\n+])dnl AX_CHECK_LINK_FLAGS"
      },
      {
        "sha": "b1cfef6b86dd6ed3321fe2b92e215a06cfbdbcdd",
        "filename": "src/m4/ax_check_preproc_flag.m4",
        "status": "added",
        "additions": 72,
        "deletions": 0,
        "changes": 72,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/35b8af92265ed74de63c3818e5290c27b3f35df2/src/m4/ax_check_preproc_flag.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/35b8af92265ed74de63c3818e5290c27b3f35df2/src/m4/ax_check_preproc_flag.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/m4/ax_check_preproc_flag.m4?ref=35b8af92265ed74de63c3818e5290c27b3f35df2",
        "patch": "@@ -0,0 +1,72 @@\n+# ===========================================================================\n+#   http://www.gnu.org/software/autoconf-archive/ax_check_preproc_flag.html\n+# ===========================================================================\n+#\n+# SYNOPSIS\n+#\n+#   AX_CHECK_PREPROC_FLAG(FLAG, [ACTION-SUCCESS], [ACTION-FAILURE], [EXTRA-FLAGS])\n+#\n+# DESCRIPTION\n+#\n+#   Check whether the given FLAG works with the current language's\n+#   preprocessor or gives an error.  (Warnings, however, are ignored)\n+#\n+#   ACTION-SUCCESS/ACTION-FAILURE are shell commands to execute on\n+#   success/failure.\n+#\n+#   If EXTRA-FLAGS is defined, it is added to the preprocessor's default\n+#   flags when the check is done.  The check is thus made with the flags:\n+#   \"CPPFLAGS EXTRA-FLAGS FLAG\".  This can for example be used to force the\n+#   preprocessor to issue an error when a bad flag is given.\n+#\n+#   NOTE: Implementation based on AX_CFLAGS_GCC_OPTION. Please keep this\n+#   macro in sync with AX_CHECK_{COMPILE,LINK}_FLAG.\n+#\n+# LICENSE\n+#\n+#   Copyright (c) 2008 Guido U. Draheim <guidod@gmx.de>\n+#   Copyright (c) 2011 Maarten Bosmans <mkbosmans@gmail.com>\n+#\n+#   This program is free software: you can redistribute it and/or modify it\n+#   under the terms of the GNU General Public License as published by the\n+#   Free Software Foundation, either version 3 of the License, or (at your\n+#   option) any later version.\n+#\n+#   This program is distributed in the hope that it will be useful, but\n+#   WITHOUT ANY WARRANTY; without even the implied warranty of\n+#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General\n+#   Public License for more details.\n+#\n+#   You should have received a copy of the GNU General Public License along\n+#   with this program. If not, see <http://www.gnu.org/licenses/>.\n+#\n+#   As a special exception, the respective Autoconf Macro's copyright owner\n+#   gives unlimited permission to copy, distribute and modify the configure\n+#   scripts that are the output of Autoconf when processing the Macro. You\n+#   need not follow the terms of the GNU General Public License when using\n+#   or distributing such scripts, even though portions of the text of the\n+#   Macro appear in them. The GNU General Public License (GPL) does govern\n+#   all other use of the material that constitutes the Autoconf Macro.\n+#\n+#   This special exception to the GPL applies to versions of the Autoconf\n+#   Macro released by the Autoconf Archive. When you make and distribute a\n+#   modified version of the Autoconf Macro, you may extend this special\n+#   exception to the GPL to apply to your modified version as well.\n+\n+#serial 2\n+\n+AC_DEFUN([AX_CHECK_PREPROC_FLAG],\n+[AC_PREREQ(2.59)dnl for _AC_LANG_PREFIX\n+AS_VAR_PUSHDEF([CACHEVAR],[ax_cv_check_[]_AC_LANG_ABBREV[]cppflags_$4_$1])dnl\n+AC_CACHE_CHECK([whether _AC_LANG preprocessor accepts $1], CACHEVAR, [\n+  ax_check_save_flags=$CPPFLAGS\n+  CPPFLAGS=\"$CPPFLAGS $4 $1\"\n+  AC_PREPROC_IFELSE([AC_LANG_PROGRAM()],\n+    [AS_VAR_SET(CACHEVAR,[yes])],\n+    [AS_VAR_SET(CACHEVAR,[no])])\n+  CPPFLAGS=$ax_check_save_flags])\n+AS_IF([test x\"AS_VAR_GET(CACHEVAR)\" = xyes],\n+  [m4_default([$2], :)],\n+  [m4_default([$3], :)])\n+AS_VAR_POPDEF([CACHEVAR])dnl\n+])dnl AX_CHECK_PREPROC_FLAGS"
      },
      {
        "sha": "6d400ed4e8e29dfc7a650e2ca704a228d0dc61ba",
        "filename": "src/m4/ax_pthread.m4",
        "status": "added",
        "additions": 317,
        "deletions": 0,
        "changes": 317,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/35b8af92265ed74de63c3818e5290c27b3f35df2/src/m4/ax_pthread.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/35b8af92265ed74de63c3818e5290c27b3f35df2/src/m4/ax_pthread.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/m4/ax_pthread.m4?ref=35b8af92265ed74de63c3818e5290c27b3f35df2",
        "patch": "@@ -0,0 +1,317 @@\n+# ===========================================================================\n+#        http://www.gnu.org/software/autoconf-archive/ax_pthread.html\n+# ===========================================================================\n+#\n+# SYNOPSIS\n+#\n+#   AX_PTHREAD([ACTION-IF-FOUND[, ACTION-IF-NOT-FOUND]])\n+#\n+# DESCRIPTION\n+#\n+#   This macro figures out how to build C programs using POSIX threads. It\n+#   sets the PTHREAD_LIBS output variable to the threads library and linker\n+#   flags, and the PTHREAD_CFLAGS output variable to any special C compiler\n+#   flags that are needed. (The user can also force certain compiler\n+#   flags/libs to be tested by setting these environment variables.)\n+#\n+#   Also sets PTHREAD_CC to any special C compiler that is needed for\n+#   multi-threaded programs (defaults to the value of CC otherwise). (This\n+#   is necessary on AIX to use the special cc_r compiler alias.)\n+#\n+#   NOTE: You are assumed to not only compile your program with these flags,\n+#   but also link it with them as well. e.g. you should link with\n+#   $PTHREAD_CC $CFLAGS $PTHREAD_CFLAGS $LDFLAGS ... $PTHREAD_LIBS $LIBS\n+#\n+#   If you are only building threads programs, you may wish to use these\n+#   variables in your default LIBS, CFLAGS, and CC:\n+#\n+#     LIBS=\"$PTHREAD_LIBS $LIBS\"\n+#     CFLAGS=\"$CFLAGS $PTHREAD_CFLAGS\"\n+#     CC=\"$PTHREAD_CC\"\n+#\n+#   In addition, if the PTHREAD_CREATE_JOINABLE thread-attribute constant\n+#   has a nonstandard name, defines PTHREAD_CREATE_JOINABLE to that name\n+#   (e.g. PTHREAD_CREATE_UNDETACHED on AIX).\n+#\n+#   Also HAVE_PTHREAD_PRIO_INHERIT is defined if pthread is found and the\n+#   PTHREAD_PRIO_INHERIT symbol is defined when compiling with\n+#   PTHREAD_CFLAGS.\n+#\n+#   ACTION-IF-FOUND is a list of shell commands to run if a threads library\n+#   is found, and ACTION-IF-NOT-FOUND is a list of commands to run it if it\n+#   is not found. If ACTION-IF-FOUND is not specified, the default action\n+#   will define HAVE_PTHREAD.\n+#\n+#   Please let the authors know if this macro fails on any platform, or if\n+#   you have any other suggestions or comments. This macro was based on work\n+#   by SGJ on autoconf scripts for FFTW (http://www.fftw.org/) (with help\n+#   from M. Frigo), as well as ac_pthread and hb_pthread macros posted by\n+#   Alejandro Forero Cuervo to the autoconf macro repository. We are also\n+#   grateful for the helpful feedback of numerous users.\n+#\n+#   Updated for Autoconf 2.68 by Daniel Richard G.\n+#\n+# LICENSE\n+#\n+#   Copyright (c) 2008 Steven G. Johnson <stevenj@alum.mit.edu>\n+#   Copyright (c) 2011 Daniel Richard G. <skunk@iSKUNK.ORG>\n+#\n+#   This program is free software: you can redistribute it and/or modify it\n+#   under the terms of the GNU General Public License as published by the\n+#   Free Software Foundation, either version 3 of the License, or (at your\n+#   option) any later version.\n+#\n+#   This program is distributed in the hope that it will be useful, but\n+#   WITHOUT ANY WARRANTY; without even the implied warranty of\n+#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General\n+#   Public License for more details.\n+#\n+#   You should have received a copy of the GNU General Public License along\n+#   with this program. If not, see <http://www.gnu.org/licenses/>.\n+#\n+#   As a special exception, the respective Autoconf Macro's copyright owner\n+#   gives unlimited permission to copy, distribute and modify the configure\n+#   scripts that are the output of Autoconf when processing the Macro. You\n+#   need not follow the terms of the GNU General Public License when using\n+#   or distributing such scripts, even though portions of the text of the\n+#   Macro appear in them. The GNU General Public License (GPL) does govern\n+#   all other use of the material that constitutes the Autoconf Macro.\n+#\n+#   This special exception to the GPL applies to versions of the Autoconf\n+#   Macro released by the Autoconf Archive. When you make and distribute a\n+#   modified version of the Autoconf Macro, you may extend this special\n+#   exception to the GPL to apply to your modified version as well.\n+\n+#serial 20\n+\n+AU_ALIAS([ACX_PTHREAD], [AX_PTHREAD])\n+AC_DEFUN([AX_PTHREAD], [\n+AC_REQUIRE([AC_CANONICAL_HOST])\n+AC_LANG_PUSH([C])\n+ax_pthread_ok=no\n+\n+# We used to check for pthread.h first, but this fails if pthread.h\n+# requires special compiler flags (e.g. on True64 or Sequent).\n+# It gets checked for in the link test anyway.\n+\n+# First of all, check if the user has set any of the PTHREAD_LIBS,\n+# etcetera environment variables, and if threads linking works using\n+# them:\n+if test x\"$PTHREAD_LIBS$PTHREAD_CFLAGS\" != x; then\n+        save_CFLAGS=\"$CFLAGS\"\n+        CFLAGS=\"$CFLAGS $PTHREAD_CFLAGS\"\n+        save_LIBS=\"$LIBS\"\n+        LIBS=\"$PTHREAD_LIBS $LIBS\"\n+        AC_MSG_CHECKING([for pthread_join in LIBS=$PTHREAD_LIBS with CFLAGS=$PTHREAD_CFLAGS])\n+        AC_TRY_LINK_FUNC(pthread_join, ax_pthread_ok=yes)\n+        AC_MSG_RESULT($ax_pthread_ok)\n+        if test x\"$ax_pthread_ok\" = xno; then\n+                PTHREAD_LIBS=\"\"\n+                PTHREAD_CFLAGS=\"\"\n+        fi\n+        LIBS=\"$save_LIBS\"\n+        CFLAGS=\"$save_CFLAGS\"\n+fi\n+\n+# We must check for the threads library under a number of different\n+# names; the ordering is very important because some systems\n+# (e.g. DEC) have both -lpthread and -lpthreads, where one of the\n+# libraries is broken (non-POSIX).\n+\n+# Create a list of thread flags to try.  Items starting with a \"-\" are\n+# C compiler flags, and other items are library names, except for \"none\"\n+# which indicates that we try without any flags at all, and \"pthread-config\"\n+# which is a program returning the flags for the Pth emulation library.\n+\n+ax_pthread_flags=\"pthreads none -Kthread -kthread lthread -pthread -pthreads -mthreads pthread --thread-safe -mt pthread-config\"\n+\n+# The ordering *is* (sometimes) important.  Some notes on the\n+# individual items follow:\n+\n+# pthreads: AIX (must check this before -lpthread)\n+# none: in case threads are in libc; should be tried before -Kthread and\n+#       other compiler flags to prevent continual compiler warnings\n+# -Kthread: Sequent (threads in libc, but -Kthread needed for pthread.h)\n+# -kthread: FreeBSD kernel threads (preferred to -pthread since SMP-able)\n+# lthread: LinuxThreads port on FreeBSD (also preferred to -pthread)\n+# -pthread: Linux/gcc (kernel threads), BSD/gcc (userland threads)\n+# -pthreads: Solaris/gcc\n+# -mthreads: Mingw32/gcc, Lynx/gcc\n+# -mt: Sun Workshop C (may only link SunOS threads [-lthread], but it\n+#      doesn't hurt to check since this sometimes defines pthreads too;\n+#      also defines -D_REENTRANT)\n+#      ... -mt is also the pthreads flag for HP/aCC\n+# pthread: Linux, etcetera\n+# --thread-safe: KAI C++\n+# pthread-config: use pthread-config program (for GNU Pth library)\n+\n+case ${host_os} in\n+        solaris*)\n+\n+        # On Solaris (at least, for some versions), libc contains stubbed\n+        # (non-functional) versions of the pthreads routines, so link-based\n+        # tests will erroneously succeed.  (We need to link with -pthreads/-mt/\n+        # -lpthread.)  (The stubs are missing pthread_cleanup_push, or rather\n+        # a function called by this macro, so we could check for that, but\n+        # who knows whether they'll stub that too in a future libc.)  So,\n+        # we'll just look for -pthreads and -lpthread first:\n+\n+        ax_pthread_flags=\"-pthreads pthread -mt -pthread $ax_pthread_flags\"\n+        ;;\n+\n+        darwin*)\n+        ax_pthread_flags=\"-pthread $ax_pthread_flags\"\n+        ;;\n+esac\n+\n+if test x\"$ax_pthread_ok\" = xno; then\n+for flag in $ax_pthread_flags; do\n+\n+        case $flag in\n+                none)\n+                AC_MSG_CHECKING([whether pthreads work without any flags])\n+                ;;\n+\n+                -*)\n+                AC_MSG_CHECKING([whether pthreads work with $flag])\n+                PTHREAD_CFLAGS=\"$flag\"\n+                ;;\n+\n+                pthread-config)\n+                AC_CHECK_PROG(ax_pthread_config, pthread-config, yes, no)\n+                if test x\"$ax_pthread_config\" = xno; then continue; fi\n+                PTHREAD_CFLAGS=\"`pthread-config --cflags`\"\n+                PTHREAD_LIBS=\"`pthread-config --ldflags` `pthread-config --libs`\"\n+                ;;\n+\n+                *)\n+                AC_MSG_CHECKING([for the pthreads library -l$flag])\n+                PTHREAD_LIBS=\"-l$flag\"\n+                ;;\n+        esac\n+\n+        save_LIBS=\"$LIBS\"\n+        save_CFLAGS=\"$CFLAGS\"\n+        LIBS=\"$PTHREAD_LIBS $LIBS\"\n+        CFLAGS=\"$CFLAGS $PTHREAD_CFLAGS\"\n+\n+        # Check for various functions.  We must include pthread.h,\n+        # since some functions may be macros.  (On the Sequent, we\n+        # need a special flag -Kthread to make this header compile.)\n+        # We check for pthread_join because it is in -lpthread on IRIX\n+        # while pthread_create is in libc.  We check for pthread_attr_init\n+        # due to DEC craziness with -lpthreads.  We check for\n+        # pthread_cleanup_push because it is one of the few pthread\n+        # functions on Solaris that doesn't have a non-functional libc stub.\n+        # We try pthread_create on general principles.\n+        AC_LINK_IFELSE([AC_LANG_PROGRAM([#include <pthread.h>\n+                        static void routine(void *a) { a = 0; }\n+                        static void *start_routine(void *a) { return a; }],\n+                       [pthread_t th; pthread_attr_t attr;\n+                        pthread_create(&th, 0, start_routine, 0);\n+                        pthread_join(th, 0);\n+                        pthread_attr_init(&attr);\n+                        pthread_cleanup_push(routine, 0);\n+                        pthread_cleanup_pop(0) /* ; */])],\n+                [ax_pthread_ok=yes],\n+                [])\n+\n+        LIBS=\"$save_LIBS\"\n+        CFLAGS=\"$save_CFLAGS\"\n+\n+        AC_MSG_RESULT($ax_pthread_ok)\n+        if test \"x$ax_pthread_ok\" = xyes; then\n+                break;\n+        fi\n+\n+        PTHREAD_LIBS=\"\"\n+        PTHREAD_CFLAGS=\"\"\n+done\n+fi\n+\n+# Various other checks:\n+if test \"x$ax_pthread_ok\" = xyes; then\n+        save_LIBS=\"$LIBS\"\n+        LIBS=\"$PTHREAD_LIBS $LIBS\"\n+        save_CFLAGS=\"$CFLAGS\"\n+        CFLAGS=\"$CFLAGS $PTHREAD_CFLAGS\"\n+\n+        # Detect AIX lossage: JOINABLE attribute is called UNDETACHED.\n+        AC_MSG_CHECKING([for joinable pthread attribute])\n+        attr_name=unknown\n+        for attr in PTHREAD_CREATE_JOINABLE PTHREAD_CREATE_UNDETACHED; do\n+            AC_LINK_IFELSE([AC_LANG_PROGRAM([#include <pthread.h>],\n+                           [int attr = $attr; return attr /* ; */])],\n+                [attr_name=$attr; break],\n+                [])\n+        done\n+        AC_MSG_RESULT($attr_name)\n+        if test \"$attr_name\" != PTHREAD_CREATE_JOINABLE; then\n+            AC_DEFINE_UNQUOTED(PTHREAD_CREATE_JOINABLE, $attr_name,\n+                               [Define to necessary symbol if this constant\n+                                uses a non-standard name on your system.])\n+        fi\n+\n+        AC_MSG_CHECKING([if more special flags are required for pthreads])\n+        flag=no\n+        case ${host_os} in\n+            aix* | freebsd* | darwin*) flag=\"-D_THREAD_SAFE\";;\n+            osf* | hpux*) flag=\"-D_REENTRANT\";;\n+            solaris*)\n+            if test \"$GCC\" = \"yes\"; then\n+                flag=\"-D_REENTRANT\"\n+            else\n+                flag=\"-mt -D_REENTRANT\"\n+            fi\n+            ;;\n+        esac\n+        AC_MSG_RESULT(${flag})\n+        if test \"x$flag\" != xno; then\n+            PTHREAD_CFLAGS=\"$flag $PTHREAD_CFLAGS\"\n+        fi\n+\n+        AC_CACHE_CHECK([for PTHREAD_PRIO_INHERIT],\n+            ax_cv_PTHREAD_PRIO_INHERIT, [\n+                AC_LINK_IFELSE([\n+                    AC_LANG_PROGRAM([[#include <pthread.h>]], [[int i = PTHREAD_PRIO_INHERIT;]])],\n+                    [ax_cv_PTHREAD_PRIO_INHERIT=yes],\n+                    [ax_cv_PTHREAD_PRIO_INHERIT=no])\n+            ])\n+        AS_IF([test \"x$ax_cv_PTHREAD_PRIO_INHERIT\" = \"xyes\"],\n+            AC_DEFINE([HAVE_PTHREAD_PRIO_INHERIT], 1, [Have PTHREAD_PRIO_INHERIT.]))\n+\n+        LIBS=\"$save_LIBS\"\n+        CFLAGS=\"$save_CFLAGS\"\n+\n+        # More AIX lossage: compile with *_r variant\n+        if test \"x$GCC\" != xyes; then\n+            case $host_os in\n+                aix*)\n+                AS_CASE([\"x/$CC\"],\n+                  [x*/c89|x*/c89_128|x*/c99|x*/c99_128|x*/cc|x*/cc128|x*/xlc|x*/xlc_v6|x*/xlc128|x*/xlc128_v6],\n+                  [#handle absolute path differently from PATH based program lookup\n+                   AS_CASE([\"x$CC\"],\n+                     [x/*],\n+                     [AS_IF([AS_EXECUTABLE_P([${CC}_r])],[PTHREAD_CC=\"${CC}_r\"])],\n+                     [AC_CHECK_PROGS([PTHREAD_CC],[${CC}_r],[$CC])])])\n+                ;;\n+            esac\n+        fi\n+fi\n+\n+test -n \"$PTHREAD_CC\" || PTHREAD_CC=\"$CC\"\n+\n+AC_SUBST(PTHREAD_LIBS)\n+AC_SUBST(PTHREAD_CFLAGS)\n+AC_SUBST(PTHREAD_CC)\n+\n+# Finally, execute ACTION-IF-FOUND/ACTION-IF-NOT-FOUND:\n+if test x\"$ax_pthread_ok\" = xyes; then\n+        ifelse([$1],,AC_DEFINE(HAVE_PTHREAD,1,[Define if you have POSIX threads libraries and header files.]),[$1])\n+        :\n+else\n+        ax_pthread_ok=no\n+        $2\n+fi\n+AC_LANG_POP\n+])dnl AX_PTHREAD"
      },
      {
        "sha": "38079cb6ec404a158881713e9942f23e6257f279",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/35b8af92265ed74de63c3818e5290c27b3f35df2/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/35b8af92265ed74de63c3818e5290c27b3f35df2/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=35b8af92265ed74de63c3818e5290c27b3f35df2",
        "patch": "@@ -5,6 +5,10 @@\n #ifndef BITCOIN_MAIN_H\n #define BITCOIN_MAIN_H\n \n+#if defined(HAVE_CONFIG_H)\n+#include \"bitcoin-config.h\"\n+#endif\n+\n #include \"core.h\"\n #include \"bignum.h\"\n #include \"sync.h\""
      },
      {
        "sha": "51830f2342c26880f5118bee8cf46bb6614a974a",
        "filename": "src/makefile.linux-mingw",
        "status": "removed",
        "additions": 0,
        "deletions": 135,
        "changes": 135,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2fee100f036626866e5dca3f27b7562da25e43f3/src/makefile.linux-mingw",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2fee100f036626866e5dca3f27b7562da25e43f3/src/makefile.linux-mingw",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.linux-mingw?ref=2fee100f036626866e5dca3f27b7562da25e43f3",
        "patch": "@@ -1,135 +0,0 @@\n-# Copyright (c) 2009-2010 Satoshi Nakamoto\n-# Distributed under the MIT/X11 software license, see the accompanying\n-# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-DEPSDIR:=/usr/i586-mingw32msvc\n-\n-CC := i586-mingw32msvc-gcc\n-CXX := i586-mingw32msvc-g++\n-\n-USE_UPNP:=0\n-USE_IPV6:=1\n-\n-INCLUDEPATHS= \\\n- -I\"$(CURDIR)\" \\\n- -I\"$(CURDIR)\"/obj \\\n- -I\"$(DEPSDIR)/boost_1_50_0\" \\\n- -I\"$(DEPSDIR)/db-4.8.30.NC/build_unix\" \\\n- -I\"$(DEPSDIR)/openssl-1.0.1c/include\" \\\n- -I\"$(DEPSDIR)\"\n-\n-LIBPATHS= \\\n- -L\"$(DEPSDIR)/boost_1_50_0/stage/lib\" \\\n- -L\"$(DEPSDIR)/db-4.8.30.NC/build_unix\" \\\n- -L\"$(DEPSDIR)/openssl-1.0.1c\"\n-\n-LIBS= \\\n-  $(CURDIR)/leveldb/libleveldb.a $(CURDIR)/leveldb/libmemenv.a \\\n- -l boost_system-mt-s \\\n- -l boost_filesystem-mt-s \\\n- -l boost_program_options-mt-s \\\n- -l boost_thread_win32-mt-s \\\n- -l boost_chrono-mt-s \\\n- -l db_cxx \\\n- -l ssl \\\n- -l crypto\n-\n-DEFS=-D_MT -DWIN32 -D_WINDOWS -DBOOST_THREAD_USE_LIB -DBOOST_SPIRIT_THREADSAFE\n-DEBUGFLAGS=-g\n-xCXXFLAGS=-O2 -w -Wall -Wextra -Wformat -Wformat-security -Wno-unused-parameter $(DEBUGFLAGS) $(DEFS) $(INCLUDEPATHS) $(CXXFLAGS)\n-# enable: ASLR, DEP and large address aware\n-xLDFLAGS=-Wl,--dynamicbase -Wl,--nxcompat -Wl,--large-address-aware $(LDFLAGS)\n-\n-TESTDEFS = -DTEST_DATA_DIR=$(abspath test/data)\n-\n-ifndef USE_UPNP\n-\toverride USE_UPNP = -\n-endif\n-ifneq (${USE_UPNP}, -)\n-\tLIBPATHS += -L\"$(DEPSDIR)/miniupnpc\"\n-\tLIBS += -l miniupnpc -l iphlpapi\n-\tDEFS += -DSTATICLIB -DUSE_UPNP=$(USE_UPNP)\n-endif\n-\n-ifneq (${USE_IPV6}, -)\n-\tDEFS += -DUSE_IPV6=$(USE_IPV6)\n-endif\n-\n-LIBS += -l mingwthrd -l kernel32 -l user32 -l gdi32 -l comdlg32 -l winspool -l winmm -l shell32 -l comctl32 -l ole32 -l oleaut32 -l uuid -l rpcrt4 -l advapi32 -l ws2_32 -l mswsock -l shlwapi\n-\n-# TODO: make the mingw builds smarter about dependencies, like the linux/osx builds are\n-HEADERS = $(wildcard *.h)\n-\n-OBJS= \\\n-    leveldb/libleveldb.a \\\n-    obj/alert.o \\\n-    obj/version.o \\\n-    obj/checkpoints.o \\\n-    obj/netbase.o \\\n-    obj/addrman.o \\\n-    obj/crypter.o \\\n-    obj/key.o \\\n-    obj/db.o \\\n-    obj/init.o \\\n-    obj/bitcoind.o \\\n-    obj/keystore.o \\\n-    obj/core.o \\\n-    obj/main.o \\\n-    obj/miner.o \\\n-    obj/net.o \\\n-    obj/protocol.o \\\n-    obj/bitcoinrpc.o \\\n-    obj/rpcdump.o \\\n-    obj/rpcnet.o \\\n-    obj/rpcmining.o \\\n-    obj/rpcwallet.o \\\n-    obj/rpcblockchain.o \\\n-    obj/rpcrawtransaction.o \\\n-    obj/script.o \\\n-    obj/sync.o \\\n-    obj/util.o \\\n-    obj/wallet.o \\\n-    obj/walletdb.o \\\n-    obj/noui.o \\\n-    obj/hash.o \\\n-    obj/bloom.o \\\n-    obj/leveldb.o \\\n-    obj/txdb.o \\\n-    obj/chainparams.o\n-\n-all: bitcoind.exe\n-\n-DEFS += -I\"$(CURDIR)/leveldb/include\"\n-DEFS += -I\"$(CURDIR)/leveldb/helpers\"\n-leveldb/libleveldb.a:\n-\t@echo \"Building LevelDB ...\" && cd leveldb && TARGET_OS=OS_WINDOWS_CROSSCOMPILE $(MAKE) CC=$(CC) CXX=$(CXX) OPT=\"$(xCXXFLAGS)\" libleveldb.a libmemenv.a && i586-mingw32msvc-ranlib libleveldb.a && i586-mingw32msvc-ranlib libmemenv.a && cd ..\n-\n-obj/build.h: FORCE\n-\t/bin/sh ../share/genbuild.sh obj/build.h\n-version.cpp: obj/build.h\n-DEFS += -DHAVE_BUILD_INFO\n-\n-obj/%.o: %.cpp $(HEADERS)\n-\t$(CXX) -c $(xCXXFLAGS) -o $@ $<\n-\n-bitcoind.exe: $(OBJS:obj/%=obj/%)\n-\t$(CXX) $(xCXXFLAGS) $(xLDFLAGS) -o $@ $(LIBPATHS) $^ $(LIBS)\n-\n-TESTOBJS := $(patsubst test/%.cpp,obj-test/%.o,$(wildcard test/*.cpp))\n-\n-obj-test/%.o: test/%.cpp $(HEADERS)\n-\t$(CXX) -c $(TESTDEFS) $(xCXXFLAGS) -o $@ $<\n-\n-test_bitcoin.exe: $(TESTOBJS) $(filter-out obj/init.o obj/bitcoind.o,$(OBJS:obj/%=obj/%))\n-\t$(CXX) $(xCXXFLAGS) $(xLDFLAGS) -o $@ $(LIBPATHS) $^ -lboost_unit_test_framework-mt-s $(LIBS)\n-\n-\n-clean:\n-\t-rm -f obj/*.o\n-\t-rm -f bitcoind.exe\n-\t-rm -f obj-test/*.o\n-\t-rm -f test_bitcoin.exe\n-\t-rm -f obj/build.h\n-\tcd leveldb && TARGET_OS=OS_WINDOWS_CROSSCOMPILE $(MAKE) clean && cd ..\n-\n-FORCE:"
      },
      {
        "sha": "cb989d8ae8f09f16e19c0304e5e5d974aa57e032",
        "filename": "src/makefile.mingw",
        "status": "removed",
        "additions": 0,
        "deletions": 143,
        "changes": 143,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2fee100f036626866e5dca3f27b7562da25e43f3/src/makefile.mingw",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2fee100f036626866e5dca3f27b7562da25e43f3/src/makefile.mingw",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.mingw?ref=2fee100f036626866e5dca3f27b7562da25e43f3",
        "patch": "@@ -1,143 +0,0 @@\n-# Copyright (c) 2009-2010 Satoshi Nakamoto\n-# Distributed under the MIT/X11 software license, see the accompanying\n-# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-# Makefile for the MinGW g++ compiler/toolchain\n-#\n-# Assumes Berkeley DB, Boost, and OpenSSL have all been compiled and installed\n-# into /usr/local (/usr/local/include, /usr/local/lib).\n-#\n-# If dependencies are somewhere else, run 'make DEPSDIR=/path/'\n-#\n-# Boost libraries are given wacky names that include the particular version of\n-# boost you're using; set BOOST_SUFFIX appropriately.\n-#\n-# 'make clean' assumes it is running inside a MSYS shell, and uses 'rm'\n-# to remove files.\n-\n-CXX ?= g++\n-\n-USE_UPNP:=-\n-USE_IPV6:=1\n-\n-DEPSDIR?=/usr/local\n-BOOST_SUFFIX?=-mgw46-mt-s-1_52\n-\n-INCLUDEPATHS= \\\n- -I\"$(CURDIR)\" \\\n- -I\"$(DEPSDIR)/include\"\n-\n-LIBPATHS= \\\n- -L\"$(CURDIR)/leveldb\" \\\n- -L\"$(DEPSDIR)/lib\"\n-\n-LIBS= \\\n- -l leveldb \\\n- -l memenv \\\n- -l boost_system$(BOOST_SUFFIX) \\\n- -l boost_filesystem$(BOOST_SUFFIX) \\\n- -l boost_program_options$(BOOST_SUFFIX) \\\n- -l boost_thread$(BOOST_SUFFIX) \\\n- -l boost_chrono$(BOOST_SUFFIX) \\\n- -l db_cxx \\\n- -l ssl \\\n- -l crypto\n-\n-DEFS=-D_MT -DWIN32 -D_WINDOWS -DBOOST_THREAD_USE_LIB -DBOOST_SPIRIT_THREADSAFE\n-DEBUGFLAGS=-g\n-CFLAGS=-mthreads -O2 -w -Wall -Wextra -Wformat -Wformat-security -Wno-unused-parameter $(DEBUGFLAGS) $(DEFS) $(INCLUDEPATHS)\n-# enable: ASLR, DEP and large address aware\n-LDFLAGS=-Wl,--dynamicbase -Wl,--nxcompat -Wl,--large-address-aware\n-\n-TESTDEFS = -DTEST_DATA_DIR=$(abspath test/data)\n-\n-ifndef USE_UPNP\n-\toverride USE_UPNP = -\n-endif\n-ifneq (${USE_UPNP}, -)\n- LIBS += -l miniupnpc -l iphlpapi\n- DEFS += -DSTATICLIB -DUSE_UPNP=$(USE_UPNP)\n-endif\n-\n-ifneq (${USE_IPV6}, -)\n-\tDEFS += -DUSE_IPV6=$(USE_IPV6)\n-endif\n-\n-LIBS += -l mingwthrd -l kernel32 -l user32 -l gdi32 -l comdlg32 -l winspool -l winmm -l shell32 -l comctl32 -l ole32 -l oleaut32 -l uuid -l rpcrt4 -l advapi32 -l ws2_32 -l mswsock -l shlwapi\n-\n-# TODO: make the mingw builds smarter about dependencies, like the linux/osx builds are\n-HEADERS = $(wildcard *.h)\n-\n-OBJS= \\\n-    leveldb/libleveldb.a \\\n-    obj/alert.o \\\n-    obj/version.o \\\n-    obj/checkpoints.o \\\n-    obj/netbase.o \\\n-    obj/addrman.o \\\n-    obj/crypter.o \\\n-    obj/key.o \\\n-    obj/db.o \\\n-    obj/init.o \\\n-    obj/bitcoind.o \\\n-    obj/keystore.o \\\n-    obj/core.o \\\n-    obj/main.o \\\n-    obj/miner.o \\\n-    obj/net.o \\\n-    obj/protocol.o \\\n-    obj/bitcoinrpc.o \\\n-    obj/rpcdump.o \\\n-    obj/rpcnet.o \\\n-    obj/rpcmining.o \\\n-    obj/rpcwallet.o \\\n-    obj/rpcblockchain.o \\\n-    obj/rpcrawtransaction.o \\\n-    obj/script.o \\\n-    obj/sync.o \\\n-    obj/util.o \\\n-    obj/wallet.o \\\n-    obj/walletdb.o \\\n-    obj/hash.o \\\n-    obj/bloom.o \\\n-    obj/noui.o \\\n-    obj/leveldb.o \\\n-    obj/txdb.o \\\n-    obj/chainparams.o\n-\n-\n-all: bitcoind.exe\n-\n-test check: test_bitcoin.exe FORCE\n-\ttest_bitcoin.exe\n-\n-#\n-# LevelDB support\n-#\n-DEFS += $(addprefix -I,$(CURDIR)/leveldb/include)\n-DEFS += $(addprefix -I,$(CURDIR)/leveldb/helpers)\n-\n-leveldb/libleveldb.a:\n-\tcd leveldb && $(MAKE) CC=$(CC) CXX=$(CXX) OPT=\"$(CFLAGS)\" TARGET_OS=NATIVE_WINDOWS libleveldb.a libmemenv.a && cd ..\n-\n-obj/%.o: %.cpp $(HEADERS)\n-\t$(CXX) -c $(CFLAGS) -o $@ $<\n-\n-bitcoind.exe: $(OBJS:obj/%=obj/%)\n-\t$(CXX) $(CFLAGS) $(LDFLAGS) -o $@ $(LIBPATHS) $^ $(LIBS)\n-\n-TESTOBJS := $(patsubst test/%.cpp,obj-test/%.o,$(wildcard test/*.cpp))\n-\n-obj-test/%.o: test/%.cpp $(HEADERS)\n-\t$(CXX) -c $(TESTDEFS) $(CFLAGS) -o $@ $<\n-\n-test_bitcoin.exe: $(TESTOBJS) $(filter-out obj/init.o obj/bitcoind.o,$(OBJS:obj/%=obj/%))\n-\t$(CXX) $(CFLAGS) $(LDFLAGS) -o $@ $(LIBPATHS) $^ -lboost_unit_test_framework$(BOOST_SUFFIX) $(LIBS)\n-\n-clean:\n-\trm -f bitcoind.exe test_bitcoin.exe\n-\trm -f obj/*\n-\trm -f obj-test/*\n-\tcd leveldb && $(MAKE) TARGET_OS=NATIVE_WINDOWS clean && cd ..\n-\n-FORCE:"
      },
      {
        "sha": "ee364f5c4a1d6697a0ec8290218301c9a090d064",
        "filename": "src/makefile.osx",
        "status": "removed",
        "additions": 0,
        "deletions": 181,
        "changes": 181,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2fee100f036626866e5dca3f27b7562da25e43f3/src/makefile.osx",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2fee100f036626866e5dca3f27b7562da25e43f3/src/makefile.osx",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.osx?ref=2fee100f036626866e5dca3f27b7562da25e43f3",
        "patch": "@@ -1,181 +0,0 @@\n-# -*- mode: Makefile; -*-\n-# Copyright (c) 2011 Bitcoin Developers\n-# Distributed under the MIT/X11 software license, see the accompanying\n-# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-# Mac OS X makefile for bitcoin\n-# Originally by Laszlo Hanyecz (solar@heliacal.net)\n-\n-CXX=llvm-g++\n-DEPSDIR=/opt/local\n-\n-INCLUDEPATHS= \\\n- -I\"$(CURDIR)\" \\\n- -I\"$(CURDIR)\"/obj \\\n- -I\"$(DEPSDIR)/include\" \\\n- -I\"$(DEPSDIR)/include/db48\"\n-\n-LIBPATHS= \\\n- -L\"$(DEPSDIR)/lib\" \\\n- -L\"$(DEPSDIR)/lib/db48\"\n-\n-USE_UPNP:=1\n-USE_IPV6:=1\n-\n-LIBS= -dead_strip\n-\n-TESTDEFS = -DTEST_DATA_DIR=$(abspath test/data)\n-\n-ifdef STATIC\n-# Build STATIC if you are redistributing the bitcoind binary\n-TESTLIBS += \\\n- $(DEPSDIR)/lib/libboost_unit_test_framework-mt.a\n-LIBS += \\\n- $(DEPSDIR)/lib/db48/libdb_cxx-4.8.a \\\n- $(DEPSDIR)/lib/libboost_system-mt.a \\\n- $(DEPSDIR)/lib/libboost_filesystem-mt.a \\\n- $(DEPSDIR)/lib/libboost_program_options-mt.a \\\n- $(DEPSDIR)/lib/libboost_thread-mt.a \\\n- $(DEPSDIR)/lib/libboost_chrono-mt.a \\\n- $(DEPSDIR)/lib/libssl.a \\\n- $(DEPSDIR)/lib/libcrypto.a \\\n- -lz\n-else\n-TESTLIBS += \\\n- -lboost_unit_test_framework-mt\n-LIBS += \\\n- -ldb_cxx-4.8 \\\n- -lboost_system-mt \\\n- -lboost_filesystem-mt \\\n- -lboost_program_options-mt \\\n- -lboost_thread-mt \\\n- -lboost_chrono-mt \\\n- -lssl \\\n- -lcrypto \\\n- -lz\n-TESTDEFS += -DBOOST_TEST_DYN_LINK\n-endif\n-\n-DEFS=-DMAC_OSX -DMSG_NOSIGNAL=0 -DBOOST_SPIRIT_THREADSAFE\n-\n-ifdef RELEASE\n-# Compile for maximum compatibility and smallest size.\n-# This requires that dependencies are compiled\n-# the same way.\n-CFLAGS = -mmacosx-version-min=10.5 -arch i386 -O3\n-else\n-DEBUGFLAGS = -g\n-endif\n-\n-# ppc doesn't work because we don't support big-endian\n-CFLAGS += -Wall -Wextra -Wformat -Wformat-security -Wno-unused-parameter \\\n-    $(DEBUGFLAGS) $(DEFS) $(INCLUDEPATHS)\n-\n-OBJS= \\\n-    leveldb/libleveldb.a \\\n-    obj/alert.o \\\n-    obj/version.o \\\n-    obj/checkpoints.o \\\n-    obj/netbase.o \\\n-    obj/addrman.o \\\n-    obj/crypter.o \\\n-    obj/key.o \\\n-    obj/db.o \\\n-    obj/init.o \\\n-    obj/bitcoind.o \\\n-    obj/keystore.o \\\n-    obj/core.o \\\n-    obj/main.o \\\n-    obj/miner.o \\\n-    obj/net.o \\\n-    obj/protocol.o \\\n-    obj/bitcoinrpc.o \\\n-    obj/rpcdump.o \\\n-    obj/rpcnet.o \\\n-    obj/rpcmining.o \\\n-    obj/rpcwallet.o \\\n-    obj/rpcblockchain.o \\\n-    obj/rpcrawtransaction.o \\\n-    obj/script.o \\\n-    obj/sync.o \\\n-    obj/util.o \\\n-    obj/wallet.o \\\n-    obj/walletdb.o \\\n-    obj/hash.o \\\n-    obj/bloom.o \\\n-    obj/noui.o \\\n-    obj/leveldb.o \\\n-    obj/txdb.o \\\n-    obj/chainparams.o\n-\n-ifndef USE_UPNP\n-\toverride USE_UPNP = -\n-endif\n-ifneq (${USE_UPNP}, -)\n-\tDEFS += -DUSE_UPNP=$(USE_UPNP)\n-ifdef STATIC\n-\tLIBS += $(DEPSDIR)/lib/libminiupnpc.a\n-else\n-\tLIBS += -lminiupnpc\n-endif\n-endif\n-\n-ifneq (${USE_IPV6}, -)\n-\tDEFS += -DUSE_IPV6=$(USE_IPV6)\n-endif\n-\n-all: bitcoind\n-\n-test check: test_bitcoin FORCE\n-\t./test_bitcoin\n-\n-#\n-# LevelDB support\n-#\n-LIBS += $(CURDIR)/leveldb/libleveldb.a $(CURDIR)/leveldb/libmemenv.a\n-DEFS += $(addprefix -I,$(CURDIR)/leveldb/include)\n-DEFS += $(addprefix -I,$(CURDIR)/leveldb/helpers)\n-leveldb/libleveldb.a:\n-\t@echo \"Building LevelDB ...\" && cd leveldb && $(MAKE) CC=$(CC) CXX=$(CXX) OPT=\"$(CFLAGS)\" libleveldb.a libmemenv.a && cd ..\n-\n-# auto-generated dependencies:\n--include obj/*.P\n--include obj-test/*.P\n-\n-obj/build.h: FORCE\n-\t/bin/sh ../share/genbuild.sh obj/build.h\n-version.cpp: obj/build.h\n-DEFS += -DHAVE_BUILD_INFO\n-\n-obj/%.o: %.cpp\n-\t$(CXX) -c $(CFLAGS) -MMD -MF $(@:%.o=%.d) -o $@ $<\n-\t@cp $(@:%.o=%.d) $(@:%.o=%.P); \\\n-\t  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\\\$$//' \\\n-\t      -e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \\\n-\t  rm -f $(@:%.o=%.d)\n-\n-bitcoind: $(OBJS:obj/%=obj/%)\n-\t$(CXX) $(CFLAGS) -o $@ $(LIBPATHS) $^ $(LIBS)\n-\n-TESTOBJS := $(patsubst test/%.cpp,obj-test/%.o,$(wildcard test/*.cpp))\n-\n-obj-test/%.o: test/%.cpp\n-\t$(CXX) -c $(TESTDEFS) $(CFLAGS) -MMD -MF $(@:%.o=%.d) -o $@ $<\n-\t@cp $(@:%.o=%.d) $(@:%.o=%.P); \\\n-\t  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\\\$$//' \\\n-\t      -e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \\\n-\t  rm -f $(@:%.o=%.d)\n-\n-test_bitcoin: $(TESTOBJS) $(filter-out obj/init.o obj/bitcoind.o,$(OBJS:obj/%=obj/%))\n-\t$(CXX) $(CFLAGS) -o $@ $(LIBPATHS) $^ $(LIBS) $(TESTLIBS)\n-\n-clean:\n-\t-rm -f bitcoind test_bitcoin\n-\t-rm -f obj/*.o\n-\t-rm -f obj-test/*.o\n-\t-rm -f obj/*.P\n-\t-rm -f obj-test/*.P\n-\t-rm -f obj/build.h\n-\t-cd leveldb && $(MAKE) clean || true\n-\n-FORCE:"
      },
      {
        "sha": "55fd594f937ccbda97797064332edbcc294029b8",
        "filename": "src/makefile.unix",
        "status": "removed",
        "additions": 0,
        "deletions": 206,
        "changes": 206,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2fee100f036626866e5dca3f27b7562da25e43f3/src/makefile.unix",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2fee100f036626866e5dca3f27b7562da25e43f3/src/makefile.unix",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.unix?ref=2fee100f036626866e5dca3f27b7562da25e43f3",
        "patch": "@@ -1,206 +0,0 @@\n-# Copyright (c) 2009-2010 Satoshi Nakamoto\n-# Distributed under the MIT/X11 software license, see the accompanying\n-# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-# :=0 --> UPnP support turned off by default at runtime\n-# :=1 --> UPnP support turned on by default at runtime\n-# :=- --> No UPnP support - miniupnp not required\n-USE_UPNP:=0\n-\n-# :=1 --> Enable IPv6 support\n-# :=0 --> Disable IPv6 support\n-USE_IPV6:=1\n-\n-LINK:=$(CXX)\n-\n-DEFS=-DBOOST_SPIRIT_THREADSAFE -DBOOST_NO_CXX11_VARIADIC_TEMPLATES -D_FILE_OFFSET_BITS=64\n-\n-DEFS += $(addprefix -I,$(CURDIR) $(CURDIR)/obj $(BOOST_INCLUDE_PATH) $(BDB_INCLUDE_PATH) $(OPENSSL_INCLUDE_PATH))\n-LIBS = $(addprefix -L,$(BOOST_LIB_PATH) $(BDB_LIB_PATH) $(OPENSSL_LIB_PATH))\n-\n-TESTDEFS = -DTEST_DATA_DIR=$(abspath test/data)\n-\n-LMODE = dynamic\n-LMODE2 = dynamic\n-ifdef STATIC\n-\tLMODE = static\n-\tifeq (${STATIC}, all)\n-\t\tLMODE2 = static\n-\tendif\n-else\n-\tTESTDEFS += -DBOOST_TEST_DYN_LINK\n-endif\n-\n-# for boost 1.37, add -mt to the boost libraries\n-LIBS += \\\n- -Wl,-B$(LMODE) \\\n-   -l boost_system$(BOOST_LIB_SUFFIX) \\\n-   -l boost_filesystem$(BOOST_LIB_SUFFIX) \\\n-   -l boost_program_options$(BOOST_LIB_SUFFIX) \\\n-   -l boost_thread$(BOOST_LIB_SUFFIX) \\\n-   -l db_cxx$(BDB_LIB_SUFFIX) \\\n-   -l ssl \\\n-   -l crypto\n-\n-TESTLIBS += \\\n- -Wl,-B$(LMODE) \\\n-   -l boost_unit_test_framework$(BOOST_LIB_SUFFIX)\n-\n-ifndef USE_UPNP\n-\toverride USE_UPNP = -\n-endif\n-ifneq (${USE_UPNP}, -)\n-\tLIBS += -l miniupnpc\n-\tDEFS += -DUSE_UPNP=$(USE_UPNP)\n-endif\n-\n-ifneq (${USE_IPV6}, -)\n-\tDEFS += -DUSE_IPV6=$(USE_IPV6)\n-endif\n-\n-LIBS+= \\\n- -Wl,-B$(LMODE2) \\\n-   -l z \\\n-   -l dl \\\n-   -l pthread\n-\n-\n-# Hardening\n-# Make some classes of vulnerabilities unexploitable in case one is discovered.\n-#\n-    # This is a workaround for Ubuntu bug #691722, the default -fstack-protector causes\n-    # -fstack-protector-all to be ignored unless -fno-stack-protector is used first.\n-    # see: https://bugs.launchpad.net/ubuntu/+source/gcc-4.5/+bug/691722\n-    HARDENING=-fno-stack-protector\n-\n-    # Stack Canaries\n-    # Put numbers at the beginning of each stack frame and check that they are the same.\n-    # If a stack buffer if overflowed, it writes over the canary number and then on return\n-    # when that number is checked, it won't be the same and the program will exit with\n-    # a \"Stack smashing detected\" error instead of being exploited.\n-    HARDENING+=-fstack-protector-all -Wstack-protector\n-\n-    # Make some important things such as the global offset table read only as soon as\n-    # the dynamic linker is finished building it. This will prevent overwriting of addresses\n-    # which would later be jumped to.\n-    LDHARDENING+=-Wl,-z,relro -Wl,-z,now\n-\n-    # Build position independent code to take advantage of Address Space Layout Randomization\n-    # offered by some kernels.\n-    # see doc/build-unix.txt for more information.\n-    ifdef PIE\n-        HARDENING+=-fPIE\n-        LDHARDENING+=-pie\n-    endif\n-\n-    # -D_FORTIFY_SOURCE=2 does some checking for potentially exploitable code patterns in\n-    # the source such overflowing a statically defined buffer.\n-    HARDENING+=-D_FORTIFY_SOURCE=2\n-#\n-\n-\n-DEBUGFLAGS=-g\n-\n-# CXXFLAGS can be specified on the make command line, so we use xCXXFLAGS that only\n-# adds some defaults in front. Unfortunately, CXXFLAGS=... $(CXXFLAGS) does not work.\n-xCXXFLAGS=-O2 -pthread -Wall -Wextra -Wformat -Wformat-security -Wno-unused-parameter \\\n-    $(DEBUGFLAGS) $(DEFS) $(HARDENING) $(CXXFLAGS)\n-\n-# LDFLAGS can be specified on the make command line, so we use xLDFLAGS that only\n-# adds some defaults in front. Unfortunately, LDFLAGS=... $(LDFLAGS) does not work.\n-xLDFLAGS=$(LDHARDENING) $(LDFLAGS)\n-\n-OBJS= \\\n-    leveldb/libleveldb.a \\\n-    obj/alert.o \\\n-    obj/version.o \\\n-    obj/checkpoints.o \\\n-    obj/netbase.o \\\n-    obj/addrman.o \\\n-    obj/crypter.o \\\n-    obj/key.o \\\n-    obj/db.o \\\n-    obj/init.o \\\n-    obj/bitcoind.o \\\n-    obj/keystore.o \\\n-    obj/core.o \\\n-    obj/main.o \\\n-    obj/miner.o \\\n-    obj/net.o \\\n-    obj/protocol.o \\\n-    obj/bitcoinrpc.o \\\n-    obj/rpcdump.o \\\n-    obj/rpcnet.o \\\n-    obj/rpcmining.o \\\n-    obj/rpcwallet.o \\\n-    obj/rpcblockchain.o \\\n-    obj/rpcrawtransaction.o \\\n-    obj/script.o \\\n-    obj/sync.o \\\n-    obj/util.o \\\n-    obj/wallet.o \\\n-    obj/walletdb.o \\\n-    obj/hash.o \\\n-    obj/bloom.o \\\n-    obj/noui.o \\\n-    obj/leveldb.o \\\n-    obj/txdb.o \\\n-    obj/chainparams.o\n-\n-\n-all: bitcoind\n-\n-test check: test_bitcoin FORCE\n-\t./test_bitcoin\n-\n-#\n-# LevelDB support\n-#\n-MAKEOVERRIDES =\n-LIBS += $(CURDIR)/leveldb/libleveldb.a $(CURDIR)/leveldb/libmemenv.a\n-DEFS += $(addprefix -I,$(CURDIR)/leveldb/include)\n-DEFS += $(addprefix -I,$(CURDIR)/leveldb/helpers)\n-leveldb/libleveldb.a:\n-\t@echo \"Building LevelDB ...\" && cd leveldb && $(MAKE) CC=$(CC) CXX=$(CXX) OPT=\"$(xCXXFLAGS)\" libleveldb.a libmemenv.a && cd ..\n-\n-# auto-generated dependencies:\n--include obj/*.P\n--include obj-test/*.P\n-\n-obj/build.h: FORCE\n-\t/bin/sh ../share/genbuild.sh obj/build.h\n-version.cpp: obj/build.h\n-DEFS += -DHAVE_BUILD_INFO\n-\n-obj/%.o: %.cpp\n-\t$(CXX) -c $(xCXXFLAGS) -MMD -MF $(@:%.o=%.d) -o $@ $<\n-\t@cp $(@:%.o=%.d) $(@:%.o=%.P); \\\n-\t  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\\\$$//' \\\n-\t      -e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \\\n-\t  rm -f $(@:%.o=%.d)\n-\n-bitcoind: $(OBJS:obj/%=obj/%)\n-\t$(LINK) $(xCXXFLAGS) -o $@ $^ $(xLDFLAGS) $(LIBS)\n-\n-TESTOBJS := $(patsubst test/%.cpp,obj-test/%.o,$(wildcard test/*.cpp))\n-\n-obj-test/%.o: test/%.cpp\n-\t$(CXX) -c $(TESTDEFS) $(xCXXFLAGS) -MMD -MF $(@:%.o=%.d) -o $@ $<\n-\t@cp $(@:%.o=%.d) $(@:%.o=%.P); \\\n-\t  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\\\$$//' \\\n-\t      -e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \\\n-\t  rm -f $(@:%.o=%.d)\n-\n-test_bitcoin: $(TESTOBJS) $(filter-out obj/init.o obj/bitcoind.o,$(OBJS:obj/%=obj/%))\n-\t$(LINK) $(xCXXFLAGS) -o $@ $(LIBPATHS) $^ $(TESTLIBS) $(xLDFLAGS) $(LIBS)\n-\n-clean:\n-\t-rm -f bitcoind test_bitcoin\n-\t-rm -f obj/*.o\n-\t-rm -f obj-test/*.o\n-\t-rm -f obj/*.P\n-\t-rm -f obj-test/*.P\n-\t-rm -f obj/build.h\n-\t-cd leveldb && $(MAKE) clean || true\n-\n-FORCE:"
      },
      {
        "sha": "02b99fd049848d90495d35cb0c5b7f61c9cf2774",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/35b8af92265ed74de63c3818e5290c27b3f35df2/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/35b8af92265ed74de63c3818e5290c27b3f35df2/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=35b8af92265ed74de63c3818e5290c27b3f35df2",
        "patch": "@@ -3,6 +3,10 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#if defined(HAVE_CONFIG_H)\n+#include \"bitcoin-config.h\"\n+#endif\n+\n #include \"chainparams.h\"\n #include \"db.h\"\n #include \"net.h\"\n@@ -28,6 +32,9 @@\n \n // Dump addresses to peers.dat every 15 minutes (900s)\n #define DUMP_ADDRESSES_INTERVAL 900\n+#if !defined(HAVE_MSG_NOSIGNAL)\n+#define MSG_NOSIGNAL 0\n+#endif\n \n using namespace std;\n using namespace boost;"
      },
      {
        "sha": "d02490ad4a19dfdc9416aa902c2195344d463f32",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/35b8af92265ed74de63c3818e5290c27b3f35df2/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/35b8af92265ed74de63c3818e5290c27b3f35df2/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=35b8af92265ed74de63c3818e5290c27b3f35df2",
        "patch": "@@ -15,6 +15,10 @@\n #include <boost/algorithm/string/case_conv.hpp> // for to_lower()\n #include <boost/algorithm/string/predicate.hpp> // for startswith() and endswith()\n \n+#if !defined(HAVE_MSG_NOSIGNAL)\n+#define MSG_NOSIGNAL 0\n+#endif\n+\n using namespace std;\n \n // Settings"
      },
      {
        "sha": "8d5135e970c2585be9ce813157547252e76df910",
        "filename": "src/netbase.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/35b8af92265ed74de63c3818e5290c27b3f35df2/src/netbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/35b8af92265ed74de63c3818e5290c27b3f35df2/src/netbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.h?ref=35b8af92265ed74de63c3818e5290c27b3f35df2",
        "patch": "@@ -4,6 +4,10 @@\n #ifndef BITCOIN_NETBASE_H\n #define BITCOIN_NETBASE_H\n \n+#if defined(HAVE_CONFIG_H)\n+#include \"bitcoin-config.h\"\n+#endif\n+\n #include <string>\n #include <vector>\n "
      },
      {
        "sha": "c6c4cb37a3f96c8efac58fc50f116eb0076a134a",
        "filename": "src/qt/Makefile.am",
        "status": "added",
        "additions": 160,
        "deletions": 0,
        "changes": 160,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/35b8af92265ed74de63c3818e5290c27b3f35df2/src/qt/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/35b8af92265ed74de63c3818e5290c27b3f35df2/src/qt/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/Makefile.am?ref=35b8af92265ed74de63c3818e5290c27b3f35df2",
        "patch": "@@ -0,0 +1,160 @@\n+include $(top_srcdir)/src/Makefile.include\n+\n+AM_CPPFLAGS =  $(INCLUDES) -I$(top_builddir)/src/obj \\\n+  -I$(top_srcdir)/src/leveldb/include -I$(top_srcdir)/src \\\n+  -I$(top_srcdir)/src/leveldb/helpers -I$(top_builddir)/src/qt \\\n+  -I$(top_builddir)/src/qt/forms $(BOOST_INCLUDES) $(PROTOBUF_CFLAGS) \\\n+  $(QR_CFLAGS)\n+AM_LDFLAGS = $(PTHREAD_CFLAGS)\n+bin_PROGRAMS = bitcoin-qt\n+noinst_LIBRARIES = libbitcoinqt.a\n+SUBDIRS = $(BUILD_TEST_QT)\n+DIST_SUBDIRS = test\n+\n+# bitcoin qt core #\n+QT_TS = locale/bitcoin_ach.ts locale/bitcoin_af_ZA.ts locale/bitcoin_ar.ts \\\n+  locale/bitcoin_be_BY.ts locale/bitcoin_bg.ts locale/bitcoin_bs.ts \\\n+  locale/bitcoin_ca_ES.ts locale/bitcoin_ca.ts locale/bitcoin_cs.ts \\\n+  locale/bitcoin_cy.ts locale/bitcoin_da.ts locale/bitcoin_de.ts \\\n+  locale/bitcoin_el_GR.ts locale/bitcoin_en.ts locale/bitcoin_eo.ts \\\n+  locale/bitcoin_es_CL.ts locale/bitcoin_es.ts locale/bitcoin_et.ts \\\n+  locale/bitcoin_eu_ES.ts locale/bitcoin_fa_IR.ts locale/bitcoin_fa.ts \\\n+  locale/bitcoin_fi.ts locale/bitcoin_fr_CA.ts locale/bitcoin_fr.ts \\\n+  locale/bitcoin_gu_IN.ts locale/bitcoin_he.ts locale/bitcoin_hi_IN.ts \\\n+  locale/bitcoin_hr.ts locale/bitcoin_hu.ts locale/bitcoin_id_ID.ts \\\n+  locale/bitcoin_it.ts locale/bitcoin_ja.ts locale/bitcoin_kk_KZ.ts \\\n+  locale/bitcoin_ko_KR.ts locale/bitcoin_la.ts locale/bitcoin_lt.ts \\\n+  locale/bitcoin_lv_LV.ts locale/bitcoin_ms_MY.ts locale/bitcoin_nb.ts \\\n+  locale/bitcoin_nl.ts locale/bitcoin_pl.ts locale/bitcoin_pt_BR.ts \\\n+  locale/bitcoin_pt_PT.ts locale/bitcoin_ro_RO.ts locale/bitcoin_ru.ts \\\n+  locale/bitcoin_sk.ts locale/bitcoin_sq.ts locale/bitcoin_sr.ts \\\n+  locale/bitcoin_sv.ts locale/bitcoin_th_TH.ts locale/bitcoin_tr.ts \\\n+  locale/bitcoin_uk.ts locale/bitcoin_vi.ts locale/bitcoin_vi_VN.ts \\\n+  locale/bitcoin_zh_CN.ts locale/bitcoin_zh_TW.ts\n+\n+QT_FORMS_UI = forms/aboutdialog.ui forms/addressbookpage.ui \\\n+  forms/askpassphrasedialog.ui forms/editaddressdialog.ui forms/intro.ui \\\n+  forms/optionsdialog.ui forms/overviewpage.ui forms/qrcodedialog.ui \\\n+  forms/rpcconsole.ui forms/sendcoinsdialog.ui forms/sendcoinsentry.ui \\\n+  forms/signverifymessagedialog.ui forms/transactiondescdialog.ui\n+\n+QT_MOC_CPP = moc_aboutdialog.cpp moc_addressbookpage.cpp \\\n+  moc_addresstablemodel.cpp moc_askpassphrasedialog.cpp \\\n+  moc_bitcoinaddressvalidator.cpp moc_bitcoinamountfield.cpp \\\n+  moc_bitcoingui.cpp moc_bitcoinunits.cpp moc_clientmodel.cpp \\\n+  moc_csvmodelwriter.cpp moc_editaddressdialog.cpp moc_guiutil.cpp \\\n+  moc_intro.cpp moc_macdockiconhandler.cpp moc_macnotificationhandler.cpp \\\n+  moc_monitoreddatamapper.cpp moc_notificator.cpp moc_optionsdialog.cpp \\\n+  moc_optionsmodel.cpp moc_overviewpage.cpp moc_paymentserver.cpp \\\n+  moc_qrcodedialog.cpp moc_qvalidatedlineedit.cpp moc_qvaluecombobox.cpp \\\n+  moc_rpcconsole.cpp moc_sendcoinsdialog.cpp moc_sendcoinsentry.cpp \\\n+  moc_signverifymessagedialog.cpp moc_splashscreen.cpp moc_transactiondesc.cpp \\\n+  moc_transactiondescdialog.cpp moc_transactionfilterproxy.cpp \\\n+  moc_transactiontablemodel.cpp moc_transactionview.cpp moc_walletframe.cpp \\\n+  moc_walletmodel.cpp moc_walletstack.cpp moc_walletview.cpp\n+\n+QT_MOC = intro.moc overviewpage.moc rpcconsole.moc\n+\n+QT_QRC_CPP = qrc_bitcoin.cpp\n+QT_QRC = bitcoin.qrc\n+\n+PROTOBUF_CC = paymentrequest.pb.cc\n+PROTOBUF_H = paymentrequest.pb.h\n+PROTOBUF_PROTO = paymentrequest.proto\n+\n+BITCOIN_QT_H  = aboutdialog.h addressbookpage.h addresstablemodel.h \\\n+  askpassphrasedialog.h bitcoinaddressvalidator.h bitcoinamountfield.h \\\n+  bitcoingui.h bitcoinunits.h clientmodel.h csvmodelwriter.h \\\n+  editaddressdialog.h guiconstants.h guiutil.h intro.h macdockiconhandler.h \\\n+  macnotificationhandler.h monitoreddatamapper.h notificator.h optionsdialog.h \\\n+  optionsmodel.h overviewpage.h paymentrequestplus.h paymentserver.h \\\n+  qrcodedialog.h qvalidatedlineedit.h qvaluecombobox.h rpcconsole.h \\\n+  sendcoinsdialog.h sendcoinsentry.h signverifymessagedialog.h splashscreen.h \\\n+  transactiondescdialog.h transactiondesc.h transactionfilterproxy.h \\\n+  transactionrecord.h transactiontablemodel.h transactionview.h walletframe.h \\\n+  walletmodel.h walletmodeltransaction.h walletstack.h walletview.h\n+\n+RES_ICONS = res/icons/bitcoin.png res/icons/address-book.png \\\n+  res/icons/quit.png res/icons/send.png res/icons/toolbar.png \\\n+  res/icons/connect0_16.png res/icons/connect1_16.png \\\n+  res/icons/connect2_16.png res/icons/connect3_16.png \\\n+  res/icons/connect4_16.png res/icons/transaction0.png \\\n+  res/icons/transaction2.png res/icons/clock1.png res/icons/clock2.png \\\n+  res/icons/clock3.png res/icons/clock4.png res/icons/clock5.png \\\n+  res/icons/configure.png res/icons/receive.png res/icons/editpaste.png \\\n+  res/icons/editcopy.png res/icons/add.png res/icons/bitcoin_testnet.png \\\n+  res/icons/toolbar_testnet.png res/icons/edit.png res/icons/history.png \\\n+  res/icons/overview.png res/icons/export.png res/icons/synced.png \\\n+  res/icons/remove.png res/icons/tx_mined.png res/icons/tx_input.png \\\n+  res/icons/tx_output.png res/icons/tx_inout.png res/icons/lock_closed.png \\\n+  res/icons/lock_open.png res/icons/key.png res/icons/filesave.png \\\n+  res/icons/qrcode.png res/icons/debugwindow.png res/icons/bitcoin.ico \\\n+  res/icons/bitcoin_testnet.ico\n+\n+RES_IMAGES = res/images/about.png res/images/splash.png \\\n+  res/images/splash_testnet.png\n+\n+RES_MOVIES = res/movies/update_spinner.mng\n+\n+BITCOIN_RC = res/bitcoin-qt-res.rc\n+\n+libbitcoinqt_a_CPPFLAGS = $(AM_CPPFLAGS) $(QT_INCLUDES) \\\n+  -I$(top_srcdir)/src/qt/forms $(QT_DBUS_INCLUDES)\n+libbitcoinqt_a_SOURCES = aboutdialog.cpp addressbookpage.cpp \\\n+  addresstablemodel.cpp askpassphrasedialog.cpp bitcoinaddressvalidator.cpp \\\n+  bitcoinamountfield.cpp bitcoin.cpp bitcoingui.cpp bitcoinstrings.cpp \\\n+  bitcoinunits.cpp clientmodel.cpp csvmodelwriter.cpp editaddressdialog.cpp \\\n+  guiutil.cpp intro.cpp monitoreddatamapper.cpp notificator.cpp \\\n+  optionsdialog.cpp optionsmodel.cpp overviewpage.cpp paymentrequestplus.cpp \\\n+  paymentserver.cpp qvalidatedlineedit.cpp qvaluecombobox.cpp \\\n+  rpcconsole.cpp sendcoinsdialog.cpp sendcoinsentry.cpp \\\n+  signverifymessagedialog.cpp splashscreen.cpp transactiondesc.cpp \\\n+  transactiondescdialog.cpp transactionfilterproxy.cpp transactionrecord.cpp \\\n+  transactiontablemodel.cpp transactionview.cpp walletframe.cpp \\\n+  walletmodel.cpp walletmodeltransaction.cpp walletstack.cpp walletview.cpp \\\n+  $(BITCOIN_QT_H) $(QT_FORMS_UI) $(QT_QRC) $(QT_TS) $(PROTOBUF_PROTO) \\\n+  $(RES_ICONS) $(RES_IMAGES) $(RES_MOVIES)\n+\n+nodist_libbitcoinqt_a_SOURCES = $(QT_MOC_CPP) $(QT_MOC) $(PROTOBUF_CC) \\\n+  $(PROTOBUF_H) $(QT_QRC_CPP)\n+\n+BUILT_SOURCES = $(nodist_libbitcoinqt_a_SOURCES)\n+\n+#Generating these with a half-written protobuf header leads to wacky results.\n+#This makes sure it's done.\n+$(QT_MOC): $(PROTOBUF_H)\n+$(QT_MOC_CPP): $(PROTOBUF_H)\n+\n+if TARGET_DARWIN\n+  libbitcoinqt_a_SOURCES += macdockiconhandler.mm macnotificationhandler.mm\n+endif\n+if TARGET_WINDOWS\n+  libbitcoinqt_a_SOURCES += $(BITCOIN_RC)\n+endif\n+if USE_QRCODE\n+  libbitcoinqt_a_SOURCES += qrcodedialog.cpp\n+endif\n+#\n+\n+# bitcoin-qt binary #\n+bitcoin_qt_CPPFLAGS = $(AM_CPPFLAGS) $(QT_INCLUDES) \\\n+  -I$(top_srcdir)/src/qt/forms\n+bitcoin_qt_SOURCES = bitcoin.cpp\n+bitcoin_qt_LDADD = libbitcoinqt.a $(LIBBITCOIN) $(LIBLEVELDB) $(LIBMEMENV) \\\n+  $(BOOST_LIBS) $(QT_LIBS) $(QT_DBUS_LIBS) $(QR_LIBS) $(PROTOBUF_LIBS)\n+\n+# forms/foo.h -> forms/ui_foo.h\n+QT_FORMS_H=$(join $(dir $(QT_FORMS_UI)),$(addprefix ui_, $(notdir $(QT_FORMS_UI:.ui=.h))))\n+\n+#locale/foo.ts -> locale/foo.qm\n+QT_QM=$(QT_TS:.ts=.qm)\n+\n+.SECONDARY: $(QT_QM)\n+\n+$(QT_QRC_CPP): $(QT_QRC) $(QT_QM) $(QT_FORMS_H) $(RES_ICONS) $(RES_IMAGES) $(RES_MOVIES) $(PROTOBUF_H)\n+\t@cd $(abs_srcdir); test -f $(RCC) && $(RCC) -name bitcoin -o $(abs_builddir)/$@ $< || \\\n+\t  echo error: could not build $@\n+\t$(SED) -i.bak -e '/^\\*\\*.*Created:/d' $@ && rm $@.bak\n+\t$(SED) -i.bak -e '/^\\*\\*.*by:/d' $@ && rm $@.bak\n+\n+CLEANFILES = $(BUILT_SOURCES) $(QT_QM) $(QT_FORMS_H) *.gcda *.gcno"
      },
      {
        "sha": "5b8d44481e6461e39d1e95edb1d91aa0dad40238",
        "filename": "src/qt/addressbookpage.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/35b8af92265ed74de63c3818e5290c27b3f35df2/src/qt/addressbookpage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/35b8af92265ed74de63c3818e5290c27b3f35df2/src/qt/addressbookpage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addressbookpage.cpp?ref=35b8af92265ed74de63c3818e5290c27b3f35df2",
        "patch": "@@ -1,3 +1,7 @@\n+#if defined(HAVE_CONFIG_H)\n+#include \"bitcoin-config.h\"\n+#endif\n+\n #include \"addressbookpage.h\"\n #include \"ui_addressbookpage.h\"\n "
      },
      {
        "sha": "6c9a46bcf708351db316662060f35e579261343e",
        "filename": "src/qt/notificator.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/35b8af92265ed74de63c3818e5290c27b3f35df2/src/qt/notificator.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/35b8af92265ed74de63c3818e5290c27b3f35df2/src/qt/notificator.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/notificator.h?ref=35b8af92265ed74de63c3818e5290c27b3f35df2",
        "patch": "@@ -1,6 +1,10 @@\n #ifndef NOTIFICATOR_H\n #define NOTIFICATOR_H\n \n+#if defined(HAVE_CONFIG_H)\n+#include \"bitcoin-config.h\"\n+#endif\n+\n #include <QObject>\n #include <QIcon>\n "
      },
      {
        "sha": "7ccda6cdd43380f517e9a22d71da6610065f30fa",
        "filename": "src/qt/optionsdialog.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/35b8af92265ed74de63c3818e5290c27b3f35df2/src/qt/optionsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/35b8af92265ed74de63c3818e5290c27b3f35df2/src/qt/optionsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsdialog.cpp?ref=35b8af92265ed74de63c3818e5290c27b3f35df2",
        "patch": "@@ -1,3 +1,7 @@\n+#if defined(HAVE_CONFIG_H)\n+#include \"bitcoin-config.h\"\n+#endif\n+\n #include \"optionsdialog.h\"\n #include \"ui_optionsdialog.h\"\n "
      },
      {
        "sha": "95efc583208e1f224ce08f3682a7b2e8cacffb25",
        "filename": "src/qt/optionsmodel.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/35b8af92265ed74de63c3818e5290c27b3f35df2/src/qt/optionsmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/35b8af92265ed74de63c3818e5290c27b3f35df2/src/qt/optionsmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.cpp?ref=35b8af92265ed74de63c3818e5290c27b3f35df2",
        "patch": "@@ -1,3 +1,7 @@\n+#if defined(HAVE_CONFIG_H)\n+#include \"bitcoin-config.h\"\n+#endif\n+\n #include \"optionsmodel.h\"\n \n #include \"bitcoinunits.h\""
      },
      {
        "sha": "3e3672a835f115e75f694926753aca337f920937",
        "filename": "src/qt/res/bitcoin-qt-res.rc",
        "status": "renamed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/35b8af92265ed74de63c3818e5290c27b3f35df2/src/qt/res/bitcoin-qt-res.rc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/35b8af92265ed74de63c3818e5290c27b3f35df2/src/qt/res/bitcoin-qt-res.rc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/bitcoin-qt-res.rc?ref=35b8af92265ed74de63c3818e5290c27b3f35df2",
        "previous_filename": "src/qt/res/bitcoin-qt.rc"
      },
      {
        "sha": "f51ac9bd6d171a21d852570d22c1a1bf7856cd60",
        "filename": "src/qt/test/Makefile.am",
        "status": "added",
        "additions": 26,
        "deletions": 0,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/35b8af92265ed74de63c3818e5290c27b3f35df2/src/qt/test/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/35b8af92265ed74de63c3818e5290c27b3f35df2/src/qt/test/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/Makefile.am?ref=35b8af92265ed74de63c3818e5290c27b3f35df2",
        "patch": "@@ -0,0 +1,26 @@\n+include $(top_srcdir)/src/Makefile.include\n+\n+AM_CPPFLAGS =  $(INCLUDES) -I$(top_builddir)/src/obj \\\n+  -I$(top_srcdir)/src/leveldb/include -I$(top_srcdir)/src \\\n+  -I$(top_srcdir)/src/leveldb/helpers -I$(top_srcdir)/src/qt \\\n+  -I$(top_builddir)/src/qt $(BOOST_INCLUDES) $(PROTOBUF_CFLAGS) \\\n+    $(QR_CFLAGS)\n+AM_LDFLAGS = $(PTHREAD_CFLAGS)\n+bin_PROGRAMS = test_bitcoin-qt\n+TESTS = test_bitcoin-qt\n+\n+TEST_QT_MOC_CPP = moc_uritests.cpp moc_paymentservertests.cpp\n+\n+TEST_QT_H = uritests.h paymentservertests.h paymentrequestdata.h\n+\n+BUILT_SOURCES = $(TEST_QT_MOC_CPP)\n+\n+test_bitcoin_qt_CPPFLAGS = $(AM_CPPFLAGS) $(QT_INCLUDES) $(QT_TEST_INCLUDES)\n+test_bitcoin_qt_SOURCES = test_main.cpp uritests.cpp paymentservertests.cpp $(TEST_QT_H)\n+nodist_test_bitcoin_qt_SOURCES = $(TEST_QT_MOC_CPP)\n+test_bitcoin_qt_LDADD = $(LIBBITCOINQT) $(LIBBITCOIN) $(LIBLEVELDB) \\\n+  $(LIBMEMENV) $(BOOST_LIBS) $(QT_LIBS) $(QT_DBUS_LIBS) $(QT_TEST_LIBS) \\\n+  $(QR_LIBS) $(PROTOBUF_LIBS)\n+\n+CLEANFILES = $(BUILT_SOURCES) *.gcda *.gcno\n+"
      },
      {
        "sha": "34079e94ff6d4e7c927deb1b3c662909ea804fff",
        "filename": "src/qt/test/paymentservertests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/35b8af92265ed74de63c3818e5290c27b3f35df2/src/qt/test/paymentservertests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/35b8af92265ed74de63c3818e5290c27b3f35df2/src/qt/test/paymentservertests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/paymentservertests.cpp?ref=35b8af92265ed74de63c3818e5290c27b3f35df2",
        "patch": "@@ -2,6 +2,7 @@\n #include <QDebug>\n #include <QTemporaryFile>\n #include <QVariant>\n+#include <QFileOpenEvent>\n \n #include <openssl/x509.h>\n #include <openssl/x509_vfy.h>"
      },
      {
        "sha": "80571aa2954c516c8dc62dbe4ce959fc43e3ae60",
        "filename": "src/test/Makefile.am",
        "status": "added",
        "additions": 38,
        "deletions": 0,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/35b8af92265ed74de63c3818e5290c27b3f35df2/src/test/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/35b8af92265ed74de63c3818e5290c27b3f35df2/src/test/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/Makefile.am?ref=35b8af92265ed74de63c3818e5290c27b3f35df2",
        "patch": "@@ -0,0 +1,38 @@\n+include $(top_srcdir)/src/Makefile.include\n+\n+AM_CPPFLAGS =  $(INCLUDES) -I$(top_builddir)/src/obj \\\n+  -I$(top_srcdir)/src/leveldb/include -I$(top_srcdir)/src/leveldb/helpers \\\n+  -I$(top_srcdir)/src $(BOOST_INCLUDES)\n+\n+AM_LDFLAGS = $(PTHREAD_CFLAGS)\n+\n+bin_PROGRAMS = test_bitcoin\n+\n+TESTS = test_bitcoin\n+\n+TEST_DATA_DIR=$(top_srcdir)/src/test/data\n+\n+TEST_DATA_FILES= $(TEST_DATA_DIR)/script_valid.json \\\n+  $(TEST_DATA_DIR)/base58_keys_valid.json $(TEST_DATA_DIR)/sig_canonical.json \\\n+  $(TEST_DATA_DIR)/sig_noncanonical.json \\\n+  $(TEST_DATA_DIR)/base58_encode_decode.json $(TEST_DATA_DIR)/alertTests \\\n+  $(TEST_DATA_DIR)/base58_keys_invalid.json \\\n+  $(TEST_DATA_DIR)/script_invalid.json $(TEST_DATA_DIR)/tx_invalid.json \\\n+  $(TEST_DATA_DIR)/tx_valid.json\n+\n+# test_bitcoin binary #\n+test_bitcoin_CPPFLAGS = $(AM_CPPFLAGS) $(TESTDEFS) \\\n+  -DTEST_DATA_DIR=$(TEST_DATA_DIR)\n+test_bitcoin_LDADD = $(LIBBITCOIN) $(LIBLEVELDB) $(LIBMEMENV) \\\n+  $(BOOST_LIBS) $(BOOST_UNIT_TEST_FRAMEWORK_LIB)\n+test_bitcoin_SOURCES = accounting_tests.cpp alert_tests.cpp \\\n+  allocator_tests.cpp base32_tests.cpp base58_tests.cpp base64_tests.cpp \\\n+  bignum_tests.cpp bloom_tests.cpp canonical_tests.cpp checkblock_tests.cpp \\\n+  Checkpoints_tests.cpp compress_tests.cpp DoS_tests.cpp getarg_tests.cpp \\\n+  key_tests.cpp miner_tests.cpp mruset_tests.cpp multisig_tests.cpp \\\n+  netbase_tests.cpp pmt_tests.cpp rpc_tests.cpp script_P2SH_tests.cpp \\\n+  script_tests.cpp serialize_tests.cpp sigopcount_tests.cpp test_bitcoin.cpp \\\n+  transaction_tests.cpp uint160_tests.cpp uint256_tests.cpp util_tests.cpp \\\n+  wallet_tests.cpp $(TEST_DATA_FILES)\n+\n+CLEANFILES = *.gcda *.gcno"
      },
      {
        "sha": "62eb7fad9e374b9761e95e9a70548619d73e17d5",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/35b8af92265ed74de63c3818e5290c27b3f35df2/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/35b8af92265ed74de63c3818e5290c27b3f35df2/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=35b8af92265ed74de63c3818e5290c27b3f35df2",
        "patch": "@@ -91,7 +91,6 @@ T* alignup(T* p)\n }\n \n #ifdef WIN32\n-#define MSG_NOSIGNAL        0\n #define MSG_DONTWAIT        0\n \n #ifndef S_IRUSR\n@@ -111,11 +110,13 @@ inline void MilliSleep(int64 n)\n // Boost's sleep_for was uninterruptable when backed by nanosleep from 1.50\n // until fixed in 1.52. Use the deprecated sleep method for the broken case.\n // See: https://svn.boost.org/trac/boost/ticket/7238\n-\n-#if BOOST_VERSION >= 105000 && (!defined(BOOST_HAS_NANOSLEEP) || BOOST_VERSION >= 105200)\n+#if defined(HAVE_WORKING_BOOST_SLEEP_FOR)\n     boost::this_thread::sleep_for(boost::chrono::milliseconds(n));\n-#else\n+#elif defined(HAVE_WORKING_BOOST_SLEEP)\n     boost::this_thread::sleep(boost::posix_time::milliseconds(n));\n+#else\n+  //should never get here\n+#error missing boost sleep implementation\n #endif\n }\n "
      }
    ]
  }
]