[
  {
    "sha": "bc6fdf2d15648a5fc68df8021d9186737de6fe7b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYzZmZGYyZDE1NjQ4YTVmYzY4ZGY4MDIxZDkxODY3MzdkZTZmZTdi",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-12-12T19:47:24Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-03-26T20:49:33Z"
      },
      "message": "Change all python files to use Python3",
      "tree": {
        "sha": "e1fdc67a24810e5fe061de69e5a6f0f55f10cbb2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e1fdc67a24810e5fe061de69e5a6f0f55f10cbb2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bc6fdf2d15648a5fc68df8021d9186737de6fe7b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc6fdf2d15648a5fc68df8021d9186737de6fe7b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bc6fdf2d15648a5fc68df8021d9186737de6fe7b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc6fdf2d15648a5fc68df8021d9186737de6fe7b/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ec7dbaa37c233599e9fc68f8284ee85c1261652b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec7dbaa37c233599e9fc68f8284ee85c1261652b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ec7dbaa37c233599e9fc68f8284ee85c1261652b"
      }
    ],
    "stats": {
      "total": 126,
      "additions": 56,
      "deletions": 70
    },
    "files": [
      {
        "sha": "4e87cdae8272c6018e1b47e7b93824384bf21d8d",
        "filename": "contrib/devtools/check-doc.py",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bc6fdf2d15648a5fc68df8021d9186737de6fe7b/contrib/devtools/check-doc.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bc6fdf2d15648a5fc68df8021d9186737de6fe7b/contrib/devtools/check-doc.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/check-doc.py?ref=bc6fdf2d15648a5fc68df8021d9186737de6fe7b",
        "patch": "@@ -1,4 +1,4 @@\n-#!/usr/bin/env python\n+#!/usr/bin/env python3\n # Copyright (c) 2015-2017 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n@@ -16,29 +16,29 @@\n \n FOLDER_GREP = 'src'\n FOLDER_TEST = 'src/test/'\n-CMD_ROOT_DIR = '`git rev-parse --show-toplevel`/%s' % FOLDER_GREP\n-CMD_GREP_ARGS = r\"egrep -r -I '(map(Multi)?Args(\\.count\\(|\\[)|Get(Bool)?Arg\\()\\\"\\-[^\\\"]+?\\\"' %s | grep -v '%s'\" % (CMD_ROOT_DIR, FOLDER_TEST)\n-CMD_GREP_DOCS = r\"egrep -r -I 'HelpMessageOpt\\(\\\"\\-[^\\\"=]+?(=|\\\")' %s\" % (CMD_ROOT_DIR)\n+CMD_ROOT_DIR = '`git rev-parse --show-toplevel`/{}'.format(FOLDER_GREP)\n+CMD_GREP_ARGS = r\"egrep -r -I '(map(Multi)?Args(\\.count\\(|\\[)|Get(Bool)?Arg\\()\\\"\\-[^\\\"]+?\\\"' {} | grep -v '{}'\".format(CMD_ROOT_DIR, FOLDER_TEST)\n+CMD_GREP_DOCS = r\"egrep -r -I 'HelpMessageOpt\\(\\\"\\-[^\\\"=]+?(=|\\\")' {}\".format(CMD_ROOT_DIR)\n REGEX_ARG = re.compile(r'(?:map(?:Multi)?Args(?:\\.count\\(|\\[)|Get(?:Bool)?Arg\\()\\\"(\\-[^\\\"]+?)\\\"')\n REGEX_DOC = re.compile(r'HelpMessageOpt\\(\\\"(\\-[^\\\"=]+?)(?:=|\\\")')\n # list unsupported, deprecated and duplicate args as they need no documentation\n SET_DOC_OPTIONAL = set(['-rpcssl', '-benchmark', '-h', '-help', '-socks', '-tor', '-debugnet', '-whitelistalwaysrelay', '-prematurewitness', '-walletprematurewitness', '-promiscuousmempoolflags', '-blockminsize', '-dbcrashratio', '-forcecompactdb', '-usehd'])\n \n def main():\n-  used = check_output(CMD_GREP_ARGS, shell=True)\n-  docd = check_output(CMD_GREP_DOCS, shell=True)\n+  used = check_output(CMD_GREP_ARGS, shell=True, universal_newlines=True)\n+  docd = check_output(CMD_GREP_DOCS, shell=True, universal_newlines=True)\n \n   args_used = set(re.findall(REGEX_ARG,used))\n   args_docd = set(re.findall(REGEX_DOC,docd)).union(SET_DOC_OPTIONAL)\n   args_need_doc = args_used.difference(args_docd)\n   args_unknown = args_docd.difference(args_used)\n \n-  print \"Args used        : %s\" % len(args_used)\n-  print \"Args documented  : %s\" % len(args_docd)\n-  print \"Args undocumented: %s\" % len(args_need_doc)\n-  print args_need_doc\n-  print \"Args unknown     : %s\" % len(args_unknown)\n-  print args_unknown\n+  print(\"Args used        : {}\".format(len(args_used)))\n+  print(\"Args documented  : {}\".format(len(args_docd)))\n+  print(\"Args undocumented: {}\".format(len(args_need_doc)))\n+  print(args_need_doc)\n+  print(\"Args unknown     : {}\".format(len(args_unknown)))\n+  print(args_unknown)\n \n   sys.exit(len(args_need_doc))\n "
      },
      {
        "sha": "ca1bd8854fc6f958372f8436e4db515dbabe8e84",
        "filename": "contrib/devtools/clang-format-diff.py",
        "status": "modified",
        "additions": 11,
        "deletions": 8,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bc6fdf2d15648a5fc68df8021d9186737de6fe7b/contrib/devtools/clang-format-diff.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bc6fdf2d15648a5fc68df8021d9186737de6fe7b/contrib/devtools/clang-format-diff.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/clang-format-diff.py?ref=bc6fdf2d15648a5fc68df8021d9186737de6fe7b",
        "patch": "@@ -1,4 +1,4 @@\n-#!/usr/bin/env python\n+#!/usr/bin/env python3\n #\n #===- clang-format-diff.py - ClangFormat Diff Reformatter ----*- python -*--===#\n #\n@@ -69,10 +69,10 @@\n \n import argparse\n import difflib\n+import io\n import re\n import string\n import subprocess\n-import StringIO\n import sys\n \n \n@@ -133,30 +133,33 @@ def main():\n           ['-lines', str(start_line) + ':' + str(end_line)])\n \n   # Reformat files containing changes in place.\n-  for filename, lines in lines_by_file.iteritems():\n+  for filename, lines in lines_by_file.items():\n     if args.i and args.verbose:\n-      print 'Formatting', filename\n+      print('Formatting {}'.format(filename))\n     command = [binary, filename]\n     if args.i:\n       command.append('-i')\n     if args.sort_includes:\n       command.append('-sort-includes')\n     command.extend(lines)\n     command.extend(['-style=file', '-fallback-style=none'])\n-    p = subprocess.Popen(command, stdout=subprocess.PIPE,\n-                         stderr=None, stdin=subprocess.PIPE)\n+    p = subprocess.Popen(command,\n+                         stdout=subprocess.PIPE,\n+                         stderr=None,\n+                         stdin=subprocess.PIPE,\n+                         universal_newlines=True)\n     stdout, stderr = p.communicate()\n     if p.returncode != 0:\n       sys.exit(p.returncode)\n \n     if not args.i:\n       with open(filename) as f:\n         code = f.readlines()\n-      formatted_code = StringIO.StringIO(stdout).readlines()\n+      formatted_code = io.StringIO(stdout).readlines()\n       diff = difflib.unified_diff(code, formatted_code,\n                                   filename, filename,\n                                   '(before formatting)', '(after formatting)')\n-      diff_string = string.join(diff, '')\n+      diff_string = ''.join(diff)\n       if len(diff_string) > 0:\n         sys.stdout.write(diff_string)\n "
      },
      {
        "sha": "565b199125105c3e39fdba4d232826811dce55a1",
        "filename": "contrib/devtools/optimize-pngs.py",
        "status": "modified",
        "additions": 14,
        "deletions": 16,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bc6fdf2d15648a5fc68df8021d9186737de6fe7b/contrib/devtools/optimize-pngs.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bc6fdf2d15648a5fc68df8021d9186737de6fe7b/contrib/devtools/optimize-pngs.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/optimize-pngs.py?ref=bc6fdf2d15648a5fc68df8021d9186737de6fe7b",
        "patch": "@@ -1,4 +1,4 @@\n-#!/usr/bin/env python\n+#!/usr/bin/env python3\n # Copyright (c) 2014-2017 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n@@ -10,7 +10,7 @@\n import sys\n import subprocess\n import hashlib\n-from PIL import Image\n+from PIL import Image  # pip3 install Pillow\n \n def file_hash(filename):\n     '''Return hash of raw file contents'''\n@@ -27,7 +27,7 @@ def content_hash(filename):\n pngcrush = 'pngcrush'\n git = 'git'\n folders = [\"src/qt/res/movies\", \"src/qt/res/icons\", \"share/pixmaps\"]\n-basePath = subprocess.check_output([git, 'rev-parse', '--show-toplevel']).rstrip('\\n')\n+basePath = subprocess.check_output([git, 'rev-parse', '--show-toplevel'], universal_newlines=True).rstrip('\\n')\n totalSaveBytes = 0\n noHashChange = True\n \n@@ -37,42 +37,40 @@ def content_hash(filename):\n     for file in os.listdir(absFolder):\n         extension = os.path.splitext(file)[1]\n         if extension.lower() == '.png':\n-            print(\"optimizing \"+file+\"...\"),\n+            print(\"optimizing {}...\".format(file), end =' ')\n             file_path = os.path.join(absFolder, file)\n             fileMetaMap = {'file' : file, 'osize': os.path.getsize(file_path), 'sha256Old' : file_hash(file_path)}\n             fileMetaMap['contentHashPre'] = content_hash(file_path)\n         \n-            pngCrushOutput = \"\"\n             try:\n-                pngCrushOutput = subprocess.check_output(\n-                        [pngcrush, \"-brute\", \"-ow\", \"-rem\", \"gAMA\", \"-rem\", \"cHRM\", \"-rem\", \"iCCP\", \"-rem\", \"sRGB\", \"-rem\", \"alla\", \"-rem\", \"text\", file_path],\n-                        stderr=subprocess.STDOUT).rstrip('\\n')\n+                subprocess.call([pngcrush, \"-brute\", \"-ow\", \"-rem\", \"gAMA\", \"-rem\", \"cHRM\", \"-rem\", \"iCCP\", \"-rem\", \"sRGB\", \"-rem\", \"alla\", \"-rem\", \"text\", file_path],\n+                                stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n             except:\n-                print \"pngcrush is not installed, aborting...\"\n+                print(\"pngcrush is not installed, aborting...\")\n                 sys.exit(0)\n         \n             #verify\n-            if \"Not a PNG file\" in subprocess.check_output([pngcrush, \"-n\", \"-v\", file_path], stderr=subprocess.STDOUT):\n-                print \"PNG file \"+file+\" is corrupted after crushing, check out pngcursh version\"\n+            if \"Not a PNG file\" in subprocess.check_output([pngcrush, \"-n\", \"-v\", file_path], stderr=subprocess.STDOUT, universal_newlines=True):\n+                print(\"PNG file \"+file+\" is corrupted after crushing, check out pngcursh version\")\n                 sys.exit(1)\n             \n             fileMetaMap['sha256New'] = file_hash(file_path)\n             fileMetaMap['contentHashPost'] = content_hash(file_path)\n \n             if fileMetaMap['contentHashPre'] != fileMetaMap['contentHashPost']:\n-                print \"Image contents of PNG file \"+file+\" before and after crushing don't match\"\n+                print(\"Image contents of PNG file {} before and after crushing don't match\".format(file))\n                 sys.exit(1)\n \n             fileMetaMap['psize'] = os.path.getsize(file_path)\n             outputArray.append(fileMetaMap)\n-            print(\"done\\n\"),\n+            print(\"done\")\n \n-print \"summary:\\n+++++++++++++++++\"\n+print(\"summary:\\n+++++++++++++++++\")\n for fileDict in outputArray:\n     oldHash = fileDict['sha256Old']\n     newHash = fileDict['sha256New']\n     totalSaveBytes += fileDict['osize'] - fileDict['psize']\n     noHashChange = noHashChange and (oldHash == newHash)\n-    print fileDict['file']+\"\\n  size diff from: \"+str(fileDict['osize'])+\" to: \"+str(fileDict['psize'])+\"\\n  old sha256: \"+oldHash+\"\\n  new sha256: \"+newHash+\"\\n\"\n+    print(fileDict['file']+\"\\n  size diff from: \"+str(fileDict['osize'])+\" to: \"+str(fileDict['psize'])+\"\\n  old sha256: \"+oldHash+\"\\n  new sha256: \"+newHash+\"\\n\")\n     \n-print \"completed. Checksum stable: \"+str(noHashChange)+\". Total reduction: \"+str(totalSaveBytes)+\" bytes\"\n+print(\"completed. Checksum stable: \"+str(noHashChange)+\". Total reduction: \"+str(totalSaveBytes)+\" bytes\")"
      },
      {
        "sha": "b8f54192c92800306ba299f78634491781bd4121",
        "filename": "contrib/devtools/security-check.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bc6fdf2d15648a5fc68df8021d9186737de6fe7b/contrib/devtools/security-check.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bc6fdf2d15648a5fc68df8021d9186737de6fe7b/contrib/devtools/security-check.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/security-check.py?ref=bc6fdf2d15648a5fc68df8021d9186737de6fe7b",
        "patch": "@@ -1,4 +1,4 @@\n-#!/usr/bin/env python\n+#!/usr/bin/env python3\n # Copyright (c) 2015-2017 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n@@ -8,7 +8,6 @@\n Otherwise the exit status will be 1 and it will log which executables failed which checks.\n Needs `readelf` (for ELF) and `objdump` (for PE).\n '''\n-from __future__ import division,print_function,unicode_literals\n import subprocess\n import sys\n import os"
      },
      {
        "sha": "2b778577667e7230224f4ad04297266489dc604c",
        "filename": "contrib/devtools/symbol-check.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bc6fdf2d15648a5fc68df8021d9186737de6fe7b/contrib/devtools/symbol-check.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bc6fdf2d15648a5fc68df8021d9186737de6fe7b/contrib/devtools/symbol-check.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/symbol-check.py?ref=bc6fdf2d15648a5fc68df8021d9186737de6fe7b",
        "patch": "@@ -1,4 +1,4 @@\n-#!/usr/bin/env python\n+#!/usr/bin/env python3\n # Copyright (c) 2014 Wladimir J. van der Laan\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n@@ -11,7 +11,6 @@\n \n     find ../gitian-builder/build -type f -executable | xargs python contrib/devtools/symbol-check.py\n '''\n-from __future__ import division, print_function, unicode_literals\n import subprocess\n import re\n import sys"
      },
      {
        "sha": "b36e6968bf0f64d424992ff1589f9e44fb3ce671",
        "filename": "contrib/devtools/update-translations.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bc6fdf2d15648a5fc68df8021d9186737de6fe7b/contrib/devtools/update-translations.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bc6fdf2d15648a5fc68df8021d9186737de6fe7b/contrib/devtools/update-translations.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/update-translations.py?ref=bc6fdf2d15648a5fc68df8021d9186737de6fe7b",
        "patch": "@@ -1,4 +1,4 @@\n-#!/usr/bin/env python\n+#!/usr/bin/env python3\n # Copyright (c) 2014 Wladimir J. van der Laan\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n@@ -15,7 +15,6 @@\n TODO:\n - auto-add new translations to the build system according to the translation process\n '''\n-from __future__ import division, print_function\n import subprocess\n import re\n import sys"
      },
      {
        "sha": "b29fc71765653b816e9fcef0437c302c0dd55a86",
        "filename": "contrib/macdeploy/custom_dsstore.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bc6fdf2d15648a5fc68df8021d9186737de6fe7b/contrib/macdeploy/custom_dsstore.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bc6fdf2d15648a5fc68df8021d9186737de6fe7b/contrib/macdeploy/custom_dsstore.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/custom_dsstore.py?ref=bc6fdf2d15648a5fc68df8021d9186737de6fe7b",
        "patch": "@@ -1,8 +1,7 @@\n-#!/usr/bin/env python\n+#!/usr/bin/env python3\n # Copyright (c) 2013-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-from __future__ import division,print_function,unicode_literals\n import biplist\n from ds_store import DSStore\n from mac_alias import Alias"
      },
      {
        "sha": "17ce6c44f93b0d1f5746f22153210a243979836b",
        "filename": "contrib/macdeploy/macdeployqtplus",
        "status": "modified",
        "additions": 5,
        "deletions": 22,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bc6fdf2d15648a5fc68df8021d9186737de6fe7b/contrib/macdeploy/macdeployqtplus",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bc6fdf2d15648a5fc68df8021d9186737de6fe7b/contrib/macdeploy/macdeployqtplus",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/macdeployqtplus?ref=bc6fdf2d15648a5fc68df8021d9186737de6fe7b",
        "patch": "@@ -1,5 +1,4 @@\n-#!/usr/bin/env python\n-from __future__ import division, print_function, unicode_literals\n+#!/usr/bin/env python3\n #\n # Copyright (C) 2011  Patrick \"p2k\" Schneider <me@p2k-network.org>\n #\n@@ -203,15 +202,15 @@ def getFrameworks(binaryPath, verbose):\n     if verbose >= 3:\n         print(\"Inspecting with otool: \" + binaryPath)\n     otoolbin=os.getenv(\"OTOOL\", \"otool\")\n-    otool = subprocess.Popen([otoolbin, \"-L\", binaryPath], stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n+    otool = subprocess.Popen([otoolbin, \"-L\", binaryPath], stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True)\n     o_stdout, o_stderr = otool.communicate()\n     if otool.returncode != 0:\n         if verbose >= 1:\n             sys.stderr.write(o_stderr)\n             sys.stderr.flush()\n             raise RuntimeError(\"otool failed with return code %d\" % otool.returncode)\n \n-    otoolLines = o_stdout.decode().split(\"\\n\")\n+    otoolLines = o_stdout.split(\"\\n\")\n     otoolLines.pop(0) # First line is the inspected binary\n     if \".framework\" in binaryPath or binaryPath.endswith(\".dylib\"):\n         otoolLines.pop(0) # Frameworks and dylibs list themselves as a dependency.\n@@ -714,22 +713,6 @@ elif config.sign:\n \n if config.dmg is not None:\n \n-    #Patch in check_output for Python 2.6\n-    if \"check_output\" not in dir( subprocess ):\n-        def f(*popenargs, **kwargs):\n-            if 'stdout' in kwargs:\n-                raise ValueError('stdout argument not allowed, it will be overridden.')\n-            process = subprocess.Popen(stdout=subprocess.PIPE, *popenargs, **kwargs)\n-            output, unused_err = process.communicate()\n-            retcode = process.poll()\n-            if retcode:\n-                cmd = kwargs.get(\"args\")\n-                if cmd is None:\n-                    cmd = popenargs[0]\n-                raise CalledProcessError(retcode, cmd)\n-            return output\n-        subprocess.check_output = f\n-\n     def runHDIUtil(verb, image_basename, **kwargs):\n         hdiutil_args = [\"hdiutil\", verb, image_basename + \".dmg\"]\n         if \"capture_stdout\" in kwargs:\n@@ -747,7 +730,7 @@ if config.dmg is not None:\n             if not value is True:\n                 hdiutil_args.append(str(value))\n         \n-        return run(hdiutil_args)\n+        return run(hdiutil_args, universal_newlines=True)\n     \n     if verbose >= 2:\n         if fancy is None:\n@@ -789,7 +772,7 @@ if config.dmg is not None:\n         except subprocess.CalledProcessError as e:\n             sys.exit(e.returncode)\n         \n-        m = re.search(\"/Volumes/(.+$)\", output.decode())\n+        m = re.search(\"/Volumes/(.+$)\", output)\n         disk_root = m.group(0)\n         disk_name = m.group(1)\n         "
      },
      {
        "sha": "af6d7e1112c5ee11753ae2c87515104bdb007b81",
        "filename": "contrib/testgen/gen_base58_test_vectors.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bc6fdf2d15648a5fc68df8021d9186737de6fe7b/contrib/testgen/gen_base58_test_vectors.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bc6fdf2d15648a5fc68df8021d9186737de6fe7b/contrib/testgen/gen_base58_test_vectors.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/testgen/gen_base58_test_vectors.py?ref=bc6fdf2d15648a5fc68df8021d9186737de6fe7b",
        "patch": "@@ -1,4 +1,4 @@\n-#!/usr/bin/env python\n+#!/usr/bin/env python2\n # Copyright (c) 2012-2017 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n@@ -8,6 +8,8 @@\n Usage: \n     gen_base58_test_vectors.py valid 50 > ../../src/test/data/base58_keys_valid.json\n     gen_base58_test_vectors.py invalid 50 > ../../src/test/data/base58_keys_invalid.json\n+\n+Note that this script is Python2 only, and will fail in Python3\n '''\n # 2012 Wladimir J. van der Laan\n # Released under MIT License"
      },
      {
        "sha": "48ee364c187c89211347629ef5caa93c1925a94b",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bc6fdf2d15648a5fc68df8021d9186737de6fe7b/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bc6fdf2d15648a5fc68df8021d9186737de6fe7b/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=bc6fdf2d15648a5fc68df8021d9186737de6fe7b",
        "patch": "@@ -117,6 +117,11 @@ deprecated in V0.15.1, and has now been removed. Miners should use the\n `-blockmaxweight` option if they want to limit the weight of their blocks'\n weights.\n \n+Python Support\n+--------------\n+\n+Support for Python 2 has been discontinued for all test files and tools.\n+\n Credits\n =======\n "
      },
      {
        "sha": "e8f0820ca878b16551748d16020bb54022941ded",
        "filename": "share/qt/extract_strings_qt.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bc6fdf2d15648a5fc68df8021d9186737de6fe7b/share/qt/extract_strings_qt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bc6fdf2d15648a5fc68df8021d9186737de6fe7b/share/qt/extract_strings_qt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/qt/extract_strings_qt.py?ref=bc6fdf2d15648a5fc68df8021d9186737de6fe7b",
        "patch": "@@ -1,12 +1,11 @@\n-#!/usr/bin/env python\n+#!/usr/bin/env python3\n # Copyright (c) 2012-2017 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n '''\n Extract _(\"...\") strings for translation and convert to Qt stringdefs so that\n they can be picked up by Qt linguist.\n '''\n-from __future__ import division,print_function,unicode_literals\n from subprocess import Popen, PIPE\n import operator\n import os"
      },
      {
        "sha": "d6580281d40e38ee9e99cfcba76d29cf53a9df83",
        "filename": "share/rpcauth/rpcauth.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bc6fdf2d15648a5fc68df8021d9186737de6fe7b/share/rpcauth/rpcauth.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bc6fdf2d15648a5fc68df8021d9186737de6fe7b/share/rpcauth/rpcauth.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/rpcauth/rpcauth.py?ref=bc6fdf2d15648a5fc68df8021d9186737de6fe7b",
        "patch": "@@ -1,4 +1,4 @@\n-#!/usr/bin/env python\n+#!/usr/bin/env python3\n # Copyright (c) 2015-2017 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying \n # file COPYING or http://www.opensource.org/licenses/mit-license.php."
      }
    ]
  },
  {
    "sha": "18740586baee546064cba9286e2d681a849ae443",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxODc0MDU4NmJhZWU1NDYwNjRjYmE5Mjg2ZTJkNjgxYTg0OWFlNDQz",
    "commit": {
      "author": {
        "name": "Evan Klitzke",
        "email": "evan@eklitzke.org",
        "date": "2018-03-28T02:06:03Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-03-28T13:20:42Z"
      },
      "message": "Make base58 python contrib code work with python3",
      "tree": {
        "sha": "fe118527de7016416bbeaadee8054e3fea41851a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fe118527de7016416bbeaadee8054e3fea41851a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/18740586baee546064cba9286e2d681a849ae443",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/18740586baee546064cba9286e2d681a849ae443",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/18740586baee546064cba9286e2d681a849ae443",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/18740586baee546064cba9286e2d681a849ae443/comments",
    "author": {
      "login": "eklitzke",
      "id": 2734,
      "node_id": "MDQ6VXNlcjI3MzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2734?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/eklitzke",
      "html_url": "https://github.com/eklitzke",
      "followers_url": "https://api.github.com/users/eklitzke/followers",
      "following_url": "https://api.github.com/users/eklitzke/following{/other_user}",
      "gists_url": "https://api.github.com/users/eklitzke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/eklitzke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/eklitzke/subscriptions",
      "organizations_url": "https://api.github.com/users/eklitzke/orgs",
      "repos_url": "https://api.github.com/users/eklitzke/repos",
      "events_url": "https://api.github.com/users/eklitzke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/eklitzke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bc6fdf2d15648a5fc68df8021d9186737de6fe7b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc6fdf2d15648a5fc68df8021d9186737de6fe7b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bc6fdf2d15648a5fc68df8021d9186737de6fe7b"
      }
    ],
    "stats": {
      "total": 47,
      "additions": 27,
      "deletions": 20
    },
    "files": [
      {
        "sha": "0dbb79a70712d788bee76c87f538341e657f57bc",
        "filename": "contrib/testgen/base58.py",
        "status": "modified",
        "additions": 13,
        "deletions": 7,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/18740586baee546064cba9286e2d681a849ae443/contrib/testgen/base58.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/18740586baee546064cba9286e2d681a849ae443/contrib/testgen/base58.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/testgen/base58.py?ref=18740586baee546064cba9286e2d681a849ae443",
        "patch": "@@ -28,7 +28,9 @@ def b58encode(v):\n     \"\"\"\n     long_value = 0\n     for (i, c) in enumerate(v[::-1]):\n-        long_value += (256**i) * ord(c)\n+        if isinstance(c, str):\n+            c = ord(c)\n+        long_value += (256**i) * c\n \n     result = ''\n     while long_value >= __b58base:\n@@ -41,7 +43,7 @@ def b58encode(v):\n     # leading 0-bytes in the input become leading-1s\n     nPad = 0\n     for c in v:\n-        if c == '\\0': nPad += 1\n+        if c == 0: nPad += 1\n         else: break\n \n     return (__b58chars[0]*nPad) + result\n@@ -50,8 +52,10 @@ def b58decode(v, length = None):\n     \"\"\" decode v into a string of len bytes\n     \"\"\"\n     long_value = 0\n-    for (i, c) in enumerate(v[::-1]):\n-        long_value += __b58chars.find(c) * (__b58base**i)\n+    for i, c in enumerate(v[::-1]):\n+        pos = __b58chars.find(c)\n+        assert pos != -1\n+        long_value += pos * (__b58base**i)\n \n     result = bytes()\n     while long_value >= 256:\n@@ -62,10 +66,12 @@ def b58decode(v, length = None):\n \n     nPad = 0\n     for c in v:\n-        if c == __b58chars[0]: nPad += 1\n-        else: break\n+        if c == __b58chars[0]:\n+            nPad += 1\n+            continue\n+        break\n \n-    result = chr(0)*nPad + result\n+    result = bytes(nPad) + result\n     if length is not None and len(result) != length:\n         return None\n "
      },
      {
        "sha": "43516057866df9746e65890a5416540cfa01aab8",
        "filename": "contrib/testgen/gen_base58_test_vectors.py",
        "status": "modified",
        "additions": 14,
        "deletions": 13,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/18740586baee546064cba9286e2d681a849ae443/contrib/testgen/gen_base58_test_vectors.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/18740586baee546064cba9286e2d681a849ae443/contrib/testgen/gen_base58_test_vectors.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/testgen/gen_base58_test_vectors.py?ref=18740586baee546064cba9286e2d681a849ae443",
        "patch": "@@ -1,15 +1,13 @@\n-#!/usr/bin/env python2\n+#!/usr/bin/env python3\n # Copyright (c) 2012-2017 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n '''\n Generate valid and invalid base58 address and private key test vectors.\n \n-Usage: \n+Usage:\n     gen_base58_test_vectors.py valid 50 > ../../src/test/data/base58_keys_valid.json\n     gen_base58_test_vectors.py invalid 50 > ../../src/test/data/base58_keys_invalid.json\n-\n-Note that this script is Python2 only, and will fail in Python3\n '''\n # 2012 Wladimir J. van der Laan\n # Released under MIT License\n@@ -48,8 +46,8 @@ def is_valid(v):\n     if result is None:\n         return False\n     for template in templates:\n-        prefix = str(bytearray(template[0]))\n-        suffix = str(bytearray(template[2]))\n+        prefix = bytearray(template[0])\n+        suffix = bytearray(template[2])\n         if result.startswith(prefix) and result.endswith(suffix):\n             if (len(result) - len(prefix) - len(suffix)) == template[1]:\n                 return True\n@@ -59,20 +57,23 @@ def gen_valid_vectors():\n     '''Generate valid test vectors'''\n     while True:\n         for template in templates:\n-            prefix = str(bytearray(template[0]))\n-            payload = os.urandom(template[1]) \n-            suffix = str(bytearray(template[2]))\n+            prefix = bytearray(template[0])\n+            payload = bytearray(os.urandom(template[1]))\n+            suffix = bytearray(template[2])\n             rv = b58encode_chk(prefix + payload + suffix)\n             assert is_valid(rv)\n-            metadata = dict([(x,y) for (x,y) in zip(metadata_keys,template[3]) if y is not None])\n-            yield (rv, b2a_hex(payload), metadata)\n+            metadata = {x: y for x, y in zip(metadata_keys,template[3]) if y is not None}\n+            hexrepr = b2a_hex(payload)\n+            if isinstance(hexrepr, bytes):\n+                hexrepr = hexrepr.decode('utf8')\n+            yield (rv, hexrepr, metadata)\n \n def gen_invalid_vector(template, corrupt_prefix, randomize_payload_size, corrupt_suffix):\n     '''Generate possibly invalid vector'''\n     if corrupt_prefix:\n         prefix = os.urandom(1)\n     else:\n-        prefix = str(bytearray(template[0]))\n+        prefix = bytearray(template[0])\n     \n     if randomize_payload_size:\n         payload = os.urandom(max(int(random.expovariate(0.5)), 50))\n@@ -82,7 +83,7 @@ def gen_invalid_vector(template, corrupt_prefix, randomize_payload_size, corrupt\n     if corrupt_suffix:\n         suffix = os.urandom(len(template[2]))\n     else:\n-        suffix = str(bytearray(template[2]))\n+        suffix = bytearray(template[2])\n \n     return b58encode_chk(prefix + payload + suffix)\n "
      }
    ]
  }
]