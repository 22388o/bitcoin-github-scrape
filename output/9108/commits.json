[
  {
    "sha": "442887f27fb5809e72862d4385eba86588bc97d0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NDI4ODdmMjdmYjU4MDllNzI4NjJkNDM4NWViYTg2NTg4YmM5N2Qw",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-02-03T21:23:13Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-02-10T20:40:28Z"
      },
      "message": "Require timestamps for importmulti keys\n\nAdditionally, accept a \"now\" timestamp, to allow avoiding rescans for keys\nwhich are known never to have been used.\n\nNote that the behavior when \"now\" is specified is slightly different than the\nprevious behavior when no timestamp was specified at all. Previously, when no\ntimestamp was specified, it would avoid rescanning during the importmulti call,\nbut set the key's nCreateTime value to 1, which would not prevent future block\nreads in later ScanForWalletTransactions calls. With this change, passing a\n\"now\" timestamp will set the key's nCreateTime to the current block time\ninstead of 1.\n\nFixes #9491",
      "tree": {
        "sha": "203a8fb48e26aaa644aa5f21c9a3bf92ef886786",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/203a8fb48e26aaa644aa5f21c9a3bf92ef886786"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/442887f27fb5809e72862d4385eba86588bc97d0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/442887f27fb5809e72862d4385eba86588bc97d0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/442887f27fb5809e72862d4385eba86588bc97d0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/442887f27fb5809e72862d4385eba86588bc97d0/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "02464da5e4aa8c19d4fff3859dcdee822e2af78c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02464da5e4aa8c19d4fff3859dcdee822e2af78c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/02464da5e4aa8c19d4fff3859dcdee822e2af78c"
      }
    ],
    "stats": {
      "total": 73,
      "additions": 64,
      "deletions": 9
    },
    "files": [
      {
        "sha": "8f60e63e2e50dd7ecc7c2f84b5aace5a68d83440",
        "filename": "qa/rpc-tests/import-rescan.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/442887f27fb5809e72862d4385eba86588bc97d0/qa/rpc-tests/import-rescan.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/442887f27fb5809e72862d4385eba86588bc97d0/qa/rpc-tests/import-rescan.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/import-rescan.py?ref=442887f27fb5809e72862d4385eba86588bc97d0",
        "patch": "@@ -33,6 +33,7 @@ def call_import_rpc(call, data, address, scriptPubKey, pubkey, key, label, node,\n             \"scriptPubKey\": {\n                 \"address\": address\n             },\n+            \"timestamp\": \"now\",\n             \"pubkeys\": [pubkey] if data == Data.pub else [],\n             \"keys\": [key] if data == Data.priv else [],\n             \"label\": label,"
      },
      {
        "sha": "b4d4b6c5b8048faee3fcc2b895d37e51446fb4cc",
        "filename": "qa/rpc-tests/importmulti.py",
        "status": "modified",
        "additions": 34,
        "deletions": 3,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/442887f27fb5809e72862d4385eba86588bc97d0/qa/rpc-tests/importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/442887f27fb5809e72862d4385eba86588bc97d0/qa/rpc-tests/importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/importmulti.py?ref=442887f27fb5809e72862d4385eba86588bc97d0",
        "patch": "@@ -52,7 +52,8 @@ def run_test (self):\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": {\n                 \"address\": address['address']\n-            }\n+            },\n+            \"timestamp\": \"now\",\n         }])\n         assert_equal(result[0]['success'], True)\n         address_assert = self.nodes[1].validateaddress(address['address'])\n@@ -65,6 +66,7 @@ def run_test (self):\n         address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": address['scriptPubKey'],\n+            \"timestamp\": \"now\",\n             \"internal\": True\n         }])\n         assert_equal(result[0]['success'], True)\n@@ -76,7 +78,8 @@ def run_test (self):\n         print(\"Should not import a scriptPubKey without internal flag\")\n         address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n         result = self.nodes[1].importmulti([{\n-            \"scriptPubKey\": address['scriptPubKey']\n+            \"scriptPubKey\": address['scriptPubKey'],\n+            \"timestamp\": \"now\",\n         }])\n         assert_equal(result[0]['success'], False)\n         assert_equal(result[0]['error']['code'], -8)\n@@ -93,6 +96,7 @@ def run_test (self):\n             \"scriptPubKey\": {\n                 \"address\": address['address']\n             },\n+            \"timestamp\": \"now\",\n             \"pubkeys\": [ address['pubkey'] ]\n         }])\n         assert_equal(result[0]['success'], True)\n@@ -106,6 +110,7 @@ def run_test (self):\n         address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n         request = [{\n             \"scriptPubKey\": address['scriptPubKey'],\n+            \"timestamp\": \"now\",\n             \"pubkeys\": [ address['pubkey'] ],\n             \"internal\": True\n         }]\n@@ -120,6 +125,7 @@ def run_test (self):\n         address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n         request = [{\n             \"scriptPubKey\": address['scriptPubKey'],\n+            \"timestamp\": \"now\",\n             \"pubkeys\": [ address['pubkey'] ]\n         }]\n         result = self.nodes[1].importmulti(request)\n@@ -137,6 +143,7 @@ def run_test (self):\n             \"scriptPubKey\": {\n                 \"address\": address['address']\n             },\n+            \"timestamp\": \"now\",\n             \"keys\": [ self.nodes[0].dumpprivkey(address['address']) ]\n         }])\n         assert_equal(result[0]['success'], True)\n@@ -151,6 +158,7 @@ def run_test (self):\n             \"scriptPubKey\": {\n                 \"address\": address['address']\n             },\n+            \"timestamp\": \"now\",\n             \"keys\": [ self.nodes[0].dumpprivkey(address['address']) ],\n             \"watchonly\": True\n         }])\n@@ -166,6 +174,7 @@ def run_test (self):\n         address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": address['scriptPubKey'],\n+            \"timestamp\": \"now\",\n             \"keys\": [ self.nodes[0].dumpprivkey(address['address']) ],\n             \"internal\": True\n         }])\n@@ -179,6 +188,7 @@ def run_test (self):\n         address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": address['scriptPubKey'],\n+            \"timestamp\": \"now\",\n             \"keys\": [ self.nodes[0].dumpprivkey(address['address']) ]\n         }])\n         assert_equal(result[0]['success'], False)\n@@ -203,7 +213,8 @@ def run_test (self):\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": {\n                 \"address\": multi_sig_script['address']\n-            }\n+            },\n+            \"timestamp\": \"now\",\n         }])\n         assert_equal(result[0]['success'], True)\n         address_assert = self.nodes[1].validateaddress(multi_sig_script['address'])\n@@ -229,6 +240,7 @@ def run_test (self):\n             \"scriptPubKey\": {\n                 \"address\": multi_sig_script['address']\n             },\n+            \"timestamp\": \"now\",\n             \"redeemscript\": multi_sig_script['redeemScript']\n         }])\n         assert_equal(result[0]['success'], True)\n@@ -253,6 +265,7 @@ def run_test (self):\n             \"scriptPubKey\": {\n                 \"address\": multi_sig_script['address']\n             },\n+            \"timestamp\": \"now\",\n             \"redeemscript\": multi_sig_script['redeemScript'],\n             \"keys\": [ self.nodes[0].dumpprivkey(sig_address_1['address']), self.nodes[0].dumpprivkey(sig_address_2['address'])]\n         }])\n@@ -277,6 +290,7 @@ def run_test (self):\n             \"scriptPubKey\": {\n                 \"address\": multi_sig_script['address']\n             },\n+            \"timestamp\": \"now\",\n             \"redeemscript\": multi_sig_script['redeemScript'],\n             \"keys\": [ self.nodes[0].dumpprivkey(sig_address_1['address']), self.nodes[0].dumpprivkey(sig_address_2['address'])],\n             \"watchonly\": True\n@@ -294,6 +308,7 @@ def run_test (self):\n             \"scriptPubKey\": {\n                 \"address\": address['address']\n             },\n+            \"timestamp\": \"now\",\n             \"pubkeys\": [ address2['pubkey'] ]\n         }])\n         assert_equal(result[0]['success'], False)\n@@ -310,6 +325,7 @@ def run_test (self):\n         address2 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n         request = [{\n             \"scriptPubKey\": address['scriptPubKey'],\n+            \"timestamp\": \"now\",\n             \"pubkeys\": [ address2['pubkey'] ],\n             \"internal\": True\n         }]\n@@ -330,6 +346,7 @@ def run_test (self):\n             \"scriptPubKey\": {\n                 \"address\": address['address']\n             },\n+            \"timestamp\": \"now\",\n             \"keys\": [ self.nodes[0].dumpprivkey(address2['address']) ]\n         }])\n         assert_equal(result[0]['success'], False)\n@@ -346,6 +363,7 @@ def run_test (self):\n         address2 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": address['scriptPubKey'],\n+            \"timestamp\": \"now\",\n             \"keys\": [ self.nodes[0].dumpprivkey(address2['address']) ],\n             \"internal\": True\n         }])\n@@ -356,5 +374,18 @@ def run_test (self):\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], False)\n \n+        # Bad or missing timestamps\n+        print(\"Should throw on invalid or missing timestamp values\")\n+        assert_raises_message(JSONRPCException, 'Missing required timestamp field for key',\n+            self.nodes[1].importmulti, [{\n+                \"scriptPubKey\": address['scriptPubKey'],\n+            }])\n+        assert_raises_message(JSONRPCException, 'Expected number or \"now\" timestamp value for key. got type string',\n+            self.nodes[1].importmulti, [{\n+                \"scriptPubKey\": address['scriptPubKey'],\n+                \"timestamp\": \"\",\n+            }])\n+\n+\n if __name__ == '__main__':\n     ImportMultiTest ().main ()"
      },
      {
        "sha": "4674c95bfe606e1eabe9cdf78f7c588e08936448",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 6,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/442887f27fb5809e72862d4385eba86588bc97d0/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/442887f27fb5809e72862d4385eba86588bc97d0/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=442887f27fb5809e72862d4385eba86588bc97d0",
        "patch": "@@ -640,7 +640,8 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n }\n \n \n-UniValue processImport(const UniValue& data) {\n+UniValue ProcessImport(const UniValue& data, const int64_t timestamp)\n+{\n     try {\n         bool success = false;\n \n@@ -659,7 +660,6 @@ UniValue processImport(const UniValue& data) {\n         const bool& internal = data.exists(\"internal\") ? data[\"internal\"].get_bool() : false;\n         const bool& watchOnly = data.exists(\"watchonly\") ? data[\"watchonly\"].get_bool() : false;\n         const string& label = data.exists(\"label\") && !internal ? data[\"label\"].get_str() : \"\";\n-        const int64_t& timestamp = data.exists(\"timestamp\") && data[\"timestamp\"].get_int64() > 1 ? data[\"timestamp\"].get_int64() : 1;\n \n         bool isScript = scriptPubKey.getType() == UniValue::VSTR;\n         bool isP2SH = strRedeemScript.length() > 0;\n@@ -958,6 +958,20 @@ UniValue processImport(const UniValue& data) {\n     }\n }\n \n+int64_t GetImportTimestamp(const UniValue& data, int64_t now)\n+{\n+    if (data.exists(\"timestamp\")) {\n+        const UniValue& timestamp = data[\"timestamp\"];\n+        if (timestamp.isNum()) {\n+            return timestamp.get_int64();\n+        } else if (timestamp.isStr() && timestamp.get_str() == \"now\") {\n+            return now;\n+        }\n+        throw JSONRPCError(RPC_TYPE_ERROR, strprintf(\"Expected number or \\\"now\\\" timestamp value for key. got type %s\", uvTypeName(timestamp.type())));\n+    }\n+    throw JSONRPCError(RPC_TYPE_ERROR, \"Missing required timestamp field for key\");\n+}\n+\n UniValue importmulti(const JSONRPCRequest& mainRequest)\n {\n     // clang-format off\n@@ -970,13 +984,17 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n             \"  [     (array of json objects)\\n\"\n             \"    {\\n\"\n             \"      \\\"scriptPubKey\\\": \\\"<script>\\\" | { \\\"address\\\":\\\"<address>\\\" }, (string / json, required) Type of scriptPubKey (string for script, json for address)\\n\"\n+            \"      \\\"timestamp\\\": timestamp | \\\"now\\\"                        , (integer / string, required) Creation time of the key in seconds since epoch (Jan 1 1970 GMT),\\n\"\n+            \"                                                              or the string \\\"now\\\" to substitute the current synced blockchain time. The timestamp of the oldest\\n\"\n+            \"                                                              key will determine how far back blockchain rescans need to begin for missing wallet transactions.\\n\"\n+            \"                                                              \\\"now\\\" can be specified to bypass scanning, for keys which are known to never have been used, and\\n\"\n+            \"                                                              0 can be specified to scan the entire blockchain.\\n\"\n             \"      \\\"redeemscript\\\": \\\"<script>\\\"                            , (string, optional) Allowed only if the scriptPubKey is a P2SH address or a P2SH scriptPubKey\\n\"\n             \"      \\\"pubkeys\\\": [\\\"<pubKey>\\\", ... ]                         , (array, optional) Array of strings giving pubkeys that must occur in the output or redeemscript\\n\"\n             \"      \\\"keys\\\": [\\\"<key>\\\", ... ]                               , (array, optional) Array of strings giving private keys whose corresponding public keys must occur in the output or redeemscript\\n\"\n             \"      \\\"internal\\\": <true>                                    , (boolean, optional, default: false) Stating whether matching outputs should be be treated as not incoming payments\\n\"\n             \"      \\\"watchonly\\\": <true>                                   , (boolean, optional, default: false) Stating whether matching outputs should be considered watched even when they're not spendable, only allowed if keys are empty\\n\"\n             \"      \\\"label\\\": <label>                                      , (string, optional, default: '') Label to assign to the address (aka account name, for now), only allowed with internal=false\\n\"\n-            \"      \\\"timestamp\\\": 1454686740,                                (integer, optional, default now) Timestamp\\n\"\n             \"    }\\n\"\n             \"  ,...\\n\"\n             \"  ]\\n\"\n@@ -1015,6 +1033,12 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n     LOCK2(cs_main, pwalletMain->cs_wallet);\n     EnsureWalletIsUnlocked();\n \n+    // Verify all timestamps are present before importing any keys.\n+    const int64_t now = chainActive.Tip() ? chainActive.Tip()->GetBlockTime() : 0;\n+    for (const UniValue& data : requests.getValues()) {\n+        GetImportTimestamp(data, now);\n+    }\n+\n     bool fRunScan = false;\n     const int64_t minimumTimestamp = 1;\n     int64_t nLowestTimestamp = 0;\n@@ -1028,7 +1052,8 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n     UniValue response(UniValue::VARR);\n \n     BOOST_FOREACH (const UniValue& data, requests.getValues()) {\n-        const UniValue result = processImport(data);\n+        const int64_t timestamp = std::max(GetImportTimestamp(data, now), minimumTimestamp);\n+        const UniValue result = ProcessImport(data, timestamp);\n         response.push_back(result);\n \n         if (!fRescan) {\n@@ -1041,8 +1066,6 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n         }\n \n         // Get the lowest timestamp.\n-        const int64_t& timestamp = data.exists(\"timestamp\") && data[\"timestamp\"].get_int64() > minimumTimestamp ? data[\"timestamp\"].get_int64() : minimumTimestamp;\n-\n         if (timestamp < nLowestTimestamp) {\n             nLowestTimestamp = timestamp;\n         }"
      }
    ]
  },
  {
    "sha": "3cf991756cf357b651c6415e3d950e5aa9d355ab",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozY2Y5OTE3NTZjZjM1N2I2NTFjNjQxNWUzZDk1MGU1YWE5ZDM1NWFi",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-02-06T16:13:05Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-02-10T20:40:28Z"
      },
      "message": "Add test to check new importmulti \"now\" value\n\nEasiest way to test this was to expose the timestamp via the validateaddress\nRPC (which was already looking up and returning key metadata).",
      "tree": {
        "sha": "f38afae8fed8244798b0e85eb7d64e24a8a2ed01",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f38afae8fed8244798b0e85eb7d64e24a8a2ed01"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3cf991756cf357b651c6415e3d950e5aa9d355ab",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3cf991756cf357b651c6415e3d950e5aa9d355ab",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3cf991756cf357b651c6415e3d950e5aa9d355ab",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3cf991756cf357b651c6415e3d950e5aa9d355ab/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "442887f27fb5809e72862d4385eba86588bc97d0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/442887f27fb5809e72862d4385eba86588bc97d0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/442887f27fb5809e72862d4385eba86588bc97d0"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 13,
      "deletions": 4
    },
    "files": [
      {
        "sha": "b9874ccb855dd6a650e4dc4318a4afa8a29dc334",
        "filename": "qa/rpc-tests/importmulti.py",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3cf991756cf357b651c6415e3d950e5aa9d355ab/qa/rpc-tests/importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3cf991756cf357b651c6415e3d950e5aa9d355ab/qa/rpc-tests/importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/importmulti.py?ref=3cf991756cf357b651c6415e3d950e5aa9d355ab",
        "patch": "@@ -139,6 +139,7 @@ def run_test (self):\n         # Address + Private key + !watchonly\n         print(\"Should import an address with private key\")\n         address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        timestamp = self.nodes[1].getblock(self.nodes[1].getbestblockhash())['time']\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": {\n                 \"address\": address['address']\n@@ -150,6 +151,7 @@ def run_test (self):\n         address_assert = self.nodes[1].validateaddress(address['address'])\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], True)\n+        assert_equal(address_assert['timestamp'], timestamp)\n \n         # Address + Private key + watchonly\n         print(\"Should not import an address with private key and with watchonly\")"
      },
      {
        "sha": "25fad3c2e38e315efe901a9080f3499274e9179c",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 4,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3cf991756cf357b651c6415e3d950e5aa9d355ab/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3cf991756cf357b651c6415e3d950e5aa9d355ab/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=3cf991756cf357b651c6415e3d950e5aa9d355ab",
        "patch": "@@ -167,6 +167,7 @@ UniValue validateaddress(const JSONRPCRequest& request)\n             \"  \\\"pubkey\\\" : \\\"publickeyhex\\\",    (string) The hex value of the raw public key\\n\"\n             \"  \\\"iscompressed\\\" : true|false,  (boolean) If the address is compressed\\n\"\n             \"  \\\"account\\\" : \\\"account\\\"         (string) DEPRECATED. The account associated with the address, \\\"\\\" is the default account\\n\"\n+            \"  \\\"timestamp\\\" : timestamp,        (number, optional) The creation time of the key if available in seconds since epoch (Jan 1 1970 GMT)\\n\"\n             \"  \\\"hdkeypath\\\" : \\\"keypath\\\"       (string, optional) The HD keypath if the key is HD and available\\n\"\n             \"  \\\"hdmasterkeyid\\\" : \\\"<hash160>\\\" (string, optional) The Hash160 of the HD master pubkey\\n\"\n             \"}\\n\"\n@@ -204,10 +205,16 @@ UniValue validateaddress(const JSONRPCRequest& request)\n         if (pwalletMain && pwalletMain->mapAddressBook.count(dest))\n             ret.push_back(Pair(\"account\", pwalletMain->mapAddressBook[dest].name));\n         CKeyID keyID;\n-        if (pwalletMain && address.GetKeyID(keyID) && pwalletMain->mapKeyMetadata.count(keyID) && !pwalletMain->mapKeyMetadata[keyID].hdKeypath.empty())\n-        {\n-            ret.push_back(Pair(\"hdkeypath\", pwalletMain->mapKeyMetadata[keyID].hdKeypath));\n-            ret.push_back(Pair(\"hdmasterkeyid\", pwalletMain->mapKeyMetadata[keyID].hdMasterKeyID.GetHex()));\n+        if (pwalletMain) {\n+            const auto& meta = pwalletMain->mapKeyMetadata;\n+            auto it = address.GetKeyID(keyID) ? meta.find(keyID) : meta.end();\n+            if (it != meta.end()) {\n+                ret.push_back(Pair(\"timestamp\", it->second.nCreateTime));\n+                if (!it->second.hdKeypath.empty()) {\n+                    ret.push_back(Pair(\"hdkeypath\", it->second.hdKeypath));\n+                    ret.push_back(Pair(\"hdmasterkeyid\", it->second.hdMasterKeyID.GetHex()));\n+                }\n+            }\n         }\n #endif\n     }"
      }
    ]
  },
  {
    "sha": "266a8114cbe2a87a6c84d7690a7716a18d782c56",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNjZhODExNGNiZTJhODdhNmM4NGQ3NjkwYTc3MTZhMThkNzgyYzU2",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-02-07T16:08:08Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-02-10T20:40:28Z"
      },
      "message": "Use MTP for importmulti \"now\" timestamps",
      "tree": {
        "sha": "772a6f3de292c0c246d151ab23babce021f21748",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/772a6f3de292c0c246d151ab23babce021f21748"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/266a8114cbe2a87a6c84d7690a7716a18d782c56",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/266a8114cbe2a87a6c84d7690a7716a18d782c56",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/266a8114cbe2a87a6c84d7690a7716a18d782c56",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/266a8114cbe2a87a6c84d7690a7716a18d782c56/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3cf991756cf357b651c6415e3d950e5aa9d355ab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3cf991756cf357b651c6415e3d950e5aa9d355ab",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3cf991756cf357b651c6415e3d950e5aa9d355ab"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "52e40d6c1cc3d07fe4c17649cf6f6d8741299d86",
        "filename": "qa/rpc-tests/importmulti.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/266a8114cbe2a87a6c84d7690a7716a18d782c56/qa/rpc-tests/importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/266a8114cbe2a87a6c84d7690a7716a18d782c56/qa/rpc-tests/importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/importmulti.py?ref=266a8114cbe2a87a6c84d7690a7716a18d782c56",
        "patch": "@@ -139,7 +139,7 @@ def run_test (self):\n         # Address + Private key + !watchonly\n         print(\"Should import an address with private key\")\n         address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n-        timestamp = self.nodes[1].getblock(self.nodes[1].getbestblockhash())['time']\n+        timestamp = self.nodes[1].getblock(self.nodes[1].getbestblockhash())['mediantime']\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": {\n                 \"address\": address['address']"
      },
      {
        "sha": "9310a320c76c4737eaabcadcde7eccc3c43f9033",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/266a8114cbe2a87a6c84d7690a7716a18d782c56/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/266a8114cbe2a87a6c84d7690a7716a18d782c56/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=266a8114cbe2a87a6c84d7690a7716a18d782c56",
        "patch": "@@ -1034,7 +1034,7 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n     EnsureWalletIsUnlocked();\n \n     // Verify all timestamps are present before importing any keys.\n-    const int64_t now = chainActive.Tip() ? chainActive.Tip()->GetBlockTime() : 0;\n+    const int64_t now = chainActive.Tip() ? chainActive.Tip()->GetMedianTimePast() : 0;\n     for (const UniValue& data : requests.getValues()) {\n         GetImportTimestamp(data, now);\n     }"
      }
    ]
  },
  {
    "sha": "a58370e6a2d4dce50eefbcab5bde9f14facef8fc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNTgzNzBlNmEyZDRkY2U1MGVlZmJjYWI1YmRlOWYxNGZhY2VmOGZj",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2016-11-08T21:28:20Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-02-10T20:49:00Z"
      },
      "message": "Dedup nTimeFirstKey update logic\n\nAlso make nTimeFirstKey member variable private.\n\nThis is just a cleanup change, it doesn't change behavior in any significant\nway.",
      "tree": {
        "sha": "b5c4fd59bba41e4383f1536d908f0fcedbe176f8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b5c4fd59bba41e4383f1536d908f0fcedbe176f8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a58370e6a2d4dce50eefbcab5bde9f14facef8fc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a58370e6a2d4dce50eefbcab5bde9f14facef8fc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a58370e6a2d4dce50eefbcab5bde9f14facef8fc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a58370e6a2d4dce50eefbcab5bde9f14facef8fc/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "266a8114cbe2a87a6c84d7690a7716a18d782c56",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/266a8114cbe2a87a6c84d7690a7716a18d782c56",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/266a8114cbe2a87a6c84d7690a7716a18d782c56"
      }
    ],
    "stats": {
      "total": 47,
      "additions": 24,
      "deletions": 23
    },
    "files": [
      {
        "sha": "f358d720cd930be66c33a03804ae359eea566785",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 9,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a58370e6a2d4dce50eefbcab5bde9f14facef8fc/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a58370e6a2d4dce50eefbcab5bde9f14facef8fc/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=a58370e6a2d4dce50eefbcab5bde9f14facef8fc",
        "patch": "@@ -143,7 +143,7 @@ UniValue importprivkey(const JSONRPCRequest& request)\n             throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding key to wallet\");\n \n         // whenever a key is imported, we need to scan the whole chain\n-        pwalletMain->nTimeFirstKey = 1; // 0 would be considered 'no value'\n+        pwalletMain->UpdateTimeFirstKey(1);\n \n         if (fRescan) {\n             pwalletMain->ScanForWalletTransactions(chainActive.Genesis(), true);\n@@ -500,8 +500,7 @@ UniValue importwallet(const JSONRPCRequest& request)\n     while (pindex && pindex->pprev && pindex->GetBlockTime() > nTimeBegin - 7200)\n         pindex = pindex->pprev;\n \n-    if (!pwalletMain->nTimeFirstKey || nTimeBegin < pwalletMain->nTimeFirstKey)\n-        pwalletMain->nTimeFirstKey = nTimeBegin;\n+    pwalletMain->UpdateTimeFirstKey(nTimeBegin);\n \n     LogPrintf(\"Rescanning last %i blocks\\n\", chainActive.Height() - pindex->nHeight + 1);\n     pwalletMain->ScanForWalletTransactions(pindex);\n@@ -782,9 +781,7 @@ UniValue ProcessImport(const UniValue& data, const int64_t timestamp)\n                         throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding key to wallet\");\n                     }\n \n-                    if (timestamp < pwalletMain->nTimeFirstKey) {\n-                        pwalletMain->nTimeFirstKey = timestamp;\n-                    }\n+                    pwalletMain->UpdateTimeFirstKey(timestamp);\n                 }\n             }\n \n@@ -912,9 +909,7 @@ UniValue ProcessImport(const UniValue& data, const int64_t timestamp)\n                     throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding key to wallet\");\n                 }\n \n-                if (timestamp < pwalletMain->nTimeFirstKey) {\n-                    pwalletMain->nTimeFirstKey = timestamp;\n-                }\n+                pwalletMain->UpdateTimeFirstKey(timestamp);\n \n                 success = true;\n             }"
      },
      {
        "sha": "192af22cb83968dfdbaa2748c846e829497bf5c6",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 5,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a58370e6a2d4dce50eefbcab5bde9f14facef8fc/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a58370e6a2d4dce50eefbcab5bde9f14facef8fc/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=a58370e6a2d4dce50eefbcab5bde9f14facef8fc",
        "patch": "@@ -113,8 +113,7 @@ CPubKey CWallet::GenerateNewKey()\n     assert(secret.VerifyPubKey(pubkey));\n \n     mapKeyMetadata[pubkey.GetID()] = metadata;\n-    if (!nTimeFirstKey || nCreationTime < nTimeFirstKey)\n-        nTimeFirstKey = nCreationTime;\n+    UpdateTimeFirstKey(nCreationTime);\n \n     if (!AddKeyPubKey(secret, pubkey))\n         throw std::runtime_error(std::string(__func__) + \": AddKey failed\");\n@@ -210,9 +209,7 @@ bool CWallet::AddCryptedKey(const CPubKey &vchPubKey,\n bool CWallet::LoadKeyMetadata(const CPubKey &pubkey, const CKeyMetadata &meta)\n {\n     AssertLockHeld(cs_wallet); // mapKeyMetadata\n-    if (meta.nCreateTime && (!nTimeFirstKey || meta.nCreateTime < nTimeFirstKey))\n-        nTimeFirstKey = meta.nCreateTime;\n-\n+    UpdateTimeFirstKey(meta.nCreateTime);\n     mapKeyMetadata[pubkey.GetID()] = meta;\n     return true;\n }\n@@ -222,6 +219,18 @@ bool CWallet::LoadCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigne\n     return CCryptoKeyStore::AddCryptedKey(vchPubKey, vchCryptedSecret);\n }\n \n+void CWallet::UpdateTimeFirstKey(int64_t nCreateTime)\n+{\n+    AssertLockHeld(cs_wallet);\n+    if (nCreateTime <= 1) {\n+        // Cannot determine birthday information, so set the wallet birthday to\n+        // the beginning of time.\n+        nTimeFirstKey = 1;\n+    } else if (!nTimeFirstKey || nCreateTime < nTimeFirstKey) {\n+        nTimeFirstKey = nCreateTime;\n+    }\n+}\n+\n bool CWallet::AddCScript(const CScript& redeemScript)\n {\n     if (!CCryptoKeyStore::AddCScript(redeemScript))"
      },
      {
        "sha": "8d3ee9dddcf6e1732b21c8fcaeec2204ad9ab5b9",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a58370e6a2d4dce50eefbcab5bde9f14facef8fc/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a58370e6a2d4dce50eefbcab5bde9f14facef8fc/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=a58370e6a2d4dce50eefbcab5bde9f14facef8fc",
        "patch": "@@ -611,6 +611,9 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     bool fFileBacked;\n \n     std::set<int64_t> setKeyPool;\n+\n+    int64_t nTimeFirstKey;\n+\n public:\n     /*\n      * Main wallet lock.\n@@ -688,8 +691,6 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n \n     std::set<COutPoint> setLockedCoins;\n \n-    int64_t nTimeFirstKey;\n-\n     const CWalletTx* GetWalletTx(const uint256& hash) const;\n \n     //! check whether we are allowed to upgrade (or already support) to the named feature\n@@ -730,6 +731,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     bool LoadKeyMetadata(const CPubKey &pubkey, const CKeyMetadata &metadata);\n \n     bool LoadMinVersion(int nVersion) { AssertLockHeld(cs_wallet); nWalletVersion = nVersion; nWalletMaxVersion = std::max(nWalletMaxVersion, nVersion); return true; }\n+    void UpdateTimeFirstKey(int64_t nCreateTime);\n \n     //! Adds an encrypted key to the store, and saves it to disk.\n     bool AddCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret);"
      },
      {
        "sha": "15e1e4c45f6e080a5e5662350d038f91f81649cf",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 7,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a58370e6a2d4dce50eefbcab5bde9f14facef8fc/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a58370e6a2d4dce50eefbcab5bde9f14facef8fc/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=a58370e6a2d4dce50eefbcab5bde9f14facef8fc",
        "patch": "@@ -357,7 +357,7 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n \n             // Watch-only addresses have no birthday information for now,\n             // so set the wallet birthday to the beginning of time.\n-            pwallet->nTimeFirstKey = 1;\n+            pwallet->UpdateTimeFirstKey(1);\n         }\n         else if (strType == \"key\" || strType == \"wkey\")\n         {\n@@ -467,11 +467,6 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             wss.nKeyMeta++;\n \n             pwallet->LoadKeyMetadata(vchPubKey, keyMeta);\n-\n-            // find earliest key creation time, as wallet birthday\n-            if (!pwallet->nTimeFirstKey ||\n-                (keyMeta.nCreateTime < pwallet->nTimeFirstKey))\n-                pwallet->nTimeFirstKey = keyMeta.nCreateTime;\n         }\n         else if (strType == \"defaultkey\")\n         {\n@@ -626,7 +621,7 @@ DBErrors CWalletDB::LoadWallet(CWallet* pwallet)\n \n     // nTimeFirstKey is only reliable if all keys have metadata\n     if ((wss.nKeys + wss.nCKeys) != wss.nKeyMeta)\n-        pwallet->nTimeFirstKey = 1; // 0 would be considered 'no value'\n+        pwallet->UpdateTimeFirstKey(1);\n \n     BOOST_FOREACH(uint256 hash, wss.vWalletUpgrade)\n         WriteTx(pwallet->mapWallet[hash]);"
      }
    ]
  },
  {
    "sha": "a80f98b1c7a49432dc53d18d0fb51ac334de96be",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphODBmOThiMWM3YTQ5NDMyZGM1M2QxOGQwZmI1MWFjMzM0ZGU5NmJl",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2016-11-08T21:55:02Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-02-10T21:11:19Z"
      },
      "message": "Use importmulti timestamp when importing watch only keys\n\nWhen importing a watch-only address over importmulti with a specific timestamp,\nthe wallet's nTimeFirstKey is currently set to 1. After this change, the\nprovided timestamp will be used and stored as metadata associated with\nwatch-only key. This can improve wallet performance because it can avoid the\nneed to scan the entire blockchain for watch only addresses when timestamps are\nprovided.\n\nAlso adds timestamp to validateaddress return value (needed for tests).\n\nFixes #9034.",
      "tree": {
        "sha": "ee85a02c68e6157baabd8d7c06b0af3e96b04ec9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ee85a02c68e6157baabd8d7c06b0af3e96b04ec9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a80f98b1c7a49432dc53d18d0fb51ac334de96be",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a80f98b1c7a49432dc53d18d0fb51ac334de96be",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a80f98b1c7a49432dc53d18d0fb51ac334de96be",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a80f98b1c7a49432dc53d18d0fb51ac334de96be/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a58370e6a2d4dce50eefbcab5bde9f14facef8fc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a58370e6a2d4dce50eefbcab5bde9f14facef8fc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a58370e6a2d4dce50eefbcab5bde9f14facef8fc"
      }
    ],
    "stats": {
      "total": 142,
      "additions": 107,
      "deletions": 35
    },
    "files": [
      {
        "sha": "02a932e737f06aa1be7cec27ba98f246299ce578",
        "filename": "qa/rpc-tests/importmulti.py",
        "status": "modified",
        "additions": 32,
        "deletions": 1,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a80f98b1c7a49432dc53d18d0fb51ac334de96be/qa/rpc-tests/importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a80f98b1c7a49432dc53d18d0fb51ac334de96be/qa/rpc-tests/importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/importmulti.py?ref=a80f98b1c7a49432dc53d18d0fb51ac334de96be",
        "patch": "@@ -20,6 +20,7 @@ def run_test (self):\n         print (\"Mining blocks...\")\n         self.nodes[0].generate(1)\n         self.nodes[1].generate(1)\n+        timestamp = self.nodes[1].getblock(self.nodes[1].getbestblockhash())['mediantime']\n \n         # keyword definition\n         PRIV_KEY = 'privkey'\n@@ -59,6 +60,9 @@ def run_test (self):\n         address_assert = self.nodes[1].validateaddress(address['address'])\n         assert_equal(address_assert['iswatchonly'], True)\n         assert_equal(address_assert['ismine'], False)\n+        assert_equal(address_assert['timestamp'], timestamp)\n+        watchonly_address = address['address']\n+        watchonly_timestamp = timestamp\n \n \n         # ScriptPubKey + internal\n@@ -73,6 +77,7 @@ def run_test (self):\n         address_assert = self.nodes[1].validateaddress(address['address'])\n         assert_equal(address_assert['iswatchonly'], True)\n         assert_equal(address_assert['ismine'], False)\n+        assert_equal(address_assert['timestamp'], timestamp)\n \n         # ScriptPubKey + !internal\n         print(\"Should not import a scriptPubKey without internal flag\")\n@@ -87,6 +92,7 @@ def run_test (self):\n         address_assert = self.nodes[1].validateaddress(address['address'])\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], False)\n+        assert_equal('timestamp' in address_assert, False)\n \n \n         # Address + Public key + !Internal\n@@ -103,6 +109,7 @@ def run_test (self):\n         address_assert = self.nodes[1].validateaddress(address['address'])\n         assert_equal(address_assert['iswatchonly'], True)\n         assert_equal(address_assert['ismine'], False)\n+        assert_equal(address_assert['timestamp'], timestamp)\n \n \n         # ScriptPubKey + Public key + internal\n@@ -119,6 +126,7 @@ def run_test (self):\n         address_assert = self.nodes[1].validateaddress(address['address'])\n         assert_equal(address_assert['iswatchonly'], True)\n         assert_equal(address_assert['ismine'], False)\n+        assert_equal(address_assert['timestamp'], timestamp)\n \n         # ScriptPubKey + Public key + !internal\n         print(\"Should not import a scriptPubKey without internal and with public key\")\n@@ -135,11 +143,11 @@ def run_test (self):\n         address_assert = self.nodes[1].validateaddress(address['address'])\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], False)\n+        assert_equal('timestamp' in address_assert, False)\n \n         # Address + Private key + !watchonly\n         print(\"Should import an address with private key\")\n         address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n-        timestamp = self.nodes[1].getblock(self.nodes[1].getbestblockhash())['mediantime']\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": {\n                 \"address\": address['address']\n@@ -170,6 +178,7 @@ def run_test (self):\n         address_assert = self.nodes[1].validateaddress(address['address'])\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], False)\n+        assert_equal('timestamp' in address_assert, False)\n \n         # ScriptPubKey + Private key + internal\n         print(\"Should import a scriptPubKey with internal and with private key\")\n@@ -184,6 +193,7 @@ def run_test (self):\n         address_assert = self.nodes[1].validateaddress(address['address'])\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], True)\n+        assert_equal(address_assert['timestamp'], timestamp)\n \n         # ScriptPubKey + Private key + !internal\n         print(\"Should not import a scriptPubKey without internal and with private key\")\n@@ -199,6 +209,7 @@ def run_test (self):\n         address_assert = self.nodes[1].validateaddress(address['address'])\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], False)\n+        assert_equal('timestamp' in address_assert, False)\n \n \n         # P2SH address\n@@ -209,6 +220,7 @@ def run_test (self):\n         self.nodes[1].generate(100)\n         transactionid = self.nodes[1].sendtoaddress(multi_sig_script['address'], 10.00)\n         self.nodes[1].generate(1)\n+        timestamp = self.nodes[1].getblock(self.nodes[1].getbestblockhash())['mediantime']\n         transaction = self.nodes[1].gettransaction(transactionid)\n \n         print(\"Should import a p2sh\")\n@@ -222,6 +234,7 @@ def run_test (self):\n         address_assert = self.nodes[1].validateaddress(multi_sig_script['address'])\n         assert_equal(address_assert['isscript'], True)\n         assert_equal(address_assert['iswatchonly'], True)\n+        assert_equal(address_assert['timestamp'], timestamp)\n         p2shunspent = self.nodes[1].listunspent(0,999999, [multi_sig_script['address']])[0]\n         assert_equal(p2shunspent['spendable'], False)\n         assert_equal(p2shunspent['solvable'], False)\n@@ -235,6 +248,7 @@ def run_test (self):\n         self.nodes[1].generate(100)\n         transactionid = self.nodes[1].sendtoaddress(multi_sig_script['address'], 10.00)\n         self.nodes[1].generate(1)\n+        timestamp = self.nodes[1].getblock(self.nodes[1].getbestblockhash())['mediantime']\n         transaction = self.nodes[1].gettransaction(transactionid)\n \n         print(\"Should import a p2sh with respective redeem script\")\n@@ -246,6 +260,8 @@ def run_test (self):\n             \"redeemscript\": multi_sig_script['redeemScript']\n         }])\n         assert_equal(result[0]['success'], True)\n+        address_assert = self.nodes[1].validateaddress(multi_sig_script['address'])\n+        assert_equal(address_assert['timestamp'], timestamp)\n \n         p2shunspent = self.nodes[1].listunspent(0,999999, [multi_sig_script['address']])[0]\n         assert_equal(p2shunspent['spendable'], False)\n@@ -260,6 +276,7 @@ def run_test (self):\n         self.nodes[1].generate(100)\n         transactionid = self.nodes[1].sendtoaddress(multi_sig_script['address'], 10.00)\n         self.nodes[1].generate(1)\n+        timestamp = self.nodes[1].getblock(self.nodes[1].getbestblockhash())['mediantime']\n         transaction = self.nodes[1].gettransaction(transactionid)\n \n         print(\"Should import a p2sh with respective redeem script and private keys\")\n@@ -272,6 +289,8 @@ def run_test (self):\n             \"keys\": [ self.nodes[0].dumpprivkey(sig_address_1['address']), self.nodes[0].dumpprivkey(sig_address_2['address'])]\n         }])\n         assert_equal(result[0]['success'], True)\n+        address_assert = self.nodes[1].validateaddress(multi_sig_script['address'])\n+        assert_equal(address_assert['timestamp'], timestamp)\n \n         p2shunspent = self.nodes[1].listunspent(0,999999, [multi_sig_script['address']])[0]\n         assert_equal(p2shunspent['spendable'], False)\n@@ -319,6 +338,7 @@ def run_test (self):\n         address_assert = self.nodes[1].validateaddress(address['address'])\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], False)\n+        assert_equal('timestamp' in address_assert, False)\n \n \n         # ScriptPubKey + Public key + internal + Wrong pubkey\n@@ -338,6 +358,7 @@ def run_test (self):\n         address_assert = self.nodes[1].validateaddress(address['address'])\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], False)\n+        assert_equal('timestamp' in address_assert, False)\n \n \n         # Address + Private key + !watchonly + Wrong private key\n@@ -357,6 +378,7 @@ def run_test (self):\n         address_assert = self.nodes[1].validateaddress(address['address'])\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], False)\n+        assert_equal('timestamp' in address_assert, False)\n \n \n         # ScriptPubKey + Private key + internal + Wrong private key\n@@ -375,6 +397,15 @@ def run_test (self):\n         address_assert = self.nodes[1].validateaddress(address['address'])\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], False)\n+        assert_equal('timestamp' in address_assert, False)\n+\n+        # restart nodes to check for proper serialization/deserialization of watch only address\n+        stop_nodes(self.nodes)\n+        self.nodes = start_nodes(2, self.options.tmpdir)\n+        address_assert = self.nodes[1].validateaddress(watchonly_address)\n+        assert_equal(address_assert['iswatchonly'], True)\n+        assert_equal(address_assert['ismine'], False)\n+        assert_equal(address_assert['timestamp'], watchonly_timestamp);\n \n         # Bad or missing timestamps\n         print(\"Should throw on invalid or missing timestamp values\")"
      },
      {
        "sha": "6fd50127bd5b3bb915e9e784d8d201227ddcaa67",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a80f98b1c7a49432dc53d18d0fb51ac334de96be/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a80f98b1c7a49432dc53d18d0fb51ac334de96be/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=a80f98b1c7a49432dc53d18d0fb51ac334de96be",
        "patch": "@@ -208,6 +208,9 @@ UniValue validateaddress(const JSONRPCRequest& request)\n         if (pwalletMain) {\n             const auto& meta = pwalletMain->mapKeyMetadata;\n             auto it = address.GetKeyID(keyID) ? meta.find(keyID) : meta.end();\n+            if (it == meta.end()) {\n+                it = meta.find(CScriptID(scriptPubKey));\n+            }\n             if (it != meta.end()) {\n                 ret.push_back(Pair(\"timestamp\", it->second.nCreateTime));\n                 if (!it->second.hdKeypath.empty()) {"
      },
      {
        "sha": "0a3225937e1b2be773ee7aafedfdb6c22afc1e20",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 9,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a80f98b1c7a49432dc53d18d0fb51ac334de96be/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a80f98b1c7a49432dc53d18d0fb51ac334de96be/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=a80f98b1c7a49432dc53d18d0fb51ac334de96be",
        "patch": "@@ -161,7 +161,7 @@ void ImportScript(const CScript& script, const string& strLabel, bool isRedeemSc\n \n     pwalletMain->MarkDirty();\n \n-    if (!pwalletMain->HaveWatchOnly(script) && !pwalletMain->AddWatchOnly(script))\n+    if (!pwalletMain->HaveWatchOnly(script) && !pwalletMain->AddWatchOnly(script, 0 /* nCreateTime */))\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n \n     if (isRedeemScript) {\n@@ -575,15 +575,17 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n     if (!file.is_open())\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot open wallet dump file\");\n \n-    std::map<CKeyID, int64_t> mapKeyBirth;\n+    std::map<CTxDestination, int64_t> mapKeyBirth;\n     std::set<CKeyID> setKeyPool;\n     pwalletMain->GetKeyBirthTimes(mapKeyBirth);\n     pwalletMain->GetAllReserveKeys(setKeyPool);\n \n     // sort time/key pairs\n     std::vector<std::pair<int64_t, CKeyID> > vKeyBirth;\n-    for (std::map<CKeyID, int64_t>::const_iterator it = mapKeyBirth.begin(); it != mapKeyBirth.end(); it++) {\n-        vKeyBirth.push_back(std::make_pair(it->second, it->first));\n+    for (const auto& entry : mapKeyBirth) {\n+        if (const CKeyID* keyID = boost::get<CKeyID>(&entry.first)) { // set and test\n+            vKeyBirth.push_back(std::make_pair(entry.second, *keyID));\n+        }\n     }\n     mapKeyBirth.clear();\n     std::sort(vKeyBirth.begin(), vKeyBirth.end());\n@@ -720,7 +722,7 @@ UniValue ProcessImport(const UniValue& data, const int64_t timestamp)\n \n             pwalletMain->MarkDirty();\n \n-            if (!pwalletMain->HaveWatchOnly(redeemScript) && !pwalletMain->AddWatchOnly(redeemScript)) {\n+            if (!pwalletMain->HaveWatchOnly(redeemScript) && !pwalletMain->AddWatchOnly(redeemScript, timestamp)) {\n                 throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n             }\n \n@@ -737,7 +739,7 @@ UniValue ProcessImport(const UniValue& data, const int64_t timestamp)\n \n             pwalletMain->MarkDirty();\n \n-            if (!pwalletMain->HaveWatchOnly(redeemDestination) && !pwalletMain->AddWatchOnly(redeemDestination)) {\n+            if (!pwalletMain->HaveWatchOnly(redeemDestination) && !pwalletMain->AddWatchOnly(redeemDestination, timestamp)) {\n                 throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n             }\n \n@@ -830,7 +832,7 @@ UniValue ProcessImport(const UniValue& data, const int64_t timestamp)\n \n                 pwalletMain->MarkDirty();\n \n-                if (!pwalletMain->HaveWatchOnly(pubKeyScript) && !pwalletMain->AddWatchOnly(pubKeyScript)) {\n+                if (!pwalletMain->HaveWatchOnly(pubKeyScript) && !pwalletMain->AddWatchOnly(pubKeyScript, timestamp)) {\n                     throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n                 }\n \n@@ -848,7 +850,7 @@ UniValue ProcessImport(const UniValue& data, const int64_t timestamp)\n \n                 pwalletMain->MarkDirty();\n \n-                if (!pwalletMain->HaveWatchOnly(scriptRawPubKey) && !pwalletMain->AddWatchOnly(scriptRawPubKey)) {\n+                if (!pwalletMain->HaveWatchOnly(scriptRawPubKey) && !pwalletMain->AddWatchOnly(scriptRawPubKey, timestamp)) {\n                     throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n                 }\n \n@@ -922,7 +924,7 @@ UniValue ProcessImport(const UniValue& data, const int64_t timestamp)\n \n                 pwalletMain->MarkDirty();\n \n-                if (!pwalletMain->HaveWatchOnly(script) && !pwalletMain->AddWatchOnly(script)) {\n+                if (!pwalletMain->HaveWatchOnly(script) && !pwalletMain->AddWatchOnly(script, timestamp)) {\n                     throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n                 }\n "
      },
      {
        "sha": "f8f5a9306dc1c631301489adac23f3e8e771d024",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 9,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a80f98b1c7a49432dc53d18d0fb51ac334de96be/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a80f98b1c7a49432dc53d18d0fb51ac334de96be/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=a80f98b1c7a49432dc53d18d0fb51ac334de96be",
        "patch": "@@ -206,11 +206,11 @@ bool CWallet::AddCryptedKey(const CPubKey &vchPubKey,\n     return false;\n }\n \n-bool CWallet::LoadKeyMetadata(const CPubKey &pubkey, const CKeyMetadata &meta)\n+bool CWallet::LoadKeyMetadata(const CTxDestination& keyID, const CKeyMetadata &meta)\n {\n     AssertLockHeld(cs_wallet); // mapKeyMetadata\n     UpdateTimeFirstKey(meta.nCreateTime);\n-    mapKeyMetadata[pubkey.GetID()] = meta;\n+    mapKeyMetadata[keyID] = meta;\n     return true;\n }\n \n@@ -256,15 +256,22 @@ bool CWallet::LoadCScript(const CScript& redeemScript)\n     return CCryptoKeyStore::AddCScript(redeemScript);\n }\n \n-bool CWallet::AddWatchOnly(const CScript &dest)\n+bool CWallet::AddWatchOnly(const CScript& dest)\n {\n     if (!CCryptoKeyStore::AddWatchOnly(dest))\n         return false;\n-    nTimeFirstKey = 1; // No birthday information for watch-only keys.\n+    const CKeyMetadata& meta = mapKeyMetadata[CScriptID(dest)];\n+    UpdateTimeFirstKey(meta.nCreateTime);\n     NotifyWatchonlyChanged(true);\n     if (!fFileBacked)\n         return true;\n-    return CWalletDB(strWalletFile).WriteWatchOnly(dest);\n+    return CWalletDB(strWalletFile).WriteWatchOnly(dest, meta);\n+}\n+\n+bool CWallet::AddWatchOnly(const CScript& dest, int64_t nCreateTime)\n+{\n+    mapKeyMetadata[CScriptID(dest)].nCreateTime = nCreateTime;\n+    return AddWatchOnly(dest);\n }\n \n bool CWallet::RemoveWatchOnly(const CScript &dest)\n@@ -3425,14 +3432,16 @@ class CAffectedKeysVisitor : public boost::static_visitor<void> {\n     void operator()(const CNoDestination &none) {}\n };\n \n-void CWallet::GetKeyBirthTimes(std::map<CKeyID, int64_t> &mapKeyBirth) const {\n+void CWallet::GetKeyBirthTimes(std::map<CTxDestination, int64_t> &mapKeyBirth) const {\n     AssertLockHeld(cs_wallet); // mapKeyMetadata\n     mapKeyBirth.clear();\n \n     // get birth times for keys with metadata\n-    for (std::map<CKeyID, CKeyMetadata>::const_iterator it = mapKeyMetadata.begin(); it != mapKeyMetadata.end(); it++)\n-        if (it->second.nCreateTime)\n-            mapKeyBirth[it->first] = it->second.nCreateTime;\n+    for (const auto& entry : mapKeyMetadata) {\n+        if (entry.second.nCreateTime) {\n+            mapKeyBirth[entry.first] = entry.second.nCreateTime;\n+        }\n+    }\n \n     // map in which we'll infer heights of other keys\n     CBlockIndex *pindexMax = chainActive[std::max(0, chainActive.Height() - 144)]; // the tip can be reorganized; use a 144-block safety margin"
      },
      {
        "sha": "990c3bdf4196a48224dbc3e7736a5feecbaa8ffc",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 17,
        "deletions": 4,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a80f98b1c7a49432dc53d18d0fb51ac334de96be/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a80f98b1c7a49432dc53d18d0fb51ac334de96be/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=a80f98b1c7a49432dc53d18d0fb51ac334de96be",
        "patch": "@@ -614,6 +614,17 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n \n     int64_t nTimeFirstKey;\n \n+    /**\n+     * Private version of AddWatchOnly method which does not accept a\n+     * timestamp, and which will reset the wallet's nTimeFirstKey value to 1 if\n+     * the watch key did not previously have a timestamp associated with it.\n+     * Because this is an inherited virtual method, it is accessible despite\n+     * being marked private, but it is marked private anyway to encourage use\n+     * of the other AddWatchOnly which accepts a timestamp and sets\n+     * nTimeFirstKey more intelligently for more efficient rescans.\n+     */\n+    bool AddWatchOnly(const CScript& dest) override;\n+\n public:\n     /*\n      * Main wallet lock.\n@@ -638,7 +649,9 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n             mapKeyMetadata[keyid] = CKeyMetadata(keypool.nTime);\n     }\n \n-    std::map<CKeyID, CKeyMetadata> mapKeyMetadata;\n+    // Map from Key ID (for regular keys) or Script ID (for watch-only keys) to\n+    // key metadata.\n+    std::map<CTxDestination, CKeyMetadata> mapKeyMetadata;\n \n     typedef std::map<unsigned int, CMasterKey> MasterKeyMap;\n     MasterKeyMap mapMasterKeys;\n@@ -728,7 +741,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     //! Adds a key to the store, without saving it to disk (used by LoadWallet)\n     bool LoadKey(const CKey& key, const CPubKey &pubkey) { return CCryptoKeyStore::AddKeyPubKey(key, pubkey); }\n     //! Load metadata (used by LoadWallet)\n-    bool LoadKeyMetadata(const CPubKey &pubkey, const CKeyMetadata &metadata);\n+    bool LoadKeyMetadata(const CTxDestination& pubKey, const CKeyMetadata &metadata);\n \n     bool LoadMinVersion(int nVersion) { AssertLockHeld(cs_wallet); nWalletVersion = nVersion; nWalletMaxVersion = std::max(nWalletMaxVersion, nVersion); return true; }\n     void UpdateTimeFirstKey(int64_t nCreateTime);\n@@ -750,7 +763,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     bool GetDestData(const CTxDestination &dest, const std::string &key, std::string *value) const;\n \n     //! Adds a watch-only address to the store, and saves it to disk.\n-    bool AddWatchOnly(const CScript &dest);\n+    bool AddWatchOnly(const CScript& dest, int64_t nCreateTime);\n     bool RemoveWatchOnly(const CScript &dest);\n     //! Adds a watch-only address to the store, without saving it to disk (used by LoadWallet)\n     bool LoadWatchOnly(const CScript &dest);\n@@ -759,7 +772,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     bool ChangeWalletPassphrase(const SecureString& strOldWalletPassphrase, const SecureString& strNewWalletPassphrase);\n     bool EncryptWallet(const SecureString& strWalletPassphrase);\n \n-    void GetKeyBirthTimes(std::map<CKeyID, int64_t> &mapKeyBirth) const;\n+    void GetKeyBirthTimes(std::map<CTxDestination, int64_t> &mapKeyBirth) const;\n \n     /** \n      * Increment the next transaction order id"
      },
      {
        "sha": "106a59d5623046e21fa3c9513b50044a9a474a18",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 11,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a80f98b1c7a49432dc53d18d0fb51ac334de96be/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a80f98b1c7a49432dc53d18d0fb51ac334de96be/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=a80f98b1c7a49432dc53d18d0fb51ac334de96be",
        "patch": "@@ -120,15 +120,19 @@ bool CWalletDB::WriteCScript(const uint160& hash, const CScript& redeemScript)\n     return Write(std::make_pair(std::string(\"cscript\"), hash), *(const CScriptBase*)(&redeemScript), false);\n }\n \n-bool CWalletDB::WriteWatchOnly(const CScript &dest)\n+bool CWalletDB::WriteWatchOnly(const CScript &dest, const CKeyMetadata& keyMeta)\n {\n     nWalletDBUpdateCounter++;\n+    if (!Write(std::make_pair(std::string(\"watchmeta\"), *(const CScriptBase*)(&dest)), keyMeta))\n+        return false;\n     return Write(std::make_pair(std::string(\"watchs\"), *(const CScriptBase*)(&dest)), '1');\n }\n \n bool CWalletDB::EraseWatchOnly(const CScript &dest)\n {\n     nWalletDBUpdateCounter++;\n+    if (!Erase(std::make_pair(std::string(\"watchmeta\"), *(const CScriptBase*)(&dest))))\n+        return false;\n     return Erase(std::make_pair(std::string(\"watchs\"), *(const CScriptBase*)(&dest)));\n }\n \n@@ -259,14 +263,15 @@ class CWalletScanState {\n public:\n     unsigned int nKeys;\n     unsigned int nCKeys;\n+    unsigned int nWatchKeys;\n     unsigned int nKeyMeta;\n     bool fIsEncrypted;\n     bool fAnyUnordered;\n     int nFileVersion;\n     vector<uint256> vWalletUpgrade;\n \n     CWalletScanState() {\n-        nKeys = nCKeys = nKeyMeta = 0;\n+        nKeys = nCKeys = nWatchKeys = nKeyMeta = 0;\n         fIsEncrypted = false;\n         fAnyUnordered = false;\n         nFileVersion = 0;\n@@ -348,16 +353,13 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n         }\n         else if (strType == \"watchs\")\n         {\n+            wss.nWatchKeys++;\n             CScript script;\n             ssKey >> *(CScriptBase*)(&script);\n             char fYes;\n             ssValue >> fYes;\n             if (fYes == '1')\n                 pwallet->LoadWatchOnly(script);\n-\n-            // Watch-only addresses have no birthday information for now,\n-            // so set the wallet birthday to the beginning of time.\n-            pwallet->UpdateTimeFirstKey(1);\n         }\n         else if (strType == \"key\" || strType == \"wkey\")\n         {\n@@ -458,15 +460,27 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             }\n             wss.fIsEncrypted = true;\n         }\n-        else if (strType == \"keymeta\")\n+        else if (strType == \"keymeta\" || strType == \"watchmeta\")\n         {\n-            CPubKey vchPubKey;\n-            ssKey >> vchPubKey;\n+            CTxDestination keyID;\n+            if (strType == \"keymeta\")\n+            {\n+              CPubKey vchPubKey;\n+              ssKey >> vchPubKey;\n+              keyID = vchPubKey.GetID();\n+            }\n+            else if (strType == \"watchmeta\")\n+            {\n+              CScript script;\n+              ssKey >> *(CScriptBase*)(&script);\n+              keyID = CScriptID(script);\n+            }\n+\n             CKeyMetadata keyMeta;\n             ssValue >> keyMeta;\n             wss.nKeyMeta++;\n \n-            pwallet->LoadKeyMetadata(vchPubKey, keyMeta);\n+            pwallet->LoadKeyMetadata(keyID, keyMeta);\n         }\n         else if (strType == \"defaultkey\")\n         {\n@@ -620,7 +634,7 @@ DBErrors CWalletDB::LoadWallet(CWallet* pwallet)\n            wss.nKeys, wss.nCKeys, wss.nKeyMeta, wss.nKeys + wss.nCKeys);\n \n     // nTimeFirstKey is only reliable if all keys have metadata\n-    if ((wss.nKeys + wss.nCKeys) != wss.nKeyMeta)\n+    if ((wss.nKeys + wss.nCKeys + wss.nWatchKeys) != wss.nKeyMeta)\n         pwallet->UpdateTimeFirstKey(1);\n \n     BOOST_FOREACH(uint256 hash, wss.vWalletUpgrade)"
      },
      {
        "sha": "c7c65465df9a8fafb104c7a1e3875af71e60d1c8",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a80f98b1c7a49432dc53d18d0fb51ac334de96be/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a80f98b1c7a49432dc53d18d0fb51ac334de96be/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=a80f98b1c7a49432dc53d18d0fb51ac334de96be",
        "patch": "@@ -135,7 +135,7 @@ class CWalletDB : public CDB\n \n     bool WriteCScript(const uint160& hash, const CScript& redeemScript);\n \n-    bool WriteWatchOnly(const CScript &script);\n+    bool WriteWatchOnly(const CScript &script, const CKeyMetadata &keymeta);\n     bool EraseWatchOnly(const CScript &script);\n \n     bool WriteBestBlock(const CBlockLocator& locator);"
      }
    ]
  }
]