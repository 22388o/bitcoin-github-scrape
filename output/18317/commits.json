[
  {
    "sha": "769ee5fa0011ae658770586442715452a656559d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NjllZTVmYTAwMTFhZTY1ODc3MDU4NjQ0MjcxNTQ1MmE2NTY1NTlk",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-03-11T15:30:08Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-03-30T22:36:14Z"
      },
      "message": "Merge BigEndian functionality into CustomUintFormatter",
      "tree": {
        "sha": "b9ad8eaa88b5c33f2ae5dd2e79ed50e313125a11",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b9ad8eaa88b5c33f2ae5dd2e79ed50e313125a11"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/769ee5fa0011ae658770586442715452a656559d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/769ee5fa0011ae658770586442715452a656559d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/769ee5fa0011ae658770586442715452a656559d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/769ee5fa0011ae658770586442715452a656559d/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7e1fc03b185d89f21da1bee2f8b7900d65745b30",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e1fc03b185d89f21da1bee2f8b7900d65745b30",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7e1fc03b185d89f21da1bee2f8b7900d65745b30"
      }
    ],
    "stats": {
      "total": 59,
      "additions": 17,
      "deletions": 42
    },
    "files": [
      {
        "sha": "53d9c52a521a873d70fdc590267139490dae1c64",
        "filename": "src/netaddress.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/769ee5fa0011ae658770586442715452a656559d/src/netaddress.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/769ee5fa0011ae658770586442715452a656559d/src/netaddress.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.h?ref=769ee5fa0011ae658770586442715452a656559d",
        "patch": "@@ -176,7 +176,7 @@ class CService : public CNetAddr\n         template <typename Stream, typename Operation>\n         inline void SerializationOp(Stream& s, Operation ser_action) {\n             READWRITE(ip);\n-            READWRITE(WrapBigEndian(port));\n+            READWRITE(Using<BigEndianFormatter<2>>(port));\n         }\n };\n "
      },
      {
        "sha": "7ee9556dc134892fd30f2435eb1769a968668b08",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 16,
        "deletions": 41,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/769ee5fa0011ae658770586442715452a656559d/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/769ee5fa0011ae658770586442715452a656559d/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=769ee5fa0011ae658770586442715452a656559d",
        "patch": "@@ -518,7 +518,7 @@ struct VarIntFormatter\n     }\n };\n \n-template<int Bytes>\n+template<int Bytes, bool BigEndian = false>\n struct CustomUintFormatter\n {\n     static_assert(Bytes > 0 && Bytes <= 8, \"CustomUintFormatter Bytes out of range\");\n@@ -527,52 +527,30 @@ struct CustomUintFormatter\n     template <typename Stream, typename I> void Ser(Stream& s, I v)\n     {\n         if (v < 0 || v > MAX) throw std::ios_base::failure(\"CustomUintFormatter value out of range\");\n-        uint64_t raw = htole64(v);\n-        s.write((const char*)&raw, Bytes);\n+        if (BigEndian) {\n+            uint64_t raw = htobe64(v);\n+            s.write(((const char*)&raw) + 8 - Bytes, Bytes);\n+        } else {\n+            uint64_t raw = htole64(v);\n+            s.write((const char*)&raw, Bytes);\n+        }\n     }\n \n     template <typename Stream, typename I> void Unser(Stream& s, I& v)\n     {\n         static_assert(std::numeric_limits<I>::max() >= MAX && std::numeric_limits<I>::min() <= 0, \"CustomUintFormatter type too small\");\n         uint64_t raw = 0;\n-        s.read((char*)&raw, Bytes);\n-        v = le64toh(raw);\n+        if (BigEndian) {\n+            s.read(((char*)&raw) + 8 - Bytes, Bytes);\n+            v = be64toh(raw);\n+        } else {\n+            s.read((char*)&raw, Bytes);\n+            v = le64toh(raw);\n+        }\n     }\n };\n \n-/** Serialization wrapper class for big-endian integers.\n- *\n- * Use this wrapper around integer types that are stored in memory in native\n- * byte order, but serialized in big endian notation. This is only intended\n- * to implement serializers that are compatible with existing formats, and\n- * its use is not recommended for new data structures.\n- *\n- * Only 16-bit types are supported for now.\n- */\n-template<typename I>\n-class BigEndian\n-{\n-protected:\n-    I& m_val;\n-public:\n-    explicit BigEndian(I& val) : m_val(val)\n-    {\n-        static_assert(std::is_unsigned<I>::value, \"BigEndian type must be unsigned integer\");\n-        static_assert(sizeof(I) == 2 && std::numeric_limits<I>::min() == 0 && std::numeric_limits<I>::max() == std::numeric_limits<uint16_t>::max(), \"Unsupported BigEndian size\");\n-    }\n-\n-    template<typename Stream>\n-    void Serialize(Stream& s) const\n-    {\n-        ser_writedata16be(s, m_val);\n-    }\n-\n-    template<typename Stream>\n-    void Unserialize(Stream& s)\n-    {\n-        m_val = ser_readdata16be(s);\n-    }\n-};\n+template<int Bytes> using BigEndianFormatter = CustomUintFormatter<Bytes, true>;\n \n /** Formatter for integers in CompactSize format. */\n struct CompactSizeFormatter\n@@ -626,9 +604,6 @@ class LimitedString\n     }\n };\n \n-template<typename I>\n-BigEndian<I> WrapBigEndian(I& n) { return BigEndian<I>(n); }\n-\n /** Formatter to serialize/deserialize vector elements using another formatter\n  *\n  * Example:"
      }
    ]
  },
  {
    "sha": "6f9a1e5ad0a270d3b5a715f3e3ea0911193bf244",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZjlhMWU1YWQwYTI3MGQzYjVhNzE1ZjNlM2VhMDkxMTE5M2JmMjQ0",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-03-30T22:32:39Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-03-30T22:36:16Z"
      },
      "message": "Extend CustomUintFormatter to support enums\n\nExtracted by Pieter Wuille from a comment by Russ Yanofsky, see\nhttps://github.com/bitcoin/bitcoin/pull/18317#discussion_r398821936.",
      "tree": {
        "sha": "4f230a7724ea174476fa50b9d8ae704577b99d34",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4f230a7724ea174476fa50b9d8ae704577b99d34"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6f9a1e5ad0a270d3b5a715f3e3ea0911193bf244",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f9a1e5ad0a270d3b5a715f3e3ea0911193bf244",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6f9a1e5ad0a270d3b5a715f3e3ea0911193bf244",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f9a1e5ad0a270d3b5a715f3e3ea0911193bf244/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "769ee5fa0011ae658770586442715452a656559d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/769ee5fa0011ae658770586442715452a656559d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/769ee5fa0011ae658770586442715452a656559d"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 4,
      "deletions": 3
    },
    "files": [
      {
        "sha": "a44cc2c001f954787cfa4bd8e44a7419c9346e24",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f9a1e5ad0a270d3b5a715f3e3ea0911193bf244/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f9a1e5ad0a270d3b5a715f3e3ea0911193bf244/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=6f9a1e5ad0a270d3b5a715f3e3ea0911193bf244",
        "patch": "@@ -538,14 +538,15 @@ struct CustomUintFormatter\n \n     template <typename Stream, typename I> void Unser(Stream& s, I& v)\n     {\n-        static_assert(std::numeric_limits<I>::max() >= MAX && std::numeric_limits<I>::min() <= 0, \"CustomUintFormatter type too small\");\n+        using U = typename std::conditional<std::is_enum<I>::value, std::underlying_type<I>, std::common_type<I>>::type::type;\n+        static_assert(std::numeric_limits<U>::max() >= MAX && std::numeric_limits<U>::min() <= 0, \"Assigned type too small\");\n         uint64_t raw = 0;\n         if (BigEndian) {\n             s.read(((char*)&raw) + 8 - Bytes, Bytes);\n-            v = be64toh(raw);\n+            v = static_cast<I>(be64toh(raw));\n         } else {\n             s.read((char*)&raw, Bytes);\n-            v = le64toh(raw);\n+            v = static_cast<I>(le64toh(raw));\n         }\n     }\n };"
      }
    ]
  },
  {
    "sha": "d06fedd1bc26bf5bf2b203d4445aeaebccca780e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMDZmZWRkMWJjMjZiZjViZjJiMjAzZDQ0NDVhZWFlYmNjY2E3ODBl",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-03-30T22:22:07Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-03-30T22:36:16Z"
      },
      "message": "Add SER_READ and SER_WRITE for read/write-dependent statements\n\nExtracted and extended by Pieter Wuille from a comment by Russ\nYanofsky (see\nhttps://github.com/bitcoin/bitcoin/pull/18317#discussion_r398625457).",
      "tree": {
        "sha": "f649ceffbb078b0f18bf9265f33a72f44e78a909",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f649ceffbb078b0f18bf9265f33a72f44e78a909"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d06fedd1bc26bf5bf2b203d4445aeaebccca780e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d06fedd1bc26bf5bf2b203d4445aeaebccca780e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d06fedd1bc26bf5bf2b203d4445aeaebccca780e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d06fedd1bc26bf5bf2b203d4445aeaebccca780e/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6f9a1e5ad0a270d3b5a715f3e3ea0911193bf244",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f9a1e5ad0a270d3b5a715f3e3ea0911193bf244",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6f9a1e5ad0a270d3b5a715f3e3ea0911193bf244"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 24,
      "deletions": 0
    },
    "files": [
      {
        "sha": "82c332f92f97e4d4fb19149be3d895a24601dde9",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d06fedd1bc26bf5bf2b203d4445aeaebccca780e/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d06fedd1bc26bf5bf2b203d4445aeaebccca780e/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=d06fedd1bc26bf5bf2b203d4445aeaebccca780e",
        "patch": "@@ -190,6 +190,8 @@ template<typename X> const X& ReadWriteAsHelper(const X& x) { return x; }\n \n #define READWRITE(...) (::SerReadWriteMany(s, ser_action, __VA_ARGS__))\n #define READWRITEAS(type, obj) (::SerReadWriteMany(s, ser_action, ReadWriteAsHelper<type>(obj)))\n+#define SER_READ(obj, code) ::SerRead(s, ser_action, obj, [&](Stream& s, typename std::remove_const<Type>::type& obj) { code; })\n+#define SER_WRITE(obj, code) ::SerWrite(s, ser_action, obj, [&](Stream& s, const Type& obj) { code; })\n \n /**\n  * Implement three methods for serializable objects. These are actually wrappers over\n@@ -1100,6 +1102,28 @@ inline void SerReadWriteMany(Stream& s, CSerActionUnserialize ser_action, Args&&\n     ::UnserializeMany(s, args...);\n }\n \n+template<typename Stream, typename Type, typename Fn>\n+inline void SerRead(Stream& s, CSerActionSerialize ser_action, Type&&, Fn&&)\n+{\n+}\n+\n+template<typename Stream, typename Type, typename Fn>\n+inline void SerRead(Stream& s, CSerActionUnserialize ser_action, Type&& obj, Fn&& fn)\n+{\n+    fn(s, std::forward<Type>(obj));\n+}\n+\n+template<typename Stream, typename Type, typename Fn>\n+inline void SerWrite(Stream& s, CSerActionSerialize ser_action, Type&& obj, Fn&& fn)\n+{\n+    fn(s, std::forward<Type>(obj));\n+}\n+\n+template<typename Stream, typename Type, typename Fn>\n+inline void SerWrite(Stream& s, CSerActionUnserialize ser_action, Type&&, Fn&&)\n+{\n+}\n+\n template<typename I>\n inline void WriteVarInt(CSizeComputer &s, I n)\n {"
      }
    ]
  },
  {
    "sha": "73747afbbeb013669faf4c4d2c0903cec4526fb0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3Mzc0N2FmYmJlYjAxMzY2OWZhZjRjNGQyYzA5MDNjZWM0NTI2ZmIw",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-03-11T16:34:20Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-03-30T23:09:51Z"
      },
      "message": "Convert merkleblock to new serialization",
      "tree": {
        "sha": "615759d2ff94c7c3ec5b1ba69797e1e499d4d7ce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/615759d2ff94c7c3ec5b1ba69797e1e499d4d7ce"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/73747afbbeb013669faf4c4d2c0903cec4526fb0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/73747afbbeb013669faf4c4d2c0903cec4526fb0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/73747afbbeb013669faf4c4d2c0903cec4526fb0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/73747afbbeb013669faf4c4d2c0903cec4526fb0/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d06fedd1bc26bf5bf2b203d4445aeaebccca780e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d06fedd1bc26bf5bf2b203d4445aeaebccca780e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d06fedd1bc26bf5bf2b203d4445aeaebccca780e"
      }
    ],
    "stats": {
      "total": 59,
      "additions": 31,
      "deletions": 28
    },
    "files": [
      {
        "sha": "8072b12119f41767f2214a01a0864aeadad95c99",
        "filename": "src/merkleblock.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/73747afbbeb013669faf4c4d2c0903cec4526fb0/src/merkleblock.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/73747afbbeb013669faf4c4d2c0903cec4526fb0/src/merkleblock.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/merkleblock.cpp?ref=73747afbbeb013669faf4c4d2c0903cec4526fb0",
        "patch": "@@ -9,6 +9,24 @@\n #include <consensus/consensus.h>\n \n \n+std::vector<unsigned char> BitsToBytes(const std::vector<bool>& bits)\n+{\n+    std::vector<unsigned char> ret((bits.size() + 7) / 8);\n+    for (unsigned int p = 0; p < bits.size(); p++) {\n+        ret[p / 8] |= bits[p] << (p % 8);\n+    }\n+    return ret;\n+}\n+\n+std::vector<bool> BytesToBits(const std::vector<unsigned char>& bytes)\n+{\n+    std::vector<bool> ret(bytes.size() * 8);\n+    for (unsigned int p = 0; p < ret.size(); p++) {\n+        ret[p] = (bytes[p / 8] & (1 << (p % 8))) != 0;\n+    }\n+    return ret;\n+}\n+\n CMerkleBlock::CMerkleBlock(const CBlock& block, CBloomFilter* filter, const std::set<uint256>* txids)\n {\n     header = block.GetBlockHeader();"
      },
      {
        "sha": "b2d28287847c01c51fc41e0433333a120528a433",
        "filename": "src/merkleblock.h",
        "status": "modified",
        "additions": 13,
        "deletions": 28,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/73747afbbeb013669faf4c4d2c0903cec4526fb0/src/merkleblock.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/73747afbbeb013669faf4c4d2c0903cec4526fb0/src/merkleblock.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/merkleblock.h?ref=73747afbbeb013669faf4c4d2c0903cec4526fb0",
        "patch": "@@ -13,6 +13,10 @@\n \n #include <vector>\n \n+// Helper functions for serialization.\n+std::vector<unsigned char> BitsToBytes(const std::vector<bool>& bits);\n+std::vector<bool> BytesToBits(const std::vector<unsigned char>& bytes);\n+\n /** Data structure that represents a partial merkle tree.\n  *\n  * It represents a subset of the txid's of a known block, in a way that\n@@ -81,27 +85,14 @@ class CPartialMerkleTree\n \n public:\n \n-    /** serialization implementation */\n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(nTransactions);\n-        READWRITE(vHash);\n-        std::vector<unsigned char> vBytes;\n-        if (ser_action.ForRead()) {\n-            READWRITE(vBytes);\n-            CPartialMerkleTree &us = *(const_cast<CPartialMerkleTree*>(this));\n-            us.vBits.resize(vBytes.size() * 8);\n-            for (unsigned int p = 0; p < us.vBits.size(); p++)\n-                us.vBits[p] = (vBytes[p / 8] & (1 << (p % 8))) != 0;\n-            us.fBad = false;\n-        } else {\n-            vBytes.resize((vBits.size()+7)/8);\n-            for (unsigned int p = 0; p < vBits.size(); p++)\n-                vBytes[p / 8] |= vBits[p] << (p % 8);\n-            READWRITE(vBytes);\n-        }\n+    SERIALIZE_METHODS(CPartialMerkleTree, obj)\n+    {\n+        READWRITE(obj.nTransactions, obj.vHash);\n+        std::vector<unsigned char> bytes;\n+        SER_WRITE(obj, bytes = BitsToBytes(obj.vBits));\n+        READWRITE(bytes);\n+        SER_READ(obj, obj.vBits = BytesToBits(bytes));\n+        SER_READ(obj, obj.fBad = false);\n     }\n \n     /** Construct a partial merkle tree from a list of transaction ids, and a mask that selects a subset of them */\n@@ -157,13 +148,7 @@ class CMerkleBlock\n \n     CMerkleBlock() {}\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(header);\n-        READWRITE(txn);\n-    }\n+    SERIALIZE_METHODS(CMerkleBlock, obj) { READWRITE(obj.header, obj.txn); }\n \n private:\n     // Combined constructor to consolidate code"
      }
    ]
  },
  {
    "sha": "2b1f85e8c52c8bc5a17eae4c809eaf61d724af98",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYjFmODVlOGM1MmM4YmM1YTE3ZWFlNGM4MDllYWY2MWQ3MjRhZjk4",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-03-11T16:35:39Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-03-30T23:10:30Z"
      },
      "message": "Convert blockencodings_tests to new serialization",
      "tree": {
        "sha": "76978d88902e6894b4288cf804722b67294d12bd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/76978d88902e6894b4288cf804722b67294d12bd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2b1f85e8c52c8bc5a17eae4c809eaf61d724af98",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2b1f85e8c52c8bc5a17eae4c809eaf61d724af98",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2b1f85e8c52c8bc5a17eae4c809eaf61d724af98",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2b1f85e8c52c8bc5a17eae4c809eaf61d724af98/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "73747afbbeb013669faf4c4d2c0903cec4526fb0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/73747afbbeb013669faf4c4d2c0903cec4526fb0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/73747afbbeb013669faf4c4d2c0903cec4526fb0"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 3,
      "deletions": 19
    },
    "files": [
      {
        "sha": "457ac4508bef0e0c6b4af89708842705b0b73cf4",
        "filename": "src/blockencodings.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2b1f85e8c52c8bc5a17eae4c809eaf61d724af98/src/blockencodings.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2b1f85e8c52c8bc5a17eae4c809eaf61d724af98/src/blockencodings.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockencodings.h?ref=2b1f85e8c52c8bc5a17eae4c809eaf61d724af98",
        "patch": "@@ -92,12 +92,13 @@ class CBlockHeaderAndShortTxIDs {\n \n     friend class PartiallyDownloadedBlock;\n \n-    static const int SHORTTXIDS_LENGTH = 6;\n protected:\n     std::vector<uint64_t> shorttxids;\n     std::vector<PrefilledTransaction> prefilledtxn;\n \n public:\n+    static constexpr int SHORTTXIDS_LENGTH = 6;\n+\n     CBlockHeader header;\n \n     // Dummy for deserialization"
      },
      {
        "sha": "14cf1a4a76644dbf495e1d0636c66aa3bc01ef59",
        "filename": "src/test/blockencodings_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 18,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2b1f85e8c52c8bc5a17eae4c809eaf61d724af98/src/test/blockencodings_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2b1f85e8c52c8bc5a17eae4c809eaf61d724af98/src/test/blockencodings_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/blockencodings_tests.cpp?ref=2b1f85e8c52c8bc5a17eae4c809eaf61d724af98",
        "patch": "@@ -132,24 +132,7 @@ class TestHeaderAndShortIDs {\n         return base.GetShortID(txhash);\n     }\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(header);\n-        READWRITE(nonce);\n-        size_t shorttxids_size = shorttxids.size();\n-        READWRITE(VARINT(shorttxids_size));\n-        shorttxids.resize(shorttxids_size);\n-        for (size_t i = 0; i < shorttxids.size(); i++) {\n-            uint32_t lsb = shorttxids[i] & 0xffffffff;\n-            uint16_t msb = (shorttxids[i] >> 32) & 0xffff;\n-            READWRITE(lsb);\n-            READWRITE(msb);\n-            shorttxids[i] = (uint64_t(msb) << 32) | uint64_t(lsb);\n-        }\n-        READWRITE(prefilledtxn);\n-    }\n+    SERIALIZE_METHODS(TestHeaderAndShortIDs, obj) { READWRITE(obj.header, obj.nonce, Using<VectorFormatter<CustomUintFormatter<CBlockHeaderAndShortTxIDs::SHORTTXIDS_LENGTH>>>(obj.shorttxids), obj.prefilledtxn); }\n };\n \n BOOST_AUTO_TEST_CASE(NonCoinbasePreforwardRTTest)"
      }
    ]
  },
  {
    "sha": "4eb5643e3538863c9d2ff261f49a9a1b248de243",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZWI1NjQzZTM1Mzg4NjNjOWQyZmYyNjFmNDlhOWExYjI0OGRlMjQz",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-03-11T16:35:50Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-03-30T23:10:30Z"
      },
      "message": "Convert everything except wallet/qt to new serialization",
      "tree": {
        "sha": "377437ffee20c67fa7e0611c31be6b2490a4483c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/377437ffee20c67fa7e0611c31be6b2490a4483c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4eb5643e3538863c9d2ff261f49a9a1b248de243",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4eb5643e3538863c9d2ff261f49a9a1b248de243",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4eb5643e3538863c9d2ff261f49a9a1b248de243",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4eb5643e3538863c9d2ff261f49a9a1b248de243/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2b1f85e8c52c8bc5a17eae4c809eaf61d724af98",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2b1f85e8c52c8bc5a17eae4c809eaf61d724af98",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2b1f85e8c52c8bc5a17eae4c809eaf61d724af98"
      }
    ],
    "stats": {
      "total": 284,
      "additions": 71,
      "deletions": 213
    },
    "files": [
      {
        "sha": "42b351a72d4379a5b36f9d9511b52c0df41657e4",
        "filename": "src/bench/prevector.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4eb5643e3538863c9d2ff261f49a9a1b248de243/src/bench/prevector.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4eb5643e3538863c9d2ff261f49a9a1b248de243/src/bench/prevector.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/prevector.cpp?ref=4eb5643e3538863c9d2ff261f49a9a1b248de243",
        "patch": "@@ -20,9 +20,7 @@\n struct nontrivial_t {\n     int x;\n     nontrivial_t() :x(-1) {}\n-    ADD_SERIALIZE_METHODS\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {READWRITE(x);}\n+    SERIALIZE_METHODS(nontrivial_t, obj) { READWRITE(obj.x); }\n };\n static_assert(!IS_TRIVIALLY_CONSTRUCTIBLE<nontrivial_t>::value,\n               \"expected nontrivial_t to not be trivially constructible\");"
      },
      {
        "sha": "f5221b532942e2ea23bdcc45eef1aaac8197249d",
        "filename": "src/bloom.h",
        "status": "modified",
        "additions": 1,
        "deletions": 9,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4eb5643e3538863c9d2ff261f49a9a1b248de243/src/bloom.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4eb5643e3538863c9d2ff261f49a9a1b248de243/src/bloom.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.h?ref=4eb5643e3538863c9d2ff261f49a9a1b248de243",
        "patch": "@@ -66,15 +66,7 @@ class CBloomFilter\n     CBloomFilter(const unsigned int nElements, const double nFPRate, const unsigned int nTweak, unsigned char nFlagsIn);\n     CBloomFilter() : isFull(true), isEmpty(false), nHashFuncs(0), nTweak(0), nFlags(0) {}\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(vData);\n-        READWRITE(nHashFuncs);\n-        READWRITE(nTweak);\n-        READWRITE(nFlags);\n-    }\n+    SERIALIZE_METHODS(CBloomFilter, obj) { READWRITE(obj.vData, obj.nHashFuncs, obj.nTweak, obj.nFlags); }\n \n     void insert(const std::vector<unsigned char>& vKey);\n     void insert(const COutPoint& outpoint);"
      },
      {
        "sha": "1c5b3795760e592434ec04248b9b40d90257e578",
        "filename": "src/flatfile.h",
        "status": "modified",
        "additions": 1,
        "deletions": 7,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4eb5643e3538863c9d2ff261f49a9a1b248de243/src/flatfile.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4eb5643e3538863c9d2ff261f49a9a1b248de243/src/flatfile.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/flatfile.h?ref=4eb5643e3538863c9d2ff261f49a9a1b248de243",
        "patch": "@@ -16,13 +16,7 @@ struct FlatFilePos\n     int nFile;\n     unsigned int nPos;\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(VARINT_MODE(nFile, VarIntMode::NONNEGATIVE_SIGNED));\n-        READWRITE(VARINT(nPos));\n-    }\n+    SERIALIZE_METHODS(FlatFilePos, obj) { READWRITE(VARINT_MODE(obj.nFile, VarIntMode::NONNEGATIVE_SIGNED), VARINT(obj.nPos)); }\n \n     FlatFilePos() : nFile(-1), nPos(0) {}\n "
      },
      {
        "sha": "f2c3d66ebd01c49c8704ae46eff70531a5bc40bb",
        "filename": "src/index/blockfilterindex.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 13,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4eb5643e3538863c9d2ff261f49a9a1b248de243/src/index/blockfilterindex.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4eb5643e3538863c9d2ff261f49a9a1b248de243/src/index/blockfilterindex.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/blockfilterindex.cpp?ref=4eb5643e3538863c9d2ff261f49a9a1b248de243",
        "patch": "@@ -39,14 +39,7 @@ struct DBVal {\n     uint256 header;\n     FlatFilePos pos;\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(hash);\n-        READWRITE(header);\n-        READWRITE(pos);\n-    }\n+    SERIALIZE_METHODS(DBVal, obj) { READWRITE(obj.hash, obj.header, obj.pos); }\n };\n \n struct DBHeightKey {\n@@ -78,17 +71,14 @@ struct DBHashKey {\n \n     explicit DBHashKey(const uint256& hash_in) : hash(hash_in) {}\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n+    SERIALIZE_METHODS(DBHashKey, obj) {\n         char prefix = DB_BLOCK_HASH;\n         READWRITE(prefix);\n         if (prefix != DB_BLOCK_HASH) {\n             throw std::ios_base::failure(\"Invalid format for block filter index DB hash key\");\n         }\n \n-        READWRITE(hash);\n+        READWRITE(obj.hash);\n     }\n };\n "
      },
      {
        "sha": "4626395ef0595e4182780a93db7122c444d07b86",
        "filename": "src/index/txindex.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 6,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4eb5643e3538863c9d2ff261f49a9a1b248de243/src/index/txindex.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4eb5643e3538863c9d2ff261f49a9a1b248de243/src/index/txindex.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/txindex.cpp?ref=4eb5643e3538863c9d2ff261f49a9a1b248de243",
        "patch": "@@ -21,12 +21,10 @@ struct CDiskTxPos : public FlatFilePos\n {\n     unsigned int nTxOffset; // after header\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITEAS(FlatFilePos, *this);\n-        READWRITE(VARINT(nTxOffset));\n+    SERIALIZE_METHODS(CDiskTxPos, obj)\n+    {\n+        READWRITEAS(FlatFilePos, obj);\n+        READWRITE(VARINT(obj.nTxOffset));\n     }\n \n     CDiskTxPos(const FlatFilePos &blockIn, unsigned int nTxOffsetIn) : FlatFilePos(blockIn.nFile, blockIn.nPos), nTxOffset(nTxOffsetIn) {"
      },
      {
        "sha": "4beeb7f52e93746454c9cd527056e385d622f13d",
        "filename": "src/netaddress.h",
        "status": "modified",
        "additions": 3,
        "deletions": 21,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4eb5643e3538863c9d2ff261f49a9a1b248de243/src/netaddress.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4eb5643e3538863c9d2ff261f49a9a1b248de243/src/netaddress.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.h?ref=4eb5643e3538863c9d2ff261f49a9a1b248de243",
        "patch": "@@ -99,12 +99,7 @@ class CNetAddr\n         friend bool operator!=(const CNetAddr& a, const CNetAddr& b) { return !(a == b); }\n         friend bool operator<(const CNetAddr& a, const CNetAddr& b);\n \n-        ADD_SERIALIZE_METHODS;\n-\n-        template <typename Stream, typename Operation>\n-        inline void SerializationOp(Stream& s, Operation ser_action) {\n-            READWRITE(ip);\n-        }\n+        SERIALIZE_METHODS(CNetAddr, obj) { READWRITE(obj.ip); }\n \n         friend class CSubNet;\n };\n@@ -136,14 +131,7 @@ class CSubNet\n         friend bool operator!=(const CSubNet& a, const CSubNet& b) { return !(a == b); }\n         friend bool operator<(const CSubNet& a, const CSubNet& b);\n \n-        ADD_SERIALIZE_METHODS;\n-\n-        template <typename Stream, typename Operation>\n-        inline void SerializationOp(Stream& s, Operation ser_action) {\n-            READWRITE(network);\n-            READWRITE(netmask);\n-            READWRITE(valid);\n-        }\n+        SERIALIZE_METHODS(CSubNet, obj) { READWRITE(obj.network, obj.netmask, obj.valid); }\n };\n \n /** A combination of a network address (CNetAddr) and a (TCP) port */\n@@ -171,13 +159,7 @@ class CService : public CNetAddr\n         CService(const struct in6_addr& ipv6Addr, unsigned short port);\n         explicit CService(const struct sockaddr_in6& addr);\n \n-        ADD_SERIALIZE_METHODS;\n-\n-        template <typename Stream, typename Operation>\n-        inline void SerializationOp(Stream& s, Operation ser_action) {\n-            READWRITE(ip);\n-            READWRITE(Using<BigEndianFormatter<2>>(port));\n-        }\n+        SERIALIZE_METHODS(CService, obj) { READWRITE(obj.ip, Using<BigEndianFormatter<2>>(obj.port)); }\n };\n \n #endif // BITCOIN_NETADDRESS_H"
      },
      {
        "sha": "c8b4d60fd0026600c74477715cf5874da39cb404",
        "filename": "src/node/utxo_snapshot.h",
        "status": "modified",
        "additions": 1,
        "deletions": 10,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4eb5643e3538863c9d2ff261f49a9a1b248de243/src/node/utxo_snapshot.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4eb5643e3538863c9d2ff261f49a9a1b248de243/src/node/utxo_snapshot.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/utxo_snapshot.h?ref=4eb5643e3538863c9d2ff261f49a9a1b248de243",
        "patch": "@@ -35,16 +35,7 @@ class SnapshotMetadata\n             m_coins_count(coins_count),\n             m_nchaintx(nchaintx) { }\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action)\n-    {\n-        READWRITE(m_base_blockhash);\n-        READWRITE(m_coins_count);\n-        READWRITE(m_nchaintx);\n-    }\n-\n+    SERIALIZE_METHODS(SnapshotMetadata, obj) { READWRITE(obj.m_base_blockhash, obj.m_coins_count, obj.m_nchaintx); }\n };\n \n #endif // BITCOIN_NODE_UTXO_SNAPSHOT_H"
      },
      {
        "sha": "61fa80c13033ffc9f26db264297a5bd42a43c7bd",
        "filename": "src/policy/feerate.h",
        "status": "modified",
        "additions": 1,
        "deletions": 6,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4eb5643e3538863c9d2ff261f49a9a1b248de243/src/policy/feerate.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4eb5643e3538863c9d2ff261f49a9a1b248de243/src/policy/feerate.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/feerate.h?ref=4eb5643e3538863c9d2ff261f49a9a1b248de243",
        "patch": "@@ -48,12 +48,7 @@ class CFeeRate\n     CFeeRate& operator+=(const CFeeRate& a) { nSatoshisPerK += a.nSatoshisPerK; return *this; }\n     std::string ToString() const;\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(nSatoshisPerK);\n-    }\n+    SERIALIZE_METHODS(CFeeRate, obj) { READWRITE(obj.nSatoshisPerK); }\n };\n \n #endif //  BITCOIN_POLICY_FEERATE_H"
      },
      {
        "sha": "fd8fc8b868c0f2bda5a3a265935d8b0018d1668f",
        "filename": "src/primitives/block.h",
        "status": "modified",
        "additions": 8,
        "deletions": 22,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4eb5643e3538863c9d2ff261f49a9a1b248de243/src/primitives/block.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4eb5643e3538863c9d2ff261f49a9a1b248de243/src/primitives/block.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.h?ref=4eb5643e3538863c9d2ff261f49a9a1b248de243",
        "patch": "@@ -33,17 +33,7 @@ class CBlockHeader\n         SetNull();\n     }\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(this->nVersion);\n-        READWRITE(hashPrevBlock);\n-        READWRITE(hashMerkleRoot);\n-        READWRITE(nTime);\n-        READWRITE(nBits);\n-        READWRITE(nNonce);\n-    }\n+    SERIALIZE_METHODS(CBlockHeader, obj) { READWRITE(obj.nVersion, obj.hashPrevBlock, obj.hashMerkleRoot, obj.nTime, obj.nBits, obj.nNonce); }\n \n     void SetNull()\n     {\n@@ -89,12 +79,10 @@ class CBlock : public CBlockHeader\n         *(static_cast<CBlockHeader*>(this)) = header;\n     }\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITEAS(CBlockHeader, *this);\n-        READWRITE(vtx);\n+    SERIALIZE_METHODS(CBlock, obj)\n+    {\n+        READWRITEAS(CBlockHeader, obj);\n+        READWRITE(obj.vtx);\n     }\n \n     void SetNull()\n@@ -131,14 +119,12 @@ struct CBlockLocator\n \n     explicit CBlockLocator(const std::vector<uint256>& vHaveIn) : vHave(vHaveIn) {}\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n+    SERIALIZE_METHODS(CBlockLocator, obj)\n+    {\n         int nVersion = s.GetVersion();\n         if (!(s.GetType() & SER_GETHASH))\n             READWRITE(nVersion);\n-        READWRITE(vHave);\n+        READWRITE(obj.vHave);\n     }\n \n     void SetNull()"
      },
      {
        "sha": "d080cf876b163d0c8acb3dfa4476a75df1160270",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 3,
        "deletions": 22,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4eb5643e3538863c9d2ff261f49a9a1b248de243/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4eb5643e3538863c9d2ff261f49a9a1b248de243/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=4eb5643e3538863c9d2ff261f49a9a1b248de243",
        "patch": "@@ -26,13 +26,7 @@ class COutPoint\n     COutPoint(): n(NULL_INDEX) { }\n     COutPoint(const uint256& hashIn, uint32_t nIn): hash(hashIn), n(nIn) { }\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(hash);\n-        READWRITE(n);\n-    }\n+    SERIALIZE_METHODS(COutPoint, obj) { READWRITE(obj.hash, obj.n); }\n \n     void SetNull() { hash.SetNull(); n = NULL_INDEX; }\n     bool IsNull() const { return (hash.IsNull() && n == NULL_INDEX); }\n@@ -103,14 +97,7 @@ class CTxIn\n     explicit CTxIn(COutPoint prevoutIn, CScript scriptSigIn=CScript(), uint32_t nSequenceIn=SEQUENCE_FINAL);\n     CTxIn(uint256 hashPrevTx, uint32_t nOut, CScript scriptSigIn=CScript(), uint32_t nSequenceIn=SEQUENCE_FINAL);\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(prevout);\n-        READWRITE(scriptSig);\n-        READWRITE(nSequence);\n-    }\n+    SERIALIZE_METHODS(CTxIn, obj) { READWRITE(obj.prevout, obj.scriptSig, obj.nSequence); }\n \n     friend bool operator==(const CTxIn& a, const CTxIn& b)\n     {\n@@ -143,13 +130,7 @@ class CTxOut\n \n     CTxOut(const CAmount& nValueIn, CScript scriptPubKeyIn);\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(nValue);\n-        READWRITE(scriptPubKey);\n-    }\n+    SERIALIZE_METHODS(CTxOut, obj) { READWRITE(obj.nValue, obj.scriptPubKey); }\n \n     void SetNull()\n     {"
      },
      {
        "sha": "3cd3e10805350720ec2fdd67b0551372ee2c8d2d",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 11,
        "deletions": 31,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4eb5643e3538863c9d2ff261f49a9a1b248de243/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4eb5643e3538863c9d2ff261f49a9a1b248de243/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=4eb5643e3538863c9d2ff261f49a9a1b248de243",
        "patch": "@@ -46,16 +46,7 @@ class CMessageHeader\n     std::string GetCommand() const;\n     bool IsValid(const MessageStartChars& messageStart) const;\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action)\n-    {\n-        READWRITE(pchMessageStart);\n-        READWRITE(pchCommand);\n-        READWRITE(nMessageSize);\n-        READWRITE(pchChecksum);\n-    }\n+    SERIALIZE_METHODS(CMessageHeader, obj) { READWRITE(obj.pchMessageStart, obj.pchCommand, obj.nMessageSize, obj.pchChecksum); }\n \n     char pchMessageStart[MESSAGE_START_SIZE];\n     char pchCommand[COMMAND_SIZE];\n@@ -327,23 +318,19 @@ class CAddress : public CService\n \n     void Init();\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action)\n+    SERIALIZE_METHODS(CAddress, obj)\n     {\n-        if (ser_action.ForRead())\n-            Init();\n+        SER_READ(obj, obj.Init());\n         int nVersion = s.GetVersion();\n-        if (s.GetType() & SER_DISK)\n+        if (s.GetType() & SER_DISK) {\n             READWRITE(nVersion);\n+        }\n         if ((s.GetType() & SER_DISK) ||\n-            (nVersion >= CADDR_TIME_VERSION && !(s.GetType() & SER_GETHASH)))\n-            READWRITE(nTime);\n-        uint64_t nServicesInt = nServices;\n-        READWRITE(nServicesInt);\n-        nServices = static_cast<ServiceFlags>(nServicesInt);\n-        READWRITEAS(CService, *this);\n+            (nVersion >= CADDR_TIME_VERSION && !(s.GetType() & SER_GETHASH))) {\n+            READWRITE(obj.nTime);\n+        }\n+        READWRITE(Using<CustomUintFormatter<8>>(obj.nServices));\n+        READWRITEAS(CService, obj);\n     }\n \n     // TODO: make private (improves encapsulation)\n@@ -382,14 +369,7 @@ class CInv\n     CInv();\n     CInv(int typeIn, const uint256& hashIn);\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action)\n-    {\n-        READWRITE(type);\n-        READWRITE(hash);\n-    }\n+    SERIALIZE_METHODS(CInv, obj) { READWRITE(obj.type, obj.hash); }\n \n     friend bool operator<(const CInv& a, const CInv& b);\n "
      },
      {
        "sha": "ee422ea5ffcbea879e487f4f372902237c1becd9",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 7,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4eb5643e3538863c9d2ff261f49a9a1b248de243/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4eb5643e3538863c9d2ff261f49a9a1b248de243/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=4eb5643e3538863c9d2ff261f49a9a1b248de243",
        "patch": "@@ -49,18 +49,13 @@ struct CCoin {\n     uint32_t nHeight;\n     CTxOut out;\n \n-    ADD_SERIALIZE_METHODS;\n-\n     CCoin() : nHeight(0) {}\n     explicit CCoin(Coin&& in) : nHeight(in.nHeight), out(std::move(in.out)) {}\n \n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action)\n+    SERIALIZE_METHODS(CCoin, obj)\n     {\n         uint32_t nTxVerDummy = 0;\n-        READWRITE(nTxVerDummy);\n-        READWRITE(nHeight);\n-        READWRITE(out);\n+        READWRITE(nTxVerDummy, obj.nHeight, obj.out);\n     }\n };\n "
      },
      {
        "sha": "a318ff0f9da8148e55f1bccc4621c0756b74e325",
        "filename": "src/script/keyorigin.h",
        "status": "modified",
        "additions": 1,
        "deletions": 7,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4eb5643e3538863c9d2ff261f49a9a1b248de243/src/script/keyorigin.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4eb5643e3538863c9d2ff261f49a9a1b248de243/src/script/keyorigin.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/keyorigin.h?ref=4eb5643e3538863c9d2ff261f49a9a1b248de243",
        "patch": "@@ -18,13 +18,7 @@ struct KeyOriginInfo\n         return std::equal(std::begin(a.fingerprint), std::end(a.fingerprint), std::begin(b.fingerprint)) && a.path == b.path;\n     }\n \n-    ADD_SERIALIZE_METHODS;\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action)\n-    {\n-        READWRITE(fingerprint);\n-        READWRITE(path);\n-    }\n+    SERIALIZE_METHODS(KeyOriginInfo, obj) { READWRITE(obj.fingerprint, obj.path); }\n \n     void clear()\n     {"
      },
      {
        "sha": "e3dd57ddc98ff38f195d3ca24308e36236971c8d",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 1,
        "deletions": 6,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4eb5643e3538863c9d2ff261f49a9a1b248de243/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4eb5643e3538863c9d2ff261f49a9a1b248de243/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=4eb5643e3538863c9d2ff261f49a9a1b248de243",
        "patch": "@@ -412,12 +412,7 @@ class CScript : public CScriptBase\n     CScript(std::vector<unsigned char>::const_iterator pbegin, std::vector<unsigned char>::const_iterator pend) : CScriptBase(pbegin, pend) { }\n     CScript(const unsigned char* pbegin, const unsigned char* pend) : CScriptBase(pbegin, pend) { }\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITEAS(CScriptBase, *this);\n-    }\n+    SERIALIZE_METHODS(CScript, obj) { READWRITEAS(CScriptBase, obj); }\n \n     CScript& operator+=(const CScript& b)\n     {"
      },
      {
        "sha": "526e5f4c23109c6c54dcfa253f83f7a0f9a28a56",
        "filename": "src/test/dbwrapper_tests.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 17,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4eb5643e3538863c9d2ff261f49a9a1b248de243/src/test/dbwrapper_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4eb5643e3538863c9d2ff261f49a9a1b248de243/src/test/dbwrapper_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/dbwrapper_tests.cpp?ref=4eb5643e3538863c9d2ff261f49a9a1b248de243",
        "patch": "@@ -331,24 +331,26 @@ struct StringContentsSerializer {\n     }\n     StringContentsSerializer& operator+=(const StringContentsSerializer& s) { return *this += s.str; }\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        if (ser_action.ForRead()) {\n-            str.clear();\n-            char c = 0;\n-            while (true) {\n-                try {\n-                    READWRITE(c);\n-                    str.push_back(c);\n-                } catch (const std::ios_base::failure&) {\n-                    break;\n-                }\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        for (size_t i = 0; i < str.size(); i++) {\n+            s << str[i];\n+        }\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        str.clear();\n+        char c = 0;\n+        while (true) {\n+            try {\n+                s >> c;\n+                str.push_back(c);\n+            } catch (const std::ios_base::failure&) {\n+                break;\n             }\n-        } else {\n-            for (size_t i = 0; i < str.size(); i++)\n-                READWRITE(str[i]);\n         }\n     }\n };"
      },
      {
        "sha": "b21c70ab4332d4fb4b3c662432944edf38af3fad",
        "filename": "src/test/serialize_tests.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 13,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4eb5643e3538863c9d2ff261f49a9a1b248de243/src/test/serialize_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4eb5643e3538863c9d2ff261f49a9a1b248de243/src/test/serialize_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/serialize_tests.cpp?ref=4eb5643e3538863c9d2ff261f49a9a1b248de243",
        "patch": "@@ -29,15 +29,13 @@ class CSerializeMethodsTestSingle\n         memcpy(charstrval, charstrvalin, sizeof(charstrval));\n     }\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(intval);\n-        READWRITE(boolval);\n-        READWRITE(stringval);\n-        READWRITE(charstrval);\n-        READWRITE(txval);\n+    SERIALIZE_METHODS(CSerializeMethodsTestSingle, obj)\n+    {\n+        READWRITE(obj.intval);\n+        READWRITE(obj.boolval);\n+        READWRITE(obj.stringval);\n+        READWRITE(obj.charstrval);\n+        READWRITE(obj.txval);\n     }\n \n     bool operator==(const CSerializeMethodsTestSingle& rhs)\n@@ -54,11 +52,10 @@ class CSerializeMethodsTestMany : public CSerializeMethodsTestSingle\n {\n public:\n     using CSerializeMethodsTestSingle::CSerializeMethodsTestSingle;\n-    ADD_SERIALIZE_METHODS;\n \n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(intval, boolval, stringval, charstrval, txval);\n+    SERIALIZE_METHODS(CSerializeMethodsTestMany, obj)\n+    {\n+        READWRITE(obj.intval, obj.boolval, obj.stringval, obj.charstrval, obj.txval);\n     }\n };\n "
      },
      {
        "sha": "77dfd0d54ac5b248c0e4673023c8f514e2882647",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 13,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4eb5643e3538863c9d2ff261f49a9a1b248de243/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4eb5643e3538863c9d2ff261f49a9a1b248de243/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=4eb5643e3538863c9d2ff261f49a9a1b248de243",
        "patch": "@@ -36,19 +36,7 @@ struct CoinEntry {\n     char key;\n     explicit CoinEntry(const COutPoint* ptr) : outpoint(const_cast<COutPoint*>(ptr)), key(DB_COIN)  {}\n \n-    template<typename Stream>\n-    void Serialize(Stream &s) const {\n-        s << key;\n-        s << outpoint->hash;\n-        s << VARINT(outpoint->n);\n-    }\n-\n-    template<typename Stream>\n-    void Unserialize(Stream& s) {\n-        s >> key;\n-        s >> outpoint->hash;\n-        s >> VARINT(outpoint->n);\n-    }\n+    SERIALIZE_METHODS(CoinEntry, obj) { READWRITE(obj.key, obj.outpoint->hash, VARINT(obj.outpoint->n)); }\n };\n \n }"
      }
    ]
  },
  {
    "sha": "f9ee0f37c28f604bc82dab502ce229c66ef5b3b9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmOWVlMGYzN2MyOGY2MDRiYzgyZGFiNTAyY2UyMjljNjZlZjViM2I5",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-05-19T21:30:30Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-05-19T21:30:30Z"
      },
      "message": "Add comments to CustomUintFormatter",
      "tree": {
        "sha": "be73b9290c400e8b36e3441a71ba24448c5f537e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/be73b9290c400e8b36e3441a71ba24448c5f537e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f9ee0f37c28f604bc82dab502ce229c66ef5b3b9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f9ee0f37c28f604bc82dab502ce229c66ef5b3b9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f9ee0f37c28f604bc82dab502ce229c66ef5b3b9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f9ee0f37c28f604bc82dab502ce229c66ef5b3b9/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4eb5643e3538863c9d2ff261f49a9a1b248de243",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4eb5643e3538863c9d2ff261f49a9a1b248de243",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4eb5643e3538863c9d2ff261f49a9a1b248de243"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 9,
      "deletions": 0
    },
    "files": [
      {
        "sha": "af49fb701aea6a570a4bee9848950faf7ef5d9c5",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f9ee0f37c28f604bc82dab502ce229c66ef5b3b9/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f9ee0f37c28f604bc82dab502ce229c66ef5b3b9/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=f9ee0f37c28f604bc82dab502ce229c66ef5b3b9",
        "patch": "@@ -520,6 +520,15 @@ struct VarIntFormatter\n     }\n };\n \n+/** Serialization wrapper class for custom integers and enums.\n+ *\n+ * It permits specifying the serialized size (1 to 8 bytes) and endianness.\n+ *\n+ * Use the big endian mode for values that are stored in memory in native\n+ * byte order, but serialized in big endian notation. This is only intended\n+ * to implement serializers that are compatible with existing formats, and\n+ * its use is not recommended for new data structures.\n+ */\n template<int Bytes, bool BigEndian = false>\n struct CustomUintFormatter\n {"
      }
    ]
  }
]