[
  {
    "sha": "fa8f6b27b964701c6c89174b18a20d623e4de456",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYThmNmIyN2I5NjQ3MDFjNmM4OTE3NGIxOGEyMGQ2MjNlNGRlNDU2",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-04-17T17:24:42Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-06-12T21:32:44Z"
      },
      "message": "rpc: Check that left section is not multiline",
      "tree": {
        "sha": "6059bff0bdd6547fc7884c3832f42af92349f014",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6059bff0bdd6547fc7884c3832f42af92349f014"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa8f6b27b964701c6c89174b18a20d623e4de456",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUiuzQv/aLP/agyECgJJPcmQlNUF646uS1siiYckX1vv9xIbw3SvaK34y0lxIcW9\ntsJm12rczH0PcElSBdENmyoK4P5XxrwEYKbTGqotqmFfhffabTsMBNn7qmp1sSga\ncyxrrKFPjPuWk8EaEc91SAs63+2WexYDYuAlRXr1jaf/QAVrlTU+UWaTMIKyT4Zj\nV36Z12lo6r8SgQ0sNZ7Ipkselo1YzQBJ2U84nAsj4JjfGV8OcnSZswgYyb/EKZoB\nHN4mIzwr8p7Uvb+U4dck5jzzBSpwhoJSSv4hicUmdw0CRaZYdeERSv514vM9Wsmw\nAGahh+w0Gt0453am2KBatDjtrR07l6KGW6Wi9s7NCRS791KMcLFy5hqO/I3MLU6G\n3nKDAr/L4z+GyRMjqi0oCa+U3m2f38p1wn0gqM2ROw+CrecR9rXkwGZz7F5lHfQS\nibHQIBO7/bVw/5xsdh/VYwPuJzVzILemTd2OzQfB8iXixUfbXD0K9noHfWJ4rUhl\nQv2Rtdll\n=tV8X\n-----END PGP SIGNATURE-----",
        "payload": "tree 6059bff0bdd6547fc7884c3832f42af92349f014\nparent 5af16a4db76f8c00b6c9598147ab49d79be1f149\nauthor MarcoFalke <falke.marco@gmail.com> 1587144282 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1591997564 -0400\n\nrpc: Check that left section is not multiline\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa8f6b27b964701c6c89174b18a20d623e4de456",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa8f6b27b964701c6c89174b18a20d623e4de456",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa8f6b27b964701c6c89174b18a20d623e4de456/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5af16a4db76f8c00b6c9598147ab49d79be1f149",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5af16a4db76f8c00b6c9598147ab49d79be1f149",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5af16a4db76f8c00b6c9598147ab49d79be1f149"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "35ec06b2547b8e22288a97c6cbb1f909f9d62494",
        "filename": "src/rpc/util.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa8f6b27b964701c6c89174b18a20d623e4de456/src/rpc/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa8f6b27b964701c6c89174b18a20d623e4de456/src/rpc/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.cpp?ref=fa8f6b27b964701c6c89174b18a20d623e4de456",
        "patch": "@@ -381,6 +381,9 @@ struct Sections {\n         std::string ret;\n         const size_t pad = m_max_pad + 4;\n         for (const auto& s : m_sections) {\n+            // The left part of a section is assumed to be a single line, usually it is the name of the JSON struct or a\n+            // brace like {, }, [, or ]\n+            CHECK_NONFATAL(s.m_left.find('\\n') == std::string::npos);\n             if (s.m_right.empty()) {\n                 ret += s.m_left;\n                 ret += \"\\n\";"
      }
    ]
  },
  {
    "sha": "fab2f3bb6446d5202b7a665cde1e7c0d02718e18",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWIyZjNiYjY0NDZkNTIwMmI3YTY2NWNkZTFlN2MwZDAyNzE4ZTE4",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-06-12T22:48:49Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-06-12T23:51:00Z"
      },
      "message": "refactor: Replace confusing OMITTED_NAMED_ARG with OMITTED",
      "tree": {
        "sha": "1429219c87517460002a8d527cdd67900b14551a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1429219c87517460002a8d527cdd67900b14551a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fab2f3bb6446d5202b7a665cde1e7c0d02718e18",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYEACgkQzit1aX5p\npUjmfAwAms6UMjbERyGMLlkiLCmQ9wxwb6Vd0lPOVduhkdozpqj/bYNhveZlos40\n3SuRLNjoxL2Edcf6GE1CSiely3ayXkswBJlgZHMf8b14aEbnufW1FEcB73vdZFO2\nbO0U5c/PYOn7wKPaj3uZ89SgSsItl2AR4Ps15c+4D2oN0htnV1BGtXPQR9BZUVGl\nAp3PMBf/qxthRa6JyXAUowaEgsU12AvipUI4Ce+wD67dXNnxchznzupUqVchn+AX\ny+YQ1qdJy9P8fZKUdGaFBn6OrNz+d+LrTQxKt9x3+uAAdUf6zyD9G338kIVv34r1\ntN4+rtsEnLNP//KWF2DLNnKs/HoLDk4jePlwb6yZhBIwtL3vopPn1O7Q4PtoU21Y\n204TlSlPMzcuLO2sGNBiECjdRJ4FptDwFXn0vmo1O3KfoCipeD8ougpxMsTamR2M\nMJoVZgxQYxnYChcpgXNTurkEMmwaj9qwwmIQR+DBoFi1y2buNDoBBlHT4+AmAWa5\nbmabruhU\n=twpk\n-----END PGP SIGNATURE-----",
        "payload": "tree 1429219c87517460002a8d527cdd67900b14551a\nparent fa8f6b27b964701c6c89174b18a20d623e4de456\nauthor MarcoFalke <falke.marco@gmail.com> 1592002129 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1592005860 -0400\n\nrefactor: Replace confusing OMITTED_NAMED_ARG with OMITTED\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fab2f3bb6446d5202b7a665cde1e7c0d02718e18",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fab2f3bb6446d5202b7a665cde1e7c0d02718e18",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fab2f3bb6446d5202b7a665cde1e7c0d02718e18/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa8f6b27b964701c6c89174b18a20d623e4de456",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa8f6b27b964701c6c89174b18a20d623e4de456",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa8f6b27b964701c6c89174b18a20d623e4de456"
      }
    ],
    "stats": {
      "total": 86,
      "additions": 39,
      "deletions": 47
    },
    "files": [
      {
        "sha": "c7890507a40ad2860f881f3656657fe07454a8e6",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab2f3bb6446d5202b7a665cde1e7c0d02718e18/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab2f3bb6446d5202b7a665cde1e7c0d02718e18/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=fab2f3bb6446d5202b7a665cde1e7c0d02718e18",
        "patch": "@@ -429,7 +429,7 @@ static UniValue prioritisetransaction(const JSONRPCRequest& request)\n                 \"Accepts the transaction into mined blocks at a higher (or lower) priority\\n\",\n                 {\n                     {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id.\"},\n-                    {\"dummy\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED_NAMED_ARG, \"API-Compatibility for previous API. Must be zero or null.\\n\"\n+                    {\"dummy\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"API-Compatibility for previous API. Must be zero or null.\\n\"\n             \"                  DEPRECATED. For forward compatibility use named arguments and omit this parameter.\"},\n                     {\"fee_delta\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The fee value (in satoshis) to add (or subtract, if negative).\\n\"\n             \"                  Note, that this value is not a fee rate. It is a value to modify absolute fee of the TX.\\n\"\n@@ -499,8 +499,8 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\n                 {\n                     {\"template_request\", RPCArg::Type::OBJ, \"{}\", \"Format of the template\",\n                         {\n-                            {\"mode\", RPCArg::Type::STR, /* treat as named arg */ RPCArg::Optional::OMITTED_NAMED_ARG, \"This must be set to \\\"template\\\", \\\"proposal\\\" (see BIP 23), or omitted\"},\n-                            {\"capabilities\", RPCArg::Type::ARR, /* treat as named arg */ RPCArg::Optional::OMITTED_NAMED_ARG, \"A list of strings\",\n+                            {\"mode\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"This must be set to \\\"template\\\", \\\"proposal\\\" (see BIP 23), or omitted\"},\n+                            {\"capabilities\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"The capabilities, can be omitted\",\n                                 {\n                                     {\"support\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"client side supported feature, 'longpoll', 'coinbasetxn', 'coinbasevalue', 'proposal', 'serverlist', 'workid'\"},\n                                 },"
      },
      {
        "sha": "33cdc921d1c5efd8c92f7031c4da42db74c90652",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab2f3bb6446d5202b7a665cde1e7c0d02718e18/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab2f3bb6446d5202b7a665cde1e7c0d02718e18/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=fab2f3bb6446d5202b7a665cde1e7c0d02718e18",
        "patch": "@@ -191,7 +191,7 @@ UniValue deriveaddresses(const JSONRPCRequest& request)\n             \"For more information on output descriptors, see the documentation in the doc/descriptors.md file.\\n\"},\n             {\n                 {\"descriptor\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The descriptor.\"},\n-                {\"range\", RPCArg::Type::RANGE, RPCArg::Optional::OMITTED_NAMED_ARG, \"If a ranged descriptor is used, this specifies the end or the range (in [begin,end] notation) to derive.\"},\n+                {\"range\", RPCArg::Type::RANGE, RPCArg::Optional::OMITTED, \"If a ranged descriptor is used, this specifies the end or the range (in [begin,end] notation) to derive.\"},\n             },\n             RPCResult{\n                 RPCResult::Type::ARR, \"\", \"\",\n@@ -524,11 +524,11 @@ UniValue logging(const JSONRPCRequest& request)\n             \"  - \\\"none\\\", \\\"0\\\" : even if other logging categories are specified, ignore all of them.\\n\"\n             ,\n                 {\n-                    {\"include\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"The categories to add to debug logging\",\n+                    {\"include\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"The categories to add to debug logging\",\n                         {\n                             {\"include_category\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"the valid logging category\"},\n                         }},\n-                    {\"exclude\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"The categories to remove from debug logging\",\n+                    {\"exclude\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"The categories to remove from debug logging\",\n                         {\n                             {\"exclude_category\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"the valid logging category\"},\n                         }},"
      },
      {
        "sha": "fc3c2b7315981cca4614a5af4abaedd1c8d1baf8",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab2f3bb6446d5202b7a665cde1e7c0d02718e18/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab2f3bb6446d5202b7a665cde1e7c0d02718e18/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=fab2f3bb6446d5202b7a665cde1e7c0d02718e18",
        "patch": "@@ -85,7 +85,7 @@ static UniValue getrawtransaction(const JSONRPCRequest& request)\n                 {\n                     {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n                     {\"verbose\", RPCArg::Type::BOOL, /* default */ \"false\", \"If false, return a string, otherwise return a json object\"},\n-                    {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED_NAMED_ARG, \"The block in which to look for the transaction\"},\n+                    {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"The block in which to look for the transaction\"},\n                 },\n                 {\n                     RPCResult{\"if verbose is not set or set to false\",\n@@ -230,7 +230,7 @@ static UniValue gettxoutproof(const JSONRPCRequest& request)\n                             {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"A transaction hash\"},\n                         },\n                         },\n-                    {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED_NAMED_ARG, \"If specified, looks for txid in the block with this hash\"},\n+                    {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"If specified, looks for txid in the block with this hash\"},\n                 },\n                 RPCResult{\n                     RPCResult::Type::STR, \"data\", \"A string that is a serialized, hex-encoded data for the proof.\"\n@@ -708,7 +708,7 @@ static UniValue signrawtransactionwithkey(const JSONRPCRequest& request)\n                             {\"privatekey\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"private key in base58-encoding\"},\n                         },\n                         },\n-                    {\"prevtxs\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"The previous dependent transaction outputs\",\n+                    {\"prevtxs\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"The previous dependent transaction outputs\",\n                         {\n                             {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n                                 {\n@@ -1518,7 +1518,7 @@ UniValue utxoupdatepsbt(const JSONRPCRequest& request)\n             \"\\nUpdates all segwit inputs and outputs in a PSBT with data from output descriptors, the UTXO set or the mempool.\\n\",\n             {\n                 {\"psbt\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A base64 string of a PSBT\"},\n-                {\"descriptors\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"An array of either strings or objects\", {\n+                {\"descriptors\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"An array of either strings or objects\", {\n                     {\"\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"An output descriptor\"},\n                     {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"An object with an output descriptor and extra information\", {\n                          {\"desc\", RPCArg::Type::STR, RPCArg::Optional::NO, \"An output descriptor\"},"
      },
      {
        "sha": "3b132e960e7f5ffda903db9ae765132ed5f394aa",
        "filename": "src/rpc/util.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 12,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab2f3bb6446d5202b7a665cde1e7c0d02718e18/src/rpc/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab2f3bb6446d5202b7a665cde1e7c0d02718e18/src/rpc/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.cpp?ref=fab2f3bb6446d5202b7a665cde1e7c0d02718e18",
        "patch": "@@ -500,7 +500,7 @@ std::string RPCHelpMan::ToString() const\n         if (i == 0) ret += \"\\nArguments:\\n\";\n \n         // Push named argument name and description\n-        sections.m_sections.emplace_back(::ToString(i + 1) + \". \" + arg.GetFirstName(), arg.ToDescriptionString());\n+        sections.m_sections.emplace_back(::ToString(i + 1) + \". \" + arg.GetFirstName(), arg.ToDescriptionString(/* is_top_level_arg */ true));\n         sections.m_max_pad = std::max(sections.m_max_pad, sections.m_sections.back().m_left.size());\n \n         // Recursively push nested args\n@@ -537,7 +537,7 @@ bool RPCArg::IsOptional() const\n     }\n }\n \n-std::string RPCArg::ToDescriptionString() const\n+std::string RPCArg::ToDescriptionString(const bool is_top_level_arg) const\n {\n     std::string ret;\n     ret += \"(\";\n@@ -575,29 +575,25 @@ std::string RPCArg::ToDescriptionString() const\n             ret += \"json array\";\n             break;\n         }\n-\n-            // no default case, so the compiler can warn about missing cases\n-        }\n+        } // no default case, so the compiler can warn about missing cases\n     }\n     if (m_fallback.which() == 1) {\n         ret += \", optional, default=\" + boost::get<std::string>(m_fallback);\n     } else {\n         switch (boost::get<RPCArg::Optional>(m_fallback)) {\n         case RPCArg::Optional::OMITTED: {\n+            if (is_top_level_arg) {\n+                ret += \", optional\"; // Default value is \"null\"\n+            }\n+            // else\n             // nothing to do. Element is treated as if not present and has no default value\n             break;\n         }\n-        case RPCArg::Optional::OMITTED_NAMED_ARG: {\n-            ret += \", optional\"; // Default value is \"null\"\n-            break;\n-        }\n         case RPCArg::Optional::NO: {\n             ret += \", required\";\n             break;\n         }\n-\n-            // no default case, so the compiler can warn about missing cases\n-        }\n+        } // no default case, so the compiler can warn about missing cases\n     }\n     ret += \")\";\n     ret += m_description.empty() ? \"\" : \" \" + m_description;"
      },
      {
        "sha": "1a3005ee84b9373fc476ff8bb4ace4591e9ffad1",
        "filename": "src/rpc/util.h",
        "status": "modified",
        "additions": 3,
        "deletions": 7,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab2f3bb6446d5202b7a665cde1e7c0d02718e18/src/rpc/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab2f3bb6446d5202b7a665cde1e7c0d02718e18/src/rpc/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.h?ref=fab2f3bb6446d5202b7a665cde1e7c0d02718e18",
        "patch": "@@ -128,15 +128,11 @@ struct RPCArg {\n     enum class Optional {\n         /** Required arg */\n         NO,\n-        /**\n-         * Optional arg that is a named argument and has a default value of\n-         * `null`. When possible, the default value should be specified.\n-         */\n-        OMITTED_NAMED_ARG,\n         /**\n          * Optional argument with default value omitted because they are\n          * implicitly clear. That is, elements in an array or object may not\n-         * exist by default.\n+         * exist by default. Alternatively, a named argument that has a default\n+         * value of `null`.\n          * When possible, the default value should be specified.\n          */\n         OMITTED,\n@@ -208,7 +204,7 @@ struct RPCArg {\n      * Return the description string, including the argument type and whether\n      * the argument is required.\n      */\n-    std::string ToDescriptionString() const;\n+    std::string ToDescriptionString(bool is_top_level_arg = false) const;\n };\n \n struct RPCResult {"
      },
      {
        "sha": "3d8c5fe10ab1ee9ed28ea7a506c58b89ed694df3",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab2f3bb6446d5202b7a665cde1e7c0d02718e18/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab2f3bb6446d5202b7a665cde1e7c0d02718e18/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=fab2f3bb6446d5202b7a665cde1e7c0d02718e18",
        "patch": "@@ -1286,7 +1286,7 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n                             },\n                         },\n                         \"\\\"requests\\\"\"},\n-                    {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                    {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n                         {\n                             {\"rescan\", RPCArg::Type::BOOL, /* default */ \"true\", \"Stating if should rescan the blockchain after all imports\"},\n                         },"
      },
      {
        "sha": "63faa7d41a6de116e7e99c9864c6aa66d623a29d",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 17,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab2f3bb6446d5202b7a665cde1e7c0d02718e18/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab2f3bb6446d5202b7a665cde1e7c0d02718e18/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=fab2f3bb6446d5202b7a665cde1e7c0d02718e18",
        "patch": "@@ -361,9 +361,9 @@ static UniValue sendtoaddress(const JSONRPCRequest& request)\n                 {\n                     {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The bitcoin address to send to.\"},\n                     {\"amount\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"The amount in \" + CURRENCY_UNIT + \" to send. eg 0.1\"},\n-                    {\"comment\", RPCArg::Type::STR, RPCArg::Optional::OMITTED_NAMED_ARG, \"A comment used to store what the transaction is for.\\n\"\n+                    {\"comment\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"A comment used to store what the transaction is for.\\n\"\n             \"                             This is not part of the transaction, just kept in your wallet.\"},\n-                    {\"comment_to\", RPCArg::Type::STR, RPCArg::Optional::OMITTED_NAMED_ARG, \"A comment to store the name of the person or organization\\n\"\n+                    {\"comment_to\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"A comment to store the name of the person or organization\\n\"\n             \"                             to which you're sending the transaction. This is not part of the \\n\"\n             \"                             transaction, just kept in your wallet.\"},\n                     {\"subtractfeefromamount\", RPCArg::Type::BOOL, /* default */ \"false\", \"The fee will be deducted from the amount being sent.\\n\"\n@@ -687,7 +687,7 @@ static UniValue getbalance(const JSONRPCRequest& request)\n                 \"The available balance is what the wallet considers currently spendable, and is\\n\"\n                 \"thus affected by options which limit spendability such as -spendzeroconfchange.\\n\",\n                 {\n-                    {\"dummy\", RPCArg::Type::STR, RPCArg::Optional::OMITTED_NAMED_ARG, \"Remains for backward compatibility. Must be excluded or set to \\\"*\\\".\"},\n+                    {\"dummy\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"Remains for backward compatibility. Must be excluded or set to \\\"*\\\".\"},\n                     {\"minconf\", RPCArg::Type::NUM, /* default */ \"0\", \"Only include transactions confirmed at least this many times.\"},\n                     {\"include_watchonly\", RPCArg::Type::BOOL, /* default */ \"true for watch-only wallets, otherwise false\", \"Also include balance in watch-only addresses (see 'importaddress')\"},\n                     {\"avoid_reuse\", RPCArg::Type::BOOL, /* default */ \"true\", \"(only available if avoid_reuse wallet flag is set) Do not include balance in dirty outputs; addresses are considered dirty if they have previously been used in a transaction.\"},\n@@ -769,9 +769,9 @@ static UniValue sendmany(const JSONRPCRequest& request)\n                             {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"The bitcoin address is the key, the numeric amount (can be string) in \" + CURRENCY_UNIT + \" is the value\"},\n                         },\n                     },\n-                    {\"minconf\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED_NAMED_ARG, \"Ignored dummy value\"},\n-                    {\"comment\", RPCArg::Type::STR, RPCArg::Optional::OMITTED_NAMED_ARG, \"A comment\"},\n-                    {\"subtractfeefrom\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"The addresses.\\n\"\n+                    {\"minconf\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"Ignored dummy value\"},\n+                    {\"comment\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"A comment\"},\n+                    {\"subtractfeefrom\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"The addresses.\\n\"\n             \"                           The fee will be equally deducted from the amount of each selected address.\\n\"\n             \"                           Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\"\n             \"                           If no addresses are specified here, the sender pays the fee.\",\n@@ -903,7 +903,7 @@ static UniValue addmultisigaddress(const JSONRPCRequest& request)\n                             {\"key\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"bitcoin address or hex-encoded public key\"},\n                         },\n                         },\n-                    {\"label\", RPCArg::Type::STR, RPCArg::Optional::OMITTED_NAMED_ARG, \"A label to assign the addresses to.\"},\n+                    {\"label\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"A label to assign the addresses to.\"},\n                     {\"address_type\", RPCArg::Type::STR, /* default */ \"set by -addresstype\", \"The address type to use. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n                 },\n                 RPCResult{\n@@ -1135,7 +1135,7 @@ static UniValue listreceivedbyaddress(const JSONRPCRequest& request)\n                     {\"minconf\", RPCArg::Type::NUM, /* default */ \"1\", \"The minimum number of confirmations before payments are included.\"},\n                     {\"include_empty\", RPCArg::Type::BOOL, /* default */ \"false\", \"Whether to include addresses that haven't received any payments.\"},\n                     {\"include_watchonly\", RPCArg::Type::BOOL, /* default */ \"true for watch-only wallets, otherwise false\", \"Whether to include watch-only addresses (see 'importaddress')\"},\n-                    {\"address_filter\", RPCArg::Type::STR, RPCArg::Optional::OMITTED_NAMED_ARG, \"If present, only return information on this address.\"},\n+                    {\"address_filter\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"If present, only return information on this address.\"},\n                 },\n                 RPCResult{\n                     RPCResult::Type::ARR, \"\", \"\",\n@@ -1339,7 +1339,7 @@ UniValue listtransactions(const JSONRPCRequest& request)\n                 \"\\nIf a label name is provided, this will return only incoming transactions paying to addresses with the specified label.\\n\"\n                 \"\\nReturns up to 'count' most recent transactions skipping the first 'from' transactions.\\n\",\n                 {\n-                    {\"label|dummy\", RPCArg::Type::STR, RPCArg::Optional::OMITTED_NAMED_ARG, \"If set, should be a valid label name to return only incoming transactions\\n\"\n+                    {\"label|dummy\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"If set, should be a valid label name to return only incoming transactions\\n\"\n                           \"with the specified label, or \\\"*\\\" to disable filtering and return all transactions.\"},\n                     {\"count\", RPCArg::Type::NUM, /* default */ \"10\", \"The number of transactions to return\"},\n                     {\"skip\", RPCArg::Type::NUM, /* default */ \"0\", \"The number of transactions to skip\"},\n@@ -1450,7 +1450,7 @@ static UniValue listsinceblock(const JSONRPCRequest& request)\n                 \"If \\\"blockhash\\\" is no longer a part of the main chain, transactions from the fork point onward are included.\\n\"\n                 \"Additionally, if include_removed is set, transactions affecting the wallet which were removed are returned in the \\\"removed\\\" array.\\n\",\n                 {\n-                    {\"blockhash\", RPCArg::Type::STR, RPCArg::Optional::OMITTED_NAMED_ARG, \"If set, the block hash to list transactions since, otherwise list all transactions.\"},\n+                    {\"blockhash\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"If set, the block hash to list transactions since, otherwise list all transactions.\"},\n                     {\"target_confirmations\", RPCArg::Type::NUM, /* default */ \"1\", \"Return the nth block hash from the main chain. e.g. 1 would mean the best block hash. Note: this is not used as a filter, but only affects [lastblock] in the return value\"},\n                     {\"include_watchonly\", RPCArg::Type::BOOL, /* default */ \"true for watch-only wallets, otherwise false\", \"Include transactions to watch-only addresses (see 'importaddress')\"},\n                     {\"include_removed\", RPCArg::Type::BOOL, /* default */ \"true\", \"Show transactions that were removed due to a reorg in the \\\"removed\\\" array\\n\"\n@@ -2723,7 +2723,7 @@ static UniValue listunspent(const JSONRPCRequest& request)\n                     },\n                     {\"include_unsafe\", RPCArg::Type::BOOL, /* default */ \"true\", \"Include outputs that are not safe to spend\\n\"\n             \"                  See description of \\\"safe\\\" attribute below.\"},\n-                    {\"query_options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"JSON with query options\",\n+                    {\"query_options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"JSON with query options\",\n                         {\n                             {\"minimumAmount\", RPCArg::Type::AMOUNT, /* default */ \"0\", \"Minimum value of each UTXO in \" + CURRENCY_UNIT + \"\"},\n                             {\"maximumAmount\", RPCArg::Type::AMOUNT, /* default */ \"unlimited\", \"Maximum value of each UTXO in \" + CURRENCY_UNIT + \"\"},\n@@ -3052,7 +3052,7 @@ static UniValue fundrawtransaction(const JSONRPCRequest& request)\n                 \"Only pay-to-pubkey, multisig, and P2SH versions thereof are currently supported for watch-only\\n\",\n                 {\n                     {\"hexstring\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The hex string of the raw transaction\"},\n-                    {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"for backward compatibility: passing in a true instead of an object will result in {\\\"includeWatching\\\":true}\",\n+                    {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"for backward compatibility: passing in a true instead of an object will result in {\\\"includeWatching\\\":true}\",\n                         {\n                             {\"changeAddress\", RPCArg::Type::STR, /* default */ \"pool address\", \"The bitcoin address to receive the change\"},\n                             {\"changePosition\", RPCArg::Type::NUM, /* default */ \"random\", \"The index of the change output\"},\n@@ -3142,7 +3142,7 @@ UniValue signrawtransactionwithwallet(const JSONRPCRequest& request)\n         HELP_REQUIRING_PASSPHRASE,\n                 {\n                     {\"hexstring\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The transaction hex string\"},\n-                    {\"prevtxs\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"The previous dependent transaction outputs\",\n+                    {\"prevtxs\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"The previous dependent transaction outputs\",\n                         {\n                             {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n                                 {\n@@ -3239,7 +3239,7 @@ static UniValue bumpfee(const JSONRPCRequest& request)\n                 \"returned by getnetworkinfo) to enter the node's mempool.\\n\",\n                 {\n                     {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The txid to be bumped\"},\n-                    {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                    {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n                         {\n                             {\"confTarget\", RPCArg::Type::NUM, /* default */ \"wallet default\", \"Confirmation target (in blocks)\"},\n                             {\"fee_rate\", RPCArg::Type::NUM, /* default */ \"fall back to 'confTarget'\", \"fee rate (NOT total fee) to pay, in \" + CURRENCY_UNIT + \" per kB\\n\"\n@@ -3400,7 +3400,7 @@ UniValue rescanblockchain(const JSONRPCRequest& request)\n                 \"Note: Use \\\"getwalletinfo\\\" to query the scanning progress.\\n\",\n                 {\n                     {\"start_height\", RPCArg::Type::NUM, /* default */ \"0\", \"block height where the rescan should start\"},\n-                    {\"stop_height\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED_NAMED_ARG, \"the last block height that should be scanned. If none is provided it will rescan up to the tip at return time of this call.\"},\n+                    {\"stop_height\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"the last block height that should be scanned. If none is provided it will rescan up to the tip at return time of this call.\"},\n                 },\n                 RPCResult{\n                     RPCResult::Type::OBJ, \"\", \"\",\n@@ -3791,7 +3791,7 @@ static UniValue listlabels(const JSONRPCRequest& request)\n             RPCHelpMan{\"listlabels\",\n                 \"\\nReturns the list of all labels, or labels that are assigned to addresses with a specific purpose.\\n\",\n                 {\n-                    {\"purpose\", RPCArg::Type::STR, RPCArg::Optional::OMITTED_NAMED_ARG, \"Address purpose to list labels for ('send','receive'). An empty string is the same as not providing this argument.\"},\n+                    {\"purpose\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"Address purpose to list labels for ('send','receive'). An empty string is the same as not providing this argument.\"},\n                 },\n                 RPCResult{\n                     RPCResult::Type::ARR, \"\", \"\",\n@@ -4008,7 +4008,7 @@ UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n                         },\n                     },\n                     {\"locktime\", RPCArg::Type::NUM, /* default */ \"0\", \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n-                    {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                    {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n                         {\n                             {\"changeAddress\", RPCArg::Type::STR_HEX, /* default */ \"pool address\", \"The bitcoin address to receive the change\"},\n                             {\"changePosition\", RPCArg::Type::NUM, /* default */ \"random\", \"The index of the change output\"},"
      }
    ]
  }
]