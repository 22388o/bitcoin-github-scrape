[
  {
    "sha": "e846a2a1d9e8aa37abfa55bd4d2a0a9f55ba6c8e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplODQ2YTJhMWQ5ZThhYTM3YWJmYTU1YmQ0ZDJhMGE5ZjU1YmE2Yzhl",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-05-27T20:15:50Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-07-09T06:00:11Z"
      },
      "message": "refactor: clean up PeriodicFlush()",
      "tree": {
        "sha": "f22758bce27765ee4e8daf0a45711de6d9369d76",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f22758bce27765ee4e8daf0a45711de6d9369d76"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e846a2a1d9e8aa37abfa55bd4d2a0a9f55ba6c8e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e846a2a1d9e8aa37abfa55bd4d2a0a9f55ba6c8e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e846a2a1d9e8aa37abfa55bd4d2a0a9f55ba6c8e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e846a2a1d9e8aa37abfa55bd4d2a0a9f55ba6c8e/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f7c19e829eca10ce8b4acafc61264f8bb9b922f3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f7c19e829eca10ce8b4acafc61264f8bb9b922f3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f7c19e829eca10ce8b4acafc61264f8bb9b922f3"
      }
    ],
    "stats": {
      "total": 53,
      "additions": 22,
      "deletions": 31
    },
    "files": [
      {
        "sha": "5f823d5906bd569a65f10b21681c418b30616cd0",
        "filename": "src/wallet/bdb.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 31,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e846a2a1d9e8aa37abfa55bd4d2a0a9f55ba6c8e/src/wallet/bdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e846a2a1d9e8aa37abfa55bd4d2a0a9f55ba6c8e/src/wallet/bdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/bdb.cpp?ref=e846a2a1d9e8aa37abfa55bd4d2a0a9f55ba6c8e",
        "patch": "@@ -615,42 +615,33 @@ void BerkeleyEnvironment::Flush(bool fShutdown)\n \n bool BerkeleyDatabase::PeriodicFlush()\n {\n-    if (IsDummy()) {\n-        return true;\n-    }\n-    bool ret = false;\n+    // There's nothing to do for dummy databases. Return true.\n+    if (IsDummy()) return true;\n+\n+    // Don't flush if we can't acquire the lock.\n     TRY_LOCK(cs_db, lockDb);\n-    if (lockDb)\n-    {\n-        // Don't do this if any databases are in use\n-        int nRefCount = 0;\n-        std::map<std::string, int>::iterator mit = env->mapFileUseCount.begin();\n-        while (mit != env->mapFileUseCount.end())\n-        {\n-            nRefCount += (*mit).second;\n-            mit++;\n-        }\n+    if (!lockDb) return false;\n \n-        if (nRefCount == 0)\n-        {\n-            std::map<std::string, int>::iterator mi = env->mapFileUseCount.find(strFile);\n-            if (mi != env->mapFileUseCount.end())\n-            {\n-                LogPrint(BCLog::WALLETDB, \"Flushing %s\\n\", strFile);\n-                int64_t nStart = GetTimeMillis();\n+    // Don't flush if any databases are in use\n+    for (auto it = env->mapFileUseCount.begin() ; it != env->mapFileUseCount.end(); it++) {\n+        if ((*it).second > 0) return false;\n+    }\n \n-                // Flush wallet file so it's self contained\n-                env->CloseDb(strFile);\n-                env->CheckpointLSN(strFile);\n+    // Don't flush if there haven't been any batch writes for this database.\n+    auto it = env->mapFileUseCount.find(strFile);\n+    if (it == env->mapFileUseCount.end()) return false;\n \n-                env->mapFileUseCount.erase(mi++);\n-                LogPrint(BCLog::WALLETDB, \"Flushed %s %dms\\n\", strFile, GetTimeMillis() - nStart);\n-                ret = true;\n-            }\n-        }\n-    }\n+    LogPrint(BCLog::WALLETDB, \"Flushing %s\\n\", strFile);\n+    int64_t nStart = GetTimeMillis();\n+\n+    // Flush wallet file so it's self contained\n+    env->CloseDb(strFile);\n+    env->CheckpointLSN(strFile);\n+    env->mapFileUseCount.erase(it);\n \n-    return ret;\n+    LogPrint(BCLog::WALLETDB, \"Flushed %s %dms\\n\", strFile, GetTimeMillis() - nStart);\n+\n+    return true;\n }\n \n bool BerkeleyDatabase::Backup(const std::string& strDest) const"
      }
    ]
  }
]