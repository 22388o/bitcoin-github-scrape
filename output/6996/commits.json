[
  {
    "sha": "5127c4f21ca3f092b3a853833631dfc7f9c9456b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MTI3YzRmMjFjYTNmMDkyYjNhODUzODMzNjMxZGZjN2Y5Yzk0NTZi",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-08-26T21:05:09Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-08-26T21:05:45Z"
      },
      "message": "Add preciousblock RPC\n\nIncludes a bugfix by Luke-Jr.",
      "tree": {
        "sha": "a325ed7934f5d5ac0e3ac7ff3b393f2fce33abcc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a325ed7934f5d5ac0e3ac7ff3b393f2fce33abcc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5127c4f21ca3f092b3a853833631dfc7f9c9456b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5127c4f21ca3f092b3a853833631dfc7f9c9456b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5127c4f21ca3f092b3a853833631dfc7f9c9456b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5127c4f21ca3f092b3a853833631dfc7f9c9456b/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c072b8fd95cd4fa84f08189a0cd8b173ea2dbb8e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c072b8fd95cd4fa84f08189a0cd8b173ea2dbb8e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c072b8fd95cd4fa84f08189a0cd8b173ea2dbb8e"
      }
    ],
    "stats": {
      "total": 83,
      "additions": 80,
      "deletions": 3
    },
    "files": [
      {
        "sha": "bf801c5cbec123b68a0abe2c025c3b129317259f",
        "filename": "src/chain.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5127c4f21ca3f092b3a853833631dfc7f9c9456b/src/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5127c4f21ca3f092b3a853833631dfc7f9c9456b/src/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.h?ref=5127c4f21ca3f092b3a853833631dfc7f9c9456b",
        "patch": "@@ -200,7 +200,7 @@ class CBlockIndex\n     unsigned int nNonce;\n \n     //! (memory only) Sequential id assigned to distinguish order in which blocks are received.\n-    uint32_t nSequenceId;\n+    int32_t nSequenceId;\n \n     void SetNull()\n     {"
      },
      {
        "sha": "8456039c8ffd9eed6c2a903a70b200291f94dd61",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 2,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5127c4f21ca3f092b3a853833631dfc7f9c9456b/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5127c4f21ca3f092b3a853833631dfc7f9c9456b/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=5127c4f21ca3f092b3a853833631dfc7f9c9456b",
        "patch": "@@ -167,7 +167,11 @@ namespace {\n      */\n     CCriticalSection cs_nBlockSequenceId;\n     /** Blocks loaded from disk are assigned id 0, so start the counter at 1. */\n-    uint32_t nBlockSequenceId = 1;\n+    int32_t nBlockSequenceId = 1;\n+    /** Decreasing counter (used by subsequent preciousblock calls). */\n+    int32_t nBlockReverseSequenceId = -1;\n+    /** chainwork for the last block that preciousblock has been applied to. */\n+    arith_uint256 nLastPreciousChainwork = 0;\n \n     /**\n      * Sources of received blocks, saved to be able to send them reject\n@@ -3107,6 +3111,36 @@ bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams,\n     return true;\n }\n \n+\n+bool PreciousBlock(CValidationState& state, const CChainParams& params, CBlockIndex *pindex)\n+{\n+    {\n+        LOCK(cs_main);\n+        if (pindex->nChainWork < chainActive.Tip()->nChainWork) {\n+            // Nothing to do, this block is not at the tip.\n+            return true;\n+        }\n+        if (chainActive.Tip()->nChainWork > nLastPreciousChainwork) {\n+            // The chain has been extended since the last call, reset the counter.\n+            nBlockReverseSequenceId = -1;\n+        }\n+        nLastPreciousChainwork = chainActive.Tip()->nChainWork;\n+        setBlockIndexCandidates.erase(pindex);\n+        pindex->nSequenceId = nBlockReverseSequenceId;\n+        if (nBlockReverseSequenceId > std::numeric_limits<int32_t>::min()) {\n+            // We can't keep reducing the counter if somebody really wants to\n+            // call preciousblock 2**31-1 times on the same set of tips...\n+            nBlockReverseSequenceId--;\n+        }\n+        if (pindex->IsValid(BLOCK_VALID_TRANSACTIONS) && pindex->nChainTx) {\n+            setBlockIndexCandidates.insert(pindex);\n+            PruneBlockIndexCandidates();\n+        }\n+    }\n+\n+    return ActivateBestChain(state, params);\n+}\n+\n bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex *pindex)\n {\n     AssertLockHeld(cs_main);\n@@ -4501,7 +4535,7 @@ void static CheckBlockIndex(const Consensus::Params& consensusParams)\n             assert(pindex->GetBlockHash() == consensusParams.hashGenesisBlock); // Genesis block's hash must match.\n             assert(pindex == chainActive.Genesis()); // The current active chain's genesis block must be this block.\n         }\n-        if (pindex->nChainTx == 0) assert(pindex->nSequenceId == 0);  // nSequenceId can't be set for blocks that aren't linked\n+        if (pindex->nChainTx == 0) assert(pindex->nSequenceId <= 0);  // nSequenceId can't be set positive for blocks that aren't linked (negative is used for preciousblock)\n         // VALID_TRANSACTIONS is equivalent to nTx > 0 for all nodes (whether or not pruning has occurred).\n         // HAVE_DATA is only equivalent to nTx > 0 (or VALID_TRANSACTIONS) if no pruning has occurred.\n         if (!fHavePruned) {"
      },
      {
        "sha": "f809f89812860946e8e98468925e06cf390195b4",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5127c4f21ca3f092b3a853833631dfc7f9c9456b/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5127c4f21ca3f092b3a853833631dfc7f9c9456b/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=5127c4f21ca3f092b3a853833631dfc7f9c9456b",
        "patch": "@@ -499,6 +499,9 @@ class CVerifyDB {\n /** Find the last common block between the parameter chain and a locator. */\n CBlockIndex* FindForkInGlobalIndex(const CChain& chain, const CBlockLocator& locator);\n \n+/** Mark a block as precious and reorganize. */\n+bool PreciousBlock(CValidationState& state, const CChainParams& params, CBlockIndex *pindex);\n+\n /** Mark a block as invalid. */\n bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex *pindex);\n "
      },
      {
        "sha": "75f49e939bac81f203e2042cf9f9dffe16daa6cc",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 40,
        "deletions": 0,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5127c4f21ca3f092b3a853833631dfc7f9c9456b/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5127c4f21ca3f092b3a853833631dfc7f9c9456b/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=5127c4f21ca3f092b3a853833631dfc7f9c9456b",
        "patch": "@@ -1105,6 +1105,44 @@ UniValue getmempoolinfo(const UniValue& params, bool fHelp)\n     return mempoolInfoToJSON();\n }\n \n+UniValue preciousblock(const UniValue& params, bool fHelp)\n+{\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"preciousblock \\\"hash\\\"\\n\"\n+            \"\\nTreats a block as if it were received before others with the same work.\\n\"\n+            \"\\nA later preciousblock call can override the effect of an earlier one.\\n\"\n+            \"\\nThe effects of preciousblock are not retained across restarts.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. hash   (string, required) the hash of the block to mark as precious\\n\"\n+            \"\\nResult:\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"preciousblock\", \"\\\"blockhash\\\"\")\n+            + HelpExampleRpc(\"preciousblock\", \"\\\"blockhash\\\"\")\n+        );\n+\n+    std::string strHash = params[0].get_str();\n+    uint256 hash(uint256S(strHash));\n+    CBlockIndex* pblockindex;\n+\n+    {\n+        LOCK(cs_main);\n+        if (mapBlockIndex.count(hash) == 0)\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+\n+        pblockindex = mapBlockIndex[hash];\n+    }\n+\n+    CValidationState state;\n+    PreciousBlock(state, Params(), pblockindex);\n+\n+    if (!state.IsValid()) {\n+        throw JSONRPCError(RPC_DATABASE_ERROR, state.GetRejectReason());\n+    }\n+\n+    return NullUniValue;\n+}\n+\n UniValue invalidateblock(const UniValue& params, bool fHelp)\n {\n     if (fHelp || params.size() != 1)\n@@ -1200,6 +1238,8 @@ static const CRPCCommand commands[] =\n     { \"blockchain\",         \"gettxoutsetinfo\",        &gettxoutsetinfo,        true  },\n     { \"blockchain\",         \"verifychain\",            &verifychain,            true  },\n \n+    { \"blockchain\",         \"preciousblock\",          &preciousblock,          true  },\n+\n     /* Not shown in help */\n     { \"hidden\",             \"invalidateblock\",        &invalidateblock,        true  },\n     { \"hidden\",             \"reconsiderblock\",        &reconsiderblock,        true  },"
      }
    ]
  },
  {
    "sha": "5805ac836c5847bc54cbef3e71154d022ca18eda",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ODA1YWM4MzZjNTg0N2JjNTRjYmVmM2U3MTE1NGQwMjJjYTE4ZWRh",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-08-26T21:05:26Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-08-26T21:06:09Z"
      },
      "message": "Add preciousblock tests\n\nRebased, improved and extended by Luke-Jr.",
      "tree": {
        "sha": "ffc29daad2dbdc6c77229b680968558acc26d71e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ffc29daad2dbdc6c77229b680968558acc26d71e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5805ac836c5847bc54cbef3e71154d022ca18eda",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5805ac836c5847bc54cbef3e71154d022ca18eda",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5805ac836c5847bc54cbef3e71154d022ca18eda",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5805ac836c5847bc54cbef3e71154d022ca18eda/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5127c4f21ca3f092b3a853833631dfc7f9c9456b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5127c4f21ca3f092b3a853833631dfc7f9c9456b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5127c4f21ca3f092b3a853833631dfc7f9c9456b"
      }
    ],
    "stats": {
      "total": 127,
      "additions": 127,
      "deletions": 0
    },
    "files": [
      {
        "sha": "bd5c5f8e1892e26e0796075acd269c218900c206",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5805ac836c5847bc54cbef3e71154d022ca18eda/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5805ac836c5847bc54cbef3e71154d022ca18eda/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=5805ac836c5847bc54cbef3e71154d022ca18eda",
        "patch": "@@ -140,6 +140,7 @@\n     'invalidtxrequest.py',\n     'abandonconflict.py',\n     'p2p-versionbits-warning.py',\n+    'preciousblock.py',\n     'importprunedfunds.py',\n     'signmessages.py',\n     'p2p-compactblocks.py',"
      },
      {
        "sha": "854dcc7251d1d4625af810a58ea75523430f83f4",
        "filename": "qa/rpc-tests/preciousblock.py",
        "status": "added",
        "additions": 116,
        "deletions": 0,
        "changes": 116,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5805ac836c5847bc54cbef3e71154d022ca18eda/qa/rpc-tests/preciousblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5805ac836c5847bc54cbef3e71154d022ca18eda/qa/rpc-tests/preciousblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/preciousblock.py?ref=5805ac836c5847bc54cbef3e71154d022ca18eda",
        "patch": "@@ -0,0 +1,116 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2015 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#\n+# Test PreciousBlock code\n+#\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+\n+def unidirectional_node_sync_via_rpc(node_src, node_dest):\n+    blocks_to_copy = []\n+    blockhash = node_src.getbestblockhash()\n+    while True:\n+        try:\n+            assert(len(node_dest.getblock(blockhash, False)) > 0)\n+            break\n+        except:\n+            blocks_to_copy.append(blockhash)\n+            blockhash = node_src.getblockheader(blockhash, True)['previousblockhash']\n+    blocks_to_copy.reverse()\n+    for blockhash in blocks_to_copy:\n+        blockdata = node_src.getblock(blockhash, False)\n+        assert(node_dest.submitblock(blockdata) in (None, 'inconclusive'))\n+\n+def node_sync_via_rpc(nodes):\n+    for node_src in nodes:\n+        for node_dest in nodes:\n+            if node_src is node_dest:\n+                continue\n+            unidirectional_node_sync_via_rpc(node_src, node_dest)\n+\n+class PreciousTest(BitcoinTestFramework):\n+    def setup_chain(self):\n+        print(\"Initializing test directory \"+self.options.tmpdir)\n+        initialize_chain_clean(self.options.tmpdir, 3)\n+\n+    def setup_network(self):\n+        self.nodes = []\n+        self.is_network_split = False\n+        self.nodes.append(start_node(0, self.options.tmpdir, [\"-debug\"]))\n+        self.nodes.append(start_node(1, self.options.tmpdir, [\"-debug\"]))\n+        self.nodes.append(start_node(2, self.options.tmpdir, [\"-debug\"]))\n+\n+    def run_test(self):\n+        print(\"Ensure submitblock can in principle reorg to a competing chain\")\n+        self.nodes[0].generate(1)\n+        assert(self.nodes[0].getblockcount() == 1)\n+        (hashY, hashZ) = self.nodes[1].generate(2)\n+        assert(self.nodes[1].getblockcount() == 2)\n+        node_sync_via_rpc(self.nodes[0:3])\n+        assert(self.nodes[0].getbestblockhash() == hashZ)\n+\n+        print(\"Mine blocks A-B-C on Node 0\")\n+        (hashA, hashB, hashC) = self.nodes[0].generate(3)\n+        assert(self.nodes[0].getblockcount() == 5)\n+        print(\"Mine competing blocks E-F-G on Node 1\")\n+        (hashE, hashF, hashG) = self.nodes[1].generate(3)\n+        assert(self.nodes[1].getblockcount() == 5)\n+        assert(hashC != hashG)\n+        print(\"Connect nodes and check no reorg occurs\")\n+        # Submit competing blocks via RPC so any reorg should occur before we proceed (no way to wait on inaction for p2p sync)\n+        node_sync_via_rpc(self.nodes[0:2])\n+        connect_nodes_bi(self.nodes,0,1)\n+        assert(self.nodes[0].getbestblockhash() == hashC)\n+        assert(self.nodes[1].getbestblockhash() == hashG)\n+        print(\"Make Node0 prefer block G\")\n+        self.nodes[0].preciousblock(hashG)\n+        assert(self.nodes[0].getbestblockhash() == hashG)\n+        print(\"Make Node0 prefer block C again\")\n+        self.nodes[0].preciousblock(hashC)\n+        assert(self.nodes[0].getbestblockhash() == hashC)\n+        print(\"Make Node1 prefer block C\")\n+        self.nodes[1].preciousblock(hashC)\n+        sync_chain(self.nodes[0:2]) # wait because node 1 may not have downloaded hashC\n+        assert(self.nodes[1].getbestblockhash() == hashC)\n+        print(\"Make Node1 prefer block G again\")\n+        self.nodes[1].preciousblock(hashG)\n+        assert(self.nodes[1].getbestblockhash() == hashG)\n+        print(\"Make Node0 prefer block G again\")\n+        self.nodes[0].preciousblock(hashG)\n+        assert(self.nodes[0].getbestblockhash() == hashG)\n+        print(\"Make Node1 prefer block C again\")\n+        self.nodes[1].preciousblock(hashC)\n+        assert(self.nodes[1].getbestblockhash() == hashC)\n+        print(\"Mine another block (E-F-G-)H on Node 0 and reorg Node 1\")\n+        self.nodes[0].generate(1)\n+        assert(self.nodes[0].getblockcount() == 6)\n+        sync_blocks(self.nodes[0:2])\n+        hashH = self.nodes[0].getbestblockhash()\n+        assert(self.nodes[1].getbestblockhash() == hashH)\n+        print(\"Node1 should not be able to prefer block C anymore\")\n+        self.nodes[1].preciousblock(hashC)\n+        assert(self.nodes[1].getbestblockhash() == hashH)\n+        print(\"Mine competing blocks I-J-K-L on Node 2\")\n+        self.nodes[2].generate(4)\n+        assert(self.nodes[2].getblockcount() == 6)\n+        hashL = self.nodes[2].getbestblockhash()\n+        print(\"Connect nodes and check no reorg occurs\")\n+        node_sync_via_rpc(self.nodes[0:3])\n+        connect_nodes_bi(self.nodes,1,2)\n+        connect_nodes_bi(self.nodes,0,2)\n+        assert(self.nodes[0].getbestblockhash() == hashH)\n+        assert(self.nodes[1].getbestblockhash() == hashH)\n+        assert(self.nodes[2].getbestblockhash() == hashL)\n+        print(\"Make Node1 prefer block L\")\n+        self.nodes[1].preciousblock(hashL)\n+        assert(self.nodes[1].getbestblockhash() == hashL)\n+        print(\"Make Node2 prefer block H\")\n+        self.nodes[2].preciousblock(hashH)\n+        assert(self.nodes[2].getbestblockhash() == hashH)\n+\n+if __name__ == '__main__':\n+    PreciousTest().main()"
      },
      {
        "sha": "bc0b801ff49a4175c95ac90a42e5e12d8d00cbbf",
        "filename": "qa/rpc-tests/test_framework/util.py",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5805ac836c5847bc54cbef3e71154d022ca18eda/qa/rpc-tests/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5805ac836c5847bc54cbef3e71154d022ca18eda/qa/rpc-tests/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/util.py?ref=5805ac836c5847bc54cbef3e71154d022ca18eda",
        "patch": "@@ -133,6 +133,16 @@ def sync_blocks(rpc_connections, wait=1, timeout=60):\n         timeout -= wait\n     raise AssertionError(\"Block sync failed\")\n \n+def sync_chain(rpc_connections, wait=1):\n+    \"\"\"\n+    Wait until everybody has the same best block\n+    \"\"\"\n+    while True:\n+        counts = [ x.getbestblockhash() for x in rpc_connections ]\n+        if counts == [ counts[0] ]*len(counts):\n+            break\n+        time.sleep(wait)\n+\n def sync_mempools(rpc_connections, wait=1, timeout=60):\n     \"\"\"\n     Wait until everybody has the same transactions in their memory"
      }
    ]
  }
]