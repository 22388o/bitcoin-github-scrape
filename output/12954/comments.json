[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/380687818",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/12954#issuecomment-380687818",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12954",
    "id": 380687818,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MDY4NzgxOA==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-12T05:57:32Z",
    "updated_at": "2018-04-12T05:57:32Z",
    "author_association": "MEMBER",
    "body": "Concept ACK, splitting the logging functionality out of util makes sense, util.cpp is large, haphazard and this is a clearly distinguishable concern from the rest.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/380687818/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/381141887",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/12954#issuecomment-381141887",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12954",
    "id": 381141887,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MTE0MTg4Nw==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-13T13:51:30Z",
    "updated_at": "2018-04-13T13:51:30Z",
    "author_association": "MEMBER",
    "body": "Concept ACK. Needs rebase",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/381141887/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/382034468",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/12954#issuecomment-382034468",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12954",
    "id": 382034468,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MjAzNDQ2OA==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-17T15:26:52Z",
    "updated_at": "2018-04-17T15:26:52Z",
    "author_association": "MEMBER",
    "body": "Needs rebase again. (Since this has some Concept ACKs, but is somewhat largish, it might be easier to merge in two steps. First the move-only commit in a separate pull request and then the refactoring in this pull request)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/382034468/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/385395179",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/12954#issuecomment-385395179",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12954",
    "id": 385395179,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NTM5NTE3OQ==",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-30T13:17:37Z",
    "updated_at": "2018-04-30T13:17:37Z",
    "author_association": "MEMBER",
    "body": "utACK 8c2d695c4. Only difference is changing to range based for loops per https://github.com/bitcoin/bitcoin/pull/12954#discussion_r184163863",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/385395179/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/385582132",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/12954#issuecomment-385582132",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12954",
    "id": 385582132,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NTU4MjEzMg==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-01T02:10:51Z",
    "updated_at": "2018-05-01T02:10:51Z",
    "author_association": "MEMBER",
    "body": "utACK 8c2d695c4a45bdd9378c7970b0fcba6e1efc01f9. Nice to see this encapsulated.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/385582132/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/181610827",
    "pull_request_review_id": 112266750,
    "id": 181610827,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MTYxMDgyNw==",
    "diff_hunk": "@@ -75,99 +62,10 @@ inline std::string _(const char* psz)\n void SetupEnvironment();\n bool SetupNetworking();\n \n-struct CLogCategoryActive\n-{\n-    std::string category;\n-    bool active;\n-};\n-\n-namespace BCLog {\n-    enum LogFlags : uint32_t {\n-        NONE        = 0,\n-        NET         = (1 <<  0),\n-        TOR         = (1 <<  1),\n-        MEMPOOL     = (1 <<  2),\n-        HTTP        = (1 <<  3),\n-        BENCH       = (1 <<  4),\n-        ZMQ         = (1 <<  5),\n-        DB          = (1 <<  6),\n-        RPC         = (1 <<  7),\n-        ESTIMATEFEE = (1 <<  8),\n-        ADDRMAN     = (1 <<  9),\n-        SELECTCOINS = (1 << 10),\n-        REINDEX     = (1 << 11),\n-        CMPCTBLOCK  = (1 << 12),\n-        RAND        = (1 << 13),\n-        PRUNE       = (1 << 14),\n-        PROXY       = (1 << 15),\n-        MEMPOOLREJ  = (1 << 16),\n-        LIBEVENT    = (1 << 17),\n-        COINDB      = (1 << 18),\n-        QT          = (1 << 19),\n-        LEVELDB     = (1 << 20),\n-        ALL         = ~(uint32_t)0,\n-    };\n-}\n-/** Return true if log accepts specified category */\n-static inline bool LogAcceptCategory(uint32_t category)\n-{\n-    return (logCategories.load(std::memory_order_relaxed) & category) != 0;\n-}\n-\n-/** Returns a string with the log categories. */\n-std::string ListLogCategories();\n-\n-/** Returns a vector of the active log categories. */\n-std::vector<CLogCategoryActive> ListActiveLogCategories();\n-\n-/** Return true if str parses as a log category and set the flags in f */\n-bool GetLogCategory(uint32_t *f, const std::string *str);\n-\n-/** Send a string to the log output */\n-int LogPrintStr(const std::string &str);\n-\n-/** Get format string from VA_ARGS for error reporting */\n-template<typename... Args> std::string FormatStringFromLogArgs(const char *fmt, const Args&... args) { return fmt; }\n-\n-static inline void MarkUsed() {}\n-template<typename T, typename... Args> static inline void MarkUsed(const T& t, const Args&... args)\n-{\n-    (void)t;\n-    MarkUsed(args...);\n-}\n-\n-// Be conservative when using LogPrintf/error or other things which\n-// unconditionally log to debug.log! It should not be the case that an inbound\n-// peer can fill up a user's disk with debug.log entries.\n-\n-#ifdef USE_COVERAGE\n-#define LogPrintf(...) do { MarkUsed(__VA_ARGS__); } while(0)\n-#define LogPrint(category, ...) do { MarkUsed(__VA_ARGS__); } while(0)\n-#else\n-#define LogPrintf(...) do { \\\n-    if (fPrintToConsole || fPrintToDebugLog) { \\\n-        std::string _log_msg_; /* Unlikely name to avoid shadowing variables */ \\\n-        try { \\\n-            _log_msg_ = tfm::format(__VA_ARGS__); \\\n-        } catch (tinyformat::format_error &fmterr) { \\\n-            /* Original format string will have newline so don't add one here */ \\\n-            _log_msg_ = \"Error \\\"\" + std::string(fmterr.what()) + \"\\\" while formatting log message: \" + FormatStringFromLogArgs(__VA_ARGS__); \\\n-        } \\\n-        LogPrintStr(_log_msg_); \\\n-    } \\\n-} while(0)\n-\n-#define LogPrint(category, ...) do { \\\n-    if (LogAcceptCategory((category))) { \\\n-        LogPrintf(__VA_ARGS__); \\\n-    } \\\n-} while(0)\n-#endif\n-\n template<typename... Args>\n bool error(const char* fmt, const Args&... args)",
    "path": "src/util.h",
    "position": null,
    "original_position": 144,
    "commit_id": "8c2d695c4a45bdd9378c7970b0fcba6e1efc01f9",
    "original_commit_id": "67cd23663c6911e9cac4359b5dfd92a5d90563f2",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think this should move to logging as well, so the cyclic dependency between logging and util can be avoided.",
    "created_at": "2018-04-16T02:32:19Z",
    "updated_at": "2018-04-29T21:38:42Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/12954#discussion_r181610827",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12954",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/181610827"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/12954#discussion_r181610827"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12954"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/181610827/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 67,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/181612082",
    "pull_request_review_id": 112268120,
    "id": 181612082,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MTYxMjA4Mg==",
    "diff_hunk": "@@ -75,99 +62,10 @@ inline std::string _(const char* psz)\n void SetupEnvironment();\n bool SetupNetworking();\n \n-struct CLogCategoryActive\n-{\n-    std::string category;\n-    bool active;\n-};\n-\n-namespace BCLog {\n-    enum LogFlags : uint32_t {\n-        NONE        = 0,\n-        NET         = (1 <<  0),\n-        TOR         = (1 <<  1),\n-        MEMPOOL     = (1 <<  2),\n-        HTTP        = (1 <<  3),\n-        BENCH       = (1 <<  4),\n-        ZMQ         = (1 <<  5),\n-        DB          = (1 <<  6),\n-        RPC         = (1 <<  7),\n-        ESTIMATEFEE = (1 <<  8),\n-        ADDRMAN     = (1 <<  9),\n-        SELECTCOINS = (1 << 10),\n-        REINDEX     = (1 << 11),\n-        CMPCTBLOCK  = (1 << 12),\n-        RAND        = (1 << 13),\n-        PRUNE       = (1 << 14),\n-        PROXY       = (1 << 15),\n-        MEMPOOLREJ  = (1 << 16),\n-        LIBEVENT    = (1 << 17),\n-        COINDB      = (1 << 18),\n-        QT          = (1 << 19),\n-        LEVELDB     = (1 << 20),\n-        ALL         = ~(uint32_t)0,\n-    };\n-}\n-/** Return true if log accepts specified category */\n-static inline bool LogAcceptCategory(uint32_t category)\n-{\n-    return (logCategories.load(std::memory_order_relaxed) & category) != 0;\n-}\n-\n-/** Returns a string with the log categories. */\n-std::string ListLogCategories();\n-\n-/** Returns a vector of the active log categories. */\n-std::vector<CLogCategoryActive> ListActiveLogCategories();\n-\n-/** Return true if str parses as a log category and set the flags in f */\n-bool GetLogCategory(uint32_t *f, const std::string *str);\n-\n-/** Send a string to the log output */\n-int LogPrintStr(const std::string &str);\n-\n-/** Get format string from VA_ARGS for error reporting */\n-template<typename... Args> std::string FormatStringFromLogArgs(const char *fmt, const Args&... args) { return fmt; }\n-\n-static inline void MarkUsed() {}\n-template<typename T, typename... Args> static inline void MarkUsed(const T& t, const Args&... args)\n-{\n-    (void)t;\n-    MarkUsed(args...);\n-}\n-\n-// Be conservative when using LogPrintf/error or other things which\n-// unconditionally log to debug.log! It should not be the case that an inbound\n-// peer can fill up a user's disk with debug.log entries.\n-\n-#ifdef USE_COVERAGE\n-#define LogPrintf(...) do { MarkUsed(__VA_ARGS__); } while(0)\n-#define LogPrint(category, ...) do { MarkUsed(__VA_ARGS__); } while(0)\n-#else\n-#define LogPrintf(...) do { \\\n-    if (fPrintToConsole || fPrintToDebugLog) { \\\n-        std::string _log_msg_; /* Unlikely name to avoid shadowing variables */ \\\n-        try { \\\n-            _log_msg_ = tfm::format(__VA_ARGS__); \\\n-        } catch (tinyformat::format_error &fmterr) { \\\n-            /* Original format string will have newline so don't add one here */ \\\n-            _log_msg_ = \"Error \\\"\" + std::string(fmterr.what()) + \"\\\" while formatting log message: \" + FormatStringFromLogArgs(__VA_ARGS__); \\\n-        } \\\n-        LogPrintStr(_log_msg_); \\\n-    } \\\n-} while(0)\n-\n-#define LogPrint(category, ...) do { \\\n-    if (LogAcceptCategory((category))) { \\\n-        LogPrintf(__VA_ARGS__); \\\n-    } \\\n-} while(0)\n-#endif\n-\n template<typename... Args>\n bool error(const char* fmt, const Args&... args)",
    "path": "src/util.h",
    "position": null,
    "original_position": 144,
    "commit_id": "8c2d695c4a45bdd9378c7970b0fcba6e1efc01f9",
    "original_commit_id": "67cd23663c6911e9cac4359b5dfd92a5d90563f2",
    "user": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`LogPrintf` is also used in TraceThread, and I don't think either of them actually belong in logging (the whole point of this PR is to create a more cohesive separation). I can very easily imagine another method that gets added to util.h in the future requiring logging as well.\r\n\r\nThe dependency isn't really cyclic -- `logging.cpp` includes `util.h`, and `util.h` includes `logging.h`, but `logging.h` does not include `util.h`.",
    "created_at": "2018-04-16T02:47:39Z",
    "updated_at": "2018-04-29T21:38:42Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/12954#discussion_r181612082",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12954",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/181612082"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/12954#discussion_r181612082"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12954"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/181612082/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 67,
    "side": "RIGHT",
    "in_reply_to_id": 181610827
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/181628843",
    "pull_request_review_id": 112287026,
    "id": 181628843,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MTYyODg0Mw==",
    "diff_hunk": "@@ -75,99 +62,10 @@ inline std::string _(const char* psz)\n void SetupEnvironment();\n bool SetupNetworking();\n \n-struct CLogCategoryActive\n-{\n-    std::string category;\n-    bool active;\n-};\n-\n-namespace BCLog {\n-    enum LogFlags : uint32_t {\n-        NONE        = 0,\n-        NET         = (1 <<  0),\n-        TOR         = (1 <<  1),\n-        MEMPOOL     = (1 <<  2),\n-        HTTP        = (1 <<  3),\n-        BENCH       = (1 <<  4),\n-        ZMQ         = (1 <<  5),\n-        DB          = (1 <<  6),\n-        RPC         = (1 <<  7),\n-        ESTIMATEFEE = (1 <<  8),\n-        ADDRMAN     = (1 <<  9),\n-        SELECTCOINS = (1 << 10),\n-        REINDEX     = (1 << 11),\n-        CMPCTBLOCK  = (1 << 12),\n-        RAND        = (1 << 13),\n-        PRUNE       = (1 << 14),\n-        PROXY       = (1 << 15),\n-        MEMPOOLREJ  = (1 << 16),\n-        LIBEVENT    = (1 << 17),\n-        COINDB      = (1 << 18),\n-        QT          = (1 << 19),\n-        LEVELDB     = (1 << 20),\n-        ALL         = ~(uint32_t)0,\n-    };\n-}\n-/** Return true if log accepts specified category */\n-static inline bool LogAcceptCategory(uint32_t category)\n-{\n-    return (logCategories.load(std::memory_order_relaxed) & category) != 0;\n-}\n-\n-/** Returns a string with the log categories. */\n-std::string ListLogCategories();\n-\n-/** Returns a vector of the active log categories. */\n-std::vector<CLogCategoryActive> ListActiveLogCategories();\n-\n-/** Return true if str parses as a log category and set the flags in f */\n-bool GetLogCategory(uint32_t *f, const std::string *str);\n-\n-/** Send a string to the log output */\n-int LogPrintStr(const std::string &str);\n-\n-/** Get format string from VA_ARGS for error reporting */\n-template<typename... Args> std::string FormatStringFromLogArgs(const char *fmt, const Args&... args) { return fmt; }\n-\n-static inline void MarkUsed() {}\n-template<typename T, typename... Args> static inline void MarkUsed(const T& t, const Args&... args)\n-{\n-    (void)t;\n-    MarkUsed(args...);\n-}\n-\n-// Be conservative when using LogPrintf/error or other things which\n-// unconditionally log to debug.log! It should not be the case that an inbound\n-// peer can fill up a user's disk with debug.log entries.\n-\n-#ifdef USE_COVERAGE\n-#define LogPrintf(...) do { MarkUsed(__VA_ARGS__); } while(0)\n-#define LogPrint(category, ...) do { MarkUsed(__VA_ARGS__); } while(0)\n-#else\n-#define LogPrintf(...) do { \\\n-    if (fPrintToConsole || fPrintToDebugLog) { \\\n-        std::string _log_msg_; /* Unlikely name to avoid shadowing variables */ \\\n-        try { \\\n-            _log_msg_ = tfm::format(__VA_ARGS__); \\\n-        } catch (tinyformat::format_error &fmterr) { \\\n-            /* Original format string will have newline so don't add one here */ \\\n-            _log_msg_ = \"Error \\\"\" + std::string(fmterr.what()) + \"\\\" while formatting log message: \" + FormatStringFromLogArgs(__VA_ARGS__); \\\n-        } \\\n-        LogPrintStr(_log_msg_); \\\n-    } \\\n-} while(0)\n-\n-#define LogPrint(category, ...) do { \\\n-    if (LogAcceptCategory((category))) { \\\n-        LogPrintf(__VA_ARGS__); \\\n-    } \\\n-} while(0)\n-#endif\n-\n template<typename... Args>\n bool error(const char* fmt, const Args&... args)",
    "path": "src/util.h",
    "position": null,
    "original_position": 144,
    "commit_id": "8c2d695c4a45bdd9378c7970b0fcba6e1efc01f9",
    "original_commit_id": "67cd23663c6911e9cac4359b5dfd92a5d90563f2",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "My view is that you should always treat the .h and the .cpp file as one unit. While this may indeed not be a cyclic dependency for the compiler, it is certainly one between the two modules semantically: logging can't work without util, and util can't work without logging. Finding out why that is the case helps creating a cleaner separation.\r\n\r\nYou're right that util is going to depend on logging though, as it contains a number of higher level functions. However, It looks like logging only really needs util for finding the debug log path, though. All the rest is in utiltime. This seems easy to fix, by instead having init query the path and call a setter on logging for it for example. If other reviewers are fine with that, we can fix that up in another PR.\r\n\r\n",
    "created_at": "2018-04-16T06:04:15Z",
    "updated_at": "2018-04-29T21:38:42Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/12954#discussion_r181628843",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12954",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/181628843"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/12954#discussion_r181628843"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12954"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/181628843/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 67,
    "side": "RIGHT",
    "in_reply_to_id": 181610827
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182935595",
    "pull_request_review_id": 113837472,
    "id": 182935595,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjkzNTU5NQ==",
    "diff_hunk": "@@ -75,99 +62,10 @@ inline std::string _(const char* psz)\n void SetupEnvironment();\n bool SetupNetworking();\n \n-struct CLogCategoryActive\n-{\n-    std::string category;\n-    bool active;\n-};\n-\n-namespace BCLog {\n-    enum LogFlags : uint32_t {\n-        NONE        = 0,\n-        NET         = (1 <<  0),\n-        TOR         = (1 <<  1),\n-        MEMPOOL     = (1 <<  2),\n-        HTTP        = (1 <<  3),\n-        BENCH       = (1 <<  4),\n-        ZMQ         = (1 <<  5),\n-        DB          = (1 <<  6),\n-        RPC         = (1 <<  7),\n-        ESTIMATEFEE = (1 <<  8),\n-        ADDRMAN     = (1 <<  9),\n-        SELECTCOINS = (1 << 10),\n-        REINDEX     = (1 << 11),\n-        CMPCTBLOCK  = (1 << 12),\n-        RAND        = (1 << 13),\n-        PRUNE       = (1 << 14),\n-        PROXY       = (1 << 15),\n-        MEMPOOLREJ  = (1 << 16),\n-        LIBEVENT    = (1 << 17),\n-        COINDB      = (1 << 18),\n-        QT          = (1 << 19),\n-        LEVELDB     = (1 << 20),\n-        ALL         = ~(uint32_t)0,\n-    };\n-}\n-/** Return true if log accepts specified category */\n-static inline bool LogAcceptCategory(uint32_t category)\n-{\n-    return (logCategories.load(std::memory_order_relaxed) & category) != 0;\n-}\n-\n-/** Returns a string with the log categories. */\n-std::string ListLogCategories();\n-\n-/** Returns a vector of the active log categories. */\n-std::vector<CLogCategoryActive> ListActiveLogCategories();\n-\n-/** Return true if str parses as a log category and set the flags in f */\n-bool GetLogCategory(uint32_t *f, const std::string *str);\n-\n-/** Send a string to the log output */\n-int LogPrintStr(const std::string &str);\n-\n-/** Get format string from VA_ARGS for error reporting */\n-template<typename... Args> std::string FormatStringFromLogArgs(const char *fmt, const Args&... args) { return fmt; }\n-\n-static inline void MarkUsed() {}\n-template<typename T, typename... Args> static inline void MarkUsed(const T& t, const Args&... args)\n-{\n-    (void)t;\n-    MarkUsed(args...);\n-}\n-\n-// Be conservative when using LogPrintf/error or other things which\n-// unconditionally log to debug.log! It should not be the case that an inbound\n-// peer can fill up a user's disk with debug.log entries.\n-\n-#ifdef USE_COVERAGE\n-#define LogPrintf(...) do { MarkUsed(__VA_ARGS__); } while(0)\n-#define LogPrint(category, ...) do { MarkUsed(__VA_ARGS__); } while(0)\n-#else\n-#define LogPrintf(...) do { \\\n-    if (fPrintToConsole || fPrintToDebugLog) { \\\n-        std::string _log_msg_; /* Unlikely name to avoid shadowing variables */ \\\n-        try { \\\n-            _log_msg_ = tfm::format(__VA_ARGS__); \\\n-        } catch (tinyformat::format_error &fmterr) { \\\n-            /* Original format string will have newline so don't add one here */ \\\n-            _log_msg_ = \"Error \\\"\" + std::string(fmterr.what()) + \"\\\" while formatting log message: \" + FormatStringFromLogArgs(__VA_ARGS__); \\\n-        } \\\n-        LogPrintStr(_log_msg_); \\\n-    } \\\n-} while(0)\n-\n-#define LogPrint(category, ...) do { \\\n-    if (LogAcceptCategory((category))) { \\\n-        LogPrintf(__VA_ARGS__); \\\n-    } \\\n-} while(0)\n-#endif\n-\n template<typename... Args>\n bool error(const char* fmt, const Args&... args)",
    "path": "src/util.h",
    "position": null,
    "original_position": 144,
    "commit_id": "8c2d695c4a45bdd9378c7970b0fcba6e1efc01f9",
    "original_commit_id": "67cd23663c6911e9cac4359b5dfd92a5d90563f2",
    "user": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Last I looked, when reviewing #13021, I saw another approach to solving the cyclic dependency is to include utiltime.h in logging.cpp and splitting out args and path handling from util.h. Didn\u2019t go all the way to implementing that but would be happy to as a follow-on to #13021.",
    "created_at": "2018-04-20T03:03:42Z",
    "updated_at": "2018-04-29T21:38:42Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/12954#discussion_r182935595",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12954",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182935595"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/12954#discussion_r182935595"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12954"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182935595/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 67,
    "side": "RIGHT",
    "in_reply_to_id": 181610827
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182936010",
    "pull_request_review_id": 113837971,
    "id": 182936010,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjkzNjAxMA==",
    "diff_hunk": "@@ -75,99 +62,10 @@ inline std::string _(const char* psz)\n void SetupEnvironment();\n bool SetupNetworking();\n \n-struct CLogCategoryActive\n-{\n-    std::string category;\n-    bool active;\n-};\n-\n-namespace BCLog {\n-    enum LogFlags : uint32_t {\n-        NONE        = 0,\n-        NET         = (1 <<  0),\n-        TOR         = (1 <<  1),\n-        MEMPOOL     = (1 <<  2),\n-        HTTP        = (1 <<  3),\n-        BENCH       = (1 <<  4),\n-        ZMQ         = (1 <<  5),\n-        DB          = (1 <<  6),\n-        RPC         = (1 <<  7),\n-        ESTIMATEFEE = (1 <<  8),\n-        ADDRMAN     = (1 <<  9),\n-        SELECTCOINS = (1 << 10),\n-        REINDEX     = (1 << 11),\n-        CMPCTBLOCK  = (1 << 12),\n-        RAND        = (1 << 13),\n-        PRUNE       = (1 << 14),\n-        PROXY       = (1 << 15),\n-        MEMPOOLREJ  = (1 << 16),\n-        LIBEVENT    = (1 << 17),\n-        COINDB      = (1 << 18),\n-        QT          = (1 << 19),\n-        LEVELDB     = (1 << 20),\n-        ALL         = ~(uint32_t)0,\n-    };\n-}\n-/** Return true if log accepts specified category */\n-static inline bool LogAcceptCategory(uint32_t category)\n-{\n-    return (logCategories.load(std::memory_order_relaxed) & category) != 0;\n-}\n-\n-/** Returns a string with the log categories. */\n-std::string ListLogCategories();\n-\n-/** Returns a vector of the active log categories. */\n-std::vector<CLogCategoryActive> ListActiveLogCategories();\n-\n-/** Return true if str parses as a log category and set the flags in f */\n-bool GetLogCategory(uint32_t *f, const std::string *str);\n-\n-/** Send a string to the log output */\n-int LogPrintStr(const std::string &str);\n-\n-/** Get format string from VA_ARGS for error reporting */\n-template<typename... Args> std::string FormatStringFromLogArgs(const char *fmt, const Args&... args) { return fmt; }\n-\n-static inline void MarkUsed() {}\n-template<typename T, typename... Args> static inline void MarkUsed(const T& t, const Args&... args)\n-{\n-    (void)t;\n-    MarkUsed(args...);\n-}\n-\n-// Be conservative when using LogPrintf/error or other things which\n-// unconditionally log to debug.log! It should not be the case that an inbound\n-// peer can fill up a user's disk with debug.log entries.\n-\n-#ifdef USE_COVERAGE\n-#define LogPrintf(...) do { MarkUsed(__VA_ARGS__); } while(0)\n-#define LogPrint(category, ...) do { MarkUsed(__VA_ARGS__); } while(0)\n-#else\n-#define LogPrintf(...) do { \\\n-    if (fPrintToConsole || fPrintToDebugLog) { \\\n-        std::string _log_msg_; /* Unlikely name to avoid shadowing variables */ \\\n-        try { \\\n-            _log_msg_ = tfm::format(__VA_ARGS__); \\\n-        } catch (tinyformat::format_error &fmterr) { \\\n-            /* Original format string will have newline so don't add one here */ \\\n-            _log_msg_ = \"Error \\\"\" + std::string(fmterr.what()) + \"\\\" while formatting log message: \" + FormatStringFromLogArgs(__VA_ARGS__); \\\n-        } \\\n-        LogPrintStr(_log_msg_); \\\n-    } \\\n-} while(0)\n-\n-#define LogPrint(category, ...) do { \\\n-    if (LogAcceptCategory((category))) { \\\n-        LogPrintf(__VA_ARGS__); \\\n-    } \\\n-} while(0)\n-#endif\n-\n template<typename... Args>\n bool error(const char* fmt, const Args&... args)",
    "path": "src/util.h",
    "position": null,
    "original_position": 144,
    "commit_id": "8c2d695c4a45bdd9378c7970b0fcba6e1efc01f9",
    "original_commit_id": "67cd23663c6911e9cac4359b5dfd92a5d90563f2",
    "user": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Lol, didn\u2019t finish reading your comment @sipa. Anyway I\u2019m for it.",
    "created_at": "2018-04-20T03:08:03Z",
    "updated_at": "2018-04-29T21:38:42Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/12954#discussion_r182936010",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12954",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182936010"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/12954#discussion_r182936010"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12954"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182936010/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 67,
    "side": "RIGHT",
    "in_reply_to_id": 181610827
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182976829",
    "pull_request_review_id": 113886156,
    "id": 182976829,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4Mjk3NjgyOQ==",
    "diff_hunk": "@@ -75,99 +62,10 @@ inline std::string _(const char* psz)\n void SetupEnvironment();\n bool SetupNetworking();\n \n-struct CLogCategoryActive\n-{\n-    std::string category;\n-    bool active;\n-};\n-\n-namespace BCLog {\n-    enum LogFlags : uint32_t {\n-        NONE        = 0,\n-        NET         = (1 <<  0),\n-        TOR         = (1 <<  1),\n-        MEMPOOL     = (1 <<  2),\n-        HTTP        = (1 <<  3),\n-        BENCH       = (1 <<  4),\n-        ZMQ         = (1 <<  5),\n-        DB          = (1 <<  6),\n-        RPC         = (1 <<  7),\n-        ESTIMATEFEE = (1 <<  8),\n-        ADDRMAN     = (1 <<  9),\n-        SELECTCOINS = (1 << 10),\n-        REINDEX     = (1 << 11),\n-        CMPCTBLOCK  = (1 << 12),\n-        RAND        = (1 << 13),\n-        PRUNE       = (1 << 14),\n-        PROXY       = (1 << 15),\n-        MEMPOOLREJ  = (1 << 16),\n-        LIBEVENT    = (1 << 17),\n-        COINDB      = (1 << 18),\n-        QT          = (1 << 19),\n-        LEVELDB     = (1 << 20),\n-        ALL         = ~(uint32_t)0,\n-    };\n-}\n-/** Return true if log accepts specified category */\n-static inline bool LogAcceptCategory(uint32_t category)\n-{\n-    return (logCategories.load(std::memory_order_relaxed) & category) != 0;\n-}\n-\n-/** Returns a string with the log categories. */\n-std::string ListLogCategories();\n-\n-/** Returns a vector of the active log categories. */\n-std::vector<CLogCategoryActive> ListActiveLogCategories();\n-\n-/** Return true if str parses as a log category and set the flags in f */\n-bool GetLogCategory(uint32_t *f, const std::string *str);\n-\n-/** Send a string to the log output */\n-int LogPrintStr(const std::string &str);\n-\n-/** Get format string from VA_ARGS for error reporting */\n-template<typename... Args> std::string FormatStringFromLogArgs(const char *fmt, const Args&... args) { return fmt; }\n-\n-static inline void MarkUsed() {}\n-template<typename T, typename... Args> static inline void MarkUsed(const T& t, const Args&... args)\n-{\n-    (void)t;\n-    MarkUsed(args...);\n-}\n-\n-// Be conservative when using LogPrintf/error or other things which\n-// unconditionally log to debug.log! It should not be the case that an inbound\n-// peer can fill up a user's disk with debug.log entries.\n-\n-#ifdef USE_COVERAGE\n-#define LogPrintf(...) do { MarkUsed(__VA_ARGS__); } while(0)\n-#define LogPrint(category, ...) do { MarkUsed(__VA_ARGS__); } while(0)\n-#else\n-#define LogPrintf(...) do { \\\n-    if (fPrintToConsole || fPrintToDebugLog) { \\\n-        std::string _log_msg_; /* Unlikely name to avoid shadowing variables */ \\\n-        try { \\\n-            _log_msg_ = tfm::format(__VA_ARGS__); \\\n-        } catch (tinyformat::format_error &fmterr) { \\\n-            /* Original format string will have newline so don't add one here */ \\\n-            _log_msg_ = \"Error \\\"\" + std::string(fmterr.what()) + \"\\\" while formatting log message: \" + FormatStringFromLogArgs(__VA_ARGS__); \\\n-        } \\\n-        LogPrintStr(_log_msg_); \\\n-    } \\\n-} while(0)\n-\n-#define LogPrint(category, ...) do { \\\n-    if (LogAcceptCategory((category))) { \\\n-        LogPrintf(__VA_ARGS__); \\\n-    } \\\n-} while(0)\n-#endif\n-\n template<typename... Args>\n bool error(const char* fmt, const Args&... args)",
    "path": "src/util.h",
    "position": null,
    "original_position": 144,
    "commit_id": "8c2d695c4a45bdd9378c7970b0fcba6e1efc01f9",
    "original_commit_id": "67cd23663c6911e9cac4359b5dfd92a5d90563f2",
    "user": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Fixed with d903273cf8e51d2789ba8a88c608a66e63dcdc14.",
    "created_at": "2018-04-20T08:16:24Z",
    "updated_at": "2018-04-29T21:38:42Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/12954#discussion_r182976829",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12954",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182976829"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/12954#discussion_r182976829"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12954"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182976829/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 67,
    "side": "RIGHT",
    "in_reply_to_id": 181610827
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183068634",
    "pull_request_review_id": 114000198,
    "id": 183068634,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MzA2ODYzNA==",
    "diff_hunk": "@@ -61,11 +55,65 @@ namespace BCLog {\n         LEVELDB     = (1 << 20),\n         ALL         = ~(uint32_t)0,\n     };\n-}\n+\n+    class Logger\n+    {\n+    private:\n+        FILE* m_fileout = nullptr;\n+        std::mutex m_file_mutex;\n+        std::list<std::string> m_msgs_before_open;\n+\n+        /**\n+         * m_started_new_line is a state variable that will suppress printing of\n+         * the timestamp when multiple calls are made that don't end in a\n+         * newline.\n+         */\n+        std::atomic_bool m_started_new_line{true};",
    "path": "src/logging.h",
    "position": 43,
    "original_position": 43,
    "commit_id": "8c2d695c4a45bdd9378c7970b0fcba6e1efc01f9",
    "original_commit_id": "d903273cf8e51d2789ba8a88c608a66e63dcdc14",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Note that this maintains the old (broken) behaviour:\r\n- two threads are running. Thread A logs a line that doesn't terminate with a newline (ie a 'continuing' log)\r\n- thread B then logs a line. This is treated as a 'continuation' log of thread A's previous log, and is printed on the same line, without a timestamp\r\n- thread A's 'continuation' log is printed on a new line, with a timestamp\r\n\r\nNo need to fix that in this PR.",
    "created_at": "2018-04-20T14:29:18Z",
    "updated_at": "2018-04-29T21:38:42Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/12954#discussion_r183068634",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12954",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183068634"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/12954#discussion_r183068634"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12954"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183068634/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 71,
    "original_line": 71,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183082956",
    "pull_request_review_id": 114000198,
    "id": 183082956,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MzA4Mjk1Ng==",
    "diff_hunk": "@@ -19,15 +21,7 @@ static const bool DEFAULT_LOGIPS        = false;\n static const bool DEFAULT_LOGTIMESTAMPS = true;\n extern const char * const DEFAULT_DEBUGLOGFILE;\n \n-extern bool fPrintToConsole;\n-extern bool fPrintToDebugLog;\n-\n-extern bool fLogTimestamps;\n-extern bool fLogTimeMicros;\n extern bool fLogIPs;",
    "path": "src/logging.h",
    "position": 18,
    "original_position": 18,
    "commit_id": "8c2d695c4a45bdd9378c7970b0fcba6e1efc01f9",
    "original_commit_id": "d903273cf8e51d2789ba8a88c608a66e63dcdc14",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit _util: Establish global logger object._ : any reason to exclude `fLogIPs` from `g_logger`?",
    "created_at": "2018-04-20T15:13:58Z",
    "updated_at": "2018-04-29T21:38:42Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/12954#discussion_r183082956",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12954",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183082956"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/12954#discussion_r183082956"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12954"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183082956/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 24,
    "original_line": 24,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183219507",
    "pull_request_review_id": 114183460,
    "id": 183219507,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MzIxOTUwNw==",
    "diff_hunk": "@@ -264,7 +259,7 @@ void BCLog::Logger::ShrinkDebugFile()\n         int nBytes = fread(vch.data(), 1, vch.size(), file);",
    "path": "src/logging.cpp",
    "position": 329,
    "original_position": 64,
    "commit_id": "8c2d695c4a45bdd9378c7970b0fcba6e1efc01f9",
    "original_commit_id": "d903273cf8e51d2789ba8a88c608a66e63dcdc14",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Unrelated nit: Could change `int` to `size_t` here, so that it doesn't break when someone changes `RECENT_DEBUG_HISTORY_SIZE` to 5GB.",
    "created_at": "2018-04-21T21:17:11Z",
    "updated_at": "2018-04-29T21:38:42Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/12954#discussion_r183219507",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12954",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183219507"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/12954#discussion_r183219507"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12954"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183219507/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 258,
    "original_line": 258,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183289911",
    "pull_request_review_id": 114259021,
    "id": 183289911,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MzI4OTkxMQ==",
    "diff_hunk": "@@ -19,15 +21,7 @@ static const bool DEFAULT_LOGIPS        = false;\n static const bool DEFAULT_LOGTIMESTAMPS = true;\n extern const char * const DEFAULT_DEBUGLOGFILE;\n \n-extern bool fPrintToConsole;\n-extern bool fPrintToDebugLog;\n-\n-extern bool fLogTimestamps;\n-extern bool fLogTimeMicros;\n extern bool fLogIPs;",
    "path": "src/logging.h",
    "position": 18,
    "original_position": 18,
    "commit_id": "8c2d695c4a45bdd9378c7970b0fcba6e1efc01f9",
    "original_commit_id": "d903273cf8e51d2789ba8a88c608a66e63dcdc14",
    "user": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "It's not actually used by the logger, it's just used in the net code. Arguably it should live there instead.",
    "created_at": "2018-04-23T06:50:51Z",
    "updated_at": "2018-04-29T21:38:42Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/12954#discussion_r183289911",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12954",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183289911"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/12954#discussion_r183289911"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12954"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183289911/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 24,
    "original_line": 24,
    "side": "RIGHT",
    "in_reply_to_id": 183082956
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/184163863",
    "pull_request_review_id": 115302626,
    "id": 184163863,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NDE2Mzg2Mw==",
    "diff_hunk": "@@ -127,19 +124,17 @@ const CLogCategoryDesc LogCategories[] =\n     {BCLog::ALL, \"all\"},\n };\n \n-bool GetLogCategory(uint32_t *f, const std::string *str)\n+bool GetLogCategory(BCLog::LogFlags& flag, const std::string& str)\n {\n-    if (f && str) {\n-        if (*str == \"\") {\n-            *f = BCLog::ALL;\n+    if (str == \"\") {\n+        flag = BCLog::ALL;\n+        return true;\n+    }\n+    for (unsigned int i = 0; i < ARRAYLEN(LogCategories); i++) {",
    "path": "src/logging.cpp",
    "position": null,
    "original_position": 172,
    "commit_id": "8c2d695c4a45bdd9378c7970b0fcba6e1efc01f9",
    "original_commit_id": "d903273cf8e51d2789ba8a88c608a66e63dcdc14",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: seems like you could phrase this more simply as\r\n```cpp\r\nfor (CLogCategoryDesc& cat : LogCategories) { ... }\r\n```\r\nThere doesn't seem to be a need to have the index on hand.",
    "created_at": "2018-04-25T18:31:23Z",
    "updated_at": "2018-04-29T21:38:42Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/12954#discussion_r184163863",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12954",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/184163863"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/12954#discussion_r184163863"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12954"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/184163863/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 133,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/184908897",
    "pull_request_review_id": 116193910,
    "id": 184908897,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NDkwODg5Nw==",
    "diff_hunk": "@@ -127,19 +124,17 @@ const CLogCategoryDesc LogCategories[] =\n     {BCLog::ALL, \"all\"},\n };\n \n-bool GetLogCategory(uint32_t *f, const std::string *str)\n+bool GetLogCategory(BCLog::LogFlags& flag, const std::string& str)\n {\n-    if (f && str) {\n-        if (*str == \"\") {\n-            *f = BCLog::ALL;\n+    if (str == \"\") {\n+        flag = BCLog::ALL;\n+        return true;\n+    }\n+    for (unsigned int i = 0; i < ARRAYLEN(LogCategories); i++) {",
    "path": "src/logging.cpp",
    "position": null,
    "original_position": 172,
    "commit_id": "8c2d695c4a45bdd9378c7970b0fcba6e1efc01f9",
    "original_commit_id": "d903273cf8e51d2789ba8a88c608a66e63dcdc14",
    "user": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Nice, fixed. Also gets rid of the dependency of logging on utilstrencodings.",
    "created_at": "2018-04-30T03:58:04Z",
    "updated_at": "2018-04-30T03:58:05Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/12954#discussion_r184908897",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12954",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/184908897"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/12954#discussion_r184908897"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12954"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/184908897/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 133,
    "side": "RIGHT",
    "in_reply_to_id": 184163863
  }
]