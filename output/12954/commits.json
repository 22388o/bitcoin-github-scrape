[
  {
    "sha": "f55f4fcf05a53fdf618b4c69ddcf4c43b14e84c2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNTVmNGZjZjA1YTUzZmRmNjE4YjRjNjlkZGNmNGM0M2IxNGU4NGMy",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jimpo@coinbase.com",
        "date": "2018-04-11T17:03:21Z"
      },
      "committer": {
        "name": "Jim Posen",
        "email": "jimpo@coinbase.com",
        "date": "2018-04-27T23:09:59Z"
      },
      "message": "util: Establish global logger object.\n\nThe object encapsulates logging configuration, and in a later commit,\nset up routines will also be moved into the class.",
      "tree": {
        "sha": "d5e549d544757a7d0aa1bd2fbcef5be376af8823",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d5e549d544757a7d0aa1bd2fbcef5be376af8823"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f55f4fcf05a53fdf618b4c69ddcf4c43b14e84c2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f55f4fcf05a53fdf618b4c69ddcf4c43b14e84c2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f55f4fcf05a53fdf618b4c69ddcf4c43b14e84c2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f55f4fcf05a53fdf618b4c69ddcf4c43b14e84c2/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "17266a13067c061783e0428c6200985ed8872b16",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17266a13067c061783e0428c6200985ed8872b16",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/17266a13067c061783e0428c6200985ed8872b16"
      }
    ],
    "stats": {
      "total": 105,
      "additions": 66,
      "deletions": 39
    },
    "files": [
      {
        "sha": "f08c099c162413196c6432cb07277f9644842c43",
        "filename": "src/bench/bench_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f55f4fcf05a53fdf618b4c69ddcf4c43b14e84c2/src/bench/bench_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f55f4fcf05a53fdf618b4c69ddcf4c43b14e84c2/src/bench/bench_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench_bitcoin.cpp?ref=f55f4fcf05a53fdf618b4c69ddcf4c43b14e84c2",
        "patch": "@@ -46,7 +46,7 @@ main(int argc, char** argv)\n     RandomInit();\n     ECC_Start();\n     SetupEnvironment();\n-    fPrintToDebugLog = false; // don't want to write to debug.log file\n+    g_logger->fPrintToDebugLog = false; // don't want to write to debug.log file\n \n     int64_t evaluations = gArgs.GetArg(\"-evals\", DEFAULT_BENCH_EVALUATIONS);\n     std::string regex_filter = gArgs.GetArg(\"-filter\", DEFAULT_BENCH_FILTER);"
      },
      {
        "sha": "814fd39448392e0777ef810b29d51bc31ec7fd34",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 7,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f55f4fcf05a53fdf618b4c69ddcf4c43b14e84c2/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f55f4fcf05a53fdf618b4c69ddcf4c43b14e84c2/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=f55f4fcf05a53fdf618b4c69ddcf4c43b14e84c2",
        "patch": "@@ -305,7 +305,7 @@ static void HandleSIGTERM(int)\n \n static void HandleSIGHUP(int)\n {\n-    fReopenDebugLog = true;\n+    g_logger->fReopenDebugLog = true;\n }\n \n #ifndef WIN32\n@@ -831,10 +831,11 @@ void InitLogging()\n     // debug.log.\n     LogPrintf(\"\\n\\n\\n\\n\\n\");\n \n-    fPrintToConsole = gArgs.GetBoolArg(\"-printtoconsole\", !gArgs.GetBoolArg(\"-daemon\", false));\n-    fPrintToDebugLog = !gArgs.IsArgNegated(\"-debuglogfile\");\n-    fLogTimestamps = gArgs.GetBoolArg(\"-logtimestamps\", DEFAULT_LOGTIMESTAMPS);\n-    fLogTimeMicros = gArgs.GetBoolArg(\"-logtimemicros\", DEFAULT_LOGTIMEMICROS);\n+    g_logger->fPrintToConsole = gArgs.GetBoolArg(\"-printtoconsole\", !gArgs.GetBoolArg(\"-daemon\", false));\n+    g_logger->fPrintToDebugLog = !gArgs.IsArgNegated(\"-debuglogfile\");\n+    g_logger->fLogTimestamps = gArgs.GetBoolArg(\"-logtimestamps\", DEFAULT_LOGTIMESTAMPS);\n+    g_logger->fLogTimeMicros = gArgs.GetBoolArg(\"-logtimemicros\", DEFAULT_LOGTIMEMICROS);\n+\n     fLogIPs = gArgs.GetBoolArg(\"-logips\", DEFAULT_LOGIPS);\n \n     std::string version_string = FormatFullVersion();\n@@ -1230,7 +1231,7 @@ bool AppInitMain()\n #ifndef WIN32\n     CreatePidFile(GetPidFile(), getpid());\n #endif\n-    if (fPrintToDebugLog) {\n+    if (g_logger->fPrintToDebugLog) {\n         if (gArgs.GetBoolArg(\"-shrinkdebugfile\", logCategories == BCLog::NONE)) {\n             // Do this first since it both loads a bunch of debug.log into memory,\n             // and because this needs to happen before any other debug.log printing\n@@ -1241,7 +1242,7 @@ bool AppInitMain()\n         }\n     }\n \n-    if (!fLogTimestamps)\n+    if (!g_logger->fLogTimestamps)\n         LogPrintf(\"Startup time: %s\\n\", FormatISO8601DateTime(GetTime()));\n     LogPrintf(\"Default data directory %s\\n\", GetDefaultDataDir().string());\n     LogPrintf(\"Using data directory %s\\n\", GetDataDir().string());"
      },
      {
        "sha": "de222d9465d758a0398cea6d6aa1841c1abb4415",
        "filename": "src/logging.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 17,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f55f4fcf05a53fdf618b4c69ddcf4c43b14e84c2/src/logging.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f55f4fcf05a53fdf618b4c69ddcf4c43b14e84c2/src/logging.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/logging.cpp?ref=f55f4fcf05a53fdf618b4c69ddcf4c43b14e84c2",
        "patch": "@@ -12,13 +12,22 @@\n \n const char * const DEFAULT_DEBUGLOGFILE = \"debug.log\";\n \n-bool fPrintToConsole = false;\n-bool fPrintToDebugLog = true;\n+/**\n+ * NOTE: the logger instances is leaked on exit. This is ugly, but will be\n+ * cleaned up by the OS/libc. Defining a logger as a global object doesn't work\n+ * since the order of destruction of static/global objects is undefined.\n+ * Consider if the logger gets destroyed, and then some later destructor calls\n+ * LogPrintf, maybe indirectly, and you get a core dump at shutdown trying to\n+ * access the logger. When the shutdown sequence is fully audited and tested,\n+ * explicit destruction of these objects can be implemented by changing this\n+ * from a raw pointer to a std::unique_ptr.\n+ *\n+ * This method of initialization was originally introduced in\n+ * ee3374234c60aba2cc4c5cd5cac1c0aefc2d817c.\n+ */\n+BCLog::Logger* const g_logger = new BCLog::Logger();\n \n-bool fLogTimestamps = DEFAULT_LOGTIMESTAMPS;\n-bool fLogTimeMicros = DEFAULT_LOGTIMEMICROS;\n bool fLogIPs = DEFAULT_LOGIPS;\n-std::atomic<bool> fReopenDebugLog(false);\n \n /** Log categories bitfield. */\n std::atomic<uint32_t> logCategories(0);\n@@ -174,19 +183,14 @@ std::vector<CLogCategoryActive> ListActiveLogCategories()\n     return ret;\n }\n \n-/**\n- * fStartedNewLine is a state variable held by the calling context that will\n- * suppress printing of the timestamp when multiple calls are made that don't\n- * end in a newline. Initialize it to true, and hold it, in the calling context.\n- */\n-static std::string LogTimestampStr(const std::string &str, std::atomic_bool *fStartedNewLine)\n+std::string BCLog::Logger::LogTimestampStr(const std::string &str)\n {\n     std::string strStamped;\n \n     if (!fLogTimestamps)\n         return str;\n \n-    if (*fStartedNewLine) {\n+    if (fStartedNewLine) {\n         int64_t nTimeMicros = GetTimeMicros();\n         strStamped = FormatISO8601DateTime(nTimeMicros/1000000);\n         if (fLogTimeMicros) {\n@@ -202,19 +206,18 @@ static std::string LogTimestampStr(const std::string &str, std::atomic_bool *fSt\n         strStamped = str;\n \n     if (!str.empty() && str[str.size()-1] == '\\n')\n-        *fStartedNewLine = true;\n+        fStartedNewLine = true;\n     else\n-        *fStartedNewLine = false;\n+        fStartedNewLine = false;\n \n     return strStamped;\n }\n \n-int LogPrintStr(const std::string &str)\n+int BCLog::Logger::LogPrintStr(const std::string &str)\n {\n     int ret = 0; // Returns total number of characters written\n-    static std::atomic_bool fStartedNewLine(true);\n \n-    std::string strTimestamped = LogTimestampStr(str, &fStartedNewLine);\n+    std::string strTimestamped = LogTimestampStr(str);\n \n     if (fPrintToConsole) {\n         // print to console"
      },
      {
        "sha": "1ccf9136fddf1e621f2ba8db18b2b36c38e7041e",
        "filename": "src/logging.h",
        "status": "modified",
        "additions": 35,
        "deletions": 12,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f55f4fcf05a53fdf618b4c69ddcf4c43b14e84c2/src/logging.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f55f4fcf05a53fdf618b4c69ddcf4c43b14e84c2/src/logging.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/logging.h?ref=f55f4fcf05a53fdf618b4c69ddcf4c43b14e84c2",
        "patch": "@@ -19,13 +19,7 @@ static const bool DEFAULT_LOGIPS        = false;\n static const bool DEFAULT_LOGTIMESTAMPS = true;\n extern const char * const DEFAULT_DEBUGLOGFILE;\n \n-extern bool fPrintToConsole;\n-extern bool fPrintToDebugLog;\n-\n-extern bool fLogTimestamps;\n-extern bool fLogTimeMicros;\n extern bool fLogIPs;\n-extern std::atomic<bool> fReopenDebugLog;\n \n extern std::atomic<uint32_t> logCategories;\n \n@@ -61,7 +55,39 @@ namespace BCLog {\n         LEVELDB     = (1 << 20),\n         ALL         = ~(uint32_t)0,\n     };\n-}\n+\n+    class Logger\n+    {\n+    private:\n+        /**\n+         * fStartedNewLine is a state variable that will suppress printing of\n+         * the timestamp when multiple calls are made that don't end in a\n+         * newline.\n+         */\n+        std::atomic_bool fStartedNewLine{true};\n+\n+        std::string LogTimestampStr(const std::string& str);\n+\n+    public:\n+        bool fPrintToConsole = false;\n+        bool fPrintToDebugLog = true;\n+\n+        bool fLogTimestamps = DEFAULT_LOGTIMESTAMPS;\n+        bool fLogTimeMicros = DEFAULT_LOGTIMEMICROS;\n+\n+        std::atomic<bool> fReopenDebugLog{false};\n+\n+        /** Send a string to the log output */\n+        int LogPrintStr(const std::string &str);\n+\n+        /** Returns whether logs will be written to any output */\n+        bool Enabled() const { return fPrintToConsole || fPrintToDebugLog; }\n+    };\n+\n+} // namespace BCLog\n+\n+extern BCLog::Logger* const g_logger;\n+\n /** Return true if log accepts specified category */\n static inline bool LogAcceptCategory(uint32_t category)\n {\n@@ -77,9 +103,6 @@ std::vector<CLogCategoryActive> ListActiveLogCategories();\n /** Return true if str parses as a log category and set the flags in f */\n bool GetLogCategory(uint32_t *f, const std::string *str);\n \n-/** Send a string to the log output */\n-int LogPrintStr(const std::string &str);\n-\n /** Get format string from VA_ARGS for error reporting */\n template<typename... Args> std::string FormatStringFromLogArgs(const char *fmt, const Args&... args) { return fmt; }\n \n@@ -99,15 +122,15 @@ template<typename T, typename... Args> static inline void MarkUsed(const T& t, c\n #define LogPrint(category, ...) do { MarkUsed(__VA_ARGS__); } while(0)\n #else\n #define LogPrintf(...) do { \\\n-    if (fPrintToConsole || fPrintToDebugLog) { \\\n+    if (g_logger->Enabled()) { \\\n         std::string _log_msg_; /* Unlikely name to avoid shadowing variables */ \\\n         try { \\\n             _log_msg_ = tfm::format(__VA_ARGS__); \\\n         } catch (tinyformat::format_error &fmterr) { \\\n             /* Original format string will have newline so don't add one here */ \\\n             _log_msg_ = \"Error \\\"\" + std::string(fmterr.what()) + \"\\\" while formatting log message: \" + FormatStringFromLogArgs(__VA_ARGS__); \\\n         } \\\n-        LogPrintStr(_log_msg_); \\\n+        g_logger->LogPrintStr(_log_msg_); \\\n     } \\\n } while(0)\n "
      },
      {
        "sha": "fa59a9ce34d74cc160ec88c80119123efe0f2da2",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f55f4fcf05a53fdf618b4c69ddcf4c43b14e84c2/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f55f4fcf05a53fdf618b4c69ddcf4c43b14e84c2/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=f55f4fcf05a53fdf618b4c69ddcf4c43b14e84c2",
        "patch": "@@ -47,7 +47,7 @@ BasicTestingSetup::BasicTestingSetup(const std::string& chainName)\n         SetupNetworking();\n         InitSignatureCache();\n         InitScriptExecutionCache();\n-        fPrintToDebugLog = false; // don't want to write to debug.log file\n+        g_logger->fPrintToDebugLog = false; // don't want to write to debug.log file\n         fCheckBlockIndex = true;\n         SelectParams(chainName);\n         noui_connect();"
      },
      {
        "sha": "2da8023285792c1b244f7a06a3f5f96f21a2b21a",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f55f4fcf05a53fdf618b4c69ddcf4c43b14e84c2/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f55f4fcf05a53fdf618b4c69ddcf4c43b14e84c2/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=f55f4fcf05a53fdf618b4c69ddcf4c43b14e84c2",
        "patch": "@@ -66,7 +66,7 @@ bool SetupNetworking();\n template<typename... Args>\n bool error(const char* fmt, const Args&... args)\n {\n-    LogPrintStr(\"ERROR: \" + tfm::format(fmt, args...) + \"\\n\");\n+    LogPrintf(\"ERROR: %s\\n\", tfm::format(fmt, args...));\n     return false;\n }\n "
      }
    ]
  },
  {
    "sha": "6a6d764ca5616e5d1f1848b0010613c49bd38e61",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YTZkNzY0Y2E1NjE2ZTVkMWYxODQ4YjAwMTA2MTNjNDliZDM4ZTYx",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jimpo@coinbase.com",
        "date": "2018-04-11T18:12:51Z"
      },
      "committer": {
        "name": "Jim Posen",
        "email": "jimpo@coinbase.com",
        "date": "2018-04-27T23:10:00Z"
      },
      "message": "util: Move debug file management functions into Logger.",
      "tree": {
        "sha": "5cf9465c2d303b9d8fbc8ad798ac78e60dea063b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5cf9465c2d303b9d8fbc8ad798ac78e60dea063b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6a6d764ca5616e5d1f1848b0010613c49bd38e61",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a6d764ca5616e5d1f1848b0010613c49bd38e61",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6a6d764ca5616e5d1f1848b0010613c49bd38e61",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a6d764ca5616e5d1f1848b0010613c49bd38e61/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f55f4fcf05a53fdf618b4c69ddcf4c43b14e84c2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f55f4fcf05a53fdf618b4c69ddcf4c43b14e84c2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f55f4fcf05a53fdf618b4c69ddcf4c43b14e84c2"
      }
    ],
    "stats": {
      "total": 80,
      "additions": 23,
      "deletions": 57
    },
    "files": [
      {
        "sha": "c14597d517e2c52b9d32c905a3086550300455e4",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a6d764ca5616e5d1f1848b0010613c49bd38e61/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a6d764ca5616e5d1f1848b0010613c49bd38e61/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=6a6d764ca5616e5d1f1848b0010613c49bd38e61",
        "patch": "@@ -1235,10 +1235,11 @@ bool AppInitMain()\n         if (gArgs.GetBoolArg(\"-shrinkdebugfile\", logCategories == BCLog::NONE)) {\n             // Do this first since it both loads a bunch of debug.log into memory,\n             // and because this needs to happen before any other debug.log printing\n-            ShrinkDebugFile();\n+            g_logger->ShrinkDebugFile();\n         }\n-        if (!OpenDebugLog()) {\n-            return InitError(strprintf(\"Could not open debug log file %s\", GetDebugLogPath().string()));\n+        if (!g_logger->OpenDebugLog()) {\n+            return InitError(strprintf(\"Could not open debug log file %s\",\n+                                       g_logger->GetDebugLogPath().string()));\n         }\n     }\n "
      },
      {
        "sha": "ed225a6a676acf7c15a9c22c355b195ae729ba3b",
        "filename": "src/logging.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 50,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a6d764ca5616e5d1f1848b0010613c49bd38e61/src/logging.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a6d764ca5616e5d1f1848b0010613c49bd38e61/src/logging.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/logging.cpp?ref=6a6d764ca5616e5d1f1848b0010613c49bd38e61",
        "patch": "@@ -7,9 +7,6 @@\n #include <util.h>\n #include <utilstrencodings.h>\n \n-#include <list>\n-#include <mutex>\n-\n const char * const DEFAULT_DEBUGLOGFILE = \"debug.log\";\n \n /**\n@@ -31,57 +28,23 @@ bool fLogIPs = DEFAULT_LOGIPS;\n \n /** Log categories bitfield. */\n std::atomic<uint32_t> logCategories(0);\n-/**\n- * LogPrintf() has been broken a couple of times now\n- * by well-meaning people adding mutexes in the most straightforward way.\n- * It breaks because it may be called by global destructors during shutdown.\n- * Since the order of destruction of static/global objects is undefined,\n- * defining a mutex as a global object doesn't work (the mutex gets\n- * destroyed, and then some later destructor calls OutputDebugStringF,\n- * maybe indirectly, and you get a core dump at shutdown trying to lock\n- * the mutex).\n- */\n-\n-static std::once_flag debugPrintInitFlag;\n-\n-/**\n- * We use std::call_once() to make sure mutexDebugLog and\n- * vMsgsBeforeOpenLog are initialized in a thread-safe manner.\n- *\n- * NOTE: fileout, mutexDebugLog and sometimes vMsgsBeforeOpenLog\n- * are leaked on exit. This is ugly, but will be cleaned up by\n- * the OS/libc. When the shutdown sequence is fully audited and\n- * tested, explicit destruction of these objects can be implemented.\n- */\n-static FILE* fileout = nullptr;\n-static std::mutex* mutexDebugLog = nullptr;\n-static std::list<std::string>* vMsgsBeforeOpenLog;\n \n static int FileWriteStr(const std::string &str, FILE *fp)\n {\n     return fwrite(str.data(), 1, str.size(), fp);\n }\n \n-static void DebugPrintInit()\n-{\n-    assert(mutexDebugLog == nullptr);\n-    mutexDebugLog = new std::mutex();\n-    vMsgsBeforeOpenLog = new std::list<std::string>;\n-}\n-\n-fs::path GetDebugLogPath()\n+fs::path BCLog::Logger::GetDebugLogPath() const\n {\n     fs::path logfile(gArgs.GetArg(\"-debuglogfile\", DEFAULT_DEBUGLOGFILE));\n     return AbsPathForConfigVal(logfile);\n }\n \n-bool OpenDebugLog()\n+bool BCLog::Logger::OpenDebugLog()\n {\n-    std::call_once(debugPrintInitFlag, &DebugPrintInit);\n-    std::lock_guard<std::mutex> scoped_lock(*mutexDebugLog);\n+    std::lock_guard<std::mutex> scoped_lock(mutexDebugLog);\n \n     assert(fileout == nullptr);\n-    assert(vMsgsBeforeOpenLog);\n     fs::path pathDebug = GetDebugLogPath();\n \n     fileout = fsbridge::fopen(pathDebug, \"a\");\n@@ -91,13 +54,11 @@ bool OpenDebugLog()\n \n     setbuf(fileout, nullptr); // unbuffered\n     // dump buffered messages from before we opened the log\n-    while (!vMsgsBeforeOpenLog->empty()) {\n-        FileWriteStr(vMsgsBeforeOpenLog->front(), fileout);\n-        vMsgsBeforeOpenLog->pop_front();\n+    while (!vMsgsBeforeOpenLog.empty()) {\n+        FileWriteStr(vMsgsBeforeOpenLog.front(), fileout);\n+        vMsgsBeforeOpenLog.pop_front();\n     }\n \n-    delete vMsgsBeforeOpenLog;\n-    vMsgsBeforeOpenLog = nullptr;\n     return true;\n }\n \n@@ -225,14 +186,12 @@ int BCLog::Logger::LogPrintStr(const std::string &str)\n         fflush(stdout);\n     }\n     if (fPrintToDebugLog) {\n-        std::call_once(debugPrintInitFlag, &DebugPrintInit);\n-        std::lock_guard<std::mutex> scoped_lock(*mutexDebugLog);\n+        std::lock_guard<std::mutex> scoped_lock(mutexDebugLog);\n \n         // buffer if we haven't opened the log yet\n         if (fileout == nullptr) {\n-            assert(vMsgsBeforeOpenLog);\n             ret = strTimestamped.length();\n-            vMsgsBeforeOpenLog->push_back(strTimestamped);\n+            vMsgsBeforeOpenLog.push_back(strTimestamped);\n         }\n         else\n         {\n@@ -250,7 +209,7 @@ int BCLog::Logger::LogPrintStr(const std::string &str)\n     return ret;\n }\n \n-void ShrinkDebugFile()\n+void BCLog::Logger::ShrinkDebugFile()\n {\n     // Amount of debug.log to save at end when shrinking (must fit in memory)\n     constexpr size_t RECENT_DEBUG_HISTORY_SIZE = 10 * 1000000;"
      },
      {
        "sha": "c27a71168b3ba2c0a417f26ac29d550fff9aa12e",
        "filename": "src/logging.h",
        "status": "modified",
        "additions": 10,
        "deletions": 4,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a6d764ca5616e5d1f1848b0010613c49bd38e61/src/logging.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a6d764ca5616e5d1f1848b0010613c49bd38e61/src/logging.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/logging.h?ref=6a6d764ca5616e5d1f1848b0010613c49bd38e61",
        "patch": "@@ -11,6 +11,8 @@\n \n #include <atomic>\n #include <cstdint>\n+#include <list>\n+#include <mutex>\n #include <string>\n #include <vector>\n \n@@ -59,6 +61,10 @@ namespace BCLog {\n     class Logger\n     {\n     private:\n+        FILE* fileout = nullptr;\n+        std::mutex mutexDebugLog;\n+        std::list<std::string> vMsgsBeforeOpenLog;\n+\n         /**\n          * fStartedNewLine is a state variable that will suppress printing of\n          * the timestamp when multiple calls are made that don't end in a\n@@ -82,6 +88,10 @@ namespace BCLog {\n \n         /** Returns whether logs will be written to any output */\n         bool Enabled() const { return fPrintToConsole || fPrintToDebugLog; }\n+\n+        fs::path GetDebugLogPath() const;\n+        bool OpenDebugLog();\n+        void ShrinkDebugFile();\n     };\n \n } // namespace BCLog\n@@ -141,8 +151,4 @@ template<typename T, typename... Args> static inline void MarkUsed(const T& t, c\n } while(0)\n #endif\n \n-fs::path GetDebugLogPath();\n-bool OpenDebugLog();\n-void ShrinkDebugFile();\n-\n #endif // BITCOIN_LOGGING_H"
      }
    ]
  },
  {
    "sha": "3316a9ebb66171937efddb213daed64fe51c4082",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMzE2YTllYmI2NjE3MTkzN2VmZGRiMjEzZGFlZDY0ZmU1MWM0MDgy",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jimpo@coinbase.com",
        "date": "2018-04-11T20:02:01Z"
      },
      "committer": {
        "name": "Jim Posen",
        "email": "jimpo@coinbase.com",
        "date": "2018-04-27T23:10:02Z"
      },
      "message": "util: Encapsulate logCategories within BCLog::Logger.",
      "tree": {
        "sha": "d70ee40dd461cb472fab97e13c4af86dc3180a9e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d70ee40dd461cb472fab97e13c4af86dc3180a9e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3316a9ebb66171937efddb213daed64fe51c4082",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3316a9ebb66171937efddb213daed64fe51c4082",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3316a9ebb66171937efddb213daed64fe51c4082",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3316a9ebb66171937efddb213daed64fe51c4082/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6a6d764ca5616e5d1f1848b0010613c49bd38e61",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a6d764ca5616e5d1f1848b0010613c49bd38e61",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6a6d764ca5616e5d1f1848b0010613c49bd38e61"
      }
    ],
    "stats": {
      "total": 83,
      "additions": 55,
      "deletions": 28
    },
    "files": [
      {
        "sha": "bd08b04c0f4af71c94deffb5595b0987947a5aee",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3316a9ebb66171937efddb213daed64fe51c4082/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3316a9ebb66171937efddb213daed64fe51c4082/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=3316a9ebb66171937efddb213daed64fe51c4082",
        "patch": "@@ -364,8 +364,8 @@ bool InitHTTPServer()\n     // Update libevent's log handling. Returns false if our version of\n     // libevent doesn't support debug logging, in which case we should\n     // clear the BCLog::LIBEVENT flag.\n-    if (!UpdateHTTPServerLogging(logCategories & BCLog::LIBEVENT)) {\n-        logCategories &= ~BCLog::LIBEVENT;\n+    if (!UpdateHTTPServerLogging(g_logger->WillLogCategory(BCLog::LIBEVENT))) {\n+        g_logger->DisableCategory(BCLog::LIBEVENT);\n     }\n \n #ifdef WIN32"
      },
      {
        "sha": "8132c887b5e280aa7e8cb15aa20a35bebdf59031",
        "filename": "src/httpserver.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3316a9ebb66171937efddb213daed64fe51c4082/src/httpserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3316a9ebb66171937efddb213daed64fe51c4082/src/httpserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.h?ref=3316a9ebb66171937efddb213daed64fe51c4082",
        "patch": "@@ -32,7 +32,7 @@ void InterruptHTTPServer();\n /** Stop HTTP server */\n void StopHTTPServer();\n \n-/** Change logging level for libevent. Removes BCLog::LIBEVENT from logCategories if\n+/** Change logging level for libevent. Removes BCLog::LIBEVENT from log categories if\n  * libevent doesn't support debug logging.*/\n bool UpdateHTTPServerLogging(bool enable);\n "
      },
      {
        "sha": "ccaa09a85ed5bbb86f14f08694f8a32585a8a8f9",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3316a9ebb66171937efddb213daed64fe51c4082/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3316a9ebb66171937efddb213daed64fe51c4082/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=3316a9ebb66171937efddb213daed64fe51c4082",
        "patch": "@@ -968,7 +968,7 @@ bool AppInitParameterInteraction()\n                     InitWarning(strprintf(_(\"Unsupported logging category %s=%s.\"), \"-debug\", cat));\n                     continue;\n                 }\n-                logCategories |= flag;\n+                g_logger->EnableCategory(static_cast<BCLog::LogFlags>(flag));\n             }\n         }\n     }\n@@ -980,7 +980,7 @@ bool AppInitParameterInteraction()\n             InitWarning(strprintf(_(\"Unsupported logging category %s=%s.\"), \"-debugexclude\", cat));\n             continue;\n         }\n-        logCategories &= ~flag;\n+        g_logger->DisableCategory(static_cast<BCLog::LogFlags>(flag));\n     }\n \n     // Check for -debugnet\n@@ -1232,7 +1232,7 @@ bool AppInitMain()\n     CreatePidFile(GetPidFile(), getpid());\n #endif\n     if (g_logger->fPrintToDebugLog) {\n-        if (gArgs.GetBoolArg(\"-shrinkdebugfile\", logCategories == BCLog::NONE)) {\n+        if (gArgs.GetBoolArg(\"-shrinkdebugfile\", g_logger->DefaultShrinkDebugFile())) {\n             // Do this first since it both loads a bunch of debug.log into memory,\n             // and because this needs to happen before any other debug.log printing\n             g_logger->ShrinkDebugFile();"
      },
      {
        "sha": "53d2359caf5fcc4c7034f3cfd9d669243ba6b243",
        "filename": "src/interfaces/node.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3316a9ebb66171937efddb213daed64fe51c4082/src/interfaces/node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3316a9ebb66171937efddb213daed64fe51c4082/src/interfaces/node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.cpp?ref=3316a9ebb66171937efddb213daed64fe51c4082",
        "patch": "@@ -60,7 +60,7 @@ class NodeImpl : public Node\n     void initLogging() override { InitLogging(); }\n     void initParameterInteraction() override { InitParameterInteraction(); }\n     std::string getWarnings(const std::string& type) override { return GetWarnings(type); }\n-    uint32_t getLogCategories() override { return ::logCategories; }\n+    uint32_t getLogCategories() override { return g_logger->GetCategoryMask(); }\n     bool baseInitialize() override\n     {\n         return AppInitBasicSetup() && AppInitParameterInteraction() && AppInitSanityChecks() &&"
      },
      {
        "sha": "7604c0fd9417263890dd86cdf55b42e3c5d1a3d7",
        "filename": "src/logging.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 3,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3316a9ebb66171937efddb213daed64fe51c4082/src/logging.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3316a9ebb66171937efddb213daed64fe51c4082/src/logging.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/logging.cpp?ref=3316a9ebb66171937efddb213daed64fe51c4082",
        "patch": "@@ -26,9 +26,6 @@ BCLog::Logger* const g_logger = new BCLog::Logger();\n \n bool fLogIPs = DEFAULT_LOGIPS;\n \n-/** Log categories bitfield. */\n-std::atomic<uint32_t> logCategories(0);\n-\n static int FileWriteStr(const std::string &str, FILE *fp)\n {\n     return fwrite(str.data(), 1, str.size(), fp);\n@@ -62,6 +59,26 @@ bool BCLog::Logger::OpenDebugLog()\n     return true;\n }\n \n+void BCLog::Logger::EnableCategory(BCLog::LogFlags flag)\n+{\n+    logCategories |= flag;\n+}\n+\n+void BCLog::Logger::DisableCategory(BCLog::LogFlags flag)\n+{\n+    logCategories &= ~flag;\n+}\n+\n+bool BCLog::Logger::WillLogCategory(BCLog::LogFlags category) const\n+{\n+    return (logCategories.load(std::memory_order_relaxed) & category) != 0;\n+}\n+\n+bool BCLog::Logger::DefaultShrinkDebugFile() const\n+{\n+    return logCategories == BCLog::NONE;\n+}\n+\n struct CLogCategoryDesc\n {\n     uint32_t flag;"
      },
      {
        "sha": "7a1c25233ad7b964b22fb3e8ed26374f75932a1a",
        "filename": "src/logging.h",
        "status": "modified",
        "additions": 12,
        "deletions": 4,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3316a9ebb66171937efddb213daed64fe51c4082/src/logging.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3316a9ebb66171937efddb213daed64fe51c4082/src/logging.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/logging.h?ref=3316a9ebb66171937efddb213daed64fe51c4082",
        "patch": "@@ -23,8 +23,6 @@ extern const char * const DEFAULT_DEBUGLOGFILE;\n \n extern bool fLogIPs;\n \n-extern std::atomic<uint32_t> logCategories;\n-\n struct CLogCategoryActive\n {\n     std::string category;\n@@ -72,6 +70,9 @@ namespace BCLog {\n          */\n         std::atomic_bool fStartedNewLine{true};\n \n+        /** Log categories bitfield. */\n+        std::atomic<uint32_t> logCategories{0};\n+\n         std::string LogTimestampStr(const std::string& str);\n \n     public:\n@@ -92,16 +93,23 @@ namespace BCLog {\n         fs::path GetDebugLogPath() const;\n         bool OpenDebugLog();\n         void ShrinkDebugFile();\n+\n+        uint32_t GetCategoryMask() const { return logCategories.load(); }\n+        void EnableCategory(LogFlags flag);\n+        void DisableCategory(LogFlags flag);\n+        bool WillLogCategory(LogFlags category) const;\n+\n+        bool DefaultShrinkDebugFile() const;\n     };\n \n } // namespace BCLog\n \n extern BCLog::Logger* const g_logger;\n \n /** Return true if log accepts specified category */\n-static inline bool LogAcceptCategory(uint32_t category)\n+static inline bool LogAcceptCategory(BCLog::LogFlags category)\n {\n-    return (logCategories.load(std::memory_order_relaxed) & category) != 0;\n+    return g_logger->WillLogCategory(category);\n }\n \n /** Returns a string with the log categories. */"
      },
      {
        "sha": "26bf21356e5fa7d49a64a6b580845461f5725932",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 14,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3316a9ebb66171937efddb213daed64fe51c4082/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3316a9ebb66171937efddb213daed64fe51c4082/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=3316a9ebb66171937efddb213daed64fe51c4082",
        "patch": "@@ -346,21 +346,23 @@ UniValue getmemoryinfo(const JSONRPCRequest& request)\n     }\n }\n \n-uint32_t getCategoryMask(UniValue cats) {\n+void EnableOrDisableLogCategories(UniValue cats, bool enable) {\n     cats = cats.get_array();\n-    uint32_t mask = 0;\n     for (unsigned int i = 0; i < cats.size(); ++i) {\n         uint32_t flag = 0;\n         std::string cat = cats[i].get_str();\n         if (!GetLogCategory(&flag, &cat)) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"unknown logging category \" + cat);\n         }\n         if (flag == BCLog::NONE) {\n-            return 0;\n+            return;\n+        }\n+        if (enable) {\n+            g_logger->EnableCategory(static_cast<BCLog::LogFlags>(flag));\n+        } else {\n+            g_logger->DisableCategory(static_cast<BCLog::LogFlags>(flag));\n         }\n-        mask |= flag;\n     }\n-    return mask;\n }\n \n UniValue logging(const JSONRPCRequest& request)\n@@ -399,25 +401,25 @@ UniValue logging(const JSONRPCRequest& request)\n         );\n     }\n \n-    uint32_t originalLogCategories = logCategories;\n+    uint32_t original_log_categories = g_logger->GetCategoryMask();\n     if (request.params[0].isArray()) {\n-        logCategories |= getCategoryMask(request.params[0]);\n+        EnableOrDisableLogCategories(request.params[0], true);\n     }\n-\n     if (request.params[1].isArray()) {\n-        logCategories &= ~getCategoryMask(request.params[1]);\n+        EnableOrDisableLogCategories(request.params[1], false);\n     }\n+    uint32_t updated_log_categories = g_logger->GetCategoryMask();\n+    uint32_t changed_log_categories = original_log_categories ^ updated_log_categories;\n \n     // Update libevent logging if BCLog::LIBEVENT has changed.\n     // If the library version doesn't allow it, UpdateHTTPServerLogging() returns false,\n     // in which case we should clear the BCLog::LIBEVENT flag.\n     // Throw an error if the user has explicitly asked to change only the libevent\n     // flag and it failed.\n-    uint32_t changedLogCategories = originalLogCategories ^ logCategories;\n-    if (changedLogCategories & BCLog::LIBEVENT) {\n-        if (!UpdateHTTPServerLogging(logCategories & BCLog::LIBEVENT)) {\n-            logCategories &= ~BCLog::LIBEVENT;\n-            if (changedLogCategories == BCLog::LIBEVENT) {\n+    if (changed_log_categories & BCLog::LIBEVENT) {\n+        if (!UpdateHTTPServerLogging(g_logger->WillLogCategory(BCLog::LIBEVENT))) {\n+            g_logger->DisableCategory(BCLog::LIBEVENT);\n+            if (changed_log_categories == BCLog::LIBEVENT) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"libevent logging cannot be updated when using libevent before v2.1.1.\");\n             }\n         }"
      }
    ]
  },
  {
    "sha": "1eac317f25b905e97e311130ab19c3b0d257fc04",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZWFjMzE3ZjI1YjkwNWU5N2UzMTExMzBhYjE5YzNiMGQyNTdmYzA0",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jimpo@coinbase.com",
        "date": "2018-04-11T21:06:35Z"
      },
      "committer": {
        "name": "Jim Posen",
        "email": "jimpo@coinbase.com",
        "date": "2018-04-29T21:37:17Z"
      },
      "message": "util: Refactor GetLogCategory.\n\nChanging parameter types from pointers to references and uint32_t to\nBCLog::LogFlags simplies calling code.",
      "tree": {
        "sha": "cf844c12f7b18d452492200dab948d6ba9d40028",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cf844c12f7b18d452492200dab948d6ba9d40028"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1eac317f25b905e97e311130ab19c3b0d257fc04",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1eac317f25b905e97e311130ab19c3b0d257fc04",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1eac317f25b905e97e311130ab19c3b0d257fc04",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1eac317f25b905e97e311130ab19c3b0d257fc04/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3316a9ebb66171937efddb213daed64fe51c4082",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3316a9ebb66171937efddb213daed64fe51c4082",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3316a9ebb66171937efddb213daed64fe51c4082"
      }
    ],
    "stats": {
      "total": 86,
      "additions": 48,
      "deletions": 38
    },
    "files": [
      {
        "sha": "c0eb746d7b75b5a146e1a580753bc0259b94ce76",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 8,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1eac317f25b905e97e311130ab19c3b0d257fc04/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1eac317f25b905e97e311130ab19c3b0d257fc04/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=1eac317f25b905e97e311130ab19c3b0d257fc04",
        "patch": "@@ -963,24 +963,18 @@ bool AppInitParameterInteraction()\n         if (std::none_of(categories.begin(), categories.end(),\n             [](std::string cat){return cat == \"0\" || cat == \"none\";})) {\n             for (const auto& cat : categories) {\n-                uint32_t flag = 0;\n-                if (!GetLogCategory(&flag, &cat)) {\n+                if (!g_logger->EnableCategory(cat)) {\n                     InitWarning(strprintf(_(\"Unsupported logging category %s=%s.\"), \"-debug\", cat));\n-                    continue;\n                 }\n-                g_logger->EnableCategory(static_cast<BCLog::LogFlags>(flag));\n             }\n         }\n     }\n \n     // Now remove the logging categories which were explicitly excluded\n     for (const std::string& cat : gArgs.GetArgs(\"-debugexclude\")) {\n-        uint32_t flag = 0;\n-        if (!GetLogCategory(&flag, &cat)) {\n+        if (!g_logger->DisableCategory(cat)) {\n             InitWarning(strprintf(_(\"Unsupported logging category %s=%s.\"), \"-debugexclude\", cat));\n-            continue;\n         }\n-        g_logger->DisableCategory(static_cast<BCLog::LogFlags>(flag));\n     }\n \n     // Check for -debugnet"
      },
      {
        "sha": "dc1ed0afb61b9ac436d94f566e1675ab834d07f2",
        "filename": "src/logging.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 19,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1eac317f25b905e97e311130ab19c3b0d257fc04/src/logging.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1eac317f25b905e97e311130ab19c3b0d257fc04/src/logging.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/logging.cpp?ref=1eac317f25b905e97e311130ab19c3b0d257fc04",
        "patch": "@@ -5,7 +5,6 @@\n \n #include <logging.h>\n #include <util.h>\n-#include <utilstrencodings.h>\n \n const char * const DEFAULT_DEBUGLOGFILE = \"debug.log\";\n \n@@ -64,11 +63,27 @@ void BCLog::Logger::EnableCategory(BCLog::LogFlags flag)\n     logCategories |= flag;\n }\n \n+bool BCLog::Logger::EnableCategory(const std::string& str)\n+{\n+    BCLog::LogFlags flag;\n+    if (!GetLogCategory(flag, str)) return false;\n+    EnableCategory(flag);\n+    return true;\n+}\n+\n void BCLog::Logger::DisableCategory(BCLog::LogFlags flag)\n {\n     logCategories &= ~flag;\n }\n \n+bool BCLog::Logger::DisableCategory(const std::string& str)\n+{\n+    BCLog::LogFlags flag;\n+    if (!GetLogCategory(flag, str)) return false;\n+    DisableCategory(flag);\n+    return true;\n+}\n+\n bool BCLog::Logger::WillLogCategory(BCLog::LogFlags category) const\n {\n     return (logCategories.load(std::memory_order_relaxed) & category) != 0;\n@@ -81,7 +96,7 @@ bool BCLog::Logger::DefaultShrinkDebugFile() const\n \n struct CLogCategoryDesc\n {\n-    uint32_t flag;\n+    BCLog::LogFlags flag;\n     std::string category;\n };\n \n@@ -114,19 +129,17 @@ const CLogCategoryDesc LogCategories[] =\n     {BCLog::ALL, \"all\"},\n };\n \n-bool GetLogCategory(uint32_t *f, const std::string *str)\n+bool GetLogCategory(BCLog::LogFlags& flag, const std::string& str)\n {\n-    if (f && str) {\n-        if (*str == \"\") {\n-            *f = BCLog::ALL;\n+    if (str == \"\") {\n+        flag = BCLog::ALL;\n+        return true;\n+    }\n+    for (const CLogCategoryDesc& category_desc : LogCategories) {\n+        if (category_desc.category == str) {\n+            flag = category_desc.flag;\n             return true;\n         }\n-        for (unsigned int i = 0; i < ARRAYLEN(LogCategories); i++) {\n-            if (LogCategories[i].category == *str) {\n-                *f = LogCategories[i].flag;\n-                return true;\n-            }\n-        }\n     }\n     return false;\n }\n@@ -135,11 +148,11 @@ std::string ListLogCategories()\n {\n     std::string ret;\n     int outcount = 0;\n-    for (unsigned int i = 0; i < ARRAYLEN(LogCategories); i++) {\n+    for (const CLogCategoryDesc& category_desc : LogCategories) {\n         // Omit the special cases.\n-        if (LogCategories[i].flag != BCLog::NONE && LogCategories[i].flag != BCLog::ALL) {\n+        if (category_desc.flag != BCLog::NONE && category_desc.flag != BCLog::ALL) {\n             if (outcount != 0) ret += \", \";\n-            ret += LogCategories[i].category;\n+            ret += category_desc.category;\n             outcount++;\n         }\n     }\n@@ -149,12 +162,12 @@ std::string ListLogCategories()\n std::vector<CLogCategoryActive> ListActiveLogCategories()\n {\n     std::vector<CLogCategoryActive> ret;\n-    for (unsigned int i = 0; i < ARRAYLEN(LogCategories); i++) {\n+    for (const CLogCategoryDesc& category_desc : LogCategories) {\n         // Omit the special cases.\n-        if (LogCategories[i].flag != BCLog::NONE && LogCategories[i].flag != BCLog::ALL) {\n+        if (category_desc.flag != BCLog::NONE && category_desc.flag != BCLog::ALL) {\n             CLogCategoryActive catActive;\n-            catActive.category = LogCategories[i].category;\n-            catActive.active = LogAcceptCategory(LogCategories[i].flag);\n+            catActive.category = category_desc.category;\n+            catActive.active = LogAcceptCategory(category_desc.flag);\n             ret.push_back(catActive);\n         }\n     }"
      },
      {
        "sha": "b88c9d9919ffc987f8ff9b8fc68aef039acff2c6",
        "filename": "src/logging.h",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1eac317f25b905e97e311130ab19c3b0d257fc04/src/logging.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1eac317f25b905e97e311130ab19c3b0d257fc04/src/logging.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/logging.h?ref=1eac317f25b905e97e311130ab19c3b0d257fc04",
        "patch": "@@ -95,8 +95,12 @@ namespace BCLog {\n         void ShrinkDebugFile();\n \n         uint32_t GetCategoryMask() const { return logCategories.load(); }\n+\n         void EnableCategory(LogFlags flag);\n+        bool EnableCategory(const std::string& str);\n         void DisableCategory(LogFlags flag);\n+        bool DisableCategory(const std::string& str);\n+\n         bool WillLogCategory(LogFlags category) const;\n \n         bool DefaultShrinkDebugFile() const;\n@@ -118,8 +122,8 @@ std::string ListLogCategories();\n /** Returns a vector of the active log categories. */\n std::vector<CLogCategoryActive> ListActiveLogCategories();\n \n-/** Return true if str parses as a log category and set the flags in f */\n-bool GetLogCategory(uint32_t *f, const std::string *str);\n+/** Return true if str parses as a log category and set the flag */\n+bool GetLogCategory(BCLog::LogFlags& flag, const std::string& str);\n \n /** Get format string from VA_ARGS for error reporting */\n template<typename... Args> std::string FormatStringFromLogArgs(const char *fmt, const Args&... args) { return fmt; }"
      },
      {
        "sha": "0c93108bcecace22b33695ed4bcb37d0362e1ddc",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 9,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1eac317f25b905e97e311130ab19c3b0d257fc04/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1eac317f25b905e97e311130ab19c3b0d257fc04/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=1eac317f25b905e97e311130ab19c3b0d257fc04",
        "patch": "@@ -349,18 +349,17 @@ UniValue getmemoryinfo(const JSONRPCRequest& request)\n void EnableOrDisableLogCategories(UniValue cats, bool enable) {\n     cats = cats.get_array();\n     for (unsigned int i = 0; i < cats.size(); ++i) {\n-        uint32_t flag = 0;\n         std::string cat = cats[i].get_str();\n-        if (!GetLogCategory(&flag, &cat)) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"unknown logging category \" + cat);\n-        }\n-        if (flag == BCLog::NONE) {\n-            return;\n-        }\n+\n+        bool success;\n         if (enable) {\n-            g_logger->EnableCategory(static_cast<BCLog::LogFlags>(flag));\n+            success = g_logger->EnableCategory(cat);\n         } else {\n-            g_logger->DisableCategory(static_cast<BCLog::LogFlags>(flag));\n+            success = g_logger->DisableCategory(cat);\n+        }\n+\n+        if (!success) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"unknown logging category \" + cat);\n         }\n     }\n }"
      }
    ]
  },
  {
    "sha": "8e7b961388920144993d0bd56d93f89e5c60fbff",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZTdiOTYxMzg4OTIwMTQ0OTkzZDBiZDU2ZDkzZjg5ZTVjNjBmYmZm",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jimpo@coinbase.com",
        "date": "2018-04-20T07:42:32Z"
      },
      "committer": {
        "name": "Jim Posen",
        "email": "jimpo@coinbase.com",
        "date": "2018-04-29T21:37:17Z"
      },
      "message": "scripted-diff: Rename BCLog::Logger member variables.\n\n-BEGIN VERIFY SCRIPT-\nsed -i \"s/fileout/m_fileout/\" src/logging.h src/logging.cpp\nsed -i \"s/mutexDebugLog/m_file_mutex/\" src/logging.h src/logging.cpp\nsed -i \"s/vMsgsBeforeOpenLog/m_msgs_before_open/\" src/logging.h src/logging.cpp\nsed -i \"s/logCategories/m_categories/\" src/logging.h src/logging.cpp\nsed -i \"s/fPrintToConsole/m_print_to_console/\" src/logging.h src/logging.cpp src/init.cpp\nsed -i \"s/fPrintToDebugLog/m_print_to_file/\" src/logging.h src/logging.cpp src/init.cpp src/test/test_bitcoin.cpp src/bench/bench_bitcoin.cpp\nsed -i \"s/fLogTimestamps/m_log_timestamps/\" src/logging.h src/logging.cpp src/init.cpp\nsed -i \"s/fLogTimeMicros/m_log_time_micros/\" src/logging.h src/logging.cpp src/init.cpp\nsed -i \"s/fReopenDebugLog/m_reopen_file/\" src/logging.h src/logging.cpp src/init.cpp\nsed -i \"s/fStartedNewLine/m_started_new_line/\" src/logging.h src/logging.cpp\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "b23c62b3531a718bb72b722500a95f30d4ec68b9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b23c62b3531a718bb72b722500a95f30d4ec68b9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8e7b961388920144993d0bd56d93f89e5c60fbff",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8e7b961388920144993d0bd56d93f89e5c60fbff",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8e7b961388920144993d0bd56d93f89e5c60fbff",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8e7b961388920144993d0bd56d93f89e5c60fbff/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1eac317f25b905e97e311130ab19c3b0d257fc04",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1eac317f25b905e97e311130ab19c3b0d257fc04",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1eac317f25b905e97e311130ab19c3b0d257fc04"
      }
    ],
    "stats": {
      "total": 98,
      "additions": 49,
      "deletions": 49
    },
    "files": [
      {
        "sha": "c1fbeb8d1a7f2e0d4dbe33a73b6a403afe4a3b3a",
        "filename": "src/bench/bench_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8e7b961388920144993d0bd56d93f89e5c60fbff/src/bench/bench_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8e7b961388920144993d0bd56d93f89e5c60fbff/src/bench/bench_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench_bitcoin.cpp?ref=8e7b961388920144993d0bd56d93f89e5c60fbff",
        "patch": "@@ -46,7 +46,7 @@ main(int argc, char** argv)\n     RandomInit();\n     ECC_Start();\n     SetupEnvironment();\n-    g_logger->fPrintToDebugLog = false; // don't want to write to debug.log file\n+    g_logger->m_print_to_file = false; // don't want to write to debug.log file\n \n     int64_t evaluations = gArgs.GetArg(\"-evals\", DEFAULT_BENCH_EVALUATIONS);\n     std::string regex_filter = gArgs.GetArg(\"-filter\", DEFAULT_BENCH_FILTER);"
      },
      {
        "sha": "7bc2f6302282622426df3dc002f5edfd9f564920",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8e7b961388920144993d0bd56d93f89e5c60fbff/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8e7b961388920144993d0bd56d93f89e5c60fbff/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=8e7b961388920144993d0bd56d93f89e5c60fbff",
        "patch": "@@ -305,7 +305,7 @@ static void HandleSIGTERM(int)\n \n static void HandleSIGHUP(int)\n {\n-    g_logger->fReopenDebugLog = true;\n+    g_logger->m_reopen_file = true;\n }\n \n #ifndef WIN32\n@@ -831,10 +831,10 @@ void InitLogging()\n     // debug.log.\n     LogPrintf(\"\\n\\n\\n\\n\\n\");\n \n-    g_logger->fPrintToConsole = gArgs.GetBoolArg(\"-printtoconsole\", !gArgs.GetBoolArg(\"-daemon\", false));\n-    g_logger->fPrintToDebugLog = !gArgs.IsArgNegated(\"-debuglogfile\");\n-    g_logger->fLogTimestamps = gArgs.GetBoolArg(\"-logtimestamps\", DEFAULT_LOGTIMESTAMPS);\n-    g_logger->fLogTimeMicros = gArgs.GetBoolArg(\"-logtimemicros\", DEFAULT_LOGTIMEMICROS);\n+    g_logger->m_print_to_console = gArgs.GetBoolArg(\"-printtoconsole\", !gArgs.GetBoolArg(\"-daemon\", false));\n+    g_logger->m_print_to_file = !gArgs.IsArgNegated(\"-debuglogfile\");\n+    g_logger->m_log_timestamps = gArgs.GetBoolArg(\"-logtimestamps\", DEFAULT_LOGTIMESTAMPS);\n+    g_logger->m_log_time_micros = gArgs.GetBoolArg(\"-logtimemicros\", DEFAULT_LOGTIMEMICROS);\n \n     fLogIPs = gArgs.GetBoolArg(\"-logips\", DEFAULT_LOGIPS);\n \n@@ -1225,7 +1225,7 @@ bool AppInitMain()\n #ifndef WIN32\n     CreatePidFile(GetPidFile(), getpid());\n #endif\n-    if (g_logger->fPrintToDebugLog) {\n+    if (g_logger->m_print_to_file) {\n         if (gArgs.GetBoolArg(\"-shrinkdebugfile\", g_logger->DefaultShrinkDebugFile())) {\n             // Do this first since it both loads a bunch of debug.log into memory,\n             // and because this needs to happen before any other debug.log printing\n@@ -1237,7 +1237,7 @@ bool AppInitMain()\n         }\n     }\n \n-    if (!g_logger->fLogTimestamps)\n+    if (!g_logger->m_log_timestamps)\n         LogPrintf(\"Startup time: %s\\n\", FormatISO8601DateTime(GetTime()));\n     LogPrintf(\"Default data directory %s\\n\", GetDefaultDataDir().string());\n     LogPrintf(\"Using data directory %s\\n\", GetDataDir().string());"
      },
      {
        "sha": "b7c682c94f8841ca3769ec71530b5eef8dff248a",
        "filename": "src/logging.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 27,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8e7b961388920144993d0bd56d93f89e5c60fbff/src/logging.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8e7b961388920144993d0bd56d93f89e5c60fbff/src/logging.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/logging.cpp?ref=8e7b961388920144993d0bd56d93f89e5c60fbff",
        "patch": "@@ -38,29 +38,29 @@ fs::path BCLog::Logger::GetDebugLogPath() const\n \n bool BCLog::Logger::OpenDebugLog()\n {\n-    std::lock_guard<std::mutex> scoped_lock(mutexDebugLog);\n+    std::lock_guard<std::mutex> scoped_lock(m_file_mutex);\n \n-    assert(fileout == nullptr);\n+    assert(m_fileout == nullptr);\n     fs::path pathDebug = GetDebugLogPath();\n \n-    fileout = fsbridge::fopen(pathDebug, \"a\");\n-    if (!fileout) {\n+    m_fileout = fsbridge::fopen(pathDebug, \"a\");\n+    if (!m_fileout) {\n         return false;\n     }\n \n-    setbuf(fileout, nullptr); // unbuffered\n+    setbuf(m_fileout, nullptr); // unbuffered\n     // dump buffered messages from before we opened the log\n-    while (!vMsgsBeforeOpenLog.empty()) {\n-        FileWriteStr(vMsgsBeforeOpenLog.front(), fileout);\n-        vMsgsBeforeOpenLog.pop_front();\n+    while (!m_msgs_before_open.empty()) {\n+        FileWriteStr(m_msgs_before_open.front(), m_fileout);\n+        m_msgs_before_open.pop_front();\n     }\n \n     return true;\n }\n \n void BCLog::Logger::EnableCategory(BCLog::LogFlags flag)\n {\n-    logCategories |= flag;\n+    m_categories |= flag;\n }\n \n bool BCLog::Logger::EnableCategory(const std::string& str)\n@@ -73,7 +73,7 @@ bool BCLog::Logger::EnableCategory(const std::string& str)\n \n void BCLog::Logger::DisableCategory(BCLog::LogFlags flag)\n {\n-    logCategories &= ~flag;\n+    m_categories &= ~flag;\n }\n \n bool BCLog::Logger::DisableCategory(const std::string& str)\n@@ -86,12 +86,12 @@ bool BCLog::Logger::DisableCategory(const std::string& str)\n \n bool BCLog::Logger::WillLogCategory(BCLog::LogFlags category) const\n {\n-    return (logCategories.load(std::memory_order_relaxed) & category) != 0;\n+    return (m_categories.load(std::memory_order_relaxed) & category) != 0;\n }\n \n bool BCLog::Logger::DefaultShrinkDebugFile() const\n {\n-    return logCategories == BCLog::NONE;\n+    return m_categories == BCLog::NONE;\n }\n \n struct CLogCategoryDesc\n@@ -178,13 +178,13 @@ std::string BCLog::Logger::LogTimestampStr(const std::string &str)\n {\n     std::string strStamped;\n \n-    if (!fLogTimestamps)\n+    if (!m_log_timestamps)\n         return str;\n \n-    if (fStartedNewLine) {\n+    if (m_started_new_line) {\n         int64_t nTimeMicros = GetTimeMicros();\n         strStamped = FormatISO8601DateTime(nTimeMicros/1000000);\n-        if (fLogTimeMicros) {\n+        if (m_log_time_micros) {\n             strStamped.pop_back();\n             strStamped += strprintf(\".%06dZ\", nTimeMicros%1000000);\n         }\n@@ -197,9 +197,9 @@ std::string BCLog::Logger::LogTimestampStr(const std::string &str)\n         strStamped = str;\n \n     if (!str.empty() && str[str.size()-1] == '\\n')\n-        fStartedNewLine = true;\n+        m_started_new_line = true;\n     else\n-        fStartedNewLine = false;\n+        m_started_new_line = false;\n \n     return strStamped;\n }\n@@ -210,30 +210,30 @@ int BCLog::Logger::LogPrintStr(const std::string &str)\n \n     std::string strTimestamped = LogTimestampStr(str);\n \n-    if (fPrintToConsole) {\n+    if (m_print_to_console) {\n         // print to console\n         ret = fwrite(strTimestamped.data(), 1, strTimestamped.size(), stdout);\n         fflush(stdout);\n     }\n-    if (fPrintToDebugLog) {\n-        std::lock_guard<std::mutex> scoped_lock(mutexDebugLog);\n+    if (m_print_to_file) {\n+        std::lock_guard<std::mutex> scoped_lock(m_file_mutex);\n \n         // buffer if we haven't opened the log yet\n-        if (fileout == nullptr) {\n+        if (m_fileout == nullptr) {\n             ret = strTimestamped.length();\n-            vMsgsBeforeOpenLog.push_back(strTimestamped);\n+            m_msgs_before_open.push_back(strTimestamped);\n         }\n         else\n         {\n             // reopen the log file, if requested\n-            if (fReopenDebugLog) {\n-                fReopenDebugLog = false;\n+            if (m_reopen_file) {\n+                m_reopen_file = false;\n                 fs::path pathDebug = GetDebugLogPath();\n-                if (fsbridge::freopen(pathDebug,\"a\",fileout) != nullptr)\n-                    setbuf(fileout, nullptr); // unbuffered\n+                if (fsbridge::freopen(pathDebug,\"a\",m_fileout) != nullptr)\n+                    setbuf(m_fileout, nullptr); // unbuffered\n             }\n \n-            ret = FileWriteStr(strTimestamped, fileout);\n+            ret = FileWriteStr(strTimestamped, m_fileout);\n         }\n     }\n     return ret;"
      },
      {
        "sha": "249d5debef4d762ee2662c297d061357e62c0ea7",
        "filename": "src/logging.h",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8e7b961388920144993d0bd56d93f89e5c60fbff/src/logging.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8e7b961388920144993d0bd56d93f89e5c60fbff/src/logging.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/logging.h?ref=8e7b961388920144993d0bd56d93f89e5c60fbff",
        "patch": "@@ -59,42 +59,42 @@ namespace BCLog {\n     class Logger\n     {\n     private:\n-        FILE* fileout = nullptr;\n-        std::mutex mutexDebugLog;\n-        std::list<std::string> vMsgsBeforeOpenLog;\n+        FILE* m_fileout = nullptr;\n+        std::mutex m_file_mutex;\n+        std::list<std::string> m_msgs_before_open;\n \n         /**\n-         * fStartedNewLine is a state variable that will suppress printing of\n+         * m_started_new_line is a state variable that will suppress printing of\n          * the timestamp when multiple calls are made that don't end in a\n          * newline.\n          */\n-        std::atomic_bool fStartedNewLine{true};\n+        std::atomic_bool m_started_new_line{true};\n \n         /** Log categories bitfield. */\n-        std::atomic<uint32_t> logCategories{0};\n+        std::atomic<uint32_t> m_categories{0};\n \n         std::string LogTimestampStr(const std::string& str);\n \n     public:\n-        bool fPrintToConsole = false;\n-        bool fPrintToDebugLog = true;\n+        bool m_print_to_console = false;\n+        bool m_print_to_file = true;\n \n-        bool fLogTimestamps = DEFAULT_LOGTIMESTAMPS;\n-        bool fLogTimeMicros = DEFAULT_LOGTIMEMICROS;\n+        bool m_log_timestamps = DEFAULT_LOGTIMESTAMPS;\n+        bool m_log_time_micros = DEFAULT_LOGTIMEMICROS;\n \n-        std::atomic<bool> fReopenDebugLog{false};\n+        std::atomic<bool> m_reopen_file{false};\n \n         /** Send a string to the log output */\n         int LogPrintStr(const std::string &str);\n \n         /** Returns whether logs will be written to any output */\n-        bool Enabled() const { return fPrintToConsole || fPrintToDebugLog; }\n+        bool Enabled() const { return m_print_to_console || m_print_to_file; }\n \n         fs::path GetDebugLogPath() const;\n         bool OpenDebugLog();\n         void ShrinkDebugFile();\n \n-        uint32_t GetCategoryMask() const { return logCategories.load(); }\n+        uint32_t GetCategoryMask() const { return m_categories.load(); }\n \n         void EnableCategory(LogFlags flag);\n         bool EnableCategory(const std::string& str);"
      },
      {
        "sha": "eea1804883afc02a1a1e356946b85099a0cf733b",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8e7b961388920144993d0bd56d93f89e5c60fbff/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8e7b961388920144993d0bd56d93f89e5c60fbff/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=8e7b961388920144993d0bd56d93f89e5c60fbff",
        "patch": "@@ -47,7 +47,7 @@ BasicTestingSetup::BasicTestingSetup(const std::string& chainName)\n         SetupNetworking();\n         InitSignatureCache();\n         InitScriptExecutionCache();\n-        g_logger->fPrintToDebugLog = false; // don't want to write to debug.log file\n+        g_logger->m_print_to_file = false; // don't want to write to debug.log file\n         fCheckBlockIndex = true;\n         SelectParams(chainName);\n         noui_connect();"
      }
    ]
  },
  {
    "sha": "8c2d695c4a45bdd9378c7970b0fcba6e1efc01f9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YzJkNjk1YzRhNDViZGQ5Mzc4Yzc5NzBiMGZjYmE2ZTFlZmMwMWY5",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jimpo@coinbase.com",
        "date": "2018-04-20T08:11:44Z"
      },
      "committer": {
        "name": "Jim Posen",
        "email": "jimpo@coinbase.com",
        "date": "2018-04-29T21:37:19Z"
      },
      "message": "util: Store debug log file path in BCLog::Logger member.\n\nThis breaks the cyclic between logging and util.",
      "tree": {
        "sha": "43b04976c81df286c18c22e67d077bed78fcd087",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/43b04976c81df286c18c22e67d077bed78fcd087"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8c2d695c4a45bdd9378c7970b0fcba6e1efc01f9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c2d695c4a45bdd9378c7970b0fcba6e1efc01f9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8c2d695c4a45bdd9378c7970b0fcba6e1efc01f9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c2d695c4a45bdd9378c7970b0fcba6e1efc01f9/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8e7b961388920144993d0bd56d93f89e5c60fbff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8e7b961388920144993d0bd56d93f89e5c60fbff",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8e7b961388920144993d0bd56d93f89e5c60fbff"
      }
    ],
    "stats": {
      "total": 37,
      "additions": 16,
      "deletions": 21
    },
    "files": [
      {
        "sha": "c1f33398301b91006d9f107f3455b0bd13fc2e3b",
        "filename": "src/bench/bench_bitcoin.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c2d695c4a45bdd9378c7970b0fcba6e1efc01f9/src/bench/bench_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c2d695c4a45bdd9378c7970b0fcba6e1efc01f9/src/bench/bench_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench_bitcoin.cpp?ref=8c2d695c4a45bdd9378c7970b0fcba6e1efc01f9",
        "patch": "@@ -46,7 +46,6 @@ main(int argc, char** argv)\n     RandomInit();\n     ECC_Start();\n     SetupEnvironment();\n-    g_logger->m_print_to_file = false; // don't want to write to debug.log file\n \n     int64_t evaluations = gArgs.GetArg(\"-evals\", DEFAULT_BENCH_EVALUATIONS);\n     std::string regex_filter = gArgs.GetArg(\"-filter\", DEFAULT_BENCH_FILTER);"
      },
      {
        "sha": "6423d87026be81ae80e415c8fdfd14ff4192b431",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c2d695c4a45bdd9378c7970b0fcba6e1efc01f9/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c2d695c4a45bdd9378c7970b0fcba6e1efc01f9/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=8c2d695c4a45bdd9378c7970b0fcba6e1efc01f9",
        "patch": "@@ -826,13 +826,15 @@ static std::string ResolveErrMsg(const char * const optname, const std::string&\n  */\n void InitLogging()\n {\n+    g_logger->m_print_to_file = !gArgs.IsArgNegated(\"-debuglogfile\");\n+    g_logger->m_file_path = AbsPathForConfigVal(gArgs.GetArg(\"-debuglogfile\", DEFAULT_DEBUGLOGFILE));\n+\n     // Add newlines to the logfile to distinguish this execution from the last\n     // one; called before console logging is set up, so this is only sent to\n     // debug.log.\n     LogPrintf(\"\\n\\n\\n\\n\\n\");\n \n     g_logger->m_print_to_console = gArgs.GetBoolArg(\"-printtoconsole\", !gArgs.GetBoolArg(\"-daemon\", false));\n-    g_logger->m_print_to_file = !gArgs.IsArgNegated(\"-debuglogfile\");\n     g_logger->m_log_timestamps = gArgs.GetBoolArg(\"-logtimestamps\", DEFAULT_LOGTIMESTAMPS);\n     g_logger->m_log_time_micros = gArgs.GetBoolArg(\"-logtimemicros\", DEFAULT_LOGTIMEMICROS);\n \n@@ -1233,7 +1235,7 @@ bool AppInitMain()\n         }\n         if (!g_logger->OpenDebugLog()) {\n             return InitError(strprintf(\"Could not open debug log file %s\",\n-                                       g_logger->GetDebugLogPath().string()));\n+                                       g_logger->m_file_path.string()));\n         }\n     }\n "
      },
      {
        "sha": "10a3b189585e0fdaa312b640ffc5ed94e9167518",
        "filename": "src/logging.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 15,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c2d695c4a45bdd9378c7970b0fcba6e1efc01f9/src/logging.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c2d695c4a45bdd9378c7970b0fcba6e1efc01f9/src/logging.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/logging.cpp?ref=8c2d695c4a45bdd9378c7970b0fcba6e1efc01f9",
        "patch": "@@ -4,7 +4,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <logging.h>\n-#include <util.h>\n+#include <utiltime.h>\n \n const char * const DEFAULT_DEBUGLOGFILE = \"debug.log\";\n \n@@ -30,20 +30,14 @@ static int FileWriteStr(const std::string &str, FILE *fp)\n     return fwrite(str.data(), 1, str.size(), fp);\n }\n \n-fs::path BCLog::Logger::GetDebugLogPath() const\n-{\n-    fs::path logfile(gArgs.GetArg(\"-debuglogfile\", DEFAULT_DEBUGLOGFILE));\n-    return AbsPathForConfigVal(logfile);\n-}\n-\n bool BCLog::Logger::OpenDebugLog()\n {\n     std::lock_guard<std::mutex> scoped_lock(m_file_mutex);\n \n     assert(m_fileout == nullptr);\n-    fs::path pathDebug = GetDebugLogPath();\n+    assert(!m_file_path.empty());\n \n-    m_fileout = fsbridge::fopen(pathDebug, \"a\");\n+    m_fileout = fsbridge::fopen(m_file_path, \"a\");\n     if (!m_fileout) {\n         return false;\n     }\n@@ -228,8 +222,7 @@ int BCLog::Logger::LogPrintStr(const std::string &str)\n             // reopen the log file, if requested\n             if (m_reopen_file) {\n                 m_reopen_file = false;\n-                fs::path pathDebug = GetDebugLogPath();\n-                if (fsbridge::freopen(pathDebug,\"a\",m_fileout) != nullptr)\n+                if (fsbridge::freopen(m_file_path,\"a\",m_fileout) != nullptr)\n                     setbuf(m_fileout, nullptr); // unbuffered\n             }\n \n@@ -243,14 +236,16 @@ void BCLog::Logger::ShrinkDebugFile()\n {\n     // Amount of debug.log to save at end when shrinking (must fit in memory)\n     constexpr size_t RECENT_DEBUG_HISTORY_SIZE = 10 * 1000000;\n+\n+    assert(!m_file_path.empty());\n+\n     // Scroll debug.log if it's getting too big\n-    fs::path pathLog = GetDebugLogPath();\n-    FILE* file = fsbridge::fopen(pathLog, \"r\");\n+    FILE* file = fsbridge::fopen(m_file_path, \"r\");\n \n     // Special files (e.g. device nodes) may not have a size.\n     size_t log_size = 0;\n     try {\n-        log_size = fs::file_size(pathLog);\n+        log_size = fs::file_size(m_file_path);\n     } catch (boost::filesystem::filesystem_error &) {}\n \n     // If debug.log file is more than 10% bigger the RECENT_DEBUG_HISTORY_SIZE\n@@ -263,7 +258,7 @@ void BCLog::Logger::ShrinkDebugFile()\n         int nBytes = fread(vch.data(), 1, vch.size(), file);\n         fclose(file);\n \n-        file = fsbridge::fopen(pathLog, \"w\");\n+        file = fsbridge::fopen(m_file_path, \"w\");\n         if (file)\n         {\n             fwrite(vch.data(), 1, nBytes, file);"
      },
      {
        "sha": "1f2be6016a9e018a2fc21d630fac769d0b9452c1",
        "filename": "src/logging.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c2d695c4a45bdd9378c7970b0fcba6e1efc01f9/src/logging.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c2d695c4a45bdd9378c7970b0fcba6e1efc01f9/src/logging.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/logging.h?ref=8c2d695c4a45bdd9378c7970b0fcba6e1efc01f9",
        "patch": "@@ -77,11 +77,12 @@ namespace BCLog {\n \n     public:\n         bool m_print_to_console = false;\n-        bool m_print_to_file = true;\n+        bool m_print_to_file = false;\n \n         bool m_log_timestamps = DEFAULT_LOGTIMESTAMPS;\n         bool m_log_time_micros = DEFAULT_LOGTIMEMICROS;\n \n+        fs::path m_file_path;\n         std::atomic<bool> m_reopen_file{false};\n \n         /** Send a string to the log output */\n@@ -90,7 +91,6 @@ namespace BCLog {\n         /** Returns whether logs will be written to any output */\n         bool Enabled() const { return m_print_to_console || m_print_to_file; }\n \n-        fs::path GetDebugLogPath() const;\n         bool OpenDebugLog();\n         void ShrinkDebugFile();\n "
      },
      {
        "sha": "fe816a6f7984832b64f1c14c4d416842f2fb8e18",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c2d695c4a45bdd9378c7970b0fcba6e1efc01f9/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c2d695c4a45bdd9378c7970b0fcba6e1efc01f9/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=8c2d695c4a45bdd9378c7970b0fcba6e1efc01f9",
        "patch": "@@ -47,7 +47,6 @@ BasicTestingSetup::BasicTestingSetup(const std::string& chainName)\n         SetupNetworking();\n         InitSignatureCache();\n         InitScriptExecutionCache();\n-        g_logger->m_print_to_file = false; // don't want to write to debug.log file\n         fCheckBlockIndex = true;\n         SelectParams(chainName);\n         noui_connect();"
      }
    ]
  }
]