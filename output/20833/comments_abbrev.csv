MarcoFalke,2021-01-03 09:20:23,Thanks for working on this. Strong Concept ACK!,https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-753589415,753589415,
jnewbery,2021-01-03 10:38:42,Concept ACK and approach ACK.,https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-753597483,753597483,
DrahtBot,2021-01-03 11:29:21,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #10443 (Add fee_est tool for debugging fee estimation code by ryanofsky)\n\nIf you consider this pull request important, p",https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-753602927,753602927,
glozow,2021-01-08 23:10:14,5th time's the charm I guess üòÇ this is ready for review!,https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-757042159,757042159,
darosior,2021-01-09 19:48:26,Concept ACK :) ,https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-757357961,757357961,
DrahtBot,2021-01-13 11:45:49,<!--4a62be1de6b64f3ed646cdc7932c8cf5-->\nüïµÔ∏è @sipa has been requested to review this pull request as specified in the REVIEWERS file.,https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-759396273,759396273,
glozow,2021-01-14 18:45:05,"@mjdietzx thanks for review! :)\n\n> I think soon `test/functional/rpc_packages.py` can be done with `MiniWallet` and get rid of some code.\n\nI didn't feel like `MiniWallet` suited my needs at the moment - I needed to chain transactions and wanted more control over the scripts. I considered just adding more functionality to `MiniWallet` but it might not be needed elsewhere and would conflict ",https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-760395006,760395006,
darosior,2021-01-18 08:34:14,"@ariard i think it is only intended to be a convenient way to sanity check for ""static"" standardness bounds, not for testing the whole validity prior to broadcast (which is intractable..). ",https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-762080588,762080588,
ariard,2021-01-19 02:05:06,"@darosior Yes but as `testmempoolaccept` result is `{success, failure}` so for e.g if a package tx is time-locked in the future, you will get a failure and wrongly fail your L2 flow ? I don't think ""static"" (or stateless?) standardness bounds is more defined.",https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-762553705,762553705,
darosior,2021-01-19 11:54:32,"@ariard i think it would be useful to test the first stage -non timelocked- flow (in specific for Revault, the deposit-emergency, deposit-unvault-cancel, and deposit-unvault-emergency scenarii) without mocking actual tx sending and block generation. I don't think it'd be really useful for ""check at runtime"" either.\nAs for the ""static"" bounds, there are for instance the maximum standard witscript",https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-762794603,762794603,
glozow,2021-01-19 21:59:14,"Rebased, split up the refactoring commit (hopefully now very digestible chunks), and took some of the review suggestions so far. Thanks a ton for your reviews @jnewbery @MarcoFalke @sdaftuar @mjdietzx @darosior @ariard ü§ó hope you take a look again!\n\n@ariard Re: timelocks, off-chain covenants, etc. yep this obviously has some limitations and I wouldn't consider this a perfect tester for L2 tran",https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-763168517,763168517,
ariard,2021-01-22 01:45:11,"@glozow @darosior I think we need distinctions to understand better what this package-`testmempoolaccept` is achieving for transaction chains. I agree that it lets L2 application devs manually test the mempool validity of a _static_ chain of transactions, and that way avoid to deploy a completely broken stack in production. Just note the caveat, `fRequireStandard` is false for testnet, so be caref",https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-765057102,765057102,
glozow,2021-01-22 17:26:14,"@ariard\n> Just note the caveat, `fRequireStandard` is false for testnet, so be careful to do dry-run in regtest.\n\nI think `fRequireStandard` is [true for regtest](https://github.com/bitcoin/bitcoin/blob/32b191fb66e644c690c94cbfdae6ddbc754769d7/src/chainparams.cpp#L424) and [false for testnet](https://github.com/bitcoin/bitcoin/blob/32b191fb66e644c690c94cbfdae6ddbc754769d7/src/chainparams.cpp",https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-765569041,765569041,
dunxen,2021-01-27 16:56:13,Concept ACK. A great first step for packages!,https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-768423929,768423929,
glozow,2021-01-29 02:14:17,"Thanks for your review @jnewbery, addressed your comments and some other style stuff in the last push!",https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-769526936,769526936,
glozow,2021-01-29 20:08:38,"@stackman27 that's a good point, no package limits could be a bit of a footgun even in `testmempoolaccept`. Maybe limit 25, which would be the same as `DEFAULT_DESCENDANT_LIMIT`? Mempool wouldn't consider packages larger than that anyway, and if it's not 1 package then they don't need to put it in one call.",https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-770023093,770023093,
glozow,2021-02-02 02:07:49,"To all the lovely reviewers, as @jnewbery [pointed out](https://github.com/bitcoin/bitcoin/pull/20833#pullrequestreview-580388483), this PR is getting a little big üòÖ so I've split off the refactoring commits to #21062.\n\nThanks a ton for the review @fjahr üôè I think I've addressed all your comments/questions.\n\n@jnewbery I've addressed most of your comments - I agree with you on returning a v",https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-771294064,771294064,
glozow,2021-02-11 22:26:25,"To reviewers: #21062 is merged.\n~Next chunk is #21146, which is centered around `MemPoolAccept`'s interaction with the coins cache.\nThis PR is up-to-date so feel free to review, but we need #21146 first üòä~",https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-777833961,777833961,
glozow,2021-03-02 18:41:54,"This is ready for review üíÉ  no blockers anymore\nThe approach has slightly changed - I'm now extending `CCoinsViewCache` to create a `CCoinsViewTemporary` (used only in mempool validation) to track package coins. They're stored at the top layer of the `MemPoolAccept` coins hierarchy, in `m_view` instead of `m_viewmempool`. And we can clear the temporary coins to reset the state without deleting`c",https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-789126577,789126577,
glozow,2021-03-03 02:59:39,Fixed CI failure,https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-789389804,789389804,
glozow,2021-03-08 21:10:50,"Addressed @Xekyo's comments, added more tests",https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-793080147,793080147,
ariard,2021-04-02 03:12:33,"Thanks for the update, I'll review back soon, especially the well-foundness of new packages limits (`MAX_PACKAGE_COUNT`/`MAX_PACKAGE_SIZE`). \n\nWhat do you think about disabling RBF logic for package-testmempoolaccept ? I.e returning a package failure if one utxo is already spent, no matter the signaling of the conflicting transaction. It would fix this current [issue](https://github.com/bitcoi",https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-812293370,812293370,
glozow,2021-04-02 22:47:42,"> What do you think about disabling RBF logic for package-testmempoolaccept ? I.e returning a package failure if one utxo is already spent, no matter the signaling of the conflicting transaction. It would fix this current issue and I believe we'll need to rethink rbf-handling of package in future works anyway.\n\nYes, I'd prefer this. I don't think there's a use case for having RBFing in package",https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-812744661,812744661,
glozow,2021-04-13 12:57:33,"Thanks for the reviews so far! Pushed a bunch of stuff (mostly tests):\n- Separated package limits, sorting, and RBF stuff for packages as [policy] since they are opinionated.\n- Added the logic to disallow all conflicts with mempool transactions (thereby disabling RBF) in packages.\n- Extended the mempool fuzzer to check that test accepting using ATMP and ProcessNewPackage (always just 1 trans",https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-818714189,818714189,
JeremyRubin,2021-04-15 01:30:21,"Concept ACK and approach ack.\n\ncode looks pretty decent, didn't do a fine tooth combed review yet though.\n",https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-819954128,819954128,
glozow,2021-04-17 17:06:08,Rebased. Looking into the fuzzer issue,https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-821854801,821854801,
adamjonas,2021-04-27 01:46:58,"I'm having difficulty tracking down the cause, but one can reproduce the fuzzer crash with this:\n```\necho 'dXXi9XV1Dv//X3AAAd3gMMCvoUAAAP//AAABCzYBAL//MQDQ' | base64 --decode  > /tmp/a\nFUZZ=tx_pool_standard ./src/test/fuzz/fuzz /tmp/a\n```\n\nUsing the added fuzzer from the last commit, I was able to go back to 2f1d035 to trigger a crash (which is where the methods are added).",https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-827248427,827248427,
glozow,2021-04-28 19:37:46,"Note to reviewers:\n\n#21783 shaved off the first commit üçß \nI've reordered the commits and moved the ancestor/descendant limit stuff to #21800. I feel that this is safe to do because ancestor/descendant limits are designed to protect us from heavy computation due to large families _in the mempool_. This PR may underestimate during the test accept, but the only way to submit these transactions ",https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-828725998,828725998,
glozow,2021-05-03 17:26:42,"Thanks @mzumsande! Last push:\n- Added some checks and tests for empty package, nullptrs, and null transactions\n- Fixed `resize()` -> `reserve()` in https://github.com/bitcoin/bitcoin/pull/20833#discussion_r624705935\n- Added a quick call to `ProcessNewPackage` in the tx_pool fuzzer. All it does is make sure it doesn't throw and gets a fully validated result.\n- Fixed rpc doc typo https://git",https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-831410252,831410252,
glozow,2021-05-06 00:35:52,"Recent pushes\n\n* Added `assert`s for the precondition of non-empty packages and no nullptrs in packages (context: https://github.com/bitcoin/bitcoin/pull/20833#discussion_r624955595 and https://github.com/bitcoin/bitcoin/pull/20833#discussion_r626148257)\n* Added a function `assert_testres_equal()` that shuffles packages before asserting that the testmempoolaccept result matches, edited the t",https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-833141681,833141681,
glozow,2021-05-11 18:34:45,"Bigger changes:\n\n- Rolled the ‚Äúdisable RBF‚Äù logic into the package accept commit, because it‚Äôs a key part of why the logic is correct (mainly just reordering the commits, overall diff is the same).\n- An offline discussion with @sdaftuar helped me realize that the temporary coins fit more naturally in `m_viewmempool`. I‚Äôve reverted back to adding a temporary map in `CCoinsViewMemPool` instead",https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-838968982,838968982,
glozow,2021-05-11 19:57:28,"Github is struggling to load past comments, so I've compiled summaries/links for most of the hawt topics of discussion in this [gist](https://gist.github.com/glozow/c3acaf161c95bba491fce31585b2aaf7). It's not an exhaustive list of everything that's been discussed, but if you're wondering ""has this already been discussed?"" you might find something useful there. I also don't mind if you write a revi",https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-839081655,839081655,
glozow,2021-05-20 21:59:09,"Rebased on master, split up a commit into 2 (https://github.com/bitcoin/bitcoin/pull/20833#discussion_r630571069), made a release-notes-20833.md. No other changes.",https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-845504743,845504743,
glozow,2021-05-24 15:22:48,"Thanks @ariard for reminding me about the `max-fee-exceeded` API discussion. I've just pushed an update similar to @jnewbery's suggestion in https://github.com/bitcoin/bitcoin/pull/20833/files#r619141139. If we're satisfied with this API for `max-fee-exceeded`, then all of the discussions will have been addressed.\n\nMy proposal is: If a transaction in the package exceeds maxfeerate, the ""reject",https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-847118121,847118121,
laanwj,2021-05-27 20:38:44,"Code review re-ACK 13650fe2e527bf0cf5d977bf5f3f1563b853ecdc\nMy understanding is that the rest of the comments (which tend to be relating to comments, documentation, asserts, argument naming, and error messages) will be addressed in the follow-up PR, so are not blocking the merge of this feature.\n",https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-849925844,849925844,
sdaftuar,2021-01-05 19:57:33,This means that we will update our script cache with transactions that might not ultimately get accepted to the mempool?  This would need to be restructured before exposing to the p2p network to avoid becoming a DoS vector.,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r552161033,552161033,src/validation.cpp
sdaftuar,2021-01-05 20:12:32,"On further thought: if you're only implementing this for testmempoolaccept anyway, why bother with the call to ConsensusScriptChecks?  It can only return failure if our software is broken -- it's a safeguard against miners creating invalid blocks, not something that users should expect to ever run into.\n\nIf you drop this call, then dropping CIFMAC is also no longer necessary, right?",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r552168344,552168344,src/validation.cpp
glozow,2021-01-05 20:37:04,"AFAIK we only use the script cache when it passes, so I don't think it's a DoS vector? On master, if you call `testmempoolaccept`, it caches the successful script executions with consensus flags.\n\n> On further thought: if you're only implementing this for testmempoolaccept anyway, why bother with the call to ConsensusScriptChecks?\n\nGood point, `PolicyScriptChecks` is stricter so `Consensus",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r552180013,552180013,src/validation.cpp
sdaftuar,2021-01-06 14:53:09,"I assume that the ultimate goal of package validation is to only accept the whole set of transactions if each one individually makes it into the mempool (probably along with some other properties on the feerate of the package being used rather than individual feerates).  If that's correct, then calling `ConsensusScriptChecks` on anything (which will add to the script cache) before you finish calli",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r552684985,552684985,src/validation.cpp
luke-jr,2021-01-06 17:05:54,Do we want to commit to that?,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r552814597,552814597,src/rpc/rawtransaction.cpp
luke-jr,2021-01-06 17:06:38,This syntax seems strange?,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r552815366,552815366,src/rpc/rawtransaction.cpp
glozow,2021-01-06 19:53:47,"> I assume that the ultimate goal of package validation is to only accept the whole set of transactions if each one individually makes it into the mempool... \nIf that's correct, then calling ConsensusScriptChecks on anything (which will add to the script cache) before you finish calling PolicyScriptChecks on later transactions in the package will mean that a policy failure in a later transaction",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r552930655,552930655,src/validation.cpp
glozow,2021-01-06 22:31:20,"The more I think about this, the more it makes sense üòÖ \nIn actual package accept, we don't need CoinsViewMempool after `PolicyScriptChecks`, we can actually just go one by one in the package (after topological sort) and run `ConsensusScriptChecks` + submit to mempool. And subsequent txns should have all of the Coins they need from the pool. Apologies if this was obvious to you - is this what you",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r552997459,552997459,src/validation.cpp
glozow,2021-01-06 22:49:39,"I believe we plan to validate packages atomically, so we would never have a situation of ""these txns passed, but those didn't."" That's why I believed length 1 for failure would be alright, especially since this wouldn't be an API-breaking change. I imagine it could be helpful to return more information to the client, but don't know what that would look like concretely.",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r553003781,553003781,src/rpc/rawtransaction.cpp
glozow,2021-01-06 23:14:02,(Open to ideas),https://github.com/bitcoin/bitcoin/pull/20833#discussion_r553011795,553011795,src/rpc/rawtransaction.cpp
sdaftuar,2021-01-07 14:10:06,Yes -- sounds like we're on the same page!,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r553349758,553349758,src/validation.cpp
MarcoFalke,2021-01-14 08:11:02,"in commit c97fae1011c4bd376898af73576756f163eeaf58:\n\nThis member seems currently unused? Also, what is the point of copying the (already cached) txid once more? If you need a reference to the tx, maybe store the `CTransactionRef`, but that seems redundant, because the caller is already aware of the tx.",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r557161651,557161651,src/validation.h
MarcoFalke,2021-01-14 08:12:09,Would be nice to clarify what kind of fee this is. Probably base fee and not prioritized fee?,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r557163163,557163163,src/validation.h
MarcoFalke,2021-01-14 08:26:35,"Not sure if it makes sense to return a fee of `0` when the tx was rejected. At the very least the members that are optional, should be `std::optional`. Though, I am thinking that it could make sense to return two completely different types, based on whether the tx was accepted? I.e. a struct with `{fee, replaced_txs}` if the tx was accepted and a struct with `{state}` if the tx was rejected.\n\n",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r557185885,557185885,src/validation.h
glozow,2021-01-14 16:35:31,"Right, it's not used in https://github.com/bitcoin/bitcoin/commit/c97fae1011c4bd376898af73576756f163eeaf58. I ended up needing it for multi-accept on the failure case to indicate which tx failed. It might fit better in https://github.com/bitcoin/bitcoin/pull/20833/commits/2f36f0743158817635a39f7efb60541fe0c4b31d",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r557530738,557530738,src/validation.h
mjdietzx,2021-01-14 17:19:03,nit: you can probably ditch`self.extra_args = [[]]` right?,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r557561211,557561211,test/functional/rpc_packages.py
mjdietzx,2021-01-14 17:21:04,would it be better to check that this now passes without throwing rather than removing it?,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r557562563,557562563,test/functional/mempool_accept.py
glozow,2021-01-14 18:24:33,I preferred keeping the package-related tests in rpc_package.py,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r557600992,557600992,test/functional/mempool_accept.py
glozow,2021-01-14 18:25:08,"(also these 2 are not well-formed transactions, so it would return a deserialization error)",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r557601346,557601346,test/functional/mempool_accept.py
mjdietzx,2021-01-14 18:29:15,"OK, that makes sense. All good üëç",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r557603719,557603719,test/functional/mempool_accept.py
glozow,2021-01-14 18:47:14,"Ah true! I'm also starting to think that `m_accepted == m_state.IsValid()` always?? ü§î maybe could get rid of that and do\n\n```c\nTxValidationState m_state;\nstd::optional<std::list<CTransactionRef>> m_replaced_transactions;\nstd::optional<CAmount> m_base_fee;\n```",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r557613939,557613939,src/validation.h
glozow,2021-01-14 18:49:28,ya i think you're right,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r557615182,557615182,test/functional/rpc_packages.py
MarcoFalke,2021-01-14 19:10:50,"Not sure about the equivalence right now, but `if m_accepted then m_state.IsValid()` should hold.\n\nSo you don't need to return a validation state if the tx was accepted. Though, instead of having a return struct with\n```\noptional<state>\noptional<fee>\noptional<txs>\n...\n```\n\nIt could make sense to have one struct `Success` with \n```\nfee\ntxs\n```\nand then return `std::var",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r557626960,557626960,src/validation.h
ariard,2021-01-18 00:39:09,"I don't think we have a coding style recommendation for this, but IMO it's more intuitive to have `comment - arg` rather than `arg - comment`. At least other codebase callsites are following this.",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r559265297,559265297,src/bench/block_assemble.cpp
ariard,2021-01-18 00:42:09,Why breaking line for rvalue ?,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r559265704,559265704,src/node/transaction.cpp
ariard,2021-01-18 01:07:36,"""Evaluation result of a single-transaction mempool acceptance"", better than repeating twice transaction ?",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r559269796,559269796,src/validation.h
ariard,2021-01-18 02:34:08,"I need to dig more but if we do have a bug slips in, you might inflate the utxo cache and not update accurately `coins_to_uncache`. Thus in case of invalid transactions it avoids wasting cache space with junks. I don't understand your commit rational to deprecate this belt-and-suspender. ",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r559286531,559286531,src/validation.cpp
ariard,2021-01-18 02:38:39,"I don't think you need mempool state for this new check and the other one. You're verifying package element against each other (txid-vs-txid, input-vs-input). \n\nMaybe they could be gathered in some `SanitizePackage` function called in `ProcessNewPackage`. This would avoid encumbering more `PreChecks()` code path.",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r559287607,559287607,src/validation.cpp
ariard,2021-01-18 02:41:59,I think you can split `ProcessNewPackage()`/`AcceptMultipleTransactions` in its own commit. Better to isolate mempool changes from rpc-level ones IMO.,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r559288304,559288304,src/rpc/rawtransaction.cpp
glozow,2021-01-18 14:51:11,"Let me try to elaborate a bit: when validating packages, we have each coin in the `m_viewmempool`, which at this point is the `m_view` backend. If we set the backend to dummy, we lose the ability to look up those coins. Typically, the backend allows for going to disk (which would be unnecessary after this line and be the source of a `coins_to_uncache` leak). Since we need the coins in `CheckSequen",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r559619214,559619214,src/validation.cpp
glozow,2021-01-18 17:45:53,"Yeah I agree - I just started writing this and I think we should actually put the `TxValidationState` and `m_base_fees` into the `MemPoolAccept::Workspace` (since we need access throughout validation), then return whichever is appropriate at the end.\n\nHow does this look?\n```c\n\nstruct MempoolAcceptSuccess {\n    std::list<CTransactionRef> m_replaced_transactions;\n    CAmount m_base_fee",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r559722425,559722425,src/validation.h
MarcoFalke,2021-01-18 18:43:50,Looks good,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r559745529,559745529,src/validation.h
glozow,2021-01-19 16:51:46,"ay @MarcoFalke, the `std::variant` method is a bit hairy... see [this branch](https://github.com/glozow/bitcoin/commit/7d9151afc0d95e232bf1f57e8e052f5dc3bef7e7). It works, but has a larger diff so I'm worried it might encumber reviewers. If you think it's an improvement, I can leave it for a followup or something?",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r560327691,560327691,src/validation.h
glozow,2021-01-19 21:25:13,I don't like long lines ü§∑ I put it back since it's not too bad,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r560506055,560506055,src/node/transaction.cpp
glozow,2021-01-19 21:27:35,Right good point. I've removed it since checking inputs is a better way to test duplicates/conflicts. I'll note for the future to do context-free sanitization checks before taking the lock :) ,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r560507542,560507542,src/validation.cpp
glozow,2021-01-19 21:27:44,taken,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r560507626,560507626,src/rpc/rawtransaction.cpp
glozow,2021-01-19 21:29:38,"I agree, really, but didn't change it because I'd rather put all my opinion-energy into having a `MempoolAcceptResult` struct üòõ ",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r560508663,560508663,src/bench/block_assemble.cpp
glozow,2021-01-19 21:30:35,taken!,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r560509157,560509157,src/validation.h
glozow,2021-01-19 21:32:05,Moved it to the relevant commit. Putting a `CTransactionRef` in the `MempoolAcceptResult` when returning failure so that we know which tx failed; we need it to get the txid and wtxid in `testmempoolaccept`.,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r560509955,560509955,src/validation.h
MarcoFalke,2021-01-21 16:56:51,"Unless I am mistaken, incorrectly reading this will result in an uninitialized read, which is only detected by valgrind. Wouldn't it be better to make this safe for non-valgrind use via an std::optional at least. Or is that also a bit too verbose (like the std::variant approach)?",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r562041253,562041253,src/validation.h
glozow,2021-01-22 17:14:23,"Yeah good point, let me whip up the `std::optional` method real quick and get back to you on the verbosity",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r562779844,562779844,src/validation.h
robot-dreams,2021-01-23 13:04:29,"Would it be useful to add a short check here that `testmempoolaccept` fails if the transactions aren't sorted? For example:\n\n```\n        self.log.info(""Test package with unsorted transactions isn't accepted"")\n        unsorted_chain = [chain[0], chain[2], chain[1]]\n        orphaned = CTransaction()\n        orphaned.deserialize(BytesIO(hex_str_to_bytes(unsorted_chain[1])))\n        test",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r563150542,563150542,test/functional/rpc_packages.py
robot-dreams,2021-01-23 13:11:27,"Nit: Is it worth explicitly mentioning that on failure, the one entry in the result array corresponds to the first transaction in the package that failed validation?",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r563151242,563151242,src/rpc/rawtransaction.cpp
robot-dreams,2021-01-23 13:26:29,"Style nit (feel free to ignore):\n\nRather than extending `CCoinsViewMemPool`, would it make sense to instead add something like `CCoinsViewPackage : CCoinsViewBacked`? Doing so might have the following advantages:\n\n* The backing `CCoinsView` doesn't have to be a `CCoinsViewMemPool` (e.g. what if you want to submit a package to a block-relay-only node in the future)\n* It separates the conc",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r563152582,563152582,src/txmempool.h
robot-dreams,2021-01-23 13:57:18,"Nit: Is it worth saying ""with the **first** failure""?",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r563155678,563155678,src/validation.h
robot-dreams,2021-01-23 14:04:12,Nit: Is `state` still needed here?,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r563156391,563156391,src/validation.cpp
robot-dreams,2021-01-23 14:15:43,"Is it worth keeping some flavor of the ""Make sure the tx has at least one input."" message that was removed above?",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r563157572,563157572,src/rpc/rawtransaction.cpp
robot-dreams,2021-01-23 14:40:23,"Just confirming, does the requirement ""either return all successes or just the first failure"" apply to the RPC as a whole, or only to the internal call `ProcessNewPackage`?\n\nI ask because it looks like you could add rejected transactions inside this loop. For example, if I update `test_chain` in `rpc_packages.py` so that the 2nd transaction in the chain has an unreasonable fee, the RPC respons",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r563160249,563160249,src/rpc/rawtransaction.cpp
glozow,2021-01-25 15:32:37,"Please see [this branch](https://github.com/glozow/bitcoin/commit/408a32b5c70a6c2d657304ae0a874dadb635f4fa), it's not too bad verbosity-wise, I have a couple ternary operators like this:\n\n```c\nconst TxValidationState state = result.m_state == nullopt ? TxValidationState{} : result.m_state.value();\n```\n\nincorrect read throws a `bad optional access`",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r563815372,563815372,src/validation.h
glozow,2021-01-25 15:33:20,good point! will add that test,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r563815889,563815889,test/functional/rpc_packages.py
MarcoFalke,2021-01-25 15:48:53,"Cool, thanks for looking. Not sure if the ternary makes sense. It seems `state` is currently assumed to be always properly initialized (redundantly to the boolean return value). So maybe it could make sense to not make this optional. I do like that the other members (fee and replaced txs) are optional in your branch.",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r563828396,563828396,src/validation.h
MarcoFalke,2021-01-25 15:50:51,"Note that m_state.IsValid() holds when m_accpeted = *true*, so this comment could be confusing. I think the comment can just be removed.",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r563829921,563829921,src/validation.h
glozow,2021-01-25 16:29:48,"Ah yeah! That makes sense, leave state as-is, and optional members when they only make sense for valid transactions.",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r563860484,563860484,src/validation.h
glozow,2021-01-25 16:39:03,"it applies to the RPC as well, only 1 result on failure",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r563867627,563867627,src/rpc/rawtransaction.cpp
glozow,2021-01-25 19:57:56,"> Rather than extending CCoinsViewMemPool, would it make sense to instead add something like CCoinsViewPackage : CCoinsViewBacked?\n\nThis is a really interesting idea, and I think it should be the case to have the ""top level"" have the package caches -> ""bottom level"" backend is the `CCoinsViewMemPool`. Let me try to do it this way and see what happens!",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r564004706,564004706,src/txmempool.h
glozow,2021-01-25 19:59:13,Note that `CCoinsViewMemPool` is created with `MemPoolAccept` instances so we don't really reuse an existing one.,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r564005481,564005481,src/txmempool.h
glozow,2021-01-27 15:16:27,"@ariard, thanks for the push to look into this. I got a pretty simple solution: we shouldn't do `m_view.SetBackend(dummy)`, we should do `m_viewmempool.SetBackend(dummy)`, since that's the backend that's actually pointing to the coins cache.\n\nThe hierarchy is `m_view -> m_viewmempool -> coinscache`.",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r565391428,565391428,src/validation.cpp
glozow,2021-01-27 15:37:23,"good catch, removed üëç \n(btw, how did you comment on a non-diff line? üò± )",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r565409230,565409230,src/validation.cpp
glozow,2021-01-27 15:38:02,Done!,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r565409820,565409820,src/rpc/rawtransaction.cpp
glozow,2021-01-27 15:42:58,"I now have the comment ""Valid when m_accepted = false"" for the tx pointer, not for  the TxValidationState",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r565414051,565414051,src/validation.h
satsie,2021-01-27 16:19:51,"I'm not very familiar with `CHECK_NONFATAL` but see it throws an error if either condition here evaluates to false. \n\nIf `validation_results.size() == 1` that means one of the transactions failed validation, so we want to throw an error. Should this line be changed to `CHECK_NONFATAL(all_valid || validation_results.size() != 1);`?",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r565444091,565444091,src/rpc/rawtransaction.cpp
jnewbery,2021-01-27 16:26:32,"This is a change in behavior. Previously, if `fAddToMempool` is false or `(*it)->IsCoinBase()`, we'd short circuit and not call `AcceptToMemoryPool()`",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r565449378,565449378,src/validation.cpp
jnewbery,2021-01-27 16:28:12,Is it necessary to wrap the `std::shared_ptr` in a `std::optional`? Can you just use a null pointer to mean not present?,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r565450892,565450892,src/validation.h
jnewbery,2021-01-27 16:28:58,"Maybe clean up the style while you're here:\n\n- `CTransactionRef &tx` -> `CTransactionRef& tx`\n- align second line with opening parens",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r565451590,565451590,src/validation.h
jnewbery,2021-01-27 16:33:15,"Try to keep lines below 100-120 chars and align args with opening parens:\n\n```suggestion\nstatic MempoolAcceptResult AcceptToMemoryPoolWithTime(const CChainParams& chainparams, CTxMemPool& pool,\n                                                      const CTransactionRef& tx, int64_t nAcceptTime,\n                                                      bool bypass_limits, bool test_accept)\n",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r565454965,565454965,src/validation.cpp
jnewbery,2021-01-27 16:48:50,"In commit f14f8b73900d2da4e15119780e19683c8499b700 (_[refactor] return MempoolAcceptResult_), these local vars shouldn't be necessary. You're simply initializing them to default values, then passing them to the `ATMPArgs` initializer which copies them. You can save yourself some typing (and potentially an unnecessary copy) by creating those default values in the initializer itself:\n\n```diff\n",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r565467098,565467098,src/validation.cpp
glozow,2021-01-27 16:48:56,"`CHECK_NONFATAL` (documented in developer notes [here](https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#assertions-and-checks)) helps with internal logic bugs. Here, the bug would be a testmempoolaccept thing only (and therefore not be fatal enough to crash the node), but we'd definitely want to address it.\n\nHere, we are merely making sure that, if there were any errors, t",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r565467203,565467203,src/rpc/rawtransaction.cpp
jnewbery,2021-01-27 16:50:06,maintain alignment with parens,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r565468063,565468063,src/validation.cpp
jnewbery,2021-01-27 16:52:03,This can be a reference,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r565469529,565469529,src/net_processing.cpp
jnewbery,2021-01-27 16:53:30,This can be a reference.,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r565470752,565470752,src/net_processing.cpp
jnewbery,2021-01-27 19:14:53,I don't think this local variable is needed. It's only used in one place below (in the if conditional). You could just use `validation_results[i].m_base_fees.value()` there.,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r565567920,565567920,src/rpc/rawtransaction.cpp
satsie,2021-01-27 19:21:33,"Ah! Thanks for linking to that description üëç  [This was](https://doxygen.bitcoincore.org/check_8h.html#a46a3e27097aa5e94bbf62075bad7016f) the only one I had been working off of so the link you provided is super helpful for understanding the purpose of CHECK_NONFATAL. \n\nI was getting hung up on the `||`, or part of the evaluation. I think I understand it now, an error will only be thrown if bot",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r565572115,565572115,src/rpc/rawtransaction.cpp
fjahr,2021-01-28 00:41:27,"in f14f8b73900d2da4e15119780e19683c8499b700:\n\nnit: I slightly prefer\n```\nBOOST_CHECK(!result.m_accepted);\n```",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r565741093,565741093,src/test/txvalidation_tests.cpp
glozow,2021-01-28 04:10:08,"ah, right",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r565807726,565807726,src/validation.cpp
glozow,2021-01-29 01:34:35,"Also used in `fees.pushKV(""base"", ValueFromAmount(fee))` if that's better?",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r566521663,566521663,src/rpc/rawtransaction.cpp
glozow,2021-01-29 01:51:10,"Mm, I agree that's better. Also renaming it to `m_failed_ptx` to make it more clear.",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r566527100,566527100,src/validation.h
fjahr,2021-01-30 09:25:58,"in b76910ebd4d8a07534e145c498c7f7d0ce297ccd:\n\nDo these have to be optional if they are ""guarded"" by `m_accepted` anyway? Especially the list could just be empty anyway.",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567222730,567222730,src/validation.h
fjahr,2021-01-30 09:33:04,"in b76910e:\n\nStylistically I find it odd to give public members of a struct the m_* prefix. The way we use structs usually, just bundling some data without complex methods, it doesn't seem needed internally to the struct and externally, where the struct is used looks very wrong to me. But there doesn't seem to be a clear rule on this looking at the codebase. I just did it this way in `IndexSum",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567223369,567223369,src/validation.h
fjahr,2021-01-30 09:36:11,"in b76910e:\n\nI think I would have left `m_accepted` out of the struct and have `AcceptToMemoryPool` return an optional of `MempoolAcceptResult`.",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567223619,567223619,src/validation.h
fjahr,2021-01-30 10:06:11,"in 048ef0a7e62cca10c588b451c9060e7846ac398b:\n\nThis looks like an error?",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567226540,567226540,src/rpc/rawtransaction.cpp
fjahr,2021-01-31 17:02:19,"in b76910ebd4d8a07534e145c498c7f7d0ce297ccd:\n\nI guess this result can be `const`, too.",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567454265,567454265,src/rpc/rawtransaction.cpp
fjahr,2021-01-31 17:41:43,"in 17ca2d8e72bc5d9249e4a01a2dbc2bb362dbd9d8:\n\nThese members could get an m_* prefix. Also I think they could use some comments explaining what context they are used in. Or the added comments above could be more explicit.",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567459195,567459195,src/txmempool.h
fjahr,2021-01-31 19:26:46,"in 2fac0136138012ae26c8e12ef77e9486ad5cd831:\n\nDo you have to generate these and can't use the cached chain?",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567471786,567471786,test/functional/rpc_packages.py
fjahr,2021-01-31 19:55:51,"in 17ca2d8e72bc5d9249e4a01a2dbc2bb362dbd9d8:\n\nI am probably missing something but I find it strange that this is ignoring the result of `GetCoin()`. So we don't care at this point that the prevout might already be spent? Might be worth a comment.",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567475382,567475382,src/txmempool.cpp
MarcoFalke,2021-02-01 06:30:11,"That wouldn't work, because the error reason couldn't be returned?",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567589472,567589472,src/validation.h
jnewbery,2021-02-01 13:32:31,"There's no guidance in the style guide on this. I tried to update the style guide to include guidance in https://github.com/bitcoin/bitcoin/pull/19759, but people had *very strong feelings* so I backed off.",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567827106,567827106,src/validation.h
jnewbery,2021-02-01 13:48:08,"Since these ctors are just initializing members, you could do it all in the initializer list:\n\n```suggestion\n    /** Constructor for failure case */\n    explicit MempoolAcceptResult(TxValidationState state, CTransactionRef ptx) :\n        m_accepted(false), m_state(state), m_failed_ptx(ptx), m_replaced_transactions(nullopt),\n        m_base_fees(nullopt) {}\n\n    /** Constructor for s",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567837440,567837440,src/validation.h
jnewbery,2021-02-01 13:50:44,"Consider joining these lines:\n\n```suggestion\n                if (AcceptToMemoryPoolWithTime(chainparams, pool, tx, nTime,\n                                               false /* bypass_limits */,\n                                               false /* test_accept */).m_accepted) {\n```",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567839245,567839245,src/validation.cpp
jnewbery,2021-02-01 13:57:25,Oops. You're right. Ignore this!,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567843710,567843710,src/rpc/rawtransaction.cpp
jnewbery,2021-02-01 14:10:32,"```suggestion\n    TxValidationState& state = ws.m_state;\n```",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567852656,567852656,src/validation.cpp
jnewbery,2021-02-01 14:11:12,"```suggestion\n    TxValidationState& state = ws.m_state;\n```",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567853147,567853147,src/validation.cpp
jnewbery,2021-02-01 14:11:21,"```suggestion\n    TxValidationState& state = ws.m_state;\n```",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567853236,567853236,src/validation.cpp
jnewbery,2021-02-01 14:11:48,"```suggestion\n    TxValidationState& state = ws.m_state;\n```",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567853513,567853513,src/validation.cpp
jnewbery,2021-02-01 14:12:34,Consider changing this to `ws` to match parameter names in the other functions.,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567854054,567854054,src/validation.cpp
jnewbery,2021-02-01 14:16:09,"This seems to be the odd one out in ATMPArgs, now that all of the others are const. Any reason that this one shouldn't live in Workspace?",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567856457,567856457,src/validation.cpp
jnewbery,2021-02-01 14:21:19,"There's no need to set `coin` in this failure case. From the interface definition in `CCoinsView::GetCoin`:\n\n> When false is returned, coin's value is unspecified.",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567860224,567860224,src/txmempool.cpp
jnewbery,2021-02-01 14:23:18,You can just use `std::map.count()` here since you don't actually need the value of the coin.,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567861603,567861603,src/txmempool.cpp
jnewbery,2021-02-01 14:25:15,"Remove "", and it cannot have spent entries"". That's vestigial from when a `CCoins` objects was returned for the full transaction.",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567863028,567863028,src/txmempool.cpp
jnewbery,2021-02-01 14:30:16,Switching the logic ordering here is a little confusing. I'd suggest leaving it as it was.,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567867011,567867011,src/txmempool.cpp
jnewbery,2021-02-01 14:30:48,Presumably `tx->IsCoinBase()` will always be false here? We can't accept coinbase transactions into our mempool.,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567867414,567867414,src/txmempool.cpp
jnewbery,2021-02-01 14:32:24,"It looks like this (and by extension, `package_txids`) is unused.",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567868462,567868462,src/txmempool.h
jnewbery,2021-02-01 14:34:17,"What's the reason for having two maps here? Why not just keep one, add to it when a new coin is created and remove from it when the coin is spent?",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567869882,567869882,src/txmempool.h
jnewbery,2021-02-01 14:41:34,"It seems a bit odd that the first time `PreChecks()` is called, we're calling `SetBackend()` when the backend is already set in the constructor for `MemPoolAccept`, and that we repeatedly call `m_view.SetBackend(m_viewmempool)`\n\nI suggest that in `MemPoolAccept::MemPoolAccept()`:\n\n- set `m_viewmempool` to be backed by `m_dummy`\n- set `m_view` to be backed by `m_viewmempool`\n\nand then",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567875231,567875231,src/validation.cpp
jnewbery,2021-02-01 14:57:05,"I think this whole comment about ""must keep pool.cs"" is obsolete, since `pool.cs` is kept throughout the `MemPoolAccept` run.",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567887448,567887448,src/validation.cpp
glozow,2021-02-01 15:27:46,woah o.O nice catch. I should add a test for absurd fees in package üòÖ ,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567911483,567911483,src/rpc/rawtransaction.cpp
glozow,2021-02-01 15:34:14,"Yeah I'm mostly trying to replicate the current usage, which is:\n1. ATMP returns a boolean. we check that first. (equivalent = `m_accepted`)\n2. if the boolean is false, we care about the TxValidationState `state`. I'm not sure if `state.IsValid()` is ever true when the boolean is false, but there is a [code path](https://github.com/bitcoin/bitcoin/blob/2c0fc856a6b0c82c5dddbbaee417171577514507/",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567916643,567916643,src/validation.h
glozow,2021-02-01 15:36:24,I want to generate to deterministic address so I don't need to use wallet,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567918360,567918360,test/functional/rpc_packages.py
glozow,2021-02-01 15:48:00,"We had a short discussion about it [here](https://github.com/bitcoin/bitcoin/pull/20833#discussion_r557185885). I think the main idea is to distinguish between a meaningless `fee`/`replaced_transactions` and a 0/empty one. It is ""guarded"" but technically the caller could still access them üòÖ don't want them to do that by accident.",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567928002,567928002,src/validation.h
jnewbery,2021-02-01 16:01:12,"Consider using range based loops here:\n\n```suggestion\n    for (Workspace& ws : workspaces) {\n        if (!PreChecks(args, ws)) {\n            return std::vector<MempoolAcceptResult> { MempoolAcceptResult(ws.m_state, ws.m_ptx) };\n        }\n        m_viewmempool.AddPackageTransaction(ws.m_ptx);\n    }\n\n    // TODO: Enforce package-level feerate and other policies before script chec",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567938951,567938951,src/validation.cpp
jnewbery,2021-02-01 16:05:55,"No need for the local temporary `chainparams`:\n\n```suggestion\n    MemPoolAccept::ATMPArgs args { Params(), GetTime(), false, coins_to_uncache, test_accept };\n```\n\nSame goes for `chainparams` var in `AcceptToMemoryPool()` if you want to change it.",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567942595,567942595,src/validation.cpp
jnewbery,2021-02-01 16:18:26,"I'm not sure that I like the interface of passing back a CTransactionRef just for this failure case. I wonder if we should:\n\n- allow `m_accepted` to be tri-state {accepted, failed, not_fully_validated}. That can be achieved with a `std::optional<bool>`\n- return a `MempoolAcceptResult` for all transactions in the package where either:\n  - all are success\n  - one is fail and the rest are n",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567952639,567952639,src/rpc/rawtransaction.cpp
glozow,2021-02-01 17:17:42,"Yes, I don't like it either. The lifetime of `Workspace` ends when `MemPoolAccept::AcceptSingleTransaction()` returns, but the coins in `coins_to_uncache` are uncached in ATMP afterward. If it's appropriate to do coin-uncaching inside `MemPoolAccept::Accept()` functions, then we can move it?",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567998921,567998921,src/validation.cpp
glozow,2021-02-01 17:24:24,"We wouldn't be able to distinguish between a `missing-inputs` and a `conflict-in-package`. Perhaps that's desirable, but I felt this was simpler?",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r568003551,568003551,src/txmempool.h
glozow,2021-02-01 17:25:01,Agreed üß† will update,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r568003927,568003927,src/validation.cpp
jnewbery,2021-02-01 17:34:12,"Perhaps they could be uncached in `MemPoolAccept`'s destructor? That's similar to an RAII pattern where the object releases any resources as it goes out of scope.\n\nI don't think this needs to be done as part of this PR. Could be a follow up if it sounds like an improvement to you.",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r568010215,568010215,src/validation.cpp
jnewbery,2021-02-01 17:35:11,"Ah, great point. Maybe add a code comment to say that?",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r568010841,568010841,src/txmempool.h
glozow,2021-02-02 00:04:51,"Yeah, maybe for a future PR ü§î would be nice. The only complication is that we only uncache if the validation failed, so `MemPoolAccept` would need to know that when it's destructing...",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r568228020,568228020,src/validation.cpp
glozow,2021-02-02 00:52:24,"You're right, I'll add an `Assume()` so we get a debug error if it's spent.",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r568246712,568246712,src/txmempool.cpp
Xekyo,2021-03-02 18:43:07,Nit: I would write mempool as a single word at this point in the lingo evolution. :),https://github.com/bitcoin/bitcoin/pull/20833#discussion_r585817249,585817249,src/test/miner_tests.cpp
Xekyo,2021-03-02 18:55:55,Optionally add an introductory comment for `coin_empty`. Perhaps `spent_coin` is more speaking.,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r585825994,585825994,src/validation.cpp
Xekyo,2021-03-03 20:44:04,Slightly surprised that the function's name is `get‚Ä¶` but it returns a boolean on whether the retrieval was successful. I'd kinda expect a `get‚Ä¶` function to return the object.,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r586764973,586764973,src/validation.cpp
Xekyo,2021-03-03 21:01:52,"If this is is supposed to mean that there are two conflicting transactions in the package, this could be phrased a bit more clearly. How about:\n\n""Check if another transaction in the package has already spent the given UTXO. UTXO consumed by this package are only tracked in `m_temp_spent`.""",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r586775962,586775962,src/validation.cpp
Xekyo,2021-03-03 21:04:48,"Isn't only a single package under review here? How about:\n\n""Check whether the input was created by another transaction in the package under review.""",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r586777630,586777630,src/validation.cpp
Xekyo,2021-03-03 21:06:24,It would make more sense to me if the names of `GetCoin` and `AccessCoin` were swapped‚Ä¶ :confounded:,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r586778515,586778515,src/validation.cpp
Xekyo,2021-03-04 22:47:45,"It would have helped me if this comment had stated what assumptions the transaction package underlies if any,  (e.g. whether they are all part of a connected set or not). I might have expected such assumptions to be explicitly stated in the parameter descriptions of a function in another codebase.",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r587883103,587883103,src/validation.cpp
Xekyo,2021-03-04 22:56:02,"This sounds like you're assuming that you're getting the transactions in topological order. If that's a requirement, it would be good to list that above as mentioned.\n\nAlso, you may want to make your API input checks as lenient as possible and a specific order does not seem necessary to me.",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r587889697,587889697,src/validation.cpp
Xekyo,2021-03-04 23:04:07,I thought this RPC was supposed to generally fail if any transactions fail.,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r587893955,587893955,src/rpc/rawtransaction.cpp
Xekyo,2021-03-04 23:25:25,"Optional additional tests:\n‚Ä¢ parent with two distinct child transactions\n‚Ä¢ child with two parent transactions",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r587905367,587905367,test/functional/rpc_packages.py
Xekyo,2021-03-04 23:28:27,"Maybe I'm just overlooking it, but what about a valid set of independent transactions? That should be accepted now, but later fail when you require packages to consist of dependent transactions. Especially, I would be interested in seeing that the connectedness test properly recognizes two independent parent-child pairs as unconnected.",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r587906781,587906781,test/functional/rpc_packages.py
glozow,2021-03-06 20:14:55,I changed my mind on it because it seemed like the 1-if-failure API was confusing and less helpful,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r588925773,588925773,src/rpc/rawtransaction.cpp
glozow,2021-03-08 17:58:45,"Marking as resolved because this wouldn't be a change for this PR, but yes I agree the CoinsView API is not the most aptly named :)",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r589631384,589631384,src/validation.cpp
glozow,2021-03-08 17:58:58,"Marking as resolved because this wouldn't be a change for this PR, but yes I agree the CoinsView API is not the most aptly named :)",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r589631544,589631544,src/validation.cpp
sipa,2021-03-08 18:31:59,"FWIW, there is a historical reason why there are lots of `bool Get*(....,&return_object)` functions in the codebase. Before C++11's move semantics it was hard to avoid copies in many cases (needing `swap`s all over the place...). [copy elision](https://en.cppreference.com/w/cpp/language/copy_elision) existed in C++98, but has been expanded greatly since (and is now mandatory in C++17). It's also o",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r589653414,589653414,src/validation.cpp
glozow,2021-03-08 21:03:35,"> ‚Ä¢ parent with two distinct child transactions\n> ‚Ä¢ child with two parent transactions\n\nAdded both tests. Thanks for the suggestion!",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r589746428,589746428,test/functional/rpc_packages.py
glozow,2021-03-08 21:09:04,"I've been thinking about your comment about making the API more lenient, and I agree that I should always let `testmempoolaccept` accept lists of transactions that aren't necessarily connected. My plan for now is to return a `depends` list for each transaction, which will allow us to test the package-ness of the transactions passed in.",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r589749652,589749652,test/functional/rpc_packages.py
ariard,2021-03-15 15:15:17,"nit : ""/* bypass_limits */ false""",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r594425788,594425788,src/validation.cpp
ariard,2021-03-15 15:39:55,"Should we limit the submitted package size for a reasonable bound for now (`MAX_PACKAGE_SIZE`) ?\n\nEven if package can only be submitted by the RPC interface, I'm not sure I would qualify this one of fully-trusted. A service provider or L2 node might indirectly call `testmempoolaccept` on its local node with some package content contributed by a user/counterparty. E.g in LN, the number of HTLCs",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r594447808,594447808,src/validation.cpp
ariard,2021-03-15 16:14:39,"I think we have an issue with how we're currently evaluating package in case of conflict.\n\nLet's say you have a conflicting chain of transaction with your mempool. Conflicting parent transaction has a 5sat/vbyte feerate 300 vbyte size, child transaction has a 20sat/vbyte feerate 400 vbyte size. Absolute fee of this chain of transaction is thus 5 * 300 + 20 * 400 = 9500 sat.\n\nA package is t",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r594478671,594478671,src/validation.cpp
ariard,2021-03-15 16:27:23,"I don't follow the rational to clear the temporary coins ""otherwise scripts checks will error on coins that are spent within the package"". If a coin is already spent by a previous input from the same transaction or even another package transaction it's the expected script checks behavior to fail on it ? \n\nAt the contrary, I would understand removing coins to avoid a package parent spending a c",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r594489891,594489891,src/validation.cpp
ariard,2021-03-15 16:42:29,"I think you're forgetting the mempool size check in `Finalize` which might exclude your newly package if it was in the feerate-bottom of the mempool. See `CTxMemPool::TrimToSize`.\n\n---------\n\nBeyond the fact that policy flags are a superset of the consensus ones, you could also recall that's running `ConsensusScriptChecks` isn't worthy here as we don't try to cache script results. `testmem",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r594502100,594502100,src/validation.cpp
ariard,2021-03-15 16:56:13,"Do you have test coverage for this ?\n\n`CalculateMemPoolAncestors` is running on `m_pool` which is updated with validated transaction only in `Finalize`. I don't see how a package transaction is successfully accounted in descendant/ancestor limits in the subsequent evaluation of the package...",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r594513639,594513639,src/rpc/rawtransaction.cpp
ariard,2021-03-15 17:05:16,I think this is only needed for spentness evaluation in `GetCoin` ? If so just make it part of the new class.,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r594521296,594521296,src/validation.cpp
ariard,2021-03-15 17:06:36,"Code-organisation wise, maybe better to move it in `coins.h`, validation.cpp is already wide enough ?",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r594522337,594522337,src/validation.cpp
ariard,2021-03-15 17:12:35,"I think we should think twice w.r.t independence as the evaluation of _topologically_-independent packages might still have interdependent evaluations.\n\nLet's say your package 1 is replacing in-mempool tx A. Such high-feerate tx A is a replacement blocker for the low-feerate package 2. Evaluating package 1 then package 2 make both of them accepted, the reserve isn't true.\n\nAlso it make it ",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r594527279,594527279,src/validation.h
glozow,2021-03-15 20:29:10,"I actually think it's better organization to put it in validation.cpp, since it's only used by MemPoolAccept.",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r594661303,594661303,src/validation.cpp
glozow,2021-03-15 20:31:06,I'll update the comment to make it clearer. A lot of functions in the script checks do a quick assert(!coin.IsSpent()) sanity check. This breaks when the coin is spent by a later transaction in the package (and we've updated it while going through all the PreChecks),https://github.com/bitcoin/bitcoin/pull/20833#discussion_r594662472,594662472,src/validation.cpp
jnewbery,2021-03-17 10:50:14,"Can this be a const reference?\n\n```suggestion\n                        const CCoinsView& viewMemPool,\n```\n\nPassing by const reference indicates that the argument won't be mutated in the function, and is the preferred way of passing in-params that are not cheap to copy (https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rf-in)",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r595906163,595906163,src/validation.h
jnewbery,2021-03-17 11:09:40,"Indeed:\n\n```diff\n-/** An empty coin used as a placeholder for a spent coin.*/\n-static const Coin coin_spent;\n /**\n  * A CoinsView that adds a memory cache to another CoinsView and serves as temporary scratch space.\n  * Used by MemPoolAccept class to validate transactions and packages before submitting to mempool.\n@@ -489,6 +487,8 @@ protected:\n     */\n     std::set<COutPoint> m",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r595919203,595919203,src/validation.cpp
jnewbery,2021-03-17 11:14:21,"You could combine these into a single `std::set<COutPoint, std::optional<Coin>>` (where `nullopt` indicates that the coin has been spent). That'd avoid doing lookups in both places. Up to you whether you think that's clearer or not.\n\nEDIT: Or even just use `std::set<COutPoint, Coin>`, where the `Coin` is an empty (spent) coin if the coin has been spent.",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r595922179,595922179,src/validation.cpp
jnewbery,2021-03-17 11:16:11,"```suggestion\n    * Coins spent by transactions being validated. When validating a package, we need to track these\n```",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r595923333,595923333,src/validation.cpp
jnewbery,2021-03-17 11:17:41,"We've stopped using hungarian style naming, so this should probably just be called `CoinsViewTemporary` (the `C` indicated ""class"")",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r595924363,595924363,src/validation.cpp
jnewbery,2021-03-17 11:28:33,"Doesn't need to be `protected`. Nothing inherits from this class so it can use (default) private specifier.\n\n```suggestion\n```",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r595931131,595931131,src/validation.cpp
jnewbery,2021-03-17 11:53:05,"It makes me slightly uneasy that we're returning a reference to a CTransaction object which was passed in to `ProcessNewPackage()`. The caller needs to know that they can't let that passed-in CTransaction go out of scope, or they'll have a dangling reference.\n\nWhat do you think about passing back the txid, and then having the caller look up the txid/wtxid/virtual size from the CTransaction obj",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r595946210,595946210,src/validation.h
jnewbery,2021-03-17 12:11:10,"It's not immediately obvious what the different constructor calls here indicate. Perhaps adding factory methods to the struct would make it a bit clearer:\n\n```diff\ndiff --git a/src/validation.cpp b/src/validation.cpp\nindex 121181393d..c65964a976 100644\n--- a/src/validation.cpp\n+++ b/src/validation.cpp\n@@ -1176,7 +1176,7 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(co",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r595957763,595957763,src/validation.cpp
jnewbery,2021-03-17 12:18:45,It's confusing that you're using the same variable name `ws` in the for loop and as an argument to this lambda.,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r595962632,595962632,src/validation.cpp
jnewbery,2021-03-17 12:25:52,I wonder if we should have a separate constructor for the UNFINISHED state. It doesn't really make sense to pass in a `TxValidationState` object if acceptance testing is incomplete.,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r595967349,595967349,src/validation.h
jnewbery,2021-03-17 12:31:34,"I love `std::transform` more than most, but I think this would be simpler if you just pushed the results onto `results` as you went (and then filled in the remaining `results` as `UNFINISHED` if you fail on any tx).",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r595971282,595971282,src/validation.cpp
glozow,2021-03-17 21:20:06,Ooh that's nice! üëÄ ,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r596390724,596390724,src/validation.cpp
glozow,2021-03-18 20:36:30,"> Do you have test coverage for this ?\n\nYes, I update the test case in mempool_accept.py, it should return a JSON Serialization Error for > 25 transactions.\n\nWill be pushing an update to add package count/size limits in the validation code.",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r597224531,597224531,src/rpc/rawtransaction.cpp
jnewbery,2021-03-19 10:19:38,"```suggestion\n#include <vector>\n\n#include <consensus/validation.h>\n#include <primitives/transaction.h>\n```",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r597558092,597558092,src/packages.h
jnewbery,2021-03-19 10:20:32,"Can be constexpr, uint32_t and brace initialized :grimacing: \n\n```suggestion\nstatic constexpr uint32_t MAX_PACKAGE_COUNT{25};\n```",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r597558738,597558738,src/packages.h
jnewbery,2021-03-19 10:24:32,"No need to do two lookups into the map:\n\n```suggestion\n        auto it = validation_result.m_tx_results.find(tx->GetHash());\n        if (it == validation_result.m_tx_results.end()) {\n            // Validation unfinished. Just return the txid and wtxid.\n            rpc_result.push_back(result_inner);\n            continue;\n        }\n        const auto& accept_result = it->second;\",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r597561136,597561136,src/rpc/rawtransaction.cpp
jnewbery,2021-03-19 10:35:06,"Perhaps avoid using the global `::ChainstateActive()` function to avoid conflict with #21391 \n\n```diff\ndiff --git a/src/rpc/rawtransaction.cpp b/src/rpc/rawtransaction.cpp\nindex cddb082c2f..1ad0b16545 100644\n--- a/src/rpc/rawtransaction.cpp\n+++ b/src/rpc/rawtransaction.cpp\n@@ -938,6 +938,8 @@ static RPCHelpMan testmempoolaccept()\n                                              CFeeRa",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r597567858,597567858,src/rpc/rawtransaction.cpp
jnewbery,2021-03-19 10:45:08,"No need to specify default initialization in the initializer list. It'll happen anyway:\n\n```suggestion\n        : m_tx_results{ {txid, result} } {}\n```",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r597574361,597574361,src/validation.h
jnewbery,2021-03-19 10:50:41,"Avoid the global `::ChainstateActive()` function:\n\n```suggestion\n    active_chainstate.FlushStateToDisk(chainparams, state_dummy, FlushStateMode::PERIODIC);\n```",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r597580310,597580310,src/validation.cpp
jnewbery,2021-03-19 10:53:10,This looks unsafe to me. You're taking a reference to a temporary (the return value from `AcceptMultipleTransactions()` or `PackageMempoolAcceptResult()`),https://github.com/bitcoin/bitcoin/pull/20833#discussion_r597582750,597582750,src/validation.cpp
jnewbery,2021-03-19 10:53:25,What happens here if you always call `AcceptMultipleTransactions()` (even for a single transaction?),https://github.com/bitcoin/bitcoin/pull/20833#discussion_r597583016,597583016,src/validation.cpp
jnewbery,2021-03-19 11:01:53,Is this needed?,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r597590521,597590521,src/validation.cpp
glozow,2021-03-19 15:12:31,"The way I have it right now, it `AcceptMultipleTransactions()` should give an identical result to `AcceptSingleTransaction()` except that multiple allows 101KvB total size (so theoretically you could have 1 tx of size 101KvB)... can't think of any other differences. But should the rules diverge further for 1 tx vs package, it'll cause some of the current `testmempoolaccept` tests to fail. I was pl",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r597758740,597758740,src/validation.cpp
glozow,2021-03-19 15:12:58,"gah of course, my bad ü§¶ will do",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r597759075,597759075,src/rpc/rawtransaction.cpp
glozow,2021-03-19 15:20:50,"> I think you're forgetting the mempool size check in Finalize\n\nWe have a feerate check against the mempool minimum fee in `CheckFeeRate()` (in `PreChecks()`). The trim to size is done after submitting to mempool just in case it wasn't accurate (and I suspect the mempool lock was perhaps not held the whole time in the past, so it was possible for the mempool to grow in the time we were doing s",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r597765318,597765318,src/validation.cpp
glozow,2021-03-19 15:25:23,"> Beyond the fact that policy flags are a superset of the consensus ones, you could also recall that's running `ConsensusScriptChecks` isn't worthy here as we don't try to cache script results.\n\nYep, I agree! See also [this discussion](https://github.com/bitcoin/bitcoin/pull/20833#discussion_r552684985).",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r597768912,597768912,src/validation.cpp
glozow,2021-03-19 15:25:51,Added a max size and max count in the latest push :),https://github.com/bitcoin/bitcoin/pull/20833#discussion_r597769305,597769305,src/validation.cpp
jnewbery,2021-03-19 17:26:23,"I was wrong. The lifetime of the temporary is extended by binding it to the const lvalue reference: https://en.cppreference.com/w/cpp/language/lifetime#Temporary_object_lifetime.\n\nStill, I think it'd be better to make `result` a `PackageMempoolAcceptResult`. I think RVO will mean it doesn't result in an extra copy.",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r597855446,597855446,src/validation.cpp
glozow,2021-03-29 23:49:19,"![image](https://user-images.githubusercontent.com/25183001/112912067-8760af80-90ab-11eb-9967-97a6c6b3442d.png)\n\n(removed for now)",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r603685544,603685544,src/validation.cpp
glozow,2021-03-29 23:51:11,chonged to be a `PackageMempoolAcceptResult`,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r603686184,603686184,src/validation.cpp
glozow,2021-03-29 23:58:57,"Thanks for the suggestion! I considered this when I first saw the comment, but since then, I've updated `AcceptMultipleTransactions()` to just remove `m_temp_spent` after all the `PreChecks()` so that the script checks can use coins from `m_temp_added`. That makes this suggestion no longer apply so I'm going to mark it as resolved.",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r603688999,603688999,src/validation.cpp
achow101,2021-04-02 16:50:48,"In 78ab8b1da104e76445e65aa7e2db54d338e0b99a ""[validation] add CoinsViewTemporary for mempool validation""\n\n`&& !spend_coin.IsSpent()` seems to be unnecessary as `GetCoin` returns `!coin.IsSpent()`.",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r606321612,606321612,src/validation.cpp
achow101,2021-04-02 17:46:45,"In f7880be ""[validation] package validation test_accept=true""\n\nTo more accurately reflect mempool acceptance behavior, I think it would be better to be using the values for `-limitancestorcount`, `-limitdescendantcount`, `-limitancestorsize`, and `-limitdescendantsize` for these checks.",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r606345705,606345705,src/validation.cpp
achow101,2021-04-02 17:50:01,"In 1bec7b18ab8a6e8993fcb6c19a0b13fb4df0eeeb ""[rpc] allow multiple txns in testmempoolaccept""\n\nGenerally we want to do all of the transaction decoding before getting all of these mempool and chainstate things.",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r606347122,606347122,src/rpc/rawtransaction.cpp
glozow,2021-04-02 22:07:04,"Descendant/ancestor limits will still be checked within validation (and are stricter than this check since this doesn't include in-mempool transactions). This is just preventing us from working on a really big package. And if/when we have p2p packages, we'd enforce `MAX_PACKAGE_COUNT` as a limit.",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r606447491,606447491,src/validation.cpp
jnewbery,2021-04-03 07:45:42,"Why? We can't do anything in this function if there isn't a mempool, so why not exit early if it doesn't exist?",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r606633360,606633360,src/rpc/rawtransaction.cpp
achow101,2021-04-03 17:31:13,"The pattern that we do in every other RPC that handles raw transactions (and most of the ones that take user input that needs to be parsed) is that the parsing/decoding is done first before acquiring anything internal needed for processing. After all, we can't do anything in this function if the transaction is malformed, so why not exit early if it can't be decoded?\n\nI also think that it would",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r606689520,606689520,src/rpc/rawtransaction.cpp
jnewbery,2021-04-09 08:43:56,"I see these `Assume` functions as essentially asserting entry conditions for the function. For rpc methods that require a component to exist in order to function at all (such as `testmempoolaccept`), then I think assume/exit at the top of the function makes most sense. Doing that has benefits:\n\n- avoids unexpected side-effects\n- avoid unnecessary lock-taking or resource usage\n- explicitly ",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r610455249,610455249,src/rpc/rawtransaction.cpp
glozow,2021-04-13 12:44:49,Done,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r612411317,612411317,src/validation.cpp
glozow,2021-04-13 13:03:30,"Current policy is they can be independent or dependent (although I don't think the user would get much use out of independent ones). Given that RBF is now disabled, hopefully this concern is resolved?",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r612426153,612426153,src/validation.h
JeremyRubin,2021-04-14 21:19:31,"suggestion: make Package a struct wrapper with private fields so that you have to go through a smart constructor?\n\nprevents API misuse",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r613594392,613594392,src/packages.h
JeremyRubin,2021-04-14 21:21:25,"nit: clarify which order that is (e.g., `if tx B and C are a child of A the order may be [A, B, C] or [A, C, B]`) ",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r613595514,613595514,src/rpc/rawtransaction.cpp
JeremyRubin,2021-04-14 21:22:10,"nit: clarify is duplicate transactions [A, A] are allowed",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r613595886,613595886,src/rpc/rawtransaction.cpp
JeremyRubin,2021-04-14 21:34:45,"Not sure if we do this elsewhere, but would be nice to not take locks inside a ternary with returns in it.",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r613602225,613602225,src/rpc/rawtransaction.cpp
JeremyRubin,2021-04-14 21:36:46,"I think we should use ProcessNewPackage here -- if this is done to avoid breaking RPC change, then I'd rather a new RPC call that consistently uses one call or the other.\n\nOtherwise how to test if a single tx as a package is accepted?",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r613603255,613603255,src/rpc/rawtransaction.cpp
JeremyRubin,2021-04-14 21:39:59,nit: can inherit from u8 to make smaller,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r613604854,613604854,src/validation.h
JeremyRubin,2021-04-14 21:40:30,make sure to sort the m_result_type after m_state for packing rules.,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r613605097,613605097,src/validation.h
glozow,2021-04-14 22:02:55,"Yeah, there's a breaking RPC change if they try to testmempoolaccept on a tx that does an RBF (since we don't allow that in packages). I'm not really sure why a user would want to test a single tx as a package?",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r613615583,613615583,src/rpc/rawtransaction.cpp
JeremyRubin,2021-04-14 22:05:59,"Since you're using a const vec ref here, may as well use the Span API.\n\nThis way you can construct a span from a single pointer to a CTxMemPoolEntry and avoid needing to allocate to call CalculateMempoolAncestors",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r613616966,613616966,src/txmempool.cpp
JeremyRubin,2021-04-14 22:09:25,"If you're touching this code you *could* update it to use Epoch Algorithms.\n\nEssentially all you need to do is get a new epoch, and then visit the txiters you are interested in and add them to a vec instead of a set.\n\nThis lets you get rid of the O(n^2)  potential of a merge call.\n\n",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r613618547,613618547,src/txmempool.cpp
JeremyRubin,2021-04-14 22:09:53,"Alternatively, I can PR the epoch algorithm and you can rebase on it, or I can PR it before this code gets released.",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r613618750,613618750,src/txmempool.cpp
JeremyRubin,2021-04-14 22:19:29,"I think staged ancestors is possibly overcounting here, need to run through if there are circumstances where we'd trigger early here.",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r613623223,613623223,src/txmempool.cpp
JeremyRubin,2021-04-14 22:21:30,"When you do the span you'd do `std::span(&entry, 1)` I think",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r613624063,613624063,src/txmempool.cpp
glozow,2021-04-14 22:25:21,"Yes, it's certainly overestimating for every case except for a package of parent + child. But I assume that's the vast majority of cases for a package.\n\n~I did just notice that we're double-counting the current tx though, so I'll update to do `staged_ancestors.size() + setAncestors.size() + total count - 1 > limitAncestorCount`~",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r613625630,613625630,src/txmempool.cpp
JeremyRubin,2021-04-14 22:49:54,"Can this not be a vector of equal length to the package sent and index it by index?\n\nThis will most likely save memory & less work.",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r613635484,613635484,src/validation.h
JeremyRubin,2021-04-14 22:54:56,maybe bench using unordered_set here,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r613637283,613637283,src/validation.cpp
JeremyRubin,2021-04-14 23:18:35,ibid,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r613645936,613645936,src/validation.cpp
JeremyRubin,2021-04-14 23:21:14,"nit: Hmmm... I know GetCoin is perf sensitive but do we do this placeholder coin often?\n\nWould optional coin be cleaner?\n\n",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r613646867,613646867,src/validation.cpp
JeremyRubin,2021-04-14 23:25:51,nit: would be shorter to write `!AccessCoin(outpoint).IsSpent()`,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r613648523,613648523,src/validation.cpp
JeremyRubin,2021-04-14 23:40:50,this should be documented in the function doc that this must be true.,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r613653530,613653530,src/validation.cpp
JeremyRubin,2021-04-14 23:41:57,HaveCoin?,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r613653851,613653851,src/validation.cpp
JeremyRubin,2021-04-15 00:40:47,"I think you should just return false here maybe? would need to check the API but that should tell you that it failed (otherwise change the API to be nothrow)\n\n",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r613672128,613672128,src/validation.cpp
JeremyRubin,2021-04-15 01:03:25,"would prolly be faster to build a hashset as you go thru here.\n\nIf not, you can transform the top for loop to scan the txiters and just scan the txns txids after the current one for a small performance bump.",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r613682979,613682979,src/validation.cpp
JeremyRubin,2021-04-15 01:13:59,"note that this is not canonically ordered. \n\nOne way to do this is to add a new field ""rank"" in the workspace. For each tx, it's rank is max(parent rank) + 1. Therefore no tx has a lower rank than it's parent. Then you can verify sorted by rank primary and secondary hash `a.rank < b.rank || (a.rank == b.rank && a.hash < b.hash)`. \n\nThis lets you verify that you have received the package in",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r613689838,613689838,src/validation.cpp
JeremyRubin,2021-04-15 01:14:36,To do this change I'd get rid of the find_if's and make them for loops it will be easier to code.,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r613690286,613690286,src/validation.cpp
JeremyRubin,2021-04-15 01:17:09,nit: you can directly construct the workspace on the back of workspaces ,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r613691916,613691916,src/validation.cpp
JeremyRubin,2021-04-15 01:18:11,altho then you want to go to end-1 if you do that.,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r613692663,613692663,src/validation.cpp
JeremyRubin,2021-04-15 01:20:14,I think this is intended and was out of scope of this PR -- this is just setup for later expanding what can be accepted,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r613693573,613693573,src/validation.cpp
JeremyRubin,2021-04-15 01:26:13,"separately -- is it true that PreChecks is not entirely stateless? On edge condition, 2 separate ATMPs could have different minfees & therefore this package code is a little different than separate submissions.",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r613695175,613695175,src/validation.cpp
JeremyRubin,2021-04-15 01:33:06,"maybe add a forceaspackage param bool? Would be good to be able to test the single tx as a package code path to test your PR, and a user would want to the same behavior call independent.\n\nEventually I think all relay should be going through the package path so I like to minimize special casing :)",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r613697232,613697232,src/rpc/rawtransaction.cpp
glozow,2021-04-15 13:17:42,"`PreChecks` is not stateless, no. Maybe you're thinking of `CheckTransaction`?\nThere's no way to make separate mempool accepts identical unless we hold cs_main the entire time - you can just as well have different results from the inputs getting spent in between calls.",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r614060709,614060709,src/validation.cpp
glozow,2021-04-15 19:52:03,"I guess that'd need to be a vector of optionals - probably more memory, actually. I only insert a result into the map if it's fully validated, so sometimes it only has 1 result.",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r614350204,614350204,src/validation.h
glozow,2021-04-15 19:55:04,"We had a conversation about the Coins API being a little weird earlier: https://github.com/bitcoin/bitcoin/pull/20833#discussion_r586764973\n\nIn any case, it's out of the scope of this PR to change the Coins API, so I'm going to leave it as is :shrug:",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r614351939,614351939,src/validation.cpp
JeremyRubin,2021-04-15 19:57:46,"Well so the max size is a vec of size 25 -- so it's a single allocation when you reserve v.s. 25 allocations for the map.\n\nFurther, the map each allocation is IIRC 2-or-3 pointers (16 - 24 bytes), 32 bytes for hash, and then however big MempoolAcceptResult is.\n\nFurther in the case where you do have a few things it's extra work/indirection to iterate/lookup.\n\nYou don't need a optional b",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r614353454,614353454,src/validation.h
JeremyRubin,2021-04-15 20:02:16,"I guess to be more concrete -- allocating 25 kinda small things is a vec as single allocation isn't really an issue, so we might as well do it. In the worst case it's more efficient, and in the best case it's not too bad. ",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r614356106,614356106,src/validation.h
glozow,2021-04-15 21:10:59,"Oh I wasn't thinking of it that way - why should all relay go through the package path?\n\nFor tests, it's definitely possible to call `ProcessNewPackage` with a package of 1 transaction, it's just not exposed through RPC. I have the fuzzer doing it (see top commit)",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r614394055,614394055,src/rpc/rawtransaction.cpp
glozow,2021-04-15 21:13:25,"Most compilers will byte-align it, no?",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r614395272,614395272,src/validation.h
glozow,2021-04-15 21:14:59,"> Alternatively, I can PR the epoch algorithm and you can rebase on it, or I can PR it before this code gets released.\n\nBoth sound like good options!",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r614396016,614396016,src/txmempool.cpp
JeremyRubin,2021-04-15 21:17:13,"unclear to me what exact size TxValidationState is.\n\nGeneral rule of thumb unless you know something about accesses occurring together often is to sort in order biggest field to smallest, it guarantees good packing IIRC. ",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r614397212,614397212,src/validation.h
glozow,2021-04-16 17:07:27,The API says false = the flush went wrong somehow. I'd like to throw because nobody should be trying to flush the temporary coins cache,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r615001456,615001456,src/validation.cpp
glozow,2021-04-16 17:14:33,"Are you saying make `Package` a struct/class? What do you mean by smart constructor, like `make_unique`/`make_shared`?",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r615005492,615005492,src/packages.h
glozow,2021-04-16 17:15:22,"It's the only way i could think of to keep `validation_result` a const ü§∑ could also do a lambda, which is probably less clean:\n\n```c\nconst PackageMempoolAcceptResult validation_result = [&]() {\n    if (txns.size() > 1) return WITH_LOCK(::cs_main, return ProcessNewPackage());\n    return WITH_LOCK(::cs_main, return ATMP());\n}();\n```",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r615005934,615005934,src/rpc/rawtransaction.cpp
glozow,2021-04-16 17:17:24,what's end-1?,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r615007160,615007160,src/validation.cpp
glozow,2021-04-16 20:56:24,"> note that this is not canonically ordered.\n\nNote that there is no canonical ordering defined yet üòõ although that's indeed what I would design the ordering to be. At this point, since this is just for users to test multiple transactions, there's not really a reason to require this order - i'm only checking the order because it's faster and a better error message than missing-inputs. Same with",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r615118145,615118145,src/validation.cpp
glozow,2021-04-16 20:59:38,"Started on this in #21146 if anyone's interested, resolving here because out of scope for this PR",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r615119651,615119651,src/validation.cpp
glozow,2021-04-16 21:01:24,Done,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r615120336,615120336,src/validation.cpp
glozow,2021-04-16 21:01:34,Done,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r615120408,615120408,src/validation.cpp
glozow,2021-04-16 21:02:06,"Yeah, that's shorter - done.",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r615120610,615120610,src/validation.cpp
glozow,2021-04-16 21:43:39,changed to unordered_map,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r615136392,615136392,src/validation.cpp
glozow,2021-04-16 21:43:51,changed to unordered_set,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r615136467,615136467,src/validation.cpp
glozow,2021-04-16 21:44:32,"Done, doing a hashset. There's only one `find_if` now",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r615136700,615136700,src/validation.cpp
glozow,2021-04-16 21:45:05,constructing in place done,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r615136898,615136898,src/validation.cpp
JeremyRubin,2021-04-17 03:26:04,"yep, just a note :)",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r615199766,615199766,src/validation.cpp
JeremyRubin,2021-04-17 21:45:03,SaltedTXIDHasher; blockhasher is insecure,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r615307827,615307827,src/validation.cpp
JeremyRubin,2021-04-17 21:56:17,"suggestion:\n\nmake std::unordered_map<uint256, bool, SaltedTXIDHasher>, fill it with all the txns in the package set to false, and set true when it's been passed.\n\n\nThen when you're scanning:\n\n```c++\nauto it = txids.find(input.prevout.hash);\nif (it == txids.end()) continue;\nif (it->second == false) /* invalid /*;\n/*\nvalid\n*/\n```\n\nIf you want to get extra fancy to all",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r615308870,615308870,src/validation.cpp
glozow,2021-04-19 21:09:45,"Ah that is much more appropriate, switched. Not sure what you mean by security in this context, it's just being used for faster lookup...?",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r616179494,616179494,src/validation.cpp
glozow,2021-04-19 21:15:02,"Changed to a `std::unordered_map<uint256, bool, SaltedTxidHasher>` and limited the scope of the map\nRe: overloading `SaltedTxidHasher`, I think I'd also want a `SaltedWtxidHasher` ü§î",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r616182280,616182280,src/validation.cpp
ariard,2021-04-22 17:46:07,"I think this check is context-free and can be checked before taking the mempool lock ? Like at the same time we do package limits checks. \n\nIIRC `PackageSpends` verifies the lack of outpoint spends identity among elements of the package set but not among the elements of the mempool set.",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r618615930,618615930,src/validation.cpp
ariard,2021-04-22 17:53:48,"Thanks for the success/failure constructor split since lastest review :)\n\nI think you can add a `Assume(state.IsValid()` in success case.",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r618621245,618621245,src/validation.h
ariard,2021-04-22 18:02:44,"IIUC, let's say you have transaction A and transaction B without dependency between them. If transaction A's ancestor=20 and transaction B's ancestor=15, they will be rejected as the union of their ancestors set is beyond the default `limitAncestorCount`. But if they're submitted through sequential calls to testmempoolaccept they would be accepted ?\n\nI think this quirk is why I would prefer to",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r618627239,618627239,src/txmempool.cpp
ariard,2021-04-22 18:06:09,What's the rational of using KvB instead of weight unit like for `MAX_STANDARD_TX_WEIGHT` ? I think it would be the first variable in the codebase using virtual kilo-bytes.,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r618629408,618629408,src/packages.h
ariard,2021-04-22 18:07:34,Good idea to start isolating package policy logic in its own file. I think it's a good candidate to `policy/` ?,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r618630317,618630317,src/packages.h
ariard,2021-04-22 18:30:20,">  (and I suspect the mempool lock was perhaps not held the whole time in the past, so it was possible for the mempool to grow in the time we were doing script checks?).\n\nMempool lock was maybe not hold but you would have cs_main as a backup no ? I wouldn't be surprise of such behavior, but it's not a behavior on current master (4b5659c) ?\n\n> On master, a test_accept for one transaction st",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r618645014,618645014,src/validation.cpp
ariard,2021-04-22 18:31:24,"Lol, I don't think it was documented in OP at PR opening ;)",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r618645733,618645733,src/validation.cpp
glozow,2021-04-23 00:09:26,"AFAIK the descendant and ancestor limits are denominated in kilo virtual bytes too, no?",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r618829134,618829134,src/packages.h
jnewbery,2021-04-23 07:52:09,No need to `const` pass-by-value parameters. Here and `CAmount fees` below.,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r619015020,619015020,src/validation.h
jnewbery,2021-04-23 07:53:58,There's no `state` parameter in the success case.,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r619016082,619016082,src/validation.h
jnewbery,2021-04-23 08:24:37,This comment is no longer valid.,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r619035752,619035752,src/validation.cpp
jnewbery,2021-04-23 08:48:41,`CheckSequenceLocks()` no longer actually requires `active_chainstate`. You could just as easily pass in a const reference to `m_active_chainstate.m_chain.tip` and then use that in the function.,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r619051657,619051657,src/validation.cpp
jnewbery,2021-04-23 08:49:51,It seems slightly odd to call this `viewMemPool` if any CoinsView can be passed in. Why not just `coins_view` or `view`?,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r619052435,619052435,src/validation.h
darosior,2021-04-23 09:06:35,"Yes, there are plenty of policy constants in virtual bytes. However they can eventually lead to clumsy behaviour (see https://github.com/bitcoin/bitcoin/issues/13283).\n\nAnd also a very slight divergence between the state of our mempool (in virtual bytes) and what miner care about (in weight units) which i'm unsure if we care about (but planned to look into soon :tm: forever).\n\nIn any case ",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r619063587,619063587,src/packages.h
darosior,2021-04-23 09:17:41,"nit: even though i don't think it can be hit, you want `<= MAX_PACKAGE_SIZE` here cause the check in validation is:\n```cpp\ntotal_size > MAX_PACKAGE_SIZE * 1000\n```",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r619070844,619070844,src/test/txvalidation_tests.cpp
jnewbery,2021-04-23 10:10:57,"```suggestion\n    * Update with coins spent and created by a transaction. All inputs should exist and not already be spent.\n```",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r619104448,619104448,src/validation.cpp
jnewbery,2021-04-23 10:14:56,"```suggestion\n    }\n};\n```",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r619106835,619106835,src/validation.cpp
jnewbery,2021-04-23 10:18:06,"Oops sorry, I've led you astray here. Local includes should go before standard library includes :grimacing: ",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r619108792,619108792,src/packages.h
jnewbery,2021-04-23 10:21:53,No need for `const` pass-by-value params.,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r619111163,619111163,src/validation.h
jnewbery,2021-04-23 10:36:30,"I don't think `dummy_entries` and `dummy_ancestors` are the right names here. They really _are_ the entries and ancestors. I'd suggest `entries` and `ancestors_unused`, or perhaps `entries_copy` and `ancestors_unused`.",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r619119275,619119275,src/validation.cpp
jnewbery,2021-04-23 10:37:32,"```suggestion\n        // All transactions must have individually passed mempool ancestor and descendant limits\n```",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r619119830,619119830,src/validation.cpp
jnewbery,2021-04-23 10:41:54,Perhaps expand this comment to say that we're not calling ConsensusScriptChecks because this function is currently only for testaccept. I think we'd want to update it if we allowed package acceptance to actually add txs to the mempool.,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r619122115,619122115,src/validation.cpp
jnewbery,2021-04-23 10:46:16,"> the descendant and ancestor limits are denominated in kilo virtual bytes too, no?\n\nYes:\n\nhttps://github.com/bitcoin/bitcoin/blob/4b5659c6b115315c9fd2902b4edd4b960a5e066e/src/validation.h#L65-L66",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r619124424,619124424,src/packages.h
jnewbery,2021-04-23 11:10:07,"or:\n\n```c++\nconst PackageMempoolAcceptResult validation_result = [&]() {\n    LOCK(::cs_main);\n    if (txns.size() > 1) return PNP());\n    return ATMP();\n}();\n```\n\nI think any of them are fine.",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r619137379,619137379,src/rpc/rawtransaction.cpp
jnewbery,2021-04-23 11:17:26,"This is a slightly odd interface for the user. Imagine a package of {A, B} is submitted:\n\n- B spends one of A's outputs.\n- A is valid but has feerate > max_feerate\n- B is valid and has acceptable feerate\n\nThen the result will show that A is rejected, but B is accepted. That's different from other failure modes where B won't be included in the results since it depends on a rejected tx.",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r619141139,619141139,src/rpc/rawtransaction.cpp
jnewbery,2021-04-23 11:32:56,"Maybe add a comment here that the valid transactions only have their txid and wtxid returned because we didn't complete validation for them (returned immediately after garbage_tx fails prechecks). Conversely, in the test below, we return the full results for the valid transactions because tx_bad_sig only fails in PolicyChecks, after we've already completed validation for the good bois.",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r619149080,619149080,test/functional/rpc_packages.py
jnewbery,2021-04-23 11:34:14,minor style comment: PEP8 says no space before colons: https://www.python.org/dev/peps/pep-0008/#pet-peeves,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r619149686,619149686,test/functional/rpc_packages.py
jnewbery,2021-04-23 11:35:26,"Maybe matches the comment better:\n\n```suggestion\n        for b in node.generatetoaddress(200, self.address)[:-100]:\n```",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r619150328,619150328,test/functional/rpc_packages.py
jnewbery,2021-04-23 11:39:50,"Seems a bit strange (and less maintainable) to have the caller substract this amount, and then add it back here. Can you just use the value of the parent_txid you're passing in?",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r619152627,619152627,test/functional/rpc_packages.py
jnewbery,2021-04-23 11:47:15,Why do you need different scriptpubkeys here? Can you not send both outputs to the same address?,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r619156552,619156552,test/functional/rpc_packages.py
jnewbery,2021-04-23 11:52:48,"It's a little inconsistent that _parent_ is being used in `parent_locking_script` to refer to each tx as you work down the chain, whereas in `parent_tx` it only ever refers to the top tx of the graph.",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r619159444,619159444,test/functional/rpc_packages.py
jnewbery,2021-04-23 11:55:54,I think you've miscounted here. `i` takes values between 0 and 10 here (11 values) M2a - M11a is 10 values.,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r619161126,619161126,test/functional/rpc_packages.py
jnewbery,2021-04-23 11:56:12,"Again, I think this is miscounted.\n\nI think if you just change this to:\n\n```suggestion\n            if i < 11: # M2b... M12b\n```\n\nand the one above to `# M1a... M11a` and update the diagram, we're all good.",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r619161307,619161307,test/functional/rpc_packages.py
jnewbery,2021-04-23 12:04:45,This is excellent!,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r619166084,619166084,test/functional/rpc_packages.py
jnewbery,2021-04-23 12:07:21,Perhaps shuffle and test acceptance a few times?,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r619167508,619167508,test/functional/rpc_packages.py
jnewbery,2021-04-23 12:08:37,did you mean to compare `testres_single` to `testrun_multiple`?,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r619168203,619168203,test/functional/rpc_packages.py
jnewbery,2021-04-23 12:09:29,Nice test. You should try calling it :grin: ,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r619168710,619168710,test/functional/rpc_packages.py
jnewbery,2021-04-23 12:11:23,Maybe add a comment about why this is incomplete and not rejected.,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r619169793,619169793,test/functional/rpc_packages.py
jnewbery,2021-04-23 12:24:56,"You don't need a map here, you can just use a set and erase as you go:\n\n<details>\n<summary>Diff</summary>\n\n```diff\ndiff --git a/src/validation.cpp b/src/validation.cpp\nindex 0b429adfae..c72b5eee02 100644\n--- a/src/validation.cpp\n+++ b/src/validation.cpp\n@@ -1226,9 +1226,9 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n     std::vector<Work",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r619177795,619177795,src/validation.cpp
jnewbery,2021-04-23 17:10:24,"Or you could reverse iterate and add as you go:\n\n<details>\n<summary>CLICK HERE FOR CODE!</summary>\n\n```c++\n    {\n        std::unordered_set<uint256, SaltedTxidHasher> later_txs;\n\n        // Require the package to be sorted in order of dependency, i.e. parents appear before children.\n        // An unsorted package will fail anyway on missing-inputs, but it's better to quit earli",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r619376091,619376091,src/validation.cpp
ariard,2021-04-24 23:54:20,"I think this project is aiming toward better support of second-layer applications. Given a lot of them are relying on trustless chain of transactions and those ones are necessarily made of segwit inputs, they're already using weight units, contrary to ""legacy"" applications.\n\nSticking to virtual bytes would make such L2 backends worst as you'll need to scale down your package to the vb unit to ",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r619724814,619724814,src/packages.h
JeremyRubin,2021-04-25 00:32:26,That shouldn't matter since they're immutable in this context :),https://github.com/bitcoin/bitcoin/pull/20833#discussion_r619727969,619727969,src/validation.cpp
JeremyRubin,2021-04-25 00:34:19,"I agree -- it should be one connected component. The only ""quirk"" of this is that ""packages"" can get ""invalidated"" after a block is mined.",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r619728093,619728093,src/txmempool.cpp
JeremyRubin,2021-04-25 00:48:06,"Clever!\n\nI guess the only reason to prefer the bool version is if we might handle in-package vs out of package parents differently in the future. Absent such a future need, I agree this works nicely!\n\nThe reverse iteration version should be a fair bit more efficient because we only need to hash each tx once for the set lookup, rather than 1x to create and 1x to remove, although it's a bit ",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r619729306,619729306,src/validation.cpp
glozow,2021-04-26 17:03:04,"Good point, moved this to the beginning of `AcceptMultipleTransactions()` before taking the mempool lock",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r620484823,620484823,src/validation.cpp
glozow,2021-04-26 17:03:56,"Sure, moved to src/policy/packages.h",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r620485462,620485462,src/packages.h
glozow,2021-04-26 17:04:14,Good point! fixed,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r620485641,620485641,src/test/txvalidation_tests.cpp
glozow,2021-04-26 17:04:30,fixed,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r620485858,620485858,src/validation.cpp
glozow,2021-04-26 17:04:57,"Good point, I'm having it take a `CBlockIndex*` now",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r620486223,620486223,src/validation.cpp
glozow,2021-04-26 17:05:32,"no reason other than wanting to keep the diff smol, changed the name to `coins_view`",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r620486567,620486567,src/validation.h
glozow,2021-04-26 17:08:34,True. I've updated it to be gated on `if(test_accept)` so that this code block would still be correct with real package accept.,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r620488709,620488709,src/validation.cpp
glozow,2021-04-26 17:09:23,"Oof, yeah that's super weird... Not sure if it'd be better to `break`, though, because then we'd be missing B altogether ü§î will think about this more",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r620489341,620489341,src/rpc/rawtransaction.cpp
glozow,2021-04-26 17:10:29,"Changed it to output the `value` as well, and just do 1 fee deduction inside `chain_transaction`",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r620490191,620490191,test/functional/rpc_packages.py
glozow,2021-04-26 17:11:02,"Yeah, iirc you can't have duplicate addresses in outputs.",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r620490530,620490530,test/functional/rpc_packages.py
glozow,2021-04-26 17:12:26,"Right, the comment was wrong. I've fixed it now - note that M2b is made before the chain so it's M3b...M13b",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r620491599,620491599,test/functional/rpc_packages.py
glozow,2021-04-26 17:12:47,Added 10 shuffles!,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r620491837,620491837,test/functional/rpc_packages.py
glozow,2021-04-26 17:13:00,"Woops, yes. Good catch",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r620491995,620491995,test/functional/rpc_packages.py
glozow,2021-04-26 17:14:20,"Noice üß† I've done it this way, it's prettier",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r620492920,620492920,src/validation.cpp
glozow,2021-04-26 17:15:18,What's immutable?,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r620493589,620493589,src/validation.cpp
glozow,2021-04-26 17:31:12,"Distinct `testmempoolaccept` calls returning different results for policy reasons is not a ""quirk,"" it's just a natural part of mempool policy. With single test accepts today you could call it 3 times and get 3 different results for the same tx because anything can happen in between calls.\n\nI agree that p2p packages shouldn't have independent transactions, but we're not really there yet. This ",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r620505619,620505619,src/txmempool.cpp
glozow,2021-04-26 17:35:41,"> That said, I don't think we need to decide now, we all agree the package API is unstable and we can change this back latter in its own PR. Current one is already a good move forward.\n\nRight, this is 100% flexible üëç will be sure to follow the discussion\n\nWhat do you mean by ""scale down your package?"" I didn't think there would be a significant difference between using weight units and vby",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r620508755,620508755,src/packages.h
ariard,2021-04-27 15:37:11,nit: twice any,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r621332721,621332721,src/validation.cpp
ariard,2021-04-27 15:39:18,I would say it's more replacement which are disallowed rather than conflicts. Conflicts are considered as fatal for mempool acceptance.,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r621334647,621334647,src/validation.cpp
ariard,2021-04-27 16:41:35,"IIUC, in case of failure due to a package policy check, we only yell back txid/wtxid of each package member but we don't indicate the reject reason to the user ?\n\nIf `txns > 1` and `!m_txresults.empty()` we can return allowed=true, if `m_txresults.empty()` we can return allowed=false and the rejection reason ? I don't think we need to extend testmempoolaccept with a new field.",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r621401538,621401538,src/rpc/rawtransaction.cpp
ariard,2021-04-27 16:50:39,nit: wtxid,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r621408788,621408788,src/validation.h
ariard,2021-04-27 17:16:42,"nit: ""max-package-size"" to dissociate clearly from the tx-level errors.",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r621429286,621429286,src/validation.cpp
ariard,2021-04-27 17:17:45,"nit: ""max-package-limits""/""max-package-width""",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r621430141,621430141,src/validation.cpp
ariard,2021-04-27 17:33:45,"I think I would drop emplacement of tx-level policy failure for now even if there I agree that an in-package conflict always implies an in-mempool conflict.\n\nSimilar to policy rules being tighter than consensus ones, package policy rules should be tighter than the mempool policy ones ? So following this reasoning, should we only expose the more severe one to the user ? Though if the package is",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r621442515,621442515,src/validation.cpp
ariard,2021-04-27 18:03:22,"I think we should encapsulate all package policy checks logic in its own module/file as best as we can. `validation.cpp` is already big enough and that would be better if we want to expose policy checks in more ad hoc tooling.\n\nI did it quickly there : https://github.com/ariard/bitcoin/commit/8503af2ab5e897fd1f37e0af0844fc5e60bb68a1\n\nWhat do you think about it ? Feel free to take the patch",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r621466059,621466059,src/validation.cpp
ariard,2021-04-27 18:25:46,"> Distinct testmempoolaccept calls returning different results for policy reasons is not a ""quirk,"" it's just a natural part of mempool policy. With single test accepts today you could call it 3 times and get 3 different results for the same tx because anything can happen in between calls.\n\nAnd I don't agree with this assumption of anything can happen in between calls. Ultimately you can isola",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r621486482,621486482,src/txmempool.cpp
glozow,2021-04-27 19:05:06,Maybe we can just put the `PackageValidationResult` error message in each one if it fails due to `PCKG_POLICY`?,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r621513948,621513948,src/rpc/rawtransaction.cpp
glozow,2021-04-27 19:06:31,"""package-too-large"" maybe?",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r621514802,621514802,src/validation.cpp
glozow,2021-04-27 19:06:33,"""package-too-many-transactions"" maybe?",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r621514815,621514815,src/validation.cpp
glozow,2021-04-27 22:48:19,"i made it ""package-too-large""",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r621668800,621668800,src/validation.cpp
glozow,2021-04-27 22:48:40,"Thanks, definitely more clear üëç ",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r621668982,621668982,src/validation.h
glozow,2021-04-27 22:49:41,"I've added a ""package-error"" key for the RPC, so it isn't just blank",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r621669354,621669354,src/rpc/rawtransaction.cpp
glozow,2021-04-27 22:51:11,"Ok, I've dropped this line. Now, if there's a package-wide error, the `results` map is empty (which I think is nice, saves space) and `testmempoolaccept` will include any `PackageValidationResult::PCKG_POLICY` error to the ""package-error"" field in the RPC result",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r621670071,621670071,src/validation.cpp
glozow,2021-04-27 22:52:40,"I think the hierarchy is now: if there's a `PCKG_POLICY` error, we don't return tx-specific errors.",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r621670704,621670704,src/validation.cpp
glozow,2021-04-27 22:56:23,"> I think we can roll-back e7aa139 and introduce in its own PR ? That would make more happy reviewer to not have think about what we might breack by modifying CalculateMemPoolAncestors :)\n\n@ariard Yeah, good point! Without the ancestor/descendant logic I think we could end up with a chain of 49 at least, but we never actually submit them to mempool here so it won't really hurt us... I've just ",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r621672223,621672223,src/txmempool.cpp
glozow,2021-04-28 19:08:17,Hm? Transactions would only be replacing if they conflicted with mempool.,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r622462747,622462747,src/validation.cpp
glozow,2021-04-28 19:40:16,separated to #21800 ,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r622483128,622483128,src/txmempool.cpp
glozow,2021-04-28 19:40:58,Sounds good for a follow-up :),https://github.com/bitcoin/bitcoin/pull/20833#discussion_r622483573,622483573,src/validation.cpp
mzumsande,2021-05-02 14:44:12,"`resize` and  `emplace_back` is too much, the package will be of size 52 instead of the intended 26 and have empty elements.",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r624705935,624705935,src/test/txvalidation_tests.cpp
mzumsande,2021-05-02 15:22:43,"""cannot not"" -> ""cannot""",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r624711515,624711515,src/rpc/rawtransaction.cpp
mzumsande,2021-05-03 08:47:04,"oh, and when I change the size to 10 here (i.e. having 10 null transactions and 10 regular ones) I get a memory access violation, so `ProcessNewPackage` seems to have a problem with malformed input. This may be related to the fuzzer crashes @adamjonas mentioned above, but I can't see any older discussion around this topic because github sucks :cry: ",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r624955595,624955595,src/test/txvalidation_tests.cpp
glozow,2021-05-03 14:52:36,"agh, good catch! I meant to use `reserve()` ü§¶ ",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r625142575,625142575,src/test/txvalidation_tests.cpp
glozow,2021-05-03 17:25:54,Added checks for `txns.empty()` and null transactions.... hopefully this covers it.,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r625241631,625241631,src/test/txvalidation_tests.cpp
ariard,2021-05-04 15:10:17,"I think it's a glossary point here. \n\nIMO, conflict is the fact that transaction A is spending the same utxo as transaction B. Replacement is the fact that transaction A is substituted  to transaction B by mempool logic. You can't really _disallow_ same utxo spending, this is decided by the utxo owner. On the other hand your mempool logic is free to apply whatever replacement policy ?",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r625867080,625867080,src/validation.cpp
ariard,2021-05-04 16:09:21,"Beware you're using `result_empty` instead of `result_null_txns` here.\n\nAlso can be extended a bit\n```\ndiff --git a/src/test/txvalidation_tests.cpp b/src/test/txvalidation_tests.cpp\nindex 802ac754d..4ef519b02 100644\n--- a/src/test/txvalidation_tests.cpp\n+++ b/src/test/txvalidation_tests.cpp\n@@ -74,10 +74,14 @@ BOOST_FIXTURE_TEST_CASE(basic_package_tests, TestChain100Setup)\n     P",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r625914346,625914346,src/test/txvalidation_tests.cpp
ariard,2021-05-04 16:26:33,"Following diff doesn't seem to break unit tests nor `rpc_packages`. Should we outlaw package_count == 1 with an assert at the beginning of `AcceptMultipleTransactions` ? \n\nI think such case is a bug in caller logic.\n\n```\ndiff --git a/src/validation.cpp b/src/validation.cpp\nindex e9e0ba6e6..e243839dd 100644\n--- a/src/validation.cpp\n+++ b/src/validation.cpp\n@@ -1213,7 +1213,7 @@ Pa",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r625927118,625927118,src/validation.cpp
ariard,2021-05-04 17:04:43,"Let's try also this variant ?\n\n```\ndiff --git a/test/functional/rpc_packages.py b/test/functional/rpc_packages.py\nindex 75621ba12..053954847 100755\n--- a/test/functional/rpc_packages.py\n+++ b/test/functional/rpc_packages.py\n@@ -341,6 +341,9 @@ class RPCPackagesTest(BitcoinTestFramework):\n         assert testres_rbf_single[0][""allowed""]\n         testres_rbf_package = node.testmemp",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r625954431,625954431,test/functional/rpc_packages.py
ariard,2021-05-04 17:12:50,"Have you look to actually pass chain of transactions from fuzzed data to `ProcessNewPackage` ? I would be glad to have enhanced fuzz coverage of package logic, at least in the future.",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r625960037,625960037,src/test/fuzz/tx_pool.cpp
glozow,2021-05-04 21:22:41,"I thought that would make more sense for actual package submission. I'm not sure if it adds much value with test accepts, since the mempool doesn't change.",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r626116631,626116631,src/test/fuzz/tx_pool.cpp
glozow,2021-05-04 22:22:27,"> Following diff doesn't seem to break unit tests nor rpc_packages.\n\nOk I added a unit test for it. I just added the condition because I felt it would be more helpful to users.\n\n> Should we outlaw package_count == 1 with an assert at the beginning of AcceptMultipleTransactions ?\n\nI don't really see why we should do this right now. It's useful to have for testing, and I don't think it p",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r626148230,626148230,src/validation.cpp
glozow,2021-05-04 22:22:31,I decided to remove this test and just assert this as a precondition at the top of ProcessNewPackage. It would be an error in our own code if we were passing nullptrs....,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r626148257,626148257,src/test/txvalidation_tests.cpp
glozow,2021-05-06 00:29:14,"Ok, I've added a function `assert_testres_equal()` that shuffles packages before asserting that the testmempoolaccept result matches, and edited the tests to use this function in all cases where the order shouldn't matter.",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r627001347,627001347,test/functional/rpc_packages.py
glozow,2021-05-06 02:44:10,"I've noted in the release notes that the true mempool minimum fee may not be met in the test_accept\n\nPerhaps in a separate PR (which would be relevant even for non-package-accept) we could figure out how to get a more accurate mempool minimum fee without submitting to it :)",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r627039961,627039961,src/validation.cpp
mzumsande,2021-05-07 12:50:57,There should be a check for size 0 - currently `testmempoolaccept []` segfaults here.,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r628185183,628185183,src/rpc/rawtransaction.cpp
ariard,2021-05-10 13:32:30,"Do we have any reason to special-case `TX_MISSING_INPUTS` ?\n\nIt sounds to have been here since the introduction of `testmempoolaccept` with #11742. Though, looking on error path in `PreChecks, L773, the reject reason sounds informative enough ""bad-txns-inputs-missingorspent""",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r629361807,629361807,src/rpc/rawtransaction.cpp
laanwj,2021-05-10 15:17:28,nit: indentation is off-by-one here (same for the closing bracket below),https://github.com/bitcoin/bitcoin/pull/20833#discussion_r629449767,629449767,src/validation.cpp
ariard,2021-05-10 15:57:52,"Thanks for noting the outcome of this conversation, but I think this limitation would be better described as ""be rejected as infringing on mempool size limit if effectively added"". What we can describe as min mempool fee enforcement I believe is done by `CheckFeeRate`.",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r629481038,629481038,doc/release-notes.md
ariard,2021-05-10 16:17:00,nit: what about `m_viewtmp` to dissociate clearly from `m_viewmempool`?,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r629494952,629494952,src/validation.cpp
ariard,2021-05-10 16:45:51,I think `package_count==1` is a good hint of internal API `AcceptMultipleTransactions` misusage and an assert would be cleaner. Though not a strong opinion.,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r629514373,629514373,src/validation.cpp
glozow,2021-05-10 17:15:30,"(Out of the scope of this PR to change this) Correct, I don't think the special gate on `TX_MISSING_INPUTS` is necessary anymore, but changing it will mean all the tests will need to assert ""bad-txns-inputs-missingorspent"" instead of ""missing-inputs.""",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r629533725,629533725,src/rpc/rawtransaction.cpp
glozow,2021-05-10 17:17:10,"Ok, I can update the doc. Generally, would it be better to just note ""multiple transaction testmempoolaccept is experimental, expect the API to be unstable?"" And then list the known limitations.",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r629534782,629534782,doc/release-notes.md
mzumsande,2021-05-10 21:17:45,"Also, would it make sense to apply the maxfeerate limit on a combined package level, and not for each transaction separately?",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r629689951,629689951,src/rpc/rawtransaction.cpp
laanwj,2021-05-11 08:00:14,Would it be useful to report which transaction index failed to decode?,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r629937609,629937609,src/rpc/rawtransaction.cpp
laanwj,2021-05-11 08:27:56,`for (const auto &tx : txns) {` maybe ? (no need for mutable copy here),https://github.com/bitcoin/bitcoin/pull/20833#discussion_r629958571,629958571,src/rpc/rawtransaction.cpp
laanwj,2021-05-11 08:32:19,"nit: indentation on the lines below, as well as the next loop, is off",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r629961943,629961943,src/test/txvalidation_tests.cpp
glozow,2021-05-11 18:26:15,Oopsie ü§¶ fixed now,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r630423576,630423576,src/validation.cpp
glozow,2021-05-11 18:26:57,Thanks for catching that! Fixed and added a test to mempool_accept.py.,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r630423979,630423979,src/rpc/rawtransaction.cpp
glozow,2021-05-11 18:28:13,"Added `rawtx.get_str()` to the error message, hopefully that would work?",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r630424863,630424863,src/rpc/rawtransaction.cpp
glozow,2021-05-11 18:28:30,"Good point, fixed",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r630425041,630425041,src/rpc/rawtransaction.cpp
glozow,2021-05-11 18:28:51,"Done, thanks!",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r630425294,630425294,src/test/txvalidation_tests.cpp
glozow,2021-05-11 18:35:55,sorree üôà there's no more `CoinsViewTemporary`,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r630429683,630429683,src/validation.cpp
glozow,2021-05-11 18:36:16,Updated,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r630429894,630429894,doc/release-notes.md
achow101,2021-05-11 22:01:28,"In d93d51f1132bc6ae54f7d23a5bbb434ce01b7c37 ""[doc] add release note for package testmempoolaccept""\n\nnit: Generally release notes are added in a separate file named `release-notes-<pr number>.md` rather than `release-notes.md` to avoid causing rebase conflicts for other PRs. So for this PR, you would put this release note in `release-notes-20833.md`.",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r630569226,630569226,doc/release-notes.md
achow101,2021-05-11 22:05:34,"In 0d868d0abbc9655e2e70766433d53719debf27b4 ""[validation] package validation for test accepts""\n\nnit: I would prefer for these changes to `MempoolAcceptResult` be split into a previous commit. It would make this commit slightly easier to read IMO.",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r630571069,630571069,src/validation.h
laanwj,2021-05-17 13:20:43,That works too!,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r633523618,633523618,src/rpc/rawtransaction.cpp
glozow,2021-05-17 14:21:45,"Ah thank you, noted!",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r633575349,633575349,doc/release-notes.md
glozow,2021-05-20 20:44:30,Done,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r636457663,636457663,doc/release-notes.md
glozow,2021-05-20 20:44:40,Done,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r636457764,636457764,src/validation.h
ariard,2021-05-21 21:04:10,"@mzumsande \n\nI think applying the maxfeerate on a combined package level makes sense once we start to verify mempool min feerate at the package level too ? For now, I think I would be even more liberal than John suggestion and only mark the fee excess on the fainting transaction, while documenting the case in RPC field.\n\nI thought about another solution which would be looping first on all ",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r637231672,637231672,src/rpc/rawtransaction.cpp
ariard,2021-05-21 22:48:48,"For now, any package coins is removed from the cache, so what this call to `FlushStateToDisk` is achieving ? If this motivated by anticipation of calling PNP for real mempool submissions, at least add a comment saying this is genuine ?",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r637280317,637280317,src/validation.cpp
ariard,2021-05-21 22:55:08,I think it would be clearer to rename `validation_result` to `package_result` and `accept_result` to `transaction_result` ? Right now it's a bit confusing what those result are representing.,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r637284743,637284743,src/rpc/rawtransaction.cpp
ariard,2021-05-21 22:57:40,"What do you think about adding a note like ""If a package is submitted and one or more transactions are not passing the check, submission failure is only marked for them and do not propagate to the package"" ?\n\nTo solve the discussion here : https://github.com/bitcoin/bitcoin/pull/20833/files#r619141139",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r637286417,637286417,src/rpc/rawtransaction.cpp
glozow,2021-05-24 15:04:40,"Good idea, I agree that is more clear. I've renamed them.",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r638034617,638034617,src/rpc/rawtransaction.cpp
glozow,2021-05-24 15:04:59,"Correct, the `FlushStateToDisk` will not write anything new, so only needed for real submission in the future. I've removed this line.",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r638034818,638034818,src/validation.cpp
glozow,2021-05-24 15:23:22,I think this has been addressed - see https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-847118121,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r638047866,638047866,src/rpc/rawtransaction.cpp
glozow,2021-05-24 15:25:09,"I've changed the maxfeerate API a little bit and added ""If one transaction fails, other transactions may not be fully validated (the 'allowed' key will be blank)."" to the RPC description.",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r638049176,638049176,src/rpc/rawtransaction.cpp
jnewbery,2021-05-26 12:25:01,"(Doesn't necessarily need to be in this PR - can be done in a follow-up) it'd be nice to make `tip` a reference, to better communicate that this function can't be called without a `CBlockIndex`.",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r639674347,639674347,src/validation.cpp
jnewbery,2021-05-26 12:26:18,"```suggestion\n        CCoinsViewMemPool view_mempool(&active_chainstate.CoinsTip(), *this);\n```",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r639675252,639675252,src/txmempool.cpp
jnewbery,2021-05-26 12:27:33,"```suggestion\n        CCoinsViewMemPool view_mempool(&m_node.chainman->ActiveChainstate().CoinsTip(), *m_node.mempool);\n```",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r639676120,639676120,src/test/miner_tests.cpp
jnewbery,2021-05-26 12:41:12,"Having a boolean for `disallow_thing` where the double negative `disallow_thing == false` means ""thing is allowed"" is probably not as clear as a `allow_thing` boolean where `allow_thing == true` means ""thing is allowed"".\n\nI also agree that ""replacement"" is probably better than ""conflicts"" here.",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r639686271,639686271,src/validation.cpp
jnewbery,2021-05-26 12:50:42,"This is equivalent, but I think separating out these reasons is clearer:\n\n```diff\ndiff --git a/src/validation.cpp b/src/validation.cpp\nindex ebe88ba04d..8aff63c4a6 100644\n--- a/src/validation.cpp\n+++ b/src/validation.cpp\n@@ -619,6 +619,11 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     {\n         const CTransaction* ptxConflicting = m_pool.GetConflictTx(txin.",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r639693860,639693860,src/validation.cpp
jnewbery,2021-05-26 13:00:30,I don't think you need this. These `addressof()` calls are going to be removed in a future bundle PR. Not adding this line will avoid conflicting with that PR.,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r639701967,639701967,src/validation.cpp
jnewbery,2021-05-26 13:02:53,"I don't think the ""Ensure the cache is still within its size limits"" is relevant here (I think you copied it from the `AcceptToMemoryPoolWithTime()` function, which _does_ call `FlushStateToDisk()` to ensure the cache is still within its size limits.",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r639703882,639703882,src/validation.cpp
jnewbery,2021-05-26 13:14:34,"```suggestion\n        // package to spend. Since we already checked conflicts in the package and replacements are\n        // disallowed, we don't need to track the coins spent. Note that this logic will need to be\n```",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r639713460,639713460,src/validation.cpp
jnewbery,2021-05-26 13:42:15,This if conditional seems unnecessary for this PR. Perhaps just assert that `args.m_test_accept` is true. A future PR can make the logic here conditional.,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r639738249,639738249,src/validation.cpp
jnewbery,2021-05-26 13:54:59,"Perhaps static assert that these are >= the mempool default ancestor/descendant limits, and that `MAX_PACKAGE_SIZE * 4` is >= `MAX_STANDARD_TX_WEIGHT`",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r639750478,639750478,src/policy/packages.h
jnewbery,2021-05-26 14:10:17,Perhaps use `ToString(MAX_PACKAGE_COUNT)` here?,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r639764754,639764754,src/rpc/rawtransaction.cpp
jnewbery,2021-05-26 14:46:01,Perhaps reserve `raw_transactions.size()` here to avoid reallocations as you emplace the `CTransactionRef` objects into this vector.,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r639799129,639799129,src/rpc/rawtransaction.cpp
jnewbery,2021-05-26 15:51:42,Can you use `std::back_inserter()` here?,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r639866061,639866061,src/validation.cpp
glozow,2021-05-26 16:18:49,"IIRC no, because it's an unordered set.",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r639888077,639888077,src/validation.cpp
glozow,2021-05-26 16:42:04,"Right, but by this reasoning, I could also just take the `test_accept` argument out of this PR altogether. It feels a bit safer to have this condition up front and worry less about gating test-accept-only logic later.",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r639915142,639915142,src/validation.cpp
mzumsande,2021-05-26 23:22:48,"fees **while** we iterate, keave->leave",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r640184013,640184013,src/rpc/rawtransaction.cpp
mzumsande,2021-05-27 00:16:37,"maybe ""if another transaction failed"", because it's not necessarily an earlier transaction? (in the case where validation terminates early, the culprit could also be a later transaction)",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r640201934,640201934,src/rpc/rawtransaction.cpp
mzumsande,2021-05-27 00:21:25,nit: space after maxfeerate,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r640203353,640203353,src/rpc/rawtransaction.cpp
mzumsande,2021-05-27 00:45:21,"After the last commit, the error will be ""package-not-sorted"". ",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r640210539,640210539,src/validation.cpp
ariard,2021-05-27 03:37:32,"+1, I would also update the reject reason to ""txn-mempool-disallowed-replacement""",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r640264079,640264079,src/validation.cpp
ariard,2021-05-27 03:47:17,"What do you mean by this ? If it's a `PCKG_TX`, the yielded TxValidationResult might be TX_CONSENSUS. For e.g receiving a coinbase transaction.",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r640266735,640266735,src/policy/packages.h
ariard,2021-05-27 04:08:42,"nit: I think a more descriptive behavior would be ""if one transaction fails, remaining transactions are not submitted for validation"". See document L1146 in src/validation.cpp ""Exit early to avoid doing pointless work. Update the failed tx result; the rest are unfinished"".",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r640272735,640272735,src/rpc/rawtransaction.cpp
ariard,2021-05-27 04:45:43,nit: the check on `MAX_PACKAGE_COUNT` is duplicated into `AcceptMultipleTransactions`. I can understand the rational of not taking the `cs_main` lock but I've a preference to keep all package policy checks in one place. That would also avoid linking `packages.h` in `rawtransaction.cpp` (assuming we hardcode the package limit in RPC doc).,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r640283157,640283157,src/rpc/rawtransaction.cpp
ariard,2021-05-27 04:50:02,nit: _transaction_ result,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r640284495,640284495,src/rpc/rawtransaction.cpp
ariard,2021-05-27 05:24:34,"nit: ""Temporarily add the coins created by this transaction until package processing to which it belongs is over"" ?",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r640296157,640296157,src/txmempool.h
ariard,2021-05-27 05:50:46,"nit: ""mempool transaction replacement by packages"". \n\nOtherwise it lets suggest we apply RBF inside a currently-processing package. Also I think the replacement policy we'll end up for packages is going to be far different than BIP 125, so instead of mentioning RBF, I would say simply replacement for now.",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r640305966,640305966,src/validation.cpp
ariard,2021-05-27 06:07:17,"A bit confusing, one might wonder if you're aiming to in-package conflict or mempool transactions conflicted by package. I would suggest another formulation : ""The package transactions must not conflict, i.e must not spend the same inputs. They must not replace mempool transaction, even if it's valid under BIP125 rules.""",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r640312812,640312812,src/validation.h
glozow,2021-05-27 07:09:33,"The ""right now"" means that we might distinguish between them in the future, e.g. if we want to punish a peer for a `PCKG_TX` having a consensus failure but not for a policy failure.",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r640345634,640345634,src/policy/packages.h
glozow,2021-05-27 07:24:34,"I think of this as a distinct check, actually. We defined the `testmempoolaccept` API to be ""maximum 25 transactions"" and will return a JSONRPC error here because the user violated our API, whereas `AcceptMultipleTransactions()` is applying package policies.",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r640355567,640355567,src/rpc/rawtransaction.cpp
glozow,2021-05-27 10:03:03,Are you saying I should add a space after maxfeerate or?,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r640480284,640480284,src/rpc/rawtransaction.cpp
mzumsande,2021-05-27 10:39:23,"I meant after ""maxfeerate."" and before the next sentence, it should show when displaying the rpc help.",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r640504531,640504531,src/rpc/rawtransaction.cpp
glozow,2021-05-27 16:03:28,Added a more descriptive comment in #22084,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r640765101,640765101,src/txmempool.h
glozow,2021-05-27 16:06:21,"In #22084 I'm updating it to ""allow_bip125_replacement"" to fix the double-negative and saying ""replacements not allowed"" instead of ""conflicts with mempool."" Also moving the `if` condition up as suggested.",https://github.com/bitcoin/bitcoin/pull/20833#discussion_r640767326,640767326,src/validation.cpp
glozow,2021-05-27 16:06:32,Erasing in #22084,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r640767466,640767466,src/validation.cpp
glozow,2021-05-27 16:06:43,adding in #22084 ,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r640767581,640767581,src/policy/packages.h
glozow,2021-05-27 16:06:54,done in #22084,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r640767692,640767692,src/rpc/rawtransaction.cpp
glozow,2021-05-27 16:06:59,done in #22084,https://github.com/bitcoin/bitcoin/pull/20833#discussion_r640767770,640767770,src/rpc/rawtransaction.cpp
