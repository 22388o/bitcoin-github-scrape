[
  {
    "sha": "42cf8b25df07c45562b7210e0e15c3fd5edb2c11",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MmNmOGIyNWRmMDdjNDU1NjJiNzIxMGUwZTE1YzNmZDVlZGIyYzEx",
    "commit": {
      "author": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-02-11T17:36:20Z"
      },
      "committer": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-05-20T20:34:31Z"
      },
      "message": "[validation] make CheckSequenceLocks context-free\n\nAllow CheckSequenceLocks to use heights and coins from any CoinsView and\nCBlockIndex provided. This means that CheckSequenceLocks() doesn't need\nto hold the mempool lock or cs_main. The caller is responsible for\nensuring the CoinsView and CBlockIndex are consistent before passing\nthem in. The typical usage is still to create a CCoinsViewMemPool from\nthe mempool and grab the CBlockIndex from the chainstate tip.",
      "tree": {
        "sha": "4de5e6b16a997889faf3a055f6037b5e5f68ffc9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4de5e6b16a997889faf3a055f6037b5e5f68ffc9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/42cf8b25df07c45562b7210e0e15c3fd5edb2c11",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/42cf8b25df07c45562b7210e0e15c3fd5edb2c11",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/42cf8b25df07c45562b7210e0e15c3fd5edb2c11",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/42cf8b25df07c45562b7210e0e15c3fd5edb2c11/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "710c8ba82953c5fdb7c3c8c9ad6ecf0fd88dface",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/710c8ba82953c5fdb7c3c8c9ad6ecf0fd88dface",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/710c8ba82953c5fdb7c3c8c9ad6ecf0fd88dface"
      }
    ],
    "stats": {
      "total": 42,
      "additions": 21,
      "deletions": 21
    },
    "files": [
      {
        "sha": "c47d0eae1efb406892d9941f37f833f855f4f8f1",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42cf8b25df07c45562b7210e0e15c3fd5edb2c11/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42cf8b25df07c45562b7210e0e15c3fd5edb2c11/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=42cf8b25df07c45562b7210e0e15c3fd5edb2c11",
        "patch": "@@ -28,7 +28,8 @@ struct MinerTestingSetup : public TestingSetup {\n     void TestPackageSelection(const CChainParams& chainparams, const CScript& scriptPubKey, const std::vector<CTransactionRef>& txFirst) EXCLUSIVE_LOCKS_REQUIRED(::cs_main, m_node.mempool->cs);\n     bool TestSequenceLocks(const CTransaction& tx, int flags) EXCLUSIVE_LOCKS_REQUIRED(::cs_main, m_node.mempool->cs)\n     {\n-        return CheckSequenceLocks(::ChainstateActive(), *m_node.mempool, tx, flags);\n+        CCoinsViewMemPool viewMempool(&m_node.chainman->ActiveChainstate().CoinsTip(), *m_node.mempool);\n+        return CheckSequenceLocks(m_node.chainman->ActiveChain().Tip(), viewMempool, tx, flags);\n     }\n     BlockAssembler AssemblerForTest(const CChainParams& params);\n };"
      },
      {
        "sha": "8bd6e2a6a6e447731223edad97b5c9748e48c14c",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42cf8b25df07c45562b7210e0e15c3fd5edb2c11/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42cf8b25df07c45562b7210e0e15c3fd5edb2c11/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=42cf8b25df07c45562b7210e0e15c3fd5edb2c11",
        "patch": "@@ -515,7 +515,9 @@ void CTxMemPool::removeForReorg(CChainState& active_chainstate, int flags)\n         LockPoints lp = it->GetLockPoints();\n         assert(std::addressof(::ChainstateActive()) == std::addressof(active_chainstate));\n         bool validLP =  TestLockPointValidity(active_chainstate.m_chain, &lp);\n-        if (!CheckFinalTx(active_chainstate.m_chain.Tip(), tx, flags) || !CheckSequenceLocks(active_chainstate, *this, tx, flags, &lp, validLP)) {\n+        CCoinsViewMemPool viewMempool(&active_chainstate.CoinsTip(), *this);\n+        if (!CheckFinalTx(active_chainstate.m_chain.Tip(), tx, flags)\n+            || !CheckSequenceLocks(active_chainstate.m_chain.Tip(), viewMempool, tx, flags, &lp, validLP)) {\n             // Note if CheckSequenceLocks fails the LockPoints may still be invalid\n             // So it's critical that we remove the tx and not depend on the LockPoints.\n             txToRemove.insert(it);"
      },
      {
        "sha": "ac02cc05155ae48c87133f5b124c267ff6b358ad",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 13,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42cf8b25df07c45562b7210e0e15c3fd5edb2c11/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42cf8b25df07c45562b7210e0e15c3fd5edb2c11/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=42cf8b25df07c45562b7210e0e15c3fd5edb2c11",
        "patch": "@@ -245,18 +245,13 @@ bool TestLockPointValidity(CChain& active_chain, const LockPoints* lp)\n     return true;\n }\n \n-bool CheckSequenceLocks(CChainState& active_chainstate,\n-                        const CTxMemPool& pool,\n+bool CheckSequenceLocks(CBlockIndex* tip,\n+                        const CCoinsView& coins_view,\n                         const CTransaction& tx,\n                         int flags,\n                         LockPoints* lp,\n                         bool useExistingLockPoints)\n {\n-    AssertLockHeld(cs_main);\n-    AssertLockHeld(pool.cs);\n-    assert(std::addressof(::ChainstateActive()) == std::addressof(active_chainstate));\n-\n-    CBlockIndex* tip = active_chainstate.m_chain.Tip();\n     assert(tip != nullptr);\n \n     CBlockIndex index;\n@@ -276,14 +271,12 @@ bool CheckSequenceLocks(CChainState& active_chainstate,\n         lockPair.second = lp->time;\n     }\n     else {\n-        // CoinsTip() contains the UTXO set for active_chainstate.m_chain.Tip()\n-        CCoinsViewMemPool viewMemPool(&active_chainstate.CoinsTip(), pool);\n         std::vector<int> prevheights;\n         prevheights.resize(tx.vin.size());\n         for (size_t txinIndex = 0; txinIndex < tx.vin.size(); txinIndex++) {\n             const CTxIn& txin = tx.vin[txinIndex];\n             Coin coin;\n-            if (!viewMemPool.GetCoin(txin.prevout, coin)) {\n+            if (!coins_view.GetCoin(txin.prevout, coin)) {\n                 return error(\"%s: Missing input\", __func__);\n             }\n             if (coin.nHeight == MEMPOOL_HEIGHT) {\n@@ -686,10 +679,10 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     // Only accept BIP68 sequence locked transactions that can be mined in the next\n     // block; we don't want our mempool filled up with transactions that can't\n     // be mined yet.\n-    // Must keep pool.cs for this unless we change CheckSequenceLocks to take a\n-    // CoinsViewCache instead of create its own\n+    // Pass in m_view which has all of the relevant inputs cached. Note that, since m_view's\n+    // backend was removed, it no longer pulls coins from the mempool.\n     assert(std::addressof(::ChainstateActive()) == std::addressof(m_active_chainstate));\n-    if (!CheckSequenceLocks(m_active_chainstate, m_pool, tx, STANDARD_LOCKTIME_VERIFY_FLAGS, &lp))\n+    if (!CheckSequenceLocks(m_active_chainstate.m_chain.Tip(), m_view, tx, STANDARD_LOCKTIME_VERIFY_FLAGS, &lp))\n         return state.Invalid(TxValidationResult::TX_PREMATURE_SPEND, \"non-BIP68-final\");\n \n     assert(std::addressof(g_chainman.m_blockman) == std::addressof(m_active_chainstate.m_blockman));"
      },
      {
        "sha": "4deaf1830fe47ed5c8ceea533243766b6815ddb0",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 10,
        "deletions": 6,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42cf8b25df07c45562b7210e0e15c3fd5edb2c11/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42cf8b25df07c45562b7210e0e15c3fd5edb2c11/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=42cf8b25df07c45562b7210e0e15c3fd5edb2c11",
        "patch": "@@ -226,22 +226,26 @@ bool CheckFinalTx(const CBlockIndex* active_chain_tip, const CTransaction &tx, i\n bool TestLockPointValidity(CChain& active_chain, const LockPoints* lp) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n /**\n- * Check if transaction will be BIP 68 final in the next block to be created.\n- *\n- * Simulates calling SequenceLocks() with data from the tip of the current active chain.\n+ * Check if transaction will be BIP68 final in the next block to be created on top of tip.\n+ * @param[in]   tip             Chain tip to check tx sequence locks against. For example,\n+ *                              the tip of the current active chain.\n+ * @param[in]   coins_view      Any CCoinsView that provides access to the relevant coins\n+ *                              for checking sequence locks. Any CCoinsView can be passed in;\n+ *                              it is assumed to be consistent with the tip.\n+ * Simulates calling SequenceLocks() with data from the tip passed in.\n  * Optionally stores in LockPoints the resulting height and time calculated and the hash\n  * of the block needed for calculation or skips the calculation and uses the LockPoints\n  * passed in for evaluation.\n  * The LockPoints should not be considered valid if CheckSequenceLocks returns false.\n  *\n  * See consensus/consensus.h for flag definitions.\n  */\n-bool CheckSequenceLocks(CChainState& active_chainstate,\n-                        const CTxMemPool& pool,\n+bool CheckSequenceLocks(CBlockIndex* tip,\n+                        const CCoinsView& coins_view,\n                         const CTransaction& tx,\n                         int flags,\n                         LockPoints* lp = nullptr,\n-                        bool useExistingLockPoints = false) EXCLUSIVE_LOCKS_REQUIRED(::cs_main, pool.cs);\n+                        bool useExistingLockPoints = false);\n \n /**\n  * Closure representing one script verification"
      }
    ]
  },
  {
    "sha": "897e348f5987eadd8559981a973c045c471b3ad8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4OTdlMzQ4ZjU5ODdlYWRkODU1OTk4MWE5NzNjMDQ1YzQ3MWIzYWQ4",
    "commit": {
      "author": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-05-10T16:30:14Z"
      },
      "committer": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-05-20T20:34:31Z"
      },
      "message": "[coins/mempool] extend CCoinsViewMemPool to track temporary coins",
      "tree": {
        "sha": "945a1f4e40e229d19b74db6029441ad8a055fa1b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/945a1f4e40e229d19b74db6029441ad8a055fa1b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/897e348f5987eadd8559981a973c045c471b3ad8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/897e348f5987eadd8559981a973c045c471b3ad8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/897e348f5987eadd8559981a973c045c471b3ad8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/897e348f5987eadd8559981a973c045c471b3ad8/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "42cf8b25df07c45562b7210e0e15c3fd5edb2c11",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/42cf8b25df07c45562b7210e0e15c3fd5edb2c11",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/42cf8b25df07c45562b7210e0e15c3fd5edb2c11"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 23,
      "deletions": 1
    },
    "files": [
      {
        "sha": "4413da7ea76a2eca9ba6bf4b7eae2e0dad8a82f0",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/897e348f5987eadd8559981a973c045c471b3ad8/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/897e348f5987eadd8559981a973c045c471b3ad8/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=897e348f5987eadd8559981a973c045c471b3ad8",
        "patch": "@@ -922,6 +922,13 @@ bool CTxMemPool::HasNoInputsOf(const CTransaction &tx) const\n CCoinsViewMemPool::CCoinsViewMemPool(CCoinsView* baseIn, const CTxMemPool& mempoolIn) : CCoinsViewBacked(baseIn), mempool(mempoolIn) { }\n \n bool CCoinsViewMemPool::GetCoin(const COutPoint &outpoint, Coin &coin) const {\n+    // Check to see if the inputs are made available by another tx in the package.\n+    // These Coins would not be available in the underlying CoinsView.\n+    if (auto it = m_temp_added.find(outpoint); it != m_temp_added.end()) {\n+        coin = it->second;\n+        return true;\n+    }\n+\n     // If an entry in the mempool exists, always return that one, as it's guaranteed to never\n     // conflict with the underlying cache, and it cannot have pruned entries (as it contains full)\n     // transactions. First checking the underlying cache risks returning a pruned entry instead.\n@@ -937,6 +944,13 @@ bool CCoinsViewMemPool::GetCoin(const COutPoint &outpoint, Coin &coin) const {\n     return base->GetCoin(outpoint, coin);\n }\n \n+void CCoinsViewMemPool::PackageAddTransaction(const CTransactionRef& tx)\n+{\n+    for (unsigned int n = 0; n < tx->vout.size(); ++n) {\n+        m_temp_added.emplace(COutPoint(tx->GetHash(), n), Coin(tx->vout[n], MEMPOOL_HEIGHT, false));\n+    }\n+}\n+\n size_t CTxMemPool::DynamicMemoryUsage() const {\n     LOCK(cs);\n     // Estimate the overhead of mapTx to be 15 pointers + an allocation, as no exact formula for boost::multi_index_contained is implemented."
      },
      {
        "sha": "ca856a5abca60d8a990d4934a8ff463ea2a8ecb1",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 9,
        "deletions": 1,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/897e348f5987eadd8559981a973c045c471b3ad8/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/897e348f5987eadd8559981a973c045c471b3ad8/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=897e348f5987eadd8559981a973c045c471b3ad8",
        "patch": "@@ -852,7 +852,8 @@ class CTxMemPool\n  * CCoinsView that brings transactions from a mempool into view.\n  * It does not check for spendings by memory pool transactions.\n  * Instead, it provides access to all Coins which are either unspent in the\n- * base CCoinsView, or are outputs from any mempool transaction!\n+ * base CCoinsView, are outputs from any mempool transaction, or are\n+ * tracked temporarily to allow transaction dependencies in package validation.\n  * This allows transaction replacement to work as expected, as you want to\n  * have all inputs \"available\" to check signatures, and any cycles in the\n  * dependency graph are checked directly in AcceptToMemoryPool.\n@@ -862,12 +863,19 @@ class CTxMemPool\n  */\n class CCoinsViewMemPool : public CCoinsViewBacked\n {\n+    /**\n+    * Coins made available by transactions being validated. Tracking these allows for package\n+    * validation, since we can access transaction outputs without submitting them to mempool.\n+    */\n+    std::unordered_map<COutPoint, Coin, SaltedOutpointHasher> m_temp_added;\n protected:\n     const CTxMemPool& mempool;\n \n public:\n     CCoinsViewMemPool(CCoinsView* baseIn, const CTxMemPool& mempoolIn);\n     bool GetCoin(const COutPoint &outpoint, Coin &coin) const override;\n+    /** Add the coins created by this transaction. */\n+    void PackageAddTransaction(const CTransactionRef& tx);\n };\n \n /**"
      }
    ]
  },
  {
    "sha": "249f43f3cc52b0ffdf2c47aad95ba9d195f6a45e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNDlmNDNmM2NjNTJiMGZmZGYyYzQ3YWFkOTViYTlkMTk1ZjZhNDVl",
    "commit": {
      "author": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-04-05T19:36:57Z"
      },
      "committer": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-05-20T20:34:31Z"
      },
      "message": "[refactor] add option to disable RBF\n\nThis is a mere refactor for now. We will use this to disable RBFing in\npackage validation.",
      "tree": {
        "sha": "9d30476398a6c46828da3770a26b6c79d26e1443",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9d30476398a6c46828da3770a26b6c79d26e1443"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/249f43f3cc52b0ffdf2c47aad95ba9d195f6a45e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/249f43f3cc52b0ffdf2c47aad95ba9d195f6a45e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/249f43f3cc52b0ffdf2c47aad95ba9d195f6a45e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/249f43f3cc52b0ffdf2c47aad95ba9d195f6a45e/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "897e348f5987eadd8559981a973c045c471b3ad8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/897e348f5987eadd8559981a973c045c471b3ad8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/897e348f5987eadd8559981a973c045c471b3ad8"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 5,
      "deletions": 2
    },
    "files": [
      {
        "sha": "3aa360987e959a1b5b283b5aaad1465c88b0f91c",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/249f43f3cc52b0ffdf2c47aad95ba9d195f6a45e/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/249f43f3cc52b0ffdf2c47aad95ba9d195f6a45e/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=249f43f3cc52b0ffdf2c47aad95ba9d195f6a45e",
        "patch": "@@ -470,6 +470,8 @@ class MemPoolAccept\n          */\n         std::vector<COutPoint>& m_coins_to_uncache;\n         const bool m_test_accept;\n+        /** Disable BIP125 RBFing; disallow all conflicts with mempool transactions. */\n+        const bool disallow_mempool_conflicts;\n     };\n \n     // Single transaction acceptance\n@@ -631,7 +633,7 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n                         break;\n                     }\n                 }\n-                if (fReplacementOptOut) {\n+                if (fReplacementOptOut || args.disallow_mempool_conflicts) {\n                     return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"txn-mempool-conflict\");\n                 }\n \n@@ -1072,7 +1074,8 @@ static MempoolAcceptResult AcceptToMemoryPoolWithTime(const CChainParams& chainp\n                                                       EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     std::vector<COutPoint> coins_to_uncache;\n-    MemPoolAccept::ATMPArgs args { chainparams, nAcceptTime, bypass_limits, coins_to_uncache, test_accept };\n+    MemPoolAccept::ATMPArgs args { chainparams, nAcceptTime, bypass_limits, coins_to_uncache,\n+                                   test_accept, /* disallow_mempool_conflicts */ false };\n \n     assert(std::addressof(::ChainstateActive()) == std::addressof(active_chainstate));\n     const MempoolAcceptResult result = MemPoolAccept(pool, active_chainstate).AcceptSingleTransaction(tx, args);"
      }
    ]
  },
  {
    "sha": "b88d77aec5e7bef5305a668d15031351c0548b4d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiODhkNzdhZWM1ZTdiZWY1MzA1YTY2OGQxNTAzMTM1MWMwNTQ4YjRk",
    "commit": {
      "author": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-02-11T17:50:42Z"
      },
      "committer": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-05-20T20:34:31Z"
      },
      "message": "[policy] Define packages\n\nDefine the Package type as an alias for a vector of transactions for now.\nAdd PackageValidationResult, similar to TxValidationResult and\nBlockValidationResult for package-wide errors that cannot be reported\nwithin a single transaction result, such as having too many\ntransactions in the package. We can update the concept of\nwhat a package is and have different logic for packages vs lists of\ntransactions in the future, e.g. for package relay.",
      "tree": {
        "sha": "f579f8c5ab082d4e928bd1e5d793572b4125c1cd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f579f8c5ab082d4e928bd1e5d793572b4125c1cd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b88d77aec5e7bef5305a668d15031351c0548b4d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b88d77aec5e7bef5305a668d15031351c0548b4d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b88d77aec5e7bef5305a668d15031351c0548b4d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b88d77aec5e7bef5305a668d15031351c0548b4d/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "249f43f3cc52b0ffdf2c47aad95ba9d195f6a45e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/249f43f3cc52b0ffdf2c47aad95ba9d195f6a45e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/249f43f3cc52b0ffdf2c47aad95ba9d195f6a45e"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 30,
      "deletions": 0
    },
    "files": [
      {
        "sha": "579cd4e91917d6ea0b4ef76a265f2ef4f11e2ed1",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b88d77aec5e7bef5305a668d15031351c0548b4d/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b88d77aec5e7bef5305a668d15031351c0548b4d/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=b88d77aec5e7bef5305a668d15031351c0548b4d",
        "patch": "@@ -193,6 +193,7 @@ BITCOIN_CORE_H = \\\n   outputtype.h \\\n   policy/feerate.h \\\n   policy/fees.h \\\n+  policy/packages.h \\\n   policy/policy.h \\\n   policy/rbf.h \\\n   policy/settings.h \\"
      },
      {
        "sha": "60aafb6d7485fa4db4d6e5d9733d7333261369b9",
        "filename": "src/policy/packages.h",
        "status": "added",
        "additions": 29,
        "deletions": 0,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b88d77aec5e7bef5305a668d15031351c0548b4d/src/policy/packages.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b88d77aec5e7bef5305a668d15031351c0548b4d/src/policy/packages.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/packages.h?ref=b88d77aec5e7bef5305a668d15031351c0548b4d",
        "patch": "@@ -0,0 +1,29 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_PACKAGES_H\n+#define BITCOIN_POLICY_PACKAGES_H\n+\n+#include <consensus/validation.h>\n+#include <primitives/transaction.h>\n+\n+#include <vector>\n+\n+/** A \"reason\" why a package was invalid. It may be that one or more of the included\n+ * transactions is invalid or the package itself violates our rules.\n+ * We don't distinguish between consensus and policy violations right now.\n+ */\n+enum class PackageValidationResult {\n+    PCKG_RESULT_UNSET = 0,        //!< Initial value. The package has not yet been rejected.\n+    PCKG_POLICY,                  //!< The package itself is invalid (e.g. too many transactions).\n+    PCKG_TX,                      //!< At least one tx is invalid.\n+};\n+\n+/** A package is an ordered list of transactions. The transactions cannot conflict with (spend the\n+ * same inputs as) one another. */\n+using Package = std::vector<CTransactionRef>;\n+\n+class PackageValidationState : public ValidationState<PackageValidationResult> {};\n+\n+#endif // BITCOIN_POLICY_PACKAGES_H"
      }
    ]
  },
  {
    "sha": "578148ded62828a9820398165c41670f4dbb523d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NzgxNDhkZWQ2MjgyOGE5ODIwMzk4MTY1YzQxNjcwZjRkYmI1MjNk",
    "commit": {
      "author": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-05-20T20:22:35Z"
      },
      "committer": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-05-20T20:34:31Z"
      },
      "message": "[validation] explicit Success/Failure ctors for MempoolAcceptResult\n\nMakes code more clear and prevents accidentally calling the wrong ctor.",
      "tree": {
        "sha": "d8fd7377ba8777ccfa475f777090a53b807144d5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d8fd7377ba8777ccfa475f777090a53b807144d5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/578148ded62828a9820398165c41670f4dbb523d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/578148ded62828a9820398165c41670f4dbb523d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/578148ded62828a9820398165c41670f4dbb523d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/578148ded62828a9820398165c41670f4dbb523d/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b88d77aec5e7bef5305a668d15031351c0548b4d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b88d77aec5e7bef5305a668d15031351c0548b4d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b88d77aec5e7bef5305a668d15031351c0548b4d"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 16,
      "deletions": 9
    },
    "files": [
      {
        "sha": "9165a1f1b33c98657718dd9f18ad60a6ea1d5624",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/578148ded62828a9820398165c41670f4dbb523d/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/578148ded62828a9820398165c41670f4dbb523d/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=578148ded62828a9820398165c41670f4dbb523d",
        "patch": "@@ -1040,28 +1040,28 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n \n     Workspace ws(ptx);\n \n-    if (!PreChecks(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!PreChecks(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n \n-    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Tx was accepted, but not added\n     if (args.m_test_accept) {\n-        return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+        return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n     }\n \n-    if (!Finalize(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!Finalize(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+    return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n }\n \n } // anon namespace"
      },
      {
        "sha": "231f55d82730e6b8028ad482ac9e7ce86ba63942",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 10,
        "deletions": 3,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/578148ded62828a9820398165c41670f4dbb523d/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/578148ded62828a9820398165c41670f4dbb523d/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=578148ded62828a9820398165c41670f4dbb523d",
        "patch": "@@ -169,9 +169,7 @@ void PruneBlockFilesManual(CChainState& active_chainstate, int nManualPruneHeigh\n * Validation result for a single transaction mempool acceptance.\n */\n struct MempoolAcceptResult {\n-    /** Used to indicate the results of mempool validation,\n-    * including the possibility of unfinished validation.\n-    */\n+    /** Used to indicate the results of mempool validation. */\n     enum class ResultType {\n         VALID, //!> Fully validated, valid.\n         INVALID, //!> Invalid.\n@@ -184,7 +182,16 @@ struct MempoolAcceptResult {\n     const std::optional<std::list<CTransactionRef>> m_replaced_transactions;\n     /** Raw base fees in satoshis. */\n     const std::optional<CAmount> m_base_fees;\n+    static MempoolAcceptResult Failure(TxValidationState state) {\n+        return MempoolAcceptResult(state);\n+    }\n+\n+    static MempoolAcceptResult Success(std::list<CTransactionRef>&& replaced_txns, CAmount fees) {\n+        return MempoolAcceptResult(std::move(replaced_txns), fees);\n+    }\n \n+// Private constructors. Use static methods MempoolAcceptResult::Success, etc. to construct.\n+private:\n     /** Constructor for failure case */\n     explicit MempoolAcceptResult(TxValidationState state)\n         : m_result_type(ResultType::INVALID), m_state(state) {"
      }
    ]
  },
  {
    "sha": "2ef187941db439c5b3e529f08b6ab153ff061fc5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZWYxODc5NDFkYjQzOWM1YjNlNTI5ZjA4YjZhYjE1M2ZmMDYxZmM1",
    "commit": {
      "author": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-04-05T17:12:58Z"
      },
      "committer": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-05-24T13:42:10Z"
      },
      "message": "[validation] package validation for test accepts\n\nOnly allow test accepts for now. Use the CoinsViewTemporary to keep\ntrack of coins created by each transaction so that subsequent\ntransactions can spend them. Uncache all coins since we only\never do test accepts (Note this is different from ATMP which doesn't\nuncache for valid test_accepts) to minimize impact on the coins cache.\n\nRequire that the input txns have no conflicts and be ordered\ntopologically. This commit isn't able to detect unsorted packages.",
      "tree": {
        "sha": "e0b09e18c6e411566b0a4db3e210bde2b7a73133",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e0b09e18c6e411566b0a4db3e210bde2b7a73133"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2ef187941db439c5b3e529f08b6ab153ff061fc5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ef187941db439c5b3e529f08b6ab153ff061fc5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2ef187941db439c5b3e529f08b6ab153ff061fc5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ef187941db439c5b3e529f08b6ab153ff061fc5/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "578148ded62828a9820398165c41670f4dbb523d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/578148ded62828a9820398165c41670f4dbb523d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/578148ded62828a9820398165c41670f4dbb523d"
      }
    ],
    "stats": {
      "total": 136,
      "additions": 136,
      "deletions": 0
    },
    "files": [
      {
        "sha": "ad0f636554fc6ec24620a996c344aa55e7bf8582",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 101,
        "deletions": 0,
        "changes": 101,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ef187941db439c5b3e529f08b6ab153ff061fc5/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ef187941db439c5b3e529f08b6ab153ff061fc5/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=2ef187941db439c5b3e529f08b6ab153ff061fc5",
        "patch": "@@ -50,6 +50,7 @@\n #include <validationinterface.h>\n #include <warnings.h>\n \n+#include <numeric>\n #include <optional>\n #include <string>\n \n@@ -477,6 +478,13 @@ class MemPoolAccept\n     // Single transaction acceptance\n     MempoolAcceptResult AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n+    /**\n+    * Multiple transaction acceptance. Transactions may or may not be interdependent,\n+    * but must not conflict with each other. Parents must come before children if any\n+    * dependencies exist, otherwise a TX_MISSING_INPUTS error will be returned.\n+    */\n+    PackageMempoolAcceptResult AcceptMultipleTransactions(const std::vector<CTransactionRef>& txns, ATMPArgs& args) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+\n private:\n     // All the intermediate state that gets passed between the various levels\n     // of checking a given transaction.\n@@ -1064,6 +1072,76 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n     return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n }\n \n+PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::vector<CTransactionRef>& txns, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    PackageValidationState package_state;\n+    const unsigned int package_count = txns.size();\n+\n+    std::vector<Workspace> workspaces{};\n+    workspaces.reserve(package_count);\n+    std::transform(txns.cbegin(), txns.cend(), std::back_inserter(workspaces), [](const auto& tx) {\n+        return Workspace(tx);\n+    });\n+\n+    std::map<const uint256, const MempoolAcceptResult> results;\n+    {\n+        // Don't allow any conflicting transactions, i.e. spending the same inputs, in a package.\n+        std::unordered_set<COutPoint, SaltedOutpointHasher> inputs_seen;\n+        for (const auto& tx : txns) {\n+            for (const auto& input : tx->vin) {\n+                if (inputs_seen.find(input.prevout) != inputs_seen.end()) {\n+                    // This input is also present in another tx in the package.\n+                    package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"conflict-in-package\");\n+                    return PackageMempoolAcceptResult(package_state, {});\n+                }\n+            }\n+            // Batch-add all the inputs for a tx at a time. If we added them 1 at a time, we could\n+            // catch duplicate inputs within a single tx.  This is a more severe, consensus error,\n+            // and we want to report that from CheckTransaction instead.\n+            std::transform(tx->vin.cbegin(), tx->vin.cend(), std::inserter(inputs_seen, inputs_seen.end()),\n+                           [](const auto& input) { return input.prevout; });\n+        }\n+    }\n+\n+    LOCK(m_pool.cs);\n+\n+    // Do all PreChecks first and fail fast to avoid running expensive script checks when unnecessary.\n+    for (Workspace& ws : workspaces) {\n+        if (!PreChecks(args, ws)) {\n+            package_state.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n+            // Exit early to avoid doing pointless work. Update the failed tx result; the rest are unfinished.\n+            results.emplace(ws.m_ptx->GetWitnessHash(), MempoolAcceptResult::Failure(ws.m_state));\n+            return PackageMempoolAcceptResult(package_state, std::move(results));\n+        }\n+        // Make the coins created by this transaction available for subsequent transactions in the\n+        // package to spend. Since we already checked conflicts in the package and RBFs are\n+        // impossible, we don't need to track the coins spent. Note that this logic will need to be\n+        // updated if RBFs in packages are allowed in the future.\n+        assert(args.disallow_mempool_conflicts);\n+        m_viewmempool.PackageAddTransaction(ws.m_ptx);\n+    }\n+\n+    for (Workspace& ws : workspaces) {\n+        PrecomputedTransactionData txdata;\n+        if (!PolicyScriptChecks(args, ws, txdata)) {\n+            // Exit early to avoid doing pointless work. Update the failed tx result; the rest are unfinished.\n+            package_state.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n+            results.emplace(ws.m_ptx->GetWitnessHash(), MempoolAcceptResult::Failure(ws.m_state));\n+            return PackageMempoolAcceptResult(package_state, std::move(results));\n+        }\n+        if (args.m_test_accept) {\n+            // When test_accept=true, transactions that pass PolicyScriptChecks are valid because there are\n+            // no further mempool checks (passing PolicyScriptChecks implies passing ConsensusScriptChecks).\n+            results.emplace(ws.m_ptx->GetWitnessHash(),\n+                            MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees));\n+        }\n+    }\n+\n+    return PackageMempoolAcceptResult(package_state, std::move(results));\n+}\n+\n } // anon namespace\n \n /** (try to) add transaction to memory pool with a specified acceptance time **/\n@@ -1101,6 +1179,29 @@ MempoolAcceptResult AcceptToMemoryPool(CChainState& active_chainstate, CTxMemPoo\n     return AcceptToMemoryPoolWithTime(Params(), pool, active_chainstate, tx, GetTime(), bypass_limits, test_accept);\n }\n \n+PackageMempoolAcceptResult ProcessNewPackage(CChainState& active_chainstate, CTxMemPool& pool,\n+                                                   const Package& package, bool test_accept)\n+{\n+    AssertLockHeld(cs_main);\n+    assert(test_accept); // Only allow package accept dry-runs (testmempoolaccept RPC).\n+    assert(!package.empty());\n+    assert(std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx != nullptr;}));\n+\n+    std::vector<COutPoint> coins_to_uncache;\n+    const CChainParams& chainparams = Params();\n+    MemPoolAccept::ATMPArgs args { chainparams, GetTime(), /* bypass_limits */ false, coins_to_uncache,\n+                                   test_accept, /* disallow_mempool_conflicts */ true };\n+    assert(std::addressof(::ChainstateActive()) == std::addressof(active_chainstate));\n+    const PackageMempoolAcceptResult result = MemPoolAccept(pool, active_chainstate).AcceptMultipleTransactions(package, args);\n+\n+    // Uncache coins pertaining to transactions that were not submitted to the mempool.\n+    // Ensure the cache is still within its size limits.\n+    for (const COutPoint& hashTx : coins_to_uncache) {\n+        active_chainstate.CoinsTip().Uncache(hashTx);\n+    }\n+    return result;\n+}\n+\n CTransactionRef GetTransaction(const CBlockIndex* const block_index, const CTxMemPool* const mempool, const uint256& hash, const Consensus::Params& consensusParams, uint256& hashBlock)\n {\n     LOCK(cs_main);"
      },
      {
        "sha": "3f09e59dab64b33d06b714874c9585df0e90416f",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 35,
        "deletions": 0,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ef187941db439c5b3e529f08b6ab153ff061fc5/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ef187941db439c5b3e529f08b6ab153ff061fc5/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=2ef187941db439c5b3e529f08b6ab153ff061fc5",
        "patch": "@@ -18,6 +18,7 @@\n #include <fs.h>\n #include <node/utxo_snapshot.h>\n #include <policy/feerate.h>\n+#include <policy/packages.h>\n #include <protocol.h> // For CMessageHeader::MessageStartChars\n #include <script/script_error.h>\n #include <sync.h>\n@@ -204,6 +205,28 @@ struct MempoolAcceptResult {\n         m_replaced_transactions(std::move(replaced_txns)), m_base_fees(fees) {}\n };\n \n+/**\n+* Validation result for package mempool acceptance.\n+*/\n+struct PackageMempoolAcceptResult\n+{\n+    const PackageValidationState m_state;\n+    /**\n+    * Map from wtxid to finished MempoolAcceptResults. The client is responsible\n+    * for keeping track of the transaction objects themselves. If a result is not\n+    * present, it means validation was unfinished for that transaction.\n+    */\n+    std::map<const uint256, const MempoolAcceptResult> m_tx_results;\n+\n+    explicit PackageMempoolAcceptResult(PackageValidationState state,\n+                                        std::map<const uint256, const MempoolAcceptResult>&& results)\n+        : m_state{state}, m_tx_results(std::move(results)) {}\n+\n+    /** Constructor to create a PackageMempoolAcceptResult from a single MempoolAcceptResult */\n+    explicit PackageMempoolAcceptResult(const uint256& wtxid, const MempoolAcceptResult& result)\n+        : m_tx_results{ {wtxid, result} } {}\n+};\n+\n /**\n  * (Try to) add a transaction to the memory pool.\n  * @param[in]  bypass_limits   When true, don't enforce mempool fee limits.\n@@ -212,6 +235,18 @@ struct MempoolAcceptResult {\n MempoolAcceptResult AcceptToMemoryPool(CChainState& active_chainstate, CTxMemPool& pool, const CTransactionRef& tx,\n                                        bool bypass_limits, bool test_accept=false) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n+/**\n+* Atomically test acceptance of a package. If the package only contains one tx, package rules still apply.\n+* @param[in]    txns                Group of transactions which may be independent or contain\n+*                                   parent-child dependencies. The transactions must not conflict, i.e.\n+*                                   must not spend the same inputs, even if it would be a valid BIP125\n+*                                   replace-by-fee. Parents must appear before children.\n+* @returns a PackageMempoolAcceptResult which includes a MempoolAcceptResult for each transaction.\n+* If a transaction fails, validation will exit early and some results may be missing.\n+*/\n+PackageMempoolAcceptResult ProcessNewPackage(CChainState& active_chainstate, CTxMemPool& pool,\n+                                                   const Package& txns, bool test_accept)\n+                                                   EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n /** Apply the effects of this transaction on the UTXO set represented by view */\n void UpdateCoins(const CTransaction& tx, CCoinsViewCache& inputs, int nHeight);"
      }
    ]
  },
  {
    "sha": "cd9a11ac96c01e200d0086b2f011f4a614f5a705",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZDlhMTFhYzk2YzAxZTIwMGQwMDg2YjJmMDExZjRhNjE0ZjVhNzA1",
    "commit": {
      "author": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-05-04T15:05:43Z"
      },
      "committer": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-05-24T13:42:10Z"
      },
      "message": "[test] make submit optional in CreateValidMempoolTransaction\n\nThis allows us to easily create transaction chains for package\nvalidation. We don't test_accept if submit=false because we want to be\nable to make transactions that wouldn't pass ATMP (i.e. a child\ntransaction in a package would fail due to missing inputs).",
      "tree": {
        "sha": "ec61ab3f21b187c43bf2a8d56e90187edb253343",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ec61ab3f21b187c43bf2a8d56e90187edb253343"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cd9a11ac96c01e200d0086b2f011f4a614f5a705",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd9a11ac96c01e200d0086b2f011f4a614f5a705",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cd9a11ac96c01e200d0086b2f011f4a614f5a705",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd9a11ac96c01e200d0086b2f011f4a614f5a705/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2ef187941db439c5b3e529f08b6ab153ff061fc5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ef187941db439c5b3e529f08b6ab153ff061fc5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2ef187941db439c5b3e529f08b6ab153ff061fc5"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 7,
      "deletions": 4
    },
    "files": [
      {
        "sha": "26a03fb173b9a6610e89b687d6b868c0631f481f",
        "filename": "src/test/util/setup_common.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd9a11ac96c01e200d0086b2f011f4a614f5a705/src/test/util/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd9a11ac96c01e200d0086b2f011f4a614f5a705/src/test/util/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.cpp?ref=cd9a11ac96c01e200d0086b2f011f4a614f5a705",
        "patch": "@@ -263,7 +263,8 @@ CMutableTransaction TestChain100Setup::CreateValidMempoolTransaction(CTransactio\n                                                                      int input_height,\n                                                                      CKey input_signing_key,\n                                                                      CScript output_destination,\n-                                                                     CAmount output_amount)\n+                                                                     CAmount output_amount,\n+                                                                     bool submit)\n {\n     // Transaction we will submit to the mempool\n     CMutableTransaction mempool_txn;\n@@ -296,8 +297,8 @@ CMutableTransaction TestChain100Setup::CreateValidMempoolTransaction(CTransactio\n     std::map<int, std::string> input_errors;\n     assert(SignTransaction(mempool_txn, &keystore, input_coins, nHashType, input_errors));\n \n-    // Add transaction to the mempool\n-    {\n+    // If submit=true, add transaction to the mempool.\n+    if (submit) {\n         LOCK(cs_main);\n         const MempoolAcceptResult result = AcceptToMemoryPool(::ChainstateActive(), *m_node.mempool.get(), MakeTransactionRef(mempool_txn), /* bypass_limits */ false);\n         assert(result.m_result_type == MempoolAcceptResult::ResultType::VALID);"
      },
      {
        "sha": "5d12dc2323bcd58138c1b53c08f09450abf7b656",
        "filename": "src/test/util/setup_common.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd9a11ac96c01e200d0086b2f011f4a614f5a705/src/test/util/setup_common.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd9a11ac96c01e200d0086b2f011f4a614f5a705/src/test/util/setup_common.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.h?ref=cd9a11ac96c01e200d0086b2f011f4a614f5a705",
        "patch": "@@ -135,13 +135,15 @@ struct TestChain100Setup : public RegTestingSetup {\n      * @param input_signing_key  The key to spend the input_transaction\n      * @param output_destination Where to send the output\n      * @param output_amount      How much to send\n+     * @param submit             Whether or not to submit to mempool\n      */\n     CMutableTransaction CreateValidMempoolTransaction(CTransactionRef input_transaction,\n                                                       int input_vout,\n                                                       int input_height,\n                                                       CKey input_signing_key,\n                                                       CScript output_destination,\n-                                                      CAmount output_amount = CAmount(1 * COIN));\n+                                                      CAmount output_amount = CAmount(1 * COIN),\n+                                                      bool submit = true);\n \n     ~TestChain100Setup();\n "
      }
    ]
  },
  {
    "sha": "363e3d916cc036488783bb4bdcfdd3665aecf711",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNjNlM2Q5MTZjYzAzNjQ4ODc4M2JiNGJkY2ZkZDM2NjVhZWNmNzEx",
    "commit": {
      "author": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-05-03T16:51:13Z"
      },
      "committer": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-05-24T13:42:10Z"
      },
      "message": "[test] unit tests for ProcessNewPackage\n\nKey functionality = a transaction with UTXOs not present in UTXO set\nor mempool can be fully validated instead of being considered an orphan.",
      "tree": {
        "sha": "f705c1f1d5841ca576a64c80f7a90e49929f3c5a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f705c1f1d5841ca576a64c80f7a90e49929f3c5a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/363e3d916cc036488783bb4bdcfdd3665aecf711",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/363e3d916cc036488783bb4bdcfdd3665aecf711",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/363e3d916cc036488783bb4bdcfdd3665aecf711",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/363e3d916cc036488783bb4bdcfdd3665aecf711/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cd9a11ac96c01e200d0086b2f011f4a614f5a705",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd9a11ac96c01e200d0086b2f011f4a614f5a705",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cd9a11ac96c01e200d0086b2f011f4a614f5a705"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 40,
      "deletions": 0
    },
    "files": [
      {
        "sha": "5242c666284b07de931e161f53bce52c9e6cbbcf",
        "filename": "src/test/txvalidation_tests.cpp",
        "status": "modified",
        "additions": 40,
        "deletions": 0,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/363e3d916cc036488783bb4bdcfdd3665aecf711/src/test/txvalidation_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/363e3d916cc036488783bb4bdcfdd3665aecf711/src/test/txvalidation_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidation_tests.cpp?ref=363e3d916cc036488783bb4bdcfdd3665aecf711",
        "patch": "@@ -3,8 +3,10 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <consensus/validation.h>\n+#include <key_io.h>\n #include <primitives/transaction.h>\n #include <script/script.h>\n+#include <script/standard.h>\n #include <test/util/setup_common.h>\n #include <validation.h>\n \n@@ -47,4 +49,42 @@ BOOST_FIXTURE_TEST_CASE(tx_mempool_reject_coinbase, TestChain100Setup)\n     BOOST_CHECK(result.m_state.GetResult() == TxValidationResult::TX_CONSENSUS);\n }\n \n+BOOST_FIXTURE_TEST_CASE(package_tests, TestChain100Setup)\n+{\n+    LOCK(cs_main);\n+    unsigned int initialPoolSize = m_node.mempool->size();\n+\n+    // Parent and Child Package\n+    CKey parent_key;\n+    parent_key.MakeNewKey(true);\n+    CScript parent_locking_script = GetScriptForDestination(PKHash(parent_key.GetPubKey()));\n+    auto mtx_parent = CreateValidMempoolTransaction(/* input_transaction */ m_coinbase_txns[0], /* vout */ 0,\n+                                                    /* input_height */ 0, /* input_signing_key */ coinbaseKey,\n+                                                    /* output_destination */ parent_locking_script,\n+                                                    /* output_amount */ CAmount(49 * COIN), /* submit */ false);\n+    CTransactionRef tx_parent = MakeTransactionRef(mtx_parent);\n+\n+    CKey child_key;\n+    child_key.MakeNewKey(true);\n+    CScript child_locking_script = GetScriptForDestination(PKHash(child_key.GetPubKey()));\n+    auto mtx_child = CreateValidMempoolTransaction(/* input_transaction */ tx_parent, /* vout */ 0,\n+                                                   /* input_height */ 101, /* input_signing_key */ parent_key,\n+                                                   /* output_destination */ child_locking_script,\n+                                                   /* output_amount */ CAmount(48 * COIN), /* submit */ false);\n+    CTransactionRef tx_child = MakeTransactionRef(mtx_child);\n+    const auto result_parent_child = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool, {tx_parent, tx_child}, /* test_accept */ true);\n+    BOOST_CHECK_MESSAGE(result_parent_child.m_state.IsValid(),\n+                        \"Package validation unexpectedly failed: \" << result_parent_child.m_state.GetRejectReason());\n+    auto it_parent = result_parent_child.m_tx_results.find(tx_parent->GetWitnessHash());\n+    auto it_child = result_parent_child.m_tx_results.find(tx_child->GetWitnessHash());\n+    BOOST_CHECK(it_parent != result_parent_child.m_tx_results.end());\n+    BOOST_CHECK_MESSAGE(it_parent->second.m_state.IsValid(),\n+                        \"Package validation unexpectedly failed: \" << it_parent->second.m_state.GetRejectReason());\n+    BOOST_CHECK(it_child != result_parent_child.m_tx_results.end());\n+    BOOST_CHECK_MESSAGE(it_child->second.m_state.IsValid(),\n+                        \"Package validation unexpectedly failed: \" << it_child->second.m_state.GetRejectReason());\n+\n+    // Check that mempool size hasn't changed.\n+    BOOST_CHECK_EQUAL(m_node.mempool->size(), initialPoolSize);\n+}\n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "c9e1a26d1f17c8b98632b7796ffa8f8788b5a83c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjOWUxYTI2ZDFmMTdjOGI5ODYzMmI3Nzk2ZmZhOGY4Nzg4YjVhODNj",
    "commit": {
      "author": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-04-10T22:37:47Z"
      },
      "committer": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-05-24T13:42:10Z"
      },
      "message": "[fuzz] add ProcessNewPackage call in tx_pool fuzzer",
      "tree": {
        "sha": "6dbb7b3fb1b4d5b9002eb7c4f06112c4185472a7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6dbb7b3fb1b4d5b9002eb7c4f06112c4185472a7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c9e1a26d1f17c8b98632b7796ffa8f8788b5a83c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c9e1a26d1f17c8b98632b7796ffa8f8788b5a83c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c9e1a26d1f17c8b98632b7796ffa8f8788b5a83c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c9e1a26d1f17c8b98632b7796ffa8f8788b5a83c/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "363e3d916cc036488783bb4bdcfdd3665aecf711",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/363e3d916cc036488783bb4bdcfdd3665aecf711",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/363e3d916cc036488783bb4bdcfdd3665aecf711"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 10,
      "deletions": 0
    },
    "files": [
      {
        "sha": "1d32a69aa204b508ba10f0870e8dd72298c8991d",
        "filename": "src/test/fuzz/tx_pool.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9e1a26d1f17c8b98632b7796ffa8f8788b5a83c/src/test/fuzz/tx_pool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9e1a26d1f17c8b98632b7796ffa8f8788b5a83c/src/test/fuzz/tx_pool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/tx_pool.cpp?ref=c9e1a26d1f17c8b98632b7796ffa8f8788b5a83c",
        "patch": "@@ -218,6 +218,16 @@ FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\n         RegisterSharedValidationInterface(txr);\n         const bool bypass_limits = fuzzed_data_provider.ConsumeBool();\n         ::fRequireStandard = fuzzed_data_provider.ConsumeBool();\n+\n+        // Make sure ProcessNewPackage on one transaction works and always fully validates the transaction.\n+        // The result is not guaranteed to be the same as what is returned by ATMP.\n+        const auto result_package = WITH_LOCK(::cs_main,\n+                                    return ProcessNewPackage(node.chainman->ActiveChainstate(), tx_pool, {tx}, true));\n+        auto it = result_package.m_tx_results.find(tx->GetWitnessHash());\n+        Assert(it != result_package.m_tx_results.end());\n+        Assert(it->second.m_result_type == MempoolAcceptResult::ResultType::VALID ||\n+               it->second.m_result_type == MempoolAcceptResult::ResultType::INVALID);\n+\n         const auto res = WITH_LOCK(::cs_main, return AcceptToMemoryPool(chainstate, tx_pool, tx, bypass_limits));\n         const bool accepted = res.m_result_type == MempoolAcceptResult::ResultType::VALID;\n         SyncWithValidationInterfaceQueue();"
      }
    ]
  },
  {
    "sha": "ae8e6df709ff3d52b8e9918e09cacb64f83ae379",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZThlNmRmNzA5ZmYzZDUyYjhlOTkxOGUwOWNhY2I2NGY4M2FlMzc5",
    "commit": {
      "author": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-04-05T18:13:27Z"
      },
      "committer": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-05-24T13:42:10Z"
      },
      "message": "[policy] limit package sizes\n\nMaximum number of transactions allowed in a package is 25, equal to the\ndefault mempool descendant limit: if a package has more transactions\nthan this, either it would fail default mempool descendant limit or the\ntransactions don't all have a dependency relationship (but then they\nshouldn't be in a package together). Same rationale for 101KvB virtual\nsize package limit.\n\nNote that these policies are only used in test accepts so far.",
      "tree": {
        "sha": "bfbd17da9d061c54cb724cada601096965fc8155",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bfbd17da9d061c54cb724cada601096965fc8155"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ae8e6df709ff3d52b8e9918e09cacb64f83ae379",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae8e6df709ff3d52b8e9918e09cacb64f83ae379",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ae8e6df709ff3d52b8e9918e09cacb64f83ae379",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae8e6df709ff3d52b8e9918e09cacb64f83ae379/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c9e1a26d1f17c8b98632b7796ffa8f8788b5a83c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c9e1a26d1f17c8b98632b7796ffa8f8788b5a83c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c9e1a26d1f17c8b98632b7796ffa8f8788b5a83c"
      }
    ],
    "stats": {
      "total": 77,
      "additions": 77,
      "deletions": 0
    },
    "files": [
      {
        "sha": "4b1463dcb34ebc8bef5fe441edec47e8ac0f0203",
        "filename": "src/policy/packages.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae8e6df709ff3d52b8e9918e09cacb64f83ae379/src/policy/packages.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae8e6df709ff3d52b8e9918e09cacb64f83ae379/src/policy/packages.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/packages.h?ref=ae8e6df709ff3d52b8e9918e09cacb64f83ae379",
        "patch": "@@ -10,6 +10,11 @@\n \n #include <vector>\n \n+/** Default maximum number of transactions in a package. */\n+static constexpr uint32_t MAX_PACKAGE_COUNT{25};\n+/** Default maximum total virtual size of transactions in a package in KvB. */\n+static constexpr uint32_t MAX_PACKAGE_SIZE{101};\n+\n /** A \"reason\" why a package was invalid. It may be that one or more of the included\n  * transactions is invalid or the package itself violates our rules.\n  * We don't distinguish between consensus and policy violations right now."
      },
      {
        "sha": "95ad85d0f832d91f32807285f4e78f14d038e2aa",
        "filename": "src/test/txvalidation_tests.cpp",
        "status": "modified",
        "additions": 58,
        "deletions": 0,
        "changes": 58,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae8e6df709ff3d52b8e9918e09cacb64f83ae379/src/test/txvalidation_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae8e6df709ff3d52b8e9918e09cacb64f83ae379/src/test/txvalidation_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidation_tests.cpp?ref=ae8e6df709ff3d52b8e9918e09cacb64f83ae379",
        "patch": "@@ -4,6 +4,8 @@\n \n #include <consensus/validation.h>\n #include <key_io.h>\n+#include <policy/packages.h>\n+#include <policy/policy.h>\n #include <primitives/transaction.h>\n #include <script/script.h>\n #include <script/standard.h>\n@@ -49,6 +51,25 @@ BOOST_FIXTURE_TEST_CASE(tx_mempool_reject_coinbase, TestChain100Setup)\n     BOOST_CHECK(result.m_state.GetResult() == TxValidationResult::TX_CONSENSUS);\n }\n \n+// Create placeholder transactions that have no meaning.\n+inline CTransactionRef create_placeholder_tx(size_t num_inputs, size_t num_outputs)\n+{\n+    CMutableTransaction mtx = CMutableTransaction();\n+    mtx.vin.resize(num_inputs);\n+    mtx.vout.resize(num_outputs);\n+    auto random_script = CScript() << ToByteVector(InsecureRand256()) << ToByteVector(InsecureRand256());\n+    for (size_t i{0}; i < num_inputs; ++i) {\n+        mtx.vin[i].prevout.hash = InsecureRand256();\n+        mtx.vin[i].prevout.n = 0;\n+        mtx.vin[i].scriptSig = random_script;\n+    }\n+    for (size_t o{0}; o < num_outputs; ++o) {\n+        mtx.vout[o].nValue = 1 * CENT;\n+        mtx.vout[o].scriptPubKey = random_script;\n+    }\n+    return MakeTransactionRef(mtx);\n+}\n+\n BOOST_FIXTURE_TEST_CASE(package_tests, TestChain100Setup)\n {\n     LOCK(cs_main);\n@@ -84,6 +105,43 @@ BOOST_FIXTURE_TEST_CASE(package_tests, TestChain100Setup)\n     BOOST_CHECK_MESSAGE(it_child->second.m_state.IsValid(),\n                         \"Package validation unexpectedly failed: \" << it_child->second.m_state.GetRejectReason());\n \n+    // Packages can't have more than 25 transactions.\n+    Package package_too_many;\n+    package_too_many.reserve(MAX_PACKAGE_COUNT + 1);\n+    for (size_t i{0}; i < MAX_PACKAGE_COUNT + 1; ++i) {\n+        package_too_many.emplace_back(create_placeholder_tx(1, 1));\n+    }\n+    auto result_too_many = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool, package_too_many, /* test_accept */ true);\n+    BOOST_CHECK(result_too_many.m_state.IsInvalid());\n+    BOOST_CHECK_EQUAL(result_too_many.m_state.GetResult(), PackageValidationResult::PCKG_POLICY);\n+    BOOST_CHECK_EQUAL(result_too_many.m_state.GetRejectReason(), \"package-too-many-transactions\");\n+\n+    // Packages can't have a total size of more than 101KvB.\n+    CTransactionRef large_ptx = create_placeholder_tx(150, 150);\n+    Package package_too_large;\n+    auto size_large = GetVirtualTransactionSize(*large_ptx);\n+    size_t total_size{0};\n+    while (total_size <= MAX_PACKAGE_SIZE * 1000) {\n+        package_too_large.push_back(large_ptx);\n+        total_size += size_large;\n+    }\n+    BOOST_CHECK(package_too_large.size() <= MAX_PACKAGE_COUNT);\n+    auto result_too_large = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool, package_too_large, /* test_accept */ true);\n+    BOOST_CHECK(result_too_large.m_state.IsInvalid());\n+    BOOST_CHECK_EQUAL(result_too_large.m_state.GetResult(), PackageValidationResult::PCKG_POLICY);\n+    BOOST_CHECK_EQUAL(result_too_large.m_state.GetRejectReason(), \"package-too-large\");\n+\n+    // A single, giant transaction submitted through ProcessNewPackage fails on single tx policy.\n+    CTransactionRef giant_ptx = create_placeholder_tx(999, 999);\n+    BOOST_CHECK(GetVirtualTransactionSize(*giant_ptx) > MAX_PACKAGE_SIZE * 1000);\n+    auto result_single_large = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool, {giant_ptx}, /* test_accept */ true);\n+    BOOST_CHECK(result_single_large.m_state.IsInvalid());\n+    BOOST_CHECK_EQUAL(result_single_large.m_state.GetResult(), PackageValidationResult::PCKG_TX);\n+    BOOST_CHECK_EQUAL(result_single_large.m_state.GetRejectReason(), \"transaction failed\");\n+    auto it_giant_tx = result_single_large.m_tx_results.find(giant_ptx->GetWitnessHash());\n+    BOOST_CHECK(it_giant_tx != result_single_large.m_tx_results.end());\n+    BOOST_CHECK_EQUAL(it_giant_tx->second.m_state.GetRejectReason(), \"tx-size\");\n+\n     // Check that mempool size hasn't changed.\n     BOOST_CHECK_EQUAL(m_node.mempool->size(), initialPoolSize);\n }"
      },
      {
        "sha": "07308aab3965158d12460cf3dcc14c073f3f3435",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae8e6df709ff3d52b8e9918e09cacb64f83ae379/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae8e6df709ff3d52b8e9918e09cacb64f83ae379/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=ae8e6df709ff3d52b8e9918e09cacb64f83ae379",
        "patch": "@@ -1079,6 +1079,20 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n     PackageValidationState package_state;\n     const unsigned int package_count = txns.size();\n \n+    // These context-free package limits can be checked before taking the mempool lock.\n+    if (package_count > MAX_PACKAGE_COUNT) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-too-many-transactions\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    const int64_t total_size = std::accumulate(txns.cbegin(), txns.cend(), 0,\n+                               [](int64_t sum, const auto& tx) { return sum + GetVirtualTransactionSize(*tx); });\n+    // If the package only contains 1 tx, it's better to report the policy violation on individual tx size.\n+    if (package_count > 1 && total_size > MAX_PACKAGE_SIZE * 1000) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-too-large\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n     std::vector<Workspace> workspaces{};\n     workspaces.reserve(package_count);\n     std::transform(txns.cbegin(), txns.cend(), std::back_inserter(workspaces), [](const auto& tx) {"
      }
    ]
  },
  {
    "sha": "9ede34a6f20378e86c5289ebd20dd394a5915123",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZWRlMzRhNmYyMDM3OGU4NmM1Mjg5ZWJkMjBkZDM5NGE1OTE1MTIz",
    "commit": {
      "author": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-02-11T18:50:45Z"
      },
      "committer": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-05-24T14:45:01Z"
      },
      "message": "[rpc] allow multiple txns in testmempoolaccept\n\nOnly allow \"packages\" with no conflicts, sorted in order of dependency,\nand no more than 25 for now.  Note that these groups of transactions\ndon't necessarily need to adhere to some strict definition of a package\nor have any dependency relationships. Clients are free to pass in a\nbatch of 25 unrelated transactions if they want to.",
      "tree": {
        "sha": "d9fed6c6596a26580eb54f6449c5b697f44ab7a0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d9fed6c6596a26580eb54f6449c5b697f44ab7a0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9ede34a6f20378e86c5289ebd20dd394a5915123",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ede34a6f20378e86c5289ebd20dd394a5915123",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9ede34a6f20378e86c5289ebd20dd394a5915123",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ede34a6f20378e86c5289ebd20dd394a5915123/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ae8e6df709ff3d52b8e9918e09cacb64f83ae379",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae8e6df709ff3d52b8e9918e09cacb64f83ae379",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ae8e6df709ff3d52b8e9918e09cacb64f83ae379"
      }
    ],
    "stats": {
      "total": 133,
      "additions": 83,
      "deletions": 50
    },
    "files": [
      {
        "sha": "339d711ac98000ac0b3dfe1f3d84425ab44ebce4",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 81,
        "deletions": 49,
        "changes": 130,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ede34a6f20378e86c5289ebd20dd394a5915123/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ede34a6f20378e86c5289ebd20dd394a5915123/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=9ede34a6f20378e86c5289ebd20dd394a5915123",
        "patch": "@@ -15,6 +15,7 @@\n #include <node/context.h>\n #include <node/psbt.h>\n #include <node/transaction.h>\n+#include <policy/packages.h>\n #include <policy/policy.h>\n #include <policy/rbf.h>\n #include <primitives/transaction.h>\n@@ -885,8 +886,11 @@ static RPCHelpMan sendrawtransaction()\n static RPCHelpMan testmempoolaccept()\n {\n     return RPCHelpMan{\"testmempoolaccept\",\n-                \"\\nReturns result of mempool acceptance tests indicating if raw transaction (serialized, hex-encoded) would be accepted by mempool.\\n\"\n-                \"\\nThis checks if the transaction violates the consensus or policy rules.\\n\"\n+                \"\\nReturns result of mempool acceptance tests indicating if raw transaction(s) (serialized, hex-encoded) would be accepted by mempool.\\n\"\n+                \"\\nIf multiple transactions are passed in, parents must come before children and package policies apply: the transactions cannot conflict with any mempool transactions or each other.\\n\"\n+                \"\\nIf one transaction fails, other transactions may not be fully validated (the 'allowed' key will be blank).\\n\"\n+                \"\\nThe maximum number of transactions allowed is 25 (MAX_PACKAGE_COUNT)\\n\"\n+                \"\\nThis checks if transactions violate the consensus or policy rules.\\n\"\n                 \"\\nSee sendrawtransaction call.\\n\",\n                 {\n                     {\"rawtxs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"An array of hex strings of raw transactions.\\n\"\n@@ -895,17 +899,21 @@ static RPCHelpMan testmempoolaccept()\n                             {\"rawtx\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"\"},\n                         },\n                         },\n-                    {\"maxfeerate\", RPCArg::Type::AMOUNT, RPCArg::Default{FormatMoney(DEFAULT_MAX_RAW_TX_FEE_RATE.GetFeePerK())}, \"Reject transactions whose fee rate is higher than the specified value, expressed in \" + CURRENCY_UNIT + \"/kvB\\n\"},\n+                    {\"maxfeerate\", RPCArg::Type::AMOUNT, RPCArg::Default{FormatMoney(DEFAULT_MAX_RAW_TX_FEE_RATE.GetFeePerK())},\n+                     \"Reject transactions whose fee rate is higher than the specified value, expressed in \" + CURRENCY_UNIT + \"/kvB\\n\"},\n                 },\n                 RPCResult{\n                     RPCResult::Type::ARR, \"\", \"The result of the mempool acceptance test for each raw transaction in the input array.\\n\"\n-                        \"Length is exactly one for now.\",\n+                        \"Returns results for each transaction in the same order they were passed in.\\n\"\n+                        \"It is possible for transactions to not be fully validated ('allowed' unset) if an earlier transaction failed.\\n\",\n                     {\n                         {RPCResult::Type::OBJ, \"\", \"\",\n                         {\n                             {RPCResult::Type::STR_HEX, \"txid\", \"The transaction hash in hex\"},\n                             {RPCResult::Type::STR_HEX, \"wtxid\", \"The transaction witness hash in hex\"},\n-                            {RPCResult::Type::BOOL, \"allowed\", \"If the mempool allows this tx to be inserted\"},\n+                            {RPCResult::Type::STR, \"package-error\", \"Package validation error, if any (only possible if rawtxs had more than 1 transaction).\"},\n+                            {RPCResult::Type::BOOL, \"allowed\", \"Whether this tx would be accepted to the mempool and pass client-specified maxfeerate.\"\n+                                                               \"If not present, the tx was not fully validated due to a failure in another tx in the list.\"},\n                             {RPCResult::Type::NUM, \"vsize\", \"Virtual transaction size as defined in BIP 141. This is different from actual serialized size for witness transactions as witness data is discounted (only present when 'allowed' is true)\"},\n                             {RPCResult::Type::OBJ, \"fees\", \"Transaction fees (only present if 'allowed' is true)\",\n                             {\n@@ -932,62 +940,86 @@ static RPCHelpMan testmempoolaccept()\n         UniValueType(), // VNUM or VSTR, checked inside AmountFromValue()\n     });\n \n-    if (request.params[0].get_array().size() != 1) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array must contain exactly one raw transaction for now\");\n-    }\n-\n-    CMutableTransaction mtx;\n-    if (!DecodeHexTx(mtx, request.params[0].get_array()[0].get_str())) {\n-        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n+    const UniValue raw_transactions = request.params[0].get_array();\n+    if (raw_transactions.size() < 1 || raw_transactions.size() > MAX_PACKAGE_COUNT) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER,\n+                           \"Array must contain between 1 and \" + ToString(MAX_PACKAGE_COUNT) + \" transactions.\");\n     }\n-    CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n \n     const CFeeRate max_raw_tx_fee_rate = request.params[1].isNull() ?\n                                              DEFAULT_MAX_RAW_TX_FEE_RATE :\n                                              CFeeRate(AmountFromValue(request.params[1]));\n \n-    NodeContext& node = EnsureAnyNodeContext(request.context);\n+    std::vector<CTransactionRef> txns;\n+    for (const auto& rawtx : raw_transactions.getValues()) {\n+        CMutableTransaction mtx;\n+        if (!DecodeHexTx(mtx, rawtx.get_str())) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR,\n+                               \"TX decode failed: \" + rawtx.get_str() + \" Make sure the tx has at least one input.\");\n+        }\n+        txns.emplace_back(MakeTransactionRef(std::move(mtx)));\n+    }\n \n+    NodeContext& node = EnsureAnyNodeContext(request.context);\n     CTxMemPool& mempool = EnsureMemPool(node);\n-    int64_t virtual_size = GetVirtualTransactionSize(*tx);\n-    CAmount max_raw_tx_fee = max_raw_tx_fee_rate.GetFee(virtual_size);\n-\n-    UniValue result(UniValue::VARR);\n-    UniValue result_0(UniValue::VOBJ);\n-    result_0.pushKV(\"txid\", tx->GetHash().GetHex());\n-    result_0.pushKV(\"wtxid\", tx->GetWitnessHash().GetHex());\n-\n-    ChainstateManager& chainman = EnsureChainman(node);\n-    const MempoolAcceptResult accept_result = WITH_LOCK(cs_main, return AcceptToMemoryPool(chainman.ActiveChainstate(), mempool, std::move(tx),\n-                                                  false /* bypass_limits */, /* test_accept */ true));\n-\n-    // Only return the fee and vsize if the transaction would pass ATMP.\n-    // These can be used to calculate the feerate.\n-    if (accept_result.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n-        const CAmount fee = accept_result.m_base_fees.value();\n-        // Check that fee does not exceed maximum fee\n-        if (max_raw_tx_fee && fee > max_raw_tx_fee) {\n-            result_0.pushKV(\"allowed\", false);\n-            result_0.pushKV(\"reject-reason\", \"max-fee-exceeded\");\n-        } else {\n-            result_0.pushKV(\"allowed\", true);\n-            result_0.pushKV(\"vsize\", virtual_size);\n-            UniValue fees(UniValue::VOBJ);\n-            fees.pushKV(\"base\", ValueFromAmount(fee));\n-            result_0.pushKV(\"fees\", fees);\n+    CChainState& chainstate = EnsureChainman(node).ActiveChainstate();\n+    const PackageMempoolAcceptResult package_result = [&] {\n+        LOCK(::cs_main);\n+        if (txns.size() > 1) return ProcessNewPackage(chainstate, mempool, txns, /* test_accept */ true);\n+        return PackageMempoolAcceptResult(txns[0]->GetWitnessHash(),\n+               AcceptToMemoryPool(chainstate, mempool, txns[0], /* bypass_limits */ false, /* test_accept*/ true));\n+    }();\n+\n+    UniValue rpc_result(UniValue::VARR);\n+    // We will check transaction fees we iterate through txns in order. If any transaction fee\n+    // exceeds maxfeerate, we will keave the rest of the validation results blank, because it\n+    // doesn't make sense to return a validation result for a transaction if its ancestor(s) would\n+    // not be submitted.\n+    bool exit_early{false};\n+    for (const auto& tx : txns) {\n+        UniValue result_inner(UniValue::VOBJ);\n+        result_inner.pushKV(\"txid\", tx->GetHash().GetHex());\n+        result_inner.pushKV(\"wtxid\", tx->GetWitnessHash().GetHex());\n+        if (package_result.m_state.GetResult() == PackageValidationResult::PCKG_POLICY) {\n+            result_inner.pushKV(\"package-error\", package_result.m_state.GetRejectReason());\n         }\n-        result.push_back(std::move(result_0));\n-    } else {\n-        result_0.pushKV(\"allowed\", false);\n-        const TxValidationState state = accept_result.m_state;\n-        if (state.GetResult() == TxValidationResult::TX_MISSING_INPUTS) {\n-            result_0.pushKV(\"reject-reason\", \"missing-inputs\");\n+        auto it = package_result.m_tx_results.find(tx->GetWitnessHash());\n+        if (exit_early || it == package_result.m_tx_results.end()) {\n+            // Validation unfinished. Just return the txid and wtxid.\n+            rpc_result.push_back(result_inner);\n+            continue;\n+        }\n+        const auto& tx_result = it->second;\n+        if (tx_result.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n+            const CAmount fee = tx_result.m_base_fees.value();\n+            // Check that fee does not exceed maximum fee\n+            const int64_t virtual_size = GetVirtualTransactionSize(*tx);\n+            const CAmount max_raw_tx_fee = max_raw_tx_fee_rate.GetFee(virtual_size);\n+            if (max_raw_tx_fee && fee > max_raw_tx_fee) {\n+                result_inner.pushKV(\"allowed\", false);\n+                result_inner.pushKV(\"reject-reason\", \"max-fee-exceeded\");\n+                exit_early = true;\n+            } else {\n+                // Only return the fee and vsize if the transaction would pass ATMP.\n+                // These can be used to calculate the feerate.\n+                result_inner.pushKV(\"allowed\", true);\n+                result_inner.pushKV(\"vsize\", virtual_size);\n+                UniValue fees(UniValue::VOBJ);\n+                fees.pushKV(\"base\", ValueFromAmount(fee));\n+                result_inner.pushKV(\"fees\", fees);\n+            }\n         } else {\n-            result_0.pushKV(\"reject-reason\", state.GetRejectReason());\n+            result_inner.pushKV(\"allowed\", false);\n+            const TxValidationState state = tx_result.m_state;\n+            if (state.GetResult() == TxValidationResult::TX_MISSING_INPUTS) {\n+                result_inner.pushKV(\"reject-reason\", \"missing-inputs\");\n+            } else {\n+                result_inner.pushKV(\"reject-reason\", state.GetRejectReason());\n+            }\n         }\n-        result.push_back(std::move(result_0));\n+        rpc_result.push_back(result_inner);\n     }\n-    return result;\n+    return rpc_result;\n },\n     };\n }"
      },
      {
        "sha": "12aac3ab65d32e7f9ea21ab266403c0297a8988c",
        "filename": "test/functional/mempool_accept.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ede34a6f20378e86c5289ebd20dd394a5915123/test/functional/mempool_accept.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ede34a6f20378e86c5289ebd20dd394a5915123/test/functional/mempool_accept.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_accept.py?ref=9ede34a6f20378e86c5289ebd20dd394a5915123",
        "patch": "@@ -67,7 +67,8 @@ def run_test(self):\n \n         self.log.info('Should not accept garbage to testmempoolaccept')\n         assert_raises_rpc_error(-3, 'Expected type array, got string', lambda: node.testmempoolaccept(rawtxs='ff00baar'))\n-        assert_raises_rpc_error(-8, 'Array must contain exactly one raw transaction for now', lambda: node.testmempoolaccept(rawtxs=['ff00baar', 'ff22']))\n+        assert_raises_rpc_error(-8, 'Array must contain between 1 and 25 transactions.', lambda: node.testmempoolaccept(rawtxs=['ff22']*26))\n+        assert_raises_rpc_error(-8, 'Array must contain between 1 and 25 transactions.', lambda: node.testmempoolaccept(rawtxs=[]))\n         assert_raises_rpc_error(-22, 'TX decode failed', lambda: node.testmempoolaccept(rawtxs=['ff00baar']))\n \n         self.log.info('A transaction already in the blockchain')"
      }
    ]
  },
  {
    "sha": "c4259f4b7ee23ef6e0ec82c5d5b9dfa9cadd5bed",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNDI1OWY0YjdlZTIzZWY2ZTBlYzgyYzVkNWI5ZGZhOWNhZGQ1YmVk",
    "commit": {
      "author": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-02-23T03:32:58Z"
      },
      "committer": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-05-24T14:48:32Z"
      },
      "message": "[test] functional test for packages in RPCs",
      "tree": {
        "sha": "c08505b469f437f4d2fee8f55707cdc28ff655e4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c08505b469f437f4d2fee8f55707cdc28ff655e4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c4259f4b7ee23ef6e0ec82c5d5b9dfa9cadd5bed",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c4259f4b7ee23ef6e0ec82c5d5b9dfa9cadd5bed",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c4259f4b7ee23ef6e0ec82c5d5b9dfa9cadd5bed",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c4259f4b7ee23ef6e0ec82c5d5b9dfa9cadd5bed/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9ede34a6f20378e86c5289ebd20dd394a5915123",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ede34a6f20378e86c5289ebd20dd394a5915123",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9ede34a6f20378e86c5289ebd20dd394a5915123"
      }
    ],
    "stats": {
      "total": 365,
      "additions": 365,
      "deletions": 0
    },
    "files": [
      {
        "sha": "79e8d8e3ce5d28ce3286de5593062a2ba4f47773",
        "filename": "test/functional/rpc_packages.py",
        "status": "added",
        "additions": 364,
        "deletions": 0,
        "changes": 364,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4259f4b7ee23ef6e0ec82c5d5b9dfa9cadd5bed/test/functional/rpc_packages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4259f4b7ee23ef6e0ec82c5d5b9dfa9cadd5bed/test/functional/rpc_packages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_packages.py?ref=c4259f4b7ee23ef6e0ec82c5d5b9dfa9cadd5bed",
        "patch": "@@ -0,0 +1,364 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"RPCs that handle raw transaction packages.\"\"\"\n+\n+from decimal import Decimal\n+from io import BytesIO\n+import random\n+\n+from test_framework.address import ADDRESS_BCRT1_P2WSH_OP_TRUE\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.messages import (\n+    BIP125_SEQUENCE_NUMBER,\n+    COIN,\n+    CTransaction,\n+    CTxInWitness,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_TRUE,\n+)\n+from test_framework.util import (\n+    assert_equal,\n+    hex_str_to_bytes,\n+)\n+\n+class RPCPackagesTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def assert_testres_equal(self, package_hex, testres_expected):\n+        \"\"\"Shuffle package_hex and assert that the testmempoolaccept result matches testres_expected. This should only\n+        be used to test packages where the order does not matter. The ordering of transactions in package_hex and\n+        testres_expected must match.\n+        \"\"\"\n+        shuffled_indeces = list(range(len(package_hex)))\n+        random.shuffle(shuffled_indeces)\n+        shuffled_package = [package_hex[i] for i in shuffled_indeces]\n+        shuffled_testres = [testres_expected[i] for i in shuffled_indeces]\n+        assert_equal(shuffled_testres, self.nodes[0].testmempoolaccept(shuffled_package))\n+\n+    def run_test(self):\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        node = self.nodes[0]\n+        self.privkeys = [node.get_deterministic_priv_key().key]\n+        self.address = node.get_deterministic_priv_key().address\n+        self.coins = []\n+        # The last 100 coinbase transactions are premature\n+        for b in node.generatetoaddress(200, self.address)[:100]:\n+            coinbase = node.getblock(blockhash=b, verbosity=2)[\"tx\"][0]\n+            self.coins.append({\n+                \"txid\": coinbase[\"txid\"],\n+                \"amount\": coinbase[\"vout\"][0][\"value\"],\n+                \"scriptPubKey\": coinbase[\"vout\"][0][\"scriptPubKey\"],\n+            })\n+\n+        # Create some transactions that can be reused throughout the test. Never submit these to mempool.\n+        self.independent_txns_hex = []\n+        self.independent_txns_testres = []\n+        for _ in range(3):\n+            coin = self.coins.pop()\n+            rawtx = node.createrawtransaction([{\"txid\": coin[\"txid\"], \"vout\": 0}],\n+                {self.address : coin[\"amount\"] - Decimal(\"0.0001\")})\n+            signedtx = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n+            assert signedtx[\"complete\"]\n+            testres = node.testmempoolaccept([signedtx[\"hex\"]])\n+            assert testres[0][\"allowed\"]\n+            self.independent_txns_hex.append(signedtx[\"hex\"])\n+            # testmempoolaccept returns a list of length one, avoid creating a 2D list\n+            self.independent_txns_testres.append(testres[0])\n+        self.independent_txns_testres_blank = [{\n+            \"txid\": res[\"txid\"], \"wtxid\": res[\"wtxid\"]} for res in self.independent_txns_testres]\n+\n+        self.test_independent()\n+        self.test_chain()\n+        self.test_multiple_children()\n+        self.test_multiple_parents()\n+        self.test_conflicting()\n+        self.test_rbf()\n+\n+    def chain_transaction(self, parent_txid, parent_value, n=0, parent_locking_script=None):\n+        \"\"\"Build a transaction that spends parent_txid.vout[n] and produces one output with\n+        amount = parent_value with a fee deducted.\n+        Return tuple (CTransaction object, raw hex, nValue, scriptPubKey of the output created).\n+        \"\"\"\n+        node = self.nodes[0]\n+        inputs = [{\"txid\": parent_txid, \"vout\": n}]\n+        my_value = parent_value - Decimal(\"0.0001\")\n+        outputs = {self.address : my_value}\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+        prevtxs = [{\n+            \"txid\": parent_txid,\n+            \"vout\": n,\n+            \"scriptPubKey\": parent_locking_script,\n+            \"amount\": parent_value,\n+        }] if parent_locking_script else None\n+        signedtx = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys, prevtxs=prevtxs)\n+        tx = CTransaction()\n+        assert signedtx[\"complete\"]\n+        tx.deserialize(BytesIO(hex_str_to_bytes(signedtx[\"hex\"])))\n+        return (tx, signedtx[\"hex\"], my_value, tx.vout[0].scriptPubKey.hex())\n+\n+    def test_independent(self):\n+        self.log.info(\"Test multiple independent transactions in a package\")\n+        node = self.nodes[0]\n+        # For independent transactions, order doesn't matter.\n+        self.assert_testres_equal(self.independent_txns_hex, self.independent_txns_testres)\n+\n+        self.log.info(\"Test an otherwise valid package with an extra garbage tx appended\")\n+        garbage_tx = node.createrawtransaction([{\"txid\": \"00\" * 32, \"vout\": 5}], {self.address: 1})\n+        tx = CTransaction()\n+        tx.deserialize(BytesIO(hex_str_to_bytes(garbage_tx)))\n+        # Only the txid and wtxids are returned because validation is incomplete for the independent txns.\n+        # Package validation is atomic: if the node cannot find a UTXO for any single tx in the package,\n+        # it terminates immediately to avoid unnecessary, expensive signature verification.\n+        package_bad = self.independent_txns_hex + [garbage_tx]\n+        testres_bad = self.independent_txns_testres_blank + [{\"txid\": tx.rehash(), \"wtxid\": tx.getwtxid(), \"allowed\": False, \"reject-reason\": \"missing-inputs\"}]\n+        self.assert_testres_equal(package_bad, testres_bad)\n+\n+        self.log.info(\"Check testmempoolaccept tells us when some transactions completed validation successfully\")\n+        coin = self.coins.pop()\n+        tx_bad_sig_hex = node.createrawtransaction([{\"txid\": coin[\"txid\"], \"vout\": 0}],\n+                                           {self.address : coin[\"amount\"] - Decimal(\"0.0001\")})\n+        tx_bad_sig = CTransaction()\n+        tx_bad_sig.deserialize(BytesIO(hex_str_to_bytes(tx_bad_sig_hex)))\n+        testres_bad_sig = node.testmempoolaccept(self.independent_txns_hex + [tx_bad_sig_hex])\n+        # By the time the signature for the last transaction is checked, all the other transactions\n+        # have been fully validated, which is why the node returns full validation results for all\n+        # transactions here but empty results in other cases.\n+        assert_equal(testres_bad_sig, self.independent_txns_testres + [{\n+            \"txid\": tx_bad_sig.rehash(),\n+            \"wtxid\": tx_bad_sig.getwtxid(), \"allowed\": False,\n+            \"reject-reason\": \"mandatory-script-verify-flag-failed (Operation not valid with the current stack size)\"\n+        }])\n+\n+        self.log.info(\"Check testmempoolaccept reports txns in packages that exceed max feerate\")\n+        coin = self.coins.pop()\n+        tx_high_fee_raw = node.createrawtransaction([{\"txid\": coin[\"txid\"], \"vout\": 0}],\n+                                           {self.address : coin[\"amount\"] - Decimal(\"0.999\")})\n+        tx_high_fee_signed = node.signrawtransactionwithkey(hexstring=tx_high_fee_raw, privkeys=self.privkeys)\n+        assert tx_high_fee_signed[\"complete\"]\n+        tx_high_fee = CTransaction()\n+        tx_high_fee.deserialize(BytesIO(hex_str_to_bytes(tx_high_fee_signed[\"hex\"])))\n+        testres_high_fee = node.testmempoolaccept([tx_high_fee_signed[\"hex\"]])\n+        assert_equal(testres_high_fee, [\n+            {\"txid\": tx_high_fee.rehash(), \"wtxid\": tx_high_fee.getwtxid(), \"allowed\": False, \"reject-reason\": \"max-fee-exceeded\"}\n+        ])\n+        package_high_fee = [tx_high_fee_signed[\"hex\"]] + self.independent_txns_hex\n+        testres_package_high_fee = node.testmempoolaccept(package_high_fee)\n+        assert_equal(testres_package_high_fee, testres_high_fee + self.independent_txns_testres_blank)\n+\n+    def test_chain(self):\n+        node = self.nodes[0]\n+        first_coin = self.coins.pop()\n+\n+        # Chain of 25 transactions\n+        parent_locking_script = None\n+        txid = first_coin[\"txid\"]\n+        chain_hex = []\n+        chain_txns = []\n+        value = first_coin[\"amount\"]\n+\n+        for _ in range(25):\n+            (tx, txhex, value, parent_locking_script) = self.chain_transaction(txid, value, 0, parent_locking_script)\n+            txid = tx.rehash()\n+            chain_hex.append(txhex)\n+            chain_txns.append(tx)\n+\n+        self.log.info(\"Check that testmempoolaccept requires packages to be sorted by dependency\")\n+        testres_multiple_unsorted = node.testmempoolaccept(rawtxs=chain_hex[::-1])\n+        assert_equal(testres_multiple_unsorted,\n+                     [{\"txid\": chain_txns[-1].rehash(), \"wtxid\": chain_txns[-1].getwtxid(), \"allowed\": False, \"reject-reason\": \"missing-inputs\"}]\n+                     + [{\"txid\": tx.rehash(), \"wtxid\": tx.getwtxid()} for tx in chain_txns[::-1]][1:])\n+\n+        self.log.info(\"Testmempoolaccept a chain of 25 transactions\")\n+        testres_multiple = node.testmempoolaccept(rawtxs=chain_hex)\n+\n+        testres_single = []\n+        # Test accept and then submit each one individually, which should be identical to package test accept\n+        for rawtx in chain_hex:\n+            testres = node.testmempoolaccept([rawtx])\n+            testres_single.append(testres[0])\n+            # Submit the transaction now so its child should have no problem validating\n+            node.sendrawtransaction(rawtx)\n+        assert_equal(testres_single, testres_multiple)\n+\n+        # Clean up by clearing the mempool\n+        node.generate(1)\n+\n+    def test_multiple_children(self):\n+        node = self.nodes[0]\n+\n+        self.log.info(\"Testmempoolaccept a package in which a transaction has two children within the package\")\n+        first_coin = self.coins.pop()\n+        value = (first_coin[\"amount\"] - Decimal(\"0.0002\")) / 2 # Deduct reasonable fee and make 2 outputs\n+        inputs = [{\"txid\": first_coin[\"txid\"], \"vout\": 0}]\n+        outputs = [{self.address : value}, {ADDRESS_BCRT1_P2WSH_OP_TRUE : value}]\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+\n+        parent_signed = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n+        parent_tx = CTransaction()\n+        assert parent_signed[\"complete\"]\n+        parent_tx.deserialize(BytesIO(hex_str_to_bytes(parent_signed[\"hex\"])))\n+        parent_txid = parent_tx.rehash()\n+        assert node.testmempoolaccept([parent_signed[\"hex\"]])[0][\"allowed\"]\n+\n+        parent_locking_script_a = parent_tx.vout[0].scriptPubKey.hex()\n+        child_value = value - Decimal(\"0.0001\")\n+\n+        # Child A\n+        (_, tx_child_a_hex, _, _) = self.chain_transaction(parent_txid, child_value, 0, parent_locking_script_a)\n+        assert not node.testmempoolaccept([tx_child_a_hex])[0][\"allowed\"]\n+\n+        # Child B\n+        rawtx_b = node.createrawtransaction([{\"txid\": parent_txid, \"vout\": 1}], {self.address : child_value})\n+        tx_child_b = CTransaction()\n+        tx_child_b.deserialize(BytesIO(hex_str_to_bytes(rawtx_b)))\n+        tx_child_b.wit.vtxinwit = [CTxInWitness()]\n+        tx_child_b.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE])]\n+        tx_child_b_hex = tx_child_b.serialize().hex()\n+        assert not node.testmempoolaccept([tx_child_b_hex])[0][\"allowed\"]\n+\n+        self.log.info(\"Testmempoolaccept with entire package, should work with children in either order\")\n+        testres_multiple_ab = node.testmempoolaccept(rawtxs=[parent_signed[\"hex\"], tx_child_a_hex, tx_child_b_hex])\n+        testres_multiple_ba = node.testmempoolaccept(rawtxs=[parent_signed[\"hex\"], tx_child_b_hex, tx_child_a_hex])\n+        assert all([testres[\"allowed\"] for testres in testres_multiple_ab + testres_multiple_ba])\n+\n+        testres_single = []\n+        # Test accept and then submit each one individually, which should be identical to package testaccept\n+        for rawtx in [parent_signed[\"hex\"], tx_child_a_hex, tx_child_b_hex]:\n+            testres = node.testmempoolaccept([rawtx])\n+            testres_single.append(testres[0])\n+            # Submit the transaction now so its child should have no problem validating\n+            node.sendrawtransaction(rawtx)\n+        assert_equal(testres_single, testres_multiple_ab)\n+\n+    def create_child_with_parents(self, parents_tx, values, locking_scripts):\n+        \"\"\"Creates a transaction that spends the first output of each parent in parents_tx.\"\"\"\n+        num_parents = len(parents_tx)\n+        total_value = sum(values)\n+        inputs = [{\"txid\": tx.rehash(), \"vout\": 0} for tx in parents_tx]\n+        outputs = {self.address : total_value - num_parents * Decimal(\"0.0001\")}\n+        rawtx_child = self.nodes[0].createrawtransaction(inputs, outputs)\n+        prevtxs = []\n+        for i in range(num_parents):\n+            prevtxs.append({\"txid\": parents_tx[i].rehash(), \"vout\": 0, \"scriptPubKey\": locking_scripts[i], \"amount\": values[i]})\n+        signedtx_child = self.nodes[0].signrawtransactionwithkey(hexstring=rawtx_child, privkeys=self.privkeys, prevtxs=prevtxs)\n+        assert signedtx_child[\"complete\"]\n+        return signedtx_child[\"hex\"]\n+\n+    def test_multiple_parents(self):\n+        node = self.nodes[0]\n+\n+        self.log.info(\"Testmempoolaccept a package in which a transaction has multiple parents within the package\")\n+        for num_parents in [2, 10, 24]:\n+            # Test a package with num_parents parents and 1 child transaction.\n+            package_hex = []\n+            parents_tx = []\n+            values = []\n+            parent_locking_scripts = []\n+            for _ in range(num_parents):\n+                parent_coin = self.coins.pop()\n+                value = parent_coin[\"amount\"]\n+                (tx, txhex, value, parent_locking_script) = self.chain_transaction(parent_coin[\"txid\"], value)\n+                package_hex.append(txhex)\n+                parents_tx.append(tx)\n+                values.append(value)\n+                parent_locking_scripts.append(parent_locking_script)\n+            child_hex = self.create_child_with_parents(parents_tx, values, parent_locking_scripts)\n+            # Package accept should work with the parents in any order (as long as parents come before child)\n+            for _ in range(10):\n+                random.shuffle(package_hex)\n+                testres_multiple = node.testmempoolaccept(rawtxs=package_hex + [child_hex])\n+                assert all([testres[\"allowed\"] for testres in testres_multiple])\n+\n+            testres_single = []\n+            # Test accept and then submit each one individually, which should be identical to package testaccept\n+            for rawtx in package_hex + [child_hex]:\n+                testres_single.append(node.testmempoolaccept([rawtx])[0])\n+                # Submit the transaction now so its child should have no problem validating\n+                node.sendrawtransaction(rawtx)\n+            assert_equal(testres_single, testres_multiple)\n+\n+    def test_conflicting(self):\n+        node = self.nodes[0]\n+        prevtx = self.coins.pop()\n+        inputs = [{\"txid\": prevtx[\"txid\"], \"vout\": 0}]\n+        output1 = {node.get_deterministic_priv_key().address: 50 - 0.00125}\n+        output2 = {ADDRESS_BCRT1_P2WSH_OP_TRUE: 50 - 0.00125}\n+\n+        # tx1 and tx2 share the same inputs\n+        rawtx1 = node.createrawtransaction(inputs, output1)\n+        rawtx2 = node.createrawtransaction(inputs, output2)\n+        signedtx1 = node.signrawtransactionwithkey(hexstring=rawtx1, privkeys=self.privkeys)\n+        signedtx2 = node.signrawtransactionwithkey(hexstring=rawtx2, privkeys=self.privkeys)\n+        tx1 = CTransaction()\n+        tx1.deserialize(BytesIO(hex_str_to_bytes(signedtx1[\"hex\"])))\n+        tx2 = CTransaction()\n+        tx2.deserialize(BytesIO(hex_str_to_bytes(signedtx2[\"hex\"])))\n+        assert signedtx1[\"complete\"]\n+        assert signedtx2[\"complete\"]\n+\n+        # Ensure tx1 and tx2 are valid by themselves\n+        assert node.testmempoolaccept([signedtx1[\"hex\"]])[0][\"allowed\"]\n+        assert node.testmempoolaccept([signedtx2[\"hex\"]])[0][\"allowed\"]\n+\n+        self.log.info(\"Test duplicate transactions in the same package\")\n+        testres = node.testmempoolaccept([signedtx1[\"hex\"], signedtx1[\"hex\"]])\n+        assert_equal(testres, [\n+            {\"txid\": tx1.rehash(), \"wtxid\": tx1.getwtxid(), \"package-error\": \"conflict-in-package\"},\n+            {\"txid\": tx1.rehash(), \"wtxid\": tx1.getwtxid(), \"package-error\": \"conflict-in-package\"}\n+        ])\n+\n+        self.log.info(\"Test conflicting transactions in the same package\")\n+        testres = node.testmempoolaccept([signedtx1[\"hex\"], signedtx2[\"hex\"]])\n+        assert_equal(testres, [\n+            {\"txid\": tx1.rehash(), \"wtxid\": tx1.getwtxid(), \"package-error\": \"conflict-in-package\"},\n+            {\"txid\": tx2.rehash(), \"wtxid\": tx2.getwtxid(), \"package-error\": \"conflict-in-package\"}\n+        ])\n+\n+    def test_rbf(self):\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+        inputs = [{\"txid\": coin[\"txid\"], \"vout\": 0, \"sequence\": BIP125_SEQUENCE_NUMBER}]\n+        fee = Decimal('0.00125000')\n+        output = {node.get_deterministic_priv_key().address: 50 - fee}\n+        raw_replaceable_tx = node.createrawtransaction(inputs, output)\n+        signed_replaceable_tx = node.signrawtransactionwithkey(hexstring=raw_replaceable_tx, privkeys=self.privkeys)\n+        testres_replaceable = node.testmempoolaccept([signed_replaceable_tx[\"hex\"]])\n+        replaceable_tx = CTransaction()\n+        replaceable_tx.deserialize(BytesIO(hex_str_to_bytes(signed_replaceable_tx[\"hex\"])))\n+        assert_equal(testres_replaceable, [\n+            {\"txid\": replaceable_tx.rehash(), \"wtxid\": replaceable_tx.getwtxid(),\n+            \"allowed\": True, \"vsize\": replaceable_tx.get_vsize(), \"fees\": { \"base\": fee }}\n+        ])\n+\n+        # Replacement transaction is identical except has double the fee\n+        replacement_tx = CTransaction()\n+        replacement_tx.deserialize(BytesIO(hex_str_to_bytes(signed_replaceable_tx[\"hex\"])))\n+        replacement_tx.vout[0].nValue -= int(fee * COIN)  # Doubled fee\n+        signed_replacement_tx = node.signrawtransactionwithkey(replacement_tx.serialize().hex(), self.privkeys)\n+        replacement_tx.deserialize(BytesIO(hex_str_to_bytes(signed_replacement_tx[\"hex\"])))\n+\n+        self.log.info(\"Test that transactions within a package cannot replace each other\")\n+        testres_rbf_conflicting = node.testmempoolaccept([signed_replaceable_tx[\"hex\"], signed_replacement_tx[\"hex\"]])\n+        assert_equal(testres_rbf_conflicting, [\n+            {\"txid\": replaceable_tx.rehash(), \"wtxid\": replaceable_tx.getwtxid(), \"package-error\": \"conflict-in-package\"},\n+            {\"txid\": replacement_tx.rehash(), \"wtxid\": replacement_tx.getwtxid(), \"package-error\": \"conflict-in-package\"}\n+        ])\n+\n+        self.log.info(\"Test that packages cannot conflict with mempool transactions, even if a valid BIP125 RBF\")\n+        node.sendrawtransaction(signed_replaceable_tx[\"hex\"])\n+        testres_rbf_single = node.testmempoolaccept([signed_replacement_tx[\"hex\"]])\n+        # This transaction is a valid BIP125 replace-by-fee\n+        assert testres_rbf_single[0][\"allowed\"]\n+        testres_rbf_package = self.independent_txns_testres_blank + [{\n+            \"txid\": replacement_tx.rehash(), \"wtxid\": replacement_tx.getwtxid(), \"allowed\": False, \"reject-reason\": \"txn-mempool-conflict\"\n+        }]\n+        self.assert_testres_equal(self.independent_txns_hex + [signed_replacement_tx[\"hex\"]], testres_rbf_package)\n+\n+if __name__ == \"__main__\":\n+    RPCPackagesTest().main()"
      },
      {
        "sha": "49f269f8b4f0e84bf4fc9ff1a17eba7209c4367d",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4259f4b7ee23ef6e0ec82c5d5b9dfa9cadd5bed/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4259f4b7ee23ef6e0ec82c5d5b9dfa9cadd5bed/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=c4259f4b7ee23ef6e0ec82c5d5b9dfa9cadd5bed",
        "patch": "@@ -211,6 +211,7 @@\n     'mempool_package_onemore.py',\n     'rpc_createmultisig.py --legacy-wallet',\n     'rpc_createmultisig.py --descriptors',\n+    'rpc_packages.py',\n     'feature_versionbits_warning.py',\n     'rpc_preciousblock.py',\n     'wallet_importprunedfunds.py --legacy-wallet',"
      }
    ]
  },
  {
    "sha": "9ef643e21b44f99f4bce54077788d0ad4d81f7cd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZWY2NDNlMjFiNDRmOTlmNGJjZTU0MDc3Nzg4ZDBhZDRkODFmN2Nk",
    "commit": {
      "author": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-04-27T21:43:48Z"
      },
      "committer": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-05-24T14:48:32Z"
      },
      "message": "[doc] add release note for package testmempoolaccept",
      "tree": {
        "sha": "dce986182b09a26e6ee40b0a0f56e4bb1fa7db3b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dce986182b09a26e6ee40b0a0f56e4bb1fa7db3b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9ef643e21b44f99f4bce54077788d0ad4d81f7cd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ef643e21b44f99f4bce54077788d0ad4d81f7cd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9ef643e21b44f99f4bce54077788d0ad4d81f7cd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ef643e21b44f99f4bce54077788d0ad4d81f7cd/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c4259f4b7ee23ef6e0ec82c5d5b9dfa9cadd5bed",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c4259f4b7ee23ef6e0ec82c5d5b9dfa9cadd5bed",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c4259f4b7ee23ef6e0ec82c5d5b9dfa9cadd5bed"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 12,
      "deletions": 0
    },
    "files": [
      {
        "sha": "9a02bbd275f616c77fa9d4de5f6f24d7106356ae",
        "filename": "doc/release-notes-20833.md",
        "status": "added",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ef643e21b44f99f4bce54077788d0ad4d81f7cd/doc/release-notes-20833.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ef643e21b44f99f4bce54077788d0ad4d81f7cd/doc/release-notes-20833.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-20833.md?ref=9ef643e21b44f99f4bce54077788d0ad4d81f7cd",
        "patch": "@@ -0,0 +1,12 @@\n+Updated RPCs\n+------------\n+\n+- The `testmempoolaccept` RPC now accepts multiple transactions (still experimental at the moment,\n+  API may be unstable). This is intended for testing transaction packages with dependency\n+  relationships; it is not recommended for batch-validating independent transactions. In addition to\n+  mempool policy, package policies apply: the list cannot contain more than 25 transactions or have a\n+  total size exceeding 101K virtual bytes, and cannot conflict with (spend the same inputs as) each other or\n+  the mempool, even if it would be a valid BIP125 replace-by-fee. There are some known limitations to\n+  the accuracy of the test accept: it's possible for `testmempoolaccept` to return \"allowed\"=True for a\n+  group of transactions, but \"too-long-mempool-chain\" if they are actually submitted. (#20833)\n+"
      }
    ]
  },
  {
    "sha": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMzY1MGZlMmU1MjdiZjBjZjVkOTc3YmY1ZjNmMTU2M2I4NTNlY2Rj",
    "commit": {
      "author": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-04-05T20:15:56Z"
      },
      "committer": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-05-24T14:48:32Z"
      },
      "message": "[policy] detect unsorted packages",
      "tree": {
        "sha": "dea774530d56871d155998c466a5fbc33951e5f1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dea774530d56871d155998c466a5fbc33951e5f1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/13650fe2e527bf0cf5d977bf5f3f1563b853ecdc/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9ef643e21b44f99f4bce54077788d0ad4d81f7cd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ef643e21b44f99f4bce54077788d0ad4d81f7cd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9ef643e21b44f99f4bce54077788d0ad4d81f7cd"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 24,
      "deletions": 8
    },
    "files": [
      {
        "sha": "ebe88ba04d4659f35a5a6ea4e5d2ecb401f6def9",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 4,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13650fe2e527bf0cf5d977bf5f3f1563b853ecdc/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13650fe2e527bf0cf5d977bf5f3f1563b853ecdc/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
        "patch": "@@ -42,6 +42,7 @@\n #include <uint256.h>\n #include <undo.h>\n #include <util/check.h> // For NDEBUG compile time check\n+#include <util/hasher.h>\n #include <util/moneystr.h>\n #include <util/rbf.h>\n #include <util/strencodings.h>\n@@ -1093,12 +1094,29 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n         return PackageMempoolAcceptResult(package_state, {});\n     }\n \n+    // Construct workspaces and check package policies.\n     std::vector<Workspace> workspaces{};\n     workspaces.reserve(package_count);\n-    std::transform(txns.cbegin(), txns.cend(), std::back_inserter(workspaces), [](const auto& tx) {\n-        return Workspace(tx);\n-    });\n-\n+    {\n+        std::unordered_set<uint256, SaltedTxidHasher> later_txids;\n+        std::transform(txns.cbegin(), txns.cend(), std::inserter(later_txids, later_txids.end()),\n+                       [](const auto& tx) { return tx->GetHash(); });\n+        // Require the package to be sorted in order of dependency, i.e. parents appear before children.\n+        // An unsorted package will fail anyway on missing-inputs, but it's better to quit earlier and\n+        // fail on something less ambiguous (missing-inputs could also be an orphan or trying to\n+        // spend nonexistent coins).\n+        for (const auto& tx : txns) {\n+            for (const auto& input : tx->vin) {\n+                if (later_txids.find(input.prevout.hash) != later_txids.end()) {\n+                    // The parent is a subsequent transaction in the package.\n+                    package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-sorted\");\n+                    return PackageMempoolAcceptResult(package_state, {});\n+                }\n+            }\n+            later_txids.erase(tx->GetHash());\n+            workspaces.emplace_back(Workspace(tx));\n+        }\n+    }\n     std::map<const uint256, const MempoolAcceptResult> results;\n     {\n         // Don't allow any conflicting transactions, i.e. spending the same inputs, in a package."
      },
      {
        "sha": "3d8d81d6b869548ed6aebfe00d1a7afc521d2f7a",
        "filename": "test/functional/rpc_packages.py",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13650fe2e527bf0cf5d977bf5f3f1563b853ecdc/test/functional/rpc_packages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13650fe2e527bf0cf5d977bf5f3f1563b853ecdc/test/functional/rpc_packages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_packages.py?ref=13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
        "patch": "@@ -169,10 +169,8 @@ def test_chain(self):\n             chain_txns.append(tx)\n \n         self.log.info(\"Check that testmempoolaccept requires packages to be sorted by dependency\")\n-        testres_multiple_unsorted = node.testmempoolaccept(rawtxs=chain_hex[::-1])\n-        assert_equal(testres_multiple_unsorted,\n-                     [{\"txid\": chain_txns[-1].rehash(), \"wtxid\": chain_txns[-1].getwtxid(), \"allowed\": False, \"reject-reason\": \"missing-inputs\"}]\n-                     + [{\"txid\": tx.rehash(), \"wtxid\": tx.getwtxid()} for tx in chain_txns[::-1]][1:])\n+        assert_equal(node.testmempoolaccept(rawtxs=chain_hex[::-1]),\n+                [{\"txid\": tx.rehash(), \"wtxid\": tx.getwtxid(), \"package-error\": \"package-not-sorted\"} for tx in chain_txns[::-1]])\n \n         self.log.info(\"Testmempoolaccept a chain of 25 transactions\")\n         testres_multiple = node.testmempoolaccept(rawtxs=chain_hex)"
      }
    ]
  }
]