[
  {
    "sha": "5aab011805ceb12801644170700b1a62e0bf4a5d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YWFiMDExODA1Y2ViMTI4MDE2NDQxNzA3MDBiMWE2MmUwYmY0YTVk",
    "commit": {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2019-12-11T08:52:57Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2020-02-28T20:20:31Z"
      },
      "message": "test: add unit test for non-standard \"scriptsig-not-pushonly\" txs\n\nThe function IsStandardTx() returns rejection reason \"scriptsig-not-pushonly\"\nif the transaction has at least one input for which the scriptSig consists of\nany other ops than just PUSHs.",
      "tree": {
        "sha": "a69a8555e56ad353d172010a94f1e0343150bd02",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a69a8555e56ad353d172010a94f1e0343150bd02"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5aab011805ceb12801644170700b1a62e0bf4a5d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5aab011805ceb12801644170700b1a62e0bf4a5d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5aab011805ceb12801644170700b1a62e0bf4a5d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5aab011805ceb12801644170700b1a62e0bf4a5d/comments",
    "author": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eae48ec84c4deacfe92139d07ee80e51136cb766",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eae48ec84c4deacfe92139d07ee80e51136cb766",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eae48ec84c4deacfe92139d07ee80e51136cb766"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 34,
      "deletions": 0
    },
    "files": [
      {
        "sha": "2c03f9ec56b239a738c3ad8bcadb8ff3f1a5c1a5",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 34,
        "deletions": 0,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5aab011805ceb12801644170700b1a62e0bf4a5d/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5aab011805ceb12801644170700b1a62e0bf4a5d/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=5aab011805ceb12801644170700b1a62e0bf4a5d",
        "patch": "@@ -819,6 +819,40 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     BOOST_CHECK(!IsStandardTx(CTransaction(t), reason));\n     BOOST_CHECK_EQUAL(reason, \"scriptsig-size\");\n \n+    // Check scriptSig format (non-standard if there are any other ops than just PUSHs)\n+    t.vin[0].scriptSig = CScript()\n+        << OP_TRUE << OP_0 << OP_1NEGATE << OP_16 // OP_n (single byte pushes: n = 1, 0, -1, 16)\n+        << std::vector<unsigned char>(75, 0)      // OP_PUSHx [...x bytes...]\n+        << std::vector<unsigned char>(235, 0)     // OP_PUSHDATA1 x [...x bytes...]\n+        << std::vector<unsigned char>(1234, 0)    // OP_PUSHDATA2 x [...x bytes...]\n+        << OP_9;\n+    BOOST_CHECK(IsStandardTx(CTransaction(t), reason));\n+\n+    const std::vector<unsigned char> non_push_ops = { // arbitrary set of non-push operations\n+        OP_NOP, OP_VERIFY, OP_IF, OP_ROT, OP_3DUP, OP_SIZE, OP_EQUAL, OP_ADD, OP_SUB,\n+        OP_HASH256, OP_CODESEPARATOR, OP_CHECKSIG, OP_CHECKLOCKTIMEVERIFY };\n+\n+    CScript::const_iterator pc = t.vin[0].scriptSig.begin();\n+    while (pc < t.vin[0].scriptSig.end()) {\n+        opcodetype opcode;\n+        CScript::const_iterator prev_pc = pc;\n+        t.vin[0].scriptSig.GetOp(pc, opcode); // advance to next op\n+        // for the sake of simplicity, we only replace single-byte push operations\n+        if (opcode >= 1 && opcode <= OP_PUSHDATA4)\n+            continue;\n+\n+        int index = prev_pc - t.vin[0].scriptSig.begin();\n+        unsigned char orig_op = *prev_pc; // save op\n+        // replace current push-op with each non-push-op\n+        for (auto op : non_push_ops) {\n+            t.vin[0].scriptSig[index] = op;\n+            BOOST_CHECK(!IsStandardTx(CTransaction(t), reason));\n+            BOOST_CHECK_EQUAL(reason, \"scriptsig-not-pushonly\");\n+        }\n+        t.vin[0].scriptSig[index] = orig_op; // restore op\n+        BOOST_CHECK(IsStandardTx(CTransaction(t), reason));\n+    }\n+\n     // Check tx-size (non-standard if transaction weight is > MAX_STANDARD_TX_WEIGHT)\n     t.vin.clear();\n     t.vin.resize(2438); // size per input (empty scriptSig): 41 bytes"
      }
    ]
  }
]