[
  {
    "sha": "f9ee7a032b14e5c78ef11446458156680fccf858",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmOWVlN2EwMzJiMTRlNWM3OGVmMTE0NDY0NTgxNTY2ODBmY2NmODU4",
    "commit": {
      "author": {
        "name": "Jeff Garzik",
        "email": "jgarzik@bitpay.com",
        "date": "2013-10-02T15:15:51Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2013-11-12T12:22:10Z"
      },
      "message": "init.cpp: cosmetic indent changes, preparing for no-wallet mode",
      "tree": {
        "sha": "96a353d3670fdd3294fcacd1b338b85cee735aa7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/96a353d3670fdd3294fcacd1b338b85cee735aa7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f9ee7a032b14e5c78ef11446458156680fccf858",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f9ee7a032b14e5c78ef11446458156680fccf858",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f9ee7a032b14e5c78ef11446458156680fccf858",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f9ee7a032b14e5c78ef11446458156680fccf858/comments",
    "author": null,
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "abf34606c0b61d8193288ffefe94acb0c854097e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/abf34606c0b61d8193288ffefe94acb0c854097e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/abf34606c0b61d8193288ffefe94acb0c854097e"
      }
    ],
    "stats": {
      "total": 222,
      "additions": 113,
      "deletions": 109
    },
    "files": [
      {
        "sha": "19353c3696535c20d50dd9c9ac3d3b97109bea2c",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 113,
        "deletions": 109,
        "changes": 222,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f9ee7a032b14e5c78ef11446458156680fccf858/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f9ee7a032b14e5c78ef11446458156680fccf858/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=f9ee7a032b14e5c78ef11446458156680fccf858",
        "patch": "@@ -587,49 +587,51 @@ bool AppInit2(boost::thread_group& threadGroup, bool fForceServer)\n \n     // ********************************************************* Step 5: verify wallet database integrity\n \n-    uiInterface.InitMessage(_(\"Verifying wallet...\"));\n+    if (1) {\n+        uiInterface.InitMessage(_(\"Verifying wallet...\"));\n \n-    if (!bitdb.Open(GetDataDir()))\n-    {\n-        // try moving the database env out of the way\n-        boost::filesystem::path pathDatabase = GetDataDir() / \"database\";\n-        boost::filesystem::path pathDatabaseBak = GetDataDir() / strprintf(\"database.%\"PRId64\".bak\", GetTime());\n-        try {\n-            boost::filesystem::rename(pathDatabase, pathDatabaseBak);\n-            LogPrintf(\"Moved old %s to %s. Retrying.\\n\", pathDatabase.string().c_str(), pathDatabaseBak.string().c_str());\n-        } catch(boost::filesystem::filesystem_error &error) {\n-             // failure is ok (well, not really, but it's not worse than what we started with)\n-        }\n+        if (!bitdb.Open(GetDataDir()))\n+        {\n+            // try moving the database env out of the way\n+            boost::filesystem::path pathDatabase = GetDataDir() / \"database\";\n+            boost::filesystem::path pathDatabaseBak = GetDataDir() / strprintf(\"database.%\"PRId64\".bak\", GetTime());\n+            try {\n+                boost::filesystem::rename(pathDatabase, pathDatabaseBak);\n+                LogPrintf(\"Moved old %s to %s. Retrying.\\n\", pathDatabase.string().c_str(), pathDatabaseBak.string().c_str());\n+            } catch(boost::filesystem::filesystem_error &error) {\n+                 // failure is ok (well, not really, but it's not worse than what we started with)\n+            }\n \n-        // try again\n-        if (!bitdb.Open(GetDataDir())) {\n-            // if it still fails, it probably means we can't even create the database env\n-            string msg = strprintf(_(\"Error initializing wallet database environment %s!\"), strDataDir.c_str());\n-            return InitError(msg);\n+            // try again\n+            if (!bitdb.Open(GetDataDir())) {\n+                // if it still fails, it probably means we can't even create the database env\n+                string msg = strprintf(_(\"Error initializing wallet database environment %s!\"), strDataDir.c_str());\n+                return InitError(msg);\n+            }\n         }\n-    }\n \n-    if (GetBoolArg(\"-salvagewallet\", false))\n-    {\n-        // Recover readable keypairs:\n-        if (!CWalletDB::Recover(bitdb, strWalletFile, true))\n-            return false;\n-    }\n+        if (GetBoolArg(\"-salvagewallet\", false))\n+        {\n+            // Recover readable keypairs:\n+            if (!CWalletDB::Recover(bitdb, strWalletFile, true))\n+                return false;\n+        }\n \n-    if (filesystem::exists(GetDataDir() / strWalletFile))\n-    {\n-        CDBEnv::VerifyResult r = bitdb.Verify(strWalletFile, CWalletDB::Recover);\n-        if (r == CDBEnv::RECOVER_OK)\n+        if (filesystem::exists(GetDataDir() / strWalletFile))\n         {\n-            string msg = strprintf(_(\"Warning: wallet.dat corrupt, data salvaged!\"\n-                                     \" Original wallet.dat saved as wallet.{timestamp}.bak in %s; if\"\n-                                     \" your balance or transactions are incorrect you should\"\n-                                     \" restore from a backup.\"), strDataDir.c_str());\n-            InitWarning(msg);\n+            CDBEnv::VerifyResult r = bitdb.Verify(strWalletFile, CWalletDB::Recover);\n+            if (r == CDBEnv::RECOVER_OK)\n+            {\n+                string msg = strprintf(_(\"Warning: wallet.dat corrupt, data salvaged!\"\n+                                         \" Original wallet.dat saved as wallet.{timestamp}.bak in %s; if\"\n+                                         \" your balance or transactions are incorrect you should\"\n+                                         \" restore from a backup.\"), strDataDir.c_str());\n+                InitWarning(msg);\n+            }\n+            if (r == CDBEnv::RECOVER_FAIL)\n+                return InitError(_(\"wallet.dat corrupt, salvage failed\"));\n         }\n-        if (r == CDBEnv::RECOVER_FAIL)\n-            return InitError(_(\"wallet.dat corrupt, salvage failed\"));\n-    }\n+    } // (1)\n \n     // ********************************************************* Step 6: network initialization\n \n@@ -898,92 +900,94 @@ bool AppInit2(boost::thread_group& threadGroup, bool fForceServer)\n \n     // ********************************************************* Step 8: load wallet\n \n-    uiInterface.InitMessage(_(\"Loading wallet...\"));\n+    if (1) {\n+        uiInterface.InitMessage(_(\"Loading wallet...\"));\n \n-    nStart = GetTimeMillis();\n-    bool fFirstRun = true;\n-    pwalletMain = new CWallet(strWalletFile);\n-    DBErrors nLoadWalletRet = pwalletMain->LoadWallet(fFirstRun);\n-    if (nLoadWalletRet != DB_LOAD_OK)\n-    {\n-        if (nLoadWalletRet == DB_CORRUPT)\n-            strErrors << _(\"Error loading wallet.dat: Wallet corrupted\") << \"\\n\";\n-        else if (nLoadWalletRet == DB_NONCRITICAL_ERROR)\n+        nStart = GetTimeMillis();\n+        bool fFirstRun = true;\n+        pwalletMain = new CWallet(strWalletFile);\n+        DBErrors nLoadWalletRet = pwalletMain->LoadWallet(fFirstRun);\n+        if (nLoadWalletRet != DB_LOAD_OK)\n         {\n-            string msg(_(\"Warning: error reading wallet.dat! All keys read correctly, but transaction data\"\n-                         \" or address book entries might be missing or incorrect.\"));\n-            InitWarning(msg);\n+            if (nLoadWalletRet == DB_CORRUPT)\n+                strErrors << _(\"Error loading wallet.dat: Wallet corrupted\") << \"\\n\";\n+            else if (nLoadWalletRet == DB_NONCRITICAL_ERROR)\n+            {\n+                string msg(_(\"Warning: error reading wallet.dat! All keys read correctly, but transaction data\"\n+                             \" or address book entries might be missing or incorrect.\"));\n+                InitWarning(msg);\n+            }\n+            else if (nLoadWalletRet == DB_TOO_NEW)\n+                strErrors << _(\"Error loading wallet.dat: Wallet requires newer version of Bitcoin\") << \"\\n\";\n+            else if (nLoadWalletRet == DB_NEED_REWRITE)\n+            {\n+                strErrors << _(\"Wallet needed to be rewritten: restart Bitcoin to complete\") << \"\\n\";\n+                LogPrintf(\"%s\", strErrors.str().c_str());\n+                return InitError(strErrors.str());\n+            }\n+            else\n+                strErrors << _(\"Error loading wallet.dat\") << \"\\n\";\n         }\n-        else if (nLoadWalletRet == DB_TOO_NEW)\n-            strErrors << _(\"Error loading wallet.dat: Wallet requires newer version of Bitcoin\") << \"\\n\";\n-        else if (nLoadWalletRet == DB_NEED_REWRITE)\n+\n+        if (GetBoolArg(\"-upgradewallet\", fFirstRun))\n         {\n-            strErrors << _(\"Wallet needed to be rewritten: restart Bitcoin to complete\") << \"\\n\";\n-            LogPrintf(\"%s\", strErrors.str().c_str());\n-            return InitError(strErrors.str());\n+            int nMaxVersion = GetArg(\"-upgradewallet\", 0);\n+            if (nMaxVersion == 0) // the -upgradewallet without argument case\n+            {\n+                LogPrintf(\"Performing wallet upgrade to %i\\n\", FEATURE_LATEST);\n+                nMaxVersion = CLIENT_VERSION;\n+                pwalletMain->SetMinVersion(FEATURE_LATEST); // permanently upgrade the wallet immediately\n+            }\n+            else\n+                LogPrintf(\"Allowing wallet upgrade up to %i\\n\", nMaxVersion);\n+            if (nMaxVersion < pwalletMain->GetVersion())\n+                strErrors << _(\"Cannot downgrade wallet\") << \"\\n\";\n+            pwalletMain->SetMaxVersion(nMaxVersion);\n         }\n-        else\n-            strErrors << _(\"Error loading wallet.dat\") << \"\\n\";\n-    }\n \n-    if (GetBoolArg(\"-upgradewallet\", fFirstRun))\n-    {\n-        int nMaxVersion = GetArg(\"-upgradewallet\", 0);\n-        if (nMaxVersion == 0) // the -upgradewallet without argument case\n+        if (fFirstRun)\n         {\n-            LogPrintf(\"Performing wallet upgrade to %i\\n\", FEATURE_LATEST);\n-            nMaxVersion = CLIENT_VERSION;\n-            pwalletMain->SetMinVersion(FEATURE_LATEST); // permanently upgrade the wallet immediately\n-        }\n-        else\n-            LogPrintf(\"Allowing wallet upgrade up to %i\\n\", nMaxVersion);\n-        if (nMaxVersion < pwalletMain->GetVersion())\n-            strErrors << _(\"Cannot downgrade wallet\") << \"\\n\";\n-        pwalletMain->SetMaxVersion(nMaxVersion);\n-    }\n+            // Create new keyUser and set as default key\n+            RandAddSeedPerfmon();\n+\n+            CPubKey newDefaultKey;\n+            if (pwalletMain->GetKeyFromPool(newDefaultKey)) {\n+                pwalletMain->SetDefaultKey(newDefaultKey);\n+                if (!pwalletMain->SetAddressBook(pwalletMain->vchDefaultKey.GetID(), \"\", \"receive\"))\n+                    strErrors << _(\"Cannot write default address\") << \"\\n\";\n+            }\n \n-    if (fFirstRun)\n-    {\n-        // Create new keyUser and set as default key\n-        RandAddSeedPerfmon();\n-\n-        CPubKey newDefaultKey;\n-        if (pwalletMain->GetKeyFromPool(newDefaultKey)) {\n-            pwalletMain->SetDefaultKey(newDefaultKey);\n-            if (!pwalletMain->SetAddressBook(pwalletMain->vchDefaultKey.GetID(), \"\", \"receive\"))\n-                strErrors << _(\"Cannot write default address\") << \"\\n\";\n+            pwalletMain->SetBestChain(chainActive.GetLocator());\n         }\n \n-        pwalletMain->SetBestChain(chainActive.GetLocator());\n-    }\n-\n-    LogPrintf(\"%s\", strErrors.str().c_str());\n-    LogPrintf(\" wallet      %15\"PRId64\"ms\\n\", GetTimeMillis() - nStart);\n+        LogPrintf(\"%s\", strErrors.str().c_str());\n+        LogPrintf(\" wallet      %15\"PRId64\"ms\\n\", GetTimeMillis() - nStart);\n \n-    RegisterWallet(pwalletMain);\n+        RegisterWallet(pwalletMain);\n \n-    CBlockIndex *pindexRescan = chainActive.Tip();\n-    if (GetBoolArg(\"-rescan\", false))\n-        pindexRescan = chainActive.Genesis();\n-    else\n-    {\n-        CWalletDB walletdb(strWalletFile);\n-        CBlockLocator locator;\n-        if (walletdb.ReadBestBlock(locator))\n-            pindexRescan = chainActive.FindFork(locator);\n-        else\n+        CBlockIndex *pindexRescan = chainActive.Tip();\n+        if (GetBoolArg(\"-rescan\", false))\n             pindexRescan = chainActive.Genesis();\n-    }\n-    if (chainActive.Tip() && chainActive.Tip() != pindexRescan)\n-    {\n-        uiInterface.InitMessage(_(\"Rescanning...\"));\n-        LogPrintf(\"Rescanning last %i blocks (from block %i)...\\n\", chainActive.Height() - pindexRescan->nHeight, pindexRescan->nHeight);\n-        nStart = GetTimeMillis();\n-        pwalletMain->ScanForWalletTransactions(pindexRescan, true);\n-        LogPrintf(\" rescan      %15\"PRId64\"ms\\n\", GetTimeMillis() - nStart);\n-        pwalletMain->SetBestChain(chainActive.GetLocator());\n-        nWalletDBUpdated++;\n-    }\n+        else\n+        {\n+            CWalletDB walletdb(strWalletFile);\n+            CBlockLocator locator;\n+            if (walletdb.ReadBestBlock(locator))\n+                pindexRescan = chainActive.FindFork(locator);\n+            else\n+                pindexRescan = chainActive.Genesis();\n+        }\n+        if (chainActive.Tip() && chainActive.Tip() != pindexRescan)\n+        {\n+            uiInterface.InitMessage(_(\"Rescanning...\"));\n+            LogPrintf(\"Rescanning last %i blocks (from block %i)...\\n\", chainActive.Height() - pindexRescan->nHeight, pindexRescan->nHeight);\n+            nStart = GetTimeMillis();\n+            pwalletMain->ScanForWalletTransactions(pindexRescan, true);\n+            LogPrintf(\" rescan      %15\"PRId64\"ms\\n\", GetTimeMillis() - nStart);\n+            pwalletMain->SetBestChain(chainActive.GetLocator());\n+            nWalletDBUpdated++;\n+        }\n+    } // (1)\n \n     // ********************************************************* Step 9: import blocks\n "
      }
    ]
  },
  {
    "sha": "e6b7e3dc79e91db7a9e20ec8fd593145f6c3ac41",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNmI3ZTNkYzc5ZTkxZGI3YTllMjBlYzhmZDU5MzE0NWY2YzNhYzQx",
    "commit": {
      "author": {
        "name": "Jeff Garzik",
        "email": "jgarzik@bitpay.com",
        "date": "2013-10-02T15:19:10Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2013-11-13T08:22:00Z"
      },
      "message": "Add -disablewallet option, to disable wallet support (and BDB)",
      "tree": {
        "sha": "662fe2ffe9cfd85fb3e57549437cdb889c254fea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/662fe2ffe9cfd85fb3e57549437cdb889c254fea"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e6b7e3dc79e91db7a9e20ec8fd593145f6c3ac41",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e6b7e3dc79e91db7a9e20ec8fd593145f6c3ac41",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e6b7e3dc79e91db7a9e20ec8fd593145f6c3ac41",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e6b7e3dc79e91db7a9e20ec8fd593145f6c3ac41/comments",
    "author": null,
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f9ee7a032b14e5c78ef11446458156680fccf858",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f9ee7a032b14e5c78ef11446458156680fccf858",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f9ee7a032b14e5c78ef11446458156680fccf858"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 8,
      "deletions": 4
    },
    "files": [
      {
        "sha": "d930f6f6935f2c6fa6f37776e398449966ee910e",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 4,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6b7e3dc79e91db7a9e20ec8fd593145f6c3ac41/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6b7e3dc79e91db7a9e20ec8fd593145f6c3ac41/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=e6b7e3dc79e91db7a9e20ec8fd593145f6c3ac41",
        "patch": "@@ -499,6 +499,7 @@ bool AppInit2(boost::thread_group& threadGroup, bool fForceServer)\n     fPrintToConsole = GetBoolArg(\"-printtoconsole\", false);\n     fPrintToDebugger = GetBoolArg(\"-printtodebugger\", false);\n     fLogTimestamps = GetBoolArg(\"-logtimestamps\", true);\n+    bool fDisableWallet = GetBoolArg(\"-disablewallet\", false);\n \n     if (mapArgs.count(\"-timeout\"))\n     {\n@@ -587,7 +588,7 @@ bool AppInit2(boost::thread_group& threadGroup, bool fForceServer)\n \n     // ********************************************************* Step 5: verify wallet database integrity\n \n-    if (1) {\n+    if (!fDisableWallet) {\n         uiInterface.InitMessage(_(\"Verifying wallet...\"));\n \n         if (!bitdb.Open(GetDataDir()))\n@@ -631,7 +632,7 @@ bool AppInit2(boost::thread_group& threadGroup, bool fForceServer)\n             if (r == CDBEnv::RECOVER_FAIL)\n                 return InitError(_(\"wallet.dat corrupt, salvage failed\"));\n         }\n-    } // (1)\n+    } // (!fDisableWallet)\n \n     // ********************************************************* Step 6: network initialization\n \n@@ -900,7 +901,10 @@ bool AppInit2(boost::thread_group& threadGroup, bool fForceServer)\n \n     // ********************************************************* Step 8: load wallet\n \n-    if (1) {\n+    if (fDisableWallet) {\n+        pwalletMain = NULL;\n+        LogPrintf(\"Wallet disabled!\\n\");\n+    } else {\n         uiInterface.InitMessage(_(\"Loading wallet...\"));\n \n         nStart = GetTimeMillis();\n@@ -987,7 +991,7 @@ bool AppInit2(boost::thread_group& threadGroup, bool fForceServer)\n             pwalletMain->SetBestChain(chainActive.GetLocator());\n             nWalletDBUpdated++;\n         }\n-    } // (1)\n+    } // (!fDisableWallet)\n \n     // ********************************************************* Step 9: import blocks\n "
      }
    ]
  },
  {
    "sha": "146ba964e4b784171c29600e959a0fae3e2e0c03",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNDZiYTk2NGU0Yjc4NDE3MWMyOTYwMGU5NTlhMGZhZTNlMmUwYzAz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2013-11-12T13:54:43Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2013-11-13T08:22:00Z"
      },
      "message": "qt: GUI support for -disablewallet mode",
      "tree": {
        "sha": "c94ccf87d3a0386adc0e8b07ac35353995ad4e29",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c94ccf87d3a0386adc0e8b07ac35353995ad4e29"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/146ba964e4b784171c29600e959a0fae3e2e0c03",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/146ba964e4b784171c29600e959a0fae3e2e0c03",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/146ba964e4b784171c29600e959a0fae3e2e0c03",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/146ba964e4b784171c29600e959a0fae3e2e0c03/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e6b7e3dc79e91db7a9e20ec8fd593145f6c3ac41",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e6b7e3dc79e91db7a9e20ec8fd593145f6c3ac41",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e6b7e3dc79e91db7a9e20ec8fd593145f6c3ac41"
      }
    ],
    "stats": {
      "total": 74,
      "additions": 60,
      "deletions": 14
    },
    "files": [
      {
        "sha": "57ce7da3610002444271ac0321e6ddfa91024c29",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 5,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/146ba964e4b784171c29600e959a0fae3e2e0c03/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/146ba964e4b784171c29600e959a0fae3e2e0c03/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=146ba964e4b784171c29600e959a0fae3e2e0c03",
        "patch": "@@ -313,11 +313,16 @@ int main(int argc, char *argv[])\n                     splash.finish(&window);\n \n                 ClientModel clientModel(&optionsModel);\n-                WalletModel walletModel(pwalletMain, &optionsModel);\n+                WalletModel *walletModel = 0;\n+                if(pwalletMain)\n+                    walletModel = new WalletModel(pwalletMain, &optionsModel);\n \n                 window.setClientModel(&clientModel);\n-                window.addWallet(\"~Default\", &walletModel);\n-                window.setCurrentWallet(\"~Default\");\n+                if(walletModel)\n+                {\n+                    window.addWallet(\"~Default\", walletModel);\n+                    window.setCurrentWallet(\"~Default\");\n+                }\n \n                 // If -min option passed, start window minimized.\n                 if(GetBoolArg(\"-min\", false))\n@@ -335,8 +340,11 @@ int main(int argc, char *argv[])\n                                  &window, SLOT(handlePaymentRequest(SendCoinsRecipient)));\n                 QObject::connect(&window, SIGNAL(receivedURI(QString)),\n                                  paymentServer, SLOT(handleURIOrFile(QString)));\n-                QObject::connect(&walletModel, SIGNAL(coinsSent(CWallet*,SendCoinsRecipient,QByteArray)),\n-                                 paymentServer, SLOT(fetchPaymentACK(CWallet*,const SendCoinsRecipient&,QByteArray)));\n+                if(walletModel)\n+                {\n+                    QObject::connect(walletModel, SIGNAL(coinsSent(CWallet*,SendCoinsRecipient,QByteArray)),\n+                                     paymentServer, SLOT(fetchPaymentACK(CWallet*,const SendCoinsRecipient&,QByteArray)));\n+                }\n                 QObject::connect(paymentServer, SIGNAL(message(QString,QString,unsigned int)),\n                                  guiref, SLOT(message(QString,QString,unsigned int)));\n                 QTimer::singleShot(100, paymentServer, SLOT(uiReady()));\n@@ -347,6 +355,7 @@ int main(int argc, char *argv[])\n                 window.setClientModel(0);\n                 window.removeAllWallets();\n                 guiref = 0;\n+                delete walletModel;\n             }\n             // Shutdown the core and its threads, but don't exit Bitcoin-Qt here\n             threadGroup.interrupt_all();"
      },
      {
        "sha": "a1becc12ec2bd8c9aef510fd1420703b7c017730",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 0,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/146ba964e4b784171c29600e959a0fae3e2e0c03/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/146ba964e4b784171c29600e959a0fae3e2e0c03/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=146ba964e4b784171c29600e959a0fae3e2e0c03",
        "patch": "@@ -163,6 +163,9 @@ BitcoinGUI::BitcoinGUI(bool fIsTestnet, QWidget *parent) :\n \n     // Install event filter to be able to catch status tip events (QEvent::StatusTip)\n     this->installEventFilter(this);\n+\n+    // Initially wallet actions should be disabled\n+    setWalletActionsEnabled(false);\n }\n \n BitcoinGUI::~BitcoinGUI()\n@@ -352,6 +355,7 @@ void BitcoinGUI::setClientModel(ClientModel *clientModel)\n \n bool BitcoinGUI::addWallet(const QString& name, WalletModel *walletModel)\n {\n+    setWalletActionsEnabled(true);\n     return walletFrame->addWallet(name, walletModel);\n }\n \n@@ -362,9 +366,26 @@ bool BitcoinGUI::setCurrentWallet(const QString& name)\n \n void BitcoinGUI::removeAllWallets()\n {\n+    setWalletActionsEnabled(false);\n     walletFrame->removeAllWallets();\n }\n \n+void BitcoinGUI::setWalletActionsEnabled(bool enabled)\n+{\n+    overviewAction->setEnabled(enabled);\n+    sendCoinsAction->setEnabled(enabled);\n+    receiveCoinsAction->setEnabled(enabled);\n+    historyAction->setEnabled(enabled);\n+    encryptWalletAction->setEnabled(enabled);\n+    backupWalletAction->setEnabled(enabled);\n+    changePassphraseAction->setEnabled(enabled);\n+    signMessageAction->setEnabled(enabled);\n+    verifyMessageAction->setEnabled(enabled);\n+    usedSendingAddressesAction->setEnabled(enabled);\n+    usedReceivingAddressesAction->setEnabled(enabled);\n+    openAction->setEnabled(enabled);\n+}\n+\n void BitcoinGUI::createTrayIcon(bool fIsTestnet)\n {\n #ifndef Q_OS_MAC"
      },
      {
        "sha": "b9a8a03139bb3dc791f64321572dc1aeee6354d3",
        "filename": "src/qt/bitcoingui.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/146ba964e4b784171c29600e959a0fae3e2e0c03/src/qt/bitcoingui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/146ba964e4b784171c29600e959a0fae3e2e0c03/src/qt/bitcoingui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.h?ref=146ba964e4b784171c29600e959a0fae3e2e0c03",
        "patch": "@@ -108,6 +108,9 @@ class BitcoinGUI : public QMainWindow\n     /** Create system tray menu (or setup the dock menu) */\n     void createTrayIconMenu();\n \n+    /** Enable or disable all wallet-related actions */\n+    void setWalletActionsEnabled(bool enabled);\n+\n signals:\n     /** Signal raised when a URI was entered or dragged to the GUI */\n     void receivedURI(const QString &uri);"
      },
      {
        "sha": "fead02292856229bd78c3d5d6aaa0dd7176fe926",
        "filename": "src/qt/walletframe.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 9,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/146ba964e4b784171c29600e959a0fae3e2e0c03/src/qt/walletframe.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/146ba964e4b784171c29600e959a0fae3e2e0c03/src/qt/walletframe.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletframe.cpp?ref=146ba964e4b784171c29600e959a0fae3e2e0c03",
        "patch": "@@ -10,6 +10,7 @@\n #include <cstdio>\n \n #include <QHBoxLayout>\n+#include <QLabel>\n \n WalletFrame::WalletFrame(BitcoinGUI *_gui) :\n     QFrame(_gui),\n@@ -21,6 +22,10 @@ WalletFrame::WalletFrame(BitcoinGUI *_gui) :\n     walletStack = new QStackedWidget(this);\n     walletFrameLayout->setContentsMargins(0,0,0,0);\n     walletFrameLayout->addWidget(walletStack);\n+\n+    QLabel *noWallet = new QLabel(tr(\"No wallet has been loaded.\"));\n+    noWallet->setAlignment(Qt::AlignCenter);\n+    walletStack->addWidget(noWallet);\n }\n \n WalletFrame::~WalletFrame()\n@@ -85,7 +90,7 @@ void WalletFrame::removeAllWallets()\n \n bool WalletFrame::handlePaymentRequest(const SendCoinsRecipient &recipient)\n {\n-    WalletView *walletView = (WalletView*)walletStack->currentWidget();\n+    WalletView *walletView = currentWalletView();\n     if (!walletView)\n         return false;\n \n@@ -130,56 +135,62 @@ void WalletFrame::gotoSendCoinsPage(QString addr)\n \n void WalletFrame::gotoSignMessageTab(QString addr)\n {\n-    WalletView *walletView = (WalletView*)walletStack->currentWidget();\n+    WalletView *walletView = currentWalletView();\n     if (walletView)\n         walletView->gotoSignMessageTab(addr);\n }\n \n void WalletFrame::gotoVerifyMessageTab(QString addr)\n {\n-    WalletView *walletView = (WalletView*)walletStack->currentWidget();\n+    WalletView *walletView = currentWalletView();\n     if (walletView)\n         walletView->gotoVerifyMessageTab(addr);\n }\n \n void WalletFrame::encryptWallet(bool status)\n {\n-    WalletView *walletView = (WalletView*)walletStack->currentWidget();\n+    WalletView *walletView = currentWalletView();\n     if (walletView)\n         walletView->encryptWallet(status);\n }\n \n void WalletFrame::backupWallet()\n {\n-    WalletView *walletView = (WalletView*)walletStack->currentWidget();\n+    WalletView *walletView = currentWalletView();\n     if (walletView)\n         walletView->backupWallet();\n }\n \n void WalletFrame::changePassphrase()\n {\n-    WalletView *walletView = (WalletView*)walletStack->currentWidget();\n+    WalletView *walletView = currentWalletView();\n     if (walletView)\n         walletView->changePassphrase();\n }\n \n void WalletFrame::unlockWallet()\n {\n-    WalletView *walletView = (WalletView*)walletStack->currentWidget();\n+    WalletView *walletView = currentWalletView();\n     if (walletView)\n         walletView->unlockWallet();\n }\n \n void WalletFrame::usedSendingAddresses()\n {\n-    WalletView *walletView = (WalletView*)walletStack->currentWidget();\n+    WalletView *walletView = currentWalletView();\n     if (walletView)\n         walletView->usedSendingAddresses();\n }\n \n void WalletFrame::usedReceivingAddresses()\n {\n-    WalletView *walletView = (WalletView*)walletStack->currentWidget();\n+    WalletView *walletView = currentWalletView();\n     if (walletView)\n         walletView->usedReceivingAddresses();\n }\n+\n+WalletView *WalletFrame::currentWalletView()\n+{\n+    return qobject_cast<WalletView*>(walletStack->currentWidget());\n+}\n+"
      },
      {
        "sha": "f1830a0d6bdc76ee19c3e754da9b612daa021977",
        "filename": "src/qt/walletframe.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/146ba964e4b784171c29600e959a0fae3e2e0c03/src/qt/walletframe.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/146ba964e4b784171c29600e959a0fae3e2e0c03/src/qt/walletframe.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletframe.h?ref=146ba964e4b784171c29600e959a0fae3e2e0c03",
        "patch": "@@ -45,6 +45,8 @@ class WalletFrame : public QFrame\n \n     bool bOutOfSync;\n \n+    WalletView *currentWalletView();\n+\n public slots:\n     /** Switch to overview (home) page */\n     void gotoOverviewPage();"
      }
    ]
  }
]