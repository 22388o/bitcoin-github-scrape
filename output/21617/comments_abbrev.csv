jonatack,2021-04-06 10:53:51,Concept ACK,https://github.com/bitcoin/bitcoin/pull/21617#issuecomment-814025631,814025631,
sipa,2021-04-06 21:56:36,utACK 33333755f2edcbe88fcd136f6fef81f94819002e,https://github.com/bitcoin/bitcoin/pull/21617#issuecomment-814463590,814463590,
MarcoFalke,2021-04-07 08:42:23,I merged this to unbreak our valgrind fuzzer. Happy to review the proposed changes in a follow-up pr.,https://github.com/bitcoin/bitcoin/pull/21617#issuecomment-814725694,814725694,
vasild,2021-04-07 09:12:58,Followup in https://github.com/bitcoin/bitcoin/pull/21630,https://github.com/bitcoin/bitcoin/pull/21617#issuecomment-814749300,814749300,
vasild,2021-04-07 07:52:03,nit: extra white space near the end: `occurred )`,https://github.com/bitcoin/bitcoin/pull/21617#discussion_r608422230,608422230,src/test/fuzz/util.cpp
vasild,2021-04-07 08:02:29,"* This would signal a failure without setting `errno` (it was like this even before this PR, but better fix it)\n* Would result in either an error or timeout, but never ""the requested event occurred""\n* `!ConsumeBool()` is the same as `ConsumeBool()`\n\n```suggestion\n{\n    constexpr std::array wait_errnos{\n        EBADF,\n        EINTR,\n        EINVAL,\n    };\n    if (m_fuzzed_data",https://github.com/bitcoin/bitcoin/pull/21617#discussion_r608429338,608429338,src/test/fuzz/util.cpp
vasild,2021-04-07 08:05:25,"I like separating the interface from the implementation - it makes it more readable for consumers who want to use it without being bothered with implementation details (actually it is better to not see the implementation so that one does not accidentally start relying on undocumented implementation details).\n\nHere is an extra commit that moves the rest of the `FuzzedSock`'s implementation to `",https://github.com/bitcoin/bitcoin/pull/21617#discussion_r608431181,608431181,src/test/fuzz/util.h
MarcoFalke,2021-04-07 08:39:49,Good catch. Someone forgot to run clang-format,https://github.com/bitcoin/bitcoin/pull/21617#discussion_r608456113,608456113,src/test/fuzz/util.cpp
MarcoFalke,2021-04-07 08:41:00,"> !ConsumeBool() is the same as ConsumeBool()\n\nI had a slight preference to not invalidate the existing fuzz inputs by using the `!` operator on the bool\n\nMind taking the other changes to a new pr?",https://github.com/bitcoin/bitcoin/pull/21617#discussion_r608456958,608456958,src/test/fuzz/util.cpp
MarcoFalke,2021-04-07 08:41:42,Concept ACK on the commit. Please open a new pr and ping me for review.,https://github.com/bitcoin/bitcoin/pull/21617#discussion_r608457435,608457435,src/test/fuzz/util.h
