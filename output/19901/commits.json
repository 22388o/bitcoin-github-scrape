[
  {
    "sha": "b581452b0e5e64ec93e6fe857e1a3fa608208c84",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNTgxNDUyYjBlNWU2NGVjOTNlNmZlODU3ZTFhM2ZhNjA4MjA4Yzg0",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-09-06T13:34:07Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-09-06T13:56:25Z"
      },
      "message": "refactor: Pass mempool memory usage to GetCoinsCacheSizeState()",
      "tree": {
        "sha": "6f09c4a679942a959e31e7f26f54fe5ce5a14bf3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6f09c4a679942a959e31e7f26f54fe5ce5a14bf3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b581452b0e5e64ec93e6fe857e1a3fa608208c84",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl9U6okACgkQQQEIES5+\nqB/3dxAAm+iclAE7aaSTWrTfJsf4XZNSzlweOwZ37jyWLrIgNG1JK6D4uMtOPIQZ\nZmbtd6knQKS9rKbAatlhZAFixiFEq84/rHiZeq8YrJ8cbT+TNBBQ7GIjmjnQb5JH\n+K3o1NigTtfO00Ek80bui6SmKr9NmrQ+3gP0W65TupKzNqn54cM0lrHBW53r91nW\nyRXxJHYYIRNoixC6QPnKjnKwtLVTE889jBbj+RnXLpfJaDvPphpvJ74+tLkZ/tW/\nqg/loQtIxfQr39hbE7PaXeU6Fj7JGdi1S6Na6jjGMvsiRmZfLFIRA9ckDs6DRmah\nYLNcZCfEo9t7spqXug9Ao0gLmxca4yrKXRGlKOKt4ISakD88ovUfQV0NWtA9G7kY\n/GM7DmFeI38De08urgI+39LQaSUaMqF4WtSnNixzj/HrByYjniQRsYUUaMUjgW4d\numrVPheu7aOlfDbB8dAckXYWeL1jM3Pr9oes+IPhCGm0Y4/1zTdFV+2zqisUDV2A\nZX2lTVE2IFvE7LSUz83uOgchYybKTSAvS5NnpRsv580LSxjO0ziErlu4r6FN9zJn\nMi0s+Y0wBjaMLu782MRIwoCX5diNh3tPfcJEFVAhlHdjIApottGrunx0BZFz9rC4\nzUKLB9DnpiXCUuXGIFCIrwT0G1x+aEHEzqH6ItVzKiHnBKVLGOs=\n=Oo/c\n-----END PGP SIGNATURE-----",
        "payload": "tree 6f09c4a679942a959e31e7f26f54fe5ce5a14bf3\nparent 68d1f1698f50f9f3c848d988b6f89fe981cc662c\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1599399247 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1599400585 +0300\n\nrefactor: Pass mempool memory usage to GetCoinsCacheSizeState()\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b581452b0e5e64ec93e6fe857e1a3fa608208c84",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b581452b0e5e64ec93e6fe857e1a3fa608208c84",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b581452b0e5e64ec93e6fe857e1a3fa608208c84/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "68d1f1698f50f9f3c848d988b6f89fe981cc662c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/68d1f1698f50f9f3c848d988b6f89fe981cc662c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/68d1f1698f50f9f3c848d988b6f89fe981cc662c"
      }
    ],
    "stats": {
      "total": 49,
      "additions": 29,
      "deletions": 20
    },
    "files": [
      {
        "sha": "5388434fb4ffcd9d88676005ef395b9f87994c82",
        "filename": "src/test/validation_flush_tests.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 12,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b581452b0e5e64ec93e6fe857e1a3fa608208c84/src/test/validation_flush_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b581452b0e5e64ec93e6fe857e1a3fa608208c84/src/test/validation_flush_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_flush_tests.cpp?ref=b581452b0e5e64ec93e6fe857e1a3fa608208c84",
        "patch": "@@ -56,8 +56,9 @@ BOOST_AUTO_TEST_CASE(getcoinscachesizestate)\n     constexpr size_t MAX_COINS_CACHE_BYTES = 1024;\n \n     // Without any coins in the cache, we shouldn't need to flush.\n+    auto mempool_usage = tx_pool.DynamicMemoryUsage();\n     BOOST_CHECK_EQUAL(\n-        chainstate.GetCoinsCacheSizeState(&tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0),\n+        chainstate.GetCoinsCacheSizeState(mempool_usage, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0),\n         CoinsCacheSizeState::OK);\n \n     // If the initial memory allocations of cacheCoins don't match these common\n@@ -71,8 +72,9 @@ BOOST_AUTO_TEST_CASE(getcoinscachesizestate)\n             BOOST_CHECK_EQUAL(view.AccessCoin(res).DynamicMemoryUsage(), COIN_SIZE);\n         }\n \n+        const auto mempool_usage = tx_pool.DynamicMemoryUsage();\n         BOOST_CHECK_EQUAL(\n-            chainstate.GetCoinsCacheSizeState(&tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0),\n+            chainstate.GetCoinsCacheSizeState(mempool_usage, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0),\n             CoinsCacheSizeState::CRITICAL);\n \n         BOOST_TEST_MESSAGE(\"Exiting cache flush tests early due to unsupported arch\");\n@@ -92,35 +94,39 @@ BOOST_AUTO_TEST_CASE(getcoinscachesizestate)\n         COutPoint res = add_coin(view);\n         print_view_mem_usage(view);\n         BOOST_CHECK_EQUAL(view.AccessCoin(res).DynamicMemoryUsage(), COIN_SIZE);\n+        const auto mempool_usage = tx_pool.DynamicMemoryUsage();\n         BOOST_CHECK_EQUAL(\n-            chainstate.GetCoinsCacheSizeState(&tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0),\n+            chainstate.GetCoinsCacheSizeState(mempool_usage, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0),\n             CoinsCacheSizeState::OK);\n     }\n \n     // Adding some additional coins will push us over the edge to CRITICAL.\n     for (int i{0}; i < 4; ++i) {\n         add_coin(view);\n         print_view_mem_usage(view);\n-        if (chainstate.GetCoinsCacheSizeState(&tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0) ==\n+        const auto mempool_usage = tx_pool.DynamicMemoryUsage();\n+        if (chainstate.GetCoinsCacheSizeState(mempool_usage, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0) ==\n             CoinsCacheSizeState::CRITICAL) {\n             break;\n         }\n     }\n \n+    mempool_usage = tx_pool.DynamicMemoryUsage();\n     BOOST_CHECK_EQUAL(\n-        chainstate.GetCoinsCacheSizeState(&tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0),\n+        chainstate.GetCoinsCacheSizeState(mempool_usage, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0),\n         CoinsCacheSizeState::CRITICAL);\n \n     // Passing non-zero max mempool usage should allow us more headroom.\n     BOOST_CHECK_EQUAL(\n-        chainstate.GetCoinsCacheSizeState(&tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 1 << 10),\n+        chainstate.GetCoinsCacheSizeState(mempool_usage, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 1 << 10),\n         CoinsCacheSizeState::OK);\n \n     for (int i{0}; i < 3; ++i) {\n         add_coin(view);\n         print_view_mem_usage(view);\n+        const auto mempool_usage = tx_pool.DynamicMemoryUsage();\n         BOOST_CHECK_EQUAL(\n-            chainstate.GetCoinsCacheSizeState(&tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 1 << 10),\n+            chainstate.GetCoinsCacheSizeState(mempool_usage, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 1 << 10),\n             CoinsCacheSizeState::OK);\n     }\n \n@@ -135,32 +141,35 @@ BOOST_AUTO_TEST_CASE(getcoinscachesizestate)\n         BOOST_TEST_MESSAGE(\"CoinsTip usage percentage: \" << usage_percentage);\n         BOOST_CHECK(usage_percentage >= 0.9);\n         BOOST_CHECK(usage_percentage < 1);\n+        const auto mempool_usage = tx_pool.DynamicMemoryUsage();\n         BOOST_CHECK_EQUAL(\n-            chainstate.GetCoinsCacheSizeState(&tx_pool, MAX_COINS_CACHE_BYTES, 1 << 10),\n+            chainstate.GetCoinsCacheSizeState(mempool_usage, MAX_COINS_CACHE_BYTES, 1 << 10),\n             CoinsCacheSizeState::LARGE);\n     }\n \n     // Using the default max_* values permits way more coins to be added.\n     for (int i{0}; i < 1000; ++i) {\n         add_coin(view);\n+        const auto mempool_usage = tx_pool.DynamicMemoryUsage();\n         BOOST_CHECK_EQUAL(\n-            chainstate.GetCoinsCacheSizeState(&tx_pool),\n+            chainstate.GetCoinsCacheSizeState(mempool_usage),\n             CoinsCacheSizeState::OK);\n     }\n \n     // Flushing the view doesn't take us back to OK because cacheCoins has\n     // preallocated memory that doesn't get reclaimed even after flush.\n-\n+    mempool_usage = tx_pool.DynamicMemoryUsage();\n     BOOST_CHECK_EQUAL(\n-        chainstate.GetCoinsCacheSizeState(&tx_pool, MAX_COINS_CACHE_BYTES, 0),\n+        chainstate.GetCoinsCacheSizeState(mempool_usage, MAX_COINS_CACHE_BYTES, 0),\n         CoinsCacheSizeState::CRITICAL);\n \n     view.SetBestBlock(InsecureRand256());\n     BOOST_CHECK(view.Flush());\n     print_view_mem_usage(view);\n \n+    mempool_usage = tx_pool.DynamicMemoryUsage();\n     BOOST_CHECK_EQUAL(\n-        chainstate.GetCoinsCacheSizeState(&tx_pool, MAX_COINS_CACHE_BYTES, 0),\n+        chainstate.GetCoinsCacheSizeState(mempool_usage, MAX_COINS_CACHE_BYTES, 0),\n         CoinsCacheSizeState::CRITICAL);\n }\n "
      },
      {
        "sha": "0f55530d684c99189c0012a37e741a8844b472c2",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b581452b0e5e64ec93e6fe857e1a3fa608208c84/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b581452b0e5e64ec93e6fe857e1a3fa608208c84/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=b581452b0e5e64ec93e6fe857e1a3fa608208c84",
        "patch": "@@ -2230,23 +2230,22 @@ bool CChainState::ConnectBlock(const CBlock& block, BlockValidationState& state,\n     return true;\n }\n \n-CoinsCacheSizeState CChainState::GetCoinsCacheSizeState(const CTxMemPool* tx_pool)\n+CoinsCacheSizeState CChainState::GetCoinsCacheSizeState(int64_t mempool_usage)\n {\n     return this->GetCoinsCacheSizeState(\n-        tx_pool,\n+        mempool_usage,\n         m_coinstip_cache_size_bytes,\n         gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n }\n \n CoinsCacheSizeState CChainState::GetCoinsCacheSizeState(\n-    const CTxMemPool* tx_pool,\n+    int64_t mempool_usage,\n     size_t max_coins_cache_size_bytes,\n     size_t max_mempool_size_bytes)\n {\n-    const int64_t nMempoolUsage = tx_pool ? tx_pool->DynamicMemoryUsage() : 0;\n     int64_t cacheSize = CoinsTip().DynamicMemoryUsage();\n     int64_t nTotalSpace =\n-        max_coins_cache_size_bytes + std::max<int64_t>(max_mempool_size_bytes - nMempoolUsage, 0);\n+        max_coins_cache_size_bytes + std::max<int64_t>(max_mempool_size_bytes - mempool_usage, 0);\n \n     //! No need to periodic flush if at least this much space still available.\n     static constexpr int64_t MAX_BLOCK_COINSDB_USAGE_BYTES = 10 * 1024 * 1024;  // 10MB\n@@ -2282,7 +2281,8 @@ bool CChainState::FlushStateToDisk(\n     {\n         bool fFlushForPrune = false;\n         bool fDoFullFlush = false;\n-        CoinsCacheSizeState cache_state = GetCoinsCacheSizeState(&m_mempool);\n+        const auto mempool_usage = m_mempool.DynamicMemoryUsage();\n+        CoinsCacheSizeState cache_state = GetCoinsCacheSizeState(mempool_usage);\n         LOCK(cs_LastBlockFile);\n         if (fPruneMode && (fCheckForPruning || nManualPruneHeight > 0) && !fReindex) {\n             if (nManualPruneHeight > 0) {"
      },
      {
        "sha": "3d8c53f1ae88492ed18d923585f8b6836f3bf4ed",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b581452b0e5e64ec93e6fe857e1a3fa608208c84/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b581452b0e5e64ec93e6fe857e1a3fa608208c84/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=b581452b0e5e64ec93e6fe857e1a3fa608208c84",
        "patch": "@@ -677,11 +677,11 @@ class CChainState {\n     //! Dictates whether we need to flush the cache to disk or not.\n     //!\n     //! @return the state of the size of the coins cache.\n-    CoinsCacheSizeState GetCoinsCacheSizeState(const CTxMemPool* tx_pool)\n+    CoinsCacheSizeState GetCoinsCacheSizeState(int64_t mempool_usage)\n         EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n \n     CoinsCacheSizeState GetCoinsCacheSizeState(\n-        const CTxMemPool* tx_pool,\n+        int64_t mempool_usage,\n         size_t max_coins_cache_size_bytes,\n         size_t max_mempool_size_bytes) EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n "
      }
    ]
  },
  {
    "sha": "3e4188e298acdc0d2897c9bb6a9d93da93b4cf66",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZTQxODhlMjk4YWNkYzBkMjg5N2M5YmI2YTlkOTNkYTkzYjRjZjY2",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-09-06T16:19:36Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-09-06T16:51:56Z"
      },
      "message": "refactor: Pass mempool memory usage to FlushStateToDisk()",
      "tree": {
        "sha": "ce1687502d755e13fffc69b031102d297868cf27",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ce1687502d755e13fffc69b031102d297868cf27"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3e4188e298acdc0d2897c9bb6a9d93da93b4cf66",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl9VE6wACgkQQQEIES5+\nqB83KBAAj2tEUlGXQctxdS1VOqHzeYUA3JhbkVl0UKnjNH+FA1GkuuvJxtpxegSs\nt3as04Ts2NvGxupc9BL/IBpq+s2ZmnVXqehAGsvuS790Ha8kjRAxoUcuvR6J+FFH\nOhSWh3M5CVzfAsfQK8izrpfphvuLDjXabS3IDVHxIxRKyWRbGDjJhU/Vwt6RiZ8G\nSEYE0WZ+QX832ketuuwxhOMc2KqnC+JW4o/blBtbeMzfYgPza0HfqWqARatidkKn\nTk3u1G3K182DVwriKRAfKcLRFze9pVm79WKhYIhD4fJY5Km7FGOZ6i8wRavz2TDZ\n3R8+zuQDqDRgoT38TuxSKV3qm9ZJP8Wo7N8TwhCwDoDwiXFEUIhA+FyrxkBDOJDq\nK28v2y7x4iTRuXGdV3I/Q1gheL39ZryQ85bTP8mj/v9VfEJD2twnnX/qflGJjX4b\nXovxznf8k811F/0O2wenhCOFFibIgrC2Dc6aQ4RQuZAkJtLB8t9duQ38vhTyj/Kd\nk72TY4gJme8cJb0dxeg7ITIE7AD28hi/U2Fue4Ln2GPuV8luKKrsFZB6kgQiyixX\nl4h0aBmnV83AGqHYqw93Pvu8Mq3sEWmM3cOEGwF348KgmbYsI7jD77vGM09GcpJD\nSPbHevtmLHU6pkgV85FE390sUFwEdRAFrgrdpDB7GyrTAO910XY=\n=OBtN\n-----END PGP SIGNATURE-----",
        "payload": "tree ce1687502d755e13fffc69b031102d297868cf27\nparent b581452b0e5e64ec93e6fe857e1a3fa608208c84\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1599409176 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1599411116 +0300\n\nrefactor: Pass mempool memory usage to FlushStateToDisk()\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e4188e298acdc0d2897c9bb6a9d93da93b4cf66",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3e4188e298acdc0d2897c9bb6a9d93da93b4cf66",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e4188e298acdc0d2897c9bb6a9d93da93b4cf66/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b581452b0e5e64ec93e6fe857e1a3fa608208c84",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b581452b0e5e64ec93e6fe857e1a3fa608208c84",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b581452b0e5e64ec93e6fe857e1a3fa608208c84"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 23,
      "deletions": 13
    },
    "files": [
      {
        "sha": "c7735c52b0f879bd06e52341c82183f9ca72bc83",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 13,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e4188e298acdc0d2897c9bb6a9d93da93b4cf66/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e4188e298acdc0d2897c9bb6a9d93da93b4cf66/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=3e4188e298acdc0d2897c9bb6a9d93da93b4cf66",
        "patch": "@@ -1078,7 +1078,8 @@ static bool AcceptToMemoryPoolWithTime(const CChainParams& chainparams, CTxMemPo\n     }\n     // After we've (potentially) uncached entries, ensure our coins cache is still within its size limits\n     BlockValidationState state_dummy;\n-    ::ChainstateActive().FlushStateToDisk(chainparams, state_dummy, FlushStateMode::PERIODIC);\n+    const auto mempool_usage = pool.DynamicMemoryUsage();\n+    ::ChainstateActive().FlushStateToDisk(chainparams, state_dummy, mempool_usage, FlushStateMode::PERIODIC);\n     return res;\n }\n \n@@ -2261,9 +2262,15 @@ CoinsCacheSizeState CChainState::GetCoinsCacheSizeState(\n     return CoinsCacheSizeState::OK;\n }\n \n+int64_t CChainState::MempoolUsage() const\n+{\n+    return m_mempool.DynamicMemoryUsage();\n+}\n+\n bool CChainState::FlushStateToDisk(\n     const CChainParams& chainparams,\n     BlockValidationState &state,\n+    int64_t mempool_usage,\n     FlushStateMode mode,\n     int nManualPruneHeight)\n {\n@@ -2281,7 +2288,6 @@ bool CChainState::FlushStateToDisk(\n     {\n         bool fFlushForPrune = false;\n         bool fDoFullFlush = false;\n-        const auto mempool_usage = m_mempool.DynamicMemoryUsage();\n         CoinsCacheSizeState cache_state = GetCoinsCacheSizeState(mempool_usage);\n         LOCK(cs_LastBlockFile);\n         if (fPruneMode && (fCheckForPruning || nManualPruneHeight > 0) && !fReindex) {\n@@ -2395,7 +2401,7 @@ bool CChainState::FlushStateToDisk(\n void CChainState::ForceFlushStateToDisk() {\n     BlockValidationState state;\n     const CChainParams& chainparams = Params();\n-    if (!this->FlushStateToDisk(chainparams, state, FlushStateMode::ALWAYS)) {\n+    if (!this->FlushStateToDisk(chainparams, state, MempoolUsage(), FlushStateMode::ALWAYS)) {\n         LogPrintf(\"%s: failed to flush state (%s)\\n\", __func__, state.ToString());\n     }\n }\n@@ -2405,7 +2411,7 @@ void CChainState::PruneAndFlush() {\n     fCheckForPruning = true;\n     const CChainParams& chainparams = Params();\n \n-    if (!this->FlushStateToDisk(chainparams, state, FlushStateMode::NONE)) {\n+    if (!this->FlushStateToDisk(chainparams, state, MempoolUsage(), FlushStateMode::NONE)) {\n         LogPrintf(\"%s: failed to flush state (%s)\\n\", __func__, state.ToString());\n     }\n }\n@@ -2510,7 +2516,7 @@ bool CChainState::DisconnectTip(BlockValidationState& state, const CChainParams&\n     }\n     LogPrint(BCLog::BENCH, \"- Disconnect block: %.2fms\\n\", (GetTimeMicros() - nStart) * MILLI);\n     // Write the chain state to disk, if necessary.\n-    if (!FlushStateToDisk(chainparams, state, FlushStateMode::IF_NEEDED))\n+    if (!FlushStateToDisk(chainparams, state, MempoolUsage(), FlushStateMode::IF_NEEDED))\n         return false;\n \n     if (disconnectpool) {\n@@ -2627,7 +2633,7 @@ bool CChainState::ConnectTip(BlockValidationState& state, const CChainParams& ch\n     int64_t nTime4 = GetTimeMicros(); nTimeFlush += nTime4 - nTime3;\n     LogPrint(BCLog::BENCH, \"  - Flush: %.2fms [%.2fs (%.2fms/blk)]\\n\", (nTime4 - nTime3) * MILLI, nTimeFlush * MICRO, nTimeFlush * MILLI / nBlocksTotal);\n     // Write the chain state to disk, if necessary.\n-    if (!FlushStateToDisk(chainparams, state, FlushStateMode::IF_NEEDED))\n+    if (!FlushStateToDisk(chainparams, state, MempoolUsage(), FlushStateMode::IF_NEEDED))\n         return false;\n     int64_t nTime5 = GetTimeMicros(); nTimeChainState += nTime5 - nTime4;\n     LogPrint(BCLog::BENCH, \"  - Writing chainstate: %.2fms [%.2fs (%.2fms/blk)]\\n\", (nTime5 - nTime4) * MILLI, nTimeChainState * MICRO, nTimeChainState * MILLI / nBlocksTotal);\n@@ -2940,7 +2946,7 @@ bool CChainState::ActivateBestChain(BlockValidationState &state, const CChainPar\n     CheckBlockIndex(chainparams.GetConsensus());\n \n     // Write changes periodically to disk, after relay.\n-    if (!FlushStateToDisk(chainparams, state, FlushStateMode::PERIODIC)) {\n+    if (!FlushStateToDisk(chainparams, state, MempoolUsage(), FlushStateMode::PERIODIC)) {\n         return false;\n     }\n \n@@ -3830,7 +3836,7 @@ bool CChainState::AcceptBlock(const std::shared_ptr<const CBlock>& pblock, Block\n         return AbortNode(state, std::string(\"System error: \") + e.what());\n     }\n \n-    FlushStateToDisk(chainparams, state, FlushStateMode::NONE);\n+    FlushStateToDisk(chainparams, state, MempoolUsage(), FlushStateMode::NONE);\n \n     CheckBlockIndex(chainparams.GetConsensus());\n \n@@ -3985,8 +3991,9 @@ void PruneBlockFilesManual(int nManualPruneHeight)\n {\n     BlockValidationState state;\n     const CChainParams& chainparams = Params();\n+    const auto mempool_usage = ::ChainstateActive().MempoolUsage();\n     if (!::ChainstateActive().FlushStateToDisk(\n-            chainparams, state, FlushStateMode::NONE, nManualPruneHeight)) {\n+            chainparams, state, mempool_usage, FlushStateMode::NONE, nManualPruneHeight)) {\n         LogPrintf(\"%s: failed to flush state (%s)\\n\", __func__, state.ToString());\n     }\n }\n@@ -4561,7 +4568,7 @@ bool CChainState::RewindBlockIndex(const CChainParams& params)\n         LimitValidationInterfaceQueue();\n \n         // Occasionally flush state to disk.\n-        if (!FlushStateToDisk(params, state, FlushStateMode::PERIODIC)) {\n+        if (!FlushStateToDisk(params, state, MempoolUsage(), FlushStateMode::PERIODIC)) {\n             LogPrintf(\"RewindBlockIndex: unable to flush state to disk (%s)\\n\", state.ToString());\n             return false;\n         }\n@@ -4580,7 +4587,7 @@ bool CChainState::RewindBlockIndex(const CChainParams& params)\n             // and skip it here, we're about to -reindex-chainstate anyway, so\n             // it'll get called a bunch real soon.\n             BlockValidationState state;\n-            if (!FlushStateToDisk(params, state, FlushStateMode::ALWAYS)) {\n+            if (!FlushStateToDisk(params, state, MempoolUsage(), FlushStateMode::ALWAYS)) {\n                 LogPrintf(\"RewindBlockIndex: unable to flush state to disk (%s)\\n\", state.ToString());\n                 return false;\n             }\n@@ -5004,10 +5011,10 @@ bool CChainState::ResizeCoinsCaches(size_t coinstip_size, size_t coinsdb_size)\n \n     if (coinstip_size > old_coinstip_size) {\n         // Likely no need to flush if cache sizes have grown.\n-        ret = FlushStateToDisk(chainparams, state, FlushStateMode::IF_NEEDED);\n+        ret = FlushStateToDisk(chainparams, state, MempoolUsage(), FlushStateMode::IF_NEEDED);\n     } else {\n         // Otherwise, flush state to disk and deallocate the in-memory coins map.\n-        ret = FlushStateToDisk(chainparams, state, FlushStateMode::ALWAYS);\n+        ret = FlushStateToDisk(chainparams, state, MempoolUsage(), FlushStateMode::ALWAYS);\n         CoinsTip().ReallocateCache();\n     }\n     return ret;"
      },
      {
        "sha": "ec5e0c87d92d80dbca4d6a625e8eb6cf4073f3ae",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e4188e298acdc0d2897c9bb6a9d93da93b4cf66/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e4188e298acdc0d2897c9bb6a9d93da93b4cf66/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=3e4188e298acdc0d2897c9bb6a9d93da93b4cf66",
        "patch": "@@ -608,6 +608,7 @@ class CChainState {\n     bool FlushStateToDisk(\n         const CChainParams& chainparams,\n         BlockValidationState &state,\n+        int64_t mempool_usage,\n         FlushStateMode mode,\n         int nManualPruneHeight = 0);\n \n@@ -687,6 +688,8 @@ class CChainState {\n \n     std::string ToString() EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n \n+    int64_t MempoolUsage() const;\n+\n private:\n     bool ActivateBestChainStep(BlockValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexMostWork, const std::shared_ptr<const CBlock>& pblock, bool& fInvalidFound, ConnectTrace& connectTrace) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_mempool.cs);\n     bool ConnectTip(BlockValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexNew, const std::shared_ptr<const CBlock>& pblock, ConnectTrace& connectTrace, DisconnectedBlockTransactions& disconnectpool) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_mempool.cs);"
      }
    ]
  },
  {
    "sha": "04515fc0f7a8ef2c15d41878f7112539a27397d3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNDUxNWZjMGY3YThlZjJjMTVkNDE4NzhmNzExMjUzOWEyNzM5N2Qz",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-09-06T17:05:28Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-09-06T17:51:18Z"
      },
      "message": "refactor: CTxMemPool::DynamicMemoryUsage() requires CTxMemPool::cs lock\n\nNo change in behavior, some call sites already held the lock and a lock\nis added in the remaining sites.",
      "tree": {
        "sha": "07cb5be074172fa0d5f07feff6d77ac993cbde5a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/07cb5be074172fa0d5f07feff6d77ac993cbde5a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/04515fc0f7a8ef2c15d41878f7112539a27397d3",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl9VIZYACgkQQQEIES5+\nqB9tEA//TrQGk5bZhwtMtiDx3hs8bBkDtW9DEFbJGNJEfw6zxh5WWycS7yMiWHvM\nfaWdw5d3F/kSnLhytYsqBKI68P/oT6LcDRyO3WWuCqfxCbps971ACWQshOpvS7Ik\n2RGRpvSkddKGnUSoHZKKLtOAO5eMHU8Mbp79f3eWtrt9iPuJcg3uZaj8wFV1Bzjc\nBbQJH2oZj0Azo11dXdpStYO8Q3l07J2WA3XYtICvMMOmJOtcpG9hYJO7TrsxY35A\nOaj29SLZaNrp3l1pr4RTu04nqv5+Ux9lo3Lqi1ZMkcZX3GKFXyuz4LOqO5JOfyC5\nWSRka7NfRSlI7SuAusIG4F/LZNnlbRciUOqpn1/7dZ5wSvyqAt2DnCglQZYjGM+t\nUExaAMFQdRy4CYYRvrSwB7s6FaQ3ovllA3dyUKGe13NaFF2jcj11a0GgG4+q8XRK\nHwcFOVkGN000IexP4muhspSNgDmlAjncZJ7FPWQpOns9Qk06KhJz0Axix1rQklob\nprT4CavRHFr0M2Z3rbeJKNE66wq8Pz3iuHqSRlfZqSG+2TKHotEbnX981belBjpb\n0uQtQd3vExxWWv942t4vjrxaxbMF2fAIhjPWPGNqolqK1qxYi1y/xB/c6g3o8lpd\nOBFz1pMiLi0NnaYajEnwjDoxy9G2HUyK4vZsDfWj7GgZaJUsv24=\n=nql2\n-----END PGP SIGNATURE-----",
        "payload": "tree 07cb5be074172fa0d5f07feff6d77ac993cbde5a\nparent 3e4188e298acdc0d2897c9bb6a9d93da93b4cf66\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1599411928 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1599414678 +0300\n\nrefactor: CTxMemPool::DynamicMemoryUsage() requires CTxMemPool::cs lock\n\nNo change in behavior, some call sites already held the lock and a lock\nis added in the remaining sites.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/04515fc0f7a8ef2c15d41878f7112539a27397d3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/04515fc0f7a8ef2c15d41878f7112539a27397d3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/04515fc0f7a8ef2c15d41878f7112539a27397d3/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3e4188e298acdc0d2897c9bb6a9d93da93b4cf66",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e4188e298acdc0d2897c9bb6a9d93da93b4cf66",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3e4188e298acdc0d2897c9bb6a9d93da93b4cf66"
      }
    ],
    "stats": {
      "total": 50,
      "additions": 30,
      "deletions": 20
    },
    "files": [
      {
        "sha": "8ec8f041717d821a66dddfad6b3c308a7e74c323",
        "filename": "src/interfaces/node.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04515fc0f7a8ef2c15d41878f7112539a27397d3/src/interfaces/node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04515fc0f7a8ef2c15d41878f7112539a27397d3/src/interfaces/node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.cpp?ref=04515fc0f7a8ef2c15d41878f7112539a27397d3",
        "patch": "@@ -157,7 +157,7 @@ class NodeImpl : public Node\n     int64_t getTotalBytesRecv() override { return m_context->connman ? m_context->connman->GetTotalBytesRecv() : 0; }\n     int64_t getTotalBytesSent() override { return m_context->connman ? m_context->connman->GetTotalBytesSent() : 0; }\n     size_t getMempoolSize() override { return m_context->mempool ? m_context->mempool->size() : 0; }\n-    size_t getMempoolDynamicUsage() override { return m_context->mempool ? m_context->mempool->DynamicMemoryUsage() : 0; }\n+    size_t getMempoolDynamicUsage() override { return m_context->mempool ? WITH_LOCK(m_context->mempool->cs, return m_context->mempool->DynamicMemoryUsage()) : 0; }\n     bool getHeaderTip(int& height, int64_t& block_time) override\n     {\n         LOCK(::cs_main);"
      },
      {
        "sha": "3d176c38a0d422331f57e4f605f34f97f507968b",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04515fc0f7a8ef2c15d41878f7112539a27397d3/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04515fc0f7a8ef2c15d41878f7112539a27397d3/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=04515fc0f7a8ef2c15d41878f7112539a27397d3",
        "patch": "@@ -3033,7 +3033,7 @@ void PeerLogicValidation::ProcessMessage(CNode& pfrom, const std::string& msg_ty\n             LogPrint(BCLog::MEMPOOL, \"AcceptToMemoryPool: peer=%d: accepted %s (poolsz %u txn, %u kB)\\n\",\n                 pfrom.GetId(),\n                 tx.GetHash().ToString(),\n-                m_mempool.size(), m_mempool.DynamicMemoryUsage() / 1000);\n+                m_mempool.size(), WITH_LOCK(m_mempool.cs, return m_mempool.DynamicMemoryUsage()) / 1000);\n \n             // Recursively process any orphan transactions that depended on this one\n             ProcessOrphanTx(m_connman, m_mempool, pfrom.orphan_work_set, lRemovedTxn);"
      },
      {
        "sha": "633de406d0a754fac61566a630c68be50df690af",
        "filename": "src/test/validation_flush_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04515fc0f7a8ef2c15d41878f7112539a27397d3/src/test/validation_flush_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04515fc0f7a8ef2c15d41878f7112539a27397d3/src/test/validation_flush_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_flush_tests.cpp?ref=04515fc0f7a8ef2c15d41878f7112539a27397d3",
        "patch": "@@ -27,7 +27,7 @@ BOOST_AUTO_TEST_CASE(getcoinscachesizestate)\n \n     constexpr bool is_64_bit = sizeof(void*) == 8;\n \n-    LOCK(::cs_main);\n+    LOCK2(::cs_main, tx_pool.cs);\n     auto& view = chainstate.CoinsTip();\n \n     //! Create and add a Coin with DynamicMemoryUsage of 80 bytes to the given view."
      },
      {
        "sha": "c6007e9796c3881667c6c0170757d76a71e3acc3",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04515fc0f7a8ef2c15d41878f7112539a27397d3/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04515fc0f7a8ef2c15d41878f7112539a27397d3/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=04515fc0f7a8ef2c15d41878f7112539a27397d3",
        "patch": "@@ -917,8 +917,9 @@ bool CCoinsViewMemPool::GetCoin(const COutPoint &outpoint, Coin &coin) const {\n     return base->GetCoin(outpoint, coin);\n }\n \n-size_t CTxMemPool::DynamicMemoryUsage() const {\n-    LOCK(cs);\n+size_t CTxMemPool::DynamicMemoryUsage() const\n+{\n+    AssertLockHeld(cs);\n     // Estimate the overhead of mapTx to be 15 pointers + an allocation, as no exact formula for boost::multi_index_contained is implemented.\n     return memusage::MallocUsage(sizeof(CTxMemPoolEntry) + 15 * sizeof(void*)) * mapTx.size() + memusage::DynamicUsage(mapNextTx) + memusage::DynamicUsage(mapDeltas) + memusage::DynamicUsage(mapLinks) + memusage::DynamicUsage(vTxHashes) + cachedInnerUsage;\n }"
      },
      {
        "sha": "546f7944a9fb8c5b405c16c9e9e9dffbb9a6ffd9",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04515fc0f7a8ef2c15d41878f7112539a27397d3/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04515fc0f7a8ef2c15d41878f7112539a27397d3/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=04515fc0f7a8ef2c15d41878f7112539a27397d3",
        "patch": "@@ -736,7 +736,7 @@ class CTxMemPool\n     TxMempoolInfo info(const GenTxid& gtxid) const;\n     std::vector<TxMempoolInfo> infoAll() const;\n \n-    size_t DynamicMemoryUsage() const;\n+    size_t DynamicMemoryUsage() const EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n     /** Adds a transaction to the unbroadcast set */\n     void AddUnbroadcastTx(const uint256& txid, const uint256& wtxid) {"
      },
      {
        "sha": "ad951e306db534f5cf896fe475e222a2e7675dd5",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 13,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04515fc0f7a8ef2c15d41878f7112539a27397d3/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04515fc0f7a8ef2c15d41878f7112539a27397d3/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=04515fc0f7a8ef2c15d41878f7112539a27397d3",
        "patch": "@@ -1078,7 +1078,7 @@ static bool AcceptToMemoryPoolWithTime(const CChainParams& chainparams, CTxMemPo\n     }\n     // After we've (potentially) uncached entries, ensure our coins cache is still within its size limits\n     BlockValidationState state_dummy;\n-    const auto mempool_usage = pool.DynamicMemoryUsage();\n+    const auto mempool_usage = WITH_LOCK(pool.cs, return pool.DynamicMemoryUsage());\n     ::ChainstateActive().FlushStateToDisk(chainparams, state_dummy, mempool_usage, FlushStateMode::PERIODIC);\n     return res;\n }\n@@ -2262,8 +2262,16 @@ CoinsCacheSizeState CChainState::GetCoinsCacheSizeState(\n     return CoinsCacheSizeState::OK;\n }\n \n-int64_t CChainState::MempoolUsage() const\n+int64_t CChainState::LockedMempoolUsage() const\n {\n+    AssertLockHeld(m_mempool.cs);\n+    return m_mempool.DynamicMemoryUsage();\n+}\n+\n+int64_t CChainState::UnlockedMempoolUsage() const\n+{\n+    AssertLockNotHeld(m_mempool.cs);\n+    LOCK(m_mempool.cs);\n     return m_mempool.DynamicMemoryUsage();\n }\n \n@@ -2401,7 +2409,7 @@ bool CChainState::FlushStateToDisk(\n void CChainState::ForceFlushStateToDisk() {\n     BlockValidationState state;\n     const CChainParams& chainparams = Params();\n-    if (!this->FlushStateToDisk(chainparams, state, MempoolUsage(), FlushStateMode::ALWAYS)) {\n+    if (!FlushStateToDisk(chainparams, state, UnlockedMempoolUsage(), FlushStateMode::ALWAYS)) {\n         LogPrintf(\"%s: failed to flush state (%s)\\n\", __func__, state.ToString());\n     }\n }\n@@ -2411,7 +2419,7 @@ void CChainState::PruneAndFlush() {\n     fCheckForPruning = true;\n     const CChainParams& chainparams = Params();\n \n-    if (!this->FlushStateToDisk(chainparams, state, MempoolUsage(), FlushStateMode::NONE)) {\n+    if (!FlushStateToDisk(chainparams, state, UnlockedMempoolUsage(), FlushStateMode::NONE)) {\n         LogPrintf(\"%s: failed to flush state (%s)\\n\", __func__, state.ToString());\n     }\n }\n@@ -2516,7 +2524,7 @@ bool CChainState::DisconnectTip(BlockValidationState& state, const CChainParams&\n     }\n     LogPrint(BCLog::BENCH, \"- Disconnect block: %.2fms\\n\", (GetTimeMicros() - nStart) * MILLI);\n     // Write the chain state to disk, if necessary.\n-    if (!FlushStateToDisk(chainparams, state, MempoolUsage(), FlushStateMode::IF_NEEDED))\n+    if (!FlushStateToDisk(chainparams, state, LockedMempoolUsage(), FlushStateMode::IF_NEEDED))\n         return false;\n \n     if (disconnectpool) {\n@@ -2633,7 +2641,7 @@ bool CChainState::ConnectTip(BlockValidationState& state, const CChainParams& ch\n     int64_t nTime4 = GetTimeMicros(); nTimeFlush += nTime4 - nTime3;\n     LogPrint(BCLog::BENCH, \"  - Flush: %.2fms [%.2fs (%.2fms/blk)]\\n\", (nTime4 - nTime3) * MILLI, nTimeFlush * MICRO, nTimeFlush * MILLI / nBlocksTotal);\n     // Write the chain state to disk, if necessary.\n-    if (!FlushStateToDisk(chainparams, state, MempoolUsage(), FlushStateMode::IF_NEEDED))\n+    if (!FlushStateToDisk(chainparams, state, LockedMempoolUsage(), FlushStateMode::IF_NEEDED))\n         return false;\n     int64_t nTime5 = GetTimeMicros(); nTimeChainState += nTime5 - nTime4;\n     LogPrint(BCLog::BENCH, \"  - Writing chainstate: %.2fms [%.2fs (%.2fms/blk)]\\n\", (nTime5 - nTime4) * MILLI, nTimeChainState * MICRO, nTimeChainState * MILLI / nBlocksTotal);\n@@ -2946,7 +2954,7 @@ bool CChainState::ActivateBestChain(BlockValidationState &state, const CChainPar\n     CheckBlockIndex(chainparams.GetConsensus());\n \n     // Write changes periodically to disk, after relay.\n-    if (!FlushStateToDisk(chainparams, state, MempoolUsage(), FlushStateMode::PERIODIC)) {\n+    if (!FlushStateToDisk(chainparams, state, UnlockedMempoolUsage(), FlushStateMode::PERIODIC)) {\n         return false;\n     }\n \n@@ -3836,7 +3844,7 @@ bool CChainState::AcceptBlock(const std::shared_ptr<const CBlock>& pblock, Block\n         return AbortNode(state, std::string(\"System error: \") + e.what());\n     }\n \n-    FlushStateToDisk(chainparams, state, MempoolUsage(), FlushStateMode::NONE);\n+    FlushStateToDisk(chainparams, state, UnlockedMempoolUsage(), FlushStateMode::NONE);\n \n     CheckBlockIndex(chainparams.GetConsensus());\n \n@@ -3991,7 +3999,7 @@ void PruneBlockFilesManual(int nManualPruneHeight)\n {\n     BlockValidationState state;\n     const CChainParams& chainparams = Params();\n-    const auto mempool_usage = ::ChainstateActive().MempoolUsage();\n+    const auto mempool_usage = ::ChainstateActive().UnlockedMempoolUsage();\n     if (!::ChainstateActive().FlushStateToDisk(\n             chainparams, state, mempool_usage, FlushStateMode::NONE, nManualPruneHeight)) {\n         LogPrintf(\"%s: failed to flush state (%s)\\n\", __func__, state.ToString());\n@@ -4568,7 +4576,7 @@ bool CChainState::RewindBlockIndex(const CChainParams& params)\n         LimitValidationInterfaceQueue();\n \n         // Occasionally flush state to disk.\n-        if (!FlushStateToDisk(params, state, MempoolUsage(), FlushStateMode::PERIODIC)) {\n+        if (!FlushStateToDisk(params, state, UnlockedMempoolUsage(), FlushStateMode::PERIODIC)) {\n             LogPrintf(\"RewindBlockIndex: unable to flush state to disk (%s)\\n\", state.ToString());\n             return false;\n         }\n@@ -4587,7 +4595,7 @@ bool CChainState::RewindBlockIndex(const CChainParams& params)\n             // and skip it here, we're about to -reindex-chainstate anyway, so\n             // it'll get called a bunch real soon.\n             BlockValidationState state;\n-            if (!FlushStateToDisk(params, state, MempoolUsage(), FlushStateMode::ALWAYS)) {\n+            if (!FlushStateToDisk(params, state, UnlockedMempoolUsage(), FlushStateMode::ALWAYS)) {\n                 LogPrintf(\"RewindBlockIndex: unable to flush state to disk (%s)\\n\", state.ToString());\n                 return false;\n             }\n@@ -5011,10 +5019,10 @@ bool CChainState::ResizeCoinsCaches(size_t coinstip_size, size_t coinsdb_size)\n \n     if (coinstip_size > old_coinstip_size) {\n         // Likely no need to flush if cache sizes have grown.\n-        ret = FlushStateToDisk(chainparams, state, MempoolUsage(), FlushStateMode::IF_NEEDED);\n+        ret = FlushStateToDisk(chainparams, state, UnlockedMempoolUsage(), FlushStateMode::IF_NEEDED);\n     } else {\n         // Otherwise, flush state to disk and deallocate the in-memory coins map.\n-        ret = FlushStateToDisk(chainparams, state, MempoolUsage(), FlushStateMode::ALWAYS);\n+        ret = FlushStateToDisk(chainparams, state, UnlockedMempoolUsage(), FlushStateMode::ALWAYS);\n         CoinsTip().ReallocateCache();\n     }\n     return ret;"
      },
      {
        "sha": "52a0652887ab1119eacfde57f12d0a0a51aef696",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04515fc0f7a8ef2c15d41878f7112539a27397d3/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04515fc0f7a8ef2c15d41878f7112539a27397d3/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=04515fc0f7a8ef2c15d41878f7112539a27397d3",
        "patch": "@@ -688,7 +688,8 @@ class CChainState {\n \n     std::string ToString() EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n \n-    int64_t MempoolUsage() const;\n+    int64_t LockedMempoolUsage() const EXCLUSIVE_LOCKS_REQUIRED(m_mempool.cs);\n+    int64_t UnlockedMempoolUsage() const EXCLUSIVE_LOCKS_REQUIRED(!m_mempool.cs);\n \n private:\n     bool ActivateBestChainStep(BlockValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexMostWork, const std::shared_ptr<const CBlock>& pblock, bool& fInvalidFound, ConnectTrace& connectTrace) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_mempool.cs);"
      }
    ]
  }
]