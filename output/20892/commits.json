[
  {
    "sha": "611943e148366fc82c19bfed2a7d4a55e4164079",
    "node_id": "C_kwDOABII59oAKDYxMTk0M2UxNDgzNjZmYzgyYzE5YmZlZDJhN2Q0YTU1ZTQxNjQwNzk",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-01-09T01:10:45Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-18T17:25:12Z"
      },
      "message": "tests: Introduce BitcoinWalletTestFramework\n\nIn order to do both legacy wallet and descriptor wallet tests at a time,\nintroduce BitcoinWalletTestFramework which overrides\nBitcoinTestFramework.main to do that. If --descriptors or\n--legacy-wallet is provided, then only the test for that wallet type\nwill be run. If neither are provided, then the test is run twice, once\nfor each wallet type.",
      "tree": {
        "sha": "c8060e725917630bfe915af08835f75a9befb64c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c8060e725917630bfe915af08835f75a9befb64c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/611943e148366fc82c19bfed2a7d4a55e4164079",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/611943e148366fc82c19bfed2a7d4a55e4164079",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/611943e148366fc82c19bfed2a7d4a55e4164079",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/611943e148366fc82c19bfed2a7d4a55e4164079/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fe03f7a37fd0ef05149161f6b95a25493e1fe38f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe03f7a37fd0ef05149161f6b95a25493e1fe38f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fe03f7a37fd0ef05149161f6b95a25493e1fe38f"
      }
    ],
    "stats": {
      "total": 62,
      "additions": 59,
      "deletions": 3
    },
    "files": [
      {
        "sha": "e0d2f4c06dffee33e13ad55810adc0176b78356c",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 59,
        "deletions": 3,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/611943e148366fc82c19bfed2a7d4a55e4164079/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/611943e148366fc82c19bfed2a7d4a55e4164079/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=611943e148366fc82c19bfed2a7d4a55e4164079",
        "patch": "@@ -64,7 +64,7 @@ class BitcoinTestMetaClass(type):\n     those standards are violated, a ``TypeError`` is raised.\"\"\"\n \n     def __new__(cls, clsname, bases, dct):\n-        if not clsname == 'BitcoinTestFramework':\n+        if not clsname == 'BitcoinTestFramework' and not clsname == \"BitcoinWalletTestFramework\":\n             if not ('run_test' in dct and 'set_test_params' in dct):\n                 raise TypeError(\"BitcoinTestFramework subclasses must override \"\n                                 \"'run_test' and 'set_test_params'\")\n@@ -122,7 +122,7 @@ def __init__(self):\n             self.options.timeout_factor = 99999\n         self.rpc_timeout = int(self.rpc_timeout * self.options.timeout_factor) # optionally, increase timeout by a factor\n \n-    def main(self):\n+    def main(self, exit_on_done=True):\n         \"\"\"Main function. This should not be overridden by the subclass test scripts.\"\"\"\n \n         assert hasattr(self, \"num_nodes\"), \"Test must set self.num_nodes in set_test_params()\"\n@@ -153,7 +153,10 @@ def main(self):\n             self.success = TestStatus.FAILED\n         finally:\n             exit_code = self.shutdown()\n-            sys.exit(exit_code)\n+            if exit_on_done:\n+                sys.exit(exit_code)\n+            else:\n+                return self.success\n \n     def parse_args(self):\n         previous_releases_path = os.getenv(\"PREVIOUS_RELEASES_DIR\") or os.getcwd() + \"/releases\"\n@@ -211,6 +214,7 @@ def parse_args(self):\n         config.read_file(open(self.options.configfile))\n         self.config = config\n \n+        self.descriptors_unset = self.options.descriptors is None\n         if self.options.descriptors is None:\n             # Prefer BDB unless it isn't available\n             if self.is_bdb_compiled():\n@@ -836,6 +840,18 @@ def skip_if_no_wallet(self):\n         else:\n             self.skip_if_no_bdb()\n \n+    def skip_if_not_legacy_wallet(self):\n+        \"\"\"Skip the running test if we are not running in legacy wallet mode\"\"\"\n+        if self.options.descriptors:\n+            raise SkipTest(\"legacy wallet only test\")\n+        self.skip_if_no_bdb()\n+\n+    def skip_if_not_descriptor_wallet(self):\n+        \"\"\"Skip the running test if we are not running in descriptor wallet mode\"\"\"\n+        if not self.options.descriptors:\n+            raise SkipTest(\"descriptor wallet only test\")\n+        self.skip_if_no_sqlite()\n+\n     def skip_if_no_sqlite(self):\n         \"\"\"Skip the running test if sqlite has not been compiled.\"\"\"\n         if not self.is_sqlite_compiled():\n@@ -905,3 +921,43 @@ def is_bdb_compiled(self):\n     def is_syscall_sandbox_compiled(self):\n         \"\"\"Checks whether the syscall sandbox was compiled.\"\"\"\n         return self.config[\"components\"].getboolean(\"ENABLE_SYSCALL_SANDBOX\")\n+\n+\n+class BitcoinWalletTestFramework(BitcoinTestFramework):\n+    def main(self, exit_on_done=True):\n+        \"\"\"\n+        Override BitcoinTestFramework.main() so that both legacy\n+        wallet tests and descriptor wallet tests can be done.\n+        Here, exit_on_done is ignored. This parameter is in\n+        BitcoinTestFramework.main so that we can tell\n+        it to not exit and do the exit code handling here.\n+        \"\"\"\n+        exit_codes = [TestStatus.SKIPPED, TestStatus.SKIPPED]\n+        # Do the legacy wallet test if not --descriptors or not set\n+        if self.descriptors_unset or not self.options.descriptors:\n+            self.options.descriptors = False\n+            self.wallet_type = \"Legacy\"\n+            exit_codes[0] = super().main(False)\n+        # Do the descriptor wallet test if --descriptors or not set\n+        if self.descriptors_unset or self.options.descriptors:\n+            self.options.descriptors = True\n+            self.wallet_type = \"Descriptor\"\n+            self.default_wallet_name = \"default_wallet\" if self.options.descriptors else \"\"\n+            exit_codes[1] = super().main(False)\n+\n+        # Determine the exit code\n+        # If one failed, the test failed.\n+        # If both skipped, the test skipped.\n+        # If one passed and the other skipped, the test passed\n+        if any([ec == TestStatus.FAILED for ec in exit_codes]):\n+            sys.exit(TEST_EXIT_FAILED)\n+        if all([ec == TestStatus.SKIPPED for ec in exit_codes]):\n+            sys.exit(TEST_EXIT_SKIPPED)\n+        if any([ec == TestStatus.PASSED for ec in exit_codes]):\n+            sys.exit(TEST_EXIT_PASSED)\n+\n+        assert False, \"Unhandled exit scenario Legacy {}, descriptor {}\".format(exit_codes[0], exit_codes[1])\n+\n+    def setup(self):\n+        super().setup()\n+        self.log.info(\"Running {} wallet test\".format(self.wallet_type))"
      }
    ]
  },
  {
    "sha": "9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425",
    "node_id": "C_kwDOABII59oAKDlmYmU2MmEwMGZkMGM4MjYxNzMyMmMyYjhhMmJkM2M0N2Q2ZDc0MjU",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-01-08T21:32:09Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-18T17:25:33Z"
      },
      "message": "tests: use BitcoinWalletTestFramework in wallet type tests\n\nIn the tests which depend on and/or switch between the wallet types, use\nBitcoinWalletTestFramework so that they run the test with the correct\ntimes without any special command line invocation.",
      "tree": {
        "sha": "b7d5facba18490efc977248b479a3d44ad210be8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b7d5facba18490efc977248b479a3d44ad210be8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "611943e148366fc82c19bfed2a7d4a55e4164079",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/611943e148366fc82c19bfed2a7d4a55e4164079",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/611943e148366fc82c19bfed2a7d4a55e4164079"
      }
    ],
    "stats": {
      "total": 177,
      "additions": 92,
      "deletions": 85
    },
    "files": [
      {
        "sha": "129850f20ef1a0f562f83620e2f578e3c52c63a5",
        "filename": "test/functional/feature_backwards_compatibility.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425/test/functional/feature_backwards_compatibility.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425/test/functional/feature_backwards_compatibility.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_backwards_compatibility.py?ref=9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425",
        "patch": "@@ -22,7 +22,7 @@\n import shutil\n \n from test_framework.blocktools import COINBASE_MATURITY\n-from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.test_framework import BitcoinWalletTestFramework\n from test_framework.descriptors import descsum_create\n \n from test_framework.util import (\n@@ -31,7 +31,7 @@\n )\n \n \n-class BackwardsCompatibilityTest(BitcoinTestFramework):\n+class BackwardsCompatibilityTest(BitcoinWalletTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 6"
      },
      {
        "sha": "4f69be36050ae6c20978a19327b2b550145144e7",
        "filename": "test/functional/feature_nulldummy.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425/test/functional/feature_nulldummy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425/test/functional/feature_nulldummy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_nulldummy.py?ref=9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425",
        "patch": "@@ -26,7 +26,7 @@\n     OP_0,\n     OP_TRUE,\n )\n-from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.test_framework import BitcoinWalletTestFramework\n from test_framework.util import (\n     assert_equal,\n     assert_raises_rpc_error,\n@@ -43,7 +43,7 @@ def invalidate_nulldummy_tx(tx):\n     tx.rehash()\n \n \n-class NULLDUMMYTest(BitcoinTestFramework):\n+class NULLDUMMYTest(BitcoinWalletTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True"
      },
      {
        "sha": "70c0fefef9966edb57573285b4eec02a129c9c3f",
        "filename": "test/functional/feature_segwit.py",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425/test/functional/feature_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425/test/functional/feature_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_segwit.py?ref=9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425",
        "patch": "@@ -41,7 +41,7 @@\n     script_to_p2sh_script,\n     script_to_p2wsh_script,\n )\n-from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.test_framework import BitcoinWalletTestFramework\n from test_framework.util import (\n     assert_equal,\n     assert_greater_than_or_equal,\n@@ -77,7 +77,7 @@ def find_spendable_utxo(node, min_value):\n txs_mined = {}  # txindex from txid to blockhash\n \n \n-class SegWitTest(BitcoinTestFramework):\n+class SegWitTest(BitcoinWalletTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n@@ -105,6 +105,7 @@ def set_test_params(self):\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n+        self.skip_if_not_legacy_wallet()\n \n     def setup_network(self):\n         super().setup_network()"
      },
      {
        "sha": "d39e0695fde74c613061f60f70a66b56d3cd15eb",
        "filename": "test/functional/rpc_createmultisig.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425/test/functional/rpc_createmultisig.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425/test/functional/rpc_createmultisig.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_createmultisig.py?ref=9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425",
        "patch": "@@ -12,14 +12,14 @@\n from test_framework.authproxy import JSONRPCException\n from test_framework.descriptors import descsum_create, drop_origins\n from test_framework.key import ECPubKey, ECKey\n-from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.test_framework import BitcoinWalletTestFramework\n from test_framework.util import (\n     assert_raises_rpc_error,\n     assert_equal,\n )\n from test_framework.wallet_util import bytes_to_wif\n \n-class RpcCreateMultiSigTest(BitcoinTestFramework):\n+class RpcCreateMultiSigTest(BitcoinWalletTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3"
      },
      {
        "sha": "9d59460499d88d763ee70ee7a38663e163a4bb3f",
        "filename": "test/functional/rpc_fundrawtransaction.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425/test/functional/rpc_fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425/test/functional/rpc_fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_fundrawtransaction.py?ref=9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425",
        "patch": "@@ -9,7 +9,7 @@\n \n from test_framework.descriptors import descsum_create\n from test_framework.key import ECKey\n-from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.test_framework import BitcoinWalletTestFramework\n from test_framework.util import (\n     assert_approx,\n     assert_equal,\n@@ -29,7 +29,7 @@ def get_unspent(listunspent, amount):\n             return utx\n     raise AssertionError('Could not find unspent with amount={}'.format(amount))\n \n-class RawTransactionsTest(BitcoinTestFramework):\n+class RawTransactionsTest(BitcoinWalletTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 4\n         self.setup_clean_chain = True"
      },
      {
        "sha": "4ab35fa5d2fa907821a5ad70f9e83fb4f4db6692",
        "filename": "test/functional/rpc_psbt.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425/test/functional/rpc_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425/test/functional/rpc_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_psbt.py?ref=9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425",
        "patch": "@@ -10,7 +10,7 @@\n \n from test_framework.descriptors import descsum_create\n from test_framework.key import ECKey\n-from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.test_framework import BitcoinWalletTestFramework\n from test_framework.util import (\n     assert_approx,\n     assert_equal,\n@@ -26,7 +26,7 @@\n MAX_BIP125_RBF_SEQUENCE = 0xfffffffd\n \n # Create one-input, one-output, no-fee transaction:\n-class PSBTTest(BitcoinTestFramework):\n+class PSBTTest(BitcoinWalletTestFramework):\n \n     def set_test_params(self):\n         self.num_nodes = 3"
      },
      {
        "sha": "a135062e5847e0bca6ba674ccd3fb721398ff57b",
        "filename": "test/functional/rpc_rawtransaction.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425/test/functional/rpc_rawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425/test/functional/rpc_rawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_rawtransaction.py?ref=9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425",
        "patch": "@@ -20,7 +20,7 @@\n     CTransaction,\n     tx_from_hex,\n )\n-from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.test_framework import BitcoinWalletTestFramework\n from test_framework.util import (\n     assert_equal,\n     assert_raises_rpc_error,\n@@ -49,7 +49,7 @@ def items(self):\n         return self.x\n \n \n-class RawTransactionsTest(BitcoinTestFramework):\n+class RawTransactionsTest(BitcoinWalletTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 4"
      },
      {
        "sha": "351380326c7c08297990db3bfe6fa03cf720a459",
        "filename": "test/functional/rpc_signrawtransaction.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425/test/functional/rpc_signrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425/test/functional/rpc_signrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_signrawtransaction.py?ref=9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425",
        "patch": "@@ -12,7 +12,7 @@\n     script_to_p2wsh,\n )\n from test_framework.key import ECKey\n-from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.test_framework import BitcoinWalletTestFramework\n from test_framework.util import (\n     assert_equal,\n     assert_raises_rpc_error,\n@@ -42,7 +42,7 @@\n     getcontext,\n )\n \n-class SignRawTransactionsTest(BitcoinTestFramework):\n+class SignRawTransactionsTest(BitcoinWalletTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 2"
      },
      {
        "sha": "c884ea4e0f8c936d0153a40bbd710d5b77eb3a35",
        "filename": "test/functional/tool_wallet.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425/test/functional/tool_wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425/test/functional/tool_wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/tool_wallet.py?ref=9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425",
        "patch": "@@ -12,13 +12,13 @@\n \n from collections import OrderedDict\n \n-from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.test_framework import BitcoinWalletTestFramework\n from test_framework.util import assert_equal\n \n BUFFER_SIZE = 16 * 1024\n \n \n-class ToolWalletTest(BitcoinTestFramework):\n+class ToolWalletTest(BitcoinWalletTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True"
      },
      {
        "sha": "491b13de95beaf907d5879aa1c781a3e6d18670e",
        "filename": "test/functional/wallet_abandonconflict.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425/test/functional/wallet_abandonconflict.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425/test/functional/wallet_abandonconflict.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_abandonconflict.py?ref=9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425",
        "patch": "@@ -13,14 +13,14 @@\n from decimal import Decimal\n \n from test_framework.blocktools import COINBASE_MATURITY\n-from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.test_framework import BitcoinWalletTestFramework\n from test_framework.util import (\n     assert_equal,\n     assert_raises_rpc_error,\n )\n \n \n-class AbandonConflictTest(BitcoinTestFramework):\n+class AbandonConflictTest(BitcoinWalletTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n         self.extra_args = [[\"-minrelaytxfee=0.00001\"], []]"
      },
      {
        "sha": "248eb96644afc783cca7ec21e03f83fdac1fc9e3",
        "filename": "test/functional/wallet_address_types.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425/test/functional/wallet_address_types.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425/test/functional/wallet_address_types.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_address_types.py?ref=9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425",
        "patch": "@@ -54,7 +54,7 @@\n import itertools\n \n from test_framework.blocktools import COINBASE_MATURITY\n-from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.test_framework import BitcoinWalletTestFramework\n from test_framework.descriptors import (\n     descsum_create,\n     descsum_check,\n@@ -65,7 +65,7 @@\n     assert_raises_rpc_error,\n )\n \n-class AddressTypeTest(BitcoinTestFramework):\n+class AddressTypeTest(BitcoinWalletTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 6\n         self.extra_args = ["
      },
      {
        "sha": "8d6014578328607efd6cf184d2ae18af34cc7492",
        "filename": "test/functional/wallet_avoidreuse.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425/test/functional/wallet_avoidreuse.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425/test/functional/wallet_avoidreuse.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_avoidreuse.py?ref=9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425",
        "patch": "@@ -4,7 +4,7 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the avoid_reuse and setwalletflag features.\"\"\"\n \n-from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.test_framework import BitcoinWalletTestFramework\n from test_framework.util import (\n     assert_approx,\n     assert_equal,\n@@ -62,7 +62,7 @@ def assert_balances(node, mine, margin=0.001):\n     for k,v in mine.items():\n         assert_approx(got[k], v, margin)\n \n-class AvoidReuseTest(BitcoinTestFramework):\n+class AvoidReuseTest(BitcoinWalletTestFramework):\n \n     def set_test_params(self):\n         self.num_nodes = 2"
      },
      {
        "sha": "94307034ffca96e6b18c5d65f1900baabd2abce5",
        "filename": "test/functional/wallet_backup.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425/test/functional/wallet_backup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425/test/functional/wallet_backup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_backup.py?ref=9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425",
        "patch": "@@ -36,14 +36,14 @@\n import shutil\n \n from test_framework.blocktools import COINBASE_MATURITY\n-from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.test_framework import BitcoinWalletTestFramework\n from test_framework.util import (\n     assert_equal,\n     assert_raises_rpc_error,\n )\n \n \n-class WalletBackupTest(BitcoinTestFramework):\n+class WalletBackupTest(BitcoinWalletTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 4\n         self.setup_clean_chain = True"
      },
      {
        "sha": "4c497ec6e85f75845f2911f2ccf978017823609c",
        "filename": "test/functional/wallet_balance.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425/test/functional/wallet_balance.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425/test/functional/wallet_balance.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_balance.py?ref=9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425",
        "patch": "@@ -8,7 +8,7 @@\n \n from test_framework.address import ADDRESS_BCRT1_UNSPENDABLE as ADDRESS_WATCHONLY\n from test_framework.blocktools import COINBASE_MATURITY\n-from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.test_framework import BitcoinWalletTestFramework\n from test_framework.util import (\n     assert_equal,\n     assert_raises_rpc_error,\n@@ -45,7 +45,7 @@ def create_transactions(node, address, amt, fees):\n \n     return txs\n \n-class WalletTest(BitcoinTestFramework):\n+class WalletTest(BitcoinWalletTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n         self.setup_clean_chain = True"
      },
      {
        "sha": "7d25a89d1e407d361e90f879bf0fce20951bd712",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425",
        "patch": "@@ -7,7 +7,7 @@\n from itertools import product\n \n from test_framework.blocktools import COINBASE_MATURITY\n-from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.test_framework import BitcoinWalletTestFramework\n from test_framework.util import (\n     assert_array_result,\n     assert_equal,\n@@ -21,7 +21,7 @@\n OUT_OF_RANGE = \"Amount out of range\"\n \n \n-class WalletTest(BitcoinTestFramework):\n+class WalletTest(BitcoinWalletTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 4\n         self.extra_args = [["
      },
      {
        "sha": "14fbe10b3983e571dc71f602a61afbe0a6badc12",
        "filename": "test/functional/wallet_bumpfee.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425/test/functional/wallet_bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425/test/functional/wallet_bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_bumpfee.py?ref=9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425",
        "patch": "@@ -26,7 +26,7 @@\n     BIP125_SEQUENCE_NUMBER,\n     tx_from_hex,\n )\n-from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.test_framework import BitcoinWalletTestFramework\n from test_framework.util import (\n     assert_equal,\n     assert_greater_than,\n@@ -46,7 +46,7 @@\n TOO_HIGH     = 100000\n \n \n-class BumpFeeTest(BitcoinTestFramework):\n+class BumpFeeTest(BitcoinWalletTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n         self.setup_clean_chain = True"
      },
      {
        "sha": "c107a5f047e59b73a449b55256c4c64b49791017",
        "filename": "test/functional/wallet_coinbase_category.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425/test/functional/wallet_coinbase_category.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425/test/functional/wallet_coinbase_category.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_coinbase_category.py?ref=9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425",
        "patch": "@@ -7,12 +7,12 @@\n Tests listtransactions, listsinceblock, and gettransaction.\n \"\"\"\n \n-from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.test_framework import BitcoinWalletTestFramework\n from test_framework.util import (\n     assert_array_result\n )\n \n-class CoinbaseCategoryTest(BitcoinTestFramework):\n+class CoinbaseCategoryTest(BitcoinWalletTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n "
      },
      {
        "sha": "ae13944b95f14c1601b5b2d190c5f42ebed0b182",
        "filename": "test/functional/wallet_create_tx.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425/test/functional/wallet_create_tx.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425/test/functional/wallet_create_tx.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_create_tx.py?ref=9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425",
        "patch": "@@ -3,7 +3,7 @@\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.test_framework import BitcoinWalletTestFramework\n from test_framework.util import (\n     assert_equal,\n     assert_raises_rpc_error,\n@@ -13,7 +13,7 @@\n )\n \n \n-class CreateTxWalletTest(BitcoinTestFramework):\n+class CreateTxWalletTest(BitcoinWalletTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1"
      },
      {
        "sha": "033712ea10eea403289ce4ffa43dd6f525702be0",
        "filename": "test/functional/wallet_createwallet.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425/test/functional/wallet_createwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425/test/functional/wallet_createwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_createwallet.py?ref=9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425",
        "patch": "@@ -8,14 +8,14 @@\n from test_framework.address import key_to_p2wpkh\n from test_framework.descriptors import descsum_create\n from test_framework.key import ECKey\n-from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.test_framework import BitcoinWalletTestFramework\n from test_framework.util import (\n     assert_equal,\n     assert_raises_rpc_error,\n )\n from test_framework.wallet_util import bytes_to_wif, generate_wif_key\n \n-class CreateWalletTest(BitcoinTestFramework):\n+class CreateWalletTest(BitcoinWalletTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n "
      },
      {
        "sha": "b3652e42756a32528f2034611cc72b6ecdad0ed6",
        "filename": "test/functional/wallet_descriptor.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425/test/functional/wallet_descriptor.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425/test/functional/wallet_descriptor.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_descriptor.py?ref=9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425",
        "patch": "@@ -5,14 +5,14 @@\n \"\"\"Test descriptor wallet function.\"\"\"\n \n from test_framework.blocktools import COINBASE_MATURITY\n-from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.test_framework import BitcoinWalletTestFramework\n from test_framework.util import (\n     assert_equal,\n     assert_raises_rpc_error\n )\n \n \n-class WalletDescriptorTest(BitcoinTestFramework):\n+class WalletDescriptorTest(BitcoinWalletTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n@@ -21,7 +21,7 @@ def set_test_params(self):\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n-        self.skip_if_no_sqlite()\n+        self.skip_if_not_descriptor_wallet()\n \n     def run_test(self):\n         if self.is_bdb_compiled():"
      },
      {
        "sha": "65f95f6f9f3fd49e9a85f8d2c246d57514a57003",
        "filename": "test/functional/wallet_disable.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425/test/functional/wallet_disable.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425/test/functional/wallet_disable.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_disable.py?ref=9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425",
        "patch": "@@ -8,10 +8,10 @@\n - Test that it is not possible to mine to an invalid address.\n \"\"\"\n \n-from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.test_framework import BitcoinWalletTestFramework\n from test_framework.util import assert_raises_rpc_error\n \n-class DisableWalletTest (BitcoinTestFramework):\n+class DisableWalletTest (BitcoinWalletTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1"
      },
      {
        "sha": "4e5974022878b1206a25eb7b491c28fbec6b9582",
        "filename": "test/functional/wallet_dump.py",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425/test/functional/wallet_dump.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425/test/functional/wallet_dump.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_dump.py?ref=9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425",
        "patch": "@@ -7,7 +7,7 @@\n import os\n import time\n \n-from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.test_framework import BitcoinWalletTestFramework\n from test_framework.util import (\n     assert_equal,\n     assert_raises_rpc_error,\n@@ -92,14 +92,15 @@ def read_dump(file_name, addrs, script_addrs, hd_master_addr_old):\n         return found_comments, found_legacy_addr, found_p2sh_segwit_addr, found_bech32_addr, found_script_addr, found_addr_chg, found_addr_rsv, hd_master_addr_ret\n \n \n-class WalletDumpTest(BitcoinTestFramework):\n+class WalletDumpTest(BitcoinWalletTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n         self.extra_args = [[\"-keypool=90\", \"-addresstype=legacy\"]]\n         self.rpc_timeout = 120\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n+        self.skip_if_not_legacy_wallet()\n \n     def setup_network(self):\n         self.add_nodes(self.num_nodes, extra_args=self.extra_args)"
      },
      {
        "sha": "a9d3858e3d53f8ac3055fe1fa2835e2730f4395c",
        "filename": "test/functional/wallet_encryption.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425/test/functional/wallet_encryption.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425/test/functional/wallet_encryption.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_encryption.py?ref=9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425",
        "patch": "@@ -6,15 +6,15 @@\n \n import time\n \n-from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.test_framework import BitcoinWalletTestFramework\n from test_framework.util import (\n     assert_raises_rpc_error,\n     assert_greater_than,\n     assert_greater_than_or_equal,\n )\n \n \n-class WalletEncryptionTest(BitcoinTestFramework):\n+class WalletEncryptionTest(BitcoinWalletTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1"
      },
      {
        "sha": "a5b56df1ac8605dc686f3a3a823c19d7931d24fb",
        "filename": "test/functional/wallet_fallbackfee.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425/test/functional/wallet_fallbackfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425/test/functional/wallet_fallbackfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_fallbackfee.py?ref=9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425",
        "patch": "@@ -5,10 +5,10 @@\n \"\"\"Test wallet replace-by-fee capabilities in conjunction with the fallbackfee.\"\"\"\n \n from test_framework.blocktools import COINBASE_MATURITY\n-from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.test_framework import BitcoinWalletTestFramework\n from test_framework.util import assert_raises_rpc_error\n \n-class WalletRBFTest(BitcoinTestFramework):\n+class WalletRBFTest(BitcoinWalletTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True"
      },
      {
        "sha": "42ab90c228feba9297142c22bf1439c23ff400ce",
        "filename": "test/functional/wallet_groups.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425/test/functional/wallet_groups.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425/test/functional/wallet_groups.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_groups.py?ref=9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425",
        "patch": "@@ -5,7 +5,7 @@\n \"\"\"Test wallet group functionality.\"\"\"\n \n from test_framework.blocktools import COINBASE_MATURITY\n-from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.test_framework import BitcoinWalletTestFramework\n from test_framework.messages import (\n     tx_from_hex,\n )\n@@ -15,7 +15,7 @@\n )\n \n \n-class WalletGroupTest(BitcoinTestFramework):\n+class WalletGroupTest(BitcoinWalletTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 5"
      },
      {
        "sha": "3df88d5a7aee929ffb97b8399d077ae06f7ef200",
        "filename": "test/functional/wallet_hd.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425/test/functional/wallet_hd.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425/test/functional/wallet_hd.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_hd.py?ref=9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425",
        "patch": "@@ -8,14 +8,14 @@\n import shutil\n \n from test_framework.blocktools import COINBASE_MATURITY\n-from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.test_framework import BitcoinWalletTestFramework\n from test_framework.util import (\n     assert_equal,\n     assert_raises_rpc_error,\n )\n \n \n-class WalletHDTest(BitcoinTestFramework):\n+class WalletHDTest(BitcoinWalletTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 2"
      },
      {
        "sha": "334b108e2c3775cfa547dc4852501a64bce5b174",
        "filename": "test/functional/wallet_implicitsegwit.py",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425/test/functional/wallet_implicitsegwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425/test/functional/wallet_implicitsegwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_implicitsegwit.py?ref=9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425",
        "patch": "@@ -5,7 +5,7 @@\n \"\"\"Test the wallet implicit segwit feature.\"\"\"\n \n import test_framework.address as address\n-from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.test_framework import BitcoinWalletTestFramework\n \n # TODO: Might be nice to test p2pk here too\n address_types = ('legacy', 'bech32', 'p2sh-segwit')\n@@ -38,13 +38,14 @@ def check_implicit_transactions(implicit_keys, implicit_node):\n             b_address = key_to_address(pubkey, b)\n             assert(('receive', b_address) in tuple((tx['category'], tx['address']) for tx in txs))\n \n-class ImplicitSegwitTest(BitcoinTestFramework):\n+class ImplicitSegwitTest(BitcoinWalletTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n         self.supports_cli = False\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n+        self.skip_if_not_legacy_wallet()\n \n     def run_test(self):\n         self.log.info(\"Manipulating addresses and sending transactions to all variations\")"
      },
      {
        "sha": "f6c5202915123a7efb19e36d9a949d05fb61288e",
        "filename": "test/functional/wallet_import_rescan.py",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425/test/functional/wallet_import_rescan.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425/test/functional/wallet_import_rescan.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_import_rescan.py?ref=9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425",
        "patch": "@@ -19,7 +19,7 @@\n happened previously.\n \"\"\"\n \n-from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.test_framework import BitcoinWalletTestFramework\n from test_framework.address import AddressType\n from test_framework.util import (\n     assert_equal,\n@@ -140,14 +140,15 @@ def get_rand_amount():\n     return Decimal(str(round(r, 8)))\n \n \n-class ImportRescanTest(BitcoinTestFramework):\n+class ImportRescanTest(BitcoinWalletTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2 + len(IMPORT_NODES)\n         self.supports_cli = False\n         self.rpc_timeout = 120\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n+        self.skip_if_not_legacy_wallet()\n \n     def setup_network(self):\n         self.extra_args = [[] for _ in range(self.num_nodes)]"
      },
      {
        "sha": "10468865333010f3387d37d3e1b515b02239b5e3",
        "filename": "test/functional/wallet_import_with_label.py",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425/test/functional/wallet_import_with_label.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425/test/functional/wallet_import_with_label.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_import_with_label.py?ref=9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425",
        "patch": "@@ -10,17 +10,18 @@\n with and without a label.\n \"\"\"\n \n-from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.test_framework import BitcoinWalletTestFramework\n from test_framework.wallet_util import test_address\n \n \n-class ImportWithLabel(BitcoinTestFramework):\n+class ImportWithLabel(BitcoinWalletTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n         self.setup_clean_chain = True\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n+        self.skip_if_not_legacy_wallet()\n \n     def run_test(self):\n         \"\"\"Main test logic\"\"\""
      },
      {
        "sha": "4f7f9fbdcfcc27f0f2db406a5536b2a89f941515",
        "filename": "test/functional/wallet_importdescriptors.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425/test/functional/wallet_importdescriptors.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425/test/functional/wallet_importdescriptors.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_importdescriptors.py?ref=9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425",
        "patch": "@@ -17,7 +17,7 @@\n \n from test_framework.address import key_to_p2pkh\n from test_framework.blocktools import COINBASE_MATURITY\n-from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.test_framework import BitcoinWalletTestFramework\n from test_framework.descriptors import descsum_create\n from test_framework.util import (\n     assert_equal,\n@@ -29,7 +29,7 @@\n     test_address,\n )\n \n-class ImportDescriptorsTest(BitcoinTestFramework):\n+class ImportDescriptorsTest(BitcoinWalletTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n         self.extra_args = [[\"-addresstype=legacy\"],\n@@ -40,7 +40,7 @@ def set_test_params(self):\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n-        self.skip_if_no_sqlite()\n+        self.skip_if_not_descriptor_wallet()\n \n     def test_importdesc(self, req, success, error_code=None, error_message=None, warnings=None, wallet=None):\n         \"\"\"Run importdescriptors and assert success\"\"\""
      },
      {
        "sha": "d6116993f85ab007e5ba15f39685fe2c228bf916",
        "filename": "test/functional/wallet_importmulti.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425/test/functional/wallet_importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425/test/functional/wallet_importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_importmulti.py?ref=9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425",
        "patch": "@@ -42,6 +42,7 @@ def set_test_params(self):\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n+        self.skip_if_not_legacy_wallet()\n \n     def setup_network(self):\n         self.setup_nodes()"
      },
      {
        "sha": "de3b497cadebb78a4b0f39892f630d99065cfb4f",
        "filename": "test/functional/wallet_importprunedfunds.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425/test/functional/wallet_importprunedfunds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425/test/functional/wallet_importprunedfunds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_importprunedfunds.py?ref=9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425",
        "patch": "@@ -8,14 +8,14 @@\n from test_framework.blocktools import COINBASE_MATURITY\n from test_framework.address import key_to_p2wpkh\n from test_framework.key import ECKey\n-from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.test_framework import BitcoinWalletTestFramework\n from test_framework.util import (\n     assert_equal,\n     assert_raises_rpc_error,\n )\n from test_framework.wallet_util import bytes_to_wif\n \n-class ImportPrunedFundsTest(BitcoinTestFramework):\n+class ImportPrunedFundsTest(BitcoinWalletTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 2"
      },
      {
        "sha": "5cfa8027645d0fe163ddfda56d328a0897f86e1f",
        "filename": "test/functional/wallet_keypool.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425/test/functional/wallet_keypool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425/test/functional/wallet_keypool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_keypool.py?ref=9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425",
        "patch": "@@ -7,10 +7,10 @@\n import time\n from decimal import Decimal\n \n-from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.test_framework import BitcoinWalletTestFramework\n from test_framework.util import assert_equal, assert_raises_rpc_error\n \n-class KeyPoolTest(BitcoinTestFramework):\n+class KeyPoolTest(BitcoinWalletTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n "
      },
      {
        "sha": "341d96e0e5bb027cd03d681fc6ae7d9e7266daa1",
        "filename": "test/functional/wallet_keypool_topup.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425/test/functional/wallet_keypool_topup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425/test/functional/wallet_keypool_topup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_keypool_topup.py?ref=9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425",
        "patch": "@@ -14,13 +14,13 @@\n import shutil\n \n from test_framework.blocktools import COINBASE_MATURITY\n-from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.test_framework import BitcoinWalletTestFramework\n from test_framework.util import (\n     assert_equal,\n )\n \n \n-class KeypoolRestoreTest(BitcoinTestFramework):\n+class KeypoolRestoreTest(BitcoinWalletTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 4"
      },
      {
        "sha": "de4dedca2a6da827e6b1d4680262145b409cafb2",
        "filename": "test/functional/wallet_labels.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425/test/functional/wallet_labels.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425/test/functional/wallet_labels.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_labels.py?ref=9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425",
        "patch": "@@ -12,12 +12,12 @@\n from collections import defaultdict\n \n from test_framework.blocktools import COINBASE_MATURITY\n-from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.test_framework import BitcoinWalletTestFramework\n from test_framework.util import assert_equal, assert_raises_rpc_error\n from test_framework.wallet_util import test_address\n \n \n-class WalletLabelsTest(BitcoinTestFramework):\n+class WalletLabelsTest(BitcoinWalletTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1"
      },
      {
        "sha": "27774f2a34083905a96fcb8bec9159308557ac66",
        "filename": "test/functional/wallet_listdescriptors.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425/test/functional/wallet_listdescriptors.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425/test/functional/wallet_listdescriptors.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listdescriptors.py?ref=9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425",
        "patch": "@@ -7,20 +7,20 @@\n from test_framework.descriptors import (\n     descsum_create\n )\n-from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.test_framework import BitcoinWalletTestFramework\n from test_framework.util import (\n     assert_equal,\n     assert_raises_rpc_error,\n )\n \n \n-class ListDescriptorsTest(BitcoinTestFramework):\n+class ListDescriptorsTest(BitcoinWalletTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n-        self.skip_if_no_sqlite()\n+        self.skip_if_not_descriptor_wallet()\n \n     # do not create any wallet by default\n     def init_wallet(self, *, node):"
      },
      {
        "sha": "f53f37dfc6d5bddfe7cf13baea371a2616803ac7",
        "filename": "test/functional/wallet_listreceivedby.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425/test/functional/wallet_listreceivedby.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425/test/functional/wallet_listreceivedby.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listreceivedby.py?ref=9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425",
        "patch": "@@ -5,7 +5,7 @@\n \"\"\"Test the listreceivedbyaddress RPC.\"\"\"\n from decimal import Decimal\n \n-from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.test_framework import BitcoinWalletTestFramework\n from test_framework.util import (\n     assert_array_result,\n     assert_equal,\n@@ -14,7 +14,7 @@\n from test_framework.wallet_util import test_address\n \n \n-class ReceivedByTest(BitcoinTestFramework):\n+class ReceivedByTest(BitcoinWalletTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n "
      },
      {
        "sha": "686983231d14733be2a72a506b5aa3370dac0922",
        "filename": "test/functional/wallet_listsinceblock.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425/test/functional/wallet_listsinceblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425/test/functional/wallet_listsinceblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listsinceblock.py?ref=9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425",
        "patch": "@@ -7,7 +7,7 @@\n from test_framework.address import key_to_p2wpkh\n from test_framework.blocktools import COINBASE_MATURITY\n from test_framework.key import ECKey\n-from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.test_framework import BitcoinWalletTestFramework\n from test_framework.messages import BIP125_SEQUENCE_NUMBER\n from test_framework.util import (\n     assert_array_result,\n@@ -18,7 +18,7 @@\n \n from decimal import Decimal\n \n-class ListSinceBlockTest(BitcoinTestFramework):\n+class ListSinceBlockTest(BitcoinWalletTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 4\n         self.setup_clean_chain = True"
      },
      {
        "sha": "08e77bb817be19f50cfd7289809778d4ce590355",
        "filename": "test/functional/wallet_multiwallet.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425/test/functional/wallet_multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425/test/functional/wallet_multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_multiwallet.py?ref=9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425",
        "patch": "@@ -15,7 +15,7 @@\n \n from test_framework.authproxy import JSONRPCException\n from test_framework.blocktools import COINBASE_MATURITY\n-from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.test_framework import BitcoinWalletTestFramework\n from test_framework.test_node import ErrorMatch\n from test_framework.util import (\n     assert_equal,\n@@ -40,7 +40,7 @@ def test_load_unload(node, name):\n                 return\n \n \n-class MultiWalletTest(BitcoinTestFramework):\n+class MultiWalletTest(BitcoinWalletTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 2"
      },
      {
        "sha": "1717b40fa66653c18eaee57971a705caa19d7148",
        "filename": "test/functional/wallet_resendwallettransactions.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425/test/functional/wallet_resendwallettransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425/test/functional/wallet_resendwallettransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_resendwallettransactions.py?ref=9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425",
        "patch": "@@ -10,11 +10,11 @@\n     create_coinbase,\n )\n from test_framework.p2p import P2PTxInvStore\n-from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.test_framework import BitcoinWalletTestFramework\n from test_framework.util import assert_equal\n \n \n-class ResendWalletTransactionsTest(BitcoinTestFramework):\n+class ResendWalletTransactionsTest(BitcoinWalletTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n "
      },
      {
        "sha": "5082553bb2642a3b5f92db2cb7e6cb0ee7cedba1",
        "filename": "test/functional/wallet_txn_doublespend.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425/test/functional/wallet_txn_doublespend.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425/test/functional/wallet_txn_doublespend.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_txn_doublespend.py?ref=9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425",
        "patch": "@@ -5,15 +5,15 @@\n \"\"\"Test the wallet accounts properly when there is a double-spend conflict.\"\"\"\n from decimal import Decimal\n \n-from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.test_framework import BitcoinWalletTestFramework\n from test_framework.util import (\n     assert_equal,\n     find_output,\n     find_vout_for_address\n )\n \n \n-class TxnMallTest(BitcoinTestFramework):\n+class TxnMallTest(BitcoinWalletTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 3\n         self.supports_cli = False"
      },
      {
        "sha": "94168e6dd394b2770cf748a78b5d310c1cb81084",
        "filename": "test/functional/wallet_watchonly.py",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425/test/functional/wallet_watchonly.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425/test/functional/wallet_watchonly.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_watchonly.py?ref=9fbe62a00fd0c82617322c2b8a2bd3c47d6d7425",
        "patch": "@@ -6,19 +6,20 @@\n \"\"\"\n \n from test_framework.blocktools import COINBASE_MATURITY\n-from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.test_framework import BitcoinWalletTestFramework\n from test_framework.util import (\n     assert_equal,\n     assert_raises_rpc_error\n )\n \n \n-class CreateWalletWatchonlyTest(BitcoinTestFramework):\n+class CreateWalletWatchonlyTest(BitcoinWalletTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n+        self.skip_if_not_legacy_wallet()\n \n     def run_test(self):\n         node = self.nodes[0]"
      }
    ]
  }
]