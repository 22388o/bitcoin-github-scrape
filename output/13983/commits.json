[
  {
    "sha": "fa6ab8ada14dd265e224496440ab0b5d99dfd0ef",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTZhYjhhZGExNGRkMjY1ZTIyNDQ5NjQ0MGFiMGI1ZDk5ZGZkMGVm",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-08-15T17:54:36Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-08-15T18:09:35Z"
      },
      "message": "rpc: Return more specific reject reason for submitblock",
      "tree": {
        "sha": "c4403a84e4fae58c4f66af2db93e82ed019db7d3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c4403a84e4fae58c4f66af2db93e82ed019db7d3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa6ab8ada14dd265e224496440ab0b5d99dfd0ef",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJbdGxfAAoJEM4rdWl+aaVIAr0MAM1tC73FfLqJJOY0XqUqrgt2\nrhaSJLmLeZJ6c3iPVCGtdp6Y9RDr6gtG4EHVpJRdILDjZGEHYyKevVp7i3pUpsPn\n7Tim9PNHorJu5rEQBICYKeMA+SigF2fdYf0Kmm/+692z0FDX0PxSJEUyYoYhWfw3\nlik64w06BM+YjxR6LsQhGZ+BWGEcqBS4P6iM09pv702ROKEZXmx9cU77sZmxHg87\nR9BvooJ4CKiivtUrgf57QF2M7jCBZpUJpBBogrHxfkhAvQbFFWE/DBpMjizzMLeI\n9ZYOC/Xy0KqmyPKIsXlVcR3I01T7O0j+tcdPsoqDkpaU6rACFkvSXiKwOtthcMqL\nULCYrf/pwAKn6UYT+R2mtZnT/riGaCEayCv2nVnaGPDQKLJiMVXJYTSVeuChIXo3\nbjdZvp8KPfsUiHVDPMLp9hTuIeVek8bRpy6vOapd5Tn6hZtgmTrTGtOipCou/2Ev\n7s2GvG1/FAHzDFcw2eV330vi4I3auV2mdJZfVcIsRQ==\n=5qBU\n-----END PGP SIGNATURE-----",
        "payload": "tree c4403a84e4fae58c4f66af2db93e82ed019db7d3\nparent b5591ca0b053623f0d96423b05ad809115a0bdef\nauthor MarcoFalke <falke.marco@gmail.com> 1534355676 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1534356575 -0400\n\nrpc: Return more specific reject reason for submitblock\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa6ab8ada14dd265e224496440ab0b5d99dfd0ef",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa6ab8ada14dd265e224496440ab0b5d99dfd0ef",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa6ab8ada14dd265e224496440ab0b5d99dfd0ef/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b5591ca0b053623f0d96423b05ad809115a0bdef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b5591ca0b053623f0d96423b05ad809115a0bdef",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b5591ca0b053623f0d96423b05ad809115a0bdef"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 20,
      "deletions": 7
    },
    "files": [
      {
        "sha": "8365f5ed420f3fc3ecf0539c632c14501dbbb3b9",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa6ab8ada14dd265e224496440ab0b5d99dfd0ef/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa6ab8ada14dd265e224496440ab0b5d99dfd0ef/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=fa6ab8ada14dd265e224496440ab0b5d99dfd0ef",
        "patch": "@@ -750,11 +750,7 @@ static UniValue submitblock(const JSONRPCRequest& request)\n     RegisterValidationInterface(&sc);\n     bool accepted = ProcessNewBlock(Params(), blockptr, /* fForceProcessing */ true, /* fNewBlock */ &new_block);\n     UnregisterValidationInterface(&sc);\n-    if (!new_block) {\n-        if (!accepted) {\n-            // TODO Maybe pass down fNewBlock to AcceptBlockHeader, so it is properly set to true in this case?\n-            return \"invalid\";\n-        }\n+    if (!new_block && accepted) {\n         return \"duplicate\";\n     }\n     if (!sc.found) {"
      },
      {
        "sha": "ddf760c2836e963cebd3fc42fd33e193468429df",
        "filename": "test/functional/mining_basic.py",
        "status": "modified",
        "additions": 19,
        "deletions": 2,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa6ab8ada14dd265e224496440ab0b5d99dfd0ef/test/functional/mining_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa6ab8ada14dd265e224496440ab0b5d99dfd0ef/test/functional/mining_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining_basic.py?ref=fa6ab8ada14dd265e224496440ab0b5d99dfd0ef",
        "patch": "@@ -41,6 +41,12 @@ def set_test_params(self):\n     def run_test(self):\n         node = self.nodes[0]\n \n+        def assert_submitblock(block, result_str_1, result_str_2=None):\n+            block.solve()\n+            result_str_2 = result_str_2 or 'duplicate-invalid'\n+            assert_equal(result_str_1, node.submitblock(hexdata=b2x(block.serialize())))\n+            assert_equal(result_str_2, node.submitblock(hexdata=b2x(block.serialize())))\n+\n         self.log.info('getmininginfo')\n         mining_info = node.getmininginfo()\n         assert_equal(mining_info['blocks'], 200)\n@@ -93,6 +99,7 @@ def run_test(self):\n         bad_block = copy.deepcopy(block)\n         bad_block.vtx.append(bad_block.vtx[0])\n         assert_template(node, bad_block, 'bad-txns-duplicate')\n+        assert_submitblock(bad_block, 'bad-txns-duplicate', 'bad-txns-duplicate')\n \n         self.log.info(\"getblocktemplate: Test invalid transaction\")\n         bad_block = copy.deepcopy(block)\n@@ -101,12 +108,14 @@ def run_test(self):\n         bad_tx.rehash()\n         bad_block.vtx.append(bad_tx)\n         assert_template(node, bad_block, 'bad-txns-inputs-missingorspent')\n+        assert_submitblock(bad_block, 'bad-txns-inputs-missingorspent')\n \n         self.log.info(\"getblocktemplate: Test nonfinal transaction\")\n         bad_block = copy.deepcopy(block)\n         bad_block.vtx[0].nLockTime = 2 ** 32 - 1\n         bad_block.vtx[0].rehash()\n         assert_template(node, bad_block, 'bad-txns-nonfinal')\n+        assert_submitblock(bad_block, 'bad-txns-nonfinal')\n \n         self.log.info(\"getblocktemplate: Test bad tx count\")\n         # The tx count is immediately after the block header\n@@ -125,24 +134,29 @@ def run_test(self):\n         bad_block = copy.deepcopy(block)\n         bad_block.hashMerkleRoot += 1\n         assert_template(node, bad_block, 'bad-txnmrklroot', False)\n+        assert_submitblock(bad_block, 'bad-txnmrklroot', 'bad-txnmrklroot')\n \n         self.log.info(\"getblocktemplate: Test bad timestamps\")\n         bad_block = copy.deepcopy(block)\n         bad_block.nTime = 2 ** 31 - 1\n         assert_template(node, bad_block, 'time-too-new')\n+        assert_submitblock(bad_block, 'time-too-new', 'time-too-new')\n         bad_block.nTime = 0\n         assert_template(node, bad_block, 'time-too-old')\n+        assert_submitblock(bad_block, 'time-too-old', 'time-too-old')\n \n         self.log.info(\"getblocktemplate: Test not best block\")\n         bad_block = copy.deepcopy(block)\n         bad_block.hashPrevBlock = 123\n         assert_template(node, bad_block, 'inconclusive-not-best-prevblk')\n+        assert_submitblock(bad_block, 'prev-blk-not-found', 'prev-blk-not-found')\n \n         self.log.info('submitheader tests')\n         assert_raises_rpc_error(-22, 'Block header decode failed', lambda: node.submitheader(hexdata='xx' * 80))\n         assert_raises_rpc_error(-22, 'Block header decode failed', lambda: node.submitheader(hexdata='ff' * 78))\n         assert_raises_rpc_error(-25, 'Must submit previous header', lambda: node.submitheader(hexdata='ff' * 80))\n \n+        block.nTime += 1\n         block.solve()\n \n         def chain_tip(b_hash, *, status='headers-only', branchlen=1):\n@@ -161,7 +175,8 @@ def chain_tip(b_hash, *, status='headers-only', branchlen=1):\n         node.submitheader(hexdata=b2x(CBlockHeader(bad_block_root).serialize()))\n         assert chain_tip(bad_block_root.hash) in node.getchaintips()\n         # Should still reject invalid blocks, even if we have the header:\n-        assert_equal(node.submitblock(hexdata=b2x(bad_block_root.serialize())), 'invalid')\n+        assert_equal(node.submitblock(hexdata=b2x(bad_block_root.serialize())), 'bad-txnmrklroot')\n+        assert_equal(node.submitblock(hexdata=b2x(bad_block_root.serialize())), 'bad-txnmrklroot')\n         assert chain_tip(bad_block_root.hash) in node.getchaintips()\n         # We know the header for this invalid block, so should just return early without error:\n         node.submitheader(hexdata=b2x(CBlockHeader(bad_block_root).serialize()))\n@@ -172,7 +187,8 @@ def chain_tip(b_hash, *, status='headers-only', branchlen=1):\n         bad_block_lock.vtx[0].rehash()\n         bad_block_lock.hashMerkleRoot = bad_block_lock.calc_merkle_root()\n         bad_block_lock.solve()\n-        assert_equal(node.submitblock(hexdata=b2x(bad_block_lock.serialize())), 'invalid')\n+        assert_equal(node.submitblock(hexdata=b2x(bad_block_lock.serialize())), 'bad-txns-nonfinal')\n+        assert_equal(node.submitblock(hexdata=b2x(bad_block_lock.serialize())), 'duplicate-invalid')\n         # Build a \"good\" block on top of the submitted bad block\n         bad_block2 = copy.deepcopy(block)\n         bad_block2.hashPrevBlock = bad_block_lock.sha256\n@@ -198,6 +214,7 @@ def chain_tip(b_hash, *, status='headers-only', branchlen=1):\n         assert_raises_rpc_error(-25, 'bad-prevblk', lambda: node.submitheader(hexdata=b2x(CBlockHeader(bad_block2).serialize())))\n         node.submitheader(hexdata=b2x(CBlockHeader(block).serialize()))\n         node.submitheader(hexdata=b2x(CBlockHeader(bad_block_root).serialize()))\n+        assert_equal(node.submitblock(hexdata=b2x(block.serialize())), 'duplicate')  # valid\n \n \n if __name__ == '__main__':"
      }
    ]
  }
]