[
  {
    "sha": "08081e393b6d3249c19395f91537a7d824ec7333",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowODA4MWUzOTNiNmQzMjQ5YzE5Mzk1ZjkxNTM3YTdkODI0ZWM3MzMz",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2013-09-10T19:15:10Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2013-09-16T16:53:11Z"
      },
      "message": "included-tests: update gitian descriptors for hexdump dependency",
      "tree": {
        "sha": "cf6f49414ac919d4f1ee77dd5d55967eed18be7d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cf6f49414ac919d4f1ee77dd5d55967eed18be7d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/08081e393b6d3249c19395f91537a7d824ec7333",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/08081e393b6d3249c19395f91537a7d824ec7333",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/08081e393b6d3249c19395f91537a7d824ec7333",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/08081e393b6d3249c19395f91537a7d824ec7333/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a25cd0bfdfd8736fab3ebf672ce8cfa1577fdb08",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a25cd0bfdfd8736fab3ebf672ce8cfa1577fdb08",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a25cd0bfdfd8736fab3ebf672ce8cfa1577fdb08"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "87e05b4610837d14ad1dc30b717a27d15f07c6c6",
        "filename": "contrib/gitian-descriptors/gitian-win32.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/08081e393b6d3249c19395f91537a7d824ec7333/contrib/gitian-descriptors/gitian-win32.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/08081e393b6d3249c19395f91537a7d824ec7333/contrib/gitian-descriptors/gitian-win32.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-win32.yml?ref=08081e393b6d3249c19395f91537a7d824ec7333",
        "patch": "@@ -14,6 +14,7 @@ packages:\n - \"libtool\"\n - \"automake\"\n - \"pkg-config\"\n+- \"bsdmainutils\"\n \n reference_datetime: \"2013-06-01 00:00:00\"\n remotes:"
      },
      {
        "sha": "aeebc7efd42644591a0ad1343a39087fa2b2820f",
        "filename": "contrib/gitian-descriptors/gitian.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/08081e393b6d3249c19395f91537a7d824ec7333/contrib/gitian-descriptors/gitian.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/08081e393b6d3249c19395f91537a7d824ec7333/contrib/gitian-descriptors/gitian.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian.yml?ref=08081e393b6d3249c19395f91537a7d824ec7333",
        "patch": "@@ -23,6 +23,7 @@ packages:\n - \"libtool\"\n - \"automake\"\n - \"faketime\"\n+- \"bsdmainutils\"\n reference_datetime: \"2013-06-01 00:00:00\"\n remotes:\n - \"url\": \"https://github.com/bitcoin/bitcoin.git\""
      }
    ]
  },
  {
    "sha": "152e51c7af2624831cc4796e06bf3b72787cc85f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNTJlNTFjN2FmMjYyNDgzMWNjNDc5NmUwNmJmM2I3Mjc4N2NjODVm",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2013-09-10T19:18:09Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2013-09-16T16:53:11Z"
      },
      "message": "included-tests: generate binary data from test files for inclusion into test binaries\n\nThis change moves test data into the binaries rather than reading them from\nthe disk at runtime.\n\nAdvantages:\n- Tests become distributable\n- Cross-compile friendly. Build on one machine and execute in an arbitrary\n  location on another.\n- Easier testing for backports. Users can verify that tests pass without having\n  to track down corresponding test data.\n- More trustworthy test results and easier quality assurance as tests make\n  fewer assumptions about their environment.\n- Tests could theoretically run at client/daemon startup and exit on failure.\n\nDisadvantages:\n- Required 'hexdump' build-dependency. This is a standard bsd tool that should\n  be usable everywhere. It is likely already installed on all build-machines.\n- Tests can no longer be fudged after build by altering test-data.",
      "tree": {
        "sha": "d943cbc4159b2e88f0ee68907edf51b9f673d6a8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d943cbc4159b2e88f0ee68907edf51b9f673d6a8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/152e51c7af2624831cc4796e06bf3b72787cc85f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/152e51c7af2624831cc4796e06bf3b72787cc85f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/152e51c7af2624831cc4796e06bf3b72787cc85f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/152e51c7af2624831cc4796e06bf3b72787cc85f/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "08081e393b6d3249c19395f91537a7d824ec7333",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/08081e393b6d3249c19395f91537a7d824ec7333",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/08081e393b6d3249c19395f91537a7d824ec7333"
      }
    ],
    "stats": {
      "total": 144,
      "additions": 74,
      "deletions": 70
    },
    "files": [
      {
        "sha": "ba6842acaa08d772e355c41d50debb5bfe11ca37",
        "filename": ".gitignore",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/152e51c7af2624831cc4796e06bf3b72787cc85f/.gitignore",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/152e51c7af2624831cc4796e06bf3b72787cc85f/.gitignore",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.gitignore?ref=152e51c7af2624831cc4796e06bf3b72787cc85f",
        "patch": "@@ -57,6 +57,9 @@ src/qt/res/.dirstamp\n *.trs\n *.dmg\n \n+*.json.h\n+*.raw.h\n+\n # Compilation and Qt preprocessor part\n *.qm\n Makefile"
      },
      {
        "sha": "b47185dcfa8706bd22aa0b8406bc405cce1be7f6",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/152e51c7af2624831cc4796e06bf3b72787cc85f/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/152e51c7af2624831cc4796e06bf3b72787cc85f/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=152e51c7af2624831cc4796e06bf3b72787cc85f",
        "patch": "@@ -151,6 +151,7 @@ AC_PATH_PROGS([LUPDATE], [lupdate-qt4 lupdate4 lupdate],, $qt_bin_path:$PATH)\n AC_PATH_PROG([PROTOC], [protoc],, $protoc_bin_path:$PATH)\n AC_PATH_PROG(CCACHE,ccache)\n AC_PATH_PROG(XGETTEXT,xgettext)\n+AC_PATH_PROG(HEXDUMP,hexdump)\n PKG_PROG_PKG_CONFIG\n \n ## TODO: Remove these hard-coded paths and flags. They are here for the sake of\n@@ -353,6 +354,12 @@ AX_BOOST_THREAD\n AX_BOOST_CHRONO\n \n if test x$use_tests = xyes; then\n+\n+  if test x$HEXDUMP = x; then\n+    AC_MSG_ERROR(hexdump is required for tests)\n+  fi\n+\n+\n   AX_BOOST_UNIT_TEST_FRAMEWORK\n fi\n "
      },
      {
        "sha": "3b0f09674451bca79d3213ce305e5a25aad7e0e0",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/152e51c7af2624831cc4796e06bf3b72787cc85f/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/152e51c7af2624831cc4796e06bf3b72787cc85f/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=152e51c7af2624831cc4796e06bf3b72787cc85f",
        "patch": "@@ -1,6 +1,6 @@\n AM_CPPFLAGS =  $(INCLUDES) -I$(top_builddir)/src/obj \\\n   -I$(top_srcdir)/src/leveldb/include -I$(top_srcdir)/src/leveldb/helpers \\\n-  $(BOOST_INCLUDES)\n+  -I$(builddir) $(BOOST_INCLUDES)\n AM_LDFLAGS = $(PTHREAD_CFLAGS)\n \n noinst_LIBRARIES = libbitcoin.a"
      },
      {
        "sha": "d002e8ed6fbfeef81939236fe5e8f3051440fc5d",
        "filename": "src/Makefile.include",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/152e51c7af2624831cc4796e06bf3b72787cc85f/src/Makefile.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/152e51c7af2624831cc4796e06bf3b72787cc85f/src/Makefile.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.include?ref=152e51c7af2624831cc4796e06bf3b72787cc85f",
        "patch": "@@ -49,3 +49,19 @@ moc_%.cpp: %.h\n %.pb.cc %.pb.h: %.proto\n \ttest -f $(PROTOC) && $(PROTOC) --cpp_out=$(@D) --proto_path=$(abspath $(<D) $<)  || \\\n \t  echo error: could not build $@\n+\n+%.json.h: %.json\n+\t@$(MKDIR_P) $(@D)\n+\t@echo \"namespace json_tests{\" > $@\n+\t@echo \"static unsigned const char $(*F)[] = {\" >> $@\n+\t@$(HEXDUMP) -v -e '8/1 \"0x%02x, \"' -e '\"\\n\"' $< | $(SED) -e 's/0x  ,//g' >> $@\n+\t@echo \"};};\" >> $@\n+\t@echo \"Generated $@\"\n+\n+%.raw.h: %.raw\n+\t@$(MKDIR_P) $(@D)\n+\t@echo \"namespace alert_tests{\" > $@\n+\t@echo \"static unsigned const char $(*F)[] = {\" >> $@\n+\t@$(HEXDUMP) -v -e '8/1 \"0x%02x, \"' -e '\"\\n\"' $< | $(SED) -e 's/0x  ,//g' >> $@\n+\t@echo \"};};\" >> $@\n+\t@echo \"Generated $@\""
      },
      {
        "sha": "d193b729f8d4c8c2c8615f37a2ec0596ee0ce30c",
        "filename": "src/test/Makefile.am",
        "status": "modified",
        "additions": 15,
        "deletions": 12,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/152e51c7af2624831cc4796e06bf3b72787cc85f/src/test/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/152e51c7af2624831cc4796e06bf3b72787cc85f/src/test/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/Makefile.am?ref=152e51c7af2624831cc4796e06bf3b72787cc85f",
        "patch": "@@ -10,19 +10,20 @@ bin_PROGRAMS = test_bitcoin\n \n TESTS = test_bitcoin\n \n-TEST_DATA_DIR=$(srcdir)/data\n+JSON_TEST_FILES= data/script_valid.json \\\n+  data/base58_keys_valid.json data/sig_canonical.json \\\n+  data/sig_noncanonical.json \\\n+  data/base58_encode_decode.json \\\n+  data/base58_keys_invalid.json \\\n+  data/script_invalid.json data/tx_invalid.json \\\n+  data/tx_valid.json\n \n-TEST_DATA_FILES= $(TEST_DATA_DIR)/script_valid.json \\\n-  $(TEST_DATA_DIR)/base58_keys_valid.json $(TEST_DATA_DIR)/sig_canonical.json \\\n-  $(TEST_DATA_DIR)/sig_noncanonical.json \\\n-  $(TEST_DATA_DIR)/base58_encode_decode.json $(TEST_DATA_DIR)/alertTests \\\n-  $(TEST_DATA_DIR)/base58_keys_invalid.json \\\n-  $(TEST_DATA_DIR)/script_invalid.json $(TEST_DATA_DIR)/tx_invalid.json \\\n-  $(TEST_DATA_DIR)/tx_valid.json\n+RAW_TEST_FILES = data/alertTests.raw\n+\n+BUILT_SOURCES = $(JSON_TEST_FILES:.json=.json.h) $(RAW_TEST_FILES:.raw=.raw.h)\n \n # test_bitcoin binary #\n-test_bitcoin_CPPFLAGS = $(AM_CPPFLAGS) $(TESTDEFS) \\\n-  -DTEST_DATA_DIR=$(abs_srcdir)/data\n+test_bitcoin_CPPFLAGS = $(AM_CPPFLAGS) $(TESTDEFS)\n test_bitcoin_LDADD = $(LIBBITCOIN) $(LIBLEVELDB) $(LIBMEMENV) \\\n   $(BOOST_LIBS) $(BOOST_UNIT_TEST_FRAMEWORK_LIB)\n test_bitcoin_SOURCES = accounting_tests.cpp alert_tests.cpp \\\n@@ -33,6 +34,8 @@ test_bitcoin_SOURCES = accounting_tests.cpp alert_tests.cpp \\\n   netbase_tests.cpp pmt_tests.cpp rpc_tests.cpp script_P2SH_tests.cpp \\\n   script_tests.cpp serialize_tests.cpp sigopcount_tests.cpp test_bitcoin.cpp \\\n   transaction_tests.cpp uint160_tests.cpp uint256_tests.cpp util_tests.cpp \\\n-  wallet_tests.cpp $(TEST_DATA_FILES)\n+  wallet_tests.cpp $(JSON_TEST_FILES) $(RAW_TEST_FILES)\n+\n+nodist_test_bitcoin_SOURCES = $(BUILT_SOURCES)\n \n-CLEANFILES = *.gcda *.gcno\n+CLEANFILES = *.gcda *.gcno $(BUILT_SOURCES)"
      },
      {
        "sha": "cb941943f7de43e37c0da4a0a12713bc3d946b74",
        "filename": "src/test/alert_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 18,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/152e51c7af2624831cc4796e06bf3b72787cc85f/src/test/alert_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/152e51c7af2624831cc4796e06bf3b72787cc85f/src/test/alert_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/alert_tests.cpp?ref=152e51c7af2624831cc4796e06bf3b72787cc85f",
        "patch": "@@ -9,6 +9,7 @@\n #include \"alert.h\"\n #include \"serialize.h\"\n #include \"util.h\"\n+#include \"data/alertTests.raw.h\"\n \n #if 0\n //\n@@ -71,27 +72,13 @@ struct ReadAlerts\n {\n     ReadAlerts()\n     {\n-        std::string filename(\"alertTests\");\n-        namespace fs = boost::filesystem;\n-        fs::path testFile = fs::current_path() / \"data\" / filename;\n-#ifdef TEST_DATA_DIR\n-        if (!fs::exists(testFile))\n-        {\n-            testFile = fs::path(BOOST_PP_STRINGIZE(TEST_DATA_DIR)) / filename;\n-        }\n-#endif\n-        FILE* fp = fopen(testFile.string().c_str(), \"rb\");\n-        if (!fp) return;\n-\n-\n-        CAutoFile filein = CAutoFile(fp, SER_DISK, CLIENT_VERSION);\n-        if (!filein) return;\n-\n+        std::vector<unsigned char> vch(alert_tests::alertTests, alert_tests::alertTests + sizeof(alert_tests::alertTests));\n+        CDataStream stream(vch, SER_DISK, CLIENT_VERSION);\n         try {\n-            while (!feof(filein))\n+            while (stream.good())\n             {\n                 CAlert alert;\n-                filein >> alert;\n+                stream >> alert;\n                 alerts.push_back(alert);\n             }\n         }"
      },
      {
        "sha": "05675685bda087cdaca2b68965025685b2bcc704",
        "filename": "src/test/base58_tests.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 8,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/152e51c7af2624831cc4796e06bf3b72787cc85f/src/test/base58_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/152e51c7af2624831cc4796e06bf3b72787cc85f/src/test/base58_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base58_tests.cpp?ref=152e51c7af2624831cc4796e06bf3b72787cc85f",
        "patch": "@@ -2,20 +2,21 @@\n #include \"json/json_spirit_reader_template.h\"\n #include \"json/json_spirit_writer_template.h\"\n #include \"json/json_spirit_utils.h\"\n+#include \"data/base58_encode_decode.json.h\"\n+#include \"data/base58_keys_invalid.json.h\"\n+#include \"data/base58_keys_valid.json.h\"\n \n #include \"base58.h\"\n #include \"util.h\"\n-\n using namespace json_spirit;\n-extern Array read_json(const std::string& filename);\n+extern Array read_json(const std::string& jsondata);\n \n BOOST_AUTO_TEST_SUITE(base58_tests)\n \n // Goal: test low-level base58 encoding functionality\n BOOST_AUTO_TEST_CASE(base58_EncodeBase58)\n {\n-    Array tests = read_json(\"base58_encode_decode.json\");\n-\n+    Array tests = read_json(std::string(json_tests::base58_encode_decode, json_tests::base58_encode_decode + sizeof(json_tests::base58_encode_decode)));\n     BOOST_FOREACH(Value& tv, tests)\n     {\n         Array test = tv.get_array();\n@@ -36,7 +37,7 @@ BOOST_AUTO_TEST_CASE(base58_EncodeBase58)\n // Goal: test low-level base58 decoding functionality\n BOOST_AUTO_TEST_CASE(base58_DecodeBase58)\n {\n-    Array tests = read_json(\"base58_encode_decode.json\");\n+    Array tests = read_json(std::string(json_tests::base58_encode_decode, json_tests::base58_encode_decode + sizeof(json_tests::base58_encode_decode)));\n     std::vector<unsigned char> result;\n \n     BOOST_FOREACH(Value& tv, tests)\n@@ -104,7 +105,7 @@ class TestPayloadVisitor : public boost::static_visitor<bool>\n // Goal: check that parsed keys match test payload\n BOOST_AUTO_TEST_CASE(base58_keys_valid_parse)\n {\n-    Array tests = read_json(\"base58_keys_valid.json\");\n+    Array tests = read_json(std::string(json_tests::base58_keys_valid, json_tests::base58_keys_valid + sizeof(json_tests::base58_keys_valid)));\n     std::vector<unsigned char> result;\n     CBitcoinSecret secret;\n     CBitcoinAddress addr;\n@@ -163,7 +164,7 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_parse)\n // Goal: check that generated keys match test vectors\n BOOST_AUTO_TEST_CASE(base58_keys_valid_gen)\n {\n-    Array tests = read_json(\"base58_keys_valid.json\");\n+    Array tests = read_json(std::string(json_tests::base58_keys_valid, json_tests::base58_keys_valid + sizeof(json_tests::base58_keys_valid)));\n     std::vector<unsigned char> result;\n     BOOST_FOREACH(Value& tv, tests)\n     {\n@@ -231,7 +232,7 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_gen)\n // Goal: check that base58 parsing code is robust against a variety of corrupted data\n BOOST_AUTO_TEST_CASE(base58_keys_invalid)\n {\n-    Array tests = read_json(\"base58_keys_invalid.json\"); // Negative testcases\n+    Array tests = read_json(std::string(json_tests::base58_keys_invalid, json_tests::base58_keys_invalid + sizeof(json_tests::base58_keys_invalid))); // Negative testcases\n     std::vector<unsigned char> result;\n     CBitcoinSecret secret;\n     CBitcoinAddress addr;"
      },
      {
        "sha": "ec32ceb8a4b947405909e68d3f509c75f719ccd1",
        "filename": "src/test/canonical_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/152e51c7af2624831cc4796e06bf3b72787cc85f/src/test/canonical_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/152e51c7af2624831cc4796e06bf3b72787cc85f/src/test/canonical_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/canonical_tests.cpp?ref=152e51c7af2624831cc4796e06bf3b72787cc85f",
        "patch": "@@ -8,13 +8,15 @@\n #include \"key.h\"\n #include \"script.h\"\n #include \"util.h\"\n+#include \"data/sig_noncanonical.json.h\"\n+#include \"data/sig_canonical.json.h\"\n \n using namespace std;\n using namespace json_spirit;\n \n \n // In script_tests.cpp\n-extern Array read_json(const std::string& filename);\n+extern Array read_json(const std::string& jsondata);\n \n BOOST_AUTO_TEST_SUITE(canonical_tests)\n \n@@ -58,7 +60,7 @@ bool static IsCanonicalSignature_OpenSSL(const std::vector<unsigned char> &vchSi\n \n BOOST_AUTO_TEST_CASE(script_canon)\n {\n-    Array tests = read_json(\"sig_canonical.json\");\n+    Array tests = read_json(std::string(json_tests::sig_canonical, json_tests::sig_canonical + sizeof(json_tests::sig_canonical)));\n \n     BOOST_FOREACH(Value &tv, tests) {\n         string test = tv.get_str();\n@@ -72,7 +74,7 @@ BOOST_AUTO_TEST_CASE(script_canon)\n \n BOOST_AUTO_TEST_CASE(script_noncanon)\n {\n-    Array tests = read_json(\"sig_noncanonical.json\");\n+    Array tests = read_json(std::string(json_tests::sig_noncanonical, json_tests::sig_noncanonical + sizeof(json_tests::sig_noncanonical)));\n \n     BOOST_FOREACH(Value &tv, tests) {\n         string test = tv.get_str();"
      },
      {
        "sha": "7fc45289617e1c4b0e40f2244ffa3fab0f9849ce",
        "filename": "src/test/data/alertTests.raw",
        "status": "renamed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/152e51c7af2624831cc4796e06bf3b72787cc85f/src/test/data/alertTests.raw",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/152e51c7af2624831cc4796e06bf3b72787cc85f/src/test/data/alertTests.raw",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/alertTests.raw?ref=152e51c7af2624831cc4796e06bf3b72787cc85f",
        "previous_filename": "src/test/data/alertTests"
      },
      {
        "sha": "dfa5529b87e40dc171403dfcd6c734aa6d316744",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 25,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/152e51c7af2624831cc4796e06bf3b72787cc85f/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/152e51c7af2624831cc4796e06bf3b72787cc85f/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=152e51c7af2624831cc4796e06bf3b72787cc85f",
        "patch": "@@ -14,6 +14,8 @@\n \n #include \"main.h\"\n #include \"wallet.h\"\n+#include \"data/script_invalid.json.h\"\n+#include \"data/script_valid.json.h\"\n \n using namespace std;\n using namespace json_spirit;\n@@ -90,34 +92,15 @@ ParseScript(string s)\n }\n \n Array\n-read_json(const std::string& filename)\n+read_json(const std::string& jsondata)\n {\n-    namespace fs = boost::filesystem;\n-    fs::path testFile = fs::current_path() / \"data\" / filename;\n-\n-#ifdef TEST_DATA_DIR\n-    if (!fs::exists(testFile))\n-    {\n-        testFile = fs::path(BOOST_PP_STRINGIZE(TEST_DATA_DIR)) / filename;\n-    }\n-#endif\n-\n-    ifstream ifs(testFile.string().c_str(), ifstream::in);\n     Value v;\n-    if (!read_stream(ifs, v))\n-    {\n-        if (ifs.fail())\n-            BOOST_ERROR(\"Cound not find/open \" << filename);\n-        else\n-            BOOST_ERROR(\"JSON syntax error in \" << filename);\n-        return Array();\n-    }\n-    if (v.type() != array_type)\n+\n+    if (!read_string(jsondata, v) || v.type() != array_type)\n     {\n-        BOOST_ERROR(filename << \" does not contain a json array\");\n+        BOOST_ERROR(\"Parse error.\");\n         return Array();\n     }\n-\n     return v.get_array();\n }\n \n@@ -130,7 +113,7 @@ BOOST_AUTO_TEST_CASE(script_valid)\n     // Inner arrays are [ \"scriptSig\", \"scriptPubKey\" ]\n     // ... where scriptSig and scriptPubKey are stringified\n     // scripts.\n-    Array tests = read_json(\"script_valid.json\");\n+    Array tests = read_json(std::string(json_tests::script_valid, json_tests::script_valid + sizeof(json_tests::script_valid)));\n \n     BOOST_FOREACH(Value& tv, tests)\n     {\n@@ -154,7 +137,7 @@ BOOST_AUTO_TEST_CASE(script_valid)\n BOOST_AUTO_TEST_CASE(script_invalid)\n {\n     // Scripts that should evaluate as invalid\n-    Array tests = read_json(\"script_invalid.json\");\n+    Array tests = read_json(std::string(json_tests::script_invalid, json_tests::script_invalid + sizeof(json_tests::script_invalid)));\n \n     BOOST_FOREACH(Value& tv, tests)\n     {"
      },
      {
        "sha": "416b93ab33e6ee99f13beb32fe8ba4483b71e990",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/152e51c7af2624831cc4796e06bf3b72787cc85f/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/152e51c7af2624831cc4796e06bf3b72787cc85f/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=152e51c7af2624831cc4796e06bf3b72787cc85f",
        "patch": "@@ -5,12 +5,14 @@\n \n #include \"main.h\"\n #include \"wallet.h\"\n+#include \"data/tx_invalid.json.h\"\n+#include \"data/tx_valid.json.h\"\n \n using namespace std;\n using namespace json_spirit;\n \n // In script_tests.cpp\n-extern Array read_json(const std::string& filename);\n+extern Array read_json(const std::string& jsondata);\n extern CScript ParseScript(string s);\n \n BOOST_AUTO_TEST_SUITE(transaction_tests)\n@@ -22,7 +24,7 @@ BOOST_AUTO_TEST_CASE(tx_valid)\n     // Inner arrays are either [ \"comment\" ]\n     // or [[[prevout hash, prevout index, prevout scriptPubKey], [input 2], ...],\"], serializedTransaction, enforceP2SH\n     // ... where all scripts are stringified scripts.\n-    Array tests = read_json(\"tx_valid.json\");\n+    Array tests = read_json(std::string(json_tests::tx_valid, json_tests::tx_valid + sizeof(json_tests::tx_valid)));\n \n     BOOST_FOREACH(Value& tv, tests)\n     {\n@@ -91,7 +93,7 @@ BOOST_AUTO_TEST_CASE(tx_invalid)\n     // Inner arrays are either [ \"comment\" ]\n     // or [[[prevout hash, prevout index, prevout scriptPubKey], [input 2], ...],\"], serializedTransaction, enforceP2SH\n     // ... where all scripts are stringified scripts.\n-    Array tests = read_json(\"tx_invalid.json\");\n+    Array tests = read_json(std::string(json_tests::tx_invalid, json_tests::tx_invalid + sizeof(json_tests::tx_invalid)));\n \n     BOOST_FOREACH(Value& tv, tests)\n     {"
      }
    ]
  }
]