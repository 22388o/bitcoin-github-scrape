[
  {
    "sha": "10d3ae102afb89b3f50cd27f9ee657e5a542eb1b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMGQzYWUxMDJhZmI4OWIzZjUwY2QyN2Y5ZWU2NTdlNWE1NDJlYjFi",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-04-01T12:35:57Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-04-02T06:13:49Z"
      },
      "message": "devtools: Auto-set branch to merge to in github-merge\n\nAs we are already using the API to retrieve the pull request\ntitle, also retrieve the base branch.\n\nThis makes sure that pull requests for 0.12 automatically end up in\n0.12, and pull requests for master automatically end up in master,\nand so on.\n\nIt is still possible to override the branch from the command line\nor using the `githubmerge.branch` git option.",
      "tree": {
        "sha": "3120899139cc406fda2fd2a77d81a7384aa12e84",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3120899139cc406fda2fd2a77d81a7384aa12e84"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/10d3ae102afb89b3f50cd27f9ee657e5a542eb1b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10d3ae102afb89b3f50cd27f9ee657e5a542eb1b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/10d3ae102afb89b3f50cd27f9ee657e5a542eb1b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10d3ae102afb89b3f50cd27f9ee657e5a542eb1b/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "28ad4d9fc2be102786a8c6c32ebecb466b2a03dd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28ad4d9fc2be102786a8c6c32ebecb466b2a03dd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/28ad4d9fc2be102786a8c6c32ebecb466b2a03dd"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 22,
      "deletions": 12
    },
    "files": [
      {
        "sha": "f82362fe417e3f2e7ed46282420c823414b8c417",
        "filename": "contrib/devtools/github-merge.py",
        "status": "modified",
        "additions": 22,
        "deletions": 12,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10d3ae102afb89b3f50cd27f9ee657e5a542eb1b/contrib/devtools/github-merge.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10d3ae102afb89b3f50cd27f9ee657e5a542eb1b/contrib/devtools/github-merge.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/github-merge.py?ref=10d3ae102afb89b3f50cd27f9ee657e5a542eb1b",
        "patch": "@@ -47,19 +47,19 @@ def git_config_get(option, default=None):\n     except subprocess.CalledProcessError as e:\n         return default\n \n-def retrieve_pr_title(repo,pull):\n+def retrieve_pr_info(repo,pull):\n     '''\n-    Retrieve pull request title from github.\n+    Retrieve pull request information from github.\n     Return None if no title can be found, or an error happens.\n     '''\n     try:\n         req = Request(\"https://api.github.com/repos/\"+repo+\"/pulls/\"+pull)\n         result = urlopen(req)\n         reader = codecs.getreader('utf-8')\n         obj = json.load(reader(result))\n-        return obj['title']\n+        return obj\n     except Exception as e:\n-        print('Warning: unable to retrieve pull title from github: %s' % e)\n+        print('Warning: unable to retrieve pull information from github: %s' % e)\n         return None\n \n def ask_prompt(text):\n@@ -69,28 +69,28 @@ def ask_prompt(text):\n     print(\"\",file=stderr)\n     return reply\n \n-def parse_arguments(branch):\n+def parse_arguments():\n     epilog = '''\n         In addition, you can set the following git configuration variables:\n         githubmerge.repository (mandatory),\n         user.signingkey (mandatory),\n         githubmerge.host (default: git@github.com),\n-        githubmerge.branch (default: master),\n+        githubmerge.branch (no default),\n         githubmerge.testcmd (default: none).\n     '''\n     parser = argparse.ArgumentParser(description='Utility to merge, sign and push github pull requests',\n             epilog=epilog)\n     parser.add_argument('pull', metavar='PULL', type=int, nargs=1,\n         help='Pull request ID to merge')\n     parser.add_argument('branch', metavar='BRANCH', type=str, nargs='?',\n-        default=branch, help='Branch to merge against (default: '+branch+')')\n+        default=None, help='Branch to merge against (default: githubmerge.branch setting, or base branch for pull, or \\'master\\')')\n     return parser.parse_args()\n \n def main():\n     # Extract settings from git repo\n     repo = git_config_get('githubmerge.repository')\n     host = git_config_get('githubmerge.host','git@github.com')\n-    branch = git_config_get('githubmerge.branch','master')\n+    opt_branch = git_config_get('githubmerge.branch',None)\n     testcmd = git_config_get('githubmerge.testcmd')\n     signingkey = git_config_get('user.signingkey')\n     if repo is None:\n@@ -105,9 +105,20 @@ def main():\n     host_repo = host+\":\"+repo # shortcut for push/pull target\n \n     # Extract settings from command line\n-    args = parse_arguments(branch)\n+    args = parse_arguments()\n     pull = str(args.pull[0])\n-    branch = args.branch\n+\n+    # Receive pull information from github\n+    info = retrieve_pr_info(repo,pull)\n+    if info is None:\n+        exit(1)\n+    title = info['title']\n+    # precedence order for destination branch argument:\n+    #   - command line argument\n+    #   - githubmerge.branch setting\n+    #   - base branch for pull (as retrieved from github)\n+    #   - 'master'\n+    branch = args.branch or opt_branch or info['base']['ref'] or 'master'\n \n     # Initialize source branches\n     head_branch = 'pull/'+pull+'/head'\n@@ -147,7 +158,6 @@ def main():\n \n     try:\n         # Create unsigned merge commit.\n-        title = retrieve_pr_title(repo,pull)\n         if title:\n             firstline = 'Merge #%s: %s' % (pull,title)\n         else:\n@@ -165,7 +175,7 @@ def main():\n             print(\"ERROR: Creating merge failed (already merged?).\",file=stderr)\n             exit(4)\n \n-        print('%s#%s%s %s' % (ATTR_RESET+ATTR_PR,pull,ATTR_RESET,title))\n+        print('%s#%s%s %s %sinto %s%s' % (ATTR_RESET+ATTR_PR,pull,ATTR_RESET,title,ATTR_RESET+ATTR_PR,branch,ATTR_RESET))\n         subprocess.check_call([GIT,'log','--graph','--topo-order','--pretty=format:'+COMMIT_FORMAT,base_branch+'..'+head_branch])\n         print()\n         # Run test command if configured."
      }
    ]
  }
]