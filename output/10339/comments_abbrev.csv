jtimon,2017-05-04T21:16:59Z,"Fixed 3 nits by @theuni added a commit for TestBlockValidity, with a tiny optimization on getblocktemplate, and not much extra disruption.",https://github.com/bitcoin/bitcoin/pull/10339#issuecomment-299311670,299311670,
NicolasDorier,2017-05-06T18:11:55Z,I think a better approach would be to cache it. A bit like it is already done in CTransaction versus CMulableTransaction,https://github.com/bitcoin/bitcoin/pull/10339#issuecomment-299656905,299656905,
jtimon,2017-05-07T12:07:13Z,"> I think a better approach would be to cache it. A bit like it is already done in CTransaction versus CMulableTransaction\n\nWhat is better about it?\nAnyway, this doesn't preclude from caching it too.\n\nNeeds rebase",https://github.com/bitcoin/bitcoin/pull/10339#issuecomment-299702014,299702014,
NicolasDorier,2017-05-07T17:17:51Z,better in the sense it does not require one more parameter and that it is coherent with what we are doing for Transaction.,https://github.com/bitcoin/bitcoin/pull/10339#issuecomment-299720510,299720510,
jtimon,2017-05-07T19:27:29Z,"Rebased\n\nEDIT: @NicolasDorier I think even if we do that it's better that some functions take the hash directly, maybe not all the the functions here. But I'm happy to review such a PR.",https://github.com/bitcoin/bitcoin/pull/10339#issuecomment-299728592,299728592,
gmaxwell,2017-05-07T23:43:22Z,"Hm. if the block were made immutable, caching the result would be trivial. The only place where a block is not immutable in the code is in the creation of a block (where we don't care about the hash).  These changes require carrying around a hash where with an immutable block it would just be a method to return it.\n\nSo while these changes don't preclude caching it, I think the caching it patch",https://github.com/bitcoin/bitcoin/pull/10339#issuecomment-299744280,299744280,
ryanofsky,2017-05-08T21:35:59Z,"utACK 2069f9282cebb1c08b7e12c8155de3403dda39b4. Nice cleanup.\n\nIf a small caching implementation is possible, that would probably give a preferable end result. But this PR very simple and an obvious improvement over the status quo.",https://github.com/bitcoin/bitcoin/pull/10339#issuecomment-299997945,299997945,
jtimon,2017-05-09T17:03:28Z,"Needed rebase.\nYes, making the block immutable and using a cache would be more complete and also likely less disruptive. But I don't think I will have time to try that next week. If somebody else writes that alternative, please ping for review.\n",https://github.com/bitcoin/bitcoin/pull/10339#issuecomment-300232973,300232973,
sipa,2017-05-09T17:09:48Z,"I prefer this approach for reducing rehashing first. Caching is always possible later, but brings its own complications (like either eager precomputation, possibly hashing in unnecessary places, or locking issues).",https://github.com/bitcoin/bitcoin/pull/10339#issuecomment-300235422,300235422,
ryanofsky,2017-05-10T15:26:13Z,"utACK 46f5a9b090d8084edd0160411f634c6140ac983d. Changes since previous review were just resolving chainParams merge conflict, renaming CheckProofOfWork, and making it static in an earlier commit.",https://github.com/bitcoin/bitcoin/pull/10339#issuecomment-300518672,300518672,
jtimon,2017-05-31T00:02:35Z,"Before bikeshedding blockHash, please let me squash. Nobody seems to have complained about individual functions, which was the main point of keeping it separated. I think it would would be cleaner in a single commit on top of #9717 (or maybe squash that too if it's not going to be merged independently).\n",https://github.com/bitcoin/bitcoin/pull/10339#issuecomment-305042985,305042985,
jtimon,2017-05-31T01:52:44Z,"Squashed to 2 commits on top of #9717 for now as explained in the previous comment.\n\nEDIT: also ```scripted-diff: s/blockHash/block_hash/``` on top",https://github.com/bitcoin/bitcoin/pull/10339#issuecomment-305059543,305059543,
ryanofsky,2017-06-02T13:58:33Z,"@luke-jr do you have suggestions for this PR given your objection to #9717, which this is built on? Would you also disagree with changes in this PR? Or would you prefer to keep some changes here and discard others?",https://github.com/bitcoin/bitcoin/pull/10339#issuecomment-305795873,305795873,
luke-jr,2017-06-03T04:40:03Z,"I don't see why it would require #9717. At least here, it renames the function, although it looks like it's doing some confusing overloading now :/",https://github.com/bitcoin/bitcoin/pull/10339#issuecomment-305950718,305950718,
jtimon,2017-06-05T17:01:24Z,"> I don't see why it would require #9717. At least here, it renames the function, although it looks like it's doing some confusing overloading now :/\n\nIt is not strictly necessary, I can do this without any renaming and while keeping the stupid boolean argument in CheckBlockHeader if that is preferred. Or squash the first 2 commits, or rename it again to something different from ""CheckProofOfW",https://github.com/bitcoin/bitcoin/pull/10339#issuecomment-306243852,306243852,
ryanofsky,2017-06-05T20:47:53Z,"I acked both #9717 and this PR, but in my opinion the situation would be less confusing if this PR were modified not to depend on #9717, and then merged, and then there was an attempt to come to an agreement on #9717.",https://github.com/bitcoin/bitcoin/pull/10339#issuecomment-306302929,306302929,
TheBlueMatt,2017-06-07T19:37:07Z,"Yea, I think the disagreement in #9717 merits this being rebased on master directly instead.",https://github.com/bitcoin/bitcoin/pull/10339#issuecomment-306902087,306902087,
jtimon,2017-06-07T20:52:56Z,"Needs rebase Agreed, I will do it without #9717 and also without renaming CheckBlockHeader (which I believe was only asked because of #9717). My fault, I really expected #9717 to be fully uncontroversial and an obvious (although small) win to everyone, but let's just separate concerns and move forward.",https://github.com/bitcoin/bitcoin/pull/10339#issuecomment-306921319,306921319,
jtimon,2017-06-07T21:55:47Z,Rebased without #9717 as discussed and squashed into 1 commit.,https://github.com/bitcoin/bitcoin/pull/10339#issuecomment-306936877,306936877,
laanwj,2017-06-08T15:48:46Z,I'm going to do some measurements on this.,https://github.com/bitcoin/bitcoin/pull/10339#issuecomment-307144925,307144925,
laanwj,2017-06-08T16:46:20Z,"Aim: Block 1..300000 `-reindex-chainstate`. Added instrumentation to `CBlockHeader::GetHash()`:\n\n- With patch: 1665111 block hashing operations (up to block 301215)\n- Without patch: 2260763 block hashing operations (up to block 300085)\n\nThere's a slight bit of imprecision because `-stopatheight=300000` didn't work, so I had to use my reflexes. But I'm fairly sure the ~26% saving in block",https://github.com/bitcoin/bitcoin/pull/10339#issuecomment-307161260,307161260,
jtimon,2017-06-17T20:50:31Z,"Let's say I claim \n""In a rather naive benchmark (reindex-chainstate up to block 284k, with\n-assumevalid=0 and a very large dbcache), this connected blocks ~1.05x faster.""\nsimilarly to what @TheBlueMatt in #10192, would someone check this claim (did anyone checked for #10192)?\nIf true, would that be enough for making this interesting to those who isn't?\nIs anyone working on doing that kin",https://github.com/bitcoin/bitcoin/pull/10339#issuecomment-309239448,309239448,
ryanofsky,2017-06-21T17:54:56Z,"I think this change is more good than bad. I generally think it's better to pass data explicitly where it needs to go than to sneak it through side channels or recompute it unnecessarily, and I don't see that much cost in adding function arguments. But I also agree with others in \nhttps://botbot.me/freenode/bitcoin-core-dev/msg/86999458/ who pointed out that there is *some* cost to adding functi",https://github.com/bitcoin/bitcoin/pull/10339#issuecomment-310156829,310156829,
sipa,2017-06-21T18:04:35Z,I would be very surprised if this has a measurable impact at all. A 26% reduction in block hashing operations would completely vanish compared to Merkle tree computations which are also done for each blocks (and need 1000s of hashes). From @laanwj's numbers I would expect a 1s CPU time reduction for a full sync on a modern system.,https://github.com/bitcoin/bitcoin/pull/10339#issuecomment-310159434,310159434,
sdaftuar,2017-06-23T15:44:38Z,"If we don't think this will have a measurable impact, I'd prefer that we not make this change -- seems to me that this makes the consensus code more brittle.",https://github.com/bitcoin/bitcoin/pull/10339#issuecomment-310700860,310700860,
laanwj,2017-06-24T14:00:28Z,"> So while these changes don't preclude caching it, I think the caching it patch would be smaller and simpler. Thoughts?\n\nImplicit caching, although the explicit code impact is smaller, is always somewhat error-prone. I think I prefer explicitly passing values in.\n\nBut if this isn't worth doing, we should simply not do it. Unnecessary changes are only a risk.\nClosing.\n",https://github.com/bitcoin/bitcoin/pull/10339#issuecomment-310840209,310840209,
theuni,2017-05-04T19:27:31Z,Just use blockHash?,https://github.com/bitcoin/bitcoin/pull/10339#discussion_r114867160,114867160,src/net_processing.cpp
jtimon,2017-05-04T19:41:42Z,"Thanks, I saw this and then forgot about it",https://github.com/bitcoin/bitcoin/pull/10339#discussion_r114869900,114869900,src/net_processing.cpp
theuni,2017-05-04T19:43:43Z,Please rename this while you're at it. CheckBlockHeader is a terrible name if basically just compares 2 values :),https://github.com/bitcoin/bitcoin/pull/10339#discussion_r114870270,114870270,src/validation.cpp
theuni,2017-05-04T19:50:22Z,"Heh, nevermind. I see that's been suggested in #9717",https://github.com/bitcoin/bitcoin/pull/10339#discussion_r114871570,114871570,src/validation.cpp
theuni,2017-05-04T19:53:53Z,This hash doesn't match the one that's ultimately reconstructed.,https://github.com/bitcoin/bitcoin/pull/10339#discussion_r114872243,114872243,src/net_processing.cpp
jtimon,2017-05-04T21:03:31Z,"The discussion there was more about fully removing it and inlining it, which I prefer not to do for now. Just renaming is fine and as you point out it's free to do it now. Renaming to CheckProof (not with CheckProofOfWork to avoid confusing it with the version without CValidationState).",https://github.com/bitcoin/bitcoin/pull/10339#discussion_r114887298,114887298,src/validation.cpp
TheBlueMatt,2017-05-05T20:42:10Z,"CheckProof doesnt say anything to me? I have no idea what ""Proof"" it would be checking, probably just remove the function.",https://github.com/bitcoin/bitcoin/pull/10339#discussion_r115083718,115083718,src/validation.cpp
jtimon,2017-05-06T14:07:21Z,"Well, CheckProof also makes sense for the blocksigning branch #9177 (rewrite and rebase in progress), since you could be checking proof of work or the block script. But that name change can be done later, after all this function is being only called from 2 places at this point.\nFeel free to propose another name, maybe we can also move it to pow.o while at it.",https://github.com/bitcoin/bitcoin/pull/10339#discussion_r115120973,115120973,src/validation.cpp
TheBlueMatt,2017-05-08T20:21:34Z,Lets just remove it and call CheckProofOfWork directly?,https://github.com/bitcoin/bitcoin/pull/10339#discussion_r115343468,115343468,src/validation.cpp
ryanofsky,2017-05-08T21:21:51Z,"In commit ""Pow: Optimization: Pass const uint256& blockHash to CheckBlock""\n\nSome places you are using `const uint256` and other places you are using `const uint256&` for the `blockHash` local. Both ways should be functionality identical, but it might be nice to stick with a consistent style.",https://github.com/bitcoin/bitcoin/pull/10339#discussion_r115356315,115356315,src/validation.cpp
jtimon,2017-05-09T16:38:13Z,"See the discussion on https://github.com/bitcoin/bitcoin/pull/9717 and https://github.com/bitcoin/bitcoin/pull/10339#discussion_r114870270\nIt doesn't seem to make much sense to remove a wrapper of CheckProofOfWork that takes the CValidationState to just add it again on another PR doesn't seem to make much sense. But if we don't do the blocksigning stuff or something we can remove the wrapper lat",https://github.com/bitcoin/bitcoin/pull/10339#discussion_r115538387,115538387,src/validation.cpp
sipa,2017-05-23T21:42:36Z,"If you're going to stick to variable names that look like Hungarian style (which is certainly not a requirement, IMO), I do prefer it to be consistent. `hashBlock` would be correct here.",https://github.com/bitcoin/bitcoin/pull/10339#discussion_r118114047,118114047,src/validation.cpp
sipa,2017-05-23T21:43:58Z,"Super nit: this may be slightly confusing as it may make it look like nothing new is computed, so I prefer `const uint256 hashBlock = ` here instead.",https://github.com/bitcoin/bitcoin/pull/10339#discussion_r118114329,118114329,src/validation.cpp
jtimon,2017-05-29T16:48:02Z,"does hashBlock even qualify as ""hungarian style""? Anyway, it wasn't my intention, I just cleed it blockHash because it's the block's hash. I don't care to change it, but I really don't think s/blockHash/hashBlock/ is worth it here at all.",https://github.com/bitcoin/bitcoin/pull/10339#discussion_r118965168,118965168,src/validation.cpp
jtimon,2017-05-29T16:49:39Z,"Again, I don't see how you suggestion for changing the name improves anything or gives more clarity, but if you think so, I can change it everywhere (including all function arguments) I guess...",https://github.com/bitcoin/bitcoin/pull/10339#discussion_r118965330,118965330,src/validation.cpp
