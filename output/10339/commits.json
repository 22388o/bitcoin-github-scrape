[
  {
    "sha": "aa881b2c8b7c7cd65b7f8f34a5244284628ae407",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYTg4MWIyYzhiN2M3Y2Q2NWI3ZjhmMzRhNTI0NDI4NDYyOGFlNDA3",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-05-03T21:37:18Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-06-07T21:53:57Z"
      },
      "message": "Optimization: Pass pre-calculated const uint256& block_hash through more functions\n\n- Pow: Pass const uint256& block_hash to s/CheckBlockHeader/CheckProofOfWork/\n  Optimization because AcceptBlockHeader had the hash calculated already\n- Pass const uint256& block_hash to CheckBlock\n  Optimization because now ConnectBlock calls CBlock::GetHash() less times\n- Pass const uint256& block_hash to ConnectBlock\n  Optimization because TestBlockValidity had calculated block_hash already\n- Pass const uint256& block_hash to AcceptBlock\n  Optimization because now AcceptBlock reuses CBlock::GetHash() calculation from ProcessNewBlock\n- Pass const uint256& block_hash to ProcessNewBlock\n- Call CBlock::GetHash() less in net_processing::ProcessMessage()\n- Pass const uint256& block_hash to TestBlockValidity\n  Optimization because getblocktemplate had the hash calculated already",
      "tree": {
        "sha": "9f6a88d12ee0bd9176a2ab37c04e59f84c2dea30",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9f6a88d12ee0bd9176a2ab37c04e59f84c2dea30"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aa881b2c8b7c7cd65b7f8f34a5244284628ae407",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJZOHX4AAoJEIhmwY6hyUSim7UP/jGYLe+KqJbaaeGU9ZJMm+kp\nb1Duc0/3GcBZmSy8dXyd/+bZrysdNkRjU7uROHg5Kd/jh/R3IBfJHY1EgY1q/iRO\n3SZAs7AOGv5cVg804ZOmXxI0If63VjRM3LPn1DNGYl9e9DWLDG/TewUL0RIzBUnH\nQifR9ilNqYaESRnjvZNe/pxbO6pPAnNvy6CdqWYaqzIWIzo3GnE4f0cdLubEbW9j\ng+F7IdXmyWinlwdnK6yTivUNewbgOpn0I/PTc8khmRyqlIgGRYF+Mp3V/sNBGvhi\nTjzEnt/AWBtKsBEEWf6Eqm8mmvHQ0W3PqMx7biuCSeqV0GMx9BV2Z+2RQDpHQBoN\nQihhmc735YFgOYzd1qLaD0L1JrF6M7JiTZ4k0NcfJC0lHUI5BOr8Gksjc77ofLtO\nu7PZ8wYy8kZYUFoe5KDM7wzMRJiGc9LDPmjcAlp/Bi72LDLufG/tiezEd8K3VN9M\nS2vvO/PwW8Cc+/OWk/D4RaQ4xeNN13b41n4ya+D3pqjESeE7z5FPdnllrKfUCH+/\nkH6tOJViOiFx0X/AKeZTVpm2L4G+GM1yhtc645lLEvlEGk2oMT4uqCxjN5INBQiX\nOafZDbx6JRJNSl2gGhxWLCaDABftKTapSGySGaV4pop+Z7MUiu2GX+RC53Z//s3H\nDn/TmK8N1/yqv5/3VK8e\n=8FMV\n-----END PGP SIGNATURE-----",
        "payload": "tree 9f6a88d12ee0bd9176a2ab37c04e59f84c2dea30\nparent 46311e792f4e4a53b7dc418215b03d890d0594d5\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1493847438 +0200\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1496872437 +0200\n\nOptimization: Pass pre-calculated const uint256& block_hash through more functions\n\n- Pow: Pass const uint256& block_hash to s/CheckBlockHeader/CheckProofOfWork/\n  Optimization because AcceptBlockHeader had the hash calculated already\n- Pass const uint256& block_hash to CheckBlock\n  Optimization because now ConnectBlock calls CBlock::GetHash() less times\n- Pass const uint256& block_hash to ConnectBlock\n  Optimization because TestBlockValidity had calculated block_hash already\n- Pass const uint256& block_hash to AcceptBlock\n  Optimization because now AcceptBlock reuses CBlock::GetHash() calculation from ProcessNewBlock\n- Pass const uint256& block_hash to ProcessNewBlock\n- Call CBlock::GetHash() less in net_processing::ProcessMessage()\n- Pass const uint256& block_hash to TestBlockValidity\n  Optimization because getblocktemplate had the hash calculated already\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa881b2c8b7c7cd65b7f8f34a5244284628ae407",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/aa881b2c8b7c7cd65b7f8f34a5244284628ae407",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa881b2c8b7c7cd65b7f8f34a5244284628ae407/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "46311e792f4e4a53b7dc418215b03d890d0594d5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46311e792f4e4a53b7dc418215b03d890d0594d5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/46311e792f4e4a53b7dc418215b03d890d0594d5"
      }
    ],
    "stats": {
      "total": 91,
      "additions": 46,
      "deletions": 45
    },
    "files": [
      {
        "sha": "679e3c13ed97fa53e1ca30089888007d0986fdab",
        "filename": "src/bench/checkblock.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa881b2c8b7c7cd65b7f8f34a5244284628ae407/src/bench/checkblock.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa881b2c8b7c7cd65b7f8f34a5244284628ae407/src/bench/checkblock.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/checkblock.cpp?ref=aa881b2c8b7c7cd65b7f8f34a5244284628ae407",
        "patch": "@@ -48,7 +48,7 @@ static void DeserializeAndCheckBlockTest(benchmark::State& state)\n         assert(stream.Rewind(sizeof(block_bench::block413567)));\n \n         CValidationState validationState;\n-        assert(CheckBlock(block, validationState, chainParams->GetConsensus()));\n+        assert(CheckBlock(block, block.GetHash(), validationState, chainParams->GetConsensus()));\n     }\n }\n "
      },
      {
        "sha": "fd1bfbc8f796e8ddfe8f7e61b0b6d35edeb06ff4",
        "filename": "src/blockencodings.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa881b2c8b7c7cd65b7f8f34a5244284628ae407/src/blockencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa881b2c8b7c7cd65b7f8f34a5244284628ae407/src/blockencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockencodings.cpp?ref=aa881b2c8b7c7cd65b7f8f34a5244284628ae407",
        "patch": "@@ -199,7 +199,7 @@ ReadStatus PartiallyDownloadedBlock::FillBlock(CBlock& block, const std::vector<\n         return READ_STATUS_INVALID;\n \n     CValidationState state;\n-    if (!CheckBlock(block, state, Params().GetConsensus())) {\n+    if (!CheckBlock(block, block.GetHash(), state, Params().GetConsensus())) {\n         // TODO: We really want to just check merkle tree manually here,\n         // but that is expensive, and CheckBlock caches a block's\n         // \"checked-status\" (in the CBlock?). CBlock should be able to"
      },
      {
        "sha": "8d5e53d2dde54cdebe542f8abeffe9336523548d",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa881b2c8b7c7cd65b7f8f34a5244284628ae407/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa881b2c8b7c7cd65b7f8f34a5244284628ae407/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=aa881b2c8b7c7cd65b7f8f34a5244284628ae407",
        "patch": "@@ -201,7 +201,7 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& sc\n     pblocktemplate->vTxSigOpsCost[0] = WITNESS_SCALE_FACTOR * GetLegacySigOpCount(*pblock->vtx[0]);\n \n     CValidationState state;\n-    if (!TestBlockValidity(state, chainparams, *pblock, pindexPrev, false, false)) {\n+    if (!TestBlockValidity(state, chainparams, *pblock, pblock->GetHash(), pindexPrev, false, false)) {\n         throw std::runtime_error(strprintf(\"%s: TestBlockValidity failed: %s\", __func__, FormatStateMessage(state)));\n     }\n     int64_t nTime2 = GetTimeMicros();"
      },
      {
        "sha": "b72064921afbf9113f0119d1dcb9d8ccd50da16b",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 9,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa881b2c8b7c7cd65b7f8f34a5244284628ae407/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa881b2c8b7c7cd65b7f8f34a5244284628ae407/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=aa881b2c8b7c7cd65b7f8f34a5244284628ae407",
        "patch": "@@ -2144,14 +2144,15 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             return ProcessMessage(pfrom, NetMsgType::HEADERS, vHeadersMsg, nTimeReceived, chainparams, connman, interruptMsgProc);\n \n         if (fBlockReconstructed) {\n+            const uint256& block_hash = pblock->GetHash();\n             // If we got here, we were able to optimistically reconstruct a\n             // block that is in flight from some other peer.\n             {\n                 LOCK(cs_main);\n-                mapBlockSource.emplace(pblock->GetHash(), std::make_pair(pfrom->GetId(), false));\n+                mapBlockSource.emplace(block_hash, std::make_pair(pfrom->GetId(), false));\n             }\n             bool fNewBlock = false;\n-            ProcessNewBlock(chainparams, pblock, true, &fNewBlock);\n+            ProcessNewBlock(chainparams, pblock, block_hash, true, &fNewBlock);\n             if (fNewBlock)\n                 pfrom->nLastBlockTime = GetTime();\n \n@@ -2161,7 +2162,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n                 // process from some other peer.  We do this after calling\n                 // ProcessNewBlock so that a malleated cmpctblock announcement\n                 // can't be used to interfere with block relay.\n-                MarkBlockAsReceived(pblock->GetHash());\n+                MarkBlockAsReceived(block_hash);\n             }\n         }\n \n@@ -2228,7 +2229,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             bool fNewBlock = false;\n             // Since we requested this block (it was in mapBlocksInFlight), force it to be processed,\n             // even if it would not be a candidate for new tip (missing previous block, chain not long enough, etc)\n-            ProcessNewBlock(chainparams, pblock, true, &fNewBlock);\n+            ProcessNewBlock(chainparams, pblock, pblock->GetHash(), true, &fNewBlock);\n             if (fNewBlock)\n                 pfrom->nLastBlockTime = GetTime();\n         }\n@@ -2388,26 +2389,26 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n     {\n         std::shared_ptr<CBlock> pblock = std::make_shared<CBlock>();\n         vRecv >> *pblock;\n+        const uint256& block_hash = pblock->GetHash();\n \n-        LogPrint(BCLog::NET, \"received block %s peer=%d\\n\", pblock->GetHash().ToString(), pfrom->GetId());\n+        LogPrint(BCLog::NET, \"received block %s peer=%d\\n\", block_hash.ToString(), pfrom->GetId());\n \n         // Process all blocks from whitelisted peers, even if not requested,\n         // unless we're still syncing with the network.\n         // Such an unrequested block may still be processed, subject to the\n         // conditions in AcceptBlock().\n         bool forceProcessing = pfrom->fWhitelisted && !IsInitialBlockDownload();\n-        const uint256 hash(pblock->GetHash());\n         {\n             LOCK(cs_main);\n             // Also always process if we requested the block explicitly, as we may\n             // need it even though it is not a candidate for a new best tip.\n-            forceProcessing |= MarkBlockAsReceived(hash);\n+            forceProcessing |= MarkBlockAsReceived(block_hash);\n             // mapBlockSource is only used for sending reject messages and DoS scores,\n             // so the race between here and cs_main in ProcessNewBlock is fine.\n-            mapBlockSource.emplace(hash, std::make_pair(pfrom->GetId(), true));\n+            mapBlockSource.emplace(block_hash, std::make_pair(pfrom->GetId(), true));\n         }\n         bool fNewBlock = false;\n-        ProcessNewBlock(chainparams, pblock, forceProcessing, &fNewBlock);\n+        ProcessNewBlock(chainparams, pblock, block_hash, forceProcessing, &fNewBlock);\n         if (fNewBlock)\n             pfrom->nLastBlockTime = GetTime();\n     }"
      },
      {
        "sha": "9d846ed7b5a04b15db7d1dc153d50c642d2bc966",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa881b2c8b7c7cd65b7f8f34a5244284628ae407/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa881b2c8b7c7cd65b7f8f34a5244284628ae407/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=aa881b2c8b7c7cd65b7f8f34a5244284628ae407",
        "patch": "@@ -109,7 +109,7 @@ UniValue generateBlocks(std::shared_ptr<CReserveScript> coinbaseScript, int nGen\n         nHeightEnd = nHeightStart+nGenerate;\n     }\n     unsigned int nExtraNonce = 0;\n-    UniValue blockHashes(UniValue::VARR);\n+    UniValue block_hashes(UniValue::VARR);\n     while (nHeight < nHeightEnd)\n     {\n         std::unique_ptr<CBlockTemplate> pblocktemplate(BlockAssembler(Params()).CreateNewBlock(coinbaseScript->reserveScript));\n@@ -131,18 +131,18 @@ UniValue generateBlocks(std::shared_ptr<CReserveScript> coinbaseScript, int nGen\n             continue;\n         }\n         std::shared_ptr<const CBlock> shared_pblock = std::make_shared<const CBlock>(*pblock);\n-        if (!ProcessNewBlock(Params(), shared_pblock, true, NULL))\n+        if (!ProcessNewBlock(Params(), shared_pblock, shared_pblock->GetHash(), true, NULL))\n             throw JSONRPCError(RPC_INTERNAL_ERROR, \"ProcessNewBlock, block not accepted\");\n         ++nHeight;\n-        blockHashes.push_back(pblock->GetHash().GetHex());\n+        block_hashes.push_back(pblock->GetHash().GetHex());\n \n         //mark script as important because it was used at least for one coinbase output if the script came from the wallet\n         if (keepScript)\n         {\n             coinbaseScript->KeepScript();\n         }\n     }\n-    return blockHashes;\n+    return block_hashes;\n }\n \n UniValue generate(const JSONRPCRequest& request)\n@@ -441,7 +441,7 @@ UniValue getblocktemplate(const JSONRPCRequest& request)\n             if (block.hashPrevBlock != pindexPrev->GetBlockHash())\n                 return \"inconclusive-not-best-prevblk\";\n             CValidationState state;\n-            TestBlockValidity(state, Params(), block, pindexPrev, false, true);\n+            TestBlockValidity(state, Params(), block, hash, pindexPrev, false, true);\n             return BIP22ValidationResult(state);\n         }\n \n@@ -783,7 +783,7 @@ UniValue submitblock(const JSONRPCRequest& request)\n \n     submitblock_StateCatcher sc(block.GetHash());\n     RegisterValidationInterface(&sc);\n-    bool fAccepted = ProcessNewBlock(Params(), blockptr, true, NULL);\n+    bool fAccepted = ProcessNewBlock(Params(), blockptr, blockptr->GetHash(), true, NULL);\n     UnregisterValidationInterface(&sc);\n     if (fBlockPresent) {\n         if (fAccepted && !sc.found) {"
      },
      {
        "sha": "ed2cac6d2a63b8a2fe7605d80e825c9a02c07f88",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa881b2c8b7c7cd65b7f8f34a5244284628ae407/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa881b2c8b7c7cd65b7f8f34a5244284628ae407/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=aa881b2c8b7c7cd65b7f8f34a5244284628ae407",
        "patch": "@@ -236,7 +236,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         pblock->hashMerkleRoot = BlockMerkleRoot(*pblock);\n         pblock->nNonce = blockinfo[i].nonce;\n         std::shared_ptr<const CBlock> shared_pblock = std::make_shared<const CBlock>(*pblock);\n-        BOOST_CHECK(ProcessNewBlock(chainparams, shared_pblock, true, NULL));\n+        BOOST_CHECK(ProcessNewBlock(chainparams, shared_pblock, shared_pblock->GetHash(), true, NULL));\n         pblock->hashPrevBlock = pblock->GetHash();\n     }\n "
      },
      {
        "sha": "0c96dcf956ad1e6c5746e56df56ba1e9b818e4a3",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa881b2c8b7c7cd65b7f8f34a5244284628ae407/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa881b2c8b7c7cd65b7f8f34a5244284628ae407/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=aa881b2c8b7c7cd65b7f8f34a5244284628ae407",
        "patch": "@@ -130,7 +130,7 @@ TestChain100Setup::CreateAndProcessBlock(const std::vector<CMutableTransaction>&\n     while (!CheckProofOfWork(block.GetHash(), block.nBits, chainparams.GetConsensus())) ++block.nNonce;\n \n     std::shared_ptr<const CBlock> shared_pblock = std::make_shared<const CBlock>(block);\n-    ProcessNewBlock(chainparams, shared_pblock, true, NULL);\n+    ProcessNewBlock(chainparams, shared_pblock, shared_pblock->GetHash(), true, NULL);\n \n     CBlock result = block;\n     return result;"
      },
      {
        "sha": "6163a547212bab95eddd00411ba47396fb514c51",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 22,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa881b2c8b7c7cd65b7f8f34a5244284628ae407/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa881b2c8b7c7cd65b7f8f34a5244284628ae407/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=aa881b2c8b7c7cd65b7f8f34a5244284628ae407",
        "patch": "@@ -1486,18 +1486,18 @@ static int64_t nTimeTotal = 0;\n /** Apply the effects of this block (with given index) on the UTXO set represented by coins.\n  *  Validity checks that depend on the UTXO set are also done; ConnectBlock()\n  *  can fail if those validity checks fail (among other reasons). */\n-static bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pindex,\n+static bool ConnectBlock(const CBlock& block, const uint256& block_hash, CValidationState& state, CBlockIndex* pindex,\n                   CCoinsViewCache& view, const CChainParams& chainparams, bool fJustCheck = false)\n {\n     AssertLockHeld(cs_main);\n     assert(pindex);\n     // pindex->phashBlock can be null if called by CreateNewBlock/TestBlockValidity\n     assert((pindex->phashBlock == NULL) ||\n-           (*pindex->phashBlock == block.GetHash()));\n+           (*pindex->phashBlock == block_hash));\n     int64_t nTimeStart = GetTimeMicros();\n \n     // Check it again in case a previous version let a bad block in\n-    if (!CheckBlock(block, state, chainparams.GetConsensus(), !fJustCheck, !fJustCheck))\n+    if (!CheckBlock(block, block_hash, state, chainparams.GetConsensus(), !fJustCheck, !fJustCheck))\n         return error(\"%s: Consensus::CheckBlock: %s\", __func__, FormatStateMessage(state));\n \n     // verify that the view's current state corresponds to the previous block\n@@ -1506,7 +1506,7 @@ static bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockInd\n \n     // Special case for the genesis block, skipping connection of its transactions\n     // (its coinbase is unspendable)\n-    if (block.GetHash() == chainparams.GetConsensus().hashGenesisBlock) {\n+    if (block_hash == chainparams.GetConsensus().hashGenesisBlock) {\n         if (!fJustCheck)\n             view.SetBestBlock(pindex->GetBlockHash());\n         return true;\n@@ -2072,7 +2072,7 @@ bool static ConnectTip(CValidationState& state, const CChainParams& chainparams,\n     LogPrint(BCLog::BENCH, \"  - Load block from disk: %.2fms [%.2fs]\\n\", (nTime2 - nTime1) * 0.001, nTimeReadFromDisk * 0.000001);\n     {\n         CCoinsViewCache view(pcoinsTip);\n-        bool rv = ConnectBlock(blockConnecting, state, pindexNew, view, chainparams);\n+        bool rv = ConnectBlock(blockConnecting, blockConnecting.GetHash(), state, pindexNew, view, chainparams);\n         GetMainSignals().BlockChecked(blockConnecting, state);\n         if (!rv) {\n             if (state.IsInvalid())\n@@ -2636,16 +2636,16 @@ static bool FindUndoPos(CValidationState &state, int nFile, CDiskBlockPos &pos,\n     return true;\n }\n \n-static bool CheckBlockHeader(const CBlockHeader& block, CValidationState& state, const Consensus::Params& consensusParams, bool fCheckPOW = true)\n+static bool CheckBlockHeader(const CBlockHeader& block, const uint256& block_hash, CValidationState& state, const Consensus::Params& consensusParams, bool fCheckPOW = true)\n {\n     // Check proof of work matches claimed amount\n-    if (fCheckPOW && !CheckProofOfWork(block.GetHash(), block.nBits, consensusParams))\n+    if (fCheckPOW && !CheckProofOfWork(block_hash, block.nBits, consensusParams))\n         return state.DoS(50, false, REJECT_INVALID, \"high-hash\", false, \"proof of work failed\");\n \n     return true;\n }\n \n-bool CheckBlock(const CBlock& block, CValidationState& state, const Consensus::Params& consensusParams, bool fCheckPOW, bool fCheckMerkleRoot)\n+bool CheckBlock(const CBlock& block, const uint256& block_hash, CValidationState& state, const Consensus::Params& consensusParams, bool fCheckPOW, bool fCheckMerkleRoot)\n {\n     // These are checks that are independent of context.\n \n@@ -2654,7 +2654,7 @@ bool CheckBlock(const CBlock& block, CValidationState& state, const Consensus::P\n \n     // Check that the header is valid (particularly PoW).  This is mostly\n     // redundant with the call in AcceptBlockHeader.\n-    if (!CheckBlockHeader(block, state, consensusParams, fCheckPOW))\n+    if (!CheckBlockHeader(block, block_hash, state, consensusParams, fCheckPOW))\n         return false;\n \n     // Check the merkle root.\n@@ -2916,7 +2916,7 @@ static bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state\n             return true;\n         }\n \n-        if (!CheckBlockHeader(block, state, chainparams.GetConsensus()))\n+        if (!CheckBlockHeader(block, hash, state, chainparams.GetConsensus()))\n             return error(\"%s: Consensus::CheckBlockHeader: %s, %s\", __func__, hash.ToString(), FormatStateMessage(state));\n \n         // Get prev block index\n@@ -2966,7 +2966,7 @@ bool ProcessNewBlockHeaders(const std::vector<CBlockHeader>& headers, CValidatio\n }\n \n /** Store block on disk. If dbp is non-NULL, the file is known to already reside on disk */\n-static bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex, bool fRequested, const CDiskBlockPos* dbp, bool* fNewBlock)\n+static bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, const uint256& block_hash, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex, bool fRequested, const CDiskBlockPos* dbp, bool* fNewBlock)\n {\n     const CBlock& block = *pblock;\n \n@@ -3006,7 +3006,7 @@ static bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidation\n     }\n     if (fNewBlock) *fNewBlock = true;\n \n-    if (!CheckBlock(block, state, chainparams.GetConsensus()) ||\n+    if (!CheckBlock(block, block_hash, state, chainparams.GetConsensus()) ||\n         !ContextualCheckBlock(block, state, chainparams.GetConsensus(), pindex->pprev)) {\n         if (state.IsInvalid() && !state.CorruptionPossible()) {\n             pindex->nStatus |= BLOCK_FAILED_VALID;\n@@ -3045,21 +3045,21 @@ static bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidation\n     return true;\n }\n \n-bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, bool fForceProcessing, bool *fNewBlock)\n+bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, const uint256& block_hash, bool fForceProcessing, bool *fNewBlock)\n {\n     {\n         CBlockIndex *pindex = NULL;\n         if (fNewBlock) *fNewBlock = false;\n         CValidationState state;\n         // Ensure that CheckBlock() passes before calling AcceptBlock, as\n         // belt-and-suspenders.\n-        bool ret = CheckBlock(*pblock, state, chainparams.GetConsensus());\n+        bool ret = CheckBlock(*pblock, block_hash, state, chainparams.GetConsensus());\n \n         LOCK(cs_main);\n \n         if (ret) {\n             // Store to disk\n-            ret = AcceptBlock(pblock, state, chainparams, &pindex, fForceProcessing, NULL, fNewBlock);\n+            ret = AcceptBlock(pblock, block_hash, state, chainparams, &pindex, fForceProcessing, NULL, fNewBlock);\n         }\n         CheckBlockIndex(chainparams.GetConsensus());\n         if (!ret) {\n@@ -3077,7 +3077,7 @@ bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<cons\n     return true;\n }\n \n-bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams, const CBlock& block, CBlockIndex* pindexPrev, bool fCheckPOW, bool fCheckMerkleRoot)\n+bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams, const CBlock& block, const uint256& block_hash, CBlockIndex* pindexPrev, bool fCheckPOW, bool fCheckMerkleRoot)\n {\n     AssertLockHeld(cs_main);\n     assert(pindexPrev && pindexPrev == chainActive.Tip());\n@@ -3092,11 +3092,11 @@ bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams,\n     // NOTE: CheckBlockHeader is called by CheckBlock\n     if (!ContextualCheckBlockHeader(block, state, chainparams.GetConsensus(), pindexPrev, GetAdjustedTime()))\n         return error(\"%s: Consensus::ContextualCheckBlockHeader: %s\", __func__, FormatStateMessage(state));\n-    if (!CheckBlock(block, state, chainparams.GetConsensus(), fCheckPOW, fCheckMerkleRoot))\n+    if (!CheckBlock(block, block_hash, state, chainparams.GetConsensus(), fCheckPOW, fCheckMerkleRoot))\n         return error(\"%s: Consensus::CheckBlock: %s\", __func__, FormatStateMessage(state));\n     if (!ContextualCheckBlock(block, state, chainparams.GetConsensus(), pindexPrev))\n         return error(\"%s: Consensus::ContextualCheckBlock: %s\", __func__, FormatStateMessage(state));\n-    if (!ConnectBlock(block, state, &indexDummy, viewNew, chainparams, true))\n+    if (!ConnectBlock(block, block_hash, state, &indexDummy, viewNew, chainparams, true))\n         return false;\n     assert(state.IsValid());\n \n@@ -3482,7 +3482,7 @@ bool CVerifyDB::VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview,\n         if (!ReadBlockFromDisk(block, pindex, chainparams.GetConsensus()))\n             return error(\"VerifyDB(): *** ReadBlockFromDisk failed at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n         // check level 1: verify block validity\n-        if (nCheckLevel >= 1 && !CheckBlock(block, state, chainparams.GetConsensus()))\n+        if (nCheckLevel >= 1 && !CheckBlock(block, block.GetHash(), state, chainparams.GetConsensus()))\n             return error(\"%s: *** found bad block at %d, hash=%s (%s)\\n\", __func__,\n                          pindex->nHeight, pindex->GetBlockHash().ToString(), FormatStateMessage(state));\n         // check level 2: verify undo validity\n@@ -3524,7 +3524,7 @@ bool CVerifyDB::VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview,\n             CBlock block;\n             if (!ReadBlockFromDisk(block, pindex, chainparams.GetConsensus()))\n                 return error(\"VerifyDB(): *** ReadBlockFromDisk failed at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n-            if (!ConnectBlock(block, state, pindex, coins, chainparams))\n+            if (!ConnectBlock(block, block.GetHash(), state, pindex, coins, chainparams))\n                 return error(\"VerifyDB(): *** found unconnectable block at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n         }\n     }\n@@ -3754,7 +3754,7 @@ bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, CDiskB\n                 if (mapBlockIndex.count(hash) == 0 || (mapBlockIndex[hash]->nStatus & BLOCK_HAVE_DATA) == 0) {\n                     LOCK(cs_main);\n                     CValidationState state;\n-                    if (AcceptBlock(pblock, state, chainparams, NULL, true, dbp, NULL))\n+                    if (AcceptBlock(pblock, pblock->GetHash(), state, chainparams, NULL, true, dbp, NULL))\n                         nLoaded++;\n                     if (state.IsError())\n                         break;\n@@ -3788,7 +3788,7 @@ bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, CDiskB\n                                     head.ToString());\n                             LOCK(cs_main);\n                             CValidationState dummy;\n-                            if (AcceptBlock(pblockrecursive, dummy, chainparams, NULL, true, &it->second, NULL))\n+                            if (AcceptBlock(pblockrecursive, pblockrecursive->GetHash(), dummy, chainparams, NULL, true, &it->second, NULL))\n                             {\n                                 nLoaded++;\n                                 queue.push_back(pblockrecursive->GetHash());"
      },
      {
        "sha": "4a210893f5b1570e48c941fc80939f0f84edfea1",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa881b2c8b7c7cd65b7f8f34a5244284628ae407/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa881b2c8b7c7cd65b7f8f34a5244284628ae407/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=aa881b2c8b7c7cd65b7f8f34a5244284628ae407",
        "patch": "@@ -237,7 +237,7 @@ static const uint64_t MIN_DISK_SPACE_FOR_BLOCK_FILES = 550 * 1024 * 1024;\n  * @param[out]  fNewBlock A boolean which is set to indicate if the block was first received via this call\n  * @return True if state.IsValid()\n  */\n-bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, bool fForceProcessing, bool* fNewBlock);\n+bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, const uint256& block_hash, bool fForceProcessing, bool* fNewBlock);\n \n /**\n  * Process incoming block headers.\n@@ -402,10 +402,10 @@ bool ReadBlockFromDisk(CBlock& block, const CBlockIndex* pindex, const Consensus\n /** Functions for validating blocks and updating the block tree */\n \n /** Context-independent validity checks */\n-bool CheckBlock(const CBlock& block, CValidationState& state, const Consensus::Params& consensusParams, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n+bool CheckBlock(const CBlock& block, const uint256& block_hash, CValidationState& state, const Consensus::Params& consensusParams, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n \n /** Check a block is completely valid from start to finish (only works on top of our current best block, with cs_main held) */\n-bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams, const CBlock& block, CBlockIndex* pindexPrev, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n+bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams, const CBlock& block, const uint256& block_hash, CBlockIndex* pindexPrev, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n \n /** Check whether witness commitments are required for block. */\n bool IsWitnessEnabled(const CBlockIndex* pindexPrev, const Consensus::Params& params);"
      }
    ]
  }
]