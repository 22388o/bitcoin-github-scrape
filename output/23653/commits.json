[
  {
    "sha": "2c35a93b3cc19dc71d5664f9f61c24a04f419e35",
    "node_id": "C_kwDOABII59oAKDJjMzVhOTNiM2NjMTlkYzcxZDU2NjRmOWY2MWMyNGEwNGY0MTllMzU",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-12-01T19:40:25Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-12-02T19:47:17Z"
      },
      "message": "Generalize/simplify VectorReader into SpanReader",
      "tree": {
        "sha": "78a40228722d72de583ab39bbc932c186ec5fb39",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/78a40228722d72de583ab39bbc932c186ec5fb39"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2c35a93b3cc19dc71d5664f9f61c24a04f419e35",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c35a93b3cc19dc71d5664f9f61c24a04f419e35",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2c35a93b3cc19dc71d5664f9f61c24a04f419e35",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c35a93b3cc19dc71d5664f9f61c24a04f419e35/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "26a1147ce56083d7aa820ac115c16b01e47d911c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26a1147ce56083d7aa820ac115c16b01e47d911c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/26a1147ce56083d7aa820ac115c16b01e47d911c"
      }
    ],
    "stats": {
      "total": 71,
      "additions": 35,
      "deletions": 36
    },
    "files": [
      {
        "sha": "31a1e62d6bd7be11b85854415d613d3792803f17",
        "filename": "src/blockfilter.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c35a93b3cc19dc71d5664f9f61c24a04f419e35/src/blockfilter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c35a93b3cc19dc71d5664f9f61c24a04f419e35/src/blockfilter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockfilter.cpp?ref=2c35a93b3cc19dc71d5664f9f61c24a04f419e35",
        "patch": "@@ -81,7 +81,7 @@ GCSFilter::GCSFilter(const Params& params)\n GCSFilter::GCSFilter(const Params& params, std::vector<unsigned char> encoded_filter)\n     : m_params(params), m_encoded(std::move(encoded_filter))\n {\n-    VectorReader stream(GCS_SER_TYPE, GCS_SER_VERSION, m_encoded, 0);\n+    SpanReader stream{GCS_SER_TYPE, GCS_SER_VERSION, m_encoded, 0};\n \n     uint64_t N = ReadCompactSize(stream);\n     m_N = static_cast<uint32_t>(N);\n@@ -92,7 +92,7 @@ GCSFilter::GCSFilter(const Params& params, std::vector<unsigned char> encoded_fi\n \n     // Verify that the encoded filter contains exactly N elements. If it has too much or too little\n     // data, a std::ios_base::failure exception will be raised.\n-    BitStreamReader<VectorReader> bitreader(stream);\n+    BitStreamReader<SpanReader> bitreader{stream};\n     for (uint64_t i = 0; i < m_N; ++i) {\n         GolombRiceDecode(bitreader, m_params.m_P);\n     }\n@@ -133,13 +133,13 @@ GCSFilter::GCSFilter(const Params& params, const ElementSet& elements)\n \n bool GCSFilter::MatchInternal(const uint64_t* element_hashes, size_t size) const\n {\n-    VectorReader stream(GCS_SER_TYPE, GCS_SER_VERSION, m_encoded, 0);\n+    SpanReader stream{GCS_SER_TYPE, GCS_SER_VERSION, m_encoded, 0};\n \n     // Seek forward by size of N\n     uint64_t N = ReadCompactSize(stream);\n     assert(N == m_N);\n \n-    BitStreamReader<VectorReader> bitreader(stream);\n+    BitStreamReader<SpanReader> bitreader{stream};\n \n     uint64_t value = 0;\n     size_t hashes_index = 0;"
      },
      {
        "sha": "d74a6ef05a4d16c6968dd14c1e15ad63fd21def2",
        "filename": "src/signet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c35a93b3cc19dc71d5664f9f61c24a04f419e35/src/signet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c35a93b3cc19dc71d5664f9f61c24a04f419e35/src/signet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/signet.cpp?ref=2c35a93b3cc19dc71d5664f9f61c24a04f419e35",
        "patch": "@@ -98,7 +98,7 @@ std::optional<SignetTxs> SignetTxs::Create(const CBlock& block, const CScript& c\n         // no signet solution -- allow this to support OP_TRUE as trivial block challenge\n     } else {\n         try {\n-            VectorReader v(SER_NETWORK, INIT_PROTO_VERSION, signet_solution, 0);\n+            SpanReader v{SER_NETWORK, INIT_PROTO_VERSION, signet_solution, 0};\n             v >> tx_spending.vin[0].scriptSig;\n             v >> tx_spending.vin[0].scriptWitness.stack;\n             if (!v.empty()) return std::nullopt; // extraneous data encountered"
      },
      {
        "sha": "dbb942f306635d3a781a4b1e13837fe3f0eb7a2d",
        "filename": "src/streams.h",
        "status": "modified",
        "additions": 17,
        "deletions": 18,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c35a93b3cc19dc71d5664f9f61c24a04f419e35/src/streams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c35a93b3cc19dc71d5664f9f61c24a04f419e35/src/streams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/streams.h?ref=2c35a93b3cc19dc71d5664f9f61c24a04f419e35",
        "patch": "@@ -128,15 +128,14 @@ class CVectorWriter\n     size_t nPos;\n };\n \n-/** Minimal stream for reading from an existing vector by reference\n+/** Minimal stream for reading from an existing byte array by Span.\n  */\n-class VectorReader\n+class SpanReader\n {\n private:\n     const int m_type;\n     const int m_version;\n-    const std::vector<unsigned char>& m_data;\n-    size_t m_pos = 0;\n+    Span<const unsigned char> m_data;\n \n public:\n \n@@ -146,28 +145,29 @@ class VectorReader\n      * @param[in]  data Referenced byte vector to overwrite/append\n      * @param[in]  pos Starting position. Vector index where reads should start.\n      */\n-    VectorReader(int type, int version, const std::vector<unsigned char>& data, size_t pos)\n-        : m_type(type), m_version(version), m_data(data), m_pos(pos)\n+    SpanReader(int type, int version, Span<const unsigned char> data, size_t pos)\n+        : m_type(type), m_version(version), m_data(data)\n     {\n-        if (m_pos > m_data.size()) {\n-            throw std::ios_base::failure(\"VectorReader(...): end of data (m_pos > m_data.size())\");\n+        if (pos > m_data.size()) {\n+            throw std::ios_base::failure(\"SpanReader(...): end of data (pos > m_data.size())\");\n         }\n+        data = data.subspan(pos);\n     }\n \n     /**\n      * (other params same as above)\n      * @param[in]  args  A list of items to deserialize starting at pos.\n      */\n     template <typename... Args>\n-    VectorReader(int type, int version, const std::vector<unsigned char>& data, size_t pos,\n+    SpanReader(int type, int version, Span<const unsigned char> data, size_t pos,\n                   Args&&... args)\n-        : VectorReader(type, version, data, pos)\n+        : SpanReader(type, version, data, pos)\n     {\n         ::UnserializeMany(*this, std::forward<Args>(args)...);\n     }\n \n     template<typename T>\n-    VectorReader& operator>>(T&& obj)\n+    SpanReader& operator>>(T&& obj)\n     {\n         // Unserialize from this stream\n         ::Unserialize(*this, obj);\n@@ -177,8 +177,8 @@ class VectorReader\n     int GetVersion() const { return m_version; }\n     int GetType() const { return m_type; }\n \n-    size_t size() const { return m_data.size() - m_pos; }\n-    bool empty() const { return m_data.size() == m_pos; }\n+    size_t size() const { return m_data.size(); }\n+    bool empty() const { return m_data.empty(); }\n \n     void read(char* dst, size_t n)\n     {\n@@ -187,12 +187,11 @@ class VectorReader\n         }\n \n         // Read from the beginning of the buffer\n-        size_t pos_next = m_pos + n;\n-        if (pos_next > m_data.size()) {\n-            throw std::ios_base::failure(\"VectorReader::read(): end of data\");\n+        if (n > m_data.size()) {\n+            throw std::ios_base::failure(\"SpanReader::read(): end of data\");\n         }\n-        memcpy(dst, m_data.data() + m_pos, n);\n-        m_pos = pos_next;\n+        memcpy(dst, m_data.data(), n);\n+        m_data = m_data.subspan(n);\n     }\n };\n "
      },
      {
        "sha": "7b4634c67bc3ded7d66dbea773087b9aa2af8532",
        "filename": "src/test/fuzz/golomb_rice.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c35a93b3cc19dc71d5664f9f61c24a04f419e35/src/test/fuzz/golomb_rice.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c35a93b3cc19dc71d5664f9f61c24a04f419e35/src/test/fuzz/golomb_rice.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/golomb_rice.cpp?ref=2c35a93b3cc19dc71d5664f9f61c24a04f419e35",
        "patch": "@@ -82,8 +82,8 @@ FUZZ_TARGET(golomb_rice)\n \n     std::vector<uint64_t> decoded_deltas;\n     {\n-        VectorReader stream{SER_NETWORK, 0, golomb_rice_data, 0};\n-        BitStreamReader<VectorReader> bitreader(stream);\n+        SpanReader stream{SER_NETWORK, 0, golomb_rice_data, 0};\n+        BitStreamReader<SpanReader> bitreader{stream};\n         const uint32_t n = static_cast<uint32_t>(ReadCompactSize(stream));\n         for (uint32_t i = 0; i < n; ++i) {\n             decoded_deltas.push_back(GolombRiceDecode(bitreader, BASIC_FILTER_P));\n@@ -94,14 +94,14 @@ FUZZ_TARGET(golomb_rice)\n \n     {\n         const std::vector<uint8_t> random_bytes = ConsumeRandomLengthByteVector(fuzzed_data_provider, 1024);\n-        VectorReader stream{SER_NETWORK, 0, random_bytes, 0};\n+        SpanReader stream{SER_NETWORK, 0, random_bytes, 0};\n         uint32_t n;\n         try {\n             n = static_cast<uint32_t>(ReadCompactSize(stream));\n         } catch (const std::ios_base::failure&) {\n             return;\n         }\n-        BitStreamReader<VectorReader> bitreader(stream);\n+        BitStreamReader<SpanReader> bitreader{stream};\n         for (uint32_t i = 0; i < std::min<uint32_t>(n, 1024); ++i) {\n             try {\n                 (void)GolombRiceDecode(bitreader, BASIC_FILTER_P);"
      },
      {
        "sha": "d661d79e84cf1df410e4b44b91e62e6bea2baef0",
        "filename": "src/test/fuzz/script_assets_test_minimizer.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c35a93b3cc19dc71d5664f9f61c24a04f419e35/src/test/fuzz/script_assets_test_minimizer.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c35a93b3cc19dc71d5664f9f61c24a04f419e35/src/test/fuzz/script_assets_test_minimizer.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/script_assets_test_minimizer.cpp?ref=2c35a93b3cc19dc71d5664f9f61c24a04f419e35",
        "patch": "@@ -54,7 +54,7 @@ CMutableTransaction TxFromHex(const std::string& str)\n {\n     CMutableTransaction tx;\n     try {\n-        VectorReader(SER_DISK, SERIALIZE_TRANSACTION_NO_WITNESS, CheckedParseHex(str), 0) >> tx;\n+        SpanReader{SER_DISK, SERIALIZE_TRANSACTION_NO_WITNESS, CheckedParseHex(str), 0} >> tx;\n     } catch (const std::ios_base::failure&) {\n         throw std::runtime_error(\"Tx deserialization failure\");\n     }\n@@ -68,7 +68,7 @@ std::vector<CTxOut> TxOutsFromJSON(const UniValue& univalue)\n     for (size_t i = 0; i < univalue.size(); ++i) {\n         CTxOut txout;\n         try {\n-            VectorReader(SER_DISK, 0, CheckedParseHex(univalue[i].get_str()), 0) >> txout;\n+            SpanReader{SER_DISK, 0, CheckedParseHex(univalue[i].get_str()), 0} >> txout;\n         } catch (const std::ios_base::failure&) {\n             throw std::runtime_error(\"Prevout invalid format\");\n         }"
      },
      {
        "sha": "af375f784249d0ac9e65a68eb660c273d3a46c2e",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c35a93b3cc19dc71d5664f9f61c24a04f419e35/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c35a93b3cc19dc71d5664f9f61c24a04f419e35/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=2c35a93b3cc19dc71d5664f9f61c24a04f419e35",
        "patch": "@@ -1473,7 +1473,7 @@ BOOST_AUTO_TEST_CASE(script_HasValidOps)\n static CMutableTransaction TxFromHex(const std::string& str)\n {\n     CMutableTransaction tx;\n-    VectorReader(SER_DISK, SERIALIZE_TRANSACTION_NO_WITNESS, ParseHex(str), 0) >> tx;\n+    SpanReader{SER_DISK, SERIALIZE_TRANSACTION_NO_WITNESS, ParseHex(str), 0} >> tx;\n     return tx;\n }\n \n@@ -1483,7 +1483,7 @@ static std::vector<CTxOut> TxOutsFromJSON(const UniValue& univalue)\n     std::vector<CTxOut> prevouts;\n     for (size_t i = 0; i < univalue.size(); ++i) {\n         CTxOut txout;\n-        VectorReader(SER_DISK, 0, ParseHex(univalue[i].get_str()), 0) >> txout;\n+        SpanReader{SER_DISK, 0, ParseHex(univalue[i].get_str()), 0} >> txout;\n         prevouts.push_back(std::move(txout));\n     }\n     return prevouts;\n@@ -1754,7 +1754,7 @@ BOOST_AUTO_TEST_CASE(bip341_keypath_test_vectors)\n     for (const auto& vec : vectors.getValues()) {\n         auto txhex = ParseHex(vec[\"given\"][\"rawUnsignedTx\"].get_str());\n         CMutableTransaction tx;\n-        VectorReader(SER_NETWORK, PROTOCOL_VERSION, txhex, 0) >> tx;\n+        SpanReader{SER_NETWORK, PROTOCOL_VERSION, txhex, 0} >> tx;\n         std::vector<CTxOut> utxos;\n         for (const auto& utxo_spent : vec[\"given\"][\"utxosSpent\"].getValues()) {\n             auto script_bytes = ParseHex(utxo_spent[\"scriptPubKey\"].get_str());"
      },
      {
        "sha": "f551663789a0d3a1b466c4451ba3ff0a9b2f3edf",
        "filename": "src/test/streams_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c35a93b3cc19dc71d5664f9f61c24a04f419e35/src/test/streams_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c35a93b3cc19dc71d5664f9f61c24a04f419e35/src/test/streams_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/streams_tests.cpp?ref=2c35a93b3cc19dc71d5664f9f61c24a04f419e35",
        "patch": "@@ -71,7 +71,7 @@ BOOST_AUTO_TEST_CASE(streams_vector_reader)\n {\n     std::vector<unsigned char> vch = {1, 255, 3, 4, 5, 6};\n \n-    VectorReader reader(SER_NETWORK, INIT_PROTO_VERSION, vch, 0);\n+    SpanReader reader{SER_NETWORK, INIT_PROTO_VERSION, vch, 0};\n     BOOST_CHECK_EQUAL(reader.size(), 6U);\n     BOOST_CHECK(!reader.empty());\n \n@@ -101,7 +101,7 @@ BOOST_AUTO_TEST_CASE(streams_vector_reader)\n     BOOST_CHECK_THROW(reader >> d, std::ios_base::failure);\n \n     // Read a 4 bytes as a signed int from the beginning of the buffer.\n-    VectorReader new_reader(SER_NETWORK, INIT_PROTO_VERSION, vch, 0);\n+    SpanReader new_reader{SER_NETWORK, INIT_PROTO_VERSION, vch, 0};\n     new_reader >> d;\n     BOOST_CHECK_EQUAL(d, 67370753); // 1,255,3,4 in little-endian base-256\n     BOOST_CHECK_EQUAL(new_reader.size(), 2U);\n@@ -115,7 +115,7 @@ BOOST_AUTO_TEST_CASE(streams_vector_reader)\n BOOST_AUTO_TEST_CASE(streams_vector_reader_rvalue)\n {\n     std::vector<uint8_t> data{0x82, 0xa7, 0x31};\n-    VectorReader reader(SER_NETWORK, INIT_PROTO_VERSION, data, /* pos= */ 0);\n+    SpanReader reader{SER_NETWORK, INIT_PROTO_VERSION, data, /* pos= */ 0};\n     uint32_t varint = 0;\n     // Deserialize into r-value\n     reader >> VARINT(varint);"
      },
      {
        "sha": "6925d9ef2a4b1be4c5175e97984e5878745e842f",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c35a93b3cc19dc71d5664f9f61c24a04f419e35/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c35a93b3cc19dc71d5664f9f61c24a04f419e35/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=2c35a93b3cc19dc71d5664f9f61c24a04f419e35",
        "patch": "@@ -682,7 +682,7 @@ BOOST_FIXTURE_TEST_CASE(wallet_descriptor_test, BasicTestingSetup)\n     vw << (int32_t)0;\n     vw << (int32_t)1;\n \n-    VectorReader vr(0, 0, malformed_record, 0);\n+    SpanReader vr{0, 0, malformed_record, 0};\n     WalletDescriptor w_desc;\n     BOOST_CHECK_EXCEPTION(vr >> w_desc, std::ios_base::failure, malformed_descriptor);\n }"
      }
    ]
  }
]