[
  {
    "sha": "018b60c5ea703ed12edcde034a185f79e77e5576",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMThiNjBjNWVhNzAzZWQxMmVkY2RlMDM0YTE4NWY3OWU3N2U1NTc2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-03-25T13:21:24Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-03-26T07:10:07Z"
      },
      "message": "test_framework: detect failure of bitcoind startup\n\nReplace the `bitcoin-cli -rpcwait` after spawning bitcoind\nwith our own loop that detects when bitcoind exits prematurely.\n\nAnd if one node fails to start, stop the others.\n\nThis prevents a hang in such a case (see #7463).",
      "tree": {
        "sha": "bcc67ce2f1d33be71a97662793c0eec77b42f401",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bcc67ce2f1d33be71a97662793c0eec77b42f401"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/018b60c5ea703ed12edcde034a185f79e77e5576",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/018b60c5ea703ed12edcde034a185f79e77e5576",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/018b60c5ea703ed12edcde034a185f79e77e5576",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/018b60c5ea703ed12edcde034a185f79e77e5576/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0b98dd7939674b61c28252d14b3fbd0f51d3912b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b98dd7939674b61c28252d14b3fbd0f51d3912b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0b98dd7939674b61c28252d14b3fbd0f51d3912b"
      }
    ],
    "stats": {
      "total": 60,
      "additions": 40,
      "deletions": 20
    },
    "files": [
      {
        "sha": "f069c32a607badf4ea74c458b72bf4ebf26cb0f1",
        "filename": "qa/rpc-tests/test_framework/util.py",
        "status": "modified",
        "additions": 40,
        "deletions": 20,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/018b60c5ea703ed12edcde034a185f79e77e5576/qa/rpc-tests/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/018b60c5ea703ed12edcde034a185f79e77e5576/qa/rpc-tests/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/util.py?ref=018b60c5ea703ed12edcde034a185f79e77e5576",
        "patch": "@@ -16,6 +16,7 @@\n import subprocess\n import time\n import re\n+import errno\n \n from . import coverage\n from .authproxy import AuthServiceProxy, JSONRPCException\n@@ -130,11 +131,33 @@ def initialize_datadir(dirname, n):\n         f.write(\"listenonion=0\\n\")\n     return datadir\n \n+def rpc_url(i, rpchost=None):\n+    return \"http://rt:rt@%s:%d\" % (rpchost or '127.0.0.1', rpc_port(i))\n+\n+def wait_for_bitcoind_start(process, url, i):\n+    '''\n+    Wait for bitcoind to start. This means that RPC is accessible and fully initialized.\n+    Raise an exception if bitcoind exits during initialization.\n+    '''\n+    while True:\n+        if process.poll() is not None:\n+            raise Exception('bitcoind exited with status %i during initialization' % process.returncode)\n+        try:\n+            rpc = get_rpc_proxy(url, i)\n+            blocks = rpc.getblockcount()\n+            break # break out of loop on success\n+        except IOError as e:\n+            if e.errno != errno.ECONNREFUSED: # Port not yet open?\n+                raise # unknown IO error\n+        except JSONRPCException as e: # Initialization phase\n+            if e.error['code'] != -28: # RPC in warmup?\n+                raise # unkown JSON RPC exception\n+        time.sleep(0.25)\n+\n def initialize_chain(test_dir):\n     \"\"\"\n     Create (or copy from cache) a 200-block-long chain and\n     4 wallets.\n-    bitcoind and bitcoin-cli must be in search path.\n     \"\"\"\n \n     if (not os.path.isdir(os.path.join(\"cache\",\"node0\"))\n@@ -147,7 +170,6 @@ def initialize_chain(test_dir):\n             if os.path.isdir(os.path.join(\"cache\",\"node\"+str(i))):\n                 shutil.rmtree(os.path.join(\"cache\",\"node\"+str(i)))\n \n-        devnull = open(os.devnull, \"w\")\n         # Create cache directories, run bitcoinds:\n         for i in range(4):\n             datadir=initialize_datadir(\"cache\", i)\n@@ -156,19 +178,15 @@ def initialize_chain(test_dir):\n                 args.append(\"-connect=127.0.0.1:\"+str(p2p_port(0)))\n             bitcoind_processes[i] = subprocess.Popen(args)\n             if os.getenv(\"PYTHON_DEBUG\", \"\"):\n-                print \"initialize_chain: bitcoind started, calling bitcoin-cli -rpcwait getblockcount\"\n-            subprocess.check_call([ os.getenv(\"BITCOINCLI\", \"bitcoin-cli\"), \"-datadir=\"+datadir,\n-                                    \"-rpcwait\", \"getblockcount\"], stdout=devnull)\n+                print \"initialize_chain: bitcoind started, waiting for RPC to come up\"\n+            wait_for_bitcoind_start(bitcoind_processes[i], rpc_url(i), i)\n             if os.getenv(\"PYTHON_DEBUG\", \"\"):\n-                print \"initialize_chain: bitcoin-cli -rpcwait getblockcount completed\"\n-        devnull.close()\n+                print \"initialize_chain: RPC succesfully started\"\n \n         rpcs = []\n-\n         for i in range(4):\n             try:\n-                url = \"http://rt:rt@127.0.0.1:%d\" % (rpc_port(i),)\n-                rpcs.append(get_rpc_proxy(url, i))\n+                rpcs.append(get_rpc_proxy(rpc_url(i), i))\n             except:\n                 sys.stderr.write(\"Error connecting to \"+url+\"\\n\")\n                 sys.exit(1)\n@@ -243,17 +261,12 @@ def start_node(i, dirname, extra_args=None, rpchost=None, timewait=None, binary=\n     args = [ binary, \"-datadir=\"+datadir, \"-server\", \"-keypool=1\", \"-discover=0\", \"-rest\", \"-mocktime=\"+str(get_mocktime()) ]\n     if extra_args is not None: args.extend(extra_args)\n     bitcoind_processes[i] = subprocess.Popen(args)\n-    devnull = open(os.devnull, \"w\")\n     if os.getenv(\"PYTHON_DEBUG\", \"\"):\n-        print \"start_node: bitcoind started, calling bitcoin-cli -rpcwait getblockcount\"\n-    subprocess.check_call([ os.getenv(\"BITCOINCLI\", \"bitcoin-cli\"), \"-datadir=\"+datadir] +\n-                          _rpchost_to_args(rpchost)  +\n-                          [\"-rpcwait\", \"getblockcount\"], stdout=devnull)\n+        print \"start_node: bitcoind started, waiting for RPC to come up\"\n+    url = rpc_url(i, rpchost)\n+    wait_for_bitcoind_start(bitcoind_processes[i], url, i)\n     if os.getenv(\"PYTHON_DEBUG\", \"\"):\n-        print \"start_node: calling bitcoin-cli -rpcwait getblockcount returned\"\n-    devnull.close()\n-    url = \"http://rt:rt@%s:%d\" % (rpchost or '127.0.0.1', rpc_port(i))\n-\n+        print \"start_node: RPC succesfully started\"\n     proxy = get_rpc_proxy(url, i, timeout=timewait)\n \n     if COVERAGE_DIR:\n@@ -267,7 +280,14 @@ def start_nodes(num_nodes, dirname, extra_args=None, rpchost=None, binary=None):\n     \"\"\"\n     if extra_args is None: extra_args = [ None for i in range(num_nodes) ]\n     if binary is None: binary = [ None for i in range(num_nodes) ]\n-    return [ start_node(i, dirname, extra_args[i], rpchost, binary=binary[i]) for i in range(num_nodes) ]\n+    rpcs = []\n+    try:\n+        for i in range(num_nodes):\n+            rpcs.append(start_node(i, dirname, extra_args[i], rpchost, binary=binary[i]))\n+    except: # If one node failed to start, stop the others\n+        stop_nodes(rpcs)\n+        raise\n+    return rpcs\n \n def log_filename(dirname, n_node, logname):\n     return os.path.join(dirname, \"node\"+str(n_node), \"regtest\", logname)"
      }
    ]
  }
]