[
  {
    "sha": "f9463ded6872e86748819d0e4f7e8330e0257a72",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmOTQ2M2RlZDY4NzJlODY3NDg4MTlkMGU0ZjdlODMzMGUwMjU3YTcy",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2014-01-24T20:43:31Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2014-01-25T14:26:20Z"
      },
      "message": "Add network node whitelisting based on jgarzik's previous pull req.\n\nThis takes jgarzik's previous pullreq and rejiggers a few things so\nthat you can now add IP:0 to allow any port and so that banned nodes\ncan make incoming connections as well. Also fixes an off-by-one in\nthe param count for the listwhite RPC.",
      "tree": {
        "sha": "0c29dbf6c447d22bde0f0aa4e212e0c8017167a9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0c29dbf6c447d22bde0f0aa4e212e0c8017167a9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f9463ded6872e86748819d0e4f7e8330e0257a72",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f9463ded6872e86748819d0e4f7e8330e0257a72",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f9463ded6872e86748819d0e4f7e8330e0257a72",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f9463ded6872e86748819d0e4f7e8330e0257a72/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d0a94f2c2f127768acd9be4c0905d40f609ba6fc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d0a94f2c2f127768acd9be4c0905d40f609ba6fc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d0a94f2c2f127768acd9be4c0905d40f609ba6fc"
      }
    ],
    "stats": {
      "total": 118,
      "additions": 117,
      "deletions": 1
    },
    "files": [
      {
        "sha": "bfb5a68e12f109a7fec812d2a0a723eaa53309d9",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f9463ded6872e86748819d0e4f7e8330e0257a72/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f9463ded6872e86748819d0e4f7e8330e0257a72/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=f9463ded6872e86748819d0e4f7e8330e0257a72",
        "patch": "@@ -534,6 +534,9 @@ bool AppInit2(boost::thread_group& threadGroup)\n \n     strWalletFile = GetArg(\"-wallet\", \"wallet.dat\");\n #endif\n+\n+    LoadWhitelist();\n+\n     // ********************************************************* Step 4: application initialization: dir lock, daemonize, pidfile, debug log\n \n     std::string strDataDir = GetDataDir().string();"
      },
      {
        "sha": "6585db4a1073c32f1ab716104d1a64a389290ac8",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f9463ded6872e86748819d0e4f7e8330e0257a72/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f9463ded6872e86748819d0e4f7e8330e0257a72/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=f9463ded6872e86748819d0e4f7e8330e0257a72",
        "patch": "@@ -4028,6 +4028,8 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n         if (State(pto->GetId())->fShouldBan) {\n             if (pto->addr.IsLocal())\n                 LogPrintf(\"Warning: not banning local node %s!\\n\", pto->addr.ToString());\n+            else if (IsWhitelisted(pto->addr))\n+                LogPrintf(\"Warning: not banning whitelisted node %s!\\n\", pto->addr.ToString());\n             else {\n                 pto->fDisconnect = true;\n                 CNode::Ban(pto->addr);"
      },
      {
        "sha": "cc8ee6262d7948e63cb1d644813967777cc06878",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 61,
        "deletions": 1,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f9463ded6872e86748819d0e4f7e8330e0257a72/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f9463ded6872e86748819d0e4f7e8330e0257a72/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=f9463ded6872e86748819d0e4f7e8330e0257a72",
        "patch": "@@ -54,6 +54,8 @@ bool fDiscover = true;\n uint64_t nLocalServices = NODE_NETWORK;\n static CCriticalSection cs_mapLocalHost;\n static map<CNetAddr, LocalServiceInfo> mapLocalHost;\n+static CCriticalSection cs_mapWhitelist;\n+static map<CNetAddr, set<int> > mapWhitelist;\n static bool vfReachable[NET_MAX] = {};\n static bool vfLimited[NET_MAX] = {};\n static CNode* pnodeLocalHost = NULL;\n@@ -300,6 +302,64 @@ bool IsReachable(const CNetAddr& addr)\n     return vfReachable[net] && !vfLimited[net];\n }\n \n+/** learn a new whitelisted address */\n+bool AddWhitelist(const CService& addr)\n+{\n+    LogPrintf(\"AddWhitelist(%s)\\n\", addr.ToString().c_str());\n+\n+    {\n+        LOCK(cs_mapWhitelist);\n+        set<int>& ports = mapWhitelist[addr];\n+        if (addr.GetPort() != 0 && !ports.count(0)) {\n+            ports.insert(addr.GetPort());\n+        } else {\n+            ports.clear();\n+            ports.insert(0);\n+        }\n+    }\n+\n+    return true;\n+}\n+\n+/** check if node is whitelisted */\n+bool IsWhitelisted(const CService& addr)\n+{\n+    LOCK(cs_mapWhitelist);\n+    if (!mapWhitelist.count(addr))\n+        return false;\n+\n+    set<int>& ports = mapWhitelist[addr];\n+    return ports.count(addr.GetPort()) || ports.count(0);\n+}\n+\n+/** load configuration into whitelist */\n+void LoadWhitelist()\n+{\n+    // Connect to specific addresses\n+    if (mapArgs.count(\"-whitelist\") && mapMultiArgs[\"-whitelist\"].size() > 0)\n+    {\n+        BOOST_FOREACH(string strAddr, mapMultiArgs[\"-whitelist\"])\n+        {\n+            CService serv(strAddr.c_str(), 0, true);\n+            if (serv.IsValid())\n+                AddWhitelist(serv);\n+        }\n+    }\n+}\n+\n+/** return all whitelisted nodes */\n+void GetWhitelist(std::vector<CService>& wl)\n+{\n+    LOCK(cs_mapWhitelist);\n+    for (map<CNetAddr, set<int> >::iterator it = mapWhitelist.begin();\n+         it != mapWhitelist.end(); ++it) {\n+        BOOST_FOREACH(int port, it->second) {\n+            CService serv(it->first, port);\n+            wl.push_back(serv);\n+        }\n+    }\n+}\n+\n bool GetMyExternalIP2(const CService& addrConnect, const char* pszGet, const char* pszKeyword, CNetAddr& ipRet)\n {\n     SOCKET hSocket;\n@@ -950,7 +1010,7 @@ void ThreadSocketHandler()\n                         closesocket(hSocket);\n                 }\n             }\n-            else if (CNode::IsBanned(addr))\n+            else if (!IsWhitelisted(addr) && CNode::IsBanned(addr))\n             {\n                 LogPrintf(\"connection from %s dropped (banned)\\n\", addr.ToString());\n                 closesocket(hSocket);"
      },
      {
        "sha": "35832170eb8424a7823a0d721847f6dc8ace2862",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f9463ded6872e86748819d0e4f7e8330e0257a72/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f9463ded6872e86748819d0e4f7e8330e0257a72/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=f9463ded6872e86748819d0e4f7e8330e0257a72",
        "patch": "@@ -92,6 +92,10 @@ bool AddLocal(const CService& addr, int nScore = LOCAL_NONE);\n bool AddLocal(const CNetAddr& addr, int nScore = LOCAL_NONE);\n bool SeenLocal(const CService& addr);\n bool IsLocal(const CService& addr);\n+bool AddWhitelist(const CService& addr);\n+bool IsWhitelisted(const CService& addr);\n+void LoadWhitelist();\n+void GetWhitelist(std::vector<CService>& wl);\n bool GetLocal(CService &addr, const CNetAddr *paddrPeer = NULL);\n bool IsReachable(const CNetAddr &addr);\n void SetReachable(enum Network net, bool fFlag = true);"
      },
      {
        "sha": "9c2d2765930bf68fac80be16a6f6f13fd268fedb",
        "filename": "src/rpcnet.cpp",
        "status": "modified",
        "additions": 43,
        "deletions": 0,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f9463ded6872e86748819d0e4f7e8330e0257a72/src/rpcnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f9463ded6872e86748819d0e4f7e8330e0257a72/src/rpcnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcnet.cpp?ref=f9463ded6872e86748819d0e4f7e8330e0257a72",
        "patch": "@@ -149,6 +149,49 @@ Value getpeerinfo(const Array& params, bool fHelp)\n     return ret;\n }\n \n+Value addwhite(const Array& params, bool fHelp)\n+{\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"addwhite \\\"node\\\"\\n\"\n+            \"\\nAttempts add a node to the whitelist.\\n\"\n+            \"A port of 0 indicates that all ports are valid for the given IP\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"node\\\"     (string, required) The node (see getpeerinfo for nodes)\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"addwhite\", \"\\\"192.168.0.6:8333\\\" \")\n+            + HelpExampleRpc(\"addwhite\", \"\\\"192.168.0.6:8333\\\" \")\n+        );\n+\n+    string strNode = params[0].get_str();\n+\n+    CService serv(strNode.c_str(), 0, true);\n+\n+    return AddWhitelist(serv);\n+}\n+\n+Value listwhite(const Array& params, bool fHelp)\n+{\n+    if (fHelp || params.size() != 0)\n+        throw runtime_error(\n+            \"listwhite\\n\"\n+            \"\\nList whitelisted nodes\\n\"\n+        );\n+\n+    std::vector<CService> wl;\n+    GetWhitelist(wl);\n+\n+    Array res;\n+\n+    for (unsigned int i = 0; i < wl.size(); i++) {\n+        Object obj;\n+        obj.push_back(Pair(\"address\", wl[i].ToStringIPPort()));\n+        res.push_back(obj);\n+    }\n+\n+    return res;\n+}\n+\n Value addnode(const Array& params, bool fHelp)\n {\n     string strCommand;"
      },
      {
        "sha": "d82154c49bc4b4978fde43758d25e8b9ff7ee706",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f9463ded6872e86748819d0e4f7e8330e0257a72/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f9463ded6872e86748819d0e4f7e8330e0257a72/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=f9463ded6872e86748819d0e4f7e8330e0257a72",
        "patch": "@@ -231,6 +231,8 @@ static const CRPCCommand vRPCCommands[] =\n     { \"getpeerinfo\",            &getpeerinfo,            true,      false,      false },\n     { \"ping\",                   &ping,                   true,      false,      false },\n     { \"addnode\",                &addnode,                true,      true,       false },\n+    { \"addwhite\",               &addwhite,               true,      true,       false },\n+    { \"listwhite\",              &listwhite,              true,      true,       false },\n     { \"getaddednodeinfo\",       &getaddednodeinfo,       true,      true,       false },\n     { \"getnettotals\",           &getnettotals,           true,      true,       false },\n     { \"getdifficulty\",          &getdifficulty,          true,      false,      false },"
      },
      {
        "sha": "25b32882e7f06ad8ba5169d7879b1164523ab388",
        "filename": "src/rpcserver.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f9463ded6872e86748819d0e4f7e8330e0257a72/src/rpcserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f9463ded6872e86748819d0e4f7e8330e0257a72/src/rpcserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.h?ref=f9463ded6872e86748819d0e4f7e8330e0257a72",
        "patch": "@@ -113,6 +113,8 @@ extern json_spirit::Value getconnectioncount(const json_spirit::Array& params, b\n extern json_spirit::Value getpeerinfo(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value ping(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value addnode(const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value addwhite(const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value listwhite(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value getaddednodeinfo(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value getnettotals(const json_spirit::Array& params, bool fHelp);\n "
      }
    ]
  }
]