[
  {
    "sha": "bfc30b34374d71928acee5ff41282f09cedfd5e4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZmMzMGIzNDM3NGQ3MTkyOGFjZWU1ZmY0MTI4MmYwOWNlZGZkNWU0",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2015-06-02T19:17:36Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2015-06-03T15:36:04Z"
      },
      "message": "Ignore unrequested blocks too far ahead of tip",
      "tree": {
        "sha": "2647af91f5757f0981bd666f1cbc10d8032bcc5a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2647af91f5757f0981bd666f1cbc10d8032bcc5a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bfc30b34374d71928acee5ff41282f09cedfd5e4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bfc30b34374d71928acee5ff41282f09cedfd5e4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bfc30b34374d71928acee5ff41282f09cedfd5e4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bfc30b34374d71928acee5ff41282f09cedfd5e4/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9d6060244429c4591e6ca62749f4f73cd981f247",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d6060244429c4591e6ca62749f4f73cd981f247",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9d6060244429c4591e6ca62749f4f73cd981f247"
      }
    ],
    "stats": {
      "total": 74,
      "additions": 63,
      "deletions": 11
    },
    "files": [
      {
        "sha": "6431f430aaaa6e71c0cfd05bde379d86820f2e47",
        "filename": "qa/rpc-tests/p2p-acceptblock.py",
        "status": "modified",
        "additions": 55,
        "deletions": 10,
        "changes": 65,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfc30b34374d71928acee5ff41282f09cedfd5e4/qa/rpc-tests/p2p-acceptblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfc30b34374d71928acee5ff41282f09cedfd5e4/qa/rpc-tests/p2p-acceptblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-acceptblock.py?ref=bfc30b34374d71928acee5ff41282f09cedfd5e4",
        "patch": "@@ -40,6 +40,11 @@\n    it's missing an intermediate block.\n    Node1 should reorg to this longer chain.\n \n+4b.Send 288 more blocks on the longer chain.\n+   Node0 should process all but the last block (too far ahead in height).\n+   Send all headers to Node1, and then send the last block in that chain.\n+   Node1 should accept the block because it's coming from a whitelisted peer.\n+\n 5. Send a duplicate of the block in #3 to Node0.\n    Node0 should not process the block because it is unrequested, and stay on\n    the shorter chain.\n@@ -126,13 +131,15 @@ def run_test(self):\n         # 2. Send one block that builds on each tip.\n         # This should be accepted.\n         blocks_h2 = []  # the height 2 blocks on each node's chain\n+        block_time = time.time() + 1\n         for i in xrange(2):\n-            blocks_h2.append(create_block(tips[i], create_coinbase(), time.time()+1))\n+            blocks_h2.append(create_block(tips[i], create_coinbase(), block_time))\n             blocks_h2[i].solve()\n+            block_time += 1\n         test_node.send_message(msg_block(blocks_h2[0]))\n         white_node.send_message(msg_block(blocks_h2[1]))\n \n-        time.sleep(1)\n+        time.sleep(0.5)\n         assert_equal(self.nodes[0].getblockcount(), 2)\n         assert_equal(self.nodes[1].getblockcount(), 2)\n         print \"First height 2 block accepted by both nodes\"\n@@ -145,7 +152,7 @@ def run_test(self):\n         test_node.send_message(msg_block(blocks_h2f[0]))\n         white_node.send_message(msg_block(blocks_h2f[1]))\n \n-        time.sleep(1)  # Give time to process the block\n+        time.sleep(0.5)  # Give time to process the block\n         for x in self.nodes[0].getchaintips():\n             if x['hash'] == blocks_h2f[0].hash:\n                 assert_equal(x['status'], \"headers-only\")\n@@ -164,7 +171,7 @@ def run_test(self):\n         test_node.send_message(msg_block(blocks_h3[0]))\n         white_node.send_message(msg_block(blocks_h3[1]))\n \n-        time.sleep(1)\n+        time.sleep(0.5)\n         # Since the earlier block was not processed by node0, the new block\n         # can't be fully validated.\n         for x in self.nodes[0].getchaintips():\n@@ -182,6 +189,45 @@ def run_test(self):\n         assert_equal(self.nodes[1].getblockcount(), 3)\n         print \"Successfully reorged to length 3 chain from whitelisted peer\"\n \n+        # 4b. Now mine 288 more blocks and deliver; all should be processed but\n+        # the last (height-too-high) on node0.  Node1 should process the tip if\n+        # we give it the headers chain leading to the tip.\n+        tips = blocks_h3\n+        headers_message = msg_headers()\n+        all_blocks = []   # node0's blocks\n+        for j in xrange(2):\n+            for i in xrange(288):\n+                next_block = create_block(tips[j].sha256, create_coinbase(), tips[j].nTime+1)\n+                next_block.solve()\n+                if j==0:\n+                    test_node.send_message(msg_block(next_block))\n+                    all_blocks.append(next_block)\n+                else:\n+                    headers_message.headers.append(CBlockHeader(next_block))\n+                tips[j] = next_block\n+\n+        time.sleep(2)\n+        for x in all_blocks:\n+            try:\n+                self.nodes[0].getblock(x.hash)\n+                if x == all_blocks[287]:\n+                    raise AssertionError(\"Unrequested block too far-ahead should have been ignored\")\n+            except:\n+                if x == all_blocks[287]:\n+                    print \"Unrequested block too far-ahead not processed\"\n+                else:\n+                    raise AssertionError(\"Unrequested block with more work should have been accepted\")\n+\n+        headers_message.headers.pop() # Ensure the last block is unrequested\n+        white_node.send_message(headers_message) # Send headers leading to tip\n+        white_node.send_message(msg_block(tips[1]))  # Now deliver the tip\n+        try:\n+            time.sleep(0.5)\n+            self.nodes[1].getblock(tips[1].hash)\n+            print \"Unrequested block far ahead of tip accepted from whitelisted peer\"\n+        except:\n+            raise AssertionError(\"Unrequested block from whitelisted peer not accepted\")\n+\n         # 5. Test handling of unrequested block on the node that didn't process\n         # Should still not be processed (even though it has a child that has more\n         # work).\n@@ -204,21 +250,20 @@ def run_test(self):\n             test_node.last_getdata = None\n             test_node.send_message(msg_inv([CInv(2, blocks_h3[0].sha256)]))\n \n-        time.sleep(1)\n+        time.sleep(0.5)\n         with mininode_lock:\n             getdata = test_node.last_getdata\n \n-        # Check that the getdata is for the right block\n-        assert_equal(len(getdata.inv), 1)\n+        # Check that the getdata includes the right block\n         assert_equal(getdata.inv[0].hash, blocks_h2f[0].sha256)\n         print \"Inv at tip triggered getdata for unprocessed block\"\n \n         # 7. Send the missing block for the third time (now it is requested)\n         test_node.send_message(msg_block(blocks_h2f[0]))\n \n-        time.sleep(1)\n-        assert_equal(self.nodes[0].getblockcount(), 3)\n-        print \"Successfully reorged to length 3 chain from non-whitelisted peer\"\n+        time.sleep(2)\n+        assert_equal(self.nodes[0].getblockcount(), 290)\n+        print \"Successfully reorged to longer chain from non-whitelisted peer\"\n \n         [ c.disconnect_node() for c in connections ]\n "
      },
      {
        "sha": "e0997515b70854479348829165a7199152bb7c0b",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 1,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfc30b34374d71928acee5ff41282f09cedfd5e4/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfc30b34374d71928acee5ff41282f09cedfd5e4/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=bfc30b34374d71928acee5ff41282f09cedfd5e4",
        "patch": "@@ -2841,16 +2841,23 @@ bool AcceptBlock(CBlock& block, CValidationState& state, CBlockIndex** ppindex,\n \n     // Try to process all requested blocks that we don't have, but only\n     // process an unrequested block if it's new and has enough work to\n-    // advance our tip.\n+    // advance our tip, and isn't too many blocks ahead.\n     bool fAlreadyHave = pindex->nStatus & BLOCK_HAVE_DATA;\n     bool fHasMoreWork = (chainActive.Tip() ? pindex->nChainWork > chainActive.Tip()->nChainWork : true);\n+    // Blocks that are too out-of-order needlessly limit the effectiveness of\n+    // pruning, because pruning will not delete block files that contain any\n+    // blocks which are too close in height to the tip.  Apply this test\n+    // regardless of whether pruning is enabled; it should generally be safe to\n+    // not process unrequested blocks.\n+    bool fTooFarAhead = (pindex->nHeight - chainActive.Height()) > MIN_BLOCKS_TO_KEEP;\n \n     // TODO: deal better with return value and error conditions for duplicate\n     // and unrequested blocks.\n     if (fAlreadyHave) return true;\n     if (!fRequested) {  // If we didn't ask for it:\n         if (pindex->nTx != 0) return true;  // This is a previously-processed block that was pruned\n         if (!fHasMoreWork) return true;     // Don't process less-work chains\n+        if (fTooFarAhead) return true;      // Block height is too high\n     }\n \n     if ((!CheckBlock(block, state)) || !ContextualCheckBlock(block, state, pindex->pprev)) {"
      }
    ]
  },
  {
    "sha": "6b1066fab41523d25d75b45a10e4b0f61d7c61d0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YjEwNjZmYWI0MTUyM2QyNWQ3NWI0NWExMGU0YjBmNjFkN2M2MWQw",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2015-06-03T00:46:41Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2015-06-30T13:42:56Z"
      },
      "message": "Ignore whitelisting during IBD for unrequested blocks.",
      "tree": {
        "sha": "c07180c99ebbb93db8e2218f95311262aee35e5b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c07180c99ebbb93db8e2218f95311262aee35e5b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6b1066fab41523d25d75b45a10e4b0f61d7c61d0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b1066fab41523d25d75b45a10e4b0f61d7c61d0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6b1066fab41523d25d75b45a10e4b0f61d7c61d0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b1066fab41523d25d75b45a10e4b0f61d7c61d0/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bfc30b34374d71928acee5ff41282f09cedfd5e4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bfc30b34374d71928acee5ff41282f09cedfd5e4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bfc30b34374d71928acee5ff41282f09cedfd5e4"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 6,
      "deletions": 2
    },
    "files": [
      {
        "sha": "87750f9ea325f18340177faca7846772a2c9515c",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b1066fab41523d25d75b45a10e4b0f61d7c61d0/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b1066fab41523d25d75b45a10e4b0f61d7c61d0/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=6b1066fab41523d25d75b45a10e4b0f61d7c61d0",
        "patch": "@@ -4478,8 +4478,12 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         pfrom->AddInventoryKnown(inv);\n \n         CValidationState state;\n-        // Process all blocks from whitelisted peers, even if not requested.\n-        ProcessNewBlock(state, pfrom, &block, pfrom->fWhitelisted, NULL);\n+        // Process all blocks from whitelisted peers, even if not requested,\n+        // unless we're still syncing with the network.\n+        // Such an unrequested block may still be processed, subject to the\n+        // conditions in AcceptBlock().\n+        bool forceProcessing = pfrom->fWhitelisted && !IsInitialBlockDownload();\n+        ProcessNewBlock(state, pfrom, &block, forceProcessing, NULL);\n         int nDoS;\n         if (state.IsInvalid(nDoS)) {\n             pfrom->PushMessage(\"reject\", strCommand, state.GetRejectCode(),"
      }
    ]
  },
  {
    "sha": "04b5d235f1560b8285591b963d3636f7ddf74563",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNGI1ZDIzNWYxNTYwYjgyODU1OTFiOTYzZDM2MzZmN2RkZjc0NTYz",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2015-06-15T19:30:05Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2015-06-30T13:42:56Z"
      },
      "message": "Replace sleep with syncing using pings",
      "tree": {
        "sha": "e265950212bebacbaa0f96118f6f6ce608934ed4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e265950212bebacbaa0f96118f6f6ce608934ed4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/04b5d235f1560b8285591b963d3636f7ddf74563",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/04b5d235f1560b8285591b963d3636f7ddf74563",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/04b5d235f1560b8285591b963d3636f7ddf74563",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/04b5d235f1560b8285591b963d3636f7ddf74563/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6b1066fab41523d25d75b45a10e4b0f61d7c61d0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b1066fab41523d25d75b45a10e4b0f61d7c61d0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6b1066fab41523d25d75b45a10e4b0f61d7c61d0"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 27,
      "deletions": 7
    },
    "files": [
      {
        "sha": "83c03eeb782896901d99adced0f3e9d16a9d78ac",
        "filename": "qa/rpc-tests/p2p-acceptblock.py",
        "status": "modified",
        "additions": 27,
        "deletions": 7,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04b5d235f1560b8285591b963d3636f7ddf74563/qa/rpc-tests/p2p-acceptblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04b5d235f1560b8285591b963d3636f7ddf74563/qa/rpc-tests/p2p-acceptblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-acceptblock.py?ref=04b5d235f1560b8285591b963d3636f7ddf74563",
        "patch": "@@ -64,6 +64,8 @@ def __init__(self):\n         NodeConnCB.__init__(self)\n         self.create_callback_map()\n         self.connection = None\n+        self.ping_counter = 1\n+        self.last_pong = msg_pong()\n \n     def add_connection(self, conn):\n         self.connection = conn\n@@ -87,6 +89,24 @@ def wait_for_verack(self):\n     def send_message(self, message):\n         self.connection.send_message(message)\n \n+    def on_pong(self, conn, message):\n+        self.last_pong = message\n+\n+    # Sync up with the node after delivery of a block\n+    def sync_with_ping(self, timeout=30):\n+        self.connection.send_message(msg_ping(nonce=self.ping_counter))\n+        received_pong = False\n+        sleep_time = 0.05\n+        while not received_pong and timeout > 0:\n+            time.sleep(sleep_time)\n+            timeout -= sleep_time\n+            with mininode_lock:\n+                if self.last_pong.nonce == self.ping_counter:\n+                    received_pong = True\n+        self.ping_counter += 1\n+        return received_pong\n+\n+\n class AcceptBlockTest(BitcoinTestFramework):\n     def add_options(self, parser):\n         parser.add_option(\"--testbinary\", dest=\"testbinary\",\n@@ -139,7 +159,7 @@ def run_test(self):\n         test_node.send_message(msg_block(blocks_h2[0]))\n         white_node.send_message(msg_block(blocks_h2[1]))\n \n-        time.sleep(0.5)\n+        [ x.sync_with_ping() for x in [test_node, white_node] ]\n         assert_equal(self.nodes[0].getblockcount(), 2)\n         assert_equal(self.nodes[1].getblockcount(), 2)\n         print \"First height 2 block accepted by both nodes\"\n@@ -152,7 +172,7 @@ def run_test(self):\n         test_node.send_message(msg_block(blocks_h2f[0]))\n         white_node.send_message(msg_block(blocks_h2f[1]))\n \n-        time.sleep(0.5)  # Give time to process the block\n+        [ x.sync_with_ping() for x in [test_node, white_node] ]\n         for x in self.nodes[0].getchaintips():\n             if x['hash'] == blocks_h2f[0].hash:\n                 assert_equal(x['status'], \"headers-only\")\n@@ -171,7 +191,7 @@ def run_test(self):\n         test_node.send_message(msg_block(blocks_h3[0]))\n         white_node.send_message(msg_block(blocks_h3[1]))\n \n-        time.sleep(0.5)\n+        [ x.sync_with_ping() for x in [test_node, white_node] ]\n         # Since the earlier block was not processed by node0, the new block\n         # can't be fully validated.\n         for x in self.nodes[0].getchaintips():\n@@ -222,7 +242,7 @@ def run_test(self):\n         white_node.send_message(headers_message) # Send headers leading to tip\n         white_node.send_message(msg_block(tips[1]))  # Now deliver the tip\n         try:\n-            time.sleep(0.5)\n+            white_node.sync_with_ping()\n             self.nodes[1].getblock(tips[1].hash)\n             print \"Unrequested block far ahead of tip accepted from whitelisted peer\"\n         except:\n@@ -238,7 +258,7 @@ def run_test(self):\n         # the node processes it and incorrectly advances the tip).\n         # But this would be caught later on, when we verify that an inv triggers\n         # a getdata request for this block.\n-        time.sleep(1)\n+        test_node.sync_with_ping()\n         assert_equal(self.nodes[0].getblockcount(), 2)\n         print \"Unrequested block that would complete more-work chain was ignored\"\n \n@@ -250,7 +270,7 @@ def run_test(self):\n             test_node.last_getdata = None\n             test_node.send_message(msg_inv([CInv(2, blocks_h3[0].sha256)]))\n \n-        time.sleep(0.5)\n+        test_node.sync_with_ping()\n         with mininode_lock:\n             getdata = test_node.last_getdata\n \n@@ -261,7 +281,7 @@ def run_test(self):\n         # 7. Send the missing block for the third time (now it is requested)\n         test_node.send_message(msg_block(blocks_h2f[0]))\n \n-        time.sleep(2)\n+        test_node.sync_with_ping()\n         assert_equal(self.nodes[0].getblockcount(), 290)\n         print \"Successfully reorged to longer chain from non-whitelisted peer\"\n "
      }
    ]
  },
  {
    "sha": "59b49cd07482494d9a99068af502be9ceda41ed2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1OWI0OWNkMDc0ODI0OTRkOWE5OTA2OGFmNTAyYmU5Y2VkYTQxZWQy",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2015-07-11T10:52:35Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2015-07-11T11:05:18Z"
      },
      "message": "Eliminate signed/unsigned comparison warning",
      "tree": {
        "sha": "dcc8372a0a88dd9307ae6adf2d8a354077d92036",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dcc8372a0a88dd9307ae6adf2d8a354077d92036"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/59b49cd07482494d9a99068af502be9ceda41ed2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/59b49cd07482494d9a99068af502be9ceda41ed2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/59b49cd07482494d9a99068af502be9ceda41ed2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/59b49cd07482494d9a99068af502be9ceda41ed2/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "04b5d235f1560b8285591b963d3636f7ddf74563",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/04b5d235f1560b8285591b963d3636f7ddf74563",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/04b5d235f1560b8285591b963d3636f7ddf74563"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "875b7b7068023895d33cd3e13f811a657dbdb815",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/59b49cd07482494d9a99068af502be9ceda41ed2/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/59b49cd07482494d9a99068af502be9ceda41ed2/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=59b49cd07482494d9a99068af502be9ceda41ed2",
        "patch": "@@ -2849,7 +2849,7 @@ bool AcceptBlock(CBlock& block, CValidationState& state, CBlockIndex** ppindex,\n     // blocks which are too close in height to the tip.  Apply this test\n     // regardless of whether pruning is enabled; it should generally be safe to\n     // not process unrequested blocks.\n-    bool fTooFarAhead = (pindex->nHeight - chainActive.Height()) > MIN_BLOCKS_TO_KEEP;\n+    bool fTooFarAhead = (pindex->nHeight > int(chainActive.Height() + MIN_BLOCKS_TO_KEEP));\n \n     // TODO: deal better with return value and error conditions for duplicate\n     // and unrequested blocks."
      }
    ]
  }
]