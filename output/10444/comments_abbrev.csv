jonasschnelli,2017-05-24T06:32:08Z,`bip68-112-113-p2p.py`-tests are falling... ,https://github.com/bitcoin/bitcoin/pull/10444#issuecomment-303630659,303630659,
jameshilliard,2017-06-14T23:39:36Z,I've [modified](https://github.com/bitcoin/bips/pull/547/files) the BIP91 spec slightly with a different threshold and immediate enforcement upon lock-in.,https://github.com/bitcoin/bitcoin/pull/10444#issuecomment-308588177,308588177,
jameshilliard,2017-06-16T05:51:45Z,I've [updated](https://github.com/bitcoin/bips/pull/548/files) BIP91 to use an even smaller confirmation window and changed it so enforcement isn't until activation in order to give a ~2 day grace period between lock-in and enforcement.,https://github.com/bitcoin/bitcoin/pull/10444#issuecomment-308939455,308939455,
luke-jr,2017-06-19T04:01:05Z,"NACK, this does nothing for users, and is unnecessary with BIP148 around the corner.",https://github.com/bitcoin/bitcoin/pull/10444#issuecomment-309333359,309333359,
earonesty,2017-06-19T16:45:30Z,"ACK: avoiding a chain split in a coordinated manner is certainly not ""doing nothing for users"".  Since the -bip148 option is not available, a BIP91 feature is the best alternative.  I would be fine with either.  ",https://github.com/bitcoin/bitcoin/pull/10444#issuecomment-309498362,309498362,
dooglus,2017-07-21T07:04:21Z,"Apparently BIP91 was locked in today.\n\nHow can I make sure my node follows the correct chain? Is this pull request on a branch somewhere or do I need to merge it in my own local repository?\n\nAnd what about the thousands of other nodes out there? Shouldn't this PR be merged to allow them to track the correct chain?",https://github.com/bitcoin/bitcoin/pull/10444#issuecomment-316922088,316922088,
jameshilliard,2017-07-21T07:25:15Z,"@dooglus BIP91 is mostly a miner enforced soft fork, you can use [this tree](https://github.com/segsignal/bitcoin).",https://github.com/bitcoin/bitcoin/pull/10444#issuecomment-316926028,316926028,
dooglus,2017-07-21T07:31:08Z,"As I understand Bitcoins miners don't enforce anything. They mine blocks which are either valid or invalid. It is the users who decide whether to accept their blocks or not, and thereby enforce the rules.\n\nI don't see any argument here against merging this PR other than Luke's inaccurate complaint that BIP91 does nothing for users. What am I missing?",https://github.com/bitcoin/bitcoin/pull/10444#issuecomment-316927176,316927176,
jameshilliard,2017-07-21T07:40:11Z,"@dooglus Both miners and users have the ability to enforce rules, a majority of miners can add a new rule without creating a chain split(assuming other nodes don't change their rules). Since a majority of miners are adding a rule with BIP91 the blocks will be valid to existing nodes. There's mostly 2 arguments I'm seeing, one is that more users should enforce the BIP91 rules to strengthen the rule",https://github.com/bitcoin/bitcoin/pull/10444#issuecomment-316928870,316928870,
dooglus,2017-07-21T17:08:54Z,"> however any businesses accepting transactions without many confirmations should be running both BIP91 and non-BIP91 nodes and ensuring that the transactions are confirmed on both\n\nExactly. That seems like an argument for merging this PR so that I can run a BIP91 node without having to trust or code review a non-core repository.",https://github.com/bitcoin/bitcoin/pull/10444#issuecomment-317058102,317058102,
achow101,2017-07-21T19:12:19Z,Can this be squashed and possibly updated with the latest from the segsignal repo?,https://github.com/bitcoin/bitcoin/pull/10444#issuecomment-317088400,317088400,
jameshilliard,2017-08-09T14:58:50Z,Closing this as enforcement of BIP91 is no longer required.,https://github.com/bitcoin/bitcoin/pull/10444#issuecomment-321281629,321281629,
jtimon,2017-05-27T12:33:27Z,This function could be static,https://github.com/bitcoin/bitcoin/pull/10444#discussion_r118819970,118819970,src/validation.cpp
earonesty,2017-05-30T17:54:10Z,can these magic numbers - when not being used as actual thresholds - be constants?   ,https://github.com/bitcoin/bitcoin/pull/10444#discussion_r119170378,119170378,src/versionbits.cpp
jtimon,2017-05-31T16:24:26Z,Perhaps this can be a field on Consensus::Params? or at least a properly defined constant,https://github.com/bitcoin/bitcoin/pull/10444#discussion_r119405558,119405558,src/versionbits.cpp
jtimon,2017-05-31T16:25:31Z,why not just ```if (id == Consensus::DEPLOYMENT_SEGSIGNAL)``` ?,https://github.com/bitcoin/bitcoin/pull/10444#discussion_r119405843,119405843,src/versionbits.cpp
jtimon,2017-05-31T16:27:38Z,why bit 4 ? what's wrong with bit 2 ? ,https://github.com/bitcoin/bitcoin/pull/10444#discussion_r119406378,119406378,src/chainparams.cpp
jtimon,2017-05-31T16:29:29Z,"I would squash this commit and the previous one into the first commit (perhaps after review would just squash it all in one commit, it's all 1 logical change IMO).",https://github.com/bitcoin/bitcoin/pull/10444#discussion_r119406868,119406868,src/rpc/blockchain.cpp
jtimon,2017-05-31T16:35:40Z,"This commit seems unnecessary, just don't use Consensus::DEPLOYMENT_SEGSIGNAL on chains that shouldn't use it (like regtest and testnet3).\n",https://github.com/bitcoin/bitcoin/pull/10444#discussion_r119408469,119408469,src/versionbits.cpp
jameshilliard,2017-06-14T22:18:09Z,"This was chosen because it was what was listed in the NYC agreement, I made a separate BIP that uses bit 2 however.",https://github.com/bitcoin/bitcoin/pull/10444#discussion_r122078771,122078771,src/chainparams.cpp
jameshilliard,2017-06-14T22:19:25Z,This is now defined in chainparams,https://github.com/bitcoin/bitcoin/pull/10444#discussion_r122078981,122078981,src/versionbits.cpp
jameshilliard,2017-06-14T22:20:01Z,Fixed,https://github.com/bitcoin/bitcoin/pull/10444#discussion_r122079075,122079075,src/versionbits.cpp
jameshilliard,2017-06-14T23:11:13Z,Any reason IsWitnessEnabled isn't also static?,https://github.com/bitcoin/bitcoin/pull/10444#discussion_r122086735,122086735,src/validation.cpp
jameshilliard,2017-06-15T00:07:09Z,Is the behavior for that identical?,https://github.com/bitcoin/bitcoin/pull/10444#discussion_r122093851,122093851,src/versionbits.cpp
