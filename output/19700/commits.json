[
  {
    "sha": "41e30f22b7bff667ec1ec1d50d2a0acbfd73e995",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MWUzMGYyMmI3YmZmNjY3ZWMxZWMxZDUwZDJhMGFjYmZkNzNlOTk1",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-08-12T00:39:40Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-08-14T16:04:27Z"
      },
      "message": "walletdb: Have FindWalletTx return a map instead of a list",
      "tree": {
        "sha": "aa48390d0fbe8490d8b306aedfb3520cd48001ff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/aa48390d0fbe8490d8b306aedfb3520cd48001ff"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/41e30f22b7bff667ec1ec1d50d2a0acbfd73e995",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41e30f22b7bff667ec1ec1d50d2a0acbfd73e995",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/41e30f22b7bff667ec1ec1d50d2a0acbfd73e995",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41e30f22b7bff667ec1ec1d50d2a0acbfd73e995/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "30dd562fd2c58536fa026fff9853b8d825216b01",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/30dd562fd2c58536fa026fff9853b8d825216b01",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/30dd562fd2c58536fa026fff9853b8d825216b01"
      }
    ],
    "stats": {
      "total": 57,
      "additions": 23,
      "deletions": 34
    },
    "files": [
      {
        "sha": "3558069a17dd01a90ab775fb8e69b84fe95068f2",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41e30f22b7bff667ec1ec1d50d2a0acbfd73e995/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41e30f22b7bff667ec1ec1d50d2a0acbfd73e995/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=41e30f22b7bff667ec1ec1d50d2a0acbfd73e995",
        "patch": "@@ -3144,7 +3144,7 @@ DBErrors CWallet::ZapSelectTx(std::vector<uint256>& vHashIn, std::vector<uint256\n     return DBErrors::LOAD_OK;\n }\n \n-DBErrors CWallet::ZapWalletTx(std::list<CWalletTx>& vWtx)\n+DBErrors CWallet::ZapWalletTx(std::map<uint256, CWalletTx>& vWtx)\n {\n     DBErrors nZapWalletTxRet = WalletBatch(*database,\"cr+\").ZapWalletTx(vWtx);\n     if (nZapWalletTxRet == DBErrors::NEED_REWRITE)\n@@ -3743,7 +3743,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n     const std::string walletFile = WalletDataFilePath(location.GetPath()).string();\n \n     // needed to restore wallet transaction meta data after -zapwallettxes\n-    std::list<CWalletTx> vWtx;\n+    std::map<uint256, CWalletTx> vWtx;\n \n     if (gArgs.GetBoolArg(\"-zapwallettxes\", false)) {\n         chain.initMessage(_(\"Zapping all transactions from wallet...\").translated);\n@@ -4022,8 +4022,9 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n         {\n             WalletBatch batch(*walletInstance->database);\n \n-            for (const CWalletTx& wtxOld : vWtx)\n+            for (const auto& wtx_pair : vWtx)\n             {\n+                const CWalletTx& wtxOld = wtx_pair.second;\n                 uint256 hash = wtxOld.GetHash();\n                 std::map<uint256, CWalletTx>::iterator mi = walletInstance->mapWallet.find(hash);\n                 if (mi != walletInstance->mapWallet.end())"
      },
      {
        "sha": "b2169de2214f023abaf367d6edb37db76cb63669",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41e30f22b7bff667ec1ec1d50d2a0acbfd73e995/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41e30f22b7bff667ec1ec1d50d2a0acbfd73e995/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=41e30f22b7bff667ec1ec1d50d2a0acbfd73e995",
        "patch": "@@ -1062,7 +1062,7 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n     void chainStateFlushed(const CBlockLocator& loc) override;\n \n     DBErrors LoadWallet(bool& fFirstRunRet);\n-    DBErrors ZapWalletTx(std::list<CWalletTx>& vWtx);\n+    DBErrors ZapWalletTx(std::map<uint256, CWalletTx>& vWtx);\n     DBErrors ZapSelectTx(std::vector<uint256>& vHashIn, std::vector<uint256>& vHashOut) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     bool SetAddressBook(const CTxDestination& address, const std::string& strName, const std::string& purpose);"
      },
      {
        "sha": "a28137e12149e45a8c5442e08a6e410badaceb7f",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 28,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41e30f22b7bff667ec1ec1d50d2a0acbfd73e995/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41e30f22b7bff667ec1ec1d50d2a0acbfd73e995/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=41e30f22b7bff667ec1ec1d50d2a0acbfd73e995",
        "patch": "@@ -837,7 +837,7 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n     return result;\n }\n \n-DBErrors WalletBatch::FindWalletTx(std::vector<uint256>& vTxHash, std::list<CWalletTx>& vWtx)\n+DBErrors WalletBatch::FindWalletTx(std::map<uint256, CWalletTx>& vWtx)\n {\n     DBErrors result = DBErrors::LOAD_OK;\n \n@@ -875,9 +875,8 @@ DBErrors WalletBatch::FindWalletTx(std::vector<uint256>& vTxHash, std::list<CWal\n             if (strType == DBKeys::TX) {\n                 uint256 hash;\n                 ssKey >> hash;\n-                vTxHash.push_back(hash);\n-                vWtx.emplace_back(nullptr /* wallet */, nullptr /* tx */);\n-                ssValue >> vWtx.back();\n+                const auto& ins = vWtx.emplace(std::piecewise_construct, std::forward_as_tuple(hash), std::forward_as_tuple(nullptr /* wallet */, nullptr /* tx */));\n+                ssValue >> ins.first->second;\n             }\n         }\n     } catch (...) {\n@@ -891,33 +890,22 @@ DBErrors WalletBatch::FindWalletTx(std::vector<uint256>& vTxHash, std::list<CWal\n DBErrors WalletBatch::ZapSelectTx(std::vector<uint256>& vTxHashIn, std::vector<uint256>& vTxHashOut)\n {\n     // build list of wallet TXs and hashes\n-    std::vector<uint256> vTxHash;\n-    std::list<CWalletTx> vWtx;\n-    DBErrors err = FindWalletTx(vTxHash, vWtx);\n+    std::map<uint256, CWalletTx> vWtx;\n+    DBErrors err = FindWalletTx(vWtx);\n     if (err != DBErrors::LOAD_OK) {\n         return err;\n     }\n \n-    std::sort(vTxHash.begin(), vTxHash.end());\n-    std::sort(vTxHashIn.begin(), vTxHashIn.end());\n-\n     // erase each matching wallet TX\n     bool delerror = false;\n-    std::vector<uint256>::iterator it = vTxHashIn.begin();\n-    for (const uint256& hash : vTxHash) {\n-        while (it < vTxHashIn.end() && (*it) < hash) {\n-            it++;\n-        }\n-        if (it == vTxHashIn.end()) {\n-            break;\n-        }\n-        else if ((*it) == hash) {\n-            if(!EraseTx(hash)) {\n-                LogPrint(BCLog::WALLETDB, \"Transaction was found for deletion but returned database error: %s\\n\", hash.GetHex());\n-                delerror = true;\n-            }\n-            vTxHashOut.push_back(hash);\n+    for (const uint256& hash : vTxHashIn) {\n+        auto it = vWtx.find(hash);\n+        if (it == vWtx.end()) continue;\n+        if (!EraseTx(hash)) {\n+            LogPrint(BCLog::WALLETDB, \"Transaction was found for deletion but returned database error: %s\\n\", hash.GetHex());\n+            delerror = true;\n         }\n+        vTxHashOut.push_back(hash);\n     }\n \n     if (delerror) {\n@@ -926,16 +914,16 @@ DBErrors WalletBatch::ZapSelectTx(std::vector<uint256>& vTxHashIn, std::vector<u\n     return DBErrors::LOAD_OK;\n }\n \n-DBErrors WalletBatch::ZapWalletTx(std::list<CWalletTx>& vWtx)\n+DBErrors WalletBatch::ZapWalletTx(std::map<uint256, CWalletTx>& vWtx)\n {\n     // build list of wallet TXs\n-    std::vector<uint256> vTxHash;\n-    DBErrors err = FindWalletTx(vTxHash, vWtx);\n+    DBErrors err = FindWalletTx(vWtx);\n     if (err != DBErrors::LOAD_OK)\n         return err;\n \n     // erase each wallet TX\n-    for (const uint256& hash : vTxHash) {\n+    for (const auto& wtx_pair : vWtx) {\n+        const uint256& hash = wtx_pair.first;\n         if (!EraseTx(hash))\n             return DBErrors::CORRUPT;\n     }"
      },
      {
        "sha": "b4cefff5c4072539e65ec6718451e03c456e40be",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41e30f22b7bff667ec1ec1d50d2a0acbfd73e995/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41e30f22b7bff667ec1ec1d50d2a0acbfd73e995/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=41e30f22b7bff667ec1ec1d50d2a0acbfd73e995",
        "patch": "@@ -256,8 +256,8 @@ class WalletBatch\n     bool WriteActiveScriptPubKeyMan(uint8_t type, const uint256& id, bool internal);\n \n     DBErrors LoadWallet(CWallet* pwallet);\n-    DBErrors FindWalletTx(std::vector<uint256>& vTxHash, std::list<CWalletTx>& vWtx);\n-    DBErrors ZapWalletTx(std::list<CWalletTx>& vWtx);\n+    DBErrors FindWalletTx(std::map<uint256, CWalletTx>& vWtx);\n+    DBErrors ZapWalletTx(std::map<uint256, CWalletTx>& vWtx);\n     DBErrors ZapSelectTx(std::vector<uint256>& vHashIn, std::vector<uint256>& vHashOut);\n     /* Function to determine if a certain KV/key-type is a key (cryptographical key) type */\n     static bool IsKeyType(const std::string& strType);"
      }
    ]
  },
  {
    "sha": "36e758393b010050e0a5596dc0c9e7c09ff67f29",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNmU3NTgzOTNiMDEwMDUwZTBhNTU5NmRjMGM5ZTdjMDlmZjY3ZjI5",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-08-12T00:39:56Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-08-14T16:04:27Z"
      },
      "message": "walletdb: Add zaptx record",
      "tree": {
        "sha": "ab84ffa26491948b7398b6de01fdccf882452a16",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ab84ffa26491948b7398b6de01fdccf882452a16"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/36e758393b010050e0a5596dc0c9e7c09ff67f29",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36e758393b010050e0a5596dc0c9e7c09ff67f29",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/36e758393b010050e0a5596dc0c9e7c09ff67f29",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36e758393b010050e0a5596dc0c9e7c09ff67f29/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "41e30f22b7bff667ec1ec1d50d2a0acbfd73e995",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41e30f22b7bff667ec1ec1d50d2a0acbfd73e995",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/41e30f22b7bff667ec1ec1d50d2a0acbfd73e995"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 15,
      "deletions": 0
    },
    "files": [
      {
        "sha": "cb596ae78613aac7f5174a42d7489e423e35a07c",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36e758393b010050e0a5596dc0c9e7c09ff67f29/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36e758393b010050e0a5596dc0c9e7c09ff67f29/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=36e758393b010050e0a5596dc0c9e7c09ff67f29",
        "patch": "@@ -48,6 +48,7 @@ const std::string WALLETDESCRIPTORCKEY{\"walletdescriptorckey\"};\n const std::string WALLETDESCRIPTORKEY{\"walletdescriptorkey\"};\n const std::string WATCHMETA{\"watchmeta\"};\n const std::string WATCHS{\"watchs\"};\n+const std::string ZAPTX{\"zaptx\"};\n } // namespace DBKeys\n \n //\n@@ -86,6 +87,16 @@ bool WalletBatch::EraseTx(uint256 hash)\n     return EraseIC(std::make_pair(DBKeys::TX, hash));\n }\n \n+bool WalletBatch::WriteZapTx(const CWalletTx& wtx)\n+{\n+    return WriteIC(std::make_pair(DBKeys::ZAPTX, wtx.GetHash()), wtx);\n+}\n+\n+bool WalletBatch::EraseZapTx(uint256 hash)\n+{\n+    return EraseIC(std::make_pair(DBKeys::ZAPTX, hash));\n+}\n+\n bool WalletBatch::WriteKeyMetadata(const CKeyMetadata& meta, const CPubKey& pubkey, const bool overwrite)\n {\n     return WriteIC(std::make_pair(DBKeys::KEYMETA, pubkey), meta, overwrite);"
      },
      {
        "sha": "ca87d7d224be0cc136a6ca862e26bb5ba73fcba9",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36e758393b010050e0a5596dc0c9e7c09ff67f29/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36e758393b010050e0a5596dc0c9e7c09ff67f29/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=36e758393b010050e0a5596dc0c9e7c09ff67f29",
        "patch": "@@ -80,6 +80,7 @@ extern const std::string WALLETDESCRIPTORCKEY;\n extern const std::string WALLETDESCRIPTORKEY;\n extern const std::string WATCHMETA;\n extern const std::string WATCHS;\n+extern const std::string ZAPTX;\n } // namespace DBKeys\n \n /* simple HD chain data model */\n@@ -221,6 +222,9 @@ class WalletBatch\n     bool WriteTx(const CWalletTx& wtx);\n     bool EraseTx(uint256 hash);\n \n+    bool WriteZapTx(const CWalletTx& wtx);\n+    bool EraseZapTx(uint256 hash);\n+\n     bool WriteKeyMetadata(const CKeyMetadata& meta, const CPubKey& pubkey, const bool overwrite);\n     bool WriteKey(const CPubKey& vchPubKey, const CPrivKey& vchPrivKey, const CKeyMetadata &keyMeta);\n     bool WriteCryptedKey(const CPubKey& vchPubKey, const std::vector<unsigned char>& vchCryptedSecret, const CKeyMetadata &keyMeta);"
      }
    ]
  },
  {
    "sha": "6246c40873d569ac0441522149dc951d07d8db0b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MjQ2YzQwODczZDU2OWFjMDQ0MTUyMjE0OWRjOTUxZDA3ZDhkYjBi",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-08-12T00:40:10Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-08-14T16:04:27Z"
      },
      "message": "walletdb: Write zapped txs as zaptx records before erasing tx record\n\nIf we are keeping metadata, write the zapped txs in zaptx records.\nRemove them after fetching the metadata.",
      "tree": {
        "sha": "805d77ceb0a5db898bf92f3e37fbfef13c9cee53",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/805d77ceb0a5db898bf92f3e37fbfef13c9cee53"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6246c40873d569ac0441522149dc951d07d8db0b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6246c40873d569ac0441522149dc951d07d8db0b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6246c40873d569ac0441522149dc951d07d8db0b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6246c40873d569ac0441522149dc951d07d8db0b/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "36e758393b010050e0a5596dc0c9e7c09ff67f29",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36e758393b010050e0a5596dc0c9e7c09ff67f29",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/36e758393b010050e0a5596dc0c9e7c09ff67f29"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 10,
      "deletions": 6
    },
    "files": [
      {
        "sha": "6b32df1943ed5f31c8419aaec717a300d17d0fcc",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6246c40873d569ac0441522149dc951d07d8db0b/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6246c40873d569ac0441522149dc951d07d8db0b/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=6246c40873d569ac0441522149dc951d07d8db0b",
        "patch": "@@ -3144,9 +3144,9 @@ DBErrors CWallet::ZapSelectTx(std::vector<uint256>& vHashIn, std::vector<uint256\n     return DBErrors::LOAD_OK;\n }\n \n-DBErrors CWallet::ZapWalletTx(std::map<uint256, CWalletTx>& vWtx)\n+DBErrors CWallet::ZapWalletTx(std::map<uint256, CWalletTx>& vWtx, bool keep_meta)\n {\n-    DBErrors nZapWalletTxRet = WalletBatch(*database,\"cr+\").ZapWalletTx(vWtx);\n+    DBErrors nZapWalletTxRet = WalletBatch(*database,\"cr+\").ZapWalletTx(vWtx, keep_meta);\n     if (nZapWalletTxRet == DBErrors::NEED_REWRITE)\n     {\n         if (database->Rewrite(\"\\x04pool\"))\n@@ -3748,8 +3748,9 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n     if (gArgs.GetBoolArg(\"-zapwallettxes\", false)) {\n         chain.initMessage(_(\"Zapping all transactions from wallet...\").translated);\n \n+        bool keep_meta = gArgs.GetArg(\"-zapwallettxes\", \"1\") != \"2\";\n         std::unique_ptr<CWallet> tempWallet = MakeUnique<CWallet>(&chain, location, CreateWalletDatabase(location.GetPath()));\n-        DBErrors nZapWalletRet = tempWallet->ZapWalletTx(vWtx);\n+        DBErrors nZapWalletRet = tempWallet->ZapWalletTx(vWtx, keep_meta);\n         if (nZapWalletRet != DBErrors::LOAD_OK) {\n             error = strprintf(_(\"Error loading %s: Wallet corrupted\"), walletFile);\n             return nullptr;\n@@ -4039,6 +4040,8 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n                     copyTo->nOrderPos = copyFrom->nOrderPos;\n                     batch.WriteTx(*copyTo);\n                 }\n+\n+                batch.EraseZapTx(hash);\n             }\n         }\n     }"
      },
      {
        "sha": "9ee37d22da92233542adcd63c37689d612f24167",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6246c40873d569ac0441522149dc951d07d8db0b/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6246c40873d569ac0441522149dc951d07d8db0b/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=6246c40873d569ac0441522149dc951d07d8db0b",
        "patch": "@@ -1062,7 +1062,7 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n     void chainStateFlushed(const CBlockLocator& loc) override;\n \n     DBErrors LoadWallet(bool& fFirstRunRet);\n-    DBErrors ZapWalletTx(std::map<uint256, CWalletTx>& vWtx);\n+    DBErrors ZapWalletTx(std::map<uint256, CWalletTx>& vWtx, bool keep_meta);\n     DBErrors ZapSelectTx(std::vector<uint256>& vHashIn, std::vector<uint256>& vHashOut) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     bool SetAddressBook(const CTxDestination& address, const std::string& strName, const std::string& purpose);"
      },
      {
        "sha": "0f81232dd0da63cf6bdea5f9e44137767a3ea7b8",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6246c40873d569ac0441522149dc951d07d8db0b/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6246c40873d569ac0441522149dc951d07d8db0b/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=6246c40873d569ac0441522149dc951d07d8db0b",
        "patch": "@@ -925,7 +925,7 @@ DBErrors WalletBatch::ZapSelectTx(std::vector<uint256>& vTxHashIn, std::vector<u\n     return DBErrors::LOAD_OK;\n }\n \n-DBErrors WalletBatch::ZapWalletTx(std::map<uint256, CWalletTx>& vWtx)\n+DBErrors WalletBatch::ZapWalletTx(std::map<uint256, CWalletTx>& vWtx, bool keep_meta)\n {\n     // build list of wallet TXs\n     DBErrors err = FindWalletTx(vWtx);\n@@ -935,6 +935,7 @@ DBErrors WalletBatch::ZapWalletTx(std::map<uint256, CWalletTx>& vWtx)\n     // erase each wallet TX\n     for (const auto& wtx_pair : vWtx) {\n         const uint256& hash = wtx_pair.first;\n+        if (keep_meta && !WriteZapTx(wtx_pair.second)) return DBErrors::CORRUPT;\n         if (!EraseTx(hash))\n             return DBErrors::CORRUPT;\n     }"
      },
      {
        "sha": "6149edab6ad308c3b8f1625201fdfc245b461b9c",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6246c40873d569ac0441522149dc951d07d8db0b/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6246c40873d569ac0441522149dc951d07d8db0b/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=6246c40873d569ac0441522149dc951d07d8db0b",
        "patch": "@@ -261,7 +261,7 @@ class WalletBatch\n \n     DBErrors LoadWallet(CWallet* pwallet);\n     DBErrors FindWalletTx(std::map<uint256, CWalletTx>& vWtx);\n-    DBErrors ZapWalletTx(std::map<uint256, CWalletTx>& vWtx);\n+    DBErrors ZapWalletTx(std::map<uint256, CWalletTx>& vWtx, bool keep_meta);\n     DBErrors ZapSelectTx(std::vector<uint256>& vHashIn, std::vector<uint256>& vHashOut);\n     /* Function to determine if a certain KV/key-type is a key (cryptographical key) type */\n     static bool IsKeyType(const std::string& strType);"
      }
    ]
  },
  {
    "sha": "14915b4f0c22ccde92924ac15104d06de16befa8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNDkxNWI0ZjBjMjJjY2RlOTI5MjRhYzE1MTA0ZDA2ZGUxNmJlZmE4",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-08-11T21:14:08Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-08-14T16:04:27Z"
      },
      "message": "wallet: Keep zapped tx metadata using zaptx record",
      "tree": {
        "sha": "e44a04571727cc8cc3022d7fe207a86f287aa55a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e44a04571727cc8cc3022d7fe207a86f287aa55a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/14915b4f0c22ccde92924ac15104d06de16befa8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14915b4f0c22ccde92924ac15104d06de16befa8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/14915b4f0c22ccde92924ac15104d06de16befa8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14915b4f0c22ccde92924ac15104d06de16befa8/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6246c40873d569ac0441522149dc951d07d8db0b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6246c40873d569ac0441522149dc951d07d8db0b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6246c40873d569ac0441522149dc951d07d8db0b"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 20,
      "deletions": 6
    },
    "files": [
      {
        "sha": "16acd9d817f28a0e62820627953687a2d00bc922",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 3,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14915b4f0c22ccde92924ac15104d06de16befa8/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14915b4f0c22ccde92924ac15104d06de16befa8/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=14915b4f0c22ccde92924ac15104d06de16befa8",
        "patch": "@@ -3743,12 +3743,12 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n     const std::string walletFile = WalletDataFilePath(location.GetPath()).string();\n \n     // needed to restore wallet transaction meta data after -zapwallettxes\n-    std::map<uint256, CWalletTx> vWtx;\n \n     if (gArgs.GetBoolArg(\"-zapwallettxes\", false)) {\n         chain.initMessage(_(\"Zapping all transactions from wallet...\").translated);\n \n         bool keep_meta = gArgs.GetArg(\"-zapwallettxes\", \"1\") != \"2\";\n+        std::map<uint256, CWalletTx> vWtx;\n         std::unique_ptr<CWallet> tempWallet = MakeUnique<CWallet>(&chain, location, CreateWalletDatabase(location.GetPath()));\n         DBErrors nZapWalletRet = tempWallet->ZapWalletTx(vWtx, keep_meta);\n         if (nZapWalletRet != DBErrors::LOAD_OK) {\n@@ -4019,11 +4019,13 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n         walletInstance->database->IncrementUpdateCounter();\n \n         // Restore wallet transaction metadata after -zapwallettxes=1\n-        if (gArgs.GetBoolArg(\"-zapwallettxes\", false) && gArgs.GetArg(\"-zapwallettxes\", \"1\") != \"2\")\n+        if (walletInstance->m_has_zapped)\n         {\n             WalletBatch batch(*walletInstance->database);\n+            std::map<uint256, CWalletTx> map_wtx;\n+            batch.FindWalletTx(map_wtx, true /* find_zapped */);\n \n-            for (const auto& wtx_pair : vWtx)\n+            for (const auto& wtx_pair : map_wtx)\n             {\n                 const CWalletTx& wtxOld = wtx_pair.second;\n                 uint256 hash = wtxOld.GetHash();\n@@ -4538,3 +4540,8 @@ ScriptPubKeyMan* CWallet::AddWalletDescriptor(WalletDescriptor& desc, const Flat\n \n     return ret;\n }\n+\n+void CWallet::SetHasZapped()\n+{\n+    m_has_zapped = true;\n+}"
      },
      {
        "sha": "639f860b07af949eb2cfd52ec711814577d1a708",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14915b4f0c22ccde92924ac15104d06de16befa8/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14915b4f0c22ccde92924ac15104d06de16befa8/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=14915b4f0c22ccde92924ac15104d06de16befa8",
        "patch": "@@ -1065,6 +1065,9 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n     DBErrors ZapWalletTx(std::map<uint256, CWalletTx>& vWtx, bool keep_meta);\n     DBErrors ZapSelectTx(std::vector<uint256>& vHashIn, std::vector<uint256>& vHashOut) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n+    bool m_has_zapped = false;\n+    void SetHasZapped();\n+\n     bool SetAddressBook(const CTxDestination& address, const std::string& strName, const std::string& purpose);\n \n     bool DelAddressBook(const CTxDestination& address);"
      },
      {
        "sha": "789a46d73b150fb0068b3d711c4a969e78ce58eb",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14915b4f0c22ccde92924ac15104d06de16befa8/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14915b4f0c22ccde92924ac15104d06de16befa8/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=14915b4f0c22ccde92924ac15104d06de16befa8",
        "patch": "@@ -660,6 +660,8 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n \n             wss.m_descriptor_crypt_keys.insert(std::make_pair(std::make_pair(desc_id, pubkey.GetID()), std::make_pair(pubkey, privkey)));\n             wss.fIsEncrypted = true;\n+        } else if (strType == DBKeys::ZAPTX) {\n+            pwallet->SetHasZapped();\n         } else if (strType != DBKeys::BESTBLOCK && strType != DBKeys::BESTBLOCK_NOMERKLE &&\n                    strType != DBKeys::MINVERSION && strType != DBKeys::ACENTRY &&\n                    strType != DBKeys::VERSION && strType != DBKeys::SETTINGS) {\n@@ -848,10 +850,12 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n     return result;\n }\n \n-DBErrors WalletBatch::FindWalletTx(std::map<uint256, CWalletTx>& vWtx)\n+DBErrors WalletBatch::FindWalletTx(std::map<uint256, CWalletTx>& vWtx, bool find_zapped)\n {\n     DBErrors result = DBErrors::LOAD_OK;\n \n+    const std::string& rectype = find_zapped ? DBKeys::ZAPTX : DBKeys::TX;\n+\n     try {\n         int nMinVersion = 0;\n         if (m_batch->Read(DBKeys::MINVERSION, nMinVersion)) {\n@@ -883,7 +887,7 @@ DBErrors WalletBatch::FindWalletTx(std::map<uint256, CWalletTx>& vWtx)\n \n             std::string strType;\n             ssKey >> strType;\n-            if (strType == DBKeys::TX) {\n+            if (strType == rectype) {\n                 uint256 hash;\n                 ssKey >> hash;\n                 const auto& ins = vWtx.emplace(std::piecewise_construct, std::forward_as_tuple(hash), std::forward_as_tuple(nullptr /* wallet */, nullptr /* tx */));"
      },
      {
        "sha": "a5ed4422832d4356c61c4f53a5d89125aff5624a",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14915b4f0c22ccde92924ac15104d06de16befa8/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14915b4f0c22ccde92924ac15104d06de16befa8/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=14915b4f0c22ccde92924ac15104d06de16befa8",
        "patch": "@@ -260,7 +260,7 @@ class WalletBatch\n     bool WriteActiveScriptPubKeyMan(uint8_t type, const uint256& id, bool internal);\n \n     DBErrors LoadWallet(CWallet* pwallet);\n-    DBErrors FindWalletTx(std::map<uint256, CWalletTx>& vWtx);\n+    DBErrors FindWalletTx(std::map<uint256, CWalletTx>& vWtx, bool find_zapped = false);\n     DBErrors ZapWalletTx(std::map<uint256, CWalletTx>& vWtx, bool keep_meta);\n     DBErrors ZapSelectTx(std::vector<uint256>& vHashIn, std::vector<uint256>& vHashOut);\n     /* Function to determine if a certain KV/key-type is a key (cryptographical key) type */"
      }
    ]
  },
  {
    "sha": "362797f757bd2203a3f9422c5a4d02c46b5e74f9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNjI3OTdmNzU3YmQyMjAzYTNmOTQyMmM1YTRkMDJjNDZiNWU3NGY5",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-08-11T21:40:07Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-08-14T16:05:14Z"
      },
      "message": "wallettool: Add zapwallettxes command",
      "tree": {
        "sha": "883ce7496de6645d14245217cba008db4c28e32a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/883ce7496de6645d14245217cba008db4c28e32a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/362797f757bd2203a3f9422c5a4d02c46b5e74f9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/362797f757bd2203a3f9422c5a4d02c46b5e74f9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/362797f757bd2203a3f9422c5a4d02c46b5e74f9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/362797f757bd2203a3f9422c5a4d02c46b5e74f9/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "14915b4f0c22ccde92924ac15104d06de16befa8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14915b4f0c22ccde92924ac15104d06de16befa8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/14915b4f0c22ccde92924ac15104d06de16befa8"
      }
    ],
    "stats": {
      "total": 145,
      "additions": 104,
      "deletions": 41
    },
    "files": [
      {
        "sha": "395edd95c01692f1de5855416152c5f1a81d37e3",
        "filename": "src/bitcoin-wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/362797f757bd2203a3f9422c5a4d02c46b5e74f9/src/bitcoin-wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/362797f757bd2203a3f9422c5a4d02c46b5e74f9/src/bitcoin-wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-wallet.cpp?ref=362797f757bd2203a3f9422c5a4d02c46b5e74f9",
        "patch": "@@ -28,10 +28,12 @@ static void SetupWalletToolArgs(ArgsManager& argsman)\n     argsman.AddArg(\"-wallet=<wallet-name>\", \"Specify wallet name\", ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-debug=<category>\", \"Output debugging information (default: 0).\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-printtoconsole\", \"Send trace/debug info to console (default: 1 when no -debug is true, 0 otherwise).\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n+    argsman.AddArg(\"-keepmeta\", \"Keep metadata for zapwallettxes (default: true)\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n \n     argsman.AddArg(\"info\", \"Get wallet info\", ArgsManager::ALLOW_ANY, OptionsCategory::COMMANDS);\n     argsman.AddArg(\"create\", \"Create new wallet file\", ArgsManager::ALLOW_ANY, OptionsCategory::COMMANDS);\n     argsman.AddArg(\"salvage\", \"Attempt to recover private keys from a corrupt wallet\", ArgsManager::ALLOW_ANY, OptionsCategory::COMMANDS);\n+    argsman.AddArg(\"zapwallettxes\", \"Remove all of the transactions from the wallet. A rescan will be required the next time the wallet is loaded.\", ArgsManager::ALLOW_ANY, OptionsCategory::COMMANDS);\n }\n \n static bool WalletAppInit(int argc, char* argv[])"
      },
      {
        "sha": "bc7fe63feedac763e7623333c50b959da6b4be4c",
        "filename": "src/wallet/wallettool.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 4,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/362797f757bd2203a3f9422c5a4d02c46b5e74f9/src/wallet/wallettool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/362797f757bd2203a3f9422c5a4d02c46b5e74f9/src/wallet/wallettool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallettool.cpp?ref=362797f757bd2203a3f9422c5a4d02c46b5e74f9",
        "patch": "@@ -104,6 +104,26 @@ static void WalletShowInfo(CWallet* wallet_instance)\n     tfm::format(std::cout, \"Address Book: %zu\\n\", wallet_instance->m_address_book.size());\n }\n \n+static bool ZapWalletTxes(CWallet* wallet)\n+{\n+    // Set the best block to genesis to trigger full rescan\n+    if (!WalletBatch(wallet->GetDatabase()).WriteBestBlock(CBlockLocator())) {\n+        tfm::format(std::cerr, \"Error: Unable to write new bestblock record\");\n+        return false;\n+    }\n+\n+    // Zap the txs\n+    std::map<uint256, CWalletTx> map_wtx;\n+    DBErrors ret = wallet->ZapWalletTx(map_wtx, gArgs.GetBoolArg(\"-keepmeta\", true));\n+    if (ret != DBErrors::LOAD_OK) {\n+        tfm::format(std::cerr, \"Error: Could not remove transactions, wallet corrupted\");\n+        return false;\n+    }\n+\n+    wallet->Close();\n+    return true;\n+}\n+\n bool ExecuteWalletToolFunc(const std::string& command, const std::string& name)\n {\n     fs::path path = fs::absolute(name, GetWalletDir());\n@@ -114,17 +134,21 @@ bool ExecuteWalletToolFunc(const std::string& command, const std::string& name)\n             WalletShowInfo(wallet_instance.get());\n             wallet_instance->Close();\n         }\n-    } else if (command == \"info\" || command == \"salvage\") {\n+    } else if (command == \"info\" || command == \"salvage\" || command == \"zapwallettxes\") {\n         if (!fs::exists(path)) {\n             tfm::format(std::cerr, \"Error: no wallet file at %s\\n\", name);\n             return false;\n         }\n \n-        if (command == \"info\") {\n+        if (command == \"info\" || command == \"zapwallettxes\") {\n             std::shared_ptr<CWallet> wallet_instance = LoadWallet(name, path);\n             if (!wallet_instance) return false;\n-            WalletShowInfo(wallet_instance.get());\n-            wallet_instance->Close();\n+            if (command == \"info\") {\n+                WalletShowInfo(wallet_instance.get());\n+                wallet_instance->Close();\n+            } else if (command == \"zapwallettxes\") {\n+                return ZapWalletTxes(wallet_instance.get());\n+            }\n         } else if (command == \"salvage\") {\n             bilingual_str error;\n             std::vector<bilingual_str> warnings;"
      },
      {
        "sha": "025f30897282f53d3fcaa3876be22b548d16603d",
        "filename": "test/functional/wallet_zapwallettxes.py",
        "status": "modified",
        "additions": 74,
        "deletions": 37,
        "changes": 111,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/362797f757bd2203a3f9422c5a4d02c46b5e74f9/test/functional/wallet_zapwallettxes.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/362797f757bd2203a3f9422c5a4d02c46b5e74f9/test/functional/wallet_zapwallettxes.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_zapwallettxes.py?ref=362797f757bd2203a3f9422c5a4d02c46b5e74f9",
        "patch": "@@ -4,76 +4,113 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the zapwallettxes functionality.\n \n-- start two bitcoind nodes\n-- create two transactions on node 0 - one is confirmed and one is unconfirmed.\n-- restart node 0 and verify that both the confirmed and the unconfirmed\n-  transactions are still available.\n-- restart node 0 with zapwallettxes and persistmempool, and verify that both\n-  the confirmed and the unconfirmed transactions are still available.\n-- restart node 0 with just zapwallettxes and verify that the confirmed\n+- make two wallest\n+- create two transactions on zaptx wallet - one is confirmed and one is unconfirmed.\n+- run zapwallettxes, reload the wallet, and verify that both transactions are available\n+- run zapwallettxes, restart node 0 without persistmempool, and verify that the confirmed\n   transactions are still available, but that the unconfirmed transaction has\n   been zapped.\n \"\"\"\n+\n+import subprocess\n+import textwrap\n+\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n     assert_raises_rpc_error,\n-    wait_until,\n )\n \n class ZapWalletTXesTest (BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n-        self.num_nodes = 2\n+        self.extra_args = [[\"-keypool=1\"]]\n+        self.num_nodes = 1\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n+        self.skip_if_no_wallet_tool()\n+\n+    def bitcoin_wallet_process(self, *args):\n+        binary = self.config[\"environment\"][\"BUILDDIR\"] + '/src/bitcoin-wallet' + self.config[\"environment\"][\"EXEEXT\"]\n+        args = ['-datadir={}'.format(self.nodes[0].datadir), '-chain=%s' % self.chain] + list(args)\n+        return subprocess.Popen([binary] + args, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True)\n+\n+    def assert_tool_output(self, output, *args):\n+        p = self.bitcoin_wallet_process(*args)\n+        stdout, stderr = p.communicate()\n+        assert_equal(stderr, '')\n+        assert_equal(stdout, output)\n+        assert_equal(p.poll(), 0)\n+\n+    def assert_zapped(self, wallet):\n+        if not self.nodes[0].is_node_stopped():\n+            self.nodes[0].unloadwallet(wallet)\n+        out = textwrap.dedent('''\\\n+            Wallet info\n+            ===========\n+            Encrypted: no\n+            HD (hd seed available): yes\n+            Keypool Size: 2\n+            Transactions: 2\n+            Address Book: 2\n+        ''')\n+        self.assert_tool_output(out, \"-wallet={}\".format(wallet), \"info\")\n+        self.assert_tool_output(\"\", \"-wallet={}\".format(wallet), \"zapwallettxes\")\n+        out = textwrap.dedent('''\\\n+            Wallet info\n+            ===========\n+            Encrypted: no\n+            HD (hd seed available): yes\n+            Keypool Size: 2\n+            Transactions: 0\n+            Address Book: 2\n+        ''')\n+        self.assert_tool_output(out, '-wallet={}'.format(wallet), 'info')\n+        if not self.nodes[0].is_node_stopped():\n+            self.nodes[0].loadwallet(wallet)\n \n     def run_test(self):\n         self.log.info(\"Mining blocks...\")\n-        self.nodes[0].generate(1)\n-        self.sync_all()\n-        self.nodes[1].generate(100)\n+        self.nodes[0].generate(101)\n         self.sync_all()\n \n+        # Make a wallet that we will do the zapping on\n+        self.nodes[0].createwallet(wallet_name=\"zaptx\")\n+        zaptx = self.nodes[0].get_wallet_rpc(\"zaptx\")\n+        default = self.nodes[0].get_wallet_rpc(\"\")\n+\n         # This transaction will be confirmed\n-        txid1 = self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 10)\n+        txid1 = default.sendtoaddress(zaptx.getnewaddress(), 10)\n \n         self.nodes[0].generate(1)\n         self.sync_all()\n \n         # This transaction will not be confirmed\n-        txid2 = self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 20)\n-\n-        # Confirmed and unconfirmed transactions are now in the wallet.\n-        assert_equal(self.nodes[0].gettransaction(txid1)['txid'], txid1)\n-        assert_equal(self.nodes[0].gettransaction(txid2)['txid'], txid2)\n-\n-        # Restart node0. Both confirmed and unconfirmed transactions remain in the wallet.\n-        self.restart_node(0)\n-\n-        assert_equal(self.nodes[0].gettransaction(txid1)['txid'], txid1)\n-        assert_equal(self.nodes[0].gettransaction(txid2)['txid'], txid2)\n-\n-        # Restart node0 with zapwallettxes and persistmempool. The unconfirmed\n-        # transaction is zapped from the wallet, but is re-added when the mempool is reloaded.\n-        self.restart_node(0, [\"-persistmempool=1\", \"-zapwallettxes=2\"])\n+        txid2 = default.sendtoaddress(zaptx.getnewaddress(), 20)\n+        zaptx.keypoolrefill()\n \n-        wait_until(lambda: self.nodes[0].getmempoolinfo()['size'] == 1, timeout=3)\n-        self.nodes[0].syncwithvalidationinterfacequeue()  # Flush mempool to wallet\n+        # Confirmed and unconfirmed transactions are the only transactions in the wallet.\n+        assert_equal(zaptx.gettransaction(txid1)['txid'], txid1)\n+        assert_equal(zaptx.gettransaction(txid2)['txid'], txid2)\n+        assert_equal(len(zaptx.listtransactions()), 2)\n \n-        assert_equal(self.nodes[0].gettransaction(txid1)['txid'], txid1)\n-        assert_equal(self.nodes[0].gettransaction(txid2)['txid'], txid2)\n+        # Zap normally. The wallet should be rescanned (both blockchain and mempool) on loading\n+        self.assert_zapped(\"zaptx\")\n+        assert_equal(zaptx.gettransaction(txid1)['txid'], txid1)\n+        assert_equal(zaptx.gettransaction(txid2)['txid'], txid2)\n \n-        # Restart node0 with zapwallettxes, but not persistmempool.\n-        # The unconfirmed transaction is zapped and is no longer in the wallet.\n-        self.restart_node(0, [\"-zapwallettxes=2\"])\n+        # Zap normally. Restart the node with -persismempool=0\n+        self.stop_node(0)\n+        self.assert_zapped(\"zaptx\")\n+        self.start_node(0, [\"-persistmempool=0\", \"-wallet=zaptx\"])\n+        zaptx = self.nodes[0].get_wallet_rpc(\"zaptx\")\n \n         # tx1 is still be available because it was confirmed\n-        assert_equal(self.nodes[0].gettransaction(txid1)['txid'], txid1)\n+        assert_equal(zaptx.gettransaction(txid1)['txid'], txid1)\n \n         # This will raise an exception because the unconfirmed transaction has been zapped\n-        assert_raises_rpc_error(-5, 'Invalid or non-wallet transaction id', self.nodes[0].gettransaction, txid2)\n+        assert_raises_rpc_error(-5, 'Invalid or non-wallet transaction id', zaptx.gettransaction, txid2)\n \n if __name__ == '__main__':\n     ZapWalletTXesTest().main()"
      }
    ]
  },
  {
    "sha": "ff7e6f20b5da77e6501a82f71d07427458f5888d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZjdlNmYyMGI1ZGE3N2U2NTAxYTgyZjcxZDA3NDI3NDU4ZjU4ODhk",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-08-12T00:37:45Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-08-14T16:05:15Z"
      },
      "message": "test: zapwallettxes metadata",
      "tree": {
        "sha": "aee57b57e337fd17e0f2bf998cedec0425968bd6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/aee57b57e337fd17e0f2bf998cedec0425968bd6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ff7e6f20b5da77e6501a82f71d07427458f5888d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff7e6f20b5da77e6501a82f71d07427458f5888d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ff7e6f20b5da77e6501a82f71d07427458f5888d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff7e6f20b5da77e6501a82f71d07427458f5888d/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "362797f757bd2203a3f9422c5a4d02c46b5e74f9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/362797f757bd2203a3f9422c5a4d02c46b5e74f9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/362797f757bd2203a3f9422c5a4d02c46b5e74f9"
      }
    ],
    "stats": {
      "total": 38,
      "additions": 27,
      "deletions": 11
    },
    "files": [
      {
        "sha": "4677b11721fcefffe574a86908b9ad6bf719ed88",
        "filename": "test/functional/wallet_zapwallettxes.py",
        "status": "modified",
        "additions": 27,
        "deletions": 11,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff7e6f20b5da77e6501a82f71d07427458f5888d/test/functional/wallet_zapwallettxes.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff7e6f20b5da77e6501a82f71d07427458f5888d/test/functional/wallet_zapwallettxes.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_zapwallettxes.py?ref=ff7e6f20b5da77e6501a82f71d07427458f5888d",
        "patch": "@@ -31,19 +31,22 @@ def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n         self.skip_if_no_wallet_tool()\n \n-    def bitcoin_wallet_process(self, *args):\n+    def bitcoin_wallet_process(self, args):\n         binary = self.config[\"environment\"][\"BUILDDIR\"] + '/src/bitcoin-wallet' + self.config[\"environment\"][\"EXEEXT\"]\n-        args = ['-datadir={}'.format(self.nodes[0].datadir), '-chain=%s' % self.chain] + list(args)\n+        args = ['-datadir={}'.format(self.nodes[0].datadir), '-chain=%s' % self.chain] + args\n         return subprocess.Popen([binary] + args, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True)\n \n-    def assert_tool_output(self, output, *args):\n-        p = self.bitcoin_wallet_process(*args)\n+    def assert_tool_output(self, output, args):\n+        p = self.bitcoin_wallet_process(args)\n         stdout, stderr = p.communicate()\n         assert_equal(stderr, '')\n         assert_equal(stdout, output)\n         assert_equal(p.poll(), 0)\n \n-    def assert_zapped(self, wallet):\n+    def assert_zapped(self, wallet, keep_meta=True):\n+        args = [\"-wallet={}\".format(wallet)]\n+        if not keep_meta:\n+            args.append(\"-keepmeta=0\")\n         if not self.nodes[0].is_node_stopped():\n             self.nodes[0].unloadwallet(wallet)\n         out = textwrap.dedent('''\\\n@@ -52,11 +55,11 @@ def assert_zapped(self, wallet):\n             Encrypted: no\n             HD (hd seed available): yes\n             Keypool Size: 2\n-            Transactions: 2\n+            Transactions: 3\n             Address Book: 2\n         ''')\n-        self.assert_tool_output(out, \"-wallet={}\".format(wallet), \"info\")\n-        self.assert_tool_output(\"\", \"-wallet={}\".format(wallet), \"zapwallettxes\")\n+        self.assert_tool_output(out, args + [\"info\"])\n+        self.assert_tool_output(\"\", args +[\"zapwallettxes\"])\n         out = textwrap.dedent('''\\\n             Wallet info\n             ===========\n@@ -66,7 +69,7 @@ def assert_zapped(self, wallet):\n             Transactions: 0\n             Address Book: 2\n         ''')\n-        self.assert_tool_output(out, '-wallet={}'.format(wallet), 'info')\n+        self.assert_tool_output(out, args + ['info'])\n         if not self.nodes[0].is_node_stopped():\n             self.nodes[0].loadwallet(wallet)\n \n@@ -80,8 +83,12 @@ def run_test(self):\n         zaptx = self.nodes[0].get_wallet_rpc(\"zaptx\")\n         default = self.nodes[0].get_wallet_rpc(\"\")\n \n+        default.sendtoaddress(zaptx.getnewaddress(), 10)\n+        self.nodes[0].generate(1)\n+        self.sync_all()\n+\n         # This transaction will be confirmed\n-        txid1 = default.sendtoaddress(zaptx.getnewaddress(), 10)\n+        txid1 = zaptx.sendtoaddress(address=default.getnewaddress(), amount=10, comment=\"A comment\", subtractfeefromamount=True)\n \n         self.nodes[0].generate(1)\n         self.sync_all()\n@@ -93,13 +100,22 @@ def run_test(self):\n         # Confirmed and unconfirmed transactions are the only transactions in the wallet.\n         assert_equal(zaptx.gettransaction(txid1)['txid'], txid1)\n         assert_equal(zaptx.gettransaction(txid2)['txid'], txid2)\n-        assert_equal(len(zaptx.listtransactions()), 2)\n+        assert_equal(len(zaptx.listtransactions()), 3)\n \n         # Zap normally. The wallet should be rescanned (both blockchain and mempool) on loading\n         self.assert_zapped(\"zaptx\")\n         assert_equal(zaptx.gettransaction(txid1)['txid'], txid1)\n         assert_equal(zaptx.gettransaction(txid2)['txid'], txid2)\n \n+        # The comment should be persisted\n+        assert_equal(zaptx.gettransaction(txid1)[\"comment\"], \"A comment\")\n+\n+        # Zap without keepmeta\n+        self.assert_zapped(\"zaptx\", False)\n+        assert_equal(zaptx.gettransaction(txid1)['txid'], txid1)\n+        assert_equal(zaptx.gettransaction(txid2)['txid'], txid2)\n+        assert_equal(\"comment\" not in zaptx.gettransaction(txid1), True)\n+\n         # Zap normally. Restart the node with -persismempool=0\n         self.stop_node(0)\n         self.assert_zapped(\"zaptx\")"
      }
    ]
  },
  {
    "sha": "f7604a568d1e37040e24ddc6855030fcbd02dc38",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNzYwNGE1NjhkMWUzNzA0MGUyNGRkYzY4NTUwMzBmY2JkMDJkYzM4",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-08-12T00:39:07Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-08-14T16:05:15Z"
      },
      "message": "Remove -zapwallettxes startup option\n\nRemoves the startup option and replaces it with an error message telling\nusers to use the RPC instead.",
      "tree": {
        "sha": "5e554476692aa1328e11babfdd317977bad00e48",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5e554476692aa1328e11babfdd317977bad00e48"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f7604a568d1e37040e24ddc6855030fcbd02dc38",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f7604a568d1e37040e24ddc6855030fcbd02dc38",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f7604a568d1e37040e24ddc6855030fcbd02dc38",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f7604a568d1e37040e24ddc6855030fcbd02dc38/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ff7e6f20b5da77e6501a82f71d07427458f5888d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff7e6f20b5da77e6501a82f71d07427458f5888d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ff7e6f20b5da77e6501a82f71d07427458f5888d"
      }
    ],
    "stats": {
      "total": 54,
      "additions": 10,
      "deletions": 44
    },
    "files": [
      {
        "sha": "2d62d286e51198823563e5e07bf769e1cca19c16",
        "filename": "src/dummywallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7604a568d1e37040e24ddc6855030fcbd02dc38/src/dummywallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7604a568d1e37040e24ddc6855030fcbd02dc38/src/dummywallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dummywallet.cpp?ref=f7604a568d1e37040e24ddc6855030fcbd02dc38",
        "patch": "@@ -48,7 +48,6 @@ void DummyWalletInit::AddWalletOptions(ArgsManager& argsman) const\n         \"-walletdir=<dir>\",\n         \"-walletnotify=<cmd>\",\n         \"-walletrbf\",\n-        \"-zapwallettxes=<mode>\",\n         \"-dblogsize=<n>\",\n         \"-flushwallet\",\n         \"-privdb\","
      },
      {
        "sha": "c5e1c2d0849123b180247d69184fa300211dddb3",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 18,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7604a568d1e37040e24ddc6855030fcbd02dc38/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7604a568d1e37040e24ddc6855030fcbd02dc38/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=f7604a568d1e37040e24ddc6855030fcbd02dc38",
        "patch": "@@ -64,13 +64,13 @@ void WalletInit::AddWalletOptions(ArgsManager& argsman) const\n     argsman.AddArg(\"-walletnotify=<cmd>\", \"Execute command when a wallet transaction changes. %s in cmd is replaced by TxID and %w is replaced by wallet name. %w is not currently implemented on windows. On systems where %w is supported, it should NOT be quoted because this would break shell escaping used to invoke the command.\", ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n #endif\n     argsman.AddArg(\"-walletrbf\", strprintf(\"Send transactions with full-RBF opt-in enabled (RPC only, default: %u)\", DEFAULT_WALLET_RBF), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n-    argsman.AddArg(\"-zapwallettxes=<mode>\", \"Delete all wallet transactions and only recover those parts of the blockchain through -rescan on startup\"\n-                               \" (1 = keep tx meta data e.g. payment request information, 2 = drop tx meta data)\", ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n \n     argsman.AddArg(\"-dblogsize=<n>\", strprintf(\"Flush wallet database activity from memory to disk log every <n> megabytes (default: %u)\", DEFAULT_WALLET_DBLOGSIZE), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::WALLET_DEBUG_TEST);\n     argsman.AddArg(\"-flushwallet\", strprintf(\"Run a thread to flush wallet periodically (default: %u)\", DEFAULT_FLUSHWALLET), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::WALLET_DEBUG_TEST);\n     argsman.AddArg(\"-privdb\", strprintf(\"Sets the DB_PRIVATE flag in the wallet db environment (default: %u)\", DEFAULT_WALLET_PRIVDB), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::WALLET_DEBUG_TEST);\n     argsman.AddArg(\"-walletrejectlongchains\", strprintf(\"Wallet will not create transactions that violate mempool chain limits (default: %u)\", DEFAULT_WALLET_REJECT_LONG_CHAINS), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::WALLET_DEBUG_TEST);\n+\n+    argsman.AddHiddenArgs({\"-zapwallettxes\"});\n }\n \n bool WalletInit::ParameterInteraction() const\n@@ -83,26 +83,12 @@ bool WalletInit::ParameterInteraction() const\n         return true;\n     }\n \n-    const bool is_multiwallet = gArgs.GetArgs(\"-wallet\").size() > 1;\n-\n     if (gArgs.GetBoolArg(\"-blocksonly\", DEFAULT_BLOCKSONLY) && gArgs.SoftSetBoolArg(\"-walletbroadcast\", false)) {\n         LogPrintf(\"%s: parameter interaction: -blocksonly=1 -> setting -walletbroadcast=0\\n\", __func__);\n     }\n \n-    bool zapwallettxes = gArgs.GetBoolArg(\"-zapwallettxes\", false);\n-    // -zapwallettxes implies dropping the mempool on startup\n-    if (zapwallettxes && gArgs.SoftSetBoolArg(\"-persistmempool\", false)) {\n-        LogPrintf(\"%s: parameter interaction: -zapwallettxes enabled -> setting -persistmempool=0\\n\", __func__);\n-    }\n-\n-    // -zapwallettxes implies a rescan\n-    if (zapwallettxes) {\n-        if (is_multiwallet) {\n-            return InitError(strprintf(Untranslated(\"%s is only allowed with a single wallet file\"), \"-zapwallettxes\"));\n-        }\n-        if (gArgs.SoftSetBoolArg(\"-rescan\", true)) {\n-            LogPrintf(\"%s: parameter interaction: -zapwallettxes enabled -> setting -rescan=1\\n\", __func__);\n-        }\n+    if (gArgs.IsArgSet(\"-zapwallettxes\")) {\n+        return InitError(_(\"-zapwallettxes has been replaced with the zapwallettxes command in the bitcoin-wallet tool. Please use that instead.\"));\n     }\n \n     if (gArgs.GetBoolArg(\"-sysperms\", false))"
      },
      {
        "sha": "c1e502ee4dc64bc2da52723fa8cba6b8ea6c35eb",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7604a568d1e37040e24ddc6855030fcbd02dc38/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7604a568d1e37040e24ddc6855030fcbd02dc38/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=f7604a568d1e37040e24ddc6855030fcbd02dc38",
        "patch": "@@ -2481,7 +2481,7 @@ static UniValue loadwallet(const JSONRPCRequest& request)\n             RPCHelpMan{\"loadwallet\",\n                 \"\\nLoads a wallet from a wallet file or directory.\"\n                 \"\\nNote that all wallet command-line options used when starting bitcoind will be\"\n-                \"\\napplied to the new wallet (eg -zapwallettxes, rescan, etc).\\n\",\n+                \"\\napplied to the new wallet (eg -rescan, etc).\\n\",\n                 {\n                     {\"filename\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The wallet directory or .dat file.\"},\n                 },"
      },
      {
        "sha": "02aea73294420759ba02d8b4000e846eaff7564b",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 16,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7604a568d1e37040e24ddc6855030fcbd02dc38/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7604a568d1e37040e24ddc6855030fcbd02dc38/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=f7604a568d1e37040e24ddc6855030fcbd02dc38",
        "patch": "@@ -3742,21 +3742,6 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n {\n     const std::string walletFile = WalletDataFilePath(location.GetPath()).string();\n \n-    // needed to restore wallet transaction meta data after -zapwallettxes\n-\n-    if (gArgs.GetBoolArg(\"-zapwallettxes\", false)) {\n-        chain.initMessage(_(\"Zapping all transactions from wallet...\").translated);\n-\n-        bool keep_meta = gArgs.GetArg(\"-zapwallettxes\", \"1\") != \"2\";\n-        std::map<uint256, CWalletTx> vWtx;\n-        std::unique_ptr<CWallet> tempWallet = MakeUnique<CWallet>(&chain, location, CreateWalletDatabase(location.GetPath()));\n-        DBErrors nZapWalletRet = tempWallet->ZapWalletTx(vWtx, keep_meta);\n-        if (nZapWalletRet != DBErrors::LOAD_OK) {\n-            error = strprintf(_(\"Error loading %s: Wallet corrupted\"), walletFile);\n-            return nullptr;\n-        }\n-    }\n-\n     chain.initMessage(_(\"Loading wallet...\").translated);\n \n     int64_t nStart = GetTimeMillis();\n@@ -4018,7 +4003,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n         walletInstance->chainStateFlushed(chain.getTipLocator());\n         walletInstance->database->IncrementUpdateCounter();\n \n-        // Restore wallet transaction metadata after -zapwallettxes=1\n+        // Restore wallet transaction metadata after 'bitcoin-wallet -keepmeta zapwallettxes'\n         if (walletInstance->m_has_zapped)\n         {\n             WalletBatch batch(*walletInstance->database);"
      },
      {
        "sha": "12f5ce6af9c5646d74426fcee06604e5568424e4",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7604a568d1e37040e24ddc6855030fcbd02dc38/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7604a568d1e37040e24ddc6855030fcbd02dc38/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=f7604a568d1e37040e24ddc6855030fcbd02dc38",
        "patch": "@@ -527,8 +527,6 @@ def run_test(self):\n         maintenance = [\n             '-rescan',\n             '-reindex',\n-            '-zapwallettxes=1',\n-            '-zapwallettxes=2',\n         ]\n         chainlimit = 6\n         for m in maintenance:"
      },
      {
        "sha": "5c9d7ff62938f566419d1f76f7c6029813e7d76d",
        "filename": "test/functional/wallet_multiwallet.py",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7604a568d1e37040e24ddc6855030fcbd02dc38/test/functional/wallet_multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7604a568d1e37040e24ddc6855030fcbd02dc38/test/functional/wallet_multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_multiwallet.py?ref=f7604a568d1e37040e24ddc6855030fcbd02dc38",
        "patch": "@@ -134,11 +134,6 @@ def wallet_file(name):\n         open(not_a_dir, 'a', encoding=\"utf8\").close()\n         self.nodes[0].assert_start_raises_init_error(['-walletdir=' + not_a_dir], 'Error: Specified -walletdir \"' + not_a_dir + '\" is not a directory')\n \n-        self.log.info(\"Do not allow -zapwallettxes with multiwallet\")\n-        self.nodes[0].assert_start_raises_init_error(['-zapwallettxes', '-wallet=w1', '-wallet=w2'], \"Error: -zapwallettxes is only allowed with a single wallet file\")\n-        self.nodes[0].assert_start_raises_init_error(['-zapwallettxes=1', '-wallet=w1', '-wallet=w2'], \"Error: -zapwallettxes is only allowed with a single wallet file\")\n-        self.nodes[0].assert_start_raises_init_error(['-zapwallettxes=2', '-wallet=w1', '-wallet=w2'], \"Error: -zapwallettxes is only allowed with a single wallet file\")\n-\n         # if wallets/ doesn't exist, datadir should be the default wallet dir\n         wallet_dir2 = data_dir('walletdir')\n         os.rename(wallet_dir(), wallet_dir2)"
      },
      {
        "sha": "03f9a26e1439bd257d7e3c43ff7993babf2e8c00",
        "filename": "test/functional/wallet_zapwallettxes.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7604a568d1e37040e24ddc6855030fcbd02dc38/test/functional/wallet_zapwallettxes.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7604a568d1e37040e24ddc6855030fcbd02dc38/test/functional/wallet_zapwallettxes.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_zapwallettxes.py?ref=f7604a568d1e37040e24ddc6855030fcbd02dc38",
        "patch": "@@ -128,5 +128,8 @@ def run_test(self):\n         # This will raise an exception because the unconfirmed transaction has been zapped\n         assert_raises_rpc_error(-5, 'Invalid or non-wallet transaction id', zaptx.gettransaction, txid2)\n \n+        self.log.info(\"Make sure -zapwallettxes gives an error\")\n+        self.nodes[0].assert_start_raises_init_error([\"-zapwallettxes\"], \"Error: -zapwallettxes has been replaced with the zapwallettxes command in the bitcoin-wallet tool. Please use that instead.\")\n+\n if __name__ == '__main__':\n     ZapWalletTXesTest().main()"
      },
      {
        "sha": "f77242d3353aaabc2a71f017bfbcb47845db35f0",
        "filename": "test/lint/check-doc.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7604a568d1e37040e24ddc6855030fcbd02dc38/test/lint/check-doc.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7604a568d1e37040e24ddc6855030fcbd02dc38/test/lint/check-doc.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/check-doc.py?ref=f7604a568d1e37040e24ddc6855030fcbd02dc38",
        "patch": "@@ -23,7 +23,7 @@\n CMD_GREP_WALLET_HIDDEN_ARGS = r\"git grep --function-context 'void DummyWalletInit::AddWalletOptions' -- {}\".format(CMD_ROOT_DIR)\n CMD_GREP_DOCS = r\"git grep --perl-regexp '{}' {}\".format(REGEX_DOC, CMD_ROOT_DIR)\n # list unsupported, deprecated and duplicate args as they need no documentation\n-SET_DOC_OPTIONAL = set(['-h', '-help', '-dbcrashratio', '-forcecompactdb'])\n+SET_DOC_OPTIONAL = set(['-h', '-help', '-dbcrashratio', '-forcecompactdb', '-zapwallettxes'])\n \n \n def lint_missing_argument_documentation():"
      }
    ]
  }
]