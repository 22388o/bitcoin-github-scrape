instagibbs,2019-10-11 13:19:51,wonder if it makes sense to have a `DUMMY_P2WPKH_SCRIPT` constant and just stick those everywhere instead?,https://github.com/bitcoin/bitcoin/pull/17108#issuecomment-541061499,541061499,
MarcoFalke,2019-10-11 13:22:00,"> By bumping the dummy scriptPubKey size to 22 bytes (= the size of a P2WPKH\nscriptPubKey), on all occurences the problem is solved.\n\nAre you sure on that? While the scriptPubKey has the same size as a P2WPKH, you don't know the size of the scriptSig (which could be empty, or `OP_TRUE`).",https://github.com/bitcoin/bitcoin/pull/17108#issuecomment-541062190,541062190,
instagibbs,2019-10-11 13:39:38,"A normal ""blank"" 1 input, 1 output transaction is 60 bytes exactly. Padding by `22` should be enough to hit 82 byte minimum. This can even be dynamically generated by code to make sure it doesn't regress:\n\n```\n        script = b'a'*22\n        txn = CTransaction()\n        txn.vin.append(CTxIn())\n        txn.vout.append(CTxOut(0, script))\n        assert_equal(len(txn.serialize()), 82)",https://github.com/bitcoin/bitcoin/pull/17108#issuecomment-541068762,541068762,
theStack,2019-10-11 13:54:04,"\n> \n> wonder if it makes sense to have a `DUMMY_P2WPKH_SCRIPT` constant and just stick those everywhere instead?\n\n\n\nSounds good, is this still a small enough change to include it in this same PR as well? I guess it would also make sense then to have a constant for all the `CScript([b'a' * 35])` scriptPubkeys which are used a lot in the same files -- even though I am not sure where the ",https://github.com/bitcoin/bitcoin/pull/17108#issuecomment-541074210,541074210,
MarcoFalke,2019-10-11 13:55:27,"@instagibbs Right. Forgot that the outpoint need to be serialized as well :woman_facepalming: \n\n@theStack  the `35` was invented by me, because I can't do math. Feel free to fix",https://github.com/bitcoin/bitcoin/pull/17108#issuecomment-541074785,541074785,
instagibbs,2019-10-11 14:00:52,"@theStack 22 is more correct, I'd just use that in this same PR(as some sort of constant). Makes this code easier to understand/update in the future.",https://github.com/bitcoin/bitcoin/pull/17108#issuecomment-541076948,541076948,
theStack,2019-10-11 14:26:03,"> \n> \n> > By bumping the dummy scriptPubKey size to 22 bytes (= the size of a P2WPKH\n> > scriptPubKey), on all occurences the problem is solved.\n> \n> Are you sure on that? While the scriptPubKey has the same size as a P2WPKH, you don't know the size of the scriptSig (which could be empty, or `OP_TRUE`).\n\nYes, because the 82-byte limit to trigger the ""tx-size-small"" error is already c",https://github.com/bitcoin/bitcoin/pull/17108#issuecomment-541086969,541086969,
MarcoFalke,2019-10-11 14:28:33,Sounds good!,https://github.com/bitcoin/bitcoin/pull/17108#issuecomment-541087954,541087954,
theStack,2019-10-11 15:24:33,"Done (https://github.com/bitcoin/bitcoin/pull/17108/commits/510a219db8b15729e655a62bedac23f99264f0e3, https://github.com/bitcoin/bitcoin/pull/17108/commits/76f764bc636736b34fb41ed4255000515e0aa990) with two uncertainties though:\n\n- Is it worth it to put the common constant `DUMMY_P2WPKH_SCRIPT` into a shared file? If yes, where would it fit? script.py? (Haven't found any shared constant script",https://github.com/bitcoin/bitcoin/pull/17108#issuecomment-541109914,541109914,
theStack,2019-10-13 14:57:02,Squashed (https://github.com/bitcoin/bitcoin/commit/f2240dbcdae9c5b9a566a916c0c97ba0ae71a60a).,https://github.com/bitcoin/bitcoin/pull/17108#issuecomment-541425361,541425361,
instagibbs,2019-10-14 13:33:46,reACK https://github.com/bitcoin/bitcoin/pull/17108/commits/32d665c2657793c8b2cc7248d26d80a940acfe20 just s/Bytes/bytes/,https://github.com/bitcoin/bitcoin/pull/17108#issuecomment-541680618,541680618,
MarcoFalke,2019-10-14 14:14:30,"ACK 32d665c2657793c8b2cc7248d26d80a940acfe20\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nACK 32d665c2657793c8b2cc7248d26d80a940acfe20\n-----BEGIN PGP SIGNATURE-----\n\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUju5Av9Gl0dNit+tNtmMOFGl3T46rLj0+EiVbqETVHbrCTUQu/xG/PuuLY9k7",https://github.com/bitcoin/bitcoin/pull/17108#issuecomment-541703843,541703843,
instagibbs,2019-10-11 15:25:36,to be clear: P2WPKH scripts are 22 length scripts: OP_0 <PUSH 20> <20-bytes>,https://github.com/bitcoin/bitcoin/pull/17108#discussion_r334047738,334047738,test/functional/feature_rbf.py
theStack,2019-10-11 15:31:59,"Yes, the 21 is chosen by purpose, as the constructor seems to add an implicit push instruction here, resulting in the desired 22 bytes -- printing length and content of `DUMMY_P2WPKH_SCRIPT` gives:\n```\n22\n\nb'\x15\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01'\n``` \nShould I maybe add a comment noting that the result is 22 bytes?",https://github.com/bitcoin/bitcoin/pull/17108#discussion_r334050777,334050777,test/functional/feature_rbf.py
instagibbs,2019-10-11 15:39:48,I'd be very surprised that the leading byte isn't the serialize byte for the entire script,https://github.com/bitcoin/bitcoin/pull/17108#discussion_r334054459,334054459,test/functional/feature_rbf.py
theStack,2019-10-11 16:22:21,"As far as I can see the length of a scriptPubKey is serialized in class TxOut (respectively for scriptSig in class TxIn) rather directly in the class CScript itself, see https://github.com/bitcoin/bitcoin/blob/master/test/functional/test_framework/messages.py#L337 and https://github.com/bitcoin/bitcoin/blob/master/test/functional/test_framework/messages.py#L89.\n\nQuick check in the python conso",https://github.com/bitcoin/bitcoin/pull/17108#discussion_r334072073,334072073,test/functional/feature_rbf.py
instagibbs,2019-10-11 16:27:22,"```\n+        # Transaction size\n+        txn = CTransaction()\n+        txn.vin.append(CTxIn())\n+        txn.vout.append(CTxOut(0, b''))\n+        print(""txn size: "" +str(len(txn.serialize())))\n+        return\n------\ntxn size: 60\n```\n:thinking: ",https://github.com/bitcoin/bitcoin/pull/17108#discussion_r334073990,334073990,test/functional/feature_rbf.py
instagibbs,2019-10-11 16:29:26,"```\n        # Transaction size\n        txn = CTransaction()\n        txn.vin.append(CTxIn())\n        txn.vout.append(CTxOut(0, b'a'*21))\n        print(""txn size: "" +str(len(txn.serialize())))\n        return\n-----\ntxn size: 81\n```\n",https://github.com/bitcoin/bitcoin/pull/17108#discussion_r334074782,334074782,test/functional/feature_rbf.py
instagibbs,2019-10-11 16:29:55,"ah! I'm sorry you're using a different constructor, continue :)",https://github.com/bitcoin/bitcoin/pull/17108#discussion_r334074978,334074978,test/functional/feature_rbf.py
theStack,2019-10-11 16:43:20,"I actually tried the simpler ""pure"" construction of the script with just e.g. `b'a' * 22` but then the tests would fail because the script contents don't make sense:\n`test_framework.authproxy.JSONRPCException: non-mandatory-script-verify-flag (Data push larger than necessary) (code 64) (-26)`\nor\n`test_framework.authproxy.JSONRPCException: mandatory-script-verify-flag-failed (Script evaluated",https://github.com/bitcoin/bitcoin/pull/17108#discussion_r334079836,334079836,test/functional/feature_rbf.py
instagibbs,2019-10-11 16:54:38,right it's not even a parseable script,https://github.com/bitcoin/bitcoin/pull/17108#discussion_r334084077,334084077,test/functional/feature_rbf.py
MarcoFalke,2019-10-11 17:21:38,Could add a comment here to explain what this is for less gifted people (like me). Maybe take this: https://github.com/bitcoin/bitcoin/pull/17108#issuecomment-541086969,https://github.com/bitcoin/bitcoin/pull/17108#discussion_r334093987,334093987,test/functional/feature_bip68_sequence.py
MarcoFalke,2019-10-11 17:23:09,Could move this to a common place like `./test/functional/test_framework/util.py` and import it from there?,https://github.com/bitcoin/bitcoin/pull/17108#discussion_r334094579,334094579,test/functional/feature_bip68_sequence.py
theStack,2019-10-11 18:50:52,"Okay, will add an explanation.",https://github.com/bitcoin/bitcoin/pull/17108#discussion_r334129805,334129805,test/functional/feature_bip68_sequence.py
theStack,2019-10-11 19:02:59,"The misery is that I can't find an appropriate place where to put the constant into. Importing the module `script` in `util.py` leads to a circular dependency (`script` imports `messages`, which in turn imports `util`), while declaring the constant in `script.py` doesn't work as on top `CScript` is not defined yet. Any other module within `test_framework` doesn't seem to fit thematically. Any sugg",https://github.com/bitcoin/bitcoin/pull/17108#discussion_r334134550,334134550,test/functional/feature_bip68_sequence.py
MarcoFalke,2019-10-11 19:25:58,You can create a new file?,https://github.com/bitcoin/bitcoin/pull/17108#discussion_r334142299,334142299,test/functional/feature_bip68_sequence.py
MarcoFalke,2019-10-11 20:25:45,test/functional/feature_bip68_sequence.py:11:1: F401 'test_framework.script.CScript' imported but unused,https://github.com/bitcoin/bitcoin/pull/17108#discussion_r334161470,334161470,test/functional/feature_bip68_sequence.py
instagibbs,2019-10-14 12:52:06,s/Byes/bytes/,https://github.com/bitcoin/bitcoin/pull/17108#discussion_r334466250,334466250,test/functional/test_framework/script_util.py
theStack,2019-10-14 13:04:19,"fixed, as well as three lines before at the end of ""Output:""",https://github.com/bitcoin/bitcoin/pull/17108#discussion_r334471603,334471603,test/functional/test_framework/script_util.py
