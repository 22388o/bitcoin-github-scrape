[
  {
    "sha": "b8edb9810a699015e997e2098dddb2a6cfacbed6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiOGVkYjk4MTBhNjk5MDE1ZTk5N2UyMDk4ZGRkYjJhNmNmYWNiZWQ2",
    "commit": {
      "author": {
        "name": "Jon Layton",
        "email": "me@jonl.io",
        "date": "2018-10-02T19:49:18Z"
      },
      "committer": {
        "name": "Jon Layton",
        "email": "me@jonl.io",
        "date": "2018-10-09T13:42:19Z"
      },
      "message": "[rpc] Descriptions: Textual consistency fixes\n\n'Must be one of' should always end in a ':'\n\n'hex encoded' is now always 'hex-encoded'\n\nRemove redundant '(defaults to CONSERVATIVE)' text from estimatesmartfee\n\nConsistent spacing for options '( verbose )' and '( verbosity )'\n\n'BIP125 replaceable' is now always 'BIP125-replaceable'\n\nJSON-RPC example is now always 'As a JSON-RPC call'",
      "tree": {
        "sha": "2b0f75d45a963fb0c37cc616e3f14e7b288a0b08",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2b0f75d45a963fb0c37cc616e3f14e7b288a0b08"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b8edb9810a699015e997e2098dddb2a6cfacbed6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b8edb9810a699015e997e2098dddb2a6cfacbed6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b8edb9810a699015e997e2098dddb2a6cfacbed6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b8edb9810a699015e997e2098dddb2a6cfacbed6/comments",
    "author": {
      "login": "ch4ot1c",
      "id": 2287825,
      "node_id": "MDQ6VXNlcjIyODc4MjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2287825?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ch4ot1c",
      "html_url": "https://github.com/ch4ot1c",
      "followers_url": "https://api.github.com/users/ch4ot1c/followers",
      "following_url": "https://api.github.com/users/ch4ot1c/following{/other_user}",
      "gists_url": "https://api.github.com/users/ch4ot1c/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ch4ot1c/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ch4ot1c/subscriptions",
      "organizations_url": "https://api.github.com/users/ch4ot1c/orgs",
      "repos_url": "https://api.github.com/users/ch4ot1c/repos",
      "events_url": "https://api.github.com/users/ch4ot1c/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ch4ot1c/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ch4ot1c",
      "id": 2287825,
      "node_id": "MDQ6VXNlcjIyODc4MjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2287825?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ch4ot1c",
      "html_url": "https://github.com/ch4ot1c",
      "followers_url": "https://api.github.com/users/ch4ot1c/followers",
      "following_url": "https://api.github.com/users/ch4ot1c/following{/other_user}",
      "gists_url": "https://api.github.com/users/ch4ot1c/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ch4ot1c/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ch4ot1c/subscriptions",
      "organizations_url": "https://api.github.com/users/ch4ot1c/orgs",
      "repos_url": "https://api.github.com/users/ch4ot1c/repos",
      "events_url": "https://api.github.com/users/ch4ot1c/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ch4ot1c/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1e8f88e071019907785b260477bd359bef6f9a8f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e8f88e071019907785b260477bd359bef6f9a8f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1e8f88e071019907785b260477bd359bef6f9a8f"
      }
    ],
    "stats": {
      "total": 76,
      "additions": 38,
      "deletions": 38
    },
    "files": [
      {
        "sha": "ff71b19250156fe6ecb5e2af4730a18b5c68c48d",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b8edb9810a699015e997e2098dddb2a6cfacbed6/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b8edb9810a699015e997e2098dddb2a6cfacbed6/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=b8edb9810a699015e997e2098dddb2a6cfacbed6",
        "patch": "@@ -182,7 +182,7 @@ static UniValue getbestblockhash(const JSONRPCRequest& request)\n             \"getbestblockhash\\n\"\n             \"\\nReturns the hash of the best (tip) block in the longest blockchain.\\n\"\n             \"\\nResult:\\n\"\n-            \"\\\"hex\\\"      (string) the block hash hex encoded\\n\"\n+            \"\\\"hex\\\"      (string) the block hash, hex-encoded\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"getbestblockhash\", \"\")\n             + HelpExampleRpc(\"getbestblockhash\", \"\")\n@@ -509,17 +509,17 @@ static UniValue getmempoolancestors(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2) {\n         throw std::runtime_error(\n-            \"getmempoolancestors txid (verbose)\\n\"\n+            \"getmempoolancestors txid ( verbose )\\n\"\n             \"\\nIf txid is in the mempool, returns all in-mempool ancestors.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"txid\\\"                 (string, required) The transaction id (must be in mempool)\\n\"\n             \"2. verbose                  (boolean, optional, default=false) True for a json object, false for array of transaction ids\\n\"\n-            \"\\nResult (for verbose=false):\\n\"\n+            \"\\nResult (for verbose = false):\\n\"\n             \"[                       (json array of strings)\\n\"\n             \"  \\\"transactionid\\\"           (string) The transaction id of an in-mempool ancestor transaction\\n\"\n             \"  ,...\\n\"\n             \"]\\n\"\n-            \"\\nResult (for verbose=true):\\n\"\n+            \"\\nResult (for verbose = true):\\n\"\n             \"{                           (json object)\\n\"\n             \"  \\\"transactionid\\\" : {       (json object)\\n\"\n             + EntryDescriptionString()\n@@ -573,17 +573,17 @@ static UniValue getmempooldescendants(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2) {\n         throw std::runtime_error(\n-            \"getmempooldescendants txid (verbose)\\n\"\n+            \"getmempooldescendants txid ( verbose )\\n\"\n             \"\\nIf txid is in the mempool, returns all in-mempool descendants.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"txid\\\"                 (string, required) The transaction id (must be in mempool)\\n\"\n             \"2. verbose                  (boolean, optional, default=false) True for a json object, false for array of transaction ids\\n\"\n-            \"\\nResult (for verbose=false):\\n\"\n+            \"\\nResult (for verbose = false):\\n\"\n             \"[                       (json array of strings)\\n\"\n             \"  \\\"transactionid\\\"           (string) The transaction id of an in-mempool descendant transaction\\n\"\n             \"  ,...\\n\"\n             \"]\\n\"\n-            \"\\nResult (for verbose=true):\\n\"\n+            \"\\nResult (for verbose = true):\\n\"\n             \"{                           (json object)\\n\"\n             \"  \\\"transactionid\\\" : {       (json object)\\n\"\n             + EntryDescriptionString()\n@@ -700,7 +700,7 @@ static UniValue getblockheader(const JSONRPCRequest& request)\n             \"If verbose is true, returns an Object with information about blockheader <hash>.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"hash\\\"          (string, required) The block hash\\n\"\n-            \"2. verbose           (boolean, optional, default=true) true for a json object, false for the hex encoded data\\n\"\n+            \"2. verbose           (boolean, optional, default=true) true for a json object, false for the hex-encoded data\\n\"\n             \"\\nResult (for verbose = true):\\n\"\n             \"{\\n\"\n             \"  \\\"hash\\\" : \\\"hash\\\",     (string) the block hash (same as provided)\\n\"\n@@ -779,7 +779,7 @@ static UniValue getblock(const JSONRPCRequest& request)\n             \"If verbosity is 2, returns an Object with information about block <hash> and information about each transaction. \\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"blockhash\\\"          (string, required) The block hash\\n\"\n-            \"2. verbosity              (numeric, optional, default=1) 0 for hex encoded data, 1 for a json object, and 2 for json object with transaction data\\n\"\n+            \"2. verbosity              (numeric, optional, default=1) 0 for hex-encoded data, 1 for a json object, and 2 for json object with transaction data\\n\"\n             \"\\nResult (for verbosity = 0):\\n\"\n             \"\\\"data\\\"             (string) A string that is serialized, hex-encoded data for block 'hash'.\\n\"\n             \"\\nResult (for verbosity = 1):\\n\"\n@@ -1046,7 +1046,7 @@ UniValue gettxout(const JSONRPCRequest& request)\n             + HelpExampleCli(\"listunspent\", \"\") +\n             \"\\nView the details\\n\"\n             + HelpExampleCli(\"gettxout\", \"\\\"txid\\\" 1\") +\n-            \"\\nAs a json rpc call\\n\"\n+            \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"gettxout\", \"\\\"txid\\\", 1\")\n         );\n "
      },
      {
        "sha": "d5fb0db752c3fa8f08ea96a11aafa3128a081c37",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b8edb9810a699015e997e2098dddb2a6cfacbed6/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b8edb9810a699015e997e2098dddb2a6cfacbed6/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=b8edb9810a699015e997e2098dddb2a6cfacbed6",
        "patch": "@@ -813,7 +813,7 @@ static UniValue estimatesmartfee(const JSONRPCRequest& request)\n             \"                   higher feerate and is more likely to be sufficient for the desired\\n\"\n             \"                   target, but is not as responsive to short term drops in the\\n\"\n             \"                   prevailing fee market.  Must be one of:\\n\"\n-            \"       \\\"UNSET\\\" (defaults to CONSERVATIVE)\\n\"\n+            \"       \\\"UNSET\\\"\\n\"\n             \"       \\\"ECONOMICAL\\\"\\n\"\n             \"       \\\"CONSERVATIVE\\\"\\n\"\n             \"\\nResult:\\n\""
      },
      {
        "sha": "6a66998d37daca9a1079c2457db4229b01e74673",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b8edb9810a699015e997e2098dddb2a6cfacbed6/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b8edb9810a699015e997e2098dddb2a6cfacbed6/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=b8edb9810a699015e997e2098dddb2a6cfacbed6",
        "patch": "@@ -44,7 +44,7 @@ static UniValue validateaddress(const JSONRPCRequest& request)\n             \"{\\n\"\n             \"  \\\"isvalid\\\" : true|false,       (boolean) If the address is valid or not. If not, this is the only property returned.\\n\"\n             \"  \\\"address\\\" : \\\"address\\\",        (string) The bitcoin address validated\\n\"\n-            \"  \\\"scriptPubKey\\\" : \\\"hex\\\",       (string) The hex encoded scriptPubKey generated by the address\\n\"\n+            \"  \\\"scriptPubKey\\\" : \\\"hex\\\",       (string) The hex-encoded scriptPubKey generated by the address\\n\"\n             \"  \\\"isscript\\\" : true|false,      (boolean) If the key is a script\\n\"\n             \"  \\\"iswitness\\\" : true|false,     (boolean) If the address is a witness address\\n\"\n             \"  \\\"witness_version\\\" : version   (numeric, optional) The version number of the witness program\\n\"\n@@ -99,7 +99,7 @@ static UniValue createmultisig(const JSONRPCRequest& request)\n             \"\\nExamples:\\n\"\n             \"\\nCreate a multisig address from 2 public keys\\n\"\n             + HelpExampleCli(\"createmultisig\", \"2 \\\"[\\\\\\\"03789ed0bb717d88f7d321a368d905e7430207ebbd82bd342cf11ae157a7ace5fd\\\\\\\",\\\\\\\"03dbc6764b8884a92e871274b87583e6d5c2a58819473e17e107ef3f6aa5a61626\\\\\\\"]\\\"\") +\n-            \"\\nAs a json rpc call\\n\"\n+            \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"createmultisig\", \"2, \\\"[\\\\\\\"03789ed0bb717d88f7d321a368d905e7430207ebbd82bd342cf11ae157a7ace5fd\\\\\\\",\\\\\\\"03dbc6764b8884a92e871274b87583e6d5c2a58819473e17e107ef3f6aa5a61626\\\\\\\"]\\\"\")\n         ;\n         throw std::runtime_error(msg);\n@@ -157,7 +157,7 @@ static UniValue verifymessage(const JSONRPCRequest& request)\n             + HelpExampleCli(\"signmessage\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\" \\\"my message\\\"\") +\n             \"\\nVerify the signature\\n\"\n             + HelpExampleCli(\"verifymessage\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\" \\\"signature\\\" \\\"my message\\\"\") +\n-            \"\\nAs json rpc\\n\"\n+            \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"verifymessage\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\", \\\"signature\\\", \\\"my message\\\"\")\n         );\n \n@@ -210,7 +210,7 @@ static UniValue signmessagewithprivkey(const JSONRPCRequest& request)\n             + HelpExampleCli(\"signmessagewithprivkey\", \"\\\"privkey\\\" \\\"my message\\\"\") +\n             \"\\nVerify the signature\\n\"\n             + HelpExampleCli(\"verifymessage\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\" \\\"signature\\\" \\\"my message\\\"\") +\n-            \"\\nAs json rpc\\n\"\n+            \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"signmessagewithprivkey\", \"\\\"privkey\\\", \\\"my message\\\"\")\n         );\n "
      },
      {
        "sha": "a2d990b51dcb3a0d1131123fd6a5bfdb139fa73a",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b8edb9810a699015e997e2098dddb2a6cfacbed6/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b8edb9810a699015e997e2098dddb2a6cfacbed6/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=b8edb9810a699015e997e2098dddb2a6cfacbed6",
        "patch": "@@ -466,13 +466,13 @@ static UniValue createrawtransaction(const JSONRPCRequest& request)\n             \"      \\\"address\\\": x.xxx,    (obj, optional) A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\\n\"\n             \"    },\\n\"\n             \"    {\\n\"\n-            \"      \\\"data\\\": \\\"hex\\\"        (obj, optional) A key-value pair. The key must be \\\"data\\\", the value is hex encoded data\\n\"\n+            \"      \\\"data\\\": \\\"hex\\\"        (obj, optional) A key-value pair. The key must be \\\"data\\\", the value is hex-encoded data\\n\"\n             \"    }\\n\"\n             \"    ,...                     More key-value pairs of the above form. For compatibility reasons, a dictionary, which holds the key-value pairs directly, is also\\n\"\n             \"                             accepted as second parameter.\\n\"\n             \"   ]\\n\"\n             \"3. locktime                  (numeric, optional, default=0) Raw locktime. Non-0 value also locktime-activates inputs\\n\"\n-            \"4. replaceable               (boolean, optional, default=false) Marks this transaction as BIP125 replaceable.\\n\"\n+            \"4. replaceable               (boolean, optional, default=false) Marks this transaction as BIP125-replaceable.\\n\"\n             \"                             Allows this transaction to be replaced by a transaction with higher fees. If provided, it is an error if explicit sequence numbers are incompatible.\\n\"\n             \"\\nResult:\\n\"\n             \"\\\"transaction\\\"              (string) hex string of the transaction\\n\"\n@@ -581,11 +581,11 @@ static UniValue decodescript(const JSONRPCRequest& request)\n             \"decodescript \\\"hexstring\\\"\\n\"\n             \"\\nDecode a hex-encoded script.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"hexstring\\\"     (string) the hex encoded script\\n\"\n+            \"1. \\\"hexstring\\\"     (string) the hex-encoded script\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"asm\\\":\\\"asm\\\",   (string) Script public key\\n\"\n-            \"  \\\"hex\\\":\\\"hex\\\",   (string) hex encoded public key\\n\"\n+            \"  \\\"hex\\\":\\\"hex\\\",   (string) hex-encoded public key\\n\"\n             \"  \\\"type\\\":\\\"type\\\", (string) The output type\\n\"\n             \"  \\\"reqSigs\\\": n,    (numeric) The required signatures\\n\"\n             \"  \\\"addresses\\\": [   (json array of string)\\n\"\n@@ -922,7 +922,7 @@ static UniValue signrawtransactionwithkey(const JSONRPCRequest& request)\n             \"       }\\n\"\n             \"       ,...\\n\"\n             \"    ]\\n\"\n-            \"4. \\\"sighashtype\\\"                    (string, optional, default=ALL) The signature hash type. Must be one of\\n\"\n+            \"4. \\\"sighashtype\\\"                    (string, optional, default=ALL) The signature hash type. Must be one of:\\n\"\n             \"       \\\"ALL\\\"\\n\"\n             \"       \\\"NONE\\\"\\n\"\n             \"       \\\"SINGLE\\\"\\n\"\n@@ -999,7 +999,7 @@ static UniValue sendrawtransaction(const JSONRPCRequest& request)\n             + HelpExampleCli(\"signrawtransactionwithwallet\", \"\\\"myhex\\\"\") +\n             \"\\nSend the transaction (signed hex)\\n\"\n             + HelpExampleCli(\"sendrawtransaction\", \"\\\"signedhex\\\"\") +\n-            \"\\nAs a json rpc call\\n\"\n+            \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"sendrawtransaction\", \"\\\"signedhex\\\"\")\n         );\n \n@@ -1104,7 +1104,7 @@ static UniValue testmempoolaccept(const JSONRPCRequest& request)\n             + HelpExampleCli(\"signrawtransactionwithwallet\", \"\\\"myhex\\\"\") +\n             \"\\nTest acceptance of the transaction (signed hex)\\n\"\n             + HelpExampleCli(\"testmempoolaccept\", \"\\\"signedhex\\\"\") +\n-            \"\\nAs a json rpc call\\n\"\n+            \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"testmempoolaccept\", \"[\\\"signedhex\\\"]\")\n             // clang-format on\n             );\n@@ -1587,7 +1587,7 @@ UniValue createpsbt(const JSONRPCRequest& request)\n                             \"      \\\"address\\\": x.xxx,    (obj, optional) A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\\n\"\n                             \"    },\\n\"\n                             \"    {\\n\"\n-                            \"      \\\"data\\\": \\\"hex\\\"        (obj, optional) A key-value pair. The key must be \\\"data\\\", the value is hex encoded data\\n\"\n+                            \"      \\\"data\\\": \\\"hex\\\"        (obj, optional) A key-value pair. The key must be \\\"data\\\", the value is hex-encoded data\\n\"\n                             \"    }\\n\"\n                             \"    ,...                     More key-value pairs of the above form. For compatibility reasons, a dictionary, which holds the key-value pairs directly, is also\\n\"\n                             \"                             accepted as second parameter.\\n\""
      },
      {
        "sha": "df10fb48cc2d186b0f3deb844089b620230cf8c8",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 15,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b8edb9810a699015e997e2098dddb2a6cfacbed6/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b8edb9810a699015e997e2098dddb2a6cfacbed6/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=b8edb9810a699015e997e2098dddb2a6cfacbed6",
        "patch": "@@ -504,7 +504,7 @@ static UniValue signmessage(const JSONRPCRequest& request)\n             + HelpExampleCli(\"signmessage\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\" \\\"my message\\\"\") +\n             \"\\nVerify the signature\\n\"\n             + HelpExampleCli(\"verifymessage\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\" \\\"signature\\\" \\\"my message\\\"\") +\n-            \"\\nAs json rpc\\n\"\n+            \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"signmessage\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\", \\\"my message\\\"\")\n         );\n \n@@ -566,7 +566,7 @@ static UniValue getreceivedbyaddress(const JSONRPCRequest& request)\n             + HelpExampleCli(\"getreceivedbyaddress\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\" 0\") +\n             \"\\nThe amount with at least 6 confirmations\\n\"\n             + HelpExampleCli(\"getreceivedbyaddress\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\" 6\") +\n-            \"\\nAs a json rpc call\\n\"\n+            \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"getreceivedbyaddress\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\", 6\")\n        );\n \n@@ -633,7 +633,7 @@ static UniValue getreceivedbylabel(const JSONRPCRequest& request)\n             + HelpExampleCli(\"getreceivedbylabel\", \"\\\"tabby\\\" 0\") +\n             \"\\nThe amount with at least 6 confirmations\\n\"\n             + HelpExampleCli(\"getreceivedbylabel\", \"\\\"tabby\\\" 6\") +\n-            \"\\nAs a json rpc call\\n\"\n+            \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"getreceivedbylabel\", \"\\\"tabby\\\", 6\")\n         );\n \n@@ -699,7 +699,7 @@ static UniValue getbalance(const JSONRPCRequest& request)\n             + HelpExampleCli(\"getbalance\", \"\") +\n             \"\\nThe total amount in the wallet at least 6 blocks confirmed\\n\"\n             + HelpExampleCli(\"getbalance\", \"\\\"*\\\" 6\") +\n-            \"\\nAs a json rpc call\\n\"\n+            \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"getbalance\", \"\\\"*\\\", 6\")\n         );\n \n@@ -798,7 +798,7 @@ static UniValue sendmany(const JSONRPCRequest& request)\n             + HelpExampleCli(\"sendmany\", \"\\\"\\\" \\\"{\\\\\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\\\\\":0.01,\\\\\\\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\\\\\":0.02}\\\" 6 \\\"testing\\\"\") +\n             \"\\nSend two amounts to two different addresses, subtract fee from amount:\\n\"\n             + HelpExampleCli(\"sendmany\", \"\\\"\\\" \\\"{\\\\\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\\\\\":0.01,\\\\\\\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\\\\\":0.02}\\\" 1 \\\"\\\" \\\"[\\\\\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\\\\\",\\\\\\\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\\\\\"]\\\"\") +\n-            \"\\nAs a json rpc call\\n\"\n+            \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"sendmany\", \"\\\"\\\", {\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\":0.01,\\\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\":0.02}, 6, \\\"testing\\\"\")\n         );\n \n@@ -939,7 +939,7 @@ static UniValue addmultisigaddress(const JSONRPCRequest& request)\n             \"\\nExamples:\\n\"\n             \"\\nAdd a multisig address from 2 addresses\\n\"\n             + HelpExampleCli(\"addmultisigaddress\", \"2 \\\"[\\\\\\\"16sSauSf5pF2UkUwvKGq4qjNRzBZYqgEL5\\\\\\\",\\\\\\\"171sgjn4YtPu27adkKGrdDwzRTxnRkBfKV\\\\\\\"]\\\"\") +\n-            \"\\nAs json rpc call\\n\"\n+            \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"addmultisigaddress\", \"2, \\\"[\\\\\\\"16sSauSf5pF2UkUwvKGq4qjNRzBZYqgEL5\\\\\\\",\\\\\\\"171sgjn4YtPu27adkKGrdDwzRTxnRkBfKV\\\\\\\"]\\\"\")\n         ;\n         throw std::runtime_error(msg);\n@@ -1500,7 +1500,7 @@ UniValue listtransactions(const JSONRPCRequest& request)\n             + HelpExampleCli(\"listtransactions\", \"\") +\n             \"\\nList transactions 100 to 120\\n\"\n             + HelpExampleCli(\"listtransactions\", \"\\\"*\\\" 20 100\") +\n-            \"\\nAs a json rpc call\\n\"\n+            \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"listtransactions\", \"\\\"*\\\", 20, 100\")\n         );\n \n@@ -1960,7 +1960,7 @@ static UniValue walletpassphrase(const JSONRPCRequest& request)\n             + HelpExampleCli(\"walletpassphrase\", \"\\\"my pass phrase\\\" 60\") +\n             \"\\nLock the wallet again (before 60 seconds)\\n\"\n             + HelpExampleCli(\"walletlock\", \"\") +\n-            \"\\nAs json rpc call\\n\"\n+            \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"walletpassphrase\", \"\\\"my pass phrase\\\", 60\")\n         );\n     }\n@@ -2083,7 +2083,7 @@ static UniValue walletlock(const JSONRPCRequest& request)\n             + HelpExampleCli(\"sendtoaddress\", \"\\\"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\\\" 1.0\") +\n             \"\\nClear the passphrase since we are done before 2 minutes is up\\n\"\n             + HelpExampleCli(\"walletlock\", \"\") +\n-            \"\\nAs json rpc call\\n\"\n+            \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"walletlock\", \"\")\n         );\n     }\n@@ -2129,7 +2129,7 @@ static UniValue encryptwallet(const JSONRPCRequest& request)\n             + HelpExampleCli(\"signmessage\", \"\\\"address\\\" \\\"test message\\\"\") +\n             \"\\nNow lock the wallet again by removing the passphrase\\n\"\n             + HelpExampleCli(\"walletlock\", \"\") +\n-            \"\\nAs a json rpc call\\n\"\n+            \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"encryptwallet\", \"\\\"my pass phrase\\\"\")\n         );\n     }\n@@ -2200,7 +2200,7 @@ static UniValue lockunspent(const JSONRPCRequest& request)\n             + HelpExampleCli(\"listlockunspent\", \"\") +\n             \"\\nUnlock the transaction again\\n\"\n             + HelpExampleCli(\"lockunspent\", \"true \\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\\\\\",\\\\\\\"vout\\\\\\\":1}]\\\"\") +\n-            \"\\nAs a json rpc call\\n\"\n+            \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"lockunspent\", \"false, \\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\\\\\",\\\\\\\"vout\\\\\\\":1}]\\\"\")\n         );\n \n@@ -2314,7 +2314,7 @@ static UniValue listlockunspent(const JSONRPCRequest& request)\n             + HelpExampleCli(\"listlockunspent\", \"\") +\n             \"\\nUnlock the transaction again\\n\"\n             + HelpExampleCli(\"lockunspent\", \"true \\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\\\\\",\\\\\\\"vout\\\\\\\":1}]\\\"\") +\n-            \"\\nAs a json rpc call\\n\"\n+            \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"listlockunspent\", \"\")\n         );\n \n@@ -3536,7 +3536,7 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"address\\\" : \\\"address\\\",        (string) The bitcoin address validated\\n\"\n-            \"  \\\"scriptPubKey\\\" : \\\"hex\\\",       (string) The hex encoded scriptPubKey generated by the address\\n\"\n+            \"  \\\"scriptPubKey\\\" : \\\"hex\\\",       (string) The hex-encoded scriptPubKey generated by the address\\n\"\n             \"  \\\"ismine\\\" : true|false,        (boolean) If the address is yours or not\\n\"\n             \"  \\\"iswatchonly\\\" : true|false,   (boolean) If the address is watchonly\\n\"\n             \"  \\\"isscript\\\" : true|false,      (boolean) If the key is a script\\n\"\n@@ -3705,7 +3705,7 @@ static UniValue listlabels(const JSONRPCRequest& request)\n             + HelpExampleCli(\"listlabels\", \"receive\") +\n             \"\\nList labels that have sending addresses\\n\"\n             + HelpExampleCli(\"listlabels\", \"send\") +\n-            \"\\nAs json rpc call\\n\"\n+            \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"listlabels\", \"receive\")\n         );\n \n@@ -3959,7 +3959,7 @@ UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n                             \"      \\\"address\\\": x.xxx,    (obj, optional) A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\\n\"\n                             \"    },\\n\"\n                             \"    {\\n\"\n-                            \"      \\\"data\\\": \\\"hex\\\"        (obj, optional) A key-value pair. The key must be \\\"data\\\", the value is hex encoded data\\n\"\n+                            \"      \\\"data\\\": \\\"hex\\\"        (obj, optional) A key-value pair. The key must be \\\"data\\\", the value is hex-encoded data\\n\"\n                             \"    }\\n\"\n                             \"    ,...                     More key-value pairs of the above form. For compatibility reasons, a dictionary, which holds the key-value pairs directly, is also\\n\"\n                             \"                             accepted as second parameter.\\n\""
      }
    ]
  }
]