[
  {
    "sha": "5fb54210a68612ebcc47b2b12048d192a529d3d7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZmI1NDIxMGE2ODYxMmViY2M0N2IyYjEyMDQ4ZDE5MmE1MjlkM2Q3",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-07-06T10:16:40Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-03-26T17:18:06Z"
      },
      "message": "[wallet] Move wallet init functions into WalletInit class.",
      "tree": {
        "sha": "e4af76d10881d2b71d0ed8f4deb7d4b33fe14bcd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e4af76d10881d2b71d0ed8f4deb7d4b33fe14bcd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5fb54210a68612ebcc47b2b12048d192a529d3d7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5fb54210a68612ebcc47b2b12048d192a529d3d7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5fb54210a68612ebcc47b2b12048d192a529d3d7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5fb54210a68612ebcc47b2b12048d192a529d3d7/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ffc6e48b2983189dc0ce7de0a038e5329bc07b1b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b"
      }
    ],
    "stats": {
      "total": 87,
      "additions": 46,
      "deletions": 41
    },
    "files": [
      {
        "sha": "8397932951615f1777229f6ec407488c24140edd",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 12,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5fb54210a68612ebcc47b2b12048d192a529d3d7/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5fb54210a68612ebcc47b2b12048d192a529d3d7/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=5fb54210a68612ebcc47b2b12048d192a529d3d7",
        "patch": "@@ -190,7 +190,7 @@ void Shutdown()\n     StopRPC();\n     StopHTTPServer();\n #ifdef ENABLE_WALLET\n-    FlushWallets();\n+    WalletInit::Flush();\n #endif\n     StopMapPort();\n \n@@ -250,7 +250,7 @@ void Shutdown()\n         pblocktree.reset();\n     }\n #ifdef ENABLE_WALLET\n-    StopWallets();\n+    WalletInit::Stop();\n #endif\n \n #if ENABLE_ZMQ\n@@ -272,7 +272,7 @@ void Shutdown()\n     GetMainSignals().UnregisterBackgroundSignalScheduler();\n     GetMainSignals().UnregisterWithMempoolSignals(mempool);\n #ifdef ENABLE_WALLET\n-    CloseWallets();\n+    WalletInit::Close();\n #endif\n     globalVerifyHandle.reset();\n     ECC_Stop();\n@@ -416,7 +416,7 @@ std::string HelpMessage(HelpMessageMode mode)\n         \" \" + _(\"Whitelisted peers cannot be DoS banned and their transactions are always relayed, even if they are already in the mempool, useful e.g. for a gateway\"));\n \n #ifdef ENABLE_WALLET\n-    strUsage += GetWalletHelpString(showDebug);\n+    strUsage += WalletInit::GetHelpString(showDebug);\n #endif\n \n #if ENABLE_ZMQ\n@@ -1092,8 +1092,7 @@ bool AppInitParameterInteraction()\n     nBytesPerSigOp = gArgs.GetArg(\"-bytespersigop\", nBytesPerSigOp);\n \n #ifdef ENABLE_WALLET\n-    if (!WalletParameterInteraction())\n-        return false;\n+    if (!WalletInit::ParameterInteraction()) return false;\n #endif\n \n     fIsBareMultisigStd = gArgs.GetBoolArg(\"-permitbaremultisig\", DEFAULT_PERMIT_BAREMULTISIG);\n@@ -1258,7 +1257,7 @@ bool AppInitMain()\n      */\n     RegisterAllCoreRPCCommands(tableRPC);\n #ifdef ENABLE_WALLET\n-    RegisterWalletRPC(tableRPC);\n+    WalletInit::RegisterRPC(tableRPC);\n #endif\n \n     /* Start the RPC server already.  It will be started in \"warmup\" mode\n@@ -1277,8 +1276,7 @@ bool AppInitMain()\n \n     // ********************************************************* Step 5: verify wallet database integrity\n #ifdef ENABLE_WALLET\n-    if (!VerifyWallets())\n-        return false;\n+    if (!WalletInit::Verify()) return false;\n #endif\n     // ********************************************************* Step 6: network initialization\n     // Note that we absolutely cannot open any actual connections\n@@ -1598,8 +1596,7 @@ bool AppInitMain()\n \n     // ********************************************************* Step 8: load wallet\n #ifdef ENABLE_WALLET\n-    if (!OpenWallets())\n-        return false;\n+    if (!WalletInit::Open()) return false;\n #else\n     LogPrintf(\"No wallet support compiled in!\\n\");\n #endif\n@@ -1749,7 +1746,7 @@ bool AppInitMain()\n     uiInterface.InitMessage(_(\"Done loading\"));\n \n #ifdef ENABLE_WALLET\n-    StartWallets(scheduler);\n+    WalletInit::Start(scheduler);\n #endif\n \n     return true;"
      },
      {
        "sha": "c271774b6b577a01021ef8ea4fc184d8b285f07c",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 9,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5fb54210a68612ebcc47b2b12048d192a529d3d7/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5fb54210a68612ebcc47b2b12048d192a529d3d7/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=5fb54210a68612ebcc47b2b12048d192a529d3d7",
        "patch": "@@ -13,7 +13,7 @@\n #include <wallet/wallet.h>\n #include <wallet/walletutil.h>\n \n-std::string GetWalletHelpString(bool showDebug)\n+std::string WalletInit::GetHelpString(bool showDebug)\n {\n     std::string strUsage = HelpMessageGroup(_(\"Wallet options:\"));\n     strUsage += HelpMessageOpt(\"-addresstype\", strprintf(\"What type of addresses to use (\\\"legacy\\\", \\\"p2sh-segwit\\\", or \\\"bech32\\\", default: \\\"%s\\\")\", FormatOutputType(OUTPUT_TYPE_DEFAULT)));\n@@ -55,7 +55,7 @@ std::string GetWalletHelpString(bool showDebug)\n     return strUsage;\n }\n \n-bool WalletParameterInteraction()\n+bool WalletInit::ParameterInteraction()\n {\n     if (gArgs.GetBoolArg(\"-disablewallet\", DEFAULT_DISABLE_WALLET)) {\n         for (const std::string& wallet : gArgs.GetArgs(\"-wallet\")) {\n@@ -192,7 +192,7 @@ bool WalletParameterInteraction()\n     return true;\n }\n \n-void RegisterWalletRPC(CRPCTable &t)\n+void WalletInit::RegisterRPC(CRPCTable &t)\n {\n     if (gArgs.GetBoolArg(\"-disablewallet\", DEFAULT_DISABLE_WALLET)) {\n         return;\n@@ -201,7 +201,7 @@ void RegisterWalletRPC(CRPCTable &t)\n     RegisterWalletRPCCommands(t);\n }\n \n-bool VerifyWallets()\n+bool WalletInit::Verify()\n {\n     if (gArgs.GetBoolArg(\"-disablewallet\", DEFAULT_DISABLE_WALLET)) {\n         return true;\n@@ -272,7 +272,7 @@ bool VerifyWallets()\n     return true;\n }\n \n-bool OpenWallets()\n+bool WalletInit::Open()\n {\n     if (gArgs.GetBoolArg(\"-disablewallet\", DEFAULT_DISABLE_WALLET)) {\n         LogPrintf(\"Wallet disabled!\\n\");\n@@ -290,25 +290,29 @@ bool OpenWallets()\n     return true;\n }\n \n-void StartWallets(CScheduler& scheduler) {\n+void WalletInit::Start(CScheduler& scheduler)\n+{\n     for (CWalletRef pwallet : vpwallets) {\n         pwallet->postInitProcess(scheduler);\n     }\n }\n \n-void FlushWallets() {\n+void WalletInit::Flush()\n+{\n     for (CWalletRef pwallet : vpwallets) {\n         pwallet->Flush(false);\n     }\n }\n \n-void StopWallets() {\n+void WalletInit::Stop()\n+{\n     for (CWalletRef pwallet : vpwallets) {\n         pwallet->Flush(true);\n     }\n }\n \n-void CloseWallets() {\n+void WalletInit::Close()\n+{\n     for (CWalletRef pwallet : vpwallets) {\n         delete pwallet;\n     }"
      },
      {
        "sha": "e6c9ffb05b5d695985460af4920e0fed3a112276",
        "filename": "src/wallet/init.h",
        "status": "modified",
        "additions": 24,
        "deletions": 20,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5fb54210a68612ebcc47b2b12048d192a529d3d7/src/wallet/init.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5fb54210a68612ebcc47b2b12048d192a529d3d7/src/wallet/init.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.h?ref=5fb54210a68612ebcc47b2b12048d192a529d3d7",
        "patch": "@@ -11,33 +11,37 @@\n class CRPCTable;\n class CScheduler;\n \n-//! Return the wallets help message.\n-std::string GetWalletHelpString(bool showDebug);\n+class WalletInit {\n+public:\n \n-//! Wallets parameter interaction\n-bool WalletParameterInteraction();\n+    //! Return the wallets help message.\n+    static std::string GetHelpString(bool showDebug);\n \n-//! Register wallet RPCs.\n-void RegisterWalletRPC(CRPCTable &tableRPC);\n+    //! Wallets parameter interaction\n+    static bool ParameterInteraction();\n \n-//! Responsible for reading and validating the -wallet arguments and verifying the wallet database.\n-//  This function will perform salvage on the wallet if requested, as long as only one wallet is\n-//  being loaded (WalletParameterInteraction forbids -salvagewallet, -zapwallettxes or -upgradewallet with multiwallet).\n-bool VerifyWallets();\n+    //! Register wallet RPCs.\n+    static void RegisterRPC(CRPCTable &tableRPC);\n \n-//! Load wallet databases.\n-bool OpenWallets();\n+    //! Responsible for reading and validating the -wallet arguments and verifying the wallet database.\n+    //  This function will perform salvage on the wallet if requested, as long as only one wallet is\n+    //  being loaded (WalletParameterInteraction forbids -salvagewallet, -zapwallettxes or -upgradewallet with multiwallet).\n+    static bool Verify();\n \n-//! Complete startup of wallets.\n-void StartWallets(CScheduler& scheduler);\n+    //! Load wallet databases.\n+    static bool Open();\n \n-//! Flush all wallets in preparation for shutdown.\n-void FlushWallets();\n+    //! Complete startup of wallets.\n+    static void Start(CScheduler& scheduler);\n \n-//! Stop all wallets. Wallets will be flushed first.\n-void StopWallets();\n+    //! Flush all wallets in preparation for shutdown.\n+    static void Flush();\n \n-//! Close all wallets.\n-void CloseWallets();\n+    //! Stop all wallets. Wallets will be flushed first.\n+    static void Stop();\n+\n+    //! Close all wallets.\n+    static void Close();\n+};\n \n #endif // BITCOIN_WALLET_INIT_H"
      }
    ]
  },
  {
    "sha": "caaf9722f3200775cf37aab6b911a7054b2378e7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYWFmOTcyMmYzMjAwNzc1Y2YzN2FhYjZiOTExYTcwNTRiMjM3OGU3",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-07-06T07:50:48Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-03-26T17:23:24Z"
      },
      "message": "[wallet] Create wallet init interface.",
      "tree": {
        "sha": "b1e4690418de5ea35cf25e7e0cdfa3adec587e8a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b1e4690418de5ea35cf25e7e0cdfa3adec587e8a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/caaf9722f3200775cf37aab6b911a7054b2378e7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/caaf9722f3200775cf37aab6b911a7054b2378e7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/caaf9722f3200775cf37aab6b911a7054b2378e7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/caaf9722f3200775cf37aab6b911a7054b2378e7/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5fb54210a68612ebcc47b2b12048d192a529d3d7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5fb54210a68612ebcc47b2b12048d192a529d3d7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5fb54210a68612ebcc47b2b12048d192a529d3d7"
      }
    ],
    "stats": {
      "total": 38,
      "additions": 38,
      "deletions": 0
    },
    "files": [
      {
        "sha": "15ff4256e08ccaa0081f516d6e17c4c33fc8b5e2",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/caaf9722f3200775cf37aab6b911a7054b2378e7/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/caaf9722f3200775cf37aab6b911a7054b2378e7/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=caaf9722f3200775cf37aab6b911a7054b2378e7",
        "patch": "@@ -161,6 +161,7 @@ BITCOIN_CORE_H = \\\n   validation.h \\\n   validationinterface.h \\\n   versionbits.h \\\n+  walletinitinterface.h \\\n   wallet/coincontrol.h \\\n   wallet/crypter.h \\\n   wallet/db.h \\"
      },
      {
        "sha": "95c51a4f49f8f1381b01143be331a123eb2bd9ea",
        "filename": "src/walletinitinterface.h",
        "status": "added",
        "additions": 37,
        "deletions": 0,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/caaf9722f3200775cf37aab6b911a7054b2378e7/src/walletinitinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/caaf9722f3200775cf37aab6b911a7054b2378e7/src/walletinitinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletinitinterface.h?ref=caaf9722f3200775cf37aab6b911a7054b2378e7",
        "patch": "@@ -0,0 +1,37 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef WALLETINITINTERFACE_H\n+#define WALLETINITINTERFACE_H\n+\n+#include <string>\n+\n+class CScheduler;\n+class CRPCTable;\n+\n+class WalletInitInterface {\n+public:\n+    /** Get wallet help string */\n+    virtual std::string GetHelpString(bool showDebug) = 0;\n+    /** Check wallet parameter interaction */\n+    virtual bool ParameterInteraction() = 0;\n+    /** Register wallet RPC*/\n+    virtual void RegisterRPC(CRPCTable &) = 0;\n+    /** Verify wallets */\n+    virtual bool Verify() = 0;\n+    /** Open wallets*/\n+    virtual bool Open() = 0;\n+    /** Start wallets*/\n+    virtual void Start(CScheduler& scheduler) = 0;\n+    /** Flush Wallets*/\n+    virtual void Flush() = 0;\n+    /** Stop Wallets*/\n+    virtual void Stop() = 0;\n+    /** Close wallets */\n+    virtual void Close() = 0;\n+\n+    virtual ~WalletInitInterface() {}\n+};\n+\n+#endif // WALLETINITINTERFACE_H"
      }
    ]
  },
  {
    "sha": "49baa4a462193d8d82b51d464740aa5f1114edf1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0OWJhYTRhNDYyMTkzZDhkODJiNTFkNDY0NzQwYWE1ZjExMTRlZGYx",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-02-21T16:38:53Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-03-27T18:48:48Z"
      },
      "message": "[wallet] Use global g_wallet_init_interface to init/destroy the wallet.\n\nThis commit creates a global g_wallet_init_interface, which is created\nin bitcoind and bitcoin-qt. g_wallet_init_interface is used to init\nand destroy the wallet.\n\nThis removes the dependency from init.cpp on the wallet library.",
      "tree": {
        "sha": "eaa2de9eabbd59e6cf28360493aec5d3c4c39e84",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/eaa2de9eabbd59e6cf28360493aec5d3c4c39e84"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/49baa4a462193d8d82b51d464740aa5f1114edf1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49baa4a462193d8d82b51d464740aa5f1114edf1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/49baa4a462193d8d82b51d464740aa5f1114edf1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49baa4a462193d8d82b51d464740aa5f1114edf1/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "caaf9722f3200775cf37aab6b911a7054b2378e7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/caaf9722f3200775cf37aab6b911a7054b2378e7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/caaf9722f3200775cf37aab6b911a7054b2378e7"
      }
    ],
    "stats": {
      "total": 95,
      "additions": 53,
      "deletions": 42
    },
    "files": [
      {
        "sha": "a849683eb01dbe118d449ccbe70ded742a2dd8f8",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49baa4a462193d8d82b51d464740aa5f1114edf1/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49baa4a462193d8d82b51d464740aa5f1114edf1/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=49baa4a462193d8d82b51d464740aa5f1114edf1",
        "patch": "@@ -18,6 +18,10 @@\n #include <httpserver.h>\n #include <httprpc.h>\n #include <utilstrencodings.h>\n+#if ENABLE_WALLET\n+#include <wallet/init.h>\n+#include <walletinitinterface.h>\n+#endif\n \n #include <boost/thread.hpp>\n \n@@ -59,6 +63,10 @@ bool AppInit(int argc, char* argv[])\n {\n     bool fRet = false;\n \n+#if ENABLE_WALLET\n+    g_wallet_init_interface.reset(new WalletInit);\n+#endif\n+\n     //\n     // Parameters\n     //"
      },
      {
        "sha": "cee1eeaf17d5b4fca551bc5cfc9ccf6c36859423",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 32,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49baa4a462193d8d82b51d464740aa5f1114edf1/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49baa4a462193d8d82b51d464740aa5f1114edf1/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=49baa4a462193d8d82b51d464740aa5f1114edf1",
        "patch": "@@ -43,10 +43,8 @@\n #include <util.h>\n #include <utilmoneystr.h>\n #include <validationinterface.h>\n-#ifdef ENABLE_WALLET\n-#include <wallet/init.h>\n-#endif\n #include <warnings.h>\n+#include <walletinitinterface.h>\n #include <stdint.h>\n #include <stdio.h>\n #include <memory>\n@@ -74,6 +72,7 @@ static const bool DEFAULT_STOPAFTERBLOCKIMPORT = false;\n \n std::unique_ptr<CConnman> g_connman;\n std::unique_ptr<PeerLogicValidation> peerLogic;\n+std::unique_ptr<WalletInitInterface> g_wallet_init_interface;\n \n #if ENABLE_ZMQ\n static CZMQNotificationInterface* pzmqNotificationInterface = nullptr;\n@@ -189,9 +188,9 @@ void Shutdown()\n     StopREST();\n     StopRPC();\n     StopHTTPServer();\n-#ifdef ENABLE_WALLET\n-    WalletInit::Flush();\n-#endif\n+    if (g_wallet_init_interface) {\n+        g_wallet_init_interface->Flush();\n+    }\n     StopMapPort();\n \n     // Because these depend on each-other, we make sure that neither can be\n@@ -249,9 +248,9 @@ void Shutdown()\n         pcoinsdbview.reset();\n         pblocktree.reset();\n     }\n-#ifdef ENABLE_WALLET\n-    WalletInit::Stop();\n-#endif\n+    if (g_wallet_init_interface) {\n+        g_wallet_init_interface->Stop();\n+    }\n \n #if ENABLE_ZMQ\n     if (pzmqNotificationInterface) {\n@@ -271,9 +270,10 @@ void Shutdown()\n     UnregisterAllValidationInterfaces();\n     GetMainSignals().UnregisterBackgroundSignalScheduler();\n     GetMainSignals().UnregisterWithMempoolSignals(mempool);\n-#ifdef ENABLE_WALLET\n-    WalletInit::Close();\n-#endif\n+    if (g_wallet_init_interface) {\n+        g_wallet_init_interface->Close();\n+    }\n+    g_wallet_init_interface.reset();\n     globalVerifyHandle.reset();\n     ECC_Stop();\n     LogPrintf(\"%s: done\\n\", __func__);\n@@ -415,9 +415,9 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-whitelist=<IP address or network>\", _(\"Whitelist peers connecting from the given IP address (e.g. 1.2.3.4) or CIDR notated network (e.g. 1.2.3.0/24). Can be specified multiple times.\") +\n         \" \" + _(\"Whitelisted peers cannot be DoS banned and their transactions are always relayed, even if they are already in the mempool, useful e.g. for a gateway\"));\n \n-#ifdef ENABLE_WALLET\n-    strUsage += WalletInit::GetHelpString(showDebug);\n-#endif\n+    if (g_wallet_init_interface) {\n+        strUsage += g_wallet_init_interface->GetHelpString(showDebug);\n+    }\n \n #if ENABLE_ZMQ\n     strUsage += HelpMessageGroup(_(\"ZeroMQ notification options:\"));\n@@ -1091,9 +1091,7 @@ bool AppInitParameterInteraction()\n         return InitError(strprintf(\"acceptnonstdtxn is not currently supported for %s chain\", chainparams.NetworkIDString()));\n     nBytesPerSigOp = gArgs.GetArg(\"-bytespersigop\", nBytesPerSigOp);\n \n-#ifdef ENABLE_WALLET\n-    if (!WalletInit::ParameterInteraction()) return false;\n-#endif\n+    if (g_wallet_init_interface && !g_wallet_init_interface->ParameterInteraction()) return false;\n \n     fIsBareMultisigStd = gArgs.GetBoolArg(\"-permitbaremultisig\", DEFAULT_PERMIT_BAREMULTISIG);\n     fAcceptDatacarrier = gArgs.GetBoolArg(\"-datacarrier\", DEFAULT_ACCEPT_DATACARRIER);\n@@ -1256,9 +1254,9 @@ bool AppInitMain()\n      * available in the GUI RPC console even if external calls are disabled.\n      */\n     RegisterAllCoreRPCCommands(tableRPC);\n-#ifdef ENABLE_WALLET\n-    WalletInit::RegisterRPC(tableRPC);\n-#endif\n+    if (g_wallet_init_interface) {\n+        g_wallet_init_interface->RegisterRPC(tableRPC);\n+    }\n \n     /* Start the RPC server already.  It will be started in \"warmup\" mode\n      * and not really process calls already (but it will signify connections\n@@ -1275,9 +1273,8 @@ bool AppInitMain()\n     int64_t nStart;\n \n     // ********************************************************* Step 5: verify wallet database integrity\n-#ifdef ENABLE_WALLET\n-    if (!WalletInit::Verify()) return false;\n-#endif\n+    if (g_wallet_init_interface && !g_wallet_init_interface->Verify()) return false;\n+\n     // ********************************************************* Step 6: network initialization\n     // Note that we absolutely cannot open any actual connections\n     // until the very end (\"start node\") as the UTXO/block state\n@@ -1595,11 +1592,7 @@ bool AppInitMain()\n     fFeeEstimatesInitialized = true;\n \n     // ********************************************************* Step 8: load wallet\n-#ifdef ENABLE_WALLET\n-    if (!WalletInit::Open()) return false;\n-#else\n-    LogPrintf(\"No wallet support compiled in!\\n\");\n-#endif\n+    if (g_wallet_init_interface && !g_wallet_init_interface->Open()) return false;\n \n     // ********************************************************* Step 9: data directory maintenance\n \n@@ -1745,9 +1738,9 @@ bool AppInitMain()\n     SetRPCWarmupFinished();\n     uiInterface.InitMessage(_(\"Done loading\"));\n \n-#ifdef ENABLE_WALLET\n-    WalletInit::Start(scheduler);\n-#endif\n+    if (g_wallet_init_interface) {\n+        g_wallet_init_interface->Start(scheduler);\n+    }\n \n     return true;\n }"
      },
      {
        "sha": "11a37bef4ed2786ae52ec6b0d0b6c7364062f99e",
        "filename": "src/init.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49baa4a462193d8d82b51d464740aa5f1114edf1/src/init.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49baa4a462193d8d82b51d464740aa5f1114edf1/src/init.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.h?ref=49baa4a462193d8d82b51d464740aa5f1114edf1",
        "patch": "@@ -6,11 +6,15 @@\n #ifndef BITCOIN_INIT_H\n #define BITCOIN_INIT_H\n \n+#include <memory>\n #include <string>\n \n class CScheduler;\n class CWallet;\n \n+class WalletInitInterface;\n+extern std::unique_ptr<WalletInitInterface> g_wallet_init_interface;\n+\n namespace boost\n {\n class thread_group;"
      },
      {
        "sha": "e6a2af5f6c344a122210e96677d2028530dc7dee",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49baa4a462193d8d82b51d464740aa5f1114edf1/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49baa4a462193d8d82b51d464740aa5f1114edf1/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=49baa4a462193d8d82b51d464740aa5f1114edf1",
        "patch": "@@ -33,7 +33,9 @@\n #include <warnings.h>\n \n #ifdef ENABLE_WALLET\n+#include <wallet/init.h>\n #include <wallet/wallet.h>\n+#include <walletinitinterface.h>\n #endif\n \n #include <stdint.h>\n@@ -669,6 +671,9 @@ int main(int argc, char *argv[])\n     // Start up the payment server early, too, so impatient users that click on\n     // bitcoin: links repeatedly have their payment requests routed to this process:\n     app.createPaymentServer();\n+\n+    // Hook up the wallet init interface\n+    g_wallet_init_interface.reset(new WalletInit);\n #endif\n \n     /// 9. Main GUI initialization"
      },
      {
        "sha": "f8be90d3e31b6c1f023b5c8b2553363141c04914",
        "filename": "src/wallet/init.h",
        "status": "modified",
        "additions": 11,
        "deletions": 10,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49baa4a462193d8d82b51d464740aa5f1114edf1/src/wallet/init.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49baa4a462193d8d82b51d464740aa5f1114edf1/src/wallet/init.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.h?ref=49baa4a462193d8d82b51d464740aa5f1114edf1",
        "patch": "@@ -6,42 +6,43 @@\n #ifndef BITCOIN_WALLET_INIT_H\n #define BITCOIN_WALLET_INIT_H\n \n+#include <walletinitinterface.h>\n #include <string>\n \n class CRPCTable;\n class CScheduler;\n \n-class WalletInit {\n+class WalletInit : public WalletInitInterface {\n public:\n \n     //! Return the wallets help message.\n-    static std::string GetHelpString(bool showDebug);\n+    std::string GetHelpString(bool showDebug) override;\n \n     //! Wallets parameter interaction\n-    static bool ParameterInteraction();\n+    bool ParameterInteraction() override;\n \n     //! Register wallet RPCs.\n-    static void RegisterRPC(CRPCTable &tableRPC);\n+    void RegisterRPC(CRPCTable &tableRPC) override;\n \n     //! Responsible for reading and validating the -wallet arguments and verifying the wallet database.\n     //  This function will perform salvage on the wallet if requested, as long as only one wallet is\n     //  being loaded (WalletParameterInteraction forbids -salvagewallet, -zapwallettxes or -upgradewallet with multiwallet).\n-    static bool Verify();\n+    bool Verify() override;\n \n     //! Load wallet databases.\n-    static bool Open();\n+    bool Open() override;\n \n     //! Complete startup of wallets.\n-    static void Start(CScheduler& scheduler);\n+    void Start(CScheduler& scheduler) override;\n \n     //! Flush all wallets in preparation for shutdown.\n-    static void Flush();\n+    void Flush() override;\n \n     //! Stop all wallets. Wallets will be flushed first.\n-    static void Stop();\n+    void Stop() override;\n \n     //! Close all wallets.\n-    static void Close();\n+    void Close() override;\n };\n \n #endif // BITCOIN_WALLET_INIT_H"
      }
    ]
  },
  {
    "sha": "c7ec5243892c38f9f77781b0e24a237942e7c776",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjN2VjNTI0Mzg5MmMzOGY5Zjc3NzgxYjBlMjRhMjM3OTQyZTdjNzc2",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-03-27T19:35:54Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-03-27T19:35:54Z"
      },
      "message": "[wallet] Add dummy wallet init class",
      "tree": {
        "sha": "6f93e2bee23ecac7fc1c03d63713e1575304a02e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6f93e2bee23ecac7fc1c03d63713e1575304a02e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c7ec5243892c38f9f77781b0e24a237942e7c776",
      "comment_count": 1,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7ec5243892c38f9f77781b0e24a237942e7c776",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c7ec5243892c38f9f77781b0e24a237942e7c776",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7ec5243892c38f9f77781b0e24a237942e7c776/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "49baa4a462193d8d82b51d464740aa5f1114edf1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49baa4a462193d8d82b51d464740aa5f1114edf1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/49baa4a462193d8d82b51d464740aa5f1114edf1"
      }
    ],
    "stats": {
      "total": 52,
      "additions": 29,
      "deletions": 23
    },
    "files": [
      {
        "sha": "5eba1cbeb9faca43b571b27bda94b0456fb7a5ab",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7ec5243892c38f9f77781b0e24a237942e7c776/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7ec5243892c38f9f77781b0e24a237942e7c776/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=c7ec5243892c38f9f77781b0e24a237942e7c776",
        "patch": "@@ -20,8 +20,8 @@\n #include <utilstrencodings.h>\n #if ENABLE_WALLET\n #include <wallet/init.h>\n-#include <walletinitinterface.h>\n #endif\n+#include <walletinitinterface.h>\n \n #include <boost/thread.hpp>\n \n@@ -65,6 +65,8 @@ bool AppInit(int argc, char* argv[])\n \n #if ENABLE_WALLET\n     g_wallet_init_interface.reset(new WalletInit);\n+#else\n+    g_wallet_init_interface.reset(new DummyWalletInit);\n #endif\n \n     //"
      },
      {
        "sha": "0d83cd9035a47675ade6ac04e0ec3e6b08dbeb55",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 21,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7ec5243892c38f9f77781b0e24a237942e7c776/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7ec5243892c38f9f77781b0e24a237942e7c776/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=c7ec5243892c38f9f77781b0e24a237942e7c776",
        "patch": "@@ -188,9 +188,7 @@ void Shutdown()\n     StopREST();\n     StopRPC();\n     StopHTTPServer();\n-    if (g_wallet_init_interface) {\n-        g_wallet_init_interface->Flush();\n-    }\n+    g_wallet_init_interface->Flush();\n     StopMapPort();\n \n     // Because these depend on each-other, we make sure that neither can be\n@@ -248,9 +246,7 @@ void Shutdown()\n         pcoinsdbview.reset();\n         pblocktree.reset();\n     }\n-    if (g_wallet_init_interface) {\n-        g_wallet_init_interface->Stop();\n-    }\n+    g_wallet_init_interface->Stop();\n \n #if ENABLE_ZMQ\n     if (pzmqNotificationInterface) {\n@@ -270,9 +266,7 @@ void Shutdown()\n     UnregisterAllValidationInterfaces();\n     GetMainSignals().UnregisterBackgroundSignalScheduler();\n     GetMainSignals().UnregisterWithMempoolSignals(mempool);\n-    if (g_wallet_init_interface) {\n-        g_wallet_init_interface->Close();\n-    }\n+    g_wallet_init_interface->Close();\n     g_wallet_init_interface.reset();\n     globalVerifyHandle.reset();\n     ECC_Stop();\n@@ -415,9 +409,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-whitelist=<IP address or network>\", _(\"Whitelist peers connecting from the given IP address (e.g. 1.2.3.4) or CIDR notated network (e.g. 1.2.3.0/24). Can be specified multiple times.\") +\n         \" \" + _(\"Whitelisted peers cannot be DoS banned and their transactions are always relayed, even if they are already in the mempool, useful e.g. for a gateway\"));\n \n-    if (g_wallet_init_interface) {\n-        strUsage += g_wallet_init_interface->GetHelpString(showDebug);\n-    }\n+    strUsage += g_wallet_init_interface->GetHelpString(showDebug);\n \n #if ENABLE_ZMQ\n     strUsage += HelpMessageGroup(_(\"ZeroMQ notification options:\"));\n@@ -1091,7 +1083,7 @@ bool AppInitParameterInteraction()\n         return InitError(strprintf(\"acceptnonstdtxn is not currently supported for %s chain\", chainparams.NetworkIDString()));\n     nBytesPerSigOp = gArgs.GetArg(\"-bytespersigop\", nBytesPerSigOp);\n \n-    if (g_wallet_init_interface && !g_wallet_init_interface->ParameterInteraction()) return false;\n+    if (!g_wallet_init_interface->ParameterInteraction()) return false;\n \n     fIsBareMultisigStd = gArgs.GetBoolArg(\"-permitbaremultisig\", DEFAULT_PERMIT_BAREMULTISIG);\n     fAcceptDatacarrier = gArgs.GetBoolArg(\"-datacarrier\", DEFAULT_ACCEPT_DATACARRIER);\n@@ -1254,9 +1246,7 @@ bool AppInitMain()\n      * available in the GUI RPC console even if external calls are disabled.\n      */\n     RegisterAllCoreRPCCommands(tableRPC);\n-    if (g_wallet_init_interface) {\n-        g_wallet_init_interface->RegisterRPC(tableRPC);\n-    }\n+    g_wallet_init_interface->RegisterRPC(tableRPC);\n \n     /* Start the RPC server already.  It will be started in \"warmup\" mode\n      * and not really process calls already (but it will signify connections\n@@ -1273,7 +1263,7 @@ bool AppInitMain()\n     int64_t nStart;\n \n     // ********************************************************* Step 5: verify wallet database integrity\n-    if (g_wallet_init_interface && !g_wallet_init_interface->Verify()) return false;\n+    if (!g_wallet_init_interface->Verify()) return false;\n \n     // ********************************************************* Step 6: network initialization\n     // Note that we absolutely cannot open any actual connections\n@@ -1592,7 +1582,7 @@ bool AppInitMain()\n     fFeeEstimatesInitialized = true;\n \n     // ********************************************************* Step 8: load wallet\n-    if (g_wallet_init_interface && !g_wallet_init_interface->Open()) return false;\n+    if (!g_wallet_init_interface->Open()) return false;\n \n     // ********************************************************* Step 9: data directory maintenance\n \n@@ -1738,9 +1728,7 @@ bool AppInitMain()\n     SetRPCWarmupFinished();\n     uiInterface.InitMessage(_(\"Done loading\"));\n \n-    if (g_wallet_init_interface) {\n-        g_wallet_init_interface->Start(scheduler);\n-    }\n+    g_wallet_init_interface->Start(scheduler);\n \n     return true;\n }"
      },
      {
        "sha": "cb2e6aac950f4f172beb5d285573cc55cdadc851",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7ec5243892c38f9f77781b0e24a237942e7c776/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7ec5243892c38f9f77781b0e24a237942e7c776/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=c7ec5243892c38f9f77781b0e24a237942e7c776",
        "patch": "@@ -35,8 +35,8 @@\n #ifdef ENABLE_WALLET\n #include <wallet/init.h>\n #include <wallet/wallet.h>\n-#include <walletinitinterface.h>\n #endif\n+#include <walletinitinterface.h>\n \n #include <stdint.h>\n \n@@ -674,6 +674,8 @@ int main(int argc, char *argv[])\n \n     // Hook up the wallet init interface\n     g_wallet_init_interface.reset(new WalletInit);\n+#else\n+    g_wallet_init_interface.reset(new DummyWalletInit);\n #endif\n \n     /// 9. Main GUI initialization"
      },
      {
        "sha": "47e4e2cce1b721f40da9d527afc42c65eb8b716a",
        "filename": "src/walletinitinterface.h",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7ec5243892c38f9f77781b0e24a237942e7c776/src/walletinitinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7ec5243892c38f9f77781b0e24a237942e7c776/src/walletinitinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletinitinterface.h?ref=c7ec5243892c38f9f77781b0e24a237942e7c776",
        "patch": "@@ -34,4 +34,18 @@ class WalletInitInterface {\n     virtual ~WalletInitInterface() {}\n };\n \n+class DummyWalletInit : public WalletInitInterface {\n+public:\n+\n+    std::string GetHelpString(bool showDebug) override {return std::string{};}\n+    bool ParameterInteraction() override {return true;}\n+    void RegisterRPC(CRPCTable &) override {}\n+    bool Verify() override {return true;}\n+    bool Open() override {return true;}\n+    void Start(CScheduler& scheduler) override {}\n+    void Flush() override {}\n+    void Stop() override {}\n+    void Close() override {}\n+};\n+\n #endif // WALLETINITINTERFACE_H"
      }
    ]
  }
]