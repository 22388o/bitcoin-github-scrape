promag,2017-07-07T10:42:06Z,Will take a look.,https://github.com/bitcoin/bitcoin/pull/10762#issuecomment-313648838,313648838,
jnewbery,2017-07-07T10:44:00Z,"Thanks @promag - this is very rough-and-ready at the moment. It builds and passes tests, but is not ready for code review. I'd be very happy to get feedback about general concept though.",https://github.com/bitcoin/bitcoin/pull/10762#issuecomment-313649165,313649165,
jnewbery,2017-07-07T10:45:28Z,I see that @theuni has opened #10756 to replace CNodeSignals with an interface class. Would that be a better approach here?,https://github.com/bitcoin/bitcoin/pull/10762#issuecomment-313649403,313649403,
ryanofsky,2017-07-07T11:33:45Z,"> I see that @theuni has opened #10756 to replace CNodeSignals with an interface class. Would that be a better approach here?\n\nYeah I was just about to make this suggestion. You could delete the `WalletInitSignals` struct and replace the `WalletInitSignals` global variable with a `std::unique_ptr<WalletInitInterface>` global. This would get rid of all the boost signals code and make the contro",https://github.com/bitcoin/bitcoin/pull/10762#issuecomment-313657725,313657725,
jnewbery,2017-07-07T13:28:36Z,"> I think this PR would be less error prone and simpler to review if you just left the init code in wallet.cpp for now and moved the relevant functions to walletinit.cpp in followup MOVEONLY PR.\n\nThanks @ryanofsky, you've convinced me - I'll split this PR into two. But I think I'll do it the other way round - first move the wallet initialization/destruction functions into their own `walletinit",https://github.com/bitcoin/bitcoin/pull/10762#issuecomment-313680684,313680684,
jnewbery,2017-09-29T15:20:19Z,"Rebased on master. I haven't swapped out the boost signals for an interface class yet. Still looking for high-level feedback on this approach.\n\nThe first three commits in this PR are shared with #10740 ",https://github.com/bitcoin/bitcoin/pull/10762#issuecomment-333156081,333156081,
jonasschnelli,2017-09-30T04:30:41Z,"Concept ACK on the general direction, though unsure about the implementation (haven't checked the code in detail).\n\nI was following a similar approach in #6008 (relatively old closed PR) (check commit: https://github.com/bitcoin/bitcoin/pull/6008/commits/fa6a5b28fcaa612c6512c6028184df6b346fdad4).\n\nMaybe, init/the-core only knows about modules. Some signal/hooks would allow initialising, sh",https://github.com/bitcoin/bitcoin/pull/10762#issuecomment-333282567,333282567,
TheBlueMatt,2017-10-02T20:26:23Z,"Concept ACK, generally. Agree that I'd really prefer no boost::signals (especially in the header!).",https://github.com/bitcoin/bitcoin/pull/10762#issuecomment-333654522,333654522,
MarcoFalke,2018-01-14T02:14:35Z,Needs rebase,https://github.com/bitcoin/bitcoin/pull/10762#issuecomment-357483235,357483235,
PierreRochard,2018-02-12T20:28:30Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/10762#issuecomment-365051645,365051645,
jnewbery,2018-02-20T21:00:42Z,Rebased. Feedback not yet addressed.,https://github.com/bitcoin/bitcoin/pull/10762#issuecomment-367117599,367117599,
jnewbery,2018-02-22T21:54:52Z,I've reimplemented this as an interface class. Should be ready for review.,https://github.com/bitcoin/bitcoin/pull/10762#issuecomment-367835448,367835448,
jnewbery,2018-03-21T19:09:42Z,"Updated PR description to no longer reference boost signals.\n\nThis is ready for review. It's a fairly small changeset, and removes one of the last server->wallet dependencies.",https://github.com/bitcoin/bitcoin/pull/10762#issuecomment-375062075,375062075,
sipa,2018-03-22T21:20:00Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/10762#issuecomment-375461166,375461166,
jnewbery,2018-03-23T18:43:24Z,"> I'd rather see this be a general interface for init modules\n\nDo you think that's a hard requirement before this PR gets merged? This PR is simply changing function calls to an internal interface class, which can be updated or replaced later. It seems to me that creating a brand new general interface for modules is outside the scope of this.\n\nJust merging this PR has a real benefit now - ",https://github.com/bitcoin/bitcoin/pull/10762#issuecomment-375763473,375763473,
jnewbery,2018-03-23T19:03:29Z,"Pushed a new branch. The only changes are in the final commit, which addresses @jimpo's comments above.",https://github.com/bitcoin/bitcoin/pull/10762#issuecomment-375768611,375768611,
jimpo,2018-03-24T21:56:34Z,"@jnewbery Hmm, I see the benefit, but generally when introducing interfaces I'd rather design it well up front (as opposed to, say, leaving a hack in some implementation until it can be cleaned up later). Especially if there's another proposal for a similar, general interface in https://github.com/bitcoin/bitcoin/pull/10973, I think this could warrant some more thought. On the other hand, it might",https://github.com/bitcoin/bitcoin/pull/10762#issuecomment-375927740,375927740,
jnewbery,2018-03-26T17:26:36Z,Addressed review comments from @251Labs.,https://github.com/bitcoin/bitcoin/pull/10762#issuecomment-376245790,376245790,
l2a5b1,2018-03-27T14:04:56Z,Thanks @jnewbery! ACK caaf972.,https://github.com/bitcoin/bitcoin/pull/10762#issuecomment-376537380,376537380,
jnewbery,2018-03-27T14:36:00Z,Thanks for the review @251Labs. I've added a fixup commit to add override specifiers to the member functions in `WalletInit`. Let me know what you think. I'll squash it into the previous commit if you agree.,https://github.com/bitcoin/bitcoin/pull/10762#issuecomment-376548694,376548694,
jamesob,2018-03-27T14:50:19Z,"Tested ACK https://github.com/bitcoin/bitcoin/pull/10762/commits/b3e482c65c5c4697b38bba6006dbcdc3c1bba836\n\n- [x] Encrypt existing wallet (*Settings -> Encrypt Wallet...*)\n- [x] Change wallet passphrase (*Settings -> Change Passphrase...*)\n- [x] Tested sending a transaction to self with automatic coin selection (*Send*)\n- [x] Backup wallet & start with `-wallet=/path/to/backup` (*File -> ",https://github.com/bitcoin/bitcoin/pull/10762#issuecomment-376554013,376554013,
jimpo,2018-03-27T16:54:19Z,utACK d8a53d0eb5d168947544d2b2ce6abccef4e5950c,https://github.com/bitcoin/bitcoin/pull/10762#issuecomment-376597223,376597223,
jnewbery,2018-03-27T18:49:29Z,Squashed the fixup commit. d8a53d0 -> 49baa4a462193d8d82b51d464740aa5f1114edf1 should be identical,https://github.com/bitcoin/bitcoin/pull/10762#issuecomment-376634246,376634246,
jnewbery,2018-03-27T19:39:03Z,"Added a dummy wallet init class as requested here: https://github.com/bitcoin/bitcoin/pull/10762#discussion_r177495634\n\nI started trying to implement the suggestion of passing the wallet_init_interface into the AppInit* functions, but it ended up being a much larger change than I was expecting, since the wallet interface is called from several different functions in init.cpp, which are called ",https://github.com/bitcoin/bitcoin/pull/10762#issuecomment-376649047,376649047,
Sjors,2018-03-28T11:20:36Z,"I did some light testing in QT on macOS. I also rebased on master to see if multiwallet behaves, which it seems to.\n\nTravis failure seems to be due to #12806.",https://github.com/bitcoin/bitcoin/pull/10762#issuecomment-376851809,376851809,
TheBlueMatt,2018-03-28T15:47:07Z,utACK c7ec5243892c38f9f77781b0e24a237942e7c776,https://github.com/bitcoin/bitcoin/pull/10762#issuecomment-376935764,376935764,
PierreRochard,2018-03-28T16:12:06Z,Tested ACK c7ec5243892c38f9f77781b0e24a237942e7c776,https://github.com/bitcoin/bitcoin/pull/10762#issuecomment-376944457,376944457,
jamesob,2018-03-28T17:26:02Z,reACK https://github.com/bitcoin/bitcoin/pull/10762/commits/c7ec5243892c38f9f77781b0e24a237942e7c776,https://github.com/bitcoin/bitcoin/pull/10762#issuecomment-376968344,376968344,
ajtowns,2018-03-29T07:59:17Z,utACK c7ec5243892c38f9f77781b0e24a237942e7c776 ,https://github.com/bitcoin/bitcoin/pull/10762#issuecomment-377155137,377155137,
promag,2018-03-29T09:14:49Z,"Tested ACK c7ec524.\n\n@jnewbery please see b3bcb3f, IMO it improves the separation, hides the interface implementations `WalletInitInterface` and `DummyWalletInit` and statically initializes `g_wallet_init_interface`.",https://github.com/bitcoin/bitcoin/pull/10762#issuecomment-377174547,377174547,
jnewbery,2018-03-29T14:19:24Z,@promag thanks for the review. Can we leave your suggestion for a follow-up PR in order not to invalidate the ACKs?,https://github.com/bitcoin/bitcoin/pull/10762#issuecomment-377250288,377250288,
laanwj,2018-03-29T14:53:41Z,This is nice. utACK c7ec5243892c38f9f77781b0e24a237942e7c776,https://github.com/bitcoin/bitcoin/pull/10762#issuecomment-377261430,377261430,
ryanofsky,2018-02-22T22:01:41Z,"In commit ""[wallet] Move wallet init functions into WalletInit class.""\n\nIs adding this line here intentional? It doesn't seem to fit in with other changes in this commit, and seems unnecessary. Should add a comment describing rationale if it is useful to keep.",https://github.com/bitcoin/bitcoin/pull/10762#discussion_r170107425,170107425,src/wallet/init.cpp
ryanofsky,2018-02-22T22:12:20Z,"In commit ""[wallet] Create wallet init interface.""\n\nJust FYI, this PR is very similar to 6626e2fe114ce2aa861be1eeda84f0c9faa60527 from #10973 and the `WalletInitInterface` added here is basically identical to the `Chain::Client` interface added there:\n\nhttps://github.com/bitcoin/bitcoin/blob/6626e2fe114ce2aa861be1eeda84f0c9faa60527/src/interface/chain.h#L18-L40\n\nProbably would replace ",https://github.com/bitcoin/bitcoin/pull/10762#discussion_r170110016,170110016,src/walletinitinterface.h
ryanofsky,2018-02-22T22:21:10Z,"In commit ""[wallet] Use global g_wallet_init_interface to init/destroy the wallet.""\n\nThis change would make a little more sense in the previous commit adding the file.\n\n",https://github.com/bitcoin/bitcoin/pull/10762#discussion_r170112063,170112063,src/walletinitinterface.h
MarcoFalke,2018-02-22T22:31:07Z,"style-nit: Instead of casting a literal, you could directly return an empty `std::string{};`",https://github.com/bitcoin/bitcoin/pull/10762#discussion_r170114393,170114393,src/walletinitinterface.h
jnewbery,2018-02-23T19:07:20Z,"Yes, removed. This is a vestige of a previous branch.",https://github.com/bitcoin/bitcoin/pull/10762#discussion_r170338729,170338729,src/wallet/init.cpp
jnewbery,2018-02-23T19:08:37Z,Thanks for the heads up!,https://github.com/bitcoin/bitcoin/pull/10762#discussion_r170339132,170339132,src/walletinitinterface.h
jnewbery,2018-02-23T19:11:58Z,Agree. Fixed,https://github.com/bitcoin/bitcoin/pull/10762#discussion_r170340241,170340241,src/walletinitinterface.h
jnewbery,2018-02-23T19:23:44Z,better. Thanks!,https://github.com/bitcoin/bitcoin/pull/10762#discussion_r170343487,170343487,src/walletinitinterface.h
jimpo,2018-03-22T21:14:01Z,This should be `strUsage += ...` I believe.,https://github.com/bitcoin/bitcoin/pull/10762#discussion_r176574235,176574235,src/init.cpp
jimpo,2018-03-22T21:23:26Z,"Every method name in this interface has ""Wallet"" or ""Wallets"" in it, which is rather redundant given that this is a **Wallet**InitInterface. I'd say drop them all, so ""GetWalletHelpString"" => ""GetHelpString"", ""WalletParameterInteraction"" => ""CheckParameterInteraction"", ""RegisterWalletRPC"" => ""RegisterRPC"".\n\nThat alone would go a long way towards making this a generalized init module interface.",https://github.com/bitcoin/bitcoin/pull/10762#discussion_r176576554,176576554,src/walletinitinterface.h
jnewbery,2018-03-23T19:01:47Z,You're right. Fixed,https://github.com/bitcoin/bitcoin/pull/10762#discussion_r176836316,176836316,src/init.cpp
jnewbery,2018-03-23T19:02:44Z,"I've updated the function names, since as you point out, ""Wallet"" is redundant.\n\nSee my comment below about a generalized module init interface.",https://github.com/bitcoin/bitcoin/pull/10762#discussion_r176836559,176836559,src/walletinitinterface.h
l2a5b1,2018-03-23T21:11:37Z,"If `WalletInitInterface` is an interface class, maybe we can have an interface without method definitions. Have you considered an interface with pure virtual functions?\n\n```c++\n    /** Get wallet help string */\n    virtual std::string GetWalletHelpString(bool showDebug) = 0;\n    /** Check wallet parameter interaction */\n    virtual bool WalletParameterInteraction() = 0;\n    /** Regis",https://github.com/bitcoin/bitcoin/pull/10762#discussion_r176864483,176864483,src/walletinitinterface.h
l2a5b1,2018-03-23T21:18:39Z,"Implement a virtual destructor to protect against undefined behavior in the event that an instance of a derived `WalletInitInterface` instance is destroyed through a pointer to this interface.\n```c++\nvirtual ~WalletInitInterface() {}\n```",https://github.com/bitcoin/bitcoin/pull/10762#discussion_r176866023,176866023,src/walletinitinterface.h
jnewbery,2018-03-26T17:26:15Z,Thanks! Done.,https://github.com/bitcoin/bitcoin/pull/10762#discussion_r177171659,177171659,src/walletinitinterface.h
jnewbery,2018-03-26T17:26:19Z,Added,https://github.com/bitcoin/bitcoin/pull/10762#discussion_r177171682,177171682,src/walletinitinterface.h
TheBlueMatt,2018-03-27T16:49:33Z,"Hmm, can we avoid yet more globals and just pass the wallet_init_interface in to the AppInit* functions?",https://github.com/bitcoin/bitcoin/pull/10762#discussion_r177495634,177495634,src/init.h
TheBlueMatt,2018-03-27T16:50:06Z,Can we just make this always non-nullptr and call it directly? The mess of if (g_...) g_...->DoThing() in init.cpp is starting to get very repetitive.,https://github.com/bitcoin/bitcoin/pull/10762#discussion_r177495787,177495787,src/init.cpp
ryanofsky,2018-03-27T17:11:48Z,"FWIW, in my followup, there can be multiple clients, so the if statements turn into for loops. Would be fine to change this, but it's unclear what the benefits would be.",https://github.com/bitcoin/bitcoin/pull/10762#discussion_r177502407,177502407,src/init.cpp
PierreRochard,2018-03-28T15:32:42Z,Should this logging be added to the DummyWalletInit Open function? ,https://github.com/bitcoin/bitcoin/pull/10762#discussion_r177792535,177792535,src/init.cpp
jnewbery,2018-03-28T16:01:04Z,Good idea. This PR seems to have enough ACKs for merging. Let's save this for a follow-up PR?,https://github.com/bitcoin/bitcoin/pull/10762#discussion_r177801709,177801709,src/init.cpp
MarcoFalke,2018-03-29T15:09:05Z,^ This is now up for grabs,https://github.com/bitcoin/bitcoin/pull/10762#discussion_r178087518,178087518,src/init.cpp
moneyball,2018-03-29T21:12:55Z,I'll take a stab as my first PR,https://github.com/bitcoin/bitcoin/pull/10762#discussion_r178182938,178182938,src/init.cpp
