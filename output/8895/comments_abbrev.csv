fanquake,2016-10-09T10:40:35Z,"Compiling on OS X, with Xcode 8\n\n```\n  CXX      test/test_test_bitcoin-cuckoocache_tests.o\nIn file included from test/cuckoocache_tests.cpp:4:\nIn file included from /usr/local/include/boost/test/unit_test.hpp:18:\nIn file included from /usr/local/include/boost/test/test_tools.hpp:46:\nIn file included from /usr/local/include/boost/test/tools/old/impl.hpp:19:\nIn file included from /usr/local/",https://github.com/bitcoin/bitcoin/pull/8895#issuecomment-252478919,252478919,
JeremyRubin,2016-10-09T13:52:26Z,"@fanquake should be fixed, <cmath> wasn't included for some reason.\n",https://github.com/bitcoin/bitcoin/pull/8895#issuecomment-252487581,252487581,
theuni,2016-10-10T17:17:44Z,"Concept ACK and code review ACK.\n\nI still need to read up on the security/performance guarantees to understand better, but the implementation looks sane.\n",https://github.com/bitcoin/bitcoin/pull/8895#issuecomment-252683343,252683343,
TheBlueMatt,2016-10-16T14:38:01Z,"Concept ACK, if nothing else the increase in entries-per-byte should be a big win for memory usage.\n",https://github.com/bitcoin/bitcoin/pull/8895#issuecomment-254050628,254050628,
JeremyRubin,2016-10-20T21:56:39Z,"I just pushed up 4 commits which further improve the cuckoo cache. These commits add epochs/generations for the cache entries which improves the hit rate. Below is a brief description of the changes, for more detail, see the code & code documentation.\n\nThe first 2 commits are changes to the tests. The first commit simplifies what is checked in the existing tests (it was over specific to that Cac",https://github.com/bitcoin/bitcoin/pull/8895#issuecomment-255239670,255239670,
JeremyRubin,2016-10-21T18:56:05Z,"I've squashed all the commits (unsquashed still available here if you've already looked at this. https://github.com/bitcoin/bitcoin/compare/master...JeremyRubin:cuckoocache-pull-request-not-squashed). I've also edited the PR message.\n\nThe current Travis failed build seems to be related to the ongoing Dyn DDoS attack, as Travis is telling me variants of \n`The repository at JeremyRubin/bitcoin wa",https://github.com/bitcoin/bitcoin/pull/8895#issuecomment-255441541,255441541,
morcos,2016-10-28T14:13:59Z,Tested ACK either 3ba2bf4ecca453e926754db35fb6ca3b8141c4e7 or 121dfcd798bda9998dda13fa304be2d0afb7ec82 \n\nI gave some nits about the comments offline.\nI am ambivalent about the change to eliminate modulo. \n\nI have extensively tested the performance of this patch.  Lock contention on the sig cache is a serious bottleneck to ConnectBlock performance with 8 or more cores.  This patch appears to a,https://github.com/bitcoin/bitcoin/pull/8895#issuecomment-256931331,256931331,
morcos,2016-11-01T14:40:19Z,ACK 453aef4\n,https://github.com/bitcoin/bitcoin/pull/8895#issuecomment-257583560,257583560,
fanquake,2016-11-09T14:55:05Z,"Testing this (OSX 10.12, XCode 8.1):\nCompiling threw 1 new warning:\n\n```\nIn file included from script/sigcache.cpp:14:\n./cuckoocache.h:220:17: warning: suggest braces around initialization of subobject [-Wmissing-braces]\n        return {hash_function.template operator()<0>(e) & hash_mask,\n                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n./cuckoocache.h:438:40: note: in ",https://github.com/bitcoin/bitcoin/pull/8895#issuecomment-259433117,259433117,
JeremyRubin,2016-11-09T21:18:19Z,"@fanquake I think I can fix the warnings but I'm curious as to how much that's a goal given that that flag should be deprecated & there are lots of build errors. Happy to push a squashme if you think so.\n\nThe build errors should be fixable, must be a different include order or something, I need to add a `#include<array>`.\n",https://github.com/bitcoin/bitcoin/pull/8895#issuecomment-259529310,259529310,
fanquake,2016-11-09T23:19:56Z,"@JeremyRubin The warning isn't so much of an issue, was just making a note of it.\n",https://github.com/bitcoin/bitcoin/pull/8895#issuecomment-259555316,259555316,
JeremyRubin,2016-11-10T02:39:48Z,@fanquake please confirm fix when you have a moment.\n,https://github.com/bitcoin/bitcoin/pull/8895#issuecomment-259587267,259587267,
fanquake,2016-11-10T02:48:06Z,"@JeremyRubin Everything compiling file now. \n\nCan you suggest tests/benchmarks that reviewers can run to test the performance increase here, or is that going to be hard for anyone without a-lot of cores?\n",https://github.com/bitcoin/bitcoin/pull/8895#issuecomment-259588355,259588355,
JeremyRubin,2016-11-17T20:10:24Z,"@fanquake yeah it'll be tough, there's not much speed improvement from losing the erase locks until ~8 cores. What you could test is better memory efficiency by allocating smaller caches (2 4 8 16...) and comparing performance to a node running with that size and the old cache. I'd recommend running one node and peering your test nodes exclusively thought that to ensure nodes are getting the same ",https://github.com/bitcoin/bitcoin/pull/8895#issuecomment-261355688,261355688,
sipa,2016-11-30T21:06:18Z,@JeremyRubin Care to have a look at @TheBlueMatt's comments above?,https://github.com/bitcoin/bitcoin/pull/8895#issuecomment-263995253,263995253,
JeremyRubin,2016-11-30T23:41:55Z,Should be all addressed.,https://github.com/bitcoin/bitcoin/pull/8895#issuecomment-264032672,264032672,
TheBlueMatt,2016-12-01T02:27:44Z,LGTM at 88b58d3c8d840924c8cfb556db994f71dfe6ad13,https://github.com/bitcoin/bitcoin/pull/8895#issuecomment-264061238,264061238,
morcos,2016-12-05T17:09:41Z,reACK 			88b58d3,https://github.com/bitcoin/bitcoin/pull/8895#issuecomment-264913529,264913529,
JeremyRubin,2016-12-12T21:17:24Z,"@sdaftuar, https://github.com/bitcoin/bitcoin/pull/8895/commits/d4294ad41044eb9447de884736e8d45d8387b04f should fix your documentation concerns.\n\nRE: sigcache unit tests, I could whip something up, but I think it's a little bit hard to test meaningfully (i.e., beyond what other tests using the `CachingTransactionSignatureChecker` already cover) without opening up the anonymous namespace in `sc",https://github.com/bitcoin/bitcoin/pull/8895#issuecomment-266555389,266555389,
sdaftuar,2016-12-13T21:07:29Z,"Tested ACK 88b58d3, and the comments in d4294ad look good too, thanks.\n\nRe: sigcache tests, I don't know the best way to address.  If I could come up with a test suite that exercised the logic sufficiently to make changes like this safer, then I'd happily suggest that, but it seems like a hard problem.  Still, after reviewing I'm comfortable enough with this PR to proceed without additional si",https://github.com/bitcoin/bitcoin/pull/8895#issuecomment-266862211,266862211,
sipa,2016-12-14T06:44:05Z,utACK. Please squash? :),https://github.com/bitcoin/bitcoin/pull/8895#issuecomment-266956223,266956223,
JeremyRubin,2016-12-14T21:07:15Z,"@sipa Squashed down to just cache and testing commits.\n\nunsquashed version preserved at https://github.com/JeremyRubin/bitcoin/tree/cuckoocache-pull-request-unsquashed ",https://github.com/bitcoin/bitcoin/pull/8895#issuecomment-267156841,267156841,
sipa,2016-10-22T01:22:50Z,"Instead of size, store the log2 of the size, and use a bitshift or mask here. Modulus operations are very slow.\n",https://github.com/bitcoin/bitcoin/pull/8895#discussion_r84566874,84566874,src/cuckoocache.h
JeremyRubin,2016-10-22T17:12:03Z,"Yes, this is a rather slow operation, but I don't quite fully understand your operation... doesn't that only work if you're at power of two size?\n",https://github.com/bitcoin/bitcoin/pull/8895#discussion_r84581083,84581083,src/cuckoocache.h
sipa,2016-10-22T17:15:12Z,Yes.\n,https://github.com/bitcoin/bitcoin/pull/8895#discussion_r84581146,84581146,src/cuckoocache.h
JeremyRubin,2016-10-22T17:28:25Z,"Unfortunately the size currently isn't restricted to be a power of two, and by default is not a power of two. Are you suggesting we limit it to be a power of two?\n",https://github.com/bitcoin/bitcoin/pull/8895#discussion_r84581354,84581354,src/cuckoocache.h
sipa,2016-10-22T17:31:08Z,"Yes :) Sorry if that wasn't obvious. We could benchmark whether it matters compared to other operations of course, but restricting to a power of two means you at most get something that's a factor sqrt(2) off of your desired size, which seems acceptable for a cache.\n",https://github.com/bitcoin/bitcoin/pull/8895#discussion_r84581401,84581401,src/cuckoocache.h
JeremyRubin,2016-10-22T17:57:51Z,"Apologies, long rambly response below:\n\nOverall, I think it's a reasonable idea to do this. Modulo is slow. It's not the bottleneck, but it's a low cost way to make this code faster.\n\nThere are a couple of weird things though. You have currently about 2 bits of bookkeeping overhead per entry (one bit for erasure, one bit for epoch). If you're restricting to a power of two size for the main cac",https://github.com/bitcoin/bitcoin/pull/8895#discussion_r84581867,84581867,src/cuckoocache.h
TheBlueMatt,2016-11-07T21:53:25Z,"Nit: You have some trailing whitespace on 3 lines in this file, including this one.\n",https://github.com/bitcoin/bitcoin/pull/8895#discussion_r86878082,86878082,src/cuckoocache.h
TheBlueMatt,2016-11-07T21:55:26Z,"Why not use release/acquire - its identical instructions on x86 and wont require a full flush anywhere else to be correct (indeed, relaxed is maybe better the way its implemented now, but if we want the read/write locks in the sigcache to be more effecient we might not want to have a full flush there).\n",https://github.com/bitcoin/bitcoin/pull/8895#discussion_r86878499,86878499,src/cuckoocache.h
TheBlueMatt,2016-11-08T20:03:22Z,"It seems to be a strange api to require that a copy be made as the parameter in the function, and then rely on std::move to make insertion effecient (which we cant do for uint256, since it doesnt have any non-POD memory). Seems just as good (and much more common) to pass in a const-reference and then just let operator=() handle the copy.\n",https://github.com/bitcoin/bitcoin/pull/8895#discussion_r87071931,87071931,src/cuckoocache.h
sipa,2016-11-15T20:49:36Z,Where does the requirement for POD come from?\n,https://github.com/bitcoin/bitcoin/pull/8895#discussion_r88109729,88109729,src/cuckoocache.h
sipa,2016-11-15T22:24:38Z,Any reason why these locks aren't integrated into the cache class? It isn't obvious to be how to correctly synchronize the erase method with the rest.\n,https://github.com/bitcoin/bitcoin/pull/8895#discussion_r88128072,88128072,src/cuckoocache.h
JeremyRubin,2016-11-16T05:11:24Z,"Yes there is a reason.\n\nThe locks aren't actually needed at all how the cache is currently used. All that needs to happen is per thread: at the beginning of a block processing, a memory acquire; at the end of block processing a memory release. Additionally, one more lock must be acquired before block processing by the master to ensure that there are no concurrent writers (from addtomempool) and ",https://github.com/bitcoin/bitcoin/pull/8895#discussion_r88169538,88169538,src/cuckoocache.h
JeremyRubin,2016-11-16T05:15:35Z,I suppose the way it is currently written (using swap and move) it should be safe to remove both requirements (POD and 32-alignable). \n\nPrior versions of the code I think were unsafe for that use case.\n,https://github.com/bitcoin/bitcoin/pull/8895#discussion_r88169799,88169799,src/cuckoocache.h
JeremyRubin,2016-11-16T05:16:43Z,(I can do a squashme with just that unless you have other small feedbacks)\n,https://github.com/bitcoin/bitcoin/pull/8895#discussion_r88169876,88169876,src/cuckoocache.h
TheBlueMatt,2016-11-18T07:03:44Z,The std::min should be a NOP. we're in an else(epoch_size > epoch_unused_count).\n,https://github.com/bitcoin/bitcoin/pull/8895#discussion_r88608234,88608234,src/cuckoocache.h
TheBlueMatt,2016-11-18T07:18:25Z,"nit: technically it can hold up to (~(uint32_t) 1) - 1, because invalid() uses ~(uint32_t) 1, though I think you meant to use 0.\n",https://github.com/bitcoin/bitcoin/pull/8895#discussion_r88609415,88609415,src/cuckoocache.h
TheBlueMatt,2016-11-18T07:19:21Z,rehash has been removed in this version of the patch (and you might only list public methods? up to you).\n,https://github.com/bitcoin/bitcoin/pull/8895#discussion_r88609480,88609480,src/cuckoocache.h
TheBlueMatt,2016-11-18T07:20:20Z,I believe this also refers to an old/different version of this patch.\n,https://github.com/bitcoin/bitcoin/pull/8895#discussion_r88609545,88609545,src/cuckoocache.h
TheBlueMatt,2016-11-18T07:21:01Z,Also now out-of-date: you're using 8 hashes.\n,https://github.com/bitcoin/bitcoin/pull/8895#discussion_r88609605,88609605,src/cuckoocache.h
TheBlueMatt,2016-11-18T07:21:47Z,s/incremented/decremented/\n,https://github.com/bitcoin/bitcoin/pull/8895#discussion_r88609668,88609668,src/cuckoocache.h
TheBlueMatt,2016-11-18T07:25:36Z,"nit: technically this is an off-by-one: because you check this prior to actually doing the insert you'll always do an ""expensive"" scan twice for the first (and all) epochs. Practically, you might just want to set epoch_heuristic_count to something like epoch_size + 10 by default, though I suppose it doesnt matter all that much.\n",https://github.com/bitcoin/bitcoin/pull/8895#discussion_r88609959,88609959,src/cuckoocache.h
TheBlueMatt,2016-11-18T07:26:36Z,s/two/eight/\n,https://github.com/bitcoin/bitcoin/pull/8895#discussion_r88610039,88610039,src/cuckoocache.h
JeremyRubin,2016-11-30T23:05:43Z,"You're right it's the same on x86, but it isn't for ARM. We want the operation to be relaxed, so release or acquire are over constrained.\n\nIf later changes want to change the memory model, they should do so then. It's hard to say if a full flush is better or worse than lots of release/acquires; that would require benchmarking.\n\natomic instruction mappings: https://www.cl.cam.ac.uk/~pes20/c",https://github.com/bitcoin/bitcoin/pull/8895#discussion_r90349719,90349719,src/cuckoocache.h
JeremyRubin,2016-11-30T23:07:36Z,"I thought there was a reason I used `~(uint32_t) 1` rather than `~(uint32_t) 0`, but for the life of me can't recall it. Will change it to be that, but would appreciate you to review that there was no reason.",https://github.com/bitcoin/bitcoin/pull/8895#discussion_r90350020,90350020,src/cuckoocache.h
JeremyRubin,2016-11-30T23:08:17Z,👍 ,https://github.com/bitcoin/bitcoin/pull/8895#discussion_r90350121,90350121,src/cuckoocache.h
JeremyRubin,2016-11-30T23:08:35Z,"👍\n",https://github.com/bitcoin/bitcoin/pull/8895#discussion_r90350176,90350176,src/cuckoocache.h
JeremyRubin,2016-11-30T23:08:43Z,👍 ,https://github.com/bitcoin/bitcoin/pull/8895#discussion_r90350192,90350192,src/cuckoocache.h
JeremyRubin,2016-11-30T23:08:54Z,👍 ,https://github.com/bitcoin/bitcoin/pull/8895#discussion_r90350215,90350215,src/cuckoocache.h
JeremyRubin,2016-11-30T23:19:06Z,I think it's correct? I'll try to clarify.,https://github.com/bitcoin/bitcoin/pull/8895#discussion_r90351639,90351639,src/cuckoocache.h
JeremyRubin,2016-11-30T23:21:55Z,👍 ,https://github.com/bitcoin/bitcoin/pull/8895#discussion_r90352042,90352042,src/cuckoocache.h
JeremyRubin,2016-11-30T23:28:35Z,"👍 -- I fixed it, I think, by decrementing inside the if block. (didn't want to do postfix to stop the counter from underflowing)",https://github.com/bitcoin/bitcoin/pull/8895#discussion_r90353115,90353115,src/cuckoocache.h
JeremyRubin,2016-11-30T23:34:46Z,👍 ,https://github.com/bitcoin/bitcoin/pull/8895#discussion_r90353967,90353967,src/cuckoocache.h
JeremyRubin,2016-11-30T23:36:00Z,We also do a std::swap on e so that's why we have a mutable copy.,https://github.com/bitcoin/bitcoin/pull/8895#discussion_r90354121,90354121,src/cuckoocache.h
TheBlueMatt,2016-12-01T02:23:05Z,"std::swap is just as slow for uint256, though. Since there is no dynamically-allocated memory we cant speed it up, really.",https://github.com/bitcoin/bitcoin/pull/8895#discussion_r90372345,90372345,src/cuckoocache.h
TheBlueMatt,2016-12-01T02:26:17Z,"Oh, indeed, I believe I was mistaken.",https://github.com/bitcoin/bitcoin/pull/8895#discussion_r90372617,90372617,src/cuckoocache.h
sdaftuar,2016-12-07T20:08:03Z,"I think this comment needs to be updated now that we have more than 2 hashes, right?  If I understand right, the algorithm now is:\n```\nSwap with the element one past the last one looked at.  Example:\n\n1) On first iter, always false so defaults to locs[0].\n2) Second iter, last_loc == locs[k] for some k, so will go to locs[k+1] (wrapping back to 0 if necessary).\n```",https://github.com/bitcoin/bitcoin/pull/8895#discussion_r91376264,91376264,src/cuckoocache.h
sdaftuar,2016-12-07T20:12:49Z,nit: random newline,https://github.com/bitcoin/bitcoin/pull/8895#discussion_r91377235,91377235,src/cuckoocache.h
sdaftuar,2016-12-07T20:16:29Z,"nit: ""matter"" -> ""matters""",https://github.com/bitcoin/bitcoin/pull/8895#discussion_r91377959,91377959,src/script/sigcache.cpp
sdaftuar,2016-12-07T20:39:04Z,"nit: Can you clarify this comment -- what is the atomic operation you're referring to?\n\nAlso, it seems like this comment is here to explain why you moved the code from its old place to the new place (which is helpful for me to understand!), but it's perhaps not very helpful here in its current form to future code readers who haven't seen the previous implementation.",https://github.com/bitcoin/bitcoin/pull/8895#discussion_r91382104,91382104,src/script/sigcache.cpp
JeremyRubin,2016-12-07T23:32:32Z,"I believe that a function local static initialized uses an atomic (perhaps even a locking!) operation under the hood for the case where concurrent callers enter the function initially (C++11 guarantees this to be safe).\n\nI also believe that this is not the case for a global static (initialized before concurrency is allowed).\n\nI'm not 100% certain the spec forces conformity on this point, b",https://github.com/bitcoin/bitcoin/pull/8895#discussion_r91412485,91412485,src/script/sigcache.cpp
