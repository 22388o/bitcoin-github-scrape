[
  {
    "sha": "0a8aa626dd69a357e1b798b07b64cf4177a464a3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYThhYTYyNmRkNjlhMzU3ZTFiNzk4YjA3YjY0Y2Y0MTc3YTQ2NGEz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2020-06-24T15:26:47Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2020-08-06T17:41:43Z"
      },
      "message": "refactor: Make HexStr take a span\n\nMake HexStr take a span of bytes, instead of an awkward pair of\ntemplated iterators.",
      "tree": {
        "sha": "44736ce734e8b6b2259becff3962ee3290f7969d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/44736ce734e8b6b2259becff3962ee3290f7969d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0a8aa626dd69a357e1b798b07b64cf4177a464a3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a8aa626dd69a357e1b798b07b64cf4177a464a3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0a8aa626dd69a357e1b798b07b64cf4177a464a3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a8aa626dd69a357e1b798b07b64cf4177a464a3/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "34eb2362581d4d8f0bfd3baa12ba750afaf85c62",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34eb2362581d4d8f0bfd3baa12ba750afaf85c62",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/34eb2362581d4d8f0bfd3baa12ba750afaf85c62"
      }
    ],
    "stats": {
      "total": 120,
      "additions": 50,
      "deletions": 70
    },
    "files": [
      {
        "sha": "f9d918cb6d798a78bc6cadb8b898067ab2669e45",
        "filename": "src/core_write.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a8aa626dd69a357e1b798b07b64cf4177a464a3/src/core_write.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a8aa626dd69a357e1b798b07b64cf4177a464a3/src/core_write.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_write.cpp?ref=0a8aa626dd69a357e1b798b07b64cf4177a464a3",
        "patch": "@@ -48,13 +48,14 @@ std::string FormatScript(const CScript& script)\n                 }\n             }\n             if (vch.size() > 0) {\n-                ret += strprintf(\"0x%x 0x%x \", HexStr(it2, it - vch.size()), HexStr(it - vch.size(), it));\n+                ret += strprintf(\"0x%x 0x%x \", HexStr(std::vector<uint8_t>(it2, it - vch.size())),\n+                                               HexStr(std::vector<uint8_t>(it - vch.size(), it)));\n             } else {\n-                ret += strprintf(\"0x%x \", HexStr(it2, it));\n+                ret += strprintf(\"0x%x \", HexStr(std::vector<uint8_t>(it2, it)));\n             }\n             continue;\n         }\n-        ret += strprintf(\"0x%x \", HexStr(it2, script.end()));\n+        ret += strprintf(\"0x%x \", HexStr(std::vector<uint8_t>(it2, script.end())));\n         break;\n     }\n     return ret.substr(0, ret.size() - 1);"
      },
      {
        "sha": "25fa4709b001c462377375253e7a2ea8b13e01eb",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a8aa626dd69a357e1b798b07b64cf4177a464a3/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a8aa626dd69a357e1b798b07b64cf4177a464a3/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=0a8aa626dd69a357e1b798b07b64cf4177a464a3",
        "patch": "@@ -722,8 +722,8 @@ CNetMessage V1TransportDeserializer::GetMessage(const CMessageHeader::MessageSta\n     if (!msg.m_valid_checksum) {\n         LogPrint(BCLog::NET, \"CHECKSUM ERROR (%s, %u bytes), expected %s was %s\\n\",\n                  SanitizeString(msg.m_command), msg.m_message_size,\n-                 HexStr(hash.begin(), hash.begin()+CMessageHeader::CHECKSUM_SIZE),\n-                 HexStr(hdr.pchChecksum, hdr.pchChecksum+CMessageHeader::CHECKSUM_SIZE));\n+                 HexStr(Span<uint8_t>(hash.begin(), hash.begin() + CMessageHeader::CHECKSUM_SIZE)),\n+                 HexStr(hdr.pchChecksum));\n     }\n \n     // store receive time"
      },
      {
        "sha": "9b6ef15785b47e4d06adebe841eccdc490b45613",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a8aa626dd69a357e1b798b07b64cf4177a464a3/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a8aa626dd69a357e1b798b07b64cf4177a464a3/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=0a8aa626dd69a357e1b798b07b64cf4177a464a3",
        "patch": "@@ -1348,7 +1348,7 @@ UniValue finalizepsbt(const JSONRPCRequest& request)\n \n     if (complete && extract) {\n         ssTx << mtx;\n-        result_str = HexStr(ssTx.str());\n+        result_str = HexStr(ssTx);\n         result.pushKV(\"hex\", result_str);\n     } else {\n         ssTx << psbtx;"
      },
      {
        "sha": "d9ad70fa3794098bcd56740560fd2b303f50cce2",
        "filename": "src/rpc/request.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a8aa626dd69a357e1b798b07b64cf4177a464a3/src/rpc/request.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a8aa626dd69a357e1b798b07b64cf4177a464a3/src/rpc/request.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/request.cpp?ref=0a8aa626dd69a357e1b798b07b64cf4177a464a3",
        "patch": "@@ -78,7 +78,7 @@ bool GenerateAuthCookie(std::string *cookie_out)\n     const size_t COOKIE_SIZE = 32;\n     unsigned char rand_pwd[COOKIE_SIZE];\n     GetRandBytes(rand_pwd, COOKIE_SIZE);\n-    std::string cookie = COOKIEAUTH_USER + \":\" + HexStr(rand_pwd, rand_pwd+COOKIE_SIZE);\n+    std::string cookie = COOKIEAUTH_USER + \":\" + HexStr(rand_pwd);\n \n     /** the umask determines what permissions are used to create this file -\n      * these are set to 077 in init.cpp unless overridden with -sysperms."
      },
      {
        "sha": "073a7688a99c6e604d1d6fd34c2bb0323906114c",
        "filename": "src/rpc/util.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a8aa626dd69a357e1b798b07b64cf4177a464a3/src/rpc/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a8aa626dd69a357e1b798b07b64cf4177a464a3/src/rpc/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.cpp?ref=0a8aa626dd69a357e1b798b07b64cf4177a464a3",
        "patch": "@@ -260,7 +260,7 @@ class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n         UniValue obj(UniValue::VOBJ);\n         obj.pushKV(\"iswitness\", true);\n         obj.pushKV(\"witness_version\", (int)id.version);\n-        obj.pushKV(\"witness_program\", HexStr(id.program, id.program + id.length));\n+        obj.pushKV(\"witness_program\", HexStr(Span<const unsigned char>(id.program, id.length)));\n         return obj;\n     }\n };"
      },
      {
        "sha": "6c0a98cca2903183cdd1238dce2e60dd4896adec",
        "filename": "src/script/descriptor.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a8aa626dd69a357e1b798b07b64cf4177a464a3/src/script/descriptor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a8aa626dd69a357e1b798b07b64cf4177a464a3/src/script/descriptor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.cpp?ref=0a8aa626dd69a357e1b798b07b64cf4177a464a3",
        "patch": "@@ -190,7 +190,7 @@ class OriginPubkeyProvider final : public PubkeyProvider\n \n     std::string OriginString() const\n     {\n-        return HexStr(std::begin(m_origin.fingerprint), std::end(m_origin.fingerprint)) + FormatHDKeypath(m_origin.path);\n+        return HexStr(m_origin.fingerprint) + FormatHDKeypath(m_origin.path);\n     }\n \n public:"
      },
      {
        "sha": "b3cc8cefd975054404f6c77930d71e7844140d67",
        "filename": "src/test/crypto_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a8aa626dd69a357e1b798b07b64cf4177a464a3/src/test/crypto_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a8aa626dd69a357e1b798b07b64cf4177a464a3/src/test/crypto_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/crypto_tests.cpp?ref=0a8aa626dd69a357e1b798b07b64cf4177a464a3",
        "patch": "@@ -183,7 +183,7 @@ static void TestHKDF_SHA256_32(const std::string &ikm_hex, const std::string &sa\n     CHKDF_HMAC_SHA256_L32 hkdf32(initial_key_material.data(), initial_key_material.size(), salt_stringified);\n     unsigned char out[32];\n     hkdf32.Expand32(info_stringified, out);\n-    BOOST_CHECK(HexStr(out, out + 32) == okm_check_hex);\n+    BOOST_CHECK(HexStr(out) == okm_check_hex);\n }\n \n static std::string LongTestString()"
      },
      {
        "sha": "548fd020a64f6879500b6b12976892aa84f29189",
        "filename": "src/test/settings_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a8aa626dd69a357e1b798b07b64cf4177a464a3/src/test/settings_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a8aa626dd69a357e1b798b07b64cf4177a464a3/src/test/settings_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/settings_tests.cpp?ref=0a8aa626dd69a357e1b798b07b64cf4177a464a3",
        "patch": "@@ -241,7 +241,7 @@ BOOST_FIXTURE_TEST_CASE(Merge, MergeTestingSetup)\n \n     unsigned char out_sha_bytes[CSHA256::OUTPUT_SIZE];\n     out_sha.Finalize(out_sha_bytes);\n-    std::string out_sha_hex = HexStr(std::begin(out_sha_bytes), std::end(out_sha_bytes));\n+    std::string out_sha_hex = HexStr(out_sha_bytes);\n \n     // If check below fails, should manually dump the results with:\n     //"
      },
      {
        "sha": "b49370c96734071051c6abdd342f10ca0301f3b6",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 32,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a8aa626dd69a357e1b798b07b64cf4177a464a3/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a8aa626dd69a357e1b798b07b64cf4177a464a3/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=0a8aa626dd69a357e1b798b07b64cf4177a464a3",
        "patch": "@@ -105,47 +105,24 @@ BOOST_AUTO_TEST_CASE(util_ParseHex)\n BOOST_AUTO_TEST_CASE(util_HexStr)\n {\n     BOOST_CHECK_EQUAL(\n-        HexStr(ParseHex_expected, ParseHex_expected + sizeof(ParseHex_expected)),\n+        HexStr(ParseHex_expected),\n         \"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\");\n \n     BOOST_CHECK_EQUAL(\n-        HexStr(ParseHex_expected + sizeof(ParseHex_expected),\n-               ParseHex_expected + sizeof(ParseHex_expected)),\n+        HexStr(Span<const unsigned char>(\n+               ParseHex_expected + sizeof(ParseHex_expected),\n+               ParseHex_expected + sizeof(ParseHex_expected))),\n         \"\");\n \n     BOOST_CHECK_EQUAL(\n-        HexStr(ParseHex_expected, ParseHex_expected),\n+        HexStr(Span<const unsigned char>(ParseHex_expected, ParseHex_expected)),\n         \"\");\n \n     std::vector<unsigned char> ParseHex_vec(ParseHex_expected, ParseHex_expected + 5);\n \n     BOOST_CHECK_EQUAL(\n-        HexStr(ParseHex_vec.rbegin(), ParseHex_vec.rend()),\n-        \"b0fd8a6704\"\n-    );\n-\n-    BOOST_CHECK_EQUAL(\n-        HexStr(std::reverse_iterator<const uint8_t *>(ParseHex_expected),\n-               std::reverse_iterator<const uint8_t *>(ParseHex_expected)),\n-        \"\"\n-    );\n-\n-    BOOST_CHECK_EQUAL(\n-        HexStr(std::reverse_iterator<const uint8_t *>(ParseHex_expected + 1),\n-               std::reverse_iterator<const uint8_t *>(ParseHex_expected)),\n-        \"04\"\n-    );\n-\n-    BOOST_CHECK_EQUAL(\n-        HexStr(std::reverse_iterator<const uint8_t *>(ParseHex_expected + 5),\n-               std::reverse_iterator<const uint8_t *>(ParseHex_expected)),\n-        \"b0fd8a6704\"\n-    );\n-\n-    BOOST_CHECK_EQUAL(\n-        HexStr(std::reverse_iterator<const uint8_t *>(ParseHex_expected + 65),\n-               std::reverse_iterator<const uint8_t *>(ParseHex_expected)),\n-        \"5f1df16b2b704c8a578d0bbaf74d385cde12c11ee50455f3c438ef4c3fbcf649b6de611feae06279a60939e028a8d65c10b73071a6f16719274855feb0fd8a6704\"\n+        HexStr(ParseHex_vec),\n+        \"04678afdb0\"\n     );\n }\n \n@@ -1022,7 +999,7 @@ BOOST_FIXTURE_TEST_CASE(util_ArgsMerge, ArgsMergeTestingSetup)\n \n     unsigned char out_sha_bytes[CSHA256::OUTPUT_SIZE];\n     out_sha.Finalize(out_sha_bytes);\n-    std::string out_sha_hex = HexStr(std::begin(out_sha_bytes), std::end(out_sha_bytes));\n+    std::string out_sha_hex = HexStr(out_sha_bytes);\n \n     // If check below fails, should manually dump the results with:\n     //\n@@ -1125,7 +1102,7 @@ BOOST_FIXTURE_TEST_CASE(util_ChainMerge, ChainMergeTestingSetup)\n \n     unsigned char out_sha_bytes[CSHA256::OUTPUT_SIZE];\n     out_sha.Finalize(out_sha_bytes);\n-    std::string out_sha_hex = HexStr(std::begin(out_sha_bytes), std::end(out_sha_bytes));\n+    std::string out_sha_hex = HexStr(out_sha_bytes);\n \n     // If check below fails, should manually dump the results with:\n     //"
      },
      {
        "sha": "ee1b34eaddc07321d00bfef2e0559b58a668e872",
        "filename": "src/uint256.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a8aa626dd69a357e1b798b07b64cf4177a464a3/src/uint256.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a8aa626dd69a357e1b798b07b64cf4177a464a3/src/uint256.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/uint256.cpp?ref=0a8aa626dd69a357e1b798b07b64cf4177a464a3",
        "patch": "@@ -19,7 +19,11 @@ base_blob<BITS>::base_blob(const std::vector<unsigned char>& vch)\n template <unsigned int BITS>\n std::string base_blob<BITS>::GetHex() const\n {\n-    return HexStr(std::reverse_iterator<const uint8_t*>(m_data + sizeof(m_data)), std::reverse_iterator<const uint8_t*>(m_data));\n+    uint8_t m_data_rev[WIDTH];\n+    for (int i = 0; i < WIDTH; ++i) {\n+        m_data_rev[i] = m_data[WIDTH - 1 - i];\n+    }\n+    return HexStr(m_data_rev);\n }\n \n template <unsigned int BITS>"
      },
      {
        "sha": "d10f92ffe602d71c945cc3a2a1c19f3edce7ef2f",
        "filename": "src/util/strencodings.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a8aa626dd69a357e1b798b07b64cf4177a464a3/src/util/strencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a8aa626dd69a357e1b798b07b64cf4177a464a3/src/util/strencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/strencodings.cpp?ref=0a8aa626dd69a357e1b798b07b64cf4177a464a3",
        "patch": "@@ -569,3 +569,16 @@ std::string Capitalize(std::string str)\n     str[0] = ToUpper(str.front());\n     return str;\n }\n+\n+std::string HexStr(const Span<const uint8_t> s)\n+{\n+    std::string rv;\n+    static constexpr char hexmap[16] = { '0', '1', '2', '3', '4', '5', '6', '7',\n+                                         '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };\n+    rv.reserve(s.size() * 2);\n+    for (uint8_t v: s) {\n+        rv.push_back(hexmap[v >> 4]);\n+        rv.push_back(hexmap[v & 15]);\n+    }\n+    return rv;\n+}"
      },
      {
        "sha": "eaa0fa9992f4f39952b37ff8d602552d7e3d3bc4",
        "filename": "src/util/strencodings.h",
        "status": "modified",
        "additions": 6,
        "deletions": 21,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a8aa626dd69a357e1b798b07b64cf4177a464a3/src/util/strencodings.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a8aa626dd69a357e1b798b07b64cf4177a464a3/src/util/strencodings.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/strencodings.h?ref=0a8aa626dd69a357e1b798b07b64cf4177a464a3",
        "patch": "@@ -10,6 +10,7 @@\n #define BITCOIN_UTIL_STRENCODINGS_H\n \n #include <attributes.h>\n+#include <span.h>\n \n #include <cstdint>\n #include <iterator>\n@@ -119,27 +120,11 @@ NODISCARD bool ParseUInt64(const std::string& str, uint64_t *out);\n  */\n NODISCARD bool ParseDouble(const std::string& str, double *out);\n \n-template<typename T>\n-std::string HexStr(const T itbegin, const T itend)\n-{\n-    std::string rv;\n-    static const char hexmap[16] = { '0', '1', '2', '3', '4', '5', '6', '7',\n-                                     '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };\n-    rv.reserve(std::distance(itbegin, itend) * 2);\n-    for(T it = itbegin; it < itend; ++it)\n-    {\n-        unsigned char val = (unsigned char)(*it);\n-        rv.push_back(hexmap[val>>4]);\n-        rv.push_back(hexmap[val&15]);\n-    }\n-    return rv;\n-}\n-\n-template<typename T>\n-inline std::string HexStr(const T& vch)\n-{\n-    return HexStr(vch.begin(), vch.end());\n-}\n+/**\n+ * Convert a span of bytes to a lower-case hexadecimal string.\n+ */\n+std::string HexStr(const Span<const uint8_t> s);\n+inline std::string HexStr(const Span<const char> s) { return HexStr(MakeUCharSpan(s)); }\n \n /**\n  * Format a paragraph of text to a fixed width, adding spaces for"
      },
      {
        "sha": "82032611ce663dba31bef7bc50f63ef66b10122a",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a8aa626dd69a357e1b798b07b64cf4177a464a3/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a8aa626dd69a357e1b798b07b64cf4177a464a3/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=0a8aa626dd69a357e1b798b07b64cf4177a464a3",
        "patch": "@@ -1198,8 +1198,8 @@ bool ReadRawBlockFromDisk(std::vector<uint8_t>& block, const FlatFilePos& pos, c\n \n         if (memcmp(blk_start, message_start, CMessageHeader::MESSAGE_START_SIZE)) {\n             return error(\"%s: Block magic mismatch for %s: %s versus expected %s\", __func__, pos.ToString(),\n-                    HexStr(blk_start, blk_start + CMessageHeader::MESSAGE_START_SIZE),\n-                    HexStr(message_start, message_start + CMessageHeader::MESSAGE_START_SIZE));\n+                    HexStr(blk_start),\n+                    HexStr(message_start));\n         }\n \n         if (blk_size > MAX_SIZE) {"
      },
      {
        "sha": "24eb2ee34c9b9490915884ef5f889455d15a7a49",
        "filename": "src/wallet/bdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a8aa626dd69a357e1b798b07b64cf4177a464a3/src/wallet/bdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a8aa626dd69a357e1b798b07b64cf4177a464a3/src/wallet/bdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/bdb.cpp?ref=0a8aa626dd69a357e1b798b07b64cf4177a464a3",
        "patch": "@@ -38,7 +38,7 @@ void CheckUniqueFileid(const BerkeleyEnvironment& env, const std::string& filena\n     for (const auto& item : env.m_fileids) {\n         if (fileid == item.second && &fileid != &item.second) {\n             throw std::runtime_error(strprintf(\"BerkeleyDatabase: Can't open database %s (duplicates fileid %s from %s)\", filename,\n-                HexStr(std::begin(item.second.value), std::end(item.second.value)), item.first));\n+                HexStr(item.second.value), item.first));\n         }\n     }\n }"
      },
      {
        "sha": "e0c3a1287a8cdf61e73b6e87c85715103ec9f953",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a8aa626dd69a357e1b798b07b64cf4177a464a3/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a8aa626dd69a357e1b798b07b64cf4177a464a3/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=0a8aa626dd69a357e1b798b07b64cf4177a464a3",
        "patch": "@@ -34,7 +34,7 @@ std::string static EncodeDumpString(const std::string &str) {\n     std::stringstream ret;\n     for (const unsigned char c : str) {\n         if (c <= 32 || c >= 128 || c == '%') {\n-            ret << '%' << HexStr(&c, &c + 1);\n+            ret << '%' << HexStr(Span<const unsigned char>(&c, 1));\n         } else {\n             ret << c;\n         }"
      },
      {
        "sha": "558e64df1209b4255c5753827f9471e46948a018",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a8aa626dd69a357e1b798b07b64cf4177a464a3/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a8aa626dd69a357e1b798b07b64cf4177a464a3/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=0a8aa626dd69a357e1b798b07b64cf4177a464a3",
        "patch": "@@ -3688,7 +3688,7 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n             if (meta->has_key_origin) {\n                 ret.pushKV(\"hdkeypath\", WriteHDKeypath(meta->key_origin.path));\n                 ret.pushKV(\"hdseedid\", meta->hd_seed_id.GetHex());\n-                ret.pushKV(\"hdmasterfingerprint\", HexStr(meta->key_origin.fingerprint, meta->key_origin.fingerprint + 4));\n+                ret.pushKV(\"hdmasterfingerprint\", HexStr(meta->key_origin.fingerprint));\n             }\n         }\n     }"
      }
    ]
  }
]