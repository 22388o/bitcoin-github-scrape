[
  {
    "sha": "dc8e1e75487461ec9bff433144f0db831b682403",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYzhlMWU3NTQ4NzQ2MWVjOWJmZjQzMzE0NGYwZGI4MzFiNjgyNDAz",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-11-08T03:01:22Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-11-08T03:01:22Z"
      },
      "message": "Clarify emptyIncludeConf logic\n\nSuggestion from John Newbery <john@johnnewbery.com> in\nhttps://github.com/bitcoin/bitcoin/pull/15934#discussion_r343795528",
      "tree": {
        "sha": "bfbe7db40e7ab55885033e36ae20bde51695f5d9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bfbe7db40e7ab55885033e36ae20bde51695f5d9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dc8e1e75487461ec9bff433144f0db831b682403",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc8e1e75487461ec9bff433144f0db831b682403",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dc8e1e75487461ec9bff433144f0db831b682403",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc8e1e75487461ec9bff433144f0db831b682403/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2fb6140d585fa05547415a6c440dc43b561e2439",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2fb6140d585fa05547415a6c440dc43b561e2439",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2fb6140d585fa05547415a6c440dc43b561e2439"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 10,
      "deletions": 5
    },
    "files": [
      {
        "sha": "925400419144bbd0a4b22271289ef652e22b12b4",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 5,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc8e1e75487461ec9bff433144f0db831b682403/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc8e1e75487461ec9bff433144f0db831b682403/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=dc8e1e75487461ec9bff433144f0db831b682403",
        "patch": "@@ -894,14 +894,19 @@ bool ArgsManager::ReadConfigFiles(std::string& error, bool ignore_invalid_keys)\n         if (!ReadConfigStream(stream, confPath, error, ignore_invalid_keys)) {\n             return false;\n         }\n-        // if there is an -includeconf in the override args, but it is empty, that means the user\n-        // passed '-noincludeconf' on the command line, in which case we should not include anything\n-        bool emptyIncludeConf;\n+        // `-includeconf` cannot be included in the command line arguments except\n+        // as `-noincludeconf` (which indicates that no conf file should be used).\n+        bool use_conf_file{true};\n         {\n             LOCK(cs_args);\n-            emptyIncludeConf = m_override_args.count(\"-includeconf\") == 0;\n+            auto it = m_override_args.find(\"-includeconf\");\n+            if (it != m_override_args.end()) {\n+                // ParseParameters() fails if a non-negated -includeconf is passed on the command-line\n+                assert(it->second.empty());\n+                use_conf_file = false;\n+            }\n         }\n-        if (emptyIncludeConf) {\n+        if (use_conf_file) {\n             std::string chain_id = GetChainName();\n             std::vector<std::string> includeconf(GetArgs(\"-includeconf\"));\n             {"
      }
    ]
  },
  {
    "sha": "5a84aa880f6da0bac0e2144733fdef3b8558c761",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YTg0YWE4ODBmNmRhMGJhYzBlMjE0NDczM2ZkZWYzYjg1NThjNzYx",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-11-08T03:04:42Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-11-08T03:04:42Z"
      },
      "message": "Rename includeconf variables for clarity\n\nincludeconf -> conf_file_names\nto_include -> conf_file_name\ninclude_config -> conf_file_stream\n\nSuggestion from John Newbery <john@johnnewbery.com> in\nhttps://github.com/bitcoin/bitcoin/pull/15934#discussion_r343905138",
      "tree": {
        "sha": "ae4e658cfe66d5260a6e7810420446846d75bb3a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ae4e658cfe66d5260a6e7810420446846d75bb3a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5a84aa880f6da0bac0e2144733fdef3b8558c761",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a84aa880f6da0bac0e2144733fdef3b8558c761",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5a84aa880f6da0bac0e2144733fdef3b8558c761",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a84aa880f6da0bac0e2144733fdef3b8558c761/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dc8e1e75487461ec9bff433144f0db831b682403",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc8e1e75487461ec9bff433144f0db831b682403",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dc8e1e75487461ec9bff433144f0db831b682403"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 13,
      "deletions": 13
    },
    "files": [
      {
        "sha": "67c7694944df81dfa1a01a56b24301b97dd749f7",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5a84aa880f6da0bac0e2144733fdef3b8558c761/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5a84aa880f6da0bac0e2144733fdef3b8558c761/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=5a84aa880f6da0bac0e2144733fdef3b8558c761",
        "patch": "@@ -908,12 +908,12 @@ bool ArgsManager::ReadConfigFiles(std::string& error, bool ignore_invalid_keys)\n         }\n         if (use_conf_file) {\n             std::string chain_id = GetChainName();\n-            std::vector<std::string> includeconf(GetArgs(\"-includeconf\"));\n+            std::vector<std::string> conf_file_names(GetArgs(\"-includeconf\"));\n             {\n                 // We haven't set m_network yet (that happens in SelectParams()), so manually check\n                 // for network.includeconf args.\n                 std::vector<std::string> includeconf_net(GetArgs(std::string(\"-\") + chain_id + \".includeconf\"));\n-                includeconf.insert(includeconf.end(), includeconf_net.begin(), includeconf_net.end());\n+                conf_file_names.insert(conf_file_names.end(), includeconf_net.begin(), includeconf_net.end());\n             }\n \n             // Remove -includeconf from configuration, so we can warn about recursion\n@@ -924,33 +924,33 @@ bool ArgsManager::ReadConfigFiles(std::string& error, bool ignore_invalid_keys)\n                 m_config_args.erase(std::string(\"-\") + chain_id + \".includeconf\");\n             }\n \n-            for (const std::string& to_include : includeconf) {\n-                fsbridge::ifstream include_config(GetConfigFile(to_include));\n-                if (include_config.good()) {\n-                    if (!ReadConfigStream(include_config, to_include, error, ignore_invalid_keys)) {\n+            for (const std::string& conf_file_name : conf_file_names) {\n+                fsbridge::ifstream conf_file_stream(GetConfigFile(conf_file_name));\n+                if (conf_file_stream.good()) {\n+                    if (!ReadConfigStream(conf_file_stream, conf_file_name, error, ignore_invalid_keys)) {\n                         return false;\n                     }\n-                    LogPrintf(\"Included configuration file %s\\n\", to_include);\n+                    LogPrintf(\"Included configuration file %s\\n\", conf_file_name);\n                 } else {\n-                    error = \"Failed to include configuration file \" + to_include;\n+                    error = \"Failed to include configuration file \" + conf_file_name;\n                     return false;\n                 }\n             }\n \n             // Warn about recursive -includeconf\n-            includeconf = GetArgs(\"-includeconf\");\n+            conf_file_names = GetArgs(\"-includeconf\");\n             {\n                 std::vector<std::string> includeconf_net(GetArgs(std::string(\"-\") + chain_id + \".includeconf\"));\n-                includeconf.insert(includeconf.end(), includeconf_net.begin(), includeconf_net.end());\n+                conf_file_names.insert(conf_file_names.end(), includeconf_net.begin(), includeconf_net.end());\n                 std::string chain_id_final = GetChainName();\n                 if (chain_id_final != chain_id) {\n                     // Also warn about recursive includeconf for the chain that was specified in one of the includeconfs\n                     includeconf_net = GetArgs(std::string(\"-\") + chain_id_final + \".includeconf\");\n-                    includeconf.insert(includeconf.end(), includeconf_net.begin(), includeconf_net.end());\n+                    conf_file_names.insert(conf_file_names.end(), includeconf_net.begin(), includeconf_net.end());\n                 }\n             }\n-            for (const std::string& to_include : includeconf) {\n-                tfm::format(std::cerr, \"warning: -includeconf cannot be used from included files; ignoring -includeconf=%s\\n\", to_include);\n+            for (const std::string& conf_file_name : conf_file_names) {\n+                tfm::format(std::cerr, \"warning: -includeconf cannot be used from included files; ignoring -includeconf=%s\\n\", conf_file_name);\n             }\n         }\n     }"
      }
    ]
  },
  {
    "sha": "e2e37cfe8af088bd8ea884be2f79f0f3cac555d5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMmUzN2NmZThhZjA4OGJkOGVhODg0YmUyZjc5ZjBmM2NhYzU1NWQ1",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-11-08T03:08:22Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-11-08T03:08:22Z"
      },
      "message": "Remove includeconf nested scope\n\nEasier to review ignoring whitespace\n\nSuggestion from John Newbery <john@johnnewbery.com> in\nhttps://github.com/bitcoin/bitcoin/pull/15934#discussion_r343806860",
      "tree": {
        "sha": "40c69485d99a52ca6119f1e4d51b44578174b677",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/40c69485d99a52ca6119f1e4d51b44578174b677"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e2e37cfe8af088bd8ea884be2f79f0f3cac555d5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2e37cfe8af088bd8ea884be2f79f0f3cac555d5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e2e37cfe8af088bd8ea884be2f79f0f3cac555d5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2e37cfe8af088bd8ea884be2f79f0f3cac555d5/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5a84aa880f6da0bac0e2144733fdef3b8558c761",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a84aa880f6da0bac0e2144733fdef3b8558c761",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5a84aa880f6da0bac0e2144733fdef3b8558c761"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 6,
      "deletions": 8
    },
    "files": [
      {
        "sha": "ed56e739609c4266b1495a04fe7eb8d707a0e534",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 8,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2e37cfe8af088bd8ea884be2f79f0f3cac555d5/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2e37cfe8af088bd8ea884be2f79f0f3cac555d5/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=e2e37cfe8af088bd8ea884be2f79f0f3cac555d5",
        "patch": "@@ -939,15 +939,13 @@ bool ArgsManager::ReadConfigFiles(std::string& error, bool ignore_invalid_keys)\n \n             // Warn about recursive -includeconf\n             conf_file_names = GetArgs(\"-includeconf\");\n-            {\n-                std::vector<std::string> includeconf_net(GetArgs(std::string(\"-\") + chain_id + \".includeconf\"));\n+            std::vector<std::string> includeconf_net(GetArgs(std::string(\"-\") + chain_id + \".includeconf\"));\n+            conf_file_names.insert(conf_file_names.end(), includeconf_net.begin(), includeconf_net.end());\n+            std::string chain_id_final = GetChainName();\n+            if (chain_id_final != chain_id) {\n+                // Also warn about recursive includeconf for the chain that was specified in one of the includeconfs\n+                includeconf_net = GetArgs(std::string(\"-\") + chain_id_final + \".includeconf\");\n                 conf_file_names.insert(conf_file_names.end(), includeconf_net.begin(), includeconf_net.end());\n-                std::string chain_id_final = GetChainName();\n-                if (chain_id_final != chain_id) {\n-                    // Also warn about recursive includeconf for the chain that was specified in one of the includeconfs\n-                    includeconf_net = GetArgs(std::string(\"-\") + chain_id_final + \".includeconf\");\n-                    conf_file_names.insert(conf_file_names.end(), includeconf_net.begin(), includeconf_net.end());\n-                }\n             }\n             for (const std::string& conf_file_name : conf_file_names) {\n                 tfm::format(std::cerr, \"warning: -includeconf cannot be used from included files; ignoring -includeconf=%s\\n\", conf_file_name);"
      }
    ]
  },
  {
    "sha": "9dcb952fe5f85529ab28e091af7534e72c21c90f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZGNiOTUyZmU1Zjg1NTI5YWIyOGUwOTFhZjc1MzRlNzJjMjFjOTBm",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-03-05T21:07:48Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-11-08T03:08:22Z"
      },
      "message": "Add util::Settings struct and helper functions.\n\nImplement merging of settings from different sources (command line and config\nfile) separately from parsing code in system.cpp, so it is easier to add new\nsources.\n\nDocument current inconsistent merging behavior without changing it.\n\nThis commit only adds new settings code without using it. The next commit calls\nthe new code to replace existing code in system.cpp.\n\nCo-authored-by: John Newbery <john@johnnewbery.com>",
      "tree": {
        "sha": "57731a54ac2cc59fa737f329bb1359793f464f80",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/57731a54ac2cc59fa737f329bb1359793f464f80"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9dcb952fe5f85529ab28e091af7534e72c21c90f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9dcb952fe5f85529ab28e091af7534e72c21c90f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9dcb952fe5f85529ab28e091af7534e72c21c90f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9dcb952fe5f85529ab28e091af7534e72c21c90f/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e2e37cfe8af088bd8ea884be2f79f0f3cac555d5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2e37cfe8af088bd8ea884be2f79f0f3cac555d5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e2e37cfe8af088bd8ea884be2f79f0f3cac555d5"
      }
    ],
    "stats": {
      "total": 258,
      "additions": 258,
      "deletions": 0
    },
    "files": [
      {
        "sha": "a14e44d2c00a03ba1c3a988e97d6fec3dfc78a08",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9dcb952fe5f85529ab28e091af7534e72c21c90f/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9dcb952fe5f85529ab28e091af7534e72c21c90f/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=9dcb952fe5f85529ab28e091af7534e72c21c90f",
        "patch": "@@ -219,6 +219,7 @@ BITCOIN_CORE_H = \\\n   util/memory.h \\\n   util/moneystr.h \\\n   util/rbf.h \\\n+  util/settings.h \\\n   util/string.h \\\n   util/threadnames.h \\\n   util/time.h \\\n@@ -513,6 +514,7 @@ libbitcoin_util_a_SOURCES = \\\n   util/system.cpp \\\n   util/moneystr.cpp \\\n   util/rbf.cpp \\\n+  util/settings.cpp \\\n   util/threadnames.cpp \\\n   util/spanparsing.cpp \\\n   util/strencodings.cpp \\"
      },
      {
        "sha": "af75fef31057c1342be3285d0ef87187f2460a85",
        "filename": "src/util/settings.cpp",
        "status": "added",
        "additions": 169,
        "deletions": 0,
        "changes": 169,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9dcb952fe5f85529ab28e091af7534e72c21c90f/src/util/settings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9dcb952fe5f85529ab28e091af7534e72c21c90f/src/util/settings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/settings.cpp?ref=9dcb952fe5f85529ab28e091af7534e72c21c90f",
        "patch": "@@ -0,0 +1,169 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/settings.h>\n+\n+#include <univalue.h>\n+\n+namespace util {\n+namespace {\n+\n+enum class Source {\n+   FORCED,\n+   COMMAND_LINE,\n+   CONFIG_FILE_NETWORK_SECTION,\n+   CONFIG_FILE_DEFAULT_SECTION\n+};\n+\n+//! Merge settings from multiple sources in precedence order:\n+//! Forced config > command line > config file network-specific section > config file default section\n+//!\n+//! This function is provided with a callback function fn that contains\n+//! specific logic for how to merge the sources.\n+template <typename Fn>\n+static void MergeSettings(const Settings& settings, const std::string& section, const std::string& name, Fn&& fn)\n+{\n+    // Merge in the forced settings\n+    if (auto* value = FindKey(settings.forced_settings, name)) {\n+        fn(SettingsSpan(*value), Source::FORCED);\n+    }\n+    // Merge in the command-line options\n+    if (auto* values = FindKey(settings.command_line_options, name)) {\n+        fn(SettingsSpan(*values), Source::COMMAND_LINE);\n+    }\n+    // Merge in the network-specific section of the config file\n+    if (!section.empty()) {\n+        if (auto* map = FindKey(settings.ro_config, section)) {\n+            if (auto* values = FindKey(*map, name)) {\n+                fn(SettingsSpan(*values), Source::CONFIG_FILE_NETWORK_SECTION);\n+            }\n+        }\n+    }\n+    // Merge in the default section of the config file\n+    if (auto* map = FindKey(settings.ro_config, \"\")) {\n+        if (auto* values = FindKey(*map, name)) {\n+            fn(SettingsSpan(*values), Source::CONFIG_FILE_DEFAULT_SECTION);\n+        }\n+    }\n+}\n+} // namespace\n+\n+SettingsValue GetSetting(const Settings& settings,\n+    const std::string& section,\n+    const std::string& name,\n+    bool ignore_default_section_config,\n+    bool get_chain_name)\n+{\n+    SettingsValue result;\n+    MergeSettings(settings, section, name, [&](SettingsSpan span, Source source) {\n+        // Weird behavior preserved for backwards compatibility: Apply negated\n+        // setting even if non-negated setting would be ignored. A negated\n+        // value in the default section is applied to network specific options,\n+        // even though normal non-negated values there would be ignored.\n+        const bool never_ignore_negated_setting = span.last_negated();\n+\n+        // Weird behavior preserved for backwards compatibility: Take first\n+        // assigned value instead of last. In general, later settings take\n+        // precedence over early settings, but for backwards compatibility in\n+        // the config file the precedence is reversed for all settings except\n+        // chain name settings.\n+        const bool reverse_precedence = (source == Source::CONFIG_FILE_NETWORK_SECTION || source == Source::CONFIG_FILE_DEFAULT_SECTION) && !get_chain_name;\n+\n+        // Weird behavior preserved for backwards compatibility: Negated\n+        // -regtest and -testnet arguments which you would expect to override\n+        // values set in the configuration file are currently accepted but\n+        // silently ignored. It would be better to apply these just like other\n+        // negated values, or at least warn they are ignored.\n+        const bool skip_negated_command_line = get_chain_name;\n+\n+        // Ignore settings in default config section if requested.\n+        if (ignore_default_section_config && source == Source::CONFIG_FILE_DEFAULT_SECTION && !never_ignore_negated_setting) return;\n+\n+        // Skip negated command line settings.\n+        if (skip_negated_command_line && span.last_negated()) return;\n+\n+        // Stick with highest priority value, keeping result if already set.\n+        if (!result.isNull()) return;\n+\n+        if (!span.empty()) {\n+            result = reverse_precedence ? span.begin()[0] : span.end()[-1];\n+        } else if (span.last_negated()) {\n+            result = false;\n+        }\n+    });\n+    return result;\n+}\n+\n+std::vector<SettingsValue> GetSettingsList(const Settings& settings,\n+    const std::string& section,\n+    const std::string& name,\n+    bool ignore_default_section_config)\n+{\n+    std::vector<SettingsValue> result;\n+    bool result_complete = false;\n+    bool prev_negated_empty = false;\n+    MergeSettings(settings, section, name, [&](SettingsSpan span, Source source) {\n+        // Weird behavior preserved for backwards compatibility: Apply config\n+        // file settings even if negated on command line. Negating a setting on\n+        // command line will ignore earlier settings on the command line and\n+        // ignore settings in the config file, unless the negated command line\n+        // value is followed by non-negated value, in which case config file\n+        // settings will be brought back from the dead (but earlier command\n+        // line settings will still be ignored).\n+        const bool add_zombie_config_values = (source == Source::CONFIG_FILE_NETWORK_SECTION || source == Source::CONFIG_FILE_DEFAULT_SECTION) && !prev_negated_empty;\n+\n+        // Ignore settings in default config section if requested.\n+        if (ignore_default_section_config && source == Source::CONFIG_FILE_DEFAULT_SECTION) return;\n+\n+        // Add new settings to the result if isn't already complete, or if the\n+        // values are zombies.\n+        if (!result_complete || add_zombie_config_values) {\n+            for (const auto& value : span) {\n+                if (value.isArray()) {\n+                    result.insert(result.end(), value.getValues().begin(), value.getValues().end());\n+                } else {\n+                    result.push_back(value);\n+                }\n+            }\n+        }\n+\n+        // If a setting was negated, or if a setting was forced, set\n+        // result_complete to true to ignore any later lower priority settings.\n+        result_complete |= span.negated() > 0 || source == Source::FORCED;\n+\n+        // Update the negated and empty state used for the zombie values check.\n+        prev_negated_empty |= span.last_negated() && result.empty();\n+    });\n+    return result;\n+}\n+\n+bool OnlyHasDefaultSectionSetting(const Settings& settings, const std::string& section, const std::string& name)\n+{\n+    bool has_default_section_setting = false;\n+    bool has_other_setting = false;\n+    MergeSettings(settings, section, name, [&](SettingsSpan span, Source source) {\n+        if (span.empty()) return;\n+        else if (source == Source::CONFIG_FILE_DEFAULT_SECTION) has_default_section_setting = true;\n+        else has_other_setting = true;\n+    });\n+    // If a value is set in the default section and not explicitly overwritten by the\n+    // user on the command line or in a different section, then we want to enable\n+    // warnings about the value being ignored.\n+    return has_default_section_setting && !has_other_setting;\n+}\n+\n+SettingsSpan::SettingsSpan(const std::vector<SettingsValue>& vec) noexcept : SettingsSpan(vec.data(), vec.size()) {}\n+const SettingsValue* SettingsSpan::begin() const { return data + negated(); }\n+const SettingsValue* SettingsSpan::end() const { return data + size; }\n+bool SettingsSpan::empty() const { return size == 0 || last_negated(); }\n+bool SettingsSpan::last_negated() const { return size > 0 && data[size - 1].isFalse(); }\n+size_t SettingsSpan::negated() const\n+{\n+    for (size_t i = size; i > 0; --i) {\n+        if (data[i - 1].isFalse()) return i; // Return number of negated values (position of last false value)\n+    }\n+    return 0;\n+}\n+\n+} // namespace util"
      },
      {
        "sha": "17832e4d2ccf018b70aea9a796795f6c7ecce7d1",
        "filename": "src/util/settings.h",
        "status": "added",
        "additions": 87,
        "deletions": 0,
        "changes": 87,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9dcb952fe5f85529ab28e091af7534e72c21c90f/src/util/settings.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9dcb952fe5f85529ab28e091af7534e72c21c90f/src/util/settings.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/settings.h?ref=9dcb952fe5f85529ab28e091af7534e72c21c90f",
        "patch": "@@ -0,0 +1,87 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_SETTINGS_H\n+#define BITCOIN_UTIL_SETTINGS_H\n+\n+#include <map>\n+#include <string>\n+#include <vector>\n+\n+class UniValue;\n+\n+namespace util {\n+\n+//! Settings value type (string/integer/boolean/null variant).\n+//!\n+//! @note UniValue is used here for convenience and because it can be easily\n+//!       serialized in a readable format. But any other variant type that can\n+//!       be assigned strings, int64_t, and bool values and has get_str(),\n+//!       get_int64(), get_bool(), isNum(), isBool(), isFalse(), isTrue() and\n+//!       isNull() methods can be substituted if there's a need to move away\n+//!       from UniValue. (An implementation with boost::variant was posted at\n+//!       https://github.com/bitcoin/bitcoin/pull/15934/files#r337691812)\n+using SettingsValue = UniValue;\n+\n+//! Stored bitcoin settings. This struct combines settings from the command line\n+//! and a read-only configuration file.\n+struct Settings {\n+    //! Map of setting name to forced setting value.\n+    std::map<std::string, SettingsValue> forced_settings;\n+    //! Map of setting name to list of command line values.\n+    std::map<std::string, std::vector<SettingsValue>> command_line_options;\n+    //! Map of config section name and setting name to list of config file values.\n+    std::map<std::string, std::map<std::string, std::vector<SettingsValue>>> ro_config;\n+};\n+\n+//! Get settings value from combined sources: forced settings, command line\n+//! arguments and the read-only config file.\n+//!\n+//! @param ignore_default_section_config - ignore values in the default section\n+//!                                        of the config file (part before any\n+//!                                        [section] keywords)\n+//! @param get_chain_name - enable special backwards compatible behavior\n+//!                         for GetChainName\n+SettingsValue GetSetting(const Settings& settings, const std::string& section, const std::string& name, bool ignore_default_section_config, bool get_chain_name);\n+\n+//! Get combined setting value similar to GetSetting(), except if setting was\n+//! specified multiple times, return a list of all the values specified.\n+std::vector<SettingsValue> GetSettingsList(const Settings& settings, const std::string& section, const std::string& name, bool ignore_default_section_config);\n+\n+//! Return true if a setting is set in the default config file section, and not\n+//! overridden by a higher priority command-line or network section value.\n+//!\n+//! This is used to provide user warnings about values that might be getting\n+//! ignored unintentionally.\n+bool OnlyHasDefaultSectionSetting(const Settings& settings, const std::string& section, const std::string& name);\n+\n+//! Accessor for list of settings that skips negated values when iterated over.\n+//! The last boolean `false` value in the list and all earlier values are\n+//! considered negated.\n+struct SettingsSpan {\n+    explicit SettingsSpan() = default;\n+    explicit SettingsSpan(const SettingsValue& value) noexcept : SettingsSpan(&value, 1) {}\n+    explicit SettingsSpan(const SettingsValue* data, size_t size) noexcept : data(data), size(size) {}\n+    explicit SettingsSpan(const std::vector<SettingsValue>& vec) noexcept;\n+    const SettingsValue* begin() const; //<! Pointer to first non-negated value.\n+    const SettingsValue* end() const;   //<! Pointer to end of values.\n+    bool empty() const;                 //<! True if there are any non-negated values.\n+    bool last_negated() const;          //<! True if the last value is negated.\n+    size_t negated() const;             //<! Number of negated values.\n+\n+    const SettingsValue* data = nullptr;\n+    size_t size = 0;\n+};\n+\n+//! Map lookup helper.\n+template <typename Map, typename Key>\n+auto FindKey(Map&& map, Key&& key) -> decltype(&map.at(key))\n+{\n+    auto it = map.find(key);\n+    return it == map.end() ? nullptr : &it->second;\n+}\n+\n+} // namespace util\n+\n+#endif // BITCOIN_UTIL_SETTINGS_H"
      }
    ]
  },
  {
    "sha": "7f40528cd50fc43ac0bd3e785de24d661adddb7a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZjQwNTI4Y2Q1MGZjNDNhYzBiZDNlNzg1ZGUyNGQ2NjFhZGRkYjdh",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-04-22T22:08:51Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-11-08T03:08:22Z"
      },
      "message": "Deduplicate settings merge code\n\nGet rid of settings merging code in util/system.cpp repeated 5 places,\ninconsistently:\n\n- ArgsManagerHelper::GetArg\n- ArgsManagerHelper::GetNetBoolArg\n- ArgsManager::GetArgs\n- ArgsManager::IsArgNegated\n- ArgsManager::GetUnsuitableSectionOnlyArgs\n\nHaving settings merging code separated from parsing simplifies parsing somewhat\n(for example negated values can simply be represented as false values instead\nof partially cleared or emply placeholder lists).\n\nHaving settings merge happen one place instead of 5 makes it easier to add new\nsettings sources and harder to introduce new inconsistencies in the way\nsettings are merged.\n\nThis commit does not change behavior in any way.",
      "tree": {
        "sha": "a687d73e4cc320c7c4dee5dd96b1f99ce21c2122",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a687d73e4cc320c7c4dee5dd96b1f99ce21c2122"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7f40528cd50fc43ac0bd3e785de24d661adddb7a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f40528cd50fc43ac0bd3e785de24d661adddb7a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7f40528cd50fc43ac0bd3e785de24d661adddb7a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f40528cd50fc43ac0bd3e785de24d661adddb7a/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9dcb952fe5f85529ab28e091af7534e72c21c90f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9dcb952fe5f85529ab28e091af7534e72c21c90f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9dcb952fe5f85529ab28e091af7534e72c21c90f"
      }
    ],
    "stats": {
      "total": 442,
      "additions": 172,
      "deletions": 270
    },
    "files": [
      {
        "sha": "b9fcd97a8f4574ffb0d0354b66ab1920d3b8c3b8",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 51,
        "deletions": 44,
        "changes": 95,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7f40528cd50fc43ac0bd3e785de24d661adddb7a/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7f40528cd50fc43ac0bd3e785de24d661adddb7a/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=7f40528cd50fc43ac0bd3e785de24d661adddb7a",
        "patch": "@@ -17,6 +17,7 @@\n \n #include <stdint.h>\n #include <thread>\n+#include <univalue.h>\n #include <utility>\n #include <vector>\n #ifndef WIN32\n@@ -166,14 +167,12 @@ BOOST_AUTO_TEST_CASE(util_FormatISO8601Date)\n struct TestArgsManager : public ArgsManager\n {\n     TestArgsManager() { m_network_only_args.clear(); }\n-    std::map<std::string, std::vector<std::string> >& GetOverrideArgs() { return m_override_args; }\n-    std::map<std::string, std::vector<std::string> >& GetConfigArgs() { return m_config_args; }\n     void ReadConfigString(const std::string str_config)\n     {\n         std::istringstream streamConfig(str_config);\n         {\n             LOCK(cs_args);\n-            m_config_args.clear();\n+            m_settings.ro_config.clear();\n             m_config_sections.clear();\n         }\n         std::string error;\n@@ -193,6 +192,7 @@ struct TestArgsManager : public ArgsManager\n     using ArgsManager::ReadConfigStream;\n     using ArgsManager::cs_args;\n     using ArgsManager::m_network;\n+    using ArgsManager::m_settings;\n };\n \n BOOST_AUTO_TEST_CASE(util_ParseParameters)\n@@ -206,28 +206,29 @@ BOOST_AUTO_TEST_CASE(util_ParseParameters)\n     const char *argv_test[] = {\"-ignored\", \"-a\", \"-b\", \"-ccc=argument\", \"-ccc=multiple\", \"f\", \"-d=e\"};\n \n     std::string error;\n+    LOCK(testArgs.cs_args);\n     testArgs.SetupArgs({a, b, ccc, d});\n     BOOST_CHECK(testArgs.ParseParameters(0, (char**)argv_test, error));\n-    BOOST_CHECK(testArgs.GetOverrideArgs().empty() && testArgs.GetConfigArgs().empty());\n+    BOOST_CHECK(testArgs.m_settings.command_line_options.empty() && testArgs.m_settings.ro_config.empty());\n \n     BOOST_CHECK(testArgs.ParseParameters(1, (char**)argv_test, error));\n-    BOOST_CHECK(testArgs.GetOverrideArgs().empty() && testArgs.GetConfigArgs().empty());\n+    BOOST_CHECK(testArgs.m_settings.command_line_options.empty() && testArgs.m_settings.ro_config.empty());\n \n     BOOST_CHECK(testArgs.ParseParameters(7, (char**)argv_test, error));\n     // expectation: -ignored is ignored (program name argument),\n     // -a, -b and -ccc end up in map, -d ignored because it is after\n     // a non-option argument (non-GNU option parsing)\n-    BOOST_CHECK(testArgs.GetOverrideArgs().size() == 3 && testArgs.GetConfigArgs().empty());\n+    BOOST_CHECK(testArgs.m_settings.command_line_options.size() == 3 && testArgs.m_settings.ro_config.empty());\n     BOOST_CHECK(testArgs.IsArgSet(\"-a\") && testArgs.IsArgSet(\"-b\") && testArgs.IsArgSet(\"-ccc\")\n                 && !testArgs.IsArgSet(\"f\") && !testArgs.IsArgSet(\"-d\"));\n-    BOOST_CHECK(testArgs.GetOverrideArgs().count(\"-a\") && testArgs.GetOverrideArgs().count(\"-b\") && testArgs.GetOverrideArgs().count(\"-ccc\")\n-                && !testArgs.GetOverrideArgs().count(\"f\") && !testArgs.GetOverrideArgs().count(\"-d\"));\n-\n-    BOOST_CHECK(testArgs.GetOverrideArgs()[\"-a\"].size() == 1);\n-    BOOST_CHECK(testArgs.GetOverrideArgs()[\"-a\"].front() == \"\");\n-    BOOST_CHECK(testArgs.GetOverrideArgs()[\"-ccc\"].size() == 2);\n-    BOOST_CHECK(testArgs.GetOverrideArgs()[\"-ccc\"].front() == \"argument\");\n-    BOOST_CHECK(testArgs.GetOverrideArgs()[\"-ccc\"].back() == \"multiple\");\n+    BOOST_CHECK(testArgs.m_settings.command_line_options.count(\"a\") && testArgs.m_settings.command_line_options.count(\"b\") && testArgs.m_settings.command_line_options.count(\"ccc\")\n+                && !testArgs.m_settings.command_line_options.count(\"f\") && !testArgs.m_settings.command_line_options.count(\"d\"));\n+\n+    BOOST_CHECK(testArgs.m_settings.command_line_options[\"a\"].size() == 1);\n+    BOOST_CHECK(testArgs.m_settings.command_line_options[\"a\"].front().get_str() == \"\");\n+    BOOST_CHECK(testArgs.m_settings.command_line_options[\"ccc\"].size() == 2);\n+    BOOST_CHECK(testArgs.m_settings.command_line_options[\"ccc\"].front().get_str() == \"argument\");\n+    BOOST_CHECK(testArgs.m_settings.command_line_options[\"ccc\"].back().get_str() == \"multiple\");\n     BOOST_CHECK(testArgs.GetArgs(\"-ccc\").size() == 2);\n }\n \n@@ -298,6 +299,7 @@ BOOST_AUTO_TEST_CASE(util_GetBoolArg)\n     const char *argv_test[] = {\n         \"ignored\", \"-a\", \"-nob\", \"-c=0\", \"-d=1\", \"-e=false\", \"-f=true\"};\n     std::string error;\n+    LOCK(testArgs.cs_args);\n     testArgs.SetupArgs({a, b, c, d, e, f});\n     BOOST_CHECK(testArgs.ParseParameters(7, (char**)argv_test, error));\n \n@@ -306,8 +308,8 @@ BOOST_AUTO_TEST_CASE(util_GetBoolArg)\n         BOOST_CHECK(testArgs.IsArgSet({'-', opt}) || !opt);\n \n     // Nothing else should be in the map\n-    BOOST_CHECK(testArgs.GetOverrideArgs().size() == 6 &&\n-                testArgs.GetConfigArgs().empty());\n+    BOOST_CHECK(testArgs.m_settings.command_line_options.size() == 6 &&\n+                testArgs.m_settings.ro_config.empty());\n \n     // The -no prefix should get stripped on the way in.\n     BOOST_CHECK(!testArgs.IsArgSet(\"-nob\"));\n@@ -403,6 +405,7 @@ BOOST_AUTO_TEST_CASE(util_ReadConfigStream)\n        \"iii=2\\n\";\n \n     TestArgsManager test_args;\n+    LOCK(test_args.cs_args);\n     const auto a = std::make_pair(\"-a\", ArgsManager::ALLOW_BOOL);\n     const auto b = std::make_pair(\"-b\", ArgsManager::ALLOW_BOOL);\n     const auto ccc = std::make_pair(\"-ccc\", ArgsManager::ALLOW_STRING);\n@@ -419,22 +422,25 @@ BOOST_AUTO_TEST_CASE(util_ReadConfigStream)\n     // expectation: a, b, ccc, d, fff, ggg, h, i end up in map\n     // so do sec1.ccc, sec1.d, sec1.h, sec2.ccc, sec2.iii\n \n-    BOOST_CHECK(test_args.GetOverrideArgs().empty());\n-    BOOST_CHECK(test_args.GetConfigArgs().size() == 13);\n-\n-    BOOST_CHECK(test_args.GetConfigArgs().count(\"-a\")\n-                && test_args.GetConfigArgs().count(\"-b\")\n-                && test_args.GetConfigArgs().count(\"-ccc\")\n-                && test_args.GetConfigArgs().count(\"-d\")\n-                && test_args.GetConfigArgs().count(\"-fff\")\n-                && test_args.GetConfigArgs().count(\"-ggg\")\n-                && test_args.GetConfigArgs().count(\"-h\")\n-                && test_args.GetConfigArgs().count(\"-i\")\n+    BOOST_CHECK(test_args.m_settings.command_line_options.empty());\n+    BOOST_CHECK(test_args.m_settings.ro_config.size() == 3);\n+    BOOST_CHECK(test_args.m_settings.ro_config[\"\"].size() == 8);\n+    BOOST_CHECK(test_args.m_settings.ro_config[\"sec1\"].size() == 3);\n+    BOOST_CHECK(test_args.m_settings.ro_config[\"sec2\"].size() == 2);\n+\n+    BOOST_CHECK(test_args.m_settings.ro_config[\"\"].count(\"a\")\n+                && test_args.m_settings.ro_config[\"\"].count(\"b\")\n+                && test_args.m_settings.ro_config[\"\"].count(\"ccc\")\n+                && test_args.m_settings.ro_config[\"\"].count(\"d\")\n+                && test_args.m_settings.ro_config[\"\"].count(\"fff\")\n+                && test_args.m_settings.ro_config[\"\"].count(\"ggg\")\n+                && test_args.m_settings.ro_config[\"\"].count(\"h\")\n+                && test_args.m_settings.ro_config[\"\"].count(\"i\")\n                );\n-    BOOST_CHECK(test_args.GetConfigArgs().count(\"-sec1.ccc\")\n-                && test_args.GetConfigArgs().count(\"-sec1.h\")\n-                && test_args.GetConfigArgs().count(\"-sec2.ccc\")\n-                && test_args.GetConfigArgs().count(\"-sec2.iii\")\n+    BOOST_CHECK(test_args.m_settings.ro_config[\"sec1\"].count(\"ccc\")\n+                && test_args.m_settings.ro_config[\"sec1\"].count(\"h\")\n+                && test_args.m_settings.ro_config[\"sec2\"].count(\"ccc\")\n+                && test_args.m_settings.ro_config[\"sec2\"].count(\"iii\")\n                );\n \n     BOOST_CHECK(test_args.IsArgSet(\"-a\")\n@@ -573,24 +579,25 @@ BOOST_AUTO_TEST_CASE(util_ReadConfigStream)\n BOOST_AUTO_TEST_CASE(util_GetArg)\n {\n     TestArgsManager testArgs;\n-    testArgs.GetOverrideArgs().clear();\n-    testArgs.GetOverrideArgs()[\"strtest1\"] = {\"string...\"};\n+    LOCK(testArgs.cs_args);\n+    testArgs.m_settings.command_line_options.clear();\n+    testArgs.m_settings.command_line_options[\"strtest1\"] = {\"string...\"};\n     // strtest2 undefined on purpose\n-    testArgs.GetOverrideArgs()[\"inttest1\"] = {\"12345\"};\n-    testArgs.GetOverrideArgs()[\"inttest2\"] = {\"81985529216486895\"};\n+    testArgs.m_settings.command_line_options[\"inttest1\"] = {\"12345\"};\n+    testArgs.m_settings.command_line_options[\"inttest2\"] = {\"81985529216486895\"};\n     // inttest3 undefined on purpose\n-    testArgs.GetOverrideArgs()[\"booltest1\"] = {\"\"};\n+    testArgs.m_settings.command_line_options[\"booltest1\"] = {\"\"};\n     // booltest2 undefined on purpose\n-    testArgs.GetOverrideArgs()[\"booltest3\"] = {\"0\"};\n-    testArgs.GetOverrideArgs()[\"booltest4\"] = {\"1\"};\n+    testArgs.m_settings.command_line_options[\"booltest3\"] = {\"0\"};\n+    testArgs.m_settings.command_line_options[\"booltest4\"] = {\"1\"};\n \n     // priorities\n-    testArgs.GetOverrideArgs()[\"pritest1\"] = {\"a\", \"b\"};\n-    testArgs.GetConfigArgs()[\"pritest2\"] = {\"a\", \"b\"};\n-    testArgs.GetOverrideArgs()[\"pritest3\"] = {\"a\"};\n-    testArgs.GetConfigArgs()[\"pritest3\"] = {\"b\"};\n-    testArgs.GetOverrideArgs()[\"pritest4\"] = {\"a\",\"b\"};\n-    testArgs.GetConfigArgs()[\"pritest4\"] = {\"c\",\"d\"};\n+    testArgs.m_settings.command_line_options[\"pritest1\"] = {\"a\", \"b\"};\n+    testArgs.m_settings.ro_config[\"\"][\"pritest2\"] = {\"a\", \"b\"};\n+    testArgs.m_settings.command_line_options[\"pritest3\"] = {\"a\"};\n+    testArgs.m_settings.ro_config[\"\"][\"pritest3\"] = {\"b\"};\n+    testArgs.m_settings.command_line_options[\"pritest4\"] = {\"a\",\"b\"};\n+    testArgs.m_settings.ro_config[\"\"][\"pritest4\"] = {\"c\",\"d\"};\n \n     BOOST_CHECK_EQUAL(testArgs.GetArg(\"strtest1\", \"default\"), \"string...\");\n     BOOST_CHECK_EQUAL(testArgs.GetArg(\"strtest2\", \"default\"), \"default\");"
      },
      {
        "sha": "2a2ae6fdf532ade4414e3ce296f32e44b6504b51",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 119,
        "deletions": 224,
        "changes": 343,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7f40528cd50fc43ac0bd3e785de24d661adddb7a/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7f40528cd50fc43ac0bd3e785de24d661adddb7a/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=7f40528cd50fc43ac0bd3e785de24d661adddb7a",
        "patch": "@@ -63,6 +63,7 @@\n #endif\n \n #include <thread>\n+#include <univalue.h>\n \n // Application startup time (used for uptime calculation)\n const int64_t nStartupTime = GetTime();\n@@ -161,103 +162,25 @@ static bool InterpretBool(const std::string& strValue)\n     return (atoi(strValue) != 0);\n }\n \n+static std::string SettingName(const std::string& arg)\n+{\n+    return arg.size() > 0 && arg[0] == '-' ? arg.substr(1) : arg;\n+}\n+\n /** Internal helper functions for ArgsManager */\n class ArgsManagerHelper {\n public:\n-    typedef std::map<std::string, std::vector<std::string>> MapArgs;\n-\n     /** Determine whether to use config settings in the default section,\n      *  See also comments around ArgsManager::ArgsManager() below. */\n     static inline bool UseDefaultSection(const ArgsManager& am, const std::string& arg) EXCLUSIVE_LOCKS_REQUIRED(am.cs_args)\n     {\n         return (am.m_network == CBaseChainParams::MAIN || am.m_network_only_args.count(arg) == 0);\n     }\n \n-    /** Convert regular argument into the network-specific setting */\n-    static inline std::string NetworkArg(const ArgsManager& am, const std::string& arg)\n-    {\n-        assert(arg.length() > 1 && arg[0] == '-');\n-        return \"-\" + am.m_network + \".\" + arg.substr(1);\n-    }\n-\n-    /** Find arguments in a map and add them to a vector */\n-    static inline void AddArgs(std::vector<std::string>& res, const MapArgs& map_args, const std::string& arg)\n-    {\n-        auto it = map_args.find(arg);\n-        if (it != map_args.end()) {\n-            res.insert(res.end(), it->second.begin(), it->second.end());\n-        }\n-    }\n-\n-    /** Return true/false if an argument is set in a map, and also\n-     *  return the first (or last) of the possibly multiple values it has\n-     */\n-    static inline std::pair<bool,std::string> GetArgHelper(const MapArgs& map_args, const std::string& arg, bool getLast = false)\n-    {\n-        auto it = map_args.find(arg);\n-\n-        if (it == map_args.end() || it->second.empty()) {\n-            return std::make_pair(false, std::string());\n-        }\n-\n-        if (getLast) {\n-            return std::make_pair(true, it->second.back());\n-        } else {\n-            return std::make_pair(true, it->second.front());\n-        }\n-    }\n-\n-    /* Get the string value of an argument, returning a pair of a boolean\n-     * indicating the argument was found, and the value for the argument\n-     * if it was found (or the empty string if not found).\n-     */\n-    static inline std::pair<bool,std::string> GetArg(const ArgsManager &am, const std::string& arg)\n+    static util::SettingsValue Get(const ArgsManager& am, const std::string& arg)\n     {\n         LOCK(am.cs_args);\n-        std::pair<bool,std::string> found_result(false, std::string());\n-\n-        // We pass \"true\" to GetArgHelper in order to return the last\n-        // argument value seen from the command line (so \"bitcoind -foo=bar\n-        // -foo=baz\" gives GetArg(am,\"foo\")=={true,\"baz\"}\n-        found_result = GetArgHelper(am.m_override_args, arg, true);\n-        if (found_result.first) {\n-            return found_result;\n-        }\n-\n-        // But in contrast we return the first argument seen in a config file,\n-        // so \"foo=bar \\n foo=baz\" in the config file gives\n-        // GetArg(am,\"foo\")={true,\"bar\"}\n-        if (!am.m_network.empty()) {\n-            found_result = GetArgHelper(am.m_config_args, NetworkArg(am, arg));\n-            if (found_result.first) {\n-                return found_result;\n-            }\n-        }\n-\n-        if (UseDefaultSection(am, arg)) {\n-            found_result = GetArgHelper(am.m_config_args, arg);\n-            if (found_result.first) {\n-                return found_result;\n-            }\n-        }\n-\n-        return found_result;\n-    }\n-\n-    /* Special test for -testnet and -regtest args, because we\n-     * don't want to be confused by craziness like \"[regtest] testnet=1\"\n-     */\n-    static inline bool GetNetBoolArg(const ArgsManager &am, const std::string& net_arg) EXCLUSIVE_LOCKS_REQUIRED(am.cs_args)\n-    {\n-        std::pair<bool,std::string> found_result(false,std::string());\n-        found_result = GetArgHelper(am.m_override_args, net_arg, true);\n-        if (!found_result.first) {\n-            found_result = GetArgHelper(am.m_config_args, net_arg, true);\n-            if (!found_result.first) {\n-                return false; // not set\n-            }\n-        }\n-        return InterpretBool(found_result.second); // is set, so evaluate\n+        return GetSetting(am.m_settings, am.m_network, SettingName(arg), !UseDefaultSection(am, arg), /* get_chain_name= */ false);\n     }\n };\n \n@@ -268,48 +191,52 @@ class ArgsManagerHelper {\n  * checks whether there was a double-negative (-nofoo=0 -> -foo=1).\n  *\n  * If there was not a double negative, it removes the \"no\" from the key\n- * and clears the args vector to indicate a negated option.\n+ * and returns false.\n  *\n- * If there was a double negative, it removes \"no\" from the key, sets the\n- * value to \"1\" and pushes the key and the updated value to the args vector.\n+ * If there was a double negative, it removes \"no\" from the key, and\n+ * returns true.\n  *\n- * If there was no \"no\", it leaves key and value untouched and pushes them\n- * to the args vector.\n+ * If there was no \"no\", it returns the string value untouched.\n  *\n  * Where an option was negated can be later checked using the\n  * IsArgNegated() method. One use case for this is to have a way to disable\n  * options that are not normally boolean (e.g. using -nodebuglogfile to request\n  * that debug log output is not sent to any file at all).\n  */\n \n-NODISCARD static bool InterpretOption(std::string key, std::string val, unsigned int flags,\n-                                      std::map<std::string, std::vector<std::string>>& args,\n-                                      std::string& error)\n+static util::SettingsValue InterpretOption(std::string& section, std::string& key, const std::string& value)\n {\n-    assert(key[0] == '-');\n-\n+    // Split section name from key name for keys like \"testnet.foo\" or \"regtest.bar\"\n     size_t option_index = key.find('.');\n-    if (option_index == std::string::npos) {\n-        option_index = 1;\n-    } else {\n-        ++option_index;\n+    if (option_index != std::string::npos) {\n+        section = key.substr(0, option_index);\n+        key.erase(0, option_index + 1);\n     }\n-    if (key.substr(option_index, 2) == \"no\") {\n-        key.erase(option_index, 2);\n-        if (flags & ArgsManager::ALLOW_BOOL) {\n-            if (InterpretBool(val)) {\n-                args[key].clear();\n-                return true;\n-            }\n-            // Double negatives like -nofoo=0 are supported (but discouraged)\n-            LogPrintf(\"Warning: parsed potentially confusing double-negative %s=%s\\n\", key, val);\n-            val = \"1\";\n-        } else {\n-            error = strprintf(\"Negating of %s is meaningless and therefore forbidden\", key);\n-            return false;\n+    if (key.substr(0, 2) == \"no\") {\n+        key.erase(0, 2);\n+        // Double negatives like -nofoo=0 are supported (but discouraged)\n+        if (!InterpretBool(value)) {\n+            LogPrintf(\"Warning: parsed potentially confusing double-negative -%s=%s\\n\", key, value);\n+            return true;\n         }\n+        return false;\n+    }\n+    return value;\n+}\n+\n+/**\n+ * Check settings value validity according to flags.\n+ *\n+ * TODO: Add more meaningful error checks here in the future\n+ * See \"here's how the flags are meant to behave\" in\n+ * https://github.com/bitcoin/bitcoin/pull/16097#issuecomment-514627823\n+ */\n+static bool CheckValid(const std::string& key, const util::SettingsValue& val, unsigned int flags, std::string& error)\n+{\n+    if (val.isBool() && !(flags & ArgsManager::ALLOW_BOOL)) {\n+        error = strprintf(\"Negating of -%s is meaningless and therefore forbidden\", key);\n+        return false;\n     }\n-    args[key].push_back(val);\n     return true;\n }\n \n@@ -331,22 +258,9 @@ const std::set<std::string> ArgsManager::GetUnsuitableSectionOnlyArgs() const\n     if (m_network == CBaseChainParams::MAIN) return std::set<std::string> {};\n \n     for (const auto& arg : m_network_only_args) {\n-        std::pair<bool, std::string> found_result;\n-\n-        // if this option is overridden it's fine\n-        found_result = ArgsManagerHelper::GetArgHelper(m_override_args, arg);\n-        if (found_result.first) continue;\n-\n-        // if there's a network-specific value for this option, it's fine\n-        found_result = ArgsManagerHelper::GetArgHelper(m_config_args, ArgsManagerHelper::NetworkArg(*this, arg));\n-        if (found_result.first) continue;\n-\n-        // if there isn't a default value for this option, it's fine\n-        found_result = ArgsManagerHelper::GetArgHelper(m_config_args, arg);\n-        if (!found_result.first) continue;\n-\n-        // otherwise, issue a warning\n-        unsuitables.insert(arg);\n+        if (OnlyHasDefaultSectionSetting(m_settings, m_network, SettingName(arg))) {\n+            unsuitables.insert(arg);\n+        }\n     }\n     return unsuitables;\n }\n@@ -375,7 +289,7 @@ void ArgsManager::SelectConfigNetwork(const std::string& network)\n bool ArgsManager::ParseParameters(int argc, const char* const argv[], std::string& error)\n {\n     LOCK(cs_args);\n-    m_override_args.clear();\n+    m_settings.command_line_options.clear();\n \n     for (int i = 1; i < argc; i++) {\n         std::string key(argv[i]);\n@@ -408,49 +322,44 @@ bool ArgsManager::ParseParameters(int argc, const char* const argv[], std::strin\n         if (key.length() > 1 && key[1] == '-')\n             key.erase(0, 1);\n \n+        // Transform -foo to foo\n+        key.erase(0, 1);\n+        std::string section;\n+        util::SettingsValue value = InterpretOption(section, key, val);\n         const unsigned int flags = FlagsOfKnownArg(key);\n         if (flags) {\n-            if (!InterpretOption(key, val, flags, m_override_args, error)) {\n+            if (!CheckValid(key, value, flags, error)) {\n                 return false;\n             }\n+            // Weird behavior preserved for backwards compatibility: command\n+            // line options with section prefixes are allowed but ignored. It\n+            // would be better if these options triggered the Invalid parameter\n+            // error below.\n+            if (section.empty()) {\n+                m_settings.command_line_options[key].push_back(value);\n+            }\n         } else {\n-            error = strprintf(\"Invalid parameter %s\", key);\n+            error = strprintf(\"Invalid parameter -%s\", key);\n             return false;\n         }\n     }\n \n     // we do not allow -includeconf from command line, so we clear it here\n-    auto it = m_override_args.find(\"-includeconf\");\n-    if (it != m_override_args.end()) {\n-        if (it->second.size() > 0) {\n-            for (const auto& ic : it->second) {\n-                error += \"-includeconf cannot be used from commandline; -includeconf=\" + ic + \"\\n\";\n-            }\n-            return false;\n+    bool success = true;\n+    if (auto* includes = util::FindKey(m_settings.command_line_options, \"includeconf\")) {\n+        for (const auto& include : util::SettingsSpan(*includes)) {\n+            error += \"-includeconf cannot be used from commandline; -includeconf=\" + include.get_str() + \"\\n\";\n+            success = false;\n         }\n     }\n-    return true;\n+    return success;\n }\n \n unsigned int ArgsManager::FlagsOfKnownArg(const std::string& key) const\n {\n-    assert(key[0] == '-');\n-\n-    size_t option_index = key.find('.');\n-    if (option_index == std::string::npos) {\n-        option_index = 1;\n-    } else {\n-        ++option_index;\n-    }\n-    if (key.substr(option_index, 2) == \"no\") {\n-        option_index += 2;\n-    }\n-\n-    const std::string base_arg_name = '-' + key.substr(option_index);\n-\n     LOCK(cs_args);\n     for (const auto& arg_map : m_available_args) {\n-        const auto search = arg_map.second.find(base_arg_name);\n+        const auto search = arg_map.second.find('-' + key);\n         if (search != arg_map.second.end()) {\n             return search->second.m_flags;\n         }\n@@ -460,69 +369,42 @@ unsigned int ArgsManager::FlagsOfKnownArg(const std::string& key) const\n \n std::vector<std::string> ArgsManager::GetArgs(const std::string& strArg) const\n {\n-    std::vector<std::string> result = {};\n-    if (IsArgNegated(strArg)) return result; // special case\n-\n     LOCK(cs_args);\n-\n-    ArgsManagerHelper::AddArgs(result, m_override_args, strArg);\n-    if (!m_network.empty()) {\n-        ArgsManagerHelper::AddArgs(result, m_config_args, ArgsManagerHelper::NetworkArg(*this, strArg));\n-    }\n-\n-    if (ArgsManagerHelper::UseDefaultSection(*this, strArg)) {\n-        ArgsManagerHelper::AddArgs(result, m_config_args, strArg);\n+    bool ignore_default_section_config = !ArgsManagerHelper::UseDefaultSection(*this, strArg);\n+    std::vector<std::string> result;\n+    for (const util::SettingsValue& value :\n+        util::GetSettingsList(m_settings, m_network, SettingName(strArg), ignore_default_section_config)) {\n+        result.push_back(value.isFalse() ? \"0\" : value.isTrue() ? \"1\" : value.get_str());\n     }\n-\n     return result;\n }\n \n bool ArgsManager::IsArgSet(const std::string& strArg) const\n {\n-    if (IsArgNegated(strArg)) return true; // special case\n-    return ArgsManagerHelper::GetArg(*this, strArg).first;\n+    return !ArgsManagerHelper::Get(*this, strArg).isNull();\n }\n \n bool ArgsManager::IsArgNegated(const std::string& strArg) const\n {\n-    LOCK(cs_args);\n-\n-    const auto& ov = m_override_args.find(strArg);\n-    if (ov != m_override_args.end()) return ov->second.empty();\n-\n-    if (!m_network.empty()) {\n-        const auto& cfs = m_config_args.find(ArgsManagerHelper::NetworkArg(*this, strArg));\n-        if (cfs != m_config_args.end()) return cfs->second.empty();\n-    }\n-\n-    const auto& cf = m_config_args.find(strArg);\n-    if (cf != m_config_args.end()) return cf->second.empty();\n-\n-    return false;\n+    return ArgsManagerHelper::Get(*this, strArg).isFalse();\n }\n \n std::string ArgsManager::GetArg(const std::string& strArg, const std::string& strDefault) const\n {\n-    if (IsArgNegated(strArg)) return \"0\";\n-    std::pair<bool,std::string> found_res = ArgsManagerHelper::GetArg(*this, strArg);\n-    if (found_res.first) return found_res.second;\n-    return strDefault;\n+    const util::SettingsValue value = ArgsManagerHelper::Get(*this, strArg);\n+    return value.isNull() ? strDefault : value.isFalse() ? \"0\" : value.isTrue() ? \"1\" : value.get_str();\n }\n \n int64_t ArgsManager::GetArg(const std::string& strArg, int64_t nDefault) const\n {\n-    if (IsArgNegated(strArg)) return 0;\n-    std::pair<bool,std::string> found_res = ArgsManagerHelper::GetArg(*this, strArg);\n-    if (found_res.first) return atoi64(found_res.second);\n-    return nDefault;\n+    const util::SettingsValue value = ArgsManagerHelper::Get(*this, strArg);\n+    return value.isNull() ? nDefault : value.isFalse() ? 0 : value.isTrue() ? 1 : value.isNum() ? value.get_int64() : atoi64(value.get_str());\n }\n \n bool ArgsManager::GetBoolArg(const std::string& strArg, bool fDefault) const\n {\n-    if (IsArgNegated(strArg)) return false;\n-    std::pair<bool,std::string> found_res = ArgsManagerHelper::GetArg(*this, strArg);\n-    if (found_res.first) return InterpretBool(found_res.second);\n-    return fDefault;\n+    const util::SettingsValue value = ArgsManagerHelper::Get(*this, strArg);\n+    return value.isNull() ? fDefault : value.isBool() ? value.get_bool() : InterpretBool(value.get_str());\n }\n \n bool ArgsManager::SoftSetArg(const std::string& strArg, const std::string& strValue)\n@@ -544,7 +426,7 @@ bool ArgsManager::SoftSetBoolArg(const std::string& strArg, bool fValue)\n void ArgsManager::ForceSetArg(const std::string& strArg, const std::string& strValue)\n {\n     LOCK(cs_args);\n-    m_override_args[strArg] = {strValue};\n+    m_settings.forced_settings[SettingName(strArg)] = strValue;\n }\n \n void ArgsManager::AddArg(const std::string& name, const std::string& help, unsigned int flags, const OptionsCategory& cat)\n@@ -860,12 +742,15 @@ bool ArgsManager::ReadConfigStream(std::istream& stream, const std::string& file\n         return false;\n     }\n     for (const std::pair<std::string, std::string>& option : options) {\n-        const std::string strKey = std::string(\"-\") + option.first;\n-        const unsigned int flags = FlagsOfKnownArg(strKey);\n+        std::string section;\n+        std::string key = option.first;\n+        util::SettingsValue value = InterpretOption(section, key, option.second);\n+        const unsigned int flags = FlagsOfKnownArg(key);\n         if (flags) {\n-            if (!InterpretOption(strKey, option.second, flags, m_config_args, error)) {\n+            if (!CheckValid(key, value, flags, error)) {\n                 return false;\n             }\n+            m_settings.ro_config[section][key].push_back(value);\n         } else {\n             if (ignore_invalid_keys) {\n                 LogPrintf(\"Ignoring unknown configuration value %s\\n\", option.first);\n@@ -882,7 +767,7 @@ bool ArgsManager::ReadConfigFiles(std::string& error, bool ignore_invalid_keys)\n {\n     {\n         LOCK(cs_args);\n-        m_config_args.clear();\n+        m_settings.ro_config.clear();\n         m_config_sections.clear();\n     }\n \n@@ -899,30 +784,34 @@ bool ArgsManager::ReadConfigFiles(std::string& error, bool ignore_invalid_keys)\n         bool use_conf_file{true};\n         {\n             LOCK(cs_args);\n-            auto it = m_override_args.find(\"-includeconf\");\n-            if (it != m_override_args.end()) {\n+            if (auto* includes = util::FindKey(m_settings.command_line_options, \"includeconf\")) {\n                 // ParseParameters() fails if a non-negated -includeconf is passed on the command-line\n-                assert(it->second.empty());\n+                assert(util::SettingsSpan(*includes).last_negated());\n                 use_conf_file = false;\n             }\n         }\n         if (use_conf_file) {\n             std::string chain_id = GetChainName();\n-            std::vector<std::string> conf_file_names(GetArgs(\"-includeconf\"));\n-            {\n-                // We haven't set m_network yet (that happens in SelectParams()), so manually check\n-                // for network.includeconf args.\n-                std::vector<std::string> includeconf_net(GetArgs(std::string(\"-\") + chain_id + \".includeconf\"));\n-                conf_file_names.insert(conf_file_names.end(), includeconf_net.begin(), includeconf_net.end());\n-            }\n+            std::vector<std::string> conf_file_names;\n \n-            // Remove -includeconf from configuration, so we can warn about recursion\n-            // later\n-            {\n+            auto add_includes = [&](const std::string& network, size_t skip = 0) {\n+                size_t num_values = 0;\n                 LOCK(cs_args);\n-                m_config_args.erase(\"-includeconf\");\n-                m_config_args.erase(std::string(\"-\") + chain_id + \".includeconf\");\n-            }\n+                if (auto* section = util::FindKey(m_settings.ro_config, network)) {\n+                    if (auto* values = util::FindKey(*section, \"includeconf\")) {\n+                        for (size_t i = std::max(skip, util::SettingsSpan(*values).negated()); i < values->size(); ++i) {\n+                            conf_file_names.push_back((*values)[i].get_str());\n+                        }\n+                        num_values = values->size();\n+                    }\n+                }\n+                return num_values;\n+            };\n+\n+            // We haven't set m_network yet (that happens in SelectParams()), so manually check\n+            // for network.includeconf args.\n+            const size_t chain_includes = add_includes(chain_id);\n+            const size_t default_includes = add_includes({});\n \n             for (const std::string& conf_file_name : conf_file_names) {\n                 fsbridge::ifstream conf_file_stream(GetConfigFile(conf_file_name));\n@@ -938,14 +827,13 @@ bool ArgsManager::ReadConfigFiles(std::string& error, bool ignore_invalid_keys)\n             }\n \n             // Warn about recursive -includeconf\n-            conf_file_names = GetArgs(\"-includeconf\");\n-            std::vector<std::string> includeconf_net(GetArgs(std::string(\"-\") + chain_id + \".includeconf\"));\n-            conf_file_names.insert(conf_file_names.end(), includeconf_net.begin(), includeconf_net.end());\n+            conf_file_names.clear();\n+            add_includes(chain_id, /* skip= */ chain_includes);\n+            add_includes({}, /* skip= */ default_includes);\n             std::string chain_id_final = GetChainName();\n             if (chain_id_final != chain_id) {\n                 // Also warn about recursive includeconf for the chain that was specified in one of the includeconfs\n-                includeconf_net = GetArgs(std::string(\"-\") + chain_id_final + \".includeconf\");\n-                conf_file_names.insert(conf_file_names.end(), includeconf_net.begin(), includeconf_net.end());\n+                add_includes(chain_id_final);\n             }\n             for (const std::string& conf_file_name : conf_file_names) {\n                 tfm::format(std::cerr, \"warning: -includeconf cannot be used from included files; ignoring -includeconf=%s\\n\", conf_file_name);\n@@ -964,9 +852,16 @@ bool ArgsManager::ReadConfigFiles(std::string& error, bool ignore_invalid_keys)\n \n std::string ArgsManager::GetChainName() const\n {\n-    LOCK(cs_args);\n-    const bool fRegTest = ArgsManagerHelper::GetNetBoolArg(*this, \"-regtest\");\n-    const bool fTestNet = ArgsManagerHelper::GetNetBoolArg(*this, \"-testnet\");\n+    auto get_net = [&](const std::string& arg) {\n+        LOCK(cs_args);\n+        util::SettingsValue value = GetSetting(m_settings, /* section= */ \"\", SettingName(arg),\n+                                               /* ignore_default_section_config= */ false,\n+                                               /* get_chain_name= */ true);\n+        return value.isNull() ? false : value.isBool() ? value.get_bool() : InterpretBool(value.get_str());\n+    };\n+\n+    const bool fRegTest = get_net(\"-regtest\");\n+    const bool fTestNet = get_net(\"-testnet\");\n     const bool is_chain_arg_set = IsArgSet(\"-chain\");\n \n     if ((int)is_chain_arg_set + (int)fRegTest + (int)fTestNet > 1) {"
      },
      {
        "sha": "e0b6371dc998b10a13c2809398eb0df8b299654a",
        "filename": "src/util/system.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7f40528cd50fc43ac0bd3e785de24d661adddb7a/src/util/system.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7f40528cd50fc43ac0bd3e785de24d661adddb7a/src/util/system.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.h?ref=7f40528cd50fc43ac0bd3e785de24d661adddb7a",
        "patch": "@@ -22,6 +22,7 @@\n #include <sync.h>\n #include <tinyformat.h>\n #include <util/memory.h>\n+#include <util/settings.h>\n #include <util/threadnames.h>\n #include <util/time.h>\n \n@@ -157,8 +158,7 @@ class ArgsManager\n     };\n \n     mutable CCriticalSection cs_args;\n-    std::map<std::string, std::vector<std::string>> m_override_args GUARDED_BY(cs_args);\n-    std::map<std::string, std::vector<std::string>> m_config_args GUARDED_BY(cs_args);\n+    util::Settings m_settings GUARDED_BY(cs_args);\n     std::string m_network GUARDED_BY(cs_args);\n     std::set<std::string> m_network_only_args GUARDED_BY(cs_args);\n     std::map<OptionsCategory, std::map<std::string, Arg>> m_available_args GUARDED_BY(cs_args);"
      }
    ]
  },
  {
    "sha": "083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowODNjOTU0YjAyYTRlN2QwNzA4MzQ5ZWVhZjNiYWMyYjU5NDdmYjBl",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-05-06T19:31:18Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-11-08T03:08:22Z"
      },
      "message": "Add settings_tests\n\nCo-authored-by: James O'Beirne <james.obeirne@gmail.com>",
      "tree": {
        "sha": "c63977226ee809ef74b5cc2f2a9000557a09938a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c63977226ee809ef74b5cc2f2a9000557a09938a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/083c954b02a4e7d0708349eeaf3bac2b5947fb0e/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7f40528cd50fc43ac0bd3e785de24d661adddb7a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f40528cd50fc43ac0bd3e785de24d661adddb7a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7f40528cd50fc43ac0bd3e785de24d661adddb7a"
      }
    ],
    "stats": {
      "total": 164,
      "additions": 164,
      "deletions": 0
    },
    "files": [
      {
        "sha": "dd1ade54964c089f46036fa247e58f7461f1df11",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/083c954b02a4e7d0708349eeaf3bac2b5947fb0e/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/083c954b02a4e7d0708349eeaf3bac2b5947fb0e/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
        "patch": "@@ -152,6 +152,7 @@ BITCOIN_TESTS =\\\n   test/script_standard_tests.cpp \\\n   test/scriptnum_tests.cpp \\\n   test/serialize_tests.cpp \\\n+  test/settings_tests.cpp \\\n   test/sighash_tests.cpp \\\n   test/sigopcount_tests.cpp \\\n   test/skiplist_tests.cpp \\"
      },
      {
        "sha": "b0ee76ea6b137017c09d18bd6d87ae260af19c26",
        "filename": "src/test/settings_tests.cpp",
        "status": "added",
        "additions": 163,
        "deletions": 0,
        "changes": 163,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/083c954b02a4e7d0708349eeaf3bac2b5947fb0e/src/test/settings_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/083c954b02a4e7d0708349eeaf3bac2b5947fb0e/src/test/settings_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/settings_tests.cpp?ref=083c954b02a4e7d0708349eeaf3bac2b5947fb0e",
        "patch": "@@ -0,0 +1,163 @@\n+// Copyright (c) 2011-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/settings.h>\n+\n+#include <test/util.h>\n+#include <test/util/setup_common.h>\n+\n+#include <boost/test/unit_test.hpp>\n+#include <univalue.h>\n+#include <util/strencodings.h>\n+#include <vector>\n+\n+BOOST_FIXTURE_TEST_SUITE(settings_tests, BasicTestingSetup)\n+\n+//! Check settings struct contents against expected json strings.\n+static void CheckValues(const util::Settings& settings, const std::string& single_val, const std::string& list_val)\n+{\n+    util::SettingsValue single_value = GetSetting(settings, \"section\", \"name\", false, false);\n+    util::SettingsValue list_value(util::SettingsValue::VARR);\n+    for (const auto& item : GetSettingsList(settings, \"section\", \"name\", false)) {\n+        list_value.push_back(item);\n+    }\n+    BOOST_CHECK_EQUAL(single_value.write().c_str(), single_val);\n+    BOOST_CHECK_EQUAL(list_value.write().c_str(), list_val);\n+};\n+\n+// Simple settings merge test case.\n+BOOST_AUTO_TEST_CASE(Simple)\n+{\n+    util::Settings settings;\n+    settings.command_line_options[\"name\"].push_back(\"val1\");\n+    settings.command_line_options[\"name\"].push_back(\"val2\");\n+    settings.ro_config[\"section\"][\"name\"].push_back(2);\n+\n+    // The last given arg takes precedence when specified via commandline.\n+    CheckValues(settings, R\"(\"val2\")\", R\"([\"val1\",\"val2\",2])\");\n+\n+    util::Settings settings2;\n+    settings2.ro_config[\"section\"][\"name\"].push_back(\"val2\");\n+    settings2.ro_config[\"section\"][\"name\"].push_back(\"val3\");\n+\n+    // The first given arg takes precedence when specified via config file.\n+    CheckValues(settings2, R\"(\"val2\")\", R\"([\"val2\",\"val3\"])\");\n+}\n+\n+// Test different ways settings can be merged, and verify results. This test can\n+// be used to confirm that updates to settings code don't change behavior\n+// unintentionally.\n+struct MergeTestingSetup : public BasicTestingSetup {\n+    //! Max number of actions to sequence together. Can decrease this when\n+    //! debugging to make test results easier to understand.\n+    static constexpr int MAX_ACTIONS = 3;\n+\n+    enum Action { END, SET, NEGATE, SECTION_SET, SECTION_NEGATE };\n+    using ActionList = Action[MAX_ACTIONS];\n+\n+    //! Enumerate all possible test configurations.\n+    template <typename Fn>\n+    void ForEachMergeSetup(Fn&& fn)\n+    {\n+        ActionList arg_actions = {};\n+        // command_line_options do not have sections. Only iterate over SET and NEGATE\n+        ForEachNoDup(arg_actions, SET, NEGATE, [&]{\n+            ActionList conf_actions = {};\n+            ForEachNoDup(conf_actions, SET, SECTION_NEGATE, [&]{\n+                for (bool force_set : {false, true}) {\n+                    for (bool ignore_default_section_config : {false, true}) {\n+                        fn(arg_actions, conf_actions, force_set, ignore_default_section_config);\n+                    }\n+                }\n+            });\n+        });\n+    }\n+};\n+\n+// Regression test covering different ways config settings can be merged. The\n+// test parses and merges settings, representing the results as strings that get\n+// compared against an expected hash. To debug, the result strings can be dumped\n+// to a file (see comments below).\n+BOOST_FIXTURE_TEST_CASE(Merge, MergeTestingSetup)\n+{\n+    CHash256 out_sha;\n+    FILE* out_file = nullptr;\n+    if (const char* out_path = getenv(\"SETTINGS_MERGE_TEST_OUT\")) {\n+        out_file = fsbridge::fopen(out_path, \"w\");\n+        if (!out_file) throw std::system_error(errno, std::generic_category(), \"fopen failed\");\n+    }\n+\n+    const std::string& network = CBaseChainParams::MAIN;\n+    ForEachMergeSetup([&](const ActionList& arg_actions, const ActionList& conf_actions, bool force_set,\n+                          bool ignore_default_section_config) {\n+        std::string desc;\n+        int value_suffix = 0;\n+        util::Settings settings;\n+\n+        const std::string& name = ignore_default_section_config ? \"wallet\" : \"server\";\n+        auto push_values = [&](Action action, const char* value_prefix, const std::string& name_prefix,\n+                               std::vector<util::SettingsValue>& dest) {\n+            if (action == SET || action == SECTION_SET) {\n+                for (int i = 0; i < 2; ++i) {\n+                    dest.push_back(value_prefix + std::to_string(++value_suffix));\n+                    desc += \" \" + name_prefix + name + \"=\" + dest.back().get_str();\n+                }\n+            } else if (action == NEGATE || action == SECTION_NEGATE) {\n+                dest.push_back(false);\n+                desc += \" \" + name_prefix + \"no\" + name;\n+            }\n+        };\n+\n+        if (force_set) {\n+            settings.forced_settings[name] = \"forced\";\n+            desc += \" \" + name + \"=forced\";\n+        }\n+        for (Action arg_action : arg_actions) {\n+            push_values(arg_action, \"a\", \"-\", settings.command_line_options[name]);\n+        }\n+        for (Action conf_action : conf_actions) {\n+            bool use_section = conf_action == SECTION_SET || conf_action == SECTION_NEGATE;\n+            push_values(conf_action, \"c\", use_section ? network + \".\" : \"\",\n+                settings.ro_config[use_section ? network : \"\"][name]);\n+        }\n+\n+        desc += \" || \";\n+        desc += GetSetting(settings, network, name, ignore_default_section_config, /* get_chain_name= */ false).write();\n+        desc += \" |\";\n+        for (const auto& s : GetSettingsList(settings, network, name, ignore_default_section_config)) {\n+            desc += \" \";\n+            desc += s.write();\n+        }\n+        desc += \" |\";\n+        if (OnlyHasDefaultSectionSetting(settings, network, name)) desc += \" ignored\";\n+        desc += \"\\n\";\n+\n+        out_sha.Write((const unsigned char*)desc.data(), desc.size());\n+        if (out_file) {\n+            BOOST_REQUIRE(fwrite(desc.data(), 1, desc.size(), out_file) == desc.size());\n+        }\n+    });\n+\n+    if (out_file) {\n+        if (fclose(out_file)) throw std::system_error(errno, std::generic_category(), \"fclose failed\");\n+        out_file = nullptr;\n+    }\n+\n+    unsigned char out_sha_bytes[CSHA256::OUTPUT_SIZE];\n+    out_sha.Finalize(out_sha_bytes);\n+    std::string out_sha_hex = HexStr(std::begin(out_sha_bytes), std::end(out_sha_bytes));\n+\n+    // If check below fails, should manually dump the results with:\n+    //\n+    //   SETTINGS_MERGE_TEST_OUT=results.txt ./test_bitcoin --run_test=settings_tests/Merge\n+    //\n+    // And verify diff against previous results to make sure the changes are expected.\n+    //\n+    // Results file is formatted like:\n+    //\n+    //   <input> || GetSetting() | GetSettingsList() | OnlyHasDefaultSectionSetting()\n+    BOOST_CHECK_EQUAL(out_sha_hex, \"79db02d74e3e193196541b67c068b40ebd0c124a24b3ecbe9cbf7e85b1c4ba7a\");\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  }
]