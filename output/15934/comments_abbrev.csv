DrahtBot,2019-05-02 00:43:36,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#17385](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17385.html) (WIP: refactor: Use our own integer parsing/",https://github.com/bitcoin/bitcoin/pull/15934#issuecomment-488521831,488521831,
ryanofsky,2019-05-08 20:45:53,"re: https://github.com/bitcoin/bitcoin/pull/15934#pullrequestreview-232997353 from promag\n\n> I had a refactor (which I did't submit) that supported chaining ArgsManager. The idea was to support changing some args when calling some RPC, so a ArgsManager is created with the ""overridden"" args and passed thru. Is this something you are considering supporting or do you see a different approach?\n",https://github.com/bitcoin/bitcoin/pull/15934#issuecomment-490644550,490644550,
fanquake,2019-05-24 13:58:49,Concept ACK,https://github.com/bitcoin/bitcoin/pull/15934#issuecomment-495641177,495641177,
jamesob,2019-05-29 18:25:42,re-tACK https://github.com/bitcoin/bitcoin/pull/15934/commits/955c782eb776669576a798122da6557fcca8ee39 based on [the interdiff]( https://gist.github.com/jamesob/d8a458334386ab67082956e404fb704d) and running an abbreviated version of the testing above.,https://github.com/bitcoin/bitcoin/pull/15934#issuecomment-497054493,497054493,
ryanofsky,2019-06-27 20:49:15,"Rebased 955c782eb776669576a798122da6557fcca8ee39 -> 14a6dfcb929d2313577788765f7dc47dd98afbe9 ([pr/mergeset.8](https://github.com/ryanofsky/bitcoin/commits/pr/mergeset.8) -> [pr/mergeset.9](https://github.com/ryanofsky/bitcoin/commits/pr/mergeset.9)) due to conflict with #16278\n",https://github.com/bitcoin/bitcoin/pull/15934#issuecomment-506505636,506505636,
jamesob,2019-06-27 21:29:17,reACK https://github.com/bitcoin/bitcoin/pull/15934/commits/14a6dfcb929d2313577788765f7dc47dd98afbe9 based on [interdiff](https://gist.github.com/jamesob/0b4adf37c627e6171c2599dfa95f0901). Only change since `pr/mergeset.8` is a [trivial `LogPrintf` fix](https://gist.github.com/jamesob/0b4adf37c627e6171c2599dfa95f0901#file-8-to-9-diff-L72-L73). ,https://github.com/bitcoin/bitcoin/pull/15934#issuecomment-506518739,506518739,
ryanofsky,2019-06-28 16:34:41,"Rebased 14a6dfcb929d2313577788765f7dc47dd98afbe9 -> d074e431b76f156e94eb7ed2601d5af4fb65c6cb ([pr/mergeset.9](https://github.com/ryanofsky/bitcoin/commits/pr/mergeset.9) -> [pr/mergeset.10](https://github.com/ryanofsky/bitcoin/commits/pr/mergeset.10)) due to conflict with #16300\n",https://github.com/bitcoin/bitcoin/pull/15934#issuecomment-506797780,506797780,
jamesob,2019-06-28 17:34:09,reACK d074e431b76f156e94eb7ed2601d5af4fb65c6cb based on [an empty interdiff](https://gist.github.com/jamesob/fea5597b189e899154e1e9a9bdca0d94).,https://github.com/bitcoin/bitcoin/pull/15934#issuecomment-506816948,506816948,
hebasto,2019-07-31 10:28:09,Concept ACK.,https://github.com/bitcoin/bitcoin/pull/15934#issuecomment-516792401,516792401,
ryanofsky,2019-10-18 16:02:04,"Updated 61e034f1f6b3beeeed51ef8aaf7762f9244a7c8f -> 40593ecc0bc48b22054da73eb4bdf1b3aeaedd4f ([pr/mergeset.15](https://github.com/ryanofsky/bitcoin/commits/pr/mergeset.15) -> [pr/mergeset.16](https://github.com/ryanofsky/bitcoin/commits/pr/mergeset.16), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/mergeset.15..pr/mergeset.16)) just updating some comments discussed above and passing by",https://github.com/bitcoin/bitcoin/pull/15934#issuecomment-543811060,543811060,
ryanofsky,2019-10-23 17:32:07,"Updated 40593ecc0bc48b22054da73eb4bdf1b3aeaedd4f -> 8ca6338e994000c82c813721c85ebafd61250641 ([pr/mergeset.16](https://github.com/ryanofsky/bitcoin/commits/pr/mergeset.16) -> [pr/mergeset.17](https://github.com/ryanofsky/bitcoin/commits/pr/mergeset.17), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/mergeset.16..pr/mergeset.17)) with minor cleanups\n\nSorry for the churn. Only changes",https://github.com/bitcoin/bitcoin/pull/15934#issuecomment-545553236,545553236,
fjahr,2019-10-23 23:17:13,"ACK 86aff9bda31c9d60cc477700da4600ad5930bcda\n\nConfirmed that diff is only fixing nits as discussed in reviews. Re-ran tests. Some manual testing.",https://github.com/bitcoin/bitcoin/pull/15934#issuecomment-545675250,545675250,
ryanofsky,2019-10-25 19:20:31,"Updated fdae2210f458d2c4a74fe0c079501bed39ec6404 -> e18bf8dd30259f5c5ca63fdacadebd8b28acb2cc ([pr/mergeset.19](https://github.com/ryanofsky/bitcoin/commits/pr/mergeset.19) -> [pr/mergeset.20](https://github.com/ryanofsky/bitcoin/commits/pr/mergeset.20), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/mergeset.19..pr/mergeset.20)) with test simplifications suggested by @jnewbery removing ",https://github.com/bitcoin/bitcoin/pull/15934#issuecomment-546480177,546480177,
Talkless,2019-10-27 13:02:20,"> I might encourage taking a broader view and looking for impacts of changes here that may be more concerning than style or performance tweaks.\n\nSorry, I can't do more in-depth review. And that's enough for nit-picking, not to be too annoying...",https://github.com/bitcoin/bitcoin/pull/15934#issuecomment-546692570,546692570,
ryanofsky,2019-10-28 18:54:18,"> Sorry, I can't do more in-depth review. And that's enough for nit-picking, not to be too annoying...\n\nThanks for review @Talkless. Your suggestions improved the PR, and having more eyes on code is always reassuring. Aside from suggesting cosmetic improvements, another thing you can try as a reviewer without specialized knowledge of the code is just asking questions. E.g. spend 20 minutes loo",https://github.com/bitcoin/bitcoin/pull/15934#issuecomment-547095024,547095024,
ryanofsky,2019-10-28 18:56:42,"Updated 25c4ab5e0afd02e7dd19ea143f2e087def5f7b87 -> 69d44f3cc75a68d404ca0e1ca2b4831fd2bac4bb ([pr/mergeset.21](https://github.com/ryanofsky/bitcoin/commits/pr/mergeset.21) -> [pr/mergeset.22](https://github.com/ryanofsky/bitcoin/commits/pr/mergeset.22), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/mergeset.21..pr/mergeset.22)) just using ""default section"" more and not sometimes callin",https://github.com/bitcoin/bitcoin/pull/15934#issuecomment-547096059,547096059,
jnewbery,2019-10-29 14:59:01,"I've tried really hard to review this over the last few days, but the amount of change in the _Deduplicate settings merge code_ commit has made this very difficult for me. Perhaps if that commit was broken up into smaller pieces that moved the different `ArgsManager` functions to use the settings logic one-by-one, it'd be easier for me to satisfy myself that this isn't changing behaviour.\n\nI a",https://github.com/bitcoin/bitcoin/pull/15934#issuecomment-547463678,547463678,
ryanofsky,2019-10-30 20:52:02,"I think this PR could use a re-ack or two from previous reviewers, but otherwise should be close to ready for merge, given all the review it's had so far, and the exhaustive tests [`util_ArgsMerge`](https://github.com/bitcoin/bitcoin/blob/deb2327b435925c6a39ca654a79283b8eb6aeb86/src/test/util_tests.cpp#L626-L822) and [`util_ChainMerge`](https://github.com/bitcoin/bitcoin/blob/deb2327b435925c6a39ca",https://github.com/bitcoin/bitcoin/pull/15934#issuecomment-548107312,548107312,
ryanofsky,2019-11-08 03:55:39,"Updated 202e19830854550ee4eade53fe4fd3ae323ddbdd -> 20f74e2fba764299f48bd872c9dc2df86c21e747 ([`pr/mergeset.23`](https://github.com/ryanofsky/bitcoin/commits/pr/mergeset.23) -> [`pr/mergeset.24`](https://github.com/ryanofsky/bitcoin/commits/pr/mergeset.24), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/mergeset.23..pr/mergeset.24)) with suggestions above.\nRebased 20f74e2fba764299f48b",https://github.com/bitcoin/bitcoin/pull/15934#issuecomment-551373930,551373930,
ariard,2019-11-08 17:51:01,"ACK 083c954\n\nI've reviewed that's new code is doing what it says to do. I think that weird behaviors are compatibility-maintained but at least if we have a regression they are well-documented and so we'll know where to look, plus as said by James this part of code is low-risk so it's worth moving forward.\n\nGreat work Russ, and I'm concept ACK future PRs to remove/squeeze weird behaviors!",https://github.com/bitcoin/bitcoin/pull/15934#issuecomment-551926306,551926306,
ryanofsky,2019-11-08 18:54:34,"Thanks! Will leave PR at 083c954b02a4e7d0708349eeaf3bac2b5947fb0e. Some notes for future followup:\n\n- [ ] https://github.com/bitcoin/bitcoin/pull/15934#discussion_r344291875 - s/conf file/included conf file/\n- [ ] https://github.com/bitcoin/bitcoin/pull/15934#discussion_r344271224 - s/, so we clear it here// and early return",https://github.com/bitcoin/bitcoin/pull/15934#issuecomment-551947994,551947994,
jnewbery,2019-11-08 19:59:24,"Other potential future follow-ups:\n\n- [ ] Don't throw in `GetChainName()`\n\n(https://github.com/bitcoin/bitcoin/blob/8021392b825c74312173f15eb937ba6d4aec3841/src/util/system.cpp#L970). I think the calling code was originally supposed to catch this (eg https://github.com/bitcoin/bitcoin/blob/8021392b825c74312173f15eb937ba6d4aec3841/src/bitcoind.cpp#L88), but this is no longer the case becaus",https://github.com/bitcoin/bitcoin/pull/15934#issuecomment-551969778,551969778,
ryanofsky,2019-11-18 16:40:57,"I've been working on some followups for this PR since it's been merged. #17473 has various refactoring cleanups suggested above, and #17508 is tracking cleanup of confusing settings behaviors.\n\nGoing through all the comments in this issue, I think the only suggestions left not addressed by #17473 and #17508 are:\n\n- Fixing `return InitError` in a loop: https://github.com/bitcoin/bitcoin/pul",https://github.com/bitcoin/bitcoin/pull/15934#issuecomment-555100626,555100626,
ariard,2019-11-18 17:37:09,Maybe tag them good_first_issue or up_to_grabs to let people find them,https://github.com/bitcoin/bitcoin/pull/15934#issuecomment-555125450,555125450,
MarcoFalke,2021-01-30 09:20:33,"Hidden by GitHub, but the ""Up for grabs"" refers to https://github.com/bitcoin/bitcoin/pull/15934#issuecomment-555100626",https://github.com/bitcoin/bitcoin/pull/15934#issuecomment-770182825,770182825,
promag,2019-05-02 13:13:56,"nit, `IsValidArgStr`?",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r280411609,280411609,src/util/system.cpp
promag,2019-05-02 13:15:33,Maybe `arg.size() > 1 && arg[0] == '-'` or do we need `-`?,https://github.com/bitcoin/bitcoin/pull/15934#discussion_r280412183,280412183,src/util/system.cpp
jamesob,2019-05-28 14:55:53,Digging this chainable `return *this;` interface.,https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288149094,288149094,src/util/settings.cpp
jamesob,2019-05-28 15:09:09,"I'm slightly confused about why `source.forced` will cause a negation to have occurred, but I guess the rationale here is that if we've forced a value, we effectively want to ignore prev/subsequent values in favor of the forced one.",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288155825,288155825,src/util/settings.cpp
jamesob,2019-05-28 15:30:55,Long lines like this are hard to review. Consider breaking to 100col?,https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288166922,288166922,src/util/system.cpp
jamesob,2019-05-28 15:44:35,Thanks for the nice comment. Potentially out of scope: could we log warnings for this instead of silently ignoring?,https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288173284,288173284,src/util/system.cpp
jamesob,2019-05-28 18:32:51,"Cool test! The formatted output is really helpful. Encourage other reviewers to run and inspect with\n```sh\nSETTINGS_MERGE_TEST_OUT=results.txt ./src/test/test_bitcoin --run_test=settings_tests/Merge\n```",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288244735,288244735,src/test/settings_tests.cpp
jamesob,2019-05-28 18:34:26,Note to other reviewers: the code in this file is already in master (as of 1d543adae593bdbfd954e80ed61ac907db0c5a7b) and its appearance here is only due to this branch not being based on a more recent version of master.,https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288245372,288245372,src/test/util.h
jamesob,2019-05-28 18:48:13,"Could test precedence difference between commandline and config file with the following diff (if you end up needing to rebase for some other reason):\n```diff\ndiff --git a/src/test/settings_tests.cpp b/src/test/settings_tests.cpp\nindex 36188f8471..c82ecaea8c 100644\n--- a/src/test/settings_tests.cpp\n+++ b/src/test/settings_tests.cpp\n@@ -18,14 +18,28 @@ BOOST_AUTO_TEST_CASE(Simple)\n {\",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288250769,288250769,src/test/settings_tests.cpp
ryanofsky,2019-05-28 19:19:46,"re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288250769\n\nThanks! Added test.",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288262559,288262559,src/test/settings_tests.cpp
ryanofsky,2019-05-28 19:24:37,"re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288149094\n\nThese can be nice sometimes. They are also called fluent interfaces (https://en.wikipedia.org/wiki/Fluent_interface)",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288264332,288264332,src/util/settings.cpp
ryanofsky,2019-05-28 19:31:50,"re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288155825\n\nI guess it doesn't cause a real negation, more of an effective negation like you described. I renamed the variable `result_complete` to avoid mentioning negation.",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288266961,288266961,src/util/settings.cpp
MarcoFalke,2019-05-28 21:20:37,"So it should be rebased, imo. Otherwise `git blame` will return different results for the same lines depending on what commit is currently checked out.",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288307354,288307354,src/test/util.h
ryanofsky,2019-05-29 15:28:40,"re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288166922\n\nLooks like github diffs are 120 columns wide. I wrapped this line and put `ColumnLimit: 119` in my clang-format",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288628719,288628719,src/util/system.cpp
ryanofsky,2019-05-29 15:49:15,"re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288173284\n\n> Potentially out of scope: could we log warnings for this instead of silently ignoring?\n\nI'm planning on making followup PRs that simplify and clean up all these ""Weird behavior preserved for backwards compatibility"" instances. I'd rather not add warnings in this PR partly because I'm disinclined to mix up behavior c",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288639295,288639295,src/util/system.cpp
ryanofsky,2019-05-29 15:50:08,"re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288245372\n\nRebased!",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288639762,288639762,src/test/util.h
ariard,2019-10-17 03:36:29,Also key-value or array as requirements ? I suppose any other variant type should be easy to use with basic types..,https://github.com/bitcoin/bitcoin/pull/15934#discussion_r335797249,335797249,src/util/settings.h
ariard,2019-10-17 03:42:08,what's top-level section of the config file ? The non-network one?,https://github.com/bitcoin/bitcoin/pull/15934#discussion_r335798172,335798172,src/util/settings.h
ariard,2019-10-17 03:45:37,"nit: `GetSettingAllOccurence`?, given name was expecting to query multiple settings at same time",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r335798710,335798710,src/util/settings.h
ariard,2019-10-17 03:50:28,"nit: find ""value is not set"" better than ""has ignored config value""",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r335799539,335799539,src/util/settings.h
ariard,2019-10-17 04:08:17,nit: any reason why you don't dereference compare to others?,https://github.com/bitcoin/bitcoin/pull/15934#discussion_r335802270,335802270,src/util/settings.cpp
ryanofsky,2019-10-17 11:23:02,"> nit: `GetSettingAllOccurence`?, given name was expecting to query multiple settings at same time\n\nSure, will rename.",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r335948647,335948647,src/util/settings.h
ryanofsky,2019-10-17 11:25:54,"These definitely aren't not requirements of the type right now. There is no syntax for these things. Maybe this would be useful in the future for something like per-wallet settings (different preferences, RPC authentication setting), and I guess this is a little easier now, but otherwise the PR is neutral on this.",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r335949720,335949720,src/util/settings.h
ryanofsky,2019-10-17 11:27:22,"> nit: any reason why you don't dereference compare to others?\n\nAll three settings sources (forced_settings, command_line_options, ro_config) are different types, so there's not much reason to expect SettingsSpan construction to be the same for all of them:\n\nhttps://github.com/bitcoin/bitcoin/blob/61e034f1f6b3beeeed51ef8aaf7762f9244a7c8f/src/util/settings.h#L25-L29\n\nBut I think the onl",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r335950228,335950228,src/util/settings.cpp
ryanofsky,2019-10-17 11:29:28,"> what's top-level section of the config file ? The non-network one?\n\nYes, literally the top of the config file before a `[section]` delimiter. I don't really like the term non-network settings because the section can contain network related settings that will be used on mainnet.",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r335951015,335951015,src/util/settings.h
ryanofsky,2019-10-17 11:31:31,"> nit: find ""value is not set"" better than ""has ignored config value""\n\nI'm not sure ""value is not set"" is better. A value is set by the user, it's just not applied due to the current network. Will expand command though.",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r335951722,335951722,src/util/settings.h
ryanofsky,2019-10-22 18:52:46,"> I suppose any other variant type should be easy to use with basic types..\n\nI think `boost::variant` would be an inferior choice, but just as an experiment I tried dropping it in here with some helper methods to make it work without changes to other code:\n\n```c++\nstruct SettingsValue : public boost::variant<std::nullptr_t, bool, int64_t, std::string>\n{\n    using variant::variant;\n",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r337691812,337691812,src/util/settings.h
ariard,2019-10-23 00:49:50,Just to be sure the `IsArgNegated` is preserved here in `GetListSetting` via `source.span.negated() > 0` ?,https://github.com/bitcoin/bitcoin/pull/15934#discussion_r337809469,337809469,src/util/system.cpp
ariard,2019-10-23 00:53:56,Hmmm I can't get from where this behavior is extracted ?,https://github.com/bitcoin/bitcoin/pull/15934#discussion_r337810134,337810134,src/util/system.cpp
ryanofsky,2019-10-23 09:00:19,"re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r337810134\n\n> Hmmm I can't get from where this behavior is extracted ?\n\nThis behavior makes no sense and was never intended, so it's buried away in current code. It happens because of the following code in `ArgsManager::ParseParameters`:\n\nhttps://github.com/bitcoin/bitcoin/blob/9dd6bbba613d7462afdb6276c4002bc183478528/src/uti",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r337927662,337927662,src/util/system.cpp
ryanofsky,2019-10-23 09:00:29,"re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r337809469\n\n> Just to be sure the `IsArgNegated` is preserved here in `GetListSetting` via `source.span.negated() > 0` ?\n\nIt's handled implicitly by `for (const auto& value : source.span)` in `GetListSetting`, because the `SettingsSpan` iterator skips negated values in its `begin()` method.\n\nThe `source.span.negated() > 0` ch",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r337927735,337927735,src/util/system.cpp
ryanofsky,2019-10-23 09:00:59,"re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r335798710\n\n> > nit: `GetSettingAllOccurence`?, given name was expecting to query multiple settings at same time\n> \n> Sure, will rename.\n\nForgot to do this last time. I think I'll use `GetSetting` for single valued settings and `GetSettingsList` for many valued settings. I'd like to keep using the word ""list"" here to be consi",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r337927946,337927946,src/util/settings.h
fjahr,2019-10-23 15:17:19,"nit: I find this a bit hard to read, would rather add a few more lines than have a nested ternary statement",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338113304,338113304,src/util/system.cpp
fjahr,2019-10-23 15:19:39,nit: would not use nested ternary for readability,https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338114628,338114628,src/util/system.cpp
fjahr,2019-10-23 15:19:47,nit: would not use nested ternary for readability,https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338114696,338114696,src/util/system.cpp
fjahr,2019-10-23 15:19:57,nit: would not use nested ternary for readability,https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338114787,338114787,src/util/system.cpp
fjahr,2019-10-23 16:39:01,"On second thought: since these nested ternary one-liners are repeated multiple times, I would suggest a helper method that converts `value` to whatever gets pushed into `result`",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338157029,338157029,src/util/system.cpp
Talkless,2019-10-23 17:26:36,"**const** bool would help here, it actually too a wile to see that it is not changed throughout this function.",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338179393,338179393,src/test/util_tests.cpp
Talkless,2019-10-23 17:28:06,could be `const std::string`,https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338180105,338180105,src/test/util_tests.cpp
Talkless,2019-10-23 17:30:24,`noexcept`?,https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338181221,338181221,src/util/settings.cpp
Talkless,2019-10-23 17:30:54,could be `noexcept`,https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338181466,338181466,src/util/settings.cpp
Talkless,2019-10-23 17:35:02,"Consider marking as `const` and applying [ES.28: Use lambdas for complex initialization, especially of const variables](https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#es28-use-lambdas-for-complex-initialization-especially-of-const-variables). That re-assignment `span = SettingsSpan(*values);` is rather ""hidden"".",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338183326,338183326,src/util/settings.cpp
Talkless,2019-10-23 17:39:23,"This looks redundant. `result` is always null here, I don't see where it can be changed above. ~~All this could be rewritten as a `return <something>` instead of changing via lambda capturer reference...~~",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338185316,338185316,src/util/settings.cpp
ryanofsky,2019-10-23 17:43:07,"re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338185316\n\n> This looks redundant. `result` is always null here, I don't see where it can be changed above. All this could be rewritten as a `return <something>` instead of changing via lambda capturer reference...\n\nI can maybe change the comment above to clarify, but `return` here is what keeps lower priority values from overwr",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338187185,338187185,src/util/settings.cpp
Talkless,2019-10-23 17:48:04,"`end()` could be `noexcept`, not sure about all these other trivial functions (with regards to `isFalse()` via `negated()`).",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338189741,338189741,src/util/settings.cpp
Talkless,2019-10-23 17:49:19,`noexcept`,https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338190405,338190405,src/util/settings.h
Talkless,2019-10-23 17:50:37,explcit? noexcept?,https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338191106,338191106,src/util/settings.h
Talkless,2019-10-23 17:50:39,Missing `exclicit`? Do we really need to support `SettigsSpan s = std::vec...` ?,https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338191129,338191129,src/util/settings.h
Talkless,2019-10-23 17:51:25,maybe just `= default` ?,https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338191554,338191554,src/util/settings.h
Talkless,2019-10-23 17:57:30,"`const auto it` as `it` is not changed later. \n\nP.S. really sorry for not using ""Review Changes"" feature. I've been informed that these ""add single comment"" spams the notification channel... Will do better next time.",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338194723,338194723,src/util/settings.h
ryanofsky,2019-10-23 18:31:09,"re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338183326\n\n> Consider marking as `const` and applying [ES.28: Use lambdas for complex initialization, especially of const variables](https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#es28-use-lambdas-for-complex-initialization-especially-of-const-variables). That re-assignment `span = SettingsSpan(*values)",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338210952,338210952,src/util/settings.cpp
ryanofsky,2019-10-23 18:45:44,"> Do we really need to support `SettigsSpan s = std::vec...` ?\n\nWe don't really need it because the data / size constructor could be called instead but having this makes code in system.cpp less verbose and I'm not sure what the preferred alternative would be: Calling .data() and .size() manually? Helper function to call .data() and .size()? Template constructor that calls .data() and .size() w",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338217848,338217848,src/util/settings.h
Talkless,2019-10-24 05:40:14,"Oh no, I do not suggest to remove this helper constructor, maybe just adding `explicit` for that constructor. Currently it implicilty-converts from std::vecotor:\n```\n//...\nDoSomething(const SettingsSpan& span);\n//...\nstd::vector<SettingsValue>& vec;\nDoSomething(vec); // implicilty conerts to SettingsSpan, kinda ""sneaky"".\n```\nWith `explicit` constructor:\n```\nDoSomething(Settings",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338388982,338388982,src/util/settings.h
Talkless,2019-10-24 05:42:54,"Yep, I've missed that fact that lambda is called multiple times, thanks for clarification. So this comment is moot.",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338389531,338389531,src/util/settings.cpp
ryanofsky,2019-10-24 09:02:34,"re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338191129\n\n> Although looking at `std::span` implementations, these constructors are also implicit there, so I guess you can ignore this comment.\n\nYes, it's a perfectly safe conversion that doesn't create ownership or performance issues, and in case of `std::span` reduces noise and boilerplate in code. But in any case I updated ",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338460044,338460044,src/util/settings.h
Talkless,2019-10-24 17:52:46,"Since SettingsSpan copy constructor is `noexcept`, this could be too.\nThough if it would change any time in the future, using `noexcept()` _operator_ could make it conditionally `noexcept`, by checking if copy constructor is actually `noexcept` (if author cares):\n```\nexplicit Source(SettingsSpan span) noexcept(noexcept(SettingsSpan{span}) : span(span) {}\n```\n",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338710128,338710128,src/util/settings.cpp
Talkless,2019-10-24 17:57:17,"This function has some rather unusual looping, so if you care about prioritizing usage of standard algorithms, it could be implemented in something like this:\n```\n        const std::reverse_iterator<const SettingsValue*> rbegin(end());\n        const std::reverse_iterator<const SettingsValue*> rend(begin());\n        const auto it = std::find_if(rbegin, rend, [](const SettingsValue &i) { ret",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338712255,338712255,src/util/settings.cpp
Talkless,2019-10-24 18:00:04,"Now there are some redundant `explicit`'s. There's no need to mark `SettingsSpan() = default;` or more-than-one-argument-taking `SettingsSpan(const SettingsValue* data, size_t size)` as `explicit`. It's only for the cases when constructor can initialize with _single_ argument.",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338713562,338713562,src/util/settings.h
Talkless,2019-10-24 18:06:31,"I believe `""""` are rather overused on codebases. This invokes `std::string`'s copy constructor taking `const char*` that will try to `strlen()`, etc. Creating default-constructed `std::string{}`/ `std::string()`/`{} (in right context)` would feel more ""pedantically correct"" :) .",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338716389,338716389,src/util/settings.cpp
Talkless,2019-10-24 18:13:24,"`""\n""` -> `'\n'`, no need for const char* / std::string for single character.",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338719480,338719480,src/util/system.cpp
Talkless,2019-10-24 18:14:49,"`""-""` -> `'-'`",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338720155,338720155,src/util/system.cpp
Talkless,2019-10-24 18:15:33,const bool?,https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338720515,338720515,src/util/system.cpp
Talkless,2019-10-24 18:16:40,**const** util::SettingsValue value,https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338721033,338721033,src/util/system.cpp
Talkless,2019-10-24 18:16:53,**const** util::SettingsValue value,https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338721156,338721156,src/util/system.cpp
Talkless,2019-10-24 18:17:16,**const** util::SettingsValue value,https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338721347,338721347,src/util/system.cpp
Talkless,2019-10-24 18:18:54,I believe it could be **const** std::vector<util::SettingsValue>* **const** includes. Neither value (vector) nor pointer is ever changed (right?).,https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338722077,338722077,src/util/system.cpp
Talkless,2019-10-24 18:20:25,"could be default-constucted instread of copy-constructed std::string: `add_includes({})`;\n\nAlso, both `size_t`'s could be `const`.",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338722814,338722814,src/util/system.cpp
Talkless,2019-10-24 18:21:40,"`""""` -> `{}`  too ?",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338723391,338723391,src/util/system.cpp
ryanofsky,2019-10-24 19:44:42,"re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338710128\n\n> Since SettingsSpan copy constructor is `noexcept`, this could be too.\n> Though if it would change any time in the future, using `noexcept()` _operator_ could make it conditionally `noexcept`, by checking if copy constructor is actually `noexcept` (if author cares):\n> \n> ```\n> explicit Source(SettingsSpan span) n",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338758317,338758317,src/util/settings.cpp
ryanofsky,2019-10-24 19:44:49,"re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338716389\n\n> I believe `""""` are rather overused on codebases. This invokes `std::string`'s copy constructor taking `const char*` that will try to `strlen()`, etc. Creating default-constructed `std::string{}`/ `std::string()`/`{} (in right context)` would feel more ""pedantically correct"" :) .\n\nWill keep because constructing strin",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338758361,338758361,src/util/settings.cpp
ryanofsky,2019-10-24 19:44:58,"re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338712255\n\n> This function has some rather unusual looping, so if you care about prioritizing usage of standard algorithms, it could be implemented in something like this:\n> \n> ```\n>         const std::reverse_iterator<const SettingsValue*> rbegin(end());\n>         const std::reverse_iterator<const SettingsValue*> rend(begin",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338758431,338758431,src/util/settings.cpp
ryanofsky,2019-10-24 19:45:05,"re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338713562\n\n> Now there are some redundant `explicit`'s. There's no need to mark `SettingsSpan() = default;` or more-than-one-argument-taking `SettingsSpan(const SettingsValue* data, size_t size)` as `explicit`. It's only for the cases when constructor can initialize with _single_ argument.\n\nI think this isn't strictly true. Expl",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338758487,338758487,src/util/settings.h
ryanofsky,2019-10-24 19:45:17,"re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338719480\n\n> `""\n""` -> `'\n'`, no need for const char* / std::string for single character.\n\nThis is moved code, so I would prefer to not change it and create a spurious difference.",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338758585,338758585,src/util/system.cpp
ryanofsky,2019-10-24 19:45:32,"re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338720155\n\n> `""-""` -> `'-'`\n\nChanged",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338758680,338758680,src/util/system.cpp
ryanofsky,2019-10-24 19:45:51,"re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338720515\n\n> const bool?\n\nChanged",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338758815,338758815,src/util/system.cpp
ryanofsky,2019-10-24 19:46:03,"re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338721033\n\n> **const** util::SettingsValue value\n\nChanged",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338758892,338758892,src/util/system.cpp
ryanofsky,2019-10-24 19:46:18,"re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338721156\n\n> **const** util::SettingsValue value\n\nChanged",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338758971,338758971,src/util/system.cpp
ryanofsky,2019-10-24 19:46:26,"re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338721347\n\n> **const** util::SettingsValue value\n\nChanged",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338759038,338759038,src/util/system.cpp
ryanofsky,2019-10-24 19:46:33,"re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338722077\n\n> I believe it could be **const** std::vectorutil::SettingsValue* **const** includes. Neither value (vector) nor pointer is ever changed (right?).\n\nChanged",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338759086,338759086,src/util/system.cpp
ryanofsky,2019-10-24 19:46:42,"re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338722814\n\n> could be default-constucted instread of copy-constructed std::string: `add_includes({})`;\n> \n> Also, both `size_t`'s could be `const`.\n\nChanged",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338759149,338759149,src/util/system.cpp
ryanofsky,2019-10-24 19:46:51,"re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338723391\n\n> `""""` -> `{}` too ?\n\nChanged",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338759219,338759219,src/util/system.cpp
Talkless,2019-10-25 10:26:14,"Right, I'm used to QString too much. std::string optimizes well ("""" same as {}), it's QString where it does add cost (extra function call). Sorry for bothering.",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338986570,338986570,src/util/settings.cpp
Talkless,2019-10-25 10:30:11,"`std::count_if` would be simplest, but not sure if semantics will be the same, i.e. will there acutally be N sequental `.isFalse()`'es.",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338987908,338987908,src/util/settings.cpp
ryanofsky,2019-10-25 13:29:50,"re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338987908\n\n> `std::count_if` would be simplest, but not sure if semantics will be the same, i.e. will there acutally be N sequental `.isFalse()`'es.\n\n`std::count_if` would not be right here, but your initial `std::distance suggestion` would work. The behavior of negation is a little subtle, which I why I thought the code would b",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r339052737,339052737,src/util/settings.cpp
Talkless,2019-10-25 15:31:40,"Is this the right place to put this include? Shouldn't it be way more up, together with other bitcoin stuff?",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r339113266,339113266,src/util/system.cpp
Talkless,2019-10-25 15:41:09,"Is it possible for `if` to be true, but loop be empty, i.e. not to loop not a single time (empty span), so `success = false` would be never executed? Or this would be expected?\n\nIf it is impossible that `for()` never loops (it always loops at least once), then `bool success` is not needed, `return false` can be returned *after* loop body, and `return true` in the end of the function.",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r339117566,339117566,src/util/system.cpp
Talkless,2019-10-25 15:50:44,"I understand `begin()`, `end()` and `empty` (for std::empty in the future) being lowercase, but shouldn't it be `LastNegated()` and `Negated()` as Bitcoin's PascalCase style requires?",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r339121745,339121745,src/util/settings.h
ryanofsky,2019-10-25 16:15:16,"re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r339121745\n\n> I understand `begin()`, `end()` and `empty` (for std::empty in the future) being lowercase, but shouldn't it be `LastNegated()` and `Negated()` as Bitcoin's PascalCase style requires?\n\n""Requires"" is strong. There's a decent amount of [variation](https://gist.github.com/ryanofsky/8718089b2927912f77db0d7cb1728350) her",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r339132071,339132071,src/util/settings.h
ryanofsky,2019-10-25 16:20:06,"re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r339113266\n\n> Is this the right place to put this include? Shouldn't it be way more up, together with other bitcoin stuff?\n\nI don't think there is a strict convention, but often I see and write lists of internal includes followed by lists of external includes. Univalue is technically an external include and a library that can be ",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r339133896,339133896,src/util/system.cpp
ryanofsky,2019-10-25 16:20:21,"re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r339117566\n\n> Is it possible for `if` to be true, but loop be empty, i.e. not to loop not a single time (empty span), so `success = false` would be never executed? Or this would be expected?\n> \n> If it is impossible that `for()` never loops (it always loops at least once), then `bool success` is not needed, `return false` can be ",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r339134008,339134008,src/util/system.cpp
jnewbery,2019-10-25 17:00:01,Is there a reason this needs to be a lambda? It's not capturing any surrounding variables. Would it be clearer to just define this as a regular function above?,https://github.com/bitcoin/bitcoin/pull/15934#discussion_r339148976,339148976,src/test/settings_tests.cpp
jnewbery,2019-10-25 17:25:32,"nit: a comment here would be useful:\n\n```\n// command_line_options do not have sections. Only iterate over SET and NEGATE\n```",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r339159002,339159002,src/test/settings_tests.cpp
jnewbery,2019-10-25 17:27:39,`skip_nonpersistent` inline comment is wrong. That positional argument is `get_chain_name`.,https://github.com/bitcoin/bitcoin/pull/15934#discussion_r339159874,339159874,src/test/settings_tests.cpp
jnewbery,2019-10-25 17:31:50,"nit: I'd prefer all delimiters to be printed for each test case, so there's a constant number of columns.",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r339161570,339161570,src/test/settings_tests.cpp
jnewbery,2019-10-25 17:33:17,"Could you add more details here, like you have in the utils_tests.cpp:\n\n```\n    //   <input> || GetSetting() | GetSettingsList() | HasIgnoredDefaultSectionConfigValue()\n```",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r339162180,339162180,src/test/settings_tests.cpp
jnewbery,2019-10-25 18:34:29,"These functions (`TestArgsManager::ParseParameters()`, `TestArgsManager::ReadConfigString()` and `TestArgsManager::UpdateSettings()`) are pretty confusing. `TestArgsManager` is essentially storing its own view of the settings, and the tests are testing that view, rather than what `ArgsManager` itself is storing. `UpdateSettings()` is even weirder - it's reaching into `ArgsManager.m_settings` and c",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r339186323,339186323,src/test/util_tests.cpp
jnewbery,2019-10-25 20:04:23,"This is really useful, and could IMO be included as a comment to document what interface is needed if we did want to substitute another SettingsValue class.",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r339218345,339218345,src/util/settings.h
jnewbery,2019-10-25 22:13:43,It wasn't immediately obvious to me why `fn()` was being called on `span` even if hasn't been set. Moving this line into the if block causes the tests to fail. Can you add a comment to explain why you're calling this even if no settings were found in the top_level of the config file?,https://github.com/bitcoin/bitcoin/pull/15934#discussion_r339256664,339256664,src/util/settings.cpp
ryanofsky,2019-10-26 11:39:50,"re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r339148976\n\n> Is there a reason this needs to be a lambda? It's not capturing any surrounding variables. Would it be clearer to just define this as a regular function above?\n\nGood catch. Made it a reusable function now",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r339296894,339296894,src/test/settings_tests.cpp
ryanofsky,2019-10-26 11:40:00,"re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r339159002\n\n> nit: a comment here would be useful:\n> \n> ```\n> // command_line_options do not have sections. Only iterate over SET and NEGATE\n> ```\n\nAdded comment",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r339296901,339296901,src/test/settings_tests.cpp
ryanofsky,2019-10-26 11:40:10,"re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r339159874\n\n> `skip_nonpersistent` inline comment is wrong. That positional argument is `get_chain_name`.\n\nGood catch. This came from messing up a rebase of another PR",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r339296906,339296906,src/test/settings_tests.cpp
ryanofsky,2019-10-26 11:40:18,"re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r339161570\n\n> nit: I'd prefer all delimiters to be printed for each test case, so there's a constant number of columns.\n\nAdded separator unconditionally now",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r339296909,339296909,src/test/settings_tests.cpp
ryanofsky,2019-10-26 11:40:27,"re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r339162180\n\n> Could you add more details here, like you have in the utils_tests.cpp:\n> \n> ```\n>     //   <input> || GetSetting() | GetSettingsList() | HasIgnoredDefaultSectionConfigValue()\n> ```\n\nAdded comment",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r339296913,339296913,src/test/settings_tests.cpp
ryanofsky,2019-10-26 11:40:36,"re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r339256664\n\n> It wasn't immediately obvious to me why `fn()` was being called on `span` even if hasn't been set. Moving this line into the if block causes the tests to fail. Can you add a comment to explain why you're calling this even if no settings were found in the top_level of the config file?\n\nGot rid of this behavior now. T",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r339296916,339296916,src/util/settings.cpp
ryanofsky,2019-10-26 11:40:46,"re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r335797249\n\n> This is really useful, and could IMO be included as a comment to document what interface is needed if we did want to substitute another SettingsValue class.\n\nGood suggestion to document assumptions about the type. Instead of pasting the whole block of code I just listed the required methods and added a github link, ",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r339296920,339296920,src/util/settings.h
ryanofsky,2019-10-26 13:25:27,"re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r339186323\n\n> These functions (`TestArgsManager::ParseParameters()`, `TestArgsManager::ReadConfigString()` and `TestArgsManager::UpdateSettings()`) are pretty confusing. \n\nIt was actually easy to update the tests and drop these so I got rid of them in the [pr/mergeset.19](https://github.com/ryanofsky/bitcoin/commits/pr/mergeset.1",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r339300024,339300024,src/test/util_tests.cpp
Talkless,2019-10-27 12:55:19,">  Univalue is technically an external include\n\nOh, right then.",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r339341271,339341271,src/util/system.cpp
jnewbery,2019-10-28 21:14:08,"> I just listed the required methods and added a github link, but I can add the example code inline if preferred.\n\nLooks great to me as it is. Thanks!",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r339795930,339795930,src/util/settings.h
jamesob,2019-10-31 18:32:36,nit: line is long enough to overflow the github UI,https://github.com/bitcoin/bitcoin/pull/15934#discussion_r341303517,341303517,src/util/settings.cpp
ariard,2019-11-07 18:01:28,"nit: add comment ""transform -foo to foo"" (over-commenting parsing here doesn't seem gross to me)",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r343793306,343793306,src/util/system.cpp
jnewbery,2019-11-07 18:06:45,"I can't comment on the exact line above (L897), but that comment refers to 'override args' and so should be changed in this PR.\n\nI think the comment and bool name are pretty confusing, and could be made much clearer. Suggestion:\n\n```\n        // `-includeconf` cannot be included in the command line arguments except\n        // as `-noincludeconf` (which indicates that no conf file should",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r343795528,343795528,src/util/system.cpp
jnewbery,2019-11-07 18:30:02,"These variable names (which are unchanged by your PR) aren't very helpful. I'd suggest the following renames for a later PR:\n\n`includeconf` -> `conf_file_names`\n`to_include` -> `conf_file_name`\n`include_conf` -> `conf_file_stream`",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r343805742,343805742,src/util/system.cpp
jnewbery,2019-11-07 18:32:28,(unchanged but touched by this PR): I don't understand why this needs to be its own scope. Perhaps it can be flattened in a follow-up PR?,https://github.com/bitcoin/bitcoin/pull/15934#discussion_r343806860,343806860,src/util/system.cpp
ariard,2019-11-07 18:36:43,"nit: comment ""Read section like testnet.foo or regtest.bar""",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r343808587,343808587,src/util/system.cpp
jnewbery,2019-11-07 18:47:58,"For me, this struct doesn't make things any clearer. An alternative is to pass an enum into the callback function to indicate where the SettingsSpan came from. Take a look at the change here, which also adds a few more comments: https://github.com/jnewbery/bitcoin/commit/fc3e1d4a2b8201cc694aee01a84b2b5e937b99cb",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r343813542,343813542,src/util/settings.cpp
ariard,2019-11-07 20:03:06,"I got why we need `IsArgSet(""chain"")` can't `CBaseChainParams::MAIN` be returned by default in this function ? I tested `chain=0` and it start anyway on main chain..",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r343847884,343847884,src/util/system.cpp
ariard,2019-11-07 20:43:30,"I'm wondering if there you could return after first match, in `AppInitParameterInteraction` unsuitables are processed as errors and not warnings",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r343864706,343864706,src/util/system.cpp
ariard,2019-11-07 21:44:18,You're mentioning discard of earlier settings on the command line and settings in the config file but in `MergeSettings` command line is evaluated before config so it can't discard something which hasn't evaluated yet ? I think you're thinking about the old code but it's not really clear.. ,https://github.com/bitcoin/bitcoin/pull/15934#discussion_r343890660,343890660,src/util/settings.cpp
ariard,2019-11-07 21:50:54,"Okay is this weird behavior due to the way `GetConfigOptions` and `ReadConfigStream` are parsing ? Also maybe you can update comment to explain most settings is ""most settings except for chain name` which would underscore why you care about `get_chain_name`",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r343893449,343893449,src/util/settings.cpp
ariard,2019-11-07 22:01:51,"So the behavior you're describing is in case of negated value in default section, this result is going to take precedence on value in network section even it's a non-negated one ? If yes saying that network specific options are overriden would be more correct than ignored.",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r343897939,343897939,src/util/settings.cpp
ryanofsky,2019-11-07 22:20:17,"re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r343813542\n\n> For me, this struct doesn't make things any clearer. An alternative is to pass an enum into the callback function to indicate where the SettingsSpan came from. Take a look at the change here, which also adds a few more comments: [jnewbery@fc3e1d4](https://github.com/jnewbery/bitcoin/commit/fc3e1d4a2b8201cc694aee01a84b2b",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r343904965,343904965,src/util/settings.cpp
ryanofsky,2019-11-07 22:20:38,"re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r343795528\n\n> I can't comment on the exact line above (L897), but that comment refers to 'override args' and so should be changed in this PR.\n> \n> I think the comment and bool name are pretty confusing, and could be made much clearer. Suggestion:\n\nAgree, will take your suggestion.",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r343905098,343905098,src/util/system.cpp
ryanofsky,2019-11-07 22:20:47,"re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r343805742\n\n> These variable names (which are unchanged by your PR) aren't very helpful. I'd suggest the following renames for a later PR:\n> \n> `includeconf` -> `conf_file_names`\n> `to_include` -> `conf_file_name`\n> `include_conf` -> `conf_file_stream`\n\nYes. If it's ok I think I will do these cleanups first and then rebas",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r343905138,343905138,src/util/system.cpp
ryanofsky,2019-11-07 22:20:58,"re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r343806860\n\n> (unchanged but touched by this PR): I don't understand why this needs to be its own scope. Perhaps it can be flattened in a follow-up PR?\n\nProbably this was just done as a style thing to make it clearer the variables here won't be used after the scope. But there's only one variable left now so this seems fine to rem",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r343905197,343905197,src/util/system.cpp
ryanofsky,2019-11-07 22:21:15,"re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r343897939\n\n> So the behavior you're describing is in case of negated value in default section, this result is going to take precedence on value in network section even it's a non-negated one ? If yes saying that network specific options are overriden would be more correct than ignored.\n\nHmm, this isn't referring to the network-s",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r343905294,343905294,src/util/settings.cpp
ryanofsky,2019-11-07 22:21:21,"re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r343893449\n\n> Okay is this weird behavior due to the way `GetConfigOptions` and `ReadConfigStream` are parsing ?\n\nThe code has changed a lot since this behavior was introduced, so I don't recall what this behavior was due to initially. I'm pretty sure it was never intentional. But in the current master branch, this behavior is ca",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r343905330,343905330,src/util/settings.cpp
ryanofsky,2019-11-07 22:21:30,"re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r343890660\n\n> You're mentioning discard of earlier settings on the command line and settings in the config file but in `MergeSettings` command line is evaluated before config so it can't discard something which hasn't evaluated yet ? I think you're thinking about the old code but it's not really clear..\n\nBy ""discard"" here I just ",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r343905388,343905388,src/util/settings.cpp
ryanofsky,2019-11-07 22:21:41,"re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r343808587\n\n> nit: comment ""Read section like testnet.foo or regtest.bar""\n\nWill add this",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r343905462,343905462,src/util/system.cpp
ryanofsky,2019-11-07 22:21:49,"re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r343864706\n\n> I'm wondering if there you could return after first match, in `AppInitParameterInteraction` unsuitables are processed as errors and not warnings\n\nWow that is pretty funny. At one point I believe this was warning, and then it was changed into an error. I think it's better to return the complete set here though, so we",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r343905510,343905510,src/util/system.cpp
ryanofsky,2019-11-07 22:21:55,"re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r343793306\n\n> nit: add comment ""transform -foo to foo"" (over-commenting parsing here doesn't seem gross to me)\n\nAgree, will add.",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r343905543,343905543,src/util/system.cpp
ryanofsky,2019-11-07 22:22:08,"re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r343847884\n\n> I got why we need `IsArgSet(""chain"")` can't `CBaseChainParams::MAIN` be returned by default in this function ?\n\nThe result of `IsArgSet` isn't needed to set the default, since that's handled below. It's only called to trigger an error if `-regtest` `-testnet` and `-chain=` options are used together because you're on",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r343905604,343905604,src/util/system.cpp
jnewbery,2019-11-08 16:17:33,"I agree. The:\n\n```\n    for (const auto& arg : gArgs.GetUnsuitableSectionOnlyArgs()) {\n        return InitError(strprintf(_(""Config setting for %s only applied on %s network when in [%s] section."").translated, arg, network, network));\n    }\n```\n\nin `AppInitParameterInteraction()` clearly doesn't make sense.",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r344252898,344252898,src/util/system.cpp
ariard,2019-11-08 16:26:24,"> I don't see this. Was it intentional to omit the leading dash before -chain? \n\nAh sorry I tested with `chain=0` in config file, but didn't remember that `bitcoind` was pretty liberal with non-sense in config file..\n\nThat's said would it change anything to just return `CBaseChainParams::MAIN` at then of this function ? Assuming there is no conflict with other networks, if `-chain` isn't s",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r344257286,344257286,src/util/system.cpp
ariard,2019-11-08 16:34:42,"Thanks, gotcha, I find code easier to grasp moving to `Source::CONFIG_FILE_DEFAULT_SECTION`, etc",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r344261252,344261252,src/util/settings.cpp
ariard,2019-11-08 16:38:51,"Ah no you're right, nothing to do with `ReadConfigStream` parsing, that's just a weird flag of `GetArgHelper`, without that much rational..",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r344263141,344263141,src/util/settings.cpp
ariard,2019-11-08 16:46:18,"Thanks, after your explanation, I think comment is good enough (or don't suggestion in mind to make it better)",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r344266685,344266685,src/util/settings.cpp
ryanofsky,2019-11-08 16:53:25,"re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r344257286\n\n> That's said would it change anything to just return `CBaseChainParams::MAIN` at then of this function ? Assuming there is no conflict with other networks, if `-chain` isn't set you're going anyways to start on mainnet.\n\nI might be misunderstanding the suggestion, but if the suggestion is to change `return GetArg(""-c",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r344269892,344269892,src/util/system.cpp
ariard,2019-11-08 16:53:59,"I find comment a bit confusing, `-noincludeconf` means we are only going to discard `includeconf` in config file but not the main config itself (at least I tested that the current behavior with this patchset AFAII)",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r344270169,344270169,src/util/system.cpp
jnewbery,2019-11-08 16:56:26,"nit (please don't change in this PR. Leave for a follow-up, if at all): 'we clear it' in the comment above is inaccurate. If an `-includeconf` is found on the command line then we return false rather than silently removing the bad config. Change that comment to `// Do not allow -includeconf from the command line (except for -noincludeconf)`\n\nIn fact, I don't think we need the local `success` v",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r344271224,344271224,src/util/system.cpp
ryanofsky,2019-11-08 17:00:40,"re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r344270169\n\n> I find comment a bit confusing, `-noincludeconf` means we are only going to discard `includeconf` in config file but not the main config itself (at least I've tested that the current behavior with this patchset)\n\n`-noincludeconf` just disables the `-includeconf` directive. I wouldn't expect it to disable the whole c",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r344273023,344273023,src/util/system.cpp
ariard,2019-11-08 17:05:59,Yes I'm fine too if we print all errors than return ,https://github.com/bitcoin/bitcoin/pull/15934#discussion_r344275404,344275404,src/util/system.cpp
ariard,2019-11-08 17:47:32,"nit-picking there, was just to change comment to `(which indicates that no included conf file should be used)`",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r344291875,344291875,src/util/system.cpp
ariard,2019-11-08 17:55:58,Okay you're right didn't have the `chain=test` syntax in mind.,https://github.com/bitcoin/bitcoin/pull/15934#discussion_r344295148,344295148,src/util/system.cpp
jamesob,2019-11-08 21:07:01,These long lines are killin' me but I'll bite my tongue in the interest of a merge.,https://github.com/bitcoin/bitcoin/pull/15934#discussion_r344366743,344366743,src/util/settings.cpp
ryanofsky,2019-11-08 21:41:04,"Will fix with the other followups, but if it in case its useful https://greasyfork.org/en/scripts/18789-github-toggle-code-wrap seems to work well. (Found through https://github.com/StylishThemes/GitHub-code-wrap) ",https://github.com/bitcoin/bitcoin/pull/15934#discussion_r344377770,344377770,src/util/settings.cpp
