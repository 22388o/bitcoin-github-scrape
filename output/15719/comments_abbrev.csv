DrahtBot,2019-04-01T22:01:09Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#23581](https://github.com/bitcoin/bitcoin/pull/23581) (Move BlockManager to node/blockstorage by MarcoFalke)\n* [#23417]",https://github.com/bitcoin/bitcoin/pull/15719#issuecomment-478763783,478763783,
promag,2019-04-01T22:09:58Z,How will `snapshot_fn` work with IPC?,https://github.com/bitcoin/bitcoin/pull/15719#issuecomment-478765890,478765890,
ryanofsky,2019-04-02T00:37:50Z,"re: https://github.com/bitcoin/bitcoin/pull/15719#issuecomment-478765890\n\n> How will snapshot_fn work with IPC?\n\nNo different than other callback arguments. In #10102, `std::function` arguments are passed as objects with a single `call()` method:\n\nhttps://github.com/ryanofsky/bitcoin/blob/3440513a45e94a5f1f0c67ab7409439afbbef673/src/interfaces/capnp/messages.capnp#L144-L154\n\nhttps:",https://github.com/bitcoin/bitcoin/pull/15719#issuecomment-478797459,478797459,
promag,2019-04-02T12:24:57Z,"@ryanofsky ok thanks, will look into that.",https://github.com/bitcoin/bitcoin/pull/15719#issuecomment-478972074,478972074,
promag,2019-04-02T20:07:37Z,Should we assert cs_main is held in the relevant validation interface notifications?,https://github.com/bitcoin/bitcoin/pull/15719#issuecomment-479177413,479177413,
ryanofsky,2019-04-02T20:24:25Z,"re: https://github.com/bitcoin/bitcoin/pull/15719#issuecomment-479177413\n\n> Should we assert cs_main is held in the relevant validation interface notifications?\n\n`cs_main` can be acquired inside notification callbacks, if necessary, but it is not held when these notifications happen. This PR and #15632 disentangle notifications and locking, so locks are never held when notifications are re",https://github.com/bitcoin/bitcoin/pull/15719#issuecomment-479184766,479184766,
promag,2019-04-03T13:35:00Z,"Sorry for not being clear. I mean that `cs_main` is locked when `GetMainSignals().TransactionAddedToMempool()` is called, and it is important that doesn't change, by adding:\n```diff\n@@ -152,6 +152,8 @@ void CMainSignals::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockInd\n }\n\n void CMainSignals::TransactionAddedToMempool(const CTransactionRef &ptx) {\n+    AssertLockHeld(::cs_",https://github.com/bitcoin/bitcoin/pull/15719#issuecomment-479491609,479491609,
jnewbery,2019-04-11T21:00:12Z,"Concept ACK\n\n> Mempool transactions are sent in a single IPC call instead of in a loop calling an IPC method repeatedly.\n\nDo we know what this does to memory usage if there's a very large mempool (either at startup when starting one or multiple wallets, or when loading a wallet dynamically during runtime)?",https://github.com/bitcoin/bitcoin/pull/15719#issuecomment-482312004,482312004,
ryanofsky,2019-04-11T21:49:12Z,"> Do we know what this does to memory usage if there's a very large mempool (either at startup when starting one or multiple wallets, or when loading a wallet dynamically during runtime)?\n\nWith this PR by itself, a new temporary vector with one pointer per mempool transaction is created when a wallet is loaded. It's something to consider, but probably not likely to cause problems.\n\nWith th",https://github.com/bitcoin/bitcoin/pull/15719#issuecomment-482334255,482334255,
MarcoFalke,2019-08-16T13:56:25Z,"@ryanofsky Are you still working on this? If no, then please close it.",https://github.com/bitcoin/bitcoin/pull/15719#issuecomment-522017731,522017731,
ryanofsky,2019-08-19T15:35:29Z,"> @ryanofsky Are you still working on this? If no, then please close it.\n\nThanks for the reminder. I looked into this again and I think the WIP tag still applies. I had been indecisive about involving rescan in this this change after John pointed out it was necessary, since I was unsure if it was better to incrementally change the rescan code (first synchronize rescan with notifications, then ",https://github.com/bitcoin/bitcoin/pull/15719#issuecomment-522631512,522631512,
ryanofsky,2020-04-15T16:30:58Z,"Rebased 3eb122b4a10024d86561492db19a881d420e34c5 -> b7716d0272125f4b4d2bce179d86d896f67869bd ([`pr/pool.9`](https://github.com/ryanofsky/bitcoin/commits/pr/pool.9) -> [`pr/pool.10`](https://github.com/ryanofsky/bitcoin/commits/pr/pool.10), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/pool.9-rebase..pr/pool.10)) after merge of #17954 and conflict with #18192\n",https://github.com/bitcoin/bitcoin/pull/15719#issuecomment-614143942,614143942,
ryanofsky,2020-04-21T20:53:15Z,"Rebased b7716d0272125f4b4d2bce179d86d896f67869bd -> bb7e272bd968adff75bed5038680f23b665880c5 ([`pr/pool.10`](https://github.com/ryanofsky/bitcoin/commits/pr/pool.10) -> [`pr/pool.11`](https://github.com/ryanofsky/bitcoin/commits/pr/pool.11), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/pool.10-rebase..pr/pool.11)) due to minor conflicts with #15761 and #18601",https://github.com/bitcoin/bitcoin/pull/15719#issuecomment-617408292,617408292,
ryanofsky,2020-04-29T17:45:08Z,"Rebased bb7e272bd968adff75bed5038680f23b665880c5 -> 3c50af4c76889261d19262086542b44220c74457 ([`pr/pool.11`](https://github.com/ryanofsky/bitcoin/commits/pr/pool.11) -> [`pr/pool.12`](https://github.com/ryanofsky/bitcoin/commits/pr/pool.12), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/pool.11-rebase..pr/pool.12)) due to conflict with #18759\n",https://github.com/bitcoin/bitcoin/pull/15719#issuecomment-621362625,621362625,
ryanofsky,2020-04-30T07:22:04Z,"Rebased 3c50af4c76889261d19262086542b44220c74457 -> 044418037a6ead2e9c38f404228ea8536369b683 ([`pr/pool.12`](https://github.com/ryanofsky/bitcoin/commits/pr/pool.12) -> [`pr/pool.13`](https://github.com/ryanofsky/bitcoin/commits/pr/pool.13), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/pool.12-rebase..pr/pool.13)) after #18727 to deal with failures in new CreateWalletFromFile test. Re",https://github.com/bitcoin/bitcoin/pull/15719#issuecomment-621660518,621660518,
ryanofsky,2020-05-01T15:20:12Z,"Rebased 044418037a6ead2e9c38f404228ea8536369b683 -> 26e4ee32273ab232fa3898f86289131a6379b69b ([`pr/pool.13`](https://github.com/ryanofsky/bitcoin/commits/pr/pool.13) -> [`pr/pool.14`](https://github.com/ryanofsky/bitcoin/commits/pr/pool.14), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/pool.13-rebase..pr/pool.14)) due to conflict with #16426\n",https://github.com/bitcoin/bitcoin/pull/15719#issuecomment-622430649,622430649,
ryanofsky,2020-05-04T18:58:56Z,"Rebased 26e4ee32273ab232fa3898f86289131a6379b69b -> 52d152f0bf2543fc6fbb80cdde7ae2249305662f ([`pr/pool.14`](https://github.com/ryanofsky/bitcoin/commits/pr/pool.14) -> [`pr/pool.15`](https://github.com/ryanofsky/bitcoin/commits/pr/pool.15), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/pool.14-rebase..pr/pool.15)) due to conflict with #18699",https://github.com/bitcoin/bitcoin/pull/15719#issuecomment-623644521,623644521,
ryanofsky,2020-05-05T04:59:05Z,Travis error `test_framework.authproxy.JSONRPCException: non-mandatory-script-verify-flag (Signature must be zero for failed CHECK(MULTI)SIG operation) (-26)` in sendrawtransaction call in rpc_rawtransaction.py in bionic C++17 build https://travis-ci.org/github/bitcoin/bitcoin/jobs/683072285#L5042 seems unrelated. It's reported in #18803,https://github.com/bitcoin/bitcoin/pull/15719#issuecomment-623856806,623856806,
ryanofsky,2020-05-12T12:37:09Z,"Updated 78a42ce0251426051ff789e64a9bfae3200d1f83 -> de030e6258251fba2159788c2bdf135f6e2369f3 ([`pr/pool.17`](https://github.com/ryanofsky/bitcoin/commits/pr/pool.17) -> [`pr/pool.18`](https://github.com/ryanofsky/bitcoin/commits/pr/pool.18), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/pool.17..pr/pool.18)) adding commit descriptions, locator test, and partially fixing travis macos er",https://github.com/bitcoin/bitcoin/pull/15719#issuecomment-627315723,627315723,
ariard,2020-06-04T00:42:57Z,"Actually rebasing #17484, I think to avoid breaking anti-fee snipping it would be better to setup IBD state at mempool/block notification sync. Ideally calling `updateBlockTip` at any ending of block rescan. But likely I need to wait for `ScanForWalletTransactions` being moved inside the node, if I want to drop `isInitialBlockDownload`\n\nIs this PR ready for review ?",https://github.com/bitcoin/bitcoin/pull/15719#issuecomment-638533220,638533220,
vahidjalaliii,2020-06-04T01:54:35Z,".\n\nدر تاریخ چهارشنبه ۳ ژوئن ۲۰۲۰،‏ ۳:۰۵ DrahtBot <notifications@github.com>\nنوشت:\n\n> 🐙 This pull request conflicts with the target branch and needs rebase\n> <https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes>\n> .\n>\n> —\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com",https://github.com/bitcoin/bitcoin/pull/15719#issuecomment-638554158,638554158,
ryanofsky,2020-06-05T13:49:26Z,"re: ariard https://github.com/bitcoin/bitcoin/pull/15719#issuecomment-638533220\n> Is this PR ready for review ?\n\nPR is complete and ready for review. Only caveat is that the unit test is triggering thread sanitizer errors. The errors look like they could be real, but I think they are errors in the test itself, not the code, and I'll look into them.\n\n---\n\nRebased 9ffa3622484c55f15bd30",https://github.com/bitcoin/bitcoin/pull/15719#issuecomment-639491391,639491391,
rebroad,2021-04-18T20:17:26Z,"@ryanofsky I've not looked at this yet, but does this cause the GUI to become available sooner (e.g. the rescan can run after the splash screen rather than during)? I'd test this if so, or if I understand what benefits it provides - e.g. I'm not sure why we'd want parallel multiwallet scans - unless it means it would scan them all faster in total, for example.",https://github.com/bitcoin/bitcoin/pull/15719#issuecomment-822054257,822054257,
ryanofsky,2021-04-21T12:49:50Z,"Thanks for looking at this.\n\n> @ryanofsky I've not looked at this yet, but does this cause the GUI to become available sooner (e.g. the rescan can run after the splash screen rather than during)?\n\nYes, this separates opening a wallet from attaching to the node, so should it be possible to interact with the wallet before the rescan finishes if GUI is changed to remove the rescan dialog or m",https://github.com/bitcoin/bitcoin/pull/15719#issuecomment-824033825,824033825,
ryanofsky,2021-05-19T18:16:58Z,"Rebased 8aa64ef7f5d6e02407aa09904092e0213dcdd2c4 -> d36335f643f309790c4b26307eca622a3a9ed688 ([`pr/pool.31`](https://github.com/ryanofsky/bitcoin/commits/pr/pool.31) -> [`pr/pool.32`](https://github.com/ryanofsky/bitcoin/commits/pr/pool.32), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/pool.31-rebase..pr/pool.32)) due to conflict with #20773\nRebased d36335f643f309790c4b26307eca622a3",https://github.com/bitcoin/bitcoin/pull/15719#issuecomment-844352091,844352091,
practicalswift,2019-04-02T07:43:06Z,Could use `LOCKS_EXCLUDED` annotations for those? ,https://github.com/bitcoin/bitcoin/pull/15719#discussion_r271169011,271169011,src/interfaces/chain.cpp
promag,2019-04-02T13:05:07Z,Mempool can change after the snapshot but before registering the interface and so those changes will be missed.,https://github.com/bitcoin/bitcoin/pull/15719#discussion_r271292127,271292127,src/interfaces/chain.cpp
ryanofsky,2019-04-02T15:09:41Z,"re: https://github.com/bitcoin/bitcoin/pull/15719#discussion_r271169011\n\n> Could use LOCKS_EXCLUDED annotations for those?\n\nAdded annotations. Effect is kind of limited since this is an override and these mutexes aren't accessible where this is called in the wallet, but it still seems better to have these annotations than not.\n\nLonger term, after more changes like this and #15632, whic",https://github.com/bitcoin/bitcoin/pull/15719#discussion_r271355792,271355792,src/interfaces/chain.cpp
ryanofsky,2019-04-02T15:09:45Z,"re: https://github.com/bitcoin/bitcoin/pull/15719#discussion_r271292127\n\n> Mempool can change after the snapshot but before registering the interface and so those changes will be missed.\n\nThis isn't true, and the comment below, ""Hold locks while scheduling the task so notifications about added and removed transactions after the snapshot arrive after the snapshot"" is specifically referring ",https://github.com/bitcoin/bitcoin/pull/15719#discussion_r271355828,271355828,src/interfaces/chain.cpp
promag,2019-04-02T15:50:29Z,But the queue can be non empty when CallFunctionInValidationInterfaceQueue is called?,https://github.com/bitcoin/bitcoin/pull/15719#discussion_r271375746,271375746,src/interfaces/chain.cpp
ryanofsky,2019-04-02T16:10:27Z,"re: https://github.com/bitcoin/bitcoin/pull/15719#discussion_r271375746\n\n> But the queue can be non empty when CallFunctionInValidationInterfaceQueue is called?\n\nI think you are referring to a different problem now (problem of old notifications being received when they shouldn't be, which is different from the problem of new notifications not being received when they should be). The proble",https://github.com/bitcoin/bitcoin/pull/15719#discussion_r271384607,271384607,src/interfaces/chain.cpp
promag,2019-04-02T17:12:10Z,"`AddToProcessQueue` tricked me, what really goes to that queue are notifications.",https://github.com/bitcoin/bitcoin/pull/15719#discussion_r271409110,271409110,src/interfaces/chain.cpp
promag,2019-04-02T17:16:02Z,"also ""arrive after task() is called"" right?",https://github.com/bitcoin/bitcoin/pull/15719#discussion_r271410636,271410636,src/interfaces/chain.cpp
ryanofsky,2019-04-02T18:04:40Z,"re: https://github.com/bitcoin/bitcoin/pull/15719#discussion_r271410636\n\n> also ""arrive after task() is called"" right?\n\nYes task() is what sends the snapshot, so that's what this is referring to. Replaced ""transactions after the snapshot arrive after the snapshot"" with ""transactions after taking the snapshot arrive after the snapshot callback in task()"" to reference it and be more specific",https://github.com/bitcoin/bitcoin/pull/15719#discussion_r271430419,271430419,src/interfaces/chain.cpp
ryanofsky,2019-04-12T14:33:46Z,"@jnewbery points out that it is too early to handle mempool transactions here at this point, because the rescan hasn't happened yet. Processing a mempool transaction before the rescan could result in the `IsFromMe` check in `AddToWalletIfInvolvingMe` failing to add the transaction to the walelt when it depends on a block that hasn't been scanned yet.\n\nSo the mempool loop here needs to be moved",https://github.com/bitcoin/bitcoin/pull/15719#discussion_r274932794,274932794,src/wallet/wallet.cpp
jnewbery,2019-04-12T14:36:43Z,"I think moving the sync-from-mempool function to above the initial rescan breaks the (undocumented) expectation that the wallet is notified of transactions in dependency order. In fact, this was slightly broken by #15652, but this PR makes it worse.\n\nPrior to dynamically-loaded wallets, the wallet would always receive a transaction after it had received all of that transaction's ancestors. Tha",https://github.com/bitcoin/bitcoin/pull/15719#discussion_r274934195,274934195,src/wallet/wallet.cpp
ryanofsky,2019-04-12T15:03:53Z,I also wonder if there could brokenness in the case where a reorg happens during a `rescanblockchain` or `importmulti` RPC call (these rescans are different because cs_main isn't held the whole time).,https://github.com/bitcoin/bitcoin/pull/15719#discussion_r274946683,274946683,src/wallet/wallet.cpp
ryanofsky,2020-04-30T07:36:50Z,"re: https://github.com/bitcoin/bitcoin/pull/15719#discussion_r274932794\n\n> @jnewbery points out that it is too early to handle mempool transactions here at this point\n\nThis is resolved in the current version of the PR which integrates rescans and finishes recsanning before creating the mempool snapshot",https://github.com/bitcoin/bitcoin/pull/15719#discussion_r417813966,417813966,src/wallet/wallet.cpp
ryanofsky,2020-04-30T07:51:34Z,"re: https://github.com/bitcoin/bitcoin/pull/15719#discussion_r274934195\n\n> I think to fix this, we need to:\n> \n> * move the sync-from-mempool to after the rescan call, while cs_main is still held\n> * sort the mempool txs by using `mempool.infoAll()` before notifying the wallet.\n> \n> We should also document that the wallet expects to see transactions in order!\n\nMoving sync is done",https://github.com/bitcoin/bitcoin/pull/15719#discussion_r417821656,417821656,src/wallet/wallet.cpp
ariard,2020-05-08T08:32:38Z,"Block time variability is unclear, you mean the absence of order guarantee between `nTime`  and `nTimeFirstKey`?",https://github.com/bitcoin/bitcoin/pull/15719#discussion_r422018373,422018373,src/wallet/wallet.cpp
ariard,2020-05-08T08:37:14Z,"This part of comment may be made more intuitively instead of one chunk, like ""Call MempoolFn with a snapshot of transaction before firing transactions back to caller"".",https://github.com/bitcoin/bitcoin/pull/15719#discussion_r422020481,422020481,src/interfaces/chain.h
ariard,2020-05-08T08:40:37Z,"May we drop either or `scan_locator` or `scan_time`, like if wallet first key is older that locator use it as a starting point, if not use wallet last block `nTime`. Do we still really need wallet locator ?",https://github.com/bitcoin/bitcoin/pull/15719#discussion_r422022021,422022021,src/interfaces/chain.h
ariard,2020-05-08T08:44:36Z,"I think it would be better to rename `handleNotifications`. IMO it does 3 different tasks:\n* trigger rescan\n* sync with mempool\n* register notification\n\nI'm fine with doing all of three in same functions rather than 3 chunks for each, but name could be something like `syncClient` ?\n\nAlso you may be interested by rescan but not mempool-sync and therefore it may be made optional.",https://github.com/bitcoin/bitcoin/pull/15719#discussion_r422023756,422023756,src/interfaces/chain.h
ariard,2020-05-08T08:46:05Z,You may precise tip included.,https://github.com/bitcoin/bitcoin/pull/15719#discussion_r422024446,422024446,src/interfaces/chain.h
ariard,2020-05-08T08:47:26Z,Isn't taking `cs_main` lock avoid block tip increase ?,https://github.com/bitcoin/bitcoin/pull/15719#discussion_r422025061,422025061,src/interfaces/chain.cpp
ryanofsky,2020-05-08T15:54:30Z,"re: https://github.com/bitcoin/bitcoin/pull/15719#discussion_r422025061\n\n> Isn't taking `cs_main` lock avoid block tip increase ?\n\nNope, cs_main isn't held while rescanning so node will not lock up when loading a wallet",https://github.com/bitcoin/bitcoin/pull/15719#discussion_r422223004,422223004,src/interfaces/chain.cpp
ryanofsky,2020-05-08T15:55:07Z,"re: https://github.com/bitcoin/bitcoin/pull/15719#discussion_r422020481\n\n> This part of comment may be made more intuitively instead of one chunk, like ""Call MempoolFn with a snapshot of transaction before firing transactions back to caller"".\n\nThat seems good. I shortened existing description to match it",https://github.com/bitcoin/bitcoin/pull/15719#discussion_r422223330,422223330,src/interfaces/chain.h
ryanofsky,2020-05-08T15:55:29Z,"re: https://github.com/bitcoin/bitcoin/pull/15719#discussion_r422022021\n\n> May we drop either or `scan_locator` or `scan_time`, like if wallet first key is older that locator use it as a starting point, if not use wallet last block `nTime`. Do we still really need wallet locator ?\n\nI think the idea is to allow scanning as little as necessary. Both arguments are optional so callers aren't o",https://github.com/bitcoin/bitcoin/pull/15719#discussion_r422223548,422223548,src/interfaces/chain.h
ryanofsky,2020-05-08T15:55:43Z,"re: https://github.com/bitcoin/bitcoin/pull/15719#discussion_r422024446\n\n> You may precise tip included.\n\nThis seems precise, but I may not be seeing what is is unclear. The important point is that there shouldn't be any gap between the tip and the blockConnected or blockDisconnected notification",https://github.com/bitcoin/bitcoin/pull/15719#discussion_r422223665,422223665,src/interfaces/chain.h
ryanofsky,2020-05-08T15:55:55Z,"re: https://github.com/bitcoin/bitcoin/pull/15719#discussion_r422023756\n\n> I think it would be better to rename `handleNotifications`. IMO it does 3 different tasks:\n> \n> * trigger rescan\n> * sync with mempool\n> * register notification\n> \n> I'm fine with doing all of three in same functions rather than 3 chunks for each, but name could be something like `syncClient` ?\n> \n> Also",https://github.com/bitcoin/bitcoin/pull/15719#discussion_r422223801,422223801,src/interfaces/chain.h
ryanofsky,2020-05-08T15:57:50Z,"re: https://github.com/bitcoin/bitcoin/pull/15719#discussion_r422018373\n\n> Block time variability is unclear, you mean the absence of order guarantee between `nTime` and `nTimeFirstKey`?\n\nThis is not a new comment (just moved) but it is just referring to TIMESTAMP_WINDOW",https://github.com/bitcoin/bitcoin/pull/15719#discussion_r422224798,422224798,src/wallet/wallet.cpp
MarcoFalke,2021-10-27T10:09:50Z,Can remove this after #23370 ,https://github.com/bitcoin/bitcoin/pull/15719#discussion_r737314436,737314436,test/sanitizer_suppressions/tsan
