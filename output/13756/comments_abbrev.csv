practicalswift,2018-07-25T15:58:55Z,"Concept ACK\n\nNice work!",https://github.com/bitcoin/bitcoin/pull/13756#issuecomment-407805855,407805855,
gmaxwell,2018-07-25T17:53:17Z,"Perhaps fodder for a separate PR,  but listtransactions and the GUI should get indicators that an incoming payment was dirty when received.  By having that parties that reuse addresses will start getting a frowny-recycle-icon or whatever on their payments, which will increase awareness that their behaviour has downsides.\n\nEdit: I see I'm repeating myself from an earlier PR. :P",https://github.com/bitcoin/bitcoin/pull/13756#issuecomment-407840763,407840763,
kallewoof,2018-07-26T08:39:14Z,"@promag \n\n> Should we also disallow sending to a dirty address? If we don't then those coins can't be spend if the flag is set, or am I missing something?\n\nYou can always spend them by using the `allowdirty` flag or by manually selecting them using coin control (via `createrawtx` or via the GUI).\n\nI do think we should at least warn users about that kind of behaviour though, but it feel",https://github.com/bitcoin/bitcoin/pull/13756#issuecomment-408022590,408022590,
DrahtBot,2018-07-26T09:27:14Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#16215](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16215.html) (gui: Refactor wallet controller activities ",https://github.com/bitcoin/bitcoin/pull/13756#issuecomment-408036332,408036332,
Sjors,2018-07-26T19:47:40Z,"@gmaxwell:\n> the GUI should get indicators that an incoming payment was dirty when received\n\nI think ""dirty"" is a confusing concept. Maybe add an exclamation mark (or a detective icon) next to the transaction and when the user clicks on that, say something like ""This address has been used before, for privacy reasons it's better to create a new address each time you wish to receive coins, eve",https://github.com/bitcoin/bitcoin/pull/13756#issuecomment-408214120,408214120,
promag,2018-07-26T19:58:25Z,"> Maybe add an exclamation mark\n\n@Sjors I like that, and then a tooltip/popup could explain the warning.\n\n> `-avoidreuse` doesn't really capture the above. It's too aggressive / binary an option to be useful in a GUI IMO.\n\n""Avoid"" is not binary right?",https://github.com/bitcoin/bitcoin/pull/13756#issuecomment-408217092,408217092,
kallewoof,2018-07-27T02:15:11Z,"> I think ""dirty"" is a confusing concept.\n\nIt's called ""dirty"" in the CLI as well, but there's also a different concept in the wallet code called 'dirty' which is completely unrelated. In short, it may be a good idea to rename this feature, but I can't think of a good name. ""Compromised"" is too long. ""Seen"" is too vague. @luke-jr any ideas?\n\n> Detective icon is a nice hint that there's pri",https://github.com/bitcoin/bitcoin/pull/13756#issuecomment-408290580,408290580,
Sjors,2018-07-27T09:45:10Z,"> What about it is too aggressive?\n\nA user might receive their entire salary on a reused address. If the current implementation of `-avoidreuse=1` were to become the default, then the UI would need to honor that setting. That means at minimum asking the user for confirmation when they're about to spend these funds. But that would be a very unintuitive question. The Spend screen is not the righ",https://github.com/bitcoin/bitcoin/pull/13756#issuecomment-408369264,408369264,
kallewoof,2018-07-28T03:00:26Z,"@Sjors That makes sense to me. It seems like adding this default off (as is the current proposal) makes the most sense.\n\nGUI work seems like it will be a good deal of work to get right, but in the meantime, there are real (advanced) users who would benefit from having this feature now, even without the GUI/intuitive component.",https://github.com/bitcoin/bitcoin/pull/13756#issuecomment-408578113,408578113,
luke-jr,2018-07-29T22:02:24Z,"N.B. This doesn't actually fully solve #10065, since transactions received with a dirty address are still shown in the GUI / RPC.",https://github.com/bitcoin/bitcoin/pull/13756#issuecomment-408709347,408709347,
luke-jr,2018-07-29T22:05:40Z,"(as for a term... ""reused"" perhaps? I don't know that this flag should be exposed as-is, but more like a ""will never confirm until spent"" status)",https://github.com/bitcoin/bitcoin/pull/13756#issuecomment-408709493,408709493,
kallewoof,2018-07-30T04:20:19Z,"I think ""reused"" is a bit vague, and doesn't convey the fact it's considered a thing to be avoided if possible, in the way that ""dirty"" does.",https://github.com/bitcoin/bitcoin/pull/13756#issuecomment-408742497,408742497,
kallewoof,2018-07-30T06:20:05Z,"Note: I realized the test was invalid, as `getbalance` would return only clean amount, so I added support to `getbalance` and fixed the tests.",https://github.com/bitcoin/bitcoin/pull/13756#issuecomment-408758746,408758746,
jnewbery,2018-07-30T16:33:19Z,"It feels to me that this should be a persistent per-wallet setting, rather than a global config option (I think we should be eliminating the global wallet config options wherever possible. See #13044)",https://github.com/bitcoin/bitcoin/pull/13756#issuecomment-408927041,408927041,
kallewoof,2018-07-30T20:23:22Z,"I thought that was a PR @jonasschnelli was working on that wasn't merged yet (the no private keys one), but I could be mistaken. Either way, makes sense to make it persistent-per-wallet.",https://github.com/bitcoin/bitcoin/pull/13756#issuecomment-408997556,408997556,
jnewbery,2018-07-30T21:13:03Z,"> a PR @jonasschnelli was working on that wasn't merged yet (the no private keys one)\n\n#9662 - merged!",https://github.com/bitcoin/bitcoin/pull/13756#issuecomment-409012354,409012354,
kallewoof,2018-07-30T21:14:35Z,Cool! I was trying to find that one.,https://github.com/bitcoin/bitcoin/pull/13756#issuecomment-409012769,409012769,
kallewoof,2018-08-02T04:55:24Z,"After @gmaxwell comment [here](https://github.com/bitcoin/bitcoin/pull/13801#issuecomment-409262305), the new funding approach would work as follows:\n\n1. Create output groups of all dirty coins\n2. See if any of them fulfil the desired payment amount including fees up to maybe 3x the amount, and return that group if found. MARK CHANGE AS DIRTY\n3. Try coin select using only clean coins\n\n",https://github.com/bitcoin/bitcoin/pull/13756#issuecomment-409805448,409805448,
kallewoof,2018-08-03T06:57:55Z,@jnewbery Code is now using the wallet flag feature. The `-avoidreuse` flag now determines the default value for new wallets instead. (Also ping @jonasschnelli regarding wallet flag stuff.),https://github.com/bitcoin/bitcoin/pull/13756#issuecomment-410163272,410163272,
kallewoof,2018-09-11T08:12:16Z,@jnewbery Thanks for review! I believe I've addressed all your nits.,https://github.com/bitcoin/bitcoin/pull/13756#issuecomment-420186910,420186910,
kallewoof,2018-09-13T05:19:53Z,@jnewbery Thanks a lot for all the feedback. I have addressed most of your nits (a few remain up in the air).,https://github.com/bitcoin/bitcoin/pull/13756#issuecomment-420886678,420886678,
kallewoof,2018-10-26T07:23:49Z,"@Sjors Thanks a lot for the detailed review.\n\n> the flag name `disable_private_keys` in `WALLET_FLAG_MAP` is inconsistent with the output of `getwalletinfo` (`private_keys_enabled`)\n\nYeah. This is remnant from a different PR which uses both variants. I think it should be resolved, but probably in its own PR.\n\n> the use of both allow_dirty and avoid_reuse is confusing. I find avoid_reus",https://github.com/bitcoin/bitcoin/pull/13756#issuecomment-433312984,433312984,
kallewoof,2018-10-26T07:25:35Z,"@Sjors\n\nI can't comment on the ""Update: it throws now"" comment for some reason. It does throw, but it also returns true/false for successful calls, where false means ""flag unchanged"" and true means ""flag changed"".",https://github.com/bitcoin/bitcoin/pull/13756#issuecomment-433313427,433313427,
luke-jr,2018-11-09T17:29:47Z,"Dirty should be set when receiving, not when the received coins are then spent.",https://github.com/bitcoin/bitcoin/pull/13756#issuecomment-437433948,437433948,
kallewoof,2018-11-12T05:48:05Z,"@luke-jr \n\n> Dirty should be set when receiving, not when the received coins are then spent.\n\nThis is done in `AddToWallet`, so it looks like it is doing what you are asking for:\n\nhttps://github.com/bitcoin/bitcoin/blob/dbfb209900cb6d4e6af3c0eb6ffa96f20f1dd123/src/wallet/wallet.cpp#L880-L886\n\nThe test `test_fund_send_fund_send` ensures that this behavior is the case, I think. Is it",https://github.com/bitcoin/bitcoin/pull/13756#issuecomment-437764081,437764081,
kallewoof,2018-11-19T04:16:07Z,"@MeshCollider Thanks much for the review!\n\n> The split into multiple commits is nice but perhaps a little too much, some squashing would be good e.g. ""wallet: add MUTABLE_WALLET_FLAGS"" -> ""wallet/rpc: add setwalletflag RPC command for modifying wallet flag post creation"", etc.\n\nI will try to squash stuff. Agree about the two commits you mentioned.",https://github.com/bitcoin/bitcoin/pull/13756#issuecomment-439766907,439766907,
Sjors,2018-11-19T15:17:05Z,"I wrote earlier:\n> `setwalletflag avoid_reuse false` should mark used destinations as dirty or warn that it doesn't\n\nI meant to say `setwalletflag avoid_reuse true` should go through existing transactions in the wallet and mark things dirty as needed. Or the help text and/or release notes should warn that it doesn't.\n\n`getbalance ""*"" 0 false false` ignores unconfirmed transactions (pre-e",https://github.com/bitcoin/bitcoin/pull/13756#issuecomment-439927756,439927756,
meshcollider,2018-11-19T19:47:44Z,"@Sjors getbalance is preexisting yep, see #14602",https://github.com/bitcoin/bitcoin/pull/13756#issuecomment-440019200,440019200,
kallewoof,2018-11-20T04:29:35Z,"@Sjors Thanks for testing and for valuable feedback.\n\n> > setwalletflag avoid_reuse false should mark used destinations as dirty or warn that it doesn't\n> \n> I meant to say setwalletflag avoid_reuse true should go through existing transactions in the wallet and mark things dirty as needed. Or the help text and/or release notes should warn that it doesn't.\n\nI somehow forgot about this, ",https://github.com/bitcoin/bitcoin/pull/13756#issuecomment-440134145,440134145,
kallewoof,2018-11-28T01:43:22Z,"@Sjors https://github.com/bitcoin/bitcoin/pull/13756#discussion_r236677538 I can't see what nit this is referring to -- is it the ""use `AVOID_REUSE`, not `AVOIDREUSE`"" one? Then cool, as I believe I addressed that.",https://github.com/bitcoin/bitcoin/pull/13756#issuecomment-442286415,442286415,
Sjors,2018-11-28T14:25:59Z,"@kallewoof correct, looks like I responded to an outdated comment somehow.",https://github.com/bitcoin/bitcoin/pull/13756#issuecomment-442464663,442464663,
Sjors,2019-01-30T11:54:29Z,"utACK 23a15c5\n\nChanges since my last review: rebase, some commits reorganised, new RPC help syntax, cosmetic changes: \n\n```sh\nPREV=3bff2a5 N=14 && git range-diff `git merge-base --all HEAD $PREV`...$PREV HEAD~$N...HEAD\n```",https://github.com/bitcoin/bitcoin/pull/13756#issuecomment-458917539,458917539,
kallewoof,2019-02-14T06:00:41Z,"Squashed. @Sjors I believe the code now acts the same way as master, i.e.\n\n* blank_wallet → blank_wallet\n* disable_privkeys → disable_privkeys\n* blank_wallet | disable_privkeys → disable_privkeys\n",https://github.com/bitcoin/bitcoin/pull/13756#issuecomment-463501498,463501498,
Sjors,2019-02-14T10:05:37Z,"@kallewoof you're right, it's the same as on master. utACK ec26b2e",https://github.com/bitcoin/bitcoin/pull/13756#issuecomment-463568472,463568472,
kallewoof,2019-02-14T11:25:45Z,"@Sjors The big question is, does it even matter if both flags are set? I would love to not have those 5 lines of cruft in there, if they don't make a difference. I should hunt down whoever wrote that code and ask, I guess. (And/or verify myself.)",https://github.com/bitcoin/bitcoin/pull/13756#issuecomment-463592765,463592765,
Sjors,2019-02-14T15:53:20Z,"I'm not sure, but perhaps it's better dealt with in a followup to this as well as #14021. cc @achow101\n\nIt seems to me that when you create a wallet without private keys, as long as there's no additional argument to feed the new wallet with public keys, it's by definition blank. Problem is that the RPC needs a default and we probably don't want to make that too complicated. A sane default for ",https://github.com/bitcoin/bitcoin/pull/13756#issuecomment-463679517,463679517,
Sjors,2019-03-05T17:42:18Z,utACK rebased 74581ff,https://github.com/bitcoin/bitcoin/pull/13756#issuecomment-469779370,469779370,
kallewoof,2019-04-10T04:22:18Z,"~~Rebased, and refactored code based on #15780 cachable accounts (note: first commit here is from that PR).~~ (merged)\n\nThere is now a isminetype called ""ISMINE_USED"" which is set for the 'allow reuse' caches.",https://github.com/bitcoin/bitcoin/pull/13756#issuecomment-481527733,481527733,
kallewoof,2019-04-25T04:46:01Z,"@Sjors Very good point about `-avoidpartialspends`. I can't believe I forgot about that. I think as you say this flag should be enabled by default if `avoid_reuse` is set in the wallet.\n\nEdit: enabled, see c831a40.",https://github.com/bitcoin/bitcoin/pull/13756#issuecomment-486517994,486517994,
Sjors,2019-04-25T07:50:09Z,Don't forget to update the bitcoind docs for this new param behavior.,https://github.com/bitcoin/bitcoin/pull/13756#issuecomment-486558648,486558648,
kallewoof,2019-04-26T05:22:45Z,"@Sjors Right, thanks. Done. I think a follow-up PR should convert `-avoidpartialspends` into a wallet flag that is auto-enabled when `avoid_reuse` flag is set/enabled.",https://github.com/bitcoin/bitcoin/pull/13756#issuecomment-486929779,486929779,
Sjors,2019-05-12T13:18:36Z,"utACK 69ec084, compared to my previous utACK:\n* renamed  `SetUsedState` to `SetUsedDestinationState`, and `IsUsed` to `IsUsedDestination`\n* param index fixed (@MarcoFalke it would be nice if we didn't need brittle stuff like `request.params[3]` in the RPC)\n* improved documentation",https://github.com/bitcoin/bitcoin/pull/13756#issuecomment-491595311,491595311,
kallewoof,2019-05-20T03:42:22Z,"@jnewbery Thanks for the review! It's 100% my responsibility to get people to review, so no worries at all. :)",https://github.com/bitcoin/bitcoin/pull/13756#issuecomment-493829217,493829217,
jnewbery,2019-05-20T21:53:15Z,Looking better. Thanks for the quick response to my review. I had just a few more comments inline.,https://github.com/bitcoin/bitcoin/pull/13756#issuecomment-494164506,494164506,
kallewoof,2019-05-21T03:36:10Z,"@jnewbery Thanks for follow-up review! I believe I addressed everything you brought up.\n\nEdit: will address the flag comment after @achow101 or someone confirms that it's OK. I also left ""caveat"" as is internally. I can switch that to warning too, but it didn't feel super necessary.",https://github.com/bitcoin/bitcoin/pull/13756#issuecomment-494227041,494227041,
kallewoof,2019-05-24T05:45:31Z,"@jnewbery Thanks a lot for all the feedback. I updated `listunspent` to (1) show reused UTXOs and (2) show a flag ""reused"" if the wallet has ""avoid_reuse"" enabled.\n\nI also updated the tests to check that the listunspent results match what you would expect after each send.\n\n~~Edit: I realized that someone added an `UnsetWalletFlag` method at some point. I've removed that and switched the 4 ",https://github.com/bitcoin/bitcoin/pull/13756#issuecomment-495480211,495480211,
jnewbery,2019-05-24T16:00:41Z,"utACK 3ae67c42386c7c34b1e4d6bafe0d2233ae4523ea\n\n@achow101's comment here https://github.com/bitcoin/bitcoin/pull/13756#discussion_r287415117 could be addressed in a follow-up PR.",https://github.com/bitcoin/bitcoin/pull/13756#issuecomment-495688986,495688986,
jnewbery,2019-05-28T14:21:40Z,utACK 66f3e9780d916d9983bab1c153ab4f303d55bbd0,https://github.com/bitcoin/bitcoin/pull/13756#issuecomment-496538044,496538044,
kallewoof,2019-05-29T09:50:32Z,"Removed secondary parameter to `SetWalletFlag` and restored the `UnsetWalletFlag` method, and using that instead now.",https://github.com/bitcoin/bitcoin/pull/13756#issuecomment-496867482,496867482,
jnewbery,2019-06-06T07:34:40Z,"ACK 5ebc6b0eb\n\n(Reran the rebase from 66f3e97 myself and checked the diff)",https://github.com/bitcoin/bitcoin/pull/13756#issuecomment-499383533,499383533,
laanwj,2019-06-17T08:58:51Z,"Concept and code-review ACK 5ebc6b0eb267e0552c66fffc5e5afe7df8becf80\n\nWould be nice if this had final sign-off by @meshcollider as wallet maintainer before merge.\n\nThanks for working on privacy!\n```\n//! Forbids inclusion of dirty (previously used) addresses\n```\nHehe. If this use of ""dirty addresses"" would catch on, maybe people would start avoiding re-using addresses out of a sense",https://github.com/bitcoin/bitcoin/pull/13756#issuecomment-502596462,502596462,
kallewoof,2019-06-17T11:03:52Z,"@laanwj https://github.com/bitcoin/bitcoin/commit/f3855781fdc52382b7ccfd0060623fa8ab1541b5 is not the right commit, FYI!",https://github.com/bitcoin/bitcoin/pull/13756#issuecomment-502637251,502637251,
jtimon,2019-06-17T16:11:16Z,"Since I don't know the wallet code all that well, it would take a lot of time to be able to properly review this, but concept ACK.",https://github.com/bitcoin/bitcoin/pull/13756#issuecomment-502749488,502749488,
fanquake,2019-06-18T00:22:13Z,@achow101 Might also want to take a final look?,https://github.com/bitcoin/bitcoin/pull/13756#issuecomment-502897843,502897843,
laanwj,2019-06-18T07:54:26Z,"> @laanwj f385578 is not the right commit, FYI!\n\nThanks for noticing, fixed, that was a copy/paste error I was copying a lot of commit hashes for #16200.",https://github.com/bitcoin/bitcoin/pull/13756#issuecomment-502991257,502991257,
meshcollider,2019-06-18T12:36:16Z,"Code review ACK https://github.com/bitcoin/bitcoin/pull/13756/commits/5ebc6b0eb267e0552c66fffc5e5afe7df8becf80\n\nOnly lightly reviewed the test (8f2e208f7c0468f9ba92bc789a698281b1c81284) but the actual code looks good, thank you @kallewoof for being so proactive in addressing review comments and rebasing! About time this finally gets merged. I'll wait a day for Andrew to review but otherwise I'",https://github.com/bitcoin/bitcoin/pull/13756#issuecomment-503084634,503084634,
achow101,2019-06-18T15:09:45Z,"ACK 5ebc6b0eb267e0552c66fffc5e5afe7df8becf80 modulo above nits\n\nReviewed the code and did a couple of manual tests.\n\nStill not a fan of adding new isminetypes but I won't block this on that.",https://github.com/bitcoin/bitcoin/pull/13756#issuecomment-503179466,503179466,
meshcollider,2019-06-18T23:30:22Z,"The few remaining nits are not worth blocking merge on this, it has waited long enough. A follow-up PR to address them would be good.",https://github.com/bitcoin/bitcoin/pull/13756#issuecomment-503349047,503349047,
Sjors,2019-06-18T23:52:09Z,I took a very brief `range-diff` look at the changes since my last review 69ec084ace48378c2eecd1b6568639ecfb50469b. Not too many changes. Congrats on the merge!,https://github.com/bitcoin/bitcoin/pull/13756#issuecomment-503353207,503353207,
promag,2018-07-25T13:28:00Z,"Commit ""test: Add test for avoidreuse feature""\n\nUse `subtractfeefromamount=true` below instead?",https://github.com/bitcoin/bitcoin/pull/13756#discussion_r205107183,205107183,test/functional/feature_avoidreuse.py
promag,2018-07-25T13:31:04Z,IMO could be something like `-avoidaddressreuse`.,https://github.com/bitcoin/bitcoin/pull/13756#discussion_r205108227,205108227,src/wallet/init.cpp
promag,2018-07-25T13:31:38Z,"Commit ""wallet: add m_allow_dirty_addresses flag to coin control object""\n\nCould initialize here?",https://github.com/bitcoin/bitcoin/pull/13756#discussion_r205108432,205108432,src/wallet/coincontrol.h
promag,2018-07-25T13:32:22Z,"Commit ""wallet: enable avoidreuse feature""\n\nWhy is this here? Move up?\n\nSame in `CWallet::IsDirty` below.",https://github.com/bitcoin/bitcoin/pull/13756#discussion_r205108796,205108796,src/wallet/wallet.cpp
promag,2018-07-25T13:33:47Z,"Commit ""wallet: enable avoidreuse feature""\n\nInstead of nesting, could early return here:\n\n```cpp\nif (!srctx) return;\n```\n\nSame in `CWallet::IsDirty` below.",https://github.com/bitcoin/bitcoin/pull/13756#discussion_r205109362,205109362,src/wallet/wallet.cpp
promag,2018-07-25T13:36:14Z,"Commit ""wallet: enable avoidreuse feature""\n\nCould add a `g_allow_dirty_addresses` instead?",https://github.com/bitcoin/bitcoin/pull/13756#discussion_r205110349,205110349,src/wallet/wallet.cpp
kallewoof,2018-07-26T08:10:27Z,"Everything is initialized in `SetNull()`. In some cases, you can't initialize in the `.h` file because no `gArgs` available at compile time.",https://github.com/bitcoin/bitcoin/pull/13756#discussion_r205365896,205365896,src/wallet/coincontrol.h
kallewoof,2018-07-26T08:10:57Z,This may be artifact from previous iteration. Removing.,https://github.com/bitcoin/bitcoin/pull/13756#discussion_r205366021,205366021,src/wallet/wallet.cpp
kallewoof,2018-07-26T08:11:49Z,"Might be worth it, yeah.",https://github.com/bitcoin/bitcoin/pull/13756#discussion_r205366264,205366264,src/wallet/wallet.cpp
kallewoof,2018-07-26T08:29:11Z,"Fine for `SetDirtyState` but `IsDirty` returns `false` in two cases; (1) `!srctx` and (2) `!ExtractDestination(..)`, so fall-through feels cleaner.",https://github.com/bitcoin/bitcoin/pull/13756#discussion_r205371182,205371182,src/wallet/wallet.cpp
practicalswift,2018-09-01T21:10:33Z,Typo found by `codespell`: useable,https://github.com/bitcoin/bitcoin/pull/13756#discussion_r214523103,214523103,test/functional/feature_avoidreuse.py
kallewoof,2018-09-10T00:49:40Z,"> Usable can also be spelled useable, with an e in the middle: both are correct.\n\nhttps://english.stackexchange.com/questions/69709/is-useable-preferred-in-certain-regions-or-just-an-alternate-spelling-of-usa",https://github.com/bitcoin/bitcoin/pull/13756#discussion_r216177810,216177810,test/functional/feature_avoidreuse.py
jnewbery,2018-09-10T19:43:24Z,"My personal preference would be to remove this command line argument, since it's possible to create a wallet with this flag using the `createwallet` RPC, or update an existing wallet's flag with `setwalletflag`. I think it's better to remove it from here because:\n- it's better to have one way to do things\n- in general, I think we should be aiming to reduce the number of command line arguments,",https://github.com/bitcoin/bitcoin/pull/13756#discussion_r216448479,216448479,src/wallet/init.cpp
jnewbery,2018-09-10T19:44:16Z,"I'd prefer to remove this, and make the flag settable through the `createwallet` and `setwalletflag` options (see how `WALLET_FLAG_DISABLE_PRIVATE_KEYS` is set)",https://github.com/bitcoin/bitcoin/pull/13756#discussion_r216448707,216448707,src/wallet/init.cpp
jnewbery,2018-09-10T19:46:58Z,I think this change should be in the _wallet/rpc: add allow_dirty option to sendtoaddress_ commit (not the _wallet/rpc: add include_dirty flag to getbalance command_ commit),https://github.com/bitcoin/bitcoin/pull/13756#discussion_r216449453,216449453,src/wallet/rpcwallet.cpp
jnewbery,2018-09-10T19:47:30Z,"Can we define these in `wallet.h`, so there's only one place to change when adding wallet flags?",https://github.com/bitcoin/bitcoin/pull/13756#discussion_r216449629,216449629,src/wallet/rpcwallet.cpp
jnewbery,2018-09-10T19:48:15Z,I'd prefer not to add this new method. Can we just add a `wallet_flags` field to the `getwalletinfo` return object?,https://github.com/bitcoin/bitcoin/pull/13756#discussion_r216449835,216449835,src/wallet/rpcwallet.cpp
jnewbery,2018-09-10T19:49:45Z,"I don't think this is always necessarily going to be true. The meaning of the upper section/lower section flags are which we can safely ignore if we don't know the meaning of (ie if we open a newer wallet on an older client), not whether the flags are mutable or not.",https://github.com/bitcoin/bitcoin/pull/13756#discussion_r216450254,216450254,src/wallet/rpcwallet.cpp
jnewbery,2018-09-10T19:54:48Z,Should be `wallet_avoidreuse.py`,https://github.com/bitcoin/bitcoin/pull/13756#discussion_r216451827,216451827,test/functional/test_runner.py
kallewoof,2018-09-11T07:07:09Z,"Makes sense. And resolves one TODO (the startup option is ignored for ""fresh"" nodes in the test framework).",https://github.com/bitcoin/bitcoin/pull/13756#discussion_r216564497,216564497,src/wallet/init.cpp
kallewoof,2018-09-11T07:07:54Z,Above change resulted in its removal.,https://github.com/bitcoin/bitcoin/pull/13756#discussion_r216564636,216564636,src/wallet/init.cpp
kallewoof,2018-09-11T07:08:03Z,"Oops, yep. Thanks.",https://github.com/bitcoin/bitcoin/pull/13756#discussion_r216564670,216564670,src/wallet/rpcwallet.cpp
kallewoof,2018-09-11T07:11:02Z,Ahh. Got it.,https://github.com/bitcoin/bitcoin/pull/13756#discussion_r216565279,216565279,src/wallet/rpcwallet.cpp
kallewoof,2018-09-11T07:12:19Z,"Removing it. There's already a ""private_keys_enabled"" and ""avoid_reuse"" entry in the returned value, so I don't think a wallet_flags is even necessary.",https://github.com/bitcoin/bitcoin/pull/13756#discussion_r216565622,216565622,src/wallet/rpcwallet.cpp
kallewoof,2018-09-11T07:40:06Z,Renamed,https://github.com/bitcoin/bitcoin/pull/13756#discussion_r216572474,216572474,test/functional/test_runner.py
jnewbery,2018-09-12T15:00:01Z,"`flags` -> `flag` is a good name change, since `SetWalletFlag()` suggests this function should only be used to change a single flag.\n\nHowever, note that there's nothing in this function to enforce that. This doesn't necessarily need to go in your PR, but we could be more defensive by adding something like:\n\n```\nif (^flag || (flag & (flag-1)) {\n    # flag has no bits set or more than on",https://github.com/bitcoin/bitcoin/pull/13756#discussion_r217068348,217068348,src/wallet/wallet.cpp
jnewbery,2018-09-12T15:09:23Z,"nit: this is a constant, so naming convention says this should be `WALLET_FLAG_MAP`.\n\n(`g_known_wallet_flags` above should also be `KNOWN_WALLET_FLAG`. Perhaps that should be changed as part of this PR?)",https://github.com/bitcoin/bitcoin/pull/13756#discussion_r217072205,217072205,src/wallet/wallet.h
jnewbery,2018-09-12T15:20:40Z,"(same comment goes for all ""dirty"" text in RPC help/interface)\n\nAre we sure we want to introduce the new terminology ""dirty"" into the public-facing API? To me, ""dirty"" doesn't seem intuitive for users. I can imagine lots of users thinking ""why are these coins that I have dirty?"", ""Has someone sent me dirty coins?"", etc.\n\nIs it possible to describe these concepts using the word 'reused' or ",https://github.com/bitcoin/bitcoin/pull/13756#discussion_r217076698,217076698,src/wallet/rpcwallet.cpp
jnewbery,2018-09-12T15:22:23Z,"naming mismatch: you've called it ""value"" here, but ""state"" in the RPC table. I slightly prefer ""value"", but either is fine.",https://github.com/bitcoin/bitcoin/pull/13756#discussion_r217077402,217077402,src/wallet/rpcwallet.cpp
jnewbery,2018-09-12T15:29:31Z,"I'm not sure whether this is the most useful return object. The user wants to know whether the flag has been set or not, not whether the flag was updated or not (they're interested in the final state, not whether it changed).\n\nWould returning an array of flags set or the result of `getwalletinfo` be more helpful?\n\n(just a suggestion - I'm not sure what the best approach is here)",https://github.com/bitcoin/bitcoin/pull/13756#discussion_r217080283,217080283,src/wallet/rpcwallet.cpp
jnewbery,2018-09-12T15:32:22Z,"This early exit prevents the user from being able to unset a flag. If the flag is already set, we'll exit before trying to unset it.",https://github.com/bitcoin/bitcoin/pull/13756#discussion_r217081465,217081465,src/wallet/rpcwallet.cpp
jnewbery,2018-09-12T15:34:33Z,"It should **not** be possible to update the `disable_private_keys` flag after the wallet has been created (because by that time, there are already private keys in the wallet)",https://github.com/bitcoin/bitcoin/pull/13756#discussion_r217082371,217082371,src/wallet/rpcwallet.cpp
jnewbery,2018-09-12T15:36:27Z,naming convention: mamber variable names should be prefixed `m_`,https://github.com/bitcoin/bitcoin/pull/13756#discussion_r217083108,217083108,src/wallet/wallet.h
jnewbery,2018-09-12T15:55:03Z,I don't understand why this `std::string() +` is required,https://github.com/bitcoin/bitcoin/pull/13756#discussion_r217090455,217090455,src/wallet/rpcwallet.cpp
jnewbery,2018-09-12T15:57:25Z,Do you need to stop-start the node here? Can you just `unloadwallet` then `reloadwallet`?,https://github.com/bitcoin/bitcoin/pull/13756#discussion_r217091345,217091345,test/functional/wallet_avoidreuse.py
jnewbery,2018-09-12T16:00:57Z,"I don't think this is sufficient for enabling 'avoid_reuse'. Consider:\n\n- wallet is created without the `avoid_reuse` flag\n- wallet sends from address\n- wallet receives new coins to used address. These are NOT marked as dirty because the `avoid_reuse` flag is not set\n- `avoid_reuse` is enabled with the `setwalletflag` RPC\n- `getbalance`, `sendtoaddress`, etc will all use the reused add",https://github.com/bitcoin/bitcoin/pull/13756#discussion_r217092655,217092655,src/wallet/rpcwallet.cpp
jnewbery,2018-09-12T16:01:33Z,It'd be nice if this tested the `setwalletflag` RPC too.,https://github.com/bitcoin/bitcoin/pull/13756#discussion_r217092893,217092893,test/functional/wallet_avoidreuse.py
kallewoof,2018-09-13T04:28:31Z,"The reason why we've stuck with dirty so far is because of the negative connotation. Note that a coin only becomes dirty if\n\n* you received to an address\n* you spent everything from that address\n* you received to the same address afterwards\n\nImagine walking through mud on the way home. As you go inside, you leave a trail behind on the walkway up to and to the inside of your house, even",https://github.com/bitcoin/bitcoin/pull/13756#discussion_r217257099,217257099,src/wallet/rpcwallet.cpp
kallewoof,2018-09-13T04:29:47Z,"Oops, thanks! Fixed.",https://github.com/bitcoin/bitcoin/pull/13756#discussion_r217257208,217257208,src/wallet/rpcwallet.cpp
kallewoof,2018-09-13T04:31:57Z,"I think being told that your action did nothing vs your action did something is a good UI, personally.\n\nPerhaps it should actually *throw* instead of returning false, though...",https://github.com/bitcoin/bitcoin/pull/13756#discussion_r217257442,217257442,src/wallet/rpcwallet.cpp
kallewoof,2018-09-13T04:32:22Z,"D'oh, thanks. Fixed.",https://github.com/bitcoin/bitcoin/pull/13756#discussion_r217257479,217257479,src/wallet/rpcwallet.cpp
kallewoof,2018-09-13T04:37:30Z,Should it be possible to *disable* it?,https://github.com/bitcoin/bitcoin/pull/13756#discussion_r217258020,217258020,src/wallet/rpcwallet.cpp
kallewoof,2018-09-13T05:03:41Z,I kind of want the node to go down completely so we don't get some weird case where a flag persists when reloading wallet but not when restarting node. Even if that sounds like an impossibility.,https://github.com/bitcoin/bitcoin/pull/13756#discussion_r217260847,217260847,test/functional/wallet_avoidreuse.py
kallewoof,2018-09-13T05:05:30Z,"Right ... the idea is that the user has to actually call 'rescan' for it to become retroactive. This was explained when this was a command line option, I think, but the explanation vanished with the change to remove the option. Not sure where would be a good place to explain this. Perhaps there should be a 'caveats' map for flags which are returned when setting flags?",https://github.com/bitcoin/bitcoin/pull/13756#discussion_r217261001,217261001,src/wallet/rpcwallet.cpp
kallewoof,2018-09-13T05:06:42Z,"It sort of does, actually. I assumed there were tests elsewhere, but apparently not. I will add complementary tests for setwalletflag.",https://github.com/bitcoin/bitcoin/pull/13756#discussion_r217261098,217261098,test/functional/wallet_avoidreuse.py
ken2812221,2018-09-14T06:00:45Z,"Should skip this if wallet disabled.\n```python3\n    def skip_test_if_missing_module(self):\n        self.skip_if_no_wallet()\n```",https://github.com/bitcoin/bitcoin/pull/13756#discussion_r217607878,217607878,test/functional/wallet_avoidreuse.py
Sjors,2018-10-25T08:23:30Z,Update: it throws now,https://github.com/bitcoin/bitcoin/pull/13756#discussion_r228076558,228076558,src/wallet/rpcwallet.cpp
Sjors,2018-10-25T08:30:53Z,If you use `getreceivedbyaddress` instead of `getbalance` you don't need this `reset_balance` and `assert_approx` stuff.,https://github.com/bitcoin/bitcoin/pull/13756#discussion_r228079166,228079166,test/functional/wallet_avoidreuse.py
Sjors,2018-10-25T08:34:34Z,"Move this test up, since it's more interesting.",https://github.com/bitcoin/bitcoin/pull/13756#discussion_r228080376,228080376,test/functional/wallet_avoidreuse.py
Sjors,2018-10-25T08:37:20Z,"This should probably be the first test, since it describes the behavior without the new flag.",https://github.com/bitcoin/bitcoin/pull/13756#discussion_r228081405,228081405,test/functional/wallet_avoidreuse.py
practicalswift,2018-10-26T07:12:19Z,Nit: This method doesn't use `self` and could be a function instead?,https://github.com/bitcoin/bitcoin/pull/13756#discussion_r228425325,228425325,test/functional/wallet_avoidreuse.py
kallewoof,2018-10-26T07:29:12Z,"That's a good point, but `getreceivedbyaddress` has not been updated to handle the `avoid_reuse` flag yet. Perhaps it's worth doing that and switch, but it's also reassuring to ensure no weird balance appeared from some unexpected address.",https://github.com/bitcoin/bitcoin/pull/13756#discussion_r228428998,228428998,test/functional/wallet_avoidreuse.py
kallewoof,2018-10-26T07:30:26Z,"The way I see it is, the two tests above it will catch weird issues that could cause the test to fail in random places, so those tests are run first. The intention is to order tests chronologically.",https://github.com/bitcoin/bitcoin/pull/13756#discussion_r228429286,228429286,test/functional/wallet_avoidreuse.py
kallewoof,2018-10-26T07:32:00Z,OK!,https://github.com/bitcoin/bitcoin/pull/13756#discussion_r228429609,228429609,test/functional/wallet_avoidreuse.py
kallewoof,2018-10-26T07:32:36Z,Good point. Turned into function.,https://github.com/bitcoin/bitcoin/pull/13756#discussion_r228429738,228429738,test/functional/wallet_avoidreuse.py
Sjors,2018-10-26T09:10:28Z,Multiple wallets per node might be another route.,https://github.com/bitcoin/bitcoin/pull/13756#discussion_r228456534,228456534,test/functional/wallet_avoidreuse.py
meshcollider,2018-11-18T09:23:21Z,nit: `WALLET_FLAG_AVOID_REUSE` instead of `WALLET_FLAG_AVOIDREUSE`,https://github.com/bitcoin/bitcoin/pull/13756#discussion_r234434954,234434954,src/wallet/wallet.h
meshcollider,2018-11-18T09:34:45Z,"Above help text says `(only applicable if the \""avoid reuse\"" wallet flag is enabled)`, so why do you have this case? Shouldn't we just error immediately if it is set without `pwallet->IsWalletFlagSet(WALLET_FLAG_AVOIDREUSE)`? Same with the other RPCs",https://github.com/bitcoin/bitcoin/pull/13756#discussion_r234435387,234435387,src/wallet/rpcwallet.cpp
meshcollider,2018-11-18T09:46:03Z,"Help texts for all the RPC changes in this PR could do with some more consistency, e.g. in how the default is output (this one doesn't output the default at all, whereas `sendtoaddress` will decide whether to output `default=true` or `unavailable`)",https://github.com/bitcoin/bitcoin/pull/13756#discussion_r234435825,234435825,src/wallet/rpcwallet.cpp
kallewoof,2018-11-19T04:11:54Z,Code now throws an error if user does `avoidreuse=true` for a wallet which does not have `WALLET_FLAG_AVOID_REUSE` enabled.,https://github.com/bitcoin/bitcoin/pull/13756#discussion_r234489708,234489708,src/wallet/rpcwallet.cpp
Sjors,2018-11-27T14:10:13Z,"Agree with the nit, and also that it's a nit :-)",https://github.com/bitcoin/bitcoin/pull/13756#discussion_r236677538,236677538,src/wallet/wallet.h
Sjors,2019-02-13T08:47:27Z,"Nit: this new check (if you keep it, see ff7fe3cf817f787ee8d929b73522d2e9c9da5681), as well as setting all flags in one go (below), deserves a separate commit. I do like the cleanup. ",https://github.com/bitcoin/bitcoin/pull/13756#discussion_r256294078,256294078,src/wallet/wallet.cpp
kallewoof,2019-02-13T09:10:19Z,"I assumed setting both was an error, but realized tests rely on being able to set both. I think I screwed up the logic though (the original code did if/else, which would actually not set one of the flags if the other one was set). Will address now.",https://github.com/bitcoin/bitcoin/pull/13756#discussion_r256302182,256302182,src/wallet/wallet.cpp
Sjors,2019-02-13T09:20:26Z,"Actually setting both is fine, so this check needs to be dropped.\n* a blank wallet with private keys enabled can import or generate new private keys\n* a blank wallet with private keys disabled can only import public keys\n\nThe other way around:\n* a wallet without private keys is blank upon creation, but that might change, so I don't think we should enforce that",https://github.com/bitcoin/bitcoin/pull/13756#discussion_r256305947,256305947,src/wallet/wallet.cpp
kallewoof,2019-02-14T05:54:17Z,"Yes, setting both is fine, but the code pre-this-PR will actually ignore the blank wallet flag if the disable private keys flag is set:\n\nhttps://github.com/bitcoin/bitcoin/blob/9c93f5d9fc93df2120998e8383bc972b738f3ff5/src/wallet/wallet.cpp#L4142-L4151\n\n(As such, the updated code will explicitly disable the blank wallet flag if both are set, before setting all flags.)",https://github.com/bitcoin/bitcoin/pull/13756#discussion_r256698871,256698871,src/wallet/wallet.cpp
Sjors,2019-04-24T11:35:38Z,"nit: rename to `IsUsedDestination`\n\nNeeds comment, e.g.:\n```cpp\n// Whether this or any UTXO with the same CTxDestination has been spent. \n```",https://github.com/bitcoin/bitcoin/pull/13756#discussion_r278079841,278079841,src/wallet/wallet.h
Sjors,2019-04-24T11:37:59Z,"nit: rename to `SetUsedStateDestination`, to make it more clear that it's the `CTxDestination` we're interested in",https://github.com/bitcoin/bitcoin/pull/13756#discussion_r278080656,278080656,src/wallet/wallet.h
Sjors,2019-04-24T11:42:39Z,Shouldn't we mark destinations as used regardless of the flag? Or does this flag imply both a default preference _and_ the entire functionality?,https://github.com/bitcoin/bitcoin/pull/13756#discussion_r278082185,278082185,src/wallet/wallet.cpp
Sjors,2019-04-24T11:49:11Z,"Yikes, not sure how I missed this in earlier reviews: needs to be `params[3]`",https://github.com/bitcoin/bitcoin/pull/13756#discussion_r278084395,278084395,src/wallet/rpcwallet.cpp
kallewoof,2019-04-25T00:21:27Z,We do not mark destinations as used unless the user turns on `avoid_reuse`. This is the reason why people must rescan the chain if they turn it on.,https://github.com/bitcoin/bitcoin/pull/13756#discussion_r278362872,278362872,src/wallet/wallet.cpp
kallewoof,2019-04-25T00:22:58Z,"Wow. I need to write better tests, it looks like.\n\nEdit: the tests look like they should have caught this issue. Weirdness.",https://github.com/bitcoin/bitcoin/pull/13756#discussion_r278363069,278363069,src/wallet/rpcwallet.cpp
Sjors,2019-04-25T07:48:27Z,It was probably a rebase glitch. The tests often use named params.,https://github.com/bitcoin/bitcoin/pull/13756#discussion_r278430903,278430903,src/wallet/rpcwallet.cpp
jnewbery,2019-05-16T20:00:54Z,This should really be a `std::logic_error()`. The arguments passed to `SetWalletFlag()` are known by the programmer.,https://github.com/bitcoin/bitcoin/pull/13756#discussion_r284874210,284874210,src/wallet/wallet.cpp
jnewbery,2019-05-16T20:49:07Z,nit: s/AVOIDREUSE/WALLET_FLAG_AVOID_REUSE so the comment matches the code,https://github.com/bitcoin/bitcoin/pull/13756#discussion_r284892003,284892003,src/wallet/wallet.cpp
jnewbery,2019-05-16T21:00:18Z,I don't understand how this change is related to the other changes in 56f7c53925c5f5069b325515e1f61251f8c16971 _wallet: enable avoid_reuse feature_ or to any of the other changes in this PR.,https://github.com/bitcoin/bitcoin/pull/13756#discussion_r284896241,284896241,src/wallet/wallet.cpp
jnewbery,2019-05-16T21:01:00Z,Can you explain a bit more why you're setting the outputs to dirty if one of the inputs is dirty?,https://github.com/bitcoin/bitcoin/pull/13756#discussion_r284896463,284896463,src/wallet/wallet.cpp
jnewbery,2019-05-16T21:11:37Z,"I thought this return format was confusing:\n\n```\n→ bcli setwalletflag avoid_reuse true\n{\n  ""success"": true,\n  ""caveats"": ""You need to rescan the blockchain in order to correctly mark used destinations in the past. Until this is done, some destinations may be considered unused, even if the opposite is the case.""\n}\n\n→ bcli setwalletflag avoid_reuse false\n{\n  ""success"": true,\n",https://github.com/bitcoin/bitcoin/pull/13756#discussion_r284900105,284900105,src/wallet/rpcwallet.cpp
jnewbery,2019-05-16T21:31:40Z,I don't think this is necessary (and doesn't actually demonstrate the new parameter).,https://github.com/bitcoin/bitcoin/pull/13756#discussion_r284906674,284906674,src/wallet/rpcwallet.cpp
jnewbery,2019-05-16T21:34:17Z,Consider also updating the `getbalances` RPC method (although that could be done in a follow-up PR),https://github.com/bitcoin/bitcoin/pull/13756#discussion_r284907468,284907468,src/wallet/rpcwallet.cpp
jnewbery,2019-05-16T21:43:49Z,"I don't understand this. We know at compile time that `DEFAULT_AVOIDPARTIALSPENDS` is false, so why do you need this ternary operator?",https://github.com/bitcoin/bitcoin/pull/13756#discussion_r284910188,284910188,src/wallet/init.cpp
jnewbery,2019-05-16T21:47:16Z,micronit: one-line docstrings should be on one line with the quotes: https://www.python.org/dev/peps/pep-0257/#one-line-docstrings,https://github.com/bitcoin/bitcoin/pull/13756#discussion_r284911161,284911161,test/functional/wallet_avoidreuse.py
jnewbery,2019-05-16T21:53:38Z,roughly 5 BTC usable?,https://github.com/bitcoin/bitcoin/pull/13756#discussion_r284912963,284912963,test/functional/wallet_avoidreuse.py
jnewbery,2019-05-16T21:55:55Z,"Can you just combine this with `test_fund_send_fund_send()` by adding the final line:\n\n```python\nself.nodes[1].sendtoaddress(address=retaddr, amount=10, avoid_reuse=False)\n```\n\nto that test?",https://github.com/bitcoin/bitcoin/pull/13756#discussion_r284913550,284913550,test/functional/wallet_avoidreuse.py
jnewbery,2019-05-16T21:58:31Z,remove `getunconfirmedbalance`,https://github.com/bitcoin/bitcoin/pull/13756#discussion_r284914283,284914283,doc/release-notes-13756.md
Sjors,2019-05-17T14:49:48Z,Are you suggesting #ifdef? Because we might switch this default at some point.,https://github.com/bitcoin/bitcoin/pull/13756#discussion_r285159502,285159502,src/wallet/init.cpp
kallewoof,2019-05-20T02:39:54Z,"Makes sense, changed.",https://github.com/bitcoin/bitcoin/pull/13756#discussion_r285415362,285415362,src/wallet/wallet.cpp
kallewoof,2019-05-20T02:45:46Z,"@jnewbery Existing code would set at most one of the two flags (disable privkeys or blank_wallet), and would not set any other wallet flags. As I am introducing more wallet flags, I needed those to be set, but because the existing code will *ignore* the blank_wallet flag if the *disable privkeys* flag is set, I had to do some tweakery to not modify the existing behavior.\n\nIf everyone agrees th",https://github.com/bitcoin/bitcoin/pull/13756#discussion_r285415978,285415978,src/wallet/wallet.cpp
kallewoof,2019-05-20T02:53:19Z,"~~This is just a convenient place to mark-up your own UTXO:s, e.g. change address and the like. This part can be removed and the `AddToWallet*` methods will handle it a little later. I'm actually going to remove it, as it's confused myself more than once in the past, and now, you as well.~~\n\nEdit: I don't think the above response is correct. I have removed the code in question, but will dig mo",https://github.com/bitcoin/bitcoin/pull/13756#discussion_r285416662,285416662,src/wallet/wallet.cpp
kallewoof,2019-05-20T03:02:36Z,"## success flag\nI like `success` better than simply saying what the flag was changed to, because it better addresses the case where the user is targeting the wrong wallet. For example, I may ssh into a server with a node on it, and my intention is to turn a wallet flag on, but in this scenario, I ssh'd into the wrong machine and/or picked the wrong wallet (in the case of a node with multiple wal",https://github.com/bitcoin/bitcoin/pull/13756#discussion_r285417523,285417523,src/wallet/rpcwallet.cpp
kallewoof,2019-05-20T03:05:21Z,Yeah. Removed.,https://github.com/bitcoin/bitcoin/pull/13756#discussion_r285417805,285417805,src/wallet/rpcwallet.cpp
kallewoof,2019-05-20T03:11:28Z,I think a follow-up is a good idea here. I'll make an effort to write one soon after merge so this is fresh in people's heads.,https://github.com/bitcoin/bitcoin/pull/13756#discussion_r285418390,285418390,src/wallet/rpcwallet.cpp
kallewoof,2019-05-20T03:22:13Z,"I investigated further, and this is indeed a bug. I updated the tests to ensure that the balance was updated correctly, and for the case where this `if` block was present, the non-dirty balance would become 0 when it should be 5.\n```diff\ndiff --git a/test/functional/wallet_avoidreuse.py b/test/functional/wallet_avoidreuse.py\nindex b7b3eae34..2964d0868 100755\n--- a/test/functional/wallet_av",https://github.com/bitcoin/bitcoin/pull/13756#discussion_r285419427,285419427,src/wallet/wallet.cpp
kallewoof,2019-05-20T03:24:50Z,"I think I like the two separate, especially now that they ensure the balance updates are correct in each case. Look at the updated tests, and if you still think they should be merged, I can do so!",https://github.com/bitcoin/bitcoin/pull/13756#discussion_r285419693,285419693,test/functional/wallet_avoidreuse.py
jnewbery,2019-05-20T21:03:12Z,"Ah. I see now. Yes, this makes sense, although it's a little confusing the way that the generic `setWalletFlags()` is called between two blocks of blank wallet specific code.\n\nI've done some grepping and it seems to me that it's fine for `WALLET_FLAG_BLANK_WALLET` and `WALLET_FLAG_DISABLE_PRIVATE_KEYS` to be set on the same wallet. @achow101 should know for sure.",https://github.com/bitcoin/bitcoin/pull/13756#discussion_r285767473,285767473,src/wallet/wallet.cpp
jnewbery,2019-05-20T21:14:08Z,"> Add flag_name, flag_old_value, flag_new_value to the results. Too verbose?\n\nSeems ok to me. Alternatively, you could just throw a `JSONRPCError` if the flag is already set to what was requested. That's the way we usually deal with input errors in the RPCs.\n\n> As a non-native speaker, I don't think caveat is that weird a word\n\nI'm going to claim that 'warning' is a [far more common wo",https://github.com/bitcoin/bitcoin/pull/13756#discussion_r285771071,285771071,src/wallet/rpcwallet.cpp
jnewbery,2019-05-20T21:24:07Z,"I just think it's weird to have runtime programming logic to construct a string where we already know what that string should be. If the concern is about this help text not being updated if `DEFAULT_AVOIDPARTIALSPENDS` changes, then I think it would be better to just leave a comment where that constant is defined saying ""If this is changed to true, update the help text for -avoidpartialspends""",https://github.com/bitcoin/bitcoin/pull/13756#discussion_r285774028,285774028,src/wallet/init.cpp
jnewbery,2019-05-20T21:51:43Z,"oh, I think I understand why this code was here now. In the test you've just shown a way of turning coins from dirty to clean by creating a tx that uses up the dirty input and makes a clean change output.\n\nI can see arguments for why you might want to consider it dirty, but on balance I think you've got the right logic now. The change output is a fresh address, so shouldn't be considered dirty",https://github.com/bitcoin/bitcoin/pull/13756#discussion_r285781829,285781829,src/wallet/wallet.cpp
jnewbery,2019-05-20T21:52:51Z,"I think this needs to be updated to say ""node 1 sends the 10BTC with the avoid_reuse flag set to false""",https://github.com/bitcoin/bitcoin/pull/13756#discussion_r285782086,285782086,test/functional/wallet_avoidreuse.py
kallewoof,2019-05-21T02:53:55Z,"Yeah, I think I got the logic mixed up in there when I wrote that block. Thanks for pointing that out!",https://github.com/bitcoin/bitcoin/pull/13756#discussion_r285834294,285834294,src/wallet/wallet.cpp
kallewoof,2019-05-21T03:19:05Z,Throwing seems sensible. Going with that and adding flag name and value (but skipping old value as it's now implied). Switching caveat to warning.,https://github.com/bitcoin/bitcoin/pull/13756#discussion_r285837601,285837601,src/wallet/rpcwallet.cpp
kallewoof,2019-05-21T03:22:00Z,"I am going to just remove the conditional part of this and have it always say `""(always enabled for wallets with \""avoid_reuse\"" enabled)""`. That should resolve the issue, I think?",https://github.com/bitcoin/bitcoin/pull/13756#discussion_r285837940,285837940,src/wallet/init.cpp
jnewbery,2019-05-22T16:43:48Z,"I don't understand what this code block is doing. You have a boolean `used` which is initially set to false and then may be updated to true, but you never use the value of `used` anywhere.",https://github.com/bitcoin/bitcoin/pull/13756#discussion_r286586336,286586336,src/wallet/wallet.cpp
kallewoof,2019-05-23T04:21:57Z,"That was leftovers from the incorrect code that I removed earlier. Thanks, removed!",https://github.com/bitcoin/bitcoin/pull/13756#discussion_r286770933,286770933,src/wallet/wallet.cpp
jnewbery,2019-05-23T19:57:03Z,This needs to match the name in rpc/client.cpp and the CRPCCommand table below (which is currently `value`).,https://github.com/bitcoin/bitcoin/pull/13756#discussion_r287109904,287109904,src/wallet/rpcwallet.cpp
kallewoof,2019-05-24T05:44:07Z,Changed to `value`.,https://github.com/bitcoin/bitcoin/pull/13756#discussion_r287221844,287221844,src/wallet/rpcwallet.cpp
achow101,2019-05-24T15:40:36Z,"It's fine to set both `WALLET_FLAG_BLANK_WALLET` and `WALLET_FLAG_DISABLE_PRIVATE_KEYS` on a wallet, though redundant. `WALLET_FLAG_BLANK_WALLET` will be unset whenever something is imported.",https://github.com/bitcoin/bitcoin/pull/13756#discussion_r287415117,287415117,src/wallet/wallet.cpp
ryanofsky,2019-05-24T16:08:27Z,"I wish the `BLANK_WALLET` flag was called something more like `WALLET_IS_ALREADY_INITIALIZED` or `WALLET_DO_NOT_REINITIALIZE` since the only effect of the flag is to skip the `fFirstRun` code path when the wallet is loaded. I think the term ""blank wallet"" is good as a createwallet option name, but less good as a flag name.",https://github.com/bitcoin/bitcoin/pull/13756#discussion_r287425444,287425444,src/wallet/wallet.cpp
kallewoof,2019-05-25T01:01:55Z,Removed the redundant if block.,https://github.com/bitcoin/bitcoin/pull/13756#discussion_r287545067,287545067,src/wallet/wallet.cpp
meshcollider,2019-06-18T12:41:01Z,"In addition to the above TODO, I also suggest this be moved to a different file later (its independent of the avoid-reuse tests)",https://github.com/bitcoin/bitcoin/pull/13756#discussion_r294799695,294799695,test/functional/wallet_avoidreuse.py
achow101,2019-06-18T14:14:37Z,"Is it really necessary to add new ismine types? AFAICT, these are only used as ismine filters which I think could just as easily be done with a boolean. `IsMine()` isn't returning these values, and `ISMINE_ALL_USED` isn't used anywhere.",https://github.com/bitcoin/bitcoin/pull/13756#discussion_r294845332,294845332,src/script/ismine.h
achow101,2019-06-18T14:20:33Z,nit: Use `RPCHelpMan help{...}`. See https://github.com/bitcoin/bitcoin/blob/master/src/rpc/rawtransaction.cpp#L74 for an example.,https://github.com/bitcoin/bitcoin/pull/13756#discussion_r294848634,294848634,src/wallet/rpcwallet.cpp
kallewoof,2019-06-18T14:26:35Z,Makes sense to me.,https://github.com/bitcoin/bitcoin/pull/13756#discussion_r294852008,294852008,test/functional/wallet_avoidreuse.py
kallewoof,2019-06-18T14:29:00Z,"You get most of the combinations with the new ""used"" flag, because a bunch of calls have a with and without ""avoid reuse"" state... so I think this is the cleanest approach.\n\n`ISMINE_ALL_USED` is indeed not used; I added it to indicate that `ISMINE_ALL` is in fact not include the used ones. It's sort of a comment, with the added side effect that smart IDEs will show it when giving suggestions.",https://github.com/bitcoin/bitcoin/pull/13756#discussion_r294853397,294853397,src/script/ismine.h
achow101,2019-06-18T14:56:00Z,I don't think we should have help output that switches on the active wallet for that command. This breaks `help listunspent`.,https://github.com/bitcoin/bitcoin/pull/13756#discussion_r294868973,294868973,src/wallet/rpcwallet.cpp
kallewoof,2019-06-18T15:25:08Z,Why does it break?,https://github.com/bitcoin/bitcoin/pull/13756#discussion_r294884795,294884795,src/wallet/rpcwallet.cpp
kallewoof,2019-06-18T15:26:48Z,"Will address if rebase becomes necessary, otherwise will try to preserve ACKs and do a quick follow-up post-merge.",https://github.com/bitcoin/bitcoin/pull/13756#discussion_r294885636,294885636,src/wallet/rpcwallet.cpp
achow101,2019-06-18T15:35:37Z,"You can do `help listunspent` without specifying `-rpcwallet` in order to just get the help for `listunspent` (and other commands). By making the help dependent on `-rpcwallet`, this makes the output of `help listunspent` less helpful because then the help sometimes will include `reused` and other times not. The help text should be consistent regardless of the other options specified. In general, ",https://github.com/bitcoin/bitcoin/pull/13756#discussion_r294890161,294890161,src/wallet/rpcwallet.cpp
kallewoof,2019-06-18T15:41:27Z,"Ahh, I see what you're saying. Will rework into static output post-merge and/or if rebase becomes necessary.",https://github.com/bitcoin/bitcoin/pull/13756#discussion_r294893068,294893068,src/wallet/rpcwallet.cpp
kallewoof,2019-06-19T02:47:03Z,"I can do this but it would mean some unnecessary calculations when users are not asking for help:\n\nhttps://github.com/bitcoin/bitcoin/blob/44d81723236114f9370f386f3b3310477a6dde43/src/wallet/rpcwallet.cpp#L2671-L2674\n\nStill worth it?",https://github.com/bitcoin/bitcoin/pull/13756#discussion_r295101623,295101623,src/wallet/rpcwallet.cpp
MarcoFalke,2019-06-19T14:41:13Z,"Can you explain what that means? `sendtoaddress` is an RPC call, how would it enable a command line flag (`-avoidpartialspends`) of a running program?",https://github.com/bitcoin/bitcoin/pull/13756#discussion_r295336392,295336392,doc/release-notes-13756.md
MarcoFalke,2019-06-19T14:42:39Z,What about `getbalances`?,https://github.com/bitcoin/bitcoin/pull/13756#discussion_r295337281,295337281,doc/release-notes-13756.md
MarcoFalke,2019-06-19T14:43:40Z,"Could remove `(Note: `, since all sentences in this doc are release *notes*",https://github.com/bitcoin/bitcoin/pull/13756#discussion_r295337898,295337898,doc/release-notes-13756.md
MarcoFalke,2019-06-19T14:47:46Z,"This makes the help text change at run time. I'd prefer to make it static and explain it with something like ""true if wallet falg is set, otherwise unavailable""",https://github.com/bitcoin/bitcoin/pull/13756#discussion_r295340427,295340427,src/wallet/rpcwallet.cpp
MarcoFalke,2019-06-19T14:48:09Z,Same here,https://github.com/bitcoin/bitcoin/pull/13756#discussion_r295340642,295340642,src/wallet/rpcwallet.cpp
kallewoof,2019-06-19T16:03:32Z,"Changing wording to\n```\nIn addition, `sendtoaddress` has been changed to always use `-avoidpartialspends`\nwhen `avoid_reuse` is enabled, as it would otherwise risk using up the ""wrong"" UTXO\nfor an address reuse case.\n```\nDoes that look better?",https://github.com/bitcoin/bitcoin/pull/13756#discussion_r295380387,295380387,doc/release-notes-13756.md
kallewoof,2019-06-19T16:04:22Z,In #16239.,https://github.com/bitcoin/bitcoin/pull/13756#discussion_r295380842,295380842,doc/release-notes-13756.md
kallewoof,2019-06-19T16:05:17Z,"Removed. I wanted to use it as in ""Do note that [word of caution]"", but it's no big deal.",https://github.com/bitcoin/bitcoin/pull/13756#discussion_r295381239,295381239,doc/release-notes-13756.md
kallewoof,2019-06-19T16:05:36Z,"Yep, fixed in #16239.",https://github.com/bitcoin/bitcoin/pull/13756#discussion_r295381390,295381390,src/wallet/rpcwallet.cpp
kallewoof,2019-06-19T16:09:08Z,Good catch. Added to #16239.,https://github.com/bitcoin/bitcoin/pull/13756#discussion_r295383264,295383264,src/wallet/rpcwallet.cpp
