[
  {
    "sha": "129a5bafd9a3efa2fa16d780885048a06566d262",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMjlhNWJhZmQ5YTNlZmEyZmExNmQ3ODA4ODUwNDhhMDY1NjZkMjYy",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2019-05-24T05:55:27Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2019-05-29T09:23:45Z"
      },
      "message": "wallet: rename g_known_wallet_flags constant to KNOWN_WALLET_FLAGS",
      "tree": {
        "sha": "0d2897fb378f8fae086601605c7dfce4ac0525f3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0d2897fb378f8fae086601605c7dfce4ac0525f3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/129a5bafd9a3efa2fa16d780885048a06566d262",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAlzuT6EACgkQV692LbM1\nMyK7Yg//f/R0OLAZjzyn9OS6xfW3PrzKjI38Cd93dtSa1AUw0YZiRXy7crG1uFZL\nFFfEk7cdDkfYyh2bBig5miWOFtpiN4zCRaZ2Ut8eKCpdpTjmtsNQBgr91w1IrCd+\nGHYU9n592J5jH58T5eEWp5YQBcJWJ3Ow+GroKNzVxI18e4ERXcywOtDUqiBFqYvc\nzaZJwALXnlSQJ/DoffQWH4j2TydeSOECTVK8UUY3pp42wHC5TqE81ItCeiNZLge8\nNLIX0zNsczY6CW24KOKBeuxkREn8N0t7dlXrWmF95KYgSPsxRFYx1WVjexChSb3L\nEwzoJZ7vPBQ36zeHsrK8ihHStfdCXQkfer7+2UrZX9t3HoX2eHne9DxewRIamcak\nOyfVADj2qQUlHGQnHuWuKL4MyECZOEhAO+SBrXBrZ5GVeodUwY34dLZ9OzAz8ra4\np+qCMFJnv9Kc5gZCqOCf8EPery0eGMTlZlDdfqXcqnbMohqEFoBC/XlpggYW+xHp\ndN7aZ4wxIbVWZDNQs4I1dd0XRaRKk44viN5WBFhjMQ+5mX/eAKlR41VWS/AvQzJJ\nxPaEHLoY0vCYoFt1IvZaSUIdVINoWayYbyOFHF9FYOJfAphlg0fNLKzBAUBgzbYy\nIiznyd2VW+rzIiwxX8Xut9pRitL/NbQoVOu7z83ZWF4Kr2d21NM=\n=RIIh\n-----END PGP SIGNATURE-----",
        "payload": "tree 0d2897fb378f8fae086601605c7dfce4ac0525f3\nparent ab6d18e6f83ec0d8ccd105b7b05afb7c76354d04\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1558677327 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1559121825 +0900\n\nwallet: rename g_known_wallet_flags constant to KNOWN_WALLET_FLAGS\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/129a5bafd9a3efa2fa16d780885048a06566d262",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/129a5bafd9a3efa2fa16d780885048a06566d262",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/129a5bafd9a3efa2fa16d780885048a06566d262/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ab6d18e6f83ec0d8ccd105b7b05afb7c76354d04",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab6d18e6f83ec0d8ccd105b7b05afb7c76354d04",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ab6d18e6f83ec0d8ccd105b7b05afb7c76354d04"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "554090a4ca1bdfbc909f2208f533c7a76e8522ef",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/129a5bafd9a3efa2fa16d780885048a06566d262/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/129a5bafd9a3efa2fa16d780885048a06566d262/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=129a5bafd9a3efa2fa16d780885048a06566d262",
        "patch": "@@ -1571,7 +1571,7 @@ bool CWallet::SetWalletFlags(uint64_t overwriteFlags, bool memonly)\n {\n     LOCK(cs_wallet);\n     m_wallet_flags = overwriteFlags;\n-    if (((overwriteFlags & g_known_wallet_flags) >> 32) ^ (overwriteFlags >> 32)) {\n+    if (((overwriteFlags & KNOWN_WALLET_FLAGS) >> 32) ^ (overwriteFlags >> 32)) {\n         // contains unknown non-tolerable wallet flags\n         return false;\n     }"
      },
      {
        "sha": "56046e421a9889923d2385d3c7832259b87a5ea6",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/129a5bafd9a3efa2fa16d780885048a06566d262/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/129a5bafd9a3efa2fa16d780885048a06566d262/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=129a5bafd9a3efa2fa16d780885048a06566d262",
        "patch": "@@ -139,7 +139,7 @@ enum WalletFlags : uint64_t {\n     WALLET_FLAG_BLANK_WALLET = (1ULL << 33),\n };\n \n-static constexpr uint64_t g_known_wallet_flags = WALLET_FLAG_DISABLE_PRIVATE_KEYS | WALLET_FLAG_BLANK_WALLET | WALLET_FLAG_KEY_ORIGIN_METADATA;\n+static constexpr uint64_t KNOWN_WALLET_FLAGS = WALLET_FLAG_DISABLE_PRIVATE_KEYS | WALLET_FLAG_BLANK_WALLET | WALLET_FLAG_KEY_ORIGIN_METADATA;\n \n /** A key from a CWallet's keypool\n  *"
      }
    ]
  },
  {
    "sha": "58928098c299efdc7c5ddf2dc20716ca5272f21b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ODkyODA5OGMyOTllZmRjN2M1ZGRmMmRjMjA3MTZjYTUyNzJmMjFi",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2018-08-02T07:43:55Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2019-05-29T09:40:15Z"
      },
      "message": "wallet: make IsWalletFlagSet() const",
      "tree": {
        "sha": "4ad082b71b8c8e72769bc37c1b8b5500edbbaa4c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4ad082b71b8c8e72769bc37c1b8b5500edbbaa4c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/58928098c299efdc7c5ddf2dc20716ca5272f21b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAlzuU48ACgkQV692LbM1\nMyK5cw/+LPWxqAUW+LmCA8jAILW7Rv+370DWxl+s/BSapKpri68KXjAbEJW32ZRB\ngI3dLynLok4gkTDJGVyIiynMpV57PYG1pfJL9UsSduTAEfo8GinfFk7REq+mz67P\nnNuTsQWsawLtU7HqOH5oROBWvmNxZ8PdIkDKJRR+shjLjLdrcBPB4oHafnxuXcm3\nsXn6wap3wxD42tlwCbv7rZwBWb2l7x9KvSeZ59p2U0g2xPpRcWqxB9npSX4pePm3\ni8YrOIHmGgIDNdPLxtVi12sM0L9NJbkXQNIUXynZ7e8nvdGtxI4wJKNSN4zQ/qQq\njRQ19wdTcdA1EyckC9r0dlptK/pUbjiLeFiCUDd6CILSkREjfBezTJUj+7tucR7V\naeeyFdFV1jUasa/BeFAIuYecwqcQ1DzlTnwWcga7D6GFA7Xqo6UB9er61guFL/Vy\nex478pTCTmliB/549auGYfmgZj7TkBxrek+Sgz4b2sDAhCFNjei7anj8DHAFPEUw\nLgeSZRyoio/k6hQUqDwkyxyitU4vvXqrpTx/i4BIA6ag9qyyS2ovGOwjnJmKbXES\nrDnLYaI0wlBnchOM9PUKHfv9AgRtsPGS8OOLf/LJLQcH7Qf8s/p/rDUt17f1zjag\ncGp3Og5JYOLGCRBY9VbBzKzqMTlVNTWy4ab9/YoC1mPIbJtqijg=\n=RqA2\n-----END PGP SIGNATURE-----",
        "payload": "tree 4ad082b71b8c8e72769bc37c1b8b5500edbbaa4c\nparent 129a5bafd9a3efa2fa16d780885048a06566d262\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1533195835 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1559122815 +0900\n\nwallet: make IsWalletFlagSet() const\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/58928098c299efdc7c5ddf2dc20716ca5272f21b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/58928098c299efdc7c5ddf2dc20716ca5272f21b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/58928098c299efdc7c5ddf2dc20716ca5272f21b/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "129a5bafd9a3efa2fa16d780885048a06566d262",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/129a5bafd9a3efa2fa16d780885048a06566d262",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/129a5bafd9a3efa2fa16d780885048a06566d262"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "3eab069fb6bd83a3430cf5f92c756619a35eeb04",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/58928098c299efdc7c5ddf2dc20716ca5272f21b/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/58928098c299efdc7c5ddf2dc20716ca5272f21b/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=58928098c299efdc7c5ddf2dc20716ca5272f21b",
        "patch": "@@ -1562,7 +1562,7 @@ void CWallet::UnsetWalletFlagWithDB(WalletBatch& batch, uint64_t flag)\n         throw std::runtime_error(std::string(__func__) + \": writing wallet flags failed\");\n }\n \n-bool CWallet::IsWalletFlagSet(uint64_t flag)\n+bool CWallet::IsWalletFlagSet(uint64_t flag) const\n {\n     return (m_wallet_flags & flag);\n }"
      },
      {
        "sha": "bd3d721ddea1b9e569161ee3809c9f501aa4b3dc",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/58928098c299efdc7c5ddf2dc20716ca5272f21b/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/58928098c299efdc7c5ddf2dc20716ca5272f21b/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=58928098c299efdc7c5ddf2dc20716ca5272f21b",
        "patch": "@@ -1288,7 +1288,7 @@ class CWallet final : public CCryptoKeyStore, private interfaces::Chain::Notific\n     void UnsetWalletFlag(uint64_t flag);\n \n     /** check if a certain wallet flag is set */\n-    bool IsWalletFlagSet(uint64_t flag);\n+    bool IsWalletFlagSet(uint64_t flag) const;\n \n     /** overwrite all flags by the given uint64_t\n        returns false if unknown, non-tolerable flags are present */"
      }
    ]
  },
  {
    "sha": "eec15662fad917b169f5e3b8baaf4301dcf00a7b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZWMxNTY2MmZhZDkxN2IxNjlmNWUzYjhiYWFmNDMwMWRjZjAwYTdi",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2018-07-25T07:24:55Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2019-05-29T09:40:31Z"
      },
      "message": "wallet: avoid reuse flags\n\nAdd m_avoid_address_reuse flag to coin control object.\nAdd avoid_reuse wallet flag and accompanying strings/caveats.",
      "tree": {
        "sha": "193aa9e8d44a82c33740e663a93a8bf1ed041086",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/193aa9e8d44a82c33740e663a93a8bf1ed041086"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eec15662fad917b169f5e3b8baaf4301dcf00a7b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAlzuU48ACgkQV692LbM1\nMyLd1g/+I3ucY16cuhDEIBxcr/39a8eAx17bBlteOlERH7MH2VOeOHRMUvfvmBYl\nB/eoW0BmrFGhaeGW10kjX2IcPeadkCGRBmGGr1zhSBMJAQ0mEYor5OiNu42QtQe6\nzN6wfB5YeMLjpmoEgDfmQjtWADbKJq2dbSKoKs1gcvItVBz3fJ/gO5xbmmXKyrRy\nmXvd+RoCmBDBA2VhJXgsvZQnZ2+lN4CbvxChCgGEItpS7rU7/z7KS5nNYG+JYqQu\n8JnBObm/4k2M/cB9/AOCRkgugSB+7keUX4oVQEHoQj763PREl1XAfHie8XEX3/lM\nF3+l9i/uH5qv4uD4BS0lG2zpemYSCBVrfGRfvWWXBZ2fn9CFkF1wLN6Q9KeSk21A\nN8gyeW7+FDNts3y2c9Chsg9S9fOGTJLfNiGqBRK70FHlEkjQz1tu0dhhqh3lHemH\npQrL5gOGBOKJr5k5Dkzal0gDK2GJZm8eM0Fm7S9WDNEMBh30LMAZCzrsMMGvEUq5\nXdzsF83jbxM6zbbz0EtNPqN5QUv/mgEhkjBNZW/kl+7B7+6XbwZ+e5uR9W/6eWE7\nL4tZro+M9QxIChjy0iDbX9iv9jDE0VYDZkPGBEoOF5e6aPeoBHZb/eeB7Sb1Lcpm\nmIouOCX7jcPBK+4P0yrCKKq1LBFMgvExa4aZjcN80nh0duIt7LI=\n=Vn4b\n-----END PGP SIGNATURE-----",
        "payload": "tree 193aa9e8d44a82c33740e663a93a8bf1ed041086\nparent 58928098c299efdc7c5ddf2dc20716ca5272f21b\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1532503495 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1559122831 +0900\n\nwallet: avoid reuse flags\n\nAdd m_avoid_address_reuse flag to coin control object.\nAdd avoid_reuse wallet flag and accompanying strings/caveats.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eec15662fad917b169f5e3b8baaf4301dcf00a7b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eec15662fad917b169f5e3b8baaf4301dcf00a7b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eec15662fad917b169f5e3b8baaf4301dcf00a7b/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "58928098c299efdc7c5ddf2dc20716ca5272f21b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/58928098c299efdc7c5ddf2dc20716ca5272f21b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/58928098c299efdc7c5ddf2dc20716ca5272f21b"
      }
    ],
    "stats": {
      "total": 41,
      "additions": 40,
      "deletions": 1
    },
    "files": [
      {
        "sha": "60bce6683964bd0070dc1b274261b88d51489b78",
        "filename": "src/wallet/coincontrol.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eec15662fad917b169f5e3b8baaf4301dcf00a7b/src/wallet/coincontrol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eec15662fad917b169f5e3b8baaf4301dcf00a7b/src/wallet/coincontrol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coincontrol.cpp?ref=eec15662fad917b169f5e3b8baaf4301dcf00a7b",
        "patch": "@@ -13,6 +13,7 @@ void CCoinControl::SetNull()\n     fAllowOtherInputs = false;\n     fAllowWatchOnly = false;\n     m_avoid_partial_spends = gArgs.GetBoolArg(\"-avoidpartialspends\", DEFAULT_AVOIDPARTIALSPENDS);\n+    m_avoid_address_reuse = false;\n     setSelected.clear();\n     m_feerate.reset();\n     fOverrideFeeRate = false;"
      },
      {
        "sha": "249c402e4dc575518b92df1dda3cb8c331ec3796",
        "filename": "src/wallet/coincontrol.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eec15662fad917b169f5e3b8baaf4301dcf00a7b/src/wallet/coincontrol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eec15662fad917b169f5e3b8baaf4301dcf00a7b/src/wallet/coincontrol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coincontrol.h?ref=eec15662fad917b169f5e3b8baaf4301dcf00a7b",
        "patch": "@@ -34,6 +34,8 @@ class CCoinControl\n     boost::optional<bool> m_signal_bip125_rbf;\n     //! Avoid partial use of funds sent to a given address\n     bool m_avoid_partial_spends;\n+    //! Forbids inclusion of dirty (previously used) addresses\n+    bool m_avoid_address_reuse;\n     //! Fee estimation mode to control arguments to estimateSmartFee\n     FeeEstimateMode m_fee_mode;\n     //! Minimum chain depth value for coin availability"
      },
      {
        "sha": "6ab7d5dde33ad79100d1e36214e1327e6b3dff01",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eec15662fad917b169f5e3b8baaf4301dcf00a7b/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eec15662fad917b169f5e3b8baaf4301dcf00a7b/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=eec15662fad917b169f5e3b8baaf4301dcf00a7b",
        "patch": "@@ -47,6 +47,17 @@\n \n static const std::string WALLET_ENDPOINT_BASE = \"/wallet/\";\n \n+static inline bool GetAvoidReuseFlag(CWallet * const pwallet, const UniValue& param) {\n+    bool can_avoid_reuse = pwallet->IsWalletFlagSet(WALLET_FLAG_AVOID_REUSE);\n+    bool avoid_reuse = param.isNull() ? can_avoid_reuse : param.get_bool();\n+\n+    if (avoid_reuse && !can_avoid_reuse) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"wallet does not have the \\\"avoid reuse\\\" feature enabled\");\n+    }\n+\n+    return avoid_reuse;\n+}\n+\n bool GetWalletNameFromJSONRPCRequest(const JSONRPCRequest& request, std::string& wallet_name)\n {\n     if (request.URI.substr(0, WALLET_ENDPOINT_BASE.size()) == WALLET_ENDPOINT_BASE) {"
      },
      {
        "sha": "2c51b6a8bac64d75508c871c3917ff4e6c880d93",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eec15662fad917b169f5e3b8baaf4301dcf00a7b/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eec15662fad917b169f5e3b8baaf4301dcf00a7b/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=eec15662fad917b169f5e3b8baaf4301dcf00a7b",
        "patch": "@@ -41,6 +41,14 @@\n \n #include <boost/algorithm/string/replace.hpp>\n \n+const std::map<uint64_t,std::string> WALLET_FLAG_CAVEATS{\n+    {WALLET_FLAG_AVOID_REUSE,\n+        \"You need to rescan the blockchain in order to correctly mark used \"\n+        \"destinations in the past. Until this is done, some destinations may \"\n+        \"be considered unused, even if the opposite is the case.\"\n+    },\n+};\n+\n static const size_t OUTPUT_GROUP_MAX_ENTRIES = 10;\n \n static CCriticalSection cs_wallets;"
      },
      {
        "sha": "4ff347a5969f1a4a7ed2e01feeea8181250868ea",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 18,
        "deletions": 1,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eec15662fad917b169f5e3b8baaf4301dcf00a7b/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eec15662fad917b169f5e3b8baaf4301dcf00a7b/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=eec15662fad917b169f5e3b8baaf4301dcf00a7b",
        "patch": "@@ -120,6 +120,10 @@ enum WalletFlags : uint64_t {\n     // wallet flags in the upper section (> 1 << 31) will lead to not opening the wallet if flag is unknown\n     // unknown wallet flags in the lower section <= (1 << 31) will be tolerated\n \n+    // will categorize coins as clean (not reused) and dirty (reused), and handle\n+    // them with privacy considerations in mind\n+    WALLET_FLAG_AVOID_REUSE = (1ULL << 0),\n+\n     // Indicates that the metadata has already been upgraded to contain key origins\n     WALLET_FLAG_KEY_ORIGIN_METADATA = (1ULL << 1),\n \n@@ -139,7 +143,20 @@ enum WalletFlags : uint64_t {\n     WALLET_FLAG_BLANK_WALLET = (1ULL << 33),\n };\n \n-static constexpr uint64_t KNOWN_WALLET_FLAGS = WALLET_FLAG_DISABLE_PRIVATE_KEYS | WALLET_FLAG_BLANK_WALLET | WALLET_FLAG_KEY_ORIGIN_METADATA;\n+static constexpr uint64_t KNOWN_WALLET_FLAGS =\n+        WALLET_FLAG_AVOID_REUSE\n+    |   WALLET_FLAG_BLANK_WALLET\n+    |   WALLET_FLAG_KEY_ORIGIN_METADATA\n+    |   WALLET_FLAG_DISABLE_PRIVATE_KEYS;\n+\n+static const std::map<std::string,WalletFlags> WALLET_FLAG_MAP{\n+    {\"avoid_reuse\", WALLET_FLAG_AVOID_REUSE},\n+    {\"blank\", WALLET_FLAG_BLANK_WALLET},\n+    {\"key_origin_metadata\", WALLET_FLAG_KEY_ORIGIN_METADATA},\n+    {\"disable_private_keys\", WALLET_FLAG_DISABLE_PRIVATE_KEYS},\n+};\n+\n+extern const std::map<uint64_t,std::string> WALLET_FLAG_CAVEATS;\n \n /** A key from a CWallet's keypool\n  *"
      }
    ]
  },
  {
    "sha": "8247a0da3a46d7c38943ee0304343ab7465305bd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MjQ3YTBkYTNhNDZkN2MzODk0M2VlMDMwNDM0M2FiNzQ2NTMwNWJk",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2018-09-13T04:53:19Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2019-05-29T09:40:31Z"
      },
      "message": "wallet: enable avoid_reuse feature",
      "tree": {
        "sha": "fad1d713d2e9e71438b1805dc5a0d6a795c85719",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fad1d713d2e9e71438b1805dc5a0d6a795c85719"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8247a0da3a46d7c38943ee0304343ab7465305bd",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAlzuU5AACgkQV692LbM1\nMyIlRQ//cn5wzStWeEdCAZYanL4RUQe3u311ca9pHYS1ACZBmTx8PRPbKZ+mWjqB\n15Z67ry/JOtFtg5CxT3quuqGi5KS7oPyo9ffZ16uOGtqIbuvAvqwoKLt6PdtuRYu\n63J3Fkc3yUOeBeGBvqR3knChV3JhZM3t0z1qC6AvLIhhv8VnhNxjsDD3hwKy/jvm\npxM6tWqbue5hmtjdZ4P6Mzq3pgsC33kJ6k29uQf47PnFtApQGSloqQJZJbwcySRz\nlpkWvfWhwNVzBM0IamDHCsU4gX1RvjTYse+sdbt4NdtsjVhfjUOhZw441p3/itCM\nOplbnWu4YUna2Cw4HB8t1eF/tWV8WvK1P8YiTYGRqBnSFSOM//yOXCig1y+DU+I1\nR3zQtnSL8kaxdc7i5H0uOI5TPZnCxwGE+FDFRoTALNI9eW0xCcQaWLVck6t/V6K4\nKSXy4idQ8BiLT1V/8Iwc26I7Huv8pCSpsyZ40tHT5IczGzDxKw4vG0hAmK1/53Nq\nyD14choQhZeNfg8c21fCmbSKFNJDmTCG36K+lgDtjGi2w8iOrZym7nS2rfZBCEOS\nnUR6rVbXZi0N3LCjhcc03SeUZy3Askk5/qm+q8DUTYbsGqg4bpMV9tJJSmjEvoc5\n/PNP4BJPRHAOcCJtYl3uymAt+YkGpk9hyY3G5nQSobr4lva+jII=\n=4MyY\n-----END PGP SIGNATURE-----",
        "payload": "tree fad1d713d2e9e71438b1805dc5a0d6a795c85719\nparent eec15662fad917b169f5e3b8baaf4301dcf00a7b\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1536814399 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1559122831 +0900\n\nwallet: enable avoid_reuse feature\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8247a0da3a46d7c38943ee0304343ab7465305bd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8247a0da3a46d7c38943ee0304343ab7465305bd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8247a0da3a46d7c38943ee0304343ab7465305bd/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eec15662fad917b169f5e3b8baaf4301dcf00a7b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eec15662fad917b169f5e3b8baaf4301dcf00a7b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eec15662fad917b169f5e3b8baaf4301dcf00a7b"
      }
    ],
    "stats": {
      "total": 79,
      "additions": 65,
      "deletions": 14
    },
    "files": [
      {
        "sha": "da3da7e324dbb64c2f4c6f0a84ea4f1327cdb4c0",
        "filename": "src/script/ismine.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8247a0da3a46d7c38943ee0304343ab7465305bd/src/script/ismine.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8247a0da3a46d7c38943ee0304343ab7465305bd/src/script/ismine.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/ismine.h?ref=8247a0da3a46d7c38943ee0304343ab7465305bd",
        "patch": "@@ -20,7 +20,9 @@ enum isminetype\n     ISMINE_NO         = 0,\n     ISMINE_WATCH_ONLY = 1 << 0,\n     ISMINE_SPENDABLE  = 1 << 1,\n+    ISMINE_USED       = 1 << 2,\n     ISMINE_ALL        = ISMINE_WATCH_ONLY | ISMINE_SPENDABLE,\n+    ISMINE_ALL_USED   = ISMINE_ALL | ISMINE_USED,\n     ISMINE_ENUM_ELEMENTS,\n };\n /** used for bitflags of isminetype */"
      },
      {
        "sha": "6ac1a42bf58ef614379579a3cb325725a0575455",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 56,
        "deletions": 13,
        "changes": 69,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8247a0da3a46d7c38943ee0304343ab7465305bd/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8247a0da3a46d7c38943ee0304343ab7465305bd/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=8247a0da3a46d7c38943ee0304343ab7465305bd",
        "patch": "@@ -945,6 +945,37 @@ bool CWallet::MarkReplaced(const uint256& originalHash, const uint256& newHash)\n     return success;\n }\n \n+void CWallet::SetUsedDestinationState(const uint256& hash, unsigned int n, bool used)\n+{\n+    const CWalletTx* srctx = GetWalletTx(hash);\n+    if (!srctx) return;\n+\n+    CTxDestination dst;\n+    if (ExtractDestination(srctx->tx->vout[n].scriptPubKey, dst)) {\n+        if (::IsMine(*this, dst)) {\n+            LOCK(cs_wallet);\n+            if (used && !GetDestData(dst, \"used\", nullptr)) {\n+                AddDestData(dst, \"used\", \"p\"); // p for \"present\", opposite of absent (null)\n+            } else if (!used && GetDestData(dst, \"used\", nullptr)) {\n+                EraseDestData(dst, \"used\");\n+            }\n+        }\n+    }\n+}\n+\n+bool CWallet::IsUsedDestination(const CTxDestination& dst) const\n+{\n+    LOCK(cs_wallet);\n+    return ::IsMine(*this, dst) && GetDestData(dst, \"used\", nullptr);\n+}\n+\n+bool CWallet::IsUsedDestination(const uint256& hash, unsigned int n) const\n+{\n+    CTxDestination dst;\n+    const CWalletTx* srctx = GetWalletTx(hash);\n+    return srctx && ExtractDestination(srctx->tx->vout[n].scriptPubKey, dst) && IsUsedDestination(dst);\n+}\n+\n bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFlushOnClose)\n {\n     LOCK(cs_wallet);\n@@ -953,6 +984,14 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFlushOnClose)\n \n     uint256 hash = wtxIn.GetHash();\n \n+    if (IsWalletFlagSet(WALLET_FLAG_AVOID_REUSE)) {\n+        // Mark used destinations\n+        for (const CTxIn& txin : wtxIn.tx->vin) {\n+            const COutPoint& op = txin.prevout;\n+            SetUsedDestinationState(op.hash, op.n, true);\n+        }\n+    }\n+\n     // Inserts only if not already there, returns tx inserted or tx found\n     std::pair<std::map<uint256, CWalletTx>::iterator, bool> ret = mapWallet.insert(std::make_pair(hash, wtxIn));\n     CWalletTx& wtx = (*ret.first).second;\n@@ -2072,7 +2111,7 @@ CAmount CWalletTx::GetAvailableCredit(interfaces::Chain::Lock& locked_chain, boo\n         return 0;\n \n     // Avoid caching ismine for NO or ALL cases (could remove this check and simplify in the future).\n-    bool allow_cache = filter == ISMINE_SPENDABLE || filter == ISMINE_WATCH_ONLY;\n+    bool allow_cache = (filter & ISMINE_ALL) && (filter & ISMINE_ALL) != ISMINE_ALL;\n \n     // Must wait until coinbase is safely deep enough in the chain before valuing it\n     if (IsImmatureCoinBase(locked_chain))\n@@ -2082,12 +2121,12 @@ CAmount CWalletTx::GetAvailableCredit(interfaces::Chain::Lock& locked_chain, boo\n         return m_amounts[AVAILABLE_CREDIT].m_value[filter];\n     }\n \n+    bool allow_used_addresses = (filter & ISMINE_USED) || !pwallet->IsWalletFlagSet(WALLET_FLAG_AVOID_REUSE);\n     CAmount nCredit = 0;\n     uint256 hashTx = GetHash();\n     for (unsigned int i = 0; i < tx->vout.size(); i++)\n     {\n-        if (!pwallet->IsSpent(locked_chain, hashTx, i))\n-        {\n+        if (!pwallet->IsSpent(locked_chain, hashTx, i) && (allow_used_addresses || !pwallet->IsUsedDestination(hashTx, i))) {\n             const CTxOut &txout = tx->vout[i];\n             nCredit += pwallet->GetCredit(txout, filter);\n             if (!MoneyRange(nCredit))\n@@ -2229,9 +2268,10 @@ void MaybeResendWalletTxs()\n  */\n \n \n-CWallet::Balance CWallet::GetBalance(const int min_depth) const\n+CWallet::Balance CWallet::GetBalance(const int min_depth, bool avoid_reuse) const\n {\n     Balance ret;\n+    isminefilter reuse_filter = avoid_reuse ? 0 : ISMINE_USED;\n     {\n         auto locked_chain = chain().lock();\n         LOCK(cs_wallet);\n@@ -2240,8 +2280,8 @@ CWallet::Balance CWallet::GetBalance(const int min_depth) const\n             const CWalletTx& wtx = entry.second;\n             const bool is_trusted{wtx.IsTrusted(*locked_chain)};\n             const int tx_depth{wtx.GetDepthInMainChain(*locked_chain)};\n-            const CAmount tx_credit_mine{wtx.GetAvailableCredit(*locked_chain, /* fUseCache */ true, ISMINE_SPENDABLE)};\n-            const CAmount tx_credit_watchonly{wtx.GetAvailableCredit(*locked_chain, /* fUseCache */ true, ISMINE_WATCH_ONLY)};\n+            const CAmount tx_credit_mine{wtx.GetAvailableCredit(*locked_chain, /* fUseCache */ true, ISMINE_SPENDABLE | reuse_filter)};\n+            const CAmount tx_credit_watchonly{wtx.GetAvailableCredit(*locked_chain, /* fUseCache */ true, ISMINE_WATCH_ONLY | reuse_filter)};\n             if (is_trusted && tx_depth >= min_depth) {\n                 ret.m_mine_trusted += tx_credit_mine;\n                 ret.m_watchonly_trusted += tx_credit_watchonly;\n@@ -2279,6 +2319,9 @@ void CWallet::AvailableCoins(interfaces::Chain::Lock& locked_chain, std::vector<\n \n     vCoins.clear();\n     CAmount nTotal = 0;\n+    // Either the WALLET_FLAG_AVOID_REUSE flag is not set (in which case we always allow), or we default to avoiding, and only in the case where\n+    // a coin control object is provided, and has the avoid address reuse flag set to false, do we allow already used addresses\n+    bool allow_used_addresses = !IsWalletFlagSet(WALLET_FLAG_AVOID_REUSE) || (coinControl && !coinControl->m_avoid_address_reuse);\n \n     for (const auto& entry : mapWallet)\n     {\n@@ -2360,6 +2403,10 @@ void CWallet::AvailableCoins(interfaces::Chain::Lock& locked_chain, std::vector<\n                 continue;\n             }\n \n+            if (!allow_used_addresses && IsUsedDestination(wtxid, i)) {\n+                continue;\n+            }\n+\n             bool solvable = IsSolvable(*this, wtx.tx->vout[i].scriptPubKey);\n             bool spendable = ((mine & ISMINE_SPENDABLE) != ISMINE_NO) || (((mine & ISMINE_WATCH_ONLY) != ISMINE_NO) && (coinControl && coinControl->fAllowWatchOnly && solvable));\n \n@@ -4150,16 +4197,12 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n         // ensure this wallet.dat can only be opened by clients supporting HD with chain split and expects no default key\n         walletInstance->SetMinVersion(FEATURE_LATEST);\n \n-        if ((wallet_creation_flags & WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n-            //selective allow to set flags\n-            walletInstance->SetWalletFlag(WALLET_FLAG_DISABLE_PRIVATE_KEYS);\n-        } else if (wallet_creation_flags & WALLET_FLAG_BLANK_WALLET) {\n-            walletInstance->SetWalletFlag(WALLET_FLAG_BLANK_WALLET);\n-        } else {\n+        walletInstance->SetWalletFlags(wallet_creation_flags, false);\n+        if (!(wallet_creation_flags & (WALLET_FLAG_DISABLE_PRIVATE_KEYS | WALLET_FLAG_BLANK_WALLET))) {\n             // generate a new seed\n             CPubKey seed = walletInstance->GenerateNewSeed();\n             walletInstance->SetHDSeed(seed);\n-        } // Otherwise, do not generate a new seed\n+        }\n \n         // Top up the keypool\n         if (walletInstance->CanGenerateKeys() && !walletInstance->TopUpKeyPool()) {"
      },
      {
        "sha": "311a5030cc74ad699a6d6067482d8551e5bde2a1",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8247a0da3a46d7c38943ee0304343ab7465305bd/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8247a0da3a46d7c38943ee0304343ab7465305bd/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=8247a0da3a46d7c38943ee0304343ab7465305bd",
        "patch": "@@ -941,6 +941,12 @@ class CWallet final : public CCryptoKeyStore, private interfaces::Chain::Notific\n         std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, const CoinSelectionParams& coin_selection_params, bool& bnb_used) const;\n \n     bool IsSpent(interfaces::Chain::Lock& locked_chain, const uint256& hash, unsigned int n) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+\n+    // Whether this or any UTXO with the same CTxDestination has been spent.\n+    bool IsUsedDestination(const CTxDestination& dst) const;\n+    bool IsUsedDestination(const uint256& hash, unsigned int n) const;\n+    void SetUsedDestinationState(const uint256& hash, unsigned int n, bool used);\n+\n     std::vector<OutputGroup> GroupOutputs(const std::vector<COutput>& outputs, bool single_coin) const;\n \n     bool IsLockedCoin(uint256 hash, unsigned int n) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n@@ -1053,7 +1059,7 @@ class CWallet final : public CCryptoKeyStore, private interfaces::Chain::Notific\n         CAmount m_watchonly_untrusted_pending{0};\n         CAmount m_watchonly_immature{0};\n     };\n-    Balance GetBalance(int min_depth = 0) const;\n+    Balance GetBalance(int min_depth = 0, bool avoid_reuse = true) const;\n     CAmount GetAvailableBalance(const CCoinControl* coinControl = nullptr) const;\n \n     OutputType TransactionChangeType(OutputType change_type, const std::vector<CRecipient>& vecSend);"
      }
    ]
  },
  {
    "sha": "f904723e0d5883309cb0dd14b826bc45c5e776fb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmOTA0NzIzZTBkNTg4MzMwOWNiMGRkMTRiODI2YmM0NWM1ZTc3NmZi",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2018-09-13T04:35:10Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2019-05-29T09:40:31Z"
      },
      "message": "wallet/rpc: add setwalletflag RPC and MUTABLE_WALLET_FLAGS",
      "tree": {
        "sha": "bb155f2c136f7a1fad27f4aef2ba16b754a11860",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bb155f2c136f7a1fad27f4aef2ba16b754a11860"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f904723e0d5883309cb0dd14b826bc45c5e776fb",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAlzuU5AACgkQV692LbM1\nMyIdiw/+JtjwXbXS+ZJXYOimHEF/isukYgVP1iXugPEtkF3mHfan5MwRGXww4nz/\nZFrYnf6epLvsDKfB6HOuZNiaWfzKZS2UzibS10WHjb/RxLrD+72g34cWB+d4n3Ut\nb8fInWfjQDCIvC/pyqS4+OChHTfWGCurEmSC1DshcT6bZ9H9U3+qWRHTFulIJq5K\nA+IDSq5cXaZ672DDT/hfyxNEYc8EujYlIYmp3GGQqUi+nYeP3csofKhNn+OUVwDY\nf6FrheE7HdZ+01mgcLQQkVR+8h2LQUqaof3RsG2JAgmmZakpi2GxblxRxjLVC1b4\noCebNR6O5ZawcGC/sFoga1+sali/WMmTpK/2qj8ZPOWWUapfuEQFDisdp3Md+5fu\nUoDWNQcAjyXVyoWtH9O3+srqDwmd5eU7CDmUnBnF7wSja8KVNGWv7oIiAvWslSBI\nCEWFyBsSqsqh84hceRARH7v2xhLb14uiqIMAkuT0UpIS6LkmRxQFLJcZrtVMXdP2\nRRMyi4W4vqVt76vz1Mey/CEXdLcXeO4A0H51dFWv/M1BgF+6otbLvMr8vFsiIroc\ni2ICVZqCH4pyJLaoz5ULi1DAkruSWiy1Vsy5qkBLMilzt6D2a7LIQJVxgkeRgpIt\n+JEcxXdXaynWMRCFuOarzzmtow3l39A7Hz7Yoz+PbNl7VFrGUmo=\n=H+5r\n-----END PGP SIGNATURE-----",
        "payload": "tree bb155f2c136f7a1fad27f4aef2ba16b754a11860\nparent 8247a0da3a46d7c38943ee0304343ab7465305bd\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1536813310 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1559122831 +0900\n\nwallet/rpc: add setwalletflag RPC and MUTABLE_WALLET_FLAGS\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f904723e0d5883309cb0dd14b826bc45c5e776fb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f904723e0d5883309cb0dd14b826bc45c5e776fb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f904723e0d5883309cb0dd14b826bc45c5e776fb/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8247a0da3a46d7c38943ee0304343ab7465305bd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8247a0da3a46d7c38943ee0304343ab7465305bd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8247a0da3a46d7c38943ee0304343ab7465305bd"
      }
    ],
    "stats": {
      "total": 75,
      "additions": 75,
      "deletions": 0
    },
    "files": [
      {
        "sha": "6667db0abe78b5da28a0a2302d16119f979837b6",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f904723e0d5883309cb0dd14b826bc45c5e776fb/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f904723e0d5883309cb0dd14b826bc45c5e776fb/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=f904723e0d5883309cb0dd14b826bc45c5e776fb",
        "patch": "@@ -141,6 +141,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"setban\", 2, \"bantime\" },\n     { \"setban\", 3, \"absolute\" },\n     { \"setnetworkactive\", 0, \"state\" },\n+    { \"setwalletflag\", 1, \"value\" },\n     { \"getmempoolancestors\", 1, \"verbose\" },\n     { \"getmempooldescendants\", 1, \"verbose\" },\n     { \"bumpfee\", 1, \"options\" },"
      },
      {
        "sha": "d47be1dea3a2f0a20fbcb3f5315ce25b1e3ae421",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 71,
        "deletions": 0,
        "changes": 71,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f904723e0d5883309cb0dd14b826bc45c5e776fb/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f904723e0d5883309cb0dd14b826bc45c5e776fb/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=f904723e0d5883309cb0dd14b826bc45c5e776fb",
        "patch": "@@ -2650,6 +2650,76 @@ static UniValue loadwallet(const JSONRPCRequest& request)\n     return obj;\n }\n \n+static UniValue setwalletflag(const JSONRPCRequest& request)\n+{\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2) {\n+        std::string flags = \"\";\n+        for (auto& it : WALLET_FLAG_MAP)\n+            if (it.second & MUTABLE_WALLET_FLAGS)\n+                flags += (flags == \"\" ? \"\" : \", \") + it.first;\n+        throw std::runtime_error(\n+            RPCHelpMan{\"setwalletflag\",\n+                \"\\nChange the state of the given wallet flag for a wallet.\\n\",\n+                {\n+                    {\"flag\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The name of the flag to change. Current available flags: \" + flags},\n+                    {\"value\", RPCArg::Type::BOOL, /* default */ \"true\", \"The new state.\"},\n+                },\n+                RPCResult{\n+            \"{\\n\"\n+            \"    \\\"flag_name\\\": string   (string) The name of the flag that was modified\\n\"\n+            \"    \\\"flag_state\\\": bool    (bool) The new state of the flag\\n\"\n+            \"    \\\"warnings\\\": string    (string) Any warnings associated with the change\\n\"\n+            \"}\\n\"\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"setwalletflag\", \"avoid_reuse\")\n+                  + HelpExampleRpc(\"setwalletflag\", \"\\\"avoid_reuse\\\"\")\n+                },\n+            }.ToString());\n+    }\n+\n+    std::string flag_str = request.params[0].get_str();\n+    bool value = request.params[1].isNull() || request.params[1].get_bool();\n+\n+    if (!WALLET_FLAG_MAP.count(flag_str)) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Unknown wallet flag: %s\", flag_str));\n+    }\n+\n+    auto flag = WALLET_FLAG_MAP.at(flag_str);\n+\n+    if (!(flag & MUTABLE_WALLET_FLAGS)) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Wallet flag is immutable: %s\", flag_str));\n+    }\n+\n+    UniValue res(UniValue::VOBJ);\n+\n+    if (pwallet->IsWalletFlagSet(flag) == value) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Wallet flag is already set to %s: %s\", value ? \"true\" : \"false\", flag_str));\n+    }\n+\n+    res.pushKV(\"flag_name\", flag_str);\n+    res.pushKV(\"flag_state\", value);\n+\n+    if (value) {\n+        pwallet->SetWalletFlag(flag);\n+    } else {\n+        pwallet->UnsetWalletFlag(flag);\n+    }\n+\n+    if (flag && value && WALLET_FLAG_CAVEATS.count(flag)) {\n+        res.pushKV(\"warnings\", WALLET_FLAG_CAVEATS.at(flag));\n+    }\n+\n+    return res;\n+}\n+\n static UniValue createwallet(const JSONRPCRequest& request)\n {\n     const RPCHelpMan help{\n@@ -4232,6 +4302,7 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             \"sethdseed\",                        &sethdseed,                     {\"newkeypool\",\"seed\"} },\n     { \"wallet\",             \"setlabel\",                         &setlabel,                      {\"address\",\"label\"} },\n     { \"wallet\",             \"settxfee\",                         &settxfee,                      {\"amount\"} },\n+    { \"wallet\",             \"setwalletflag\",                    &setwalletflag,                 {\"flag\",\"value\"} },\n     { \"wallet\",             \"signmessage\",                      &signmessage,                   {\"address\",\"message\"} },\n     { \"wallet\",             \"signrawtransactionwithwallet\",     &signrawtransactionwithwallet,  {\"hexstring\",\"prevtxs\",\"sighashtype\"} },\n     { \"wallet\",             \"unloadwallet\",                     &unloadwallet,                  {\"wallet_name\"} },"
      },
      {
        "sha": "c2d1102c33f8aa1e82e517deb2012f104af979c5",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f904723e0d5883309cb0dd14b826bc45c5e776fb/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f904723e0d5883309cb0dd14b826bc45c5e776fb/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=f904723e0d5883309cb0dd14b826bc45c5e776fb",
        "patch": "@@ -149,6 +149,9 @@ static constexpr uint64_t KNOWN_WALLET_FLAGS =\n     |   WALLET_FLAG_KEY_ORIGIN_METADATA\n     |   WALLET_FLAG_DISABLE_PRIVATE_KEYS;\n \n+static constexpr uint64_t MUTABLE_WALLET_FLAGS =\n+        WALLET_FLAG_AVOID_REUSE;\n+\n static const std::map<std::string,WalletFlags> WALLET_FLAG_MAP{\n     {\"avoid_reuse\", WALLET_FLAG_AVOID_REUSE},\n     {\"blank\", WALLET_FLAG_BLANK_WALLET},"
      }
    ]
  },
  {
    "sha": "0bdfbd34cf4015de87741ff549db35e5064f4e16",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYmRmYmQzNGNmNDAxNWRlODc3NDFmZjU0OWRiMzVlNTA2NGY0ZTE2",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2018-09-11T06:53:36Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2019-05-29T09:40:31Z"
      },
      "message": "wallet/rpc: add 'avoid_reuse' option to RPC commands\n\ncreatewallet, getbalance, getwalletinfo, listunspent, sendtoaddress\n\nrpc/wallet: listunspent include reused flag and show reused utxos by default",
      "tree": {
        "sha": "88c8b6330be2a376d092fae9871a2da6f819e23c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/88c8b6330be2a376d092fae9871a2da6f819e23c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0bdfbd34cf4015de87741ff549db35e5064f4e16",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIyBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAlzuU5AACgkQV692LbM1\nMyIW/Q/0DJ4GDF7N04tZK7KLPQ7CTVz4KodleUIJ7fnX74yVzjublLoHP5AmiOxO\npojDIqQXa6S0DHA929kz5x8evtiPmoUwCP80M4PoQWCLeCHJUXdCUc7pdXdST7hH\nS+/7ChCM6SwkBNwV8P9qVlH4u0mMJLfi2nj4YWLr8llpkemsaJjxOcJoMCNjEPBg\nrkobCO0DCTteJ5E6Z3TBn1kJFxeo4QAywp45wobB61BI21+kwi6FjNWDzQRnTxBB\n/RTeoaxQCfIUTkHYi2IT4/N7Ru9kDa4vCpHkp5BiDnlh6ljgJkzL5uaeL5WmBQtN\np8OHWVoJ2CFaRi0wbIcawwwD+DKfFDOKzrG/Sbif+PB37OfDag54523RSwY3WEZf\nbcP/Ag8KbMrHogrvHVSJMC+eZyrGaxGrvBOiJ0fS1crdCVM+Z87Qe96OHxc4cyI5\nRmLaN5vOlxRU1HMp0OLIeGw4ZGZIVp8Uu+349+pfIrfNsc8HeEUhEdnXzBji/97Y\nCvyc0yVF2dtbPNd3zwc+AWC1zzmVZv5oWkJ8kna61g+AweAOFRhz+cwzAFTXCSAP\n+C+cmAsaDRALNDx0XubSa9rkwrLykGpr6Y+5cWCNQacX2roShK0Xe4ouxOJz+TP7\n4mId4UeBvqFkbbnsPZQ4y/DajmIQrrnaM0mHG0u8xQ57JMTlEw==\n=QBhP\n-----END PGP SIGNATURE-----",
        "payload": "tree 88c8b6330be2a376d092fae9871a2da6f819e23c\nparent f904723e0d5883309cb0dd14b826bc45c5e776fb\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1536648816 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1559122831 +0900\n\nwallet/rpc: add 'avoid_reuse' option to RPC commands\n\ncreatewallet, getbalance, getwalletinfo, listunspent, sendtoaddress\n\nrpc/wallet: listunspent include reused flag and show reused utxos by default\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0bdfbd34cf4015de87741ff549db35e5064f4e16",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0bdfbd34cf4015de87741ff549db35e5064f4e16",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0bdfbd34cf4015de87741ff549db35e5064f4e16/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f904723e0d5883309cb0dd14b826bc45c5e776fb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f904723e0d5883309cb0dd14b826bc45c5e776fb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f904723e0d5883309cb0dd14b826bc45c5e776fb"
      }
    ],
    "stats": {
      "total": 41,
      "additions": 33,
      "deletions": 8
    },
    "files": [
      {
        "sha": "8f6bdc21aa7f117d159ea097fd439ac2109a0674",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0bdfbd34cf4015de87741ff549db35e5064f4e16/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0bdfbd34cf4015de87741ff549db35e5064f4e16/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=0bdfbd34cf4015de87741ff549db35e5064f4e16",
        "patch": "@@ -36,6 +36,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"sendtoaddress\", 4, \"subtractfeefromamount\" },\n     { \"sendtoaddress\", 5 , \"replaceable\" },\n     { \"sendtoaddress\", 6 , \"conf_target\" },\n+    { \"sendtoaddress\", 8, \"avoid_reuse\" },\n     { \"settxfee\", 0, \"amount\" },\n     { \"sethdseed\", 0, \"newkeypool\" },\n     { \"getreceivedbyaddress\", 1, \"minconf\" },\n@@ -48,6 +49,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"listreceivedbylabel\", 2, \"include_watchonly\" },\n     { \"getbalance\", 1, \"minconf\" },\n     { \"getbalance\", 2, \"include_watchonly\" },\n+    { \"getbalance\", 3, \"avoid_reuse\" },\n     { \"getblockhash\", 0, \"height\" },\n     { \"waitforblockheight\", 0, \"height\" },\n     { \"waitforblockheight\", 1, \"timeout\" },\n@@ -163,6 +165,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"rescanblockchain\", 1, \"stop_height\"},\n     { \"createwallet\", 1, \"disable_private_keys\"},\n     { \"createwallet\", 2, \"blank\"},\n+    { \"createwallet\", 4, \"avoid_reuse\"},\n     { \"getnodeaddresses\", 0, \"count\"},\n     { \"stop\", 0, \"wait\" },\n };"
      },
      {
        "sha": "237fb2837af2cf48f058e95f2e82a97bf276ba1a",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 30,
        "deletions": 8,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0bdfbd34cf4015de87741ff549db35e5064f4e16/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0bdfbd34cf4015de87741ff549db35e5064f4e16/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=0bdfbd34cf4015de87741ff549db35e5064f4e16",
        "patch": "@@ -321,7 +321,7 @@ static UniValue setlabel(const JSONRPCRequest& request)\n \n static CTransactionRef SendMoney(interfaces::Chain::Lock& locked_chain, CWallet * const pwallet, const CTxDestination &address, CAmount nValue, bool fSubtractFeeFromAmount, const CCoinControl& coin_control, mapValue_t mapValue)\n {\n-    CAmount curBalance = pwallet->GetBalance().m_mine_trusted;\n+    CAmount curBalance = pwallet->GetBalance(0, coin_control.m_avoid_address_reuse).m_mine_trusted;\n \n     // Check amount\n     if (nValue <= 0)\n@@ -368,7 +368,7 @@ static UniValue sendtoaddress(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() < 2 || request.params.size() > 8)\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 9)\n         throw std::runtime_error(\n             RPCHelpMan{\"sendtoaddress\",\n                 \"\\nSend an amount to a given address.\" +\n@@ -389,6 +389,8 @@ static UniValue sendtoaddress(const JSONRPCRequest& request)\n             \"       \\\"UNSET\\\"\\n\"\n             \"       \\\"ECONOMICAL\\\"\\n\"\n             \"       \\\"CONSERVATIVE\\\"\"},\n+                    {\"avoid_reuse\", RPCArg::Type::BOOL, /* default */ pwallet->IsWalletFlagSet(WALLET_FLAG_AVOID_REUSE) ? \"true\" : \"unavailable\", \"Avoid spending from dirty addresses; addresses are considered\\n\"\n+            \"                             dirty if they have previously been used in a transaction.\"},\n                 },\n                 RPCResult{\n             \"\\\"txid\\\"                  (string) The transaction id.\\n\"\n@@ -445,6 +447,7 @@ static UniValue sendtoaddress(const JSONRPCRequest& request)\n         }\n     }\n \n+    coin_control.m_avoid_address_reuse = GetAvoidReuseFlag(pwallet, request.params[8]);\n \n     EnsureWalletIsUnlocked(pwallet);\n \n@@ -734,7 +737,7 @@ static UniValue getbalance(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || (request.params.size() > 3 ))\n+    if (request.fHelp || request.params.size() > 4)\n         throw std::runtime_error(\n             RPCHelpMan{\"getbalance\",\n                 \"\\nReturns the total available balance.\\n\"\n@@ -744,6 +747,7 @@ static UniValue getbalance(const JSONRPCRequest& request)\n                     {\"dummy\", RPCArg::Type::STR, RPCArg::Optional::OMITTED_NAMED_ARG, \"Remains for backward compatibility. Must be excluded or set to \\\"*\\\".\"},\n                     {\"minconf\", RPCArg::Type::NUM, /* default */ \"0\", \"Only include transactions confirmed at least this many times.\"},\n                     {\"include_watchonly\", RPCArg::Type::BOOL, /* default */ \"false\", \"Also include balance in watch-only addresses (see 'importaddress')\"},\n+                    {\"avoid_reuse\", RPCArg::Type::BOOL, /* default */ pwallet->IsWalletFlagSet(WALLET_FLAG_AVOID_REUSE) ? \"true\" : \"unavailable\", \"Do not include balance in dirty outputs; addresses are considered dirty if they have previously been used in a transaction.\"},\n                 },\n                 RPCResult{\n             \"amount              (numeric) The total amount in \" + CURRENCY_UNIT + \" received for this wallet.\\n\"\n@@ -780,7 +784,9 @@ static UniValue getbalance(const JSONRPCRequest& request)\n         include_watchonly = true;\n     }\n \n-    const auto bal = pwallet->GetBalance(min_depth);\n+    bool avoid_reuse = GetAvoidReuseFlag(pwallet, request.params[3]);\n+\n+    const auto bal = pwallet->GetBalance(min_depth, avoid_reuse);\n \n     return ValueFromAmount(bal.m_mine_trusted + (include_watchonly ? bal.m_watchonly_trusted : 0));\n }\n@@ -2474,6 +2480,7 @@ static UniValue getwalletinfo(const JSONRPCRequest& request)\n             \"  \\\"paytxfee\\\": x.xxxx,                (numeric) the transaction fee configuration, set in \" + CURRENCY_UNIT + \"/kB\\n\"\n             \"  \\\"hdseedid\\\": \\\"<hash160>\\\"            (string, optional) the Hash160 of the HD seed (only present when HD is enabled)\\n\"\n             \"  \\\"private_keys_enabled\\\": true|false (boolean) false if privatekeys are disabled for this wallet (enforced watch-only wallet)\\n\"\n+            \"  \\\"avoid_reuse\\\": true|false          (boolean) whether this wallet tracks clean/dirty coins in terms of reuse\\n\"\n             \"  \\\"scanning\\\":                        (json object) current scanning details, or false if no scan is in progress\\n\"\n             \"    {\\n\"\n             \"      \\\"duration\\\" : xxxx              (numeric) elapsed seconds since scan start\\n\"\n@@ -2522,6 +2529,7 @@ static UniValue getwalletinfo(const JSONRPCRequest& request)\n         obj.pushKV(\"hdseedid\", seed_id.GetHex());\n     }\n     obj.pushKV(\"private_keys_enabled\", !pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS));\n+    obj.pushKV(\"avoid_reuse\", pwallet->IsWalletFlagSet(WALLET_FLAG_AVOID_REUSE));\n     if (pwallet->IsScanning()) {\n         UniValue scanning(UniValue::VOBJ);\n         scanning.pushKV(\"duration\", pwallet->ScanningDuration() / 1000);\n@@ -2730,6 +2738,7 @@ static UniValue createwallet(const JSONRPCRequest& request)\n             {\"disable_private_keys\", RPCArg::Type::BOOL, /* default */ \"false\", \"Disable the possibility of private keys (only watchonlys are possible in this mode).\"},\n             {\"blank\", RPCArg::Type::BOOL, /* default */ \"false\", \"Create a blank wallet. A blank wallet has no keys or HD seed. One can be set using sethdseed.\"},\n             {\"passphrase\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"Encrypt the wallet with this passphrase.\"},\n+            {\"avoid_reuse\", RPCArg::Type::BOOL, /* default */ \"false\", \"Keep track of coin reuse, and treat dirty and clean coins differently with privacy considerations in mind.\"},\n         },\n         RPCResult{\n             \"{\\n\"\n@@ -2771,6 +2780,10 @@ static UniValue createwallet(const JSONRPCRequest& request)\n         flags |= WALLET_FLAG_BLANK_WALLET;\n     }\n \n+    if (!request.params[4].isNull() && request.params[4].get_bool()) {\n+        flags |= WALLET_FLAG_AVOID_REUSE;\n+    }\n+\n     WalletLocation location(request.params[0].get_str());\n     if (location.Exists()) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Wallet \" + location.GetName() + \" already exists.\");\n@@ -2872,6 +2885,8 @@ static UniValue listunspent(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n+    bool avoid_reuse = pwallet->IsWalletFlagSet(WALLET_FLAG_AVOID_REUSE);\n+\n     if (request.fHelp || request.params.size() > 5)\n         throw std::runtime_error(\n             RPCHelpMan{\"listunspent\",\n@@ -2911,6 +2926,9 @@ static UniValue listunspent(const JSONRPCRequest& request)\n             \"    \\\"witnessScript\\\" : \\\"script\\\" (string) witnessScript if the scriptPubKey is P2WSH or P2SH-P2WSH\\n\"\n             \"    \\\"spendable\\\" : xxx,        (bool) Whether we have the private keys to spend this output\\n\"\n             \"    \\\"solvable\\\" : xxx,         (bool) Whether we know how to spend this output, ignoring the lack of keys\\n\"\n+            + (avoid_reuse ?\n+            \"    \\\"reused\\\" : xxx,           (bool) Whether this output is reused/dirty (sent to an address that was previously spent from)\\n\" :\n+            \"\") +\n             \"    \\\"desc\\\" : xxx,             (string, only when solvable) A descriptor for spending this output\\n\"\n             \"    \\\"safe\\\" : xxx              (bool) Whether this output is considered safe to spend. Unconfirmed transactions\\n\"\n             \"                              from outside keys and unconfirmed replacement transactions are considered unsafe\\n\"\n@@ -2990,9 +3008,11 @@ static UniValue listunspent(const JSONRPCRequest& request)\n     UniValue results(UniValue::VARR);\n     std::vector<COutput> vecOutputs;\n     {\n+        CCoinControl cctl;\n+        cctl.m_avoid_address_reuse = false;\n         auto locked_chain = pwallet->chain().lock();\n         LOCK(pwallet->cs_wallet);\n-        pwallet->AvailableCoins(*locked_chain, vecOutputs, !include_unsafe, nullptr, nMinimumAmount, nMaximumAmount, nMinimumSumAmount, nMaximumCount, nMinDepth, nMaxDepth);\n+        pwallet->AvailableCoins(*locked_chain, vecOutputs, !include_unsafe, &cctl, nMinimumAmount, nMaximumAmount, nMinimumSumAmount, nMaximumCount, nMinDepth, nMaxDepth);\n     }\n \n     LOCK(pwallet->cs_wallet);\n@@ -3001,6 +3021,7 @@ static UniValue listunspent(const JSONRPCRequest& request)\n         CTxDestination address;\n         const CScript& scriptPubKey = out.tx->tx->vout[out.i].scriptPubKey;\n         bool fValidAddress = ExtractDestination(scriptPubKey, address);\n+        bool reused = avoid_reuse && pwallet->IsUsedDestination(address);\n \n         if (destinations.size() && (!fValidAddress || !destinations.count(address)))\n             continue;\n@@ -3057,6 +3078,7 @@ static UniValue listunspent(const JSONRPCRequest& request)\n             auto descriptor = InferDescriptor(scriptPubKey, *pwallet);\n             entry.pushKV(\"desc\", descriptor->ToString());\n         }\n+        if (avoid_reuse) entry.pushKV(\"reused\", reused);\n         entry.pushKV(\"safe\", out.fSafe);\n         results.push_back(entry);\n     }\n@@ -4261,13 +4283,13 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             \"addmultisigaddress\",               &addmultisigaddress,            {\"nrequired\",\"keys\",\"label\",\"address_type\"} },\n     { \"wallet\",             \"backupwallet\",                     &backupwallet,                  {\"destination\"} },\n     { \"wallet\",             \"bumpfee\",                          &bumpfee,                       {\"txid\", \"options\"} },\n-    { \"wallet\",             \"createwallet\",                     &createwallet,                  {\"wallet_name\", \"disable_private_keys\", \"blank\", \"passphrase\"} },\n+    { \"wallet\",             \"createwallet\",                     &createwallet,                  {\"wallet_name\", \"disable_private_keys\", \"blank\", \"passphrase\", \"avoid_reuse\"} },\n     { \"wallet\",             \"dumpprivkey\",                      &dumpprivkey,                   {\"address\"}  },\n     { \"wallet\",             \"dumpwallet\",                       &dumpwallet,                    {\"filename\"} },\n     { \"wallet\",             \"encryptwallet\",                    &encryptwallet,                 {\"passphrase\"} },\n     { \"wallet\",             \"getaddressesbylabel\",              &getaddressesbylabel,           {\"label\"} },\n     { \"wallet\",             \"getaddressinfo\",                   &getaddressinfo,                {\"address\"} },\n-    { \"wallet\",             \"getbalance\",                       &getbalance,                    {\"dummy\",\"minconf\",\"include_watchonly\"} },\n+    { \"wallet\",             \"getbalance\",                       &getbalance,                    {\"dummy\",\"minconf\",\"include_watchonly\",\"avoid_reuse\"} },\n     { \"wallet\",             \"getnewaddress\",                    &getnewaddress,                 {\"label\",\"address_type\"} },\n     { \"wallet\",             \"getrawchangeaddress\",              &getrawchangeaddress,           {\"address_type\"} },\n     { \"wallet\",             \"getreceivedbyaddress\",             &getreceivedbyaddress,          {\"address\",\"minconf\"} },\n@@ -4298,7 +4320,7 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             \"removeprunedfunds\",                &removeprunedfunds,             {\"txid\"} },\n     { \"wallet\",             \"rescanblockchain\",                 &rescanblockchain,              {\"start_height\", \"stop_height\"} },\n     { \"wallet\",             \"sendmany\",                         &sendmany,                      {\"dummy\",\"amounts\",\"minconf\",\"comment\",\"subtractfeefrom\",\"replaceable\",\"conf_target\",\"estimate_mode\"} },\n-    { \"wallet\",             \"sendtoaddress\",                    &sendtoaddress,                 {\"address\",\"amount\",\"comment\",\"comment_to\",\"subtractfeefromamount\",\"replaceable\",\"conf_target\",\"estimate_mode\"} },\n+    { \"wallet\",             \"sendtoaddress\",                    &sendtoaddress,                 {\"address\",\"amount\",\"comment\",\"comment_to\",\"subtractfeefromamount\",\"replaceable\",\"conf_target\",\"estimate_mode\",\"avoid_reuse\"} },\n     { \"wallet\",             \"sethdseed\",                        &sethdseed,                     {\"newkeypool\",\"seed\"} },\n     { \"wallet\",             \"setlabel\",                         &setlabel,                      {\"address\",\"label\"} },\n     { \"wallet\",             \"settxfee\",                         &settxfee,                      {\"amount\"} },"
      }
    ]
  },
  {
    "sha": "8f2e208f7c0468f9ba92bc789a698281b1c81284",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZjJlMjA4ZjdjMDQ2OGY5YmE5MmJjNzg5YTY5ODI4MWIxYzgxMjg0",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2018-09-11T07:22:23Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2019-05-29T09:40:31Z"
      },
      "message": "test: add test for avoidreuse feature",
      "tree": {
        "sha": "a73f9ff3de91b5b4cb9424a11562177a9f39ded4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a73f9ff3de91b5b4cb9424a11562177a9f39ded4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8f2e208f7c0468f9ba92bc789a698281b1c81284",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAlzuU5AACgkQV692LbM1\nMyK+KA/+KpiTYW9EAIkX7WCXuznT1aLGz3SM2tdOLBlH+T7Th0h+rfV5iQbOq/WM\ntDhEIszE4xyGYCWa1N4vDsF7opeKCpeVtURtGwMoZcBTiBTAiPGhSQbTYAXxZuo8\nNylu0+OYlcJ4YcvnZl5RKkUCW8XhPo5AcQEecHaQrz9FiXYUArA5MKK8b1ofOd8/\nGgbnNk5v3YGkzfMOjp1xf05WdhQ/8nPG5gMMneX1P6GqIWD/ESsLc5i1nPAC+Qwf\nU7XvJ70a2vt/ts/5U5Y6jsmzPeRwqtjPnYb0PNQmNQ8PScNiJc7f1COl4toEwXvY\nMbEb2IT0+80KBxyGUra0WX/jHU8xpTDzJvNL8TFjFLNV24sqorcPVfuxi68RBqpF\nX14NGmZMjF5Pnr2yHkknchqRAN5mM+FiqKx2/B1/PXZa4CZ2G9XZMi4VqDCpx7r3\nTnbml76cZVxjo8lpuA4PhIKRyMQ61kyKi7lHwE/tzMDpJBE658gSXUWFVeaqabv7\nZjRT0DgPCLkYKBsPloXDlJ6YlF1e8tt7LvF1g050o6f4ETnroTKYJ2Nu1XsN+g1l\naukvO2DTIVQTV4tWB9T9SliAZGYfhN0PMxIEC5cdhTxdXSOURtAnT5c3TGIF0Siq\n8RF4RYplLlfyVD38PNHHuxXE6rjXuTQHgdMxJL2tJPYFSZ0+Xdk=\n=jR7G\n-----END PGP SIGNATURE-----",
        "payload": "tree a73f9ff3de91b5b4cb9424a11562177a9f39ded4\nparent 0bdfbd34cf4015de87741ff549db35e5064f4e16\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1536650543 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1559122831 +0900\n\ntest: add test for avoidreuse feature\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f2e208f7c0468f9ba92bc789a698281b1c81284",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8f2e208f7c0468f9ba92bc789a698281b1c81284",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f2e208f7c0468f9ba92bc789a698281b1c81284/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0bdfbd34cf4015de87741ff549db35e5064f4e16",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0bdfbd34cf4015de87741ff549db35e5064f4e16",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0bdfbd34cf4015de87741ff549db35e5064f4e16"
      }
    ],
    "stats": {
      "total": 218,
      "additions": 218,
      "deletions": 0
    },
    "files": [
      {
        "sha": "098dbd647b0cee43d5ac58c5eb4984cd28c6e165",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f2e208f7c0468f9ba92bc789a698281b1c81284/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f2e208f7c0468f9ba92bc789a698281b1c81284/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=8f2e208f7c0468f9ba92bc789a698281b1c81284",
        "patch": "@@ -120,6 +120,7 @@\n     'rpc_misc.py',\n     'interface_rest.py',\n     'mempool_spend_coinbase.py',\n+    'wallet_avoidreuse.py',\n     'mempool_reorg.py',\n     'mempool_persist.py',\n     'wallet_multiwallet.py',"
      },
      {
        "sha": "1dec040f68241e0010adf2e83c6f6c668d9b121e",
        "filename": "test/functional/wallet_avoidreuse.py",
        "status": "added",
        "additions": 217,
        "deletions": 0,
        "changes": 217,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f2e208f7c0468f9ba92bc789a698281b1c81284/test/functional/wallet_avoidreuse.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f2e208f7c0468f9ba92bc789a698281b1c81284/test/functional/wallet_avoidreuse.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_avoidreuse.py?ref=8f2e208f7c0468f9ba92bc789a698281b1c81284",
        "patch": "@@ -0,0 +1,217 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2018 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the avoid_reuse and setwalletflag features.\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+    connect_nodes_bi,\n+)\n+\n+# TODO: Copied from wallet_groups.py -- should perhaps move into util.py\n+def assert_approx(v, vexp, vspan=0.00001):\n+    if v < vexp - vspan:\n+        raise AssertionError(\"%s < [%s..%s]\" % (str(v), str(vexp - vspan), str(vexp + vspan)))\n+    if v > vexp + vspan:\n+        raise AssertionError(\"%s > [%s..%s]\" % (str(v), str(vexp - vspan), str(vexp + vspan)))\n+\n+def reset_balance(node, discardaddr):\n+    '''Throw away all owned coins by the node so it gets a balance of 0.'''\n+    balance = node.getbalance(avoid_reuse=False)\n+    if balance > 0.5:\n+        node.sendtoaddress(address=discardaddr, amount=balance, subtractfeefromamount=True, avoid_reuse=False)\n+\n+def count_unspent(node):\n+    '''Count the unspent outputs for the given node and return various statistics'''\n+    r = {\n+        \"total\": {\n+            \"count\": 0,\n+            \"sum\": 0,\n+        },\n+        \"reused\": {\n+            \"count\": 0,\n+            \"sum\": 0,\n+        },\n+    }\n+    supports_reused = True\n+    for utxo in node.listunspent(minconf=0):\n+        r[\"total\"][\"count\"] += 1\n+        r[\"total\"][\"sum\"] += utxo[\"amount\"]\n+        if supports_reused and \"reused\" in utxo:\n+            if utxo[\"reused\"]:\n+                r[\"reused\"][\"count\"] += 1\n+                r[\"reused\"][\"sum\"] += utxo[\"amount\"]\n+        else:\n+            supports_reused = False\n+    r[\"reused\"][\"supported\"] = supports_reused\n+    return r\n+\n+def assert_unspent(node, total_count=None, total_sum=None, reused_supported=None, reused_count=None, reused_sum=None):\n+    '''Make assertions about a node's unspent output statistics'''\n+    stats = count_unspent(node)\n+    if total_count is not None:\n+        assert_equal(stats[\"total\"][\"count\"], total_count)\n+    if total_sum is not None:\n+        assert_approx(stats[\"total\"][\"sum\"], total_sum, 0.001)\n+    if reused_supported is not None:\n+        assert_equal(stats[\"reused\"][\"supported\"], reused_supported)\n+    if reused_count is not None:\n+        assert_equal(stats[\"reused\"][\"count\"], reused_count)\n+    if reused_sum is not None:\n+        assert_approx(stats[\"reused\"][\"sum\"], reused_sum, 0.001)\n+\n+class AvoidReuseTest(BitcoinTestFramework):\n+\n+    def set_test_params(self):\n+        self.setup_clean_chain = False\n+        self.num_nodes = 2\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        '''Set up initial chain and run tests defined below'''\n+\n+        self.test_persistence()\n+        self.test_immutable()\n+\n+        self.nodes[0].generate(110)\n+        self.sync_all()\n+        reset_balance(self.nodes[1], self.nodes[0].getnewaddress())\n+        self.test_fund_send_fund_senddirty()\n+        reset_balance(self.nodes[1], self.nodes[0].getnewaddress())\n+        self.test_fund_send_fund_send()\n+\n+    def test_persistence(self):\n+        '''Test that wallet files persist the avoid_reuse flag.'''\n+        # Configure node 1 to use avoid_reuse\n+        self.nodes[1].setwalletflag('avoid_reuse')\n+\n+        # Flags should be node1.avoid_reuse=false, node2.avoid_reuse=true\n+        assert_equal(self.nodes[0].getwalletinfo()[\"avoid_reuse\"], False)\n+        assert_equal(self.nodes[1].getwalletinfo()[\"avoid_reuse\"], True)\n+\n+        # Stop and restart node 1\n+        self.stop_node(1)\n+        self.start_node(1)\n+        connect_nodes_bi(self.nodes, 0, 1)\n+\n+        # Flags should still be node1.avoid_reuse=false, node2.avoid_reuse=true\n+        assert_equal(self.nodes[0].getwalletinfo()[\"avoid_reuse\"], False)\n+        assert_equal(self.nodes[1].getwalletinfo()[\"avoid_reuse\"], True)\n+\n+        # Attempting to set flag to its current state should throw\n+        assert_raises_rpc_error(-8, \"Wallet flag is already set to false\", self.nodes[0].setwalletflag, 'avoid_reuse', False)\n+        assert_raises_rpc_error(-8, \"Wallet flag is already set to true\", self.nodes[1].setwalletflag, 'avoid_reuse', True)\n+\n+    def test_immutable(self):\n+        '''Test immutable wallet flags'''\n+        # Attempt to set the disable_private_keys flag; this should not work\n+        assert_raises_rpc_error(-8, \"Wallet flag is immutable\", self.nodes[1].setwalletflag, 'disable_private_keys')\n+\n+        tempwallet = \".wallet_avoidreuse.py_test_immutable_wallet.dat\"\n+\n+        # Create a wallet with disable_private_keys set; this should work\n+        self.nodes[1].createwallet(tempwallet, True)\n+        w = self.nodes[1].get_wallet_rpc(tempwallet)\n+\n+        # Attempt to unset the disable_private_keys flag; this should not work\n+        assert_raises_rpc_error(-8, \"Wallet flag is immutable\", w.setwalletflag, 'disable_private_keys', False)\n+\n+        # Unload temp wallet\n+        self.nodes[1].unloadwallet(tempwallet)\n+\n+    def test_fund_send_fund_senddirty(self):\n+        '''\n+        Test the same as test_fund_send_fund_send, except send the 10 BTC with\n+        the avoid_reuse flag set to false. This means the 10 BTC send should succeed,\n+        where it fails in test_fund_send_fund_send.\n+        '''\n+\n+        fundaddr = self.nodes[1].getnewaddress()\n+        retaddr = self.nodes[0].getnewaddress()\n+\n+        self.nodes[0].sendtoaddress(fundaddr, 10)\n+        self.nodes[0].generate(1)\n+        self.sync_all()\n+\n+        # listunspent should show 1 single, unused 10 btc output\n+        assert_unspent(self.nodes[1], total_count=1, total_sum=10, reused_supported=True, reused_count=0)\n+\n+        self.nodes[1].sendtoaddress(retaddr, 5)\n+        self.nodes[0].generate(1)\n+        self.sync_all()\n+\n+        # listunspent should show 1 single, unused 5 btc output\n+        assert_unspent(self.nodes[1], total_count=1, total_sum=5, reused_supported=True, reused_count=0)\n+\n+        self.nodes[0].sendtoaddress(fundaddr, 10)\n+        self.nodes[0].generate(1)\n+        self.sync_all()\n+\n+        # listunspent should show 2 total outputs (5, 10 btc), one unused (5), one reused (10)\n+        assert_unspent(self.nodes[1], total_count=2, total_sum=15, reused_count=1, reused_sum=10)\n+\n+        self.nodes[1].sendtoaddress(address=retaddr, amount=10, avoid_reuse=False)\n+\n+        # listunspent should show 1 total outputs (5 btc), unused\n+        assert_unspent(self.nodes[1], total_count=1, total_sum=5, reused_count=0)\n+\n+        # node 1 should now have about 5 btc left (for both cases)\n+        assert_approx(self.nodes[1].getbalance(), 5, 0.001)\n+        assert_approx(self.nodes[1].getbalance(avoid_reuse=False), 5, 0.001)\n+\n+    def test_fund_send_fund_send(self):\n+        '''\n+        Test the simple case where [1] generates a new address A, then\n+        [0] sends 10 BTC to A.\n+        [1] spends 5 BTC from A. (leaving roughly 5 BTC useable)\n+        [0] sends 10 BTC to A again.\n+        [1] tries to spend 10 BTC (fails; dirty).\n+        [1] tries to spend 4 BTC (succeeds; change address sufficient)\n+        '''\n+\n+        fundaddr = self.nodes[1].getnewaddress()\n+        retaddr = self.nodes[0].getnewaddress()\n+\n+        self.nodes[0].sendtoaddress(fundaddr, 10)\n+        self.nodes[0].generate(1)\n+        self.sync_all()\n+\n+        # listunspent should show 1 single, unused 10 btc output\n+        assert_unspent(self.nodes[1], total_count=1, total_sum=10, reused_supported=True, reused_count=0)\n+\n+        self.nodes[1].sendtoaddress(retaddr, 5)\n+        self.nodes[0].generate(1)\n+        self.sync_all()\n+\n+        # listunspent should show 1 single, unused 5 btc output\n+        assert_unspent(self.nodes[1], total_count=1, total_sum=5, reused_supported=True, reused_count=0)\n+\n+        self.nodes[0].sendtoaddress(fundaddr, 10)\n+        self.nodes[0].generate(1)\n+        self.sync_all()\n+\n+        # listunspent should show 2 total outputs (5, 10 btc), one unused (5), one reused (10)\n+        assert_unspent(self.nodes[1], total_count=2, total_sum=15, reused_count=1, reused_sum=10)\n+\n+        # node 1 should now have a balance of 5 (no dirty) or 15 (including dirty)\n+        assert_approx(self.nodes[1].getbalance(), 5, 0.001)\n+        assert_approx(self.nodes[1].getbalance(avoid_reuse=False), 15, 0.001)\n+\n+        assert_raises_rpc_error(-6, \"Insufficient funds\", self.nodes[1].sendtoaddress, retaddr, 10)\n+\n+        self.nodes[1].sendtoaddress(retaddr, 4)\n+\n+        # listunspent should show 2 total outputs (1, 10 btc), one unused (1), one reused (10)\n+        assert_unspent(self.nodes[1], total_count=2, total_sum=11, reused_count=1, reused_sum=10)\n+\n+        # node 1 should now have about 1 btc left (no dirty) and 11 (including dirty)\n+        assert_approx(self.nodes[1].getbalance(), 1, 0.001)\n+        assert_approx(self.nodes[1].getbalance(avoid_reuse=False), 11, 0.001)\n+\n+if __name__ == '__main__':\n+    AvoidReuseTest().main()"
      }
    ]
  },
  {
    "sha": "27669551da52099e4a6a401acd7aa32b32832423",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNzY2OTU1MWRhNTIwOTllNGE2YTQwMWFjZDdhYTMyYjMyODMyNDIz",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2019-04-25T04:50:07Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2019-05-29T09:40:31Z"
      },
      "message": "wallet: enable avoid_partial_spends by default if avoid_reuse is set",
      "tree": {
        "sha": "db861c209efa4d92deb95b19f69de2b783e548c5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/db861c209efa4d92deb95b19f69de2b783e548c5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/27669551da52099e4a6a401acd7aa32b32832423",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAlzuU5AACgkQV692LbM1\nMyIRKg/+OEGn2WDUQtSWPIlLtLvHOl4V1USQf0wyToml8t6urJq/XIrzHm0yQCbd\nsmQQMJLYgECJTtOSLEIXfgpFvhi7oM6SCKvOj/KfQ9ROC2pluJwsXsujPgTvUXyp\nT02XQLjcGKHrE+IeiyO0+vn7lP1OF5+KHk9k5JI/ROj5QDisUXZpCNaIuoUiIfNi\nWD0EjKnozbgol+SgdGCIPCM+Trh++67e0EmqnVPAlK7mhj3VBWXiyenTwS5voKLL\nPM2DqDzBrX8cPkKXvNlu+aHiabqH1gT1bHHDeqdy0BlpgL47ViRNaL5a+vOs5tbm\n5nwQemii9RGLTOpQkbotGSeb63vWfCvKBpGBxPV9oxM3Yab33hnesDXjWrYk1X6s\nok37Mp/1uIM6yVLH8EVGq34f8Rino9oNLJcDVMla5Qvh9IZVN0rBRinGpsxx7SgJ\nNv4ecgZF7hAFHAUC3pSWGkwre/hKsjBecx7+tAVtE/4jtQTKBJzkkkiEQU3osOPt\nSZC881Zmsn/DKaVcgYZw0HULHGILmSG4eQvdvUc2vkNNZaZcvyEMWTriduePM/Xc\nKOv0HwqH3ew7eANt9hnTGAoDS6ooYvgnVxt+4s1oy75a0xeZmtT2RUpXqf1AoPKm\nHIcYsr+QkSswzU0raDVGxfY4nLF1Thsvkh2jfy8PHghFNHe4+Q4=\n=AqGV\n-----END PGP SIGNATURE-----",
        "payload": "tree db861c209efa4d92deb95b19f69de2b783e548c5\nparent 8f2e208f7c0468f9ba92bc789a698281b1c81284\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1556167807 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1559122831 +0900\n\nwallet: enable avoid_partial_spends by default if avoid_reuse is set\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27669551da52099e4a6a401acd7aa32b32832423",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/27669551da52099e4a6a401acd7aa32b32832423",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27669551da52099e4a6a401acd7aa32b32832423/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8f2e208f7c0468f9ba92bc789a698281b1c81284",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f2e208f7c0468f9ba92bc789a698281b1c81284",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8f2e208f7c0468f9ba92bc789a698281b1c81284"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "e3080ae96eee61cc558891143aaa5fec105dfee9",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27669551da52099e4a6a401acd7aa32b32832423/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27669551da52099e4a6a401acd7aa32b32832423/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=27669551da52099e4a6a401acd7aa32b32832423",
        "patch": "@@ -448,6 +448,8 @@ static UniValue sendtoaddress(const JSONRPCRequest& request)\n     }\n \n     coin_control.m_avoid_address_reuse = GetAvoidReuseFlag(pwallet, request.params[8]);\n+    // We also enable partial spend avoidance if reuse avoidance is set.\n+    coin_control.m_avoid_partial_spends |= coin_control.m_avoid_address_reuse;\n \n     EnsureWalletIsUnlocked(pwallet);\n "
      }
    ]
  },
  {
    "sha": "ada258f8c8f92d44d893cf9f22d15acdeca40b1a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZGEyNThmOGM4ZjkyZDQ0ZDg5M2NmOWYyMmQxNWFjZGVjYTQwYjFh",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2018-11-20T04:28:23Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2019-05-29T09:40:31Z"
      },
      "message": "doc: release notes for avoid_reuse",
      "tree": {
        "sha": "c31b43d8046886591cede6c996d2e8258ae65b5b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c31b43d8046886591cede6c996d2e8258ae65b5b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ada258f8c8f92d44d893cf9f22d15acdeca40b1a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAlzuU5AACgkQV692LbM1\nMyI4Uw/+KhqU00PWzOUvcVx4fXiLOU9m/UZeBbskxKY6xZeu3JdtgicszFcUGtH8\nxIsHkeQM3XivOWUfRrJWShGQ9GQUM4RU7bdKaH3Nxy/wGksrCwaQ8oyMJM0hMqnG\nBYXdovpFc9TjUK2dbh4xZEdDGe78PNezvThKANJrn0JFzkmXciag8/tSokMWyprI\n4BwkJBAQlvHU44msSKGoQGdgHT9EiaakRJLxMaq7w+RYOfbAlL8wl9xVd58Cp6mv\nSb17IIVaDaLSNcgPUrwVNm6zLbzKHXgU0I1aBW0rIvg64NGbqnbV7WHt0qSZ+UYb\n+1kAwoKADmxyHHkjHazsONn5u6IRc1lYx+5zydtZPOSoOXotyFRZDVJYBw2nRnXr\n+5hmlnXSo3VbcoMkb9P+qb/PnUdTi3h8wQ6TWUaZt631ifGE1a9VSfZfjETgm+ss\nRgoVP8HHPTKCaU/iVkyVQMPqJdBrqS4io6WWx4uvoJEefWTVQPhcQ6RM9v3/87Ha\n+qnyD+6cScHufunVuxqM3tE60fb04eQYiueDzVZphVm9g5yYeWZdYs1iXl8ydJdF\nHprc7Z+QAJBA4s1d8OXmiiP7MHuvAQO870aIlxLGW0q/AQwutFrTYrbUedrkOpTS\n78V4reiKl8pD8IbWU122m4kP+M7FppLZwWPY0MhpLiWNe4GGPK8=\n=FuCT\n-----END PGP SIGNATURE-----",
        "payload": "tree c31b43d8046886591cede6c996d2e8258ae65b5b\nparent 27669551da52099e4a6a401acd7aa32b32832423\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1542688103 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1559122831 +0900\n\ndoc: release notes for avoid_reuse\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ada258f8c8f92d44d893cf9f22d15acdeca40b1a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ada258f8c8f92d44d893cf9f22d15acdeca40b1a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ada258f8c8f92d44d893cf9f22d15acdeca40b1a/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "27669551da52099e4a6a401acd7aa32b32832423",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27669551da52099e4a6a401acd7aa32b32832423",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/27669551da52099e4a6a401acd7aa32b32832423"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 39,
      "deletions": 0
    },
    "files": [
      {
        "sha": "21006f46a08e1ffdea0c79c7bea99b0f2c40aecd",
        "filename": "doc/release-notes-13756.md",
        "status": "added",
        "additions": 39,
        "deletions": 0,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ada258f8c8f92d44d893cf9f22d15acdeca40b1a/doc/release-notes-13756.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ada258f8c8f92d44d893cf9f22d15acdeca40b1a/doc/release-notes-13756.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-13756.md?ref=ada258f8c8f92d44d893cf9f22d15acdeca40b1a",
        "patch": "@@ -0,0 +1,39 @@\n+Coin selection\n+--------------\n+\n+### Reuse Avoidance\n+\n+A new wallet flag `avoid_reuse` has been added (default off). When enabled,\n+a wallet will distinguish between used and unused addresses, and default to not\n+use the former in coin selection.\n+\n+(Note: rescanning the blockchain is required, to correctly mark previously\n+used destinations.)\n+\n+Together with \"avoid partial spends\" (present as of Bitcoin v0.17), this\n+addresses a serious privacy issue where a malicious user can track spends by\n+peppering a previously paid to address with near-dust outputs, which would then\n+be inadvertently included in future payments.\n+\n+New RPCs\n+--------\n+\n+- A new `setwalletflag` RPC sets/unsets flags for an existing wallet.\n+\n+\n+Updated RPCs\n+------------\n+\n+Several RPCs have been updated to include an \"avoid_reuse\" flag, used to control\n+whether already used addresses should be left out or included in the operation.\n+These include:\n+\n+- createwallet\n+- getbalance\n+- sendtoaddress\n+\n+In addition, `sendtoaddress` has been changed to enable `-avoidpartialspends` when\n+`avoid_reuse` is enabled.\n+\n+The listunspent RPC has also been updated to now include a \"reused\" bool, for nodes\n+with \"avoid_reuse\" enabled."
      }
    ]
  },
  {
    "sha": "5ebc6b0eb267e0552c66fffc5e5afe7df8becf80",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZWJjNmIwZWIyNjdlMDU1MmM2NmZmZmM1ZTVhZmU3ZGY4YmVjZjgw",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2019-04-26T05:25:43Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2019-05-29T09:40:31Z"
      },
      "message": "bitcoind: update -avoidpartialspends description to account for auto-enable for avoid_reuse wallets",
      "tree": {
        "sha": "611d77c53f7d8c77f7130be8eb09488c42d97471",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/611d77c53f7d8c77f7130be8eb09488c42d97471"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5ebc6b0eb267e0552c66fffc5e5afe7df8becf80",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAlzuU5AACgkQV692LbM1\nMyKc9g/+LA17KfggW0QjvdRhGh+4+31COo112NrhnSVFqgnH0NvbMqlJhZjgU6pG\nnHtE7OFulk5e+0lA/wzRk0OKDSKlQqTY+yw39+/kaIjnhYK76sya0kSKTCGNRoCD\nLhQ5Xs3PUEG4nATnv85Eoh6AScV7nAe6cKoI3LrEQn3jBJYkheA4652langwye3d\nmPCrql2Xrw1OebSlDYN/N/CD3/2+GrGLzuAssB8lDO3BvMg17r592sIQIN/0TQut\nwkKgaUb2deJdUIStIPzccvfA1H/bDXiCGg6LXfT91MN8vS7Jb/1npEb+OWpbMcyH\nwPbUlwWoMwEX7nefbTPg0hzXXZVZuneTRU09SCnbIho/V2RhHgG6SivCscqYk7ad\ndZH7t6kqEMKoy5GDcwvgZyy3MLgOJrPoQfAix0IdblVG4aKCQhYgaRJBFsL8OSPI\nSeBtF6pZIcNAMpAbiOsB2OyZT23rs99Q3rUPdmEdAjm/VFzuiT7vArVIZX616zvE\nwYJUuX6G+5F5cNgsjL/PrnhnIhrXxHcgZ4ffQHL4qgQDtjhl6Yw0ZyCwucUah8iC\nCR6FPigI7unfBtRTqdcewc4s/ddxVQzPNdNscXlF2lpOOYc2cJuA1Jhr3RsE1Cwp\nfEw2ZX2FZ0R0JXZBy+/eTgS6JA4nNnQlUHviAYH+w9q6gEeTn0o=\n=5teA\n-----END PGP SIGNATURE-----",
        "payload": "tree 611d77c53f7d8c77f7130be8eb09488c42d97471\nparent ada258f8c8f92d44d893cf9f22d15acdeca40b1a\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1556256343 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1559122831 +0900\n\nbitcoind: update -avoidpartialspends description to account for auto-enable for avoid_reuse wallets\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ebc6b0eb267e0552c66fffc5e5afe7df8becf80",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5ebc6b0eb267e0552c66fffc5e5afe7df8becf80",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ebc6b0eb267e0552c66fffc5e5afe7df8becf80/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ada258f8c8f92d44d893cf9f22d15acdeca40b1a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ada258f8c8f92d44d893cf9f22d15acdeca40b1a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ada258f8c8f92d44d893cf9f22d15acdeca40b1a"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "7fae46c5174c1afd86972f7825d91ff9e34fb689",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ebc6b0eb267e0552c66fffc5e5afe7df8becf80/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ebc6b0eb267e0552c66fffc5e5afe7df8becf80/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=5ebc6b0eb267e0552c66fffc5e5afe7df8becf80",
        "patch": "@@ -39,7 +39,7 @@ const WalletInitInterface& g_wallet_init_interface = WalletInit();\n void WalletInit::AddWalletOptions() const\n {\n     gArgs.AddArg(\"-addresstype\", strprintf(\"What type of addresses to use (\\\"legacy\\\", \\\"p2sh-segwit\\\", or \\\"bech32\\\", default: \\\"%s\\\")\", FormatOutputType(DEFAULT_ADDRESS_TYPE)), false, OptionsCategory::WALLET);\n-    gArgs.AddArg(\"-avoidpartialspends\", strprintf(\"Group outputs by address, selecting all or none, instead of selecting on a per-output basis. Privacy is improved as an address is only used once (unless someone sends to it after spending from it), but may result in slightly higher fees as suboptimal coin selection may result due to the added limitation (default: %u)\", DEFAULT_AVOIDPARTIALSPENDS), false, OptionsCategory::WALLET);\n+    gArgs.AddArg(\"-avoidpartialspends\", strprintf(\"Group outputs by address, selecting all or none, instead of selecting on a per-output basis. Privacy is improved as an address is only used once (unless someone sends to it after spending from it), but may result in slightly higher fees as suboptimal coin selection may result due to the added limitation (default: %u (always enabled for wallets with \\\"avoid_reuse\\\" enabled))\", DEFAULT_AVOIDPARTIALSPENDS), false, OptionsCategory::WALLET);\n     gArgs.AddArg(\"-changetype\", \"What type of change to use (\\\"legacy\\\", \\\"p2sh-segwit\\\", or \\\"bech32\\\"). Default is same as -addresstype, except when -addresstype=p2sh-segwit a native segwit output is used when sending to a native segwit address)\", false, OptionsCategory::WALLET);\n     gArgs.AddArg(\"-disablewallet\", \"Do not load the wallet and disable wallet RPC calls\", false, OptionsCategory::WALLET);\n     gArgs.AddArg(\"-discardfee=<amt>\", strprintf(\"The fee rate (in %s/kB) that indicates your tolerance for discarding change by adding it to the fee (default: %s). \""
      }
    ]
  }
]