[
  {
    "sha": "819f10f6718659eeeec13af2ce831df3a0984090",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MTlmMTBmNjcxODY1OWVlZWVjMTNhZjJjZTgzMWRmM2EwOTg0MDkw",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2020-08-21T00:05:40Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2020-08-28T09:42:18Z"
      },
      "message": "wallet, refactor: Immutable CWalletTx::pwallet",
      "tree": {
        "sha": "b904e9e9f5395bd19bcb4bbfd521d5a80c53523a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b904e9e9f5395bd19bcb4bbfd521d5a80c53523a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/819f10f6718659eeeec13af2ce831df3a0984090",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/819f10f6718659eeeec13af2ce831df3a0984090",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/819f10f6718659eeeec13af2ce831df3a0984090",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/819f10f6718659eeeec13af2ce831df3a0984090/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "862fde88be706adb20a211178253636442c3ae00",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/862fde88be706adb20a211178253636442c3ae00",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/862fde88be706adb20a211178253636442c3ae00"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "bd54af7782887f162b0725eb162ad4d153c8b612",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/819f10f6718659eeeec13af2ce831df3a0984090/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/819f10f6718659eeeec13af2ce831df3a0984090/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=819f10f6718659eeeec13af2ce831df3a0984090",
        "patch": "@@ -275,7 +275,7 @@ int CalculateMaximumSignedInputSize(const CTxOut& txout, const CWallet* pwallet,\n class CWalletTx\n {\n private:\n-    const CWallet* pwallet;\n+    const CWallet* const pwallet;\n \n     /** Constant used in hashBlock to indicate tx has been abandoned, only used at\n      * serialization/deserialization to avoid ambiguity with conflicted."
      }
    ]
  },
  {
    "sha": "772ea4844c34ad70d02fd0bd6c0945baa8fff85c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NzJlYTQ4NDRjMzRhZDcwZDAyZmQwYmQ2YzA5NDViYWE4ZmZmODVj",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2020-08-21T00:06:53Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2020-08-28T09:42:18Z"
      },
      "message": "wallet: Avoid recursive lock in IsTrusted",
      "tree": {
        "sha": "f18ec2a84a55540cf920847ffddc04d29b54f69d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f18ec2a84a55540cf920847ffddc04d29b54f69d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/772ea4844c34ad70d02fd0bd6c0945baa8fff85c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/772ea4844c34ad70d02fd0bd6c0945baa8fff85c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/772ea4844c34ad70d02fd0bd6c0945baa8fff85c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/772ea4844c34ad70d02fd0bd6c0945baa8fff85c/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "819f10f6718659eeeec13af2ce831df3a0984090",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/819f10f6718659eeeec13af2ce831df3a0984090",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/819f10f6718659eeeec13af2ce831df3a0984090"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 17,
      "deletions": 16
    },
    "files": [
      {
        "sha": "ebfa19d722bbedc41dbdad1d98a8a89c833d7cb7",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 15,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/772ea4844c34ad70d02fd0bd6c0945baa8fff85c/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/772ea4844c34ad70d02fd0bd6c0945baa8fff85c/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=772ea4844c34ad70d02fd0bd6c0945baa8fff85c",
        "patch": "@@ -1970,37 +1970,38 @@ bool CWalletTx::InMempool() const\n \n bool CWalletTx::IsTrusted() const\n {\n-    std::set<uint256> s;\n-    return IsTrusted(s);\n+    std::set<uint256> trusted_parents;\n+    LOCK(pwallet->cs_wallet);\n+    return pwallet->IsTrusted(*this, trusted_parents);\n }\n \n-bool CWalletTx::IsTrusted(std::set<uint256>& trusted_parents) const\n+bool CWallet::IsTrusted(const CWalletTx& wtx, std::set<uint256>& trusted_parents) const\n {\n+    AssertLockHeld(cs_wallet);\n     // Quick answer in most cases\n-    if (!pwallet->chain().checkFinalTx(*tx)) return false;\n-    int nDepth = GetDepthInMainChain();\n+    if (!chain().checkFinalTx(*wtx.tx)) return false;\n+    int nDepth = wtx.GetDepthInMainChain();\n     if (nDepth >= 1) return true;\n     if (nDepth < 0) return false;\n     // using wtx's cached debit\n-    if (!pwallet->m_spend_zero_conf_change || !IsFromMe(ISMINE_ALL)) return false;\n+    if (!m_spend_zero_conf_change || !wtx.IsFromMe(ISMINE_ALL)) return false;\n \n     // Don't trust unconfirmed transactions from us unless they are in the mempool.\n-    if (!InMempool()) return false;\n+    if (!wtx.InMempool()) return false;\n \n     // Trusted if all inputs are from us and are in the mempool:\n-    LOCK(pwallet->cs_wallet);\n-    for (const CTxIn& txin : tx->vin)\n+    for (const CTxIn& txin : wtx.tx->vin)\n     {\n         // Transactions not sent by us: not trusted\n-        const CWalletTx* parent = pwallet->GetWalletTx(txin.prevout.hash);\n+        const CWalletTx* parent = GetWalletTx(txin.prevout.hash);\n         if (parent == nullptr) return false;\n         const CTxOut& parentOut = parent->tx->vout[txin.prevout.n];\n         // Check that this specific input being spent is trusted\n-        if (pwallet->IsMine(parentOut) != ISMINE_SPENDABLE) return false;\n+        if (IsMine(parentOut) != ISMINE_SPENDABLE) return false;\n         // If we've already trusted this parent, continue\n         if (trusted_parents.count(parent->GetHash())) continue;\n         // Recurse to check that the parent is also trusted\n-        if (!parent->IsTrusted(trusted_parents)) return false;\n+        if (!IsTrusted(*parent, trusted_parents)) return false;\n         trusted_parents.insert(parent->GetHash());\n     }\n     return true;\n@@ -2086,7 +2087,7 @@ CWallet::Balance CWallet::GetBalance(const int min_depth, bool avoid_reuse) cons\n         for (const auto& entry : mapWallet)\n         {\n             const CWalletTx& wtx = entry.second;\n-            const bool is_trusted{wtx.IsTrusted(trusted_parents)};\n+            const bool is_trusted{IsTrusted(wtx, trusted_parents)};\n             const int tx_depth{wtx.GetDepthInMainChain()};\n             const CAmount tx_credit_mine{wtx.GetAvailableCredit(/* fUseCache */ true, ISMINE_SPENDABLE | reuse_filter)};\n             const CAmount tx_credit_watchonly{wtx.GetAvailableCredit(/* fUseCache */ true, ISMINE_WATCH_ONLY | reuse_filter)};\n@@ -2154,7 +2155,7 @@ void CWallet::AvailableCoins(std::vector<COutput>& vCoins, bool fOnlySafe, const\n         if (nDepth == 0 && !wtx.InMempool())\n             continue;\n \n-        bool safeTx = wtx.IsTrusted(trusted_parents);\n+        bool safeTx = IsTrusted(wtx, trusted_parents);\n \n         // We should not consider coins from transactions that are replacing\n         // other transactions.\n@@ -3353,7 +3354,7 @@ std::map<CTxDestination, CAmount> CWallet::GetAddressBalances() const\n         {\n             const CWalletTx& wtx = walletEntry.second;\n \n-            if (!wtx.IsTrusted(trusted_parents))\n+            if (!IsTrusted(wtx, trusted_parents))\n                 continue;\n \n             if (wtx.IsImmatureCoinBase())"
      },
      {
        "sha": "ebd2e91492e8e48af7ea86da9c528b5ef7925b7f",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/772ea4844c34ad70d02fd0bd6c0945baa8fff85c/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/772ea4844c34ad70d02fd0bd6c0945baa8fff85c/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=772ea4844c34ad70d02fd0bd6c0945baa8fff85c",
        "patch": "@@ -502,7 +502,6 @@ class CWalletTx\n \n     bool InMempool() const;\n     bool IsTrusted() const;\n-    bool IsTrusted(std::set<uint256>& trusted_parents) const;\n \n     int64_t GetTxTime() const;\n \n@@ -806,6 +805,7 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n     interfaces::Chain& chain() const { assert(m_chain); return *m_chain; }\n \n     const CWalletTx* GetWalletTx(const uint256& hash) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    bool IsTrusted(const CWalletTx& wtx, std::set<uint256>& trusted_parents) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     //! check whether we are allowed to upgrade (or already support) to the named feature\n     bool CanSupportFeature(enum WalletFeature wf) const override EXCLUSIVE_LOCKS_REQUIRED(cs_wallet) { AssertLockHeld(cs_wallet); return nWalletMaxVersion >= wf; }"
      }
    ]
  }
]