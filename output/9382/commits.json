[
  {
    "sha": "bdd6d4c97df2052fe160f12ac507ec5946f91a07",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZGQ2ZDRjOTdkZjIwNTJmZTE2MGYxMmFjNTA3ZWM1OTQ2ZjkxYTA3",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2016-12-02T20:29:20Z"
      },
      "committer": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2016-12-20T10:10:01Z"
      },
      "message": "SelectCoinsMinConf: Prefer coins with fewer ancestors",
      "tree": {
        "sha": "84e96c635093ff4513562331a5b2789b56300454",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/84e96c635093ff4513562331a5b2789b56300454"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bdd6d4c97df2052fe160f12ac507ec5946f91a07",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bdd6d4c97df2052fe160f12ac507ec5946f91a07",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bdd6d4c97df2052fe160f12ac507ec5946f91a07",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bdd6d4c97df2052fe160f12ac507ec5946f91a07/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following{/other_user}",
      "gists_url": "https://api.github.com/users/btcdrak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7201dd7732fa69b498b1d647c66c2460af9bed7b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7201dd7732fa69b498b1d647c66c2460af9bed7b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7201dd7732fa69b498b1d647c66c2460af9bed7b"
      }
    ],
    "stats": {
      "total": 107,
      "additions": 65,
      "deletions": 42
    },
    "files": [
      {
        "sha": "a7056554ad1f2b17750ae75b37b7d7ba554368c2",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bdd6d4c97df2052fe160f12ac507ec5946f91a07/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bdd6d4c97df2052fe160f12ac507ec5946f91a07/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=bdd6d4c97df2052fe160f12ac507ec5946f91a07",
        "patch": "@@ -1134,3 +1134,10 @@ void CTxMemPool::TrimToSize(size_t sizelimit, std::vector<uint256>* pvNoSpendsRe\n     if (maxFeeRateRemoved > CFeeRate(0))\n         LogPrint(\"mempool\", \"Removed %u txn, rolling minimum fee bumped to %s\\n\", nTxnRemoved, maxFeeRateRemoved.ToString());\n }\n+\n+bool CTxMemPool::TransactionWithinChainLimit(const uint256& txid, size_t chainLimit) const {\n+    LOCK(cs);\n+    if (exists(txid) && std::max(mapTx.find(txid)->GetCountWithAncestors(), mapTx.find(txid)->GetCountWithDescendants()) >= chainLimit)\n+        return false;\n+    return true;\n+}"
      },
      {
        "sha": "8129a05375f51bb0c96933a88d7d1c5e203acec0",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bdd6d4c97df2052fe160f12ac507ec5946f91a07/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bdd6d4c97df2052fe160f12ac507ec5946f91a07/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=bdd6d4c97df2052fe160f12ac507ec5946f91a07",
        "patch": "@@ -595,6 +595,9 @@ class CTxMemPool\n     /** Expire all transaction (and their dependencies) in the mempool older than time. Return the number of removed transactions. */\n     int Expire(int64_t time);\n \n+    /** Returns false if the transaction is in the mempool and not within the chain limit specified. */\n+    bool TransactionWithinChainLimit(const uint256& txid, size_t chainLimit) const;\n+\n     unsigned long size()\n     {\n         LOCK(cs);"
      },
      {
        "sha": "38637b2d5c1d3448fb26598c637c8f6612b30a08",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 37,
        "deletions": 37,
        "changes": 74,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bdd6d4c97df2052fe160f12ac507ec5946f91a07/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bdd6d4c97df2052fe160f12ac507ec5946f91a07/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=bdd6d4c97df2052fe160f12ac507ec5946f91a07",
        "patch": "@@ -78,24 +78,24 @@ BOOST_AUTO_TEST_CASE(coin_selection_tests)\n         empty_wallet();\n \n         // with an empty wallet we can't even pay one cent\n-        BOOST_CHECK(!wallet.SelectCoinsMinConf( 1 * CENT, 1, 6, vCoins, setCoinsRet, nValueRet));\n+        BOOST_CHECK(!wallet.SelectCoinsMinConf( 1 * CENT, 1, 6, 0, vCoins, setCoinsRet, nValueRet));\n \n         add_coin(1*CENT, 4);        // add a new 1 cent coin\n \n         // with a new 1 cent coin, we still can't find a mature 1 cent\n-        BOOST_CHECK(!wallet.SelectCoinsMinConf( 1 * CENT, 1, 6, vCoins, setCoinsRet, nValueRet));\n+        BOOST_CHECK(!wallet.SelectCoinsMinConf( 1 * CENT, 1, 6, 0, vCoins, setCoinsRet, nValueRet));\n \n         // but we can find a new 1 cent\n-        BOOST_CHECK( wallet.SelectCoinsMinConf( 1 * CENT, 1, 1, vCoins, setCoinsRet, nValueRet));\n+        BOOST_CHECK( wallet.SelectCoinsMinConf( 1 * CENT, 1, 1, 0, vCoins, setCoinsRet, nValueRet));\n         BOOST_CHECK_EQUAL(nValueRet, 1 * CENT);\n \n         add_coin(2*CENT);           // add a mature 2 cent coin\n \n         // we can't make 3 cents of mature coins\n-        BOOST_CHECK(!wallet.SelectCoinsMinConf( 3 * CENT, 1, 6, vCoins, setCoinsRet, nValueRet));\n+        BOOST_CHECK(!wallet.SelectCoinsMinConf( 3 * CENT, 1, 6, 0, vCoins, setCoinsRet, nValueRet));\n \n         // we can make 3 cents of new  coins\n-        BOOST_CHECK( wallet.SelectCoinsMinConf( 3 * CENT, 1, 1, vCoins, setCoinsRet, nValueRet));\n+        BOOST_CHECK( wallet.SelectCoinsMinConf( 3 * CENT, 1, 1, 0, vCoins, setCoinsRet, nValueRet));\n         BOOST_CHECK_EQUAL(nValueRet, 3 * CENT);\n \n         add_coin(5*CENT);           // add a mature 5 cent coin,\n@@ -105,33 +105,33 @@ BOOST_AUTO_TEST_CASE(coin_selection_tests)\n         // now we have new: 1+10=11 (of which 10 was self-sent), and mature: 2+5+20=27.  total = 38\n \n         // we can't make 38 cents only if we disallow new coins:\n-        BOOST_CHECK(!wallet.SelectCoinsMinConf(38 * CENT, 1, 6, vCoins, setCoinsRet, nValueRet));\n+        BOOST_CHECK(!wallet.SelectCoinsMinConf(38 * CENT, 1, 6, 0, vCoins, setCoinsRet, nValueRet));\n         // we can't even make 37 cents if we don't allow new coins even if they're from us\n-        BOOST_CHECK(!wallet.SelectCoinsMinConf(38 * CENT, 6, 6, vCoins, setCoinsRet, nValueRet));\n+        BOOST_CHECK(!wallet.SelectCoinsMinConf(38 * CENT, 6, 6, 0, vCoins, setCoinsRet, nValueRet));\n         // but we can make 37 cents if we accept new coins from ourself\n-        BOOST_CHECK( wallet.SelectCoinsMinConf(37 * CENT, 1, 6, vCoins, setCoinsRet, nValueRet));\n+        BOOST_CHECK( wallet.SelectCoinsMinConf(37 * CENT, 1, 6, 0, vCoins, setCoinsRet, nValueRet));\n         BOOST_CHECK_EQUAL(nValueRet, 37 * CENT);\n         // and we can make 38 cents if we accept all new coins\n-        BOOST_CHECK( wallet.SelectCoinsMinConf(38 * CENT, 1, 1, vCoins, setCoinsRet, nValueRet));\n+        BOOST_CHECK( wallet.SelectCoinsMinConf(38 * CENT, 1, 1, 0, vCoins, setCoinsRet, nValueRet));\n         BOOST_CHECK_EQUAL(nValueRet, 38 * CENT);\n \n         // try making 34 cents from 1,2,5,10,20 - we can't do it exactly\n-        BOOST_CHECK( wallet.SelectCoinsMinConf(34 * CENT, 1, 1, vCoins, setCoinsRet, nValueRet));\n+        BOOST_CHECK( wallet.SelectCoinsMinConf(34 * CENT, 1, 1, 0, vCoins, setCoinsRet, nValueRet));\n         BOOST_CHECK_EQUAL(nValueRet, 35 * CENT);       // but 35 cents is closest\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 3U);     // the best should be 20+10+5.  it's incredibly unlikely the 1 or 2 got included (but possible)\n \n         // when we try making 7 cents, the smaller coins (1,2,5) are enough.  We should see just 2+5\n-        BOOST_CHECK( wallet.SelectCoinsMinConf( 7 * CENT, 1, 1, vCoins, setCoinsRet, nValueRet));\n+        BOOST_CHECK( wallet.SelectCoinsMinConf( 7 * CENT, 1, 1, 0, vCoins, setCoinsRet, nValueRet));\n         BOOST_CHECK_EQUAL(nValueRet, 7 * CENT);\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 2U);\n \n         // when we try making 8 cents, the smaller coins (1,2,5) are exactly enough.\n-        BOOST_CHECK( wallet.SelectCoinsMinConf( 8 * CENT, 1, 1, vCoins, setCoinsRet, nValueRet));\n+        BOOST_CHECK( wallet.SelectCoinsMinConf( 8 * CENT, 1, 1, 0, vCoins, setCoinsRet, nValueRet));\n         BOOST_CHECK(nValueRet == 8 * CENT);\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 3U);\n \n         // when we try making 9 cents, no subset of smaller coins is enough, and we get the next bigger coin (10)\n-        BOOST_CHECK( wallet.SelectCoinsMinConf( 9 * CENT, 1, 1, vCoins, setCoinsRet, nValueRet));\n+        BOOST_CHECK( wallet.SelectCoinsMinConf( 9 * CENT, 1, 1, 0, vCoins, setCoinsRet, nValueRet));\n         BOOST_CHECK_EQUAL(nValueRet, 10 * CENT);\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 1U);\n \n@@ -145,30 +145,30 @@ BOOST_AUTO_TEST_CASE(coin_selection_tests)\n         add_coin(30*CENT); // now we have 6+7+8+20+30 = 71 cents total\n \n         // check that we have 71 and not 72\n-        BOOST_CHECK( wallet.SelectCoinsMinConf(71 * CENT, 1, 1, vCoins, setCoinsRet, nValueRet));\n-        BOOST_CHECK(!wallet.SelectCoinsMinConf(72 * CENT, 1, 1, vCoins, setCoinsRet, nValueRet));\n+        BOOST_CHECK( wallet.SelectCoinsMinConf(71 * CENT, 1, 1, 0, vCoins, setCoinsRet, nValueRet));\n+        BOOST_CHECK(!wallet.SelectCoinsMinConf(72 * CENT, 1, 1, 0, vCoins, setCoinsRet, nValueRet));\n \n         // now try making 16 cents.  the best smaller coins can do is 6+7+8 = 21; not as good at the next biggest coin, 20\n-        BOOST_CHECK( wallet.SelectCoinsMinConf(16 * CENT, 1, 1, vCoins, setCoinsRet, nValueRet));\n+        BOOST_CHECK( wallet.SelectCoinsMinConf(16 * CENT, 1, 1, 0, vCoins, setCoinsRet, nValueRet));\n         BOOST_CHECK_EQUAL(nValueRet, 20 * CENT); // we should get 20 in one coin\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 1U);\n \n         add_coin( 5*CENT); // now we have 5+6+7+8+20+30 = 75 cents total\n \n         // now if we try making 16 cents again, the smaller coins can make 5+6+7 = 18 cents, better than the next biggest coin, 20\n-        BOOST_CHECK( wallet.SelectCoinsMinConf(16 * CENT, 1, 1, vCoins, setCoinsRet, nValueRet));\n+        BOOST_CHECK( wallet.SelectCoinsMinConf(16 * CENT, 1, 1, 0, vCoins, setCoinsRet, nValueRet));\n         BOOST_CHECK_EQUAL(nValueRet, 18 * CENT); // we should get 18 in 3 coins\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 3U);\n \n         add_coin( 18*CENT); // now we have 5+6+7+8+18+20+30\n \n         // and now if we try making 16 cents again, the smaller coins can make 5+6+7 = 18 cents, the same as the next biggest coin, 18\n-        BOOST_CHECK( wallet.SelectCoinsMinConf(16 * CENT, 1, 1, vCoins, setCoinsRet, nValueRet));\n+        BOOST_CHECK( wallet.SelectCoinsMinConf(16 * CENT, 1, 1, 0, vCoins, setCoinsRet, nValueRet));\n         BOOST_CHECK_EQUAL(nValueRet, 18 * CENT);  // we should get 18 in 1 coin\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 1U); // because in the event of a tie, the biggest coin wins\n \n         // now try making 11 cents.  we should get 5+6\n-        BOOST_CHECK( wallet.SelectCoinsMinConf(11 * CENT, 1, 1, vCoins, setCoinsRet, nValueRet));\n+        BOOST_CHECK( wallet.SelectCoinsMinConf(11 * CENT, 1, 1, 0, vCoins, setCoinsRet, nValueRet));\n         BOOST_CHECK_EQUAL(nValueRet, 11 * CENT);\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 2U);\n \n@@ -177,11 +177,11 @@ BOOST_AUTO_TEST_CASE(coin_selection_tests)\n         add_coin( 2*COIN);\n         add_coin( 3*COIN);\n         add_coin( 4*COIN); // now we have 5+6+7+8+18+20+30+100+200+300+400 = 1094 cents\n-        BOOST_CHECK( wallet.SelectCoinsMinConf(95 * CENT, 1, 1, vCoins, setCoinsRet, nValueRet));\n+        BOOST_CHECK( wallet.SelectCoinsMinConf(95 * CENT, 1, 1, 0, vCoins, setCoinsRet, nValueRet));\n         BOOST_CHECK_EQUAL(nValueRet, 1 * COIN);  // we should get 1 BTC in 1 coin\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 1U);\n \n-        BOOST_CHECK( wallet.SelectCoinsMinConf(195 * CENT, 1, 1, vCoins, setCoinsRet, nValueRet));\n+        BOOST_CHECK( wallet.SelectCoinsMinConf(195 * CENT, 1, 1, 0, vCoins, setCoinsRet, nValueRet));\n         BOOST_CHECK_EQUAL(nValueRet, 2 * COIN);  // we should get 2 BTC in 1 coin\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 1U);\n \n@@ -196,22 +196,22 @@ BOOST_AUTO_TEST_CASE(coin_selection_tests)\n \n         // try making 1 * MIN_CHANGE from the 1.5 * MIN_CHANGE\n         // we'll get change smaller than MIN_CHANGE whatever happens, so can expect MIN_CHANGE exactly\n-        BOOST_CHECK( wallet.SelectCoinsMinConf(MIN_CHANGE, 1, 1, vCoins, setCoinsRet, nValueRet));\n+        BOOST_CHECK( wallet.SelectCoinsMinConf(MIN_CHANGE, 1, 1, 0, vCoins, setCoinsRet, nValueRet));\n         BOOST_CHECK_EQUAL(nValueRet, MIN_CHANGE);\n \n         // but if we add a bigger coin, small change is avoided\n         add_coin(1111*MIN_CHANGE);\n \n         // try making 1 from 0.1 + 0.2 + 0.3 + 0.4 + 0.5 + 1111 = 1112.5\n-        BOOST_CHECK( wallet.SelectCoinsMinConf(1 * MIN_CHANGE, 1, 1, vCoins, setCoinsRet, nValueRet));\n+        BOOST_CHECK( wallet.SelectCoinsMinConf(1 * MIN_CHANGE, 1, 1, 0, vCoins, setCoinsRet, nValueRet));\n         BOOST_CHECK_EQUAL(nValueRet, 1 * MIN_CHANGE); // we should get the exact amount\n \n         // if we add more small coins:\n         add_coin(MIN_CHANGE * 6 / 10);\n         add_coin(MIN_CHANGE * 7 / 10);\n \n         // and try again to make 1.0 * MIN_CHANGE\n-        BOOST_CHECK( wallet.SelectCoinsMinConf(1 * MIN_CHANGE, 1, 1, vCoins, setCoinsRet, nValueRet));\n+        BOOST_CHECK( wallet.SelectCoinsMinConf(1 * MIN_CHANGE, 1, 1, 0, vCoins, setCoinsRet, nValueRet));\n         BOOST_CHECK_EQUAL(nValueRet, 1 * MIN_CHANGE); // we should get the exact amount\n \n         // run the 'mtgox' test (see http://blockexplorer.com/tx/29a3efd3ef04f9153d47a990bd7b048a4b2d213daaa5fb8ed670fb85f13bdbcf)\n@@ -220,7 +220,7 @@ BOOST_AUTO_TEST_CASE(coin_selection_tests)\n         for (int i = 0; i < 20; i++)\n             add_coin(50000 * COIN);\n \n-        BOOST_CHECK( wallet.SelectCoinsMinConf(500000 * COIN, 1, 1, vCoins, setCoinsRet, nValueRet));\n+        BOOST_CHECK( wallet.SelectCoinsMinConf(500000 * COIN, 1, 1, 0, vCoins, setCoinsRet, nValueRet));\n         BOOST_CHECK_EQUAL(nValueRet, 500000 * COIN); // we should get the exact amount\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 10U); // in ten coins\n \n@@ -233,7 +233,7 @@ BOOST_AUTO_TEST_CASE(coin_selection_tests)\n         add_coin(MIN_CHANGE * 6 / 10);\n         add_coin(MIN_CHANGE * 7 / 10);\n         add_coin(1111 * MIN_CHANGE);\n-        BOOST_CHECK( wallet.SelectCoinsMinConf(1 * MIN_CHANGE, 1, 1, vCoins, setCoinsRet, nValueRet));\n+        BOOST_CHECK( wallet.SelectCoinsMinConf(1 * MIN_CHANGE, 1, 1, 0, vCoins, setCoinsRet, nValueRet));\n         BOOST_CHECK_EQUAL(nValueRet, 1111 * MIN_CHANGE); // we get the bigger coin\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 1U);\n \n@@ -243,7 +243,7 @@ BOOST_AUTO_TEST_CASE(coin_selection_tests)\n         add_coin(MIN_CHANGE * 6 / 10);\n         add_coin(MIN_CHANGE * 8 / 10);\n         add_coin(1111 * MIN_CHANGE);\n-        BOOST_CHECK( wallet.SelectCoinsMinConf(MIN_CHANGE, 1, 1, vCoins, setCoinsRet, nValueRet));\n+        BOOST_CHECK( wallet.SelectCoinsMinConf(MIN_CHANGE, 1, 1, 0, vCoins, setCoinsRet, nValueRet));\n         BOOST_CHECK_EQUAL(nValueRet, MIN_CHANGE);   // we should get the exact amount\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 2U); // in two coins 0.4+0.6\n \n@@ -254,12 +254,12 @@ BOOST_AUTO_TEST_CASE(coin_selection_tests)\n         add_coin(MIN_CHANGE * 100);\n \n         // trying to make 100.01 from these three coins\n-        BOOST_CHECK(wallet.SelectCoinsMinConf(MIN_CHANGE * 10001 / 100, 1, 1, vCoins, setCoinsRet, nValueRet));\n+        BOOST_CHECK(wallet.SelectCoinsMinConf(MIN_CHANGE * 10001 / 100, 1, 1, 0, vCoins, setCoinsRet, nValueRet));\n         BOOST_CHECK_EQUAL(nValueRet, MIN_CHANGE * 10105 / 100); // we should get all coins\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 3U);\n \n         // but if we try to make 99.9, we should take the bigger of the two small coins to avoid small change\n-        BOOST_CHECK(wallet.SelectCoinsMinConf(MIN_CHANGE * 9990 / 100, 1, 1, vCoins, setCoinsRet, nValueRet));\n+        BOOST_CHECK(wallet.SelectCoinsMinConf(MIN_CHANGE * 9990 / 100, 1, 1, 0, vCoins, setCoinsRet, nValueRet));\n         BOOST_CHECK_EQUAL(nValueRet, 101 * MIN_CHANGE);\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 2U);\n \n@@ -269,7 +269,7 @@ BOOST_AUTO_TEST_CASE(coin_selection_tests)\n              // Create 676 inputs (= MAX_STANDARD_TX_SIZE / 148 bytes per input)\n              for (uint16_t j = 0; j < 676; j++)\n                  add_coin(amt);\n-             BOOST_CHECK(wallet.SelectCoinsMinConf(2000, 1, 1, vCoins, setCoinsRet, nValueRet));\n+             BOOST_CHECK(wallet.SelectCoinsMinConf(2000, 1, 1, 0, vCoins, setCoinsRet, nValueRet));\n              if (amt - 2000 < MIN_CHANGE) {\n                  // needs more than one input:\n                  uint16_t returnSize = std::ceil((2000.0 + MIN_CHANGE)/amt);\n@@ -291,17 +291,17 @@ BOOST_AUTO_TEST_CASE(coin_selection_tests)\n \n             // picking 50 from 100 coins doesn't depend on the shuffle,\n             // but does depend on randomness in the stochastic approximation code\n-            BOOST_CHECK(wallet.SelectCoinsMinConf(50 * COIN, 1, 6, vCoins, setCoinsRet , nValueRet));\n-            BOOST_CHECK(wallet.SelectCoinsMinConf(50 * COIN, 1, 6, vCoins, setCoinsRet2, nValueRet));\n+            BOOST_CHECK(wallet.SelectCoinsMinConf(50 * COIN, 1, 6, 0, vCoins, setCoinsRet , nValueRet));\n+            BOOST_CHECK(wallet.SelectCoinsMinConf(50 * COIN, 1, 6, 0, vCoins, setCoinsRet2, nValueRet));\n             BOOST_CHECK(!equal_sets(setCoinsRet, setCoinsRet2));\n \n             int fails = 0;\n             for (int i = 0; i < RANDOM_REPEATS; i++)\n             {\n                 // selecting 1 from 100 identical coins depends on the shuffle; this test will fail 1% of the time\n                 // run the test RANDOM_REPEATS times and only complain if all of them fail\n-                BOOST_CHECK(wallet.SelectCoinsMinConf(COIN, 1, 6, vCoins, setCoinsRet , nValueRet));\n-                BOOST_CHECK(wallet.SelectCoinsMinConf(COIN, 1, 6, vCoins, setCoinsRet2, nValueRet));\n+                BOOST_CHECK(wallet.SelectCoinsMinConf(COIN, 1, 6, 0, vCoins, setCoinsRet , nValueRet));\n+                BOOST_CHECK(wallet.SelectCoinsMinConf(COIN, 1, 6, 0, vCoins, setCoinsRet2, nValueRet));\n                 if (equal_sets(setCoinsRet, setCoinsRet2))\n                     fails++;\n             }\n@@ -321,8 +321,8 @@ BOOST_AUTO_TEST_CASE(coin_selection_tests)\n             {\n                 // selecting 1 from 100 identical coins depends on the shuffle; this test will fail 1% of the time\n                 // run the test RANDOM_REPEATS times and only complain if all of them fail\n-                BOOST_CHECK(wallet.SelectCoinsMinConf(90*CENT, 1, 6, vCoins, setCoinsRet , nValueRet));\n-                BOOST_CHECK(wallet.SelectCoinsMinConf(90*CENT, 1, 6, vCoins, setCoinsRet2, nValueRet));\n+                BOOST_CHECK(wallet.SelectCoinsMinConf(90*CENT, 1, 6, 0, vCoins, setCoinsRet , nValueRet));\n+                BOOST_CHECK(wallet.SelectCoinsMinConf(90*CENT, 1, 6, 0, vCoins, setCoinsRet2, nValueRet));\n                 if (equal_sets(setCoinsRet, setCoinsRet2))\n                     fails++;\n             }\n@@ -346,7 +346,7 @@ BOOST_AUTO_TEST_CASE(ApproximateBestSubset)\n         add_coin(1000 * COIN);\n     add_coin(3 * COIN);\n \n-    BOOST_CHECK(wallet.SelectCoinsMinConf(1003 * COIN, 1, 6, vCoins, setCoinsRet, nValueRet));\n+    BOOST_CHECK(wallet.SelectCoinsMinConf(1003 * COIN, 1, 6, 0, vCoins, setCoinsRet, nValueRet));\n     BOOST_CHECK_EQUAL(nValueRet, 1003 * COIN);\n     BOOST_CHECK_EQUAL(setCoinsRet.size(), 2U);\n }"
      },
      {
        "sha": "1a33744ce9b0928fe346b7eab9be8bb1831d045c",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 4,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bdd6d4c97df2052fe160f12ac507ec5946f91a07/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bdd6d4c97df2052fe160f12ac507ec5946f91a07/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=bdd6d4c97df2052fe160f12ac507ec5946f91a07",
        "patch": "@@ -1921,7 +1921,7 @@ static void ApproximateBestSubset(vector<pair<CAmount, pair<const CWalletTx*,uns\n     }\n }\n \n-bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, int nConfMine, int nConfTheirs, vector<COutput> vCoins,\n+bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const int nConfMine, const int nConfTheirs, const uint64_t nMaxAncestors, vector<COutput> vCoins,\n                                  set<pair<const CWalletTx*,unsigned int> >& setCoinsRet, CAmount& nValueRet) const\n {\n     setCoinsRet.clear();\n@@ -1946,6 +1946,9 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, int nConfMine, int\n         if (output.nDepth < (pcoin->IsFromMe(ISMINE_ALL) ? nConfMine : nConfTheirs))\n             continue;\n \n+        if (!mempool.TransactionWithinChainLimit(pcoin->GetHash(), nMaxAncestors))\n+            continue;\n+\n         int i = output.i;\n         CAmount n = pcoin->vout[i].nValue;\n \n@@ -2071,10 +2074,17 @@ bool CWallet::SelectCoins(const vector<COutput>& vAvailableCoins, const CAmount&\n             ++it;\n     }\n \n+    size_t nMaxChainLength = std::min(GetArg(\"-limitancestorcount\", DEFAULT_ANCESTOR_LIMIT), GetArg(\"-limitdescendantcount\", DEFAULT_DESCENDANT_LIMIT));\n+    bool fRejectLongChains = GetBoolArg(\"-walletrejectlongchains\", DEFAULT_WALLET_REJECT_LONG_CHAINS);\n+\n     bool res = nTargetValue <= nValueFromPresetInputs ||\n-        SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, 1, 6, vCoins, setCoinsRet, nValueRet) ||\n-        SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, 1, 1, vCoins, setCoinsRet, nValueRet) ||\n-        (bSpendZeroConfChange && SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, 0, 1, vCoins, setCoinsRet, nValueRet));\n+        SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, 1, 6, 0, vCoins, setCoinsRet, nValueRet) ||\n+        SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, 1, 1, 0, vCoins, setCoinsRet, nValueRet) ||\n+        (bSpendZeroConfChange && SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, 0, 1, 2, vCoins, setCoinsRet, nValueRet)) ||\n+        (bSpendZeroConfChange && SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, 0, 1, std::min((size_t)4, nMaxChainLength/3), vCoins, setCoinsRet, nValueRet)) ||\n+        (bSpendZeroConfChange && SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, 0, 1, nMaxChainLength/2, vCoins, setCoinsRet, nValueRet)) ||\n+        (bSpendZeroConfChange && SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, 0, 1, nMaxChainLength, vCoins, setCoinsRet, nValueRet)) ||\n+        (bSpendZeroConfChange && !fRejectLongChains && SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, 0, 1, std::numeric_limits<uint64_t>::max(), vCoins, setCoinsRet, nValueRet));\n \n     // because SelectCoinsMinConf clears the setCoinsRet, we now add the possible inputs to the coinset\n     setCoinsRet.insert(setPresetCoins.begin(), setPresetCoins.end());\n@@ -3263,6 +3273,7 @@ std::string CWallet::GetWalletHelpString(bool showDebug)\n         strUsage += HelpMessageOpt(\"-dblogsize=<n>\", strprintf(\"Flush wallet database activity from memory to disk log every <n> megabytes (default: %u)\", DEFAULT_WALLET_DBLOGSIZE));\n         strUsage += HelpMessageOpt(\"-flushwallet\", strprintf(\"Run a thread to flush wallet periodically (default: %u)\", DEFAULT_FLUSHWALLET));\n         strUsage += HelpMessageOpt(\"-privdb\", strprintf(\"Sets the DB_PRIVATE flag in the wallet db environment (default: %u)\", DEFAULT_WALLET_PRIVDB));\n+        strUsage += HelpMessageOpt(\"-walletrejectlongchains\", strprintf(_(\"Wallet will not create transactions that violate mempool chain limits (default: %u\"), DEFAULT_WALLET_REJECT_LONG_CHAINS));\n     }\n \n     return strUsage;"
      },
      {
        "sha": "10f6ea8fed8906bfbd23642230ad85e595ce549c",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bdd6d4c97df2052fe160f12ac507ec5946f91a07/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bdd6d4c97df2052fe160f12ac507ec5946f91a07/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=bdd6d4c97df2052fe160f12ac507ec5946f91a07",
        "patch": "@@ -51,6 +51,8 @@ static const CAmount MIN_CHANGE = CENT;\n static const bool DEFAULT_SPEND_ZEROCONF_CHANGE = true;\n //! Default for -sendfreetransactions\n static const bool DEFAULT_SEND_FREE_TRANSACTIONS = false;\n+//! Default for -walletrejectlongchains\n+static const bool DEFAULT_WALLET_REJECT_LONG_CHAINS = false;\n //! -txconfirmtarget default\n static const unsigned int DEFAULT_TX_CONFIRM_TARGET = 2;\n //! Largest (in bytes) free transaction we're willing to create\n@@ -668,7 +670,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n      * completion the coin set and corresponding actual target value is\n      * assembled\n      */\n-    bool SelectCoinsMinConf(const CAmount& nTargetValue, int nConfMine, int nConfTheirs, std::vector<COutput> vCoins, std::set<std::pair<const CWalletTx*,unsigned int> >& setCoinsRet, CAmount& nValueRet) const;\n+    bool SelectCoinsMinConf(const CAmount& nTargetValue, int nConfMine, int nConfTheirs, uint64_t nMaxAncestors, std::vector<COutput> vCoins, std::set<std::pair<const CWalletTx*,unsigned int> >& setCoinsRet, CAmount& nValueRet) const;\n \n     bool IsSpent(const uint256& hash, unsigned int n) const;\n "
      }
    ]
  },
  {
    "sha": "f00066ac513774ba7fcad9e2054b209ffb2c23e8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMDAwNjZhYzUxMzc3NGJhN2ZjYWQ5ZTIwNTRiMjA5ZmZiMmMyM2U4",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2016-12-02T20:45:43Z"
      },
      "committer": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2016-12-20T10:10:19Z"
      },
      "message": "CreateTransaction: Don't return success with too-many-ancestor txn",
      "tree": {
        "sha": "1b50160489d737ea72f9c51b6378742f86d96304",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1b50160489d737ea72f9c51b6378742f86d96304"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f00066ac513774ba7fcad9e2054b209ffb2c23e8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f00066ac513774ba7fcad9e2054b209ffb2c23e8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f00066ac513774ba7fcad9e2054b209ffb2c23e8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f00066ac513774ba7fcad9e2054b209ffb2c23e8/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following{/other_user}",
      "gists_url": "https://api.github.com/users/btcdrak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bdd6d4c97df2052fe160f12ac507ec5946f91a07",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bdd6d4c97df2052fe160f12ac507ec5946f91a07",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bdd6d4c97df2052fe160f12ac507ec5946f91a07"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 15,
      "deletions": 0
    },
    "files": [
      {
        "sha": "7bcb9aaf11f0dcc0c08ca3b083512da1bfc91b40",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f00066ac513774ba7fcad9e2054b209ffb2c23e8/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f00066ac513774ba7fcad9e2054b209ffb2c23e8/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=f00066ac513774ba7fcad9e2054b209ffb2c23e8",
        "patch": "@@ -2452,6 +2452,21 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n         }\n     }\n \n+    if (GetBoolArg(\"-walletrejectlongchains\", DEFAULT_WALLET_REJECT_LONG_CHAINS)) {\n+        // Lastly, ensure this tx will pass the mempool's chain limits\n+        LockPoints lp;\n+        CTxMemPoolEntry entry(txNew, 0, 0, 0, 0, false, 0, false, 0, lp);\n+        CTxMemPool::setEntries setAncestors;\n+        size_t nLimitAncestors = GetArg(\"-limitancestorcount\", DEFAULT_ANCESTOR_LIMIT);\n+        size_t nLimitAncestorSize = GetArg(\"-limitancestorsize\", DEFAULT_ANCESTOR_SIZE_LIMIT)*1000;\n+        size_t nLimitDescendants = GetArg(\"-limitdescendantcount\", DEFAULT_DESCENDANT_LIMIT);\n+        size_t nLimitDescendantSize = GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT)*1000;\n+        std::string errString;\n+        if (!mempool.CalculateMemPoolAncestors(entry, setAncestors, nLimitAncestors, nLimitAncestorSize, nLimitDescendants, nLimitDescendantSize, errString)) {\n+            strFailReason = _(\"Transaction has too long of a mempool chain\");\n+            return false;\n+        }\n+    }\n     return true;\n }\n "
      }
    ]
  },
  {
    "sha": "4bf2bec18e5f3c613a0bf5c5fa78f6ec14dcc4f5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YmYyYmVjMThlNWYzYzYxM2EwYmY1YzVmYTc4ZjZlYzE0ZGNjNGY1",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2016-12-02T17:20:29Z"
      },
      "committer": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2016-12-20T10:10:25Z"
      },
      "message": "Test for fix of txn chaining in wallet",
      "tree": {
        "sha": "a97456e82f0f0210e9c10e43b1132881c7c9450e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a97456e82f0f0210e9c10e43b1132881c7c9450e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4bf2bec18e5f3c613a0bf5c5fa78f6ec14dcc4f5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4bf2bec18e5f3c613a0bf5c5fa78f6ec14dcc4f5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4bf2bec18e5f3c613a0bf5c5fa78f6ec14dcc4f5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4bf2bec18e5f3c613a0bf5c5fa78f6ec14dcc4f5/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following{/other_user}",
      "gists_url": "https://api.github.com/users/btcdrak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f00066ac513774ba7fcad9e2054b209ffb2c23e8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f00066ac513774ba7fcad9e2054b209ffb2c23e8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f00066ac513774ba7fcad9e2054b209ffb2c23e8"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 24,
      "deletions": 1
    },
    "files": [
      {
        "sha": "992fb8a2d64f7b13c026f0fa99f30d3b5a87aabe",
        "filename": "qa/rpc-tests/wallet.py",
        "status": "modified",
        "additions": 24,
        "deletions": 1,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4bf2bec18e5f3c613a0bf5c5fa78f6ec14dcc4f5/qa/rpc-tests/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4bf2bec18e5f3c613a0bf5c5fa78f6ec14dcc4f5/qa/rpc-tests/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/wallet.py?ref=4bf2bec18e5f3c613a0bf5c5fa78f6ec14dcc4f5",
        "patch": "@@ -330,10 +330,12 @@ def run_test (self):\n             # disabled until issue is fixed: https://github.com/bitcoin/bitcoin/issues/7463\n             # '-salvagewallet',\n         ]\n+        chainlimit = 6\n         for m in maintenance:\n             print(\"check \" + m)\n             stop_nodes(self.nodes)\n-            self.nodes = start_nodes(3, self.options.tmpdir, [[m]] * 3)\n+            # set lower ancestor limit for later\n+            self.nodes = start_nodes(3, self.options.tmpdir, [[m, \"-limitancestorcount=\"+str(chainlimit)]] * 3)\n             while m == '-reindex' and [block_count] * 3 != [self.nodes[i].getblockcount() for i in range(3)]:\n                 # reindex will leave rpc warm up \"early\"; Wait for it to finish\n                 time.sleep(0.1)\n@@ -346,5 +348,26 @@ def run_test (self):\n         assert_equal(coinbase_tx_1[\"transactions\"][0][\"blockhash\"], blocks[1])\n         assert_equal(len(self.nodes[0].listsinceblock(blocks[1])[\"transactions\"]), 0)\n \n+        # ==Check that wallet prefers to use coins that don't exceed mempool limits =====\n+\n+        # Get all non-zero utxos together\n+        chain_addrs = [self.nodes[0].getnewaddress(), self.nodes[0].getnewaddress()]\n+        singletxid = self.nodes[0].sendtoaddress(chain_addrs[0], self.nodes[0].getbalance(), \"\", \"\", True)\n+        self.nodes[0].generate(1)\n+        node0_balance = self.nodes[0].getbalance()\n+        # Split into two chains\n+        rawtx = self.nodes[0].createrawtransaction([{\"txid\":singletxid, \"vout\":0}], {chain_addrs[0]:node0_balance/2-Decimal('0.01'), chain_addrs[1]:node0_balance/2-Decimal('0.01')})\n+        signedtx = self.nodes[0].signrawtransaction(rawtx)\n+        singletxid = self.nodes[0].sendrawtransaction(signedtx[\"hex\"])\n+        txids = [singletxid, singletxid]\n+        self.nodes[0].generate(1)\n+\n+        # Make a long chain of unconfirmed payments without hitting mempool limit\n+        txid_list = []\n+        for i in range(chainlimit*2):\n+            txid_list.append(self.nodes[0].sendtoaddress(chain_addrs[0], Decimal('0.0001')))\n+        assert_equal(self.nodes[0].getmempoolinfo()['size'], chainlimit*2)\n+        assert_equal(len(txid_list), chainlimit*2)\n+\n if __name__ == '__main__':\n     WalletTest().main()"
      }
    ]
  },
  {
    "sha": "e1ff0dbe19c3e7df21206d22bb12c686cd130b4c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMWZmMGRiZTE5YzNlN2RmMjEyMDZkMjJiYjEyYzY4NmNkMTMwYjRj",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2016-12-19T14:35:23Z"
      },
      "committer": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2016-12-20T10:10:32Z"
      },
      "message": "reduce number of lookups in TransactionWithinChainLimit",
      "tree": {
        "sha": "de6b339828d676de15ca1b05b8bee3bf8b087a46",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/de6b339828d676de15ca1b05b8bee3bf8b087a46"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e1ff0dbe19c3e7df21206d22bb12c686cd130b4c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e1ff0dbe19c3e7df21206d22bb12c686cd130b4c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e1ff0dbe19c3e7df21206d22bb12c686cd130b4c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e1ff0dbe19c3e7df21206d22bb12c686cd130b4c/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following{/other_user}",
      "gists_url": "https://api.github.com/users/btcdrak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4bf2bec18e5f3c613a0bf5c5fa78f6ec14dcc4f5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4bf2bec18e5f3c613a0bf5c5fa78f6ec14dcc4f5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4bf2bec18e5f3c613a0bf5c5fa78f6ec14dcc4f5"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "63a26da326e1d055325ad3a1fc622d7a5093a088",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1ff0dbe19c3e7df21206d22bb12c686cd130b4c/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1ff0dbe19c3e7df21206d22bb12c686cd130b4c/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=e1ff0dbe19c3e7df21206d22bb12c686cd130b4c",
        "patch": "@@ -1137,7 +1137,7 @@ void CTxMemPool::TrimToSize(size_t sizelimit, std::vector<uint256>* pvNoSpendsRe\n \n bool CTxMemPool::TransactionWithinChainLimit(const uint256& txid, size_t chainLimit) const {\n     LOCK(cs);\n-    if (exists(txid) && std::max(mapTx.find(txid)->GetCountWithAncestors(), mapTx.find(txid)->GetCountWithDescendants()) >= chainLimit)\n-        return false;\n-    return true;\n+    auto it = mapTx.find(txid);\n+    return it == mapTx.end() || (it->GetCountWithAncestors() < chainLimit &&\n+       it->GetCountWithDescendants() < chainLimit);\n }"
      }
    ]
  }
]