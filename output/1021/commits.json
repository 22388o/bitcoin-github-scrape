[
  {
    "sha": "23aa78c405f82257e8578afb3d5d244aa27dcd74",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyM2FhNzhjNDA1ZjgyMjU3ZTg1NzhhZmIzZDVkMjQ0YWEyN2RjZDc0",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-03-31T15:58:25Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-05-11T13:29:19Z"
      },
      "message": "IPv6 node support\n\nThis will make bitcoin relay valid routable IPv6 addresses, and when\nUSE_IPV6 is enabled, listen on IPv6 interfaces and attempt connections\nto IPv6 addresses.",
      "tree": {
        "sha": "27e99a7b7ef6c3f9d178e394b8ef630bbef852f3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/27e99a7b7ef6c3f9d178e394b8ef630bbef852f3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/23aa78c405f82257e8578afb3d5d244aa27dcd74",
      "comment_count": 13,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23aa78c405f82257e8578afb3d5d244aa27dcd74",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/23aa78c405f82257e8578afb3d5d244aa27dcd74",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23aa78c405f82257e8578afb3d5d244aa27dcd74/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "508471bbc0b43a8d5cabeae5c429f8416b9a1e99",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/508471bbc0b43a8d5cabeae5c429f8416b9a1e99",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/508471bbc0b43a8d5cabeae5c429f8416b9a1e99"
      }
    ],
    "stats": {
      "total": 131,
      "additions": 91,
      "deletions": 40
    },
    "files": [
      {
        "sha": "c9bbc873b125bdeb98dfa2527274a79071ea3a99",
        "filename": "bitcoin-qt.pro",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23aa78c405f82257e8578afb3d5d244aa27dcd74/bitcoin-qt.pro",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23aa78c405f82257e8578afb3d5d244aa27dcd74/bitcoin-qt.pro",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/bitcoin-qt.pro?ref=23aa78c405f82257e8578afb3d5d244aa27dcd74",
        "patch": "@@ -2,7 +2,7 @@ TEMPLATE = app\n TARGET =\n VERSION = 0.6.99\n INCLUDEPATH += src src/json src/qt\n-DEFINES += QT_GUI BOOST_THREAD_USE_LIB\n+DEFINES += QT_GUI BOOST_THREAD_USE_LIB USE_IPV6\n CONFIG += no_include_pwd\n \n # for boost 1.37, add -mt to the boost libraries "
      },
      {
        "sha": "256614f7ab8e1d025e3d353816419a5c13d083c4",
        "filename": "doc/build-osx.txt",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23aa78c405f82257e8578afb3d5d244aa27dcd74/doc/build-osx.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23aa78c405f82257e8578afb3d5d244aa27dcd74/doc/build-osx.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-osx.txt?ref=23aa78c405f82257e8578afb3d5d244aa27dcd74",
        "patch": "@@ -44,7 +44,7 @@ sudo port install qrencode\n 4.  Now you should be able to build bitcoind:\n \n cd bitcoin/src\n-make -f makefile.osx\n+make -f makefile.osx USE_IPV6=1\n \n Run:\n   ./bitcoind --help  # for a list of command-line options."
      },
      {
        "sha": "eb5973681674ab0d9d01f2568cb32dfaa2d7dcb8",
        "filename": "doc/build-unix.txt",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23aa78c405f82257e8578afb3d5d244aa27dcd74/doc/build-unix.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23aa78c405f82257e8578afb3d5d244aa27dcd74/doc/build-unix.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-unix.txt?ref=23aa78c405f82257e8578afb3d5d244aa27dcd74",
        "patch": "@@ -43,6 +43,9 @@ your package manager. Set USE_QRCODE to control this:\n  USE_QRCODE=0   (the default) No QRCode support - libarcode not required\n  USE_QRCODE=1   QRCode support enabled\n \n+IPv6 support may be enabled by setting\n+ USE_IPV6=1    Enable IPv6 support\n+\n Licenses of statically linked libraries:\n  Berkeley DB   New BSD license with additional requirement that linked\n                software must be free open source\n@@ -80,7 +83,7 @@ emerge -av1 --noreplace boost glib openssl sys-libs/db:4.8\n \n Take the following steps to build (no UPnP support):\n  cd ${BITCOIN_DIR}/src\n- make -f makefile.unix USE_UPNP= BDB_INCLUDE_PATH='/usr/include/db4.8'\n+ make -f makefile.unix USE_UPNP= USE_IPV6=1 BDB_INCLUDE_PATH='/usr/include/db4.8'\n  strip bitcoind\n \n "
      },
      {
        "sha": "f9691a5d52fbd20d7a8549b337ceb95613130ad8",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23aa78c405f82257e8578afb3d5d244aa27dcd74/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23aa78c405f82257e8578afb3d5d244aa27dcd74/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=23aa78c405f82257e8578afb3d5d244aa27dcd74",
        "patch": "@@ -2424,9 +2424,6 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n         {\n             if (fShutdown)\n                 return true;\n-            // ignore IPv6 for now, since it isn't implemented anyway\n-            if (!addr.IsIPv4())\n-                continue;\n             if (addr.nTime <= 100000000 || addr.nTime > nNow + 10 * 60)\n                 addr.nTime = nNow - 5 * 24 * 60 * 60;\n             pfrom->AddAddressKnown(addr);"
      },
      {
        "sha": "373b49ab0a06da3db6b8c8d3eafe1cedfbba78a8",
        "filename": "src/makefile.linux-mingw",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23aa78c405f82257e8578afb3d5d244aa27dcd74/src/makefile.linux-mingw",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23aa78c405f82257e8578afb3d5d244aa27dcd74/src/makefile.linux-mingw",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.linux-mingw?ref=23aa78c405f82257e8578afb3d5d244aa27dcd74",
        "patch": "@@ -27,7 +27,7 @@ LIBS= \\\n  -l ssl \\\n  -l crypto\n \n-DEFS=-D_MT -DWIN32 -D_WINDOWS -DBOOST_THREAD_USE_LIB\n+DEFS=-D_MT -DWIN32 -D_WINDOWS -DBOOST_THREAD_USE_LIB -DUSE_IPV6\n DEBUGFLAGS=-g\n CFLAGS=-O2 -w -Wall -Wextra -Wformat -Wformat-security -Wno-unused-parameter $(DEBUGFLAGS) $(DEFS) $(INCLUDEPATHS)\n "
      },
      {
        "sha": "156eb17cc1521244a98857060e0c2b5ba9b1defb",
        "filename": "src/makefile.mingw",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23aa78c405f82257e8578afb3d5d244aa27dcd74/src/makefile.mingw",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23aa78c405f82257e8578afb3d5d244aa27dcd74/src/makefile.mingw",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.mingw?ref=23aa78c405f82257e8578afb3d5d244aa27dcd74",
        "patch": "@@ -23,7 +23,7 @@ LIBS= \\\n  -l ssl \\\n  -l crypto\n \n-DEFS=-DWIN32 -D_WINDOWS -DBOOST_THREAD_USE_LIB\n+DEFS=-DWIN32 -D_WINDOWS -DBOOST_THREAD_USE_LIB -DUSE_IPV6\n DEBUGFLAGS=-g\n CFLAGS=-mthreads -O2 -w -Wall -Wextra -Wformat -Wformat-security -Wno-unused-parameter $(DEBUGFLAGS) $(DEFS) $(INCLUDEPATHS)\n "
      },
      {
        "sha": "9c05d500aef19bdf72b53cb1be04d6e292917a21",
        "filename": "src/makefile.osx",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23aa78c405f82257e8578afb3d5d244aa27dcd74/src/makefile.osx",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23aa78c405f82257e8578afb3d5d244aa27dcd74/src/makefile.osx",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.osx?ref=23aa78c405f82257e8578afb3d5d244aa27dcd74",
        "patch": "@@ -53,7 +53,7 @@ LIBS += \\\n TESTDEFS += -DBOOST_TEST_DYN_LINK\n endif\n \n-DEFS=-DMAC_OSX -DMSG_NOSIGNAL=0\n+DEFS=-DMAC_OSX -DMSG_NOSIGNAL=0 -DUSE_IPV6\n \n ifdef RELEASE\n # Compile for maximum compatibility and smallest size."
      },
      {
        "sha": "ce8b55cdf6a775b3768f5cb8928b9b34cf46c933",
        "filename": "src/makefile.unix",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23aa78c405f82257e8578afb3d5d244aa27dcd74/src/makefile.unix",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23aa78c405f82257e8578afb3d5d244aa27dcd74/src/makefile.unix",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.unix?ref=23aa78c405f82257e8578afb3d5d244aa27dcd74",
        "patch": "@@ -4,7 +4,7 @@\n \n USE_UPNP:=0\n \n-DEFS=\n+DEFS=-DUSE_IPV6\n \n DEFS += $(addprefix -I,$(CURDIR) $(CURDIR)/obj $(BOOST_INCLUDE_PATH) $(BDB_INCLUDE_PATH) $(OPENSSL_INCLUDE_PATH))\n LIBS = $(addprefix -L,$(BOOST_LIB_PATH) $(BDB_LIB_PATH) $(OPENSSL_LIB_PATH))"
      },
      {
        "sha": "75c8bbabaf2966590f8e04997530c1d75dd59cb2",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 37,
        "deletions": 19,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23aa78c405f82257e8578afb3d5d244aa27dcd74/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23aa78c405f82257e8578afb3d5d244aa27dcd74/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=23aa78c405f82257e8578afb3d5d244aa27dcd74",
        "patch": "@@ -733,7 +733,11 @@ void ThreadSocketHandler2(void* parg)\n         //\n         if (hListenSocket != INVALID_SOCKET && FD_ISSET(hListenSocket, &fdsetRecv))\n         {\n+#ifdef USE_IPV6\n+            struct sockaddr_in6 sockaddr;\n+#else\n             struct sockaddr_in sockaddr;\n+#endif\n             socklen_t len = sizeof(sockaddr);\n             SOCKET hSocket = accept(hListenSocket, (struct sockaddr*)&sockaddr, &len);\n             CAddress addr;\n@@ -1390,7 +1394,7 @@ void ThreadOpenConnections2(void* parg)\n             CAddress addr = addrman.Select(10 + min(nOutbound,8)*10);\n \n             // if we selected an invalid address, restart\n-            if (!addr.IsIPv4() || !addr.IsValid() || setConnected.count(addr.GetGroup()) || IsLocal(addr))\n+            if (!addr.IsValid() || setConnected.count(addr.GetGroup()) || IsLocal(addr))\n                 break;\n \n             nTries++;\n@@ -1620,6 +1624,7 @@ void ThreadMessageHandler2(void* parg)\n \n bool BindListenPort(string& strError)\n {\n+    unsigned short nPort = GetListenPort();\n     strError = \"\";\n     int nOne = 1;\n \n@@ -1636,7 +1641,12 @@ bool BindListenPort(string& strError)\n #endif\n \n     // Create socket for listening for incoming connections\n-    hListenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n+#ifdef USE_IPV6\n+    int nFamily = AF_INET6;\n+#else\n+    int nFamily = AF_INET;\n+#endif\n+    hListenSocket = socket(nFamily, SOCK_STREAM, IPPROTO_TCP);\n     if (hListenSocket == INVALID_SOCKET)\n     {\n         strError = strprintf(\"Error: Couldn't open socket for incoming connections (socket returned error %d)\", WSAGetLastError());\n@@ -1669,22 +1679,36 @@ bool BindListenPort(string& strError)\n \n     // The sockaddr_in structure specifies the address family,\n     // IP address, and port for the socket that is being bound\n-    struct sockaddr_in sockaddr;\n+#ifdef USE_IPV6\n+    struct sockaddr_in6 sockaddr = sockaddr_in6();\n+    memset(&sockaddr, 0, sizeof(sockaddr));\n+    sockaddr.sin6_family = AF_INET6;\n+    sockaddr.sin6_addr = in6addr_any;   // bind to all IPs on this computer\n+    sockaddr.sin6_port = htons(nPort);\n+#  ifdef WIN32\n+    int nProtLevel = 10 /* PROTECTION_LEVEL_UNRESTRICTED */;\n+    int nParameterId = 23 /* IPV6_PROTECTION_LEVEl */;\n+    // this call is allowed to fail\n+    setsockopt(hListenSocket, IPPROTO_IPV6, nParameterId, (const char*)&nProtLevel, sizeof(int));\n+#  endif\n+#else\n+    struct sockaddr_in sockaddr = sockaddr_in();\n     memset(&sockaddr, 0, sizeof(sockaddr));\n     sockaddr.sin_family = AF_INET;\n     sockaddr.sin_addr.s_addr = INADDR_ANY; // bind to all IPs on this computer\n-    sockaddr.sin_port = htons(GetListenPort());\n+    sockaddr.sin_port = htons(nPort);\n+#endif\n     if (::bind(hListenSocket, (struct sockaddr*)&sockaddr, sizeof(sockaddr)) == SOCKET_ERROR)\n     {\n         int nErr = WSAGetLastError();\n         if (nErr == WSAEADDRINUSE)\n-            strError = strprintf(_(\"Unable to bind to port %d on this computer.  Bitcoin is probably already running.\"), ntohs(sockaddr.sin_port));\n+            strError = strprintf(_(\"Unable to bind to port %d on this computer.  Bitcoin is probably already running.\"), nPort);\n         else\n-            strError = strprintf(\"Error: Unable to bind to port %d on this computer (bind returned error %d)\", ntohs(sockaddr.sin_port), nErr);\n+            strError = strprintf(\"Error: Unable to bind to port %d on this computer (bind returned error %d, %s)\", nPort, nErr, strerror(nErr));\n         printf(\"%s\\n\", strError.c_str());\n         return false;\n     }\n-    printf(\"Bound to port %d\\n\", ntohs(sockaddr.sin_port));\n+    printf(\"Bound to port %d\\n\", (int)nPort);\n \n     // Listen for incoming connections\n     if (listen(hListenSocket, SOMAXCONN) == SOCKET_ERROR)\n@@ -1727,28 +1751,22 @@ void static Discover()\n             if ((ifa->ifa_flags & IFF_UP) == 0) continue;\n             if (strcmp(ifa->ifa_name, \"lo\") == 0) continue;\n             if (strcmp(ifa->ifa_name, \"lo0\") == 0) continue;\n-            char pszIP[100];\n             if (ifa->ifa_addr->sa_family == AF_INET)\n             {\n                 struct sockaddr_in* s4 = (struct sockaddr_in*)(ifa->ifa_addr);\n-                if (inet_ntop(ifa->ifa_addr->sa_family, (void*)&(s4->sin_addr), pszIP, sizeof(pszIP)) != NULL)\n-                    printf(\"ipv4 %s: %s\\n\", ifa->ifa_name, pszIP);\n-\n-                // Take the first IP that isn't loopback 127.x.x.x\n                 CNetAddr addr(s4->sin_addr);\n-                AddLocal(addr, LOCAL_IF);\n+                if (AddLocal(addr, LOCAL_IF))\n+                    printf(\"ipv4 %s: %s\\n\", ifa->ifa_name, addr.ToString().c_str());\n             }\n+#ifdef USE_IPV6\n             else if (ifa->ifa_addr->sa_family == AF_INET6)\n             {\n                 struct sockaddr_in6* s6 = (struct sockaddr_in6*)(ifa->ifa_addr);\n-                if (inet_ntop(ifa->ifa_addr->sa_family, (void*)&(s6->sin6_addr), pszIP, sizeof(pszIP)) != NULL)\n-                    printf(\"ipv6 %s: %s\\n\", ifa->ifa_name, pszIP);\n-\n-#ifdef USE_IPV6\n                 CNetAddr addr(s6->sin6_addr);\n-                AddLocal(addr, LOCAL_IF);\n-#endif\n+                if (AddLocal(addr, LOCAL_IF))\n+                    printf(\"ipv6 %s: %s\\n\", ifa->ifa_name, addr.ToString().c_str());\n             }\n+#endif\n         }\n         freeifaddrs(myaddrs);\n     }"
      },
      {
        "sha": "a22d42a9675ee5c0faa5e4b8618719f80f3a4df1",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 43,
        "deletions": 11,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23aa78c405f82257e8578afb3d5d244aa27dcd74/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23aa78c405f82257e8578afb3d5d244aa27dcd74/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=23aa78c405f82257e8578afb3d5d244aa27dcd74",
        "patch": "@@ -305,21 +305,44 @@ bool static ConnectSocketDirectly(const CService &addrConnect, SOCKET& hSocketRe\n {\n     hSocketRet = INVALID_SOCKET;\n \n-    SOCKET hSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n+    struct sockaddr_storage sockaddr;\n+    int nFamily = 0;\n+    size_t nSockAddrLen = 0;\n+\n+    if (addrConnect.IsIPv4())\n+    {\n+        // Use IPv4 stack to connect to IPv4 addresses\n+        struct sockaddr_in sockaddr4;\n+        if (!addrConnect.GetSockAddr(&sockaddr4))\n+            return false;\n+        memcpy(&sockaddr, &sockaddr4, sizeof(sockaddr4));\n+        nSockAddrLen = sizeof(sockaddr4);\n+        nFamily = AF_INET;\n+    }\n+#ifdef USE_IPV6\n+    else if (addrConnect.IsIPv6())\n+    {\n+        struct sockaddr_in6 sockaddr6;\n+        if (!addrConnect.GetSockAddr6(&sockaddr6))\n+            return false;\n+        memcpy(&sockaddr, &sockaddr6, sizeof(sockaddr6));\n+        nSockAddrLen = sizeof(sockaddr6);\n+        nFamily = AF_INET6;\n+    }\n+#endif\n+    else {\n+        printf(\"Cannot connect to %s: unsupported network\\n\", addrConnect.ToString().c_str());\n+        return false;\n+    }\n+\n+    SOCKET hSocket = socket(nFamily, SOCK_STREAM, IPPROTO_TCP);\n     if (hSocket == INVALID_SOCKET)\n         return false;\n #ifdef SO_NOSIGPIPE\n     int set = 1;\n     setsockopt(hSocket, SOL_SOCKET, SO_NOSIGPIPE, (void*)&set, sizeof(int));\n #endif\n \n-    struct sockaddr_in sockaddr;\n-    if (!addrConnect.GetSockAddr(&sockaddr))\n-    {\n-        closesocket(hSocket);\n-        return false;\n-    }\n-\n #ifdef WIN32\n     u_long fNonblock = 1;\n     if (ioctlsocket(hSocket, FIONBIO, &fNonblock) == SOCKET_ERROR)\n@@ -332,7 +355,7 @@ bool static ConnectSocketDirectly(const CService &addrConnect, SOCKET& hSocketRe\n         return false;\n     }\n \n-    if (connect(hSocket, (struct sockaddr*)&sockaddr, sizeof(sockaddr)) == SOCKET_ERROR)\n+    if (connect(hSocket, (struct sockaddr*)&sockaddr, nSockAddrLen) == SOCKET_ERROR)\n     {\n         // WSAEINVAL is here because some legacy version of winsock uses it\n         if (WSAGetLastError() == WSAEINPROGRESS || WSAGetLastError() == WSAEWOULDBLOCK || WSAGetLastError() == WSAEINVAL)\n@@ -531,6 +554,11 @@ bool CNetAddr::IsIPv4() const\n     return (memcmp(ip, pchIPv4, sizeof(pchIPv4)) == 0);\n }\n \n+bool CNetAddr::IsIPv6() const\n+{\n+    return (!IsIPv4());\n+}\n+\n bool CNetAddr::IsRFC1918() const\n {\n     return IsIPv4() && (\n@@ -919,12 +947,16 @@ std::vector<unsigned char> CService::GetKey() const\n \n std::string CService::ToStringPort() const\n {\n-    return strprintf(\":%i\", port);\n+    return strprintf(\"%i\", port);\n }\n \n std::string CService::ToStringIPPort() const\n {\n-    return ToStringIP() + ToStringPort();\n+    if (IsIPv4()) {\n+        return ToStringIP() + \":\" + ToStringPort();\n+    } else {\n+        return \"[\" + ToStringIP() + \"]:\" + ToStringPort();\n+    }\n }\n \n std::string CService::ToString() const"
      },
      {
        "sha": "acbcc36d189a4900653e871b0fc0fd3aeadfe357",
        "filename": "src/netbase.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23aa78c405f82257e8578afb3d5d244aa27dcd74/src/netbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23aa78c405f82257e8578afb3d5d244aa27dcd74/src/netbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.h?ref=23aa78c405f82257e8578afb3d5d244aa27dcd74",
        "patch": "@@ -31,6 +31,7 @@ class CNetAddr\n         void Init();\n         void SetIP(const CNetAddr& ip);\n         bool IsIPv4() const;    // IPv4 mapped address (::FFFF:0:0/96, 0.0.0.0/0)\n+        bool IsIPv6() const;    // IPv6 address (not IPv4)\n         bool IsRFC1918() const; // IPv4 private networks (10.0.0.0/8, 192.168.0.0/16, 172.16.0.0/12)\n         bool IsRFC3849() const; // IPv6 documentation address (2001:0DB8::/32)\n         bool IsRFC3927() const; // IPv4 autoconfig (169.254.0.0/16)"
      }
    ]
  },
  {
    "sha": "d32148567f5866a7cd2a77a2f44f846134011c9c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMzIxNDg1NjdmNTg2NmE3Y2QyYTc3YTJmNDRmODQ2MTM0MDExYzlj",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-04-02T15:06:11Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-05-11T13:29:19Z"
      },
      "message": "Preliminary support for Tor/I2P hidden services\n\nThere are plans to let Bitcoin function as Tor/I2P hidden service.\nTo do so, we could use the established encoding provided by OnionCat\nand GarliCat (without actually using those tools) to embed Tor/I2P\naddresses in IPv6.\n\nThis patch makes these addresses considered routable, so they can\ntravel over the Bitcoin network in 'addr' messages. This will hopefully\nmake it easier to deploy real hidden service support later.",
      "tree": {
        "sha": "e5f4fe51543a2d60eb2191ebef204dcdeafde7bb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e5f4fe51543a2d60eb2191ebef204dcdeafde7bb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d32148567f5866a7cd2a77a2f44f846134011c9c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d32148567f5866a7cd2a77a2f44f846134011c9c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d32148567f5866a7cd2a77a2f44f846134011c9c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d32148567f5866a7cd2a77a2f44f846134011c9c/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "23aa78c405f82257e8578afb3d5d244aa27dcd74",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23aa78c405f82257e8578afb3d5d244aa27dcd74",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/23aa78c405f82257e8578afb3d5d244aa27dcd74"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 15,
      "deletions": 1
    },
    "files": [
      {
        "sha": "37e6120e7f147eb92af874e43bc0036a5bab7021",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 1,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d32148567f5866a7cd2a77a2f44f846134011c9c/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d32148567f5866a7cd2a77a2f44f846134011c9c/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=d32148567f5866a7cd2a77a2f44f846134011c9c",
        "patch": "@@ -615,6 +615,18 @@ bool CNetAddr::IsRFC4843() const\n     return (GetByte(15) == 0x20 && GetByte(14) == 0x01 && GetByte(13) == 0x00 && (GetByte(12) & 0xF0) == 0x10);\n }\n \n+bool CNetAddr::IsOnionCat() const\n+{\n+    static const unsigned char pchOnionCat[] = {0xFD,0x87,0xD8,0x7E,0xEB,0x43};\n+    return (memcmp(ip, pchOnionCat, sizeof(pchOnionCat)) == 0);\n+}\n+\n+bool CNetAddr::IsGarliCat() const\n+{\n+    static const unsigned char pchGarliCat[] = {0xFD,0x60,0xDB,0x4D,0xDD,0xB5};\n+    return (memcmp(ip, pchGarliCat, sizeof(pchGarliCat)) == 0);\n+}\n+\n bool CNetAddr::IsLocal() const\n {\n     // IPv4 loopback\n@@ -673,7 +685,7 @@ bool CNetAddr::IsValid() const\n \n bool CNetAddr::IsRoutable() const\n {\n-    return IsValid() && !(IsRFC1918() || IsRFC3927() || IsRFC4862() || IsRFC4193() || IsRFC4843() || IsLocal());\n+    return IsValid() && !(IsRFC1918() || IsRFC3927() || IsRFC4862() || (IsRFC4193() && !IsOnionCat() && !IsGarliCat()) || IsRFC4843() || IsLocal());\n }\n \n std::string CNetAddr::ToStringIP() const"
      },
      {
        "sha": "1b6d8d59bb99ebb5e8011f7cfb4f25388af9f3a1",
        "filename": "src/netbase.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d32148567f5866a7cd2a77a2f44f846134011c9c/src/netbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d32148567f5866a7cd2a77a2f44f846134011c9c/src/netbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.h?ref=d32148567f5866a7cd2a77a2f44f846134011c9c",
        "patch": "@@ -42,6 +42,8 @@ class CNetAddr\n         bool IsRFC4862() const; // IPv6 autoconfig (FE80::/64)\n         bool IsRFC6052() const; // IPv6 well-known prefix (64:FF9B::/96)\n         bool IsRFC6145() const; // IPv6 IPv4-translated address (::FFFF:0:0:0/96)\n+        bool IsOnionCat() const;\n+        bool IsGarliCat() const;\n         bool IsLocal() const;\n         bool IsRoutable() const;\n         bool IsValid() const;"
      }
    ]
  },
  {
    "sha": "090e5b40f1b3ac9ac6209f8996da4d686686a2ac",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowOTBlNWI0MGYxYjNhYzlhYzYyMDlmODk5NmRhNGQ2ODY2ODZhMmFj",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-04-10T18:22:04Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-05-11T13:29:19Z"
      },
      "message": "Limited relaying/storing of foreign addresses\n\nIntroduce a boolean variable for each \"network\" (ipv4, ipv6, tor, i2p),\nand track whether we are likely to able to connect to it. Addresses in\n\"addr\" messages outside of our network get limited relaying and are not\nstored in addrman.",
      "tree": {
        "sha": "c26367aef8abd697b3f035e2340dcb407cd3424f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c26367aef8abd697b3f035e2340dcb407cd3424f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/090e5b40f1b3ac9ac6209f8996da4d686686a2ac",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/090e5b40f1b3ac9ac6209f8996da4d686686a2ac",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/090e5b40f1b3ac9ac6209f8996da4d686686a2ac",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/090e5b40f1b3ac9ac6209f8996da4d686686a2ac/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d32148567f5866a7cd2a77a2f44f846134011c9c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d32148567f5866a7cd2a77a2f44f846134011c9c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d32148567f5866a7cd2a77a2f44f846134011c9c"
      }
    ],
    "stats": {
      "total": 64,
      "additions": 60,
      "deletions": 4
    },
    "files": [
      {
        "sha": "5f16378b41bc8d3c3949f15150a653b0dff4a280",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/090e5b40f1b3ac9ac6209f8996da4d686686a2ac/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/090e5b40f1b3ac9ac6209f8996da4d686686a2ac/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=090e5b40f1b3ac9ac6209f8996da4d686686a2ac",
        "patch": "@@ -2418,6 +2418,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n         }\n \n         // Store the new addresses\n+        vector<CAddress> vAddrOk;\n         int64 nNow = GetAdjustedTime();\n         int64 nSince = nNow - 10 * 60;\n         BOOST_FOREACH(CAddress& addr, vAddr)\n@@ -2427,6 +2428,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n             if (addr.nTime <= 100000000 || addr.nTime > nNow + 10 * 60)\n                 addr.nTime = nNow - 5 * 24 * 60 * 60;\n             pfrom->AddAddressKnown(addr);\n+            bool fReachable = IsReachable(addr);\n             if (addr.nTime > nSince && !pfrom->fGetAddr && vAddr.size() <= 10 && addr.IsRoutable())\n             {\n                 // Relay to a limited number of other nodes\n@@ -2451,13 +2453,16 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n                         hashKey = Hash(BEGIN(hashKey), END(hashKey));\n                         mapMix.insert(make_pair(hashKey, pnode));\n                     }\n-                    int nRelayNodes = 2;\n+                    int nRelayNodes = fReachable ? 2 : 1; // limited relaying of addresses outside our network(s)\n                     for (multimap<uint256, CNode*>::iterator mi = mapMix.begin(); mi != mapMix.end() && nRelayNodes-- > 0; ++mi)\n                         ((*mi).second)->PushAddress(addr);\n                 }\n             }\n+            // Do not store addresses outside our network\n+            if (fReachable)\n+                vAddrOk.push_back(addr);\n         }\n-        addrman.Add(vAddr, pfrom->addr, 2 * 60 * 60);\n+        addrman.Add(vAddrOk, pfrom->addr, 2 * 60 * 60);\n         if (vAddr.size() < 1000)\n             pfrom->fGetAddr = false;\n         if (pfrom->fOneShot)"
      },
      {
        "sha": "d407e66420e31cd72befea3d35a3a648ca85fb83",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 2,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/090e5b40f1b3ac9ac6209f8996da4d686686a2ac/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/090e5b40f1b3ac9ac6209f8996da4d686686a2ac/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=090e5b40f1b3ac9ac6209f8996da4d686686a2ac",
        "patch": "@@ -45,8 +45,9 @@ bool OpenNetworkConnection(const CAddress& addrConnect, const char *strDest = NU\n bool fClient = false;\n static bool fUseUPnP = false;\n uint64 nLocalServices = (fClient ? 0 : NODE_NETWORK);\n-CCriticalSection cs_mapLocalHost;\n-map<CNetAddr, int> mapLocalHost;\n+static CCriticalSection cs_mapLocalHost;\n+static map<CNetAddr, int> mapLocalHost;\n+static bool vfReachable[NET_MAX] = {};\n static CNode* pnodeLocalHost = NULL;\n uint64 nLocalHostNonce = 0;\n array<int, THREAD_MAX> vnThreadsRunning;\n@@ -214,6 +215,9 @@ bool AddLocal(const CNetAddr& addr, int nScore)\n     {\n         LOCK(cs_mapLocalHost);\n         mapLocalHost[addr] = std::max(nScore, mapLocalHost[addr]) + (mapLocalHost.count(addr) ? 1 : 0);\n+        enum Network net = addr.GetNetwork();\n+        vfReachable[net] = true;\n+        if (net == NET_IPV6) vfReachable[NET_IPV4] = true;\n     }\n \n     AdvertizeLocal();\n@@ -243,6 +247,12 @@ bool IsLocal(const CNetAddr& addr)\n     return mapLocalHost.count(addr) > 0;\n }\n \n+// check whether a given address is in a network we can probably connect to\n+bool IsReachable(const CNetAddr& addr)\n+{\n+    LOCK(cs_mapLocalHost);\n+    return vfReachable[addr.GetNetwork()];\n+}\n \n bool GetMyExternalIP2(const CService& addrConnect, const char* pszGet, const char* pszKeyword, CNetAddr& ipRet)\n {"
      },
      {
        "sha": "63f871204068c5b53b4a2c0975c978cccd9232cc",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/090e5b40f1b3ac9ac6209f8996da4d686686a2ac/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/090e5b40f1b3ac9ac6209f8996da4d686686a2ac/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=090e5b40f1b3ac9ac6209f8996da4d686686a2ac",
        "patch": "@@ -58,8 +58,10 @@ bool AddLocal(const CNetAddr& addr, int nScore = LOCAL_NONE);\n bool SeenLocal(const CNetAddr& addr);\n bool IsLocal(const CNetAddr& addr);\n bool GetLocal(CNetAddr &addr, const CNetAddr *paddrPeer = NULL);\n+bool IsReachable(const CNetAddr &addr);\n CAddress GetLocalAddress(const CNetAddr *paddrPeer = NULL);\n \n+\n enum\n {\n     MSG_TX = 1,"
      },
      {
        "sha": "4c852f5eee9ed7f3018cecf32392462a258832ef",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/090e5b40f1b3ac9ac6209f8996da4d686686a2ac/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/090e5b40f1b3ac9ac6209f8996da4d686686a2ac/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=090e5b40f1b3ac9ac6209f8996da4d686686a2ac",
        "patch": "@@ -25,6 +25,14 @@ int nConnectTimeout = 5000;\n \n static const unsigned char pchIPv4[12] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0xff, 0xff };\n \n+enum Network ParseNetwork(std::string net) {\n+    if (net == \"ipv4\") return NET_IPV4;\n+    if (net == \"ipv6\") return NET_IPV6;\n+    if (net == \"tor\")  return NET_TOR;\n+    if (net == \"i2p\")  return NET_I2P;\n+    return NET_UNROUTABLE;\n+}\n+\n bool static LookupIntern(const char *pszName, std::vector<CNetAddr>& vIP, unsigned int nMaxSolutions, bool fAllowLookup)\n {\n     vIP.clear();\n@@ -688,6 +696,23 @@ bool CNetAddr::IsRoutable() const\n     return IsValid() && !(IsRFC1918() || IsRFC3927() || IsRFC4862() || (IsRFC4193() && !IsOnionCat() && !IsGarliCat()) || IsRFC4843() || IsLocal());\n }\n \n+enum Network CNetAddr::GetNetwork() const\n+{\n+    if (!IsRoutable())\n+        return NET_UNROUTABLE;\n+\n+    if (IsIPv4())\n+        return NET_IPV4;\n+\n+    if (IsOnionCat())\n+        return NET_TOR;\n+\n+    if (IsGarliCat())\n+        return NET_I2P;\n+\n+    return NET_IPV6;\n+}\n+\n std::string CNetAddr::ToStringIP() const\n {\n     if (IsIPv4())"
      },
      {
        "sha": "998f8eaf14d4e9f5e38bf4f8e58b93e50d910bc0",
        "filename": "src/netbase.h",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/090e5b40f1b3ac9ac6209f8996da4d686686a2ac/src/netbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/090e5b40f1b3ac9ac6209f8996da4d686686a2ac/src/netbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.h?ref=090e5b40f1b3ac9ac6209f8996da4d686686a2ac",
        "patch": "@@ -17,6 +17,19 @@ extern int nConnectTimeout;\n #undef SetPort\n #endif\n \n+enum Network\n+{\n+    NET_UNROUTABLE,\n+    NET_IPV4,\n+    NET_IPV6,\n+    NET_TOR,\n+    NET_I2P,\n+\n+    NET_MAX\n+};\n+\n+enum Network ParseNetwork(std::string net);\n+\n /** IP address (IPv6, or IPv4 using mapped IPv6 range (::FFFF:0:0/96)) */\n class CNetAddr\n {\n@@ -48,6 +61,7 @@ class CNetAddr\n         bool IsRoutable() const;\n         bool IsValid() const;\n         bool IsMulticast() const;\n+        enum Network GetNetwork() const;\n         std::string ToString() const;\n         std::string ToStringIP() const;\n         int GetByte(int n) const;"
      }
    ]
  },
  {
    "sha": "623b987813acfc985ecca591e96ac0b84f5333e3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MjNiOTg3ODEzYWNmYzk4NWVjY2E1OTFlOTZhYzBiODRmNTMzM2Uz",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-05-04T14:55:19Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-05-11T13:29:19Z"
      },
      "message": "Add -noproxy to circumvent proxy for some network",
      "tree": {
        "sha": "24ad73a5c0c336254ba886cc08089a5d9b006891",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/24ad73a5c0c336254ba886cc08089a5d9b006891"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/623b987813acfc985ecca591e96ac0b84f5333e3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/623b987813acfc985ecca591e96ac0b84f5333e3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/623b987813acfc985ecca591e96ac0b84f5333e3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/623b987813acfc985ecca591e96ac0b84f5333e3/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "090e5b40f1b3ac9ac6209f8996da4d686686a2ac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/090e5b40f1b3ac9ac6209f8996da4d686686a2ac",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/090e5b40f1b3ac9ac6209f8996da4d686686a2ac"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 21,
      "deletions": 1
    },
    "files": [
      {
        "sha": "03b47b3efa4bfe7608f04745482aceca59d93f4e",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/623b987813acfc985ecca591e96ac0b84f5333e3/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/623b987813acfc985ecca591e96ac0b84f5333e3/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=623b987813acfc985ecca591e96ac0b84f5333e3",
        "patch": "@@ -180,6 +180,7 @@ bool AppInit2(int argc, char* argv[])\n             \"  -timeout=<n>     \\t  \"   + _(\"Specify connection timeout (in milliseconds)\") + \"\\n\" +\n             \"  -proxy=<ip:port> \\t  \"   + _(\"Connect through socks proxy\") + \"\\n\" +\n             \"  -socks=<n>       \\t  \"   + _(\"Select the version of socks proxy to use (4 or 5, 5 is default)\") + \"\\n\" +\n+            \"  -noproxy=<net>   \\t  \"   + _(\"Do not use proxy for connections to network net (ipv4 or ipv6)\") + \"\\n\" +\n             \"  -dns             \\t  \"   + _(\"Allow DNS lookups for -addnode, -seednode and -connect\") + \"\\n\" +\n             \"  -proxydns        \\t  \"   + _(\"Pass DNS requests to (SOCKS5) proxy\") + \"\\n\" +\n             \"  -port=<port>     \\t\\t  \" + _(\"Listen for connections on <port> (default: 8333 or testnet: 18333)\") + \"\\n\" +\n@@ -532,6 +533,18 @@ bool AppInit2(int argc, char* argv[])\n         }\n     }\n \n+    if (mapArgs.count(\"-noproxy\"))\n+    {\n+        BOOST_FOREACH(std::string snet, mapMultiArgs[\"-noproxy\"]) {\n+            enum Network net = ParseNetwork(snet);\n+            if (net == NET_UNROUTABLE) {\n+                ThreadSafeMessageBox(_(\"Unknown network specified in -noproxy\"), _(\"Bitcoin\"), wxOK | wxMODAL);\n+                return false;\n+            }\n+            SetNoProxy(net);\n+        }\n+    }\n+\n     if (mapArgs.count(\"-connect\"))\n         SoftSetBoolArg(\"-dnsseed\", false);\n  "
      },
      {
        "sha": "2c821c7acd0fde046e2ae5d25700217a47f8e015",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/623b987813acfc985ecca591e96ac0b84f5333e3/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/623b987813acfc985ecca591e96ac0b84f5333e3/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=623b987813acfc985ecca591e96ac0b84f5333e3",
        "patch": "@@ -21,6 +21,7 @@ bool fProxyNameLookup = false;\n bool fNameLookup = false;\n CService addrProxy(\"127.0.0.1\",9050);\n int nConnectTimeout = 5000;\n+static bool vfNoProxy[NET_MAX] = {};\n \n \n static const unsigned char pchIPv4[12] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0xff, 0xff };\n@@ -33,6 +34,11 @@ enum Network ParseNetwork(std::string net) {\n     return NET_UNROUTABLE;\n }\n \n+void SetNoProxy(enum Network net, bool fNoProxy) {\n+    assert(net >= 0 && net < NET_MAX);\n+    vfNoProxy[net] = fNoProxy;\n+}\n+\n bool static LookupIntern(const char *pszName, std::vector<CNetAddr>& vIP, unsigned int nMaxSolutions, bool fAllowLookup)\n {\n     vIP.clear();\n@@ -440,7 +446,7 @@ bool static ConnectSocketDirectly(const CService &addrConnect, SOCKET& hSocketRe\n bool ConnectSocket(const CService &addrDest, SOCKET& hSocketRet, int nTimeout)\n {\n     SOCKET hSocket = INVALID_SOCKET;\n-    bool fProxy = (fUseProxy && addrDest.IsRoutable());\n+    bool fProxy = (fUseProxy && addrDest.IsRoutable() && !vfNoProxy[addrDest.GetNetwork()]);\n \n     if (!ConnectSocketDirectly(fProxy ? addrProxy : addrDest, hSocket, nTimeout))\n         return false;"
      },
      {
        "sha": "bd62c42e32f5631122dd031e78f83a5ec2be9fd1",
        "filename": "src/netbase.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/623b987813acfc985ecca591e96ac0b84f5333e3/src/netbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/623b987813acfc985ecca591e96ac0b84f5333e3/src/netbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.h?ref=623b987813acfc985ecca591e96ac0b84f5333e3",
        "patch": "@@ -29,6 +29,7 @@ enum Network\n };\n \n enum Network ParseNetwork(std::string net);\n+void SetNoProxy(enum Network net, bool fNoProxy = true);\n \n /** IP address (IPv6, or IPv4 using mapped IPv6 range (::FFFF:0:0/96)) */\n class CNetAddr"
      }
    ]
  },
  {
    "sha": "c5b3ffd8d5d61b0adb69882efd72f2d4e89f62d6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNWIzZmZkOGQ1ZDYxYjBhZGI2OTg4MmVmZDcyZjJkNGU4OWY2MmQ2",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-04-29T00:19:23Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-05-11T13:29:19Z"
      },
      "message": "Use NET_ identifiers in CNetAddr::GetGroup()",
      "tree": {
        "sha": "76393cccf480baeb13297ee9edc0cb6a4e4a6f79",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/76393cccf480baeb13297ee9edc0cb6a4e4a6f79"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c5b3ffd8d5d61b0adb69882efd72f2d4e89f62d6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5b3ffd8d5d61b0adb69882efd72f2d4e89f62d6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c5b3ffd8d5d61b0adb69882efd72f2d4e89f62d6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5b3ffd8d5d61b0adb69882efd72f2d4e89f62d6/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "623b987813acfc985ecca591e96ac0b84f5333e3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/623b987813acfc985ecca591e96ac0b84f5333e3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/623b987813acfc985ecca591e96ac0b84f5333e3"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 6,
      "deletions": 6
    },
    "files": [
      {
        "sha": "7e9620d9ffaddefa23339aafd1955ee651b72322",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c5b3ffd8d5d61b0adb69882efd72f2d4e89f62d6/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c5b3ffd8d5d61b0adb69882efd72f2d4e89f62d6/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=c5b3ffd8d5d61b0adb69882efd72f2d4e89f62d6",
        "patch": "@@ -772,40 +772,40 @@ bool CNetAddr::GetIn6Addr(struct in6_addr* pipv6Addr) const\n std::vector<unsigned char> CNetAddr::GetGroup() const\n {\n     std::vector<unsigned char> vchRet;\n-    int nClass = 0; // 0=IPv6, 1=IPv4, 254=local, 255=unroutable\n+    int nClass = NET_IPV6;\n     int nStartByte = 0;\n     int nBits = 16;\n \n     // all local addresses belong to the same group\n     if (IsLocal())\n     {\n-        nClass = 254;\n+        nClass = 255;\n         nBits = 0;\n     }\n \n     // all unroutable addresses belong to the same group\n     if (!IsRoutable())\n     {\n-        nClass = 255;\n+        nClass = NET_UNROUTABLE;\n         nBits = 0;\n     }\n     // for IPv4 addresses, '1' + the 16 higher-order bits of the IP\n     // includes mapped IPv4, SIIT translated IPv4, and the well-known prefix\n     else if (IsIPv4() || IsRFC6145() || IsRFC6052())\n     {\n-        nClass = 1;\n+        nClass = NET_IPV4;\n         nStartByte = 12;\n     }\n     // for 6to4 tunneled addresses, use the encapsulated IPv4 address\n     else if (IsRFC3964())\n     {\n-        nClass = 1;\n+        nClass = NET_IPV4;\n         nStartByte = 2;\n     }\n     // for Teredo-tunneled IPv6 addresses, use the encapsulated IPv4 address\n     else if (IsRFC4380())\n     {\n-        vchRet.push_back(1);\n+        vchRet.push_back(NET_IPV4);\n         vchRet.push_back(GetByte(3) ^ 0xFF);\n         vchRet.push_back(GetByte(2) ^ 0xFF);\n         return vchRet;"
      }
    ]
  },
  {
    "sha": "457754d2c24f7e53c55f4b68155a5fa702552327",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NTc3NTRkMmMyNGY3ZTUzYzU1ZjRiNjgxNTVhNWZhNzAyNTUyMzI3",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-05-04T14:46:22Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-05-11T13:29:19Z"
      },
      "message": "Add -blocknet to prevent connections to a given network",
      "tree": {
        "sha": "a61edc73a6163a5ec71dcc2cb4822950130e5d7a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a61edc73a6163a5ec71dcc2cb4822950130e5d7a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/457754d2c24f7e53c55f4b68155a5fa702552327",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/457754d2c24f7e53c55f4b68155a5fa702552327",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/457754d2c24f7e53c55f4b68155a5fa702552327",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/457754d2c24f7e53c55f4b68155a5fa702552327/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c5b3ffd8d5d61b0adb69882efd72f2d4e89f62d6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5b3ffd8d5d61b0adb69882efd72f2d4e89f62d6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c5b3ffd8d5d61b0adb69882efd72f2d4e89f62d6"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 36,
      "deletions": 4
    },
    "files": [
      {
        "sha": "202d51367709ac301525fa9371550587465c7f61",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/457754d2c24f7e53c55f4b68155a5fa702552327/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/457754d2c24f7e53c55f4b68155a5fa702552327/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=457754d2c24f7e53c55f4b68155a5fa702552327",
        "patch": "@@ -189,6 +189,7 @@ bool AppInit2(int argc, char* argv[])\n             \"  -connect=<ip>    \\t\\t  \" + _(\"Connect only to the specified node\") + \"\\n\" +\n             \"  -seednode=<ip>   \\t\\t  \" + _(\"Connect to a node to retrieve peer addresses, and disconnect\") + \"\\n\" +\n             \"  -externalip=<ip> \\t  \"   + _(\"Specify your own public address\") + \"\\n\" +\n+            \"  -blocknet=<net>  \\t  \"   + _(\"Do not connect to addresses in network net (ipv4, ipv6)\") + \"\\n\" +\n             \"  -discover        \\t  \"   + _(\"Try to discover public IP address (default: 1)\") + \"\\n\" +\n             \"  -irc             \\t  \"   + _(\"Find peers using internet relay chat (default: 0)\") + \"\\n\" +\n             \"  -listen          \\t  \"   + _(\"Accept connections from outside (default: 1)\") + \"\\n\" +\n@@ -560,6 +561,17 @@ bool AppInit2(int argc, char* argv[])\n         SoftSetBoolArg(\"-discover\", false);\n     }\n \n+    if (mapArgs.count(\"-blocknet\")) {\n+        BOOST_FOREACH(std::string snet, mapMultiArgs[\"-blocknet\"]) {\n+            enum Network net = ParseNetwork(snet);\n+            if (net == NET_UNROUTABLE) {\n+                ThreadSafeMessageBox(_(\"Unknown network specified in -blocknet\"), _(\"Bitcoin\"), wxOK | wxMODAL);\n+                return false;\n+            }\n+            SetLimited(net);\n+        }\n+    }\n+\n     fNameLookup = GetBoolArg(\"-dns\");\n     fProxyNameLookup = GetBoolArg(\"-proxydns\");\n     if (fProxyNameLookup)"
      },
      {
        "sha": "79d0a8ddbc71b287049d1c48fd5972ece80a60e4",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 4,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/457754d2c24f7e53c55f4b68155a5fa702552327/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/457754d2c24f7e53c55f4b68155a5fa702552327/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=457754d2c24f7e53c55f4b68155a5fa702552327",
        "patch": "@@ -48,6 +48,7 @@ uint64 nLocalServices = (fClient ? 0 : NODE_NETWORK);\n static CCriticalSection cs_mapLocalHost;\n static map<CNetAddr, int> mapLocalHost;\n static bool vfReachable[NET_MAX] = {};\n+static bool vfLimited[NET_MAX] = {};\n static CNode* pnodeLocalHost = NULL;\n uint64 nLocalHostNonce = 0;\n array<int, THREAD_MAX> vnThreadsRunning;\n@@ -225,7 +226,20 @@ bool AddLocal(const CNetAddr& addr, int nScore)\n     return true;\n }\n \n-// vote for a local address\n+/** Make a particular network entirely off-limits (no automatic connects to it) */\n+void SetLimited(enum Network net, bool fLimited)\n+{\n+    LOCK(cs_mapLocalHost);\n+    vfLimited[net] = fLimited;\n+}\n+\n+bool IsLimited(const CNetAddr& addr)\n+{\n+    LOCK(cs_mapLocalHost);\n+    return vfLimited[addr.GetNetwork()];\n+}\n+\n+/** vote for a local address */\n bool SeenLocal(const CNetAddr& addr)\n {\n     {\n@@ -240,18 +254,19 @@ bool SeenLocal(const CNetAddr& addr)\n     return true;\n }\n \n-// check whether a given address is potentially local\n+/** check whether a given address is potentially local */\n bool IsLocal(const CNetAddr& addr)\n {\n     LOCK(cs_mapLocalHost);\n     return mapLocalHost.count(addr) > 0;\n }\n \n-// check whether a given address is in a network we can probably connect to\n+/** check whether a given address is in a network we can probably connect to */\n bool IsReachable(const CNetAddr& addr)\n {\n     LOCK(cs_mapLocalHost);\n-    return vfReachable[addr.GetNetwork()];\n+    enum Network net = addr.GetNetwork();\n+    return vfReachable[net] && !vfLimited[net];\n }\n \n bool GetMyExternalIP2(const CService& addrConnect, const char* pszGet, const char* pszKeyword, CNetAddr& ipRet)\n@@ -1409,6 +1424,9 @@ void ThreadOpenConnections2(void* parg)\n \n             nTries++;\n \n+            if (IsLimited(addr))\n+                continue;\n+\n             // only consider very recently tried nodes after 30 failed attempts\n             if (nANow - addr.nLastTry < 600 && nTries < 30)\n                 continue;"
      },
      {
        "sha": "be167b001fe15bdc932640e42c207e45e4fc7376",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/457754d2c24f7e53c55f4b68155a5fa702552327/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/457754d2c24f7e53c55f4b68155a5fa702552327/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=457754d2c24f7e53c55f4b68155a5fa702552327",
        "patch": "@@ -54,6 +54,8 @@ enum\n     LOCAL_MAX\n };\n \n+void SetLimited(enum Network net, bool fLimited = true);\n+bool IsLimited(const CNetAddr& addr);\n bool AddLocal(const CNetAddr& addr, int nScore = LOCAL_NONE);\n bool SeenLocal(const CNetAddr& addr);\n bool IsLocal(const CNetAddr& addr);"
      }
    ]
  },
  {
    "sha": "7fa4443f77a659031e277337770b506fcf954d69",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZmE0NDQzZjc3YTY1OTAzMWUyNzczMzc3NzBiNTA2ZmNmOTU0ZDY5",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-05-10T18:35:13Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-05-11T13:29:19Z"
      },
      "message": "Keep port information for local addresses",
      "tree": {
        "sha": "9464645df0c9ed33668586fe924d4c02e54ec1a1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9464645df0c9ed33668586fe924d4c02e54ec1a1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7fa4443f77a659031e277337770b506fcf954d69",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7fa4443f77a659031e277337770b506fcf954d69",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7fa4443f77a659031e277337770b506fcf954d69",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7fa4443f77a659031e277337770b506fcf954d69/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "457754d2c24f7e53c55f4b68155a5fa702552327",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/457754d2c24f7e53c55f4b68155a5fa702552327",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/457754d2c24f7e53c55f4b68155a5fa702552327"
      }
    ],
    "stats": {
      "total": 51,
      "additions": 29,
      "deletions": 22
    },
    "files": [
      {
        "sha": "525bd7a8da125a457a4693d9ddec2f783208550a",
        "filename": "src/irc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7fa4443f77a659031e277337770b506fcf954d69/src/irc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7fa4443f77a659031e277337770b506fcf954d69/src/irc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/irc.cpp?ref=7fa4443f77a659031e277337770b506fcf954d69",
        "patch": "@@ -246,7 +246,7 @@ void ThreadIRCSeed2(void* parg)\n                 return;\n         }\n \n-        CNetAddr addrLocal;\n+        CService addrLocal;\n         string strMyName;\n         if (GetLocal(addrLocal, &addrConnect))\n             strMyName = EncodeAddress(GetLocalAddress(&addrConnect));"
      },
      {
        "sha": "a43b76d79ce8294047f8d381e0c327d0542a8d12",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 10,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7fa4443f77a659031e277337770b506fcf954d69/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7fa4443f77a659031e277337770b506fcf954d69/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=7fa4443f77a659031e277337770b506fcf954d69",
        "patch": "@@ -46,7 +46,7 @@ bool fClient = false;\n static bool fUseUPnP = false;\n uint64 nLocalServices = (fClient ? 0 : NODE_NETWORK);\n static CCriticalSection cs_mapLocalHost;\n-static map<CNetAddr, int> mapLocalHost;\n+static map<CService, int> mapLocalHost;\n static bool vfReachable[NET_MAX] = {};\n static bool vfLimited[NET_MAX] = {};\n static CNode* pnodeLocalHost = NULL;\n@@ -96,7 +96,7 @@ void CNode::PushGetBlocks(CBlockIndex* pindexBegin, uint256 hashEnd)\n }\n \n // find 'best' local address for a particular peer\n-bool GetLocal(CNetAddr& addr, const CNetAddr *paddrPeer)\n+bool GetLocal(CService& addr, const CNetAddr *paddrPeer)\n {\n     if (fUseProxy || mapArgs.count(\"-connect\") || fNoListen)\n         return false;\n@@ -105,7 +105,7 @@ bool GetLocal(CNetAddr& addr, const CNetAddr *paddrPeer)\n     int nBestReachability = -1;\n     {\n         LOCK(cs_mapLocalHost);\n-        for (map<CNetAddr, int>::iterator it = mapLocalHost.begin(); it != mapLocalHost.end(); it++)\n+        for (map<CService, int>::iterator it = mapLocalHost.begin(); it != mapLocalHost.end(); it++)\n         {\n             int nCount = (*it).second;\n             int nReachability = (*it).first.GetReachabilityFrom(paddrPeer);\n@@ -124,11 +124,10 @@ bool GetLocal(CNetAddr& addr, const CNetAddr *paddrPeer)\n CAddress GetLocalAddress(const CNetAddr *paddrPeer)\n {\n     CAddress ret(CService(\"0.0.0.0\",0),0);\n-    CNetAddr addr;\n+    CService addr;\n     if (GetLocal(addr, paddrPeer))\n     {\n-        ret.SetIP(addr);\n-        ret.SetPort(GetListenPort());\n+        ret = CAddress(addr);\n         ret.nServices = nLocalServices;\n         ret.nTime = GetAdjustedTime();\n     }\n@@ -196,7 +195,7 @@ void static AdvertizeLocal()\n         if (pnode->fSuccessfullyConnected)\n         {\n             CAddress addrLocal = GetLocalAddress(&pnode->addr);\n-            if (addrLocal.IsRoutable() && (CNetAddr)addrLocal != (CNetAddr)pnode->addrLocal)\n+            if (addrLocal.IsRoutable() && (CService)addrLocal != (CService)pnode->addrLocal)\n             {\n                 pnode->PushAddress(addrLocal);\n                 pnode->addrLocal = addrLocal;\n@@ -206,7 +205,7 @@ void static AdvertizeLocal()\n }\n \n // learn a new local address\n-bool AddLocal(const CNetAddr& addr, int nScore)\n+bool AddLocal(const CService& addr, int nScore)\n {\n     if (!addr.IsRoutable())\n         return false;\n@@ -226,6 +225,13 @@ bool AddLocal(const CNetAddr& addr, int nScore)\n     return true;\n }\n \n+bool AddLocal(const CNetAddr& addr, int nScore, int port)\n+{\n+    if (port == -1)\n+        port = GetListenPort();\n+    return AddLocal(CService(addr, port), nScore);\n+}\n+\n /** Make a particular network entirely off-limits (no automatic connects to it) */\n void SetLimited(enum Network net, bool fLimited)\n {\n@@ -240,7 +246,7 @@ bool IsLimited(const CNetAddr& addr)\n }\n \n /** vote for a local address */\n-bool SeenLocal(const CNetAddr& addr)\n+bool SeenLocal(const CService& addr)\n {\n     {\n         LOCK(cs_mapLocalHost);\n@@ -255,7 +261,7 @@ bool SeenLocal(const CNetAddr& addr)\n }\n \n /** check whether a given address is potentially local */\n-bool IsLocal(const CNetAddr& addr)\n+bool IsLocal(const CService& addr)\n {\n     LOCK(cs_mapLocalHost);\n     return mapLocalHost.count(addr) > 0;"
      },
      {
        "sha": "398b89dcfc0a88ad4a36c358007a4472a402121b",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 12,
        "deletions": 11,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7fa4443f77a659031e277337770b506fcf954d69/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7fa4443f77a659031e277337770b506fcf954d69/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=7fa4443f77a659031e277337770b506fcf954d69",
        "patch": "@@ -44,22 +44,23 @@ bool StopNode();\n \n enum\n {\n-    LOCAL_NONE,\n-    LOCAL_IF,\n-    LOCAL_UPNP,\n-    LOCAL_IRC,\n-    LOCAL_HTTP,\n-    LOCAL_MANUAL,\n+    LOCAL_NONE,   // unknown\n+    LOCAL_IF,     // address a local interface listens on\n+    LOCAL_UPNP,   // address reported by UPnP\n+    LOCAL_IRC,    // address reported by IRC (deprecated)\n+    LOCAL_HTTP,   // address reported by whatismyip.com and similars\n+    LOCAL_MANUAL, // address explicitly specified (-externalip=)\n \n     LOCAL_MAX\n };\n \n void SetLimited(enum Network net, bool fLimited = true);\n bool IsLimited(const CNetAddr& addr);\n-bool AddLocal(const CNetAddr& addr, int nScore = LOCAL_NONE);\n-bool SeenLocal(const CNetAddr& addr);\n-bool IsLocal(const CNetAddr& addr);\n-bool GetLocal(CNetAddr &addr, const CNetAddr *paddrPeer = NULL);\n+bool AddLocal(const CService& addr, int nScore = LOCAL_NONE);\n+bool AddLocal(const CNetAddr& addr, int nScore = LOCAL_NONE, int port = -1);\n+bool SeenLocal(const CService& addr);\n+bool IsLocal(const CService& addr);\n+bool GetLocal(CService &addr, const CNetAddr *paddrPeer = NULL);\n bool IsReachable(const CNetAddr &addr);\n CAddress GetLocalAddress(const CNetAddr *paddrPeer = NULL);\n \n@@ -142,7 +143,7 @@ class CNode\n     unsigned int nMessageStart;\n     CAddress addr;\n     std::string addrName;\n-    CNetAddr addrLocal;\n+    CService addrLocal;\n     int nVersion;\n     std::string strSubVer;\n     bool fOneShot;"
      }
    ]
  },
  {
    "sha": "8f10a2889089af1b2ac64802360494b54c8c7ff1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZjEwYTI4ODkwODlhZjFiMmFjNjQ4MDIzNjA0OTRiNTRjOGM3ZmYx",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-05-11T13:28:59Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-05-11T13:29:20Z"
      },
      "message": "Separate listening sockets, -bind=<addr>",
      "tree": {
        "sha": "06df6b9e6114b170fca7aaa7e205c26207a0ab2f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/06df6b9e6114b170fca7aaa7e205c26207a0ab2f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8f10a2889089af1b2ac64802360494b54c8c7ff1",
      "comment_count": 1,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f10a2889089af1b2ac64802360494b54c8c7ff1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8f10a2889089af1b2ac64802360494b54c8c7ff1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f10a2889089af1b2ac64802360494b54c8c7ff1/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7fa4443f77a659031e277337770b506fcf954d69",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7fa4443f77a659031e277337770b506fcf954d69",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7fa4443f77a659031e277337770b506fcf954d69"
      }
    ],
    "stats": {
      "total": 232,
      "additions": 140,
      "deletions": 92
    },
    "files": [
      {
        "sha": "877b1d471f0fda4505778f11d9e65e37bc9fd4ea",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 31,
        "deletions": 5,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f10a2889089af1b2ac64802360494b54c8c7ff1/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f10a2889089af1b2ac64802360494b54c8c7ff1/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=8f10a2889089af1b2ac64802360494b54c8c7ff1",
        "patch": "@@ -119,6 +119,18 @@ bool AppInit(int argc, char* argv[])\n     return fRet;\n }\n \n+bool static Bind(const CService &addr) {\n+    if (IsLimited(addr))\n+        return false;\n+    std::string strError;\n+    if (!BindListenPort(addr, strError))\n+    {\n+        ThreadSafeMessageBox(strError, _(\"Bitcoin\"), wxOK | wxMODAL);\n+        return false;\n+    }\n+    return true;\n+}\n+\n bool AppInit2(int argc, char* argv[])\n {\n #ifdef _MSC_VER\n@@ -193,6 +205,7 @@ bool AppInit2(int argc, char* argv[])\n             \"  -discover        \\t  \"   + _(\"Try to discover public IP address (default: 1)\") + \"\\n\" +\n             \"  -irc             \\t  \"   + _(\"Find peers using internet relay chat (default: 0)\") + \"\\n\" +\n             \"  -listen          \\t  \"   + _(\"Accept connections from outside (default: 1)\") + \"\\n\" +\n+            \"  -bind=<addr>     \\t  \"   + _(\"Bind to given address. Use [host]:port notation for IPv6\") + \"\\n\" +\n #ifdef QT_GUI\n             \"  -lang=<lang>     \\t\\t  \" + _(\"Set language, for example \\\"de_DE\\\" (default: system locale)\") + \"\\n\" +\n #endif\n@@ -548,7 +561,11 @@ bool AppInit2(int argc, char* argv[])\n \n     if (mapArgs.count(\"-connect\"))\n         SoftSetBoolArg(\"-dnsseed\", false);\n- \n+\n+    // even in Tor mode, if -bind is specified, you really want -listen\n+    if (mapArgs.count(\"-bind\"))\n+        SoftSetBoolArg(\"-listen\", true);\n+\n     bool fTor = (fUseProxy && addrProxy.GetPort() == 9050);\n     if (fTor)\n     {\n@@ -588,14 +605,23 @@ bool AppInit2(int argc, char* argv[])\n     const char* pszP2SH = \"/P2SH/\";\n     COINBASE_FLAGS << std::vector<unsigned char>(pszP2SH, pszP2SH+strlen(pszP2SH));\n \n+    bool fBound = false;\n     if (!fNoListen)\n     {\n         std::string strError;\n-        if (!BindListenPort(strError))\n-        {\n-            ThreadSafeMessageBox(strError, _(\"Bitcoin\"), wxOK | wxMODAL);\n-            return false;\n+        if (mapArgs.count(\"-bind\")) {\n+            BOOST_FOREACH(std::string strBind, mapMultiArgs[\"-bind\"]) {\n+                fBound |= Bind(CService(strBind, GetDefaultPort(), false));\n+            }\n+        } else {\n+            struct in_addr inaddr_any = {s_addr: INADDR_ANY};\n+            fBound |= Bind(CService(inaddr_any, GetDefaultPort()));\n+#ifdef USE_IPV6\n+            fBound |= Bind(CService(in6addr_any, GetDefaultPort()));\n+#endif\n         }\n+        if (!fBound)\n+            return false;\n     }\n \n     if (mapArgs.count(\"-externalip\"))"
      },
      {
        "sha": "28667166e616ed8e9e2c165b34ad8e397401e48e",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 49,
        "deletions": 37,
        "changes": 86,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f10a2889089af1b2ac64802360494b54c8c7ff1/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f10a2889089af1b2ac64802360494b54c8c7ff1/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=8f10a2889089af1b2ac64802360494b54c8c7ff1",
        "patch": "@@ -52,7 +52,7 @@ static bool vfLimited[NET_MAX] = {};\n static CNode* pnodeLocalHost = NULL;\n uint64 nLocalHostNonce = 0;\n array<int, THREAD_MAX> vnThreadsRunning;\n-static SOCKET hListenSocket = INVALID_SOCKET;\n+static std::vector<SOCKET> vhListenSocket;\n CAddrMan addrman;\n \n vector<CNode*> vNodes;\n@@ -719,9 +719,10 @@ void ThreadSocketHandler2(void* parg)\n         FD_ZERO(&fdsetError);\n         SOCKET hSocketMax = 0;\n \n-        if(hListenSocket != INVALID_SOCKET)\n+        BOOST_FOREACH(SOCKET hListenSocket, vhListenSocket) {\n             FD_SET(hListenSocket, &fdsetRecv);\n-        hSocketMax = max(hSocketMax, hListenSocket);\n+            hSocketMax = max(hSocketMax, hListenSocket);\n+        }\n         {\n             LOCK(cs_vNodes);\n             BOOST_FOREACH(CNode* pnode, vNodes)\n@@ -762,20 +763,22 @@ void ThreadSocketHandler2(void* parg)\n         //\n         // Accept new connections\n         //\n+        BOOST_FOREACH(SOCKET hListenSocket, vhListenSocket)\n         if (hListenSocket != INVALID_SOCKET && FD_ISSET(hListenSocket, &fdsetRecv))\n         {\n #ifdef USE_IPV6\n-            struct sockaddr_in6 sockaddr;\n+            struct sockaddr_storage sockaddr;\n #else\n-            struct sockaddr_in sockaddr;\n+            struct sockaddr sockaddr;\n #endif\n             socklen_t len = sizeof(sockaddr);\n             SOCKET hSocket = accept(hListenSocket, (struct sockaddr*)&sockaddr, &len);\n             CAddress addr;\n             int nInbound = 0;\n \n             if (hSocket != INVALID_SOCKET)\n-                addr = CAddress(sockaddr);\n+                if (!addr.SetSockAddr((const struct sockaddr*)&sockaddr))\n+                    printf(\"warning: unknown socket family\\n\");\n \n             {\n                 LOCK(cs_vNodes);\n@@ -1656,9 +1659,8 @@ void ThreadMessageHandler2(void* parg)\n \n \n \n-bool BindListenPort(string& strError)\n+bool BindListenPort(const CService &addrBind, string& strError)\n {\n-    unsigned short nPort = GetListenPort();\n     strError = \"\";\n     int nOne = 1;\n \n@@ -1676,11 +1678,19 @@ bool BindListenPort(string& strError)\n \n     // Create socket for listening for incoming connections\n #ifdef USE_IPV6\n-    int nFamily = AF_INET6;\n+    struct sockaddr_storage sockaddr;\n #else\n-    int nFamily = AF_INET;\n+    struct sockaddr sockaddr;\n #endif\n-    hListenSocket = socket(nFamily, SOCK_STREAM, IPPROTO_TCP);\n+    socklen_t len = sizeof(sockaddr);\n+    if (!addrBind.GetSockAddr((struct sockaddr*)&sockaddr, &len))\n+    {\n+        strError = strprintf(\"Error: bind address family for %s not supported\", addrBind.ToString().c_str());\n+        printf(\"%s\\n\", strError.c_str());\n+        return false;\n+    }\n+\n+    SOCKET hListenSocket = socket(((struct sockaddr*)&sockaddr)->sa_family, SOCK_STREAM, IPPROTO_TCP);\n     if (hListenSocket == INVALID_SOCKET)\n     {\n         strError = strprintf(\"Error: Couldn't open socket for incoming connections (socket returned error %d)\", WSAGetLastError());\n@@ -1699,6 +1709,7 @@ bool BindListenPort(string& strError)\n     setsockopt(hListenSocket, SOL_SOCKET, SO_REUSEADDR, (void*)&nOne, sizeof(int));\n #endif\n \n+\n #ifdef WIN32\n     // Set to nonblocking, incoming connections will also inherit this\n     if (ioctlsocket(hListenSocket, FIONBIO, (u_long*)&nOne) == SOCKET_ERROR)\n@@ -1711,38 +1722,33 @@ bool BindListenPort(string& strError)\n         return false;\n     }\n \n-    // The sockaddr_in structure specifies the address family,\n-    // IP address, and port for the socket that is being bound\n #ifdef USE_IPV6\n-    struct sockaddr_in6 sockaddr = sockaddr_in6();\n-    memset(&sockaddr, 0, sizeof(sockaddr));\n-    sockaddr.sin6_family = AF_INET6;\n-    sockaddr.sin6_addr = in6addr_any;   // bind to all IPs on this computer\n-    sockaddr.sin6_port = htons(nPort);\n-#  ifdef WIN32\n-    int nProtLevel = 10 /* PROTECTION_LEVEL_UNRESTRICTED */;\n-    int nParameterId = 23 /* IPV6_PROTECTION_LEVEl */;\n-    // this call is allowed to fail\n-    setsockopt(hListenSocket, IPPROTO_IPV6, nParameterId, (const char*)&nProtLevel, sizeof(int));\n-#  endif\n-#else\n-    struct sockaddr_in sockaddr = sockaddr_in();\n-    memset(&sockaddr, 0, sizeof(sockaddr));\n-    sockaddr.sin_family = AF_INET;\n-    sockaddr.sin_addr.s_addr = INADDR_ANY; // bind to all IPs on this computer\n-    sockaddr.sin_port = htons(nPort);\n+    // some systems don't have IPV6_V6ONLY but are always v6only; others do have the option\n+    // and enable it by default or not. Try to enable it, if possible.\n+    if (addrBind.IsIPv6()) {\n+#ifdef IPV6_V6ONLY\n+        setsockopt(hListenSocket, IPPROTO_IPV6, IPV6_V6ONLY, (void*)&nOne, sizeof(int));\n #endif\n-    if (::bind(hListenSocket, (struct sockaddr*)&sockaddr, sizeof(sockaddr)) == SOCKET_ERROR)\n+#ifdef WIN32\n+        int nProtLevel = 10 /* PROTECTION_LEVEL_UNRESTRICTED */;\n+        int nParameterId = 23 /* IPV6_PROTECTION_LEVEl */;\n+        // this call is allowed to fail\n+        setsockopt(hListenSocket, IPPROTO_IPV6, nParameterId, (const char*)&nProtLevel, sizeof(int));\n+#endif\n+    }\n+#endif\n+\n+    if (::bind(hListenSocket, (struct sockaddr*)&sockaddr, len) == SOCKET_ERROR)\n     {\n         int nErr = WSAGetLastError();\n         if (nErr == WSAEADDRINUSE)\n-            strError = strprintf(_(\"Unable to bind to port %d on this computer.  Bitcoin is probably already running.\"), nPort);\n+            strError = strprintf(_(\"Unable to bind to %s on this computer.  Bitcoin is probably already running.\"), addrBind.ToString().c_str());\n         else\n-            strError = strprintf(\"Error: Unable to bind to port %d on this computer (bind returned error %d, %s)\", nPort, nErr, strerror(nErr));\n+            strError = strprintf(_(\"Unable to bind to %s on this computer (bind returned error %d, %s)\"), addrBind.ToString().c_str(), nErr, strerror(nErr));\n         printf(\"%s\\n\", strError.c_str());\n         return false;\n     }\n-    printf(\"Bound to port %d\\n\", (int)nPort);\n+    printf(\"Bound to %s\\n\", addrBind.ToString().c_str());\n \n     // Listen for incoming connections\n     if (listen(hListenSocket, SOMAXCONN) == SOCKET_ERROR)\n@@ -1752,6 +1758,11 @@ bool BindListenPort(string& strError)\n         return false;\n     }\n \n+    vhListenSocket.push_back(hListenSocket);\n+\n+    if (addrBind.IsRoutable() && GetBoolArg(\"-discover\", true))\n+        AddLocal(addrBind, LOCAL_BIND);\n+\n     return true;\n }\n \n@@ -1915,9 +1926,10 @@ class CNetCleanup\n         BOOST_FOREACH(CNode* pnode, vNodes)\n             if (pnode->hSocket != INVALID_SOCKET)\n                 closesocket(pnode->hSocket);\n-        if (hListenSocket != INVALID_SOCKET)\n-            if (closesocket(hListenSocket) == SOCKET_ERROR)\n-                printf(\"closesocket(hListenSocket) failed with error %d\\n\", WSAGetLastError());\n+        BOOST_FOREACH(SOCKET hListenSocket, vhListenSocket)\n+            if (hListenSocket != INVALID_SOCKET)\n+                if (closesocket(hListenSocket) == SOCKET_ERROR)\n+                    printf(\"closesocket(hListenSocket) failed with error %d\\n\", WSAGetLastError());\n \n #ifdef WIN32\n         // Shutdown Windows Sockets"
      },
      {
        "sha": "d62f51271646050d5ddffdc53c060aba3f0b4783",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f10a2889089af1b2ac64802360494b54c8c7ff1/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f10a2889089af1b2ac64802360494b54c8c7ff1/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=8f10a2889089af1b2ac64802360494b54c8c7ff1",
        "patch": "@@ -38,14 +38,15 @@ CNode* FindNode(const CNetAddr& ip);\n CNode* FindNode(const CService& ip);\n CNode* ConnectNode(CAddress addrConnect, const char *strDest = NULL, int64 nTimeout=0);\n void MapPort(bool fMapPort);\n-bool BindListenPort(std::string& strError=REF(std::string()));\n+bool BindListenPort(const CService &bindAddr, std::string& strError=REF(std::string()));\n void StartNode(void* parg);\n bool StopNode();\n \n enum\n {\n     LOCAL_NONE,   // unknown\n     LOCAL_IF,     // address a local interface listens on\n+    LOCAL_BIND,   // address explicit bound to\n     LOCAL_UPNP,   // address reported by UPnP\n     LOCAL_IRC,    // address reported by IRC (deprecated)\n     LOCAL_HTTP,   // address reported by whatismyip.com and similars"
      },
      {
        "sha": "ebf823e89920bbaaab7509423e07cd2ef0ea799d",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 56,
        "deletions": 47,
        "changes": 103,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f10a2889089af1b2ac64802360494b54c8c7ff1/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f10a2889089af1b2ac64802360494b54c8c7ff1/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=8f10a2889089af1b2ac64802360494b54c8c7ff1",
        "patch": "@@ -183,7 +183,12 @@ bool static Socks4(const CService &addrDest, SOCKET& hSocket)\n     }\n     char pszSocks4IP[] = \"\\4\\1\\0\\0\\0\\0\\0\\0user\";\n     struct sockaddr_in addr;\n-    addrDest.GetSockAddr(&addr);\n+    socklen_t len = sizeof(addr);\n+    if (!addrDest.GetSockAddr((struct sockaddr*)&addr, &len) || addr.sin_family != AF_INET)\n+    {\n+        closesocket(hSocket);\n+        return error(\"Cannot get proxy destination address\");\n+    }\n     memcpy(pszSocks4IP + 2, &addr.sin_port, 2);\n     memcpy(pszSocks4IP + 4, &addr.sin_addr, 4);\n     char* pszSocks4 = pszSocks4IP;\n@@ -319,37 +324,18 @@ bool static ConnectSocketDirectly(const CService &addrConnect, SOCKET& hSocketRe\n {\n     hSocketRet = INVALID_SOCKET;\n \n-    struct sockaddr_storage sockaddr;\n-    int nFamily = 0;\n-    size_t nSockAddrLen = 0;\n-\n-    if (addrConnect.IsIPv4())\n-    {\n-        // Use IPv4 stack to connect to IPv4 addresses\n-        struct sockaddr_in sockaddr4;\n-        if (!addrConnect.GetSockAddr(&sockaddr4))\n-            return false;\n-        memcpy(&sockaddr, &sockaddr4, sizeof(sockaddr4));\n-        nSockAddrLen = sizeof(sockaddr4);\n-        nFamily = AF_INET;\n-    }\n #ifdef USE_IPV6\n-    else if (addrConnect.IsIPv6())\n-    {\n-        struct sockaddr_in6 sockaddr6;\n-        if (!addrConnect.GetSockAddr6(&sockaddr6))\n-            return false;\n-        memcpy(&sockaddr, &sockaddr6, sizeof(sockaddr6));\n-        nSockAddrLen = sizeof(sockaddr6);\n-        nFamily = AF_INET6;\n-    }\n+    struct sockaddr_storage sockaddr;\n+#else\n+    struct sockaddr sockaddr;\n #endif\n-    else {\n+    socklen_t len = sizeof(sockaddr);\n+    if (!addrConnect.GetSockAddr((struct sockaddr*)&sockaddr, &len)) {\n         printf(\"Cannot connect to %s: unsupported network\\n\", addrConnect.ToString().c_str());\n         return false;\n     }\n \n-    SOCKET hSocket = socket(nFamily, SOCK_STREAM, IPPROTO_TCP);\n+    SOCKET hSocket = socket(((struct sockaddr*)&sockaddr)->sa_family, SOCK_STREAM, IPPROTO_TCP);\n     if (hSocket == INVALID_SOCKET)\n         return false;\n #ifdef SO_NOSIGPIPE\n@@ -369,7 +355,7 @@ bool static ConnectSocketDirectly(const CService &addrConnect, SOCKET& hSocketRe\n         return false;\n     }\n \n-    if (connect(hSocket, (struct sockaddr*)&sockaddr, nSockAddrLen) == SOCKET_ERROR)\n+    if (connect(hSocket, (struct sockaddr*)&sockaddr, len) == SOCKET_ERROR)\n     {\n         // WSAEINVAL is here because some legacy version of winsock uses it\n         if (WSAGetLastError() == WSAEINPROGRESS || WSAGetLastError() == WSAEWOULDBLOCK || WSAGetLastError() == WSAEINVAL)\n@@ -902,6 +888,22 @@ CService::CService(const struct sockaddr_in6 &addr) : CNetAddr(addr.sin6_addr),\n }\n #endif\n \n+bool CService::SetSockAddr(const struct sockaddr *paddr)\n+{\n+    switch (paddr->sa_family) {\n+    case AF_INET:\n+        *this = CService(*(const struct sockaddr_in*)paddr);\n+        return true;\n+#ifdef USE_IPV6\n+    case AF_INET6:\n+        *this = CService(*(const struct sockaddr_in6*)paddr);\n+        return true;\n+#endif\n+    default:\n+        return false;\n+    }\n+}\n+\n CService::CService(const char *pszIpPort, bool fAllowLookup)\n {\n     Init();\n@@ -954,29 +956,36 @@ bool operator<(const CService& a, const CService& b)\n     return (CNetAddr)a < (CNetAddr)b || ((CNetAddr)a == (CNetAddr)b && a.port < b.port);\n }\n \n-bool CService::GetSockAddr(struct sockaddr_in* paddr) const\n+bool CService::GetSockAddr(struct sockaddr* paddr, socklen_t *addrlen) const\n {\n-    if (!IsIPv4())\n-        return false;\n-    memset(paddr, 0, sizeof(struct sockaddr_in));\n-    if (!GetInAddr(&paddr->sin_addr))\n-        return false;\n-    paddr->sin_family = AF_INET;\n-    paddr->sin_port = htons(port);\n-    return true;\n-}\n-\n+    if (IsIPv4()) {\n+        if (*addrlen < sizeof(struct sockaddr_in))\n+            return false;\n+        *addrlen = sizeof(struct sockaddr_in);\n+        struct sockaddr_in *paddrin = (struct sockaddr_in*)paddr;\n+        memset(paddrin, 0, *addrlen);\n+        if (!GetInAddr(&paddrin->sin_addr))\n+            return false;\n+        paddrin->sin_family = AF_INET;\n+        paddrin->sin_port = htons(port);\n+        return true;\n+    }\n #ifdef USE_IPV6\n-bool CService::GetSockAddr6(struct sockaddr_in6* paddr) const\n-{\n-    memset(paddr, 0, sizeof(struct sockaddr_in6));\n-    if (!GetIn6Addr(&paddr->sin6_addr))\n-        return false;\n-    paddr->sin6_family = AF_INET6;\n-    paddr->sin6_port = htons(port);\n-    return true;\n-}\n+    if (IsIPv6()) {\n+        if (*addrlen < sizeof(struct sockaddr_in6))\n+            return false;\n+        *addrlen = sizeof(struct sockaddr_in6);\n+        struct sockaddr_in6 *paddrin6 = (struct sockaddr_in6*)paddr;\n+        memset(paddrin6, 0, *addrlen);\n+        if (!GetIn6Addr(&paddrin6->sin6_addr))\n+            return false;\n+        paddrin6->sin6_family = AF_INET6;\n+        paddrin6->sin6_port = htons(port);\n+        return true;\n+    }\n #endif\n+    return false;\n+}\n \n std::vector<unsigned char> CService::GetKey() const\n {"
      },
      {
        "sha": "514a1ae950bb8ade75fa443d249031e5f11affdb",
        "filename": "src/netbase.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f10a2889089af1b2ac64802360494b54c8c7ff1/src/netbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f10a2889089af1b2ac64802360494b54c8c7ff1/src/netbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.h?ref=8f10a2889089af1b2ac64802360494b54c8c7ff1",
        "patch": "@@ -105,7 +105,8 @@ class CService : public CNetAddr\n         void Init();\n         void SetPort(unsigned short portIn);\n         unsigned short GetPort() const;\n-        bool GetSockAddr(struct sockaddr_in* paddr) const;\n+        bool GetSockAddr(struct sockaddr* paddr, socklen_t *addrlen) const;\n+        bool SetSockAddr(const struct sockaddr* paddr);\n         friend bool operator==(const CService& a, const CService& b);\n         friend bool operator!=(const CService& a, const CService& b);\n         friend bool operator<(const CService& a, const CService& b);\n@@ -117,7 +118,6 @@ class CService : public CNetAddr\n \n #ifdef USE_IPV6\n         CService(const struct in6_addr& ipv6Addr, unsigned short port);\n-        bool GetSockAddr6(struct sockaddr_in6* paddr) const;\n         CService(const struct sockaddr_in6& addr);\n #endif\n "
      }
    ]
  }
]