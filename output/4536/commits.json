[
  {
    "sha": "b33bd7a3be1cbcc8d255178307976b7762125b18",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMzNiZDdhM2JlMWNiY2M4ZDI1NTE3ODMwNzk3NmI3NzYyMTI1YjE4",
    "commit": {
      "author": {
        "name": "Daniel Kraft",
        "email": "d@domob.eu",
        "date": "2014-08-03T16:12:19Z"
      },
      "committer": {
        "name": "Daniel Kraft",
        "email": "d@domob.eu",
        "date": "2014-08-03T16:12:19Z"
      },
      "message": "Implement \"getchaintips\" RPC command to monitor blockchain forks.\n\nPort over https://github.com/chronokings/huntercoin/pull/19 from\nHuntercoin:  This implements a new RPC command \"getchaintips\" that can be\nused to find all currently active chain heads.  This is similar to the\n-printblocktree startup option, but it can be used without restarting\njust via the RPC interface on a running daemon.",
      "tree": {
        "sha": "7d1af753944e5813f0ef541efb0a28edf5a283e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7d1af753944e5813f0ef541efb0a28edf5a283e2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b33bd7a3be1cbcc8d255178307976b7762125b18",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b33bd7a3be1cbcc8d255178307976b7762125b18",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b33bd7a3be1cbcc8d255178307976b7762125b18",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b33bd7a3be1cbcc8d255178307976b7762125b18/comments",
    "author": {
      "login": "domob1812",
      "id": 4943644,
      "node_id": "MDQ6VXNlcjQ5NDM2NDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4943644?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/domob1812",
      "html_url": "https://github.com/domob1812",
      "followers_url": "https://api.github.com/users/domob1812/followers",
      "following_url": "https://api.github.com/users/domob1812/following{/other_user}",
      "gists_url": "https://api.github.com/users/domob1812/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/domob1812/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/domob1812/subscriptions",
      "organizations_url": "https://api.github.com/users/domob1812/orgs",
      "repos_url": "https://api.github.com/users/domob1812/repos",
      "events_url": "https://api.github.com/users/domob1812/events{/privacy}",
      "received_events_url": "https://api.github.com/users/domob1812/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "domob1812",
      "id": 4943644,
      "node_id": "MDQ6VXNlcjQ5NDM2NDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4943644?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/domob1812",
      "html_url": "https://github.com/domob1812",
      "followers_url": "https://api.github.com/users/domob1812/followers",
      "following_url": "https://api.github.com/users/domob1812/following{/other_user}",
      "gists_url": "https://api.github.com/users/domob1812/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/domob1812/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/domob1812/subscriptions",
      "organizations_url": "https://api.github.com/users/domob1812/orgs",
      "repos_url": "https://api.github.com/users/domob1812/repos",
      "events_url": "https://api.github.com/users/domob1812/events{/privacy}",
      "received_events_url": "https://api.github.com/users/domob1812/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6278bd57c662e29b07df9db50c47095c0bb44a82",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6278bd57c662e29b07df9db50c47095c0bb44a82",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6278bd57c662e29b07df9db50c47095c0bb44a82"
      }
    ],
    "stats": {
      "total": 104,
      "additions": 100,
      "deletions": 4
    },
    "files": [
      {
        "sha": "a83c4997436bfbaba8e61c9134b5b4b009edce4f",
        "filename": "qa/rpc-tests/getchaintips.py",
        "status": "added",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b33bd7a3be1cbcc8d255178307976b7762125b18/qa/rpc-tests/getchaintips.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b33bd7a3be1cbcc8d255178307976b7762125b18/qa/rpc-tests/getchaintips.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/getchaintips.py?ref=b33bd7a3be1cbcc8d255178307976b7762125b18",
        "patch": "@@ -0,0 +1,24 @@\n+#!/usr/bin/env python\n+# Copyright (c) 2014 The Bitcoin Core developers\n+# Distributed under the MIT/X11 software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+# Exercise the getchaintips API.\n+\n+# Since the test framework does not generate orphan blocks, we can\n+# unfortunately not check for them!\n+\n+from test_framework import BitcoinTestFramework\n+from util import assert_equal\n+\n+class GetChainTipsTest (BitcoinTestFramework):\n+\n+    def run_test (self, nodes):\n+        res = nodes[0].getchaintips ()\n+        assert_equal (len (res), 1)\n+        res = res[0]\n+        assert_equal (res['branchlen'], 0)\n+        assert_equal (res['height'], 200)\n+\n+if __name__ == '__main__':\n+    GetChainTipsTest ().main ()"
      },
      {
        "sha": "cf9318fedf7193aaab01496fa1f5550c8efb5c34",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b33bd7a3be1cbcc8d255178307976b7762125b18/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b33bd7a3be1cbcc8d255178307976b7762125b18/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=b33bd7a3be1cbcc8d255178307976b7762125b18",
        "patch": "@@ -444,7 +444,7 @@ CBlockIndex *CChain::FindFork(const CBlockLocator &locator) const {\n     return Genesis();\n }\n \n-CBlockIndex *CChain::FindFork(CBlockIndex *pindex) const {\n+const CBlockIndex *CChain::FindFork(const CBlockIndex *pindex) const {\n     if (pindex->nHeight > Height())\n         pindex = pindex->GetAncestor(Height());\n     while (pindex && !Contains(pindex))\n@@ -2067,8 +2067,8 @@ static CBlockIndex* FindMostWorkChain() {\n static bool ActivateBestChainStep(CValidationState &state, CBlockIndex *pindexMostWork) {\n     AssertLockHeld(cs_main);\n     bool fInvalidFound = false;\n-    CBlockIndex *pindexOldTip = chainActive.Tip();\n-    CBlockIndex *pindexFork = chainActive.FindFork(pindexMostWork);\n+    const CBlockIndex *pindexOldTip = chainActive.Tip();\n+    const CBlockIndex *pindexFork = chainActive.FindFork(pindexMostWork);\n \n     // Disconnect active blocks which are no longer in the best chain.\n     while (chainActive.Tip() && chainActive.Tip() != pindexFork) {"
      },
      {
        "sha": "a27020459ab27b5b8c4e2fb5550af4b15cdf2a7f",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b33bd7a3be1cbcc8d255178307976b7762125b18/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b33bd7a3be1cbcc8d255178307976b7762125b18/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=b33bd7a3be1cbcc8d255178307976b7762125b18",
        "patch": "@@ -1068,7 +1068,7 @@ class CChain {\n     CBlockIndex *FindFork(const CBlockLocator &locator) const;\n \n     /** Find the last common block between this chain and a block index entry. */\n-    CBlockIndex *FindFork(CBlockIndex *pindex) const;\n+    const CBlockIndex *FindFork(const CBlockIndex *pindex) const;\n };\n \n /** The currently-connected chain of blocks. */"
      },
      {
        "sha": "1e5198b85cff01d8a06afd6e807421c296cbd8a8",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 70,
        "deletions": 0,
        "changes": 70,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b33bd7a3be1cbcc8d255178307976b7762125b18/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b33bd7a3be1cbcc8d255178307976b7762125b18/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=b33bd7a3be1cbcc8d255178307976b7762125b18",
        "patch": "@@ -461,3 +461,73 @@ Value getblockchaininfo(const Array& params, bool fHelp)\n     obj.push_back(Pair(\"chainwork\",             chainActive.Tip()->nChainWork.GetHex()));\n     return obj;\n }\n+\n+/* Comparison function for sorting the getchaintips heads.  */\n+struct CompareBlocksByHeight\n+{\n+    bool operator()(const CBlockIndex* a, const CBlockIndex* b) const\n+    {\n+        /* Make sure that unequal blocks with the same height do not compare\n+           equal.  Use the pointers themselves to make a distinction.  */\n+\n+        if (a->nHeight != b->nHeight)\n+          return (a->nHeight > b->nHeight);\n+\n+        return a < b;\n+    }\n+};\n+\n+Value getchaintips(const Array& params, bool fHelp)\n+{\n+    if (fHelp || params.size() != 0)\n+        throw runtime_error(\n+            \"getchaintips\\n\"\n+            \"Return information about all known tips in the block tree,\"\n+            \" including the main chain as well as orphaned branches.\\n\"\n+            \"\\nResult:\\n\"\n+            \"[\\n\"\n+            \"  {\\n\"\n+            \"    \\\"height\\\": xxxx,         (numeric) height of the chain tip\\n\"\n+            \"    \\\"hash\\\": \\\"xxxx\\\",         (string) block hash of the tip\\n\"\n+            \"    \\\"branchlen\\\": 0          (numeric) zero for main chain\\n\"\n+            \"  },\\n\"\n+            \"  {\\n\"\n+            \"    \\\"height\\\": xxxx,\\n\"\n+            \"    \\\"hash\\\": \\\"xxxx\\\",\\n\"\n+            \"    \\\"branchlen\\\": 1          (numeric) length of branch connecting the tip to the main chain\\n\"\n+            \"  }\\n\"\n+            \"]\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getchaintips\", \"\")\n+            + HelpExampleRpc(\"getchaintips\", \"\")\n+        );\n+\n+    /* Build up a list of chain tips.  We start with the list of all\n+       known blocks, and successively remove blocks that appear as pprev\n+       of another block.  */\n+    std::set<const CBlockIndex*, CompareBlocksByHeight> setTips;\n+    BOOST_FOREACH(const PAIRTYPE(const uint256, CBlockIndex*)& item, mapBlockIndex)\n+        setTips.insert(item.second);\n+    BOOST_FOREACH(const PAIRTYPE(const uint256, CBlockIndex*)& item, mapBlockIndex)\n+    {\n+        const CBlockIndex* pprev = item.second->pprev;\n+        if (pprev)\n+            setTips.erase(pprev);\n+    }\n+\n+    /* Construct the output array.  */\n+    Array res;\n+    BOOST_FOREACH(const CBlockIndex* block, setTips)\n+    {\n+        Object obj;\n+        obj.push_back(Pair(\"height\", block->nHeight));\n+        obj.push_back(Pair(\"hash\", block->phashBlock->GetHex()));\n+\n+        const int branchLen = block->nHeight - chainActive.FindFork(block)->nHeight;\n+        obj.push_back(Pair(\"branchlen\", branchLen));\n+\n+        res.push_back(obj);\n+    }\n+\n+    return res;\n+}"
      },
      {
        "sha": "716a7fba6a4b55a336181e3e5eddf1801523c139",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b33bd7a3be1cbcc8d255178307976b7762125b18/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b33bd7a3be1cbcc8d255178307976b7762125b18/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=b33bd7a3be1cbcc8d255178307976b7762125b18",
        "patch": "@@ -235,6 +235,7 @@ static const CRPCCommand vRPCCommands[] =\n     { \"getblockcount\",          &getblockcount,          true,      false,      false },\n     { \"getblock\",               &getblock,               true,      false,      false },\n     { \"getblockhash\",           &getblockhash,           true,      false,      false },\n+    { \"getchaintips\",           &getchaintips,           true,      false,      false },\n     { \"getdifficulty\",          &getdifficulty,          true,      false,      false },\n     { \"getrawmempool\",          &getrawmempool,          true,      false,      false },\n     { \"gettxout\",               &gettxout,               true,      false,      false },"
      },
      {
        "sha": "176852ca8fc3e520b8922e417184dbd492b3f43a",
        "filename": "src/rpcserver.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b33bd7a3be1cbcc8d255178307976b7762125b18/src/rpcserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b33bd7a3be1cbcc8d255178307976b7762125b18/src/rpcserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.h?ref=b33bd7a3be1cbcc8d255178307976b7762125b18",
        "patch": "@@ -205,5 +205,6 @@ extern json_spirit::Value getblock(const json_spirit::Array& params, bool fHelp)\n extern json_spirit::Value gettxoutsetinfo(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value gettxout(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value verifychain(const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value getchaintips(const json_spirit::Array& params, bool fHelp);\n \n #endif"
      }
    ]
  }
]