domob1812,2014-07-15T15:52:13Z,"Of course, the name of the RPC call is up for discussion - maybe ""getchaintips"" is better, or ""getblockchainheads"" or something like that.  For now, I just used the original name.  This command has been included (and tested) so far in Huntercoin, Namecoin and Motocoin.\n",https://github.com/bitcoin/bitcoin/pull/4536#issuecomment-49052524,49052524,
petertodd,2014-07-15T16:38:22Z,"""getchaintips"" seems more intuitive to me; I've wanted this feature before myself.\n",https://github.com/bitcoin/bitcoin/pull/4536#issuecomment-49058944,49058944,
sipa,2014-07-15T17:20:25Z,"Just iterate over the mapBlockIndex entries, removing the ones that are the pprev of another mapBlockIndex entry.\n",https://github.com/bitcoin/bitcoin/pull/4536#issuecomment-49064432,49064432,
jgarzik,2014-07-15T17:28:08Z,ACK concept + @sipa suggestion\n,https://github.com/bitcoin/bitcoin/pull/4536#issuecomment-49065331,49065331,
domob1812,2014-07-15T17:38:11Z,"Thanks for the input - I'll try to incorporate everything and update the pull request.  I wanted to know if there's interest in this feature at all first, and I'm glad that there is. :)\n",https://github.com/bitcoin/bitcoin/pull/4536#issuecomment-49066562,49066562,
sipa,2014-07-15T17:39:35Z,"Yes, no problem with such an RPC.\n",https://github.com/bitcoin/bitcoin/pull/4536#issuecomment-49066721,49066721,
gavinandresen,2014-07-15T17:46:48Z,Also: a regression test that exercises this new RPC call would be spiffy (see qa/rpc-tests/ for examples).\n,https://github.com/bitcoin/bitcoin/pull/4536#issuecomment-49067638,49067638,
domob1812,2014-07-16T19:46:21Z,"I've now updated the code and help text.  What do you think about it?  @sipa, is this the algorithm you had in mind?  I'll also build a new unit test for the call, possibly tomorrow.\n",https://github.com/bitcoin/bitcoin/pull/4536#issuecomment-49216784,49216784,
domob1812,2014-07-17T05:34:05Z,"@TheBlueMatt: Not sure why the test failed - the log shows no conclusive error message (but I haven't got any experience with your script so far), and it builds perfectly fine for me on GNU/Linux (after a `make distclean`).  Also `make check` works fine.  Any hints?\n",https://github.com/bitcoin/bitcoin/pull/4536#issuecomment-49260115,49260115,
jgarzik,2014-07-17T06:04:39Z,Currently pulltester is broken.\n,https://github.com/bitcoin/bitcoin/pull/4536#issuecomment-49261542,49261542,
domob1812,2014-07-18T08:46:02Z,"Basic regtest added.  Since the test framework chain doesn't contain orphans, it only checks that the ""isbest:true"" result is as expected.  Ok?\n",https://github.com/bitcoin/bitcoin/pull/4536#issuecomment-49408556,49408556,
laanwj,2014-07-18T09:15:39Z,"Useful information, ACK on concept.\n",https://github.com/bitcoin/bitcoin/pull/4536#issuecomment-49411017,49411017,
domob1812,2014-07-21T09:54:08Z,"I've now updated the whitespace and replaced the ""branch"" output in the JSON result with ""branchlen"", according to the last feedback.  Should I provide a quashed commit, or is the series of commits also fine?\n",https://github.com/bitcoin/bitcoin/pull/4536#issuecomment-49588339,49588339,
laanwj,2014-07-21T09:56:41Z,"A series of commits is fine if the commits are distinct changes, or a logical sequence of changes.\n\nIn this case I'd suggest squashing as all of the changes apply to the same code.\n",https://github.com/bitcoin/bitcoin/pull/4536#issuecomment-49588558,49588558,
domob1812,2014-07-21T11:02:55Z,Squashed commit of the last version.\n,https://github.com/bitcoin/bitcoin/pull/4536#issuecomment-49593111,49593111,
sipa,2014-07-27T14:51:25Z,"I think the implementation can be made more efficient by using sets/maps of CBlockIndex\* entries rather than uint256's. (it means you don't need a find in the comparator, and the data structures are 4 or 8 times smaller).\n",https://github.com/bitcoin/bitcoin/pull/4536#issuecomment-50266328,50266328,
domob1812,2014-07-29T17:05:04Z,"Indeed, very good observations!  I've updated the patch now.  Let me know if it is ok like this, then I will again provide a squashed commit instead.\n",https://github.com/bitcoin/bitcoin/pull/4536#issuecomment-50506289,50506289,
sipa,2014-08-03T10:40:33Z,Tested ACK. Works nicely.\n,https://github.com/bitcoin/bitcoin/pull/4536#issuecomment-50987210,50987210,
sipa,2014-08-03T10:40:54Z,"Please squash you commits, though.\n",https://github.com/bitcoin/bitcoin/pull/4536#issuecomment-50987217,50987217,
laanwj,2014-08-03T12:09:07Z,Another tested ACK (after squashing commits)\n,https://github.com/bitcoin/bitcoin/pull/4536#issuecomment-50988877,50988877,
domob1812,2014-08-03T16:14:26Z,Thanks for the review - I've updated the branch to a single squashed commit.\n,https://github.com/bitcoin/bitcoin/pull/4536#issuecomment-50994589,50994589,
BitcoinPullTester,2014-08-03T16:27:49Z,"Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/p4536_b33bd7a3be1cbcc8d255178307976b7762125b18/ for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-te",https://github.com/bitcoin/bitcoin/pull/4536#issuecomment-50994976,50994976,
gavinandresen,2014-07-15T17:34:26Z,"""Returns status"" is not very helpful. More detail on what information is returned, please.\n",https://github.com/bitcoin/bitcoin/pull/4536#discussion_r14950166,14950166,src/rpcblockchain.cpp
domob1812,2014-07-15T17:37:32Z,"This was just meant as a ""place-holder"" for now.  I will extend the help text, also including example output (similar to other help texts).\n",https://github.com/bitcoin/bitcoin/pull/4536#discussion_r14950340,14950340,src/rpcblockchain.cpp
gavinandresen,2014-07-15T17:41:43Z,branch_len should be branchlength to be consistent with other RPC results (e.g. see getblockchaininfo or getblocktemplate).\n,https://github.com/bitcoin/bitcoin/pull/4536#discussion_r14950608,14950608,src/rpcblockchain.cpp
gavinandresen,2014-07-15T17:43:57Z,"Convention for RPC results is to not sometimes return a field and sometimes not.\n\nSo returning an empty branch Array here would be better.\n\nIs branch_len always the length of the branch array? If yes, then it is redundant and should be removed.\n",https://github.com/bitcoin/bitcoin/pull/4536#discussion_r14950763,14950763,src/rpcblockchain.cpp
domob1812,2014-07-15T17:47:23Z,"Ok.  Yes, it is always the length - I included it originally for convenience when reading the data manually in a terminal or something.  But I can remove it, as it is indeed redundant.  I realise there are in general a lot of rough edges in the patch, I'll update it tomorrow to a hopefully cleaner one.\n",https://github.com/bitcoin/bitcoin/pull/4536#discussion_r14950996,14950996,src/rpcblockchain.cpp
laanwj,2014-07-18T09:10:15Z,"As the command is not marked as `threadSafe` in the RPC command table, acquiring any locks is redundant.\n",https://github.com/bitcoin/bitcoin/pull/4536#discussion_r15102172,15102172,src/rpcblockchain.cpp
laanwj,2014-07-18T09:14:45Z,I'd prefer throwing a JSONRPCError when unexpected things happen in this function instead of asserting.\n,https://github.com/bitcoin/bitcoin/pull/4536#discussion_r15102297,15102297,src/rpcblockchain.cpp
domob1812,2014-07-18T09:18:23Z,I see.  So just removing the LOCK in the call is fine?\n,https://github.com/bitcoin/bitcoin/pull/4536#discussion_r15102425,15102425,src/rpcblockchain.cpp
domob1812,2014-07-18T09:19:29Z,"This assert should never really happen, and it shouldn't be possible to trigger it by invalid user input or something like that.  For me, this is precisely a situation where one wants to assert().  But if it is more in line with Bitcoin Core philosophy to throw a JSONRPCError, I can, of course, do that.\n",https://github.com/bitcoin/bitcoin/pull/4536#discussion_r15102465,15102465,src/rpcblockchain.cpp
laanwj,2014-07-18T09:33:25Z,Yes. The calling code acquires the cs_main lock and cs_wallet locks if that bit is not set.\n,https://github.com/bitcoin/bitcoin/pull/4536#discussion_r15103016,15103016,src/rpcblockchain.cpp
laanwj,2014-07-18T09:37:19Z,Well - fine with me to keep it as assert in that case.\n,https://github.com/bitcoin/bitcoin/pull/4536#discussion_r15103153,15103153,src/rpcblockchain.cpp
sipa,2014-07-18T20:04:42Z,Coding style nit: no space before ()\n,https://github.com/bitcoin/bitcoin/pull/4536#discussion_r15130818,15130818,src/rpcblockchain.cpp
sipa,2014-07-18T20:06:01Z,Agree on using an assert.\n,https://github.com/bitcoin/bitcoin/pull/4536#discussion_r15130878,15130878,src/rpcblockchain.cpp
sipa,2014-07-18T20:08:35Z,This wasn't clear to me from the documentation. How about just include the length of the branch (how many blocks are not in the main chain)? You can always find the actual chain through getblock -> prev.\n,https://github.com/bitcoin/bitcoin/pull/4536#discussion_r15131001,15131001,src/rpcblockchain.cpp
domob1812,2014-07-19T11:36:33Z,"I see.  I'm used to GNU projects and tried to adapt my style to the surrounding code, but it seemed not to have worked 100%.  I can, of course, change this if it matters.  Should I?\n",https://github.com/bitcoin/bitcoin/pull/4536#discussion_r15143250,15143250,src/rpcblockchain.cpp
domob1812,2014-07-19T11:37:53Z,"That's true, but my original motivation was to include the information already here because it makes life easier.  If you want the branch, you don't have to use repeated ""getblock"" calls.  It doesn't hurt much to have that here instead of the length, IMHO.  But if you prefer the length, I will change it of course.\n",https://github.com/bitcoin/bitcoin/pull/4536#discussion_r15143256,15143256,src/rpcblockchain.cpp
Diapolo,2014-07-21T13:16:21Z,"If it should not happen in any way, why is it there ;)?\n",https://github.com/bitcoin/bitcoin/pull/4536#discussion_r15167431,15167431,src/rpcblockchain.cpp
sipa,2014-07-27T14:53:08Z,You can use pcur->nHeight - chainActive.FindFork(pcur)->nHeight; instead of this loop (which uses the recently added CBlockIndex\* skiplist).\n,https://github.com/bitcoin/bitcoin/pull/4536#discussion_r15439651,15439651,src/rpcblockchain.cpp
sipa,2014-07-29T23:54:33Z,No need for the find/erase. Just `setTips.erase(pprev)`.\n,https://github.com/bitcoin/bitcoin/pull/4536#discussion_r15560335,15560335,src/rpcblockchain.cpp
sipa,2014-07-29T23:55:49Z,Does this work? This will compare two blocks equal if they're of equal height. I'm not sure how std::sort behaves when the comparator and the equality operator are inconsistent.\n,https://github.com/bitcoin/bitcoin/pull/4536#discussion_r15560369,15560369,src/rpcblockchain.cpp
sipa,2014-07-29T23:57:32Z,"If you make the comparator support multiple blocks at the same height, you could just use that comparator directly as internal sort for setTips, so you don't need the vector or the explicity sort, and can just iterate through setTips (use BOOST_FOREACH, btw).\n",https://github.com/bitcoin/bitcoin/pull/4536#discussion_r15560427,15560427,src/rpcblockchain.cpp
sipa,2014-07-30T00:02:59Z,"The name 'isbest' may be obvious now, but if #4468 would get merged, we may end up with multiple header tips that all descend from the current chainActive (while we're catching up).\n\nI'm not sure how to deal with this, but something branchlen essentially conveys this information already (maybe a better name is 'reorg_distance' or 'fork_distance', or replace it with 'fork_height'?) - if it's 0, i",https://github.com/bitcoin/bitcoin/pull/4536#discussion_r15560597,15560597,src/rpcblockchain.cpp
domob1812,2014-07-30T04:56:50Z,"I think that the STL doesn't use the '==' at all in sort, it considers elements to be the same if neither ""a < b"" nor ""b < a"".  But I can't guarantee that it keeps two ""equal"" elements by themselves, rather than copying one of them two times - I believe not, but I'll change the code to include ordering of the pointers as a secondary criterion to be safe.\n",https://github.com/bitcoin/bitcoin/pull/4536#discussion_r15566598,15566598,src/rpcblockchain.cpp
domob1812,2014-07-30T04:58:57Z,"Yes, that is a good idea!\n\nI don't really like BOOST_FOREACH personally, but I guess this is how the existing code does it - so I'll change this, too.\n",https://github.com/bitcoin/bitcoin/pull/4536#discussion_r15566624,15566624,src/rpcblockchain.cpp
domob1812,2014-07-30T05:01:16Z,"Yes, branchlen==0 is equivalent to isbest.  So if you prefer, we can drop the ""isbest"" field and just have ""branchlen"".  The name was suggested by Gavin, IIRC, but I can change it to ""fork_distance"" if that is clearer?\n",https://github.com/bitcoin/bitcoin/pull/4536#discussion_r15566646,15566646,src/rpcblockchain.cpp
