hebasto,2021-05-21 08:39:34,"Updated 5efec949265fd2a04f131a2a454ec984b033eb66 -> 8c277b19c8f262e550cffe263e6d910b687ac882 ([pr22014.01](https://github.com/hebasto/bitcoin/commits/pr22014.01) -> [pr22014.02](https://github.com/hebasto/bitcoin/commits/pr22014.02), [diff](https://github.com/hebasto/bitcoin/compare/pr22014.01..pr22014.02)):\n\n- addressed @MarcoFalke's [comment](https://github.com/bitcoin/bitcoin/pull/22014#dis",https://github.com/bitcoin/bitcoin/pull/22014#issuecomment-845784457,845784457,
DrahtBot,2021-05-26 06:05:31,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#10443](https://github.com/bitcoin/bitcoin/pull/10443) (Add fee_est tool for debugging fee estimation code by ryanofsky)\",https://github.com/bitcoin/bitcoin/pull/22014#issuecomment-848487447,848487447,
MarcoFalke,2021-05-21 08:27:49,"```suggestion\n    bool _removeTx(const uint256& hash, bool inBlock)\n```\n\nAccording to similar methods:\n\n```cpp\n    void _RelayTransaction(const uint256& txid, const uint256& wtxid)\n        EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n```\n\n",https://github.com/bitcoin/bitcoin/pull/22014#discussion_r636735149,636735149,src/policy/fees.h
hebasto,2021-05-21 08:40:46,Thanks! It's great to have a common approach for such a naming case. [Updated](https://github.com/bitcoin/bitcoin/pull/22014#issuecomment-845784457).,https://github.com/bitcoin/bitcoin/pull/22014#discussion_r636743592,636743592,src/policy/fees.h
amadeuszpawlik,2021-05-21 13:30:08,Is this assert needed? The same assertion is done in `_removeTx` on the line below,https://github.com/bitcoin/bitcoin/pull/22014#discussion_r636920180,636920180,src/policy/fees.cpp
hebasto,2021-05-21 14:42:59,"Technically, it is no needed.\n\nThere are two reasons for that:\n- if somehow annotation `EXCLUSIVE_LOCKS_REQUIRED(m_cs_fee_estimator)` will disappear (e.g., human fault) from the function declaration, the `AssertLockHeld(m_cs_fee_estimator)` will emit the `-Wthread-safety-analysis` warning\n- the code below could be changed in the future, but `AssertLockHeld` in the first line will guard thr",https://github.com/bitcoin/bitcoin/pull/22014#discussion_r636976515,636976515,src/policy/fees.cpp
MarcoFalke,2021-10-26 16:07:39,"why is it not thread safe when it requires the caller to acquire the lock?\n\nedit: Just a nit, so feel free to ignore.",https://github.com/bitcoin/bitcoin/pull/22014#discussion_r736703550,736703550,src/policy/fees.h
hebasto,2021-10-27 05:50:17,">  ... it requires the caller to acquire the lock\n\n`EXCLUSIVE_LOCKS_REQUIRED` just produces a warning with clang only. Or do you mean an `AssertLockHeld` macro in the function body?\n\nFrom my understanding, every function which requires external locking is not thread safe internally.\n\nAnyway, what are you suggesting: to drop the comment or improve it? If the latter, how?",https://github.com/bitcoin/bitcoin/pull/22014#discussion_r737126093,737126093,src/policy/fees.h
