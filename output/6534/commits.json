[
  {
    "sha": "605433ffb531ba4b3c20146edf4673ed8dbc3fad",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MDU0MzNmZmI1MzFiYTRiM2MyMDE0NmVkZjQ2NzNlZDhkYmMzZmFk",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-08-07T20:15:38Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-08-07T20:17:57Z"
      },
      "message": "locks: don't lock cs_wallet before making rpc calls",
      "tree": {
        "sha": "2c46d5b41cd6208b51b71a18a4fba83dc80816eb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2c46d5b41cd6208b51b71a18a4fba83dc80816eb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/605433ffb531ba4b3c20146edf4673ed8dbc3fad",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/605433ffb531ba4b3c20146edf4673ed8dbc3fad",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/605433ffb531ba4b3c20146edf4673ed8dbc3fad",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/605433ffb531ba4b3c20146edf4673ed8dbc3fad/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c0f66ce44abdc44ddbff892720d5b85f6a95436d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c0f66ce44abdc44ddbff892720d5b85f6a95436d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c0f66ce44abdc44ddbff892720d5b85f6a95436d"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 20,
      "deletions": 19
    },
    "files": [
      {
        "sha": "52f41be8aec02e4b87a4d78fc961ff47bfced435",
        "filename": "src/test/rpc_wallet_tests.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 19,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/605433ffb531ba4b3c20146edf4673ed8dbc3fad/src/test/rpc_wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/605433ffb531ba4b3c20146edf4673ed8dbc3fad/src/test/rpc_wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_wallet_tests.cpp?ref=605433ffb531ba4b3c20146edf4673ed8dbc3fad",
        "patch": "@@ -27,8 +27,6 @@ BOOST_FIXTURE_TEST_SUITE(rpc_wallet_tests, TestingSetup)\n \n BOOST_AUTO_TEST_CASE(rpc_addmultisig)\n {\n-    LOCK(pwalletMain->cs_wallet);\n-\n     rpcfn_type addmultisig = tableRPC[\"addmultisigaddress\"]->actor;\n \n     // old, 65-byte-long:\n@@ -68,25 +66,28 @@ BOOST_AUTO_TEST_CASE(rpc_wallet)\n {\n     // Test RPC calls for various wallet statistics\n     UniValue r;\n-\n-    LOCK2(cs_main, pwalletMain->cs_wallet);\n-\n-    CPubKey demoPubkey = pwalletMain->GenerateNewKey();\n-    CBitcoinAddress demoAddress = CBitcoinAddress(CTxDestination(demoPubkey.GetID()));\n+    CPubKey demoPubkey;\n+    CBitcoinAddress demoAddress;\n     UniValue retValue;\n     string strAccount = \"walletDemoAccount\";\n-    string strPurpose = \"receive\";\n-    BOOST_CHECK_NO_THROW({ /*Initialize Wallet with an account */\n-        CWalletDB walletdb(pwalletMain->strWalletFile);\n-        CAccount account;\n-        account.vchPubKey = demoPubkey;\n-        pwalletMain->SetAddressBook(account.vchPubKey.GetID(), strAccount, strPurpose);\n-        walletdb.WriteAccount(strAccount, account);\n-    });\n-\n-    CPubKey setaccountDemoPubkey = pwalletMain->GenerateNewKey();\n-    CBitcoinAddress setaccountDemoAddress = CBitcoinAddress(CTxDestination(setaccountDemoPubkey.GetID()));\n-\n+    CBitcoinAddress setaccountDemoAddress;\n+    {\n+        LOCK(pwalletMain->cs_wallet);\n+\n+        demoPubkey = pwalletMain->GenerateNewKey();\n+        demoAddress = CBitcoinAddress(CTxDestination(demoPubkey.GetID()));\n+        string strPurpose = \"receive\";\n+        BOOST_CHECK_NO_THROW({ /*Initialize Wallet with an account */\n+            CWalletDB walletdb(pwalletMain->strWalletFile);\n+            CAccount account;\n+            account.vchPubKey = demoPubkey;\n+            pwalletMain->SetAddressBook(account.vchPubKey.GetID(), strAccount, strPurpose);\n+            walletdb.WriteAccount(strAccount, account);\n+        });\n+\n+        CPubKey setaccountDemoPubkey = pwalletMain->GenerateNewKey();\n+        setaccountDemoAddress = CBitcoinAddress(CTxDestination(setaccountDemoPubkey.GetID()));\n+    }\n     /*********************************\n      * \t\t\tsetaccount\n      *********************************/"
      }
    ]
  },
  {
    "sha": "9493803f4a60a234c2712bba000a6b9c93ffba94",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NDkzODAzZjRhNjBhMjM0YzI3MTJiYmEwMDBhNmI5YzkzZmZiYTk0",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-08-07T20:18:16Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-08-07T20:18:16Z"
      },
      "message": "Revert \"Revert \"Assert on probable deadlocks if the second lock isnt try_lock\"\"\n\nThis reverts commit a4fe57da6207c1e5691a1e843d22db571f3f0186.\n\nThe issue here should be fixed by the previous commit.",
      "tree": {
        "sha": "550b3e569b942e41af08eb443f5c6516154bc80c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/550b3e569b942e41af08eb443f5c6516154bc80c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9493803f4a60a234c2712bba000a6b9c93ffba94",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9493803f4a60a234c2712bba000a6b9c93ffba94",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9493803f4a60a234c2712bba000a6b9c93ffba94",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9493803f4a60a234c2712bba000a6b9c93ffba94/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "605433ffb531ba4b3c20146edf4673ed8dbc3fad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/605433ffb531ba4b3c20146edf4673ed8dbc3fad",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/605433ffb531ba4b3c20146edf4673ed8dbc3fad"
      }
    ],
    "stats": {
      "total": 49,
      "additions": 39,
      "deletions": 10
    },
    "files": [
      {
        "sha": "1837e8d53ddb12ff01f3edec7ba88224a152f1c0",
        "filename": "src/sync.cpp",
        "status": "modified",
        "additions": 39,
        "deletions": 10,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9493803f4a60a234c2712bba000a6b9c93ffba94/src/sync.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9493803f4a60a234c2712bba000a6b9c93ffba94/src/sync.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.cpp?ref=9493803f4a60a234c2712bba000a6b9c93ffba94",
        "patch": "@@ -33,20 +33,22 @@ void PrintLockContention(const char* pszName, const char* pszFile, int nLine)\n //\n \n struct CLockLocation {\n-    CLockLocation(const char* pszName, const char* pszFile, int nLine)\n+    CLockLocation(const char* pszName, const char* pszFile, int nLine, bool fTryIn)\n     {\n         mutexName = pszName;\n         sourceFile = pszFile;\n         sourceLine = nLine;\n+        fTry = fTryIn;\n     }\n \n     std::string ToString() const\n     {\n-        return mutexName + \"  \" + sourceFile + \":\" + itostr(sourceLine);\n+        return mutexName + \"  \" + sourceFile + \":\" + itostr(sourceLine) + (fTry ? \" (TRY)\" : \"\");\n     }\n \n     std::string MutexName() const { return mutexName; }\n \n+    bool fTry;\n private:\n     std::string mutexName;\n     std::string sourceFile;\n@@ -62,23 +64,52 @@ static boost::thread_specific_ptr<LockStack> lockstack;\n \n static void potential_deadlock_detected(const std::pair<void*, void*>& mismatch, const LockStack& s1, const LockStack& s2)\n {\n+    // We attempt to not assert on probably-not deadlocks by assuming that\n+    // a try lock will immediately have otherwise bailed if it had\n+    // failed to get the lock\n+    // We do this by, for the locks which triggered the potential deadlock,\n+    // in either lockorder, checking that the second of the two which is locked\n+    // is only a TRY_LOCK, ignoring locks if they are reentrant.\n+    bool firstLocked = false;\n+    bool secondLocked = false;\n+    bool onlyMaybeDeadlock = false;\n+\n     LogPrintf(\"POTENTIAL DEADLOCK DETECTED\\n\");\n     LogPrintf(\"Previous lock order was:\\n\");\n     BOOST_FOREACH (const PAIRTYPE(void*, CLockLocation) & i, s2) {\n-        if (i.first == mismatch.first)\n+        if (i.first == mismatch.first) {\n             LogPrintf(\" (1)\");\n-        if (i.first == mismatch.second)\n+            if (!firstLocked && secondLocked && i.second.fTry)\n+                onlyMaybeDeadlock = true;\n+            firstLocked = true;\n+        }\n+        if (i.first == mismatch.second) {\n             LogPrintf(\" (2)\");\n+            if (!secondLocked && firstLocked && i.second.fTry)\n+                onlyMaybeDeadlock = true;\n+            secondLocked = true;\n+        }\n         LogPrintf(\" %s\\n\", i.second.ToString());\n     }\n+    firstLocked = false;\n+    secondLocked = false;\n     LogPrintf(\"Current lock order is:\\n\");\n     BOOST_FOREACH (const PAIRTYPE(void*, CLockLocation) & i, s1) {\n-        if (i.first == mismatch.first)\n+        if (i.first == mismatch.first) {\n             LogPrintf(\" (1)\");\n-        if (i.first == mismatch.second)\n+            if (!firstLocked && secondLocked && i.second.fTry)\n+                onlyMaybeDeadlock = true;\n+            firstLocked = true;\n+        }\n+        if (i.first == mismatch.second) {\n             LogPrintf(\" (2)\");\n+            if (!secondLocked && firstLocked && i.second.fTry)\n+                onlyMaybeDeadlock = true;\n+            secondLocked = true;\n+        }\n         LogPrintf(\" %s\\n\", i.second.ToString());\n     }\n+    assert(onlyMaybeDeadlock);\n }\n \n static void push_lock(void* c, const CLockLocation& locklocation, bool fTry)\n@@ -101,10 +132,8 @@ static void push_lock(void* c, const CLockLocation& locklocation, bool fTry)\n             lockorders[p1] = (*lockstack);\n \n             std::pair<void*, void*> p2 = std::make_pair(c, i.first);\n-            if (lockorders.count(p2)) {\n+            if (lockorders.count(p2))\n                 potential_deadlock_detected(p1, lockorders[p2], lockorders[p1]);\n-                break;\n-            }\n         }\n     }\n     dd_mutex.unlock();\n@@ -119,7 +148,7 @@ static void pop_lock()\n \n void EnterCritical(const char* pszName, const char* pszFile, int nLine, void* cs, bool fTry)\n {\n-    push_lock(cs, CLockLocation(pszName, pszFile, nLine), fTry);\n+    push_lock(cs, CLockLocation(pszName, pszFile, nLine, fTry), fTry);\n }\n \n void LeaveCritical()"
      }
    ]
  }
]