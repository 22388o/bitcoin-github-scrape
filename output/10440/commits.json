[
  {
    "sha": "f3ba86973428d7442bf95713890be6185bc40dd0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmM2JhODY5NzM0MjhkNzQ0MmJmOTU3MTM4OTBiZTYxODViYzQwZGQw",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-05-22T11:55:42Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-05-22T15:21:38Z"
      },
      "message": "[tests] Add libFuzzer support.\n\nSee http://llvm.org/docs/LibFuzzer.html#fuzzer-usage for usage instructions.",
      "tree": {
        "sha": "bf2c72c45518ecdd640d3729c01ea5ff60341f29",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bf2c72c45518ecdd640d3729c01ea5ff60341f29"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f3ba86973428d7442bf95713890be6185bc40dd0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f3ba86973428d7442bf95713890be6185bc40dd0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f3ba86973428d7442bf95713890be6185bc40dd0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f3ba86973428d7442bf95713890be6185bc40dd0/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "217b416c727aaaaad939203b845a96fd638ded1e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/217b416c727aaaaad939203b845a96fd638ded1e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/217b416c727aaaaad939203b845a96fd638ded1e"
      }
    ],
    "stats": {
      "total": 50,
      "additions": 39,
      "deletions": 11
    },
    "files": [
      {
        "sha": "1fe9fe9034f2e72049903f5d60f705896af63a63",
        "filename": "src/test/test_bitcoin_fuzzy.cpp",
        "status": "modified",
        "additions": 39,
        "deletions": 11,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3ba86973428d7442bf95713890be6185bc40dd0/src/test/test_bitcoin_fuzzy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3ba86973428d7442bf95713890be6185bc40dd0/src/test/test_bitcoin_fuzzy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin_fuzzy.cpp?ref=f3ba86973428d7442bf95713890be6185bc40dd0",
        "patch": "@@ -48,8 +48,8 @@ enum TEST_ID {\n     TEST_ID_END\n };\n \n-bool read_stdin(std::vector<char> &data) {\n-    char buffer[1024];\n+bool read_stdin(std::vector<uint8_t> &data) {\n+    uint8_t buffer[1024];\n     ssize_t length=0;\n     while((length = read(STDIN_FILENO, buffer, 1024)) > 0) {\n         data.insert(data.end(), buffer, buffer+length);\n@@ -59,11 +59,7 @@ bool read_stdin(std::vector<char> &data) {\n     return length==0;\n }\n \n-int do_fuzz()\n-{\n-    std::vector<char> buffer;\n-    if (!read_stdin(buffer)) return 0;\n-\n+int test_one_input(std::vector<uint8_t> buffer) {\n     if (buffer.size() < sizeof(uint32_t)) return 0;\n \n     uint32_t test_id = 0xffffffff;\n@@ -255,9 +251,32 @@ int do_fuzz()\n     return 0;\n }\n \n+static std::unique_ptr<ECCVerifyHandle> globalVerifyHandle;\n+void initialize() {\n+    globalVerifyHandle = std::unique_ptr<ECCVerifyHandle>(new ECCVerifyHandle());\n+}\n+\n+// This function is used by libFuzzer\n+extern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\n+    test_one_input(std::vector<uint8_t>(data, data + size));\n+    return 0;\n+}\n+\n+// This function is used by libFuzzer\n+extern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\n+    initialize();\n+    return 0;\n+}\n+\n+// Disabled under WIN32 due to clash with Cygwin's WinMain.\n+#ifndef WIN32\n+// Declare main(...) \"weak\" to allow for libFuzzer linking. libFuzzer provides\n+// the main(...) function.\n+__attribute__((weak))\n+#endif\n int main(int argc, char **argv)\n {\n-    ECCVerifyHandle globalVerifyHandle;\n+    initialize();\n #ifdef __AFL_INIT\n     // Enable AFL deferred forkserver mode. Requires compilation using\n     // afl-clang-fast++. See fuzzing.md for details.\n@@ -267,11 +286,20 @@ int main(int argc, char **argv)\n #ifdef __AFL_LOOP\n     // Enable AFL persistent mode. Requires compilation using afl-clang-fast++.\n     // See fuzzing.md for details.\n+    int ret = 0;\n     while (__AFL_LOOP(1000)) {\n-        do_fuzz();\n+        std::vector<uint8_t> buffer;\n+        if (!read_stdin(buffer)) {\n+            continue;\n+        }\n+        ret = test_one_input(buffer);\n     }\n-    return 0;\n+    return ret;\n #else\n-    return do_fuzz();\n+    std::vector<uint8_t> buffer;\n+    if (!read_stdin(buffer)) {\n+        return 0;\n+    }\n+    return test_one_input(buffer);\n #endif\n }"
      }
    ]
  }
]