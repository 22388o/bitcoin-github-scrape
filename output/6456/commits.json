[
  {
    "sha": "e061e2778d592826970483e0844308c4e9a12626",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMDYxZTI3NzhkNTkyODI2OTcwNDgzZTA4NDQzMDhjNGU5YTEyNjI2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-18T05:42:23Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-18T07:03:59Z"
      },
      "message": "rpc: Make ValueFromAmount always return 8 decimals\n\nThis is the format that was always returned to JSON clients.\nThe difference was not noticed before, because VREAL values\nare post-processed by univalue.\n\nBy implementing the functionality directly it breaks the dependency\nof rpcserver on utilmoneystr. FormatMoney is now only used for debugging\npurposes.\n\nTo test, port over the formatting tests from util_tests.cpp to\nrpc_tests.cpp.",
      "tree": {
        "sha": "9ef8f2de0cd1fb78a22675c24fa26d751117daae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9ef8f2de0cd1fb78a22675c24fa26d751117daae"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e061e2778d592826970483e0844308c4e9a12626",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e061e2778d592826970483e0844308c4e9a12626",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e061e2778d592826970483e0844308c4e9a12626",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e061e2778d592826970483e0844308c4e9a12626/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dcc495e011ff09e54f7c8ddebfc5b73f084de1ea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dcc495e011ff09e54f7c8ddebfc5b73f084de1ea",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dcc495e011ff09e54f7c8ddebfc5b73f084de1ea"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 29,
      "deletions": 2
    },
    "files": [
      {
        "sha": "c5402e0dfae50caf394bb01e0e4d599a1213a268",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e061e2778d592826970483e0844308c4e9a12626/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e061e2778d592826970483e0844308c4e9a12626/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=e061e2778d592826970483e0844308c4e9a12626",
        "patch": "@@ -11,7 +11,6 @@\n #include \"sync.h\"\n #include \"ui_interface.h\"\n #include \"util.h\"\n-#include \"utilmoneystr.h\"\n #include \"utilstrencodings.h\"\n #ifdef ENABLE_WALLET\n #include \"wallet/wallet.h\"\n@@ -133,7 +132,12 @@ CAmount AmountFromValue(const UniValue& value)\n \n UniValue ValueFromAmount(const CAmount& amount)\n {\n-    return UniValue(UniValue::VREAL, FormatMoney(amount));\n+    bool sign = amount < 0;\n+    int64_t n_abs = (sign ? -amount : amount);\n+    int64_t quotient = n_abs / COIN;\n+    int64_t remainder = n_abs % COIN;\n+    return UniValue(UniValue::VNUM,\n+            strprintf(\"%s%d.%08d\", sign ? \"-\" : \"\", quotient, remainder));\n }\n \n uint256 ParseHashV(const UniValue& v, string strName)"
      },
      {
        "sha": "7946b02855d38837d04c9cec390abcf18aa86be8",
        "filename": "src/test/rpc_tests.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 0,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e061e2778d592826970483e0844308c4e9a12626/src/test/rpc_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e061e2778d592826970483e0844308c4e9a12626/src/test/rpc_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_tests.cpp?ref=e061e2778d592826970483e0844308c4e9a12626",
        "patch": "@@ -120,6 +120,29 @@ BOOST_AUTO_TEST_CASE(rpc_format_monetary_values)\n     BOOST_CHECK(ValueFromAmount(100000000LL).write() == \"1.00000000\");\n     BOOST_CHECK(ValueFromAmount(2099999999999990LL).write() == \"20999999.99999990\");\n     BOOST_CHECK(ValueFromAmount(2099999999999999LL).write() == \"20999999.99999999\");\n+\n+    BOOST_CHECK_EQUAL(ValueFromAmount(0).write(), \"0.00000000\");\n+    BOOST_CHECK_EQUAL(ValueFromAmount((COIN/10000)*123456789).write(), \"12345.67890000\");\n+    BOOST_CHECK_EQUAL(ValueFromAmount(-COIN).write(), \"-1.00000000\");\n+    BOOST_CHECK_EQUAL(ValueFromAmount(-COIN/10).write(), \"-0.10000000\");\n+\n+    BOOST_CHECK_EQUAL(ValueFromAmount(COIN*100000000).write(), \"100000000.00000000\");\n+    BOOST_CHECK_EQUAL(ValueFromAmount(COIN*10000000).write(), \"10000000.00000000\");\n+    BOOST_CHECK_EQUAL(ValueFromAmount(COIN*1000000).write(), \"1000000.00000000\");\n+    BOOST_CHECK_EQUAL(ValueFromAmount(COIN*100000).write(), \"100000.00000000\");\n+    BOOST_CHECK_EQUAL(ValueFromAmount(COIN*10000).write(), \"10000.00000000\");\n+    BOOST_CHECK_EQUAL(ValueFromAmount(COIN*1000).write(), \"1000.00000000\");\n+    BOOST_CHECK_EQUAL(ValueFromAmount(COIN*100).write(), \"100.00000000\");\n+    BOOST_CHECK_EQUAL(ValueFromAmount(COIN*10).write(), \"10.00000000\");\n+    BOOST_CHECK_EQUAL(ValueFromAmount(COIN).write(), \"1.00000000\");\n+    BOOST_CHECK_EQUAL(ValueFromAmount(COIN/10).write(), \"0.10000000\");\n+    BOOST_CHECK_EQUAL(ValueFromAmount(COIN/100).write(), \"0.01000000\");\n+    BOOST_CHECK_EQUAL(ValueFromAmount(COIN/1000).write(), \"0.00100000\");\n+    BOOST_CHECK_EQUAL(ValueFromAmount(COIN/10000).write(), \"0.00010000\");\n+    BOOST_CHECK_EQUAL(ValueFromAmount(COIN/100000).write(), \"0.00001000\");\n+    BOOST_CHECK_EQUAL(ValueFromAmount(COIN/1000000).write(), \"0.00000100\");\n+    BOOST_CHECK_EQUAL(ValueFromAmount(COIN/10000000).write(), \"0.00000010\");\n+    BOOST_CHECK_EQUAL(ValueFromAmount(COIN/100000000).write(), \"0.00000001\");\n }\n \n static UniValue ValueFromString(const std::string &str)"
      }
    ]
  },
  {
    "sha": "7650449a6777710cf818d41862626164da0cd412",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NjUwNDQ5YTY3Nzc3MTBjZjgxOGQ0MTg2MjYyNjE2NGRhMGNkNDEy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-18T05:44:19Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-18T07:04:18Z"
      },
      "message": "univalue: Avoid unnecessary roundtrip through double for numbers\n\nJSON makes no distinction between numbers and reals, and our code\ndoesn't need to do so either.\n\nThis removes VREAL, as well as its specific post-processing in\n`UniValue::write`. Non-monetary amounts do not need to be forcibly\nformatted with 8 decimals, so the extra roundtrip was unnecessary\n(and potentially loses precision).",
      "tree": {
        "sha": "ddb32fd03bd9df82961ea176810b50faba133a23",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ddb32fd03bd9df82961ea176810b50faba133a23"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7650449a6777710cf818d41862626164da0cd412",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7650449a6777710cf818d41862626164da0cd412",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7650449a6777710cf818d41862626164da0cd412",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7650449a6777710cf818d41862626164da0cd412/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e061e2778d592826970483e0844308c4e9a12626",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e061e2778d592826970483e0844308c4e9a12626",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e061e2778d592826970483e0844308c4e9a12626"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 9,
      "deletions": 17
    },
    "files": [
      {
        "sha": "b0cde7268e03cc9eb5a017d2ef89256462cb766e",
        "filename": "qa/rpc-tests/rest.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7650449a6777710cf818d41862626164da0cd412/qa/rpc-tests/rest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7650449a6777710cf818d41862626164da0cd412/qa/rpc-tests/rest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rest.py?ref=7650449a6777710cf818d41862626164da0cd412",
        "patch": "@@ -14,6 +14,7 @@\n import binascii\n import json\n import StringIO\n+import decimal\n \n try:\n     import http.client as httplib\n@@ -243,7 +244,7 @@ def run_test(self):\n         response_header_json = http_get_call(url.hostname, url.port, '/rest/headers/1/'+bb_hash+self.FORMAT_SEPARATOR+\"json\", \"\", True)\n         assert_equal(response_header_json.status, 200)\n         response_header_json_str = response_header_json.read()\n-        json_obj = json.loads(response_header_json_str)\n+        json_obj = json.loads(response_header_json_str, parse_float=decimal.Decimal)\n         assert_equal(len(json_obj), 1) #ensure that there is one header in the json response\n         assert_equal(json_obj[0]['hash'], bb_hash) #request/response hash should be the same\n "
      },
      {
        "sha": "201fc5eba83755953fc47b4fe1585bd54d8552fc",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7650449a6777710cf818d41862626164da0cd412/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7650449a6777710cf818d41862626164da0cd412/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=7650449a6777710cf818d41862626164da0cd412",
        "patch": "@@ -120,7 +120,7 @@ void RPCTypeCheckObj(const UniValue& o,\n \n CAmount AmountFromValue(const UniValue& value)\n {\n-    if (!value.isReal() && !value.isNum())\n+    if (!value.isNum())\n         throw JSONRPCError(RPC_TYPE_ERROR, \"Amount is not a number\");\n     CAmount amount;\n     if (!ParseFixedPoint(value.getValStr(), 8, &amount))"
      },
      {
        "sha": "67cb9b9623257c93018b5ce8feec7a3e6fa33b59",
        "filename": "src/test/univalue_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7650449a6777710cf818d41862626164da0cd412/src/test/univalue_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7650449a6777710cf818d41862626164da0cd412/src/test/univalue_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/univalue_tests.cpp?ref=7650449a6777710cf818d41862626164da0cd412",
        "patch": "@@ -49,7 +49,7 @@ BOOST_AUTO_TEST_CASE(univalue_constructor)\n \n     double vd = -7.21;\n     UniValue v7(vd);\n-    BOOST_CHECK(v7.isReal());\n+    BOOST_CHECK(v7.isNum());\n     BOOST_CHECK_EQUAL(v7.getValStr(), \"-7.21\");\n \n     string vs(\"yawn\");\n@@ -127,7 +127,7 @@ BOOST_AUTO_TEST_CASE(univalue_set)\n     BOOST_CHECK_EQUAL(v.getValStr(), \"zum\");\n \n     BOOST_CHECK(v.setFloat(-1.01));\n-    BOOST_CHECK(v.isReal());\n+    BOOST_CHECK(v.isNum());\n     BOOST_CHECK_EQUAL(v.getValStr(), \"-1.01\");\n \n     BOOST_CHECK(v.setInt((int)1023));\n@@ -272,7 +272,7 @@ BOOST_AUTO_TEST_CASE(univalue_object)\n     objTypes[\"distance\"] = UniValue::VNUM;\n     objTypes[\"time\"] = UniValue::VNUM;\n     objTypes[\"calories\"] = UniValue::VNUM;\n-    objTypes[\"temperature\"] = UniValue::VREAL;\n+    objTypes[\"temperature\"] = UniValue::VNUM;\n     objTypes[\"cat1\"] = UniValue::VNUM;\n     objTypes[\"cat2\"] = UniValue::VNUM;\n     BOOST_CHECK(obj.checkObject(objTypes));"
      },
      {
        "sha": "1d49a2cfc9e65680535e43a07b9dfdfb4cbf244a",
        "filename": "src/univalue/univalue.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7650449a6777710cf818d41862626164da0cd412/src/univalue/univalue.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7650449a6777710cf818d41862626164da0cd412/src/univalue/univalue.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/univalue.cpp?ref=7650449a6777710cf818d41862626164da0cd412",
        "patch": "@@ -86,7 +86,7 @@ bool UniValue::setFloat(double val)\n     oss << std::setprecision(16) << val;\n \n     bool ret = setNumStr(oss.str());\n-    typ = VREAL;\n+    typ = VNUM;\n     return ret;\n }\n \n@@ -210,7 +210,6 @@ const char *uvTypeName(UniValue::VType t)\n     case UniValue::VARR: return \"array\";\n     case UniValue::VSTR: return \"string\";\n     case UniValue::VNUM: return \"number\";\n-    case UniValue::VREAL: return \"number\";\n     }\n \n     // not reached\n@@ -280,7 +279,7 @@ int64_t UniValue::get_int64() const\n \n double UniValue::get_real() const\n {\n-    if (typ != VREAL && typ != VNUM)\n+    if (typ != VNUM)\n         throw std::runtime_error(\"JSON value is not a number as expected\");\n     double retval;\n     if (!ParseDouble(getValStr(), &retval))"
      },
      {
        "sha": "4742b56f3d566d50d7588b035f38fb886f762f2d",
        "filename": "src/univalue/univalue.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7650449a6777710cf818d41862626164da0cd412/src/univalue/univalue.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7650449a6777710cf818d41862626164da0cd412/src/univalue/univalue.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/univalue.h?ref=7650449a6777710cf818d41862626164da0cd412",
        "patch": "@@ -16,7 +16,7 @@\n \n class UniValue {\n public:\n-    enum VType { VNULL, VOBJ, VARR, VSTR, VNUM, VREAL, VBOOL, };\n+    enum VType { VNULL, VOBJ, VARR, VSTR, VNUM, VBOOL, };\n \n     UniValue() { typ = VNULL; }\n     UniValue(UniValue::VType initialType, const std::string& initialStr = \"\") {\n@@ -78,7 +78,6 @@ class UniValue {\n     bool isBool() const { return (typ == VBOOL); }\n     bool isStr() const { return (typ == VSTR); }\n     bool isNum() const { return (typ == VNUM); }\n-    bool isReal() const { return (typ == VREAL); }\n     bool isArray() const { return (typ == VARR); }\n     bool isObject() const { return (typ == VOBJ); }\n "
      },
      {
        "sha": "bce3997af77c404f563c2414ecc27ebf10e77171",
        "filename": "src/univalue/univalue_write.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 7,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7650449a6777710cf818d41862626164da0cd412/src/univalue/univalue_write.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7650449a6777710cf818d41862626164da0cd412/src/univalue/univalue_write.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/univalue_write.cpp?ref=7650449a6777710cf818d41862626164da0cd412",
        "patch": "@@ -61,13 +61,6 @@ string UniValue::write(unsigned int prettyIndent,\n     case VSTR:\n         s += \"\\\"\" + json_escape(val) + \"\\\"\";\n         break;\n-    case VREAL:\n-        {\n-            std::stringstream ss;\n-            ss << std::showpoint << std::fixed << std::setprecision(8) << get_real();\n-            s += ss.str();\n-        }\n-        break;\n     case VNUM:\n         s += val;\n         break;"
      }
    ]
  },
  {
    "sha": "ec249d4a1d572a17dd010464fe3ead532a8b1b70",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYzI0OWQ0YTFkNTcyYTE3ZGQwMTA0NjRmZTNlYWQ1MzJhOGIxYjcw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-18T06:16:21Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-18T07:04:18Z"
      },
      "message": "util: use locale-independent parsing in ParseDouble\n\nUse locale-indepent C++ based parsing instead of C's strtod,\nwhich checks for different input based on the user's locale.\nFixes #6443.",
      "tree": {
        "sha": "26bb1be16831c3e74a13975c661c3d6cb4b7b561",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/26bb1be16831c3e74a13975c661c3d6cb4b7b561"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ec249d4a1d572a17dd010464fe3ead532a8b1b70",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec249d4a1d572a17dd010464fe3ead532a8b1b70",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ec249d4a1d572a17dd010464fe3ead532a8b1b70",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec249d4a1d572a17dd010464fe3ead532a8b1b70/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7650449a6777710cf818d41862626164da0cd412",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7650449a6777710cf818d41862626164da0cd412",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7650449a6777710cf818d41862626164da0cd412"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 6,
      "deletions": 5
    },
    "files": [
      {
        "sha": "1f7a2cae2ced7a2e70314c6367b53ffeae8ac81f",
        "filename": "src/utilstrencodings.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec249d4a1d572a17dd010464fe3ead532a8b1b70/src/utilstrencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec249d4a1d572a17dd010464fe3ead532a8b1b70/src/utilstrencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utilstrencodings.cpp?ref=ec249d4a1d572a17dd010464fe3ead532a8b1b70",
        "patch": "@@ -464,11 +464,12 @@ bool ParseDouble(const std::string& str, double *out)\n         return false;\n     if (str.size() >= 2 && str[0] == '0' && str[1] == 'x') // No hexadecimal floats allowed\n         return false;\n-    char *endp = NULL;\n-    errno = 0; // strtod will not set errno if valid\n-    double n = strtod(str.c_str(), &endp);\n-    if(out) *out = n;\n-    return endp && *endp == 0 && !errno;\n+    std::istringstream text(str);\n+    text.imbue(std::locale::classic());\n+    double result;\n+    text >> result;\n+    if(out) *out = result;\n+    return text.eof() && !text.fail();\n }\n \n std::string FormatParagraph(const std::string& in, size_t width, size_t indent)"
      }
    ]
  }
]