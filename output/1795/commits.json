[
  {
    "sha": "68feac96b67b80a4fe59c4f349b58af9c77e2709",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2OGZlYWM5NmI2N2I4MGE0ZmU1OWM0ZjM0OWI1OGFmOWM3N2UyNzA5",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2012-08-13T03:26:25Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2013-01-16T17:48:01Z"
      },
      "message": "Add const versions of base_uint.end()/begin(), make size() const.",
      "tree": {
        "sha": "70e96ef040904ba159a3b61accf0fd310e76ace4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/70e96ef040904ba159a3b61accf0fd310e76ace4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/68feac96b67b80a4fe59c4f349b58af9c77e2709",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/68feac96b67b80a4fe59c4f349b58af9c77e2709",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/68feac96b67b80a4fe59c4f349b58af9c77e2709",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/68feac96b67b80a4fe59c4f349b58af9c77e2709/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5f04881618a6d6f8deec4fad4899f46c060caa91",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f04881618a6d6f8deec4fad4899f46c060caa91",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5f04881618a6d6f8deec4fad4899f46c060caa91"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 11,
      "deletions": 1
    },
    "files": [
      {
        "sha": "eb0066fa27e41ccc9acc3e820c1da389bc4dd9bd",
        "filename": "src/uint256.h",
        "status": "modified",
        "additions": 11,
        "deletions": 1,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/68feac96b67b80a4fe59c4f349b58af9c77e2709/src/uint256.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/68feac96b67b80a4fe59c4f349b58af9c77e2709/src/uint256.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/uint256.h?ref=68feac96b67b80a4fe59c4f349b58af9c77e2709",
        "patch": "@@ -344,7 +344,17 @@ class base_uint\n         return (unsigned char*)&pn[WIDTH];\n     }\n \n-    unsigned int size()\n+    const unsigned char* begin() const\n+    {\n+        return (unsigned char*)&pn[0];\n+    }\n+\n+    const unsigned char* end() const\n+    {\n+        return (unsigned char*)&pn[WIDTH];\n+    }\n+\n+    unsigned int size() const\n     {\n         return sizeof(pn);\n     }"
      }
    ]
  },
  {
    "sha": "7ab026f4493b145f2255d816864cb1a3486e0788",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YWIwMjZmNDQ5M2IxNDVmMjI1NWQ4MTY4NjRjYjFhMzQ4NmUwNzg4",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2013-01-10T18:16:00Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2013-01-16T17:48:01Z"
      },
      "message": "Add MurmurHash3 implementation to hash.h/add hash.cpp.",
      "tree": {
        "sha": "72a9b123331434c3ac8f2cf837692f6ec3413793",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/72a9b123331434c3ac8f2cf837692f6ec3413793"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7ab026f4493b145f2255d816864cb1a3486e0788",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ab026f4493b145f2255d816864cb1a3486e0788",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7ab026f4493b145f2255d816864cb1a3486e0788",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ab026f4493b145f2255d816864cb1a3486e0788/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "68feac96b67b80a4fe59c4f349b58af9c77e2709",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/68feac96b67b80a4fe59c4f349b58af9c77e2709",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/68feac96b67b80a4fe59c4f349b58af9c77e2709"
      }
    ],
    "stats": {
      "total": 66,
      "additions": 66,
      "deletions": 0
    },
    "files": [
      {
        "sha": "852879f8cc3c6760b5a9655cb227447e83fc7052",
        "filename": "bitcoin-qt.pro",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7ab026f4493b145f2255d816864cb1a3486e0788/bitcoin-qt.pro",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7ab026f4493b145f2255d816864cb1a3486e0788/bitcoin-qt.pro",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/bitcoin-qt.pro?ref=7ab026f4493b145f2255d816864cb1a3486e0788",
        "patch": "@@ -215,6 +215,7 @@ SOURCES += src/qt/bitcoin.cpp src/qt/bitcoingui.cpp \\\n     src/version.cpp \\\n     src/sync.cpp \\\n     src/util.cpp \\\n+    src/hash.cpp \\\n     src/netbase.cpp \\\n     src/key.cpp \\\n     src/script.cpp \\"
      },
      {
        "sha": "bddd8abf38d045a171fa4868c11f72b12b59f179",
        "filename": "src/hash.cpp",
        "status": "added",
        "additions": 58,
        "deletions": 0,
        "changes": 58,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7ab026f4493b145f2255d816864cb1a3486e0788/src/hash.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7ab026f4493b145f2255d816864cb1a3486e0788/src/hash.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hash.cpp?ref=7ab026f4493b145f2255d816864cb1a3486e0788",
        "patch": "@@ -0,0 +1,58 @@\n+#include \"hash.h\"\n+\n+inline uint32_t ROTL32 ( uint32_t x, int8_t r )\n+{\n+    return (x << r) | (x >> (32 - r));\n+}\n+\n+unsigned int MurmurHash3(unsigned int nHashSeed, const std::vector<unsigned char>& vDataToHash)\n+{\n+    // The following is MurmurHash3 (x86_32), see http://code.google.com/p/smhasher/source/browse/trunk/MurmurHash3.cpp\n+    uint32_t h1 = nHashSeed;\n+    const uint32_t c1 = 0xcc9e2d51;\n+    const uint32_t c2 = 0x1b873593;\n+\n+    const int nblocks = vDataToHash.size() / 4;\n+\n+    //----------\n+    // body\n+    const uint32_t * blocks = (const uint32_t *)(&vDataToHash[0] + nblocks*4);\n+\n+    for(int i = -nblocks; i; i++)\n+    {\n+        uint32_t k1 = blocks[i];\n+\n+        k1 *= c1;\n+        k1 = ROTL32(k1,15);\n+        k1 *= c2;\n+\n+        h1 ^= k1;\n+        h1 = ROTL32(h1,13); \n+        h1 = h1*5+0xe6546b64;\n+    }\n+\n+    //----------\n+    // tail\n+    const uint8_t * tail = (const uint8_t*)(&vDataToHash[0] + nblocks*4);\n+\n+    uint32_t k1 = 0;\n+\n+    switch(vDataToHash.size() & 3)\n+    {\n+    case 3: k1 ^= tail[2] << 16;\n+    case 2: k1 ^= tail[1] << 8;\n+    case 1: k1 ^= tail[0];\n+            k1 *= c1; k1 = ROTL32(k1,15); k1 *= c2; h1 ^= k1;\n+    };\n+\n+    //----------\n+    // finalization\n+    h1 ^= vDataToHash.size();\n+    h1 ^= h1 >> 16;\n+    h1 *= 0x85ebca6b;\n+    h1 ^= h1 >> 13;\n+    h1 *= 0xc2b2ae35;\n+    h1 ^= h1 >> 16;\n+\n+    return h1;\n+}"
      },
      {
        "sha": "eaa1780c044c110b03a2a22abff0b2e81b750800",
        "filename": "src/hash.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7ab026f4493b145f2255d816864cb1a3486e0788/src/hash.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7ab026f4493b145f2255d816864cb1a3486e0788/src/hash.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hash.h?ref=7ab026f4493b145f2255d816864cb1a3486e0788",
        "patch": "@@ -10,6 +10,7 @@\n \n #include <openssl/sha.h>\n #include <openssl/ripemd.h>\n+#include <vector>\n \n template<typename T1>\n inline uint256 Hash(const T1 pbegin, const T1 pend)\n@@ -113,4 +114,6 @@ inline uint160 Hash160(const std::vector<unsigned char>& vch)\n     return hash2;\n }\n \n+unsigned int MurmurHash3(unsigned int nHashSeed, const std::vector<unsigned char>& vDataToHash);\n+\n #endif"
      },
      {
        "sha": "95e7e83cd0bc9e16d63acd252b1de9575a74c67a",
        "filename": "src/makefile.linux-mingw",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7ab026f4493b145f2255d816864cb1a3486e0788/src/makefile.linux-mingw",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7ab026f4493b145f2255d816864cb1a3486e0788/src/makefile.linux-mingw",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.linux-mingw?ref=7ab026f4493b145f2255d816864cb1a3486e0788",
        "patch": "@@ -83,6 +83,7 @@ OBJS= \\\n     obj/wallet.o \\\n     obj/walletdb.o \\\n     obj/noui.o \\\n+    obj/hash.o \\\n     obj/leveldb.o \\\n     obj/txdb.o\n "
      },
      {
        "sha": "2abc34478d047bfaa8e03bf575c9abee783b24bf",
        "filename": "src/makefile.mingw",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7ab026f4493b145f2255d816864cb1a3486e0788/src/makefile.mingw",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7ab026f4493b145f2255d816864cb1a3486e0788/src/makefile.mingw",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.mingw?ref=7ab026f4493b145f2255d816864cb1a3486e0788",
        "patch": "@@ -78,6 +78,7 @@ OBJS= \\\n     obj/util.o \\\n     obj/wallet.o \\\n     obj/walletdb.o \\\n+    obj/hash.o \\\n     obj/noui.o \\\n     obj/leveldb.o \\\n     obj/txdb.o"
      },
      {
        "sha": "474f17b735112990fb9e8164c2f15cf33dabe889",
        "filename": "src/makefile.osx",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7ab026f4493b145f2255d816864cb1a3486e0788/src/makefile.osx",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7ab026f4493b145f2255d816864cb1a3486e0788/src/makefile.osx",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.osx?ref=7ab026f4493b145f2255d816864cb1a3486e0788",
        "patch": "@@ -96,6 +96,7 @@ OBJS= \\\n     obj/util.o \\\n     obj/wallet.o \\\n     obj/walletdb.o \\\n+    obj/hash.o \\\n     obj/noui.o \\\n     obj/leveldb.o \\\n     obj/txdb.o"
      },
      {
        "sha": "979a4a65203e8d460edf213f28b94417ed07081e",
        "filename": "src/makefile.unix",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7ab026f4493b145f2255d816864cb1a3486e0788/src/makefile.unix",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7ab026f4493b145f2255d816864cb1a3486e0788/src/makefile.unix",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.unix?ref=7ab026f4493b145f2255d816864cb1a3486e0788",
        "patch": "@@ -127,6 +127,7 @@ OBJS= \\\n     obj/util.o \\\n     obj/wallet.o \\\n     obj/walletdb.o \\\n+    obj/hash.o \\\n     obj/noui.o \\\n     obj/leveldb.o \\\n     obj/txdb.o"
      }
    ]
  },
  {
    "sha": "bd21612c37cf4f2df3a6926beff8a7f89714235e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZDIxNjEyYzM3Y2Y0ZjJkZjNhNjkyNmJlZmY4YTdmODk3MTQyMzVl",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2012-08-13T03:26:27Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2013-01-16T17:48:01Z"
      },
      "message": "Add a CBloomFilter class for use as a transaction filter.",
      "tree": {
        "sha": "3c192ac4bb78ac67847cfbda463876587a1e61d9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3c192ac4bb78ac67847cfbda463876587a1e61d9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bd21612c37cf4f2df3a6926beff8a7f89714235e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd21612c37cf4f2df3a6926beff8a7f89714235e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bd21612c37cf4f2df3a6926beff8a7f89714235e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd21612c37cf4f2df3a6926beff8a7f89714235e/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7ab026f4493b145f2255d816864cb1a3486e0788",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ab026f4493b145f2255d816864cb1a3486e0788",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7ab026f4493b145f2255d816864cb1a3486e0788"
      }
    ],
    "stats": {
      "total": 209,
      "additions": 209,
      "deletions": 0
    },
    "files": [
      {
        "sha": "50ca80cb0fec837ce3424a870113f62518ba0390",
        "filename": "bitcoin-qt.pro",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd21612c37cf4f2df3a6926beff8a7f89714235e/bitcoin-qt.pro",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd21612c37cf4f2df3a6926beff8a7f89714235e/bitcoin-qt.pro",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/bitcoin-qt.pro?ref=bd21612c37cf4f2df3a6926beff8a7f89714235e",
        "patch": "@@ -155,6 +155,7 @@ HEADERS += src/qt/bitcoingui.h \\\n     src/script.h \\\n     src/init.h \\\n     src/irc.h \\\n+    src/bloom.h \\\n     src/mruset.h \\\n     src/json/json_spirit_writer_template.h \\\n     src/json/json_spirit_writer.h \\\n@@ -223,6 +224,7 @@ SOURCES += src/qt/bitcoin.cpp src/qt/bitcoingui.cpp \\\n     src/init.cpp \\\n     src/net.cpp \\\n     src/irc.cpp \\\n+    src/bloom.cpp \\\n     src/checkpoints.cpp \\\n     src/addrman.cpp \\\n     src/db.cpp \\"
      },
      {
        "sha": "5fac1d06abca2957d47fb3c30739a090e8e98142",
        "filename": "src/bloom.cpp",
        "status": "added",
        "additions": 133,
        "deletions": 0,
        "changes": 133,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd21612c37cf4f2df3a6926beff8a7f89714235e/src/bloom.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd21612c37cf4f2df3a6926beff8a7f89714235e/src/bloom.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.cpp?ref=bd21612c37cf4f2df3a6926beff8a7f89714235e",
        "patch": "@@ -0,0 +1,133 @@\n+// Copyright (c) 2012 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#include <math.h>\n+#include <stdlib.h>\n+\n+#include \"bloom.h\"\n+#include \"main.h\"\n+#include \"script.h\"\n+\n+#define LN2SQUARED 0.4804530139182014246671025263266649717305529515945455\n+#define LN2 0.6931471805599453094172321214581765680755001343602552\n+\n+using namespace std;\n+\n+static const unsigned char bit_mask[8] = {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80};\n+\n+CBloomFilter::CBloomFilter(unsigned int nElements, double nFPRate) :\n+// The ideal size for a bloom filter with a given number of elements and false positive rate is:\n+// - nElements * log(fp rate) / ln(2)^2\n+// We ignore filter parameters which will create a bloom filter larger than the protocol limits\n+vData(min((unsigned int)(-1  / LN2SQUARED * nElements * log(nFPRate)), MAX_BLOOM_FILTER_SIZE * 8) / 8),\n+// The ideal number of hash functions is filter size * ln(2) / number of elements\n+// Again, we ignore filter parameters which will create a bloom filter with more hash functions than the protocol limits\n+// See http://en.wikipedia.org/wiki/Bloom_filter for an explanation of these formulas\n+nHashFuncs(min((unsigned int)(vData.size() * 8 / nElements * LN2), MAX_HASH_FUNCS))\n+{\n+}\n+\n+inline unsigned int CBloomFilter::Hash(unsigned int nHashNum, const std::vector<unsigned char>& vDataToHash) const\n+{\n+    // 0xFBA4C795 chosen as it guarantees a reasonable bit difference between nHashNum values.\n+    return MurmurHash3(nHashNum * 0xFBA4C795, vDataToHash) % (vData.size() * 8);\n+}\n+\n+void CBloomFilter::insert(const vector<unsigned char>& vKey)\n+{\n+    for (unsigned int i = 0; i < nHashFuncs; i++)\n+    {\n+        unsigned int nIndex = Hash(i, vKey);\n+        // Sets bit nIndex of vData\n+        vData[nIndex >> 3] |= bit_mask[7 & nIndex];\n+    }\n+}\n+\n+void CBloomFilter::insert(const COutPoint& outpoint)\n+{\n+    CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n+    stream << outpoint;\n+    vector<unsigned char> data(stream.begin(), stream.end());\n+    insert(data);\n+}\n+\n+void CBloomFilter::insert(const uint256& hash)\n+{\n+    vector<unsigned char> data(hash.begin(), hash.end());\n+    insert(data);\n+}\n+\n+bool CBloomFilter::contains(const vector<unsigned char>& vKey) const\n+{\n+    for (unsigned int i = 0; i < nHashFuncs; i++)\n+    {\n+        unsigned int nIndex = Hash(i, vKey);\n+        // Checks bit nIndex of vData\n+        if (!(vData[nIndex >> 3] & bit_mask[7 & nIndex]))\n+            return false;\n+    }\n+    return true;\n+}\n+\n+bool CBloomFilter::contains(const COutPoint& outpoint) const\n+{\n+    CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n+    stream << outpoint;\n+    vector<unsigned char> data(stream.begin(), stream.end());\n+    return contains(data);\n+}\n+\n+bool CBloomFilter::contains(const uint256& hash) const\n+{\n+    vector<unsigned char> data(hash.begin(), hash.end());\n+    return contains(data);\n+}\n+\n+bool CBloomFilter::IsWithinSizeConstraints() const\n+{\n+    return vData.size() <= MAX_BLOOM_FILTER_SIZE && nHashFuncs <= MAX_HASH_FUNCS;\n+}\n+\n+bool CBloomFilter::IsTransactionRelevantToFilter(const CTransaction& tx) const\n+{\n+    // Match if the filter contains the hash of tx\n+    //  for finding tx when they appear in a block\n+    if (contains(tx.GetHash()))\n+        return true;\n+\n+    BOOST_FOREACH(const CTxOut& txout, tx.vout)\n+    {\n+        // Match if the filter contains any arbitrary script data element in any scriptPubKey in tx\n+        CScript::const_iterator pc = txout.scriptPubKey.begin();\n+        vector<unsigned char> data;\n+        while (pc < txout.scriptPubKey.end())\n+        {\n+            opcodetype opcode;\n+            if (!txout.scriptPubKey.GetOp(pc, opcode, data))\n+                break;\n+            if (data.size() != 0 && contains(data))\n+                return true;\n+        }\n+    }\n+\n+    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+    {\n+        // Match if the filter contains an outpoint tx spends\n+        if (contains(txin.prevout))\n+            return true;\n+\n+        // Match if the filter contains any arbitrary script data element in any scriptSig in tx\n+        CScript::const_iterator pc = txin.scriptSig.begin();\n+        vector<unsigned char> data;\n+        while (pc < txin.scriptSig.end())\n+        {\n+            opcodetype opcode;\n+            if (!txin.scriptSig.GetOp(pc, opcode, data))\n+                break;\n+            if (data.size() != 0 && contains(data))\n+                return true;\n+        }\n+    }\n+\n+    return false;\n+}"
      },
      {
        "sha": "ce84e665520cf63cfb67d56bb17366f21de76dd8",
        "filename": "src/bloom.h",
        "status": "added",
        "additions": 70,
        "deletions": 0,
        "changes": 70,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd21612c37cf4f2df3a6926beff8a7f89714235e/src/bloom.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd21612c37cf4f2df3a6926beff8a7f89714235e/src/bloom.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.h?ref=bd21612c37cf4f2df3a6926beff8a7f89714235e",
        "patch": "@@ -0,0 +1,70 @@\n+// Copyright (c) 2012 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#ifndef BITCOIN_BLOOM_H\n+#define BITCOIN_BLOOM_H\n+\n+#include <vector>\n+\n+#include \"uint256.h\"\n+#include \"serialize.h\"\n+\n+class COutPoint;\n+class CTransaction;\n+\n+// 20,000 items with fp rate < 0.1% or 10,000 items and <0.0001%\n+static const unsigned int MAX_BLOOM_FILTER_SIZE = 36000; // bytes\n+static const unsigned int MAX_HASH_FUNCS = 50;\n+\n+\n+/**\n+ * BloomFilter is a probabilistic filter which SPV clients provide\n+ * so that we can filter the transactions we sends them.\n+ * \n+ * This allows for significantly more efficient transaction and block downloads.\n+ * \n+ * Because bloom filters are probabilistic, an SPV node can increase the false-\n+ * positive rate, making us send them transactions which aren't actually theirs, \n+ * allowing clients to trade more bandwidth for more privacy by obfuscating which\n+ * keys are owned by them.\n+ */\n+class CBloomFilter\n+{\n+private:\n+    std::vector<unsigned char> vData;\n+    unsigned int nHashFuncs;\n+\n+    unsigned int Hash(unsigned int nHashNum, const std::vector<unsigned char>& vDataToHash) const;\n+\n+public:\n+    // Creates a new bloom filter which will provide the given fp rate when filled with the given number of elements\n+    // Note that if the given parameters will result in a filter outside the bounds of the protocol limits,\n+    // the filter created will be as close to the given parameters as possible within the protocol limits.\n+    // This will apply if nFPRate is very low or nElements is unreasonably high.\n+    CBloomFilter(unsigned int nElements, double nFPRate);\n+    // Using a filter initialized with this results in undefined behavior\n+    // Should only be used for deserialization\n+    CBloomFilter() {}\n+\n+    IMPLEMENT_SERIALIZE\n+    (\n+        READWRITE(vData);\n+        READWRITE(nHashFuncs);\n+    )\n+\n+    void insert(const std::vector<unsigned char>& vKey);\n+    void insert(const COutPoint& outpoint);\n+    void insert(const uint256& hash);\n+\n+    bool contains(const std::vector<unsigned char>& vKey) const;\n+    bool contains(const COutPoint& outpoint) const;\n+    bool contains(const uint256& hash) const;\n+\n+    // True if the size is <= MAX_BLOOM_FILTER_SIZE and the number of hash functions is <= MAX_HASH_FUNCS\n+    // (catch a filter which was just deserialized which was too big)\n+    bool IsWithinSizeConstraints() const;\n+\n+    bool IsTransactionRelevantToFilter(const CTransaction& tx) const;\n+};\n+\n+#endif /* BITCOIN_BLOOM_H */"
      },
      {
        "sha": "ff565f2a2d1745ea68f102dcf8a1b2e2b8807302",
        "filename": "src/makefile.linux-mingw",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd21612c37cf4f2df3a6926beff8a7f89714235e/src/makefile.linux-mingw",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd21612c37cf4f2df3a6926beff8a7f89714235e/src/makefile.linux-mingw",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.linux-mingw?ref=bd21612c37cf4f2df3a6926beff8a7f89714235e",
        "patch": "@@ -84,6 +84,7 @@ OBJS= \\\n     obj/walletdb.o \\\n     obj/noui.o \\\n     obj/hash.o \\\n+    obj/bloom.o \\\n     obj/leveldb.o \\\n     obj/txdb.o\n "
      },
      {
        "sha": "9a6680bf40f64b8ab065c5ebe39dbb1d160c10b5",
        "filename": "src/makefile.mingw",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd21612c37cf4f2df3a6926beff8a7f89714235e/src/makefile.mingw",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd21612c37cf4f2df3a6926beff8a7f89714235e/src/makefile.mingw",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.mingw?ref=bd21612c37cf4f2df3a6926beff8a7f89714235e",
        "patch": "@@ -79,6 +79,7 @@ OBJS= \\\n     obj/wallet.o \\\n     obj/walletdb.o \\\n     obj/hash.o \\\n+    obj/bloom.o \\\n     obj/noui.o \\\n     obj/leveldb.o \\\n     obj/txdb.o"
      },
      {
        "sha": "8b7c559fa11daf875d5676df23830a612164ef7e",
        "filename": "src/makefile.osx",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd21612c37cf4f2df3a6926beff8a7f89714235e/src/makefile.osx",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd21612c37cf4f2df3a6926beff8a7f89714235e/src/makefile.osx",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.osx?ref=bd21612c37cf4f2df3a6926beff8a7f89714235e",
        "patch": "@@ -97,6 +97,7 @@ OBJS= \\\n     obj/wallet.o \\\n     obj/walletdb.o \\\n     obj/hash.o \\\n+    obj/bloom.o \\\n     obj/noui.o \\\n     obj/leveldb.o \\\n     obj/txdb.o"
      },
      {
        "sha": "14cf1b8fa5b3e96c93c53e048549db73c3f86b43",
        "filename": "src/makefile.unix",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd21612c37cf4f2df3a6926beff8a7f89714235e/src/makefile.unix",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd21612c37cf4f2df3a6926beff8a7f89714235e/src/makefile.unix",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.unix?ref=bd21612c37cf4f2df3a6926beff8a7f89714235e",
        "patch": "@@ -128,6 +128,7 @@ OBJS= \\\n     obj/wallet.o \\\n     obj/walletdb.o \\\n     obj/hash.o \\\n+    obj/bloom.o \\\n     obj/noui.o \\\n     obj/leveldb.o \\\n     obj/txdb.o"
      }
    ]
  },
  {
    "sha": "133a546074258862348177213bbe2200208affd8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMzNhNTQ2MDc0MjU4ODYyMzQ4MTc3MjEzYmJlMjIwMDIwOGFmZmQ4",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2012-08-13T03:26:28Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2013-01-16T17:48:02Z"
      },
      "message": "Bump PROTOCOL_VERSION for filter messages.",
      "tree": {
        "sha": "3ba8fd473687414fb3026ae07a15489b46daf4e1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3ba8fd473687414fb3026ae07a15489b46daf4e1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/133a546074258862348177213bbe2200208affd8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/133a546074258862348177213bbe2200208affd8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/133a546074258862348177213bbe2200208affd8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/133a546074258862348177213bbe2200208affd8/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bd21612c37cf4f2df3a6926beff8a7f89714235e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd21612c37cf4f2df3a6926beff8a7f89714235e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bd21612c37cf4f2df3a6926beff8a7f89714235e"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "f1e7c4cd7b7100720c808c0d0fb18ad5390c8e6c",
        "filename": "src/version.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/133a546074258862348177213bbe2200208affd8/src/version.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/133a546074258862348177213bbe2200208affd8/src/version.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/version.h?ref=133a546074258862348177213bbe2200208affd8",
        "patch": "@@ -25,7 +25,7 @@ extern const std::string CLIENT_DATE;\n // network protocol versioning\n //\n \n-static const int PROTOCOL_VERSION = 60002;\n+static const int PROTOCOL_VERSION = 70001;\n \n // earlier versions not supported as of Feb 2012, and are disconnected\n static const int MIN_PROTO_VERSION = 209;"
      }
    ]
  },
  {
    "sha": "422d1225374e2d879dbd116151e0113aa7162500",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MjJkMTIyNTM3NGUyZDg3OWRiZDExNjE1MWUwMTEzYWE3MTYyNTAw",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2012-08-13T03:26:29Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2013-01-16T17:48:02Z"
      },
      "message": "Add a filter field in CNode, add filterload+filteradd+filterclear",
      "tree": {
        "sha": "4d468923fe3d01f5a348d677d214e5f9b1a222e4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4d468923fe3d01f5a348d677d214e5f9b1a222e4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/422d1225374e2d879dbd116151e0113aa7162500",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/422d1225374e2d879dbd116151e0113aa7162500",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/422d1225374e2d879dbd116151e0113aa7162500",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/422d1225374e2d879dbd116151e0113aa7162500/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "133a546074258862348177213bbe2200208affd8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/133a546074258862348177213bbe2200208affd8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/133a546074258862348177213bbe2200208affd8"
      }
    ],
    "stats": {
      "total": 51,
      "additions": 51,
      "deletions": 0
    },
    "files": [
      {
        "sha": "9a498ff2731598333a89220524283638512b6aec",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 45,
        "deletions": 0,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/422d1225374e2d879dbd116151e0113aa7162500/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/422d1225374e2d879dbd116151e0113aa7162500/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=422d1225374e2d879dbd116151e0113aa7162500",
        "patch": "@@ -3332,6 +3332,51 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n     }\n \n \n+    else if (strCommand == \"filterload\")\n+    {\n+        CBloomFilter filter;\n+        vRecv >> filter;\n+\n+        if (!filter.IsWithinSizeConstraints())\n+            // There is no excuse for sending a too-large filter\n+            pfrom->Misbehaving(100);\n+        else\n+        {\n+            LOCK(pfrom->cs_filter);\n+            delete pfrom->pfilter;\n+            pfrom->pfilter = new CBloomFilter(filter);\n+        }\n+    }\n+\n+\n+    else if (strCommand == \"filteradd\")\n+    {\n+        vector<unsigned char> vData;\n+        vRecv >> vData;\n+\n+        // Nodes must NEVER send a data item > 520 bytes (the max size for a script data object,\n+        // and thus, the maximum size any matched object can have) in a filteradd message\n+        if (vData.size() > 520)\n+        {\n+            pfrom->Misbehaving(100);\n+        } else {\n+            LOCK(pfrom->cs_filter);\n+            if (pfrom->pfilter)\n+                pfrom->pfilter->insert(vData);\n+            else\n+                pfrom->Misbehaving(100);\n+        }\n+    }\n+\n+\n+    else if (strCommand == \"filterclear\")\n+    {\n+        LOCK(pfrom->cs_filter);\n+        delete pfrom->pfilter;\n+        pfrom->pfilter = NULL;\n+    }\n+\n+\n     else\n     {\n         // Ignore unknown commands for extensibility"
      },
      {
        "sha": "1ce92eae449c72269f749cff8fdf278a7dbca310",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/422d1225374e2d879dbd116151e0113aa7162500/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/422d1225374e2d879dbd116151e0113aa7162500/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=422d1225374e2d879dbd116151e0113aa7162500",
        "patch": "@@ -19,6 +19,7 @@\n #include \"protocol.h\"\n #include \"addrman.h\"\n #include \"hash.h\"\n+#include \"bloom.h\"\n \n class CNode;\n class CBlockIndex;\n@@ -152,6 +153,8 @@ class CNode\n     bool fSuccessfullyConnected;\n     bool fDisconnect;\n     CSemaphoreGrant grantOutbound;\n+    CCriticalSection cs_filter;\n+    CBloomFilter* pfilter;\n protected:\n     int nRefCount;\n \n@@ -209,6 +212,7 @@ class CNode\n         fGetAddr = false;\n         nMisbehavior = 0;\n         setInventoryKnown.max_size(SendBufferSize() / 1000);\n+        pfilter = NULL;\n \n         // Be shy and don't send version until we hear\n         if (!fInbound)\n@@ -222,6 +226,8 @@ class CNode\n             closesocket(hSocket);\n             hSocket = INVALID_SOCKET;\n         }\n+        if (pfilter)\n+            delete pfilter;\n     }\n \n private:"
      }
    ]
  },
  {
    "sha": "269d9c6492dc275650d2137d53f4afdca88e3216",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNjlkOWM2NDkyZGMyNzU2NTBkMjEzN2Q1M2Y0YWZkY2E4OGUzMjE2",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2012-08-13T03:26:30Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2013-01-16T17:48:02Z"
      },
      "message": "Replace RelayMessage with RelayTransaction.",
      "tree": {
        "sha": "32ded97569c406479d8393eda9163f3ba488b7b9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/32ded97569c406479d8393eda9163f3ba488b7b9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/269d9c6492dc275650d2137d53f4afdca88e3216",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/269d9c6492dc275650d2137d53f4afdca88e3216",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/269d9c6492dc275650d2137d53f4afdca88e3216",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/269d9c6492dc275650d2137d53f4afdca88e3216/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "422d1225374e2d879dbd116151e0113aa7162500",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/422d1225374e2d879dbd116151e0113aa7162500",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/422d1225374e2d879dbd116151e0113aa7162500"
      }
    ],
    "stats": {
      "total": 112,
      "additions": 56,
      "deletions": 56
    },
    "files": [
      {
        "sha": "73b04aa3d665aa48c18c48398fb63208340235aa",
        "filename": "src/bloom.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/269d9c6492dc275650d2137d53f4afdca88e3216/src/bloom.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/269d9c6492dc275650d2137d53f4afdca88e3216/src/bloom.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.cpp?ref=269d9c6492dc275650d2137d53f4afdca88e3216",
        "patch": "@@ -88,11 +88,11 @@ bool CBloomFilter::IsWithinSizeConstraints() const\n     return vData.size() <= MAX_BLOOM_FILTER_SIZE && nHashFuncs <= MAX_HASH_FUNCS;\n }\n \n-bool CBloomFilter::IsTransactionRelevantToFilter(const CTransaction& tx) const\n+bool CBloomFilter::IsTransactionRelevantToFilter(const CTransaction& tx, const uint256& hash) const\n {\n     // Match if the filter contains the hash of tx\n     //  for finding tx when they appear in a block\n-    if (contains(tx.GetHash()))\n+    if (contains(hash))\n         return true;\n \n     BOOST_FOREACH(const CTxOut& txout, tx.vout)"
      },
      {
        "sha": "335bb5e0bb1ea1b4b642eb048bb132a666db5f3d",
        "filename": "src/bloom.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/269d9c6492dc275650d2137d53f4afdca88e3216/src/bloom.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/269d9c6492dc275650d2137d53f4afdca88e3216/src/bloom.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.h?ref=269d9c6492dc275650d2137d53f4afdca88e3216",
        "patch": "@@ -64,7 +64,7 @@ class CBloomFilter\n     // (catch a filter which was just deserialized which was too big)\n     bool IsWithinSizeConstraints() const;\n \n-    bool IsTransactionRelevantToFilter(const CTransaction& tx) const;\n+    bool IsTransactionRelevantToFilter(const CTransaction& tx, const uint256& hash) const;\n };\n \n #endif /* BITCOIN_BLOOM_H */"
      },
      {
        "sha": "93079693c318a75c06137c525567aa330fd2baf1",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/269d9c6492dc275650d2137d53f4afdca88e3216/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/269d9c6492dc275650d2137d53f4afdca88e3216/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=269d9c6492dc275650d2137d53f4afdca88e3216",
        "patch": "@@ -3184,7 +3184,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n         if (tx.AcceptToMemoryPool(true, &fMissingInputs))\n         {\n             SyncWithWallets(inv.hash, tx, NULL, true);\n-            RelayMessage(inv, vMsg);\n+            RelayTransaction(tx, inv.hash, vMsg);\n             mapAlreadyAskedFor.erase(inv);\n             vWorkQueue.push_back(inv.hash);\n             vEraseQueue.push_back(inv.hash);\n@@ -3207,7 +3207,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n                     {\n                         printf(\"   accepted orphan tx %s\\n\", inv.hash.ToString().substr(0,10).c_str());\n                         SyncWithWallets(inv.hash, tx, NULL, true);\n-                        RelayMessage(inv, vMsg);\n+                        RelayTransaction(tx, inv.hash, vMsg);\n                         mapAlreadyAskedFor.erase(inv);\n                         vWorkQueue.push_back(inv.hash);\n                         vEraseQueue.push_back(inv.hash);"
      },
      {
        "sha": "aafc7206cdbd9ef3689cf6f483e736953d62c0ed",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 44,
        "deletions": 0,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/269d9c6492dc275650d2137d53f4afdca88e3216/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/269d9c6492dc275650d2137d53f4afdca88e3216/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=269d9c6492dc275650d2137d53f4afdca88e3216",
        "patch": "@@ -9,6 +9,7 @@\n #include \"init.h\"\n #include \"addrman.h\"\n #include \"ui_interface.h\"\n+#include \"script.h\"\n \n #ifdef WIN32\n #include <string.h>\n@@ -1996,3 +1997,46 @@ class CNetCleanup\n     }\n }\n instance_of_cnetcleanup;\n+\n+\n+\n+\n+\n+\n+\n+void RelayTransaction(const CTransaction& tx, const uint256& hash)\n+{\n+    CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);\n+    ss.reserve(10000);\n+    ss << tx;\n+    RelayTransaction(tx, hash, ss);\n+}\n+\n+void RelayTransaction(const CTransaction& tx, const uint256& hash, const CDataStream& ss)\n+{\n+    CInv inv(MSG_TX, hash);\n+    {\n+        LOCK(cs_mapRelay);\n+        // Expire old relay messages\n+        while (!vRelayExpiration.empty() && vRelayExpiration.front().first < GetTime())\n+        {\n+            mapRelay.erase(vRelayExpiration.front().second);\n+            vRelayExpiration.pop_front();\n+        }\n+\n+        // Save original serialized message so newer versions are preserved\n+        mapRelay.insert(std::make_pair(inv, ss));\n+        vRelayExpiration.push_back(std::make_pair(GetTime() + 15 * 60, inv));\n+    }\n+    LOCK(cs_vNodes);\n+    BOOST_FOREACH(CNode* pnode, vNodes)\n+    {\n+        LOCK(pnode->cs_filter);\n+        if (pnode->pfilter)\n+        {\n+            if (pnode->pfilter->IsTransactionRelevantToFilter(tx, hash))\n+                pnode->PushInventory(inv);\n+        } else\n+            pnode->PushInventory(inv);\n+    }\n+}"
      },
      {
        "sha": "81fe312001280ce273e3d28e6b7e642fbf814c3a",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 3,
        "deletions": 46,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/269d9c6492dc275650d2137d53f4afdca88e3216/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/269d9c6492dc275650d2137d53f4afdca88e3216/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=269d9c6492dc275650d2137d53f4afdca88e3216",
        "patch": "@@ -562,51 +562,8 @@ class CNode\n \n \n \n-\n-\n-\n-\n-\n-\n-\n-inline void RelayInventory(const CInv& inv)\n-{\n-    // Put on lists to offer to the other nodes\n-    {\n-        LOCK(cs_vNodes);\n-        BOOST_FOREACH(CNode* pnode, vNodes)\n-            pnode->PushInventory(inv);\n-    }\n-}\n-\n-template<typename T>\n-void RelayMessage(const CInv& inv, const T& a)\n-{\n-    CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);\n-    ss.reserve(10000);\n-    ss << a;\n-    RelayMessage(inv, ss);\n-}\n-\n-template<>\n-inline void RelayMessage<>(const CInv& inv, const CDataStream& ss)\n-{\n-    {\n-        LOCK(cs_mapRelay);\n-        // Expire old relay messages\n-        while (!vRelayExpiration.empty() && vRelayExpiration.front().first < GetTime())\n-        {\n-            mapRelay.erase(vRelayExpiration.front().second);\n-            vRelayExpiration.pop_front();\n-        }\n-\n-        // Save original serialized message so newer versions are preserved\n-        mapRelay.insert(std::make_pair(inv, ss));\n-        vRelayExpiration.push_back(std::make_pair(GetTime() + 15 * 60, inv));\n-    }\n-\n-    RelayInventory(inv);\n-}\n-\n+class CTransaction;\n+void RelayTransaction(const CTransaction& tx, const uint256& hash);\n+void RelayTransaction(const CTransaction& tx, const uint256& hash, const CDataStream& ss);\n \n #endif"
      },
      {
        "sha": "09fbaa30cd54eb2aec12755078b028ec93088119",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/269d9c6492dc275650d2137d53f4afdca88e3216/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/269d9c6492dc275650d2137d53f4afdca88e3216/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=269d9c6492dc275650d2137d53f4afdca88e3216",
        "patch": "@@ -558,7 +558,7 @@ Value sendrawtransaction(const Array& params, bool fHelp)\n     } else {\n         SyncWithWallets(hashTx, tx, NULL, true);\n     }\n-    RelayMessage(CInv(MSG_TX, hashTx), tx);\n+    RelayTransaction(tx, hashTx);\n \n     return hashTx.GetHex();\n }"
      },
      {
        "sha": "f49bfb5f8feea7f58c3c4fc3332f903a1fa936e2",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/269d9c6492dc275650d2137d53f4afdca88e3216/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/269d9c6492dc275650d2137d53f4afdca88e3216/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=269d9c6492dc275650d2137d53f4afdca88e3216",
        "patch": "@@ -826,17 +826,16 @@ void CWalletTx::RelayWalletTransaction()\n {\n     BOOST_FOREACH(const CMerkleTx& tx, vtxPrev)\n     {\n-        if (!tx.IsCoinBase()) {\n+        if (!tx.IsCoinBase())\n             if (tx.GetDepthInMainChain() == 0)\n-                RelayMessage(CInv(MSG_TX, tx.GetHash()), (CTransaction)tx);\n-        }\n+                RelayTransaction((CTransaction)tx, tx.GetHash());\n     }\n     if (!IsCoinBase())\n     {\n         if (GetDepthInMainChain() == 0) {\n             uint256 hash = GetHash();\n             printf(\"Relaying wtx %s\\n\", hash.ToString().substr(0,10).c_str());\n-            RelayMessage(CInv(MSG_TX, hash), (CTransaction)*this);\n+            RelayTransaction((CTransaction)*this, hash);\n         }\n     }\n }"
      }
    ]
  },
  {
    "sha": "d3b26f7077f58ebfcfccc5f0b16f8c29be5dc6b5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkM2IyNmY3MDc3ZjU4ZWJmY2ZjY2M1ZjBiMTZmOGMyOWJlNWRjNmI1",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2012-08-19T03:38:28Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2013-01-16T17:48:02Z"
      },
      "message": "Automatically add any matching outputs to a filter during matching.",
      "tree": {
        "sha": "6dc2f03a18dcc8b237a7dbf2b5fd3fcb3c4dcd9b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6dc2f03a18dcc8b237a7dbf2b5fd3fcb3c4dcd9b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d3b26f7077f58ebfcfccc5f0b16f8c29be5dc6b5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3b26f7077f58ebfcfccc5f0b16f8c29be5dc6b5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d3b26f7077f58ebfcfccc5f0b16f8c29be5dc6b5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3b26f7077f58ebfcfccc5f0b16f8c29be5dc6b5/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "269d9c6492dc275650d2137d53f4afdca88e3216",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/269d9c6492dc275650d2137d53f4afdca88e3216",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/269d9c6492dc275650d2137d53f4afdca88e3216"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 19,
      "deletions": 6
    },
    "files": [
      {
        "sha": "e773bbbbdbea56dd25b356bafae5ab75ac71dce0",
        "filename": "src/bloom.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 4,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d3b26f7077f58ebfcfccc5f0b16f8c29be5dc6b5/src/bloom.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d3b26f7077f58ebfcfccc5f0b16f8c29be5dc6b5/src/bloom.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.cpp?ref=d3b26f7077f58ebfcfccc5f0b16f8c29be5dc6b5",
        "patch": "@@ -88,16 +88,21 @@ bool CBloomFilter::IsWithinSizeConstraints() const\n     return vData.size() <= MAX_BLOOM_FILTER_SIZE && nHashFuncs <= MAX_HASH_FUNCS;\n }\n \n-bool CBloomFilter::IsTransactionRelevantToFilter(const CTransaction& tx, const uint256& hash) const\n+bool CBloomFilter::IsRelevantAndUpdate(const CTransaction& tx, const uint256& hash)\n {\n+    bool fFound = false;\n     // Match if the filter contains the hash of tx\n     //  for finding tx when they appear in a block\n     if (contains(hash))\n-        return true;\n+        fFound = true;\n \n-    BOOST_FOREACH(const CTxOut& txout, tx.vout)\n+    for (unsigned int i = 0; i < tx.vout.size(); i++)\n     {\n+        const CTxOut& txout = tx.vout[i];\n         // Match if the filter contains any arbitrary script data element in any scriptPubKey in tx\n+        // If this matches, also add the specific output that was matched.\n+        // This means clients don't have to update the filter themselves when a new relevant tx \n+        // is discovered in order to find spending transactions, which avoids round-tripping and race conditions.\n         CScript::const_iterator pc = txout.scriptPubKey.begin();\n         vector<unsigned char> data;\n         while (pc < txout.scriptPubKey.end())\n@@ -106,10 +111,17 @@ bool CBloomFilter::IsTransactionRelevantToFilter(const CTransaction& tx, const u\n             if (!txout.scriptPubKey.GetOp(pc, opcode, data))\n                 break;\n             if (data.size() != 0 && contains(data))\n-                return true;\n+            {\n+                fFound = true;\n+                insert(COutPoint(hash, i));\n+                break;\n+            }\n         }\n     }\n \n+    if (fFound)\n+        return true;\n+\n     BOOST_FOREACH(const CTxIn& txin, tx.vin)\n     {\n         // Match if the filter contains an outpoint tx spends"
      },
      {
        "sha": "1a8a562dad3c561d55128ccc4cb4196fe8fbe8e1",
        "filename": "src/bloom.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d3b26f7077f58ebfcfccc5f0b16f8c29be5dc6b5/src/bloom.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d3b26f7077f58ebfcfccc5f0b16f8c29be5dc6b5/src/bloom.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.h?ref=d3b26f7077f58ebfcfccc5f0b16f8c29be5dc6b5",
        "patch": "@@ -64,7 +64,8 @@ class CBloomFilter\n     // (catch a filter which was just deserialized which was too big)\n     bool IsWithinSizeConstraints() const;\n \n-    bool IsTransactionRelevantToFilter(const CTransaction& tx, const uint256& hash) const;\n+    // Also adds any outputs which match the filter to the filter (to match their spending txes)\n+    bool IsRelevantAndUpdate(const CTransaction& tx, const uint256& hash);\n };\n \n #endif /* BITCOIN_BLOOM_H */"
      },
      {
        "sha": "e88efcd19edded1fe33f3d739af03eca0b4d2517",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d3b26f7077f58ebfcfccc5f0b16f8c29be5dc6b5/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d3b26f7077f58ebfcfccc5f0b16f8c29be5dc6b5/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=d3b26f7077f58ebfcfccc5f0b16f8c29be5dc6b5",
        "patch": "@@ -2034,7 +2034,7 @@ void RelayTransaction(const CTransaction& tx, const uint256& hash, const CDataSt\n         LOCK(pnode->cs_filter);\n         if (pnode->pfilter)\n         {\n-            if (pnode->pfilter->IsTransactionRelevantToFilter(tx, hash))\n+            if (pnode->pfilter->IsRelevantAndUpdate(tx, hash))\n                 pnode->PushInventory(inv);\n         } else\n             pnode->PushInventory(inv);"
      }
    ]
  },
  {
    "sha": "587f0f855ebeb888bdcff68b51fc11fa9aa204b9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ODdmMGY4NTVlYmViODg4YmRjZmY2OGI1MWZjMTFmYTlhYTIwNGI5",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2012-08-14T23:21:20Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2013-01-16T17:48:02Z"
      },
      "message": "Add a CBlock.GetBlockHeader",
      "tree": {
        "sha": "26508b0aa1c9e47ef6d89529d4c31eaa7b6e0f44",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/26508b0aa1c9e47ef6d89529d4c31eaa7b6e0f44"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/587f0f855ebeb888bdcff68b51fc11fa9aa204b9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/587f0f855ebeb888bdcff68b51fc11fa9aa204b9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/587f0f855ebeb888bdcff68b51fc11fa9aa204b9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/587f0f855ebeb888bdcff68b51fc11fa9aa204b9/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d3b26f7077f58ebfcfccc5f0b16f8c29be5dc6b5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3b26f7077f58ebfcfccc5f0b16f8c29be5dc6b5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d3b26f7077f58ebfcfccc5f0b16f8c29be5dc6b5"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 12,
      "deletions": 0
    },
    "files": [
      {
        "sha": "d2329af09aec8bdd9e825b2da7e7b9f12c9cdaf5",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/587f0f855ebeb888bdcff68b51fc11fa9aa204b9/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/587f0f855ebeb888bdcff68b51fc11fa9aa204b9/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=587f0f855ebeb888bdcff68b51fc11fa9aa204b9",
        "patch": "@@ -1218,6 +1218,18 @@ class CBlock : public CBlockHeader\n         nDoS = 0;\n     }\n \n+    CBlockHeader GetBlockHeader() const\n+    {\n+        CBlockHeader block;\n+        block.nVersion       = nVersion;\n+        block.hashPrevBlock  = hashPrevBlock;\n+        block.hashMerkleRoot = hashMerkleRoot;\n+        block.nTime          = nTime;\n+        block.nBits          = nBits;\n+        block.nNonce         = nNonce;\n+        return block;\n+    }\n+\n     uint256 BuildMerkleTree() const\n     {\n         vMerkleTree.clear();"
      }
    ]
  },
  {
    "sha": "9fb106e7579831b4ab682d2e6f588662d0f445d0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZmIxMDZlNzU3OTgzMWI0YWI2ODJkMmU2ZjU4ODY2MmQwZjQ0NWQw",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2012-08-19T03:40:00Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2013-01-16T17:48:02Z"
      },
      "message": "Add a CMerkleBlock to store merkle branches of filtered txes.",
      "tree": {
        "sha": "f08eadab83d918bb98bdc732f2b973f5ba48afe1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f08eadab83d918bb98bdc732f2b973f5ba48afe1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9fb106e7579831b4ab682d2e6f588662d0f445d0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9fb106e7579831b4ab682d2e6f588662d0f445d0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9fb106e7579831b4ab682d2e6f588662d0f445d0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9fb106e7579831b4ab682d2e6f588662d0f445d0/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "587f0f855ebeb888bdcff68b51fc11fa9aa204b9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/587f0f855ebeb888bdcff68b51fc11fa9aa204b9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/587f0f855ebeb888bdcff68b51fc11fa9aa204b9"
      }
    ],
    "stats": {
      "total": 53,
      "additions": 53,
      "deletions": 0
    },
    "files": [
      {
        "sha": "bd5b2408a0e8868941c110df89fb5b63f11bf4cc",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 0,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fb106e7579831b4ab682d2e6f588662d0f445d0/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fb106e7579831b4ab682d2e6f588662d0f445d0/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=9fb106e7579831b4ab682d2e6f588662d0f445d0",
        "patch": "@@ -2239,6 +2239,29 @@ bool ProcessBlock(CNode* pfrom, CBlock* pblock, CDiskBlockPos *dbp)\n \n \n \n+CMerkleBlock::CMerkleBlock(const CBlock& block, CBloomFilter& filter)\n+{\n+    header = block.GetBlockHeader();\n+    vtx.reserve(block.vtx.size());\n+\n+    for(unsigned int i = 0; i < block.vtx.size(); i++)\n+    {\n+        vector<uint256> branch = block.GetMerkleBranch(i);\n+        uint256 hash = block.vtx[i].GetHash();\n+        if (filter.IsRelevantAndUpdate(block.vtx[i], hash))\n+        {\n+            vtx.push_back(make_tuple(i, hash, branch));\n+        }\n+    }\n+}\n+\n+\n+\n+\n+\n+\n+\n+\n bool CheckDiskSpace(uint64 nAdditionalBytes)\n {\n     uint64 nFreeBytesAvailable = filesystem::space(GetDataDir()).available;"
      },
      {
        "sha": "77aac71d225d0c006c8fe57041ad5e462adf3e27",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 30,
        "deletions": 0,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fb106e7579831b4ab682d2e6f588662d0f445d0/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fb106e7579831b4ab682d2e6f588662d0f445d0/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=9fb106e7579831b4ab682d2e6f588662d0f445d0",
        "patch": "@@ -2039,4 +2039,34 @@ struct CBlockTemplate\n     std::vector<int64_t> vTxSigOps;\n };\n \n+\n+\n+\n+\n+\n+/** Used to relay blocks as header + vector<merkle branch>\n+ * to filtered nodes.\n+ */\n+class CMerkleBlock\n+{\n+public:\n+    CBlockHeader header;\n+\n+    // We could optimize this a bit to deduplicate partial branches,\n+    // but it's not worth much unless a node has a ton of txes in a single block\n+    //                       tx index    , tx hash, merkle branch\n+    std::vector<boost::tuple<unsigned int, uint256, std::vector<uint256> > > vtx;\n+\n+    // Create from a CBlock, filtering transactions according to filter\n+    // Note that this will call IsRelevantAndUpdate on the filter for each transaction,\n+    // thus the filter will likely be modified.\n+    CMerkleBlock(const CBlock& block, CBloomFilter& filter);\n+\n+    IMPLEMENT_SERIALIZE\n+    (\n+        READWRITE(header);\n+        READWRITE(vtx);\n+    )\n+};\n+\n #endif"
      }
    ]
  },
  {
    "sha": "2878c67cb5e19c6ea8a013b606e82339c8fb8209",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyODc4YzY3Y2I1ZTE5YzZlYThhMDEzYjYwNmU4MjMzOWM4ZmI4MjA5",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2012-08-13T03:26:35Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2013-01-16T17:48:02Z"
      },
      "message": "Add test cases for CMerkleBlock and CBloomFilter.",
      "tree": {
        "sha": "6557dacb60bfcc462facf79731c38a9350a2edef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6557dacb60bfcc462facf79731c38a9350a2edef"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2878c67cb5e19c6ea8a013b606e82339c8fb8209",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2878c67cb5e19c6ea8a013b606e82339c8fb8209",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2878c67cb5e19c6ea8a013b606e82339c8fb8209",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2878c67cb5e19c6ea8a013b606e82339c8fb8209/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9fb106e7579831b4ab682d2e6f588662d0f445d0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9fb106e7579831b4ab682d2e6f588662d0f445d0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9fb106e7579831b4ab682d2e6f588662d0f445d0"
      }
    ],
    "stats": {
      "total": 302,
      "additions": 302,
      "deletions": 0
    },
    "files": [
      {
        "sha": "8eb4ed851498fca77e2de4ffe1b0361d3f75a9d2",
        "filename": "src/test/bloom_tests.cpp",
        "status": "added",
        "additions": 302,
        "deletions": 0,
        "changes": 302,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2878c67cb5e19c6ea8a013b606e82339c8fb8209/src/test/bloom_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2878c67cb5e19c6ea8a013b606e82339c8fb8209/src/test/bloom_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bloom_tests.cpp?ref=2878c67cb5e19c6ea8a013b606e82339c8fb8209",
        "patch": "@@ -0,0 +1,302 @@\n+#include <boost/test/unit_test.hpp>\n+#include <vector>\n+\n+#include \"bloom.h\"\n+#include \"util.h\"\n+#include \"key.h\"\n+#include \"base58.h\"\n+#include \"main.h\"\n+\n+using namespace std;\n+using namespace boost::tuples;\n+\n+BOOST_AUTO_TEST_SUITE(bloom_tests)\n+\n+BOOST_AUTO_TEST_CASE(bloom_create_insert_serialize)\n+{\n+    CBloomFilter filter(3, 0.01);\n+\n+    filter.insert(ParseHex(\"99108ad8ed9bb6274d3980bab5a85c048f0950c8\"));\n+    BOOST_CHECK_MESSAGE( filter.contains(ParseHex(\"99108ad8ed9bb6274d3980bab5a85c048f0950c8\")), \"BloomFilter doesn't contain just-inserted object!\");\n+    // One bit different in first byte\n+    BOOST_CHECK_MESSAGE(!filter.contains(ParseHex(\"19108ad8ed9bb6274d3980bab5a85c048f0950c8\")), \"BloomFilter contains something it shouldn't!\");\n+\n+    filter.insert(ParseHex(\"b5a2c786d9ef4658287ced5914b37a1b4aa32eee\"));\n+    BOOST_CHECK_MESSAGE(filter.contains(ParseHex(\"b5a2c786d9ef4658287ced5914b37a1b4aa32eee\")), \"BloomFilter doesn't contain just-inserted object (2)!\");\n+\n+    filter.insert(ParseHex(\"b9300670b4c5366e95b2699e8b18bc75e5f729c5\"));\n+    BOOST_CHECK_MESSAGE(filter.contains(ParseHex(\"b9300670b4c5366e95b2699e8b18bc75e5f729c5\")), \"BloomFilter doesn't contain just-inserted object (3)!\");\n+\n+    CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n+    filter.Serialize(stream, SER_NETWORK, PROTOCOL_VERSION);\n+\n+    vector<unsigned char> vch = ParseHex(\"03614e9b05000000\");\n+    vector<char> expected(vch.size());\n+\n+    for (unsigned int i = 0; i < vch.size(); i++)\n+        expected[i] = (char)vch[i];\n+\n+    BOOST_CHECK_EQUAL_COLLECTIONS(stream.begin(), stream.end(), expected.begin(), expected.end());\n+}\n+\n+BOOST_AUTO_TEST_CASE(bloom_create_insert_key)\n+{\n+    string strSecret = string(\"5Kg1gnAjaLfKiwhhPpGS3QfRg2m6awQvaj98JCZBZQ5SuS2F15C\");\n+    CBitcoinSecret vchSecret;\n+    BOOST_CHECK(vchSecret.SetString(strSecret));\n+\n+    CKey key;\n+    bool fCompressed;\n+    CSecret secret = vchSecret.GetSecret(fCompressed);\n+    key.SetSecret(secret, fCompressed);\n+\n+    CBloomFilter filter(2, 0.001);\n+    filter.insert(key.GetPubKey().Raw());\n+    uint160 hash = key.GetPubKey().GetID();\n+    filter.insert(vector<unsigned char>(hash.begin(), hash.end()));\n+\n+    CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n+    filter.Serialize(stream, SER_NETWORK, PROTOCOL_VERSION);\n+\n+    vector<unsigned char> vch = ParseHex(\"038fc16b08000000\");\n+    vector<char> expected(vch.size());\n+\n+    for (unsigned int i = 0; i < vch.size(); i++)\n+        expected[i] = (char)vch[i];\n+\n+    BOOST_CHECK_EQUAL_COLLECTIONS(stream.begin(), stream.end(), expected.begin(), expected.end());\n+}\n+\n+BOOST_AUTO_TEST_CASE(bloom_match)\n+{\n+    // Random real transaction (b4749f017444b051c44dfd2720e88f314ff94f3dd6d56d40ef65854fcd7fff6b)\n+    CTransaction tx;\n+    CDataStream stream(ParseHex(\"01000000010b26e9b7735eb6aabdf358bab62f9816a21ba9ebdb719d5299e88607d722c190000000008b4830450220070aca44506c5cef3a16ed519d7c3c39f8aab192c4e1c90d065f37b8a4af6141022100a8e160b856c2d43d27d8fba71e5aef6405b8643ac4cb7cb3c462aced7f14711a0141046d11fee51b0e60666d5049a9101a72741df480b96ee26488a4d3466b95c9a40ac5eeef87e10a5cd336c19a84565f80fa6c547957b7700ff4dfbdefe76036c339ffffffff021bff3d11000000001976a91404943fdd508053c75000106d3bc6e2754dbcff1988ac2f15de00000000001976a914a266436d2965547608b9e15d9032a7b9d64fa43188ac00000000\"), SER_DISK, CLIENT_VERSION);\n+    stream >> tx;\n+\n+    // and one which spends it (e2769b09e784f32f62ef849763d4f45b98e07ba658647343b915ff832b110436)\n+    unsigned char ch[] = {0x01, 0x00, 0x00, 0x00, 0x01, 0x6b, 0xff, 0x7f, 0xcd, 0x4f, 0x85, 0x65, 0xef, 0x40, 0x6d, 0xd5, 0xd6, 0x3d, 0x4f, 0xf9, 0x4f, 0x31, 0x8f, 0xe8, 0x20, 0x27, 0xfd, 0x4d, 0xc4, 0x51, 0xb0, 0x44, 0x74, 0x01, 0x9f, 0x74, 0xb4, 0x00, 0x00, 0x00, 0x00, 0x8c, 0x49, 0x30, 0x46, 0x02, 0x21, 0x00, 0xda, 0x0d, 0xc6, 0xae, 0xce, 0xfe, 0x1e, 0x06, 0xef, 0xdf, 0x05, 0x77, 0x37, 0x57, 0xde, 0xb1, 0x68, 0x82, 0x09, 0x30, 0xe3, 0xb0, 0xd0, 0x3f, 0x46, 0xf5, 0xfc, 0xf1, 0x50, 0xbf, 0x99, 0x0c, 0x02, 0x21, 0x00, 0xd2, 0x5b, 0x5c, 0x87, 0x04, 0x00, 0x76, 0xe4, 0xf2, 0x53, 0xf8, 0x26, 0x2e, 0x76, 0x3e, 0x2d, 0xd5, 0x1e, 0x7f, 0xf0, 0xbe, 0x15, 0x77, 0x27, 0xc4, 0xbc, 0x42, 0x80, 0x7f, 0x17, 0xbd, 0x39, 0x01, 0x41, 0x04, 0xe6, 0xc2, 0x6e, 0xf6, 0x7d, 0xc6, 0x10, 0xd2, 0xcd, 0x19, 0x24, 0x84, 0x78, 0x9a, 0x6c, 0xf9, 0xae, 0xa9, 0x93, 0x0b, 0x94, 0x4b, 0x7e, 0x2d, 0xb5, 0x34, 0x2b, 0x9d, 0x9e, 0x5b, 0x9f, 0xf7, 0x9a, 0xff, 0x9a, 0x2e, 0xe1, 0x97, 0x8d, 0xd7, 0xfd, 0x01, 0xdf, 0xc5, 0x22, 0xee, 0x02, 0x28, 0x3d, 0x3b, 0x06, 0xa9, 0xd0, 0x3a, 0xcf, 0x80, 0x96, 0x96, 0x8d, 0x7d, 0xbb, 0x0f, 0x91, 0x78, 0xff, 0xff, 0xff, 0xff, 0x02, 0x8b, 0xa7, 0x94, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x19, 0x76, 0xa9, 0x14, 0xba, 0xde, 0xec, 0xfd, 0xef, 0x05, 0x07, 0x24, 0x7f, 0xc8, 0xf7, 0x42, 0x41, 0xd7, 0x3b, 0xc0, 0x39, 0x97, 0x2d, 0x7b, 0x88, 0xac, 0x40, 0x94, 0xa8, 0x02, 0x00, 0x00, 0x00, 0x00, 0x19, 0x76, 0xa9, 0x14, 0xc1, 0x09, 0x32, 0x48, 0x3f, 0xec, 0x93, 0xed, 0x51, 0xf5, 0xfe, 0x95, 0xe7, 0x25, 0x59, 0xf2, 0xcc, 0x70, 0x43, 0xf9, 0x88, 0xac, 0x00, 0x00, 0x00, 0x00, 0x00};\n+    vector<unsigned char> vch(ch, ch + sizeof(ch) -1);\n+    CDataStream spendStream(vch, SER_DISK, CLIENT_VERSION);\n+    CTransaction spendingTx;\n+    spendStream >> spendingTx;\n+\n+    CBloomFilter filter(10, 0.000001);\n+    filter.insert(uint256(\"0xb4749f017444b051c44dfd2720e88f314ff94f3dd6d56d40ef65854fcd7fff6b\"));\n+    BOOST_CHECK_MESSAGE(filter.IsRelevantAndUpdate(tx, tx.GetHash()), \"Simple Bloom filter didn't match tx hash\");\n+\n+    filter = CBloomFilter(10, 0.000001);\n+    // byte-reversed tx hash\n+    filter.insert(ParseHex(\"6bff7fcd4f8565ef406dd5d63d4ff94f318fe82027fd4dc451b04474019f74b4\"));\n+    BOOST_CHECK_MESSAGE(filter.IsRelevantAndUpdate(tx, tx.GetHash()), \"Simple Bloom filter didn't match manually serialized tx hash\");\n+\n+    filter = CBloomFilter(10, 0.000001);\n+    filter.insert(ParseHex(\"30450220070aca44506c5cef3a16ed519d7c3c39f8aab192c4e1c90d065f37b8a4af6141022100a8e160b856c2d43d27d8fba71e5aef6405b8643ac4cb7cb3c462aced7f14711a01\"));\n+    BOOST_CHECK_MESSAGE(filter.IsRelevantAndUpdate(tx, tx.GetHash()), \"Simple Bloom filter didn't match input signature\");\n+\n+    filter = CBloomFilter(10, 0.000001);\n+    filter.insert(ParseHex(\"046d11fee51b0e60666d5049a9101a72741df480b96ee26488a4d3466b95c9a40ac5eeef87e10a5cd336c19a84565f80fa6c547957b7700ff4dfbdefe76036c339\"));\n+    BOOST_CHECK_MESSAGE(filter.IsRelevantAndUpdate(tx, tx.GetHash()), \"Simple Bloom filter didn't match input pub key\");\n+\n+    filter = CBloomFilter(10, 0.000001);\n+    filter.insert(ParseHex(\"04943fdd508053c75000106d3bc6e2754dbcff19\"));\n+    BOOST_CHECK_MESSAGE(filter.IsRelevantAndUpdate(tx, tx.GetHash()), \"Simple Bloom filter didn't match output address\");\n+    BOOST_CHECK_MESSAGE(filter.IsRelevantAndUpdate(spendingTx, spendingTx.GetHash()), \"Simple Bloom filter didn't add output\");\n+\n+    filter = CBloomFilter(10, 0.000001);\n+    filter.insert(ParseHex(\"a266436d2965547608b9e15d9032a7b9d64fa431\"));\n+    BOOST_CHECK_MESSAGE(filter.IsRelevantAndUpdate(tx, tx.GetHash()), \"Simple Bloom filter didn't match output address\");\n+\n+    filter = CBloomFilter(10, 0.000001);\n+    filter.insert(COutPoint(uint256(\"0x90c122d70786e899529d71dbeba91ba216982fb6ba58f3bdaab65e73b7e9260b\"), 0));\n+    BOOST_CHECK_MESSAGE(filter.IsRelevantAndUpdate(tx, tx.GetHash()), \"Simple Bloom filter didn't match COutPoint\");\n+\n+    filter = CBloomFilter(10, 0.000001);\n+    COutPoint prevOutPoint(uint256(\"0x90c122d70786e899529d71dbeba91ba216982fb6ba58f3bdaab65e73b7e9260b\"), 0);\n+    {\n+        vector<unsigned char> data(32 + sizeof(unsigned int));\n+        memcpy(&data[0], prevOutPoint.hash.begin(), 32);\n+        memcpy(&data[32], &prevOutPoint.n, sizeof(unsigned int));\n+        filter.insert(data);\n+    }\n+    BOOST_CHECK_MESSAGE(filter.IsRelevantAndUpdate(tx, tx.GetHash()), \"Simple Bloom filter didn't match manually serialized COutPoint\");\n+\n+    filter = CBloomFilter(10, 0.000001);\n+    filter.insert(uint256(\"00000009e784f32f62ef849763d4f45b98e07ba658647343b915ff832b110436\"));\n+    BOOST_CHECK_MESSAGE(!filter.IsRelevantAndUpdate(tx, tx.GetHash()), \"Simple Bloom filter matched random tx hash\");\n+\n+    filter = CBloomFilter(10, 0.000001);\n+    filter.insert(ParseHex(\"0000006d2965547608b9e15d9032a7b9d64fa431\"));\n+    BOOST_CHECK_MESSAGE(!filter.IsRelevantAndUpdate(tx, tx.GetHash()), \"Simple Bloom filter matched random address\");\n+\n+    filter = CBloomFilter(10, 0.000001);\n+    filter.insert(COutPoint(uint256(\"0x90c122d70786e899529d71dbeba91ba216982fb6ba58f3bdaab65e73b7e9260b\"), 1));\n+    BOOST_CHECK_MESSAGE(!filter.IsRelevantAndUpdate(tx, tx.GetHash()), \"Simple Bloom filter matched COutPoint for an output we didn't care about\");\n+\n+    filter = CBloomFilter(10, 0.000001);\n+    filter.insert(COutPoint(uint256(\"0x000000d70786e899529d71dbeba91ba216982fb6ba58f3bdaab65e73b7e9260b\"), 0));\n+    BOOST_CHECK_MESSAGE(!filter.IsRelevantAndUpdate(tx, tx.GetHash()), \"Simple Bloom filter matched COutPoint for an output we didn't care about\");\n+}\n+\n+BOOST_AUTO_TEST_CASE(merkle_block_1)\n+{\n+    // Random real block (0000000000013b8ab2cd513b0261a14096412195a72a0c4827d229dcc7e0f7af)\n+    // With 9 txes\n+    CBlock block;\n+    CDataStream stream(ParseHex(\"0100000090f0a9f110702f808219ebea1173056042a714bad51b916cb6800000000000005275289558f51c9966699404ae2294730c3c9f9bda53523ce50e9b95e558da2fdb261b4d4c86041b1ab1bf930901000000010000000000000000000000000000000000000000000000000000000000000000ffffffff07044c86041b0146ffffffff0100f2052a01000000434104e18f7afbe4721580e81e8414fc8c24d7cfacf254bb5c7b949450c3e997c2dc1242487a8169507b631eb3771f2b425483fb13102c4eb5d858eef260fe70fbfae0ac00000000010000000196608ccbafa16abada902780da4dc35dafd7af05fa0da08cf833575f8cf9e836000000004a493046022100dab24889213caf43ae6adc41cf1c9396c08240c199f5225acf45416330fd7dbd022100fe37900e0644bf574493a07fc5edba06dbc07c311b947520c2d514bc5725dcb401ffffffff0100f2052a010000001976a914f15d1921f52e4007b146dfa60f369ed2fc393ce288ac000000000100000001fb766c1288458c2bafcfec81e48b24d98ec706de6b8af7c4e3c29419bfacb56d000000008c493046022100f268ba165ce0ad2e6d93f089cfcd3785de5c963bb5ea6b8c1b23f1ce3e517b9f022100da7c0f21adc6c401887f2bfd1922f11d76159cbc597fbd756a23dcbb00f4d7290141042b4e8625a96127826915a5b109852636ad0da753c9e1d5606a50480cd0c40f1f8b8d898235e571fe9357d9ec842bc4bba1827daaf4de06d71844d0057707966affffffff0280969800000000001976a9146963907531db72d0ed1a0cfb471ccb63923446f388ac80d6e34c000000001976a914f0688ba1c0d1ce182c7af6741e02658c7d4dfcd388ac000000000100000002c40297f730dd7b5a99567eb8d27b78758f607507c52292d02d4031895b52f2ff010000008b483045022100f7edfd4b0aac404e5bab4fd3889e0c6c41aa8d0e6fa122316f68eddd0a65013902205b09cc8b2d56e1cd1f7f2fafd60a129ed94504c4ac7bdc67b56fe67512658b3e014104732012cb962afa90d31b25d8fb0e32c94e513ab7a17805c14ca4c3423e18b4fb5d0e676841733cb83abaf975845c9f6f2a8097b7d04f4908b18368d6fc2d68ecffffffffca5065ff9617cbcba45eb23726df6498a9b9cafed4f54cbab9d227b0035ddefb000000008a473044022068010362a13c7f9919fa832b2dee4e788f61f6f5d344a7c2a0da6ae740605658022006d1af525b9a14a35c003b78b72bd59738cd676f845d1ff3fc25049e01003614014104732012cb962afa90d31b25d8fb0e32c94e513ab7a17805c14ca4c3423e18b4fb5d0e676841733cb83abaf975845c9f6f2a8097b7d04f4908b18368d6fc2d68ecffffffff01001ec4110200000043410469ab4181eceb28985b9b4e895c13fa5e68d85761b7eee311db5addef76fa8621865134a221bd01f28ec9999ee3e021e60766e9d1f3458c115fb28650605f11c9ac000000000100000001cdaf2f758e91c514655e2dc50633d1e4c84989f8aa90a0dbc883f0d23ed5c2fa010000008b48304502207ab51be6f12a1962ba0aaaf24a20e0b69b27a94fac5adf45aa7d2d18ffd9236102210086ae728b370e5329eead9accd880d0cb070aea0c96255fae6c4f1ddcce1fd56e014104462e76fd4067b3a0aa42070082dcb0bf2f388b6495cf33d789904f07d0f55c40fbd4b82963c69b3dc31895d0c772c812b1d5fbcade15312ef1c0e8ebbb12dcd4ffffffff02404b4c00000000001976a9142b6ba7c9d796b75eef7942fc9288edd37c32f5c388ac002d3101000000001976a9141befba0cdc1ad56529371864d9f6cb042faa06b588ac000000000100000001b4a47603e71b61bc3326efd90111bf02d2f549b067f4c4a8fa183b57a0f800cb010000008a4730440220177c37f9a505c3f1a1f0ce2da777c339bd8339ffa02c7cb41f0a5804f473c9230220585b25a2ee80eb59292e52b987dad92acb0c64eced92ed9ee105ad153cdb12d001410443bd44f683467e549dae7d20d1d79cbdb6df985c6e9c029c8d0c6cb46cc1a4d3cf7923c5021b27f7a0b562ada113bc85d5fda5a1b41e87fe6e8802817cf69996ffffffff0280651406000000001976a9145505614859643ab7b547cd7f1f5e7e2a12322d3788ac00aa0271000000001976a914ea4720a7a52fc166c55ff2298e07baf70ae67e1b88ac00000000010000000586c62cd602d219bb60edb14a3e204de0705176f9022fe49a538054fb14abb49e010000008c493046022100f2bc2aba2534becbdf062eb993853a42bbbc282083d0daf9b4b585bd401aa8c9022100b1d7fd7ee0b95600db8535bbf331b19eed8d961f7a8e54159c53675d5f69df8c014104462e76fd4067b3a0aa42070082dcb0bf2f388b6495cf33d789904f07d0f55c40fbd4b82963c69b3dc31895d0c772c812b1d5fbcade15312ef1c0e8ebbb12dcd4ffffffff03ad0e58ccdac3df9dc28a218bcf6f1997b0a93306faaa4b3a28ae83447b2179010000008b483045022100be12b2937179da88599e27bb31c3525097a07cdb52422d165b3ca2f2020ffcf702200971b51f853a53d644ebae9ec8f3512e442b1bcb6c315a5b491d119d10624c83014104462e76fd4067b3a0aa42070082dcb0bf2f388b6495cf33d789904f07d0f55c40fbd4b82963c69b3dc31895d0c772c812b1d5fbcade15312ef1c0e8ebbb12dcd4ffffffff2acfcab629bbc8685792603762c921580030ba144af553d271716a95089e107b010000008b483045022100fa579a840ac258871365dd48cd7552f96c8eea69bd00d84f05b283a0dab311e102207e3c0ee9234814cfbb1b659b83671618f45abc1326b9edcc77d552a4f2a805c0014104462e76fd4067b3a0aa42070082dcb0bf2f388b6495cf33d789904f07d0f55c40fbd4b82963c69b3dc31895d0c772c812b1d5fbcade15312ef1c0e8ebbb12dcd4ffffffffdcdc6023bbc9944a658ddc588e61eacb737ddf0a3cd24f113b5a8634c517fcd2000000008b4830450221008d6df731df5d32267954bd7d2dda2302b74c6c2a6aa5c0ca64ecbabc1af03c75022010e55c571d65da7701ae2da1956c442df81bbf076cdbac25133f99d98a9ed34c014104462e76fd4067b3a0aa42070082dcb0bf2f388b6495cf33d789904f07d0f55c40fbd4b82963c69b3dc31895d0c772c812b1d5fbcade15312ef1c0e8ebbb12dcd4ffffffffe15557cd5ce258f479dfd6dc6514edf6d7ed5b21fcfa4a038fd69f06b83ac76e010000008b483045022023b3e0ab071eb11de2eb1cc3a67261b866f86bf6867d4558165f7c8c8aca2d86022100dc6e1f53a91de3efe8f63512850811f26284b62f850c70ca73ed5de8771fb451014104462e76fd4067b3a0aa42070082dcb0bf2f388b6495cf33d789904f07d0f55c40fbd4b82963c69b3dc31895d0c772c812b1d5fbcade15312ef1c0e8ebbb12dcd4ffffffff01404b4c00000000001976a9142b6ba7c9d796b75eef7942fc9288edd37c32f5c388ac00000000010000000166d7577163c932b4f9690ca6a80b6e4eb001f0a2fa9023df5595602aae96ed8d000000008a4730440220262b42546302dfb654a229cefc86432b89628ff259dc87edd1154535b16a67e102207b4634c020a97c3e7bbd0d4d19da6aa2269ad9dded4026e896b213d73ca4b63f014104979b82d02226b3a4597523845754d44f13639e3bf2df5e82c6aab2bdc79687368b01b1ab8b19875ae3c90d661a3d0a33161dab29934edeb36aa01976be3baf8affffffff02404b4c00000000001976a9144854e695a02af0aeacb823ccbc272134561e0a1688ac40420f00000000001976a914abee93376d6b37b5c2940655a6fcaf1c8e74237988ac0000000001000000014e3f8ef2e91349a9059cb4f01e54ab2597c1387161d3da89919f7ea6acdbb371010000008c49304602210081f3183471a5ca22307c0800226f3ef9c353069e0773ac76bb580654d56aa523022100d4c56465bdc069060846f4fbf2f6b20520b2a80b08b168b31e66ddb9c694e240014104976c79848e18251612f8940875b2b08d06e6dc73b9840e8860c066b7e87432c477e9a59a453e71e6d76d5fe34058b800a098fc1740ce3012e8fc8a00c96af966ffffffff02c0e1e400000000001976a9144134e75a6fcb6042034aab5e18570cf1f844f54788ac404b4c00000000001976a9142b6ba7c9d796b75eef7942fc9288edd37c32f5c388ac00000000\"), SER_NETWORK, PROTOCOL_VERSION);\n+    stream >> block;\n+\n+    CBloomFilter filter(10, 0.000001);\n+    // Match the last transaction\n+    filter.insert(uint256(\"0x74d681e0e03bafa802c8aa084379aa98d9fcd632ddc2ed9782b586ec87451f20\"));\n+\n+    CMerkleBlock merkleBlock(block, filter);\n+    BOOST_CHECK(merkleBlock.header.GetHash() == block.GetHash());\n+\n+    BOOST_CHECK(merkleBlock.vtx.size() == 1);\n+    tuple<unsigned int, uint256, vector<uint256> > tuple = merkleBlock.vtx[0];\n+\n+    BOOST_CHECK(get<2>(merkleBlock.vtx[0]).size() == 4);\n+    BOOST_CHECK(get<1>(merkleBlock.vtx[0]) == uint256(\"0x74d681e0e03bafa802c8aa084379aa98d9fcd632ddc2ed9782b586ec87451f20\"));\n+    BOOST_CHECK(get<0>(merkleBlock.vtx[0]) == 8);\n+    BOOST_CHECK(block.CheckMerkleBranch(get<1>(merkleBlock.vtx[0]), get<2>(merkleBlock.vtx[0]), get<0>(merkleBlock.vtx[0])) == block.hashMerkleRoot);\n+\n+    // Also match the 8th transaction\n+    filter.insert(uint256(\"0xdd1fd2a6fc16404faf339881a90adbde7f4f728691ac62e8f168809cdfae1053\"));\n+    merkleBlock = CMerkleBlock(block, filter);\n+    BOOST_CHECK(merkleBlock.header.GetHash() == block.GetHash());\n+\n+    BOOST_CHECK(merkleBlock.vtx.size() == 2);\n+\n+    BOOST_CHECK(merkleBlock.vtx[1] == tuple);\n+\n+    BOOST_CHECK(get<2>(merkleBlock.vtx[0]).size() == 4);\n+    BOOST_CHECK(get<1>(merkleBlock.vtx[0]) == uint256(\"0xdd1fd2a6fc16404faf339881a90adbde7f4f728691ac62e8f168809cdfae1053\"));\n+    BOOST_CHECK(get<0>(merkleBlock.vtx[0]) == 7);\n+    BOOST_CHECK(block.CheckMerkleBranch(get<1>(merkleBlock.vtx[0]), get<2>(merkleBlock.vtx[0]), get<0>(merkleBlock.vtx[0])) == block.hashMerkleRoot);\n+}\n+\n+BOOST_AUTO_TEST_CASE(merkle_block_2)\n+{\n+    // Random real block (000000000003ba27aa200b1cecaad478d2b00432346c3f1f3986da1afd33e506)\n+    // With 4 txes\n+    CBlock block;\n+    CDataStream stream(ParseHex(\"0100000050120119172a610421a6c3011dd330d9df07b63616c2cc1f1cd00200000000006657a9252aacd5c0b2940996ecff952228c3067cc38d4885efb5a4ac4247e9f337221b4d4c86041b0f2b57100401000000010000000000000000000000000000000000000000000000000000000000000000ffffffff08044c86041b020602ffffffff0100f2052a010000004341041b0e8c2567c12536aa13357b79a073dc4444acb83c4ec7a0e2f99dd7457516c5817242da796924ca4e99947d087fedf9ce467cb9f7c6287078f801df276fdf84ac000000000100000001032e38e9c0a84c6046d687d10556dcacc41d275ec55fc00779ac88fdf357a187000000008c493046022100c352d3dd993a981beba4a63ad15c209275ca9470abfcd57da93b58e4eb5dce82022100840792bc1f456062819f15d33ee7055cf7b5ee1af1ebcc6028d9cdb1c3af7748014104f46db5e9d61a9dc27b8d64ad23e7383a4e6ca164593c2527c038c0857eb67ee8e825dca65046b82c9331586c82e0fd1f633f25f87c161bc6f8a630121df2b3d3ffffffff0200e32321000000001976a914c398efa9c392ba6013c5e04ee729755ef7f58b3288ac000fe208010000001976a914948c765a6914d43f2a7ac177da2c2f6b52de3d7c88ac000000000100000001c33ebff2a709f13d9f9a7569ab16a32786af7d7e2de09265e41c61d078294ecf010000008a4730440220032d30df5ee6f57fa46cddb5eb8d0d9fe8de6b342d27942ae90a3231e0ba333e02203deee8060fdc70230a7f5b4ad7d7bc3e628cbe219a886b84269eaeb81e26b4fe014104ae31c31bf91278d99b8377a35bbce5b27d9fff15456839e919453fc7b3f721f0ba403ff96c9deeb680e5fd341c0fc3a7b90da4631ee39560639db462e9cb850fffffffff0240420f00000000001976a914b0dcbf97eabf4404e31d952477ce822dadbe7e1088acc060d211000000001976a9146b1281eec25ab4e1e0793ff4e08ab1abb3409cd988ac0000000001000000010b6072b386d4a773235237f64c1126ac3b240c84b917a3909ba1c43ded5f51f4000000008c493046022100bb1ad26df930a51cce110cf44f7a48c3c561fd977500b1ae5d6b6fd13d0b3f4a022100c5b42951acedff14abba2736fd574bdb465f3e6f8da12e2c5303954aca7f78f3014104a7135bfe824c97ecc01ec7d7e336185c81e2aa2c41ab175407c09484ce9694b44953fcb751206564a9c24dd094d42fdbfdd5aad3e063ce6af4cfaaea4ea14fbbffffffff0140420f00000000001976a91439aa3d569e06a1d7926dc4be1193c99bf2eb9ee088ac00000000\"), SER_NETWORK, PROTOCOL_VERSION);\n+    stream >> block;\n+\n+    CBloomFilter filter(10, 0.000001);\n+    // Match the first transaction\n+    filter.insert(uint256(\"0x8c14f0db3df150123e6f3dbbf30f8b955a8249b62ac1d1ff16284aefa3d06d87\"));\n+\n+    CMerkleBlock merkleBlock(block, filter);\n+    BOOST_CHECK(merkleBlock.header.GetHash() == block.GetHash());\n+\n+    BOOST_CHECK(merkleBlock.vtx.size() == 1);\n+    tuple<unsigned int, uint256, vector<uint256> > tuple = merkleBlock.vtx[0];\n+\n+    BOOST_CHECK(get<2>(merkleBlock.vtx[0]).size() == 2);\n+    BOOST_CHECK(get<1>(merkleBlock.vtx[0]) == uint256(\"0x8c14f0db3df150123e6f3dbbf30f8b955a8249b62ac1d1ff16284aefa3d06d87\"));\n+    BOOST_CHECK(get<0>(merkleBlock.vtx[0]) == 0);\n+    BOOST_CHECK(block.CheckMerkleBranch(get<1>(merkleBlock.vtx[0]), get<2>(merkleBlock.vtx[0]), get<0>(merkleBlock.vtx[0])) == block.hashMerkleRoot);\n+\n+    // Match all of the transactions\n+    filter.insert(uint256(\"0xfff2525b8931402dd09222c50775608f75787bd2b87e56995a7bdd30f79702c4\"));\n+    filter.insert(uint256(\"0x6359f0868171b1d194cbee1af2f16ea598ae8fad666d9b012c8ed2b79a236ec4\"));\n+    filter.insert(uint256(\"0xe9a66845e05d5abc0ad04ec80f774a7e585c6e8db975962d069a522137b80c1d\"));\n+\n+    merkleBlock = CMerkleBlock(block, filter);\n+    BOOST_CHECK(merkleBlock.header.GetHash() == block.GetHash());\n+\n+    BOOST_CHECK(merkleBlock.vtx.size() == 4);\n+\n+    BOOST_CHECK(tuple == merkleBlock.vtx[0]);\n+\n+    BOOST_CHECK(get<2>(merkleBlock.vtx[1]).size() == 2);\n+    BOOST_CHECK(get<1>(merkleBlock.vtx[1]) == uint256(\"0xfff2525b8931402dd09222c50775608f75787bd2b87e56995a7bdd30f79702c4\"));\n+    BOOST_CHECK(get<0>(merkleBlock.vtx[1]) == 1);\n+    BOOST_CHECK(block.CheckMerkleBranch(get<1>(merkleBlock.vtx[1]), get<2>(merkleBlock.vtx[1]), get<0>(merkleBlock.vtx[1])) == block.hashMerkleRoot);\n+\n+    BOOST_CHECK(get<2>(merkleBlock.vtx[2]).size() == 2);\n+    BOOST_CHECK(get<1>(merkleBlock.vtx[2]) == uint256(\"0x6359f0868171b1d194cbee1af2f16ea598ae8fad666d9b012c8ed2b79a236ec4\"));\n+    BOOST_CHECK(get<0>(merkleBlock.vtx[2]) == 2);\n+    BOOST_CHECK(block.CheckMerkleBranch(get<1>(merkleBlock.vtx[2]), get<2>(merkleBlock.vtx[2]), get<0>(merkleBlock.vtx[2])) == block.hashMerkleRoot);\n+\n+    BOOST_CHECK(get<2>(merkleBlock.vtx[3]).size() == 2);\n+    BOOST_CHECK(get<1>(merkleBlock.vtx[3]) == uint256(\"0xe9a66845e05d5abc0ad04ec80f774a7e585c6e8db975962d069a522137b80c1d\"));\n+    BOOST_CHECK(get<0>(merkleBlock.vtx[3]) == 3);\n+    BOOST_CHECK(block.CheckMerkleBranch(get<1>(merkleBlock.vtx[3]), get<2>(merkleBlock.vtx[3]), get<0>(merkleBlock.vtx[3])) == block.hashMerkleRoot);\n+}\n+\n+BOOST_AUTO_TEST_CASE(merkle_block_3_and_serialize)\n+{\n+    // Random real block (000000000000dab0130bbcc991d3d7ae6b81aa6f50a798888dfe62337458dc45)\n+    // With one tx\n+    CBlock block;\n+    CDataStream stream(ParseHex(\"0100000079cda856b143d9db2c1caff01d1aecc8630d30625d10e8b4b8b0000000000000b50cc069d6a3e33e3ff84a5c41d9d3febe7c770fdcc96b2c3ff60abe184f196367291b4d4c86041b8fa45d630101000000010000000000000000000000000000000000000000000000000000000000000000ffffffff08044c86041b020a02ffffffff0100f2052a01000000434104ecd3229b0571c3be876feaac0442a9f13c5a572742927af1dc623353ecf8c202225f64868137a18cdd85cbbb4c74fbccfd4f49639cf1bdc94a5672bb15ad5d4cac00000000\"), SER_NETWORK, PROTOCOL_VERSION);\n+    stream >> block;\n+\n+    CBloomFilter filter(10, 0.000001);\n+    // Match the only transaction\n+    filter.insert(uint256(\"0x63194f18be0af63f2c6bc9dc0f777cbefed3d9415c4af83f3ee3a3d669c00cb5\"));\n+\n+    CMerkleBlock merkleBlock(block, filter);\n+    BOOST_CHECK(merkleBlock.header.GetHash() == block.GetHash());\n+\n+    BOOST_CHECK(merkleBlock.vtx.size() == 1);\n+\n+    BOOST_CHECK(get<2>(merkleBlock.vtx[0]).size() == 0);\n+    BOOST_CHECK(get<1>(merkleBlock.vtx[0]) == uint256(\"0x63194f18be0af63f2c6bc9dc0f777cbefed3d9415c4af83f3ee3a3d669c00cb5\"));\n+    BOOST_CHECK(get<0>(merkleBlock.vtx[0]) == 0);\n+    BOOST_CHECK(block.CheckMerkleBranch(get<1>(merkleBlock.vtx[0]), get<2>(merkleBlock.vtx[0]), get<0>(merkleBlock.vtx[0])) == block.hashMerkleRoot);\n+\n+    CDataStream merkleStream(SER_NETWORK, PROTOCOL_VERSION);\n+    merkleStream << merkleBlock;\n+\n+    vector<unsigned char> vch = ParseHex(\"0100000079cda856b143d9db2c1caff01d1aecc8630d30625d10e8b4b8b0000000000000b50cc069d6a3e33e3ff84a5c41d9d3febe7c770fdcc96b2c3ff60abe184f196367291b4d4c86041b8fa45d630100000000b50cc069d6a3e33e3ff84a5c41d9d3febe7c770fdcc96b2c3ff60abe184f196300\");\n+    vector<char> expected(vch.size());\n+\n+    for (unsigned int i = 0; i < vch.size(); i++)\n+        expected[i] = (char)vch[i];\n+\n+    BOOST_CHECK_EQUAL_COLLECTIONS(expected.begin(), expected.end(), merkleStream.begin(), merkleStream.end());\n+}\n+\n+BOOST_AUTO_TEST_CASE(merkle_block_4)\n+{\n+    // Random real block (000000000000b731f2eef9e8c63173adfb07e41bd53eb0ef0a6b720d6cb6dea4)\n+    // With 7 txes\n+    CBlock block;\n+    CDataStream stream(ParseHex(\"0100000082bb869cf3a793432a66e826e05a6fc37469f8efb7421dc880670100000000007f16c5962e8bd963659c793ce370d95f093bc7e367117b3c30c1f8fdd0d9728776381b4d4c86041b554b85290701000000010000000000000000000000000000000000000000000000000000000000000000ffffffff07044c86041b0136ffffffff0100f2052a01000000434104eaafc2314def4ca98ac970241bcab022b9c1e1f4ea423a20f134c876f2c01ec0f0dd5b2e86e7168cefe0d81113c3807420ce13ad1357231a2252247d97a46a91ac000000000100000001bcad20a6a29827d1424f08989255120bf7f3e9e3cdaaa6bb31b0737fe048724300000000494830450220356e834b046cadc0f8ebb5a8a017b02de59c86305403dad52cd77b55af062ea10221009253cd6c119d4729b77c978e1e2aa19f5ea6e0e52b3f16e32fa608cd5bab753901ffffffff02008d380c010000001976a9142b4b8072ecbba129b6453c63e129e643207249ca88ac0065cd1d000000001976a9141b8dd13b994bcfc787b32aeadf58ccb3615cbd5488ac000000000100000003fdacf9b3eb077412e7a968d2e4f11b9a9dee312d666187ed77ee7d26af16cb0b000000008c493046022100ea1608e70911ca0de5af51ba57ad23b9a51db8d28f82c53563c56a05c20f5a87022100a8bdc8b4a8acc8634c6b420410150775eb7f2474f5615f7fccd65af30f310fbf01410465fdf49e29b06b9a1582287b6279014f834edc317695d125ef623c1cc3aaece245bd69fcad7508666e9c74a49dc9056d5fc14338ef38118dc4afae5fe2c585caffffffff309e1913634ecb50f3c4f83e96e70b2df071b497b8973a3e75429df397b5af83000000004948304502202bdb79c596a9ffc24e96f4386199aba386e9bc7b6071516e2b51dda942b3a1ed022100c53a857e76b724fc14d45311eac5019650d415c3abb5428f3aae16d8e69bec2301ffffffff2089e33491695080c9edc18a428f7d834db5b6d372df13ce2b1b0e0cbcb1e6c10000000049483045022100d4ce67c5896ee251c810ac1ff9ceccd328b497c8f553ab6e08431e7d40bad6b5022033119c0c2b7d792d31f1187779c7bd95aefd93d90a715586d73801d9b47471c601ffffffff0100714460030000001976a914c7b55141d097ea5df7a0ed330cf794376e53ec8d88ac0000000001000000045bf0e214aa4069a3e792ecee1e1bf0c1d397cde8dd08138f4b72a00681743447000000008b48304502200c45de8c4f3e2c1821f2fc878cba97b1e6f8807d94930713aa1c86a67b9bf1e40221008581abfef2e30f957815fc89978423746b2086375ca8ecf359c85c2a5b7c88ad01410462bb73f76ca0994fcb8b4271e6fb7561f5c0f9ca0cf6485261c4a0dc894f4ab844c6cdfb97cd0b60ffb5018ffd6238f4d87270efb1d3ae37079b794a92d7ec95ffffffffd669f7d7958d40fc59d2253d88e0f248e29b599c80bbcec344a83dda5f9aa72c000000008a473044022078124c8beeaa825f9e0b30bff96e564dd859432f2d0cb3b72d3d5d93d38d7e930220691d233b6c0f995be5acb03d70a7f7a65b6bc9bdd426260f38a1346669507a3601410462bb73f76ca0994fcb8b4271e6fb7561f5c0f9ca0cf6485261c4a0dc894f4ab844c6cdfb97cd0b60ffb5018ffd6238f4d87270efb1d3ae37079b794a92d7ec95fffffffff878af0d93f5229a68166cf051fd372bb7a537232946e0a46f53636b4dafdaa4000000008c493046022100c717d1714551663f69c3c5759bdbb3a0fcd3fab023abc0e522fe6440de35d8290221008d9cbe25bffc44af2b18e81c58eb37293fd7fe1c2e7b46fc37ee8c96c50ab1e201410462bb73f76ca0994fcb8b4271e6fb7561f5c0f9ca0cf6485261c4a0dc894f4ab844c6cdfb97cd0b60ffb5018ffd6238f4d87270efb1d3ae37079b794a92d7ec95ffffffff27f2b668859cd7f2f894aa0fd2d9e60963bcd07c88973f425f999b8cbfd7a1e2000000008c493046022100e00847147cbf517bcc2f502f3ddc6d284358d102ed20d47a8aa788a62f0db780022100d17b2d6fa84dcaf1c95d88d7e7c30385aecf415588d749afd3ec81f6022cecd701410462bb73f76ca0994fcb8b4271e6fb7561f5c0f9ca0cf6485261c4a0dc894f4ab844c6cdfb97cd0b60ffb5018ffd6238f4d87270efb1d3ae37079b794a92d7ec95ffffffff0100c817a8040000001976a914b6efd80d99179f4f4ff6f4dd0a007d018c385d2188ac000000000100000001834537b2f1ce8ef9373a258e10545ce5a50b758df616cd4356e0032554ebd3c4000000008b483045022100e68f422dd7c34fdce11eeb4509ddae38201773dd62f284e8aa9d96f85099d0b002202243bd399ff96b649a0fad05fa759d6a882f0af8c90cf7632c2840c29070aec20141045e58067e815c2f464c6a2a15f987758374203895710c2d452442e28496ff38ba8f5fd901dc20e29e88477167fe4fc299bf818fd0d9e1632d467b2a3d9503b1aaffffffff0280d7e636030000001976a914f34c3e10eb387efe872acb614c89e78bfca7815d88ac404b4c00000000001976a914a84e272933aaf87e1715d7786c51dfaeb5b65a6f88ac00000000010000000143ac81c8e6f6ef307dfe17f3d906d999e23e0189fda838c5510d850927e03ae7000000008c4930460221009c87c344760a64cb8ae6685a3eec2c1ac1bed5b88c87de51acd0e124f266c16602210082d07c037359c3a257b5c63ebd90f5a5edf97b2ac1c434b08ca998839f346dd40141040ba7e521fa7946d12edbb1d1e95a15c34bd4398195e86433c92b431cd315f455fe30032ede69cad9d1e1ed6c3c4ec0dbfced53438c625462afb792dcb098544bffffffff0240420f00000000001976a9144676d1b820d63ec272f1900d59d43bc6463d96f888ac40420f00000000001976a914648d04341d00d7968b3405c034adc38d4d8fb9bd88ac00000000010000000248cc917501ea5c55f4a8d2009c0567c40cfe037c2e71af017d0a452ff705e3f1000000008b483045022100bf5fdc86dc5f08a5d5c8e43a8c9d5b1ed8c65562e280007b52b133021acd9acc02205e325d613e555f772802bf413d36ba807892ed1a690a77811d3033b3de226e0a01410429fa713b124484cb2bd7b5557b2c0b9df7b2b1fee61825eadc5ae6c37a9920d38bfccdc7dc3cb0c47d7b173dbc9db8d37db0a33ae487982c59c6f8606e9d1791ffffffff41ed70551dd7e841883ab8f0b16bf04176b7d1480e4f0af9f3d4c3595768d068000000008b4830450221008513ad65187b903aed1102d1d0c47688127658c51106753fed0151ce9c16b80902201432b9ebcb87bd04ceb2de66035fbbaf4bf8b00d1cfe41f1a1f7338f9ad79d210141049d4cf80125bf50be1709f718c07ad15d0fc612b7da1f5570dddc35f2a352f0f27c978b06820edca9ef982c35fda2d255afba340068c5035552368bc7200c1488ffffffff0100093d00000000001976a9148edb68822f1ad580b043c7b3df2e400f8699eb4888ac00000000\"), SER_NETWORK, PROTOCOL_VERSION);\n+    stream >> block;\n+\n+    CBloomFilter filter(10, 0.000001);\n+    // Match the last transaction\n+    filter.insert(uint256(\"0x0a2a92f0bda4727d0a13eaddf4dd9ac6b5c61a1429e6b2b818f19b15df0ac154\"));\n+\n+    CMerkleBlock merkleBlock(block, filter);\n+    BOOST_CHECK(merkleBlock.header.GetHash() == block.GetHash());\n+\n+    BOOST_CHECK(merkleBlock.vtx.size() == 1);\n+    tuple<unsigned int, uint256, vector<uint256> > tuple = merkleBlock.vtx[0];\n+\n+    BOOST_CHECK(get<2>(merkleBlock.vtx[0]).size() == 3);\n+    BOOST_CHECK(get<1>(merkleBlock.vtx[0]) == uint256(\"0x0a2a92f0bda4727d0a13eaddf4dd9ac6b5c61a1429e6b2b818f19b15df0ac154\"));\n+    BOOST_CHECK(get<0>(merkleBlock.vtx[0]) == 6);\n+    BOOST_CHECK(block.CheckMerkleBranch(get<1>(merkleBlock.vtx[0]), get<2>(merkleBlock.vtx[0]), get<0>(merkleBlock.vtx[0])) == block.hashMerkleRoot);\n+\n+    // Also match the 4th transaction\n+    filter.insert(uint256(\"0x02981fa052f0481dbc5868f4fc2166035a10f27a03cfd2de67326471df5bc041\"));\n+    merkleBlock = CMerkleBlock(block, filter);\n+    BOOST_CHECK(merkleBlock.header.GetHash() == block.GetHash());\n+\n+    BOOST_CHECK(merkleBlock.vtx.size() == 2);\n+\n+    BOOST_CHECK(get<2>(merkleBlock.vtx[0]).size() == 3);\n+    BOOST_CHECK(get<1>(merkleBlock.vtx[0]) == uint256(\"0x02981fa052f0481dbc5868f4fc2166035a10f27a03cfd2de67326471df5bc041\"));\n+    BOOST_CHECK(get<0>(merkleBlock.vtx[0]) == 3);\n+    BOOST_CHECK(block.CheckMerkleBranch(get<1>(merkleBlock.vtx[0]), get<2>(merkleBlock.vtx[0]), get<0>(merkleBlock.vtx[0])) == block.hashMerkleRoot);\n+\n+    BOOST_CHECK(merkleBlock.vtx[1] == tuple);\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "b02ddbedcba4f9d86b1aabeb71fe18ec03f9a41a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMDJkZGJlZGNiYTRmOWQ4NmIxYWFiZWI3MWZlMThlYzAzZjlhNDFh",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2012-08-19T03:45:19Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2013-01-16T17:48:02Z"
      },
      "message": "Relay CMerkleBlocks when asked for MSG_FILTERED_BLOCK",
      "tree": {
        "sha": "95b8b58eb53300a67d47b2419f218a1269de1ca8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/95b8b58eb53300a67d47b2419f218a1269de1ca8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b02ddbedcba4f9d86b1aabeb71fe18ec03f9a41a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b02ddbedcba4f9d86b1aabeb71fe18ec03f9a41a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b02ddbedcba4f9d86b1aabeb71fe18ec03f9a41a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b02ddbedcba4f9d86b1aabeb71fe18ec03f9a41a/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2878c67cb5e19c6ea8a013b606e82339c8fb8209",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2878c67cb5e19c6ea8a013b606e82339c8fb8209",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2878c67cb5e19c6ea8a013b606e82339c8fb8209"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 28,
      "deletions": 2
    },
    "files": [
      {
        "sha": "abb0174edd4160d665f645326ad07c9a6475ae99",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 2,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b02ddbedcba4f9d86b1aabeb71fe18ec03f9a41a/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b02ddbedcba4f9d86b1aabeb71fe18ec03f9a41a/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=b02ddbedcba4f9d86b1aabeb71fe18ec03f9a41a",
        "patch": "@@ -3068,15 +3068,37 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n             if (fDebugNet || (vInv.size() == 1))\n                 printf(\"received getdata for: %s\\n\", inv.ToString().c_str());\n \n-            if (inv.type == MSG_BLOCK)\n+            if (inv.type == MSG_BLOCK || inv.type == MSG_FILTERED_BLOCK)\n             {\n                 // Send block from disk\n                 map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(inv.hash);\n                 if (mi != mapBlockIndex.end())\n                 {\n                     CBlock block;\n                     block.ReadFromDisk((*mi).second);\n-                    pfrom->PushMessage(\"block\", block);\n+                    if (inv.type == MSG_BLOCK)\n+                        pfrom->PushMessage(\"block\", block);\n+                    else // MSG_FILTERED_BLOCK)\n+                    {\n+                        LOCK(pfrom->cs_filter);\n+                        if (pfrom->pfilter)\n+                        {\n+                            CMerkleBlock merkleBlock(block, *pfrom->pfilter);\n+                            typedef boost::tuple<unsigned int, uint256, std::vector<uint256> > TupleType;\n+                            // CMerkleBlock just contains hashes, so also push any transactions in the block the client did not see \n+                            // This avoids hurting performance by pointlessly requiring a round-trip\n+                            // Note that there is currently no way for a node to request any single transactions we didnt send here -\n+                            // they must either disconnect and retry or request the full block.\n+                            // Thus, the protocol spec specified allows for us to provide duplicate txn here,\n+                            // however we MUST always provide at least what the remote peer needs\n+                            BOOST_FOREACH(TupleType& tuple, merkleBlock.vtx)\n+                                if (!pfrom->setInventoryKnown.count(CInv(MSG_TX, get<1>(tuple))))\n+                                    pfrom->PushMessage(\"tx\", block.vtx[get<0>(tuple)]);\n+                            pfrom->PushMessage(\"merkleblock\", merkleBlock);\n+                        }\n+                        // else\n+                            // no response\n+                    }\n \n                     // Trigger them to send a getblocks request for the next batch of inventory\n                     if (inv.hash == pfrom->hashContinue)"
      },
      {
        "sha": "7b42f5270b33bfdb9707ef234fd39d468f45cae3",
        "filename": "src/protocol.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b02ddbedcba4f9d86b1aabeb71fe18ec03f9a41a/src/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b02ddbedcba4f9d86b1aabeb71fe18ec03f9a41a/src/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.cpp?ref=b02ddbedcba4f9d86b1aabeb71fe18ec03f9a41a",
        "patch": "@@ -17,6 +17,7 @@ static const char* ppszTypeName[] =\n     \"ERROR\",\n     \"tx\",\n     \"block\",\n+    \"filtered block\"\n };\n \n CMessageHeader::CMessageHeader()"
      },
      {
        "sha": "f5c162054e6b664aa564980d401ae7a5ba4e6c50",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b02ddbedcba4f9d86b1aabeb71fe18ec03f9a41a/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b02ddbedcba4f9d86b1aabeb71fe18ec03f9a41a/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=b02ddbedcba4f9d86b1aabeb71fe18ec03f9a41a",
        "patch": "@@ -138,6 +138,9 @@ enum\n {\n     MSG_TX = 1,\n     MSG_BLOCK,\n+    // Nodes may always request a MSG_FILTERED_BLOCK in a getdata, however,\n+    // MSG_FILTERED_BLOCK should not appear in any invs except as a part of getdata.\n+    MSG_FILTERED_BLOCK,\n };\n \n #endif // __INCLUDED_PROTOCOL_H__"
      }
    ]
  },
  {
    "sha": "4c8fc1a5885634c3b463d5d44337d81cc5b1456b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YzhmYzFhNTg4NTYzNGMzYjQ2M2Q1ZDQ0MzM3ZDgxY2M1YjE0NTZi",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2012-08-21T01:10:25Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2013-01-16T17:48:02Z"
      },
      "message": "Let a node opt out of tx invs before we get a their bloom filter\n\nNote that the default value for fRelayTxes is false, meaning we\nnow no longer relay tx inv messages before receiving the remote\npeer's version message.",
      "tree": {
        "sha": "afd148bb61784fc11a2e12bac84b46a99d887063",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/afd148bb61784fc11a2e12bac84b46a99d887063"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4c8fc1a5885634c3b463d5d44337d81cc5b1456b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4c8fc1a5885634c3b463d5d44337d81cc5b1456b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4c8fc1a5885634c3b463d5d44337d81cc5b1456b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4c8fc1a5885634c3b463d5d44337d81cc5b1456b/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b02ddbedcba4f9d86b1aabeb71fe18ec03f9a41a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b02ddbedcba4f9d86b1aabeb71fe18ec03f9a41a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b02ddbedcba4f9d86b1aabeb71fe18ec03f9a41a"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 14,
      "deletions": 0
    },
    "files": [
      {
        "sha": "1c1de636a8fead34c7012f858096a8641ae4bc92",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c8fc1a5885634c3b463d5d44337d81cc5b1456b/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c8fc1a5885634c3b463d5d44337d81cc5b1456b/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=4c8fc1a5885634c3b463d5d44337d81cc5b1456b",
        "patch": "@@ -2838,6 +2838,10 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n             vRecv >> pfrom->strSubVer;\n         if (!vRecv.empty())\n             vRecv >> pfrom->nStartingHeight;\n+        if (!vRecv.empty())\n+            vRecv >> pfrom->fRelayTxes; // set to true after we get the first filter* message\n+        else\n+            pfrom->fRelayTxes = true;\n \n         if (pfrom->fInbound && addrMe.IsRoutable())\n         {\n@@ -3391,6 +3395,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n             delete pfrom->pfilter;\n             pfrom->pfilter = new CBloomFilter(filter);\n         }\n+        pfrom->fRelayTxes = true;\n     }\n \n \n@@ -3419,6 +3424,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n         LOCK(pfrom->cs_filter);\n         delete pfrom->pfilter;\n         pfrom->pfilter = NULL;\n+        pfrom->fRelayTxes = true;\n     }\n \n "
      },
      {
        "sha": "319739429ccf22bb5268310c7a5c31c9eca71c4e",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c8fc1a5885634c3b463d5d44337d81cc5b1456b/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c8fc1a5885634c3b463d5d44337d81cc5b1456b/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=4c8fc1a5885634c3b463d5d44337d81cc5b1456b",
        "patch": "@@ -2031,6 +2031,8 @@ void RelayTransaction(const CTransaction& tx, const uint256& hash, const CDataSt\n     LOCK(cs_vNodes);\n     BOOST_FOREACH(CNode* pnode, vNodes)\n     {\n+        if(!pnode->fRelayTxes)\n+            continue;\n         LOCK(pnode->cs_filter);\n         if (pnode->pfilter)\n         {"
      },
      {
        "sha": "087b2dd6a24f734d195eef9d45fd42c8bbc6d364",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c8fc1a5885634c3b463d5d44337d81cc5b1456b/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c8fc1a5885634c3b463d5d44337d81cc5b1456b/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=4c8fc1a5885634c3b463d5d44337d81cc5b1456b",
        "patch": "@@ -152,6 +152,11 @@ class CNode\n     bool fNetworkNode;\n     bool fSuccessfullyConnected;\n     bool fDisconnect;\n+    // We use fRelayTxes for two purposes -\n+    // a) it allows us to not relay tx invs before receiving the peer's version message\n+    // b) the peer may tell us in their version message that we should not relay tx invs\n+    //    until they have initialized their bloom filter.\n+    bool fRelayTxes;\n     CSemaphoreGrant grantOutbound;\n     CCriticalSection cs_filter;\n     CBloomFilter* pfilter;\n@@ -211,6 +216,7 @@ class CNode\n         nStartingHeight = -1;\n         fGetAddr = false;\n         nMisbehavior = 0;\n+        fRelayTxes = false;\n         setInventoryKnown.max_size(SendBufferSize() / 1000);\n         pfilter = NULL;\n "
      }
    ]
  },
  {
    "sha": "b1f99bed6f0fbbe94e6a3161b49b3f225dec8374",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMWY5OWJlZDZmMGZiYmU5NGU2YTMxNjFiNDliM2YyMjVkZWM4Mzc0",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2012-11-02T22:33:50Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2013-01-16T17:48:02Z"
      },
      "message": "Add a nTweak to bloom filters to tweak the seed.",
      "tree": {
        "sha": "ae47ef2b17af591fdcd3a07e1e957513a694304d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ae47ef2b17af591fdcd3a07e1e957513a694304d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b1f99bed6f0fbbe94e6a3161b49b3f225dec8374",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b1f99bed6f0fbbe94e6a3161b49b3f225dec8374",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b1f99bed6f0fbbe94e6a3161b49b3f225dec8374",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b1f99bed6f0fbbe94e6a3161b49b3f225dec8374/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4c8fc1a5885634c3b463d5d44337d81cc5b1456b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4c8fc1a5885634c3b463d5d44337d81cc5b1456b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4c8fc1a5885634c3b463d5d44337d81cc5b1456b"
      }
    ],
    "stats": {
      "total": 81,
      "additions": 57,
      "deletions": 24
    },
    "files": [
      {
        "sha": "65f9b021bfe26fbf40c4e48276b126c19f4ff6e8",
        "filename": "src/bloom.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b1f99bed6f0fbbe94e6a3161b49b3f225dec8374/src/bloom.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b1f99bed6f0fbbe94e6a3161b49b3f225dec8374/src/bloom.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.cpp?ref=b1f99bed6f0fbbe94e6a3161b49b3f225dec8374",
        "patch": "@@ -15,22 +15,23 @@ using namespace std;\n \n static const unsigned char bit_mask[8] = {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80};\n \n-CBloomFilter::CBloomFilter(unsigned int nElements, double nFPRate) :\n+CBloomFilter::CBloomFilter(unsigned int nElements, double nFPRate, unsigned int nTweakIn) :\n // The ideal size for a bloom filter with a given number of elements and false positive rate is:\n // - nElements * log(fp rate) / ln(2)^2\n // We ignore filter parameters which will create a bloom filter larger than the protocol limits\n vData(min((unsigned int)(-1  / LN2SQUARED * nElements * log(nFPRate)), MAX_BLOOM_FILTER_SIZE * 8) / 8),\n // The ideal number of hash functions is filter size * ln(2) / number of elements\n // Again, we ignore filter parameters which will create a bloom filter with more hash functions than the protocol limits\n // See http://en.wikipedia.org/wiki/Bloom_filter for an explanation of these formulas\n-nHashFuncs(min((unsigned int)(vData.size() * 8 / nElements * LN2), MAX_HASH_FUNCS))\n+nHashFuncs(min((unsigned int)(vData.size() * 8 / nElements * LN2), MAX_HASH_FUNCS)),\n+nTweak(nTweakIn)\n {\n }\n \n inline unsigned int CBloomFilter::Hash(unsigned int nHashNum, const std::vector<unsigned char>& vDataToHash) const\n {\n     // 0xFBA4C795 chosen as it guarantees a reasonable bit difference between nHashNum values.\n-    return MurmurHash3(nHashNum * 0xFBA4C795, vDataToHash) % (vData.size() * 8);\n+    return MurmurHash3(nHashNum * 0xFBA4C795 + nTweak, vDataToHash) % (vData.size() * 8);\n }\n \n void CBloomFilter::insert(const vector<unsigned char>& vKey)"
      },
      {
        "sha": "a59b1d99f503bda65f16722e15cb196967ce4b89",
        "filename": "src/bloom.h",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b1f99bed6f0fbbe94e6a3161b49b3f225dec8374/src/bloom.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b1f99bed6f0fbbe94e6a3161b49b3f225dec8374/src/bloom.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.h?ref=b1f99bed6f0fbbe94e6a3161b49b3f225dec8374",
        "patch": "@@ -33,6 +33,7 @@ class CBloomFilter\n private:\n     std::vector<unsigned char> vData;\n     unsigned int nHashFuncs;\n+    unsigned int nTweak;\n \n     unsigned int Hash(unsigned int nHashNum, const std::vector<unsigned char>& vDataToHash) const;\n \n@@ -41,7 +42,9 @@ class CBloomFilter\n     // Note that if the given parameters will result in a filter outside the bounds of the protocol limits,\n     // the filter created will be as close to the given parameters as possible within the protocol limits.\n     // This will apply if nFPRate is very low or nElements is unreasonably high.\n-    CBloomFilter(unsigned int nElements, double nFPRate);\n+    // nTweak is a constant which is added to the seed value passed to the hash function\n+    // It should generally always be a random value (and is largely only exposed for unit testing)\n+    CBloomFilter(unsigned int nElements, double nFPRate, unsigned int nTweak);\n     // Using a filter initialized with this results in undefined behavior\n     // Should only be used for deserialization\n     CBloomFilter() {}\n@@ -50,6 +53,7 @@ class CBloomFilter\n     (\n         READWRITE(vData);\n         READWRITE(nHashFuncs);\n+        READWRITE(nTweak);\n     )\n \n     void insert(const std::vector<unsigned char>& vKey);"
      },
      {
        "sha": "7bb5ad8a8e29492f6bebcab3e4e0f56c114d1997",
        "filename": "src/test/bloom_tests.cpp",
        "status": "modified",
        "additions": 48,
        "deletions": 20,
        "changes": 68,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b1f99bed6f0fbbe94e6a3161b49b3f225dec8374/src/test/bloom_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b1f99bed6f0fbbe94e6a3161b49b3f225dec8374/src/test/bloom_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bloom_tests.cpp?ref=b1f99bed6f0fbbe94e6a3161b49b3f225dec8374",
        "patch": "@@ -14,7 +14,7 @@ BOOST_AUTO_TEST_SUITE(bloom_tests)\n \n BOOST_AUTO_TEST_CASE(bloom_create_insert_serialize)\n {\n-    CBloomFilter filter(3, 0.01);\n+    CBloomFilter filter(3, 0.01, 0);\n \n     filter.insert(ParseHex(\"99108ad8ed9bb6274d3980bab5a85c048f0950c8\"));\n     BOOST_CHECK_MESSAGE( filter.contains(ParseHex(\"99108ad8ed9bb6274d3980bab5a85c048f0950c8\")), \"BloomFilter doesn't contain just-inserted object!\");\n@@ -30,7 +30,35 @@ BOOST_AUTO_TEST_CASE(bloom_create_insert_serialize)\n     CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n     filter.Serialize(stream, SER_NETWORK, PROTOCOL_VERSION);\n \n-    vector<unsigned char> vch = ParseHex(\"03614e9b05000000\");\n+    vector<unsigned char> vch = ParseHex(\"03614e9b0500000000000000\");\n+    vector<char> expected(vch.size());\n+\n+    for (unsigned int i = 0; i < vch.size(); i++)\n+        expected[i] = (char)vch[i];\n+\n+    BOOST_CHECK_EQUAL_COLLECTIONS(stream.begin(), stream.end(), expected.begin(), expected.end());\n+}\n+\n+BOOST_AUTO_TEST_CASE(bloom_create_insert_serialize_with_tweak)\n+{\n+    // Same test as bloom_create_insert_serialize, but we add a nTweak of 100\n+    CBloomFilter filter(3, 0.01, 2147483649);\n+\n+    filter.insert(ParseHex(\"99108ad8ed9bb6274d3980bab5a85c048f0950c8\"));\n+    BOOST_CHECK_MESSAGE( filter.contains(ParseHex(\"99108ad8ed9bb6274d3980bab5a85c048f0950c8\")), \"BloomFilter doesn't contain just-inserted object!\");\n+    // One bit different in first byte\n+    BOOST_CHECK_MESSAGE(!filter.contains(ParseHex(\"19108ad8ed9bb6274d3980bab5a85c048f0950c8\")), \"BloomFilter contains something it shouldn't!\");\n+\n+    filter.insert(ParseHex(\"b5a2c786d9ef4658287ced5914b37a1b4aa32eee\"));\n+    BOOST_CHECK_MESSAGE(filter.contains(ParseHex(\"b5a2c786d9ef4658287ced5914b37a1b4aa32eee\")), \"BloomFilter doesn't contain just-inserted object (2)!\");\n+\n+    filter.insert(ParseHex(\"b9300670b4c5366e95b2699e8b18bc75e5f729c5\"));\n+    BOOST_CHECK_MESSAGE(filter.contains(ParseHex(\"b9300670b4c5366e95b2699e8b18bc75e5f729c5\")), \"BloomFilter doesn't contain just-inserted object (3)!\");\n+\n+    CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n+    filter.Serialize(stream, SER_NETWORK, PROTOCOL_VERSION);\n+\n+    vector<unsigned char> vch = ParseHex(\"03ce42990500000001000080\");\n     vector<char> expected(vch.size());\n \n     for (unsigned int i = 0; i < vch.size(); i++)\n@@ -50,15 +78,15 @@ BOOST_AUTO_TEST_CASE(bloom_create_insert_key)\n     CSecret secret = vchSecret.GetSecret(fCompressed);\n     key.SetSecret(secret, fCompressed);\n \n-    CBloomFilter filter(2, 0.001);\n+    CBloomFilter filter(2, 0.001, 0);\n     filter.insert(key.GetPubKey().Raw());\n     uint160 hash = key.GetPubKey().GetID();\n     filter.insert(vector<unsigned char>(hash.begin(), hash.end()));\n \n     CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n     filter.Serialize(stream, SER_NETWORK, PROTOCOL_VERSION);\n \n-    vector<unsigned char> vch = ParseHex(\"038fc16b08000000\");\n+    vector<unsigned char> vch = ParseHex(\"038fc16b0800000000000000\");\n     vector<char> expected(vch.size());\n \n     for (unsigned int i = 0; i < vch.size(); i++)\n@@ -81,37 +109,37 @@ BOOST_AUTO_TEST_CASE(bloom_match)\n     CTransaction spendingTx;\n     spendStream >> spendingTx;\n \n-    CBloomFilter filter(10, 0.000001);\n+    CBloomFilter filter(10, 0.000001, 0);\n     filter.insert(uint256(\"0xb4749f017444b051c44dfd2720e88f314ff94f3dd6d56d40ef65854fcd7fff6b\"));\n     BOOST_CHECK_MESSAGE(filter.IsRelevantAndUpdate(tx, tx.GetHash()), \"Simple Bloom filter didn't match tx hash\");\n \n-    filter = CBloomFilter(10, 0.000001);\n+    filter = CBloomFilter(10, 0.000001, 0);\n     // byte-reversed tx hash\n     filter.insert(ParseHex(\"6bff7fcd4f8565ef406dd5d63d4ff94f318fe82027fd4dc451b04474019f74b4\"));\n     BOOST_CHECK_MESSAGE(filter.IsRelevantAndUpdate(tx, tx.GetHash()), \"Simple Bloom filter didn't match manually serialized tx hash\");\n \n-    filter = CBloomFilter(10, 0.000001);\n+    filter = CBloomFilter(10, 0.000001, 0);\n     filter.insert(ParseHex(\"30450220070aca44506c5cef3a16ed519d7c3c39f8aab192c4e1c90d065f37b8a4af6141022100a8e160b856c2d43d27d8fba71e5aef6405b8643ac4cb7cb3c462aced7f14711a01\"));\n     BOOST_CHECK_MESSAGE(filter.IsRelevantAndUpdate(tx, tx.GetHash()), \"Simple Bloom filter didn't match input signature\");\n \n-    filter = CBloomFilter(10, 0.000001);\n+    filter = CBloomFilter(10, 0.000001, 0);\n     filter.insert(ParseHex(\"046d11fee51b0e60666d5049a9101a72741df480b96ee26488a4d3466b95c9a40ac5eeef87e10a5cd336c19a84565f80fa6c547957b7700ff4dfbdefe76036c339\"));\n     BOOST_CHECK_MESSAGE(filter.IsRelevantAndUpdate(tx, tx.GetHash()), \"Simple Bloom filter didn't match input pub key\");\n \n-    filter = CBloomFilter(10, 0.000001);\n+    filter = CBloomFilter(10, 0.000001, 0);\n     filter.insert(ParseHex(\"04943fdd508053c75000106d3bc6e2754dbcff19\"));\n     BOOST_CHECK_MESSAGE(filter.IsRelevantAndUpdate(tx, tx.GetHash()), \"Simple Bloom filter didn't match output address\");\n     BOOST_CHECK_MESSAGE(filter.IsRelevantAndUpdate(spendingTx, spendingTx.GetHash()), \"Simple Bloom filter didn't add output\");\n \n-    filter = CBloomFilter(10, 0.000001);\n+    filter = CBloomFilter(10, 0.000001, 0);\n     filter.insert(ParseHex(\"a266436d2965547608b9e15d9032a7b9d64fa431\"));\n     BOOST_CHECK_MESSAGE(filter.IsRelevantAndUpdate(tx, tx.GetHash()), \"Simple Bloom filter didn't match output address\");\n \n-    filter = CBloomFilter(10, 0.000001);\n+    filter = CBloomFilter(10, 0.000001, 0);\n     filter.insert(COutPoint(uint256(\"0x90c122d70786e899529d71dbeba91ba216982fb6ba58f3bdaab65e73b7e9260b\"), 0));\n     BOOST_CHECK_MESSAGE(filter.IsRelevantAndUpdate(tx, tx.GetHash()), \"Simple Bloom filter didn't match COutPoint\");\n \n-    filter = CBloomFilter(10, 0.000001);\n+    filter = CBloomFilter(10, 0.000001, 0);\n     COutPoint prevOutPoint(uint256(\"0x90c122d70786e899529d71dbeba91ba216982fb6ba58f3bdaab65e73b7e9260b\"), 0);\n     {\n         vector<unsigned char> data(32 + sizeof(unsigned int));\n@@ -121,19 +149,19 @@ BOOST_AUTO_TEST_CASE(bloom_match)\n     }\n     BOOST_CHECK_MESSAGE(filter.IsRelevantAndUpdate(tx, tx.GetHash()), \"Simple Bloom filter didn't match manually serialized COutPoint\");\n \n-    filter = CBloomFilter(10, 0.000001);\n+    filter = CBloomFilter(10, 0.000001, 0);\n     filter.insert(uint256(\"00000009e784f32f62ef849763d4f45b98e07ba658647343b915ff832b110436\"));\n     BOOST_CHECK_MESSAGE(!filter.IsRelevantAndUpdate(tx, tx.GetHash()), \"Simple Bloom filter matched random tx hash\");\n \n-    filter = CBloomFilter(10, 0.000001);\n+    filter = CBloomFilter(10, 0.000001, 0);\n     filter.insert(ParseHex(\"0000006d2965547608b9e15d9032a7b9d64fa431\"));\n     BOOST_CHECK_MESSAGE(!filter.IsRelevantAndUpdate(tx, tx.GetHash()), \"Simple Bloom filter matched random address\");\n \n-    filter = CBloomFilter(10, 0.000001);\n+    filter = CBloomFilter(10, 0.000001, 0);\n     filter.insert(COutPoint(uint256(\"0x90c122d70786e899529d71dbeba91ba216982fb6ba58f3bdaab65e73b7e9260b\"), 1));\n     BOOST_CHECK_MESSAGE(!filter.IsRelevantAndUpdate(tx, tx.GetHash()), \"Simple Bloom filter matched COutPoint for an output we didn't care about\");\n \n-    filter = CBloomFilter(10, 0.000001);\n+    filter = CBloomFilter(10, 0.000001, 0);\n     filter.insert(COutPoint(uint256(\"0x000000d70786e899529d71dbeba91ba216982fb6ba58f3bdaab65e73b7e9260b\"), 0));\n     BOOST_CHECK_MESSAGE(!filter.IsRelevantAndUpdate(tx, tx.GetHash()), \"Simple Bloom filter matched COutPoint for an output we didn't care about\");\n }\n@@ -146,7 +174,7 @@ BOOST_AUTO_TEST_CASE(merkle_block_1)\n     CDataStream stream(ParseHex(\"0100000090f0a9f110702f808219ebea1173056042a714bad51b916cb6800000000000005275289558f51c9966699404ae2294730c3c9f9bda53523ce50e9b95e558da2fdb261b4d4c86041b1ab1bf930901000000010000000000000000000000000000000000000000000000000000000000000000ffffffff07044c86041b0146ffffffff0100f2052a01000000434104e18f7afbe4721580e81e8414fc8c24d7cfacf254bb5c7b949450c3e997c2dc1242487a8169507b631eb3771f2b425483fb13102c4eb5d858eef260fe70fbfae0ac00000000010000000196608ccbafa16abada902780da4dc35dafd7af05fa0da08cf833575f8cf9e836000000004a493046022100dab24889213caf43ae6adc41cf1c9396c08240c199f5225acf45416330fd7dbd022100fe37900e0644bf574493a07fc5edba06dbc07c311b947520c2d514bc5725dcb401ffffffff0100f2052a010000001976a914f15d1921f52e4007b146dfa60f369ed2fc393ce288ac000000000100000001fb766c1288458c2bafcfec81e48b24d98ec706de6b8af7c4e3c29419bfacb56d000000008c493046022100f268ba165ce0ad2e6d93f089cfcd3785de5c963bb5ea6b8c1b23f1ce3e517b9f022100da7c0f21adc6c401887f2bfd1922f11d76159cbc597fbd756a23dcbb00f4d7290141042b4e8625a96127826915a5b109852636ad0da753c9e1d5606a50480cd0c40f1f8b8d898235e571fe9357d9ec842bc4bba1827daaf4de06d71844d0057707966affffffff0280969800000000001976a9146963907531db72d0ed1a0cfb471ccb63923446f388ac80d6e34c000000001976a914f0688ba1c0d1ce182c7af6741e02658c7d4dfcd388ac000000000100000002c40297f730dd7b5a99567eb8d27b78758f607507c52292d02d4031895b52f2ff010000008b483045022100f7edfd4b0aac404e5bab4fd3889e0c6c41aa8d0e6fa122316f68eddd0a65013902205b09cc8b2d56e1cd1f7f2fafd60a129ed94504c4ac7bdc67b56fe67512658b3e014104732012cb962afa90d31b25d8fb0e32c94e513ab7a17805c14ca4c3423e18b4fb5d0e676841733cb83abaf975845c9f6f2a8097b7d04f4908b18368d6fc2d68ecffffffffca5065ff9617cbcba45eb23726df6498a9b9cafed4f54cbab9d227b0035ddefb000000008a473044022068010362a13c7f9919fa832b2dee4e788f61f6f5d344a7c2a0da6ae740605658022006d1af525b9a14a35c003b78b72bd59738cd676f845d1ff3fc25049e01003614014104732012cb962afa90d31b25d8fb0e32c94e513ab7a17805c14ca4c3423e18b4fb5d0e676841733cb83abaf975845c9f6f2a8097b7d04f4908b18368d6fc2d68ecffffffff01001ec4110200000043410469ab4181eceb28985b9b4e895c13fa5e68d85761b7eee311db5addef76fa8621865134a221bd01f28ec9999ee3e021e60766e9d1f3458c115fb28650605f11c9ac000000000100000001cdaf2f758e91c514655e2dc50633d1e4c84989f8aa90a0dbc883f0d23ed5c2fa010000008b48304502207ab51be6f12a1962ba0aaaf24a20e0b69b27a94fac5adf45aa7d2d18ffd9236102210086ae728b370e5329eead9accd880d0cb070aea0c96255fae6c4f1ddcce1fd56e014104462e76fd4067b3a0aa42070082dcb0bf2f388b6495cf33d789904f07d0f55c40fbd4b82963c69b3dc31895d0c772c812b1d5fbcade15312ef1c0e8ebbb12dcd4ffffffff02404b4c00000000001976a9142b6ba7c9d796b75eef7942fc9288edd37c32f5c388ac002d3101000000001976a9141befba0cdc1ad56529371864d9f6cb042faa06b588ac000000000100000001b4a47603e71b61bc3326efd90111bf02d2f549b067f4c4a8fa183b57a0f800cb010000008a4730440220177c37f9a505c3f1a1f0ce2da777c339bd8339ffa02c7cb41f0a5804f473c9230220585b25a2ee80eb59292e52b987dad92acb0c64eced92ed9ee105ad153cdb12d001410443bd44f683467e549dae7d20d1d79cbdb6df985c6e9c029c8d0c6cb46cc1a4d3cf7923c5021b27f7a0b562ada113bc85d5fda5a1b41e87fe6e8802817cf69996ffffffff0280651406000000001976a9145505614859643ab7b547cd7f1f5e7e2a12322d3788ac00aa0271000000001976a914ea4720a7a52fc166c55ff2298e07baf70ae67e1b88ac00000000010000000586c62cd602d219bb60edb14a3e204de0705176f9022fe49a538054fb14abb49e010000008c493046022100f2bc2aba2534becbdf062eb993853a42bbbc282083d0daf9b4b585bd401aa8c9022100b1d7fd7ee0b95600db8535bbf331b19eed8d961f7a8e54159c53675d5f69df8c014104462e76fd4067b3a0aa42070082dcb0bf2f388b6495cf33d789904f07d0f55c40fbd4b82963c69b3dc31895d0c772c812b1d5fbcade15312ef1c0e8ebbb12dcd4ffffffff03ad0e58ccdac3df9dc28a218bcf6f1997b0a93306faaa4b3a28ae83447b2179010000008b483045022100be12b2937179da88599e27bb31c3525097a07cdb52422d165b3ca2f2020ffcf702200971b51f853a53d644ebae9ec8f3512e442b1bcb6c315a5b491d119d10624c83014104462e76fd4067b3a0aa42070082dcb0bf2f388b6495cf33d789904f07d0f55c40fbd4b82963c69b3dc31895d0c772c812b1d5fbcade15312ef1c0e8ebbb12dcd4ffffffff2acfcab629bbc8685792603762c921580030ba144af553d271716a95089e107b010000008b483045022100fa579a840ac258871365dd48cd7552f96c8eea69bd00d84f05b283a0dab311e102207e3c0ee9234814cfbb1b659b83671618f45abc1326b9edcc77d552a4f2a805c0014104462e76fd4067b3a0aa42070082dcb0bf2f388b6495cf33d789904f07d0f55c40fbd4b82963c69b3dc31895d0c772c812b1d5fbcade15312ef1c0e8ebbb12dcd4ffffffffdcdc6023bbc9944a658ddc588e61eacb737ddf0a3cd24f113b5a8634c517fcd2000000008b4830450221008d6df731df5d32267954bd7d2dda2302b74c6c2a6aa5c0ca64ecbabc1af03c75022010e55c571d65da7701ae2da1956c442df81bbf076cdbac25133f99d98a9ed34c014104462e76fd4067b3a0aa42070082dcb0bf2f388b6495cf33d789904f07d0f55c40fbd4b82963c69b3dc31895d0c772c812b1d5fbcade15312ef1c0e8ebbb12dcd4ffffffffe15557cd5ce258f479dfd6dc6514edf6d7ed5b21fcfa4a038fd69f06b83ac76e010000008b483045022023b3e0ab071eb11de2eb1cc3a67261b866f86bf6867d4558165f7c8c8aca2d86022100dc6e1f53a91de3efe8f63512850811f26284b62f850c70ca73ed5de8771fb451014104462e76fd4067b3a0aa42070082dcb0bf2f388b6495cf33d789904f07d0f55c40fbd4b82963c69b3dc31895d0c772c812b1d5fbcade15312ef1c0e8ebbb12dcd4ffffffff01404b4c00000000001976a9142b6ba7c9d796b75eef7942fc9288edd37c32f5c388ac00000000010000000166d7577163c932b4f9690ca6a80b6e4eb001f0a2fa9023df5595602aae96ed8d000000008a4730440220262b42546302dfb654a229cefc86432b89628ff259dc87edd1154535b16a67e102207b4634c020a97c3e7bbd0d4d19da6aa2269ad9dded4026e896b213d73ca4b63f014104979b82d02226b3a4597523845754d44f13639e3bf2df5e82c6aab2bdc79687368b01b1ab8b19875ae3c90d661a3d0a33161dab29934edeb36aa01976be3baf8affffffff02404b4c00000000001976a9144854e695a02af0aeacb823ccbc272134561e0a1688ac40420f00000000001976a914abee93376d6b37b5c2940655a6fcaf1c8e74237988ac0000000001000000014e3f8ef2e91349a9059cb4f01e54ab2597c1387161d3da89919f7ea6acdbb371010000008c49304602210081f3183471a5ca22307c0800226f3ef9c353069e0773ac76bb580654d56aa523022100d4c56465bdc069060846f4fbf2f6b20520b2a80b08b168b31e66ddb9c694e240014104976c79848e18251612f8940875b2b08d06e6dc73b9840e8860c066b7e87432c477e9a59a453e71e6d76d5fe34058b800a098fc1740ce3012e8fc8a00c96af966ffffffff02c0e1e400000000001976a9144134e75a6fcb6042034aab5e18570cf1f844f54788ac404b4c00000000001976a9142b6ba7c9d796b75eef7942fc9288edd37c32f5c388ac00000000\"), SER_NETWORK, PROTOCOL_VERSION);\n     stream >> block;\n \n-    CBloomFilter filter(10, 0.000001);\n+    CBloomFilter filter(10, 0.000001, 0);\n     // Match the last transaction\n     filter.insert(uint256(\"0x74d681e0e03bafa802c8aa084379aa98d9fcd632ddc2ed9782b586ec87451f20\"));\n \n@@ -184,7 +212,7 @@ BOOST_AUTO_TEST_CASE(merkle_block_2)\n     CDataStream stream(ParseHex(\"0100000050120119172a610421a6c3011dd330d9df07b63616c2cc1f1cd00200000000006657a9252aacd5c0b2940996ecff952228c3067cc38d4885efb5a4ac4247e9f337221b4d4c86041b0f2b57100401000000010000000000000000000000000000000000000000000000000000000000000000ffffffff08044c86041b020602ffffffff0100f2052a010000004341041b0e8c2567c12536aa13357b79a073dc4444acb83c4ec7a0e2f99dd7457516c5817242da796924ca4e99947d087fedf9ce467cb9f7c6287078f801df276fdf84ac000000000100000001032e38e9c0a84c6046d687d10556dcacc41d275ec55fc00779ac88fdf357a187000000008c493046022100c352d3dd993a981beba4a63ad15c209275ca9470abfcd57da93b58e4eb5dce82022100840792bc1f456062819f15d33ee7055cf7b5ee1af1ebcc6028d9cdb1c3af7748014104f46db5e9d61a9dc27b8d64ad23e7383a4e6ca164593c2527c038c0857eb67ee8e825dca65046b82c9331586c82e0fd1f633f25f87c161bc6f8a630121df2b3d3ffffffff0200e32321000000001976a914c398efa9c392ba6013c5e04ee729755ef7f58b3288ac000fe208010000001976a914948c765a6914d43f2a7ac177da2c2f6b52de3d7c88ac000000000100000001c33ebff2a709f13d9f9a7569ab16a32786af7d7e2de09265e41c61d078294ecf010000008a4730440220032d30df5ee6f57fa46cddb5eb8d0d9fe8de6b342d27942ae90a3231e0ba333e02203deee8060fdc70230a7f5b4ad7d7bc3e628cbe219a886b84269eaeb81e26b4fe014104ae31c31bf91278d99b8377a35bbce5b27d9fff15456839e919453fc7b3f721f0ba403ff96c9deeb680e5fd341c0fc3a7b90da4631ee39560639db462e9cb850fffffffff0240420f00000000001976a914b0dcbf97eabf4404e31d952477ce822dadbe7e1088acc060d211000000001976a9146b1281eec25ab4e1e0793ff4e08ab1abb3409cd988ac0000000001000000010b6072b386d4a773235237f64c1126ac3b240c84b917a3909ba1c43ded5f51f4000000008c493046022100bb1ad26df930a51cce110cf44f7a48c3c561fd977500b1ae5d6b6fd13d0b3f4a022100c5b42951acedff14abba2736fd574bdb465f3e6f8da12e2c5303954aca7f78f3014104a7135bfe824c97ecc01ec7d7e336185c81e2aa2c41ab175407c09484ce9694b44953fcb751206564a9c24dd094d42fdbfdd5aad3e063ce6af4cfaaea4ea14fbbffffffff0140420f00000000001976a91439aa3d569e06a1d7926dc4be1193c99bf2eb9ee088ac00000000\"), SER_NETWORK, PROTOCOL_VERSION);\n     stream >> block;\n \n-    CBloomFilter filter(10, 0.000001);\n+    CBloomFilter filter(10, 0.000001, 0);\n     // Match the first transaction\n     filter.insert(uint256(\"0x8c14f0db3df150123e6f3dbbf30f8b955a8249b62ac1d1ff16284aefa3d06d87\"));\n \n@@ -235,7 +263,7 @@ BOOST_AUTO_TEST_CASE(merkle_block_3_and_serialize)\n     CDataStream stream(ParseHex(\"0100000079cda856b143d9db2c1caff01d1aecc8630d30625d10e8b4b8b0000000000000b50cc069d6a3e33e3ff84a5c41d9d3febe7c770fdcc96b2c3ff60abe184f196367291b4d4c86041b8fa45d630101000000010000000000000000000000000000000000000000000000000000000000000000ffffffff08044c86041b020a02ffffffff0100f2052a01000000434104ecd3229b0571c3be876feaac0442a9f13c5a572742927af1dc623353ecf8c202225f64868137a18cdd85cbbb4c74fbccfd4f49639cf1bdc94a5672bb15ad5d4cac00000000\"), SER_NETWORK, PROTOCOL_VERSION);\n     stream >> block;\n \n-    CBloomFilter filter(10, 0.000001);\n+    CBloomFilter filter(10, 0.000001, 0);\n     // Match the only transaction\n     filter.insert(uint256(\"0x63194f18be0af63f2c6bc9dc0f777cbefed3d9415c4af83f3ee3a3d669c00cb5\"));\n \n@@ -269,7 +297,7 @@ BOOST_AUTO_TEST_CASE(merkle_block_4)\n     CDataStream stream(ParseHex(\"0100000082bb869cf3a793432a66e826e05a6fc37469f8efb7421dc880670100000000007f16c5962e8bd963659c793ce370d95f093bc7e367117b3c30c1f8fdd0d9728776381b4d4c86041b554b85290701000000010000000000000000000000000000000000000000000000000000000000000000ffffffff07044c86041b0136ffffffff0100f2052a01000000434104eaafc2314def4ca98ac970241bcab022b9c1e1f4ea423a20f134c876f2c01ec0f0dd5b2e86e7168cefe0d81113c3807420ce13ad1357231a2252247d97a46a91ac000000000100000001bcad20a6a29827d1424f08989255120bf7f3e9e3cdaaa6bb31b0737fe048724300000000494830450220356e834b046cadc0f8ebb5a8a017b02de59c86305403dad52cd77b55af062ea10221009253cd6c119d4729b77c978e1e2aa19f5ea6e0e52b3f16e32fa608cd5bab753901ffffffff02008d380c010000001976a9142b4b8072ecbba129b6453c63e129e643207249ca88ac0065cd1d000000001976a9141b8dd13b994bcfc787b32aeadf58ccb3615cbd5488ac000000000100000003fdacf9b3eb077412e7a968d2e4f11b9a9dee312d666187ed77ee7d26af16cb0b000000008c493046022100ea1608e70911ca0de5af51ba57ad23b9a51db8d28f82c53563c56a05c20f5a87022100a8bdc8b4a8acc8634c6b420410150775eb7f2474f5615f7fccd65af30f310fbf01410465fdf49e29b06b9a1582287b6279014f834edc317695d125ef623c1cc3aaece245bd69fcad7508666e9c74a49dc9056d5fc14338ef38118dc4afae5fe2c585caffffffff309e1913634ecb50f3c4f83e96e70b2df071b497b8973a3e75429df397b5af83000000004948304502202bdb79c596a9ffc24e96f4386199aba386e9bc7b6071516e2b51dda942b3a1ed022100c53a857e76b724fc14d45311eac5019650d415c3abb5428f3aae16d8e69bec2301ffffffff2089e33491695080c9edc18a428f7d834db5b6d372df13ce2b1b0e0cbcb1e6c10000000049483045022100d4ce67c5896ee251c810ac1ff9ceccd328b497c8f553ab6e08431e7d40bad6b5022033119c0c2b7d792d31f1187779c7bd95aefd93d90a715586d73801d9b47471c601ffffffff0100714460030000001976a914c7b55141d097ea5df7a0ed330cf794376e53ec8d88ac0000000001000000045bf0e214aa4069a3e792ecee1e1bf0c1d397cde8dd08138f4b72a00681743447000000008b48304502200c45de8c4f3e2c1821f2fc878cba97b1e6f8807d94930713aa1c86a67b9bf1e40221008581abfef2e30f957815fc89978423746b2086375ca8ecf359c85c2a5b7c88ad01410462bb73f76ca0994fcb8b4271e6fb7561f5c0f9ca0cf6485261c4a0dc894f4ab844c6cdfb97cd0b60ffb5018ffd6238f4d87270efb1d3ae37079b794a92d7ec95ffffffffd669f7d7958d40fc59d2253d88e0f248e29b599c80bbcec344a83dda5f9aa72c000000008a473044022078124c8beeaa825f9e0b30bff96e564dd859432f2d0cb3b72d3d5d93d38d7e930220691d233b6c0f995be5acb03d70a7f7a65b6bc9bdd426260f38a1346669507a3601410462bb73f76ca0994fcb8b4271e6fb7561f5c0f9ca0cf6485261c4a0dc894f4ab844c6cdfb97cd0b60ffb5018ffd6238f4d87270efb1d3ae37079b794a92d7ec95fffffffff878af0d93f5229a68166cf051fd372bb7a537232946e0a46f53636b4dafdaa4000000008c493046022100c717d1714551663f69c3c5759bdbb3a0fcd3fab023abc0e522fe6440de35d8290221008d9cbe25bffc44af2b18e81c58eb37293fd7fe1c2e7b46fc37ee8c96c50ab1e201410462bb73f76ca0994fcb8b4271e6fb7561f5c0f9ca0cf6485261c4a0dc894f4ab844c6cdfb97cd0b60ffb5018ffd6238f4d87270efb1d3ae37079b794a92d7ec95ffffffff27f2b668859cd7f2f894aa0fd2d9e60963bcd07c88973f425f999b8cbfd7a1e2000000008c493046022100e00847147cbf517bcc2f502f3ddc6d284358d102ed20d47a8aa788a62f0db780022100d17b2d6fa84dcaf1c95d88d7e7c30385aecf415588d749afd3ec81f6022cecd701410462bb73f76ca0994fcb8b4271e6fb7561f5c0f9ca0cf6485261c4a0dc894f4ab844c6cdfb97cd0b60ffb5018ffd6238f4d87270efb1d3ae37079b794a92d7ec95ffffffff0100c817a8040000001976a914b6efd80d99179f4f4ff6f4dd0a007d018c385d2188ac000000000100000001834537b2f1ce8ef9373a258e10545ce5a50b758df616cd4356e0032554ebd3c4000000008b483045022100e68f422dd7c34fdce11eeb4509ddae38201773dd62f284e8aa9d96f85099d0b002202243bd399ff96b649a0fad05fa759d6a882f0af8c90cf7632c2840c29070aec20141045e58067e815c2f464c6a2a15f987758374203895710c2d452442e28496ff38ba8f5fd901dc20e29e88477167fe4fc299bf818fd0d9e1632d467b2a3d9503b1aaffffffff0280d7e636030000001976a914f34c3e10eb387efe872acb614c89e78bfca7815d88ac404b4c00000000001976a914a84e272933aaf87e1715d7786c51dfaeb5b65a6f88ac00000000010000000143ac81c8e6f6ef307dfe17f3d906d999e23e0189fda838c5510d850927e03ae7000000008c4930460221009c87c344760a64cb8ae6685a3eec2c1ac1bed5b88c87de51acd0e124f266c16602210082d07c037359c3a257b5c63ebd90f5a5edf97b2ac1c434b08ca998839f346dd40141040ba7e521fa7946d12edbb1d1e95a15c34bd4398195e86433c92b431cd315f455fe30032ede69cad9d1e1ed6c3c4ec0dbfced53438c625462afb792dcb098544bffffffff0240420f00000000001976a9144676d1b820d63ec272f1900d59d43bc6463d96f888ac40420f00000000001976a914648d04341d00d7968b3405c034adc38d4d8fb9bd88ac00000000010000000248cc917501ea5c55f4a8d2009c0567c40cfe037c2e71af017d0a452ff705e3f1000000008b483045022100bf5fdc86dc5f08a5d5c8e43a8c9d5b1ed8c65562e280007b52b133021acd9acc02205e325d613e555f772802bf413d36ba807892ed1a690a77811d3033b3de226e0a01410429fa713b124484cb2bd7b5557b2c0b9df7b2b1fee61825eadc5ae6c37a9920d38bfccdc7dc3cb0c47d7b173dbc9db8d37db0a33ae487982c59c6f8606e9d1791ffffffff41ed70551dd7e841883ab8f0b16bf04176b7d1480e4f0af9f3d4c3595768d068000000008b4830450221008513ad65187b903aed1102d1d0c47688127658c51106753fed0151ce9c16b80902201432b9ebcb87bd04ceb2de66035fbbaf4bf8b00d1cfe41f1a1f7338f9ad79d210141049d4cf80125bf50be1709f718c07ad15d0fc612b7da1f5570dddc35f2a352f0f27c978b06820edca9ef982c35fda2d255afba340068c5035552368bc7200c1488ffffffff0100093d00000000001976a9148edb68822f1ad580b043c7b3df2e400f8699eb4888ac00000000\"), SER_NETWORK, PROTOCOL_VERSION);\n     stream >> block;\n \n-    CBloomFilter filter(10, 0.000001);\n+    CBloomFilter filter(10, 0.000001, 0);\n     // Match the last transaction\n     filter.insert(uint256(\"0x0a2a92f0bda4727d0a13eaddf4dd9ac6b5c61a1429e6b2b818f19b15df0ac154\"));\n "
      }
    ]
  },
  {
    "sha": "4bedfa9223d38bbc322d19e28ca03417c216700b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YmVkZmE5MjIzZDM4YmJjMzIyZDE5ZTI4Y2EwMzQxN2MyMTY3MDBi",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-10-27T19:08:45Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2013-01-16T19:34:06Z"
      },
      "message": "Add CPartialMerkleTree\n\nThis adds a compact representation for a subset of a merkle tree's\nnodes.",
      "tree": {
        "sha": "c3543d441e83cef03cdaf8a0cd70da43fb0d0163",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c3543d441e83cef03cdaf8a0cd70da43fb0d0163"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4bedfa9223d38bbc322d19e28ca03417c216700b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4bedfa9223d38bbc322d19e28ca03417c216700b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4bedfa9223d38bbc322d19e28ca03417c216700b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4bedfa9223d38bbc322d19e28ca03417c216700b/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b1f99bed6f0fbbe94e6a3161b49b3f225dec8374",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b1f99bed6f0fbbe94e6a3161b49b3f225dec8374",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b1f99bed6f0fbbe94e6a3161b49b3f225dec8374"
      }
    ],
    "stats": {
      "total": 309,
      "additions": 309,
      "deletions": 0
    },
    "files": [
      {
        "sha": "91fe6ba8fc0ba697ff40b1444ce96eb9a7a5f9d2",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 121,
        "deletions": 0,
        "changes": 121,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4bedfa9223d38bbc322d19e28ca03417c216700b/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4bedfa9223d38bbc322d19e28ca03417c216700b/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=4bedfa9223d38bbc322d19e28ca03417c216700b",
        "patch": "@@ -2262,6 +2262,127 @@ CMerkleBlock::CMerkleBlock(const CBlock& block, CBloomFilter& filter)\n \n \n \n+uint256 CPartialMerkleTree::CalcHash(int height, unsigned int pos, const std::vector<uint256> &vTxid) {\n+    if (height == 0) {\n+        // hash at height 0 is the txids themself\n+        return vTxid[pos];\n+    } else {\n+        // calculate left hash\n+        uint256 left = CalcHash(height-1, pos*2, vTxid), right;\n+        // calculate right hash if not beyong the end of the array - copy left hash otherwise1\n+        if (pos*2+1 < CalcTreeWidth(height-1))\n+            right = CalcHash(height-1, pos*2+1, vTxid);\n+        else\n+            right = left;\n+        // combine subhashes\n+        return Hash(BEGIN(left), END(left), BEGIN(right), END(right));\n+    }\n+}\n+\n+void CPartialMerkleTree::TraverseAndBuild(int height, unsigned int pos, const std::vector<uint256> &vTxid, const std::vector<bool> &vMatch) {\n+    // determine whether this node is the parent of at least one matched txid\n+    bool fParentOfMatch = false;\n+    for (unsigned int p = pos << height; p < (pos+1) << height && p < nTransactions; p++)\n+        fParentOfMatch |= vMatch[p];\n+    // store as flag bit\n+    vBits.push_back(fParentOfMatch);\n+    if (height==0 || !fParentOfMatch) {\n+        // if at height 0, or nothing interesting below, store hash and stop\n+        vHash.push_back(CalcHash(height, pos, vTxid));\n+    } else {\n+        // otherwise, don't store any hash, but descend into the subtrees\n+        TraverseAndBuild(height-1, pos*2, vTxid, vMatch);\n+        if (pos*2+1 < CalcTreeWidth(height-1))\n+            TraverseAndBuild(height-1, pos*2+1, vTxid, vMatch);\n+    }\n+}\n+\n+uint256 CPartialMerkleTree::TraverseAndExtract(int height, unsigned int pos, unsigned int &nBitsUsed, unsigned int &nHashUsed, std::vector<uint256> &vMatch) {\n+    if (nBitsUsed >= vBits.size()) {\n+        // overflowed the bits array - failure\n+        fBad = true;\n+        return 0;\n+    }\n+    bool fParentOfMatch = vBits[nBitsUsed++];\n+    if (height==0 || !fParentOfMatch) {\n+        // if at height 0, or nothing interesting below, use stored hash and do not descend\n+        if (nHashUsed >= vHash.size()) {\n+            // overflowed the hash array - failure\n+            fBad = true;\n+            return 0;\n+        }\n+        const uint256 &hash = vHash[nHashUsed++];\n+        if (height==0 && fParentOfMatch) // in case of height 0, we have a matched txid\n+            vMatch.push_back(hash);\n+        return hash;\n+    } else {\n+        // otherwise, descend into the subtrees to extract matched txids and hashes\n+        uint256 left = TraverseAndExtract(height-1, pos*2, nBitsUsed, nHashUsed, vMatch), right;\n+        if (pos*2+1 < CalcTreeWidth(height-1))\n+            right = TraverseAndExtract(height-1, pos*2+1, nBitsUsed, nHashUsed, vMatch);\n+        else\n+            right = left;\n+        // and combine them before returning\n+        return Hash(BEGIN(left), END(left), BEGIN(right), END(right));\n+    }\n+}\n+\n+CPartialMerkleTree::CPartialMerkleTree(const std::vector<uint256> &vTxid, const std::vector<bool> &vMatch) : nTransactions(vTxid.size()), fBad(false) {\n+    // reset state\n+    vBits.clear();\n+    vHash.clear();\n+\n+    // calculate height of tree\n+    int nHeight = 0;\n+    while (CalcTreeWidth(nHeight) > 1)\n+        nHeight++;\n+\n+    // traverse the partial tree\n+    TraverseAndBuild(nHeight, 0, vTxid, vMatch);\n+}\n+\n+CPartialMerkleTree::CPartialMerkleTree() : nTransactions(0), fBad(true) {}\n+\n+uint256 CPartialMerkleTree::ExtractMatches(std::vector<uint256> &vMatch) {\n+    vMatch.clear();\n+    // An empty set will not work\n+    if (nTransactions == 0)\n+        return 0;\n+    // check for excessively high numbers of transactions\n+    if (nTransactions > MAX_BLOCK_SIZE / 60) // 60 is the lower bound for the size of a serialized CTransaction\n+        return 0;\n+    // there can never be more hashes provided than one for every txid\n+    if (vHash.size() > nTransactions)\n+        return 0;\n+    // there must be at least one bit per node in the partial tree, and at least one node per hash\n+    if (vBits.size() < vHash.size())\n+        return 0;\n+    // calculate height of tree\n+    int nHeight = 0;\n+    while (CalcTreeWidth(nHeight) > 1)\n+        nHeight++;\n+    // traverse the partial tree\n+    unsigned int nBitsUsed = 0, nHashUsed = 0;\n+    uint256 hashMerkleRoot = TraverseAndExtract(nHeight, 0, nBitsUsed, nHashUsed, vMatch);\n+    // verify that no problems occured during the tree traversal\n+    if (fBad)\n+        return 0;\n+    // verify that all bits were consumed (except for the padding caused by serializing it as a byte sequence)\n+    if ((nBitsUsed+7)/8 != (vBits.size()+7)/8)\n+        return 0;\n+    // verify that all hashes were consumed\n+    if (nHashUsed != vHash.size())\n+        return 0;\n+    return hashMerkleRoot;\n+}\n+\n+\n+\n+\n+\n+\n+\n+\n bool CheckDiskSpace(uint64 nAdditionalBytes)\n {\n     uint64 nFreeBytesAvailable = filesystem::space(GetDataDir()).available;"
      },
      {
        "sha": "f6086e92c2dc21e52b24fd87881ed3646389e2fd",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 90,
        "deletions": 0,
        "changes": 90,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4bedfa9223d38bbc322d19e28ca03417c216700b/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4bedfa9223d38bbc322d19e28ca03417c216700b/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=4bedfa9223d38bbc322d19e28ca03417c216700b",
        "patch": "@@ -1110,11 +1110,101 @@ class CMerkleTx : public CTransaction\n \n \n \n+/** Data structure that represents a partial merkle tree.\n+ *\n+ * It respresents a subset of the txid's of a known block, in a way that\n+ * allows recovery of the list of txid's and the merkle root, in an\n+ * authenticated way.\n+ *\n+ * The encoding works as follows: we traverse the tree in depth-first order,\n+ * storing a bit for each traversed node, signifying whether the node is the\n+ * parent of at least one matched leaf txid (or a matched txid itself). In\n+ * case we are at the leaf level, or this bit is 0, its merkle node hash is\n+ * stored, and its children are not explorer further. Otherwise, no hash is\n+ * stored, but we recurse into both (or the only) child branch. During\n+ * decoding, the same depth-first traversal is performed, consuming bits and\n+ * hashes as they written during encoding.\n+ *\n+ * The serialization is fixed and provides a hard guarantee about the\n+ * encoded size:\n+ *\n+ *   SIZE <= 10 + ceil(32.25*N)\n+ *\n+ * Where N represents the number of leaf nodes of the partial tree. N itself\n+ * is bounded by:\n+ *\n+ *   N <= total_transactions\n+ *   N <= 1 + matched_transactions*tree_height\n+ *\n+ * The serialization format:\n+ *  - uint32     total_transactions (4 bytes)\n+ *  - varint     number of hashes   (1-3 bytes)\n+ *  - uint256[]  hashes in depth-first order (<= 32*N bytes)\n+ *  - varint     number of bytes of flag bits (1-3 bytes)\n+ *  - byte[]     flag bits, packed per 8 in a byte, least significant bit first (<= 2*N-1 bits)\n+ * The size constraints follow from this.\n+ */\n+class CPartialMerkleTree\n+{\n+protected:\n+    // the total number of transactions in the block\n+    unsigned int nTransactions;\n+\n+    // node-is-parent-of-matched-txid bits\n+    std::vector<bool> vBits;\n+\n+    // txids and internal hashes\n+    std::vector<uint256> vHash;\n \n+    // flag set when encountering invalid data\n+    bool fBad;\n \n+    // helper function to efficiently calculate the number of nodes at given height in the merkle tree\n+    unsigned int CalcTreeWidth(int height) {\n+        return (nTransactions+(1 << height)-1) >> height;\n+    }\n+\n+    // calculate the hash of a node in the merkle tree (at leaf level: the txid's themself)\n+    uint256 CalcHash(int height, unsigned int pos, const std::vector<uint256> &vTxid);\n+\n+    // recursive function that traverses tree nodes, storing the data as bits and hashes\n+    void TraverseAndBuild(int height, unsigned int pos, const std::vector<uint256> &vTxid, const std::vector<bool> &vMatch);\n+\n+    // recursive function that traverses tree nodes, consuming the bits and hashes produced by TraverseAndBuild.\n+    // it returns the hash of the respective node.\n+    uint256 TraverseAndExtract(int height, unsigned int pos, unsigned int &nBitsUsed, unsigned int &nHashUsed, std::vector<uint256> &vMatch);\n+\n+public:\n \n+    // serialization implementation\n+    IMPLEMENT_SERIALIZE(\n+        READWRITE(nTransactions);\n+        READWRITE(vHash);\n+        std::vector<unsigned char> vBytes;\n+        if (fRead) {\n+            READWRITE(vBytes);\n+            CPartialMerkleTree &us = *(const_cast<CPartialMerkleTree*>(this));\n+            us.vBits.resize(vBytes.size() * 8);\n+            for (unsigned int p = 0; p < us.vBits.size(); p++)\n+                us.vBits[p] = (vBytes[p / 8] & (1 << (p % 8))) != 0;\n+            us.fBad = false;\n+        } else {\n+            vBytes.resize((vBits.size()+7)/8);\n+            for (unsigned int p = 0; p < vBits.size(); p++)\n+                vBytes[p / 8] |= vBits[p] << (p % 8);\n+            READWRITE(vBytes);\n+        }\n+    )\n+\n+    // Construct a partial merkle tree from a list of transaction id's, and a mask that selects a subset of them\n+    CPartialMerkleTree(const std::vector<uint256> &vTxid, const std::vector<bool> &vMatch);\n \n+    CPartialMerkleTree();\n \n+    // extract the matching txid's represented by this partial merkle tree.\n+    // returns the merkle root, or 0 in case of failure\n+    uint256 ExtractMatches(std::vector<uint256> &vMatch);\n+};\n \n \n /** Nodes collect new transactions into a block, hash them into a hash tree,"
      },
      {
        "sha": "cf09421617f4de157667a4a05f172bd3e40654ff",
        "filename": "src/test/pmt_tests.cpp",
        "status": "added",
        "additions": 98,
        "deletions": 0,
        "changes": 98,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4bedfa9223d38bbc322d19e28ca03417c216700b/src/test/pmt_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4bedfa9223d38bbc322d19e28ca03417c216700b/src/test/pmt_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/pmt_tests.cpp?ref=4bedfa9223d38bbc322d19e28ca03417c216700b",
        "patch": "@@ -0,0 +1,98 @@\n+#include <boost/test/unit_test.hpp>\n+\n+#include \"uint256.h\"\n+#include \"main.h\"\n+\n+using namespace std;\n+\n+class CPartialMerkleTreeTester : public CPartialMerkleTree\n+{\n+public:\n+    // flip one bit in one of the hashes - this should break the authentication\n+    void Damage() {\n+        unsigned int n = rand() % vHash.size();\n+        int bit = rand() % 256;\n+        uint256 &hash = vHash[n];\n+        hash ^= ((uint256)1 << bit);\n+    }\n+};\n+\n+BOOST_AUTO_TEST_SUITE(pmt_tests)\n+\n+BOOST_AUTO_TEST_CASE(pmt_test1)\n+{\n+    static const unsigned int nTxCounts[] = {1, 4, 7, 17, 56, 100, 127, 256, 312, 513, 1000, 4095};\n+\n+    for (int n = 0; n < 12; n++) {\n+        unsigned int nTx = nTxCounts[n];\n+\n+        // build a block with some dummy transactions\n+        CBlock block;\n+        for (unsigned int j=0; j<nTx; j++) {\n+            CTransaction tx;\n+            tx.nLockTime = rand(); // actual transaction data doesn't matter; just make the nLockTime's unique\n+            block.vtx.push_back(tx);\n+        }\n+\n+        // calculate actual merkle root and height\n+        uint256 merkleRoot1 = block.BuildMerkleTree();\n+        std::vector<uint256> vTxid(nTx, 0);\n+        for (unsigned int j=0; j<nTx; j++)\n+            vTxid[j] = block.vtx[j].GetHash();\n+        int nHeight = 1, nTx_ = nTx;\n+        while (nTx_ > 1) {\n+            nTx_ = (nTx_+1)/2;\n+            nHeight++;\n+        }\n+\n+        // check with random subsets with inclusion chances 1, 1/2, 1/4, ..., 1/128\n+        for (int att = 1; att < 15; att++) {\n+            // build random subset of txid's\n+            std::vector<bool> vMatch(nTx, false);\n+            std::vector<uint256> vMatchTxid1;\n+            for (unsigned int j=0; j<nTx; j++) {\n+                bool fInclude = (rand() & ((1 << (att/2)) - 1)) == 0;\n+                vMatch[j] = fInclude;\n+                if (fInclude)\n+                    vMatchTxid1.push_back(vTxid[j]);\n+            }\n+\n+            // build the partial merkle tree\n+            CPartialMerkleTree pmt1(vTxid, vMatch);\n+\n+            // serialize\n+            CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);\n+            ss << pmt1;\n+\n+            // verify CPartialMerkleTree's size guarantees\n+            unsigned int n = std::min<unsigned int>(nTx, 1 + vMatchTxid1.size()*nHeight);\n+            BOOST_CHECK(ss.size() <= 10 + (258*n+7)/8);\n+\n+            // deserialize into a tester copy\n+            CPartialMerkleTreeTester pmt2;\n+            ss >> pmt2;\n+\n+            // extract merkle root and matched txids from copy\n+            std::vector<uint256> vMatchTxid2;\n+            uint256 merkleRoot2 = pmt2.ExtractMatches(vMatchTxid2);\n+\n+            // check that it has the same merkle root as the original, and a valid one\n+            BOOST_CHECK(merkleRoot1 == merkleRoot2);\n+            BOOST_CHECK(merkleRoot2 != 0);\n+\n+            // check that it contains the matched transactions (in the same order!)\n+            BOOST_CHECK(vMatchTxid1 == vMatchTxid2);\n+\n+            // check that random bit flips break the authentication\n+            for (int j=0; j<4; j++) {\n+                CPartialMerkleTreeTester pmt3(pmt2);\n+                pmt3.Damage();\n+                std::vector<uint256> vMatchTxid3;\n+                uint256 merkleRoot3 = pmt3.ExtractMatches(vMatchTxid3);\n+                BOOST_CHECK(merkleRoot3 != merkleRoot1);\n+            }\n+        }\n+    }\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "21aaf255ff4553ae538fb90011b0185bc8039896",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMWFhZjI1NWZmNDU1M2FlNTM4ZmI5MDAxMWIwMTg1YmM4MDM5ODk2",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2012-11-08T21:26:25Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2013-01-16T19:34:06Z"
      },
      "message": "Use CPartialMerkleTree for CMerkleBlock transactions.",
      "tree": {
        "sha": "5802725fb5756bac265ef7f7d4cef9d6083781a7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5802725fb5756bac265ef7f7d4cef9d6083781a7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/21aaf255ff4553ae538fb90011b0185bc8039896",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/21aaf255ff4553ae538fb90011b0185bc8039896",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/21aaf255ff4553ae538fb90011b0185bc8039896",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/21aaf255ff4553ae538fb90011b0185bc8039896/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4bedfa9223d38bbc322d19e28ca03417c216700b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4bedfa9223d38bbc322d19e28ca03417c216700b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4bedfa9223d38bbc322d19e28ca03417c216700b"
      }
    ],
    "stats": {
      "total": 173,
      "additions": 103,
      "deletions": 70
    },
    "files": [
      {
        "sha": "644c5d0e6d9da1f9c294085887d672e1f9440cea",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 8,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21aaf255ff4553ae538fb90011b0185bc8039896/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21aaf255ff4553ae538fb90011b0185bc8039896/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=21aaf255ff4553ae538fb90011b0185bc8039896",
        "patch": "@@ -2242,17 +2242,27 @@ bool ProcessBlock(CNode* pfrom, CBlock* pblock, CDiskBlockPos *dbp)\n CMerkleBlock::CMerkleBlock(const CBlock& block, CBloomFilter& filter)\n {\n     header = block.GetBlockHeader();\n-    vtx.reserve(block.vtx.size());\n \n-    for(unsigned int i = 0; i < block.vtx.size(); i++)\n+    vector<bool> vMatch;\n+    vector<uint256> vHashes;\n+\n+    vMatch.reserve(block.vtx.size());\n+    vHashes.reserve(block.vtx.size());\n+\n+    for (unsigned int i = 0; i < block.vtx.size(); i++)\n     {\n-        vector<uint256> branch = block.GetMerkleBranch(i);\n         uint256 hash = block.vtx[i].GetHash();\n         if (filter.IsRelevantAndUpdate(block.vtx[i], hash))\n         {\n-            vtx.push_back(make_tuple(i, hash, branch));\n+            vMatch.push_back(true);\n+            vMatchedTxn.push_back(make_pair(i, hash));\n         }\n+        else\n+            vMatch.push_back(false);\n+        vHashes.push_back(hash);\n     }\n+\n+    txn = CPartialMerkleTree(vHashes, vMatch);\n }\n \n \n@@ -3209,16 +3219,16 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n                         if (pfrom->pfilter)\n                         {\n                             CMerkleBlock merkleBlock(block, *pfrom->pfilter);\n-                            typedef boost::tuple<unsigned int, uint256, std::vector<uint256> > TupleType;\n                             // CMerkleBlock just contains hashes, so also push any transactions in the block the client did not see \n                             // This avoids hurting performance by pointlessly requiring a round-trip\n                             // Note that there is currently no way for a node to request any single transactions we didnt send here -\n                             // they must either disconnect and retry or request the full block.\n                             // Thus, the protocol spec specified allows for us to provide duplicate txn here,\n                             // however we MUST always provide at least what the remote peer needs\n-                            BOOST_FOREACH(TupleType& tuple, merkleBlock.vtx)\n-                                if (!pfrom->setInventoryKnown.count(CInv(MSG_TX, get<1>(tuple))))\n-                                    pfrom->PushMessage(\"tx\", block.vtx[get<0>(tuple)]);\n+                            typedef std::pair<unsigned int, uint256> PairType;\n+                            BOOST_FOREACH(PairType& pair, merkleBlock.vMatchedTxn)\n+                                if (!pfrom->setInventoryKnown.count(CInv(MSG_TX, pair.second)))\n+                                    pfrom->PushMessage(\"tx\", block.vtx[pair.first]);\n                             pfrom->PushMessage(\"merkleblock\", merkleBlock);\n                         }\n                         // else"
      },
      {
        "sha": "4d21680b9c0de7fcb36477f262d1e113e984b4ee",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21aaf255ff4553ae538fb90011b0185bc8039896/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21aaf255ff4553ae538fb90011b0185bc8039896/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=21aaf255ff4553ae538fb90011b0185bc8039896",
        "patch": "@@ -2140,12 +2140,14 @@ struct CBlockTemplate\n class CMerkleBlock\n {\n public:\n+    // Public only for unit testing\n     CBlockHeader header;\n+    CPartialMerkleTree txn;\n \n-    // We could optimize this a bit to deduplicate partial branches,\n-    // but it's not worth much unless a node has a ton of txes in a single block\n-    //                       tx index    , tx hash, merkle branch\n-    std::vector<boost::tuple<unsigned int, uint256, std::vector<uint256> > > vtx;\n+public:\n+    // Public only for unit testing and relay testing\n+    // (not relayed)\n+    std::vector<std::pair<unsigned int, uint256> > vMatchedTxn;\n \n     // Create from a CBlock, filtering transactions according to filter\n     // Note that this will call IsRelevantAndUpdate on the filter for each transaction,\n@@ -2155,7 +2157,7 @@ class CMerkleBlock\n     IMPLEMENT_SERIALIZE\n     (\n         READWRITE(header);\n-        READWRITE(vtx);\n+        READWRITE(txn);\n     )\n };\n "
      },
      {
        "sha": "f85fd8a9012743d8997fdd837bcf7f74aa4e6f69",
        "filename": "src/test/bloom_tests.cpp",
        "status": "modified",
        "additions": 78,
        "deletions": 57,
        "changes": 135,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21aaf255ff4553ae538fb90011b0185bc8039896/src/test/bloom_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21aaf255ff4553ae538fb90011b0185bc8039896/src/test/bloom_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bloom_tests.cpp?ref=21aaf255ff4553ae538fb90011b0185bc8039896",
        "patch": "@@ -181,78 +181,88 @@ BOOST_AUTO_TEST_CASE(merkle_block_1)\n     CMerkleBlock merkleBlock(block, filter);\n     BOOST_CHECK(merkleBlock.header.GetHash() == block.GetHash());\n \n-    BOOST_CHECK(merkleBlock.vtx.size() == 1);\n-    tuple<unsigned int, uint256, vector<uint256> > tuple = merkleBlock.vtx[0];\n+    BOOST_CHECK(merkleBlock.vMatchedTxn.size() == 1);\n+    pair<unsigned int, uint256> pair = merkleBlock.vMatchedTxn[0];\n \n-    BOOST_CHECK(get<2>(merkleBlock.vtx[0]).size() == 4);\n-    BOOST_CHECK(get<1>(merkleBlock.vtx[0]) == uint256(\"0x74d681e0e03bafa802c8aa084379aa98d9fcd632ddc2ed9782b586ec87451f20\"));\n-    BOOST_CHECK(get<0>(merkleBlock.vtx[0]) == 8);\n-    BOOST_CHECK(block.CheckMerkleBranch(get<1>(merkleBlock.vtx[0]), get<2>(merkleBlock.vtx[0]), get<0>(merkleBlock.vtx[0])) == block.hashMerkleRoot);\n+    BOOST_CHECK(merkleBlock.vMatchedTxn[0].second == uint256(\"0x74d681e0e03bafa802c8aa084379aa98d9fcd632ddc2ed9782b586ec87451f20\"));\n+    BOOST_CHECK(merkleBlock.vMatchedTxn[0].first == 8);\n+\n+    vector<uint256> vMatched;\n+    BOOST_CHECK(merkleBlock.txn.ExtractMatches(vMatched) == block.hashMerkleRoot);\n+    BOOST_CHECK(vMatched.size() == merkleBlock.vMatchedTxn.size());\n+    for (unsigned int i = 0; i < vMatched.size(); i++)\n+        BOOST_CHECK(vMatched[i] == merkleBlock.vMatchedTxn[i].second);\n \n     // Also match the 8th transaction\n     filter.insert(uint256(\"0xdd1fd2a6fc16404faf339881a90adbde7f4f728691ac62e8f168809cdfae1053\"));\n     merkleBlock = CMerkleBlock(block, filter);\n     BOOST_CHECK(merkleBlock.header.GetHash() == block.GetHash());\n \n-    BOOST_CHECK(merkleBlock.vtx.size() == 2);\n+    BOOST_CHECK(merkleBlock.vMatchedTxn.size() == 2);\n+\n+    BOOST_CHECK(merkleBlock.vMatchedTxn[1] == pair);\n \n-    BOOST_CHECK(merkleBlock.vtx[1] == tuple);\n+    BOOST_CHECK(merkleBlock.vMatchedTxn[0].second == uint256(\"0xdd1fd2a6fc16404faf339881a90adbde7f4f728691ac62e8f168809cdfae1053\"));\n+    BOOST_CHECK(merkleBlock.vMatchedTxn[0].first == 7);\n \n-    BOOST_CHECK(get<2>(merkleBlock.vtx[0]).size() == 4);\n-    BOOST_CHECK(get<1>(merkleBlock.vtx[0]) == uint256(\"0xdd1fd2a6fc16404faf339881a90adbde7f4f728691ac62e8f168809cdfae1053\"));\n-    BOOST_CHECK(get<0>(merkleBlock.vtx[0]) == 7);\n-    BOOST_CHECK(block.CheckMerkleBranch(get<1>(merkleBlock.vtx[0]), get<2>(merkleBlock.vtx[0]), get<0>(merkleBlock.vtx[0])) == block.hashMerkleRoot);\n+    BOOST_CHECK(merkleBlock.txn.ExtractMatches(vMatched) == block.hashMerkleRoot);\n+    BOOST_CHECK(vMatched.size() == merkleBlock.vMatchedTxn.size());\n+    for (unsigned int i = 0; i < vMatched.size(); i++)\n+        BOOST_CHECK(vMatched[i] == merkleBlock.vMatchedTxn[i].second);\n }\n \n BOOST_AUTO_TEST_CASE(merkle_block_2)\n {\n-    // Random real block (000000000003ba27aa200b1cecaad478d2b00432346c3f1f3986da1afd33e506)\n+    // Random real block (000000005a4ded781e667e06ceefafb71410b511fe0d5adc3e5a27ecbec34ae6)\n     // With 4 txes\n     CBlock block;\n-    CDataStream stream(ParseHex(\"0100000050120119172a610421a6c3011dd330d9df07b63616c2cc1f1cd00200000000006657a9252aacd5c0b2940996ecff952228c3067cc38d4885efb5a4ac4247e9f337221b4d4c86041b0f2b57100401000000010000000000000000000000000000000000000000000000000000000000000000ffffffff08044c86041b020602ffffffff0100f2052a010000004341041b0e8c2567c12536aa13357b79a073dc4444acb83c4ec7a0e2f99dd7457516c5817242da796924ca4e99947d087fedf9ce467cb9f7c6287078f801df276fdf84ac000000000100000001032e38e9c0a84c6046d687d10556dcacc41d275ec55fc00779ac88fdf357a187000000008c493046022100c352d3dd993a981beba4a63ad15c209275ca9470abfcd57da93b58e4eb5dce82022100840792bc1f456062819f15d33ee7055cf7b5ee1af1ebcc6028d9cdb1c3af7748014104f46db5e9d61a9dc27b8d64ad23e7383a4e6ca164593c2527c038c0857eb67ee8e825dca65046b82c9331586c82e0fd1f633f25f87c161bc6f8a630121df2b3d3ffffffff0200e32321000000001976a914c398efa9c392ba6013c5e04ee729755ef7f58b3288ac000fe208010000001976a914948c765a6914d43f2a7ac177da2c2f6b52de3d7c88ac000000000100000001c33ebff2a709f13d9f9a7569ab16a32786af7d7e2de09265e41c61d078294ecf010000008a4730440220032d30df5ee6f57fa46cddb5eb8d0d9fe8de6b342d27942ae90a3231e0ba333e02203deee8060fdc70230a7f5b4ad7d7bc3e628cbe219a886b84269eaeb81e26b4fe014104ae31c31bf91278d99b8377a35bbce5b27d9fff15456839e919453fc7b3f721f0ba403ff96c9deeb680e5fd341c0fc3a7b90da4631ee39560639db462e9cb850fffffffff0240420f00000000001976a914b0dcbf97eabf4404e31d952477ce822dadbe7e1088acc060d211000000001976a9146b1281eec25ab4e1e0793ff4e08ab1abb3409cd988ac0000000001000000010b6072b386d4a773235237f64c1126ac3b240c84b917a3909ba1c43ded5f51f4000000008c493046022100bb1ad26df930a51cce110cf44f7a48c3c561fd977500b1ae5d6b6fd13d0b3f4a022100c5b42951acedff14abba2736fd574bdb465f3e6f8da12e2c5303954aca7f78f3014104a7135bfe824c97ecc01ec7d7e336185c81e2aa2c41ab175407c09484ce9694b44953fcb751206564a9c24dd094d42fdbfdd5aad3e063ce6af4cfaaea4ea14fbbffffffff0140420f00000000001976a91439aa3d569e06a1d7926dc4be1193c99bf2eb9ee088ac00000000\"), SER_NETWORK, PROTOCOL_VERSION);\n+    CDataStream stream(ParseHex(\"0100000075616236cc2126035fadb38deb65b9102cc2c41c09cdf29fc051906800000000fe7d5e12ef0ff901f6050211249919b1c0653771832b3a80c66cea42847f0ae1d4d26e49ffff001d00f0a4410401000000010000000000000000000000000000000000000000000000000000000000000000ffffffff0804ffff001d029105ffffffff0100f2052a010000004341046d8709a041d34357697dfcb30a9d05900a6294078012bf3bb09c6f9b525f1d16d5503d7905db1ada9501446ea00728668fc5719aa80be2fdfc8a858a4dbdd4fbac00000000010000000255605dc6f5c3dc148b6da58442b0b2cd422be385eab2ebea4119ee9c268d28350000000049483045022100aa46504baa86df8a33b1192b1b9367b4d729dc41e389f2c04f3e5c7f0559aae702205e82253a54bf5c4f65b7428551554b2045167d6d206dfe6a2e198127d3f7df1501ffffffff55605dc6f5c3dc148b6da58442b0b2cd422be385eab2ebea4119ee9c268d2835010000004847304402202329484c35fa9d6bb32a55a70c0982f606ce0e3634b69006138683bcd12cbb6602200c28feb1e2555c3210f1dddb299738b4ff8bbe9667b68cb8764b5ac17b7adf0001ffffffff0200e1f505000000004341046a0765b5865641ce08dd39690aade26dfbf5511430ca428a3089261361cef170e3929a68aee3d8d4848b0c5111b0a37b82b86ad559fd2a745b44d8e8d9dfdc0cac00180d8f000000004341044a656f065871a353f216ca26cef8dde2f03e8c16202d2e8ad769f02032cb86a5eb5e56842e92e19141d60a01928f8dd2c875a390f67c1f6c94cfc617c0ea45afac0000000001000000025f9a06d3acdceb56be1bfeaa3e8a25e62d182fa24fefe899d1c17f1dad4c2028000000004847304402205d6058484157235b06028c30736c15613a28bdb768ee628094ca8b0030d4d6eb0220328789c9a2ec27ddaec0ad5ef58efded42e6ea17c2e1ce838f3d6913f5e95db601ffffffff5f9a06d3acdceb56be1bfeaa3e8a25e62d182fa24fefe899d1c17f1dad4c2028010000004a493046022100c45af050d3cea806cedd0ab22520c53ebe63b987b8954146cdca42487b84bdd6022100b9b027716a6b59e640da50a864d6dd8a0ef24c76ce62391fa3eabaf4d2886d2d01ffffffff0200e1f505000000004341046a0765b5865641ce08dd39690aade26dfbf5511430ca428a3089261361cef170e3929a68aee3d8d4848b0c5111b0a37b82b86ad559fd2a745b44d8e8d9dfdc0cac00180d8f000000004341046a0765b5865641ce08dd39690aade26dfbf5511430ca428a3089261361cef170e3929a68aee3d8d4848b0c5111b0a37b82b86ad559fd2a745b44d8e8d9dfdc0cac000000000100000002e2274e5fea1bf29d963914bd301aa63b64daaf8a3e88f119b5046ca5738a0f6b0000000048473044022016e7a727a061ea2254a6c358376aaa617ac537eb836c77d646ebda4c748aac8b0220192ce28bf9f2c06a6467e6531e27648d2b3e2e2bae85159c9242939840295ba501ffffffffe2274e5fea1bf29d963914bd301aa63b64daaf8a3e88f119b5046ca5738a0f6b010000004a493046022100b7a1a755588d4190118936e15cd217d133b0e4a53c3c15924010d5648d8925c9022100aaef031874db2114f2d869ac2de4ae53908fbfea5b2b1862e181626bb9005c9f01ffffffff0200e1f505000000004341044a656f065871a353f216ca26cef8dde2f03e8c16202d2e8ad769f02032cb86a5eb5e56842e92e19141d60a01928f8dd2c875a390f67c1f6c94cfc617c0ea45afac00180d8f000000004341046a0765b5865641ce08dd39690aade26dfbf5511430ca428a3089261361cef170e3929a68aee3d8d4848b0c5111b0a37b82b86ad559fd2a745b44d8e8d9dfdc0cac00000000\"), SER_NETWORK, PROTOCOL_VERSION);\n     stream >> block;\n \n     CBloomFilter filter(10, 0.000001, 0);\n     // Match the first transaction\n-    filter.insert(uint256(\"0x8c14f0db3df150123e6f3dbbf30f8b955a8249b62ac1d1ff16284aefa3d06d87\"));\n+    filter.insert(uint256(\"0xe980fe9f792d014e73b95203dc1335c5f9ce19ac537a419e6df5b47aecb93b70\"));\n \n     CMerkleBlock merkleBlock(block, filter);\n     BOOST_CHECK(merkleBlock.header.GetHash() == block.GetHash());\n \n-    BOOST_CHECK(merkleBlock.vtx.size() == 1);\n-    tuple<unsigned int, uint256, vector<uint256> > tuple = merkleBlock.vtx[0];\n+    BOOST_CHECK(merkleBlock.vMatchedTxn.size() == 1);\n+    pair<unsigned int, uint256> pair = merkleBlock.vMatchedTxn[0];\n \n-    BOOST_CHECK(get<2>(merkleBlock.vtx[0]).size() == 2);\n-    BOOST_CHECK(get<1>(merkleBlock.vtx[0]) == uint256(\"0x8c14f0db3df150123e6f3dbbf30f8b955a8249b62ac1d1ff16284aefa3d06d87\"));\n-    BOOST_CHECK(get<0>(merkleBlock.vtx[0]) == 0);\n-    BOOST_CHECK(block.CheckMerkleBranch(get<1>(merkleBlock.vtx[0]), get<2>(merkleBlock.vtx[0]), get<0>(merkleBlock.vtx[0])) == block.hashMerkleRoot);\n+    BOOST_CHECK(merkleBlock.vMatchedTxn[0].second == uint256(\"0xe980fe9f792d014e73b95203dc1335c5f9ce19ac537a419e6df5b47aecb93b70\"));\n+    BOOST_CHECK(merkleBlock.vMatchedTxn[0].first == 0);\n \n-    // Match all of the transactions\n-    filter.insert(uint256(\"0xfff2525b8931402dd09222c50775608f75787bd2b87e56995a7bdd30f79702c4\"));\n-    filter.insert(uint256(\"0x6359f0868171b1d194cbee1af2f16ea598ae8fad666d9b012c8ed2b79a236ec4\"));\n-    filter.insert(uint256(\"0xe9a66845e05d5abc0ad04ec80f774a7e585c6e8db975962d069a522137b80c1d\"));\n+    vector<uint256> vMatched;\n+    BOOST_CHECK(merkleBlock.txn.ExtractMatches(vMatched) == block.hashMerkleRoot);\n+    BOOST_CHECK(vMatched.size() == merkleBlock.vMatchedTxn.size());\n+    for (unsigned int i = 0; i < vMatched.size(); i++)\n+        BOOST_CHECK(vMatched[i] == merkleBlock.vMatchedTxn[i].second);\n+\n+    // Match an output from the second transaction (the pubkey for address 1DZTzaBHUDM7T3QvUKBz4qXMRpkg8jsfB5)\n+    // This should match the third transaction because it spends the output matched\n+    // It also matches the fourth transaction, which spends to the pubkey again\n+    filter.insert(ParseHex(\"044a656f065871a353f216ca26cef8dde2f03e8c16202d2e8ad769f02032cb86a5eb5e56842e92e19141d60a01928f8dd2c875a390f67c1f6c94cfc617c0ea45af\"));\n \n     merkleBlock = CMerkleBlock(block, filter);\n     BOOST_CHECK(merkleBlock.header.GetHash() == block.GetHash());\n \n-    BOOST_CHECK(merkleBlock.vtx.size() == 4);\n+    BOOST_CHECK(merkleBlock.vMatchedTxn.size() == 4);\n+\n+    BOOST_CHECK(pair == merkleBlock.vMatchedTxn[0]);\n \n-    BOOST_CHECK(tuple == merkleBlock.vtx[0]);\n+    BOOST_CHECK(merkleBlock.vMatchedTxn[1].second == uint256(\"0x28204cad1d7fc1d199e8ef4fa22f182de6258a3eaafe1bbe56ebdcacd3069a5f\"));\n+    BOOST_CHECK(merkleBlock.vMatchedTxn[1].first == 1);\n \n-    BOOST_CHECK(get<2>(merkleBlock.vtx[1]).size() == 2);\n-    BOOST_CHECK(get<1>(merkleBlock.vtx[1]) == uint256(\"0xfff2525b8931402dd09222c50775608f75787bd2b87e56995a7bdd30f79702c4\"));\n-    BOOST_CHECK(get<0>(merkleBlock.vtx[1]) == 1);\n-    BOOST_CHECK(block.CheckMerkleBranch(get<1>(merkleBlock.vtx[1]), get<2>(merkleBlock.vtx[1]), get<0>(merkleBlock.vtx[1])) == block.hashMerkleRoot);\n+    BOOST_CHECK(merkleBlock.vMatchedTxn[2].second == uint256(\"0x6b0f8a73a56c04b519f1883e8aafda643ba61a30bd1439969df21bea5f4e27e2\"));\n+    BOOST_CHECK(merkleBlock.vMatchedTxn[2].first == 2);\n \n-    BOOST_CHECK(get<2>(merkleBlock.vtx[2]).size() == 2);\n-    BOOST_CHECK(get<1>(merkleBlock.vtx[2]) == uint256(\"0x6359f0868171b1d194cbee1af2f16ea598ae8fad666d9b012c8ed2b79a236ec4\"));\n-    BOOST_CHECK(get<0>(merkleBlock.vtx[2]) == 2);\n-    BOOST_CHECK(block.CheckMerkleBranch(get<1>(merkleBlock.vtx[2]), get<2>(merkleBlock.vtx[2]), get<0>(merkleBlock.vtx[2])) == block.hashMerkleRoot);\n+    BOOST_CHECK(merkleBlock.vMatchedTxn[3].second == uint256(\"0x3c1d7e82342158e4109df2e0b6348b6e84e403d8b4046d7007663ace63cddb23\"));\n+    BOOST_CHECK(merkleBlock.vMatchedTxn[3].first == 3);\n \n-    BOOST_CHECK(get<2>(merkleBlock.vtx[3]).size() == 2);\n-    BOOST_CHECK(get<1>(merkleBlock.vtx[3]) == uint256(\"0xe9a66845e05d5abc0ad04ec80f774a7e585c6e8db975962d069a522137b80c1d\"));\n-    BOOST_CHECK(get<0>(merkleBlock.vtx[3]) == 3);\n-    BOOST_CHECK(block.CheckMerkleBranch(get<1>(merkleBlock.vtx[3]), get<2>(merkleBlock.vtx[3]), get<0>(merkleBlock.vtx[3])) == block.hashMerkleRoot);\n+    BOOST_CHECK(merkleBlock.txn.ExtractMatches(vMatched) == block.hashMerkleRoot);\n+    BOOST_CHECK(vMatched.size() == merkleBlock.vMatchedTxn.size());\n+    for (unsigned int i = 0; i < vMatched.size(); i++)\n+        BOOST_CHECK(vMatched[i] == merkleBlock.vMatchedTxn[i].second);\n }\n \n BOOST_AUTO_TEST_CASE(merkle_block_3_and_serialize)\n@@ -270,17 +280,21 @@ BOOST_AUTO_TEST_CASE(merkle_block_3_and_serialize)\n     CMerkleBlock merkleBlock(block, filter);\n     BOOST_CHECK(merkleBlock.header.GetHash() == block.GetHash());\n \n-    BOOST_CHECK(merkleBlock.vtx.size() == 1);\n+    BOOST_CHECK(merkleBlock.vMatchedTxn.size() == 1);\n \n-    BOOST_CHECK(get<2>(merkleBlock.vtx[0]).size() == 0);\n-    BOOST_CHECK(get<1>(merkleBlock.vtx[0]) == uint256(\"0x63194f18be0af63f2c6bc9dc0f777cbefed3d9415c4af83f3ee3a3d669c00cb5\"));\n-    BOOST_CHECK(get<0>(merkleBlock.vtx[0]) == 0);\n-    BOOST_CHECK(block.CheckMerkleBranch(get<1>(merkleBlock.vtx[0]), get<2>(merkleBlock.vtx[0]), get<0>(merkleBlock.vtx[0])) == block.hashMerkleRoot);\n+    BOOST_CHECK(merkleBlock.vMatchedTxn[0].second == uint256(\"0x63194f18be0af63f2c6bc9dc0f777cbefed3d9415c4af83f3ee3a3d669c00cb5\"));\n+    BOOST_CHECK(merkleBlock.vMatchedTxn[0].first == 0);\n+\n+    vector<uint256> vMatched;\n+    BOOST_CHECK(merkleBlock.txn.ExtractMatches(vMatched) == block.hashMerkleRoot);\n+    BOOST_CHECK(vMatched.size() == merkleBlock.vMatchedTxn.size());\n+    for (unsigned int i = 0; i < vMatched.size(); i++)\n+        BOOST_CHECK(vMatched[i] == merkleBlock.vMatchedTxn[i].second);\n \n     CDataStream merkleStream(SER_NETWORK, PROTOCOL_VERSION);\n     merkleStream << merkleBlock;\n \n-    vector<unsigned char> vch = ParseHex(\"0100000079cda856b143d9db2c1caff01d1aecc8630d30625d10e8b4b8b0000000000000b50cc069d6a3e33e3ff84a5c41d9d3febe7c770fdcc96b2c3ff60abe184f196367291b4d4c86041b8fa45d630100000000b50cc069d6a3e33e3ff84a5c41d9d3febe7c770fdcc96b2c3ff60abe184f196300\");\n+    vector<unsigned char> vch = ParseHex(\"0100000079cda856b143d9db2c1caff01d1aecc8630d30625d10e8b4b8b0000000000000b50cc069d6a3e33e3ff84a5c41d9d3febe7c770fdcc96b2c3ff60abe184f196367291b4d4c86041b8fa45d630100000001b50cc069d6a3e33e3ff84a5c41d9d3febe7c770fdcc96b2c3ff60abe184f19630101\");\n     vector<char> expected(vch.size());\n \n     for (unsigned int i = 0; i < vch.size(); i++)\n@@ -304,27 +318,34 @@ BOOST_AUTO_TEST_CASE(merkle_block_4)\n     CMerkleBlock merkleBlock(block, filter);\n     BOOST_CHECK(merkleBlock.header.GetHash() == block.GetHash());\n \n-    BOOST_CHECK(merkleBlock.vtx.size() == 1);\n-    tuple<unsigned int, uint256, vector<uint256> > tuple = merkleBlock.vtx[0];\n+    BOOST_CHECK(merkleBlock.vMatchedTxn.size() == 1);\n+    pair<unsigned int, uint256> pair = merkleBlock.vMatchedTxn[0];\n+\n+    BOOST_CHECK(merkleBlock.vMatchedTxn[0].second == uint256(\"0x0a2a92f0bda4727d0a13eaddf4dd9ac6b5c61a1429e6b2b818f19b15df0ac154\"));\n+    BOOST_CHECK(merkleBlock.vMatchedTxn[0].first == 6);\n \n-    BOOST_CHECK(get<2>(merkleBlock.vtx[0]).size() == 3);\n-    BOOST_CHECK(get<1>(merkleBlock.vtx[0]) == uint256(\"0x0a2a92f0bda4727d0a13eaddf4dd9ac6b5c61a1429e6b2b818f19b15df0ac154\"));\n-    BOOST_CHECK(get<0>(merkleBlock.vtx[0]) == 6);\n-    BOOST_CHECK(block.CheckMerkleBranch(get<1>(merkleBlock.vtx[0]), get<2>(merkleBlock.vtx[0]), get<0>(merkleBlock.vtx[0])) == block.hashMerkleRoot);\n+    vector<uint256> vMatched;\n+    BOOST_CHECK(merkleBlock.txn.ExtractMatches(vMatched) == block.hashMerkleRoot);\n+    BOOST_CHECK(vMatched.size() == merkleBlock.vMatchedTxn.size());\n+    for (unsigned int i = 0; i < vMatched.size(); i++)\n+        BOOST_CHECK(vMatched[i] == merkleBlock.vMatchedTxn[i].second);\n \n     // Also match the 4th transaction\n     filter.insert(uint256(\"0x02981fa052f0481dbc5868f4fc2166035a10f27a03cfd2de67326471df5bc041\"));\n     merkleBlock = CMerkleBlock(block, filter);\n     BOOST_CHECK(merkleBlock.header.GetHash() == block.GetHash());\n \n-    BOOST_CHECK(merkleBlock.vtx.size() == 2);\n+    BOOST_CHECK(merkleBlock.vMatchedTxn.size() == 2);\n+\n+    BOOST_CHECK(merkleBlock.vMatchedTxn[0].second == uint256(\"0x02981fa052f0481dbc5868f4fc2166035a10f27a03cfd2de67326471df5bc041\"));\n+    BOOST_CHECK(merkleBlock.vMatchedTxn[0].first == 3);\n \n-    BOOST_CHECK(get<2>(merkleBlock.vtx[0]).size() == 3);\n-    BOOST_CHECK(get<1>(merkleBlock.vtx[0]) == uint256(\"0x02981fa052f0481dbc5868f4fc2166035a10f27a03cfd2de67326471df5bc041\"));\n-    BOOST_CHECK(get<0>(merkleBlock.vtx[0]) == 3);\n-    BOOST_CHECK(block.CheckMerkleBranch(get<1>(merkleBlock.vtx[0]), get<2>(merkleBlock.vtx[0]), get<0>(merkleBlock.vtx[0])) == block.hashMerkleRoot);\n+    BOOST_CHECK(merkleBlock.vMatchedTxn[1] == pair);\n \n-    BOOST_CHECK(merkleBlock.vtx[1] == tuple);\n+    BOOST_CHECK(merkleBlock.txn.ExtractMatches(vMatched) == block.hashMerkleRoot);\n+    BOOST_CHECK(vMatched.size() == merkleBlock.vMatchedTxn.size());\n+    for (unsigned int i = 0; i < vMatched.size(); i++)\n+        BOOST_CHECK(vMatched[i] == merkleBlock.vMatchedTxn[i].second);\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "e1a4f3778cb90ba9f0d4e736752f78dad1703caa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMWE0ZjM3NzhjYjkwYmE5ZjBkNGU3MzY3NTJmNzhkYWQxNzAzY2Fh",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2013-01-11T01:23:28Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2013-01-16T19:34:06Z"
      },
      "message": "Add nFlags to CBloomFilter to make filter updating optional.",
      "tree": {
        "sha": "a1bc1fde9f97dd8d897979a42d3a92e0c0904eb5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a1bc1fde9f97dd8d897979a42d3a92e0c0904eb5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e1a4f3778cb90ba9f0d4e736752f78dad1703caa",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e1a4f3778cb90ba9f0d4e736752f78dad1703caa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e1a4f3778cb90ba9f0d4e736752f78dad1703caa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e1a4f3778cb90ba9f0d4e736752f78dad1703caa/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "21aaf255ff4553ae538fb90011b0185bc8039896",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/21aaf255ff4553ae538fb90011b0185bc8039896",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/21aaf255ff4553ae538fb90011b0185bc8039896"
      }
    ],
    "stats": {
      "total": 171,
      "additions": 145,
      "deletions": 26
    },
    "files": [
      {
        "sha": "36f5e5013468d9e418f2d6c0b81f8029f96422ce",
        "filename": "src/bloom.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 3,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1a4f3778cb90ba9f0d4e736752f78dad1703caa/src/bloom.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1a4f3778cb90ba9f0d4e736752f78dad1703caa/src/bloom.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.cpp?ref=e1a4f3778cb90ba9f0d4e736752f78dad1703caa",
        "patch": "@@ -15,7 +15,7 @@ using namespace std;\n \n static const unsigned char bit_mask[8] = {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80};\n \n-CBloomFilter::CBloomFilter(unsigned int nElements, double nFPRate, unsigned int nTweakIn) :\n+CBloomFilter::CBloomFilter(unsigned int nElements, double nFPRate, unsigned int nTweakIn, unsigned char nFlagsIn) :\n // The ideal size for a bloom filter with a given number of elements and false positive rate is:\n // - nElements * log(fp rate) / ln(2)^2\n // We ignore filter parameters which will create a bloom filter larger than the protocol limits\n@@ -24,7 +24,8 @@ vData(min((unsigned int)(-1  / LN2SQUARED * nElements * log(nFPRate)), MAX_BLOOM\n // Again, we ignore filter parameters which will create a bloom filter with more hash functions than the protocol limits\n // See http://en.wikipedia.org/wiki/Bloom_filter for an explanation of these formulas\n nHashFuncs(min((unsigned int)(vData.size() * 8 / nElements * LN2), MAX_HASH_FUNCS)),\n-nTweak(nTweakIn)\n+nTweak(nTweakIn),\n+nFlags(nFlagsIn)\n {\n }\n \n@@ -114,7 +115,16 @@ bool CBloomFilter::IsRelevantAndUpdate(const CTransaction& tx, const uint256& ha\n             if (data.size() != 0 && contains(data))\n             {\n                 fFound = true;\n-                insert(COutPoint(hash, i));\n+                if ((nFlags & BLOOM_UPDATE_MASK) == BLOOM_UPDATE_ALL)\n+                    insert(COutPoint(hash, i));\n+                else if ((nFlags & BLOOM_UPDATE_MASK) == BLOOM_UPDATE_P2PUBKEY_ONLY)\n+                {\n+                    txnouttype type;\n+                    vector<vector<unsigned char> > vSolutions;\n+                    if (Solver(txout.scriptPubKey, type, vSolutions) &&\n+                            (type == TX_PUBKEY || type == TX_MULTISIG))\n+                        insert(COutPoint(hash, i));\n+                }\n                 break;\n             }\n         }"
      },
      {
        "sha": "389ae748e6238046cabd45dd1643e65e4e209e78",
        "filename": "src/bloom.h",
        "status": "modified",
        "additions": 14,
        "deletions": 1,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1a4f3778cb90ba9f0d4e736752f78dad1703caa/src/bloom.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1a4f3778cb90ba9f0d4e736752f78dad1703caa/src/bloom.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.h?ref=e1a4f3778cb90ba9f0d4e736752f78dad1703caa",
        "patch": "@@ -16,6 +16,16 @@ class CTransaction;\n static const unsigned int MAX_BLOOM_FILTER_SIZE = 36000; // bytes\n static const unsigned int MAX_HASH_FUNCS = 50;\n \n+// First two bits of nFlags control how much IsRelevantAndUpdate actually updates\n+// The remaining bits are reserved\n+enum bloomflags\n+{\n+    BLOOM_UPDATE_NONE = 0,\n+    BLOOM_UPDATE_ALL = 1,\n+    // Only adds outpoints to the filter if the output is a pay-to-pubkey/pay-to-multisig script\n+    BLOOM_UPDATE_P2PUBKEY_ONLY = 2,\n+    BLOOM_UPDATE_MASK = 3,\n+};\n \n /**\n  * BloomFilter is a probabilistic filter which SPV clients provide\n@@ -34,6 +44,7 @@ class CBloomFilter\n     std::vector<unsigned char> vData;\n     unsigned int nHashFuncs;\n     unsigned int nTweak;\n+    unsigned char nFlags;\n \n     unsigned int Hash(unsigned int nHashNum, const std::vector<unsigned char>& vDataToHash) const;\n \n@@ -44,7 +55,8 @@ class CBloomFilter\n     // This will apply if nFPRate is very low or nElements is unreasonably high.\n     // nTweak is a constant which is added to the seed value passed to the hash function\n     // It should generally always be a random value (and is largely only exposed for unit testing)\n-    CBloomFilter(unsigned int nElements, double nFPRate, unsigned int nTweak);\n+    // nFlags should be one of the BLOOM_UPDATE_* enums (not _MASK)\n+    CBloomFilter(unsigned int nElements, double nFPRate, unsigned int nTweak, unsigned char nFlagsIn);\n     // Using a filter initialized with this results in undefined behavior\n     // Should only be used for deserialization\n     CBloomFilter() {}\n@@ -54,6 +66,7 @@ class CBloomFilter\n         READWRITE(vData);\n         READWRITE(nHashFuncs);\n         READWRITE(nTweak);\n+        READWRITE(nFlags);\n     )\n \n     void insert(const std::vector<unsigned char>& vKey);"
      },
      {
        "sha": "4a2851cf46cdaf6e680ff1dfb54c3da1bc14481b",
        "filename": "src/test/bloom_tests.cpp",
        "status": "modified",
        "additions": 118,
        "deletions": 22,
        "changes": 140,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1a4f3778cb90ba9f0d4e736752f78dad1703caa/src/test/bloom_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1a4f3778cb90ba9f0d4e736752f78dad1703caa/src/test/bloom_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bloom_tests.cpp?ref=e1a4f3778cb90ba9f0d4e736752f78dad1703caa",
        "patch": "@@ -14,7 +14,7 @@ BOOST_AUTO_TEST_SUITE(bloom_tests)\n \n BOOST_AUTO_TEST_CASE(bloom_create_insert_serialize)\n {\n-    CBloomFilter filter(3, 0.01, 0);\n+    CBloomFilter filter(3, 0.01, 0, BLOOM_UPDATE_ALL);\n \n     filter.insert(ParseHex(\"99108ad8ed9bb6274d3980bab5a85c048f0950c8\"));\n     BOOST_CHECK_MESSAGE( filter.contains(ParseHex(\"99108ad8ed9bb6274d3980bab5a85c048f0950c8\")), \"BloomFilter doesn't contain just-inserted object!\");\n@@ -30,7 +30,7 @@ BOOST_AUTO_TEST_CASE(bloom_create_insert_serialize)\n     CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n     filter.Serialize(stream, SER_NETWORK, PROTOCOL_VERSION);\n \n-    vector<unsigned char> vch = ParseHex(\"03614e9b0500000000000000\");\n+    vector<unsigned char> vch = ParseHex(\"03614e9b050000000000000001\");\n     vector<char> expected(vch.size());\n \n     for (unsigned int i = 0; i < vch.size(); i++)\n@@ -42,7 +42,7 @@ BOOST_AUTO_TEST_CASE(bloom_create_insert_serialize)\n BOOST_AUTO_TEST_CASE(bloom_create_insert_serialize_with_tweak)\n {\n     // Same test as bloom_create_insert_serialize, but we add a nTweak of 100\n-    CBloomFilter filter(3, 0.01, 2147483649);\n+    CBloomFilter filter(3, 0.01, 2147483649, BLOOM_UPDATE_ALL);\n \n     filter.insert(ParseHex(\"99108ad8ed9bb6274d3980bab5a85c048f0950c8\"));\n     BOOST_CHECK_MESSAGE( filter.contains(ParseHex(\"99108ad8ed9bb6274d3980bab5a85c048f0950c8\")), \"BloomFilter doesn't contain just-inserted object!\");\n@@ -58,7 +58,7 @@ BOOST_AUTO_TEST_CASE(bloom_create_insert_serialize_with_tweak)\n     CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n     filter.Serialize(stream, SER_NETWORK, PROTOCOL_VERSION);\n \n-    vector<unsigned char> vch = ParseHex(\"03ce42990500000001000080\");\n+    vector<unsigned char> vch = ParseHex(\"03ce4299050000000100008001\");\n     vector<char> expected(vch.size());\n \n     for (unsigned int i = 0; i < vch.size(); i++)\n@@ -78,15 +78,15 @@ BOOST_AUTO_TEST_CASE(bloom_create_insert_key)\n     CSecret secret = vchSecret.GetSecret(fCompressed);\n     key.SetSecret(secret, fCompressed);\n \n-    CBloomFilter filter(2, 0.001, 0);\n+    CBloomFilter filter(2, 0.001, 0, BLOOM_UPDATE_ALL);\n     filter.insert(key.GetPubKey().Raw());\n     uint160 hash = key.GetPubKey().GetID();\n     filter.insert(vector<unsigned char>(hash.begin(), hash.end()));\n \n     CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n     filter.Serialize(stream, SER_NETWORK, PROTOCOL_VERSION);\n \n-    vector<unsigned char> vch = ParseHex(\"038fc16b0800000000000000\");\n+    vector<unsigned char> vch = ParseHex(\"038fc16b080000000000000001\");\n     vector<char> expected(vch.size());\n \n     for (unsigned int i = 0; i < vch.size(); i++)\n@@ -109,37 +109,37 @@ BOOST_AUTO_TEST_CASE(bloom_match)\n     CTransaction spendingTx;\n     spendStream >> spendingTx;\n \n-    CBloomFilter filter(10, 0.000001, 0);\n+    CBloomFilter filter(10, 0.000001, 0, BLOOM_UPDATE_ALL);\n     filter.insert(uint256(\"0xb4749f017444b051c44dfd2720e88f314ff94f3dd6d56d40ef65854fcd7fff6b\"));\n     BOOST_CHECK_MESSAGE(filter.IsRelevantAndUpdate(tx, tx.GetHash()), \"Simple Bloom filter didn't match tx hash\");\n \n-    filter = CBloomFilter(10, 0.000001, 0);\n+    filter = CBloomFilter(10, 0.000001, 0, BLOOM_UPDATE_ALL);\n     // byte-reversed tx hash\n     filter.insert(ParseHex(\"6bff7fcd4f8565ef406dd5d63d4ff94f318fe82027fd4dc451b04474019f74b4\"));\n     BOOST_CHECK_MESSAGE(filter.IsRelevantAndUpdate(tx, tx.GetHash()), \"Simple Bloom filter didn't match manually serialized tx hash\");\n \n-    filter = CBloomFilter(10, 0.000001, 0);\n+    filter = CBloomFilter(10, 0.000001, 0, BLOOM_UPDATE_ALL);\n     filter.insert(ParseHex(\"30450220070aca44506c5cef3a16ed519d7c3c39f8aab192c4e1c90d065f37b8a4af6141022100a8e160b856c2d43d27d8fba71e5aef6405b8643ac4cb7cb3c462aced7f14711a01\"));\n     BOOST_CHECK_MESSAGE(filter.IsRelevantAndUpdate(tx, tx.GetHash()), \"Simple Bloom filter didn't match input signature\");\n \n-    filter = CBloomFilter(10, 0.000001, 0);\n+    filter = CBloomFilter(10, 0.000001, 0, BLOOM_UPDATE_ALL);\n     filter.insert(ParseHex(\"046d11fee51b0e60666d5049a9101a72741df480b96ee26488a4d3466b95c9a40ac5eeef87e10a5cd336c19a84565f80fa6c547957b7700ff4dfbdefe76036c339\"));\n     BOOST_CHECK_MESSAGE(filter.IsRelevantAndUpdate(tx, tx.GetHash()), \"Simple Bloom filter didn't match input pub key\");\n \n-    filter = CBloomFilter(10, 0.000001, 0);\n+    filter = CBloomFilter(10, 0.000001, 0, BLOOM_UPDATE_ALL);\n     filter.insert(ParseHex(\"04943fdd508053c75000106d3bc6e2754dbcff19\"));\n     BOOST_CHECK_MESSAGE(filter.IsRelevantAndUpdate(tx, tx.GetHash()), \"Simple Bloom filter didn't match output address\");\n     BOOST_CHECK_MESSAGE(filter.IsRelevantAndUpdate(spendingTx, spendingTx.GetHash()), \"Simple Bloom filter didn't add output\");\n \n-    filter = CBloomFilter(10, 0.000001, 0);\n+    filter = CBloomFilter(10, 0.000001, 0, BLOOM_UPDATE_ALL);\n     filter.insert(ParseHex(\"a266436d2965547608b9e15d9032a7b9d64fa431\"));\n     BOOST_CHECK_MESSAGE(filter.IsRelevantAndUpdate(tx, tx.GetHash()), \"Simple Bloom filter didn't match output address\");\n \n-    filter = CBloomFilter(10, 0.000001, 0);\n+    filter = CBloomFilter(10, 0.000001, 0, BLOOM_UPDATE_ALL);\n     filter.insert(COutPoint(uint256(\"0x90c122d70786e899529d71dbeba91ba216982fb6ba58f3bdaab65e73b7e9260b\"), 0));\n     BOOST_CHECK_MESSAGE(filter.IsRelevantAndUpdate(tx, tx.GetHash()), \"Simple Bloom filter didn't match COutPoint\");\n \n-    filter = CBloomFilter(10, 0.000001, 0);\n+    filter = CBloomFilter(10, 0.000001, 0, BLOOM_UPDATE_ALL);\n     COutPoint prevOutPoint(uint256(\"0x90c122d70786e899529d71dbeba91ba216982fb6ba58f3bdaab65e73b7e9260b\"), 0);\n     {\n         vector<unsigned char> data(32 + sizeof(unsigned int));\n@@ -149,19 +149,19 @@ BOOST_AUTO_TEST_CASE(bloom_match)\n     }\n     BOOST_CHECK_MESSAGE(filter.IsRelevantAndUpdate(tx, tx.GetHash()), \"Simple Bloom filter didn't match manually serialized COutPoint\");\n \n-    filter = CBloomFilter(10, 0.000001, 0);\n+    filter = CBloomFilter(10, 0.000001, 0, BLOOM_UPDATE_ALL);\n     filter.insert(uint256(\"00000009e784f32f62ef849763d4f45b98e07ba658647343b915ff832b110436\"));\n     BOOST_CHECK_MESSAGE(!filter.IsRelevantAndUpdate(tx, tx.GetHash()), \"Simple Bloom filter matched random tx hash\");\n \n-    filter = CBloomFilter(10, 0.000001, 0);\n+    filter = CBloomFilter(10, 0.000001, 0, BLOOM_UPDATE_ALL);\n     filter.insert(ParseHex(\"0000006d2965547608b9e15d9032a7b9d64fa431\"));\n     BOOST_CHECK_MESSAGE(!filter.IsRelevantAndUpdate(tx, tx.GetHash()), \"Simple Bloom filter matched random address\");\n \n-    filter = CBloomFilter(10, 0.000001, 0);\n+    filter = CBloomFilter(10, 0.000001, 0, BLOOM_UPDATE_ALL);\n     filter.insert(COutPoint(uint256(\"0x90c122d70786e899529d71dbeba91ba216982fb6ba58f3bdaab65e73b7e9260b\"), 1));\n     BOOST_CHECK_MESSAGE(!filter.IsRelevantAndUpdate(tx, tx.GetHash()), \"Simple Bloom filter matched COutPoint for an output we didn't care about\");\n \n-    filter = CBloomFilter(10, 0.000001, 0);\n+    filter = CBloomFilter(10, 0.000001, 0, BLOOM_UPDATE_ALL);\n     filter.insert(COutPoint(uint256(\"0x000000d70786e899529d71dbeba91ba216982fb6ba58f3bdaab65e73b7e9260b\"), 0));\n     BOOST_CHECK_MESSAGE(!filter.IsRelevantAndUpdate(tx, tx.GetHash()), \"Simple Bloom filter matched COutPoint for an output we didn't care about\");\n }\n@@ -174,7 +174,7 @@ BOOST_AUTO_TEST_CASE(merkle_block_1)\n     CDataStream stream(ParseHex(\"0100000090f0a9f110702f808219ebea1173056042a714bad51b916cb6800000000000005275289558f51c9966699404ae2294730c3c9f9bda53523ce50e9b95e558da2fdb261b4d4c86041b1ab1bf930901000000010000000000000000000000000000000000000000000000000000000000000000ffffffff07044c86041b0146ffffffff0100f2052a01000000434104e18f7afbe4721580e81e8414fc8c24d7cfacf254bb5c7b949450c3e997c2dc1242487a8169507b631eb3771f2b425483fb13102c4eb5d858eef260fe70fbfae0ac00000000010000000196608ccbafa16abada902780da4dc35dafd7af05fa0da08cf833575f8cf9e836000000004a493046022100dab24889213caf43ae6adc41cf1c9396c08240c199f5225acf45416330fd7dbd022100fe37900e0644bf574493a07fc5edba06dbc07c311b947520c2d514bc5725dcb401ffffffff0100f2052a010000001976a914f15d1921f52e4007b146dfa60f369ed2fc393ce288ac000000000100000001fb766c1288458c2bafcfec81e48b24d98ec706de6b8af7c4e3c29419bfacb56d000000008c493046022100f268ba165ce0ad2e6d93f089cfcd3785de5c963bb5ea6b8c1b23f1ce3e517b9f022100da7c0f21adc6c401887f2bfd1922f11d76159cbc597fbd756a23dcbb00f4d7290141042b4e8625a96127826915a5b109852636ad0da753c9e1d5606a50480cd0c40f1f8b8d898235e571fe9357d9ec842bc4bba1827daaf4de06d71844d0057707966affffffff0280969800000000001976a9146963907531db72d0ed1a0cfb471ccb63923446f388ac80d6e34c000000001976a914f0688ba1c0d1ce182c7af6741e02658c7d4dfcd388ac000000000100000002c40297f730dd7b5a99567eb8d27b78758f607507c52292d02d4031895b52f2ff010000008b483045022100f7edfd4b0aac404e5bab4fd3889e0c6c41aa8d0e6fa122316f68eddd0a65013902205b09cc8b2d56e1cd1f7f2fafd60a129ed94504c4ac7bdc67b56fe67512658b3e014104732012cb962afa90d31b25d8fb0e32c94e513ab7a17805c14ca4c3423e18b4fb5d0e676841733cb83abaf975845c9f6f2a8097b7d04f4908b18368d6fc2d68ecffffffffca5065ff9617cbcba45eb23726df6498a9b9cafed4f54cbab9d227b0035ddefb000000008a473044022068010362a13c7f9919fa832b2dee4e788f61f6f5d344a7c2a0da6ae740605658022006d1af525b9a14a35c003b78b72bd59738cd676f845d1ff3fc25049e01003614014104732012cb962afa90d31b25d8fb0e32c94e513ab7a17805c14ca4c3423e18b4fb5d0e676841733cb83abaf975845c9f6f2a8097b7d04f4908b18368d6fc2d68ecffffffff01001ec4110200000043410469ab4181eceb28985b9b4e895c13fa5e68d85761b7eee311db5addef76fa8621865134a221bd01f28ec9999ee3e021e60766e9d1f3458c115fb28650605f11c9ac000000000100000001cdaf2f758e91c514655e2dc50633d1e4c84989f8aa90a0dbc883f0d23ed5c2fa010000008b48304502207ab51be6f12a1962ba0aaaf24a20e0b69b27a94fac5adf45aa7d2d18ffd9236102210086ae728b370e5329eead9accd880d0cb070aea0c96255fae6c4f1ddcce1fd56e014104462e76fd4067b3a0aa42070082dcb0bf2f388b6495cf33d789904f07d0f55c40fbd4b82963c69b3dc31895d0c772c812b1d5fbcade15312ef1c0e8ebbb12dcd4ffffffff02404b4c00000000001976a9142b6ba7c9d796b75eef7942fc9288edd37c32f5c388ac002d3101000000001976a9141befba0cdc1ad56529371864d9f6cb042faa06b588ac000000000100000001b4a47603e71b61bc3326efd90111bf02d2f549b067f4c4a8fa183b57a0f800cb010000008a4730440220177c37f9a505c3f1a1f0ce2da777c339bd8339ffa02c7cb41f0a5804f473c9230220585b25a2ee80eb59292e52b987dad92acb0c64eced92ed9ee105ad153cdb12d001410443bd44f683467e549dae7d20d1d79cbdb6df985c6e9c029c8d0c6cb46cc1a4d3cf7923c5021b27f7a0b562ada113bc85d5fda5a1b41e87fe6e8802817cf69996ffffffff0280651406000000001976a9145505614859643ab7b547cd7f1f5e7e2a12322d3788ac00aa0271000000001976a914ea4720a7a52fc166c55ff2298e07baf70ae67e1b88ac00000000010000000586c62cd602d219bb60edb14a3e204de0705176f9022fe49a538054fb14abb49e010000008c493046022100f2bc2aba2534becbdf062eb993853a42bbbc282083d0daf9b4b585bd401aa8c9022100b1d7fd7ee0b95600db8535bbf331b19eed8d961f7a8e54159c53675d5f69df8c014104462e76fd4067b3a0aa42070082dcb0bf2f388b6495cf33d789904f07d0f55c40fbd4b82963c69b3dc31895d0c772c812b1d5fbcade15312ef1c0e8ebbb12dcd4ffffffff03ad0e58ccdac3df9dc28a218bcf6f1997b0a93306faaa4b3a28ae83447b2179010000008b483045022100be12b2937179da88599e27bb31c3525097a07cdb52422d165b3ca2f2020ffcf702200971b51f853a53d644ebae9ec8f3512e442b1bcb6c315a5b491d119d10624c83014104462e76fd4067b3a0aa42070082dcb0bf2f388b6495cf33d789904f07d0f55c40fbd4b82963c69b3dc31895d0c772c812b1d5fbcade15312ef1c0e8ebbb12dcd4ffffffff2acfcab629bbc8685792603762c921580030ba144af553d271716a95089e107b010000008b483045022100fa579a840ac258871365dd48cd7552f96c8eea69bd00d84f05b283a0dab311e102207e3c0ee9234814cfbb1b659b83671618f45abc1326b9edcc77d552a4f2a805c0014104462e76fd4067b3a0aa42070082dcb0bf2f388b6495cf33d789904f07d0f55c40fbd4b82963c69b3dc31895d0c772c812b1d5fbcade15312ef1c0e8ebbb12dcd4ffffffffdcdc6023bbc9944a658ddc588e61eacb737ddf0a3cd24f113b5a8634c517fcd2000000008b4830450221008d6df731df5d32267954bd7d2dda2302b74c6c2a6aa5c0ca64ecbabc1af03c75022010e55c571d65da7701ae2da1956c442df81bbf076cdbac25133f99d98a9ed34c014104462e76fd4067b3a0aa42070082dcb0bf2f388b6495cf33d789904f07d0f55c40fbd4b82963c69b3dc31895d0c772c812b1d5fbcade15312ef1c0e8ebbb12dcd4ffffffffe15557cd5ce258f479dfd6dc6514edf6d7ed5b21fcfa4a038fd69f06b83ac76e010000008b483045022023b3e0ab071eb11de2eb1cc3a67261b866f86bf6867d4558165f7c8c8aca2d86022100dc6e1f53a91de3efe8f63512850811f26284b62f850c70ca73ed5de8771fb451014104462e76fd4067b3a0aa42070082dcb0bf2f388b6495cf33d789904f07d0f55c40fbd4b82963c69b3dc31895d0c772c812b1d5fbcade15312ef1c0e8ebbb12dcd4ffffffff01404b4c00000000001976a9142b6ba7c9d796b75eef7942fc9288edd37c32f5c388ac00000000010000000166d7577163c932b4f9690ca6a80b6e4eb001f0a2fa9023df5595602aae96ed8d000000008a4730440220262b42546302dfb654a229cefc86432b89628ff259dc87edd1154535b16a67e102207b4634c020a97c3e7bbd0d4d19da6aa2269ad9dded4026e896b213d73ca4b63f014104979b82d02226b3a4597523845754d44f13639e3bf2df5e82c6aab2bdc79687368b01b1ab8b19875ae3c90d661a3d0a33161dab29934edeb36aa01976be3baf8affffffff02404b4c00000000001976a9144854e695a02af0aeacb823ccbc272134561e0a1688ac40420f00000000001976a914abee93376d6b37b5c2940655a6fcaf1c8e74237988ac0000000001000000014e3f8ef2e91349a9059cb4f01e54ab2597c1387161d3da89919f7ea6acdbb371010000008c49304602210081f3183471a5ca22307c0800226f3ef9c353069e0773ac76bb580654d56aa523022100d4c56465bdc069060846f4fbf2f6b20520b2a80b08b168b31e66ddb9c694e240014104976c79848e18251612f8940875b2b08d06e6dc73b9840e8860c066b7e87432c477e9a59a453e71e6d76d5fe34058b800a098fc1740ce3012e8fc8a00c96af966ffffffff02c0e1e400000000001976a9144134e75a6fcb6042034aab5e18570cf1f844f54788ac404b4c00000000001976a9142b6ba7c9d796b75eef7942fc9288edd37c32f5c388ac00000000\"), SER_NETWORK, PROTOCOL_VERSION);\n     stream >> block;\n \n-    CBloomFilter filter(10, 0.000001, 0);\n+    CBloomFilter filter(10, 0.000001, 0, BLOOM_UPDATE_ALL);\n     // Match the last transaction\n     filter.insert(uint256(\"0x74d681e0e03bafa802c8aa084379aa98d9fcd632ddc2ed9782b586ec87451f20\"));\n \n@@ -219,7 +219,7 @@ BOOST_AUTO_TEST_CASE(merkle_block_2)\n     CDataStream stream(ParseHex(\"0100000075616236cc2126035fadb38deb65b9102cc2c41c09cdf29fc051906800000000fe7d5e12ef0ff901f6050211249919b1c0653771832b3a80c66cea42847f0ae1d4d26e49ffff001d00f0a4410401000000010000000000000000000000000000000000000000000000000000000000000000ffffffff0804ffff001d029105ffffffff0100f2052a010000004341046d8709a041d34357697dfcb30a9d05900a6294078012bf3bb09c6f9b525f1d16d5503d7905db1ada9501446ea00728668fc5719aa80be2fdfc8a858a4dbdd4fbac00000000010000000255605dc6f5c3dc148b6da58442b0b2cd422be385eab2ebea4119ee9c268d28350000000049483045022100aa46504baa86df8a33b1192b1b9367b4d729dc41e389f2c04f3e5c7f0559aae702205e82253a54bf5c4f65b7428551554b2045167d6d206dfe6a2e198127d3f7df1501ffffffff55605dc6f5c3dc148b6da58442b0b2cd422be385eab2ebea4119ee9c268d2835010000004847304402202329484c35fa9d6bb32a55a70c0982f606ce0e3634b69006138683bcd12cbb6602200c28feb1e2555c3210f1dddb299738b4ff8bbe9667b68cb8764b5ac17b7adf0001ffffffff0200e1f505000000004341046a0765b5865641ce08dd39690aade26dfbf5511430ca428a3089261361cef170e3929a68aee3d8d4848b0c5111b0a37b82b86ad559fd2a745b44d8e8d9dfdc0cac00180d8f000000004341044a656f065871a353f216ca26cef8dde2f03e8c16202d2e8ad769f02032cb86a5eb5e56842e92e19141d60a01928f8dd2c875a390f67c1f6c94cfc617c0ea45afac0000000001000000025f9a06d3acdceb56be1bfeaa3e8a25e62d182fa24fefe899d1c17f1dad4c2028000000004847304402205d6058484157235b06028c30736c15613a28bdb768ee628094ca8b0030d4d6eb0220328789c9a2ec27ddaec0ad5ef58efded42e6ea17c2e1ce838f3d6913f5e95db601ffffffff5f9a06d3acdceb56be1bfeaa3e8a25e62d182fa24fefe899d1c17f1dad4c2028010000004a493046022100c45af050d3cea806cedd0ab22520c53ebe63b987b8954146cdca42487b84bdd6022100b9b027716a6b59e640da50a864d6dd8a0ef24c76ce62391fa3eabaf4d2886d2d01ffffffff0200e1f505000000004341046a0765b5865641ce08dd39690aade26dfbf5511430ca428a3089261361cef170e3929a68aee3d8d4848b0c5111b0a37b82b86ad559fd2a745b44d8e8d9dfdc0cac00180d8f000000004341046a0765b5865641ce08dd39690aade26dfbf5511430ca428a3089261361cef170e3929a68aee3d8d4848b0c5111b0a37b82b86ad559fd2a745b44d8e8d9dfdc0cac000000000100000002e2274e5fea1bf29d963914bd301aa63b64daaf8a3e88f119b5046ca5738a0f6b0000000048473044022016e7a727a061ea2254a6c358376aaa617ac537eb836c77d646ebda4c748aac8b0220192ce28bf9f2c06a6467e6531e27648d2b3e2e2bae85159c9242939840295ba501ffffffffe2274e5fea1bf29d963914bd301aa63b64daaf8a3e88f119b5046ca5738a0f6b010000004a493046022100b7a1a755588d4190118936e15cd217d133b0e4a53c3c15924010d5648d8925c9022100aaef031874db2114f2d869ac2de4ae53908fbfea5b2b1862e181626bb9005c9f01ffffffff0200e1f505000000004341044a656f065871a353f216ca26cef8dde2f03e8c16202d2e8ad769f02032cb86a5eb5e56842e92e19141d60a01928f8dd2c875a390f67c1f6c94cfc617c0ea45afac00180d8f000000004341046a0765b5865641ce08dd39690aade26dfbf5511430ca428a3089261361cef170e3929a68aee3d8d4848b0c5111b0a37b82b86ad559fd2a745b44d8e8d9dfdc0cac00000000\"), SER_NETWORK, PROTOCOL_VERSION);\n     stream >> block;\n \n-    CBloomFilter filter(10, 0.000001, 0);\n+    CBloomFilter filter(10, 0.000001, 0, BLOOM_UPDATE_ALL);\n     // Match the first transaction\n     filter.insert(uint256(\"0xe980fe9f792d014e73b95203dc1335c5f9ce19ac537a419e6df5b47aecb93b70\"));\n \n@@ -265,6 +265,57 @@ BOOST_AUTO_TEST_CASE(merkle_block_2)\n         BOOST_CHECK(vMatched[i] == merkleBlock.vMatchedTxn[i].second);\n }\n \n+BOOST_AUTO_TEST_CASE(merkle_block_2_with_update_none)\n+{\n+    // Random real block (000000005a4ded781e667e06ceefafb71410b511fe0d5adc3e5a27ecbec34ae6)\n+    // With 4 txes\n+    CBlock block;\n+    CDataStream stream(ParseHex(\"0100000075616236cc2126035fadb38deb65b9102cc2c41c09cdf29fc051906800000000fe7d5e12ef0ff901f6050211249919b1c0653771832b3a80c66cea42847f0ae1d4d26e49ffff001d00f0a4410401000000010000000000000000000000000000000000000000000000000000000000000000ffffffff0804ffff001d029105ffffffff0100f2052a010000004341046d8709a041d34357697dfcb30a9d05900a6294078012bf3bb09c6f9b525f1d16d5503d7905db1ada9501446ea00728668fc5719aa80be2fdfc8a858a4dbdd4fbac00000000010000000255605dc6f5c3dc148b6da58442b0b2cd422be385eab2ebea4119ee9c268d28350000000049483045022100aa46504baa86df8a33b1192b1b9367b4d729dc41e389f2c04f3e5c7f0559aae702205e82253a54bf5c4f65b7428551554b2045167d6d206dfe6a2e198127d3f7df1501ffffffff55605dc6f5c3dc148b6da58442b0b2cd422be385eab2ebea4119ee9c268d2835010000004847304402202329484c35fa9d6bb32a55a70c0982f606ce0e3634b69006138683bcd12cbb6602200c28feb1e2555c3210f1dddb299738b4ff8bbe9667b68cb8764b5ac17b7adf0001ffffffff0200e1f505000000004341046a0765b5865641ce08dd39690aade26dfbf5511430ca428a3089261361cef170e3929a68aee3d8d4848b0c5111b0a37b82b86ad559fd2a745b44d8e8d9dfdc0cac00180d8f000000004341044a656f065871a353f216ca26cef8dde2f03e8c16202d2e8ad769f02032cb86a5eb5e56842e92e19141d60a01928f8dd2c875a390f67c1f6c94cfc617c0ea45afac0000000001000000025f9a06d3acdceb56be1bfeaa3e8a25e62d182fa24fefe899d1c17f1dad4c2028000000004847304402205d6058484157235b06028c30736c15613a28bdb768ee628094ca8b0030d4d6eb0220328789c9a2ec27ddaec0ad5ef58efded42e6ea17c2e1ce838f3d6913f5e95db601ffffffff5f9a06d3acdceb56be1bfeaa3e8a25e62d182fa24fefe899d1c17f1dad4c2028010000004a493046022100c45af050d3cea806cedd0ab22520c53ebe63b987b8954146cdca42487b84bdd6022100b9b027716a6b59e640da50a864d6dd8a0ef24c76ce62391fa3eabaf4d2886d2d01ffffffff0200e1f505000000004341046a0765b5865641ce08dd39690aade26dfbf5511430ca428a3089261361cef170e3929a68aee3d8d4848b0c5111b0a37b82b86ad559fd2a745b44d8e8d9dfdc0cac00180d8f000000004341046a0765b5865641ce08dd39690aade26dfbf5511430ca428a3089261361cef170e3929a68aee3d8d4848b0c5111b0a37b82b86ad559fd2a745b44d8e8d9dfdc0cac000000000100000002e2274e5fea1bf29d963914bd301aa63b64daaf8a3e88f119b5046ca5738a0f6b0000000048473044022016e7a727a061ea2254a6c358376aaa617ac537eb836c77d646ebda4c748aac8b0220192ce28bf9f2c06a6467e6531e27648d2b3e2e2bae85159c9242939840295ba501ffffffffe2274e5fea1bf29d963914bd301aa63b64daaf8a3e88f119b5046ca5738a0f6b010000004a493046022100b7a1a755588d4190118936e15cd217d133b0e4a53c3c15924010d5648d8925c9022100aaef031874db2114f2d869ac2de4ae53908fbfea5b2b1862e181626bb9005c9f01ffffffff0200e1f505000000004341044a656f065871a353f216ca26cef8dde2f03e8c16202d2e8ad769f02032cb86a5eb5e56842e92e19141d60a01928f8dd2c875a390f67c1f6c94cfc617c0ea45afac00180d8f000000004341046a0765b5865641ce08dd39690aade26dfbf5511430ca428a3089261361cef170e3929a68aee3d8d4848b0c5111b0a37b82b86ad559fd2a745b44d8e8d9dfdc0cac00000000\"), SER_NETWORK, PROTOCOL_VERSION);\n+    stream >> block;\n+\n+    CBloomFilter filter(10, 0.000001, 0, BLOOM_UPDATE_NONE);\n+    // Match the first transaction\n+    filter.insert(uint256(\"0xe980fe9f792d014e73b95203dc1335c5f9ce19ac537a419e6df5b47aecb93b70\"));\n+\n+    CMerkleBlock merkleBlock(block, filter);\n+    BOOST_CHECK(merkleBlock.header.GetHash() == block.GetHash());\n+\n+    BOOST_CHECK(merkleBlock.vMatchedTxn.size() == 1);\n+    pair<unsigned int, uint256> pair = merkleBlock.vMatchedTxn[0];\n+\n+    BOOST_CHECK(merkleBlock.vMatchedTxn[0].second == uint256(\"0xe980fe9f792d014e73b95203dc1335c5f9ce19ac537a419e6df5b47aecb93b70\"));\n+    BOOST_CHECK(merkleBlock.vMatchedTxn[0].first == 0);\n+\n+    vector<uint256> vMatched;\n+    BOOST_CHECK(merkleBlock.txn.ExtractMatches(vMatched) == block.hashMerkleRoot);\n+    BOOST_CHECK(vMatched.size() == merkleBlock.vMatchedTxn.size());\n+    for (unsigned int i = 0; i < vMatched.size(); i++)\n+        BOOST_CHECK(vMatched[i] == merkleBlock.vMatchedTxn[i].second);\n+\n+    // Match an output from the second transaction (the pubkey for address 1DZTzaBHUDM7T3QvUKBz4qXMRpkg8jsfB5)\n+    // This should not match the third transaction though it spends the output matched\n+    // It will match the fourth transaction, which has another pay-to-pubkey output to the same address\n+    filter.insert(ParseHex(\"044a656f065871a353f216ca26cef8dde2f03e8c16202d2e8ad769f02032cb86a5eb5e56842e92e19141d60a01928f8dd2c875a390f67c1f6c94cfc617c0ea45af\"));\n+\n+    merkleBlock = CMerkleBlock(block, filter);\n+    BOOST_CHECK(merkleBlock.header.GetHash() == block.GetHash());\n+\n+    BOOST_CHECK(merkleBlock.vMatchedTxn.size() == 3);\n+\n+    BOOST_CHECK(pair == merkleBlock.vMatchedTxn[0]);\n+\n+    BOOST_CHECK(merkleBlock.vMatchedTxn[1].second == uint256(\"0x28204cad1d7fc1d199e8ef4fa22f182de6258a3eaafe1bbe56ebdcacd3069a5f\"));\n+    BOOST_CHECK(merkleBlock.vMatchedTxn[1].first == 1);\n+\n+    BOOST_CHECK(merkleBlock.vMatchedTxn[2].second == uint256(\"0x3c1d7e82342158e4109df2e0b6348b6e84e403d8b4046d7007663ace63cddb23\"));\n+    BOOST_CHECK(merkleBlock.vMatchedTxn[2].first == 3);\n+\n+    BOOST_CHECK(merkleBlock.txn.ExtractMatches(vMatched) == block.hashMerkleRoot);\n+    BOOST_CHECK(vMatched.size() == merkleBlock.vMatchedTxn.size());\n+    for (unsigned int i = 0; i < vMatched.size(); i++)\n+        BOOST_CHECK(vMatched[i] == merkleBlock.vMatchedTxn[i].second);\n+}\n+\n BOOST_AUTO_TEST_CASE(merkle_block_3_and_serialize)\n {\n     // Random real block (000000000000dab0130bbcc991d3d7ae6b81aa6f50a798888dfe62337458dc45)\n@@ -273,7 +324,7 @@ BOOST_AUTO_TEST_CASE(merkle_block_3_and_serialize)\n     CDataStream stream(ParseHex(\"0100000079cda856b143d9db2c1caff01d1aecc8630d30625d10e8b4b8b0000000000000b50cc069d6a3e33e3ff84a5c41d9d3febe7c770fdcc96b2c3ff60abe184f196367291b4d4c86041b8fa45d630101000000010000000000000000000000000000000000000000000000000000000000000000ffffffff08044c86041b020a02ffffffff0100f2052a01000000434104ecd3229b0571c3be876feaac0442a9f13c5a572742927af1dc623353ecf8c202225f64868137a18cdd85cbbb4c74fbccfd4f49639cf1bdc94a5672bb15ad5d4cac00000000\"), SER_NETWORK, PROTOCOL_VERSION);\n     stream >> block;\n \n-    CBloomFilter filter(10, 0.000001, 0);\n+    CBloomFilter filter(10, 0.000001, 0, BLOOM_UPDATE_ALL);\n     // Match the only transaction\n     filter.insert(uint256(\"0x63194f18be0af63f2c6bc9dc0f777cbefed3d9415c4af83f3ee3a3d669c00cb5\"));\n \n@@ -311,7 +362,7 @@ BOOST_AUTO_TEST_CASE(merkle_block_4)\n     CDataStream stream(ParseHex(\"0100000082bb869cf3a793432a66e826e05a6fc37469f8efb7421dc880670100000000007f16c5962e8bd963659c793ce370d95f093bc7e367117b3c30c1f8fdd0d9728776381b4d4c86041b554b85290701000000010000000000000000000000000000000000000000000000000000000000000000ffffffff07044c86041b0136ffffffff0100f2052a01000000434104eaafc2314def4ca98ac970241bcab022b9c1e1f4ea423a20f134c876f2c01ec0f0dd5b2e86e7168cefe0d81113c3807420ce13ad1357231a2252247d97a46a91ac000000000100000001bcad20a6a29827d1424f08989255120bf7f3e9e3cdaaa6bb31b0737fe048724300000000494830450220356e834b046cadc0f8ebb5a8a017b02de59c86305403dad52cd77b55af062ea10221009253cd6c119d4729b77c978e1e2aa19f5ea6e0e52b3f16e32fa608cd5bab753901ffffffff02008d380c010000001976a9142b4b8072ecbba129b6453c63e129e643207249ca88ac0065cd1d000000001976a9141b8dd13b994bcfc787b32aeadf58ccb3615cbd5488ac000000000100000003fdacf9b3eb077412e7a968d2e4f11b9a9dee312d666187ed77ee7d26af16cb0b000000008c493046022100ea1608e70911ca0de5af51ba57ad23b9a51db8d28f82c53563c56a05c20f5a87022100a8bdc8b4a8acc8634c6b420410150775eb7f2474f5615f7fccd65af30f310fbf01410465fdf49e29b06b9a1582287b6279014f834edc317695d125ef623c1cc3aaece245bd69fcad7508666e9c74a49dc9056d5fc14338ef38118dc4afae5fe2c585caffffffff309e1913634ecb50f3c4f83e96e70b2df071b497b8973a3e75429df397b5af83000000004948304502202bdb79c596a9ffc24e96f4386199aba386e9bc7b6071516e2b51dda942b3a1ed022100c53a857e76b724fc14d45311eac5019650d415c3abb5428f3aae16d8e69bec2301ffffffff2089e33491695080c9edc18a428f7d834db5b6d372df13ce2b1b0e0cbcb1e6c10000000049483045022100d4ce67c5896ee251c810ac1ff9ceccd328b497c8f553ab6e08431e7d40bad6b5022033119c0c2b7d792d31f1187779c7bd95aefd93d90a715586d73801d9b47471c601ffffffff0100714460030000001976a914c7b55141d097ea5df7a0ed330cf794376e53ec8d88ac0000000001000000045bf0e214aa4069a3e792ecee1e1bf0c1d397cde8dd08138f4b72a00681743447000000008b48304502200c45de8c4f3e2c1821f2fc878cba97b1e6f8807d94930713aa1c86a67b9bf1e40221008581abfef2e30f957815fc89978423746b2086375ca8ecf359c85c2a5b7c88ad01410462bb73f76ca0994fcb8b4271e6fb7561f5c0f9ca0cf6485261c4a0dc894f4ab844c6cdfb97cd0b60ffb5018ffd6238f4d87270efb1d3ae37079b794a92d7ec95ffffffffd669f7d7958d40fc59d2253d88e0f248e29b599c80bbcec344a83dda5f9aa72c000000008a473044022078124c8beeaa825f9e0b30bff96e564dd859432f2d0cb3b72d3d5d93d38d7e930220691d233b6c0f995be5acb03d70a7f7a65b6bc9bdd426260f38a1346669507a3601410462bb73f76ca0994fcb8b4271e6fb7561f5c0f9ca0cf6485261c4a0dc894f4ab844c6cdfb97cd0b60ffb5018ffd6238f4d87270efb1d3ae37079b794a92d7ec95fffffffff878af0d93f5229a68166cf051fd372bb7a537232946e0a46f53636b4dafdaa4000000008c493046022100c717d1714551663f69c3c5759bdbb3a0fcd3fab023abc0e522fe6440de35d8290221008d9cbe25bffc44af2b18e81c58eb37293fd7fe1c2e7b46fc37ee8c96c50ab1e201410462bb73f76ca0994fcb8b4271e6fb7561f5c0f9ca0cf6485261c4a0dc894f4ab844c6cdfb97cd0b60ffb5018ffd6238f4d87270efb1d3ae37079b794a92d7ec95ffffffff27f2b668859cd7f2f894aa0fd2d9e60963bcd07c88973f425f999b8cbfd7a1e2000000008c493046022100e00847147cbf517bcc2f502f3ddc6d284358d102ed20d47a8aa788a62f0db780022100d17b2d6fa84dcaf1c95d88d7e7c30385aecf415588d749afd3ec81f6022cecd701410462bb73f76ca0994fcb8b4271e6fb7561f5c0f9ca0cf6485261c4a0dc894f4ab844c6cdfb97cd0b60ffb5018ffd6238f4d87270efb1d3ae37079b794a92d7ec95ffffffff0100c817a8040000001976a914b6efd80d99179f4f4ff6f4dd0a007d018c385d2188ac000000000100000001834537b2f1ce8ef9373a258e10545ce5a50b758df616cd4356e0032554ebd3c4000000008b483045022100e68f422dd7c34fdce11eeb4509ddae38201773dd62f284e8aa9d96f85099d0b002202243bd399ff96b649a0fad05fa759d6a882f0af8c90cf7632c2840c29070aec20141045e58067e815c2f464c6a2a15f987758374203895710c2d452442e28496ff38ba8f5fd901dc20e29e88477167fe4fc299bf818fd0d9e1632d467b2a3d9503b1aaffffffff0280d7e636030000001976a914f34c3e10eb387efe872acb614c89e78bfca7815d88ac404b4c00000000001976a914a84e272933aaf87e1715d7786c51dfaeb5b65a6f88ac00000000010000000143ac81c8e6f6ef307dfe17f3d906d999e23e0189fda838c5510d850927e03ae7000000008c4930460221009c87c344760a64cb8ae6685a3eec2c1ac1bed5b88c87de51acd0e124f266c16602210082d07c037359c3a257b5c63ebd90f5a5edf97b2ac1c434b08ca998839f346dd40141040ba7e521fa7946d12edbb1d1e95a15c34bd4398195e86433c92b431cd315f455fe30032ede69cad9d1e1ed6c3c4ec0dbfced53438c625462afb792dcb098544bffffffff0240420f00000000001976a9144676d1b820d63ec272f1900d59d43bc6463d96f888ac40420f00000000001976a914648d04341d00d7968b3405c034adc38d4d8fb9bd88ac00000000010000000248cc917501ea5c55f4a8d2009c0567c40cfe037c2e71af017d0a452ff705e3f1000000008b483045022100bf5fdc86dc5f08a5d5c8e43a8c9d5b1ed8c65562e280007b52b133021acd9acc02205e325d613e555f772802bf413d36ba807892ed1a690a77811d3033b3de226e0a01410429fa713b124484cb2bd7b5557b2c0b9df7b2b1fee61825eadc5ae6c37a9920d38bfccdc7dc3cb0c47d7b173dbc9db8d37db0a33ae487982c59c6f8606e9d1791ffffffff41ed70551dd7e841883ab8f0b16bf04176b7d1480e4f0af9f3d4c3595768d068000000008b4830450221008513ad65187b903aed1102d1d0c47688127658c51106753fed0151ce9c16b80902201432b9ebcb87bd04ceb2de66035fbbaf4bf8b00d1cfe41f1a1f7338f9ad79d210141049d4cf80125bf50be1709f718c07ad15d0fc612b7da1f5570dddc35f2a352f0f27c978b06820edca9ef982c35fda2d255afba340068c5035552368bc7200c1488ffffffff0100093d00000000001976a9148edb68822f1ad580b043c7b3df2e400f8699eb4888ac00000000\"), SER_NETWORK, PROTOCOL_VERSION);\n     stream >> block;\n \n-    CBloomFilter filter(10, 0.000001, 0);\n+    CBloomFilter filter(10, 0.000001, 0, BLOOM_UPDATE_ALL);\n     // Match the last transaction\n     filter.insert(uint256(\"0x0a2a92f0bda4727d0a13eaddf4dd9ac6b5c61a1429e6b2b818f19b15df0ac154\"));\n \n@@ -348,4 +399,49 @@ BOOST_AUTO_TEST_CASE(merkle_block_4)\n         BOOST_CHECK(vMatched[i] == merkleBlock.vMatchedTxn[i].second);\n }\n \n+BOOST_AUTO_TEST_CASE(merkle_block_4_test_p2pubkey_only)\n+{\n+    // Random real block (000000000000b731f2eef9e8c63173adfb07e41bd53eb0ef0a6b720d6cb6dea4)\n+    // With 7 txes\n+    CBlock block;\n+    CDataStream stream(ParseHex(\"0100000082bb869cf3a793432a66e826e05a6fc37469f8efb7421dc880670100000000007f16c5962e8bd963659c793ce370d95f093bc7e367117b3c30c1f8fdd0d9728776381b4d4c86041b554b85290701000000010000000000000000000000000000000000000000000000000000000000000000ffffffff07044c86041b0136ffffffff0100f2052a01000000434104eaafc2314def4ca98ac970241bcab022b9c1e1f4ea423a20f134c876f2c01ec0f0dd5b2e86e7168cefe0d81113c3807420ce13ad1357231a2252247d97a46a91ac000000000100000001bcad20a6a29827d1424f08989255120bf7f3e9e3cdaaa6bb31b0737fe048724300000000494830450220356e834b046cadc0f8ebb5a8a017b02de59c86305403dad52cd77b55af062ea10221009253cd6c119d4729b77c978e1e2aa19f5ea6e0e52b3f16e32fa608cd5bab753901ffffffff02008d380c010000001976a9142b4b8072ecbba129b6453c63e129e643207249ca88ac0065cd1d000000001976a9141b8dd13b994bcfc787b32aeadf58ccb3615cbd5488ac000000000100000003fdacf9b3eb077412e7a968d2e4f11b9a9dee312d666187ed77ee7d26af16cb0b000000008c493046022100ea1608e70911ca0de5af51ba57ad23b9a51db8d28f82c53563c56a05c20f5a87022100a8bdc8b4a8acc8634c6b420410150775eb7f2474f5615f7fccd65af30f310fbf01410465fdf49e29b06b9a1582287b6279014f834edc317695d125ef623c1cc3aaece245bd69fcad7508666e9c74a49dc9056d5fc14338ef38118dc4afae5fe2c585caffffffff309e1913634ecb50f3c4f83e96e70b2df071b497b8973a3e75429df397b5af83000000004948304502202bdb79c596a9ffc24e96f4386199aba386e9bc7b6071516e2b51dda942b3a1ed022100c53a857e76b724fc14d45311eac5019650d415c3abb5428f3aae16d8e69bec2301ffffffff2089e33491695080c9edc18a428f7d834db5b6d372df13ce2b1b0e0cbcb1e6c10000000049483045022100d4ce67c5896ee251c810ac1ff9ceccd328b497c8f553ab6e08431e7d40bad6b5022033119c0c2b7d792d31f1187779c7bd95aefd93d90a715586d73801d9b47471c601ffffffff0100714460030000001976a914c7b55141d097ea5df7a0ed330cf794376e53ec8d88ac0000000001000000045bf0e214aa4069a3e792ecee1e1bf0c1d397cde8dd08138f4b72a00681743447000000008b48304502200c45de8c4f3e2c1821f2fc878cba97b1e6f8807d94930713aa1c86a67b9bf1e40221008581abfef2e30f957815fc89978423746b2086375ca8ecf359c85c2a5b7c88ad01410462bb73f76ca0994fcb8b4271e6fb7561f5c0f9ca0cf6485261c4a0dc894f4ab844c6cdfb97cd0b60ffb5018ffd6238f4d87270efb1d3ae37079b794a92d7ec95ffffffffd669f7d7958d40fc59d2253d88e0f248e29b599c80bbcec344a83dda5f9aa72c000000008a473044022078124c8beeaa825f9e0b30bff96e564dd859432f2d0cb3b72d3d5d93d38d7e930220691d233b6c0f995be5acb03d70a7f7a65b6bc9bdd426260f38a1346669507a3601410462bb73f76ca0994fcb8b4271e6fb7561f5c0f9ca0cf6485261c4a0dc894f4ab844c6cdfb97cd0b60ffb5018ffd6238f4d87270efb1d3ae37079b794a92d7ec95fffffffff878af0d93f5229a68166cf051fd372bb7a537232946e0a46f53636b4dafdaa4000000008c493046022100c717d1714551663f69c3c5759bdbb3a0fcd3fab023abc0e522fe6440de35d8290221008d9cbe25bffc44af2b18e81c58eb37293fd7fe1c2e7b46fc37ee8c96c50ab1e201410462bb73f76ca0994fcb8b4271e6fb7561f5c0f9ca0cf6485261c4a0dc894f4ab844c6cdfb97cd0b60ffb5018ffd6238f4d87270efb1d3ae37079b794a92d7ec95ffffffff27f2b668859cd7f2f894aa0fd2d9e60963bcd07c88973f425f999b8cbfd7a1e2000000008c493046022100e00847147cbf517bcc2f502f3ddc6d284358d102ed20d47a8aa788a62f0db780022100d17b2d6fa84dcaf1c95d88d7e7c30385aecf415588d749afd3ec81f6022cecd701410462bb73f76ca0994fcb8b4271e6fb7561f5c0f9ca0cf6485261c4a0dc894f4ab844c6cdfb97cd0b60ffb5018ffd6238f4d87270efb1d3ae37079b794a92d7ec95ffffffff0100c817a8040000001976a914b6efd80d99179f4f4ff6f4dd0a007d018c385d2188ac000000000100000001834537b2f1ce8ef9373a258e10545ce5a50b758df616cd4356e0032554ebd3c4000000008b483045022100e68f422dd7c34fdce11eeb4509ddae38201773dd62f284e8aa9d96f85099d0b002202243bd399ff96b649a0fad05fa759d6a882f0af8c90cf7632c2840c29070aec20141045e58067e815c2f464c6a2a15f987758374203895710c2d452442e28496ff38ba8f5fd901dc20e29e88477167fe4fc299bf818fd0d9e1632d467b2a3d9503b1aaffffffff0280d7e636030000001976a914f34c3e10eb387efe872acb614c89e78bfca7815d88ac404b4c00000000001976a914a84e272933aaf87e1715d7786c51dfaeb5b65a6f88ac00000000010000000143ac81c8e6f6ef307dfe17f3d906d999e23e0189fda838c5510d850927e03ae7000000008c4930460221009c87c344760a64cb8ae6685a3eec2c1ac1bed5b88c87de51acd0e124f266c16602210082d07c037359c3a257b5c63ebd90f5a5edf97b2ac1c434b08ca998839f346dd40141040ba7e521fa7946d12edbb1d1e95a15c34bd4398195e86433c92b431cd315f455fe30032ede69cad9d1e1ed6c3c4ec0dbfced53438c625462afb792dcb098544bffffffff0240420f00000000001976a9144676d1b820d63ec272f1900d59d43bc6463d96f888ac40420f00000000001976a914648d04341d00d7968b3405c034adc38d4d8fb9bd88ac00000000010000000248cc917501ea5c55f4a8d2009c0567c40cfe037c2e71af017d0a452ff705e3f1000000008b483045022100bf5fdc86dc5f08a5d5c8e43a8c9d5b1ed8c65562e280007b52b133021acd9acc02205e325d613e555f772802bf413d36ba807892ed1a690a77811d3033b3de226e0a01410429fa713b124484cb2bd7b5557b2c0b9df7b2b1fee61825eadc5ae6c37a9920d38bfccdc7dc3cb0c47d7b173dbc9db8d37db0a33ae487982c59c6f8606e9d1791ffffffff41ed70551dd7e841883ab8f0b16bf04176b7d1480e4f0af9f3d4c3595768d068000000008b4830450221008513ad65187b903aed1102d1d0c47688127658c51106753fed0151ce9c16b80902201432b9ebcb87bd04ceb2de66035fbbaf4bf8b00d1cfe41f1a1f7338f9ad79d210141049d4cf80125bf50be1709f718c07ad15d0fc612b7da1f5570dddc35f2a352f0f27c978b06820edca9ef982c35fda2d255afba340068c5035552368bc7200c1488ffffffff0100093d00000000001976a9148edb68822f1ad580b043c7b3df2e400f8699eb4888ac00000000\"), SER_NETWORK, PROTOCOL_VERSION);\n+    stream >> block;\n+\n+    CBloomFilter filter(10, 0.000001, 0, BLOOM_UPDATE_P2PUBKEY_ONLY);\n+    // Match the generation pubkey\n+    filter.insert(ParseHex(\"04eaafc2314def4ca98ac970241bcab022b9c1e1f4ea423a20f134c876f2c01ec0f0dd5b2e86e7168cefe0d81113c3807420ce13ad1357231a2252247d97a46a91\"));\n+    // ...and the output address of the 4th transaction\n+    filter.insert(ParseHex(\"b6efd80d99179f4f4ff6f4dd0a007d018c385d21\"));\n+\n+    CMerkleBlock merkleBlock(block, filter);\n+    BOOST_CHECK(merkleBlock.header.GetHash() == block.GetHash());\n+\n+    // We should match the generation outpoint\n+    BOOST_CHECK(filter.contains(COutPoint(uint256(\"0x147caa76786596590baa4e98f5d9f48b86c7765e489f7a6ff3360fe5c674360b\"), 0)));\n+    // ... but not the 4th transaction's output (its not pay-2-pubkey)\n+    BOOST_CHECK(!filter.contains(COutPoint(uint256(\"0x02981fa052f0481dbc5868f4fc2166035a10f27a03cfd2de67326471df5bc041\"), 0)));\n+}\n+\n+BOOST_AUTO_TEST_CASE(merkle_block_4_test_update_none)\n+{\n+    // Random real block (000000000000b731f2eef9e8c63173adfb07e41bd53eb0ef0a6b720d6cb6dea4)\n+    // With 7 txes\n+    CBlock block;\n+    CDataStream stream(ParseHex(\"0100000082bb869cf3a793432a66e826e05a6fc37469f8efb7421dc880670100000000007f16c5962e8bd963659c793ce370d95f093bc7e367117b3c30c1f8fdd0d9728776381b4d4c86041b554b85290701000000010000000000000000000000000000000000000000000000000000000000000000ffffffff07044c86041b0136ffffffff0100f2052a01000000434104eaafc2314def4ca98ac970241bcab022b9c1e1f4ea423a20f134c876f2c01ec0f0dd5b2e86e7168cefe0d81113c3807420ce13ad1357231a2252247d97a46a91ac000000000100000001bcad20a6a29827d1424f08989255120bf7f3e9e3cdaaa6bb31b0737fe048724300000000494830450220356e834b046cadc0f8ebb5a8a017b02de59c86305403dad52cd77b55af062ea10221009253cd6c119d4729b77c978e1e2aa19f5ea6e0e52b3f16e32fa608cd5bab753901ffffffff02008d380c010000001976a9142b4b8072ecbba129b6453c63e129e643207249ca88ac0065cd1d000000001976a9141b8dd13b994bcfc787b32aeadf58ccb3615cbd5488ac000000000100000003fdacf9b3eb077412e7a968d2e4f11b9a9dee312d666187ed77ee7d26af16cb0b000000008c493046022100ea1608e70911ca0de5af51ba57ad23b9a51db8d28f82c53563c56a05c20f5a87022100a8bdc8b4a8acc8634c6b420410150775eb7f2474f5615f7fccd65af30f310fbf01410465fdf49e29b06b9a1582287b6279014f834edc317695d125ef623c1cc3aaece245bd69fcad7508666e9c74a49dc9056d5fc14338ef38118dc4afae5fe2c585caffffffff309e1913634ecb50f3c4f83e96e70b2df071b497b8973a3e75429df397b5af83000000004948304502202bdb79c596a9ffc24e96f4386199aba386e9bc7b6071516e2b51dda942b3a1ed022100c53a857e76b724fc14d45311eac5019650d415c3abb5428f3aae16d8e69bec2301ffffffff2089e33491695080c9edc18a428f7d834db5b6d372df13ce2b1b0e0cbcb1e6c10000000049483045022100d4ce67c5896ee251c810ac1ff9ceccd328b497c8f553ab6e08431e7d40bad6b5022033119c0c2b7d792d31f1187779c7bd95aefd93d90a715586d73801d9b47471c601ffffffff0100714460030000001976a914c7b55141d097ea5df7a0ed330cf794376e53ec8d88ac0000000001000000045bf0e214aa4069a3e792ecee1e1bf0c1d397cde8dd08138f4b72a00681743447000000008b48304502200c45de8c4f3e2c1821f2fc878cba97b1e6f8807d94930713aa1c86a67b9bf1e40221008581abfef2e30f957815fc89978423746b2086375ca8ecf359c85c2a5b7c88ad01410462bb73f76ca0994fcb8b4271e6fb7561f5c0f9ca0cf6485261c4a0dc894f4ab844c6cdfb97cd0b60ffb5018ffd6238f4d87270efb1d3ae37079b794a92d7ec95ffffffffd669f7d7958d40fc59d2253d88e0f248e29b599c80bbcec344a83dda5f9aa72c000000008a473044022078124c8beeaa825f9e0b30bff96e564dd859432f2d0cb3b72d3d5d93d38d7e930220691d233b6c0f995be5acb03d70a7f7a65b6bc9bdd426260f38a1346669507a3601410462bb73f76ca0994fcb8b4271e6fb7561f5c0f9ca0cf6485261c4a0dc894f4ab844c6cdfb97cd0b60ffb5018ffd6238f4d87270efb1d3ae37079b794a92d7ec95fffffffff878af0d93f5229a68166cf051fd372bb7a537232946e0a46f53636b4dafdaa4000000008c493046022100c717d1714551663f69c3c5759bdbb3a0fcd3fab023abc0e522fe6440de35d8290221008d9cbe25bffc44af2b18e81c58eb37293fd7fe1c2e7b46fc37ee8c96c50ab1e201410462bb73f76ca0994fcb8b4271e6fb7561f5c0f9ca0cf6485261c4a0dc894f4ab844c6cdfb97cd0b60ffb5018ffd6238f4d87270efb1d3ae37079b794a92d7ec95ffffffff27f2b668859cd7f2f894aa0fd2d9e60963bcd07c88973f425f999b8cbfd7a1e2000000008c493046022100e00847147cbf517bcc2f502f3ddc6d284358d102ed20d47a8aa788a62f0db780022100d17b2d6fa84dcaf1c95d88d7e7c30385aecf415588d749afd3ec81f6022cecd701410462bb73f76ca0994fcb8b4271e6fb7561f5c0f9ca0cf6485261c4a0dc894f4ab844c6cdfb97cd0b60ffb5018ffd6238f4d87270efb1d3ae37079b794a92d7ec95ffffffff0100c817a8040000001976a914b6efd80d99179f4f4ff6f4dd0a007d018c385d2188ac000000000100000001834537b2f1ce8ef9373a258e10545ce5a50b758df616cd4356e0032554ebd3c4000000008b483045022100e68f422dd7c34fdce11eeb4509ddae38201773dd62f284e8aa9d96f85099d0b002202243bd399ff96b649a0fad05fa759d6a882f0af8c90cf7632c2840c29070aec20141045e58067e815c2f464c6a2a15f987758374203895710c2d452442e28496ff38ba8f5fd901dc20e29e88477167fe4fc299bf818fd0d9e1632d467b2a3d9503b1aaffffffff0280d7e636030000001976a914f34c3e10eb387efe872acb614c89e78bfca7815d88ac404b4c00000000001976a914a84e272933aaf87e1715d7786c51dfaeb5b65a6f88ac00000000010000000143ac81c8e6f6ef307dfe17f3d906d999e23e0189fda838c5510d850927e03ae7000000008c4930460221009c87c344760a64cb8ae6685a3eec2c1ac1bed5b88c87de51acd0e124f266c16602210082d07c037359c3a257b5c63ebd90f5a5edf97b2ac1c434b08ca998839f346dd40141040ba7e521fa7946d12edbb1d1e95a15c34bd4398195e86433c92b431cd315f455fe30032ede69cad9d1e1ed6c3c4ec0dbfced53438c625462afb792dcb098544bffffffff0240420f00000000001976a9144676d1b820d63ec272f1900d59d43bc6463d96f888ac40420f00000000001976a914648d04341d00d7968b3405c034adc38d4d8fb9bd88ac00000000010000000248cc917501ea5c55f4a8d2009c0567c40cfe037c2e71af017d0a452ff705e3f1000000008b483045022100bf5fdc86dc5f08a5d5c8e43a8c9d5b1ed8c65562e280007b52b133021acd9acc02205e325d613e555f772802bf413d36ba807892ed1a690a77811d3033b3de226e0a01410429fa713b124484cb2bd7b5557b2c0b9df7b2b1fee61825eadc5ae6c37a9920d38bfccdc7dc3cb0c47d7b173dbc9db8d37db0a33ae487982c59c6f8606e9d1791ffffffff41ed70551dd7e841883ab8f0b16bf04176b7d1480e4f0af9f3d4c3595768d068000000008b4830450221008513ad65187b903aed1102d1d0c47688127658c51106753fed0151ce9c16b80902201432b9ebcb87bd04ceb2de66035fbbaf4bf8b00d1cfe41f1a1f7338f9ad79d210141049d4cf80125bf50be1709f718c07ad15d0fc612b7da1f5570dddc35f2a352f0f27c978b06820edca9ef982c35fda2d255afba340068c5035552368bc7200c1488ffffffff0100093d00000000001976a9148edb68822f1ad580b043c7b3df2e400f8699eb4888ac00000000\"), SER_NETWORK, PROTOCOL_VERSION);\n+    stream >> block;\n+\n+    CBloomFilter filter(10, 0.000001, 0, BLOOM_UPDATE_NONE);\n+    // Match the generation pubkey\n+    filter.insert(ParseHex(\"04eaafc2314def4ca98ac970241bcab022b9c1e1f4ea423a20f134c876f2c01ec0f0dd5b2e86e7168cefe0d81113c3807420ce13ad1357231a2252247d97a46a91\"));\n+    // ...and the output address of the 4th transaction\n+    filter.insert(ParseHex(\"b6efd80d99179f4f4ff6f4dd0a007d018c385d21\"));\n+\n+    CMerkleBlock merkleBlock(block, filter);\n+    BOOST_CHECK(merkleBlock.header.GetHash() == block.GetHash());\n+\n+    // We shouldn't match any outpoints (UPDATE_NONE)\n+    BOOST_CHECK(!filter.contains(COutPoint(uint256(\"0x147caa76786596590baa4e98f5d9f48b86c7765e489f7a6ff3360fe5c674360b\"), 0)));\n+    BOOST_CHECK(!filter.contains(COutPoint(uint256(\"0x02981fa052f0481dbc5868f4fc2166035a10f27a03cfd2de67326471df5bc041\"), 0)));\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "c51694eb9b9db915beb1da8d76667d94f4f74c75",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNTE2OTRlYjliOWRiOTE1YmViMWRhOGQ3NjY2N2Q5NGY0Zjc0Yzc1",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2013-01-10T19:06:30Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2013-01-16T19:34:06Z"
      },
      "message": "Filter mempool command",
      "tree": {
        "sha": "161428fb5664923122a58824896592aac3d38685",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/161428fb5664923122a58824896592aac3d38685"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c51694eb9b9db915beb1da8d76667d94f4f74c75",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c51694eb9b9db915beb1da8d76667d94f4f74c75",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c51694eb9b9db915beb1da8d76667d94f4f74c75",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c51694eb9b9db915beb1da8d76667d94f4f74c75/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e1a4f3778cb90ba9f0d4e736752f78dad1703caa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e1a4f3778cb90ba9f0d4e736752f78dad1703caa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e1a4f3778cb90ba9f0d4e736752f78dad1703caa"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 8,
      "deletions": 5
    },
    "files": [
      {
        "sha": "1eb4124c16f81d045722d9dcf66cd89057bd73db",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 5,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c51694eb9b9db915beb1da8d76667d94f4f74c75/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c51694eb9b9db915beb1da8d76667d94f4f74c75/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=c51694eb9b9db915beb1da8d76667d94f4f74c75",
        "patch": "@@ -3446,13 +3446,16 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n     else if (strCommand == \"mempool\")\n     {\n         std::vector<uint256> vtxid;\n+        LOCK2(mempool.cs, pfrom->cs_filter);\n         mempool.queryHashes(vtxid);\n         vector<CInv> vInv;\n-        for (unsigned int i = 0; i < vtxid.size(); i++) {\n-            CInv inv(MSG_TX, vtxid[i]);\n-            vInv.push_back(inv);\n-            if (i == (MAX_INV_SZ - 1))\n-                    break;\n+        BOOST_FOREACH(uint256& hash, vtxid) {\n+            CInv inv(MSG_TX, hash);\n+            if ((pfrom->pfilter && pfrom->pfilter->IsRelevantAndUpdate(mempool.lookup(hash), hash)) ||\n+               (!pfrom->pfilter))\n+                vInv.push_back(inv);\n+            if (vInv.size() == MAX_INV_SZ)\n+                break;\n         }\n         if (vInv.size() > 0)\n             pfrom->PushMessage(\"inv\", vInv);"
      }
    ]
  }
]