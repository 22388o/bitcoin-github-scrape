[
  {
    "sha": "df117c82129f1a7ef0898d46794fc9d9bad64923",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZjExN2M4MjEyOWYxYTdlZjA4OThkNDY3OTRmYzlkOWJhZDY0OTIz",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2019-10-31T23:04:24Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2019-11-04T17:06:58Z"
      },
      "message": "Add test for syncing blocks generated after invalidateblock.\n\nSuhas wrote this test to demonstrate a bug in invalidateblock back\nin 2015, and at some point between then and now it started passing,\nso best to just merge it so we don't regress.\n\nCloses #5806 (the original issue in which this test was written)",
      "tree": {
        "sha": "57740f89b9fabedabc7a5b8a32be88efb5e863d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/57740f89b9fabedabc7a5b8a32be88efb5e863d1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/df117c82129f1a7ef0898d46794fc9d9bad64923",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df117c82129f1a7ef0898d46794fc9d9bad64923",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/df117c82129f1a7ef0898d46794fc9d9bad64923",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df117c82129f1a7ef0898d46794fc9d9bad64923/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "222b7d0ca795c7306cd2103473c1c54c60e701f9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/222b7d0ca795c7306cd2103473c1c54c60e701f9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/222b7d0ca795c7306cd2103473c1c54c60e701f9"
      }
    ],
    "stats": {
      "total": 49,
      "additions": 49,
      "deletions": 0
    },
    "files": [
      {
        "sha": "1a002e3d1776af93adc601a3698a0233def0e7ad",
        "filename": "test/functional/p2p_post_invalidate_sync.py",
        "status": "added",
        "additions": 48,
        "deletions": 0,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df117c82129f1a7ef0898d46794fc9d9bad64923/test/functional/p2p_post_invalidate_sync.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df117c82129f1a7ef0898d46794fc9d9bad64923/test/functional/p2p_post_invalidate_sync.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_post_invalidate_sync.py?ref=df117c82129f1a7ef0898d46794fc9d9bad64923",
        "patch": "@@ -0,0 +1,48 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2014 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#\n+# Test invalidateblock\n+#\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+class InvalidateBlockTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.setup_clean_chain = True\n+        self.extra_args = [[],[]]\n+\n+    def run_test(self):\n+        self.nodes[0].generate(1) # Leave IBD\n+        self.sync_all()\n+\n+        cnt = self.nodes[0].getblockcount()\n+\n+        node1blocks = self.nodes[1].generate(18)\n+\n+        self.sync_all()\n+        if (self.nodes[0].getblockcount() != cnt + 18):\n+            raise AssertionError(\"Failed to sync initial blocks\")\n+\n+        self.nodes[0].invalidateblock(node1blocks[0])\n+        self.nodes[1].invalidateblock(node1blocks[0])\n+\n+        if (self.nodes[0].getblockcount() != cnt):\n+            raise AssertionError(\"Failed to invalidate initial blocks\")\n+\n+        # The test framework uses a static per-node address which will generate\n+        # a deterministic block if we have no wallet.\n+        # Instead, mine on nodes[0], which will use a different hardcoded address\n+        # than the one we previously used, making this block unique.\n+        self.nodes[0].generate(17)\n+\n+        print(\"All blocks generated, trying to sync\")\n+        self.sync_all()\n+        if (self.nodes[0].getblockcount() != cnt + 17):\n+            raise AssertionError(\"Failed to sync shorter but valid chain\")\n+\n+if __name__ == '__main__':\n+    InvalidateBlockTest().main()"
      },
      {
        "sha": "3bd04db2bff0be3b3bcfadf7d402dc6b629e631e",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df117c82129f1a7ef0898d46794fc9d9bad64923/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df117c82129f1a7ef0898d46794fc9d9bad64923/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=df117c82129f1a7ef0898d46794fc9d9bad64923",
        "patch": "@@ -169,6 +169,7 @@\n     'rpc_preciousblock.py',\n     'wallet_importprunedfunds.py',\n     'p2p_leak_tx.py',\n+    'p2p_post_invalidate_sync.py',\n     'rpc_signmessage.py',\n     'wallet_balance.py',\n     'feature_nulldummy.py',"
      }
    ]
  }
]