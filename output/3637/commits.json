[
  {
    "sha": "6fd7ef2bbf1f941c8dee302ffdeb44e603148723",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZmQ3ZWYyYmJmMWY5NDFjOGRlZTMwMmZmZGViNDRlNjAzMTQ4NzIz",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-02-07T01:19:48Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "sipa@ulyssis.org",
        "date": "2014-03-10T19:38:32Z"
      },
      "message": "Also switch the (unused) verification code to low-s instead of even-s.\n\na81cd968 introduced a malleability breaker for signatures\n(using an even value for S). In e0e14e43 this was changed to\nthe lower of two potential values, rather than the even one.\nOnly the signing code was changed though, the (for now unused)\nverification code wasn't adapted.",
      "tree": {
        "sha": "76cebc090b484368a68781cb393b1e1be7ad1717",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/76cebc090b484368a68781cb393b1e1be7ad1717"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6fd7ef2bbf1f941c8dee302ffdeb44e603148723",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6fd7ef2bbf1f941c8dee302ffdeb44e603148723",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6fd7ef2bbf1f941c8dee302ffdeb44e603148723",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6fd7ef2bbf1f941c8dee302ffdeb44e603148723/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a63f8b7b36e39722024a0ba061ca214f00a8f1bd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a63f8b7b36e39722024a0ba061ca214f00a8f1bd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a63f8b7b36e39722024a0ba061ca214f00a8f1bd"
      }
    ],
    "stats": {
      "total": 103,
      "additions": 78,
      "deletions": 25
    },
    "files": [
      {
        "sha": "2199996cf3df83bfea2b50450f0b9925c1112448",
        "filename": "src/key.cpp",
        "status": "modified",
        "additions": 51,
        "deletions": 21,
        "changes": 72,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6fd7ef2bbf1f941c8dee302ffdeb44e603148723/src/key.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6fd7ef2bbf1f941c8dee302ffdeb44e603148723/src/key.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.cpp?ref=6fd7ef2bbf1f941c8dee302ffdeb44e603148723",
        "patch": "@@ -332,30 +332,60 @@ class CECKey {\n     }\n };\n \n+int CompareBigEndian(const unsigned char *c1, size_t c1len, const unsigned char *c2, size_t c2len) {\n+    while (c1len > c2len) {\n+        if (*c1)\n+            return 1;\n+        c1++;\n+        c1len--;\n+    }\n+    while (c2len > c1len) {\n+        if (*c2)\n+            return -1;\n+        c2++;\n+        c2len--;\n+    }\n+    while (c1len > 0) {\n+        if (*c1 > *c2)\n+            return 1;\n+        if (*c2 > *c1)\n+            return -1;\n+        c1++;\n+        c2++;\n+        c1len--;\n+    }\n+    return 0;\n+}\n+\n+// Order of secp256k1's generator minus 1.\n+const unsigned char vchMaxModOrder[32] = {\n+    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,\n+    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,\n+    0xBA,0xAE,0xDC,0xE6,0xAF,0x48,0xA0,0x3B,\n+    0xBF,0xD2,0x5E,0x8C,0xD0,0x36,0x41,0x40\n+};\n+\n+// Half of the order of secp256k1's generator minus 1.\n+const unsigned char vchMaxModHalfOrder[32] = {\n+    0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,\n+    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,\n+    0x5D,0x57,0x6E,0x73,0x57,0xA4,0x50,0x1D,\n+    0xDF,0xE9,0x2F,0x46,0x68,0x1B,0x20,0xA0\n+};\n+\n+const unsigned char vchZero[0] = {};\n+\n+\n }; // end of anonymous namespace\n \n bool CKey::Check(const unsigned char *vch) {\n-    // Do not convert to OpenSSL's data structures for range-checking keys,\n-    // it's easy enough to do directly.\n-    static const unsigned char vchMax[32] = {\n-        0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,\n-        0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,\n-        0xBA,0xAE,0xDC,0xE6,0xAF,0x48,0xA0,0x3B,\n-        0xBF,0xD2,0x5E,0x8C,0xD0,0x36,0x41,0x40\n-    };\n-    bool fIsZero = true;\n-    for (int i=0; i<32 && fIsZero; i++)\n-        if (vch[i] != 0)\n-            fIsZero = false;\n-    if (fIsZero)\n-        return false;\n-    for (int i=0; i<32; i++) {\n-        if (vch[i] < vchMax[i])\n-            return true;\n-        if (vch[i] > vchMax[i])\n-            return false;\n-    }\n-    return true;\n+    return CompareBigEndian(vch, 32, vchZero, 0) > 0 &&\n+           CompareBigEndian(vch, 32, vchMaxModOrder, 32) <= 0;\n+}\n+\n+bool CKey::CheckSignatureElement(const unsigned char *vch, int len, bool half) {\n+    return CompareBigEndian(vch, len, vchZero, 0) > 0 &&\n+           CompareBigEndian(vch, len, half ? vchMaxModHalfOrder : vchMaxModOrder, 32) <= 0;\n }\n \n void CKey::MakeNewKey(bool fCompressedIn) {"
      },
      {
        "sha": "37a06810b4e9c1973fd3c0f9d717f9f17f8657d9",
        "filename": "src/key.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6fd7ef2bbf1f941c8dee302ffdeb44e603148723/src/key.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6fd7ef2bbf1f941c8dee302ffdeb44e603148723/src/key.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.h?ref=6fd7ef2bbf1f941c8dee302ffdeb44e603148723",
        "patch": "@@ -269,6 +269,9 @@ class CKey {\n \n     // Load private key and check that public key matches.\n     bool Load(CPrivKey &privkey, CPubKey &vchPubKey, bool fSkipCheck);\n+\n+    // Check whether an element of a signature (r or s) is valid.\n+    static bool CheckSignatureElement(const unsigned char *vch, int len, bool half);\n };\n \n struct CExtPubKey {"
      },
      {
        "sha": "84a2a629e8866e2e292eb28d880b34d542556f60",
        "filename": "src/script.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6fd7ef2bbf1f941c8dee302ffdeb44e603148723/src/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6fd7ef2bbf1f941c8dee302ffdeb44e603148723/src/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script.cpp?ref=6fd7ef2bbf1f941c8dee302ffdeb44e603148723",
        "patch": "@@ -296,9 +296,12 @@ bool IsCanonicalSignature(const valtype &vchSig, unsigned int flags) {\n     if (nLenS > 1 && (S[0] == 0x00) && !(S[1] & 0x80))\n         return error(\"Non-canonical signature: S value excessively padded\");\n \n-    if (flags & SCRIPT_VERIFY_EVEN_S) {\n-        if (S[nLenS-1] & 1)\n-            return error(\"Non-canonical signature: S value odd\");\n+    if (flags & SCRIPT_VERIFY_LOW_S) {\n+        // If the S value is above the order of the curve divided by two, its\n+        // complement modulo the order could have been used instead, which is\n+        // one byte shorter when encoded correctly.\n+        if (!CKey::CheckSignatureElement(S, nLenS, true))\n+            return error(\"Non-canonical signature: S value is unnecessarily high\");\n     }\n \n     return true;"
      },
      {
        "sha": "b96bbc45c3c58094e88189187dc6f07651907a76",
        "filename": "src/script.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6fd7ef2bbf1f941c8dee302ffdeb44e603148723/src/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6fd7ef2bbf1f941c8dee302ffdeb44e603148723/src/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script.h?ref=6fd7ef2bbf1f941c8dee302ffdeb44e603148723",
        "patch": "@@ -40,7 +40,7 @@ enum\n     SCRIPT_VERIFY_NONE      = 0,\n     SCRIPT_VERIFY_P2SH      = (1U << 0), // evaluate P2SH (BIP16) subscripts\n     SCRIPT_VERIFY_STRICTENC = (1U << 1), // enforce strict conformance to DER and SEC2 for signatures and pubkeys\n-    SCRIPT_VERIFY_EVEN_S    = (1U << 2), // enforce even S values in signatures (depends on STRICTENC)\n+    SCRIPT_VERIFY_LOW_S     = (1U << 2), // enforce low S values (<n/2) in signatures (depends on STRICTENC)\n     SCRIPT_VERIFY_NOCACHE   = (1U << 3), // do not store results in signature cache (but do query it)\n };\n "
      },
      {
        "sha": "c38d9db57a865ee50391cc8c9bb8831bfd88474e",
        "filename": "src/test/canonical_tests.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6fd7ef2bbf1f941c8dee302ffdeb44e603148723/src/test/canonical_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6fd7ef2bbf1f941c8dee302ffdeb44e603148723/src/test/canonical_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/canonical_tests.cpp?ref=6fd7ef2bbf1f941c8dee302ffdeb44e603148723",
        "patch": "@@ -89,4 +89,21 @@ BOOST_AUTO_TEST_CASE(script_noncanon)\n     }\n }\n \n+BOOST_AUTO_TEST_CASE(script_signstrict)\n+{\n+    for (int i=0; i<100; i++) {\n+        CKey key;\n+        key.MakeNewKey(i & 1);\n+        std::vector<unsigned char> sig;\n+        uint256 hash = GetRandHash();\n+\n+        BOOST_CHECK(key.Sign(hash, sig)); // Generate a random signature.\n+        BOOST_CHECK(key.GetPubKey().Verify(hash, sig)); // Check it.\n+        sig.push_back(0x01); // Append a sighash type.\n+\n+        BOOST_CHECK(IsCanonicalSignature(sig, SCRIPT_VERIFY_STRICTENC | SCRIPT_VERIFY_LOW_S));\n+        BOOST_CHECK(IsCanonicalSignature_OpenSSL(sig));\n+    }\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  }
]