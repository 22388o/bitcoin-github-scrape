[
  {
    "sha": "4bd125fff080d1d1f20d0259836d55bb685be6d2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YmQxMjVmZmYwODBkMWQxZjIwZDAyNTk4MzZkNTViYjY4NWJlNmQy",
    "commit": {
      "author": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2018-10-30T13:06:44Z"
      },
      "committer": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2018-10-30T13:19:43Z"
      },
      "message": "tests: Print dots by default",
      "tree": {
        "sha": "094e9a84b15c105d135718f80bcecfa42f1a8a9d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/094e9a84b15c105d135718f80bcecfa42f1a8a9d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4bd125fff080d1d1f20d0259836d55bb685be6d2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4bd125fff080d1d1f20d0259836d55bb685be6d2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4bd125fff080d1d1f20d0259836d55bb685be6d2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4bd125fff080d1d1f20d0259836d55bb685be6d2/comments",
    "author": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "29f429dc7d4c7e6cd012e749cadf89e3138bcab3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29f429dc7d4c7e6cd012e749cadf89e3138bcab3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/29f429dc7d4c7e6cd012e749cadf89e3138bcab3"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 10,
      "deletions": 14
    },
    "files": [
      {
        "sha": "85a5de697616a520f02d18e7705b99eb90eb7b2b",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 10,
        "deletions": 14,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4bd125fff080d1d1f20d0259836d55bb685be6d2/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4bd125fff080d1d1f20d0259836d55bb685be6d2/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=4bd125fff080d1d1f20d0259836d55bb685be6d2",
        "patch": "@@ -222,7 +222,7 @@ def main():\n     parser.add_argument('--help', '-h', '-?', action='store_true', help='print help text and exit')\n     parser.add_argument('--jobs', '-j', type=int, default=4, help='how many test scripts to run in parallel. Default=4.')\n     parser.add_argument('--keepcache', '-k', action='store_true', help='the default behavior is to flush the cache directory on startup. --keepcache retains the cache from the previous testrun.')\n-    parser.add_argument('--quiet', '-q', action='store_true', help='only print results summary and failure logs')\n+    parser.add_argument('--quiet', '-q', action='store_true', help='only print dots, results summary and failure logs')\n     parser.add_argument('--tmpdirprefix', '-t', default=tempfile.gettempdir(), help=\"Root directory for datadirs\")\n     parser.add_argument('--failfast', action='store_true', help='stop execution after the first test failure')\n     args, unknown_args = parser.parse_known_args()\n@@ -321,11 +321,10 @@ def main():\n         enable_coverage=args.coverage,\n         args=passon_args,\n         combined_logs_len=args.combinedlogslen,\n-        failfast=args.failfast,\n-        level=logging_level\n+        failfast=args.failfast\n     )\n \n-def run_tests(test_list, src_dir, build_dir, tmpdir, jobs=1, enable_coverage=False, args=None, combined_logs_len=0, failfast=False, level=logging.DEBUG):\n+def run_tests(test_list, src_dir, build_dir, tmpdir, jobs=1, enable_coverage=False, args=None, combined_logs_len=0, failfast=False):\n     args = args or []\n \n     # Warn if bitcoind is already running (unix only)\n@@ -360,7 +359,7 @@ def run_tests(test_list, src_dir, build_dir, tmpdir, jobs=1, enable_coverage=Fal\n             raise\n \n     #Run Tests\n-    job_queue = TestHandler(jobs, tests_dir, tmpdir, test_list, flags, level)\n+    job_queue = TestHandler(jobs, tests_dir, tmpdir, test_list, flags)\n     start_time = time.time()\n     test_results = []\n \n@@ -441,14 +440,13 @@ class TestHandler:\n     Trigger the test scripts passed in via the list.\n     \"\"\"\n \n-    def __init__(self, num_tests_parallel, tests_dir, tmpdir, test_list=None, flags=None, logging_level=logging.DEBUG):\n+    def __init__(self, num_tests_parallel, tests_dir, tmpdir, test_list=None, flags=None):\n         assert(num_tests_parallel >= 1)\n         self.num_jobs = num_tests_parallel\n         self.tests_dir = tests_dir\n         self.tmpdir = tmpdir\n         self.test_list = test_list\n         self.flags = flags\n-        self.logging_level = logging_level\n         self.num_running = 0\n         self.jobs = []\n \n@@ -496,14 +494,12 @@ def get_next(self):\n                         status = \"Failed\"\n                     self.num_running -= 1\n                     self.jobs.remove(job)\n-                    if self.logging_level == logging.DEBUG:\n-                        clearline = '\\r' + (' ' * dot_count) + '\\r'\n-                        print(clearline, end='', flush=True)\n-                        dot_count = 0\n+                    clearline = '\\r' + (' ' * dot_count) + '\\r'\n+                    print(clearline, end='', flush=True)\n+                    dot_count = 0\n                     return TestResult(name, status, int(time.time() - start_time)), testdir, stdout, stderr\n-            if self.logging_level == logging.DEBUG:\n-                print('.', end='', flush=True)\n-                dot_count += 1\n+            print('.', end='', flush=True)\n+            dot_count += 1\n \n     def kill_and_join(self):\n         \"\"\"Send SIGKILL to all jobs and block until all have ended.\"\"\""
      }
    ]
  }
]