practicalswift,2020-03-06 16:22:50,"Concept ACK\n\nGood catch!\n\nFWIW I still think it would be a good idea to consider moving towards a ""initialize-to-zero-or-sane-value-by-default"" policy. Realistically and empirically it seems like that is the only way we'll permanently avoid the steady stream of uninitialised reads we're seeing in the project.\n\nFrom the [C++ Core Guidlines](https://isocpp.github.io/CppCoreGuidelines/Cpp",https://github.com/bitcoin/bitcoin/pull/18274#issuecomment-595845466,595845466,
sanjaykdragon,2020-03-06 16:55:30,"> FWIW I still think it would be a good idea to consider moving towards a ""initialize-to-zero-or-sane-value-by-default"" policy. Realistically and empirically it seems like that is the only way we'll permanently avoid the steady stream of uninitialized reads we're seeing in the project.\n\nI agree with this, would it be worth the time to start refactoring code to initialize to zero/sane?",https://github.com/bitcoin/bitcoin/pull/18274#issuecomment-595860558,595860558,
Sjors,2020-03-06 17:19:17,"Concept ACK. Don't forget to remove the original from line 2664. Can you also initialize `nFeeRequired` to `0`?\n\nMaybe instead of initializing inside `CreateTransaction()` you could assert that it's zero?\n\n> I agree with this, would it be worth the time to start refactoring code to initialize to zero/sane?\n\nPure refactor PRs usually don't work well. There is already a code guideline to",https://github.com/bitcoin/bitcoin/pull/18274#issuecomment-595871812,595871812,
practicalswift,2020-03-06 18:21:08,"> > I agree with this, would it be worth the time to start refactoring code to initialize to zero/sane?\n>\n> Pure refactor PRs usually don't work well.\n\nCan a type of change that [is known to have prevented literally countless security bugs in other projects](https://lists.llvm.org/pipermail/cfe-dev/2018-November/060177.html) (had the type of change been in place) really be called a ""pure r",https://github.com/bitcoin/bitcoin/pull/18274#issuecomment-595896409,595896409,
MarcoFalke,2020-03-06 18:45:23,"NACK. I have a hard time following the discussion here and why people seem to agree that this is a good change. My rationale for the NACK:\n\n* Reading a return value in the case of failure, where it was not properly written to, is always illegal. Setting it to `0` or any other value does not make it legal to read it. IIUC, In this case it will print `Error: This transaction requires a transacti",https://github.com/bitcoin/bitcoin/pull/18274#issuecomment-595906141,595906141,
MarcoFalke,2020-03-06 18:47:01,I am pretty sure we have had this exact discussion about uninitialized reads the 7th time. I wonder if it helps to write up a policy about that.,https://github.com/bitcoin/bitcoin/pull/18274#issuecomment-595906755,595906755,
MarcoFalke,2020-03-06 18:50:06,"> > FWIW I still think it would be a good idea to consider moving towards a ""initialize-to-zero-or-sane-value-by-default"" policy. Realistically and empirically it seems like that is the only way we'll permanently avoid the steady stream of uninitialized reads we're seeing in the project.\n> \n> I agree with this, would it be worth the time to start refactoring code to initialize to zero/sane?\n",https://github.com/bitcoin/bitcoin/pull/18274#issuecomment-595907938,595907938,
MarcoFalke,2020-03-06 18:57:10,"If we decide to do initialization everywhere, it should be done with the `ftrivial-auto-var-init` compiler flag (or similar), and not in the code.",https://github.com/bitcoin/bitcoin/pull/18274#issuecomment-595910813,595910813,
ryanofsky,2020-03-06 19:10:17,"Tend to agree with Marco and think that a policy of initializing variables to 0 or -1 in cases where these values would still be bugs could be counterproductive and reduce our ability to find these bugs with fuzzing and static analysis.\n\nA different rule to either declare every variable with a valid initial value or to declare it as `std::optional` could be preferable because it could remove n",https://github.com/bitcoin/bitcoin/pull/18274#issuecomment-595916364,595916364,
laanwj,2020-03-06 22:59:39,"ACK b585873f252577697dafd1a3f8cd7ef82869377f\nThis is clearly correct and fixes an actual (though minor) issue.\n",https://github.com/bitcoin/bitcoin/pull/18274#issuecomment-596000459,596000459,
kallewoof,2020-03-07 02:02:29,Pushed removal of duplicate `nFeeRet = 0;` statement. ,https://github.com/bitcoin/bitcoin/pull/18274#issuecomment-596032624,596032624,
kallewoof,2020-03-07 02:06:27,"@MarcoFalke I see what you're saying, but I'm not sure how trivial/hard it would be to actually track down the cases where the current ""error message override"" behavior is triggered. Also, I don't think \n\n> Reading a return value in the case of failure, where it was not properly written to, is always illegal. Setting it to 0 or any other value does not make it legal to read it. IIUC, In this c",https://github.com/bitcoin/bitcoin/pull/18274#issuecomment-596033151,596033151,
DrahtBot,2020-03-07 02:47:24,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18202 (refactor: consolidate sendmany and sendtoaddress code by Sjors)\n\nIf you consider this pull request important, pl",https://github.com/bitcoin/bitcoin/pull/18274#issuecomment-596037662,596037662,
practicalswift,2020-03-07 09:43:38,"@kallewoof \n\nAre you sure there is no reasonable way to fix this at the call site instead? I think that would be much preferred. I'm a bit hesitant to ACK the code as currently written.\n\nGenerally, given `bool f(T& o)` I really think we should avoid assuming that `f` has written to `o` in the case that `f(o)` has returned `false`.\n\n---\n\nContext for reviewers - this is the call site",https://github.com/bitcoin/bitcoin/pull/18274#issuecomment-596068058,596068058,
kallewoof,2020-03-07 10:38:56,"@practicalswift Yeah, either way works, to be honest, but since we are currently using the result in one place, there's no guarantee we won't use it in another in the future. That's my only reasoning, really.",https://github.com/bitcoin/bitcoin/pull/18274#issuecomment-596073537,596073537,
promag,2020-03-09 01:13:25,+1 on fixing at the call site. A refactor could come next IMO.,https://github.com/bitcoin/bitcoin/pull/18274#issuecomment-596278234,596278234,
kallewoof,2020-03-09 01:22:17,I have changed the code & description of the PR to fix in `rpcwallet.cpp` instead.,https://github.com/bitcoin/bitcoin/pull/18274#issuecomment-596279465,596279465,
practicalswift,2020-03-09 09:28:29,ACK a652ba6293ef8d144935dc882b5f0003c987fa22 -- patch looks correct,https://github.com/bitcoin/bitcoin/pull/18274#issuecomment-596420271,596420271,
Sjors,2020-03-09 10:35:18,"utACK a652ba6293ef8d144935dc882b5f0003c987fa22\n\n> Generally, given `bool f(T& o)` I really think we should avoid assuming that `f` has written to `o` in the case that `f(o)` has returned `false`.\n\nThat sounds reasonable, and this fix is in line with that.",https://github.com/bitcoin/bitcoin/pull/18274#issuecomment-596449994,596449994,
