[
  {
    "sha": "057c9b11de718346e5f126dcc26d9fed147ad473",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNTdjOWIxMWRlNzE4MzQ2ZTVmMTI2ZGNjMjZkOWZlZDE0N2FkNDcz",
    "commit": {
      "author": {
        "name": "yamato",
        "email": "yamato.sueoka@au.com",
        "date": "2019-10-15T09:50:28Z"
      },
      "committer": {
        "name": "yamato",
        "email": "yamato.sueoka@au.com",
        "date": "2019-10-15T09:50:28Z"
      },
      "message": "Added code description.",
      "tree": {
        "sha": "75d489470b174fac0eafd2fc88f0b4b2e9473701",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/75d489470b174fac0eafd2fc88f0b4b2e9473701"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/057c9b11de718346e5f126dcc26d9fed147ad473",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/057c9b11de718346e5f126dcc26d9fed147ad473",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/057c9b11de718346e5f126dcc26d9fed147ad473",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/057c9b11de718346e5f126dcc26d9fed147ad473/comments",
    "author": {
      "login": "YamaTomato",
      "id": 51814348,
      "node_id": "MDQ6VXNlcjUxODE0MzQ4",
      "avatar_url": "https://avatars.githubusercontent.com/u/51814348?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/YamaTomato",
      "html_url": "https://github.com/YamaTomato",
      "followers_url": "https://api.github.com/users/YamaTomato/followers",
      "following_url": "https://api.github.com/users/YamaTomato/following{/other_user}",
      "gists_url": "https://api.github.com/users/YamaTomato/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/YamaTomato/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/YamaTomato/subscriptions",
      "organizations_url": "https://api.github.com/users/YamaTomato/orgs",
      "repos_url": "https://api.github.com/users/YamaTomato/repos",
      "events_url": "https://api.github.com/users/YamaTomato/events{/privacy}",
      "received_events_url": "https://api.github.com/users/YamaTomato/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "YamaTomato",
      "id": 51814348,
      "node_id": "MDQ6VXNlcjUxODE0MzQ4",
      "avatar_url": "https://avatars.githubusercontent.com/u/51814348?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/YamaTomato",
      "html_url": "https://github.com/YamaTomato",
      "followers_url": "https://api.github.com/users/YamaTomato/followers",
      "following_url": "https://api.github.com/users/YamaTomato/following{/other_user}",
      "gists_url": "https://api.github.com/users/YamaTomato/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/YamaTomato/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/YamaTomato/subscriptions",
      "organizations_url": "https://api.github.com/users/YamaTomato/orgs",
      "repos_url": "https://api.github.com/users/YamaTomato/repos",
      "events_url": "https://api.github.com/users/YamaTomato/events{/privacy}",
      "received_events_url": "https://api.github.com/users/YamaTomato/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3ce829888861a6dc6a29da669584ada961d965fa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ce829888861a6dc6a29da669584ada961d965fa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3ce829888861a6dc6a29da669584ada961d965fa"
      }
    ],
    "stats": {
      "total": 246,
      "additions": 215,
      "deletions": 31
    },
    "files": [
      {
        "sha": "cf1fb2e2abaa10ea56c99d7e6a692f7f8b551971",
        "filename": "doc/developer-notes.md",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/057c9b11de718346e5f126dcc26d9fed147ad473/doc/developer-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/057c9b11de718346e5f126dcc26d9fed147ad473/doc/developer-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/developer-notes.md?ref=057c9b11de718346e5f126dcc26d9fed147ad473",
        "patch": "@@ -52,6 +52,10 @@ commits.\n Do not submit patches solely to modify the style of existing code.\n \n Coding Style (C++)\n+\n+//Various coding styles have been used during the history of the codebase, and the result is not very consistent.\n+(\u3053\u308c\u307e\u3067\u306e\u7d4c\u7def\u306e\u4e2d\u3067\u69d8\u3005\u306a\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u30b9\u30bf\u30a4\u30eb\u304c\u4f7f\u308f\u308c\u3066\u304d\u307e\u3057\u305f\u3002\u305d\u306e\u7d50\u679c\u3042\u307e\u308a\u4e00\u8cab\u6027\u304c\u3042\u308a\u307e\u305b\u3093\u3002)\n+\u30b5\u30c8\u30b7\u30ca\u30ab\u30e2\u30c8\u306e\u5b9f\u88c5\u3092\u5f15\u304d\u7d99\u3044\u3067\u30b3\u30df\u30e5\u30cb\u30c6\u30a3\u3067\u958b\u767a\u3057\u3066\u304d\u305f\u3068\u3044\u3046\u7d4c\u7def\u304c\u3042\u308a\u307e\u3059\u306e\u3067\u3001\u4ed5\u65b9\u306a\u3044\u3067\u3059\u306d\u3002\u3067\u3082\u3001C++\u306b\u6163\u308c\u3066\u3044\u306a\u3044\u4eba\u306b\u306f\u6271\u3044\u306b\u304f\u3044\u30b3\u30fc\u30c9\u30d9\u30fc\u30b9\u3067\u306f\u3042\u308a\u305d\u3046\u3067\u3059\u3002\n ------------------\n \n - **Indentation and whitespace rules** as specified in"
      },
      {
        "sha": "36c6fd4444b43ea5dbdd38f7f75b4528ec34acbd",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/057c9b11de718346e5f126dcc26d9fed147ad473/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/057c9b11de718346e5f126dcc26d9fed147ad473/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=057c9b11de718346e5f126dcc26d9fed147ad473",
        "patch": "@@ -2,6 +2,7 @@\n // Copyright (c) 2009-2019 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+//\u3053\u3053\u306bmain\u95a2\u6570\u304c\u3042\u308a\u307e\u3059\u3002AppInit\u30af\u30e9\u30b9\u304c\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u30d1\u30fc\u30b9\u3084\u521d\u671f\u5316\u3092\u3084\u3063\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\n \n #if defined(HAVE_CONFIG_H)\n #include <config/bitcoin-config.h>"
      },
      {
        "sha": "29dfa1ea4cdf87963c6cae6bb71429c8eee712cf",
        "filename": "src/chain.cpp",
        "status": "modified",
        "additions": 33,
        "deletions": 0,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/057c9b11de718346e5f126dcc26d9fed147ad473/src/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/057c9b11de718346e5f126dcc26d9fed147ad473/src/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.cpp?ref=057c9b11de718346e5f126dcc26d9fed147ad473",
        "patch": "@@ -127,13 +127,46 @@ arith_uint256 GetBlockProof(const CBlockIndex& block)\n     bnTarget.SetCompact(block.nBits, &fNegative, &fOverflow);\n     if (fNegative || fOverflow || bnTarget == 0)\n         return 0;\n+\n+        /*\n+\n+\u307e\u305a SetCompact() \u95a2\u6570\u3092\u4f7f\u3044\u3001nBits \u304b\u3089 bnTarget \u3092\u53d6\u5f97\u3057\u3066\u3044\u307e\u3059\n+        \u8a08\u7b97\u3057\u3066\u3044\u308b\u51e6\u7406\u3000(~bnTarget / (bnTarget + 1)) + 1;\n+\u4e0b\u306e\u30b3\u30e1\u30f3\u30c8\u306b\u3082\u3042\u308b\u3088\u3046\u306b\u3001 2**256 \u306f\u3068\u3066\u3082\u5de8\u5927\u306a\u5024\u3067\u3001\u305d\u306e\u307e\u307e\u3067\u306f\u6271\u3048\u306a\u3044\u305f\u3081\u3001`~bnTarget` \u306b\n+\u8fd1\u4f3c\u3057\u3066\u3044\u307e\u3059\u3002`~bnTarget` \u306f bnTarget \u306e\u30d3\u30c3\u30c8\u53cd\u8ee2\u3067\u3042\u308b\u305f\u3081\u3001\u4f8b\u3048\u3070 bnTarget \u304c\n+`0x00000000FFFF0000000000000000000000000000000000000000000000000000` \u306e\u3068\u304d\u3001\n+`0xFFFFFFFF0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF`\n+\u3068\u306a\u3063\u3066\u3001\u307b\u307c 2*256 \u3068\u540c\u3058\u5024\u3068\u3057\u3066\u4f7f\u3063\u3066\u3082\u5dee\u3057\u652f\u3048\u304c\u7121\u3044\u3068\u3044\u3046\u8a71\u306e\u3088\u3046\u3067\u3059\u3002\n+\n+\u3061\u306a\u307f\u306b\u3001`arith_uint256` \u3068\u3044\u3046\u578b\u306f Bitcoin Core \u306e\u4e2d\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b 256bit \u306e\u6574\u6570\u5024\u3092\u6271\u3046\u305f\u3081\u306e\u578b\u3067\u3001\u79d8\u5bc6\u9375\u3084\u30cf\u30c3\u30b7\u30e5\u5024\u306a\u3069 256bit \u306e\u30c7\u30fc\u30bf\u3092\u6271\u3046\u4e8b\u304c\u591a\u3044\u4e8b\u60c5\u304b\u3089\u3068\u3066\u3082\u591a\u304f\u306e\u51e6\u7406\u3067\u4f7f\u308f\u308c\u3066\u3044\u308b\u3082\u306e\u3067\u3059\u3002\n+\n+        */\n+\n     // We need to compute 2**256 / (bnTarget+1), but we can't represent 2**256\n     // as it's too large for an arith_uint256. However, as 2**256 is at least as large\n     // as bnTarget+1, it is equal to ((2**256 - bnTarget - 1) / (bnTarget+1)) + 1,\n     // or ~bnTarget / (bnTarget+1) + 1.\n+\n+    /*\n+\n+    BlockProof \u306f\u500b\u5225\u306e\u30d6\u30ed\u30c3\u30af\u306b\u5bfe\u3059\u308b\u30de\u30a4\u30cb\u30f3\u30b0\u8a08\u7b97\u306e\u5927\u5909\u3055\u3092\u8868\u3059\u5024\u3067\u3059\u3002\u3088\u304f\u4f7f\u308f\u308c\u308b\u30cf\u30c3\u30b7\u30e5\u30d1\u30ef\u30fc\u3068\u3044\u3046\u8a00\u8449\u3068\u4f3c\u305f\u6982\u5ff5\u3067\u3059\u304c\u3001\n+    \u30cf\u30c3\u30b7\u30e5\u30d1\u30ef\u30fc\u304c hash / sec \u306e\u5358\u4f4d\u3067\u8868\u3055\u308c\u308b\u306e\u306b\u5bfe\u3057\u3066\u3001BlockProof \u306f\u4ee5\u4e0b\u306e\u5f0f\u3067\u6c42\u3081\u3089\u308c\u307e\u3059\u3002\n+\n+    //BlockProof = 2**256 / (bnTarget+1)\n+\n+    bnTarget \u306f\u3053\u306e\u30d6\u30ed\u30c3\u30af\u306b\u304a\u3051\u308b\u30de\u30a4\u30cb\u30f3\u30b0\u306e\u76ee\u6307\u3059\u3079\u304d\u5024\u3067\u3059\u3002\u30de\u30a4\u30ca\u30fc\u306f\u30d6\u30ed\u30c3\u30af\u306e\u30cf\u30c3\u30b7\u30e5\u5024\u304c bnTarget\n+    \u3088\u308a\u5c0f\u3055\u3044\u5024\u306b\u306a\u308b\u3088\u3046\u306b nonce \u3092\u5909\u3048\u306a\u304c\u3089\u30cf\u30c3\u30b7\u30e5\u8a08\u7b97\u3092\u7e70\u308a\u8fd4\u3057\u307e\u3059\u3002\u3053\u306ebnTarget\u306f\u30d6\u30ed\u30c3\u30af\u306e\u4e2d\u306b\u306f\n+    nBits \u3068\u3044\u3046\u30d5\u30a3\u30fc\u30eb\u30c9\u306b\u30b3\u30f3\u30d1\u30af\u30c8\u306a\u5024\u306b\u5909\u63db\u3055\u308c\u3066\u683c\u7d0d\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n+\n+    \u3053\u306e\u5f0f\u304b\u3089\u308f\u304b\u308b\u306e\u306f BlockProof \u306f bnTarget\u306e\u5024\u306b\u53cd\u6bd4\u4f8b\u3057\u3066\u3044\u308b\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002\u3064\u307e\u308abnTarget\n+    \u304c\u5c0f\u3055\u304f\u306a\u308b\uff08\u96e3\u6613\u5ea6\u304c\u4e0a\u304c\u308b\uff09\u3054\u3068\u306b BlockProof\u306e\u5024\u306f\u5927\u304d\u304f\u306a\u308a\u307e\u3059\u3002\n+\n+    */\n     return (~bnTarget / (bnTarget + 1)) + 1;\n }\n \n+  /*\n+\n int64_t GetBlockProofEquivalentTime(const CBlockIndex& to, const CBlockIndex& from, const CBlockIndex& tip, const Consensus::Params& params)\n {\n     arith_uint256 r;"
      },
      {
        "sha": "ad28d9a98d04e6cea938edf875dc7d3b7f0405e1",
        "filename": "src/chain.h",
        "status": "modified",
        "additions": 32,
        "deletions": 5,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/057c9b11de718346e5f126dcc26d9fed147ad473/src/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/057c9b11de718346e5f126dcc26d9fed147ad473/src/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.h?ref=057c9b11de718346e5f126dcc26d9fed147ad473",
        "patch": "@@ -3,6 +3,8 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+//\u30c1\u30a7\u30fc\u30f3\u81ea\u4f53\u306e\u30c7\u30fc\u30bf\u69cb\u9020\u3068\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u306b\u95a2\u3059\u308b\u51e6\u7406\u304c\u8a18\u8ff0\u3055\u308c\u3066\u3044\u308b\u3002\n+\n #ifndef BITCOIN_CHAIN_H\n #define BITCOIN_CHAIN_H\n \n@@ -136,14 +138,19 @@ enum BlockStatus: uint32_t {\n  * candidates to be the next block. A blockindex may have multiple pprev pointing\n  * to it, but at most one of them can be part of the currently active branch.\n  */\n-class CBlockIndex\n+class CBlockIndex //\u30d6\u30ed\u30c3\u30af\u306e\u30c7\u30fc\u30bf\u3001\u30c1\u30a7\u30fc\u30f3\u5185\u3067\u6271\u3046\u305f\u3081\u306e\u4fbf\u5229\u306a\u30e1\u30bf\u60c5\u5831\u3092\u6301\u3063\u305f\u30d6\u30ed\u30c3\u30af\u30af\u30e9\u30b9\n {\n+\n+  //CBlockIndex=\u30d6\u30ed\u30c3\u30af\u306e\u5b9f\u30c7\u30fc\u30bf\u3001CBlock\u3060\u3051\u3060\u3068\u4e00\u500b\u524d\u306e\u30d6\u30ed\u30c3\u30af\u3092\u53c2\u7167\u3057\u3088\u3046\u3068\u3057\u3066\u3082\u6301\u3063\u3066\u3044\u308b\u306e\u306f\u30d6\u30ed\u30c3\u30af\u30cf\u30c3\u30b7\u30e5\u3060\u3051\u3067\u3001\n+  //\u305d\u306e\u30cf\u30c3\u30b7\u30e5\u5024\u304b\u3089\u30d6\u30ed\u30c3\u30af\u306e\u5b9f\u614b\u3092\u63a2\u3055\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u304f\u53d6\u308a\u56de\u3057\u304c\u60aa\u3044\u306e\u3067\u3059\u304c\u3001CBlockIndex\u306f\u524d\u306e\u30d6\u30ed\u30c3\u30af\u3078\u306e\u53c2\u7167\u3092\u6301\u3063\u3066\u3044\u308b\u306e\u3067\u9806\u756a\u306b\u30d7\u30ec\u30d3\u30e5\u30fc\u306b\u8fbf\u308b\u3053\u3068\u3067\n+  //\u30c1\u30a7\u30fc\u30f3\u3092\u9061\u308b\u306a\u3069\u306e\u64cd\u4f5c\u304c\u3084\u308a\u3084\u3059\u304f\u306a\u308b\n+\n public:\n     //! pointer to the hash of the block, if any. Memory is owned by this CBlockIndex\n     const uint256* phashBlock;\n \n     //! pointer to the index of the predecessor of this block\n-    CBlockIndex* pprev;\n+    CBlockIndex* pprev;  //pprev(\u982d\u306ep\u306f\u30dd\u30a4\u30f3\u30bf\u306ep)\u3001\u3053\u308c\u304c\u60c5\u5831\u3092\u8272\u3005\u6301\u3063\u3066\u3044\u308b\n \n     //! pointer to the index of some further predecessor of this block\n     CBlockIndex* pskip;\n@@ -161,7 +168,16 @@ class CBlockIndex\n     unsigned int nUndoPos;\n \n     //! (memory only) Total amount of work (expected number of hashes) in the chain up to and including this block\n-    arith_uint256 nChainWork;\n+    arith_uint256 nChainWork;\u3000\n+\n+    /*nChainWork\u306f\u30c1\u30a7\u30fc\u30f3\u306b\u639b\u3051\u3089\u308c\u305f\u30cf\u30c3\u30b7\u30e5\u30d1\u30ef\u30fc\u306e\u5408\u8a08\u5024\u3067\u30c1\u30a7\u30fc\u30f3\u304c\u5206\u5c90\u3057\u305f\u6642\u306b\u3069\u3063\u3061\u306e\u30c1\u30a7\u30fc\u30f3\u304c\u5f37\u3044\u304b\u6bd4\u8f03\u3059\u308b\u6642\u306b\u4f7f\u308f\u308c\u308b\n+    \u30d6\u30ed\u30c3\u30af\u305d\u306e\u3082\u306e\u3067\u306f\u306a\u304fGenesisBlock\u304b\u3089\u306e\u30de\u30a4\u30cb\u30f3\u30b0\u306e\u7a4d\u307f\u4e0a\u3052\u306a\u306e\u3067\u5c11\u3057\u30e1\u30bf\u60c5\u5831\u6575\u306b\u306a\u308b\u306e\u3067\u305d\u3046\u3044\u3063\u305f\u3082\u306e\u306f\n+    CBlock\u3067\u306f\u6301\u3061\u306b\u304f\u3044\u306e\u3067BlockIndex\u306b\u6301\u305f\u305b\u3066\u3044\u308b\u3002*/\n+\n+   /*nChainWork\u306fCBlockIndex\u30af\u30e9\u30b9\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u3067\u3001\u3042\u308b\u30d6\u30ed\u30c3\u30af\u304c\u3064\u306a\u304c\u3063\u3066\u3044\u308b\u30c1\u30a7\u30fc\u30f3\u306b\u304a\u3044\u3066\u3001\n+   \u305d\u306e\u30d6\u30ed\u30c3\u30af\u306e\u63a1\u6398\u307e\u3067\u306b\u304b\u3051\u3089\u308c\u305f\u5168\u3066\u306e\u30de\u30a4\u30cb\u30f3\u30b0\u306e\u624b\u9593\u306e\u5408\u8a08\u3092\u793a\u3059\u5024\u3067\u3059\u3002\n+   validation.cpp\u306b\u8a08\u7b97\u30b3\u30fc\u30c9\u3042\u308a\n+*/\n \n     //! Number of transactions in this block.\n     //! Note: in a potential headers-first mode, this number cannot be relied upon\n@@ -175,13 +191,15 @@ class CBlockIndex\n     //! Verification status of this block. See enum BlockStatus\n     uint32_t nStatus;\n \n-    //! block header\n+    //! block header\u3000\n     int32_t nVersion;\n     uint256 hashMerkleRoot;\n     uint32_t nTime;\n     uint32_t nBits;\n     uint32_t nNonce;\n \n+    //block header\u306e\u60c5\u5831\u304c\u307b\u307c\u305d\u306e\u307e\u307e\u5165\u3063\u3066\u3044\u308b(\u524d\u306e\u30d6\u30ed\u30c3\u30af\u306e\u30cf\u30c3\u30b7\u30e5\u5024\u306f\u306a\u3044)\n+\n     //! (memory only) Sequential id assigned to distinguish order in which blocks are received.\n     int32_t nSequenceId;\n \n@@ -258,6 +276,8 @@ class CBlockIndex\n         return block;\n     }\n \n+//\u524d\u306e\u30d6\u30ed\u30c3\u30af\u306e\u30cf\u30c3\u30b7\u30e5\u5024\u306f\u3053\u306e\u3088\u3046\u306b\u30d7\u30ec\u30d3\u30e5\u3092\u8fbf\u3063\u3066\u53d6\u5f97\u3057\u3066\u3044\u308b\n+\n     uint256 GetBlockHash() const\n     {\n         return *phashBlock;\n@@ -409,29 +429,36 @@ class CDiskBlockIndex : public CBlockIndex\n     }\n };\n \n+\n /** An in-memory indexed chain of blocks. */\n class CChain {\n private:\n-    std::vector<CBlockIndex*> vChain;\n+    std::vector<CBlockIndex*> vChain; //CBlockindex\u306e\u30d9\u30af\u30bf\u30fc\u3068\u306a\u3063\u3066\u3044\u308b\u3002\n \n public:\n     /** Returns the index entry for the genesis block of this chain, or nullptr if none. */\n     CBlockIndex *Genesis() const {\n         return vChain.size() > 0 ? vChain[0] : nullptr;\n     }\n \n+    //Genesis Block\u3092\u8fd4\u3059\u5b9f\u88c5\n+\n     /** Returns the index entry for the tip of this chain, or nullptr if none. */\n     CBlockIndex *Tip() const {\n         return vChain.size() > 0 ? vChain[vChain.size() - 1] : nullptr;\n     }\n \n+    //\u6700\u65b0\u306e\u30d6\u30ed\u30c3\u30af\u3092\u8fd4\u3059\u5b9f\u88c5\u3001Tip=\u6700\u65b0\u306e\u30d6\u30ed\u30c3\u30af\n+\n     /** Returns the index entry at a particular height in this chain, or nullptr if no such height exists. */\n     CBlockIndex *operator[](int nHeight) const {\n         if (nHeight < 0 || nHeight >= (int)vChain.size())\n             return nullptr;\n         return vChain[nHeight];\n     }\n \n+  //Block Hight\u3092\u53d6\u5f97\u3067\u304d\u308b\u3001GenesisBlock\u306f\u30bc\u30ed\u306a\u306e\u3067\u305d\u306e\u307e\u307e\u6dfb\u5b57\u3092\u5165\u308c\u308c\u3070\u53d6\u5f97\u53ef\u80fd[nHeight]\n+\n     /** Compare two chains efficiently. */\n     friend bool operator==(const CChain &a, const CChain &b) {\n         return a.vChain.size() == b.vChain.size() &&"
      },
      {
        "sha": "9ff31e6a7969398b3ce54314c8b1fbad4130d402",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 2,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/057c9b11de718346e5f126dcc26d9fed147ad473/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/057c9b11de718346e5f126dcc26d9fed147ad473/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=057c9b11de718346e5f126dcc26d9fed147ad473",
        "patch": "@@ -2,6 +2,12 @@\n // Copyright (c) 2009-2018 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+//mainnet, testnet, regtest \u7b49\u306e\u30c1\u30a7\u30fc\u30f3\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u30cf\u30fc\u30c9\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3055\u308c\u3066\u308bNS Seed\u3082\u3053\u3053\u306b\u66f8\u3044\u3066\u3042\u308a\u307e\u3059\u3002\n+\n+/*Genesis Block\u3082\u4ed6\u306e\u30d6\u30ed\u30c3\u30af\u3068\u540c\u3058\u69d8\u306bP2P\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3067\u4f1d\u64ad\u3055\u308c\u53d7\u3051\u53d6\u308b\u306e\u304b\u306a\u3068\u601d\u3063\u3066\u3044\u305f\u306e\u3067\u3001\u30cf\u30fc\u30c9\u30b3\u30fc\u30c9\u306f\u610f\u5916\u3067\u3057\u305f\u3002\n+\u3067\u3082\u3001GenesisBlock\u306e\u5185\u5bb9\u304c\u4ee3\u308f\u308b\u3068\u3001\u3082\u306f\u3084\u305d\u308c\u306f\u5225\u306e\u30c1\u30a7\u30fc\u30f3\u3068\u306a\u308b\u3068\u3044\u3046\u3053\u3068\u3092\u8003\u3048\u308b\u3068\u3001GenesisBlock\u307e\u3067\u542b\u3081\u3066\n+\u30c1\u30a7\u30fc\u30f3\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u6349\u3048\u308b\u8003\u3048\u65b9\u306f\u7d0d\u5f97\u611f\u304c\u3042\u308a\u307e\u3059\u306d\u3002\u305d\u3046\u3044\u3046\u7406\u7531\u3067 `src/chainparams.cpp` \u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3093\u3060\u3068\u601d\u3044\u307e\u3059\u3002*/\n+\n \n #include <chainparams.h>\n \n@@ -19,6 +25,7 @@\n \n static CBlock CreateGenesisBlock(const char* pszTimestamp, const CScript& genesisOutputScript, uint32_t nTime, uint32_t nNonce, uint32_t nBits, int32_t nVersion, const CAmount& genesisReward)\n {\n+  //genesisReward=GenesisBlock\u306e\u30de\u30a4\u30cb\u30f3\u30b0\u5831\u916c\u306e\u91cf\n     CMutableTransaction txNew;\n     txNew.nVersion = 1;\n     txNew.vin.resize(1);\n@@ -38,6 +45,8 @@ static CBlock CreateGenesisBlock(const char* pszTimestamp, const CScript& genesi\n     return genesis;\n }\n \n+//Genesis Block \u306a\u306e\u3067\u3001\u524d\u306e\u30d6\u30ed\u30c3\u30af\u306e\u30cf\u30c3\u30b7\u30e5\u5024\u3092\u8a18\u9332\u3059\u308b\u9818\u57df `hashPrevBlock` \u306f Null \u306b\u8a2d\u5b9a\u3055\u3066\u3044\u307e\u3059\u3002\n+\n /**\n  * Build the genesis block. Note that the output of its generation\n  * transaction cannot be spent since it did not originally exist in the\n@@ -51,7 +60,7 @@ static CBlock CreateGenesisBlock(const char* pszTimestamp, const CScript& genesi\n  */\n static CBlock CreateGenesisBlock(uint32_t nTime, uint32_t nNonce, uint32_t nBits, int32_t nVersion, const CAmount& genesisReward)\n {\n-    const char* pszTimestamp = \"The Times 03/Jan/2009 Chancellor on brink of second bailout for banks\";\n+    const char* pszTimestamp = \"The Times 03/Jan/2009 Chancellor on brink of second bailout for banks\";//\u6709\u540d\u306a\u6587\u9762\u3082\u30cf\u30fc\u30c9\u30b3\u30fc\u30c6\u30a3\u30f3\u30b0\u3055\u308c\u3066\u3044\u308b\n     const CScript genesisOutputScript = CScript() << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\") << OP_CHECKSIG;\n     return CreateGenesisBlock(pszTimestamp, genesisOutputScript, nTime, nNonce, nBits, nVersion, genesisReward);\n }\n@@ -85,6 +94,9 @@ class CMainParams : public CChainParams {\n         // The best chain should have at least this much work.\n         consensus.nMinimumChainWork = uint256S(\"0x0000000000000000000000000000000000000000051dc8b82f450202ecb3d471\");\n \n+        /*nMinimumChainWork\u3068\u3044\u3046\u5024\u306f\u3001\u3053\u308c\u3088\u308a\u5c0f\u3055\u3044 nChainWork \u306e\u30d6\u30ed\u30c3\u30af\u3057\u304b\u6301\u3063\u3066\u3044\u306a\u3044\u30ce\u30fc\u30c9\u306f\u7aef\u304b\u3089\u76f8\u624b\u306b\u305b\u305a\u306b\u63a5\u7d9a\u3092\u5207\u3089\u308c\u308b\n+        \u3064\u307e\u308a\u660e\u3089\u304b\u306b\u304a\u304b\u3057\u306a\u30ce\u30fc\u30c9\u3092\u5224\u5225\u3059\u308b\u305f\u3081\u306e\u5024\u3068\u3057\u3066\u3082\u4f7f\u308f\u308c\u3066\u3044\u307e\u3059\u3002*/\n+\n         // By default assume that the signatures in ancestors of this block are valid.\n         consensus.defaultAssumeValid = uint256S(\"0x0000000000000000000f1c54590ee18d15ec70e68c8cd4cfbadb1b4f11697eee\"); //563378\n \n@@ -102,7 +114,13 @@ class CMainParams : public CChainParams {\n         m_assumed_blockchain_size = 240;\n         m_assumed_chain_state_size = 3;\n \n-        genesis = CreateGenesisBlock(1231006505, 2083236893, 0x1d00ffff, 1, 50 * COIN);\n+        genesis = CreateGenesisBlock(1231006505, 2083236893, 0x1d00ffff, 1, 50 * COIN);//\u4e0a\u306eGenesis\u306e\u30e1\u30bd\u30c3\u30c9\u306f\u4ee5\u4e0b\u304b\u3089\u547c\u3070\u308c\u308b\n+    \u3000\u3000/*\n+\n+        \u30d6\u30ed\u30c3\u30af\u306e\u751f\u6210\u6642\u9593\u3084\u30ca\u30f3\u30b9\u306a\u3069\u304c\u30cf\u30fc\u30c9\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3055\u308c\u3066\u3044\u308b\u3002\u30bf\u30a4\u30e0\u30b9\u30bf\u30f3\u30d7\u3092Humanize\u3059\u308b\u30682009-01-03T18:15:05+00:00\u3068\u306a\u308a\u3001\n+        \u30a8\u30af\u30b9\u30d7\u30ed\u30fc\u30e9\u30fc\u3067\u78ba\u8a8d\u3067\u304d\u308b Genesis Block \u306e[\u751f\u6210\u6642\u9593 https://www.blockchain.com/ja/btc/block-height/0] \u3068\u4e00\u81f4\u3059\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n+\n+      */\n         consensus.hashGenesisBlock = genesis.GetHash();\n         assert(consensus.hashGenesisBlock == uint256S(\"0x000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f\"));\n         assert(genesis.hashMerkleRoot == uint256S(\"0x4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b\"));"
      },
      {
        "sha": "aa4618a7b9ef61d4dbf91654afa23ed351c95e1d",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/057c9b11de718346e5f126dcc26d9fed147ad473/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/057c9b11de718346e5f126dcc26d9fed147ad473/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=057c9b11de718346e5f126dcc26d9fed147ad473",
        "patch": "@@ -3,6 +3,12 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+/**chainparams\u306f\n+Bitcoin\u306e\u30c1\u30a7\u30fc\u30f3\u306f\u30e1\u30a4\u30f3\u30cd\u30c3\u30c8\u3001\u30c6\u30b9\u30c8\u30cd\u30c3\u30c8\u3001\u958b\u767a\u7528\u306b\u30ec\u30b0\u30c6\u30b9\u30c8\u3068\u3042\u3063\u3066\u305d\u308c\u305e\u308c\u30c1\u30a7\u30fc\u30f3\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u7570\u306a\u3063\u3066\u304a\u308a\n+(\u96e3\u6613\u5ea6\u306e\u8a2d\u5b9a\u3084GenesisBlock\u306e\u8a2d\u5b9a\u306a\u3069\u30c1\u30a7\u30fc\u30f3\u3092\u7279\u5fb4\u4ed8\u3051\u308b\u69d8\u3005\u306a\u3082\u306e)\u305d\u3046\u3044\u3063\u305f\u3082\u306e\u3092\u7ba1\u7406\u3057\u3066\u3044\u308b\u30af\u30e9\u30b9\n+GenesisBlock\u306f\u3053\u306echainparams\u81ea\u4f53\u306b\u30cf\u30fc\u30c9\u30b3\u30fc\u30c6\u30a3\u30f3\u30b0\u3055\u308c\u3066\u3044\u308b\u3001\u30c1\u30a7\u30fc\u30f3\u3092\u30b3\u30fc\u30c6\u30a3\u30f3\u30b0\u3059\u308b\u6642\u306f\n+GenesisBlock\u306e\u4e0a\u306b\u3069\u3093\u3069\u3093\u7a4d\u307f\u4e0a\u3052\u3066\u3044\u304b\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u306e\u3067\u3053\u306e\u30af\u30e9\u30b9\u3082\u91cd\u8981\u3001chainparams\u3082\u3088\u304f\u53c2\u7167\u3055\u308c\u3066\u3044\u308b */\n+\n #ifndef BITCOIN_CHAINPARAMS_H\n #define BITCOIN_CHAINPARAMS_H\n \n@@ -61,7 +67,7 @@ class CChainParams\n     const CMessageHeader::MessageStartChars& MessageStart() const { return pchMessageStart; }\n     int GetDefaultPort() const { return nDefaultPort; }\n \n-    const CBlock& GenesisBlock() const { return genesis; }\n+    const CBlock& GenesisBlock() const { return genesis; } //\u4e00\u756a\u521d\u3081\u306e\u30d6\u30ed\u30c3\u30af\n     /** Default value for -checkmempool and -checkblockindex argument */\n     bool DefaultConsistencyChecks() const { return fDefaultConsistencyChecks; }\n     /** Policy: Filter transactions that do not match well-defined patterns */"
      },
      {
        "sha": "0ec87d8240c35af04d68eab68682b62fb6e90018",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/057c9b11de718346e5f126dcc26d9fed147ad473/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/057c9b11de718346e5f126dcc26d9fed147ad473/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=057c9b11de718346e5f126dcc26d9fed147ad473",
        "patch": "@@ -2,6 +2,7 @@\n // Copyright (c) 2009-2018 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+//\u5177\u4f53\u7684\u306a\u521d\u671f\u5316\u51e6\u7406\u306f\u3053\u3061\u3089\u306b\u66f8\u3044\u3066\u3042\u308b\n \n #if defined(HAVE_CONFIG_H)\n #include <config/bitcoin-config.h>"
      },
      {
        "sha": "59aff583b5e710fc3a78c75b984f9cc1a692d227",
        "filename": "src/key.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/057c9b11de718346e5f126dcc26d9fed147ad473/src/key.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/057c9b11de718346e5f126dcc26d9fed147ad473/src/key.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.cpp?ref=057c9b11de718346e5f126dcc26d9fed147ad473",
        "patch": "@@ -71,7 +71,7 @@ static int ec_privkey_import_der(const secp256k1_context* ctx, unsigned char *ou\n         return 0;\n     }\n     memcpy(out32 + (32 - oslen), privkey, oslen);\n-    if (!secp256k1_ec_seckey_verify(ctx, out32)) {\n+    if (!secp256k1_ec_se_verify(ctx, out32)) {\n         memset(out32, 0, 32);\n         return 0;\n     }\n@@ -150,7 +150,7 @@ static int ec_privkey_export_der(const secp256k1_context *ctx, unsigned char *pr\n     return 1;\n }\n \n-bool CKey::Check(const unsigned char *vch) {\n+bool CKey::Check(const unsigned char *vch) {//\u30e9\u30f3\u30c0\u30e0\u306a\u9375\u306e\u751f\u6210\n     return secp256k1_ec_seckey_verify(secp256k1_context_sign, vch);\n }\n \n@@ -343,7 +343,7 @@ bool ECC_InitSanityCheck() {\n     key.MakeNewKey(true);\n     CPubKey pubkey = key.GetPubKey();\n     return key.VerifyPubKey(pubkey);\n-}\n+}//\u79d8\u5bc6\u9375\u3092\u751f\u6210\n \n void ECC_Start() {\n     assert(secp256k1_context_sign == nullptr);"
      },
      {
        "sha": "363260e0b92beb83952e3e1d0eab3e6350210e76",
        "filename": "src/key.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/057c9b11de718346e5f126dcc26d9fed147ad473/src/key.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/057c9b11de718346e5f126dcc26d9fed147ad473/src/key.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.h?ref=057c9b11de718346e5f126dcc26d9fed147ad473",
        "patch": "@@ -24,7 +24,7 @@\n typedef std::vector<unsigned char, secure_allocator<unsigned char> > CPrivKey;\n \n /** An encapsulated private key. */\n-class CKey\n+class CKey//\u79d8\u5bc6\u9375\u3092\u30ab\u30d7\u30bb\u30eb\u5316\u3057\u305f\u30af\u30e9\u30b9\u3002Bitcoin\u3067\u4f7f\u308f\u308c\u3066\u3044\u308bsecp256k1\u306b\u305d\u3063\u305f\u4ed5\u69d8\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n {\n public:\n     /**"
      },
      {
        "sha": "c712442ece9062e6b3ca56c4da196f9b3b023472",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 34,
        "deletions": 0,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/057c9b11de718346e5f126dcc26d9fed147ad473/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/057c9b11de718346e5f126dcc26d9fed147ad473/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=057c9b11de718346e5f126dcc26d9fed147ad473",
        "patch": "@@ -3,20 +3,34 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+//2016\u30d6\u30ed\u30c3\u30af\u3054\u3068\u306b\u30bf\u30fc\u30b2\u30c3\u30c8\u3092\u8abf\u6574\u3059\u308b\u30b3\u30fc\u30c9\u3067\u3059\u3002\n+\n #include <pow.h>\n \n #include <arith_uint256.h>\n #include <chain.h>\n #include <primitives/block.h>\n #include <uint256.h>\n \n+/*[\u6982\u8981]\n+\u3053\u306e\u95a2\u6570\u306f\u6b21\u306e\u30d6\u30ed\u30c3\u30af\u306e\u30c7\u30a3\u30d5\u30a3\u30ab\u30eb\u30c6\u30a3\u3092\u8fd4\u3059\u3088\u3046\u3067\u3059\u3002\u30d6\u30ed\u30c3\u30af\u30d8\u30c3\u30c0\u306enBit\u306b\u8a2d\u5b9a\u3055\u308c\u308b\u5024\u3067\u3059\u3002\n+[\u5f15\u6570]\n+`const CBlockIndex* pindexLast` \u4e00\u3064\u524d\u306e\u30d6\u30ed\u30c3\u30af\u3078\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\n+`const CBlockHeader *pblock` \u30d6\u30ed\u30c3\u30af\u30d8\u30c3\u30c0\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u3002PoW\u3067\u6b63\u89e3\u306e\u30cf\u30c3\u30b7\u30e5\u5024\u3092\u898b\u3064\u3051\u305f\u3044\u30d6\u30ed\u30c3\u30af\u3092\u6307\u3057\u307e\u3059\u3002\n+`const Consensus::Params& params` PoW \u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u3059\u3002\u3053\u3053\u3067\u53c2\u7167\u3057\u3066\u3044\u308bparams.powLimit \u306f\u30e1\u30a4\u30f3\u30cd\u30c3\u30c8\u3067\u306f\u6b21\u306e\u5024\u304c\u30bb\u30c3\u30c8\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n+`00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff`*/\n unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHeader *pblock, const Consensus::Params& params)\n {\n     assert(pindexLast != nullptr);\n     unsigned int nProofOfWorkLimit = UintToArith256(params.powLimit).GetCompact();\n \n     // Only change once per difficulty adjustment interval\n     if ((pindexLast->nHeight+1) % params.DifficultyAdjustmentInterval() != 0)\n+    /*`DifficultyAdjustmentInterval()` \u306fPoW\u306e\u96e3\u6613\u5ea6\u8abf\u6574\u3092\u5b9f\u65bd\u3059\u308b\u30d6\u30ed\u30c3\u30af\u9ad8\u306e\u9593\u9694\u3067\u3042\u308a\u3001 `2\u9031\u9593 / 10\u5206`\u3092\u8a08\u7b97\n+    \u3057\u305f\u7d50\u679c\u3067\u3042\u308b 2016 \u3092\u8fd4\u3057\u307e\u3059\u3002`pindexLast->nHeight+1` \u3064\u307e\u308a\u6b21\u306b\u8ffd\u52a0\u3059\u308b\u30d6\u30ed\u30c3\u30af\u306e\u30d6\u30ed\u30c3\u30af\u9ad8\u304c\u96e3\u6613\u5ea6\u8abf\u6574\u306e\n+    \u30bf\u30a4\u30df\u30f3\u30b0\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\u96e3\u6613\u5ea6\u8abf\u6574\u304c\u5fc5\u8981\u306a\u3044\u5834\u5408\u306bif\u6587\u306e\u30d6\u30ed\u30c3\u30af\u304c\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002fPowAllowMinDifficultyBlock\n+    \u306f\u30c6\u30b9\u30c8\u30cd\u30c3\u30c8\u306e\u305f\u3081\u306e\u30e2\u30fc\u30c9\u3067\u3059\u3002\u30c6\u30b9\u30c8\u30cd\u30c3\u30c8\u3068 regtest\u3068\u3057\u3066\u30ce\u30fc\u30c9\u3092\u8d77\u52d5\u3057\u305f\u3068\u304d\u306b true \u304c\u30bb\u30c3\u30c8\u3055\u308c\u307e\u3059\u3002\u306a\u306e\u3067\u3001\u3053\u306e\n+    \u30d6\u30ed\u30c3\u30af\u306f \u30c6\u30b9\u30c8\u30cd\u30c3\u30c8\u3001regtest \u306e\u3068\u304d\u3060\u3051\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002*/\n     {\n         if (params.fPowAllowMinDifficultyBlocks)\n         {\n@@ -37,6 +51,19 @@ unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHead\n         return pindexLast->nBits;\n     }\n \n+/*\u305d\u306e\u4e2d\u8eab\u306e\u51e6\u7406\u3067\u3059\u3002\u30b3\u30e1\u30f3\u30c8\u306b\u3042\u308b\u901a\u308a\u3001\u6700\u521d\u306eif\u6587 `pblock->GetBlockTime() > pindexLast->GetBlockTime() + params.nPowTargetSpacing*2`\n+\u3067\u306f\u3001\u6b21\u306b\u30c1\u30a7\u30fc\u30f3\u306b\u3064\u306a\u304e\u305f\u3044\u30d6\u30ed\u30c3\u30af\u306e\u30d6\u30ed\u30c3\u30af\u30bf\u30a4\u30e0\u304c\u524d\u56de\u306e\u30d6\u30ed\u30c3\u30af\u304b\u308920\u5206\u4ee5\u4e0a\u7d4c\u3063\u3066\u3044\u308b\u304b\u3092\u78ba\u8a8d\u3057\u3066\u3044\u307e\u3059\u3002\n+\u7d4c\u3063\u3066\u3044\u308b\u5834\u5408\u306f `nProofOfWorkLimit` \u3092\u8fd4\u3057\u3066\u3044\u307e\u3059\u3002\n+`nProofOfWorkLimit`\u306f\u30de\u30a4\u30cb\u30f3\u30b0\u306e\u96e3\u6613\u5ea6\u306e\u6700\u5c0f\u5024\u3067\u3001chainparams.cpp\u306e\u4e2d\u3067\u5404\u30c1\u30a7\u30fc\u30f3\u306e\u30e2\u30fc\u30c9\u3054\u3068\u306b\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n+\n+\tmain net: uint256S(\"00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff\")\n+\ttest net: uint256S(\"00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff\")\n+\tregtest: uint256S(\"7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\")\n+`nProofOfWorkLimit` \u306f\u3053\u306e\u8a2d\u5b9a\u5024\u3092uint32 \u306b\u5909\u63db\u3057\u305f\u3082\u306e\u304c\u30bb\u30c3\u30c8\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n+\u2193\u5909\u63db\u51e6\u7406\n+`unsigned int nProofOfWorkLimit = UintToArith256(params.powLimit).GetCompact();`\n+*/\n+\n     // Go back by what we want to be 14 days worth of blocks\n     int nHeightFirst = pindexLast->nHeight - (params.DifficultyAdjustmentInterval()-1);\n     assert(nHeightFirst >= 0);\n@@ -46,11 +73,16 @@ unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHead\n     return CalculateNextWorkRequired(pindexLast, pindexFirst->GetBlockTime(), params);\n }\n \n+\n unsigned int CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nFirstBlockTime, const Consensus::Params& params)\n {\n     if (params.fPowNoRetargeting)\n         return pindexLast->nBits;\n \n+\n+   /*unsigned int nBits]\n+\u96e3\u6613\u5ea6\u3092\u8868\u3059\u30d6\u30ed\u30c3\u30af\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u3067\u3059\u3002\u3053\u306e\u30c7\u30fc\u30bf\u3092\u57fa\u306b\u30d6\u30ed\u30c3\u30af\u30cf\u30c3\u30b7\u30e5\u304c\u6e80\u305f\u3059\u3079\u304d\u6700\u5c0f\u5024\u3092\u6c42\u3081\u307e\u3059\u3002*/\n+\n     // Limit adjustment step\n     int64_t nActualTimespan = pindexLast->GetBlockTime() - nFirstBlockTime;\n     if (nActualTimespan < params.nPowTargetTimespan/4)\n@@ -79,6 +111,8 @@ bool CheckProofOfWork(uint256 hash, unsigned int nBits, const Consensus::Params&\n \n     bnTarget.SetCompact(nBits, &fNegative, &fOverflow);\n \n+    //\u3053\u3053\u3067\u3001nBits \u3092 256bit \u306e\u6570\u5024\u578b\u306b\u5909\u63db\u3057\u3066\u3044\u307e\u3059\u3002\n+\n     // Check range\n     if (fNegative || bnTarget == 0 || fOverflow || bnTarget > UintToArith256(params.powLimit))\n         return false;"
      },
      {
        "sha": "d532c31c9ba4335773b3b35fcac19bf5ee8e7ad4",
        "filename": "src/pow.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/057c9b11de718346e5f126dcc26d9fed147ad473/src/pow.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/057c9b11de718346e5f126dcc26d9fed147ad473/src/pow.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.h?ref=057c9b11de718346e5f126dcc26d9fed147ad473",
        "patch": "@@ -13,6 +13,9 @@\n class CBlockHeader;\n class CBlockIndex;\n class uint256;\n+//unit256=\u30d6\u30ed\u30c3\u30af\u30cf\u30c3\u30b7\u30e5\u3001Bitcoin\u306e\u305f\u3081\u306b\u5b9a\u7fa9\u3055\u308c\u305f\u6570\u5024\u578b\u3067\u3059\u3002\n+//\u30d6\u30ed\u30c3\u30af\u306e\u30c7\u30fc\u30bf\u306b\u5bfe\u3057\u3066 SHA256 \u30cf\u30c3\u30b7\u30e5\u95a2\u6570\u3092\u4f7f\u3044\u6c42\u3081\u307e\u3059\u3002\n+//\u3053\u3053\u3067\u306f3\u3064\u306e\u95a2\u6570\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3060\u3051\u3002\u4e0a\u306e2\u3064\u306f\u30de\u30a4\u30cb\u30f3\u30b0\u306e\u96e3\u6613\u5ea6\u3092\u6271\u3063\u3066\u3044\u308b\u3002\n \n unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHeader *pblock, const Consensus::Params&);\n unsigned int CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nFirstBlockTime, const Consensus::Params&);"
      },
      {
        "sha": "26c7a06c3e370d117f535d16b94f5d5564e0b257",
        "filename": "src/primitives/block.h",
        "status": "modified",
        "additions": 10,
        "deletions": 6,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/057c9b11de718346e5f126dcc26d9fed147ad473/src/primitives/block.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/057c9b11de718346e5f126dcc26d9fed147ad473/src/primitives/block.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.h?ref=057c9b11de718346e5f126dcc26d9fed147ad473",
        "patch": "@@ -2,6 +2,7 @@\n // Copyright (c) 2009-2018 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+//\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3084\u30ed\u30b8\u30c3\u30af\u3067\u306f\u306a\u304f\u30c7\u30fc\u30bf\u69cb\u9020\u306e\u5b9a\u7fa9\u306b\u4f7f\u308f\u308c\u3066\u3044\u308b\n \n #ifndef BITCOIN_PRIMITIVES_BLOCK_H\n #define BITCOIN_PRIMITIVES_BLOCK_H\n@@ -21,12 +22,13 @@ class CBlockHeader\n {\n public:\n     // header\n-    int32_t nVersion;\n-    uint256 hashPrevBlock;\n-    uint256 hashMerkleRoot;\n-    uint32_t nTime;\n-    uint32_t nBits;\n-    uint32_t nNonce;\n+    int32_t nVersion; //32bit\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u756a\u53f7\n+    uint256 hashPrevBlock;//256bit\u306e\u524d\u306e\u30d6\u30ed\u30c3\u30af\u306e\u30cf\u30c3\u30b7\u30e5\u5024\n+    uint256 hashMerkleRoot;//\u30de\u30fc\u30af\u30eb\u30eb\u30fc\u30c8\u306e\u5024\n+    uint32_t nTime;//\u30d6\u30ed\u30c3\u30af\u306e\u751f\u6210\u6642\u9593\uff08\u30bf\u30a4\u30e0\u30b9\u30bf\u30f3\u30d7\uff09\n+    uint32_t nBits;//\u96e3\u6613\u5ea6\u3092\u7b97\u51fa\u3059\u308b\u305f\u3081\u306e\u30c7\u30fc\u30bf\n+    uint32_t nNonce;//\u30de\u30a4\u30ca\u30fc\u304c\u30de\u30a4\u30cb\u30f3\u30b0\u3067\u5f97\u308b\u30ca\u30f3\u30b9\n+\n \n     CBlockHeader()\n     {\n@@ -74,6 +76,8 @@ class CBlock : public CBlockHeader\n public:\n     // network and disk\n     std::vector<CTransactionRef> vtx;\n+    // \u30d9\u30af\u30bf\u30fc\u3068\u306fC++\u3067\u3088\u304f\u4f7f\u7528\u3055\u308c\u308b\u53ef\u5909\u9577\u306e\u914d\u5217\u306e\u30b3\u30f3\u30c6\u30ca\u3001\u597d\u304d\u306a\u6570\u306e\u8981\u7d20\u3092\u5165\u308c\u3089\u308c\u308b\u914d\u5217\n+\n \n     // memory only\n     mutable bool fChecked;"
      },
      {
        "sha": "bbefad3c1e0c926de9dcce442b66b1cc028e764b",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 12,
        "deletions": 8,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/057c9b11de718346e5f126dcc26d9fed147ad473/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/057c9b11de718346e5f126dcc26d9fed147ad473/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=057c9b11de718346e5f126dcc26d9fed147ad473",
        "patch": "@@ -3,6 +3,8 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+//transaction \u306e\u30c7\u30fc\u30bf\u69cb\u9020\n+\n #ifndef BITCOIN_PRIMITIVES_TRANSACTION_H\n #define BITCOIN_PRIMITIVES_TRANSACTION_H\n \n@@ -63,10 +65,10 @@ class COutPoint\n class CTxIn\n {\n public:\n-    COutPoint prevout;\n-    CScript scriptSig;\n-    uint32_t nSequence;\n-    CScriptWitness scriptWitness; //!< Only serialized through CTransaction\n+    COutPoint prevout;//UTXO\u3092\u6307\u3057\u3066\u3044\u308b\n+    CScript scriptSig;//\u4e0a\u8a18\u306eUTXO\u3092\u30a2\u30f3\u30ed\u30c3\u30af\u3059\u308b\u305f\u3081\u306e\u7f72\u540d\uff08\u516c\u958b\u9375\u3068\u7f72\u540d\u30b9\u30af\u30ea\u30d7\u30c8\uff09\n+    uint32_t nSequence;//\u30b7\u30fc\u30b1\u30f3\u30b9\u756a\u53f7\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u306f0xffffffff\n+    CScriptWitness scriptWitness; //!< Only serialized through CTransaction WITNESS\u9818\u57df\n \n     /* Setting nSequence to this value for every input in a transaction\n      * disables nLockTime. */\n@@ -133,8 +135,10 @@ class CTxIn\n class CTxOut\n {\n public:\n-    CAmount nValue;\n-    CScript scriptPubKey;\n+    CAmount nValue; //\u9001\u4fe1\u984d\n+    CScript scriptPubKey;\u3000//locking script\n+    //CScript=Bitcoin\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u6271\u3046\u30af\u30e9\u30b9\n+\n \n     CTxOut()\n     {\n@@ -284,8 +288,8 @@ class CTransaction\n     // actually immutable; deserialization and assignment are implemented,\n     // and bypass the constness. This is safe, as they update the entire\n     // structure, including the hash.\n-    const std::vector<CTxIn> vin;\n-    const std::vector<CTxOut> vout;\n+    const std::vector<CTxIn> vin;//\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u30a4\u30f3\u30d7\u30c3\u30c8\u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\n+    const std::vector<CTxOut> vout;//\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u30a2\u30a6\u30c8\u30d7\u30c3\u30c8\u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\n     const int32_t nVersion;\n     const uint32_t nLockTime;\n "
      },
      {
        "sha": "1fcf264332afa619cad4a9ef86e140774b76a63f",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/057c9b11de718346e5f126dcc26d9fed147ad473/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/057c9b11de718346e5f126dcc26d9fed147ad473/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=057c9b11de718346e5f126dcc26d9fed147ad473",
        "patch": "@@ -387,7 +387,7 @@ typedef prevector<28, unsigned char> CScriptBase;\n bool GetScriptOp(CScriptBase::const_iterator& pc, CScriptBase::const_iterator end, opcodetype& opcodeRet, std::vector<unsigned char>* pvchRet);\n \n /** Serialized script, used inside transaction inputs and outputs */\n-class CScript : public CScriptBase\n+class CScript : public CScriptBase\u3000//\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u4f5c\u3063\u305f\u308a\u7d99\u627f\u3057\u305f\u308a\u306a\u3069\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u6271\u3046\u6642\u306b\u57fa\u8ef8\u3068\u306a\u3063\u3066\u304f\u308b\u30af\u30e9\u30b9\n {\n protected:\n     CScript& push_int64(int64_t n)"
      },
      {
        "sha": "c7a3df00bfe3756d212e6285b391c2b6a763d064",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 44,
        "deletions": 3,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/057c9b11de718346e5f126dcc26d9fed147ad473/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/057c9b11de718346e5f126dcc26d9fed147ad473/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=057c9b11de718346e5f126dcc26d9fed147ad473",
        "patch": "@@ -83,6 +83,18 @@ BlockManager g_blockman;\n } // anon namespace\n \n std::unique_ptr<CChainState> g_chainstate;\n+/*CChainState=Bitcoincore\u306b\u304a\u3044\u3066\u30c1\u30a7\u30fc\u30f3\u3092\u6271\u3046\u6642\u306e\u5927\u672c\u3068\u306a\u308b\u30af\u30e9\u30b9\u3002\u6ce8\u610f\u70b9\u306f\u30d8\u30c3\u30c0\u30d5\u30a1\u30a4\u30eb\u3067\u306f\u306a\u304f\u3066\u5b9f\u88c5\u30d5\u30a1\u30a4\u30eb\u306b\u8a18\u8ff0\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3002\n+\u306a\u306e\u3067State\u305d\u306e\u3082\u306e\u306fvalidation\u306e\u4e2d\u304b\u3089\u3067\u3057\u304b\u53c2\u7167\u3067\u304d\u306a\u3044\u69cb\u9020\u3002\u3060\u304c\u30c1\u30a7\u30fc\u30f3\u306e\u60c5\u5831\u306f\u3082\u3063\u3068\u3044\u308d\u3093\u306a\u3068\u3053\u3067\n+\u4f7f\u308f\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3001CChainState\u306f\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\u306eg_chainstate(g\u306f\u30b0\u30ed\u30fc\u30d0\u30eb\u306e\u7565)\u3068\u3044\u3046singleton\u306e\u5909\u6570\u3068\u3057\u3066\u5b58\u5728\u3057\u3066\u3044\u308b\n+g_chainstate\u306b\u552f\u4e00\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c\u683c\u7d0d\u3055\u308c\u308b\n+singleton\u306f\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c\u4e00\u500b\u3057\u304b\u5b58\u5728\u3057\u306a\u3044\u3053\u3068*/\n+\n+/*CChainState\u306f\u3001\u73fe\u5728\u306e\u30d9\u30b9\u30c8\u30c1\u30a7\u30fc\u30f3\u3068\u30d8\u30c3\u30c0\u30fc\u30c4\u30ea\u30fc\u306e\u30ed\u30fc\u30ab\u30eb\u77e5\u8b58\u3092\u66f4\u65b0\u3059\u308b\u305f\u3081\u306eAPI\u3092\u63d0\u4f9b\u3057\u3001\u63d0\u4f9b\u3057\u307e\u3059\u3002\n+\u4e00\u822c\u306b\u3001\u73fe\u5728\u306e\u30d6\u30ed\u30c3\u30af\u30c4\u30ea\u30fc\u3078\u306e\u30a2\u30af\u30bb\u30b9\u3068\u3001\u65b0\u3057\u3044\u30c7\u30fc\u30bf\u3092\u63d0\u4f9b\u3059\u308b\u6a5f\u80fd\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002\u65b0\u3057\u3044\u30c7\u30fc\u30bf\u306f\u3001\u9069\u5207\u306b\u691c\u8a3c\u3055\u308c\u3001\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u305d\u306e\n+\u72b6\u614b\u306b\u7d44\u307f\u8fbc\u307e\u308c\u307e\u3059\u3002\u7d50\u5c40\u306e\u3068\u3053\u308d\u3001\u3053\u3053\u3067\u306eAPI\u306f\u3001\u6d88\u8cbb\u53ef\u80fd\u306alibconsensus\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u3057\u3066\u5916\u90e8\u306b\u516c\u958b\u3055\u308c\u308b\u3053\u3068\u3092\u76ee\u6a19\u3068\u3057\u3066\u3044\u308b\u305f\u3081\n+\u8ffd\u52a0\u3055\u308c\u305f\u95a2\u6570\u306f\u4ed6\u306e\u30af\u30e9\u30b9\u30e1\u30f3\u30d0\u95a2\u6570\u3001\u30b3\u30f3\u30bb\u30f3\u30b5\u30b9\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u4ed6\u306e\u90e8\u5206\u306e\u7d14\u95a2\u6570\u3001\u691c\u8a3c\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u3092\u4ecb\u3057\u305f\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\n+\uff08\u6700\u7d42\u7684\u306b\u306f\u3053\u308c\u3082\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u7d4c\u7531\u3067\u884c\u308f\u308c\u307e\u3059\uff09\u3002*/\n+//\u3064\u307e\u308a\u73fe\u5728\u306e\u30d9\u30b9\u30c8\u30c1\u30a7\u30fc\u30f3\u3078\u306e\u53c2\u7167\u3084\u3001\u305d\u306e\u4ed6\u73fe\u5728\u306e\u30c1\u30a7\u30fc\u30f3\u306b\u95a2\u3059\u308b\u69d8\u3005\u306a\u60c5\u5831\u3078\u30a2\u30af\u30bb\u30b9\u3059\u308b\u305f\u3081\u306e\u5165\u308a\u53e3\u3068\u3057\u3066\u6a5f\u80fd\u3059\u308b\u3002\n \n CChainState& ChainstateActive() {\n     assert(g_chainstate);\n@@ -94,7 +106,19 @@ CChain& ChainActive() {\n     return g_chainstate->m_chain;\n }\n \n-/**\n+/*\n+ChainActive=ChainState\u304c\u6301\u3063\u3066\u3044\u308b\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u4e00\u3064\u3001\u4eca\u6709\u52b9\u306a\u30e1\u30a4\u30f3\u30c1\u30a7\u30fc\u30f3\u3068\u3057\u3066\u6271\u308f\u308c\u3066\u3044\u308b\u30c1\u30a7\u30fc\u30f3\u305d\u306e\u3082\u306e\u3092\u8868\u3057\u3066\u3044\u308b\u3002\n+\u3064\u307e\u308a\u3001\u5b9f\u969b\u306e\u53f0\u5e33\u3068\u3057\u3066\u306e\u52b9\u529b\u3092\u6301\u3063\u3066\u3044\u308b\u552f\u4e00\u306e\u30c1\u30a7\u30fc\u30f3\u3002CChainState \u3067\u7ba1\u7406\u3059\u308b\u5168\u3066\u306e\u30d5\u30a9\u30fc\u30af\u306e\u3046\u3061\u6700\u3082chainwork\u304c\u5927\u304d\u304f\n+\u6709\u52b9\u3067\u3042\u308b\u3068\u5224\u65ad\u3055\u308c\u3066\u3044\u308b\u30c1\u30a7\u30fc\u30f3\n+\n+\u3053\u308c\u81ea\u4f53\u306f\u8272\u3093\u306a\u5834\u6240\u304b\u3089\u53c2\u7167\u3055\u308c\u3066\u3044\u308b\u304c\u3001ChainState\u304c\u516c\u958b\u3055\u308c\u3066\u3044\u308b\u308f\u3051\u3067\u306f\u306a\u304f\u3001\u3053\u306eChainActive\u3060\u3051\u304c\u30b0\u30ed\u30fc\u30d0\u30eb\u306a\u5909\u6570\u306b\u53c2\u7167\u3092\n+\u6e21\u3055\u308c\u3066\u305d\u306e\u5909\u6570\u7d4c\u7531\u3067\u30a2\u30af\u30bb\u30b9\u3055\u308c\u3066\u3044\u308b\u3001\u5b9f\u614b\u306fCChain\u3068\u3044\u3046\u30af\u30e9\u30b9\u3002\n+\u578b\u306e\u5f8c\u308d\u306b&\u304c\u3064\u3044\u3066\u3044\u308b\u306e\u306f\u53c2\u7167\u6e21\u3057\u3001\u76f4\u63a5g_chainstate\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u306e\u3067\u306f\u306a\u304f\u4e00\u65e6\u5225\u306e\u5909\u6570\u306b\u53c2\u7167\u3092\n+\u6e21\u3057\u3066\u30a2\u30af\u30bb\u30b9\u3057\u3066\u3044\u308b\u3053\u3068\u304c\u591a\u3044\n+*/\n+\n+\n+/*\n  * Mutex to guard access to validation specific variables, such as reading\n  * or changing the chainstate.\n  *\n@@ -136,6 +160,11 @@ CScript COINBASE_FLAGS;\n // Internal stuff\n namespace {\n     CBlockIndex* pindexBestInvalid = nullptr;\n+    //BestInvalid=\u6700\u9577\u4e0d\u6b63\u30d6\u30ed\u30c3\u30af\n+    //\u3053\u306eCheckForkWarningConditions (validation.cpp) \u5185\u3067\u30d5\u30a9\u30fc\u30af\u306e\u691c\u51fa\u306b\u4f7f\u308f\u308c\u3066\u3044\u308b\u3002\n+    //\u30b9\u30c6\u30fc\u30bf\u30b9\u304cBLOCK_FAILED_MASK\u3067\u3042\u308b\u3082\u306e\u3001\u307e\u305f\u306fBLOCK_HAVE_DATA\u306e\u3046\u3061Chainwork\u304c\u6700\u3082\u5927\u304d\u3044\u3082\u306e\n+    //Bitcoin\u306e\u30b3\u30f3\u30bb\u30f3\u30b5\u30b9\u306b\u53cd\u3057\u3066\u3044\u308b\u3082\u306e\u3001\u307e\u305f\u306f\u5b9f\u30c7\u30fc\u30bf\u304c\u306a\u304fvalid(\u6709\u52b9)\u304b\u3069\u3046\u304b\u691c\u8a3c\u3067\u304d\u306a\u3044\u3082\u306e\u306e\u4e2d\u3067\u6700\u3082chainwork\n+    //\u304c\u5927\u304d\u3044\u30d6\u30ed\u30c3\u30af\u3002\n \n     CCriticalSection cs_LastBlockFile;\n     std::vector<CBlockFileInfo> vinfoBlockFile;\n@@ -159,6 +188,7 @@ CBlockIndex* LookupBlockIndex(const uint256& hash)\n     BlockMap::const_iterator it = g_blockman.m_block_index.find(hash);\n     return it == g_blockman.m_block_index.end() ? nullptr : it->second;\n }\n+//vald block\u3092\u30b9\u30c8\u30a2\u3057\u3066\u3044\u308b\u30de\u30c3\u30d7\u3001\u30d5\u30a9\u30fc\u30af\u306b\u3042\u308a\u3001chainActive \u306b\u542b\u307e\u308c\u306a\u3044\u30d6\u30ed\u30c3\u30af\u3082\u4fdd\u6301\u3057\u3066\u3044\u308b\u3002\n \n CBlockIndex* FindForkInGlobalIndex(const CChain& chain, const CBlockLocator& locator)\n {\n@@ -171,7 +201,7 @@ CBlockIndex* FindForkInGlobalIndex(const CChain& chain, const CBlockLocator& loc\n         if (pindex) {\n             if (chain.Contains(pindex))\n                 return pindex;\n-            if (pindex->GetAncestor(chain.Height()) == chain.Tip()) {\n+            if (pindex->GetAncestor(chain.Height()) == chain.Tip()) { //Tip\u30d6\u30ed\u30c3\u30af\u306e\u5148\u7aef(\u4e00\u756a\u6700\u65b0\u306e\u30d6\u30ed\u30c3\u30af\u306e\u3053\u3068)\n                 return chain.Tip();\n             }\n         }\n@@ -1306,6 +1336,7 @@ bool CChainState::IsInitialBlockDownload() const\n }\n \n static CBlockIndex *pindexBestForkTip = nullptr, *pindexBestForkBase = nullptr;\n+//BestFork=ChainActive\u304b\u3089\u306e\u30d5\u30a9\u30fc\u30af\u306e\u3046\u3061\u3001\u6700\u3082chainWork\u304c\u5f37\u3044\u3082\u306e\u3067\u3001\u30d5\u30a9\u30fc\u30af\u306e\u53ef\u80fd\u6027\u304c\u3042\u308b\u3068\u3057\u3066\u8ffd\u8de1\u3055\u308c\u3066\u3044\u308b\u3082\u306e\u3002\n \n BlockMap& BlockIndex()\n {\n@@ -2617,6 +2648,7 @@ CBlockIndex* CChainState::FindMostWorkChain() {\n             // to a chain unless we have all the non-active-chain parent blocks.\n             bool fFailedChain = pindexTest->nStatus & BLOCK_FAILED_MASK;\n             bool fMissingData = !(pindexTest->nStatus & BLOCK_HAVE_DATA);\n+\n             if (fFailedChain || fMissingData) {\n                 // Candidate chain is not usable (either invalid or missing data)\n                 if (fFailedChain && (pindexBestInvalid == nullptr || pindexNew->nChainWork > pindexBestInvalid->nChainWork))\n@@ -3074,6 +3106,12 @@ CBlockIndex* BlockManager::AddToBlockIndex(const CBlockHeader& block)\n     }\n     pindexNew->nTimeMax = (pindexNew->pprev ? std::max(pindexNew->pprev->nTimeMax, pindexNew->nTime) : pindexNew->nTime);\n     pindexNew->nChainWork = (pindexNew->pprev ? pindexNew->pprev->nChainWork : 0) + GetBlockProof(*pindexNew);\n+    //\u30cf\u30c3\u30b7\u30e5\u30d1\u30ef\u30fc\u306e\u8a08\u7b97\u30b3\u30fc\u30c9\n+    /*pindexNew->pprev \u306f\u524d\u306e\u30d6\u30ed\u30c3\u30af\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u3067\u3059\u304c\u3001\u524d\u306e\u30d6\u30ed\u30c3\u30af\u304c\u7121\u3044\u306e\u306f genesis block \u3060\u3051\u306a\u306e\u3067\u3001\u5927\u62b5\u306e\u5834\u5408\u306f\u524d\u306e\u30d6\u30ed\u30c3\u30af\u306e\n+    nChainWork\u306b\u305d\u306e\u30d6\u30ed\u30c3\u30af\u306e BlockProof\uff08\u30cf\u30c3\u30b7\u30e5\u30d1\u30ef\u30fc\u307f\u305f\u3044\u306a\u3082\u306e\uff09\u3092\u8db3\u3059\u8a08\u7b97\u306b\u306a\u308a\u307e\u3059\u3002\n+    BlockProof \u306f\u500b\u5225\u306e\u30d6\u30ed\u30c3\u30af\u306b\u5bfe\u3059\u308b\u30de\u30a4\u30cb\u30f3\u30b0\u8a08\u7b97\u306e\u5927\u5909\u3055\u3092\u8868\u3059\u5024\u3067\u3059\u3002\u3088\u304f\u4f7f\u308f\u308c\u308b\u30cf\u30c3\u30b7\u30e5\u30d1\u30ef\u30fc\u3068\u3044\u3046\u8a00\u8449\u3068\u4f3c\u305f\u6982\u5ff5\u3067\u3059\u304c\u3001\n+    \u5c11\u3057\u9055\u3046\u3001\u8a73\u3057\u304f\u306fchain.cpp\u3078*/\n+\n     pindexNew->RaiseValidity(BLOCK_VALID_TREE);\n     if (pindexBestHeader == nullptr || pindexBestHeader->nChainWork < pindexNew->nChainWork)\n         pindexBestHeader = pindexNew;\n@@ -3698,7 +3736,9 @@ bool CChainState::AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CVali\n     return true;\n }\n \n-bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, bool fForceProcessing, bool *fNewBlock)\n+//\u30d6\u30ed\u30c3\u30af\u306e\u691c\u8a3c\u306e\u5b9f\u88c5\u90e8\u5206\n+bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock,\n+bool fForceProcessing, bool *fNewBlock)\n {\n     AssertLockNotHeld(cs_main);\n \n@@ -4548,6 +4588,7 @@ bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, FlatFi\n     // Map of disk positions for blocks with unknown parent (only used for reindex)\n     static std::multimap<uint256, FlatFilePos> mapBlocksUnknownParent;\n     int64_t nStart = GetTimeMillis();\n+    //\u672a\u78ba\u8a8d\u306ePublic\u3000\u30d5\u30a3\u30fc\u30eb\u30c9\n \n     int nLoaded = 0;\n     try {"
      },
      {
        "sha": "6c892812ba638bdd99fb0c1a3907f8439115a40f",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 9,
        "deletions": 1,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/057c9b11de718346e5f126dcc26d9fed147ad473/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/057c9b11de718346e5f126dcc26d9fed147ad473/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=057c9b11de718346e5f126dcc26d9fed147ad473",
        "patch": "@@ -213,7 +213,12 @@ static const uint64_t MIN_DISK_SPACE_FOR_BLOCK_FILES = 550 * 1024 * 1024;\n  * @param[out]  fNewBlock A boolean which is set to indicate if the block was first received via this call\n  * @returns     If the block was processed, independently of block validity\n  */\n-bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, bool fForceProcessing, bool* fNewBlock) LOCKS_EXCLUDED(cs_main);\n+\n+ //\u30d6\u30ed\u30c3\u30af\u306e\u691c\u8a3c\u306f\u3053\u3053\u304c\u5165\u308a\u53e3\n+bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock,\n+bool fForceProcessing, bool* fNewBlock) LOCKS_EXCLUDED(cs_main);\n+\n+//\u30d6\u30ed\u30c3\u30af\u30d8\u30c3\u30c0\u30fc\u306e\u691c\u8a3c\u306f\u3053\u3053\u304c\u5165\u308a\u53e3\n \n /**\n  * Process incoming block headers.\n@@ -229,6 +234,9 @@ bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<cons\n  */\n bool ProcessNewBlockHeaders(const std::vector<CBlockHeader>& block, CValidationState& state, const CChainParams& chainparams, const CBlockIndex** ppindex = nullptr, CBlockHeader* first_invalid = nullptr) LOCKS_EXCLUDED(cs_main);\n \n+\n+//\u3053\u306e\u51e6\u7406\u306f P2P \u306e\u901a\u4fe1\u30d7\u30ed\u30c8\u30b3\u30eb\u3067\u3001HEADERS\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u53d7\u3051\u53d6\u3063\u305f\u6642\u306b\u547c\u3070\u308c\u308b\n+\n /** Open a block file (blk?????.dat) */\n FILE* OpenBlockFile(const FlatFilePos &pos, bool fReadOnly = false);\n /** Translation to a filesystem path */"
      }
    ]
  }
]