paveljanik,2017-03-03T18:14:22Z,"gcc version 5.3.1 20160301 [gcc-5-branch revision 233849] is completely `-Wshadow` clean.\nThe same applies to gcc version 6.2.1 20160826 [gcc-6-branch revision 239773].\n",https://github.com/bitcoin/bitcoin/pull/9911#issuecomment-284028749,284028749,
MarcoFalke,2017-03-04T20:02:09Z,"Any reason this is split into three commits with mostly the same\ncommit messages?\n\nOn Sat, Mar 4, 2017 at 8:40 PM, Gregory Maxwell\n<notifications@github.com> wrote:\n>\n> @gmaxwell commented on this pull request.\n>\n> utACK\n>\n> —\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub, or mute the thread.\n",https://github.com/bitcoin/bitcoin/pull/9911#issuecomment-284177029,284177029,
paveljanik,2017-03-04T20:20:01Z,"Yes. It is WIP. I'm adding commit by commit for various gcc/clang version I test so people do not see warnings. I still have to test one more clang version I have installed on one system.\n\nWil squash afterwards of course.",https://github.com/bitcoin/bitcoin/pull/9911#issuecomment-284178043,284178043,
paveljanik,2017-03-04T20:42:51Z,"BTW, this PR is open also for others who see some `-Wshadow` warnings on their preferred compiler. Having all fixes in one PR should lower the impact of turning the warnings on by default.\n",https://github.com/bitcoin/bitcoin/pull/9911#issuecomment-284179429,284179429,
laanwj,2017-03-04T21:32:31Z,"Sigh, more Wshadow changes. Is this ever done?",https://github.com/bitcoin/bitcoin/pull/9911#issuecomment-284184226,284184226,
paveljanik,2017-03-04T21:59:05Z,"... and squashed as both clang version tested are `-Wshadow` clean.\n\n`clang` seems to be much better or people use it more when developing for Bitcoin Core ;-)\n",https://github.com/bitcoin/bitcoin/pull/9911#issuecomment-284187356,284187356,
laanwj,2017-03-05T10:21:36Z,"> clang seems to be much better or people use it more when developing for Bitcoin Core ;-)\n\nAside: In my case, yes. FreeBSD defaults to clang nowadays, and on Linux I use clang specifically for Bitcoin Core because it compiles faster and uses less memory (=more parallelism with same amount of RAM).\n\nGCC is supposed to produce slightly better code for x86 though, or at least that used to be",https://github.com/bitcoin/bitcoin/pull/9911#issuecomment-284218574,284218574,
paveljanik,2017-03-06T16:24:34Z,"Added fix for #8574's local variable redeclaration (aka shadowing).\n\nFor easier searching, here is the log:\n\n```\nwallet/db.cpp:620:40: warning: declaration shadows a local variable [-Wshadow]\n            map<string, int>::iterator mi = bitdb.mapFileUseCount.find(strFile);\n                                       ^\nwallet/db.cpp:610:36: note: previous declaration is here\n        map",https://github.com/bitcoin/bitcoin/pull/9911#issuecomment-284448452,284448452,
gmaxwell,2017-03-06T23:25:07Z, paveljanik have you compiled with a make clean lately? I'm flooded with  streams.h:407:44: warning: declaration of ‘data’ shadows a member of 'this' [-Wshadow],https://github.com/bitcoin/bitcoin/pull/9911#issuecomment-284568328,284568328,
paveljanik,2017-03-07T05:49:34Z,"@gmaxwell This should be already fixed in this PR - https://github.com/bitcoin/bitcoin/pull/9911/files#diff-eb3b977a68473a9d20093cbe90c659e6L407\n\nBTW - I always clean compile...",https://github.com/bitcoin/bitcoin/pull/9911#issuecomment-284628557,284628557,
jtimon,2017-03-07T17:23:51Z,utACK bfc6be9,https://github.com/bitcoin/bitcoin/pull/9911#issuecomment-284793842,284793842,
laanwj,2017-03-08T21:15:19Z,"To be honest I'd prefer to disable -Wshadow again. Even a few days after enabling it, it seems to me it requires too many disjointed, seemingly random changes, and continuous maintenance after almost every thing that gets merged after new incomprehensible warnings pop up with *some* gcc or clang version.",https://github.com/bitcoin/bitcoin/pull/9911#issuecomment-285171447,285171447,
MarcoFalke,2017-03-08T21:31:52Z,"We might keep it enabled, after all it could help to detect valid\nbugs. Though, I agree that those ""fix various gcc warnings"" with no\napparent rationale other than ""The warning disappears when compiling\nwith this specific version of boost and gcc-x.x.x"" are not\nparticularly helpful. (I am not against all changes in this pull, but\nwe should only commit the fixes that make sense and keep the co",https://github.com/bitcoin/bitcoin/pull/9911#issuecomment-285175985,285175985,
laanwj,2017-03-08T21:43:50Z,"> We might keep it enabled, after all it could help to detect valid bugs.\n\nIt could, sure. In an ideal situation where compilers had a single, sane (or even close) definition of shadowing I'd be all for it. \nHowever I just searched and there are >25 recent pulls already dealing with Wshadow changes:  https://github.com/bitcoin/bitcoin/pulls?utf8=%E2%9C%93&q=is%3Apr%20is%3Aclosed%20wshadow\n",https://github.com/bitcoin/bitcoin/pull/9911#issuecomment-285179129,285179129,
laanwj,2017-03-09T07:34:01Z,"@gmaxwell noted that there are also sub-options for Wshadow. Maybe we can reduce the false positives/weird cases this way.\n```\n  -Wshadow-local which warns if a local variable shadows another local\n  variable or parameter,\n\n  -Wshadow-compatible-local which warns if a local variable shadows\n  another local variable or parameter whose type is compatible with that\n  of the shadowing va",https://github.com/bitcoin/bitcoin/pull/9911#issuecomment-285276770,285276770,
paveljanik,2017-03-09T07:38:41Z,"We had some false positive/weird case?\n\nThe `base` case is a gcc bug (edit: 4.8.x only; fixed in gcc 5). It correctly identified shadowing but emitted wrong log lines...",https://github.com/bitcoin/bitcoin/pull/9911#issuecomment-285277509,285277509,
paveljanik,2017-03-09T07:41:45Z,Rebased.,https://github.com/bitcoin/bitcoin/pull/9911#issuecomment-285278039,285278039,
paveljanik,2017-03-09T08:22:11Z,@laanwj Can you please upload your FreeBSD build log for me with V=1 so I can investigate your warnings?,https://github.com/bitcoin/bitcoin/pull/9911#issuecomment-285285406,285285406,
paveljanik,2017-03-15T14:43:45Z,"Added fix for #9497's shadowing issues:\n\n```\ntest/checkqueue_tests.cpp:49:23: warning: declaration shadows a field of 'checkqueue_tests::FailingCheck' [-Wshadow]\n    FailingCheck(bool fails) : fails(fails){};\n                      ^\ntest/checkqueue_tests.cpp:48:10: note: previous declaration is here\n    bool fails;\n         ^\ntest/checkqueue_tests.cpp:414:50: warning: declaration",https://github.com/bitcoin/bitcoin/pull/9911#issuecomment-286763403,286763403,
laanwj,2017-03-17T10:12:43Z,"```\n1201f4dac236eb92dade95ae8dcb832b374c38463e1180177433b7c500dd56a7  /tmp/compare/bitcoind.0cebfcffb480e63527c225bf9c46db06a3816d98.stripped\n1201f4dac236eb92dade95ae8dcb832b374c38463e1180177433b7c500dd56a7  /tmp/compare/bitcoind.58e94bf6bb3981bca466ff83994ca2a06630a828.stripped\n1201f4dac236eb92dade95ae8dcb832b374c38463e1180177433b7c500dd56a7  /tmp/compare/bitcoind.d9f7224cde0aa9415efd945bc1",https://github.com/bitcoin/bitcoin/pull/9911#issuecomment-287316210,287316210,
paveljanik,2017-03-17T10:23:09Z,"@laanwj Please look at d9f7224cde0aa9415efd945bc1c9124628a59002 ;-) Of course I can rewrite it by renaming the local variable (e.g. `mi --> mIter`?) instead of reusing the upper local which is not used after at all.\n\nIs it OK for you? I have chosen this solution because it is crystal clean, logical, less diff lines, easier review etc.\n",https://github.com/bitcoin/bitcoin/pull/9911#issuecomment-287318282,287318282,
MarcoFalke,2017-03-17T14:35:07Z,"Let's not reuse iterators. This will cause issues with nested for\nloops, where the inner loops uses the iterator of the outer loop. I'd\nrather prefer to keep it the same instead of changing one issue\nagainst another.\n",https://github.com/bitcoin/bitcoin/pull/9911#issuecomment-287370629,287370629,
paveljanik,2017-03-17T16:24:20Z,@MarcoFalke Can you please rephrase what do you prefer? Do you agree with renaming the first or the second `mi` to e.g. `mIter`? Or `mj`? ;-),https://github.com/bitcoin/bitcoin/pull/9911#issuecomment-287402039,287402039,
MarcoFalke,2017-03-17T18:21:53Z,"Change one of them to `mit`?\n\nImo, what will cause problems when reusing iterators:\n\n```cpp\nfor ( auto it = ... ++it ) {\n  for ( it = ... ++it ) {\n    do(*it);\n  }\n  do(*it);\n}",https://github.com/bitcoin/bitcoin/pull/9911#issuecomment-287433600,287433600,
laanwj,2017-03-17T21:55:18Z,"I'm not going to merge any shadowing fixes if they change the binary.\n\nIn this case I'd prefer if you did the renaming in a way that just renames\none of the iterators instead of reusing it which changes the code (thanks\nMarcoFalke for checking)\n",https://github.com/bitcoin/bitcoin/pull/9911#issuecomment-287481113,287481113,
paveljanik,2017-03-18T06:21:36Z,"@MarcoFalke Yes, but your example is not the code which is used right now (and this was the reason I did not understand what you wrote). There are two sequential uses, there is no loop in the second part and no nested loop at all. But yes, to be future-safe and same-binary-now, I have changed the first iterator name to `mit` in an additional commit for easier checking.",https://github.com/bitcoin/bitcoin/pull/9911#issuecomment-287520128,287520128,
laanwj,2017-03-18T09:16:41Z,"@paveljanik thanks, going to re-check.\n\n> There are two sequential uses, there is no loop in the second part and no nested loop at all.\n\nYou are right, it's just that in the interest of reducing friction (efficient checking) and eliminating the chance of accidental bugs introduced in these pulls we should require identical binaries.\n",https://github.com/bitcoin/bitcoin/pull/9911#issuecomment-287528478,287528478,
TheBlueMatt,2017-03-08T20:40:33Z,What is this shadowing? (and can we make it static?),https://github.com/bitcoin/bitcoin/pull/9911#discussion_r105017016,105017016,src/torcontrol.cpp
paveljanik,2017-03-08T20:51:47Z,"With gcc4.8.5:\n```\nbitcoin@linux-5bz0:~/bitcoin> make CC=gcc\nMaking all in src\nmake[1]: Entering directory '/home/bitcoin/bitcoin/src'\nmake[2]: Entering directory '/home/bitcoin/bitcoin/src'\n  CXX      libbitcoin_server_a-torcontrol.o\n/usr/include/boost/date_time/time_system_counted.hpp: In instantiation of 'static boost::date_time::counted_time_system<time_rep>::time_rep_type boost:",https://github.com/bitcoin/bitcoin/pull/9911#discussion_r105019334,105019334,src/torcontrol.cpp
TheBlueMatt,2017-03-08T21:00:01Z,"Hmm, that doesnt really answer my question, thanks gcc...Is that trying to say that boost has some ""base"" object that we're shadowing? Either way lets make the new gBase static.",https://github.com/bitcoin/bitcoin/pull/9911#discussion_r105021016,105021016,src/torcontrol.cpp
paveljanik,2017-03-08T21:00:24Z,Hmm. I do not see any `base` there 8),https://github.com/bitcoin/bitcoin/pull/9911#discussion_r105021094,105021094,src/torcontrol.cpp
laanwj,2017-03-08T21:10:58Z,"Oh no, so we're at renaming random variables now without even understanding why just to shut up warnings.\n",https://github.com/bitcoin/bitcoin/pull/9911#discussion_r105023229,105023229,src/torcontrol.cpp
paveljanik,2017-03-08T21:25:38Z,"You are overreacting. The problem is elsewhere, of course. The original author is using `base` all over the source code and arguments of methods conflicts with the global (now static). I think that renaming the global and making it static is the best solution here. Yes, discovered because of turning on `-Wshadow`.\n",https://github.com/bitcoin/bitcoin/pull/9911#discussion_r105026473,105026473,src/torcontrol.cpp
