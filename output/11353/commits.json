[
  {
    "sha": "5b9748f979dd65b229e2882e670794c46e2e720b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1Yjk3NDhmOTc5ZGQ2NWIyMjllMjg4MmU2NzA3OTRjNDZlMmU3MjBi",
    "commit": {
      "author": {
        "name": "Dan Raviv",
        "email": "dan@soundradix.com",
        "date": "2017-09-16T15:47:19Z"
      },
      "committer": {
        "name": "Dan Raviv",
        "email": "dan@soundradix.com",
        "date": "2017-09-16T15:47:19Z"
      },
      "message": "Small refactor of CCoinsViewCache::BatchWrite()\n\nstd::unordered_map::erase( const_iterator pos ) returns an iterator to the element following the removed one. Use that to optimize (probably minor-performance-wise, and definitely code-structure-wise) the implementation of CCoinsViewCache::BatchWrite().",
      "tree": {
        "sha": "d6bd320e89db000569863bda0765a59c1a7adf30",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d6bd320e89db000569863bda0765a59c1a7adf30"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5b9748f979dd65b229e2882e670794c46e2e720b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b9748f979dd65b229e2882e670794c46e2e720b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5b9748f979dd65b229e2882e670794c46e2e720b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b9748f979dd65b229e2882e670794c46e2e720b/comments",
    "author": {
      "login": "danra",
      "id": 84245,
      "node_id": "MDQ6VXNlcjg0MjQ1",
      "avatar_url": "https://avatars.githubusercontent.com/u/84245?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/danra",
      "html_url": "https://github.com/danra",
      "followers_url": "https://api.github.com/users/danra/followers",
      "following_url": "https://api.github.com/users/danra/following{/other_user}",
      "gists_url": "https://api.github.com/users/danra/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/danra/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/danra/subscriptions",
      "organizations_url": "https://api.github.com/users/danra/orgs",
      "repos_url": "https://api.github.com/users/danra/repos",
      "events_url": "https://api.github.com/users/danra/events{/privacy}",
      "received_events_url": "https://api.github.com/users/danra/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "danra",
      "id": 84245,
      "node_id": "MDQ6VXNlcjg0MjQ1",
      "avatar_url": "https://avatars.githubusercontent.com/u/84245?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/danra",
      "html_url": "https://github.com/danra",
      "followers_url": "https://api.github.com/users/danra/followers",
      "following_url": "https://api.github.com/users/danra/following{/other_user}",
      "gists_url": "https://api.github.com/users/danra/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/danra/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/danra/subscriptions",
      "organizations_url": "https://api.github.com/users/danra/orgs",
      "repos_url": "https://api.github.com/users/danra/repos",
      "events_url": "https://api.github.com/users/danra/events{/privacy}",
      "received_events_url": "https://api.github.com/users/danra/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e278f86c536921032e8288625dc5f3af610f2ec8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e278f86c536921032e8288625dc5f3af610f2ec8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e278f86c536921032e8288625dc5f3af610f2ec8"
      }
    ],
    "stats": {
      "total": 94,
      "additions": 48,
      "deletions": 46
    },
    "files": [
      {
        "sha": "8fdde72eded13efd6f6ee412d6d93bf7d20a0314",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 48,
        "deletions": 46,
        "changes": 94,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b9748f979dd65b229e2882e670794c46e2e720b/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b9748f979dd65b229e2882e670794c46e2e720b/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=5b9748f979dd65b229e2882e670794c46e2e720b",
        "patch": "@@ -146,56 +146,58 @@ void CCoinsViewCache::SetBestBlock(const uint256 &hashBlockIn) {\n }\n \n bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn) {\n-    for (CCoinsMap::iterator it = mapCoins.begin(); it != mapCoins.end();) {\n-        if (it->second.flags & CCoinsCacheEntry::DIRTY) { // Ignore non-dirty entries (optimization).\n-            CCoinsMap::iterator itUs = cacheCoins.find(it->first);\n-            if (itUs == cacheCoins.end()) {\n-                // The parent cache does not have an entry, while the child does\n-                // We can ignore it if it's both FRESH and pruned in the child\n-                if (!(it->second.flags & CCoinsCacheEntry::FRESH && it->second.coin.IsSpent())) {\n-                    // Otherwise we will need to create it in the parent\n-                    // and move the data up and mark it as dirty\n-                    CCoinsCacheEntry& entry = cacheCoins[it->first];\n-                    entry.coin = std::move(it->second.coin);\n-                    cachedCoinsUsage += entry.coin.DynamicMemoryUsage();\n-                    entry.flags = CCoinsCacheEntry::DIRTY;\n-                    // We can mark it FRESH in the parent if it was FRESH in the child\n-                    // Otherwise it might have just been flushed from the parent's cache\n-                    // and already exist in the grandparent\n-                    if (it->second.flags & CCoinsCacheEntry::FRESH)\n-                        entry.flags |= CCoinsCacheEntry::FRESH;\n+    for (CCoinsMap::iterator it = mapCoins.begin(); it != mapCoins.end(); it = mapCoins.erase(it)) {\n+        // Ignore non-dirty entries (optimization).\n+        if (!(it->second.flags & CCoinsCacheEntry::DIRTY)) {\n+            continue;\n+        }\n+        CCoinsMap::iterator itUs = cacheCoins.find(it->first);\n+        if (itUs == cacheCoins.end()) {\n+            // The parent cache does not have an entry, while the child does\n+            // We can ignore it if it's both FRESH and pruned in the child\n+            if (!(it->second.flags & CCoinsCacheEntry::FRESH && it->second.coin.IsSpent())) {\n+                // Otherwise we will need to create it in the parent\n+                // and move the data up and mark it as dirty\n+                CCoinsCacheEntry& entry = cacheCoins[it->first];\n+                entry.coin = std::move(it->second.coin);\n+                cachedCoinsUsage += entry.coin.DynamicMemoryUsage();\n+                entry.flags = CCoinsCacheEntry::DIRTY;\n+                // We can mark it FRESH in the parent if it was FRESH in the child\n+                // Otherwise it might have just been flushed from the parent's cache\n+                // and already exist in the grandparent\n+                if (it->second.flags & CCoinsCacheEntry::FRESH) {\n+                    entry.flags |= CCoinsCacheEntry::FRESH;\n                 }\n-            } else {\n-                // Assert that the child cache entry was not marked FRESH if the\n-                // parent cache entry has unspent outputs. If this ever happens,\n-                // it means the FRESH flag was misapplied and there is a logic\n-                // error in the calling code.\n-                if ((it->second.flags & CCoinsCacheEntry::FRESH) && !itUs->second.coin.IsSpent())\n-                    throw std::logic_error(\"FRESH flag misapplied to cache entry for base transaction with spendable outputs\");\n+            }\n+        } else {\n+            // Assert that the child cache entry was not marked FRESH if the\n+            // parent cache entry has unspent outputs. If this ever happens,\n+            // it means the FRESH flag was misapplied and there is a logic\n+            // error in the calling code.\n+            if ((it->second.flags & CCoinsCacheEntry::FRESH) && !itUs->second.coin.IsSpent()) {\n+                throw std::logic_error(\"FRESH flag misapplied to cache entry for base transaction with spendable outputs\");\n+            }\n \n-                // Found the entry in the parent cache\n-                if ((itUs->second.flags & CCoinsCacheEntry::FRESH) && it->second.coin.IsSpent()) {\n-                    // The grandparent does not have an entry, and the child is\n-                    // modified and being pruned. This means we can just delete\n-                    // it from the parent.\n-                    cachedCoinsUsage -= itUs->second.coin.DynamicMemoryUsage();\n-                    cacheCoins.erase(itUs);\n-                } else {\n-                    // A normal modification.\n-                    cachedCoinsUsage -= itUs->second.coin.DynamicMemoryUsage();\n-                    itUs->second.coin = std::move(it->second.coin);\n-                    cachedCoinsUsage += itUs->second.coin.DynamicMemoryUsage();\n-                    itUs->second.flags |= CCoinsCacheEntry::DIRTY;\n-                    // NOTE: It is possible the child has a FRESH flag here in\n-                    // the event the entry we found in the parent is pruned. But\n-                    // we must not copy that FRESH flag to the parent as that\n-                    // pruned state likely still needs to be communicated to the\n-                    // grandparent.\n-                }\n+            // Found the entry in the parent cache\n+            if ((itUs->second.flags & CCoinsCacheEntry::FRESH) && it->second.coin.IsSpent()) {\n+                // The grandparent does not have an entry, and the child is\n+                // modified and being pruned. This means we can just delete\n+                // it from the parent.\n+                cachedCoinsUsage -= itUs->second.coin.DynamicMemoryUsage();\n+                cacheCoins.erase(itUs);\n+            } else {\n+                // A normal modification.\n+                cachedCoinsUsage -= itUs->second.coin.DynamicMemoryUsage();\n+                itUs->second.coin = std::move(it->second.coin);\n+                cachedCoinsUsage += itUs->second.coin.DynamicMemoryUsage();\n+                itUs->second.flags |= CCoinsCacheEntry::DIRTY;\n+                // NOTE: It is possible the child has a FRESH flag here in\n+                // the event the entry we found in the parent is pruned. But\n+                // we must not copy that FRESH flag to the parent as that\n+                // pruned state likely still needs to be communicated to the\n+                // grandparent.\n             }\n         }\n-        CCoinsMap::iterator itOld = it++;\n-        mapCoins.erase(itOld);\n     }\n     hashBlock = hashBlockIn;\n     return true;"
      }
    ]
  }
]