dongcarl,2019-08-05 17:44:24,"`grep`ped for all usages, doesn't seem to be any value-less `#define`s.\n\nSome notes while exploring:\n`gcc`'s `-DFOOBAR` flag actually defines `FOOBAR` as `1`, meaning that `#if FOOBAR` will be true, good default, and we should probably eliminate value-less `#define`s over time (not urgent)\n\n@Alko89 Would you be able to use https://github.com/bitcoin-core/bitcoin-maintainer-tools/blob/mas",https://github.com/bitcoin/bitcoin/pull/16547#issuecomment-518330921,518330921,
Alko89,2019-08-05 18:43:35,"@dongcarl I have executed the script you provided with this and previous commit, then compared them with: \n\n`% git diff -W --word-diff /tmp/compare/7f3c669ccf4d97e7aa52722b8549bd474791eb33 /tmp/compare/e55444a2a8a2b4a378e6d42b7bf73d13492a5716`\n\nand get an empty output.",https://github.com/bitcoin/bitcoin/pull/16547#issuecomment-518351752,518351752,
dongcarl,2019-08-05 21:45:09,@fanquake Is this how `build-for-compare.py` is supposed to be used? (haven't used before),https://github.com/bitcoin/bitcoin/pull/16547#issuecomment-518412692,518412692,
fanquake,2019-08-06 02:42:30,"@dongcarl Yes. I've also run it against this PR (7f3c669ccf4d97e7aa52722b8549bd474791eb33), and it's previous commit (e55444a2a8a2b4a378e6d42b7bf73d13492a5716), and didn't see any difference in the binaries:\n\n```bash\nsha256sum /tmp/compare/*.stripped\n7eb28b0d46d4fc833b6f6b026f8d4ecd20f733f096ded4c0d0f8bada3e6a7944  /tmp/compare/bitcoin-qt.7f3c669ccf4d97e7aa52722b8549bd474791eb33.stripped\",https://github.com/bitcoin/bitcoin/pull/16547#issuecomment-518474764,518474764,
practicalswift,2019-08-06 09:25:01,"Concept ACK\n\nThanks for tackling this!",https://github.com/bitcoin/bitcoin/pull/16547#issuecomment-518588486,518588486,
dongcarl,2019-08-06 14:59:53,"Yup! See the BUFFSIZE example here: http://gcc.gnu.org/onlinedocs/gcc-3.0.1/cpp_4.html#SEC39\n\nOn Tue, Aug 6, 2019 at 10:56 AM, MarcoFalke <notifications@github.com> wrote:\n\n> @MarcoFalke commented on this pull request.\n>\n> ---------------------------------------------------------------\n>\n> In [src/bench/verify_script.cpp](https://github.com/bitcoin/bitcoin/pull/16547#discussion_r311108376)",https://github.com/bitcoin/bitcoin/pull/16547#issuecomment-518708033,518708033,
MarcoFalke,2019-08-06 15:05:59,"ACK 7f3c669ccf4d97e7aa52722b8549bd474791eb33 (also checked that gcc and clang produce the same bitcoind before and after\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nACK 7f3c669ccf4d97e7aa52722b8549bd474791eb33 (also checked that gcc and clang produce the same bitcoind before and after\n-----BEGIN P",https://github.com/bitcoin/bitcoin/pull/16547#issuecomment-518710753,518710753,
MarcoFalke,2019-08-06 15:07:36,"What about stuff like this:\n\n```\nsrc/crypto/sha256_sse41.cpp:#ifdef ENABLE_SSE41\n",https://github.com/bitcoin/bitcoin/pull/16547#issuecomment-518711420,518711420,
dongcarl,2019-08-06 15:26:51,"> What about stuff like this:\n> \n> ```\n> src/crypto/sha256_sse41.cpp:#ifdef ENABLE_SSE41\n> ```\n\nNot sure what you're asking, but `#if defined MACRO` is precisely equivalent to `#ifdef MACRO`, so it seems like this should also be changed to `#if`. @Alko89 could you make sure that's the case?",https://github.com/bitcoin/bitcoin/pull/16547#issuecomment-518719749,518719749,
MarcoFalke,2019-08-06 15:38:27,"Yeah, if this is changed, it should be done once and for all.",https://github.com/bitcoin/bitcoin/pull/16547#issuecomment-518724693,518724693,
Alko89,2019-08-06 16:18:23,"I have bean reading about if defines in the gcc doc @dongcarl provided. In if chapter it is also stated that undefined macros are interpreted as having the value of 0. I guess in that case most of `#if defines` (and also `#ifdef`) are not required.\n\nhttps://gcc.gnu.org/onlinedocs/gcc-3.0.1/cpp_4.html#SEC38\n\nAlso the -Wundef option causes gcc to trigger warnings if it encounters an identifi",https://github.com/bitcoin/bitcoin/pull/16547#issuecomment-518740586,518740586,
Alko89,2019-08-06 18:23:41,"I will need more time investigating this.\n\nWhat about OS and architecture specific macros like `WIN32` or `MACOS` and `__amd64__`? The latter is defined as 1 for specific architecture, but might be good to leave as is for better readability?\n\nAs for OS specific macros I'm testing on Linux and would need someone to check how these macros are defined on other platforms.",https://github.com/bitcoin/bitcoin/pull/16547#issuecomment-518787204,518787204,
Alko89,2019-08-06 18:56:36,"> > What about stuff like this:\n> > ```\n> > src/crypto/sha256_sse41.cpp:#ifdef ENABLE_SSE41\n> > ```\n> \n> Not sure what you're asking, but `#if defined MACRO` is precisely equivalent to `#ifdef MACRO`, so it seems like this should also be changed to `#if`. @Alko89 could you make sure that's the case?\n\nCan confirm that `#ifdef MACRO` and `#if defined MACRO` makes no difference. For cas",https://github.com/bitcoin/bitcoin/pull/16547#issuecomment-518799055,518799055,
DrahtBot,2019-08-06 22:20:05,<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.,https://github.com/bitcoin/bitcoin/pull/16547#issuecomment-518865321,518865321,
promag,2019-08-06 22:25:34,Could this be a scripted diff?,https://github.com/bitcoin/bitcoin/pull/16547#issuecomment-518866624,518866624,
fanquake,2019-08-12 04:13:27,@Alko89 Is this now ready for review?,https://github.com/bitcoin/bitcoin/pull/16547#issuecomment-520294347,520294347,
Alko89,2019-08-19 20:13:48,you can close this PR for now. I'll create a new one when I'm done.,https://github.com/bitcoin/bitcoin/pull/16547#issuecomment-522735491,522735491,
MarcoFalke,2019-08-06 14:52:39,This is not defined when `./configure --with-libs=no`. So it will default to `0` or something?,https://github.com/bitcoin/bitcoin/pull/16547#discussion_r311108376,311108376,src/bench/verify_script.cpp
