[
  {
    "sha": "10caa3e4b167dae26d52838ad19f8c137c9c0a14",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMGNhYTNlNGIxNjdkYWUyNmQ1MjgzOGFkMTlmOGMxMzdjOWMwYTE0",
    "commit": {
      "author": {
        "name": "klementtan",
        "email": "klementtan@gmail.com",
        "date": "2021-06-19T08:51:55Z"
      },
      "committer": {
        "name": "klementtan",
        "email": "klementtan@gmail.com",
        "date": "2021-06-19T09:00:46Z"
      },
      "message": "refactor: CheckFinalTx pass by reference instead of pointer",
      "tree": {
        "sha": "1e35d6f4b5ba6b5f8cec2b92540ceb2a34c589e3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1e35d6f4b5ba6b5f8cec2b92540ceb2a34c589e3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/10caa3e4b167dae26d52838ad19f8c137c9c0a14",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEdzBbFgjg1umjfk4MZcjk/steXaIFAmDNsksACgkQZcjk/ste\nXaLhtw/+KLYCSZPKE4hzajUK319HC1b4ByOcVUmZIn4RZTQyBwKNsFNT1c+2itQ4\nmeeJL60XRNCrMIKlKGGnXydg2a+1ijqICE/Hor0G2m4grrRvwLWVP66QszTaQPms\nNIm2e8fhy/8xpaQGVXVXYNkwRmNPGi4aZzBADwtRlJEIntkdNx2CwnocfJuMit6l\nlWB8wxGU6zkkRjr3fw/RGEwO0GzIo3reC1ZEo3aBXWbzIdgcDFo/uoc3Wd6t3szH\nYGsHprJNfc09KxG1jemWeXdkhIwXqz8s0Pqj+n05/jigNtHD2vzNS2hwoVOzQ2VO\nlCUGPBmMK6h4jQTI33j3ancnHLNPg+Ve6XGB0cIjcZCHPhk6cgBZku3n6owG/qIS\nUKkefCeNgsGWO1ONpTrmnNMJxRTJKNZPCA83TVt3dxZ+EnNTzB7zCF8u9TN7Ylp1\nPKQPT/+cl0NugEl9jXIZykgvqqjUVLB6XQZNP+hDaBg2UcB/9PirP8PTtlZmxSDF\nblk8YInvK5fZy2u9ssAX3WIkqS93SXbEKguqm5Xf3waX9YudZ9/z9QDKLWQn6Vdx\n3TuBwC3VaVo0R6EixQIzBLjGihzL0pFkKK4VUCsKiyUEPDhgjQYGt1uQ+u4QjFSm\nckC4IaVwhweDFTsFAE11lvWKHs2o+X7fQU8TZOQNmseKyMB+4ik=\n=Tcbb\n-----END PGP SIGNATURE-----",
        "payload": "tree 1e35d6f4b5ba6b5f8cec2b92540ceb2a34c589e3\nparent 0f47e01d7d491fd240f4b14302bf9edf4f05142c\nauthor klementtan <klementtan@gmail.com> 1624092715 +0800\ncommitter klementtan <klementtan@gmail.com> 1624093246 +0800\n\nrefactor: CheckFinalTx pass by reference instead of pointer\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10caa3e4b167dae26d52838ad19f8c137c9c0a14",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/10caa3e4b167dae26d52838ad19f8c137c9c0a14",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10caa3e4b167dae26d52838ad19f8c137c9c0a14/comments",
    "author": {
      "login": "klementtan",
      "id": 49265907,
      "node_id": "MDQ6VXNlcjQ5MjY1OTA3",
      "avatar_url": "https://avatars.githubusercontent.com/u/49265907?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/klementtan",
      "html_url": "https://github.com/klementtan",
      "followers_url": "https://api.github.com/users/klementtan/followers",
      "following_url": "https://api.github.com/users/klementtan/following{/other_user}",
      "gists_url": "https://api.github.com/users/klementtan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/klementtan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/klementtan/subscriptions",
      "organizations_url": "https://api.github.com/users/klementtan/orgs",
      "repos_url": "https://api.github.com/users/klementtan/repos",
      "events_url": "https://api.github.com/users/klementtan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/klementtan/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "klementtan",
      "id": 49265907,
      "node_id": "MDQ6VXNlcjQ5MjY1OTA3",
      "avatar_url": "https://avatars.githubusercontent.com/u/49265907?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/klementtan",
      "html_url": "https://github.com/klementtan",
      "followers_url": "https://api.github.com/users/klementtan/followers",
      "following_url": "https://api.github.com/users/klementtan/following{/other_user}",
      "gists_url": "https://api.github.com/users/klementtan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/klementtan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/klementtan/subscriptions",
      "organizations_url": "https://api.github.com/users/klementtan/orgs",
      "repos_url": "https://api.github.com/users/klementtan/repos",
      "events_url": "https://api.github.com/users/klementtan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/klementtan/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0f47e01d7d491fd240f4b14302bf9edf4f05142c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f47e01d7d491fd240f4b14302bf9edf4f05142c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0f47e01d7d491fd240f4b14302bf9edf4f05142c"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 12,
      "deletions": 13
    },
    "files": [
      {
        "sha": "de93c3f75b120a03818d2b3ca89fb7b8efbefe8c",
        "filename": "src/node/interfaces.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10caa3e4b167dae26d52838ad19f8c137c9c0a14/src/node/interfaces.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10caa3e4b167dae26d52838ad19f8c137c9c0a14/src/node/interfaces.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/interfaces.cpp?ref=10caa3e4b167dae26d52838ad19f8c137c9c0a14",
        "patch": "@@ -464,7 +464,7 @@ class ChainImpl : public Chain\n     bool checkFinalTx(const CTransaction& tx) override\n     {\n         LOCK(cs_main);\n-        return CheckFinalTx(chainman().ActiveChain().Tip(), tx);\n+        return CheckFinalTx(*chainman().ActiveChain().Tip(), tx);\n     }\n     std::optional<int> findLocatorFork(const CBlockLocator& locator) override\n     {"
      },
      {
        "sha": "c204ecda815098a383333af76d365fab2e31d66b",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10caa3e4b167dae26d52838ad19f8c137c9c0a14/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10caa3e4b167dae26d52838ad19f8c137c9c0a14/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=10caa3e4b167dae26d52838ad19f8c137c9c0a14",
        "patch": "@@ -438,7 +438,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.nLockTime = 0;\n     hash = tx.GetHash();\n     m_node.mempool->addUnchecked(entry.Fee(HIGHFEE).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n-    BOOST_CHECK(CheckFinalTx(m_node.chainman->ActiveChain().Tip(), CTransaction(tx), flags)); // Locktime passes\n+    BOOST_CHECK(CheckFinalTx(*m_node.chainman->ActiveChain().Tip(), CTransaction(tx), flags)); // Locktime passes\n     BOOST_CHECK(!TestSequenceLocks(CTransaction(tx), flags)); // Sequence locks fail\n \n     {\n@@ -452,7 +452,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     prevheights[0] = baseheight + 2;\n     hash = tx.GetHash();\n     m_node.mempool->addUnchecked(entry.Time(GetTime()).FromTx(tx));\n-    BOOST_CHECK(CheckFinalTx(m_node.chainman->ActiveChain().Tip(), CTransaction(tx), flags)); // Locktime passes\n+    BOOST_CHECK(CheckFinalTx(*m_node.chainman->ActiveChain().Tip(), CTransaction(tx), flags)); // Locktime passes\n     BOOST_CHECK(!TestSequenceLocks(CTransaction(tx), flags)); // Sequence locks fail\n \n     for (int i = 0; i < CBlockIndex::nMedianTimeSpan; i++)\n@@ -473,7 +473,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.nLockTime = m_node.chainman->ActiveChain().Tip()->nHeight + 1;\n     hash = tx.GetHash();\n     m_node.mempool->addUnchecked(entry.Time(GetTime()).FromTx(tx));\n-    BOOST_CHECK(!CheckFinalTx(m_node.chainman->ActiveChain().Tip(), CTransaction(tx), flags)); // Locktime fails\n+    BOOST_CHECK(!CheckFinalTx(*m_node.chainman->ActiveChain().Tip(), CTransaction(tx), flags)); // Locktime fails\n     BOOST_CHECK(TestSequenceLocks(CTransaction(tx), flags)); // Sequence locks pass\n     BOOST_CHECK(IsFinalTx(CTransaction(tx), m_node.chainman->ActiveChain().Tip()->nHeight + 2, m_node.chainman->ActiveChain().Tip()->GetMedianTimePast())); // Locktime passes on 2nd block\n \n@@ -484,7 +484,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     prevheights[0] = baseheight + 4;\n     hash = tx.GetHash();\n     m_node.mempool->addUnchecked(entry.Time(GetTime()).FromTx(tx));\n-    BOOST_CHECK(!CheckFinalTx(m_node.chainman->ActiveChain().Tip(), CTransaction(tx), flags)); // Locktime fails\n+    BOOST_CHECK(!CheckFinalTx(*m_node.chainman->ActiveChain().Tip(), CTransaction(tx), flags)); // Locktime fails\n     BOOST_CHECK(TestSequenceLocks(CTransaction(tx), flags)); // Sequence locks pass\n     BOOST_CHECK(IsFinalTx(CTransaction(tx), m_node.chainman->ActiveChain().Tip()->nHeight + 2, m_node.chainman->ActiveChain().Tip()->GetMedianTimePast() + 1)); // Locktime passes 1 second later\n \n@@ -493,7 +493,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     prevheights[0] = m_node.chainman->ActiveChain().Tip()->nHeight + 1;\n     tx.nLockTime = 0;\n     tx.vin[0].nSequence = 0;\n-    BOOST_CHECK(CheckFinalTx(m_node.chainman->ActiveChain().Tip(), CTransaction(tx), flags)); // Locktime passes\n+    BOOST_CHECK(CheckFinalTx(*m_node.chainman->ActiveChain().Tip(), CTransaction(tx), flags)); // Locktime passes\n     BOOST_CHECK(TestSequenceLocks(CTransaction(tx), flags)); // Sequence locks pass\n     tx.vin[0].nSequence = 1;\n     BOOST_CHECK(!TestSequenceLocks(CTransaction(tx), flags)); // Sequence locks fail"
      },
      {
        "sha": "ac4c6a9f989501995cfb5a593f668817dca953b0",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10caa3e4b167dae26d52838ad19f8c137c9c0a14/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10caa3e4b167dae26d52838ad19f8c137c9c0a14/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=10caa3e4b167dae26d52838ad19f8c137c9c0a14",
        "patch": "@@ -515,7 +515,7 @@ void CTxMemPool::removeForReorg(CChainState& active_chainstate, int flags)\n         LockPoints lp = it->GetLockPoints();\n         bool validLP =  TestLockPointValidity(active_chainstate.m_chain, &lp);\n         CCoinsViewMemPool view_mempool(&active_chainstate.CoinsTip(), *this);\n-        if (!CheckFinalTx(active_chainstate.m_chain.Tip(), tx, flags)\n+        if (!CheckFinalTx(*active_chainstate.m_chain.Tip(), tx, flags)\n             || !CheckSequenceLocks(active_chainstate.m_chain.Tip(), view_mempool, tx, flags, &lp, validLP)) {\n             // Note if CheckSequenceLocks fails the LockPoints may still be invalid\n             // So it's critical that we remove the tx and not depend on the LockPoints."
      },
      {
        "sha": "330b3f035270d01ba0ec38bbc5b76350fd8383e3",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10caa3e4b167dae26d52838ad19f8c137c9c0a14/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10caa3e4b167dae26d52838ad19f8c137c9c0a14/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=10caa3e4b167dae26d52838ad19f8c137c9c0a14",
        "patch": "@@ -177,10 +177,9 @@ bool CheckInputScripts(const CTransaction& tx, TxValidationState& state,\n                        std::vector<CScriptCheck>* pvChecks = nullptr)\n                        EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n-bool CheckFinalTx(const CBlockIndex* active_chain_tip, const CTransaction &tx, int flags)\n+bool CheckFinalTx(const CBlockIndex& active_chain_tip, const CTransaction& tx, int flags)\n {\n     AssertLockHeld(cs_main);\n-    assert(active_chain_tip); // TODO: Make active_chain_tip a reference\n \n     // By convention a negative value for flags indicates that the\n     // current network-enforced consensus rules should be used. In\n@@ -196,15 +195,15 @@ bool CheckFinalTx(const CBlockIndex* active_chain_tip, const CTransaction &tx, i\n     // evaluated is what is used. Thus if we want to know if a\n     // transaction can be part of the *next* block, we need to call\n     // IsFinalTx() with one more than active_chain_tip.Height().\n-    const int nBlockHeight = active_chain_tip->nHeight + 1;\n+    const int nBlockHeight = active_chain_tip.nHeight + 1;\n \n     // BIP113 requires that time-locked transactions have nLockTime set to\n     // less than the median time of the previous block they're contained in.\n     // When the next block is created its previous block will be the current\n     // chain tip, so we use that to calculate the median time passed to\n     // IsFinalTx() if LOCKTIME_MEDIAN_TIME_PAST is set.\n     const int64_t nBlockTime = (flags & LOCKTIME_MEDIAN_TIME_PAST)\n-                             ? active_chain_tip->GetMedianTimePast()\n+                             ? active_chain_tip.GetMedianTimePast()\n                              : GetAdjustedTime();\n \n     return IsFinalTx(tx, nBlockHeight, nBlockTime);\n@@ -583,7 +582,7 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     // Only accept nLockTime-using transactions that can be mined in the next\n     // block; we don't want our mempool filled up with transactions that can't\n     // be mined yet.\n-    if (!CheckFinalTx(m_active_chainstate.m_chain.Tip(), tx, STANDARD_LOCKTIME_VERIFY_FLAGS))\n+    if (!CheckFinalTx(*m_active_chainstate.m_chain.Tip(), tx, STANDARD_LOCKTIME_VERIFY_FLAGS))\n         return state.Invalid(TxValidationResult::TX_PREMATURE_SPEND, \"non-final\");\n \n     // is it already in the memory pool?"
      },
      {
        "sha": "7d347fbb28f05ec55df56178bffe43090b935e28",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10caa3e4b167dae26d52838ad19f8c137c9c0a14/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10caa3e4b167dae26d52838ad19f8c137c9c0a14/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=10caa3e4b167dae26d52838ad19f8c137c9c0a14",
        "patch": "@@ -260,7 +260,7 @@ void UpdateCoins(const CTransaction& tx, CCoinsViewCache& inputs, int nHeight);\n  *\n  * See consensus/consensus.h for flag definitions.\n  */\n-bool CheckFinalTx(const CBlockIndex* active_chain_tip, const CTransaction &tx, int flags = -1) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+bool CheckFinalTx(const CBlockIndex& active_chain_tip, const CTransaction& tx, int flags = -1) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n /**\n  * Test whether the LockPoints height and time are still valid on the current chain"
      }
    ]
  }
]