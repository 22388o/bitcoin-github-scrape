achow101,2020-08-27 16:55:42,ACK c4deddb3c5806d524e71c344be083b8bd6ea50aa,https://github.com/bitcoin/bitcoin/pull/19793#issuecomment-682070088,682070088,
ryanofsky,2021-09-30 18:44:55,"> Closing this since it's out of date and has some odd behaviors. Things it would be nice to do if someone wants to clean this code up:\n> \n>1. Replace assert(new_tx) with error handling that triggers the [`CWallet::Create` ""Wallet Corrupted""](https://github.com/bitcoin/bitcoin/blob/b46f37ba5ec4fbd2e4c82343fc4f353d7f34837a/src/wallet/wallet.cpp#L3824) error\n> \n>2. Fix the ""This error is rec",https://github.com/bitcoin/bitcoin/pull/19793#issuecomment-931573792,931573792,
MarcoFalke,2020-08-25 08:41:05,Isn't zapwallettxs about to be removed?,https://github.com/bitcoin/bitcoin/pull/19793#discussion_r476279364,476279364,src/wallet/walletdb.cpp
achow101,2020-08-25 15:42:19,"I guess here's an argument to keep it.\n\nThe question is really whether it is possible to hit this error in normal operation.",https://github.com/bitcoin/bitcoin/pull/19793#discussion_r476548360,476548360,src/wallet/walletdb.cpp
MarcoFalke,2020-08-25 16:21:43,"The test #19078 is hitting it. Does salvagewallet count as ""normal operation""? If not, it should probably be removed.",https://github.com/bitcoin/bitcoin/pull/19793#discussion_r476575086,476575086,src/wallet/walletdb.cpp
achow101,2020-08-25 16:33:50,"Looking at it further, it is surprising to me that #19078 hits this error because it shouldn't have any transactions left after the salvage. Salvage is supposed to only extract keys. This indicates that salvage has an additional bug somewhere.",https://github.com/bitcoin/bitcoin/pull/19793#discussion_r476583114,476583114,src/wallet/walletdb.cpp
achow101,2020-08-25 16:43:16,"Oh, the error is because `ReadKeyValue` is called by salvage so it's happening during the salvage, rather than during the loading of the wallet post-salvage.",https://github.com/bitcoin/bitcoin/pull/19793#discussion_r476588885,476588885,src/wallet/walletdb.cpp
achow101,2020-08-25 17:30:30,#19805 is a fix to #19078's failure that sidesteps this problem entirely.,https://github.com/bitcoin/bitcoin/pull/19793#discussion_r476620525,476620525,src/wallet/walletdb.cpp
ryanofsky,2020-08-25 18:14:08,"re: https://github.com/bitcoin/bitcoin/pull/19793#discussion_r476588885\n\n> #19805 is a fix to #19078's failure that sidesteps this problem entirely.\n\n#19805 seems like a better way to fix the test failure. In case we want to merge this PR as well to remove the bad assert https://github.com/bitcoin/bitcoin/pull/19793#pullrequestreview-474262517, I updated the comment, just changing ""There's",https://github.com/bitcoin/bitcoin/pull/19793#discussion_r476645340,476645340,src/wallet/walletdb.cpp
MarcoFalke,2020-10-07 11:29:09,"should the other corruption reasons also latch to true?\n\n`wss.corrupt` would never be set to false, so the error `TOO_NEW` is translated to the error `CORRUPT` (after at least one CORRUPT error).\n\nWith a lost key this doesn't seem to happen and the error might be rewritten to TOO_NEW.\n\nProbably doesn't matter in practice, but I wanted to ask to be sure.",https://github.com/bitcoin/bitcoin/pull/19793#discussion_r500937452,500937452,src/wallet/walletdb.cpp
ryanofsky,2020-10-21 22:53:30,"re: https://github.com/bitcoin/bitcoin/pull/19793#discussion_r500937452\n\n> should the other corruption reasons also latch to true?\n> \n> `wss.corrupt` would never be set to false, so the error `TOO_NEW` is translated to the error `CORRUPT` (after at least one CORRUPT error).\n> \n> With a lost key this doesn't seem to happen and the error might be rewritten to TOO_NEW.\n> \n> Probably d",https://github.com/bitcoin/bitcoin/pull/19793#discussion_r509780060,509780060,src/wallet/walletdb.cpp
luke-jr,2020-10-25 14:04:17,"A corrupt/missing transaction isn't supposed to follow this path, but rather the one below which simply triggers a rescan.",https://github.com/bitcoin/bitcoin/pull/19793#discussion_r511601374,511601374,src/wallet/walletdb.cpp
