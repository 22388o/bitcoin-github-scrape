[
  {
    "sha": "c4deddb3c5806d524e71c344be083b8bd6ea50aa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNGRlZGRiM2M1ODA2ZDUyNGU3MWMzNDRiZTA4M2I4YmQ2ZWE1MGFh",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-07-22T16:33:12Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-08-14T13:12:44Z"
      },
      "message": "Return false instead of asserting when a loaded tx isn't new\n\nReturning false will give us a recoverable error instead of killing the\nnode entirely. In that situation, the wallet is still recoverable by\ndeleting all txs and rescanning.\n\nCo-authored-by: Russell Yanofsky <russ@yanofsky.org>",
      "tree": {
        "sha": "61a4e7ebc8a0dc023854f0b047170fde8241b912",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/61a4e7ebc8a0dc023854f0b047170fde8241b912"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c4deddb3c5806d524e71c344be083b8bd6ea50aa",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c4deddb3c5806d524e71c344be083b8bd6ea50aa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c4deddb3c5806d524e71c344be083b8bd6ea50aa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c4deddb3c5806d524e71c344be083b8bd6ea50aa/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "30dd562fd2c58536fa026fff9853b8d825216b01",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/30dd562fd2c58536fa026fff9853b8d825216b01",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/30dd562fd2c58536fa026fff9853b8d825216b01"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 8,
      "deletions": 2
    },
    "files": [
      {
        "sha": "7e89ee2370ae6db1623e24de82d6121b7aa4eb75",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4deddb3c5806d524e71c344be083b8bd6ea50aa/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4deddb3c5806d524e71c344be083b8bd6ea50aa/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=c4deddb3c5806d524e71c344be083b8bd6ea50aa",
        "patch": "@@ -256,6 +256,7 @@ class CWalletScanState {\n     std::map<std::pair<uint256, CKeyID>, CKey> m_descriptor_keys;\n     std::map<std::pair<uint256, CKeyID>, std::pair<CPubKey, std::vector<unsigned char>>> m_descriptor_crypt_keys;\n     std::map<uint160, CHDChain> m_hd_chains;\n+    bool corrupt = false;\n \n     CWalletScanState() {\n     }\n@@ -286,7 +287,12 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             // LoadToWallet call below creates a new CWalletTx that fill_wtx\n             // callback fills with transaction metadata.\n             auto fill_wtx = [&](CWalletTx& wtx, bool new_tx) {\n-                assert(new_tx);\n+                if (!new_tx) {\n+                    // There's some corruption here since the tx we just tried to load was already in the wallet\n+                    // This error is recoverable with zapwallettxs and is not a major failure\n+                    wss.corrupt = true;\n+                    return false;\n+                }\n                 ssValue >> wtx;\n                 if (wtx.GetHash() != hash)\n                     return false;\n@@ -726,7 +732,7 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n             {\n                 // losing keys is considered a catastrophic error, anything else\n                 // we assume the user can live with:\n-                if (IsKeyType(strType) || strType == DBKeys::DEFAULTKEY) {\n+                if (wss.corrupt || IsKeyType(strType) || strType == DBKeys::DEFAULTKEY) {\n                     result = DBErrors::CORRUPT;\n                 } else if (strType == DBKeys::FLAGS) {\n                     // reading the wallet flags can only fail if unknown flags are present"
      }
    ]
  }
]