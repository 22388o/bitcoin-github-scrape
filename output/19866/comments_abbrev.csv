laanwj,2020-09-04 06:37:39,"Concept ACK, thanks for working on this, I think this is a great way to have more visibility into internal metrics (for diagnosing issues, and statistics), without intrusive changes, or having to hand-roll all kind of custom tooling.",https://github.com/bitcoin/bitcoin/pull/19866#issuecomment-686945746,686945746,
practicalswift,2020-09-04 06:53:23,Concept ACK: more tooling for allowing visibility into internals for power users is good. I don't think this Linux only improvement removes the need for #19509 at all: I would use both in different contexts :),https://github.com/bitcoin/bitcoin/pull/19866#issuecomment-686952856,686952856,
DrahtBot,2020-09-04 08:26:17,<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.,https://github.com/bitcoin/bitcoin/pull/19866#issuecomment-687005177,687005177,
jonatack,2020-09-04 14:53:00,"Concept ACK, will review/test.",https://github.com/bitcoin/bitcoin/pull/19866#issuecomment-687197225,687197225,
jb55,2020-09-04 14:54:46,@jonatack thanks! you need `systemtap-sdt-dev` if you're on debian-like which I still need to add to the build. This just provides the sdt header file.,https://github.com/bitcoin/bitcoin/pull/19866#issuecomment-687199010,687199010,
jonatack,2020-09-04 14:58:25,"> @jonatack thanks! you need `systemtap-sdt-dev` if you're on debian-like which I still need to add to the build. This just provides the sdt header file.\n\nThanks for the heads-up! which probably saved me some time even though you mentioned it in the PR description. Done: `sudo apt install systemtap-sdt-dev`",https://github.com/bitcoin/bitcoin/pull/19866#issuecomment-687201538,687201538,
laanwj,2020-09-04 18:21:52,"Could list the probe points in gdb:\n```\n(gdb) info probes\nType Provider            Name            Where              Semaphore Object                                     \nstap CChainState         ConnectBlock    0x0000000000294636           /…/bitcoin/src/bitcoind \nstap CConnman            PushMessage     0x000000000009ab40           /…/bitcoin/src/bitcoind \nstap PeerLogicValidation P",https://github.com/bitcoin/bitcoin/pull/19866#issuecomment-687308403,687308403,
laanwj,2020-09-04 18:41:17,"I'm trying the first example, but it complains about a missing function `buf`. Any idea? Maybe too old bptrace version?\n```\n# uname -r\n5.4.0-42-generic\n# bpftrace --version\nbpftrace v0.9.4\n# bpftrace -p $(cat ~user/.bitcoin/bitcoind.pid) ../network-messages.bt \n../network-messages.bt:13:11-14: ERROR: Unknown function: buf\n  $data = buf(arg1,arg2);\n          ~~~\n```",https://github.com/bitcoin/bitcoin/pull/19866#issuecomment-687317120,687317120,
jb55,2020-09-04 18:58:20,"""Wladimir J. van der Laan"" <notifications@github.com> writes:\n\n> I'm trying the first example, but it complains about a missing function `buf`. Any idea? Maybe too old bptrace version?\n\nyeah buf is a new thing from bpftrace 0.11 and bcc 0.16.0, you can just\nremove that if you're testing.\n\nbpftrace is a pretty high level thing, you can write lower level bpf\nprograms with bcc, I haven't trie",https://github.com/bitcoin/bitcoin/pull/19866#issuecomment-687324727,687324727,
jb55,2020-09-04 19:04:11,"> Edit: yes it is necessary to run bpftrace as root,because it uses some privileged kernel functionality. It's probably not necessary to run bitcoind as root though.\n\nright, you can run bitcoin without root and then attach to it with bpftrace afterwards.",https://github.com/bitcoin/bitcoin/pull/19866#issuecomment-687327650,687327650,
jb55,2020-09-04 19:08:14,"> Could list the probe points in gdb\n\nI wasn't sure how we should name the probes, right now I just have the mapped to class::method but perhaps they could be more abstract like `validation:connect_block`, `net:push_message`, `net:process_message` ?",https://github.com/bitcoin/bitcoin/pull/19866#issuecomment-687329421,687329421,
laanwj,2020-09-04 19:24:08,"> yeah buf is a new thing from bpftrace 0.11 and bcc 0.16.0, you can just remove that if you're testing.\n\nGood to know! I've built bpftrace [from git](https://github.com/iovisor/bpftrace) and it works now (which is version `bpftrace v0.11.0`, a lot newer!), thanks.\n\n> I wasn't sure how we should name the probes, right now I just have the mapped to class::method but perhaps they could be mo",https://github.com/bitcoin/bitcoin/pull/19866#issuecomment-687336319,687336319,
laanwj,2020-09-05 12:13:25,"For some extra inspiration with regard to tracepoints, we might want to look at the [statoshi diff](https://github.com/jlopp/statoshi/compare/1b90a7b61a37d450bbe5b485dcc9b8c591567e0d..28b88353a78ae19e3c5379bbda6b72f4fef65a8c).\n(I think we can convert most of the statsd use to tracepoints, or sets of two tracepoints in the case of timing ones)",https://github.com/bitcoin/bitcoin/pull/19866#issuecomment-687602059,687602059,
jb55,2020-09-05 17:29:15,"> I think I prefer that. It has the probe point name describe more accurately the action taken and data that is traced.\n\ndone, renamed to `net:process_message,push_message` and `net:connect_block`\n\n> BTW: is it possible to do binary logging with bpftrace or bcc? (e.g. to provide a similar output to #19509). Or is it always text?\n\nI haven't been able to figure that out with bpftrace but",https://github.com/bitcoin/bitcoin/pull/19866#issuecomment-687639341,687639341,
laanwj,2020-09-06 12:30:37,"> I haven't been able to figure that out with bpftrace but I'm going to try put together a bcc examples of this. Perhaps we should have a docs/tracing.md that documents the tracepoints with some examples?\n\nGreat idea. It definitely makes sense to document this well so that people know how to use it. eBPF use with applications is not that common yet, we can assume people to just know.\n\nHavi",https://github.com/bitcoin/bitcoin/pull/19866#issuecomment-687777273,687777273,
jb55,2020-09-08 22:07:38,"So this is pretty incredible: We may only need to use static traces in a few places. For things like ConnectBlock we can use uprobes (no code changes required!):\n\n```\n$ objdump -CtT src/bitcoind | grep ConnectBlock\n00000000002db020 g     F .text	0000000000002a66              CChainState::ConnectBlock(CBlock const&, BlockValidationState&, CBlockIndex*, CCoinsViewCache&, CChainParams const&,",https://github.com/bitcoin/bitcoin/pull/19866#issuecomment-689162173,689162173,
laanwj,2020-10-27 10:03:13,"That's neat!\n\nBut I think the nice thing about documented static probes is that it relies less on the specific code structure and more on conceptual events. This would allow for e.g. collecting statistics (things like statoshi) with a (semi) stable interface, without constantly rebasing.",https://github.com/bitcoin/bitcoin/pull/19866#issuecomment-717128433,717128433,
jb55,2020-10-27 16:28:39,"> That's neat!\n>\n> But I think the nice thing about documented static probes is that it\n> relies less on the specific code structure and more on conceptual\n> events. This would allow for e.g. collecting statistics (things like\n> statoshi) with a (semi) stable interface, without constantly rebasing.\n\nyup agreed, uprobes are a neat trick, but semi-stable static probes that\nyou can depend on ",https://github.com/bitcoin/bitcoin/pull/19866#issuecomment-717364757,717364757,
laanwj,2020-12-07 11:01:36,Rebased version here: https://github.com/laanwj/bitcoin/tree/usdt-probes,https://github.com/bitcoin/bitcoin/pull/19866#issuecomment-739844681,739844681,
laanwj,2020-12-07 11:43:28,I've also made a start with documentation `doc/tracing.md`: https://github.com/laanwj/bitcoin/blob/35cad1adbf2bdf98d437e499ea10904d967b0083/doc/tracing.md,https://github.com/bitcoin/bitcoin/pull/19866#issuecomment-739866407,739866407,
jb55,2020-12-07 16:33:49,"@laanwj writes:\n> I'm not sure we want to pass the sanitized packet type to the probe here or simply the raw data.\n\nI'm not super familiar with the network packet format, is this easy to\npull from the raw data? If so we probably don't need it. I wasn't really\nhappy with the current binary capabilities of bpftrace but I imagine\nthis will get better over time once the tooling matures.\n\n> Reb",https://github.com/bitcoin/bitcoin/pull/19866#issuecomment-740030527,740030527,
laanwj,2020-12-08 15:56:12,"> I'm not super familiar with the network packet format, is this easy to\npull from the raw data?\n\nYea the header is very simple, given that eBPF is used for complex packet fltering and pre-processing setups I'm a bit surprised the binary handling capabilities are still a weak point but it should be able to handle it:\n```\n0…3    u8[4]  Start characters\n4…15   u8[20] Type (zero padded te",https://github.com/bitcoin/bitcoin/pull/19866#issuecomment-740707424,740707424,
laanwj,2020-12-08 16:14:52,I think this is ready to go out of draft and get review for the build system changes. It adds the basic infrastructure for tracing. Further tracepoints and examples can be added in later PRs.,https://github.com/bitcoin/bitcoin/pull/19866#issuecomment-740723892,740723892,
jb55,2020-12-08 23:56:02,> I think this is ready to go out of draft and get review for the build\n> system changes. It adds the basic infrastructure for tracing. Further\n> tracepoints and examples can be added in later PRs.\n\nok I'll push just those for now\n,https://github.com/bitcoin/bitcoin/pull/19866#issuecomment-741265027,741265027,
jb55,2020-12-09 00:05:22,"> Given that eBPF is used for complex packet fltering and pre-processing\n> setups I'm a bit surprised the binary handling capabilities are still\n> a weak point\n\nThis was really a comment on the bpftrace tool, not the capabilities of\nebpf itself. You can always write a C/BCC file and load the low level\nprobes that way, but I'm lazy and haven't tried that yet.\n",https://github.com/bitcoin/bitcoin/pull/19866#issuecomment-741278887,741278887,
RandyMcMillan,2020-12-09 01:55:38,"I remember when you posted about this on Twitter.\nExciting...\nConcept ACK\n",https://github.com/bitcoin/bitcoin/pull/19866#issuecomment-741435527,741435527,
laanwj,2020-12-10 12:36:58,"> You can always write a C/BCC file and load the low level probes that way, but I'm lazy and haven't tried that yet.\n\nYes, that would be interesting. But yes, we can experiment with that later, `bpftrace` is the most user friendly way to use this so it's good to document it first.\n\nTested ACK 22eb7930a6ae021438aa0b8e750170534944f296",https://github.com/bitcoin/bitcoin/pull/19866#issuecomment-742494974,742494974,
0xB10C,2020-12-29 23:00:54,"Tested ACK 22eb7930a6ae021438aa0b8e750170534944f296\n\nPlayed around with the IBD example and added a `TRACE1(validation, mempool_added, fee)` to `MemPoolAccept::AcceptSingleTransaction` to log the fee of incoming transactions via bpftrace. I agree with the earlier [discussion](https://github.com/bitcoin/bitcoin/pull/19866#discussion_r483774808) on enabling it by default if prerequisites are ins",https://github.com/bitcoin/bitcoin/pull/19866#issuecomment-752269725,752269725,
jb55,2020-12-30 11:57:06,"0xB10C <notifications@github.com> writes:\n> I did try to extend the IBD example to log the hash of the connected\n> block, but haven't had any luck getting this to work with bpftrace\n> yet. Might try with `bcc` later.\n\nI had the same experience. perhaps it will be easier once bpftrace has\nbetter tooling and more control around printing arbitrary data. This\nfeature was only added recently:\n\",https://github.com/bitcoin/bitcoin/pull/19866#issuecomment-752476414,752476414,
0xB10C,2020-12-31 12:02:14,"Example [bcc](https://github.com/iovisor/bcc) python script for [block-connected](https://github.com/0xB10C/bitcoin/commit/522b86b12abb535ded8273f8de7bb728e55bbbe4) printing the block height and hash via USDT probes:\n\n<details>\n  <summary>click me for code.py and output.txt</summary>\n  \n```python\nfrom __future__ import print_function\nfrom bcc import BPF, USDT\nimport sys\nfrom date",https://github.com/bitcoin/bitcoin/pull/19866#issuecomment-752938795,752938795,
laanwj,2020-09-04 06:29:04,"nit: \n- copyright header\n- redundant empty lines here\n- also i think we want this file under `src/util`",https://github.com/bitcoin/bitcoin/pull/19866#discussion_r483413754,483413754,src/trace.h
laanwj,2020-09-04 06:29:50,Why create a span just to take its data field?,https://github.com/bitcoin/bitcoin/pull/19866#discussion_r483414033,483414033,src/net_processing.cpp
jb55,2020-09-04 14:31:29,Think I copied this over from the peer logging PR and didn't simplify. Will fix.,https://github.com/bitcoin/bitcoin/pull/19866#discussion_r483652414,483652414,src/net_processing.cpp
laanwj,2020-09-04 17:44:15,`ENABLE_TRACING` is probably intended be provided a configure option (e.g. `--enable-ebpf`) later on?,https://github.com/bitcoin/bitcoin/pull/19866#discussion_r483767263,483767263,src/util/trace.h
jb55,2020-09-04 17:48:15,"correct. I think having runtime probes would be neat to have in release builds, then you could tap into them in production. This shouldn't be a problem since traces are basically no-ops if there are no probes attached. This is what linux does of course. perhaps it would be a thing you could explicitly disable if you wanted to, or if configure couldn't find the sdt header.",https://github.com/bitcoin/bitcoin/pull/19866#discussion_r483768868,483768868,src/util/trace.h
jb55,2020-09-04 17:51:47,"although it's not technically a no-op if the macro arg does some amount of work, like serializing an ip address to a string. so trace invocations shouldn't try to serialize anything or do heavy work. you can always write parsers on the bpf side.",https://github.com/bitcoin/bitcoin/pull/19866#discussion_r483770317,483770317,src/util/trace.h
laanwj,2020-09-04 18:02:12,"> correct. I think having runtime probes would be neat to have in release builds,\n\nAgree, I'm fine with enabling it by default when the prerequisites are installed (and the platform is Linux),\n\n> although it's not technically a no-op if the macro arg does some amount of work,\n\nYes, this is something to be careful with. The `LogPrintf`macro avoids this by evaluating its arguments only w",https://github.com/bitcoin/bitcoin/pull/19866#discussion_r483774808,483774808,src/util/trace.h
laanwj,2020-09-04 19:30:19,I think we'll want to add the peer id as well here (same for outgoing),https://github.com/bitcoin/bitcoin/pull/19866#discussion_r483810283,483810283,src/net_processing.cpp
jb55,2020-09-05 17:12:46,I've added a commit that detects sys/sdt.h and enables tracing if it finds it,https://github.com/bitcoin/bitcoin/pull/19866#discussion_r483969369,483969369,src/util/trace.h
jb55,2020-09-05 17:13:02,done,https://github.com/bitcoin/bitcoin/pull/19866#discussion_r483969394,483969394,src/net_processing.cpp
laanwj,2020-12-07 11:02:29,"I'm not sure we want to pass the sanitized packet type to the probe here or simply the raw data.\n\nEdit: Nah, I guess anyone that wants the raw data already has a pointer to the packet, which is passed too. It's extra information.",https://github.com/bitcoin/bitcoin/pull/19866#discussion_r537416867,537416867,src/net.cpp
laanwj,2020-12-08 16:00:54,"I would prefer to rearrange the arguments to `push_message` to be in the same order as process_message (eg move node_id up front before `msgtype_str`):\n```\nnet:push_message(int node_id, char* msgtype_str, uint8_t* tx_data, size_t tx_size)\n```",https://github.com/bitcoin/bitcoin/pull/19866#discussion_r538535858,538535858,doc/tracing.md
