[
  {
    "sha": "3e9f6c821beb58f882356141efe9140e66d00c0d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZTlmNmM4MjFiZWI1OGY4ODIzNTYxNDFlZmU5MTQwZTY2ZDAwYzBk",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-10-08T13:50:09Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-10-08T15:19:25Z"
      },
      "message": "Add missing locks and locking annotations for CAddrMan",
      "tree": {
        "sha": "f626a5be13ae6f5d92005c6eb093e5dfbe2cbc2d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f626a5be13ae6f5d92005c6eb093e5dfbe2cbc2d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3e9f6c821beb58f882356141efe9140e66d00c0d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e9f6c821beb58f882356141efe9140e66d00c0d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3e9f6c821beb58f882356141efe9140e66d00c0d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e9f6c821beb58f882356141efe9140e66d00c0d/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3315007e03f5cc6c89a221ec7e0bc09a89858304",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3315007e03f5cc6c89a221ec7e0bc09a89858304",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3315007e03f5cc6c89a221ec7e0bc09a89858304"
      }
    ],
    "stats": {
      "total": 57,
      "additions": 31,
      "deletions": 26
    },
    "files": [
      {
        "sha": "d220e763b35bb724f3bee8dbe79835334b90c033",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 27,
        "deletions": 26,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e9f6c821beb58f882356141efe9140e66d00c0d/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e9f6c821beb58f882356141efe9140e66d00c0d/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=3e9f6c821beb58f882356141efe9140e66d00c0d",
        "patch": "@@ -187,36 +187,37 @@ class CAddrInfo : public CAddress\n  */\n class CAddrMan\n {\n-private:\n+protected:\n     //! critical section to protect the inner data structures\n     mutable CCriticalSection cs;\n \n+private:\n     //! last used nId\n-    int nIdCount;\n+    int nIdCount GUARDED_BY(cs);\n \n     //! table with information about all nIds\n-    std::map<int, CAddrInfo> mapInfo;\n+    std::map<int, CAddrInfo> mapInfo GUARDED_BY(cs);\n \n     //! find an nId based on its network address\n-    std::map<CNetAddr, int> mapAddr;\n+    std::map<CNetAddr, int> mapAddr GUARDED_BY(cs);\n \n     //! randomly-ordered vector of all nIds\n-    std::vector<int> vRandom;\n+    std::vector<int> vRandom GUARDED_BY(cs);\n \n     // number of \"tried\" entries\n-    int nTried;\n+    int nTried GUARDED_BY(cs);\n \n     //! list of \"tried\" buckets\n-    int vvTried[ADDRMAN_TRIED_BUCKET_COUNT][ADDRMAN_BUCKET_SIZE];\n+    int vvTried[ADDRMAN_TRIED_BUCKET_COUNT][ADDRMAN_BUCKET_SIZE] GUARDED_BY(cs);\n \n     //! number of (unique) \"new\" entries\n-    int nNew;\n+    int nNew GUARDED_BY(cs);\n \n     //! list of \"new\" buckets\n-    int vvNew[ADDRMAN_NEW_BUCKET_COUNT][ADDRMAN_BUCKET_SIZE];\n+    int vvNew[ADDRMAN_NEW_BUCKET_COUNT][ADDRMAN_BUCKET_SIZE] GUARDED_BY(cs);\n \n     //! last time Good was called (memory only)\n-    int64_t nLastGood;\n+    int64_t nLastGood GUARDED_BY(cs);\n \n     //! Holds addrs inserted into tried table that collide with existing entries. Test-before-evict discipline used to resolve these collisions.\n     std::set<int> m_tried_collisions;\n@@ -229,58 +230,58 @@ class CAddrMan\n     FastRandomContext insecure_rand;\n \n     //! Find an entry.\n-    CAddrInfo* Find(const CNetAddr& addr, int *pnId = nullptr);\n+    CAddrInfo* Find(const CNetAddr& addr, int *pnId = nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n     //! find an entry, creating it if necessary.\n     //! nTime and nServices of the found node are updated, if necessary.\n-    CAddrInfo* Create(const CAddress &addr, const CNetAddr &addrSource, int *pnId = nullptr);\n+    CAddrInfo* Create(const CAddress &addr, const CNetAddr &addrSource, int *pnId = nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n     //! Swap two elements in vRandom.\n-    void SwapRandom(unsigned int nRandomPos1, unsigned int nRandomPos2);\n+    void SwapRandom(unsigned int nRandomPos1, unsigned int nRandomPos2) EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n     //! Move an entry from the \"new\" table(s) to the \"tried\" table\n-    void MakeTried(CAddrInfo& info, int nId);\n+    void MakeTried(CAddrInfo& info, int nId) EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n     //! Delete an entry. It must not be in tried, and have refcount 0.\n-    void Delete(int nId);\n+    void Delete(int nId) EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n     //! Clear a position in a \"new\" table. This is the only place where entries are actually deleted.\n-    void ClearNew(int nUBucket, int nUBucketPos);\n+    void ClearNew(int nUBucket, int nUBucketPos) EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n     //! Mark an entry \"good\", possibly moving it from \"new\" to \"tried\".\n-    void Good_(const CService &addr, bool test_before_evict, int64_t time);\n+    void Good_(const CService &addr, bool test_before_evict, int64_t time) EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n     //! Add an entry to the \"new\" table.\n-    bool Add_(const CAddress &addr, const CNetAddr& source, int64_t nTimePenalty);\n+    bool Add_(const CAddress &addr, const CNetAddr& source, int64_t nTimePenalty) EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n     //! Mark an entry as attempted to connect.\n-    void Attempt_(const CService &addr, bool fCountFailure, int64_t nTime);\n+    void Attempt_(const CService &addr, bool fCountFailure, int64_t nTime) EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n     //! Select an address to connect to, if newOnly is set to true, only the new table is selected from.\n-    CAddrInfo Select_(bool newOnly);\n+    CAddrInfo Select_(bool newOnly) EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n     //! See if any to-be-evicted tried table entries have been tested and if so resolve the collisions.\n-    void ResolveCollisions_();\n+    void ResolveCollisions_() EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n     //! Return a random to-be-evicted tried table address.\n-    CAddrInfo SelectTriedCollision_();\n+    CAddrInfo SelectTriedCollision_() EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n     //! Wraps GetRandInt to allow tests to override RandomInt and make it determinismistic.\n     virtual int RandomInt(int nMax);\n \n #ifdef DEBUG_ADDRMAN\n     //! Perform consistency check. Returns an error code or zero.\n-    int Check_();\n+    int Check_() EXCLUSIVE_LOCKS_REQUIRED(cs);\n #endif\n \n     //! Select several addresses at once.\n-    void GetAddr_(std::vector<CAddress> &vAddr);\n+    void GetAddr_(std::vector<CAddress> &vAddr) EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n     //! Mark an entry as currently-connected-to.\n-    void Connected_(const CService &addr, int64_t nTime);\n+    void Connected_(const CService &addr, int64_t nTime) EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n     //! Update an entry's service bits.\n-    void SetServices_(const CService &addr, ServiceFlags nServices);\n+    void SetServices_(const CService &addr, ServiceFlags nServices) EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n public:\n     /**"
      },
      {
        "sha": "fbe438092efd3afe687c1a085053205f8d2db9fd",
        "filename": "src/test/addrman_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e9f6c821beb58f882356141efe9140e66d00c0d/src/test/addrman_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e9f6c821beb58f882356141efe9140e66d00c0d/src/test/addrman_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/addrman_tests.cpp?ref=3e9f6c821beb58f882356141efe9140e66d00c0d",
        "patch": "@@ -40,22 +40,26 @@ class CAddrManTest : public CAddrMan\n \n     CAddrInfo* Find(const CNetAddr& addr, int* pnId = nullptr)\n     {\n+        LOCK(cs);\n         return CAddrMan::Find(addr, pnId);\n     }\n \n     CAddrInfo* Create(const CAddress& addr, const CNetAddr& addrSource, int* pnId = nullptr)\n     {\n+        LOCK(cs);\n         return CAddrMan::Create(addr, addrSource, pnId);\n     }\n \n     void Delete(int nId)\n     {\n+        LOCK(cs);\n         CAddrMan::Delete(nId);\n     }\n \n     // Simulates connection failure so that we can test eviction of offline nodes\n     void SimConnFail(CService& addr)\n     {\n+         LOCK(cs);\n          int64_t nLastSuccess = 1;\n          Good_(addr, true, nLastSuccess); // Set last good connection in the deep past.\n "
      }
    ]
  }
]