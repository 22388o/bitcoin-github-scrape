[
  {
    "sha": "a48f2d6ddd8a438a126bfb7940d993f2da598476",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNDhmMmQ2ZGRkOGE0MzhhMTI2YmZiNzk0MGQ5OTNmMmRhNTk4NDc2",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2014-10-19T23:09:50Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2014-11-18T19:20:10Z"
      },
      "message": "Abstract context-dependent block checking from acceptance",
      "tree": {
        "sha": "1d7f974e45d99b47ed15bc447fa4078274345db8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1d7f974e45d99b47ed15bc447fa4078274345db8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a48f2d6ddd8a438a126bfb7940d993f2da598476",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a48f2d6ddd8a438a126bfb7940d993f2da598476",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a48f2d6ddd8a438a126bfb7940d993f2da598476",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a48f2d6ddd8a438a126bfb7940d993f2da598476/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ff17816abf2d2be2b349c4ba4d49633a126074fa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff17816abf2d2be2b349c4ba4d49633a126074fa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ff17816abf2d2be2b349c4ba4d49633a126074fa"
      }
    ],
    "stats": {
      "total": 128,
      "additions": 75,
      "deletions": 53
    },
    "files": [
      {
        "sha": "2781c6f3fb41b4db44bb2d11187c6cf92c7bad01",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 71,
        "deletions": 53,
        "changes": 124,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a48f2d6ddd8a438a126bfb7940d993f2da598476/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a48f2d6ddd8a438a126bfb7940d993f2da598476/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=a48f2d6ddd8a438a126bfb7940d993f2da598476",
        "patch": "@@ -2334,6 +2334,73 @@ bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW, bo\n     return true;\n }\n \n+bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, CBlockIndex * const pindexPrev)\n+{\n+    uint256 hash = block.GetHash();\n+    if (hash == Params().HashGenesisBlock())\n+        return true;\n+\n+    assert(pindexPrev);\n+\n+    int nHeight = pindexPrev->nHeight+1;\n+\n+    // Check proof of work\n+    if ((!Params().SkipProofOfWorkCheck()) &&\n+       (block.nBits != GetNextWorkRequired(pindexPrev, &block)))\n+        return state.DoS(100, error(\"%s : incorrect proof of work\", __func__),\n+                         REJECT_INVALID, \"bad-diffbits\");\n+\n+    // Check timestamp against prev\n+    if (block.GetBlockTime() <= pindexPrev->GetMedianTimePast())\n+        return state.Invalid(error(\"%s : block's timestamp is too early\", __func__),\n+                             REJECT_INVALID, \"time-too-old\");\n+\n+    // Check that the block chain matches the known block chain up to a checkpoint\n+    if (!Checkpoints::CheckBlock(nHeight, hash))\n+        return state.DoS(100, error(\"%s : rejected by checkpoint lock-in at %d\", __func__, nHeight),\n+                         REJECT_CHECKPOINT, \"checkpoint mismatch\");\n+\n+    // Don't accept any forks from the main chain prior to last checkpoint\n+    CBlockIndex* pcheckpoint = Checkpoints::GetLastCheckpoint();\n+    if (pcheckpoint && nHeight < pcheckpoint->nHeight)\n+        return state.DoS(100, error(\"%s : forked chain older than last checkpoint (height %d)\", __func__, nHeight));\n+\n+    // Reject block.nVersion=1 blocks when 95% (75% on testnet) of the network has upgraded:\n+    if (block.nVersion < 2 && \n+        CBlockIndex::IsSuperMajority(2, pindexPrev, Params().RejectBlockOutdatedMajority()))\n+    {\n+        return state.Invalid(error(\"%s : rejected nVersion=1 block\", __func__),\n+                             REJECT_OBSOLETE, \"bad-version\");\n+    }\n+\n+    return true;\n+}\n+\n+bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIndex * const pindexPrev)\n+{\n+    const int nHeight = pindexPrev == NULL ? 0 : pindexPrev->nHeight + 1;\n+\n+    // Check that all transactions are finalized\n+    BOOST_FOREACH(const CTransaction& tx, block.vtx)\n+        if (!IsFinalTx(tx, nHeight, block.GetBlockTime())) {\n+            return state.DoS(10, error(\"%s : contains a non-final transaction\", __func__), REJECT_INVALID, \"bad-txns-nonfinal\");\n+        }\n+\n+    // Enforce block.nVersion=2 rule that the coinbase starts with serialized block height\n+    // if 750 of the last 1,000 blocks are version 2 or greater (51/100 if testnet):\n+    if (block.nVersion >= 2 && \n+        CBlockIndex::IsSuperMajority(2, pindexPrev, Params().EnforceBlockUpgradeMajority()))\n+    {\n+        CScript expect = CScript() << nHeight;\n+        if (block.vtx[0].vin[0].scriptSig.size() < expect.size() ||\n+            !std::equal(expect.begin(), expect.end(), block.vtx[0].vin[0].scriptSig.begin())) {\n+            return state.DoS(100, error(\"%s : block height mismatch in coinbase\", __func__), REJECT_INVALID, \"bad-cb-height\");\n+        }\n+    }\n+\n+    return true;\n+}\n+\n bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, CBlockIndex** ppindex)\n {\n     AssertLockHeld(cs_main);\n@@ -2353,44 +2420,16 @@ bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, CBloc\n \n     // Get prev block index\n     CBlockIndex* pindexPrev = NULL;\n-    int nHeight = 0;\n     if (hash != Params().HashGenesisBlock()) {\n         BlockMap::iterator mi = mapBlockIndex.find(block.hashPrevBlock);\n         if (mi == mapBlockIndex.end())\n             return state.DoS(10, error(\"%s : prev block not found\", __func__), 0, \"bad-prevblk\");\n         pindexPrev = (*mi).second;\n-        nHeight = pindexPrev->nHeight+1;\n-\n-        // Check proof of work\n-        if ((!Params().SkipProofOfWorkCheck()) &&\n-           (block.nBits != GetNextWorkRequired(pindexPrev, &block)))\n-            return state.DoS(100, error(\"%s : incorrect proof of work\", __func__),\n-                             REJECT_INVALID, \"bad-diffbits\");\n-\n-        // Check timestamp against prev\n-        if (block.GetBlockTime() <= pindexPrev->GetMedianTimePast())\n-            return state.Invalid(error(\"%s : block's timestamp is too early\", __func__),\n-                                 REJECT_INVALID, \"time-too-old\");\n-\n-        // Check that the block chain matches the known block chain up to a checkpoint\n-        if (!Checkpoints::CheckBlock(nHeight, hash))\n-            return state.DoS(100, error(\"%s : rejected by checkpoint lock-in at %d\", __func__, nHeight),\n-                             REJECT_CHECKPOINT, \"checkpoint mismatch\");\n-\n-        // Don't accept any forks from the main chain prior to last checkpoint\n-        CBlockIndex* pcheckpoint = Checkpoints::GetLastCheckpoint();\n-        if (pcheckpoint && nHeight < pcheckpoint->nHeight)\n-            return state.DoS(100, error(\"%s : forked chain older than last checkpoint (height %d)\", __func__, nHeight));\n-\n-        // Reject block.nVersion=1 blocks when 95% (75% on testnet) of the network has upgraded:\n-        if (block.nVersion < 2 && \n-            CBlockIndex::IsSuperMajority(2, pindexPrev, Params().RejectBlockOutdatedMajority()))\n-        {\n-            return state.Invalid(error(\"%s : rejected nVersion=1 block\", __func__),\n-                                 REJECT_OBSOLETE, \"bad-version\");\n-        }\n     }\n \n+    if (!ContextualCheckBlockHeader(block, state, pindexPrev))\n+        return false;\n+\n     if (pindex == NULL)\n         pindex = AddToBlockIndex(block);\n \n@@ -2415,7 +2454,7 @@ bool AcceptBlock(CBlock& block, CValidationState& state, CBlockIndex** ppindex,\n         return true;\n     }\n \n-    if (!CheckBlock(block, state)) {\n+    if ((!CheckBlock(block, state)) || !ContextualCheckBlock(block, state, pindex->pprev)) {\n         if (state.IsInvalid() && !state.CorruptionPossible()) {\n             pindex->nStatus |= BLOCK_FAILED_VALID;\n         }\n@@ -2424,27 +2463,6 @@ bool AcceptBlock(CBlock& block, CValidationState& state, CBlockIndex** ppindex,\n \n     int nHeight = pindex->nHeight;\n \n-    // Check that all transactions are finalized\n-    BOOST_FOREACH(const CTransaction& tx, block.vtx)\n-        if (!IsFinalTx(tx, nHeight, block.GetBlockTime())) {\n-            pindex->nStatus |= BLOCK_FAILED_VALID;\n-            return state.DoS(10, error(\"AcceptBlock() : contains a non-final transaction\"),\n-                             REJECT_INVALID, \"bad-txns-nonfinal\");\n-        }\n-\n-    // Enforce block.nVersion=2 rule that the coinbase starts with serialized block height\n-    // if 750 of the last 1,000 blocks are version 2 or greater (51/100 if testnet):\n-    if (block.nVersion >= 2 && \n-        CBlockIndex::IsSuperMajority(2, pindex->pprev, Params().EnforceBlockUpgradeMajority()))\n-    {\n-        CScript expect = CScript() << nHeight;\n-        if (block.vtx[0].vin[0].scriptSig.size() < expect.size() ||\n-            !std::equal(expect.begin(), expect.end(), block.vtx[0].vin[0].scriptSig.begin())) {\n-            pindex->nStatus |= BLOCK_FAILED_VALID;\n-            return state.DoS(100, error(\"AcceptBlock() : block height mismatch in coinbase\"), REJECT_INVALID, \"bad-cb-height\");\n-        }\n-    }\n-\n     // Write block to history file\n     try {\n         unsigned int nBlockSize = ::GetSerializeSize(block, SER_DISK, CLIENT_VERSION);"
      },
      {
        "sha": "6e684be8c0e4266ef7896853c0a9f3858d7ebfbf",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a48f2d6ddd8a438a126bfb7940d993f2da598476/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a48f2d6ddd8a438a126bfb7940d993f2da598476/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=a48f2d6ddd8a438a126bfb7940d993f2da598476",
        "patch": "@@ -463,6 +463,10 @@ bool ConnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, C\n bool CheckBlockHeader(const CBlockHeader& block, CValidationState& state, bool fCheckPOW = true);\n bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n \n+// Context-dependent validity checks\n+bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, CBlockIndex *pindexPrev);\n+bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIndex *pindexPrev);\n+\n // Store block on disk\n // if dbp is provided, the file is known to already reside on disk\n bool AcceptBlock(CBlock& block, CValidationState& state, CBlockIndex **pindex, CDiskBlockPos* dbp = NULL);"
      }
    ]
  },
  {
    "sha": "4ea1be7fb84a397222754473c2bc315e3665ff18",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZWExYmU3ZmI4NGEzOTcyMjI3NTQ0NzNjMmJjMzE1ZTM2NjVmZjE4",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2014-10-16T03:50:33Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2014-11-18T19:20:10Z"
      },
      "message": "CreateNewBlock and miner_tests: Also check generated template is valid by CheckBlockHeader, ContextualCheckBlockHeader, CheckBlock, and ContextualCheckBlock",
      "tree": {
        "sha": "45568c5b462cfb6cc2ba1e4eab69853d15c50c6c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/45568c5b462cfb6cc2ba1e4eab69853d15c50c6c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4ea1be7fb84a397222754473c2bc315e3665ff18",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4ea1be7fb84a397222754473c2bc315e3665ff18",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4ea1be7fb84a397222754473c2bc315e3665ff18",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4ea1be7fb84a397222754473c2bc315e3665ff18/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a48f2d6ddd8a438a126bfb7940d993f2da598476",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a48f2d6ddd8a438a126bfb7940d993f2da598476",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a48f2d6ddd8a438a126bfb7940d993f2da598476"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 9,
      "deletions": 0
    },
    "files": [
      {
        "sha": "d7ecd5e40e32a49936bb89e1921cfc45da195f92",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4ea1be7fb84a397222754473c2bc315e3665ff18/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4ea1be7fb84a397222754473c2bc315e3665ff18/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=4ea1be7fb84a397222754473c2bc315e3665ff18",
        "patch": "@@ -326,8 +326,17 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n         indexDummy.nHeight = pindexPrev->nHeight + 1;\n         CCoinsViewCache viewNew(pcoinsTip);\n         CValidationState state;\n+        // NOTE: CheckBlockHeader is called by CheckBlock\n+        if (!ContextualCheckBlockHeader(*pblock, state, pindexPrev))\n+            throw std::runtime_error(\"CreateNewBlock() : ContextualCheckBlockHeader failed\");\n+        if (!CheckBlock(*pblock, state, false, false))\n+            throw std::runtime_error(\"CreateNewBlock() : CheckBlock failed\");\n+        if (!ContextualCheckBlock(*pblock, state, pindexPrev))\n+            throw std::runtime_error(\"CreateNewBlock() : ContextualCheckBlock failed\");\n         if (!ConnectBlock(*pblock, state, &indexDummy, viewNew, true))\n             throw std::runtime_error(\"CreateNewBlock() : ConnectBlock failed\");\n+        if (!state.IsValid())\n+            throw std::runtime_error(\"CreateNewBlock() : State is not valid\");\n     }\n \n     return pblocktemplate.release();"
      }
    ]
  },
  {
    "sha": "df08a626e0440457ae0d1966439fd956c27ae2fe",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZjA4YTYyNmUwNDQwNDU3YWUwZDE5NjY0MzlmZDk1NmMyN2FlMmZl",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2014-10-20T02:10:03Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2014-11-18T19:20:10Z"
      },
      "message": "TestBlockValidity function for CBlock proposals (used by CreateNewBlock)",
      "tree": {
        "sha": "586501914259b6303dab55bd719efb1be76d5df4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/586501914259b6303dab55bd719efb1be76d5df4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/df08a626e0440457ae0d1966439fd956c27ae2fe",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df08a626e0440457ae0d1966439fd956c27ae2fe",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/df08a626e0440457ae0d1966439fd956c27ae2fe",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df08a626e0440457ae0d1966439fd956c27ae2fe/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4ea1be7fb84a397222754473c2bc315e3665ff18",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4ea1be7fb84a397222754473c2bc315e3665ff18",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4ea1be7fb84a397222754473c2bc315e3665ff18"
      }
    ],
    "stats": {
      "total": 48,
      "additions": 31,
      "deletions": 17
    },
    "files": [
      {
        "sha": "fda71a365dd3b15274ecef608c49f7309f4170ad",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 1,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df08a626e0440457ae0d1966439fd956c27ae2fe/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df08a626e0440457ae0d1966439fd956c27ae2fe/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=df08a626e0440457ae0d1966439fd956c27ae2fe",
        "patch": "@@ -1593,7 +1593,7 @@ static int64_t nTimeIndex = 0;\n static int64_t nTimeCallbacks = 0;\n static int64_t nTimeTotal = 0;\n \n-bool ConnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, CCoinsViewCache& view, bool fJustCheck)\n+bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pindex, CCoinsViewCache& view, bool fJustCheck)\n {\n     AssertLockHeld(cs_main);\n     // Check it again in case a previous version let a bad block in\n@@ -2573,6 +2573,30 @@ bool ProcessNewBlock(CValidationState &state, CNode* pfrom, CBlock* pblock, CDis\n     return true;\n }\n \n+bool TestBlockValidity(CValidationState &state, const CBlock& block, CBlockIndex * const pindexPrev, bool fCheckPOW, bool fCheckMerkleRoot)\n+{\n+    AssertLockHeld(cs_main);\n+    assert(pindexPrev == chainActive.Tip());\n+\n+    CCoinsViewCache viewNew(pcoinsTip);\n+    CBlockIndex indexDummy(block);\n+    indexDummy.pprev = pindexPrev;\n+    indexDummy.nHeight = pindexPrev->nHeight + 1;\n+\n+    // NOTE: CheckBlockHeader is called by CheckBlock\n+    if (!ContextualCheckBlockHeader(block, state, pindexPrev))\n+        return false;\n+    if (!CheckBlock(block, state, fCheckPOW, fCheckMerkleRoot))\n+        return false;\n+    if (!ContextualCheckBlock(block, state, pindexPrev))\n+        return false;\n+    if (!ConnectBlock(block, state, &indexDummy, viewNew, true))\n+        return false;\n+    assert(state.IsValid());\n+\n+    return true;\n+}\n+\n \n \n "
      },
      {
        "sha": "b49f0a06ebba075b55dc21c6d54c74f24fd03702",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df08a626e0440457ae0d1966439fd956c27ae2fe/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df08a626e0440457ae0d1966439fd956c27ae2fe/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=df08a626e0440457ae0d1966439fd956c27ae2fe",
        "patch": "@@ -457,7 +457,7 @@ bool ReadBlockFromDisk(CBlock& block, const CBlockIndex* pindex);\n bool DisconnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, CCoinsViewCache& coins, bool* pfClean = NULL);\n \n // Apply the effects of this block (with given index) on the UTXO set represented by coins\n-bool ConnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, CCoinsViewCache& coins, bool fJustCheck = false);\n+bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pindex, CCoinsViewCache& coins, bool fJustCheck = false);\n \n // Context-independent validity checks\n bool CheckBlockHeader(const CBlockHeader& block, CValidationState& state, bool fCheckPOW = true);\n@@ -467,6 +467,9 @@ bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW = t\n bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, CBlockIndex *pindexPrev);\n bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIndex *pindexPrev);\n \n+// Check a block is completely valid from start to finish (only works on top of our current best block, with cs_main held)\n+bool TestBlockValidity(CValidationState &state, const CBlock& block, CBlockIndex *pindexPrev, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n+\n // Store block on disk\n // if dbp is provided, the file is known to already reside on disk\n bool AcceptBlock(CBlock& block, CValidationState& state, CBlockIndex **pindex, CDiskBlockPos* dbp = NULL);"
      },
      {
        "sha": "200498d109aa647a88e2c45c0548b716c6661f2d",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 15,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df08a626e0440457ae0d1966439fd956c27ae2fe/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df08a626e0440457ae0d1966439fd956c27ae2fe/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=df08a626e0440457ae0d1966439fd956c27ae2fe",
        "patch": "@@ -321,22 +321,9 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n         pblock->nNonce         = 0;\n         pblocktemplate->vTxSigOps[0] = GetLegacySigOpCount(pblock->vtx[0]);\n \n-        CBlockIndex indexDummy(*pblock);\n-        indexDummy.pprev = pindexPrev;\n-        indexDummy.nHeight = pindexPrev->nHeight + 1;\n-        CCoinsViewCache viewNew(pcoinsTip);\n         CValidationState state;\n-        // NOTE: CheckBlockHeader is called by CheckBlock\n-        if (!ContextualCheckBlockHeader(*pblock, state, pindexPrev))\n-            throw std::runtime_error(\"CreateNewBlock() : ContextualCheckBlockHeader failed\");\n-        if (!CheckBlock(*pblock, state, false, false))\n-            throw std::runtime_error(\"CreateNewBlock() : CheckBlock failed\");\n-        if (!ContextualCheckBlock(*pblock, state, pindexPrev))\n-            throw std::runtime_error(\"CreateNewBlock() : ContextualCheckBlock failed\");\n-        if (!ConnectBlock(*pblock, state, &indexDummy, viewNew, true))\n-            throw std::runtime_error(\"CreateNewBlock() : ConnectBlock failed\");\n-        if (!state.IsValid())\n-            throw std::runtime_error(\"CreateNewBlock() : State is not valid\");\n+        if (!TestBlockValidity(state, *pblock, pindexPrev, false, false))\n+            throw std::runtime_error(\"CreateNewBlock() : TestBlockValidity failed\");\n     }\n \n     return pblocktemplate.release();"
      }
    ]
  },
  {
    "sha": "132ea9b48f65dcb4784a7e9688f3b194d5578c80",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMzJlYTliNDhmNjVkY2I0Nzg0YTdlOTY4OGYzYjE5NGQ1NTc4Yzgw",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2014-10-30T04:26:31Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2014-11-18T19:20:10Z"
      },
      "message": "miner_tests: Disable checkpoints so they don't fail the subsidy-change test",
      "tree": {
        "sha": "dfe8c232ac269bbdd835ee540ac4afffb26569f1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dfe8c232ac269bbdd835ee540ac4afffb26569f1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/132ea9b48f65dcb4784a7e9688f3b194d5578c80",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/132ea9b48f65dcb4784a7e9688f3b194d5578c80",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/132ea9b48f65dcb4784a7e9688f3b194d5578c80",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/132ea9b48f65dcb4784a7e9688f3b194d5578c80/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "df08a626e0440457ae0d1966439fd956c27ae2fe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df08a626e0440457ae0d1966439fd956c27ae2fe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/df08a626e0440457ae0d1966439fd956c27ae2fe"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "1caee13c3362436fcf41f92ceace9e2e358ee506",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/132ea9b48f65dcb4784a7e9688f3b194d5578c80/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/132ea9b48f65dcb4784a7e9688f3b194d5578c80/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=132ea9b48f65dcb4784a7e9688f3b194d5578c80",
        "patch": "@@ -56,6 +56,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     uint256 hash;\n \n     LOCK(cs_main);\n+    Checkpoints::fEnabled = false;\n \n     // Simple block creation, nothing special yet:\n     BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n@@ -258,6 +259,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     BOOST_FOREACH(CTransaction *tx, txFirst)\n         delete tx;\n \n+    Checkpoints::fEnabled = true;\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  }
]