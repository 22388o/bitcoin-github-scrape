fanquake,2020-02-07 04:10:40,Thanks. Concept ACK.,https://github.com/bitcoin/bitcoin/pull/18087#issuecomment-583225635,583225635,
DrahtBot,2020-02-07 09:43:58,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#18112](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/18112.html) (Serialization improvements step 5 (blockenc",https://github.com/bitcoin/bitcoin/pull/18087#issuecomment-583312402,583312402,
MarcoFalke,2020-02-07 14:06:59,What is the risk or downside of using GNU extensions? Is this a stylistic issue?,https://github.com/bitcoin/bitcoin/pull/18087#issuecomment-583403058,583403058,
Empact,2020-02-07 15:28:25,"Given the two current modes are:\n* DEFAULT -> unsigned\n* NONNEGATIVE_SIGNED -> signed\n\nAssuming other modes aren't planned. How about using two separate macros to present them: `VARINT` and `VARINT_U` (or similar)?\n\nIncidentally, I don't see anywhere we're currently checking that the NONNEGATIVE_SIGNED values are in fact nonnegative.",https://github.com/bitcoin/bitcoin/pull/18087#issuecomment-583452782,583452782,
sipa,2020-02-07 17:34:53,"> What is the risk or downside of using GNU extensions? Is this a stylistic issue?\n\nPing @fanquake, @theuni.\n\n> Assuming other modes aren't planned. How about using two separate macros to present them: `VARINT` and `VARINT_U` (or similar)?\n\n@ryanofsky What do you think of this suggestion?\n\n> Incidentally, I don't see anywhere we're currently checking that the NONNEGATIVE_SIGNED val",https://github.com/bitcoin/bitcoin/pull/18087#issuecomment-583518423,583518423,
fanquake,2020-02-07 23:13:41,"> Is this a stylistic issue?\n\n@MarcoFalke No. The better place for this discussion would be #18088.",https://github.com/bitcoin/bitcoin/pull/18087#issuecomment-583656028,583656028,
laanwj,2020-02-07 23:27:19,"> What is the risk or downside of using GNU extensions? Is this a stylistic issue?\n\nIt means that a compiler ""merely"" implementing the C++11 standard could not compile our code. \n\nMaybe all current C++ compilers implement these extensions at the moment, but how would we feel if this would be some proprietary MSVC extension used?\n\nIMO, unless there is another strong reason that gives a ",https://github.com/bitcoin/bitcoin/pull/18087#issuecomment-583659355,583659355,
MarcoFalke,2020-02-09 16:21:58,"Concept ACK per @laanwj \n\nSlightly prefer the version by @Empact because it feels odd to explicitly pass in a value that is just called ""default""",https://github.com/bitcoin/bitcoin/pull/18087#issuecomment-583864139,583864139,
practicalswift,2020-02-10 15:27:07,"Concept ACK: inside the standard is obviously better than outside the standard :)\n\nTalking about standards: people interested in this PR might be interested in reviewing #17208 (""Make all tests pass UBSan without using any UBSan suppressions"") which needs review :)\n",https://github.com/bitcoin/bitcoin/pull/18087#issuecomment-584177264,584177264,
practicalswift,2020-02-10 15:31:16,ACK c2dc9811a05f86534bd814b533271fac6b7ac68e -- patch looks correct,https://github.com/bitcoin/bitcoin/pull/18087#issuecomment-584179407,584179407,
sipa,2020-02-10 18:04:37,"Rebased, and switched to @ryanofsky's VARINT/VARINT_MODE approach (smaller diff!).",https://github.com/bitcoin/bitcoin/pull/18087#issuecomment-584253840,584253840,
MarcoFalke,2020-02-10 20:27:51,"ACK 0e0fa27acb74b4f0075afcf59a0dff51a21baddb ðŸ“¯\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nACK 0e0fa27acb74b4f0075afcf59a0dff51a21baddb ðŸ“¯\n-----BEGIN PGP SIGNATURE-----\n\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUgPJwv+JEf3TlslUjdcSz58oj7t8GSnSnNeIwcAh6zSPMC2xxFNDX7ISN",https://github.com/bitcoin/bitcoin/pull/18087#issuecomment-584337720,584337720,
practicalswift,2020-02-11 06:39:12,ACK 0e0fa27acb74b4f0075afcf59a0dff51a21baddb -- diff looks correct,https://github.com/bitcoin/bitcoin/pull/18087#issuecomment-584496589,584496589,
ryanofsky,2020-02-10 15:33:32,"Would suggest something like:\n\n```c++\n#define VARINT(obj)            VARINT_MODE(obj, VarIntMode::DEFAULT)\n#define VARINT_MODE(obj, mode) Using<VarIntFormatter<mode>>(obj)\n```\n\nto reduce verbosity and number of changes needed here",https://github.com/bitcoin/bitcoin/pull/18087#discussion_r377136011,377136011,src/serialize.h
sipa,2020-02-10 18:04:47,Done.,https://github.com/bitcoin/bitcoin/pull/18087#discussion_r377226524,377226524,src/serialize.h
MarcoFalke,2020-02-10 18:14:49,:eyes: (edit: This hunk should be removed from the diff),https://github.com/bitcoin/bitcoin/pull/18087#discussion_r377231409,377231409,src/serialize.h
sipa,2020-02-10 20:00:43,"Aha, someone caught it!\n\n(*clearly* I left that in to see if reviewers were paying attention)",https://github.com/bitcoin/bitcoin/pull/18087#discussion_r377285397,377285397,src/serialize.h
sipa,2020-02-10 20:00:55,Fixed.,https://github.com/bitcoin/bitcoin/pull/18087#discussion_r377285499,377285499,src/serialize.h
