TheBlueMatt,2017-12-09T16:03:29Z,"High-Level Concept ACK. As for your two notes:\n\n> an alternative would be to split the txindex into a separate DB and do a data migration on upgrade.\n\nI'd vote strongly for this. Keeping them separate is good.\n\n> though it may be fine to just do the TxIndex write directly in the BlockConnected method.\n\nYes, I think you should just do this. I'd like to move the CValidationInterface ",https://github.com/bitcoin/bitcoin/pull/11857#issuecomment-350481060,350481060,
laanwj,2017-12-13T07:37:32Z,"Concept ACK\n\n> an alternative would be to split the txindex into a separate DB and do a data migration on upgrade.\n\nI agree that would be preferable (though not necessarily in this PR, I don't think the scope here should be extended further).  The transaction index has a completely different access pattern from the block index. This came up in #10922 and other places.\n\nAlso for safety ",https://github.com/bitcoin/bitcoin/pull/11857#issuecomment-351308356,351308356,
TheBlueMatt,2017-12-13T16:58:52Z,"I'm not actaully sure that its unrelated - currently txindex is required to be kept in-sync and be present in the block tree DB before the coins for a block are flushed to the utxodb. Moving it to the background without bending over backwards to keep things in-sync would result in ""corrupt"" (I assume just missing entries) tx index in some cases on downgrade. Its not a huge deal, but I think moving",https://github.com/bitcoin/bitcoin/pull/11857#issuecomment-351453993,351453993,
jimpo,2017-12-13T17:42:44Z,"@TheBlueMatt @laanwj I updated this PR to split the database and added a migration. The migration took ~103 min on an AWS m4.large with data on a gp2 EBS volume (non-local SSD). So that's kind of painful. I could change the migration to happen in the background thread, but the UX might be weird for people upgrading because the RPC endpoint would report that the txindex is catching up. Open to sugg",https://github.com/bitcoin/bitcoin/pull/11857#issuecomment-351467099,351467099,
TheBlueMatt,2017-12-13T18:54:51Z,"Seems to be missing migration (forget to push?). Doing migration in the background after start seems fine, better to wait with most things working than it just hanging startup, just have to make sure it doesn't overwrite new entries or you'd end up pointing to a reorg'd-out block's copy (though I think thats probably not technically a problem, it seems strange).\n\nAs for threading, it would be ",https://github.com/bitcoin/bitcoin/pull/11857#issuecomment-351487094,351487094,
jimpo,2017-12-13T20:10:34Z,"@TheBlueMatt Migration is here: https://github.com/bitcoin/bitcoin/pull/11857/commits/a252d466ca0c44a455051d01c43e50e15643c423#diff-81e4f16a1b5d5b7ca25351a63d07cb80R446. Called from `Start()`, though it could be moved to `ThreadSync` (the dedicated thread for the txindex initial sync).\n\nI also changed the new block flushing to happen directly in the `BlockConnected` callback as you suggested.",https://github.com/bitcoin/bitcoin/pull/11857#issuecomment-351507915,351507915,
laanwj,2018-02-08T18:50:54Z,"Needs rebase (probably a simple one, only init.cpp conflicted).",https://github.com/bitcoin/bitcoin/pull/11857#issuecomment-364211135,364211135,
Sjors,2018-02-09T16:15:56Z,"I also noticed that `indexes` isn't emptied if you set `txindex=0`. That's probably a good thing, e.g. perhaps someone doesn't want to read / update them for a while, but should be documented.\n\nI was able to reproduce the ""Error opening block database"" QT error (on master) after a fresh reindex (on this branch). No need to use bitcoind to make it go away, simply launch with `-reindex`. That sh",https://github.com/bitcoin/bitcoin/pull/11857#issuecomment-364479759,364479759,
Sjors,2018-02-09T19:01:07Z,"I was comparing the wrong directory sizes above. `chainstate` is for the UTXO set, `txindex` is in `blocks/index` (on master).\n\nAlso the error I was seeing was unrelated, and hopefully fixed in #12401  ",https://github.com/bitcoin/bitcoin/pull/11857#issuecomment-364527179,364527179,
jimpo,2018-02-09T21:49:06Z,"@Sjors Thanks for the review!\n\nI added f1b8b8d to log the txindex build status periodically while it is catching up.\n\nI agree functional tests would be nice, but I'm having trouble figuring out how to exercise the case where the txindex is catchup up in the test harness. Could maybe sync a node with a few blocks, stop it, delete the txindex database files, restart and then hit the RPC, but",https://github.com/bitcoin/bitcoin/pull/11857#issuecomment-364578968,364578968,
Sjors,2018-02-10T10:43:10Z,@jnewbery: any thoughts on how to tackle functional tests?,https://github.com/bitcoin/bitcoin/pull/11857#issuecomment-364642544,364642544,
sipa,2018-03-06T18:50:31Z,"Concept ACK.\n\nHaving the transaction index as a modular, optional, separate database that gets updated in the background is a major improvement over how things work now.\n\nIt's also the approach that similar optional indexes or redundant data can take; for example a rolling UTXO set hash or a per-scriptPubKey UTXO index (see #9806) could follow the same approach.",https://github.com/bitcoin/bitcoin/pull/11857#issuecomment-370887085,370887085,
Sjors,2018-03-07T15:15:35Z,"Tested adding an index in Bitcoin-QT and it seems to work. I didn't try upgrading an existing index.\n\nIt doesn't delete the index when you set `txindex=0`. That might actually be better than the current behavior to prevent accidents, but should be explained in the release notes and such.",https://github.com/bitcoin/bitcoin/pull/11857#issuecomment-371170887,371170887,
jimpo,2018-03-08T18:31:44Z,@Sjors Thanks for testing. I fixed the issue switching from pruned to unpruned w/o txindex with an amend to 33ebb98. You raise an interesting point about dropping the txindex database. Not sure what the right behavior should be. One approach might be to add a `-dropindex=txindex` flag or to add an RPC and `bitcoin-cli` command that errors if the txindex is active. I like the CLI approach personall,https://github.com/bitcoin/bitcoin/pull/11857#issuecomment-371579644,371579644,
Sjors,2018-03-08T19:08:58Z,I think your release note is fine. Deleting a directory doesn't seem worth the complexity of another RPC command / command line flag. I don't think it's too much to ask.,https://github.com/bitcoin/bitcoin/pull/11857#issuecomment-371590826,371590826,
jonasschnelli,2018-03-09T01:11:06Z,"Concept ACK!\n- Is there a reason for the extensive use of the c++11 `auto` specifier (for things like `CBlockIndex*`)?\n- Maybe a stupid question, but why blocking the thread / RPC / REST during txindex generation? I just had the thought why not building the txindex reserve (from tip to genesis) and allow access anytime while eventually add a txindex status report call `txindexstatus` (if this ",https://github.com/bitcoin/bitcoin/pull/11857#issuecomment-371679779,371679779,
jimpo,2018-03-09T01:23:09Z,"@jonasschnelli I wrote this before the discussion on #12120. Happy to go through the commits and reduce the usage.\n\nAs for the RPC behavior, it actually works similar to how you suggest. `BlockUntilSyncedToCurrentChain` only blocks if the txindex is caught up and just waits for the ValidationInterface queue to clear. If the txindex is syncing from genesis, `BlockUntilSyncedToCurrentChain` imme",https://github.com/bitcoin/bitcoin/pull/11857#issuecomment-371681871,371681871,
eklitzke,2018-03-13T06:25:12Z,"I thought more about the ordering dependency between the block index and the txindex, and I realize now that it might be possible to make them independent of ordering. There's an edge case (that may not be possible in practice) if a reorg happens during crash recovery, so I stand by my original recommendation and maybe we can fix the reorg edge case before 0.17 is released.",https://github.com/bitcoin/bitcoin/pull/11857#issuecomment-372559696,372559696,
ryanofsky,2018-03-15T17:30:24Z,"Two functional tests `rpc_rawtransaction.py` and `wallet_abandonconflict.py` seem to be failing, perhaps due to a bad interaction with #11041. AssertLockHeld is failing with stack trace:\n\n```\n#0  0x00007ffff5411428 in __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:54\n#1  0x00007ffff541302a in __GI_abort () at abort.c:89\n#2  0x0000555555b617d0 in AssertLockHeldInternal",https://github.com/bitcoin/bitcoin/pull/11857#issuecomment-373459507,373459507,
ryanofsky,2018-03-19T23:34:08Z,I'll take another look at this tomorrow to re-ack the new changes. Hopefully I responded to wherever there were questions above.,https://github.com/bitcoin/bitcoin/pull/11857#issuecomment-374421493,374421493,
jnewbery,2018-03-20T21:43:08Z,"@Sjors\n> @jnewbery: any thoughts on how to tackle functional tests?\n\nMy first thought is that this isn't suitable for a functional test, since it's an implementation change rather than new functionality. Unit tests seem more appropriate.\n\nWill try to review this week.",https://github.com/bitcoin/bitcoin/pull/11857#issuecomment-374767119,374767119,
sipa,2018-03-22T01:18:17Z,"This seems to introduce a cyclic dependency between `index/txindex` and `validation`. As these usually are a sign of imperfect abstraction boundaries, I would very much like to avoid them. If the current code is only expected to be temporary, I don't want to hold things up just for this, but I don't think it's very hard to avoid; you can move `GetTransaction` from `validation` to `rpc/rawtransacti",https://github.com/bitcoin/bitcoin/pull/11857#issuecomment-375147034,375147034,
jimpo,2018-03-22T01:29:59Z,@sipa Totally agree `GetTransaction` should be moved. I'd prefer to do it in a follow-up PR as this one is already rather large though.,https://github.com/bitcoin/bitcoin/pull/11857#issuecomment-375148907,375148907,
sipa,2018-03-30T01:40:29Z,"I'd very much like to get rid of the UTXO based block lookup. It's unreliable (depends on having at least one unspent output left for the transaction), is slow (needs to load and scan the entire block) and probably unused. There is an issue for it somewhere, but I think we'll want a deprecation for it first.\n\nOne way to deal with it is introducing a new RPC `getchaintransaction` or so, which str",https://github.com/bitcoin/bitcoin/pull/11857#issuecomment-377421311,377421311,
jimpo,2018-03-30T17:19:54Z,"@TheBlueMatt @sipa I'd prefer to handle some of your suggestions about getrawtransaction (better error reporting, no UTXO lookup, moving GetTransaction out of validation, etc.) in a follow-up PR because this one is already 700+ lines. Commit https://github.com/jimpo/bitcoin/commit/2b8ee538bf804bcd2d30942d1254d147e65f2ee3 is a starting point.",https://github.com/bitcoin/bitcoin/pull/11857#issuecomment-377574766,377574766,
sipa,2018-03-30T18:15:47Z,@jimpo Sorry if I was unclear; my message above was just to give some background thoughts and not a request to further change this PR itself.\n\nI'll review the code soon.,https://github.com/bitcoin/bitcoin/pull/11857#issuecomment-377587439,377587439,
Sjors,2018-04-04T15:34:25Z,"Tested 806b2f1, including interrupting the migration from legacy to the new db.\n\nIf someone wants to do a partial backport, the migration code that removes txindex without requiring a reindex would be useful for folks who regret having set `txindex=1` on a node with slow hardware.",https://github.com/bitcoin/bitcoin/pull/11857#issuecomment-378644032,378644032,
jtimon,2018-04-05T20:16:38Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/11857#issuecomment-379062978,379062978,
jtimon,2018-04-05T20:20:00Z,"> warning saying you can use getmempoolentry for unconfirmed transactions\n@sipa But getmempoolentry doesn't give you the same data as getrawtransaction (I guess it could be extended to do so optionally).\n",https://github.com/bitcoin/bitcoin/pull/11857#issuecomment-379063844,379063844,
jimpo,2018-04-16T18:09:55Z,"@TheBlueMatt Can you please take a look at the last few commits?\n",https://github.com/bitcoin/bitcoin/pull/11857#issuecomment-381697777,381697777,
TheBlueMatt,2018-04-17T17:11:07Z,"The fixup commits look fine, I think, except that you should probably add a commit to FlushStateToDisk to call SetBestChain in sync with fDoFullFlush always instead of it having its own timer. This shouldn't effect the wallet as in !fDoFullFlush cases we'll be replaying the blocks on restart anyway, but for this stuff would otherwise mean you still have a race.\n\nWill do a full re-review when t",https://github.com/bitcoin/bitcoin/pull/11857#issuecomment-382070773,382070773,
jonasschnelli,2018-04-18T07:53:49Z,Needs rebase,https://github.com/bitcoin/bitcoin/pull/11857#issuecomment-382297921,382297921,
jimpo,2018-04-18T19:19:44Z,"@TheBlueMatt While that sounds reasonable, I don't think there's a race here because we are writing a locator and the TxIndex will sync from the locator fork point to the chain tip on restart. Am I missing something?\n\nI'd like to not expand the scope of the this PR further to modifying flushing logic.",https://github.com/bitcoin/bitcoin/pull/11857#issuecomment-382499614,382499614,
TheBlueMatt,2018-04-18T19:23:48Z,"Indeed, that shouldn't be a real race, but could cuase needless additional sync on startup. Feel free to put it in a second PR, but lets not forget about it.",https://github.com/bitcoin/bitcoin/pull/11857#issuecomment-382500777,382500777,
jimpo,2018-04-20T00:12:41Z,Closing and re-opening in #13033 because this has stopped loading for people.,https://github.com/bitcoin/bitcoin/pull/11857#issuecomment-382920577,382920577,
promag,2017-12-09T01:32:57Z,"Instead of blocking, give 503?",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r155908730,155908730,src/rest.cpp
jamesob,2017-12-09T06:51:20Z,Comment incomplete or outdated?,https://github.com/bitcoin/bitcoin/pull/11857#discussion_r155915071,155915071,src/init.cpp
promag,2017-12-10T01:58:23Z,Move after Init?,https://github.com/bitcoin/bitcoin/pull/11857#discussion_r155936523,155936523,src/index/txindex.cpp
jimpo,2017-12-12T00:11:43Z,"No, this has to be registered before `m_synced` is set to true in Init.",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r156239136,156239136,src/index/txindex.cpp
jimpo,2017-12-12T00:12:34Z,"It's not really unavailable, just that the background process needs to catch up, which should happen quickly.",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r156239250,156239250,src/rest.cpp
jimpo,2017-12-13T01:14:22Z,"Thanks, fixed.",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r156541766,156541766,src/init.cpp
TheBlueMatt,2017-12-13T20:16:59Z,Separating these if statements loses coherency - if we crash we may have a bogus txindex and no way to detect it. Should likely instead do if (batch_newdb.SizeEstimate() + batch_olddb.SizeEstimate() > batch_size)........,https://github.com/bitcoin/bitcoin/pull/11857#discussion_r156770888,156770888,src/txdb.cpp
jimpo,2017-12-13T22:26:59Z,Good catch.,https://github.com/bitcoin/bitcoin/pull/11857#discussion_r156804378,156804378,src/txdb.cpp
ryanofsky,2018-01-05T15:01:03Z,"In commit ""[db] Create separate database for txindex.""\n\nMaybe change to `const auto& tuple` to avoid a copy while iterating.\n  ",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r159895945,159895945,src/txdb.cpp
ryanofsky,2018-01-05T15:06:43Z,"In commit ""[db] Create separate database for txindex.""\n\nMaybe declare const and add comment (16MiB).",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r159897305,159897305,src/txdb.cpp
ryanofsky,2018-01-05T15:09:28Z,"In commit ""[db] Create separate database for txindex.""\n\nMaybe log an error in this case. I don't think it would be expected for pcursor->Valid() to return true but pcursor->GetKey to fail.",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r159897839,159897839,src/txdb.cpp
ryanofsky,2018-01-05T15:20:13Z,"In commit ""[db] Create separate database for txindex.""\n\nThis is duplicating code inside the for loop, and also skipping the last compact range on the old db. Maybe just flush and compact once at the top of the loop:\n\n```c++\nfor (pcursor->Seek(begin_key);; pcursor->Next()) {\n    if (!pcursor->Valid() || batch_newdb.SizeEstimate()...) {\n        ...flush and compact...\n    }\n    if ",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r159900328,159900328,src/txdb.cpp
ryanofsky,2018-01-05T15:26:46Z,"In commit ""[db] Create separate database for txindex.""\n\nUnclear why migration should be tied to txindex flag. At first glance, it would seem simpler to reason about possible states and also more robust if the code just always moved DB_TXINDEX entries from the old location to the new location independent of the flag. Maybe add a code comment here to clarify rationale.\n  ",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r159901942,159901942,src/txdb.cpp
ryanofsky,2018-01-05T15:34:31Z,"In commit ""[db] Methods on TxIndexDB to persist best block hash. ""\n\nIs this a mistake? Probably shouldn't be adding an unused parameter to an unrelated method in this commit.\n  \n  ",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r159904033,159904033,src/txdb.h
ryanofsky,2018-01-05T16:07:29Z,"In commit ""[index] Create new TxIndex class.""\n\nMaybe restructure the code to get rid of this early successful return. It's a little confusing, and also not clear if it's 100% correct. For example I would think that if best_block_hash and chain_tip are both null, m_synced should still be set to true below.\n  ",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r159912603,159912603,src/index/txindex.cpp
ryanofsky,2018-01-05T16:09:29Z,"In commit ""[index] Create new TxIndex class.""\n\nCould `const auto&` to avoid a copy.",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r159913072,159913072,src/index/txindex.cpp
ryanofsky,2018-01-05T16:19:07Z,"In commit ""[index] Create new TxIndex class.""\n\nConsider moving WriteBestBlockHash call out to caller so the stored best block and m_best_block_index get updated together. It's a little unexpected to see one value written without the other. Might want to rename this method to `WriteBlockTxns` if you do this.\n  ",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r159915333,159915333,src/index/txindex.cpp
ryanofsky,2018-01-05T16:20:16Z,"In commit ""[index] Create new TxIndex class.""\n\n>No, this has to be registered before m_synced is set to true in Init.\n\nDefinitely worth noting this in a code comment. Also maybe m_synced should be called m_initialized or m_started to be clearer that it changes from false to true just once on startup, and isn't updated in an ongoing way.\n\n  \n  ",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r159915638,159915638,src/index/txindex.cpp
ryanofsky,2018-01-05T16:27:02Z,"In commit ""[index] Create new TxIndex class.""\n\nWhy use a different code for DB_TXINDEX_BEST_BLOCK than DB_BEST_BLOCK? Why even define a new constant at all? It seems strange that the new txindex format would diverge unnecessarily from the old format here when it isn't doing do that in other places. Should add a code comment explaining if there is a reason.",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r159917226,159917226,src/txdb.cpp
ryanofsky,2018-01-05T16:50:18Z,"In commit ""[index] Create new TxIndex class.""\n\nI'm not sure this case and the one above should be errors given that BlockConnected calls are queued up in the notification thread and may not be up to date with chainActive (which is what ThreadSync syncs toward). Seems like it would be right (and simpler) to just call WriteBlock unconditionally here.\n  \n  ",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r159923255,159923255,src/index/txindex.cpp
jimpo,2018-01-08T23:50:25Z,"Thanks, I moved the check for null `chain_tip` up to fix that case. However, I still think the early return here is necessary.",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r160286747,160286747,src/index/txindex.cpp
jimpo,2018-01-08T23:50:32Z,Done,https://github.com/bitcoin/bitcoin/pull/11857#discussion_r160286762,160286762,src/index/txindex.cpp
jimpo,2018-01-08T23:52:05Z,"This isn't checking against chainActive, it is just asserting that BlockConnected gets called with blocks in order (even if chainActive is ahead). It's important to note that if the BlockConnected callbacks are running, then `m_synced` is true an `ThreadSync` has exited. I added more comments to these fields/methods in the header file to hopefully make that more clear.",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r160287005,160287005,src/index/txindex.cpp
jimpo,2018-01-08T23:52:59Z,"Yeah, that wasn't even used. Left over from a previous version where the database wasn't split out.",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r160287130,160287130,src/txdb.cpp
jimpo,2018-01-08T23:53:09Z,Done.,https://github.com/bitcoin/bitcoin/pull/11857#discussion_r160287161,160287161,src/txdb.cpp
jimpo,2018-01-08T23:54:02Z,I elaborated on the comment. I think this is the best way to determine whether a migration is necessary. LMK if you think it needs further explanation.,https://github.com/bitcoin/bitcoin/pull/11857#discussion_r160287269,160287269,src/txdb.cpp
jimpo,2018-01-08T23:55:47Z,Done.,https://github.com/bitcoin/bitcoin/pull/11857#discussion_r160287498,160287498,src/txdb.cpp
jimpo,2018-01-08T23:56:38Z,"I think you are right that this should never happen, so I opted to return an error instead of logging and completing the migration.",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r160287605,160287605,src/txdb.cpp
jimpo,2018-01-08T23:59:25Z,"Hmm, the logic gets kind of tricky since there's also the early break if the cursor is valid but iterates past the DB_TXINDEX range. Also the CompactRange after the loop compacts over the entire range, not just from the previous batch write point. What do you mean that it skips the last compact range on the old DB? It shouldn't.\n\nThis code was mostly copied from `CCoinsViewDB::Upgrade` if that",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r160287986,160287986,src/txdb.cpp
jimpo,2018-01-09T00:01:43Z,It does get used. The `MigrateData` implementation is modified to write the block hash in this commit before deleting the txindex flag from the old DB.,https://github.com/bitcoin/bitcoin/pull/11857#discussion_r160288280,160288280,src/txdb.h
jimpo,2018-01-09T00:06:21Z,"I kind of prefer to keep the DB writes together. I'd hoped that the access pattern would make it clear:\n\n```c++\nif (WriteBlock(*block, pindex)) {\n    m_best_block_index = pindex;\n}\n```",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r160288890,160288890,src/index/txindex.cpp
ryanofsky,2018-01-11T17:49:21Z,"In commit ""[db] Create separate database for txindex.""\n\nhttps://github.com/bitcoin/bitcoin/pull/11857#discussion_r159901942\n\n>> Unclear why migration should be tied to txindex flag. At first glance, it would seem simpler to reason about possible states and also more robust if the code just always moved DB_TXINDEX entries from the old location to the new location independent of the flag. Ma",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r161027360,161027360,src/txdb.cpp
Sjors,2018-02-09T14:35:04Z,"Should this have a distinct error code, rather than `RPC_INVALID_ADDRESS_OR_KEY`? If I understand correctly, an RPC consumer should wait a little and try again if this happens. ",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r167242419,167242419,src/rpc/rawtransaction.cpp
Sjors,2018-02-09T14:43:16Z,"If it really takes 103 minutes on a fast EC2 instance, maybe make it 1%? Or once a minute? QT already shows 1% intervals during the upgrade.",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r167244773,167244773,src/txdb.cpp
jimpo,2018-02-09T20:50:19Z,"Yes, that's right, an RPC consumer should wait until the index is built. Using the `RPC_INVALID_ADDRESS_OR_KEY` error code for the `""No such mempool transaction. Use -txindex to enable blockchain transaction queries""` clause also seems odd to me.\n\nPerhaps the `RPC_IN_WARMUP` makes sense here, or perhaps a new `RPC_INDEX_UNAVAILABLE` error code.",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r167342688,167342688,src/rpc/rawtransaction.cpp
jimpo,2018-02-09T21:07:28Z,"The percentage shown in the UI is updated with every percent, it's just the log line that shows increments of 10, as it appends to the same line: `[0%]...[10%]...[20%...]`. Alternatively, it could log progress on a separate line every 30 seconds or something like: ""Upgrading txindex database: n% complete\n"". I kind of prefer that approach, but I copied how it was done for CCoinsViewDB upgrade.",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r167346079,167346079,src/txdb.cpp
eklitzke,2018-03-05T20:45:48Z,"This is a lot of moves, since you already move TxIndex::TxIndex. Can you change to create the unique_ptr in the constructor call, e.g.:\n\n```\ng_txindex.reset(new TxIndex(MakeUnique<...>(....));\n```\n\nOr even better, use argument forwarding.",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r172322571,172322571,src/init.cpp
eklitzke,2018-03-05T20:46:40Z,"Can you make this forwardable?\n\n```\nTxIndex(std::unique_ptr<TxIndexDB> &&db);\n```\n\nOr just create the unique_ptr here, see my other comment regarding g_txindex.reset()",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r172322782,172322782,src/index/txindex.h
eklitzke,2018-03-05T20:49:33Z,I think it makes sense to add a logging statement in the path here where the method actually blocks.,https://github.com/bitcoin/bitcoin/pull/11857#discussion_r172323530,172323530,src/index/txindex.cpp
eklitzke,2018-03-05T20:54:10Z,Doesn't std::bind already return the right type here?,https://github.com/bitcoin/bitcoin/pull/11857#discussion_r172324778,172324778,src/index/txindex.cpp
eklitzke,2018-03-05T20:56:15Z,"I believe you can do `{DB_TXINDEX, txid}` in C++11.",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r172325383,172325383,src/txdb.cpp
jimpo,2018-03-06T14:47:27Z,Good catch. This came from a copy-paste.,https://github.com/bitcoin/bitcoin/pull/11857#discussion_r172538666,172538666,src/index/txindex.cpp
jimpo,2018-03-06T14:48:02Z,That doesn't seem to work because `Read` is templated and can't infer that the initializer list should be cast to a `std::pair`.,https://github.com/bitcoin/bitcoin/pull/11857#discussion_r172538847,172538847,src/txdb.cpp
jimpo,2018-03-06T15:25:28Z,"I'd rather have them on separate lines because I think otherwise there is too much happening on one line (and it would get pretty long).\n\nRegarding argument forwarding, even if `TxIndex` takes an rvalue-ref, the `std::move` is necessary.",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r172552215,172552215,src/init.cpp
jimpo,2018-03-06T15:27:27Z,"I find it clearer to pass by value here, as is recommended by [this StackOverflow post](https://stackoverflow.com/a/8114913). Is there a big benefit to changing the parameter to an rvalue-ref?",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r172552923,172552923,src/index/txindex.h
jimpo,2018-03-06T15:27:38Z,Done.,https://github.com/bitcoin/bitcoin/pull/11857#discussion_r172552991,172552991,src/index/txindex.cpp
jimpo,2018-03-08T18:37:00Z,I opted to log every 30s.,https://github.com/bitcoin/bitcoin/pull/11857#discussion_r173250283,173250283,src/txdb.cpp
eklitzke,2018-03-11T07:14:40Z,"remove `static`, that's the opposite of what you want (it reserves `.bss` space)",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r173645421,173645421,src/index/txindex.cpp
eklitzke,2018-03-11T07:15:53Z,"typo, ""in the old database""",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r173645439,173645439,src/index/txindex.cpp
eklitzke,2018-03-11T07:17:56Z,"This is wrong, you have an extra argument that dereferences a nullptr.",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r173645463,173645463,src/index/txindex.cpp
eklitzke,2018-03-11T07:18:50Z,nit: move this to the ctor (it can take a size to reserve),https://github.com/bitcoin/bitcoin/pull/11857#discussion_r173645474,173645474,src/index/txindex.cpp
eklitzke,2018-03-11T07:19:14Z,nit: emplace_back,https://github.com/bitcoin/bitcoin/pull/11857#discussion_r173645479,173645479,src/index/txindex.cpp
eklitzke,2018-03-11T07:20:19Z,"IMO it's weird to mix tx and txn, I would just use tx (and txs) throughout. Up to you though, purely a style thing.",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r173645497,173645497,src/txdb.h
eklitzke,2018-03-11T07:22:36Z,"You're right, disregard.",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r173645530,173645530,src/index/txindex.h
eklitzke,2018-03-11T07:29:51Z,"The transaction logic throughout is wrong here because there's a data ordering dependency.\n\nDuring the data migration:\n * Write to new new with `fsync = True`\n * After new write finishes, you can erase from old db (fsync setting can be left false)\n\nThis ensures that you can can always scan through the old database and catch up to what's in the new database if there's a crash or you are",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r173645676,173645676,src/txdb.cpp
eklitzke,2018-03-11T07:34:18Z,These should both be done in a single `WriteBatch()` call to make them atomic.,https://github.com/bitcoin/bitcoin/pull/11857#discussion_r173645805,173645805,src/index/txindex.cpp
jimpo,2018-03-11T21:53:55Z,"I agree, will change.",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r173671296,173671296,src/txdb.h
jimpo,2018-03-11T22:12:03Z,I'm pretty sure the `std::vector` constructor that takes a `size_t` creates the vector with `n` elements rather than having a size of 0 and a capacity of `n`.,https://github.com/bitcoin/bitcoin/pull/11857#discussion_r173671927,173671927,src/index/txindex.cpp
jimpo,2018-03-11T22:12:18Z,Thanks.,https://github.com/bitcoin/bitcoin/pull/11857#discussion_r173671931,173671931,src/index/txindex.cpp
jimpo,2018-03-11T22:15:48Z,Will do.,https://github.com/bitcoin/bitcoin/pull/11857#discussion_r173672075,173672075,src/index/txindex.cpp
eklitzke,2018-03-13T06:20:02Z,"That's not strictly accurate:\n\n```\n$ g++ --version\ng++ (GCC) 7.3.1 20180303 (Red Hat 7.3.1-5)\nCopyright (C) 2017 Free Software Foundation, Inc.\nThis is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n$ cat reserve.cc \n#include <iostream>\n#include <vector>\n\nstruct Foo {\n    in",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r174025542,174025542,src/index/txindex.cpp
ryanofsky,2018-03-14T15:03:06Z,"In commit ""[db] Create separate database for txindex.""\n\nCommit title could be changed to something like ""Add (unused) TxIndexDB class"" to be more specific. Current title is a little misleading about what the actual change is.",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r174491001,174491001,src/txdb.h
ryanofsky,2018-03-14T15:11:45Z,"In commit ""[db] Create separate database for txindex.""\n\nI think it'd be better to disable copying in `CDBWrapper` instead of here, since the state that's actually unsafe to copy is in that class, not this one.",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r174494166,174494166,src/txdb.h
ryanofsky,2018-03-14T15:24:23Z,"In commit ""[db] Create separate database for txindex.""\n\nCould say cursor instead of pcursor to avoid more hungarian names.",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r174499186,174499186,src/txdb.cpp
ryanofsky,2018-03-14T15:58:11Z,"https://github.com/bitcoin/bitcoin/pull/11857#discussion_r159900328\n\nIn commit ""[db] Create separate database for txindex.""\n\n> Hmm, the logic gets kind of tricky since there's also the early break. \n\nThis doesn't seem that bad in light of the code duplication in the current version of this code, and the fact that the originally duplicated code had a bug that needed to be fixed two plac",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r174512461,174512461,src/txdb.cpp
ryanofsky,2018-03-14T16:22:53Z,"https://github.com/bitcoin/bitcoin/pull/11857#discussion_r159904033\n\nIn commit ""[db] Methods on TxIndexDB to persist best block hash. ""\n\n> It does get used.\n\nMy mistake. IMO, it would make review a little easier if this commit were squashed into the previous commit. I don't think there's benefit to adding the new TxIndexDB class in one commit, and then modifying it to add this simple f",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r174521474,174521474,src/txdb.h
ryanofsky,2018-03-14T16:45:34Z,"In commit ""[index] Create new TxIndex class.""\n\nNot really the ""block index database"" now, but a separate database (unless I'm misinterpreting)?",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r174529236,174529236,src/index/txindex.h
ryanofsky,2018-03-14T16:47:35Z,"In commit ""[index] Create new TxIndex class.""\n\nMaybe set to this false here to simplify initialization in the constructor. Similarly for atomic member below.",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r174529930,174529930,src/index/txindex.h
ryanofsky,2018-03-14T16:49:50Z,"In commit ""[index] Create new TxIndex class.""\n\nMaybe add comment about initialization sequence given the three initialization methods in this class (constructor, `Init`, and `Start`).",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r174530719,174530719,src/index/txindex.h
ryanofsky,2018-03-14T16:59:27Z,"In commit ""[index] Create new TxIndex class.""\n\nIt seems hungarian notation can never go away even in new code, given how sticky the `pindex` convention seems to be, but maybe consider calling this `block` or `best_block_index` instead.",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r174534066,174534066,src/index/txindex.cpp
ryanofsky,2018-03-14T17:09:55Z,"In commit ""[index] Create new TxIndex class.""\n\nIt seems needlessly inefficient and complicated to be creating a vector just to be able to pass a sequence of txids to the `TxIndexDB::WriteTxs` method, which is only called from this one place. It seems like a simpler design might inline the WriteTx method, or pass a block to it, or just not have separate `TxIndexDB` and `TxIndex` classes.",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r174537635,174537635,src/index/txindex.cpp
ryanofsky,2018-03-14T19:05:04Z,"In commit ""[index] Create new TxIndex class.""\n\nWould expand this comment to mention what could actually trigger these errors. Maybe add ""If the errors below are triggered, it means a BlockConnected call has been received for a new block which has ancestor blocks that might never have been added to the transaction index. This could happen if a bug causes BlockConnected notifications to be sent ",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r174577538,174577538,src/index/txindex.cpp
ryanofsky,2018-03-14T20:10:20Z,"In commit ""[index] TxIndex initial sync thread.""\n\nCould declare static to avoid creating a linker symbol.",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r174594791,174594791,src/index/txindex.cpp
ryanofsky,2018-03-14T20:17:31Z,"In commit ""[init] Initialize and start TxIndex in init code.""\n\nMight be more consistent to use MakeUnique here too.",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r174596700,174596700,src/init.cpp
ryanofsky,2018-03-14T20:23:12Z,"In commit ""[init] Initialize and start TxIndex in init code.""\n\nCould combine lines and shorten by just passing `nTotalCache / 8` directly to min. Same for nBlockTreeDBCache above. ",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r174598230,174598230,src/init.cpp
ryanofsky,2018-03-14T20:24:58Z,"In commit ""[init] Initialize and start TxIndex in init code.""\n\nWhat's the reason for halving this even if txindex is disabled?",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r174598693,174598693,src/init.cpp
ryanofsky,2018-03-14T20:37:00Z,"[index] TxIndex method to wait until caught up.\n\nDescription above and function name seem a little misleading since this will only wait to be caught up with validation notifications, and will actually return false immediately during startup. This is probably worth mentioning in the comment above, and maybe in an additional comment where this is called. Could also give this this a less reassuri",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r174601865,174601865,src/index/txindex.h
ryanofsky,2018-03-14T20:45:05Z,"In commit ""[test] Simple unit test for TxIndex.""\n\nWould be good to validate `postx` variable contents here and below.\n\n",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r174604126,174604126,src/test/txindex_tests.cpp
ryanofsky,2018-03-14T20:52:28Z,"In commit ""[test] Simple unit test for TxIndex.""\n\nWould suggest adding a few more simple checks:\n\n* Test that sync thread actually works. I.e. that if new transactions are added before calling `Start()`, they don't show up, and that they do show up after calling `Start()`.\n* Check that transactions are persistent and reloaded correctly if txindex is closed and reopened.\n* Check BlockUn",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r174606064,174606064,src/test/txindex_tests.cpp
jimpo,2018-03-19T00:04:00Z,"Yeah, outdated comment, will fix. An earlier version of this refactor didn't split the DB out, just the logic.",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r175310704,175310704,src/index/txindex.h
jimpo,2018-03-19T00:49:51Z,"I have tried a few things, and the approach you describe is not worth the additional control flow complexity IMO. Consider also that the CompactRange calls are over a different range inside and outside of the loop (as noted above) and the newest version of the code adds an additional write to the batch outside of the loop to write the block hash.\n\nHowever, I understand the argument against dup",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r175312803,175312803,src/txdb.cpp
jimpo,2018-03-19T01:20:05Z,Done.,https://github.com/bitcoin/bitcoin/pull/11857#discussion_r175314357,175314357,src/txdb.h
jimpo,2018-03-19T01:20:14Z,Done.,https://github.com/bitcoin/bitcoin/pull/11857#discussion_r175314366,175314366,src/txdb.h
jimpo,2018-03-19T01:20:21Z,Done.,https://github.com/bitcoin/bitcoin/pull/11857#discussion_r175314377,175314377,src/txdb.cpp
jimpo,2018-03-19T01:28:22Z,Done.,https://github.com/bitcoin/bitcoin/pull/11857#discussion_r175314900,175314900,src/index/txindex.h
jimpo,2018-03-19T01:33:16Z,"Yes, it could be more efficient, but I feel that this produces the cleanest separation of responsibilities. Another way to do it might be to add a `TxIndexDB::AddTxToBatch(CDBBatch& batch, const uint256& txid, const CDiskTxPos& tx_pos)` method. Would you prefer that?",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r175315199,175315199,src/index/txindex.cpp
jimpo,2018-03-19T01:39:28Z,"I'll elaborate on the comment, but I don't understand the case you are describing. These checks should always pass as long as the ValidationInterface BlockConnected notifications are sent in order. If there is a race you can think of in the presence of reorgs or shutdowns, we should fix that.",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r175315594,175315594,src/index/txindex.cpp
jimpo,2018-03-19T01:52:36Z,"Correct me if I'm wrong, but I assume this could be inlined or something by the compiler if it were not declared static. I tried looking it up briefly and it said something along those lines, but then I got bored because I don't care all that much (something, something ODR-rule?). Will change if you still want.\n\nAlso, see https://github.com/bitcoin/bitcoin/pull/11857#discussion_r173645421.",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r175316500,175316500,src/index/txindex.cpp
jimpo,2018-03-19T01:57:09Z,"Good point, updated comment.",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r175316827,175316827,src/index/txindex.h
jimpo,2018-03-19T01:58:56Z,Done.,https://github.com/bitcoin/bitcoin/pull/11857#discussion_r175316948,175316948,src/init.cpp
jimpo,2018-03-19T02:01:37Z,"You're right, will revert. I was just kind of making up values here.",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r175317104,175317104,src/init.cpp
jimpo,2018-03-19T16:11:30Z,"Have you tried that code sample with `std::vector<Foo> foovec(10);` instead of `std::vector<Foo> foovec; foovec.reserve(10);`? The behavior is different. I assume that is the suggestion you are making, though maybe I misunderstood.",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r175492787,175492787,src/index/txindex.cpp
ryanofsky,2018-03-19T22:45:16Z,"https://github.com/bitcoin/bitcoin/pull/11857#discussion_r159900328\n\n> How do you feel about this approach?\n\nBetter, I'm still not sure why my suggestion doesn't work out, but this takes care of my concern.\n\n",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r175609305,175609305,src/txdb.cpp
ryanofsky,2018-03-19T22:50:48Z,"https://github.com/bitcoin/bitcoin/pull/11857#discussion_r174537635\n\n> Yes, it could be more efficient, but I feel that this produces the cleanest separation of responsibilities.\n\nI'm not sure what the separation of responsibilities is actually. If it's important to avoid a more direct write, can you say somewhere in a comment what the separation is supposed to be, and what benefits it pro",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r175610366,175610366,src/index/txindex.cpp
ryanofsky,2018-03-19T23:16:21Z,"https://github.com/bitcoin/bitcoin/pull/11857#discussion_r174577538\n\n> I'll elaborate on the comment, but I don't understand the case you are describing\n\nThe `BlockConnected` handler will drop any notifications as long as `m_synced` is false, but when `m_synced` becomes true, there is no code to clear out the queue, which could be backlogged. So if `m_synced` is set to true after a reorg b",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r175614840,175614840,src/index/txindex.cpp
ryanofsky,2018-03-19T23:29:16Z,"https://github.com/bitcoin/bitcoin/pull/11857#discussion_r174594791\n\n> Correct me if I'm wrong, but I assume this could be inlined or something by the compiler if it were not declared static. I tried looking it up briefly and it said something along those lines, but then I got bored because I don't care all that much (something, something ODR-rule?). Will change if you still want.\n\nHmm, I ",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r175617070,175617070,src/index/txindex.cpp
jimpo,2018-03-20T18:58:59Z,Done.,https://github.com/bitcoin/bitcoin/pull/11857#discussion_r175886450,175886450,src/test/txindex_tests.cpp
jimpo,2018-03-20T19:02:11Z,"I added checks for 1 & 3. With regards to persistence, the DB in the test environment currently uses the in-memory LevelDB environment rather than actually writing to disk, which makes cleanup nicer and probably makes the test marginally faster.\n\nHow important do you think it is to test the persistence at this layer? My feeling is that it's probably not adding much since it's just using the co",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r175887350,175887350,src/test/txindex_tests.cpp
TheBlueMatt,2018-03-28T16:13:06Z,Why compact the newdb?,https://github.com/bitcoin/bitcoin/pull/11857#discussion_r177805608,177805608,src/txdb.cpp
TheBlueMatt,2018-03-28T16:13:26Z,"Should probably do something to the old DB so that any old versions refuse to start when the txindex data is partially-migrated (not sure how to do it, or if its really possible, but it'd be nice to sidestep the inevitable ""I started the new version, and it took forever to start, so I killed it, downgraded again, and now my getrawtransaction-based scripts are all failing"" issues).",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r177805735,177805735,src/txdb.cpp
TheBlueMatt,2018-03-28T16:36:58Z,"This check is too strict for the BlockConnected validationinterface callback - you really want some variant of the SetBestChain validationinterface callback (which is called when new blocks/header tree is flushed to disik). Practically, I'm not sure what the best way to sovle this is:\n * You could move txindex stuff to a cache ala pcoinsTip and then flush it on some SetBestChain variant (which w",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r177812638,177812638,src/index/txindex.cpp
TheBlueMatt,2018-03-28T17:27:10Z,"It'd be nice to keep these kinds of globals in the same place. At least g_connman is in init.cpp and exposed as extern in net.h, so you could duplicate that (which is ""correct"" in that init ""owns"" the object).",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r177828216,177828216,src/index/txindex.cpp
TheBlueMatt,2018-03-28T17:37:55Z,Should we not check the return of BlockUntilSyncedToCurrentChain and maybe always return an error before its even gotten close to caught up?,https://github.com/bitcoin/bitcoin/pull/11857#discussion_r177831648,177831648,src/rest.cpp
TheBlueMatt,2018-03-28T17:47:02Z,"A distinct error code may make sense, though no opinion on what. Further, I'm not sure we should let GetTransaction call into the g_txindex if !f_txindex_ready (as it may return data from a stale block, but its also just generally not so useful). Maybe GetTransaction/FindTx can check if we're in sync yet.",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r177834651,177834651,src/rpc/rawtransaction.cpp
TheBlueMatt,2018-03-28T17:49:14Z,Also here - should report a different error of some kind if we're not in sync yet.,https://github.com/bitcoin/bitcoin/pull/11857#discussion_r177835267,177835267,src/rpc/rawtransaction.cpp
jimpo,2018-03-28T19:05:49Z,"That's what I did originally, but that caused problems when building tests. The test binary is not linked against init.cpp, it's linked against test_bitcoin_main.cpp, which is why `g_connman` is also defined there. That took me an annoying amount of time to figure out, and by the time I did I was so pissed off I decided to move it to `txindex.cpp`.\n\nThis whole thing where stuff in init has to ",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r177858240,177858240,src/index/txindex.cpp
TheBlueMatt,2018-03-28T19:15:01Z,"Hmm, yea, thats a bit gross. Still, if thats what we have now, maybe add a comment noting that in both places and at least be consistent?",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r177860703,177860703,src/index/txindex.cpp
jimpo,2018-03-29T21:20:34Z,"I don't understand. This line is in the `Init` method, not the BlockConnected callback. As long as we never prune entries from the block index, I don't see when this check would fail.",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r178184558,178184558,src/index/txindex.cpp
jimpo,2018-03-29T21:31:55Z,I'd prefer to just move the definition of `g_connman` to `net.cpp` or define them in the respective header files. Any reason they need to be `extern`? @theuni ,https://github.com/bitcoin/bitcoin/pull/11857#discussion_r178187241,178187241,src/index/txindex.cpp
jimpo,2018-03-29T21:38:24Z,"Good point, that's not necessary.",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r178188635,178188635,src/txdb.cpp
jimpo,2018-03-30T01:23:47Z,"Yeah, it's best effort, just like the lookup from CCoinsCacheView. If there's a response, great, otherwise the error message says that the not found may be inclusive. I agree that's kind of a weird behavior for the RPC, but if we change it, I could make the same argument for just removing the CCoinsCacheView lookup.",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r178217315,178217315,src/rpc/rawtransaction.cpp
TheBlueMatt,2018-03-30T16:34:58Z,"A block may be connected, but the block index may not be written to disk until much later. Thus, we can run far ahead here. Specifically, we flush in the following order:\n* Blocks are written to disk before connecting them (but not fsync'd, so not guarantees here!). At the same time entries are added to mapBlockIndex/CBlockIndex*s are created, but not flushed to disk)\n* Blocks are validated/co",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r178323651,178323651,src/index/txindex.cpp
jimpo,2018-03-30T17:10:14Z,What do you think of this approach? https://github.com/bitcoin/bitcoin/pull/11857/commits/c3b34b1b62ab034c5d6b6d700ae378291b19fc4b,https://github.com/bitcoin/bitcoin/pull/11857#discussion_r178329846,178329846,src/txdb.cpp
jimpo,2018-03-30T17:17:41Z,The error here already is not that useful and does not even indicate if the txindex is disabled. I'd like to fix this in a follow-up PR.,https://github.com/bitcoin/bitcoin/pull/11857#discussion_r178331224,178331224,src/rpc/rawtransaction.cpp
jimpo,2018-04-03T03:12:27Z,See last two commits (c837c6c & 297f89c) for fix.,https://github.com/bitcoin/bitcoin/pull/11857#discussion_r178703570,178703570,src/index/txindex.cpp
ryanofsky,2018-04-03T17:13:54Z,"In commit ""!fixup Migration to handle downgrades gracefully.""\n\nI really like this `DB_TXINDEX_BLOCK` solution to the problem of recovering from an interrupted upgrade. It's surprisingly simple.\n\nNot sure if it's worth the additional work, but it seems it'd be possible to write some simple unit tests that exercise this code by running it on databases with known states (with ""txindex"", with ",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r178897768,178897768,src/txdb.cpp
ryanofsky,2018-04-03T17:45:49Z,"In commit ""!fixup Change TxIndexDB to read/write locators instead of hashes.""\n\nWould it make sense to assert `locator.front() == m_best_block_index.GetBlockHash()` as a sanity check on event ordering?",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r178907241,178907241,src/index/txindex.cpp
ryanofsky,2018-04-03T18:08:11Z,"In commit ""[index] Create new TxIndex class.""\n\nIt still seems to me like it would be possible (though unlikely) for these errors to trigger spuriously, even when the events arrive in the right order, but the notification queue gets backlogged: https://github.com/bitcoin/bitcoin/pull/11857#discussion_r175614840\n\nIf this is true, the current comment seems misleading, and could mention the ed",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r178913914,178913914,src/index/txindex.cpp
jimpo,2018-04-04T22:02:29Z,"Yeah, that's a good idea.",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r179296749,179296749,src/index/txindex.cpp
jimpo,2018-04-04T22:04:26Z,"Ah, got it. Will update the comment and make this a warning log instead of a fatal error.",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r179297158,179297158,src/index/txindex.cpp
jimpo,2018-04-04T23:14:55Z,Fixed the comment and error handling.,https://github.com/bitcoin/bitcoin/pull/11857#discussion_r179310578,179310578,src/index/txindex.cpp
jamesob,2018-04-11T17:51:12Z,"If you end up having to change this PR for other reasons, might be worth leaving a comment to note that this works because leveldb is sorted by key and that you're making use of the first two bytes of the txid here. It took me a little head-scratching to see what was going on here (thanks to @ryanofsky for the help).",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r180842468,180842468,src/txdb.cpp
jamesob,2018-04-11T20:16:57Z,If we made this call in `TxIndex::BlockConnected` it seems like we could avoid defining this entire function. Is the reason you're not doing it there for efficiency's sake (e.g. maybe you're worried about the expense of constructing a locator)?,https://github.com/bitcoin/bitcoin/pull/11857#discussion_r180884263,180884263,src/index/txindex.cpp
jamesob,2018-04-11T20:22:55Z,"Since you're only ever using the tip of this locator to populate `m_best_block_index` in `TxIndex::Init()`, have you considered storing a single blockhash instead of a locator here? I guess there may be some beneficial future-proofing to having a locator on hand, but it's a bit more expensive to maintain (c.f. my comment on possibly eliminating `TxIndex::SetBestChain`).",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r180885992,180885992,src/txdb.h
jamesob,2018-04-11T20:30:57Z,Just curious: under what circumstances would a chainActive `best_block_index` have ever surpassed `chainActive.Tip()`?,https://github.com/bitcoin/bitcoin/pull/11857#discussion_r180888339,180888339,src/index/txindex.cpp
ryanofsky,2018-04-11T21:02:35Z,"@jamesob got me looking into this code, but since Stop() is called from the destructor, is it ok to call this here, or is there a problem like https://github.com/bitcoin/bitcoin/pull/12647#discussion_r179790601?",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r180897285,180897285,src/index/txindex.cpp
jamesob,2018-04-12T15:48:16Z,"nit: I think this return value is a bit confusing; if we didn't actually read the best block, why would we return true (regardless of the reason)?",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r181131048,181131048,src/txdb.cpp
jimpo,2018-04-12T18:16:17Z,"So `TxIndex::Init()` uses `FindForkInGlobalIndex` to populate `m_best_block_index`, which may not necessarily be the tip of the locator. One case where it might not be is when the active chain locator is written at the end of ThreadSync, which may contain locator entries for blocks that have not been flushed to disk.",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r181175539,181175539,src/txdb.h
jimpo,2018-04-12T18:23:09Z,"One scenario is if `ActivateBestChainStep` attempts to reorg to an invalid chain. So it would disconnect a few blocks, then realize that one of the blocks it tries to connect is invalid, leaving the tip at a lower height than it started. I suppose `InvalidateBlock` could cause this too.",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r181177572,181177572,src/index/txindex.cpp
jimpo,2018-04-12T18:32:47Z,"Yeah, there's a few reasons. 1) It's how CWallet works, which I looked at as a model. 2) I'd rather not `LOCK(cs_main)` on every `BlockConnected` if avoidable. We wouldn't even need the lock in this method if `SetBestChain` was called with the tip block index as an argument. 3) I think this gives better efficiency of block locator hits. So if the tip of the block locator is always the best block i",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r181180587,181180587,src/index/txindex.cpp
jimpo,2018-04-16T05:25:16Z,"Because we successfully read from the database -- there was just no locator written, which in this case means no blocks have been written to the index yet.",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r181624675,181624675,src/txdb.cpp
TheBlueMatt,2018-04-19T15:09:37Z,Can we get a better name here?,https://github.com/bitcoin/bitcoin/pull/11857#discussion_r182781418,182781418,src/txdb.cpp
TheBlueMatt,2018-04-19T15:41:17Z,"Writing a batch deleting the thing the iterator is pointing to before calling Next() just feels broken to me. It should be fine cause iterators appear to always take a snapshot, but could you at least add a comment noting that we rely on this being safe (and also do in CCoinsViewDB::Upgrade).",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r182792508,182792508,src/txdb.cpp
TheBlueMatt,2018-04-19T16:11:10Z,"I dont think this is right - if Read fails due to a DB error it will throw a dbwrapper_error, so we'll never get here anyway. It also makes the return value super confusing. Can we just make it have return semantics the same as every other DB function?",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r182802604,182802604,src/txdb.cpp
TheBlueMatt,2018-04-19T17:13:56Z,"It'd be nice to check that the genesis block matches (if locator was non-null) as the locator will always have it. Not a big deal since users shouldnt be moving the txinded db to anothter datadir, but...users love to do crazy things and break things.",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r182820878,182820878,src/index/txindex.cpp
TheBlueMatt,2018-04-19T17:22:46Z,"It'd be really nice to write the locator out at various points during this loop, as otherwise if you start a txindex sync and then kill your bitcoind while it takes its hour building the txindex you'll have to start against from scratch on next startup.",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r182823381,182823381,src/index/txindex.cpp
TheBlueMatt,2018-04-19T18:01:11Z,Still needs to be addressed.,https://github.com/bitcoin/bitcoin/pull/11857#discussion_r182834715,182834715,src/rest.cpp
jimpo,2018-04-19T21:47:53Z,https://github.com/bitcoin/bitcoin/pull/11857#issuecomment-377574766,https://github.com/bitcoin/bitcoin/pull/11857#discussion_r182894391,182894391,src/rest.cpp
jimpo,2018-04-19T21:50:20Z,Suggest one.,https://github.com/bitcoin/bitcoin/pull/11857#discussion_r182894886,182894886,src/txdb.cpp
jimpo,2018-04-19T21:57:45Z,"I'll change it, but I think the return value of `CDBWrapper::Read()` is super confusing on it's own. It means either that the key was not found or that the value at that key could not be deserialized into the provided struct (and that the return value is now in an unspecified state).",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r182896475,182896475,src/txdb.cpp
jimpo,2018-04-19T22:21:22Z,"Good point, done.",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r182901309,182901309,src/index/txindex.cpp
jimpo,2018-04-19T22:22:33Z,"Eh, what's the right behavior in that case? Seems to me like it would be to sync the txindex from genesis, which is exactly what this does.",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r182901581,182901581,src/index/txindex.cpp
jimpo,2018-04-19T22:24:37Z,"Seems like overkill to me to leave a comment for documented LevelDB behavior, but sure.",https://github.com/bitcoin/bitcoin/pull/11857#discussion_r182901963,182901963,src/txdb.cpp
