[
  {
    "sha": "135afa749c6e835ea33b8678cdb35da9640eede8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMzVhZmE3NDljNmU4MzVlYTMzYjg2NzhjZGIzNWRhOTY0MGVlZGU4",
    "commit": {
      "author": {
        "name": "Ivan Metlushko",
        "email": "metlushko@gmail.com",
        "date": "2020-10-12T10:10:10Z"
      },
      "committer": {
        "name": "Ivan Metlushko",
        "email": "metlushko@gmail.com",
        "date": "2020-10-13T11:42:59Z"
      },
      "message": "wallet: remove db mode string\n\nWe never need to open database in read-only mode as it's controlled\nseparately for every batch.\n\nAlso we can safely create database if it doesn't exist already\nbecause require_existing option is verified in MakeDatabase\nbefore creating a new WalletDatabase instance.",
      "tree": {
        "sha": "04a0d10cb618dd2365ae5cb1c4404234b70f4c2f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/04a0d10cb618dd2365ae5cb1c4404234b70f4c2f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/135afa749c6e835ea33b8678cdb35da9640eede8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/135afa749c6e835ea33b8678cdb35da9640eede8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/135afa749c6e835ea33b8678cdb35da9640eede8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/135afa749c6e835ea33b8678cdb35da9640eede8/comments",
    "author": {
      "login": "S3RK",
      "id": 1466284,
      "node_id": "MDQ6VXNlcjE0NjYyODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/S3RK",
      "html_url": "https://github.com/S3RK",
      "followers_url": "https://api.github.com/users/S3RK/followers",
      "following_url": "https://api.github.com/users/S3RK/following{/other_user}",
      "gists_url": "https://api.github.com/users/S3RK/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
      "organizations_url": "https://api.github.com/users/S3RK/orgs",
      "repos_url": "https://api.github.com/users/S3RK/repos",
      "events_url": "https://api.github.com/users/S3RK/events{/privacy}",
      "received_events_url": "https://api.github.com/users/S3RK/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "S3RK",
      "id": 1466284,
      "node_id": "MDQ6VXNlcjE0NjYyODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/S3RK",
      "html_url": "https://github.com/S3RK",
      "followers_url": "https://api.github.com/users/S3RK/followers",
      "following_url": "https://api.github.com/users/S3RK/following{/other_user}",
      "gists_url": "https://api.github.com/users/S3RK/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
      "organizations_url": "https://api.github.com/users/S3RK/orgs",
      "repos_url": "https://api.github.com/users/S3RK/repos",
      "events_url": "https://api.github.com/users/S3RK/events{/privacy}",
      "received_events_url": "https://api.github.com/users/S3RK/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "af22322dab1a2277483b2512723491a5fad1a606",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/af22322dab1a2277483b2512723491a5fad1a606",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/af22322dab1a2277483b2512723491a5fad1a606"
      }
    ],
    "stats": {
      "total": 55,
      "additions": 25,
      "deletions": 30
    },
    "files": [
      {
        "sha": "ae3c7ae7bb83fe6db4eabaeb03decdc163ad9b00",
        "filename": "src/wallet/bdb.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 13,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/135afa749c6e835ea33b8678cdb35da9640eede8/src/wallet/bdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/135afa749c6e835ea33b8678cdb35da9640eede8/src/wallet/bdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/bdb.cpp?ref=135afa749c6e835ea33b8678cdb35da9640eede8",
        "patch": "@@ -305,30 +305,26 @@ BerkeleyDatabase::~BerkeleyDatabase()\n     }\n }\n \n-BerkeleyBatch::BerkeleyBatch(BerkeleyDatabase& database, const char* pszMode, bool fFlushOnCloseIn) : pdb(nullptr), activeTxn(nullptr), m_cursor(nullptr), m_database(database)\n+BerkeleyBatch::BerkeleyBatch(BerkeleyDatabase& database, const bool read_only, bool fFlushOnCloseIn) : pdb(nullptr), activeTxn(nullptr), m_cursor(nullptr), m_database(database)\n {\n     database.AddRef();\n-    database.Open(pszMode);\n-    fReadOnly = (!strchr(pszMode, '+') && !strchr(pszMode, 'w'));\n+    database.Open();\n+    fReadOnly = read_only;\n     fFlushOnClose = fFlushOnCloseIn;\n     env = database.env.get();\n     pdb = database.m_db.get();\n     strFile = database.strFile;\n-    bool fCreate = strchr(pszMode, 'c') != nullptr;\n-    if (fCreate && !Exists(std::string(\"version\"))) {\n+    if (!Exists(std::string(\"version\"))) {\n         bool fTmp = fReadOnly;\n         fReadOnly = false;\n         Write(std::string(\"version\"), CLIENT_VERSION);\n         fReadOnly = fTmp;\n     }\n }\n \n-void BerkeleyDatabase::Open(const char* pszMode)\n+void BerkeleyDatabase::Open()\n {\n-    bool fCreate = strchr(pszMode, 'c') != nullptr;\n-    unsigned int nFlags = DB_THREAD;\n-    if (fCreate)\n-        nFlags |= DB_CREATE;\n+    unsigned int nFlags = DB_THREAD | DB_CREATE;\n \n     {\n         LOCK(cs_db);\n@@ -468,7 +464,7 @@ bool BerkeleyDatabase::Rewrite(const char* pszSkip)\n                 LogPrintf(\"BerkeleyBatch::Rewrite: Rewriting %s...\\n\", strFile);\n                 std::string strFileRes = strFile + \".rewrite\";\n                 { // surround usage of db with extra {}\n-                    BerkeleyBatch db(*this, \"r\");\n+                    BerkeleyBatch db(*this, true);\n                     std::unique_ptr<Db> pdbCopy = MakeUnique<Db>(env->dbenv.get(), 0);\n \n                     int ret = pdbCopy->open(nullptr,               // Txn pointer\n@@ -807,9 +803,9 @@ void BerkeleyDatabase::RemoveRef()\n     if (env) env->m_db_in_use.notify_all();\n }\n \n-std::unique_ptr<DatabaseBatch> BerkeleyDatabase::MakeBatch(const char* mode, bool flush_on_close)\n+std::unique_ptr<DatabaseBatch> BerkeleyDatabase::MakeBatch(bool flush_on_close)\n {\n-    return MakeUnique<BerkeleyBatch>(*this, mode, flush_on_close);\n+    return MakeUnique<BerkeleyBatch>(*this, false, flush_on_close);\n }\n \n bool ExistsBerkeleyDatabase(const fs::path& path)"
      },
      {
        "sha": "070590872b1e727bc5c31e707f849d87873388ae",
        "filename": "src/wallet/bdb.h",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/135afa749c6e835ea33b8678cdb35da9640eede8/src/wallet/bdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/135afa749c6e835ea33b8678cdb35da9640eede8/src/wallet/bdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/bdb.h?ref=135afa749c6e835ea33b8678cdb35da9640eede8",
        "patch": "@@ -109,9 +109,8 @@ class BerkeleyDatabase : public WalletDatabase\n \n     ~BerkeleyDatabase() override;\n \n-    /** Open the database if it is not already opened.\n-     *  Dummy function, doesn't do anything right now, but is needed for class abstraction */\n-    void Open(const char* mode) override;\n+    /** Open the database if it is not already opened. */\n+    void Open() override;\n \n     /** Rewrite the entire database on disk, with the exception of key pszSkip if non-zero\n      */\n@@ -164,7 +163,7 @@ class BerkeleyDatabase : public WalletDatabase\n     std::string strFile;\n \n     /** Make a BerkeleyBatch connected to this database */\n-    std::unique_ptr<DatabaseBatch> MakeBatch(const char* mode = \"r+\", bool flush_on_close = true) override;\n+    std::unique_ptr<DatabaseBatch> MakeBatch(bool flush_on_close = true) override;\n };\n \n /** RAII class that provides access to a Berkeley database */\n@@ -207,7 +206,7 @@ class BerkeleyBatch : public DatabaseBatch\n     BerkeleyDatabase& m_database;\n \n public:\n-    explicit BerkeleyBatch(BerkeleyDatabase& database, const char* pszMode = \"r+\", bool fFlushOnCloseIn=true);\n+    explicit BerkeleyBatch(BerkeleyDatabase& database, const bool fReadOnly, bool fFlushOnCloseIn=true);\n     ~BerkeleyBatch() override;\n \n     BerkeleyBatch(const BerkeleyBatch&) = delete;"
      },
      {
        "sha": "0004fc1afad5569aae02496131f8dd0ff540e7af",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/135afa749c6e835ea33b8678cdb35da9640eede8/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/135afa749c6e835ea33b8678cdb35da9640eede8/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=135afa749c6e835ea33b8678cdb35da9640eede8",
        "patch": "@@ -108,7 +108,7 @@ class WalletDatabase\n     virtual ~WalletDatabase() {};\n \n     /** Open the database if it is not already opened. */\n-    virtual void Open(const char* mode) = 0;\n+    virtual void Open() = 0;\n \n     //! Counts the number of active database users to be sure that the database is not closed while someone is using it\n     std::atomic<int> m_refcount{0};\n@@ -149,7 +149,7 @@ class WalletDatabase\n     int64_t nLastWalletUpdate;\n \n     /** Make a DatabaseBatch connected to this database */\n-    virtual std::unique_ptr<DatabaseBatch> MakeBatch(const char* mode = \"r+\", bool flush_on_close = true) = 0;\n+    virtual std::unique_ptr<DatabaseBatch> MakeBatch(bool flush_on_close = true) = 0;\n };\n \n /** RAII class that provides access to a DummyDatabase. Never fails. */\n@@ -178,7 +178,7 @@ class DummyBatch : public DatabaseBatch\n class DummyDatabase : public WalletDatabase\n {\n public:\n-    void Open(const char* mode) override {};\n+    void Open() override {};\n     void AddRef() override {}\n     void RemoveRef() override {}\n     bool Rewrite(const char* pszSkip=nullptr) override { return true; }\n@@ -189,7 +189,7 @@ class DummyDatabase : public WalletDatabase\n     void IncrementUpdateCounter() override { ++nUpdateCounter; }\n     void ReloadDbEnv() override {}\n     std::string Filename() override { return \"dummy\"; }\n-    std::unique_ptr<DatabaseBatch> MakeBatch(const char* mode = \"r+\", bool flush_on_close = true) override { return MakeUnique<DummyBatch>(); }\n+    std::unique_ptr<DatabaseBatch> MakeBatch(bool flush_on_close = true) override { return MakeUnique<DummyBatch>(); }\n };\n \n enum class DatabaseFormat {"
      },
      {
        "sha": "dfcfaf489a5d782037718af34d4e03b829f737fc",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/135afa749c6e835ea33b8678cdb35da9640eede8/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/135afa749c6e835ea33b8678cdb35da9640eede8/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=135afa749c6e835ea33b8678cdb35da9640eede8",
        "patch": "@@ -791,7 +791,7 @@ bool CWallet::MarkReplaced(const uint256& originalHash, const uint256& newHash)\n \n     wtx.mapValue[\"replaced_by_txid\"] = newHash.ToString();\n \n-    WalletBatch batch(*database, \"r+\");\n+    WalletBatch batch(*database);\n \n     bool success = true;\n     if (!batch.WriteTx(wtx)) {\n@@ -863,7 +863,7 @@ CWalletTx* CWallet::AddToWallet(CTransactionRef tx, const CWalletTx::Confirmatio\n {\n     LOCK(cs_wallet);\n \n-    WalletBatch batch(*database, \"r+\", fFlushOnClose);\n+    WalletBatch batch(*database, fFlushOnClose);\n \n     uint256 hash = tx->GetHash();\n \n@@ -1062,7 +1062,7 @@ bool CWallet::AbandonTransaction(const uint256& hashTx)\n {\n     LOCK(cs_wallet);\n \n-    WalletBatch batch(*database, \"r+\");\n+    WalletBatch batch(*database);\n \n     std::set<uint256> todo;\n     std::set<uint256> done;\n@@ -1125,7 +1125,7 @@ void CWallet::MarkConflicted(const uint256& hashBlock, int conflicting_height, c\n         return;\n \n     // Do not flush the wallet here for performance reasons\n-    WalletBatch batch(*database, \"r+\", false);\n+    WalletBatch batch(*database, false);\n \n     std::set<uint256> todo;\n     std::set<uint256> done;\n@@ -3190,7 +3190,7 @@ DBErrors CWallet::LoadWallet(bool& fFirstRunRet)\n     LOCK(cs_wallet);\n \n     fFirstRunRet = false;\n-    DBErrors nLoadWalletRet = WalletBatch(*database,\"cr+\").LoadWallet(this);\n+    DBErrors nLoadWalletRet = WalletBatch(*database).LoadWallet(this);\n     if (nLoadWalletRet == DBErrors::NEED_REWRITE)\n     {\n         if (database->Rewrite(\"\\x04pool\"))\n@@ -3217,7 +3217,7 @@ DBErrors CWallet::LoadWallet(bool& fFirstRunRet)\n DBErrors CWallet::ZapSelectTx(std::vector<uint256>& vHashIn, std::vector<uint256>& vHashOut)\n {\n     AssertLockHeld(cs_wallet);\n-    DBErrors nZapSelectTxRet = WalletBatch(*database, \"cr+\").ZapSelectTx(vHashIn, vHashOut);\n+    DBErrors nZapSelectTxRet = WalletBatch(*database).ZapSelectTx(vHashIn, vHashOut);\n     for (const uint256& hash : vHashOut) {\n         const auto& it = mapWallet.find(hash);\n         wtxOrdered.erase(it->second.m_it_wtxOrdered);"
      },
      {
        "sha": "7f1b86e458231d15933112933eccf880b7722bb1",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/135afa749c6e835ea33b8678cdb35da9640eede8/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/135afa749c6e835ea33b8678cdb35da9640eede8/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=135afa749c6e835ea33b8678cdb35da9640eede8",
        "patch": "@@ -204,8 +204,8 @@ class WalletBatch\n     }\n \n public:\n-    explicit WalletBatch(WalletDatabase& database, const char* pszMode = \"r+\", bool _fFlushOnClose = true) :\n-        m_batch(database.MakeBatch(pszMode, _fFlushOnClose)),\n+    explicit WalletBatch(WalletDatabase &database, bool _fFlushOnClose = true) :\n+        m_batch(database.MakeBatch(_fFlushOnClose)),\n         m_database(database)\n     {\n     }"
      }
    ]
  }
]