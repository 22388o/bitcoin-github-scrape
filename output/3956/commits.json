[
  {
    "sha": "5b63af7632ea700c8b5e35140f93b70dd33bab0c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YjYzYWY3NjMyZWE3MDBjOGI1ZTM1MTQwZjkzYjcwZGQzM2JhYjBj",
    "commit": {
      "author": {
        "name": "Alon Muroch",
        "email": "alonmuroch@gmail.com",
        "date": "2014-03-25T09:14:27Z"
      },
      "committer": {
        "name": "Alon Muroch",
        "email": "alonmuroch@gmail.com",
        "date": "2014-03-25T09:14:27Z"
      },
      "message": "added in qa/rpc-tests a test skeleton, changed listtransactions.py accordingly and added a template for future tests named TEST_EXAMPLE.py",
      "tree": {
        "sha": "af5d4c0557e3b297dc5e169e21d80a6877e513f7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/af5d4c0557e3b297dc5e169e21d80a6877e513f7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5b63af7632ea700c8b5e35140f93b70dd33bab0c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b63af7632ea700c8b5e35140f93b70dd33bab0c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5b63af7632ea700c8b5e35140f93b70dd33bab0c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b63af7632ea700c8b5e35140f93b70dd33bab0c/comments",
    "author": {
      "login": "alonmuroch",
      "id": 3773981,
      "node_id": "MDQ6VXNlcjM3NzM5ODE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3773981?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alonmuroch",
      "html_url": "https://github.com/alonmuroch",
      "followers_url": "https://api.github.com/users/alonmuroch/followers",
      "following_url": "https://api.github.com/users/alonmuroch/following{/other_user}",
      "gists_url": "https://api.github.com/users/alonmuroch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alonmuroch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alonmuroch/subscriptions",
      "organizations_url": "https://api.github.com/users/alonmuroch/orgs",
      "repos_url": "https://api.github.com/users/alonmuroch/repos",
      "events_url": "https://api.github.com/users/alonmuroch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alonmuroch/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "alonmuroch",
      "id": 3773981,
      "node_id": "MDQ6VXNlcjM3NzM5ODE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3773981?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alonmuroch",
      "html_url": "https://github.com/alonmuroch",
      "followers_url": "https://api.github.com/users/alonmuroch/followers",
      "following_url": "https://api.github.com/users/alonmuroch/following{/other_user}",
      "gists_url": "https://api.github.com/users/alonmuroch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alonmuroch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alonmuroch/subscriptions",
      "organizations_url": "https://api.github.com/users/alonmuroch/orgs",
      "repos_url": "https://api.github.com/users/alonmuroch/repos",
      "events_url": "https://api.github.com/users/alonmuroch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alonmuroch/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d138598f63cc980c1333e7c63a95b19e6b279025",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d138598f63cc980c1333e7c63a95b19e6b279025",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d138598f63cc980c1333e7c63a95b19e6b279025"
      }
    ],
    "stats": {
      "total": 369,
      "additions": 168,
      "deletions": 201
    },
    "files": [
      {
        "sha": "b3671518e926bae1351dbe92274fb8913297e826",
        "filename": "qa/rpc-tests/TEST_EXAMPLE.py",
        "status": "added",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b63af7632ea700c8b5e35140f93b70dd33bab0c/qa/rpc-tests/TEST_EXAMPLE.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b63af7632ea700c8b5e35140f93b70dd33bab0c/qa/rpc-tests/TEST_EXAMPLE.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/TEST_EXAMPLE.py?ref=5b63af7632ea700c8b5e35140f93b70dd33bab0c",
        "patch": "@@ -0,0 +1,25 @@\n+#!/usr/bin/env python\n+# Copyright (c) 2014 The Bitcoin Core developers\n+# Distributed under the MIT/X11 software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+# Exercise the listtransactions API\n+\n+# Add python-bitcoinrpc to module search path:\n+from util import *\n+from skeleton import Skeleton as baseclass\n+\n+# 1) Change class name to your test\n+class MyTest(baseclass):\n+    \n+    # 2) Change 'MyTest' to class name\n+    def run(self):\n+        super(MyTest, self).main()\n+  \n+    # 3) Implement tests\n+    def run_test(self,nodes):\n+        ''' '''\n+\n+# 4) Change 'MyTest' to class name\n+if __name__ == '__main__':\n+    MyTest().run()"
      },
      {
        "sha": "937190a4a7f74864f8e0f4e72d9b97be249a639c",
        "filename": "qa/rpc-tests/listtransactions.py",
        "status": "modified",
        "additions": 84,
        "deletions": 142,
        "changes": 226,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b63af7632ea700c8b5e35140f93b70dd33bab0c/qa/rpc-tests/listtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b63af7632ea700c8b5e35140f93b70dd33bab0c/qa/rpc-tests/listtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/listtransactions.py?ref=5b63af7632ea700c8b5e35140f93b70dd33bab0c",
        "patch": "@@ -6,151 +6,93 @@\n # Exercise the listtransactions API\n \n # Add python-bitcoinrpc to module search path:\n-import os\n-import sys\n-sys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)), \"python-bitcoinrpc\"))\n-\n-import json\n-import shutil\n-import subprocess\n-import tempfile\n-import traceback\n-\n-from bitcoinrpc.authproxy import AuthServiceProxy, JSONRPCException\n from util import *\n+from skeleton import Skeleton as baseclass\n \n-\n-def check_array_result(object_array, to_match, expected):\n-    \"\"\"\n-    Pass in array of JSON objects, a dictionary with key/value pairs\n-    to match against, and another dictionary with expected key/value\n-    pairs.\n-    \"\"\"\n-    num_matched = 0\n-    for item in object_array:\n-        all_match = True\n-        for key,value in to_match.items():\n-            if item[key] != value:\n-                all_match = False\n-        if not all_match:\n-            continue\n-        for key,value in expected.items():\n-            if item[key] != value:\n-                raise AssertionError(\"%s : expected %s=%s\"%(str(item), str(key), str(value)))\n-            num_matched = num_matched+1\n-    if num_matched == 0:\n-        raise AssertionError(\"No objects matched %s\"%(str(to_match)))\n-\n-def run_test(nodes):\n-    # Simple send, 0 to 1:\n-    txid = nodes[0].sendtoaddress(nodes[1].getnewaddress(), 0.1)\n-    sync_mempools(nodes)\n-    check_array_result(nodes[0].listtransactions(),\n-                       {\"txid\":txid},\n-                       {\"category\":\"send\",\"account\":\"\",\"amount\":Decimal(\"-0.1\"),\"confirmations\":0})\n-    check_array_result(nodes[1].listtransactions(),\n-                       {\"txid\":txid},\n-                       {\"category\":\"receive\",\"account\":\"\",\"amount\":Decimal(\"0.1\"),\"confirmations\":0})\n-    # mine a block, confirmations should change:\n-    nodes[0].setgenerate(True, 1)\n-    sync_blocks(nodes)\n-    check_array_result(nodes[0].listtransactions(),\n-                       {\"txid\":txid},\n-                       {\"category\":\"send\",\"account\":\"\",\"amount\":Decimal(\"-0.1\"),\"confirmations\":1})\n-    check_array_result(nodes[1].listtransactions(),\n-                       {\"txid\":txid},\n-                       {\"category\":\"receive\",\"account\":\"\",\"amount\":Decimal(\"0.1\"),\"confirmations\":1})\n-\n-    # send-to-self:\n-    txid = nodes[0].sendtoaddress(nodes[0].getnewaddress(), 0.2)\n-    check_array_result(nodes[0].listtransactions(),\n-                       {\"txid\":txid, \"category\":\"send\"},\n-                       {\"amount\":Decimal(\"-0.2\")})\n-    check_array_result(nodes[0].listtransactions(),\n-                       {\"txid\":txid, \"category\":\"receive\"},\n-                       {\"amount\":Decimal(\"0.2\")})\n-\n-    # sendmany from node1: twice to self, twice to node2:\n-    send_to = { nodes[0].getnewaddress() : 0.11, nodes[1].getnewaddress() : 0.22,\n-                nodes[0].getaccountaddress(\"from1\") : 0.33, nodes[1].getaccountaddress(\"toself\") : 0.44 }\n-    txid = nodes[1].sendmany(\"\", send_to)\n-    sync_mempools(nodes)\n-    check_array_result(nodes[1].listtransactions(),\n-                       {\"category\":\"send\",\"amount\":Decimal(\"-0.11\")},\n-                       {\"txid\":txid} )\n-    check_array_result(nodes[0].listtransactions(),\n-                       {\"category\":\"receive\",\"amount\":Decimal(\"0.11\")},\n-                       {\"txid\":txid} )\n-    check_array_result(nodes[1].listtransactions(),\n-                       {\"category\":\"send\",\"amount\":Decimal(\"-0.22\")},\n-                       {\"txid\":txid} )\n-    check_array_result(nodes[1].listtransactions(),\n-                       {\"category\":\"receive\",\"amount\":Decimal(\"0.22\")},\n-                       {\"txid\":txid} )\n-    check_array_result(nodes[1].listtransactions(),\n-                       {\"category\":\"send\",\"amount\":Decimal(\"-0.33\")},\n-                       {\"txid\":txid} )\n-    check_array_result(nodes[0].listtransactions(),\n-                       {\"category\":\"receive\",\"amount\":Decimal(\"0.33\")},\n-                       {\"txid\":txid, \"account\" : \"from1\"} )\n-    check_array_result(nodes[1].listtransactions(),\n-                       {\"category\":\"send\",\"amount\":Decimal(\"-0.44\")},\n-                       {\"txid\":txid, \"account\" : \"\"} )\n-    check_array_result(nodes[1].listtransactions(),\n-                       {\"category\":\"receive\",\"amount\":Decimal(\"0.44\")},\n-                       {\"txid\":txid, \"account\" : \"toself\"} )\n+class ListtransactionsTest(baseclass):\n     \n-\n-def main():\n-    import optparse\n-\n-    parser = optparse.OptionParser(usage=\"%prog [options]\")\n-    parser.add_option(\"--nocleanup\", dest=\"nocleanup\", default=False, action=\"store_true\",\n-                      help=\"Leave bitcoinds and test.* datadir on exit or error\")\n-    parser.add_option(\"--srcdir\", dest=\"srcdir\", default=\"../../src\",\n-                      help=\"Source directory containing bitcoind/bitcoin-cli (default: %default%)\")\n-    parser.add_option(\"--tmpdir\", dest=\"tmpdir\", default=tempfile.mkdtemp(prefix=\"test\"),\n-                      help=\"Root directory for datadirs\")\n-    (options, args) = parser.parse_args()\n-\n-    os.environ['PATH'] = options.srcdir+\":\"+os.environ['PATH']\n-\n-    check_json_precision()\n-\n-    success = False\n-    nodes = []\n-    try:\n-        print(\"Initializing test directory \"+options.tmpdir)\n-        if not os.path.isdir(options.tmpdir):\n-            os.makedirs(options.tmpdir)\n-        initialize_chain(options.tmpdir)\n-\n-        nodes = start_nodes(2, options.tmpdir)\n-        connect_nodes(nodes[1], 0)\n+    def run(self):\n+        super(ListtransactionsTest, self).main()\n+    \n+    def check_array_result(self,object_array, to_match, expected):\n+        \"\"\"\n+        Pass in array of JSON objects, a dictionary with key/value pairs\n+        to match against, and another dictionary with expected key/value\n+        pairs.\n+        \"\"\"\n+        num_matched = 0\n+        for item in object_array:\n+            all_match = True\n+            for key,value in to_match.items():\n+                if item[key] != value:\n+                    all_match = False\n+            if not all_match:\n+                continue\n+            for key,value in expected.items():\n+                if item[key] != value:\n+                    raise AssertionError(\"%s : expected %s=%s\"%(str(item), str(key), str(value)))\n+                num_matched = num_matched+1\n+        if num_matched == 0:\n+            raise AssertionError(\"No objects matched %s\"%(str(to_match)))\n+\n+    def run_test(self,nodes):\n+        # Simple send, 0 to 1:\n+        txid = nodes[0].sendtoaddress(nodes[1].getnewaddress(), 0.1)\n+        sync_mempools(nodes)\n+        self.check_array_result(nodes[0].listtransactions(),\n+                           {\"txid\":txid},\n+                           {\"category\":\"send\",\"account\":\"\",\"amount\":Decimal(\"-0.1\"),\"confirmations\":0})\n+        self.check_array_result(nodes[1].listtransactions(),\n+                           {\"txid\":txid},\n+                           {\"category\":\"receive\",\"account\":\"\",\"amount\":Decimal(\"0.1\"),\"confirmations\":0})\n+        # mine a block, confirmations should change:\n+        nodes[0].setgenerate(True, 1)\n         sync_blocks(nodes)\n-\n-        run_test(nodes)\n-\n-        success = True\n-\n-    except AssertionError as e:\n-        print(\"Assertion failed: \"+e.message)\n-    except Exception as e:\n-        print(\"Unexpected exception caught during testing: \"+str(e))\n-        traceback.print_tb(sys.exc_info()[2])\n-\n-    if not options.nocleanup:\n-        print(\"Cleaning up\")\n-        stop_nodes(nodes)\n-        wait_bitcoinds()\n-        shutil.rmtree(options.tmpdir)\n-\n-    if success:\n-        print(\"Tests successful\")\n-        sys.exit(0)\n-    else:\n-        print(\"Failed\")\n-        sys.exit(1)\n+        self.check_array_result(nodes[0].listtransactions(),\n+                           {\"txid\":txid},\n+                           {\"category\":\"send\",\"account\":\"\",\"amount\":Decimal(\"-0.1\"),\"confirmations\":1})\n+        self.check_array_result(nodes[1].listtransactions(),\n+                           {\"txid\":txid},\n+                           {\"category\":\"receive\",\"account\":\"\",\"amount\":Decimal(\"0.1\"),\"confirmations\":1})\n+\n+        # send-to-self:\n+        txid = nodes[0].sendtoaddress(nodes[0].getnewaddress(), 0.2)\n+        self.check_array_result(nodes[0].listtransactions(),\n+                           {\"txid\":txid, \"category\":\"send\"},\n+                           {\"amount\":Decimal(\"-0.2\")})\n+        self.check_array_result(nodes[0].listtransactions(),\n+                           {\"txid\":txid, \"category\":\"receive\"},\n+                           {\"amount\":Decimal(\"0.2\")})\n+\n+        # sendmany from node1: twice to self, twice to node2:\n+        send_to = { nodes[0].getnewaddress() : 0.11, nodes[1].getnewaddress() : 0.22,\n+                    nodes[0].getaccountaddress(\"from1\") : 0.33, nodes[1].getaccountaddress(\"toself\") : 0.44 }\n+        txid = nodes[1].sendmany(\"\", send_to)\n+        sync_mempools(nodes)\n+        self.check_array_result(nodes[1].listtransactions(),\n+                           {\"category\":\"send\",\"amount\":Decimal(\"-0.11\")},\n+                           {\"txid\":txid} )\n+        self.check_array_result(nodes[0].listtransactions(),\n+                           {\"category\":\"receive\",\"amount\":Decimal(\"0.11\")},\n+                           {\"txid\":txid} )\n+        self.check_array_result(nodes[1].listtransactions(),\n+                           {\"category\":\"send\",\"amount\":Decimal(\"-0.22\")},\n+                           {\"txid\":txid} )\n+        self.check_array_result(nodes[1].listtransactions(),\n+                           {\"category\":\"receive\",\"amount\":Decimal(\"0.22\")},\n+                           {\"txid\":txid} )\n+        self.check_array_result(nodes[1].listtransactions(),\n+                           {\"category\":\"send\",\"amount\":Decimal(\"-0.33\")},\n+                           {\"txid\":txid} )\n+        self.check_array_result(nodes[0].listtransactions(),\n+                           {\"category\":\"receive\",\"amount\":Decimal(\"0.33\")},\n+                           {\"txid\":txid, \"account\" : \"from1\"} )\n+        self.check_array_result(nodes[1].listtransactions(),\n+                           {\"category\":\"send\",\"amount\":Decimal(\"-0.44\")},\n+                           {\"txid\":txid, \"account\" : \"\"} )\n+        self.check_array_result(nodes[1].listtransactions(),\n+                           {\"category\":\"receive\",\"amount\":Decimal(\"0.44\")},\n+                           {\"txid\":txid, \"account\" : \"toself\"} )\n \n if __name__ == '__main__':\n-    main()\n+    ListtransactionsTest().run()"
      },
      {
        "sha": "0156f62ea05331316c31b6cb6eeaf7d08a3ec8d3",
        "filename": "qa/rpc-tests/skeleton.py",
        "status": "modified",
        "additions": 59,
        "deletions": 59,
        "changes": 118,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b63af7632ea700c8b5e35140f93b70dd33bab0c/qa/rpc-tests/skeleton.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b63af7632ea700c8b5e35140f93b70dd33bab0c/qa/rpc-tests/skeleton.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/skeleton.py?ref=5b63af7632ea700c8b5e35140f93b70dd33bab0c",
        "patch": "@@ -21,63 +21,63 @@\n from bitcoinrpc.authproxy import AuthServiceProxy, JSONRPCException\n from util import *\n \n+class Skeleton(object):\n+    \n+    def run_test(self,nodes):\n+        # Replace this as appropriate\n+        for node in nodes:\n+            assert_equal(node.getblockcount(), 200)\n+            assert_equal(node.getbalance(), 25*50)\n+\n+    def main(self):\n+        import optparse\n+\n+        parser = optparse.OptionParser(usage=\"%prog [options]\")\n+        parser.add_option(\"--nocleanup\", dest=\"nocleanup\", default=False, action=\"store_true\",\n+                          help=\"Leave bitcoinds and test.* datadir on exit or error\")\n+        parser.add_option(\"--srcdir\", dest=\"srcdir\", default=\"../../src\",\n+                          help=\"Source directory containing bitcoind/bitcoin-cli (default: %default%)\")\n+        parser.add_option(\"--tmpdir\", dest=\"tmpdir\", default=tempfile.mkdtemp(prefix=\"test\"),\n+                          help=\"Root directory for datadirs\")\n+        (options, args) = parser.parse_args()\n+\n+        os.environ['PATH'] = options.srcdir+\":\"+os.environ['PATH']\n+\n+        check_json_precision()\n+\n+        success = False\n+        nodes = []\n+        try:\n+            print(\"Initializing test directory \"+options.tmpdir)\n+            if not os.path.isdir(options.tmpdir):\n+                os.makedirs(options.tmpdir)\n+            initialize_chain(options.tmpdir)\n+\n+            nodes = start_nodes(2, options.tmpdir)\n+            connect_nodes(nodes[1], 0)\n+            sync_blocks(nodes)\n+\n+            self.run_test(nodes)\n+\n+            success = True\n+\n+        except AssertionError as e:\n+            print(\"Assertion failed: \"+e.message)\n+        except Exception as e:\n+            print(\"Unexpected exception caught during testing: \"+str(e))\n+            traceback.print_tb(sys.exc_info()[2])\n+\n+        if not options.nocleanup:\n+            print(\"Cleaning up\")\n+            stop_nodes(nodes)\n+            wait_bitcoinds()\n+            shutil.rmtree(options.tmpdir)\n+\n+        if success:\n+            print(\"Tests successful\")\n+            sys.exit(0)\n+        else:\n+            print(\"Failed\")\n+            sys.exit(1)\n+\n \n-def run_test(nodes):\n-    # Replace this as appropriate\n-    for node in nodes:\n-        assert_equal(node.getblockcount(), 200)\n-        assert_equal(node.getbalance(), 25*50)\n-\n-def main():\n-    import optparse\n-\n-    parser = optparse.OptionParser(usage=\"%prog [options]\")\n-    parser.add_option(\"--nocleanup\", dest=\"nocleanup\", default=False, action=\"store_true\",\n-                      help=\"Leave bitcoinds and test.* datadir on exit or error\")\n-    parser.add_option(\"--srcdir\", dest=\"srcdir\", default=\"../../src\",\n-                      help=\"Source directory containing bitcoind/bitcoin-cli (default: %default%)\")\n-    parser.add_option(\"--tmpdir\", dest=\"tmpdir\", default=tempfile.mkdtemp(prefix=\"test\"),\n-                      help=\"Root directory for datadirs\")\n-    (options, args) = parser.parse_args()\n-\n-    os.environ['PATH'] = options.srcdir+\":\"+os.environ['PATH']\n-\n-    check_json_precision()\n-\n-    success = False\n-    nodes = []\n-    try:\n-        print(\"Initializing test directory \"+options.tmpdir)\n-        if not os.path.isdir(options.tmpdir):\n-            os.makedirs(options.tmpdir)\n-        initialize_chain(options.tmpdir)\n-\n-        nodes = start_nodes(2, options.tmpdir)\n-        connect_nodes(nodes[1], 0)\n-        sync_blocks(nodes)\n-\n-        run_test(nodes)\n-\n-        success = True\n-\n-    except AssertionError as e:\n-        print(\"Assertion failed: \"+e.message)\n-    except Exception as e:\n-        print(\"Unexpected exception caught during testing: \"+str(e))\n-        traceback.print_tb(sys.exc_info()[2])\n-\n-    if not options.nocleanup:\n-        print(\"Cleaning up\")\n-        stop_nodes(nodes)\n-        wait_bitcoinds()\n-        shutil.rmtree(options.tmpdir)\n-\n-    if success:\n-        print(\"Tests successful\")\n-        sys.exit(0)\n-    else:\n-        print(\"Failed\")\n-        sys.exit(1)\n-\n-if __name__ == '__main__':\n-    main()"
      }
    ]
  },
  {
    "sha": "48b991a930d516a74cf525aaa02159ce0d857aac",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0OGI5OTFhOTMwZDUxNmE3NGNmNTI1YWFhMDIxNTljZTBkODU3YWFj",
    "commit": {
      "author": {
        "name": "Alon Muroch",
        "email": "alonmuroch@gmail.com",
        "date": "2014-03-27T08:51:58Z"
      },
      "committer": {
        "name": "Alon Muroch",
        "email": "alonmuroch@gmail.com",
        "date": "2014-03-27T08:51:58Z"
      },
      "message": "small changes",
      "tree": {
        "sha": "4c5bc1928860c537c8aa2d8c6cb4ca9817199c19",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4c5bc1928860c537c8aa2d8c6cb4ca9817199c19"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/48b991a930d516a74cf525aaa02159ce0d857aac",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/48b991a930d516a74cf525aaa02159ce0d857aac",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/48b991a930d516a74cf525aaa02159ce0d857aac",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/48b991a930d516a74cf525aaa02159ce0d857aac/comments",
    "author": {
      "login": "alonmuroch",
      "id": 3773981,
      "node_id": "MDQ6VXNlcjM3NzM5ODE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3773981?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alonmuroch",
      "html_url": "https://github.com/alonmuroch",
      "followers_url": "https://api.github.com/users/alonmuroch/followers",
      "following_url": "https://api.github.com/users/alonmuroch/following{/other_user}",
      "gists_url": "https://api.github.com/users/alonmuroch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alonmuroch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alonmuroch/subscriptions",
      "organizations_url": "https://api.github.com/users/alonmuroch/orgs",
      "repos_url": "https://api.github.com/users/alonmuroch/repos",
      "events_url": "https://api.github.com/users/alonmuroch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alonmuroch/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "alonmuroch",
      "id": 3773981,
      "node_id": "MDQ6VXNlcjM3NzM5ODE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3773981?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alonmuroch",
      "html_url": "https://github.com/alonmuroch",
      "followers_url": "https://api.github.com/users/alonmuroch/followers",
      "following_url": "https://api.github.com/users/alonmuroch/following{/other_user}",
      "gists_url": "https://api.github.com/users/alonmuroch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alonmuroch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alonmuroch/subscriptions",
      "organizations_url": "https://api.github.com/users/alonmuroch/orgs",
      "repos_url": "https://api.github.com/users/alonmuroch/repos",
      "events_url": "https://api.github.com/users/alonmuroch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alonmuroch/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5b63af7632ea700c8b5e35140f93b70dd33bab0c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b63af7632ea700c8b5e35140f93b70dd33bab0c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5b63af7632ea700c8b5e35140f93b70dd33bab0c"
      }
    ],
    "stats": {
      "total": 79,
      "additions": 36,
      "deletions": 43
    },
    "files": [
      {
        "sha": "b3e049531e4cf9d03d721afd4c50652ac4e11c65",
        "filename": "qa/rpc-tests/TEST_EXAMPLE.py",
        "status": "modified",
        "additions": 3,
        "deletions": 7,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/48b991a930d516a74cf525aaa02159ce0d857aac/qa/rpc-tests/TEST_EXAMPLE.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/48b991a930d516a74cf525aaa02159ce0d857aac/qa/rpc-tests/TEST_EXAMPLE.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/TEST_EXAMPLE.py?ref=48b991a930d516a74cf525aaa02159ce0d857aac",
        "patch": "@@ -11,15 +11,11 @@\n \n # 1) Change class name to your test\n class MyTest(baseclass):\n-    \n-    # 2) Change 'MyTest' to class name\n-    def run(self):\n-        super(MyTest, self).main()\n   \n-    # 3) Implement tests\n+    # 2) Implement tests\n     def run_test(self,nodes):\n         ''' '''\n \n-# 4) Change 'MyTest' to class name\n+# 3) Change 'MyTest' to class name\n if __name__ == '__main__':\n-    MyTest().run()\n+    MyTest().main()"
      },
      {
        "sha": "57e1ce76f84f0234b080009b75cbbf737f8a002d",
        "filename": "qa/rpc-tests/listtransactions.py",
        "status": "modified",
        "additions": 33,
        "deletions": 36,
        "changes": 69,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/48b991a930d516a74cf525aaa02159ce0d857aac/qa/rpc-tests/listtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/48b991a930d516a74cf525aaa02159ce0d857aac/qa/rpc-tests/listtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/listtransactions.py?ref=48b991a930d516a74cf525aaa02159ce0d857aac",
        "patch": "@@ -9,58 +9,55 @@\n from util import *\n from skeleton import Skeleton as baseclass\n \n-class ListtransactionsTest(baseclass):\n-    \n-    def run(self):\n-        super(ListtransactionsTest, self).main()\n-    \n-    def check_array_result(self,object_array, to_match, expected):\n-        \"\"\"\n+def check_array_result(object_array, to_match, expected):\n+    \"\"\"\n         Pass in array of JSON objects, a dictionary with key/value pairs\n         to match against, and another dictionary with expected key/value\n         pairs.\n         \"\"\"\n-        num_matched = 0\n-        for item in object_array:\n-            all_match = True\n-            for key,value in to_match.items():\n-                if item[key] != value:\n-                    all_match = False\n-            if not all_match:\n-                continue\n-            for key,value in expected.items():\n-                if item[key] != value:\n-                    raise AssertionError(\"%s : expected %s=%s\"%(str(item), str(key), str(value)))\n-                num_matched = num_matched+1\n-        if num_matched == 0:\n-            raise AssertionError(\"No objects matched %s\"%(str(to_match)))\n+    num_matched = 0\n+    for item in object_array:\n+        all_match = True\n+        for key,value in to_match.items():\n+            if item[key] != value:\n+                all_match = False\n+        if not all_match:\n+            continue\n+        for key,value in expected.items():\n+            if item[key] != value:\n+                raise AssertionError(\"%s : expected %s=%s\"%(str(item), str(key), str(value)))\n+            num_matched = num_matched+1\n+    if num_matched == 0:\n+        raise AssertionError(\"No objects matched %s\"%(str(to_match)))\n+\n+class ListtransactionsTest(baseclass):\n \n     def run_test(self,nodes):\n         # Simple send, 0 to 1:\n         txid = nodes[0].sendtoaddress(nodes[1].getnewaddress(), 0.1)\n         sync_mempools(nodes)\n-        self.check_array_result(nodes[0].listtransactions(),\n+        check_array_result(nodes[0].listtransactions(),\n                            {\"txid\":txid},\n                            {\"category\":\"send\",\"account\":\"\",\"amount\":Decimal(\"-0.1\"),\"confirmations\":0})\n-        self.check_array_result(nodes[1].listtransactions(),\n+        check_array_result(nodes[1].listtransactions(),\n                            {\"txid\":txid},\n                            {\"category\":\"receive\",\"account\":\"\",\"amount\":Decimal(\"0.1\"),\"confirmations\":0})\n         # mine a block, confirmations should change:\n         nodes[0].setgenerate(True, 1)\n         sync_blocks(nodes)\n-        self.check_array_result(nodes[0].listtransactions(),\n+        check_array_result(nodes[0].listtransactions(),\n                            {\"txid\":txid},\n                            {\"category\":\"send\",\"account\":\"\",\"amount\":Decimal(\"-0.1\"),\"confirmations\":1})\n-        self.check_array_result(nodes[1].listtransactions(),\n+        check_array_result(nodes[1].listtransactions(),\n                            {\"txid\":txid},\n                            {\"category\":\"receive\",\"account\":\"\",\"amount\":Decimal(\"0.1\"),\"confirmations\":1})\n \n         # send-to-self:\n         txid = nodes[0].sendtoaddress(nodes[0].getnewaddress(), 0.2)\n-        self.check_array_result(nodes[0].listtransactions(),\n+        check_array_result(nodes[0].listtransactions(),\n                            {\"txid\":txid, \"category\":\"send\"},\n                            {\"amount\":Decimal(\"-0.2\")})\n-        self.check_array_result(nodes[0].listtransactions(),\n+        check_array_result(nodes[0].listtransactions(),\n                            {\"txid\":txid, \"category\":\"receive\"},\n                            {\"amount\":Decimal(\"0.2\")})\n \n@@ -69,30 +66,30 @@ def run_test(self,nodes):\n                     nodes[0].getaccountaddress(\"from1\") : 0.33, nodes[1].getaccountaddress(\"toself\") : 0.44 }\n         txid = nodes[1].sendmany(\"\", send_to)\n         sync_mempools(nodes)\n-        self.check_array_result(nodes[1].listtransactions(),\n+        check_array_result(nodes[1].listtransactions(),\n                            {\"category\":\"send\",\"amount\":Decimal(\"-0.11\")},\n                            {\"txid\":txid} )\n-        self.check_array_result(nodes[0].listtransactions(),\n+        check_array_result(nodes[0].listtransactions(),\n                            {\"category\":\"receive\",\"amount\":Decimal(\"0.11\")},\n                            {\"txid\":txid} )\n-        self.check_array_result(nodes[1].listtransactions(),\n+        check_array_result(nodes[1].listtransactions(),\n                            {\"category\":\"send\",\"amount\":Decimal(\"-0.22\")},\n                            {\"txid\":txid} )\n-        self.check_array_result(nodes[1].listtransactions(),\n+        check_array_result(nodes[1].listtransactions(),\n                            {\"category\":\"receive\",\"amount\":Decimal(\"0.22\")},\n                            {\"txid\":txid} )\n-        self.check_array_result(nodes[1].listtransactions(),\n+        check_array_result(nodes[1].listtransactions(),\n                            {\"category\":\"send\",\"amount\":Decimal(\"-0.33\")},\n                            {\"txid\":txid} )\n-        self.check_array_result(nodes[0].listtransactions(),\n+        check_array_result(nodes[0].listtransactions(),\n                            {\"category\":\"receive\",\"amount\":Decimal(\"0.33\")},\n                            {\"txid\":txid, \"account\" : \"from1\"} )\n-        self.check_array_result(nodes[1].listtransactions(),\n+        check_array_result(nodes[1].listtransactions(),\n                            {\"category\":\"send\",\"amount\":Decimal(\"-0.44\")},\n                            {\"txid\":txid, \"account\" : \"\"} )\n-        self.check_array_result(nodes[1].listtransactions(),\n+        check_array_result(nodes[1].listtransactions(),\n                            {\"category\":\"receive\",\"amount\":Decimal(\"0.44\")},\n                            {\"txid\":txid, \"account\" : \"toself\"} )\n \n if __name__ == '__main__':\n-    ListtransactionsTest().run()\n+    ListtransactionsTest().main()"
      }
    ]
  }
]