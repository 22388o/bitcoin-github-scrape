[
  {
    "sha": "3351c91ed402895dcb4f803a29d2cac70ccfa8b4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMzUxYzkxZWQ0MDI4OTVkY2I0ZjgwM2EyOWQyY2FjNzBjY2ZhOGI0",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2020-05-04T09:50:43Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2020-06-05T23:41:09Z"
      },
      "message": "refactor: Make CScriptVisitor stateless",
      "tree": {
        "sha": "f642eef9db904718929dc7890a451af131731b22",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f642eef9db904718929dc7890a451af131731b22"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3351c91ed402895dcb4f803a29d2cac70ccfa8b4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3351c91ed402895dcb4f803a29d2cac70ccfa8b4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3351c91ed402895dcb4f803a29d2cac70ccfa8b4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3351c91ed402895dcb4f803a29d2cac70ccfa8b4/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "24f70290642c9c5108d3dc62dbe055f5d1bcff9d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/24f70290642c9c5108d3dc62dbe055f5d1bcff9d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/24f70290642c9c5108d3dc62dbe055f5d1bcff9d"
      }
    ],
    "stats": {
      "total": 52,
      "additions": 20,
      "deletions": 32
    },
    "files": [
      {
        "sha": "7e3d2f6fbca506d95bc932f721407d83a71947a8",
        "filename": "src/script/standard.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 32,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3351c91ed402895dcb4f803a29d2cac70ccfa8b4/src/script/standard.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3351c91ed402895dcb4f803a29d2cac70ccfa8b4/src/script/standard.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.cpp?ref=3351c91ed402895dcb4f803a29d2cac70ccfa8b4",
        "patch": "@@ -239,59 +239,47 @@ bool ExtractDestinations(const CScript& scriptPubKey, txnouttype& typeRet, std::\n \n namespace\n {\n-class CScriptVisitor : public boost::static_visitor<bool>\n+class CScriptVisitor : public boost::static_visitor<CScript>\n {\n-private:\n-    CScript *script;\n public:\n-    explicit CScriptVisitor(CScript *scriptin) { script = scriptin; }\n-\n-    bool operator()(const CNoDestination &dest) const {\n-        script->clear();\n-        return false;\n+    CScript operator()(const CNoDestination& dest) const\n+    {\n+        return CScript();\n     }\n \n-    bool operator()(const PKHash &keyID) const {\n-        script->clear();\n-        *script << OP_DUP << OP_HASH160 << ToByteVector(keyID) << OP_EQUALVERIFY << OP_CHECKSIG;\n-        return true;\n+    CScript operator()(const PKHash& keyID) const\n+    {\n+        return CScript() << OP_DUP << OP_HASH160 << ToByteVector(keyID) << OP_EQUALVERIFY << OP_CHECKSIG;\n     }\n \n-    bool operator()(const ScriptHash &scriptID) const {\n-        script->clear();\n-        *script << OP_HASH160 << ToByteVector(scriptID) << OP_EQUAL;\n-        return true;\n+    CScript operator()(const ScriptHash& scriptID) const\n+    {\n+        return CScript() << OP_HASH160 << ToByteVector(scriptID) << OP_EQUAL;\n     }\n \n-    bool operator()(const WitnessV0KeyHash& id) const\n+    CScript operator()(const WitnessV0KeyHash& id) const\n     {\n-        script->clear();\n-        *script << OP_0 << ToByteVector(id);\n-        return true;\n+        return CScript() << OP_0 << ToByteVector(id);\n     }\n \n-    bool operator()(const WitnessV0ScriptHash& id) const\n+    CScript operator()(const WitnessV0ScriptHash& id) const\n     {\n-        script->clear();\n-        *script << OP_0 << ToByteVector(id);\n-        return true;\n+        return CScript() << OP_0 << ToByteVector(id);\n     }\n \n-    bool operator()(const WitnessUnknown& id) const\n+    CScript operator()(const WitnessUnknown& id) const\n     {\n-        script->clear();\n-        *script << CScript::EncodeOP_N(id.version) << std::vector<unsigned char>(id.program, id.program + id.length);\n-        return true;\n+        return CScript() << CScript::EncodeOP_N(id.version) << std::vector<unsigned char>(id.program, id.program + id.length);\n     }\n };\n+\n+const CScriptVisitor g_script_visitor;\n+\n } // namespace\n \n CScript GetScriptForDestination(const CTxDestination& dest)\n {\n-    CScript script;\n-\n-    boost::apply_visitor(CScriptVisitor(&script), dest);\n-    return script;\n+    return boost::apply_visitor(::g_script_visitor, dest);\n }\n \n CScript GetScriptForRawPubKey(const CPubKey& pubKey)"
      }
    ]
  }
]