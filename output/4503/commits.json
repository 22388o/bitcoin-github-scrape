[
  {
    "sha": "ff6a7af154f2151c93a06b7ee86c167603c5ac55",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZjZhN2FmMTU0ZjIxNTFjOTNhMDZiN2VlODZjMTY3NjAzYzVhYzU1",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-05-13T04:43:24Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-07-11T12:48:02Z"
      },
      "message": "getblocktemplate: longpolling support",
      "tree": {
        "sha": "5042feb9576de0a4857ac41e444774a87f79194f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5042feb9576de0a4857ac41e444774a87f79194f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ff6a7af154f2151c93a06b7ee86c167603c5ac55",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff6a7af154f2151c93a06b7ee86c167603c5ac55",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ff6a7af154f2151c93a06b7ee86c167603c5ac55",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff6a7af154f2151c93a06b7ee86c167603c5ac55/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f0fc81a0832a8fa93c5d7e619e25f739d72b49f3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f0fc81a0832a8fa93c5d7e619e25f739d72b49f3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f0fc81a0832a8fa93c5d7e619e25f739d72b49f3"
      }
    ],
    "stats": {
      "total": 83,
      "additions": 82,
      "deletions": 1
    },
    "files": [
      {
        "sha": "9e97a916829bba3537acbc208213806bca603a61",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff6a7af154f2151c93a06b7ee86c167603c5ac55/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff6a7af154f2151c93a06b7ee86c167603c5ac55/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=ff6a7af154f2151c93a06b7ee86c167603c5ac55",
        "patch": "@@ -41,6 +41,8 @@ CCriticalSection cs_main;\n map<uint256, CBlockIndex*> mapBlockIndex;\n CChain chainActive;\n int64_t nTimeBestReceived = 0;\n+CWaitableCriticalSection csBestBlock;\n+CConditionVariable cvBlockChange;\n int nScriptCheckThreads = 0;\n bool fImporting = false;\n bool fReindex = false;\n@@ -1944,11 +1946,14 @@ void static UpdateTip(CBlockIndex *pindexNew) {\n     // New best block\n     nTimeBestReceived = GetTime();\n     mempool.AddTransactionsUpdated(1);\n+\n     LogPrintf(\"UpdateTip: new best=%s  height=%d  log2_work=%.8g  tx=%lu  date=%s progress=%f\\n\",\n       chainActive.Tip()->GetBlockHash().ToString(), chainActive.Height(), log(chainActive.Tip()->nChainWork.getdouble())/log(2.0), (unsigned long)chainActive.Tip()->nChainTx,\n       DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", chainActive.Tip()->GetBlockTime()),\n       Checkpoints::GuessVerificationProgress(chainActive.Tip()));\n \n+    cvBlockChange.notify_all();\n+\n     // Check the version of the last 100 blocks to see if we need to upgrade:\n     if (!fIsInitialDownload)\n     {"
      },
      {
        "sha": "a6834125719d4b6c95c8189a3b4df6b1673131b6",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff6a7af154f2151c93a06b7ee86c167603c5ac55/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff6a7af154f2151c93a06b7ee86c167603c5ac55/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=ff6a7af154f2151c93a06b7ee86c167603c5ac55",
        "patch": "@@ -87,6 +87,8 @@ extern uint64_t nLastBlockTx;\n extern uint64_t nLastBlockSize;\n extern const std::string strMessageMagic;\n extern int64_t nTimeBestReceived;\n+extern CWaitableCriticalSection csBestBlock;\n+extern CConditionVariable cvBlockChange;\n extern bool fImporting;\n extern bool fReindex;\n extern bool fBenchmark;"
      },
      {
        "sha": "6f72ea7404034618fbfca803f8cfb15ff3c12564",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 59,
        "deletions": 1,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff6a7af154f2151c93a06b7ee86c167603c5ac55/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff6a7af154f2151c93a06b7ee86c167603c5ac55/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=ff6a7af154f2151c93a06b7ee86c167603c5ac55",
        "patch": "@@ -324,6 +324,7 @@ Value getblocktemplate(const Array& params, bool fHelp)\n          );\n \n     std::string strMode = \"template\";\n+    Value lpval = Value::null;\n     if (params.size() > 0)\n     {\n         const Object& oparam = params[0].get_obj();\n@@ -336,6 +337,7 @@ Value getblocktemplate(const Array& params, bool fHelp)\n         }\n         else\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid mode\");\n+        lpval = find_value(oparam, \"longpollid\");\n     }\n \n     if (strMode != \"template\")\n@@ -347,8 +349,63 @@ Value getblocktemplate(const Array& params, bool fHelp)\n     if (IsInitialBlockDownload())\n         throw JSONRPCError(RPC_CLIENT_IN_INITIAL_DOWNLOAD, \"Bitcoin is downloading blocks...\");\n \n-    // Update block\n     static unsigned int nTransactionsUpdatedLast;\n+\n+    if (lpval.type() != null_type)\n+    {\n+        // Wait to respond until either the best block changes, OR a minute has passed and there are more transactions\n+        uint256 hashWatchedChain;\n+        boost::system_time checktxtime;\n+        unsigned int nTransactionsUpdatedLastLP;\n+\n+        if (lpval.type() == str_type)\n+        {\n+            // Format: <hashBestChain><nTransactionsUpdatedLast>\n+            std::string lpstr = lpval.get_str();\n+\n+            hashWatchedChain.SetHex(lpstr.substr(0, 64));\n+            nTransactionsUpdatedLastLP = atoi64(lpstr.substr(64));\n+        }\n+        else\n+        {\n+            // NOTE: Spec does not specify behaviour for non-string longpollid, but this makes testing easier\n+            hashWatchedChain = chainActive.Tip()->GetBlockHash();\n+            nTransactionsUpdatedLastLP = nTransactionsUpdatedLast;\n+        }\n+\n+        // Release the wallet and main lock while waiting\n+#ifdef ENABLE_WALLET\n+        if(pwalletMain)\n+            LEAVE_CRITICAL_SECTION(pwalletMain->cs_wallet);\n+#endif\n+        LEAVE_CRITICAL_SECTION(cs_main);\n+        {\n+            checktxtime = boost::get_system_time() + boost::posix_time::minutes(1);\n+\n+            boost::unique_lock<boost::mutex> lock(csBestBlock);\n+            while (chainActive.Tip()->GetBlockHash() == hashWatchedChain && IsRPCRunning())\n+            {\n+                if (!cvBlockChange.timed_wait(lock, checktxtime))\n+                {\n+                    // Timeout: Check transactions for update\n+                    if (mempool.GetTransactionsUpdated() != nTransactionsUpdatedLastLP)\n+                        break;\n+                    checktxtime += boost::posix_time::seconds(10);\n+                }\n+            }\n+        }\n+        ENTER_CRITICAL_SECTION(cs_main);\n+#ifdef ENABLE_WALLET\n+        if(pwalletMain)\n+            ENTER_CRITICAL_SECTION(pwalletMain->cs_wallet);\n+#endif\n+\n+        if (!IsRPCRunning())\n+            throw JSONRPCError(RPC_CLIENT_NOT_CONNECTED, \"Shutting down\");\n+        // TODO: Maybe recheck connections/IBD and (if something wrong) send an expires-immediately template to stop miners?\n+    }\n+\n+    // Update block\n     static CBlockIndex* pindexPrev;\n     static int64_t nStart;\n     static CBlockTemplate* pblocktemplate;\n@@ -436,6 +493,7 @@ Value getblocktemplate(const Array& params, bool fHelp)\n     result.push_back(Pair(\"transactions\", transactions));\n     result.push_back(Pair(\"coinbaseaux\", aux));\n     result.push_back(Pair(\"coinbasevalue\", (int64_t)pblock->vtx[0].vout[0].nValue));\n+    result.push_back(Pair(\"longpollid\", chainActive.Tip()->GetBlockHash().GetHex() + i64tostr(nTransactionsUpdatedLast)));\n     result.push_back(Pair(\"target\", hashTarget.GetHex()));\n     result.push_back(Pair(\"mintime\", (int64_t)pindexPrev->GetMedianTimePast()+1));\n     result.push_back(Pair(\"mutable\", aMutable));"
      },
      {
        "sha": "bb8e56c78548cec4744f0ed438e0b16b96b8553a",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff6a7af154f2151c93a06b7ee86c167603c5ac55/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff6a7af154f2151c93a06b7ee86c167603c5ac55/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=ff6a7af154f2151c93a06b7ee86c167603c5ac55",
        "patch": "@@ -32,6 +32,7 @@ using namespace std;\n \n static std::string strRPCUserColonPass;\n \n+static bool fRPCRunning = false;\n // These are created by StartRPCThreads, destroyed in StopRPCThreads\n static asio::io_service* rpc_io_service = NULL;\n static map<string, boost::shared_ptr<deadline_timer> > deadlineTimers;\n@@ -659,6 +660,7 @@ void StartRPCThreads()\n     rpc_worker_group = new boost::thread_group();\n     for (int i = 0; i < GetArg(\"-rpcthreads\", 4); i++)\n         rpc_worker_group->create_thread(boost::bind(&asio::io_service::run, rpc_io_service));\n+    fRPCRunning = true;\n }\n \n void StartDummyRPCThread()\n@@ -671,12 +673,15 @@ void StartDummyRPCThread()\n         rpc_dummy_work = new asio::io_service::work(*rpc_io_service);\n         rpc_worker_group = new boost::thread_group();\n         rpc_worker_group->create_thread(boost::bind(&asio::io_service::run, rpc_io_service));\n+        fRPCRunning = true;\n     }\n }\n \n void StopRPCThreads()\n {\n     if (rpc_io_service == NULL) return;\n+    // Set this to false first, so that longpolling loops will exit when woken up\n+    fRPCRunning = false;\n \n     // First, cancel all timers and acceptors\n     // This is not done automatically by ->stop(), and in some cases the destructor of\n@@ -698,6 +703,7 @@ void StopRPCThreads()\n     deadlineTimers.clear();\n \n     rpc_io_service->stop();\n+    cvBlockChange.notify_all();\n     if (rpc_worker_group != NULL)\n         rpc_worker_group->join_all();\n     delete rpc_dummy_work; rpc_dummy_work = NULL;\n@@ -706,6 +712,11 @@ void StopRPCThreads()\n     delete rpc_io_service; rpc_io_service = NULL;\n }\n \n+bool IsRPCRunning()\n+{\n+    return fRPCRunning;\n+}\n+\n void RPCRunHandler(const boost::system::error_code& err, boost::function<void(void)> func)\n {\n     if (!err)"
      },
      {
        "sha": "31badadd6d714cf564171e4b81b8488044a213a6",
        "filename": "src/rpcserver.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff6a7af154f2151c93a06b7ee86c167603c5ac55/src/rpcserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff6a7af154f2151c93a06b7ee86c167603c5ac55/src/rpcserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.h?ref=ff6a7af154f2151c93a06b7ee86c167603c5ac55",
        "patch": "@@ -40,6 +40,8 @@ void StartRPCThreads();\n void StartDummyRPCThread();\n /* Stop RPC threads */\n void StopRPCThreads();\n+/* Query whether RPC is running */\n+bool IsRPCRunning();\n \n /*\n   Type-check arguments; throws JSONRPCError if wrong type given. Does not check that"
      },
      {
        "sha": "cd319e017157ae833d94020069835e01863913a6",
        "filename": "src/sync.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff6a7af154f2151c93a06b7ee86c167603c5ac55/src/sync.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff6a7af154f2151c93a06b7ee86c167603c5ac55/src/sync.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.h?ref=ff6a7af154f2151c93a06b7ee86c167603c5ac55",
        "patch": "@@ -84,6 +84,9 @@ typedef AnnotatedMixin<boost::recursive_mutex> CCriticalSection;\n /** Wrapped boost mutex: supports waiting but not recursive locking */\n typedef AnnotatedMixin<boost::mutex> CWaitableCriticalSection;\n \n+/** Just a typedef for boost::condition_variable, can be wrapped later if desired */\n+typedef boost::condition_variable CConditionVariable;\n+\n #ifdef DEBUG_LOCKORDER\n void EnterCritical(const char* pszName, const char* pszFile, int nLine, void* cs, bool fTry = false);\n void LeaveCritical();"
      }
    ]
  },
  {
    "sha": "b45a6e8394e8c9e2886ae8b9aa0734996448ff37",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNDVhNmU4Mzk0ZThjOWUyODg2YWU4YjlhYTA3MzQ5OTY0NDhmZjM3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-07-11T12:39:50Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-07-11T12:48:16Z"
      },
      "message": "Add test for getblocktemplate longpolling",
      "tree": {
        "sha": "b517a166815b2d9da1b218190cc9fc3c8bd188db",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b517a166815b2d9da1b218190cc9fc3c8bd188db"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b45a6e8394e8c9e2886ae8b9aa0734996448ff37",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b45a6e8394e8c9e2886ae8b9aa0734996448ff37",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b45a6e8394e8c9e2886ae8b9aa0734996448ff37",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b45a6e8394e8c9e2886ae8b9aa0734996448ff37/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ff6a7af154f2151c93a06b7ee86c167603c5ac55",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff6a7af154f2151c93a06b7ee86c167603c5ac55",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ff6a7af154f2151c93a06b7ee86c167603c5ac55"
      }
    ],
    "stats": {
      "total": 98,
      "additions": 97,
      "deletions": 1
    },
    "files": [
      {
        "sha": "8d97719ec34644205113899d7029a2c001d6e131",
        "filename": "qa/rpc-tests/getblocktemplate.py",
        "status": "added",
        "additions": 94,
        "deletions": 0,
        "changes": 94,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b45a6e8394e8c9e2886ae8b9aa0734996448ff37/qa/rpc-tests/getblocktemplate.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b45a6e8394e8c9e2886ae8b9aa0734996448ff37/qa/rpc-tests/getblocktemplate.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/getblocktemplate.py?ref=b45a6e8394e8c9e2886ae8b9aa0734996448ff37",
        "patch": "@@ -0,0 +1,94 @@\n+#!/usr/bin/env python\n+# Copyright (c) 2014 The Bitcoin Core developers\n+# Distributed under the MIT/X11 software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+# Exercise the listtransactions API\n+\n+from test_framework import BitcoinTestFramework\n+from bitcoinrpc.authproxy import AuthServiceProxy, JSONRPCException\n+from util import *\n+\n+\n+def check_array_result(object_array, to_match, expected):\n+    \"\"\"\n+    Pass in array of JSON objects, a dictionary with key/value pairs\n+    to match against, and another dictionary with expected key/value\n+    pairs.\n+    \"\"\"\n+    num_matched = 0\n+    for item in object_array:\n+        all_match = True\n+        for key,value in to_match.items():\n+            if item[key] != value:\n+                all_match = False\n+        if not all_match:\n+            continue\n+        for key,value in expected.items():\n+            if item[key] != value:\n+                raise AssertionError(\"%s : expected %s=%s\"%(str(item), str(key), str(value)))\n+            num_matched = num_matched+1\n+    if num_matched == 0:\n+        raise AssertionError(\"No objects matched %s\"%(str(to_match)))\n+\n+import threading\n+\n+class LongpollThread(threading.Thread):\n+    def __init__(self, node):\n+        threading.Thread.__init__(self)\n+        # query current longpollid\n+        templat = node.getblocktemplate()\n+        self.longpollid = templat['longpollid']\n+        # create a new connection to the node, we can't use the same\n+        # connection from two threads\n+        self.node = AuthServiceProxy(node.url, timeout=600)\n+\n+    def run(self):\n+        self.node.getblocktemplate({'longpollid':self.longpollid})\n+\n+class GetBlockTemplateTest(BitcoinTestFramework):\n+    '''\n+    Test longpolling with getblocktemplate.\n+    '''\n+\n+    def run_test(self, nodes):\n+        print \"Warning: this test will take about 70 seconds in the best case. Be patient.\"\n+        nodes[0].setgenerate(True, 10)\n+        templat = nodes[0].getblocktemplate()\n+        longpollid = templat['longpollid']\n+        # longpollid should not change between successive invocations if nothing else happens\n+        templat2 = nodes[0].getblocktemplate()\n+        assert(templat2['longpollid'] == longpollid)\n+\n+        # Test 1: test that the longpolling wait if we do nothing\n+        thr = LongpollThread(nodes[0])\n+        thr.start()\n+        # check that thread still lives\n+        thr.join(5)  # wait 5 seconds or until thread exits\n+        assert(thr.is_alive())\n+\n+        # Test 2: test that longpoll will terminate if another node generates a block\n+        nodes[1].setgenerate(True, 1)  # generate a block on another node\n+        # check that thread will exit now that new transaction entered mempool\n+        thr.join(5)  # wait 5 seconds or until thread exits\n+        assert(not thr.is_alive())\n+\n+        # Test 3: test that longpoll will terminate if we generate a block ourselves\n+        thr = LongpollThread(nodes[0])\n+        thr.start()\n+        nodes[0].setgenerate(True, 1)  # generate a block on another node\n+        thr.join(5)  # wait 5 seconds or until thread exits\n+        assert(not thr.is_alive())\n+\n+        # Test 4: test that introducing a new transaction into the mempool will terminate the longpoll\n+        thr = LongpollThread(nodes[0])\n+        thr.start()\n+        # generate a random transaction and submit it\n+        (txid, txhex, fee) = random_transaction(nodes, Decimal(\"1.1\"), Decimal(\"0.0\"), Decimal(\"0.001\"), 20)\n+        # after one minute, every 10 seconds the mempool is probed, so in 80 seconds it should have returned\n+        thr.join(60 + 20)\n+        assert(not thr.is_alive())\n+\n+if __name__ == '__main__':\n+    GetBlockTemplateTest().main()\n+"
      },
      {
        "sha": "fc7ae857760fce5bf621294282594f38b8f8fe80",
        "filename": "qa/rpc-tests/util.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b45a6e8394e8c9e2886ae8b9aa0734996448ff37/qa/rpc-tests/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b45a6e8394e8c9e2886ae8b9aa0734996448ff37/qa/rpc-tests/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/util.py?ref=b45a6e8394e8c9e2886ae8b9aa0734996448ff37",
        "patch": "@@ -156,7 +156,9 @@ def start_node(i, dir, extra_args=None, rpchost=None):\n                           [\"-rpcwait\", \"getblockcount\"], stdout=devnull)\n     devnull.close()\n     url = \"http://rt:rt@%s:%d\" % (rpchost or '127.0.0.1', rpc_port(i))\n-    return AuthServiceProxy(url)\n+    proxy = AuthServiceProxy(url)\n+    proxy.url = url # store URL on proxy for info\n+    return proxy\n \n def start_nodes(num_nodes, dir, extra_args=None, rpchost=None):\n     \"\"\""
      }
    ]
  }
]