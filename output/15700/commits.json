[
  {
    "sha": "b7bd34dd5a4708185e34e7009772e9255efc4794",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiN2JkMzRkZDVhNDcwODE4NWUzNGU3MDA5NzcyZTkyNTVlZmM0Nzk0",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2019-03-29T19:10:03Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2019-03-29T19:30:16Z"
      },
      "message": "Synchronize validation interface registration",
      "tree": {
        "sha": "8981cdadc2aea54725f909e519a8bd03e3713ed3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8981cdadc2aea54725f909e519a8bd03e3713ed3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b7bd34dd5a4708185e34e7009772e9255efc4794",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7bd34dd5a4708185e34e7009772e9255efc4794",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b7bd34dd5a4708185e34e7009772e9255efc4794",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7bd34dd5a4708185e34e7009772e9255efc4794/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0baf4b1f96635cdf5f26b36753321fe3ea40d4a8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0baf4b1f96635cdf5f26b36753321fe3ea40d4a8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0baf4b1f96635cdf5f26b36753321fe3ea40d4a8"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 23,
      "deletions": 16
    },
    "files": [
      {
        "sha": "d830fc6265bb383b3fd1f3138dcae6480ddf71c6",
        "filename": "src/validationinterface.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 10,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7bd34dd5a4708185e34e7009772e9255efc4794/src/validationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7bd34dd5a4708185e34e7009772e9255efc4794/src/validationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.cpp?ref=b7bd34dd5a4708185e34e7009772e9255efc4794",
        "patch": "@@ -94,16 +94,22 @@ CMainSignals& GetMainSignals()\n }\n \n void RegisterValidationInterface(CValidationInterface* pwalletIn) {\n-    ValidationInterfaceConnections& conns = g_signals.m_internals->m_connMainSignals[pwalletIn];\n-    conns.UpdatedBlockTip = g_signals.m_internals->UpdatedBlockTip.connect(std::bind(&CValidationInterface::UpdatedBlockTip, pwalletIn, std::placeholders::_1, std::placeholders::_2, std::placeholders::_3));\n-    conns.TransactionAddedToMempool = g_signals.m_internals->TransactionAddedToMempool.connect(std::bind(&CValidationInterface::TransactionAddedToMempool, pwalletIn, std::placeholders::_1));\n-    conns.BlockConnected = g_signals.m_internals->BlockConnected.connect(std::bind(&CValidationInterface::BlockConnected, pwalletIn, std::placeholders::_1, std::placeholders::_2, std::placeholders::_3));\n-    conns.BlockDisconnected = g_signals.m_internals->BlockDisconnected.connect(std::bind(&CValidationInterface::BlockDisconnected, pwalletIn, std::placeholders::_1));\n-    conns.TransactionRemovedFromMempool = g_signals.m_internals->TransactionRemovedFromMempool.connect(std::bind(&CValidationInterface::TransactionRemovedFromMempool, pwalletIn, std::placeholders::_1));\n-    conns.ChainStateFlushed = g_signals.m_internals->ChainStateFlushed.connect(std::bind(&CValidationInterface::ChainStateFlushed, pwalletIn, std::placeholders::_1));\n-    conns.Broadcast = g_signals.m_internals->Broadcast.connect(std::bind(&CValidationInterface::ResendWalletTransactions, pwalletIn, std::placeholders::_1, std::placeholders::_2));\n-    conns.BlockChecked = g_signals.m_internals->BlockChecked.connect(std::bind(&CValidationInterface::BlockChecked, pwalletIn, std::placeholders::_1, std::placeholders::_2));\n-    conns.NewPoWValidBlock = g_signals.m_internals->NewPoWValidBlock.connect(std::bind(&CValidationInterface::NewPoWValidBlock, pwalletIn, std::placeholders::_1, std::placeholders::_2));\n+    AssertLockNotHeld(cs_main);\n+    std::promise<void> promise;\n+    CallFunctionInValidationInterfaceQueue([&promise, pwalletIn] {\n+        ValidationInterfaceConnections& conns = g_signals.m_internals->m_connMainSignals[pwalletIn];\n+        conns.UpdatedBlockTip = g_signals.m_internals->UpdatedBlockTip.connect(std::bind(&CValidationInterface::UpdatedBlockTip, pwalletIn, std::placeholders::_1, std::placeholders::_2, std::placeholders::_3));\n+        conns.TransactionAddedToMempool = g_signals.m_internals->TransactionAddedToMempool.connect(std::bind(&CValidationInterface::TransactionAddedToMempool, pwalletIn, std::placeholders::_1));\n+        conns.BlockConnected = g_signals.m_internals->BlockConnected.connect(std::bind(&CValidationInterface::BlockConnected, pwalletIn, std::placeholders::_1, std::placeholders::_2, std::placeholders::_3));\n+        conns.BlockDisconnected = g_signals.m_internals->BlockDisconnected.connect(std::bind(&CValidationInterface::BlockDisconnected, pwalletIn, std::placeholders::_1));\n+        conns.TransactionRemovedFromMempool = g_signals.m_internals->TransactionRemovedFromMempool.connect(std::bind(&CValidationInterface::TransactionRemovedFromMempool, pwalletIn, std::placeholders::_1));\n+        conns.ChainStateFlushed = g_signals.m_internals->ChainStateFlushed.connect(std::bind(&CValidationInterface::ChainStateFlushed, pwalletIn, std::placeholders::_1));\n+        conns.Broadcast = g_signals.m_internals->Broadcast.connect(std::bind(&CValidationInterface::ResendWalletTransactions, pwalletIn, std::placeholders::_1, std::placeholders::_2));\n+        conns.BlockChecked = g_signals.m_internals->BlockChecked.connect(std::bind(&CValidationInterface::BlockChecked, pwalletIn, std::placeholders::_1, std::placeholders::_2));\n+        conns.NewPoWValidBlock = g_signals.m_internals->NewPoWValidBlock.connect(std::bind(&CValidationInterface::NewPoWValidBlock, pwalletIn, std::placeholders::_1, std::placeholders::_2));\n+        promise.set_value();\n+    });\n+    promise.get_future().wait();\n }\n \n void UnregisterValidationInterface(CValidationInterface* pwalletIn) {"
      },
      {
        "sha": "085221a53a8d98dd3e22268f7482970c0729a93d",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7bd34dd5a4708185e34e7009772e9255efc4794/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7bd34dd5a4708185e34e7009772e9255efc4794/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=b7bd34dd5a4708185e34e7009772e9255efc4794",
        "patch": "@@ -29,7 +29,7 @@ enum class MemPoolRemovalReason;\n // These functions dispatch to one or all registered wallets\n \n /** Register a wallet to receive updates from core */\n-void RegisterValidationInterface(CValidationInterface* pwalletIn);\n+void RegisterValidationInterface(CValidationInterface* pwalletIn) LOCKS_EXCLUDED(cs_main);\n /** Unregister a wallet from core */\n void UnregisterValidationInterface(CValidationInterface* pwalletIn);\n /** Unregister all wallets from core */"
      },
      {
        "sha": "6a26b2fca6dd02de6d190c3b0f658666b545727e",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7bd34dd5a4708185e34e7009772e9255efc4794/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7bd34dd5a4708185e34e7009772e9255efc4794/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=b7bd34dd5a4708185e34e7009772e9255efc4794",
        "patch": "@@ -4293,6 +4293,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n     // Try to top up keypool. No-op if the wallet is locked.\n     walletInstance->TopUpKeyPool();\n \n+    {\n     auto locked_chain = chain.lock();\n     LOCK(walletInstance->cs_wallet);\n \n@@ -4380,18 +4381,18 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n         }\n     }\n \n-    chain.loadWallet(interfaces::MakeWallet(walletInstance));\n-\n-    // Register with the validation interface. It's ok to do this after rescan since we're still holding locked_chain.\n-    walletInstance->m_chain_notifications_handler = chain.handleNotifications(*walletInstance);\n-\n     walletInstance->SetBroadcastTransactions(gArgs.GetBoolArg(\"-walletbroadcast\", DEFAULT_WALLETBROADCAST));\n \n     {\n         walletInstance->WalletLogPrintf(\"setKeyPool.size() = %u\\n\",      walletInstance->GetKeyPoolSize());\n         walletInstance->WalletLogPrintf(\"mapWallet.size() = %u\\n\",       walletInstance->mapWallet.size());\n         walletInstance->WalletLogPrintf(\"mapAddressBook.size() = %u\\n\",  walletInstance->mapAddressBook.size());\n     }\n+    }\n+\n+    chain.loadWallet(interfaces::MakeWallet(walletInstance));\n+\n+    walletInstance->m_chain_notifications_handler = chain.handleNotifications(*walletInstance);\n \n     return walletInstance;\n }"
      }
    ]
  }
]