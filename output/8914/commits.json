[
  {
    "sha": "5eaaa83ac1f5eb525f93e2808fafd73f5ed97013",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZWFhYTgzYWMxZjVlYjUyNWY5M2UyODA4ZmFmZDczZjVlZDk3MDEz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-13T14:19:20Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-17T11:08:35Z"
      },
      "message": "Kill insecure_random and associated global state\n\nThere are only a few uses of `insecure_random` outside the tests.\nThis PR replaces uses of insecure_random (and its accompanying global\nstate) in the core code with an FastRandomContext that is automatically\nseeded on creation.\n\nThis is meant to be used for inner loops. The FastRandomContext\ncan be in the outer scope, or the class itself, then rand32() is used\ninside the loop. Useful e.g. for pushing addresses in CNode or the fee\nrounding, or randomization for coin selection.\n\nAs a context is created per purpose, thus it gets rid of\ncross-thread unprotected shared usage of a single set of globals, this\nshould also get rid of the potential race conditions.\n\n- I'd say TxMempool::check is not called enough to warrant using a special\n  fast random context, this is switched to GetRand() (open for\n  discussion...)\n\n- The use of `insecure_rand` in ConnectThroughProxy has been replaced by\n  an atomic integer counter. The only goal here is to have a different\n  credentials pair for each connection to go on a different Tor circuit,\n  it does not need to be random nor unpredictable.\n\n- To avoid having a FastRandomContext on every CNode, the context is\n  passed into PushAddress as appropriate.\n\nThere remains an insecure_random for test usage in `test_random.h`.",
      "tree": {
        "sha": "f4c1303e431e91743be29f775bdec90426e40702",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f4c1303e431e91743be29f775bdec90426e40702"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8d46429c83ec3815d0c595bf541ef5557c6b4942",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d46429c83ec3815d0c595bf541ef5557c6b4942",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8d46429c83ec3815d0c595bf541ef5557c6b4942"
      }
    ],
    "stats": {
      "total": 158,
      "additions": 92,
      "deletions": 66
    },
    "files": [
      {
        "sha": "20165232122be0a3f71564c85475df3f315e39ec",
        "filename": "src/addrman.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.cpp?ref=5eaaa83ac1f5eb525f93e2808fafd73f5ed97013",
        "patch": "@@ -358,8 +358,8 @@ CAddrInfo CAddrMan::Select_(bool newOnly)\n             int nKBucket = RandomInt(ADDRMAN_TRIED_BUCKET_COUNT);\n             int nKBucketPos = RandomInt(ADDRMAN_BUCKET_SIZE);\n             while (vvTried[nKBucket][nKBucketPos] == -1) {\n-                nKBucket = (nKBucket + insecure_rand()) % ADDRMAN_TRIED_BUCKET_COUNT;\n-                nKBucketPos = (nKBucketPos + insecure_rand()) % ADDRMAN_BUCKET_SIZE;\n+                nKBucket = (nKBucket + insecure_rand.rand32()) % ADDRMAN_TRIED_BUCKET_COUNT;\n+                nKBucketPos = (nKBucketPos + insecure_rand.rand32()) % ADDRMAN_BUCKET_SIZE;\n             }\n             int nId = vvTried[nKBucket][nKBucketPos];\n             assert(mapInfo.count(nId) == 1);\n@@ -375,8 +375,8 @@ CAddrInfo CAddrMan::Select_(bool newOnly)\n             int nUBucket = RandomInt(ADDRMAN_NEW_BUCKET_COUNT);\n             int nUBucketPos = RandomInt(ADDRMAN_BUCKET_SIZE);\n             while (vvNew[nUBucket][nUBucketPos] == -1) {\n-                nUBucket = (nUBucket + insecure_rand()) % ADDRMAN_NEW_BUCKET_COUNT;\n-                nUBucketPos = (nUBucketPos + insecure_rand()) % ADDRMAN_BUCKET_SIZE;\n+                nUBucket = (nUBucket + insecure_rand.rand32()) % ADDRMAN_NEW_BUCKET_COUNT;\n+                nUBucketPos = (nUBucketPos + insecure_rand.rand32()) % ADDRMAN_BUCKET_SIZE;\n             }\n             int nId = vvNew[nUBucket][nUBucketPos];\n             assert(mapInfo.count(nId) == 1);"
      },
      {
        "sha": "e9e137c978a7e48b9a069475536d9695e7ba1c36",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=5eaaa83ac1f5eb525f93e2808fafd73f5ed97013",
        "patch": "@@ -211,6 +211,9 @@ class CAddrMan\n     //! secret key to randomize bucket select with\n     uint256 nKey;\n \n+    //! Source of random numbers for randomization in inner loops\n+    FastRandomContext insecure_rand;\n+\n     //! Find an entry.\n     CAddrInfo* Find(const CNetAddr& addr, int *pnId = NULL);\n "
      },
      {
        "sha": "ab0dc07529c477d510381e24c3f0ab285cc5a3db",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 6,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=5eaaa83ac1f5eb525f93e2808fafd73f5ed97013",
        "patch": "@@ -4758,6 +4758,7 @@ static void RelayAddress(const CAddress& addr, bool fReachable, CConnman& connma\n     uint64_t hashAddr = addr.GetHash();\n     std::multimap<uint64_t, CNode*> mapMix;\n     const CSipHasher hasher = connman.GetDeterministicRandomizer(RANDOMIZER_ID_ADDRESS_RELAY).Write(hashAddr << 32).Write((GetTime() + hashAddr) / (24*60*60));\n+    FastRandomContext insecure_rand;\n \n     auto sortfunc = [&mapMix, &hasher](CNode* pnode) {\n         if (pnode->nVersion >= CADDR_TIME_VERSION) {\n@@ -4766,9 +4767,9 @@ static void RelayAddress(const CAddress& addr, bool fReachable, CConnman& connma\n         }\n     };\n \n-    auto pushfunc = [&addr, &mapMix, &nRelayNodes] {\n+    auto pushfunc = [&addr, &mapMix, &nRelayNodes, &insecure_rand] {\n         for (auto mi = mapMix.begin(); mi != mapMix.end() && nRelayNodes-- > 0; ++mi)\n-            mi->second->PushAddress(addr);\n+            mi->second->PushAddress(addr, insecure_rand);\n     };\n \n     connman.ForEachNodeThen(std::move(sortfunc), std::move(pushfunc));\n@@ -5078,14 +5079,15 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             if (fListen && !IsInitialBlockDownload())\n             {\n                 CAddress addr = GetLocalAddress(&pfrom->addr, pfrom->GetLocalServices());\n+                FastRandomContext insecure_rand;\n                 if (addr.IsRoutable())\n                 {\n                     LogPrint(\"net\", \"ProcessMessages: advertising address %s\\n\", addr.ToString());\n-                    pfrom->PushAddress(addr);\n+                    pfrom->PushAddress(addr, insecure_rand);\n                 } else if (IsPeerAddrLocalGood(pfrom)) {\n                     addr.SetIP(pfrom->addrLocal);\n                     LogPrint(\"net\", \"ProcessMessages: advertising address %s\\n\", addr.ToString());\n-                    pfrom->PushAddress(addr);\n+                    pfrom->PushAddress(addr, insecure_rand);\n                 }\n             }\n \n@@ -6008,8 +6010,9 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n \n         pfrom->vAddrToSend.clear();\n         vector<CAddress> vAddr = connman.GetAddresses();\n+        FastRandomContext insecure_rand;\n         BOOST_FOREACH(const CAddress &addr, vAddr)\n-            pfrom->PushAddress(addr);\n+            pfrom->PushAddress(addr, insecure_rand);\n     }\n \n \n@@ -6842,7 +6845,7 @@ bool SendMessages(CNode* pto, CConnman& connman)\n             // until scheduled broadcast, then move the broadcast to within MAX_FEEFILTER_CHANGE_DELAY.\n             else if (timeNow + MAX_FEEFILTER_CHANGE_DELAY * 1000000 < pto->nextSendTimeFeeFilter &&\n                      (currentFilter < 3 * pto->lastSentFeeFilter / 4 || currentFilter > 4 * pto->lastSentFeeFilter / 3)) {\n-                pto->nextSendTimeFeeFilter = timeNow + (insecure_rand() % MAX_FEEFILTER_CHANGE_DELAY) * 1000000;\n+                pto->nextSendTimeFeeFilter = timeNow + GetRandInt(MAX_FEEFILTER_CHANGE_DELAY) * 1000000;\n             }\n         }\n     }"
      },
      {
        "sha": "643dd806dfb5c1e220cb2cc8a23b16ed2afbf49d",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=5eaaa83ac1f5eb525f93e2808fafd73f5ed97013",
        "patch": "@@ -187,7 +187,8 @@ void AdvertiseLocal(CNode *pnode)\n         if (addrLocal.IsRoutable())\n         {\n             LogPrint(\"net\", \"AdvertiseLocal: advertising address %s\\n\", addrLocal.ToString());\n-            pnode->PushAddress(addrLocal);\n+            FastRandomContext insecure_rand;\n+            pnode->PushAddress(addrLocal, insecure_rand);\n         }\n     }\n }"
      },
      {
        "sha": "3417cb2abafb11ff369fb8567731bae03e5645a9",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=5eaaa83ac1f5eb525f93e2808fafd73f5ed97013",
        "patch": "@@ -735,14 +735,14 @@ class CNode\n         addrKnown.insert(_addr.GetKey());\n     }\n \n-    void PushAddress(const CAddress& _addr)\n+    void PushAddress(const CAddress& _addr, FastRandomContext &insecure_rand)\n     {\n         // Known checking here is only to save space from duplicates.\n         // SendMessages will filter it again for knowns that were added\n         // after addresses were pushed.\n         if (_addr.IsValid() && !addrKnown.contains(_addr.GetKey())) {\n             if (vAddrToSend.size() >= MAX_ADDR_TO_SEND) {\n-                vAddrToSend[insecure_rand() % vAddrToSend.size()] = _addr;\n+                vAddrToSend[insecure_rand.rand32() % vAddrToSend.size()] = _addr;\n             } else {\n                 vAddrToSend.push_back(_addr);\n             }"
      },
      {
        "sha": "9fe34108f57d1f67cb27eb38272086fb31c31ceb",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=5eaaa83ac1f5eb525f93e2808fafd73f5ed97013",
        "patch": "@@ -596,8 +596,8 @@ static bool ConnectThroughProxy(const proxyType &proxy, const std::string& strDe\n     // do socks negotiation\n     if (proxy.randomize_credentials) {\n         ProxyCredentials random_auth;\n-        random_auth.username = strprintf(\"%i\", insecure_rand());\n-        random_auth.password = strprintf(\"%i\", insecure_rand());\n+        static std::atomic_int counter;\n+        random_auth.username = random_auth.password = strprintf(\"%i\", counter++);\n         if (!Socks5(strDest, (unsigned short)port, &random_auth, hSocket))\n             return false;\n     } else {"
      },
      {
        "sha": "c07cd2eff8be07e370d415ed9a7a83184dadb11a",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=5eaaa83ac1f5eb525f93e2808fafd73f5ed97013",
        "patch": "@@ -594,7 +594,7 @@ FeeFilterRounder::FeeFilterRounder(const CFeeRate& minIncrementalFee)\n CAmount FeeFilterRounder::round(CAmount currentMinFee)\n {\n     std::set<double>::iterator it = feeset.lower_bound(currentMinFee);\n-    if ((it != feeset.begin() && insecure_rand() % 3 != 0) || it == feeset.end()) {\n+    if ((it != feeset.begin() && insecure_rand.rand32() % 3 != 0) || it == feeset.end()) {\n         it--;\n     }\n     return *it;"
      },
      {
        "sha": "2c1ac3b934a121ec6691d001b3c0ad82da14b6d3",
        "filename": "src/policy/fees.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/policy/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/policy/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.h?ref=5eaaa83ac1f5eb525f93e2808fafd73f5ed97013",
        "patch": "@@ -7,6 +7,7 @@\n \n #include \"amount.h\"\n #include \"uint256.h\"\n+#include \"random.h\"\n \n #include <map>\n #include <string>\n@@ -298,5 +299,6 @@ class FeeFilterRounder\n \n private:\n     std::set<double> feeset;\n+    FastRandomContext insecure_rand;\n };\n #endif /*BITCOIN_POLICYESTIMATOR_H */"
      },
      {
        "sha": "aa027e49c437ff6556ce49db710773a97dc640c1",
        "filename": "src/random.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/random.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/random.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.cpp?ref=5eaaa83ac1f5eb525f93e2808fafd73f5ed97013",
        "patch": "@@ -178,22 +178,21 @@ uint256 GetRandHash()\n     return hash;\n }\n \n-uint32_t insecure_rand_Rz = 11;\n-uint32_t insecure_rand_Rw = 11;\n-void seed_insecure_rand(bool fDeterministic)\n+FastRandomContext::FastRandomContext(bool fDeterministic)\n {\n     // The seed values have some unlikely fixed points which we avoid.\n     if (fDeterministic) {\n-        insecure_rand_Rz = insecure_rand_Rw = 11;\n+        Rz = Rw = 11;\n     } else {\n         uint32_t tmp;\n         do {\n             GetRandBytes((unsigned char*)&tmp, 4);\n         } while (tmp == 0 || tmp == 0x9068ffffU);\n-        insecure_rand_Rz = tmp;\n+        Rz = tmp;\n         do {\n             GetRandBytes((unsigned char*)&tmp, 4);\n         } while (tmp == 0 || tmp == 0x464fffffU);\n-        insecure_rand_Rw = tmp;\n+        Rw = tmp;\n     }\n }\n+"
      },
      {
        "sha": "e97d2d1fb0b54a3cbb19f6ce1ab125ca882ef2ab",
        "filename": "src/random.h",
        "status": "modified",
        "additions": 16,
        "deletions": 19,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/random.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/random.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.h?ref=5eaaa83ac1f5eb525f93e2808fafd73f5ed97013",
        "patch": "@@ -28,25 +28,22 @@ uint256 GetRandHash();\n void GetStrongRandBytes(unsigned char* buf, int num);\n \n /**\n- * Seed insecure_rand using the random pool.\n- * @param Deterministic Use a deterministic seed\n+ * Fast randomness source. This is seeded once with secure random data, but\n+ * is completely deterministic and insecure after that.\n+ * This class is not thread-safe.\n  */\n-void seed_insecure_rand(bool fDeterministic = false);\n-\n-/**\n- * MWC RNG of George Marsaglia\n- * This is intended to be fast. It has a period of 2^59.3, though the\n- * least significant 16 bits only have a period of about 2^30.1.\n- *\n- * @return random value\n- */\n-extern uint32_t insecure_rand_Rz;\n-extern uint32_t insecure_rand_Rw;\n-static inline uint32_t insecure_rand(void)\n-{\n-    insecure_rand_Rz = 36969 * (insecure_rand_Rz & 65535) + (insecure_rand_Rz >> 16);\n-    insecure_rand_Rw = 18000 * (insecure_rand_Rw & 65535) + (insecure_rand_Rw >> 16);\n-    return (insecure_rand_Rw << 16) + insecure_rand_Rz;\n-}\n+class FastRandomContext {\n+public:\n+    explicit FastRandomContext(bool fDeterministic=false);\n+\n+    uint32_t rand32() {\n+        Rz = 36969 * (Rz & 65535) + (Rz >> 16);\n+        Rw = 18000 * (Rw & 65535) + (Rw >> 16);\n+        return (Rw << 16) + Rz;\n+    }\n+\n+    uint32_t Rz;\n+    uint32_t Rw;\n+};\n \n #endif // BITCOIN_RANDOM_H"
      },
      {
        "sha": "adff09f7548805d2bbbb805c63ad7bfbd1f3800c",
        "filename": "src/test/addrman_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/test/addrman_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/test/addrman_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/addrman_tests.cpp?ref=5eaaa83ac1f5eb525f93e2808fafd73f5ed97013",
        "patch": "@@ -26,7 +26,7 @@ class CAddrManTest : public CAddrMan\n     void MakeDeterministic()\n     {\n         nKey.SetNull();\n-        seed_insecure_rand(true);\n+        insecure_rand = FastRandomContext(true);\n     }\n \n     int RandomInt(int nMax)"
      },
      {
        "sha": "b487686136aaf8350e132c84d87b026c52d85a7e",
        "filename": "src/test/coins_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/test/coins_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/test/coins_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/coins_tests.cpp?ref=5eaaa83ac1f5eb525f93e2808fafd73f5ed97013",
        "patch": "@@ -3,7 +3,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"coins.h\"\n-#include \"random.h\"\n+#include \"test_random.h\"\n #include \"script/standard.h\"\n #include \"uint256.h\"\n #include \"utilstrencodings.h\""
      },
      {
        "sha": "c7b4fb240c20e5554ecb40e42c196f0a82ba3be1",
        "filename": "src/test/crypto_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/test/crypto_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/test/crypto_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/crypto_tests.cpp?ref=5eaaa83ac1f5eb525f93e2808fafd73f5ed97013",
        "patch": "@@ -9,7 +9,7 @@\n #include \"crypto/sha512.h\"\n #include \"crypto/hmac_sha256.h\"\n #include \"crypto/hmac_sha512.h\"\n-#include \"random.h\"\n+#include \"test_random.h\"\n #include \"utilstrencodings.h\"\n #include \"test/test_bitcoin.h\"\n "
      },
      {
        "sha": "66ca381ea7023836c002cb546617fa3339acbaed",
        "filename": "src/test/merkle_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/test/merkle_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/test/merkle_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/merkle_tests.cpp?ref=5eaaa83ac1f5eb525f93e2808fafd73f5ed97013",
        "patch": "@@ -4,7 +4,7 @@\n \n #include \"consensus/merkle.h\"\n #include \"test/test_bitcoin.h\"\n-#include \"random.h\"\n+#include \"test_random.h\"\n \n #include <boost/test/unit_test.hpp>\n "
      },
      {
        "sha": "f4b5768693bde890a5691441a30d623bddc5a9ad",
        "filename": "src/test/net_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/test/net_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/test/net_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/net_tests.cpp?ref=5eaaa83ac1f5eb525f93e2808fafd73f5ed97013",
        "patch": "@@ -23,7 +23,7 @@ class CAddrManSerializationMock : public CAddrMan\n     void MakeDeterministic()\n     {\n         nKey.SetNull();\n-        seed_insecure_rand(true);\n+        insecure_rand = FastRandomContext(true);\n     }\n };\n "
      },
      {
        "sha": "b7f83d38f0b8430c40650ac8c56b499997b0357e",
        "filename": "src/test/pmt_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/test/pmt_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/test/pmt_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/pmt_tests.cpp?ref=5eaaa83ac1f5eb525f93e2808fafd73f5ed97013",
        "patch": "@@ -9,7 +9,7 @@\n #include \"uint256.h\"\n #include \"arith_uint256.h\"\n #include \"version.h\"\n-#include \"random.h\"\n+#include \"test_random.h\"\n #include \"test/test_bitcoin.h\"\n \n #include <vector>"
      },
      {
        "sha": "6cad02e738627d018dfb68d59ea639e611338288",
        "filename": "src/test/prevector_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 8,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/test/prevector_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/test/prevector_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/prevector_tests.cpp?ref=5eaaa83ac1f5eb525f93e2808fafd73f5ed97013",
        "patch": "@@ -4,7 +4,7 @@\n \n #include <vector>\n #include \"prevector.h\"\n-#include \"random.h\"\n+#include \"test_random.h\"\n \n #include \"serialize.h\"\n #include \"streams.h\"\n@@ -27,8 +27,7 @@ class prevector_tester {\n \n     typedef typename pretype::size_type Size;\n     bool passed = true;\n-    uint32_t insecure_rand_Rz_cache;\n-    uint32_t insecure_rand_Rw_cache;\n+    FastRandomContext rand_cache;\n \n \n     template <typename A, typename B>\n@@ -171,15 +170,14 @@ class prevector_tester {\n         test();\n     }\n     ~prevector_tester() {\n-        BOOST_CHECK_MESSAGE(passed, \"insecure_rand_Rz: \" \n-                << insecure_rand_Rz_cache \n+        BOOST_CHECK_MESSAGE(passed, \"insecure_rand_Rz: \"\n+                << rand_cache.Rz\n                 << \", insecure_rand_Rw: \"\n-                << insecure_rand_Rw_cache);\n+                << rand_cache.Rw);\n     }\n     prevector_tester() {\n         seed_insecure_rand();\n-        insecure_rand_Rz_cache = insecure_rand_Rz;\n-        insecure_rand_Rw_cache = insecure_rand_Rw;\n+        rand_cache = insecure_rand_ctx;\n     }\n };\n "
      },
      {
        "sha": "891ecf501567f2a6fb22ecd7c7c74bed66a69861",
        "filename": "src/test/scheduler_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/test/scheduler_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/test/scheduler_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/scheduler_tests.cpp?ref=5eaaa83ac1f5eb525f93e2808fafd73f5ed97013",
        "patch": "@@ -42,8 +42,6 @@ static void MicroSleep(uint64_t n)\n \n BOOST_AUTO_TEST_CASE(manythreads)\n {\n-    seed_insecure_rand(false);\n-\n     // Stress test: hundreds of microsecond-scheduled tasks,\n     // serviced by 10 threads.\n     //\n@@ -58,7 +56,7 @@ BOOST_AUTO_TEST_CASE(manythreads)\n \n     boost::mutex counterMutex[10];\n     int counter[10] = { 0 };\n-    boost::random::mt19937 rng(insecure_rand());\n+    boost::random::mt19937 rng(42);\n     boost::random::uniform_int_distribution<> zeroToNine(0, 9);\n     boost::random::uniform_int_distribution<> randomMsec(-11, 1000);\n     boost::random::uniform_int_distribution<> randomDelta(-1000, 1000);"
      },
      {
        "sha": "0b1050d020cc56880228c97c3fe47003dc0a329f",
        "filename": "src/test/sighash_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/test/sighash_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/test/sighash_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sighash_tests.cpp?ref=5eaaa83ac1f5eb525f93e2808fafd73f5ed97013",
        "patch": "@@ -6,7 +6,7 @@\n #include \"data/sighash.json.h\"\n #include \"hash.h\"\n #include \"main.h\" // For CheckTransaction\n-#include \"random.h\"\n+#include \"test_random.h\"\n #include \"script/interpreter.h\"\n #include \"script/script.h\"\n #include \"serialize.h\""
      },
      {
        "sha": "b19f8fbffb33b05abb88d23419476938056a7c44",
        "filename": "src/test/skiplist_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/test/skiplist_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/test/skiplist_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/skiplist_tests.cpp?ref=5eaaa83ac1f5eb525f93e2808fafd73f5ed97013",
        "patch": "@@ -3,7 +3,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"chain.h\"\n-#include \"random.h\"\n+#include \"test_random.h\"\n #include \"util.h\"\n #include \"test/test_bitcoin.h\"\n "
      },
      {
        "sha": "27ea837fbffe17efb6607f8de00ed71d1be24f15",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=5eaaa83ac1f5eb525f93e2808fafd73f5ed97013",
        "patch": "@@ -27,6 +27,7 @@\n #include <boost/thread.hpp>\n \n std::unique_ptr<CConnman> g_connman;\n+FastRandomContext insecure_rand_ctx(true);\n \n extern bool fPrintToConsole;\n extern void noui_connect();"
      },
      {
        "sha": "e61b92b7bce943cc79a2798f1459e87617a4977c",
        "filename": "src/test/test_random.h",
        "status": "added",
        "additions": 23,
        "deletions": 0,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/test/test_random.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/test/test_random.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_random.h?ref=5eaaa83ac1f5eb525f93e2808fafd73f5ed97013",
        "patch": "@@ -0,0 +1,23 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_TEST_RANDOM_H\n+#define BITCOIN_TEST_RANDOM_H\n+\n+#include \"random.h\"\n+\n+extern FastRandomContext insecure_rand_ctx;\n+\n+static inline void seed_insecure_rand(bool fDeterministic = false)\n+{\n+    insecure_rand_ctx = FastRandomContext(fDeterministic);\n+}\n+\n+static inline uint32_t insecure_rand(void)\n+{\n+    return insecure_rand_ctx.rand32();\n+}\n+\n+#endif"
      },
      {
        "sha": "0f1c7ab2224b23ca47cfa1831bbe6a3b6d29aa80",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=5eaaa83ac1f5eb525f93e2808fafd73f5ed97013",
        "patch": "@@ -6,7 +6,7 @@\n \n #include \"clientversion.h\"\n #include \"primitives/transaction.h\"\n-#include \"random.h\"\n+#include \"test_random.h\"\n #include \"sync.h\"\n #include \"utilstrencodings.h\"\n #include \"utilmoneystr.h\""
      },
      {
        "sha": "ffc0ff6f8ead3257a68a94888006d2e32fff1533",
        "filename": "src/test/versionbits_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/test/versionbits_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/test/versionbits_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/versionbits_tests.cpp?ref=5eaaa83ac1f5eb525f93e2808fafd73f5ed97013",
        "patch": "@@ -3,7 +3,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"chain.h\"\n-#include \"random.h\"\n+#include \"test_random.h\"\n #include \"versionbits.h\"\n #include \"test/test_bitcoin.h\"\n #include \"chainparams.h\""
      },
      {
        "sha": "0f1c166abc4166c3ed6c2de23d23532db379c9a9",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=5eaaa83ac1f5eb525f93e2808fafd73f5ed97013",
        "patch": "@@ -647,7 +647,7 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n     if (nCheckFrequency == 0)\n         return;\n \n-    if (insecure_rand() >= nCheckFrequency)\n+    if (GetRand(std::numeric_limits<uint32_t>::max()) >= nCheckFrequency)\n         return;\n \n     LogPrint(\"mempool\", \"Checking mempool with %u transactions and %u inputs\\n\", (unsigned int)mapTx.size(), (unsigned int)mapNextTx.size());"
      },
      {
        "sha": "1763930ba05b184bb9e20800e9e731af71fbe95e",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=5eaaa83ac1f5eb525f93e2808fafd73f5ed97013",
        "patch": "@@ -15,6 +15,7 @@\n #include \"indirectmap.h\"\n #include \"primitives/transaction.h\"\n #include \"sync.h\"\n+#include \"random.h\"\n \n #undef foreach\n #include \"boost/multi_index_container.hpp\""
      },
      {
        "sha": "c5f55ef5f0dac3559dfc60f4383b8baeab569a00",
        "filename": "src/wallet/test/crypto_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/wallet/test/crypto_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/wallet/test/crypto_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/crypto_tests.cpp?ref=5eaaa83ac1f5eb525f93e2808fafd73f5ed97013",
        "patch": "@@ -2,7 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"random.h\"\n+#include \"test/test_random.h\"\n #include \"utilstrencodings.h\"\n #include \"test/test_bitcoin.h\"\n #include \"wallet/crypter.h\""
      },
      {
        "sha": "687d84e77a46fd23a44d990f089ecb0170de2d7f",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=5eaaa83ac1f5eb525f93e2808fafd73f5ed97013",
        "patch": "@@ -1907,7 +1907,7 @@ static void ApproximateBestSubset(vector<pair<CAmount, pair<const CWalletTx*,uns\n     vfBest.assign(vValue.size(), true);\n     nBest = nTotalLower;\n \n-    seed_insecure_rand();\n+    FastRandomContext insecure_rand;\n \n     for (int nRep = 0; nRep < iterations && nBest != nTargetValue; nRep++)\n     {\n@@ -1924,7 +1924,7 @@ static void ApproximateBestSubset(vector<pair<CAmount, pair<const CWalletTx*,uns\n                 //that the rng is fast. We do not use a constant random sequence,\n                 //because there may be some privacy improvement by making\n                 //the selection random.\n-                if (nPass == 0 ? insecure_rand()&1 : !vfIncluded[i])\n+                if (nPass == 0 ? insecure_rand.rand32()&1 : !vfIncluded[i])\n                 {\n                     nTotal += vValue[i].first;\n                     vfIncluded[i] = true;"
      }
    ]
  }
]