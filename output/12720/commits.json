[
  {
    "sha": "0dbb32b2cba54408bea12099d64e0fefa3651460",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZGJiMzJiMmNiYTU0NDA4YmVhMTIwOTlkNjRlMGZlZmEzNjUxNDYw",
    "commit": {
      "author": {
        "name": "Jeff Rade",
        "email": "jeffrade@gmail.com",
        "date": "2018-03-18T22:54:29Z"
      },
      "committer": {
        "name": "Jeff Rade",
        "email": "jeffrade@gmail.com",
        "date": "2018-03-18T22:55:41Z"
      },
      "message": "Avoiding 'file' function name from python2 with more descriptive variable naming",
      "tree": {
        "sha": "d8796319131a7e5c2cca443d763a45abaeed54e1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d8796319131a7e5c2cca443d763a45abaeed54e1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0dbb32b2cba54408bea12099d64e0fefa3651460",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0dbb32b2cba54408bea12099d64e0fefa3651460",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0dbb32b2cba54408bea12099d64e0fefa3651460",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0dbb32b2cba54408bea12099d64e0fefa3651460/comments",
    "author": {
      "login": "jeffrade",
      "id": 1307806,
      "node_id": "MDQ6VXNlcjEzMDc4MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1307806?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jeffrade",
      "html_url": "https://github.com/jeffrade",
      "followers_url": "https://api.github.com/users/jeffrade/followers",
      "following_url": "https://api.github.com/users/jeffrade/following{/other_user}",
      "gists_url": "https://api.github.com/users/jeffrade/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jeffrade/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jeffrade/subscriptions",
      "organizations_url": "https://api.github.com/users/jeffrade/orgs",
      "repos_url": "https://api.github.com/users/jeffrade/repos",
      "events_url": "https://api.github.com/users/jeffrade/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jeffrade/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jeffrade",
      "id": 1307806,
      "node_id": "MDQ6VXNlcjEzMDc4MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1307806?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jeffrade",
      "html_url": "https://github.com/jeffrade",
      "followers_url": "https://api.github.com/users/jeffrade/followers",
      "following_url": "https://api.github.com/users/jeffrade/following{/other_user}",
      "gists_url": "https://api.github.com/users/jeffrade/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jeffrade/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jeffrade/subscriptions",
      "organizations_url": "https://api.github.com/users/jeffrade/orgs",
      "repos_url": "https://api.github.com/users/jeffrade/repos",
      "events_url": "https://api.github.com/users/jeffrade/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jeffrade/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "00d1680498c5550e7db1f359202d3433a092fafd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/00d1680498c5550e7db1f359202d3433a092fafd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/00d1680498c5550e7db1f359202d3433a092fafd"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 6,
      "deletions": 6
    },
    "files": [
      {
        "sha": "09f7f50de036a4a3ea682c57debabdc94da68a39",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0dbb32b2cba54408bea12099d64e0fefa3651460/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0dbb32b2cba54408bea12099d64e0fefa3651460/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=0dbb32b2cba54408bea12099d64e0fefa3651460",
        "patch": "@@ -433,7 +433,7 @@ def get_next(self):\n                     proc.send_signal(signal.SIGINT)\n                 if proc.poll() is not None:\n                     log_out.seek(0), log_err.seek(0)\n-                    [stdout, stderr] = [file.read().decode('utf-8') for file in (log_out, log_err)]\n+                    [stdout, stderr] = [log_file.read().decode('utf-8') for log_file in (log_out, log_err)]\n                     log_out.close(), log_err.close()\n                     if proc.returncode == TEST_EXIT_PASSED and stderr == \"\":\n                         status = \"Passed\"\n@@ -490,7 +490,7 @@ def check_script_list(src_dir):\n     Check that there are no scripts in the functional tests directory which are\n     not being run by pull-tester.py.\"\"\"\n     script_dir = src_dir + '/test/functional/'\n-    python_files = set([file for file in os.listdir(script_dir) if file.endswith(\".py\")])\n+    python_files = set([test_file for test_file in os.listdir(script_dir) if test_file.endswith(\".py\")])\n     missed_tests = list(python_files - set(map(lambda x: x.split()[0], ALL_SCRIPTS + NON_SCRIPTS)))\n     if len(missed_tests) != 0:\n         print(\"%sWARNING!%s The following scripts are not being run: %s. Check the test lists in test_runner.py.\" % (BOLD[1], BOLD[0], str(missed_tests)))\n@@ -550,17 +550,17 @@ def _get_uncovered_rpc_commands(self):\n         if not os.path.isfile(coverage_ref_filename):\n             raise RuntimeError(\"No coverage reference found\")\n \n-        with open(coverage_ref_filename, 'r') as file:\n-            all_cmds.update([line.strip() for line in file.readlines()])\n+        with open(coverage_ref_filename, 'r') as coverage_ref_file:\n+            all_cmds.update([line.strip() for line in coverage_ref_file.readlines()])\n \n         for root, dirs, files in os.walk(self.dir):\n             for filename in files:\n                 if filename.startswith(coverage_file_prefix):\n                     coverage_filenames.add(os.path.join(root, filename))\n \n         for filename in coverage_filenames:\n-            with open(filename, 'r') as file:\n-                covered_cmds.update([line.strip() for line in file.readlines()])\n+            with open(filename, 'r') as coverage_file:\n+                covered_cmds.update([line.strip() for line in coverage_file.readlines()])\n \n         return all_cmds - covered_cmds\n "
      }
    ]
  }
]