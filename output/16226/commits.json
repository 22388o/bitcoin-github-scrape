[
  {
    "sha": "7c611e20007bf5face34d33dffa26c8db67e29ec",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YzYxMWUyMDAwN2JmNWZhY2UzNGQzM2RmZmEyNmM4ZGI2N2UyOWVj",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-06T07:53:16Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-19T22:06:30Z"
      },
      "message": "Move ismine to wallet module",
      "tree": {
        "sha": "0af9a761777b24cdc6c44c20aa82f8cfe51fc6d5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0af9a761777b24cdc6c44c20aa82f8cfe51fc6d5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7c611e20007bf5face34d33dffa26c8db67e29ec",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7c611e20007bf5face34d33dffa26c8db67e29ec",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7c611e20007bf5face34d33dffa26c8db67e29ec",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7c611e20007bf5face34d33dffa26c8db67e29ec/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "413e438ea9767710d4810c4400fd1242ca52cd1c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/413e438ea9767710d4810c4400fd1242ca52cd1c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/413e438ea9767710d4810c4400fd1242ca52cd1c"
      }
    ],
    "stats": {
      "total": 771,
      "additions": 395,
      "deletions": 376
    },
    "files": [
      {
        "sha": "39e8d3d689742c26ee82e6f8652208dce177fc6c",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c611e20007bf5face34d33dffa26c8db67e29ec/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c611e20007bf5face34d33dffa26c8db67e29ec/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=7c611e20007bf5face34d33dffa26c8db67e29ec",
        "patch": "@@ -181,7 +181,6 @@ BITCOIN_CORE_H = \\\n   rpc/util.h \\\n   scheduler.h \\\n   script/descriptor.h \\\n-  script/ismine.h \\\n   script/sigcache.h \\\n   script/sign.h \\\n   script/standard.h \\\n@@ -223,6 +222,7 @@ BITCOIN_CORE_H = \\\n   wallet/db.h \\\n   wallet/feebumper.h \\\n   wallet/fees.h \\\n+  wallet/ismine.h \\\n   wallet/load.h \\\n   wallet/psbtwallet.h \\\n   wallet/rpcwallet.h \\\n@@ -328,6 +328,7 @@ libbitcoin_wallet_a_SOURCES = \\\n   wallet/db.cpp \\\n   wallet/feebumper.cpp \\\n   wallet/fees.cpp \\\n+  wallet/ismine.cpp \\\n   wallet/load.cpp \\\n   wallet/psbtwallet.cpp \\\n   wallet/rpcdump.cpp \\\n@@ -458,7 +459,6 @@ libbitcoin_common_a_SOURCES = \\\n   rpc/util.cpp \\\n   scheduler.cpp \\\n   script/descriptor.cpp \\\n-  script/ismine.cpp \\\n   script/sign.cpp \\\n   script/standard.cpp \\\n   versionbitsinfo.cpp \\"
      },
      {
        "sha": "d3fe138133e7b70d7068918d9fe9875fea02a9d7",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c611e20007bf5face34d33dffa26c8db67e29ec/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c611e20007bf5face34d33dffa26c8db67e29ec/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=7c611e20007bf5face34d33dffa26c8db67e29ec",
        "patch": "@@ -167,7 +167,8 @@ BITCOIN_TESTS += \\\n   wallet/test/wallet_tests.cpp \\\n   wallet/test/wallet_crypto_tests.cpp \\\n   wallet/test/coinselector_tests.cpp \\\n-  wallet/test/init_tests.cpp\n+  wallet/test/init_tests.cpp \\\n+  wallet/test/ismine_tests.cpp\n \n BITCOIN_TEST_SUITE += \\\n   wallet/test/wallet_test_fixture.cpp \\"
      },
      {
        "sha": "34c982e1e683d6b7bc3df54b3cc9a89c76baec9a",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c611e20007bf5face34d33dffa26c8db67e29ec/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c611e20007bf5face34d33dffa26c8db67e29ec/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=7c611e20007bf5face34d33dffa26c8db67e29ec",
        "patch": "@@ -11,7 +11,6 @@\n #include <policy/feerate.h>\n #include <policy/fees.h>\n #include <primitives/transaction.h>\n-#include <script/ismine.h>\n #include <script/standard.h>\n #include <support/allocators/secure.h>\n #include <sync.h>\n@@ -20,6 +19,7 @@\n #include <util/system.h>\n #include <wallet/feebumper.h>\n #include <wallet/fees.h>\n+#include <wallet/ismine.h>\n #include <wallet/rpcwallet.h>\n #include <wallet/load.h>\n #include <wallet/wallet.h>"
      },
      {
        "sha": "9c9b29a813bc17ac691d3abef0e3f042453a38dc",
        "filename": "src/interfaces/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c611e20007bf5face34d33dffa26c8db67e29ec/src/interfaces/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c611e20007bf5face34d33dffa26c8db67e29ec/src/interfaces/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.h?ref=7c611e20007bf5face34d33dffa26c8db67e29ec",
        "patch": "@@ -7,7 +7,6 @@\n \n #include <amount.h>                    // For CAmount\n #include <pubkey.h>                    // For CKeyID and CScriptID (definitions needed in CTxDestination instantiation)\n-#include <script/ismine.h>             // For isminefilter, isminetype\n #include <script/standard.h>           // For CTxDestination\n #include <support/allocators/secure.h> // For SecureString\n #include <ui_interface.h>              // For ChangeType\n@@ -25,7 +24,10 @@ class CCoinControl;\n class CFeeRate;\n class CKey;\n class CWallet;\n+enum isminetype : unsigned int;\n enum class FeeReason;\n+typedef uint8_t isminefilter;\n+\n enum class OutputType;\n struct CRecipient;\n "
      },
      {
        "sha": "ebe7925368361ebf8c914a7c10b3a627ad5fd9b6",
        "filename": "src/qt/transactiondesc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c611e20007bf5face34d33dffa26c8db67e29ec/src/qt/transactiondesc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c611e20007bf5face34d33dffa26c8db67e29ec/src/qt/transactiondesc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.cpp?ref=7c611e20007bf5face34d33dffa26c8db67e29ec",
        "patch": "@@ -21,6 +21,7 @@\n #include <timedata.h>\n #include <util/system.h>\n #include <policy/policy.h>\n+#include <wallet/ismine.h>\n \n #include <stdint.h>\n #include <string>"
      },
      {
        "sha": "9de90759fa7a20f27ef65dfb6e62162db1a08fe7",
        "filename": "src/qt/transactionrecord.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c611e20007bf5face34d33dffa26c8db67e29ec/src/qt/transactionrecord.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c611e20007bf5face34d33dffa26c8db67e29ec/src/qt/transactionrecord.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.cpp?ref=7c611e20007bf5face34d33dffa26c8db67e29ec",
        "patch": "@@ -7,6 +7,7 @@\n #include <chain.h>\n #include <interfaces/wallet.h>\n #include <key_io.h>\n+#include <wallet/ismine.h>\n \n #include <stdint.h>\n "
      },
      {
        "sha": "735b67c06e25d6a01d56f30b4b9188e9d42aebab",
        "filename": "src/test/script_p2sh_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c611e20007bf5face34d33dffa26c8db67e29ec/src/test/script_p2sh_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c611e20007bf5face34d33dffa26c8db67e29ec/src/test/script_p2sh_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_p2sh_tests.cpp?ref=7c611e20007bf5face34d33dffa26c8db67e29ec",
        "patch": "@@ -11,7 +11,6 @@\n #include <script/script_error.h>\n #include <policy/settings.h>\n #include <script/sign.h>\n-#include <script/ismine.h>\n #include <test/setup_common.h>\n \n #include <vector>\n@@ -98,7 +97,6 @@ BOOST_AUTO_TEST_CASE(sign)\n         txTo[i].vin[0].prevout.n = i;\n         txTo[i].vin[0].prevout.hash = txFrom.GetHash();\n         txTo[i].vout[0].nValue = 1;\n-        BOOST_CHECK_MESSAGE(IsMine(keystore, txFrom.vout[i].scriptPubKey), strprintf(\"IsMine %d\", i));\n     }\n     for (int i = 0; i < 8; i++)\n     {\n@@ -195,7 +193,6 @@ BOOST_AUTO_TEST_CASE(set)\n         txTo[i].vin[0].prevout.hash = txFrom.GetHash();\n         txTo[i].vout[0].nValue = 1*CENT;\n         txTo[i].vout[0].scriptPubKey = inner[i];\n-        BOOST_CHECK_MESSAGE(IsMine(keystore, txFrom.vout[i].scriptPubKey), strprintf(\"IsMine %d\", i));\n     }\n     for (int i = 0; i < 4; i++)\n     {"
      },
      {
        "sha": "195283f89f927156885f7594c2f507286a0cbb58",
        "filename": "src/test/script_standard_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 361,
        "changes": 361,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c611e20007bf5face34d33dffa26c8db67e29ec/src/test/script_standard_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c611e20007bf5face34d33dffa26c8db67e29ec/src/test/script_standard_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_standard_tests.cpp?ref=7c611e20007bf5face34d33dffa26c8db67e29ec",
        "patch": "@@ -4,7 +4,6 @@\n \n #include <key.h>\n #include <keystore.h>\n-#include <script/ismine.h>\n #include <script/script.h>\n #include <script/script_error.h>\n #include <script/standard.h>\n@@ -372,364 +371,4 @@ BOOST_AUTO_TEST_CASE(script_standard_GetScriptFor_)\n     BOOST_CHECK(result == expected);\n }\n \n-BOOST_AUTO_TEST_CASE(script_standard_IsMine)\n-{\n-    CKey keys[2];\n-    CPubKey pubkeys[2];\n-    for (int i = 0; i < 2; i++) {\n-        keys[i].MakeNewKey(true);\n-        pubkeys[i] = keys[i].GetPubKey();\n-    }\n-\n-    CKey uncompressedKey;\n-    uncompressedKey.MakeNewKey(false);\n-    CPubKey uncompressedPubkey = uncompressedKey.GetPubKey();\n-\n-    CScript scriptPubKey;\n-    isminetype result;\n-\n-    // P2PK compressed\n-    {\n-        CBasicKeyStore keystore;\n-        scriptPubKey = GetScriptForRawPubKey(pubkeys[0]);\n-\n-        // Keystore does not have key\n-        result = IsMine(keystore, scriptPubKey);\n-        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n-\n-        // Keystore has key\n-        BOOST_CHECK(keystore.AddKey(keys[0]));\n-        result = IsMine(keystore, scriptPubKey);\n-        BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n-    }\n-\n-    // P2PK uncompressed\n-    {\n-        CBasicKeyStore keystore;\n-        scriptPubKey = GetScriptForRawPubKey(uncompressedPubkey);\n-\n-        // Keystore does not have key\n-        result = IsMine(keystore, scriptPubKey);\n-        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n-\n-        // Keystore has key\n-        BOOST_CHECK(keystore.AddKey(uncompressedKey));\n-        result = IsMine(keystore, scriptPubKey);\n-        BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n-    }\n-\n-    // P2PKH compressed\n-    {\n-        CBasicKeyStore keystore;\n-        scriptPubKey = GetScriptForDestination(PKHash(pubkeys[0]));\n-\n-        // Keystore does not have key\n-        result = IsMine(keystore, scriptPubKey);\n-        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n-\n-        // Keystore has key\n-        BOOST_CHECK(keystore.AddKey(keys[0]));\n-        result = IsMine(keystore, scriptPubKey);\n-        BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n-    }\n-\n-    // P2PKH uncompressed\n-    {\n-        CBasicKeyStore keystore;\n-        scriptPubKey = GetScriptForDestination(PKHash(uncompressedPubkey));\n-\n-        // Keystore does not have key\n-        result = IsMine(keystore, scriptPubKey);\n-        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n-\n-        // Keystore has key\n-        BOOST_CHECK(keystore.AddKey(uncompressedKey));\n-        result = IsMine(keystore, scriptPubKey);\n-        BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n-    }\n-\n-    // P2SH\n-    {\n-        CBasicKeyStore keystore;\n-\n-        CScript redeemScript = GetScriptForDestination(PKHash(pubkeys[0]));\n-        scriptPubKey = GetScriptForDestination(ScriptHash(redeemScript));\n-\n-        // Keystore does not have redeemScript or key\n-        result = IsMine(keystore, scriptPubKey);\n-        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n-\n-        // Keystore has redeemScript but no key\n-        BOOST_CHECK(keystore.AddCScript(redeemScript));\n-        result = IsMine(keystore, scriptPubKey);\n-        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n-\n-        // Keystore has redeemScript and key\n-        BOOST_CHECK(keystore.AddKey(keys[0]));\n-        result = IsMine(keystore, scriptPubKey);\n-        BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n-    }\n-\n-    // (P2PKH inside) P2SH inside P2SH (invalid)\n-    {\n-        CBasicKeyStore keystore;\n-\n-        CScript redeemscript_inner = GetScriptForDestination(PKHash(pubkeys[0]));\n-        CScript redeemscript = GetScriptForDestination(ScriptHash(redeemscript_inner));\n-        scriptPubKey = GetScriptForDestination(ScriptHash(redeemscript));\n-\n-        BOOST_CHECK(keystore.AddCScript(redeemscript));\n-        BOOST_CHECK(keystore.AddCScript(redeemscript_inner));\n-        BOOST_CHECK(keystore.AddCScript(scriptPubKey));\n-        BOOST_CHECK(keystore.AddKey(keys[0]));\n-        result = IsMine(keystore, scriptPubKey);\n-        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n-    }\n-\n-    // (P2PKH inside) P2SH inside P2WSH (invalid)\n-    {\n-        CBasicKeyStore keystore;\n-\n-        CScript redeemscript = GetScriptForDestination(PKHash(pubkeys[0]));\n-        CScript witnessscript = GetScriptForDestination(ScriptHash(redeemscript));\n-        scriptPubKey = GetScriptForDestination(WitnessV0ScriptHash(witnessscript));\n-\n-        BOOST_CHECK(keystore.AddCScript(witnessscript));\n-        BOOST_CHECK(keystore.AddCScript(redeemscript));\n-        BOOST_CHECK(keystore.AddCScript(scriptPubKey));\n-        BOOST_CHECK(keystore.AddKey(keys[0]));\n-        result = IsMine(keystore, scriptPubKey);\n-        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n-    }\n-\n-    // P2WPKH inside P2WSH (invalid)\n-    {\n-        CBasicKeyStore keystore;\n-\n-        CScript witnessscript = GetScriptForDestination(WitnessV0KeyHash(PKHash(pubkeys[0])));\n-        scriptPubKey = GetScriptForDestination(WitnessV0ScriptHash(witnessscript));\n-\n-        BOOST_CHECK(keystore.AddCScript(witnessscript));\n-        BOOST_CHECK(keystore.AddCScript(scriptPubKey));\n-        BOOST_CHECK(keystore.AddKey(keys[0]));\n-        result = IsMine(keystore, scriptPubKey);\n-        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n-    }\n-\n-    // (P2PKH inside) P2WSH inside P2WSH (invalid)\n-    {\n-        CBasicKeyStore keystore;\n-\n-        CScript witnessscript_inner = GetScriptForDestination(PKHash(pubkeys[0]));\n-        CScript witnessscript = GetScriptForDestination(WitnessV0ScriptHash(witnessscript_inner));\n-        scriptPubKey = GetScriptForDestination(WitnessV0ScriptHash(witnessscript));\n-\n-        BOOST_CHECK(keystore.AddCScript(witnessscript_inner));\n-        BOOST_CHECK(keystore.AddCScript(witnessscript));\n-        BOOST_CHECK(keystore.AddCScript(scriptPubKey));\n-        BOOST_CHECK(keystore.AddKey(keys[0]));\n-        result = IsMine(keystore, scriptPubKey);\n-        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n-    }\n-\n-    // P2WPKH compressed\n-    {\n-        CBasicKeyStore keystore;\n-        BOOST_CHECK(keystore.AddKey(keys[0]));\n-\n-        scriptPubKey = GetScriptForDestination(WitnessV0KeyHash(PKHash(pubkeys[0])));\n-\n-        // Keystore implicitly has key and P2SH redeemScript\n-        BOOST_CHECK(keystore.AddCScript(scriptPubKey));\n-        result = IsMine(keystore, scriptPubKey);\n-        BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n-    }\n-\n-    // P2WPKH uncompressed\n-    {\n-        CBasicKeyStore keystore;\n-        BOOST_CHECK(keystore.AddKey(uncompressedKey));\n-\n-        scriptPubKey = GetScriptForDestination(WitnessV0KeyHash(PKHash(uncompressedPubkey)));\n-\n-        // Keystore has key, but no P2SH redeemScript\n-        result = IsMine(keystore, scriptPubKey);\n-        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n-\n-        // Keystore has key and P2SH redeemScript\n-        BOOST_CHECK(keystore.AddCScript(scriptPubKey));\n-        result = IsMine(keystore, scriptPubKey);\n-        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n-    }\n-\n-    // scriptPubKey multisig\n-    {\n-        CBasicKeyStore keystore;\n-\n-        scriptPubKey = GetScriptForMultisig(2, {uncompressedPubkey, pubkeys[1]});\n-\n-        // Keystore does not have any keys\n-        result = IsMine(keystore, scriptPubKey);\n-        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n-\n-        // Keystore has 1/2 keys\n-        BOOST_CHECK(keystore.AddKey(uncompressedKey));\n-\n-        result = IsMine(keystore, scriptPubKey);\n-        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n-\n-        // Keystore has 2/2 keys\n-        BOOST_CHECK(keystore.AddKey(keys[1]));\n-\n-        result = IsMine(keystore, scriptPubKey);\n-        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n-\n-        // Keystore has 2/2 keys and the script\n-        BOOST_CHECK(keystore.AddCScript(scriptPubKey));\n-\n-        result = IsMine(keystore, scriptPubKey);\n-        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n-    }\n-\n-    // P2SH multisig\n-    {\n-        CBasicKeyStore keystore;\n-        BOOST_CHECK(keystore.AddKey(uncompressedKey));\n-        BOOST_CHECK(keystore.AddKey(keys[1]));\n-\n-        CScript redeemScript = GetScriptForMultisig(2, {uncompressedPubkey, pubkeys[1]});\n-        scriptPubKey = GetScriptForDestination(ScriptHash(redeemScript));\n-\n-        // Keystore has no redeemScript\n-        result = IsMine(keystore, scriptPubKey);\n-        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n-\n-        // Keystore has redeemScript\n-        BOOST_CHECK(keystore.AddCScript(redeemScript));\n-        result = IsMine(keystore, scriptPubKey);\n-        BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n-    }\n-\n-    // P2WSH multisig with compressed keys\n-    {\n-        CBasicKeyStore keystore;\n-        BOOST_CHECK(keystore.AddKey(keys[0]));\n-        BOOST_CHECK(keystore.AddKey(keys[1]));\n-\n-        CScript witnessScript = GetScriptForMultisig(2, {pubkeys[0], pubkeys[1]});\n-        scriptPubKey = GetScriptForDestination(WitnessV0ScriptHash(witnessScript));\n-\n-        // Keystore has keys, but no witnessScript or P2SH redeemScript\n-        result = IsMine(keystore, scriptPubKey);\n-        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n-\n-        // Keystore has keys and witnessScript, but no P2SH redeemScript\n-        BOOST_CHECK(keystore.AddCScript(witnessScript));\n-        result = IsMine(keystore, scriptPubKey);\n-        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n-\n-        // Keystore has keys, witnessScript, P2SH redeemScript\n-        BOOST_CHECK(keystore.AddCScript(scriptPubKey));\n-        result = IsMine(keystore, scriptPubKey);\n-        BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n-    }\n-\n-    // P2WSH multisig with uncompressed key\n-    {\n-        CBasicKeyStore keystore;\n-        BOOST_CHECK(keystore.AddKey(uncompressedKey));\n-        BOOST_CHECK(keystore.AddKey(keys[1]));\n-\n-        CScript witnessScript = GetScriptForMultisig(2, {uncompressedPubkey, pubkeys[1]});\n-        scriptPubKey = GetScriptForDestination(WitnessV0ScriptHash(witnessScript));\n-\n-        // Keystore has keys, but no witnessScript or P2SH redeemScript\n-        result = IsMine(keystore, scriptPubKey);\n-        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n-\n-        // Keystore has keys and witnessScript, but no P2SH redeemScript\n-        BOOST_CHECK(keystore.AddCScript(witnessScript));\n-        result = IsMine(keystore, scriptPubKey);\n-        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n-\n-        // Keystore has keys, witnessScript, P2SH redeemScript\n-        BOOST_CHECK(keystore.AddCScript(scriptPubKey));\n-        result = IsMine(keystore, scriptPubKey);\n-        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n-    }\n-\n-    // P2WSH multisig wrapped in P2SH\n-    {\n-        CBasicKeyStore keystore;\n-\n-        CScript witnessScript = GetScriptForMultisig(2, {pubkeys[0], pubkeys[1]});\n-        CScript redeemScript = GetScriptForDestination(WitnessV0ScriptHash(witnessScript));\n-        scriptPubKey = GetScriptForDestination(ScriptHash(redeemScript));\n-\n-        // Keystore has no witnessScript, P2SH redeemScript, or keys\n-        result = IsMine(keystore, scriptPubKey);\n-        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n-\n-        // Keystore has witnessScript and P2SH redeemScript, but no keys\n-        BOOST_CHECK(keystore.AddCScript(redeemScript));\n-        BOOST_CHECK(keystore.AddCScript(witnessScript));\n-        result = IsMine(keystore, scriptPubKey);\n-        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n-\n-        // Keystore has keys, witnessScript, P2SH redeemScript\n-        BOOST_CHECK(keystore.AddKey(keys[0]));\n-        BOOST_CHECK(keystore.AddKey(keys[1]));\n-        result = IsMine(keystore, scriptPubKey);\n-        BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n-    }\n-\n-    // OP_RETURN\n-    {\n-        CBasicKeyStore keystore;\n-        BOOST_CHECK(keystore.AddKey(keys[0]));\n-\n-        scriptPubKey.clear();\n-        scriptPubKey << OP_RETURN << ToByteVector(pubkeys[0]);\n-\n-        result = IsMine(keystore, scriptPubKey);\n-        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n-    }\n-\n-    // witness unspendable\n-    {\n-        CBasicKeyStore keystore;\n-        BOOST_CHECK(keystore.AddKey(keys[0]));\n-\n-        scriptPubKey.clear();\n-        scriptPubKey << OP_0 << ToByteVector(ParseHex(\"aabb\"));\n-\n-        result = IsMine(keystore, scriptPubKey);\n-        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n-    }\n-\n-    // witness unknown\n-    {\n-        CBasicKeyStore keystore;\n-        BOOST_CHECK(keystore.AddKey(keys[0]));\n-\n-        scriptPubKey.clear();\n-        scriptPubKey << OP_16 << ToByteVector(ParseHex(\"aabb\"));\n-\n-        result = IsMine(keystore, scriptPubKey);\n-        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n-    }\n-\n-    // Nonstandard\n-    {\n-        CBasicKeyStore keystore;\n-        BOOST_CHECK(keystore.AddKey(keys[0]));\n-\n-        scriptPubKey.clear();\n-        scriptPubKey << OP_9 << OP_ADD << OP_11 << OP_EQUAL;\n-\n-        result = IsMine(keystore, scriptPubKey);\n-        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n-    }\n-}\n-\n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "c5aad5f27c8e9bc1e1ccae0875d83a2ce4157810",
        "filename": "src/wallet/ismine.cpp",
        "status": "renamed",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c611e20007bf5face34d33dffa26c8db67e29ec/src/wallet/ismine.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c611e20007bf5face34d33dffa26c8db67e29ec/src/wallet/ismine.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/ismine.cpp?ref=7c611e20007bf5face34d33dffa26c8db67e29ec",
        "patch": "@@ -3,7 +3,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <script/ismine.h>\n+#include <wallet/ismine.h>\n \n #include <key.h>\n #include <keystore.h>",
        "previous_filename": "src/script/ismine.cpp"
      },
      {
        "sha": "e20008feed3c592051775a83a753f9932c3b35ab",
        "filename": "src/wallet/ismine.h",
        "status": "renamed",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c611e20007bf5face34d33dffa26c8db67e29ec/src/wallet/ismine.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c611e20007bf5face34d33dffa26c8db67e29ec/src/wallet/ismine.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/ismine.h?ref=7c611e20007bf5face34d33dffa26c8db67e29ec",
        "patch": "@@ -3,8 +3,8 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#ifndef BITCOIN_SCRIPT_ISMINE_H\n-#define BITCOIN_SCRIPT_ISMINE_H\n+#ifndef BITCOIN_WALLET_ISMINE_H\n+#define BITCOIN_WALLET_ISMINE_H\n \n #include <script/standard.h>\n \n@@ -15,7 +15,7 @@ class CKeyStore;\n class CScript;\n \n /** IsMine() return codes */\n-enum isminetype\n+enum isminetype : unsigned int\n {\n     ISMINE_NO         = 0,\n     ISMINE_WATCH_ONLY = 1 << 0,\n@@ -50,4 +50,4 @@ struct CachableAmount\n     }\n };\n \n-#endif // BITCOIN_SCRIPT_ISMINE_H\n+#endif // BITCOIN_WALLET_ISMINE_H",
        "previous_filename": "src/script/ismine.h"
      },
      {
        "sha": "37c33cbee006c1521779fd36a7213c29325232c6",
        "filename": "src/wallet/test/ismine_tests.cpp",
        "status": "added",
        "additions": 378,
        "deletions": 0,
        "changes": 378,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c611e20007bf5face34d33dffa26c8db67e29ec/src/wallet/test/ismine_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c611e20007bf5face34d33dffa26c8db67e29ec/src/wallet/test/ismine_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/ismine_tests.cpp?ref=7c611e20007bf5face34d33dffa26c8db67e29ec",
        "patch": "@@ -0,0 +1,378 @@\n+// Copyright (c) 2017-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <key.h>\n+#include <keystore.h>\n+#include <script/script.h>\n+#include <script/script_error.h>\n+#include <script/standard.h>\n+#include <test/setup_common.h>\n+#include <wallet/ismine.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+\n+BOOST_FIXTURE_TEST_SUITE(ismine_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(ismine_standard)\n+{\n+    CKey keys[2];\n+    CPubKey pubkeys[2];\n+    for (int i = 0; i < 2; i++) {\n+        keys[i].MakeNewKey(true);\n+        pubkeys[i] = keys[i].GetPubKey();\n+    }\n+\n+    CKey uncompressedKey;\n+    uncompressedKey.MakeNewKey(false);\n+    CPubKey uncompressedPubkey = uncompressedKey.GetPubKey();\n+\n+    CScript scriptPubKey;\n+    isminetype result;\n+\n+    // P2PK compressed\n+    {\n+        CBasicKeyStore keystore;\n+        scriptPubKey = GetScriptForRawPubKey(pubkeys[0]);\n+\n+        // Keystore does not have key\n+        result = IsMine(keystore, scriptPubKey);\n+        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n+\n+        // Keystore has key\n+        BOOST_CHECK(keystore.AddKey(keys[0]));\n+        result = IsMine(keystore, scriptPubKey);\n+        BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n+    }\n+\n+    // P2PK uncompressed\n+    {\n+        CBasicKeyStore keystore;\n+        scriptPubKey = GetScriptForRawPubKey(uncompressedPubkey);\n+\n+        // Keystore does not have key\n+        result = IsMine(keystore, scriptPubKey);\n+        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n+\n+        // Keystore has key\n+        BOOST_CHECK(keystore.AddKey(uncompressedKey));\n+        result = IsMine(keystore, scriptPubKey);\n+        BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n+    }\n+\n+    // P2PKH compressed\n+    {\n+        CBasicKeyStore keystore;\n+        scriptPubKey = GetScriptForDestination(PKHash(pubkeys[0]));\n+\n+        // Keystore does not have key\n+        result = IsMine(keystore, scriptPubKey);\n+        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n+\n+        // Keystore has key\n+        BOOST_CHECK(keystore.AddKey(keys[0]));\n+        result = IsMine(keystore, scriptPubKey);\n+        BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n+    }\n+\n+    // P2PKH uncompressed\n+    {\n+        CBasicKeyStore keystore;\n+        scriptPubKey = GetScriptForDestination(PKHash(uncompressedPubkey));\n+\n+        // Keystore does not have key\n+        result = IsMine(keystore, scriptPubKey);\n+        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n+\n+        // Keystore has key\n+        BOOST_CHECK(keystore.AddKey(uncompressedKey));\n+        result = IsMine(keystore, scriptPubKey);\n+        BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n+    }\n+\n+    // P2SH\n+    {\n+        CBasicKeyStore keystore;\n+\n+        CScript redeemScript = GetScriptForDestination(PKHash(pubkeys[0]));\n+        scriptPubKey = GetScriptForDestination(ScriptHash(redeemScript));\n+\n+        // Keystore does not have redeemScript or key\n+        result = IsMine(keystore, scriptPubKey);\n+        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n+\n+        // Keystore has redeemScript but no key\n+        BOOST_CHECK(keystore.AddCScript(redeemScript));\n+        result = IsMine(keystore, scriptPubKey);\n+        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n+\n+        // Keystore has redeemScript and key\n+        BOOST_CHECK(keystore.AddKey(keys[0]));\n+        result = IsMine(keystore, scriptPubKey);\n+        BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n+    }\n+\n+    // (P2PKH inside) P2SH inside P2SH (invalid)\n+    {\n+        CBasicKeyStore keystore;\n+\n+        CScript redeemscript_inner = GetScriptForDestination(PKHash(pubkeys[0]));\n+        CScript redeemscript = GetScriptForDestination(ScriptHash(redeemscript_inner));\n+        scriptPubKey = GetScriptForDestination(ScriptHash(redeemscript));\n+\n+        BOOST_CHECK(keystore.AddCScript(redeemscript));\n+        BOOST_CHECK(keystore.AddCScript(redeemscript_inner));\n+        BOOST_CHECK(keystore.AddCScript(scriptPubKey));\n+        BOOST_CHECK(keystore.AddKey(keys[0]));\n+        result = IsMine(keystore, scriptPubKey);\n+        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n+    }\n+\n+    // (P2PKH inside) P2SH inside P2WSH (invalid)\n+    {\n+        CBasicKeyStore keystore;\n+\n+        CScript redeemscript = GetScriptForDestination(PKHash(pubkeys[0]));\n+        CScript witnessscript = GetScriptForDestination(ScriptHash(redeemscript));\n+        scriptPubKey = GetScriptForDestination(WitnessV0ScriptHash(witnessscript));\n+\n+        BOOST_CHECK(keystore.AddCScript(witnessscript));\n+        BOOST_CHECK(keystore.AddCScript(redeemscript));\n+        BOOST_CHECK(keystore.AddCScript(scriptPubKey));\n+        BOOST_CHECK(keystore.AddKey(keys[0]));\n+        result = IsMine(keystore, scriptPubKey);\n+        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n+    }\n+\n+    // P2WPKH inside P2WSH (invalid)\n+    {\n+        CBasicKeyStore keystore;\n+\n+        CScript witnessscript = GetScriptForDestination(WitnessV0KeyHash(PKHash(pubkeys[0])));\n+        scriptPubKey = GetScriptForDestination(WitnessV0ScriptHash(witnessscript));\n+\n+        BOOST_CHECK(keystore.AddCScript(witnessscript));\n+        BOOST_CHECK(keystore.AddCScript(scriptPubKey));\n+        BOOST_CHECK(keystore.AddKey(keys[0]));\n+        result = IsMine(keystore, scriptPubKey);\n+        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n+    }\n+\n+    // (P2PKH inside) P2WSH inside P2WSH (invalid)\n+    {\n+        CBasicKeyStore keystore;\n+\n+        CScript witnessscript_inner = GetScriptForDestination(PKHash(pubkeys[0]));\n+        CScript witnessscript = GetScriptForDestination(WitnessV0ScriptHash(witnessscript_inner));\n+        scriptPubKey = GetScriptForDestination(WitnessV0ScriptHash(witnessscript));\n+\n+        BOOST_CHECK(keystore.AddCScript(witnessscript_inner));\n+        BOOST_CHECK(keystore.AddCScript(witnessscript));\n+        BOOST_CHECK(keystore.AddCScript(scriptPubKey));\n+        BOOST_CHECK(keystore.AddKey(keys[0]));\n+        result = IsMine(keystore, scriptPubKey);\n+        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n+    }\n+\n+    // P2WPKH compressed\n+    {\n+        CBasicKeyStore keystore;\n+        BOOST_CHECK(keystore.AddKey(keys[0]));\n+\n+        scriptPubKey = GetScriptForDestination(WitnessV0KeyHash(PKHash(pubkeys[0])));\n+\n+        // Keystore implicitly has key and P2SH redeemScript\n+        BOOST_CHECK(keystore.AddCScript(scriptPubKey));\n+        result = IsMine(keystore, scriptPubKey);\n+        BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n+    }\n+\n+    // P2WPKH uncompressed\n+    {\n+        CBasicKeyStore keystore;\n+        BOOST_CHECK(keystore.AddKey(uncompressedKey));\n+\n+        scriptPubKey = GetScriptForDestination(WitnessV0KeyHash(PKHash(uncompressedPubkey)));\n+\n+        // Keystore has key, but no P2SH redeemScript\n+        result = IsMine(keystore, scriptPubKey);\n+        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n+\n+        // Keystore has key and P2SH redeemScript\n+        BOOST_CHECK(keystore.AddCScript(scriptPubKey));\n+        result = IsMine(keystore, scriptPubKey);\n+        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n+    }\n+\n+    // scriptPubKey multisig\n+    {\n+        CBasicKeyStore keystore;\n+\n+        scriptPubKey = GetScriptForMultisig(2, {uncompressedPubkey, pubkeys[1]});\n+\n+        // Keystore does not have any keys\n+        result = IsMine(keystore, scriptPubKey);\n+        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n+\n+        // Keystore has 1/2 keys\n+        BOOST_CHECK(keystore.AddKey(uncompressedKey));\n+\n+        result = IsMine(keystore, scriptPubKey);\n+        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n+\n+        // Keystore has 2/2 keys\n+        BOOST_CHECK(keystore.AddKey(keys[1]));\n+\n+        result = IsMine(keystore, scriptPubKey);\n+        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n+\n+        // Keystore has 2/2 keys and the script\n+        BOOST_CHECK(keystore.AddCScript(scriptPubKey));\n+\n+        result = IsMine(keystore, scriptPubKey);\n+        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n+    }\n+\n+    // P2SH multisig\n+    {\n+        CBasicKeyStore keystore;\n+        BOOST_CHECK(keystore.AddKey(uncompressedKey));\n+        BOOST_CHECK(keystore.AddKey(keys[1]));\n+\n+        CScript redeemScript = GetScriptForMultisig(2, {uncompressedPubkey, pubkeys[1]});\n+        scriptPubKey = GetScriptForDestination(ScriptHash(redeemScript));\n+\n+        // Keystore has no redeemScript\n+        result = IsMine(keystore, scriptPubKey);\n+        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n+\n+        // Keystore has redeemScript\n+        BOOST_CHECK(keystore.AddCScript(redeemScript));\n+        result = IsMine(keystore, scriptPubKey);\n+        BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n+    }\n+\n+    // P2WSH multisig with compressed keys\n+    {\n+        CBasicKeyStore keystore;\n+        BOOST_CHECK(keystore.AddKey(keys[0]));\n+        BOOST_CHECK(keystore.AddKey(keys[1]));\n+\n+        CScript witnessScript = GetScriptForMultisig(2, {pubkeys[0], pubkeys[1]});\n+        scriptPubKey = GetScriptForDestination(WitnessV0ScriptHash(witnessScript));\n+\n+        // Keystore has keys, but no witnessScript or P2SH redeemScript\n+        result = IsMine(keystore, scriptPubKey);\n+        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n+\n+        // Keystore has keys and witnessScript, but no P2SH redeemScript\n+        BOOST_CHECK(keystore.AddCScript(witnessScript));\n+        result = IsMine(keystore, scriptPubKey);\n+        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n+\n+        // Keystore has keys, witnessScript, P2SH redeemScript\n+        BOOST_CHECK(keystore.AddCScript(scriptPubKey));\n+        result = IsMine(keystore, scriptPubKey);\n+        BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n+    }\n+\n+    // P2WSH multisig with uncompressed key\n+    {\n+        CBasicKeyStore keystore;\n+        BOOST_CHECK(keystore.AddKey(uncompressedKey));\n+        BOOST_CHECK(keystore.AddKey(keys[1]));\n+\n+        CScript witnessScript = GetScriptForMultisig(2, {uncompressedPubkey, pubkeys[1]});\n+        scriptPubKey = GetScriptForDestination(WitnessV0ScriptHash(witnessScript));\n+\n+        // Keystore has keys, but no witnessScript or P2SH redeemScript\n+        result = IsMine(keystore, scriptPubKey);\n+        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n+\n+        // Keystore has keys and witnessScript, but no P2SH redeemScript\n+        BOOST_CHECK(keystore.AddCScript(witnessScript));\n+        result = IsMine(keystore, scriptPubKey);\n+        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n+\n+        // Keystore has keys, witnessScript, P2SH redeemScript\n+        BOOST_CHECK(keystore.AddCScript(scriptPubKey));\n+        result = IsMine(keystore, scriptPubKey);\n+        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n+    }\n+\n+    // P2WSH multisig wrapped in P2SH\n+    {\n+        CBasicKeyStore keystore;\n+\n+        CScript witnessScript = GetScriptForMultisig(2, {pubkeys[0], pubkeys[1]});\n+        CScript redeemScript = GetScriptForDestination(WitnessV0ScriptHash(witnessScript));\n+        scriptPubKey = GetScriptForDestination(ScriptHash(redeemScript));\n+\n+        // Keystore has no witnessScript, P2SH redeemScript, or keys\n+        result = IsMine(keystore, scriptPubKey);\n+        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n+\n+        // Keystore has witnessScript and P2SH redeemScript, but no keys\n+        BOOST_CHECK(keystore.AddCScript(redeemScript));\n+        BOOST_CHECK(keystore.AddCScript(witnessScript));\n+        result = IsMine(keystore, scriptPubKey);\n+        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n+\n+        // Keystore has keys, witnessScript, P2SH redeemScript\n+        BOOST_CHECK(keystore.AddKey(keys[0]));\n+        BOOST_CHECK(keystore.AddKey(keys[1]));\n+        result = IsMine(keystore, scriptPubKey);\n+        BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n+    }\n+\n+    // OP_RETURN\n+    {\n+        CBasicKeyStore keystore;\n+        BOOST_CHECK(keystore.AddKey(keys[0]));\n+\n+        scriptPubKey.clear();\n+        scriptPubKey << OP_RETURN << ToByteVector(pubkeys[0]);\n+\n+        result = IsMine(keystore, scriptPubKey);\n+        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n+    }\n+\n+    // witness unspendable\n+    {\n+        CBasicKeyStore keystore;\n+        BOOST_CHECK(keystore.AddKey(keys[0]));\n+\n+        scriptPubKey.clear();\n+        scriptPubKey << OP_0 << ToByteVector(ParseHex(\"aabb\"));\n+\n+        result = IsMine(keystore, scriptPubKey);\n+        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n+    }\n+\n+    // witness unknown\n+    {\n+        CBasicKeyStore keystore;\n+        BOOST_CHECK(keystore.AddKey(keys[0]));\n+\n+        scriptPubKey.clear();\n+        scriptPubKey << OP_16 << ToByteVector(ParseHex(\"aabb\"));\n+\n+        result = IsMine(keystore, scriptPubKey);\n+        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n+    }\n+\n+    // Nonstandard\n+    {\n+        CBasicKeyStore keystore;\n+        BOOST_CHECK(keystore.AddKey(keys[0]));\n+\n+        scriptPubKey.clear();\n+        scriptPubKey << OP_9 << OP_ADD << OP_11 << OP_EQUAL;\n+\n+        result = IsMine(keystore, scriptPubKey);\n+        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n+    }\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "7b5465c2194e5d2a83196d0f443dea3011eebd96",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c611e20007bf5face34d33dffa26c8db67e29ec/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c611e20007bf5face34d33dffa26c8db67e29ec/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=7c611e20007bf5face34d33dffa26c8db67e29ec",
        "patch": "@@ -11,7 +11,6 @@\n #include <interfaces/handler.h>\n #include <outputtype.h>\n #include <policy/feerate.h>\n-#include <script/ismine.h>\n #include <script/sign.h>\n #include <streams.h>\n #include <tinyformat.h>\n@@ -21,6 +20,7 @@\n #include <validationinterface.h>\n #include <wallet/coinselection.h>\n #include <wallet/crypter.h>\n+#include <wallet/ismine.h>\n #include <wallet/walletdb.h>\n #include <wallet/walletutil.h>\n "
      },
      {
        "sha": "7ee25056318f3c5b49c5fe09f6eed4e4ac61c178",
        "filename": "src/wallet/wallettool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c611e20007bf5face34d33dffa26c8db67e29ec/src/wallet/wallettool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c611e20007bf5face34d33dffa26c8db67e29ec/src/wallet/wallettool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallettool.h?ref=7c611e20007bf5face34d33dffa26c8db67e29ec",
        "patch": "@@ -5,7 +5,7 @@\n #ifndef BITCOIN_WALLET_WALLETTOOL_H\n #define BITCOIN_WALLET_WALLETTOOL_H\n \n-#include <script/ismine.h>\n+#include <wallet/ismine.h>\n #include <wallet/wallet.h>\n \n namespace WalletTool {"
      }
    ]
  },
  {
    "sha": "e61de6306fd89fe9aae90253062e7b1b20343f8a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNjFkZTYzMDZmZDg5ZmU5YWFlOTAyNTMwNjJlN2IxYjIwMzQzZjhh",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-06T08:00:00Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-19T22:06:30Z"
      },
      "message": "Change ismine to take a CWallet instead of CKeyStore",
      "tree": {
        "sha": "f777e92758b6e5bba1ce33c97889b0e19c1b9671",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f777e92758b6e5bba1ce33c97889b0e19c1b9671"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e61de6306fd89fe9aae90253062e7b1b20343f8a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e61de6306fd89fe9aae90253062e7b1b20343f8a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e61de6306fd89fe9aae90253062e7b1b20343f8a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e61de6306fd89fe9aae90253062e7b1b20343f8a/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7c611e20007bf5face34d33dffa26c8db67e29ec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7c611e20007bf5face34d33dffa26c8db67e29ec",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7c611e20007bf5face34d33dffa26c8db67e29ec"
      }
    ],
    "stats": {
      "total": 81,
      "additions": 51,
      "deletions": 30
    },
    "files": [
      {
        "sha": "6138d4ae4460387aed01839d20bb5c08e6e98dc7",
        "filename": "src/wallet/ismine.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e61de6306fd89fe9aae90253062e7b1b20343f8a/src/wallet/ismine.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e61de6306fd89fe9aae90253062e7b1b20343f8a/src/wallet/ismine.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/ismine.cpp?ref=e61de6306fd89fe9aae90253062e7b1b20343f8a",
        "patch": "@@ -6,10 +6,9 @@\n #include <wallet/ismine.h>\n \n #include <key.h>\n-#include <keystore.h>\n #include <script/script.h>\n #include <script/sign.h>\n-\n+#include <wallet/wallet.h>\n \n typedef std::vector<unsigned char> valtype;\n \n@@ -46,7 +45,7 @@ bool PermitsUncompressed(IsMineSigVersion sigversion)\n     return sigversion == IsMineSigVersion::TOP || sigversion == IsMineSigVersion::P2SH;\n }\n \n-bool HaveKeys(const std::vector<valtype>& pubkeys, const CKeyStore& keystore)\n+bool HaveKeys(const std::vector<valtype>& pubkeys, const CWallet& keystore)\n {\n     for (const valtype& pubkey : pubkeys) {\n         CKeyID keyID = CPubKey(pubkey).GetID();\n@@ -55,7 +54,7 @@ bool HaveKeys(const std::vector<valtype>& pubkeys, const CKeyStore& keystore)\n     return true;\n }\n \n-IsMineResult IsMineInner(const CKeyStore& keystore, const CScript& scriptPubKey, IsMineSigVersion sigversion)\n+IsMineResult IsMineInner(const CWallet& keystore, const CScript& scriptPubKey, IsMineSigVersion sigversion)\n {\n     IsMineResult ret = IsMineResult::NO;\n \n@@ -172,7 +171,7 @@ IsMineResult IsMineInner(const CKeyStore& keystore, const CScript& scriptPubKey,\n \n } // namespace\n \n-isminetype IsMine(const CKeyStore& keystore, const CScript& scriptPubKey)\n+isminetype IsMine(const CWallet& keystore, const CScript& scriptPubKey)\n {\n     switch (IsMineInner(keystore, scriptPubKey, IsMineSigVersion::TOP)) {\n     case IsMineResult::INVALID:\n@@ -186,7 +185,7 @@ isminetype IsMine(const CKeyStore& keystore, const CScript& scriptPubKey)\n     assert(false);\n }\n \n-isminetype IsMine(const CKeyStore& keystore, const CTxDestination& dest)\n+isminetype IsMine(const CWallet& keystore, const CTxDestination& dest)\n {\n     CScript script = GetScriptForDestination(dest);\n     return IsMine(keystore, script);"
      },
      {
        "sha": "41555fcb93e7a5dd0fb7da8c620a5f13ce7e17c7",
        "filename": "src/wallet/ismine.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e61de6306fd89fe9aae90253062e7b1b20343f8a/src/wallet/ismine.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e61de6306fd89fe9aae90253062e7b1b20343f8a/src/wallet/ismine.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/ismine.h?ref=e61de6306fd89fe9aae90253062e7b1b20343f8a",
        "patch": "@@ -11,7 +11,7 @@\n #include <stdint.h>\n #include <bitset>\n \n-class CKeyStore;\n+class CWallet;\n class CScript;\n \n /** IsMine() return codes */\n@@ -28,8 +28,8 @@ enum isminetype : unsigned int\n /** used for bitflags of isminetype */\n typedef uint8_t isminefilter;\n \n-isminetype IsMine(const CKeyStore& keystore, const CScript& scriptPubKey);\n-isminetype IsMine(const CKeyStore& keystore, const CTxDestination& dest);\n+isminetype IsMine(const CWallet& wallet, const CScript& scriptPubKey);\n+isminetype IsMine(const CWallet& wallet, const CTxDestination& dest);\n \n /**\n  * Cachable amount subdivided into watchonly and spendable parts."
      },
      {
        "sha": "0cae0556762b4323e554538b9f695044d385462b",
        "filename": "src/wallet/test/ismine_tests.cpp",
        "status": "modified",
        "additions": 42,
        "deletions": 21,
        "changes": 63,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e61de6306fd89fe9aae90253062e7b1b20343f8a/src/wallet/test/ismine_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e61de6306fd89fe9aae90253062e7b1b20343f8a/src/wallet/test/ismine_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/ismine_tests.cpp?ref=e61de6306fd89fe9aae90253062e7b1b20343f8a",
        "patch": "@@ -3,12 +3,12 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <key.h>\n-#include <keystore.h>\n #include <script/script.h>\n #include <script/script_error.h>\n #include <script/standard.h>\n #include <test/setup_common.h>\n #include <wallet/ismine.h>\n+#include <wallet/wallet.h>\n \n #include <boost/test/unit_test.hpp>\n \n@@ -27,13 +27,15 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n     CKey uncompressedKey;\n     uncompressedKey.MakeNewKey(false);\n     CPubKey uncompressedPubkey = uncompressedKey.GetPubKey();\n+    std::unique_ptr<interfaces::Chain> chain = interfaces::MakeChain();\n \n     CScript scriptPubKey;\n     isminetype result;\n \n     // P2PK compressed\n     {\n-        CBasicKeyStore keystore;\n+        CWallet keystore(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n+        LOCK(keystore.cs_wallet);\n         scriptPubKey = GetScriptForRawPubKey(pubkeys[0]);\n \n         // Keystore does not have key\n@@ -48,7 +50,8 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n \n     // P2PK uncompressed\n     {\n-        CBasicKeyStore keystore;\n+        CWallet keystore(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n+        LOCK(keystore.cs_wallet);\n         scriptPubKey = GetScriptForRawPubKey(uncompressedPubkey);\n \n         // Keystore does not have key\n@@ -63,7 +66,8 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n \n     // P2PKH compressed\n     {\n-        CBasicKeyStore keystore;\n+        CWallet keystore(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n+        LOCK(keystore.cs_wallet);\n         scriptPubKey = GetScriptForDestination(PKHash(pubkeys[0]));\n \n         // Keystore does not have key\n@@ -78,7 +82,8 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n \n     // P2PKH uncompressed\n     {\n-        CBasicKeyStore keystore;\n+        CWallet keystore(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n+        LOCK(keystore.cs_wallet);\n         scriptPubKey = GetScriptForDestination(PKHash(uncompressedPubkey));\n \n         // Keystore does not have key\n@@ -93,7 +98,8 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n \n     // P2SH\n     {\n-        CBasicKeyStore keystore;\n+        CWallet keystore(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n+        LOCK(keystore.cs_wallet);\n \n         CScript redeemScript = GetScriptForDestination(PKHash(pubkeys[0]));\n         scriptPubKey = GetScriptForDestination(ScriptHash(redeemScript));\n@@ -115,7 +121,8 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n \n     // (P2PKH inside) P2SH inside P2SH (invalid)\n     {\n-        CBasicKeyStore keystore;\n+        CWallet keystore(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n+        LOCK(keystore.cs_wallet);\n \n         CScript redeemscript_inner = GetScriptForDestination(PKHash(pubkeys[0]));\n         CScript redeemscript = GetScriptForDestination(ScriptHash(redeemscript_inner));\n@@ -131,7 +138,8 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n \n     // (P2PKH inside) P2SH inside P2WSH (invalid)\n     {\n-        CBasicKeyStore keystore;\n+        CWallet keystore(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n+        LOCK(keystore.cs_wallet);\n \n         CScript redeemscript = GetScriptForDestination(PKHash(pubkeys[0]));\n         CScript witnessscript = GetScriptForDestination(ScriptHash(redeemscript));\n@@ -147,7 +155,8 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n \n     // P2WPKH inside P2WSH (invalid)\n     {\n-        CBasicKeyStore keystore;\n+        CWallet keystore(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n+        LOCK(keystore.cs_wallet);\n \n         CScript witnessscript = GetScriptForDestination(WitnessV0KeyHash(PKHash(pubkeys[0])));\n         scriptPubKey = GetScriptForDestination(WitnessV0ScriptHash(witnessscript));\n@@ -161,7 +170,8 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n \n     // (P2PKH inside) P2WSH inside P2WSH (invalid)\n     {\n-        CBasicKeyStore keystore;\n+        CWallet keystore(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n+        LOCK(keystore.cs_wallet);\n \n         CScript witnessscript_inner = GetScriptForDestination(PKHash(pubkeys[0]));\n         CScript witnessscript = GetScriptForDestination(WitnessV0ScriptHash(witnessscript_inner));\n@@ -177,7 +187,8 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n \n     // P2WPKH compressed\n     {\n-        CBasicKeyStore keystore;\n+        CWallet keystore(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n+        LOCK(keystore.cs_wallet);\n         BOOST_CHECK(keystore.AddKey(keys[0]));\n \n         scriptPubKey = GetScriptForDestination(WitnessV0KeyHash(PKHash(pubkeys[0])));\n@@ -190,7 +201,8 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n \n     // P2WPKH uncompressed\n     {\n-        CBasicKeyStore keystore;\n+        CWallet keystore(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n+        LOCK(keystore.cs_wallet);\n         BOOST_CHECK(keystore.AddKey(uncompressedKey));\n \n         scriptPubKey = GetScriptForDestination(WitnessV0KeyHash(PKHash(uncompressedPubkey)));\n@@ -207,7 +219,8 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n \n     // scriptPubKey multisig\n     {\n-        CBasicKeyStore keystore;\n+        CWallet keystore(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n+        LOCK(keystore.cs_wallet);\n \n         scriptPubKey = GetScriptForMultisig(2, {uncompressedPubkey, pubkeys[1]});\n \n@@ -236,7 +249,8 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n \n     // P2SH multisig\n     {\n-        CBasicKeyStore keystore;\n+        CWallet keystore(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n+        LOCK(keystore.cs_wallet);\n         BOOST_CHECK(keystore.AddKey(uncompressedKey));\n         BOOST_CHECK(keystore.AddKey(keys[1]));\n \n@@ -255,7 +269,8 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n \n     // P2WSH multisig with compressed keys\n     {\n-        CBasicKeyStore keystore;\n+        CWallet keystore(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n+        LOCK(keystore.cs_wallet);\n         BOOST_CHECK(keystore.AddKey(keys[0]));\n         BOOST_CHECK(keystore.AddKey(keys[1]));\n \n@@ -279,7 +294,8 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n \n     // P2WSH multisig with uncompressed key\n     {\n-        CBasicKeyStore keystore;\n+        CWallet keystore(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n+        LOCK(keystore.cs_wallet);\n         BOOST_CHECK(keystore.AddKey(uncompressedKey));\n         BOOST_CHECK(keystore.AddKey(keys[1]));\n \n@@ -303,7 +319,8 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n \n     // P2WSH multisig wrapped in P2SH\n     {\n-        CBasicKeyStore keystore;\n+        CWallet keystore(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n+        LOCK(keystore.cs_wallet);\n \n         CScript witnessScript = GetScriptForMultisig(2, {pubkeys[0], pubkeys[1]});\n         CScript redeemScript = GetScriptForDestination(WitnessV0ScriptHash(witnessScript));\n@@ -328,7 +345,8 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n \n     // OP_RETURN\n     {\n-        CBasicKeyStore keystore;\n+        CWallet keystore(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n+        LOCK(keystore.cs_wallet);\n         BOOST_CHECK(keystore.AddKey(keys[0]));\n \n         scriptPubKey.clear();\n@@ -340,7 +358,8 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n \n     // witness unspendable\n     {\n-        CBasicKeyStore keystore;\n+        CWallet keystore(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n+        LOCK(keystore.cs_wallet);\n         BOOST_CHECK(keystore.AddKey(keys[0]));\n \n         scriptPubKey.clear();\n@@ -352,7 +371,8 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n \n     // witness unknown\n     {\n-        CBasicKeyStore keystore;\n+        CWallet keystore(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n+        LOCK(keystore.cs_wallet);\n         BOOST_CHECK(keystore.AddKey(keys[0]));\n \n         scriptPubKey.clear();\n@@ -364,7 +384,8 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n \n     // Nonstandard\n     {\n-        CBasicKeyStore keystore;\n+        CWallet keystore(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n+        LOCK(keystore.cs_wallet);\n         BOOST_CHECK(keystore.AddKey(keys[0]));\n \n         scriptPubKey.clear();"
      },
      {
        "sha": "70cc16337e30a8504a283f4006d091ac19008a0f",
        "filename": "test/lint/lint-circular-dependencies.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e61de6306fd89fe9aae90253062e7b1b20343f8a/test/lint/lint-circular-dependencies.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e61de6306fd89fe9aae90253062e7b1b20343f8a/test/lint/lint-circular-dependencies.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-circular-dependencies.sh?ref=e61de6306fd89fe9aae90253062e7b1b20343f8a",
        "patch": "@@ -30,6 +30,7 @@ EXPECTED_CIRCULAR_DEPENDENCIES=(\n     \"policy/fees -> txmempool -> validation -> policy/fees\"\n     \"qt/guiutil -> qt/walletmodel -> qt/optionsmodel -> qt/guiutil\"\n     \"txmempool -> validation -> validationinterface -> txmempool\"\n+    \"wallet/ismine -> wallet/wallet -> wallet/ismine\"\n )\n \n EXIT_CODE=0"
      }
    ]
  }
]