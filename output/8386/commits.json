[
  {
    "sha": "3092829809dacaceaef2779457c692570661a6e6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMDkyODI5ODA5ZGFjYWNlYWVmMjc3OTQ1N2M2OTI1NzA2NjFhNmU2",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-07-21T16:55:07Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-07-21T16:55:07Z"
      },
      "message": "mining: Optimise for typical mining use with blockmaxsize",
      "tree": {
        "sha": "b1c98c2ec3363e87e4aed1cb12beeb399c57ee96",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b1c98c2ec3363e87e4aed1cb12beeb399c57ee96"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3092829809dacaceaef2779457c692570661a6e6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3092829809dacaceaef2779457c692570661a6e6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3092829809dacaceaef2779457c692570661a6e6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3092829809dacaceaef2779457c692570661a6e6/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "381917f610e3c770acb5e323884e7eef6fd25841",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/381917f610e3c770acb5e323884e7eef6fd25841",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/381917f610e3c770acb5e323884e7eef6fd25841"
      }
    ],
    "stats": {
      "total": 69,
      "additions": 39,
      "deletions": 30
    },
    "files": [
      {
        "sha": "98ba19e0355ab3e71b9a748905a2b703a8412fbe",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 21,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3092829809dacaceaef2779457c692570661a6e6/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3092829809dacaceaef2779457c692570661a6e6/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=3092829809dacaceaef2779457c692570661a6e6",
        "patch": "@@ -99,9 +99,6 @@ BlockAssembler::BlockAssembler(const CChainParams& _chainparams)\n     nBlockMaxWeight = std::max((unsigned int)4000, std::min((unsigned int)(MAX_BLOCK_WEIGHT-4000), nBlockMaxWeight));\n     // Limit size to between 1K and MAX_BLOCK_SERIALIZED_SIZE-1K for sanity:\n     nBlockMaxSize = std::max((unsigned int)1000, std::min((unsigned int)(MAX_BLOCK_SERIALIZED_SIZE-1000), nBlockMaxSize));\n-\n-    // Whether we need to account for byte usage (in addition to weight usage)\n-    fNeedSizeAccounting = (nBlockMaxSize < MAX_BLOCK_SERIALIZED_SIZE-1000);\n }\n \n void BlockAssembler::resetBlock()\n@@ -221,11 +218,13 @@ void BlockAssembler::onlyUnconfirmed(CTxMemPool::setEntries& testSet)\n     }\n }\n \n-bool BlockAssembler::TestPackage(uint64_t packageSize, int64_t packageSigOpsCost)\n+bool BlockAssembler::TestPackage(uint64_t packageSize, int64_t packageSigOpsCost, uint64_t packageRealSize)\n {\n     // TODO: switch to weight-based accounting for packages instead of vsize-based accounting.\n     if (nBlockWeight + WITNESS_SCALE_FACTOR * packageSize >= nBlockMaxWeight)\n         return false;\n+    if (nBlockSize + packageRealSize >= nBlockMaxSize)\n+        return false;\n     if (nBlockSigOpsCost + packageSigOpsCost >= MAX_BLOCK_SIGOPS_COST)\n         return false;\n     return true;\n@@ -238,19 +237,11 @@ bool BlockAssembler::TestPackage(uint64_t packageSize, int64_t packageSigOpsCost\n // - serialized size (in case -blockmaxsize is in use)\n bool BlockAssembler::TestPackageTransactions(const CTxMemPool::setEntries& package)\n {\n-    uint64_t nPotentialBlockSize = nBlockSize; // only used with fNeedSizeAccounting\n     BOOST_FOREACH (const CTxMemPool::txiter it, package) {\n         if (!IsFinalTx(it->GetTx(), nHeight, nLockTimeCutoff))\n             return false;\n         if (!fIncludeWitness && !it->GetTx().wit.IsNull())\n             return false;\n-        if (fNeedSizeAccounting) {\n-            uint64_t nTxSize = ::GetSerializeSize(it->GetTx(), SER_NETWORK, PROTOCOL_VERSION);\n-            if (nPotentialBlockSize + nTxSize >= nBlockMaxSize) {\n-                return false;\n-            }\n-            nPotentialBlockSize += nTxSize;\n-        }\n     }\n     return true;\n }\n@@ -273,8 +264,8 @@ bool BlockAssembler::TestForBlock(CTxMemPool::txiter iter)\n         return false;\n     }\n \n-    if (fNeedSizeAccounting) {\n-        if (nBlockSize + ::GetSerializeSize(iter->GetTx(), SER_NETWORK, PROTOCOL_VERSION) >= nBlockMaxSize) {\n+    {\n+        if (nBlockSize + iter->GetRealTxSize() >= nBlockMaxSize) {\n             if (nBlockSize >  nBlockMaxSize - 100 || lastFewTxs > 50) {\n                  blockFinished = true;\n                  return false;\n@@ -312,8 +303,8 @@ void BlockAssembler::AddToBlock(CTxMemPool::txiter iter)\n     pblock->vtx.push_back(iter->GetTx());\n     pblocktemplate->vTxFees.push_back(iter->GetFee());\n     pblocktemplate->vTxSigOpsCost.push_back(iter->GetSigOpCost());\n-    if (fNeedSizeAccounting) {\n-        nBlockSize += ::GetSerializeSize(iter->GetTx(), SER_NETWORK, PROTOCOL_VERSION);\n+    {\n+        nBlockSize += iter->GetRealTxSize();\n     }\n     nBlockWeight += iter->GetTxWeight();\n     ++nBlockTx;\n@@ -346,6 +337,7 @@ void BlockAssembler::UpdatePackagesForAdded(const CTxMemPool::setEntries& alread\n             modtxiter mit = mapModifiedTx.find(desc);\n             if (mit == mapModifiedTx.end()) {\n                 CTxMemPoolModifiedEntry modEntry(desc);\n+                modEntry.nRealSizeWithAncestors -= it->GetRealTxSize();\n                 modEntry.nSizeWithAncestors -= it->GetTxSize();\n                 modEntry.nModFeesWithAncestors -= it->GetModifiedFee();\n                 modEntry.nSigOpCostWithAncestors -= it->GetSigOpCost();\n@@ -448,10 +440,12 @@ void BlockAssembler::addPackageTxs()\n         // contain anything that is inBlock.\n         assert(!inBlock.count(iter));\n \n+        uint64_t packageRealSize = iter->GetRealSizeWithAncestors();\n         uint64_t packageSize = iter->GetSizeWithAncestors();\n         CAmount packageFees = iter->GetModFeesWithAncestors();\n         int64_t packageSigOpsCost = iter->GetSigOpCostWithAncestors();\n         if (fUsingModified) {\n+            packageRealSize = modit->nRealSizeWithAncestors;\n             packageSize = modit->nSizeWithAncestors;\n             packageFees = modit->nModFeesWithAncestors;\n             packageSigOpsCost = modit->nSigOpCostWithAncestors;\n@@ -462,7 +456,7 @@ void BlockAssembler::addPackageTxs()\n             return;\n         }\n \n-        if (!TestPackage(packageSize, packageSigOpsCost)) {\n+        if (!TestPackage(packageSize, packageSigOpsCost, packageRealSize)) {\n             if (fUsingModified) {\n                 // Since we always look at the best entry in mapModifiedTx,\n                 // we must erase failed entries so that we can consider the\n@@ -516,9 +510,6 @@ void BlockAssembler::addPriorityTxs()\n         return;\n     }\n \n-    bool fSizeAccounting = fNeedSizeAccounting;\n-    fNeedSizeAccounting = true;\n-\n     // This vector will be sorted into a priority queue:\n     vector<TxCoinAgePriority> vecPriority;\n     TxCoinAgePriorityCompare pricomparer;\n@@ -584,7 +575,6 @@ void BlockAssembler::addPriorityTxs()\n             }\n         }\n     }\n-    fNeedSizeAccounting = fSizeAccounting;\n }\n \n void IncrementExtraNonce(CBlock* pblock, const CBlockIndex* pindexPrev, unsigned int& nExtraNonce)"
      },
      {
        "sha": "5d9c6f09ddb5f5065dc8a787a8569874a9b8daf3",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3092829809dacaceaef2779457c692570661a6e6/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3092829809dacaceaef2779457c692570661a6e6/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=3092829809dacaceaef2779457c692570661a6e6",
        "patch": "@@ -38,12 +38,14 @@ struct CTxMemPoolModifiedEntry {\n     CTxMemPoolModifiedEntry(CTxMemPool::txiter entry)\n     {\n         iter = entry;\n+        nRealSizeWithAncestors = entry->GetRealSizeWithAncestors();\n         nSizeWithAncestors = entry->GetSizeWithAncestors();\n         nModFeesWithAncestors = entry->GetModFeesWithAncestors();\n         nSigOpCostWithAncestors = entry->GetSigOpCostWithAncestors();\n     }\n \n     CTxMemPool::txiter iter;\n+    uint64_t nRealSizeWithAncestors;\n     uint64_t nSizeWithAncestors;\n     CAmount nModFeesWithAncestors;\n     int64_t nSigOpCostWithAncestors;\n@@ -189,7 +191,7 @@ class BlockAssembler\n     /** Remove confirmed (inBlock) entries from given set */\n     void onlyUnconfirmed(CTxMemPool::setEntries& testSet);\n     /** Test if a new package would \"fit\" in the block */\n-    bool TestPackage(uint64_t packageSize, int64_t packageSigOpsCost);\n+    bool TestPackage(uint64_t packageSize, int64_t packageSigOpsCost, uint64_t packageRealSize);\n     /** Perform checks on each transaction in a package:\n       * locktime, premature-witness, serialized size (if necessary)\n       * These checks should always succeed, and they're here"
      },
      {
        "sha": "6229bac449324d2d394f62678757e362b79b9115",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 4,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3092829809dacaceaef2779457c692570661a6e6/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3092829809dacaceaef2779457c692570661a6e6/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=3092829809dacaceaef2779457c692570661a6e6",
        "patch": "@@ -28,6 +28,7 @@ CTxMemPoolEntry::CTxMemPoolEntry(const CTransaction& _tx, const CAmount& _nFee,\n     hadNoDependencies(poolHasNoInputsOf), inChainInputValue(_inChainInputValue),\n     spendsCoinbase(_spendsCoinbase), sigOpCost(_sigOpsCost), lockPoints(lp)\n {\n+    nTxSize = ::GetSerializeSize(_tx, SER_NETWORK, PROTOCOL_VERSION);\n     nTxWeight = GetTransactionWeight(_tx);\n     nModSize = _tx.CalculateModifiedSize(GetTxSize());\n     nUsageSize = RecursiveDynamicUsage(*tx) + memusage::DynamicUsage(tx);\n@@ -42,6 +43,7 @@ CTxMemPoolEntry::CTxMemPoolEntry(const CTransaction& _tx, const CAmount& _nFee,\n \n     nCountWithAncestors = 1;\n     nSizeWithAncestors = GetTxSize();\n+    nRealSizeWithAncestors = GetRealTxSize();\n     nModFeesWithAncestors = nFee;\n     nSigOpCostWithAncestors = sigOpCost;\n }\n@@ -78,6 +80,11 @@ size_t CTxMemPoolEntry::GetTxSize() const\n     return GetVirtualTransactionSize(nTxWeight);\n }\n \n+size_t CTxMemPoolEntry::GetRealTxSize() const\n+{\n+    return nTxSize;\n+}\n+\n // Update the given tx for any in-mempool descendants.\n // Assumes that setMemPoolChildren is correct for the given tx and all\n // descendants.\n@@ -117,7 +124,7 @@ void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendan\n             modifyCount++;\n             cachedDescendants[updateIt].insert(cit);\n             // Update ancestor state for each descendant\n-            mapTx.modify(cit, update_ancestor_state(updateIt->GetTxSize(), updateIt->GetModifiedFee(), 1, updateIt->GetSigOpCost()));\n+            mapTx.modify(cit, update_ancestor_state(updateIt->GetTxSize(), updateIt->GetModifiedFee(), 1, updateIt->GetSigOpCost(), updateIt->GetRealTxSize()));\n         }\n     }\n     mapTx.modify(updateIt, update_descendant_state(modifySize, modifyFee, modifyCount));\n@@ -251,15 +258,17 @@ void CTxMemPool::UpdateAncestorsOf(bool add, txiter it, setEntries &setAncestors\n void CTxMemPool::UpdateEntryForAncestors(txiter it, const setEntries &setAncestors)\n {\n     int64_t updateCount = setAncestors.size();\n+    int64_t updateRealSize = 0;\n     int64_t updateSize = 0;\n     CAmount updateFee = 0;\n     int64_t updateSigOpsCost = 0;\n     BOOST_FOREACH(txiter ancestorIt, setAncestors) {\n+        updateRealSize += ancestorIt->GetRealTxSize();\n         updateSize += ancestorIt->GetTxSize();\n         updateFee += ancestorIt->GetModifiedFee();\n         updateSigOpsCost += ancestorIt->GetSigOpCost();\n     }\n-    mapTx.modify(it, update_ancestor_state(updateSize, updateFee, updateCount, updateSigOpsCost));\n+    mapTx.modify(it, update_ancestor_state(updateSize, updateFee, updateCount, updateSigOpsCost, updateRealSize));\n }\n \n void CTxMemPool::UpdateChildrenForRemoval(txiter it)\n@@ -286,11 +295,12 @@ void CTxMemPool::UpdateForRemoveFromMempool(const setEntries &entriesToRemove, b\n             setEntries setDescendants;\n             CalculateDescendants(removeIt, setDescendants);\n             setDescendants.erase(removeIt); // don't update state for self\n+            int64_t modifyRealSize = -((int64_t)removeIt->GetRealTxSize());\n             int64_t modifySize = -((int64_t)removeIt->GetTxSize());\n             CAmount modifyFee = -removeIt->GetModifiedFee();\n             int modifySigOps = -removeIt->GetSigOpCost();\n             BOOST_FOREACH(txiter dit, setDescendants) {\n-                mapTx.modify(dit, update_ancestor_state(modifySize, modifyFee, -1, modifySigOps));\n+                mapTx.modify(dit, update_ancestor_state(modifySize, modifyFee, -1, modifySigOps, modifyRealSize));\n             }\n         }\n     }\n@@ -337,7 +347,7 @@ void CTxMemPoolEntry::UpdateDescendantState(int64_t modifySize, CAmount modifyFe\n     assert(int64_t(nCountWithDescendants) > 0);\n }\n \n-void CTxMemPoolEntry::UpdateAncestorState(int64_t modifySize, CAmount modifyFee, int64_t modifyCount, int modifySigOps)\n+void CTxMemPoolEntry::UpdateAncestorState(int64_t modifySize, CAmount modifyFee, int64_t modifyCount, int modifySigOps, int64_t modifyRealSize)\n {\n     nSizeWithAncestors += modifySize;\n     assert(int64_t(nSizeWithAncestors) > 0);\n@@ -346,6 +356,8 @@ void CTxMemPoolEntry::UpdateAncestorState(int64_t modifySize, CAmount modifyFee,\n     assert(int64_t(nCountWithAncestors) > 0);\n     nSigOpCostWithAncestors += modifySigOps;\n     assert(int(nSigOpCostWithAncestors) >= 0);\n+    nRealSizeWithAncestors += modifyRealSize;\n+    assert(int64_t(nRealSizeWithAncestors) > 0);\n }\n \n CTxMemPool::CTxMemPool(const CFeeRate& _minReasonableRelayFee) :"
      },
      {
        "sha": "99175c7c17f9dc626cb95ffa6bbeccb936a14755",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 9,
        "deletions": 4,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3092829809dacaceaef2779457c692570661a6e6/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3092829809dacaceaef2779457c692570661a6e6/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=3092829809dacaceaef2779457c692570661a6e6",
        "patch": "@@ -78,6 +78,7 @@ class CTxMemPoolEntry\n private:\n     std::shared_ptr<const CTransaction> tx;\n     CAmount nFee;              //!< Cached to avoid expensive parent-transaction lookups\n+    size_t nTxSize;\n     size_t nTxWeight;          //!< ... and avoid recomputing tx weight (also used for GetTxSize())\n     size_t nModSize;           //!< ... and modified size for priority\n     size_t nUsageSize;         //!< ... and total memory usage\n@@ -102,6 +103,7 @@ class CTxMemPoolEntry\n \n     // Analogous statistics for ancestor transactions\n     uint64_t nCountWithAncestors;\n+    uint64_t nRealSizeWithAncestors;\n     uint64_t nSizeWithAncestors;\n     CAmount nModFeesWithAncestors;\n     int64_t nSigOpCostWithAncestors;\n@@ -121,6 +123,7 @@ class CTxMemPoolEntry\n      */\n     double GetPriority(unsigned int currentHeight) const;\n     const CAmount& GetFee() const { return nFee; }\n+    size_t GetRealTxSize() const;\n     size_t GetTxSize() const;\n     size_t GetTxWeight() const { return nTxWeight; }\n     int64_t GetTime() const { return nTime; }\n@@ -134,7 +137,7 @@ class CTxMemPoolEntry\n     // Adjusts the descendant state, if this entry is not dirty.\n     void UpdateDescendantState(int64_t modifySize, CAmount modifyFee, int64_t modifyCount);\n     // Adjusts the ancestor state\n-    void UpdateAncestorState(int64_t modifySize, CAmount modifyFee, int64_t modifyCount, int modifySigOps);\n+    void UpdateAncestorState(int64_t modifySize, CAmount modifyFee, int64_t modifyCount, int modifySigOps, int64_t modifyRealSize);\n     // Updates the fee delta used for mining priority score, and the\n     // modified fees with descendants.\n     void UpdateFeeDelta(int64_t feeDelta);\n@@ -148,6 +151,7 @@ class CTxMemPoolEntry\n     bool GetSpendsCoinbase() const { return spendsCoinbase; }\n \n     uint64_t GetCountWithAncestors() const { return nCountWithAncestors; }\n+    uint64_t GetRealSizeWithAncestors() const { return nRealSizeWithAncestors; }\n     uint64_t GetSizeWithAncestors() const { return nSizeWithAncestors; }\n     CAmount GetModFeesWithAncestors() const { return nModFeesWithAncestors; }\n     int64_t GetSigOpCostWithAncestors() const { return nSigOpCostWithAncestors; }\n@@ -173,14 +177,15 @@ struct update_descendant_state\n \n struct update_ancestor_state\n {\n-    update_ancestor_state(int64_t _modifySize, CAmount _modifyFee, int64_t _modifyCount, int64_t _modifySigOpsCost) :\n-        modifySize(_modifySize), modifyFee(_modifyFee), modifyCount(_modifyCount), modifySigOpsCost(_modifySigOpsCost)\n+    update_ancestor_state(int64_t _modifySize, CAmount _modifyFee, int64_t _modifyCount, int64_t _modifySigOpsCost, int64_t _modifyRealSize) :\n+        modifyRealSize(_modifyRealSize), modifySize(_modifySize), modifyFee(_modifyFee), modifyCount(_modifyCount), modifySigOpsCost(_modifySigOpsCost)\n     {}\n \n     void operator() (CTxMemPoolEntry &e)\n-        { e.UpdateAncestorState(modifySize, modifyFee, modifyCount, modifySigOpsCost); }\n+        { e.UpdateAncestorState(modifySize, modifyFee, modifyCount, modifySigOpsCost, modifyRealSize); }\n \n     private:\n+        int64_t modifyRealSize;\n         int64_t modifySize;\n         CAmount modifyFee;\n         int64_t modifyCount;"
      }
    ]
  }
]