[
  {
    "sha": "9fc6ed6003da42f035309240c715ce0fd063ec03",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZmM2ZWQ2MDAzZGE0MmYwMzUzMDkyNDBjNzE1Y2UwZmQwNjNlYzAz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-12-07T13:47:58Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-12-07T13:53:20Z"
      },
      "message": "net: Fix sent reject messages for blocks and transactions\n\nEver since we #5913 have been sending invalid reject messages\nfor transactions and blocks.",
      "tree": {
        "sha": "06692cceaa52a78c112f885f576619f71e76c38d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/06692cceaa52a78c112f885f576619f71e76c38d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9fc6ed6003da42f035309240c715ce0fd063ec03",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9fc6ed6003da42f035309240c715ce0fd063ec03",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9fc6ed6003da42f035309240c715ce0fd063ec03",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9fc6ed6003da42f035309240c715ce0fd063ec03/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dc0305d15aa02819cd4763e1efe3876d674faea7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc0305d15aa02819cd4763e1efe3876d674faea7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dc0305d15aa02819cd4763e1efe3876d674faea7"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "84f737258cb989c6772ddd03219d1e8030b94ce2",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fc6ed6003da42f035309240c715ce0fd063ec03/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fc6ed6003da42f035309240c715ce0fd063ec03/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=9fc6ed6003da42f035309240c715ce0fd063ec03",
        "patch": "@@ -4824,7 +4824,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                 pfrom->id,\n                 FormatStateMessage(state));\n             if (state.GetRejectCode() < REJECT_INTERNAL) // Never send AcceptToMemoryPool's internal codes over P2P\n-                pfrom->PushMessage(\"reject\", strCommand, state.GetRejectCode(),\n+                pfrom->PushMessage(\"reject\", strCommand, (unsigned char)state.GetRejectCode(),\n                                    state.GetRejectReason().substr(0, MAX_REJECT_MESSAGE_LENGTH), inv.hash);\n             if (nDoS > 0)\n                 Misbehaving(pfrom->GetId(), nDoS);\n@@ -4954,7 +4954,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         int nDoS;\n         if (state.IsInvalid(nDoS)) {\n             assert (state.GetRejectCode() < REJECT_INTERNAL); // Blocks are never rejected with internal reject codes\n-            pfrom->PushMessage(\"reject\", strCommand, state.GetRejectCode(),\n+            pfrom->PushMessage(\"reject\", strCommand, (unsigned char)state.GetRejectCode(),\n                                state.GetRejectReason().substr(0, MAX_REJECT_MESSAGE_LENGTH), inv.hash);\n             if (nDoS > 0) {\n                 LOCK(cs_main);"
      }
    ]
  },
  {
    "sha": "20411903d7b356ebb174df2daad1dcd5d6117f79",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMDQxMTkwM2Q3YjM1NmViYjE3NGRmMmRhYWQxZGNkNWQ2MTE3Zjc5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-12-08T16:10:41Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-12-09T07:48:08Z"
      },
      "message": "test: Add basic test for `reject` code\n\nExtend P2P test framework to make it possible to expect reject\ncodes for transactions and blocks.",
      "tree": {
        "sha": "a75aa20d201c64076bc664a00439e1a3017f07ec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a75aa20d201c64076bc664a00439e1a3017f07ec"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/20411903d7b356ebb174df2daad1dcd5d6117f79",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/20411903d7b356ebb174df2daad1dcd5d6117f79",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/20411903d7b356ebb174df2daad1dcd5d6117f79",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/20411903d7b356ebb174df2daad1dcd5d6117f79/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9fc6ed6003da42f035309240c715ce0fd063ec03",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9fc6ed6003da42f035309240c715ce0fd063ec03",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9fc6ed6003da42f035309240c715ce0fd063ec03"
      }
    ],
    "stats": {
      "total": 125,
      "additions": 121,
      "deletions": 4
    },
    "files": [
      {
        "sha": "0cb721b033ae0db81a30ccd0566b4c2d15640dfb",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/20411903d7b356ebb174df2daad1dcd5d6117f79/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/20411903d7b356ebb174df2daad1dcd5d6117f79/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=20411903d7b356ebb174df2daad1dcd5d6117f79",
        "patch": "@@ -100,6 +100,8 @@\n     'sendheaders.py',\n     'keypool.py',\n     'prioritise_transaction.py',\n+    'invalidblockrequest.py',\n+    'invalidtxrequest.py',\n ]\n testScriptsExt = [\n     'bip65-cltv.py',\n@@ -116,7 +118,6 @@\n #    'rpcbind_test.py', #temporary, bug in libevent, see #6655\n     'smartfees.py',\n     'maxblocksinflight.py',\n-    'invalidblockrequest.py',\n     'p2p-acceptblock.py',\n     'mempool_packages.py',\n     'maxuploadtarget.py',"
      },
      {
        "sha": "a74ecb1288ba203b11367edc80ff47638befbeac",
        "filename": "qa/rpc-tests/invalidblockrequest.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/20411903d7b356ebb174df2daad1dcd5d6117f79/qa/rpc-tests/invalidblockrequest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/20411903d7b356ebb174df2daad1dcd5d6117f79/qa/rpc-tests/invalidblockrequest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/invalidblockrequest.py?ref=20411903d7b356ebb174df2daad1dcd5d6117f79",
        "patch": "@@ -6,7 +6,7 @@\n \n from test_framework.test_framework import ComparisonTestFramework\n from test_framework.util import *\n-from test_framework.comptool import TestManager, TestInstance\n+from test_framework.comptool import TestManager, TestInstance, RejectResult\n from test_framework.mininode import *\n from test_framework.blocktools import *\n import logging\n@@ -97,7 +97,7 @@ def get_tests(self):\n         assert(block2_orig.vtx != block2.vtx)\n \n         self.tip = block2.sha256\n-        yield TestInstance([[block2, False], [block2_orig, True]])\n+        yield TestInstance([[block2, RejectResult(16,'bad-txns-duplicate')], [block2_orig, True]])\n         height += 1\n \n         '''\n@@ -112,7 +112,7 @@ def get_tests(self):\n         block3.rehash()\n         block3.solve()\n \n-        yield TestInstance([[block3, False]])\n+        yield TestInstance([[block3, RejectResult(16,'bad-cb-amount')]])\n \n \n if __name__ == '__main__':"
      },
      {
        "sha": "d17b3d0980b505436685fe5e82ae21a99fbba362",
        "filename": "qa/rpc-tests/invalidtxrequest.py",
        "status": "added",
        "additions": 76,
        "deletions": 0,
        "changes": 76,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/20411903d7b356ebb174df2daad1dcd5d6117f79/qa/rpc-tests/invalidtxrequest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/20411903d7b356ebb174df2daad1dcd5d6117f79/qa/rpc-tests/invalidtxrequest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/invalidtxrequest.py?ref=20411903d7b356ebb174df2daad1dcd5d6117f79",
        "patch": "@@ -0,0 +1,76 @@\n+#!/usr/bin/env python2\n+#\n+# Distributed under the MIT/X11 software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#\n+\n+from test_framework.test_framework import ComparisonTestFramework\n+from test_framework.util import *\n+from test_framework.comptool import TestManager, TestInstance, RejectResult\n+from test_framework.mininode import *\n+from test_framework.blocktools import *\n+import logging\n+import copy\n+import time\n+\n+\n+'''\n+In this test we connect to one node over p2p, and test tx requests.\n+'''\n+\n+# Use the ComparisonTestFramework with 1 node: only use --testbinary.\n+class InvalidTxRequestTest(ComparisonTestFramework):\n+\n+    ''' Can either run this test as 1 node with expected answers, or two and compare them. \n+        Change the \"outcome\" variable from each TestInstance object to only do the comparison. '''\n+    def __init__(self):\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        test = TestManager(self, self.options.tmpdir)\n+        test.add_all_connections(self.nodes)\n+        self.tip = None\n+        self.block_time = None\n+        NetworkThread().start() # Start up network handling in another thread\n+        test.run()\n+\n+    def get_tests(self):\n+        if self.tip is None:\n+            self.tip = int (\"0x\" + self.nodes[0].getbestblockhash() + \"L\", 0)\n+        self.block_time = int(time.time())+1\n+\n+        '''\n+        Create a new block with an anyone-can-spend coinbase\n+        '''\n+        height = 1\n+        block = create_block(self.tip, create_coinbase(height), self.block_time)\n+        self.block_time += 1\n+        block.solve()\n+        # Save the coinbase for later\n+        self.block1 = block\n+        self.tip = block.sha256\n+        height += 1\n+        yield TestInstance([[block, True]])\n+\n+        '''\n+        Now we need that block to mature so we can spend the coinbase.\n+        '''\n+        test = TestInstance(sync_every_block=False)\n+        for i in xrange(100):\n+            block = create_block(self.tip, create_coinbase(height), self.block_time)\n+            block.solve()\n+            self.tip = block.sha256\n+            self.block_time += 1\n+            test.blocks_and_transactions.append([block, True])\n+            height += 1\n+        yield test\n+\n+        # chr(100) is OP_NOTIF\n+        # Transaction will be rejected with code 16 (REJECT_INVALID)\n+        tx1 = create_transaction(self.block1.vtx[0], 0, chr(100), 50*100000000)\n+        yield TestInstance([[tx1, RejectResult(16, 'mandatory-script-verify-flag-failed')]])\n+\n+        # TODO: test further transactions...\n+\n+if __name__ == '__main__':\n+    InvalidTxRequestTest().main()"
      },
      {
        "sha": "badbc0a1fbcdea76c45e811b2c5ec2c317c72b9c",
        "filename": "qa/rpc-tests/test_framework/comptool.py",
        "status": "modified",
        "additions": 40,
        "deletions": 0,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/20411903d7b356ebb174df2daad1dcd5d6117f79/qa/rpc-tests/test_framework/comptool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/20411903d7b356ebb174df2daad1dcd5d6117f79/qa/rpc-tests/test_framework/comptool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/comptool.py?ref=20411903d7b356ebb174df2daad1dcd5d6117f79",
        "patch": "@@ -41,6 +41,20 @@ def wait_until(predicate, attempts=float('inf'), timeout=float('inf')):\n \n     return False\n \n+class RejectResult(object):\n+    '''\n+    Outcome that expects rejection of a transaction or block.\n+    '''\n+    def __init__(self, code, reason=''):\n+        self.code = code\n+        self.reason = reason\n+    def match(self, other):\n+        if self.code != other.code:\n+            return False\n+        return other.reason.startswith(self.reason)\n+    def __repr__(self):\n+        return '%i:%s' % (self.code,self.reason or '*')\n+\n class TestNode(NodeConnCB):\n \n     def __init__(self, block_store, tx_store):\n@@ -51,6 +65,8 @@ def __init__(self, block_store, tx_store):\n         self.block_request_map = {}\n         self.tx_store = tx_store\n         self.tx_request_map = {}\n+        self.block_reject_map = {}\n+        self.tx_reject_map = {}\n \n         # When the pingmap is non-empty we're waiting for \n         # a response\n@@ -94,6 +110,12 @@ def on_pong(self, conn, message):\n         except KeyError:\n             raise AssertionError(\"Got pong for unknown ping [%s]\" % repr(message))\n \n+    def on_reject(self, conn, message):\n+        if message.message == 'tx':\n+            self.tx_reject_map[message.data] = RejectResult(message.code, message.reason)\n+        if message.message == 'block':\n+            self.block_reject_map[message.data] = RejectResult(message.code, message.reason)\n+\n     def send_inv(self, obj):\n         mtype = 2 if isinstance(obj, CBlock) else 1\n         self.conn.send_message(msg_inv([CInv(mtype, obj.sha256)]))\n@@ -243,6 +265,15 @@ def check_results(self, blockhash, outcome):\n                 if outcome is None:\n                     if c.cb.bestblockhash != self.connections[0].cb.bestblockhash:\n                         return False\n+                elif isinstance(outcome, RejectResult): # Check that block was rejected w/ code\n+                    if c.cb.bestblockhash == blockhash:\n+                        return False\n+                    if blockhash not in c.cb.block_reject_map:\n+                        print 'Block not in reject map: %064x' % (blockhash)\n+                        return False\n+                    if not outcome.match(c.cb.block_reject_map[blockhash]):\n+                        print 'Block rejected with %s instead of expected %s: %064x' % (c.cb.block_reject_map[blockhash], outcome, blockhash)\n+                        return False\n                 elif ((c.cb.bestblockhash == blockhash) != outcome):\n                     # print c.cb.bestblockhash, blockhash, outcome\n                     return False\n@@ -262,6 +293,15 @@ def check_mempool(self, txhash, outcome):\n                     if c.cb.lastInv != self.connections[0].cb.lastInv:\n                         # print c.rpc.getrawmempool()\n                         return False\n+                elif isinstance(outcome, RejectResult): # Check that tx was rejected w/ code\n+                    if txhash in c.cb.lastInv:\n+                        return False\n+                    if txhash not in c.cb.tx_reject_map:\n+                        print 'Tx not in reject map: %064x' % (txhash)\n+                        return False\n+                    if not outcome.match(c.cb.tx_reject_map[txhash]):\n+                        print 'Tx rejected with %s instead of expected %s: %064x' % (c.cb.tx_reject_map[txhash], outcome, txhash)\n+                        return False\n                 elif ((txhash in c.cb.lastInv) != outcome):\n                     # print c.rpc.getrawmempool(), c.cb.lastInv\n                     return False"
      }
    ]
  }
]