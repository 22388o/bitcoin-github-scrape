[
  {
    "sha": "faa5fa9a78d6d23b4e9adea07fdfb34ead170a2f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWE1ZmE5YTc4ZDZkMjNiNGU5YWRlYTA3ZmRmYjM0ZWFkMTcwYTJm",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-08-21T17:34:13Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-08-21T17:25:33Z"
      },
      "message": "fuzz: Use LIMITED_WHILE instead of limit_max_ops",
      "tree": {
        "sha": "a580529d992ddb465c0edfcdfedf57dc830f93c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a580529d992ddb465c0edfcdfedf57dc830f93c1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/faa5fa9a78d6d23b4e9adea07fdfb34ead170a2f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUggBQv/aFkjgG5NELopTRVhSCyAYnJ8q8CKPQOEaxB4G3/rQV/eZKHRmuEtq0r8\nKTUacdEtWZ47CJtJn6wBltOC7yWS3A6+4kYr5LVLrD7lPXwewm/fyM2JmuMPqqfT\np+5DZiMCBhgk2SbK2dj2S3dyMhN5CZNJ1H5ax9yGxnpmFTpVxo8QrKdGVdxVIhVn\n5moJx9L2l5SF43c+YFitWFD+AF2GhDQVh0DwBIT6jgsC/hYvfQjpKPB7hz7K4IX9\nCCl0/i5Yw51l2O1d5T4VlY5h5IjYhv/OyfkwC5OEq7YfScbDsLMgvypnNHbRuzmH\nDaeycXOPtiFZNZ2BRNkU8kiqbdqm7RJ87yeNOjMGfAgb0e9IYaJGzpUGML8sKzbh\nSNTQ6GzpAKLvIwV4/fEsGsy3VTcqzWn02RDfpPpvpWmd0h9ni6LYK9r5zQtg2pTj\nDW18C8dhHWSNHrJMkvmJfznCyo06vR3HmninPxmHa29H1RUrGPj/4R3ABEuU5nRk\nN4wMlYcs\n=nqmQ\n-----END PGP SIGNATURE-----",
        "payload": "tree a580529d992ddb465c0edfcdfedf57dc830f93c1\nparent f5a406f003a060325128db47552089b3254044e3\nauthor MarcoFalke <falke.marco@gmail.com> 1629567253 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1629566733 +0200\n\nfuzz: Use LIMITED_WHILE instead of limit_max_ops\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faa5fa9a78d6d23b4e9adea07fdfb34ead170a2f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/faa5fa9a78d6d23b4e9adea07fdfb34ead170a2f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faa5fa9a78d6d23b4e9adea07fdfb34ead170a2f/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f5a406f003a060325128db47552089b3254044e3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f5a406f003a060325128db47552089b3254044e3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f5a406f003a060325128db47552089b3254044e3"
      }
    ],
    "stats": {
      "total": 49,
      "additions": 19,
      "deletions": 30
    },
    "files": [
      {
        "sha": "561cc83c72c538bcafd5b3cd4f29240d70f0fb5a",
        "filename": "src/test/fuzz/banman.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa5fa9a78d6d23b4e9adea07fdfb34ead170a2f/src/test/fuzz/banman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa5fa9a78d6d23b4e9adea07fdfb34ead170a2f/src/test/fuzz/banman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/banman.cpp?ref=faa5fa9a78d6d23b4e9adea07fdfb34ead170a2f",
        "patch": "@@ -41,10 +41,6 @@ static bool operator==(const CBanEntry& lhs, const CBanEntry& rhs)\n \n FUZZ_TARGET_INIT(banman, initialize_banman)\n {\n-    // The complexity is O(N^2), where N is the input size, because each call\n-    // might call DumpBanlist (or other methods that are at least linear\n-    // complexity of the input size).\n-    int limit_max_ops{300};\n     FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n     SetMockTime(ConsumeTime(fuzzed_data_provider));\n     fs::path banlist_file = gArgs.GetDataDirNet() / \"fuzzed_banlist\";\n@@ -63,7 +59,11 @@ FUZZ_TARGET_INIT(banman, initialize_banman)\n \n     {\n         BanMan ban_man{banlist_file, /* client_interface */ nullptr, /* default_ban_time */ ConsumeBanTimeOffset(fuzzed_data_provider)};\n-        while (--limit_max_ops >= 0 && fuzzed_data_provider.ConsumeBool()) {\n+        // The complexity is O(N^2), where N is the input size, because each call\n+        // might call DumpBanlist (or other methods that are at least linear\n+        // complexity of the input size).\n+        LIMITED_WHILE(fuzzed_data_provider.ConsumeBool(), 300)\n+        {\n             CallOneOf(\n                 fuzzed_data_provider,\n                 [&] {"
      },
      {
        "sha": "84b95117e206697f70b393b25621a2f11c3367ae",
        "filename": "src/test/fuzz/crypto.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa5fa9a78d6d23b4e9adea07fdfb34ead170a2f/src/test/fuzz/crypto.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa5fa9a78d6d23b4e9adea07fdfb34ead170a2f/src/test/fuzz/crypto.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/crypto.cpp?ref=faa5fa9a78d6d23b4e9adea07fdfb34ead170a2f",
        "patch": "@@ -19,10 +19,6 @@\n \n FUZZ_TARGET(crypto)\n {\n-    // Hashing is expensive with sanitizers enabled, so limit the number of\n-    // calls\n-    int limit_max_ops{30};\n-\n     FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n     std::vector<uint8_t> data = ConsumeRandomLengthByteVector(fuzzed_data_provider);\n     if (data.empty()) {\n@@ -40,7 +36,8 @@ FUZZ_TARGET(crypto)\n     SHA3_256 sha3;\n     CSipHasher sip_hasher{fuzzed_data_provider.ConsumeIntegral<uint64_t>(), fuzzed_data_provider.ConsumeIntegral<uint64_t>()};\n \n-    while (--limit_max_ops >= 0 && fuzzed_data_provider.ConsumeBool()) {\n+    LIMITED_WHILE(fuzzed_data_provider.ConsumeBool(), 30)\n+    {\n         CallOneOf(\n             fuzzed_data_provider,\n             [&] {"
      },
      {
        "sha": "c91c33da670b7265a7a7853e82bd295c3607e970",
        "filename": "src/test/fuzz/fuzz.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa5fa9a78d6d23b4e9adea07fdfb34ead170a2f/src/test/fuzz/fuzz.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa5fa9a78d6d23b4e9adea07fdfb34ead170a2f/src/test/fuzz/fuzz.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/fuzz.h?ref=faa5fa9a78d6d23b4e9adea07fdfb34ead170a2f",
        "patch": "@@ -11,6 +11,10 @@\n #include <functional>\n #include <string_view>\n \n+/**\n+ * Can be used to limit a theoretically unbounded loop. This caps the runtime\n+ * to avoid timeouts or OOMs.\n+ */\n #define LIMITED_WHILE(condition, limit) \\\n     for (unsigned _count{limit}; (condition) && _count; --_count)\n "
      },
      {
        "sha": "d4b3ed501f58e0cd04268ac4eef189be8ea83136",
        "filename": "src/test/fuzz/prevector.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa5fa9a78d6d23b4e9adea07fdfb34ead170a2f/src/test/fuzz/prevector.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa5fa9a78d6d23b4e9adea07fdfb34ead170a2f/src/test/fuzz/prevector.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/prevector.cpp?ref=faa5fa9a78d6d23b4e9adea07fdfb34ead170a2f",
        "patch": "@@ -206,14 +206,11 @@ class prevector_tester\n \n FUZZ_TARGET(prevector)\n {\n-    // Pick an arbitrary upper bound to limit the runtime and avoid timeouts on\n-    // inputs.\n-    int limit_max_ops{3000};\n-\n     FuzzedDataProvider prov(buffer.data(), buffer.size());\n     prevector_tester<8, int> test;\n \n-    while (--limit_max_ops >= 0 && prov.remaining_bytes()) {\n+    LIMITED_WHILE(prov.remaining_bytes(), 3000)\n+    {\n         switch (prov.ConsumeIntegralInRange<int>(0, 13 + 3 * (test.size() > 0))) {\n         case 0:\n             test.insert(prov.ConsumeIntegralInRange<size_t>(0, test.size()), prov.ConsumeIntegral<int>());"
      },
      {
        "sha": "b9ed497e68bb2c6484c453aa4d5e53a597d2c7f3",
        "filename": "src/test/fuzz/rolling_bloom_filter.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa5fa9a78d6d23b4e9adea07fdfb34ead170a2f/src/test/fuzz/rolling_bloom_filter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa5fa9a78d6d23b4e9adea07fdfb34ead170a2f/src/test/fuzz/rolling_bloom_filter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/rolling_bloom_filter.cpp?ref=faa5fa9a78d6d23b4e9adea07fdfb34ead170a2f",
        "patch": "@@ -16,16 +16,13 @@\n \n FUZZ_TARGET(rolling_bloom_filter)\n {\n-    // Pick an arbitrary upper bound to limit the runtime and avoid timeouts on\n-    // inputs.\n-    int limit_max_ops{3000};\n-\n     FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n \n     CRollingBloomFilter rolling_bloom_filter{\n         fuzzed_data_provider.ConsumeIntegralInRange<unsigned int>(1, 1000),\n         0.999 / fuzzed_data_provider.ConsumeIntegralInRange<unsigned int>(1, std::numeric_limits<unsigned int>::max())};\n-    while (--limit_max_ops >= 0 && fuzzed_data_provider.remaining_bytes() > 0) {\n+    LIMITED_WHILE(fuzzed_data_provider.remaining_bytes() > 0, 3000)\n+    {\n         CallOneOf(\n             fuzzed_data_provider,\n             [&] {"
      },
      {
        "sha": "6201cc813c74bb8b3b37e8868115f192281d2901",
        "filename": "src/test/fuzz/tx_pool.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 10,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa5fa9a78d6d23b4e9adea07fdfb34ead170a2f/src/test/fuzz/tx_pool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa5fa9a78d6d23b4e9adea07fdfb34ead170a2f/src/test/fuzz/tx_pool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/tx_pool.cpp?ref=faa5fa9a78d6d23b4e9adea07fdfb34ead170a2f",
        "patch": "@@ -112,10 +112,6 @@ void MockTime(FuzzedDataProvider& fuzzed_data_provider, const CChainState& chain\n \n FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\n {\n-    // Pick an arbitrary upper bound to limit the runtime and avoid timeouts on\n-    // inputs.\n-    int limit_max_ops{300};\n-\n     FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n     const auto& node = g_setup->m_node;\n     auto& chainstate = node.chainman->ActiveChainstate();\n@@ -146,7 +142,8 @@ FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\n         return c.out.nValue;\n     };\n \n-    while (--limit_max_ops >= 0 && fuzzed_data_provider.ConsumeBool()) {\n+    LIMITED_WHILE(fuzzed_data_provider.ConsumeBool(), 300)\n+    {\n         {\n             // Total supply is the mempool fee + all outpoints\n             CAmount supply_now{WITH_LOCK(tx_pool.cs, return tx_pool.GetTotalFee())};\n@@ -289,10 +286,6 @@ FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\n \n FUZZ_TARGET_INIT(tx_pool, initialize_tx_pool)\n {\n-    // Pick an arbitrary upper bound to limit the runtime and avoid timeouts on\n-    // inputs.\n-    int limit_max_ops{300};\n-\n     FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n     const auto& node = g_setup->m_node;\n     auto& chainstate = node.chainman->ActiveChainstate();\n@@ -313,7 +306,8 @@ FUZZ_TARGET_INIT(tx_pool, initialize_tx_pool)\n     CTxMemPool tx_pool_{/* estimator */ nullptr, /* check_ratio */ 1};\n     MockedTxPool& tx_pool = *static_cast<MockedTxPool*>(&tx_pool_);\n \n-    while (--limit_max_ops >= 0 && fuzzed_data_provider.ConsumeBool()) {\n+    LIMITED_WHILE(fuzzed_data_provider.ConsumeBool(), 300)\n+    {\n         const auto mut_tx = ConsumeTransaction(fuzzed_data_provider, txids);\n \n         if (fuzzed_data_provider.ConsumeBool()) {"
      }
    ]
  }
]