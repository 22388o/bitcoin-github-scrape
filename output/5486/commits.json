[
  {
    "sha": "c45c7ea0fa38fda453c596bd3161c9362d689381",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNDVjN2VhMGZhMzhmZGE0NTNjNTk2YmQzMTYxYzkzNjJkNjg5Mzgx",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2014-12-16T09:50:44Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-07-05T13:48:33Z"
      },
      "message": "[REST] add JSON support for /rest/headers/",
      "tree": {
        "sha": "a91f63201dd6fe52ea55209eeb0b75499f9cdcfa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a91f63201dd6fe52ea55209eeb0b75499f9cdcfa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c45c7ea0fa38fda453c596bd3161c9362d689381",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c45c7ea0fa38fda453c596bd3161c9362d689381",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c45c7ea0fa38fda453c596bd3161c9362d689381",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c45c7ea0fa38fda453c596bd3161c9362d689381/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d0a10c1959176eb40c0ec47a56de00820c59066d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d0a10c1959176eb40c0ec47a56de00820c59066d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d0a10c1959176eb40c0ec47a56de00820c59066d"
      }
    ],
    "stats": {
      "total": 64,
      "additions": 51,
      "deletions": 13
    },
    "files": [
      {
        "sha": "1ba01362db645e92fa523c0c5c0203caa913e9db",
        "filename": "doc/REST-interface.md",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c45c7ea0fa38fda453c596bd3161c9362d689381/doc/REST-interface.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c45c7ea0fa38fda453c596bd3161c9362d689381/doc/REST-interface.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/REST-interface.md?ref=c45c7ea0fa38fda453c596bd3161c9362d689381",
        "patch": "@@ -26,13 +26,11 @@ The HTTP request and response are both handled entirely in-memory, thus making m\n With the /notxdetails/ option JSON response will only contain the transaction hash instead of the complete transaction details. The option only affects the JSON response.\n \n ####Blockheaders\n-`GET /rest/headers/<COUNT>/<BLOCK-HASH>.<bin|hex>`\n+`GET /rest/headers/<COUNT>/<BLOCK-HASH>.<bin|hex|json>`\n \n Given a block hash,\n Returns <COUNT> amount of blockheaders in upward direction.\n \n-JSON is not supported.\n-\n ####Chaininfos\n `GET /rest/chaininfo.json`\n "
      },
      {
        "sha": "1a2d326cc3b8aa8a751355133c5f4ddc6cafd510",
        "filename": "qa/rpc-tests/rest.py",
        "status": "modified",
        "additions": 35,
        "deletions": 4,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c45c7ea0fa38fda453c596bd3161c9362d689381/qa/rpc-tests/rest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c45c7ea0fa38fda453c596bd3161c9362d689381/qa/rpc-tests/rest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rest.py?ref=c45c7ea0fa38fda453c596bd3161c9362d689381",
        "patch": "@@ -235,12 +235,43 @@ def run_test(self):\n         assert_equal(response_header_str.encode(\"hex\")[0:160], response_header_hex_str[0:160])\n \n         # check json format\n-        json_string = http_get_call(url.hostname, url.port, '/rest/block/'+bb_hash+self.FORMAT_SEPARATOR+'json')\n-        json_obj = json.loads(json_string)\n-        assert_equal(json_obj['hash'], bb_hash)\n+        block_json_string = http_get_call(url.hostname, url.port, '/rest/block/'+bb_hash+self.FORMAT_SEPARATOR+'json')\n+        block_json_obj = json.loads(block_json_string)\n+        assert_equal(block_json_obj['hash'], bb_hash)\n+\n+        # compare with json block header\n+        response_header_json = http_get_call(url.hostname, url.port, '/rest/headers/1/'+bb_hash+self.FORMAT_SEPARATOR+\"json\", \"\", True)\n+        assert_equal(response_header_json.status, 200)\n+        response_header_json_str = response_header_json.read()\n+        json_obj = json.loads(response_header_json_str)\n+        assert_equal(len(json_obj), 1) #ensure that there is one header in the json response\n+        assert_equal(json_obj[0]['hash'], bb_hash) #request/response hash should be the same\n+\n+        #compare with normal RPC block response\n+        rpc_block_json = self.nodes[0].getblock(bb_hash)\n+        assert_equal(json_obj[0]['hash'],               rpc_block_json['hash'])\n+        assert_equal(json_obj[0]['confirmations'],      rpc_block_json['confirmations'])\n+        assert_equal(json_obj[0]['height'],             rpc_block_json['height'])\n+        assert_equal(json_obj[0]['version'],            rpc_block_json['version'])\n+        assert_equal(json_obj[0]['merkleroot'],         rpc_block_json['merkleroot'])\n+        assert_equal(json_obj[0]['time'],               rpc_block_json['time'])\n+        assert_equal(json_obj[0]['nonce'],              rpc_block_json['nonce'])\n+        assert_equal(json_obj[0]['bits'],               rpc_block_json['bits'])\n+        assert_equal(json_obj[0]['difficulty'],         rpc_block_json['difficulty'])\n+        assert_equal(json_obj[0]['chainwork'],          rpc_block_json['chainwork'])\n+        assert_equal(json_obj[0]['previousblockhash'],  rpc_block_json['previousblockhash'])\n+\n+        #see if we can get 5 headers in one response\n+        self.nodes[1].generate(5)\n+        self.sync_all()\n+        response_header_json = http_get_call(url.hostname, url.port, '/rest/headers/5/'+bb_hash+self.FORMAT_SEPARATOR+\"json\", \"\", True)\n+        assert_equal(response_header_json.status, 200)\n+        response_header_json_str = response_header_json.read()\n+        json_obj = json.loads(response_header_json_str)\n+        assert_equal(len(json_obj), 5) #now we should have 5 header objects\n \n         # do tx test\n-        tx_hash = json_obj['tx'][0]['txid'];\n+        tx_hash = block_json_obj['tx'][0]['txid'];\n         json_string = http_get_call(url.hostname, url.port, '/rest/tx/'+tx_hash+self.FORMAT_SEPARATOR+\"json\")\n         json_obj = json.loads(json_string)\n         assert_equal(json_obj['txid'], tx_hash)"
      },
      {
        "sha": "dfe01495f7366c94915b6243fa6ae4627f7f6f91",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 4,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c45c7ea0fa38fda453c596bd3161c9362d689381/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c45c7ea0fa38fda453c596bd3161c9362d689381/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=c45c7ea0fa38fda453c596bd3161c9362d689381",
        "patch": "@@ -65,6 +65,7 @@ class RestErr\n extern void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue& entry);\n extern UniValue blockToJSON(const CBlock& block, const CBlockIndex* blockindex, bool txDetails = false);\n extern void ScriptPubKeyToJSON(const CScript& scriptPubKey, UniValue& out, bool fIncludeHex);\n+extern UniValue blockheaderToJSON(const CBlockIndex* blockindex);\n \n static RestErr RESTERR(enum HTTPStatusCode status, string message)\n {\n@@ -134,23 +135,23 @@ static bool rest_headers(AcceptedConnection* conn,\n     if (!ParseHashStr(hashStr, hash))\n         throw RESTERR(HTTP_BAD_REQUEST, \"Invalid hash: \" + hashStr);\n \n-    std::vector<CBlockHeader> headers;\n+    std::vector<const CBlockIndex *> headers;\n     headers.reserve(count);\n     {\n         LOCK(cs_main);\n         BlockMap::const_iterator it = mapBlockIndex.find(hash);\n         const CBlockIndex *pindex = (it != mapBlockIndex.end()) ? it->second : NULL;\n         while (pindex != NULL && chainActive.Contains(pindex)) {\n-            headers.push_back(pindex->GetBlockHeader());\n+            headers.push_back(pindex);\n             if (headers.size() == (unsigned long)count)\n                 break;\n             pindex = chainActive.Next(pindex);\n         }\n     }\n \n     CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\n-    BOOST_FOREACH(const CBlockHeader &header, headers) {\n-        ssHeader << header;\n+    BOOST_FOREACH(const CBlockIndex *pindex, headers) {\n+        ssHeader << pindex->GetBlockHeader();\n     }\n \n     switch (rf) {\n@@ -166,6 +167,16 @@ static bool rest_headers(AcceptedConnection* conn,\n         return true;\n     }\n \n+    case RF_JSON: {\n+        UniValue jsonHeaders(UniValue::VARR);\n+        BOOST_FOREACH(const CBlockIndex *pindex, headers) {\n+            jsonHeaders.push_back(blockheaderToJSON(pindex));\n+        }\n+        string strJSON = jsonHeaders.write() + \"\\n\";\n+        conn->stream() << HTTPReply(HTTP_OK, strJSON, fRun) << std::flush;\n+        return true;\n+    }\n+\n     default: {\n         throw RESTERR(HTTP_NOT_FOUND, \"output format not found (available: .bin, .hex)\");\n     }"
      },
      {
        "sha": "9cdd0770e3bced76e5ae4bfed145ea5648775bd5",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c45c7ea0fa38fda453c596bd3161c9362d689381/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c45c7ea0fa38fda453c596bd3161c9362d689381/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=c45c7ea0fa38fda453c596bd3161c9362d689381",
        "patch": "@@ -77,7 +77,6 @@ UniValue blockheaderToJSON(const CBlockIndex* blockindex)\n     return result;\n }\n \n-\n UniValue blockToJSON(const CBlock& block, const CBlockIndex* blockindex, bool txDetails = false)\n {\n     UniValue result(UniValue::VOBJ);\n@@ -118,7 +117,6 @@ UniValue blockToJSON(const CBlock& block, const CBlockIndex* blockindex, bool tx\n     return result;\n }\n \n-\n UniValue getblockcount(const UniValue& params, bool fHelp)\n {\n     if (fHelp || params.size() != 0)"
      }
    ]
  }
]