[
  {
    "sha": "0ea28baeb8e83a1cc7870090ac20eed9d7ca8539",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZWEyOGJhZWI4ZTgzYTFjYzc4NzAwOTBhYzIwZWVkOWQ3Y2E4NTM5",
    "commit": {
      "author": {
        "name": "Peter Todd",
        "email": "pete@petertodd.org",
        "date": "2014-12-20T22:04:21Z"
      },
      "committer": {
        "name": "Peter Todd",
        "email": "pete@petertodd.org",
        "date": "2015-01-04T19:17:39Z"
      },
      "message": "Reject non-final txs even in testnet/regtest\n\nPrevious behavior with IsFinalTx() being an IsStandard() rule was rather\nconfusing and interferred with testing of protocols that depended on\nnLockTime.",
      "tree": {
        "sha": "3b2900318d94c34170214ed905b103147ebb58ed",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3b2900318d94c34170214ed905b103147ebb58ed"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0ea28baeb8e83a1cc7870090ac20eed9d7ca8539",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGrBAABCACVBQJUqZHUXhSAAAAAABUAQGJsb2NraGFzaEBiaXRjb2luLm9yZzAw\nMDAwMDAwMDAwMDAwMDAwZWUyMDExMzVlZDdhNTUzYzQyMWJmMTY2NDcxOWEwMjhh\nNWM2YWY5NjA4MjcyNjcvFIAAAAAAFQARcGthLWFkZHJlc3NAZ251cGcub3JncGV0\nZUBwZXRlcnRvZC5vcmcACgkQJIFAPaXwkftqRwf/XpTl2gJ9ptiyUlEFe7E1o/iq\nDTBi3HB8TOfn6/iG3ayIi99GAn5w6NID/4c835/BhTzyQrWdnF5fqwQIqY/1LzTc\nQHz/ykWmLYF2l9kN61qyQ5Q5tIs0CJVKJPc2FcR3wfyMRjnAmJl1/FXhsNxW6GBX\npfbNsQp4hslvcBxyCI07DQtOFYtVa9umbwFJTxwvAlhUZayOBP9W49SIN5mBQ8RD\nLalIP37zkk6k1QD0t6UaRv8wjgen+GERn3MWNGltobFQRjvFfOiR42kKUMN51Pc9\nA7dzAjoK15B2qtxM0ajfmBy1qlsW5pOHMv64Du/hNay5FS5RLYmoi0Z4q+QP7A==\n=c6GD\n-----END PGP SIGNATURE-----",
        "payload": "tree 3b2900318d94c34170214ed905b103147ebb58ed\nparent f914f1a746d7f91951c1da262a4a749dd3ebfa71\nauthor Peter Todd <pete@petertodd.org> 1419113061 -0500\ncommitter Peter Todd <pete@petertodd.org> 1420399059 -0500\n\nReject non-final txs even in testnet/regtest\n\nPrevious behavior with IsFinalTx() being an IsStandard() rule was rather\nconfusing and interferred with testing of protocols that depended on\nnLockTime.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ea28baeb8e83a1cc7870090ac20eed9d7ca8539",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0ea28baeb8e83a1cc7870090ac20eed9d7ca8539",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ea28baeb8e83a1cc7870090ac20eed9d7ca8539/comments",
    "author": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f914f1a746d7f91951c1da262a4a749dd3ebfa71",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f914f1a746d7f91951c1da262a4a749dd3ebfa71",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f914f1a746d7f91951c1da262a4a749dd3ebfa71"
      }
    ],
    "stats": {
      "total": 43,
      "additions": 20,
      "deletions": 23
    },
    "files": [
      {
        "sha": "1ac1e8d534213b57a5d5f5da20856ebfc5103847",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 23,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ea28baeb8e83a1cc7870090ac20eed9d7ca8539/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ea28baeb8e83a1cc7870090ac20eed9d7ca8539/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=0ea28baeb8e83a1cc7870090ac20eed9d7ca8539",
        "patch": "@@ -620,34 +620,11 @@ unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans)\n \n bool IsStandardTx(const CTransaction& tx, string& reason)\n {\n-    AssertLockHeld(cs_main);\n     if (tx.nVersion > CTransaction::CURRENT_VERSION || tx.nVersion < 1) {\n         reason = \"version\";\n         return false;\n     }\n \n-    // Treat non-final transactions as non-standard to prevent a specific type\n-    // of double-spend attack, as well as DoS attacks. (if the transaction\n-    // can't be mined, the attacker isn't expending resources broadcasting it)\n-    // Basically we don't want to propagate transactions that can't be included in\n-    // the next block.\n-    //\n-    // However, IsFinalTx() is confusing... Without arguments, it uses\n-    // chainActive.Height() to evaluate nLockTime; when a block is accepted, chainActive.Height()\n-    // is set to the value of nHeight in the block. However, when IsFinalTx()\n-    // is called within CBlock::AcceptBlock(), the height of the block *being*\n-    // evaluated is what is used. Thus if we want to know if a transaction can\n-    // be part of the *next* block, we need to call IsFinalTx() with one more\n-    // than chainActive.Height().\n-    //\n-    // Timestamps on the other hand don't get any special treatment, because we\n-    // can't know what timestamp the next block will have, and there aren't\n-    // timestamp applications where it matters.\n-    if (!IsFinalTx(tx, chainActive.Height() + 1)) {\n-        reason = \"non-final\";\n-        return false;\n-    }\n-\n     // Extremely large transactions with lots of inputs can cost the network\n     // almost as much to process as they cost the sender in fees, because\n     // computing signature hashes is O(ninputs*txsize). Limiting transactions\n@@ -936,6 +913,26 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n                          error(\"AcceptToMemoryPool : nonstandard transaction: %s\", reason),\n                          REJECT_NONSTANDARD, reason);\n \n+    // Only accept nLockTime-using transactions that can be mined in the next\n+    // block; we don't want our mempool filled up with transactions that can't\n+    // be mined yet.\n+    //\n+    // However, IsFinalTx() is confusing... Without arguments, it uses\n+    // chainActive.Height() to evaluate nLockTime; when a block is accepted,\n+    // chainActive.Height() is set to the value of nHeight in the block.\n+    // However, when IsFinalTx() is called within CBlock::AcceptBlock(), the\n+    // height of the block *being* evaluated is what is used. Thus if we want\n+    // to know if a transaction can be part of the *next* block, we need to\n+    // call IsFinalTx() with one more than chainActive.Height().\n+    //\n+    // Timestamps on the other hand don't get any special treatment, because we\n+    // can't know what timestamp the next block will have, and there aren't\n+    // timestamp applications where it matters.\n+    if (!IsFinalTx(tx, chainActive.Height() + 1))\n+        return state.DoS(0,\n+                         error(\"AcceptToMemoryPool : non-final\"),\n+                         REJECT_NONSTANDARD, \"non-final\");\n+\n     // is it already in the memory pool?\n     uint256 hash = tx.GetHash();\n     if (pool.exists(hash))"
      }
    ]
  }
]