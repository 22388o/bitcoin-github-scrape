[
  {
    "sha": "8ccabae7dd9d6d32d02a7668b9dfe2ad204cd56c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4Y2NhYmFlN2RkOWQ2ZDMyZDAyYTc2NjhiOWRmZTJhZDIwNGNkNTZj",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-07-02T20:52:51Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-07-03T20:36:22Z"
      },
      "message": "Implement CAddrMan::empty() + prevector_tester::empty()",
      "tree": {
        "sha": "43515be631a13403cd2787f2523d8c69f0a98958",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/43515be631a13403cd2787f2523d8c69f0a98958"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8ccabae7dd9d6d32d02a7668b9dfe2ad204cd56c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ccabae7dd9d6d32d02a7668b9dfe2ad204cd56c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8ccabae7dd9d6d32d02a7668b9dfe2ad204cd56c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ccabae7dd9d6d32d02a7668b9dfe2ad204cd56c/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7397af9d314dd01ca3699efbe6eec68f62a6ef2b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7397af9d314dd01ca3699efbe6eec68f62a6ef2b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7397af9d314dd01ca3699efbe6eec68f62a6ef2b"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 10,
      "deletions": 1
    },
    "files": [
      {
        "sha": "9c264f3535c92ea0c18a592c6910f8f54fa8c8a3",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8ccabae7dd9d6d32d02a7668b9dfe2ad204cd56c/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8ccabae7dd9d6d32d02a7668b9dfe2ad204cd56c/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=8ccabae7dd9d6d32d02a7668b9dfe2ad204cd56c",
        "patch": "@@ -491,6 +491,11 @@ class CAddrMan\n         return vRandom.size();\n     }\n \n+    bool empty() const\n+    {\n+        return size() == 0;\n+    }\n+\n     //! Consistency check\n     void Check()\n     {"
      },
      {
        "sha": "169e43434d8e2886b49bcb7877868d7f90134394",
        "filename": "src/test/prevector_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8ccabae7dd9d6d32d02a7668b9dfe2ad204cd56c/src/test/prevector_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8ccabae7dd9d6d32d02a7668b9dfe2ad204cd56c/src/test/prevector_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/prevector_tests.cpp?ref=8ccabae7dd9d6d32d02a7668b9dfe2ad204cd56c",
        "patch": "@@ -151,10 +151,14 @@ class prevector_tester {\n         pre_vector.assign(n, value);\n     }\n \n-    Size size() {\n+    Size size() const {\n         return real_vector.size();\n     }\n \n+    bool empty() const {\n+        return size() == 0;\n+    }\n+\n     Size capacity() {\n         return pre_vector.capacity();\n     }"
      }
    ]
  },
  {
    "sha": "6c54ab0934c5e638ef53d25ae835068e76f765e8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YzU0YWIwOTM0YzVlNjM4ZWY1M2QyNWFlODM1MDY4ZTc2Zjc2NWU4",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-07-02T20:53:36Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-07-03T20:36:22Z"
      },
      "message": "scripted-diff: Prefer x.empty() over x.size() == 0\n\n-BEGIN VERIFY SCRIPT-\nsed -i 's/\\.size() == 0/.empty()/g' src/*.cpp src/*.h src/*/*.cpp src/*/*.h\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "480e662b145d9a08b82d35b2913d138db1882b43",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/480e662b145d9a08b82d35b2913d138db1882b43"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6c54ab0934c5e638ef53d25ae835068e76f765e8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6c54ab0934c5e638ef53d25ae835068e76f765e8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6c54ab0934c5e638ef53d25ae835068e76f765e8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6c54ab0934c5e638ef53d25ae835068e76f765e8/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8ccabae7dd9d6d32d02a7668b9dfe2ad204cd56c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ccabae7dd9d6d32d02a7668b9dfe2ad204cd56c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8ccabae7dd9d6d32d02a7668b9dfe2ad204cd56c"
      }
    ],
    "stats": {
      "total": 62,
      "additions": 31,
      "deletions": 31
    },
    "files": [
      {
        "sha": "f9be2001ec84bd5f3c93a6d8f9ba1330058a76a7",
        "filename": "src/consensus/merkle.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c54ab0934c5e638ef53d25ae835068e76f765e8/src/consensus/merkle.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c54ab0934c5e638ef53d25ae835068e76f765e8/src/consensus/merkle.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/merkle.cpp?ref=6c54ab0934c5e638ef53d25ae835068e76f765e8",
        "patch": "@@ -45,7 +45,7 @@\n /* This implements a constant-space merkle root/path calculator, limited to 2^32 leaves. */\n static void MerkleComputation(const std::vector<uint256>& leaves, uint256* proot, bool* pmutated, uint32_t branchpos, std::vector<uint256>* pbranch) {\n     if (pbranch) pbranch->clear();\n-    if (leaves.size() == 0) {\n+    if (leaves.empty()) {\n         if (pmutated) *pmutated = false;\n         if (proot) *proot = uint256();\n         return;"
      },
      {
        "sha": "92fb496c5cae88ec0e53e4d3296a6b4aa370310c",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c54ab0934c5e638ef53d25ae835068e76f765e8/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c54ab0934c5e638ef53d25ae835068e76f765e8/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=6c54ab0934c5e638ef53d25ae835068e76f765e8",
        "patch": "@@ -1714,7 +1714,7 @@ void CConnman::ThreadOpenConnections()\n             return;\n \n         // Add seed nodes if DNS seeds are all down (an infrastructure attack?).\n-        if (addrman.size() == 0 && (GetTime() - nStart > 60)) {\n+        if (addrman.empty() && (GetTime() - nStart > 60)) {\n             static bool done = false;\n             if (!done) {\n                 LogPrintf(\"Adding fixed seed nodes as DNS doesn't seem to be available.\\n\");"
      },
      {
        "sha": "f68143da3cd40323bb1abb3f7e059370a46d2641",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c54ab0934c5e638ef53d25ae835068e76f765e8/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c54ab0934c5e638ef53d25ae835068e76f765e8/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=6c54ab0934c5e638ef53d25ae835068e76f765e8",
        "patch": "@@ -522,7 +522,7 @@ void FindNextBlocksToDownload(NodeId nodeid, unsigned int count, std::vector<con\n                 // The block is not already downloaded, and not yet in flight.\n                 if (pindex->nHeight > nWindowEnd) {\n                     // We reached the end of the window.\n-                    if (vBlocks.size() == 0 && waitingfor != nodeid) {\n+                    if (vBlocks.empty() && waitingfor != nodeid) {\n                         // We aren't able to fetch anything, but we would be if the download window was one larger.\n                         nodeStaller = waitingfor;\n                     }"
      },
      {
        "sha": "56bdafd2594473eb14b8c1fc8abf403b21e91ce8",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c54ab0934c5e638ef53d25ae835068e76f765e8/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c54ab0934c5e638ef53d25ae835068e76f765e8/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=6c54ab0934c5e638ef53d25ae835068e76f765e8",
        "patch": "@@ -204,7 +204,7 @@ inline void UnserializeTransaction(TxType& tx, Stream& s) {\n     tx.vout.clear();\n     /* Try to read the vin. In case the dummy is there, this will be read as an empty vector. */\n     s >> tx.vin;\n-    if (tx.vin.size() == 0 && fAllowWitness) {\n+    if (tx.vin.empty() && fAllowWitness) {\n         /* We read a dummy or an empty vin. */\n         s >> flags;\n         if (flags != 0) {"
      },
      {
        "sha": "70f4369bbed60072b3ea7cc2884f855b6c4de30b",
        "filename": "src/pubkey.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c54ab0934c5e638ef53d25ae835068e76f765e8/src/pubkey.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c54ab0934c5e638ef53d25ae835068e76f765e8/src/pubkey.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pubkey.cpp?ref=6c54ab0934c5e638ef53d25ae835068e76f765e8",
        "patch": "@@ -172,7 +172,7 @@ bool CPubKey::Verify(const uint256 &hash, const std::vector<unsigned char>& vchS\n     if (!secp256k1_ec_pubkey_parse(secp256k1_context_verify, &pubkey, &(*this)[0], size())) {\n         return false;\n     }\n-    if (vchSig.size() == 0) {\n+    if (vchSig.empty()) {\n         return false;\n     }\n     if (!ecdsa_signature_parse_der_lax(secp256k1_context_verify, &sig, &vchSig[0], vchSig.size())) {"
      },
      {
        "sha": "30bcc58961edd1b9da88782e7f8337e44f7ba4c5",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c54ab0934c5e638ef53d25ae835068e76f765e8/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c54ab0934c5e638ef53d25ae835068e76f765e8/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=6c54ab0934c5e638ef53d25ae835068e76f765e8",
        "patch": "@@ -415,7 +415,7 @@ static bool rest_getutxos(HTTPRequest* req, const std::string& strURIPart)\n \n     // throw exception in case of an empty request\n     std::string strRequestMutable = req->ReadBody();\n-    if (strRequestMutable.length() == 0 && uriParts.size() == 0)\n+    if (strRequestMutable.length() == 0 && uriParts.empty())\n         return RESTERR(req, HTTP_BAD_REQUEST, \"Error: empty request\");\n \n     bool fInputParsed = false;"
      },
      {
        "sha": "94840d7e251b445b07a05dc23d6e7b248e20d913",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c54ab0934c5e638ef53d25ae835068e76f765e8/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c54ab0934c5e638ef53d25ae835068e76f765e8/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=6c54ab0934c5e638ef53d25ae835068e76f765e8",
        "patch": "@@ -237,7 +237,7 @@ UniValue addnode(const JSONRPCRequest& request)\n \n UniValue disconnectnode(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() == 0 || request.params.size() >= 3)\n+    if (request.fHelp || request.params.empty() || request.params.size() >= 3)\n         throw std::runtime_error(\n             \"disconnectnode \\\"[address]\\\" [nodeid]\\n\"\n             \"\\nImmediately disconnects from the specified peer node.\\n\""
      },
      {
        "sha": "7403cea31268ab56a8aac8632705922838bc401a",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c54ab0934c5e638ef53d25ae835068e76f765e8/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c54ab0934c5e638ef53d25ae835068e76f765e8/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=6c54ab0934c5e638ef53d25ae835068e76f765e8",
        "patch": "@@ -182,7 +182,7 @@ bool static IsLowDERSignature(const valtype &vchSig, ScriptError* serror) {\n }\n \n bool static IsDefinedHashtypeSignature(const valtype &vchSig) {\n-    if (vchSig.size() == 0) {\n+    if (vchSig.empty()) {\n         return false;\n     }\n     unsigned char nHashType = vchSig[vchSig.size() - 1] & (~(SIGHASH_ANYONECANPAY));\n@@ -195,7 +195,7 @@ bool static IsDefinedHashtypeSignature(const valtype &vchSig) {\n bool CheckSignatureEncoding(const std::vector<unsigned char> &vchSig, unsigned int flags, ScriptError* serror) {\n     // Empty signature. Not strictly DER encoded, but allowed to provide a\n     // compact way to provide an invalid signature for use with CHECK(MULTI)SIG\n-    if (vchSig.size() == 0) {\n+    if (vchSig.empty()) {\n         return true;\n     }\n     if ((flags & (SCRIPT_VERIFY_DERSIG | SCRIPT_VERIFY_LOW_S | SCRIPT_VERIFY_STRICTENC)) != 0 && !IsValidSignatureEncoding(vchSig)) {\n@@ -221,7 +221,7 @@ bool static CheckPubKeyEncoding(const valtype &vchPubKey, unsigned int flags, co\n }\n \n bool static CheckMinimalPush(const valtype& data, opcodetype opcode) {\n-    if (data.size() == 0) {\n+    if (data.empty()) {\n         // Could have used OP_0.\n         return opcode == OP_0;\n     } else if (data.size() == 1 && data[0] >= 1 && data[0] <= 16) {\n@@ -1359,7 +1359,7 @@ static bool VerifyWitnessProgram(const CScriptWitness& witness, int witversion,\n     if (witversion == 0) {\n         if (program.size() == 32) {\n             // Version 0 segregated witness program: SHA256(CScript) inside the program, CScript + inputs in witness\n-            if (witness.stack.size() == 0) {\n+            if (witness.stack.empty()) {\n                 return set_error(serror, SCRIPT_ERR_WITNESS_PROGRAM_WITNESS_EMPTY);\n             }\n             scriptPubKey = CScript(witness.stack.back().begin(), witness.stack.back().end());"
      },
      {
        "sha": "8894fcdcaeeea256c9aa78dc4b9d529fbb9f9830",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c54ab0934c5e638ef53d25ae835068e76f765e8/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c54ab0934c5e638ef53d25ae835068e76f765e8/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=6c54ab0934c5e638ef53d25ae835068e76f765e8",
        "patch": "@@ -127,7 +127,7 @@ static CScript PushAll(const std::vector<valtype>& values)\n {\n     CScript result;\n     for (const valtype& v : values) {\n-        if (v.size() == 0) {\n+        if (v.empty()) {\n             result << OP_0;\n         } else if (v.size() == 1 && v[0] >= 1 && v[0] <= 16) {\n             result << CScript::EncodeOP_N(v[0]);"
      },
      {
        "sha": "604fcb70bfc57a2cb76587b82fd490e575c3ba18",
        "filename": "src/streams.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c54ab0934c5e638ef53d25ae835068e76f765e8/src/streams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c54ab0934c5e638ef53d25ae835068e76f765e8/src/streams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/streams.h?ref=6c54ab0934c5e638ef53d25ae835068e76f765e8",
        "patch": "@@ -420,7 +420,7 @@ class CDataStream\n      */\n     void Xor(const std::vector<unsigned char>& key)\n     {\n-        if (key.size() == 0) {\n+        if (key.empty()) {\n             return;\n         }\n "
      },
      {
        "sha": "6cb3fa8c3be771efebde1c5a03b46bff95a802c4",
        "filename": "src/test/base58_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c54ab0934c5e638ef53d25ae835068e76f765e8/src/test/base58_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c54ab0934c5e638ef53d25ae835068e76f765e8/src/test/base58_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base58_tests.cpp?ref=6c54ab0934c5e638ef53d25ae835068e76f765e8",
        "patch": "@@ -112,7 +112,7 @@ class TestPayloadVisitor : public boost::static_visitor<bool>\n     }\n     bool operator()(const CNoDestination &no) const\n     {\n-        return exp_payload.size() == 0;\n+        return exp_payload.empty();\n     }\n };\n "
      },
      {
        "sha": "1865de3dda1eb8c93781ab6d2b5b0cbbc2c22c1e",
        "filename": "src/test/coins_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c54ab0934c5e638ef53d25ae835068e76f765e8/src/test/coins_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c54ab0934c5e638ef53d25ae835068e76f765e8/src/test/coins_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/coins_tests.cpp?ref=6c54ab0934c5e638ef53d25ae835068e76f765e8",
        "patch": "@@ -221,7 +221,7 @@ BOOST_AUTO_TEST_CASE(coins_cache_simulation_test)\n                 delete stack.back();\n                 stack.pop_back();\n             }\n-            if (stack.size() == 0 || (stack.size() < 4 && InsecureRandBool())) {\n+            if (stack.empty() || (stack.size() < 4 && InsecureRandBool())) {\n                 //Add a new cache\n                 CCoinsView* tip = &base;\n                 if (stack.size() > 0) {\n@@ -453,7 +453,7 @@ BOOST_AUTO_TEST_CASE(updatecoins_simulation_test)\n                 delete stack.back();\n                 stack.pop_back();\n             }\n-            if (stack.size() == 0 || (stack.size() < 4 && InsecureRandBool())) {\n+            if (stack.empty() || (stack.size() < 4 && InsecureRandBool())) {\n                 CCoinsView* tip = &base;\n                 if (stack.size() > 0) {\n                     tip = stack.back();"
      },
      {
        "sha": "4a3b7ae175283e00dbefa9cee2cd1cc8e6959f05",
        "filename": "src/test/limitedmap_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c54ab0934c5e638ef53d25ae835068e76f765e8/src/test/limitedmap_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c54ab0934c5e638ef53d25ae835068e76f765e8/src/test/limitedmap_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/limitedmap_tests.cpp?ref=6c54ab0934c5e638ef53d25ae835068e76f765e8",
        "patch": "@@ -19,7 +19,7 @@ BOOST_AUTO_TEST_CASE(limitedmap_test)\n     BOOST_CHECK(map.max_size() == 10);\n \n     // check that it's empty\n-    BOOST_CHECK(map.size() == 0);\n+    BOOST_CHECK(map.empty());\n \n     // insert (-1, -1)\n     map.insert(std::pair<int, int>(-1, -1));"
      },
      {
        "sha": "af2c25e3b0c79511c4b5f0f9b058af4417bf91fc",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c54ab0934c5e638ef53d25ae835068e76f765e8/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c54ab0934c5e638ef53d25ae835068e76f765e8/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=6c54ab0934c5e638ef53d25ae835068e76f765e8",
        "patch": "@@ -229,7 +229,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         txCoinbase.vout.resize(1); // Ignore the (optional) segwit commitment added by CreateNewBlock (as the hardcoded nonces don't account for this)\n         txCoinbase.vout[0].scriptPubKey = CScript();\n         pblock->vtx[0] = MakeTransactionRef(std::move(txCoinbase));\n-        if (txFirst.size() == 0)\n+        if (txFirst.empty())\n             baseheight = chainActive.Height();\n         if (txFirst.size() < 4)\n             txFirst.push_back(pblock->vtx[0]);"
      },
      {
        "sha": "18153886cbb39296aa5df8bb24615417b7485f1c",
        "filename": "src/test/net_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c54ab0934c5e638ef53d25ae835068e76f765e8/src/test/net_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c54ab0934c5e638ef53d25ae835068e76f765e8/src/test/net_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/net_tests.cpp?ref=6c54ab0934c5e638ef53d25ae835068e76f765e8",
        "patch": "@@ -107,7 +107,7 @@ BOOST_AUTO_TEST_CASE(caddrdb_read)\n     bool exceptionThrown = false;\n     CAddrMan addrman1;\n \n-    BOOST_CHECK(addrman1.size() == 0);\n+    BOOST_CHECK(addrman1.empty());\n     try {\n         unsigned char pchMsgTmp[4];\n         ssPeers1 >> FLATDATA(pchMsgTmp);\n@@ -124,7 +124,7 @@ BOOST_AUTO_TEST_CASE(caddrdb_read)\n \n     CAddrMan addrman2;\n     CAddrDB adb;\n-    BOOST_CHECK(addrman2.size() == 0);\n+    BOOST_CHECK(addrman2.empty());\n     adb.Read(addrman2, ssPeers2);\n     BOOST_CHECK(addrman2.size() == 3);\n }\n@@ -139,7 +139,7 @@ BOOST_AUTO_TEST_CASE(caddrdb_read_corrupted)\n     CDataStream ssPeers1 = AddrmanToStream(addrmanCorrupted);\n     bool exceptionThrown = false;\n     CAddrMan addrman1;\n-    BOOST_CHECK(addrman1.size() == 0);\n+    BOOST_CHECK(addrman1.empty());\n     try {\n         unsigned char pchMsgTmp[4];\n         ssPeers1 >> FLATDATA(pchMsgTmp);\n@@ -156,9 +156,9 @@ BOOST_AUTO_TEST_CASE(caddrdb_read_corrupted)\n \n     CAddrMan addrman2;\n     CAddrDB adb;\n-    BOOST_CHECK(addrman2.size() == 0);\n+    BOOST_CHECK(addrman2.empty());\n     adb.Read(addrman2, ssPeers2);\n-    BOOST_CHECK(addrman2.size() == 0);\n+    BOOST_CHECK(addrman2.empty());\n }\n \n BOOST_AUTO_TEST_CASE(cnode_simple_test)"
      },
      {
        "sha": "90d8f0114d1274913bccefe64e884de4e19c301a",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c54ab0934c5e638ef53d25ae835068e76f765e8/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c54ab0934c5e638ef53d25ae835068e76f765e8/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=6c54ab0934c5e638ef53d25ae835068e76f765e8",
        "patch": "@@ -394,7 +394,7 @@ static CScript PushAll(const std::vector<valtype>& values)\n {\n     CScript result;\n     for (const valtype& v : values) {\n-        if (v.size() == 0) {\n+        if (v.empty()) {\n             result << OP_0;\n         } else if (v.size() == 1 && v[0] >= 1 && v[0] <= 16) {\n             result << CScript::EncodeOP_N(v[0]);"
      },
      {
        "sha": "b51cc95c1682d367e4dbb1e5cee191ecdec23707",
        "filename": "src/utilstrencodings.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c54ab0934c5e638ef53d25ae835068e76f765e8/src/utilstrencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c54ab0934c5e638ef53d25ae835068e76f765e8/src/utilstrencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utilstrencodings.cpp?ref=6c54ab0934c5e638ef53d25ae835068e76f765e8",
        "patch": "@@ -228,7 +228,7 @@ std::vector<unsigned char> DecodeBase64(const char* p, bool* pfInvalid)\n std::string DecodeBase64(const std::string& str)\n {\n     std::vector<unsigned char> vchRet = DecodeBase64(str.c_str());\n-    return (vchRet.size() == 0) ? std::string() : std::string((const char*)&vchRet[0], vchRet.size());\n+    return (vchRet.empty()) ? std::string() : std::string((const char*)&vchRet[0], vchRet.size());\n }\n \n std::string EncodeBase32(const unsigned char* pch, size_t len)\n@@ -415,7 +415,7 @@ std::vector<unsigned char> DecodeBase32(const char* p, bool* pfInvalid)\n std::string DecodeBase32(const std::string& str)\n {\n     std::vector<unsigned char> vchRet = DecodeBase32(str.c_str());\n-    return (vchRet.size() == 0) ? std::string() : std::string((const char*)&vchRet[0], vchRet.size());\n+    return (vchRet.empty()) ? std::string() : std::string((const char*)&vchRet[0], vchRet.size());\n }\n \n static bool ParsePrechecks(const std::string& str)"
      },
      {
        "sha": "1c988a514d5b59904dce1fc5289edc69b6144c76",
        "filename": "src/utilstrencodings.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c54ab0934c5e638ef53d25ae835068e76f765e8/src/utilstrencodings.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c54ab0934c5e638ef53d25ae835068e76f765e8/src/utilstrencodings.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utilstrencodings.h?ref=6c54ab0934c5e638ef53d25ae835068e76f765e8",
        "patch": "@@ -128,7 +128,7 @@ std::string FormatParagraph(const std::string& in, size_t width = 79, size_t ind\n template <typename T>\n bool TimingResistantEqual(const T& a, const T& b)\n {\n-    if (b.size() == 0) return a.size() == 0;\n+    if (b.empty()) return a.empty();\n     size_t accumulator = a.size() ^ b.size();\n     for (size_t i = 0; i < a.size(); i++)\n         accumulator |= a[i] ^ b[i%b.size()];"
      },
      {
        "sha": "60d32a6e20a5b191c02263b8b121954df4a55f22",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c54ab0934c5e638ef53d25ae835068e76f765e8/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c54ab0934c5e638ef53d25ae835068e76f765e8/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=6c54ab0934c5e638ef53d25ae835068e76f765e8",
        "patch": "@@ -840,7 +840,7 @@ UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, const int6\n             success = true;\n         } else {\n             // Import public keys.\n-            if (pubKeys.size() && keys.size() == 0) {\n+            if (pubKeys.size() && keys.empty()) {\n                 const std::string& strPubKey = pubKeys[0].get_str();\n \n                 if (!IsHex(strPubKey)) {\n@@ -967,7 +967,7 @@ UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, const int6\n             }\n \n             // Import scriptPubKey only.\n-            if (pubKeys.size() == 0 && keys.size() == 0) {\n+            if (pubKeys.empty() && keys.empty()) {\n                 if (::IsMine(*pwallet, script) == ISMINE_SPENDABLE) {\n                     throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n                 }"
      },
      {
        "sha": "6f22b54e52b79860593f9bc0a5cca0c70b6231d8",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c54ab0934c5e638ef53d25ae835068e76f765e8/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c54ab0934c5e638ef53d25ae835068e76f765e8/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=6c54ab0934c5e638ef53d25ae835068e76f765e8",
        "patch": "@@ -727,7 +727,7 @@ UniValue getbalance(const JSONRPCRequest& request)\n \n     LOCK2(cs_main, pwallet->cs_wallet);\n \n-    if (request.params.size() == 0)\n+    if (request.params.empty())\n         return  ValueFromAmount(pwallet->GetBalance());\n \n     const std::string& account_param = request.params[0].get_str();\n@@ -2753,7 +2753,7 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     if (!DecodeHexTx(tx, request.params[0].get_str(), true))\n         throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n \n-    if (tx.vout.size() == 0)\n+    if (tx.vout.empty())\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"TX must have at least one output\");\n \n     if (changePosition != -1 && (changePosition < 0 || (unsigned int)changePosition > tx.vout.size()))"
      }
    ]
  },
  {
    "sha": "a73aee3a68f286a46812f67bd47ba609cdf7a5f2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNzNhZWUzYTY4ZjI4NmE0NjgxMmY2N2JkNDdiYTYwOWNkZjdhNWYy",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-07-02T21:37:01Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-07-03T20:36:22Z"
      },
      "message": "scripted-diff: Prefer x.empty() over x.length() == 0\n\n-BEGIN VERIFY SCRIPT-\nsed -i 's/\\.length() == 0/.empty()/g' src/*.cpp\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "c22f42eaebb9c3e9d8e3eda0e510e8029487f3b1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c22f42eaebb9c3e9d8e3eda0e510e8029487f3b1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a73aee3a68f286a46812f67bd47ba609cdf7a5f2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a73aee3a68f286a46812f67bd47ba609cdf7a5f2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a73aee3a68f286a46812f67bd47ba609cdf7a5f2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a73aee3a68f286a46812f67bd47ba609cdf7a5f2/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6c54ab0934c5e638ef53d25ae835068e76f765e8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6c54ab0934c5e638ef53d25ae835068e76f765e8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6c54ab0934c5e638ef53d25ae835068e76f765e8"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "92cde1be6d785518bf8289a4f92ca61efda606ee",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a73aee3a68f286a46812f67bd47ba609cdf7a5f2/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a73aee3a68f286a46812f67bd47ba609cdf7a5f2/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=a73aee3a68f286a46812f67bd47ba609cdf7a5f2",
        "patch": "@@ -415,7 +415,7 @@ static bool rest_getutxos(HTTPRequest* req, const std::string& strURIPart)\n \n     // throw exception in case of an empty request\n     std::string strRequestMutable = req->ReadBody();\n-    if (strRequestMutable.length() == 0 && uriParts.empty())\n+    if (strRequestMutable.empty() && uriParts.empty())\n         return RESTERR(req, HTTP_BAD_REQUEST, \"Error: empty request\");\n \n     bool fInputParsed = false;"
      }
    ]
  },
  {
    "sha": "a032c389cdc1fa5df49892ca42cfa8c992819d6b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMDMyYzM4OWNkYzFmYTVkZjQ5ODkyY2E0MmNmYThjOTkyODE5ZDZi",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-07-02T20:55:59Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-07-03T20:36:22Z"
      },
      "message": "Remove no longer needed parentheses",
      "tree": {
        "sha": "a94cc2555d123354a885f1e122695da2e12c8dad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a94cc2555d123354a885f1e122695da2e12c8dad"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a032c389cdc1fa5df49892ca42cfa8c992819d6b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a032c389cdc1fa5df49892ca42cfa8c992819d6b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a032c389cdc1fa5df49892ca42cfa8c992819d6b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a032c389cdc1fa5df49892ca42cfa8c992819d6b/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a73aee3a68f286a46812f67bd47ba609cdf7a5f2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a73aee3a68f286a46812f67bd47ba609cdf7a5f2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a73aee3a68f286a46812f67bd47ba609cdf7a5f2"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "8db4d3ff63a0093e064f765b151014a414f852c5",
        "filename": "src/utilstrencodings.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a032c389cdc1fa5df49892ca42cfa8c992819d6b/src/utilstrencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a032c389cdc1fa5df49892ca42cfa8c992819d6b/src/utilstrencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utilstrencodings.cpp?ref=a032c389cdc1fa5df49892ca42cfa8c992819d6b",
        "patch": "@@ -228,7 +228,7 @@ std::vector<unsigned char> DecodeBase64(const char* p, bool* pfInvalid)\n std::string DecodeBase64(const std::string& str)\n {\n     std::vector<unsigned char> vchRet = DecodeBase64(str.c_str());\n-    return (vchRet.empty()) ? std::string() : std::string((const char*)&vchRet[0], vchRet.size());\n+    return vchRet.empty() ? std::string() : std::string((const char*)&vchRet[0], vchRet.size());\n }\n \n std::string EncodeBase32(const unsigned char* pch, size_t len)\n@@ -415,7 +415,7 @@ std::vector<unsigned char> DecodeBase32(const char* p, bool* pfInvalid)\n std::string DecodeBase32(const std::string& str)\n {\n     std::vector<unsigned char> vchRet = DecodeBase32(str.c_str());\n-    return (vchRet.empty()) ? std::string() : std::string((const char*)&vchRet[0], vchRet.size());\n+    return vchRet.empty() ? std::string() : std::string((const char*)&vchRet[0], vchRet.size());\n }\n \n static bool ParsePrechecks(const std::string& str)"
      }
    ]
  },
  {
    "sha": "383a0dfde89deed636dd37831940d220f2e6223d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozODNhMGRmZGU4OWRlZWQ2MzZkZDM3ODMxOTQwZDIyMGYyZTYyMjNk",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-07-03T09:11:39Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-07-04T07:35:39Z"
      },
      "message": "Prefer !x.empty() over bool(x.size()) and x.size() > 0",
      "tree": {
        "sha": "71a102026a5a939b3d33873bd9de607a9e94be7f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/71a102026a5a939b3d33873bd9de607a9e94be7f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/383a0dfde89deed636dd37831940d220f2e6223d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/383a0dfde89deed636dd37831940d220f2e6223d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/383a0dfde89deed636dd37831940d220f2e6223d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/383a0dfde89deed636dd37831940d220f2e6223d/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a032c389cdc1fa5df49892ca42cfa8c992819d6b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a032c389cdc1fa5df49892ca42cfa8c992819d6b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a032c389cdc1fa5df49892ca42cfa8c992819d6b"
      }
    ],
    "stats": {
      "total": 127,
      "additions": 64,
      "deletions": 63
    },
    "files": [
      {
        "sha": "cf6c047c9384479ccea806b89ae5f135e01087d8",
        "filename": "src/addrman.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/383a0dfde89deed636dd37831940d220f2e6223d/src/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/383a0dfde89deed636dd37831940d220f2e6223d/src/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.cpp?ref=383a0dfde89deed636dd37831940d220f2e6223d",
        "patch": "@@ -448,9 +448,9 @@ int CAddrMan::Check_()\n         }\n     }\n \n-    if (setTried.size())\n+    if (!setTried.empty())\n         return -13;\n-    if (mapNew.size())\n+    if (!mapNew.empty())\n         return -15;\n     if (nKey.IsNull())\n         return -16;"
      },
      {
        "sha": "66747f8f4db4cdb2d7bf1746cfedfa3ce0d805a3",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/383a0dfde89deed636dd37831940d220f2e6223d/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/383a0dfde89deed636dd37831940d220f2e6223d/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=383a0dfde89deed636dd37831940d220f2e6223d",
        "patch": "@@ -525,7 +525,7 @@ static void MutateTxSign(CMutableTransaction& tx, const std::string& flagStr)\n {\n     int nHashType = SIGHASH_ALL;\n \n-    if (flagStr.size() > 0)\n+    if (!flagStr.empty())\n         if (!findSighashFlags(nHashType, flagStr))\n             throw std::runtime_error(\"unknown sighash flag/sign option\");\n "
      },
      {
        "sha": "b6771e02599a05f42904af8a50b94700c7d8e626",
        "filename": "src/core_write.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/383a0dfde89deed636dd37831940d220f2e6223d/src/core_write.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/383a0dfde89deed636dd37831940d220f2e6223d/src/core_write.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_write.cpp?ref=383a0dfde89deed636dd37831940d220f2e6223d",
        "patch": "@@ -39,10 +39,10 @@ std::string FormatScript(const CScript& script)\n                     continue;\n                 }\n             }\n-            if (vch.size() > 0) {\n-                ret += strprintf(\"0x%x 0x%x \", HexStr(it2, it - vch.size()), HexStr(it - vch.size(), it));\n-            } else {\n+            if (vch.empty()) {\n                 ret += strprintf(\"0x%x \", HexStr(it2, it));\n+            } else {\n+                ret += strprintf(\"0x%x 0x%x \", HexStr(it2, it - vch.size()), HexStr(it - vch.size(), it));\n             }\n             continue;\n         }"
      },
      {
        "sha": "c87d10a43650e774c90146a485c5818486016797",
        "filename": "src/hash.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/383a0dfde89deed636dd37831940d220f2e6223d/src/hash.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/383a0dfde89deed636dd37831940d220f2e6223d/src/hash.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hash.cpp?ref=383a0dfde89deed636dd37831940d220f2e6223d",
        "patch": "@@ -17,7 +17,7 @@ unsigned int MurmurHash3(unsigned int nHashSeed, const std::vector<unsigned char\n {\n     // The following is MurmurHash3 (x86_32), see http://code.google.com/p/smhasher/source/browse/trunk/MurmurHash3.cpp\n     uint32_t h1 = nHashSeed;\n-    if (vDataToHash.size() > 0)\n+    if (!vDataToHash.empty())\n     {\n         const uint32_t c1 = 0xcc9e2d51;\n         const uint32_t c2 = 0x1b873593;"
      },
      {
        "sha": "a3d0520653e42106b58561c191ca1ed09e16e075",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/383a0dfde89deed636dd37831940d220f2e6223d/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/383a0dfde89deed636dd37831940d220f2e6223d/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=383a0dfde89deed636dd37831940d220f2e6223d",
        "patch": "@@ -1574,7 +1574,7 @@ void CConnman::ThreadDNSAddressSeed()\n     // Avoiding DNS seeds when we don't need them improves user privacy by\n     //  creating fewer identifying DNS requests, reduces trust by giving seeds\n     //  less influence on the network topology, and reduces traffic to the seeds.\n-    if ((addrman.size() > 0) &&\n+    if (!addrman.empty() &&\n         (!GetBoolArg(\"-forcednsseed\", DEFAULT_FORCEDNSSEED))) {\n         if (!interruptNet.sleep_for(std::chrono::seconds(11)))\n             return;"
      },
      {
        "sha": "36c7b9c4ad85259c7f19d041711d56dc9bc97343",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/383a0dfde89deed636dd37831940d220f2e6223d/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/383a0dfde89deed636dd37831940d220f2e6223d/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=383a0dfde89deed636dd37831940d220f2e6223d",
        "patch": "@@ -750,7 +750,7 @@ void PeerLogicValidation::BlockConnected(const std::shared_ptr<const CBlock>& pb\n     }\n \n     // Erase orphan transactions include or precluded by this block\n-    if (vOrphanErase.size()) {\n+    if (!vOrphanErase.empty()) {\n         int nErased = 0;\n         for (uint256 &orphanHash : vOrphanErase) {\n             nErased += EraseOrphanTx(orphanHash);\n@@ -1589,7 +1589,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n \n         LogPrint(BCLog::NET, \"received getdata (%u invsz) peer=%d\\n\", vInv.size(), pfrom->GetId());\n \n-        if (vInv.size() > 0) {\n+        if (!vInv.empty()) {\n             LogPrint(BCLog::NET, \"received getdata for: %s peer=%d\\n\", vInv[0].ToString(), pfrom->GetId());\n         }\n \n@@ -2353,7 +2353,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n                     LogPrint(BCLog::NET, \"Downloading blocks toward %s (%d) via headers direct fetch\\n\",\n                             pindexLast->GetBlockHash().ToString(), pindexLast->nHeight);\n                 }\n-                if (vGetData.size() > 0) {\n+                if (!vGetData.empty()) {\n                     if (nodestate->fSupportsDesiredCmpctVersion && vGetData.size() == 1 && mapBlocksInFlight.size() == 1 && pindexLast->pprev->IsValid(BLOCK_VALID_CHAIN)) {\n                         // In any case, we want to download using a compact block, not a regular one\n                         vGetData[0] = CInv(MSG_CMPCT_BLOCK, vGetData[0].hash);\n@@ -3180,7 +3180,7 @@ bool SendMessages(CNode* pto, CConnman& connman, const std::atomic<bool>& interr\n         // We compensate for other peers to prevent killing off peers due to our own downstream link\n         // being saturated. We only count validated in-flight blocks so peers can't advertise non-existing block hashes\n         // to unreasonably increase our timeout.\n-        if (state.vBlocksInFlight.size() > 0) {\n+        if (!state.vBlocksInFlight.empty()) {\n             QueuedBlock &queuedBlock = state.vBlocksInFlight.front();\n             int nOtherPeersWithValidatedDownloads = nPeersWithValidatedDownloads - (state.nBlocksInFlightValidHeaders > 0);\n             if (nNow > state.nDownloadingSince + consensusParams.nPowTargetSpacing * (BLOCK_DOWNLOAD_TIMEOUT_BASE + BLOCK_DOWNLOAD_TIMEOUT_PER_PEER * nOtherPeersWithValidatedDownloads)) {"
      },
      {
        "sha": "e4276291bb01bea2b1e6afe49f03a6b5991c617d",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/383a0dfde89deed636dd37831940d220f2e6223d/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/383a0dfde89deed636dd37831940d220f2e6223d/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=383a0dfde89deed636dd37831940d220f2e6223d",
        "patch": "@@ -131,7 +131,7 @@ bool static LookupIntern(const char *pszName, std::vector<CNetAddr>& vIP, unsign\n \n     freeaddrinfo(aiRes);\n \n-    return (vIP.size() > 0);\n+    return !vIP.empty();\n }\n \n bool LookupHost(const char *pszName, std::vector<CNetAddr>& vIP, unsigned int nMaxSolutions, bool fAllowLookup)\n@@ -603,7 +603,7 @@ bool ConnectSocketByName(CService &addr, SOCKET& hSocketRet, const char *pszDest\n \n     std::vector<CService> addrResolved;\n     if (Lookup(strDest.c_str(), addrResolved, port, fNameLookup && !HaveNameProxy(), 256)) {\n-        if (addrResolved.size() > 0) {\n+        if (!addrResolved.empty()) {\n             addr = addrResolved[GetRand(addrResolved.size())];\n             return ConnectSocket(addr, hSocketRet, nTimeout);\n         }"
      },
      {
        "sha": "b5386d3f2102ee82d966f81aaf41e21c31509095",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/383a0dfde89deed636dd37831940d220f2e6223d/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/383a0dfde89deed636dd37831940d220f2e6223d/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=383a0dfde89deed636dd37831940d220f2e6223d",
        "patch": "@@ -407,12 +407,15 @@ void CoinControlDialog::updateLabelLocked()\n {\n     std::vector<COutPoint> vOutpts;\n     model->listLockedCoins(vOutpts);\n-    if (vOutpts.size() > 0)\n+    if (vOutpts.empty())\n+    {\n+       ui->labelLocked->setVisible(false);\n+    }\n+    else\n     {\n        ui->labelLocked->setText(tr(\"(%1 locked)\").arg(vOutpts.size()));\n        ui->labelLocked->setVisible(true);\n     }\n-    else ui->labelLocked->setVisible(false);\n }\n \n void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)"
      },
      {
        "sha": "22225cd186a665d515c716611ebd64c0e33e7f63",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/383a0dfde89deed636dd37831940d220f2e6223d/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/383a0dfde89deed636dd37831940d220f2e6223d/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=383a0dfde89deed636dd37831940d220f2e6223d",
        "patch": "@@ -936,10 +936,9 @@ QString formatServicesStr(quint64 mask)\n         }\n     }\n \n-    if (strList.size())\n-        return strList.join(\" & \");\n-    else\n+    if (strList.empty())\n         return QObject::tr(\"None\");\n+    return strList.join(\" & \");\n }\n \n QString formatPingTime(double dPingTime)"
      },
      {
        "sha": "0d2c44fc95f47bf066020aa5a77b6f025a1e4bf9",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/383a0dfde89deed636dd37831940d220f2e6223d/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/383a0dfde89deed636dd37831940d220f2e6223d/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=383a0dfde89deed636dd37831940d220f2e6223d",
        "patch": "@@ -249,12 +249,12 @@ bool RPCConsole::RPCParseCommandLine(std::string &strResult, const std::string &\n                             curarg = lastResult.write(2);\n \n                         // if we have a non empty result, use it as stack argument otherwise as general result\n-                        if (curarg.size())\n+                        if (!curarg.empty())\n                         {\n-                            if (stack.size())\n-                                add_to_current_stack(curarg);\n-                            else\n+                            if (stack.empty())\n                                 strResult = curarg;\n+                            else\n+                                add_to_current_stack(curarg);\n                         }\n                         curarg.clear();\n                         // assume eating space state"
      },
      {
        "sha": "19bdc25af20a18fd66e3d4286dc02e832d92f681",
        "filename": "src/qt/test/paymentservertests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/383a0dfde89deed636dd37831940d220f2e6223d/src/qt/test/paymentservertests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/383a0dfde89deed636dd37831940d220f2e6223d/src/qt/test/paymentservertests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/paymentservertests.cpp?ref=383a0dfde89deed636dd37831940d220f2e6223d",
        "patch": "@@ -23,7 +23,7 @@\n X509 *parse_b64der_cert(const char* cert_data)\n {\n     std::vector<unsigned char> data = DecodeBase64(cert_data);\n-    assert(data.size() > 0);\n+    assert(!data.empty());\n     const unsigned char* dptr = &data[0];\n     X509 *cert = d2i_X509(NULL, &dptr, data.size());\n     assert(cert);"
      },
      {
        "sha": "b3ee3d393c7afdbf124d6f528ecae2d6cf490f21",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/383a0dfde89deed636dd37831940d220f2e6223d/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/383a0dfde89deed636dd37831940d220f2e6223d/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=383a0dfde89deed636dd37831940d220f2e6223d",
        "patch": "@@ -425,7 +425,7 @@ static bool rest_getutxos(HTTPRequest* req, const std::string& strURIPart)\n     // parse/deserialize input\n     // input-format = output-format, rest/getutxos/bin requires binary input, gives binary output, ...\n \n-    if (uriParts.size() > 0)\n+    if (!uriParts.empty())\n     {\n \n         //inputs is sent over URI scheme (/rest/getutxos/checkmempool/txid1-n/txid2-n/...)\n@@ -446,10 +446,9 @@ static bool rest_getutxos(HTTPRequest* req, const std::string& strURIPart)\n             vOutPoints.push_back(COutPoint(txid, (uint32_t)nOutput));\n         }\n \n-        if (vOutPoints.size() > 0)\n-            fInputParsed = true;\n-        else\n+        if (vOutPoints.empty())\n             return RESTERR(req, HTTP_BAD_REQUEST, \"Error: empty request\");\n+        fInputParsed = true;\n     }\n \n     switch (rf) {\n@@ -462,7 +461,7 @@ static bool rest_getutxos(HTTPRequest* req, const std::string& strURIPart)\n     case RF_BINARY: {\n         try {\n             //deserialize only if user sent a request\n-            if (strRequestMutable.size() > 0)\n+            if (!strRequestMutable.empty())\n             {\n                 if (fInputParsed) //don't allow sending input over URI and HTTP RAW DATA\n                     return RESTERR(req, HTTP_BAD_REQUEST, \"Combination of URI scheme inputs and raw post data is not allowed\");"
      },
      {
        "sha": "84a37ed090ae5f1be51f808ecc8ee587d61cfefa",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/383a0dfde89deed636dd37831940d220f2e6223d/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/383a0dfde89deed636dd37831940d220f2e6223d/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=383a0dfde89deed636dd37831940d220f2e6223d",
        "patch": "@@ -210,7 +210,7 @@ UniValue waitfornewblock(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"waitfornewblock\", \"1000\")\n         );\n     int timeout = 0;\n-    if (request.params.size() > 0)\n+    if (!request.params.empty())\n         timeout = request.params[0].get_int();\n \n     CUpdatedBlock block;\n@@ -434,7 +434,7 @@ UniValue getrawmempool(const JSONRPCRequest& request)\n         );\n \n     bool fVerbose = false;\n-    if (request.params.size() > 0)\n+    if (!request.params.size())\n         fVerbose = request.params[0].get_bool();\n \n     return mempoolToJSON(fVerbose);\n@@ -1037,7 +1037,7 @@ UniValue verifychain(const JSONRPCRequest& request)\n \n     LOCK(cs_main);\n \n-    if (request.params.size() > 0)\n+    if (!request.params.empty())\n         nCheckLevel = request.params[0].get_int();\n     if (request.params.size() > 1)\n         nCheckDepth = request.params[1].get_int();"
      },
      {
        "sha": "4565474c756c7db597063f8437070f3bc26ac010",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/383a0dfde89deed636dd37831940d220f2e6223d/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/383a0dfde89deed636dd37831940d220f2e6223d/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=383a0dfde89deed636dd37831940d220f2e6223d",
        "patch": "@@ -91,7 +91,7 @@ UniValue getnetworkhashps(const JSONRPCRequest& request)\n        );\n \n     LOCK(cs_main);\n-    return GetNetworkHashPS(request.params.size() > 0 ? request.params[0].get_int() : 120, request.params.size() > 1 ? request.params[1].get_int() : -1);\n+    return GetNetworkHashPS((!request.params.empty()) ? request.params[0].get_int() : 120, request.params.size() > 1 ? request.params[1].get_int() : -1);\n }\n \n UniValue generateBlocks(std::shared_ptr<CReserveScript> coinbaseScript, int nGenerate, uint64_t nMaxTries, bool keepScript)\n@@ -363,7 +363,7 @@ UniValue getblocktemplate(const JSONRPCRequest& request)\n     UniValue lpval = NullUniValue;\n     std::set<std::string> setClientRules;\n     int64_t nMaxVersionPreVB = -1;\n-    if (request.params.size() > 0)\n+    if (!request.params.empty())\n     {\n         const UniValue& oparam = request.params[0].get_obj();\n         const UniValue& modeval = find_value(oparam, \"mode\");"
      },
      {
        "sha": "ee426de5534fd7468a00ffd3cfc0346fdc3d417e",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/383a0dfde89deed636dd37831940d220f2e6223d/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/383a0dfde89deed636dd37831940d220f2e6223d/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=383a0dfde89deed636dd37831940d220f2e6223d",
        "patch": "@@ -238,7 +238,7 @@ UniValue help(const JSONRPCRequest& jsonRequest)\n         );\n \n     std::string strCommand;\n-    if (jsonRequest.params.size() > 0)\n+    if (!jsonRequest.params.empty())\n         strCommand = jsonRequest.params[0].get_str();\n \n     return tableRPC.help(strCommand, jsonRequest);"
      },
      {
        "sha": "303392ab9553080787e0f6589e875b068ccba6f7",
        "filename": "src/test/coins_tests.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/383a0dfde89deed636dd37831940d220f2e6223d/src/test/coins_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/383a0dfde89deed636dd37831940d220f2e6223d/src/test/coins_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/coins_tests.cpp?ref=383a0dfde89deed636dd37831940d220f2e6223d",
        "patch": "@@ -215,7 +215,7 @@ BOOST_AUTO_TEST_CASE(coins_cache_simulation_test)\n         }\n         if (InsecureRandRange(100) == 0) {\n             // Every 100 iterations, change the cache stack.\n-            if (stack.size() > 0 && InsecureRandBool() == 0) {\n+            if (!stack.empty() && InsecureRandBool() == 0) {\n                 //Remove the top cache\n                 stack.back()->Flush();\n                 delete stack.back();\n@@ -224,10 +224,10 @@ BOOST_AUTO_TEST_CASE(coins_cache_simulation_test)\n             if (stack.empty() || (stack.size() < 4 && InsecureRandBool())) {\n                 //Add a new cache\n                 CCoinsView* tip = &base;\n-                if (stack.size() > 0) {\n-                    tip = stack.back();\n-                } else {\n+                if (stack.empty()) {\n                     removed_all_caches = true;\n+                } else {\n+                    tip = stack.back();\n                 }\n                 stack.push_back(new CCoinsViewCacheTest(tip));\n                 if (stack.size() == 4) {\n@@ -238,7 +238,7 @@ BOOST_AUTO_TEST_CASE(coins_cache_simulation_test)\n     }\n \n     // Clean up the stack.\n-    while (stack.size() > 0) {\n+    while (!stack.empty()) {\n         delete stack.back();\n         stack.pop_back();\n     }\n@@ -383,7 +383,7 @@ BOOST_AUTO_TEST_CASE(updatecoins_simulation_test)\n \n             // Track this tx and undo info to use later\n             utxoData.emplace(outpoint, std::make_tuple(tx,undo,old_coin));\n-        } else if (utxoset.size()) {\n+        } else if (!utxoset.empty()) {\n             //1/20 times undo a previous transaction\n             auto utxod = FindRandomFrom(utxoset);\n \n@@ -448,14 +448,14 @@ BOOST_AUTO_TEST_CASE(updatecoins_simulation_test)\n         }\n         if (InsecureRandRange(100) == 0) {\n             // Every 100 iterations, change the cache stack.\n-            if (stack.size() > 0 && InsecureRandBool() == 0) {\n+            if (!stack.empty() && InsecureRandBool() == 0) {\n                 stack.back()->Flush();\n                 delete stack.back();\n                 stack.pop_back();\n             }\n             if (stack.empty() || (stack.size() < 4 && InsecureRandBool())) {\n                 CCoinsView* tip = &base;\n-                if (stack.size() > 0) {\n+                if (!stack.empty()) {\n                     tip = stack.back();\n                 }\n                 stack.push_back(new CCoinsViewCacheTest(tip));\n@@ -464,7 +464,7 @@ BOOST_AUTO_TEST_CASE(updatecoins_simulation_test)\n     }\n \n     // Clean up the stack.\n-    while (stack.size() > 0) {\n+    while (!stack.empty()) {\n         delete stack.back();\n         stack.pop_back();\n     }"
      },
      {
        "sha": "e4487cc467737b1935cbeba50a82d21c4f4af6cb",
        "filename": "src/test/getarg_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/383a0dfde89deed636dd37831940d220f2e6223d/src/test/getarg_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/383a0dfde89deed636dd37831940d220f2e6223d/src/test/getarg_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/getarg_tests.cpp?ref=383a0dfde89deed636dd37831940d220f2e6223d",
        "patch": "@@ -17,7 +17,7 @@ BOOST_FIXTURE_TEST_SUITE(getarg_tests, BasicTestingSetup)\n static void ResetArgs(const std::string& strArg)\n {\n     std::vector<std::string> vecArg;\n-    if (strArg.size())\n+    if (!strArg.empty())\n       boost::split(vecArg, strArg, boost::is_space(), boost::token_compress_on);\n \n     // Insert dummy executable name:"
      },
      {
        "sha": "3cc25059751632d5c4ba9b654e6bbe0e5a55057d",
        "filename": "src/test/prevector_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/383a0dfde89deed636dd37831940d220f2e6223d/src/test/prevector_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/383a0dfde89deed636dd37831940d220f2e6223d/src/test/prevector_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/prevector_tests.cpp?ref=383a0dfde89deed636dd37831940d220f2e6223d",
        "patch": "@@ -205,7 +205,7 @@ BOOST_AUTO_TEST_CASE(PrevectorTestInt)\n             if (InsecureRandBits(2) == 0) {\n                 test.insert(InsecureRandRange(test.size() + 1), InsecureRand32());\n             }\n-            if (test.size() > 0 && InsecureRandBits(2) == 1) {\n+            if (!test.empty() && InsecureRandBits(2) == 1) {\n                 test.erase(InsecureRandRange(test.size()));\n             }\n             if (InsecureRandBits(3) == 2) {\n@@ -223,7 +223,7 @@ BOOST_AUTO_TEST_CASE(PrevectorTestInt)\n             if (InsecureRandBits(4) == 5) {\n                 test.push_back(InsecureRand32());\n             }\n-            if (test.size() > 0 && InsecureRandBits(4) == 6) {\n+            if (!test.empty() && InsecureRandBits(4) == 6) {\n                 test.pop_back();\n             }\n             if (InsecureRandBits(5) == 7) {\n@@ -245,7 +245,7 @@ BOOST_AUTO_TEST_CASE(PrevectorTestInt)\n             if (InsecureRandBits(6) == 10) {\n                 test.shrink_to_fit();\n             }\n-            if (test.size() > 0) {\n+            if (!test.empty()) {\n                 test.update(InsecureRandRange(test.size()), InsecureRand32());\n             }\n             if (InsecureRandBits(10) == 11) {"
      },
      {
        "sha": "e7434866be9c51dbd23e8d9e204ed26b46a3fb33",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/383a0dfde89deed636dd37831940d220f2e6223d/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/383a0dfde89deed636dd37831940d220f2e6223d/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=383a0dfde89deed636dd37831940d220f2e6223d",
        "patch": "@@ -409,7 +409,7 @@ void ReplaceRedeemScript(CScript& script, const CScript& redeemScript)\n {\n     std::vector<valtype> stack;\n     EvalScript(stack, script, SCRIPT_VERIFY_STRICTENC, BaseSignatureChecker(), SIGVERSION_BASE);\n-    assert(stack.size() > 0);\n+    assert(!stack.empty());\n     stack.back() = std::vector<unsigned char>(redeemScript.begin(), redeemScript.end());\n     script = PushAll(stack);\n }"
      },
      {
        "sha": "6ac0ac0fd49aef1e83e4d04d68ed29378801229d",
        "filename": "src/utilstrencodings.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/383a0dfde89deed636dd37831940d220f2e6223d/src/utilstrencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/383a0dfde89deed636dd37831940d220f2e6223d/src/utilstrencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utilstrencodings.cpp?ref=383a0dfde89deed636dd37831940d220f2e6223d",
        "patch": "@@ -62,7 +62,7 @@ bool IsHex(const std::string& str)\n         if (HexDigit(*it) < 0)\n             return false;\n     }\n-    return (str.size() > 0) && (str.size()%2 == 0);\n+    return !str.empty() && str.size() % 2 == 0;\n }\n \n std::vector<unsigned char> ParseHex(const char* psz)"
      },
      {
        "sha": "9f24745474bcf8448debe34c063dd03dc2064b29",
        "filename": "src/wallet/coincontrol.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/383a0dfde89deed636dd37831940d220f2e6223d/src/wallet/coincontrol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/383a0dfde89deed636dd37831940d220f2e6223d/src/wallet/coincontrol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coincontrol.h?ref=383a0dfde89deed636dd37831940d220f2e6223d",
        "patch": "@@ -46,7 +46,7 @@ class CCoinControl\n \n     bool HasSelected() const\n     {\n-        return (setSelected.size() > 0);\n+        return !setSelected.empty();\n     }\n \n     bool IsSelected(const COutPoint& output) const"
      },
      {
        "sha": "087109064149942c88c70242cc7ab203cb19e687",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/383a0dfde89deed636dd37831940d220f2e6223d/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/383a0dfde89deed636dd37831940d220f2e6223d/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=383a0dfde89deed636dd37831940d220f2e6223d",
        "patch": "@@ -799,7 +799,7 @@ UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, const int6\n             }\n \n             // Import private keys.\n-            if (keys.size()) {\n+            if (!keys.empty()) {\n                 for (size_t i = 0; i < keys.size(); i++) {\n                     const std::string& privkey = keys[i].get_str();\n \n@@ -840,7 +840,7 @@ UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, const int6\n             success = true;\n         } else {\n             // Import public keys.\n-            if (pubKeys.size() && keys.empty()) {\n+            if (!pubKeys.empty() && keys.empty()) {\n                 const std::string& strPubKey = pubKeys[0].get_str();\n \n                 if (!IsHex(strPubKey)) {\n@@ -908,7 +908,7 @@ UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, const int6\n             }\n \n             // Import private keys.\n-            if (keys.size()) {\n+            if (!keys.empty()) {\n                 const std::string& strPrivkey = keys[0].get_str();\n \n                 // Checks."
      },
      {
        "sha": "9cc639c5887239696eebbe9a19f91d2d0a07604a",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/383a0dfde89deed636dd37831940d220f2e6223d/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/383a0dfde89deed636dd37831940d220f2e6223d/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=383a0dfde89deed636dd37831940d220f2e6223d",
        "patch": "@@ -134,7 +134,7 @@ UniValue getnewaddress(const JSONRPCRequest& request)\n \n     // Parse the account first so we don't generate a key if there's an error\n     std::string strAccount;\n-    if (request.params.size() > 0)\n+    if (!request.params.empty())\n         strAccount = AccountFromValue(request.params[0]);\n \n     if (!pwallet->IsLocked()) {\n@@ -751,7 +751,7 @@ UniValue getunconfirmedbalance(const JSONRPCRequest &request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() > 0)\n+    if (request.fHelp || !request.params.empty())\n         throw std::runtime_error(\n                 \"getunconfirmedbalance\\n\"\n                 \"Returns the server's total unconfirmed balance\\n\");\n@@ -1165,7 +1165,7 @@ UniValue ListReceived(CWallet * const pwallet, const UniValue& params, bool fByA\n {\n     // Minimum confirmations\n     int nMinDepth = 1;\n-    if (params.size() > 0)\n+    if (!params.empty())\n         nMinDepth = params[0].get_int();\n \n     // Whether to include empty accounts\n@@ -1536,7 +1536,7 @@ UniValue listtransactions(const JSONRPCRequest& request)\n     LOCK2(cs_main, pwallet->cs_wallet);\n \n     std::string strAccount = \"*\";\n-    if (request.params.size() > 0)\n+    if (!request.params.empty())\n         strAccount = request.params[0].get_str();\n     int nCount = 10;\n     if (request.params.size() > 1)\n@@ -1629,7 +1629,7 @@ UniValue listaccounts(const JSONRPCRequest& request)\n     LOCK2(cs_main, pwallet->cs_wallet);\n \n     int nMinDepth = 1;\n-    if (request.params.size() > 0)\n+    if (!request.params.empty())\n         nMinDepth = request.params[0].get_int();\n     isminefilter includeWatchonly = ISMINE_SPENDABLE;\n     if(request.params.size() > 1)\n@@ -1732,7 +1732,7 @@ UniValue listsinceblock(const JSONRPCRequest& request)\n     int target_confirms = 1;\n     isminefilter filter = ISMINE_SPENDABLE;\n \n-    if (request.params.size() > 0)\n+    if (!request.params.empty())\n     {\n         uint256 blockId;\n \n@@ -1965,7 +1965,7 @@ UniValue keypoolrefill(const JSONRPCRequest& request)\n \n     // 0 is interpreted by TopUpKeyPool() as the default keypool size given by -keypool\n     unsigned int kpSize = 0;\n-    if (request.params.size() > 0) {\n+    if (!request.params.empty()) {\n         if (request.params[0].get_int() < 0)\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, expected valid size.\");\n         kpSize = (unsigned int)request.params[0].get_int();"
      },
      {
        "sha": "2f155d050d89487ab4a299547417545a897779d3",
        "filename": "src/wallet/test/crypto_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/383a0dfde89deed636dd37831940d220f2e6223d/src/wallet/test/crypto_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/383a0dfde89deed636dd37831940d220f2e6223d/src/wallet/test/crypto_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/crypto_tests.cpp?ref=383a0dfde89deed636dd37831940d220f2e6223d",
        "patch": "@@ -148,7 +148,7 @@ static void TestDecrypt(const CCrypter& crypt, const std::vector<unsigned char>&\n \n     BOOST_CHECK_MESSAGE(vchDecrypted1 == vchDecrypted2, HexStr(vchDecrypted1.begin(), vchDecrypted1.end()) + \" != \" + HexStr(vchDecrypted2.begin(), vchDecrypted2.end()));\n \n-    if (vchPlaintext.size())\n+    if (!vchPlaintext.empty())\n         BOOST_CHECK(CKeyingMaterial(vchPlaintext.begin(), vchPlaintext.end()) == vchDecrypted2);\n }\n "
      },
      {
        "sha": "e56d6a976e2e3e8ab23bbfc01f8dec68f2ebc1f6",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/383a0dfde89deed636dd37831940d220f2e6223d/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/383a0dfde89deed636dd37831940d220f2e6223d/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=383a0dfde89deed636dd37831940d220f2e6223d",
        "patch": "@@ -3356,7 +3356,7 @@ std::set< std::set<CTxDestination> > CWallet::GetAddressGroupings()\n                        grouping.insert(txoutAddr);\n                    }\n             }\n-            if (grouping.size() > 0)\n+            if (!grouping.empty())\n             {\n                 groupings.insert(grouping);\n                 grouping.clear();"
      }
    ]
  }
]