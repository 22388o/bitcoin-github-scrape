DrahtBot,2021-09-04 15:21:00,<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.,https://github.com/bitcoin/bitcoin/pull/22868#issuecomment-912990892,912990892,
hebasto,2021-09-07 18:55:28,Why this change is safe?,https://github.com/bitcoin/bitcoin/pull/22868#issuecomment-914545809,914545809,
promag,2021-09-07 20:31:02,@hebasto what is the concern? The lock can be acquired inside the load handler. This change also avoids recursive locks on `cs_wallet`.,https://github.com/bitcoin/bitcoin/pull/22868#issuecomment-914610671,914610671,
ryanofsky,2021-09-08 20:39:05,"> what is the concern?\n\nThis does seem probably safe, but it would save reviewers some effort to know when the lock was added, when it stopped being necessary, and the specific reason why it was necessary whenever it was needed (for example whether it was avoiding deadlocks or asserts by acquiring recursive locks in a consistent order, or whether it was avoiding race condition.) This informati",https://github.com/bitcoin/bitcoin/pull/22868#issuecomment-915553755,915553755,
promag,2021-09-11 22:12:56,"@ryanofsky \n\n> but it would save reviewers some effort to know when the lock was added, when it stopped being necessary\n\nMy bad for not writing this, I went thru history before making the change, will redo and update this.\n\n> One concern might be that one of the `wallet_load_fns` callbacks could call a wallet method and acquire cs_wallet mutex _after_ context.wallets_mutex, and maybe t",https://github.com/bitcoin/bitcoin/pull/22868#issuecomment-917493065,917493065,
promag,2021-09-12 20:49:07,@ryanofsky see https://github.com/bitcoin/bitcoin/pull/11634/files#r227725517 for when the lock was added and @practicalswift submitted a similar change #14560 but @MarcoFalke rejected it.,https://github.com/bitcoin/bitcoin/pull/22868#issuecomment-917707805,917707805,
promag,2021-09-24 15:08:48,"@ryanofsky thanks! You might want to see https://github.com/bitcoin-core/gui/pull/417/commits/c09fd3acb9aee9245a033e9d7251cd29de1d24bb, it needs this change otherwise it deadlocks.",https://github.com/bitcoin/bitcoin/pull/22868#issuecomment-926702933,926702933,
ryanofsky,2021-11-08 17:05:29,"> @ryanofsky thanks! You might want to see [bitcoin-core/gui@c09fd3a](https://github.com/bitcoin-core/gui/commit/c09fd3acb9aee9245a033e9d7251cd29de1d24bb), it needs this change otherwise it deadlocks.\n\nThanks! That also looks like a good change. Is there a PR or issue this is all a part of?",https://github.com/bitcoin/bitcoin/pull/22868#issuecomment-963370968,963370968,
promag,2021-11-08 17:07:19,"@ryanofsky yes, https://github.com/bitcoin-core/gui/pull/417\n\nEdit: I guess I have to rebase.",https://github.com/bitcoin/bitcoin/pull/22868#issuecomment-963372763,963372763,
promag,2021-11-08 22:00:30,Rebased due to trivial conflict with #23123.,https://github.com/bitcoin/bitcoin/pull/22868#issuecomment-963612615,963612615,
promag,2021-11-22 09:38:53,"> But in the future, GUI code could do arbitrary things in its `wallet_load_fns` handler, and maybe it will call a wallet function and lock `cs_wallet` in one. In that case the lock order would be `wallets_mutex` first then `cs_wallet` second\n\nThis is already the case and it is where the GUI models are filled.\n\n@meshcollider @ryanofsky updated OP, added `wallets_mutex` comment as suggested",https://github.com/bitcoin/bitcoin/pull/22868#issuecomment-975333091,975333091,
ryanofsky,2021-11-24 05:15:01,"PR description doesn't seem totally accurate, from https://github.com/bitcoin/bitcoin/pull/22868#issue-987214408\n\n> Don't have `cs_wallet` locked while calling each `context.wallet_load_fns`. A load handler can always lock `cs_wallet` if needed.\n> \n> The lock was added in [1c7e25d](https://github.com/bitcoin/bitcoin/commit/1c7e25db0c898abc9968ab487b254454b709e628) to satisfy TSAN. With [44",https://github.com/bitcoin/bitcoin/pull/22868#issuecomment-977540267,977540267,
jonatack,2021-11-24 12:34:13,"Haven't tried, but would there be any point in using `EXCLUDES` / `LOCKS_EXCLUDED` (or `REQUIRES(!mutex)` with `-Wthread-safety-negative`) annotations to enforce this?",https://github.com/bitcoin/bitcoin/pull/22868#discussion_r756020059,756020059,src/wallet/context.h
