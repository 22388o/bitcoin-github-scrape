[
  {
    "sha": "f13a22a631efe01e1fbae4ae78a4901d14ebda3c",
    "node_id": "C_kwDOABII59oAKGYxM2EyMmE2MzFlZmUwMWUxZmJhZTRhZTc4YTQ5MDFkMTRlYmRhM2M",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2021-09-02T22:11:50Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2021-11-22T09:42:36Z"
      },
      "message": "wallet: Call load handlers without cs_wallet locked\n\nCo-authored-by: Russell Yanofsky <russ@yanofsky.org>",
      "tree": {
        "sha": "e92718930ac203042bc4945de54d476a3a3e5ce5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e92718930ac203042bc4945de54d476a3a3e5ce5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f13a22a631efe01e1fbae4ae78a4901d14ebda3c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f13a22a631efe01e1fbae4ae78a4901d14ebda3c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f13a22a631efe01e1fbae4ae78a4901d14ebda3c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f13a22a631efe01e1fbae4ae78a4901d14ebda3c/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "47fe7445e7f54aee10ec6dbc53f1db1adbeb43de",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/47fe7445e7f54aee10ec6dbc53f1db1adbeb43de",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/47fe7445e7f54aee10ec6dbc53f1db1adbeb43de"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 5,
      "deletions": 9
    },
    "files": [
      {
        "sha": "dbd172e88ee3ad6e523fdb08a6e3021d730da48e",
        "filename": "src/wallet/context.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f13a22a631efe01e1fbae4ae78a4901d14ebda3c/src/wallet/context.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f13a22a631efe01e1fbae4ae78a4901d14ebda3c/src/wallet/context.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/context.h?ref=f13a22a631efe01e1fbae4ae78a4901d14ebda3c",
        "patch": "@@ -34,6 +34,8 @@ using LoadWalletFn = std::function<void(std::unique_ptr<interfaces::Wallet> wall\n struct WalletContext {\n     interfaces::Chain* chain{nullptr};\n     ArgsManager* args{nullptr}; // Currently a raw pointer because the memory is not managed by this struct\n+    // It is unsafe to lock this after locking a CWallet::cs_wallet mutex because\n+    // this could introduce inconsistent lock ordering and cause deadlocks.\n     Mutex wallets_mutex;\n     std::vector<std::shared_ptr<CWallet>> wallets GUARDED_BY(wallets_mutex);\n     std::list<LoadWalletFn> wallet_load_fns GUARDED_BY(wallets_mutex);"
      },
      {
        "sha": "6bf0d7b45b7d26626baeeb9198e1e6d541dee81f",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f13a22a631efe01e1fbae4ae78a4901d14ebda3c/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f13a22a631efe01e1fbae4ae78a4901d14ebda3c/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=f13a22a631efe01e1fbae4ae78a4901d14ebda3c",
        "patch": "@@ -783,18 +783,14 @@ BOOST_FIXTURE_TEST_CASE(CreateWallet, TestChain100Setup)\n     // deadlock during the sync and simulates a new block notification happening\n     // as soon as possible.\n     addtx_count = 0;\n-    auto handler = HandleLoadWallet(context, [&](std::unique_ptr<interfaces::Wallet> wallet) EXCLUSIVE_LOCKS_REQUIRED(wallet->wallet()->cs_wallet, context.wallets_mutex) {\n+    auto handler = HandleLoadWallet(context, [&](std::unique_ptr<interfaces::Wallet> wallet) {\n             BOOST_CHECK(rescan_completed);\n             m_coinbase_txns.push_back(CreateAndProcessBlock({}, GetScriptForRawPubKey(coinbaseKey.GetPubKey())).vtx[0]);\n             block_tx = TestSimpleSpend(*m_coinbase_txns[2], 0, coinbaseKey, GetScriptForRawPubKey(key.GetPubKey()));\n             m_coinbase_txns.push_back(CreateAndProcessBlock({block_tx}, GetScriptForRawPubKey(coinbaseKey.GetPubKey())).vtx[0]);\n             mempool_tx = TestSimpleSpend(*m_coinbase_txns[3], 0, coinbaseKey, GetScriptForRawPubKey(key.GetPubKey()));\n             BOOST_CHECK(m_node.chain->broadcastTransaction(MakeTransactionRef(mempool_tx), DEFAULT_TRANSACTION_MAXFEE, false, error));\n-            LEAVE_CRITICAL_SECTION(context.wallets_mutex);\n-            LEAVE_CRITICAL_SECTION(wallet->wallet()->cs_wallet);\n             SyncWithValidationInterfaceQueue();\n-            ENTER_CRITICAL_SECTION(wallet->wallet()->cs_wallet);\n-            ENTER_CRITICAL_SECTION(context.wallets_mutex);\n         });\n     wallet = TestLoadWallet(context);\n     BOOST_CHECK_EQUAL(addtx_count, 4);"
      },
      {
        "sha": "6ecf51c2b72129133751093d059ab109675c9b14",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f13a22a631efe01e1fbae4ae78a4901d14ebda3c/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f13a22a631efe01e1fbae4ae78a4901d14ebda3c/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=f13a22a631efe01e1fbae4ae78a4901d14ebda3c",
        "patch": "@@ -2759,8 +2759,6 @@ std::shared_ptr<CWallet> CWallet::Create(WalletContext& context, const std::stri\n     // Try to top up keypool. No-op if the wallet is locked.\n     walletInstance->TopUpKeyPool();\n \n-    LOCK(walletInstance->cs_wallet);\n-\n     if (chain && !AttachChain(walletInstance, *chain, rescan_required, error, warnings)) {\n         return nullptr;\n     }\n@@ -2772,9 +2770,9 @@ std::shared_ptr<CWallet> CWallet::Create(WalletContext& context, const std::stri\n         }\n     }\n \n-    walletInstance->SetBroadcastTransactions(args.GetBoolArg(\"-walletbroadcast\", DEFAULT_WALLETBROADCAST));\n-\n     {\n+        LOCK(walletInstance->cs_wallet);\n+        walletInstance->SetBroadcastTransactions(args.GetBoolArg(\"-walletbroadcast\", DEFAULT_WALLETBROADCAST));\n         walletInstance->WalletLogPrintf(\"setKeyPool.size() = %u\\n\",      walletInstance->GetKeyPoolSize());\n         walletInstance->WalletLogPrintf(\"mapWallet.size() = %u\\n\",       walletInstance->mapWallet.size());\n         walletInstance->WalletLogPrintf(\"m_address_book.size() = %u\\n\",  walletInstance->m_address_book.size());"
      }
    ]
  }
]