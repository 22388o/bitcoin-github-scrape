[
  {
    "sha": "e5c842146b3f2771e4bc069e636e3ce50ce3eb7b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNWM4NDIxNDZiM2YyNzcxZTRiYzA2OWU2MzZlM2NlNTBjZTNlYjdi",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-05-20T01:20:44Z"
      },
      "committer": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2020-05-15T14:22:02Z"
      },
      "message": "Add TruncatedSHA256Writer",
      "tree": {
        "sha": "cf8115f1549b63a9cce2b4700cf27ee5c89351ab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cf8115f1549b63a9cce2b4700cf27ee5c89351ab"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e5c842146b3f2771e4bc069e636e3ce50ce3eb7b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQJJBAABCgAzFiEEtFq20ghhrCHSdrgm8T0enYkHmM0FAl6+pYoVHGZqYWhyQHBy\nb3Rvbm1haWwuY29tAAoJEPE9Hp2JB5jNkbcP/1VY7tOcjhGIP2JabhufweN/O+In\nvDWstUuQ22UWe1ES2K+Z4byf6pua599/tZJcta+zddatJt4dtEi+W2oejrwHKwXR\nCw8UGHgZjGddNvjvDcaOAl5MD5KSTp++Dvn55H0Ycn1BXB65O+UVxOEFpjYNWszn\njPezhmD57wdbYQdtqXHr7GwwjO3CYX8PmgEboNx3d1Vh+llyZ1wfR/aUZltIZRoh\nPEHUd9bcuwI0A/IMtQH1oTUiSOs9GCR46kYcpiu+R1Gu2zn/QMoedeGZtRiasOy9\nfV+L6muUNjgs4enn/856lLFLW3XqKurwVKgLphsj/b8pLB/I2zdxrBc43cyXkOay\nXdbCOaIzzuy7ArA0Mt9WWBgLH4Kd+YBA3E6G3I8yIka/bpDxt3A62SQ3SseitT+K\noBxSx1DiWRU/2nJia5sjo8m73+tgIP4y2aOm+lLMOOpK24rDXLSeQzzqk/hCSrtW\nKoE1O3ycTBF+cVm6Rcqx5GljwvRZY48yT039ACTOXJ0R8ypmsebH2mckKAO78vOA\nT4rPZFSnb7DQc9hTAFWY36q4Jod6om2wPR1VI92+W0gmHQ0PJAdZLN1cnFauvxF+\nMQ/4nf4edjz/xOL8E5tx6HV/KSnuh565HnpezM4yx5iwFHg8BARCLQqHAdMFpc+c\nynktR/j+edArIMw5\n=ewJp\n-----END PGP SIGNATURE-----",
        "payload": "tree cf8115f1549b63a9cce2b4700cf27ee5c89351ab\nparent 951870807ea28e05cf074e364e1b55e985ab9f6d\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1495243244 -0700\ncommitter Fabian Jahr <fjahr@protonmail.com> 1589552522 +0200\n\nAdd TruncatedSHA256Writer\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e5c842146b3f2771e4bc069e636e3ce50ce3eb7b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e5c842146b3f2771e4bc069e636e3ce50ce3eb7b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e5c842146b3f2771e4bc069e636e3ce50ce3eb7b/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "951870807ea28e05cf074e364e1b55e985ab9f6d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/951870807ea28e05cf074e364e1b55e985ab9f6d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/951870807ea28e05cf074e364e1b55e985ab9f6d"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 36,
      "deletions": 0
    },
    "files": [
      {
        "sha": "4ff5d4446cb705f6e6a6796b5d679f79917a00d6",
        "filename": "src/hash.h",
        "status": "modified",
        "additions": 36,
        "deletions": 0,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e5c842146b3f2771e4bc069e636e3ce50ce3eb7b/src/hash.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e5c842146b3f2771e4bc069e636e3ce50ce3eb7b/src/hash.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hash.h?ref=e5c842146b3f2771e4bc069e636e3ce50ce3eb7b",
        "patch": "@@ -9,6 +9,7 @@\n #include <crypto/common.h>\n #include <crypto/ripemd160.h>\n #include <crypto/sha256.h>\n+#include <crypto/sha512.h>\n #include <prevector.h>\n #include <serialize.h>\n #include <uint256.h>\n@@ -191,6 +192,41 @@ class CHashVerifier : public CHashWriter\n     }\n };\n \n+/** A writer stream that computes a 256-bit truncated SHA512. */\n+class TruncatedSHA512Writer\n+{\n+private:\n+    CSHA512 ctx;\n+\n+    const int nType;\n+    const int nVersion;\n+public:\n+\n+    TruncatedSHA512Writer(int nTypeIn, int nVersionIn) : nType(nTypeIn), nVersion(nVersionIn) {}\n+\n+    int GetType() const { return nType; }\n+    int GetVersion() const { return nVersion; }\n+\n+    void write(const char *pch, size_t size) {\n+        ctx.Write((const unsigned char*)pch, size);\n+    }\n+\n+    uint256 GetHash() {\n+        unsigned char out[64];\n+        ctx.Finalize(out);\n+        uint256 result;\n+        memcpy((unsigned char*)&result, out, 32);\n+        return result;\n+    }\n+\n+    template<typename T>\n+    TruncatedSHA512Writer& operator<<(const T& obj) {\n+        // Serialize to this stream\n+        ::Serialize(*this, obj);\n+        return (*this);\n+    }\n+};\n+\n /** Compute the 256-bit hash of an object's serialization. */\n template<typename T>\n uint256 SerializeHash(const T& obj, int nType=SER_GETHASH, int nVersion=PROTOCOL_VERSION)"
      }
    ]
  },
  {
    "sha": "c46296006b2c4985c46a3219a813766614803737",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNDYyOTYwMDZiMmM0OTg1YzQ2YTMyMTlhODEzNzY2NjE0ODAzNzM3",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-05-18T22:50:31Z"
      },
      "committer": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2020-05-15T14:22:02Z"
      },
      "message": "MuHash3072 implementation\n\nCo-authored-by: Fabian Jahr <fjahr@protonmail.com>",
      "tree": {
        "sha": "fbc9146423697428febdda8b375c84d9b2159080",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fbc9146423697428febdda8b375c84d9b2159080"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c46296006b2c4985c46a3219a813766614803737",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQJJBAABCgAzFiEEtFq20ghhrCHSdrgm8T0enYkHmM0FAl6+pYoVHGZqYWhyQHBy\nb3Rvbm1haWwuY29tAAoJEPE9Hp2JB5jNWl0P/1wIAo3hNJJrhbpTGMihebiR8Wpq\nI+3nG6RBf7HG/4/2AHW/iq0UdAFd9QOxmUCTo7YPTZfrGNo6VKRymgtmPrJ3iviC\nRmow/AIYS16P3aooR7KmTGsXyTTV/RJkbAEtLhBOxP0fL/FKarInXkX6WjSOvX99\nnlXOIb8cyIU500PEHz4zk5/8nYe3lADU1s9iWeGgV1wUSxUZx7IwsbHH14xC4YYt\nOx0af1eA4bxVZbhkVAm1ubyeDIzNi/FJpPPP67CQhE1Rvq/CT2i60qmT1lrNSiCp\nZ6q0Pd/vo66cRu3xIqMjAKto7u5JKLihV2tFnNESC5Se35IP3ME//9phskGJNKcD\ni3crObWx3OhPAMK5s7bJQN7qEU6vcJtWvqYtkEW7ZpyLXu7gpZnxcWM7QRSCk8rn\nmPvyh4FCEX61BVGHOIb1hjzLEvZXaZCwQ5RkViHaYApeXIHh5j+LbmHjj8QsOLgq\nNvMQKiSm3z8KQGX69K4WH9wJn+5rbca+E7n3rU6BEX2zJQIMgkKgfx/cE4swlJSF\ninRKk7y6Jw+Pb2c6LN85iK/Tv5vYCqiVK2vsXEnNnfHUaGgaCF+b7g2c5BNFtu4L\nqj/x9DB0/LvaGQPpithYCn4+jvikBpQJ3bGOLJiDkr/OMlCehTmHgjOp5bzrWXcv\np4a58mUwDYLZxzc2\n=63r4\n-----END PGP SIGNATURE-----",
        "payload": "tree fbc9146423697428febdda8b375c84d9b2159080\nparent e5c842146b3f2771e4bc069e636e3ce50ce3eb7b\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1495147831 -0700\ncommitter Fabian Jahr <fjahr@protonmail.com> 1589552522 +0200\n\nMuHash3072 implementation\n\nCo-authored-by: Fabian Jahr <fjahr@protonmail.com>\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c46296006b2c4985c46a3219a813766614803737",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c46296006b2c4985c46a3219a813766614803737",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c46296006b2c4985c46a3219a813766614803737/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e5c842146b3f2771e4bc069e636e3ce50ce3eb7b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e5c842146b3f2771e4bc069e636e3ce50ce3eb7b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e5c842146b3f2771e4bc069e636e3ce50ce3eb7b"
      }
    ],
    "stats": {
      "total": 418,
      "additions": 418,
      "deletions": 0
    },
    "files": [
      {
        "sha": "bd7db24bf3ea8182686d6795f1e5584856fd6b51",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c46296006b2c4985c46a3219a813766614803737/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c46296006b2c4985c46a3219a813766614803737/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=c46296006b2c4985c46a3219a813766614803737",
        "patch": "@@ -694,6 +694,9 @@ if test x$use_lcov_branch != xno; then\n   AC_SUBST(LCOV_OPTS, \"$LCOV_OPTS --rc lcov_branch_coverage=1\")\n fi\n \n+dnl Check for __int128\n+AC_CHECK_TYPES([__int128])\n+\n dnl Check for endianness\n AC_C_BIGENDIAN\n "
      },
      {
        "sha": "3760b91cebee365c9458e645dcbd4dc9aa9acf9e",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c46296006b2c4985c46a3219a813766614803737/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c46296006b2c4985c46a3219a813766614803737/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=c46296006b2c4985c46a3219a813766614803737",
        "patch": "@@ -383,6 +383,8 @@ crypto_libbitcoin_crypto_base_a_SOURCES = \\\n   crypto/hmac_sha512.h \\\n   crypto/poly1305.h \\\n   crypto/poly1305.cpp \\\n+  crypto/muhash.cpp \\\n+  crypto/muhash.h \\\n   crypto/ripemd160.cpp \\\n   crypto/ripemd160.h \\\n   crypto/sha1.cpp \\"
      },
      {
        "sha": "c858f02aa466fdbbd53b194238fafdcb2805617c",
        "filename": "src/bench/crypto_hash.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c46296006b2c4985c46a3219a813766614803737/src/bench/crypto_hash.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c46296006b2c4985c46a3219a813766614803737/src/bench/crypto_hash.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/crypto_hash.cpp?ref=c46296006b2c4985c46a3219a813766614803737",
        "patch": "@@ -4,6 +4,7 @@\n \n \n #include <bench/bench.h>\n+#include <crypto/muhash.h>\n #include <crypto/ripemd160.h>\n #include <crypto/sha1.h>\n #include <crypto/sha256.h>\n@@ -91,6 +92,18 @@ static void FastRandom_1bit(benchmark::State& state)\n     }\n }\n \n+static void MuHash(benchmark::State& state)\n+{\n+    FastRandomContext rng(true);\n+    MuHash3072 acc;\n+    unsigned char key[32] = {0};\n+    int i = 0;\n+    while (state.KeepRunning()) {\n+        key[0] = ++i;\n+        acc *= MuHash3072(key);\n+    }\n+}\n+\n BENCHMARK(RIPEMD160, 440);\n BENCHMARK(SHA1, 570);\n BENCHMARK(SHA256, 340);\n@@ -101,3 +114,5 @@ BENCHMARK(SipHash_32b, 40 * 1000 * 1000);\n BENCHMARK(SHA256D64_1024, 7400);\n BENCHMARK(FastRandom_32bit, 110 * 1000 * 1000);\n BENCHMARK(FastRandom_1bit, 440 * 1000 * 1000);\n+\n+BENCHMARK(MuHash, 5000);"
      },
      {
        "sha": "4f948874e57fcccaab293a95958da22a06c2a5d4",
        "filename": "src/crypto/muhash.cpp",
        "status": "added",
        "additions": 274,
        "deletions": 0,
        "changes": 274,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c46296006b2c4985c46a3219a813766614803737/src/crypto/muhash.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c46296006b2c4985c46a3219a813766614803737/src/crypto/muhash.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/muhash.cpp?ref=c46296006b2c4985c46a3219a813766614803737",
        "patch": "@@ -0,0 +1,274 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/muhash.h>\n+\n+#include <crypto/chacha20.h>\n+#include <crypto/common.h>\n+\n+#include <assert.h>\n+#include <stdio.h>\n+\n+#include <limits>\n+\n+namespace {\n+\n+/** Extract the lowest limb of [c0,c1,c2] into n, and left shift the number by 1 limb. */\n+#define extract3(c0,c1,c2,n) { \\\n+    (n) = c0; \\\n+    c0 = c1; \\\n+    c1 = c2; \\\n+    c2 = 0; \\\n+}\n+\n+/** Extract the lowest limb of [c0,c1] into n, and left shift the number by 1 limb. */\n+#define extract2(c0,c1,n) { \\\n+    (n) = c0; \\\n+    c0 = c1; \\\n+    c1 = 0; \\\n+}\n+\n+/** [c0,c1] = a * b */\n+#define mul(c0,c1,a,b) { \\\n+    Num3072::double_limb_type t = (Num3072::double_limb_type)a * b; \\\n+    c2 = 0; \\\n+    c1 = t >> Num3072::LIMB_SIZE; \\\n+    c0 = t; \\\n+}\n+\n+/* [c0,c1,c2] += n * [d0,d1,d2]. c2 is 0 initially */\n+#define mulnadd3(c0,c1,c2,d0,d1,d2,n) { \\\n+    Num3072::double_limb_type t = (Num3072::double_limb_type)d0 * n + c0; \\\n+    c0 = t; \\\n+    t >>= Num3072::LIMB_SIZE; \\\n+    t += (Num3072::double_limb_type)d1 * n + c1; \\\n+    c1 = t; \\\n+    t >>= Num3072::LIMB_SIZE; \\\n+    c2 = t + d2 * n; \\\n+}\n+\n+/* [c0,c1] *= n */\n+#define muln2(c0,c1,n) { \\\n+    Num3072::double_limb_type t = (Num3072::double_limb_type)c0 * n; \\\n+    c0 = t; \\\n+    t >>= Num3072::LIMB_SIZE; \\\n+    t += (Num3072::double_limb_type)c1 * n; \\\n+    c1 = t; \\\n+    t >>= Num3072::LIMB_SIZE; \\\n+}\n+\n+/** [c0,c1,c2] += a * b */\n+#define muladd3(c0,c1,c2,a,b) { \\\n+    Num3072::limb_type tl, th; \\\n+    { \\\n+        Num3072::double_limb_type t = (Num3072::double_limb_type)a * b; \\\n+        th = t >> Num3072::LIMB_SIZE; \\\n+        tl = t; \\\n+    } \\\n+    c0 += tl; \\\n+    th += (c0 < tl) ? 1 : 0; \\\n+    c1 += th; \\\n+    c2 += (c1 < th) ? 1 : 0; \\\n+}\n+\n+/** [c0,c1,c2] += 2 * a * b */\n+#define muldbladd3(c0,c1,c2,a,b) { \\\n+    Num3072::limb_type tl, th; \\\n+    { \\\n+        Num3072::double_limb_type t = (Num3072::double_limb_type)a * b; \\\n+        th = t >> Num3072::LIMB_SIZE; \\\n+        tl = t; \\\n+    } \\\n+    c0 += tl; \\\n+    Num3072::limb_type tt = th + ((c0 < tl) ? 1 : 0); \\\n+    c1 += tt; \\\n+    c2 += (c1 < tt) ? 1 : 0; \\\n+    c0 += tl; \\\n+    th += (c0 < tl) ? 1 : 0; \\\n+    c1 += th; \\\n+    c2 += (c1 < th) ? 1 : 0; \\\n+}\n+\n+/** [c0,c1] += a */\n+#define add2(c0,c1,a) { \\\n+    c0 += (a); \\\n+    c1 += (c0 < (a)) ? 1 : 0; \\\n+}\n+\n+bool IsOverflow(const Num3072* d)\n+{\n+    for (int i = 1; i < Num3072::LIMBS - 1; ++i) {\n+        if (d->limbs[i] != std::numeric_limits<Num3072::limb_type>::max()) return false;\n+    }\n+    if (d->limbs[0] <= std::numeric_limits<Num3072::limb_type>::max() - 1103717) return false;\n+    return true;\n+}\n+\n+void FullReduce(Num3072* d)\n+{\n+    Num3072::limb_type c0 = 1103717;\n+    for (int i = 0; i < Num3072::LIMBS; ++i) {\n+        Num3072::limb_type c1 = 0;\n+        add2(c0, c1, d->limbs[i]);\n+        extract2(c0, c1, d->limbs[i]);\n+    }\n+}\n+\n+void Multiply(Num3072* out, const Num3072* a, const Num3072* b)\n+{\n+    Num3072::limb_type c0 = 0, c1 = 0;\n+    Num3072 tmp;\n+\n+    /* Compute limbs 0..N-2 of a*b into tmp, including one reduction. */\n+    for (int j = 0; j < Num3072::LIMBS - 1; ++j) {\n+        Num3072::limb_type d0 = 0, d1 = 0, d2 = 0, c2 = 0;\n+        mul(d0, d1, a->limbs[1 + j], b->limbs[Num3072::LIMBS + j - (1 + j)]);\n+        for (int i = 2 + j; i < Num3072::LIMBS; ++i) muladd3(d0, d1, d2, a->limbs[i], b->limbs[Num3072::LIMBS + j - i]);\n+        mulnadd3(c0, c1, c2, d0, d1, d2, 1103717);\n+        for (int i = 0; i < j + 1; ++i) muladd3(c0, c1, c2, a->limbs[i], b->limbs[j - i]);\n+        extract3(c0, c1, c2, tmp.limbs[j]);\n+    }\n+    /* Compute limb N-1 of a*b into tmp. */\n+    {\n+        Num3072::limb_type c2 = 0;\n+        for (int i = 0; i < Num3072::LIMBS; ++i) muladd3(c0, c1, c2, a->limbs[i], b->limbs[Num3072::LIMBS - 1 - i]);\n+        extract3(c0, c1, c2, tmp.limbs[Num3072::LIMBS - 1]);\n+    }\n+    /* Perform a second reduction. */\n+    muln2(c0, c1, 1103717);\n+    for (int j = 0; j < Num3072::LIMBS; ++j) {\n+        add2(c0, c1, tmp.limbs[j]);\n+        extract2(c0, c1, out->limbs[j]);\n+    }\n+    assert(c1 == 0);\n+    assert(c0 == 0 || c0 == 1);\n+    /* Perform a potential third reduction. */\n+    if (c0) FullReduce(out);\n+}\n+\n+void Square(Num3072* out, const Num3072* a)\n+{\n+    Num3072::limb_type c0 = 0, c1 = 0;\n+    Num3072 tmp;\n+\n+    /* Compute limbs 0..N-2 of a*a into tmp, including one reduction. */\n+    for (int j = 0; j < Num3072::LIMBS - 1; ++j) {\n+        Num3072::limb_type d0 = 0, d1 = 0, d2 = 0, c2 = 0;\n+        for (int i = 0; i < (Num3072::LIMBS - 1 - j) / 2; ++i) muldbladd3(d0, d1, d2, a->limbs[i + j + 1], a->limbs[Num3072::LIMBS - 1 - i]);\n+        if ((j + 1) & 1) muladd3(d0, d1, d2, a->limbs[(Num3072::LIMBS - 1 - j) / 2 + j + 1], a->limbs[Num3072::LIMBS - 1 - (Num3072::LIMBS - 1 - j) / 2]);\n+        mulnadd3(c0, c1, c2, d0, d1, d2, 1103717);\n+        for (int i = 0; i < (j + 1) / 2; ++i) muldbladd3(c0, c1, c2, a->limbs[i], a->limbs[j - i]);\n+        if ((j + 1) & 1) muladd3(c0, c1, c2, a->limbs[(j + 1) / 2], a->limbs[j - (j + 1) / 2]);\n+        extract3(c0, c1, c2, tmp.limbs[j]);\n+    }\n+    {\n+        Num3072::limb_type c2 = 0;\n+        for (int i = 0; i < Num3072::LIMBS / 2; ++i) muldbladd3(c0, c1, c2, a->limbs[i], a->limbs[Num3072::LIMBS - 1 - i]);\n+        extract3(c0, c1, c2, tmp.limbs[Num3072::LIMBS - 1]);\n+    }\n+    /* Perform a second reduction. */\n+    muln2(c0, c1, 1103717);\n+    for (int j = 0; j < Num3072::LIMBS; ++j) {\n+        add2(c0, c1, tmp.limbs[j]);\n+        extract2(c0, c1, out->limbs[j]);\n+    }\n+    assert(c1 == 0);\n+    assert(c0 == 0 || c0 == 1);\n+    /* Perform a potential third reduction. */\n+    if (c0) FullReduce(out);\n+}\n+\n+void Inverse(Num3072* out, const Num3072* a)\n+{\n+    Num3072 p[12]; // p[i] = a^(2^(2^i)-1)\n+    Num3072 x;\n+\n+    p[0] = *a;\n+\n+    for (int i = 0; i < 11; ++i) {\n+        p[i + 1] = p[i];\n+        for (int j = 0; j < (1 << i); ++j) Square(&p[i + 1], &p[i + 1]);\n+        Multiply(&p[i + 1], &p[i + 1], &p[i]);\n+    }\n+\n+    x = p[11];\n+\n+    for (int j = 0; j < 512; ++j) Square(&x, &x);\n+    Multiply(&x, &x, &p[9]);\n+    for (int j = 0; j < 256; ++j) Square(&x, &x);\n+    Multiply(&x, &x, &p[8]);\n+    for (int j = 0; j < 128; ++j) Square(&x, &x);\n+    Multiply(&x, &x, &p[7]);\n+    for (int j = 0; j < 64; ++j) Square(&x, &x);\n+    Multiply(&x, &x, &p[6]);\n+    for (int j = 0; j < 32; ++j) Square(&x, &x);\n+    Multiply(&x, &x, &p[5]);\n+    for (int j = 0; j < 8; ++j) Square(&x, &x);\n+    Multiply(&x, &x, &p[3]);\n+    for (int j = 0; j < 2; ++j) Square(&x, &x);\n+    Multiply(&x, &x, &p[1]);\n+    for (int j = 0; j < 1; ++j) Square(&x, &x);\n+    Multiply(&x, &x, &p[0]);\n+    for (int j = 0; j < 5; ++j) Square(&x, &x);\n+    Multiply(&x, &x, &p[2]);\n+    for (int j = 0; j < 3; ++j) Square(&x, &x);\n+    Multiply(&x, &x, &p[0]);\n+    for (int j = 0; j < 2; ++j) Square(&x, &x);\n+    Multiply(&x, &x, &p[0]);\n+    for (int j = 0; j < 4; ++j) Square(&x, &x);\n+    Multiply(&x, &x, &p[0]);\n+    for (int j = 0; j < 4; ++j) Square(&x, &x);\n+    Multiply(&x, &x, &p[1]);\n+    for (int j = 0; j < 3; ++j) Square(&x, &x);\n+    Multiply(&x, &x, &p[0]);\n+\n+    *out = x;\n+}\n+\n+}\n+\n+MuHash3072::MuHash3072() noexcept\n+{\n+    data.limbs[0] = 1;\n+    for (int i = 1; i < Num3072::LIMBS; ++i) data.limbs[i] = 0;\n+}\n+\n+MuHash3072::MuHash3072(const unsigned char* key32) noexcept\n+{\n+    unsigned char tmp[384];\n+    ChaCha20(key32, 32).Keystream(tmp, 384);\n+    for (int i = 0; i < Num3072::LIMBS; ++i) {\n+        if (sizeof(Num3072::limb_type) == 4) {\n+            data.limbs[i] = ReadLE32(tmp + 4 * i);\n+        } else if (sizeof(Num3072::limb_type) == 8) {\n+            data.limbs[i] = ReadLE64(tmp + 8 * i);\n+        }\n+    }\n+}\n+\n+void MuHash3072::Finalize(unsigned char* hash384) noexcept\n+{\n+    if (IsOverflow(&data)) FullReduce(&data);\n+    for (int i = 0; i < Num3072::LIMBS; ++i) {\n+        if (sizeof(Num3072::limb_type) == 4) {\n+            WriteLE32(hash384 + i * 4, data.limbs[i]);\n+        } else if (sizeof(Num3072::limb_type) == 8) {\n+            WriteLE64(hash384 + i * 8, data.limbs[i]);\n+        }\n+    }\n+}\n+\n+MuHash3072& MuHash3072::operator*=(const MuHash3072& x) noexcept\n+{\n+    Multiply(&this->data, &this->data, &x.data);\n+    return *this;\n+}\n+\n+MuHash3072& MuHash3072::operator/=(const MuHash3072& x) noexcept\n+{\n+    Num3072 tmp;\n+    Inverse(&tmp, &x.data);\n+    Multiply(&this->data, &this->data, &tmp);\n+    return *this;\n+}"
      },
      {
        "sha": "890d78d78bff15b660fc4aab8fd284f0d58a074f",
        "filename": "src/crypto/muhash.h",
        "status": "added",
        "additions": 69,
        "deletions": 0,
        "changes": 69,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c46296006b2c4985c46a3219a813766614803737/src/crypto/muhash.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c46296006b2c4985c46a3219a813766614803737/src/crypto/muhash.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/muhash.h?ref=c46296006b2c4985c46a3219a813766614803737",
        "patch": "@@ -0,0 +1,69 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CRYPTO_MUHASH_H\n+#define BITCOIN_CRYPTO_MUHASH_H\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <stdint.h>\n+\n+struct Num3072 {\n+#ifdef HAVE___INT128\n+    typedef unsigned __int128 double_limb_type;\n+    typedef uint64_t limb_type;\n+    static constexpr int LIMBS = 48;\n+    static constexpr int LIMB_SIZE = 64;\n+#else\n+    typedef uint64_t double_limb_type;\n+    typedef uint32_t limb_type;\n+    static constexpr int LIMBS = 96;\n+    static constexpr int LIMB_SIZE = 32;\n+#endif\n+    limb_type limbs[LIMBS];\n+};\n+\n+/** A class representing MuHash sets\n+ *\n+ * MuHash is a hashing algorithm that supports adding set elements in any\n+ * order but also deleting in any order. As a result, it can maintain a\n+ * running sum for a set of data as a whole, and add/subtract when data\n+ * is added to or removed from it. A downside of MuHash is that computing\n+ * an inverse is relatively expensive. This can be solved by representing\n+ * the running value as a fraction, and multiplying added elements into\n+ * the numerator and removed elements into the denominator. Only when the\n+ * final hash is desired, a single modular inverse and multiplication is\n+ * needed to combine the two.\n+ *\n+ * As the update operations are also associative, H(a)+H(b)+H(c)+H(d) can\n+ * in fact be computed as (H(a)+H(b)) + (H(c)+H(d)). This implies that\n+ * all of this is perfectly parallellizable: each thread can process an\n+ * arbitrary subset of the update operations, allowing them to be\n+ * efficiently combined later.\n+ */\n+class MuHash3072\n+{\n+private:\n+    Num3072 data;\n+\n+public:\n+    /* The empty set. */\n+    MuHash3072() noexcept;\n+\n+    /* A singleton with a single 32-byte key in it. */\n+    explicit MuHash3072(const unsigned char* key32) noexcept;\n+\n+    /* Multiply (resulting in a hash for the union of the sets) */\n+    MuHash3072& operator*=(const MuHash3072& add) noexcept;\n+\n+    /* Divide (resulting in a hash for the difference of the sets) */\n+    MuHash3072& operator/=(const MuHash3072& sub) noexcept;\n+\n+    /* Finalize into a 384-byte hash. Does not change this object's value. */\n+    void Finalize(unsigned char* hash384) noexcept;\n+};\n+\n+#endif // BITCOIN_CRYPTO_MUHASH_H"
      },
      {
        "sha": "7300e00383325637b0c0f802f5b33da15f0ebb7b",
        "filename": "src/test/crypto_tests.cpp",
        "status": "modified",
        "additions": 55,
        "deletions": 0,
        "changes": 55,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c46296006b2c4985c46a3219a813766614803737/src/test/crypto_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c46296006b2c4985c46a3219a813766614803737/src/test/crypto_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/crypto_tests.cpp?ref=c46296006b2c4985c46a3219a813766614803737",
        "patch": "@@ -13,6 +13,7 @@\n #include <crypto/sha1.h>\n #include <crypto/sha256.h>\n #include <crypto/sha512.h>\n+#include <crypto/muhash.h>\n #include <random.h>\n #include <test/util/setup_common.h>\n #include <util/strencodings.h>\n@@ -750,4 +751,58 @@ BOOST_AUTO_TEST_CASE(sha256d64)\n     }\n }\n \n+static MuHash3072 FromInt(unsigned char i) {\n+    unsigned char tmp[32] = {i, 0};\n+    return MuHash3072(tmp);\n+}\n+\n+BOOST_AUTO_TEST_CASE(muhash_tests)\n+{\n+    unsigned char out[384];\n+\n+    for (int iter = 0; iter < 10; ++iter) {\n+        unsigned char res[384];\n+        int table[4];\n+        for (int i = 0; i < 4; ++i) {\n+            table[i] = g_insecure_rand_ctx.randbits(3);\n+        }\n+        for (int order = 0; order < 4; ++order) {\n+            MuHash3072 acc;\n+            for (int i = 0; i < 4; ++i) {\n+                int t = table[i ^ order];\n+                if (t & 4) {\n+                    acc /= FromInt(t & 3);\n+                } else {\n+                    acc *= FromInt(t & 3);\n+                }\n+            }\n+            acc.Finalize(out);\n+            if (order == 0) {\n+                memcpy(res, out, 384);\n+            } else {\n+                BOOST_CHECK(memcmp(res, out, 384) == 0);\n+            }\n+        }\n+\n+        MuHash3072 x = FromInt(g_insecure_rand_ctx.randbits(4)); // x=X\n+        MuHash3072 y = FromInt(g_insecure_rand_ctx.randbits(4)); // x=X, y=Y\n+        MuHash3072 z; // x=X, y=Y, z=1\n+        z *= x; // x=X, y=Y, z=X\n+        z /= y; // x=X, y=Y, z=X/Y\n+        y /= x; // x=X, y=Y/X, z=X/Y\n+        z *= y; // x=X, y=Y/X, z=1\n+        z.Finalize(out);\n+        for (int i = 0; i < 384; ++i) {\n+            BOOST_CHECK_EQUAL(out[i], i == 0);\n+        }\n+    }\n+\n+    MuHash3072 acc = FromInt(0);\n+    acc *= FromInt(1);\n+    acc /= FromInt(2);\n+    acc.Finalize(out);\n+    uint256 x = (TruncatedSHA512Writer(SER_DISK, 0) << out).GetHash();\n+    BOOST_CHECK(x == uint256S(\"0e94c56c180f27fd6b182f091c5b007e2d6eba5ae28daa5aa92d2af8c26ea9a6\"));\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "df0a6e79ab412bb423da4c5c78713c486dba2026",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZjBhNmU3OWFiNDEyYmI0MjNkYTRjNWM3ODcxM2M0ODZkYmEyMDI2",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-06-30T18:15:17Z"
      },
      "committer": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2020-05-15T14:22:02Z"
      },
      "message": "Add x86_64 assembly optimization for MuHash",
      "tree": {
        "sha": "73a39464e72358ed77b5c3217e9a8fd13b7f3d17",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/73a39464e72358ed77b5c3217e9a8fd13b7f3d17"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/df0a6e79ab412bb423da4c5c78713c486dba2026",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQJJBAABCgAzFiEEtFq20ghhrCHSdrgm8T0enYkHmM0FAl6+pYoVHGZqYWhyQHBy\nb3Rvbm1haWwuY29tAAoJEPE9Hp2JB5jN+88P/RsYjN9i6uyRltdYSbJBgSTBT8p8\nVfw0p9aM0bC6yGtzzX4RStpiII0OWqUeuCX6/+EovaXKsYzvmMqsYB4rKwJkQXKG\nU4CsN9nKoqFaL53zJOfDRQA3U/Ih8bx/wtsw5ScYN3HGft/Pd7/+qn3tsm1lFfQ2\nq7coVK/4dU/tdqEkjiVbXDg8McEqiMpGcgxFZ/m4giiQi53i7ktL7kivkeYuWlPw\nRvajVkYYv0dvFllosPwq5aNeemRehXZQoWwajulXL/zpp3GQEgXxbU8QJYHivPAE\nmPqk7IwCBdiwKJD7qs8wWsu52p8iDNLTgCnf+PYrPuAHzD1Trst0lML6q2GZ0Ljo\nrDXl9ZR4zAKx67GK0iDAG/Ef6OyH2kuSEOLB9dY8lpjRry/HGyqTmE1g/iiGsDbv\ngffcqjP3SS0XghCxQpZmH8/XFzCVanPsF8FQlgiRwhHcMA3g1lmQ5r6va6XUia7i\ndJLJlwa9ESYctfGNJUe4UxG7YD1M1I7RXBTlsMlOkmy38EWcgw4HPaQvIBc0wQQ6\ne7SEzhoU051Iz/pMDU9wcxRp2r1htTOhDs/FpXg9VPVED7uAjuA6bEbAOzPdBQjs\nog16VtkJq7f6qBXFxwJYK5rM9t9NhJpJpGb6+Qzdc5bMVuW83k9PKfhTDwT8ABrK\nPJL/ly6891jipjH5\n=6pTa\n-----END PGP SIGNATURE-----",
        "payload": "tree 73a39464e72358ed77b5c3217e9a8fd13b7f3d17\nparent c46296006b2c4985c46a3219a813766614803737\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1498846517 -0700\ncommitter Fabian Jahr <fjahr@protonmail.com> 1589552522 +0200\n\nAdd x86_64 assembly optimization for MuHash\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df0a6e79ab412bb423da4c5c78713c486dba2026",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/df0a6e79ab412bb423da4c5c78713c486dba2026",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df0a6e79ab412bb423da4c5c78713c486dba2026/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c46296006b2c4985c46a3219a813766614803737",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c46296006b2c4985c46a3219a813766614803737",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c46296006b2c4985c46a3219a813766614803737"
      }
    ],
    "stats": {
      "total": 50,
      "additions": 50,
      "deletions": 0
    },
    "files": [
      {
        "sha": "9d9ab6d4c041145deca1a7ebb3c12b338d353a73",
        "filename": "src/crypto/muhash.cpp",
        "status": "modified",
        "additions": 50,
        "deletions": 0,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df0a6e79ab412bb423da4c5c78713c486dba2026/src/crypto/muhash.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df0a6e79ab412bb423da4c5c78713c486dba2026/src/crypto/muhash.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/muhash.cpp?ref=df0a6e79ab412bb423da4c5c78713c486dba2026",
        "patch": "@@ -29,6 +29,54 @@ namespace {\n     c1 = 0; \\\n }\n \n+#if defined(__amd64__) || defined(__x86_64__)\n+\n+/** [c0,c1] = a * b */\n+#define mul(c0,c1,a,b) { \\\n+    __asm__ (\"mulq %3\" : \"=d\"(c1), \"=a\"(c0) : \"a\"(a), \"g\"(b) : \"cc\"); \\\n+}\n+\n+/** [c0,c1,c2] += a * b */\n+#define muladd3(c0,c1,c2,a,b) { \\\n+    uint64_t tl, th; \\\n+    __asm__ (\"mulq %3\" : \"=a\"(tl), \"=d\"(th) : \"a\"(a), \"g\"(b) : \"cc\"); \\\n+    __asm__ (\"addq %3,%0; adcq %4,%1; adcq $0,%2\" : \"+r\"(c0), \"+r\"(c1), \"+r\"(c2) : \"a\"(tl), \"d\"(th) : \"cc\"); \\\n+}\n+\n+/** [c0,c1,c2] += 2 * a * b */\n+#define muldbladd3(c0,c1,c2,a,b) { \\\n+    uint64_t tl, th; \\\n+    __asm__ (\"mulq %3\" : \"=a\"(tl), \"=d\"(th) : \"a\"(a), \"g\"(b) : \"cc\"); \\\n+    __asm__ (\"addq %3,%0; adcq %4,%1; adcq $0,%2\" : \"+r\"(c0), \"+r\"(c1), \"+r\"(c2) : \"a\"(tl), \"d\"(th) : \"cc\"); \\\n+    __asm__ (\"addq %3,%0; adcq %4,%1; adcq $0,%2\" : \"+r\"(c0), \"+r\"(c1), \"+r\"(c2) : \"a\"(tl), \"d\"(th) : \"cc\"); \\\n+}\n+\n+/* [c0,c1,c2] += n * [d0,d1,d2]. c0 is initially 0 */\n+#define mulnadd3(c0,c1,c2,d0,d1,d2,n) { \\\n+    uint64_t tl1, th1, tl2, th2, tl3; \\\n+    __asm__ (\"mulq %3\" : \"=a\"(tl1), \"=d\"(th1) : \"a\"(d0), \"r\"((Num3072::limb_type)n) : \"cc\"); \\\n+    __asm__ (\"addq %3,%0; adcq %4,%1; adcq $0,%2\" : \"+r\"(c0), \"+r\"(c1), \"+r\"(c2) : \"g\"(tl1), \"g\"(th1) : \"cc\"); \\\n+    __asm__ (\"mulq %3\" : \"=a\"(tl2), \"=d\"(th2) : \"a\"(d1), \"r\"((Num3072::limb_type)n) : \"cc\"); \\\n+    __asm__ (\"addq %2,%0; adcq %3,%1\" : \"+r\"(c1), \"+r\"(c2) : \"g\"(tl2), \"g\"(th2) : \"cc\"); \\\n+    __asm__ (\"imulq %2,%1,%0\" : \"=r\"(tl3) : \"g\"(d2), \"i\"(n) : \"cc\"); \\\n+    __asm__ (\"addq %1,%0\" : \"+r\"(c2) : \"g\"(tl3) : \"cc\"); \\\n+}\n+\n+/* [c0,c1] *= n */\n+#define muln2(c0,c1,n) { \\\n+    uint64_t th; \\\n+    __asm__ (\"mulq %2\" : \"+a\"(c0), \"=d\"(th) : \"r\"((Num3072::limb_type)n) : \"cc\"); \\\n+    __asm__ (\"imul %1,%0,%0\" : \"+r\"(c1) : \"i\"(n) : \"cc\"); \\\n+    __asm__ (\"addq %1,%0\" : \"+r\"(c1) : \"g\"(th) : \"cc\"); \\\n+}\n+\n+/** [c0,c1] += a */\n+#define add2(c0,c1,a) { \\\n+    __asm__ (\"add %2,%0; adc $0,%1\" : \"+r\"(c0), \"+r\"(c1) : \"r\"(a) : \"cc\"); \\\n+}\n+\n+#else\n+\n /** [c0,c1] = a * b */\n #define mul(c0,c1,a,b) { \\\n     Num3072::double_limb_type t = (Num3072::double_limb_type)a * b; \\\n@@ -96,6 +144,8 @@ namespace {\n     c1 += (c0 < (a)) ? 1 : 0; \\\n }\n \n+#endif\n+\n bool IsOverflow(const Num3072* d)\n {\n     for (int i = 1; i < Num3072::LIMBS - 1; ++i) {"
      }
    ]
  },
  {
    "sha": "1a5928c3936b5f55fb61fb3648172dca68919dde",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYTU5MjhjMzkzNmI1ZjU1ZmI2MWZiMzY0ODE3MmRjYTY4OTE5ZGRl",
    "commit": {
      "author": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2020-01-24T19:09:36Z"
      },
      "committer": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2020-05-15T14:22:03Z"
      },
      "message": "crypto: Add serialization methods to Muhash",
      "tree": {
        "sha": "37fd406356bc02043d6829762363671f319e4cba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/37fd406356bc02043d6829762363671f319e4cba"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1a5928c3936b5f55fb61fb3648172dca68919dde",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQJJBAABCgAzFiEEtFq20ghhrCHSdrgm8T0enYkHmM0FAl6+pYsVHGZqYWhyQHBy\nb3Rvbm1haWwuY29tAAoJEPE9Hp2JB5jNqt8P/1bV+OhjgYlDMSFJ8aDoEfWspCzd\nNYsVJSwAlwmuTDwB0GXl9hyYHyiFmB3pnWRbMmrUAuzhaUyoFBTpxskjHSSFvkoH\n7FwMGk8XAJJLz1alKkulE+HiHaPWZmkNO+yIt9rhHZG1yQ2uoCL6qP1p+HWXRuDN\nnkT1JjLzNWsXfEaoAY5GCdu3Xm4I+36Kp25ll4s8wr287WA7/KE6XqcDy0FCBYNB\nRgVcnH3S9SVrmv1sYsH/Rj/oJCjKgqm3u/SLeASoE6etbSuLr7eY6oA/adegBTm8\ngC9ehtE4KCxaPqLc27Lh9DimdPS2HkNa43Q6pHbVVlkk8Njx8Zw8p4i8OmYmzdtS\nQr0/3/PgA2jS8wIZDlq28BL8OyQk7gk78LcV28lgXUiV6w8y+zVRYPd+dZVZ9rrx\nL07/eW+rpcsWPvjfLjVoZ+YegE2JeXdSrLcT6YvoOieGjjnY28g6b2CfEnSkAYz7\n90rclD1mT2VjaTi1rJUSctnQ2wjjPqIib11CjXfKAKuxLpY0Wek2RnZouFCj9J7D\nkh/DCtn/7MMo0IbCrEp+SK9ijjytqxy4HxBL4RIHC6nLqUX/+gliBw144/OKA1U7\n8pe29ZK9yBXtKByviajEGW0Sipxc6W4BbHz/lW4N5musknPWNozadufWwbJ9MeXz\nbJ3awsdl3FkEIORJ\n=p3Ml\n-----END PGP SIGNATURE-----",
        "payload": "tree 37fd406356bc02043d6829762363671f319e4cba\nparent df0a6e79ab412bb423da4c5c78713c486dba2026\nauthor Fabian Jahr <fjahr@protonmail.com> 1579892976 +0100\ncommitter Fabian Jahr <fjahr@protonmail.com> 1589552523 +0200\n\ncrypto: Add serialization methods to Muhash\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a5928c3936b5f55fb61fb3648172dca68919dde",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1a5928c3936b5f55fb61fb3648172dca68919dde",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a5928c3936b5f55fb61fb3648172dca68919dde/comments",
    "author": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "df0a6e79ab412bb423da4c5c78713c486dba2026",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df0a6e79ab412bb423da4c5c78713c486dba2026",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/df0a6e79ab412bb423da4c5c78713c486dba2026"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 10,
      "deletions": 0
    },
    "files": [
      {
        "sha": "57fafcc3d1ac48adb1d39ac1d32852837b267e47",
        "filename": "src/crypto/muhash.h",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a5928c3936b5f55fb61fb3648172dca68919dde/src/crypto/muhash.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a5928c3936b5f55fb61fb3648172dca68919dde/src/crypto/muhash.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/muhash.h?ref=1a5928c3936b5f55fb61fb3648172dca68919dde",
        "patch": "@@ -9,6 +9,7 @@\n #include <config/bitcoin-config.h>\n #endif\n \n+#include <serialize.h>\n #include <stdint.h>\n \n struct Num3072 {\n@@ -64,6 +65,15 @@ class MuHash3072\n \n     /* Finalize into a 384-byte hash. Does not change this object's value. */\n     void Finalize(unsigned char* hash384) noexcept;\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        for(int i = 0; i<data.LIMBS; i++) {\n+            READWRITE(data.limbs[i]);\n+        }\n+    }\n };\n \n #endif // BITCOIN_CRYPTO_MUHASH_H"
      }
    ]
  },
  {
    "sha": "58426412f0ffaa6f8d77719b764f74b17291a2b1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ODQyNjQxMmYwZmZhYTZmOGQ3NzcxOWI3NjRmNzRiMTcyOTFhMmIx",
    "commit": {
      "author": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2019-11-08T17:15:11Z"
      },
      "committer": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2020-05-15T14:22:03Z"
      },
      "message": "bench: Add seperate benchmarks for Muhash precompute, add and div",
      "tree": {
        "sha": "ab782aaf22c15b0508018076371f477d570c4882",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ab782aaf22c15b0508018076371f477d570c4882"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/58426412f0ffaa6f8d77719b764f74b17291a2b1",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQJJBAABCgAzFiEEtFq20ghhrCHSdrgm8T0enYkHmM0FAl6+pYsVHGZqYWhyQHBy\nb3Rvbm1haWwuY29tAAoJEPE9Hp2JB5jNniYP/Ra2MrmWGx2kiCzhTf8iA3e+Z127\neiLY+wdvJZI4FDfm+4DCpeUS0+6xvfPy9eRWu8j+i6AOboVWt5zT1xr8sqg/5wto\niUbPGR323M3oXxWIyLOpUc/eaheC+uZ2FXBLDOz/j9CYuvWZq0wIS5rOmuDIUn95\nY/0dcoViGmELGUk6Ktn5nclYZ0Ufd+khgw7cVhf10BD49TIgI37/hv3Ce3pgNqOK\nLZaLKVwMih5d/nSMDdiC+fMx0VEBYe59eFdAKN0WYFckNh4SJLm6cYWYM3JE2Ar9\nHwqaGvYebBy3ycE9uGJ3/MIrfY24jXvsBDl2Xc/7fPCeecXxmMya4a1efIL2KqWl\nasMm4dahsu2Om1rlb1Js1MPgKRbt4kDJmGMGChNGMfeE4GmGKiul191x+hPFBGAg\nR+CJ6txXOW9q2Pk9HKiEO1Kz5zpXnQE5ScLT0IBSaAqHm+K9xUFgZ7kymLKVsctl\nds4+Qo5Md40p0ZIv4mvGf6lzAqviI9NHKxm4BNoMplv9XBPiJiIvCmC7z1eNu7dm\nw9l8Vjc2KfqzN9tvIgiEgfek2UVWauLa2UWjApyXh9RZ8WiVla+2qBPHv95bPWMI\nvN51jjajoKNsaRobPiOYQv3CIL+ydqOWc4UmIe79JjtAAJ8OodD4ZaOnphuR35l3\nXC4H9zSC5exLyWwv\n=WTZh\n-----END PGP SIGNATURE-----",
        "payload": "tree ab782aaf22c15b0508018076371f477d570c4882\nparent 1a5928c3936b5f55fb61fb3648172dca68919dde\nauthor Fabian Jahr <fjahr@protonmail.com> 1573233311 +0000\ncommitter Fabian Jahr <fjahr@protonmail.com> 1589552523 +0200\n\nbench: Add seperate benchmarks for Muhash precompute, add and div\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/58426412f0ffaa6f8d77719b764f74b17291a2b1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/58426412f0ffaa6f8d77719b764f74b17291a2b1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/58426412f0ffaa6f8d77719b764f74b17291a2b1/comments",
    "author": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1a5928c3936b5f55fb61fb3648172dca68919dde",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a5928c3936b5f55fb61fb3648172dca68919dde",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1a5928c3936b5f55fb61fb3648172dca68919dde"
      }
    ],
    "stats": {
      "total": 55,
      "additions": 55,
      "deletions": 0
    },
    "files": [
      {
        "sha": "a88f8806a80624e74719544bbc58e5113727293b",
        "filename": "src/bench/crypto_hash.cpp",
        "status": "modified",
        "additions": 55,
        "deletions": 0,
        "changes": 55,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/58426412f0ffaa6f8d77719b764f74b17291a2b1/src/bench/crypto_hash.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/58426412f0ffaa6f8d77719b764f74b17291a2b1/src/bench/crypto_hash.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/crypto_hash.cpp?ref=58426412f0ffaa6f8d77719b764f74b17291a2b1",
        "patch": "@@ -104,6 +104,58 @@ static void MuHash(benchmark::State& state)\n     }\n }\n \n+static void MuHashPrecompute(benchmark::State& state)\n+{\n+    FastRandomContext rng(true);\n+    MuHash3072 acc;\n+    unsigned char key[32];\n+    std::vector<unsigned char> randkey = rng.randbytes(32);\n+    for (size_t i = 0; i < randkey.size(); i++) {\n+        key[i] = randkey[i];\n+    }\n+\n+    while (state.KeepRunning()) {\n+        MuHash3072{key};\n+    }\n+}\n+\n+static void MuHashAdd(benchmark::State& state)\n+{\n+    FastRandomContext rng(true);\n+    MuHash3072 acc;\n+    unsigned char key[32];\n+    std::vector<unsigned char> randkey = rng.randbytes(32);\n+    for (size_t i = 0; i < randkey.size(); i++) {\n+        key[i] = randkey[i];\n+    }\n+\n+    MuHash3072 muhash = MuHash3072(key);\n+    while (state.KeepRunning()) {\n+        acc *= muhash;\n+    }\n+}\n+\n+static void MuHashDiv(benchmark::State& state)\n+{\n+    FastRandomContext rng(true);\n+    MuHash3072 acc;\n+    unsigned char key[32];\n+    std::vector<unsigned char> randkey = rng.randbytes(32);\n+    for (size_t i = 0; i < randkey.size(); i++) {\n+        key[i] = randkey[i];\n+    }\n+\n+    MuHash3072 muhash = MuHash3072(key);\n+\n+    for (size_t i = 0; i < state.m_num_iters; i++) {\n+        acc *= muhash;\n+    }\n+\n+    while (state.KeepRunning()) {\n+        acc /= muhash;\n+    }\n+}\n+\n BENCHMARK(RIPEMD160, 440);\n BENCHMARK(SHA1, 570);\n BENCHMARK(SHA256, 340);\n@@ -116,3 +168,6 @@ BENCHMARK(FastRandom_32bit, 110 * 1000 * 1000);\n BENCHMARK(FastRandom_1bit, 440 * 1000 * 1000);\n \n BENCHMARK(MuHash, 5000);\n+BENCHMARK(MuHashPrecompute, 5000);\n+BENCHMARK(MuHashAdd, 5000);\n+BENCHMARK(MuHashDiv, 100);"
      }
    ]
  },
  {
    "sha": "8e7c45da95c5581ce3d4cee0265a42b8963f02eb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZTdjNDVkYTk1YzU1ODFjZTNkNGNlZTAyNjVhNDJiODk2M2YwMmVi",
    "commit": {
      "author": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2020-03-06T21:45:48Z"
      },
      "committer": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2020-05-15T14:22:03Z"
      },
      "message": "coinstats: Remove tracking of transaction count in UTXO set\n\nTracking this metric would be very complicated to implement when\nusing a coinstatsindex and it does not seem to be used for anything\nmeaningful.",
      "tree": {
        "sha": "abedaf4aec18b6b397ad686f2a636d72e8ae5c18",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/abedaf4aec18b6b397ad686f2a636d72e8ae5c18"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8e7c45da95c5581ce3d4cee0265a42b8963f02eb",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQJJBAABCgAzFiEEtFq20ghhrCHSdrgm8T0enYkHmM0FAl6+pYsVHGZqYWhyQHBy\nb3Rvbm1haWwuY29tAAoJEPE9Hp2JB5jN8doP/3f0ULYfbhs0IMWRA8cfXMjdtYR8\ne8nd36B1MfXoZb2Shp1rYS1XzRoz0nINt7L2Dt0jLh+U27NQMNPUrUq4n83xFWXb\n2b3RPkOoRRbi9DnSzgBQcLV4BK7pIblQBOaAwNkb1rQO8lczJRinxq1s5/z/5YQ7\nazjB7PCsqoA2BTjSWwexKVxe3xipOrt6Ce1wRC7XbRX5vmschUpiLW9AqK7tdDmU\nq/y3M+qww4tVh7n1xaBJynCbpeIjnak2AKol9XMyQAQR56v29TVcZp0vD2fetq7/\nRTdwD5d+s14/dby/1hasM7Dke7iFrywWKkp9Wl2goHsrV470u+oCPW4froSuw7W3\nVxIZQRyrvqRJcEGAc0Bbx800MuBjYycn6Sd293g6qhPp/GGyrQJai1m1iOYSXktm\nqysT+FH5ie0i2CslUfuL5YXLAt9IXopq3/+/h+AtNQk7aZavXw0Jn5Ts4xNPtrD/\nkobJzSg3uHXZnZ8e7PpGbKNONUAi9lESe26FWbLVTq43Pyq3DgXgqzs4aA2Qm2TD\nwtzfU1kuyH1gumxUT3mZ6IJH848uIBU7G8zbqWl6Tvr6WFIR2pD3u+h+dk/DSNBq\nahSZLCEYZyCxrHujkZ91OvuAymV+/2cYTmcnGUA7WAOb0oNBYvAdN3Lk9d301Rs5\nK/pkCjaKNHqR8qZe\n=iJ+K\n-----END PGP SIGNATURE-----",
        "payload": "tree abedaf4aec18b6b397ad686f2a636d72e8ae5c18\nparent 58426412f0ffaa6f8d77719b764f74b17291a2b1\nauthor Fabian Jahr <fjahr@protonmail.com> 1583531148 +0100\ncommitter Fabian Jahr <fjahr@protonmail.com> 1589552523 +0200\n\ncoinstats: Remove tracking of transaction count in UTXO set\n\nTracking this metric would be very complicated to implement when\nusing a coinstatsindex and it does not seem to be used for anything\nmeaningful.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8e7c45da95c5581ce3d4cee0265a42b8963f02eb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8e7c45da95c5581ce3d4cee0265a42b8963f02eb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8e7c45da95c5581ce3d4cee0265a42b8963f02eb/comments",
    "author": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "58426412f0ffaa6f8d77719b764f74b17291a2b1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/58426412f0ffaa6f8d77719b764f74b17291a2b1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/58426412f0ffaa6f8d77719b764f74b17291a2b1"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 0,
      "deletions": 6
    },
    "files": [
      {
        "sha": "08944ab7d4370ab79dfc255d80cd40d7792ce248",
        "filename": "src/node/coinstats.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8e7c45da95c5581ce3d4cee0265a42b8963f02eb/src/node/coinstats.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8e7c45da95c5581ce3d4cee0265a42b8963f02eb/src/node/coinstats.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/coinstats.cpp?ref=8e7c45da95c5581ce3d4cee0265a42b8963f02eb",
        "patch": "@@ -19,7 +19,6 @@ static void ApplyStats(CCoinsStats &stats, CHashWriter& ss, const uint256& hash,\n     assert(!outputs.empty());\n     ss << hash;\n     ss << VARINT(outputs.begin()->second.nHeight * 2 + outputs.begin()->second.fCoinBase ? 1u : 0u);\n-    stats.nTransactions++;\n     for (const auto& output : outputs) {\n         ss << VARINT(output.first + 1);\n         ss << output.second.out.scriptPubKey;"
      },
      {
        "sha": "6f2f0b0eacd542f768b5c49c2468d751648143b7",
        "filename": "src/node/coinstats.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8e7c45da95c5581ce3d4cee0265a42b8963f02eb/src/node/coinstats.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8e7c45da95c5581ce3d4cee0265a42b8963f02eb/src/node/coinstats.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/coinstats.h?ref=8e7c45da95c5581ce3d4cee0265a42b8963f02eb",
        "patch": "@@ -17,7 +17,6 @@ struct CCoinsStats\n {\n     int nHeight{0};\n     uint256 hashBlock{};\n-    uint64_t nTransactions{0};\n     uint64_t nTransactionOutputs{0};\n     uint64_t nBogoSize{0};\n     uint256 hashSerialized{};"
      },
      {
        "sha": "3524c6a9789b7b7604bfa1f9f43fb9710e024bbb",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8e7c45da95c5581ce3d4cee0265a42b8963f02eb/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8e7c45da95c5581ce3d4cee0265a42b8963f02eb/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=8e7c45da95c5581ce3d4cee0265a42b8963f02eb",
        "patch": "@@ -960,7 +960,6 @@ static UniValue gettxoutsetinfo(const JSONRPCRequest& request)\n                     {\n                         {RPCResult::Type::NUM, \"height\", \"The current block height (index)\"},\n                         {RPCResult::Type::STR_HEX, \"bestblock\", \"The hash of the block at the tip of the chain\"},\n-                        {RPCResult::Type::NUM, \"transactions\", \"The number of transactions with unspent outputs\"},\n                         {RPCResult::Type::NUM, \"txouts\", \"The number of unspent transaction outputs\"},\n                         {RPCResult::Type::NUM, \"bogosize\", \"A meaningless metric for UTXO set size\"},\n                         {RPCResult::Type::STR_HEX, \"hash_serialized_2\", \"The serialized hash\"},\n@@ -982,7 +981,6 @@ static UniValue gettxoutsetinfo(const JSONRPCRequest& request)\n     if (GetUTXOStats(coins_view, stats)) {\n         ret.pushKV(\"height\", (int64_t)stats.nHeight);\n         ret.pushKV(\"bestblock\", stats.hashBlock.GetHex());\n-        ret.pushKV(\"transactions\", (int64_t)stats.nTransactions);\n         ret.pushKV(\"txouts\", (int64_t)stats.nTransactionOutputs);\n         ret.pushKV(\"bogosize\", (int64_t)stats.nBogoSize);\n         ret.pushKV(\"hash_serialized_2\", stats.hashSerialized.GetHex());"
      },
      {
        "sha": "cc5703d82b344acd566209b9505dcb0c823e052b",
        "filename": "test/functional/rpc_blockchain.py",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8e7c45da95c5581ce3d4cee0265a42b8963f02eb/test/functional/rpc_blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8e7c45da95c5581ce3d4cee0265a42b8963f02eb/test/functional/rpc_blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_blockchain.py?ref=8e7c45da95c5581ce3d4cee0265a42b8963f02eb",
        "patch": "@@ -208,7 +208,6 @@ def _test_gettxoutsetinfo(self):\n         res = node.gettxoutsetinfo()\n \n         assert_equal(res['total_amount'], Decimal('8725.00000000'))\n-        assert_equal(res['transactions'], 200)\n         assert_equal(res['height'], 200)\n         assert_equal(res['txouts'], 200)\n         assert_equal(res['bogosize'], 15000),\n@@ -224,7 +223,6 @@ def _test_gettxoutsetinfo(self):\n         node.invalidateblock(b1hash)\n \n         res2 = node.gettxoutsetinfo()\n-        assert_equal(res2['transactions'], 0)\n         assert_equal(res2['total_amount'], Decimal('0'))\n         assert_equal(res2['height'], 0)\n         assert_equal(res2['txouts'], 0)"
      }
    ]
  },
  {
    "sha": "dfba5c2bfa7e6e2546f2d959834d43fcc169786b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZmJhNWMyYmZhN2U2ZTI1NDZmMmQ5NTk4MzRkNDNmY2MxNjk3ODZi",
    "commit": {
      "author": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2020-03-06T21:52:25Z"
      },
      "committer": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2020-05-15T14:22:03Z"
      },
      "message": "coinstats: Use Muhash to calculate UTXO set hash",
      "tree": {
        "sha": "20ec164ff453b411ab960479d275a98bcf253cef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/20ec164ff453b411ab960479d275a98bcf253cef"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dfba5c2bfa7e6e2546f2d959834d43fcc169786b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQJJBAABCgAzFiEEtFq20ghhrCHSdrgm8T0enYkHmM0FAl6+pYsVHGZqYWhyQHBy\nb3Rvbm1haWwuY29tAAoJEPE9Hp2JB5jNF38P/AheCF4kNteWDRCnvpOik9yhGjvX\na2R6ArdmFAEs+VxB3JBNwMoCWNA3Rjk4FNQlzBPZxH/ZzEz+lhiQW49ew1v5L4w8\nTMUs6V3qPYD/s7TfC/06sl/3SR2XWZT/0f5hriNGJcn0tZLY4Vr0AMEQyTC4AMmM\nEKz74JVreYOryUOG1/eJY71TUISFWZo79QNaxa+P6pxn+8vaH5T0HvwkQw/FMNqt\nCwxm422JLzXBoZ+EnrJc+GIyB6vz86xHYBMqhf8aQE/DKm6w503VwI8R1B5jIpIl\n8sGXUjFhLqlm91GnMgNyZN4tzL0vXOwtFp7q8DaI6ar9e6EXH82AbdEIcms0KHMb\nXWZEAcrow5acMuwquiXYBIQ4EenhevztmwsKcdRLCBzb1qYHXf+gvexo78eakpWy\n6xLA2ytCKJZME7gy5mNXFzLNr3+tepDqK9a9jKgMlhJaW++9MdcAMHElO7Y3ZCKe\nHEaBDu9ZeZYfIcSHDeUBFc1CI6sY9YNaByV+bG0N+gsvZB0L1ppx3tpI4LyCBgZl\nluz4feo2F3nV83hcpHQbKptqsx985m7Gu6Ca3E+tydU4oj/NkjS2NWSHY4uqjwSk\n4BMojsFZgQTBRRYYKpQzHN+IFeXblT1JIL4ZaFqt4VSTppGSijXHiDztp5BMrc6j\nQiq4zN9n18zf33S/\n=ViAS\n-----END PGP SIGNATURE-----",
        "payload": "tree 20ec164ff453b411ab960479d275a98bcf253cef\nparent 8e7c45da95c5581ce3d4cee0265a42b8963f02eb\nauthor Fabian Jahr <fjahr@protonmail.com> 1583531545 +0100\ncommitter Fabian Jahr <fjahr@protonmail.com> 1589552523 +0200\n\ncoinstats: Use Muhash to calculate UTXO set hash\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dfba5c2bfa7e6e2546f2d959834d43fcc169786b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dfba5c2bfa7e6e2546f2d959834d43fcc169786b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dfba5c2bfa7e6e2546f2d959834d43fcc169786b/comments",
    "author": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8e7c45da95c5581ce3d4cee0265a42b8963f02eb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8e7c45da95c5581ce3d4cee0265a42b8963f02eb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8e7c45da95c5581ce3d4cee0265a42b8963f02eb"
      }
    ],
    "stats": {
      "total": 49,
      "additions": 28,
      "deletions": 21
    },
    "files": [
      {
        "sha": "d1e69fcbf7aed6eeaace3ff6461cfdaade4958ba",
        "filename": "src/node/coinstats.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 13,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dfba5c2bfa7e6e2546f2d959834d43fcc169786b/src/node/coinstats.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dfba5c2bfa7e6e2546f2d959834d43fcc169786b/src/node/coinstats.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/coinstats.cpp?ref=dfba5c2bfa7e6e2546f2d959834d43fcc169786b",
        "patch": "@@ -6,29 +6,33 @@\n #include <node/coinstats.h>\n \n #include <coins.h>\n+#include <crypto/muhash.h>\n #include <hash.h>\n #include <serialize.h>\n-#include <validation.h>\n #include <uint256.h>\n #include <util/system.h>\n+#include <validation.h>\n \n #include <map>\n \n-static void ApplyStats(CCoinsStats &stats, CHashWriter& ss, const uint256& hash, const std::map<uint32_t, Coin>& outputs)\n+static void ApplyStats(CCoinsStats &stats, MuHash3072& muhash, const uint256& hash, const std::map<uint32_t, Coin>& outputs)\n {\n     assert(!outputs.empty());\n-    ss << hash;\n-    ss << VARINT(outputs.begin()->second.nHeight * 2 + outputs.begin()->second.fCoinBase ? 1u : 0u);\n     for (const auto& output : outputs) {\n-        ss << VARINT(output.first + 1);\n-        ss << output.second.out.scriptPubKey;\n-        ss << VARINT_MODE(output.second.out.nValue, VarIntMode::NONNEGATIVE_SIGNED);\n+        COutPoint outpoint = COutPoint(hash, output.first);\n+        Coin coin = output.second;\n+\n+        TruncatedSHA512Writer ss(SER_DISK, 0);\n+        ss << outpoint;\n+        ss << (uint32_t)(coin.nHeight * 2 + coin.fCoinBase);\n+        ss << coin.out;\n+        muhash *= MuHash3072(ss.GetHash().begin());\n+\n         stats.nTransactionOutputs++;\n         stats.nTotalAmount += output.second.out.nValue;\n         stats.nBogoSize += 32 /* txid */ + 4 /* vout index */ + 4 /* height + coinbase */ + 8 /* amount */ +\n                            2 /* scriptPubKey len */ + output.second.out.scriptPubKey.size() /* scriptPubKey */;\n     }\n-    ss << VARINT(0u);\n }\n \n //! Calculate statistics about the unspent transaction output set\n@@ -38,21 +42,20 @@ bool GetUTXOStats(CCoinsView *view, CCoinsStats &stats)\n     std::unique_ptr<CCoinsViewCursor> pcursor(view->Cursor());\n     assert(pcursor);\n \n-    CHashWriter ss(SER_GETHASH, PROTOCOL_VERSION);\n+    MuHash3072 muhash;\n     stats.hashBlock = pcursor->GetBestBlock();\n     {\n         LOCK(cs_main);\n         stats.nHeight = LookupBlockIndex(stats.hashBlock)->nHeight;\n     }\n-    ss << stats.hashBlock;\n     uint256 prevkey;\n     std::map<uint32_t, Coin> outputs;\n     while (pcursor->Valid()) {\n         COutPoint key;\n         Coin coin;\n         if (pcursor->GetKey(key) && pcursor->GetValue(coin)) {\n             if (!outputs.empty() && key.hash != prevkey) {\n-                ApplyStats(stats, ss, prevkey, outputs);\n+                ApplyStats(stats, muhash, prevkey, outputs);\n                 outputs.clear();\n             }\n             prevkey = key.hash;\n@@ -64,9 +67,13 @@ bool GetUTXOStats(CCoinsView *view, CCoinsStats &stats)\n         pcursor->Next();\n     }\n     if (!outputs.empty()) {\n-        ApplyStats(stats, ss, prevkey, outputs);\n+        ApplyStats(stats, muhash, prevkey, outputs);\n     }\n-    stats.hashSerialized = ss.GetHash();\n+\n+    unsigned char out[384];\n+    muhash.Finalize(out);\n+    stats.hashSerialized = (TruncatedSHA512Writer(SER_DISK, 0) << out).GetHash();\n+\n     stats.nDiskSize = view->EstimateSize();\n     return true;\n }"
      },
      {
        "sha": "7da50e5481ff4d6db305f9a06fe06c2224ae60bb",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dfba5c2bfa7e6e2546f2d959834d43fcc169786b/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dfba5c2bfa7e6e2546f2d959834d43fcc169786b/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=dfba5c2bfa7e6e2546f2d959834d43fcc169786b",
        "patch": "@@ -962,7 +962,7 @@ static UniValue gettxoutsetinfo(const JSONRPCRequest& request)\n                         {RPCResult::Type::STR_HEX, \"bestblock\", \"The hash of the block at the tip of the chain\"},\n                         {RPCResult::Type::NUM, \"txouts\", \"The number of unspent transaction outputs\"},\n                         {RPCResult::Type::NUM, \"bogosize\", \"A meaningless metric for UTXO set size\"},\n-                        {RPCResult::Type::STR_HEX, \"hash_serialized_2\", \"The serialized hash\"},\n+                        {RPCResult::Type::STR_HEX, \"utxo_set_hash\", \"The serialized hash\"},\n                         {RPCResult::Type::NUM, \"disk_size\", \"The estimated size of the chainstate on disk\"},\n                         {RPCResult::Type::STR_AMOUNT, \"total_amount\", \"The total amount\"},\n                     }},\n@@ -983,7 +983,7 @@ static UniValue gettxoutsetinfo(const JSONRPCRequest& request)\n         ret.pushKV(\"bestblock\", stats.hashBlock.GetHex());\n         ret.pushKV(\"txouts\", (int64_t)stats.nTransactionOutputs);\n         ret.pushKV(\"bogosize\", (int64_t)stats.nBogoSize);\n-        ret.pushKV(\"hash_serialized_2\", stats.hashSerialized.GetHex());\n+        ret.pushKV(\"utxo_set_hash\", stats.hashSerialized.GetHex());\n         ret.pushKV(\"disk_size\", stats.nDiskSize);\n         ret.pushKV(\"total_amount\", ValueFromAmount(stats.nTotalAmount));\n     } else {"
      },
      {
        "sha": "83ba079af8ebff9c2d0c1cdf02b606bde5a70c22",
        "filename": "test/functional/feature_dbcrash.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dfba5c2bfa7e6e2546f2d959834d43fcc169786b/test/functional/feature_dbcrash.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dfba5c2bfa7e6e2546f2d959834d43fcc169786b/test/functional/feature_dbcrash.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_dbcrash.py?ref=dfba5c2bfa7e6e2546f2d959834d43fcc169786b",
        "patch": "@@ -90,7 +90,7 @@ def restart_node(self, node_index, expected_tip):\n                 # Any of these RPC calls could throw due to node crash\n                 self.start_node(node_index)\n                 self.nodes[node_index].waitforblock(expected_tip)\n-                utxo_hash = self.nodes[node_index].gettxoutsetinfo()['hash_serialized_2']\n+                utxo_hash = self.nodes[node_index].gettxoutsetinfo()['utxo_set_hash']\n                 return utxo_hash\n             except:\n                 # An exception here should mean the node is about to crash.\n@@ -135,7 +135,7 @@ def sync_node3blocks(self, block_hashes):\n         If any nodes crash while updating, we'll compare utxo hashes to\n         ensure recovery was successful.\"\"\"\n \n-        node3_utxo_hash = self.nodes[3].gettxoutsetinfo()['hash_serialized_2']\n+        node3_utxo_hash = self.nodes[3].gettxoutsetinfo()['utxo_set_hash']\n \n         # Retrieve all the blocks from node3\n         blocks = []\n@@ -177,12 +177,12 @@ def verify_utxo_hash(self):\n         \"\"\"Verify that the utxo hash of each node matches node3.\n \n         Restart any nodes that crash while querying.\"\"\"\n-        node3_utxo_hash = self.nodes[3].gettxoutsetinfo()['hash_serialized_2']\n+        node3_utxo_hash = self.nodes[3].gettxoutsetinfo()['utxo_set_hash']\n         self.log.info(\"Verifying utxo hash matches for all nodes\")\n \n         for i in range(3):\n             try:\n-                nodei_utxo_hash = self.nodes[i].gettxoutsetinfo()['hash_serialized_2']\n+                nodei_utxo_hash = self.nodes[i].gettxoutsetinfo()['utxo_set_hash']\n             except OSError:\n                 # probably a crash on db flushing\n                 nodei_utxo_hash = self.restart_node(i, self.nodes[3].getbestblockhash())"
      },
      {
        "sha": "0f353a658d37298bdd34d1297a2831360ce3b0e0",
        "filename": "test/functional/rpc_blockchain.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dfba5c2bfa7e6e2546f2d959834d43fcc169786b/test/functional/rpc_blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dfba5c2bfa7e6e2546f2d959834d43fcc169786b/test/functional/rpc_blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_blockchain.py?ref=dfba5c2bfa7e6e2546f2d959834d43fcc169786b",
        "patch": "@@ -216,7 +216,7 @@ def _test_gettxoutsetinfo(self):\n         assert size > 6400\n         assert size < 64000\n         assert_equal(len(res['bestblock']), 64)\n-        assert_equal(len(res['hash_serialized_2']), 64)\n+        assert_equal(len(res['utxo_set_hash']), 64)\n \n         self.log.info(\"Test that gettxoutsetinfo() works for blockchain with just the genesis block\")\n         b1hash = node.getblockhash(1)\n@@ -228,7 +228,7 @@ def _test_gettxoutsetinfo(self):\n         assert_equal(res2['txouts'], 0)\n         assert_equal(res2['bogosize'], 0),\n         assert_equal(res2['bestblock'], node.getblockhash(0))\n-        assert_equal(len(res2['hash_serialized_2']), 64)\n+        assert_equal(len(res2['utxo_set_hash']), 64)\n \n         self.log.info(\"Test that gettxoutsetinfo() returns the same result after invalidate/reconsider block\")\n         node.reconsiderblock(b1hash)"
      }
    ]
  },
  {
    "sha": "c092588cfa50983b25d236f6ce603ab9c66007d7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMDkyNTg4Y2ZhNTA5ODNiMjVkMjM2ZjZjZTYwM2FiOWM2NjAwN2Q3",
    "commit": {
      "author": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2020-05-14T14:24:23Z"
      },
      "committer": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2020-05-15T14:22:03Z"
      },
      "message": "coinstats: Extract GetTruncatedSHA512Hash function\n\nThis makes it possible to reuse this code in coinstatsindex.",
      "tree": {
        "sha": "735d9f2997d0d2d40b23eaaf21cba82bb100ad67",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/735d9f2997d0d2d40b23eaaf21cba82bb100ad67"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c092588cfa50983b25d236f6ce603ab9c66007d7",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQJJBAABCgAzFiEEtFq20ghhrCHSdrgm8T0enYkHmM0FAl6+pYsVHGZqYWhyQHBy\nb3Rvbm1haWwuY29tAAoJEPE9Hp2JB5jNRDsP/1QtpklbQ0EJXwk3FlICsJFeBWGV\nuzSx+ch6oJhFLGuRzjTGwcEaDtvsIx6+daaBV8D5q9Co9ocqEicwcZDe3fdvZCKB\ns8sNx0PPH1WNsTUTkd/bR4PGWAMZXnMRXOE7D26YLuAGTcBtcLQkSYwixQze2D5m\n9BEXxZtAZ7T6RjJZXu/ImB3XWmdgI/+/fK0BgUVrRqKKjVMw85mkXDUn6xcSajLC\n8nIJ43xBXzktiJO5tT4uk7/S0TI0quu/nEkb6yyF1ra/n4JDk2a9n/7vJwLNdlML\nrUMlx0BXMxrE7fBaO0cSa6sOhFCh9ycETuPpdEU0UTcAz1ABB5bu9cHbJnbwUI6m\n35kgqXAF5gAc/q0o9qedPtrHPzkai4kGxGEWe7At+slVN+xbx8/nHR7IuInUylhD\nJYrJiVxsmuopRUBfKt64hjGQxLydYduN1ZOq9vLIcIlMtQp9QrlyhG0ViGeZAUGy\nlEFgnhRA72qoaT7/FE1Yfk1kg8+e5Sar1T9PpijzcJNpg/Htw1l29POHwjayQx6z\nv8HBh+jvGaQyh0IhL8EWQmxuqf6I03bMFjW4JfLyIufEBCTzjAeXY9RsvetgWUFV\nOnfiGz365xguls8Zvvtp89DIF5ByUAiFOxu6qzBqHe8X2ZSAQe0yiDyVpCYfFPE+\nECKAzCwY9IBD1jd9\n=j5k+\n-----END PGP SIGNATURE-----",
        "payload": "tree 735d9f2997d0d2d40b23eaaf21cba82bb100ad67\nparent dfba5c2bfa7e6e2546f2d959834d43fcc169786b\nauthor Fabian Jahr <fjahr@protonmail.com> 1589466263 +0200\ncommitter Fabian Jahr <fjahr@protonmail.com> 1589552523 +0200\n\ncoinstats: Extract GetTruncatedSHA512Hash function\n\nThis makes it possible to reuse this code in coinstatsindex.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c092588cfa50983b25d236f6ce603ab9c66007d7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c092588cfa50983b25d236f6ce603ab9c66007d7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c092588cfa50983b25d236f6ce603ab9c66007d7/comments",
    "author": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dfba5c2bfa7e6e2546f2d959834d43fcc169786b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dfba5c2bfa7e6e2546f2d959834d43fcc169786b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dfba5c2bfa7e6e2546f2d959834d43fcc169786b"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 14,
      "deletions": 6
    },
    "files": [
      {
        "sha": "088074fb14479a7279622c7d4eb681ff969f1849",
        "filename": "src/node/coinstats.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 6,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c092588cfa50983b25d236f6ce603ab9c66007d7/src/node/coinstats.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c092588cfa50983b25d236f6ce603ab9c66007d7/src/node/coinstats.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/coinstats.cpp?ref=c092588cfa50983b25d236f6ce603ab9c66007d7",
        "patch": "@@ -5,9 +5,9 @@\n \n #include <node/coinstats.h>\n \n-#include <coins.h>\n #include <crypto/muhash.h>\n #include <hash.h>\n+#include <index/coinstatsindex.h>\n #include <serialize.h>\n #include <uint256.h>\n #include <util/system.h>\n@@ -22,11 +22,7 @@ static void ApplyStats(CCoinsStats &stats, MuHash3072& muhash, const uint256& ha\n         COutPoint outpoint = COutPoint(hash, output.first);\n         Coin coin = output.second;\n \n-        TruncatedSHA512Writer ss(SER_DISK, 0);\n-        ss << outpoint;\n-        ss << (uint32_t)(coin.nHeight * 2 + coin.fCoinBase);\n-        ss << coin.out;\n-        muhash *= MuHash3072(ss.GetHash().begin());\n+        muhash *= MuHash3072(GetTruncatedSHA512Hash(outpoint, coin).begin());\n \n         stats.nTransactionOutputs++;\n         stats.nTotalAmount += output.second.out.nValue;\n@@ -35,6 +31,14 @@ static void ApplyStats(CCoinsStats &stats, MuHash3072& muhash, const uint256& ha\n     }\n }\n \n+uint256 GetTruncatedSHA512Hash(const COutPoint& outpoint, const Coin& coin) {\n+    TruncatedSHA512Writer ss(SER_DISK, 0);\n+    ss << outpoint;\n+    ss << (uint32_t)(coin.nHeight * 2 + coin.fCoinBase);\n+    ss << coin.out;\n+    return ss.GetHash();\n+}\n+\n //! Calculate statistics about the unspent transaction output set\n bool GetUTXOStats(CCoinsView *view, CCoinsStats &stats)\n {"
      },
      {
        "sha": "8c10a8dd660de0278858ba501683e56bc85f5cbe",
        "filename": "src/node/coinstats.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c092588cfa50983b25d236f6ce603ab9c66007d7/src/node/coinstats.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c092588cfa50983b25d236f6ce603ab9c66007d7/src/node/coinstats.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/coinstats.h?ref=c092588cfa50983b25d236f6ce603ab9c66007d7",
        "patch": "@@ -7,6 +7,7 @@\n #define BITCOIN_NODE_COINSTATS_H\n \n #include <amount.h>\n+#include <coins.h>\n #include <uint256.h>\n \n #include <cstdint>\n@@ -30,4 +31,7 @@ struct CCoinsStats\n //! Calculate statistics about the unspent transaction output set\n bool GetUTXOStats(CCoinsView* view, CCoinsStats& stats);\n \n+//! Calculate a TruncatedSHA512 hash for a specific UTXO\n+uint256 GetTruncatedSHA512Hash(const COutPoint&, const Coin&);\n+\n #endif // BITCOIN_NODE_COINSTATS_H"
      }
    ]
  },
  {
    "sha": "1502a08b4a7ea8987271e87ad73715c565a916fc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNTAyYTA4YjRhN2VhODk4NzI3MWU4N2FkNzM3MTVjNTY1YTkxNmZj",
    "commit": {
      "author": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2020-01-24T17:56:47Z"
      },
      "committer": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2020-05-15T14:22:03Z"
      },
      "message": "index: Add CoinStatsIndex\n\nThe index holds the values previously calculated in coinstats.cpp\nfor each block, representing the state of the UTXO set at each\nheight.",
      "tree": {
        "sha": "0b5f8212ad0139cf916d85919d1da44d8a5f5cc9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0b5f8212ad0139cf916d85919d1da44d8a5f5cc9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1502a08b4a7ea8987271e87ad73715c565a916fc",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQJJBAABCgAzFiEEtFq20ghhrCHSdrgm8T0enYkHmM0FAl6+pYsVHGZqYWhyQHBy\nb3Rvbm1haWwuY29tAAoJEPE9Hp2JB5jNkAwP/1uuwN0YTioacFW+3SCw26172qeq\nptjF+f2Eo39LfTAJ+tJAIi0+x/JDneCUXMqiVCGWNHFVT6x/wGW3tMHG5gIV2gX+\nKLnqALzbC0wS1+UojbynZWlTVvKZzUDfyeck5JtLoj6xoQHLOmklgswAJ/GJ02Uc\n59tM8j1L+KFJX66tAHeckbWtEXN4Cpu20aqlbvh22Nc6lskzXJFsFsoL1flx+iRC\neDwlWK5yDSKX2sTev2/YuZUk0M/RLDqOa54LkRycjRmw1HEwscoPEBWHvyB2eFy9\nB3UlaamudxFf7wNYJRLcYhK4OU+UrPUkUBw7TxrwnqA6qETUh+RdXJAAkBg1PNZj\nxZZaqurqyeY9NBoT/3AfMg/uFqxWthjww/0ePScCEJhSISIKMJYH6lejoOGgEegy\n63Qt4WZr174N0OFJcs4U22MUo6jnJoRrz0A36fJwlSQ8NMjvCThBmkSbaVaghctl\ntziA7lBJ+1xVGmWStVP5nhLENW02QtARR2HB1ZDYLW2VLMl6FrhzeT6TbE461G23\n13m6M5TyVDGj6Vix7mU73yXjfNKp7lDbND+zMPOfbF+UilJ2QQhBZliFxLUS+cn3\nYUyLXnyG0Pt4G9bM2GPFE6AK6iq1cDgLNazOLUqkcKEX8MPC8t2Tontj7a+C1sPK\nRWhIf7MAaznbibpE\n=dYoS\n-----END PGP SIGNATURE-----",
        "payload": "tree 0b5f8212ad0139cf916d85919d1da44d8a5f5cc9\nparent c092588cfa50983b25d236f6ce603ab9c66007d7\nauthor Fabian Jahr <fjahr@protonmail.com> 1579888607 +0100\ncommitter Fabian Jahr <fjahr@protonmail.com> 1589552523 +0200\n\nindex: Add CoinStatsIndex\n\nThe index holds the values previously calculated in coinstats.cpp\nfor each block, representing the state of the UTXO set at each\nheight.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1502a08b4a7ea8987271e87ad73715c565a916fc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1502a08b4a7ea8987271e87ad73715c565a916fc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1502a08b4a7ea8987271e87ad73715c565a916fc/comments",
    "author": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c092588cfa50983b25d236f6ce603ab9c66007d7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c092588cfa50983b25d236f6ce603ab9c66007d7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c092588cfa50983b25d236f6ce603ab9c66007d7"
      }
    ],
    "stats": {
      "total": 450,
      "additions": 450,
      "deletions": 0
    },
    "files": [
      {
        "sha": "380588098f10eb46ada640ebdb5e001b10bb685e",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1502a08b4a7ea8987271e87ad73715c565a916fc/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1502a08b4a7ea8987271e87ad73715c565a916fc/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=1502a08b4a7ea8987271e87ad73715c565a916fc",
        "patch": "@@ -135,6 +135,7 @@ BITCOIN_CORE_H = \\\n   httpserver.h \\\n   index/base.h \\\n   index/blockfilterindex.h \\\n+  index/coinstatsindex.h \\\n   index/txindex.h \\\n   indirectmap.h \\\n   init.h \\\n@@ -282,6 +283,7 @@ libbitcoin_server_a_SOURCES = \\\n   httpserver.cpp \\\n   index/base.cpp \\\n   index/blockfilterindex.cpp \\\n+  index/coinstatsindex.cpp \\\n   index/txindex.cpp \\\n   interfaces/chain.cpp \\\n   interfaces/node.cpp \\"
      },
      {
        "sha": "94a975f6ae1c9f262a58d0ea3355a3ff18928e1e",
        "filename": "src/index/coinstatsindex.cpp",
        "status": "added",
        "additions": 391,
        "deletions": 0,
        "changes": 391,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1502a08b4a7ea8987271e87ad73715c565a916fc/src/index/coinstatsindex.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1502a08b4a7ea8987271e87ad73715c565a916fc/src/index/coinstatsindex.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/coinstatsindex.cpp?ref=1502a08b4a7ea8987271e87ad73715c565a916fc",
        "patch": "@@ -0,0 +1,391 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <crypto/muhash.h>\n+#include <hash.h>\n+#include <index/coinstatsindex.h>\n+#include <node/coinstats.h>\n+#include <serialize.h>\n+#include <txdb.h>\n+#include <undo.h>\n+#include <validation.h>\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+constexpr char DB_MUHASH = 'M';\n+\n+namespace {\n+\n+struct DBVal {\n+    uint256 muhash;\n+    uint64_t transaction_output_count;\n+    uint64_t bogo_size;\n+    CAmount total_amount;\n+    uint64_t disk_size;\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        READWRITE(muhash);\n+        READWRITE(transaction_output_count);\n+        READWRITE(bogo_size);\n+        READWRITE(total_amount);\n+        READWRITE(disk_size);\n+    }\n+};\n+\n+struct DBHeightKey {\n+    int height;\n+\n+    DBHeightKey() : height(0) {}\n+    explicit DBHeightKey(int height_in) : height(height_in) {}\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        ser_writedata8(s, DB_BLOCK_HEIGHT);\n+        ser_writedata32be(s, height);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        char prefix = ser_readdata8(s);\n+        if (prefix != DB_BLOCK_HEIGHT) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB height key\");\n+        }\n+        height = ser_readdata32be(s);\n+    }\n+};\n+\n+struct DBHashKey {\n+    uint256 block_hash;\n+\n+    explicit DBHashKey(const uint256& hash_in) : block_hash(hash_in) {}\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        char prefix = DB_BLOCK_HASH;\n+        READWRITE(prefix);\n+        if (prefix != DB_BLOCK_HASH) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB hash key\");\n+        }\n+\n+        READWRITE(block_hash);\n+    }\n+};\n+\n+struct DBMuhash {\n+    MuHash3072 hash;\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        READWRITE(hash);\n+    }\n+};\n+\n+}; // namespace\n+\n+std::unique_ptr<CoinStatsIndex> g_coin_stats_index;\n+\n+CoinStatsIndex::CoinStatsIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+{\n+    fs::path path = GetDataDir() / \"indexes\" / \"coinstats\";\n+    fs::create_directories(path);\n+\n+    m_db = MakeUnique<CoinStatsIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);\n+}\n+\n+bool CoinStatsIndex::Init()\n+{\n+    if (!m_db->Read(DB_MUHASH, m_muhash)) {\n+        // Check that the cause of the read failure is that the key does not exist. Any other errors\n+        // indicate database corruption or a disk failure, and starting the index would cause\n+        // further corruption.\n+        if (m_db->Exists(DB_MUHASH)) {\n+            return error(\"%s: Cannot read current %s state; index may be corrupted\",\n+                         __func__, GetName());\n+        }\n+\n+        // If the DB_MUHASH is not set, initialize empty values\n+        m_muhash = MuHash3072();\n+        m_transaction_output_count = 0;\n+        m_bogo_size = 0;\n+        m_total_amount = 0;\n+        m_disk_size = 0;\n+    }\n+\n+    return BaseIndex::Init();\n+}\n+\n+bool CoinStatsIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+\n+    // Ignore genesis block\n+    if (pindex->nHeight > 0) {\n+        if (!UndoReadFromDisk(block_undo, pindex)) {\n+            return false;\n+        }\n+\n+        std::pair<uint256, DBVal> read_out;\n+        if (!m_db->Read(DBHeightKey(pindex->nHeight - 1), read_out)) {\n+            return false;\n+        }\n+\n+        uint256 expected_block_hash = pindex->pprev->GetBlockHash();\n+        if (read_out.first != expected_block_hash) {\n+            return error(\"%s: previous block header belongs to unexpected block %s; expected %s\",\n+                         __func__, read_out.first.ToString(), expected_block_hash.ToString());\n+        }\n+\n+        bool is_bip30_block = (pindex->nHeight==91722 && pindex->GetBlockHash() == uint256S(\"0x00000000000271a2dc26e7667f8419f2e15416dc6955e5a6c6cdf3f2574dd08e\")) ||\n+                              (pindex->nHeight==91812 && pindex->GetBlockHash() == uint256S(\"0x00000000000af0aed4792b1acee3d966af36cf5def14935db8de83d6f9306f2f\"));\n+        MuHash3072 undo_muhash;\n+\n+        // Add the new utxos created from the block\n+        for (size_t i = 0; i < block.vtx.size(); ++i) {\n+            const auto& tx = block.vtx.at(i);\n+\n+            // Skip duplicate txid coinbase transactions (BIP30).\n+            if (is_bip30_block && tx->IsCoinBase()) {\n+                continue;\n+            }\n+\n+            for (size_t j = 0; j < tx->vout.size(); ++j) {\n+                const CTxOut& out = tx->vout[j];\n+                COutPoint outpoint = COutPoint(tx->GetHash(), j);\n+                Coin coin = Coin(out, pindex->nHeight, tx->IsCoinBase());\n+\n+                // Skip unspendable coins\n+                if (coin.out.scriptPubKey.IsUnspendable()) continue;\n+\n+                m_muhash *= MuHash3072(GetTruncatedSHA512Hash(outpoint, coin).begin());\n+\n+                m_transaction_output_count++;\n+                m_total_amount += coin.out.nValue;\n+                m_bogo_size += 32 /* txid */ + 4 /* vout index */ + 4 /* height + coinbase */ + 8 /* amount */ +\n+                               2 /* scriptPubKey len */ + coin.out.scriptPubKey.size() /* scriptPubKey */;\n+            }\n+\n+            // The coinbase tx has no undo data since no former output is spent\n+            if (i > 0) {\n+                const auto& tx_undo = block_undo.vtxundo.at(i-1);\n+\n+                for (size_t j = 0; j < tx_undo.vprevout.size(); ++j) {\n+                    Coin coin = tx_undo.vprevout[j];\n+                    COutPoint outpoint = COutPoint(tx->vin[j].prevout.hash, tx->vin[j].prevout.n);\n+\n+                    undo_muhash *= MuHash3072(GetTruncatedSHA512Hash(outpoint, coin).begin());\n+\n+                    m_transaction_output_count--;\n+                    m_total_amount -= coin.out.nValue;\n+                    m_bogo_size -= 32 /* txid */ + 4 /* vout index */ + 4 /* height + coinbase */ + 8 /* amount */ +\n+                                   2 /* scriptPubKey len */ + coin.out.scriptPubKey.size() /* scriptPubKey */;\n+                }\n+            }\n+        }\n+\n+        m_muhash /= undo_muhash;\n+    }\n+\n+    CCoinsView* coins_view = WITH_LOCK(cs_main, return &ChainstateActive().CoinsDB());\n+    m_disk_size = coins_view->EstimateSize();\n+\n+    std::pair<uint256, DBVal> value;\n+    value.first = pindex->GetBlockHash();\n+    value.second.muhash = currentHashInternal();\n+    value.second.disk_size = m_disk_size;\n+    value.second.transaction_output_count = m_transaction_output_count;\n+    value.second.bogo_size = m_bogo_size;\n+    value.second.total_amount = m_total_amount;\n+\n+    if (!m_db->Write(DBHeightKey(pindex->nHeight), value)) {\n+        return false;\n+    }\n+\n+    if (!m_db->Write(DB_MUHASH, m_muhash)) {\n+        return false;\n+    }\n+\n+    return true;\n+}\n+\n+static bool CopyHeightIndexToHashIndex(CDBIterator& db_it, CDBBatch& batch,\n+                                       const std::string& index_name,\n+                                       int start_height, int stop_height)\n+{\n+    DBHeightKey key(start_height);\n+    db_it.Seek(key);\n+\n+    for (int height = start_height; height <= stop_height; ++height) {\n+        if (!db_it.GetKey(key) || key.height != height) {\n+            return error(\"%s: unexpected key in %s: expected (%c, %d)\",\n+                         __func__, index_name, DB_BLOCK_HEIGHT, height);\n+        }\n+\n+        std::pair<uint256, DBVal> value;\n+        if (!db_it.GetValue(value)) {\n+            return error(\"%s: unable to read value in %s at key (%c, %d)\",\n+                         __func__, index_name, DB_BLOCK_HEIGHT, height);\n+        }\n+\n+        batch.Write(DBHashKey(value.first), std::move(value.second));\n+\n+        db_it.Next();\n+    }\n+    return true;\n+}\n+\n+bool CoinStatsIndex::Rewind(const CBlockIndex* current_tip, const CBlockIndex* new_tip)\n+{\n+    assert(current_tip->GetAncestor(new_tip->nHeight) == new_tip);\n+\n+    CDBBatch batch(*m_db);\n+    std::unique_ptr<CDBIterator> db_it(m_db->NewIterator());\n+\n+    {\n+        LOCK(cs_main);\n+        CBlockIndex* iter_tip = LookupBlockIndex(current_tip->GetBlockHash());\n+        auto& consensus_params = Params().GetConsensus();\n+\n+        do {\n+            CBlock block;\n+\n+            if (!ReadBlockFromDisk(block, iter_tip, consensus_params)) {\n+                return error(\"%s: Failed to read block %s from disk\",\n+                               __func__, iter_tip->GetBlockHash().ToString());\n+            }\n+\n+            ReverseBlock(block, iter_tip);\n+\n+            iter_tip = iter_tip->GetAncestor(iter_tip->nHeight - 1);\n+        } while (new_tip != iter_tip);\n+    }\n+\n+    // During a reorg, we need to copy all hash digests for blocks that are getting disconnected from the\n+    // height index to the hash index so we can still find them when the height index entries are\n+    // overwritten.\n+    if (!CopyHeightIndexToHashIndex(*db_it, batch, m_name, new_tip->nHeight, current_tip->nHeight)) {\n+        return false;\n+    }\n+\n+    if (!m_db->WriteBatch(batch)) return false;\n+\n+    return BaseIndex::Rewind(current_tip, new_tip);\n+}\n+\n+static bool LookupOne(const CDBWrapper& db, const CBlockIndex* block_index, DBVal& result)\n+{\n+    // First check if the result is stored under the height index and the value there matches the\n+    // block hash. This should be the case if the block is on the active chain.\n+    std::pair<uint256, DBVal> read_out;\n+    if (!db.Read(DBHeightKey(block_index->nHeight), read_out)) {\n+        return false;\n+    }\n+    if (read_out.first == block_index->GetBlockHash()) {\n+        result = std::move(read_out.second);\n+        return true;\n+    }\n+\n+    // If value at the height index corresponds to an different block, the result will be stored in\n+    // the hash index.\n+    return db.Read(DBHashKey(block_index->GetBlockHash()), result);\n+}\n+\n+bool CoinStatsIndex::LookupStats(const CBlockIndex* block_index, CCoinsStats& coins_stats) const\n+{\n+    DBVal entry;\n+    if (!LookupOne(*m_db, block_index, entry)) {\n+        return false;\n+    }\n+\n+    coins_stats.hashSerialized = entry.muhash;\n+    coins_stats.nTransactionOutputs = entry.transaction_output_count;\n+    coins_stats.nBogoSize = entry.bogo_size;\n+    coins_stats.nTotalAmount = entry.total_amount;\n+    coins_stats.nDiskSize = entry.disk_size;\n+\n+    return true;\n+}\n+\n+uint256 CoinStatsIndex::currentHashInternal()\n+{\n+    unsigned char out[384];\n+    m_muhash.Finalize(out);\n+    return (TruncatedSHA512Writer(SER_DISK, 0) << out).GetHash();\n+}\n+\n+// Reverse Block in case of reorg\n+bool CoinStatsIndex::ReverseBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+    std::pair<uint256, DBVal> read_out;\n+\n+    if (pindex->nHeight > 0) {\n+        if (!UndoReadFromDisk(block_undo, pindex)) {\n+            return false;\n+        }\n+\n+        if (!m_db->Read(DBHeightKey(pindex->nHeight - 1), read_out)) {\n+            return false;\n+        }\n+\n+        uint256 expected_block_hash = pindex->pprev->GetBlockHash();\n+        if (read_out.first != expected_block_hash) {\n+            return error(\"%s: previous block header belongs to unexpected block %s; expected %s\",\n+                         __func__, read_out.first.ToString(), expected_block_hash.ToString());\n+        }\n+    }\n+\n+    MuHash3072 do_muhash;\n+\n+    // Remove the new utxos that were created from the block\n+    for (size_t i = 0; i < block.vtx.size(); ++i) {\n+        const auto& tx = block.vtx.at(i);\n+\n+        for (size_t j = 0; j < tx->vout.size(); ++j) {\n+            const CTxOut& out = tx->vout[j];\n+            COutPoint outpoint = COutPoint(tx->GetHash(), j);\n+            Coin coin = Coin(out, pindex->nHeight, tx->IsCoinBase());\n+\n+            // Skip unspendable coins\n+            if (coin.out.scriptPubKey.IsUnspendable()) continue;\n+\n+            do_muhash *= MuHash3072(GetTruncatedSHA512Hash(outpoint, coin).begin());\n+        }\n+\n+        // The coinbase tx has no undo data since no former output is spent\n+        if (i > 0) {\n+            const auto& tx_undo = block_undo.vtxundo.at(i-1);\n+\n+            for (size_t j = 0; j < tx_undo.vprevout.size(); ++j) {\n+                Coin coin = tx_undo.vprevout[j];\n+                COutPoint outpoint = COutPoint(tx->vin[j].prevout.hash, tx->vin[j].prevout.n);\n+\n+                m_muhash *= MuHash3072(GetTruncatedSHA512Hash(outpoint, coin).begin());\n+            }\n+        }\n+    }\n+\n+    m_muhash /= do_muhash;\n+\n+    m_transaction_output_count = read_out.second.transaction_output_count;\n+    m_total_amount = read_out.second.total_amount;\n+    m_bogo_size = read_out.second.bogo_size;\n+    m_disk_size = read_out.second.disk_size;\n+\n+    if (!m_db->Write(DB_MUHASH, m_muhash)) {\n+        return false;\n+    }\n+\n+    return true;\n+}"
      },
      {
        "sha": "85c38b86e9937dfe31119f78dbb24840eb78553c",
        "filename": "src/index/coinstatsindex.h",
        "status": "added",
        "additions": 57,
        "deletions": 0,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1502a08b4a7ea8987271e87ad73715c565a916fc/src/index/coinstatsindex.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1502a08b4a7ea8987271e87ad73715c565a916fc/src/index/coinstatsindex.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/coinstatsindex.h?ref=1502a08b4a7ea8987271e87ad73715c565a916fc",
        "patch": "@@ -0,0 +1,57 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INDEX_COINSTATSINDEX_H\n+#define BITCOIN_INDEX_COINSTATSINDEX_H\n+\n+#include <chain.h>\n+#include <crypto/muhash.h>\n+#include <flatfile.h>\n+#include <index/base.h>\n+#include <node/coinstats.h>\n+\n+/**\n+ * CoinStatsIndex maintains a rolling hash of the utxo set and\n+ * other updated coin statistics.\n+ */\n+class CoinStatsIndex final : public BaseIndex\n+{\n+private:\n+    std::string m_name;\n+    std::unique_ptr<BaseIndex::DB> m_db;\n+\n+    MuHash3072 m_muhash;\n+    uint64_t m_transaction_output_count;\n+    uint64_t m_bogo_size;\n+    CAmount m_total_amount;\n+    uint64_t m_disk_size;\n+\n+    // Digest of the current Muhash object\n+    uint256 currentHashInternal();\n+\n+    // Roll back the Muhash of a particular block\n+    bool ReverseBlock(const CBlock& block, const CBlockIndex* pindex);\n+protected:\n+    bool Init() override;\n+\n+    bool WriteBlock(const CBlock& block, const CBlockIndex* pindex) override;\n+\n+    bool Rewind(const CBlockIndex* current_tip, const CBlockIndex* new_tip) override;\n+\n+    BaseIndex::DB& GetDB() const override { return *m_db; }\n+\n+    const char* GetName() const override { return \"coinstatsindex\"; }\n+\n+public:\n+    // Constructs the index, which becomes available to be queried.\n+    explicit CoinStatsIndex(size_t n_cache_size, bool f_memory = false, bool f_wipe = false);\n+\n+    // Look up hash digest for a specific block using CBlockIndex\n+    bool LookupStats(const CBlockIndex* block_index, CCoinsStats& coins_stats) const;\n+};\n+\n+/// The global UTXO set hash object.\n+extern std::unique_ptr<CoinStatsIndex> g_coin_stats_index;\n+\n+#endif // BITCOIN_INDEX_COINSTATSINDEX_H"
      }
    ]
  },
  {
    "sha": "c692275243017bda3eaadbf529d249773688184c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNjkyMjc1MjQzMDE3YmRhM2VhYWRiZjUyOWQyNDk3NzM2ODgxODRj",
    "commit": {
      "author": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2020-01-24T17:58:47Z"
      },
      "committer": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2020-05-15T14:23:20Z"
      },
      "message": "index: CoinStatsIndex can be activated with command line flag",
      "tree": {
        "sha": "a591dff97838eb4b338a180785c7866408b8073d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a591dff97838eb4b338a180785c7866408b8073d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c692275243017bda3eaadbf529d249773688184c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQJJBAABCgAzFiEEtFq20ghhrCHSdrgm8T0enYkHmM0FAl6+pdgVHGZqYWhyQHBy\nb3Rvbm1haWwuY29tAAoJEPE9Hp2JB5jNBR4P/2cDA3kQRm8LYzRso1l1kdvu/PxR\nm24gOAzwapVxmEeO8Lkptfr+bh0XnThs4wjmoJmE8QjU8vDlSD4CTLcEWjalw0Do\nIwrIsUBu3z4DQ430H77IZvQA0IdeYfnApg38mQqY6ygESL5p6EtM64rBAJYgzTeX\nFSrJDpH/KziigHT7Y33DsMrIkWSy94ZLfEaTtj79qNsT4+FLY/QrSE0Ipn50iDNi\nqIYYMnSeO3+CmaKcWDjkuRZ0VygMJvs4RqYKPrvrJG7BqEkYi4nsM6DKDjF0rgg0\nl0XUAQY1jkftLrZItYBP64E+jV+96MwQemRNHv94uP6xqoBIGsQhaLS2mTiQRiot\n0TIMFnt9yzLbCUXcCIzl+cJ2+cWA/x2khXa31ZF+iv+oyZ2uPrB9sQfU4BSQDigK\nJd7pWHOok6fybj1dmTLqs16hz3XPPVCPH1bRQHvF3wBQccGKTydi3qxNS1rHSuyT\noOF/UHIXh1U7Xk6zmYKxEuiCAV9reFSmGQhXnIOxvDw9ZlYXS6cTGqjS3+Q02SRt\nJISVZyVraqOyLYFGO7gMIZ+3cR57wahPQtpQsFNm4EQebM5CHhosF491uw1qGoZr\nNUVu6eDMTyDgTosSVBK0WCGSjTIUiwzKOjZKAqqEowHOxPvrxUhB7L0TglEsxEV3\n7Tj11y1/IfNYM9bo\n=TB+w\n-----END PGP SIGNATURE-----",
        "payload": "tree a591dff97838eb4b338a180785c7866408b8073d\nparent 1502a08b4a7ea8987271e87ad73715c565a916fc\nauthor Fabian Jahr <fjahr@protonmail.com> 1579888727 +0100\ncommitter Fabian Jahr <fjahr@protonmail.com> 1589552600 +0200\n\nindex: CoinStatsIndex can be activated with command line flag\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c692275243017bda3eaadbf529d249773688184c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c692275243017bda3eaadbf529d249773688184c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c692275243017bda3eaadbf529d249773688184c/comments",
    "author": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1502a08b4a7ea8987271e87ad73715c565a916fc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1502a08b4a7ea8987271e87ad73715c565a916fc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1502a08b4a7ea8987271e87ad73715c565a916fc"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 35,
      "deletions": 4
    },
    "files": [
      {
        "sha": "a2fce6d7d25f4337746dd8f900b52e1f77adfbcf",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 1,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c692275243017bda3eaadbf529d249773688184c/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c692275243017bda3eaadbf529d249773688184c/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=c692275243017bda3eaadbf529d249773688184c",
        "patch": "@@ -22,6 +22,7 @@\n #include <httpserver.h>\n #include <index/blockfilterindex.h>\n #include <index/txindex.h>\n+#include <index/coinstatsindex.h>\n #include <interfaces/chain.h>\n #include <key.h>\n #include <miner.h>\n@@ -168,6 +169,9 @@ void Interrupt(NodeContext& node)\n         g_txindex->Interrupt();\n     }\n     ForEachBlockFilterIndex([](BlockFilterIndex& index) { index.Interrupt(); });\n+    if (g_coin_stats_index) {\n+        g_coin_stats_index->Interrupt();\n+    }\n }\n \n void Shutdown(NodeContext& node)\n@@ -261,6 +265,10 @@ void Shutdown(NodeContext& node)\n         g_txindex->Stop();\n         g_txindex.reset();\n     }\n+    if (g_coin_stats_index) {\n+        g_coin_stats_index->Stop();\n+        g_coin_stats_index.reset();\n+    }\n     ForEachBlockFilterIndex([](BlockFilterIndex& index) { index.Stop(); });\n     DestroyAllBlockFilterIndexes();\n \n@@ -424,6 +432,7 @@ void SetupServerArgs(NodeContext& node)\n                  strprintf(\"Maintain an index of compact filters by block (default: %s, values: %s).\", DEFAULT_BLOCKFILTERINDEX, ListBlockFilterTypes()) +\n                  \" If <type> is not supplied or if <type> = 1, indexes for all known types are enabled.\",\n                  ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-coinstatsindex\", strprintf(\"Maintain coin statistics index, used by the gettxoutset rpc call (default: %u)\", DEFAULT_TXINDEX), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n \n     gArgs.AddArg(\"-addnode=<ip>\", \"Add a node to connect to and attempt to keep the connection open (see the `addnode` RPC command help for more info). This option can be specified multiple times to add multiple nodes.\", ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-asmap=<file>\", strprintf(\"Specify asn mapping used for bucketing of the peers (default: %s). Relative paths will be prefixed by the net-specific datadir location.\", DEFAULT_ASMAP_FILENAME), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n@@ -1001,10 +1010,12 @@ bool AppInitParameterInteraction()\n         return InitError(_(\"Cannot set -peerblockfilters without -blockfilterindex.\"));\n     }\n \n-    // if using block pruning, then disallow txindex\n+    // if using block pruning, then disallow txindex, coinstatsindex and blockfilterindex\n     if (gArgs.GetArg(\"-prune\", 0)) {\n         if (gArgs.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX))\n             return InitError(_(\"Prune mode is incompatible with -txindex.\"));\n+        if (gArgs.GetBoolArg(\"-coinstatsindex\", DEFAULT_UTXOSTATSINDEX))\n+            return InitError(_(\"Prune mode is incompatible with -coinstatsindex.\"));\n         if (!g_enabled_filter_types.empty()) {\n             return InitError(_(\"Prune mode is incompatible with -blockfilterindex.\"));\n         }\n@@ -1526,6 +1537,7 @@ bool AppInitMain(NodeContext& node)\n         filter_index_cache = max_cache / n_indexes;\n         nTotalCache -= filter_index_cache * n_indexes;\n     }\n+    int64_t coin_stats_cache = 0;\n     int64_t nCoinDBCache = std::min(nTotalCache / 2, (nTotalCache / 4) + (1 << 23)); // use 25%-50% of the remainder for disk cache\n     nCoinDBCache = std::min(nCoinDBCache, nMaxCoinsDBCache << 20); // cap total coins db cache\n     nTotalCache -= nCoinDBCache;\n@@ -1782,6 +1794,11 @@ bool AppInitMain(NodeContext& node)\n         GetBlockFilterIndex(filter_type)->Start();\n     }\n \n+    if (gArgs.GetBoolArg(\"-coinstatsindex\", DEFAULT_UTXOSTATSINDEX)) {\n+        g_coin_stats_index = MakeUnique<CoinStatsIndex>(coin_stats_cache, false, fReindex);\n+        g_coin_stats_index->Start();\n+    }\n+\n     // ********************************************************* Step 9: load wallet\n     for (const auto& client : node.chain_clients) {\n         if (!client->load()) {"
      },
      {
        "sha": "fe546f7c16db8e979adf267587274a0fd0a31e5d",
        "filename": "src/node/coinstats.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 3,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c692275243017bda3eaadbf529d249773688184c/src/node/coinstats.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c692275243017bda3eaadbf529d249773688184c/src/node/coinstats.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/coinstats.cpp?ref=c692275243017bda3eaadbf529d249773688184c",
        "patch": "@@ -45,13 +45,25 @@ bool GetUTXOStats(CCoinsView *view, CCoinsStats &stats)\n     stats = CCoinsStats();\n     std::unique_ptr<CCoinsViewCursor> pcursor(view->Cursor());\n     assert(pcursor);\n-\n-    MuHash3072 muhash;\n     stats.hashBlock = pcursor->GetBestBlock();\n+\n+    const CBlockIndex* block_index;\n     {\n         LOCK(cs_main);\n-        stats.nHeight = LookupBlockIndex(stats.hashBlock)->nHeight;\n+        block_index = LookupBlockIndex(pcursor->GetBestBlock());\n     }\n+    stats.nHeight = block_index->nHeight;\n+\n+    // Use CoinStatsIndex if it is available\n+    if (g_coin_stats_index) {\n+        if (g_coin_stats_index->LookupStats(block_index, stats)) {\n+            return true;\n+        } else {\n+            return false;\n+        }\n+    }\n+\n+    MuHash3072 muhash;\n     uint256 prevkey;\n     std::map<uint32_t, Coin> outputs;\n     while (pcursor->Valid()) {"
      },
      {
        "sha": "b92498323c74e44ab6b1aaf931561f6e7a9e1946",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c692275243017bda3eaadbf529d249773688184c/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c692275243017bda3eaadbf529d249773688184c/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=c692275243017bda3eaadbf529d249773688184c",
        "patch": "@@ -71,6 +71,7 @@ static const int DEFAULT_SCRIPTCHECK_THREADS = 0;\n static const int64_t DEFAULT_MAX_TIP_AGE = 24 * 60 * 60;\n static const bool DEFAULT_CHECKPOINTS_ENABLED = true;\n static const bool DEFAULT_TXINDEX = false;\n+static const bool DEFAULT_UTXOSTATSINDEX = false;\n static const char* const DEFAULT_BLOCKFILTERINDEX = \"0\";\n static const unsigned int DEFAULT_BANSCORE_THRESHOLD = 100;\n /** Default for -persistmempool */"
      },
      {
        "sha": "0b432aee99be6fcf5fe6c224950ccb9ef6bb8e82",
        "filename": "test/lint/lint-circular-dependencies.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c692275243017bda3eaadbf529d249773688184c/test/lint/lint-circular-dependencies.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c692275243017bda3eaadbf529d249773688184c/test/lint/lint-circular-dependencies.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-circular-dependencies.sh?ref=c692275243017bda3eaadbf529d249773688184c",
        "patch": "@@ -11,6 +11,7 @@ export LC_ALL=C\n EXPECTED_CIRCULAR_DEPENDENCIES=(\n     \"chainparamsbase -> util/system -> chainparamsbase\"\n     \"index/txindex -> validation -> index/txindex\"\n+    \"index/coinstatsindex -> node/coinstats -> index/coinstatsindex\"\n     \"policy/fees -> txmempool -> policy/fees\"\n     \"qt/addresstablemodel -> qt/walletmodel -> qt/addresstablemodel\"\n     \"qt/bitcoingui -> qt/walletframe -> qt/bitcoingui\""
      }
    ]
  },
  {
    "sha": "92f49857530af0ebe80d8e60146158595bcb3c7d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MmY0OTg1NzUzMGFmMGViZTgwZDhlNjAxNDYxNTg1OTViY2IzYzdk",
    "commit": {
      "author": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2019-08-26T19:49:57Z"
      },
      "committer": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2020-05-15T14:23:20Z"
      },
      "message": "test: Add functional test for UTXO Stats Index",
      "tree": {
        "sha": "cdcf9ea16e9514a206479826a7b6b5fe464ea4ef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cdcf9ea16e9514a206479826a7b6b5fe464ea4ef"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/92f49857530af0ebe80d8e60146158595bcb3c7d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQJJBAABCgAzFiEEtFq20ghhrCHSdrgm8T0enYkHmM0FAl6+pdgVHGZqYWhyQHBy\nb3Rvbm1haWwuY29tAAoJEPE9Hp2JB5jNpYsP/j+z1iqEG55VI7+ekUl/MDjrNO/U\ncXWF5TAxbNPeoqGfWxKzwGTbUF12Wcx3lElQsER/TBk9SfzuDwgODvKZdylRWjD2\nUwP63CAJaYJSvL5pgGuw3EmdQFa8EEFfnj0bW4iajvcQcCQL5Bed1vx++7ulDEMc\n0j6SDBtqgjbQvGQPZsdfXtYt9FjNMaW+wrESsSOIq9dMjs08Tv/Ni24cjVQfkCo1\nZVDZCOCLMqHn85Fg6jD3H5/8UE0djfn8plZ+Mjd4LhTEndj1wyhzfCZitHkhxkDq\n3QO+JtV4+kPcQyBS0JFAUYgEEGr1O/gFq0BeLWLoyWH3sJK65vwzK0FlThSFRMQS\nmwoXw9UHNRqlU/7uwicMLECuxi4J5Xl+9lukbHv3qF1hOqaz/W/L7rigrtW7Ce0w\ndAXiWngsdov5UgUNRRi3QeNZwY/Zk0/MzvXvafn/xoTyW9T94yd6Bx6U4Yp22T7u\neFOZohhxFh+7rGRXSUwVyph/t7g1H9d1esnzwGvfAMUd41eiFTRXOE71G1FG/L+U\nv89o73b9kqRgw5J0pX0z8UZv/LsFoTk4Jl7ss9G4Qg/rFBla8geRpOgo5+6Xy+h5\nUhTQwZdEoU6Y3d64mtf3yVoQzN8H9ZxFVm0WcqUZQRNy7xmH1eK4ac0awQdhNMNb\nIgz6IilDxg8d42SS\n=LDeo\n-----END PGP SIGNATURE-----",
        "payload": "tree cdcf9ea16e9514a206479826a7b6b5fe464ea4ef\nparent c692275243017bda3eaadbf529d249773688184c\nauthor Fabian Jahr <fjahr@protonmail.com> 1566848997 -0400\ncommitter Fabian Jahr <fjahr@protonmail.com> 1589552600 +0200\n\ntest: Add functional test for UTXO Stats Index\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92f49857530af0ebe80d8e60146158595bcb3c7d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/92f49857530af0ebe80d8e60146158595bcb3c7d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92f49857530af0ebe80d8e60146158595bcb3c7d/comments",
    "author": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c692275243017bda3eaadbf529d249773688184c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c692275243017bda3eaadbf529d249773688184c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c692275243017bda3eaadbf529d249773688184c"
      }
    ],
    "stats": {
      "total": 99,
      "additions": 97,
      "deletions": 2
    },
    "files": [
      {
        "sha": "4b657e599f0ae38905f9f4ef45ed9a796427ad16",
        "filename": "test/functional/feature_block.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92f49857530af0ebe80d8e60146158595bcb3c7d/test/functional/feature_block.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92f49857530af0ebe80d8e60146158595bcb3c7d/test/functional/feature_block.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_block.py?ref=92f49857530af0ebe80d8e60146158595bcb3c7d",
        "patch": "@@ -763,7 +763,7 @@ def run_test(self):\n         self.send_blocks([b56p2], success=False, reject_reason='bad-txns-duplicate', reconnect=True)\n \n         self.move_tip(\"57p2\")\n-        self.send_blocks([b57p2], True)\n+        self.send_blocks([b57p2], True, timeout=180)\n \n         self.move_tip(57)\n         self.send_blocks([b57], False)  # The tip is not updated because 57p2 seen first"
      },
      {
        "sha": "e2c220e0437fb17333c3ccda187131bb4ea52f2b",
        "filename": "test/functional/feature_coinstatsindex.py",
        "status": "added",
        "additions": 62,
        "deletions": 0,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92f49857530af0ebe80d8e60146158595bcb3c7d/test/functional/feature_coinstatsindex.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92f49857530af0ebe80d8e60146158595bcb3c7d/test/functional/feature_coinstatsindex.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_coinstatsindex.py?ref=92f49857530af0ebe80d8e60146158595bcb3c7d",
        "patch": "@@ -0,0 +1,62 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test CoinStatsIndex across nodes.\n+\n+Test that the values returned by gettxoutsetinfo are consistent\n+between a node running the coinstatsindex and a node without\n+the index.\n+\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    try_rpc,\n+    wait_until,\n+)\n+\n+class CoinStatsIndexTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 2\n+        self.supports_cli = False\n+        self.extra_args = [\n+            [],\n+            [\"-coinstatsindex\"]\n+        ]\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self._test_coin_stats_index()\n+\n+    def _test_coin_stats_index(self):\n+        node = self.nodes[0]\n+        index_node = self.nodes[1]\n+\n+        # Generate a normal transaction and mine it\n+        node.generate(101)\n+        address = self.nodes[0].get_deterministic_priv_key().address\n+        node.sendtoaddress(address=address, amount=10, subtractfeefromamount=True)\n+        node.generate(1)\n+\n+        self.sync_blocks(timeout=120)\n+\n+        self.log.info(\"Test that gettxoutsetinfo() output is consistent with or without coinstatsindex option\")\n+        wait_until(lambda: not try_rpc(-32603, \"Unable to read UTXO set\", node.gettxoutsetinfo))\n+        res0 = node.gettxoutsetinfo()\n+        wait_until(lambda: not try_rpc(-32603, \"Unable to read UTXO set\", index_node.gettxoutsetinfo))\n+        res1 = index_node.gettxoutsetinfo()\n+\n+        # The field 'disk_size' is non-deterministic and can thus not be\n+        # compared across different nodes.\n+        del res1['disk_size'], res0['disk_size']\n+\n+        # Everything left should be the same\n+        assert_equal(res1, res0)\n+\n+\n+if __name__ == '__main__':\n+    CoinStatsIndexTest().main()"
      },
      {
        "sha": "5b2af965f74deb5898caccf68e79d6d751b2e169",
        "filename": "test/functional/rpc_blockchain.py",
        "status": "modified",
        "additions": 32,
        "deletions": 0,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92f49857530af0ebe80d8e60146158595bcb3c7d/test/functional/rpc_blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92f49857530af0ebe80d8e60146158595bcb3c7d/test/functional/rpc_blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_blockchain.py?ref=92f49857530af0ebe80d8e60146158595bcb3c7d",
        "patch": "@@ -31,6 +31,7 @@\n     assert_raises_rpc_error,\n     assert_is_hex_string,\n     assert_is_hash_string,\n+    wait_until,\n )\n from test_framework.blocktools import (\n     create_block,\n@@ -63,6 +64,7 @@ def run_test(self):\n         self._test_getnetworkhashps()\n         self._test_stopatheight()\n         self._test_waitforblockheight()\n+        self._test_utxo_set_hash()\n         assert self.nodes[0].verifychain(4, 0)\n \n     def mine_chain(self):\n@@ -74,6 +76,10 @@ def mine_chain(self):\n             self.nodes[0].generatetoaddress(1, address)\n         assert_equal(self.nodes[0].getblockchaininfo()['blocks'], 200)\n \n+    def mine_block(self):\n+        address = self.nodes[0].get_deterministic_priv_key().address\n+        self.nodes[0].generatetoaddress(1, address)\n+\n     def _test_getblockchaininfo(self):\n         self.log.info(\"Test getblockchaininfo\")\n \n@@ -205,6 +211,8 @@ def _test_getchaintxstats(self):\n \n     def _test_gettxoutsetinfo(self):\n         node = self.nodes[0]\n+\n+        wait_until(lambda: self.nodes[0].getblockcount() == 200)\n         res = node.gettxoutsetinfo()\n \n         assert_equal(res['total_amount'], Decimal('8725.00000000'))\n@@ -331,6 +339,30 @@ def assert_waitforheight(height, timeout=2):\n         assert_waitforheight(current_height)\n         assert_waitforheight(current_height + 1)\n \n+    def _test_utxo_set_hash(self):\n+        node = self.nodes[0]\n+\n+        self.log.info(\"Test that gettxoutsetinfo() utxo set hash is unchanged when rolling back a new block\")\n+\n+        # Test consistency of hashing\n+        res = node.gettxoutsetinfo()\n+        hash_at_207 = res['utxo_set_hash']\n+        assert(node.gettxoutsetinfo()['utxo_set_hash'] == hash_at_207)\n+\n+        # Hash is updated with new block\n+        self.mine_block()\n+        assert(node.gettxoutsetinfo()['utxo_set_hash'] != hash_at_207)\n+\n+        # Hash is rolled back to previous block if invalidated\n+        b208hash = node.getblockhash(208)\n+        node.invalidateblock(b208hash)\n+        assert(node.gettxoutsetinfo()['utxo_set_hash'] == hash_at_207)\n+\n+        # Hash persists restart\n+        self.stop_node(0)\n+        self.start_node(0)\n+        assert(node.gettxoutsetinfo()['utxo_set_hash'] == hash_at_207)\n+\n \n if __name__ == '__main__':\n     BlockchainTest().main()"
      },
      {
        "sha": "ab34f10fb3d0235d8df2ebb66f9350e2f6b321e3",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92f49857530af0ebe80d8e60146158595bcb3c7d/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92f49857530af0ebe80d8e60146158595bcb3c7d/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=92f49857530af0ebe80d8e60146158595bcb3c7d",
        "patch": "@@ -621,7 +621,7 @@ def cache_path(*paths):\n \n             os.rmdir(cache_path('wallets'))  # Remove empty wallets dir\n             for entry in os.listdir(cache_path()):\n-                if entry not in ['chainstate', 'blocks']:  # Only keep chainstate and blocks folder\n+                if entry not in ['chainstate', 'blocks', 'indexes']:  # Only indexes, chainstate and blocks folders\n                     os.remove(cache_path(entry))\n \n         for i in range(self.num_nodes):"
      },
      {
        "sha": "ad4906dd5cf0e8039001b2069b1150b08d55d88d",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92f49857530af0ebe80d8e60146158595bcb3c7d/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92f49857530af0ebe80d8e60146158595bcb3c7d/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=92f49857530af0ebe80d8e60146158595bcb3c7d",
        "patch": "@@ -234,6 +234,7 @@\n     'rpc_deriveaddresses.py --usecli',\n     'rpc_scantxoutset.py',\n     'feature_logging.py',\n+    'feature_coinstatsindex.py',\n     'p2p_node_network_limited.py',\n     'p2p_permissions.py',\n     'feature_blocksdir.py',"
      }
    ]
  },
  {
    "sha": "9d1b1ecf0f823881fd50075c211ff053aec5af9c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZDFiMWVjZjBmODIzODgxZmQ1MDA3NWMyMTFmZjA1M2FlYzVhZjlj",
    "commit": {
      "author": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2019-08-28T19:58:53Z"
      },
      "committer": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2020-05-15T14:23:20Z"
      },
      "message": "test: Add unit test for UTXO Stats Index",
      "tree": {
        "sha": "ace45ffc031943b1ebfe9454f9437f5d1efecb11",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ace45ffc031943b1ebfe9454f9437f5d1efecb11"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9d1b1ecf0f823881fd50075c211ff053aec5af9c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQJJBAABCgAzFiEEtFq20ghhrCHSdrgm8T0enYkHmM0FAl6+pdgVHGZqYWhyQHBy\nb3Rvbm1haWwuY29tAAoJEPE9Hp2JB5jNWHIP/1cxDuKEVoqI+nKdYIlSNvNJgV+w\njeJJ2Ch+F0tdD0glKi4qWm5EexSh/w7OHnGJZys/xKlDA8UmiLbXAtk6CgiARC+V\nyR9sM8imq4GYJw8UxFNhykvK90mpHbHQNNG3FqVidU1EYQRZQD33IIPRW9yF6RHK\ntgq8+QZ7ykHvtRmImBOLSIH8zz/1YeaHWhqeKANendJN6wk5GpIvcgYh6XCHD3Jo\n8fT85Xv6GsvQrGcGCaY/Lbh//xaxQOI06Wvv1U4l/LnNVXMt+3SFWhiVlqN6jiPp\nTkDR8CFpw+GkKi/GJ4DRdvFDWBuB0J5f+f9qpwlgHJKZHlmUI4UIkDbYqdhz52lu\n0TVorrFcbXPp7VgqWLssFtXbEkgZsGlVrqlh1CihbKhB24rAe7vMlUd37IimHJiT\ni8Qf8Kuyaw8aXmcxPXxVM0m/lmFbhNFrVAt3nG7Ppn5EEfZZdmFmB0XcUW8C2gC0\ndaHL4uxY7dIM5u0QF7wHK7hb3bFWuh0DQvfhBzgO0KRJpmALiZgkMzVqpCwvYSFQ\n749RqZpRY7z9sfymylA49Xg3S57hH+sWYf6WOrMZinvhQlN95aUaWicGMOma3hNJ\nEmd9OmDG8tcZYtT9FMiMKk2b0c32ROEBJgbkGRX3DT0NVytPvmJuUfcq9MCXqWBh\ndOymxqzQbCuYMvKQ\n=pMc2\n-----END PGP SIGNATURE-----",
        "payload": "tree ace45ffc031943b1ebfe9454f9437f5d1efecb11\nparent 92f49857530af0ebe80d8e60146158595bcb3c7d\nauthor Fabian Jahr <fjahr@protonmail.com> 1567022333 -0400\ncommitter Fabian Jahr <fjahr@protonmail.com> 1589552600 +0200\n\ntest: Add unit test for UTXO Stats Index\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d1b1ecf0f823881fd50075c211ff053aec5af9c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9d1b1ecf0f823881fd50075c211ff053aec5af9c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d1b1ecf0f823881fd50075c211ff053aec5af9c/comments",
    "author": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "92f49857530af0ebe80d8e60146158595bcb3c7d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92f49857530af0ebe80d8e60146158595bcb3c7d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/92f49857530af0ebe80d8e60146158595bcb3c7d"
      }
    ],
    "stats": {
      "total": 78,
      "additions": 78,
      "deletions": 0
    },
    "files": [
      {
        "sha": "a9e5da5cc6c33b9fcbcdcc5a0f43aa7bd9ab737f",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d1b1ecf0f823881fd50075c211ff053aec5af9c/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d1b1ecf0f823881fd50075c211ff053aec5af9c/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=9d1b1ecf0f823881fd50075c211ff053aec5af9c",
        "patch": "@@ -199,6 +199,7 @@ BITCOIN_TESTS =\\\n   test/bswap_tests.cpp \\\n   test/checkqueue_tests.cpp \\\n   test/coins_tests.cpp \\\n+  test/coinstatsindex_tests.cpp \\\n   test/compilerbug_tests.cpp \\\n   test/compress_tests.cpp \\\n   test/crypto_tests.cpp \\"
      },
      {
        "sha": "09b1f14df183b1ec6ef03c6324154dd0713af483",
        "filename": "src/test/coinstatsindex_tests.cpp",
        "status": "added",
        "additions": 77,
        "deletions": 0,
        "changes": 77,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d1b1ecf0f823881fd50075c211ff053aec5af9c/src/test/coinstatsindex_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d1b1ecf0f823881fd50075c211ff053aec5af9c/src/test/coinstatsindex_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/coinstatsindex_tests.cpp?ref=9d1b1ecf0f823881fd50075c211ff053aec5af9c",
        "patch": "@@ -0,0 +1,77 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <index/coinstatsindex.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_AUTO_TEST_SUITE(coinstatsindex_tests)\n+\n+BOOST_FIXTURE_TEST_CASE(coinstatsindex_initial_sync, TestChain100Setup)\n+{\n+    CoinStatsIndex coin_stats_index(1 << 20, true);\n+\n+    CCoinsStats coin_stats;\n+    const CBlockIndex* block_index;\n+    {\n+        LOCK(cs_main);\n+        block_index = ::ChainActive().Tip();\n+    }\n+\n+    // CoinStatsIndex should not be found before it is started.\n+    BOOST_CHECK(!coin_stats_index.LookupStats(block_index, coin_stats));\n+\n+    // BlockUntilSyncedToCurrentChain should return false before CoinStatsIndex\n+    // is started.\n+    BOOST_CHECK(!coin_stats_index.BlockUntilSyncedToCurrentChain());\n+\n+    coin_stats_index.Start();\n+\n+    // Allow the CoinStatsIndex to catch up with the block index that is syncing\n+    // in a background thread.\n+    constexpr int64_t timeout_ms = 120 * 1000;\n+    int64_t time_start = GetTimeMillis();\n+    while (!coin_stats_index.BlockUntilSyncedToCurrentChain()) {\n+        BOOST_REQUIRE(time_start + timeout_ms > GetTimeMillis());\n+        UninterruptibleSleep(std::chrono::milliseconds{100});\n+    }\n+\n+    // Check that CoinStatsIndex works for genesis block.\n+    const CBlockIndex* genesis_block_index;\n+    {\n+        LOCK(cs_main);\n+        genesis_block_index = ::ChainActive().Genesis();\n+    }\n+    BOOST_CHECK(coin_stats_index.LookupStats(genesis_block_index, coin_stats));\n+\n+    // Check that CoinStatsIndex updates with new blocks.\n+    coin_stats_index.LookupStats(block_index, coin_stats);\n+\n+    CScript scriptPubKey = CScript() << ToByteVector(coinbaseKey.GetPubKey()) << OP_CHECKSIG;\n+    std::vector<CMutableTransaction> noTxns;\n+    CreateAndProcessBlock(noTxns, scriptPubKey);\n+\n+    // Let the CoinStatsIndex to catch up again.\n+    BOOST_CHECK(coin_stats_index.BlockUntilSyncedToCurrentChain());\n+\n+    CCoinsStats new_coin_stats;\n+    const CBlockIndex* new_block_index;\n+    {\n+        LOCK(cs_main);\n+        new_block_index = ::ChainActive().Tip();\n+    }\n+    coin_stats_index.LookupStats(new_block_index, new_coin_stats);\n+\n+    BOOST_CHECK(block_index != new_block_index);\n+    BOOST_CHECK(coin_stats.hashSerialized != new_coin_stats.hashSerialized);\n+\n+    // Shutdown sequence (c.f. Shutdown() in init.cpp)\n+    coin_stats_index.Stop();\n+\n+    // Rest of shutdown sequence and destructors happen in ~TestingSetup()\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "58cf819caabe98a584a508f66a9f4fc347f8dfeb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1OGNmODE5Y2FhYmU5OGE1ODRhNTA4ZjY2YTlmNGZjMzQ3ZjhkZmVi",
    "commit": {
      "author": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2020-05-15T14:14:07Z"
      },
      "committer": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2020-05-15T15:06:09Z"
      },
      "message": "rpc: gettxoutsetinfo can be requested for specific blockheights",
      "tree": {
        "sha": "0bc9cbad9ffcb7362a8d9112046851d958fe81b7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0bc9cbad9ffcb7362a8d9112046851d958fe81b7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/58cf819caabe98a584a508f66a9f4fc347f8dfeb",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQJJBAABCgAzFiEEtFq20ghhrCHSdrgm8T0enYkHmM0FAl6+r+QVHGZqYWhyQHBy\nb3Rvbm1haWwuY29tAAoJEPE9Hp2JB5jNf7gP/AlQcfKYo3e39we0IgnohQ4/y21i\niQP2wLgkQwDukHjLRYwws3Mn5Rv7tmKSKLgC8S/ZFJmVgCfTV6Dw/3K8HibGeXQw\nNlzYFi1gNXgoODgXeIj3QkmYP8HFmddDR+wJUyZAmAUFaOdcH1aDH6/la7KP0/r+\nVuDyQHykfVF3oeaxQzgVdquc7A8xorA/vf3rgxpldgSSB4CtgaCZ5S4eiAQIRhmM\nA0Gm1UGRzCkDl4rxbyGNXaw/nHYg7OD39i/bmIIZVgrpaePFHnbfFW9stxRYVSTw\nk07qlM6KSs9gAyH4SlxBHaNWWPFtWKseVqDJbO9MrQT8Ggv5FaJrB6XkFfGUb49Y\nmASzvEd5VSFeV9nfjkWY34hdZ/LQTe35yfZGonaP6uWkwqrNGysamRxOlF3lew7v\nzzpAme5/msZB7+KbswYeSdWYs1BZDxOCR9go6ZcY/eepwDcS64T/9xcQod1cvwlC\nhPGDXryQ3mBozqZOtMc8q8Z4OCKs6lMQmjy4xbbJ1nCmnCQZvBoaLr0oQTuam8/C\nUfU2Y6HOVPlRyWeI/r/DIJaPGu4Hnef4HMZY9ErJzeEO6NmKsFRaNvNDqgv910RE\nAIWq2MF2u0mmYsmHJIZgYpJjpSz/mLFu6+KxC/W58tGXzT24HZL6uWkBc6ZTlLD7\nP3y4j+mzkA2olghG\n=beEp\n-----END PGP SIGNATURE-----",
        "payload": "tree 0bc9cbad9ffcb7362a8d9112046851d958fe81b7\nparent 9d1b1ecf0f823881fd50075c211ff053aec5af9c\nauthor Fabian Jahr <fjahr@protonmail.com> 1589552047 +0200\ncommitter Fabian Jahr <fjahr@protonmail.com> 1589555169 +0200\n\nrpc: gettxoutsetinfo can be requested for specific blockheights\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/58cf819caabe98a584a508f66a9f4fc347f8dfeb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/58cf819caabe98a584a508f66a9f4fc347f8dfeb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/58cf819caabe98a584a508f66a9f4fc347f8dfeb/comments",
    "author": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9d1b1ecf0f823881fd50075c211ff053aec5af9c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d1b1ecf0f823881fd50075c211ff053aec5af9c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9d1b1ecf0f823881fd50075c211ff053aec5af9c"
      }
    ],
    "stats": {
      "total": 126,
      "additions": 87,
      "deletions": 39
    },
    "files": [
      {
        "sha": "e6313fe0d6ad80f74b3fa2a4b2ceaa84e0ba75ec",
        "filename": "src/node/coinstats.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 8,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/58cf819caabe98a584a508f66a9f4fc347f8dfeb/src/node/coinstats.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/58cf819caabe98a584a508f66a9f4fc347f8dfeb/src/node/coinstats.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/coinstats.cpp?ref=58cf819caabe98a584a508f66a9f4fc347f8dfeb",
        "patch": "@@ -39,24 +39,30 @@ uint256 GetTruncatedSHA512Hash(const COutPoint& outpoint, const Coin& coin) {\n     return ss.GetHash();\n }\n \n+bool GetUTXOStats(CCoinsView* view, CCoinsStats& stats) {\n+    return GetUTXOStats(view, stats, nullptr);\n+};\n+\n //! Calculate statistics about the unspent transaction output set\n-bool GetUTXOStats(CCoinsView *view, CCoinsStats &stats)\n+bool GetUTXOStats(CCoinsView *view, CCoinsStats &stats, const CBlockIndex* pindex)\n {\n     stats = CCoinsStats();\n     std::unique_ptr<CCoinsViewCursor> pcursor(view->Cursor());\n     assert(pcursor);\n-    stats.hashBlock = pcursor->GetBestBlock();\n \n-    const CBlockIndex* block_index;\n-    {\n-        LOCK(cs_main);\n-        block_index = LookupBlockIndex(pcursor->GetBestBlock());\n+    if (pindex == nullptr) {\n+        {\n+            LOCK(cs_main);\n+            pindex = LookupBlockIndex(pcursor->GetBestBlock());\n+        }\n     }\n-    stats.nHeight = block_index->nHeight;\n+\n+    stats.hashBlock = pindex->GetBlockHash();\n+    stats.nHeight = pindex->nHeight;\n \n     // Use CoinStatsIndex if it is available\n     if (g_coin_stats_index) {\n-        if (g_coin_stats_index->LookupStats(block_index, stats)) {\n+        if (g_coin_stats_index->LookupStats(pindex, stats)) {\n             return true;\n         } else {\n             return false;"
      },
      {
        "sha": "e0a34eb1fbab159ef56eef79f06d7ed9674fb077",
        "filename": "src/node/coinstats.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/58cf819caabe98a584a508f66a9f4fc347f8dfeb/src/node/coinstats.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/58cf819caabe98a584a508f66a9f4fc347f8dfeb/src/node/coinstats.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/coinstats.h?ref=58cf819caabe98a584a508f66a9f4fc347f8dfeb",
        "patch": "@@ -8,6 +8,7 @@\n \n #include <amount.h>\n #include <coins.h>\n+#include <chain.h>\n #include <uint256.h>\n \n #include <cstdint>\n@@ -29,6 +30,7 @@ struct CCoinsStats\n };\n \n //! Calculate statistics about the unspent transaction output set\n+bool GetUTXOStats(CCoinsView* view, CCoinsStats& stats, const CBlockIndex* pindex);\n bool GetUTXOStats(CCoinsView* view, CCoinsStats& stats);\n \n //! Calculate a TruncatedSHA512 hash for a specific UTXO"
      },
      {
        "sha": "d59dc76bf4d3cd4909427b6bab40aeef5f2626fd",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 52,
        "deletions": 31,
        "changes": 83,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/58cf819caabe98a584a508f66a9f4fc347f8dfeb/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/58cf819caabe98a584a508f66a9f4fc347f8dfeb/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=58cf819caabe98a584a508f66a9f4fc347f8dfeb",
        "patch": "@@ -14,6 +14,7 @@\n #include <core_io.h>\n #include <hash.h>\n #include <index/blockfilterindex.h>\n+#include <index/coinstatsindex.h>\n #include <node/coinstats.h>\n #include <node/context.h>\n #include <node/utxo_snapshot.h>\n@@ -96,6 +97,35 @@ static int ComputeNextBlockAndDepth(const CBlockIndex* tip, const CBlockIndex* b\n     return blockindex == tip ? 1 : -1;\n }\n \n+CBlockIndex* ParseHashOrHeight(const UniValue& param) {\n+    if (param.isNum()) {\n+        const int height = param.get_int();\n+        const int current_tip = ::ChainActive().Height();\n+        if (height < 0) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Target block height %d is negative\", height));\n+        }\n+        if (height > current_tip) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Target block height %d after current tip %d\", height, current_tip));\n+        }\n+\n+        return ::ChainActive()[height];\n+    } else {\n+        const uint256 hash(ParseHashV(param, \"hash_or_height\"));\n+        CBlockIndex* pindex;\n+        {\n+            LOCK(cs_main);\n+            pindex = LookupBlockIndex(hash);\n+        }\n+        if (!pindex) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+        }\n+        if (!::ChainActive().Contains(pindex)) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Block is not in chain %s\", Params().NetworkIDString()));\n+        }\n+        return pindex;\n+    }\n+}\n+\n UniValue blockheaderToJSON(const CBlockIndex* tip, const CBlockIndex* blockindex)\n {\n     // Serialize passed information without accessing chain state of the active chain!\n@@ -953,8 +983,10 @@ static UniValue gettxoutsetinfo(const JSONRPCRequest& request)\n {\n             RPCHelpMan{\"gettxoutsetinfo\",\n                 \"\\nReturns statistics about the unspent transaction output set.\\n\"\n-                \"Note this call may take some time.\\n\",\n-                {},\n+                \"Note this call may take some time if you are not using coinstatsindex.\\n\",\n+                {\n+                    {\"hash_or_height\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"The block hash or height of the target height\", \"\", {\"\", \"string or numeric\"}},\n+                },\n                 RPCResult{\n                     RPCResult::Type::OBJ, \"\", \"\",\n                     {\n@@ -967,18 +999,31 @@ static UniValue gettxoutsetinfo(const JSONRPCRequest& request)\n                         {RPCResult::Type::STR_AMOUNT, \"total_amount\", \"The total amount\"},\n                     }},\n                 RPCExamples{\n-                    HelpExampleCli(\"gettxoutsetinfo\", \"\")\n-            + HelpExampleRpc(\"gettxoutsetinfo\", \"\")\n+                    HelpExampleCli(\"gettxoutsetinfo\", \"\") +\n+                    HelpExampleCli(\"gettxoutsetinfo\", R\"(1000)\") +\n+                    HelpExampleCli(\"gettxoutsetinfo\", R\"('\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\"')\") +\n+                    HelpExampleRpc(\"gettxoutsetinfo\", \"\") +\n+                    HelpExampleRpc(\"gettxoutsetinfo\", R\"(1000)\") +\n+                    HelpExampleRpc(\"gettxoutsetinfo\", R\"(\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\")\")\n                 },\n             }.Check(request);\n \n     UniValue ret(UniValue::VOBJ);\n \n     CCoinsStats stats;\n     ::ChainstateActive().ForceFlushStateToDisk();\n+    CBlockIndex* pindex{nullptr};\n+\n+    if (!request.params[0].isNull()) {\n+        if (!g_coin_stats_index) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Querying specific block heights requires CoinStatsIndex\");\n+        }\n+\n+        pindex = ParseHashOrHeight(request.params[0]);\n+    }\n \n     CCoinsView* coins_view = WITH_LOCK(cs_main, return &ChainstateActive().CoinsDB());\n-    if (GetUTXOStats(coins_view, stats)) {\n+    if (GetUTXOStats(coins_view, stats, pindex)) {\n         ret.pushKV(\"height\", (int64_t)stats.nHeight);\n         ret.pushKV(\"bestblock\", stats.hashBlock.GetHex());\n         ret.pushKV(\"txouts\", (int64_t)stats.nTransactionOutputs);\n@@ -1723,31 +1768,7 @@ static UniValue getblockstats(const JSONRPCRequest& request)\n                 },\n     }.Check(request);\n \n-    LOCK(cs_main);\n-\n-    CBlockIndex* pindex;\n-    if (request.params[0].isNum()) {\n-        const int height = request.params[0].get_int();\n-        const int current_tip = ::ChainActive().Height();\n-        if (height < 0) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Target block height %d is negative\", height));\n-        }\n-        if (height > current_tip) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Target block height %d after current tip %d\", height, current_tip));\n-        }\n-\n-        pindex = ::ChainActive()[height];\n-    } else {\n-        const uint256 hash(ParseHashV(request.params[0], \"hash_or_height\"));\n-        pindex = LookupBlockIndex(hash);\n-        if (!pindex) {\n-            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n-        }\n-        if (!::ChainActive().Contains(pindex)) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Block is not in chain %s\", Params().NetworkIDString()));\n-        }\n-    }\n-\n+    CBlockIndex* pindex = ParseHashOrHeight(request.params[0]);\n     CHECK_NONFATAL(pindex != nullptr);\n \n     std::set<std::string> stats;\n@@ -2360,7 +2381,7 @@ static const CRPCCommand commands[] =\n     { \"blockchain\",         \"getmempoolinfo\",         &getmempoolinfo,         {} },\n     { \"blockchain\",         \"getrawmempool\",          &getrawmempool,          {\"verbose\"} },\n     { \"blockchain\",         \"gettxout\",               &gettxout,               {\"txid\",\"n\",\"include_mempool\"} },\n-    { \"blockchain\",         \"gettxoutsetinfo\",        &gettxoutsetinfo,        {} },\n+    { \"blockchain\",         \"gettxoutsetinfo\",        &gettxoutsetinfo,        {\"hash_or_height\"} },\n     { \"blockchain\",         \"pruneblockchain\",        &pruneblockchain,        {\"height\"} },\n     { \"blockchain\",         \"savemempool\",            &savemempool,            {} },\n     { \"blockchain\",         \"verifychain\",            &verifychain,            {\"checklevel\",\"nblocks\"} },"
      },
      {
        "sha": "bfa575eb147234acc2a4c7bc7b26cc00bc21554e",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/58cf819caabe98a584a508f66a9f4fc347f8dfeb/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/58cf819caabe98a584a508f66a9f4fc347f8dfeb/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=58cf819caabe98a584a508f66a9f4fc347f8dfeb",
        "patch": "@@ -135,6 +135,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"verifychain\", 0, \"checklevel\" },\n     { \"verifychain\", 1, \"nblocks\" },\n     { \"getblockstats\", 0, \"hash_or_height\" },\n+    { \"gettxoutsetinfo\", 0, \"hash_or_height\" },\n     { \"getblockstats\", 1, \"stats\" },\n     { \"pruneblockchain\", 0, \"height\" },\n     { \"keypoolrefill\", 0, \"newsize\" },"
      },
      {
        "sha": "d313ce001b9002073956169931090ff69daeb324",
        "filename": "test/functional/feature_coinstatsindex.py",
        "status": "modified",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/58cf819caabe98a584a508f66a9f4fc347f8dfeb/test/functional/feature_coinstatsindex.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/58cf819caabe98a584a508f66a9f4fc347f8dfeb/test/functional/feature_coinstatsindex.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_coinstatsindex.py?ref=58cf819caabe98a584a508f66a9f4fc347f8dfeb",
        "patch": "@@ -12,6 +12,7 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n+    assert_raises_rpc_error,\n     try_rpc,\n     wait_until,\n )\n@@ -57,6 +58,23 @@ def _test_coin_stats_index(self):\n         # Everything left should be the same\n         assert_equal(res1, res0)\n \n+        self.log.info(\"Test that gettxoutsetinfo() can get fetch data on specific heights with index\")\n+\n+        # Generate a new tip\n+        node.generate(5)\n+\n+        # Fetch old stats by height\n+        res2 = index_node.gettxoutsetinfo(102)\n+        del res2['disk_size']\n+        assert_equal(res0, res2)\n+\n+        # Fetch old stats by hash\n+        res3 = index_node.gettxoutsetinfo(res0['bestblock'])\n+        del res3['disk_size']\n+        assert_equal(res0, res3)\n+\n+        # It does not work without coinstatsindex\n+        assert_raises_rpc_error(-8, \"Querying specific block heights requires CoinStatsIndex\", node.gettxoutsetinfo, 102)\n \n if __name__ == '__main__':\n     CoinStatsIndexTest().main()"
      }
    ]
  }
]