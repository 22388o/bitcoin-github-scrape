[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/578354949",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18000#issuecomment-578354949",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18000",
    "id": 578354949,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3ODM1NDk0OQ==",
    "user": {
      "login": "DrahtBot",
      "id": 39886733,
      "node_id": "MDQ6VXNlcjM5ODg2NzMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/39886733?u=3c1e73d828cf5a5850dfc25c8397c1cf751db5ac&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DrahtBot",
      "html_url": "https://github.com/DrahtBot",
      "followers_url": "https://api.github.com/users/DrahtBot/followers",
      "following_url": "https://api.github.com/users/DrahtBot/following{/other_user}",
      "gists_url": "https://api.github.com/users/DrahtBot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
      "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
      "repos_url": "https://api.github.com/users/DrahtBot/repos",
      "events_url": "https://api.github.com/users/DrahtBot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-25T00:37:55Z",
    "updated_at": "2020-05-20T23:49:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18795 (Test: wallet issue with orphaned rewards by domob1812)\n* #18354 (Protect wallet by using shared pointers by bvbfan)\n* #17786 (refactor: Nuke policy/fees->mempool circular dependencies by hebasto)\n* #13462 (Make SER_GETHASH implicit for CHashWriter and SerializeHash by Empact)\n* #10443 (Add fee_est tool for debugging fee estimation code by ryanofsky)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/578354949/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/578859737",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18000#issuecomment-578859737",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18000",
    "id": 578859737,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3ODg1OTczNw==",
    "user": {
      "login": "emilengler",
      "id": 12272949,
      "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
      "avatar_url": "https://avatars.githubusercontent.com/u/12272949?u=af673194d7bec2979082dcffd59c38f4fec70078&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/emilengler",
      "html_url": "https://github.com/emilengler",
      "followers_url": "https://api.github.com/users/emilengler/followers",
      "following_url": "https://api.github.com/users/emilengler/following{/other_user}",
      "gists_url": "https://api.github.com/users/emilengler/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/emilengler/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
      "organizations_url": "https://api.github.com/users/emilengler/orgs",
      "repos_url": "https://api.github.com/users/emilengler/repos",
      "events_url": "https://api.github.com/users/emilengler/events{/privacy}",
      "received_events_url": "https://api.github.com/users/emilengler/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-27T17:27:08Z",
    "updated_at": "2020-01-27T17:27:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'm reviewing and testing it right now but from some benchmarks I did, I saw how the time goes down by 50%. However the performance increases by 19% percent.\r\n\r\nRegtest results only right now\r\n\r\nOn master (ef8e2cee9f5d157eeb3139b64e9c3a5fa4bf36f3):\r\n```\r\n$ time src/bitcoin-cli --regtest gettxoutsetinfo\r\n...\r\n> src/bitcoin-cli --regtest gettxoutsetinfo  0,00s user 0,00s system 23% cpu 0,014 total\r\n```\r\nWith this PR\r\n```\r\n$ time src/bitcoin-cli --regtest gettxoutsetinfo\r\n...\r\n> src/bitcoin-cli --regtest gettxoutsetinfo  0,00s user 0,00s system 42% cpu 0,007 total\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/578859737/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/578926752",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18000#issuecomment-578926752",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18000",
    "id": 578926752,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3ODkyNjc1Mg==",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-27T20:03:03Z",
    "updated_at": "2020-01-27T20:03:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "Can you say more about current use cases of the `gettxoutsetinfo` function and maybe future use cases if it's significantly faster with this change?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/578926752/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/578957115",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18000#issuecomment-578957115",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18000",
    "id": 578957115,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3ODk1NzExNQ==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-27T21:18:06Z",
    "updated_at": "2020-01-27T21:18:06Z",
    "author_association": "MEMBER",
    "body": "I think it's perfectly fine to drop the \"transactions\" statistics. It doesn't really mean anything; it just happened to be easy to compute pre-pertxout, but even now it's mostly a hack.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/578957115/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/579009007",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18000#issuecomment-579009007",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18000",
    "id": 579009007,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3OTAwOTAwNw==",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?u=348c27f90b6fff8fd72fa27232272651436a2ff0&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-27T23:40:10Z",
    "updated_at": "2020-01-27T23:40:10Z",
    "author_association": "CONTRIBUTOR",
    "body": "@emilengler  Thanks for giving it a try! But I think the benchmarks you are comparing are not well suited in this case. I assume you are running a standard regtest network, maybe generated a few hundred blocks and made some transactions by hand. In this case the UTXO set is very small and iterating over it will be extremely fast, so that it would not surprise me if there is no measurable upside to using the index (maybe it will be even a little slower as you saw). But the goal of this index is that the time of the call will stay constant for a realistically sized UTXO set. So a better indicator would be to try it on a synced mainnet or testnet node, where `gettxoutset` currently takes several minutes without the index, even on pretty high powered hardware.\r\n\r\n@ryanofsky  Sure, I will go along the different statistics the call provides to highlight which ones I think are more or less important:\r\n- `total_amount` The total amount of the current bitcoin supply. Tracking this number on a continual basis allows users to detect potential inflation bugs, such as CVE-2018-17144 (Example: [Bitmex Research](https://blog.bitmex.com/forkmonitor-unexpected-inflation-detection-and-warning-system/)). I think all users should be given the chance to continually check this, even on more affordable hardware. I am currently running a mainnet node on an Odroid HC2 and `gettxoutsetinfo` takes 7min 50s. Specs are roughly comparable to a Raspberry Pi 4, so it can keep up well with the chain otherwise. If I wanted to run a continual inflation detection on this hardware, I would not be able to do so when the UTXO set has grown another 20-25% (ignoring hashrate fluctuations).\r\n- `hash_serialized_2` The serialized hash of the UTXO set can be used for a quick comparison of the UTXO set between different notes. Essentially, it can be a stand-in for the latest blockhash and compared for sanity checks. BTCPayServer has been using it for their [FastSync](https://github.com/btcpayserver/btcpayserver-docker/tree/master/contrib/FastSync) feature, which will probably be replaced with `assume_utxo`, where a UTXO set hash (not necessarily this one) will play a role as well. I still need to sync up with @jamesob  about the latest plans for the hash and how this proposal can be compatible with his or even help/support it.\r\n- `txouts` The total number of unspent outputs is an interesting number to track from an operations standpoint. Users can see if coins are being consolidated or at which rate the UTXO set is growing. Example: [satoshi.info](https://statoshi.info/dashboard/db/unspent-transaction-output-set)\r\n- `bogosize` and `disk_size` might be also interesting to track but not as actionable, disc usage is probably much more efficient to collect from the OS\r\n- `transactions` it seems to be a nice-to-have metric that does not serve any real purpose afaict, as @sipa also noted\r\n- `height` and `bestblock` can be ignored since they are available from other RPCs, but are necessary to compare numbers between different machines\r\n\r\nFor future use cases (aside from integration with `assume_utxo` potentially) I don't have specific ideas yet, but it opens the door to track any other statistics of the UTXO set or block content in the index. So it may collect further metrics of interest where users currently parse the block data with their own custom software.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/579009007/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/579418971",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18000#issuecomment-579418971",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18000",
    "id": 579418971,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3OTQxODk3MQ==",
    "user": {
      "login": "emilengler",
      "id": 12272949,
      "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
      "avatar_url": "https://avatars.githubusercontent.com/u/12272949?u=af673194d7bec2979082dcffd59c38f4fec70078&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/emilengler",
      "html_url": "https://github.com/emilengler",
      "followers_url": "https://api.github.com/users/emilengler/followers",
      "following_url": "https://api.github.com/users/emilengler/following{/other_user}",
      "gists_url": "https://api.github.com/users/emilengler/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/emilengler/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
      "organizations_url": "https://api.github.com/users/emilengler/orgs",
      "repos_url": "https://api.github.com/users/emilengler/repos",
      "events_url": "https://api.github.com/users/emilengler/events{/privacy}",
      "received_events_url": "https://api.github.com/users/emilengler/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-28T19:39:14Z",
    "updated_at": "2020-01-28T19:39:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "@fjahr I'm a bit confused now, I ran the tests again on a full chain and master is MUCH faster than this Pull Request (4 MINUTES faster)\r\nOn master (2755b2b1092d0286022cf3cc3028e96f6bee2b34)\r\n```\r\n$ time src/bitcoin-cli --datadir=/media/emil/Files/Bitcoin/ gettxoutsetinfo\r\n{\r\n  \"height\": 614943,\r\n  \"bestblock\": \"0000000000000000000fa03a2ce4c6d7fb763e55402deac32371b898e8faba5e\",\r\n  \"transactions\": 38747934,\r\n  \"txouts\": 65245740,\r\n  \"bogosize\": 4903711195,\r\n  \"hash_serialized_2\": \"011d3eccd148b68a3bf039f0695bb4d77a23ba208dcd4d8ac073d867fd5bbef6\",\r\n  \"disk_size\": 4035082036,\r\n  \"total_amount\": 18186617.32125282\r\n}\r\nsrc/bitcoin-cli --datadir=/media/emil/Files/Bitcoin/ gettxoutsetinfo  0,00s user 0,01s system 0% cpu 57,428 total\r\n```\r\nOn fjahr:utxo-stats-index-rebase (663dbfbd1da60e91c9576629ace82b712d31668c)\r\n```\r\n$ time src/bitcoin-cli --datadir=/media/emil/Files/Bitcoin/ gettxoutsetinfo\r\n{\r\n  \"height\": 614937,\r\n  \"bestblock\": \"00000000000000000005973a14ac338b681e410922c7566e435107db1b1d807b\",\r\n  \"transactions\": 38745882,\r\n  \"txouts\": 65244661,\r\n  \"bogosize\": 4903634025,\r\n  \"utxo_set_hash\": \"87d3e7f807d6b428bf60e983a73137ef410cb510de1b5f4e650e081d044fc772\",\r\n  \"disk_size\": 4082447626,\r\n  \"total_amount\": 18186542.32125282\r\n}\r\nsrc/bitcoin-cli --datadir=/media/emil/Files/Bitcoin/ gettxoutsetinfo  0,01s user 0,00s system 0% cpu 5:01,42 total\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/579418971/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/579917647",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18000#issuecomment-579917647",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18000",
    "id": 579917647,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3OTkxNzY0Nw==",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-29T19:22:59Z",
    "updated_at": "2020-01-29T19:22:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "> @ryanofsky Sure, I will go along the different statistics the call provides to highlight which ones I think are more or less important:\r\n\r\nThanks, this information is really clarifying. I wonder if some of it could be incorporated in the reference documentation (without mentioning specific CVE's or software projects), or maybe if it would be useful as part of some wiki. In any case, this definitely helps motivate the PR, so concept ACK from me",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/579917647/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/580375400",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18000#issuecomment-580375400",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18000",
    "id": 580375400,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4MDM3NTQwMA==",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?u=348c27f90b6fff8fd72fa27232272651436a2ff0&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-30T17:53:03Z",
    "updated_at": "2020-01-30T17:53:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "@emilengler did you actually start `bitcoind` with `-coinstatsindex`? I mention it briefly in the PR description, but as @ryanofsky already pointed out as well, I need to do a much better job at documenting the intent and current state of the proposal. It seems so because otherwise you could not test it that quickly, building up the index takes a quite long time and while the index is building up `gettxoutsetinfo` is responding with \"unable to read UTXO set\". In fact, on my machine, it is currently so slow that I might have to address it. But running a plain IBD is also incredibly slow right now so it could also be a local issue. What is probably happening is that you are running `bitcoind` without the flag and so the stats are still calculated by iterating over the UTXO set but the hash is using the new hashing algorithm (Muhash), which is slower and results in slower performance when not using the index.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/580375400/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/580401182",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18000#issuecomment-580401182",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18000",
    "id": 580401182,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4MDQwMTE4Mg==",
    "user": {
      "login": "emilengler",
      "id": 12272949,
      "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
      "avatar_url": "https://avatars.githubusercontent.com/u/12272949?u=af673194d7bec2979082dcffd59c38f4fec70078&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/emilengler",
      "html_url": "https://github.com/emilengler",
      "followers_url": "https://api.github.com/users/emilengler/followers",
      "following_url": "https://api.github.com/users/emilengler/following{/other_user}",
      "gists_url": "https://api.github.com/users/emilengler/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/emilengler/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
      "organizations_url": "https://api.github.com/users/emilengler/orgs",
      "repos_url": "https://api.github.com/users/emilengler/repos",
      "events_url": "https://api.github.com/users/emilengler/events{/privacy}",
      "received_events_url": "https://api.github.com/users/emilengler/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-30T18:55:36Z",
    "updated_at": "2020-01-30T18:55:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "> @emilengler did you actually start bitcoind with -coinstatsindex?\r\n\r\nno, sorry oversaw that",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/580401182/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/580442697",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18000#issuecomment-580442697",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18000",
    "id": 580442697,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4MDQ0MjY5Nw==",
    "user": {
      "login": "emilengler",
      "id": 12272949,
      "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
      "avatar_url": "https://avatars.githubusercontent.com/u/12272949?u=af673194d7bec2979082dcffd59c38f4fec70078&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/emilengler",
      "html_url": "https://github.com/emilengler",
      "followers_url": "https://api.github.com/users/emilengler/followers",
      "following_url": "https://api.github.com/users/emilengler/following{/other_user}",
      "gists_url": "https://api.github.com/users/emilengler/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/emilengler/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
      "organizations_url": "https://api.github.com/users/emilengler/orgs",
      "repos_url": "https://api.github.com/users/emilengler/repos",
      "events_url": "https://api.github.com/users/emilengler/events{/privacy}",
      "received_events_url": "https://api.github.com/users/emilengler/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-30T20:22:16Z",
    "updated_at": "2020-01-30T20:22:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hmmm I get this error message now:\r\n```\r\nerror code: -32603\r\nerror message:\r\nUnable to read UTXO set\r\n\r\n```\r\nthe chain state is about ~2 days old",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/580442697/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/580445887",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18000#issuecomment-580445887",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18000",
    "id": 580445887,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4MDQ0NTg4Nw==",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?u=348c27f90b6fff8fd72fa27232272651436a2ff0&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-30T20:30:12Z",
    "updated_at": "2020-01-30T20:30:12Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Hmmm I get this error message now:\r\n> \r\n> ```\r\n> error code: -32603\r\n> error message:\r\n> Unable to read UTXO set\r\n> ```\r\n> \r\n> the chain state is about ~2 days old\r\n\r\nYeah, that means the index is syncing at the moment. You should see the progress in the logs of `bitcoind`. Something like `Syncing coinstatsindex with block chain from height XXXXX`.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/580445887/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/596004565",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18000#issuecomment-596004565",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18000",
    "id": 596004565,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5NjAwNDU2NQ==",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?u=348c27f90b6fff8fd72fa27232272651436a2ff0&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-03-06T23:16:23Z",
    "updated_at": "2020-03-06T23:16:23Z",
    "author_association": "CONTRIBUTOR",
    "body": "First of all, thanks for taking early looks and comments @ariard , @ryanofsky, @emilengler , @jnewbery (offline). Your comments should be mostly addressed in the latest code changes and in further information below. With the latest fixes and performance improvements, this should be now ready for real review and testing.\r\n\r\n# Short recap of changes (this changed slightly)\r\n- Introduces `MuHash3072` and `TruncatedSHA256Writer` implementations (code by Pieter Wuille)\r\n- Uses above for MuHash hashing alogrithm for the UTXO set hash in `gettxoutsetinfo`\r\n- Removed tracking of the transactions count statistic\r\n- Introduces `CoinStatsIndex` class, an index for all the statistics in `gettxoutsetinfo`\r\n- Allows activating the index using the flag `-coinstatsindex`. When activated `gettxoutsetinfo` responds within seconds after the initial sync phase. Otherwise it works as before but will be slower to parse the UTXO set due to the change in the hashing algorithm.\r\n\r\n# Benchmarking\r\n- For reference, on my benchmarking server and my local machine, IBD takes around 18-19 hours\r\n- I can provide more detailed numbers if required but so far I am pretty confident that it's not a bottleneck even for users on under-powered nodes.\r\n\r\n## How long does the sync of the CoinStatsIndex take?\r\n- On my benchmarking server syncing the Coinstatsindex after IBD took between 8.5 and 9.5h hours\r\n- On my local machine, I also synced testnet and it took 8h 20min.\r\n\r\n## How about the growth of the UTXO set (ariard's question above)?\r\n- For the sync time of the index should actually not make much of a difference if the UTXO set shrinks or grows, it should rather grow linearly with the size of the blockchain.\r\n- Instead, growth of the UTXO set causes `gettxoutsetinfo` without the index to run longer because it iterates over it every time and so it is one of the reasons why I think the index is worth integrating into core.\r\n\r\n# TBD\r\n- Although its a lot of LOC I think the changes are still ok to be reviewed as one PR but if people would prefer me to split it into two or three smaller PRs that is easily doable.\r\n- The newly introduced metric `coins count` that is only used in Assume UTXO is not in the index and I don't think there is a practical way to integrate it (similar problem to transaction count). That means it will probably not be possible to have this index running and create a new assume utxo set on the same node at the same time. I will need to discuss this with @jamesob  to make sure this dealt with correctly one Assume UTXO is finished.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/596004565/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/596015652",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18000#issuecomment-596015652",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18000",
    "id": 596015652,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5NjAxNTY1Mg==",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?u=348c27f90b6fff8fd72fa27232272651436a2ff0&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-03-07T00:08:14Z",
    "updated_at": "2020-03-07T00:08:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "Rebased",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/596015652/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/602084423",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18000#issuecomment-602084423",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18000",
    "id": 602084423,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYwMjA4NDQyMw==",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?u=348c27f90b6fff8fd72fa27232272651436a2ff0&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-03-21T18:33:31Z",
    "updated_at": "2020-03-21T18:33:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "Latest changes fixed/clarified lots of comments/documentation and finally made Travis happy (when it runs again).",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/602084423/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/607801159",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18000#issuecomment-607801159",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18000",
    "id": 607801159,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYwNzgwMTE1OQ==",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?u=348c27f90b6fff8fd72fa27232272651436a2ff0&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-04-02T11:57:53Z",
    "updated_at": "2020-04-02T11:57:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "Rebased.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/607801159/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/614260156",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18000#issuecomment-614260156",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18000",
    "id": 614260156,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxNDI2MDE1Ng==",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?u=348c27f90b6fff8fd72fa27232272651436a2ff0&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-04-15T20:20:55Z",
    "updated_at": "2020-04-15T20:20:55Z",
    "author_association": "CONTRIBUTOR",
    "body": "Removed the last commit which was just a small test improvement that became redundant after a recently merged change.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/614260156/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/615535173",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18000#issuecomment-615535173",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18000",
    "id": 615535173,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxNTUzNTE3Mw==",
    "user": {
      "login": "pierreN",
      "id": 946757,
      "node_id": "MDQ6VXNlcjk0Njc1Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/946757?u=553fed41054860471c4d4658273ab8dfd882fbba&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pierreN",
      "html_url": "https://github.com/pierreN",
      "followers_url": "https://api.github.com/users/pierreN/followers",
      "following_url": "https://api.github.com/users/pierreN/following{/other_user}",
      "gists_url": "https://api.github.com/users/pierreN/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pierreN/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pierreN/subscriptions",
      "organizations_url": "https://api.github.com/users/pierreN/orgs",
      "repos_url": "https://api.github.com/users/pierreN/repos",
      "events_url": "https://api.github.com/users/pierreN/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pierreN/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-04-18T01:38:02Z",
    "updated_at": "2020-04-18T01:38:02Z",
    "author_association": "CONTRIBUTOR",
    "body": "Nice PR. I just tested this on my laptop (slow SSD, i7-6700HQ). No issue to report.\r\n\r\nOn master, `gettxoutsetinfo` takes 55s to complete. On this branch less than a second.\r\nThe `coinstatsindex` thread took around 7h30mn to complete.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/615535173/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/616162700",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18000#issuecomment-616162700",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18000",
    "id": 616162700,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxNjE2MjcwMA==",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?u=348c27f90b6fff8fd72fa27232272651436a2ff0&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-04-19T15:29:12Z",
    "updated_at": "2020-04-19T15:29:12Z",
    "author_association": "CONTRIBUTOR",
    "body": "Another rebase, no code changes.\r\n\r\nThanks for testing @pierreN !",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/616162700/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/629296641",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18000#issuecomment-629296641",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18000",
    "id": 629296641,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyOTI5NjY0MQ==",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?u=348c27f90b6fff8fd72fa27232272651436a2ff0&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-15T15:15:49Z",
    "updated_at": "2020-05-15T15:15:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks for the review and the great questions!\r\n\r\n> Concept ACK.\r\n> \r\n> Is there any reference document for MuHash3072? If so, it would be good to link to that in the header file. In particular, does the (single) test vector exist anywhere else?\r\n\r\nI did a bit of research when I started the work on this but I am not aware of any reference document or official test vectors. Maybe @sipa knows if I missed something?\r\n \r\n> The [mailinglist post](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014337.html) you mentioned at the top also contains useful background.\r\n> \r\n> This particular part of the post might be worth copying (leaving only the MuHash part):\r\n> \r\n> > Interestingly, both ECMH and MuHash not only support adding set\r\n> > elements in any order but also deleting in any order. As a result, we\r\n> > can simply maintain a running sum for the UTXO set as a whole, and\r\n> > add/subtract when creating/spending an output in it. In the case of\r\n> > MuHash it is slightly more complicated, as computing an inverse is\r\n> > relatively expensive. This can be solved by representing the running\r\n> > value as a fraction, and multiplying created elements into the\r\n> > numerator and spent elements into the denominator. Only when the final\r\n> > hash is desired, a single modular inverse and multiplication is needed\r\n> > to combine the two.\r\n> \r\n> > As the update operations are also associative, H(a)+H(b)+H(c)+H(d) can\r\n> > in fact be computed as (H(a)+H(b)) + (H(c)+H(d)). This implies that\r\n> > all of this is perfectly parallellizable: each thread can process an\r\n> > arbitrary subset of the update operations, allowing them to be\r\n> > efficiently combined later.\r\n\r\nAdded an adapted version of this text to `muhash.h`.\r\n\r\n> I can't speak to the cryptographic assumptions underlying MuHash, but at the least within the scope of this PR it's not used for anything security critical. As the mailinglist discussion pointed out, this feature is a good way to gain more experience with this type of hashing in a non consensus-critical manner.\r\n> \r\n> I also can't say anything intelligent about the implementation, other than that it's nice and short. Maybe @practicalswift can add a fuzz harness?\r\n\r\nHappy to work on a fuzz harness myself, I am trying to get some more experience with it :)\r\n\r\n> [b208dfd](https://github.com/bitcoin/bitcoin/commit/b208dfd5712bdc658217c84d276d82e92cb2cf47) `Add TruncatedSHA256Writer` needs a test.\r\n\r\nI am currently a bit unsure of what the right way to go is for this. A first observation is that `CHashWriter` is also untested. I think both these classes are pretty thin wrappers of the actual hash functions they use, so a test might not provide much value. But `TruncatedSHA256Writer` does a bit more, so I think it could still be valuable to have a sanity check test. I was looking for any test vectors provided for [SHA-512/256](https://eprint.iacr.org/2010/548.pdf) and while there are is no official set, at least [these](https://csrc.nist.gov/csrc/media/projects/cryptographic-standards-and-guidelines/documents/examples/sha512_256.pdf) could be enough for a sanity check. However, the problem is that for SHA-512/256 different initializers are used. We reuse SHA-512 for simplicity reasons, I guess. It's easy enough to add the other initializers. I am just not sure it worth the additional review effort. Another fact that I stumbled over, is that the serializer used here is writing the null character of a string into the hash, where I am not sure if that is a bug but it certainly makes working with test vectors hard.\r\n\r\nSo, I am not sure if adding SHA-512/256 is worth it. And I am also unsure if a test for `TruncatedSHA256Writer` would be valuable without test vectors and given the only limited logic inside the class.\r\n\r\nI would be happy to get input from @sipa here. \r\n \r\n> I think you can safely squash [f59d222](https://github.com/bitcoin/bitcoin/commit/f59d2223199d26ef591d9a3fc3282b19a4cb833a) into the original and make yourself `Co-Authored-By`? You're not changing the algorithm.\r\n\r\ndone\r\n\r\n> I'm currently running [cf6ba16](https://github.com/bitcoin/bitcoin/commit/cf6ba169ae1999a98db831900d36e0571a9d933d) and building a mainnet index on macOS 10.15.4. I'll update my comment with an example result from a recent block. I ran the first 100K blocks with `--enable-debug`, stopped and continued without debug.\r\n> \r\n> Concept ACK on dropping transaction count from `gettxoutsetinfo`. \"The number of transactions with unspent outputs\" seems a useless metric. If someone does have a use case for it, hopefully we'll learn before the release. In that case it could be added to `getblock`.\r\n> \r\n> I got very confused by the indexer code in [8e17009](https://github.com/bitcoin/bitcoin/commit/8e17009dcc4de977ced030e624b18ecc6ba19e63), sorry for any dumb questions...\r\n\r\nI will try to add more comments to make it easier to understand.\r\n\r\n> If it's not too big a code change, adding a `height` argument to `gettxoutsetinfo` would unleash the power of this index, and also make it easier to compare hashes between reviewers. It also makes it easier to manually compare against the hash generated without an index (with something a bit more complex than the functional test).\r\n\r\nDone, I had planned to do this as a follow-up anyway and with the removal of some duplicate code, the number of LOC has hardly grown.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/629296641/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/634006275",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18000#issuecomment-634006275",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18000",
    "id": 634006275,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzNDAwNjI3NQ==",
    "user": {
      "login": "DrahtBot",
      "id": 39886733,
      "node_id": "MDQ6VXNlcjM5ODg2NzMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/39886733?u=3c1e73d828cf5a5850dfc25c8397c1cf751db5ac&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DrahtBot",
      "html_url": "https://github.com/DrahtBot",
      "followers_url": "https://api.github.com/users/DrahtBot/followers",
      "following_url": "https://api.github.com/users/DrahtBot/following{/other_user}",
      "gists_url": "https://api.github.com/users/DrahtBot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
      "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
      "repos_url": "https://api.github.com/users/DrahtBot/repos",
      "events_url": "https://api.github.com/users/DrahtBot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-26T12:54:34Z",
    "updated_at": "2020-05-26T12:54:34Z",
    "author_association": "CONTRIBUTOR",
    "body": "<!--cf906140f33d8803c4a75a2196329ecb-->\n\ud83d\udc19 This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/634006275/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/641423019",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18000#issuecomment-641423019",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18000",
    "id": 641423019,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0MTQyMzAxOQ==",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-09T16:39:11Z",
    "updated_at": "2020-06-09T16:39:11Z",
    "author_association": "MEMBER",
    "body": "In #19145 (missing in OP) you're adding a `hash_type` option to `gettxoutsetinfo`, which can be `none`. This makes an index immediately useful, even without MuHash. So you make a PR for that independently.\r\n\r\nAdding MuHash to the index later might be annoying, however if the plan is to support different hash types, it sounds like MuHash should be in a separate index from the coin stats anyway?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/641423019/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/644745625",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18000#issuecomment-644745625",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18000",
    "id": 644745625,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0NDc0NTYyNQ==",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?u=348c27f90b6fff8fd72fa27232272651436a2ff0&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-16T12:57:29Z",
    "updated_at": "2020-06-16T12:57:29Z",
    "author_association": "CONTRIBUTOR",
    "body": "> In #19145 (missing in OP) you're adding a `hash_type` option to `gettxoutsetinfo`, which can be `none`. This makes an index immediately useful, even without MuHash. So you make a PR for that independently.\r\n> \r\n> Adding MuHash to the index later might be annoying, however if the plan is to support different hash types, it sounds like MuHash should be in a separate index from the coin stats anyway?\r\n\r\nI needed to reflect a bit on this but now do I think it would be good to offer the index already without the hash. But I think to keep the hash in a different index and letting users set these with separate settings might be too much responsibility for the users. I would suggest a more opinionated approach. Rather than having `-coinstatsindex=none` and `-coinstatsindex=muhash` later I would suggest it stays `-coinstatsindex` and at first there would be no hash and users would only get a fast response when they use `hash_type=none`, then muhash can be added to the index and users will then be receiving responses from the index with `hash_type=none` and `hash_type=muhash`. Personally I think we don't want to have a lot of hash types, too much unnecessary choice for the user. I think we use this now to support hash_serialized_2 for some time and maybe also to run ECMH in parallel but ideally we should be ending up at one hash_type that is the default and most of the other options can probably be removed.\r\n\r\nI will prepare the alternate PRs with only `hash_type=none` and I hope I can make so people are not totally confused by all the different PRs. :)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/644745625/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/708323204",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18000#issuecomment-708323204",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18000",
    "id": 708323204,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwODMyMzIwNA==",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-14T10:49:23Z",
    "updated_at": "2020-10-14T10:49:23Z",
    "author_association": "MEMBER",
    "body": "PR 19105 is merged",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/708323204/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/822128975",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18000#issuecomment-822128975",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18000",
    "id": 822128975,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyMjEyODk3NQ==",
    "user": {
      "login": "Rspigler",
      "id": 24482484,
      "node_id": "MDQ6VXNlcjI0NDgyNDg0",
      "avatar_url": "https://avatars.githubusercontent.com/u/24482484?u=7354800fee53a3db4ba3c6aa40de4ea8c3bf58f0&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Rspigler",
      "html_url": "https://github.com/Rspigler",
      "followers_url": "https://api.github.com/users/Rspigler/followers",
      "following_url": "https://api.github.com/users/Rspigler/following{/other_user}",
      "gists_url": "https://api.github.com/users/Rspigler/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Rspigler/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Rspigler/subscriptions",
      "organizations_url": "https://api.github.com/users/Rspigler/orgs",
      "repos_url": "https://api.github.com/users/Rspigler/repos",
      "events_url": "https://api.github.com/users/Rspigler/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Rspigler/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-04-19T02:44:35Z",
    "updated_at": "2021-04-19T02:44:35Z",
    "author_association": "NONE",
    "body": "Chart can be updated as PR #19055 and #19145 have been merged",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/822128975/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/826162051",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18000#issuecomment-826162051",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18000",
    "id": 826162051,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyNjE2MjA1MQ==",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?u=348c27f90b6fff8fd72fa27232272651436a2ff0&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-04-24T22:33:45Z",
    "updated_at": "2021-04-24T22:33:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Chart can be updated as PR #19055 and #19145 have been merged\r\n\r\nThanks for the reminder, done!",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/826162051/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/826273232",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18000#issuecomment-826273232",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18000",
    "id": 826273232,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyNjI3MzIzMg==",
    "user": {
      "login": "Rspigler",
      "id": 24482484,
      "node_id": "MDQ6VXNlcjI0NDgyNDg0",
      "avatar_url": "https://avatars.githubusercontent.com/u/24482484?u=7354800fee53a3db4ba3c6aa40de4ea8c3bf58f0&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Rspigler",
      "html_url": "https://github.com/Rspigler",
      "followers_url": "https://api.github.com/users/Rspigler/followers",
      "following_url": "https://api.github.com/users/Rspigler/following{/other_user}",
      "gists_url": "https://api.github.com/users/Rspigler/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Rspigler/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Rspigler/subscriptions",
      "organizations_url": "https://api.github.com/users/Rspigler/orgs",
      "repos_url": "https://api.github.com/users/Rspigler/repos",
      "events_url": "https://api.github.com/users/Rspigler/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Rspigler/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-04-25T07:23:15Z",
    "updated_at": "2021-04-25T07:23:15Z",
    "author_association": "NONE",
    "body": "I don't mean to spam the PR, but the chart was updated incorrectly.\r\n\r\nPR 19055 is merged but marked as open\r\nPR 19181 is open but marked as merged\r\n\r\nThank you for all your work!",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/826273232/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/826298875",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18000#issuecomment-826298875",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18000",
    "id": 826298875,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyNjI5ODg3NQ==",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?u=348c27f90b6fff8fd72fa27232272651436a2ff0&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-04-25T10:20:14Z",
    "updated_at": "2021-04-25T10:20:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "> I don't mean to spam the PR, but the chart was updated incorrectly.\r\n> \r\n> PR 19055 is merged but marked as open\r\n> PR 19181 is open but marked as merged\r\n> \r\n> Thank you for all your work!\r\n\r\nThanks, I was too hastily. Fixed.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/826298875/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/383619253",
    "pull_request_review_id": 363825551,
    "id": 383619253,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYxOTI1Mw==",
    "diff_hunk": "@@ -43,6 +44,27 @@ bool GetUTXOStats(CCoinsView *view, CCoinsStats &stats)\n     std::unique_ptr<CCoinsViewCursor> pcursor(view->Cursor());\n     assert(pcursor);\n \n+    // Use CoinStatsIndex if it is available\n+    if (g_coin_stats_index) {\n+        const CBlockIndex* block_index;\n+        {\n+            LOCK(cs_main);\n+            block_index = LookupBlockIndex(pcursor->GetBestBlock());\n+        }\n+\n+        if (g_coin_stats_index->LookupStats(block_index, stats)) {\n+            stats.hashBlock = pcursor->GetBestBlock();\n+            {\n+                LOCK(cs_main);",
    "path": "src/node/coinstats.cpp",
    "position": null,
    "original_position": 23,
    "commit_id": "58cf819caabe98a584a508f66a9f4fc347f8dfeb",
    "original_commit_id": "b5f112cb0acfd3431fabc13012aa32a18cb4d7d0",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "b5f112c\r\n\r\nCan't you use `block_index->nHeight`  here and avoid a lock ?",
    "created_at": "2020-02-25T01:59:38Z",
    "updated_at": "2020-05-15T15:06:29Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18000#discussion_r383619253",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18000",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/383619253"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18000#discussion_r383619253"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18000"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/383619253/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 58,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/383623566",
    "pull_request_review_id": 363825551,
    "id": 383623566,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYyMzU2Ng==",
    "diff_hunk": "@@ -0,0 +1,408 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <crypto/muhash.h>\n+#include <hash.h>\n+#include <index/coinstatsindex.h>\n+#include <node/coinstats.h>\n+#include <serialize.h>\n+#include <txdb.h>\n+#include <undo.h>\n+#include <validation.h>\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+constexpr char DB_MUHASH = 'M';\n+\n+namespace {\n+\n+struct DBVal {\n+    uint256 muhash;\n+    uint64_t nTransactions;\n+    uint64_t nTransactionOutputs;\n+    uint64_t nBogoSize;\n+    CAmount nTotalAmount;\n+    uint64_t coins_count;\n+    uint64_t nDiskSize;\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        READWRITE(muhash);\n+        READWRITE(nTransactions);\n+        READWRITE(nTransactionOutputs);\n+        READWRITE(nBogoSize);\n+        READWRITE(nTotalAmount);\n+        READWRITE(coins_count);\n+        READWRITE(nDiskSize);\n+    }\n+};\n+\n+struct DBHeightKey {\n+    int height;\n+\n+    DBHeightKey() : height(0) {}\n+    explicit DBHeightKey(int height_in) : height(height_in) {}\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        ser_writedata8(s, DB_BLOCK_HEIGHT);\n+        ser_writedata32be(s, height);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        char prefix = ser_readdata8(s);\n+        if (prefix != DB_BLOCK_HEIGHT) {\n+            throw std::ios_base::failure(\"Invalid format for block filter index DB height key\");\n+        }\n+        height = ser_readdata32be(s);\n+    }\n+};\n+\n+struct DBHashKey {\n+    uint256 block_hash;\n+\n+    explicit DBHashKey(const uint256& hash_in) : block_hash(hash_in) {}\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        char prefix = DB_BLOCK_HASH;\n+        READWRITE(prefix);\n+        if (prefix != DB_BLOCK_HASH) {\n+            throw std::ios_base::failure(\"Invalid format for block filter index DB hash key\");\n+        }\n+\n+        READWRITE(block_hash);\n+    }\n+};\n+\n+struct DBMuhash {\n+    MuHash3072 hash;\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        READWRITE(hash);\n+    }\n+};\n+\n+}; // namespace\n+\n+std::unique_ptr<CoinStatsIndex> g_coin_stats_index;\n+\n+CoinStatsIndex::CoinStatsIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+{\n+    fs::path path = GetDataDir() / \"indexes\" / \"coinstats\";\n+    fs::create_directories(path);\n+\n+    m_db = MakeUnique<CoinStatsIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);\n+}\n+\n+bool CoinStatsIndex::Init()\n+{\n+    if (!m_db->Read(DB_MUHASH, m_muhash)) {\n+        // Check that the cause of the read failure is that the key does not exist. Any other errors\n+        // indicate database corruption or a disk failure, and starting the index would cause\n+        // further corruption.\n+        if (m_db->Exists(DB_MUHASH)) {\n+            return error(\"%s: Cannot read current %s state; index may be corrupted\",\n+                         __func__, GetName());\n+        }\n+\n+        // If the DB_MUHASH is not set, initialize empty values\n+        m_muhash = MuHash3072();\n+        m_nTransactions = 0;\n+        m_nTransactionOutputs = 0;\n+        m_nBogoSize = 0;\n+        m_nTotalAmount = 0;\n+        m_coins_count = 0;\n+        m_nDiskSize = 0;\n+    }\n+\n+    return BaseIndex::Init();\n+}\n+\n+bool CoinStatsIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+\n+    // Ignore genesis block\n+    if (pindex->nHeight > 0) {",
    "path": "src/index/coinstatsindex.cpp",
    "position": 134,
    "original_position": 140,
    "commit_id": "58cf819caabe98a584a508f66a9f4fc347f8dfeb",
    "original_commit_id": "93db4a5018b81a4b9e9998ce859568ed3341c354",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "93db4a5\r\n\r\nThere is a coinbase output in the genesis block?",
    "created_at": "2020-02-25T02:17:10Z",
    "updated_at": "2020-05-15T15:06:29Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18000#discussion_r383623566",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18000",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/383623566"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18000#discussion_r383623566"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18000"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/383623566/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 134,
    "original_line": 134,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/383624117",
    "pull_request_review_id": 363825551,
    "id": 383624117,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYyNDExNw==",
    "diff_hunk": "@@ -0,0 +1,408 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <crypto/muhash.h>\n+#include <hash.h>\n+#include <index/coinstatsindex.h>\n+#include <node/coinstats.h>\n+#include <serialize.h>\n+#include <txdb.h>\n+#include <undo.h>\n+#include <validation.h>\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+constexpr char DB_MUHASH = 'M';\n+\n+namespace {\n+\n+struct DBVal {\n+    uint256 muhash;\n+    uint64_t nTransactions;\n+    uint64_t nTransactionOutputs;\n+    uint64_t nBogoSize;\n+    CAmount nTotalAmount;\n+    uint64_t coins_count;\n+    uint64_t nDiskSize;\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        READWRITE(muhash);\n+        READWRITE(nTransactions);\n+        READWRITE(nTransactionOutputs);\n+        READWRITE(nBogoSize);\n+        READWRITE(nTotalAmount);\n+        READWRITE(coins_count);\n+        READWRITE(nDiskSize);\n+    }\n+};\n+\n+struct DBHeightKey {\n+    int height;\n+\n+    DBHeightKey() : height(0) {}\n+    explicit DBHeightKey(int height_in) : height(height_in) {}\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        ser_writedata8(s, DB_BLOCK_HEIGHT);\n+        ser_writedata32be(s, height);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        char prefix = ser_readdata8(s);\n+        if (prefix != DB_BLOCK_HEIGHT) {\n+            throw std::ios_base::failure(\"Invalid format for block filter index DB height key\");\n+        }\n+        height = ser_readdata32be(s);\n+    }\n+};\n+\n+struct DBHashKey {\n+    uint256 block_hash;\n+\n+    explicit DBHashKey(const uint256& hash_in) : block_hash(hash_in) {}\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        char prefix = DB_BLOCK_HASH;\n+        READWRITE(prefix);\n+        if (prefix != DB_BLOCK_HASH) {\n+            throw std::ios_base::failure(\"Invalid format for block filter index DB hash key\");\n+        }\n+\n+        READWRITE(block_hash);\n+    }\n+};\n+\n+struct DBMuhash {\n+    MuHash3072 hash;\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        READWRITE(hash);\n+    }\n+};\n+\n+}; // namespace\n+\n+std::unique_ptr<CoinStatsIndex> g_coin_stats_index;\n+\n+CoinStatsIndex::CoinStatsIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+{\n+    fs::path path = GetDataDir() / \"indexes\" / \"coinstats\";\n+    fs::create_directories(path);\n+\n+    m_db = MakeUnique<CoinStatsIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);\n+}\n+\n+bool CoinStatsIndex::Init()\n+{\n+    if (!m_db->Read(DB_MUHASH, m_muhash)) {\n+        // Check that the cause of the read failure is that the key does not exist. Any other errors\n+        // indicate database corruption or a disk failure, and starting the index would cause\n+        // further corruption.\n+        if (m_db->Exists(DB_MUHASH)) {\n+            return error(\"%s: Cannot read current %s state; index may be corrupted\",\n+                         __func__, GetName());\n+        }\n+\n+        // If the DB_MUHASH is not set, initialize empty values\n+        m_muhash = MuHash3072();\n+        m_nTransactions = 0;\n+        m_nTransactionOutputs = 0;\n+        m_nBogoSize = 0;\n+        m_nTotalAmount = 0;\n+        m_coins_count = 0;\n+        m_nDiskSize = 0;\n+    }\n+\n+    return BaseIndex::Init();\n+}\n+\n+bool CoinStatsIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+\n+    // Ignore genesis block\n+    if (pindex->nHeight > 0) {\n+        if (!UndoReadFromDisk(block_undo, pindex)) {\n+            return false;\n+        }\n+\n+        std::pair<uint256, DBVal> read_out;\n+        if (!m_db->Read(DBHeightKey(pindex->nHeight - 1), read_out)) {\n+            return false;\n+        }\n+\n+        uint256 expected_block_hash = pindex->pprev->GetBlockHash();\n+        if (read_out.first != expected_block_hash) {\n+            return error(\"%s: previous block header belongs to unexpected block %s; expected %s\",\n+                         __func__, read_out.first.ToString(), expected_block_hash.ToString());\n+        }\n+\n+        // TODO: deal with stats.coins_count++;\n+\n+        // Add the new utxos created from the block\n+        for (size_t i = 0; i < block.vtx.size(); ++i) {\n+            const auto& tx = block.vtx.at(i);\n+            // TODO: deal with m_nTransactions\n+\n+            for (size_t j = 0; j < tx->vout.size(); ++j) {\n+                // ignore segwit block OP_RETURN output with merkle root of witness tree\n+                if (tx->IsCoinBase() && j > 0) break;",
    "path": "src/index/coinstatsindex.cpp",
    "position": null,
    "original_position": 165,
    "commit_id": "58cf819caabe98a584a508f66a9f4fc347f8dfeb",
    "original_commit_id": "93db4a5018b81a4b9e9998ce859568ed3341c354",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "93db4a5\r\n\r\nAlso, OP_RETURN outputs shouldn't be considered (we remove them from utxo set IIRC) ?",
    "created_at": "2020-02-25T02:19:21Z",
    "updated_at": "2020-05-15T15:06:29Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18000#discussion_r383624117",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18000",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/383624117"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18000#discussion_r383624117"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18000"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/383624117/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 165,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/389187278",
    "pull_request_review_id": 370680065,
    "id": 389187278,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE4NzI3OA==",
    "diff_hunk": "@@ -0,0 +1,408 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <crypto/muhash.h>\n+#include <hash.h>\n+#include <index/coinstatsindex.h>\n+#include <node/coinstats.h>\n+#include <serialize.h>\n+#include <txdb.h>\n+#include <undo.h>\n+#include <validation.h>\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+constexpr char DB_MUHASH = 'M';\n+\n+namespace {\n+\n+struct DBVal {\n+    uint256 muhash;\n+    uint64_t nTransactions;\n+    uint64_t nTransactionOutputs;\n+    uint64_t nBogoSize;\n+    CAmount nTotalAmount;\n+    uint64_t coins_count;\n+    uint64_t nDiskSize;\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        READWRITE(muhash);\n+        READWRITE(nTransactions);\n+        READWRITE(nTransactionOutputs);\n+        READWRITE(nBogoSize);\n+        READWRITE(nTotalAmount);\n+        READWRITE(coins_count);\n+        READWRITE(nDiskSize);\n+    }\n+};\n+\n+struct DBHeightKey {\n+    int height;\n+\n+    DBHeightKey() : height(0) {}\n+    explicit DBHeightKey(int height_in) : height(height_in) {}\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        ser_writedata8(s, DB_BLOCK_HEIGHT);\n+        ser_writedata32be(s, height);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        char prefix = ser_readdata8(s);\n+        if (prefix != DB_BLOCK_HEIGHT) {\n+            throw std::ios_base::failure(\"Invalid format for block filter index DB height key\");\n+        }\n+        height = ser_readdata32be(s);\n+    }\n+};\n+\n+struct DBHashKey {\n+    uint256 block_hash;\n+\n+    explicit DBHashKey(const uint256& hash_in) : block_hash(hash_in) {}\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        char prefix = DB_BLOCK_HASH;\n+        READWRITE(prefix);\n+        if (prefix != DB_BLOCK_HASH) {\n+            throw std::ios_base::failure(\"Invalid format for block filter index DB hash key\");\n+        }\n+\n+        READWRITE(block_hash);\n+    }\n+};\n+\n+struct DBMuhash {\n+    MuHash3072 hash;\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        READWRITE(hash);\n+    }\n+};\n+\n+}; // namespace\n+\n+std::unique_ptr<CoinStatsIndex> g_coin_stats_index;\n+\n+CoinStatsIndex::CoinStatsIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+{\n+    fs::path path = GetDataDir() / \"indexes\" / \"coinstats\";\n+    fs::create_directories(path);\n+\n+    m_db = MakeUnique<CoinStatsIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);\n+}\n+\n+bool CoinStatsIndex::Init()\n+{\n+    if (!m_db->Read(DB_MUHASH, m_muhash)) {\n+        // Check that the cause of the read failure is that the key does not exist. Any other errors\n+        // indicate database corruption or a disk failure, and starting the index would cause\n+        // further corruption.\n+        if (m_db->Exists(DB_MUHASH)) {\n+            return error(\"%s: Cannot read current %s state; index may be corrupted\",\n+                         __func__, GetName());\n+        }\n+\n+        // If the DB_MUHASH is not set, initialize empty values\n+        m_muhash = MuHash3072();\n+        m_nTransactions = 0;\n+        m_nTransactionOutputs = 0;\n+        m_nBogoSize = 0;\n+        m_nTotalAmount = 0;\n+        m_coins_count = 0;\n+        m_nDiskSize = 0;\n+    }\n+\n+    return BaseIndex::Init();\n+}\n+\n+bool CoinStatsIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+\n+    // Ignore genesis block\n+    if (pindex->nHeight > 0) {\n+        if (!UndoReadFromDisk(block_undo, pindex)) {\n+            return false;\n+        }\n+\n+        std::pair<uint256, DBVal> read_out;\n+        if (!m_db->Read(DBHeightKey(pindex->nHeight - 1), read_out)) {\n+            return false;\n+        }\n+\n+        uint256 expected_block_hash = pindex->pprev->GetBlockHash();\n+        if (read_out.first != expected_block_hash) {\n+            return error(\"%s: previous block header belongs to unexpected block %s; expected %s\",\n+                         __func__, read_out.first.ToString(), expected_block_hash.ToString());\n+        }\n+\n+        // TODO: deal with stats.coins_count++;\n+\n+        // Add the new utxos created from the block\n+        for (size_t i = 0; i < block.vtx.size(); ++i) {\n+            const auto& tx = block.vtx.at(i);\n+            // TODO: deal with m_nTransactions\n+\n+            for (size_t j = 0; j < tx->vout.size(); ++j) {\n+                // ignore segwit block OP_RETURN output with merkle root of witness tree\n+                if (tx->IsCoinBase() && j > 0) break;",
    "path": "src/index/coinstatsindex.cpp",
    "position": null,
    "original_position": 165,
    "commit_id": "58cf819caabe98a584a508f66a9f4fc347f8dfeb",
    "original_commit_id": "93db4a5018b81a4b9e9998ce859568ed3341c354",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "You are right, fixed now!",
    "created_at": "2020-03-06T23:09:08Z",
    "updated_at": "2020-05-15T15:06:29Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18000#discussion_r389187278",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18000",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/389187278"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18000#discussion_r389187278"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18000"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/389187278/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 165,
    "side": "RIGHT",
    "in_reply_to_id": 383624117
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/389187404",
    "pull_request_review_id": 370680210,
    "id": 389187404,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE4NzQwNA==",
    "diff_hunk": "@@ -43,6 +44,27 @@ bool GetUTXOStats(CCoinsView *view, CCoinsStats &stats)\n     std::unique_ptr<CCoinsViewCursor> pcursor(view->Cursor());\n     assert(pcursor);\n \n+    // Use CoinStatsIndex if it is available\n+    if (g_coin_stats_index) {\n+        const CBlockIndex* block_index;\n+        {\n+            LOCK(cs_main);\n+            block_index = LookupBlockIndex(pcursor->GetBestBlock());\n+        }\n+\n+        if (g_coin_stats_index->LookupStats(block_index, stats)) {\n+            stats.hashBlock = pcursor->GetBestBlock();\n+            {\n+                LOCK(cs_main);",
    "path": "src/node/coinstats.cpp",
    "position": null,
    "original_position": 23,
    "commit_id": "58cf819caabe98a584a508f66a9f4fc347f8dfeb",
    "original_commit_id": "b5f112cb0acfd3431fabc13012aa32a18cb4d7d0",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done. Cleaned up that whole part considerably.",
    "created_at": "2020-03-06T23:09:36Z",
    "updated_at": "2020-05-15T15:06:29Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18000#discussion_r389187404",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18000",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/389187404"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18000#discussion_r389187404"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18000"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/389187404/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 58,
    "side": "RIGHT",
    "in_reply_to_id": 383619253
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/389187774",
    "pull_request_review_id": 370680657,
    "id": 389187774,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE4Nzc3NA==",
    "diff_hunk": "@@ -0,0 +1,408 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <crypto/muhash.h>\n+#include <hash.h>\n+#include <index/coinstatsindex.h>\n+#include <node/coinstats.h>\n+#include <serialize.h>\n+#include <txdb.h>\n+#include <undo.h>\n+#include <validation.h>\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+constexpr char DB_MUHASH = 'M';\n+\n+namespace {\n+\n+struct DBVal {\n+    uint256 muhash;\n+    uint64_t nTransactions;\n+    uint64_t nTransactionOutputs;\n+    uint64_t nBogoSize;\n+    CAmount nTotalAmount;\n+    uint64_t coins_count;\n+    uint64_t nDiskSize;\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        READWRITE(muhash);\n+        READWRITE(nTransactions);\n+        READWRITE(nTransactionOutputs);\n+        READWRITE(nBogoSize);\n+        READWRITE(nTotalAmount);\n+        READWRITE(coins_count);\n+        READWRITE(nDiskSize);\n+    }\n+};\n+\n+struct DBHeightKey {\n+    int height;\n+\n+    DBHeightKey() : height(0) {}\n+    explicit DBHeightKey(int height_in) : height(height_in) {}\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        ser_writedata8(s, DB_BLOCK_HEIGHT);\n+        ser_writedata32be(s, height);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        char prefix = ser_readdata8(s);\n+        if (prefix != DB_BLOCK_HEIGHT) {\n+            throw std::ios_base::failure(\"Invalid format for block filter index DB height key\");\n+        }\n+        height = ser_readdata32be(s);\n+    }\n+};\n+\n+struct DBHashKey {\n+    uint256 block_hash;\n+\n+    explicit DBHashKey(const uint256& hash_in) : block_hash(hash_in) {}\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        char prefix = DB_BLOCK_HASH;\n+        READWRITE(prefix);\n+        if (prefix != DB_BLOCK_HASH) {\n+            throw std::ios_base::failure(\"Invalid format for block filter index DB hash key\");\n+        }\n+\n+        READWRITE(block_hash);\n+    }\n+};\n+\n+struct DBMuhash {\n+    MuHash3072 hash;\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        READWRITE(hash);\n+    }\n+};\n+\n+}; // namespace\n+\n+std::unique_ptr<CoinStatsIndex> g_coin_stats_index;\n+\n+CoinStatsIndex::CoinStatsIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+{\n+    fs::path path = GetDataDir() / \"indexes\" / \"coinstats\";\n+    fs::create_directories(path);\n+\n+    m_db = MakeUnique<CoinStatsIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);\n+}\n+\n+bool CoinStatsIndex::Init()\n+{\n+    if (!m_db->Read(DB_MUHASH, m_muhash)) {\n+        // Check that the cause of the read failure is that the key does not exist. Any other errors\n+        // indicate database corruption or a disk failure, and starting the index would cause\n+        // further corruption.\n+        if (m_db->Exists(DB_MUHASH)) {\n+            return error(\"%s: Cannot read current %s state; index may be corrupted\",\n+                         __func__, GetName());\n+        }\n+\n+        // If the DB_MUHASH is not set, initialize empty values\n+        m_muhash = MuHash3072();\n+        m_nTransactions = 0;\n+        m_nTransactionOutputs = 0;\n+        m_nBogoSize = 0;\n+        m_nTotalAmount = 0;\n+        m_coins_count = 0;\n+        m_nDiskSize = 0;\n+    }\n+\n+    return BaseIndex::Init();\n+}\n+\n+bool CoinStatsIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+\n+    // Ignore genesis block\n+    if (pindex->nHeight > 0) {",
    "path": "src/index/coinstatsindex.cpp",
    "position": 134,
    "original_position": 140,
    "commit_id": "58cf819caabe98a584a508f66a9f4fc347f8dfeb",
    "original_commit_id": "93db4a5018b81a4b9e9998ce859568ed3341c354",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Yes, see https://www.blockchain.com/btc/block/0",
    "created_at": "2020-03-06T23:10:58Z",
    "updated_at": "2020-05-15T15:06:29Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18000#discussion_r389187774",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18000",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/389187774"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18000#discussion_r389187774"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18000"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/389187774/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 134,
    "original_line": 134,
    "side": "RIGHT",
    "in_reply_to_id": 383623566
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/396049928",
    "pull_request_review_id": 378968825,
    "id": 396049928,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA0OTkyOA==",
    "diff_hunk": "@@ -0,0 +1,408 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <crypto/muhash.h>\n+#include <hash.h>\n+#include <index/coinstatsindex.h>\n+#include <node/coinstats.h>\n+#include <serialize.h>\n+#include <txdb.h>\n+#include <undo.h>\n+#include <validation.h>\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+constexpr char DB_MUHASH = 'M';\n+\n+namespace {\n+\n+struct DBVal {\n+    uint256 muhash;\n+    uint64_t nTransactions;\n+    uint64_t nTransactionOutputs;\n+    uint64_t nBogoSize;\n+    CAmount nTotalAmount;\n+    uint64_t coins_count;\n+    uint64_t nDiskSize;\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        READWRITE(muhash);\n+        READWRITE(nTransactions);\n+        READWRITE(nTransactionOutputs);\n+        READWRITE(nBogoSize);\n+        READWRITE(nTotalAmount);\n+        READWRITE(coins_count);\n+        READWRITE(nDiskSize);\n+    }\n+};\n+\n+struct DBHeightKey {\n+    int height;\n+\n+    DBHeightKey() : height(0) {}\n+    explicit DBHeightKey(int height_in) : height(height_in) {}\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        ser_writedata8(s, DB_BLOCK_HEIGHT);\n+        ser_writedata32be(s, height);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        char prefix = ser_readdata8(s);\n+        if (prefix != DB_BLOCK_HEIGHT) {\n+            throw std::ios_base::failure(\"Invalid format for block filter index DB height key\");\n+        }\n+        height = ser_readdata32be(s);\n+    }\n+};\n+\n+struct DBHashKey {\n+    uint256 block_hash;\n+\n+    explicit DBHashKey(const uint256& hash_in) : block_hash(hash_in) {}\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        char prefix = DB_BLOCK_HASH;\n+        READWRITE(prefix);\n+        if (prefix != DB_BLOCK_HASH) {\n+            throw std::ios_base::failure(\"Invalid format for block filter index DB hash key\");\n+        }\n+\n+        READWRITE(block_hash);\n+    }\n+};\n+\n+struct DBMuhash {\n+    MuHash3072 hash;\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        READWRITE(hash);\n+    }\n+};\n+\n+}; // namespace\n+\n+std::unique_ptr<CoinStatsIndex> g_coin_stats_index;\n+\n+CoinStatsIndex::CoinStatsIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+{\n+    fs::path path = GetDataDir() / \"indexes\" / \"coinstats\";\n+    fs::create_directories(path);\n+\n+    m_db = MakeUnique<CoinStatsIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);\n+}\n+\n+bool CoinStatsIndex::Init()\n+{\n+    if (!m_db->Read(DB_MUHASH, m_muhash)) {\n+        // Check that the cause of the read failure is that the key does not exist. Any other errors\n+        // indicate database corruption or a disk failure, and starting the index would cause\n+        // further corruption.\n+        if (m_db->Exists(DB_MUHASH)) {\n+            return error(\"%s: Cannot read current %s state; index may be corrupted\",\n+                         __func__, GetName());\n+        }\n+\n+        // If the DB_MUHASH is not set, initialize empty values\n+        m_muhash = MuHash3072();\n+        m_nTransactions = 0;\n+        m_nTransactionOutputs = 0;\n+        m_nBogoSize = 0;\n+        m_nTotalAmount = 0;\n+        m_coins_count = 0;\n+        m_nDiskSize = 0;\n+    }\n+\n+    return BaseIndex::Init();\n+}\n+\n+bool CoinStatsIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+\n+    // Ignore genesis block\n+    if (pindex->nHeight > 0) {",
    "path": "src/index/coinstatsindex.cpp",
    "position": 134,
    "original_position": 140,
    "commit_id": "58cf819caabe98a584a508f66a9f4fc347f8dfeb",
    "original_commit_id": "93db4a5018b81a4b9e9998ce859568ed3341c354",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Ah my point was you may need to add the coinbase output is in the utxo set but apparently it can't be spent https://bitcoin.stackexchange.com/questions/10009/why-can-t-the-genesis-block-coinbase-be-spent. Good to know",
    "created_at": "2020-03-22T03:14:36Z",
    "updated_at": "2020-05-15T15:06:29Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18000#discussion_r396049928",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18000",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/396049928"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18000#discussion_r396049928"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18000"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/396049928/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 134,
    "original_line": 134,
    "side": "RIGHT",
    "in_reply_to_id": 383623566
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/415322303",
    "pull_request_review_id": 400510064,
    "id": 415322303,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMyMjMwMw==",
    "diff_hunk": "@@ -6,29 +6,33 @@\n #include <node/coinstats.h>\n \n #include <coins.h>\n+#include <crypto/muhash.h>\n #include <hash.h>\n #include <serialize.h>\n-#include <validation.h>\n #include <uint256.h>\n #include <util/system.h>\n+#include <validation.h>\n \n #include <map>\n \n-static void ApplyStats(CCoinsStats &stats, CHashWriter& ss, const uint256& hash, const std::map<uint32_t, Coin>& outputs)\n+static void ApplyStats(CCoinsStats &stats, MuHash3072& muhash, const uint256& hash, const std::map<uint32_t, Coin>& outputs)\n {\n     assert(!outputs.empty());\n-    ss << hash;\n-    ss << VARINT(outputs.begin()->second.nHeight * 2 + outputs.begin()->second.fCoinBase ? 1u : 0u);\n     for (const auto& output : outputs) {\n-        ss << VARINT(output.first + 1);",
    "path": "src/node/coinstats.cpp",
    "position": 24,
    "original_position": 21,
    "commit_id": "58cf819caabe98a584a508f66a9f4fc347f8dfeb",
    "original_commit_id": "d22951b3f8d79b5ec2069961c084c8d27b6b13fa",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In d22951b: what was the original rationale for `+1`?",
    "created_at": "2020-04-26T14:24:14Z",
    "updated_at": "2020-05-15T15:06:29Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18000#discussion_r415322303",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18000",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/415322303"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18000#discussion_r415322303"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18000"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/415322303/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 24,
    "original_line": 24,
    "side": "LEFT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/415323587",
    "pull_request_review_id": 400510064,
    "id": 415323587,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMyMzU4Nw==",
    "diff_hunk": "@@ -6,29 +6,33 @@\n #include <node/coinstats.h>\n \n #include <coins.h>\n+#include <crypto/muhash.h>\n #include <hash.h>\n #include <serialize.h>\n-#include <validation.h>\n #include <uint256.h>\n #include <util/system.h>\n+#include <validation.h>\n \n #include <map>\n \n-static void ApplyStats(CCoinsStats &stats, CHashWriter& ss, const uint256& hash, const std::map<uint32_t, Coin>& outputs)\n+static void ApplyStats(CCoinsStats &stats, MuHash3072& muhash, const uint256& hash, const std::map<uint32_t, Coin>& outputs)\n {\n     assert(!outputs.empty());\n-    ss << hash;\n-    ss << VARINT(outputs.begin()->second.nHeight * 2 + outputs.begin()->second.fCoinBase ? 1u : 0u);\n     for (const auto& output : outputs) {\n-        ss << VARINT(output.first + 1);\n-        ss << output.second.out.scriptPubKey;\n-        ss << VARINT_MODE(output.second.out.nValue, VarIntMode::NONNEGATIVE_SIGNED);\n+        COutPoint outpoint = COutPoint(hash, output.first);\n+        Coin coin = output.second;\n+\n+        TruncatedSHA512Writer ss(SER_DISK, 0);\n+        ss << outpoint;\n+        ss << (uint32_t)(coin.nHeight * 2 + coin.fCoinBase);",
    "path": "src/node/coinstats.cpp",
    "position": null,
    "original_position": 29,
    "commit_id": "58cf819caabe98a584a508f66a9f4fc347f8dfeb",
    "original_commit_id": "d22951b3f8d79b5ec2069961c084c8d27b6b13fa",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In d22951b3f8d79b5ec2069961c084c8d27b6b13fa: this may be a good time to explain what `coin.nHeight * 2 + coin.fCoinBase` is good for. I guess it reserves 1 bit to indicate if this is a coinbase, but why do we care about that? Maybe BIP30 related?",
    "created_at": "2020-04-26T14:31:02Z",
    "updated_at": "2020-05-15T15:06:29Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18000#discussion_r415323587",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18000",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/415323587"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18000#discussion_r415323587"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18000"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/415323587/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 27,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/415325693",
    "pull_request_review_id": 400510064,
    "id": 415325693,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMyNTY5Mw==",
    "diff_hunk": "@@ -0,0 +1,57 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INDEX_COINSTATSINDEX_H\n+#define BITCOIN_INDEX_COINSTATSINDEX_H\n+\n+#include <chain.h>\n+#include <crypto/muhash.h>\n+#include <flatfile.h>\n+#include <index/base.h>\n+#include <node/coinstats.h>\n+\n+/**\n+ * CoinStatsIndex maintains a rolling hash of the utxo set and\n+ * other updated coin statistics.\n+ */\n+class CoinStatsIndex final : public BaseIndex\n+{\n+private:\n+    std::string m_name;\n+    std::unique_ptr<BaseIndex::DB> m_db;\n+\n+    MuHash3072 m_muhash;\n+    uint64_t m_nTransactionOutputs;",
    "path": "src/index/coinstatsindex.h",
    "position": null,
    "original_position": 25,
    "commit_id": "58cf819caabe98a584a508f66a9f4fc347f8dfeb",
    "original_commit_id": "8e17009dcc4de977ced030e624b18ecc6ba19e63",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: snake case, e.g. `m_transaction_output_count`  https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md",
    "created_at": "2020-04-26T14:40:15Z",
    "updated_at": "2020-05-15T15:06:29Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18000#discussion_r415325693",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18000",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/415325693"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18000#discussion_r415325693"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18000"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/415325693/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 25,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/415326350",
    "pull_request_review_id": 400510064,
    "id": 415326350,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMyNjM1MA==",
    "diff_hunk": "@@ -0,0 +1,407 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <crypto/muhash.h>\n+#include <hash.h>\n+#include <index/coinstatsindex.h>\n+#include <node/coinstats.h>\n+#include <serialize.h>\n+#include <txdb.h>\n+#include <undo.h>\n+#include <validation.h>\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+constexpr char DB_MUHASH = 'M';\n+\n+namespace {\n+\n+struct DBVal {\n+    uint256 muhash;\n+    uint64_t nTransactionOutputs;\n+    uint64_t nBogoSize;\n+    CAmount nTotalAmount;\n+    uint64_t nDiskSize;\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        READWRITE(muhash);\n+        READWRITE(nTransactionOutputs);\n+        READWRITE(nBogoSize);\n+        READWRITE(nTotalAmount);\n+        READWRITE(nDiskSize);\n+    }\n+};\n+\n+struct DBHeightKey {\n+    int height;\n+\n+    DBHeightKey() : height(0) {}\n+    explicit DBHeightKey(int height_in) : height(height_in) {}\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        ser_writedata8(s, DB_BLOCK_HEIGHT);\n+        ser_writedata32be(s, height);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        char prefix = ser_readdata8(s);\n+        if (prefix != DB_BLOCK_HEIGHT) {\n+            throw std::ios_base::failure(\"Invalid format for block filter index DB height key\");",
    "path": "src/index/coinstatsindex.cpp",
    "position": null,
    "original_position": 59,
    "commit_id": "58cf819caabe98a584a508f66a9f4fc347f8dfeb",
    "original_commit_id": "8e17009dcc4de977ced030e624b18ecc6ba19e63",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "\"coin stats index\" (same below)",
    "created_at": "2020-04-26T14:43:21Z",
    "updated_at": "2020-05-15T15:06:29Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18000#discussion_r415326350",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18000",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/415326350"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18000#discussion_r415326350"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18000"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/415326350/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 59,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/415327363",
    "pull_request_review_id": 400510064,
    "id": 415327363,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMyNzM2Mw==",
    "diff_hunk": "@@ -0,0 +1,407 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <crypto/muhash.h>\n+#include <hash.h>\n+#include <index/coinstatsindex.h>\n+#include <node/coinstats.h>\n+#include <serialize.h>\n+#include <txdb.h>\n+#include <undo.h>\n+#include <validation.h>\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+constexpr char DB_MUHASH = 'M';\n+\n+namespace {\n+\n+struct DBVal {\n+    uint256 muhash;\n+    uint64_t nTransactionOutputs;\n+    uint64_t nBogoSize;\n+    CAmount nTotalAmount;\n+    uint64_t nDiskSize;\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        READWRITE(muhash);\n+        READWRITE(nTransactionOutputs);\n+        READWRITE(nBogoSize);\n+        READWRITE(nTotalAmount);\n+        READWRITE(nDiskSize);\n+    }\n+};\n+\n+struct DBHeightKey {\n+    int height;\n+\n+    DBHeightKey() : height(0) {}\n+    explicit DBHeightKey(int height_in) : height(height_in) {}\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        ser_writedata8(s, DB_BLOCK_HEIGHT);\n+        ser_writedata32be(s, height);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        char prefix = ser_readdata8(s);\n+        if (prefix != DB_BLOCK_HEIGHT) {\n+            throw std::ios_base::failure(\"Invalid format for block filter index DB height key\");\n+        }\n+        height = ser_readdata32be(s);\n+    }\n+};\n+\n+struct DBHashKey {\n+    uint256 block_hash;\n+\n+    explicit DBHashKey(const uint256& hash_in) : block_hash(hash_in) {}\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        char prefix = DB_BLOCK_HASH;\n+        READWRITE(prefix);\n+        if (prefix != DB_BLOCK_HASH) {\n+            throw std::ios_base::failure(\"Invalid format for block filter index DB hash key\");\n+        }\n+\n+        READWRITE(block_hash);\n+    }\n+};\n+\n+struct DBMuhash {\n+    MuHash3072 hash;\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        READWRITE(hash);\n+    }\n+};\n+\n+}; // namespace\n+\n+std::unique_ptr<CoinStatsIndex> g_coin_stats_index;\n+\n+CoinStatsIndex::CoinStatsIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+{\n+    fs::path path = GetDataDir() / \"indexes\" / \"coinstats\";\n+    fs::create_directories(path);\n+\n+    m_db = MakeUnique<CoinStatsIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);\n+}\n+\n+bool CoinStatsIndex::Init()\n+{\n+    if (!m_db->Read(DB_MUHASH, m_muhash)) {\n+        // Check that the cause of the read failure is that the key does not exist. Any other errors\n+        // indicate database corruption or a disk failure, and starting the index would cause\n+        // further corruption.\n+        if (m_db->Exists(DB_MUHASH)) {\n+            return error(\"%s: Cannot read current %s state; index may be corrupted\",\n+                         __func__, GetName());\n+        }\n+\n+        // If the DB_MUHASH is not set, initialize empty values\n+        m_muhash = MuHash3072();\n+        m_nTransactionOutputs = 0;\n+        m_nBogoSize = 0;\n+        m_nTotalAmount = 0;\n+        m_nDiskSize = 0;\n+    }\n+\n+    return BaseIndex::Init();\n+}\n+\n+bool CoinStatsIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+\n+    // Ignore genesis block\n+    if (pindex->nHeight > 0) {\n+        if (!UndoReadFromDisk(block_undo, pindex)) {\n+            return false;\n+        }\n+\n+        std::pair<uint256, DBVal> read_out;\n+        if (!m_db->Read(DBHeightKey(pindex->nHeight - 1), read_out)) {\n+            return false;\n+        }\n+\n+        uint256 expected_block_hash = pindex->pprev->GetBlockHash();\n+        if (read_out.first != expected_block_hash) {\n+            return error(\"%s: previous block header belongs to unexpected block %s; expected %s\",\n+                         __func__, read_out.first.ToString(), expected_block_hash.ToString());\n+        }\n+\n+        bool is_bip30_block = (pindex->nHeight==91722 && pindex->GetBlockHash() == uint256S(\"0x00000000000271a2dc26e7667f8419f2e15416dc6955e5a6c6cdf3f2574dd08e\")) ||\n+                              (pindex->nHeight==91812 && pindex->GetBlockHash() == uint256S(\"0x00000000000af0aed4792b1acee3d966af36cf5def14935db8de83d6f9306f2f\"));\n+        MuHash3072 undo_muhash;\n+\n+        // Add the new utxos created from the block\n+        for (size_t i = 0; i < block.vtx.size(); ++i) {\n+            const auto& tx = block.vtx.at(i);\n+\n+            // Skip duplicate txid coinbase transactions (BIP30).\n+            if (is_bip30_block && tx->IsCoinBase()) {",
    "path": "src/index/coinstatsindex.cpp",
    "position": 159,
    "original_position": 159,
    "commit_id": "58cf819caabe98a584a508f66a9f4fc347f8dfeb",
    "original_commit_id": "8e17009dcc4de977ced030e624b18ecc6ba19e63",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Why do we need to skip these? Block height is included in the muhash anyway, so it wouldn't be a duplicate entry.",
    "created_at": "2020-04-26T14:48:23Z",
    "updated_at": "2020-05-15T15:06:29Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18000#discussion_r415327363",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18000",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/415327363"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18000#discussion_r415327363"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18000"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/415327363/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 159,
    "original_line": 159,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/415328497",
    "pull_request_review_id": 400510064,
    "id": 415328497,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMyODQ5Nw==",
    "diff_hunk": "@@ -0,0 +1,407 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <crypto/muhash.h>\n+#include <hash.h>\n+#include <index/coinstatsindex.h>\n+#include <node/coinstats.h>\n+#include <serialize.h>\n+#include <txdb.h>\n+#include <undo.h>\n+#include <validation.h>\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+constexpr char DB_MUHASH = 'M';\n+\n+namespace {\n+\n+struct DBVal {\n+    uint256 muhash;\n+    uint64_t nTransactionOutputs;\n+    uint64_t nBogoSize;\n+    CAmount nTotalAmount;\n+    uint64_t nDiskSize;\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        READWRITE(muhash);\n+        READWRITE(nTransactionOutputs);\n+        READWRITE(nBogoSize);\n+        READWRITE(nTotalAmount);\n+        READWRITE(nDiskSize);\n+    }\n+};\n+\n+struct DBHeightKey {\n+    int height;\n+\n+    DBHeightKey() : height(0) {}\n+    explicit DBHeightKey(int height_in) : height(height_in) {}\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        ser_writedata8(s, DB_BLOCK_HEIGHT);\n+        ser_writedata32be(s, height);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        char prefix = ser_readdata8(s);\n+        if (prefix != DB_BLOCK_HEIGHT) {\n+            throw std::ios_base::failure(\"Invalid format for block filter index DB height key\");\n+        }\n+        height = ser_readdata32be(s);\n+    }\n+};\n+\n+struct DBHashKey {\n+    uint256 block_hash;\n+\n+    explicit DBHashKey(const uint256& hash_in) : block_hash(hash_in) {}\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        char prefix = DB_BLOCK_HASH;\n+        READWRITE(prefix);\n+        if (prefix != DB_BLOCK_HASH) {\n+            throw std::ios_base::failure(\"Invalid format for block filter index DB hash key\");\n+        }\n+\n+        READWRITE(block_hash);\n+    }\n+};\n+\n+struct DBMuhash {\n+    MuHash3072 hash;\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        READWRITE(hash);\n+    }\n+};\n+\n+}; // namespace\n+\n+std::unique_ptr<CoinStatsIndex> g_coin_stats_index;\n+\n+CoinStatsIndex::CoinStatsIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+{\n+    fs::path path = GetDataDir() / \"indexes\" / \"coinstats\";\n+    fs::create_directories(path);\n+\n+    m_db = MakeUnique<CoinStatsIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);\n+}\n+\n+bool CoinStatsIndex::Init()\n+{\n+    if (!m_db->Read(DB_MUHASH, m_muhash)) {\n+        // Check that the cause of the read failure is that the key does not exist. Any other errors\n+        // indicate database corruption or a disk failure, and starting the index would cause\n+        // further corruption.\n+        if (m_db->Exists(DB_MUHASH)) {\n+            return error(\"%s: Cannot read current %s state; index may be corrupted\",\n+                         __func__, GetName());\n+        }\n+\n+        // If the DB_MUHASH is not set, initialize empty values\n+        m_muhash = MuHash3072();\n+        m_nTransactionOutputs = 0;\n+        m_nBogoSize = 0;\n+        m_nTotalAmount = 0;\n+        m_nDiskSize = 0;\n+    }\n+\n+    return BaseIndex::Init();\n+}\n+\n+bool CoinStatsIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+\n+    // Ignore genesis block\n+    if (pindex->nHeight > 0) {\n+        if (!UndoReadFromDisk(block_undo, pindex)) {\n+            return false;\n+        }\n+\n+        std::pair<uint256, DBVal> read_out;\n+        if (!m_db->Read(DBHeightKey(pindex->nHeight - 1), read_out)) {\n+            return false;\n+        }\n+\n+        uint256 expected_block_hash = pindex->pprev->GetBlockHash();\n+        if (read_out.first != expected_block_hash) {\n+            return error(\"%s: previous block header belongs to unexpected block %s; expected %s\",\n+                         __func__, read_out.first.ToString(), expected_block_hash.ToString());\n+        }\n+\n+        bool is_bip30_block = (pindex->nHeight==91722 && pindex->GetBlockHash() == uint256S(\"0x00000000000271a2dc26e7667f8419f2e15416dc6955e5a6c6cdf3f2574dd08e\")) ||\n+                              (pindex->nHeight==91812 && pindex->GetBlockHash() == uint256S(\"0x00000000000af0aed4792b1acee3d966af36cf5def14935db8de83d6f9306f2f\"));\n+        MuHash3072 undo_muhash;\n+\n+        // Add the new utxos created from the block\n+        for (size_t i = 0; i < block.vtx.size(); ++i) {\n+            const auto& tx = block.vtx.at(i);\n+\n+            // Skip duplicate txid coinbase transactions (BIP30).\n+            if (is_bip30_block && tx->IsCoinBase()) {\n+                continue;\n+            }\n+\n+            for (size_t j = 0; j < tx->vout.size(); ++j) {\n+                const CTxOut& out = tx->vout[j];\n+                COutPoint outpoint = COutPoint(tx->GetHash(), j);\n+                Coin coin = Coin(out, pindex->nHeight, tx->IsCoinBase());\n+\n+                // Skip unspendable coins\n+                if (coin.out.scriptPubKey.IsUnspendable()) continue;",
    "path": "src/index/coinstatsindex.cpp",
    "position": 169,
    "original_position": 169,
    "commit_id": "58cf819caabe98a584a508f66a9f4fc347f8dfeb",
    "original_commit_id": "8e17009dcc4de977ced030e624b18ecc6ba19e63",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Why do we skip unspendable coins here? Won't that lead to a result inconsistent with `gettxoutsetinfo`? ",
    "created_at": "2020-04-26T14:54:03Z",
    "updated_at": "2020-05-15T15:06:29Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18000#discussion_r415328497",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18000",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/415328497"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18000#discussion_r415328497"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18000"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/415328497/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 169,
    "original_line": 169,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/415328606",
    "pull_request_review_id": 400510064,
    "id": 415328606,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMyODYwNg==",
    "diff_hunk": "@@ -0,0 +1,407 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <crypto/muhash.h>\n+#include <hash.h>\n+#include <index/coinstatsindex.h>\n+#include <node/coinstats.h>\n+#include <serialize.h>\n+#include <txdb.h>\n+#include <undo.h>\n+#include <validation.h>\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+constexpr char DB_MUHASH = 'M';\n+\n+namespace {\n+\n+struct DBVal {\n+    uint256 muhash;\n+    uint64_t nTransactionOutputs;\n+    uint64_t nBogoSize;\n+    CAmount nTotalAmount;\n+    uint64_t nDiskSize;\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        READWRITE(muhash);\n+        READWRITE(nTransactionOutputs);\n+        READWRITE(nBogoSize);\n+        READWRITE(nTotalAmount);\n+        READWRITE(nDiskSize);\n+    }\n+};\n+\n+struct DBHeightKey {\n+    int height;\n+\n+    DBHeightKey() : height(0) {}\n+    explicit DBHeightKey(int height_in) : height(height_in) {}\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        ser_writedata8(s, DB_BLOCK_HEIGHT);\n+        ser_writedata32be(s, height);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        char prefix = ser_readdata8(s);\n+        if (prefix != DB_BLOCK_HEIGHT) {\n+            throw std::ios_base::failure(\"Invalid format for block filter index DB height key\");\n+        }\n+        height = ser_readdata32be(s);\n+    }\n+};\n+\n+struct DBHashKey {\n+    uint256 block_hash;\n+\n+    explicit DBHashKey(const uint256& hash_in) : block_hash(hash_in) {}\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        char prefix = DB_BLOCK_HASH;\n+        READWRITE(prefix);\n+        if (prefix != DB_BLOCK_HASH) {\n+            throw std::ios_base::failure(\"Invalid format for block filter index DB hash key\");\n+        }\n+\n+        READWRITE(block_hash);\n+    }\n+};\n+\n+struct DBMuhash {\n+    MuHash3072 hash;\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        READWRITE(hash);\n+    }\n+};\n+\n+}; // namespace\n+\n+std::unique_ptr<CoinStatsIndex> g_coin_stats_index;\n+\n+CoinStatsIndex::CoinStatsIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+{\n+    fs::path path = GetDataDir() / \"indexes\" / \"coinstats\";\n+    fs::create_directories(path);\n+\n+    m_db = MakeUnique<CoinStatsIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);\n+}\n+\n+bool CoinStatsIndex::Init()\n+{\n+    if (!m_db->Read(DB_MUHASH, m_muhash)) {\n+        // Check that the cause of the read failure is that the key does not exist. Any other errors\n+        // indicate database corruption or a disk failure, and starting the index would cause\n+        // further corruption.\n+        if (m_db->Exists(DB_MUHASH)) {\n+            return error(\"%s: Cannot read current %s state; index may be corrupted\",\n+                         __func__, GetName());\n+        }\n+\n+        // If the DB_MUHASH is not set, initialize empty values\n+        m_muhash = MuHash3072();\n+        m_nTransactionOutputs = 0;\n+        m_nBogoSize = 0;\n+        m_nTotalAmount = 0;\n+        m_nDiskSize = 0;\n+    }\n+\n+    return BaseIndex::Init();\n+}\n+\n+bool CoinStatsIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+\n+    // Ignore genesis block\n+    if (pindex->nHeight > 0) {\n+        if (!UndoReadFromDisk(block_undo, pindex)) {\n+            return false;\n+        }\n+\n+        std::pair<uint256, DBVal> read_out;\n+        if (!m_db->Read(DBHeightKey(pindex->nHeight - 1), read_out)) {\n+            return false;\n+        }\n+\n+        uint256 expected_block_hash = pindex->pprev->GetBlockHash();\n+        if (read_out.first != expected_block_hash) {\n+            return error(\"%s: previous block header belongs to unexpected block %s; expected %s\",\n+                         __func__, read_out.first.ToString(), expected_block_hash.ToString());\n+        }\n+\n+        bool is_bip30_block = (pindex->nHeight==91722 && pindex->GetBlockHash() == uint256S(\"0x00000000000271a2dc26e7667f8419f2e15416dc6955e5a6c6cdf3f2574dd08e\")) ||\n+                              (pindex->nHeight==91812 && pindex->GetBlockHash() == uint256S(\"0x00000000000af0aed4792b1acee3d966af36cf5def14935db8de83d6f9306f2f\"));\n+        MuHash3072 undo_muhash;\n+\n+        // Add the new utxos created from the block\n+        for (size_t i = 0; i < block.vtx.size(); ++i) {\n+            const auto& tx = block.vtx.at(i);\n+\n+            // Skip duplicate txid coinbase transactions (BIP30).\n+            if (is_bip30_block && tx->IsCoinBase()) {\n+                continue;\n+            }\n+\n+            for (size_t j = 0; j < tx->vout.size(); ++j) {\n+                const CTxOut& out = tx->vout[j];\n+                COutPoint outpoint = COutPoint(tx->GetHash(), j);\n+                Coin coin = Coin(out, pindex->nHeight, tx->IsCoinBase());\n+\n+                // Skip unspendable coins\n+                if (coin.out.scriptPubKey.IsUnspendable()) continue;\n+\n+                TruncatedSHA512Writer ss(SER_DISK, 0);",
    "path": "src/index/coinstatsindex.cpp",
    "position": null,
    "original_position": 171,
    "commit_id": "58cf819caabe98a584a508f66a9f4fc347f8dfeb",
    "original_commit_id": "8e17009dcc4de977ced030e624b18ecc6ba19e63",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Ideally this code should be shared with `ApplyStats()`",
    "created_at": "2020-04-26T14:54:42Z",
    "updated_at": "2020-05-15T15:06:29Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18000#discussion_r415328606",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18000",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/415328606"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18000#discussion_r415328606"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18000"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/415328606/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 171,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/415329750",
    "pull_request_review_id": 400510064,
    "id": 415329750,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMyOTc1MA==",
    "diff_hunk": "@@ -0,0 +1,407 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <crypto/muhash.h>\n+#include <hash.h>\n+#include <index/coinstatsindex.h>\n+#include <node/coinstats.h>\n+#include <serialize.h>\n+#include <txdb.h>\n+#include <undo.h>\n+#include <validation.h>\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+constexpr char DB_MUHASH = 'M';\n+\n+namespace {\n+\n+struct DBVal {\n+    uint256 muhash;\n+    uint64_t nTransactionOutputs;\n+    uint64_t nBogoSize;\n+    CAmount nTotalAmount;\n+    uint64_t nDiskSize;\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        READWRITE(muhash);\n+        READWRITE(nTransactionOutputs);\n+        READWRITE(nBogoSize);\n+        READWRITE(nTotalAmount);\n+        READWRITE(nDiskSize);\n+    }\n+};\n+\n+struct DBHeightKey {\n+    int height;\n+\n+    DBHeightKey() : height(0) {}\n+    explicit DBHeightKey(int height_in) : height(height_in) {}\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        ser_writedata8(s, DB_BLOCK_HEIGHT);\n+        ser_writedata32be(s, height);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        char prefix = ser_readdata8(s);\n+        if (prefix != DB_BLOCK_HEIGHT) {\n+            throw std::ios_base::failure(\"Invalid format for block filter index DB height key\");\n+        }\n+        height = ser_readdata32be(s);\n+    }\n+};\n+\n+struct DBHashKey {\n+    uint256 block_hash;\n+\n+    explicit DBHashKey(const uint256& hash_in) : block_hash(hash_in) {}\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        char prefix = DB_BLOCK_HASH;\n+        READWRITE(prefix);\n+        if (prefix != DB_BLOCK_HASH) {\n+            throw std::ios_base::failure(\"Invalid format for block filter index DB hash key\");\n+        }\n+\n+        READWRITE(block_hash);\n+    }\n+};\n+\n+struct DBMuhash {\n+    MuHash3072 hash;\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        READWRITE(hash);\n+    }\n+};\n+\n+}; // namespace\n+\n+std::unique_ptr<CoinStatsIndex> g_coin_stats_index;\n+\n+CoinStatsIndex::CoinStatsIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+{\n+    fs::path path = GetDataDir() / \"indexes\" / \"coinstats\";\n+    fs::create_directories(path);\n+\n+    m_db = MakeUnique<CoinStatsIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);\n+}\n+\n+bool CoinStatsIndex::Init()\n+{\n+    if (!m_db->Read(DB_MUHASH, m_muhash)) {\n+        // Check that the cause of the read failure is that the key does not exist. Any other errors\n+        // indicate database corruption or a disk failure, and starting the index would cause\n+        // further corruption.\n+        if (m_db->Exists(DB_MUHASH)) {\n+            return error(\"%s: Cannot read current %s state; index may be corrupted\",\n+                         __func__, GetName());\n+        }\n+\n+        // If the DB_MUHASH is not set, initialize empty values\n+        m_muhash = MuHash3072();\n+        m_nTransactionOutputs = 0;\n+        m_nBogoSize = 0;\n+        m_nTotalAmount = 0;\n+        m_nDiskSize = 0;\n+    }\n+\n+    return BaseIndex::Init();\n+}\n+\n+bool CoinStatsIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+\n+    // Ignore genesis block\n+    if (pindex->nHeight > 0) {\n+        if (!UndoReadFromDisk(block_undo, pindex)) {\n+            return false;\n+        }\n+\n+        std::pair<uint256, DBVal> read_out;\n+        if (!m_db->Read(DBHeightKey(pindex->nHeight - 1), read_out)) {\n+            return false;\n+        }\n+\n+        uint256 expected_block_hash = pindex->pprev->GetBlockHash();\n+        if (read_out.first != expected_block_hash) {\n+            return error(\"%s: previous block header belongs to unexpected block %s; expected %s\",\n+                         __func__, read_out.first.ToString(), expected_block_hash.ToString());\n+        }\n+\n+        bool is_bip30_block = (pindex->nHeight==91722 && pindex->GetBlockHash() == uint256S(\"0x00000000000271a2dc26e7667f8419f2e15416dc6955e5a6c6cdf3f2574dd08e\")) ||\n+                              (pindex->nHeight==91812 && pindex->GetBlockHash() == uint256S(\"0x00000000000af0aed4792b1acee3d966af36cf5def14935db8de83d6f9306f2f\"));\n+        MuHash3072 undo_muhash;\n+\n+        // Add the new utxos created from the block\n+        for (size_t i = 0; i < block.vtx.size(); ++i) {\n+            const auto& tx = block.vtx.at(i);\n+\n+            // Skip duplicate txid coinbase transactions (BIP30).\n+            if (is_bip30_block && tx->IsCoinBase()) {\n+                continue;\n+            }\n+\n+            for (size_t j = 0; j < tx->vout.size(); ++j) {\n+                const CTxOut& out = tx->vout[j];\n+                COutPoint outpoint = COutPoint(tx->GetHash(), j);\n+                Coin coin = Coin(out, pindex->nHeight, tx->IsCoinBase());\n+\n+                // Skip unspendable coins\n+                if (coin.out.scriptPubKey.IsUnspendable()) continue;\n+\n+                TruncatedSHA512Writer ss(SER_DISK, 0);\n+                ss << outpoint;\n+                ss << (uint32_t)(coin.nHeight * 2 + coin.fCoinBase);\n+                ss << coin.out;\n+                m_muhash *= MuHash3072(ss.GetHash().begin());\n+\n+                m_nTransactionOutputs++;\n+                m_nTotalAmount += coin.out.nValue;\n+                m_nBogoSize += 32 /* txid */ + 4 /* vout index */ + 4 /* height + coinbase */ + 8 /* amount */ +\n+                               2 /* scriptPubKey len */ + coin.out.scriptPubKey.size() /* scriptPubKey */;\n+            }\n+\n+            // The coinbase tx has no undo data since no former output is spent",
    "path": "src/index/coinstatsindex.cpp",
    "position": 179,
    "original_position": 183,
    "commit_id": "58cf819caabe98a584a508f66a9f4fc347f8dfeb",
    "original_commit_id": "8e17009dcc4de977ced030e624b18ecc6ba19e63",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I'm confused: the coinbase _is_ added to the muhash accumulator.",
    "created_at": "2020-04-26T15:00:42Z",
    "updated_at": "2020-05-15T15:06:29Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18000#discussion_r415329750",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18000",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/415329750"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18000#discussion_r415329750"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18000"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/415329750/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 179,
    "original_line": 179,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/415330663",
    "pull_request_review_id": 400510064,
    "id": 415330663,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMzMDY2Mw==",
    "diff_hunk": "@@ -0,0 +1,407 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <crypto/muhash.h>\n+#include <hash.h>\n+#include <index/coinstatsindex.h>\n+#include <node/coinstats.h>\n+#include <serialize.h>\n+#include <txdb.h>\n+#include <undo.h>\n+#include <validation.h>\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+constexpr char DB_MUHASH = 'M';\n+\n+namespace {\n+\n+struct DBVal {\n+    uint256 muhash;\n+    uint64_t nTransactionOutputs;\n+    uint64_t nBogoSize;\n+    CAmount nTotalAmount;\n+    uint64_t nDiskSize;\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        READWRITE(muhash);\n+        READWRITE(nTransactionOutputs);\n+        READWRITE(nBogoSize);\n+        READWRITE(nTotalAmount);\n+        READWRITE(nDiskSize);\n+    }\n+};\n+\n+struct DBHeightKey {\n+    int height;\n+\n+    DBHeightKey() : height(0) {}\n+    explicit DBHeightKey(int height_in) : height(height_in) {}\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        ser_writedata8(s, DB_BLOCK_HEIGHT);\n+        ser_writedata32be(s, height);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        char prefix = ser_readdata8(s);\n+        if (prefix != DB_BLOCK_HEIGHT) {\n+            throw std::ios_base::failure(\"Invalid format for block filter index DB height key\");\n+        }\n+        height = ser_readdata32be(s);\n+    }\n+};\n+\n+struct DBHashKey {\n+    uint256 block_hash;\n+\n+    explicit DBHashKey(const uint256& hash_in) : block_hash(hash_in) {}\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        char prefix = DB_BLOCK_HASH;\n+        READWRITE(prefix);\n+        if (prefix != DB_BLOCK_HASH) {\n+            throw std::ios_base::failure(\"Invalid format for block filter index DB hash key\");\n+        }\n+\n+        READWRITE(block_hash);\n+    }\n+};\n+\n+struct DBMuhash {\n+    MuHash3072 hash;\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        READWRITE(hash);\n+    }\n+};\n+\n+}; // namespace\n+\n+std::unique_ptr<CoinStatsIndex> g_coin_stats_index;\n+\n+CoinStatsIndex::CoinStatsIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+{\n+    fs::path path = GetDataDir() / \"indexes\" / \"coinstats\";\n+    fs::create_directories(path);\n+\n+    m_db = MakeUnique<CoinStatsIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);\n+}\n+\n+bool CoinStatsIndex::Init()\n+{\n+    if (!m_db->Read(DB_MUHASH, m_muhash)) {\n+        // Check that the cause of the read failure is that the key does not exist. Any other errors\n+        // indicate database corruption or a disk failure, and starting the index would cause\n+        // further corruption.\n+        if (m_db->Exists(DB_MUHASH)) {\n+            return error(\"%s: Cannot read current %s state; index may be corrupted\",\n+                         __func__, GetName());\n+        }\n+\n+        // If the DB_MUHASH is not set, initialize empty values\n+        m_muhash = MuHash3072();\n+        m_nTransactionOutputs = 0;\n+        m_nBogoSize = 0;\n+        m_nTotalAmount = 0;\n+        m_nDiskSize = 0;\n+    }\n+\n+    return BaseIndex::Init();\n+}\n+\n+bool CoinStatsIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+\n+    // Ignore genesis block\n+    if (pindex->nHeight > 0) {\n+        if (!UndoReadFromDisk(block_undo, pindex)) {\n+            return false;\n+        }\n+\n+        std::pair<uint256, DBVal> read_out;\n+        if (!m_db->Read(DBHeightKey(pindex->nHeight - 1), read_out)) {\n+            return false;\n+        }\n+\n+        uint256 expected_block_hash = pindex->pprev->GetBlockHash();\n+        if (read_out.first != expected_block_hash) {\n+            return error(\"%s: previous block header belongs to unexpected block %s; expected %s\",\n+                         __func__, read_out.first.ToString(), expected_block_hash.ToString());\n+        }\n+\n+        bool is_bip30_block = (pindex->nHeight==91722 && pindex->GetBlockHash() == uint256S(\"0x00000000000271a2dc26e7667f8419f2e15416dc6955e5a6c6cdf3f2574dd08e\")) ||\n+                              (pindex->nHeight==91812 && pindex->GetBlockHash() == uint256S(\"0x00000000000af0aed4792b1acee3d966af36cf5def14935db8de83d6f9306f2f\"));\n+        MuHash3072 undo_muhash;\n+\n+        // Add the new utxos created from the block\n+        for (size_t i = 0; i < block.vtx.size(); ++i) {\n+            const auto& tx = block.vtx.at(i);\n+\n+            // Skip duplicate txid coinbase transactions (BIP30).\n+            if (is_bip30_block && tx->IsCoinBase()) {\n+                continue;\n+            }\n+\n+            for (size_t j = 0; j < tx->vout.size(); ++j) {\n+                const CTxOut& out = tx->vout[j];\n+                COutPoint outpoint = COutPoint(tx->GetHash(), j);\n+                Coin coin = Coin(out, pindex->nHeight, tx->IsCoinBase());\n+\n+                // Skip unspendable coins\n+                if (coin.out.scriptPubKey.IsUnspendable()) continue;\n+\n+                TruncatedSHA512Writer ss(SER_DISK, 0);\n+                ss << outpoint;\n+                ss << (uint32_t)(coin.nHeight * 2 + coin.fCoinBase);\n+                ss << coin.out;\n+                m_muhash *= MuHash3072(ss.GetHash().begin());\n+\n+                m_nTransactionOutputs++;\n+                m_nTotalAmount += coin.out.nValue;\n+                m_nBogoSize += 32 /* txid */ + 4 /* vout index */ + 4 /* height + coinbase */ + 8 /* amount */ +\n+                               2 /* scriptPubKey len */ + coin.out.scriptPubKey.size() /* scriptPubKey */;\n+            }\n+\n+            // The coinbase tx has no undo data since no former output is spent\n+            if (i > 0) {\n+                const auto& tx_undo = block_undo.vtxundo.at(i-1);\n+\n+                for (size_t j = 0; j < tx_undo.vprevout.size(); ++j) {\n+                    Coin coin = tx_undo.vprevout[j];\n+                    COutPoint outpoint = COutPoint(tx->vin[j].prevout.hash, tx->vin[j].prevout.n);\n+\n+                    TruncatedSHA512Writer ss(SER_DISK, 0);\n+                    ss << outpoint;\n+                    ss << (uint32_t)(coin.nHeight * 2 + coin.fCoinBase);\n+                    ss << coin.out;\n+                    undo_muhash *= MuHash3072(ss.GetHash().begin());\n+\n+                    m_nTransactionOutputs--;\n+                    m_nTotalAmount -= coin.out.nValue;\n+                    m_nBogoSize -= 32 /* txid */ + 4 /* vout index */ + 4 /* height + coinbase */ + 8 /* amount */ +\n+                                   2 /* scriptPubKey len */ + coin.out.scriptPubKey.size() /* scriptPubKey */;\n+                }\n+            }\n+        }\n+\n+        m_muhash /= undo_muhash;\n+    }\n+\n+    CCoinsView* coins_view = WITH_LOCK(cs_main, return &ChainstateActive().CoinsDB());\n+    m_nDiskSize = coins_view->EstimateSize();\n+\n+    std::pair<uint256, DBVal> value;\n+    value.first = pindex->GetBlockHash();\n+    value.second.muhash = currentHashInternal();\n+    value.second.nDiskSize = m_nDiskSize;\n+    value.second.nTransactionOutputs = m_nTransactionOutputs;\n+    value.second.nBogoSize = m_nBogoSize;\n+    value.second.nTotalAmount = m_nTotalAmount;\n+\n+    if (!m_db->Write(DBHeightKey(pindex->nHeight), value)) {\n+        return false;\n+    }\n+\n+    if (!m_db->Write(DB_MUHASH, m_muhash)) {\n+        return false;\n+    }\n+\n+    return true;\n+}\n+\n+static bool CopyHeightIndexToHashIndex(CDBIterator& db_it, CDBBatch& batch,\n+                                       const std::string& index_name,\n+                                       int start_height, int stop_height)\n+{\n+    DBHeightKey key(start_height);\n+    db_it.Seek(key);\n+\n+    for (int height = start_height; height <= stop_height; ++height) {\n+        if (!db_it.GetKey(key) || key.height != height) {\n+            return error(\"%s: unexpected key in %s: expected (%c, %d)\",\n+                         __func__, index_name, DB_BLOCK_HEIGHT, height);\n+        }\n+\n+        std::pair<uint256, DBVal> value;\n+        if (!db_it.GetValue(value)) {\n+            return error(\"%s: unable to read value in %s at key (%c, %d)\",\n+                         __func__, index_name, DB_BLOCK_HEIGHT, height);\n+        }\n+\n+        batch.Write(DBHashKey(value.first), std::move(value.second));\n+\n+        db_it.Next();\n+    }\n+    return true;\n+}\n+\n+bool CoinStatsIndex::Rewind(const CBlockIndex* current_tip, const CBlockIndex* new_tip)\n+{\n+    assert(current_tip->GetAncestor(new_tip->nHeight) == new_tip);\n+\n+    CDBBatch batch(*m_db);\n+    std::unique_ptr<CDBIterator> db_it(m_db->NewIterator());\n+\n+    {\n+        LOCK(cs_main);\n+        CBlockIndex* iter_tip = LookupBlockIndex(current_tip->GetBlockHash());\n+        auto& consensus_params = Params().GetConsensus();\n+\n+        do {\n+            CBlock block;\n+\n+            if (!ReadBlockFromDisk(block, iter_tip, consensus_params)) {\n+                return error(\"%s: Failed to read block %s from disk\",\n+                               __func__, iter_tip->GetBlockHash().ToString());\n+            }\n+\n+            ReverseBlock(block, iter_tip);\n+\n+            iter_tip = iter_tip->GetAncestor(iter_tip->nHeight - 1);\n+        } while (new_tip != iter_tip);\n+    }\n+\n+    // During a reorg, we need to copy all hash digests for blocks that are getting disconnected from the\n+    // height index to the hash index so we can still find them when the height index entries are\n+    // overwritten.\n+    if (!CopyHeightIndexToHashIndex(*db_it, batch, m_name, new_tip->nHeight, current_tip->nHeight)) {\n+        return false;\n+    }\n+\n+    if (!m_db->WriteBatch(batch)) return false;\n+\n+    return BaseIndex::Rewind(current_tip, new_tip);\n+}\n+\n+static bool LookupOne(const CDBWrapper& db, const CBlockIndex* block_index, DBVal& result)\n+{\n+    // First check if the result is stored under the height index and the value there matches the\n+    // block hash. This should be the case if the block is on the active chain.\n+    std::pair<uint256, DBVal> read_out;\n+    if (!db.Read(DBHeightKey(block_index->nHeight), read_out)) {\n+        return false;\n+    }\n+    if (read_out.first == block_index->GetBlockHash()) {\n+        result = std::move(read_out.second);\n+        return true;\n+    }\n+\n+    // If value at the height index corresponds to an different block, the result will be stored in\n+    // the hash index.\n+    return db.Read(DBHashKey(block_index->GetBlockHash()), result);\n+}\n+\n+bool CoinStatsIndex::LookupStats(const CBlockIndex* block_index, CCoinsStats& coins_stats) const\n+{\n+    DBVal entry;\n+    if (!LookupOne(*m_db, block_index, entry)) {\n+        return false;\n+    }\n+\n+    coins_stats.hashSerialized = entry.muhash;\n+    coins_stats.nTransactionOutputs = entry.nTransactionOutputs;\n+    coins_stats.nBogoSize = entry.nBogoSize;\n+    coins_stats.nTotalAmount = entry.nTotalAmount;\n+    coins_stats.nDiskSize = entry.nDiskSize;\n+\n+    return true;\n+}\n+\n+uint256 CoinStatsIndex::currentHashInternal()\n+{\n+    unsigned char out[384];\n+    m_muhash.Finalize(out);\n+    return (TruncatedSHA512Writer(SER_DISK, 0) << out).GetHash();\n+}\n+\n+// Reverse Block in case of reorg\n+bool CoinStatsIndex::ReverseBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+    std::pair<uint256, DBVal> read_out;\n+\n+    if (pindex->nHeight > 0) {\n+        if (!UndoReadFromDisk(block_undo, pindex)) {\n+            return false;\n+        }\n+\n+        if (!m_db->Read(DBHeightKey(pindex->nHeight - 1), read_out)) {\n+            return false;\n+        }\n+\n+        uint256 expected_block_hash = pindex->pprev->GetBlockHash();\n+        if (read_out.first != expected_block_hash) {\n+            return error(\"%s: previous block header belongs to unexpected block %s; expected %s\",\n+                         __func__, read_out.first.ToString(), expected_block_hash.ToString());\n+        }\n+    }\n+\n+    MuHash3072 do_muhash;",
    "path": "src/index/coinstatsindex.cpp",
    "position": 349,
    "original_position": 357,
    "commit_id": "58cf819caabe98a584a508f66a9f4fc347f8dfeb",
    "original_commit_id": "8e17009dcc4de977ced030e624b18ecc6ba19e63",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Why is this called `do_muhash` rather than `undo_muhash`?",
    "created_at": "2020-04-26T15:05:14Z",
    "updated_at": "2020-05-15T15:06:29Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18000#discussion_r415330663",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18000",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/415330663"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18000#discussion_r415330663"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18000"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/415330663/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 349,
    "original_line": 349,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/415330966",
    "pull_request_review_id": 400510064,
    "id": 415330966,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMzMDk2Ng==",
    "diff_hunk": "@@ -0,0 +1,407 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <crypto/muhash.h>\n+#include <hash.h>\n+#include <index/coinstatsindex.h>\n+#include <node/coinstats.h>\n+#include <serialize.h>\n+#include <txdb.h>\n+#include <undo.h>\n+#include <validation.h>\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+constexpr char DB_MUHASH = 'M';\n+\n+namespace {\n+\n+struct DBVal {\n+    uint256 muhash;\n+    uint64_t nTransactionOutputs;\n+    uint64_t nBogoSize;\n+    CAmount nTotalAmount;\n+    uint64_t nDiskSize;\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        READWRITE(muhash);\n+        READWRITE(nTransactionOutputs);\n+        READWRITE(nBogoSize);\n+        READWRITE(nTotalAmount);\n+        READWRITE(nDiskSize);\n+    }\n+};\n+\n+struct DBHeightKey {\n+    int height;\n+\n+    DBHeightKey() : height(0) {}\n+    explicit DBHeightKey(int height_in) : height(height_in) {}\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        ser_writedata8(s, DB_BLOCK_HEIGHT);\n+        ser_writedata32be(s, height);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        char prefix = ser_readdata8(s);\n+        if (prefix != DB_BLOCK_HEIGHT) {\n+            throw std::ios_base::failure(\"Invalid format for block filter index DB height key\");\n+        }\n+        height = ser_readdata32be(s);\n+    }\n+};\n+\n+struct DBHashKey {\n+    uint256 block_hash;\n+\n+    explicit DBHashKey(const uint256& hash_in) : block_hash(hash_in) {}\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        char prefix = DB_BLOCK_HASH;\n+        READWRITE(prefix);\n+        if (prefix != DB_BLOCK_HASH) {\n+            throw std::ios_base::failure(\"Invalid format for block filter index DB hash key\");\n+        }\n+\n+        READWRITE(block_hash);\n+    }\n+};\n+\n+struct DBMuhash {\n+    MuHash3072 hash;\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        READWRITE(hash);\n+    }\n+};\n+\n+}; // namespace\n+\n+std::unique_ptr<CoinStatsIndex> g_coin_stats_index;\n+\n+CoinStatsIndex::CoinStatsIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+{\n+    fs::path path = GetDataDir() / \"indexes\" / \"coinstats\";\n+    fs::create_directories(path);\n+\n+    m_db = MakeUnique<CoinStatsIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);\n+}\n+\n+bool CoinStatsIndex::Init()\n+{\n+    if (!m_db->Read(DB_MUHASH, m_muhash)) {\n+        // Check that the cause of the read failure is that the key does not exist. Any other errors\n+        // indicate database corruption or a disk failure, and starting the index would cause\n+        // further corruption.\n+        if (m_db->Exists(DB_MUHASH)) {\n+            return error(\"%s: Cannot read current %s state; index may be corrupted\",\n+                         __func__, GetName());\n+        }\n+\n+        // If the DB_MUHASH is not set, initialize empty values\n+        m_muhash = MuHash3072();\n+        m_nTransactionOutputs = 0;\n+        m_nBogoSize = 0;\n+        m_nTotalAmount = 0;\n+        m_nDiskSize = 0;\n+    }\n+\n+    return BaseIndex::Init();\n+}\n+\n+bool CoinStatsIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+\n+    // Ignore genesis block\n+    if (pindex->nHeight > 0) {\n+        if (!UndoReadFromDisk(block_undo, pindex)) {\n+            return false;\n+        }\n+\n+        std::pair<uint256, DBVal> read_out;\n+        if (!m_db->Read(DBHeightKey(pindex->nHeight - 1), read_out)) {\n+            return false;\n+        }\n+\n+        uint256 expected_block_hash = pindex->pprev->GetBlockHash();\n+        if (read_out.first != expected_block_hash) {\n+            return error(\"%s: previous block header belongs to unexpected block %s; expected %s\",\n+                         __func__, read_out.first.ToString(), expected_block_hash.ToString());\n+        }\n+\n+        bool is_bip30_block = (pindex->nHeight==91722 && pindex->GetBlockHash() == uint256S(\"0x00000000000271a2dc26e7667f8419f2e15416dc6955e5a6c6cdf3f2574dd08e\")) ||\n+                              (pindex->nHeight==91812 && pindex->GetBlockHash() == uint256S(\"0x00000000000af0aed4792b1acee3d966af36cf5def14935db8de83d6f9306f2f\"));\n+        MuHash3072 undo_muhash;\n+\n+        // Add the new utxos created from the block\n+        for (size_t i = 0; i < block.vtx.size(); ++i) {\n+            const auto& tx = block.vtx.at(i);\n+\n+            // Skip duplicate txid coinbase transactions (BIP30).\n+            if (is_bip30_block && tx->IsCoinBase()) {\n+                continue;\n+            }\n+\n+            for (size_t j = 0; j < tx->vout.size(); ++j) {\n+                const CTxOut& out = tx->vout[j];\n+                COutPoint outpoint = COutPoint(tx->GetHash(), j);\n+                Coin coin = Coin(out, pindex->nHeight, tx->IsCoinBase());\n+\n+                // Skip unspendable coins\n+                if (coin.out.scriptPubKey.IsUnspendable()) continue;\n+\n+                TruncatedSHA512Writer ss(SER_DISK, 0);\n+                ss << outpoint;\n+                ss << (uint32_t)(coin.nHeight * 2 + coin.fCoinBase);\n+                ss << coin.out;\n+                m_muhash *= MuHash3072(ss.GetHash().begin());\n+\n+                m_nTransactionOutputs++;\n+                m_nTotalAmount += coin.out.nValue;\n+                m_nBogoSize += 32 /* txid */ + 4 /* vout index */ + 4 /* height + coinbase */ + 8 /* amount */ +\n+                               2 /* scriptPubKey len */ + coin.out.scriptPubKey.size() /* scriptPubKey */;\n+            }\n+\n+            // The coinbase tx has no undo data since no former output is spent\n+            if (i > 0) {\n+                const auto& tx_undo = block_undo.vtxundo.at(i-1);\n+\n+                for (size_t j = 0; j < tx_undo.vprevout.size(); ++j) {\n+                    Coin coin = tx_undo.vprevout[j];\n+                    COutPoint outpoint = COutPoint(tx->vin[j].prevout.hash, tx->vin[j].prevout.n);\n+\n+                    TruncatedSHA512Writer ss(SER_DISK, 0);\n+                    ss << outpoint;\n+                    ss << (uint32_t)(coin.nHeight * 2 + coin.fCoinBase);\n+                    ss << coin.out;\n+                    undo_muhash *= MuHash3072(ss.GetHash().begin());\n+\n+                    m_nTransactionOutputs--;\n+                    m_nTotalAmount -= coin.out.nValue;\n+                    m_nBogoSize -= 32 /* txid */ + 4 /* vout index */ + 4 /* height + coinbase */ + 8 /* amount */ +\n+                                   2 /* scriptPubKey len */ + coin.out.scriptPubKey.size() /* scriptPubKey */;\n+                }\n+            }\n+        }\n+\n+        m_muhash /= undo_muhash;",
    "path": "src/index/coinstatsindex.cpp",
    "position": 197,
    "original_position": 205,
    "commit_id": "58cf819caabe98a584a508f66a9f4fc347f8dfeb",
    "original_commit_id": "8e17009dcc4de977ced030e624b18ecc6ba19e63",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Why is this called `undo_muhash` and not `do_muhash`? And why is it divided?",
    "created_at": "2020-04-26T15:06:30Z",
    "updated_at": "2020-05-15T15:06:29Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18000#discussion_r415330966",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18000",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/415330966"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18000#discussion_r415330966"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18000"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/415330966/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 197,
    "original_line": 197,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/425841223",
    "pull_request_review_id": 412699947,
    "id": 425841223,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg0MTIyMw==",
    "diff_hunk": "@@ -0,0 +1,407 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <crypto/muhash.h>\n+#include <hash.h>\n+#include <index/coinstatsindex.h>\n+#include <node/coinstats.h>\n+#include <serialize.h>\n+#include <txdb.h>\n+#include <undo.h>\n+#include <validation.h>\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+constexpr char DB_MUHASH = 'M';\n+\n+namespace {\n+\n+struct DBVal {\n+    uint256 muhash;\n+    uint64_t nTransactionOutputs;\n+    uint64_t nBogoSize;\n+    CAmount nTotalAmount;\n+    uint64_t nDiskSize;\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        READWRITE(muhash);\n+        READWRITE(nTransactionOutputs);\n+        READWRITE(nBogoSize);\n+        READWRITE(nTotalAmount);\n+        READWRITE(nDiskSize);\n+    }\n+};\n+\n+struct DBHeightKey {\n+    int height;\n+\n+    DBHeightKey() : height(0) {}\n+    explicit DBHeightKey(int height_in) : height(height_in) {}\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        ser_writedata8(s, DB_BLOCK_HEIGHT);\n+        ser_writedata32be(s, height);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        char prefix = ser_readdata8(s);\n+        if (prefix != DB_BLOCK_HEIGHT) {\n+            throw std::ios_base::failure(\"Invalid format for block filter index DB height key\");\n+        }\n+        height = ser_readdata32be(s);\n+    }\n+};\n+\n+struct DBHashKey {\n+    uint256 block_hash;\n+\n+    explicit DBHashKey(const uint256& hash_in) : block_hash(hash_in) {}\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        char prefix = DB_BLOCK_HASH;\n+        READWRITE(prefix);\n+        if (prefix != DB_BLOCK_HASH) {\n+            throw std::ios_base::failure(\"Invalid format for block filter index DB hash key\");\n+        }\n+\n+        READWRITE(block_hash);\n+    }\n+};\n+\n+struct DBMuhash {\n+    MuHash3072 hash;\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        READWRITE(hash);\n+    }\n+};\n+\n+}; // namespace\n+\n+std::unique_ptr<CoinStatsIndex> g_coin_stats_index;\n+\n+CoinStatsIndex::CoinStatsIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+{\n+    fs::path path = GetDataDir() / \"indexes\" / \"coinstats\";\n+    fs::create_directories(path);\n+\n+    m_db = MakeUnique<CoinStatsIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);\n+}\n+\n+bool CoinStatsIndex::Init()\n+{\n+    if (!m_db->Read(DB_MUHASH, m_muhash)) {\n+        // Check that the cause of the read failure is that the key does not exist. Any other errors\n+        // indicate database corruption or a disk failure, and starting the index would cause\n+        // further corruption.\n+        if (m_db->Exists(DB_MUHASH)) {\n+            return error(\"%s: Cannot read current %s state; index may be corrupted\",\n+                         __func__, GetName());\n+        }\n+\n+        // If the DB_MUHASH is not set, initialize empty values\n+        m_muhash = MuHash3072();\n+        m_nTransactionOutputs = 0;\n+        m_nBogoSize = 0;\n+        m_nTotalAmount = 0;\n+        m_nDiskSize = 0;\n+    }\n+\n+    return BaseIndex::Init();\n+}\n+\n+bool CoinStatsIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+\n+    // Ignore genesis block\n+    if (pindex->nHeight > 0) {\n+        if (!UndoReadFromDisk(block_undo, pindex)) {\n+            return false;\n+        }\n+\n+        std::pair<uint256, DBVal> read_out;\n+        if (!m_db->Read(DBHeightKey(pindex->nHeight - 1), read_out)) {\n+            return false;\n+        }\n+\n+        uint256 expected_block_hash = pindex->pprev->GetBlockHash();\n+        if (read_out.first != expected_block_hash) {\n+            return error(\"%s: previous block header belongs to unexpected block %s; expected %s\",\n+                         __func__, read_out.first.ToString(), expected_block_hash.ToString());\n+        }\n+\n+        bool is_bip30_block = (pindex->nHeight==91722 && pindex->GetBlockHash() == uint256S(\"0x00000000000271a2dc26e7667f8419f2e15416dc6955e5a6c6cdf3f2574dd08e\")) ||\n+                              (pindex->nHeight==91812 && pindex->GetBlockHash() == uint256S(\"0x00000000000af0aed4792b1acee3d966af36cf5def14935db8de83d6f9306f2f\"));\n+        MuHash3072 undo_muhash;\n+\n+        // Add the new utxos created from the block\n+        for (size_t i = 0; i < block.vtx.size(); ++i) {\n+            const auto& tx = block.vtx.at(i);\n+\n+            // Skip duplicate txid coinbase transactions (BIP30).\n+            if (is_bip30_block && tx->IsCoinBase()) {\n+                continue;\n+            }\n+\n+            for (size_t j = 0; j < tx->vout.size(); ++j) {\n+                const CTxOut& out = tx->vout[j];\n+                COutPoint outpoint = COutPoint(tx->GetHash(), j);\n+                Coin coin = Coin(out, pindex->nHeight, tx->IsCoinBase());\n+\n+                // Skip unspendable coins\n+                if (coin.out.scriptPubKey.IsUnspendable()) continue;\n+\n+                TruncatedSHA512Writer ss(SER_DISK, 0);\n+                ss << outpoint;\n+                ss << (uint32_t)(coin.nHeight * 2 + coin.fCoinBase);\n+                ss << coin.out;\n+                m_muhash *= MuHash3072(ss.GetHash().begin());\n+\n+                m_nTransactionOutputs++;\n+                m_nTotalAmount += coin.out.nValue;\n+                m_nBogoSize += 32 /* txid */ + 4 /* vout index */ + 4 /* height + coinbase */ + 8 /* amount */ +\n+                               2 /* scriptPubKey len */ + coin.out.scriptPubKey.size() /* scriptPubKey */;\n+            }\n+\n+            // The coinbase tx has no undo data since no former output is spent\n+            if (i > 0) {\n+                const auto& tx_undo = block_undo.vtxundo.at(i-1);\n+\n+                for (size_t j = 0; j < tx_undo.vprevout.size(); ++j) {\n+                    Coin coin = tx_undo.vprevout[j];\n+                    COutPoint outpoint = COutPoint(tx->vin[j].prevout.hash, tx->vin[j].prevout.n);\n+\n+                    TruncatedSHA512Writer ss(SER_DISK, 0);\n+                    ss << outpoint;\n+                    ss << (uint32_t)(coin.nHeight * 2 + coin.fCoinBase);\n+                    ss << coin.out;\n+                    undo_muhash *= MuHash3072(ss.GetHash().begin());\n+\n+                    m_nTransactionOutputs--;\n+                    m_nTotalAmount -= coin.out.nValue;\n+                    m_nBogoSize -= 32 /* txid */ + 4 /* vout index */ + 4 /* height + coinbase */ + 8 /* amount */ +\n+                                   2 /* scriptPubKey len */ + coin.out.scriptPubKey.size() /* scriptPubKey */;\n+                }\n+            }\n+        }\n+\n+        m_muhash /= undo_muhash;\n+    }\n+\n+    CCoinsView* coins_view = WITH_LOCK(cs_main, return &ChainstateActive().CoinsDB());\n+    m_nDiskSize = coins_view->EstimateSize();\n+\n+    std::pair<uint256, DBVal> value;\n+    value.first = pindex->GetBlockHash();\n+    value.second.muhash = currentHashInternal();\n+    value.second.nDiskSize = m_nDiskSize;\n+    value.second.nTransactionOutputs = m_nTransactionOutputs;\n+    value.second.nBogoSize = m_nBogoSize;\n+    value.second.nTotalAmount = m_nTotalAmount;\n+\n+    if (!m_db->Write(DBHeightKey(pindex->nHeight), value)) {\n+        return false;\n+    }\n+\n+    if (!m_db->Write(DB_MUHASH, m_muhash)) {\n+        return false;\n+    }\n+\n+    return true;\n+}\n+\n+static bool CopyHeightIndexToHashIndex(CDBIterator& db_it, CDBBatch& batch,\n+                                       const std::string& index_name,\n+                                       int start_height, int stop_height)\n+{\n+    DBHeightKey key(start_height);\n+    db_it.Seek(key);\n+\n+    for (int height = start_height; height <= stop_height; ++height) {\n+        if (!db_it.GetKey(key) || key.height != height) {\n+            return error(\"%s: unexpected key in %s: expected (%c, %d)\",\n+                         __func__, index_name, DB_BLOCK_HEIGHT, height);\n+        }\n+\n+        std::pair<uint256, DBVal> value;\n+        if (!db_it.GetValue(value)) {\n+            return error(\"%s: unable to read value in %s at key (%c, %d)\",\n+                         __func__, index_name, DB_BLOCK_HEIGHT, height);\n+        }\n+\n+        batch.Write(DBHashKey(value.first), std::move(value.second));\n+\n+        db_it.Next();\n+    }\n+    return true;\n+}\n+\n+bool CoinStatsIndex::Rewind(const CBlockIndex* current_tip, const CBlockIndex* new_tip)\n+{\n+    assert(current_tip->GetAncestor(new_tip->nHeight) == new_tip);\n+\n+    CDBBatch batch(*m_db);\n+    std::unique_ptr<CDBIterator> db_it(m_db->NewIterator());\n+\n+    {\n+        LOCK(cs_main);\n+        CBlockIndex* iter_tip = LookupBlockIndex(current_tip->GetBlockHash());\n+        auto& consensus_params = Params().GetConsensus();\n+\n+        do {\n+            CBlock block;\n+\n+            if (!ReadBlockFromDisk(block, iter_tip, consensus_params)) {\n+                return error(\"%s: Failed to read block %s from disk\",\n+                               __func__, iter_tip->GetBlockHash().ToString());\n+            }\n+\n+            ReverseBlock(block, iter_tip);\n+\n+            iter_tip = iter_tip->GetAncestor(iter_tip->nHeight - 1);\n+        } while (new_tip != iter_tip);\n+    }\n+\n+    // During a reorg, we need to copy all hash digests for blocks that are getting disconnected from the\n+    // height index to the hash index so we can still find them when the height index entries are\n+    // overwritten.\n+    if (!CopyHeightIndexToHashIndex(*db_it, batch, m_name, new_tip->nHeight, current_tip->nHeight)) {\n+        return false;\n+    }\n+\n+    if (!m_db->WriteBatch(batch)) return false;\n+\n+    return BaseIndex::Rewind(current_tip, new_tip);\n+}\n+\n+static bool LookupOne(const CDBWrapper& db, const CBlockIndex* block_index, DBVal& result)\n+{\n+    // First check if the result is stored under the height index and the value there matches the\n+    // block hash. This should be the case if the block is on the active chain.\n+    std::pair<uint256, DBVal> read_out;\n+    if (!db.Read(DBHeightKey(block_index->nHeight), read_out)) {\n+        return false;\n+    }\n+    if (read_out.first == block_index->GetBlockHash()) {\n+        result = std::move(read_out.second);\n+        return true;\n+    }\n+\n+    // If value at the height index corresponds to an different block, the result will be stored in\n+    // the hash index.\n+    return db.Read(DBHashKey(block_index->GetBlockHash()), result);\n+}\n+\n+bool CoinStatsIndex::LookupStats(const CBlockIndex* block_index, CCoinsStats& coins_stats) const\n+{\n+    DBVal entry;\n+    if (!LookupOne(*m_db, block_index, entry)) {\n+        return false;\n+    }\n+\n+    coins_stats.hashSerialized = entry.muhash;\n+    coins_stats.nTransactionOutputs = entry.nTransactionOutputs;\n+    coins_stats.nBogoSize = entry.nBogoSize;\n+    coins_stats.nTotalAmount = entry.nTotalAmount;\n+    coins_stats.nDiskSize = entry.nDiskSize;\n+\n+    return true;\n+}\n+\n+uint256 CoinStatsIndex::currentHashInternal()\n+{\n+    unsigned char out[384];\n+    m_muhash.Finalize(out);\n+    return (TruncatedSHA512Writer(SER_DISK, 0) << out).GetHash();\n+}\n+\n+// Reverse Block in case of reorg\n+bool CoinStatsIndex::ReverseBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+    std::pair<uint256, DBVal> read_out;\n+\n+    if (pindex->nHeight > 0) {\n+        if (!UndoReadFromDisk(block_undo, pindex)) {\n+            return false;\n+        }\n+\n+        if (!m_db->Read(DBHeightKey(pindex->nHeight - 1), read_out)) {\n+            return false;\n+        }\n+\n+        uint256 expected_block_hash = pindex->pprev->GetBlockHash();\n+        if (read_out.first != expected_block_hash) {\n+            return error(\"%s: previous block header belongs to unexpected block %s; expected %s\",\n+                         __func__, read_out.first.ToString(), expected_block_hash.ToString());\n+        }\n+    }\n+\n+    MuHash3072 do_muhash;",
    "path": "src/index/coinstatsindex.cpp",
    "position": 349,
    "original_position": 357,
    "commit_id": "58cf819caabe98a584a508f66a9f4fc347f8dfeb",
    "original_commit_id": "8e17009dcc4de977ced030e624b18ecc6ba19e63",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I came up with do_muhash because I needed the contrary term to undo_muhash. Since we are talking about rolling back a block that has 'do' (utxo created in the block) and 'undo' data (utxos destroyed in the block). I was thinking if I should reverse these terms when a block is removed or keep the terms the same as they were when the block was added. For me it seemed less confusing to keep the naming the same as when the block was added. So 'do' data that was added when the block is added still called 'do' data when the block is rolled back, just that the 'do' data is removed from the utxo set this time. Either way I probably confusing so I will keep adding comments to make this more clear.\r\n\r\nI should add that I only need these intermediate values because division is much slower than multiplication. Since these operations are cummutative I can multiply all the values that need to be removed from the muhash and then remove them all with just one division.",
    "created_at": "2020-05-15T14:29:49Z",
    "updated_at": "2020-05-15T15:06:29Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18000#discussion_r425841223",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18000",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/425841223"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18000#discussion_r425841223"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18000"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/425841223/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 349,
    "original_line": 349,
    "side": "RIGHT",
    "in_reply_to_id": 415330663
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/425841762",
    "pull_request_review_id": 412700661,
    "id": 425841762,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg0MTc2Mg==",
    "diff_hunk": "@@ -0,0 +1,407 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <crypto/muhash.h>\n+#include <hash.h>\n+#include <index/coinstatsindex.h>\n+#include <node/coinstats.h>\n+#include <serialize.h>\n+#include <txdb.h>\n+#include <undo.h>\n+#include <validation.h>\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+constexpr char DB_MUHASH = 'M';\n+\n+namespace {\n+\n+struct DBVal {\n+    uint256 muhash;\n+    uint64_t nTransactionOutputs;\n+    uint64_t nBogoSize;\n+    CAmount nTotalAmount;\n+    uint64_t nDiskSize;\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        READWRITE(muhash);\n+        READWRITE(nTransactionOutputs);\n+        READWRITE(nBogoSize);\n+        READWRITE(nTotalAmount);\n+        READWRITE(nDiskSize);\n+    }\n+};\n+\n+struct DBHeightKey {\n+    int height;\n+\n+    DBHeightKey() : height(0) {}\n+    explicit DBHeightKey(int height_in) : height(height_in) {}\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        ser_writedata8(s, DB_BLOCK_HEIGHT);\n+        ser_writedata32be(s, height);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        char prefix = ser_readdata8(s);\n+        if (prefix != DB_BLOCK_HEIGHT) {\n+            throw std::ios_base::failure(\"Invalid format for block filter index DB height key\");\n+        }\n+        height = ser_readdata32be(s);\n+    }\n+};\n+\n+struct DBHashKey {\n+    uint256 block_hash;\n+\n+    explicit DBHashKey(const uint256& hash_in) : block_hash(hash_in) {}\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        char prefix = DB_BLOCK_HASH;\n+        READWRITE(prefix);\n+        if (prefix != DB_BLOCK_HASH) {\n+            throw std::ios_base::failure(\"Invalid format for block filter index DB hash key\");\n+        }\n+\n+        READWRITE(block_hash);\n+    }\n+};\n+\n+struct DBMuhash {\n+    MuHash3072 hash;\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        READWRITE(hash);\n+    }\n+};\n+\n+}; // namespace\n+\n+std::unique_ptr<CoinStatsIndex> g_coin_stats_index;\n+\n+CoinStatsIndex::CoinStatsIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+{\n+    fs::path path = GetDataDir() / \"indexes\" / \"coinstats\";\n+    fs::create_directories(path);\n+\n+    m_db = MakeUnique<CoinStatsIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);\n+}\n+\n+bool CoinStatsIndex::Init()\n+{\n+    if (!m_db->Read(DB_MUHASH, m_muhash)) {\n+        // Check that the cause of the read failure is that the key does not exist. Any other errors\n+        // indicate database corruption or a disk failure, and starting the index would cause\n+        // further corruption.\n+        if (m_db->Exists(DB_MUHASH)) {\n+            return error(\"%s: Cannot read current %s state; index may be corrupted\",\n+                         __func__, GetName());\n+        }\n+\n+        // If the DB_MUHASH is not set, initialize empty values\n+        m_muhash = MuHash3072();\n+        m_nTransactionOutputs = 0;\n+        m_nBogoSize = 0;\n+        m_nTotalAmount = 0;\n+        m_nDiskSize = 0;\n+    }\n+\n+    return BaseIndex::Init();\n+}\n+\n+bool CoinStatsIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+\n+    // Ignore genesis block\n+    if (pindex->nHeight > 0) {\n+        if (!UndoReadFromDisk(block_undo, pindex)) {\n+            return false;\n+        }\n+\n+        std::pair<uint256, DBVal> read_out;\n+        if (!m_db->Read(DBHeightKey(pindex->nHeight - 1), read_out)) {\n+            return false;\n+        }\n+\n+        uint256 expected_block_hash = pindex->pprev->GetBlockHash();\n+        if (read_out.first != expected_block_hash) {\n+            return error(\"%s: previous block header belongs to unexpected block %s; expected %s\",\n+                         __func__, read_out.first.ToString(), expected_block_hash.ToString());\n+        }\n+\n+        bool is_bip30_block = (pindex->nHeight==91722 && pindex->GetBlockHash() == uint256S(\"0x00000000000271a2dc26e7667f8419f2e15416dc6955e5a6c6cdf3f2574dd08e\")) ||\n+                              (pindex->nHeight==91812 && pindex->GetBlockHash() == uint256S(\"0x00000000000af0aed4792b1acee3d966af36cf5def14935db8de83d6f9306f2f\"));\n+        MuHash3072 undo_muhash;\n+\n+        // Add the new utxos created from the block\n+        for (size_t i = 0; i < block.vtx.size(); ++i) {\n+            const auto& tx = block.vtx.at(i);\n+\n+            // Skip duplicate txid coinbase transactions (BIP30).\n+            if (is_bip30_block && tx->IsCoinBase()) {\n+                continue;\n+            }\n+\n+            for (size_t j = 0; j < tx->vout.size(); ++j) {\n+                const CTxOut& out = tx->vout[j];\n+                COutPoint outpoint = COutPoint(tx->GetHash(), j);\n+                Coin coin = Coin(out, pindex->nHeight, tx->IsCoinBase());\n+\n+                // Skip unspendable coins\n+                if (coin.out.scriptPubKey.IsUnspendable()) continue;\n+\n+                TruncatedSHA512Writer ss(SER_DISK, 0);\n+                ss << outpoint;\n+                ss << (uint32_t)(coin.nHeight * 2 + coin.fCoinBase);\n+                ss << coin.out;\n+                m_muhash *= MuHash3072(ss.GetHash().begin());\n+\n+                m_nTransactionOutputs++;\n+                m_nTotalAmount += coin.out.nValue;\n+                m_nBogoSize += 32 /* txid */ + 4 /* vout index */ + 4 /* height + coinbase */ + 8 /* amount */ +\n+                               2 /* scriptPubKey len */ + coin.out.scriptPubKey.size() /* scriptPubKey */;\n+            }\n+\n+            // The coinbase tx has no undo data since no former output is spent\n+            if (i > 0) {\n+                const auto& tx_undo = block_undo.vtxundo.at(i-1);\n+\n+                for (size_t j = 0; j < tx_undo.vprevout.size(); ++j) {\n+                    Coin coin = tx_undo.vprevout[j];\n+                    COutPoint outpoint = COutPoint(tx->vin[j].prevout.hash, tx->vin[j].prevout.n);\n+\n+                    TruncatedSHA512Writer ss(SER_DISK, 0);\n+                    ss << outpoint;\n+                    ss << (uint32_t)(coin.nHeight * 2 + coin.fCoinBase);\n+                    ss << coin.out;\n+                    undo_muhash *= MuHash3072(ss.GetHash().begin());\n+\n+                    m_nTransactionOutputs--;\n+                    m_nTotalAmount -= coin.out.nValue;\n+                    m_nBogoSize -= 32 /* txid */ + 4 /* vout index */ + 4 /* height + coinbase */ + 8 /* amount */ +\n+                                   2 /* scriptPubKey len */ + coin.out.scriptPubKey.size() /* scriptPubKey */;\n+                }\n+            }\n+        }\n+\n+        m_muhash /= undo_muhash;",
    "path": "src/index/coinstatsindex.cpp",
    "position": 197,
    "original_position": 205,
    "commit_id": "58cf819caabe98a584a508f66a9f4fc347f8dfeb",
    "original_commit_id": "8e17009dcc4de977ced030e624b18ecc6ba19e63",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "It is the intermediate muhash for all the utxos that need to be removed/undone. See   also my longer explanation for `do_muhash`.",
    "created_at": "2020-05-15T14:30:41Z",
    "updated_at": "2020-05-15T15:06:29Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18000#discussion_r425841762",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18000",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/425841762"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18000#discussion_r425841762"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18000"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/425841762/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 197,
    "original_line": 197,
    "side": "RIGHT",
    "in_reply_to_id": 415330966
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/425842786",
    "pull_request_review_id": 412702074,
    "id": 425842786,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg0Mjc4Ng==",
    "diff_hunk": "@@ -0,0 +1,407 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <crypto/muhash.h>\n+#include <hash.h>\n+#include <index/coinstatsindex.h>\n+#include <node/coinstats.h>\n+#include <serialize.h>\n+#include <txdb.h>\n+#include <undo.h>\n+#include <validation.h>\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+constexpr char DB_MUHASH = 'M';\n+\n+namespace {\n+\n+struct DBVal {\n+    uint256 muhash;\n+    uint64_t nTransactionOutputs;\n+    uint64_t nBogoSize;\n+    CAmount nTotalAmount;\n+    uint64_t nDiskSize;\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        READWRITE(muhash);\n+        READWRITE(nTransactionOutputs);\n+        READWRITE(nBogoSize);\n+        READWRITE(nTotalAmount);\n+        READWRITE(nDiskSize);\n+    }\n+};\n+\n+struct DBHeightKey {\n+    int height;\n+\n+    DBHeightKey() : height(0) {}\n+    explicit DBHeightKey(int height_in) : height(height_in) {}\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        ser_writedata8(s, DB_BLOCK_HEIGHT);\n+        ser_writedata32be(s, height);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        char prefix = ser_readdata8(s);\n+        if (prefix != DB_BLOCK_HEIGHT) {\n+            throw std::ios_base::failure(\"Invalid format for block filter index DB height key\");\n+        }\n+        height = ser_readdata32be(s);\n+    }\n+};\n+\n+struct DBHashKey {\n+    uint256 block_hash;\n+\n+    explicit DBHashKey(const uint256& hash_in) : block_hash(hash_in) {}\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        char prefix = DB_BLOCK_HASH;\n+        READWRITE(prefix);\n+        if (prefix != DB_BLOCK_HASH) {\n+            throw std::ios_base::failure(\"Invalid format for block filter index DB hash key\");\n+        }\n+\n+        READWRITE(block_hash);\n+    }\n+};\n+\n+struct DBMuhash {\n+    MuHash3072 hash;\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        READWRITE(hash);\n+    }\n+};\n+\n+}; // namespace\n+\n+std::unique_ptr<CoinStatsIndex> g_coin_stats_index;\n+\n+CoinStatsIndex::CoinStatsIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+{\n+    fs::path path = GetDataDir() / \"indexes\" / \"coinstats\";\n+    fs::create_directories(path);\n+\n+    m_db = MakeUnique<CoinStatsIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);\n+}\n+\n+bool CoinStatsIndex::Init()\n+{\n+    if (!m_db->Read(DB_MUHASH, m_muhash)) {\n+        // Check that the cause of the read failure is that the key does not exist. Any other errors\n+        // indicate database corruption or a disk failure, and starting the index would cause\n+        // further corruption.\n+        if (m_db->Exists(DB_MUHASH)) {\n+            return error(\"%s: Cannot read current %s state; index may be corrupted\",\n+                         __func__, GetName());\n+        }\n+\n+        // If the DB_MUHASH is not set, initialize empty values\n+        m_muhash = MuHash3072();\n+        m_nTransactionOutputs = 0;\n+        m_nBogoSize = 0;\n+        m_nTotalAmount = 0;\n+        m_nDiskSize = 0;\n+    }\n+\n+    return BaseIndex::Init();\n+}\n+\n+bool CoinStatsIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+\n+    // Ignore genesis block\n+    if (pindex->nHeight > 0) {\n+        if (!UndoReadFromDisk(block_undo, pindex)) {\n+            return false;\n+        }\n+\n+        std::pair<uint256, DBVal> read_out;\n+        if (!m_db->Read(DBHeightKey(pindex->nHeight - 1), read_out)) {\n+            return false;\n+        }\n+\n+        uint256 expected_block_hash = pindex->pprev->GetBlockHash();\n+        if (read_out.first != expected_block_hash) {\n+            return error(\"%s: previous block header belongs to unexpected block %s; expected %s\",\n+                         __func__, read_out.first.ToString(), expected_block_hash.ToString());\n+        }\n+\n+        bool is_bip30_block = (pindex->nHeight==91722 && pindex->GetBlockHash() == uint256S(\"0x00000000000271a2dc26e7667f8419f2e15416dc6955e5a6c6cdf3f2574dd08e\")) ||\n+                              (pindex->nHeight==91812 && pindex->GetBlockHash() == uint256S(\"0x00000000000af0aed4792b1acee3d966af36cf5def14935db8de83d6f9306f2f\"));\n+        MuHash3072 undo_muhash;\n+\n+        // Add the new utxos created from the block\n+        for (size_t i = 0; i < block.vtx.size(); ++i) {\n+            const auto& tx = block.vtx.at(i);\n+\n+            // Skip duplicate txid coinbase transactions (BIP30).\n+            if (is_bip30_block && tx->IsCoinBase()) {\n+                continue;\n+            }\n+\n+            for (size_t j = 0; j < tx->vout.size(); ++j) {\n+                const CTxOut& out = tx->vout[j];\n+                COutPoint outpoint = COutPoint(tx->GetHash(), j);\n+                Coin coin = Coin(out, pindex->nHeight, tx->IsCoinBase());\n+\n+                // Skip unspendable coins\n+                if (coin.out.scriptPubKey.IsUnspendable()) continue;\n+\n+                TruncatedSHA512Writer ss(SER_DISK, 0);\n+                ss << outpoint;\n+                ss << (uint32_t)(coin.nHeight * 2 + coin.fCoinBase);\n+                ss << coin.out;\n+                m_muhash *= MuHash3072(ss.GetHash().begin());\n+\n+                m_nTransactionOutputs++;\n+                m_nTotalAmount += coin.out.nValue;\n+                m_nBogoSize += 32 /* txid */ + 4 /* vout index */ + 4 /* height + coinbase */ + 8 /* amount */ +\n+                               2 /* scriptPubKey len */ + coin.out.scriptPubKey.size() /* scriptPubKey */;\n+            }\n+\n+            // The coinbase tx has no undo data since no former output is spent",
    "path": "src/index/coinstatsindex.cpp",
    "position": 179,
    "original_position": 183,
    "commit_id": "58cf819caabe98a584a508f66a9f4fc347f8dfeb",
    "original_commit_id": "8e17009dcc4de977ced030e624b18ecc6ba19e63",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Yes but the coinbase does not have any undo data because it is not spending any outputs. This section is only dealing with the undo data of the transactions in the block, it is not dealing with reorgs etc. which are further below.",
    "created_at": "2020-05-15T14:32:18Z",
    "updated_at": "2020-05-15T15:06:29Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18000#discussion_r425842786",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18000",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/425842786"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18000#discussion_r425842786"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18000"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/425842786/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 179,
    "original_line": 179,
    "side": "RIGHT",
    "in_reply_to_id": 415329750
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/425842935",
    "pull_request_review_id": 412702266,
    "id": 425842935,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg0MjkzNQ==",
    "diff_hunk": "@@ -0,0 +1,407 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <crypto/muhash.h>\n+#include <hash.h>\n+#include <index/coinstatsindex.h>\n+#include <node/coinstats.h>\n+#include <serialize.h>\n+#include <txdb.h>\n+#include <undo.h>\n+#include <validation.h>\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+constexpr char DB_MUHASH = 'M';\n+\n+namespace {\n+\n+struct DBVal {\n+    uint256 muhash;\n+    uint64_t nTransactionOutputs;\n+    uint64_t nBogoSize;\n+    CAmount nTotalAmount;\n+    uint64_t nDiskSize;\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        READWRITE(muhash);\n+        READWRITE(nTransactionOutputs);\n+        READWRITE(nBogoSize);\n+        READWRITE(nTotalAmount);\n+        READWRITE(nDiskSize);\n+    }\n+};\n+\n+struct DBHeightKey {\n+    int height;\n+\n+    DBHeightKey() : height(0) {}\n+    explicit DBHeightKey(int height_in) : height(height_in) {}\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        ser_writedata8(s, DB_BLOCK_HEIGHT);\n+        ser_writedata32be(s, height);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        char prefix = ser_readdata8(s);\n+        if (prefix != DB_BLOCK_HEIGHT) {\n+            throw std::ios_base::failure(\"Invalid format for block filter index DB height key\");\n+        }\n+        height = ser_readdata32be(s);\n+    }\n+};\n+\n+struct DBHashKey {\n+    uint256 block_hash;\n+\n+    explicit DBHashKey(const uint256& hash_in) : block_hash(hash_in) {}\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        char prefix = DB_BLOCK_HASH;\n+        READWRITE(prefix);\n+        if (prefix != DB_BLOCK_HASH) {\n+            throw std::ios_base::failure(\"Invalid format for block filter index DB hash key\");\n+        }\n+\n+        READWRITE(block_hash);\n+    }\n+};\n+\n+struct DBMuhash {\n+    MuHash3072 hash;\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        READWRITE(hash);\n+    }\n+};\n+\n+}; // namespace\n+\n+std::unique_ptr<CoinStatsIndex> g_coin_stats_index;\n+\n+CoinStatsIndex::CoinStatsIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+{\n+    fs::path path = GetDataDir() / \"indexes\" / \"coinstats\";\n+    fs::create_directories(path);\n+\n+    m_db = MakeUnique<CoinStatsIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);\n+}\n+\n+bool CoinStatsIndex::Init()\n+{\n+    if (!m_db->Read(DB_MUHASH, m_muhash)) {\n+        // Check that the cause of the read failure is that the key does not exist. Any other errors\n+        // indicate database corruption or a disk failure, and starting the index would cause\n+        // further corruption.\n+        if (m_db->Exists(DB_MUHASH)) {\n+            return error(\"%s: Cannot read current %s state; index may be corrupted\",\n+                         __func__, GetName());\n+        }\n+\n+        // If the DB_MUHASH is not set, initialize empty values\n+        m_muhash = MuHash3072();\n+        m_nTransactionOutputs = 0;\n+        m_nBogoSize = 0;\n+        m_nTotalAmount = 0;\n+        m_nDiskSize = 0;\n+    }\n+\n+    return BaseIndex::Init();\n+}\n+\n+bool CoinStatsIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+\n+    // Ignore genesis block\n+    if (pindex->nHeight > 0) {\n+        if (!UndoReadFromDisk(block_undo, pindex)) {\n+            return false;\n+        }\n+\n+        std::pair<uint256, DBVal> read_out;\n+        if (!m_db->Read(DBHeightKey(pindex->nHeight - 1), read_out)) {\n+            return false;\n+        }\n+\n+        uint256 expected_block_hash = pindex->pprev->GetBlockHash();\n+        if (read_out.first != expected_block_hash) {\n+            return error(\"%s: previous block header belongs to unexpected block %s; expected %s\",\n+                         __func__, read_out.first.ToString(), expected_block_hash.ToString());\n+        }\n+\n+        bool is_bip30_block = (pindex->nHeight==91722 && pindex->GetBlockHash() == uint256S(\"0x00000000000271a2dc26e7667f8419f2e15416dc6955e5a6c6cdf3f2574dd08e\")) ||\n+                              (pindex->nHeight==91812 && pindex->GetBlockHash() == uint256S(\"0x00000000000af0aed4792b1acee3d966af36cf5def14935db8de83d6f9306f2f\"));\n+        MuHash3072 undo_muhash;\n+\n+        // Add the new utxos created from the block\n+        for (size_t i = 0; i < block.vtx.size(); ++i) {\n+            const auto& tx = block.vtx.at(i);\n+\n+            // Skip duplicate txid coinbase transactions (BIP30).\n+            if (is_bip30_block && tx->IsCoinBase()) {\n+                continue;\n+            }\n+\n+            for (size_t j = 0; j < tx->vout.size(); ++j) {\n+                const CTxOut& out = tx->vout[j];\n+                COutPoint outpoint = COutPoint(tx->GetHash(), j);\n+                Coin coin = Coin(out, pindex->nHeight, tx->IsCoinBase());\n+\n+                // Skip unspendable coins\n+                if (coin.out.scriptPubKey.IsUnspendable()) continue;\n+\n+                TruncatedSHA512Writer ss(SER_DISK, 0);",
    "path": "src/index/coinstatsindex.cpp",
    "position": null,
    "original_position": 171,
    "commit_id": "58cf819caabe98a584a508f66a9f4fc347f8dfeb",
    "original_commit_id": "8e17009dcc4de977ced030e624b18ecc6ba19e63",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "done",
    "created_at": "2020-05-15T14:32:32Z",
    "updated_at": "2020-05-15T15:06:29Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18000#discussion_r425842935",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18000",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/425842935"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18000#discussion_r425842935"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18000"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/425842935/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 171,
    "side": "RIGHT",
    "in_reply_to_id": 415328606
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/425847353",
    "pull_request_review_id": 412707796,
    "id": 425847353,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg0NzM1Mw==",
    "diff_hunk": "@@ -0,0 +1,407 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <crypto/muhash.h>\n+#include <hash.h>\n+#include <index/coinstatsindex.h>\n+#include <node/coinstats.h>\n+#include <serialize.h>\n+#include <txdb.h>\n+#include <undo.h>\n+#include <validation.h>\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+constexpr char DB_MUHASH = 'M';\n+\n+namespace {\n+\n+struct DBVal {\n+    uint256 muhash;\n+    uint64_t nTransactionOutputs;\n+    uint64_t nBogoSize;\n+    CAmount nTotalAmount;\n+    uint64_t nDiskSize;\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        READWRITE(muhash);\n+        READWRITE(nTransactionOutputs);\n+        READWRITE(nBogoSize);\n+        READWRITE(nTotalAmount);\n+        READWRITE(nDiskSize);\n+    }\n+};\n+\n+struct DBHeightKey {\n+    int height;\n+\n+    DBHeightKey() : height(0) {}\n+    explicit DBHeightKey(int height_in) : height(height_in) {}\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        ser_writedata8(s, DB_BLOCK_HEIGHT);\n+        ser_writedata32be(s, height);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        char prefix = ser_readdata8(s);\n+        if (prefix != DB_BLOCK_HEIGHT) {\n+            throw std::ios_base::failure(\"Invalid format for block filter index DB height key\");\n+        }\n+        height = ser_readdata32be(s);\n+    }\n+};\n+\n+struct DBHashKey {\n+    uint256 block_hash;\n+\n+    explicit DBHashKey(const uint256& hash_in) : block_hash(hash_in) {}\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        char prefix = DB_BLOCK_HASH;\n+        READWRITE(prefix);\n+        if (prefix != DB_BLOCK_HASH) {\n+            throw std::ios_base::failure(\"Invalid format for block filter index DB hash key\");\n+        }\n+\n+        READWRITE(block_hash);\n+    }\n+};\n+\n+struct DBMuhash {\n+    MuHash3072 hash;\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        READWRITE(hash);\n+    }\n+};\n+\n+}; // namespace\n+\n+std::unique_ptr<CoinStatsIndex> g_coin_stats_index;\n+\n+CoinStatsIndex::CoinStatsIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+{\n+    fs::path path = GetDataDir() / \"indexes\" / \"coinstats\";\n+    fs::create_directories(path);\n+\n+    m_db = MakeUnique<CoinStatsIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);\n+}\n+\n+bool CoinStatsIndex::Init()\n+{\n+    if (!m_db->Read(DB_MUHASH, m_muhash)) {\n+        // Check that the cause of the read failure is that the key does not exist. Any other errors\n+        // indicate database corruption or a disk failure, and starting the index would cause\n+        // further corruption.\n+        if (m_db->Exists(DB_MUHASH)) {\n+            return error(\"%s: Cannot read current %s state; index may be corrupted\",\n+                         __func__, GetName());\n+        }\n+\n+        // If the DB_MUHASH is not set, initialize empty values\n+        m_muhash = MuHash3072();\n+        m_nTransactionOutputs = 0;\n+        m_nBogoSize = 0;\n+        m_nTotalAmount = 0;\n+        m_nDiskSize = 0;\n+    }\n+\n+    return BaseIndex::Init();\n+}\n+\n+bool CoinStatsIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+\n+    // Ignore genesis block\n+    if (pindex->nHeight > 0) {\n+        if (!UndoReadFromDisk(block_undo, pindex)) {\n+            return false;\n+        }\n+\n+        std::pair<uint256, DBVal> read_out;\n+        if (!m_db->Read(DBHeightKey(pindex->nHeight - 1), read_out)) {\n+            return false;\n+        }\n+\n+        uint256 expected_block_hash = pindex->pprev->GetBlockHash();\n+        if (read_out.first != expected_block_hash) {\n+            return error(\"%s: previous block header belongs to unexpected block %s; expected %s\",\n+                         __func__, read_out.first.ToString(), expected_block_hash.ToString());\n+        }\n+\n+        bool is_bip30_block = (pindex->nHeight==91722 && pindex->GetBlockHash() == uint256S(\"0x00000000000271a2dc26e7667f8419f2e15416dc6955e5a6c6cdf3f2574dd08e\")) ||\n+                              (pindex->nHeight==91812 && pindex->GetBlockHash() == uint256S(\"0x00000000000af0aed4792b1acee3d966af36cf5def14935db8de83d6f9306f2f\"));\n+        MuHash3072 undo_muhash;\n+\n+        // Add the new utxos created from the block\n+        for (size_t i = 0; i < block.vtx.size(); ++i) {\n+            const auto& tx = block.vtx.at(i);\n+\n+            // Skip duplicate txid coinbase transactions (BIP30).\n+            if (is_bip30_block && tx->IsCoinBase()) {\n+                continue;\n+            }\n+\n+            for (size_t j = 0; j < tx->vout.size(); ++j) {\n+                const CTxOut& out = tx->vout[j];\n+                COutPoint outpoint = COutPoint(tx->GetHash(), j);\n+                Coin coin = Coin(out, pindex->nHeight, tx->IsCoinBase());\n+\n+                // Skip unspendable coins\n+                if (coin.out.scriptPubKey.IsUnspendable()) continue;",
    "path": "src/index/coinstatsindex.cpp",
    "position": 169,
    "original_position": 169,
    "commit_id": "58cf819caabe98a584a508f66a9f4fc347f8dfeb",
    "original_commit_id": "8e17009dcc4de977ced030e624b18ecc6ba19e63",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "No, I am only skipping coins here that are not part of the UTXO set. The same logic is used for evaluating if a coin is added to the UTXO set, see https://github.com/bitcoin/bitcoin/blob/951870807ea28e05cf074e364e1b55e985ab9f6d/src/coins.cpp#L70",
    "created_at": "2020-05-15T14:39:21Z",
    "updated_at": "2020-05-15T15:06:29Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18000#discussion_r425847353",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18000",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/425847353"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18000#discussion_r425847353"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18000"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/425847353/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 169,
    "original_line": 169,
    "side": "RIGHT",
    "in_reply_to_id": 415328497
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/425848226",
    "pull_request_review_id": 412708891,
    "id": 425848226,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg0ODIyNg==",
    "diff_hunk": "@@ -0,0 +1,407 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <crypto/muhash.h>\n+#include <hash.h>\n+#include <index/coinstatsindex.h>\n+#include <node/coinstats.h>\n+#include <serialize.h>\n+#include <txdb.h>\n+#include <undo.h>\n+#include <validation.h>\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+constexpr char DB_MUHASH = 'M';\n+\n+namespace {\n+\n+struct DBVal {\n+    uint256 muhash;\n+    uint64_t nTransactionOutputs;\n+    uint64_t nBogoSize;\n+    CAmount nTotalAmount;\n+    uint64_t nDiskSize;\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        READWRITE(muhash);\n+        READWRITE(nTransactionOutputs);\n+        READWRITE(nBogoSize);\n+        READWRITE(nTotalAmount);\n+        READWRITE(nDiskSize);\n+    }\n+};\n+\n+struct DBHeightKey {\n+    int height;\n+\n+    DBHeightKey() : height(0) {}\n+    explicit DBHeightKey(int height_in) : height(height_in) {}\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        ser_writedata8(s, DB_BLOCK_HEIGHT);\n+        ser_writedata32be(s, height);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        char prefix = ser_readdata8(s);\n+        if (prefix != DB_BLOCK_HEIGHT) {\n+            throw std::ios_base::failure(\"Invalid format for block filter index DB height key\");\n+        }\n+        height = ser_readdata32be(s);\n+    }\n+};\n+\n+struct DBHashKey {\n+    uint256 block_hash;\n+\n+    explicit DBHashKey(const uint256& hash_in) : block_hash(hash_in) {}\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        char prefix = DB_BLOCK_HASH;\n+        READWRITE(prefix);\n+        if (prefix != DB_BLOCK_HASH) {\n+            throw std::ios_base::failure(\"Invalid format for block filter index DB hash key\");\n+        }\n+\n+        READWRITE(block_hash);\n+    }\n+};\n+\n+struct DBMuhash {\n+    MuHash3072 hash;\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        READWRITE(hash);\n+    }\n+};\n+\n+}; // namespace\n+\n+std::unique_ptr<CoinStatsIndex> g_coin_stats_index;\n+\n+CoinStatsIndex::CoinStatsIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+{\n+    fs::path path = GetDataDir() / \"indexes\" / \"coinstats\";\n+    fs::create_directories(path);\n+\n+    m_db = MakeUnique<CoinStatsIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);\n+}\n+\n+bool CoinStatsIndex::Init()\n+{\n+    if (!m_db->Read(DB_MUHASH, m_muhash)) {\n+        // Check that the cause of the read failure is that the key does not exist. Any other errors\n+        // indicate database corruption or a disk failure, and starting the index would cause\n+        // further corruption.\n+        if (m_db->Exists(DB_MUHASH)) {\n+            return error(\"%s: Cannot read current %s state; index may be corrupted\",\n+                         __func__, GetName());\n+        }\n+\n+        // If the DB_MUHASH is not set, initialize empty values\n+        m_muhash = MuHash3072();\n+        m_nTransactionOutputs = 0;\n+        m_nBogoSize = 0;\n+        m_nTotalAmount = 0;\n+        m_nDiskSize = 0;\n+    }\n+\n+    return BaseIndex::Init();\n+}\n+\n+bool CoinStatsIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+\n+    // Ignore genesis block\n+    if (pindex->nHeight > 0) {\n+        if (!UndoReadFromDisk(block_undo, pindex)) {\n+            return false;\n+        }\n+\n+        std::pair<uint256, DBVal> read_out;\n+        if (!m_db->Read(DBHeightKey(pindex->nHeight - 1), read_out)) {\n+            return false;\n+        }\n+\n+        uint256 expected_block_hash = pindex->pprev->GetBlockHash();\n+        if (read_out.first != expected_block_hash) {\n+            return error(\"%s: previous block header belongs to unexpected block %s; expected %s\",\n+                         __func__, read_out.first.ToString(), expected_block_hash.ToString());\n+        }\n+\n+        bool is_bip30_block = (pindex->nHeight==91722 && pindex->GetBlockHash() == uint256S(\"0x00000000000271a2dc26e7667f8419f2e15416dc6955e5a6c6cdf3f2574dd08e\")) ||\n+                              (pindex->nHeight==91812 && pindex->GetBlockHash() == uint256S(\"0x00000000000af0aed4792b1acee3d966af36cf5def14935db8de83d6f9306f2f\"));\n+        MuHash3072 undo_muhash;\n+\n+        // Add the new utxos created from the block\n+        for (size_t i = 0; i < block.vtx.size(); ++i) {\n+            const auto& tx = block.vtx.at(i);\n+\n+            // Skip duplicate txid coinbase transactions (BIP30).\n+            if (is_bip30_block && tx->IsCoinBase()) {",
    "path": "src/index/coinstatsindex.cpp",
    "position": 159,
    "original_position": 159,
    "commit_id": "58cf819caabe98a584a508f66a9f4fc347f8dfeb",
    "original_commit_id": "8e17009dcc4de977ced030e624b18ecc6ba19e63",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "If we wouldn't skip these we would get a different hash from the index than we get from the non-index nodes because these outputs are also not in the UTXO set which the non-index nodes use to calculate the hash. My goal is that the hash is the same with or without the index.",
    "created_at": "2020-05-15T14:40:43Z",
    "updated_at": "2020-05-15T15:06:29Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18000#discussion_r425848226",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18000",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/425848226"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18000#discussion_r425848226"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18000"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/425848226/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 159,
    "original_line": 159,
    "side": "RIGHT",
    "in_reply_to_id": 415327363
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/425848314",
    "pull_request_review_id": 412709004,
    "id": 425848314,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg0ODMxNA==",
    "diff_hunk": "@@ -0,0 +1,407 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <crypto/muhash.h>\n+#include <hash.h>\n+#include <index/coinstatsindex.h>\n+#include <node/coinstats.h>\n+#include <serialize.h>\n+#include <txdb.h>\n+#include <undo.h>\n+#include <validation.h>\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+constexpr char DB_MUHASH = 'M';\n+\n+namespace {\n+\n+struct DBVal {\n+    uint256 muhash;\n+    uint64_t nTransactionOutputs;\n+    uint64_t nBogoSize;\n+    CAmount nTotalAmount;\n+    uint64_t nDiskSize;\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        READWRITE(muhash);\n+        READWRITE(nTransactionOutputs);\n+        READWRITE(nBogoSize);\n+        READWRITE(nTotalAmount);\n+        READWRITE(nDiskSize);\n+    }\n+};\n+\n+struct DBHeightKey {\n+    int height;\n+\n+    DBHeightKey() : height(0) {}\n+    explicit DBHeightKey(int height_in) : height(height_in) {}\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        ser_writedata8(s, DB_BLOCK_HEIGHT);\n+        ser_writedata32be(s, height);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        char prefix = ser_readdata8(s);\n+        if (prefix != DB_BLOCK_HEIGHT) {\n+            throw std::ios_base::failure(\"Invalid format for block filter index DB height key\");",
    "path": "src/index/coinstatsindex.cpp",
    "position": null,
    "original_position": 59,
    "commit_id": "58cf819caabe98a584a508f66a9f4fc347f8dfeb",
    "original_commit_id": "8e17009dcc4de977ced030e624b18ecc6ba19e63",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "done",
    "created_at": "2020-05-15T14:40:52Z",
    "updated_at": "2020-05-15T15:06:29Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18000#discussion_r425848314",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18000",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/425848314"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18000#discussion_r425848314"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18000"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/425848314/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 59,
    "side": "RIGHT",
    "in_reply_to_id": 415326350
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/425848433",
    "pull_request_review_id": 412709174,
    "id": 425848433,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg0ODQzMw==",
    "diff_hunk": "@@ -0,0 +1,57 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INDEX_COINSTATSINDEX_H\n+#define BITCOIN_INDEX_COINSTATSINDEX_H\n+\n+#include <chain.h>\n+#include <crypto/muhash.h>\n+#include <flatfile.h>\n+#include <index/base.h>\n+#include <node/coinstats.h>\n+\n+/**\n+ * CoinStatsIndex maintains a rolling hash of the utxo set and\n+ * other updated coin statistics.\n+ */\n+class CoinStatsIndex final : public BaseIndex\n+{\n+private:\n+    std::string m_name;\n+    std::unique_ptr<BaseIndex::DB> m_db;\n+\n+    MuHash3072 m_muhash;\n+    uint64_t m_nTransactionOutputs;",
    "path": "src/index/coinstatsindex.h",
    "position": null,
    "original_position": 25,
    "commit_id": "58cf819caabe98a584a508f66a9f4fc347f8dfeb",
    "original_commit_id": "8e17009dcc4de977ced030e624b18ecc6ba19e63",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "done",
    "created_at": "2020-05-15T14:41:03Z",
    "updated_at": "2020-05-15T15:06:29Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18000#discussion_r425848433",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18000",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/425848433"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18000#discussion_r425848433"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18000"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/425848433/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 25,
    "side": "RIGHT",
    "in_reply_to_id": 415325693
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/425849103",
    "pull_request_review_id": 412710031,
    "id": 425849103,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg0OTEwMw==",
    "diff_hunk": "@@ -6,29 +6,33 @@\n #include <node/coinstats.h>\n \n #include <coins.h>\n+#include <crypto/muhash.h>\n #include <hash.h>\n #include <serialize.h>\n-#include <validation.h>\n #include <uint256.h>\n #include <util/system.h>\n+#include <validation.h>\n \n #include <map>\n \n-static void ApplyStats(CCoinsStats &stats, CHashWriter& ss, const uint256& hash, const std::map<uint32_t, Coin>& outputs)\n+static void ApplyStats(CCoinsStats &stats, MuHash3072& muhash, const uint256& hash, const std::map<uint32_t, Coin>& outputs)\n {\n     assert(!outputs.empty());\n-    ss << hash;\n-    ss << VARINT(outputs.begin()->second.nHeight * 2 + outputs.begin()->second.fCoinBase ? 1u : 0u);\n     for (const auto& output : outputs) {\n-        ss << VARINT(output.first + 1);\n-        ss << output.second.out.scriptPubKey;\n-        ss << VARINT_MODE(output.second.out.nValue, VarIntMode::NONNEGATIVE_SIGNED);\n+        COutPoint outpoint = COutPoint(hash, output.first);\n+        Coin coin = output.second;\n+\n+        TruncatedSHA512Writer ss(SER_DISK, 0);\n+        ss << outpoint;\n+        ss << (uint32_t)(coin.nHeight * 2 + coin.fCoinBase);",
    "path": "src/node/coinstats.cpp",
    "position": null,
    "original_position": 29,
    "commit_id": "58cf819caabe98a584a508f66a9f4fc347f8dfeb",
    "original_commit_id": "d22951b3f8d79b5ec2069961c084c8d27b6b13fa",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Hm, it's a good question. I have not questioned it beyond the fact that it's a neat way to document height and coinbase in one uint32. fCoinbase doesn't make a difference for BIP30 because those were all coinbases and the duplicated txs are filtered earlier already. So I don't see a reason why we would need the information but if we can have it without taking up any extra space, why not? I think based on the commit message here I would guess the reasoning is that this information should be added to hash and it was added in one to minimize change: https://github.com/bitcoin/bitcoin/commit/d342424301013ec47dc146a4beb49d5c9319d80a",
    "created_at": "2020-05-15T14:42:03Z",
    "updated_at": "2020-05-15T15:06:29Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18000#discussion_r425849103",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18000",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/425849103"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18000#discussion_r425849103"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18000"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/425849103/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 27,
    "side": "RIGHT",
    "in_reply_to_id": 415323587
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/425849308",
    "pull_request_review_id": 412710300,
    "id": 425849308,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg0OTMwOA==",
    "diff_hunk": "@@ -6,29 +6,33 @@\n #include <node/coinstats.h>\n \n #include <coins.h>\n+#include <crypto/muhash.h>\n #include <hash.h>\n #include <serialize.h>\n-#include <validation.h>\n #include <uint256.h>\n #include <util/system.h>\n+#include <validation.h>\n \n #include <map>\n \n-static void ApplyStats(CCoinsStats &stats, CHashWriter& ss, const uint256& hash, const std::map<uint32_t, Coin>& outputs)\n+static void ApplyStats(CCoinsStats &stats, MuHash3072& muhash, const uint256& hash, const std::map<uint32_t, Coin>& outputs)\n {\n     assert(!outputs.empty());\n-    ss << hash;\n-    ss << VARINT(outputs.begin()->second.nHeight * 2 + outputs.begin()->second.fCoinBase ? 1u : 0u);\n     for (const auto& output : outputs) {\n-        ss << VARINT(output.first + 1);",
    "path": "src/node/coinstats.cpp",
    "position": 24,
    "original_position": 21,
    "commit_id": "58cf819caabe98a584a508f66a9f4fc347f8dfeb",
    "original_commit_id": "d22951b3f8d79b5ec2069961c084c8d27b6b13fa",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I am not sure, it seems to have been introduced here https://github.com/bitcoin/bitcoin/pull/2602/commits/e31aa7c9d7dd204b5658f20c19565eee308e35c1 but there was no rationale given.",
    "created_at": "2020-05-15T14:42:20Z",
    "updated_at": "2020-05-15T15:06:29Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18000#discussion_r425849308",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18000",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/425849308"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18000#discussion_r425849308"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18000"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/425849308/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 24,
    "original_line": 24,
    "side": "LEFT",
    "in_reply_to_id": 415322303
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437323382",
    "pull_request_review_id": 427026794,
    "id": 437323382,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzMyMzM4Mg==",
    "diff_hunk": "@@ -953,39 +983,52 @@ static UniValue gettxoutsetinfo(const JSONRPCRequest& request)\n {\n             RPCHelpMan{\"gettxoutsetinfo\",\n                 \"\\nReturns statistics about the unspent transaction output set.\\n\"\n-                \"Note this call may take some time.\\n\",\n-                {},\n+                \"Note this call may take some time if you are not using coinstatsindex.\\n\",\n+                {\n+                    {\"hash_or_height\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"The block hash or height of the target height\", \"\", {\"\", \"string or numeric\"}},\n+                },\n                 RPCResult{\n                     RPCResult::Type::OBJ, \"\", \"\",\n                     {\n                         {RPCResult::Type::NUM, \"height\", \"The current block height (index)\"},\n                         {RPCResult::Type::STR_HEX, \"bestblock\", \"The hash of the block at the tip of the chain\"},\n-                        {RPCResult::Type::NUM, \"transactions\", \"The number of transactions with unspent outputs\"},\n                         {RPCResult::Type::NUM, \"txouts\", \"The number of unspent transaction outputs\"},\n                         {RPCResult::Type::NUM, \"bogosize\", \"A meaningless metric for UTXO set size\"},\n-                        {RPCResult::Type::STR_HEX, \"hash_serialized_2\", \"The serialized hash\"},\n+                        {RPCResult::Type::STR_HEX, \"utxo_set_hash\", \"The serialized hash\"},",
    "path": "src/rpc/blockchain.cpp",
    "position": 63,
    "original_position": 63,
    "commit_id": "58cf819caabe98a584a508f66a9f4fc347f8dfeb",
    "original_commit_id": "58cf819caabe98a584a508f66a9f4fc347f8dfeb",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Nit, for when you work on the RPC PR: let's call this `utxo_set_muhash` in case we want to try another algo later.\r\n\r\nThe `hash_serialized_2` field should either be (instantly) deprecated, or remain in use when there's no index. The documentation for `-coinstatsindex` should point this out.",
    "created_at": "2020-06-09T11:01:07Z",
    "updated_at": "2020-06-09T11:04:59Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18000#discussion_r437323382",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18000",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437323382"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18000#discussion_r437323382"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18000"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437323382/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 997,
    "original_line": 997,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437332420",
    "pull_request_review_id": 427038911,
    "id": 437332420,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzMzMjQyMA==",
    "diff_hunk": "@@ -953,39 +983,52 @@ static UniValue gettxoutsetinfo(const JSONRPCRequest& request)\n {\n             RPCHelpMan{\"gettxoutsetinfo\",\n                 \"\\nReturns statistics about the unspent transaction output set.\\n\"\n-                \"Note this call may take some time.\\n\",\n-                {},\n+                \"Note this call may take some time if you are not using coinstatsindex.\\n\",\n+                {\n+                    {\"hash_or_height\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"The block hash or height of the target height\", \"\", {\"\", \"string or numeric\"}},\n+                },\n                 RPCResult{\n                     RPCResult::Type::OBJ, \"\", \"\",\n                     {\n                         {RPCResult::Type::NUM, \"height\", \"The current block height (index)\"},\n                         {RPCResult::Type::STR_HEX, \"bestblock\", \"The hash of the block at the tip of the chain\"},\n-                        {RPCResult::Type::NUM, \"transactions\", \"The number of transactions with unspent outputs\"},\n                         {RPCResult::Type::NUM, \"txouts\", \"The number of unspent transaction outputs\"},\n                         {RPCResult::Type::NUM, \"bogosize\", \"A meaningless metric for UTXO set size\"},\n-                        {RPCResult::Type::STR_HEX, \"hash_serialized_2\", \"The serialized hash\"},\n+                        {RPCResult::Type::STR_HEX, \"utxo_set_hash\", \"The serialized hash\"},",
    "path": "src/rpc/blockchain.cpp",
    "position": 63,
    "original_position": 63,
    "commit_id": "58cf819caabe98a584a508f66a9f4fc347f8dfeb",
    "original_commit_id": "58cf819caabe98a584a508f66a9f4fc347f8dfeb",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "We could additionally expose the full 384-byte hash (base64 encoded). IIUC someone could use that to check if a specific UTXO is present. _Update: that particular example may not be terribly useful_",
    "created_at": "2020-06-09T11:19:43Z",
    "updated_at": "2020-06-09T12:12:41Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18000#discussion_r437332420",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18000",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437332420"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18000#discussion_r437332420"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18000"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437332420/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 997,
    "original_line": 997,
    "side": "RIGHT",
    "in_reply_to_id": 437323382
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437363259",
    "pull_request_review_id": 427082203,
    "id": 437363259,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM2MzI1OQ==",
    "diff_hunk": "@@ -5,55 +5,79 @@\n \n #include <node/coinstats.h>\n \n-#include <coins.h>\n+#include <crypto/muhash.h>\n #include <hash.h>\n+#include <index/coinstatsindex.h>\n #include <serialize.h>\n-#include <validation.h>\n #include <uint256.h>\n #include <util/system.h>\n+#include <validation.h>\n \n #include <map>\n \n-static void ApplyStats(CCoinsStats &stats, CHashWriter& ss, const uint256& hash, const std::map<uint32_t, Coin>& outputs)\n+static void ApplyStats(CCoinsStats &stats, MuHash3072& muhash, const uint256& hash, const std::map<uint32_t, Coin>& outputs)\n {\n     assert(!outputs.empty());\n-    ss << hash;\n-    ss << VARINT(outputs.begin()->second.nHeight * 2 + outputs.begin()->second.fCoinBase ? 1u : 0u);\n-    stats.nTransactions++;\n     for (const auto& output : outputs) {\n-        ss << VARINT(output.first + 1);\n-        ss << output.second.out.scriptPubKey;\n-        ss << VARINT_MODE(output.second.out.nValue, VarIntMode::NONNEGATIVE_SIGNED);\n+        COutPoint outpoint = COutPoint(hash, output.first);\n+        Coin coin = output.second;\n+\n+        muhash *= MuHash3072(GetTruncatedSHA512Hash(outpoint, coin).begin());\n+\n         stats.nTransactionOutputs++;\n         stats.nTotalAmount += output.second.out.nValue;\n         stats.nBogoSize += 32 /* txid */ + 4 /* vout index */ + 4 /* height + coinbase */ + 8 /* amount */ +\n                            2 /* scriptPubKey len */ + output.second.out.scriptPubKey.size() /* scriptPubKey */;\n     }\n-    ss << VARINT(0u);\n }\n \n+uint256 GetTruncatedSHA512Hash(const COutPoint& outpoint, const Coin& coin) {\n+    TruncatedSHA512Writer ss(SER_DISK, 0);\n+    ss << outpoint;\n+    ss << (uint32_t)(coin.nHeight * 2 + coin.fCoinBase);\n+    ss << coin.out;\n+    return ss.GetHash();",
    "path": "src/node/coinstats.cpp",
    "position": 45,
    "original_position": 45,
    "commit_id": "58cf819caabe98a584a508f66a9f4fc347f8dfeb",
    "original_commit_id": "58cf819caabe98a584a508f66a9f4fc347f8dfeb",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Let's document what these fields are and why they're useful:\r\n* `outpoint`: transaction hash + output position: uniquely identifies an unspent output (BIP 30)\r\n* `height` + `coinbase`: determines if it can be spent, e.g. given coinbase maturity and OP_CSV\r\n* `out`: amount + scriptPubKey\r\n\r\nIf you have the above information and all the block headers, you can validate a new block, without needing data from previous blocks. This makes it suitable for pruning and UTXO snapshots.",
    "created_at": "2020-06-09T12:19:10Z",
    "updated_at": "2020-06-09T12:26:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18000#discussion_r437363259",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18000",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437363259"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18000#discussion_r437363259"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18000"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437363259/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 39,
    "original_line": 39,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/592829233",
    "pull_request_review_id": 610359022,
    "id": 592829233,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MjgyOTIzMw==",
    "diff_hunk": "@@ -0,0 +1,391 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <crypto/muhash.h>\n+#include <hash.h>\n+#include <index/coinstatsindex.h>\n+#include <node/coinstats.h>\n+#include <serialize.h>\n+#include <txdb.h>\n+#include <undo.h>\n+#include <validation.h>\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+constexpr char DB_MUHASH = 'M';\n+\n+namespace {\n+\n+struct DBVal {\n+    uint256 muhash;\n+    uint64_t transaction_output_count;\n+    uint64_t bogo_size;\n+    CAmount total_amount;\n+    uint64_t disk_size;\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        READWRITE(muhash);\n+        READWRITE(transaction_output_count);\n+        READWRITE(bogo_size);\n+        READWRITE(total_amount);\n+        READWRITE(disk_size);\n+    }\n+};\n+\n+struct DBHeightKey {\n+    int height;\n+\n+    DBHeightKey() : height(0) {}\n+    explicit DBHeightKey(int height_in) : height(height_in) {}\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        ser_writedata8(s, DB_BLOCK_HEIGHT);\n+        ser_writedata32be(s, height);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        char prefix = ser_readdata8(s);\n+        if (prefix != DB_BLOCK_HEIGHT) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB height key\");\n+        }\n+        height = ser_readdata32be(s);\n+    }\n+};\n+\n+struct DBHashKey {\n+    uint256 block_hash;\n+\n+    explicit DBHashKey(const uint256& hash_in) : block_hash(hash_in) {}\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        char prefix = DB_BLOCK_HASH;\n+        READWRITE(prefix);\n+        if (prefix != DB_BLOCK_HASH) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB hash key\");\n+        }\n+\n+        READWRITE(block_hash);\n+    }\n+};\n+\n+struct DBMuhash {\n+    MuHash3072 hash;\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        READWRITE(hash);\n+    }\n+};\n+\n+}; // namespace\n+\n+std::unique_ptr<CoinStatsIndex> g_coin_stats_index;\n+\n+CoinStatsIndex::CoinStatsIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+{\n+    fs::path path = GetDataDir() / \"indexes\" / \"coinstats\";\n+    fs::create_directories(path);\n+\n+    m_db = MakeUnique<CoinStatsIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);",
    "path": "src/index/coinstatsindex.cpp",
    "position": 104,
    "original_position": 104,
    "commit_id": "58cf819caabe98a584a508f66a9f4fc347f8dfeb",
    "original_commit_id": "58cf819caabe98a584a508f66a9f4fc347f8dfeb",
    "user": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Please [use `std::make_unique` in new code](https://github.com/bitcoin/bitcoin/blob/master/src/util/memory.h#L13).",
    "created_at": "2021-03-12T00:37:21Z",
    "updated_at": "2021-03-12T00:37:21Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18000#discussion_r592829233",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18000",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/592829233"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18000#discussion_r592829233"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18000"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/592829233/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 104,
    "original_line": 104,
    "side": "RIGHT"
  }
]