DrahtBot,2020-01-25 00:37:55,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18795 (Test: wallet issue with orphaned rewards by domob1812)\n* #18354 (Protect wallet by using shared pointers by bvbfa",https://github.com/bitcoin/bitcoin/pull/18000#issuecomment-578354949,578354949,
emilengler,2020-01-27 17:27:08,"I'm reviewing and testing it right now but from some benchmarks I did, I saw how the time goes down by 50%. However the performance increases by 19% percent.\n\nRegtest results only right now\n\nOn master (ef8e2cee9f5d157eeb3139b64e9c3a5fa4bf36f3):\n```\n$ time src/bitcoin-cli --regtest gettxoutsetinfo\n...\n> src/bitcoin-cli --regtest gettxoutsetinfo  0,00s user 0,00s system 23% cpu 0,014",https://github.com/bitcoin/bitcoin/pull/18000#issuecomment-578859737,578859737,
ryanofsky,2020-01-27 20:03:03,Can you say more about current use cases of the `gettxoutsetinfo` function and maybe future use cases if it's significantly faster with this change?,https://github.com/bitcoin/bitcoin/pull/18000#issuecomment-578926752,578926752,
sipa,2020-01-27 21:18:06,"I think it's perfectly fine to drop the ""transactions"" statistics. It doesn't really mean anything; it just happened to be easy to compute pre-pertxout, but even now it's mostly a hack.",https://github.com/bitcoin/bitcoin/pull/18000#issuecomment-578957115,578957115,
fjahr,2020-01-27 23:40:10,"@emilengler  Thanks for giving it a try! But I think the benchmarks you are comparing are not well suited in this case. I assume you are running a standard regtest network, maybe generated a few hundred blocks and made some transactions by hand. In this case the UTXO set is very small and iterating over it will be extremely fast, so that it would not surprise me if there is no measurable upside to",https://github.com/bitcoin/bitcoin/pull/18000#issuecomment-579009007,579009007,
emilengler,2020-01-28 19:39:14,"@fjahr I'm a bit confused now, I ran the tests again on a full chain and master is MUCH faster than this Pull Request (4 MINUTES faster)\nOn master (2755b2b1092d0286022cf3cc3028e96f6bee2b34)\n```\n$ time src/bitcoin-cli --datadir=/media/emil/Files/Bitcoin/ gettxoutsetinfo\n{\n  ""height"": 614943,\n  ""bestblock"": ""0000000000000000000fa03a2ce4c6d7fb763e55402deac32371b898e8faba5e"",\n  ""transact",https://github.com/bitcoin/bitcoin/pull/18000#issuecomment-579418971,579418971,
ryanofsky,2020-01-29 19:22:59,"> @ryanofsky Sure, I will go along the different statistics the call provides to highlight which ones I think are more or less important:\n\nThanks, this information is really clarifying. I wonder if some of it could be incorporated in the reference documentation (without mentioning specific CVE's or software projects), or maybe if it would be useful as part of some wiki. In any case, this defin",https://github.com/bitcoin/bitcoin/pull/18000#issuecomment-579917647,579917647,
fjahr,2020-01-30 17:53:03,"@emilengler did you actually start `bitcoind` with `-coinstatsindex`? I mention it briefly in the PR description, but as @ryanofsky already pointed out as well, I need to do a much better job at documenting the intent and current state of the proposal. It seems so because otherwise you could not test it that quickly, building up the index takes a quite long time and while the index is building up ",https://github.com/bitcoin/bitcoin/pull/18000#issuecomment-580375400,580375400,
emilengler,2020-01-30 18:55:36,"> @emilengler did you actually start bitcoind with -coinstatsindex?\n\nno, sorry oversaw that",https://github.com/bitcoin/bitcoin/pull/18000#issuecomment-580401182,580401182,
emilengler,2020-01-30 20:22:16,"Hmmm I get this error message now:\n```\nerror code: -32603\nerror message:\nUnable to read UTXO set\n\n```\nthe chain state is about ~2 days old",https://github.com/bitcoin/bitcoin/pull/18000#issuecomment-580442697,580442697,
fjahr,2020-01-30 20:30:12,"> Hmmm I get this error message now:\n> \n> ```\n> error code: -32603\n> error message:\n> Unable to read UTXO set\n> ```\n> \n> the chain state is about ~2 days old\n\nYeah, that means the index is syncing at the moment. You should see the progress in the logs of `bitcoind`. Something like `Syncing coinstatsindex with block chain from height XXXXX`.",https://github.com/bitcoin/bitcoin/pull/18000#issuecomment-580445887,580445887,
fjahr,2020-03-06 23:16:23,"First of all, thanks for taking early looks and comments @ariard , @ryanofsky, @emilengler , @jnewbery (offline). Your comments should be mostly addressed in the latest code changes and in further information below. With the latest fixes and performance improvements, this should be now ready for real review and testing.\n\n# Short recap of changes (this changed slightly)\n- Introduces `MuHash30",https://github.com/bitcoin/bitcoin/pull/18000#issuecomment-596004565,596004565,
fjahr,2020-03-07 00:08:14,Rebased,https://github.com/bitcoin/bitcoin/pull/18000#issuecomment-596015652,596015652,
fjahr,2020-03-21 18:33:31,Latest changes fixed/clarified lots of comments/documentation and finally made Travis happy (when it runs again).,https://github.com/bitcoin/bitcoin/pull/18000#issuecomment-602084423,602084423,
fjahr,2020-04-02 11:57:53,Rebased.,https://github.com/bitcoin/bitcoin/pull/18000#issuecomment-607801159,607801159,
fjahr,2020-04-15 20:20:55,Removed the last commit which was just a small test improvement that became redundant after a recently merged change.,https://github.com/bitcoin/bitcoin/pull/18000#issuecomment-614260156,614260156,
pierreN,2020-04-18 01:38:02,"Nice PR. I just tested this on my laptop (slow SSD, i7-6700HQ). No issue to report.\n\nOn master, `gettxoutsetinfo` takes 55s to complete. On this branch less than a second.\nThe `coinstatsindex` thread took around 7h30mn to complete.",https://github.com/bitcoin/bitcoin/pull/18000#issuecomment-615535173,615535173,
fjahr,2020-04-19 15:29:12,"Another rebase, no code changes.\n\nThanks for testing @pierreN !",https://github.com/bitcoin/bitcoin/pull/18000#issuecomment-616162700,616162700,
fjahr,2020-05-15 15:15:49,"Thanks for the review and the great questions!\n\n> Concept ACK.\n> \n> Is there any reference document for MuHash3072? If so, it would be good to link to that in the header file. In particular, does the (single) test vector exist anywhere else?\n\nI did a bit of research when I started the work on this but I am not aware of any reference document or official test vectors. Maybe @sipa knows ",https://github.com/bitcoin/bitcoin/pull/18000#issuecomment-629296641,629296641,
DrahtBot,2020-05-26 12:54:34,<!--cf906140f33d8803c4a75a2196329ecb-->\n🐙 This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).,https://github.com/bitcoin/bitcoin/pull/18000#issuecomment-634006275,634006275,
Sjors,2020-06-09 16:39:11,"In #19145 (missing in OP) you're adding a `hash_type` option to `gettxoutsetinfo`, which can be `none`. This makes an index immediately useful, even without MuHash. So you make a PR for that independently.\n\nAdding MuHash to the index later might be annoying, however if the plan is to support different hash types, it sounds like MuHash should be in a separate index from the coin stats anyway?",https://github.com/bitcoin/bitcoin/pull/18000#issuecomment-641423019,641423019,
fjahr,2020-06-16 12:57:29,"> In #19145 (missing in OP) you're adding a `hash_type` option to `gettxoutsetinfo`, which can be `none`. This makes an index immediately useful, even without MuHash. So you make a PR for that independently.\n> \n> Adding MuHash to the index later might be annoying, however if the plan is to support different hash types, it sounds like MuHash should be in a separate index from the coin stats any",https://github.com/bitcoin/bitcoin/pull/18000#issuecomment-644745625,644745625,
jnewbery,2020-10-14 10:49:23,PR 19105 is merged,https://github.com/bitcoin/bitcoin/pull/18000#issuecomment-708323204,708323204,
Rspigler,2021-04-19 02:44:35,Chart can be updated as PR #19055 and #19145 have been merged,https://github.com/bitcoin/bitcoin/pull/18000#issuecomment-822128975,822128975,
fjahr,2021-04-24 22:33:45,"> Chart can be updated as PR #19055 and #19145 have been merged\n\nThanks for the reminder, done!",https://github.com/bitcoin/bitcoin/pull/18000#issuecomment-826162051,826162051,
Rspigler,2021-04-25 07:23:15,"I don't mean to spam the PR, but the chart was updated incorrectly.\n\nPR 19055 is merged but marked as open\nPR 19181 is open but marked as merged\n\nThank you for all your work!",https://github.com/bitcoin/bitcoin/pull/18000#issuecomment-826273232,826273232,
fjahr,2021-04-25 10:20:14,"> I don't mean to spam the PR, but the chart was updated incorrectly.\n> \n> PR 19055 is merged but marked as open\n> PR 19181 is open but marked as merged\n> \n> Thank you for all your work!\n\nThanks, I was too hastily. Fixed.",https://github.com/bitcoin/bitcoin/pull/18000#issuecomment-826298875,826298875,
ariard,2020-02-25 01:59:38,"b5f112c\n\nCan't you use `block_index->nHeight`  here and avoid a lock ?",https://github.com/bitcoin/bitcoin/pull/18000#discussion_r383619253,383619253,src/node/coinstats.cpp
ariard,2020-02-25 02:17:10,"93db4a5\n\nThere is a coinbase output in the genesis block?",https://github.com/bitcoin/bitcoin/pull/18000#discussion_r383623566,383623566,src/index/coinstatsindex.cpp
ariard,2020-02-25 02:19:21,"93db4a5\n\nAlso, OP_RETURN outputs shouldn't be considered (we remove them from utxo set IIRC) ?",https://github.com/bitcoin/bitcoin/pull/18000#discussion_r383624117,383624117,src/index/coinstatsindex.cpp
fjahr,2020-03-06 23:09:08,"You are right, fixed now!",https://github.com/bitcoin/bitcoin/pull/18000#discussion_r389187278,389187278,src/index/coinstatsindex.cpp
fjahr,2020-03-06 23:09:36,Done. Cleaned up that whole part considerably.,https://github.com/bitcoin/bitcoin/pull/18000#discussion_r389187404,389187404,src/node/coinstats.cpp
fjahr,2020-03-06 23:10:58,"Yes, see https://www.blockchain.com/btc/block/0",https://github.com/bitcoin/bitcoin/pull/18000#discussion_r389187774,389187774,src/index/coinstatsindex.cpp
ariard,2020-03-22 03:14:36,Ah my point was you may need to add the coinbase output is in the utxo set but apparently it can't be spent https://bitcoin.stackexchange.com/questions/10009/why-can-t-the-genesis-block-coinbase-be-spent. Good to know,https://github.com/bitcoin/bitcoin/pull/18000#discussion_r396049928,396049928,src/index/coinstatsindex.cpp
Sjors,2020-04-26 14:24:14,In d22951b: what was the original rationale for `+1`?,https://github.com/bitcoin/bitcoin/pull/18000#discussion_r415322303,415322303,src/node/coinstats.cpp
Sjors,2020-04-26 14:31:02,"In d22951b3f8d79b5ec2069961c084c8d27b6b13fa: this may be a good time to explain what `coin.nHeight * 2 + coin.fCoinBase` is good for. I guess it reserves 1 bit to indicate if this is a coinbase, but why do we care about that? Maybe BIP30 related?",https://github.com/bitcoin/bitcoin/pull/18000#discussion_r415323587,415323587,src/node/coinstats.cpp
Sjors,2020-04-26 14:40:15,"nit: snake case, e.g. `m_transaction_output_count`  https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md",https://github.com/bitcoin/bitcoin/pull/18000#discussion_r415325693,415325693,src/index/coinstatsindex.h
Sjors,2020-04-26 14:43:21,"""coin stats index"" (same below)",https://github.com/bitcoin/bitcoin/pull/18000#discussion_r415326350,415326350,src/index/coinstatsindex.cpp
Sjors,2020-04-26 14:48:23,"Why do we need to skip these? Block height is included in the muhash anyway, so it wouldn't be a duplicate entry.",https://github.com/bitcoin/bitcoin/pull/18000#discussion_r415327363,415327363,src/index/coinstatsindex.cpp
Sjors,2020-04-26 14:54:03,Why do we skip unspendable coins here? Won't that lead to a result inconsistent with `gettxoutsetinfo`? ,https://github.com/bitcoin/bitcoin/pull/18000#discussion_r415328497,415328497,src/index/coinstatsindex.cpp
Sjors,2020-04-26 14:54:42,Ideally this code should be shared with `ApplyStats()`,https://github.com/bitcoin/bitcoin/pull/18000#discussion_r415328606,415328606,src/index/coinstatsindex.cpp
Sjors,2020-04-26 15:00:42,I'm confused: the coinbase _is_ added to the muhash accumulator.,https://github.com/bitcoin/bitcoin/pull/18000#discussion_r415329750,415329750,src/index/coinstatsindex.cpp
Sjors,2020-04-26 15:05:14,Why is this called `do_muhash` rather than `undo_muhash`?,https://github.com/bitcoin/bitcoin/pull/18000#discussion_r415330663,415330663,src/index/coinstatsindex.cpp
Sjors,2020-04-26 15:06:30,Why is this called `undo_muhash` and not `do_muhash`? And why is it divided?,https://github.com/bitcoin/bitcoin/pull/18000#discussion_r415330966,415330966,src/index/coinstatsindex.cpp
fjahr,2020-05-15 14:29:49,I came up with do_muhash because I needed the contrary term to undo_muhash. Since we are talking about rolling back a block that has 'do' (utxo created in the block) and 'undo' data (utxos destroyed in the block). I was thinking if I should reverse these terms when a block is removed or keep the terms the same as they were when the block was added. For me it seemed less confusing to keep the namin,https://github.com/bitcoin/bitcoin/pull/18000#discussion_r425841223,425841223,src/index/coinstatsindex.cpp
fjahr,2020-05-15 14:30:41,It is the intermediate muhash for all the utxos that need to be removed/undone. See   also my longer explanation for `do_muhash`.,https://github.com/bitcoin/bitcoin/pull/18000#discussion_r425841762,425841762,src/index/coinstatsindex.cpp
fjahr,2020-05-15 14:32:18,"Yes but the coinbase does not have any undo data because it is not spending any outputs. This section is only dealing with the undo data of the transactions in the block, it is not dealing with reorgs etc. which are further below.",https://github.com/bitcoin/bitcoin/pull/18000#discussion_r425842786,425842786,src/index/coinstatsindex.cpp
fjahr,2020-05-15 14:32:32,done,https://github.com/bitcoin/bitcoin/pull/18000#discussion_r425842935,425842935,src/index/coinstatsindex.cpp
fjahr,2020-05-15 14:39:21,"No, I am only skipping coins here that are not part of the UTXO set. The same logic is used for evaluating if a coin is added to the UTXO set, see https://github.com/bitcoin/bitcoin/blob/951870807ea28e05cf074e364e1b55e985ab9f6d/src/coins.cpp#L70",https://github.com/bitcoin/bitcoin/pull/18000#discussion_r425847353,425847353,src/index/coinstatsindex.cpp
fjahr,2020-05-15 14:40:43,If we wouldn't skip these we would get a different hash from the index than we get from the non-index nodes because these outputs are also not in the UTXO set which the non-index nodes use to calculate the hash. My goal is that the hash is the same with or without the index.,https://github.com/bitcoin/bitcoin/pull/18000#discussion_r425848226,425848226,src/index/coinstatsindex.cpp
fjahr,2020-05-15 14:40:52,done,https://github.com/bitcoin/bitcoin/pull/18000#discussion_r425848314,425848314,src/index/coinstatsindex.cpp
fjahr,2020-05-15 14:41:03,done,https://github.com/bitcoin/bitcoin/pull/18000#discussion_r425848433,425848433,src/index/coinstatsindex.h
fjahr,2020-05-15 14:42:03,"Hm, it's a good question. I have not questioned it beyond the fact that it's a neat way to document height and coinbase in one uint32. fCoinbase doesn't make a difference for BIP30 because those were all coinbases and the duplicated txs are filtered earlier already. So I don't see a reason why we would need the information but if we can have it without taking up any extra space, why not? I think b",https://github.com/bitcoin/bitcoin/pull/18000#discussion_r425849103,425849103,src/node/coinstats.cpp
fjahr,2020-05-15 14:42:20,"I am not sure, it seems to have been introduced here https://github.com/bitcoin/bitcoin/pull/2602/commits/e31aa7c9d7dd204b5658f20c19565eee308e35c1 but there was no rationale given.",https://github.com/bitcoin/bitcoin/pull/18000#discussion_r425849308,425849308,src/node/coinstats.cpp
Sjors,2020-06-09 11:01:07,"Nit, for when you work on the RPC PR: let's call this `utxo_set_muhash` in case we want to try another algo later.\n\nThe `hash_serialized_2` field should either be (instantly) deprecated, or remain in use when there's no index. The documentation for `-coinstatsindex` should point this out.",https://github.com/bitcoin/bitcoin/pull/18000#discussion_r437323382,437323382,src/rpc/blockchain.cpp
Sjors,2020-06-09 11:19:43,We could additionally expose the full 384-byte hash (base64 encoded). IIUC someone could use that to check if a specific UTXO is present. _Update: that particular example may not be terribly useful_,https://github.com/bitcoin/bitcoin/pull/18000#discussion_r437332420,437332420,src/rpc/blockchain.cpp
Sjors,2020-06-09 12:19:10,"Let's document what these fields are and why they're useful:\n* `outpoint`: transaction hash + output position: uniquely identifies an unspent output (BIP 30)\n* `height` + `coinbase`: determines if it can be spent, e.g. given coinbase maturity and OP_CSV\n* `out`: amount + scriptPubKey\n\nIf you have the above information and all the block headers, you can validate a new block, without needi",https://github.com/bitcoin/bitcoin/pull/18000#discussion_r437363259,437363259,src/node/coinstats.cpp
fanquake,2021-03-12 00:37:21,Please [use `std::make_unique` in new code](https://github.com/bitcoin/bitcoin/blob/master/src/util/memory.h#L13).,https://github.com/bitcoin/bitcoin/pull/18000#discussion_r592829233,592829233,src/index/coinstatsindex.cpp
