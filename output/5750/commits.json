[
  {
    "sha": "d8947539aee63dd3e7065a2116eab4c70a002b39",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkODk0NzUzOWFlZTYzZGQzZTcwNjVhMjExNmVhYjRjNzBhMDAyYjM5",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2015-02-04T10:50:52Z"
      },
      "committer": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2015-02-04T10:50:52Z"
      },
      "message": "init: alphabetical ordering of command/parameter help texts",
      "tree": {
        "sha": "1cde12a989af16ec49965dcc653fc53c4c194cdf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1cde12a989af16ec49965dcc653fc53c4c194cdf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d8947539aee63dd3e7065a2116eab4c70a002b39",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8947539aee63dd3e7065a2116eab4c70a002b39",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d8947539aee63dd3e7065a2116eab4c70a002b39",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8947539aee63dd3e7065a2116eab4c70a002b39/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "87ecfb0f9675ef46d360014a65886e9556d28e66",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/87ecfb0f9675ef46d360014a65886e9556d28e66",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/87ecfb0f9675ef46d360014a65886e9556d28e66"
      }
    ],
    "stats": {
      "total": 41,
      "additions": 23,
      "deletions": 18
    },
    "files": [
      {
        "sha": "c5bcc436a3ab6e6cf90bfc5a72a7e9527faf1ba4",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 18,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8947539aee63dd3e7065a2116eab4c70a002b39/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8947539aee63dd3e7065a2116eab4c70a002b39/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=d8947539aee63dd3e7065a2116eab4c70a002b39",
        "patch": "@@ -321,6 +321,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += \"\\n\" + _(\"Wallet options:\") + \"\\n\";\n     strUsage += \"  -disablewallet         \" + _(\"Do not load the wallet and disable wallet RPC calls\") + \"\\n\";\n     strUsage += \"  -keypool=<n>           \" + strprintf(_(\"Set key pool size to <n> (default: %u)\"), 100) + \"\\n\";\n+    strUsage += \"  -maxtxfee=<amt>        \" + strprintf(_(\"Maximum total fees to use in a single wallet transaction, setting too low may abort large transactions (default: %s)\"), FormatMoney(maxTxFee)) + \"\\n\";\n     if (GetBoolArg(\"-help-debug\", false))\n         strUsage += \"  -mintxfee=<amt>        \" + strprintf(_(\"Fees (in BTC/Kb) smaller than this are considered zero fee for transaction creation (default: %s)\"), FormatMoney(CWallet::minTxFee.GetFeePerK())) + \"\\n\";\n     strUsage += \"  -paytxfee=<amt>        \" + strprintf(_(\"Fee (in BTC/kB) to add to transactions you send (default: %s)\"), FormatMoney(payTxFee.GetFeePerK())) + \"\\n\";\n@@ -329,7 +330,6 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += \"  -sendfreetransactions  \" + strprintf(_(\"Send transactions as zero-fee transactions if possible (default: %u)\"), 0) + \"\\n\";\n     strUsage += \"  -spendzeroconfchange   \" + strprintf(_(\"Spend unconfirmed change when sending transactions (default: %u)\"), 1) + \"\\n\";\n     strUsage += \"  -txconfirmtarget=<n>   \" + strprintf(_(\"If paytxfee is not set, include enough fee so transactions begin confirmation on average within n blocks (default: %u)\"), 1) + \"\\n\";\n-    strUsage += \"  -maxtxfee=<amt>        \" + strprintf(_(\"Maximum total fees to use in a single wallet transaction, setting too low may abort large transactions (default: %s)\"), FormatMoney(maxTxFee)) + \"\\n\";\n     strUsage += \"  -upgradewallet         \" + _(\"Upgrade wallet to latest format\") + \" \" + _(\"on startup\") + \"\\n\";\n     strUsage += \"  -wallet=<file>         \" + _(\"Specify wallet file (within data directory)\") + \" \" + strprintf(_(\"(default: %s)\"), \"wallet.dat\") + \"\\n\";\n     strUsage += \"  -walletnotify=<cmd>    \" + _(\"Execute command when a wallet transaction changes (%s in cmd is replaced by TxID)\") + \"\\n\";\n@@ -342,12 +342,6 @@ std::string HelpMessage(HelpMessageMode mode)\n     {\n         strUsage += \"  -checkpoints           \" + strprintf(_(\"Only accept block chain matching built-in checkpoints (default: %u)\"), 1) + \"\\n\";\n         strUsage += \"  -dblogsize=<n>         \" + strprintf(_(\"Flush database activity from memory pool to disk log every <n> megabytes (default: %u)\"), 100) + \"\\n\";\n-        strUsage += \"  -disablesafemode       \" + strprintf(_(\"Disable safemode, override a real safe mode event (default: %u)\"), 0) + \"\\n\";\n-        strUsage += \"  -testsafemode          \" + strprintf(_(\"Force safe mode (default: %u)\"), 0) + \"\\n\";\n-        strUsage += \"  -dropmessagestest=<n>  \" + _(\"Randomly drop 1 of every <n> network messages\") + \"\\n\";\n-        strUsage += \"  -fuzzmessagestest=<n>  \" + _(\"Randomly fuzz 1 of every <n> network messages\") + \"\\n\";\n-        strUsage += \"  -flushwallet           \" + strprintf(_(\"Run a thread to flush wallet periodically (default: %u)\"), 1) + \"\\n\";\n-        strUsage += \"  -stopafterblockimport  \" + strprintf(_(\"Stop running after importing blocks from disk (default: %u)\"), 0) + \"\\n\";\n     }\n     strUsage += \"  -debug=<category>      \" + strprintf(_(\"Output debugging information (default: %u, supplying <category> is optional)\"), 0) + \"\\n\";\n     strUsage += \"                         \" + _(\"If <category> is not supplied, output all debugging information.\") + \"\\n\";\n@@ -356,57 +350,68 @@ std::string HelpMessage(HelpMessageMode mode)\n     if (mode == HMM_BITCOIN_QT)\n         strUsage += \", qt\";\n     strUsage += \".\\n\";\n+    if (GetBoolArg(\"-help-debug\", false))\n+    {\n+        strUsage += \"  -disablesafemode       \" + strprintf(_(\"Disable safemode, override a real safe mode event (default: %u)\"), 0) + \"\\n\";\n+        strUsage += \"  -dropmessagestest=<n>  \" + _(\"Randomly drop 1 of every <n> network messages\") + \"\\n\";\n+        strUsage += \"  -flushwallet           \" + strprintf(_(\"Run a thread to flush wallet periodically (default: %u)\"), 1) + \"\\n\";\n+        strUsage += \"  -fuzzmessagestest=<n>  \" + _(\"Randomly fuzz 1 of every <n> network messages\") + \"\\n\";\n+    }\n #ifdef ENABLE_WALLET\n     strUsage += \"  -gen                   \" + strprintf(_(\"Generate coins (default: %u)\"), 0) + \"\\n\";\n     strUsage += \"  -genproclimit=<n>      \" + strprintf(_(\"Set the number of threads for coin generation if enabled (-1 = all cores, default: %d)\"), 1) + \"\\n\";\n #endif\n     strUsage += \"  -help-debug            \" + _(\"Show all debugging options (usage: --help -help-debug)\") + \"\\n\";\n+    if (GetBoolArg(\"-help-debug\", false))\n+        strUsage += \"  -limitfreerelay=<n>    \" + strprintf(_(\"Continuously rate-limit free transactions to <n>*1000 bytes per minute (default:%u)\"), 15) + \"\\n\";\n     strUsage += \"  -logips                \" + strprintf(_(\"Include IP addresses in debug output (default: %u)\"), 0) + \"\\n\";\n     strUsage += \"  -logtimestamps         \" + strprintf(_(\"Prepend debug output with timestamp (default: %u)\"), 1) + \"\\n\";\n     if (GetBoolArg(\"-help-debug\", false))\n-    {\n-        strUsage += \"  -limitfreerelay=<n>    \" + strprintf(_(\"Continuously rate-limit free transactions to <n>*1000 bytes per minute (default:%u)\"), 15) + \"\\n\";\n-        strUsage += \"  -relaypriority         \" + strprintf(_(\"Require high priority for relaying free or low-fee transactions (default:%u)\"), 1) + \"\\n\";\n         strUsage += \"  -maxsigcachesize=<n>   \" + strprintf(_(\"Limit size of signature cache to <n> entries (default: %u)\"), 50000) + \"\\n\";\n-    }\n     strUsage += \"  -minrelaytxfee=<amt>   \" + strprintf(_(\"Fees (in BTC/Kb) smaller than this are considered zero fee for relaying (default: %s)\"), FormatMoney(::minRelayTxFee.GetFeePerK())) + \"\\n\";\n+    if (GetBoolArg(\"-help-debug\", false))\n+        strUsage += \"  -printpriority         \" + strprintf(_(\"Log transaction priority and fee per kB when mining blocks (default: %u)\"), 0) + \"\\n\";\n     strUsage += \"  -printtoconsole        \" + _(\"Send trace/debug info to console instead of debug.log file\") + \"\\n\";\n     if (GetBoolArg(\"-help-debug\", false))\n     {\n-        strUsage += \"  -printpriority         \" + strprintf(_(\"Log transaction priority and fee per kB when mining blocks (default: %u)\"), 0) + \"\\n\";\n         strUsage += \"  -privdb                \" + strprintf(_(\"Sets the DB_PRIVATE flag in the wallet db environment (default: %u)\"), 1) + \"\\n\";\n         strUsage += \"  -regtest               \" + _(\"Enter regression test mode, which uses a special chain in which blocks can be solved instantly.\") + \"\\n\";\n         strUsage += \"                         \" + _(\"This is intended for regression testing tools and app development.\") + \"\\n\";\n         strUsage += \"                         \" + _(\"In this mode -genproclimit controls how many blocks are generated immediately.\") + \"\\n\";\n+        strUsage += \"  -relaypriority         \" + strprintf(_(\"Require high priority for relaying free or low-fee transactions (default:%u)\"), 1) + \"\\n\";\n     }\n     strUsage += \"  -shrinkdebugfile       \" + _(\"Shrink debug.log file on client startup (default: 1 when no -debug)\") + \"\\n\";\n+    if (GetBoolArg(\"-help-debug\", false))\n+        strUsage += \"  -stopafterblockimport  \" + strprintf(_(\"Stop running after importing blocks from disk (default: %u)\"), 0) + \"\\n\";\n     strUsage += \"  -testnet               \" + _(\"Use the test network\") + \"\\n\";\n+    if (GetBoolArg(\"-help-debug\", false))\n+        strUsage += \"  -testsafemode          \" + strprintf(_(\"Force safe mode (default: %u)\"), 0) + \"\\n\";\n \n     strUsage += \"\\n\" + _(\"Node relay options:\") + \"\\n\";\n     strUsage += \"  -datacarrier           \" + strprintf(_(\"Relay and mine data carrier transactions (default: %u)\"), 1) + \"\\n\";\n     strUsage += \"  -datacarriersize       \" + strprintf(_(\"Maximum size of data in data carrier transactions we relay and mine (default: %u)\"), MAX_OP_RETURN_RELAY) + \"\\n\";\n \n     strUsage += \"\\n\" + _(\"Block creation options:\") + \"\\n\";\n-    strUsage += \"  -blockminsize=<n>      \" + strprintf(_(\"Set minimum block size in bytes (default: %u)\"), 0) + \"\\n\";\n     strUsage += \"  -blockmaxsize=<n>      \" + strprintf(_(\"Set maximum block size in bytes (default: %d)\"), DEFAULT_BLOCK_MAX_SIZE) + \"\\n\";\n+    strUsage += \"  -blockminsize=<n>      \" + strprintf(_(\"Set minimum block size in bytes (default: %u)\"), 0) + \"\\n\";\n     strUsage += \"  -blockprioritysize=<n> \" + strprintf(_(\"Set maximum size of high-priority/low-fee transactions in bytes (default: %d)\"), DEFAULT_BLOCK_PRIORITY_SIZE) + \"\\n\";\n \n     strUsage += \"\\n\" + _(\"RPC server options:\") + \"\\n\";\n-    strUsage += \"  -server                \" + _(\"Accept command line and JSON-RPC commands\") + \"\\n\";\n     strUsage += \"  -rest                  \" + strprintf(_(\"Accept public REST requests (default: %u)\"), 0) + \"\\n\";\n+    strUsage += \"  -rpcallowip=<ip>       \" + _(\"Allow JSON-RPC connections from specified source. Valid for <ip> are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times\") + \"\\n\";\n     strUsage += \"  -rpcbind=<addr>        \" + _(\"Bind to given address to listen for JSON-RPC connections. Use [host]:port notation for IPv6. This option can be specified multiple times (default: bind to all interfaces)\") + \"\\n\";\n-    strUsage += \"  -rpcuser=<user>        \" + _(\"Username for JSON-RPC connections\") + \"\\n\";\n+    strUsage += \"  -rpckeepalive          \" + strprintf(_(\"RPC support for HTTP persistent connections (default: %d)\"), 1) + \"\\n\";\n     strUsage += \"  -rpcpassword=<pw>      \" + _(\"Password for JSON-RPC connections\") + \"\\n\";\n     strUsage += \"  -rpcport=<port>        \" + strprintf(_(\"Listen for JSON-RPC connections on <port> (default: %u or testnet: %u)\"), 8332, 18332) + \"\\n\";\n-    strUsage += \"  -rpcallowip=<ip>       \" + _(\"Allow JSON-RPC connections from specified source. Valid for <ip> are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times\") + \"\\n\";\n     strUsage += \"  -rpcthreads=<n>        \" + strprintf(_(\"Set the number of threads to service RPC calls (default: %d)\"), 4) + \"\\n\";\n-    strUsage += \"  -rpckeepalive          \" + strprintf(_(\"RPC support for HTTP persistent connections (default: %d)\"), 1) + \"\\n\";\n+    strUsage += \"  -rpcuser=<user>        \" + _(\"Username for JSON-RPC connections\") + \"\\n\";\n+    strUsage += \"  -server                \" + _(\"Accept command line and JSON-RPC commands\") + \"\\n\";\n \n     strUsage += \"\\n\" + _(\"RPC SSL options: (see the Bitcoin Wiki for SSL setup instructions)\") + \"\\n\";\n     strUsage += \"  -rpcssl                                  \" + _(\"Use OpenSSL (https) for JSON-RPC connections\") + \"\\n\";\n     strUsage += \"  -rpcsslcertificatechainfile=<file.cert>  \" + strprintf(_(\"Server certificate file (default: %s)\"), \"server.cert\") + \"\\n\";\n-    strUsage += \"  -rpcsslprivatekeyfile=<file.pem>         \" + strprintf(_(\"Server private key (default: %s)\"), \"server.pem\") + \"\\n\";\n     strUsage += \"  -rpcsslciphers=<ciphers>                 \" + strprintf(_(\"Acceptable ciphers (default: %s)\"), \"TLSv1.2+HIGH:TLSv1+HIGH:!SSLv2:!aNULL:!eNULL:!3DES:@STRENGTH\") + \"\\n\";\n+    strUsage += \"  -rpcsslprivatekeyfile=<file.pem>         \" + strprintf(_(\"Server private key (default: %s)\"), \"server.pem\") + \"\\n\";\n \n     return strUsage;\n }"
      }
    ]
  }
]