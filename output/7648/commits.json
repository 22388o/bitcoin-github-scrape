[
  {
    "sha": "65751a3cf2421a9419172949cad9dc49b7383551",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NTc1MWEzY2YyNDIxYTk0MTkxNzI5NDljYWQ5ZGM0OWI3MzgzNTUx",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-02-20T22:37:13Z"
      },
      "committer": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2016-03-18T08:09:06Z"
      },
      "message": "Add CHECKSEQUENCEVERIFY softfork through BIP9",
      "tree": {
        "sha": "d6629a99099ed077b2a86f131ac5f3206f494d79",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d6629a99099ed077b2a86f131ac5f3206f494d79"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/65751a3cf2421a9419172949cad9dc49b7383551",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65751a3cf2421a9419172949cad9dc49b7383551",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/65751a3cf2421a9419172949cad9dc49b7383551",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65751a3cf2421a9419172949cad9dc49b7383551/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following{/other_user}",
      "gists_url": "https://api.github.com/users/btcdrak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "73b7eb501e6498e911321131e58ae7fbec6bc5ed",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/73b7eb501e6498e911321131e58ae7fbec6bc5ed",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/73b7eb501e6498e911321131e58ae7fbec6bc5ed"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 23,
      "deletions": 1
    },
    "files": [
      {
        "sha": "f48937d67deeef9fdeb0fb04f90c728601cb8237",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 1,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65751a3cf2421a9419172949cad9dc49b7383551/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65751a3cf2421a9419172949cad9dc49b7383551/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=65751a3cf2421a9419172949cad9dc49b7383551",
        "patch": "@@ -86,7 +86,13 @@ class CMainParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 1199145601; // January 1, 2008\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = 1230767999; // December 31, 2008\n-        /** \n+\n+        // Deployment of BIP68, BIP112, and BIP113.\n+        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].bit = 0;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nStartTime = 1462060800; // May 1st, 2016\n+        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nTimeout = 1493596800; // May 1st, 2017\n+\n+        /**\n          * The message start string is designed to be unlikely to occur in normal data.\n          * The characters are rarely used upper ASCII, not valid as UTF-8, and produce\n          * a large 32-bit integer with any alignment.\n@@ -172,6 +178,12 @@ class CTestNetParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 1199145601; // January 1, 2008\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = 1230767999; // December 31, 2008\n+\n+        // Deployment of BIP68, BIP112, and BIP113.\n+        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].bit = 0;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nStartTime = 1456790400; // March 1st, 2016\n+        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nTimeout = 1493596800; // May 1st, 2017\n+\n         pchMessageStart[0] = 0x0b;\n         pchMessageStart[1] = 0x11;\n         pchMessageStart[2] = 0x09;\n@@ -240,6 +252,9 @@ class CRegTestParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 0;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = 999999999999ULL;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].bit = 0;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nStartTime = 0;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nTimeout = 999999999999ULL;\n \n         pchMessageStart[0] = 0xfa;\n         pchMessageStart[1] = 0xbf;"
      },
      {
        "sha": "4f3480b89ba6979d4a5f738f5a583f35ba297e88",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65751a3cf2421a9419172949cad9dc49b7383551/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65751a3cf2421a9419172949cad9dc49b7383551/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=65751a3cf2421a9419172949cad9dc49b7383551",
        "patch": "@@ -15,6 +15,7 @@ namespace Consensus {\n enum DeploymentPos\n {\n     DEPLOYMENT_TESTDUMMY,\n+    DEPLOYMENT_CSV, // Deployment of BIP68, BIP112, and BIP113.\n     MAX_VERSION_BITS_DEPLOYMENTS\n };\n "
      },
      {
        "sha": "cfa69817b6a2b4fe904fae222a6d065e80f5d98c",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65751a3cf2421a9419172949cad9dc49b7383551/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65751a3cf2421a9419172949cad9dc49b7383551/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=65751a3cf2421a9419172949cad9dc49b7383551",
        "patch": "@@ -2262,6 +2262,11 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n         flags |= SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY;\n     }\n \n+    // Start enforcing CHECKSEQUENCEVERIFY using versionbits logic.\n+    if (VersionBitsState(pindex->pprev, chainparams.GetConsensus(), Consensus::DEPLOYMENT_CSV, versionbitscache) == THRESHOLD_ACTIVE) {\n+        flags |= SCRIPT_VERIFY_CHECKSEQUENCEVERIFY;\n+    }\n+\n     int64_t nTime2 = GetTimeMicros(); nTimeForks += nTime2 - nTime1;\n     LogPrint(\"bench\", \"    - Fork checks: %.2fms [%.2fs]\\n\", 0.001 * (nTime2 - nTime1), nTimeForks * 0.000001);\n "
      },
      {
        "sha": "f5d75c20b367f59c286d719ecae0fda78c8483d9",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65751a3cf2421a9419172949cad9dc49b7383551/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65751a3cf2421a9419172949cad9dc49b7383551/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=65751a3cf2421a9419172949cad9dc49b7383551",
        "patch": "@@ -681,6 +681,7 @@ UniValue getblockchaininfo(const UniValue& params, bool fHelp)\n     softforks.push_back(SoftForkDesc(\"bip34\", 2, tip, consensusParams));\n     softforks.push_back(SoftForkDesc(\"bip66\", 3, tip, consensusParams));\n     softforks.push_back(SoftForkDesc(\"bip65\", 4, tip, consensusParams));\n+    bip9_softforks.push_back(BIP9SoftForkDesc(\"csv\", consensusParams, Consensus::DEPLOYMENT_CSV));\n     obj.push_back(Pair(\"softforks\",             softforks));\n     obj.push_back(Pair(\"bip9_softforks\", bip9_softforks));\n "
      }
    ]
  },
  {
    "sha": "478fba6d5213a3f1ffeca5feeacf28aaf6844fd6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NzhmYmE2ZDUyMTNhM2YxZmZlY2E1ZmVlYWNmMjhhYWY2ODQ0ZmQ2",
    "commit": {
      "author": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2016-02-16T16:33:31Z"
      },
      "committer": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2016-03-18T08:09:06Z"
      },
      "message": "Soft fork logic for BIP113",
      "tree": {
        "sha": "a5cffac9db26a820fcfc8773900c83695a855217",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a5cffac9db26a820fcfc8773900c83695a855217"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/478fba6d5213a3f1ffeca5feeacf28aaf6844fd6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/478fba6d5213a3f1ffeca5feeacf28aaf6844fd6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/478fba6d5213a3f1ffeca5feeacf28aaf6844fd6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/478fba6d5213a3f1ffeca5feeacf28aaf6844fd6/comments",
    "author": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following{/other_user}",
      "gists_url": "https://api.github.com/users/btcdrak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following{/other_user}",
      "gists_url": "https://api.github.com/users/btcdrak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "65751a3cf2421a9419172949cad9dc49b7383551",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65751a3cf2421a9419172949cad9dc49b7383551",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/65751a3cf2421a9419172949cad9dc49b7383551"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 10,
      "deletions": 4
    },
    "files": [
      {
        "sha": "857bf218ba79924d765d3b18aa26dd047ecc76bb",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 4,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/478fba6d5213a3f1ffeca5feeacf28aaf6844fd6/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/478fba6d5213a3f1ffeca5feeacf28aaf6844fd6/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=478fba6d5213a3f1ffeca5feeacf28aaf6844fd6",
        "patch": "@@ -3276,12 +3276,18 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIn\n     const int nHeight = pindexPrev == NULL ? 0 : pindexPrev->nHeight + 1;\n     const Consensus::Params& consensusParams = Params().GetConsensus();\n \n+    // Start enforcing BIP113 (Median Time Past) using versionbits logic.\n+    int nLockTimeFlags = 0;\n+    if (VersionBitsState(pindexPrev, consensusParams, Consensus::DEPLOYMENT_CSV, versionbitscache) == THRESHOLD_ACTIVE) {\n+        nLockTimeFlags |= LOCKTIME_MEDIAN_TIME_PAST;\n+    }\n+\n+    int64_t nLockTimeCutoff = (nLockTimeFlags & LOCKTIME_MEDIAN_TIME_PAST)\n+                              ? pindexPrev->GetMedianTimePast()\n+                              : block.GetBlockTime();\n+\n     // Check that all transactions are finalized\n     BOOST_FOREACH(const CTransaction& tx, block.vtx) {\n-        int nLockTimeFlags = 0;\n-        int64_t nLockTimeCutoff = (nLockTimeFlags & LOCKTIME_MEDIAN_TIME_PAST)\n-                                ? pindexPrev->GetMedianTimePast()\n-                                : block.GetBlockTime();\n         if (!IsFinalTx(tx, nHeight, nLockTimeCutoff)) {\n             return state.DoS(10, false, REJECT_INVALID, \"bad-txns-nonfinal\", false, \"non-final transaction\");\n         }"
      }
    ]
  },
  {
    "sha": "02c243580295a7f1c0298fcd9afc2e76b607e724",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMmMyNDM1ODAyOTVhN2YxYzAyOThmY2Q5YWZjMmU3NmI2MDdlNzI0",
    "commit": {
      "author": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2016-02-16T16:37:43Z"
      },
      "committer": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2016-03-18T08:09:06Z"
      },
      "message": "Soft fork logic for BIP68",
      "tree": {
        "sha": "309e26052d20ef586d41f793c62bc809229d3c9f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/309e26052d20ef586d41f793c62bc809229d3c9f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/02c243580295a7f1c0298fcd9afc2e76b607e724",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02c243580295a7f1c0298fcd9afc2e76b607e724",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/02c243580295a7f1c0298fcd9afc2e76b607e724",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02c243580295a7f1c0298fcd9afc2e76b607e724/comments",
    "author": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following{/other_user}",
      "gists_url": "https://api.github.com/users/btcdrak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following{/other_user}",
      "gists_url": "https://api.github.com/users/btcdrak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "478fba6d5213a3f1ffeca5feeacf28aaf6844fd6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/478fba6d5213a3f1ffeca5feeacf28aaf6844fd6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/478fba6d5213a3f1ffeca5feeacf28aaf6844fd6"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 3,
      "deletions": 2
    },
    "files": [
      {
        "sha": "f74cb30574ce30157e87c3f5242baa3dd7cb303e",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02c243580295a7f1c0298fcd9afc2e76b607e724/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02c243580295a7f1c0298fcd9afc2e76b607e724/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=02c243580295a7f1c0298fcd9afc2e76b607e724",
        "patch": "@@ -2262,9 +2262,11 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n         flags |= SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY;\n     }\n \n-    // Start enforcing CHECKSEQUENCEVERIFY using versionbits logic.\n+    // Start enforcing BIP68 (sequence locks) and BIP112 (CHECKSEQUENCEVERIFY) using versionbits logic.\n+    int nLockTimeFlags = 0;\n     if (VersionBitsState(pindex->pprev, chainparams.GetConsensus(), Consensus::DEPLOYMENT_CSV, versionbitscache) == THRESHOLD_ACTIVE) {\n         flags |= SCRIPT_VERIFY_CHECKSEQUENCEVERIFY;\n+        nLockTimeFlags |= LOCKTIME_VERIFY_SEQUENCE;\n     }\n \n     int64_t nTime2 = GetTimeMicros(); nTimeForks += nTime2 - nTime1;\n@@ -2275,7 +2277,6 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n     CCheckQueueControl<CScriptCheck> control(fScriptChecks && nScriptCheckThreads ? &scriptcheckqueue : NULL);\n \n     std::vector<int> prevheights;\n-    int nLockTimeFlags = 0;\n     CAmount nFees = 0;\n     int nInputs = 0;\n     unsigned int nSigOps = 0;"
      }
    ]
  },
  {
    "sha": "12c89c918534f8e615e80381b692d89d6b09d174",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMmM4OWM5MTg1MzRmOGU2MTVlODAzODFiNjkyZDg5ZDZiMDlkMTc0",
    "commit": {
      "author": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2016-02-19T19:52:31Z"
      },
      "committer": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2016-03-18T08:09:06Z"
      },
      "message": "Policy: allow transaction version 2 relay policy.\n\nThis commit introduces a way to gracefully bump the default\ntransaction version in a two step process.",
      "tree": {
        "sha": "bd6e0b0784da6ad7be58b0f01c408a2920b398f6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bd6e0b0784da6ad7be58b0f01c408a2920b398f6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/12c89c918534f8e615e80381b692d89d6b09d174",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12c89c918534f8e615e80381b692d89d6b09d174",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/12c89c918534f8e615e80381b692d89d6b09d174",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12c89c918534f8e615e80381b692d89d6b09d174/comments",
    "author": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following{/other_user}",
      "gists_url": "https://api.github.com/users/btcdrak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following{/other_user}",
      "gists_url": "https://api.github.com/users/btcdrak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "02c243580295a7f1c0298fcd9afc2e76b607e724",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02c243580295a7f1c0298fcd9afc2e76b607e724",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/02c243580295a7f1c0298fcd9afc2e76b607e724"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 8,
      "deletions": 1
    },
    "files": [
      {
        "sha": "e3ed7be0008ee8dd3ef19a01a84bc3507b271ca0",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12c89c918534f8e615e80381b692d89d6b09d174/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12c89c918534f8e615e80381b692d89d6b09d174/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=12c89c918534f8e615e80381b692d89d6b09d174",
        "patch": "@@ -55,7 +55,7 @@ bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType)\n \n bool IsStandardTx(const CTransaction& tx, std::string& reason)\n {\n-    if (tx.nVersion > CTransaction::CURRENT_VERSION || tx.nVersion < 1) {\n+    if (tx.nVersion > CTransaction::MAX_STANDARD_VERSION || tx.nVersion < 1) {\n         reason = \"version\";\n         return false;\n     }"
      },
      {
        "sha": "9f7d6f394390b5cac3533c8b101c20ba03028c8a",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12c89c918534f8e615e80381b692d89d6b09d174/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12c89c918534f8e615e80381b692d89d6b09d174/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=12c89c918534f8e615e80381b692d89d6b09d174",
        "patch": "@@ -206,8 +206,15 @@ class CTransaction\n     void UpdateHash() const;\n \n public:\n+    // Default transaction version.\n     static const int32_t CURRENT_VERSION=1;\n \n+    // Changing the default transaction version requires a two step process: first\n+    // adapting relay policy by bumping MAX_STANDARD_VERSION, and then later date\n+    // bumping the default CURRENT_VERSION at which point both CURRENT_VERSION and\n+    // MAX_STANDARD_VERSION will be equal.\n+    static const int32_t MAX_STANDARD_VERSION=2;\n+\n     // The local variables are made const to prevent unintended modification\n     // without updating the cached hash value. However, CTransaction is not\n     // actually immutable; deserialization and assignment are implemented,"
      }
    ]
  },
  {
    "sha": "19d73d540c8de4a73b5b2a05bebd762e74890a20",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxOWQ3M2Q1NDBjOGRlNGE3M2I1YjJhMDViZWJkNzYyZTc0ODkwYTIw",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2016-03-10T23:36:55Z"
      },
      "committer": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2016-03-18T08:09:06Z"
      },
      "message": "Add RPC test for BIP 68/112/113 soft fork.\n\nThis RPC test will test both the activation mechanism of the first versionbits soft fork as well as testing many code branches of the consensus logic for BIP's 68, 112, and 113.",
      "tree": {
        "sha": "9991f8f280b3e1b74519e28ea1e28ae6ae0dc85f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9991f8f280b3e1b74519e28ea1e28ae6ae0dc85f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/19d73d540c8de4a73b5b2a05bebd762e74890a20",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/19d73d540c8de4a73b5b2a05bebd762e74890a20",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/19d73d540c8de4a73b5b2a05bebd762e74890a20",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/19d73d540c8de4a73b5b2a05bebd762e74890a20/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following{/other_user}",
      "gists_url": "https://api.github.com/users/btcdrak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "12c89c918534f8e615e80381b692d89d6b09d174",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12c89c918534f8e615e80381b692d89d6b09d174",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/12c89c918534f8e615e80381b692d89d6b09d174"
      }
    ],
    "stats": {
      "total": 548,
      "additions": 548,
      "deletions": 0
    },
    "files": [
      {
        "sha": "cbc10abd215e0a8aaba45313aac52f279835c9d9",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/19d73d540c8de4a73b5b2a05bebd762e74890a20/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/19d73d540c8de4a73b5b2a05bebd762e74890a20/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=19d73d540c8de4a73b5b2a05bebd762e74890a20",
        "patch": "@@ -83,6 +83,7 @@\n \n #Tests\n testScripts = [\n+    'bip68-112-113-p2p.py',\n     'wallet.py',\n     'listtransactions.py',\n     'receivedby.py',"
      },
      {
        "sha": "c226f4dad497646c29e6fb0d5b35f82f4b9b7ba5",
        "filename": "qa/rpc-tests/bip68-112-113-p2p.py",
        "status": "added",
        "additions": 547,
        "deletions": 0,
        "changes": 547,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/19d73d540c8de4a73b5b2a05bebd762e74890a20/qa/rpc-tests/bip68-112-113-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/19d73d540c8de4a73b5b2a05bebd762e74890a20/qa/rpc-tests/bip68-112-113-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip68-112-113-p2p.py?ref=19d73d540c8de4a73b5b2a05bebd762e74890a20",
        "patch": "@@ -0,0 +1,547 @@\n+#!/usr/bin/env python2\n+# Copyright (c) 2015 The Bitcoin Core developers\n+# Distributed under the MIT/X11 software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#\n+\n+from test_framework.test_framework import ComparisonTestFramework\n+from test_framework.util import *\n+from test_framework.mininode import ToHex, CTransaction, NetworkThread\n+from test_framework.blocktools import create_coinbase, create_block\n+from test_framework.comptool import TestInstance, TestManager\n+from test_framework.script import *\n+from binascii import unhexlify\n+import cStringIO\n+import time\n+\n+'''\n+This test is meant to exercise activation of the first version bits soft fork\n+This soft fork will activate the following BIPS:\n+BIP 68  - nSequence relative lock times\n+BIP 112 - CHECKSEQUENCEVERIFY\n+BIP 113 - MedianTimePast semantics for nLockTime\n+\n+regtest lock-in with 108/144 block signalling\n+activation after a further 144 blocks\n+\n+mine 82 blocks whose coinbases will be used to generate inputs for our tests\n+mine 61 blocks to transition from DEFINED to STARTED\n+mine 144 blocks only 100 of which are signaling readiness in order to fail to change state this period\n+mine 144 blocks with 108 signaling and verify STARTED->LOCKED_IN\n+mine 140 blocks and seed block chain with the 82 inputs will use for our tests at height 572\n+mine 3 blocks and verify still at LOCKED_IN and test that enforcement has not triggered\n+mine 1 block and test that enforcement has triggered (which triggers ACTIVE)\n+Test BIP 113 is enforced\n+Mine 4 blocks so next height is 580 and test BIP 68 is enforced for time and height\n+Mine 1 block so next height is 581 and test BIP 68 now passes time but not height\n+Mine 1 block so next height is 582 and test BIP 68 now passes time and height\n+Test that BIP 112 is enforced\n+\n+Various transactions will be used to test that the BIPs rules are not enforced before the soft fork activates\n+And that after the soft fork activates transactions pass and fail as they should according to the rules.\n+For each BIP, transactions of versions 1 and 2 will be tested.\n+----------------\n+BIP 113:\n+bip113tx - modify the nLocktime variable\n+\n+BIP 68:\n+bip68txs - 16 txs with nSequence relative locktime of 10 with various bits set as per the relative_locktimes below\n+\n+BIP 112:\n+bip112txs_vary_nSequence - 16 txs with nSequence relative_locktimes of 10 evaluated against 10 OP_CSV OP_DROP\n+bip112txs_vary_nSequence_9 - 16 txs with nSequence relative_locktimes of 9 evaluated against 10 OP_CSV OP_DROP\n+bip112txs_vary_OP_CSV - 16 txs with nSequence = 10 evaluated against varying {relative_locktimes of 10} OP_CSV OP_DROP\n+bip112txs_vary_OP_CSV_9 - 16 txs with nSequence = 9 evaluated against varying {relative_locktimes of 10} OP_CSV OP_DROP\n+bip112tx_special - test negative argument to OP_CSV\n+'''\n+\n+base_relative_locktime = 10\n+seq_disable_flag = 1<<31\n+seq_random_high_bit = 1<<25\n+seq_type_flag = 1<<22\n+seq_random_low_bit = 1<<18\n+\n+# b31,b25,b22,b18 represent the 31st, 25th, 22nd and 18th bits respectively in the nSequence field\n+# relative_locktimes[b31][b25][b22][b18] is a base_relative_locktime with the indicated bits set if their indices are 1\n+relative_locktimes = []\n+for b31 in xrange(2):\n+    b25times = []\n+    for b25 in xrange(2):\n+        b22times = []\n+        for b22 in xrange(2):\n+            b18times = []\n+            for b18 in xrange(2):\n+                rlt = base_relative_locktime\n+                if (b31):\n+                    rlt = rlt | seq_disable_flag\n+                if (b25):\n+                    rlt = rlt | seq_random_high_bit\n+                if (b22):\n+                    rlt = rlt | seq_type_flag\n+                if (b18):\n+                    rlt = rlt | seq_random_low_bit\n+                b18times.append(rlt)\n+            b22times.append(b18times)\n+        b25times.append(b22times)\n+    relative_locktimes.append(b25times)\n+\n+def all_rlt_txs(txarray):\n+    txs = []\n+    for b31 in xrange(2):\n+        for b25 in xrange(2):\n+            for b22 in xrange(2):\n+                for b18 in xrange(2):\n+                    txs.append(txarray[b31][b25][b22][b18])\n+    return txs\n+\n+class BIP68_112_113Test(ComparisonTestFramework):\n+    def __init__(self):\n+        self.num_nodes = 1\n+\n+    def setup_network(self):\n+        # Must set the blockversion for this test\n+        self.nodes = start_nodes(1, self.options.tmpdir,\n+                                 extra_args=[['-debug', '-whitelist=127.0.0.1', '-blockversion=4']],\n+                                 binary=[self.options.testbinary])\n+\n+    def run_test(self):\n+        test = TestManager(self, self.options.tmpdir)\n+        test.add_all_connections(self.nodes)\n+        NetworkThread().start() # Start up network handling in another thread\n+        test.run()\n+\n+    def send_generic_input_tx(self, node, coinbases):\n+        amount = Decimal(\"49.99\")\n+        return node.sendrawtransaction(ToHex(self.sign_transaction(node, self.create_transaction(node, node.getblock(coinbases.pop())['tx'][0], self.nodeaddress, amount))))\n+\n+    def create_transaction(self, node, txid, to_address, amount):\n+        inputs = [{ \"txid\" : txid, \"vout\" : 0}]\n+        outputs = { to_address : amount }\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+        tx = CTransaction()\n+        f = cStringIO.StringIO(unhexlify(rawtx))\n+        tx.deserialize(f)\n+        return tx\n+\n+    def sign_transaction(self, node, unsignedtx):\n+        rawtx = ToHex(unsignedtx)\n+        signresult = node.signrawtransaction(rawtx)\n+        tx = CTransaction()\n+        f = cStringIO.StringIO(unhexlify(signresult['hex']))\n+        tx.deserialize(f)\n+        return tx\n+\n+    def generate_blocks(self, number, version, test_blocks = []):\n+        for i in xrange(number):\n+            block = self.create_test_block([], version)\n+            test_blocks.append([block, True])\n+            self.last_block_time += 600\n+            self.tip = block.sha256\n+            self.tipheight += 1\n+        return test_blocks\n+\n+    def create_test_block(self, txs, version = 536870912):\n+        block = create_block(self.tip, create_coinbase(self.tipheight + 1), self.last_block_time + 600)\n+        block.nVersion = version\n+        block.vtx.extend(txs)\n+        block.hashMerkleRoot = block.calc_merkle_root()\n+        block.rehash()\n+        block.solve()\n+        return block\n+\n+    def get_bip9_status(self, key):\n+        info = self.nodes[0].getblockchaininfo()\n+        for row in info['bip9_softforks']:\n+            if row['id'] == key:\n+                return row\n+        raise IndexError ('key:\"%s\" not found' % key)\n+\n+    def create_bip68txs(self, bip68inputs, txversion, locktime_delta = 0):\n+        txs = []\n+        assert(len(bip68inputs) >= 16)\n+        i = 0\n+        for b31 in xrange(2):\n+            b25txs = []\n+            for b25 in xrange(2):\n+                b22txs = []\n+                for b22 in xrange(2):\n+                    b18txs = []\n+                    for b18 in xrange(2):\n+                        tx =  self.create_transaction(self.nodes[0], bip68inputs[i], self.nodeaddress, Decimal(\"49.98\"))\n+                        i += 1\n+                        tx.nVersion = txversion\n+                        tx.vin[0].nSequence = relative_locktimes[b31][b25][b22][b18] + locktime_delta\n+                        b18txs.append(self.sign_transaction(self.nodes[0], tx))\n+                    b22txs.append(b18txs)\n+                b25txs.append(b22txs)\n+            txs.append(b25txs)\n+        return txs\n+\n+    def create_bip112special(self, input, txversion):\n+        tx = self.create_transaction(self.nodes[0], input, self.nodeaddress, Decimal(\"49.98\"))\n+        tx.nVersion = txversion\n+        signtx = self.sign_transaction(self.nodes[0], tx)\n+        signtx.vin[0].scriptSig = CScript([-1, OP_NOP3, OP_DROP] + list(CScript(signtx.vin[0].scriptSig)))\n+        return signtx\n+\n+    def create_bip112txs(self, bip112inputs, varyOP_CSV, txversion, locktime_delta = 0):\n+        txs = []\n+        assert(len(bip112inputs) >= 16)\n+        i = 0\n+        for b31 in xrange(2):\n+            b25txs = []\n+            for b25 in xrange(2):\n+                b22txs = []\n+                for b22 in xrange(2):\n+                    b18txs = []\n+                    for b18 in xrange(2):\n+                        tx =  self.create_transaction(self.nodes[0], bip112inputs[i], self.nodeaddress, Decimal(\"49.98\"))\n+                        i += 1\n+                        if (varyOP_CSV): # if varying OP_CSV, nSequence is fixed\n+                            tx.vin[0].nSequence = base_relative_locktime + locktime_delta\n+                        else: # vary nSequence instead, OP_CSV is fixed\n+                            tx.vin[0].nSequence = relative_locktimes[b31][b25][b22][b18] + locktime_delta\n+                        tx.nVersion = txversion\n+                        signtx = self.sign_transaction(self.nodes[0], tx)\n+                        if (varyOP_CSV):\n+                            signtx.vin[0].scriptSig = CScript([relative_locktimes[b31][b25][b22][b18], OP_NOP3, OP_DROP] + list(CScript(signtx.vin[0].scriptSig)))\n+                        else:\n+                            signtx.vin[0].scriptSig = CScript([base_relative_locktime, OP_NOP3, OP_DROP] + list(CScript(signtx.vin[0].scriptSig)))\n+                        b18txs.append(signtx)\n+                    b22txs.append(b18txs)\n+                b25txs.append(b22txs)\n+            txs.append(b25txs)\n+        return txs\n+\n+    def get_tests(self):\n+        long_past_time = int(time.time()) - 600 * 1000 # enough to build up to 1000 blocks 10 minutes apart without worrying about getting into the future\n+        self.nodes[0].setmocktime(long_past_time - 100) # enough so that the generated blocks will still all be before long_past_time\n+        self.coinbase_blocks = self.nodes[0].generate(1 + 16 + 2*32 + 1) # 82 blocks generated for inputs\n+        self.nodes[0].setmocktime(0) # set time back to present so yielded blocks aren't in the future as we advance last_block_time\n+        self.tipheight = 82 # height of the next block to build\n+        self.last_block_time = long_past_time\n+        self.tip = int (\"0x\" + self.nodes[0].getbestblockhash() + \"L\", 0)\n+        self.nodeaddress = self.nodes[0].getnewaddress()\n+\n+        assert_equal(self.get_bip9_status('csv')['status'], 'defined')\n+        test_blocks = self.generate_blocks(61, 4)\n+        yield TestInstance(test_blocks, sync_every_block=False) # 1\n+        # Advanced from DEFINED to STARTED, height = 143\n+        assert_equal(self.get_bip9_status('csv')['status'], 'started')\n+\n+        # Fail to achieve LOCKED_IN 100 out of 144 signal bit 0\n+        # using a variety of bits to simulate multiple parallel softforks\n+        test_blocks = self.generate_blocks(50, 536870913) # 0x20000001 (signalling ready)\n+        test_blocks = self.generate_blocks(20, 4, test_blocks) # 0x00000004 (signalling not)\n+        test_blocks = self.generate_blocks(50, 536871169, test_blocks) # 0x20000101 (signalling ready)\n+        test_blocks = self.generate_blocks(24, 536936448, test_blocks) # 0x20010000 (signalling not)\n+        yield TestInstance(test_blocks, sync_every_block=False) # 2\n+        # Failed to advance past STARTED, height = 287\n+        assert_equal(self.get_bip9_status('csv')['status'], 'started')\n+\n+        # 108 out of 144 signal bit 0 to achieve lock-in\n+        # using a variety of bits to simulate multiple parallel softforks\n+        test_blocks = self.generate_blocks(58, 536870913) # 0x20000001 (signalling ready)\n+        test_blocks = self.generate_blocks(26, 4, test_blocks) # 0x00000004 (signalling not)\n+        test_blocks = self.generate_blocks(50, 536871169, test_blocks) # 0x20000101 (signalling ready)\n+        test_blocks = self.generate_blocks(10, 536936448, test_blocks) # 0x20010000 (signalling not)\n+        yield TestInstance(test_blocks, sync_every_block=False) # 3\n+        # Advanced from STARTED to LOCKED_IN, height = 431\n+        assert_equal(self.get_bip9_status('csv')['status'], 'locked_in')\n+\n+        # 140 more version 4 blocks\n+        test_blocks = self.generate_blocks(140, 4)\n+        yield TestInstance(test_blocks, sync_every_block=False) # 4\n+\n+        ### Inputs at height = 572\n+        # Put inputs for all tests in the chain at height 572 (tip now = 571) (time increases by 600s per block)\n+        # Note we reuse inputs for v1 and v2 txs so must test these separately\n+        # 16 normal inputs\n+        bip68inputs = []\n+        for i in xrange(16):\n+            bip68inputs.append(self.send_generic_input_tx(self.nodes[0], self.coinbase_blocks))\n+        # 2 sets of 16 inputs with 10 OP_CSV OP_DROP (actually will be prepended to spending scriptSig)\n+        bip112basicinputs = []\n+        for j in xrange(2):\n+            inputs = []\n+            for i in xrange(16):\n+                inputs.append(self.send_generic_input_tx(self.nodes[0], self.coinbase_blocks))\n+            bip112basicinputs.append(inputs)\n+        # 2 sets of 16 varied inputs with (relative_lock_time) OP_CSV OP_DROP (actually will be prepended to spending scriptSig)\n+        bip112diverseinputs = []\n+        for j in xrange(2):\n+            inputs = []\n+            for i in xrange(16):\n+                inputs.append(self.send_generic_input_tx(self.nodes[0], self.coinbase_blocks))\n+            bip112diverseinputs.append(inputs)\n+        # 1 special input with -1 OP_CSV OP_DROP (actually will be prepended to spending scriptSig)\n+        bip112specialinput = self.send_generic_input_tx(self.nodes[0], self.coinbase_blocks)\n+        # 1 normal input\n+        bip113input = self.send_generic_input_tx(self.nodes[0], self.coinbase_blocks)\n+\n+        self.nodes[0].setmocktime(self.last_block_time + 600)\n+        inputblockhash = self.nodes[0].generate(1)[0] # 1 block generated for inputs to be in chain at height 572\n+        self.nodes[0].setmocktime(0)\n+        self.tip = int(\"0x\" + inputblockhash + \"L\", 0)\n+        self.tipheight += 1\n+        self.last_block_time += 600\n+        assert_equal(len(self.nodes[0].getblock(inputblockhash,True)[\"tx\"]), 82+1)\n+\n+        # 2 more version 4 blocks\n+        test_blocks = self.generate_blocks(2, 4)\n+        yield TestInstance(test_blocks, sync_every_block=False) # 5\n+        # Not yet advanced to ACTIVE, height = 574 (will activate for block 576, not 575)\n+        assert_equal(self.get_bip9_status('csv')['status'], 'locked_in')\n+\n+        # Test both version 1 and version 2 transactions for all tests\n+        # BIP113 test transaction will be modified before each use to put in appropriate block time\n+        bip113tx_v1 = self.create_transaction(self.nodes[0], bip113input, self.nodeaddress, Decimal(\"49.98\"))\n+        bip113tx_v1.vin[0].nSequence = 0xFFFFFFFE\n+        bip113tx_v2 = self.create_transaction(self.nodes[0], bip113input, self.nodeaddress, Decimal(\"49.98\"))\n+        bip113tx_v2.vin[0].nSequence = 0xFFFFFFFE\n+        bip113tx_v2.nVersion = 2\n+\n+        # For BIP68 test all 16 relative sequence locktimes\n+        bip68txs_v1 = self.create_bip68txs(bip68inputs, 1)\n+        bip68txs_v2 = self.create_bip68txs(bip68inputs, 2)\n+\n+        # For BIP112 test:\n+        # 16 relative sequence locktimes of 10 against 10 OP_CSV OP_DROP inputs\n+        bip112txs_vary_nSequence_v1 = self.create_bip112txs(bip112basicinputs[0], False, 1)\n+        bip112txs_vary_nSequence_v2 = self.create_bip112txs(bip112basicinputs[0], False, 2)\n+        # 16 relative sequence locktimes of 9 against 10 OP_CSV OP_DROP inputs\n+        bip112txs_vary_nSequence_9_v1 = self.create_bip112txs(bip112basicinputs[1], False, 1, -1)\n+        bip112txs_vary_nSequence_9_v2 = self.create_bip112txs(bip112basicinputs[1], False, 2, -1)\n+        # sequence lock time of 10 against 16 (relative_lock_time) OP_CSV OP_DROP inputs\n+        bip112txs_vary_OP_CSV_v1 = self.create_bip112txs(bip112diverseinputs[0], True, 1)\n+        bip112txs_vary_OP_CSV_v2 = self.create_bip112txs(bip112diverseinputs[0], True, 2)\n+        # sequence lock time of 9 against 16 (relative_lock_time) OP_CSV OP_DROP inputs\n+        bip112txs_vary_OP_CSV_9_v1 = self.create_bip112txs(bip112diverseinputs[1], True, 1, -1)\n+        bip112txs_vary_OP_CSV_9_v2 = self.create_bip112txs(bip112diverseinputs[1], True, 2, -1)\n+        # -1 OP_CSV OP_DROP input\n+        bip112tx_special_v1 = self.create_bip112special(bip112specialinput, 1)\n+        bip112tx_special_v2 = self.create_bip112special(bip112specialinput, 2)\n+\n+\n+        ### TESTING ###\n+        ##################################\n+        ### Before Soft Forks Activate ###\n+        ##################################\n+        # All txs should pass\n+        ### Version 1 txs ###\n+        success_txs = []\n+        # add BIP113 tx and -1 CSV tx\n+        bip113tx_v1.nLockTime = self.last_block_time - 600 * 5 # = MTP of prior block (not <) but < time put on current block\n+        bip113signed1 = self.sign_transaction(self.nodes[0], bip113tx_v1)\n+        success_txs.append(bip113signed1)\n+        success_txs.append(bip112tx_special_v1)\n+        # add BIP 68 txs\n+        success_txs.extend(all_rlt_txs(bip68txs_v1))\n+        # add BIP 112 with seq=10 txs\n+        success_txs.extend(all_rlt_txs(bip112txs_vary_nSequence_v1))\n+        success_txs.extend(all_rlt_txs(bip112txs_vary_OP_CSV_v1))\n+        # try BIP 112 with seq=9 txs\n+        success_txs.extend(all_rlt_txs(bip112txs_vary_nSequence_9_v1))\n+        success_txs.extend(all_rlt_txs(bip112txs_vary_OP_CSV_9_v1))\n+        yield TestInstance([[self.create_test_block(success_txs), True]]) # 6\n+        self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n+\n+        ### Version 2 txs ###\n+        success_txs = []\n+        # add BIP113 tx and -1 CSV tx\n+        bip113tx_v2.nLockTime = self.last_block_time - 600 * 5 # = MTP of prior block (not <) but < time put on current block\n+        bip113signed2 = self.sign_transaction(self.nodes[0], bip113tx_v2)\n+        success_txs.append(bip113signed2)\n+        success_txs.append(bip112tx_special_v2)\n+        # add BIP 68 txs\n+        success_txs.extend(all_rlt_txs(bip68txs_v2))\n+        # add BIP 112 with seq=10 txs\n+        success_txs.extend(all_rlt_txs(bip112txs_vary_nSequence_v2))\n+        success_txs.extend(all_rlt_txs(bip112txs_vary_OP_CSV_v2))\n+        # try BIP 112 with seq=9 txs\n+        success_txs.extend(all_rlt_txs(bip112txs_vary_nSequence_9_v2))\n+        success_txs.extend(all_rlt_txs(bip112txs_vary_OP_CSV_9_v2))\n+        yield TestInstance([[self.create_test_block(success_txs), True]]) # 7\n+        self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n+\n+\n+        # 1 more version 4 block to get us to height 575 so the fork should now be active for the next block\n+        test_blocks = self.generate_blocks(1, 4)\n+        yield TestInstance(test_blocks, sync_every_block=False) # 8\n+        assert_equal(self.get_bip9_status('csv')['status'], 'active')\n+\n+\n+        #################################\n+        ### After Soft Forks Activate ###\n+        #################################\n+        ### BIP 113 ###\n+        # BIP 113 tests should now fail regardless of version number if nLockTime isn't satisfied by new rules\n+        bip113tx_v1.nLockTime = self.last_block_time - 600 * 5 # = MTP of prior block (not <) but < time put on current block\n+        bip113signed1 = self.sign_transaction(self.nodes[0], bip113tx_v1)\n+        bip113tx_v2.nLockTime = self.last_block_time - 600 * 5 # = MTP of prior block (not <) but < time put on current block\n+        bip113signed2 = self.sign_transaction(self.nodes[0], bip113tx_v2)\n+        for bip113tx in [bip113signed1, bip113signed2]:\n+            yield TestInstance([[self.create_test_block([bip113tx]), False]]) # 9,10\n+        # BIP 113 tests should now pass if the locktime is < MTP\n+        bip113tx_v1.nLockTime = self.last_block_time - 600 * 5 - 1 # = MTP of prior block (not <) but < time put on current block\n+        bip113signed1 = self.sign_transaction(self.nodes[0], bip113tx_v1)\n+        bip113tx_v2.nLockTime = self.last_block_time - 600 * 5 - 1 # = MTP of prior block (not <) but < time put on current block\n+        bip113signed2 = self.sign_transaction(self.nodes[0], bip113tx_v2)\n+        for bip113tx in [bip113signed1, bip113signed2]:\n+            yield TestInstance([[self.create_test_block([bip113tx]), True]]) # 11,12\n+            self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n+\n+        # Next block height = 580 after 4 blocks of random version\n+        test_blocks = self.generate_blocks(4, 1234)\n+        yield TestInstance(test_blocks, sync_every_block=False) # 13\n+\n+        ### BIP 68 ###\n+        ### Version 1 txs ###\n+        # All still pass\n+        success_txs = []\n+        success_txs.extend(all_rlt_txs(bip68txs_v1))\n+        yield TestInstance([[self.create_test_block(success_txs), True]]) # 14\n+        self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n+\n+        ### Version 2 txs ###\n+        bip68success_txs = []\n+        # All txs with SEQUENCE_LOCKTIME_DISABLE_FLAG set pass\n+        for b25 in xrange(2):\n+            for b22 in xrange(2):\n+                for b18 in xrange(2):\n+                    bip68success_txs.append(bip68txs_v2[1][b25][b22][b18])\n+        yield TestInstance([[self.create_test_block(bip68success_txs), True]]) # 15\n+        self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n+        # All txs without flag fail as we are at delta height = 8 < 10 and delta time = 8 * 600 < 10 * 512\n+        bip68timetxs = []\n+        for b25 in xrange(2):\n+            for b18 in xrange(2):\n+                bip68timetxs.append(bip68txs_v2[0][b25][1][b18])\n+        for tx in bip68timetxs:\n+            yield TestInstance([[self.create_test_block([tx]), False]]) # 16 - 19\n+        bip68heighttxs = []\n+        for b25 in xrange(2):\n+            for b18 in xrange(2):\n+                bip68heighttxs.append(bip68txs_v2[0][b25][0][b18])\n+        for tx in bip68heighttxs:\n+            yield TestInstance([[self.create_test_block([tx]), False]]) # 20 - 23\n+\n+        # Advance one block to 581\n+        test_blocks = self.generate_blocks(1, 1234)\n+        yield TestInstance(test_blocks, sync_every_block=False) # 24\n+\n+        # Height txs should fail and time txs should now pass 9 * 600 > 10 * 512\n+        bip68success_txs.extend(bip68timetxs)\n+        yield TestInstance([[self.create_test_block(bip68success_txs), True]]) # 25\n+        self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n+        for tx in bip68heighttxs:\n+            yield TestInstance([[self.create_test_block([tx]), False]]) # 26 - 29\n+\n+        # Advance one block to 582\n+        test_blocks = self.generate_blocks(1, 1234)\n+        yield TestInstance(test_blocks, sync_every_block=False) # 30\n+\n+        # All BIP 68 txs should pass\n+        bip68success_txs.extend(bip68heighttxs)\n+        yield TestInstance([[self.create_test_block(bip68success_txs), True]]) # 31\n+        self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n+\n+\n+        ### BIP 112 ###\n+        ### Version 1 txs ###\n+        # -1 OP_CSV tx should fail\n+        yield TestInstance([[self.create_test_block([bip112tx_special_v1]), False]]) #32\n+        # If SEQUENCE_LOCKTIME_DISABLE_FLAG is set in argument to OP_CSV, version 1 txs should still pass\n+        success_txs = []\n+        for b25 in xrange(2):\n+            for b22 in xrange(2):\n+                for b18 in xrange(2):\n+                    success_txs.append(bip112txs_vary_OP_CSV_v1[1][b25][b22][b18])\n+                    success_txs.append(bip112txs_vary_OP_CSV_9_v1[1][b25][b22][b18])\n+        yield TestInstance([[self.create_test_block(success_txs), True]]) # 33\n+        self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n+\n+        # If SEQUENCE_LOCKTIME_DISABLE_FLAG is unset in argument to OP_CSV, version 1 txs should now fail\n+        fail_txs = []\n+        fail_txs.extend(all_rlt_txs(bip112txs_vary_nSequence_v1))\n+        fail_txs.extend(all_rlt_txs(bip112txs_vary_nSequence_9_v1))\n+        for b25 in xrange(2):\n+            for b22 in xrange(2):\n+                for b18 in xrange(2):\n+                    fail_txs.append(bip112txs_vary_OP_CSV_v1[0][b25][b22][b18])\n+                    fail_txs.append(bip112txs_vary_OP_CSV_9_v1[0][b25][b22][b18])\n+\n+        for tx in fail_txs:\n+            yield TestInstance([[self.create_test_block([tx]), False]]) # 34 - 81\n+\n+        ### Version 2 txs ###\n+        # -1 OP_CSV tx should fail\n+        yield TestInstance([[self.create_test_block([bip112tx_special_v2]), False]]) #82\n+\n+        # If SEQUENCE_LOCKTIME_DISABLE_FLAG is set in argument to OP_CSV, version 2 txs should pass (all sequence locks are met)\n+        success_txs = []\n+        for b25 in xrange(2):\n+            for b22 in xrange(2):\n+                for b18 in xrange(2):\n+                    success_txs.append(bip112txs_vary_OP_CSV_v2[1][b25][b22][b18]) # 8/16 of vary_OP_CSV\n+                    success_txs.append(bip112txs_vary_OP_CSV_9_v2[1][b25][b22][b18]) # 8/16 of vary_OP_CSV_9\n+\n+        yield TestInstance([[self.create_test_block(success_txs), True]]) # 83\n+        self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n+\n+        ## SEQUENCE_LOCKTIME_DISABLE_FLAG is unset in argument to OP_CSV for all remaining txs ##\n+        # All txs with nSequence 11 should fail either due to earlier mismatch or failing the CSV check\n+        fail_txs = []\n+        fail_txs.extend(all_rlt_txs(bip112txs_vary_nSequence_9_v2)) # 16/16 of vary_nSequence_9\n+        for b25 in xrange(2):\n+            for b22 in xrange(2):\n+                for b18 in xrange(2):\n+                    fail_txs.append(bip112txs_vary_OP_CSV_9_v2[0][b25][b22][b18]) # 16/16 of vary_OP_CSV_9\n+\n+        for tx in fail_txs:\n+            yield TestInstance([[self.create_test_block([tx]), False]]) # 84 - 107\n+\n+        # If SEQUENCE_LOCKTIME_DISABLE_FLAG is set in nSequence, tx should fail\n+        fail_txs = []\n+        for b25 in xrange(2):\n+            for b22 in xrange(2):\n+                for b18 in xrange(2):\n+                    fail_txs.append(bip112txs_vary_nSequence_v2[1][b25][b22][b18]) # 8/16 of vary_nSequence\n+        for tx in fail_txs:\n+            yield TestInstance([[self.create_test_block([tx]), False]]) # 108-115\n+\n+        # If sequencelock types mismatch, tx should fail\n+        fail_txs = []\n+        for b25 in xrange(2):\n+            for b18 in xrange(2):\n+                fail_txs.append(bip112txs_vary_nSequence_v2[0][b25][1][b18]) # 12/16 of vary_nSequence\n+                fail_txs.append(bip112txs_vary_OP_CSV_v2[0][b25][1][b18]) # 12/16 of vary_OP_CSV\n+        for tx in fail_txs:\n+            yield TestInstance([[self.create_test_block([tx]), False]]) # 116-123\n+\n+        # Remaining txs should pass, just test masking works properly\n+        success_txs = []\n+        for b25 in xrange(2):\n+            for b18 in xrange(2):\n+                success_txs.append(bip112txs_vary_nSequence_v2[0][b25][0][b18]) # 16/16 of vary_nSequence\n+                success_txs.append(bip112txs_vary_OP_CSV_v2[0][b25][0][b18]) # 16/16 of vary_OP_CSV\n+        yield TestInstance([[self.create_test_block(success_txs), True]]) # 124\n+        self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n+\n+        # Additional test, of checking that comparison of two time types works properly\n+        time_txs = []\n+        for b25 in xrange(2):\n+            for b18 in xrange(2):\n+                tx = bip112txs_vary_OP_CSV_v2[0][b25][1][b18]\n+                tx.vin[0].nSequence = base_relative_locktime | seq_type_flag\n+                signtx = self.sign_transaction(self.nodes[0], tx)\n+                time_txs.append(signtx)\n+        yield TestInstance([[self.create_test_block(time_txs), True]]) # 125\n+        self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n+\n+        ### Missing aspects of test\n+        ##  Testing empty stack fails\n+\n+\n+if __name__ == '__main__':\n+    BIP68_112_113Test().main()"
      }
    ]
  },
  {
    "sha": "71527a0f31ae67edad0a7fcda59c75a6ce5666ca",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MTUyN2EwZjMxYWU2N2VkYWQwYTdmY2RhNTljNzVhNmNlNTY2NmNh",
    "commit": {
      "author": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2016-03-16T05:30:04Z"
      },
      "committer": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2016-03-21T09:07:34Z"
      },
      "message": "Test of BIP9 fork activation of mtp, csv, sequence_lock",
      "tree": {
        "sha": "347ad2c83d04abc78bb0c4345914f614a93aa86e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/347ad2c83d04abc78bb0c4345914f614a93aa86e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/71527a0f31ae67edad0a7fcda59c75a6ce5666ca",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71527a0f31ae67edad0a7fcda59c75a6ce5666ca",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/71527a0f31ae67edad0a7fcda59c75a6ce5666ca",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71527a0f31ae67edad0a7fcda59c75a6ce5666ca/comments",
    "author": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following{/other_user}",
      "gists_url": "https://api.github.com/users/btcdrak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "19d73d540c8de4a73b5b2a05bebd762e74890a20",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/19d73d540c8de4a73b5b2a05bebd762e74890a20",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/19d73d540c8de4a73b5b2a05bebd762e74890a20"
      }
    ],
    "stats": {
      "total": 225,
      "additions": 225,
      "deletions": 0
    },
    "files": [
      {
        "sha": "b32d8d93a9c25d70a305577cea6577cbeaae82fe",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71527a0f31ae67edad0a7fcda59c75a6ce5666ca/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71527a0f31ae67edad0a7fcda59c75a6ce5666ca/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=71527a0f31ae67edad0a7fcda59c75a6ce5666ca",
        "patch": "@@ -119,6 +119,7 @@\n     'p2p-versionbits-warning.py',\n ]\n testScriptsExt = [\n+    'bip9-softforks.py',\n     'bip65-cltv.py',\n     'bip65-cltv-p2p.py',\n     'bip68-sequence.py',"
      },
      {
        "sha": "cbb1b7d4cee89180bcc3d23a5ac0ef0d6cb20fcc",
        "filename": "qa/rpc-tests/bip9-softforks.py",
        "status": "added",
        "additions": 220,
        "deletions": 0,
        "changes": 220,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71527a0f31ae67edad0a7fcda59c75a6ce5666ca/qa/rpc-tests/bip9-softforks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71527a0f31ae67edad0a7fcda59c75a6ce5666ca/qa/rpc-tests/bip9-softforks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip9-softforks.py?ref=71527a0f31ae67edad0a7fcda59c75a6ce5666ca",
        "patch": "@@ -0,0 +1,220 @@\n+#!/usr/bin/env python2\n+# Copyright (c) 2015 The Bitcoin Core developers\n+# Distributed under the MIT/X11 software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#\n+\n+from test_framework.test_framework import ComparisonTestFramework\n+from test_framework.util import *\n+from test_framework.mininode import CTransaction, NetworkThread\n+from test_framework.blocktools import create_coinbase, create_block\n+from test_framework.comptool import TestInstance, TestManager\n+from test_framework.script import CScript, OP_1NEGATE, OP_NOP3, OP_DROP\n+from binascii import hexlify, unhexlify\n+import cStringIO\n+import time\n+import itertools\n+\n+'''\n+This test is meant to exercise BIP forks\n+Connect to a single node.\n+regtest lock-in with 108/144 block signalling\n+activation after a further 144 blocks\n+mine 2 block and save coinbases for later use\n+mine 141 blocks to transition from DEFINED to STARTED\n+mine 100 blocks signalling readiness and 44 not in order to fail to change state this period\n+mine 108 blocks signalling readiness and 36 blocks not signalling readiness (STARTED->LOCKED_IN)\n+mine a further 143 blocks (LOCKED_IN)\n+test that enforcement has not triggered (which triggers ACTIVE)\n+test that enforcement has triggered\n+'''\n+\n+\n+\n+class BIP9SoftForksTest(ComparisonTestFramework):\n+\n+    def __init__(self):\n+        self.num_nodes = 1\n+\n+    def setup_network(self):\n+        self.nodes = start_nodes(1, self.options.tmpdir,\n+                                 extra_args=[['-debug', '-whitelist=127.0.0.1']],\n+                                 binary=[self.options.testbinary])\n+\n+    def run_test(self):\n+        self.test = TestManager(self, self.options.tmpdir)\n+        self.test.add_all_connections(self.nodes)\n+        NetworkThread().start() # Start up network handling in another thread\n+        self.test.run()\n+\n+    def create_transaction(self, node, coinbase, to_address, amount):\n+        from_txid = node.getblock(coinbase)['tx'][0]\n+        inputs = [{ \"txid\" : from_txid, \"vout\" : 0}]\n+        outputs = { to_address : amount }\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+        tx = CTransaction()\n+        f = cStringIO.StringIO(unhexlify(rawtx))\n+        tx.deserialize(f)\n+        tx.nVersion = 2\n+        return tx\n+\n+    def sign_transaction(self, node, tx):\n+        signresult = node.signrawtransaction(hexlify(tx.serialize()))\n+        tx = CTransaction()\n+        f = cStringIO.StringIO(unhexlify(signresult['hex']))\n+        tx.deserialize(f)\n+        return tx\n+\n+    def generate_blocks(self, number, version, test_blocks = []):\n+        for i in xrange(number):\n+            block = create_block(self.tip, create_coinbase(self.height), self.last_block_time + 1)\n+            block.nVersion = version\n+            block.rehash()\n+            block.solve()\n+            test_blocks.append([block, True])\n+            self.last_block_time += 1\n+            self.tip = block.sha256\n+            self.height += 1\n+        return test_blocks\n+\n+    def get_bip9_status(self, key):\n+        info = self.nodes[0].getblockchaininfo()\n+        for row in info['bip9_softforks']:\n+            if row['id'] == key:\n+                return row\n+        raise IndexError ('key:\"%s\" not found' % key)\n+\n+\n+    def test_BIP(self, bipName, activated_version, invalidate, invalidatePostSignature):\n+        # generate some coins for later\n+        self.coinbase_blocks = self.nodes[0].generate(2)\n+        self.height = 3  # height of the next block to build\n+        self.tip = int (\"0x\" + self.nodes[0].getbestblockhash() + \"L\", 0)\n+        self.nodeaddress = self.nodes[0].getnewaddress()\n+        self.last_block_time = time.time()\n+\n+        assert_equal(self.get_bip9_status(bipName)['status'], 'defined')\n+\n+        # Test 1\n+        # Advance from DEFINED to STARTED\n+        test_blocks = self.generate_blocks(141, 4)\n+        yield TestInstance(test_blocks, sync_every_block=False)\n+\n+        assert_equal(self.get_bip9_status(bipName)['status'], 'started')\n+\n+        # Test 2\n+        # Fail to achieve LOCKED_IN 100 out of 144 signal bit 1\n+        # using a variety of bits to simulate multiple parallel softforks\n+        test_blocks = self.generate_blocks(50, activated_version) # 0x20000001 (signalling ready)\n+        test_blocks = self.generate_blocks(20, 4, test_blocks) # 0x00000004 (signalling not)\n+        test_blocks = self.generate_blocks(50, activated_version, test_blocks) # 0x20000101 (signalling ready)\n+        test_blocks = self.generate_blocks(24, 4, test_blocks) # 0x20010000 (signalling not)\n+        yield TestInstance(test_blocks, sync_every_block=False)\n+\n+        assert_equal(self.get_bip9_status(bipName)['status'], 'started')\n+\n+        # Test 3\n+        # 108 out of 144 signal bit 1 to achieve LOCKED_IN\n+        # using a variety of bits to simulate multiple parallel softforks\n+        test_blocks = self.generate_blocks(58, activated_version) # 0x20000001 (signalling ready)\n+        test_blocks = self.generate_blocks(26, 4, test_blocks) # 0x00000004 (signalling not)\n+        test_blocks = self.generate_blocks(50, activated_version, test_blocks) # 0x20000101 (signalling ready)\n+        test_blocks = self.generate_blocks(10, 4, test_blocks) # 0x20010000 (signalling not)\n+        yield TestInstance(test_blocks, sync_every_block=False)\n+\n+        assert_equal(self.get_bip9_status(bipName)['status'], 'locked_in')\n+\n+        # Test 4\n+        # 143 more version 536870913 blocks (waiting period-1)\n+        test_blocks = self.generate_blocks(143, 4)\n+        yield TestInstance(test_blocks, sync_every_block=False)\n+\n+        assert_equal(self.get_bip9_status(bipName)['status'], 'locked_in')\n+\n+        # Test 5\n+        # Check that the new rule is enforced\n+        spendtx = self.create_transaction(self.nodes[0],\n+                self.coinbase_blocks[0], self.nodeaddress, 1.0)\n+        invalidate(spendtx)\n+        spendtx = self.sign_transaction(self.nodes[0], spendtx)\n+        spendtx.rehash()\n+        invalidatePostSignature(spendtx)\n+        spendtx.rehash()\n+        block = create_block(self.tip, create_coinbase(self.height), self.last_block_time + 1)\n+        block.nVersion = activated_version\n+        block.vtx.append(spendtx)\n+        block.hashMerkleRoot = block.calc_merkle_root()\n+        block.rehash()\n+        block.solve()\n+\n+        self.last_block_time += 1\n+        self.tip = block.sha256\n+        self.height += 1\n+        yield TestInstance([[block, True]])\n+\n+        assert_equal(self.get_bip9_status(bipName)['status'], 'active')\n+\n+        # Test 6\n+        # Check that the new sequence lock rules are enforced\n+        spendtx = self.create_transaction(self.nodes[0],\n+                self.coinbase_blocks[1], self.nodeaddress, 1.0)\n+        invalidate(spendtx)\n+        spendtx = self.sign_transaction(self.nodes[0], spendtx)\n+        spendtx.rehash()\n+        invalidatePostSignature(spendtx)\n+        spendtx.rehash()\n+\n+        block = create_block(self.tip, create_coinbase(self.height), self.last_block_time + 1)\n+        block.nVersion = 5\n+        block.vtx.append(spendtx)\n+        block.hashMerkleRoot = block.calc_merkle_root()\n+        block.rehash()\n+        block.solve()\n+        self.last_block_time += 1\n+        yield TestInstance([[block, False]])\n+\n+        # Restart all\n+        stop_nodes(self.nodes)\n+        wait_bitcoinds()\n+        shutil.rmtree(self.options.tmpdir)\n+        self.setup_chain()\n+        self.setup_network()\n+        self.test.clear_all_connections()\n+        self.test.add_all_connections(self.nodes)\n+        NetworkThread().start() # Start up network handling in another thread\n+\n+\n+\n+    def get_tests(self):\n+        for test in itertools.chain(\n+                self.test_BIP('csv', 536870913, self.sequence_lock_invalidate, self.donothing),\n+                self.test_BIP('csv', 536870913, self.mtp_invalidate, self.donothing),\n+                self.test_BIP('csv', 536870913, self.donothing, self.csv_invalidate)\n+        ):\n+            yield test\n+\n+    def donothing(self, tx):\n+        return\n+\n+    def csv_invalidate(self, tx):\n+        '''Modify the signature in vin 0 of the tx to fail CSV\n+        Prepends -1 CSV DROP in the scriptSig itself.\n+        '''\n+        tx.vin[0].scriptSig = CScript([OP_1NEGATE, OP_NOP3, OP_DROP] +\n+                                      list(CScript(tx.vin[0].scriptSig)))\n+\n+    def sequence_lock_invalidate(self, tx):\n+        '''Modify the nSequence to make it fails once sequence lock rule is activated (high timespan)\n+        '''\n+        tx.vin[0].nSequence = 0x00FFFFFF\n+        tx.nLockTime = 0\n+\n+    def mtp_invalidate(self, tx):\n+        '''Modify the nLockTime to make it fails once MTP rule is activated\n+        '''\n+        # Disable Sequence lock, Activate nLockTime\n+        tx.vin[0].nSequence = 0x90FFFFFF\n+        tx.nLockTime = self.last_block_time\n+\n+if __name__ == '__main__':\n+    BIP9SoftForksTest().main()\n\\ No newline at end of file"
      },
      {
        "sha": "d8fcd807f6266465e9ec6c563260df6d98c24789",
        "filename": "qa/rpc-tests/test_framework/comptool.py",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71527a0f31ae67edad0a7fcda59c75a6ce5666ca/qa/rpc-tests/test_framework/comptool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71527a0f31ae67edad0a7fcda59c75a6ce5666ca/qa/rpc-tests/test_framework/comptool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/comptool.py?ref=71527a0f31ae67edad0a7fcda59c75a6ce5666ca",
        "patch": "@@ -193,6 +193,10 @@ def add_all_connections(self, nodes):\n             # associated NodeConn\n             test_node.add_connection(self.connections[-1])\n \n+    def clear_all_connections(self):\n+        self.connections    = []\n+        self.test_nodes     = []\n+\n     def wait_for_disconnections(self):\n         def disconnected():\n             return all(node.closed for node in self.test_nodes)"
      }
    ]
  }
]