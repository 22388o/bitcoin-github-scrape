practicalswift,2018-10-02T11:23:48Z,"I've tested this linter over the set of all open mergeable pull requests.\n\nA total of 196 pull requests were tested:\n* One true positive was found (and reported!)\n* Zero false positives were found\n\nA precision score of 100 percent :-)",https://github.com/bitcoin/bitcoin/pull/14365#issuecomment-426238217,426238217,
practicalswift,2018-10-02T13:44:44Z,@promag Thanks for reviewing. Good idea! Done.,https://github.com/bitcoin/bitcoin/pull/14365#issuecomment-426279100,426279100,
practicalswift,2018-10-03T08:12:24Z,@MarcoFalke Updated. Please re-review :-),https://github.com/bitcoin/bitcoin/pull/14365#issuecomment-426549134,426549134,
promag,2018-10-04T18:54:51Z,"Should explicitly set `--min-confidence`? Currently it's [60](\nhttps://github.com/jendrikseipp/vulture/blob/62c379de033bfdb690d0ecc835b64fc8c3dddc6c/vulture/core.py#L43).",https://github.com/bitcoin/bitcoin/pull/14365#issuecomment-427131119,427131119,
practicalswift,2018-10-04T20:56:59Z,@promag Judging from my testing of `vulture` over the set of the 196 mergeable open PR:s the default of 60 seems reasonable. Should we keep the default for now?,https://github.com/bitcoin/bitcoin/pull/14365#issuecomment-427166515,427166515,
promag,2018-10-04T21:07:05Z,"My suggestion is to add ` --min-confidence 60`.\n\nAlso, from the vulture documentation:\n\n> We recommend using whitelists instead of --ignore-names or --ignore-decorators whenever possible\n\nWDYT?",https://github.com/bitcoin/bitcoin/pull/14365#issuecomment-427169397,427169397,
practicalswift,2018-10-04T21:52:55Z,"@promag I've not added an explicit `--min-confidence 60`.\n\nRegarding the white-list method: I'm afraid a whitelist replicating the current wildcard based method would be quite long. And perhaps burdensome to keep updated.\n\nThe trade-off looks like this:\n\n```\n    --ignore-names ""argtypes,connection_lost,connection_made,converter,data_received,\\n        daemon,errcheck,msg_generic,on",https://github.com/bitcoin/bitcoin/pull/14365#issuecomment-427181939,427181939,
promag,2018-10-04T21:57:35Z,"> @promag I've not added an explicit `--min-confidence 60`.\n\nYou have.",https://github.com/bitcoin/bitcoin/pull/14365#issuecomment-427183041,427183041,
practicalswift,2018-10-05T07:14:35Z,"> > @promag I've not added an explicit `--min-confidence 60`.\n> \n> You have.\n\nOh, ""not"" should have been ""now"" :-D",https://github.com/bitcoin/bitcoin/pull/14365#issuecomment-427268800,427268800,
ken2812221,2018-10-06T16:44:50Z,utACK c422cf2b50b08b489172de28f69083784c35a455,https://github.com/bitcoin/bitcoin/pull/14365#issuecomment-427588455,427588455,
jb55,2018-10-08T11:19:03Z,utACK c422cf2b50b08b489172de28f69083784c35a455\n,https://github.com/bitcoin/bitcoin/pull/14365#issuecomment-427797615,427797615,
conscott,2018-10-12T15:38:43Z,utACk c422cf2b50b08b489172de28f69083784c35a455 - vulture is great! ,https://github.com/bitcoin/bitcoin/pull/14365#issuecomment-429368479,429368479,
practicalswift,2018-10-16T12:19:34Z,"Added a commit which pins the `vulture` version to avoid the possibility of having the build broken if a new `vulture` version being released.\n\nPlease re-review :-)",https://github.com/bitcoin/bitcoin/pull/14365#issuecomment-430215471,430215471,
practicalswift,2018-10-21T00:11:55Z,Rebased! :-),https://github.com/bitcoin/bitcoin/pull/14365#issuecomment-431627838,431627838,
DrahtBot,2018-10-27T19:31:08Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#14505](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/14505.html) (Make all single parameter constructors expl",https://github.com/bitcoin/bitcoin/pull/14365#issuecomment-433648808,433648808,
MarcoFalke,2018-11-07T17:22:26Z,Going to merge this since it had 3 utACKs and is probably not worth to wait for all re-ACKs.,https://github.com/bitcoin/bitcoin/pull/14365#issuecomment-436705637,436705637,
MarcoFalke,2018-10-03T04:58:38Z,This hunk probably needs testing. Mind to submit as separate pull request?,https://github.com/bitcoin/bitcoin/pull/14365#discussion_r222181723,222181723,test/functional/test_framework/test_framework.py
jb55,2018-10-03T18:05:05Z,"even though this is unused, is it really a good idea to remove code that initializes default values?",https://github.com/bitcoin/bitcoin/pull/14365#discussion_r222410452,222410452,test/functional/test_framework/messages.py
practicalswift,2018-10-04T07:54:02Z,@jb55 Do you mean the fact that `fBad` was still in `__slots__`? I've now removed it also from `__slots__`. `fBad` is gone 100 %. Updated version looks good? :-),https://github.com/bitcoin/bitcoin/pull/14365#discussion_r222569130,222569130,test/functional/test_framework/messages.py
jb55,2018-10-04T16:28:50Z,"perhaps, 3a4449e9ad945313c6637283757de8d539cf790f states:\n\n> Classes use __slots__ to ensure extraneous attributes aren't accidentally added by tests, compromising their intended effect.\n\nthis seems to be reversing the original intent of that commit. /cc @JustinTArthur ?",https://github.com/bitcoin/bitcoin/pull/14365#discussion_r222740439,222740439,test/functional/test_framework/messages.py
JustinTArthur,2018-10-04T17:10:30Z,"If `fBad` isn't going to be used, removing it won't go against the intentions of the slots work, which is just there to protect test developers from making tests that don't do what the developers think they do.\n\nI just want to make sure the removal doesn't break the intentions of those message module classes, which provide test developers with Python equivalents of the common Core data objects",https://github.com/bitcoin/bitcoin/pull/14365#discussion_r222753957,222753957,test/functional/test_framework/messages.py
promag,2018-10-04T18:51:57Z,+1 remove `fBad`.,https://github.com/bitcoin/bitcoin/pull/14365#discussion_r222787837,222787837,test/functional/test_framework/messages.py
jb55,2018-10-04T20:49:54Z,"+0 sounds good to me.\n\nnit: it looks like the fBad slot removal was squashed into the wrong commit.",https://github.com/bitcoin/bitcoin/pull/14365#discussion_r222822424,222822424,test/functional/test_framework/messages.py
practicalswift,2018-10-04T20:54:51Z,@jb55 Thanks for letting me know about the squash mixup. Now fixed :-),https://github.com/bitcoin/bitcoin/pull/14365#discussion_r222823824,222823824,test/functional/test_framework/messages.py
MarcoFalke,2018-10-04T21:56:07Z,why is `skip_if_no_cli` ignored?,https://github.com/bitcoin/bitcoin/pull/14365#discussion_r222839757,222839757,test/lint/lint-python-dead-code.sh
practicalswift,2018-10-05T07:14:53Z,Nice catch! Now removed!,https://github.com/bitcoin/bitcoin/pull/14365#discussion_r222911451,222911451,test/lint/lint-python-dead-code.sh
jnewbery,2018-10-08T05:24:49Z,"I think it's fine for `fBad` to be removed. These classes are for sending and receiving serialized objects to bitcoind. In bitcoind, the serialization method for `CPartialMerkleTree` does not serialize the `fBad` value - it's only used internally in the class. I think it's fine to therefore not have `fBad` in our python `CPartialMerkleTree` implementation.",https://github.com/bitcoin/bitcoin/pull/14365#discussion_r223249957,223249957,test/functional/test_framework/messages.py
MarcoFalke,2018-11-07T16:56:02Z,"This is a library (ECC secp256k1 OpenSSL wrapper), so removing the wrapper functions might break code that is not in this commit. (Maybe a different branch or repo, and it will break on merge or rebase)",https://github.com/bitcoin/bitcoin/pull/14365#discussion_r231589697,231589697,test/functional/test_framework/key.py
practicalswift,2018-11-07T17:10:32Z,Good point! Updated. No longer removing these functions. Please re-review :-),https://github.com/bitcoin/bitcoin/pull/14365#discussion_r231595387,231595387,test/functional/test_framework/key.py
