[
  {
    "sha": "11d6459b6e101f05f36e13799c400bef82d2fc21",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMWQ2NDU5YjZlMTAxZjA1ZjM2ZTEzNzk5YzQwMGJlZjgyZDJmYzIx",
    "commit": {
      "author": {
        "name": "t-bast",
        "email": "bastuc@hotmail.fr",
        "date": "2021-03-10T14:37:18Z"
      },
      "committer": {
        "name": "t-bast",
        "email": "bastuc@hotmail.fr",
        "date": "2021-04-30T16:53:47Z"
      },
      "message": "rpc: include_unsafe option for fundrawtransaction\n\nAllow RPC users to opt-in to unsafe inputs when funding a raw transaction.\n\nApplications that need to manage a complex RBF flow (such as lightning\nnodes using anchor outputs) are very limited if they can only use safe inputs.\n\nFixes #21299",
      "tree": {
        "sha": "e467b32e008eca8e9978766ab1d783059de3f35f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e467b32e008eca8e9978766ab1d783059de3f35f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/11d6459b6e101f05f36e13799c400bef82d2fc21",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEWmvUsbjhNg6Tzyflvl00KtNowToFAmCMNhsACgkQvl00KtNo\nwTrp+A//b5nkHteyniWv8Txikj0URaeu6XsktRgHPSEJTMBHELxiLg1TdbwFJ0eO\n+3YagWiKr0VftjORLrluwcTdLw+uphSwwOcoL6MD3SlqzpzbNNVQzEuzb5Vk7SLs\nhg3+nU9QKDk++Vr3TaVK6sDTruh17ZeBUvTOK3aiOGJNRlMxnEqDulEPYiW3tER6\nD169fMzLNbiYCvYdy5Qah1uQ9lvjrSPLsIzz9neJVrR5Vca9zLjmnhbAb2BYUO+I\nqSZ4GDEpTAGnFPvORnecarQnSaylDd+/QZhhJ0zUOT8zn7oRIcdDJSsvAMh1Ku3n\nD9cpLFWmlEHaetqKFEkEQzFrMo8CuW/q736GApEvVHnDZz/KpERAnZ68E2eaG+W2\n2QrOPK4Tw0JTOHwP/pezTmdbbFIy4GRpmY6FOu28zF+8CHmv7/2CyBh18NAg419o\nFeO6+p8QAqY+1J41HpeoHlAUoszc0rvwmdz00Vomrh1/3VtRQYs/YyLcBG6RyKf5\n19dT5B1oGkc7i8d/ASMuFbfT+Hl65fmfUUddVp3IP2XlK+wc/QTHa1ZalTDhDROV\nJeNKEPx698fDhUiPTZ8n4JRxYDjjrNdDA04Xi7xzR+y9rfmHBq3alaylybtSFZlW\nXW8UWdGvNwQGQAG3qmm8dzRWzm9ti0N1NJ2f8EfxlJ01+zjAOh4=\n=UWhf\n-----END PGP SIGNATURE-----",
        "payload": "tree e467b32e008eca8e9978766ab1d783059de3f35f\nparent 480bf01c295527bd212964efe4df3bb886db5654\nauthor t-bast <bastuc@hotmail.fr> 1615387038 +0100\ncommitter t-bast <bastuc@hotmail.fr> 1619801627 +0200\n\nrpc: include_unsafe option for fundrawtransaction\n\nAllow RPC users to opt-in to unsafe inputs when funding a raw transaction.\n\nApplications that need to manage a complex RBF flow (such as lightning\nnodes using anchor outputs) are very limited if they can only use safe inputs.\n\nFixes #21299\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11d6459b6e101f05f36e13799c400bef82d2fc21",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/11d6459b6e101f05f36e13799c400bef82d2fc21",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11d6459b6e101f05f36e13799c400bef82d2fc21/comments",
    "author": {
      "login": "t-bast",
      "id": 31281497,
      "node_id": "MDQ6VXNlcjMxMjgxNDk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/t-bast",
      "html_url": "https://github.com/t-bast",
      "followers_url": "https://api.github.com/users/t-bast/followers",
      "following_url": "https://api.github.com/users/t-bast/following{/other_user}",
      "gists_url": "https://api.github.com/users/t-bast/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/t-bast/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
      "organizations_url": "https://api.github.com/users/t-bast/orgs",
      "repos_url": "https://api.github.com/users/t-bast/repos",
      "events_url": "https://api.github.com/users/t-bast/events{/privacy}",
      "received_events_url": "https://api.github.com/users/t-bast/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "t-bast",
      "id": 31281497,
      "node_id": "MDQ6VXNlcjMxMjgxNDk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/t-bast",
      "html_url": "https://github.com/t-bast",
      "followers_url": "https://api.github.com/users/t-bast/followers",
      "following_url": "https://api.github.com/users/t-bast/following{/other_user}",
      "gists_url": "https://api.github.com/users/t-bast/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/t-bast/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
      "organizations_url": "https://api.github.com/users/t-bast/orgs",
      "repos_url": "https://api.github.com/users/t-bast/repos",
      "events_url": "https://api.github.com/users/t-bast/events{/privacy}",
      "received_events_url": "https://api.github.com/users/t-bast/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "480bf01c295527bd212964efe4df3bb886db5654",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/480bf01c295527bd212964efe4df3bb886db5654",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/480bf01c295527bd212964efe4df3bb886db5654"
      }
    ],
    "stats": {
      "total": 107,
      "additions": 97,
      "deletions": 10
    },
    "files": [
      {
        "sha": "5c70bc91db6c722d4427e3eb6ba6d32e9ca0a79b",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11d6459b6e101f05f36e13799c400bef82d2fc21/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11d6459b6e101f05f36e13799c400bef82d2fc21/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=11d6459b6e101f05f36e13799c400bef82d2fc21",
        "patch": "@@ -152,6 +152,11 @@ Wallet\n - The `bumpfee` RPC is not available with wallets that have private keys\n   disabled. `psbtbumpfee` can be used instead. (#20891)\n \n+- The `fundrawtransaction`, `send` and `walletcreatefundedpsbt` RPCs now support an `include_unsafe` option\n+  that when `true` allows using unsafe inputs to fund the transaction.\n+  Note that the resulting transaction may become invalid if one of the unsafe inputs disappears.\n+  If that happens, the transaction must be funded with different inputs and republished. (#21359)\n+\n GUI changes\n -----------\n "
      },
      {
        "sha": "85cbec76b74c25f9ed94a2518144713a915e5aca",
        "filename": "src/wallet/coincontrol.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11d6459b6e101f05f36e13799c400bef82d2fc21/src/wallet/coincontrol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11d6459b6e101f05f36e13799c400bef82d2fc21/src/wallet/coincontrol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coincontrol.h?ref=11d6459b6e101f05f36e13799c400bef82d2fc21",
        "patch": "@@ -29,6 +29,8 @@ class CCoinControl\n     std::optional<OutputType> m_change_type;\n     //! If false, only selected inputs are used\n     bool m_add_inputs = true;\n+    //! If false, only safe inputs will be used\n+    bool m_include_unsafe_inputs = false;\n     //! If false, allows unselected inputs, but requires all selected inputs be used\n     bool fAllowOtherInputs = false;\n     //! Includes watch only addresses which are solvable"
      },
      {
        "sha": "5645e6db46040c2dcb248ccf4eec1f2e8df30273",
        "filename": "src/wallet/coinselection.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11d6459b6e101f05f36e13799c400bef82d2fc21/src/wallet/coinselection.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11d6459b6e101f05f36e13799c400bef82d2fc21/src/wallet/coinselection.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coinselection.h?ref=11d6459b6e101f05f36e13799c400bef82d2fc21",
        "patch": "@@ -65,8 +65,7 @@ struct CoinEligibilityFilter\n     /** Minimum number of confirmations for outputs that we sent to ourselves.\n      * We may use unconfirmed UTXOs sent from ourselves, e.g. change outputs. */\n     const int conf_mine;\n-    /** Minimum number of confirmations for outputs received from a different\n-     * wallet. We never spend unconfirmed foreign outputs as we cannot rely on these funds yet. */\n+    /** Minimum number of confirmations for outputs received from a different wallet. */\n     const int conf_theirs;\n     /** Maximum number of unconfirmed ancestors aggregated across all UTXOs in an OutputGroup. */\n     const uint64_t max_ancestors;"
      },
      {
        "sha": "49505faed314606914b2aab65fdbaa40dc34262a",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11d6459b6e101f05f36e13799c400bef82d2fc21/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11d6459b6e101f05f36e13799c400bef82d2fc21/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=11d6459b6e101f05f36e13799c400bef82d2fc21",
        "patch": "@@ -3075,6 +3075,7 @@ void FundTransaction(CWallet& wallet, CMutableTransaction& tx, CAmount& fee_out,\n         RPCTypeCheckObj(options,\n             {\n                 {\"add_inputs\", UniValueType(UniValue::VBOOL)},\n+                {\"include_unsafe\", UniValueType(UniValue::VBOOL)},\n                 {\"add_to_wallet\", UniValueType(UniValue::VBOOL)},\n                 {\"changeAddress\", UniValueType(UniValue::VSTR)},\n                 {\"change_address\", UniValueType(UniValue::VSTR)},\n@@ -3135,6 +3136,10 @@ void FundTransaction(CWallet& wallet, CMutableTransaction& tx, CAmount& fee_out,\n             lockUnspents = (options.exists(\"lock_unspents\") ? options[\"lock_unspents\"] : options[\"lockUnspents\"]).get_bool();\n         }\n \n+        if (options.exists(\"include_unsafe\")) {\n+            coinControl.m_include_unsafe_inputs = options[\"include_unsafe\"].get_bool();\n+        }\n+\n         if (options.exists(\"feeRate\")) {\n             if (options.exists(\"fee_rate\")) {\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot specify both fee_rate (\" + CURRENCY_ATOM + \"/vB) and feeRate (\" + CURRENCY_UNIT + \"/kvB)\");\n@@ -3205,6 +3210,9 @@ static RPCHelpMan fundrawtransaction()\n                     {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"for backward compatibility: passing in a true instead of an object will result in {\\\"includeWatching\\\":true}\",\n                         {\n                             {\"add_inputs\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"For a transaction with existing inputs, automatically include more if they are not enough.\"},\n+                            {\"include_unsafe\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Include inputs that are not safe to spend (unconfirmed transactions from outside keys and unconfirmed replacement transactions).\\n\"\n+                                                          \"Warning: the resulting transaction may become invalid if one of the unsafe inputs disappears.\\n\"\n+                                                          \"If that happens, you will need to fund the transaction with different inputs and republish it.\"},\n                             {\"changeAddress\", RPCArg::Type::STR, RPCArg::DefaultHint{\"pool address\"}, \"The bitcoin address to receive the change\"},\n                             {\"changePosition\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"random\"}, \"The index of the change output\"},\n                             {\"change_type\", RPCArg::Type::STR, RPCArg::DefaultHint{\"set by -changetype\"}, \"The output type to use. Only valid if changeAddress is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n@@ -4030,6 +4038,9 @@ static RPCHelpMan send()\n             {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n                 {\n                     {\"add_inputs\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"If inputs are specified, automatically include more if they are not enough.\"},\n+                    {\"include_unsafe\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Include inputs that are not safe to spend (unconfirmed transactions from outside keys and unconfirmed replacement transactions).\\n\"\n+                                                          \"Warning: the resulting transaction may become invalid if one of the unsafe inputs disappears.\\n\"\n+                                                          \"If that happens, you will need to fund the transaction with different inputs and republish it.\"},\n                     {\"add_to_wallet\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n                     {\"change_address\", RPCArg::Type::STR_HEX, RPCArg::DefaultHint{\"pool address\"}, \"The bitcoin address to receive the change\"},\n                     {\"change_position\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"random\"}, \"The index of the change output\"},\n@@ -4373,6 +4384,9 @@ static RPCHelpMan walletcreatefundedpsbt()\n                     {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n                         {\n                             {\"add_inputs\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"If inputs are specified, automatically include more if they are not enough.\"},\n+                            {\"include_unsafe\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Include inputs that are not safe to spend (unconfirmed transactions from outside keys and unconfirmed replacement transactions).\\n\"\n+                                                          \"Warning: the resulting transaction may become invalid if one of the unsafe inputs disappears.\\n\"\n+                                                          \"If that happens, you will need to fund the transaction with different inputs and republish it.\"},\n                             {\"changeAddress\", RPCArg::Type::STR_HEX, RPCArg::DefaultHint{\"pool address\"}, \"The bitcoin address to receive the change\"},\n                             {\"changePosition\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"random\"}, \"The index of the change output\"},\n                             {\"change_type\", RPCArg::Type::STR, RPCArg::DefaultHint{\"set by -changetype\"}, \"The output type to use. Only valid if changeAddress is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},"
      },
      {
        "sha": "d6c4f71f91c0216ed56b759a3de660324a487e35",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 3,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11d6459b6e101f05f36e13799c400bef82d2fc21/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11d6459b6e101f05f36e13799c400bef82d2fc21/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=11d6459b6e101f05f36e13799c400bef82d2fc21",
        "patch": "@@ -2516,8 +2516,7 @@ bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAm\n         if (SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(1, 1, 0), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) return true;\n \n         // Fall back to using zero confirmation change (but with as few ancestors in the mempool as\n-        // possible) if we cannot fund the transaction otherwise. We never spend unconfirmed\n-        // outputs received from other wallets.\n+        // possible) if we cannot fund the transaction otherwise.\n         if (m_spend_zero_conf_change) {\n             if (SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, 2), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) return true;\n             if (SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, std::min((size_t)4, max_ancestors/3), std::min((size_t)4, max_descendants/3)),\n@@ -2535,6 +2534,14 @@ bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAm\n                                    vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) {\n                 return true;\n             }\n+            // Try with unsafe inputs if they are allowed. This may spend unconfirmed outputs\n+            // received from other wallets.\n+            if (coin_control.m_include_unsafe_inputs\n+                && SelectCoinsMinConf(value_to_select,\n+                    CoinEligibilityFilter(0 /* conf_mine */, 0 /* conf_theirs */, max_ancestors-1, max_descendants-1, true /* include_partial_groups */),\n+                    vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) {\n+                return true;\n+            }\n             // Try with unlimited ancestors/descendants. The transaction will still need to meet\n             // mempool ancestor/descendant policy to be accepted to mempool and broadcasted, but\n             // OutputGroups use heuristics that may overestimate ancestor/descendant counts.\n@@ -2836,7 +2843,7 @@ bool CWallet::CreateTransactionInternal(\n         txNew.nLockTime = GetLocktimeForNewTransaction(chain(), GetLastBlockHash(), GetLastBlockHeight());\n         {\n             std::vector<COutput> vAvailableCoins;\n-            AvailableCoins(vAvailableCoins, true, &coin_control, 1, MAX_MONEY, MAX_MONEY, 0);\n+            AvailableCoins(vAvailableCoins, !coin_control.m_include_unsafe_inputs, &coin_control, 1, MAX_MONEY, MAX_MONEY, 0);\n             CoinSelectionParams coin_selection_params; // Parameters for coin selection, init with dummy\n             coin_selection_params.m_avoid_partial_spends = coin_control.m_avoid_partial_spends;\n "
      },
      {
        "sha": "a9ebe5741e51e7bcb6b8dac5631ea0716cea1a63",
        "filename": "test/functional/rpc_fundrawtransaction.py",
        "status": "modified",
        "additions": 35,
        "deletions": 0,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11d6459b6e101f05f36e13799c400bef82d2fc21/test/functional/rpc_fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11d6459b6e101f05f36e13799c400bef82d2fc21/test/functional/rpc_fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_fundrawtransaction.py?ref=11d6459b6e101f05f36e13799c400bef82d2fc21",
        "patch": "@@ -96,6 +96,7 @@ def run_test(self):\n         self.test_option_subtract_fee_from_outputs()\n         self.test_subtract_fee_with_presets()\n         self.test_transaction_too_large()\n+        self.test_include_unsafe()\n \n     def test_change_position(self):\n         \"\"\"Ensure setting changePosition in fundraw with an exact match is handled properly.\"\"\"\n@@ -928,6 +929,40 @@ def test_transaction_too_large(self):\n         self.nodes[0].generate(10)\n         assert_raises_rpc_error(-4, \"Transaction too large\", recipient.fundrawtransaction, rawtx)\n \n+    def test_include_unsafe(self):\n+        self.log.info(\"Test fundrawtxn with unsafe inputs\")\n+\n+        self.nodes[0].createwallet(\"unsafe\")\n+        wallet = self.nodes[0].get_wallet_rpc(\"unsafe\")\n+\n+        # We receive unconfirmed funds from external keys (unsafe outputs).\n+        addr = wallet.getnewaddress()\n+        txid1 = self.nodes[2].sendtoaddress(addr, 6)\n+        txid2 = self.nodes[2].sendtoaddress(addr, 4)\n+        self.sync_all()\n+        vout1 = find_vout_for_address(wallet, txid1, addr)\n+        vout2 = find_vout_for_address(wallet, txid2, addr)\n+\n+        # Unsafe inputs are ignored by default.\n+        rawtx = wallet.createrawtransaction([], [{self.nodes[2].getnewaddress(): 5}])\n+        assert_raises_rpc_error(-4, \"Insufficient funds\", wallet.fundrawtransaction, rawtx)\n+\n+        # But we can opt-in to use them for funding.\n+        fundedtx = wallet.fundrawtransaction(rawtx, {\"include_unsafe\": True})\n+        tx_dec = wallet.decoderawtransaction(fundedtx['hex'])\n+        assert any([txin['txid'] == txid1 and txin['vout'] == vout1 for txin in tx_dec['vin']])\n+        signedtx = wallet.signrawtransactionwithwallet(fundedtx['hex'])\n+        wallet.sendrawtransaction(signedtx['hex'])\n+\n+        # And we can also use them once they're confirmed.\n+        self.nodes[0].generate(1)\n+        rawtx = wallet.createrawtransaction([], [{self.nodes[2].getnewaddress(): 3}])\n+        fundedtx = wallet.fundrawtransaction(rawtx, {\"include_unsafe\": True})\n+        tx_dec = wallet.decoderawtransaction(fundedtx['hex'])\n+        assert any([txin['txid'] == txid2 and txin['vout'] == vout2 for txin in tx_dec['vin']])\n+        signedtx = wallet.signrawtransactionwithwallet(fundedtx['hex'])\n+        wallet.sendrawtransaction(signedtx['hex'])\n+\n \n if __name__ == '__main__':\n     RawTransactionsTest().main()"
      },
      {
        "sha": "e811628a5d1f826c66642a7d858943e408231a55",
        "filename": "test/functional/rpc_psbt.py",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11d6459b6e101f05f36e13799c400bef82d2fc21/test/functional/rpc_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11d6459b6e101f05f36e13799c400bef82d2fc21/test/functional/rpc_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_psbt.py?ref=11d6459b6e101f05f36e13799c400bef82d2fc21",
        "patch": "@@ -394,6 +394,14 @@ def run_test(self):\n         # We don't care about the decode result, but decoding must succeed.\n         self.nodes[0].decodepsbt(double_processed_psbt[\"psbt\"])\n \n+        # Make sure unsafe inputs are included if specified\n+        self.nodes[2].createwallet(wallet_name=\"unsafe\")\n+        wunsafe = self.nodes[2].get_wallet_rpc(\"unsafe\")\n+        self.nodes[0].sendtoaddress(wunsafe.getnewaddress(), 2)\n+        self.sync_mempools()\n+        assert_raises_rpc_error(-4, \"Insufficient funds\", wunsafe.walletcreatefundedpsbt, [], [{self.nodes[0].getnewaddress(): 1}])\n+        wunsafe.walletcreatefundedpsbt([], [{self.nodes[0].getnewaddress(): 1}], 0, {\"include_unsafe\": True})\n+\n         # BIP 174 Test Vectors\n \n         # Check that unknown values are just passed through"
      },
      {
        "sha": "44a17ef6505985906e423a0c044f4dbfe4fca10f",
        "filename": "test/functional/wallet_send.py",
        "status": "modified",
        "additions": 22,
        "deletions": 5,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11d6459b6e101f05f36e13799c400bef82d2fc21/test/functional/wallet_send.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11d6459b6e101f05f36e13799c400bef82d2fc21/test/functional/wallet_send.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_send.py?ref=11d6459b6e101f05f36e13799c400bef82d2fc21",
        "patch": "@@ -33,12 +33,15 @@ def skip_test_if_missing_module(self):\n     def test_send(self, from_wallet, to_wallet=None, amount=None, data=None,\n                   arg_conf_target=None, arg_estimate_mode=None, arg_fee_rate=None,\n                   conf_target=None, estimate_mode=None, fee_rate=None, add_to_wallet=None, psbt=None,\n-                  inputs=None, add_inputs=None, change_address=None, change_position=None, change_type=None,\n+                  inputs=None, add_inputs=None, include_unsafe=None, change_address=None, change_position=None, change_type=None,\n                   include_watching=None, locktime=None, lock_unspents=None, replaceable=None, subtract_fee_from_outputs=None,\n                   expect_error=None):\n         assert (amount is None) != (data is None)\n \n-        from_balance_before = from_wallet.getbalance()\n+        from_balance_before = from_wallet.getbalances()[\"mine\"][\"trusted\"]\n+        if include_unsafe:\n+            from_balance_before += from_wallet.getbalances()[\"mine\"][\"untrusted_pending\"]\n+\n         if to_wallet is None:\n             assert amount is None\n         else:\n@@ -71,6 +74,8 @@ def test_send(self, from_wallet, to_wallet=None, amount=None, data=None,\n             options[\"inputs\"] = inputs\n         if add_inputs is not None:\n             options[\"add_inputs\"] = add_inputs\n+        if include_unsafe is not None:\n+            options[\"include_unsafe\"] = include_unsafe\n         if change_address is not None:\n             options[\"change_address\"] = change_address\n         if change_position is not None:\n@@ -133,6 +138,10 @@ def test_send(self, from_wallet, to_wallet=None, amount=None, data=None,\n             assert not \"txid\" in res\n             assert \"psbt\" in res\n \n+        from_balance = from_wallet.getbalances()[\"mine\"][\"trusted\"]\n+        if include_unsafe:\n+            from_balance += from_wallet.getbalances()[\"mine\"][\"untrusted_pending\"]\n+\n         if add_to_wallet and not include_watching:\n             # Ensure transaction exists in the wallet:\n             tx = from_wallet.gettransaction(res[\"txid\"])\n@@ -143,13 +152,13 @@ def test_send(self, from_wallet, to_wallet=None, amount=None, data=None,\n             assert tx\n             if amount:\n                 if subtract_fee_from_outputs:\n-                    assert_equal(from_balance_before - from_wallet.getbalance(), amount)\n+                    assert_equal(from_balance_before - from_balance, amount)\n                 else:\n-                    assert_greater_than(from_balance_before - from_wallet.getbalance(), amount)\n+                    assert_greater_than(from_balance_before - from_balance, amount)\n             else:\n                 assert next((out for out in tx[\"vout\"] if out[\"scriptPubKey\"][\"asm\"] == \"OP_RETURN 35\"), None)\n         else:\n-            assert_equal(from_balance_before, from_wallet.getbalance())\n+            assert_equal(from_balance_before, from_balance)\n \n         if to_wallet:\n             self.sync_mempools()\n@@ -440,6 +449,14 @@ def run_test(self):\n         self.log.info(\"Subtract fee from output\")\n         self.test_send(from_wallet=w0, to_wallet=w1, amount=1, subtract_fee_from_outputs=[0])\n \n+        self.log.info(\"Include unsafe inputs\")\n+        self.nodes[1].createwallet(wallet_name=\"w5\")\n+        w5 = self.nodes[1].get_wallet_rpc(\"w5\")\n+        self.test_send(from_wallet=w0, to_wallet=w5, amount=2)\n+        self.test_send(from_wallet=w5, to_wallet=w0, amount=1, expect_error=(-4, \"Insufficient funds\"))\n+        res = self.test_send(from_wallet=w5, to_wallet=w0, amount=1, include_unsafe=True)\n+        assert res[\"complete\"]\n+\n \n if __name__ == '__main__':\n     WalletSendTest().main()"
      }
    ]
  }
]