DrahtBot,2021-03-04 15:49:34,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #21207 (MOVEONLY: CWallet transaction code out of wallet.cpp/.h by ryanofsky)\n* #21206 (refactor: Make CWalletTx sync sta",https://github.com/bitcoin/bitcoin/pull/21359#issuecomment-790715972,790715972,
t-bast,2021-03-17 18:14:18,"@achow101 @luke-jr would you have some time to give a quick pass to this hopefully very simple PR and let me know if there's a concept ACK and it's worth pursuing? :pray: \n\nI know, Taproot is happening (is it?), I understand if you don't have much time available :smile: ",https://github.com/bitcoin/bitcoin/pull/21359#issuecomment-801302994,801302994,
achow101,2021-03-17 22:24:02,ACK 16076bb2a8517c6a8b101ad04e220ad3b3f71bcf,https://github.com/bitcoin/bitcoin/pull/21359#issuecomment-801481178,801481178,
t-bast,2021-03-25 11:03:50,"Is there something I can do to help this PR move forward?\n\nWe really need it to unblock anchor outputs in lightning (we can run a modified `bitcoind` with this patch applied for our own node, but we can't ask our users to run a non-release `bitcoind` version).",https://github.com/bitcoin/bitcoin/pull/21359#issuecomment-806557732,806557732,
renepickhardt,2021-03-29 08:36:23,"Looks good to me.\n\nCould there go anything other wrong than a transaction becoming invalid because an input disappeared? (this of course would not be really wrong) ",https://github.com/bitcoin/bitcoin/pull/21359#issuecomment-809187431,809187431,
t-bast,2021-03-29 08:59:12,"> Could there go anything other wrong than a transaction becoming invalid because an input disappeared?\n\nIt's a very good question, it's part of my ""unknown unknowns"" and why I'm curious to get feedback from more people here.\nIt seems to me that there isn't anything else, but there are many things I don't know so I wouldn't rely on my instincts only ¯\_(ツ)_/¯",https://github.com/bitcoin/bitcoin/pull/21359#issuecomment-809203584,809203584,
jonatack,2021-03-29 10:15:39,This would need a release note.,https://github.com/bitcoin/bitcoin/pull/21359#issuecomment-809259702,809259702,
t-bast,2021-03-30 09:58:07,"> This would need a release note.\n\nAdded in https://github.com/bitcoin/bitcoin/pull/21359/commits/c3eb1994c24167bedb114e34b53dc7cbeb9ff403, let me know if that's how it should be done.",https://github.com/bitcoin/bitcoin/pull/21359#issuecomment-810088058,810088058,
jonatack,2021-04-26 13:29:54,ACK 0709545365d045b24563b4683881f65a2b34afdd,https://github.com/bitcoin/bitcoin/pull/21359#issuecomment-826836728,826836728,
jonatack,2021-04-30 09:42:03,re-ACK 1b1dad3efbbdf86f5426bf9c43902f40cb9a06c0,https://github.com/bitcoin/bitcoin/pull/21359#issuecomment-829975137,829975137,
DrahtBot,2021-05-03 09:33:36,<!--4a62be1de6b64f3ed646cdc7932c8cf5-->\n🕵️ @harding has been requested to review this pull request as specified in the REVIEWERS file.,https://github.com/bitcoin/bitcoin/pull/21359#issuecomment-831142483,831142483,
laanwj,2021-05-10 14:01:30,Code review ACK 11d6459b6e101f05f36e13799c400bef82d2fc21,https://github.com/bitcoin/bitcoin/pull/21359#issuecomment-836738934,836738934,
luke-jr,2021-03-09 18:44:02,I suggest adding `includeUnsafe` into `CCoinControl` instead.,https://github.com/bitcoin/bitcoin/pull/21359#discussion_r590627297,590627297,src/wallet/wallet.cpp
t-bast,2021-03-09 18:56:28,"I completely agree, I mentioned that in the PR description. If there's a concept ACK, `CCoinControl` would be a good place to store that bool. Do you prefer `includeUnsafe` (more consistent with the RPC) or `fSafeOnly` (more consistent with the inner codebase)?",https://github.com/bitcoin/bitcoin/pull/21359#discussion_r590635836,590635836,src/wallet/wallet.cpp
t-bast,2021-03-10 14:37:50,Done in https://github.com/bitcoin/bitcoin/pull/21359/commits/0dc8808230160e2da2b2f5aa943f5a3bac7dcb60,https://github.com/bitcoin/bitcoin/pull/21359#discussion_r591575237,591575237,src/wallet/wallet.cpp
t-bast,2021-03-10 14:41:47,"We could remove the `fOnlySafe` argument to `AvailableCoins` now that this is provided by `coin_control`.\n\nThe only gotcha is that `AvailableCoins` can be called without a `coin_control`, but I checked the codebase and in all the places where that happens `fOnlySafe` is set to `true`, so we could set it inside `AvailableCoins` to `const bool only_safe = {coinControl ? !coinControl->m_include_u",https://github.com/bitcoin/bitcoin/pull/21359#discussion_r591578684,591578684,src/wallet/wallet.cpp
jonatack,2021-03-29 09:16:16,"As `FundTransaction()` has other callers like the `walletcreatefundedpsbt` and `send` RPCs, might be a good idea to have `test_include_unsafe` tests that guard against present/future regressions in `rpc_test_psbt.py` and `wallet_send.py`.",https://github.com/bitcoin/bitcoin/pull/21359#discussion_r603135834,603135834,test/functional/rpc_fundrawtransaction.py
jonatack,2021-03-29 09:20:39,"s/Beware/Be aware/ or s/Beware that/Warning:/\n",https://github.com/bitcoin/bitcoin/pull/21359#discussion_r603138827,603138827,src/wallet/rpcwallet.cpp
t-bast,2021-03-29 09:51:09,"Good idea, will do.",https://github.com/bitcoin/bitcoin/pull/21359#discussion_r603159097,603159097,test/functional/rpc_fundrawtransaction.py
t-bast,2021-03-30 09:57:20,Done in https://github.com/bitcoin/bitcoin/pull/21359/commits/c3eb1994c24167bedb114e34b53dc7cbeb9ff403,https://github.com/bitcoin/bitcoin/pull/21359#discussion_r603954612,603954612,src/wallet/rpcwallet.cpp
t-bast,2021-03-30 09:57:40,"Done in https://github.com/bitcoin/bitcoin/pull/21359/commits/c3eb1994c24167bedb114e34b53dc7cbeb9ff403\nI also added explicit support for these APIs, it makes more sense that way.",https://github.com/bitcoin/bitcoin/pull/21359#discussion_r603954890,603954890,test/functional/rpc_fundrawtransaction.py
jonatack,2021-03-30 13:42:21,"will review soon, the release note LGTM\n```suggestion\n            from_balance = from_wallet.getbalances()[""mine""][""trusted""]\n```\nas IIRC we are moving away from `getbalance` in favor of `getbalances`... so it's good that you have abstracted it out to this one place (edit: it's not just one place, but could make it one in a function)\n\nshould `from_balance` when `include_unsafe` is true",https://github.com/bitcoin/bitcoin/pull/21359#discussion_r604107952,604107952,test/functional/wallet_send.py
t-bast,2021-04-12 11:52:44,"I'm not sure that change should be done in this PR.\nIt may be worth sweeping all uses of `getbalance()` to replace them with `getbalances()[""mine""][""trusted""]` in a separate PR, don't you think?\nI volunteer to make that follow-up PR right after this one if that sounds good to you.",https://github.com/bitcoin/bitcoin/pull/21359#discussion_r611561495,611561495,test/functional/wallet_send.py
instagibbs,2021-04-19 06:07:08,"it's new code, if you don't mind conforming to the newer standard for new code makes any future PR to ""sweep"" it up smaller?",https://github.com/bitcoin/bitcoin/pull/21359#discussion_r615562749,615562749,test/functional/wallet_send.py
instagibbs,2021-04-19 06:08:30,"Might want to explain what is unsafe about them speifically, otherwise it seems to lead to the ""why are you allowing it"" question. ",https://github.com/bitcoin/bitcoin/pull/21359#discussion_r615563258,615563258,src/wallet/rpcwallet.cpp
t-bast,2021-04-19 08:35:17,"Fair enough, and this is quite simple, done in https://github.com/bitcoin/bitcoin/pull/21359/commits/1bb252669dc5e8feb41e4975d609108eb28c8667",https://github.com/bitcoin/bitcoin/pull/21359#discussion_r615649850,615649850,test/functional/wallet_send.py
t-bast,2021-04-19 08:36:10,"Makes sense, anything that can improve documentation is worth adding.\nI copied the explanation from the `safe` flag in https://github.com/bitcoin/bitcoin/pull/21359/commits/1bb252669dc5e8feb41e4975d609108eb28c8667, let me know if you think the wording should be updated to be clearer.",https://github.com/bitcoin/bitcoin/pull/21359#discussion_r615650417,615650417,src/wallet/rpcwallet.cpp
jonatack,2021-04-26 11:35:46,"style nit if you need to retouch (same on previous line)\n```suggestion\n        wunsafe.walletcreatefundedpsbt([], [{self.nodes[0].getnewaddress(): 1}], 0, {""include_unsafe"": True})\n```\n",https://github.com/bitcoin/bitcoin/pull/21359#discussion_r620213267,620213267,test/functional/rpc_psbt.py
jonatack,2021-04-26 11:42:50,"While this works for the purposes of the test, should `from_balance_before` always include ""trusted"":\n```python\n        from_balance_before = from_wallet.getbalances()[""mine""][""trusted""]\n        if include_unsafe:\n            from_balance_before += from_wallet.getbalances()[""mine""][""untrusted_pending""]\n```\n",https://github.com/bitcoin/bitcoin/pull/21359#discussion_r620217836,620217836,test/functional/wallet_send.py
jonatack,2021-04-26 11:43:38,"same here\n```python\n        from_balance = from_wallet.getbalances()[""mine""][""trusted""]\n        if include_unsafe:\n            from_balance += from_wallet.getbalances()[""mine""][""untrusted_pending""]\n```",https://github.com/bitcoin/bitcoin/pull/21359#discussion_r620218301,620218301,test/functional/wallet_send.py
t-bast,2021-04-26 12:54:23,"That makes more sense indeed, done in https://github.com/bitcoin/bitcoin/pull/21359/commits/0709545365d045b24563b4683881f65a2b34afdd",https://github.com/bitcoin/bitcoin/pull/21359#discussion_r620267575,620267575,test/functional/wallet_send.py
t-bast,2021-04-26 12:54:33,Done in https://github.com/bitcoin/bitcoin/pull/21359/commits/0709545365d045b24563b4683881f65a2b34afdd,https://github.com/bitcoin/bitcoin/pull/21359#discussion_r620267747,620267747,test/functional/wallet_send.py
t-bast,2021-04-26 12:55:41,"The rest of that file doesn't put a whitespace in that case, this is why I used this format to stay coherent across the file, but if you think it makes sense to fix I should change it everywhere in the file, right?",https://github.com/bitcoin/bitcoin/pull/21359#discussion_r620268625,620268625,test/functional/rpc_psbt.py
jonatack,2021-04-26 13:26:40,I wouldn't worry about it apart from the new code and even then it's a pico nit.,https://github.com/bitcoin/bitcoin/pull/21359#discussion_r620294628,620294628,test/functional/rpc_psbt.py
jonatack,2021-04-30 07:40:03,"nit, I think it's best to not indent arguments the same as the function they are a part of. Maybe something like\n```diff\n-            if (coin_control.m_include_unsafe_inputs && SelectCoinsMinConf(value_to_select,\n-                                                        CoinEligibilityFilter(0, 0, max_ancestors-1, max_descendants-1, true /* include_partial_groups */),\n-                    ",https://github.com/bitcoin/bitcoin/pull/21359#discussion_r623679159,623679159,src/wallet/wallet.cpp
t-bast,2021-04-30 08:16:54,Done in https://github.com/bitcoin/bitcoin/pull/21359/commits/2bf0b1e7ee28dbc06aebf832c0480d257dad7294,https://github.com/bitcoin/bitcoin/pull/21359#discussion_r623699569,623699569,src/wallet/wallet.cpp
t-bast,2021-04-30 08:17:09,Done in https://github.com/bitcoin/bitcoin/pull/21359/commits/2bf0b1e7ee28dbc06aebf832c0480d257dad7294,https://github.com/bitcoin/bitcoin/pull/21359#discussion_r623699746,623699746,test/functional/rpc_psbt.py
jonatack,2021-04-30 08:48:23,"linter appeasement time (sorry about that if it's from my suggestion)\n```suggestion\n            if (coin_control.m_include_unsafe_inputs\n```",https://github.com/bitcoin/bitcoin/pull/21359#discussion_r623718756,623718756,src/wallet/wallet.cpp
t-bast,2021-04-30 09:13:12,My bad! Fixed in https://github.com/bitcoin/bitcoin/pull/21359/commits/ce70f322ceb79fe8449d20967c810efcae4881f0,https://github.com/bitcoin/bitcoin/pull/21359#discussion_r623733654,623733654,src/wallet/wallet.cpp
ariard,2021-04-30 14:16:50,"Can you extend the test with a case where the unsafe input has been confirmed to observe that ""include_safe=True"" also consider confirmed inputs ?",https://github.com/bitcoin/bitcoin/pull/21359#discussion_r623912236,623912236,test/functional/rpc_fundrawtransaction.py
ariard,2021-04-30 14:21:32,"I think ""opt-in RBF"" is better than ""replacement"" to qualify transactions which may be evicted of the mempool due to bip 125 rules.",https://github.com/bitcoin/bitcoin/pull/21359#discussion_r623915716,623915716,src/wallet/rpcwallet.cpp
ariard,2021-04-30 14:58:13,"Have a look on `CoinEligibilityFilter`, it says ""We never spend of unconfirmed foreign outputs as we cannot rely on it on these funds yet"". I don't think it's true anymore ?\n\nFurther, maybe add in-line comments about `CoinEligibilityFilter` parameters ""/* conf_mine */ 0, /* conf_theirs */ 1"", good for readabilty",https://github.com/bitcoin/bitcoin/pull/21359#discussion_r623943839,623943839,src/wallet/wallet.cpp
ariard,2021-04-30 15:07:32,Did we already consider for spending replacement transactions from our wallets before this PR ? `isRBFOptIn`doesn't seem used in `FundTransaction` path. Unsafe inputs definition doesn't seem to be tied to replaceability only key externality ?,https://github.com/bitcoin/bitcoin/pull/21359#discussion_r623954742,623954742,src/wallet/rpcwallet.cpp
t-bast,2021-04-30 16:30:25,"It took the definition of `fSafe` here: https://github.com/bitcoin/bitcoin/blob/2b45cf0bcdb3d2c1de46899e30885c953b57b475/src/wallet/wallet.h#L595\nIs there consensus on updating this in every place where it's used?",https://github.com/bitcoin/bitcoin/pull/21359#discussion_r624009230,624009230,src/wallet/rpcwallet.cpp
t-bast,2021-04-30 16:54:12,Fixed in https://github.com/bitcoin/bitcoin/pull/21359/commits/11d6459b6e101f05f36e13799c400bef82d2fc21,https://github.com/bitcoin/bitcoin/pull/21359#discussion_r624023687,624023687,src/wallet/wallet.cpp
t-bast,2021-04-30 16:54:23,Done in https://github.com/bitcoin/bitcoin/pull/21359/commits/11d6459b6e101f05f36e13799c400bef82d2fc21,https://github.com/bitcoin/bitcoin/pull/21359#discussion_r624023780,624023780,test/functional/rpc_fundrawtransaction.py
t-bast,2021-04-30 16:58:56,"I'm not 100% I understand your comment. Are you saying that `FundTransaction` doesn't check `isRBFOptIn`, which means that the wallet may currently use unconfirmed outputs from replaceable txs if they're our own txs (which could be an issue because we could replace that tx and invalidate its children)?",https://github.com/bitcoin/bitcoin/pull/21359#discussion_r624026671,624026671,src/wallet/rpcwallet.cpp
