[
  {
    "sha": "ba7e17e073f833eccd4c7c111ae9058c3f123371",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYTdlMTdlMDczZjgzM2VjY2Q0YzdjMTExYWU5MDU4YzNmMTIzMzcx",
    "commit": {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-01-29T00:07:18Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-01-29T00:07:18Z"
      },
      "message": "rpc, test: document {previous,next}blockhash as optional\n\nAffects the following RPCs:\n- getblockheader\n- getblock\n\nAlso adds trivial tests on genesis block (should not contain\n\"previousblockhash\") and best block (should not contain\n\"nextblockhash\").",
      "tree": {
        "sha": "fb8ddb2af94c57cc08c9a937f4f4a9bbf03a9ff0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fb8ddb2af94c57cc08c9a937f4f4a9bbf03a9ff0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ba7e17e073f833eccd4c7c111ae9058c3f123371",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba7e17e073f833eccd4c7c111ae9058c3f123371",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ba7e17e073f833eccd4c7c111ae9058c3f123371",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba7e17e073f833eccd4c7c111ae9058c3f123371/comments",
    "author": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "32b191fb66e644c690c94cbfdae6ddbc754769d7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/32b191fb66e644c690c94cbfdae6ddbc754769d7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/32b191fb66e644c690c94cbfdae6ddbc754769d7"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 10,
      "deletions": 4
    },
    "files": [
      {
        "sha": "7296f5db055db5b7d49e91764a51a7d98b98ddf7",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ba7e17e073f833eccd4c7c111ae9058c3f123371/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ba7e17e073f833eccd4c7c111ae9058c3f123371/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=ba7e17e073f833eccd4c7c111ae9058c3f123371",
        "patch": "@@ -821,8 +821,8 @@ static RPCHelpMan getblockheader()\n                             {RPCResult::Type::NUM, \"difficulty\", \"The difficulty\"},\n                             {RPCResult::Type::STR_HEX, \"chainwork\", \"Expected number of hashes required to produce the current chain\"},\n                             {RPCResult::Type::NUM, \"nTx\", \"The number of transactions in the block\"},\n-                            {RPCResult::Type::STR_HEX, \"previousblockhash\", \"The hash of the previous block\"},\n-                            {RPCResult::Type::STR_HEX, \"nextblockhash\", \"The hash of the next block\"},\n+                            {RPCResult::Type::STR_HEX, \"previousblockhash\", /* optional */ true, \"The hash of the previous block (if available)\"},\n+                            {RPCResult::Type::STR_HEX, \"nextblockhash\", /* optional */ true, \"The hash of the next block (if available)\"},\n                         }},\n                     RPCResult{\"for verbose=false\",\n                         RPCResult::Type::STR_HEX, \"\", \"A string that is serialized, hex-encoded data for block 'hash'\"},\n@@ -929,8 +929,8 @@ static RPCHelpMan getblock()\n                     {RPCResult::Type::NUM, \"difficulty\", \"The difficulty\"},\n                     {RPCResult::Type::STR_HEX, \"chainwork\", \"Expected number of hashes required to produce the chain up to this block (in hex)\"},\n                     {RPCResult::Type::NUM, \"nTx\", \"The number of transactions in the block\"},\n-                    {RPCResult::Type::STR_HEX, \"previousblockhash\", \"The hash of the previous block\"},\n-                    {RPCResult::Type::STR_HEX, \"nextblockhash\", \"The hash of the next block\"},\n+                    {RPCResult::Type::STR_HEX, \"previousblockhash\", /* optional */ true, \"The hash of the previous block (if available)\"},\n+                    {RPCResult::Type::STR_HEX, \"nextblockhash\", /* optional */ true, \"The hash of the next block (if available)\"},\n                 }},\n                     RPCResult{\"for verbosity = 2\",\n                 RPCResult::Type::OBJ, \"\", \"\","
      },
      {
        "sha": "cbc1ce7037377b99c659b3430e34269f5bde06cb",
        "filename": "test/functional/rpc_blockchain.py",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ba7e17e073f833eccd4c7c111ae9058c3f123371/test/functional/rpc_blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ba7e17e073f833eccd4c7c111ae9058c3f123371/test/functional/rpc_blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_blockchain.py?ref=ba7e17e073f833eccd4c7c111ae9058c3f123371",
        "patch": "@@ -304,6 +304,9 @@ def _test_getblockheader(self):\n         header.calc_sha256()\n         assert_equal(header.hash, besthash)\n \n+        assert 'previousblockhash' not in node.getblockheader(node.getblockhash(0))\n+        assert 'nextblockhash' not in node.getblockheader(node.getbestblockhash())\n+\n     def _test_getdifficulty(self):\n         difficulty = self.nodes[0].getdifficulty()\n         # 1 hash in 2 should be valid, so difficulty should be 1/2**31\n@@ -408,6 +411,9 @@ def move_block_file(old, new):\n         # Restore chain state\n         move_block_file('rev_wrong', 'rev00000.dat')\n \n+        assert 'previousblockhash' not in node.getblock(node.getblockhash(0))\n+        assert 'nextblockhash' not in node.getblock(node.getbestblockhash())\n+\n \n if __name__ == '__main__':\n     BlockchainTest().main()"
      }
    ]
  }
]