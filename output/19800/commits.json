[
  {
    "sha": "fa39c62eb7f39e7d249b8d46c075c4e7a9aec684",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTM5YzYyZWI3ZjM5ZTdkMjQ5YjhkNDZjMDc1YzRlN2E5YWVjNjg0",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-08-25T09:54:13Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-08-25T12:27:25Z"
      },
      "message": "test: inline hashToHex",
      "tree": {
        "sha": "26e6887676f9b150ecd396a9fd7318a3c4d0edb7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/26e6887676f9b150ecd396a9fd7318a3c4d0edb7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa39c62eb7f39e7d249b8d46c075c4e7a9aec684",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUieRwwAsScZHL59hUm/36G1Xuam90ZqewBsbvg3NkLymjBek5sW25KK4bE9m6pa\nGvuDVZc9/mRPrKaJ5dkCVmaqkEWCSJ+hHPjvpcDlmkNexB894d/2yAfvetOAC4m7\neLeu1kQSpQtpz9Z6QW2kxgI3C+R8CgXXkt2aBXo/E2T96mqHg+LsmNothZdve2Kg\nefg/+gF0ce1uF1/VIsiCpJvDbYRLXv0UJ9OLVW5E49fx8DlxkP5fac9Z4N1F9dCh\n2VZtXMJvWgEYRCs0UU8+mcIESZg7iN+4TgwLXhDl8c3gsqKu/PN8nngcx+VHHjrJ\nPRfRoR3WkdpYfAUJdPCEDVU5i8hWCNS7m3vxp/+JybQYhFDSZuCW3x4op0FSDom1\neH9jZcESaFhUJKedC6wRb3/JfrwlF9cratg61E5GEuJLViO9g7VVE7SYuJ2/9nFm\npCpf0tXrJFyVxcaFEGgnCP66NAtspjs1J3jpB0YPl/FCRvzcRe5gbBotOIy7Rbjq\nM4ja8757\n=EBZ3\n-----END PGP SIGNATURE-----",
        "payload": "tree 26e6887676f9b150ecd396a9fd7318a3c4d0edb7\nparent 8e0f341779e1d2754432765ec09deb7488f5b093\nauthor MarcoFalke <falke.marco@gmail.com> 1598349253 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1598358445 +0200\n\ntest: inline hashToHex\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa39c62eb7f39e7d249b8d46c075c4e7a9aec684",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa39c62eb7f39e7d249b8d46c075c4e7a9aec684",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa39c62eb7f39e7d249b8d46c075c4e7a9aec684/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8e0f341779e1d2754432765ec09deb7488f5b093",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8e0f341779e1d2754432765ec09deb7488f5b093",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8e0f341779e1d2754432765ec09deb7488f5b093"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 1,
      "deletions": 5
    },
    "files": [
      {
        "sha": "fc77af2f1002f26e7af7ff323f7253f221008ff6",
        "filename": "test/functional/p2p_feefilter.py",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa39c62eb7f39e7d249b8d46c075c4e7a9aec684/test/functional/p2p_feefilter.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa39c62eb7f39e7d249b8d46c075c4e7a9aec684/test/functional/p2p_feefilter.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_feefilter.py?ref=fa39c62eb7f39e7d249b8d46c075c4e7a9aec684",
        "patch": "@@ -12,10 +12,6 @@\n from test_framework.util import assert_equal\n \n \n-def hashToHex(hash):\n-    return format(hash, '064x')\n-\n-\n class FeefilterConn(P2PInterface):\n     feefilter_received = False\n \n@@ -35,7 +31,7 @@ def __init__(self):\n     def on_inv(self, message):\n         for i in message.inv:\n             if (i.type == MSG_TX) or (i.type == MSG_WTX):\n-                self.txinvs.append(hashToHex(i.hash))\n+                self.txinvs.append('{:064x}'.format(i.hash))\n \n     def wait_for_invs_to_match(self, invs_expected):\n         invs_expected.sort()"
      }
    ]
  },
  {
    "sha": "fa188c9c59b8c3e43c31be01797f073e27a7bc10",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTE4OGM5YzU5YjhjM2U0M2MzMWJlMDE3OTdmMDczZTI3YTdiYzEw",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-08-25T12:56:24Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-09-07T13:06:24Z"
      },
      "message": "test: Use MiniWalet in p2p_feefilter",
      "tree": {
        "sha": "9003eb5e71dad2d720ad561d8f474acf15fc80e5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9003eb5e71dad2d720ad561d8f474acf15fc80e5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa188c9c59b8c3e43c31be01797f073e27a7bc10",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUiYlgv/Wd16bS4TsUHdFnUyu4MmDKxIWla+f/8Tfb33YHlCE/vXVCgvPhIsZCIC\n0/42+h6NiYHnJmoVbt20P4MKZbnZIIwU86a1vkNAVCscA2vsv+AZgGkvui16oR6V\nEPy/NSypRYNg8E+G5YRDa/9lcQJrTZaLaql/AXXtBWYlUmhRfeSaKas3WWtoExjG\nKGQrf0t4o/gmQf+sSdEJlwLPxwJPipkrWqXqjVDR3EyLhgtp1rbxHEmj7M0I0m8J\nWpxXMq+gBaBcm8iQr9IBcIyfZ1a6pStCS7DfFcoH1u+U6HuKHhDf7YMNoapdXL/5\nicLM155m2NoD+gI+VaxBJ9xYdiiOW2BUniJb0MNnRwLuzap+wFubIdKsLbUHWcFI\nh3sJ9MqH60I9zhXq7Tmqt5dYQ2a6wWJsEsAXn5eVNtduXYXqIotsxPx2dhPfwqS2\nVvJW7PDRFKb3dGfLSiSa8p60n/MV+c+Zy0V6AuSxJTunBFgKVt0W4TeH40HPMfUj\nGKn0DDEi\n=EbM4\n-----END PGP SIGNATURE-----",
        "payload": "tree 9003eb5e71dad2d720ad561d8f474acf15fc80e5\nparent fa39c62eb7f39e7d249b8d46c075c4e7a9aec684\nauthor MarcoFalke <falke.marco@gmail.com> 1598360184 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1599483984 +0200\n\ntest: Use MiniWalet in p2p_feefilter\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa188c9c59b8c3e43c31be01797f073e27a7bc10",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa188c9c59b8c3e43c31be01797f073e27a7bc10",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa188c9c59b8c3e43c31be01797f073e27a7bc10/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa39c62eb7f39e7d249b8d46c075c4e7a9aec684",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa39c62eb7f39e7d249b8d46c075c4e7a9aec684",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa39c62eb7f39e7d249b8d46c075c4e7a9aec684"
      }
    ],
    "stats": {
      "total": 86,
      "additions": 74,
      "deletions": 12
    },
    "files": [
      {
        "sha": "b5f4df299ad4c6caf32d043325db142598b05baf",
        "filename": "test/functional/p2p_feefilter.py",
        "status": "modified",
        "additions": 10,
        "deletions": 12,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa188c9c59b8c3e43c31be01797f073e27a7bc10/test/functional/p2p_feefilter.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa188c9c59b8c3e43c31be01797f073e27a7bc10/test/functional/p2p_feefilter.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_feefilter.py?ref=fa188c9c59b8c3e43c31be01797f073e27a7bc10",
        "patch": "@@ -10,6 +10,7 @@\n from test_framework.mininode import mininode_lock, P2PInterface\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal\n+from test_framework.wallet import MiniWallet\n \n \n class FeefilterConn(P2PInterface):\n@@ -57,9 +58,6 @@ def set_test_params(self):\n             \"-whitelist=noban@127.0.0.1\",\n         ]] * self.num_nodes\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         self.test_feefilter_forcerelay()\n         self.test_feefilter()\n@@ -79,27 +77,28 @@ def test_feefilter_forcerelay(self):\n     def test_feefilter(self):\n         node1 = self.nodes[1]\n         node0 = self.nodes[0]\n+        miniwallet = MiniWallet(node1)\n+        # Add enough mature utxos to the wallet, so that all txs spend confirmed coins\n+        miniwallet.generate(5)\n+        node1.generate(100)\n \n         conn = self.nodes[0].add_p2p_connection(TestP2PConn())\n \n         self.log.info(\"Test txs paying 0.2 sat/byte are received by test connection\")\n-        node1.settxfee(Decimal(\"0.00000200\"))\n-        txids = [node1.sendtoaddress(node1.getnewaddress(), 1) for _ in range(3)]\n+        txids = [miniwallet.send_self_transfer(fee_rate=Decimal('0.00000200'), from_node=node1)['wtxid'] for _ in range(3)]\n         conn.wait_for_invs_to_match(txids)\n         conn.clear_invs()\n \n         # Set a fee filter of 0.15 sat/byte on test connection\n         conn.send_and_ping(msg_feefilter(150))\n \n         self.log.info(\"Test txs paying 0.15 sat/byte are received by test connection\")\n-        node1.settxfee(Decimal(\"0.00000150\"))\n-        txids = [node1.sendtoaddress(node1.getnewaddress(), 1) for _ in range(3)]\n+        txids = [miniwallet.send_self_transfer(fee_rate=Decimal('0.00000150'), from_node=node1)['wtxid'] for _ in range(3)]\n         conn.wait_for_invs_to_match(txids)\n         conn.clear_invs()\n \n         self.log.info(\"Test txs paying 0.1 sat/byte are no longer received by test connection\")\n-        node1.settxfee(Decimal(\"0.00000100\"))\n-        [node1.sendtoaddress(node1.getnewaddress(), 1) for _ in range(3)]\n+        txids = [miniwallet.send_self_transfer(fee_rate=Decimal('0.00000100'), from_node=node1)['wtxid'] for _ in range(3)]\n         self.sync_mempools()  # must be sure node 0 has received all txs\n \n         # Send one transaction from node0 that should be received, so that we\n@@ -109,14 +108,13 @@ def test_feefilter(self):\n         # to 35 entries in an inv, which means that when this next transaction\n         # is eligible for relay, the prior transactions from node1 are eligible\n         # as well.\n-        node0.settxfee(Decimal(\"0.00020000\"))\n-        txids = [node0.sendtoaddress(node0.getnewaddress(), 1)]\n+        txids = [miniwallet.send_self_transfer(fee_rate=Decimal('0.00020000'), from_node=node0)['wtxid'] for _ in range(3)]\n         conn.wait_for_invs_to_match(txids)\n         conn.clear_invs()\n \n         self.log.info(\"Remove fee filter and check txs are received again\")\n         conn.send_and_ping(msg_feefilter(0))\n-        txids = [node1.sendtoaddress(node1.getnewaddress(), 1) for _ in range(3)]\n+        txids = [miniwallet.send_self_transfer(fee_rate=Decimal('0.00020000'), from_node=node1)['wtxid'] for _ in range(3)]\n         conn.wait_for_invs_to_match(txids)\n         conn.clear_invs()\n "
      },
      {
        "sha": "c4a9d2138d3a875ffed53a08d382cf9e252c5af1",
        "filename": "test/functional/test_framework/wallet.py",
        "status": "added",
        "additions": 64,
        "deletions": 0,
        "changes": 64,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa188c9c59b8c3e43c31be01797f073e27a7bc10/test/functional/test_framework/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa188c9c59b8c3e43c31be01797f073e27a7bc10/test/functional/test_framework/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/wallet.py?ref=fa188c9c59b8c3e43c31be01797f073e27a7bc10",
        "patch": "@@ -0,0 +1,64 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"A limited-functionality wallet, which may replace a real wallet in tests\"\"\"\n+\n+from decimal import Decimal\n+from test_framework.address import ADDRESS_BCRT1_P2WSH_OP_TRUE\n+from test_framework.messages import (\n+    COIN,\n+    COutPoint,\n+    CTransaction,\n+    CTxIn,\n+    CTxInWitness,\n+    CTxOut,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_TRUE,\n+)\n+from test_framework.util import (\n+    assert_equal,\n+    hex_str_to_bytes,\n+    satoshi_round,\n+)\n+\n+\n+class MiniWallet:\n+    def __init__(self, test_node):\n+        self._test_node = test_node\n+        self._utxos = []\n+        self._address = ADDRESS_BCRT1_P2WSH_OP_TRUE\n+        self._scriptPubKey = hex_str_to_bytes(self._test_node.validateaddress(self._address)['scriptPubKey'])\n+\n+    def generate(self, num_blocks):\n+        \"\"\"Generate blocks with coinbase outputs to the internal address, and append the outputs to the internal list\"\"\"\n+        blocks = self._test_node.generatetoaddress(num_blocks, self._address)\n+        for b in blocks:\n+            cb_tx = self._test_node.getblock(blockhash=b, verbosity=2)['tx'][0]\n+            self._utxos.append({'txid': cb_tx['txid'], 'vout': 0, 'value': cb_tx['vout'][0]['value']})\n+        return blocks\n+\n+    def send_self_transfer(self, *, fee_rate, from_node):\n+        \"\"\"Create and send a tx with the specified fee_rate. Fee may be exact or at most one satoshi higher than needed.\"\"\"\n+        self._utxos = sorted(self._utxos, key=lambda k: -k['value'])\n+        largest_utxo = self._utxos.pop()  # Pick the largest utxo and hope it covers the fee\n+        vsize = Decimal(96)\n+        send_value = satoshi_round(largest_utxo['value'] - fee_rate * (vsize / 1000))\n+        fee = largest_utxo['value'] - send_value\n+        assert (send_value > 0)\n+\n+        tx = CTransaction()\n+        tx.vin = [CTxIn(COutPoint(int(largest_utxo['txid'], 16), largest_utxo['vout']))]\n+        tx.vout = [CTxOut(int(send_value * COIN), self._scriptPubKey)]\n+        tx.wit.vtxinwit = [CTxInWitness()]\n+        tx.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE])]\n+        tx_hex = tx.serialize().hex()\n+\n+        txid = from_node.sendrawtransaction(tx_hex)\n+        self._utxos.append({'txid': txid, 'vout': 0, 'value': send_value})\n+        tx_info = from_node.getmempoolentry(txid)\n+        assert_equal(tx_info['vsize'], vsize)\n+        assert_equal(tx_info['fee'], fee)\n+        return {'txid': txid, 'wtxid': tx_info['wtxid'], 'hex': tx_hex}"
      }
    ]
  }
]