[
  {
    "sha": "4e9667b844ac1c5fbb8934ec63fe17d2757f8767",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZTk2NjdiODQ0YWMxYzVmYmI4OTM0ZWM2M2ZlMTdkMjc1N2Y4NzY3",
    "commit": {
      "author": {
        "name": "rxl",
        "email": "me@ryanshea.org",
        "date": "2014-04-07T02:30:04Z"
      },
      "committer": {
        "name": "rxl",
        "email": "me@ryanshea.org",
        "date": "2014-04-12T15:36:52Z"
      },
      "message": "Improve and expand base58 comments\n\nupdate comments so doxygen will pick them up",
      "tree": {
        "sha": "c91db77bbad0b398ecb5312d7eb95be0888f4e82",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c91db77bbad0b398ecb5312d7eb95be0888f4e82"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4e9667b844ac1c5fbb8934ec63fe17d2757f8767",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e9667b844ac1c5fbb8934ec63fe17d2757f8767",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4e9667b844ac1c5fbb8934ec63fe17d2757f8767",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e9667b844ac1c5fbb8934ec63fe17d2757f8767/comments",
    "author": {
      "login": "shea256",
      "id": 994646,
      "node_id": "MDQ6VXNlcjk5NDY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/994646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shea256",
      "html_url": "https://github.com/shea256",
      "followers_url": "https://api.github.com/users/shea256/followers",
      "following_url": "https://api.github.com/users/shea256/following{/other_user}",
      "gists_url": "https://api.github.com/users/shea256/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shea256/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shea256/subscriptions",
      "organizations_url": "https://api.github.com/users/shea256/orgs",
      "repos_url": "https://api.github.com/users/shea256/repos",
      "events_url": "https://api.github.com/users/shea256/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shea256/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "shea256",
      "id": 994646,
      "node_id": "MDQ6VXNlcjk5NDY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/994646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shea256",
      "html_url": "https://github.com/shea256",
      "followers_url": "https://api.github.com/users/shea256/followers",
      "following_url": "https://api.github.com/users/shea256/following{/other_user}",
      "gists_url": "https://api.github.com/users/shea256/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shea256/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shea256/subscriptions",
      "organizations_url": "https://api.github.com/users/shea256/orgs",
      "repos_url": "https://api.github.com/users/shea256/repos",
      "events_url": "https://api.github.com/users/shea256/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shea256/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "513412fd73af0e62d8780a8de9721b7822ff2c6f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/513412fd73af0e62d8780a8de9721b7822ff2c6f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/513412fd73af0e62d8780a8de9721b7822ff2c6f"
      }
    ],
    "stats": {
      "total": 64,
      "additions": 38,
      "deletions": 26
    },
    "files": [
      {
        "sha": "5cd58b2422611c5755771cc635c82d8b3ec5a95b",
        "filename": "src/base58.h",
        "status": "modified",
        "additions": 38,
        "deletions": 26,
        "changes": 64,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4e9667b844ac1c5fbb8934ec63fe17d2757f8767/src/base58.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4e9667b844ac1c5fbb8934ec63fe17d2757f8767/src/base58.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.h?ref=4e9667b844ac1c5fbb8934ec63fe17d2757f8767",
        "patch": "@@ -27,17 +27,20 @@\n #include <boost/variant/apply_visitor.hpp>\n #include <boost/variant/static_visitor.hpp>\n \n+/* All alphanumeric characters except for \"0\", \"I\", \"O\", and \"l\" */\n static const char* pszBase58 = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\";\n \n-// Encode a byte sequence as a base58-encoded string\n+/**\n+ * Encode a byte sequence as a base58-encoded string\n+ */\n inline std::string EncodeBase58(const unsigned char* pbegin, const unsigned char* pend)\n {\n     CAutoBN_CTX pctx;\n     CBigNum bn58 = 58;\n     CBigNum bn0 = 0;\n \n-    // Convert big endian data to little endian\n-    // Extra zero at the end make sure bignum will interpret as a positive number\n+    // Convert big endian data to little endian - the extra zero at the end will\n+    // ensure bignum interprets it as a positive number */\n     std::vector<unsigned char> vchTmp(pend-pbegin+1, 0);\n     reverse_copy(pbegin, pend, vchTmp.begin());\n \n@@ -47,8 +50,8 @@ inline std::string EncodeBase58(const unsigned char* pbegin, const unsigned char\n \n     // Convert bignum to std::string\n     std::string str;\n-    // Expected size increase from base58 conversion is approximately 137%\n-    // use 138% to be safe\n+    // The expected size increase from base58 conversion is approximately 137%,\n+    // but use 138% to be safe\n     str.reserve((pend - pbegin) * 138 / 100 + 1);\n     CBigNum dv;\n     CBigNum rem;\n@@ -70,14 +73,18 @@ inline std::string EncodeBase58(const unsigned char* pbegin, const unsigned char\n     return str;\n }\n \n-// Encode a byte vector as a base58-encoded string\n+/**\n+ * Encode a byte vector as a base58-encoded string\n+ */\n inline std::string EncodeBase58(const std::vector<unsigned char>& vch)\n {\n     return EncodeBase58(&vch[0], &vch[0] + vch.size());\n }\n \n-// Decode a base58-encoded string psz into byte vector vchRet\n-// returns true if decoding is successful\n+/**\n+ * Decode a base58-encoded string (psz) into a byte vector (vchRet)\n+ * return true if decoding is successful\n+ */\n inline bool DecodeBase58(const char* psz, std::vector<unsigned char>& vchRet)\n {\n     CAutoBN_CTX pctx;\n@@ -109,7 +116,7 @@ inline bool DecodeBase58(const char* psz, std::vector<unsigned char>& vchRet)\n     // Get bignum as little endian data\n     std::vector<unsigned char> vchTmp = bn.getvch();\n \n-    // Trim off sign byte if present\n+    // Trim off the sign byte if present\n     if (vchTmp.size() >= 2 && vchTmp.end()[-1] == 0 && vchTmp.end()[-2] >= 0x80)\n         vchTmp.erase(vchTmp.end()-1);\n \n@@ -124,17 +131,18 @@ inline bool DecodeBase58(const char* psz, std::vector<unsigned char>& vchRet)\n     return true;\n }\n \n-// Decode a base58-encoded string str into byte vector vchRet\n-// returns true if decoding is successful\n+/**\n+ * Decode a base58-encoded string (str) into a byte vector (vchRet)\n+ * return true if decoding is successful\n+ */\n inline bool DecodeBase58(const std::string& str, std::vector<unsigned char>& vchRet)\n {\n     return DecodeBase58(str.c_str(), vchRet);\n }\n \n-\n-\n-\n-// Encode a byte vector to a base58-encoded string, including checksum\n+/**\n+ * Encode a byte vector into a base58-encoded string, including checksum\n+ */\n inline std::string EncodeBase58Check(const std::vector<unsigned char>& vchIn)\n {\n     // add 4-byte hash check to the end\n@@ -144,8 +152,10 @@ inline std::string EncodeBase58Check(const std::vector<unsigned char>& vchIn)\n     return EncodeBase58(vch);\n }\n \n-// Decode a base58-encoded string psz that includes a checksum, into byte vector vchRet\n-// returns true if decoding is successful\n+/**\n+ * Decode a base58-encoded string (psz) that includes a checksum into a byte\n+ * vector (vchRet), return true if decoding is successful\n+ */\n inline bool DecodeBase58Check(const char* psz, std::vector<unsigned char>& vchRet)\n {\n     if (!DecodeBase58(psz, vchRet))\n@@ -155,6 +165,7 @@ inline bool DecodeBase58Check(const char* psz, std::vector<unsigned char>& vchRe\n         vchRet.clear();\n         return false;\n     }\n+    // re-calculate the checksum, insure it matches the included 4-byte checksum\n     uint256 hash = Hash(vchRet.begin(), vchRet.end()-4);\n     if (memcmp(&hash, &vchRet.end()[-4], 4) != 0)\n     {\n@@ -165,18 +176,18 @@ inline bool DecodeBase58Check(const char* psz, std::vector<unsigned char>& vchRe\n     return true;\n }\n \n-// Decode a base58-encoded string str that includes a checksum, into byte vector vchRet\n-// returns true if decoding is successful\n+/**\n+ * Decode a base58-encoded string (str) that includes a checksum into a byte\n+ * vector (vchRet), return true if decoding is successful\n+ */\n inline bool DecodeBase58Check(const std::string& str, std::vector<unsigned char>& vchRet)\n {\n     return DecodeBase58Check(str.c_str(), vchRet);\n }\n \n-\n-\n-\n-\n-/** Base class for all base58-encoded data */\n+/**\n+ * Base class for all base58-encoded data\n+ */\n class CBase58Data\n {\n protected:\n@@ -347,7 +358,9 @@ bool inline CBitcoinAddressVisitor::operator()(const CKeyID &id) const         {\n bool inline CBitcoinAddressVisitor::operator()(const CScriptID &id) const      { return addr->Set(id); }\n bool inline CBitcoinAddressVisitor::operator()(const CNoDestination &id) const { return false; }\n \n-/** A base58-encoded secret key */\n+/**\n+ * A base58-encoded secret key\n+ */\n class CBitcoinSecret : public CBase58Data\n {\n public:\n@@ -393,7 +406,6 @@ class CBitcoinSecret : public CBase58Data\n     }\n };\n \n-\n template<typename K, int Size, CChainParams::Base58Type Type> class CBitcoinExtKeyBase : public CBase58Data\n {\n public:"
      }
    ]
  }
]