[
  {
    "sha": "fa6c3dea420b6c50c164ccc34f4e9e8a7d9a8022",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTZjM2RlYTQyMGI2YzUwYzE2NGNjYzM0ZjRlOWU4YTdkOWE4MDIy",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-08-12T11:55:01Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-08-12T19:07:45Z"
      },
      "message": "p2p: Clarify control flow in ProcessMessage()",
      "tree": {
        "sha": "4a3820b063bf4693f12736c442ddb3eee210fa24",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4a3820b063bf4693f12736c442ddb3eee210fa24"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa6c3dea420b6c50c164ccc34f4e9e8a7d9a8022",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJbcIWBAAoJEM4rdWl+aaVIcfwL/iBCI5MrwCsNclJJ8iilK0hj\naLIzES9YGOUkgEvLj7YNJrA9r1B4SfjmAhpSC1BbFZWpyygnLZ7ylBWpPWgLmgdY\nGHCFFiK9JY/iCMtBQXoyhX/a7a3k3RTp62iMHoUFgplzSY4LKyOhnkIeQkL6mJ6f\n8nr3Fh0Y9nH/ANIhqjw5/uMfg60igO13sfIMziC3r/h5iSMEjZi6ktF32jbDa/nW\n/cfQCxo1ojIUhdy34K+Cg2BJUtOhEQw56K4/brRk8s8gWhs85o1X0ODjSopY+Cf5\nNImKE+7KhuMY/wi5IIUVq8QYlC7EfQqDs0z5KaP0hhyQyF+d131uClX4E3ZeCFbs\n8vP9/MCCF9L+TQkeDyeh1lm18wr95XMCXIYizcVAglLIbp6U4p+QYRzwdIgHXmZa\n3Yzl3IsnGoqP134KWg09Px8IpPRxG/DRCArCe/I9OaiSSU2d9N21WRC6NAgbGsLq\nIuN7zCdRD5FnGIz97aMDx9DRHO9a/H0RVOXpQs86vQ==\n=NYui\n-----END PGP SIGNATURE-----",
        "payload": "tree 4a3820b063bf4693f12736c442ddb3eee210fa24\nparent 1b04b55f2d22078ca79cd38fc1078e15fa9cbe94\nauthor MarcoFalke <falke.marco@gmail.com> 1534074901 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1534100865 -0400\n\np2p: Clarify control flow in ProcessMessage()\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa6c3dea420b6c50c164ccc34f4e9e8a7d9a8022",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa6c3dea420b6c50c164ccc34f4e9e8a7d9a8022",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa6c3dea420b6c50c164ccc34f4e9e8a7d9a8022/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1b04b55f2d22078ca79cd38fc1078e15fa9cbe94",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b04b55f2d22078ca79cd38fc1078e15fa9cbe94",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1b04b55f2d22078ca79cd38fc1078e15fa9cbe94"
      }
    ],
    "stats": {
      "total": 117,
      "additions": 49,
      "deletions": 68
    },
    "files": [
      {
        "sha": "c31e1c0c60ad3c7cfb610081bec14f272c66729a",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 49,
        "deletions": 68,
        "changes": 117,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa6c3dea420b6c50c164ccc34f4e9e8a7d9a8022/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa6c3dea420b6c50c164ccc34f4e9e8a7d9a8022/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=fa6c3dea420b6c50c164ccc34f4e9e8a7d9a8022",
        "patch": "@@ -1618,8 +1618,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         return true;\n     }\n \n-    else if (strCommand == NetMsgType::VERSION)\n-    {\n+    if (strCommand == NetMsgType::VERSION) {\n         // Each connection can only send one version message\n         if (pfrom->nVersion != 0)\n         {\n@@ -1796,9 +1795,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         return true;\n     }\n \n-\n-    else if (pfrom->nVersion == 0)\n-    {\n+    if (pfrom->nVersion == 0) {\n         // Must have a version message before anything else\n         LOCK(cs_main);\n         Misbehaving(pfrom->GetId(), 1);\n@@ -1842,18 +1839,17 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::SENDCMPCT, fAnnounceUsingCMPCTBLOCK, nCMPCTBLOCKVersion));\n         }\n         pfrom->fSuccessfullyConnected = true;\n+        return true;\n     }\n \n-    else if (!pfrom->fSuccessfullyConnected)\n-    {\n+    if (!pfrom->fSuccessfullyConnected) {\n         // Must have a verack message before anything else\n         LOCK(cs_main);\n         Misbehaving(pfrom->GetId(), 1);\n         return false;\n     }\n \n-    else if (strCommand == NetMsgType::ADDR)\n-    {\n+    if (strCommand == NetMsgType::ADDR) {\n         std::vector<CAddress> vAddr;\n         vRecv >> vAddr;\n \n@@ -1900,16 +1896,16 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             pfrom->fGetAddr = false;\n         if (pfrom->fOneShot)\n             pfrom->fDisconnect = true;\n+        return true;\n     }\n \n-    else if (strCommand == NetMsgType::SENDHEADERS)\n-    {\n+    if (strCommand == NetMsgType::SENDHEADERS) {\n         LOCK(cs_main);\n         State(pfrom->GetId())->fPreferHeaders = true;\n+        return true;\n     }\n \n-    else if (strCommand == NetMsgType::SENDCMPCT)\n-    {\n+    if (strCommand == NetMsgType::SENDCMPCT) {\n         bool fAnnounceUsingCMPCTBLOCK = false;\n         uint64_t nCMPCTBLOCKVersion = 0;\n         vRecv >> fAnnounceUsingCMPCTBLOCK >> nCMPCTBLOCKVersion;\n@@ -1929,11 +1925,10 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n                     State(pfrom->GetId())->fSupportsDesiredCmpctVersion = (nCMPCTBLOCKVersion == 1);\n             }\n         }\n+        return true;\n     }\n \n-\n-    else if (strCommand == NetMsgType::INV)\n-    {\n+    if (strCommand == NetMsgType::INV) {\n         std::vector<CInv> vInv;\n         vRecv >> vInv;\n         if (vInv.size() > MAX_INV_SZ)\n@@ -1987,11 +1982,10 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n                 }\n             }\n         }\n+        return true;\n     }\n \n-\n-    else if (strCommand == NetMsgType::GETDATA)\n-    {\n+    if (strCommand == NetMsgType::GETDATA) {\n         std::vector<CInv> vInv;\n         vRecv >> vInv;\n         if (vInv.size() > MAX_INV_SZ)\n@@ -2009,11 +2003,10 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n \n         pfrom->vRecvGetData.insert(pfrom->vRecvGetData.end(), vInv.begin(), vInv.end());\n         ProcessGetData(pfrom, chainparams, connman, interruptMsgProc);\n+        return true;\n     }\n \n-\n-    else if (strCommand == NetMsgType::GETBLOCKS)\n-    {\n+    if (strCommand == NetMsgType::GETBLOCKS) {\n         CBlockLocator locator;\n         uint256 hashStop;\n         vRecv >> locator >> hashStop;\n@@ -2078,11 +2071,10 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n                 break;\n             }\n         }\n+        return true;\n     }\n \n-\n-    else if (strCommand == NetMsgType::GETBLOCKTXN)\n-    {\n+    if (strCommand == NetMsgType::GETBLOCKTXN) {\n         BlockTransactionsRequest req;\n         vRecv >> req;\n \n@@ -2128,11 +2120,10 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         assert(ret);\n \n         SendBlockTransactions(block, req, pfrom, connman);\n+        return true;\n     }\n \n-\n-    else if (strCommand == NetMsgType::GETHEADERS)\n-    {\n+    if (strCommand == NetMsgType::GETHEADERS) {\n         CBlockLocator locator;\n         uint256 hashStop;\n         vRecv >> locator >> hashStop;\n@@ -2196,11 +2187,10 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         // in the SendMessages logic.\n         nodestate->pindexBestHeaderSent = pindex ? pindex : chainActive.Tip();\n         connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::HEADERS, vHeaders));\n+        return true;\n     }\n \n-\n-    else if (strCommand == NetMsgType::TX)\n-    {\n+    if (strCommand == NetMsgType::TX) {\n         // Stop processing the transaction early if\n         // We are in blocks only mode and peer is either not whitelisted or whitelistrelay is off\n         if (!fRelayTxes && (!pfrom->fWhitelisted || !gArgs.GetBoolArg(\"-whitelistrelay\", DEFAULT_WHITELISTRELAY)))\n@@ -2384,10 +2374,10 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n                 Misbehaving(pfrom->GetId(), nDoS);\n             }\n         }\n+        return true;\n     }\n \n-\n-    else if (strCommand == NetMsgType::CMPCTBLOCK && !fImporting && !fReindex) // Ignore blocks received while importing\n+    if (strCommand == NetMsgType::CMPCTBLOCK && !fImporting && !fReindex) // Ignore blocks received while importing\n     {\n         CBlockHeaderAndShortTxIDs cmpctblock;\n         vRecv >> cmpctblock;\n@@ -2605,10 +2595,10 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n                 MarkBlockAsReceived(pblock->GetHash());\n             }\n         }\n-\n+        return true;\n     }\n \n-    else if (strCommand == NetMsgType::BLOCKTXN && !fImporting && !fReindex) // Ignore blocks received while importing\n+    if (strCommand == NetMsgType::BLOCKTXN && !fImporting && !fReindex) // Ignore blocks received while importing\n     {\n         BlockTransactions resp;\n         vRecv >> resp;\n@@ -2680,10 +2670,10 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n                 mapBlockSource.erase(pblock->GetHash());\n             }\n         }\n+        return true;\n     }\n \n-\n-    else if (strCommand == NetMsgType::HEADERS && !fImporting && !fReindex) // Ignore headers received while importing\n+    if (strCommand == NetMsgType::HEADERS && !fImporting && !fReindex) // Ignore headers received while importing\n     {\n         std::vector<CBlockHeader> headers;\n \n@@ -2708,7 +2698,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         return ProcessHeadersMessage(pfrom, connman, headers, chainparams, should_punish);\n     }\n \n-    else if (strCommand == NetMsgType::BLOCK && !fImporting && !fReindex) // Ignore blocks received while importing\n+    if (strCommand == NetMsgType::BLOCK && !fImporting && !fReindex) // Ignore blocks received while importing\n     {\n         std::shared_ptr<CBlock> pblock = std::make_shared<CBlock>();\n         vRecv >> *pblock;\n@@ -2734,11 +2724,10 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             LOCK(cs_main);\n             mapBlockSource.erase(pblock->GetHash());\n         }\n+        return true;\n     }\n \n-\n-    else if (strCommand == NetMsgType::GETADDR)\n-    {\n+    if (strCommand == NetMsgType::GETADDR) {\n         // This asymmetric behavior for inbound and outbound connections was introduced\n         // to prevent a fingerprinting attack: an attacker can send specific fake addresses\n         // to users' AddrMan and later request them by sending getaddr messages.\n@@ -2762,11 +2751,10 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         FastRandomContext insecure_rand;\n         for (const CAddress &addr : vAddr)\n             pfrom->PushAddress(addr, insecure_rand);\n+        return true;\n     }\n \n-\n-    else if (strCommand == NetMsgType::MEMPOOL)\n-    {\n+    if (strCommand == NetMsgType::MEMPOOL) {\n         if (!(pfrom->GetLocalServices() & NODE_BLOOM) && !pfrom->fWhitelisted)\n         {\n             LogPrint(BCLog::NET, \"mempool request with bloom filters disabled, disconnect peer=%d\\n\", pfrom->GetId());\n@@ -2783,11 +2771,10 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n \n         LOCK(pfrom->cs_inventory);\n         pfrom->fSendMempool = true;\n+        return true;\n     }\n \n-\n-    else if (strCommand == NetMsgType::PING)\n-    {\n+    if (strCommand == NetMsgType::PING) {\n         if (pfrom->nVersion > BIP0031_VERSION)\n         {\n             uint64_t nonce = 0;\n@@ -2805,11 +2792,10 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             // return very quickly.\n             connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::PONG, nonce));\n         }\n+        return true;\n     }\n \n-\n-    else if (strCommand == NetMsgType::PONG)\n-    {\n+    if (strCommand == NetMsgType::PONG) {\n         int64_t pingUsecEnd = nTimeReceived;\n         uint64_t nonce = 0;\n         size_t nAvail = vRecv.in_avail();\n@@ -2862,11 +2848,10 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         if (bPingFinished) {\n             pfrom->nPingNonceSent = 0;\n         }\n+        return true;\n     }\n \n-\n-    else if (strCommand == NetMsgType::FILTERLOAD)\n-    {\n+    if (strCommand == NetMsgType::FILTERLOAD) {\n         CBloomFilter filter;\n         vRecv >> filter;\n \n@@ -2883,11 +2868,10 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             pfrom->pfilter->UpdateEmptyFull();\n             pfrom->fRelayTxes = true;\n         }\n+        return true;\n     }\n \n-\n-    else if (strCommand == NetMsgType::FILTERADD)\n-    {\n+    if (strCommand == NetMsgType::FILTERADD) {\n         std::vector<unsigned char> vData;\n         vRecv >> vData;\n \n@@ -2908,19 +2892,19 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             LOCK(cs_main);\n             Misbehaving(pfrom->GetId(), 100);\n         }\n+        return true;\n     }\n \n-\n-    else if (strCommand == NetMsgType::FILTERCLEAR)\n-    {\n+    if (strCommand == NetMsgType::FILTERCLEAR) {\n         LOCK(pfrom->cs_filter);\n         if (pfrom->GetLocalServices() & NODE_BLOOM) {\n             pfrom->pfilter.reset(new CBloomFilter());\n         }\n         pfrom->fRelayTxes = true;\n+        return true;\n     }\n \n-    else if (strCommand == NetMsgType::FEEFILTER) {\n+    if (strCommand == NetMsgType::FEEFILTER) {\n         CAmount newFeeFilter = 0;\n         vRecv >> newFeeFilter;\n         if (MoneyRange(newFeeFilter)) {\n@@ -2930,20 +2914,17 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             }\n             LogPrint(BCLog::NET, \"received: feefilter of %s from peer=%d\\n\", CFeeRate(newFeeFilter).ToString(), pfrom->GetId());\n         }\n+        return true;\n     }\n \n-    else if (strCommand == NetMsgType::NOTFOUND) {\n+    if (strCommand == NetMsgType::NOTFOUND) {\n         // We do not care about the NOTFOUND message, but logging an Unknown Command\n         // message would be undesirable as we transmit it ourselves.\n+        return true;\n     }\n \n-    else {\n-        // Ignore unknown commands for extensibility\n-        LogPrint(BCLog::NET, \"Unknown command \\\"%s\\\" from peer=%d\\n\", SanitizeString(strCommand), pfrom->GetId());\n-    }\n-\n-\n-\n+    // Ignore unknown commands for extensibility\n+    LogPrint(BCLog::NET, \"Unknown command \\\"%s\\\" from peer=%d\\n\", SanitizeString(strCommand), pfrom->GetId());\n     return true;\n }\n "
      }
    ]
  }
]