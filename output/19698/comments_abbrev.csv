luke-jr,2020-08-11 22:10:58,"Not sure this is a good idea. Tests should ideally test one thing only, and failing due to other bugs would be annoying.",https://github.com/bitcoin/bitcoin/pull/19698#issuecomment-672309636,672309636,
laanwj,2020-08-12 11:13:26,"Looks like one of the sanitizers finds an integer conversion/truncation problem in the changed code:\n```\n�[1;34;49mtest/transaction_tests.cpp(251): Leaving test case ""tx_invalid""; testing time: 591590us\n�[0;39;49m�[1;34;49mtest/transaction_tests.cpp(164): Entering test case ""tx_valid""\ntest/transaction_tests.cpp:237:35: runtime error: implicit conversion from type 'unsigned long' of value 1",https://github.com/bitcoin/bitcoin/pull/19698#issuecomment-672809318,672809318,
glozow,2020-08-14 16:54:41,"@laanwj I'm looking into the issue, is there a way to run this sanitizer locally?\nEdit: nvm I think I got it, from developer-notes...",https://github.com/bitcoin/bitcoin/pull/19698#issuecomment-674167151,674167151,
glozow,2020-08-14 16:56:55,"> Not sure this is a good idea. Tests should ideally test one thing only, and failing due to other bugs would be annoying.\n\n@luke-jr I would think of it more as... each test sanity checks itself to make sure it's testing exactly what we want it to test. Passing/failing because the test itself is incorrect would be more annoying imo. All the current tests pass; as more tests are added, I'd thin",https://github.com/bitcoin/bitcoin/pull/19698#issuecomment-674168094,674168094,
glozow,2020-08-21 15:00:13,Last push fixed the sanitizer bug - just needed a cast. Ready for review :) ,https://github.com/bitcoin/bitcoin/pull/19698#issuecomment-678337313,678337313,
glozow,2020-09-04 00:10:37,"A little bit quiet here... @laanwj and @practicalswift you both left reviews on the original PR, if you have time I'd appreciate a look here as well :)",https://github.com/bitcoin/bitcoin/pull/19698#issuecomment-686826416,686826416,
laanwj,2020-10-27 09:35:53,"Code review ACK, thanks for solving the sanitizer bug.\n\nI would like @sipa @MarcoFalke or someone else close with the verification testing code to look at this and give concept ACK.",https://github.com/bitcoin/bitcoin/pull/19698#issuecomment-717112252,717112252,
benthecarman,2020-11-14 04:21:16,Concept ACK,https://github.com/bitcoin/bitcoin/pull/19698#issuecomment-727141883,727141883,
glozow,2020-12-07 15:07:00,"Thanks for the review @laanwj @jnewbery @benthecarman @Xekyo @jonatack :) addressed your comments and split the PR up into more, dedicated commits. CI is green 🟢 ready for review again!",https://github.com/bitcoin/bitcoin/pull/19698#issuecomment-739976048,739976048,
glozow,2021-01-26 22:25:09,"Attempting to revive this again 😅 🙏 \nRebased on master since it's been a while and applied the style suggestions from @jonatack and @Xekyo. I had also forgotten to add the original author to the intermediate commits when I split up the changes - my sincerest apologies - that's fixed now.",https://github.com/bitcoin/bitcoin/pull/19698#issuecomment-767867433,767867433,
laanwj,2021-01-27 07:35:46,"To test the tests I made a small change to `tx_valid.json` (basically reverting the initial commits):\n```patch\n [""An ADD producing a 5-byte result that sets CTxIn::SEQUENCE_LOCKTIME_DISABLE_FLAG""],\n-[[[""0000000000000000000000000000000000000000000000000000000000000100"", 0, ""2147483647 65536 ADD CHECKSEQUENCEVERIFY""]],\n+[[[""0000000000000000000000000000000000000000000000000000000000000100"", 0",https://github.com/bitcoin/bitcoin/pull/19698#issuecomment-768096867,768096867,
glozow,2021-02-02 17:25:37,"@laanwj Good point, it's not very helpful if `VerifyFlags` just throws and we don't know which test failed. I've added a check using `FillFlags` to throw a ""Bad test flags"" when there's an invalid combination of flags given in tx_valid.json (https://github.com/bitcoin/bitcoin/pull/19698/commits/a260c22cad0672dda11f42f649ebdc7cfa53b16a).\n\nI tested by adding a `P2SH` or `WITNESS` without a `CLEA",https://github.com/bitcoin/bitcoin/pull/19698#issuecomment-771815203,771815203,
achow101,2021-02-22 21:36:14,ACK 5786a818e1a96bc1dd65b0e81b05998876357a74,https://github.com/bitcoin/bitcoin/pull/19698#issuecomment-783690969,783690969,
laanwj,2021-02-23 10:07:55,"> Let me know what you think?\n\nLooks good to me now!\n\nACK 5786a818e1a96bc1dd65b0e81b05998876357a74",https://github.com/bitcoin/bitcoin/pull/19698#issuecomment-784060974,784060974,
benthecarman,2020-11-14 04:23:02,nit: ++i,https://github.com/bitcoin/bitcoin/pull/19698#discussion_r523373704,523373704,src/test/transaction_tests.cpp
benthecarman,2020-11-14 04:23:13,nit: ++f,https://github.com/bitcoin/bitcoin/pull/19698#discussion_r523373709,523373709,src/test/transaction_tests.cpp
jnewbery,2020-11-26 17:38:56,"I don't think the format of tx_valid.json should be documented here _and_ in the file itself. It'd be better to consolidate this documentation to just the json file.\n\nNo need to capitalize MINIMAL.",https://github.com/bitcoin/bitcoin/pull/19698#discussion_r531165886,531165886,src/test/transaction_tests.cpp
jnewbery,2020-11-26 17:40:05,Would a better interface be to take a reference and update it in place?,https://github.com/bitcoin/bitcoin/pull/19698#discussion_r531166325,531166325,src/test/transaction_tests.cpp
jnewbery,2020-11-26 17:44:10,"Perhaps clearer:\n\n```suggestion\n    // CLEANSTACK implies WITNESS\n    if (flags & SCRIPT_VERIFY_CLEANSTACK) flags |= SCRIPT_VERIFY_WITNESS;\n    \n    // WITNESS implies P2SH (and transitively CLEANSTACK implies P2SH)\n    if (flags & SCRIPT_VERIFY_WITNESS) flags |= SCRIPT_VERIFY_P2SH;\n```",https://github.com/bitcoin/bitcoin/pull/19698#discussion_r531167693,531167693,src/test/transaction_tests.cpp
jnewbery,2020-11-26 17:44:33,Please split this line (and perhaps comment what this function is doing),https://github.com/bitcoin/bitcoin/pull/19698#discussion_r531167852,531167852,src/test/transaction_tests.cpp
jnewbery,2020-11-26 17:44:42,join,https://github.com/bitcoin/bitcoin/pull/19698#discussion_r531167903,531167903,src/test/transaction_tests.cpp
jnewbery,2020-11-26 17:45:35,join,https://github.com/bitcoin/bitcoin/pull/19698#discussion_r531168267,531168267,src/test/transaction_tests.cpp
jnewbery,2020-11-26 17:45:41,join,https://github.com/bitcoin/bitcoin/pull/19698#discussion_r531168304,531168304,src/test/transaction_tests.cpp
jnewbery,2020-11-26 17:45:58,braces,https://github.com/bitcoin/bitcoin/pull/19698#discussion_r531168436,531168436,src/test/transaction_tests.cpp
jnewbery,2020-11-26 17:46:04,join,https://github.com/bitcoin/bitcoin/pull/19698#discussion_r531168471,531168471,src/test/transaction_tests.cpp
jnewbery,2020-11-26 17:47:23,"consider making an alias reference for `tx.vin[i]` here, since you'll use it a lot below.",https://github.com/bitcoin/bitcoin/pull/19698#discussion_r531168936,531168936,src/test/transaction_tests.cpp
jnewbery,2020-11-26 17:49:45,"This is a really weird function. It'll now return a vector of:\n- first item is the sum of all the flags\n- then a list of the sum of all except one flag for each flag.\n\nI think the function should be left unchanged and the client do whatever it needs with the sum of all the flags. At the very least, the function should be documented.",https://github.com/bitcoin/bitcoin/pull/19698#discussion_r531169696,531169696,src/test/transaction_tests.cpp
jnewbery,2020-11-26 17:51:12,braces,https://github.com/bitcoin/bitcoin/pull/19698#discussion_r531170275,531170275,src/test/transaction_tests.cpp
jnewbery,2020-11-26 17:51:27,join,https://github.com/bitcoin/bitcoin/pull/19698#discussion_r531170369,531170369,src/test/transaction_tests.cpp
jnewbery,2020-11-26 17:51:38,Use range-based loop?,https://github.com/bitcoin/bitcoin/pull/19698#discussion_r531170443,531170443,src/test/transaction_tests.cpp
jnewbery,2020-11-26 17:53:14,join these lines and don't use the local variable `fValid` (it means 'the test file was malformed' above and 'the transaction failed validation' here).,https://github.com/bitcoin/bitcoin/pull/19698#discussion_r531171017,531171017,src/test/transaction_tests.cpp
jnewbery,2020-11-26 17:53:49,or just use range-based for loop.,https://github.com/bitcoin/bitcoin/pull/19698#discussion_r531171230,531171230,src/test/transaction_tests.cpp
Xekyo,2020-12-02 15:16:51,"If the ""Remove unnecessary OP_1 at the end of most OP_CLTV and OP_CSV tests"" change would allow tests to pass before the other changes in this commit, it would be preferable to pull it out into a separate preceding commit.",https://github.com/bitcoin/bitcoin/pull/19698#discussion_r534247463,534247463,src/test/data/tx_valid.json
Xekyo,2020-12-02 15:20:46,"Similarly, if the `ADD` was missing and tests would pass, I would pull it out to a separate commit.\n\nMy motivation would be that you are making a lot of changes, and if I'm looking for multiple different reasons why those changes are made, it's adding steps to my parsing of every line as a reviewer, while it would be easier to parse a commit that has only one concern (the exclusion of verify f",https://github.com/bitcoin/bitcoin/pull/19698#discussion_r534250581,534250581,src/test/data/tx_valid.json
Xekyo,2020-12-02 15:23:53,"Similarly to my previous comment, I'd propose to pull out changes to the transactions into a prior commit.",https://github.com/bitcoin/bitcoin/pull/19698#discussion_r534253097,534253097,src/test/data/tx_invalid.json
Xekyo,2020-12-02 15:24:55,See above.,https://github.com/bitcoin/bitcoin/pull/19698#discussion_r534253956,534253956,src/test/data/tx_invalid.json
Xekyo,2020-12-02 15:33:49,"Optional: ""verifyFlags is the minimal comma separated list of script verification flags that are necessary for the invalid transaction to fail verification. Use ""NONE"" when no flags need to be applied, and use a solitary ""BADTX"" if the transaction is expected to fail CheckTransaction().""",https://github.com/bitcoin/bitcoin/pull/19698#discussion_r534261326,534261326,src/test/transaction_tests.cpp
Xekyo,2020-12-02 15:36:19,Optional: Consider renaming `verifyFlags` to `disabledVerifyFlags` or similar.,https://github.com/bitcoin/bitcoin/pull/19698#discussion_r534263385,534263385,src/test/transaction_tests.cpp
Xekyo,2020-12-02 15:43:39,Have line length guidelines ever been considered for this codebase? :innocent: ,https://github.com/bitcoin/bitcoin/pull/19698#discussion_r534269442,534269442,src/test/transaction_tests.cpp
Xekyo,2020-12-02 15:53:57,Maybe it would be better to have a separate function that returns the names of the flags from a given sum of all flags.,https://github.com/bitcoin/bitcoin/pull/19698#discussion_r534277788,534277788,src/test/transaction_tests.cpp
jonatack,2020-12-02 16:17:19,"And otherwise, prefer ++f to f++",https://github.com/bitcoin/bitcoin/pull/19698#discussion_r534296579,534296579,src/test/transaction_tests.cpp
jonatack,2020-12-02 16:18:41,"@glozow if you run clang-format on your changes, it can avoid the need for all the formatting feedback",https://github.com/bitcoin/bitcoin/pull/19698#discussion_r534297566,534297566,src/test/transaction_tests.cpp
jonatack,2020-12-02 16:22:17,"@glozow I find https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines.html#Rf-in useful for when to pass ""in"" parameters by value versus by reference to const",https://github.com/bitcoin/bitcoin/pull/19698#discussion_r534300444,534300444,src/test/transaction_tests.cpp
jonatack,2020-12-02 16:31:04,"> Have line length guidelines ever been considered for this codebase? innocent\n\nFor the C++ part, the longer the better? (After many years of 80 or 100 char line limits, this surprised me at first, but for the C++ code I now actually prefer the lines to be unbroken more often than not.)\n\nFor the Python code, ISTM the unofficial practice is not PEP8 (79 chars) but more like 120 or 160 chars",https://github.com/bitcoin/bitcoin/pull/19698#discussion_r534307643,534307643,src/test/transaction_tests.cpp
glozow,2020-12-02 16:44:37,oops 😅 thanks for advice @jonatack ,https://github.com/bitcoin/bitcoin/pull/19698#discussion_r534317864,534317864,src/test/transaction_tests.cpp
michaelfolkson,2020-12-02 16:58:28,https://github.com/bitcoin/bitcoin/blob/master/contrib/devtools/README.md#clang-format-diffpy,https://github.com/bitcoin/bitcoin/pull/19698#discussion_r534328338,534328338,src/test/transaction_tests.cpp
glozow,2020-12-06 23:52:32,"maybe not, since we're using it like\n`CheckTxScripts(... FillFlags(flags) ...)`\nSo doing it in place would mean we need an extra line there",https://github.com/bitcoin/bitcoin/pull/19698#discussion_r537153533,537153533,src/test/transaction_tests.cpp
glozow,2020-12-07 01:58:37,consolidated in the json since that's where any new tests would be added,https://github.com/bitcoin/bitcoin/pull/19698#discussion_r537181271,537181271,src/test/transaction_tests.cpp
glozow,2020-12-07 01:58:49,"indeed, cleaner :)",https://github.com/bitcoin/bitcoin/pull/19698#discussion_r537181314,537181314,src/test/transaction_tests.cpp
glozow,2020-12-07 01:59:38,pulled them into their own commits,https://github.com/bitcoin/bitcoin/pull/19698#discussion_r537181564,537181564,src/test/data/tx_valid.json
glozow,2020-12-07 01:59:54,also 👍 ,https://github.com/bitcoin/bitcoin/pull/19698#discussion_r537181638,537181638,src/test/data/tx_invalid.json
glozow,2020-12-07 15:01:52,"I eyeballed ~100 chars, hopefully that's ok\nAlso thanks for the link @jonatack, switched the cheaper ints to pass by value",https://github.com/bitcoin/bitcoin/pull/19698#discussion_r537575445,537575445,src/test/transaction_tests.cpp
Xekyo,2020-12-07 18:15:50,"Nit: map_p_rev. Also, I seem to remember that new variables should preferably use snake case.",https://github.com/bitcoin/bitcoin/pull/19698#discussion_r537722765,537722765,src/test/transaction_tests.cpp
jonatack,2020-12-07 18:43:59,That's true (doc/developer-notes.md),https://github.com/bitcoin/bitcoin/pull/19698#discussion_r537740860,537740860,src/test/transaction_tests.cpp
jonatack,2020-12-07 18:44:44,drive-by nit if you retouch: s/i++/++i/ (see developer-notes.md),https://github.com/bitcoin/bitcoin/pull/19698#discussion_r537741333,537741333,src/test/transaction_tests.cpp
jonatack,2020-12-07 18:47:15,"`flags` and `expect_valid` now passed by value, thanks :+1: ",https://github.com/bitcoin/bitcoin/pull/19698#discussion_r537742929,537742929,src/test/transaction_tests.cpp
glozow,2020-12-07 18:47:40,o tru,https://github.com/bitcoin/bitcoin/pull/19698#discussion_r537743232,537743232,src/test/transaction_tests.cpp
MarcoFalke,2021-02-23 11:33:05,"> https://github.com/bitcoin/bitcoin/pull/19698#discussion_r534253097\n\nLooks like this hasn't been fixed and breaks git-bisect.\n\nAlso, I am wondering why exactly 3 outputs? Wouldn't one suffice?",https://github.com/bitcoin/bitcoin/pull/19698#discussion_r580962732,580962732,src/test/data/tx_invalid.json
MarcoFalke,2021-02-23 12:10:10,I don't understand what this is supposed to do. The method just returns an empty vector.,https://github.com/bitcoin/bitcoin/pull/19698#discussion_r580984395,580984395,src/test/transaction_tests.cpp
glozow,2021-02-23 14:11:54,"~I don't think it always returns an empty vector? I'm playing around with it, should only return empty if `flags=0`.~\n\nWhat it's supposed to do: given a set of verify flags `flags`, and all the flags in existence from `mapFlagNames` and exclude each one from `flags` (granted it's a valid combination and doesn't just result in the same flags).\n\nSo for example if it's given 10001100 and ther",https://github.com/bitcoin/bitcoin/pull/19698#discussion_r581067006,581067006,src/test/transaction_tests.cpp
glozow,2021-02-23 14:16:01,"```suggestion\n        if (flags != flags_excluding_i && std::find(flags_combos.begin(), flags_combos.end(), flags_excluding_i) == flags_combos.end()) {\n```\nYeah, it should be this. Should not be found in `flags_combos`. I'll open a PR to address this",https://github.com/bitcoin/bitcoin/pull/19698#discussion_r581070300,581070300,src/test/transaction_tests.cpp
glozow,2021-02-23 14:35:21,"I had interpreted that I was supposed to put the 2 tx_invalid test fixes into a separate commit (they were initially grouped with the ""apply minimal flags"" commit) so I thought I had done this, oops! Do you have the test failing? Should I do something to fix this now?\n\n> Also, I am wondering why exactly 3 outputs? Wouldn't one suffice?\n\nYeah I think so. I just pulled what was on jl2012's b",https://github.com/bitcoin/bitcoin/pull/19698#discussion_r581087106,581087106,src/test/data/tx_invalid.json
MarcoFalke,2021-02-23 15:06:30,"It is not possible to rewrite our git history, so the failing commit will need to be kept as is.",https://github.com/bitcoin/bitcoin/pull/19698#discussion_r581115181,581115181,src/test/data/tx_invalid.json
