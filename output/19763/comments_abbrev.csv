vasild,2020-08-18 19:50:32,I stumbled into this while testing https://github.com/bitcoin/bitcoin/pull/19728.,https://github.com/bitcoin/bitcoin/pull/19763#issuecomment-675679253,675679253,
sipa,2020-08-18 19:53:58,"This behavior is intentional, and the hash-based logic to determine where to send exploits it (there is a comment about `m_addr_known` in `RelayAddress`).\n\nThe idea is that every incoming addr is only relayed to a fixed subset of 1 or 2 peers during windows of 24 hours. This means that if the same address is relayed again, it will go to the same peers (and likely not be sent at all as they alr",https://github.com/bitcoin/bitcoin/pull/19763#issuecomment-675680772,675680772,
vasild,2020-08-18 20:33:48,"Alright, I see the problem this would cause.\n\nThe condition added in this PR `!pnode->m_addr_known->contains(addr)` is too strong. I only intended to avoid relaying to the node that sent us the address, trying to avoid this adverse scenario:\n\n* let node0 have connections to 8 other nodes: node1, ..., node8.\n* node5 sends some address to node0\n* node0 is about to relay it to 2 ""random"" ",https://github.com/bitcoin/bitcoin/pull/19763#issuecomment-675698521,675698521,
sipa,2020-08-18 20:37:24,"@vasild Ah, I see. That's a good point, and should probably be improved. I think we can just make sure that the originating node is skipped in the list of considered candidates?",https://github.com/bitcoin/bitcoin/pull/19763#issuecomment-675703311,675703311,
vasild,2020-08-19 10:44:22,"> make sure that the originating node is skipped in the list of considered candidates\n\nExactly! Done in e80a80b and extended a test so that it fails without this fix.\n\nReopened for review.",https://github.com/bitcoin/bitcoin/pull/19763#issuecomment-676127052,676127052,
jonatack,2020-08-19 16:08:42,Interesting. Will review.,https://github.com/bitcoin/bitcoin/pull/19763#issuecomment-676519017,676519017,
sipa,2020-08-19 19:11:28,Concept ACK,https://github.com/bitcoin/bitcoin/pull/19763#issuecomment-676609042,676609042,
dergoegge,2020-08-19 19:49:12,"What if the same address is relayed again but from a different peer? I think the list of nodes the address would be relayed to might not be the same, because now it depends on the address AND the origin and not just the address, so the list would only be deterministic for the same origin.",https://github.com/bitcoin/bitcoin/pull/19763#issuecomment-676626905,676626905,
vasild,2020-08-20 07:47:17,"@dergoegge, the [hashKey](https://github.com/bitcoin/bitcoin/blob/e80a80b25/src/net_processing.cpp#L1514) of each relay-to candidate does not depend on the originator. Can you elaborate? I think the list of nodes the address would be relayed to does not depend on the originator, except that the originator will be skipped if he happens to be one of the two chosen nodes and in his place another node",https://github.com/bitcoin/bitcoin/pull/19763#issuecomment-677434516,677434516,
dergoegge,2020-08-20 09:30:01,"@vasild while trying to come up with an example i realised that you are right and that i didn't fully understand how `sortfunc` works (even though it has ""sort"" in the name ðŸ˜…), sorry. ",https://github.com/bitcoin/bitcoin/pull/19763#issuecomment-677488472,677488472,
DrahtBot,2020-08-20 19:53:33,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18642 (Use std::chrono for the time to rotate destination of addr messages + tests by naumenkogs)\n\nIf you consider this",https://github.com/bitcoin/bitcoin/pull/19763#issuecomment-677870688,677870688,
naumenkogs,2020-08-23 14:12:07,Concept ACK.,https://github.com/bitcoin/bitcoin/pull/19763#issuecomment-678779338,678779338,
naumenkogs,2020-08-27 11:39:20,"Code review ACK e80a80b25b14b580644b2c29e471412dd932d7c4\nNeeds rebase.\n",https://github.com/bitcoin/bitcoin/pull/19763#issuecomment-681894776,681894776,
vasild,2020-09-02 08:46:57,Rebased to resolve conflicts.,https://github.com/bitcoin/bitcoin/pull/19763#issuecomment-685452254,685452254,
vasild,2020-09-02 08:48:07,Picked some suggestions.,https://github.com/bitcoin/bitcoin/pull/19763#issuecomment-685452942,685452942,
naumenkogs,2020-09-02 09:30:22,Code review ACK fd897f89eea2486ccf12ac7b40a99dbcc6084b72,https://github.com/bitcoin/bitcoin/pull/19763#issuecomment-685494545,685494545,
promag,2020-09-02 09:55:07,"Code review ACK fd897f89eea2486ccf12ac7b40a99dbcc6084b72.\n\nnit, could drop ""try"".",https://github.com/bitcoin/bitcoin/pull/19763#issuecomment-685529942,685529942,
vasild,2020-09-03 16:25:44,"Rebased to resolve conflicts, picked up suggestion and dropped ""try"".",https://github.com/bitcoin/bitcoin/pull/19763#issuecomment-686606844,686606844,
jonatack,2020-09-03 16:34:57,"Code review re-ACK 0b8dd9555c57e64212656a3e801502ce9878bd15 per `git range-diff a0a422c fd897f8 0b8dd95`\n\nThanks for updating.\n",https://github.com/bitcoin/bitcoin/pull/19763#issuecomment-686611913,686611913,
naumenkogs,2020-09-04 06:20:11,reACK 0b8dd9555c57e64212656a3e801502ce9878bd15,https://github.com/bitcoin/bitcoin/pull/19763#issuecomment-686937978,686937978,
hebasto,2020-09-25 08:53:33,Concept ACK.,https://github.com/bitcoin/bitcoin/pull/19763#issuecomment-698809719,698809719,
sipa,2020-09-26 02:33:48,"Thinking more about this, I have a slight concern here that this enables a sort of ""augmentation"" - if we relay to a peer, and they relay the same address immediately back to us, it will (with this PR) always result in the address being sent out to one extra peer.\n\nDoes anyone see any issues with skipping addr relay in case `addr` is already in `pnode->m_addr_known`?",https://github.com/bitcoin/bitcoin/pull/19763#issuecomment-699279543,699279543,
naumenkogs,2020-09-26 08:11:24,"@sipa good catch! It's very unlikely to happen in an honest scenario, but a malicious one is worth discussing. I see two potential issues with relaying to one more peer:\n1. overcoming our spam protection (rate limiting)\n2. easier link inference (if a malicious node was assigned to get a probe address from a victim being link-probed, it could force a victim to send a probe address to another co",https://github.com/bitcoin/bitcoin/pull/19763#issuecomment-699456060,699456060,
vasild,2020-10-06 15:16:48,"> if we relay to a peer, and they relay the same address immediately back to us,\n\nWhen we receive an address from a peer our behavior is the same no matter whether we have sent the same address to that peer before or not. In `master` and in this PR - the peer is marked as knowing the address when we receive it from him. If we have sent the address before to the same peer then it would have bee",https://github.com/bitcoin/bitcoin/pull/19763#issuecomment-704342961,704342961,
sipa,2020-10-06 17:01:05,"@naumenkogs Those are good arguments. Consider my concern addressed.\n\n@vasild My thinking is that if an address is echoed back to us, then by definition, one of the two (currently) selected peers would be the originator (as it was chosen before by us). With this PR, the behavior would be:\n* Peer A announces an address to us\n* We select peers B and C to relay the address to, and send it.\n",https://github.com/bitcoin/bitcoin/pull/19763#issuecomment-704415780,704415780,
vasild,2020-10-06 19:27:32,"> as it was chosen before by us\n\nAh, I see now! Thanks for the elaboration.",https://github.com/bitcoin/bitcoin/pull/19763#issuecomment-704504006,704504006,
vasild,2020-10-13 09:08:16,"I gave some more thought on this.\n\nWe pick 2 random nodes to relay to regardless of whether those nodes know the address or not. If we happen to pick a node that knows the address we will not relay to it and so we will relay to less than the intended 2 nodes.\n\nThe originator of the address knows the address and that is just a special case of the above.\n\nSo, assuming address propagation",https://github.com/bitcoin/bitcoin/pull/19763#issuecomment-707604660,707604660,
naumenkogs,2020-10-19 09:19:26,"Not sure why this was closed. I think the issue is worth addressing, or at least kept in mind...\n\n>So, assuming address propagation works, maybe this is not an issue.\n\nI think it is an issue because it is unexpected behavior. We might think that we always relay to 2 (at least best-effort), but this issue makes it not true, and it's trivial to fix.\n\nI'm wondering what you didn't like ab",https://github.com/bitcoin/bitcoin/pull/19763#issuecomment-711898473,711898473,
vasild,2020-10-19 09:57:46,"I closed it because it is fixing just a special case of a more widespread issue. Otherwise I don't think there is a technical issue with the patch. It will be an improvement, thus reopening.\n\nLet me illustrate with an example:\n\n* let n0 have connections to 8 other nodes: n1, ..., n8\n* n1, n2 and n3 already know some address `addr` (according to n0)\n* n5 sends `addr` to n0\n* n5 is imm",https://github.com/bitcoin/bitcoin/pull/19763#issuecomment-711961639,711961639,
naumenkogs,2020-10-22 09:40:27,"@vasild I agree with the description. Maybe once someone implements the ""best way"" this can be closed, but for now I think it's better keep this as a reference (and maybe merge this as an improvement with 0 overhead).",https://github.com/bitcoin/bitcoin/pull/19763#issuecomment-714368999,714368999,
sdaftuar,2020-12-03 18:57:50,"utACK (other than the test code, which I did not review). I think this is an improvement even if addr relay can be further improved.\n\nI should add -- I think on balance we should be more concerned about ensuring that honest actors have their addresses relay well, more than we should be concerned about adversaries getting additional relay (I think @naumenkogs made a similar point above).  My in",https://github.com/bitcoin/bitcoin/pull/19763#issuecomment-738219815,738219815,
sipa,2020-12-03 19:04:42,"> Maybe once someone implements the ""best way""\n\nWhen Erlay for addr messages?",https://github.com/bitcoin/bitcoin/pull/19763#issuecomment-738229497,738229497,
jonatack,2020-12-08 20:15:13,"To summarize, if I'm non overlooking anything, this PR has ACKs by @naumenkogs, @sdaftuar, and myself, a fourth ACK (pre-rebase) by @promag, and a concept ACK by @hebasto.",https://github.com/bitcoin/bitcoin/pull/19763#issuecomment-740965462,740965462,
vasild,2020-12-10 14:04:44,Looks like github just lost my comment. @jnewbery did you get it in email?,https://github.com/bitcoin/bitcoin/pull/19763#issuecomment-742540962,742540962,
vasild,2020-12-10 14:27:05,"_resurrected the comment by rewinding the PR to an old commit (e80a80b)_\n\n> I agree. This is inconsistent with the style used in the rest of the project. If you want to update the project style for function comments, please open a PR to do that or raise in an irc meeting.\n\nThe guidelines already [say](https://github.com/bitcoin/bitcoin/blame/86f20071931b803b5f26ed8f685d98d4919fb7a7/doc/dev",https://github.com/bitcoin/bitcoin/pull/19763#issuecomment-742554261,742554261,
vasild,2020-12-10 14:29:49,"Changes since the ACKs - replace inline doxygen comments with `@param` ones:\n\nhttps://github.com/bitcoin/bitcoin/compare/0b8dd9555c57e64212656a3e801502ce9878bd15..7fabe0f359ae16ed36ce4ca2c33631d038c21448",https://github.com/bitcoin/bitcoin/pull/19763#issuecomment-742555783,742555783,
sdaftuar,2020-12-10 14:41:30,"ACK 7fabe0f359ae16ed36ce4ca2c33631d038c21448 (this time I looked at the test, and verified the test breaks in expected ways if I break the code).",https://github.com/bitcoin/bitcoin/pull/19763#issuecomment-742562922,742562922,
jonatack,2020-12-10 14:50:46,Re-reviewing as soon as I finish 19858.,https://github.com/bitcoin/bitcoin/pull/19763#issuecomment-742568534,742568534,
sdaftuar,2020-12-10 15:10:29,Not sure what is going on with the failed appveyor or cirrus ci builds; can someone with a better understanding of how those work take a look?,https://github.com/bitcoin/bitcoin/pull/19763#issuecomment-742580615,742580615,
jnewbery,2020-12-10 15:17:14,utACK 7fabe0f359ae16ed36ce4ca2c33631d038c21448 (only net_processing changes. I haven't reviewed the test changes),https://github.com/bitcoin/bitcoin/pull/19763#issuecomment-742584936,742584936,
MarcoFalke,2020-12-10 15:43:17,(ci can be ignored. Looks like a ci integration problem),https://github.com/bitcoin/bitcoin/pull/19763#issuecomment-742602075,742602075,
vasild,2020-12-14 09:59:44,"> (ci can be ignored. Looks like a ci integration problem)\n\nOk, I am leaving it as is then. I can rebase or push a minor whitespace change to trigger a fresh CI run (invalidade ACKs).",https://github.com/bitcoin/bitcoin/pull/19763#issuecomment-744326366,744326366,
jonatack,2020-08-20 16:23:47,"I think the Doxygen style in developer-notes.md might be easier to read.\n\nLine 1485: s/do/does/",https://github.com/bitcoin/bitcoin/pull/19763#discussion_r474110582,474110582,src/net_processing.cpp
jonatack,2020-08-20 16:25:14,"<details><summary>a few suggestions for the test code</summary><p>\n\n```diff\n@@ -18,8 +18,6 @@ from test_framework.mininode import (\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n-    assert_greater_than,\n-    assert_greater_than_or_equal,\n )\n import time\n \n@@ -42,8 +40,8 @@ class AddrReceiver(P2PInterfa",https://github.com/bitcoin/bitcoin/pull/19763#discussion_r474111558,474111558,test/functional/p2p_addr_relay.py
jonatack,2020-08-20 16:31:49,"Verified this assertion fails on master with relay to fewer nodes:\n```\nAssertionError: not(17 == 20)\nAssertionError: not(17 == 20)\nAssertionError: not(19 == 20)\n```",https://github.com/bitcoin/bitcoin/pull/19763#discussion_r474115675,474115675,test/functional/p2p_addr_relay.py
jonatack,2020-09-02 09:51:31,s/someone to unjustly give/a peer from unjustly giving/,https://github.com/bitcoin/bitcoin/pull/19763#discussion_r481945931,481945931,src/net_processing.cpp
jnewbery,2020-12-10 12:47:27,"I agree. This is inconsistent with the style used in the rest of the project. If you want to update the project style for function comments, please open a PR to do that or raise in an irc meeting.",https://github.com/bitcoin/bitcoin/pull/19763#discussion_r540141198,540141198,src/net_processing.cpp
vasild,2020-12-10 13:59:48,"The guidelines already [say](https://github.com/bitcoin/bitcoin/blame/86f20071931b803b5f26ed8f685d98d4919fb7a7/doc/developer-notes.md#L140)\n\n> Use Doxygen-compatible comment blocks for functions\n\nand the above is (was) doxygen-compatible, so I don't think there is anything to update in `developer-notes.md`.\n\nThe used inline comments have numerous advantages over `@param` which I will s",https://github.com/bitcoin/bitcoin/pull/19763#discussion_r540190410,540190410,src/net_processing.cpp
