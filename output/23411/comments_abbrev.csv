MarcoFalke,2021-11-01 14:58:11,"Reproducer:\n[clusterfuzz-testcase-minimized-utxo_snapshot-6702059005542400.bin.txt](https://github.com/bitcoin/bitcoin/files/7454129/clusterfuzz-testcase-minimized-utxo_snapshot-6702059005542400.bin.txt)\n ",https://github.com/bitcoin/bitcoin/pull/23411#issuecomment-956305227,956305227,
sipa,2021-11-01 15:30:15,"How does activating a snapshot trigger an integer overflow in this code in the first place? That seems far more concerning, and this PR just patches it up.",https://github.com/bitcoin/bitcoin/pull/23411#issuecomment-956334356,956334356,
MarcoFalke,2021-11-01 15:55:28,@sipa Added three more sentences to OP to explain this refactor.,https://github.com/bitcoin/bitcoin/pull/23411#issuecomment-956354784,956354784,
jamesob,2021-11-01 15:58:09,"Hm, I'm kind of confused - is the concern here that a user could be fed a bad snapshot that causes an overflow? Because if that's the case, the hash of the UTXO set won't match the one hardcoded in chainparams' `m_assumeutxo_data`. \n\nIf it's not a bad snapshot you're worried about, then as far as I can tell the same wraparound issue would exist with a normal `gettxoutsetinfo` call at the heigh",https://github.com/bitcoin/bitcoin/pull/23411#issuecomment-956357002,956357002,
MarcoFalke,2021-11-01 15:59:33,"Correct.\n\nIf we don't care about integer overflows when activating invalid snapshots, then this pull can be closed.",https://github.com/bitcoin/bitcoin/pull/23411#issuecomment-956358061,956358061,
sipa,2021-11-01 19:29:31,"Would it make sense to instead compute the total amount as an `std::optional`, which starts at `{0}`, and is incremented with the read values, but when an out-of-range value is read, or the sum goes out-of-range, is replaced with `std::nullopt` (and then stays at `std::nullopt`)? That would categorically remove this concern, and pushes the responsibility for checking sanity to the caller (where it",https://github.com/bitcoin/bitcoin/pull/23411#issuecomment-956525053,956525053,
DrahtBot,2021-11-01 21:06:33,<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.,https://github.com/bitcoin/bitcoin/pull/23411#issuecomment-956590836,956590836,
MarcoFalke,2021-11-02 12:29:53,Switched to `std::optional` approach,https://github.com/bitcoin/bitcoin/pull/23411#issuecomment-957452878,957452878,
MarcoFalke,2021-11-02 13:57:35,"> This might not always be true.\n\nMINI is a compile time constant (just force pushed to rename it from mini). It allows for the test checking for underflow to be less verbose. Checking for underflow is only needed when adding signed integers. Adding two unsigned integers can only overflow.",https://github.com/bitcoin/bitcoin/pull/23411#issuecomment-957632848,957632848,
luke-jr,2021-11-02 17:18:28,"Seems like the number is useful for human verification. We should probably log it or tell advanced users somewhere.\n\nMaybe instead, abort activation of snapshots that exceed `MAX_MONEY`?",https://github.com/bitcoin/bitcoin/pull/23411#issuecomment-957962508,957962508,
MarcoFalke,2021-11-02 18:03:11,"> Maybe instead, abort activation of snapshots that exceed MAX_MONEY?\n\nThe amounts are already covered by the hash, which is obviously trusted and verified. Thus, it will abort activation.\n\nStarting to check random consensus rules on the snapshot is going to be an open ended issue (why not check that there are no unspendable scriptPubKeys in the snapshot, ...) that doesn't give any benefit",https://github.com/bitcoin/bitcoin/pull/23411#issuecomment-957997523,957997523,
MarcoFalke,2021-11-26 09:45:14,"Rebased after conflict in touching line in Makefile, should be trivial to re-ACK",https://github.com/bitcoin/bitcoin/pull/23411#issuecomment-979830333,979830333,
laanwj,2021-11-10 12:37:20,"It seems cleaner to factor this out. What about an `AddOverflowDetect` in `util/overflow.h` that implements the ""add numbers and collapse to nullopt on overflow"" logic?",https://github.com/bitcoin/bitcoin/pull/23411#discussion_r746546198,746546198,src/node/coinstats.cpp
MarcoFalke,2021-11-10 17:52:50,"Thx, done",https://github.com/bitcoin/bitcoin/pull/23411#discussion_r746839547,746839547,src/node/coinstats.cpp
