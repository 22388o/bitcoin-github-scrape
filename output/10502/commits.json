[
  {
    "sha": "a5410ac5ece4ef4d52eab07201c5f6c6c4501921",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNTQxMGFjNWVjZTRlZjRkNTJlYWIwNzIwMWM1ZjZjNmM0NTAxOTIx",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-06-01T20:22:33Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-06-05T18:02:30Z"
      },
      "message": "Small preparations for Q_FOREACH, PAIRTYPE and #include <boost/foreach.hpp> removal",
      "tree": {
        "sha": "996900e1990d9c06ef3312c90713bdd30b481faa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/996900e1990d9c06ef3312c90713bdd30b481faa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a5410ac5ece4ef4d52eab07201c5f6c6c4501921",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJZNZy2AAoJEIhmwY6hyUSiJcIQAM/GeLUhjQ21WedEkfO9zAGU\ncilzVMwin5EhE4Stcn/cdQM5RWJbMsyyrz5GRCUR9jjQJIKrdChDkBvxoIdECJ5W\nPX2ieev+jJg7etAOZkDKoEvdDX2hGK6kPHPBUgPc5B1OiQMgjK0qSi0ucXjMw38k\n6r52jQN/FRYrT6+xN8zl0nIhtpU2+rBvqxDQ6uyZ1wtK0DC1RJp9bw7ImIDaZMOs\nEPhHdMQY8TgFI7lR7BGkD+jx9Xl7FgLcO+leJHuZAxQfoJRTasfiFFpEob8hFB8Y\nnpkIs1CU2gW/sPPYUK8VxhCErCrQPPfgvrslsK3iBv3M4RVtW4fxZGgp7YBl222y\nTc5kTUmp4jxU4MfHBpedUmEAjYLBRcdLOSoMr/Mzlo91KilID5IuHAqW6l8M1jGA\nDCf3W/xoOsUwsqTyIKHtpd3SFKlA6816djvF9IgVHzXEFdxNGKiQSr6+Cve/3Lxr\n5qirKGlnCpGb2ckmWxLV1v273uY+NSf1M0WYk2v/qOdnd93UauHaIhFUD0bKl5Z8\nR5XynrPaJ7ZPG/fQEdo7lF+cnQCBud83OY/yHwh2xjsNlGQ7rC57j5TYS73xjOFf\nhbtUe65sLCqdZDQVz62YtH/D+Q9c3+JRds1hC9xYig7WPQcXBKPY05uCwDBqlwN9\nGH1nv6L4RMH7puxANkza\n=W3DE\n-----END PGP SIGNATURE-----",
        "payload": "tree 996900e1990d9c06ef3312c90713bdd30b481faa\nparent 9fec4da0bec93a49798b5f5e92cf76e900759ee4\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1496348553 +0200\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1496685750 +0200\n\nSmall preparations for Q_FOREACH, PAIRTYPE and #include <boost/foreach.hpp> removal\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a5410ac5ece4ef4d52eab07201c5f6c6c4501921",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a5410ac5ece4ef4d52eab07201c5f6c6c4501921",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a5410ac5ece4ef4d52eab07201c5f6c6c4501921/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9fec4da0bec93a49798b5f5e92cf76e900759ee4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9fec4da0bec93a49798b5f5e92cf76e900759ee4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9fec4da0bec93a49798b5f5e92cf76e900759ee4"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 2,
      "deletions": 5
    },
    "files": [
      {
        "sha": "f1eb1c36e7b020b1a9ca380928a0dac3109a3788",
        "filename": "src/httprpc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5410ac5ece4ef4d52eab07201c5f6c6c4501921/src/httprpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5410ac5ece4ef4d52eab07201c5f6c6c4501921/src/httprpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.cpp?ref=a5410ac5ece4ef4d52eab07201c5f6c6c4501921",
        "patch": "@@ -19,7 +19,7 @@\n #include \"utilstrencodings.h\"\n \n #include <boost/algorithm/string.hpp> // boost::trim\n-#include <boost/foreach.hpp> //BOOST_FOREACH\n+#include <boost/foreach.hpp>\n \n /** WWW-Authenticate to present with 401 Unauthorized response */\n static const char* WWW_AUTH_HEADER_DATA = \"Basic realm=\\\"jsonrpc\\\"\";"
      },
      {
        "sha": "64a0d0058c5ebe59eeea0c20b9c1a32531554f54",
        "filename": "src/qt/platformstyle.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5410ac5ece4ef4d52eab07201c5f6c6c4501921/src/qt/platformstyle.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5410ac5ece4ef4d52eab07201c5f6c6c4501921/src/qt/platformstyle.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/platformstyle.cpp?ref=a5410ac5ece4ef4d52eab07201c5f6c6c4501921",
        "patch": "@@ -48,8 +48,7 @@ void MakeSingleColorImage(QImage& img, const QColor& colorbase)\n QIcon ColorizeIcon(const QIcon& ico, const QColor& colorbase)\n {\n     QIcon new_ico;\n-    QSize sz;\n-    Q_FOREACH(sz, ico.availableSizes())\n+    Q_FOREACH(const QSize sz, ico.availableSizes())\n     {\n         QImage img(ico.pixmap(sz).toImage());\n         MakeSingleColorImage(img, colorbase);"
      },
      {
        "sha": "8846cb47eef0833f561237c1ee3a6210cc087d02",
        "filename": "src/utilstrencodings.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5410ac5ece4ef4d52eab07201c5f6c6c4501921/src/utilstrencodings.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5410ac5ece4ef4d52eab07201c5f6c6c4501921/src/utilstrencodings.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utilstrencodings.h?ref=a5410ac5ece4ef4d52eab07201c5f6c6c4501921",
        "patch": "@@ -18,8 +18,6 @@\n #define UBEGIN(a)           ((unsigned char*)&(a))\n #define UEND(a)             ((unsigned char*)&((&(a))[1]))\n #define ARRAYLEN(array)     (sizeof(array)/sizeof((array)[0]))\n-\n-/** This is needed because the foreach macro can't get over the comma in pair<t1, t2> */\n #define PAIRTYPE(t1, t2)    std::pair<t1, t2>\n \n /** Used by SanitizeString() */"
      }
    ]
  },
  {
    "sha": "7c00c267264ad80c2991b2f6c2ae08c2d9c9732b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YzAwYzI2NzI2NGFkODBjMjk5MWIyZjZjMmFlMDhjMmQ5Yzk3MzJi",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-06-02T01:18:57Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-06-05T18:10:50Z"
      },
      "message": "scripted-diff: Fully remove BOOST_FOREACH\n\n-BEGIN VERIFY SCRIPT-\nsed -i 's/BOOST_FOREACH *(\\(.*\\),/for (\\1 :/' ./src/*.h ./src/*.cpp ./src/*/*.h ./src/*/*.cpp ./src/*/*/*.h ./src/*/*/*.cpp ;\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "ced05e4a7ca759b23c0306092a66aa0e1c65ce36",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ced05e4a7ca759b23c0306092a66aa0e1c65ce36"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJZNZ60AAoJEIhmwY6hyUSiK7kP/RoHT9qPb2MPZdC63tzDvn0Q\n9VZR2Z/utmeM4aS7t9vtCSiYeVatAqESj/4IjdKLT0vkkJHs5escv61dKfjz/5NQ\nviDB88xBI4Y7BvUBgNSHS1vlbTH6hagTz9JYY4x+dOVVdae9un3wfXNzH+a4ByT1\nyNU4A/+FQ6GqiGZFL3KKdI0cQqqadEdo7tPmi8mCSMBxQaPlsWTQCM6Cmp+g2ZCt\nAvyLhttFtyLhYgbyqg06PytPodoxRO5oXMLxMnizfdJGNcTiKbf2RcmrgSaYXBPD\nKw68drUxdwY1WB/VevN0tNT9UmknCY2jT6qJwDlGbwGDx5eI/Hk5ki1zauqkR+Kd\nhzTex2zTUcNmGaZO0EGc10G3ZUILw99uyktWsTV5V0SjjhkEnM59v8zDp+6DAtOa\npvf2MsRYjPjskppGDiplZMqDu3C9u3NZ/Oa7qnhVx03jgOyyZeyXmgqphjXAbFmu\nMHn4atJDi8ksx/eNYKa45skaGjnqkFlWTCR5FPrL+ot33VTdIITCJCLWCkFhma/a\nrB/QOGTkaRYkIwarYeicR7POPIoW6pLLaKqpnfEgkN9gF0XDQbozfiAXfEFsROk0\nux4678yPNNgs8J//HRKWgl5gxfqfxPACkaztr/uMtsMXoH0RdsC0/JuSfTwvjHDE\nKyDveNS0fqAQRIpP5MD1\n=9SOi\n-----END PGP SIGNATURE-----",
        "payload": "tree ced05e4a7ca759b23c0306092a66aa0e1c65ce36\nparent a5410ac5ece4ef4d52eab07201c5f6c6c4501921\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1496366337 +0200\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1496686250 +0200\n\nscripted-diff: Fully remove BOOST_FOREACH\n\n-BEGIN VERIFY SCRIPT-\nsed -i 's/BOOST_FOREACH *(\\(.*\\),/for (\\1 :/' ./src/*.h ./src/*.cpp ./src/*/*.h ./src/*/*.cpp ./src/*/*/*.h ./src/*/*/*.cpp ;\n-END VERIFY SCRIPT-\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a5410ac5ece4ef4d52eab07201c5f6c6c4501921",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a5410ac5ece4ef4d52eab07201c5f6c6c4501921",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a5410ac5ece4ef4d52eab07201c5f6c6c4501921"
      }
    ],
    "stats": {
      "total": 532,
      "additions": 266,
      "deletions": 266
    },
    "files": [
      {
        "sha": "942942c29966659e80e43f081c026faf1ff83e61",
        "filename": "src/bench/coin_selection.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b/src/bench/coin_selection.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b/src/bench/coin_selection.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/coin_selection.cpp?ref=7c00c267264ad80c2991b2f6c2ae08c2d9c9732b",
        "patch": "@@ -39,7 +39,7 @@ static void CoinSelection(benchmark::State& state)\n \n     while (state.KeepRunning()) {\n         // Empty wallet.\n-        BOOST_FOREACH (COutput output, vCoins)\n+        for (COutput output : vCoins)\n             delete output.tx;\n         vCoins.clear();\n "
      },
      {
        "sha": "8d43822f8064e71c4c260e9e1cd707f60b9a4ba5",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=7c00c267264ad80c2991b2f6c2ae08c2d9c9732b",
        "patch": "@@ -611,7 +611,7 @@ static void MutateTxSign(CMutableTransaction& tx, const std::string& flagStr)\n             ProduceSignature(MutableTransactionSignatureCreator(&keystore, &mergedTx, i, amount, nHashType), prevPubKey, sigdata);\n \n         // ... and merge in other signatures:\n-        BOOST_FOREACH(const CTransaction& txv, txVariants)\n+        for (const CTransaction& txv : txVariants)\n             sigdata = CombineSignatures(prevPubKey, MutableTransactionSignatureChecker(&mergedTx, i, amount), sigdata, DataFromTransaction(txv, i));\n         UpdateTransaction(mergedTx, i, sigdata);\n "
      },
      {
        "sha": "cc3baa9185b581b587c7f1c19c5b614ce6488a02",
        "filename": "src/bloom.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b/src/bloom.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b/src/bloom.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.cpp?ref=7c00c267264ad80c2991b2f6c2ae08c2d9c9732b",
        "patch": "@@ -179,7 +179,7 @@ bool CBloomFilter::IsRelevantAndUpdate(const CTransaction& tx)\n     if (fFound)\n         return true;\n \n-    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+    for (const CTxIn& txin : tx.vin)\n     {\n         // Match if the filter contains an outpoint tx spends\n         if (contains(txin.prevout))"
      },
      {
        "sha": "ff10b9938cf9796240a2da474f6ebdffb3de14de",
        "filename": "src/checkqueue.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b/src/checkqueue.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b/src/checkqueue.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkqueue.h?ref=7c00c267264ad80c2991b2f6c2ae08c2d9c9732b",
        "patch": "@@ -121,7 +121,7 @@ class CCheckQueue\n                 fOk = fAllOk;\n             }\n             // execute work\n-            BOOST_FOREACH (T& check, vChecks)\n+            for (T& check : vChecks)\n                 if (fOk)\n                     fOk = check();\n             vChecks.clear();\n@@ -151,7 +151,7 @@ class CCheckQueue\n     void Add(std::vector<T>& vChecks)\n     {\n         boost::unique_lock<boost::mutex> lock(mutex);\n-        BOOST_FOREACH (T& check, vChecks) {\n+        for (T& check : vChecks) {\n             queue.push_back(T());\n             check.swap(queue.back());\n         }"
      },
      {
        "sha": "5271b01b88b6aea660e70c5c75a73cc9442358ba",
        "filename": "src/core_write.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b/src/core_write.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b/src/core_write.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_write.cpp?ref=7c00c267264ad80c2991b2f6c2ae08c2d9c9732b",
        "patch": "@@ -141,7 +141,7 @@ void ScriptPubKeyToUniv(const CScript& scriptPubKey,\n     out.pushKV(\"type\", GetTxnOutputType(type));\n \n     UniValue a(UniValue::VARR);\n-    BOOST_FOREACH(const CTxDestination& addr, addresses)\n+    for (const CTxDestination& addr : addresses)\n         a.push_back(CBitcoinAddress(addr).ToString());\n     out.pushKV(\"addresses\", a);\n }"
      },
      {
        "sha": "f6d42bf7eac9012de8b8c091febdf7035dc36a1b",
        "filename": "src/httprpc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b/src/httprpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b/src/httprpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.cpp?ref=7c00c267264ad80c2991b2f6c2ae08c2d9c9732b",
        "patch": "@@ -95,7 +95,7 @@ static bool multiUserAuthorized(std::string strUserPass)\n \n     if (gArgs.IsArgSet(\"-rpcauth\")) {\n         //Search for multi-user login/pass \"rpcauth\" from config\n-        BOOST_FOREACH(std::string strRPCAuth, gArgs.GetArgs(\"-rpcauth\"))\n+        for (std::string strRPCAuth : gArgs.GetArgs(\"-rpcauth\"))\n         {\n             std::vector<std::string> vFields;\n             boost::split(vFields, strRPCAuth, boost::is_any_of(\":$\"));"
      },
      {
        "sha": "2c1f93727e39c89446994a3d529e5f522b16da17",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=7c00c267264ad80c2991b2f6c2ae08c2d9c9732b",
        "patch": "@@ -611,7 +611,7 @@ void CleanupBlockRevFiles()\n     // keeping a separate counter.  Once we hit a gap (or if 0 doesn't exist)\n     // start removing block files.\n     int nContigCounter = 0;\n-    BOOST_FOREACH(const PAIRTYPE(std::string, fs::path)& item, mapBlockFiles) {\n+    for (const PAIRTYPE(std::string, fs::path)& item : mapBlockFiles) {\n         if (atoi(item.first) == nContigCounter) {\n             nContigCounter++;\n             continue;\n@@ -664,7 +664,7 @@ void ThreadImport(std::vector<fs::path> vImportFiles)\n     }\n \n     // -loadblock=\n-    BOOST_FOREACH(const fs::path& path, vImportFiles) {\n+    for (const fs::path& path : vImportFiles) {\n         FILE *file = fsbridge::fopen(path, \"rb\");\n         if (file) {\n             LogPrintf(\"Importing blocks file %s...\\n\", path.string());\n@@ -1258,7 +1258,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n     // sanitize comments per BIP-0014, format user agent and check total size\n     std::vector<std::string> uacomments;\n     if (gArgs.IsArgSet(\"-uacomment\")) {\n-        BOOST_FOREACH(std::string cmt, gArgs.GetArgs(\"-uacomment\"))\n+        for (std::string cmt : gArgs.GetArgs(\"-uacomment\"))\n         {\n             if (cmt != SanitizeString(cmt, SAFE_CHARS_UA_COMMENT))\n                 return InitError(strprintf(_(\"User Agent comment (%s) contains unsafe characters.\"), cmt));\n@@ -1273,7 +1273,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n     if (gArgs.IsArgSet(\"-onlynet\")) {\n         std::set<enum Network> nets;\n-        BOOST_FOREACH(const std::string& snet, gArgs.GetArgs(\"-onlynet\")) {\n+        for (const std::string& snet : gArgs.GetArgs(\"-onlynet\")) {\n             enum Network net = ParseNetwork(snet);\n             if (net == NET_UNROUTABLE)\n                 return InitError(strprintf(_(\"Unknown network specified in -onlynet: '%s'\"), snet));\n@@ -1287,7 +1287,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n     }\n \n     if (gArgs.IsArgSet(\"-whitelist\")) {\n-        BOOST_FOREACH(const std::string& net, gArgs.GetArgs(\"-whitelist\")) {\n+        for (const std::string& net : gArgs.GetArgs(\"-whitelist\")) {\n             CSubNet subnet;\n             LookupSubNet(net.c_str(), subnet);\n             if (!subnet.IsValid())\n@@ -1349,15 +1349,15 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n     if (fListen) {\n         bool fBound = false;\n         if (gArgs.IsArgSet(\"-bind\")) {\n-            BOOST_FOREACH(const std::string& strBind, gArgs.GetArgs(\"-bind\")) {\n+            for (const std::string& strBind : gArgs.GetArgs(\"-bind\")) {\n                 CService addrBind;\n                 if (!Lookup(strBind.c_str(), addrBind, GetListenPort(), false))\n                     return InitError(ResolveErrMsg(\"bind\", strBind));\n                 fBound |= Bind(connman, addrBind, (BF_EXPLICIT | BF_REPORT_ERROR));\n             }\n         }\n         if (gArgs.IsArgSet(\"-whitebind\")) {\n-            BOOST_FOREACH(const std::string& strBind, gArgs.GetArgs(\"-whitebind\")) {\n+            for (const std::string& strBind : gArgs.GetArgs(\"-whitebind\")) {\n                 CService addrBind;\n                 if (!Lookup(strBind.c_str(), addrBind, 0, false))\n                     return InitError(ResolveErrMsg(\"whitebind\", strBind));\n@@ -1377,7 +1377,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n     }\n \n     if (gArgs.IsArgSet(\"-externalip\")) {\n-        BOOST_FOREACH(const std::string& strAddr, gArgs.GetArgs(\"-externalip\")) {\n+        for (const std::string& strAddr : gArgs.GetArgs(\"-externalip\")) {\n             CService addrLocal;\n             if (Lookup(strAddr.c_str(), addrLocal, GetListenPort(), fNameLookup) && addrLocal.IsValid())\n                 AddLocal(addrLocal, LOCAL_MANUAL);\n@@ -1616,7 +1616,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n     std::vector<fs::path> vImportFiles;\n     if (gArgs.IsArgSet(\"-loadblock\"))\n     {\n-        BOOST_FOREACH(const std::string& strFile, gArgs.GetArgs(\"-loadblock\"))\n+        for (const std::string& strFile : gArgs.GetArgs(\"-loadblock\"))\n             vImportFiles.push_back(strFile);\n     }\n "
      },
      {
        "sha": "79016bfd3eef4e13297f52749432c3955e5cbe52",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=7c00c267264ad80c2991b2f6c2ae08c2d9c9732b",
        "patch": "@@ -242,7 +242,7 @@ bool BlockAssembler::TestPackage(uint64_t packageSize, int64_t packageSigOpsCost\n bool BlockAssembler::TestPackageTransactions(const CTxMemPool::setEntries& package)\n {\n     uint64_t nPotentialBlockSize = nBlockSize; // only used with fNeedSizeAccounting\n-    BOOST_FOREACH (const CTxMemPool::txiter it, package) {\n+    for (const CTxMemPool::txiter it : package) {\n         if (!IsFinalTx(it->GetTx(), nHeight, nLockTimeCutoff))\n             return false;\n         if (!fIncludeWitness && it->GetTx().HasWitness())\n@@ -284,11 +284,11 @@ int BlockAssembler::UpdatePackagesForAdded(const CTxMemPool::setEntries& already\n         indexed_modified_transaction_set &mapModifiedTx)\n {\n     int nDescendantsUpdated = 0;\n-    BOOST_FOREACH(const CTxMemPool::txiter it, alreadyAdded) {\n+    for (const CTxMemPool::txiter it : alreadyAdded) {\n         CTxMemPool::setEntries descendants;\n         mempool.CalculateDescendants(it, descendants);\n         // Insert all descendants (not yet in block) into the modified set\n-        BOOST_FOREACH(CTxMemPool::txiter desc, descendants) {\n+        for (CTxMemPool::txiter desc : descendants) {\n             if (alreadyAdded.count(desc))\n                 continue;\n             ++nDescendantsUpdated;"
      },
      {
        "sha": "a8119e9435bcfa3563a210b493ee9f6eb72f08b7",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 34,
        "deletions": 34,
        "changes": 68,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=7c00c267264ad80c2991b2f6c2ae08c2d9c9732b",
        "patch": "@@ -295,7 +295,7 @@ bool IsReachable(const CNetAddr& addr)\n CNode* CConnman::FindNode(const CNetAddr& ip)\n {\n     LOCK(cs_vNodes);\n-    BOOST_FOREACH(CNode* pnode, vNodes)\n+    for (CNode* pnode : vNodes)\n         if ((CNetAddr)pnode->addr == ip)\n             return (pnode);\n     return NULL;\n@@ -304,7 +304,7 @@ CNode* CConnman::FindNode(const CNetAddr& ip)\n CNode* CConnman::FindNode(const CSubNet& subNet)\n {\n     LOCK(cs_vNodes);\n-    BOOST_FOREACH(CNode* pnode, vNodes)\n+    for (CNode* pnode : vNodes)\n     if (subNet.Match((CNetAddr)pnode->addr))\n         return (pnode);\n     return NULL;\n@@ -313,7 +313,7 @@ CNode* CConnman::FindNode(const CSubNet& subNet)\n CNode* CConnman::FindNode(const std::string& addrName)\n {\n     LOCK(cs_vNodes);\n-    BOOST_FOREACH(CNode* pnode, vNodes) {\n+    for (CNode* pnode : vNodes) {\n         if (pnode->GetAddrName() == addrName) {\n             return (pnode);\n         }\n@@ -324,7 +324,7 @@ CNode* CConnman::FindNode(const std::string& addrName)\n CNode* CConnman::FindNode(const CService& addr)\n {\n     LOCK(cs_vNodes);\n-    BOOST_FOREACH(CNode* pnode, vNodes)\n+    for (CNode* pnode : vNodes)\n         if ((CService)pnode->addr == addr)\n             return (pnode);\n     return NULL;\n@@ -333,7 +333,7 @@ CNode* CConnman::FindNode(const CService& addr)\n bool CConnman::CheckIncomingNonce(uint64_t nonce)\n {\n     LOCK(cs_vNodes);\n-    BOOST_FOREACH(CNode* pnode, vNodes) {\n+    for (CNode* pnode : vNodes) {\n         if (!pnode->fSuccessfullyConnected && !pnode->fInbound && pnode->GetLocalNonce() == nonce)\n             return false;\n     }\n@@ -528,7 +528,7 @@ void CConnman::Ban(const CSubNet& subNet, const BanReason &banReason, int64_t ba\n         clientInterface->BannedListChanged();\n     {\n         LOCK(cs_vNodes);\n-        BOOST_FOREACH(CNode* pnode, vNodes) {\n+        for (CNode* pnode : vNodes) {\n             if (subNet.Match((CNetAddr)pnode->addr))\n                 pnode->fDisconnect = true;\n         }\n@@ -606,7 +606,7 @@ void CConnman::SetBannedSetDirty(bool dirty)\n \n bool CConnman::IsWhitelistedRange(const CNetAddr &addr) {\n     LOCK(cs_vWhitelistedRange);\n-    BOOST_FOREACH(const CSubNet& subnet, vWhitelistedRange) {\n+    for (const CSubNet& subnet : vWhitelistedRange) {\n         if (subnet.Match(addr))\n             return true;\n     }\n@@ -959,7 +959,7 @@ bool CConnman::AttemptToEvictConnection()\n     {\n         LOCK(cs_vNodes);\n \n-        BOOST_FOREACH(CNode *node, vNodes) {\n+        for (CNode *node : vNodes) {\n             if (node->fWhitelisted)\n                 continue;\n             if (!node->fInbound)\n@@ -1019,7 +1019,7 @@ bool CConnman::AttemptToEvictConnection()\n     unsigned int nMostConnections = 0;\n     int64_t nMostConnectionsTime = 0;\n     std::map<uint64_t, std::vector<NodeEvictionCandidate> > mapNetGroupNodes;\n-    BOOST_FOREACH(const NodeEvictionCandidate &node, vEvictionCandidates) {\n+    for (const NodeEvictionCandidate &node : vEvictionCandidates) {\n         mapNetGroupNodes[node.nKeyedNetGroup].push_back(node);\n         int64_t grouptime = mapNetGroupNodes[node.nKeyedNetGroup][0].nTimeConnected;\n         size_t groupsize = mapNetGroupNodes[node.nKeyedNetGroup].size();\n@@ -1063,7 +1063,7 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n     bool whitelisted = hListenSocket.whitelisted || IsWhitelistedRange(addr);\n     {\n         LOCK(cs_vNodes);\n-        BOOST_FOREACH(CNode* pnode, vNodes)\n+        for (CNode* pnode : vNodes)\n             if (pnode->fInbound)\n                 nInbound++;\n     }\n@@ -1139,7 +1139,7 @@ void CConnman::ThreadSocketHandler()\n             LOCK(cs_vNodes);\n             // Disconnect unused nodes\n             std::vector<CNode*> vNodesCopy = vNodes;\n-            BOOST_FOREACH(CNode* pnode, vNodesCopy)\n+            for (CNode* pnode : vNodesCopy)\n             {\n                 if (pnode->fDisconnect)\n                 {\n@@ -1161,7 +1161,7 @@ void CConnman::ThreadSocketHandler()\n         {\n             // Delete disconnected nodes\n             std::list<CNode*> vNodesDisconnectedCopy = vNodesDisconnected;\n-            BOOST_FOREACH(CNode* pnode, vNodesDisconnectedCopy)\n+            for (CNode* pnode : vNodesDisconnectedCopy)\n             {\n                 // wait until threads are done using it\n                 if (pnode->GetRefCount() <= 0) {\n@@ -1209,15 +1209,15 @@ void CConnman::ThreadSocketHandler()\n         SOCKET hSocketMax = 0;\n         bool have_fds = false;\n \n-        BOOST_FOREACH(const ListenSocket& hListenSocket, vhListenSocket) {\n+        for (const ListenSocket& hListenSocket : vhListenSocket) {\n             FD_SET(hListenSocket.socket, &fdsetRecv);\n             hSocketMax = std::max(hSocketMax, hListenSocket.socket);\n             have_fds = true;\n         }\n \n         {\n             LOCK(cs_vNodes);\n-            BOOST_FOREACH(CNode* pnode, vNodes)\n+            for (CNode* pnode : vNodes)\n             {\n                 // Implement the following logic:\n                 // * If there is data to send, select() for sending data. As this only\n@@ -1278,7 +1278,7 @@ void CConnman::ThreadSocketHandler()\n         //\n         // Accept new connections\n         //\n-        BOOST_FOREACH(const ListenSocket& hListenSocket, vhListenSocket)\n+        for (const ListenSocket& hListenSocket : vhListenSocket)\n         {\n             if (hListenSocket.socket != INVALID_SOCKET && FD_ISSET(hListenSocket.socket, &fdsetRecv))\n             {\n@@ -1293,10 +1293,10 @@ void CConnman::ThreadSocketHandler()\n         {\n             LOCK(cs_vNodes);\n             vNodesCopy = vNodes;\n-            BOOST_FOREACH(CNode* pnode, vNodesCopy)\n+            for (CNode* pnode : vNodesCopy)\n                 pnode->AddRef();\n         }\n-        BOOST_FOREACH(CNode* pnode, vNodesCopy)\n+        for (CNode* pnode : vNodesCopy)\n         {\n             if (interruptNet)\n                 return;\n@@ -1417,7 +1417,7 @@ void CConnman::ThreadSocketHandler()\n         }\n         {\n             LOCK(cs_vNodes);\n-            BOOST_FOREACH(CNode* pnode, vNodesCopy)\n+            for (CNode* pnode : vNodesCopy)\n                 pnode->Release();\n         }\n     }\n@@ -1598,7 +1598,7 @@ void CConnman::ThreadDNSAddressSeed()\n \n     LogPrintf(\"Loading addresses from DNS seeds (could take a while)\\n\");\n \n-    BOOST_FOREACH(const CDNSSeedData &seed, vSeeds) {\n+    for (const CDNSSeedData &seed : vSeeds) {\n         if (interruptNet) {\n             return;\n         }\n@@ -1610,7 +1610,7 @@ void CConnman::ThreadDNSAddressSeed()\n             ServiceFlags requiredServiceBits = nRelevantServices;\n             if (LookupHost(GetDNSHost(seed, &requiredServiceBits).c_str(), vIPs, 0, true))\n             {\n-                BOOST_FOREACH(const CNetAddr& ip, vIPs)\n+                for (const CNetAddr& ip : vIPs)\n                 {\n                     int nOneDay = 24*3600;\n                     CAddress addr = CAddress(CService(ip, Params().GetDefaultPort()), requiredServiceBits);\n@@ -1691,7 +1691,7 @@ void CConnman::ThreadOpenConnections()\n         for (int64_t nLoop = 0;; nLoop++)\n         {\n             ProcessOneShot();\n-            BOOST_FOREACH(const std::string& strAddr, gArgs.GetArgs(\"-connect\"))\n+            for (const std::string& strAddr : gArgs.GetArgs(\"-connect\"))\n             {\n                 CAddress addr(CService(), NODE_NONE);\n                 OpenNetworkConnection(addr, false, NULL, strAddr.c_str());\n@@ -1746,7 +1746,7 @@ void CConnman::ThreadOpenConnections()\n         std::set<std::vector<unsigned char> > setConnected;\n         {\n             LOCK(cs_vNodes);\n-            BOOST_FOREACH(CNode* pnode, vNodes) {\n+            for (CNode* pnode : vNodes) {\n                 if (!pnode->fInbound && !pnode->fAddnode) {\n \n                     // Count the peers that have all relevant services\n@@ -1863,7 +1863,7 @@ std::vector<AddedNodeInfo> CConnman::GetAddedNodeInfo()\n     {\n         LOCK(cs_vAddedNodes);\n         ret.reserve(vAddedNodes.size());\n-        BOOST_FOREACH(const std::string& strAddNode, vAddedNodes)\n+        for (const std::string& strAddNode : vAddedNodes)\n             lAddresses.push_back(strAddNode);\n     }\n \n@@ -1884,7 +1884,7 @@ std::vector<AddedNodeInfo> CConnman::GetAddedNodeInfo()\n         }\n     }\n \n-    BOOST_FOREACH(const std::string& strAddNode, lAddresses) {\n+    for (const std::string& strAddNode : lAddresses) {\n         CService service(LookupNumeric(strAddNode.c_str(), Params().GetDefaultPort()));\n         if (service.IsValid()) {\n             // strAddNode is an IP:port\n@@ -1993,14 +1993,14 @@ void CConnman::ThreadMessageHandler()\n         {\n             LOCK(cs_vNodes);\n             vNodesCopy = vNodes;\n-            BOOST_FOREACH(CNode* pnode, vNodesCopy) {\n+            for (CNode* pnode : vNodesCopy) {\n                 pnode->AddRef();\n             }\n         }\n \n         bool fMoreWork = false;\n \n-        BOOST_FOREACH(CNode* pnode, vNodesCopy)\n+        for (CNode* pnode : vNodesCopy)\n         {\n             if (pnode->fDisconnect)\n                 continue;\n@@ -2022,7 +2022,7 @@ void CConnman::ThreadMessageHandler()\n \n         {\n             LOCK(cs_vNodes);\n-            BOOST_FOREACH(CNode* pnode, vNodesCopy)\n+            for (CNode* pnode : vNodesCopy)\n                 pnode->Release();\n         }\n \n@@ -2150,7 +2150,7 @@ void Discover(boost::thread_group& threadGroup)\n         std::vector<CNetAddr> vaddr;\n         if (LookupHost(pszHostName, vaddr, 0, true))\n         {\n-            BOOST_FOREACH (const CNetAddr &addr, vaddr)\n+            for (const CNetAddr &addr : vaddr)\n             {\n                 if (AddLocal(addr, LOCAL_IF))\n                     LogPrintf(\"%s: %s - %s\\n\", __func__, pszHostName, addr.ToString());\n@@ -2197,7 +2197,7 @@ void CConnman::SetNetworkActive(bool active)\n \n         LOCK(cs_vNodes);\n         // Close sockets to all nodes\n-        BOOST_FOREACH(CNode* pnode, vNodes) {\n+        for (CNode* pnode : vNodes) {\n             pnode->CloseSocketDisconnect();\n         }\n     } else {\n@@ -2399,18 +2399,18 @@ void CConnman::Stop()\n     }\n \n     // Close sockets\n-    BOOST_FOREACH(CNode* pnode, vNodes)\n+    for (CNode* pnode : vNodes)\n         pnode->CloseSocketDisconnect();\n-    BOOST_FOREACH(ListenSocket& hListenSocket, vhListenSocket)\n+    for (ListenSocket& hListenSocket : vhListenSocket)\n         if (hListenSocket.socket != INVALID_SOCKET)\n             if (!CloseSocket(hListenSocket.socket))\n                 LogPrintf(\"CloseSocket(hListenSocket) failed with error %s\\n\", NetworkErrorString(WSAGetLastError()));\n \n     // clean up some globals (to help leak detection)\n-    BOOST_FOREACH(CNode *pnode, vNodes) {\n+    for (CNode *pnode : vNodes) {\n         DeleteNode(pnode);\n     }\n-    BOOST_FOREACH(CNode *pnode, vNodesDisconnected) {\n+    for (CNode *pnode : vNodesDisconnected) {\n         DeleteNode(pnode);\n     }\n     vNodes.clear();\n@@ -2722,7 +2722,7 @@ CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn\n     fPauseSend = false;\n     nProcessQueueSize = 0;\n \n-    BOOST_FOREACH(const std::string &msg, getAllNetMessageTypes())\n+    for (const std::string &msg : getAllNetMessageTypes())\n         mapRecvBytesPerMsgCmd[msg] = 0;\n     mapRecvBytesPerMsgCmd[NET_MESSAGE_COMMAND_OTHER] = 0;\n "
      },
      {
        "sha": "7ec28ce2aea3c4a8d99730b48223a1d1826198e9",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 17,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=7c00c267264ad80c2991b2f6c2ae08c2d9c9732b",
        "patch": "@@ -287,7 +287,7 @@ void FinalizeNode(NodeId nodeid, bool& fUpdateConnectionTime) {\n         fUpdateConnectionTime = true;\n     }\n \n-    BOOST_FOREACH(const QueuedBlock& entry, state->vBlocksInFlight) {\n+    for (const QueuedBlock& entry : state->vBlocksInFlight) {\n         mapBlocksInFlight.erase(entry.hash);\n     }\n     EraseOrphansFor(nodeid);\n@@ -522,7 +522,7 @@ void FindNextBlocksToDownload(NodeId nodeid, unsigned int count, std::vector<con\n         // are not yet downloaded and not in flight to vBlocks. In the mean time, update\n         // pindexLastCommonBlock as long as all ancestors are already downloaded, or if it's\n         // already part of our chain (and therefore don't need it even if pruned).\n-        BOOST_FOREACH(const CBlockIndex* pindex, vToFetch) {\n+        for (const CBlockIndex* pindex : vToFetch) {\n             if (!pindex->IsValid(BLOCK_VALID_TREE)) {\n                 // We consider the chain that this peer is on invalid.\n                 return;\n@@ -566,7 +566,7 @@ bool GetNodeStateStats(NodeId nodeid, CNodeStateStats &stats) {\n     stats.nMisbehavior = state->nMisbehavior;\n     stats.nSyncHeight = state->pindexBestKnownBlock ? state->pindexBestKnownBlock->nHeight : -1;\n     stats.nCommonHeight = state->pindexLastCommonBlock ? state->pindexLastCommonBlock->nHeight : -1;\n-    BOOST_FOREACH(const QueuedBlock& queue, state->vBlocksInFlight) {\n+    for (const QueuedBlock& queue : state->vBlocksInFlight) {\n         if (queue.pindex)\n             stats.vHeightInFlight.push_back(queue.pindex->nHeight);\n     }\n@@ -627,7 +627,7 @@ bool AddOrphanTx(const CTransactionRef& tx, NodeId peer) EXCLUSIVE_LOCKS_REQUIRE\n \n     auto ret = mapOrphanTransactions.emplace(hash, COrphanTx{tx, peer, GetTime() + ORPHAN_TX_EXPIRE_TIME});\n     assert(ret.second);\n-    BOOST_FOREACH(const CTxIn& txin, tx->vin) {\n+    for (const CTxIn& txin : tx->vin) {\n         mapOrphanTransactionsByPrev[txin.prevout].insert(ret.first);\n     }\n \n@@ -643,7 +643,7 @@ int static EraseOrphanTx(uint256 hash) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n     std::map<uint256, COrphanTx>::iterator it = mapOrphanTransactions.find(hash);\n     if (it == mapOrphanTransactions.end())\n         return 0;\n-    BOOST_FOREACH(const CTxIn& txin, it->second.tx->vin)\n+    for (const CTxIn& txin : it->second.tx->vin)\n     {\n         auto itPrev = mapOrphanTransactionsByPrev.find(txin.prevout);\n         if (itPrev == mapOrphanTransactionsByPrev.end())\n@@ -768,7 +768,7 @@ void PeerLogicValidation::BlockConnected(const std::shared_ptr<const CBlock>& pb\n     // Erase orphan transactions include or precluded by this block\n     if (vOrphanErase.size()) {\n         int nErased = 0;\n-        BOOST_FOREACH(uint256 &orphanHash, vOrphanErase) {\n+        for (uint256 &orphanHash : vOrphanErase) {\n             nErased += EraseOrphanTx(orphanHash);\n         }\n         LogPrint(BCLog::MEMPOOL, \"Erased %d orphan tx included or conflicted by block\\n\", nErased);\n@@ -1078,7 +1078,7 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n                             // Thus, the protocol spec specified allows for us to provide duplicate txn here,\n                             // however we MUST always provide at least what the remote peer needs\n                             typedef std::pair<unsigned int, uint256> PairType;\n-                            BOOST_FOREACH(PairType& pair, merkleBlock.vMatchedTxn)\n+                            for (PairType& pair : merkleBlock.vMatchedTxn)\n                                 connman.PushMessage(pfrom, msgMaker.Make(SERIALIZE_TRANSACTION_NO_WITNESS, NetMsgType::TX, *pblock->vtx[pair.first]));\n                         }\n                         // else\n@@ -1473,7 +1473,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         std::vector<CAddress> vAddrOk;\n         int64_t nNow = GetAdjustedTime();\n         int64_t nSince = nNow - 10 * 60;\n-        BOOST_FOREACH(CAddress& addr, vAddr)\n+        for (CAddress& addr : vAddr)\n         {\n             if (interruptMsgProc)\n                 return true;\n@@ -1883,21 +1883,21 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n                 }\n             }\n \n-            BOOST_FOREACH(uint256 hash, vEraseQueue)\n+            for (uint256 hash : vEraseQueue)\n                 EraseOrphanTx(hash);\n         }\n         else if (fMissingInputs)\n         {\n             bool fRejectedParents = false; // It may be the case that the orphans parents have all been rejected\n-            BOOST_FOREACH(const CTxIn& txin, tx.vin) {\n+            for (const CTxIn& txin : tx.vin) {\n                 if (recentRejects->contains(txin.prevout.hash)) {\n                     fRejectedParents = true;\n                     break;\n                 }\n             }\n             if (!fRejectedParents) {\n                 uint32_t nFetchFlags = GetFetchFlags(pfrom);\n-                BOOST_FOREACH(const CTxIn& txin, tx.vin) {\n+                for (const CTxIn& txin : tx.vin) {\n                     CInv _inv(MSG_TX | nFetchFlags, txin.prevout.hash);\n                     pfrom->AddInventoryKnown(_inv);\n                     if (!AlreadyHave(_inv)) pfrom->AskFor(_inv);\n@@ -2433,7 +2433,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         pfrom->vAddrToSend.clear();\n         std::vector<CAddress> vAddr = connman.GetAddresses();\n         FastRandomContext insecure_rand;\n-        BOOST_FOREACH(const CAddress &addr, vAddr)\n+        for (const CAddress &addr : vAddr)\n             pfrom->PushAddress(addr, insecure_rand);\n     }\n \n@@ -2627,7 +2627,7 @@ static bool SendRejectsAndCheckIfBanned(CNode* pnode, CConnman& connman)\n     AssertLockHeld(cs_main);\n     CNodeState &state = *State(pnode->GetId());\n \n-    BOOST_FOREACH(const CBlockReject& reject, state.rejects) {\n+    for (const CBlockReject& reject : state.rejects) {\n         connman.PushMessage(pnode, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::REJECT, (std::string)NetMsgType::BLOCK, reject.chRejectCode, reject.strRejectReason, reject.hashBlock));\n     }\n     state.rejects.clear();\n@@ -2851,7 +2851,7 @@ bool SendMessages(CNode* pto, CConnman& connman, const std::atomic<bool>& interr\n             pto->nNextAddrSend = PoissonNextSend(nNow, AVG_ADDRESS_BROADCAST_INTERVAL);\n             std::vector<CAddress> vAddr;\n             vAddr.reserve(pto->vAddrToSend.size());\n-            BOOST_FOREACH(const CAddress& addr, pto->vAddrToSend)\n+            for (const CAddress& addr : pto->vAddrToSend)\n             {\n                 if (!pto->addrKnown.contains(addr.GetKey()))\n                 {\n@@ -2929,7 +2929,7 @@ bool SendMessages(CNode* pto, CConnman& connman, const std::atomic<bool>& interr\n                 // Try to find first header that our peer doesn't have, and\n                 // then send all headers past that one.  If we come across any\n                 // headers that aren't on chainActive, give up.\n-                BOOST_FOREACH(const uint256 &hash, pto->vBlockHashesToAnnounce) {\n+                for (const uint256 &hash : pto->vBlockHashesToAnnounce) {\n                     BlockMap::iterator mi = mapBlockIndex.find(hash);\n                     assert(mi != mapBlockIndex.end());\n                     const CBlockIndex *pindex = mi->second;\n@@ -3055,7 +3055,7 @@ bool SendMessages(CNode* pto, CConnman& connman, const std::atomic<bool>& interr\n             vInv.reserve(std::max<size_t>(pto->vInventoryBlockToSend.size(), INVENTORY_BROADCAST_MAX));\n \n             // Add blocks\n-            BOOST_FOREACH(const uint256& hash, pto->vInventoryBlockToSend) {\n+            for (const uint256& hash : pto->vInventoryBlockToSend) {\n                 vInv.push_back(CInv(MSG_BLOCK, hash));\n                 if (vInv.size() == MAX_INV_SZ) {\n                     connman.PushMessage(pto, msgMaker.Make(NetMsgType::INV, vInv));\n@@ -3213,7 +3213,7 @@ bool SendMessages(CNode* pto, CConnman& connman, const std::atomic<bool>& interr\n             std::vector<const CBlockIndex*> vToDownload;\n             NodeId staller = -1;\n             FindNextBlocksToDownload(pto->GetId(), MAX_BLOCKS_IN_TRANSIT_PER_PEER - state.nBlocksInFlight, vToDownload, staller, consensusParams);\n-            BOOST_FOREACH(const CBlockIndex *pindex, vToDownload) {\n+            for (const CBlockIndex *pindex : vToDownload) {\n                 uint32_t nFetchFlags = GetFetchFlags(pto);\n                 vGetData.push_back(CInv(MSG_BLOCK | nFetchFlags, pindex->GetBlockHash()));\n                 MarkBlockAsInFlight(pto->GetId(), pindex->GetBlockHash(), pindex);"
      },
      {
        "sha": "5f68c09a86df9d9f9f4371077bbd012fd25bb216",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=7c00c267264ad80c2991b2f6c2ae08c2d9c9732b",
        "patch": "@@ -111,7 +111,7 @@ bool IsStandardTx(const CTransaction& tx, std::string& reason, const bool witnes\n         return false;\n     }\n \n-    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+    for (const CTxIn& txin : tx.vin)\n     {\n         // Biggest 'standard' txin is a 15-of-15 P2SH multisig with compressed\n         // keys (remember the 520 byte limit on redeemScript size). That works\n@@ -132,7 +132,7 @@ bool IsStandardTx(const CTransaction& tx, std::string& reason, const bool witnes\n \n     unsigned int nDataOut = 0;\n     txnouttype whichType;\n-    BOOST_FOREACH(const CTxOut& txout, tx.vout) {\n+    for (const CTxOut& txout : tx.vout) {\n         if (!::IsStandard(txout.scriptPubKey, whichType, witnessEnabled)) {\n             reason = \"scriptpubkey\";\n             return false;"
      },
      {
        "sha": "755ef83c9af11a3d01efa95216b94eb8f897a167",
        "filename": "src/policy/rbf.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b/src/policy/rbf.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b/src/policy/rbf.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/rbf.cpp?ref=7c00c267264ad80c2991b2f6c2ae08c2d9c9732b",
        "patch": "@@ -6,7 +6,7 @@\n \n bool SignalsOptInRBF(const CTransaction &tx)\n {\n-    BOOST_FOREACH(const CTxIn &txin, tx.vin) {\n+    for (const CTxIn &txin : tx.vin) {\n         if (txin.nSequence < std::numeric_limits<unsigned int>::max()-1) {\n             return true;\n         }\n@@ -38,7 +38,7 @@ RBFTransactionState IsRBFOptIn(const CTransaction &tx, CTxMemPool &pool)\n     CTxMemPoolEntry entry = *pool.mapTx.find(tx.GetHash());\n     pool.CalculateMemPoolAncestors(entry, setAncestors, noLimit, noLimit, noLimit, noLimit, dummy, false);\n \n-    BOOST_FOREACH(CTxMemPool::txiter it, setAncestors) {\n+    for (CTxMemPool::txiter it : setAncestors) {\n         if (SignalsOptInRBF(it->GetTx())) {\n             return RBF_TRANSACTIONSTATE_REPLACEABLE_BIP125;\n         }"
      },
      {
        "sha": "967933abf4e6632f23531b788913d9ee56d9173e",
        "filename": "src/qt/addresstablemodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b/src/qt/addresstablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b/src/qt/addresstablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addresstablemodel.cpp?ref=7c00c267264ad80c2991b2f6c2ae08c2d9c9732b",
        "patch": "@@ -81,7 +81,7 @@ class AddressTablePriv\n         cachedAddressTable.clear();\n         {\n             LOCK(wallet->cs_wallet);\n-            BOOST_FOREACH(const PAIRTYPE(CTxDestination, CAddressBookData)& item, wallet->mapAddressBook)\n+            for (const PAIRTYPE(CTxDestination, CAddressBookData)& item : wallet->mapAddressBook)\n             {\n                 const CBitcoinAddress& address = item.first;\n                 bool fMine = IsMine(*wallet, address.Get());"
      },
      {
        "sha": "2229ee888a46e1774414d643ed36c29f469a4a91",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=7c00c267264ad80c2991b2f6c2ae08c2d9c9732b",
        "patch": "@@ -452,7 +452,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n     coinControl->ListSelected(vCoinControl);\n     model->getOutputs(vCoinControl, vOutputs);\n \n-    BOOST_FOREACH(const COutput& out, vOutputs) {\n+    for (const COutput& out : vOutputs) {\n         // unselect already spent, very unlikely scenario, this could happen\n         // when selected are spent elsewhere, like rpc or another computer\n         uint256 txhash = out.tx->GetHash();\n@@ -628,7 +628,7 @@ void CoinControlDialog::updateView()\n     std::map<QString, std::vector<COutput> > mapCoins;\n     model->listCoins(mapCoins);\n \n-    BOOST_FOREACH(const PAIRTYPE(QString, std::vector<COutput>)& coins, mapCoins) {\n+    for (const PAIRTYPE(QString, std::vector<COutput>)& coins : mapCoins) {\n         CCoinControlWidgetItem *itemWalletAddress = new CCoinControlWidgetItem();\n         itemWalletAddress->setCheckState(COLUMN_CHECKBOX, Qt::Unchecked);\n         QString sWalletAddress = coins.first;\n@@ -653,7 +653,7 @@ void CoinControlDialog::updateView()\n \n         CAmount nSum = 0;\n         int nChildren = 0;\n-        BOOST_FOREACH(const COutput& out, coins.second) {\n+        for (const COutput& out : coins.second) {\n             nSum += out.tx->tx->vout[out.i].nValue;\n             nChildren++;\n "
      },
      {
        "sha": "00dbcdce01728cff7bf21cb946d316dc5399cb63",
        "filename": "src/qt/peertablemodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b/src/qt/peertablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b/src/qt/peertablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/peertablemodel.cpp?ref=7c00c267264ad80c2991b2f6c2ae08c2d9c9732b",
        "patch": "@@ -79,7 +79,7 @@ class PeerTablePriv\n             TRY_LOCK(cs_main, lockMain);\n             if (lockMain)\n             {\n-                BOOST_FOREACH(CNodeCombinedStats &stats, cachedNodeStats)\n+                for (CNodeCombinedStats &stats : cachedNodeStats)\n                     stats.fNodeStateStatsAvailable = GetNodeStateStats(stats.nodeStats.nodeid, stats.nodeStateStats);\n             }\n         }"
      },
      {
        "sha": "09231405414fc15c00b02f3cc4f5b2405f76581c",
        "filename": "src/qt/recentrequeststablemodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b/src/qt/recentrequeststablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b/src/qt/recentrequeststablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/recentrequeststablemodel.cpp?ref=7c00c267264ad80c2991b2f6c2ae08c2d9c9732b",
        "patch": "@@ -22,7 +22,7 @@ RecentRequestsTableModel::RecentRequestsTableModel(CWallet *wallet, WalletModel\n     // Load entries from wallet\n     std::vector<std::string> vReceiveRequests;\n     parent->loadReceiveRequests(vReceiveRequests);\n-    BOOST_FOREACH(const std::string& request, vReceiveRequests)\n+    for (const std::string& request : vReceiveRequests)\n         addNewRequest(request);\n \n     /* These columns must match the indices in the ColumnIndex enumeration */"
      },
      {
        "sha": "8e8873637d95b271c8ebebe8d2090086236e3504",
        "filename": "src/qt/transactiondesc.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b/src/qt/transactiondesc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b/src/qt/transactiondesc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.cpp?ref=7c00c267264ad80c2991b2f6c2ae08c2d9c9732b",
        "patch": "@@ -133,7 +133,7 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n         // Coinbase\n         //\n         CAmount nUnmatured = 0;\n-        BOOST_FOREACH(const CTxOut& txout, wtx.tx->vout)\n+        for (const CTxOut& txout : wtx.tx->vout)\n             nUnmatured += wallet->GetCredit(txout, ISMINE_ALL);\n         strHTML += \"<b>\" + tr(\"Credit\") + \":</b> \";\n         if (wtx.IsInMainChain())\n@@ -152,14 +152,14 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n     else\n     {\n         isminetype fAllFromMe = ISMINE_SPENDABLE;\n-        BOOST_FOREACH(const CTxIn& txin, wtx.tx->vin)\n+        for (const CTxIn& txin : wtx.tx->vin)\n         {\n             isminetype mine = wallet->IsMine(txin);\n             if(fAllFromMe > mine) fAllFromMe = mine;\n         }\n \n         isminetype fAllToMe = ISMINE_SPENDABLE;\n-        BOOST_FOREACH(const CTxOut& txout, wtx.tx->vout)\n+        for (const CTxOut& txout : wtx.tx->vout)\n         {\n             isminetype mine = wallet->IsMine(txout);\n             if(fAllToMe > mine) fAllToMe = mine;\n@@ -173,7 +173,7 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n             //\n             // Debit\n             //\n-            BOOST_FOREACH(const CTxOut& txout, wtx.tx->vout)\n+            for (const CTxOut& txout : wtx.tx->vout)\n             {\n                 // Ignore change\n                 isminetype toSelf = wallet->IsMine(txout);\n@@ -221,10 +221,10 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n             //\n             // Mixed debit transaction\n             //\n-            BOOST_FOREACH(const CTxIn& txin, wtx.tx->vin)\n+            for (const CTxIn& txin : wtx.tx->vin)\n                 if (wallet->IsMine(txin))\n                     strHTML += \"<b>\" + tr(\"Debit\") + \":</b> \" + BitcoinUnits::formatHtmlWithUnit(unit, -wallet->GetDebit(txin, ISMINE_ALL)) + \"<br>\";\n-            BOOST_FOREACH(const CTxOut& txout, wtx.tx->vout)\n+            for (const CTxOut& txout : wtx.tx->vout)\n                 if (wallet->IsMine(txout))\n                     strHTML += \"<b>\" + tr(\"Credit\") + \":</b> \" + BitcoinUnits::formatHtmlWithUnit(unit, wallet->GetCredit(txout, ISMINE_ALL)) + \"<br>\";\n         }\n@@ -276,10 +276,10 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n     if (logCategories != BCLog::NONE)\n     {\n         strHTML += \"<hr><br>\" + tr(\"Debug information\") + \"<br><br>\";\n-        BOOST_FOREACH(const CTxIn& txin, wtx.tx->vin)\n+        for (const CTxIn& txin : wtx.tx->vin)\n             if(wallet->IsMine(txin))\n                 strHTML += \"<b>\" + tr(\"Debit\") + \":</b> \" + BitcoinUnits::formatHtmlWithUnit(unit, -wallet->GetDebit(txin, ISMINE_ALL)) + \"<br>\";\n-        BOOST_FOREACH(const CTxOut& txout, wtx.tx->vout)\n+        for (const CTxOut& txout : wtx.tx->vout)\n             if(wallet->IsMine(txout))\n                 strHTML += \"<b>\" + tr(\"Credit\") + \":</b> \" + BitcoinUnits::formatHtmlWithUnit(unit, wallet->GetCredit(txout, ISMINE_ALL)) + \"<br>\";\n \n@@ -289,7 +289,7 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n         strHTML += \"<br><b>\" + tr(\"Inputs\") + \":</b>\";\n         strHTML += \"<ul>\";\n \n-        BOOST_FOREACH(const CTxIn& txin, wtx.tx->vin)\n+        for (const CTxIn& txin : wtx.tx->vin)\n         {\n             COutPoint prevout = txin.prevout;\n "
      },
      {
        "sha": "da070da084ba5fba66c6e6409144311242bcdc74",
        "filename": "src/qt/transactionrecord.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b/src/qt/transactionrecord.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b/src/qt/transactionrecord.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.cpp?ref=7c00c267264ad80c2991b2f6c2ae08c2d9c9732b",
        "patch": "@@ -78,15 +78,15 @@ QList<TransactionRecord> TransactionRecord::decomposeTransaction(const CWallet *\n     {\n         bool involvesWatchAddress = false;\n         isminetype fAllFromMe = ISMINE_SPENDABLE;\n-        BOOST_FOREACH(const CTxIn& txin, wtx.tx->vin)\n+        for (const CTxIn& txin : wtx.tx->vin)\n         {\n             isminetype mine = wallet->IsMine(txin);\n             if(mine & ISMINE_WATCH_ONLY) involvesWatchAddress = true;\n             if(fAllFromMe > mine) fAllFromMe = mine;\n         }\n \n         isminetype fAllToMe = ISMINE_SPENDABLE;\n-        BOOST_FOREACH(const CTxOut& txout, wtx.tx->vout)\n+        for (const CTxOut& txout : wtx.tx->vout)\n         {\n             isminetype mine = wallet->IsMine(txout);\n             if(mine & ISMINE_WATCH_ONLY) involvesWatchAddress = true;"
      },
      {
        "sha": "84f0fd3da6863d9591a8664032f225b89ce3a90a",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=7c00c267264ad80c2991b2f6c2ae08c2d9c9732b",
        "patch": "@@ -574,7 +574,7 @@ bool WalletModel::getPrivKey(const CKeyID &address, CKey& vchPrivKeyOut) const\n void WalletModel::getOutputs(const std::vector<COutPoint>& vOutpoints, std::vector<COutput>& vOutputs)\n {\n     LOCK2(cs_main, wallet->cs_wallet);\n-    BOOST_FOREACH(const COutPoint& outpoint, vOutpoints)\n+    for (const COutPoint& outpoint : vOutpoints)\n     {\n         if (!wallet->mapWallet.count(outpoint.hash)) continue;\n         int nDepth = wallet->mapWallet[outpoint.hash].GetDepthInMainChain();"
      },
      {
        "sha": "8fb0c13fa54b3c45db217d501ac699483a1f5cc7",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=7c00c267264ad80c2991b2f6c2ae08c2d9c9732b",
        "patch": "@@ -158,7 +158,7 @@ static bool rest_headers(HTTPRequest* req,\n     }\n \n     CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\n-    BOOST_FOREACH(const CBlockIndex *pindex, headers) {\n+    for (const CBlockIndex *pindex : headers) {\n         ssHeader << pindex->GetBlockHeader();\n     }\n \n@@ -178,7 +178,7 @@ static bool rest_headers(HTTPRequest* req,\n     }\n     case RF_JSON: {\n         UniValue jsonHeaders(UniValue::VARR);\n-        BOOST_FOREACH(const CBlockIndex *pindex, headers) {\n+        for (const CBlockIndex *pindex : headers) {\n             jsonHeaders.push_back(blockheaderToJSON(pindex));\n         }\n         std::string strJSON = jsonHeaders.write() + \"\\n\";\n@@ -558,7 +558,7 @@ static bool rest_getutxos(HTTPRequest* req, const std::string& strURIPart)\n         objGetUTXOResponse.push_back(Pair(\"bitmap\", bitmapStringRepresentation));\n \n         UniValue utxos(UniValue::VARR);\n-        BOOST_FOREACH (const CCoin& coin, outs) {\n+        for (const CCoin& coin : outs) {\n             UniValue utxo(UniValue::VOBJ);\n             utxo.push_back(Pair(\"height\", (int32_t)coin.nHeight));\n             utxo.push_back(Pair(\"value\", ValueFromAmount(coin.out.nValue)));"
      },
      {
        "sha": "407fef14cc8fd3b3f6ac0b6176ab4c7ccfd4b843",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=7c00c267264ad80c2991b2f6c2ae08c2d9c9732b",
        "patch": "@@ -364,14 +364,14 @@ void entryToJSON(UniValue &info, const CTxMemPoolEntry &e)\n     info.push_back(Pair(\"ancestorfees\", e.GetModFeesWithAncestors()));\n     const CTransaction& tx = e.GetTx();\n     std::set<std::string> setDepends;\n-    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+    for (const CTxIn& txin : tx.vin)\n     {\n         if (mempool.exists(txin.prevout.hash))\n             setDepends.insert(txin.prevout.hash.ToString());\n     }\n \n     UniValue depends(UniValue::VARR);\n-    BOOST_FOREACH(const std::string& dep, setDepends)\n+    for (const std::string& dep : setDepends)\n     {\n         depends.push_back(dep);\n     }\n@@ -385,7 +385,7 @@ UniValue mempoolToJSON(bool fVerbose)\n     {\n         LOCK(mempool.cs);\n         UniValue o(UniValue::VOBJ);\n-        BOOST_FOREACH(const CTxMemPoolEntry& e, mempool.mapTx)\n+        for (const CTxMemPoolEntry& e : mempool.mapTx)\n         {\n             const uint256& hash = e.GetTx().GetHash();\n             UniValue info(UniValue::VOBJ);\n@@ -400,7 +400,7 @@ UniValue mempoolToJSON(bool fVerbose)\n         mempool.queryHashes(vtxid);\n \n         UniValue a(UniValue::VARR);\n-        BOOST_FOREACH(const uint256& hash, vtxid)\n+        for (const uint256& hash : vtxid)\n             a.push_back(hash.ToString());\n \n         return a;\n@@ -485,14 +485,14 @@ UniValue getmempoolancestors(const JSONRPCRequest& request)\n \n     if (!fVerbose) {\n         UniValue o(UniValue::VARR);\n-        BOOST_FOREACH(CTxMemPool::txiter ancestorIt, setAncestors) {\n+        for (CTxMemPool::txiter ancestorIt : setAncestors) {\n             o.push_back(ancestorIt->GetTx().GetHash().ToString());\n         }\n \n         return o;\n     } else {\n         UniValue o(UniValue::VOBJ);\n-        BOOST_FOREACH(CTxMemPool::txiter ancestorIt, setAncestors) {\n+        for (CTxMemPool::txiter ancestorIt : setAncestors) {\n             const CTxMemPoolEntry &e = *ancestorIt;\n             const uint256& _hash = e.GetTx().GetHash();\n             UniValue info(UniValue::VOBJ);\n@@ -549,14 +549,14 @@ UniValue getmempooldescendants(const JSONRPCRequest& request)\n \n     if (!fVerbose) {\n         UniValue o(UniValue::VARR);\n-        BOOST_FOREACH(CTxMemPool::txiter descendantIt, setDescendants) {\n+        for (CTxMemPool::txiter descendantIt : setDescendants) {\n             o.push_back(descendantIt->GetTx().GetHash().ToString());\n         }\n \n         return o;\n     } else {\n         UniValue o(UniValue::VOBJ);\n-        BOOST_FOREACH(CTxMemPool::txiter descendantIt, setDescendants) {\n+        for (CTxMemPool::txiter descendantIt : setDescendants) {\n             const CTxMemPoolEntry &e = *descendantIt;\n             const uint256& _hash = e.GetTx().GetHash();\n             UniValue info(UniValue::VOBJ);\n@@ -1256,7 +1256,7 @@ UniValue getchaintips(const JSONRPCRequest& request)\n     std::set<const CBlockIndex*> setOrphans;\n     std::set<const CBlockIndex*> setPrevs;\n \n-    BOOST_FOREACH(const PAIRTYPE(const uint256, CBlockIndex*)& item, mapBlockIndex)\n+    for (const PAIRTYPE(const uint256, CBlockIndex*)& item : mapBlockIndex)\n     {\n         if (!chainActive.Contains(item.second)) {\n             setOrphans.insert(item.second);\n@@ -1276,7 +1276,7 @@ UniValue getchaintips(const JSONRPCRequest& request)\n \n     /* Construct the output array.  */\n     UniValue res(UniValue::VARR);\n-    BOOST_FOREACH(const CBlockIndex* block, setTips)\n+    for (const CBlockIndex* block : setTips)\n     {\n         UniValue obj(UniValue::VOBJ);\n         obj.push_back(Pair(\"height\", block->nHeight));"
      },
      {
        "sha": "bdd84ee37944cd88933b7bc84941e8e8878bee66",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=7c00c267264ad80c2991b2f6c2ae08c2d9c9732b",
        "patch": "@@ -580,7 +580,7 @@ UniValue getblocktemplate(const JSONRPCRequest& request)\n         entry.push_back(Pair(\"hash\", tx.GetWitnessHash().GetHex()));\n \n         UniValue deps(UniValue::VARR);\n-        BOOST_FOREACH (const CTxIn &in, tx.vin)\n+        for (const CTxIn &in : tx.vin)\n         {\n             if (setTxIndex.count(in.prevout.hash))\n                 deps.push_back(setTxIndex[in.prevout.hash]);"
      },
      {
        "sha": "a9b28c31a00f2c8d9dfb1cc52c68dba5b4030fda",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=7c00c267264ad80c2991b2f6c2ae08c2d9c9732b",
        "patch": "@@ -149,7 +149,7 @@ class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n             obj.push_back(Pair(\"script\", GetTxnOutputType(whichType)));\n             obj.push_back(Pair(\"hex\", HexStr(subscript.begin(), subscript.end())));\n             UniValue a(UniValue::VARR);\n-            BOOST_FOREACH(const CTxDestination& addr, addresses)\n+            for (const CTxDestination& addr : addresses)\n                 a.push_back(CBitcoinAddress(addr).ToString());\n             obj.push_back(Pair(\"addresses\", a));\n             if (whichType == TX_MULTISIG)"
      },
      {
        "sha": "1364ff99008e563614763cb123482da36b1045b1",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=7c00c267264ad80c2991b2f6c2ae08c2d9c9732b",
        "patch": "@@ -126,7 +126,7 @@ UniValue getpeerinfo(const JSONRPCRequest& request)\n \n     UniValue ret(UniValue::VARR);\n \n-    BOOST_FOREACH(const CNodeStats& stats, vstats) {\n+    for (const CNodeStats& stats : vstats) {\n         UniValue obj(UniValue::VOBJ);\n         CNodeStateStats statestats;\n         bool fStateStats = GetNodeStateStats(stats.nodeid, statestats);\n@@ -163,22 +163,22 @@ UniValue getpeerinfo(const JSONRPCRequest& request)\n             obj.push_back(Pair(\"synced_headers\", statestats.nSyncHeight));\n             obj.push_back(Pair(\"synced_blocks\", statestats.nCommonHeight));\n             UniValue heights(UniValue::VARR);\n-            BOOST_FOREACH(int height, statestats.vHeightInFlight) {\n+            for (int height : statestats.vHeightInFlight) {\n                 heights.push_back(height);\n             }\n             obj.push_back(Pair(\"inflight\", heights));\n         }\n         obj.push_back(Pair(\"whitelisted\", stats.fWhitelisted));\n \n         UniValue sendPerMsgCmd(UniValue::VOBJ);\n-        BOOST_FOREACH(const mapMsgCmdSize::value_type &i, stats.mapSendBytesPerMsgCmd) {\n+        for (const mapMsgCmdSize::value_type &i : stats.mapSendBytesPerMsgCmd) {\n             if (i.second > 0)\n                 sendPerMsgCmd.push_back(Pair(i.first, i.second));\n         }\n         obj.push_back(Pair(\"bytessent_per_msg\", sendPerMsgCmd));\n \n         UniValue recvPerMsgCmd(UniValue::VOBJ);\n-        BOOST_FOREACH(const mapMsgCmdSize::value_type &i, stats.mapRecvBytesPerMsgCmd) {\n+        for (const mapMsgCmdSize::value_type &i : stats.mapRecvBytesPerMsgCmd) {\n             if (i.second > 0)\n                 recvPerMsgCmd.push_back(Pair(i.first, i.second));\n         }\n@@ -474,7 +474,7 @@ UniValue getnetworkinfo(const JSONRPCRequest& request)\n     UniValue localAddresses(UniValue::VARR);\n     {\n         LOCK(cs_mapLocalHost);\n-        BOOST_FOREACH(const PAIRTYPE(CNetAddr, LocalServiceInfo) &item, mapLocalHost)\n+        for (const PAIRTYPE(CNetAddr, LocalServiceInfo) &item : mapLocalHost)\n         {\n             UniValue rec(UniValue::VOBJ);\n             rec.push_back(Pair(\"address\", item.first.ToString()));"
      },
      {
        "sha": "945f11fde4f8c4dab595c4cd3537bb69bf7b7a86",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=7c00c267264ad80c2991b2f6c2ae08c2d9c9732b",
        "patch": "@@ -282,7 +282,7 @@ UniValue verifytxoutproof(const JSONRPCRequest& request)\n     if (!mapBlockIndex.count(merkleBlock.header.GetHash()) || !chainActive.Contains(mapBlockIndex[merkleBlock.header.GetHash()]))\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found in chain\");\n \n-    BOOST_FOREACH(const uint256& hash, vMatch)\n+    for (const uint256& hash : vMatch)\n         res.push_back(hash.GetHex());\n     return res;\n }\n@@ -373,7 +373,7 @@ UniValue createrawtransaction(const JSONRPCRequest& request)\n \n     std::set<CBitcoinAddress> setAddress;\n     std::vector<std::string> addrList = sendTo.getKeys();\n-    BOOST_FOREACH(const std::string& name_, addrList) {\n+    for (const std::string& name_ : addrList) {\n \n         if (name_ == \"data\") {\n             std::vector<unsigned char> data = ParseHexV(sendTo[name_].getValStr(),\"Data\");\n@@ -637,7 +637,7 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n         CCoinsViewMemPool viewMempool(&viewChain, mempool);\n         view.SetBackend(viewMempool); // temporarily switch cache backend to db+mempool view\n \n-        BOOST_FOREACH(const CTxIn& txin, mergedTx.vin) {\n+        for (const CTxIn& txin : mergedTx.vin) {\n             view.AccessCoin(txin.prevout); // Load entries from viewChain into view; can fail.\n         }\n \n@@ -781,7 +781,7 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n             ProduceSignature(MutableTransactionSignatureCreator(&keystore, &mergedTx, i, amount, nHashType), prevPubKey, sigdata);\n \n         // ... and merge in other signatures:\n-        BOOST_FOREACH(const CMutableTransaction& txv, txVariants) {\n+        for (const CMutableTransaction& txv : txVariants) {\n             if (txv.vin.size() > i) {\n                 sigdata = CombineSignatures(prevPubKey, TransactionSignatureChecker(&txConst, i, amount), sigdata, DataFromTransaction(txv, i));\n             }"
      },
      {
        "sha": "48b2e4c27412a71043631608323bc8a48412fe47",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=7c00c267264ad80c2991b2f6c2ae08c2d9c9732b",
        "patch": "@@ -64,7 +64,7 @@ void RPCTypeCheck(const UniValue& params,\n                   bool fAllowNull)\n {\n     unsigned int i = 0;\n-    BOOST_FOREACH(UniValue::VType t, typesExpected)\n+    for (UniValue::VType t : typesExpected)\n     {\n         if (params.size() <= i)\n             break;\n@@ -103,7 +103,7 @@ void RPCTypeCheckObj(const UniValue& o,\n \n     if (fStrict)\n     {\n-        BOOST_FOREACH(const std::string& k, o.getKeys())\n+        for (const std::string& k : o.getKeys())\n         {\n             if (typesExpected.count(k) == 0)\n             {\n@@ -186,7 +186,7 @@ std::string CRPCTable::help(const std::string& strCommand, const JSONRPCRequest&\n     jreq.fHelp = true;\n     jreq.params = UniValue();\n \n-    BOOST_FOREACH(const PAIRTYPE(std::string, const CRPCCommand*)& command, vCommands)\n+    for (const PAIRTYPE(std::string, const CRPCCommand*)& command : vCommands)\n     {\n         const CRPCCommand *pcmd = command.second;\n         std::string strMethod = pcmd->name;"
      },
      {
        "sha": "35b534344e085a637b259e63363f385a71201474",
        "filename": "src/script/ismine.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b/src/script/ismine.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b/src/script/ismine.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/ismine.cpp?ref=7c00c267264ad80c2991b2f6c2ae08c2d9c9732b",
        "patch": "@@ -18,7 +18,7 @@ typedef std::vector<unsigned char> valtype;\n unsigned int HaveKeys(const std::vector<valtype>& pubkeys, const CKeyStore& keystore)\n {\n     unsigned int nResult = 0;\n-    BOOST_FOREACH(const valtype& pubkey, pubkeys)\n+    for (const valtype& pubkey : pubkeys)\n     {\n         CKeyID keyID = CPubKey(pubkey).GetID();\n         if (keystore.HaveKey(keyID))"
      },
      {
        "sha": "91dc0f29d9f1c739cf4398b373283080ade4ab04",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=7c00c267264ad80c2991b2f6c2ae08c2d9c9732b",
        "patch": "@@ -126,7 +126,7 @@ static bool SignStep(const BaseSignatureCreator& creator, const CScript& scriptP\n static CScript PushAll(const std::vector<valtype>& values)\n {\n     CScript result;\n-    BOOST_FOREACH(const valtype& v, values) {\n+    for (const valtype& v : values) {\n         if (v.size() == 0) {\n             result << OP_0;\n         } else if (v.size() == 1 && v[0] >= 1 && v[0] <= 16) {\n@@ -232,12 +232,12 @@ static std::vector<valtype> CombineMultisig(const CScript& scriptPubKey, const B\n {\n     // Combine all the signatures we've got:\n     std::set<valtype> allsigs;\n-    BOOST_FOREACH(const valtype& v, sigs1)\n+    for (const valtype& v : sigs1)\n     {\n         if (!v.empty())\n             allsigs.insert(v);\n     }\n-    BOOST_FOREACH(const valtype& v, sigs2)\n+    for (const valtype& v : sigs2)\n     {\n         if (!v.empty())\n             allsigs.insert(v);\n@@ -248,7 +248,7 @@ static std::vector<valtype> CombineMultisig(const CScript& scriptPubKey, const B\n     unsigned int nSigsRequired = vSolutions.front()[0];\n     unsigned int nPubKeys = vSolutions.size()-2;\n     std::map<valtype, valtype> sigs;\n-    BOOST_FOREACH(const valtype& sig, allsigs)\n+    for (const valtype& sig : allsigs)\n     {\n         for (unsigned int i = 0; i < nPubKeys; i++)\n         {"
      },
      {
        "sha": "85b33778b7cb57d03f1a34e6b2b7e006d5b3fb30",
        "filename": "src/script/standard.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b/src/script/standard.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b/src/script/standard.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.cpp?ref=7c00c267264ad80c2991b2f6c2ae08c2d9c9732b",
        "patch": "@@ -94,7 +94,7 @@ bool Solver(const CScript& scriptPubKey, txnouttype& typeRet, std::vector<std::v\n \n     // Scan templates\n     const CScript& script1 = scriptPubKey;\n-    BOOST_FOREACH(const PAIRTYPE(txnouttype, CScript)& tplate, mTemplates)\n+    for (const PAIRTYPE(txnouttype, CScript)& tplate : mTemplates)\n     {\n         const CScript& script2 = tplate.second;\n         vSolutionsRet.clear();\n@@ -293,7 +293,7 @@ CScript GetScriptForMultisig(int nRequired, const std::vector<CPubKey>& keys)\n     CScript script;\n \n     script << CScript::EncodeOP_N(nRequired);\n-    BOOST_FOREACH(const CPubKey& key, keys)\n+    for (const CPubKey& key : keys)\n         script << ToByteVector(key);\n     script << CScript::EncodeOP_N(keys.size()) << OP_CHECKMULTISIG;\n     return script;"
      },
      {
        "sha": "d32202b7013b14ab3922b7d76aa99de687b91687",
        "filename": "src/sync.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b/src/sync.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b/src/sync.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.cpp?ref=7c00c267264ad80c2991b2f6c2ae08c2d9c9732b",
        "patch": "@@ -77,7 +77,7 @@ static void potential_deadlock_detected(const std::pair<void*, void*>& mismatch,\n {\n     LogPrintf(\"POTENTIAL DEADLOCK DETECTED\\n\");\n     LogPrintf(\"Previous lock order was:\\n\");\n-    BOOST_FOREACH (const PAIRTYPE(void*, CLockLocation) & i, s2) {\n+    for (const PAIRTYPE(void*, CLockLocation) & i : s2) {\n         if (i.first == mismatch.first) {\n             LogPrintf(\" (1)\");\n         }\n@@ -87,7 +87,7 @@ static void potential_deadlock_detected(const std::pair<void*, void*>& mismatch,\n         LogPrintf(\" %s\\n\", i.second.ToString());\n     }\n     LogPrintf(\"Current lock order is:\\n\");\n-    BOOST_FOREACH (const PAIRTYPE(void*, CLockLocation) & i, s1) {\n+    for (const PAIRTYPE(void*, CLockLocation) & i : s1) {\n         if (i.first == mismatch.first) {\n             LogPrintf(\" (1)\");\n         }\n@@ -108,7 +108,7 @@ static void push_lock(void* c, const CLockLocation& locklocation, bool fTry)\n \n     (*lockstack).push_back(std::make_pair(c, locklocation));\n \n-    BOOST_FOREACH (const PAIRTYPE(void*, CLockLocation) & i, (*lockstack)) {\n+    for (const PAIRTYPE(void*, CLockLocation) & i : (*lockstack)) {\n         if (i.first == c)\n             break;\n \n@@ -142,14 +142,14 @@ void LeaveCritical()\n std::string LocksHeld()\n {\n     std::string result;\n-    BOOST_FOREACH (const PAIRTYPE(void*, CLockLocation) & i, *lockstack)\n+    for (const PAIRTYPE(void*, CLockLocation) & i : *lockstack)\n         result += i.second.ToString() + std::string(\"\\n\");\n     return result;\n }\n \n void AssertLockHeldInternal(const char* pszName, const char* pszFile, int nLine, void* cs)\n {\n-    BOOST_FOREACH (const PAIRTYPE(void*, CLockLocation) & i, *lockstack)\n+    for (const PAIRTYPE(void*, CLockLocation) & i : *lockstack)\n         if (i.first == cs)\n             return;\n     fprintf(stderr, \"Assertion failed: lock %s not held in %s:%i; locks held:\\n%s\", pszName, pszFile, nLine, LocksHeld().c_str());"
      },
      {
        "sha": "6bcd550d7bed0174cf8b4d19b91079e064e02edd",
        "filename": "src/test/bip32_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b/src/test/bip32_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b/src/test/bip32_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bip32_tests.cpp?ref=7c00c267264ad80c2991b2f6c2ae08c2d9c9732b",
        "patch": "@@ -93,7 +93,7 @@ void RunTest(const TestVector &test) {\n     CExtPubKey pubkey;\n     key.SetMaster(&seed[0], seed.size());\n     pubkey = key.Neuter();\n-    BOOST_FOREACH(const TestDerivation &derive, test.vDerive) {\n+    for (const TestDerivation &derive : test.vDerive) {\n         unsigned char data[74];\n         key.Encode(data);\n         pubkey.Encode(data);"
      },
      {
        "sha": "43b93c0c69d09db10b24ac2a5706a27a4500627e",
        "filename": "src/test/coins_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b/src/test/coins_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b/src/test/coins_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/coins_tests.cpp?ref=7c00c267264ad80c2991b2f6c2ae08c2d9c9732b",
        "patch": "@@ -194,7 +194,7 @@ BOOST_AUTO_TEST_CASE(coins_cache_simulation_test)\n                     found_an_entry = true;\n                 }\n             }\n-            BOOST_FOREACH(const CCoinsViewCacheTest *test, stack) {\n+            for (const CCoinsViewCacheTest *test : stack) {\n                 test->SelfTest();\n             }\n         }"
      },
      {
        "sha": "01cc5ed8310fcefead2dd5d0e2711c1bad176792",
        "filename": "src/test/getarg_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b/src/test/getarg_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b/src/test/getarg_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/getarg_tests.cpp?ref=7c00c267264ad80c2991b2f6c2ae08c2d9c9732b",
        "patch": "@@ -25,7 +25,7 @@ static void ResetArgs(const std::string& strArg)\n \n     // Convert to char*:\n     std::vector<const char*> vecChar;\n-    BOOST_FOREACH(std::string& s, vecArg)\n+    for (std::string& s : vecArg)\n         vecChar.push_back(s.c_str());\n \n     ParseParameters(vecChar.size(), &vecChar[0]);"
      },
      {
        "sha": "6d8aab887b33e1b873757ca4b4659ed059ff3f3e",
        "filename": "src/test/multisig_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b/src/test/multisig_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b/src/test/multisig_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/multisig_tests.cpp?ref=7c00c267264ad80c2991b2f6c2ae08c2d9c9732b",
        "patch": "@@ -28,7 +28,7 @@ sign_multisig(CScript scriptPubKey, std::vector<CKey> keys, CTransaction transac\n \n     CScript result;\n     result << OP_0; // CHECKMULTISIG bug workaround\n-    BOOST_FOREACH(const CKey &key, keys)\n+    for (const CKey &key : keys)\n     {\n         std::vector<unsigned char> vchSig;\n         BOOST_CHECK(key.Sign(hash, vchSig));"
      },
      {
        "sha": "cbc83b686652ad866af208140acecce2a138afbd",
        "filename": "src/test/prevector_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b/src/test/prevector_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b/src/test/prevector_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/prevector_tests.cpp?ref=7c00c267264ad80c2991b2f6c2ae08c2d9c9732b",
        "patch": "@@ -54,13 +54,13 @@ class prevector_tester {\n         local_check(pretype(real_vector.begin(), real_vector.end()) == pre_vector);\n         local_check(pretype(pre_vector.begin(), pre_vector.end()) == pre_vector);\n         size_t pos = 0;\n-        BOOST_FOREACH(const T& v, pre_vector) {\n+        for (const T& v : pre_vector) {\n              local_check(v == real_vector[pos++]);\n         }\n         BOOST_REVERSE_FOREACH(const T& v, pre_vector) {\n              local_check(v == real_vector[--pos]);\n         }\n-        BOOST_FOREACH(const T& v, const_pre_vector) {\n+        for (const T& v : const_pre_vector) {\n              local_check(v == real_vector[pos++]);\n         }\n         BOOST_REVERSE_FOREACH(const T& v, const_pre_vector) {"
      },
      {
        "sha": "6195605046831554d9e48704ad82a491600a9829",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=7c00c267264ad80c2991b2f6c2ae08c2d9c9732b",
        "patch": "@@ -927,7 +927,7 @@ BOOST_AUTO_TEST_CASE(script_build)\n \n     std::string strGen;\n \n-    BOOST_FOREACH(TestBuilder& test, tests) {\n+    for (TestBuilder& test : tests) {\n         test.Test();\n         std::string str = JSONPrettyPrint(test.GetJSON());\n #ifndef UPDATE_JSON_TESTS\n@@ -1033,7 +1033,7 @@ sign_multisig(CScript scriptPubKey, std::vector<CKey> keys, CTransaction transac\n     // and vice-versa)\n     //\n     result << OP_0;\n-    BOOST_FOREACH(const CKey &key, keys)\n+    for (const CKey &key : keys)\n     {\n         std::vector<unsigned char> vchSig;\n         BOOST_CHECK(key.Sign(hash, vchSig));"
      },
      {
        "sha": "68d72a1bb0c375e881d4b446be8f6f895c18f094",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=7c00c267264ad80c2991b2f6c2ae08c2d9c9732b",
        "patch": "@@ -121,7 +121,7 @@ TestChain100Setup::CreateAndProcessBlock(const std::vector<CMutableTransaction>&\n \n     // Replace mempool-selected txns with just coinbase plus passed-in txns:\n     block.vtx.resize(1);\n-    BOOST_FOREACH(const CMutableTransaction& tx, txns)\n+    for (const CMutableTransaction& tx : txns)\n         block.vtx.push_back(MakeTransactionRef(tx));\n     // IncrementExtraNonce creates a valid coinbase and merkleRoot\n     unsigned int extraNonce = 0;"
      },
      {
        "sha": "153473fb784c593cf2add098f7b4c1eaf2eb2b39",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=7c00c267264ad80c2991b2f6c2ae08c2d9c9732b",
        "patch": "@@ -66,7 +66,7 @@ unsigned int ParseScriptFlags(std::string strFlags)\n     std::vector<std::string> words;\n     boost::algorithm::split(words, strFlags, boost::algorithm::is_any_of(\",\"));\n \n-    BOOST_FOREACH(std::string word, words)\n+    for (std::string word : words)\n     {\n         if (!mapFlagNames.count(word))\n             BOOST_ERROR(\"Bad test: unknown verification flag '\" << word << \"'\");\n@@ -394,7 +394,7 @@ void CheckWithFlag(const CTransactionRef& output, const CMutableTransaction& inp\n static CScript PushAll(const std::vector<valtype>& values)\n {\n     CScript result;\n-    BOOST_FOREACH(const valtype& v, values) {\n+    for (const valtype& v : values) {\n         if (v.size() == 0) {\n             result << OP_0;\n         } else if (v.size() == 1 && v[0] >= 1 && v[0] <= 16) {"
      },
      {
        "sha": "d736baa2133014ab5b5a1eb65078f6d2b704abac",
        "filename": "src/timedata.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b/src/timedata.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b/src/timedata.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/timedata.cpp?ref=7c00c267264ad80c2991b2f6c2ae08c2d9c9732b",
        "patch": "@@ -95,7 +95,7 @@ void AddTimeData(const CNetAddr& ip, int64_t nOffsetSample)\n             {\n                 // If nobody has a time different than ours but within 5 minutes of ours, give a warning\n                 bool fMatch = false;\n-                BOOST_FOREACH(int64_t nOffset, vSorted)\n+                for (int64_t nOffset : vSorted)\n                     if (nOffset != 0 && abs64(nOffset) < 5 * 60)\n                         fMatch = true;\n \n@@ -110,7 +110,7 @@ void AddTimeData(const CNetAddr& ip, int64_t nOffsetSample)\n         }\n \n         if (LogAcceptCategory(BCLog::NET)) {\n-            BOOST_FOREACH(int64_t n, vSorted) {\n+            for (int64_t n : vSorted) {\n                 LogPrint(BCLog::NET, \"%+d  \", n);\n             }\n             LogPrint(BCLog::NET, \"|  \");"
      },
      {
        "sha": "f069cc7f1262fd962488a0bdc8c3735cedaf46e0",
        "filename": "src/torcontrol.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b/src/torcontrol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b/src/torcontrol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/torcontrol.cpp?ref=7c00c267264ad80c2991b2f6c2ae08c2d9c9732b",
        "patch": "@@ -487,7 +487,7 @@ void TorController::add_onion_cb(TorControlConnection& _conn, const TorControlRe\n {\n     if (reply.code == 250) {\n         LogPrint(BCLog::TOR, \"tor: ADD_ONION successful\\n\");\n-        BOOST_FOREACH(const std::string &s, reply.lines) {\n+        for (const std::string &s : reply.lines) {\n             std::map<std::string,std::string> m = ParseTorReplyMapping(s);\n             std::map<std::string,std::string>::iterator i;\n             if ((i = m.find(\"ServiceID\")) != m.end())\n@@ -617,7 +617,7 @@ void TorController::protocolinfo_cb(TorControlConnection& _conn, const TorContro\n          * 250-AUTH METHODS=NULL\n          * 250-AUTH METHODS=HASHEDPASSWORD\n          */\n-        BOOST_FOREACH(const std::string &s, reply.lines) {\n+        for (const std::string &s : reply.lines) {\n             std::pair<std::string,std::string> l = SplitTorReplyLine(s);\n             if (l.first == \"AUTH\") {\n                 std::map<std::string,std::string> m = ParseTorReplyMapping(l.second);\n@@ -634,7 +634,7 @@ void TorController::protocolinfo_cb(TorControlConnection& _conn, const TorContro\n                 }\n             }\n         }\n-        BOOST_FOREACH(const std::string &s, methods) {\n+        for (const std::string &s : methods) {\n             LogPrint(BCLog::TOR, \"tor: Supported authentication method: %s\\n\", s);\n         }\n         // Prefer NULL, otherwise SAFECOOKIE. If a password is provided, use HASHEDPASSWORD"
      },
      {
        "sha": "afafc695f48c1a34b94d1bbf381d5525dc8061de",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 27,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=7c00c267264ad80c2991b2f6c2ae08c2d9c9732b",
        "patch": "@@ -73,12 +73,12 @@ void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendan\n         setAllDescendants.insert(cit);\n         stageEntries.erase(cit);\n         const setEntries &setChildren = GetMemPoolChildren(cit);\n-        BOOST_FOREACH(const txiter childEntry, setChildren) {\n+        for (const txiter childEntry : setChildren) {\n             cacheMap::iterator cacheIt = cachedDescendants.find(childEntry);\n             if (cacheIt != cachedDescendants.end()) {\n                 // We've already calculated this one, just add the entries for this set\n                 // but don't traverse again.\n-                BOOST_FOREACH(const txiter cacheEntry, cacheIt->second) {\n+                for (const txiter cacheEntry : cacheIt->second) {\n                     setAllDescendants.insert(cacheEntry);\n                 }\n             } else if (!setAllDescendants.count(childEntry)) {\n@@ -92,7 +92,7 @@ void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendan\n     int64_t modifySize = 0;\n     CAmount modifyFee = 0;\n     int64_t modifyCount = 0;\n-    BOOST_FOREACH(txiter cit, setAllDescendants) {\n+    for (txiter cit : setAllDescendants) {\n         if (!setExclude.count(cit->GetTx().GetHash())) {\n             modifySize += cit->GetTxSize();\n             modifyFee += cit->GetModifiedFee();\n@@ -202,7 +202,7 @@ bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntr\n         }\n \n         const setEntries & setMemPoolParents = GetMemPoolParents(stageit);\n-        BOOST_FOREACH(const txiter &phash, setMemPoolParents) {\n+        for (const txiter &phash : setMemPoolParents) {\n             // If this is a new ancestor, add it.\n             if (setAncestors.count(phash) == 0) {\n                 parentHashes.insert(phash);\n@@ -221,13 +221,13 @@ void CTxMemPool::UpdateAncestorsOf(bool add, txiter it, setEntries &setAncestors\n {\n     setEntries parentIters = GetMemPoolParents(it);\n     // add or remove this tx as a child of each parent\n-    BOOST_FOREACH(txiter piter, parentIters) {\n+    for (txiter piter : parentIters) {\n         UpdateChild(piter, it, add);\n     }\n     const int64_t updateCount = (add ? 1 : -1);\n     const int64_t updateSize = updateCount * it->GetTxSize();\n     const CAmount updateFee = updateCount * it->GetModifiedFee();\n-    BOOST_FOREACH(txiter ancestorIt, setAncestors) {\n+    for (txiter ancestorIt : setAncestors) {\n         mapTx.modify(ancestorIt, update_descendant_state(updateSize, updateFee, updateCount));\n     }\n }\n@@ -238,7 +238,7 @@ void CTxMemPool::UpdateEntryForAncestors(txiter it, const setEntries &setAncesto\n     int64_t updateSize = 0;\n     CAmount updateFee = 0;\n     int64_t updateSigOpsCost = 0;\n-    BOOST_FOREACH(txiter ancestorIt, setAncestors) {\n+    for (txiter ancestorIt : setAncestors) {\n         updateSize += ancestorIt->GetTxSize();\n         updateFee += ancestorIt->GetModifiedFee();\n         updateSigOpsCost += ancestorIt->GetSigOpCost();\n@@ -249,7 +249,7 @@ void CTxMemPool::UpdateEntryForAncestors(txiter it, const setEntries &setAncesto\n void CTxMemPool::UpdateChildrenForRemoval(txiter it)\n {\n     const setEntries &setMemPoolChildren = GetMemPoolChildren(it);\n-    BOOST_FOREACH(txiter updateIt, setMemPoolChildren) {\n+    for (txiter updateIt : setMemPoolChildren) {\n         UpdateParent(updateIt, it, false);\n     }\n }\n@@ -266,19 +266,19 @@ void CTxMemPool::UpdateForRemoveFromMempool(const setEntries &entriesToRemove, b\n         // Here we only update statistics and not data in mapLinks (which\n         // we need to preserve until we're finished with all operations that\n         // need to traverse the mempool).\n-        BOOST_FOREACH(txiter removeIt, entriesToRemove) {\n+        for (txiter removeIt : entriesToRemove) {\n             setEntries setDescendants;\n             CalculateDescendants(removeIt, setDescendants);\n             setDescendants.erase(removeIt); // don't update state for self\n             int64_t modifySize = -((int64_t)removeIt->GetTxSize());\n             CAmount modifyFee = -removeIt->GetModifiedFee();\n             int modifySigOps = -removeIt->GetSigOpCost();\n-            BOOST_FOREACH(txiter dit, setDescendants) {\n+            for (txiter dit : setDescendants) {\n                 mapTx.modify(dit, update_ancestor_state(modifySize, modifyFee, -1, modifySigOps));\n             }\n         }\n     }\n-    BOOST_FOREACH(txiter removeIt, entriesToRemove) {\n+    for (txiter removeIt : entriesToRemove) {\n         setEntries setAncestors;\n         const CTxMemPoolEntry &entry = *removeIt;\n         std::string dummy;\n@@ -307,7 +307,7 @@ void CTxMemPool::UpdateForRemoveFromMempool(const setEntries &entriesToRemove, b\n     // After updating all the ancestor sizes, we can now sever the link between each\n     // transaction being removed and any mempool children (ie, update setMemPoolParents\n     // for each direct child of a transaction being removed).\n-    BOOST_FOREACH(txiter removeIt, entriesToRemove) {\n+    for (txiter removeIt : entriesToRemove) {\n         UpdateChildrenForRemoval(removeIt);\n     }\n }\n@@ -401,7 +401,7 @@ bool CTxMemPool::addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry,\n     // to clean up the mess we're leaving here.\n \n     // Update ancestors with information about this tx\n-    BOOST_FOREACH (const uint256 &phash, setParentTransactions) {\n+    for (const uint256 &phash : setParentTransactions) {\n         txiter pit = mapTx.find(phash);\n         if (pit != mapTx.end()) {\n             UpdateParent(newit, pit, true);\n@@ -424,7 +424,7 @@ void CTxMemPool::removeUnchecked(txiter it, MemPoolRemovalReason reason)\n {\n     NotifyEntryRemoved(it->GetSharedTx(), reason);\n     const uint256 hash = it->GetTx().GetHash();\n-    BOOST_FOREACH(const CTxIn& txin, it->GetTx().vin)\n+    for (const CTxIn& txin : it->GetTx().vin)\n         mapNextTx.erase(txin.prevout);\n \n     if (vTxHashes.size() > 1) {\n@@ -466,7 +466,7 @@ void CTxMemPool::CalculateDescendants(txiter entryit, setEntries &setDescendants\n         stage.erase(it);\n \n         const setEntries &setChildren = GetMemPoolChildren(it);\n-        BOOST_FOREACH(const txiter &childiter, setChildren) {\n+        for (const txiter &childiter : setChildren) {\n             if (!setDescendants.count(childiter)) {\n                 stage.insert(childiter);\n             }\n@@ -498,7 +498,7 @@ void CTxMemPool::removeRecursive(const CTransaction &origTx, MemPoolRemovalReaso\n             }\n         }\n         setEntries setAllRemoves;\n-        BOOST_FOREACH(txiter it, txToRemove) {\n+        for (txiter it : txToRemove) {\n             CalculateDescendants(it, setAllRemoves);\n         }\n \n@@ -520,7 +520,7 @@ void CTxMemPool::removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMem\n             // So it's critical that we remove the tx and not depend on the LockPoints.\n             txToRemove.insert(it);\n         } else if (it->GetSpendsCoinbase()) {\n-            BOOST_FOREACH(const CTxIn& txin, tx.vin) {\n+            for (const CTxIn& txin : tx.vin) {\n                 indexed_transaction_set::const_iterator it2 = mapTx.find(txin.prevout.hash);\n                 if (it2 != mapTx.end())\n                     continue;\n@@ -547,7 +547,7 @@ void CTxMemPool::removeConflicts(const CTransaction &tx)\n {\n     // Remove transactions which depend on inputs of tx, recursively\n     LOCK(cs);\n-    BOOST_FOREACH(const CTxIn &txin, tx.vin) {\n+    for (const CTxIn &txin : tx.vin) {\n         auto it = mapNextTx.find(txin.prevout);\n         if (it != mapNextTx.end()) {\n             const CTransaction &txConflict = *it->second;\n@@ -642,7 +642,7 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n         setEntries setParentCheck;\n         int64_t parentSizes = 0;\n         int64_t parentSigOpCost = 0;\n-        BOOST_FOREACH(const CTxIn &txin, tx.vin) {\n+        for (const CTxIn &txin : tx.vin) {\n             // Check that every mempool transaction's inputs refer to available coins, or other mempool tx's.\n             indexed_transaction_set::const_iterator it2 = mapTx.find(txin.prevout.hash);\n             if (it2 != mapTx.end()) {\n@@ -674,7 +674,7 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n         CAmount nFeesCheck = it->GetModifiedFee();\n         int64_t nSigOpCheck = it->GetSigOpCost();\n \n-        BOOST_FOREACH(txiter ancestorIt, setAncestors) {\n+        for (txiter ancestorIt : setAncestors) {\n             nSizeCheck += ancestorIt->GetTxSize();\n             nFeesCheck += ancestorIt->GetModifiedFee();\n             nSigOpCheck += ancestorIt->GetSigOpCost();\n@@ -848,14 +848,14 @@ void CTxMemPool::PrioritiseTransaction(const uint256& hash, const CAmount& nFeeD\n             uint64_t nNoLimit = std::numeric_limits<uint64_t>::max();\n             std::string dummy;\n             CalculateMemPoolAncestors(*it, setAncestors, nNoLimit, nNoLimit, nNoLimit, nNoLimit, dummy, false);\n-            BOOST_FOREACH(txiter ancestorIt, setAncestors) {\n+            for (txiter ancestorIt : setAncestors) {\n                 mapTx.modify(ancestorIt, update_descendant_state(0, nFeeDelta, 0));\n             }\n             // Now update all descendants' modified fees with ancestors\n             setEntries setDescendants;\n             CalculateDescendants(it, setDescendants);\n             setDescendants.erase(it);\n-            BOOST_FOREACH(txiter descendantIt, setDescendants) {\n+            for (txiter descendantIt : setDescendants) {\n                 mapTx.modify(descendantIt, update_ancestor_state(0, nFeeDelta, 0, 0));\n             }\n             ++nTransactionsUpdated;\n@@ -919,7 +919,7 @@ size_t CTxMemPool::DynamicMemoryUsage() const {\n void CTxMemPool::RemoveStaged(setEntries &stage, bool updateDescendants, MemPoolRemovalReason reason) {\n     AssertLockHeld(cs);\n     UpdateForRemoveFromMempool(stage, updateDescendants);\n-    BOOST_FOREACH(const txiter& it, stage) {\n+    for (const txiter& it : stage) {\n         removeUnchecked(it, reason);\n     }\n }\n@@ -933,7 +933,7 @@ int CTxMemPool::Expire(int64_t time) {\n         it++;\n     }\n     setEntries stage;\n-    BOOST_FOREACH(txiter removeit, toremove) {\n+    for (txiter removeit : toremove) {\n         CalculateDescendants(removeit, stage);\n     }\n     RemoveStaged(stage, false, MemPoolRemovalReason::EXPIRY);\n@@ -1042,13 +1042,13 @@ void CTxMemPool::TrimToSize(size_t sizelimit, std::vector<COutPoint>* pvNoSpends\n         std::vector<CTransaction> txn;\n         if (pvNoSpendsRemaining) {\n             txn.reserve(stage.size());\n-            BOOST_FOREACH(txiter iter, stage)\n+            for (txiter iter : stage)\n                 txn.push_back(iter->GetTx());\n         }\n         RemoveStaged(stage, false, MemPoolRemovalReason::SIZELIMIT);\n         if (pvNoSpendsRemaining) {\n-            BOOST_FOREACH(const CTransaction& tx, txn) {\n-                BOOST_FOREACH(const CTxIn& txin, tx.vin) {\n+            for (const CTransaction& tx : txn) {\n+                for (const CTxIn& txin : tx.vin) {\n                     if (exists(txin.prevout.hash)) continue;\n                     if (!mapNextTx.count(txin.prevout)) {\n                         pvNoSpendsRemaining->push_back(txin.prevout);"
      },
      {
        "sha": "ddedbdb97d8cfaf0b37b508712c55ee5dcf07755",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 20,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=7c00c267264ad80c2991b2f6c2ae08c2d9c9732b",
        "patch": "@@ -160,7 +160,7 @@ namespace {\n CBlockIndex* FindForkInGlobalIndex(const CChain& chain, const CBlockLocator& locator)\n {\n     // Find the first block the caller has in the main chain\n-    BOOST_FOREACH(const uint256& hash, locator.vHave) {\n+    for (const uint256& hash : locator.vHave) {\n         BlockMap::iterator mi = mapBlockIndex.find(hash);\n         if (mi != mapBlockIndex.end())\n         {\n@@ -297,7 +297,7 @@ bool CheckSequenceLocks(const CTransaction &tx, int flags, LockPoints* lp, bool\n             // lock on a mempool input, so we can use the return value of\n             // CheckSequenceLocks to indicate the LockPoints validity\n             int maxInputHeight = 0;\n-            BOOST_FOREACH(int height, prevheights) {\n+            for (int height : prevheights) {\n                 // Can ignore mempool inputs since we'll fail if they had non-zero locks\n                 if (height != tip->nHeight+1) {\n                     maxInputHeight = std::max(maxInputHeight, height);\n@@ -317,7 +317,7 @@ void LimitMempoolSize(CTxMemPool& pool, size_t limit, unsigned long age) {\n \n     std::vector<COutPoint> vNoSpendsRemaining;\n     pool.TrimToSize(limit, &vNoSpendsRemaining);\n-    BOOST_FOREACH(const COutPoint& removed, vNoSpendsRemaining)\n+    for (const COutPoint& removed : vNoSpendsRemaining)\n         pcoinsTip->Uncache(removed);\n }\n \n@@ -434,7 +434,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n     std::set<uint256> setConflicts;\n     {\n     LOCK(pool.cs); // protect pool.mapNextTx\n-    BOOST_FOREACH(const CTxIn &txin, tx.vin)\n+    for (const CTxIn &txin : tx.vin)\n     {\n         auto itConflicting = pool.mapNextTx.find(txin.prevout);\n         if (itConflicting != pool.mapNextTx.end())\n@@ -457,7 +457,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n                 bool fReplacementOptOut = true;\n                 if (fEnableReplacement)\n                 {\n-                    BOOST_FOREACH(const CTxIn &_txin, ptxConflicting->vin)\n+                    for (const CTxIn &_txin : ptxConflicting->vin)\n                     {\n                         if (_txin.nSequence < std::numeric_limits<unsigned int>::max()-1)\n                         {\n@@ -499,7 +499,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n         }\n \n         // do all inputs exist?\n-        BOOST_FOREACH(const CTxIn txin, tx.vin) {\n+        for (const CTxIn txin : tx.vin) {\n             if (!pcoinsTip->HaveCoinInCache(txin.prevout)) {\n                 coins_to_uncache.push_back(txin.prevout);\n             }\n@@ -547,7 +547,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n         // Keep track of transactions that spend a coinbase, which we re-scan\n         // during reorgs to ensure COINBASE_MATURITY is still met.\n         bool fSpendsCoinbase = false;\n-        BOOST_FOREACH(const CTxIn &txin, tx.vin) {\n+        for (const CTxIn &txin : tx.vin) {\n             const Coin &coin = view.AccessCoin(txin.prevout);\n             if (coin.IsCoinBase()) {\n                 fSpendsCoinbase = true;\n@@ -598,7 +598,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n         // that we have the set of all ancestors we can detect this\n         // pathological case by making sure setConflicts and setAncestors don't\n         // intersect.\n-        BOOST_FOREACH(CTxMemPool::txiter ancestorIt, setAncestors)\n+        for (CTxMemPool::txiter ancestorIt : setAncestors)\n         {\n             const uint256 &hashAncestor = ancestorIt->GetTx().GetHash();\n             if (setConflicts.count(hashAncestor))\n@@ -629,7 +629,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n             std::set<uint256> setConflictsParents;\n             const int maxDescendantsToVisit = 100;\n             CTxMemPool::setEntries setIterConflicting;\n-            BOOST_FOREACH(const uint256 &hashConflicting, setConflicts)\n+            for (const uint256 &hashConflicting : setConflicts)\n             {\n                 CTxMemPool::txiter mi = pool.mapTx.find(hashConflicting);\n                 if (mi == pool.mapTx.end())\n@@ -665,7 +665,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n                                   oldFeeRate.ToString()));\n                 }\n \n-                BOOST_FOREACH(const CTxIn &txin, mi->GetTx().vin)\n+                for (const CTxIn &txin : mi->GetTx().vin)\n                 {\n                     setConflictsParents.insert(txin.prevout.hash);\n                 }\n@@ -678,10 +678,10 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n             if (nConflictingCount <= maxDescendantsToVisit) {\n                 // If not too many to replace, then calculate the set of\n                 // transactions that would have to be evicted\n-                BOOST_FOREACH(CTxMemPool::txiter it, setIterConflicting) {\n+                for (CTxMemPool::txiter it : setIterConflicting) {\n                     pool.CalculateDescendants(it, allConflicting);\n                 }\n-                BOOST_FOREACH(CTxMemPool::txiter it, allConflicting) {\n+                for (CTxMemPool::txiter it : allConflicting) {\n                     nConflictingFees += it->GetModifiedFee();\n                     nConflictingSize += it->GetTxSize();\n                 }\n@@ -775,7 +775,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n         }\n \n         // Remove conflicting transactions from the mempool\n-        BOOST_FOREACH(const CTxMemPool::txiter it, allConflicting)\n+        for (const CTxMemPool::txiter it : allConflicting)\n         {\n             LogPrint(BCLog::MEMPOOL, \"replacing tx %s with %s for %s BTC additional fees, %d delta bytes\\n\",\n                     it->GetTx().GetHash().ToString(),\n@@ -816,7 +816,7 @@ bool AcceptToMemoryPoolWithTime(CTxMemPool& pool, CValidationState &state, const\n     std::vector<COutPoint> coins_to_uncache;\n     bool res = AcceptToMemoryPoolWorker(pool, state, tx, fLimitFree, pfMissingInputs, nAcceptTime, plTxnReplaced, fOverrideMempoolLimit, nAbsurdFee, coins_to_uncache);\n     if (!res) {\n-        BOOST_FOREACH(const COutPoint& hashTx, coins_to_uncache)\n+        for (const COutPoint& hashTx : coins_to_uncache)\n             pcoinsTip->Uncache(hashTx);\n     }\n     // After we've (potentially) uncached entries, ensure our coins cache is still within its size limits\n@@ -1116,7 +1116,7 @@ void UpdateCoins(const CTransaction& tx, CCoinsViewCache& inputs, CTxUndo &txund\n     // mark inputs spent\n     if (!tx.IsCoinBase()) {\n         txundo.vprevout.reserve(tx.vin.size());\n-        BOOST_FOREACH(const CTxIn &txin, tx.vin) {\n+        for (const CTxIn &txin : tx.vin) {\n             txundo.vprevout.emplace_back();\n             inputs.SpendCoin(txin.prevout, &txundo.vprevout.back());\n         }\n@@ -3097,7 +3097,7 @@ bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams,\n uint64_t CalculateCurrentUsage()\n {\n     uint64_t retval = 0;\n-    BOOST_FOREACH(const CBlockFileInfo &file, vinfoBlockFile) {\n+    for (const CBlockFileInfo &file : vinfoBlockFile) {\n         retval += file.nSize + file.nUndoSize;\n     }\n     return retval;\n@@ -3300,13 +3300,13 @@ bool static LoadBlockIndexDB(const CChainParams& chainparams)\n     // Calculate nChainWork\n     std::vector<std::pair<int, CBlockIndex*> > vSortedByHeight;\n     vSortedByHeight.reserve(mapBlockIndex.size());\n-    BOOST_FOREACH(const PAIRTYPE(uint256, CBlockIndex*)& item, mapBlockIndex)\n+    for (const PAIRTYPE(uint256, CBlockIndex*)& item : mapBlockIndex)\n     {\n         CBlockIndex* pindex = item.second;\n         vSortedByHeight.push_back(std::make_pair(pindex->nHeight, pindex));\n     }\n     sort(vSortedByHeight.begin(), vSortedByHeight.end());\n-    BOOST_FOREACH(const PAIRTYPE(int, CBlockIndex*)& item, vSortedByHeight)\n+    for (const PAIRTYPE(int, CBlockIndex*)& item : vSortedByHeight)\n     {\n         CBlockIndex* pindex = item.second;\n         pindex->nChainWork = (pindex->pprev ? pindex->pprev->nChainWork : 0) + GetBlockProof(*pindex);\n@@ -3355,7 +3355,7 @@ bool static LoadBlockIndexDB(const CChainParams& chainparams)\n     // Check presence of blk files\n     LogPrintf(\"Checking all blk files are present...\\n\");\n     std::set<int> setBlkDataFiles;\n-    BOOST_FOREACH(const PAIRTYPE(uint256, CBlockIndex*)& item, mapBlockIndex)\n+    for (const PAIRTYPE(uint256, CBlockIndex*)& item : mapBlockIndex)\n     {\n         CBlockIndex* pindex = item.second;\n         if (pindex->nStatus & BLOCK_HAVE_DATA) {\n@@ -3611,7 +3611,7 @@ void UnloadBlockIndex()\n         warningcache[b].clear();\n     }\n \n-    BOOST_FOREACH(BlockMap::value_type& entry, mapBlockIndex) {\n+    for (BlockMap::value_type& entry : mapBlockIndex) {\n         delete entry.second;\n     }\n     mapBlockIndex.clear();"
      },
      {
        "sha": "836c15b82c344913d7d5d7d4adca415efc6cb3d9",
        "filename": "src/wallet/crypter.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b/src/wallet/crypter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b/src/wallet/crypter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/crypter.cpp?ref=7c00c267264ad80c2991b2f6c2ae08c2d9c9732b",
        "patch": "@@ -285,7 +285,7 @@ bool CCryptoKeyStore::EncryptKeys(CKeyingMaterial& vMasterKeyIn)\n             return false;\n \n         fUseCrypto = true;\n-        BOOST_FOREACH(KeyMap::value_type& mKey, mapKeys)\n+        for (KeyMap::value_type& mKey : mapKeys)\n         {\n             const CKey &key = mKey.second;\n             CPubKey vchPubKey = key.GetPubKey();"
      },
      {
        "sha": "af8677c025a850c1ba528b971ec7da2295f3460e",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=7c00c267264ad80c2991b2f6c2ae08c2d9c9732b",
        "patch": "@@ -205,7 +205,7 @@ bool CDB::Recover(const std::string& filename, void *callbackDataIn, bool (*reco\n     }\n \n     DbTxn* ptxn = bitdb.TxnBegin();\n-    BOOST_FOREACH(CDBEnv::KeyValPair& row, salvagedData)\n+    for (CDBEnv::KeyValPair& row : salvagedData)\n     {\n         if (recoverKVcallback)\n         {"
      },
      {
        "sha": "c2abd2213c2021f63fdca8fcc66e8ac5e4ef3679",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=7c00c267264ad80c2991b2f6c2ae08c2d9c9732b",
        "patch": "@@ -48,7 +48,7 @@ int64_t static DecodeDumpTime(const std::string &str) {\n \n std::string static EncodeDumpString(const std::string &str) {\n     std::stringstream ret;\n-    BOOST_FOREACH(unsigned char c, str) {\n+    for (unsigned char c : str) {\n         if (c <= 32 || c >= 128 || c == '%') {\n             ret << '%' << HexStr(&c, &c + 1);\n         } else {\n@@ -1106,7 +1106,7 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n \n     UniValue response(UniValue::VARR);\n \n-    BOOST_FOREACH (const UniValue& data, requests.getValues()) {\n+    for (const UniValue& data : requests.getValues()) {\n         const int64_t timestamp = std::max(GetImportTimestamp(data, now), minimumTimestamp);\n         const UniValue result = ProcessImport(pwallet, data, timestamp);\n         response.push_back(result);"
      },
      {
        "sha": "cfc9ee5c1a20f3ee3b4e7813f862f1a9591e5a5f",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 17,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=7c00c267264ad80c2991b2f6c2ae08c2d9c9732b",
        "patch": "@@ -78,7 +78,7 @@ void WalletTxToJSON(const CWalletTx& wtx, UniValue& entry)\n     uint256 hash = wtx.GetHash();\n     entry.push_back(Pair(\"txid\", hash.GetHex()));\n     UniValue conflicts(UniValue::VARR);\n-    BOOST_FOREACH(const uint256& conflict, wtx.GetConflicts())\n+    for (const uint256& conflict : wtx.GetConflicts())\n         conflicts.push_back(conflict.GetHex());\n     entry.push_back(Pair(\"walletconflicts\", conflicts));\n     entry.push_back(Pair(\"time\", wtx.GetTxTime()));\n@@ -96,7 +96,7 @@ void WalletTxToJSON(const CWalletTx& wtx, UniValue& entry)\n     }\n     entry.push_back(Pair(\"bip125-replaceable\", rbfStatus));\n \n-    BOOST_FOREACH(const PAIRTYPE(std::string, std::string)& item, wtx.mapValue)\n+    for (const PAIRTYPE(std::string, std::string)& item : wtx.mapValue)\n         entry.push_back(Pair(item.first, item.second));\n }\n \n@@ -490,7 +490,7 @@ UniValue listaddressgroupings(const JSONRPCRequest& request)\n     std::map<CTxDestination, CAmount> balances = pwallet->GetAddressBalances();\n     for (std::set<CTxDestination> grouping : pwallet->GetAddressGroupings()) {\n         UniValue jsonGrouping(UniValue::VARR);\n-        BOOST_FOREACH(CTxDestination address, grouping)\n+        for (CTxDestination address : grouping)\n         {\n             UniValue addressInfo(UniValue::VARR);\n             addressInfo.push_back(CBitcoinAddress(address).ToString());\n@@ -616,7 +616,7 @@ UniValue getreceivedbyaddress(const JSONRPCRequest& request)\n         if (wtx.IsCoinBase() || !CheckFinalTx(*wtx.tx))\n             continue;\n \n-        BOOST_FOREACH(const CTxOut& txout, wtx.tx->vout)\n+        for (const CTxOut& txout : wtx.tx->vout)\n             if (txout.scriptPubKey == scriptPubKey)\n                 if (wtx.GetDepthInMainChain() >= nMinDepth)\n                     nAmount += txout.nValue;\n@@ -671,7 +671,7 @@ UniValue getreceivedbyaccount(const JSONRPCRequest& request)\n         if (wtx.IsCoinBase() || !CheckFinalTx(*wtx.tx))\n             continue;\n \n-        BOOST_FOREACH(const CTxOut& txout, wtx.tx->vout)\n+        for (const CTxOut& txout : wtx.tx->vout)\n         {\n             CTxDestination address;\n             if (ExtractDestination(txout.scriptPubKey, address) && IsMine(*pwallet, address) && setAddress.count(address)) {\n@@ -950,7 +950,7 @@ UniValue sendmany(const JSONRPCRequest& request)\n \n     CAmount totalAmount = 0;\n     std::vector<std::string> keys = sendTo.getKeys();\n-    BOOST_FOREACH(const std::string& name_, keys)\n+    for (const std::string& name_ : keys)\n     {\n         CBitcoinAddress address(name_);\n         if (!address.IsValid())\n@@ -1191,7 +1191,7 @@ UniValue ListReceived(CWallet * const pwallet, const UniValue& params, bool fByA\n         if (nDepth < nMinDepth)\n             continue;\n \n-        BOOST_FOREACH(const CTxOut& txout, wtx.tx->vout)\n+        for (const CTxOut& txout : wtx.tx->vout)\n         {\n             CTxDestination address;\n             if (!ExtractDestination(txout.scriptPubKey, address))\n@@ -1251,7 +1251,7 @@ UniValue ListReceived(CWallet * const pwallet, const UniValue& params, bool fByA\n             UniValue transactions(UniValue::VARR);\n             if (it != mapTally.end())\n             {\n-                BOOST_FOREACH(const uint256& _item, (*it).second.txids)\n+                for (const uint256& _item : (*it).second.txids)\n                 {\n                     transactions.push_back(_item.GetHex());\n                 }\n@@ -1385,7 +1385,7 @@ void ListTransactions(CWallet* const pwallet, const CWalletTx& wtx, const std::s\n     // Sent\n     if ((!listSent.empty() || nFee != 0) && (fAllAccounts || strAccount == strSentAccount))\n     {\n-        BOOST_FOREACH(const COutputEntry& s, listSent)\n+        for (const COutputEntry& s : listSent)\n         {\n             UniValue entry(UniValue::VOBJ);\n             if (involvesWatchonly || (::IsMine(*pwallet, s.destination) & ISMINE_WATCH_ONLY)) {\n@@ -1410,7 +1410,7 @@ void ListTransactions(CWallet* const pwallet, const CWalletTx& wtx, const std::s\n     // Received\n     if (listReceived.size() > 0 && wtx.GetDepthInMainChain() >= nMinDepth)\n     {\n-        BOOST_FOREACH(const COutputEntry& r, listReceived)\n+        for (const COutputEntry& r : listReceived)\n         {\n             std::string account;\n             if (pwallet->mapAddressBook.count(r.destination)) {\n@@ -1655,11 +1655,11 @@ UniValue listaccounts(const JSONRPCRequest& request)\n             continue;\n         wtx.GetAmounts(listReceived, listSent, nFee, strSentAccount, includeWatchonly);\n         mapAccountBalances[strSentAccount] -= nFee;\n-        BOOST_FOREACH(const COutputEntry& s, listSent)\n+        for (const COutputEntry& s : listSent)\n             mapAccountBalances[strSentAccount] -= s.amount;\n         if (nDepth >= nMinDepth)\n         {\n-            BOOST_FOREACH(const COutputEntry& r, listReceived)\n+            for (const COutputEntry& r : listReceived)\n                 if (pwallet->mapAddressBook.count(r.destination)) {\n                     mapAccountBalances[pwallet->mapAddressBook[r.destination].name] += r.amount;\n                 }\n@@ -1669,11 +1669,11 @@ UniValue listaccounts(const JSONRPCRequest& request)\n     }\n \n     const std::list<CAccountingEntry>& acentries = pwallet->laccentries;\n-    BOOST_FOREACH(const CAccountingEntry& entry, acentries)\n+    for (const CAccountingEntry& entry : acentries)\n         mapAccountBalances[entry.strAccount] += entry.nCreditDebit;\n \n     UniValue ret(UniValue::VOBJ);\n-    BOOST_FOREACH(const PAIRTYPE(std::string, CAmount)& accountBalance, mapAccountBalances) {\n+    for (const PAIRTYPE(std::string, CAmount)& accountBalance : mapAccountBalances) {\n         ret.push_back(Pair(accountBalance.first, ValueFromAmount(accountBalance.second)));\n     }\n     return ret;\n@@ -2338,7 +2338,7 @@ UniValue listlockunspent(const JSONRPCRequest& request)\n \n     UniValue ret(UniValue::VARR);\n \n-    BOOST_FOREACH(COutPoint &outpt, vOutpts) {\n+    for (COutPoint &outpt : vOutpts) {\n         UniValue o(UniValue::VOBJ);\n \n         o.push_back(Pair(\"txid\", outpt.hash.GetHex()));\n@@ -2456,7 +2456,7 @@ UniValue resendwallettransactions(const JSONRPCRequest& request)\n \n     std::vector<uint256> txids = pwallet->ResendWalletTransactionsBefore(GetTime(), g_connman.get());\n     UniValue result(UniValue::VARR);\n-    BOOST_FOREACH(const uint256& txid, txids)\n+    for (const uint256& txid : txids)\n     {\n         result.push_back(txid.ToString());\n     }\n@@ -2581,7 +2581,7 @@ UniValue listunspent(const JSONRPCRequest& request)\n     LOCK2(cs_main, pwallet->cs_wallet);\n \n     pwallet->AvailableCoins(vecOutputs, !include_unsafe, NULL, nMinimumAmount, nMaximumAmount, nMinimumSumAmount, nMaximumCount, nMinDepth, nMaxDepth);\n-    BOOST_FOREACH(const COutput& out, vecOutputs) {\n+    for (const COutput& out : vecOutputs) {\n         CTxDestination address;\n         const CScript& scriptPubKey = out.tx->tx->vout[out.i].scriptPubKey;\n         bool fValidAddress = ExtractDestination(scriptPubKey, address);"
      },
      {
        "sha": "12d9f2e99551ab6644b63e9b6f703561effb45f2",
        "filename": "src/wallet/test/accounting_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b/src/wallet/test/accounting_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b/src/wallet/test/accounting_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/accounting_tests.cpp?ref=7c00c267264ad80c2991b2f6c2ae08c2d9c9732b",
        "patch": "@@ -23,7 +23,7 @@ GetResults(std::map<CAmount, CAccountingEntry>& results)\n     results.clear();\n     BOOST_CHECK(pwalletMain->ReorderTransactions() == DB_LOAD_OK);\n     pwalletMain->ListAccountCreditDebit(\"\", aes);\n-    BOOST_FOREACH(CAccountingEntry& ae, aes)\n+    for (CAccountingEntry& ae : aes)\n     {\n         results[ae.nOrderPos] = ae;\n     }"
      },
      {
        "sha": "531a1fabffd5ca0004e1686a5b37b49b9d96b470",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 45,
        "deletions": 45,
        "changes": 90,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=7c00c267264ad80c2991b2f6c2ae08c2d9c9732b",
        "patch": "@@ -297,7 +297,7 @@ bool CWallet::Unlock(const SecureString& strWalletPassphrase)\n \n     {\n         LOCK(cs_wallet);\n-        BOOST_FOREACH(const MasterKeyMap::value_type& pMasterKey, mapMasterKeys)\n+        for (const MasterKeyMap::value_type& pMasterKey : mapMasterKeys)\n         {\n             if(!crypter.SetKeyFromPassphrase(strWalletPassphrase, pMasterKey.second.vchSalt, pMasterKey.second.nDeriveIterations, pMasterKey.second.nDerivationMethod))\n                 return false;\n@@ -320,7 +320,7 @@ bool CWallet::ChangeWalletPassphrase(const SecureString& strOldWalletPassphrase,\n \n         CCrypter crypter;\n         CKeyingMaterial _vMasterKey;\n-        BOOST_FOREACH(MasterKeyMap::value_type& pMasterKey, mapMasterKeys)\n+        for (MasterKeyMap::value_type& pMasterKey : mapMasterKeys)\n         {\n             if(!crypter.SetKeyFromPassphrase(strOldWalletPassphrase, pMasterKey.second.vchSalt, pMasterKey.second.nDeriveIterations, pMasterKey.second.nDerivationMethod))\n                 return false;\n@@ -412,7 +412,7 @@ std::set<uint256> CWallet::GetConflicts(const uint256& txid) const\n \n     std::pair<TxSpends::const_iterator, TxSpends::const_iterator> range;\n \n-    BOOST_FOREACH(const CTxIn& txin, wtx.tx->vin)\n+    for (const CTxIn& txin : wtx.tx->vin)\n     {\n         if (mapTxSpends.count(txin.prevout) <= 1)\n             continue;  // No conflict if zero or one spends\n@@ -544,7 +544,7 @@ void CWallet::AddToSpends(const uint256& wtxid)\n     if (thisTx.IsCoinBase()) // Coinbases don't spend anything!\n         return;\n \n-    BOOST_FOREACH(const CTxIn& txin, thisTx.tx->vin)\n+    for (const CTxIn& txin : thisTx.tx->vin)\n         AddToSpends(txin.prevout, wtxid);\n }\n \n@@ -659,7 +659,7 @@ DBErrors CWallet::ReorderTransactions()\n     }\n     std::list<CAccountingEntry> acentries;\n     walletdb.ListAccountCreditDebit(\"\", acentries);\n-    BOOST_FOREACH(CAccountingEntry& entry, acentries)\n+    for (CAccountingEntry& entry : acentries)\n     {\n         txByTime.insert(std::make_pair(entry.nTime, TxPair((CWalletTx*)0, &entry)));\n     }\n@@ -689,7 +689,7 @@ DBErrors CWallet::ReorderTransactions()\n         else\n         {\n             int64_t nOrderPosOff = 0;\n-            BOOST_FOREACH(const int64_t& nOffsetStart, nOrderPosOffsets)\n+            for (const int64_t& nOffsetStart : nOrderPosOffsets)\n             {\n                 if (nOrderPos >= nOffsetStart)\n                     ++nOrderPosOff;\n@@ -778,7 +778,7 @@ bool CWallet::GetAccountPubkey(CPubKey &pubKey, std::string strAccount, bool bFo\n             for (std::map<uint256, CWalletTx>::iterator it = mapWallet.begin();\n                  it != mapWallet.end() && account.vchPubKey.IsValid();\n                  ++it)\n-                BOOST_FOREACH(const CTxOut& txout, (*it).second.tx->vout)\n+                for (const CTxOut& txout : (*it).second.tx->vout)\n                     if (txout.scriptPubKey == scriptPubKey) {\n                         bForceNew = true;\n                         break;\n@@ -804,7 +804,7 @@ void CWallet::MarkDirty()\n {\n     {\n         LOCK(cs_wallet);\n-        BOOST_FOREACH(PAIRTYPE(const uint256, CWalletTx)& item, mapWallet)\n+        for (PAIRTYPE(const uint256, CWalletTx)& item : mapWallet)\n             item.second.MarkDirty();\n     }\n }\n@@ -922,7 +922,7 @@ bool CWallet::LoadToWallet(const CWalletTx& wtxIn)\n     wtx.BindWallet(this);\n     wtxOrdered.insert(std::make_pair(wtx.nOrderPos, TxPair(&wtx, (CAccountingEntry*)0)));\n     AddToSpends(hash);\n-    BOOST_FOREACH(const CTxIn& txin, wtx.tx->vin) {\n+    for (const CTxIn& txin : wtx.tx->vin) {\n         if (mapWallet.count(txin.prevout.hash)) {\n             CWalletTx& prevtx = mapWallet[txin.prevout.hash];\n             if (prevtx.nIndex == -1 && !prevtx.hashUnset()) {\n@@ -954,7 +954,7 @@ bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef& ptx, const CBlockI\n         AssertLockHeld(cs_wallet);\n \n         if (pIndex != NULL) {\n-            BOOST_FOREACH(const CTxIn& txin, tx.vin) {\n+            for (const CTxIn& txin : tx.vin) {\n                 std::pair<TxSpends::const_iterator, TxSpends::const_iterator> range = mapTxSpends.equal_range(txin.prevout);\n                 while (range.first != range.second) {\n                     if (range.first->second != tx.GetHash()) {\n@@ -1035,7 +1035,7 @@ bool CWallet::AbandonTransaction(const uint256& hashTx)\n             }\n             // If a transaction changes 'conflicted' state, that changes the balance\n             // available of the outputs it spends. So force those to be recomputed\n-            BOOST_FOREACH(const CTxIn& txin, wtx.tx->vin)\n+            for (const CTxIn& txin : wtx.tx->vin)\n             {\n                 if (mapWallet.count(txin.prevout.hash))\n                     mapWallet[txin.prevout.hash].MarkDirty();\n@@ -1096,7 +1096,7 @@ void CWallet::MarkConflicted(const uint256& hashBlock, const uint256& hashTx)\n             }\n             // If a transaction changes 'conflicted' state, that changes the balance\n             // available of the outputs it spends. So force those to be recomputed\n-            BOOST_FOREACH(const CTxIn& txin, wtx.tx->vin)\n+            for (const CTxIn& txin : wtx.tx->vin)\n             {\n                 if (mapWallet.count(txin.prevout.hash))\n                     mapWallet[txin.prevout.hash].MarkDirty();\n@@ -1114,7 +1114,7 @@ void CWallet::SyncTransaction(const CTransactionRef& ptx, const CBlockIndex *pin\n     // If a transaction changes 'conflicted' state, that changes the balance\n     // available of the outputs it spends. So force those to be\n     // recomputed, also:\n-    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+    for (const CTxIn& txin : tx.vin)\n     {\n         if (mapWallet.count(txin.prevout.hash))\n             mapWallet[txin.prevout.hash].MarkDirty();\n@@ -1230,7 +1230,7 @@ CAmount CWallet::GetChange(const CTxOut& txout) const\n \n bool CWallet::IsMine(const CTransaction& tx) const\n {\n-    BOOST_FOREACH(const CTxOut& txout, tx.vout)\n+    for (const CTxOut& txout : tx.vout)\n         if (IsMine(txout))\n             return true;\n     return false;\n@@ -1244,7 +1244,7 @@ bool CWallet::IsFromMe(const CTransaction& tx) const\n CAmount CWallet::GetDebit(const CTransaction& tx, const isminefilter& filter) const\n {\n     CAmount nDebit = 0;\n-    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+    for (const CTxIn& txin : tx.vin)\n     {\n         nDebit += GetDebit(txin, filter);\n         if (!MoneyRange(nDebit))\n@@ -1257,7 +1257,7 @@ bool CWallet::IsAllFromMe(const CTransaction& tx, const isminefilter& filter) co\n {\n     LOCK(cs_wallet);\n \n-    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+    for (const CTxIn& txin : tx.vin)\n     {\n         auto mi = mapWallet.find(txin.prevout.hash);\n         if (mi == mapWallet.end())\n@@ -1277,7 +1277,7 @@ bool CWallet::IsAllFromMe(const CTransaction& tx, const isminefilter& filter) co\n CAmount CWallet::GetCredit(const CTransaction& tx, const isminefilter& filter) const\n {\n     CAmount nCredit = 0;\n-    BOOST_FOREACH(const CTxOut& txout, tx.vout)\n+    for (const CTxOut& txout : tx.vout)\n     {\n         nCredit += GetCredit(txout, filter);\n         if (!MoneyRange(nCredit))\n@@ -1289,7 +1289,7 @@ CAmount CWallet::GetCredit(const CTransaction& tx, const isminefilter& filter) c\n CAmount CWallet::GetChange(const CTransaction& tx) const\n {\n     CAmount nChange = 0;\n-    BOOST_FOREACH(const CTxOut& txout, tx.vout)\n+    for (const CTxOut& txout : tx.vout)\n     {\n         nChange += GetChange(txout);\n         if (!MoneyRange(nChange))\n@@ -1525,7 +1525,7 @@ void CWallet::ReacceptWalletTransactions()\n     std::map<int64_t, CWalletTx*> mapSorted;\n \n     // Sort pending wallet transactions based on their initial wallet insertion order\n-    BOOST_FOREACH(PAIRTYPE(const uint256, CWalletTx)& item, mapWallet)\n+    for (PAIRTYPE(const uint256, CWalletTx)& item : mapWallet)\n     {\n         const uint256& wtxid = item.first;\n         CWalletTx& wtx = item.second;\n@@ -1539,7 +1539,7 @@ void CWallet::ReacceptWalletTransactions()\n     }\n \n     // Try to add wallet transactions to memory pool\n-    BOOST_FOREACH(PAIRTYPE(const int64_t, CWalletTx*)& item, mapSorted)\n+    for (PAIRTYPE(const int64_t, CWalletTx*)& item : mapSorted)\n     {\n         CWalletTx& wtx = *(item.second);\n \n@@ -1767,7 +1767,7 @@ bool CWalletTx::IsTrusted() const\n         return false;\n \n     // Trusted if all inputs are from us and are in the mempool:\n-    BOOST_FOREACH(const CTxIn& txin, tx->vin)\n+    for (const CTxIn& txin : tx->vin)\n     {\n         // Transactions not sent by us: not trusted\n         const CWalletTx* parent = pwallet->GetWalletTx(txin.prevout.hash);\n@@ -1796,15 +1796,15 @@ std::vector<uint256> CWallet::ResendWalletTransactionsBefore(int64_t nTime, CCon\n     LOCK(cs_wallet);\n     // Sort them in chronological order\n     std::multimap<unsigned int, CWalletTx*> mapSorted;\n-    BOOST_FOREACH(PAIRTYPE(const uint256, CWalletTx)& item, mapWallet)\n+    for (PAIRTYPE(const uint256, CWalletTx)& item : mapWallet)\n     {\n         CWalletTx& wtx = item.second;\n         // Don't rebroadcast if newer than nTime:\n         if (wtx.nTimeReceived > nTime)\n             continue;\n         mapSorted.insert(std::make_pair(wtx.nTimeReceived, &wtx));\n     }\n-    BOOST_FOREACH(PAIRTYPE(const unsigned int, CWalletTx*)& item, mapSorted)\n+    for (PAIRTYPE(const unsigned int, CWalletTx*)& item : mapSorted)\n     {\n         CWalletTx& wtx = *item.second;\n         if (wtx.RelayWalletTransaction(connman))\n@@ -2228,7 +2228,7 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const int nConfMin\n \n     random_shuffle(vCoins.begin(), vCoins.end(), GetRandInt);\n \n-    BOOST_FOREACH(const COutput &output, vCoins)\n+    for (const COutput &output : vCoins)\n     {\n         if (!output.fSpendable)\n             continue;\n@@ -2328,7 +2328,7 @@ bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAm\n     // coin control -> return all selected outputs (we want all selected to go into the transaction for sure)\n     if (coinControl && coinControl->HasSelected() && !coinControl->fAllowOtherInputs)\n     {\n-        BOOST_FOREACH(const COutput& out, vCoins)\n+        for (const COutput& out : vCoins)\n         {\n             if (!out.fSpendable)\n                  continue;\n@@ -2345,7 +2345,7 @@ bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAm\n     std::vector<COutPoint> vPresetInputs;\n     if (coinControl)\n         coinControl->ListSelected(vPresetInputs);\n-    BOOST_FOREACH(const COutPoint& outpoint, vPresetInputs)\n+    for (const COutPoint& outpoint : vPresetInputs)\n     {\n         std::map<uint256, CWalletTx>::const_iterator it = mapWallet.find(outpoint.hash);\n         if (it != mapWallet.end())\n@@ -2433,7 +2433,7 @@ bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, bool ov\n     coinControl.fOverrideFeeRate = overrideEstimatedFeeRate;\n     coinControl.nFeeRate = specificFeeRate;\n \n-    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+    for (const CTxIn& txin : tx.vin)\n         coinControl.Select(txin.prevout);\n \n     CReserveKey reservekey(this);\n@@ -2449,7 +2449,7 @@ bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, bool ov\n         tx.vout[idx].nValue = wtx.tx->vout[idx].nValue;\n \n     // Add new txins (keeping original txin scriptSig/order)\n-    BOOST_FOREACH(const CTxIn& txin, wtx.tx->vin)\n+    for (const CTxIn& txin : wtx.tx->vin)\n     {\n         if (!coinControl.IsSelected(txin.prevout))\n         {\n@@ -2832,7 +2832,7 @@ bool CWallet::CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey, CCon\n             AddToWallet(wtxNew);\n \n             // Notify that old coins are spent\n-            BOOST_FOREACH(const CTxIn& txin, wtxNew.tx->vin)\n+            for (const CTxIn& txin : wtxNew.tx->vin)\n             {\n                 CWalletTx &coin = mapWallet[txin.prevout.hash];\n                 coin.BindWallet(this);\n@@ -3010,7 +3010,7 @@ bool CWallet::DelAddressBook(const CTxDestination& address)\n \n         // Delete destdata tuples associated with address\n         std::string strAddress = CBitcoinAddress(address).ToString();\n-        BOOST_FOREACH(const PAIRTYPE(std::string, std::string) &item, mapAddressBook[address].destdata)\n+        for (const PAIRTYPE(std::string, std::string) &item : mapAddressBook[address].destdata)\n         {\n             CWalletDB(*dbw).EraseDestData(strAddress, item.first);\n         }\n@@ -3055,7 +3055,7 @@ bool CWallet::NewKeyPool()\n     {\n         LOCK(cs_wallet);\n         CWalletDB walletdb(*dbw);\n-        BOOST_FOREACH(int64_t nIndex, setKeyPool)\n+        for (int64_t nIndex : setKeyPool)\n             walletdb.ErasePool(nIndex);\n         setKeyPool.clear();\n \n@@ -3305,7 +3305,7 @@ std::set< std::set<CTxDestination> > CWallet::GetAddressGroupings()\n         {\n             bool any_mine = false;\n             // group all input addresses with each other\n-            BOOST_FOREACH(CTxIn txin, pcoin->tx->vin)\n+            for (CTxIn txin : pcoin->tx->vin)\n             {\n                 CTxDestination address;\n                 if(!IsMine(txin)) /* If this input isn't mine, ignore it */\n@@ -3319,7 +3319,7 @@ std::set< std::set<CTxDestination> > CWallet::GetAddressGroupings()\n             // group change with input addresses\n             if (any_mine)\n             {\n-               BOOST_FOREACH(CTxOut txout, pcoin->tx->vout)\n+               for (CTxOut txout : pcoin->tx->vout)\n                    if (IsChange(txout))\n                    {\n                        CTxDestination txoutAddr;\n@@ -3350,18 +3350,18 @@ std::set< std::set<CTxDestination> > CWallet::GetAddressGroupings()\n \n     std::set< std::set<CTxDestination>* > uniqueGroupings; // a set of pointers to groups of addresses\n     std::map< CTxDestination, std::set<CTxDestination>* > setmap;  // map addresses to the unique group containing it\n-    BOOST_FOREACH(std::set<CTxDestination> _grouping, groupings)\n+    for (std::set<CTxDestination> _grouping : groupings)\n     {\n         // make a set of all the groups hit by this new group\n         std::set< std::set<CTxDestination>* > hits;\n         std::map< CTxDestination, std::set<CTxDestination>* >::iterator it;\n-        BOOST_FOREACH(CTxDestination address, _grouping)\n+        for (CTxDestination address : _grouping)\n             if ((it = setmap.find(address)) != setmap.end())\n                 hits.insert((*it).second);\n \n         // merge all hit groups into a new single group and delete old groups\n         std::set<CTxDestination>* merged = new std::set<CTxDestination>(_grouping);\n-        BOOST_FOREACH(std::set<CTxDestination>* hit, hits)\n+        for (std::set<CTxDestination>* hit : hits)\n         {\n             merged->insert(hit->begin(), hit->end());\n             uniqueGroupings.erase(hit);\n@@ -3370,12 +3370,12 @@ std::set< std::set<CTxDestination> > CWallet::GetAddressGroupings()\n         uniqueGroupings.insert(merged);\n \n         // update setmap\n-        BOOST_FOREACH(CTxDestination element, *merged)\n+        for (CTxDestination element : *merged)\n             setmap[element] = merged;\n     }\n \n     std::set< std::set<CTxDestination> > ret;\n-    BOOST_FOREACH(std::set<CTxDestination>* uniqueGrouping, uniqueGroupings)\n+    for (std::set<CTxDestination>* uniqueGrouping : uniqueGroupings)\n     {\n         ret.insert(*uniqueGrouping);\n         delete uniqueGrouping;\n@@ -3388,7 +3388,7 @@ std::set<CTxDestination> CWallet::GetAccountAddresses(const std::string& strAcco\n {\n     LOCK(cs_wallet);\n     std::set<CTxDestination> result;\n-    BOOST_FOREACH(const PAIRTYPE(CTxDestination, CAddressBookData)& item, mapAddressBook)\n+    for (const PAIRTYPE(CTxDestination, CAddressBookData)& item : mapAddressBook)\n     {\n         const CTxDestination& address = item.first;\n         const std::string& strName = item.second.name;\n@@ -3438,7 +3438,7 @@ void CWallet::GetAllReserveKeys(std::set<CKeyID>& setAddress) const\n     CWalletDB walletdb(*dbw);\n \n     LOCK2(cs_main, cs_wallet);\n-    BOOST_FOREACH(const int64_t& id, setKeyPool)\n+    for (const int64_t& id : setKeyPool)\n     {\n         CKeyPool keypool;\n         if (!walletdb.ReadPool(id, keypool))\n@@ -3513,7 +3513,7 @@ class CAffectedKeysVisitor : public boost::static_visitor<void> {\n         std::vector<CTxDestination> vDest;\n         int nRequired;\n         if (ExtractDestinations(script, type, vDest, nRequired)) {\n-            BOOST_FOREACH(const CTxDestination &dest, vDest)\n+            for (const CTxDestination &dest : vDest)\n                 boost::apply_visitor(*this, dest);\n         }\n     }\n@@ -3548,7 +3548,7 @@ void CWallet::GetKeyBirthTimes(std::map<CTxDestination, int64_t> &mapKeyBirth) c\n     std::map<CKeyID, CBlockIndex*> mapKeyFirstBlock;\n     std::set<CKeyID> setKeys;\n     GetKeys(setKeys);\n-    BOOST_FOREACH(const CKeyID &keyid, setKeys) {\n+    for (const CKeyID &keyid : setKeys) {\n         if (mapKeyBirth.count(keyid) == 0)\n             mapKeyFirstBlock[keyid] = pindexMax;\n     }\n@@ -3567,10 +3567,10 @@ void CWallet::GetKeyBirthTimes(std::map<CTxDestination, int64_t> &mapKeyBirth) c\n         if (blit != mapBlockIndex.end() && chainActive.Contains(blit->second)) {\n             // ... which are already in a block\n             int nHeight = blit->second->nHeight;\n-            BOOST_FOREACH(const CTxOut &txout, wtx.tx->vout) {\n+            for (const CTxOut &txout : wtx.tx->vout) {\n                 // iterate over all their outputs\n                 CAffectedKeysVisitor(*this, vAffected).Process(txout.scriptPubKey);\n-                BOOST_FOREACH(const CKeyID &keyid, vAffected) {\n+                for (const CKeyID &keyid : vAffected) {\n                     // ... and all their affected keys\n                     std::map<CKeyID, CBlockIndex*>::iterator rit = mapKeyFirstBlock.find(keyid);\n                     if (rit != mapKeyFirstBlock.end() && nHeight < rit->second->nHeight)\n@@ -3891,7 +3891,7 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n         {\n             CWalletDB walletdb(*walletInstance->dbw);\n \n-            BOOST_FOREACH(const CWalletTx& wtxOld, vWtx)\n+            for (const CWalletTx& wtxOld : vWtx)\n             {\n                 uint256 hash = wtxOld.GetHash();\n                 std::map<uint256, CWalletTx>::iterator mi = walletInstance->mapWallet.find(hash);"
      },
      {
        "sha": "bce6dc8d7f76fbba6d30108179f5d7d67da503f2",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=7c00c267264ad80c2991b2f6c2ae08c2d9c9732b",
        "patch": "@@ -208,7 +208,7 @@ CAmount CWalletDB::GetAccountCreditDebit(const std::string& strAccount)\n     ListAccountCreditDebit(strAccount, entries);\n \n     CAmount nCreditDebit = 0;\n-    BOOST_FOREACH (const CAccountingEntry& entry, entries)\n+    for (const CAccountingEntry& entry : entries)\n         nCreditDebit += entry.nCreditDebit;\n \n     return nCreditDebit;\n@@ -635,7 +635,7 @@ DBErrors CWalletDB::LoadWallet(CWallet* pwallet)\n     if ((wss.nKeys + wss.nCKeys + wss.nWatchKeys) != wss.nKeyMeta)\n         pwallet->UpdateTimeFirstKey(1);\n \n-    BOOST_FOREACH(uint256 hash, wss.vWalletUpgrade)\n+    for (uint256 hash : wss.vWalletUpgrade)\n         WriteTx(pwallet->mapWallet[hash]);\n \n     // Rewrite encrypted wallets of versions 0.4.0 and 0.5.0rc:\n@@ -650,7 +650,7 @@ DBErrors CWalletDB::LoadWallet(CWallet* pwallet)\n \n     pwallet->laccentries.clear();\n     ListAccountCreditDebit(\"*\", pwallet->laccentries);\n-    BOOST_FOREACH(CAccountingEntry& entry, pwallet->laccentries) {\n+    for (CAccountingEntry& entry : pwallet->laccentries) {\n         pwallet->wtxOrdered.insert(make_pair(entry.nOrderPos, CWallet::TxPair((CWalletTx*)0, &entry)));\n     }\n \n@@ -736,7 +736,7 @@ DBErrors CWalletDB::ZapSelectTx(std::vector<uint256>& vTxHashIn, std::vector<uin\n     // erase each matching wallet TX\n     bool delerror = false;\n     std::vector<uint256>::iterator it = vTxHashIn.begin();\n-    BOOST_FOREACH (uint256 hash, vTxHash) {\n+    for (uint256 hash : vTxHash) {\n         while (it < vTxHashIn.end() && (*it) < hash) {\n             it++;\n         }\n@@ -767,7 +767,7 @@ DBErrors CWalletDB::ZapWalletTx(std::vector<CWalletTx>& vWtx)\n         return err;\n \n     // erase each wallet TX\n-    BOOST_FOREACH (uint256& hash, vTxHash) {\n+    for (uint256& hash : vTxHash) {\n         if (!EraseTx(hash))\n             return DB_CORRUPT;\n     }"
      }
    ]
  },
  {
    "sha": "18dc3c396299caccb0df31254aaec0d08b70dd2a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxOGRjM2MzOTYyOTljYWNjYjBkZjMxMjU0YWFlYzBkMDhiNzBkZDJh",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-06-02T01:25:02Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-06-05T18:11:01Z"
      },
      "message": "scripted-diff: Remove Q_FOREACH\n\n-BEGIN VERIFY SCRIPT-\nsed -i 's/Q_FOREACH *(\\(.*\\),/for (\\1 :/' ./src/*.h ./src/*.cpp ./src/*/*.h ./src/*/*.cpp ./src/*/*/*.h ./src/*/*/*.cpp ;\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "05b0ce630dbc47a5f842f50fce46f891b1482108",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/05b0ce630dbc47a5f842f50fce46f891b1482108"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/18dc3c396299caccb0df31254aaec0d08b70dd2a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJZNZ61AAoJEIhmwY6hyUSiVEgP/0uXttBHey087xx+a3u5MoiO\naaowDCk1z8N43p0aT6CShZOOIjAOHpPTwifKuuLb8rz7ok3JB/SZh7/9FUqBzQsV\n2xPoHHNxnuSl7JVhjkhYic4/6Vr8KvrU8byXT0HIcxQYqJKCVeCWcDt0P18ZAGH/\n+4HREiAthczqki408GlPhbn7o60ucU2Y7agMgHW/WS2IYS3Fvvufvu/DBgCv5RmM\nImo02LzpF3TvXexajkKyCAthA2hcMBqzwfEpyK/8krOYx5MPTQhI1hvNBdbgi6AN\nKKeztLbaIFM9h34ZgnAp6ekRd9ZXjyuqNv+IN52cl/MwfkZ76HuKeg2Skrul+17R\n5i0FO4v8WNLU5+u4KpGchDkq6pK4jo0eFJaizyF20bsvQaBcAVpTYg5USFI31YTM\n3RhdPjZfDR91FWVrtl5lCNp2Mv1Vs/ZUVTVtZgKS+eT8qdpCFdWNiPLLgwoqI/AM\nOhLIp6puMcJmoYB0fHJhv7wWCW0xn2jj54bApicrH0TB4YLPhsSWmoqpm+DNSdnJ\nbGT35gEmTe2jebdZz5WVaV+odZx0fUXhroqRR0O8VLyj6p7IdW+AhxeoCK8Ebgnm\nQ+xotNkLYNTjfed/JtHJh/idSArOr6/BjmBT08wHYvbfa91rmoQypK+mbN9bCaH9\niDbRKr2QXplJmXw1vnkA\n=GKQn\n-----END PGP SIGNATURE-----",
        "payload": "tree 05b0ce630dbc47a5f842f50fce46f891b1482108\nparent 7c00c267264ad80c2991b2f6c2ae08c2d9c9732b\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1496366702 +0200\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1496686261 +0200\n\nscripted-diff: Remove Q_FOREACH\n\n-BEGIN VERIFY SCRIPT-\nsed -i 's/Q_FOREACH *(\\(.*\\),/for (\\1 :/' ./src/*.h ./src/*.cpp ./src/*/*.h ./src/*/*.cpp ./src/*/*/*.h ./src/*/*/*.cpp ;\n-END VERIFY SCRIPT-\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/18dc3c396299caccb0df31254aaec0d08b70dd2a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/18dc3c396299caccb0df31254aaec0d08b70dd2a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/18dc3c396299caccb0df31254aaec0d08b70dd2a/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7c00c267264ad80c2991b2f6c2ae08c2d9c9732b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7c00c267264ad80c2991b2f6c2ae08c2d9c9732b"
      }
    ],
    "stats": {
      "total": 58,
      "additions": 29,
      "deletions": 29
    },
    "files": [
      {
        "sha": "cebac46b952387d714df71efa27a32eeb59e2e00",
        "filename": "src/qt/addressbookpage.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/18dc3c396299caccb0df31254aaec0d08b70dd2a/src/qt/addressbookpage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/18dc3c396299caccb0df31254aaec0d08b70dd2a/src/qt/addressbookpage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addressbookpage.cpp?ref=18dc3c396299caccb0df31254aaec0d08b70dd2a",
        "patch": "@@ -254,7 +254,7 @@ void AddressBookPage::done(int retval)\n     // Figure out which address was selected, and return it\n     QModelIndexList indexes = table->selectionModel()->selectedRows(AddressTableModel::Address);\n \n-    Q_FOREACH (const QModelIndex& index, indexes) {\n+    for (const QModelIndex& index : indexes) {\n         QVariant address = table->model()->data(index);\n         returnValue = address.toString();\n     }"
      },
      {
        "sha": "429c18cba85c309fe2cfe8d9268e26741f81fa33",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/18dc3c396299caccb0df31254aaec0d08b70dd2a/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/18dc3c396299caccb0df31254aaec0d08b70dd2a/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=18dc3c396299caccb0df31254aaec0d08b70dd2a",
        "patch": "@@ -1006,7 +1006,7 @@ void BitcoinGUI::dropEvent(QDropEvent *event)\n {\n     if(event->mimeData()->hasUrls())\n     {\n-        Q_FOREACH(const QUrl &uri, event->mimeData()->urls())\n+        for (const QUrl &uri : event->mimeData()->urls())\n         {\n             Q_EMIT receivedURI(uri.toString());\n         }\n@@ -1202,7 +1202,7 @@ UnitDisplayStatusBarControl::UnitDisplayStatusBarControl(const PlatformStyle *pl\n     QList<BitcoinUnits::Unit> units = BitcoinUnits::availableUnits();\n     int max_width = 0;\n     const QFontMetrics fm(font());\n-    Q_FOREACH (const BitcoinUnits::Unit unit, units)\n+    for (const BitcoinUnits::Unit unit : units)\n     {\n         max_width = qMax(max_width, fm.width(BitcoinUnits::name(unit)));\n     }\n@@ -1221,7 +1221,7 @@ void UnitDisplayStatusBarControl::mousePressEvent(QMouseEvent *event)\n void UnitDisplayStatusBarControl::createContextMenu()\n {\n     menu = new QMenu(this);\n-    Q_FOREACH(BitcoinUnits::Unit u, BitcoinUnits::availableUnits())\n+    for (BitcoinUnits::Unit u : BitcoinUnits::availableUnits())\n     {\n         QAction *menuAction = new QAction(QString(BitcoinUnits::name(u)), this);\n         menuAction->setData(QVariant(u));"
      },
      {
        "sha": "60292604266b7920076762cc76ba00fdfb241464",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/18dc3c396299caccb0df31254aaec0d08b70dd2a/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/18dc3c396299caccb0df31254aaec0d08b70dd2a/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=18dc3c396299caccb0df31254aaec0d08b70dd2a",
        "patch": "@@ -426,7 +426,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n     CAmount nPayAmount = 0;\n     bool fDust = false;\n     CMutableTransaction txDummy;\n-    Q_FOREACH(const CAmount &amount, CoinControlDialog::payAmounts)\n+    for (const CAmount &amount : CoinControlDialog::payAmounts)\n     {\n         nPayAmount += amount;\n "
      },
      {
        "sha": "fdf1953989d791745245dc703324c0fdb0962889",
        "filename": "src/qt/optionsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/18dc3c396299caccb0df31254aaec0d08b70dd2a/src/qt/optionsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/18dc3c396299caccb0df31254aaec0d08b70dd2a/src/qt/optionsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsdialog.cpp?ref=18dc3c396299caccb0df31254aaec0d08b70dd2a",
        "patch": "@@ -84,7 +84,7 @@ OptionsDialog::OptionsDialog(QWidget *parent, bool enableWallet) :\n \n     ui->lang->setToolTip(ui->lang->toolTip().arg(tr(PACKAGE_NAME)));\n     ui->lang->addItem(QString(\"(\") + tr(\"default\") + QString(\")\"), QVariant(\"\"));\n-    Q_FOREACH(const QString &langStr, translations.entryList())\n+    for (const QString &langStr : translations.entryList())\n     {\n         QLocale locale(langStr);\n "
      },
      {
        "sha": "cb771e839d62ac656550ab7d3af2d72069f3e219",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/18dc3c396299caccb0df31254aaec0d08b70dd2a/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/18dc3c396299caccb0df31254aaec0d08b70dd2a/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=18dc3c396299caccb0df31254aaec0d08b70dd2a",
        "patch": "@@ -144,7 +144,7 @@ void PaymentServer::LoadRootCAs(X509_STORE* _store)\n     int nRootCerts = 0;\n     const QDateTime currentTime = QDateTime::currentDateTime();\n \n-    Q_FOREACH (const QSslCertificate& cert, certList) {\n+    for (const QSslCertificate& cert : certList) {\n         // Don't log NULL certificates\n         if (cert.isNull())\n             continue;\n@@ -267,7 +267,7 @@ void PaymentServer::ipcParseCommandLine(int argc, char* argv[])\n bool PaymentServer::ipcSendCommandLine()\n {\n     bool fResult = false;\n-    Q_FOREACH (const QString& r, savedPaymentRequests)\n+    for (const QString& r : savedPaymentRequests)\n     {\n         QLocalSocket* socket = new QLocalSocket();\n         socket->connectToServer(ipcServerName(), QIODevice::WriteOnly);\n@@ -392,7 +392,7 @@ void PaymentServer::uiReady()\n     initNetManager();\n \n     saveURIs = false;\n-    Q_FOREACH (const QString& s, savedPaymentRequests)\n+    for (const QString& s : savedPaymentRequests)\n     {\n         handleURIOrFile(s);\n     }\n@@ -555,7 +555,7 @@ bool PaymentServer::processPaymentRequest(const PaymentRequestPlus& request, Sen\n     QList<std::pair<CScript, CAmount> > sendingTos = request.getPayTo();\n     QStringList addresses;\n \n-    Q_FOREACH(const PAIRTYPE(CScript, CAmount)& sendingTo, sendingTos) {\n+    for (const PAIRTYPE(CScript, CAmount)& sendingTo : sendingTos) {\n         // Extract and check destination addresses\n         CTxDestination dest;\n         if (ExtractDestination(sendingTo.first, dest)) {\n@@ -742,7 +742,7 @@ void PaymentServer::reportSslErrors(QNetworkReply* reply, const QList<QSslError>\n     Q_UNUSED(reply);\n \n     QString errString;\n-    Q_FOREACH (const QSslError& err, errs) {\n+    for (const QSslError& err : errs) {\n         qWarning() << \"PaymentServer::reportSslErrors: \" << err;\n         errString += err.errorString() + \"\\n\";\n     }"
      },
      {
        "sha": "42934f8055d0107342d747bb9df09525b8fb66ec",
        "filename": "src/qt/peertablemodel.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/18dc3c396299caccb0df31254aaec0d08b70dd2a/src/qt/peertablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/18dc3c396299caccb0df31254aaec0d08b70dd2a/src/qt/peertablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/peertablemodel.cpp?ref=18dc3c396299caccb0df31254aaec0d08b70dd2a",
        "patch": "@@ -62,7 +62,7 @@ class PeerTablePriv\n #if QT_VERSION >= 0x040700\n             cachedNodeStats.reserve(vstats.size());\n #endif\n-            Q_FOREACH (const CNodeStats& nodestats, vstats)\n+            for (const CNodeStats& nodestats : vstats)\n             {\n                 CNodeCombinedStats stats;\n                 stats.nodeStateStats.nMisbehavior = 0;\n@@ -91,7 +91,7 @@ class PeerTablePriv\n         // build index map\n         mapNodeRows.clear();\n         int row = 0;\n-        Q_FOREACH (const CNodeCombinedStats& stats, cachedNodeStats)\n+        for (const CNodeCombinedStats& stats : cachedNodeStats)\n             mapNodeRows.insert(std::pair<NodeId, int>(stats.nodeStats.nodeid, row++));\n     }\n "
      },
      {
        "sha": "1f4e1a442f069ee873405b7adcc5ef02c0afdbf1",
        "filename": "src/qt/platformstyle.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/18dc3c396299caccb0df31254aaec0d08b70dd2a/src/qt/platformstyle.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/18dc3c396299caccb0df31254aaec0d08b70dd2a/src/qt/platformstyle.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/platformstyle.cpp?ref=18dc3c396299caccb0df31254aaec0d08b70dd2a",
        "patch": "@@ -48,7 +48,7 @@ void MakeSingleColorImage(QImage& img, const QColor& colorbase)\n QIcon ColorizeIcon(const QIcon& ico, const QColor& colorbase)\n {\n     QIcon new_ico;\n-    Q_FOREACH(const QSize sz, ico.availableSizes())\n+    for (const QSize sz : ico.availableSizes())\n     {\n         QImage img(ico.pixmap(sz).toImage());\n         MakeSingleColorImage(img, colorbase);"
      },
      {
        "sha": "84f43266e125d9936d741acd14f37364ee3a7427",
        "filename": "src/qt/receivecoinsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/18dc3c396299caccb0df31254aaec0d08b70dd2a/src/qt/receivecoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/18dc3c396299caccb0df31254aaec0d08b70dd2a/src/qt/receivecoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/receivecoinsdialog.cpp?ref=18dc3c396299caccb0df31254aaec0d08b70dd2a",
        "patch": "@@ -191,7 +191,7 @@ void ReceiveCoinsDialog::on_showRequestButton_clicked()\n         return;\n     QModelIndexList selection = ui->recentRequestsView->selectionModel()->selectedRows();\n \n-    Q_FOREACH (const QModelIndex& index, selection) {\n+    for (const QModelIndex& index : selection) {\n         on_recentRequestsView_doubleClicked(index);\n     }\n }"
      },
      {
        "sha": "cda33076f8877cb673d116da4cd13c6395065bc1",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/18dc3c396299caccb0df31254aaec0d08b70dd2a/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/18dc3c396299caccb0df31254aaec0d08b70dd2a/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=18dc3c396299caccb0df31254aaec0d08b70dd2a",
        "patch": "@@ -265,7 +265,7 @@ void SendCoinsDialog::on_sendButton_clicked()\n \n     // Format confirmation message\n     QStringList formatted;\n-    Q_FOREACH(const SendCoinsRecipient &rcp, currentTransaction.getRecipients())\n+    for (const SendCoinsRecipient &rcp : currentTransaction.getRecipients())\n     {\n         // generate bold amount string\n         QString amount = \"<b>\" + BitcoinUnits::formatHtmlWithUnit(model->getOptionsModel()->getDisplayUnit(), rcp.amount);\n@@ -319,7 +319,7 @@ void SendCoinsDialog::on_sendButton_clicked()\n     questionString.append(\"<hr />\");\n     CAmount totalAmount = currentTransaction.getTotalTransactionAmount() + txFee;\n     QStringList alternativeUnits;\n-    Q_FOREACH(BitcoinUnits::Unit u, BitcoinUnits::availableUnits())\n+    for (BitcoinUnits::Unit u : BitcoinUnits::availableUnits())\n     {\n         if(u != model->getOptionsModel()->getDisplayUnit())\n             alternativeUnits.append(BitcoinUnits::formatHtmlWithUnit(u, totalAmount));"
      },
      {
        "sha": "10966e42eb1a09b9bca890bbf2d10297f683fc2e",
        "filename": "src/qt/splashscreen.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/18dc3c396299caccb0df31254aaec0d08b70dd2a/src/qt/splashscreen.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/18dc3c396299caccb0df31254aaec0d08b70dd2a/src/qt/splashscreen.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/splashscreen.cpp?ref=18dc3c396299caccb0df31254aaec0d08b70dd2a",
        "patch": "@@ -188,7 +188,7 @@ void SplashScreen::unsubscribeFromCoreSignals()\n     uiInterface.InitMessage.disconnect(boost::bind(InitMessage, this, _1));\n     uiInterface.ShowProgress.disconnect(boost::bind(ShowProgress, this, _1, _2));\n #ifdef ENABLE_WALLET\n-    Q_FOREACH(CWallet* const & pwallet, connectedWallets) {\n+    for (CWallet* const & pwallet : connectedWallets) {\n         pwallet->ShowProgress.disconnect(boost::bind(ShowProgress, this, _1, _2));\n     }\n #endif"
      },
      {
        "sha": "e812c5c388833212d6a38a848a36665393ad6c79",
        "filename": "src/qt/test/paymentservertests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/18dc3c396299caccb0df31254aaec0d08b70dd2a/src/qt/test/paymentservertests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/18dc3c396299caccb0df31254aaec0d08b70dd2a/src/qt/test/paymentservertests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/paymentservertests.cpp?ref=18dc3c396299caccb0df31254aaec0d08b70dd2a",
        "patch": "@@ -196,7 +196,7 @@ void PaymentServerTests::paymentServerTests()\n     QVERIFY(r.paymentRequest.IsInitialized());\n     // Extract address and amount from the request\n     QList<std::pair<CScript, CAmount> > sendingTos = r.paymentRequest.getPayTo();\n-    Q_FOREACH (const PAIRTYPE(CScript, CAmount)& sendingTo, sendingTos) {\n+    for (const PAIRTYPE(CScript, CAmount)& sendingTo : sendingTos) {\n         CTxDestination dest;\n         if (ExtractDestination(sendingTo.first, dest))\n             QCOMPARE(PaymentServer::verifyAmount(sendingTo.second), false);"
      },
      {
        "sha": "afd295c13b52130b41fc04f591ffd2912d359bf5",
        "filename": "src/qt/trafficgraphwidget.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/18dc3c396299caccb0df31254aaec0d08b70dd2a/src/qt/trafficgraphwidget.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/18dc3c396299caccb0df31254aaec0d08b70dd2a/src/qt/trafficgraphwidget.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/trafficgraphwidget.cpp?ref=18dc3c396299caccb0df31254aaec0d08b70dd2a",
        "patch": "@@ -139,10 +139,10 @@ void TrafficGraphWidget::updateRates()\n     }\n \n     float tmax = 0.0f;\n-    Q_FOREACH(float f, vSamplesIn) {\n+    for (float f : vSamplesIn) {\n         if(f > tmax) tmax = f;\n     }\n-    Q_FOREACH(float f, vSamplesOut) {\n+    for (float f : vSamplesOut) {\n         if(f > tmax) tmax = f;\n     }\n     fMax = tmax;"
      },
      {
        "sha": "3b7a0a9479e47ec4b2d1c2113c633c0fdc3cfc7a",
        "filename": "src/qt/transactiondesc.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/18dc3c396299caccb0df31254aaec0d08b70dd2a/src/qt/transactiondesc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/18dc3c396299caccb0df31254aaec0d08b70dd2a/src/qt/transactiondesc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.cpp?ref=18dc3c396299caccb0df31254aaec0d08b70dd2a",
        "patch": "@@ -245,14 +245,14 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n     strHTML += \"<b>\" + tr(\"Output index\") + \":</b> \" + QString::number(rec->getOutputIndex()) + \"<br>\";\n \n     // Message from normal bitcoin:URI (bitcoin:123...?message=example)\n-    Q_FOREACH (const PAIRTYPE(std::string, std::string)& r, wtx.vOrderForm)\n+    for (const PAIRTYPE(std::string, std::string)& r : wtx.vOrderForm)\n         if (r.first == \"Message\")\n             strHTML += \"<br><b>\" + tr(\"Message\") + \":</b><br>\" + GUIUtil::HtmlEscape(r.second, true) + \"<br>\";\n \n     //\n     // PaymentRequest info:\n     //\n-    Q_FOREACH (const PAIRTYPE(std::string, std::string)& r, wtx.vOrderForm)\n+    for (const PAIRTYPE(std::string, std::string)& r : wtx.vOrderForm)\n     {\n         if (r.first == \"PaymentRequest\")\n         {"
      },
      {
        "sha": "7ec84f170c298aaef61d731c652671701198a93c",
        "filename": "src/qt/transactiontablemodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/18dc3c396299caccb0df31254aaec0d08b70dd2a/src/qt/transactiontablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/18dc3c396299caccb0df31254aaec0d08b70dd2a/src/qt/transactiontablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiontablemodel.cpp?ref=18dc3c396299caccb0df31254aaec0d08b70dd2a",
        "patch": "@@ -145,7 +145,7 @@ class TransactionTablePriv\n                 {\n                     parent->beginInsertRows(QModelIndex(), lowerIndex, lowerIndex+toInsert.size()-1);\n                     int insert_idx = lowerIndex;\n-                    Q_FOREACH(const TransactionRecord &rec, toInsert)\n+                    for (const TransactionRecord &rec : toInsert)\n                     {\n                         cachedWallet.insert(insert_idx, rec);\n                         insert_idx += 1;"
      },
      {
        "sha": "c9b344fbd8ab288133ad7d3c2954915141dfd5a9",
        "filename": "src/qt/utilitydialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/18dc3c396299caccb0df31254aaec0d08b70dd2a/src/qt/utilitydialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/18dc3c396299caccb0df31254aaec0d08b70dd2a/src/qt/utilitydialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/utilitydialog.cpp?ref=18dc3c396299caccb0df31254aaec0d08b70dd2a",
        "patch": "@@ -106,7 +106,7 @@ HelpMessageDialog::HelpMessageDialog(QWidget *parent, bool about) :\n         QTextCharFormat bold;\n         bold.setFontWeight(QFont::Bold);\n \n-        Q_FOREACH (const QString &line, coreOptions.split(\"\\n\")) {\n+        for (const QString &line : coreOptions.split(\"\\n\")) {\n             if (line.startsWith(\"  -\"))\n             {\n                 cursor.currentTable()->appendRows(1);"
      },
      {
        "sha": "449eb1ae588af2a213dfabf2f397f2d5e725b989",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/18dc3c396299caccb0df31254aaec0d08b70dd2a/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/18dc3c396299caccb0df31254aaec0d08b70dd2a/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=18dc3c396299caccb0df31254aaec0d08b70dd2a",
        "patch": "@@ -207,7 +207,7 @@ WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransact\n     int nAddresses = 0;\n \n     // Pre-check input data for validity\n-    Q_FOREACH(const SendCoinsRecipient &rcp, recipients)\n+    for (const SendCoinsRecipient &rcp : recipients)\n     {\n         if (rcp.fSubtractFeeFromAmount)\n             fSubtractFeeFromAmount = true;\n@@ -310,7 +310,7 @@ WalletModel::SendCoinsReturn WalletModel::sendCoins(WalletModelTransaction &tran\n         LOCK2(cs_main, wallet->cs_wallet);\n         CWalletTx *newTx = transaction.getTransaction();\n \n-        Q_FOREACH(const SendCoinsRecipient &rcp, transaction.getRecipients())\n+        for (const SendCoinsRecipient &rcp : transaction.getRecipients())\n         {\n             if (rcp.paymentRequest.IsInitialized())\n             {\n@@ -341,7 +341,7 @@ WalletModel::SendCoinsReturn WalletModel::sendCoins(WalletModelTransaction &tran\n \n     // Add addresses / update labels that we've sent to to the address book,\n     // and emit coinsSent signal for each recipient\n-    Q_FOREACH(const SendCoinsRecipient &rcp, transaction.getRecipients())\n+    for (const SendCoinsRecipient &rcp : transaction.getRecipients())\n     {\n         // Don't touch the address book when we have a payment request\n         if (!rcp.paymentRequest.IsInitialized())"
      },
      {
        "sha": "8bc9ef725e4d94e12025a451334f1e3efb6491f3",
        "filename": "src/qt/walletmodeltransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/18dc3c396299caccb0df31254aaec0d08b70dd2a/src/qt/walletmodeltransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/18dc3c396299caccb0df31254aaec0d08b70dd2a/src/qt/walletmodeltransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodeltransaction.cpp?ref=18dc3c396299caccb0df31254aaec0d08b70dd2a",
        "patch": "@@ -82,7 +82,7 @@ void WalletModelTransaction::reassignAmounts(int nChangePosRet)\n CAmount WalletModelTransaction::getTotalTransactionAmount()\n {\n     CAmount totalTransactionAmount = 0;\n-    Q_FOREACH(const SendCoinsRecipient &rcp, recipients)\n+    for (const SendCoinsRecipient &rcp : recipients)\n     {\n         totalTransactionAmount += rcp.amount;\n     }"
      }
    ]
  },
  {
    "sha": "1238f13cf6ccf1177b66df735f360c61ae1dc20b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMjM4ZjEzY2Y2Y2NmMTE3N2I2NmRmNzM1ZjM2MGM2MWFlMWRjMjBi",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-06-02T01:28:42Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-06-05T18:14:53Z"
      },
      "message": "scripted-diff: Remove PAIRTYPE\n\n-BEGIN VERIFY SCRIPT-\nsed -i 's/PAIRTYPE(\\([^,]*\\), \\([^\\)]*\\))/std::pair<\\1, \\2>/' ./src/*.h ./src/*.cpp ./src/*/*.h ./src/*/*.cpp ./src/*/*/*.h ./src/*/*/*.cpp ;\nsed -i ':a;N;$!ba;s/#define std::pair<t1, t2>    std::pair<t1, t2>\\n//' ./src/utilstrencodings.h ;\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "fd29fef9e9760c49b121f8191307544ae711d426",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fd29fef9e9760c49b121f8191307544ae711d426"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1238f13cf6ccf1177b66df735f360c61ae1dc20b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJZNZ+gAAoJEIhmwY6hyUSi5AcP/3UIlqhMyUOc7uls5OExehGB\nTr9o/KgJUlYlK/yKvHxtEymYYgOW2wwOuFQeug+P+zbvkyZ7dcysPSDJLzKriDEb\nyCto0IT+r6KSl9ffb+jA/gm/2mcHLXs6fm3Xjw1vv8yoo4XOr989FaEtvDgFAg0f\ncwfWLGqFTn4awEhVG7H818X9jfJihxfYVZNLK8kEnGPI0Tetajy/luuIarT0gSW+\nzHJR/ZCLGWYO8Fo0akodQjTk1zpeP3gtnEES1RGDtt6QLJBkwLudobcvuymVqLqG\nRBTmeI+GxpA+IB6Ib6YY7SiuskWC/3BE749QTqWAelQKcJbTCAx1jkQv985G4JY2\nI6aZDS1lrazFqf6l15t/KAQr9U9LksKNn8x1GvImwpNYdQyzEJ5SB/rr5YB2COWS\nk9htfiCgnx6xveczxPJE67x/VixVcsr4j1PxN0LrwKSt8H58UhocpAEhKrpFWHhS\nFBJhNOnyIdSNU/g0KiGesnaIJI42wyC3HUn3JNm5ceYh7qPC5MNy7JAsZ2IVQuoh\nNs4aU10oLAXDWbGTUEuaHBFZskjI5l/UlS/B6rjBFT1kwwgHemx3DFX+f7w6vBfu\n86wG46bAhwzmfLs5c7L7wv5dKQPX9K8owmd5MELdKzaUqT+8IWBcSNYvDFYQm8Xw\n1b6jR099KQnSwTDUB7Q3\n=/zPk\n-----END PGP SIGNATURE-----",
        "payload": "tree fd29fef9e9760c49b121f8191307544ae711d426\nparent 18dc3c396299caccb0df31254aaec0d08b70dd2a\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1496366922 +0200\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1496686493 +0200\n\nscripted-diff: Remove PAIRTYPE\n\n-BEGIN VERIFY SCRIPT-\nsed -i 's/PAIRTYPE(\\([^,]*\\), \\([^\\)]*\\))/std::pair<\\1, \\2>/' ./src/*.h ./src/*.cpp ./src/*/*.h ./src/*/*.cpp ./src/*/*/*.h ./src/*/*/*.cpp ;\nsed -i ':a;N;$!ba;s/#define std::pair<t1, t2>    std::pair<t1, t2>\\n//' ./src/utilstrencodings.h ;\n-END VERIFY SCRIPT-\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1238f13cf6ccf1177b66df735f360c61ae1dc20b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1238f13cf6ccf1177b66df735f360c61ae1dc20b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1238f13cf6ccf1177b66df735f360c61ae1dc20b/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "18dc3c396299caccb0df31254aaec0d08b70dd2a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/18dc3c396299caccb0df31254aaec0d08b70dd2a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/18dc3c396299caccb0df31254aaec0d08b70dd2a"
      }
    ],
    "stats": {
      "total": 57,
      "additions": 28,
      "deletions": 29
    },
    "files": [
      {
        "sha": "5f50f70ac5015053354fc3e2707b8a5c55fd80b4",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1238f13cf6ccf1177b66df735f360c61ae1dc20b/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1238f13cf6ccf1177b66df735f360c61ae1dc20b/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=1238f13cf6ccf1177b66df735f360c61ae1dc20b",
        "patch": "@@ -611,7 +611,7 @@ void CleanupBlockRevFiles()\n     // keeping a separate counter.  Once we hit a gap (or if 0 doesn't exist)\n     // start removing block files.\n     int nContigCounter = 0;\n-    for (const PAIRTYPE(std::string, fs::path)& item : mapBlockFiles) {\n+    for (const std::pair<std::string, fs::path>& item : mapBlockFiles) {\n         if (atoi(item.first) == nContigCounter) {\n             nContigCounter++;\n             continue;"
      },
      {
        "sha": "d3ad24da018068f7b93df0e24bf539c840e60b11",
        "filename": "src/qt/addresstablemodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1238f13cf6ccf1177b66df735f360c61ae1dc20b/src/qt/addresstablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1238f13cf6ccf1177b66df735f360c61ae1dc20b/src/qt/addresstablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addresstablemodel.cpp?ref=1238f13cf6ccf1177b66df735f360c61ae1dc20b",
        "patch": "@@ -81,7 +81,7 @@ class AddressTablePriv\n         cachedAddressTable.clear();\n         {\n             LOCK(wallet->cs_wallet);\n-            for (const PAIRTYPE(CTxDestination, CAddressBookData)& item : wallet->mapAddressBook)\n+            for (const std::pair<CTxDestination, CAddressBookData>& item : wallet->mapAddressBook)\n             {\n                 const CBitcoinAddress& address = item.first;\n                 bool fMine = IsMine(*wallet, address.Get());"
      },
      {
        "sha": "6025a74096cf4479dd785cd94d9ef54a94dbf4f2",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1238f13cf6ccf1177b66df735f360c61ae1dc20b/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1238f13cf6ccf1177b66df735f360c61ae1dc20b/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=1238f13cf6ccf1177b66df735f360c61ae1dc20b",
        "patch": "@@ -628,7 +628,7 @@ void CoinControlDialog::updateView()\n     std::map<QString, std::vector<COutput> > mapCoins;\n     model->listCoins(mapCoins);\n \n-    for (const PAIRTYPE(QString, std::vector<COutput>)& coins : mapCoins) {\n+    for (const std::pair<QString, std::vector<COutput>>& coins : mapCoins) {\n         CCoinControlWidgetItem *itemWalletAddress = new CCoinControlWidgetItem();\n         itemWalletAddress->setCheckState(COLUMN_CHECKBOX, Qt::Unchecked);\n         QString sWalletAddress = coins.first;"
      },
      {
        "sha": "132ee32748c0bc37c58eca88598298a414900381",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1238f13cf6ccf1177b66df735f360c61ae1dc20b/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1238f13cf6ccf1177b66df735f360c61ae1dc20b/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=1238f13cf6ccf1177b66df735f360c61ae1dc20b",
        "patch": "@@ -555,7 +555,7 @@ bool PaymentServer::processPaymentRequest(const PaymentRequestPlus& request, Sen\n     QList<std::pair<CScript, CAmount> > sendingTos = request.getPayTo();\n     QStringList addresses;\n \n-    for (const PAIRTYPE(CScript, CAmount)& sendingTo : sendingTos) {\n+    for (const std::pair<CScript, CAmount>& sendingTo : sendingTos) {\n         // Extract and check destination addresses\n         CTxDestination dest;\n         if (ExtractDestination(sendingTo.first, dest)) {"
      },
      {
        "sha": "b9a8ad6e280dc42ddca609ab08806e27eac4ed1a",
        "filename": "src/qt/test/paymentservertests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1238f13cf6ccf1177b66df735f360c61ae1dc20b/src/qt/test/paymentservertests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1238f13cf6ccf1177b66df735f360c61ae1dc20b/src/qt/test/paymentservertests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/paymentservertests.cpp?ref=1238f13cf6ccf1177b66df735f360c61ae1dc20b",
        "patch": "@@ -196,7 +196,7 @@ void PaymentServerTests::paymentServerTests()\n     QVERIFY(r.paymentRequest.IsInitialized());\n     // Extract address and amount from the request\n     QList<std::pair<CScript, CAmount> > sendingTos = r.paymentRequest.getPayTo();\n-    for (const PAIRTYPE(CScript, CAmount)& sendingTo : sendingTos) {\n+    for (const std::pair<CScript, CAmount>& sendingTo : sendingTos) {\n         CTxDestination dest;\n         if (ExtractDestination(sendingTo.first, dest))\n             QCOMPARE(PaymentServer::verifyAmount(sendingTo.second), false);"
      },
      {
        "sha": "bcacc47ef3e54d36809821ecf6598494ca898688",
        "filename": "src/qt/transactiondesc.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1238f13cf6ccf1177b66df735f360c61ae1dc20b/src/qt/transactiondesc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1238f13cf6ccf1177b66df735f360c61ae1dc20b/src/qt/transactiondesc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.cpp?ref=1238f13cf6ccf1177b66df735f360c61ae1dc20b",
        "patch": "@@ -245,14 +245,14 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n     strHTML += \"<b>\" + tr(\"Output index\") + \":</b> \" + QString::number(rec->getOutputIndex()) + \"<br>\";\n \n     // Message from normal bitcoin:URI (bitcoin:123...?message=example)\n-    for (const PAIRTYPE(std::string, std::string)& r : wtx.vOrderForm)\n+    for (const std::pair<std::string, std::string>& r : wtx.vOrderForm)\n         if (r.first == \"Message\")\n             strHTML += \"<br><b>\" + tr(\"Message\") + \":</b><br>\" + GUIUtil::HtmlEscape(r.second, true) + \"<br>\";\n \n     //\n     // PaymentRequest info:\n     //\n-    for (const PAIRTYPE(std::string, std::string)& r : wtx.vOrderForm)\n+    for (const std::pair<std::string, std::string>& r : wtx.vOrderForm)\n     {\n         if (r.first == \"PaymentRequest\")\n         {"
      },
      {
        "sha": "874311ec5a12c936ee6c5fc601df4c0aa3268d0a",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1238f13cf6ccf1177b66df735f360c61ae1dc20b/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1238f13cf6ccf1177b66df735f360c61ae1dc20b/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=1238f13cf6ccf1177b66df735f360c61ae1dc20b",
        "patch": "@@ -1256,7 +1256,7 @@ UniValue getchaintips(const JSONRPCRequest& request)\n     std::set<const CBlockIndex*> setOrphans;\n     std::set<const CBlockIndex*> setPrevs;\n \n-    for (const PAIRTYPE(const uint256, CBlockIndex*)& item : mapBlockIndex)\n+    for (const std::pair<const uint256, CBlockIndex*>& item : mapBlockIndex)\n     {\n         if (!chainActive.Contains(item.second)) {\n             setOrphans.insert(item.second);"
      },
      {
        "sha": "d6f9f0059c40303dd1e8dd5b7e35e132214c01ca",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1238f13cf6ccf1177b66df735f360c61ae1dc20b/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1238f13cf6ccf1177b66df735f360c61ae1dc20b/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=1238f13cf6ccf1177b66df735f360c61ae1dc20b",
        "patch": "@@ -474,7 +474,7 @@ UniValue getnetworkinfo(const JSONRPCRequest& request)\n     UniValue localAddresses(UniValue::VARR);\n     {\n         LOCK(cs_mapLocalHost);\n-        for (const PAIRTYPE(CNetAddr, LocalServiceInfo) &item : mapLocalHost)\n+        for (const std::pair<CNetAddr, LocalServiceInfo> &item : mapLocalHost)\n         {\n             UniValue rec(UniValue::VOBJ);\n             rec.push_back(Pair(\"address\", item.first.ToString()));"
      },
      {
        "sha": "a6d7d1a86f5034ec1620cc74a374c204852b6355",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1238f13cf6ccf1177b66df735f360c61ae1dc20b/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1238f13cf6ccf1177b66df735f360c61ae1dc20b/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=1238f13cf6ccf1177b66df735f360c61ae1dc20b",
        "patch": "@@ -186,7 +186,7 @@ std::string CRPCTable::help(const std::string& strCommand, const JSONRPCRequest&\n     jreq.fHelp = true;\n     jreq.params = UniValue();\n \n-    for (const PAIRTYPE(std::string, const CRPCCommand*)& command : vCommands)\n+    for (const std::pair<std::string, const CRPCCommand*>& command : vCommands)\n     {\n         const CRPCCommand *pcmd = command.second;\n         std::string strMethod = pcmd->name;"
      },
      {
        "sha": "7efcad7b0fac09c02939081d6b57e2c4e9bff0db",
        "filename": "src/script/standard.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1238f13cf6ccf1177b66df735f360c61ae1dc20b/src/script/standard.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1238f13cf6ccf1177b66df735f360c61ae1dc20b/src/script/standard.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.cpp?ref=1238f13cf6ccf1177b66df735f360c61ae1dc20b",
        "patch": "@@ -94,7 +94,7 @@ bool Solver(const CScript& scriptPubKey, txnouttype& typeRet, std::vector<std::v\n \n     // Scan templates\n     const CScript& script1 = scriptPubKey;\n-    for (const PAIRTYPE(txnouttype, CScript)& tplate : mTemplates)\n+    for (const std::pair<txnouttype, CScript>& tplate : mTemplates)\n     {\n         const CScript& script2 = tplate.second;\n         vSolutionsRet.clear();"
      },
      {
        "sha": "94f2cafa98636c20f4e2a820253c64ba22dc0ae5",
        "filename": "src/sync.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1238f13cf6ccf1177b66df735f360c61ae1dc20b/src/sync.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1238f13cf6ccf1177b66df735f360c61ae1dc20b/src/sync.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.cpp?ref=1238f13cf6ccf1177b66df735f360c61ae1dc20b",
        "patch": "@@ -77,7 +77,7 @@ static void potential_deadlock_detected(const std::pair<void*, void*>& mismatch,\n {\n     LogPrintf(\"POTENTIAL DEADLOCK DETECTED\\n\");\n     LogPrintf(\"Previous lock order was:\\n\");\n-    for (const PAIRTYPE(void*, CLockLocation) & i : s2) {\n+    for (const std::pair<void*, CLockLocation> & i : s2) {\n         if (i.first == mismatch.first) {\n             LogPrintf(\" (1)\");\n         }\n@@ -87,7 +87,7 @@ static void potential_deadlock_detected(const std::pair<void*, void*>& mismatch,\n         LogPrintf(\" %s\\n\", i.second.ToString());\n     }\n     LogPrintf(\"Current lock order is:\\n\");\n-    for (const PAIRTYPE(void*, CLockLocation) & i : s1) {\n+    for (const std::pair<void*, CLockLocation> & i : s1) {\n         if (i.first == mismatch.first) {\n             LogPrintf(\" (1)\");\n         }\n@@ -108,7 +108,7 @@ static void push_lock(void* c, const CLockLocation& locklocation, bool fTry)\n \n     (*lockstack).push_back(std::make_pair(c, locklocation));\n \n-    for (const PAIRTYPE(void*, CLockLocation) & i : (*lockstack)) {\n+    for (const std::pair<void*, CLockLocation> & i : (*lockstack)) {\n         if (i.first == c)\n             break;\n \n@@ -142,14 +142,14 @@ void LeaveCritical()\n std::string LocksHeld()\n {\n     std::string result;\n-    for (const PAIRTYPE(void*, CLockLocation) & i : *lockstack)\n+    for (const std::pair<void*, CLockLocation> & i : *lockstack)\n         result += i.second.ToString() + std::string(\"\\n\");\n     return result;\n }\n \n void AssertLockHeldInternal(const char* pszName, const char* pszFile, int nLine, void* cs)\n {\n-    for (const PAIRTYPE(void*, CLockLocation) & i : *lockstack)\n+    for (const std::pair<void*, CLockLocation> & i : *lockstack)\n         if (i.first == cs)\n             return;\n     fprintf(stderr, \"Assertion failed: lock %s not held in %s:%i; locks held:\\n%s\", pszName, pszFile, nLine, LocksHeld().c_str());"
      },
      {
        "sha": "8b37fe12e08893924f31fe8b4faf65e6854b5223",
        "filename": "src/utilstrencodings.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1238f13cf6ccf1177b66df735f360c61ae1dc20b/src/utilstrencodings.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1238f13cf6ccf1177b66df735f360c61ae1dc20b/src/utilstrencodings.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utilstrencodings.h?ref=1238f13cf6ccf1177b66df735f360c61ae1dc20b",
        "patch": "@@ -18,7 +18,6 @@\n #define UBEGIN(a)           ((unsigned char*)&(a))\n #define UEND(a)             ((unsigned char*)&((&(a))[1]))\n #define ARRAYLEN(array)     (sizeof(array)/sizeof((array)[0]))\n-#define PAIRTYPE(t1, t2)    std::pair<t1, t2>\n \n /** Used by SanitizeString() */\n enum SafeChars"
      },
      {
        "sha": "d07c1437ea4a86244e0780edaec520d1512a46e2",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1238f13cf6ccf1177b66df735f360c61ae1dc20b/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1238f13cf6ccf1177b66df735f360c61ae1dc20b/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=1238f13cf6ccf1177b66df735f360c61ae1dc20b",
        "patch": "@@ -3300,13 +3300,13 @@ bool static LoadBlockIndexDB(const CChainParams& chainparams)\n     // Calculate nChainWork\n     std::vector<std::pair<int, CBlockIndex*> > vSortedByHeight;\n     vSortedByHeight.reserve(mapBlockIndex.size());\n-    for (const PAIRTYPE(uint256, CBlockIndex*)& item : mapBlockIndex)\n+    for (const std::pair<uint256, CBlockIndex*>& item : mapBlockIndex)\n     {\n         CBlockIndex* pindex = item.second;\n         vSortedByHeight.push_back(std::make_pair(pindex->nHeight, pindex));\n     }\n     sort(vSortedByHeight.begin(), vSortedByHeight.end());\n-    for (const PAIRTYPE(int, CBlockIndex*)& item : vSortedByHeight)\n+    for (const std::pair<int, CBlockIndex*>& item : vSortedByHeight)\n     {\n         CBlockIndex* pindex = item.second;\n         pindex->nChainWork = (pindex->pprev ? pindex->pprev->nChainWork : 0) + GetBlockProof(*pindex);\n@@ -3355,7 +3355,7 @@ bool static LoadBlockIndexDB(const CChainParams& chainparams)\n     // Check presence of blk files\n     LogPrintf(\"Checking all blk files are present...\\n\");\n     std::set<int> setBlkDataFiles;\n-    for (const PAIRTYPE(uint256, CBlockIndex*)& item : mapBlockIndex)\n+    for (const std::pair<uint256, CBlockIndex*>& item : mapBlockIndex)\n     {\n         CBlockIndex* pindex = item.second;\n         if (pindex->nStatus & BLOCK_HAVE_DATA) {"
      },
      {
        "sha": "f03137216b7b05496b59fb9026d1b1bf76fd41af",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1238f13cf6ccf1177b66df735f360c61ae1dc20b/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1238f13cf6ccf1177b66df735f360c61ae1dc20b/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=1238f13cf6ccf1177b66df735f360c61ae1dc20b",
        "patch": "@@ -96,7 +96,7 @@ void WalletTxToJSON(const CWalletTx& wtx, UniValue& entry)\n     }\n     entry.push_back(Pair(\"bip125-replaceable\", rbfStatus));\n \n-    for (const PAIRTYPE(std::string, std::string)& item : wtx.mapValue)\n+    for (const std::pair<std::string, std::string>& item : wtx.mapValue)\n         entry.push_back(Pair(item.first, item.second));\n }\n \n@@ -1673,7 +1673,7 @@ UniValue listaccounts(const JSONRPCRequest& request)\n         mapAccountBalances[entry.strAccount] += entry.nCreditDebit;\n \n     UniValue ret(UniValue::VOBJ);\n-    for (const PAIRTYPE(std::string, CAmount)& accountBalance : mapAccountBalances) {\n+    for (const std::pair<std::string, CAmount>& accountBalance : mapAccountBalances) {\n         ret.push_back(Pair(accountBalance.first, ValueFromAmount(accountBalance.second)));\n     }\n     return ret;"
      },
      {
        "sha": "e6e14c6c778980ae6c21a730a15997f8d102104d",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1238f13cf6ccf1177b66df735f360c61ae1dc20b/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1238f13cf6ccf1177b66df735f360c61ae1dc20b/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=1238f13cf6ccf1177b66df735f360c61ae1dc20b",
        "patch": "@@ -804,7 +804,7 @@ void CWallet::MarkDirty()\n {\n     {\n         LOCK(cs_wallet);\n-        for (PAIRTYPE(const uint256, CWalletTx)& item : mapWallet)\n+        for (std::pair<const uint256, CWalletTx>& item : mapWallet)\n             item.second.MarkDirty();\n     }\n }\n@@ -1525,7 +1525,7 @@ void CWallet::ReacceptWalletTransactions()\n     std::map<int64_t, CWalletTx*> mapSorted;\n \n     // Sort pending wallet transactions based on their initial wallet insertion order\n-    for (PAIRTYPE(const uint256, CWalletTx)& item : mapWallet)\n+    for (std::pair<const uint256, CWalletTx>& item : mapWallet)\n     {\n         const uint256& wtxid = item.first;\n         CWalletTx& wtx = item.second;\n@@ -1539,7 +1539,7 @@ void CWallet::ReacceptWalletTransactions()\n     }\n \n     // Try to add wallet transactions to memory pool\n-    for (PAIRTYPE(const int64_t, CWalletTx*)& item : mapSorted)\n+    for (std::pair<const int64_t, CWalletTx*>& item : mapSorted)\n     {\n         CWalletTx& wtx = *(item.second);\n \n@@ -1796,15 +1796,15 @@ std::vector<uint256> CWallet::ResendWalletTransactionsBefore(int64_t nTime, CCon\n     LOCK(cs_wallet);\n     // Sort them in chronological order\n     std::multimap<unsigned int, CWalletTx*> mapSorted;\n-    for (PAIRTYPE(const uint256, CWalletTx)& item : mapWallet)\n+    for (std::pair<const uint256, CWalletTx>& item : mapWallet)\n     {\n         CWalletTx& wtx = item.second;\n         // Don't rebroadcast if newer than nTime:\n         if (wtx.nTimeReceived > nTime)\n             continue;\n         mapSorted.insert(std::make_pair(wtx.nTimeReceived, &wtx));\n     }\n-    for (PAIRTYPE(const unsigned int, CWalletTx*)& item : mapSorted)\n+    for (std::pair<const unsigned int, CWalletTx*>& item : mapSorted)\n     {\n         CWalletTx& wtx = *item.second;\n         if (wtx.RelayWalletTransaction(connman))\n@@ -3010,7 +3010,7 @@ bool CWallet::DelAddressBook(const CTxDestination& address)\n \n         // Delete destdata tuples associated with address\n         std::string strAddress = CBitcoinAddress(address).ToString();\n-        for (const PAIRTYPE(std::string, std::string) &item : mapAddressBook[address].destdata)\n+        for (const std::pair<std::string, std::string> &item : mapAddressBook[address].destdata)\n         {\n             CWalletDB(*dbw).EraseDestData(strAddress, item.first);\n         }\n@@ -3388,7 +3388,7 @@ std::set<CTxDestination> CWallet::GetAccountAddresses(const std::string& strAcco\n {\n     LOCK(cs_wallet);\n     std::set<CTxDestination> result;\n-    for (const PAIRTYPE(CTxDestination, CAddressBookData)& item : mapAddressBook)\n+    for (const std::pair<CTxDestination, CAddressBookData>& item : mapAddressBook)\n     {\n         const CTxDestination& address = item.first;\n         const std::string& strName = item.second.name;"
      }
    ]
  }
]