[
  {
    "sha": "db6d79ddee68de478ddb30fec28e38afffe44de8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYjZkNzlkZGVlNjhkZTQ3OGRkYjMwZmVjMjhlMzhhZmZmZTQ0ZGU4",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-11-18T14:54:39Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-13T19:09:31Z"
      },
      "message": "[gui] send dialog: split on_sendButton_clicked\n\nThis commit does not change behavior.",
      "tree": {
        "sha": "d5b741afafb2c9427ae7916879c9ee3bf2238074",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d5b741afafb2c9427ae7916879c9ee3bf2238074"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/db6d79ddee68de478ddb30fec28e38afffe44de8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db6d79ddee68de478ddb30fec28e38afffe44de8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/db6d79ddee68de478ddb30fec28e38afffe44de8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db6d79ddee68de478ddb30fec28e38afffe44de8/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6ef45bc9688412da9e13218e08f802125bf589c0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ef45bc9688412da9e13218e08f802125bf589c0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6ef45bc9688412da9e13218e08f802125bf589c0"
      }
    ],
    "stats": {
      "total": 96,
      "additions": 52,
      "deletions": 44
    },
    "files": [
      {
        "sha": "75c300584f957017880d91873b5cf62f8aa039ed",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 49,
        "deletions": 44,
        "changes": 93,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db6d79ddee68de478ddb30fec28e38afffe44de8/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db6d79ddee68de478ddb30fec28e38afffe44de8/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=db6d79ddee68de478ddb30fec28e38afffe44de8",
        "patch": "@@ -219,11 +219,8 @@ SendCoinsDialog::~SendCoinsDialog()\n     delete ui;\n }\n \n-void SendCoinsDialog::on_sendButton_clicked()\n+bool SendCoinsDialog::PrepareSendText(QString& question_string, QString& informative_text, QString& detailed_text)\n {\n-    if(!model || !model->getOptionsModel())\n-        return;\n-\n     QList<SendCoinsRecipient> recipients;\n     bool valid = true;\n \n@@ -246,7 +243,7 @@ void SendCoinsDialog::on_sendButton_clicked()\n \n     if(!valid || recipients.isEmpty())\n     {\n-        return;\n+        return false;\n     }\n \n     fNewRecipientAllowed = false;\n@@ -255,11 +252,11 @@ void SendCoinsDialog::on_sendButton_clicked()\n     {\n         // Unlock wallet was cancelled\n         fNewRecipientAllowed = true;\n-        return;\n+        return false;\n     }\n \n     // prepare transaction for getting txFee earlier\n-    WalletModelTransaction currentTransaction(recipients);\n+    m_current_transaction = MakeUnique<WalletModelTransaction>(recipients);\n     WalletModel::SendCoinsReturn prepareStatus;\n \n     // Always use a CCoinControl instance, use the CoinControlDialog instance if CoinControl has been enabled\n@@ -269,22 +266,20 @@ void SendCoinsDialog::on_sendButton_clicked()\n \n     updateCoinControlState(ctrl);\n \n-    prepareStatus = model->prepareTransaction(currentTransaction, ctrl);\n+    prepareStatus = model->prepareTransaction(*m_current_transaction, ctrl);\n \n     // process prepareStatus and on error generate message shown to user\n     processSendCoinsReturn(prepareStatus,\n-        BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(), currentTransaction.getTransactionFee()));\n+        BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(), m_current_transaction->getTransactionFee()));\n \n     if(prepareStatus.status != WalletModel::OK) {\n         fNewRecipientAllowed = true;\n-        return;\n+        return false;\n     }\n \n-    CAmount txFee = currentTransaction.getTransactionFee();\n-\n-    // Format confirmation message\n+    CAmount txFee = m_current_transaction->getTransactionFee();\n     QStringList formatted;\n-    for (const SendCoinsRecipient &rcp : currentTransaction.getRecipients())\n+    for (const SendCoinsRecipient &rcp : m_current_transaction->getRecipients())\n     {\n         // generate amount string with wallet name in case of multiwallet\n         QString amount = BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(), rcp.amount);\n@@ -311,72 +306,82 @@ void SendCoinsDialog::on_sendButton_clicked()\n         formatted.append(recipientElement);\n     }\n \n-    QString questionString;\n     if (model->wallet().privateKeysDisabled()) {\n-        questionString.append(tr(\"Do you want to draft this transaction?\"));\n+        question_string.append(tr(\"Do you want to draft this transaction?\"));\n     } else {\n-        questionString.append(tr(\"Are you sure you want to send?\"));\n+        question_string.append(tr(\"Are you sure you want to send?\"));\n     }\n \n-    questionString.append(\"<br /><span style='font-size:10pt;'>\");\n+    question_string.append(\"<br /><span style='font-size:10pt;'>\");\n     if (model->wallet().privateKeysDisabled()) {\n-        questionString.append(tr(\"Please, review your transaction proposal. This will produce a Partially Signed Bitcoin Transaction (PSBT) which you can copy and then sign with e.g. an offline %1 wallet, or a PSBT-compatible hardware wallet.\").arg(PACKAGE_NAME));\n+        question_string.append(tr(\"Please, review your transaction proposal. This will produce a Partially Signed Bitcoin Transaction (PSBT) which you can copy and then sign with e.g. an offline %1 wallet, or a PSBT-compatible hardware wallet.\").arg(PACKAGE_NAME));\n     } else {\n-        questionString.append(tr(\"Please, review your transaction.\"));\n+        question_string.append(tr(\"Please, review your transaction.\"));\n     }\n-    questionString.append(\"</span>%1\");\n+    question_string.append(\"</span>%1\");\n \n     if(txFee > 0)\n     {\n         // append fee string if a fee is required\n-        questionString.append(\"<hr /><b>\");\n-        questionString.append(tr(\"Transaction fee\"));\n-        questionString.append(\"</b>\");\n+        question_string.append(\"<hr /><b>\");\n+        question_string.append(tr(\"Transaction fee\"));\n+        question_string.append(\"</b>\");\n \n         // append transaction size\n-        questionString.append(\" (\" + QString::number((double)currentTransaction.getTransactionSize() / 1000) + \" kB): \");\n+        question_string.append(\" (\" + QString::number((double)m_current_transaction->getTransactionSize() / 1000) + \" kB): \");\n \n         // append transaction fee value\n-        questionString.append(\"<span style='color:#aa0000; font-weight:bold;'>\");\n-        questionString.append(BitcoinUnits::formatHtmlWithUnit(model->getOptionsModel()->getDisplayUnit(), txFee));\n-        questionString.append(\"</span><br />\");\n+        question_string.append(\"<span style='color:#aa0000; font-weight:bold;'>\");\n+        question_string.append(BitcoinUnits::formatHtmlWithUnit(model->getOptionsModel()->getDisplayUnit(), txFee));\n+        question_string.append(\"</span><br />\");\n \n         // append RBF message according to transaction's signalling\n-        questionString.append(\"<span style='font-size:10pt; font-weight:normal;'>\");\n+        question_string.append(\"<span style='font-size:10pt; font-weight:normal;'>\");\n         if (ui->optInRBF->isChecked()) {\n-            questionString.append(tr(\"You can increase the fee later (signals Replace-By-Fee, BIP-125).\"));\n+            question_string.append(tr(\"You can increase the fee later (signals Replace-By-Fee, BIP-125).\"));\n         } else {\n-            questionString.append(tr(\"Not signalling Replace-By-Fee, BIP-125.\"));\n+            question_string.append(tr(\"Not signalling Replace-By-Fee, BIP-125.\"));\n         }\n-        questionString.append(\"</span>\");\n+        question_string.append(\"</span>\");\n     }\n \n     // add total amount in all subdivision units\n-    questionString.append(\"<hr />\");\n-    CAmount totalAmount = currentTransaction.getTotalTransactionAmount() + txFee;\n+    question_string.append(\"<hr />\");\n+    CAmount totalAmount = m_current_transaction->getTotalTransactionAmount() + txFee;\n     QStringList alternativeUnits;\n     for (const BitcoinUnits::Unit u : BitcoinUnits::availableUnits())\n     {\n         if(u != model->getOptionsModel()->getDisplayUnit())\n             alternativeUnits.append(BitcoinUnits::formatHtmlWithUnit(u, totalAmount));\n     }\n-    questionString.append(QString(\"<b>%1</b>: <b>%2</b>\").arg(tr(\"Total Amount\"))\n+    question_string.append(QString(\"<b>%1</b>: <b>%2</b>\").arg(tr(\"Total Amount\"))\n         .arg(BitcoinUnits::formatHtmlWithUnit(model->getOptionsModel()->getDisplayUnit(), totalAmount)));\n-    questionString.append(QString(\"<br /><span style='font-size:10pt; font-weight:normal;'>(=%1)</span>\")\n+    question_string.append(QString(\"<br /><span style='font-size:10pt; font-weight:normal;'>(=%1)</span>\")\n         .arg(alternativeUnits.join(\" \" + tr(\"or\") + \" \")));\n \n-    QString informative_text;\n-    QString detailed_text;\n     if (formatted.size() > 1) {\n-        questionString = questionString.arg(\"\");\n+        question_string = question_string.arg(\"\");\n         informative_text = tr(\"To review recipient list click \\\"Show Details...\\\"\");\n         detailed_text = formatted.join(\"\\n\\n\");\n     } else {\n-        questionString = questionString.arg(\"<br /><br />\" + formatted.at(0));\n+        question_string = question_string.arg(\"<br /><br />\" + formatted.at(0));\n     }\n+\n+    return true;\n+}\n+\n+void SendCoinsDialog::on_sendButton_clicked()\n+{\n+    if(!model || !model->getOptionsModel())\n+        return;\n+\n+    QString question_string, informative_text, detailed_text;\n+    if (!PrepareSendText(question_string, informative_text, detailed_text)) return;\n+    assert(m_current_transaction);\n+\n     const QString confirmation = model->wallet().privateKeysDisabled() ? tr(\"Confirm transaction proposal\") : tr(\"Confirm send coins\");\n     const QString confirmButtonText = model->wallet().privateKeysDisabled() ? tr(\"Copy PSBT to clipboard\") : tr(\"Send\");\n-    SendConfirmationDialog confirmationDialog(confirmation, questionString, informative_text, detailed_text, SEND_CONFIRM_DELAY, confirmButtonText, this);\n+    SendConfirmationDialog confirmationDialog(confirmation, question_string, informative_text, detailed_text, SEND_CONFIRM_DELAY, confirmButtonText, this);\n     confirmationDialog.exec();\n     QMessageBox::StandardButton retval = static_cast<QMessageBox::StandardButton>(confirmationDialog.result());\n \n@@ -388,7 +393,7 @@ void SendCoinsDialog::on_sendButton_clicked()\n \n     bool send_failure = false;\n     if (model->wallet().privateKeysDisabled()) {\n-        CMutableTransaction mtx = CMutableTransaction{*(currentTransaction.getWtx())};\n+        CMutableTransaction mtx = CMutableTransaction{*(m_current_transaction->getWtx())};\n         PartiallySignedTransaction psbtx(mtx);\n         bool complete = false;\n         const TransactionError err = model->wallet().fillPSBT(SIGHASH_ALL, false /* sign */, true /* bip32derivs */, psbtx, complete);\n@@ -401,12 +406,12 @@ void SendCoinsDialog::on_sendButton_clicked()\n         Q_EMIT message(tr(\"PSBT copied\"), \"Copied to clipboard\", CClientUIInterface::MSG_INFORMATION);\n     } else {\n         // now send the prepared transaction\n-        WalletModel::SendCoinsReturn sendStatus = model->sendCoins(currentTransaction);\n+        WalletModel::SendCoinsReturn sendStatus = model->sendCoins(*m_current_transaction);\n         // process sendStatus and on error generate message shown to user\n         processSendCoinsReturn(sendStatus);\n \n         if (sendStatus.status == WalletModel::OK) {\n-            Q_EMIT coinsSent(currentTransaction.getWtx()->GetHash());\n+            Q_EMIT coinsSent(m_current_transaction->getWtx()->GetHash());\n         } else {\n             send_failure = true;\n         }"
      },
      {
        "sha": "36bc2a846bb4a7c5857a04c9a7839ef18e7f4a74",
        "filename": "src/qt/sendcoinsdialog.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db6d79ddee68de478ddb30fec28e38afffe44de8/src/qt/sendcoinsdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db6d79ddee68de478ddb30fec28e38afffe44de8/src/qt/sendcoinsdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.h?ref=db6d79ddee68de478ddb30fec28e38afffe44de8",
        "patch": "@@ -60,6 +60,7 @@ public Q_SLOTS:\n     Ui::SendCoinsDialog *ui;\n     ClientModel *clientModel;\n     WalletModel *model;\n+    std::unique_ptr<WalletModelTransaction> m_current_transaction;\n     bool fNewRecipientAllowed;\n     bool fFeeMinimized;\n     const PlatformStyle *platformStyle;\n@@ -69,6 +70,8 @@ public Q_SLOTS:\n     // Additional parameter msgArg can be used via .arg(msgArg).\n     void processSendCoinsReturn(const WalletModel::SendCoinsReturn &sendCoinsReturn, const QString &msgArg = QString());\n     void minimizeFeeSection(bool fMinimize);\n+    // Format confirmation message\n+    bool PrepareSendText(QString& question_string, QString& informative_text, QString& detailed_text);\n     void updateFeeMinimizedLabel();\n     // Update the passed in CCoinControl with state from the GUI\n     void updateCoinControlState(CCoinControl& ctrl);"
      }
    ]
  },
  {
    "sha": "681180bf45fc44d655045f9cef065be1c6a0097e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ODExODBiZjQ1ZmM0NGQ2NTUwNDVmOWNlZjA2NWJlMWM2YTAwOTdl",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2020-03-20T10:41:11Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-13T19:09:31Z"
      },
      "message": "[util] GetFileSize",
      "tree": {
        "sha": "9515bfa015bb3aa713b089790de4b01b5f539df7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9515bfa015bb3aa713b089790de4b01b5f539df7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/681180bf45fc44d655045f9cef065be1c6a0097e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/681180bf45fc44d655045f9cef065be1c6a0097e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/681180bf45fc44d655045f9cef065be1c6a0097e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/681180bf45fc44d655045f9cef065be1c6a0097e/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "db6d79ddee68de478ddb30fec28e38afffe44de8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db6d79ddee68de478ddb30fec28e38afffe44de8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/db6d79ddee68de478ddb30fec28e38afffe44de8"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 14,
      "deletions": 0
    },
    "files": [
      {
        "sha": "5921378a76f13439fbf76d46b4d6074de63df163",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/681180bf45fc44d655045f9cef065be1c6a0097e/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/681180bf45fc44d655045f9cef065be1c6a0097e/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=681180bf45fc44d655045f9cef065be1c6a0097e",
        "patch": "@@ -141,6 +141,12 @@ bool CheckDiskSpace(const fs::path& dir, uint64_t additional_bytes)\n     return free_bytes_available >= min_disk_space + additional_bytes;\n }\n \n+std::streampos GetFileSize(const char* path, std::streamsize max) {\n+    std::ifstream file(path, std::ios::binary);\n+    file.ignore(max);\n+    return file.gcount();\n+}\n+\n /**\n  * Interpret a string argument as a boolean.\n  *"
      },
      {
        "sha": "61fd611aca56545cb9a0331d2056b41ea4ed347a",
        "filename": "src/util/system.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/681180bf45fc44d655045f9cef065be1c6a0097e/src/util/system.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/681180bf45fc44d655045f9cef065be1c6a0097e/src/util/system.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.h?ref=681180bf45fc44d655045f9cef065be1c6a0097e",
        "patch": "@@ -63,6 +63,14 @@ void UnlockDirectory(const fs::path& directory, const std::string& lockfile_name\n bool DirIsWritable(const fs::path& directory);\n bool CheckDiskSpace(const fs::path& dir, uint64_t additional_bytes = 0);\n \n+/** Get the size of a file by scanning it.\n+ *\n+ * @param[in] path The file path\n+ * @param[in] max Stop seeking beyond this limit\n+ * @return The file size or max\n+ */\n+std::streampos GetFileSize(const char* path, std::streamsize max = std::numeric_limits<std::streamsize>::max());\n+\n /** Release all directory locks. This is used for unit testing only, at runtime\n  * the global destructor will take care of the locks.\n  */"
      }
    ]
  },
  {
    "sha": "338fc488025d5e499509ada8fb3fd47a22f17742",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMzhmYzQ4ODAyNWQ1ZTQ5OTUwOWFkYThmYjNmZDQ3YTIyZjE3NzQy",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2020-03-26T10:20:15Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-13T19:09:31Z"
      },
      "message": "Move DEFAULT_MAX_RAW_TX_FEE_RATE to node/transaction.h\n\nSo it can be used in the GUI.",
      "tree": {
        "sha": "d59af3c20ec71c23433243720e32552deedba075",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d59af3c20ec71c23433243720e32552deedba075"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/338fc488025d5e499509ada8fb3fd47a22f17742",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/338fc488025d5e499509ada8fb3fd47a22f17742",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/338fc488025d5e499509ada8fb3fd47a22f17742",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/338fc488025d5e499509ada8fb3fd47a22f17742/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "681180bf45fc44d655045f9cef065be1c6a0097e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/681180bf45fc44d655045f9cef065be1c6a0097e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/681180bf45fc44d655045f9cef065be1c6a0097e"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 8,
      "deletions": 6
    },
    "files": [
      {
        "sha": "649625ded1b5666959a4d06b56071cac0d4ba6d3",
        "filename": "src/node/transaction.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/338fc488025d5e499509ada8fb3fd47a22f17742/src/node/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/338fc488025d5e499509ada8fb3fd47a22f17742/src/node/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/transaction.h?ref=338fc488025d5e499509ada8fb3fd47a22f17742",
        "patch": "@@ -6,11 +6,19 @@\n #define BITCOIN_NODE_TRANSACTION_H\n \n #include <attributes.h>\n+#include <policy/feerate.h>\n #include <primitives/transaction.h>\n #include <util/error.h>\n \n struct NodeContext;\n \n+/** Maximum fee rate for sendrawtransaction and testmempoolaccept RPC calls.\n+ * Also used by the GUI when broadcasting a completed PSBT.\n+ * By default, a transaction with a fee rate higher than this will be rejected\n+ * by these RPCs and the GUI. This can be overridden with the maxfeerate argument.\n+ */\n+static const CFeeRate DEFAULT_MAX_RAW_TX_FEE_RATE{COIN / 10};\n+\n /**\n  * Submit a transaction to the mempool and (optionally) relay it to all P2P peers.\n  *"
      },
      {
        "sha": "a453505ab52045f3e36767fb2b62651ce6fc530f",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/338fc488025d5e499509ada8fb3fd47a22f17742/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/338fc488025d5e499509ada8fb3fd47a22f17742/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=338fc488025d5e499509ada8fb3fd47a22f17742",
        "patch": "@@ -40,12 +40,6 @@\n \n #include <univalue.h>\n \n-/** Maximum fee rate for sendrawtransaction and testmempoolaccept.\n- * By default, a transaction with a fee rate higher than this will be rejected\n- * by the RPCs. This can be overridden with the maxfeerate argument.\n- */\n-static const CFeeRate DEFAULT_MAX_RAW_TX_FEE_RATE{COIN / 10};\n-\n static void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue& entry)\n {\n     // Call into TxToUniv() in bitcoin-common to decode the transaction hex."
      }
    ]
  },
  {
    "sha": "ca5f205a9893945220ca249c2fc00dfb528b4cfa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYTVmMjA1YTk4OTM5NDUyMjBjYTI0OWMyZmMwMGRmYjUyOGI0Y2Zh",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-11-18T15:43:57Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-13T19:09:31Z"
      },
      "message": "[gui] save PSBT to file\n\nco-authored-by: Glenn Willen <gwillen@nerdnet.org>",
      "tree": {
        "sha": "10fcefff85d26e6b28ac7497fe1ead87874d0563",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/10fcefff85d26e6b28ac7497fe1ead87874d0563"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ca5f205a9893945220ca249c2fc00dfb528b4cfa",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca5f205a9893945220ca249c2fc00dfb528b4cfa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ca5f205a9893945220ca249c2fc00dfb528b4cfa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca5f205a9893945220ca249c2fc00dfb528b4cfa/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "338fc488025d5e499509ada8fb3fd47a22f17742",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/338fc488025d5e499509ada8fb3fd47a22f17742",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/338fc488025d5e499509ada8fb3fd47a22f17742"
      }
    ],
    "stats": {
      "total": 45,
      "additions": 42,
      "deletions": 3
    },
    "files": [
      {
        "sha": "018f237d5e11f368131d7bedcf787c9214689537",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 42,
        "deletions": 3,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca5f205a9893945220ca249c2fc00dfb528b4cfa/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca5f205a9893945220ca249c2fc00dfb528b4cfa/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=ca5f205a9893945220ca249c2fc00dfb528b4cfa",
        "patch": "@@ -314,7 +314,7 @@ bool SendCoinsDialog::PrepareSendText(QString& question_string, QString& informa\n \n     question_string.append(\"<br /><span style='font-size:10pt;'>\");\n     if (model->wallet().privateKeysDisabled()) {\n-        question_string.append(tr(\"Please, review your transaction proposal. This will produce a Partially Signed Bitcoin Transaction (PSBT) which you can copy and then sign with e.g. an offline %1 wallet, or a PSBT-compatible hardware wallet.\").arg(PACKAGE_NAME));\n+        question_string.append(tr(\"Please, review your transaction proposal. This will produce a Partially Signed Bitcoin Transaction (PSBT) which you can save or copy and then sign with e.g. an offline %1 wallet, or a PSBT-compatible hardware wallet.\").arg(PACKAGE_NAME));\n     } else {\n         question_string.append(tr(\"Please, review your transaction.\"));\n     }\n@@ -380,7 +380,7 @@ void SendCoinsDialog::on_sendButton_clicked()\n     assert(m_current_transaction);\n \n     const QString confirmation = model->wallet().privateKeysDisabled() ? tr(\"Confirm transaction proposal\") : tr(\"Confirm send coins\");\n-    const QString confirmButtonText = model->wallet().privateKeysDisabled() ? tr(\"Copy PSBT to clipboard\") : tr(\"Send\");\n+    const QString confirmButtonText = model->wallet().privateKeysDisabled() ? tr(\"Create Unsigned\") : tr(\"Send\");\n     SendConfirmationDialog confirmationDialog(confirmation, question_string, informative_text, detailed_text, SEND_CONFIRM_DELAY, confirmButtonText, this);\n     confirmationDialog.exec();\n     QMessageBox::StandardButton retval = static_cast<QMessageBox::StandardButton>(confirmationDialog.result());\n@@ -403,7 +403,43 @@ void SendCoinsDialog::on_sendButton_clicked()\n         CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n         ssTx << psbtx;\n         GUIUtil::setClipboard(EncodeBase64(ssTx.str()).c_str());\n-        Q_EMIT message(tr(\"PSBT copied\"), \"Copied to clipboard\", CClientUIInterface::MSG_INFORMATION);\n+        QMessageBox msgBox;\n+        msgBox.setText(\"Unsigned Transaction\");\n+        msgBox.setInformativeText(\"The PSBT has been copied to the clipboard. You can also save it.\");\n+        msgBox.setStandardButtons(QMessageBox::Save | QMessageBox::Discard);\n+        msgBox.setDefaultButton(QMessageBox::Discard);\n+        switch (msgBox.exec()) {\n+        case QMessageBox::Save: {\n+            QString selectedFilter;\n+            QString fileNameSuggestion = \"\";\n+            bool first = true;\n+            for (const SendCoinsRecipient &rcp : m_current_transaction->getRecipients()) {\n+                if (!first) {\n+                    fileNameSuggestion.append(\" - \");\n+                }\n+                QString labelOrAddress = rcp.label.isEmpty() ? rcp.address : rcp.label;\n+                QString amount = BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(), rcp.amount);\n+                fileNameSuggestion.append(labelOrAddress + \"-\" + amount);\n+                first = false;\n+            }\n+            fileNameSuggestion.append(\".psbt\");\n+            QString filename = GUIUtil::getSaveFileName(this,\n+                tr(\"Save Transaction Data\"), fileNameSuggestion,\n+                tr(\"Partially Signed Transaction (Binary) (*.psbt)\"), &selectedFilter);\n+            if (filename.isEmpty()) {\n+                return;\n+            }\n+            std::ofstream out(filename.toLocal8Bit().data());\n+            out << ssTx.str();\n+            out.close();\n+            Q_EMIT message(tr(\"PSBT saved\"), \"PSBT saved to disk\", CClientUIInterface::MSG_INFORMATION);\n+            break;\n+        }\n+        case QMessageBox::Discard:\n+            break;\n+        default:\n+            assert(false);\n+        }\n     } else {\n         // now send the prepared transaction\n         WalletModel::SendCoinsReturn sendStatus = model->sendCoins(*m_current_transaction);\n@@ -422,10 +458,13 @@ void SendCoinsDialog::on_sendButton_clicked()\n         coinControlUpdateLabels();\n     }\n     fNewRecipientAllowed = true;\n+    m_current_transaction.reset();\n }\n \n void SendCoinsDialog::clear()\n {\n+    m_current_transaction.reset();\n+\n     // Clear coin control settings\n     CoinControlDialog::coinControl()->UnSelectAll();\n     ui->checkBoxCoinControlChange->setChecked(false);"
      }
    ]
  },
  {
    "sha": "4bb1d6cf5ddc097d10ccc9e53e17862a1d6523d1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YmIxZDZjZjVkZGMwOTdkMTBjY2M5ZTUzZTE3ODYyYTFkNjUyM2Qx",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2020-01-04T13:13:04Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-13T19:09:31Z"
      },
      "message": "[gui] load PSBT\n\nco-authored-by: Glenn Willen <gwillen@nerdnet.org>",
      "tree": {
        "sha": "7c65fb87ea483349f4a1fc59f1311bcbe660c34e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7c65fb87ea483349f4a1fc59f1311bcbe660c34e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4bb1d6cf5ddc097d10ccc9e53e17862a1d6523d1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4bb1d6cf5ddc097d10ccc9e53e17862a1d6523d1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4bb1d6cf5ddc097d10ccc9e53e17862a1d6523d1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4bb1d6cf5ddc097d10ccc9e53e17862a1d6523d1/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ca5f205a9893945220ca249c2fc00dfb528b4cfa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca5f205a9893945220ca249c2fc00dfb528b4cfa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ca5f205a9893945220ca249c2fc00dfb528b4cfa"
      }
    ],
    "stats": {
      "total": 102,
      "additions": 102,
      "deletions": 0
    },
    "files": [
      {
        "sha": "71e4d59ea78867f1bfebd0a78a933612160fdbb9",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4bb1d6cf5ddc097d10ccc9e53e17862a1d6523d1/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4bb1d6cf5ddc097d10ccc9e53e17862a1d6523d1/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=4bb1d6cf5ddc097d10ccc9e53e17862a1d6523d1",
        "patch": "@@ -317,6 +317,8 @@ void BitcoinGUI::createActions()\n     signMessageAction->setStatusTip(tr(\"Sign messages with your Bitcoin addresses to prove you own them\"));\n     verifyMessageAction = new QAction(tr(\"&Verify message...\"), this);\n     verifyMessageAction->setStatusTip(tr(\"Verify messages to ensure they were signed with specified Bitcoin addresses\"));\n+    m_load_psbt_action = new QAction(tr(\"Load PSBT...\"), this);\n+    m_load_psbt_action->setStatusTip(tr(\"Load Partially Signed Bitcoin Transaction\"));\n \n     openRPCConsoleAction = new QAction(tr(\"Node window\"), this);\n     openRPCConsoleAction->setStatusTip(tr(\"Open node debugging and diagnostic console\"));\n@@ -366,6 +368,7 @@ void BitcoinGUI::createActions()\n         connect(changePassphraseAction, &QAction::triggered, walletFrame, &WalletFrame::changePassphrase);\n         connect(signMessageAction, &QAction::triggered, [this]{ showNormalIfMinimized(); });\n         connect(signMessageAction, &QAction::triggered, [this]{ gotoSignMessageTab(); });\n+        connect(m_load_psbt_action, &QAction::triggered, [this]{ gotoLoadPSBT(); });\n         connect(verifyMessageAction, &QAction::triggered, [this]{ showNormalIfMinimized(); });\n         connect(verifyMessageAction, &QAction::triggered, [this]{ gotoVerifyMessageTab(); });\n         connect(usedSendingAddressesAction, &QAction::triggered, walletFrame, &WalletFrame::usedSendingAddresses);\n@@ -438,6 +441,7 @@ void BitcoinGUI::createMenuBar()\n         file->addAction(backupWalletAction);\n         file->addAction(signMessageAction);\n         file->addAction(verifyMessageAction);\n+        file->addAction(m_load_psbt_action);\n         file->addSeparator();\n     }\n     file->addAction(quitAction);\n@@ -854,6 +858,10 @@ void BitcoinGUI::gotoVerifyMessageTab(QString addr)\n {\n     if (walletFrame) walletFrame->gotoVerifyMessageTab(addr);\n }\n+void BitcoinGUI::gotoLoadPSBT()\n+{\n+    if (walletFrame) walletFrame->gotoLoadPSBT();\n+}\n #endif // ENABLE_WALLET\n \n void BitcoinGUI::updateNetworkState()"
      },
      {
        "sha": "5592770d360b2c18a2af5dc5c56e07e1e588eb32",
        "filename": "src/qt/bitcoingui.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4bb1d6cf5ddc097d10ccc9e53e17862a1d6523d1/src/qt/bitcoingui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4bb1d6cf5ddc097d10ccc9e53e17862a1d6523d1/src/qt/bitcoingui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.h?ref=4bb1d6cf5ddc097d10ccc9e53e17862a1d6523d1",
        "patch": "@@ -135,6 +135,7 @@ class BitcoinGUI : public QMainWindow\n     QAction* usedReceivingAddressesAction = nullptr;\n     QAction* signMessageAction = nullptr;\n     QAction* verifyMessageAction = nullptr;\n+    QAction* m_load_psbt_action = nullptr;\n     QAction* aboutAction = nullptr;\n     QAction* receiveCoinsAction = nullptr;\n     QAction* receiveCoinsMenuAction = nullptr;\n@@ -270,6 +271,8 @@ public Q_SLOTS:\n     void gotoSignMessageTab(QString addr = \"\");\n     /** Show Sign/Verify Message dialog and switch to verify message tab */\n     void gotoVerifyMessageTab(QString addr = \"\");\n+    /** Show load Partially Signed Bitcoin Transaction dialog */\n+    void gotoLoadPSBT();\n \n     /** Show open dialog */\n     void openClicked();"
      },
      {
        "sha": "02a9583ae9d3c87a7fa345531b0b8e13e7dd042f",
        "filename": "src/qt/walletframe.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4bb1d6cf5ddc097d10ccc9e53e17862a1d6523d1/src/qt/walletframe.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4bb1d6cf5ddc097d10ccc9e53e17862a1d6523d1/src/qt/walletframe.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletframe.cpp?ref=4bb1d6cf5ddc097d10ccc9e53e17862a1d6523d1",
        "patch": "@@ -163,6 +163,14 @@ void WalletFrame::gotoVerifyMessageTab(QString addr)\n         walletView->gotoVerifyMessageTab(addr);\n }\n \n+void WalletFrame::gotoLoadPSBT()\n+{\n+    WalletView *walletView = currentWalletView();\n+    if (walletView) {\n+        walletView->gotoLoadPSBT();\n+    }\n+}\n+\n void WalletFrame::encryptWallet(bool status)\n {\n     WalletView *walletView = currentWalletView();"
      },
      {
        "sha": "d90ade5005effd349f5f984c540da514d5df93e9",
        "filename": "src/qt/walletframe.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4bb1d6cf5ddc097d10ccc9e53e17862a1d6523d1/src/qt/walletframe.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4bb1d6cf5ddc097d10ccc9e53e17862a1d6523d1/src/qt/walletframe.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletframe.h?ref=4bb1d6cf5ddc097d10ccc9e53e17862a1d6523d1",
        "patch": "@@ -78,6 +78,9 @@ public Q_SLOTS:\n     /** Show Sign/Verify Message dialog and switch to verify message tab */\n     void gotoVerifyMessageTab(QString addr = \"\");\n \n+    /** Load Partially Signed Bitcoin Transaction */\n+    void gotoLoadPSBT();\n+\n     /** Encrypt the wallet */\n     void encryptWallet(bool status);\n     /** Backup the wallet */"
      },
      {
        "sha": "d0eca1a25b81286790151113fe77f1e26f3c4428",
        "filename": "src/qt/walletview.cpp",
        "status": "modified",
        "additions": 78,
        "deletions": 0,
        "changes": 78,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4bb1d6cf5ddc097d10ccc9e53e17862a1d6523d1/src/qt/walletview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4bb1d6cf5ddc097d10ccc9e53e17862a1d6523d1/src/qt/walletview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletview.cpp?ref=4bb1d6cf5ddc097d10ccc9e53e17862a1d6523d1",
        "patch": "@@ -4,6 +4,9 @@\n \n #include <qt/walletview.h>\n \n+#include <node/psbt.h>\n+#include <node/transaction.h>\n+#include <policy/policy.h>\n #include <qt/addressbookpage.h>\n #include <qt/askpassphrasedialog.h>\n #include <qt/clientmodel.h>\n@@ -20,6 +23,7 @@\n \n #include <interfaces/node.h>\n #include <ui_interface.h>\n+#include <util/strencodings.h>\n \n #include <QAction>\n #include <QActionGroup>\n@@ -197,6 +201,80 @@ void WalletView::gotoVerifyMessageTab(QString addr)\n         signVerifyMessageDialog->setAddress_VM(addr);\n }\n \n+void WalletView::gotoLoadPSBT()\n+{\n+    QString filename = GUIUtil::getOpenFileName(this,\n+        tr(\"Load Transaction Data\"), QString(),\n+        tr(\"Partially Signed Transaction (*.psbt)\"), nullptr);\n+    if (filename.isEmpty()) return;\n+    if (GetFileSize(filename.toLocal8Bit().data(), MAX_FILE_SIZE_PSBT) == MAX_FILE_SIZE_PSBT) {\n+        Q_EMIT message(tr(\"Error\"), tr(\"PSBT file must be smaller than 100 MiB\"), CClientUIInterface::MSG_ERROR);\n+        return;\n+    }\n+    std::ifstream in(filename.toLocal8Bit().data(), std::ios::binary);\n+    std::string data(std::istreambuf_iterator<char>{in}, {});\n+\n+    std::string error;\n+    PartiallySignedTransaction psbtx;\n+    if (!DecodeRawPSBT(psbtx, data, error)) {\n+        Q_EMIT message(tr(\"Error\"), tr(\"Unable to decode PSBT file\") + \"\\n\" + QString::fromStdString(error), CClientUIInterface::MSG_ERROR);\n+        return;\n+    }\n+\n+    CMutableTransaction mtx;\n+    bool complete = false;\n+    PSBTAnalysis analysis = AnalyzePSBT(psbtx);\n+    QMessageBox msgBox;\n+    msgBox.setText(\"PSBT\");\n+    switch (analysis.next) {\n+    case PSBTRole::CREATOR:\n+    case PSBTRole::UPDATER:\n+        msgBox.setInformativeText(\"PSBT is incomplete. Copy to clipboard for manual inspection?\");\n+        break;\n+    case PSBTRole::SIGNER:\n+        msgBox.setInformativeText(\"Transaction needs more signatures. Copy to clipboard?\");\n+        break;\n+    case PSBTRole::FINALIZER:\n+    case PSBTRole::EXTRACTOR:\n+        complete = FinalizeAndExtractPSBT(psbtx, mtx);\n+        if (complete) {\n+            msgBox.setInformativeText(tr(\"Would you like to send this transaction?\"));\n+        } else {\n+            // The analyzer missed something, e.g. if there are final_scriptSig/final_scriptWitness\n+            // but with invalid signatures.\n+            msgBox.setInformativeText(tr(\"There was an unexpected problem processing the PSBT. Copy to clipboard for manual inspection?\"));\n+        }\n+    }\n+\n+    msgBox.setStandardButtons(QMessageBox::Yes | QMessageBox::Cancel);\n+    switch (msgBox.exec()) {\n+    case QMessageBox::Yes: {\n+        if (complete) {\n+            std::string err_string;\n+            CTransactionRef tx = MakeTransactionRef(mtx);\n+\n+            TransactionError result = BroadcastTransaction(*clientModel->node().context(), tx, err_string, DEFAULT_MAX_RAW_TX_FEE_RATE.GetFeePerK(), /* relay */ true, /* wait_callback */ false);\n+            if (result == TransactionError::OK) {\n+                Q_EMIT message(tr(\"Success\"), tr(\"Broadcasted transaction sucessfully.\"), CClientUIInterface::MSG_INFORMATION | CClientUIInterface::MODAL);\n+            } else {\n+                Q_EMIT message(tr(\"Error\"), QString::fromStdString(err_string), CClientUIInterface::MSG_ERROR);\n+            }\n+        } else {\n+            // Serialize the PSBT\n+            CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+            ssTx << psbtx;\n+            GUIUtil::setClipboard(EncodeBase64(ssTx.str()).c_str());\n+            Q_EMIT message(tr(\"PSBT copied\"), \"Copied to clipboard\", CClientUIInterface::MSG_INFORMATION);\n+            return;\n+        }\n+    }\n+    case QMessageBox::Cancel:\n+        break;\n+    default:\n+        assert(false);\n+    }\n+}\n+\n bool WalletView::handlePaymentRequest(const SendCoinsRecipient& recipient)\n {\n     return sendCoinsPage->handlePaymentRequest(recipient);"
      },
      {
        "sha": "00a95eeec58cfa0d4d1e6a39b10190972511f8d4",
        "filename": "src/qt/walletview.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4bb1d6cf5ddc097d10ccc9e53e17862a1d6523d1/src/qt/walletview.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4bb1d6cf5ddc097d10ccc9e53e17862a1d6523d1/src/qt/walletview.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletview.h?ref=4bb1d6cf5ddc097d10ccc9e53e17862a1d6523d1",
        "patch": "@@ -83,6 +83,8 @@ public Q_SLOTS:\n     void gotoSignMessageTab(QString addr = \"\");\n     /** Show Sign/Verify Message dialog and switch to verify message tab */\n     void gotoVerifyMessageTab(QString addr = \"\");\n+    /** Load Partially Signed Bitcoin Transaction */\n+    void gotoLoadPSBT();\n \n     /** Show incoming transaction notification for new transactions.\n "
      }
    ]
  },
  {
    "sha": "d6ddc56383f0d8e8faf83f2db247dd9b195072ba",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNmRkYzU2MzgzZjBkOGU4ZmFmODNmMmRiMjQ3ZGQ5YjE5NTA3MmJh",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2020-03-26T10:18:52Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-13T19:09:31Z"
      },
      "message": "[psbt] add file size limit",
      "tree": {
        "sha": "bdfb3ddb97953886ef21d1b4267f4f677726c3c2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bdfb3ddb97953886ef21d1b4267f4f677726c3c2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d6ddc56383f0d8e8faf83f2db247dd9b195072ba",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6ddc56383f0d8e8faf83f2db247dd9b195072ba",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d6ddc56383f0d8e8faf83f2db247dd9b195072ba",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6ddc56383f0d8e8faf83f2db247dd9b195072ba/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4bb1d6cf5ddc097d10ccc9e53e17862a1d6523d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4bb1d6cf5ddc097d10ccc9e53e17862a1d6523d1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4bb1d6cf5ddc097d10ccc9e53e17862a1d6523d1"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 4,
      "deletions": 0
    },
    "files": [
      {
        "sha": "7ea06b38f7c300a8e9c62428a6d318fa73f5f3f8",
        "filename": "src/psbt.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6ddc56383f0d8e8faf83f2db247dd9b195072ba/src/psbt.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6ddc56383f0d8e8faf83f2db247dd9b195072ba/src/psbt.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.h?ref=d6ddc56383f0d8e8faf83f2db247dd9b195072ba",
        "patch": "@@ -40,6 +40,10 @@ static constexpr uint8_t PSBT_OUT_BIP32_DERIVATION = 0x02;\n // as a 0 length key which indicates that this is the separator. The separator has no value.\n static constexpr uint8_t PSBT_SEPARATOR = 0x00;\n \n+// BIP 174 does not specify a maximum file size, but we set a limit anyway\n+// to prevent reading a stream indefinately and running out of memory.\n+const std::streamsize MAX_FILE_SIZE_PSBT = 100000000; // 100 MiB\n+\n /** A structure for PSBTs which contain per-input information */\n struct PSBTInput\n {"
      }
    ]
  },
  {
    "sha": "cb1cc08babb0a6829689c5f5fcd63431366ca7e5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYjFjYzA4YmFiYjBhNjgyOTY4OWM1ZjVmY2Q2MzQzMTM2NmNhN2U1",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-13T18:31:01Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-13T19:09:31Z"
      },
      "message": "Refactor bumpfee to have bulk of it in separate function",
      "tree": {
        "sha": "c4273b3441ef8b34931a52177259f58c5902dc6e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c4273b3441ef8b34931a52177259f58c5902dc6e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cb1cc08babb0a6829689c5f5fcd63431366ca7e5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb1cc08babb0a6829689c5f5fcd63431366ca7e5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cb1cc08babb0a6829689c5f5fcd63431366ca7e5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb1cc08babb0a6829689c5f5fcd63431366ca7e5/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d6ddc56383f0d8e8faf83f2db247dd9b195072ba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6ddc56383f0d8e8faf83f2db247dd9b195072ba",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d6ddc56383f0d8e8faf83f2db247dd9b195072ba"
      }
    ],
    "stats": {
      "total": 141,
      "additions": 72,
      "deletions": 69
    },
    "files": [
      {
        "sha": "b2627872c0e9ebb1abd0576ac8ebbb2cb1957aaa",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 72,
        "deletions": 69,
        "changes": 141,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb1cc08babb0a6829689c5f5fcd63431366ca7e5/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb1cc08babb0a6829689c5f5fcd63431366ca7e5/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=cb1cc08babb0a6829689c5f5fcd63431366ca7e5",
        "patch": "@@ -3333,76 +3333,14 @@ UniValue signrawtransactionwithwallet(const JSONRPCRequest& request)\n     return result;\n }\n \n-static UniValue bumpfee(const JSONRPCRequest& request)\n+static void BumpFee(CWallet* const pwallet, const UniValue options, const uint256 hash, CMutableTransaction& mtx, CAmount& old_fee, CAmount& new_fee, std::vector<std::string>& errors)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    CWallet* const pwallet = wallet.get();\n-\n-\n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n-        return NullUniValue;\n-\n-            RPCHelpMan{\"bumpfee\",\n-                \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n-                \"An opt-in RBF transaction with the given txid must be in the wallet.\\n\"\n-                \"The command will pay the additional fee by reducing change outputs or adding inputs when necessary. It may add a new change output if one does not already exist.\\n\"\n-                \"All inputs in the original transaction will be included in the replacement transaction.\\n\"\n-                \"The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\\n\"\n-                \"By default, the new fee will be calculated automatically using estimatesmartfee.\\n\"\n-                \"The user can specify a confirmation target for estimatesmartfee.\\n\"\n-                \"Alternatively, the user can specify a fee_rate (\" + CURRENCY_UNIT + \" per kB) for the new transaction.\\n\"\n-                \"At a minimum, the new fee rate must be high enough to pay an additional new relay fee (incrementalfee\\n\"\n-                \"returned by getnetworkinfo) to enter the node's mempool.\\n\",\n-                {\n-                    {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The txid to be bumped\"},\n-                    {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n-                        {\n-                            {\"confTarget\", RPCArg::Type::NUM, /* default */ \"wallet default\", \"Confirmation target (in blocks)\"},\n-                            {\"fee_rate\", RPCArg::Type::NUM, /* default */ \"fall back to 'confTarget'\", \"fee rate (NOT total fee) to pay, in \" + CURRENCY_UNIT + \" per kB\\n\"\n-            \"                         Specify a fee rate instead of relying on the built-in fee estimator.\\n\"\n-                                     \"Must be at least 0.0001 \" + CURRENCY_UNIT + \" per kB higher than the current transaction fee rate.\\n\"},\n-                            {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"true\", \"Whether the new transaction should still be\\n\"\n-            \"                         marked bip-125 replaceable. If true, the sequence numbers in the transaction will\\n\"\n-            \"                         be left unchanged from the original. If false, any input sequence numbers in the\\n\"\n-            \"                         original transaction that were less than 0xfffffffe will be increased to 0xfffffffe\\n\"\n-            \"                         so the new transaction will not be explicitly bip-125 replaceable (though it may\\n\"\n-            \"                         still be replaceable in practice, for example if it has unconfirmed ancestors which\\n\"\n-            \"                         are replaceable).\"},\n-                            {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"UNSET\", \"The fee estimate mode, must be one of:\\n\"\n-            \"         \\\"UNSET\\\"\\n\"\n-            \"         \\\"ECONOMICAL\\\"\\n\"\n-            \"         \\\"CONSERVATIVE\\\"\"},\n-                        },\n-                        \"options\"},\n-                },\n-                RPCResult{\n-                    RPCResult::Type::OBJ, \"\", \"\", {\n-                        {RPCResult::Type::STR, \"psbt\", \"The base64-encoded unsigned PSBT of the new transaction. Only returned when wallet private keys are disabled.\"},\n-                        {RPCResult::Type::STR_HEX, \"txid\", \"The id of the new transaction. Only returned when wallet private keys are enabled.\"},\n-                        {RPCResult::Type::STR_AMOUNT, \"origfee\", \"The fee of the replaced transaction.\"},\n-                        {RPCResult::Type::STR_AMOUNT, \"fee\", \"The fee of the new transaction.\"},\n-                        {RPCResult::Type::ARR, \"errors\", \"Errors encountered during processing (may be empty).\",\n-                        {\n-                            {RPCResult::Type::STR, \"\", \"\"},\n-                        }},\n-                    }\n-                },\n-                RPCExamples{\n-            \"\\nBump the fee, get the new transaction\\'s txid\\n\" +\n-                    HelpExampleCli(\"bumpfee\", \"<txid>\")\n-                },\n-            }.Check(request);\n-\n-    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VOBJ});\n-    uint256 hash(ParseHashV(request.params[0], \"txid\"));\n-\n     CCoinControl coin_control;\n     coin_control.fAllowWatchOnly = pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS);\n     // optional parameters\n     coin_control.m_signal_bip125_rbf = true;\n \n-    if (!request.params[1].isNull()) {\n-        UniValue options = request.params[1];\n+    if (!options.isNull()) {\n         RPCTypeCheckObj(options,\n             {\n                 {\"confTarget\", UniValueType(UniValue::VNUM)},\n@@ -3441,11 +3379,6 @@ static UniValue bumpfee(const JSONRPCRequest& request)\n     LOCK(pwallet->cs_wallet);\n     EnsureWalletIsUnlocked(pwallet);\n \n-\n-    std::vector<std::string> errors;\n-    CAmount old_fee;\n-    CAmount new_fee;\n-    CMutableTransaction mtx;\n     feebumper::Result res;\n     // Targeting feerate bump.\n     res = feebumper::CreateRateBumpTransaction(*pwallet, hash, coin_control, errors, old_fee, new_fee, mtx);\n@@ -3468,6 +3401,76 @@ static UniValue bumpfee(const JSONRPCRequest& request)\n                 break;\n         }\n     }\n+}\n+\n+\n+static UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n+        return NullUniValue;\n+\n+            RPCHelpMan{\"bumpfee\",\n+                \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n+                \"An opt-in RBF transaction with the given txid must be in the wallet.\\n\"\n+                \"The command will pay the additional fee by reducing change outputs or adding inputs when necessary. It may add a new change output if one does not already exist.\\n\"\n+                \"All inputs in the original transaction will be included in the replacement transaction.\\n\"\n+                \"The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\\n\"\n+                \"By default, the new fee will be calculated automatically using estimatesmartfee.\\n\"\n+                \"The user can specify a confirmation target for estimatesmartfee.\\n\"\n+                \"Alternatively, the user can specify a fee_rate (\" + CURRENCY_UNIT + \" per kB) for the new transaction.\\n\"\n+                \"At a minimum, the new fee rate must be high enough to pay an additional new relay fee (incrementalfee\\n\"\n+                \"returned by getnetworkinfo) to enter the node's mempool.\\n\",\n+                {\n+                    {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The txid to be bumped\"},\n+                    {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                        {\n+                            {\"confTarget\", RPCArg::Type::NUM, /* default */ \"wallet default\", \"Confirmation target (in blocks)\"},\n+                            {\"fee_rate\", RPCArg::Type::NUM, /* default */ \"fall back to 'confTarget'\", \"fee rate (NOT total fee) to pay, in \" + CURRENCY_UNIT + \" per kB\\n\"\n+            \"                         Specify a fee rate instead of relying on the built-in fee estimator.\\n\"\n+                                     \"Must be at least 0.0001 \" + CURRENCY_UNIT + \" per kB higher than the current transaction fee rate.\\n\"},\n+                            {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"true\", \"Whether the new transaction should still be\\n\"\n+            \"                         marked bip-125 replaceable. If true, the sequence numbers in the transaction will\\n\"\n+            \"                         be left unchanged from the original. If false, any input sequence numbers in the\\n\"\n+            \"                         original transaction that were less than 0xfffffffe will be increased to 0xfffffffe\\n\"\n+            \"                         so the new transaction will not be explicitly bip-125 replaceable (though it may\\n\"\n+            \"                         still be replaceable in practice, for example if it has unconfirmed ancestors which\\n\"\n+            \"                         are replaceable).\"},\n+                            {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"UNSET\", \"The fee estimate mode, must be one of:\\n\"\n+            \"         \\\"UNSET\\\"\\n\"\n+            \"         \\\"ECONOMICAL\\\"\\n\"\n+            \"         \\\"CONSERVATIVE\\\"\"},\n+                        },\n+                        \"options\"},\n+                },\n+                RPCResult{\n+                    RPCResult::Type::OBJ, \"\", \"\", {\n+                        {RPCResult::Type::STR, \"psbt\", \"The base64-encoded unsigned PSBT of the new transaction. Only returned when wallet private keys are disabled.\"},\n+                        {RPCResult::Type::STR_HEX, \"txid\", \"The id of the new transaction. Only returned when wallet private keys are enabled.\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"origfee\", \"The fee of the replaced transaction.\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"fee\", \"The fee of the new transaction.\"},\n+                        {RPCResult::Type::ARR, \"errors\", \"Errors encountered during processing (may be empty).\",\n+                        {\n+                            {RPCResult::Type::STR, \"\", \"\"},\n+                        }},\n+                    }\n+                },\n+                RPCExamples{\n+            \"\\nBump the fee, get the new transaction\\'s txid\\n\" +\n+                    HelpExampleCli(\"bumpfee\", \"<txid>\")\n+                },\n+            }.Check(request);\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VOBJ});\n+    uint256 hash(ParseHashV(request.params[0], \"txid\"));\n+    CAmount old_fee;\n+    CAmount new_fee;\n+    CMutableTransaction mtx;\n+    std::vector<std::string> errors;\n+    BumpFee(pwallet, request.params[1], hash, mtx, old_fee, new_fee, errors);\n \n     UniValue result(UniValue::VOBJ);\n "
      }
    ]
  },
  {
    "sha": "9ed98a4b49c5850b26ed4dbab32d54b5a6c590c7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZWQ5OGE0YjQ5YzU4NTBiMjZlZDRkYmFiMzJkNTRiNWE2YzU5MGM3",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-13T18:48:03Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-13T19:09:31Z"
      },
      "message": "Add psbtbumpfee RPC",
      "tree": {
        "sha": "c593af186b19f9f3a36fdf0b9f14eb77e20a031e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c593af186b19f9f3a36fdf0b9f14eb77e20a031e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9ed98a4b49c5850b26ed4dbab32d54b5a6c590c7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ed98a4b49c5850b26ed4dbab32d54b5a6c590c7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9ed98a4b49c5850b26ed4dbab32d54b5a6c590c7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ed98a4b49c5850b26ed4dbab32d54b5a6c590c7/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cb1cc08babb0a6829689c5f5fcd63431366ca7e5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb1cc08babb0a6829689c5f5fcd63431366ca7e5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cb1cc08babb0a6829689c5f5fcd63431366ca7e5"
      }
    ],
    "stats": {
      "total": 101,
      "additions": 100,
      "deletions": 1
    },
    "files": [
      {
        "sha": "93a353dee88f95e671669fa52d53ca4c679afee1",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ed98a4b49c5850b26ed4dbab32d54b5a6c590c7/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ed98a4b49c5850b26ed4dbab32d54b5a6c590c7/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=9ed98a4b49c5850b26ed4dbab32d54b5a6c590c7",
        "patch": "@@ -150,6 +150,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"getmempoolancestors\", 1, \"verbose\" },\n     { \"getmempooldescendants\", 1, \"verbose\" },\n     { \"bumpfee\", 1, \"options\" },\n+    { \"psbtbumpfee\", 1, \"options\" },\n     { \"logging\", 0, \"include\" },\n     { \"logging\", 1, \"exclude\" },\n     { \"disconnectnode\", 1, \"nodeid\" },"
      },
      {
        "sha": "f100ac1dbb3a68940cc4c1c73c80a655192ae6c7",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 92,
        "deletions": 0,
        "changes": 92,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ed98a4b49c5850b26ed4dbab32d54b5a6c590c7/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ed98a4b49c5850b26ed4dbab32d54b5a6c590c7/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=9ed98a4b49c5850b26ed4dbab32d54b5a6c590c7",
        "patch": "@@ -3509,6 +3509,97 @@ static UniValue bumpfee(const JSONRPCRequest& request)\n     return result;\n }\n \n+static UniValue psbtbumpfee(const JSONRPCRequest& request)\n+{\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n+        return NullUniValue;\n+\n+            RPCHelpMan{\"psbtbumpfee\",\n+                \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n+                \"Returns a PSBT instead of creating and signing a new transaction.\\n\"\n+                \"An opt-in RBF transaction with the given txid must be in the wallet.\\n\"\n+                \"The command will pay the additional fee by reducing change outputs or adding inputs when necessary. It may add a new change output if one does not already exist.\\n\"\n+                \"All inputs in the original transaction will be included in the replacement transaction.\\n\"\n+                \"The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\\n\"\n+                \"By default, the new fee will be calculated automatically using estimatesmartfee.\\n\"\n+                \"The user can specify a confirmation target for estimatesmartfee.\\n\"\n+                \"Alternatively, the user can specify a fee_rate (\" + CURRENCY_UNIT + \" per kB) for the new transaction.\\n\"\n+                \"At a minimum, the new fee rate must be high enough to pay an additional new relay fee (incrementalfee\\n\"\n+                \"returned by getnetworkinfo) to enter the node's mempool.\\n\",\n+                {\n+                    {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The txid to be bumped\"},\n+                    {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                        {\n+                            {\"confTarget\", RPCArg::Type::NUM, /* default */ \"wallet default\", \"Confirmation target (in blocks)\"},\n+                            {\"fee_rate\", RPCArg::Type::NUM, /* default */ \"fall back to 'confTarget'\", \"fee rate (NOT total fee) to pay, in \" + CURRENCY_UNIT + \" per kB\\n\"\n+            \"                         Specify a fee rate instead of relying on the built-in fee estimator.\\n\"\n+                                     \"Must be at least 0.0001 \" + CURRENCY_UNIT + \" per kB higher than the current transaction fee rate.\\n\"},\n+                            {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"true\", \"Whether the new transaction should still be\\n\"\n+            \"                         marked bip-125 replaceable. If true, the sequence numbers in the transaction will\\n\"\n+            \"                         be left unchanged from the original. If false, any input sequence numbers in the\\n\"\n+            \"                         original transaction that were less than 0xfffffffe will be increased to 0xfffffffe\\n\"\n+            \"                         so the new transaction will not be explicitly bip-125 replaceable (though it may\\n\"\n+            \"                         still be replaceable in practice, for example if it has unconfirmed ancestors which\\n\"\n+            \"                         are replaceable).\"},\n+                            {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"UNSET\", \"The fee estimate mode, must be one of:\\n\"\n+            \"         \\\"UNSET\\\"\\n\"\n+            \"         \\\"ECONOMICAL\\\"\\n\"\n+            \"         \\\"CONSERVATIVE\\\"\"},\n+                        },\n+                        \"options\"},\n+                },\n+                RPCResult{\n+                    RPCResult::Type::OBJ, \"\", \"\", {\n+                        {RPCResult::Type::STR, \"psbt\", \"The base64-encoded unsigned PSBT of the new transaction.\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"origfee\", \"The fee of the replaced transaction.\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"fee\", \"The fee of the new transaction.\"},\n+                        {RPCResult::Type::ARR, \"errors\", \"Errors encountered during processing (may be empty).\",\n+                        {\n+                            {RPCResult::Type::STR, \"\", \"\"},\n+                        }},\n+                    }\n+                },\n+                RPCExamples{\n+            \"\\nBump the fee, get the new transaction\\'s psbt\\n\" +\n+                    HelpExampleCli(\"bumpfee\", \"<txid>\")\n+                },\n+            }.Check(request);\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VOBJ});\n+\n+    uint256 hash(ParseHashV(request.params[0], \"txid\"));\n+    CAmount old_fee;\n+    CAmount new_fee;\n+    CMutableTransaction mtx;\n+    std::vector<std::string> errors;\n+    BumpFee(pwallet, request.params[1], hash, mtx, old_fee, new_fee, errors);\n+\n+    UniValue result(UniValue::VOBJ);\n+\n+    PartiallySignedTransaction psbtx(mtx);\n+    bool complete = false;\n+    const TransactionError err = pwallet->FillPSBT(psbtx, complete, SIGHASH_ALL, false /* sign */, true /* bip32derivs */);\n+    CHECK_NONFATAL(err == TransactionError::OK);\n+    CHECK_NONFATAL(!complete);\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << psbtx;\n+    result.pushKV(\"psbt\", EncodeBase64(ssTx.str()));\n+\n+    result.pushKV(\"origfee\", ValueFromAmount(old_fee));\n+    result.pushKV(\"fee\", ValueFromAmount(new_fee));\n+    UniValue result_errors(UniValue::VARR);\n+    for (const std::string& error : errors) {\n+        result_errors.push_back(error);\n+    }\n+    result.pushKV(\"errors\", result_errors);\n+\n+    return result;\n+}\n+\n UniValue rescanblockchain(const JSONRPCRequest& request)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n@@ -4271,6 +4362,7 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             \"addmultisigaddress\",               &addmultisigaddress,            {\"nrequired\",\"keys\",\"label\",\"address_type\"} },\n     { \"wallet\",             \"backupwallet\",                     &backupwallet,                  {\"destination\"} },\n     { \"wallet\",             \"bumpfee\",                          &bumpfee,                       {\"txid\", \"options\"} },\n+    { \"wallet\",             \"psbtbumpfee\",                      &psbtbumpfee,                   {\"txid\", \"options\"} },\n     { \"wallet\",             \"createwallet\",                     &createwallet,                  {\"wallet_name\", \"disable_private_keys\", \"blank\", \"passphrase\", \"avoid_reuse\"} },\n     { \"wallet\",             \"dumpprivkey\",                      &dumpprivkey,                   {\"address\"}  },\n     { \"wallet\",             \"dumpwallet\",                       &dumpwallet,                    {\"filename\"} },"
      },
      {
        "sha": "990f3984f96d886897769e00ed7bac7cc12927ab",
        "filename": "test/functional/wallet_bumpfee.py",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ed98a4b49c5850b26ed4dbab32d54b5a6c590c7/test/functional/wallet_bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ed98a4b49c5850b26ed4dbab32d54b5a6c590c7/test/functional/wallet_bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_bumpfee.py?ref=9ed98a4b49c5850b26ed4dbab32d54b5a6c590c7",
        "patch": "@@ -104,13 +104,19 @@ def test_simple_bumpfee_succeeds(self, mode, rbf_node, peer_node, dest_address):\n     self.sync_mempools((rbf_node, peer_node))\n     assert rbfid in rbf_node.getrawmempool() and rbfid in peer_node.getrawmempool()\n     if mode == \"fee_rate\":\n+        bumped_psbt = rbf_node.psbtbumpfee(rbfid, {\"fee_rate\": NORMAL})\n         bumped_tx = rbf_node.bumpfee(rbfid, {\"fee_rate\": NORMAL})\n     else:\n+        bumped_psbt = rbf_node.psbtbumpfee(rbfid)\n         bumped_tx = rbf_node.bumpfee(rbfid)\n     assert_equal(bumped_tx[\"errors\"], [])\n     assert bumped_tx[\"fee\"] > -rbftx[\"fee\"]\n     assert_equal(bumped_tx[\"origfee\"], -rbftx[\"fee\"])\n     assert \"psbt\" not in bumped_tx\n+    assert_equal(bumped_psbt[\"errors\"], [])\n+    assert bumped_psbt[\"fee\"] > -rbftx[\"fee\"]\n+    assert_equal(bumped_psbt[\"origfee\"], -rbftx[\"fee\"])\n+    assert \"psbt\" in bumped_psbt\n     # check that bumped_tx propagates, original tx was evicted and has a wallet conflict\n     self.sync_mempools((rbf_node, peer_node))\n     assert bumped_tx[\"txid\"] in rbf_node.getrawmempool()\n@@ -362,7 +368,7 @@ def test_watchonly_psbt(self, peer_node, rbf_node, dest_address):\n     assert_equal(len(watcher.decodepsbt(psbt)[\"tx\"][\"vin\"]), 1)\n \n     # Bump fee, obnoxiously high to add additional watchonly input\n-    bumped_psbt = watcher.bumpfee(original_txid, {\"fee_rate\": HIGH})\n+    bumped_psbt = watcher.psbtbumpfee(original_txid, {\"fee_rate\": HIGH})\n     assert_greater_than(len(watcher.decodepsbt(bumped_psbt['psbt'])[\"tx\"][\"vin\"]), 1)\n     assert \"txid\" not in bumped_psbt\n     assert_equal(bumped_psbt[\"origfee\"], -watcher.gettransaction(original_txid)[\"fee\"])"
      }
    ]
  },
  {
    "sha": "27d6ada6eb880c102a8738ef79d6ccbb5bb0fdba",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyN2Q2YWRhNmViODgwYzEwMmE4NzM4ZWY3OWQ2Y2NiYjViYjBmZGJh",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-13T19:28:54Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-13T19:33:39Z"
      },
      "message": "Add Make Unsigned Tx button instead of changing Send's behavior\n\nInstead of changing Send to make an unsigned tx for wallets with\nprivate keys disabled, have a separate button for that functionality\nand disable Send for such wallets.",
      "tree": {
        "sha": "a47b26d8a07748e016bb9c63e401242dfe978d1c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a47b26d8a07748e016bb9c63e401242dfe978d1c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/27d6ada6eb880c102a8738ef79d6ccbb5bb0fdba",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27d6ada6eb880c102a8738ef79d6ccbb5bb0fdba",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/27d6ada6eb880c102a8738ef79d6ccbb5bb0fdba",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27d6ada6eb880c102a8738ef79d6ccbb5bb0fdba/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9ed98a4b49c5850b26ed4dbab32d54b5a6c590c7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ed98a4b49c5850b26ed4dbab32d54b5a6c590c7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9ed98a4b49c5850b26ed4dbab32d54b5a6c590c7"
      }
    ],
    "stats": {
      "total": 225,
      "additions": 137,
      "deletions": 88
    },
    "files": [
      {
        "sha": "698a62cac3516beb2e474404c3782b4b447fc1dc",
        "filename": "src/qt/forms/sendcoinsdialog.ui",
        "status": "modified",
        "additions": 39,
        "deletions": 13,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27d6ada6eb880c102a8738ef79d6ccbb5bb0fdba/src/qt/forms/sendcoinsdialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27d6ada6eb880c102a8738ef79d6ccbb5bb0fdba/src/qt/forms/sendcoinsdialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/sendcoinsdialog.ui?ref=27d6ada6eb880c102a8738ef79d6ccbb5bb0fdba",
        "patch": "@@ -7,7 +7,7 @@\n     <x>0</x>\n     <y>0</y>\n     <width>850</width>\n-    <height>526</height>\n+    <height>572</height>\n    </rect>\n   </property>\n   <property name=\"windowTitle\">\n@@ -587,8 +587,8 @@\n        <rect>\n         <x>0</x>\n         <y>0</y>\n-        <width>830</width>\n-        <height>104</height>\n+        <width>834</width>\n+        <height>83</height>\n        </rect>\n       </property>\n       <layout class=\"QVBoxLayout\" name=\"verticalLayout_2\" stretch=\"0,1\">\n@@ -761,15 +761,15 @@\n           </item>\n           <item>\n            <widget class=\"QLabel\" name=\"fallbackFeeWarningLabel\">\n+            <property name=\"font\">\n+             <font>\n+              <weight>75</weight>\n+              <bold>true</bold>\n+             </font>\n+            </property>\n             <property name=\"toolTip\">\n              <string>Using the fallbackfee can result in sending a transaction that will take several hours or days (or never) to confirm. Consider choosing your fee manually or wait until you have validated the complete chain.</string>\n             </property>\n-            <property name=\"font\">\n-            <font>\n-                <weight>75</weight>\n-                <bold>true</bold>\n-            </font>\n-            </property>\n             <property name=\"text\">\n              <string>Warning: Fee estimation is currently not possible.</string>\n             </property>\n@@ -850,7 +850,7 @@\n                    <property name=\"toolTip\">\n                     <string>Specify a custom fee per kB (1,000 bytes) of the transaction's virtual size.\n \n-Note:  Since the fee is calculated on a per-byte basis, a fee of \"100 satoshis per kB\" for a transaction size of 500 bytes (half of 1 kB) would ultimately yield a fee of only 50 satoshis.</string>\n+Note:  Since the fee is calculated on a per-byte basis, a fee of &quot;100 satoshis per kB&quot; for a transaction size of 500 bytes (half of 1 kB) would ultimately yield a fee of only 50 satoshis.</string>\n                    </property>\n                    <property name=\"text\">\n                     <string>per kilobyte</string>\n@@ -1074,12 +1074,12 @@ Note:  Since the fee is calculated on a per-byte basis, a fee of \"100 satoshis p\n            </item>\n            <item>\n             <widget class=\"QCheckBox\" name=\"optInRBF\">\n-             <property name=\"text\">\n-              <string>Enable Replace-By-Fee</string>\n-             </property>\n              <property name=\"toolTip\">\n               <string>With Replace-By-Fee (BIP-125) you can increase a transaction's fee after it is sent. Without this, a higher fee may be recommended to compensate for increased transaction delay risk.</string>\n              </property>\n+             <property name=\"text\">\n+              <string>Enable Replace-By-Fee</string>\n+             </property>\n             </widget>\n            </item>\n           </layout>\n@@ -1131,6 +1131,32 @@ Note:  Since the fee is calculated on a per-byte basis, a fee of \"100 satoshis p\n        </property>\n       </widget>\n      </item>\n+     <item>\n+      <widget class=\"QPushButton\" name=\"makeUnsignedButton\">\n+       <property name=\"minimumSize\">\n+        <size>\n+         <width>150</width>\n+         <height>0</height>\n+        </size>\n+       </property>\n+       <property name=\"toolTip\">\n+        <string>Creates a Partially Signed Bitcoin Transaction (PSBT) for use with e.g. an offline wallet, or a PSBT-compatible hardware wallet.</string>\n+       </property>\n+       <property name=\"text\">\n+        <string>Cr&amp;eate Unsigned</string>\n+       </property>\n+       <property name=\"icon\">\n+        <iconset resource=\"../bitcoin.qrc\">\n+         <normaloff>:/icons/send</normaloff>:/icons/send</iconset>\n+       </property>\n+       <property name=\"autoDefault\">\n+        <bool>false</bool>\n+       </property>\n+       <property name=\"default\">\n+        <bool>false</bool>\n+       </property>\n+      </widget>\n+     </item>\n      <item>\n       <widget class=\"QPushButton\" name=\"clearButton\">\n        <property name=\"sizePolicy\">"
      },
      {
        "sha": "0d8f3cdb0c91c665c9f1ea4126c8718134d33412",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 93,
        "deletions": 71,
        "changes": 164,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27d6ada6eb880c102a8738ef79d6ccbb5bb0fdba/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27d6ada6eb880c102a8738ef79d6ccbb5bb0fdba/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=27d6ada6eb880c102a8738ef79d6ccbb5bb0fdba",
        "patch": "@@ -67,10 +67,12 @@ SendCoinsDialog::SendCoinsDialog(const PlatformStyle *_platformStyle, QWidget *p\n         ui->addButton->setIcon(QIcon());\n         ui->clearButton->setIcon(QIcon());\n         ui->sendButton->setIcon(QIcon());\n+        ui->makeUnsignedButton->setIcon(QIcon());\n     } else {\n         ui->addButton->setIcon(_platformStyle->SingleColorIcon(\":/icons/add\"));\n         ui->clearButton->setIcon(_platformStyle->SingleColorIcon(\":/icons/remove\"));\n         ui->sendButton->setIcon(_platformStyle->SingleColorIcon(\":/icons/send\"));\n+        ui->makeUnsignedButton->setIcon(_platformStyle->SingleColorIcon(\":/icons/send\"));\n     }\n \n     GUIUtil::setupAddressWidget(ui->lineEditCoinControlChange, this);\n@@ -188,8 +190,7 @@ void SendCoinsDialog::setModel(WalletModel *_model)\n         ui->optInRBF->setCheckState(Qt::Checked);\n \n         if (model->wallet().privateKeysDisabled()) {\n-            ui->sendButton->setText(tr(\"Cr&eate Unsigned\"));\n-            ui->sendButton->setToolTip(tr(\"Creates a Partially Signed Bitcoin Transaction (PSBT) for use with e.g. an offline %1 wallet, or a PSBT-compatible hardware wallet.\").arg(PACKAGE_NAME));\n+            ui->sendButton->setDisabled(true);\n         }\n \n         // set the smartfee-sliders default value (wallets default conf.target or last stored value)\n@@ -219,7 +220,7 @@ SendCoinsDialog::~SendCoinsDialog()\n     delete ui;\n }\n \n-bool SendCoinsDialog::PrepareSendText(QString& question_string, QString& informative_text, QString& detailed_text)\n+bool SendCoinsDialog::PrepareSendText(QString& question_string, QString& informative_text, QString& detailed_text, bool make_psbt)\n {\n     QList<SendCoinsRecipient> recipients;\n     bool valid = true;\n@@ -266,7 +267,7 @@ bool SendCoinsDialog::PrepareSendText(QString& question_string, QString& informa\n \n     updateCoinControlState(ctrl);\n \n-    prepareStatus = model->prepareTransaction(*m_current_transaction, ctrl);\n+    prepareStatus = model->prepareTransaction(*m_current_transaction, ctrl, !make_psbt /* sign */);\n \n     // process prepareStatus and on error generate message shown to user\n     processSendCoinsReturn(prepareStatus,\n@@ -306,14 +307,14 @@ bool SendCoinsDialog::PrepareSendText(QString& question_string, QString& informa\n         formatted.append(recipientElement);\n     }\n \n-    if (model->wallet().privateKeysDisabled()) {\n+    if (make_psbt) {\n         question_string.append(tr(\"Do you want to draft this transaction?\"));\n     } else {\n         question_string.append(tr(\"Are you sure you want to send?\"));\n     }\n \n     question_string.append(\"<br /><span style='font-size:10pt;'>\");\n-    if (model->wallet().privateKeysDisabled()) {\n+    if (make_psbt) {\n         question_string.append(tr(\"Please, review your transaction proposal. This will produce a Partially Signed Bitcoin Transaction (PSBT) which you can save or copy and then sign with e.g. an offline %1 wallet, or a PSBT-compatible hardware wallet.\").arg(PACKAGE_NAME));\n     } else {\n         question_string.append(tr(\"Please, review your transaction.\"));\n@@ -376,11 +377,11 @@ void SendCoinsDialog::on_sendButton_clicked()\n         return;\n \n     QString question_string, informative_text, detailed_text;\n-    if (!PrepareSendText(question_string, informative_text, detailed_text)) return;\n+    if (!PrepareSendText(question_string, informative_text, detailed_text, false /* make_psbt */)) return;\n     assert(m_current_transaction);\n \n-    const QString confirmation = model->wallet().privateKeysDisabled() ? tr(\"Confirm transaction proposal\") : tr(\"Confirm send coins\");\n-    const QString confirmButtonText = model->wallet().privateKeysDisabled() ? tr(\"Create Unsigned\") : tr(\"Send\");\n+    const QString confirmation = tr(\"Confirm send coins\");\n+    const QString confirmButtonText = tr(\"Send\");\n     SendConfirmationDialog confirmationDialog(confirmation, question_string, informative_text, detailed_text, SEND_CONFIRM_DELAY, confirmButtonText, this);\n     confirmationDialog.exec();\n     QMessageBox::StandardButton retval = static_cast<QMessageBox::StandardButton>(confirmationDialog.result());\n@@ -391,68 +392,13 @@ void SendCoinsDialog::on_sendButton_clicked()\n         return;\n     }\n \n-    bool send_failure = false;\n-    if (model->wallet().privateKeysDisabled()) {\n-        CMutableTransaction mtx = CMutableTransaction{*(m_current_transaction->getWtx())};\n-        PartiallySignedTransaction psbtx(mtx);\n-        bool complete = false;\n-        const TransactionError err = model->wallet().fillPSBT(SIGHASH_ALL, false /* sign */, true /* bip32derivs */, psbtx, complete);\n-        assert(!complete);\n-        assert(err == TransactionError::OK);\n-        // Serialize the PSBT\n-        CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n-        ssTx << psbtx;\n-        GUIUtil::setClipboard(EncodeBase64(ssTx.str()).c_str());\n-        QMessageBox msgBox;\n-        msgBox.setText(\"Unsigned Transaction\");\n-        msgBox.setInformativeText(\"The PSBT has been copied to the clipboard. You can also save it.\");\n-        msgBox.setStandardButtons(QMessageBox::Save | QMessageBox::Discard);\n-        msgBox.setDefaultButton(QMessageBox::Discard);\n-        switch (msgBox.exec()) {\n-        case QMessageBox::Save: {\n-            QString selectedFilter;\n-            QString fileNameSuggestion = \"\";\n-            bool first = true;\n-            for (const SendCoinsRecipient &rcp : m_current_transaction->getRecipients()) {\n-                if (!first) {\n-                    fileNameSuggestion.append(\" - \");\n-                }\n-                QString labelOrAddress = rcp.label.isEmpty() ? rcp.address : rcp.label;\n-                QString amount = BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(), rcp.amount);\n-                fileNameSuggestion.append(labelOrAddress + \"-\" + amount);\n-                first = false;\n-            }\n-            fileNameSuggestion.append(\".psbt\");\n-            QString filename = GUIUtil::getSaveFileName(this,\n-                tr(\"Save Transaction Data\"), fileNameSuggestion,\n-                tr(\"Partially Signed Transaction (Binary) (*.psbt)\"), &selectedFilter);\n-            if (filename.isEmpty()) {\n-                return;\n-            }\n-            std::ofstream out(filename.toLocal8Bit().data());\n-            out << ssTx.str();\n-            out.close();\n-            Q_EMIT message(tr(\"PSBT saved\"), \"PSBT saved to disk\", CClientUIInterface::MSG_INFORMATION);\n-            break;\n-        }\n-        case QMessageBox::Discard:\n-            break;\n-        default:\n-            assert(false);\n-        }\n-    } else {\n-        // now send the prepared transaction\n-        WalletModel::SendCoinsReturn sendStatus = model->sendCoins(*m_current_transaction);\n-        // process sendStatus and on error generate message shown to user\n-        processSendCoinsReturn(sendStatus);\n+    // now send the prepared transaction\n+    WalletModel::SendCoinsReturn sendStatus = model->sendCoins(*m_current_transaction);\n+    // process sendStatus and on error generate message shown to user\n+    processSendCoinsReturn(sendStatus);\n \n-        if (sendStatus.status == WalletModel::OK) {\n-            Q_EMIT coinsSent(m_current_transaction->getWtx()->GetHash());\n-        } else {\n-            send_failure = true;\n-        }\n-    }\n-    if (!send_failure) {\n+    if (sendStatus.status == WalletModel::OK) {\n+        Q_EMIT coinsSent(m_current_transaction->getWtx()->GetHash());\n         accept();\n         CoinControlDialog::coinControl()->UnSelectAll();\n         coinControlUpdateLabels();\n@@ -461,6 +407,81 @@ void SendCoinsDialog::on_sendButton_clicked()\n     m_current_transaction.reset();\n }\n \n+void SendCoinsDialog::on_makeUnsignedButton_clicked()\n+{\n+    if(!model || !model->getOptionsModel())\n+        return;\n+\n+    QString question_string, informative_text, detailed_text;\n+    if (!PrepareSendText(question_string, informative_text, detailed_text, true /* make psbt */)) return;\n+    assert(m_current_transaction);\n+\n+    const QString confirmation = tr(\"Confirm transaction proposal\");\n+    const QString confirmButtonText = tr(\"Create Unsigned\");\n+    SendConfirmationDialog confirmationDialog(confirmation, question_string, informative_text, detailed_text, SEND_CONFIRM_DELAY, confirmButtonText, this);\n+    confirmationDialog.exec();\n+    QMessageBox::StandardButton retval = static_cast<QMessageBox::StandardButton>(confirmationDialog.result());\n+\n+    if(retval != QMessageBox::Yes)\n+    {\n+        fNewRecipientAllowed = true;\n+        return;\n+    }\n+\n+    CMutableTransaction mtx = CMutableTransaction{*(m_current_transaction->getWtx())};\n+    PartiallySignedTransaction psbtx(mtx);\n+    bool complete = false;\n+    const TransactionError err = model->wallet().fillPSBT(SIGHASH_ALL, false /* sign */, true /* bip32derivs */, psbtx, complete);\n+    assert(!complete);\n+    assert(err == TransactionError::OK);\n+    // Serialize the PSBT\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << psbtx;\n+    GUIUtil::setClipboard(EncodeBase64(ssTx.str()).c_str());\n+    QMessageBox msgBox;\n+    msgBox.setText(\"Unsigned Transaction\");\n+    msgBox.setInformativeText(\"The PSBT has been copied to the clipboard. You can also save it.\");\n+    msgBox.setStandardButtons(QMessageBox::Save | QMessageBox::Discard);\n+    msgBox.setDefaultButton(QMessageBox::Discard);\n+    switch (msgBox.exec()) {\n+    case QMessageBox::Save: {\n+        QString selectedFilter;\n+        QString fileNameSuggestion = \"\";\n+        bool first = true;\n+        for (const SendCoinsRecipient &rcp : m_current_transaction->getRecipients()) {\n+            if (!first) {\n+                fileNameSuggestion.append(\" - \");\n+            }\n+            QString labelOrAddress = rcp.label.isEmpty() ? rcp.address : rcp.label;\n+            QString amount = BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(), rcp.amount);\n+            fileNameSuggestion.append(labelOrAddress + \"-\" + amount);\n+            first = false;\n+        }\n+        fileNameSuggestion.append(\".psbt\");\n+        QString filename = GUIUtil::getSaveFileName(this,\n+            tr(\"Save Transaction Data\"), fileNameSuggestion,\n+            tr(\"Partially Signed Transaction (Binary) (*.psbt)\"), &selectedFilter);\n+        if (filename.isEmpty()) {\n+            return;\n+        }\n+        std::ofstream out(filename.toLocal8Bit().data());\n+        out << ssTx.str();\n+        out.close();\n+        Q_EMIT message(tr(\"PSBT saved\"), \"PSBT saved to disk\", CClientUIInterface::MSG_INFORMATION);\n+        break;\n+    }\n+    case QMessageBox::Discard:\n+        break;\n+    default:\n+        assert(false);\n+    }\n+    accept();\n+    CoinControlDialog::coinControl()->UnSelectAll();\n+    coinControlUpdateLabels();\n+    fNewRecipientAllowed = true;\n+    m_current_transaction.reset();\n+}\n+\n void SendCoinsDialog::clear()\n {\n     m_current_transaction.reset();\n@@ -544,7 +565,8 @@ QWidget *SendCoinsDialog::setupTabChain(QWidget *prev)\n         }\n     }\n     QWidget::setTabOrder(prev, ui->sendButton);\n-    QWidget::setTabOrder(ui->sendButton, ui->clearButton);\n+    QWidget::setTabOrder(ui->sendButton, ui->makeUnsignedButton);\n+    QWidget::setTabOrder(ui->makeUnsignedButton, ui->clearButton);\n     QWidget::setTabOrder(ui->clearButton, ui->addButton);\n     return ui->addButton;\n }"
      },
      {
        "sha": "70d252c62eafc4040efbc7ae8d33a55e13a2f22e",
        "filename": "src/qt/sendcoinsdialog.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27d6ada6eb880c102a8738ef79d6ccbb5bb0fdba/src/qt/sendcoinsdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27d6ada6eb880c102a8738ef79d6ccbb5bb0fdba/src/qt/sendcoinsdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.h?ref=27d6ada6eb880c102a8738ef79d6ccbb5bb0fdba",
        "patch": "@@ -71,13 +71,14 @@ public Q_SLOTS:\n     void processSendCoinsReturn(const WalletModel::SendCoinsReturn &sendCoinsReturn, const QString &msgArg = QString());\n     void minimizeFeeSection(bool fMinimize);\n     // Format confirmation message\n-    bool PrepareSendText(QString& question_string, QString& informative_text, QString& detailed_text);\n+    bool PrepareSendText(QString& question_string, QString& informative_text, QString& detailed_text, bool make_psbt);\n     void updateFeeMinimizedLabel();\n     // Update the passed in CCoinControl with state from the GUI\n     void updateCoinControlState(CCoinControl& ctrl);\n \n private Q_SLOTS:\n     void on_sendButton_clicked();\n+    void on_makeUnsignedButton_clicked();\n     void on_buttonChooseFee_clicked();\n     void on_buttonMinimizeFee_clicked();\n     void removeEntry(SendCoinsEntry* entry);"
      },
      {
        "sha": "2098eecccd8b606186f8ca679bdc567d67f9447c",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27d6ada6eb880c102a8738ef79d6ccbb5bb0fdba/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27d6ada6eb880c102a8738ef79d6ccbb5bb0fdba/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=27d6ada6eb880c102a8738ef79d6ccbb5bb0fdba",
        "patch": "@@ -131,7 +131,7 @@ bool WalletModel::validateAddress(const QString &address)\n     return IsValidDestinationString(address.toStdString());\n }\n \n-WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransaction &transaction, const CCoinControl& coinControl)\n+WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransaction &transaction, const CCoinControl& coinControl, bool sign)\n {\n     CAmount total = 0;\n     bool fSubtractFeeFromAmount = false;\n@@ -188,7 +188,7 @@ WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransact\n         std::string strFailReason;\n \n         auto& newTx = transaction.getWtx();\n-        newTx = m_wallet->createTransaction(vecSend, coinControl, !wallet().privateKeysDisabled() /* sign */, nChangePosRet, nFeeRequired, strFailReason);\n+        newTx = m_wallet->createTransaction(vecSend, coinControl, sign, nChangePosRet, nFeeRequired, strFailReason);\n         transaction.setTransactionFee(nFeeRequired);\n         if (fSubtractFeeFromAmount && newTx)\n             transaction.reassignAmounts(nChangePosRet);"
      },
      {
        "sha": "3849d1344899d78c31d2e3a305ac743cf3f94193",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27d6ada6eb880c102a8738ef79d6ccbb5bb0fdba/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27d6ada6eb880c102a8738ef79d6ccbb5bb0fdba/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=27d6ada6eb880c102a8738ef79d6ccbb5bb0fdba",
        "patch": "@@ -99,7 +99,7 @@ class WalletModel : public QObject\n     };\n \n     // prepare transaction for getting txfee before sending coins\n-    SendCoinsReturn prepareTransaction(WalletModelTransaction &transaction, const CCoinControl& coinControl);\n+    SendCoinsReturn prepareTransaction(WalletModelTransaction &transaction, const CCoinControl& coinControl, bool sign);\n \n     // Send coins to a list of recipients\n     SendCoinsReturn sendCoins(WalletModelTransaction &transaction);"
      }
    ]
  },
  {
    "sha": "b916e088ae1d435ff7114f201c953433b02a821d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiOTE2ZTA4OGFlMWQ0MzVmZjcxMTRmMjAxYzk1MzQzM2IwMmE4MjFk",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-13T19:47:26Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-13T19:50:18Z"
      },
      "message": "Add bumpFeePSBT action instead of changing normal bumpfee behavior\n\nInstead of changing GUI bumpfee behavior based on private keys,\nmake a separate menu action to do that.",
      "tree": {
        "sha": "dfc646c76448471aa767324329b87f6f5a393a7b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dfc646c76448471aa767324329b87f6f5a393a7b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b916e088ae1d435ff7114f201c953433b02a821d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b916e088ae1d435ff7114f201c953433b02a821d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b916e088ae1d435ff7114f201c953433b02a821d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b916e088ae1d435ff7114f201c953433b02a821d/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "27d6ada6eb880c102a8738ef79d6ccbb5bb0fdba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27d6ada6eb880c102a8738ef79d6ccbb5bb0fdba",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/27d6ada6eb880c102a8738ef79d6ccbb5bb0fdba"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 20,
      "deletions": 9
    },
    "files": [
      {
        "sha": "fd5bd36b920cfbbf638e864fd857c0f76abd455b",
        "filename": "src/qt/transactionview.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 4,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b916e088ae1d435ff7114f201c953433b02a821d/src/qt/transactionview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b916e088ae1d435ff7114f201c953433b02a821d/src/qt/transactionview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionview.cpp?ref=b916e088ae1d435ff7114f201c953433b02a821d",
        "patch": "@@ -37,7 +37,7 @@\n \n TransactionView::TransactionView(const PlatformStyle *platformStyle, QWidget *parent) :\n     QWidget(parent), model(nullptr), transactionProxyModel(nullptr),\n-    transactionView(nullptr), abandonAction(nullptr), bumpFeeAction(nullptr), columnResizingFixer(nullptr)\n+    transactionView(nullptr), abandonAction(nullptr), bumpFeeAction(nullptr), bumpFeePSBTAction(nullptr), columnResizingFixer(nullptr)\n {\n     // Build filter row\n     setContentsMargins(0,0,0,0);\n@@ -152,6 +152,8 @@ TransactionView::TransactionView(const PlatformStyle *platformStyle, QWidget *pa\n     abandonAction = new QAction(tr(\"Abandon transaction\"), this);\n     bumpFeeAction = new QAction(tr(\"Increase transaction fee\"), this);\n     bumpFeeAction->setObjectName(\"bumpFeeAction\");\n+    bumpFeePSBTAction = new QAction(tr(\"Increase transaction fee (make PSBT)\"), this);\n+    bumpFeePSBTAction->setObjectName(\"bumpFeePSBTAction\");\n     QAction *copyAddressAction = new QAction(tr(\"Copy address\"), this);\n     QAction *copyLabelAction = new QAction(tr(\"Copy label\"), this);\n     QAction *copyAmountAction = new QAction(tr(\"Copy amount\"), this);\n@@ -172,6 +174,7 @@ TransactionView::TransactionView(const PlatformStyle *platformStyle, QWidget *pa\n     contextMenu->addAction(showDetailsAction);\n     contextMenu->addSeparator();\n     contextMenu->addAction(bumpFeeAction);\n+    contextMenu->addAction(bumpFeePSBTAction);\n     contextMenu->addAction(abandonAction);\n     contextMenu->addAction(editLabelAction);\n \n@@ -187,6 +190,7 @@ TransactionView::TransactionView(const PlatformStyle *platformStyle, QWidget *pa\n     connect(view, &QTableView::customContextMenuRequested, this, &TransactionView::contextualMenu);\n \n     connect(bumpFeeAction, &QAction::triggered, this, &TransactionView::bumpFee);\n+    connect(bumpFeePSBTAction, &QAction::triggered, this, &TransactionView::bumpFeePSBT);\n     connect(abandonAction, &QAction::triggered, this, &TransactionView::abandonTx);\n     connect(copyAddressAction, &QAction::triggered, this, &TransactionView::copyAddress);\n     connect(copyLabelAction, &QAction::triggered, this, &TransactionView::copyLabel);\n@@ -394,7 +398,8 @@ void TransactionView::contextualMenu(const QPoint &point)\n     uint256 hash;\n     hash.SetHex(selection.at(0).data(TransactionTableModel::TxHashRole).toString().toStdString());\n     abandonAction->setEnabled(model->wallet().transactionCanBeAbandoned(hash));\n-    bumpFeeAction->setEnabled(model->wallet().transactionCanBeBumped(hash));\n+    bumpFeeAction->setEnabled(model->wallet().transactionCanBeBumped(hash) && !model->wallet().privateKeysDisabled());\n+    bumpFeePSBTAction->setEnabled(model->wallet().transactionCanBeBumped(hash));\n \n     if(index.isValid())\n     {\n@@ -420,7 +425,7 @@ void TransactionView::abandonTx()\n     model->getTransactionTableModel()->updateTransaction(hashQStr, CT_UPDATED, false);\n }\n \n-void TransactionView::bumpFee()\n+void TransactionView::bumpFee(bool make_psbt)\n {\n     if(!transactionView || !transactionView->selectionModel())\n         return;\n@@ -433,7 +438,7 @@ void TransactionView::bumpFee()\n \n     // Bump tx fee over the walletModel\n     uint256 newHash;\n-    if (model->bumpFee(hash, newHash)) {\n+    if (model->bumpFee(hash, newHash, make_psbt)) {\n         // Update the table\n         transactionView->selectionModel()->clearSelection();\n         model->getTransactionTableModel()->updateTransaction(hashQStr, CT_UPDATED, true);\n@@ -443,6 +448,12 @@ void TransactionView::bumpFee()\n     }\n }\n \n+\n+void TransactionView::bumpFeePSBT()\n+{\n+    bumpFee(true);\n+}\n+\n void TransactionView::copyAddress()\n {\n     GUIUtil::copyEntryData(transactionView, 0, TransactionTableModel::AddressRole);"
      },
      {
        "sha": "68ff83ffcec47f70f26e070d4d4990088a646383",
        "filename": "src/qt/transactionview.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b916e088ae1d435ff7114f201c953433b02a821d/src/qt/transactionview.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b916e088ae1d435ff7114f201c953433b02a821d/src/qt/transactionview.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionview.h?ref=b916e088ae1d435ff7114f201c953433b02a821d",
        "patch": "@@ -77,6 +77,7 @@ class TransactionView : public QWidget\n     QDateTimeEdit *dateTo;\n     QAction *abandonAction;\n     QAction *bumpFeeAction;\n+    QAction *bumpFeePSBTAction;\n \n     QWidget *createDateRangeWidget();\n \n@@ -100,7 +101,8 @@ private Q_SLOTS:\n     void openThirdPartyTxUrl(QString url);\n     void updateWatchOnlyColumn(bool fHaveWatchOnly);\n     void abandonTx();\n-    void bumpFee();\n+    void bumpFee(bool make_psbt = false);\n+    void bumpFeePSBT();\n \n Q_SIGNALS:\n     void doubleClicked(const QModelIndex&);"
      },
      {
        "sha": "7bf5896aa7f85ab1c7ca688d9486037d34002bb4",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b916e088ae1d435ff7114f201c953433b02a821d/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b916e088ae1d435ff7114f201c953433b02a821d/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=b916e088ae1d435ff7114f201c953433b02a821d",
        "patch": "@@ -478,7 +478,7 @@ bool WalletModel::saveReceiveRequest(const std::string &sAddress, const int64_t\n         return m_wallet->addDestData(dest, key, sRequest);\n }\n \n-bool WalletModel::bumpFee(uint256 hash, uint256& new_hash)\n+bool WalletModel::bumpFee(uint256 hash, uint256& new_hash, bool create_psbt)\n {\n     CCoinControl coin_control;\n     coin_control.m_signal_bip125_rbf = true;\n@@ -492,8 +492,6 @@ bool WalletModel::bumpFee(uint256 hash, uint256& new_hash)\n          return false;\n     }\n \n-    const bool create_psbt = m_wallet->privateKeysDisabled();\n-\n     // allow a user based fee verification\n     QString questionString = create_psbt ? tr(\"Do you want to draft a transaction with fee increase?\") : tr(\"Do you want to increase the fee?\");\n     questionString.append(\"<br />\");"
      },
      {
        "sha": "724fe06d4f7424b1c8430827ed6cc80b812ba42a",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b916e088ae1d435ff7114f201c953433b02a821d/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b916e088ae1d435ff7114f201c953433b02a821d/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=b916e088ae1d435ff7114f201c953433b02a821d",
        "patch": "@@ -138,7 +138,7 @@ class WalletModel : public QObject\n     void loadReceiveRequests(std::vector<std::string>& vReceiveRequests);\n     bool saveReceiveRequest(const std::string &sAddress, const int64_t nId, const std::string &sRequest);\n \n-    bool bumpFee(uint256 hash, uint256& new_hash);\n+    bool bumpFee(uint256 hash, uint256& new_hash, bool make_psbt);\n \n     static bool isWalletEnabled();\n "
      }
    ]
  },
  {
    "sha": "55436f3cc20eb78511a3d680305dd0570652509f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NTQzNmYzY2MyMGViNzg1MTFhM2Q2ODAzMDVkZDA1NzA2NTI1MDlm",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-13T20:28:51Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-14T21:17:52Z"
      },
      "message": "Hide bumpfee's psbt creation behavior behind -deprecatedrpc\n\nWith psbtbumpfee, we can deprecate bumpfee's psbt creation behavior.\nSo put that behind a -deprecatedrpc",
      "tree": {
        "sha": "193c3656d99dd7a0622d6bc92657581de8553459",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/193c3656d99dd7a0622d6bc92657581de8553459"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/55436f3cc20eb78511a3d680305dd0570652509f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/55436f3cc20eb78511a3d680305dd0570652509f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/55436f3cc20eb78511a3d680305dd0570652509f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/55436f3cc20eb78511a3d680305dd0570652509f/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b916e088ae1d435ff7114f201c953433b02a821d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b916e088ae1d435ff7114f201c953433b02a821d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b916e088ae1d435ff7114f201c953433b02a821d"
      }
    ],
    "stats": {
      "total": 41,
      "additions": 38,
      "deletions": 3
    },
    "files": [
      {
        "sha": "167d11c904a21d5708c50dfc0af7f41968199d1f",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55436f3cc20eb78511a3d680305dd0570652509f/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55436f3cc20eb78511a3d680305dd0570652509f/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=55436f3cc20eb78511a3d680305dd0570652509f",
        "patch": "@@ -3464,6 +3464,10 @@ static UniValue bumpfee(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n+    if (!pwallet->chain().rpcEnableDeprecated(\"bumpfee\") && pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n+        throw JSONRPCError(RPC_METHOD_DEPRECATED, \"Using bumpfee with wallets that have private keys disabled is deprecated. Use psbtbumpfee instead or restart bitcoind with -deprecatedrpc=bumpfee. This functionality will be removed in 0.22\");\n+    }\n+\n     RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VOBJ});\n     uint256 hash(ParseHashV(request.params[0], \"txid\"));\n     CAmount old_fee;"
      },
      {
        "sha": "b71854d2341dc26f41bc5be9b6b1e22ce356f134",
        "filename": "test/functional/rpc_deprecated.py",
        "status": "modified",
        "additions": 34,
        "deletions": 3,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55436f3cc20eb78511a3d680305dd0570652509f/test/functional/rpc_deprecated.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55436f3cc20eb78511a3d680305dd0570652509f/test/functional/rpc_deprecated.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_deprecated.py?ref=55436f3cc20eb78511a3d680305dd0570652509f",
        "patch": "@@ -4,13 +4,13 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test deprecation of RPC calls.\"\"\"\n from test_framework.test_framework import BitcoinTestFramework\n-# from test_framework.util import assert_raises_rpc_error\n+from test_framework.util import assert_raises_rpc_error, find_vout_for_address\n \n class DeprecatedRpcTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n         self.setup_clean_chain = True\n-        self.extra_args = [[], []]\n+        self.extra_args = [[], ['-deprecatedrpc=bumpfee']]\n \n     def run_test(self):\n         # This test should be used to verify correct behaviour of deprecated\n@@ -23,7 +23,38 @@ def run_test(self):\n         # self.log.info(\"Test generate RPC\")\n         # assert_raises_rpc_error(-32, 'The wallet generate rpc method is deprecated', self.nodes[0].rpc.generate, 1)\n         # self.nodes[1].generate(1)\n-        self.log.info(\"No tested deprecated RPC methods\")\n+\n+        if self.is_wallet_compiled():\n+            self.log.info(\"Test bumpfee RPC\")\n+            self.nodes[0].generate(101)\n+            self.nodes[0].createwallet(wallet_name='nopriv', disable_private_keys=True)\n+            noprivs0 = self.nodes[0].get_wallet_rpc('nopriv')\n+            w0 = self.nodes[0].get_wallet_rpc('')\n+            self.nodes[1].createwallet(wallet_name='nopriv', disable_private_keys=True)\n+            noprivs1 = self.nodes[1].get_wallet_rpc('nopriv')\n+\n+            address = w0.getnewaddress()\n+            desc = w0.getaddressinfo(address)['desc']\n+            change_addr = w0.getrawchangeaddress()\n+            change_desc = w0.getaddressinfo(change_addr)['desc']\n+            txid = w0.sendtoaddress(address=address, amount=10)\n+            vout = find_vout_for_address(w0, txid, address)\n+            self.nodes[0].generate(1)\n+            rawtx = w0.createrawtransaction([{'txid': txid, 'vout': vout}], {w0.getnewaddress(): 5}, 0, True)\n+            rawtx = w0.fundrawtransaction(rawtx, {'changeAddress': change_addr})\n+            signed_tx = w0.signrawtransactionwithwallet(rawtx['hex'])['hex']\n+\n+            noprivs0.importmulti([{'desc': desc, 'timestamp': 0}, {'desc': change_desc, 'timestamp': 0, 'internal': True}])\n+            noprivs1.importmulti([{'desc': desc, 'timestamp': 0}, {'desc': change_desc, 'timestamp': 0, 'internal': True}])\n+\n+            txid = w0.sendrawtransaction(signed_tx)\n+            self.sync_all()\n+\n+            assert_raises_rpc_error(-32, 'Using bumpfee with wallets that have private keys disabled is deprecated. Use psbtbumpfee instead or restart bitcoind with -deprecatedrpc=bumpfee. This functionality will be removed in 0.22', noprivs0.bumpfee, txid)\n+            bumped_psbt = noprivs1.bumpfee(txid)\n+            assert 'psbt' in bumped_psbt\n+        else:\n+            self.log.info(\"No tested deprecated RPC methods\")\n \n if __name__ == '__main__':\n     DeprecatedRpcTest().main()"
      }
    ]
  }
]