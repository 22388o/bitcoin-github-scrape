[
  {
    "sha": "3c42fa6bf85c1c5d4c6c8406eeb8b88015feae09",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYzQyZmE2YmY4NWMxYzVkNGM2Yzg0MDZlZWI4Yjg4MDE1ZmVhZTA5",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-03-22T18:55:23Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-03-22T19:54:36Z"
      },
      "message": "Stop and start bitcoind nodes asynchronously in functional tests",
      "tree": {
        "sha": "5301fde322b2f9f09d8cace5a6cd62c5c123cb66",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5301fde322b2f9f09d8cace5a6cd62c5c123cb66"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3c42fa6bf85c1c5d4c6c8406eeb8b88015feae09",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c42fa6bf85c1c5d4c6c8406eeb8b88015feae09",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3c42fa6bf85c1c5d4c6c8406eeb8b88015feae09",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c42fa6bf85c1c5d4c6c8406eeb8b88015feae09/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "02d64bd929c9663ba38e96721c6dbd89972d043d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02d64bd929c9663ba38e96721c6dbd89972d043d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/02d64bd929c9663ba38e96721c6dbd89972d043d"
      }
    ],
    "stats": {
      "total": 106,
      "additions": 77,
      "deletions": 29
    },
    "files": [
      {
        "sha": "454b37123805c3d3a6a13fbc7787a0c8ff670802",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 77,
        "deletions": 29,
        "changes": 106,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c42fa6bf85c1c5d4c6c8406eeb8b88015feae09/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c42fa6bf85c1c5d4c6c8406eeb8b88015feae09/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=3c42fa6bf85c1c5d4c6c8406eeb8b88015feae09",
        "patch": "@@ -4,6 +4,7 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Helpful routines for regression testing.\"\"\"\n \n+import asyncio\n import os\n import sys\n \n@@ -307,26 +308,63 @@ def initialize_chain_clean(test_dir, num_nodes):\n     for i in range(num_nodes):\n         datadir=initialize_datadir(test_dir, i)\n \n+def start_nodes(num_nodes, dirname, extra_args=None, rpchost=None, timewait=None, binary=None):\n+    \"\"\"Start multiple bitcoinds and return RPC connections to them.\n+\n+    This function uses an asyncio event loop to start the bitcoind nodes in parallel to speed\n+    up test execution.\"\"\"\n+    if extra_args is None: extra_args = [ None for _ in range(num_nodes) ]\n+    if binary is None: binary = [ None for _ in range(num_nodes) ]\n+    rpcs = []\n+    if num_nodes > 0:\n+        try:\n+            loop = asyncio.get_event_loop()\n+            tasks = [asyncio.ensure_future(start_node_async(i, dirname, extra_args[i], rpchost, timewait=timewait, binary=binary[i])) for i in range(num_nodes)]\n+            loop.run_until_complete(asyncio.wait(tasks))\n+            rpcs = [task.result() for task in tasks]\n+        except: # If one node failed to start, stop the others\n+            stop_nodes(rpcs)\n+            raise\n+    return rpcs\n \n def start_node(i, dirname, extra_args=None, rpchost=None, timewait=None, binary=None, stderr=None):\n-    \"\"\"\n-    Start a bitcoind and return RPC connection to it\n-    \"\"\"\n+    \"\"\"Start a single bitcoind node and return an RPC connection to it.\"\"\"\n+    loop = asyncio.get_event_loop()\n+    task = asyncio.ensure_future(start_node_async(i, dirname, extra_args, rpchost, timewait, binary, stderr))\n+    loop.run_until_complete(task)\n+    return task.result()\n+\n+async def start_node_async(i, dirname, extra_args=None, rpchost=None, timewait=None, binary=None, stderr=None):\n+    \"\"\"An asynchronous co-routine that starts a bitcoind node and returns an RPC connection to it.\"\"\"\n     datadir = os.path.join(dirname, \"node\"+str(i))\n     if binary is None:\n         binary = os.getenv(\"BITCOIND\", \"bitcoind\")\n     args = [ binary, \"-datadir=\"+datadir, \"-server\", \"-keypool=1\", \"-discover=0\", \"-rest\", \"-logtimemicros\", \"-debug\", \"-mocktime=\"+str(get_mocktime()) ]\n     if extra_args is not None: args.extend(extra_args)\n     bitcoind_processes[i] = subprocess.Popen(args, stderr=stderr)\n-    logger.debug(\"initialize_chain: bitcoind started, waiting for RPC to come up\")\n+    logger.debug(\"initialize_chain: bitcoind %d started, waiting for RPC to come up\" % i)\n     url = rpc_url(i, rpchost)\n-    wait_for_bitcoind_start(bitcoind_processes[i], url, i)\n-    logger.debug(\"initialize_chain: RPC successfully started\")\n+\n+    while True:\n+        if bitcoind_processes[i].poll() is not None:\n+            raise Exception('bitcoind exited with status %i during initialization' % bitcoind_processes[i].returncode)\n+        try:\n+            rpc = get_rpc_proxy(url, i)\n+            block = rpc.getblockcount()\n+            break  # break out of loop on success\n+        except IOError as e:\n+            if e.errno != errno.ECONNREFUSED:  # Port not yet open?\n+                raise  # unknown IO error\n+        except JSONRPCException as e:  # Initialization phase\n+            if e.error['code'] != -28:  # RPC in warmup?\n+                raise  # unknown JSON RPC exception\n+        await asyncio.sleep(0.25)\n     proxy = get_rpc_proxy(url, i, timeout=timewait)\n \n     if COVERAGE_DIR:\n         coverage.write_all_rpc_commands(COVERAGE_DIR, proxy)\n \n+    logger.debug(\"initialize_chain: bitcoind %d startup complete.\" % i)\n     return proxy\n \n def assert_start_raises_init_error(i, dirname, extra_args=None, expected_msg=None):\n@@ -348,38 +386,48 @@ def assert_start_raises_init_error(i, dirname, extra_args=None, expected_msg=Non\n                 assert_msg = \"bitcoind should have exited with expected error \" + expected_msg\n             raise AssertionError(assert_msg)\n \n-def start_nodes(num_nodes, dirname, extra_args=None, rpchost=None, timewait=None, binary=None):\n-    \"\"\"\n-    Start multiple bitcoinds, return RPC connections to them\n-    \"\"\"\n-    if extra_args is None: extra_args = [ None for _ in range(num_nodes) ]\n-    if binary is None: binary = [ None for _ in range(num_nodes) ]\n-    rpcs = []\n-    try:\n-        for i in range(num_nodes):\n-            rpcs.append(start_node(i, dirname, extra_args[i], rpchost, timewait=timewait, binary=binary[i]))\n-    except: # If one node failed to start, stop the others\n-        stop_nodes(rpcs)\n-        raise\n-    return rpcs\n-\n def log_filename(dirname, n_node, logname):\n     return os.path.join(dirname, \"node\"+str(n_node), \"regtest\", logname)\n \n+def stop_nodes(nodes):\n+    \"\"\"Stop bitcoin nodes and assert that all connections have closed.\n+    \n+    This function uses an asyncio event loop to stop the nodes in parallel to speen up test execution.\"\"\"\n+    if len(nodes) > 0:\n+        loop = asyncio.get_event_loop()\n+        tasks = [asyncio.ensure_future(stop_node_async(node, i)) for i, node in enumerate(nodes)]\n+        loop.run_until_complete(asyncio.wait(tasks))\n+        assert not bitcoind_processes.values()  # All connections must be gone now\n+\n def stop_node(node, i):\n+    \"\"\"Stop an individual bitcoind node.\"\"\"\n+    loop = asyncio.get_event_loop()\n+    task = asyncio.ensure_future(stop_node_async(node, i))\n+    loop.run_until_complete(task)\n+\n+async def stop_node_async(node, i):\n+    \"\"\"An asynchronous co-routine that stops a bitcoind node.\"\"\"\n     logger.debug(\"Stopping node %d\" % i)\n     try:\n         node.stop()\n     except http.client.CannotSendRequest as e:\n         logger.exception(\"Unable to stop node\")\n-    return_code = bitcoind_processes[i].wait(timeout=BITCOIND_PROC_WAIT_TIMEOUT)\n-    assert_equal(return_code, 0)\n-    del bitcoind_processes[i]\n-\n-def stop_nodes(nodes):\n-    for i, node in enumerate(nodes):\n-        stop_node(node, i)\n-    assert not bitcoind_processes.values() # All connections must be gone now\n+    timeout = BITCOIND_PROC_WAIT_TIMEOUT\n+    while True:\n+        if timeout < 0:\n+            logger.error(\"Node %d failed to stop\" % i)\n+            assert False\n+        return_code = bitcoind_processes[i].poll()\n+        if return_code == 0:\n+            logger.debug(\"Node %d stopped\" % i)\n+            del bitcoind_processes[i]\n+            break\n+        elif return_code is None:\n+            await asyncio.sleep(0.25)\n+            timeout -= 0.25\n+        else:\n+            logger.error(\"Node %d exited with exit code %d\" % (i, return_code))\n+            assert False\n \n def set_node_times(nodes, t):\n     for node in nodes:"
      }
    ]
  },
  {
    "sha": "7a27d9f5a98f2b85366d889d75102c5c28292188",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YTI3ZDlmNWE5OGYyYjg1MzY2ZDg4OWQ3NTEwMmM1YzI4MjkyMTg4",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-03-22T20:34:12Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-03-22T20:34:12Z"
      },
      "message": "Install python3.5 on travis",
      "tree": {
        "sha": "2ca094ebf7313f66c1fc538a5471d1dd0bb571c6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2ca094ebf7313f66c1fc538a5471d1dd0bb571c6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7a27d9f5a98f2b85366d889d75102c5c28292188",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a27d9f5a98f2b85366d889d75102c5c28292188",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7a27d9f5a98f2b85366d889d75102c5c28292188",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a27d9f5a98f2b85366d889d75102c5c28292188/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3c42fa6bf85c1c5d4c6c8406eeb8b88015feae09",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c42fa6bf85c1c5d4c6c8406eeb8b88015feae09",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3c42fa6bf85c1c5d4c6c8406eeb8b88015feae09"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "07a1897d6827acfc5654035a42033a377a270f55",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7a27d9f5a98f2b85366d889d75102c5c28292188/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7a27d9f5a98f2b85366d889d75102c5c28292188/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=7a27d9f5a98f2b85366d889d75102c5c28292188",
        "patch": "@@ -24,15 +24,15 @@ env:\n # ARM\n     - HOST=arm-linux-gnueabihf PACKAGES=\"g++-arm-linux-gnueabihf\" DEP_OPTS=\"NO_QT=1\" CHECK_DOC=1 GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports\"\n # Win32\n-    - HOST=i686-w64-mingw32 DPKG_ADD_ARCH=\"i386\" DEP_OPTS=\"NO_QT=1\" PACKAGES=\"python3 nsis g++-mingw-w64-i686 wine1.6 bc\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-reduce-exports\"\n+    - HOST=i686-w64-mingw32 DPKG_ADD_ARCH=\"i386\" DEP_OPTS=\"NO_QT=1\" PACKAGES=\"python3.5 nsis g++-mingw-w64-i686 wine1.6 bc\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-reduce-exports\"\n # 32-bit + dash\n-    - HOST=i686-pc-linux-gnu PACKAGES=\"g++-multilib bc python3-zmq\" DEP_OPTS=\"NO_QT=1\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-zmq --enable-glibc-back-compat --enable-reduce-exports LDFLAGS=-static-libstdc++\" USE_SHELL=\"/bin/dash\"\n+    - HOST=i686-pc-linux-gnu PACKAGES=\"g++-multilib bc python3.5 python3-zmq\" DEP_OPTS=\"NO_QT=1\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-zmq --enable-glibc-back-compat --enable-reduce-exports LDFLAGS=-static-libstdc++\" USE_SHELL=\"/bin/dash\"\n # Win64\n-    - HOST=x86_64-w64-mingw32 DPKG_ADD_ARCH=\"i386\" DEP_OPTS=\"NO_QT=1\" PACKAGES=\"python3 nsis g++-mingw-w64-x86-64 wine1.6 bc\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-reduce-exports\"\n+    - HOST=x86_64-w64-mingw32 DPKG_ADD_ARCH=\"i386\" DEP_OPTS=\"NO_QT=1\" PACKAGES=\"python3.5 nsis g++-mingw-w64-x86-64 wine1.6 bc\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-reduce-exports\"\n # bitcoind\n-    - HOST=x86_64-unknown-linux-gnu PACKAGES=\"bc python3-zmq\" DEP_OPTS=\"NO_QT=1 NO_UPNP=1 DEBUG=1\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-zmq --enable-glibc-back-compat --enable-reduce-exports CPPFLAGS=-DDEBUG_LOCKORDER\"\n+    - HOST=x86_64-unknown-linux-gnu PACKAGES=\"bc python3.5 python3-zmq\" DEP_OPTS=\"NO_QT=1 NO_UPNP=1 DEBUG=1\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-zmq --enable-glibc-back-compat --enable-reduce-exports CPPFLAGS=-DDEBUG_LOCKORDER\"\n # No wallet\n-    - HOST=x86_64-unknown-linux-gnu PACKAGES=\"python3 xvfb\" DEP_OPTS=\"NO_WALLET=1\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports\"\n+    - HOST=x86_64-unknown-linux-gnu PACKAGES=\"python3.5 xvfb\" DEP_OPTS=\"NO_WALLET=1\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports\"\n # Cross-Mac\n     - HOST=x86_64-apple-darwin11 PACKAGES=\"cmake imagemagick libcap-dev librsvg2-bin libz-dev libbz2-dev libtiff-tools python-dev\" BITCOIN_CONFIG=\"--enable-gui --enable-reduce-exports\" OSX_SDK=10.11 GOAL=\"deploy\"\n "
      }
    ]
  }
]