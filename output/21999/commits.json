[
  {
    "sha": "1332dbb526f19ebf96bf3fa7c147bacd1926f7ae",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMzMyZGJiNTI2ZjE5ZWJmOTZiZjNmYTdjMTQ3YmFjZDE5MjZmN2Fl",
    "commit": {
      "author": {
        "name": "Nigel Christian",
        "email": "nigel.l.christian@gmail.com",
        "date": "2021-05-19T21:15:17Z"
      },
      "committer": {
        "name": "reemuru",
        "email": "nigel.l.christian@gmail.com",
        "date": "2021-07-28T20:50:26Z"
      },
      "message": "test: Run mempool_updatefromblock even with wallet disabled\n\nEnables the mempool_updatefromblock non-wallet functional test\nto be run even with the Bitcoin Core wallet disabled by using\nthe new MiniWallet instead.\n\n- Refactoring and removal of unnecessary imports and arguments to\n  transaction_graph_test()\n- Improve logging\n- Decrease test execution time by ~70% (39s => 12s)",
      "tree": {
        "sha": "d1b9a36734ea8aa3488d9bdfdc90cbbe7814f68a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d1b9a36734ea8aa3488d9bdfdc90cbbe7814f68a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1332dbb526f19ebf96bf3fa7c147bacd1926f7ae",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQHQBAABCAA6FiEEEvV3iCl2rYva1b9uNdAXY2H1oSEFAmEBwxocHG5pZ2VsLmwu\nY2hyaXN0aWFuQGdtYWlsLmNvbQAKCRA10BdjYfWhIdCoC/45t6rA8kQ0z6k3Qvsu\nWO6Fr94JYcFf/Ia9jUxtZIiCwbalrTAT7lX1WEX6hlikaoWg5EVs3W9IJodc79Wl\nRcPCaPYHp7uMhLba+cmnBPYuDFnt/xgvuE+Ck9jtGAQh9Y3F6daZ+QnhlWqkQcFr\nxSWFkmriGTTygnfo1hGmJs29zHokz7Eijlri/yj27uRMe8ySaw82Tpi94G3WUzzW\ndGFj5OmifV9j88qR+UbtJWY19C2MJ2R6unlQCTy9me6jSRcx0y8s9jdqkg8DrI7l\nhuLFL7bGinpXQ86YFhk0HwuUXQP/cOSsxvd3k10FWCBIMFqt0yq0V2cL0XW2LS4Z\neMJNopnSEmT9fRUJfPUlJtGSI2iobImCWt12b9ZYEXRqHa/6+w2ZdqDLIgfsxLgD\nkUqDLj6Pi6QSeHc7vKbv19lfnDiC9TgB4dLKcRns1ASxZqks9oKp3mDWCl91ZUlX\nIbeZV5cJD0rQUaMOfmN6O1/pv5p6XriQMa49qgvJw3OjNFM=\n=awlB\n-----END PGP SIGNATURE-----",
        "payload": "tree d1b9a36734ea8aa3488d9bdfdc90cbbe7814f68a\nparent 7d19c85f4a27008cada169b7066f265a07f1ea77\nauthor Nigel Christian <nigel.l.christian@gmail.com> 1621458917 -0500\ncommitter reemuru <nigel.l.christian@gmail.com> 1627505426 -0400\n\ntest: Run mempool_updatefromblock even with wallet disabled\n\nEnables the mempool_updatefromblock non-wallet functional test\nto be run even with the Bitcoin Core wallet disabled by using\nthe new MiniWallet instead.\n\n- Refactoring and removal of unnecessary imports and arguments to\n  transaction_graph_test()\n- Improve logging\n- Decrease test execution time by ~70% (39s => 12s)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1332dbb526f19ebf96bf3fa7c147bacd1926f7ae",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1332dbb526f19ebf96bf3fa7c147bacd1926f7ae",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1332dbb526f19ebf96bf3fa7c147bacd1926f7ae/comments",
    "author": {
      "login": "reemuru",
      "id": 13033037,
      "node_id": "MDQ6VXNlcjEzMDMzMDM3",
      "avatar_url": "https://avatars.githubusercontent.com/u/13033037?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/reemuru",
      "html_url": "https://github.com/reemuru",
      "followers_url": "https://api.github.com/users/reemuru/followers",
      "following_url": "https://api.github.com/users/reemuru/following{/other_user}",
      "gists_url": "https://api.github.com/users/reemuru/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/reemuru/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/reemuru/subscriptions",
      "organizations_url": "https://api.github.com/users/reemuru/orgs",
      "repos_url": "https://api.github.com/users/reemuru/repos",
      "events_url": "https://api.github.com/users/reemuru/events{/privacy}",
      "received_events_url": "https://api.github.com/users/reemuru/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "reemuru",
      "id": 13033037,
      "node_id": "MDQ6VXNlcjEzMDMzMDM3",
      "avatar_url": "https://avatars.githubusercontent.com/u/13033037?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/reemuru",
      "html_url": "https://github.com/reemuru",
      "followers_url": "https://api.github.com/users/reemuru/followers",
      "following_url": "https://api.github.com/users/reemuru/following{/other_user}",
      "gists_url": "https://api.github.com/users/reemuru/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/reemuru/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/reemuru/subscriptions",
      "organizations_url": "https://api.github.com/users/reemuru/orgs",
      "repos_url": "https://api.github.com/users/reemuru/repos",
      "events_url": "https://api.github.com/users/reemuru/events{/privacy}",
      "received_events_url": "https://api.github.com/users/reemuru/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7d19c85f4a27008cada169b7066f265a07f1ea77",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7d19c85f4a27008cada169b7066f265a07f1ea77",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7d19c85f4a27008cada169b7066f265a07f1ea77"
      }
    ],
    "stats": {
      "total": 132,
      "additions": 52,
      "deletions": 80
    },
    "files": [
      {
        "sha": "d5aaf4d2bd9b52e8d3db1ae1eb46ebf96bd2d9b3",
        "filename": "test/functional/mempool_updatefromblock.py",
        "status": "modified",
        "additions": 52,
        "deletions": 80,
        "changes": 132,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1332dbb526f19ebf96bf3fa7c147bacd1926f7ae/test/functional/mempool_updatefromblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1332dbb526f19ebf96bf3fa7c147bacd1926f7ae/test/functional/mempool_updatefromblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_updatefromblock.py?ref=1332dbb526f19ebf96bf3fa7c147bacd1926f7ae",
        "patch": "@@ -9,20 +9,17 @@\n \"\"\"\n import time\n \n-from decimal import Decimal\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal\n+from test_framework.wallet import MiniWallet\n \n \n class MempoolUpdateFromBlockTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n         self.extra_args = [['-limitdescendantsize=1000', '-limitancestorsize=1000']]\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n-    def transaction_graph_test(self, size, n_tx_to_mine=None, start_input_txid='', end_address='', fee=Decimal(0.00100000)):\n+    def transaction_graph_test(self, size, n_tx_to_mine):\n         \"\"\"Create an acyclic tournament (a type of directed graph) of transactions and use it for testing.\n \n         Keyword arguments:\n@@ -36,87 +33,62 @@ def transaction_graph_test(self, size, n_tx_to_mine=None, start_input_txid='', e\n             - has K+1 ancestors (including this one)\n \n         More details: https://en.wikipedia.org/wiki/Tournament_(graph_theory)\n-        \"\"\"\n-\n-        if not start_input_txid:\n-            start_input_txid = self.nodes[0].getblock(self.nodes[0].getblockhash(1))['tx'][0]\n \n-        if not end_address:\n-            end_address = self.nodes[0].getnewaddress()\n+        Note: In order to maintain Miniwallet compatibility wallet.send_self_transfer()\n+        only explicitly sets one ancestor for each transaction to form something\n+        like a singly linked list of size number of transactions.\n+        The acyclic tournament is then formed by the mempool.\n+        \"\"\"\n \n-        first_block_hash = ''\n-        tx_id = []\n-        tx_size = []\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n         self.log.info('Creating {} transactions...'.format(size))\n-        for i in range(0, size):\n-            self.log.debug('Preparing transaction #{}...'.format(i))\n-            # Prepare inputs.\n-            if i == 0:\n-                inputs = [{'txid': start_input_txid, 'vout': 0}]\n-                inputs_value = self.nodes[0].gettxout(start_input_txid, 0)['value']\n-            else:\n-                inputs = []\n-                inputs_value = 0\n-                for j, tx in enumerate(tx_id[0:i]):\n-                    # Transaction tx[K] is a child of each of previous transactions tx[0]..tx[K-1] at their output K-1.\n-                    vout = i - j - 1\n-                    inputs.append({'txid': tx_id[j], 'vout': vout})\n-                    inputs_value += self.nodes[0].gettxout(tx, vout)['value']\n-\n-            self.log.debug('inputs={}'.format(inputs))\n-            self.log.debug('inputs_value={}'.format(inputs_value))\n-\n-            # Prepare outputs.\n-            tx_count = i + 1\n-            if tx_count < size:\n-                # Transaction tx[K] is an ancestor of each of subsequent transactions tx[K+1]..tx[N-1].\n-                n_outputs = size - tx_count\n-                output_value = ((inputs_value - fee) / Decimal(n_outputs)).quantize(Decimal('0.00000001'))\n-                outputs = {}\n-                for _ in range(n_outputs):\n-                    outputs[self.nodes[0].getnewaddress()] = output_value\n-            else:\n-                output_value = (inputs_value - fee).quantize(Decimal('0.00000001'))\n-                outputs = {end_address: output_value}\n-\n-            self.log.debug('output_value={}'.format(output_value))\n-            self.log.debug('outputs={}'.format(outputs))\n-\n-            # Create a new transaction.\n-            unsigned_raw_tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-            signed_raw_tx = self.nodes[0].signrawtransactionwithwallet(unsigned_raw_tx)\n-            tx_id.append(self.nodes[0].sendrawtransaction(signed_raw_tx['hex']))\n-            tx_size.append(self.nodes[0].getrawmempool(True)[tx_id[-1]]['vsize'])\n-\n-            if tx_count in n_tx_to_mine:\n-                # The created transactions are mined into blocks by batches.\n-                self.log.info('The batch of {} transactions has been accepted into the mempool.'.format(len(self.nodes[0].getrawmempool())))\n-                block_hash = self.nodes[0].generate(1)[0]\n-                if not first_block_hash:\n-                    first_block_hash = block_hash\n-                assert_equal(len(self.nodes[0].getrawmempool()), 0)\n-                self.log.info('All of the transactions from the current batch have been mined into a block.')\n-            elif tx_count == size:\n-                # At the end all of the mined blocks are invalidated, and all of the created\n-                # transactions should be re-added from disconnected blocks to the mempool.\n-                self.log.info('The last batch of {} transactions has been accepted into the mempool.'.format(len(self.nodes[0].getrawmempool())))\n-                start = time.time()\n-                self.nodes[0].invalidateblock(first_block_hash)\n-                end = time.time()\n-                assert_equal(len(self.nodes[0].getrawmempool()), size)\n-                self.log.info('All of the recently mined transactions have been re-added into the mempool in {} seconds.'.format(end - start))\n-\n-        self.log.info('Checking descendants/ancestors properties of all of the in-mempool transactions...')\n-        for k, tx in enumerate(tx_id):\n+        self.wallet.scan_blocks(start=76, num=1)\n+        node.generate(size)\n+        txs = []\n+        block_ids = []\n+        tx_size = []\n+        for i in range(size):\n+            tx = self.wallet.send_self_transfer(from_node=node)\n+            m_tx = node.getrawmempool(True)[tx['txid']]\n+            txs.append(tx)\n+            tx_size.append(m_tx['vsize'])\n+            if (i+1) % n_tx_to_mine == 0:\n+                assert_equal(len(node.getrawmempool()), n_tx_to_mine)\n+                self.log.info('The batch of {} transactions has been accepted into the mempool.'\n+                              .format(n_tx_to_mine))\n+                block_ids.append(self.wallet.generate(1)[0])\n+                assert_equal(len(node.getrawmempool()), 0)\n+                self.log.info(\n+                    'All of the transactions from the current batch have been mined into a block.')\n+\n+        self.log.info(\n+            'Mempool size pre-invalidation: {}'.format(len(node.getrawmempool())))\n+        assert_equal(len(node.getrawmempool()), 0)\n+        # Invalidate the first block to send the transactions back to the mempool.\n+        start = time.time()\n+        node.invalidateblock(block_ids[0])\n+        end = time.time()\n+        self.log.info(\n+            'Mempool size post-invalidation: {}'.format(len(node.getrawmempool())))\n+        assert_equal(len(node.getrawmempool()), size)\n+        self.log.info('All of the recently mined transactions have been re-added into the mempool in {} seconds.'\n+                      .format(end - start))\n+\n+        self.log.info(\n+            'Checking descendants/ancestors properties of all of the in-mempool transactions...')\n+        for k, tx in enumerate(txs):\n+            id = tx['txid']\n             self.log.debug('Check transaction #{}.'.format(k))\n-            assert_equal(self.nodes[0].getrawmempool(True)[tx]['descendantcount'], size - k)\n-            assert_equal(self.nodes[0].getrawmempool(True)[tx]['descendantsize'], sum(tx_size[k:size]))\n-            assert_equal(self.nodes[0].getrawmempool(True)[tx]['ancestorcount'], k + 1)\n-            assert_equal(self.nodes[0].getrawmempool(True)[tx]['ancestorsize'], sum(tx_size[0:(k + 1)]))\n+            assert_equal(node.getrawmempool(True)[id]['descendantcount'], size - k)\n+            assert_equal(node.getrawmempool(True)[id]['descendantsize'], sum(tx_size[k:size]))\n+            assert_equal(node.getrawmempool(True)[id]['ancestorcount'], k + 1)\n+            assert_equal(node.getrawmempool(True)[id]['ancestorsize'], sum(tx_size[0:(k + 1)]))\n \n     def run_test(self):\n-        # Use batch size limited by DEFAULT_ANCESTOR_LIMIT = 25 to not fire \"too many unconfirmed parents\" error.\n-        self.transaction_graph_test(size=100, n_tx_to_mine=[25, 50, 75])\n+        # Use batch size limited by DEFAULT_ANCESTOR_LIMIT = 25\n+        # to not fire \"too many unconfirmed parents\" error.\n+        self.transaction_graph_test(size=100, n_tx_to_mine=25)\n \n \n if __name__ == '__main__':"
      }
    ]
  }
]