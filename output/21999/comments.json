[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/845526900",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21999#issuecomment-845526900",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21999",
    "id": 845526900,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0NTUyNjkwMA==",
    "user": {
      "login": "reemuru",
      "id": 13033037,
      "node_id": "MDQ6VXNlcjEzMDMzMDM3",
      "avatar_url": "https://avatars.githubusercontent.com/u/13033037?u=fc3300a57417beef356e152945e7e29a9b01f4d4&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/reemuru",
      "html_url": "https://github.com/reemuru",
      "followers_url": "https://api.github.com/users/reemuru/followers",
      "following_url": "https://api.github.com/users/reemuru/following{/other_user}",
      "gists_url": "https://api.github.com/users/reemuru/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/reemuru/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/reemuru/subscriptions",
      "organizations_url": "https://api.github.com/users/reemuru/orgs",
      "repos_url": "https://api.github.com/users/reemuru/repos",
      "events_url": "https://api.github.com/users/reemuru/events{/privacy}",
      "received_events_url": "https://api.github.com/users/reemuru/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-20T22:39:18Z",
    "updated_at": "2021-05-20T22:39:18Z",
    "author_association": "NONE",
    "body": "Updated with ac8b08b. Let me know if I missed anything! Also, should I roll theses commits up into one, or will they get squashed at merge time? Forgot to sign the first few. \r\nRecent changes:\r\n* `self.wallet.generate(1)` to `self.wallet.scan_blocks(start=76, num=1)` \r\n* remove blocks mined `block_ids` from cluttering logs along with unnecessary math import\r\n* put back `enumerate` for mempool properties checks\r\n* added assert before mining block\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/845526900/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/845571553",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21999#issuecomment-845571553",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21999",
    "id": 845571553,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0NTU3MTU1Mw==",
    "user": {
      "login": "DariusParvin",
      "id": 41220998,
      "node_id": "MDQ6VXNlcjQxMjIwOTk4",
      "avatar_url": "https://avatars.githubusercontent.com/u/41220998?u=def8aeeafa5b7ee820db7c45c9be9873e875ff87&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DariusParvin",
      "html_url": "https://github.com/DariusParvin",
      "followers_url": "https://api.github.com/users/DariusParvin/followers",
      "following_url": "https://api.github.com/users/DariusParvin/following{/other_user}",
      "gists_url": "https://api.github.com/users/DariusParvin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DariusParvin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DariusParvin/subscriptions",
      "organizations_url": "https://api.github.com/users/DariusParvin/orgs",
      "repos_url": "https://api.github.com/users/DariusParvin/repos",
      "events_url": "https://api.github.com/users/DariusParvin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DariusParvin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-21T00:37:22Z",
    "updated_at": "2021-05-21T00:37:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "The changes look good to me! I'm relatively new myself but I think at this stage it would make sense to [squash](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#squashing-commits) everything into one commit.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/845571553/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/845610550",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21999#issuecomment-845610550",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21999",
    "id": 845610550,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0NTYxMDU1MA==",
    "user": {
      "login": "reemuru",
      "id": 13033037,
      "node_id": "MDQ6VXNlcjEzMDMzMDM3",
      "avatar_url": "https://avatars.githubusercontent.com/u/13033037?u=fc3300a57417beef356e152945e7e29a9b01f4d4&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/reemuru",
      "html_url": "https://github.com/reemuru",
      "followers_url": "https://api.github.com/users/reemuru/followers",
      "following_url": "https://api.github.com/users/reemuru/following{/other_user}",
      "gists_url": "https://api.github.com/users/reemuru/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/reemuru/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/reemuru/subscriptions",
      "organizations_url": "https://api.github.com/users/reemuru/orgs",
      "repos_url": "https://api.github.com/users/reemuru/repos",
      "events_url": "https://api.github.com/users/reemuru/events{/privacy}",
      "received_events_url": "https://api.github.com/users/reemuru/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-21T02:41:30Z",
    "updated_at": "2021-05-21T02:41:30Z",
    "author_association": "NONE",
    "body": "> The changes look good to me! I'm relatively new myself but I think at this stage it would make sense to [squash](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#squashing-commits) everything into one commit.\r\n\r\nGot it, thank you for your assistance!",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/845610550/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/886703595",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21999#issuecomment-886703595",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21999",
    "id": 886703595,
    "node_id": "IC_kwDOABII58402gXr",
    "user": {
      "login": "josibake",
      "id": 7444140,
      "node_id": "MDQ6VXNlcjc0NDQxNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7444140?u=74b81df8d0edae1756edd0fe8ae7cb458b05b5cd&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/josibake",
      "html_url": "https://github.com/josibake",
      "followers_url": "https://api.github.com/users/josibake/followers",
      "following_url": "https://api.github.com/users/josibake/following{/other_user}",
      "gists_url": "https://api.github.com/users/josibake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/josibake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
      "organizations_url": "https://api.github.com/users/josibake/orgs",
      "repos_url": "https://api.github.com/users/josibake/repos",
      "events_url": "https://api.github.com/users/josibake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/josibake/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-07-26T13:27:42Z",
    "updated_at": "2021-07-26T13:27:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "Concept ACK\r\n\r\nThanks for posting the profiling data! Definitely agree with more miniwallet usage, especially if it increases test execution speed. I compiled and ran the tests and everything passed, but I would definitely recommend running `flake8` and making the suggested style changes. you can do this automatically with `autopep8` (I did it by with the following steps):\r\n\r\n```bash\r\npip install autopep8\r\nautopep8 --in-place mempool_updatefromblock.py\r\n```\r\nyou can double check the changes by running `flake8 mempool_updatefromblock.py`. you should only see line length warnings, which are fine to ignore",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/886703595/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/886838684",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21999#issuecomment-886838684",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21999",
    "id": 886838684,
    "node_id": "IC_kwDOABII58403BWc",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?u=5ff13e375b40ea55ecd3c108337dd6a23f68eddf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-07-26T16:13:09Z",
    "updated_at": "2021-07-26T16:13:09Z",
    "author_association": "CONTRIBUTOR",
    "body": "Concept ACK",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/886838684/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/886894048",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21999#issuecomment-886894048",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21999",
    "id": 886894048,
    "node_id": "IC_kwDOABII58403O3g",
    "user": {
      "login": "reemuru",
      "id": 13033037,
      "node_id": "MDQ6VXNlcjEzMDMzMDM3",
      "avatar_url": "https://avatars.githubusercontent.com/u/13033037?u=fc3300a57417beef356e152945e7e29a9b01f4d4&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/reemuru",
      "html_url": "https://github.com/reemuru",
      "followers_url": "https://api.github.com/users/reemuru/followers",
      "following_url": "https://api.github.com/users/reemuru/following{/other_user}",
      "gists_url": "https://api.github.com/users/reemuru/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/reemuru/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/reemuru/subscriptions",
      "organizations_url": "https://api.github.com/users/reemuru/orgs",
      "repos_url": "https://api.github.com/users/reemuru/repos",
      "events_url": "https://api.github.com/users/reemuru/events{/privacy}",
      "received_events_url": "https://api.github.com/users/reemuru/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-07-26T17:33:31Z",
    "updated_at": "2021-07-26T17:33:56Z",
    "author_association": "NONE",
    "body": "> ```shell\r\n> pip install autopep8\r\n> ```\r\n\r\noh shoots! never used autopep8 before. will use from now on. Thanks for the tip! (^_^) => 0b7dbeb",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/886894048/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/887069908",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21999#issuecomment-887069908",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21999",
    "id": 887069908,
    "node_id": "IC_kwDOABII584035zU",
    "user": {
      "login": "josibake",
      "id": 7444140,
      "node_id": "MDQ6VXNlcjc0NDQxNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7444140?u=74b81df8d0edae1756edd0fe8ae7cb458b05b5cd&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/josibake",
      "html_url": "https://github.com/josibake",
      "followers_url": "https://api.github.com/users/josibake/followers",
      "following_url": "https://api.github.com/users/josibake/following{/other_user}",
      "gists_url": "https://api.github.com/users/josibake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/josibake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
      "organizations_url": "https://api.github.com/users/josibake/orgs",
      "repos_url": "https://api.github.com/users/josibake/repos",
      "events_url": "https://api.github.com/users/josibake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/josibake/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-07-26T22:27:56Z",
    "updated_at": "2021-07-26T22:27:56Z",
    "author_association": "CONTRIBUTOR",
    "body": "> > ```shell\r\n> > pip install autopep8\r\n> > ```\r\n> \r\n> oh shoots! never used autopep8 before. will use from now on. Thanks for the tip! (^_^) => [0b7dbeb](https://github.com/bitcoin/bitcoin/commit/0b7dbebd14962080c86c5667a77bbafdcefa6865)\r\n\r\nlooks great! id suggest squashing into one atomic commit per [the contributing guide](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#squashing-commits)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/887069908/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/887150924",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21999#issuecomment-887150924",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21999",
    "id": 887150924,
    "node_id": "IC_kwDOABII58404NlM",
    "user": {
      "login": "reemuru",
      "id": 13033037,
      "node_id": "MDQ6VXNlcjEzMDMzMDM3",
      "avatar_url": "https://avatars.githubusercontent.com/u/13033037?u=fc3300a57417beef356e152945e7e29a9b01f4d4&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/reemuru",
      "html_url": "https://github.com/reemuru",
      "followers_url": "https://api.github.com/users/reemuru/followers",
      "following_url": "https://api.github.com/users/reemuru/following{/other_user}",
      "gists_url": "https://api.github.com/users/reemuru/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/reemuru/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/reemuru/subscriptions",
      "organizations_url": "https://api.github.com/users/reemuru/orgs",
      "repos_url": "https://api.github.com/users/reemuru/repos",
      "events_url": "https://api.github.com/users/reemuru/events{/privacy}",
      "received_events_url": "https://api.github.com/users/reemuru/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-07-27T02:05:00Z",
    "updated_at": "2021-07-27T02:05:00Z",
    "author_association": "NONE",
    "body": "> > > ```shell\r\n> > > pip install autopep8\r\n> > > ```\r\n> > \r\n> > \r\n> > oh shoots! never used autopep8 before. will use from now on. Thanks for the tip! (^_^) => [0b7dbeb](https://github.com/bitcoin/bitcoin/commit/0b7dbebd14962080c86c5667a77bbafdcefa6865)\r\n> \r\n> looks great! id suggest squashing into one atomic commit per [the contributing guide](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#squashing-commits)\r\n\r\nGot it, thanks much!",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/887150924/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/887420465",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21999#issuecomment-887420465",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21999",
    "id": 887420465,
    "node_id": "IC_kwDOABII58405PYx",
    "user": {
      "login": "josibake",
      "id": 7444140,
      "node_id": "MDQ6VXNlcjc0NDQxNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7444140?u=74b81df8d0edae1756edd0fe8ae7cb458b05b5cd&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/josibake",
      "html_url": "https://github.com/josibake",
      "followers_url": "https://api.github.com/users/josibake/followers",
      "following_url": "https://api.github.com/users/josibake/following{/other_user}",
      "gists_url": "https://api.github.com/users/josibake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/josibake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
      "organizations_url": "https://api.github.com/users/josibake/orgs",
      "repos_url": "https://api.github.com/users/josibake/repos",
      "events_url": "https://api.github.com/users/josibake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/josibake/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-07-27T11:06:15Z",
    "updated_at": "2021-07-27T11:06:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "ACK https://github.com/bitcoin/bitcoin/pull/21999/commits/446c06a6fd8bf205e534be47c02d8088e40dd10f\r\n\r\nbuilt without wallet, ran the test to verify everything is behaving as expected. also code reviewed to verify the logic of the test is unchanged (strictly a refactor)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/887420465/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/887820427",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21999#issuecomment-887820427",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21999",
    "id": 887820427,
    "node_id": "IC_kwDOABII58406xCL",
    "user": {
      "login": "DrahtBot",
      "id": 39886733,
      "node_id": "MDQ6VXNlcjM5ODg2NzMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/39886733?u=3c1e73d828cf5a5850dfc25c8397c1cf751db5ac&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DrahtBot",
      "html_url": "https://github.com/DrahtBot",
      "followers_url": "https://api.github.com/users/DrahtBot/followers",
      "following_url": "https://api.github.com/users/DrahtBot/following{/other_user}",
      "gists_url": "https://api.github.com/users/DrahtBot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
      "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
      "repos_url": "https://api.github.com/users/DrahtBot/repos",
      "events_url": "https://api.github.com/users/DrahtBot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-07-27T20:41:56Z",
    "updated_at": "2021-07-31T18:18:02Z",
    "author_association": "CONTRIBUTOR",
    "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #22567 by MarcoFalke\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/887820427/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/888395753",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21999#issuecomment-888395753",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21999",
    "id": 888395753,
    "node_id": "IC_kwDOABII584089fp",
    "user": {
      "login": "josibake",
      "id": 7444140,
      "node_id": "MDQ6VXNlcjc0NDQxNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7444140?u=74b81df8d0edae1756edd0fe8ae7cb458b05b5cd&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/josibake",
      "html_url": "https://github.com/josibake",
      "followers_url": "https://api.github.com/users/josibake/followers",
      "following_url": "https://api.github.com/users/josibake/following{/other_user}",
      "gists_url": "https://api.github.com/users/josibake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/josibake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
      "organizations_url": "https://api.github.com/users/josibake/orgs",
      "repos_url": "https://api.github.com/users/josibake/repos",
      "events_url": "https://api.github.com/users/josibake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/josibake/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-07-28T15:17:08Z",
    "updated_at": "2021-07-28T15:17:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "ACK https://github.com/bitcoin/bitcoin/pull/22330/commits/c1c0768b619ab463a00052d0a584fba191eb02a9\r\n\r\nbuilt without wallet and ran test",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/888395753/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/893884092",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21999#issuecomment-893884092",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21999",
    "id": 893884092,
    "node_id": "IC_kwDOABII5841R5a8",
    "user": {
      "login": "adamjonas",
      "id": 755825,
      "node_id": "MDQ6VXNlcjc1NTgyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/755825?u=fc2e6f106f98731d49e9787f9cbfe86a17447c23&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adamjonas",
      "html_url": "https://github.com/adamjonas",
      "followers_url": "https://api.github.com/users/adamjonas/followers",
      "following_url": "https://api.github.com/users/adamjonas/following{/other_user}",
      "gists_url": "https://api.github.com/users/adamjonas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adamjonas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adamjonas/subscriptions",
      "organizations_url": "https://api.github.com/users/adamjonas/orgs",
      "repos_url": "https://api.github.com/users/adamjonas/repos",
      "events_url": "https://api.github.com/users/adamjonas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adamjonas/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-05T23:17:31Z",
    "updated_at": "2021-08-05T23:17:31Z",
    "author_association": "MEMBER",
    "body": "@reemuru was there a reason this closed? Would you like to mark it up for grabs?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/893884092/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/636278997",
    "pull_request_review_id": 664624908,
    "id": 636278997,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNjI3ODk5Nw==",
    "diff_hunk": "@@ -38,86 +35,52 @@ def transaction_graph_test(self, size, n_tx_to_mine=None, start_input_txid='', e\n         More details: https://en.wikipedia.org/wiki/Tournament_(graph_theory)\n         \"\"\"\n \n-        if not start_input_txid:\n-            start_input_txid = self.nodes[0].getblock(self.nodes[0].getblockhash(1))['tx'][0]\n-\n-        if not end_address:\n-            end_address = self.nodes[0].getnewaddress()\n-\n-        first_block_hash = ''\n-        tx_id = []\n-        tx_size = []\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n         self.log.info('Creating {} transactions...'.format(size))\n-        for i in range(0, size):\n-            self.log.debug('Preparing transaction #{}...'.format(i))\n-            # Prepare inputs.\n-            if i == 0:\n-                inputs = [{'txid': start_input_txid, 'vout': 0}]\n-                inputs_value = self.nodes[0].gettxout(start_input_txid, 0)['value']\n-            else:\n-                inputs = []\n-                inputs_value = 0\n-                for j, tx in enumerate(tx_id[0:i]):\n-                    # Transaction tx[K] is a child of each of previous transactions tx[0]..tx[K-1] at their output K-1.\n-                    vout = i - j - 1\n-                    inputs.append({'txid': tx_id[j], 'vout': vout})\n-                    inputs_value += self.nodes[0].gettxout(tx, vout)['value']\n-\n-            self.log.debug('inputs={}'.format(inputs))\n-            self.log.debug('inputs_value={}'.format(inputs_value))\n-\n-            # Prepare outputs.\n-            tx_count = i + 1\n-            if tx_count < size:\n-                # Transaction tx[K] is an ancestor of each of subsequent transactions tx[K+1]..tx[N-1].\n-                n_outputs = size - tx_count\n-                output_value = ((inputs_value - fee) / Decimal(n_outputs)).quantize(Decimal('0.00000001'))\n-                outputs = {}\n-                for _ in range(n_outputs):\n-                    outputs[self.nodes[0].getnewaddress()] = output_value\n-            else:\n-                output_value = (inputs_value - fee).quantize(Decimal('0.00000001'))\n-                outputs = {end_address: output_value}\n-\n-            self.log.debug('output_value={}'.format(output_value))\n-            self.log.debug('outputs={}'.format(outputs))\n-\n-            # Create a new transaction.\n-            unsigned_raw_tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-            signed_raw_tx = self.nodes[0].signrawtransactionwithwallet(unsigned_raw_tx)\n-            tx_id.append(self.nodes[0].sendrawtransaction(signed_raw_tx['hex']))\n-            tx_size.append(self.nodes[0].getrawmempool(True)[tx_id[-1]]['vsize'])\n-\n-            if tx_count in n_tx_to_mine:\n-                # The created transactions are mined into blocks by batches.\n-                self.log.info('The batch of {} transactions has been accepted into the mempool.'.format(len(self.nodes[0].getrawmempool())))\n-                block_hash = self.nodes[0].generate(1)[0]\n-                if not first_block_hash:\n-                    first_block_hash = block_hash\n-                assert_equal(len(self.nodes[0].getrawmempool()), 0)\n+        self.wallet.generate(1)\n+        node.generate(size)\n+        txs = []\n+        block_ids = []\n+        tx_size = []\n+        for i in range(size):\n+            txs.append(self.wallet.send_self_transfer(from_node=node))\n+            tx_size.append(96)\n+            if (i+1) % n_tx_to_mine == 0:\n+                self.log.info('The batch of {} transactions has been accepted into the mempool.'\n+                .format(len(node.getrawmempool())))",
    "path": "test/functional/mempool_updatefromblock.py",
    "position": null,
    "original_position": 98,
    "commit_id": "1332dbb526f19ebf96bf3fa7c147bacd1926f7ae",
    "original_commit_id": "b7c6eea86154320520fa6766c4a87f6ad4c1b899",
    "user": {
      "login": "DariusParvin",
      "id": 41220998,
      "node_id": "MDQ6VXNlcjQxMjIwOTk4",
      "avatar_url": "https://avatars.githubusercontent.com/u/41220998?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DariusParvin",
      "html_url": "https://github.com/DariusParvin",
      "followers_url": "https://api.github.com/users/DariusParvin/followers",
      "following_url": "https://api.github.com/users/DariusParvin/following{/other_user}",
      "gists_url": "https://api.github.com/users/DariusParvin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DariusParvin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DariusParvin/subscriptions",
      "organizations_url": "https://api.github.com/users/DariusParvin/orgs",
      "repos_url": "https://api.github.com/users/DariusParvin/repos",
      "events_url": "https://api.github.com/users/DariusParvin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DariusParvin/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "It looks like this should be:\r\n```suggestion        \r\n                .format(n_tx_to_mine)\r\n```",
    "created_at": "2021-05-20T16:47:41Z",
    "updated_at": "2021-05-20T17:16:17Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21999#discussion_r636278997",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21999",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/636278997"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21999#discussion_r636278997"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21999"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/636278997/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 51,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/636281765",
    "pull_request_review_id": 664624908,
    "id": 636281765,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNjI4MTc2NQ==",
    "diff_hunk": "@@ -38,86 +35,52 @@ def transaction_graph_test(self, size, n_tx_to_mine=None, start_input_txid='', e\n         More details: https://en.wikipedia.org/wiki/Tournament_(graph_theory)\n         \"\"\"\n \n-        if not start_input_txid:\n-            start_input_txid = self.nodes[0].getblock(self.nodes[0].getblockhash(1))['tx'][0]\n-\n-        if not end_address:\n-            end_address = self.nodes[0].getnewaddress()\n-\n-        first_block_hash = ''\n-        tx_id = []\n-        tx_size = []\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n         self.log.info('Creating {} transactions...'.format(size))\n-        for i in range(0, size):\n-            self.log.debug('Preparing transaction #{}...'.format(i))\n-            # Prepare inputs.\n-            if i == 0:\n-                inputs = [{'txid': start_input_txid, 'vout': 0}]\n-                inputs_value = self.nodes[0].gettxout(start_input_txid, 0)['value']\n-            else:\n-                inputs = []\n-                inputs_value = 0\n-                for j, tx in enumerate(tx_id[0:i]):\n-                    # Transaction tx[K] is a child of each of previous transactions tx[0]..tx[K-1] at their output K-1.\n-                    vout = i - j - 1\n-                    inputs.append({'txid': tx_id[j], 'vout': vout})\n-                    inputs_value += self.nodes[0].gettxout(tx, vout)['value']\n-\n-            self.log.debug('inputs={}'.format(inputs))\n-            self.log.debug('inputs_value={}'.format(inputs_value))\n-\n-            # Prepare outputs.\n-            tx_count = i + 1\n-            if tx_count < size:\n-                # Transaction tx[K] is an ancestor of each of subsequent transactions tx[K+1]..tx[N-1].\n-                n_outputs = size - tx_count\n-                output_value = ((inputs_value - fee) / Decimal(n_outputs)).quantize(Decimal('0.00000001'))\n-                outputs = {}\n-                for _ in range(n_outputs):\n-                    outputs[self.nodes[0].getnewaddress()] = output_value\n-            else:\n-                output_value = (inputs_value - fee).quantize(Decimal('0.00000001'))\n-                outputs = {end_address: output_value}\n-\n-            self.log.debug('output_value={}'.format(output_value))\n-            self.log.debug('outputs={}'.format(outputs))\n-\n-            # Create a new transaction.\n-            unsigned_raw_tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-            signed_raw_tx = self.nodes[0].signrawtransactionwithwallet(unsigned_raw_tx)\n-            tx_id.append(self.nodes[0].sendrawtransaction(signed_raw_tx['hex']))\n-            tx_size.append(self.nodes[0].getrawmempool(True)[tx_id[-1]]['vsize'])\n-\n-            if tx_count in n_tx_to_mine:\n-                # The created transactions are mined into blocks by batches.\n-                self.log.info('The batch of {} transactions has been accepted into the mempool.'.format(len(self.nodes[0].getrawmempool())))\n-                block_hash = self.nodes[0].generate(1)[0]\n-                if not first_block_hash:\n-                    first_block_hash = block_hash\n-                assert_equal(len(self.nodes[0].getrawmempool()), 0)\n+        self.wallet.generate(1)\n+        node.generate(size)\n+        txs = []\n+        block_ids = []\n+        tx_size = []\n+        for i in range(size):\n+            txs.append(self.wallet.send_self_transfer(from_node=node))\n+            tx_size.append(96)\n+            if (i+1) % n_tx_to_mine == 0:\n+                self.log.info('The batch of {} transactions has been accepted into the mempool.'\n+                .format(len(node.getrawmempool())))\n+                block_ids.append(self.wallet.generate(1)[0])\n+                assert_equal(len(node.getrawmempool()), 0)\n                 self.log.info('All of the transactions from the current batch have been mined into a block.')\n-            elif tx_count == size:\n-                # At the end all of the mined blocks are invalidated, and all of the created\n-                # transactions should be re-added from disconnected blocks to the mempool.\n-                self.log.info('The last batch of {} transactions has been accepted into the mempool.'.format(len(self.nodes[0].getrawmempool())))\n-                start = time.time()\n-                self.nodes[0].invalidateblock(first_block_hash)\n-                end = time.time()\n-                assert_equal(len(self.nodes[0].getrawmempool()), size)\n-                self.log.info('All of the recently mined transactions have been re-added into the mempool in {} seconds.'.format(end - start))\n+                self.log.info('{}'.format(block_ids))",
    "path": "test/functional/mempool_updatefromblock.py",
    "position": null,
    "original_position": 111,
    "commit_id": "1332dbb526f19ebf96bf3fa7c147bacd1926f7ae",
    "original_commit_id": "b7c6eea86154320520fa6766c4a87f6ad4c1b899",
    "user": {
      "login": "DariusParvin",
      "id": 41220998,
      "node_id": "MDQ6VXNlcjQxMjIwOTk4",
      "avatar_url": "https://avatars.githubusercontent.com/u/41220998?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DariusParvin",
      "html_url": "https://github.com/DariusParvin",
      "followers_url": "https://api.github.com/users/DariusParvin/followers",
      "following_url": "https://api.github.com/users/DariusParvin/following{/other_user}",
      "gists_url": "https://api.github.com/users/DariusParvin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DariusParvin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DariusParvin/subscriptions",
      "organizations_url": "https://api.github.com/users/DariusParvin/orgs",
      "repos_url": "https://api.github.com/users/DariusParvin/repos",
      "events_url": "https://api.github.com/users/DariusParvin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DariusParvin/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "is this useful to have in the log?",
    "created_at": "2021-05-20T16:51:39Z",
    "updated_at": "2021-05-20T17:16:17Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21999#discussion_r636281765",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21999",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/636281765"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21999#discussion_r636281765"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21999"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/636281765/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 55,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/636285450",
    "pull_request_review_id": 664624908,
    "id": 636285450,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNjI4NTQ1MA==",
    "diff_hunk": "@@ -38,86 +35,52 @@ def transaction_graph_test(self, size, n_tx_to_mine=None, start_input_txid='', e\n         More details: https://en.wikipedia.org/wiki/Tournament_(graph_theory)\n         \"\"\"\n \n-        if not start_input_txid:\n-            start_input_txid = self.nodes[0].getblock(self.nodes[0].getblockhash(1))['tx'][0]\n-\n-        if not end_address:\n-            end_address = self.nodes[0].getnewaddress()\n-\n-        first_block_hash = ''\n-        tx_id = []\n-        tx_size = []\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n         self.log.info('Creating {} transactions...'.format(size))\n-        for i in range(0, size):\n-            self.log.debug('Preparing transaction #{}...'.format(i))\n-            # Prepare inputs.\n-            if i == 0:\n-                inputs = [{'txid': start_input_txid, 'vout': 0}]\n-                inputs_value = self.nodes[0].gettxout(start_input_txid, 0)['value']\n-            else:\n-                inputs = []\n-                inputs_value = 0\n-                for j, tx in enumerate(tx_id[0:i]):\n-                    # Transaction tx[K] is a child of each of previous transactions tx[0]..tx[K-1] at their output K-1.\n-                    vout = i - j - 1\n-                    inputs.append({'txid': tx_id[j], 'vout': vout})\n-                    inputs_value += self.nodes[0].gettxout(tx, vout)['value']\n-\n-            self.log.debug('inputs={}'.format(inputs))\n-            self.log.debug('inputs_value={}'.format(inputs_value))\n-\n-            # Prepare outputs.\n-            tx_count = i + 1\n-            if tx_count < size:\n-                # Transaction tx[K] is an ancestor of each of subsequent transactions tx[K+1]..tx[N-1].\n-                n_outputs = size - tx_count\n-                output_value = ((inputs_value - fee) / Decimal(n_outputs)).quantize(Decimal('0.00000001'))\n-                outputs = {}\n-                for _ in range(n_outputs):\n-                    outputs[self.nodes[0].getnewaddress()] = output_value\n-            else:\n-                output_value = (inputs_value - fee).quantize(Decimal('0.00000001'))\n-                outputs = {end_address: output_value}\n-\n-            self.log.debug('output_value={}'.format(output_value))\n-            self.log.debug('outputs={}'.format(outputs))\n-\n-            # Create a new transaction.\n-            unsigned_raw_tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-            signed_raw_tx = self.nodes[0].signrawtransactionwithwallet(unsigned_raw_tx)\n-            tx_id.append(self.nodes[0].sendrawtransaction(signed_raw_tx['hex']))\n-            tx_size.append(self.nodes[0].getrawmempool(True)[tx_id[-1]]['vsize'])\n-\n-            if tx_count in n_tx_to_mine:\n-                # The created transactions are mined into blocks by batches.\n-                self.log.info('The batch of {} transactions has been accepted into the mempool.'.format(len(self.nodes[0].getrawmempool())))\n-                block_hash = self.nodes[0].generate(1)[0]\n-                if not first_block_hash:\n-                    first_block_hash = block_hash\n-                assert_equal(len(self.nodes[0].getrawmempool()), 0)\n+        self.wallet.generate(1)\n+        node.generate(size)\n+        txs = []\n+        block_ids = []\n+        tx_size = []\n+        for i in range(size):\n+            txs.append(self.wallet.send_self_transfer(from_node=node))\n+            tx_size.append(96)\n+            if (i+1) % n_tx_to_mine == 0:\n+                self.log.info('The batch of {} transactions has been accepted into the mempool.'\n+                .format(len(node.getrawmempool())))\n+                block_ids.append(self.wallet.generate(1)[0])\n+                assert_equal(len(node.getrawmempool()), 0)\n                 self.log.info('All of the transactions from the current batch have been mined into a block.')\n-            elif tx_count == size:\n-                # At the end all of the mined blocks are invalidated, and all of the created\n-                # transactions should be re-added from disconnected blocks to the mempool.\n-                self.log.info('The last batch of {} transactions has been accepted into the mempool.'.format(len(self.nodes[0].getrawmempool())))\n-                start = time.time()\n-                self.nodes[0].invalidateblock(first_block_hash)\n-                end = time.time()\n-                assert_equal(len(self.nodes[0].getrawmempool()), size)\n-                self.log.info('All of the recently mined transactions have been re-added into the mempool in {} seconds.'.format(end - start))\n+                self.log.info('{}'.format(block_ids))\n+                self.log.info('Block height: {}'.format(math.ceil(i / n_tx_to_mine)))",
    "path": "test/functional/mempool_updatefromblock.py",
    "position": null,
    "original_position": 112,
    "commit_id": "1332dbb526f19ebf96bf3fa7c147bacd1926f7ae",
    "original_commit_id": "b7c6eea86154320520fa6766c4a87f6ad4c1b899",
    "user": {
      "login": "DariusParvin",
      "id": 41220998,
      "node_id": "MDQ6VXNlcjQxMjIwOTk4",
      "avatar_url": "https://avatars.githubusercontent.com/u/41220998?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DariusParvin",
      "html_url": "https://github.com/DariusParvin",
      "followers_url": "https://api.github.com/users/DariusParvin/followers",
      "following_url": "https://api.github.com/users/DariusParvin/following{/other_user}",
      "gists_url": "https://api.github.com/users/DariusParvin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DariusParvin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DariusParvin/subscriptions",
      "organizations_url": "https://api.github.com/users/DariusParvin/orgs",
      "repos_url": "https://api.github.com/users/DariusParvin/repos",
      "events_url": "https://api.github.com/users/DariusParvin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DariusParvin/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "'Block height' is probably misleading. Should this say something like?\r\n```suggestion\r\n                self.log.info('Number of recently mined blocks: {}'.format(math.ceil(i / n_tx_to_mine)))\r\n```\r\nbut also is this useful to have? Without this we won't need to `import math` ",
    "created_at": "2021-05-20T16:56:44Z",
    "updated_at": "2021-05-20T17:16:17Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21999#discussion_r636285450",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21999",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/636285450"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21999#discussion_r636285450"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21999"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/636285450/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 56,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/636298155",
    "pull_request_review_id": 664624908,
    "id": 636298155,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNjI5ODE1NQ==",
    "diff_hunk": "@@ -38,86 +35,52 @@ def transaction_graph_test(self, size, n_tx_to_mine=None, start_input_txid='', e\n         More details: https://en.wikipedia.org/wiki/Tournament_(graph_theory)\n         \"\"\"\n \n-        if not start_input_txid:\n-            start_input_txid = self.nodes[0].getblock(self.nodes[0].getblockhash(1))['tx'][0]\n-\n-        if not end_address:\n-            end_address = self.nodes[0].getnewaddress()\n-\n-        first_block_hash = ''\n-        tx_id = []\n-        tx_size = []\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n         self.log.info('Creating {} transactions...'.format(size))\n-        for i in range(0, size):\n-            self.log.debug('Preparing transaction #{}...'.format(i))\n-            # Prepare inputs.\n-            if i == 0:\n-                inputs = [{'txid': start_input_txid, 'vout': 0}]\n-                inputs_value = self.nodes[0].gettxout(start_input_txid, 0)['value']\n-            else:\n-                inputs = []\n-                inputs_value = 0\n-                for j, tx in enumerate(tx_id[0:i]):\n-                    # Transaction tx[K] is a child of each of previous transactions tx[0]..tx[K-1] at their output K-1.\n-                    vout = i - j - 1\n-                    inputs.append({'txid': tx_id[j], 'vout': vout})\n-                    inputs_value += self.nodes[0].gettxout(tx, vout)['value']\n-\n-            self.log.debug('inputs={}'.format(inputs))\n-            self.log.debug('inputs_value={}'.format(inputs_value))\n-\n-            # Prepare outputs.\n-            tx_count = i + 1\n-            if tx_count < size:\n-                # Transaction tx[K] is an ancestor of each of subsequent transactions tx[K+1]..tx[N-1].\n-                n_outputs = size - tx_count\n-                output_value = ((inputs_value - fee) / Decimal(n_outputs)).quantize(Decimal('0.00000001'))\n-                outputs = {}\n-                for _ in range(n_outputs):\n-                    outputs[self.nodes[0].getnewaddress()] = output_value\n-            else:\n-                output_value = (inputs_value - fee).quantize(Decimal('0.00000001'))\n-                outputs = {end_address: output_value}\n-\n-            self.log.debug('output_value={}'.format(output_value))\n-            self.log.debug('outputs={}'.format(outputs))\n-\n-            # Create a new transaction.\n-            unsigned_raw_tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-            signed_raw_tx = self.nodes[0].signrawtransactionwithwallet(unsigned_raw_tx)\n-            tx_id.append(self.nodes[0].sendrawtransaction(signed_raw_tx['hex']))\n-            tx_size.append(self.nodes[0].getrawmempool(True)[tx_id[-1]]['vsize'])\n-\n-            if tx_count in n_tx_to_mine:\n-                # The created transactions are mined into blocks by batches.\n-                self.log.info('The batch of {} transactions has been accepted into the mempool.'.format(len(self.nodes[0].getrawmempool())))\n-                block_hash = self.nodes[0].generate(1)[0]\n-                if not first_block_hash:\n-                    first_block_hash = block_hash\n-                assert_equal(len(self.nodes[0].getrawmempool()), 0)\n+        self.wallet.generate(1)",
    "path": "test/functional/mempool_updatefromblock.py",
    "position": null,
    "original_position": 88,
    "commit_id": "1332dbb526f19ebf96bf3fa7c147bacd1926f7ae",
    "original_commit_id": "a02da6d8c0d4951111df7b035388f01dbe526d0a",
    "user": {
      "login": "DariusParvin",
      "id": 41220998,
      "node_id": "MDQ6VXNlcjQxMjIwOTk4",
      "avatar_url": "https://avatars.githubusercontent.com/u/41220998?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DariusParvin",
      "html_url": "https://github.com/DariusParvin",
      "followers_url": "https://api.github.com/users/DariusParvin/followers",
      "following_url": "https://api.github.com/users/DariusParvin/following{/other_user}",
      "gists_url": "https://api.github.com/users/DariusParvin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DariusParvin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DariusParvin/subscriptions",
      "organizations_url": "https://api.github.com/users/DariusParvin/orgs",
      "repos_url": "https://api.github.com/users/DariusParvin/repos",
      "events_url": "https://api.github.com/users/DariusParvin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DariusParvin/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`scan_blocks` is slightly quicker than `generate`, so instead we can use\r\n```suggestion\r\n        self.wallet.scan_blocks(start=76, num=1)\r\n```\r\n(76 is the first block where the coinbase is mined to the miniwallet address)",
    "created_at": "2021-05-20T17:09:03Z",
    "updated_at": "2021-05-20T17:16:17Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21999#discussion_r636298155",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21999",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/636298155"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21999#discussion_r636298155"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21999"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/636298155/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 41,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/636302051",
    "pull_request_review_id": 664624908,
    "id": 636302051,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNjMwMjA1MQ==",
    "diff_hunk": "@@ -38,86 +35,52 @@ def transaction_graph_test(self, size, n_tx_to_mine=None, start_input_txid='', e\n         More details: https://en.wikipedia.org/wiki/Tournament_(graph_theory)\n         \"\"\"\n \n-        if not start_input_txid:\n-            start_input_txid = self.nodes[0].getblock(self.nodes[0].getblockhash(1))['tx'][0]\n-\n-        if not end_address:\n-            end_address = self.nodes[0].getnewaddress()\n-\n-        first_block_hash = ''\n-        tx_id = []\n-        tx_size = []\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n         self.log.info('Creating {} transactions...'.format(size))\n-        for i in range(0, size):\n-            self.log.debug('Preparing transaction #{}...'.format(i))\n-            # Prepare inputs.\n-            if i == 0:\n-                inputs = [{'txid': start_input_txid, 'vout': 0}]\n-                inputs_value = self.nodes[0].gettxout(start_input_txid, 0)['value']\n-            else:\n-                inputs = []\n-                inputs_value = 0\n-                for j, tx in enumerate(tx_id[0:i]):\n-                    # Transaction tx[K] is a child of each of previous transactions tx[0]..tx[K-1] at their output K-1.\n-                    vout = i - j - 1\n-                    inputs.append({'txid': tx_id[j], 'vout': vout})\n-                    inputs_value += self.nodes[0].gettxout(tx, vout)['value']\n-\n-            self.log.debug('inputs={}'.format(inputs))\n-            self.log.debug('inputs_value={}'.format(inputs_value))\n-\n-            # Prepare outputs.\n-            tx_count = i + 1\n-            if tx_count < size:\n-                # Transaction tx[K] is an ancestor of each of subsequent transactions tx[K+1]..tx[N-1].\n-                n_outputs = size - tx_count\n-                output_value = ((inputs_value - fee) / Decimal(n_outputs)).quantize(Decimal('0.00000001'))\n-                outputs = {}\n-                for _ in range(n_outputs):\n-                    outputs[self.nodes[0].getnewaddress()] = output_value\n-            else:\n-                output_value = (inputs_value - fee).quantize(Decimal('0.00000001'))\n-                outputs = {end_address: output_value}\n-\n-            self.log.debug('output_value={}'.format(output_value))\n-            self.log.debug('outputs={}'.format(outputs))\n-\n-            # Create a new transaction.\n-            unsigned_raw_tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-            signed_raw_tx = self.nodes[0].signrawtransactionwithwallet(unsigned_raw_tx)\n-            tx_id.append(self.nodes[0].sendrawtransaction(signed_raw_tx['hex']))\n-            tx_size.append(self.nodes[0].getrawmempool(True)[tx_id[-1]]['vsize'])\n-\n-            if tx_count in n_tx_to_mine:\n-                # The created transactions are mined into blocks by batches.\n-                self.log.info('The batch of {} transactions has been accepted into the mempool.'.format(len(self.nodes[0].getrawmempool())))\n-                block_hash = self.nodes[0].generate(1)[0]\n-                if not first_block_hash:\n-                    first_block_hash = block_hash\n-                assert_equal(len(self.nodes[0].getrawmempool()), 0)\n+        self.wallet.generate(1)\n+        node.generate(size)\n+        txs = []\n+        block_ids = []\n+        tx_size = []\n+        for i in range(size):\n+            txs.append(self.wallet.send_self_transfer(from_node=node))\n+            tx_size.append(96)\n+            if (i+1) % n_tx_to_mine == 0:\n+                self.log.info('The batch of {} transactions has been accepted into the mempool.'",
    "path": "test/functional/mempool_updatefromblock.py",
    "position": 118,
    "original_position": 97,
    "commit_id": "1332dbb526f19ebf96bf3fa7c147bacd1926f7ae",
    "original_commit_id": "a02da6d8c0d4951111df7b035388f01dbe526d0a",
    "user": {
      "login": "DariusParvin",
      "id": 41220998,
      "node_id": "MDQ6VXNlcjQxMjIwOTk4",
      "avatar_url": "https://avatars.githubusercontent.com/u/41220998?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DariusParvin",
      "html_url": "https://github.com/DariusParvin",
      "followers_url": "https://api.github.com/users/DariusParvin/followers",
      "following_url": "https://api.github.com/users/DariusParvin/following{/other_user}",
      "gists_url": "https://api.github.com/users/DariusParvin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DariusParvin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DariusParvin/subscriptions",
      "organizations_url": "https://api.github.com/users/DariusParvin/orgs",
      "repos_url": "https://api.github.com/users/DariusParvin/repos",
      "events_url": "https://api.github.com/users/DariusParvin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DariusParvin/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Would it be useful to have this in the line above?\r\n```               \r\n                assert_equal(len(node.getrawmempool()), n_tx_to_mine)\r\n```",
    "created_at": "2021-05-20T17:12:08Z",
    "updated_at": "2021-05-20T20:24:20Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21999#discussion_r636302051",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21999",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/636302051"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21999#discussion_r636302051"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21999"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/636302051/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 58,
    "original_line": 58,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/636304223",
    "pull_request_review_id": 664624908,
    "id": 636304223,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNjMwNDIyMw==",
    "diff_hunk": "@@ -38,86 +35,52 @@ def transaction_graph_test(self, size, n_tx_to_mine=None, start_input_txid='', e\n         More details: https://en.wikipedia.org/wiki/Tournament_(graph_theory)\n         \"\"\"\n \n-        if not start_input_txid:\n-            start_input_txid = self.nodes[0].getblock(self.nodes[0].getblockhash(1))['tx'][0]\n-\n-        if not end_address:\n-            end_address = self.nodes[0].getnewaddress()\n-\n-        first_block_hash = ''\n-        tx_id = []\n-        tx_size = []\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n         self.log.info('Creating {} transactions...'.format(size))\n-        for i in range(0, size):\n-            self.log.debug('Preparing transaction #{}...'.format(i))\n-            # Prepare inputs.\n-            if i == 0:\n-                inputs = [{'txid': start_input_txid, 'vout': 0}]\n-                inputs_value = self.nodes[0].gettxout(start_input_txid, 0)['value']\n-            else:\n-                inputs = []\n-                inputs_value = 0\n-                for j, tx in enumerate(tx_id[0:i]):\n-                    # Transaction tx[K] is a child of each of previous transactions tx[0]..tx[K-1] at their output K-1.\n-                    vout = i - j - 1\n-                    inputs.append({'txid': tx_id[j], 'vout': vout})\n-                    inputs_value += self.nodes[0].gettxout(tx, vout)['value']\n-\n-            self.log.debug('inputs={}'.format(inputs))\n-            self.log.debug('inputs_value={}'.format(inputs_value))\n-\n-            # Prepare outputs.\n-            tx_count = i + 1\n-            if tx_count < size:\n-                # Transaction tx[K] is an ancestor of each of subsequent transactions tx[K+1]..tx[N-1].\n-                n_outputs = size - tx_count\n-                output_value = ((inputs_value - fee) / Decimal(n_outputs)).quantize(Decimal('0.00000001'))\n-                outputs = {}\n-                for _ in range(n_outputs):\n-                    outputs[self.nodes[0].getnewaddress()] = output_value\n-            else:\n-                output_value = (inputs_value - fee).quantize(Decimal('0.00000001'))\n-                outputs = {end_address: output_value}\n-\n-            self.log.debug('output_value={}'.format(output_value))\n-            self.log.debug('outputs={}'.format(outputs))\n-\n-            # Create a new transaction.\n-            unsigned_raw_tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-            signed_raw_tx = self.nodes[0].signrawtransactionwithwallet(unsigned_raw_tx)\n-            tx_id.append(self.nodes[0].sendrawtransaction(signed_raw_tx['hex']))\n-            tx_size.append(self.nodes[0].getrawmempool(True)[tx_id[-1]]['vsize'])\n-\n-            if tx_count in n_tx_to_mine:\n-                # The created transactions are mined into blocks by batches.\n-                self.log.info('The batch of {} transactions has been accepted into the mempool.'.format(len(self.nodes[0].getrawmempool())))\n-                block_hash = self.nodes[0].generate(1)[0]\n-                if not first_block_hash:\n-                    first_block_hash = block_hash\n-                assert_equal(len(self.nodes[0].getrawmempool()), 0)\n+        self.wallet.generate(1)\n+        node.generate(size)\n+        txs = []\n+        block_ids = []\n+        tx_size = []\n+        for i in range(size):\n+            txs.append(self.wallet.send_self_transfer(from_node=node))\n+            tx_size.append(96)\n+            if (i+1) % n_tx_to_mine == 0:\n+                self.log.info('The batch of {} transactions has been accepted into the mempool.'\n+                .format(len(node.getrawmempool())))\n+                block_ids.append(self.wallet.generate(1)[0])\n+                assert_equal(len(node.getrawmempool()), 0)\n                 self.log.info('All of the transactions from the current batch have been mined into a block.')\n-            elif tx_count == size:\n-                # At the end all of the mined blocks are invalidated, and all of the created\n-                # transactions should be re-added from disconnected blocks to the mempool.\n-                self.log.info('The last batch of {} transactions has been accepted into the mempool.'.format(len(self.nodes[0].getrawmempool())))\n-                start = time.time()\n-                self.nodes[0].invalidateblock(first_block_hash)\n-                end = time.time()\n-                assert_equal(len(self.nodes[0].getrawmempool()), size)\n-                self.log.info('All of the recently mined transactions have been re-added into the mempool in {} seconds.'.format(end - start))\n+                self.log.info('{}'.format(block_ids))\n+                self.log.info('Block height: {}'.format(math.ceil(i / n_tx_to_mine)))\n+\n+        self.log.info('Mempool size pre-invalidation: {}'.format(len(node.getrawmempool())))\n+        assert_equal(len(node.getrawmempool()), 0)\n+        # Invalidate the first block to send the transactions back to the mempool.\n+        start = time.time()\n+        node.invalidateblock(block_ids[0])\n+        end = time.time()\n+        self.log.info('Mempool size post-invalidation: {}'.format(len(node.getrawmempool())))\n+        assert_equal(len(self.nodes[0].getrawmempool()), size)\n+        self.log.info('All of the recently mined transactions have been re-added into the mempool in {} seconds.'\n+        .format(end - start))\n \n         self.log.info('Checking descendants/ancestors properties of all of the in-mempool transactions...')\n-        for k, tx in enumerate(tx_id):\n+        k = 0\n+        for tx in txs:",
    "path": "test/functional/mempool_updatefromblock.py",
    "position": null,
    "original_position": 128,
    "commit_id": "1332dbb526f19ebf96bf3fa7c147bacd1926f7ae",
    "original_commit_id": "a02da6d8c0d4951111df7b035388f01dbe526d0a",
    "user": {
      "login": "DariusParvin",
      "id": 41220998,
      "node_id": "MDQ6VXNlcjQxMjIwOTk4",
      "avatar_url": "https://avatars.githubusercontent.com/u/41220998?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DariusParvin",
      "html_url": "https://github.com/DariusParvin",
      "followers_url": "https://api.github.com/users/DariusParvin/followers",
      "following_url": "https://api.github.com/users/DariusParvin/following{/other_user}",
      "gists_url": "https://api.github.com/users/DariusParvin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DariusParvin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DariusParvin/subscriptions",
      "organizations_url": "https://api.github.com/users/DariusParvin/orgs",
      "repos_url": "https://api.github.com/users/DariusParvin/repos",
      "events_url": "https://api.github.com/users/DariusParvin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DariusParvin/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I'm curious if there's any advantage to incrementing k manually rather than using `enumerate`? Otherwise `enumerate` seems more concise.\r\n```suggestion\r\n        for k, tx in enumerate(txs):\r\n```",
    "created_at": "2021-05-20T17:15:20Z",
    "updated_at": "2021-05-20T17:16:17Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21999#discussion_r636304223",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21999",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/636304223"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21999#discussion_r636304223"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21999"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/636304223/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 71,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/636310625",
    "pull_request_review_id": 664669323,
    "id": 636310625,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNjMxMDYyNQ==",
    "diff_hunk": "@@ -38,86 +35,52 @@ def transaction_graph_test(self, size, n_tx_to_mine=None, start_input_txid='', e\n         More details: https://en.wikipedia.org/wiki/Tournament_(graph_theory)\n         \"\"\"\n \n-        if not start_input_txid:\n-            start_input_txid = self.nodes[0].getblock(self.nodes[0].getblockhash(1))['tx'][0]\n-\n-        if not end_address:\n-            end_address = self.nodes[0].getnewaddress()\n-\n-        first_block_hash = ''\n-        tx_id = []\n-        tx_size = []\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n         self.log.info('Creating {} transactions...'.format(size))\n-        for i in range(0, size):\n-            self.log.debug('Preparing transaction #{}...'.format(i))\n-            # Prepare inputs.\n-            if i == 0:\n-                inputs = [{'txid': start_input_txid, 'vout': 0}]\n-                inputs_value = self.nodes[0].gettxout(start_input_txid, 0)['value']\n-            else:\n-                inputs = []\n-                inputs_value = 0\n-                for j, tx in enumerate(tx_id[0:i]):\n-                    # Transaction tx[K] is a child of each of previous transactions tx[0]..tx[K-1] at their output K-1.\n-                    vout = i - j - 1\n-                    inputs.append({'txid': tx_id[j], 'vout': vout})\n-                    inputs_value += self.nodes[0].gettxout(tx, vout)['value']\n-\n-            self.log.debug('inputs={}'.format(inputs))\n-            self.log.debug('inputs_value={}'.format(inputs_value))\n-\n-            # Prepare outputs.\n-            tx_count = i + 1\n-            if tx_count < size:\n-                # Transaction tx[K] is an ancestor of each of subsequent transactions tx[K+1]..tx[N-1].\n-                n_outputs = size - tx_count\n-                output_value = ((inputs_value - fee) / Decimal(n_outputs)).quantize(Decimal('0.00000001'))\n-                outputs = {}\n-                for _ in range(n_outputs):\n-                    outputs[self.nodes[0].getnewaddress()] = output_value\n-            else:\n-                output_value = (inputs_value - fee).quantize(Decimal('0.00000001'))\n-                outputs = {end_address: output_value}\n-\n-            self.log.debug('output_value={}'.format(output_value))\n-            self.log.debug('outputs={}'.format(outputs))\n-\n-            # Create a new transaction.\n-            unsigned_raw_tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-            signed_raw_tx = self.nodes[0].signrawtransactionwithwallet(unsigned_raw_tx)\n-            tx_id.append(self.nodes[0].sendrawtransaction(signed_raw_tx['hex']))\n-            tx_size.append(self.nodes[0].getrawmempool(True)[tx_id[-1]]['vsize'])\n-\n-            if tx_count in n_tx_to_mine:\n-                # The created transactions are mined into blocks by batches.\n-                self.log.info('The batch of {} transactions has been accepted into the mempool.'.format(len(self.nodes[0].getrawmempool())))\n-                block_hash = self.nodes[0].generate(1)[0]\n-                if not first_block_hash:\n-                    first_block_hash = block_hash\n-                assert_equal(len(self.nodes[0].getrawmempool()), 0)\n+        self.wallet.generate(1)\n+        node.generate(size)\n+        txs = []\n+        block_ids = []\n+        tx_size = []\n+        for i in range(size):\n+            txs.append(self.wallet.send_self_transfer(from_node=node))\n+            tx_size.append(96)\n+            if (i+1) % n_tx_to_mine == 0:\n+                self.log.info('The batch of {} transactions has been accepted into the mempool.'\n+                .format(len(node.getrawmempool())))",
    "path": "test/functional/mempool_updatefromblock.py",
    "position": null,
    "original_position": 98,
    "commit_id": "1332dbb526f19ebf96bf3fa7c147bacd1926f7ae",
    "original_commit_id": "b7c6eea86154320520fa6766c4a87f6ad4c1b899",
    "user": {
      "login": "reemuru",
      "id": 13033037,
      "node_id": "MDQ6VXNlcjEzMDMzMDM3",
      "avatar_url": "https://avatars.githubusercontent.com/u/13033037?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/reemuru",
      "html_url": "https://github.com/reemuru",
      "followers_url": "https://api.github.com/users/reemuru/followers",
      "following_url": "https://api.github.com/users/reemuru/following{/other_user}",
      "gists_url": "https://api.github.com/users/reemuru/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/reemuru/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/reemuru/subscriptions",
      "organizations_url": "https://api.github.com/users/reemuru/orgs",
      "repos_url": "https://api.github.com/users/reemuru/repos",
      "events_url": "https://api.github.com/users/reemuru/events{/privacy}",
      "received_events_url": "https://api.github.com/users/reemuru/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Nice catch! Yes will update. ",
    "created_at": "2021-05-20T17:24:57Z",
    "updated_at": "2021-05-20T17:24:57Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21999#discussion_r636310625",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21999",
    "author_association": "NONE",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/636310625"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21999#discussion_r636310625"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21999"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/636310625/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 51,
    "side": "RIGHT",
    "in_reply_to_id": 636278997
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/636311404",
    "pull_request_review_id": 664670413,
    "id": 636311404,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNjMxMTQwNA==",
    "diff_hunk": "@@ -38,86 +35,52 @@ def transaction_graph_test(self, size, n_tx_to_mine=None, start_input_txid='', e\n         More details: https://en.wikipedia.org/wiki/Tournament_(graph_theory)\n         \"\"\"\n \n-        if not start_input_txid:\n-            start_input_txid = self.nodes[0].getblock(self.nodes[0].getblockhash(1))['tx'][0]\n-\n-        if not end_address:\n-            end_address = self.nodes[0].getnewaddress()\n-\n-        first_block_hash = ''\n-        tx_id = []\n-        tx_size = []\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n         self.log.info('Creating {} transactions...'.format(size))\n-        for i in range(0, size):\n-            self.log.debug('Preparing transaction #{}...'.format(i))\n-            # Prepare inputs.\n-            if i == 0:\n-                inputs = [{'txid': start_input_txid, 'vout': 0}]\n-                inputs_value = self.nodes[0].gettxout(start_input_txid, 0)['value']\n-            else:\n-                inputs = []\n-                inputs_value = 0\n-                for j, tx in enumerate(tx_id[0:i]):\n-                    # Transaction tx[K] is a child of each of previous transactions tx[0]..tx[K-1] at their output K-1.\n-                    vout = i - j - 1\n-                    inputs.append({'txid': tx_id[j], 'vout': vout})\n-                    inputs_value += self.nodes[0].gettxout(tx, vout)['value']\n-\n-            self.log.debug('inputs={}'.format(inputs))\n-            self.log.debug('inputs_value={}'.format(inputs_value))\n-\n-            # Prepare outputs.\n-            tx_count = i + 1\n-            if tx_count < size:\n-                # Transaction tx[K] is an ancestor of each of subsequent transactions tx[K+1]..tx[N-1].\n-                n_outputs = size - tx_count\n-                output_value = ((inputs_value - fee) / Decimal(n_outputs)).quantize(Decimal('0.00000001'))\n-                outputs = {}\n-                for _ in range(n_outputs):\n-                    outputs[self.nodes[0].getnewaddress()] = output_value\n-            else:\n-                output_value = (inputs_value - fee).quantize(Decimal('0.00000001'))\n-                outputs = {end_address: output_value}\n-\n-            self.log.debug('output_value={}'.format(output_value))\n-            self.log.debug('outputs={}'.format(outputs))\n-\n-            # Create a new transaction.\n-            unsigned_raw_tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-            signed_raw_tx = self.nodes[0].signrawtransactionwithwallet(unsigned_raw_tx)\n-            tx_id.append(self.nodes[0].sendrawtransaction(signed_raw_tx['hex']))\n-            tx_size.append(self.nodes[0].getrawmempool(True)[tx_id[-1]]['vsize'])\n-\n-            if tx_count in n_tx_to_mine:\n-                # The created transactions are mined into blocks by batches.\n-                self.log.info('The batch of {} transactions has been accepted into the mempool.'.format(len(self.nodes[0].getrawmempool())))\n-                block_hash = self.nodes[0].generate(1)[0]\n-                if not first_block_hash:\n-                    first_block_hash = block_hash\n-                assert_equal(len(self.nodes[0].getrawmempool()), 0)\n+        self.wallet.generate(1)\n+        node.generate(size)\n+        txs = []\n+        block_ids = []\n+        tx_size = []\n+        for i in range(size):\n+            txs.append(self.wallet.send_self_transfer(from_node=node))\n+            tx_size.append(96)\n+            if (i+1) % n_tx_to_mine == 0:\n+                self.log.info('The batch of {} transactions has been accepted into the mempool.'\n+                .format(len(node.getrawmempool())))\n+                block_ids.append(self.wallet.generate(1)[0])\n+                assert_equal(len(node.getrawmempool()), 0)\n                 self.log.info('All of the transactions from the current batch have been mined into a block.')\n-            elif tx_count == size:\n-                # At the end all of the mined blocks are invalidated, and all of the created\n-                # transactions should be re-added from disconnected blocks to the mempool.\n-                self.log.info('The last batch of {} transactions has been accepted into the mempool.'.format(len(self.nodes[0].getrawmempool())))\n-                start = time.time()\n-                self.nodes[0].invalidateblock(first_block_hash)\n-                end = time.time()\n-                assert_equal(len(self.nodes[0].getrawmempool()), size)\n-                self.log.info('All of the recently mined transactions have been re-added into the mempool in {} seconds.'.format(end - start))\n+                self.log.info('{}'.format(block_ids))",
    "path": "test/functional/mempool_updatefromblock.py",
    "position": null,
    "original_position": 111,
    "commit_id": "1332dbb526f19ebf96bf3fa7c147bacd1926f7ae",
    "original_commit_id": "b7c6eea86154320520fa6766c4a87f6ad4c1b899",
    "user": {
      "login": "reemuru",
      "id": 13033037,
      "node_id": "MDQ6VXNlcjEzMDMzMDM3",
      "avatar_url": "https://avatars.githubusercontent.com/u/13033037?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/reemuru",
      "html_url": "https://github.com/reemuru",
      "followers_url": "https://api.github.com/users/reemuru/followers",
      "following_url": "https://api.github.com/users/reemuru/following{/other_user}",
      "gists_url": "https://api.github.com/users/reemuru/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/reemuru/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/reemuru/subscriptions",
      "organizations_url": "https://api.github.com/users/reemuru/orgs",
      "repos_url": "https://api.github.com/users/reemuru/repos",
      "events_url": "https://api.github.com/users/reemuru/events{/privacy}",
      "received_events_url": "https://api.github.com/users/reemuru/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think I was using this for debugging and set to info by mistake. Should remove this to reduce clutter on the console for sure.",
    "created_at": "2021-05-20T17:26:07Z",
    "updated_at": "2021-05-20T17:26:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21999#discussion_r636311404",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21999",
    "author_association": "NONE",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/636311404"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21999#discussion_r636311404"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21999"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/636311404/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 55,
    "side": "RIGHT",
    "in_reply_to_id": 636281765
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/636454788",
    "pull_request_review_id": 664876554,
    "id": 636454788,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNjQ1NDc4OA==",
    "diff_hunk": "@@ -38,86 +35,52 @@ def transaction_graph_test(self, size, n_tx_to_mine=None, start_input_txid='', e\n         More details: https://en.wikipedia.org/wiki/Tournament_(graph_theory)\n         \"\"\"\n \n-        if not start_input_txid:\n-            start_input_txid = self.nodes[0].getblock(self.nodes[0].getblockhash(1))['tx'][0]\n-\n-        if not end_address:\n-            end_address = self.nodes[0].getnewaddress()\n-\n-        first_block_hash = ''\n-        tx_id = []\n-        tx_size = []\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n         self.log.info('Creating {} transactions...'.format(size))\n-        for i in range(0, size):\n-            self.log.debug('Preparing transaction #{}...'.format(i))\n-            # Prepare inputs.\n-            if i == 0:\n-                inputs = [{'txid': start_input_txid, 'vout': 0}]\n-                inputs_value = self.nodes[0].gettxout(start_input_txid, 0)['value']\n-            else:\n-                inputs = []\n-                inputs_value = 0\n-                for j, tx in enumerate(tx_id[0:i]):\n-                    # Transaction tx[K] is a child of each of previous transactions tx[0]..tx[K-1] at their output K-1.\n-                    vout = i - j - 1\n-                    inputs.append({'txid': tx_id[j], 'vout': vout})\n-                    inputs_value += self.nodes[0].gettxout(tx, vout)['value']\n-\n-            self.log.debug('inputs={}'.format(inputs))\n-            self.log.debug('inputs_value={}'.format(inputs_value))\n-\n-            # Prepare outputs.\n-            tx_count = i + 1\n-            if tx_count < size:\n-                # Transaction tx[K] is an ancestor of each of subsequent transactions tx[K+1]..tx[N-1].\n-                n_outputs = size - tx_count\n-                output_value = ((inputs_value - fee) / Decimal(n_outputs)).quantize(Decimal('0.00000001'))\n-                outputs = {}\n-                for _ in range(n_outputs):\n-                    outputs[self.nodes[0].getnewaddress()] = output_value\n-            else:\n-                output_value = (inputs_value - fee).quantize(Decimal('0.00000001'))\n-                outputs = {end_address: output_value}\n-\n-            self.log.debug('output_value={}'.format(output_value))\n-            self.log.debug('outputs={}'.format(outputs))\n-\n-            # Create a new transaction.\n-            unsigned_raw_tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-            signed_raw_tx = self.nodes[0].signrawtransactionwithwallet(unsigned_raw_tx)\n-            tx_id.append(self.nodes[0].sendrawtransaction(signed_raw_tx['hex']))\n-            tx_size.append(self.nodes[0].getrawmempool(True)[tx_id[-1]]['vsize'])\n-\n-            if tx_count in n_tx_to_mine:\n-                # The created transactions are mined into blocks by batches.\n-                self.log.info('The batch of {} transactions has been accepted into the mempool.'.format(len(self.nodes[0].getrawmempool())))\n-                block_hash = self.nodes[0].generate(1)[0]\n-                if not first_block_hash:\n-                    first_block_hash = block_hash\n-                assert_equal(len(self.nodes[0].getrawmempool()), 0)\n+        self.wallet.generate(1)\n+        node.generate(size)\n+        txs = []\n+        block_ids = []\n+        tx_size = []\n+        for i in range(size):\n+            txs.append(self.wallet.send_self_transfer(from_node=node))\n+            tx_size.append(96)\n+            if (i+1) % n_tx_to_mine == 0:\n+                self.log.info('The batch of {} transactions has been accepted into the mempool.'\n+                .format(len(node.getrawmempool())))\n+                block_ids.append(self.wallet.generate(1)[0])\n+                assert_equal(len(node.getrawmempool()), 0)\n                 self.log.info('All of the transactions from the current batch have been mined into a block.')\n-            elif tx_count == size:\n-                # At the end all of the mined blocks are invalidated, and all of the created\n-                # transactions should be re-added from disconnected blocks to the mempool.\n-                self.log.info('The last batch of {} transactions has been accepted into the mempool.'.format(len(self.nodes[0].getrawmempool())))\n-                start = time.time()\n-                self.nodes[0].invalidateblock(first_block_hash)\n-                end = time.time()\n-                assert_equal(len(self.nodes[0].getrawmempool()), size)\n-                self.log.info('All of the recently mined transactions have been re-added into the mempool in {} seconds.'.format(end - start))\n+                self.log.info('{}'.format(block_ids))",
    "path": "test/functional/mempool_updatefromblock.py",
    "position": null,
    "original_position": 111,
    "commit_id": "1332dbb526f19ebf96bf3fa7c147bacd1926f7ae",
    "original_commit_id": "b7c6eea86154320520fa6766c4a87f6ad4c1b899",
    "user": {
      "login": "reemuru",
      "id": 13033037,
      "node_id": "MDQ6VXNlcjEzMDMzMDM3",
      "avatar_url": "https://avatars.githubusercontent.com/u/13033037?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/reemuru",
      "html_url": "https://github.com/reemuru",
      "followers_url": "https://api.github.com/users/reemuru/followers",
      "following_url": "https://api.github.com/users/reemuru/following{/other_user}",
      "gists_url": "https://api.github.com/users/reemuru/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/reemuru/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/reemuru/subscriptions",
      "organizations_url": "https://api.github.com/users/reemuru/orgs",
      "repos_url": "https://api.github.com/users/reemuru/repos",
      "events_url": "https://api.github.com/users/reemuru/events{/privacy}",
      "received_events_url": "https://api.github.com/users/reemuru/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Updated with ac8b08b",
    "created_at": "2021-05-20T20:39:39Z",
    "updated_at": "2021-05-20T20:39:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21999#discussion_r636454788",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21999",
    "author_association": "NONE",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/636454788"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21999#discussion_r636454788"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21999"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/636454788/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 55,
    "side": "RIGHT",
    "in_reply_to_id": 636281765
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/636455248",
    "pull_request_review_id": 664877190,
    "id": 636455248,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNjQ1NTI0OA==",
    "diff_hunk": "@@ -38,86 +35,52 @@ def transaction_graph_test(self, size, n_tx_to_mine=None, start_input_txid='', e\n         More details: https://en.wikipedia.org/wiki/Tournament_(graph_theory)\n         \"\"\"\n \n-        if not start_input_txid:\n-            start_input_txid = self.nodes[0].getblock(self.nodes[0].getblockhash(1))['tx'][0]\n-\n-        if not end_address:\n-            end_address = self.nodes[0].getnewaddress()\n-\n-        first_block_hash = ''\n-        tx_id = []\n-        tx_size = []\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n         self.log.info('Creating {} transactions...'.format(size))\n-        for i in range(0, size):\n-            self.log.debug('Preparing transaction #{}...'.format(i))\n-            # Prepare inputs.\n-            if i == 0:\n-                inputs = [{'txid': start_input_txid, 'vout': 0}]\n-                inputs_value = self.nodes[0].gettxout(start_input_txid, 0)['value']\n-            else:\n-                inputs = []\n-                inputs_value = 0\n-                for j, tx in enumerate(tx_id[0:i]):\n-                    # Transaction tx[K] is a child of each of previous transactions tx[0]..tx[K-1] at their output K-1.\n-                    vout = i - j - 1\n-                    inputs.append({'txid': tx_id[j], 'vout': vout})\n-                    inputs_value += self.nodes[0].gettxout(tx, vout)['value']\n-\n-            self.log.debug('inputs={}'.format(inputs))\n-            self.log.debug('inputs_value={}'.format(inputs_value))\n-\n-            # Prepare outputs.\n-            tx_count = i + 1\n-            if tx_count < size:\n-                # Transaction tx[K] is an ancestor of each of subsequent transactions tx[K+1]..tx[N-1].\n-                n_outputs = size - tx_count\n-                output_value = ((inputs_value - fee) / Decimal(n_outputs)).quantize(Decimal('0.00000001'))\n-                outputs = {}\n-                for _ in range(n_outputs):\n-                    outputs[self.nodes[0].getnewaddress()] = output_value\n-            else:\n-                output_value = (inputs_value - fee).quantize(Decimal('0.00000001'))\n-                outputs = {end_address: output_value}\n-\n-            self.log.debug('output_value={}'.format(output_value))\n-            self.log.debug('outputs={}'.format(outputs))\n-\n-            # Create a new transaction.\n-            unsigned_raw_tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-            signed_raw_tx = self.nodes[0].signrawtransactionwithwallet(unsigned_raw_tx)\n-            tx_id.append(self.nodes[0].sendrawtransaction(signed_raw_tx['hex']))\n-            tx_size.append(self.nodes[0].getrawmempool(True)[tx_id[-1]]['vsize'])\n-\n-            if tx_count in n_tx_to_mine:\n-                # The created transactions are mined into blocks by batches.\n-                self.log.info('The batch of {} transactions has been accepted into the mempool.'.format(len(self.nodes[0].getrawmempool())))\n-                block_hash = self.nodes[0].generate(1)[0]\n-                if not first_block_hash:\n-                    first_block_hash = block_hash\n-                assert_equal(len(self.nodes[0].getrawmempool()), 0)\n+        self.wallet.generate(1)\n+        node.generate(size)\n+        txs = []\n+        block_ids = []\n+        tx_size = []\n+        for i in range(size):\n+            txs.append(self.wallet.send_self_transfer(from_node=node))\n+            tx_size.append(96)\n+            if (i+1) % n_tx_to_mine == 0:\n+                self.log.info('The batch of {} transactions has been accepted into the mempool.'\n+                .format(len(node.getrawmempool())))\n+                block_ids.append(self.wallet.generate(1)[0])\n+                assert_equal(len(node.getrawmempool()), 0)\n                 self.log.info('All of the transactions from the current batch have been mined into a block.')\n-            elif tx_count == size:\n-                # At the end all of the mined blocks are invalidated, and all of the created\n-                # transactions should be re-added from disconnected blocks to the mempool.\n-                self.log.info('The last batch of {} transactions has been accepted into the mempool.'.format(len(self.nodes[0].getrawmempool())))\n-                start = time.time()\n-                self.nodes[0].invalidateblock(first_block_hash)\n-                end = time.time()\n-                assert_equal(len(self.nodes[0].getrawmempool()), size)\n-                self.log.info('All of the recently mined transactions have been re-added into the mempool in {} seconds.'.format(end - start))\n+                self.log.info('{}'.format(block_ids))\n+                self.log.info('Block height: {}'.format(math.ceil(i / n_tx_to_mine)))",
    "path": "test/functional/mempool_updatefromblock.py",
    "position": null,
    "original_position": 112,
    "commit_id": "1332dbb526f19ebf96bf3fa7c147bacd1926f7ae",
    "original_commit_id": "b7c6eea86154320520fa6766c4a87f6ad4c1b899",
    "user": {
      "login": "reemuru",
      "id": 13033037,
      "node_id": "MDQ6VXNlcjEzMDMzMDM3",
      "avatar_url": "https://avatars.githubusercontent.com/u/13033037?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/reemuru",
      "html_url": "https://github.com/reemuru",
      "followers_url": "https://api.github.com/users/reemuru/followers",
      "following_url": "https://api.github.com/users/reemuru/following{/other_user}",
      "gists_url": "https://api.github.com/users/reemuru/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/reemuru/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/reemuru/subscriptions",
      "organizations_url": "https://api.github.com/users/reemuru/orgs",
      "repos_url": "https://api.github.com/users/reemuru/repos",
      "events_url": "https://api.github.com/users/reemuru/events{/privacy}",
      "received_events_url": "https://api.github.com/users/reemuru/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Yeah, not sure what I thinking here. Could've just use len(block_ids) as well. Removed in ac8b08b",
    "created_at": "2021-05-20T20:40:30Z",
    "updated_at": "2021-05-20T20:40:30Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21999#discussion_r636455248",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21999",
    "author_association": "NONE",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/636455248"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21999#discussion_r636455248"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21999"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/636455248/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 56,
    "side": "RIGHT",
    "in_reply_to_id": 636285450
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/636455787",
    "pull_request_review_id": 664877892,
    "id": 636455787,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNjQ1NTc4Nw==",
    "diff_hunk": "@@ -38,86 +35,52 @@ def transaction_graph_test(self, size, n_tx_to_mine=None, start_input_txid='', e\n         More details: https://en.wikipedia.org/wiki/Tournament_(graph_theory)\n         \"\"\"\n \n-        if not start_input_txid:\n-            start_input_txid = self.nodes[0].getblock(self.nodes[0].getblockhash(1))['tx'][0]\n-\n-        if not end_address:\n-            end_address = self.nodes[0].getnewaddress()\n-\n-        first_block_hash = ''\n-        tx_id = []\n-        tx_size = []\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n         self.log.info('Creating {} transactions...'.format(size))\n-        for i in range(0, size):\n-            self.log.debug('Preparing transaction #{}...'.format(i))\n-            # Prepare inputs.\n-            if i == 0:\n-                inputs = [{'txid': start_input_txid, 'vout': 0}]\n-                inputs_value = self.nodes[0].gettxout(start_input_txid, 0)['value']\n-            else:\n-                inputs = []\n-                inputs_value = 0\n-                for j, tx in enumerate(tx_id[0:i]):\n-                    # Transaction tx[K] is a child of each of previous transactions tx[0]..tx[K-1] at their output K-1.\n-                    vout = i - j - 1\n-                    inputs.append({'txid': tx_id[j], 'vout': vout})\n-                    inputs_value += self.nodes[0].gettxout(tx, vout)['value']\n-\n-            self.log.debug('inputs={}'.format(inputs))\n-            self.log.debug('inputs_value={}'.format(inputs_value))\n-\n-            # Prepare outputs.\n-            tx_count = i + 1\n-            if tx_count < size:\n-                # Transaction tx[K] is an ancestor of each of subsequent transactions tx[K+1]..tx[N-1].\n-                n_outputs = size - tx_count\n-                output_value = ((inputs_value - fee) / Decimal(n_outputs)).quantize(Decimal('0.00000001'))\n-                outputs = {}\n-                for _ in range(n_outputs):\n-                    outputs[self.nodes[0].getnewaddress()] = output_value\n-            else:\n-                output_value = (inputs_value - fee).quantize(Decimal('0.00000001'))\n-                outputs = {end_address: output_value}\n-\n-            self.log.debug('output_value={}'.format(output_value))\n-            self.log.debug('outputs={}'.format(outputs))\n-\n-            # Create a new transaction.\n-            unsigned_raw_tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-            signed_raw_tx = self.nodes[0].signrawtransactionwithwallet(unsigned_raw_tx)\n-            tx_id.append(self.nodes[0].sendrawtransaction(signed_raw_tx['hex']))\n-            tx_size.append(self.nodes[0].getrawmempool(True)[tx_id[-1]]['vsize'])\n-\n-            if tx_count in n_tx_to_mine:\n-                # The created transactions are mined into blocks by batches.\n-                self.log.info('The batch of {} transactions has been accepted into the mempool.'.format(len(self.nodes[0].getrawmempool())))\n-                block_hash = self.nodes[0].generate(1)[0]\n-                if not first_block_hash:\n-                    first_block_hash = block_hash\n-                assert_equal(len(self.nodes[0].getrawmempool()), 0)\n+        self.wallet.generate(1)",
    "path": "test/functional/mempool_updatefromblock.py",
    "position": null,
    "original_position": 88,
    "commit_id": "1332dbb526f19ebf96bf3fa7c147bacd1926f7ae",
    "original_commit_id": "a02da6d8c0d4951111df7b035388f01dbe526d0a",
    "user": {
      "login": "reemuru",
      "id": 13033037,
      "node_id": "MDQ6VXNlcjEzMDMzMDM3",
      "avatar_url": "https://avatars.githubusercontent.com/u/13033037?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/reemuru",
      "html_url": "https://github.com/reemuru",
      "followers_url": "https://api.github.com/users/reemuru/followers",
      "following_url": "https://api.github.com/users/reemuru/following{/other_user}",
      "gists_url": "https://api.github.com/users/reemuru/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/reemuru/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/reemuru/subscriptions",
      "organizations_url": "https://api.github.com/users/reemuru/orgs",
      "repos_url": "https://api.github.com/users/reemuru/repos",
      "events_url": "https://api.github.com/users/reemuru/events{/privacy}",
      "received_events_url": "https://api.github.com/users/reemuru/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Ah, I see. I was wondering how to implement the scan_blocks() but wasn't sure. Thanks! ac8b08b",
    "created_at": "2021-05-20T20:41:25Z",
    "updated_at": "2021-05-20T20:41:25Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21999#discussion_r636455787",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21999",
    "author_association": "NONE",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/636455787"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21999#discussion_r636455787"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21999"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/636455787/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 41,
    "side": "RIGHT",
    "in_reply_to_id": 636298155
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/636456525",
    "pull_request_review_id": 664878809,
    "id": 636456525,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNjQ1NjUyNQ==",
    "diff_hunk": "@@ -38,86 +35,52 @@ def transaction_graph_test(self, size, n_tx_to_mine=None, start_input_txid='', e\n         More details: https://en.wikipedia.org/wiki/Tournament_(graph_theory)\n         \"\"\"\n \n-        if not start_input_txid:\n-            start_input_txid = self.nodes[0].getblock(self.nodes[0].getblockhash(1))['tx'][0]\n-\n-        if not end_address:\n-            end_address = self.nodes[0].getnewaddress()\n-\n-        first_block_hash = ''\n-        tx_id = []\n-        tx_size = []\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n         self.log.info('Creating {} transactions...'.format(size))\n-        for i in range(0, size):\n-            self.log.debug('Preparing transaction #{}...'.format(i))\n-            # Prepare inputs.\n-            if i == 0:\n-                inputs = [{'txid': start_input_txid, 'vout': 0}]\n-                inputs_value = self.nodes[0].gettxout(start_input_txid, 0)['value']\n-            else:\n-                inputs = []\n-                inputs_value = 0\n-                for j, tx in enumerate(tx_id[0:i]):\n-                    # Transaction tx[K] is a child of each of previous transactions tx[0]..tx[K-1] at their output K-1.\n-                    vout = i - j - 1\n-                    inputs.append({'txid': tx_id[j], 'vout': vout})\n-                    inputs_value += self.nodes[0].gettxout(tx, vout)['value']\n-\n-            self.log.debug('inputs={}'.format(inputs))\n-            self.log.debug('inputs_value={}'.format(inputs_value))\n-\n-            # Prepare outputs.\n-            tx_count = i + 1\n-            if tx_count < size:\n-                # Transaction tx[K] is an ancestor of each of subsequent transactions tx[K+1]..tx[N-1].\n-                n_outputs = size - tx_count\n-                output_value = ((inputs_value - fee) / Decimal(n_outputs)).quantize(Decimal('0.00000001'))\n-                outputs = {}\n-                for _ in range(n_outputs):\n-                    outputs[self.nodes[0].getnewaddress()] = output_value\n-            else:\n-                output_value = (inputs_value - fee).quantize(Decimal('0.00000001'))\n-                outputs = {end_address: output_value}\n-\n-            self.log.debug('output_value={}'.format(output_value))\n-            self.log.debug('outputs={}'.format(outputs))\n-\n-            # Create a new transaction.\n-            unsigned_raw_tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-            signed_raw_tx = self.nodes[0].signrawtransactionwithwallet(unsigned_raw_tx)\n-            tx_id.append(self.nodes[0].sendrawtransaction(signed_raw_tx['hex']))\n-            tx_size.append(self.nodes[0].getrawmempool(True)[tx_id[-1]]['vsize'])\n-\n-            if tx_count in n_tx_to_mine:\n-                # The created transactions are mined into blocks by batches.\n-                self.log.info('The batch of {} transactions has been accepted into the mempool.'.format(len(self.nodes[0].getrawmempool())))\n-                block_hash = self.nodes[0].generate(1)[0]\n-                if not first_block_hash:\n-                    first_block_hash = block_hash\n-                assert_equal(len(self.nodes[0].getrawmempool()), 0)\n+        self.wallet.generate(1)\n+        node.generate(size)\n+        txs = []\n+        block_ids = []\n+        tx_size = []\n+        for i in range(size):\n+            txs.append(self.wallet.send_self_transfer(from_node=node))\n+            tx_size.append(96)\n+            if (i+1) % n_tx_to_mine == 0:\n+                self.log.info('The batch of {} transactions has been accepted into the mempool.'\n+                .format(len(node.getrawmempool())))\n+                block_ids.append(self.wallet.generate(1)[0])\n+                assert_equal(len(node.getrawmempool()), 0)\n                 self.log.info('All of the transactions from the current batch have been mined into a block.')\n-            elif tx_count == size:\n-                # At the end all of the mined blocks are invalidated, and all of the created\n-                # transactions should be re-added from disconnected blocks to the mempool.\n-                self.log.info('The last batch of {} transactions has been accepted into the mempool.'.format(len(self.nodes[0].getrawmempool())))\n-                start = time.time()\n-                self.nodes[0].invalidateblock(first_block_hash)\n-                end = time.time()\n-                assert_equal(len(self.nodes[0].getrawmempool()), size)\n-                self.log.info('All of the recently mined transactions have been re-added into the mempool in {} seconds.'.format(end - start))\n+                self.log.info('{}'.format(block_ids))\n+                self.log.info('Block height: {}'.format(math.ceil(i / n_tx_to_mine)))\n+\n+        self.log.info('Mempool size pre-invalidation: {}'.format(len(node.getrawmempool())))\n+        assert_equal(len(node.getrawmempool()), 0)\n+        # Invalidate the first block to send the transactions back to the mempool.\n+        start = time.time()\n+        node.invalidateblock(block_ids[0])\n+        end = time.time()\n+        self.log.info('Mempool size post-invalidation: {}'.format(len(node.getrawmempool())))\n+        assert_equal(len(self.nodes[0].getrawmempool()), size)\n+        self.log.info('All of the recently mined transactions have been re-added into the mempool in {} seconds.'\n+        .format(end - start))\n \n         self.log.info('Checking descendants/ancestors properties of all of the in-mempool transactions...')\n-        for k, tx in enumerate(tx_id):\n+        k = 0\n+        for tx in txs:",
    "path": "test/functional/mempool_updatefromblock.py",
    "position": null,
    "original_position": 128,
    "commit_id": "1332dbb526f19ebf96bf3fa7c147bacd1926f7ae",
    "original_commit_id": "a02da6d8c0d4951111df7b035388f01dbe526d0a",
    "user": {
      "login": "reemuru",
      "id": 13033037,
      "node_id": "MDQ6VXNlcjEzMDMzMDM3",
      "avatar_url": "https://avatars.githubusercontent.com/u/13033037?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/reemuru",
      "html_url": "https://github.com/reemuru",
      "followers_url": "https://api.github.com/users/reemuru/followers",
      "following_url": "https://api.github.com/users/reemuru/following{/other_user}",
      "gists_url": "https://api.github.com/users/reemuru/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/reemuru/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/reemuru/subscriptions",
      "organizations_url": "https://api.github.com/users/reemuru/orgs",
      "repos_url": "https://api.github.com/users/reemuru/repos",
      "events_url": "https://api.github.com/users/reemuru/events{/privacy}",
      "received_events_url": "https://api.github.com/users/reemuru/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I checked and there is no significant difference in test execution time. Using enumerate ac8b08b",
    "created_at": "2021-05-20T20:42:37Z",
    "updated_at": "2021-05-20T20:42:38Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21999#discussion_r636456525",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21999",
    "author_association": "NONE",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/636456525"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21999#discussion_r636456525"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21999"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/636456525/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 71,
    "side": "RIGHT",
    "in_reply_to_id": 636304223
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/636457558",
    "pull_request_review_id": 664880099,
    "id": 636457558,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNjQ1NzU1OA==",
    "diff_hunk": "@@ -38,86 +35,52 @@ def transaction_graph_test(self, size, n_tx_to_mine=None, start_input_txid='', e\n         More details: https://en.wikipedia.org/wiki/Tournament_(graph_theory)\n         \"\"\"\n \n-        if not start_input_txid:\n-            start_input_txid = self.nodes[0].getblock(self.nodes[0].getblockhash(1))['tx'][0]\n-\n-        if not end_address:\n-            end_address = self.nodes[0].getnewaddress()\n-\n-        first_block_hash = ''\n-        tx_id = []\n-        tx_size = []\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n         self.log.info('Creating {} transactions...'.format(size))\n-        for i in range(0, size):\n-            self.log.debug('Preparing transaction #{}...'.format(i))\n-            # Prepare inputs.\n-            if i == 0:\n-                inputs = [{'txid': start_input_txid, 'vout': 0}]\n-                inputs_value = self.nodes[0].gettxout(start_input_txid, 0)['value']\n-            else:\n-                inputs = []\n-                inputs_value = 0\n-                for j, tx in enumerate(tx_id[0:i]):\n-                    # Transaction tx[K] is a child of each of previous transactions tx[0]..tx[K-1] at their output K-1.\n-                    vout = i - j - 1\n-                    inputs.append({'txid': tx_id[j], 'vout': vout})\n-                    inputs_value += self.nodes[0].gettxout(tx, vout)['value']\n-\n-            self.log.debug('inputs={}'.format(inputs))\n-            self.log.debug('inputs_value={}'.format(inputs_value))\n-\n-            # Prepare outputs.\n-            tx_count = i + 1\n-            if tx_count < size:\n-                # Transaction tx[K] is an ancestor of each of subsequent transactions tx[K+1]..tx[N-1].\n-                n_outputs = size - tx_count\n-                output_value = ((inputs_value - fee) / Decimal(n_outputs)).quantize(Decimal('0.00000001'))\n-                outputs = {}\n-                for _ in range(n_outputs):\n-                    outputs[self.nodes[0].getnewaddress()] = output_value\n-            else:\n-                output_value = (inputs_value - fee).quantize(Decimal('0.00000001'))\n-                outputs = {end_address: output_value}\n-\n-            self.log.debug('output_value={}'.format(output_value))\n-            self.log.debug('outputs={}'.format(outputs))\n-\n-            # Create a new transaction.\n-            unsigned_raw_tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-            signed_raw_tx = self.nodes[0].signrawtransactionwithwallet(unsigned_raw_tx)\n-            tx_id.append(self.nodes[0].sendrawtransaction(signed_raw_tx['hex']))\n-            tx_size.append(self.nodes[0].getrawmempool(True)[tx_id[-1]]['vsize'])\n-\n-            if tx_count in n_tx_to_mine:\n-                # The created transactions are mined into blocks by batches.\n-                self.log.info('The batch of {} transactions has been accepted into the mempool.'.format(len(self.nodes[0].getrawmempool())))\n-                block_hash = self.nodes[0].generate(1)[0]\n-                if not first_block_hash:\n-                    first_block_hash = block_hash\n-                assert_equal(len(self.nodes[0].getrawmempool()), 0)\n+        self.wallet.generate(1)\n+        node.generate(size)\n+        txs = []\n+        block_ids = []\n+        tx_size = []\n+        for i in range(size):\n+            txs.append(self.wallet.send_self_transfer(from_node=node))\n+            tx_size.append(96)\n+            if (i+1) % n_tx_to_mine == 0:\n+                self.log.info('The batch of {} transactions has been accepted into the mempool.'",
    "path": "test/functional/mempool_updatefromblock.py",
    "position": 118,
    "original_position": 97,
    "commit_id": "1332dbb526f19ebf96bf3fa7c147bacd1926f7ae",
    "original_commit_id": "a02da6d8c0d4951111df7b035388f01dbe526d0a",
    "user": {
      "login": "reemuru",
      "id": 13033037,
      "node_id": "MDQ6VXNlcjEzMDMzMDM3",
      "avatar_url": "https://avatars.githubusercontent.com/u/13033037?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/reemuru",
      "html_url": "https://github.com/reemuru",
      "followers_url": "https://api.github.com/users/reemuru/followers",
      "following_url": "https://api.github.com/users/reemuru/following{/other_user}",
      "gists_url": "https://api.github.com/users/reemuru/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/reemuru/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/reemuru/subscriptions",
      "organizations_url": "https://api.github.com/users/reemuru/orgs",
      "repos_url": "https://api.github.com/users/reemuru/repos",
      "events_url": "https://api.github.com/users/reemuru/events{/privacy}",
      "received_events_url": "https://api.github.com/users/reemuru/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Shoots, I thought I had that but it was just assert for mempool after mining a block. Updated ac8b08b",
    "created_at": "2021-05-20T20:44:17Z",
    "updated_at": "2021-05-20T20:44:17Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21999#discussion_r636457558",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21999",
    "author_association": "NONE",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/636457558"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21999#discussion_r636457558"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21999"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/636457558/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 58,
    "original_line": 58,
    "side": "RIGHT",
    "in_reply_to_id": 636302051
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/675698079",
    "pull_request_review_id": 713904995,
    "id": 675698079,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NTY5ODA3OQ==",
    "diff_hunk": "@@ -38,86 +34,49 @@ def transaction_graph_test(self, size, n_tx_to_mine=None, start_input_txid='', e\n         More details: https://en.wikipedia.org/wiki/Tournament_(graph_theory)\n         \"\"\"",
    "path": "test/functional/mempool_updatefromblock.py",
    "position": 38,
    "original_position": 25,
    "commit_id": "1332dbb526f19ebf96bf3fa7c147bacd1926f7ae",
    "original_commit_id": "df07919caa36d1345590010f5552d9e24db2bbde",
    "user": {
      "login": "sriramdvt",
      "id": 41079588,
      "node_id": "MDQ6VXNlcjQxMDc5NTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/41079588?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sriramdvt",
      "html_url": "https://github.com/sriramdvt",
      "followers_url": "https://api.github.com/users/sriramdvt/followers",
      "following_url": "https://api.github.com/users/sriramdvt/following{/other_user}",
      "gists_url": "https://api.github.com/users/sriramdvt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sriramdvt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sriramdvt/subscriptions",
      "organizations_url": "https://api.github.com/users/sriramdvt/orgs",
      "repos_url": "https://api.github.com/users/sriramdvt/repos",
      "events_url": "https://api.github.com/users/sriramdvt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sriramdvt/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "The old implementation of the test explicitly sets the ancestors and descendants of each transaction to form an acyclic tournament. However, `wallet.send_self_transfer()` only explicitly sets one ancestor for each transaction to form something like a singly linked list of `size` number of transactions. The acyclic tournament is then formed by the mempool. It would perhaps be a good idea to mention this in the description of `transaction_graph_test`",
    "created_at": "2021-07-23T16:42:21Z",
    "updated_at": "2021-07-23T16:57:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21999#discussion_r675698079",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21999",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/675698079"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21999#discussion_r675698079"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21999"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/675698079/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 41,
    "original_line": 41,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/675701681",
    "pull_request_review_id": 713904995,
    "id": 675701681,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NTcwMTY4MQ==",
    "diff_hunk": "@@ -38,86 +34,49 @@ def transaction_graph_test(self, size, n_tx_to_mine=None, start_input_txid='', e\n         More details: https://en.wikipedia.org/wiki/Tournament_(graph_theory)\n         \"\"\"\n \n-        if not start_input_txid:\n-            start_input_txid = self.nodes[0].getblock(self.nodes[0].getblockhash(1))['tx'][0]\n-\n-        if not end_address:\n-            end_address = self.nodes[0].getnewaddress()\n-\n-        first_block_hash = ''\n-        tx_id = []\n-        tx_size = []\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n         self.log.info('Creating {} transactions...'.format(size))\n-        for i in range(0, size):\n-            self.log.debug('Preparing transaction #{}...'.format(i))\n-            # Prepare inputs.\n-            if i == 0:\n-                inputs = [{'txid': start_input_txid, 'vout': 0}]\n-                inputs_value = self.nodes[0].gettxout(start_input_txid, 0)['value']\n-            else:\n-                inputs = []\n-                inputs_value = 0\n-                for j, tx in enumerate(tx_id[0:i]):\n-                    # Transaction tx[K] is a child of each of previous transactions tx[0]..tx[K-1] at their output K-1.\n-                    vout = i - j - 1\n-                    inputs.append({'txid': tx_id[j], 'vout': vout})\n-                    inputs_value += self.nodes[0].gettxout(tx, vout)['value']\n-\n-            self.log.debug('inputs={}'.format(inputs))\n-            self.log.debug('inputs_value={}'.format(inputs_value))\n-\n-            # Prepare outputs.\n-            tx_count = i + 1\n-            if tx_count < size:\n-                # Transaction tx[K] is an ancestor of each of subsequent transactions tx[K+1]..tx[N-1].\n-                n_outputs = size - tx_count\n-                output_value = ((inputs_value - fee) / Decimal(n_outputs)).quantize(Decimal('0.00000001'))\n-                outputs = {}\n-                for _ in range(n_outputs):\n-                    outputs[self.nodes[0].getnewaddress()] = output_value\n-            else:\n-                output_value = (inputs_value - fee).quantize(Decimal('0.00000001'))\n-                outputs = {end_address: output_value}\n-\n-            self.log.debug('output_value={}'.format(output_value))\n-            self.log.debug('outputs={}'.format(outputs))\n-\n-            # Create a new transaction.\n-            unsigned_raw_tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-            signed_raw_tx = self.nodes[0].signrawtransactionwithwallet(unsigned_raw_tx)\n-            tx_id.append(self.nodes[0].sendrawtransaction(signed_raw_tx['hex']))\n-            tx_size.append(self.nodes[0].getrawmempool(True)[tx_id[-1]]['vsize'])\n-\n-            if tx_count in n_tx_to_mine:\n-                # The created transactions are mined into blocks by batches.\n-                self.log.info('The batch of {} transactions has been accepted into the mempool.'.format(len(self.nodes[0].getrawmempool())))\n-                block_hash = self.nodes[0].generate(1)[0]\n-                if not first_block_hash:\n-                    first_block_hash = block_hash\n-                assert_equal(len(self.nodes[0].getrawmempool()), 0)\n+        self.wallet.scan_blocks(start=76, num=1)\n+        node.generate(size)\n+        txs = []\n+        block_ids = []\n+        tx_size = []\n+        for i in range(size):\n+            txs.append(self.wallet.send_self_transfer(from_node=node))\n+            tx_size.append(96)",
    "path": "test/functional/mempool_updatefromblock.py",
    "position": null,
    "original_position": 93,
    "commit_id": "1332dbb526f19ebf96bf3fa7c147bacd1926f7ae",
    "original_commit_id": "df07919caa36d1345590010f5552d9e24db2bbde",
    "user": {
      "login": "sriramdvt",
      "id": 41079588,
      "node_id": "MDQ6VXNlcjQxMDc5NTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/41079588?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sriramdvt",
      "html_url": "https://github.com/sriramdvt",
      "followers_url": "https://api.github.com/users/sriramdvt/followers",
      "following_url": "https://api.github.com/users/sriramdvt/following{/other_user}",
      "gists_url": "https://api.github.com/users/sriramdvt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sriramdvt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sriramdvt/subscriptions",
      "organizations_url": "https://api.github.com/users/sriramdvt/orgs",
      "repos_url": "https://api.github.com/users/sriramdvt/repos",
      "events_url": "https://api.github.com/users/sriramdvt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sriramdvt/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In the earlier implementation of MiniWallet, `tx_size` had only one fixed value. To account for the varying sizes of transactions in the MiniWallet, it would be a better idea to calculate the transaction size from the transaction returned by `send_self_transfer`.",
    "created_at": "2021-07-23T16:48:16Z",
    "updated_at": "2021-07-23T16:57:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21999#discussion_r675701681",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21999",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/675701681"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21999#discussion_r675701681"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21999"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/675701681/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 46,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 47,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/675703904",
    "pull_request_review_id": 713904995,
    "id": 675703904,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NTcwMzkwNA==",
    "diff_hunk": "@@ -38,86 +34,49 @@ def transaction_graph_test(self, size, n_tx_to_mine=None, start_input_txid='', e\n         More details: https://en.wikipedia.org/wiki/Tournament_(graph_theory)\n         \"\"\"\n \n-        if not start_input_txid:\n-            start_input_txid = self.nodes[0].getblock(self.nodes[0].getblockhash(1))['tx'][0]\n-\n-        if not end_address:\n-            end_address = self.nodes[0].getnewaddress()\n-\n-        first_block_hash = ''\n-        tx_id = []\n-        tx_size = []\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n         self.log.info('Creating {} transactions...'.format(size))\n-        for i in range(0, size):\n-            self.log.debug('Preparing transaction #{}...'.format(i))\n-            # Prepare inputs.\n-            if i == 0:\n-                inputs = [{'txid': start_input_txid, 'vout': 0}]\n-                inputs_value = self.nodes[0].gettxout(start_input_txid, 0)['value']\n-            else:\n-                inputs = []\n-                inputs_value = 0\n-                for j, tx in enumerate(tx_id[0:i]):\n-                    # Transaction tx[K] is a child of each of previous transactions tx[0]..tx[K-1] at their output K-1.\n-                    vout = i - j - 1\n-                    inputs.append({'txid': tx_id[j], 'vout': vout})\n-                    inputs_value += self.nodes[0].gettxout(tx, vout)['value']\n-\n-            self.log.debug('inputs={}'.format(inputs))\n-            self.log.debug('inputs_value={}'.format(inputs_value))\n-\n-            # Prepare outputs.\n-            tx_count = i + 1\n-            if tx_count < size:\n-                # Transaction tx[K] is an ancestor of each of subsequent transactions tx[K+1]..tx[N-1].\n-                n_outputs = size - tx_count\n-                output_value = ((inputs_value - fee) / Decimal(n_outputs)).quantize(Decimal('0.00000001'))\n-                outputs = {}\n-                for _ in range(n_outputs):\n-                    outputs[self.nodes[0].getnewaddress()] = output_value\n-            else:\n-                output_value = (inputs_value - fee).quantize(Decimal('0.00000001'))\n-                outputs = {end_address: output_value}\n-\n-            self.log.debug('output_value={}'.format(output_value))\n-            self.log.debug('outputs={}'.format(outputs))\n-\n-            # Create a new transaction.\n-            unsigned_raw_tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-            signed_raw_tx = self.nodes[0].signrawtransactionwithwallet(unsigned_raw_tx)\n-            tx_id.append(self.nodes[0].sendrawtransaction(signed_raw_tx['hex']))\n-            tx_size.append(self.nodes[0].getrawmempool(True)[tx_id[-1]]['vsize'])\n-\n-            if tx_count in n_tx_to_mine:\n-                # The created transactions are mined into blocks by batches.\n-                self.log.info('The batch of {} transactions has been accepted into the mempool.'.format(len(self.nodes[0].getrawmempool())))\n-                block_hash = self.nodes[0].generate(1)[0]\n-                if not first_block_hash:\n-                    first_block_hash = block_hash\n-                assert_equal(len(self.nodes[0].getrawmempool()), 0)\n+        self.wallet.scan_blocks(start=76, num=1)\n+        node.generate(size)\n+        txs = []\n+        block_ids = []\n+        tx_size = []\n+        for i in range(size):\n+            txs.append(self.wallet.send_self_transfer(from_node=node))\n+            tx_size.append(96)\n+            if (i+1) % n_tx_to_mine == 0:\n+                assert_equal(len(node.getrawmempool()), n_tx_to_mine)\n+                self.log.info('The batch of {} transactions has been accepted into the mempool.'\n+                .format(n_tx_to_mine))\n+                block_ids.append(self.wallet.generate(1)[0])\n+                assert_equal(len(node.getrawmempool()), 0)\n                 self.log.info('All of the transactions from the current batch have been mined into a block.')\n-            elif tx_count == size:\n-                # At the end all of the mined blocks are invalidated, and all of the created\n-                # transactions should be re-added from disconnected blocks to the mempool.\n-                self.log.info('The last batch of {} transactions has been accepted into the mempool.'.format(len(self.nodes[0].getrawmempool())))\n-                start = time.time()\n-                self.nodes[0].invalidateblock(first_block_hash)\n-                end = time.time()\n-                assert_equal(len(self.nodes[0].getrawmempool()), size)\n-                self.log.info('All of the recently mined transactions have been re-added into the mempool in {} seconds.'.format(end - start))\n+\n+        self.log.info('Mempool size pre-invalidation: {}'.format(len(node.getrawmempool())))\n+        assert_equal(len(node.getrawmempool()), 0)\n+        # Invalidate the first block to send the transactions back to the mempool.\n+        start = time.time()\n+        node.invalidateblock(block_ids[0])\n+        end = time.time()\n+        self.log.info('Mempool size post-invalidation: {}'.format(len(node.getrawmempool())))\n+        assert_equal(len(self.nodes[0].getrawmempool()), size)",
    "path": "test/functional/mempool_updatefromblock.py",
    "position": null,
    "original_position": 118,
    "commit_id": "1332dbb526f19ebf96bf3fa7c147bacd1926f7ae",
    "original_commit_id": "df07919caa36d1345590010f5552d9e24db2bbde",
    "user": {
      "login": "sriramdvt",
      "id": 41079588,
      "node_id": "MDQ6VXNlcjQxMDc5NTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/41079588?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sriramdvt",
      "html_url": "https://github.com/sriramdvt",
      "followers_url": "https://api.github.com/users/sriramdvt/followers",
      "following_url": "https://api.github.com/users/sriramdvt/following{/other_user}",
      "gists_url": "https://api.github.com/users/sriramdvt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sriramdvt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sriramdvt/subscriptions",
      "organizations_url": "https://api.github.com/users/sriramdvt/orgs",
      "repos_url": "https://api.github.com/users/sriramdvt/repos",
      "events_url": "https://api.github.com/users/sriramdvt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sriramdvt/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: Replace `self.nodes[0]` with `node`",
    "created_at": "2021-07-23T16:51:56Z",
    "updated_at": "2021-07-23T16:57:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21999#discussion_r675703904",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21999",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/675703904"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21999#discussion_r675703904"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21999"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/675703904/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 63,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/676184448",
    "pull_request_review_id": 714340726,
    "id": 676184448,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NjE4NDQ0OA==",
    "diff_hunk": "@@ -38,86 +34,49 @@ def transaction_graph_test(self, size, n_tx_to_mine=None, start_input_txid='', e\n         More details: https://en.wikipedia.org/wiki/Tournament_(graph_theory)\n         \"\"\"",
    "path": "test/functional/mempool_updatefromblock.py",
    "position": 38,
    "original_position": 25,
    "commit_id": "1332dbb526f19ebf96bf3fa7c147bacd1926f7ae",
    "original_commit_id": "df07919caa36d1345590010f5552d9e24db2bbde",
    "user": {
      "login": "reemuru",
      "id": 13033037,
      "node_id": "MDQ6VXNlcjEzMDMzMDM3",
      "avatar_url": "https://avatars.githubusercontent.com/u/13033037?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/reemuru",
      "html_url": "https://github.com/reemuru",
      "followers_url": "https://api.github.com/users/reemuru/followers",
      "following_url": "https://api.github.com/users/reemuru/following{/other_user}",
      "gists_url": "https://api.github.com/users/reemuru/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/reemuru/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/reemuru/subscriptions",
      "organizations_url": "https://api.github.com/users/reemuru/orgs",
      "repos_url": "https://api.github.com/users/reemuru/repos",
      "events_url": "https://api.github.com/users/reemuru/events{/privacy}",
      "received_events_url": "https://api.github.com/users/reemuru/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Updated the comment.",
    "created_at": "2021-07-25T18:24:49Z",
    "updated_at": "2021-07-25T18:26:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21999#discussion_r676184448",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21999",
    "author_association": "NONE",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/676184448"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21999#discussion_r676184448"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21999"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/676184448/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 41,
    "original_line": 41,
    "side": "RIGHT",
    "in_reply_to_id": 675698079
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/678248027",
    "pull_request_review_id": 716929545,
    "id": 678248027,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3ODI0ODAyNw==",
    "diff_hunk": "@@ -36,87 +34,65 @@ def transaction_graph_test(self, size, n_tx_to_mine=None, start_input_txid='', e\n             - has K+1 ancestors (including this one)\n \n         More details: https://en.wikipedia.org/wiki/Tournament_(graph_theory)\n-        \"\"\"\n-\n-        if not start_input_txid:\n-            start_input_txid = self.nodes[0].getblock(self.nodes[0].getblockhash(1))['tx'][0]\n \n-        if not end_address:\n-            end_address = self.nodes[0].getnewaddress()\n+        Note: In order to maintain Miniwallet compatibility wallet.send_self_transfer()\n+        only explicitly sets one ancestor for each transaction to form something\n+        like a singly linked list of size number of transactions.\n+        The acyclic tournament is then formed by the mempool.\n+        \"\"\"\n \n-        first_block_hash = ''\n-        tx_id = []\n-        tx_size = []\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n         self.log.info('Creating {} transactions...'.format(size))\n-        for i in range(0, size):\n-            self.log.debug('Preparing transaction #{}...'.format(i))\n-            # Prepare inputs.\n-            if i == 0:\n-                inputs = [{'txid': start_input_txid, 'vout': 0}]\n-                inputs_value = self.nodes[0].gettxout(start_input_txid, 0)['value']\n-            else:\n-                inputs = []\n-                inputs_value = 0\n-                for j, tx in enumerate(tx_id[0:i]):\n-                    # Transaction tx[K] is a child of each of previous transactions tx[0]..tx[K-1] at their output K-1.\n-                    vout = i - j - 1\n-                    inputs.append({'txid': tx_id[j], 'vout': vout})\n-                    inputs_value += self.nodes[0].gettxout(tx, vout)['value']\n-\n-            self.log.debug('inputs={}'.format(inputs))\n-            self.log.debug('inputs_value={}'.format(inputs_value))\n-\n-            # Prepare outputs.\n-            tx_count = i + 1\n-            if tx_count < size:\n-                # Transaction tx[K] is an ancestor of each of subsequent transactions tx[K+1]..tx[N-1].\n-                n_outputs = size - tx_count\n-                output_value = ((inputs_value - fee) / Decimal(n_outputs)).quantize(Decimal('0.00000001'))\n-                outputs = {}\n-                for _ in range(n_outputs):\n-                    outputs[self.nodes[0].getnewaddress()] = output_value\n-            else:\n-                output_value = (inputs_value - fee).quantize(Decimal('0.00000001'))\n-                outputs = {end_address: output_value}\n-\n-            self.log.debug('output_value={}'.format(output_value))\n-            self.log.debug('outputs={}'.format(outputs))\n-\n-            # Create a new transaction.\n-            unsigned_raw_tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-            signed_raw_tx = self.nodes[0].signrawtransactionwithwallet(unsigned_raw_tx)\n-            tx_id.append(self.nodes[0].sendrawtransaction(signed_raw_tx['hex']))\n-            tx_size.append(self.nodes[0].getrawmempool(True)[tx_id[-1]]['vsize'])\n-\n-            if tx_count in n_tx_to_mine:\n-                # The created transactions are mined into blocks by batches.\n-                self.log.info('The batch of {} transactions has been accepted into the mempool.'.format(len(self.nodes[0].getrawmempool())))\n-                block_hash = self.nodes[0].generate(1)[0]\n-                if not first_block_hash:\n-                    first_block_hash = block_hash\n-                assert_equal(len(self.nodes[0].getrawmempool()), 0)\n-                self.log.info('All of the transactions from the current batch have been mined into a block.')\n-            elif tx_count == size:\n-                # At the end all of the mined blocks are invalidated, and all of the created\n-                # transactions should be re-added from disconnected blocks to the mempool.\n-                self.log.info('The last batch of {} transactions has been accepted into the mempool.'.format(len(self.nodes[0].getrawmempool())))\n-                start = time.time()\n-                self.nodes[0].invalidateblock(first_block_hash)\n-                end = time.time()\n-                assert_equal(len(self.nodes[0].getrawmempool()), size)\n-                self.log.info('All of the recently mined transactions have been re-added into the mempool in {} seconds.'.format(end - start))\n-\n-        self.log.info('Checking descendants/ancestors properties of all of the in-mempool transactions...')\n-        for k, tx in enumerate(tx_id):\n+        self.wallet.scan_blocks(start=76, num=1)\n+        node.generate(size)\n+        txs = []\n+        block_ids = []\n+        tx_size = []\n+        for i in range(size):\n+            tx = self.wallet.send_self_transfer(from_node=node)\n+            m_tx = node.getrawmempool(True)[tx['txid']]\n+            txs.append(tx)\n+            tx_size.append(m_tx['vsize'])\n+            if (i+1) % n_tx_to_mine == 0:\n+                assert_equal(len(node.getrawmempool()), n_tx_to_mine)\n+                self.log.info('The batch of {} transactions has been accepted into the mempool.'\n+                              .format(n_tx_to_mine))\n+                block_ids.append(self.wallet.generate(1)[0])\n+                assert_equal(len(node.getrawmempool()), 0)\n+                self.log.info(\n+                    'All of the transactions from the current batch have been mined into a block.')\n+\n+        self.log.info(\n+            'Mempool size pre-invalidation: {}'.format(len(node.getrawmempool())))\n+        assert_equal(len(node.getrawmempool()), 0)\n+        # Invalidate the first block to send the transactions back to the mempool.\n+        start = time.time()\n+        node.invalidateblock(block_ids[0])\n+        end = time.time()\n+        self.log.info(\n+            'Mempool size post-invalidation: {}'.format(len(node.getrawmempool())))\n+        assert_equal(len(node.getrawmempool()), size)\n+        self.log.info('All of the recently mined transactions have been re-added into the mempool in {} seconds.'\n+                      .format(end - start))\n+\n+        self.log.info(\n+            'Checking descendants/ancestors properties of all of the in-mempool transactions...')\n+        for k, tx in enumerate(txs):\n+            id = tx['txid']\n             self.log.debug('Check transaction #{}.'.format(k))\n-            assert_equal(self.nodes[0].getrawmempool(True)[tx]['descendantcount'], size - k)\n-            assert_equal(self.nodes[0].getrawmempool(True)[tx]['descendantsize'], sum(tx_size[k:size]))\n-            assert_equal(self.nodes[0].getrawmempool(True)[tx]['ancestorcount'], k + 1)\n-            assert_equal(self.nodes[0].getrawmempool(True)[tx]['ancestorsize'], sum(tx_size[0:(k + 1)]))\n+            assert_equal(node.getrawmempool(True)[\n+                         id]['descendantcount'], size - k)",
    "path": "test/functional/mempool_updatefromblock.py",
    "position": null,
    "original_position": 150,
    "commit_id": "1332dbb526f19ebf96bf3fa7c147bacd1926f7ae",
    "original_commit_id": "446c06a6fd8bf205e534be47c02d8088e40dd10f",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "please don't commit large style changes in the same commit as refactors/features. This makes review harder because it is not clear what is a refactor/style-change/feature\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#committing-patches",
    "created_at": "2021-07-28T12:21:22Z",
    "updated_at": "2021-07-28T12:35:14Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21999#discussion_r678248027",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21999",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/678248027"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21999#discussion_r678248027"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21999"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/678248027/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 85,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/678249782",
    "pull_request_review_id": 716931894,
    "id": 678249782,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3ODI0OTc4Mg==",
    "diff_hunk": "@@ -36,87 +34,65 @@ def transaction_graph_test(self, size, n_tx_to_mine=None, start_input_txid='', e\n             - has K+1 ancestors (including this one)\n \n         More details: https://en.wikipedia.org/wiki/Tournament_(graph_theory)\n-        \"\"\"\n-\n-        if not start_input_txid:\n-            start_input_txid = self.nodes[0].getblock(self.nodes[0].getblockhash(1))['tx'][0]\n \n-        if not end_address:\n-            end_address = self.nodes[0].getnewaddress()\n+        Note: In order to maintain Miniwallet compatibility wallet.send_self_transfer()\n+        only explicitly sets one ancestor for each transaction to form something\n+        like a singly linked list of size number of transactions.\n+        The acyclic tournament is then formed by the mempool.\n+        \"\"\"\n \n-        first_block_hash = ''\n-        tx_id = []\n-        tx_size = []\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n         self.log.info('Creating {} transactions...'.format(size))\n-        for i in range(0, size):\n-            self.log.debug('Preparing transaction #{}...'.format(i))\n-            # Prepare inputs.\n-            if i == 0:\n-                inputs = [{'txid': start_input_txid, 'vout': 0}]\n-                inputs_value = self.nodes[0].gettxout(start_input_txid, 0)['value']\n-            else:\n-                inputs = []\n-                inputs_value = 0\n-                for j, tx in enumerate(tx_id[0:i]):\n-                    # Transaction tx[K] is a child of each of previous transactions tx[0]..tx[K-1] at their output K-1.\n-                    vout = i - j - 1\n-                    inputs.append({'txid': tx_id[j], 'vout': vout})\n-                    inputs_value += self.nodes[0].gettxout(tx, vout)['value']\n-\n-            self.log.debug('inputs={}'.format(inputs))\n-            self.log.debug('inputs_value={}'.format(inputs_value))\n-\n-            # Prepare outputs.\n-            tx_count = i + 1\n-            if tx_count < size:\n-                # Transaction tx[K] is an ancestor of each of subsequent transactions tx[K+1]..tx[N-1].\n-                n_outputs = size - tx_count\n-                output_value = ((inputs_value - fee) / Decimal(n_outputs)).quantize(Decimal('0.00000001'))\n-                outputs = {}\n-                for _ in range(n_outputs):\n-                    outputs[self.nodes[0].getnewaddress()] = output_value\n-            else:\n-                output_value = (inputs_value - fee).quantize(Decimal('0.00000001'))\n-                outputs = {end_address: output_value}\n-\n-            self.log.debug('output_value={}'.format(output_value))\n-            self.log.debug('outputs={}'.format(outputs))\n-\n-            # Create a new transaction.\n-            unsigned_raw_tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-            signed_raw_tx = self.nodes[0].signrawtransactionwithwallet(unsigned_raw_tx)\n-            tx_id.append(self.nodes[0].sendrawtransaction(signed_raw_tx['hex']))\n-            tx_size.append(self.nodes[0].getrawmempool(True)[tx_id[-1]]['vsize'])\n-\n-            if tx_count in n_tx_to_mine:\n-                # The created transactions are mined into blocks by batches.\n-                self.log.info('The batch of {} transactions has been accepted into the mempool.'.format(len(self.nodes[0].getrawmempool())))\n-                block_hash = self.nodes[0].generate(1)[0]\n-                if not first_block_hash:\n-                    first_block_hash = block_hash\n-                assert_equal(len(self.nodes[0].getrawmempool()), 0)\n-                self.log.info('All of the transactions from the current batch have been mined into a block.')\n-            elif tx_count == size:\n-                # At the end all of the mined blocks are invalidated, and all of the created\n-                # transactions should be re-added from disconnected blocks to the mempool.\n-                self.log.info('The last batch of {} transactions has been accepted into the mempool.'.format(len(self.nodes[0].getrawmempool())))\n-                start = time.time()\n-                self.nodes[0].invalidateblock(first_block_hash)\n-                end = time.time()\n-                assert_equal(len(self.nodes[0].getrawmempool()), size)\n-                self.log.info('All of the recently mined transactions have been re-added into the mempool in {} seconds.'.format(end - start))\n-\n-        self.log.info('Checking descendants/ancestors properties of all of the in-mempool transactions...')\n-        for k, tx in enumerate(tx_id):\n+        self.wallet.scan_blocks(start=76, num=1)\n+        node.generate(size)\n+        txs = []\n+        block_ids = []\n+        tx_size = []\n+        for i in range(size):\n+            tx = self.wallet.send_self_transfer(from_node=node)\n+            m_tx = node.getrawmempool(True)[tx['txid']]\n+            txs.append(tx)\n+            tx_size.append(m_tx['vsize'])\n+            if (i+1) % n_tx_to_mine == 0:\n+                assert_equal(len(node.getrawmempool()), n_tx_to_mine)\n+                self.log.info('The batch of {} transactions has been accepted into the mempool.'\n+                              .format(n_tx_to_mine))\n+                block_ids.append(self.wallet.generate(1)[0])\n+                assert_equal(len(node.getrawmempool()), 0)\n+                self.log.info(\n+                    'All of the transactions from the current batch have been mined into a block.')\n+\n+        self.log.info(\n+            'Mempool size pre-invalidation: {}'.format(len(node.getrawmempool())))\n+        assert_equal(len(node.getrawmempool()), 0)\n+        # Invalidate the first block to send the transactions back to the mempool.\n+        start = time.time()\n+        node.invalidateblock(block_ids[0])\n+        end = time.time()\n+        self.log.info(\n+            'Mempool size post-invalidation: {}'.format(len(node.getrawmempool())))\n+        assert_equal(len(node.getrawmempool()), size)\n+        self.log.info('All of the recently mined transactions have been re-added into the mempool in {} seconds.'\n+                      .format(end - start))\n+\n+        self.log.info(\n+            'Checking descendants/ancestors properties of all of the in-mempool transactions...')\n+        for k, tx in enumerate(txs):\n+            id = tx['txid']\n             self.log.debug('Check transaction #{}.'.format(k))\n-            assert_equal(self.nodes[0].getrawmempool(True)[tx]['descendantcount'], size - k)\n-            assert_equal(self.nodes[0].getrawmempool(True)[tx]['descendantsize'], sum(tx_size[k:size]))\n-            assert_equal(self.nodes[0].getrawmempool(True)[tx]['ancestorcount'], k + 1)\n-            assert_equal(self.nodes[0].getrawmempool(True)[tx]['ancestorsize'], sum(tx_size[0:(k + 1)]))\n+            assert_equal(node.getrawmempool(True)[\n+                         id]['descendantcount'], size - k)",
    "path": "test/functional/mempool_updatefromblock.py",
    "position": null,
    "original_position": 150,
    "commit_id": "1332dbb526f19ebf96bf3fa7c147bacd1926f7ae",
    "original_commit_id": "446c06a6fd8bf205e534be47c02d8088e40dd10f",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Also I don't think the change here makes the code easier to read (neither for devs nor for scripts and parsers)",
    "created_at": "2021-07-28T12:23:56Z",
    "updated_at": "2021-07-28T12:23:56Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21999#discussion_r678249782",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21999",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/678249782"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21999#discussion_r678249782"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21999"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/678249782/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 85,
    "side": "RIGHT",
    "in_reply_to_id": 678248027
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/678321024",
    "pull_request_review_id": 717027514,
    "id": 678321024,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3ODMyMTAyNA==",
    "diff_hunk": "@@ -36,87 +34,65 @@ def transaction_graph_test(self, size, n_tx_to_mine=None, start_input_txid='', e\n             - has K+1 ancestors (including this one)\n \n         More details: https://en.wikipedia.org/wiki/Tournament_(graph_theory)\n-        \"\"\"\n-\n-        if not start_input_txid:\n-            start_input_txid = self.nodes[0].getblock(self.nodes[0].getblockhash(1))['tx'][0]\n \n-        if not end_address:\n-            end_address = self.nodes[0].getnewaddress()\n+        Note: In order to maintain Miniwallet compatibility wallet.send_self_transfer()\n+        only explicitly sets one ancestor for each transaction to form something\n+        like a singly linked list of size number of transactions.\n+        The acyclic tournament is then formed by the mempool.\n+        \"\"\"\n \n-        first_block_hash = ''\n-        tx_id = []\n-        tx_size = []\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n         self.log.info('Creating {} transactions...'.format(size))\n-        for i in range(0, size):\n-            self.log.debug('Preparing transaction #{}...'.format(i))\n-            # Prepare inputs.\n-            if i == 0:\n-                inputs = [{'txid': start_input_txid, 'vout': 0}]\n-                inputs_value = self.nodes[0].gettxout(start_input_txid, 0)['value']\n-            else:\n-                inputs = []\n-                inputs_value = 0\n-                for j, tx in enumerate(tx_id[0:i]):\n-                    # Transaction tx[K] is a child of each of previous transactions tx[0]..tx[K-1] at their output K-1.\n-                    vout = i - j - 1\n-                    inputs.append({'txid': tx_id[j], 'vout': vout})\n-                    inputs_value += self.nodes[0].gettxout(tx, vout)['value']\n-\n-            self.log.debug('inputs={}'.format(inputs))\n-            self.log.debug('inputs_value={}'.format(inputs_value))\n-\n-            # Prepare outputs.\n-            tx_count = i + 1\n-            if tx_count < size:\n-                # Transaction tx[K] is an ancestor of each of subsequent transactions tx[K+1]..tx[N-1].\n-                n_outputs = size - tx_count\n-                output_value = ((inputs_value - fee) / Decimal(n_outputs)).quantize(Decimal('0.00000001'))\n-                outputs = {}\n-                for _ in range(n_outputs):\n-                    outputs[self.nodes[0].getnewaddress()] = output_value\n-            else:\n-                output_value = (inputs_value - fee).quantize(Decimal('0.00000001'))\n-                outputs = {end_address: output_value}\n-\n-            self.log.debug('output_value={}'.format(output_value))\n-            self.log.debug('outputs={}'.format(outputs))\n-\n-            # Create a new transaction.\n-            unsigned_raw_tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-            signed_raw_tx = self.nodes[0].signrawtransactionwithwallet(unsigned_raw_tx)\n-            tx_id.append(self.nodes[0].sendrawtransaction(signed_raw_tx['hex']))\n-            tx_size.append(self.nodes[0].getrawmempool(True)[tx_id[-1]]['vsize'])\n-\n-            if tx_count in n_tx_to_mine:\n-                # The created transactions are mined into blocks by batches.\n-                self.log.info('The batch of {} transactions has been accepted into the mempool.'.format(len(self.nodes[0].getrawmempool())))\n-                block_hash = self.nodes[0].generate(1)[0]\n-                if not first_block_hash:\n-                    first_block_hash = block_hash\n-                assert_equal(len(self.nodes[0].getrawmempool()), 0)\n-                self.log.info('All of the transactions from the current batch have been mined into a block.')\n-            elif tx_count == size:\n-                # At the end all of the mined blocks are invalidated, and all of the created\n-                # transactions should be re-added from disconnected blocks to the mempool.\n-                self.log.info('The last batch of {} transactions has been accepted into the mempool.'.format(len(self.nodes[0].getrawmempool())))\n-                start = time.time()\n-                self.nodes[0].invalidateblock(first_block_hash)\n-                end = time.time()\n-                assert_equal(len(self.nodes[0].getrawmempool()), size)\n-                self.log.info('All of the recently mined transactions have been re-added into the mempool in {} seconds.'.format(end - start))\n-\n-        self.log.info('Checking descendants/ancestors properties of all of the in-mempool transactions...')\n-        for k, tx in enumerate(tx_id):\n+        self.wallet.scan_blocks(start=76, num=1)\n+        node.generate(size)\n+        txs = []\n+        block_ids = []\n+        tx_size = []\n+        for i in range(size):\n+            tx = self.wallet.send_self_transfer(from_node=node)\n+            m_tx = node.getrawmempool(True)[tx['txid']]\n+            txs.append(tx)\n+            tx_size.append(m_tx['vsize'])\n+            if (i+1) % n_tx_to_mine == 0:\n+                assert_equal(len(node.getrawmempool()), n_tx_to_mine)\n+                self.log.info('The batch of {} transactions has been accepted into the mempool.'\n+                              .format(n_tx_to_mine))\n+                block_ids.append(self.wallet.generate(1)[0])\n+                assert_equal(len(node.getrawmempool()), 0)\n+                self.log.info(\n+                    'All of the transactions from the current batch have been mined into a block.')\n+\n+        self.log.info(\n+            'Mempool size pre-invalidation: {}'.format(len(node.getrawmempool())))\n+        assert_equal(len(node.getrawmempool()), 0)\n+        # Invalidate the first block to send the transactions back to the mempool.\n+        start = time.time()\n+        node.invalidateblock(block_ids[0])\n+        end = time.time()\n+        self.log.info(\n+            'Mempool size post-invalidation: {}'.format(len(node.getrawmempool())))\n+        assert_equal(len(node.getrawmempool()), size)\n+        self.log.info('All of the recently mined transactions have been re-added into the mempool in {} seconds.'\n+                      .format(end - start))\n+\n+        self.log.info(\n+            'Checking descendants/ancestors properties of all of the in-mempool transactions...')\n+        for k, tx in enumerate(txs):\n+            id = tx['txid']\n             self.log.debug('Check transaction #{}.'.format(k))\n-            assert_equal(self.nodes[0].getrawmempool(True)[tx]['descendantcount'], size - k)\n-            assert_equal(self.nodes[0].getrawmempool(True)[tx]['descendantsize'], sum(tx_size[k:size]))\n-            assert_equal(self.nodes[0].getrawmempool(True)[tx]['ancestorcount'], k + 1)\n-            assert_equal(self.nodes[0].getrawmempool(True)[tx]['ancestorsize'], sum(tx_size[0:(k + 1)]))\n+            assert_equal(node.getrawmempool(True)[\n+                         id]['descendantcount'], size - k)",
    "path": "test/functional/mempool_updatefromblock.py",
    "position": null,
    "original_position": 150,
    "commit_id": "1332dbb526f19ebf96bf3fa7c147bacd1926f7ae",
    "original_commit_id": "446c06a6fd8bf205e534be47c02d8088e40dd10f",
    "user": {
      "login": "reemuru",
      "id": 13033037,
      "node_id": "MDQ6VXNlcjEzMDMzMDM3",
      "avatar_url": "https://avatars.githubusercontent.com/u/13033037?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/reemuru",
      "html_url": "https://github.com/reemuru",
      "followers_url": "https://api.github.com/users/reemuru/followers",
      "following_url": "https://api.github.com/users/reemuru/following{/other_user}",
      "gists_url": "https://api.github.com/users/reemuru/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/reemuru/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/reemuru/subscriptions",
      "organizations_url": "https://api.github.com/users/reemuru/orgs",
      "repos_url": "https://api.github.com/users/reemuru/repos",
      "events_url": "https://api.github.com/users/reemuru/events{/privacy}",
      "received_events_url": "https://api.github.com/users/reemuru/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Oh shoot, my bad. :sob:  Was using some auto-styling tool and must've finger fudged it. Fixed and squashed into 33865a5",
    "created_at": "2021-07-28T13:51:13Z",
    "updated_at": "2021-07-28T13:51:13Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21999#discussion_r678321024",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21999",
    "author_association": "NONE",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/678321024"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21999#discussion_r678321024"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21999"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/678321024/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 85,
    "side": "RIGHT",
    "in_reply_to_id": 678248027
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/678398886",
    "pull_request_review_id": 717134527,
    "id": 678398886,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3ODM5ODg4Ng==",
    "diff_hunk": "@@ -36,87 +34,65 @@ def transaction_graph_test(self, size, n_tx_to_mine=None, start_input_txid='', e\n             - has K+1 ancestors (including this one)\n \n         More details: https://en.wikipedia.org/wiki/Tournament_(graph_theory)\n-        \"\"\"\n-\n-        if not start_input_txid:\n-            start_input_txid = self.nodes[0].getblock(self.nodes[0].getblockhash(1))['tx'][0]\n \n-        if not end_address:\n-            end_address = self.nodes[0].getnewaddress()\n+        Note: In order to maintain Miniwallet compatibility wallet.send_self_transfer()\n+        only explicitly sets one ancestor for each transaction to form something\n+        like a singly linked list of size number of transactions.\n+        The acyclic tournament is then formed by the mempool.\n+        \"\"\"\n \n-        first_block_hash = ''\n-        tx_id = []\n-        tx_size = []\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n         self.log.info('Creating {} transactions...'.format(size))\n-        for i in range(0, size):\n-            self.log.debug('Preparing transaction #{}...'.format(i))\n-            # Prepare inputs.\n-            if i == 0:\n-                inputs = [{'txid': start_input_txid, 'vout': 0}]\n-                inputs_value = self.nodes[0].gettxout(start_input_txid, 0)['value']\n-            else:\n-                inputs = []\n-                inputs_value = 0\n-                for j, tx in enumerate(tx_id[0:i]):\n-                    # Transaction tx[K] is a child of each of previous transactions tx[0]..tx[K-1] at their output K-1.\n-                    vout = i - j - 1\n-                    inputs.append({'txid': tx_id[j], 'vout': vout})\n-                    inputs_value += self.nodes[0].gettxout(tx, vout)['value']\n-\n-            self.log.debug('inputs={}'.format(inputs))\n-            self.log.debug('inputs_value={}'.format(inputs_value))\n-\n-            # Prepare outputs.\n-            tx_count = i + 1\n-            if tx_count < size:\n-                # Transaction tx[K] is an ancestor of each of subsequent transactions tx[K+1]..tx[N-1].\n-                n_outputs = size - tx_count\n-                output_value = ((inputs_value - fee) / Decimal(n_outputs)).quantize(Decimal('0.00000001'))\n-                outputs = {}\n-                for _ in range(n_outputs):\n-                    outputs[self.nodes[0].getnewaddress()] = output_value\n-            else:\n-                output_value = (inputs_value - fee).quantize(Decimal('0.00000001'))\n-                outputs = {end_address: output_value}\n-\n-            self.log.debug('output_value={}'.format(output_value))\n-            self.log.debug('outputs={}'.format(outputs))\n-\n-            # Create a new transaction.\n-            unsigned_raw_tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-            signed_raw_tx = self.nodes[0].signrawtransactionwithwallet(unsigned_raw_tx)\n-            tx_id.append(self.nodes[0].sendrawtransaction(signed_raw_tx['hex']))\n-            tx_size.append(self.nodes[0].getrawmempool(True)[tx_id[-1]]['vsize'])\n-\n-            if tx_count in n_tx_to_mine:\n-                # The created transactions are mined into blocks by batches.\n-                self.log.info('The batch of {} transactions has been accepted into the mempool.'.format(len(self.nodes[0].getrawmempool())))\n-                block_hash = self.nodes[0].generate(1)[0]\n-                if not first_block_hash:\n-                    first_block_hash = block_hash\n-                assert_equal(len(self.nodes[0].getrawmempool()), 0)\n-                self.log.info('All of the transactions from the current batch have been mined into a block.')\n-            elif tx_count == size:\n-                # At the end all of the mined blocks are invalidated, and all of the created\n-                # transactions should be re-added from disconnected blocks to the mempool.\n-                self.log.info('The last batch of {} transactions has been accepted into the mempool.'.format(len(self.nodes[0].getrawmempool())))\n-                start = time.time()\n-                self.nodes[0].invalidateblock(first_block_hash)\n-                end = time.time()\n-                assert_equal(len(self.nodes[0].getrawmempool()), size)\n-                self.log.info('All of the recently mined transactions have been re-added into the mempool in {} seconds.'.format(end - start))\n-\n-        self.log.info('Checking descendants/ancestors properties of all of the in-mempool transactions...')\n-        for k, tx in enumerate(tx_id):\n+        self.wallet.scan_blocks(start=76, num=1)\n+        node.generate(size)\n+        txs = []\n+        block_ids = []\n+        tx_size = []\n+        for i in range(size):\n+            tx = self.wallet.send_self_transfer(from_node=node)\n+            m_tx = node.getrawmempool(True)[tx['txid']]\n+            txs.append(tx)\n+            tx_size.append(m_tx['vsize'])\n+            if (i+1) % n_tx_to_mine == 0:\n+                assert_equal(len(node.getrawmempool()), n_tx_to_mine)\n+                self.log.info('The batch of {} transactions has been accepted into the mempool.'\n+                              .format(n_tx_to_mine))\n+                block_ids.append(self.wallet.generate(1)[0])\n+                assert_equal(len(node.getrawmempool()), 0)\n+                self.log.info(\n+                    'All of the transactions from the current batch have been mined into a block.')\n+\n+        self.log.info(\n+            'Mempool size pre-invalidation: {}'.format(len(node.getrawmempool())))\n+        assert_equal(len(node.getrawmempool()), 0)\n+        # Invalidate the first block to send the transactions back to the mempool.\n+        start = time.time()\n+        node.invalidateblock(block_ids[0])\n+        end = time.time()\n+        self.log.info(\n+            'Mempool size post-invalidation: {}'.format(len(node.getrawmempool())))\n+        assert_equal(len(node.getrawmempool()), size)\n+        self.log.info('All of the recently mined transactions have been re-added into the mempool in {} seconds.'\n+                      .format(end - start))\n+\n+        self.log.info(\n+            'Checking descendants/ancestors properties of all of the in-mempool transactions...')\n+        for k, tx in enumerate(txs):\n+            id = tx['txid']\n             self.log.debug('Check transaction #{}.'.format(k))\n-            assert_equal(self.nodes[0].getrawmempool(True)[tx]['descendantcount'], size - k)\n-            assert_equal(self.nodes[0].getrawmempool(True)[tx]['descendantsize'], sum(tx_size[k:size]))\n-            assert_equal(self.nodes[0].getrawmempool(True)[tx]['ancestorcount'], k + 1)\n-            assert_equal(self.nodes[0].getrawmempool(True)[tx]['ancestorsize'], sum(tx_size[0:(k + 1)]))\n+            assert_equal(node.getrawmempool(True)[\n+                         id]['descendantcount'], size - k)",
    "path": "test/functional/mempool_updatefromblock.py",
    "position": null,
    "original_position": 150,
    "commit_id": "1332dbb526f19ebf96bf3fa7c147bacd1926f7ae",
    "original_commit_id": "446c06a6fd8bf205e534be47c02d8088e40dd10f",
    "user": {
      "login": "josibake",
      "id": 7444140,
      "node_id": "MDQ6VXNlcjc0NDQxNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/josibake",
      "html_url": "https://github.com/josibake",
      "followers_url": "https://api.github.com/users/josibake/followers",
      "following_url": "https://api.github.com/users/josibake/following{/other_user}",
      "gists_url": "https://api.github.com/users/josibake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/josibake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
      "organizations_url": "https://api.github.com/users/josibake/orgs",
      "repos_url": "https://api.github.com/users/josibake/repos",
      "events_url": "https://api.github.com/users/josibake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/josibake/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "> Oh shoot, my bad. sob Was using some auto-styling tool and must've finger fudged it. Fixed and squashed into [33865a5](https://github.com/bitcoin/bitcoin/commit/33865a5fbacf462c90520cb8f5dde61dd8fdbfc9)\r\n\r\nmy fault, @reemuru , i gave bad advice. @MarcoFalke is correct: linting (style changes) should be in separate PR's from refactors/features",
    "created_at": "2021-07-28T15:12:35Z",
    "updated_at": "2021-07-28T15:12:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21999#discussion_r678398886",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21999",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/678398886"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21999#discussion_r678398886"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21999"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/678398886/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 85,
    "side": "RIGHT",
    "in_reply_to_id": 678248027
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/678412369",
    "pull_request_review_id": 717153157,
    "id": 678412369,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3ODQxMjM2OQ==",
    "diff_hunk": "@@ -9,20 +9,18 @@\n \"\"\"\n import time\n \n-from decimal import Decimal\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal\n+from test_framework.wallet import MiniWallet\n \n \n class MempoolUpdateFromBlockTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n-        self.extra_args = [['-limitdescendantsize=1000', '-limitancestorsize=1000']]\n+        self.extra_args = [\n+            ['-limitdescendantsize=1000', '-limitancestorsize=1000']]",
    "path": "test/functional/mempool_updatefromblock.py",
    "position": null,
    "original_position": 15,
    "commit_id": "1332dbb526f19ebf96bf3fa7c147bacd1926f7ae",
    "original_commit_id": "33865a5fbacf462c90520cb8f5dde61dd8fdbfc9",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "here are still style changes mixed in",
    "created_at": "2021-07-28T15:26:21Z",
    "updated_at": "2021-07-28T15:26:36Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21999#discussion_r678412369",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21999",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/678412369"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21999#discussion_r678412369"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21999"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/678412369/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 21,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/678412561",
    "pull_request_review_id": 717153157,
    "id": 678412561,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3ODQxMjU2MQ==",
    "diff_hunk": "@@ -36,87 +34,62 @@ def transaction_graph_test(self, size, n_tx_to_mine=None, start_input_txid='', e\n             - has K+1 ancestors (including this one)\n \n         More details: https://en.wikipedia.org/wiki/Tournament_(graph_theory)\n-        \"\"\"\n-\n-        if not start_input_txid:\n-            start_input_txid = self.nodes[0].getblock(self.nodes[0].getblockhash(1))['tx'][0]\n \n-        if not end_address:\n-            end_address = self.nodes[0].getnewaddress()\n+        Note: In order to maintain Miniwallet compatibility wallet.send_self_transfer()\n+        only explicitly sets one ancestor for each transaction to form something\n+        like a singly linked list of size number of transactions.\n+        The acyclic tournament is then formed by the mempool.\n+        \"\"\"\n \n-        first_block_hash = ''\n-        tx_id = []\n-        tx_size = []\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n         self.log.info('Creating {} transactions...'.format(size))\n-        for i in range(0, size):\n-            self.log.debug('Preparing transaction #{}...'.format(i))\n-            # Prepare inputs.\n-            if i == 0:\n-                inputs = [{'txid': start_input_txid, 'vout': 0}]\n-                inputs_value = self.nodes[0].gettxout(start_input_txid, 0)['value']\n-            else:\n-                inputs = []\n-                inputs_value = 0\n-                for j, tx in enumerate(tx_id[0:i]):\n-                    # Transaction tx[K] is a child of each of previous transactions tx[0]..tx[K-1] at their output K-1.\n-                    vout = i - j - 1\n-                    inputs.append({'txid': tx_id[j], 'vout': vout})\n-                    inputs_value += self.nodes[0].gettxout(tx, vout)['value']\n-\n-            self.log.debug('inputs={}'.format(inputs))\n-            self.log.debug('inputs_value={}'.format(inputs_value))\n-\n-            # Prepare outputs.\n-            tx_count = i + 1\n-            if tx_count < size:\n-                # Transaction tx[K] is an ancestor of each of subsequent transactions tx[K+1]..tx[N-1].\n-                n_outputs = size - tx_count\n-                output_value = ((inputs_value - fee) / Decimal(n_outputs)).quantize(Decimal('0.00000001'))\n-                outputs = {}\n-                for _ in range(n_outputs):\n-                    outputs[self.nodes[0].getnewaddress()] = output_value\n-            else:\n-                output_value = (inputs_value - fee).quantize(Decimal('0.00000001'))\n-                outputs = {end_address: output_value}\n-\n-            self.log.debug('output_value={}'.format(output_value))\n-            self.log.debug('outputs={}'.format(outputs))\n-\n-            # Create a new transaction.\n-            unsigned_raw_tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-            signed_raw_tx = self.nodes[0].signrawtransactionwithwallet(unsigned_raw_tx)\n-            tx_id.append(self.nodes[0].sendrawtransaction(signed_raw_tx['hex']))\n-            tx_size.append(self.nodes[0].getrawmempool(True)[tx_id[-1]]['vsize'])\n-\n-            if tx_count in n_tx_to_mine:\n-                # The created transactions are mined into blocks by batches.\n-                self.log.info('The batch of {} transactions has been accepted into the mempool.'.format(len(self.nodes[0].getrawmempool())))\n-                block_hash = self.nodes[0].generate(1)[0]\n-                if not first_block_hash:\n-                    first_block_hash = block_hash\n-                assert_equal(len(self.nodes[0].getrawmempool()), 0)\n-                self.log.info('All of the transactions from the current batch have been mined into a block.')\n-            elif tx_count == size:\n-                # At the end all of the mined blocks are invalidated, and all of the created\n-                # transactions should be re-added from disconnected blocks to the mempool.\n-                self.log.info('The last batch of {} transactions has been accepted into the mempool.'.format(len(self.nodes[0].getrawmempool())))\n-                start = time.time()\n-                self.nodes[0].invalidateblock(first_block_hash)\n-                end = time.time()\n-                assert_equal(len(self.nodes[0].getrawmempool()), size)\n-                self.log.info('All of the recently mined transactions have been re-added into the mempool in {} seconds.'.format(end - start))\n-\n-        self.log.info('Checking descendants/ancestors properties of all of the in-mempool transactions...')\n-        for k, tx in enumerate(tx_id):\n+        self.wallet.scan_blocks(start=76, num=1)\n+        node.generate(size)\n+        txs = []\n+        block_ids = []\n+        tx_size = []\n+        for i in range(size):\n+            tx = self.wallet.send_self_transfer(from_node=node)\n+            m_tx = node.getrawmempool(True)[tx['txid']]\n+            txs.append(tx)\n+            tx_size.append(m_tx['vsize'])\n+            if (i+1) % n_tx_to_mine == 0:\n+                assert_equal(len(node.getrawmempool()), n_tx_to_mine)\n+                self.log.info('The batch of {} transactions has been accepted into the mempool.'\n+                              .format(n_tx_to_mine))\n+                block_ids.append(self.wallet.generate(1)[0])\n+                assert_equal(len(node.getrawmempool()), 0)\n+                self.log.info(\n+                    'All of the transactions from the current batch have been mined into a block.')\n+\n+        self.log.info(\n+            'Mempool size pre-invalidation: {}'.format(len(node.getrawmempool())))\n+        assert_equal(len(node.getrawmempool()), 0)\n+        # Invalidate the first block to send the transactions back to the mempool.\n+        start = time.time()\n+        node.invalidateblock(block_ids[0])\n+        end = time.time()\n+        self.log.info(\n+            'Mempool size post-invalidation: {}'.format(len(node.getrawmempool())))\n+        assert_equal(len(node.getrawmempool()), size)\n+        self.log.info('All of the recently mined transactions have been re-added into the mempool in {} seconds.'\n+                      .format(end - start))\n+\n+        self.log.info(\n+            'Checking descendants/ancestors properties of all of the in-mempool transactions...')\n+        for k, tx in enumerate(txs):\n+            id = tx['txid']\n             self.log.debug('Check transaction #{}.'.format(k))\n-            assert_equal(self.nodes[0].getrawmempool(True)[tx]['descendantcount'], size - k)\n-            assert_equal(self.nodes[0].getrawmempool(True)[tx]['descendantsize'], sum(tx_size[k:size]))\n-            assert_equal(self.nodes[0].getrawmempool(True)[tx]['ancestorcount'], k + 1)\n-            assert_equal(self.nodes[0].getrawmempool(True)[tx]['ancestorsize'], sum(tx_size[0:(k + 1)]))\n+            assert_equal(node.getrawmempool(True)[id]['descendantcount'], size - k)\n+            assert_equal(node.getrawmempool(True)[id]['descendantsize'], sum(tx_size[k:size]))\n+            assert_equal(node.getrawmempool(True)[id]['ancestorcount'], k + 1)\n+            assert_equal(node.getrawmempool(True)[id]['ancestorsize'], sum(tx_size[0:(k + 1)]))\n \n     def run_test(self):\n-        # Use batch size limited by DEFAULT_ANCESTOR_LIMIT = 25 to not fire \"too many unconfirmed parents\" error.\n-        self.transaction_graph_test(size=100, n_tx_to_mine=[25, 50, 75])\n+        # Use batch size limited by DEFAULT_ANCESTOR_LIMIT = 25\n+        # to not fire \"too many unconfirmed parents\" error.\n+        self.transaction_graph_test(size=100, n_tx_to_mine=25)",
    "path": "test/functional/mempool_updatefromblock.py",
    "position": 157,
    "original_position": 159,
    "commit_id": "1332dbb526f19ebf96bf3fa7c147bacd1926f7ae",
    "original_commit_id": "33865a5fbacf462c90520cb8f5dde61dd8fdbfc9",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "why is this changed?",
    "created_at": "2021-07-28T15:26:33Z",
    "updated_at": "2021-07-28T15:26:36Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21999#discussion_r678412561",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21999",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/678412561"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21999#discussion_r678412561"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21999"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/678412561/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 91,
    "original_line": 91,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/679947134",
    "pull_request_review_id": 719107339,
    "id": 679947134,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3OTk0NzEzNA==",
    "diff_hunk": "@@ -36,87 +34,62 @@ def transaction_graph_test(self, size, n_tx_to_mine=None, start_input_txid='', e\n             - has K+1 ancestors (including this one)\n \n         More details: https://en.wikipedia.org/wiki/Tournament_(graph_theory)\n-        \"\"\"\n-\n-        if not start_input_txid:\n-            start_input_txid = self.nodes[0].getblock(self.nodes[0].getblockhash(1))['tx'][0]\n \n-        if not end_address:\n-            end_address = self.nodes[0].getnewaddress()\n+        Note: In order to maintain Miniwallet compatibility wallet.send_self_transfer()\n+        only explicitly sets one ancestor for each transaction to form something\n+        like a singly linked list of size number of transactions.\n+        The acyclic tournament is then formed by the mempool.\n+        \"\"\"\n \n-        first_block_hash = ''\n-        tx_id = []\n-        tx_size = []\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n         self.log.info('Creating {} transactions...'.format(size))\n-        for i in range(0, size):\n-            self.log.debug('Preparing transaction #{}...'.format(i))\n-            # Prepare inputs.\n-            if i == 0:\n-                inputs = [{'txid': start_input_txid, 'vout': 0}]\n-                inputs_value = self.nodes[0].gettxout(start_input_txid, 0)['value']\n-            else:\n-                inputs = []\n-                inputs_value = 0\n-                for j, tx in enumerate(tx_id[0:i]):\n-                    # Transaction tx[K] is a child of each of previous transactions tx[0]..tx[K-1] at their output K-1.\n-                    vout = i - j - 1\n-                    inputs.append({'txid': tx_id[j], 'vout': vout})\n-                    inputs_value += self.nodes[0].gettxout(tx, vout)['value']\n-\n-            self.log.debug('inputs={}'.format(inputs))\n-            self.log.debug('inputs_value={}'.format(inputs_value))\n-\n-            # Prepare outputs.\n-            tx_count = i + 1\n-            if tx_count < size:\n-                # Transaction tx[K] is an ancestor of each of subsequent transactions tx[K+1]..tx[N-1].\n-                n_outputs = size - tx_count\n-                output_value = ((inputs_value - fee) / Decimal(n_outputs)).quantize(Decimal('0.00000001'))\n-                outputs = {}\n-                for _ in range(n_outputs):\n-                    outputs[self.nodes[0].getnewaddress()] = output_value\n-            else:\n-                output_value = (inputs_value - fee).quantize(Decimal('0.00000001'))\n-                outputs = {end_address: output_value}\n-\n-            self.log.debug('output_value={}'.format(output_value))\n-            self.log.debug('outputs={}'.format(outputs))\n-\n-            # Create a new transaction.\n-            unsigned_raw_tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-            signed_raw_tx = self.nodes[0].signrawtransactionwithwallet(unsigned_raw_tx)\n-            tx_id.append(self.nodes[0].sendrawtransaction(signed_raw_tx['hex']))\n-            tx_size.append(self.nodes[0].getrawmempool(True)[tx_id[-1]]['vsize'])\n-\n-            if tx_count in n_tx_to_mine:\n-                # The created transactions are mined into blocks by batches.\n-                self.log.info('The batch of {} transactions has been accepted into the mempool.'.format(len(self.nodes[0].getrawmempool())))\n-                block_hash = self.nodes[0].generate(1)[0]\n-                if not first_block_hash:\n-                    first_block_hash = block_hash\n-                assert_equal(len(self.nodes[0].getrawmempool()), 0)\n-                self.log.info('All of the transactions from the current batch have been mined into a block.')\n-            elif tx_count == size:\n-                # At the end all of the mined blocks are invalidated, and all of the created\n-                # transactions should be re-added from disconnected blocks to the mempool.\n-                self.log.info('The last batch of {} transactions has been accepted into the mempool.'.format(len(self.nodes[0].getrawmempool())))\n-                start = time.time()\n-                self.nodes[0].invalidateblock(first_block_hash)\n-                end = time.time()\n-                assert_equal(len(self.nodes[0].getrawmempool()), size)\n-                self.log.info('All of the recently mined transactions have been re-added into the mempool in {} seconds.'.format(end - start))\n-\n-        self.log.info('Checking descendants/ancestors properties of all of the in-mempool transactions...')\n-        for k, tx in enumerate(tx_id):\n+        self.wallet.scan_blocks(start=76, num=1)\n+        node.generate(size)\n+        txs = []\n+        block_ids = []\n+        tx_size = []\n+        for i in range(size):\n+            tx = self.wallet.send_self_transfer(from_node=node)\n+            m_tx = node.getrawmempool(True)[tx['txid']]\n+            txs.append(tx)\n+            tx_size.append(m_tx['vsize'])\n+            if (i+1) % n_tx_to_mine == 0:\n+                assert_equal(len(node.getrawmempool()), n_tx_to_mine)\n+                self.log.info('The batch of {} transactions has been accepted into the mempool.'\n+                              .format(n_tx_to_mine))\n+                block_ids.append(self.wallet.generate(1)[0])\n+                assert_equal(len(node.getrawmempool()), 0)\n+                self.log.info(\n+                    'All of the transactions from the current batch have been mined into a block.')\n+\n+        self.log.info(\n+            'Mempool size pre-invalidation: {}'.format(len(node.getrawmempool())))\n+        assert_equal(len(node.getrawmempool()), 0)\n+        # Invalidate the first block to send the transactions back to the mempool.\n+        start = time.time()\n+        node.invalidateblock(block_ids[0])\n+        end = time.time()\n+        self.log.info(\n+            'Mempool size post-invalidation: {}'.format(len(node.getrawmempool())))\n+        assert_equal(len(node.getrawmempool()), size)\n+        self.log.info('All of the recently mined transactions have been re-added into the mempool in {} seconds.'\n+                      .format(end - start))\n+\n+        self.log.info(\n+            'Checking descendants/ancestors properties of all of the in-mempool transactions...')\n+        for k, tx in enumerate(txs):\n+            id = tx['txid']\n             self.log.debug('Check transaction #{}.'.format(k))\n-            assert_equal(self.nodes[0].getrawmempool(True)[tx]['descendantcount'], size - k)\n-            assert_equal(self.nodes[0].getrawmempool(True)[tx]['descendantsize'], sum(tx_size[k:size]))\n-            assert_equal(self.nodes[0].getrawmempool(True)[tx]['ancestorcount'], k + 1)\n-            assert_equal(self.nodes[0].getrawmempool(True)[tx]['ancestorsize'], sum(tx_size[0:(k + 1)]))\n+            assert_equal(node.getrawmempool(True)[id]['descendantcount'], size - k)\n+            assert_equal(node.getrawmempool(True)[id]['descendantsize'], sum(tx_size[k:size]))\n+            assert_equal(node.getrawmempool(True)[id]['ancestorcount'], k + 1)\n+            assert_equal(node.getrawmempool(True)[id]['ancestorsize'], sum(tx_size[0:(k + 1)]))\n \n     def run_test(self):\n-        # Use batch size limited by DEFAULT_ANCESTOR_LIMIT = 25 to not fire \"too many unconfirmed parents\" error.\n-        self.transaction_graph_test(size=100, n_tx_to_mine=[25, 50, 75])\n+        # Use batch size limited by DEFAULT_ANCESTOR_LIMIT = 25\n+        # to not fire \"too many unconfirmed parents\" error.\n+        self.transaction_graph_test(size=100, n_tx_to_mine=25)",
    "path": "test/functional/mempool_updatefromblock.py",
    "position": 157,
    "original_position": 159,
    "commit_id": "1332dbb526f19ebf96bf3fa7c147bacd1926f7ae",
    "original_commit_id": "33865a5fbacf462c90520cb8f5dde61dd8fdbfc9",
    "user": {
      "login": "reemuru",
      "id": 13033037,
      "node_id": "MDQ6VXNlcjEzMDMzMDM3",
      "avatar_url": "https://avatars.githubusercontent.com/u/13033037?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/reemuru",
      "html_url": "https://github.com/reemuru",
      "followers_url": "https://api.github.com/users/reemuru/followers",
      "following_url": "https://api.github.com/users/reemuru/following{/other_user}",
      "gists_url": "https://api.github.com/users/reemuru/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/reemuru/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/reemuru/subscriptions",
      "organizations_url": "https://api.github.com/users/reemuru/orgs",
      "repos_url": "https://api.github.com/users/reemuru/repos",
      "events_url": "https://api.github.com/users/reemuru/events{/privacy}",
      "received_events_url": "https://api.github.com/users/reemuru/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Ah ok, apologies for the noise. Will put this into draft mode since some work is still needed. Thanks for review!",
    "created_at": "2021-07-30T13:58:56Z",
    "updated_at": "2021-07-30T13:58:57Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21999#discussion_r679947134",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21999",
    "author_association": "NONE",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/679947134"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21999#discussion_r679947134"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21999"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/679947134/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 91,
    "original_line": 91,
    "side": "RIGHT",
    "in_reply_to_id": 678412561
  }
]