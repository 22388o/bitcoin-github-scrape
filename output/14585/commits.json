[
  {
    "sha": "15db77f4dd7f1a7963398f1576580b577a1697bc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNWRiNzdmNGRkN2YxYTc5NjMzOThmMTU3NjU4MGI1NzdhMTY5N2Jj",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-10-26T16:54:30Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-10-26T17:42:58Z"
      },
      "message": "Don't rely on locale dependent functions in base_blob<BITS>::SetHex(...) (uint256), DecodeBase58(...), ParseMoney(...) and ParseHex(...)",
      "tree": {
        "sha": "0414a87045cbdf0618c23534da58f010d62a8808",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0414a87045cbdf0618c23534da58f010d62a8808"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/15db77f4dd7f1a7963398f1576580b577a1697bc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/15db77f4dd7f1a7963398f1576580b577a1697bc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/15db77f4dd7f1a7963398f1576580b577a1697bc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/15db77f4dd7f1a7963398f1576580b577a1697bc/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f4e4ea1ceecfb978584bd4f43cb6826e44ba86a3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f4e4ea1ceecfb978584bd4f43cb6826e44ba86a3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f4e4ea1ceecfb978584bd4f43cb6826e44ba86a3"
      }
    ],
    "stats": {
      "total": 38,
      "additions": 25,
      "deletions": 13
    },
    "files": [
      {
        "sha": "eac763394bf4d22a66ede15c8c01f67e2e8f2aaf",
        "filename": "src/base58.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15db77f4dd7f1a7963398f1576580b577a1697bc/src/base58.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15db77f4dd7f1a7963398f1576580b577a1697bc/src/base58.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.cpp?ref=15db77f4dd7f1a7963398f1576580b577a1697bc",
        "patch": "@@ -6,6 +6,7 @@\n \n #include <hash.h>\n #include <uint256.h>\n+#include <utilstrencodings.h>\n \n #include <assert.h>\n #include <string.h>\n@@ -34,7 +35,7 @@ static const int8_t mapBase58[256] = {\n bool DecodeBase58(const char* psz, std::vector<unsigned char>& vch)\n {\n     // Skip leading spaces.\n-    while (*psz && isspace(*psz))\n+    while (*psz && IsSpace(*psz))\n         psz++;\n     // Skip and count leading '1's.\n     int zeroes = 0;\n@@ -48,7 +49,7 @@ bool DecodeBase58(const char* psz, std::vector<unsigned char>& vch)\n     std::vector<unsigned char> b256(size);\n     // Process the characters.\n     static_assert(sizeof(mapBase58)/sizeof(mapBase58[0]) == 256, \"mapBase58.size() should be 256\"); // guarantee not out of range\n-    while (*psz && !isspace(*psz)) {\n+    while (*psz && !IsSpace(*psz)) {\n         // Decode base58 character\n         int carry = mapBase58[(uint8_t)*psz];\n         if (carry == -1)  // Invalid b58 character\n@@ -64,7 +65,7 @@ bool DecodeBase58(const char* psz, std::vector<unsigned char>& vch)\n         psz++;\n     }\n     // Skip trailing spaces.\n-    while (isspace(*psz))\n+    while (IsSpace(*psz))\n         psz++;\n     if (*psz != 0)\n         return false;"
      },
      {
        "sha": "e940f90cf0a5e9292073725bce016b4b66a04fdb",
        "filename": "src/uint256.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15db77f4dd7f1a7963398f1576580b577a1697bc/src/uint256.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15db77f4dd7f1a7963398f1576580b577a1697bc/src/uint256.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/uint256.cpp?ref=15db77f4dd7f1a7963398f1576580b577a1697bc",
        "patch": "@@ -29,7 +29,7 @@ void base_blob<BITS>::SetHex(const char* psz)\n     memset(data, 0, sizeof(data));\n \n     // skip leading spaces\n-    while (isspace(*psz))\n+    while (IsSpace(*psz))\n         psz++;\n \n     // skip 0x"
      },
      {
        "sha": "7bae161a1d9ca11e7933f5642ee78d49d43c3102",
        "filename": "src/utilmoneystr.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15db77f4dd7f1a7963398f1576580b577a1697bc/src/utilmoneystr.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15db77f4dd7f1a7963398f1576580b577a1697bc/src/utilmoneystr.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utilmoneystr.cpp?ref=15db77f4dd7f1a7963398f1576580b577a1697bc",
        "patch": "@@ -41,7 +41,7 @@ bool ParseMoney(const char* pszIn, CAmount& nRet)\n     std::string strWhole;\n     int64_t nUnits = 0;\n     const char* p = pszIn;\n-    while (isspace(*p))\n+    while (IsSpace(*p))\n         p++;\n     for (; *p; p++)\n     {\n@@ -56,14 +56,14 @@ bool ParseMoney(const char* pszIn, CAmount& nRet)\n             }\n             break;\n         }\n-        if (isspace(*p))\n+        if (IsSpace(*p))\n             break;\n         if (!isdigit(*p))\n             return false;\n         strWhole.insert(strWhole.end(), *p);\n     }\n     for (; *p; p++)\n-        if (!isspace(*p))\n+        if (!IsSpace(*p))\n             return false;\n     if (strWhole.size() > 10) // guard against 63 bit overflow\n         return false;"
      },
      {
        "sha": "a1700d2514534e1797830fd2417145945e6152be",
        "filename": "src/utilstrencodings.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15db77f4dd7f1a7963398f1576580b577a1697bc/src/utilstrencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15db77f4dd7f1a7963398f1576580b577a1697bc/src/utilstrencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utilstrencodings.cpp?ref=15db77f4dd7f1a7963398f1576580b577a1697bc",
        "patch": "@@ -85,7 +85,7 @@ std::vector<unsigned char> ParseHex(const char* psz)\n     std::vector<unsigned char> vch;\n     while (true)\n     {\n-        while (isspace(*psz))\n+        while (IsSpace(*psz))\n             psz++;\n         signed char c = HexDigit(*psz++);\n         if (c == (signed char)-1)\n@@ -266,7 +266,7 @@ static bool ParsePrechecks(const std::string& str)\n {\n     if (str.empty()) // No empty string allowed\n         return false;\n-    if (str.size() >= 1 && (isspace(str[0]) || isspace(str[str.size()-1]))) // No padding allowed\n+    if (str.size() >= 1 && (IsSpace(str[0]) || IsSpace(str[str.size()-1]))) // No padding allowed\n         return false;\n     if (str.size() != strlen(str.c_str())) // No embedded NUL characters allowed\n         return false;"
      },
      {
        "sha": "1610c8c268119aae258dfb2ea22ae2fe9614c99c",
        "filename": "src/utilstrencodings.h",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15db77f4dd7f1a7963398f1576580b577a1697bc/src/utilstrencodings.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15db77f4dd7f1a7963398f1576580b577a1697bc/src/utilstrencodings.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utilstrencodings.h?ref=15db77f4dd7f1a7963398f1576580b577a1697bc",
        "patch": "@@ -71,6 +71,21 @@ constexpr bool IsDigit(char c)\n     return c >= '0' && c <= '9';\n }\n \n+/**\n+ * Tests if the given character is a whitespace character. The whitespace characters\n+ * are: space, form-feed ('\\f'), newline ('\\n'), carriage return ('\\r'), horizontal\n+ * tab ('\\t'), and vertical tab ('\\v').\n+ *\n+ * This function is locale independent. Under the C locale this function gives the\n+ * same result as std::isspace.\n+ *\n+ * @param[in] c     character to test\n+ * @return          true if the argument is a whitespace character; otherwise false\n+ */\n+constexpr inline bool IsSpace(char c) noexcept {\n+    return c == ' ' || c == '\\f' || c == '\\n' || c == '\\r' || c == '\\t' || c == '\\v';\n+}\n+\n /**\n  * Convert string to signed 32-bit integer with strict parse error feedback.\n  * @returns true if the entire string could be parsed as valid integer,"
      },
      {
        "sha": "216cabbce97a5197af70595f69f3609f4c4f3f0f",
        "filename": "test/lint/lint-locale-dependence.sh",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15db77f4dd7f1a7963398f1576580b577a1697bc/test/lint/lint-locale-dependence.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15db77f4dd7f1a7963398f1576580b577a1697bc/test/lint/lint-locale-dependence.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-locale-dependence.sh?ref=15db77f4dd7f1a7963398f1576580b577a1697bc",
        "patch": "@@ -2,7 +2,6 @@\n \n export LC_ALL=C\n KNOWN_VIOLATIONS=(\n-    \"src/base58.cpp:.*isspace\"\n     \"src/bitcoin-tx.cpp.*stoul\"\n     \"src/bitcoin-tx.cpp.*trim_right\"\n     \"src/bitcoin-tx.cpp:.*atoi\"\n@@ -18,15 +17,12 @@ KNOWN_VIOLATIONS=(\n     \"src/test/getarg_tests.cpp.*split\"\n     \"src/torcontrol.cpp:.*atoi\"\n     \"src/torcontrol.cpp:.*strtol\"\n-    \"src/uint256.cpp:.*isspace\"\n     \"src/uint256.cpp:.*tolower\"\n     \"src/util.cpp:.*atoi\"\n     \"src/util.cpp:.*fprintf\"\n     \"src/util.cpp:.*tolower\"\n     \"src/utilmoneystr.cpp:.*isdigit\"\n-    \"src/utilmoneystr.cpp:.*isspace\"\n     \"src/utilstrencodings.cpp:.*atoi\"\n-    \"src/utilstrencodings.cpp:.*isspace\"\n     \"src/utilstrencodings.cpp:.*strtol\"\n     \"src/utilstrencodings.cpp:.*strtoll\"\n     \"src/utilstrencodings.cpp:.*strtoul\""
      }
    ]
  }
]