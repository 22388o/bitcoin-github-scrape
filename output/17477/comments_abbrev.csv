jnewbery,2019-11-14 16:21:51,"Request review from @TheBlueMatt and @morcos\n\n@TheBlueMatt - you introduced the vtxConflicted vector in BlockConnected in 461e49fee2935b1eb4d4ea7bae3023e655c0a6d8 with comment 'This change adds a parameter to BlockConnectedDisconnected which lists the transactions which were removed from mempool due to confliction as a result of this operation. While its somewhat of a shame to make block-valid",https://github.com/bitcoin/bitcoin/pull/17477#issuecomment-553963425,553963425,
DrahtBot,2019-11-14 19:16:22,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18278 (interfaces: Describe and follow some code conventions by ryanofsky)\n* #17443 (Drop checkFinalTx and use Median Ti",https://github.com/bitcoin/bitcoin/pull/17477#issuecomment-554037194,554037194,
jnewbery,2019-11-14 19:27:41,"Note that this can change the order of notifications for the wallet. If the node connects block A with conflicted txs a1 a2 and block B with conflicted txs b1 and b2 in one ActivateBestChainStep, the old ordering would be:\n\n- BlockConnected(A(conflicted=[a1,a2]))\n- BlockConnected(B(conflivted=[b1,b2]))\n\nand the new ordering is:\n\n- TransactionRemovedFromMempool(a1)\n- TransactionRemo",https://github.com/bitcoin/bitcoin/pull/17477#issuecomment-554041672,554041672,
MarcoFalke,2019-11-14 19:39:21,"> I'm pretty sure that's not a problem\n\nAre you sure about that? Note that change that is unconfirmed and not in the mempool is not counted toward our balance, so this would open up race conditions where a `send*` might fail when there is no reason for it to fail.",https://github.com/bitcoin/bitcoin/pull/17477#issuecomment-554046319,554046319,
jnewbery,2019-11-15 02:38:54,"> this would open up race conditions where a send* might fail when there is no reason for it to fail.\n\nI don't think that's true:\n\n- Before this change: conflicted transactions are marked as not in the mempool when the wallet hears about them in a `BlockConnected`'s `vtxConflicted` vector.\n- After this change: conflicted transactions are marked as not in the mempool slightly earlier when",https://github.com/bitcoin/bitcoin/pull/17477#issuecomment-554184168,554184168,
MarcoFalke,2019-11-15 13:29:36,"> So arguably there's a window condition in the existing code where the wallet might try to spend change that it thinks is in the mempool, but is actually conflicted with the latest block (although in practice this doesn't matter - it's always the case that there might be a better block that conflicts our transactions that we just don't know about yet).\n\nWhat if the user set min_conf to 1000 a",https://github.com/bitcoin/bitcoin/pull/17477#issuecomment-554358670,554358670,
jnewbery,2019-11-15 13:51:20,"> What if the user set min_conf to 1000 and rbf to false for that tx that spends the change that is only available for a short time erroneously? With those settings, the user should expect to create a transaction that could never possibly fail, no?\n\nMaybe I don't fully understand the scenario you're describing, but if the tx is spending change that has been conflicted out of the mempool but th",https://github.com/bitcoin/bitcoin/pull/17477#issuecomment-554365732,554365732,
jnewbery,2019-11-15 21:29:42,"@ariard - thanks for the review. I've taken all of your comment suggestions and some of the changes in your branch. I've gone back on changing the `PerBlockConnectTrace` to a `std::pair`. Using `auto` and `std::pair`'s `first` and `second` members makes it difficult to work out what's being done at the call site, so I've just changed `PerBlockConnectTrace` to be a struct with two members and `Conn",https://github.com/bitcoin/bitcoin/pull/17477#issuecomment-554535859,554535859,
jnewbery,2019-11-18 17:59:20,"@ariard : I think it's possible to actually remove `ConnectTrace` entirely now that it's not necessary to release `cs_main` before firing validation interface signals. Take a look at the branch here: https://github.com/jnewbery/bitcoin/tree/2019-11-remove-connect-trace.\n\nIf you agree, I'll remove the last two commits from this PR, and then just remove `ConnectTrace` entirely in a follow-up PR.",https://github.com/bitcoin/bitcoin/pull/17477#issuecomment-555134603,555134603,
jnewbery,2019-11-22 17:04:40,rebased on master,https://github.com/bitcoin/bitcoin/pull/17477#issuecomment-557612869,557612869,
jnewbery,2019-11-22 19:23:32,I've removed the final two commits (which tidied up the `ConnectTrace` class) since I remove that class entirely in PR #17562.,https://github.com/bitcoin/bitcoin/pull/17477#issuecomment-557660785,557660785,
ariard,2019-11-25 20:18:17,"@jnewbery - your approach is better than the one tried in my aforementioned branch, because you avoid passing back and forth a `std::vector` between `ActivateBestChain`, `ActivateBestChainStep`, `ConnectTip`. Furthermore, it's pretty straightforward on the lock reasoning, given we already do this for `BlockDisconnected` in `DisconnectTip` where we hold `cs_main`",https://github.com/bitcoin/bitcoin/pull/17477#issuecomment-558323117,558323117,
jnewbery,2019-11-25 23:26:10,Force-pushed a fix for a typo in a commit message. No code change.,https://github.com/bitcoin/bitcoin/pull/17477#issuecomment-558387414,558387414,
promag,2019-11-26 13:17:09,"In master `CWallet::BlockConnected` is ""atomic"" - adds new transactions and updates transaction states and nothing can can ""use"" the wallet in between.\n\nWith this change ""lots of stuff"" can happen while the wallet state (transactions state really) is updated. So I was checking what can happen and one is: https://github.com/bitcoin/bitcoin/blob/0ee914ba9e5960763c7bb380b566ee481446f97a/src/walle",https://github.com/bitcoin/bitcoin/pull/17477#issuecomment-558623499,558623499,
jnewbery,2019-11-26 14:15:21,"> So I think there's no issue in this case.\n\nI agree, and I think this is similar to Marco's concern earlier and my response: https://github.com/bitcoin/bitcoin/pull/17477#issuecomment-554365732.\n\nThis PR allows the wallet to be used in a small window between being notified of conflicted transactions from the block and the block itself. However, I don't think it opens any new window condit",https://github.com/bitcoin/bitcoin/pull/17477#issuecomment-558647936,558647936,
jnewbery,2020-01-10 18:25:07,rebased,https://github.com/bitcoin/bitcoin/pull/17477#issuecomment-573150763,573150763,
fjahr,2020-01-23 00:19:59,"Code review ACK 100d5d03f7629e0c4be14239c6c6c3e542c3f34e\n\nI spent some time thinking about the ""window issue"" and the worst scenario I could come up with is if there are high fees, a full mempool, and we do some automatic RBF-ing, so we replace a tx with a higher fee one immediately if our original is evicted from the Mempool because of low fees. We might try to RBF again although it is alread",https://github.com/bitcoin/bitcoin/pull/17477#issuecomment-577448372,577448372,
jonatack,2020-01-23 14:56:21,"FWIW if anyone is looking at tests, I reverted this change and built\n```diff\n--- a/src/txmempool.cpp\n+++ b/src/txmempool.cpp\n@@ -403,7 +403,7 @@ void CTxMemPool::addUnchecked(const CTxMemPoolEntry &entry, setEntries &setAnces\n \n void CTxMemPool::removeUnchecked(txiter it, MemPoolRemovalReason reason)\n {\n-    if (reason != MemPoolRemovalReason::BLOCK) {\n+    if (reason != MemPoolR",https://github.com/bitcoin/bitcoin/pull/17477#issuecomment-577716934,577716934,
jonatack,2020-02-19 19:23:19,"Rebase, please :)",https://github.com/bitcoin/bitcoin/pull/17477#issuecomment-588401106,588401106,
jnewbery,2020-03-03 22:34:00,"Pushed a fix to https://github.com/bitcoin/bitcoin/pull/17477#discussion_r370223948.\n\nThanks for the re-review @ryanofsky . I intend to address your other comments soon.",https://github.com/bitcoin/bitcoin/pull/17477#issuecomment-594206041,594206041,
jnewbery,2020-03-11 22:40:40,"> It would still be nice to clean up the PR description\n\n@ryanofsky - done. I've also addressed your inline comment. Let me know what you think.\n@kallewoof @fjahr : do you mind rereviewing? It's just a rebase/comment change since your previous ACKs.",https://github.com/bitcoin/bitcoin/pull/17477#issuecomment-597915505,597915505,
ariard,2019-11-15 17:45:09,"Commit 0f17fd9. I think after this one CTxMemPool member is no more of any use as it was used by ConnecTrace to connect to mempool signal, can you remove it ?",https://github.com/bitcoin/bitcoin/pull/17477#discussion_r346937589,346937589,src/validation.cpp
ariard,2019-11-15 18:00:42,"nit: ""removed txn non-final anymore due to a reorg""",https://github.com/bitcoin/bitcoin/pull/17477#discussion_r346943451,346943451,src/validationinterface.h
ariard,2019-11-15 18:19:21,"Commit 0f17fd9. Shoulnd't be more logic to remove both comments in previous commit (141f971) as it's the one where you effectively removed conflicted txn insertion and struct, Just looking at this commit atomically you can't make sense of ""This class assumes (and asserts) that the conflicted transactions for a given block are added via mempool callbacks""",https://github.com/bitcoin/bitcoin/pull/17477#discussion_r346950264,346950264,src/validation.cpp
ariard,2019-11-15 18:24:18,super-nit: signal before thread?,https://github.com/bitcoin/bitcoin/pull/17477#discussion_r346952184,346952184,src/init.cpp
ariard,2019-11-15 18:27:03,I think it can be noted in commit message than `NotifiyEntryAdded` signal didn't have any slot connected to and so was already useless,https://github.com/bitcoin/bitcoin/pull/17477#discussion_r346953291,346953291,src/txmempool.h
ariard,2019-11-15 18:39:47,"Commit 793b45c. I think this comment, assert and pop should also be removed in commit 141f971 as this is the last commit were their logic make sense. Also in `BlockConnected`, the removed assert and emplace_back belonged to same logic.",https://github.com/bitcoin/bitcoin/pull/17477#discussion_r346958305,346958305,src/validation.cpp
ariard,2019-11-15 18:41:14,Should you keep this comment ? The class is still single-use. ,https://github.com/bitcoin/bitcoin/pull/17477#discussion_r346958873,346958873,src/validation.cpp
jnewbery,2019-11-15 20:20:57,"There are several other reasons a tx could be removed for REORG:\n\n- a spend from a coinbase output that is no longer mature (>100 confirmations)\n- a descendants of non-final and non-mature outputs.\n- if the re-org has been deep enough that the disconnect pool has filled up\n- if the standardness or consensus rules have changed across the reorg\n\nI'd rather leave this high level than tr",https://github.com/bitcoin/bitcoin/pull/17477#discussion_r346996128,346996128,src/validationinterface.h
jnewbery,2019-11-15 20:23:11,done,https://github.com/bitcoin/bitcoin/pull/17477#discussion_r346996854,346996854,src/validation.cpp
jnewbery,2019-11-15 20:23:15,done,https://github.com/bitcoin/bitcoin/pull/17477#discussion_r346996883,346996883,src/init.cpp
jnewbery,2019-11-15 20:23:20,done,https://github.com/bitcoin/bitcoin/pull/17477#discussion_r346996906,346996906,src/txmempool.h
jnewbery,2019-11-15 20:24:39,"I prefer to leave this as a separate commit since I think it's easier to review removing the logic piece-by-piece. If other reviewers agree with you, then I'm happy to squash the commits.",https://github.com/bitcoin/bitcoin/pull/17477#discussion_r346997355,346997355,src/validation.cpp
jnewbery,2019-11-15 20:25:16,restored,https://github.com/bitcoin/bitcoin/pull/17477#discussion_r346997548,346997548,src/validation.cpp
jnewbery,2019-11-15 20:37:29,done,https://github.com/bitcoin/bitcoin/pull/17477#discussion_r347001539,347001539,src/validation.cpp
promag,2019-11-25 22:47:47,"nit, just drop the constructor?",https://github.com/bitcoin/bitcoin/pull/17477#discussion_r350463184,350463184,src/validation.cpp
jnewbery,2019-11-25 23:49:31,I plan to remove `PerBlockConnectTrace()` entirely in #17562.,https://github.com/bitcoin/bitcoin/pull/17477#discussion_r350481254,350481254,src/validation.cpp
promag,2019-11-26 13:00:07,"Sure, but if you happen to push again I still think you could remove this line. ",https://github.com/bitcoin/bitcoin/pull/17477#discussion_r350725914,350725914,src/validation.cpp
jonatack,2020-01-22 15:06:32,Would this line be better in `src/ui_interface.h` instead? It seems to be where it's used. Build and tests green.,https://github.com/bitcoin/bitcoin/pull/17477#discussion_r369614511,369614511,src/init.cpp
ryanofsky,2020-01-23 16:30:36,"In commit ""[wallet] Notify conflicted transactions in TransactionRemovedFromMempool"" (3529e0bc2cba7a9d502de2c0fe9b17ec94a7fd0c)\n\nCould you add a comment about why notifications are skipped for BLOCK? I believe it's just for performance because BlockConnected notification provides the same information.",https://github.com/bitcoin/bitcoin/pull/17477#discussion_r370223948,370223948,src/txmempool.cpp
ryanofsky,2020-03-02 18:25:56,"In commit ""[wallet] Notify conflicted transactions in TransactionRemovedFromMempool"" (72d17a293e32bcf8d4cf9b7744bb67a0a886fb42)\n\nIt'd be good to add information here from https://github.com/bitcoin/bitcoin/pull/17477#issuecomment-554041672 about order of TransactionRemovedFromMempool and BlockConnected notifications",https://github.com/bitcoin/bitcoin/pull/17477#discussion_r386567904,386567904,src/validationinterface.h
jnewbery,2020-03-03 22:13:05,"it's used in init.cpp:366: `static boost::signals2::connection rpc_notify_block_change_connection;`\n",https://github.com/bitcoin/bitcoin/pull/17477#discussion_r387326230,387326230,src/init.cpp
jnewbery,2020-03-03 22:33:03,done,https://github.com/bitcoin/bitcoin/pull/17477#discussion_r387335176,387335176,src/txmempool.cpp
jnewbery,2020-03-11 22:39:08,done,https://github.com/bitcoin/bitcoin/pull/17477#discussion_r391310332,391310332,src/validationinterface.h
jonatack,2020-03-12 06:12:52,"d'oh, thanks -- not sure how I missed that.",https://github.com/bitcoin/bitcoin/pull/17477#discussion_r391418753,391418753,src/init.cpp
