laanwj,2018-11-21T12:18:18Z,"There's a test for batching added in 4526d21, but it's part of the wallet tests so adding a general one is probably good.",https://github.com/bitcoin/bitcoin/pull/14777#issuecomment-440643136,440643136,
laanwj,2018-11-21T15:29:19Z,utACK 06ffc4b19b8ca8a8173caf5d3e90d0651e22d72d,https://github.com/bitcoin/bitcoin/pull/14777#issuecomment-440705505,440705505,
promag,2018-11-21T16:26:08Z,Where is Travis?,https://github.com/bitcoin/bitcoin/pull/14777#issuecomment-440727220,440727220,
promag,2018-11-21T18:56:49Z,utACK 3d2c7d6.,https://github.com/bitcoin/bitcoin/pull/14777#issuecomment-440774637,440774637,
Empact,2018-11-22T14:26:19Z,utACK 3d2c7d6,https://github.com/bitcoin/bitcoin/pull/14777#issuecomment-441046192,441046192,
promag,2018-11-21T11:11:57Z,"nit, add another call here or move one of the above?",https://github.com/bitcoin/bitcoin/pull/14777#discussion_r235345503,235345503,test/functional/interface_rpc.py
laanwj,2018-11-21T12:19:18Z,you're not using the `.batch()` functionality of the RPC proxy?,https://github.com/bitcoin/bitcoin/pull/14777#discussion_r235364830,235364830,test/functional/interface_rpc.py
domob1812,2018-11-21T14:13:02Z,"No, as I didn't know it exists.  Will update the code later.",https://github.com/bitcoin/bitcoin/pull/14777#discussion_r235401960,235401960,test/functional/interface_rpc.py
domob1812,2018-11-21T14:14:12Z,What other call do you mean here?  Or is this comment obsolete as well with @laanwj's remark below?,https://github.com/bitcoin/bitcoin/pull/14777#discussion_r235402367,235402367,test/functional/interface_rpc.py
promag,2018-11-21T14:56:43Z,I was suggesting to put the invalid method between valid methods.,https://github.com/bitcoin/bitcoin/pull/14777#discussion_r235418978,235418978,test/functional/interface_rpc.py
domob1812,2018-11-21T15:07:42Z,"I see, that makes sense - changed.",https://github.com/bitcoin/bitcoin/pull/14777#discussion_r235423489,235423489,test/functional/interface_rpc.py
domob1812,2018-11-21T15:08:01Z,Changed - that's indeed much simpler!,https://github.com/bitcoin/bitcoin/pull/14777#discussion_r235423636,235423636,test/functional/interface_rpc.py
promag,2018-11-21T15:12:22Z,Remove this (unnecessary for the test and also deprecated) and update accordingly?,https://github.com/bitcoin/bitcoin/pull/14777#discussion_r235425331,235425331,test/functional/interface_rpc.py
domob1812,2018-11-21T15:22:49Z,Done,https://github.com/bitcoin/bitcoin/pull/14777#discussion_r235429858,235429858,test/functional/interface_rpc.py
promag,2018-11-21T15:34:34Z,"nit, could just use `self.nodes[0]` above.",https://github.com/bitcoin/bitcoin/pull/14777#discussion_r235434714,235434714,test/functional/interface_rpc.py
promag,2018-11-21T15:34:47Z,"nit, could inline.",https://github.com/bitcoin/bitcoin/pull/14777#discussion_r235434825,235434825,test/functional/interface_rpc.py
promag,2018-11-21T15:36:33Z,"nit, could use `getblockchaininfo` to avoid `getbestblockhash` below.",https://github.com/bitcoin/bitcoin/pull/14777#discussion_r235435485,235435485,test/functional/interface_rpc.py
domob1812,2018-11-21T15:48:29Z,"I chose to use `self.node` to make it more explicit in the code that there is only one and no index is needed, but I guess it is clear without that as well.  Changed.",https://github.com/bitcoin/bitcoin/pull/14777#discussion_r235440641,235440641,test/functional/interface_rpc.py
domob1812,2018-11-21T15:48:39Z,Done,https://github.com/bitcoin/bitcoin/pull/14777#discussion_r235440718,235440718,test/functional/interface_rpc.py
domob1812,2018-11-21T15:49:45Z,"Why would that be better / why should we ""avoid"" `getbestblockhash`?  A function that just returns a string seems simpler to me than one that returns an object (that's why I chose it), but it doesn't really matter.  So I'm happy to change it, but I don't see why that would be better?",https://github.com/bitcoin/bitcoin/pull/14777#discussion_r235441194,235441194,test/functional/interface_rpc.py
promag,2018-11-21T16:19:58Z,Just to save another call when it's irrelevant for this test.,https://github.com/bitcoin/bitcoin/pull/14777#discussion_r235453854,235453854,test/functional/interface_rpc.py
domob1812,2018-11-21T16:26:49Z,"I see - but for that, `getblockchaininfo` won't help, either, as I would also have to call that on the node again to get the ""expected"" data.  I could just call `getblockcount` again - would you prefer that?\n\nOr alternatively just check that there is some `result`, without checking what it is.",https://github.com/bitcoin/bitcoin/pull/14777#discussion_r235456741,235456741,test/functional/interface_rpc.py
promag,2018-11-21T16:32:36Z,"Exactly, doesn't matter full expected result.",https://github.com/bitcoin/bitcoin/pull/14777#discussion_r235459047,235459047,test/functional/interface_rpc.py
domob1812,2018-11-21T16:41:09Z,"Ok, I've changed the code now to just check that `result` is not `None` without checking what it actually is (so that no second RPC is needed for that).",https://github.com/bitcoin/bitcoin/pull/14777#discussion_r235462397,235462397,test/functional/interface_rpc.py
promag,2018-11-21T16:58:16Z,"What is the reason to index by id? Could do something like:\n```\nassert_equal(result[0][""id""], 1)\nassert_equal(result[0][""error""], None)\nassert_equal(result[0][""result""], 0)\n...\n```\nsince the response order matters.",https://github.com/bitcoin/bitcoin/pull/14777#discussion_r235469017,235469017,test/functional/interface_rpc.py
promag,2018-11-21T16:59:01Z,Bad grammar?,https://github.com/bitcoin/bitcoin/pull/14777#discussion_r235469307,235469307,test/functional/interface_rpc.py
domob1812,2018-11-21T18:42:26Z,"One (minor) reason is that this verifies indirectly that the server handles the `id` field correctly.  But the main reason is to make sure that we match up the right responses to requests.  According to my understanding of the [spec](https://www.jsonrpc.org/specification#batch), the order is *not* guaranteed to be the same as in the request.  (It is for Bitcoin Core's implementation, but that may ",https://github.com/bitcoin/bitcoin/pull/14777#discussion_r235501481,235501481,test/functional/interface_rpc.py
domob1812,2018-11-21T18:43:18Z,"Good catch, that is a left over from before the order was changed.  Updated.",https://github.com/bitcoin/bitcoin/pull/14777#discussion_r235501735,235501735,test/functional/interface_rpc.py
promag,2018-11-21T18:54:06Z,"Indeed! From the specs:\n> The Server MAY process a batch rpc call as a set of concurrent tasks, processing them in any order and with any width of parallelism.\n> \n> The Response objects being returned from a batch call MAY be returned in any order within the Array. The Client SHOULD match contexts between the set of Request objects and the resulting set of Response objects based on the id me",https://github.com/bitcoin/bitcoin/pull/14777#discussion_r235504852,235504852,test/functional/interface_rpc.py
