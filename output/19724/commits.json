[
  {
    "sha": "8d6ff46f55f373e344278ab3f1ac27b1dba36623",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZDZmZjQ2ZjU1ZjM3M2UzNDQyNzhhYjNmMWFjMjdiMWRiYTM2NjIz",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-08-12T03:37:32Z"
      },
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-09-02T20:34:58Z"
      },
      "message": "scripted-diff: Rename `OUTBOUND` ConnectionType to `OUTBOUND_FULL_RELAY`\n\n-BEGIN VERIFY SCRIPT-\nsed -i 's/OUTBOUND, /OUTBOUND_FULL_RELAY, /g' src/net.h\nsed -i 's/ConnectionType::OUTBOUND/ConnectionType::OUTBOUND_FULL_RELAY/g' src/test/net_tests.cpp src/test/fuzz/process_message.cpp src/test/fuzz/process_messages.cpp src/net.cpp src/test/denialofservice_tests.cpp src/net.h src/test/fuzz/net.cpp\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "334255a84bfef2e500dbda78db3578bf6c200839",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/334255a84bfef2e500dbda78db3578bf6c200839"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8d6ff46f55f373e344278ab3f1ac27b1dba36623",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d6ff46f55f373e344278ab3f1ac27b1dba36623",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8d6ff46f55f373e344278ab3f1ac27b1dba36623",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d6ff46f55f373e344278ab3f1ac27b1dba36623/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c157a50694545090cb1c7e69123fe4709bd5a279",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c157a50694545090cb1c7e69123fe4709bd5a279",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c157a50694545090cb1c7e69123fe4709bd5a279"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 15,
      "deletions": 15
    },
    "files": [
      {
        "sha": "b013896ca3aeeecc63907abc77485d781f88a35a",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d6ff46f55f373e344278ab3f1ac27b1dba36623/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d6ff46f55f373e344278ab3f1ac27b1dba36623/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=8d6ff46f55f373e344278ab3f1ac27b1dba36623",
        "patch": "@@ -1847,7 +1847,7 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n                     case ConnectionType::INBOUND:\n                     case ConnectionType::MANUAL:\n                         break;\n-                    case ConnectionType::OUTBOUND:\n+                    case ConnectionType::OUTBOUND_FULL_RELAY:\n                     case ConnectionType::BLOCK_RELAY:\n                     case ConnectionType::ADDR_FETCH:\n                     case ConnectionType::FEELER:\n@@ -1953,12 +1953,12 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n             if (fFeeler) {\n                 conn_type = ConnectionType::FEELER;\n             } else if (nOutboundFullRelay < m_max_outbound_full_relay) {\n-                conn_type = ConnectionType::OUTBOUND;\n+                conn_type = ConnectionType::OUTBOUND_FULL_RELAY;\n             } else if (nOutboundBlockRelay < m_max_outbound_block_relay) {\n                 conn_type = ConnectionType::BLOCK_RELAY;\n             } else {\n                 // GetTryNewOutboundPeer() is true\n-                conn_type = ConnectionType::OUTBOUND;\n+                conn_type = ConnectionType::OUTBOUND_FULL_RELAY;\n             }\n \n             OpenNetworkConnection(addrConnect, (int)setConnected.size() >= std::min(nMaxConnections - 1, 2), &grant, nullptr, conn_type);"
      },
      {
        "sha": "40d5f5e47d46d5158c36576f5cdd63d133fa5e0f",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d6ff46f55f373e344278ab3f1ac27b1dba36623/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d6ff46f55f373e344278ab3f1ac27b1dba36623/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=8d6ff46f55f373e344278ab3f1ac27b1dba36623",
        "patch": "@@ -119,7 +119,7 @@ struct CSerializedNetMsg\n  * connection. Aside from INBOUND, all types are initiated by us. */\n enum class ConnectionType {\n     INBOUND, /**< peer initiated connections */\n-    OUTBOUND, /**< full relay connections (blocks, addrs, txns) made automatically. Addresses selected from AddrMan. */\n+    OUTBOUND_FULL_RELAY, /**< full relay connections (blocks, addrs, txns) made automatically. Addresses selected from AddrMan. */\n     MANUAL, /**< connections to addresses added via addnode or the connect command line argument */\n     FEELER, /**< short lived connections used to test address validity */\n     BLOCK_RELAY, /**< only relay blocks to these automatic outbound connections. Addresses selected from AddrMan. */\n@@ -209,7 +209,7 @@ class CConnman\n     bool GetNetworkActive() const { return fNetworkActive; };\n     bool GetUseAddrmanOutgoing() const { return m_use_addrman_outgoing; };\n     void SetNetworkActive(bool active);\n-    void OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound = nullptr, const char *strDest = nullptr, ConnectionType conn_type = ConnectionType::OUTBOUND);\n+    void OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound = nullptr, const char *strDest = nullptr, ConnectionType conn_type = ConnectionType::OUTBOUND_FULL_RELAY);\n     bool CheckIncomingNonce(uint64_t nonce);\n \n     bool ForNode(NodeId id, std::function<bool(CNode* pnode)> func);\n@@ -824,7 +824,7 @@ class CNode\n \n     bool IsOutboundOrBlockRelayConn() const {\n         switch(m_conn_type) {\n-            case ConnectionType::OUTBOUND:\n+            case ConnectionType::OUTBOUND_FULL_RELAY:\n             case ConnectionType::BLOCK_RELAY:\n                 return true;\n             case ConnectionType::INBOUND:\n@@ -838,7 +838,7 @@ class CNode\n     }\n \n     bool IsFullOutboundConn() const {\n-        return m_conn_type == ConnectionType::OUTBOUND;\n+        return m_conn_type == ConnectionType::OUTBOUND_FULL_RELAY;\n     }\n \n     bool IsManualConn() const {\n@@ -867,7 +867,7 @@ class CNode\n             case ConnectionType::MANUAL:\n             case ConnectionType::FEELER:\n                 return false;\n-            case ConnectionType::OUTBOUND:\n+            case ConnectionType::OUTBOUND_FULL_RELAY:\n             case ConnectionType::BLOCK_RELAY:\n             case ConnectionType::ADDR_FETCH:\n                 return true;"
      },
      {
        "sha": "028d3d482bf1f5aacbcb92c837c065a832c1c46c",
        "filename": "src/test/denialofservice_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d6ff46f55f373e344278ab3f1ac27b1dba36623/src/test/denialofservice_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d6ff46f55f373e344278ab3f1ac27b1dba36623/src/test/denialofservice_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/denialofservice_tests.cpp?ref=8d6ff46f55f373e344278ab3f1ac27b1dba36623",
        "patch": "@@ -84,7 +84,7 @@ BOOST_AUTO_TEST_CASE(outbound_slow_chain_eviction)\n \n     // Mock an outbound peer\n     CAddress addr1(ip(0xa0b0c001), NODE_NONE);\n-    CNode dummyNode1(id++, ServiceFlags(NODE_NETWORK|NODE_WITNESS), 0, INVALID_SOCKET, addr1, 0, 0, CAddress(), \"\", ConnectionType::OUTBOUND);\n+    CNode dummyNode1(id++, ServiceFlags(NODE_NETWORK|NODE_WITNESS), 0, INVALID_SOCKET, addr1, 0, 0, CAddress(), \"\", ConnectionType::OUTBOUND_FULL_RELAY);\n     dummyNode1.SetSendVersion(PROTOCOL_VERSION);\n \n     peerLogic->InitializeNode(&dummyNode1);\n@@ -136,7 +136,7 @@ BOOST_AUTO_TEST_CASE(outbound_slow_chain_eviction)\n static void AddRandomOutboundPeer(std::vector<CNode *> &vNodes, PeerLogicValidation &peerLogic, CConnmanTest* connman)\n {\n     CAddress addr(ip(g_insecure_rand_ctx.randbits(32)), NODE_NONE);\n-    vNodes.emplace_back(new CNode(id++, ServiceFlags(NODE_NETWORK|NODE_WITNESS), 0, INVALID_SOCKET, addr, 0, 0, CAddress(), \"\", ConnectionType::OUTBOUND));\n+    vNodes.emplace_back(new CNode(id++, ServiceFlags(NODE_NETWORK|NODE_WITNESS), 0, INVALID_SOCKET, addr, 0, 0, CAddress(), \"\", ConnectionType::OUTBOUND_FULL_RELAY));\n     CNode &node = *vNodes.back();\n     node.SetSendVersion(PROTOCOL_VERSION);\n "
      },
      {
        "sha": "02a53f719caf85a80c837138b8aa9323114ebf79",
        "filename": "src/test/fuzz/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d6ff46f55f373e344278ab3f1ac27b1dba36623/src/test/fuzz/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d6ff46f55f373e344278ab3f1ac27b1dba36623/src/test/fuzz/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/net.cpp?ref=8d6ff46f55f373e344278ab3f1ac27b1dba36623",
        "patch": "@@ -46,7 +46,7 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n                fuzzed_data_provider.ConsumeIntegral<uint64_t>(),\n                *address_bind,\n                fuzzed_data_provider.ConsumeRandomLengthString(32),\n-               fuzzed_data_provider.PickValueInArray({ConnectionType::INBOUND, ConnectionType::OUTBOUND, ConnectionType::MANUAL, ConnectionType::FEELER, ConnectionType::BLOCK_RELAY, ConnectionType::ADDR_FETCH})};\n+               fuzzed_data_provider.PickValueInArray({ConnectionType::INBOUND, ConnectionType::OUTBOUND_FULL_RELAY, ConnectionType::MANUAL, ConnectionType::FEELER, ConnectionType::BLOCK_RELAY, ConnectionType::ADDR_FETCH})};\n     while (fuzzed_data_provider.ConsumeBool()) {\n         switch (fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 12)) {\n         case 0: {"
      },
      {
        "sha": "52efe5ddfab46962ad6e082c8f53d3ce65379715",
        "filename": "src/test/fuzz/process_message.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d6ff46f55f373e344278ab3f1ac27b1dba36623/src/test/fuzz/process_message.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d6ff46f55f373e344278ab3f1ac27b1dba36623/src/test/fuzz/process_message.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/process_message.cpp?ref=8d6ff46f55f373e344278ab3f1ac27b1dba36623",
        "patch": "@@ -68,7 +68,7 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n         return;\n     }\n     CDataStream random_bytes_data_stream{fuzzed_data_provider.ConsumeRemainingBytes<unsigned char>(), SER_NETWORK, PROTOCOL_VERSION};\n-    CNode& p2p_node = *MakeUnique<CNode>(0, ServiceFlags(NODE_NETWORK | NODE_WITNESS | NODE_BLOOM), 0, INVALID_SOCKET, CAddress{CService{in_addr{0x0100007f}, 7777}, NODE_NETWORK}, 0, 0, CAddress{}, std::string{}, ConnectionType::OUTBOUND).release();\n+    CNode& p2p_node = *MakeUnique<CNode>(0, ServiceFlags(NODE_NETWORK | NODE_WITNESS | NODE_BLOOM), 0, INVALID_SOCKET, CAddress{CService{in_addr{0x0100007f}, 7777}, NODE_NETWORK}, 0, 0, CAddress{}, std::string{}, ConnectionType::OUTBOUND_FULL_RELAY).release();\n     p2p_node.fSuccessfullyConnected = true;\n     p2p_node.nVersion = PROTOCOL_VERSION;\n     p2p_node.SetSendVersion(PROTOCOL_VERSION);"
      },
      {
        "sha": "33385c06cfdeb906cdd8c0dc77748fcd05cfb967",
        "filename": "src/test/fuzz/process_messages.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d6ff46f55f373e344278ab3f1ac27b1dba36623/src/test/fuzz/process_messages.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d6ff46f55f373e344278ab3f1ac27b1dba36623/src/test/fuzz/process_messages.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/process_messages.cpp?ref=8d6ff46f55f373e344278ab3f1ac27b1dba36623",
        "patch": "@@ -44,7 +44,7 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n     const auto num_peers_to_add = fuzzed_data_provider.ConsumeIntegralInRange(1, 3);\n     for (int i = 0; i < num_peers_to_add; ++i) {\n         const ServiceFlags service_flags = ServiceFlags(fuzzed_data_provider.ConsumeIntegral<uint64_t>());\n-        const ConnectionType conn_type = fuzzed_data_provider.PickValueInArray({ConnectionType::INBOUND, ConnectionType::OUTBOUND, ConnectionType::MANUAL, ConnectionType::FEELER, ConnectionType::BLOCK_RELAY, ConnectionType::ADDR_FETCH});\n+        const ConnectionType conn_type = fuzzed_data_provider.PickValueInArray({ConnectionType::INBOUND, ConnectionType::OUTBOUND_FULL_RELAY, ConnectionType::MANUAL, ConnectionType::FEELER, ConnectionType::BLOCK_RELAY, ConnectionType::ADDR_FETCH});\n         peers.push_back(MakeUnique<CNode>(i, service_flags, 0, INVALID_SOCKET, CAddress{CService{in_addr{0x0100007f}, 7777}, NODE_NETWORK}, 0, 0, CAddress{}, std::string{}, conn_type).release());\n         CNode& p2p_node = *peers.back();\n "
      },
      {
        "sha": "1ac1d975d6e511967d9c92b5204ef3c1b4ca66c9",
        "filename": "src/test/net_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d6ff46f55f373e344278ab3f1ac27b1dba36623/src/test/net_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d6ff46f55f373e344278ab3f1ac27b1dba36623/src/test/net_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/net_tests.cpp?ref=8d6ff46f55f373e344278ab3f1ac27b1dba36623",
        "patch": "@@ -183,7 +183,7 @@ BOOST_AUTO_TEST_CASE(cnode_simple_test)\n     CAddress addr = CAddress(CService(ipv4Addr, 7777), NODE_NETWORK);\n     std::string pszDest;\n \n-    std::unique_ptr<CNode> pnode1 = MakeUnique<CNode>(id++, NODE_NETWORK, height, hSocket, addr, 0, 0, CAddress(), pszDest, ConnectionType::OUTBOUND);\n+    std::unique_ptr<CNode> pnode1 = MakeUnique<CNode>(id++, NODE_NETWORK, height, hSocket, addr, 0, 0, CAddress(), pszDest, ConnectionType::OUTBOUND_FULL_RELAY);\n     BOOST_CHECK(pnode1->IsInboundConn() == false);\n \n     std::unique_ptr<CNode> pnode2 = MakeUnique<CNode>(id++, NODE_NETWORK, height, hSocket, addr, 1, 1, CAddress(), pszDest, ConnectionType::INBOUND);\n@@ -283,7 +283,7 @@ BOOST_AUTO_TEST_CASE(ipv4_peer_with_ipv6_addrMe_test)\n     in_addr ipv4AddrPeer;\n     ipv4AddrPeer.s_addr = 0xa0b0c001;\n     CAddress addr = CAddress(CService(ipv4AddrPeer, 7777), NODE_NETWORK);\n-    std::unique_ptr<CNode> pnode = MakeUnique<CNode>(0, NODE_NETWORK, 0, INVALID_SOCKET, addr, 0, 0, CAddress{}, std::string{}, ConnectionType::OUTBOUND);\n+    std::unique_ptr<CNode> pnode = MakeUnique<CNode>(0, NODE_NETWORK, 0, INVALID_SOCKET, addr, 0, 0, CAddress{}, std::string{}, ConnectionType::OUTBOUND_FULL_RELAY);\n     pnode->fSuccessfullyConnected.store(true);\n \n     // the peer claims to be reaching us via IPv6"
      }
    ]
  },
  {
    "sha": "a6ab1e81f964df131cfa0e11e07bedb3283b823f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNmFiMWU4MWY5NjRkZjEzMWNmYTBlMTFlMDdiZWRiMzI4M2I4MjNm",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-08-10T19:21:07Z"
      },
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-09-02T20:36:29Z"
      },
      "message": "[net] Remove unnecessary default args on OpenNetworkConnection",
      "tree": {
        "sha": "6ec889f0bea4709055d51bf3620732a3f48bbe79",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6ec889f0bea4709055d51bf3620732a3f48bbe79"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a6ab1e81f964df131cfa0e11e07bedb3283b823f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6ab1e81f964df131cfa0e11e07bedb3283b823f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a6ab1e81f964df131cfa0e11e07bedb3283b823f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6ab1e81f964df131cfa0e11e07bedb3283b823f/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8d6ff46f55f373e344278ab3f1ac27b1dba36623",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d6ff46f55f373e344278ab3f1ac27b1dba36623",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8d6ff46f55f373e344278ab3f1ac27b1dba36623"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "81c960cc9c9d5803d217731e61c6330ca1bd3e1e",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6ab1e81f964df131cfa0e11e07bedb3283b823f/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6ab1e81f964df131cfa0e11e07bedb3283b823f/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=a6ab1e81f964df131cfa0e11e07bedb3283b823f",
        "patch": "@@ -209,7 +209,7 @@ class CConnman\n     bool GetNetworkActive() const { return fNetworkActive; };\n     bool GetUseAddrmanOutgoing() const { return m_use_addrman_outgoing; };\n     void SetNetworkActive(bool active);\n-    void OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound = nullptr, const char *strDest = nullptr, ConnectionType conn_type = ConnectionType::OUTBOUND_FULL_RELAY);\n+    void OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant* grantOutbound, const char* strDest, ConnectionType conn_type);\n     bool CheckIncomingNonce(uint64_t nonce);\n \n     bool ForNode(NodeId id, std::function<bool(CNode* pnode)> func);"
      }
    ]
  },
  {
    "sha": "dff16b184b1428a068d144e5e4dde7595b4729c0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZmYxNmIxODRiMTQyOGEwNjhkMTQ0ZTVlNGRkZTc1OTViNDcyOWMw",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-08-10T21:48:54Z"
      },
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-09-03T00:18:21Z"
      },
      "message": "[refactor] Restructure logic to check for addr relay.\n\nWe previously identified if we relay addresses to the connection by checking\nfor the existence of the m_addr_known data structure. With this commit, we\nanswer this question based on the connection type.\n\nIsAddrRelayPeer() checked for the existence of the m_addr_known",
      "tree": {
        "sha": "d177683017907e7edc7183c31131f0c7bb030c9c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d177683017907e7edc7183c31131f0c7bb030c9c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dff16b184b1428a068d144e5e4dde7595b4729c0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dff16b184b1428a068d144e5e4dde7595b4729c0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dff16b184b1428a068d144e5e4dde7595b4729c0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dff16b184b1428a068d144e5e4dde7595b4729c0/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a6ab1e81f964df131cfa0e11e07bedb3283b823f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6ab1e81f964df131cfa0e11e07bedb3283b823f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a6ab1e81f964df131cfa0e11e07bedb3283b823f"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 17,
      "deletions": 11
    },
    "files": [
      {
        "sha": "0a9a8f7fb48e16f5eb72552f239815ce46000a13",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dff16b184b1428a068d144e5e4dde7595b4729c0/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dff16b184b1428a068d144e5e4dde7595b4729c0/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=dff16b184b1428a068d144e5e4dde7595b4729c0",
        "patch": "@@ -2784,6 +2784,9 @@ CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn\n     hashContinue = uint256();\n     if (conn_type_in != ConnectionType::BLOCK_RELAY) {\n         m_tx_relay = MakeUnique<TxRelay>();\n+    }\n+\n+    if (RelayAddrsWithConn()) {\n         m_addr_known = MakeUnique<CRollingBloomFilter>(5000, 0.001);\n     }\n "
      },
      {
        "sha": "a4830d09e9aaf35bf07b878f1b5ab8a698b95095",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dff16b184b1428a068d144e5e4dde7595b4729c0/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dff16b184b1428a068d144e5e4dde7595b4729c0/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=dff16b184b1428a068d144e5e4dde7595b4729c0",
        "patch": "@@ -861,6 +861,12 @@ class CNode\n         return m_conn_type == ConnectionType::INBOUND;\n     }\n \n+    /* Whether we send addr messages over this connection */\n+    bool RelayAddrsWithConn() const\n+    {\n+        return m_conn_type != ConnectionType::BLOCK_RELAY;\n+    }\n+\n     bool ExpectServicesFromConn() const {\n         switch(m_conn_type) {\n             case ConnectionType::INBOUND:\n@@ -891,8 +897,6 @@ class CNode\n     std::chrono::microseconds m_next_addr_send GUARDED_BY(cs_sendProcessing){0};\n     std::chrono::microseconds m_next_local_addr_send GUARDED_BY(cs_sendProcessing){0};\n \n-    bool IsAddrRelayPeer() const { return m_addr_known != nullptr; }\n-\n     // List of block ids we still have announce.\n     // There is no final sorting before sending, as they are always sent immediately\n     // and in the order requested."
      },
      {
        "sha": "4da818c9962998db9a5e865522549c2315bc88bd",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 8,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dff16b184b1428a068d144e5e4dde7595b4729c0/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dff16b184b1428a068d144e5e4dde7595b4729c0/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=dff16b184b1428a068d144e5e4dde7595b4729c0",
        "patch": "@@ -1531,7 +1531,7 @@ static void RelayAddress(const CAddress& addr, bool fReachable, const CConnman&\n     assert(nRelayNodes <= best.size());\n \n     auto sortfunc = [&best, &hasher, nRelayNodes](CNode* pnode) {\n-        if (pnode->IsAddrRelayPeer()) {\n+        if (pnode->RelayAddrsWithConn()) {\n             uint64_t hashKey = CSipHasher(hasher).Write(pnode->GetId()).Finalize();\n             for (unsigned int i = 0; i < nRelayNodes; i++) {\n                  if (hashKey > best[i].first) {\n@@ -2458,9 +2458,7 @@ void PeerLogicValidation::ProcessMessage(CNode& pfrom, const std::string& msg_ty\n         UpdatePreferredDownload(pfrom, State(pfrom.GetId()));\n         }\n \n-        if (!pfrom.IsInboundConn() && pfrom.IsAddrRelayPeer())\n-        {\n-            // Advertise our address\n+        if (!pfrom.IsInboundConn() && !pfrom.IsBlockOnlyConn()) {\n             if (fListen && !::ChainstateActive().IsInitialBlockDownload())\n             {\n                 CAddress addr = GetLocalAddress(&pfrom.addr, pfrom.GetLocalServices());\n@@ -2479,6 +2477,7 @@ void PeerLogicValidation::ProcessMessage(CNode& pfrom, const std::string& msg_ty\n             // Get recent addresses\n             m_connman.PushMessage(&pfrom, CNetMsgMaker(nSendVersion).Make(NetMsgType::GETADDR));\n             pfrom.fGetAddr = true;\n+\n             m_connman.MarkAddressGood(pfrom.addr);\n         }\n \n@@ -2584,7 +2583,7 @@ void PeerLogicValidation::ProcessMessage(CNode& pfrom, const std::string& msg_ty\n         std::vector<CAddress> vAddr;\n         vRecv >> vAddr;\n \n-        if (!pfrom.IsAddrRelayPeer()) {\n+        if (!pfrom.RelayAddrsWithConn()) {\n             return;\n         }\n         if (vAddr.size() > MAX_ADDR_TO_SEND)\n@@ -3522,7 +3521,7 @@ void PeerLogicValidation::ProcessMessage(CNode& pfrom, const std::string& msg_ty\n             LogPrint(BCLog::NET, \"Ignoring \\\"getaddr\\\" from outbound connection. peer=%d\\n\", pfrom.GetId());\n             return;\n         }\n-        if (!pfrom.IsAddrRelayPeer()) {\n+        if (!pfrom.RelayAddrsWithConn()) {\n             LogPrint(BCLog::NET, \"Ignoring \\\"getaddr\\\" from block-relay-only connection. peer=%d\\n\", pfrom.GetId());\n             return;\n         }\n@@ -4122,15 +4121,15 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n         int64_t nNow = GetTimeMicros();\n         auto current_time = GetTime<std::chrono::microseconds>();\n \n-        if (pto->IsAddrRelayPeer() && !::ChainstateActive().IsInitialBlockDownload() && pto->m_next_local_addr_send < current_time) {\n+        if (pto->RelayAddrsWithConn() && !::ChainstateActive().IsInitialBlockDownload() && pto->m_next_local_addr_send < current_time) {\n             AdvertiseLocal(pto);\n             pto->m_next_local_addr_send = PoissonNextSend(current_time, AVG_LOCAL_ADDRESS_BROADCAST_INTERVAL);\n         }\n \n         //\n         // Message: addr\n         //\n-        if (pto->IsAddrRelayPeer() && pto->m_next_addr_send < current_time) {\n+        if (pto->RelayAddrsWithConn() && pto->m_next_addr_send < current_time) {\n             pto->m_next_addr_send = PoissonNextSend(current_time, AVG_ADDRESS_BROADCAST_INTERVAL);\n             std::vector<CAddress> vAddr;\n             vAddr.reserve(pto->vAddrToSend.size());"
      },
      {
        "sha": "cd0c93b8d006a6f63cfc5cf8c5b778a7d7f904dc",
        "filename": "src/test/fuzz/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dff16b184b1428a068d144e5e4dde7595b4729c0/src/test/fuzz/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dff16b184b1428a068d144e5e4dde7595b4729c0/src/test/fuzz/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/net.cpp?ref=dff16b184b1428a068d144e5e4dde7595b4729c0",
        "patch": "@@ -147,7 +147,7 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n     const int ref_count = node.GetRefCount();\n     assert(ref_count >= 0);\n     (void)node.GetSendVersion();\n-    (void)node.IsAddrRelayPeer();\n+    (void)node.RelayAddrsWithConn();\n \n     const NetPermissionFlags net_permission_flags = fuzzed_data_provider.ConsumeBool() ?\n                                                         fuzzed_data_provider.PickValueInArray<NetPermissionFlags>({NetPermissionFlags::PF_NONE, NetPermissionFlags::PF_BLOOMFILTER, NetPermissionFlags::PF_RELAY, NetPermissionFlags::PF_FORCERELAY, NetPermissionFlags::PF_NOBAN, NetPermissionFlags::PF_MEMPOOL, NetPermissionFlags::PF_ISIMPLICIT, NetPermissionFlags::PF_ALL}) :"
      }
    ]
  },
  {
    "sha": "ff6b9081add3a40d53b1cc1352b57eeb46e41d45",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZjZiOTA4MWFkZDNhNDBkNTNiMWNjMTM1MmI1N2VlYjQ2ZTQxZDQ1",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-09-02T21:03:43Z"
      },
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-09-03T00:18:21Z"
      },
      "message": "[doc] Explain address handling logic in process messages\n\nCo-authored-by: Suhas Daftuar <sdaftuar@gmail.com>",
      "tree": {
        "sha": "d1b69fec09c043140696cece772794c2f6964615",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d1b69fec09c043140696cece772794c2f6964615"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ff6b9081add3a40d53b1cc1352b57eeb46e41d45",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff6b9081add3a40d53b1cc1352b57eeb46e41d45",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ff6b9081add3a40d53b1cc1352b57eeb46e41d45",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff6b9081add3a40d53b1cc1352b57eeb46e41d45/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dff16b184b1428a068d144e5e4dde7595b4729c0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dff16b184b1428a068d144e5e4dde7595b4729c0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dff16b184b1428a068d144e5e4dde7595b4729c0"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 18,
      "deletions": 0
    },
    "files": [
      {
        "sha": "dae77dabfb60ce8c23ae745356988692a6bf9d68",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff6b9081add3a40d53b1cc1352b57eeb46e41d45/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff6b9081add3a40d53b1cc1352b57eeb46e41d45/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=ff6b9081add3a40d53b1cc1352b57eeb46e41d45",
        "patch": "@@ -2459,6 +2459,22 @@ void PeerLogicValidation::ProcessMessage(CNode& pfrom, const std::string& msg_ty\n         }\n \n         if (!pfrom.IsInboundConn() && !pfrom.IsBlockOnlyConn()) {\n+            // For outbound peers, we try to relay our address (so that other\n+            // nodes can try to find us more quickly, as we have no guarantee\n+            // that an outbound peer is even aware of how to reach us) and do a\n+            // one-time address fetch (to help populate/update our addrman). If\n+            // we're starting up for the first time, our addrman may be pretty\n+            // empty and no one will know who we are, so these mechanisms are\n+            // important to help us connect to the network.\n+            //\n+            // We also update the addrman to record connection success for\n+            // these peers (which include OUTBOUND_FULL_RELAY and FEELER\n+            // connections) so that addrman will have an up-to-date notion of\n+            // which peers are online and available.\n+            //\n+            // We skip these operations for BLOCK_RELAY peers to avoid\n+            // potentially leaking information about our BLOCK_RELAY\n+            // connections via the addrman or address relay.\n             if (fListen && !::ChainstateActive().IsInitialBlockDownload())\n             {\n                 CAddress addr = GetLocalAddress(&pfrom.addr, pfrom.GetLocalServices());\n@@ -2478,6 +2494,8 @@ void PeerLogicValidation::ProcessMessage(CNode& pfrom, const std::string& msg_ty\n             m_connman.PushMessage(&pfrom, CNetMsgMaker(nSendVersion).Make(NetMsgType::GETADDR));\n             pfrom.fGetAddr = true;\n \n+            // Moves address from New to Tried table in Addrman, resolves\n+            // tried-table collisions, etc.\n             m_connman.MarkAddressGood(pfrom.addr);\n         }\n "
      }
    ]
  },
  {
    "sha": "1d74fc7df621b31d1b8adc9d7f53e7478d6e40b5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZDc0ZmM3ZGY2MjFiMzFkMWI4YWRjOWQ3ZjUzZTc0NzhkNmU0MGI1",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-08-11T17:36:42Z"
      },
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-09-03T00:18:21Z"
      },
      "message": "[trivial] Small style updates",
      "tree": {
        "sha": "b484e4143c7c0f3b120148738e64aff2ff709d09",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b484e4143c7c0f3b120148738e64aff2ff709d09"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1d74fc7df621b31d1b8adc9d7f53e7478d6e40b5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d74fc7df621b31d1b8adc9d7f53e7478d6e40b5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1d74fc7df621b31d1b8adc9d7f53e7478d6e40b5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d74fc7df621b31d1b8adc9d7f53e7478d6e40b5/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ff6b9081add3a40d53b1cc1352b57eeb46e41d45",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff6b9081add3a40d53b1cc1352b57eeb46e41d45",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ff6b9081add3a40d53b1cc1352b57eeb46e41d45"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 8,
      "deletions": 7
    },
    "files": [
      {
        "sha": "b0597093e8b39202a7b7383063de5e8f40a986cc",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d74fc7df621b31d1b8adc9d7f53e7478d6e40b5/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d74fc7df621b31d1b8adc9d7f53e7478d6e40b5/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=1d74fc7df621b31d1b8adc9d7f53e7478d6e40b5",
        "patch": "@@ -1843,7 +1843,7 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n                 // but inbound and manual peers do not use our outbound slots. Inbound peers\n                 // also have the added issue that they could be attacker controlled and used\n                 // to prevent us from connecting to particular hosts if we used them here.\n-                switch(pnode->m_conn_type){\n+                switch (pnode->m_conn_type) {\n                     case ConnectionType::INBOUND:\n                     case ConnectionType::MANUAL:\n                         break;"
      },
      {
        "sha": "75e0657d3d6da2072a098705ead2a7c3974ce6f2",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d74fc7df621b31d1b8adc9d7f53e7478d6e40b5/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d74fc7df621b31d1b8adc9d7f53e7478d6e40b5/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=1d74fc7df621b31d1b8adc9d7f53e7478d6e40b5",
        "patch": "@@ -823,7 +823,7 @@ class CNode\n     std::atomic_bool fPauseSend{false};\n \n     bool IsOutboundOrBlockRelayConn() const {\n-        switch(m_conn_type) {\n+        switch (m_conn_type) {\n             case ConnectionType::OUTBOUND_FULL_RELAY:\n             case ConnectionType::BLOCK_RELAY:\n                 return true;\n@@ -868,7 +868,7 @@ class CNode\n     }\n \n     bool ExpectServicesFromConn() const {\n-        switch(m_conn_type) {\n+        switch (m_conn_type) {\n             case ConnectionType::INBOUND:\n             case ConnectionType::MANUAL:\n             case ConnectionType::FEELER:\n@@ -892,7 +892,7 @@ class CNode\n \n     // flood relay\n     std::vector<CAddress> vAddrToSend;\n-    std::unique_ptr<CRollingBloomFilter> m_addr_known = nullptr;\n+    std::unique_ptr<CRollingBloomFilter> m_addr_known{nullptr};\n     bool fGetAddr{false};\n     std::chrono::microseconds m_next_addr_send GUARDED_BY(cs_sendProcessing){0};\n     std::chrono::microseconds m_next_local_addr_send GUARDED_BY(cs_sendProcessing){0};"
      },
      {
        "sha": "b419ee7e619853596e266d8472ae50182504df3a",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d74fc7df621b31d1b8adc9d7f53e7478d6e40b5/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d74fc7df621b31d1b8adc9d7f53e7478d6e40b5/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=1d74fc7df621b31d1b8adc9d7f53e7478d6e40b5",
        "patch": "@@ -882,8 +882,9 @@ void PeerLogicValidation::InitializeNode(CNode *pnode) {\n         LOCK(g_peer_mutex);\n         g_peer_map.emplace_hint(g_peer_map.end(), nodeid, std::move(peer));\n     }\n-    if(!pnode->IsInboundConn())\n+    if (!pnode->IsInboundConn()) {\n         PushNodeVersion(*pnode, m_connman, GetTime());\n+    }\n }\n \n void PeerLogicValidation::ReattemptInitialBroadcast(CScheduler& scheduler) const"
      },
      {
        "sha": "bf0659587c85c4454952836235fe959dafade60c",
        "filename": "src/test/denialofservice_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d74fc7df621b31d1b8adc9d7f53e7478d6e40b5/src/test/denialofservice_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d74fc7df621b31d1b8adc9d7f53e7478d6e40b5/src/test/denialofservice_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/denialofservice_tests.cpp?ref=1d74fc7df621b31d1b8adc9d7f53e7478d6e40b5",
        "patch": "@@ -84,7 +84,7 @@ BOOST_AUTO_TEST_CASE(outbound_slow_chain_eviction)\n \n     // Mock an outbound peer\n     CAddress addr1(ip(0xa0b0c001), NODE_NONE);\n-    CNode dummyNode1(id++, ServiceFlags(NODE_NETWORK|NODE_WITNESS), 0, INVALID_SOCKET, addr1, 0, 0, CAddress(), \"\", ConnectionType::OUTBOUND_FULL_RELAY);\n+    CNode dummyNode1(id++, ServiceFlags(NODE_NETWORK | NODE_WITNESS), 0, INVALID_SOCKET, addr1, 0, 0, CAddress(), \"\", ConnectionType::OUTBOUND_FULL_RELAY);\n     dummyNode1.SetSendVersion(PROTOCOL_VERSION);\n \n     peerLogic->InitializeNode(&dummyNode1);\n@@ -136,7 +136,7 @@ BOOST_AUTO_TEST_CASE(outbound_slow_chain_eviction)\n static void AddRandomOutboundPeer(std::vector<CNode *> &vNodes, PeerLogicValidation &peerLogic, CConnmanTest* connman)\n {\n     CAddress addr(ip(g_insecure_rand_ctx.randbits(32)), NODE_NONE);\n-    vNodes.emplace_back(new CNode(id++, ServiceFlags(NODE_NETWORK|NODE_WITNESS), 0, INVALID_SOCKET, addr, 0, 0, CAddress(), \"\", ConnectionType::OUTBOUND_FULL_RELAY));\n+    vNodes.emplace_back(new CNode(id++, ServiceFlags(NODE_NETWORK | NODE_WITNESS), 0, INVALID_SOCKET, addr, 0, 0, CAddress(), \"\", ConnectionType::OUTBOUND_FULL_RELAY));\n     CNode &node = *vNodes.back();\n     node.SetSendVersion(PROTOCOL_VERSION);\n "
      }
    ]
  },
  {
    "sha": "da3a0be61b025224231206cb4656e420453bfdeb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYTNhMGJlNjFiMDI1MjI0MjMxMjA2Y2I0NjU2ZTQyMDQ1M2JmZGVi",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-08-11T17:37:57Z"
      },
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-09-03T00:18:22Z"
      },
      "message": "[test] Add explicit tests that connection types get set correctly",
      "tree": {
        "sha": "333e860115ece0255deae72562da72cb8a868cc7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/333e860115ece0255deae72562da72cb8a868cc7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/da3a0be61b025224231206cb4656e420453bfdeb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da3a0be61b025224231206cb4656e420453bfdeb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/da3a0be61b025224231206cb4656e420453bfdeb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da3a0be61b025224231206cb4656e420453bfdeb/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1d74fc7df621b31d1b8adc9d7f53e7478d6e40b5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d74fc7df621b31d1b8adc9d7f53e7478d6e40b5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1d74fc7df621b31d1b8adc9d7f53e7478d6e40b5"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 10,
      "deletions": 0
    },
    "files": [
      {
        "sha": "85ebc8967329438f6f152749985cafe0973e9d43",
        "filename": "src/test/net_tests.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/da3a0be61b025224231206cb4656e420453bfdeb/src/test/net_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/da3a0be61b025224231206cb4656e420453bfdeb/src/test/net_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/net_tests.cpp?ref=da3a0be61b025224231206cb4656e420453bfdeb",
        "patch": "@@ -184,9 +184,19 @@ BOOST_AUTO_TEST_CASE(cnode_simple_test)\n     std::string pszDest;\n \n     std::unique_ptr<CNode> pnode1 = MakeUnique<CNode>(id++, NODE_NETWORK, height, hSocket, addr, 0, 0, CAddress(), pszDest, ConnectionType::OUTBOUND_FULL_RELAY);\n+    BOOST_CHECK(pnode1->IsFullOutboundConn() == true);\n+    BOOST_CHECK(pnode1->IsManualConn() == false);\n+    BOOST_CHECK(pnode1->IsBlockOnlyConn() == false);\n+    BOOST_CHECK(pnode1->IsFeelerConn() == false);\n+    BOOST_CHECK(pnode1->IsAddrFetchConn() == false);\n     BOOST_CHECK(pnode1->IsInboundConn() == false);\n \n     std::unique_ptr<CNode> pnode2 = MakeUnique<CNode>(id++, NODE_NETWORK, height, hSocket, addr, 1, 1, CAddress(), pszDest, ConnectionType::INBOUND);\n+    BOOST_CHECK(pnode2->IsFullOutboundConn() == false);\n+    BOOST_CHECK(pnode2->IsManualConn() == false);\n+    BOOST_CHECK(pnode2->IsBlockOnlyConn() == false);\n+    BOOST_CHECK(pnode2->IsFeelerConn() == false);\n+    BOOST_CHECK(pnode2->IsAddrFetchConn() == false);\n     BOOST_CHECK(pnode2->IsInboundConn() == true);\n }\n "
      }
    ]
  },
  {
    "sha": "1e563aed785565af6b7aed7f7399c52205d8f19c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZTU2M2FlZDc4NTU2NWFmNmI3YWVkN2Y3Mzk5YzUyMjA1ZDhmMTlj",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-08-12T16:56:17Z"
      },
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-09-03T00:18:22Z"
      },
      "message": "[refactor] Simplify check for block-relay-only connection.\n\nPreviously we deduced it was a block-relay-only based on presence of the\nm_tx_relay structure. Now we have the ability to identify it directly via a\nconnection type accessor function.",
      "tree": {
        "sha": "6acec39230a46e254a5df6013d8e78e1ebe21064",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6acec39230a46e254a5df6013d8e78e1ebe21064"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1e563aed785565af6b7aed7f7399c52205d8f19c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e563aed785565af6b7aed7f7399c52205d8f19c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1e563aed785565af6b7aed7f7399c52205d8f19c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e563aed785565af6b7aed7f7399c52205d8f19c/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "da3a0be61b025224231206cb4656e420453bfdeb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da3a0be61b025224231206cb4656e420453bfdeb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/da3a0be61b025224231206cb4656e420453bfdeb"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "ce4ac3cd750804be8d2379297a7ed96c4d4b67df",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e563aed785565af6b7aed7f7399c52205d8f19c/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e563aed785565af6b7aed7f7399c52205d8f19c/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=1e563aed785565af6b7aed7f7399c52205d8f19c",
        "patch": "@@ -2018,7 +2018,7 @@ static void ProcessHeadersMessage(CNode& pfrom, CConnman& connman, ChainstateMan\n             }\n         }\n \n-        if (!pfrom.fDisconnect && pfrom.IsOutboundOrBlockRelayConn() && nodestate->pindexBestKnownBlock != nullptr && pfrom.m_tx_relay != nullptr) {\n+        if (!pfrom.fDisconnect && pfrom.IsFullOutboundConn() && nodestate->pindexBestKnownBlock != nullptr) {\n             // If this is an outbound full-relay peer, check to see if we should protect\n             // it from the bad/lagging chain logic.\n             // Note that block-relay-only peers are already implicitly protected, so we"
      }
    ]
  },
  {
    "sha": "4829b6fcc6489b445f80689af6c2a1a919f176b1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ODI5YjZmY2M2NDg5YjQ0NWY4MDY4OWFmNmMyYTFhOTE5ZjE3NmIx",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-08-14T04:54:38Z"
      },
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-09-03T00:18:22Z"
      },
      "message": "[refactor] Simplify connection type logic in ThreadOpenConnections\n\nConsolidate the logic to determine connection type into one conditional to\nclarify how they are chosen.",
      "tree": {
        "sha": "d256f51e6059c3e3f5eb9f471f68731b9917045d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d256f51e6059c3e3f5eb9f471f68731b9917045d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4829b6fcc6489b445f80689af6c2a1a919f176b1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4829b6fcc6489b445f80689af6c2a1a919f176b1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4829b6fcc6489b445f80689af6c2a1a919f176b1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4829b6fcc6489b445f80689af6c2a1a919f176b1/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1e563aed785565af6b7aed7f7399c52205d8f19c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e563aed785565af6b7aed7f7399c52205d8f19c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1e563aed785565af6b7aed7f7399c52205d8f19c"
      }
    ],
    "stats": {
      "total": 61,
      "additions": 24,
      "deletions": 37
    },
    "files": [
      {
        "sha": "262197117d5a7b8907c645d3cb00c0d0136e007c",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 37,
        "changes": 61,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4829b6fcc6489b445f80689af6c2a1a919f176b1/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4829b6fcc6489b445f80689af6c2a1a919f176b1/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=4829b6fcc6489b445f80689af6c2a1a919f176b1",
        "patch": "@@ -1856,28 +1856,32 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n             }\n         }\n \n-        // Feeler Connections\n-        //\n-        // Design goals:\n-        //  * Increase the number of connectable addresses in the tried table.\n-        //\n-        // Method:\n-        //  * Choose a random address from new and attempt to connect to it if we can connect\n-        //    successfully it is added to tried.\n-        //  * Start attempting feeler connections only after node finishes making outbound\n-        //    connections.\n-        //  * Only make a feeler connection once every few minutes.\n-        //\n+        ConnectionType conn_type = ConnectionType::OUTBOUND_FULL_RELAY;\n+        int64_t nTime = GetTimeMicros();\n         bool fFeeler = false;\n \n-        if (nOutboundFullRelay >= m_max_outbound_full_relay && nOutboundBlockRelay >= m_max_outbound_block_relay && !GetTryNewOutboundPeer()) {\n-            int64_t nTime = GetTimeMicros(); // The current time right now (in microseconds).\n-            if (nTime > nNextFeeler) {\n-                nNextFeeler = PoissonNextSend(nTime, FEELER_INTERVAL);\n-                fFeeler = true;\n-            } else {\n-                continue;\n-            }\n+        // Determine what type of connection to open. Opening\n+        // OUTBOUND_FULL_RELAY connections gets the highest priority until we\n+        // meet our full-relay capacity. Then we open BLOCK_RELAY connection\n+        // until we hit our block-relay-only peer limit.\n+        // GetTryNewOutboundPeer() gets set when a stale tip is detected, so we\n+        // try opening an additional OUTBOUND_FULL_RELAY connection. If none of\n+        // these conditions are met, check the nNextFeeler timer to decide if\n+        // we should open a FEELER.\n+\n+        if (nOutboundFullRelay < m_max_outbound_full_relay) {\n+            // OUTBOUND_FULL_RELAY\n+        } else if (nOutboundBlockRelay < m_max_outbound_block_relay) {\n+            conn_type = ConnectionType::BLOCK_RELAY;\n+        } else if (GetTryNewOutboundPeer()) {\n+            // OUTBOUND_FULL_RELAY\n+        } else if (nTime > nNextFeeler) {\n+            nNextFeeler = PoissonNextSend(nTime, FEELER_INTERVAL);\n+            conn_type = ConnectionType::FEELER;\n+            fFeeler = true;\n+        } else {\n+            // skip to next iteration of while loop\n+            continue;\n         }\n \n         addrman.ResolveCollisions();\n@@ -1944,23 +1948,6 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n                 LogPrint(BCLog::NET, \"Making feeler connection to %s\\n\", addrConnect.ToString());\n             }\n \n-            ConnectionType conn_type;\n-            // Determine what type of connection to open. If fFeeler is not\n-            // set, open OUTBOUND connections until we meet our full-relay\n-            // capacity. Then open BLOCK_RELAY connections until we hit our\n-            // block-relay peer limit. Otherwise, default to opening an\n-            // OUTBOUND connection.\n-            if (fFeeler) {\n-                conn_type = ConnectionType::FEELER;\n-            } else if (nOutboundFullRelay < m_max_outbound_full_relay) {\n-                conn_type = ConnectionType::OUTBOUND_FULL_RELAY;\n-            } else if (nOutboundBlockRelay < m_max_outbound_block_relay) {\n-                conn_type = ConnectionType::BLOCK_RELAY;\n-            } else {\n-                // GetTryNewOutboundPeer() is true\n-                conn_type = ConnectionType::OUTBOUND_FULL_RELAY;\n-            }\n-\n             OpenNetworkConnection(addrConnect, (int)setConnected.size() >= std::min(nMaxConnections - 1, 2), &grant, nullptr, conn_type);\n         }\n     }"
      }
    ]
  },
  {
    "sha": "d5a57cef62ee9e9d30f7e3b80e178149ceeef67c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNWE1N2NlZjYyZWU5ZTlkMzBmN2UzYjgwZTE3ODE0OWNlZWVmNjdj",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-08-14T04:58:08Z"
      },
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-09-03T00:18:22Z"
      },
      "message": "[doc] Describe connection types in more depth.",
      "tree": {
        "sha": "aaa7eaae43b9c9e790606348ac0202fdeb299345",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/aaa7eaae43b9c9e790606348ac0202fdeb299345"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d5a57cef62ee9e9d30f7e3b80e178149ceeef67c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d5a57cef62ee9e9d30f7e3b80e178149ceeef67c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d5a57cef62ee9e9d30f7e3b80e178149ceeef67c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d5a57cef62ee9e9d30f7e3b80e178149ceeef67c/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4829b6fcc6489b445f80689af6c2a1a919f176b1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4829b6fcc6489b445f80689af6c2a1a919f176b1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4829b6fcc6489b445f80689af6c2a1a919f176b1"
      }
    ],
    "stats": {
      "total": 54,
      "additions": 48,
      "deletions": 6
    },
    "files": [
      {
        "sha": "30abd3813d5b6b86bfacdd5868370b4c161a9a8a",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 48,
        "deletions": 6,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d5a57cef62ee9e9d30f7e3b80e178149ceeef67c/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d5a57cef62ee9e9d30f7e3b80e178149ceeef67c/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=d5a57cef62ee9e9d30f7e3b80e178149ceeef67c",
        "patch": "@@ -118,12 +118,54 @@ struct CSerializedNetMsg\n  * information we have available at the time of opening or accepting the\n  * connection. Aside from INBOUND, all types are initiated by us. */\n enum class ConnectionType {\n-    INBOUND, /**< peer initiated connections */\n-    OUTBOUND_FULL_RELAY, /**< full relay connections (blocks, addrs, txns) made automatically. Addresses selected from AddrMan. */\n-    MANUAL, /**< connections to addresses added via addnode or the connect command line argument */\n-    FEELER, /**< short lived connections used to test address validity */\n-    BLOCK_RELAY, /**< only relay blocks to these automatic outbound connections. Addresses selected from AddrMan. */\n-    ADDR_FETCH, /**< short lived connections used to solicit addrs when starting the node without a populated AddrMan */\n+    /**\n+     * Inbound connections are those initiated by a peer. This is the only\n+     * property we know at the time of connection, until P2P messages are\n+     * exchanged.\n+     */\n+    INBOUND,\n+\n+    /**\n+     * These are the default connections that we use to connect with the\n+     * network. There is no restriction on what is relayed- by default we relay\n+     * blocks, addresses & transactions. We automatically attempt to open\n+     * MAX_OUTBOUND_FULL_RELAY_CONNECTIONS using addresses from our AddrMan.\n+     */\n+    OUTBOUND_FULL_RELAY,\n+\n+\n+    /**\n+     * We open manual connections to addresses that users explicitly inputted\n+     * via the addnode RPC, or the -connect command line argument. Even if a\n+     * manual connection is misbehaving, we do not automatically disconnect or\n+     * add it to our discouragement filter.\n+     */\n+    MANUAL,\n+\n+    /**\n+     * Feeler connections are short lived connections used to increase the\n+     * number of connectable addresses in our AddrMan. Approximately every\n+     * FEELER_INTERVAL, we attempt to connect to a random address from the new\n+     * table. If successful, we add it to the tried table.\n+     */\n+    FEELER,\n+\n+    /**\n+     * We use block-relay-only connections to help prevent against partition\n+     * attacks. By not relaying transactions or addresses, these connections\n+     * are harder to detect by a third party, thus helping obfuscate the\n+     * network topology. We automatically attempt to open\n+     * MAX_BLOCK_RELAY_ONLY_CONNECTIONS using addresses from our AddrMan.\n+     */\n+    BLOCK_RELAY,\n+\n+    /**\n+     * AddrFetch connections are short lived connections used to solicit\n+     * addresses from peers. These are initiated to addresses submitted via the\n+     * -seednode command line argument, or under certain conditions when the\n+     * AddrMan is empty.\n+     */\n+    ADDR_FETCH,\n };\n \n class NetEventsInterface;"
      }
    ]
  },
  {
    "sha": "eb1c5d090f4ef844dabc1e8bf3864c1afe1c791c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYjFjNWQwOTBmNGVmODQ0ZGFiYzFlOGJmMzg2NGMxYWZlMWM3OTFj",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-08-20T22:26:27Z"
      },
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-09-03T00:18:22Z"
      },
      "message": "[doc] Follow developer notes, add comment about missing default.",
      "tree": {
        "sha": "d071056bacc764caff867d31d8d1b7f7cde527d9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d071056bacc764caff867d31d8d1b7f7cde527d9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eb1c5d090f4ef844dabc1e8bf3864c1afe1c791c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb1c5d090f4ef844dabc1e8bf3864c1afe1c791c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eb1c5d090f4ef844dabc1e8bf3864c1afe1c791c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb1c5d090f4ef844dabc1e8bf3864c1afe1c791c/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d5a57cef62ee9e9d30f7e3b80e178149ceeef67c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d5a57cef62ee9e9d30f7e3b80e178149ceeef67c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d5a57cef62ee9e9d30f7e3b80e178149ceeef67c"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "f483f9922faa2c59659317d90dfc036e13d9aefa",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb1c5d090f4ef844dabc1e8bf3864c1afe1c791c/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb1c5d090f4ef844dabc1e8bf3864c1afe1c791c/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=eb1c5d090f4ef844dabc1e8bf3864c1afe1c791c",
        "patch": "@@ -1852,7 +1852,7 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n                     case ConnectionType::ADDR_FETCH:\n                     case ConnectionType::FEELER:\n                         setConnected.insert(pnode->addr.GetGroup(addrman.m_asmap));\n-                }\n+                } // no default case, so the compiler can warn about missing cases\n             }\n         }\n "
      },
      {
        "sha": "60c3dc6aefcbcbfa0c36ec921779450f99c26221",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb1c5d090f4ef844dabc1e8bf3864c1afe1c791c/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb1c5d090f4ef844dabc1e8bf3864c1afe1c791c/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=eb1c5d090f4ef844dabc1e8bf3864c1afe1c791c",
        "patch": "@@ -874,7 +874,7 @@ class CNode\n             case ConnectionType::ADDR_FETCH:\n             case ConnectionType::FEELER:\n                 return false;\n-        }\n+        } // no default case, so the compiler can warn about missing cases\n \n         assert(false);\n     }\n@@ -919,7 +919,7 @@ class CNode\n             case ConnectionType::BLOCK_RELAY:\n             case ConnectionType::ADDR_FETCH:\n                 return true;\n-        }\n+        } // no default case, so the compiler can warn about missing cases\n \n         assert(false);\n     }"
      }
    ]
  }
]