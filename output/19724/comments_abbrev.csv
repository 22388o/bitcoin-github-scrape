amitiuttarwar,2020-08-14 22:32:07,"I'm not 100% convinced about replacing `IsAddrRelayPeer()` with `RelayAddrsWithConn()`  9345f9c9d47a88987606d1421823914a4c48dbf9. \n\nPros: \n- It is more direct to check the connection type instead of a (missing) data structure based on the connection type.\n- Easy to update logic in the future \n- Less mental overhead, less code touch points to glean intention. \n\nCons: \n- We are now c",https://github.com/bitcoin/bitcoin/pull/19724#issuecomment-674298044,674298044,
sipa,2020-08-14 23:53:06,"@amitiuttarwar I think it makes sense to make the addr-relay decision depend on the connection type. That should be the most authoritative information about the connection. Sure, it's duplication, but if we accidentally forget to create the necessary data structures, test will fail; if we accidentally create them if they're not needed, at worst we've wasted a bit of memory we're already ok with fo",https://github.com/bitcoin/bitcoin/pull/19724#issuecomment-674314573,674314573,
jnewbery,2020-08-15 10:18:49,"Strong strong concept ACK.\n\nI think it'd be good to extract everything in the `while (!interruptNet)` in `ThreadOpenConnections()` into its own function since deeply nested while/for/if blocks obscure control flow and are very often the sources of bugs. Doing that might be scope creep for this PR though.",https://github.com/bitcoin/bitcoin/pull/19724#issuecomment-674379263,674379263,
DrahtBot,2020-08-20 20:24:37,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19860 (Improve diversification of new connections: privacy and stability by naumenkogs)\n* #19858 (Periodically make bloc",https://github.com/bitcoin/bitcoin/pull/19724#issuecomment-677884934,677884934,
amitiuttarwar,2020-08-21 03:40:29,"thanks for the feedback! all comments should be addressed. \n\n@sipa \nI agree with this: \n> make the addr-relay decision depend on the connection type. That should be the most authoritative information about the connection.\n\nBut unfortunately I don't think this is true: \n>  but if we accidentally forget to create the necessary data structures, test will fail; \n\nI updated `RelayAddr",https://github.com/bitcoin/bitcoin/pull/19724#issuecomment-678020419,678020419,
jnewbery,2020-08-21 10:43:11,"utACK c99b26010eaf4d446eb5118e38dbcc03fabba11c\n\n> have gotten very confused by the deeply nested logic flows & nuances of things like where a break / continue that's 4 levels deep will pop you back out to.\n\nYes, deeply nested if/while/switch statements hide bugs. If it's possible to factor them out to clarify control flow, we should aim to do that.\n\n> I've taken a first pass at extract",https://github.com/bitcoin/bitcoin/pull/19724#issuecomment-678218813,678218813,
jonatack,2020-08-25 13:03:40,Concept ACK on these changes. Late to the party but will try to review soon-ish.,https://github.com/bitcoin/bitcoin/pull/19724#issuecomment-680011506,680011506,
amitiuttarwar,2020-08-27 20:10:18,"thanks for the review @jnewbery & @ariard ! all review comments are addressed \n\nrebased & made some small changes to docs",https://github.com/bitcoin/bitcoin/pull/19724#issuecomment-682166147,682166147,
jnewbery,2020-09-01 08:44:31,"reACK 4c66cc0a5a\n\nIt looks like all of the remaining review comments are on style/documentation. Perhaps we should aim to merge this and address those in a follow-up?",https://github.com/bitcoin/bitcoin/pull/19724#issuecomment-684589739,684589739,
naumenkogs,2020-09-01 12:34:34,">It looks like all of the remaining review comments are on style/documentation. Perhaps we should aim to merge this and address those in a follow-up?\n\nMost of the changes in this commit are style/documentation. It's not like it's a big logic-changing PR with a lot of ACKs will have to invalidate :)\n\nBut actually, I'd be fine with ACKing this one as long as I get some feedback (code change,",https://github.com/bitcoin/bitcoin/pull/19724#issuecomment-684819641,684819641,
sdaftuar,2020-09-02 13:13:14,"I think there may be a silent merge conflict here, as a result of merging #19067 a few days ago (after the CI tests had run on this PR).  That PR introduces one new place where the OUTBOUND enum is used.\n\n(Noticed this because of the failing CI run in #19858, built on top of this one.)",https://github.com/bitcoin/bitcoin/pull/19724#issuecomment-685727294,685727294,
amitiuttarwar,2020-09-03 00:43:39,"thank you for the reviews! \n\ngood catch on the silent merge conflict @sdaftuar, I’ve rebased to address. (turns out, there was more than one)\n\nI've addressed all review comments. They were getting pretty web-like, so I've tried my best to resolve and focus on any outstanding conversations. \n\n\n>> It looks like all of the remaining review comments are on style/documentation. Perhaps we",https://github.com/bitcoin/bitcoin/pull/19724#issuecomment-686163043,686163043,
amitiuttarwar,2020-09-03 02:24:45,"there's one failing build, but I'm confused by it. nothing in the logs appears to have failed?? \nhttps://travis-ci.org/github/bitcoin/bitcoin/jobs/723629947",https://github.com/bitcoin/bitcoin/pull/19724#issuecomment-686193868,686193868,
RandyMcMillan,2020-09-03 02:36:00,"@amitiuttarwar - This PR is based on parent commits that aren't passing - the fail may have nothing to do with your change. I recommend rebasing your commit on a recent passing commit.\n",https://github.com/bitcoin/bitcoin/pull/19724#issuecomment-686201705,686201705,
naumenkogs,2020-09-03 07:34:20,ACK eb1c5d090f4ef844dabc1e8bf3864c1afe1c791c,https://github.com/bitcoin/bitcoin/pull/19724#issuecomment-686312378,686312378,
laanwj,2020-09-03 11:27:09,Code review ACK eb1c5d090f4ef844dabc1e8bf3864c1afe1c791c,https://github.com/bitcoin/bitcoin/pull/19724#issuecomment-686425258,686425258,
ariard,2020-09-03 22:04:57,post-merge Code Review ACK eb1c5d0,https://github.com/bitcoin/bitcoin/pull/19724#issuecomment-686787687,686787687,
MarcoFalke,2020-08-15 07:38:46,"style-nit:\n\n```suggestion\n                switch (pnode->m_conn_type) {\n```\n\nif you decide to do style-fixups, it would probably be good to do all of them in one go or not at all. Maybe with clang-format-diff?   https://github.com/bitcoin/bitcoin/tree/master/contrib/devtools#clang-format-diffpy ",https://github.com/bitcoin/bitcoin/pull/19724#discussion_r470950246,470950246,src/net.cpp
jnewbery,2020-08-15 10:16:06,"If we're cleaning this up, we should really clean it up and move the `connman.MarkAddressGood()` out of this if statement, since it's not related to address advertising at all. Having it in the same conditional is a trap for developers to fall into.\n\n(specifically, a developer might think ""we don't need to advertise our address to FEELER connections, since we disconnect before we actually send",https://github.com/bitcoin/bitcoin/pull/19724#discussion_r470962473,470962473,src/net_processing.cpp
sdaftuar,2020-08-15 18:08:07,"I was looking at this more and I believe we should leave the MarkAddressGood call in the if-block, though it needs an explanation— the reason (I think) is that we don’t want block-relay connections to leave a trace in the addrman that could be leaked by an attacker sniffing our addr responses.\n\nSo this just needs a comment explaining why it’s in here.\n",https://github.com/bitcoin/bitcoin/pull/19724#discussion_r471019849,471019849,src/net_processing.cpp
jnewbery,2020-08-16 09:38:35,"Can you explain this a bit? I think you're saying that if we connect out to a peer that we use for block-relay-only we don't want to mark it as good (essentially move it from New to Tried and update the last successful connect time) because then another peer might be able to tell that we've connected to them?\n\nMy understanding of how we respond to `getaddr` messages is that we'll respond with ",https://github.com/bitcoin/bitcoin/pull/19724#discussion_r471090087,471090087,src/net_processing.cpp
sdaftuar,2020-08-16 16:29:01,"I don't have a great understanding of the details of how addrman works or how we interact with it -- so possibly the fear was unfounded.  It used to be the case that you could trivially download a listening node's addrman though, and it also used to be the case (perhaps only long ago?) that we'd leak information about current connections based on time stamps stored in our addrman, so when I worked",https://github.com/bitcoin/bitcoin/pull/19724#discussion_r471131850,471131850,src/net_processing.cpp
jnewbery,2020-08-18 10:42:50,"I believe there are three ways that a peer's record is updated in addrman when we're connected to them:\n\n1. when we receive a `version` message from them, we'll mark their address good. That moves the address from the new table to the tried table, and updates the `nLastSuccess`/`nLastTry`/`nAttempts` fields. We only do this if the peer isn't inbound and isn't block-relay-only. I don't believe ",https://github.com/bitcoin/bitcoin/pull/19724#discussion_r472084750,472084750,src/net_processing.cpp
jnewbery,2020-08-20 09:06:51,"I really dislike these functions being inside `CNode` (same as https://github.com/bitcoin/bitcoin/pull/19316#discussion_r464526492). This is very specific net_processing logic, rather than a general property of the CNode. Having the logic inside net.h rather than at the point it's needed makes it less readable.",https://github.com/bitcoin/bitcoin/pull/19724#discussion_r473793235,473793235,src/net.h
jnewbery,2020-08-20 09:18:16,Format these as doxygen comments (start with `/**`) https://www.doxygen.nl/manual/docblocks.html,https://github.com/bitcoin/bitcoin/pull/19724#discussion_r473802643,473802643,src/net.h
jnewbery,2020-08-20 09:21:36,These are great comments. Thank you! Should they be merged with the comments above on the enum members?,https://github.com/bitcoin/bitcoin/pull/19724#discussion_r473805346,473805346,src/net.h
amitiuttarwar,2020-08-20 17:40:42,"yeah I felt very indecisive when trying to figure out the best spots for the comments. here what I've gone for is having the enum comments be a more concise description of the nature of the connection, and the function provide more context around design goals, capacity, etc. \n\nI don't think the split is super clear though, so yeah, maybe it would be more helpful to consolidate it all into the ",https://github.com/bitcoin/bitcoin/pull/19724#discussion_r474161665,474161665,src/net.h
jnewbery,2020-08-20 18:22:03,"yes, consolidate them to one place. I think the enum is the right place for them.",https://github.com/bitcoin/bitcoin/pull/19724#discussion_r474184122,474184122,src/net.h
amitiuttarwar,2020-08-21 03:09:31,done! ,https://github.com/bitcoin/bitcoin/pull/19724#discussion_r474383770,474383770,src/net.h
amitiuttarwar,2020-08-21 03:11:23,"oof. so many options and yet I still missed the mark 😅 . moved the comments to the enum, but fixed this problem. thanks! ",https://github.com/bitcoin/bitcoin/pull/19724#discussion_r474384238,474384238,src/net.h
amitiuttarwar,2020-08-21 03:16:30,"yeah, I agree. this is why I initially opted for having `m_conn_type` as a public member var, but feedback on #19316 led me to switching to private. anyway, given the current state, its a bit unfortunate we don't get the additional guarantee of a switch, but I agree with you & incorporated this feedback so it can be more understandable from the call site. ",https://github.com/bitcoin/bitcoin/pull/19724#discussion_r474385471,474385471,src/net.h
amitiuttarwar,2020-08-21 03:24:25,"I agree that having `MarkAddressGood` in this conditional is surprising & that changing to `AdvertiseAddressToConn` augments the confusion. \n\nFor this PR- I've updated the conditional to be `!pfrom.IsInboundConn() && !pfrom.IsBlockOnlyConn()` (aka removed the misleading function), and added a comment.\n\nFor future work- I've noted this down. I've taken an initial look and @jnewbery I believ",https://github.com/bitcoin/bitcoin/pull/19724#discussion_r474387266,474387266,src/net_processing.cpp
amitiuttarwar,2020-08-21 03:30:47,"heh. thanks for the nudge. I've updated my tooling so I'll pay better attention to the clang-format-diff moving forward. I think I've now cleaned everything up properly in this PR? I'm not sure what exactly you mean by ""all in one go or not at all""... \n\n(disclaimer: I didn't take the suggestions to not [IndentCaseBlocks](https://clang.llvm.org/docs/ClangFormatStyleOptions.html). I would much p",https://github.com/bitcoin/bitcoin/pull/19724#discussion_r474388701,474388701,src/net.cpp
ariard,2020-08-22 22:26:39,"EDIT: We may have already a bug here. I think comment ""Note that block-relay-only peers are already implicitly protected so we only consider setting m_protect for the full-relay peers"" is wrong as block-relay-only peers seems to not be protected from eviction by lagging chain logic and as such we should modify this check to scope them in setting `m_protect==true` (or either modify `ConsiderEvictio",https://github.com/bitcoin/bitcoin/pull/19724#discussion_r475144532,475144532,src/net_processing.cpp
ariard,2020-08-22 22:30:58,`block-relay-only` to be consistent with mention of this connection type spread around the codebase.,https://github.com/bitcoin/bitcoin/pull/19724#discussion_r475144843,475144843,src/net.cpp
ariard,2020-08-22 22:34:13,s/feeler/FEELER/g,https://github.com/bitcoin/bitcoin/pull/19724#discussion_r475145041,475145041,src/net.cpp
ariard,2020-08-22 22:43:29,"I think you can use now `conn_type.IsFeelerConn()` instead of `fFeeler=true` in the feeler-related following checks, semantically they are the same ?",https://github.com/bitcoin/bitcoin/pull/19724#discussion_r475145666,475145666,src/net.cpp
ariard,2020-08-22 22:47:09,"`Only attempted after finishing to open other types of outbound connections`, comment on order of connections was dropped from original location in `ThreadOpenConnections`",https://github.com/bitcoin/bitcoin/pull/19724#discussion_r475145927,475145927,src/net.h
ariard,2020-08-22 22:57:51,"You can mark that addresses for {BLOCK_RELAY,OUTBOUND_FULL_RELAY} are drawn from tried table.\n\nAlso `block-relay network topology`.",https://github.com/bitcoin/bitcoin/pull/19724#discussion_r475146629,475146629,src/net.h
ariard,2020-08-22 23:00:00,"For both {ADDR_FETCH, FEELER} you can specify the condition suspending the connection (either VERSION or ADDR reception).",https://github.com/bitcoin/bitcoin/pull/19724#discussion_r475146768,475146768,src/net.h
ariard,2020-08-22 23:02:07,`transactions and addresses` to be strict,https://github.com/bitcoin/bitcoin/pull/19724#discussion_r475146909,475146909,src/net.h
ariard,2020-08-22 23:08:34,"It's unclear to me how do you qualify what is a ""third party"" in a P2P network, either another connected peer, a not-directly connected peer to local node or an infrastructure observer ? For the last one it doesn't help at all. So maybe replace by `any other peer, either directly paired with local node or not` ?",https://github.com/bitcoin/bitcoin/pull/19724#discussion_r475147312,475147312,src/net.h
ariard,2020-08-22 23:24:15,"I know this is likely temporary but comment may be made better like ""Our address sanitization logic (feeler) is less prone to manipulation by outbound connections rather than potentially attacker controlled inbound. We don't sanitize block-relay-only as it might be a leak of their presence"".",https://github.com/bitcoin/bitcoin/pull/19724#discussion_r475148383,475148383,src/net_processing.cpp
ariard,2020-08-22 23:32:21,I agree with John that block-relay-only peers should have their address marked as good when we receive their `version`. To answer `getaddr` we fetch randomly a list of address from both `vvNew/vvTried` without record bias as far as a quick read of `CAddrMan::GetAddr_` let it think. So moving address from a table to another doesn't change the ability of an attacker to learn about a block-relay-only,https://github.com/bitcoin/bitcoin/pull/19724#discussion_r475148942,475148942,src/net_processing.cpp
sdaftuar,2020-08-25 17:56:34,"My instinct is that it'd be best if the addrman were completely unchanged as a result of block-relay connections, at least while we are connected to the peer. So if there are places where block-relay connections cause some kind of update in addrman, then those should be bugs that we fix.\n\nHere's my thinking:\n(a) it's not clear to me that there's not some way to sniff out things in the tried ",https://github.com/bitcoin/bitcoin/pull/19724#discussion_r476635697,476635697,src/net_processing.cpp
amitiuttarwar,2020-08-26 22:39:41,"ok, I've looked into this and am happy to discuss with you, but want to clarify we are on the same page that **this PR doesn't change the behavior.**\n\nI agree that the comment initially seems inconsistent with the logic in `ConsiderEviction`, but I'm still trying to wrap my head around all the mechanisms (since the chainwork check is repeated as the first conditional in `ConsiderEviction`, is ",https://github.com/bitcoin/bitcoin/pull/19724#discussion_r477628432,477628432,src/net_processing.cpp
ariard,2020-08-27 00:19:05,"Yes as far as I understand this code it is neither introduced by this PR or #19316. \n\n>  (since the chainwork check is repeated as the first conditional in ConsiderEviction, is the protection here essential?).\n\nYou mean the check `pindexBestKnownBlock != nullptr` ? But you have a conditional above and it won't exclude block-relay-only with `m_protect=false`. I'm not sure about the exact se",https://github.com/bitcoin/bitcoin/pull/19724#discussion_r477754109,477754109,src/net_processing.cpp
ariard,2020-08-27 00:25:21,"Actually it does also solve bucket conflict between 2 tried tables entries, see : https://github.com/bitcoin/bitcoin/pull/9037",https://github.com/bitcoin/bitcoin/pull/19724#discussion_r477765833,477765833,src/net.h
amitiuttarwar,2020-08-27 19:49:57,done ,https://github.com/bitcoin/bitcoin/pull/19724#discussion_r478657304,478657304,src/net.cpp
amitiuttarwar,2020-08-27 19:50:05,done ,https://github.com/bitcoin/bitcoin/pull/19724#discussion_r478657385,478657385,src/net.cpp
amitiuttarwar,2020-08-27 19:52:06,"`IsFeelerConn()` is a function on `CNode`, not `ConnectionType`, so I don't think this is possible",https://github.com/bitcoin/bitcoin/pull/19724#discussion_r478658416,478658416,src/net.cpp
amitiuttarwar,2020-08-27 19:58:38,"I already added a comment in `ThreadOpenConnections` with the specifics of the ordering: \n\n```\n        // Determine what type of connection to open. Opening\n        // OUTBOUND_FULL_RELAY connections gets the highest priority until we\n        // meet our full-relay capacity. Then we open BLOCK_RELAY connection\n        // until we hit our block-relay-only peer limit.\n        // GetTry",https://github.com/bitcoin/bitcoin/pull/19724#discussion_r478661838,478661838,src/net.h
amitiuttarwar,2020-08-27 19:59:45,are they always? what happens if your tried table isn't populated yet ?,https://github.com/bitcoin/bitcoin/pull/19724#discussion_r478662385,478662385,src/net.h
amitiuttarwar,2020-08-27 20:02:55,"feels a bit deep in the weeds for this patch, both have nuances of how disconnection is executed ",https://github.com/bitcoin/bitcoin/pull/19724#discussion_r478664004,478664004,src/net.h
amitiuttarwar,2020-08-27 20:05:22,"hmm, seems like our minds are putting parenthesis in different places for this patch. I find ""or"" clearer. If you feel strongly I can try to rework the sentence. but otherwise, seems fairly trivial to me ",https://github.com/bitcoin/bitcoin/pull/19724#discussion_r478665203,478665203,src/net.h
amitiuttarwar,2020-08-27 20:06:58,"if two nodes are connected, a third party is any other entity. I don't really understand your suggestion- if a node is ""directly paired"" with another peer, how would it be possible to obfuscate that connection to the peer? of course the peer can know what connections they have open? ",https://github.com/bitcoin/bitcoin/pull/19724#discussion_r478665981,478665981,src/net.h
amitiuttarwar,2020-08-27 20:09:13,"I feel strongly that we should not cement opinions into docs in the codebase. since there are divergent opinions on whether or not we should have this logic here, I'd like to avoid documentation that indicates it must be here.  ",https://github.com/bitcoin/bitcoin/pull/19724#discussion_r478667146,478667146,src/net_processing.cpp
sdaftuar,2020-08-31 18:47:45,"nit: `MarkAddressGood()` has other side effects besides moving addresses from new to tried (such as resolving collisions in the tried table?) so maybe it'd be better to update the comment to indicate that's not all this does, eg `// Moves address from New to Tried table in Addrman, among other things`)",https://github.com/bitcoin/bitcoin/pull/19724#discussion_r480320438,480320438,src/net_processing.cpp
sdaftuar,2020-08-31 18:48:59,"nit: If you're including small style changes anyway, this could use curly braces.",https://github.com/bitcoin/bitcoin/pull/19724#discussion_r480321060,480321060,src/net_processing.cpp
sdaftuar,2020-08-31 19:00:53,"Looks like a documentation oversight when I changed around how this code worked while working on #15759. See https://github.com/bitcoin/bitcoin/pull/15759#pullrequestreview-281092623.  I think originally I was going to make block-relay-only peers immune from all eviction, and then changed it to only be immune to outbound peer rotation-based eviction.",https://github.com/bitcoin/bitcoin/pull/19724#discussion_r480327555,480327555,src/net_processing.cpp
sdaftuar,2020-08-31 19:10:37,"It does seem a little weird to still have fFeeler as a variable after this change, but I don't feel strongly.",https://github.com/bitcoin/bitcoin/pull/19724#discussion_r480332654,480332654,src/net.cpp
naumenkogs,2020-09-01 08:13:08,"nit: not a big fan of this name... I actually think `IsAddrRelayPeer` is much better :)\nI already saw some discussion around the distinction between ""node"" and ""peer"", and now you start referring to it as a ""connection"".",https://github.com/bitcoin/bitcoin/pull/19724#discussion_r480954587,480954587,src/net.h
naumenkogs,2020-09-01 08:22:54,"Also, this method should be now used here: https://github.com/bitcoin/bitcoin/blob/4c66cc0a5a99cbad51448e51d6b28e11e5232e33/src/net.cpp#L2772\n\nThe motivation is that we don't want changing the addr condition in one place, and forgetting to change in the other place.",https://github.com/bitcoin/bitcoin/pull/19724#discussion_r480960343,480960343,src/net.h
naumenkogs,2020-09-01 08:29:52,"I think the new code should be:\n\n```\n    if (conn_type_in != ConnectionType::BLOCK_RELAY) {\n        m_tx_relay = MakeUnique<TxRelay>();\n    }\n    if (IsAddrRelayPeer()) {\n        m_addr_known = MakeUnique<CRollingBloomFilter>(5000, 0.001);\n    }\n```",https://github.com/bitcoin/bitcoin/pull/19724#discussion_r480964733,480964733,src/net.h
naumenkogs,2020-09-01 08:31:04,nit: Why removing the comment? :),https://github.com/bitcoin/bitcoin/pull/19724#discussion_r480965475,480965475,src/net_processing.cpp
naumenkogs,2020-09-01 08:32:38,"This is technically not a behavior change, but I don't understand the logic behind replacing `IsAddrRelayPeer` with `!IsBlockOnlyConn()`. Why not replacing it with `RelayAddrsWithConn`?",https://github.com/bitcoin/bitcoin/pull/19724#discussion_r480966499,480966499,src/net_processing.cpp
naumenkogs,2020-09-01 08:38:21,"I don't find this comment particularly helpful... Why `MarkAddressGood` is called here, why for outbounds and non-blocks-only?",https://github.com/bitcoin/bitcoin/pull/19724#discussion_r480969871,480969871,src/net_processing.cpp
naumenkogs,2020-09-01 08:56:36,Can this probably migrate to the enum?,https://github.com/bitcoin/bitcoin/pull/19724#discussion_r480980931,480980931,src/net.cpp
naumenkogs,2020-09-01 10:14:59,"Instead of `if (fFeeler)`, we can now further  do `if (conn_type == ConnectionType::FEELER)`, and drop the `fFeeler` variable. I would prefer this.",https://github.com/bitcoin/bitcoin/pull/19724#discussion_r481030527,481030527,src/net.cpp
naumenkogs,2020-09-01 10:19:48,"Or, now that I see how many `if (fFeeler)` we have (a lot), I'm not so sure...",https://github.com/bitcoin/bitcoin/pull/19724#discussion_r481033095,481033095,src/net.cpp
naumenkogs,2020-09-01 11:34:25,"nit: mix of terminology, we normally don't refer to addr as ""inventory"". Let's keep it that way :)\nProbably use something ""types of stuff"" or whatever else",https://github.com/bitcoin/bitcoin/pull/19724#discussion_r481070579,481070579,src/net.h
naumenkogs,2020-09-01 11:41:34,"> I think these comments are most valuable if they focus on the design goals and the high level description of the connection type & we look at the relevant code for more specifics.\n\nI agree\n\n>what is this in response to? is there a suggested change?\n\nAntoine just mentions that there is *another thing* done when considering a feeler. See [here](https://github.com/bitcoin/bitcoin/pull/1",https://github.com/bitcoin/bitcoin/pull/19724#discussion_r481074255,481074255,src/net.h
naumenkogs,2020-09-01 11:55:37,"Partially done in 630b9a5e1872ac91949b1e30f8cd7f28d1c946ab, but some of the details are lost.",https://github.com/bitcoin/bitcoin/pull/19724#discussion_r481081269,481081269,src/net.cpp
naumenkogs,2020-09-01 12:10:12,I see it is justified (sort of?) [here](https://github.com/bitcoin/bitcoin/pull/19724#discussion_r474387266).,https://github.com/bitcoin/bitcoin/pull/19724#discussion_r481089295,481089295,src/net_processing.cpp
naumenkogs,2020-09-01 12:11:45,"Sort of justified [here](https://github.com/bitcoin/bitcoin/pull/19724#discussion_r474387266), but i'm not convinced it's the right approach. See my comment there.",https://github.com/bitcoin/bitcoin/pull/19724#discussion_r481090126,481090126,src/net_processing.cpp
naumenkogs,2020-09-01 12:20:18,"I think we're taking the wrong approach in the PR as it is right now. *At least* that condition should be split in 2 blocks:\n\nI think the current code change here is not useful, but only distracts:\nI) The comment `Advertise our address` is removed for no reason\nII) The comment `(unrelated to advertising our address)` is very confusing. I managed to understand it only after reading this dis",https://github.com/bitcoin/bitcoin/pull/19724#discussion_r481094603,481094603,src/net_processing.cpp
naumenkogs,2020-09-01 12:23:09,"w.r.t block-relay-only peers and AddrMan, I agree it's a separate issue, so i'd prefer to preserve the approach status quo here.\n\nThe current PR currently satisfies it, but I'm still unhappy with the code changes in this particular area (see the previous comment).",https://github.com/bitcoin/bitcoin/pull/19724#discussion_r481096143,481096143,src/net_processing.cpp
sdaftuar,2020-09-01 17:09:14,"The skipping of this logic for block-relay-only outbound peers was introduced in #15759 -- gating it on whether the address-relay data structures are instantiated is confusing because the very last thing we do is unrelated to whether those data structures exist.\n\nInstead, what this block has in common is that we only want to skip it for inbound or block-relay only peers, which is what this pat",https://github.com/bitcoin/bitcoin/pull/19724#discussion_r481301926,481301926,src/net_processing.cpp
sdaftuar,2020-09-01 17:39:46,"@naumenkogs Would it be enough to just add some more comments to this block?  I think it's fine to leave as one block until we actually need to split it, so I'd propose something like this:\n\n```diff\ndiff --git a/src/net_processing.cpp b/src/net_processing.cpp\nindex 7cd4f7c4cb5..4285e8ba898 100644\n--- a/src/net_processing.cpp\n+++ b/src/net_processing.cpp\n@@ -2427,6 +2427,21 @@ void Pe",https://github.com/bitcoin/bitcoin/pull/19724#discussion_r481319297,481319297,src/net_processing.cpp
naumenkogs,2020-09-02 07:46:23,"I'd suggest making `If we're starting up for the first time, our addrman may be pretty empty and no one will know who we are.`  less ambiguous:\n`If we're starting up for the first time, it would improve our peering chances. Otherwise, our addrman may be pretty empty, and also no one will know who we are.`\n\nBut generally, I think this comment:\n- makes it much more clear\n- actually convinc",https://github.com/bitcoin/bitcoin/pull/19724#discussion_r481845587,481845587,src/net_processing.cpp
amitiuttarwar,2020-09-02 20:52:35,"yup, I left it in essentially as a local alias. we use it 6 times in the function and it didn't seem helpful to switch those all over to the more verbose `conn_type == ConnectionType::FEELER`",https://github.com/bitcoin/bitcoin/pull/19724#discussion_r482451640,482451640,src/net.cpp
amitiuttarwar,2020-09-02 23:51:37,done,https://github.com/bitcoin/bitcoin/pull/19724#discussion_r482605030,482605030,src/net_processing.cpp
amitiuttarwar,2020-09-02 23:55:23,"ah nice. I like it! I was also concerned about the duplicated logic making room for future discrepancy. I've updated to include this, thanks! \n\nRE name: seems like an issue with the whole convention around connection types? The name I've chosen is consistent with all the `m_conn_type` functions. Its a little late to change all that so I'm going to resolve this comment. ",https://github.com/bitcoin/bitcoin/pull/19724#discussion_r482606146,482606146,src/net.h
amitiuttarwar,2020-09-02 23:59:02,"the comment removal was leftover from a previous iteration of this code where I updated the conditional  to call a function `AdvertiseAddressToConn` or something that made the comment feel redundant. \n\nlatest push includes the more in depth commenting proposed in that thread, will continue convo there ",https://github.com/bitcoin/bitcoin/pull/19724#discussion_r482607213,482607213,src/net_processing.cpp
amitiuttarwar,2020-09-03 00:02:50,"what details are lost? the only thing not included is ""Start attempting feeler connections only after node finishes making outbound connections,"" but the ordering of connections is captured in `ThreadOpenConnections`. this seems like the same point as addressed over in [this thread](https://github.com/bitcoin/bitcoin/pull/19724#discussion_r475145927) where you've agreed with me??",https://github.com/bitcoin/bitcoin/pull/19724#discussion_r482608389,482608389,src/net.cpp
amitiuttarwar,2020-09-03 00:03:31,"oh, didn't realize. fixed ",https://github.com/bitcoin/bitcoin/pull/19724#discussion_r482608547,482608547,src/net.h
amitiuttarwar,2020-09-03 00:08:54,"incorporated these comments into the changes, \n\nI agree this should be further improved, but I'm hoping this is sufficient for this PR. @naumenkogs are you comfortable with the current state? ",https://github.com/bitcoin/bitcoin/pull/19724#discussion_r482610113,482610113,src/net_processing.cpp
amitiuttarwar,2020-09-03 00:10:38,"resolving this conversation just to close off threads, feel free to continue [over here](https://github.com/bitcoin/bitcoin/pull/19724#discussion_r482610113) ",https://github.com/bitcoin/bitcoin/pull/19724#discussion_r482610624,482610624,src/net_processing.cpp
ariard,2020-09-03 21:48:56,"Tracked in https://github.com/bitcoin/bitcoin/issues/19863#issue-692406060, either to document block-relay-only eviction expectations or align protection scope among all our outbound peers.",https://github.com/bitcoin/bitcoin/pull/19724#discussion_r483272276,483272276,src/net_processing.cpp
ariard,2020-09-03 21:51:32,"Ah sorry, in fact they are drawn from both `new/tried` tables at anytime. Surely being confused by `SelectTriedCollision` in `net.cpp` path!",https://github.com/bitcoin/bitcoin/pull/19724#discussion_r483273322,483273322,src/net.h
ariard,2020-09-03 21:53:28,"I think the detection hardness assumption is function on how you define the third-party. \n\nI meaned ""directed paired"" as Alice being connected with Bob and Caroll. Caroll guessing the connection Alice-Bob thanks to some relay leaks (like txn or addr).",https://github.com/bitcoin/bitcoin/pull/19724#discussion_r483274072,483274072,src/net.h
