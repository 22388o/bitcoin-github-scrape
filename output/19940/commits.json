[
  {
    "sha": "2233a93a109b10b6fe0f5f26c2bb529c8de3dde7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMjMzYTkzYTEwOWIxMGI2ZmUwZjVmMjZjMmJiNTI5YzhkZTNkZGU3",
    "commit": {
      "author": {
        "name": "codeShark149",
        "email": "rajarshi149@gmail.com",
        "date": "2020-05-24T12:58:56Z"
      },
      "committer": {
        "name": "gzhao408",
        "email": "gzhao408@berkeley.edu",
        "date": "2020-09-16T01:01:32Z"
      },
      "message": "[rpc] Return fee and vsize from testmempoolaccept\n\nReturn fee and vsize if tx would pass ATMP.",
      "tree": {
        "sha": "254b829dc0e2ed876388e4ec9f81c36c26d0cf26",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/254b829dc0e2ed876388e4ec9f81c36c26d0cf26"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2233a93a109b10b6fe0f5f26c2bb529c8de3dde7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2233a93a109b10b6fe0f5f26c2bb529c8de3dde7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2233a93a109b10b6fe0f5f26c2bb529c8de3dde7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2233a93a109b10b6fe0f5f26c2bb529c8de3dde7/comments",
    "author": {
      "login": "rajarshimaitra",
      "id": 36541669,
      "node_id": "MDQ6VXNlcjM2NTQxNjY5",
      "avatar_url": "https://avatars.githubusercontent.com/u/36541669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rajarshimaitra",
      "html_url": "https://github.com/rajarshimaitra",
      "followers_url": "https://api.github.com/users/rajarshimaitra/followers",
      "following_url": "https://api.github.com/users/rajarshimaitra/following{/other_user}",
      "gists_url": "https://api.github.com/users/rajarshimaitra/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rajarshimaitra/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rajarshimaitra/subscriptions",
      "organizations_url": "https://api.github.com/users/rajarshimaitra/orgs",
      "repos_url": "https://api.github.com/users/rajarshimaitra/repos",
      "events_url": "https://api.github.com/users/rajarshimaitra/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rajarshimaitra/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9366a73d695136fec8de12d3942254543903c0cd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9366a73d695136fec8de12d3942254543903c0cd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9366a73d695136fec8de12d3942254543903c0cd"
      }
    ],
    "stats": {
      "total": 58,
      "additions": 43,
      "deletions": 15
    },
    "files": [
      {
        "sha": "0ce2b32c6128c6f5ed8365ff70d8f91f95fdd1b1",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2233a93a109b10b6fe0f5f26c2bb529c8de3dde7/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2233a93a109b10b6fe0f5f26c2bb529c8de3dde7/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=2233a93a109b10b6fe0f5f26c2bb529c8de3dde7",
        "patch": "@@ -102,6 +102,9 @@ will trigger BIP 125 (replace-by-fee) opt-in. (#11413)\n   option `-deprecatedrpc=banscore` is used. The `banscore` field will be fully\n   removed in the next major release. (#19469)\n \n+- The `testmempoolaccept` RPC returns `vsize` and a `fee` object with the `base` fee\n+  if the transaction passes validation. (#19940)\n+\n - The `walletcreatefundedpsbt` RPC call will now fail with\n   `Insufficient funds` when inputs are manually selected but are not enough to cover\n   the outputs and fee. Additional inputs can automatically be added through the"
      },
      {
        "sha": "1a43ffcc5336780240dfb44e7ba9165b8e423b9a",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 2,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2233a93a109b10b6fe0f5f26c2bb529c8de3dde7/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2233a93a109b10b6fe0f5f26c2bb529c8de3dde7/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=2233a93a109b10b6fe0f5f26c2bb529c8de3dde7",
        "patch": "@@ -878,6 +878,11 @@ static UniValue testmempoolaccept(const JSONRPCRequest& request)\n                         {\n                             {RPCResult::Type::STR_HEX, \"txid\", \"The transaction hash in hex\"},\n                             {RPCResult::Type::BOOL, \"allowed\", \"If the mempool allows this tx to be inserted\"},\n+                            {RPCResult::Type::NUM, \"vsize\", \"Virtual transaction size as defined in BIP 141. This is different from actual serialized size for witness transactions as witness data is discounted (only present when 'allowed' is true)\"},\n+                            {RPCResult::Type::OBJ, \"fees\", \"Transaction fees (only present if 'allowed' is true)\",\n+                            {\n+                                {RPCResult::Type::STR_AMOUNT, \"base\", \"transaction fee in \" + CURRENCY_UNIT},\n+                            }},\n                             {RPCResult::Type::STR, \"reject-reason\", \"Rejection string (only present when 'allowed' is false)\"},\n                         }},\n                     }\n@@ -924,13 +929,22 @@ static UniValue testmempoolaccept(const JSONRPCRequest& request)\n \n     TxValidationState state;\n     bool test_accept_res;\n+    CAmount fee;\n     {\n         LOCK(cs_main);\n         test_accept_res = AcceptToMemoryPool(mempool, state, std::move(tx),\n-            nullptr /* plTxnReplaced */, false /* bypass_limits */, max_raw_tx_fee, /* test_accept */ true);\n+            nullptr /* plTxnReplaced */, false /* bypass_limits */, max_raw_tx_fee, /* test_accept */ true, &fee);\n     }\n     result_0.pushKV(\"allowed\", test_accept_res);\n-    if (!test_accept_res) {\n+\n+    // Only return the fee and vsize if the transaction would pass ATMP.\n+    // These can be used to calculate the feerate.\n+    if (test_accept_res) {\n+        result_0.pushKV(\"vsize\", virtual_size);\n+        UniValue fees(UniValue::VOBJ);\n+        fees.pushKV(\"base\", ValueFromAmount(fee));\n+        result_0.pushKV(\"fees\", fees);\n+    } else {\n         if (state.IsInvalid()) {\n             if (state.GetResult() == TxValidationResult::TX_MISSING_INPUTS) {\n                 result_0.pushKV(\"reject-reason\", \"missing-inputs\");"
      },
      {
        "sha": "ff52477992f15b5ec8ba6c7a0cb4d560dc2bb48b",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 4,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2233a93a109b10b6fe0f5f26c2bb529c8de3dde7/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2233a93a109b10b6fe0f5f26c2bb529c8de3dde7/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=2233a93a109b10b6fe0f5f26c2bb529c8de3dde7",
        "patch": "@@ -475,6 +475,7 @@ class MemPoolAccept\n          */\n         std::vector<COutPoint>& m_coins_to_uncache;\n         const bool m_test_accept;\n+        CAmount* m_fee_out;\n     };\n \n     // Single transaction acceptance\n@@ -687,6 +688,11 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n         return false; // state filled in by CheckTxInputs\n     }\n \n+    // If fee_out is passed, return the fee to the caller\n+    if (args.m_fee_out) {\n+        *args.m_fee_out = nFees;\n+    }\n+\n     // Check for non-standard pay-to-script-hash in inputs\n     if (fRequireStandard && !AreInputsStandard(tx, m_view)) {\n         return state.Invalid(TxValidationResult::TX_INPUTS_NOT_STANDARD, \"bad-txns-nonstandard-inputs\");\n@@ -1061,10 +1067,10 @@ bool MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs\n /** (try to) add transaction to memory pool with a specified acceptance time **/\n static bool AcceptToMemoryPoolWithTime(const CChainParams& chainparams, CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n                         int64_t nAcceptTime, std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, const CAmount nAbsurdFee, bool test_accept) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+                        bool bypass_limits, const CAmount nAbsurdFee, bool test_accept, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     std::vector<COutPoint> coins_to_uncache;\n-    MemPoolAccept::ATMPArgs args { chainparams, state, nAcceptTime, plTxnReplaced, bypass_limits, nAbsurdFee, coins_to_uncache, test_accept };\n+    MemPoolAccept::ATMPArgs args { chainparams, state, nAcceptTime, plTxnReplaced, bypass_limits, nAbsurdFee, coins_to_uncache, test_accept, fee_out };\n     bool res = MemPoolAccept(pool).AcceptSingleTransaction(tx, args);\n     if (!res) {\n         // Remove coins that were not present in the coins cache before calling ATMPW;\n@@ -1083,10 +1089,10 @@ static bool AcceptToMemoryPoolWithTime(const CChainParams& chainparams, CTxMemPo\n \n bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n                         std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, const CAmount nAbsurdFee, bool test_accept)\n+                        bool bypass_limits, const CAmount nAbsurdFee, bool test_accept, CAmount* fee_out)\n {\n     const CChainParams& chainparams = Params();\n-    return AcceptToMemoryPoolWithTime(chainparams, pool, state, tx, GetTime(), plTxnReplaced, bypass_limits, nAbsurdFee, test_accept);\n+    return AcceptToMemoryPoolWithTime(chainparams, pool, state, tx, GetTime(), plTxnReplaced, bypass_limits, nAbsurdFee, test_accept, fee_out);\n }\n \n CTransactionRef GetTransaction(const CBlockIndex* const block_index, const CTxMemPool* const mempool, const uint256& hash, const Consensus::Params& consensusParams, uint256& hashBlock)"
      },
      {
        "sha": "0bc80e1cee0c05227c200fbd84622debfff8cc3f",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2233a93a109b10b6fe0f5f26c2bb529c8de3dde7/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2233a93a109b10b6fe0f5f26c2bb529c8de3dde7/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=2233a93a109b10b6fe0f5f26c2bb529c8de3dde7",
        "patch": "@@ -199,10 +199,11 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n /** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool **/\n+ * plTxnReplaced will be appended to with all transactions replaced from mempool\n+ * @param[out] fee_out optional argument to return tx fee to the caller **/\n bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n                         std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, const CAmount nAbsurdFee, bool test_accept=false) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+                        bool bypass_limits, const CAmount nAbsurdFee, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n /** Get the BIP9 state for a given deployment at the current tip. */\n ThresholdState VersionBitsTipState(const Consensus::Params& params, Consensus::DeploymentPos pos);"
      },
      {
        "sha": "ee9ca920462f271c8a3effc9396ebd74b9a1e90f",
        "filename": "test/functional/mempool_accept.py",
        "status": "modified",
        "additions": 8,
        "deletions": 5,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2233a93a109b10b6fe0f5f26c2bb529c8de3dde7/test/functional/mempool_accept.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2233a93a109b10b6fe0f5f26c2bb529c8de3dde7/test/functional/mempool_accept.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_accept.py?ref=2233a93a109b10b6fe0f5f26c2bb529c8de3dde7",
        "patch": "@@ -4,6 +4,7 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test mempool acceptance of raw transactions.\"\"\"\n \n+from decimal import Decimal\n from io import BytesIO\n import math\n \n@@ -91,20 +92,22 @@ def run_test(self):\n         tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_0)))\n         txid_0 = tx.rehash()\n         self.check_mempool_result(\n-            result_expected=[{'txid': txid_0, 'allowed': True}],\n+            result_expected=[{'txid': txid_0, 'allowed': True, 'vsize': 110, 'fees': {'base': Decimal(str(fee))}}],\n             rawtxs=[raw_tx_0],\n         )\n \n         self.log.info('A final transaction not in the mempool')\n         coin = coins.pop()  # Pick a random coin(base) to spend\n+        output_amount = 0.025\n         raw_tx_final = node.signrawtransactionwithwallet(node.createrawtransaction(\n             inputs=[{'txid': coin['txid'], 'vout': coin['vout'], \"sequence\": 0xffffffff}],  # SEQUENCE_FINAL\n-            outputs=[{node.getnewaddress(): 0.025}],\n+            outputs=[{node.getnewaddress(): output_amount}],\n             locktime=node.getblockcount() + 2000,  # Can be anything\n         ))['hex']\n         tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_final)))\n+        fee_expected = int(coin['amount']) - output_amount\n         self.check_mempool_result(\n-            result_expected=[{'txid': tx.rehash(), 'allowed': True}],\n+            result_expected=[{'txid': tx.rehash(), 'allowed': True, 'vsize': 188, 'fees': {'base': Decimal(str(fee_expected))}}],\n             rawtxs=[tx.serialize().hex()],\n             maxfeerate=0,\n         )\n@@ -127,7 +130,7 @@ def run_test(self):\n         tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_0)))\n         txid_0 = tx.rehash()\n         self.check_mempool_result(\n-            result_expected=[{'txid': txid_0, 'allowed': True}],\n+            result_expected=[{'txid': txid_0, 'allowed': True, 'vsize': 110, 'fees': {'base': Decimal(str(2 * fee))}}],\n             rawtxs=[raw_tx_0],\n         )\n \n@@ -187,7 +190,7 @@ def run_test(self):\n         tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_reference)))\n         # Reference tx should be valid on itself\n         self.check_mempool_result(\n-            result_expected=[{'txid': tx.rehash(), 'allowed': True}],\n+            result_expected=[{'txid': tx.rehash(), 'allowed': True, 'vsize': 110, 'fees': { 'base': Decimal(str(0.1 - 0.05))}}],\n             rawtxs=[tx.serialize().hex()],\n             maxfeerate=0,\n         )"
      },
      {
        "sha": "1d99761e1e795c1a02037420c67b58a8fec32a19",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2233a93a109b10b6fe0f5f26c2bb529c8de3dde7/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2233a93a109b10b6fe0f5f26c2bb529c8de3dde7/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=2233a93a109b10b6fe0f5f26c2bb529c8de3dde7",
        "patch": "@@ -3,6 +3,7 @@\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test segwit transactions and blocks on P2P network.\"\"\"\n+from decimal import Decimal\n import math\n import random\n import struct\n@@ -695,13 +696,13 @@ def test_standardness_v0(self):\n         if not self.segwit_active:\n             # Just check mempool acceptance, but don't add the transaction to the mempool, since witness is disallowed\n             # in blocks and the tx is impossible to mine right now.\n-            assert_equal(self.nodes[0].testmempoolaccept([tx3.serialize_with_witness().hex()]), [{'txid': tx3.hash, 'allowed': True}])\n+            assert_equal(self.nodes[0].testmempoolaccept([tx3.serialize_with_witness().hex()]), [{'txid': tx3.hash, 'allowed': True, 'vsize': 93, 'fees': { 'base': Decimal('0.00001000')}}])\n             # Create the same output as tx3, but by replacing tx\n             tx3_out = tx3.vout[0]\n             tx3 = tx\n             tx3.vout = [tx3_out]\n             tx3.rehash()\n-            assert_equal(self.nodes[0].testmempoolaccept([tx3.serialize_with_witness().hex()]), [{'txid': tx3.hash, 'allowed': True}])\n+            assert_equal(self.nodes[0].testmempoolaccept([tx3.serialize_with_witness().hex()]), [{'txid': tx3.hash, 'allowed': True, 'vsize': 93, 'fees': { 'base': Decimal('0.00011000')}}])\n         test_transaction_acceptance(self.nodes[0], self.test_node, tx3, with_witness=True, accepted=True)\n \n         self.nodes[0].generate(1)"
      }
    ]
  },
  {
    "sha": "23c35bf0059bd6270218e0b732959e9c754f9812",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyM2MzNWJmMDA1OWJkNjI3MDIxOGUwYjczMjk1OWU5Yzc1NGY5ODEy",
    "commit": {
      "author": {
        "name": "gzhao408",
        "email": "gzhao408@berkeley.edu",
        "date": "2020-09-16T14:13:31Z"
      },
      "committer": {
        "name": "gzhao408",
        "email": "gzhao408@berkeley.edu",
        "date": "2020-09-16T14:19:58Z"
      },
      "message": "[test] add get_vsize util for more programmatic testing",
      "tree": {
        "sha": "65f7486951d9611da24946dfd83688a066d60850",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/65f7486951d9611da24946dfd83688a066d60850"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/23c35bf0059bd6270218e0b732959e9c754f9812",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23c35bf0059bd6270218e0b732959e9c754f9812",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/23c35bf0059bd6270218e0b732959e9c754f9812",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23c35bf0059bd6270218e0b732959e9c754f9812/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2233a93a109b10b6fe0f5f26c2bb529c8de3dde7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2233a93a109b10b6fe0f5f26c2bb529c8de3dde7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2233a93a109b10b6fe0f5f26c2bb529c8de3dde7"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 16,
      "deletions": 6
    },
    "files": [
      {
        "sha": "57a059b7f7524436c0cfadf9372ff317d8b41681",
        "filename": "test/functional/mempool_accept.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23c35bf0059bd6270218e0b732959e9c754f9812/test/functional/mempool_accept.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23c35bf0059bd6270218e0b732959e9c754f9812/test/functional/mempool_accept.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_accept.py?ref=23c35bf0059bd6270218e0b732959e9c754f9812",
        "patch": "@@ -92,7 +92,7 @@ def run_test(self):\n         tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_0)))\n         txid_0 = tx.rehash()\n         self.check_mempool_result(\n-            result_expected=[{'txid': txid_0, 'allowed': True, 'vsize': 110, 'fees': {'base': Decimal(str(fee))}}],\n+            result_expected=[{'txid': txid_0, 'allowed': True, 'vsize': tx.get_vsize(), 'fees': {'base': Decimal(str(fee))}}],\n             rawtxs=[raw_tx_0],\n         )\n \n@@ -107,7 +107,7 @@ def run_test(self):\n         tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_final)))\n         fee_expected = int(coin['amount']) - output_amount\n         self.check_mempool_result(\n-            result_expected=[{'txid': tx.rehash(), 'allowed': True, 'vsize': 188, 'fees': {'base': Decimal(str(fee_expected))}}],\n+            result_expected=[{'txid': tx.rehash(), 'allowed': True, 'vsize': tx.get_vsize(), 'fees': {'base': Decimal(str(fee_expected))}}],\n             rawtxs=[tx.serialize().hex()],\n             maxfeerate=0,\n         )\n@@ -130,7 +130,7 @@ def run_test(self):\n         tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_0)))\n         txid_0 = tx.rehash()\n         self.check_mempool_result(\n-            result_expected=[{'txid': txid_0, 'allowed': True, 'vsize': 110, 'fees': {'base': Decimal(str(2 * fee))}}],\n+            result_expected=[{'txid': txid_0, 'allowed': True, 'vsize': tx.get_vsize(), 'fees': {'base': Decimal(str(2 * fee))}}],\n             rawtxs=[raw_tx_0],\n         )\n \n@@ -190,7 +190,7 @@ def run_test(self):\n         tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_reference)))\n         # Reference tx should be valid on itself\n         self.check_mempool_result(\n-            result_expected=[{'txid': tx.rehash(), 'allowed': True, 'vsize': 110, 'fees': { 'base': Decimal(str(0.1 - 0.05))}}],\n+            result_expected=[{'txid': tx.rehash(), 'allowed': True, 'vsize': tx.get_vsize(), 'fees': { 'base': Decimal(str(0.1 - 0.05))}}],\n             rawtxs=[tx.serialize().hex()],\n             maxfeerate=0,\n         )"
      },
      {
        "sha": "dfbf5d52f4774f6be32d087b3298e7ede914c61b",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23c35bf0059bd6270218e0b732959e9c754f9812/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23c35bf0059bd6270218e0b732959e9c754f9812/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=23c35bf0059bd6270218e0b732959e9c754f9812",
        "patch": "@@ -696,13 +696,13 @@ def test_standardness_v0(self):\n         if not self.segwit_active:\n             # Just check mempool acceptance, but don't add the transaction to the mempool, since witness is disallowed\n             # in blocks and the tx is impossible to mine right now.\n-            assert_equal(self.nodes[0].testmempoolaccept([tx3.serialize_with_witness().hex()]), [{'txid': tx3.hash, 'allowed': True, 'vsize': 93, 'fees': { 'base': Decimal('0.00001000')}}])\n+            assert_equal(self.nodes[0].testmempoolaccept([tx3.serialize_with_witness().hex()]), [{'txid': tx3.hash, 'allowed': True, 'vsize': tx3.get_vsize(), 'fees': { 'base': Decimal('0.00001000')}}])\n             # Create the same output as tx3, but by replacing tx\n             tx3_out = tx3.vout[0]\n             tx3 = tx\n             tx3.vout = [tx3_out]\n             tx3.rehash()\n-            assert_equal(self.nodes[0].testmempoolaccept([tx3.serialize_with_witness().hex()]), [{'txid': tx3.hash, 'allowed': True, 'vsize': 93, 'fees': { 'base': Decimal('0.00011000')}}])\n+            assert_equal(self.nodes[0].testmempoolaccept([tx3.serialize_with_witness().hex()]), [{'txid': tx3.hash, 'allowed': True, 'vsize': tx3.get_vsize(), 'fees': { 'base': Decimal('0.00011000')}}])\n         test_transaction_acceptance(self.nodes[0], self.test_node, tx3, with_witness=True, accepted=True)\n \n         self.nodes[0].generate(1)"
      },
      {
        "sha": "1e062ab9a48dd023720858ed1f73651efd048125",
        "filename": "test/functional/test_framework/messages.py",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23c35bf0059bd6270218e0b732959e9c754f9812/test/functional/test_framework/messages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23c35bf0059bd6270218e0b732959e9c754f9812/test/functional/test_framework/messages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/messages.py?ref=23c35bf0059bd6270218e0b732959e9c754f9812",
        "patch": "@@ -22,6 +22,7 @@\n import copy\n import hashlib\n from io import BytesIO\n+import math\n import random\n import socket\n import struct\n@@ -67,6 +68,8 @@\n \n FILTER_TYPE_BASIC = 0\n \n+WITNESS_SCALE_FACTOR = 4\n+\n # Serialization/deserialization tools\n def sha256(s):\n     return hashlib.new('sha256', s).digest()\n@@ -537,6 +540,13 @@ def is_valid(self):\n                 return False\n         return True\n \n+    # Calculate the virtual transaction size using witness and non-witness\n+    # serialization size (does NOT use sigops).\n+    def get_vsize(self):\n+        with_witness_size = len(self.serialize_with_witness())\n+        without_witness_size = len(self.serialize_without_witness())\n+        return math.ceil(((WITNESS_SCALE_FACTOR - 1) * without_witness_size + with_witness_size) / WITNESS_SCALE_FACTOR)\n+\n     def __repr__(self):\n         return \"CTransaction(nVersion=%i vin=%s vout=%s wit=%s nLockTime=%i)\" \\\n             % (self.nVersion, repr(self.vin), repr(self.vout), repr(self.wit), self.nLockTime)"
      }
    ]
  }
]