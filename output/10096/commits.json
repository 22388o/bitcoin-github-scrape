[
  {
    "sha": "29d6634a691044cb5d87173c029c8da309c0102e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyOWQ2NjM0YTY5MTA0NGNiNWQ4NzE3M2MwMjljOGRhMzA5YzAxMDJl",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-03-27T15:33:00Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-03-27T15:33:00Z"
      },
      "message": "Check that all test scripts in test/functional are being run\n\nThis commit checks that all of the python files in the test/functional\ndirectory are listed in test_runner.py.",
      "tree": {
        "sha": "de38d110b45fd74b79f63eef4ef6e6f8bb1a2f10",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/de38d110b45fd74b79f63eef4ef6e6f8bb1a2f10"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/29d6634a691044cb5d87173c029c8da309c0102e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29d6634a691044cb5d87173c029c8da309c0102e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/29d6634a691044cb5d87173c029c8da309c0102e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29d6634a691044cb5d87173c029c8da309c0102e/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5114f8113627791b871c88998bd5a3d36961c241",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5114f8113627791b871c88998bd5a3d36961c241",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5114f8113627791b871c88998bd5a3d36961c241"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 21,
      "deletions": 0
    },
    "files": [
      {
        "sha": "9eab9c791719e8bb04fda16bc0f5a599e0c577be",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 21,
        "deletions": 0,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29d6634a691044cb5d87173c029c8da309c0102e/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29d6634a691044cb5d87173c029c8da309c0102e/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=29d6634a691044cb5d87173c029c8da309c0102e",
        "patch": "@@ -127,6 +127,13 @@\n \n ALL_SCRIPTS = BASE_SCRIPTS + ZMQ_SCRIPTS + EXTENDED_SCRIPTS\n \n+NON_SCRIPTS = [\n+    # These are python files that live in the functional tests directory, but are not test scripts.\n+    \"combine_logs.py\",\n+    \"create_cache.py\",\n+    \"test_runner.py\",\n+]\n+\n def main():\n     # Parse arguments and pass through unrecognised args\n     parser = argparse.ArgumentParser(add_help=False,\n@@ -212,6 +219,8 @@ def main():\n         subprocess.check_call([(config[\"environment\"][\"SRCDIR\"] + '/test/functional/' + test_list[0].split()[0])] + ['-h'])\n         sys.exit(0)\n \n+    check_script_list(config[\"environment\"][\"SRCDIR\"])\n+\n     run_tests(test_list, config[\"environment\"][\"SRCDIR\"], config[\"environment\"][\"BUILDDIR\"], config[\"environment\"][\"EXEEXT\"], args.jobs, args.coverage, passon_args)\n \n def run_tests(test_list, src_dir, build_dir, exeext, jobs=1, enable_coverage=False, args=[]):\n@@ -331,6 +340,18 @@ def get_next(self):\n                     return name, stdout, stderr, status, int(time.time() - time0)\n             print('.', end='', flush=True)\n \n+def check_script_list(src_dir):\n+    \"\"\"Check scripts directory.\n+\n+    Check that there are no scripts in the functional tests directory which are\n+    not being run by pull-tester.py.\"\"\"\n+    script_dir = src_dir + '/test/functional/'\n+    python_files = set([t for t in os.listdir(script_dir) if t[-3:] == \".py\"])\n+    missed_tests = list(python_files - set(map(lambda x: x.split()[0], ALL_SCRIPTS + NON_SCRIPTS)))\n+    if len(missed_tests) != 0:\n+        print(\"The following scripts are not being run:\" + str(missed_tests))\n+        print(\"Check the test lists in test_runner.py\")\n+        sys.exit(1)\n \n class RPCCoverage(object):\n     \"\"\""
      }
    ]
  }
]