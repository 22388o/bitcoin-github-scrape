[
  {
    "sha": "8573429d46f1e014663695e95109c10dfe4d54c9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NTczNDI5ZDQ2ZjFlMDE0NjYzNjk1ZTk1MTA5YzEwZGZlNGQ1NGM5",
    "commit": {
      "author": {
        "name": "soroosh-sdi",
        "email": "soroosh.sardari@gmail.com",
        "date": "2019-09-13T14:15:26Z"
      },
      "committer": {
        "name": "soroosh-sdi",
        "email": "soroosh.sardari@gmail.com",
        "date": "2019-09-16T19:06:43Z"
      },
      "message": "test: add some unit tests for merkle.cpp\n\nfollowing situations are covered:\n- empty block\n- one Tx\n- Merkle root of a block with odd Txs should not change with repeating\nlast one\n- Merkle root is computed with combining Merkle root of left subtree and right subtree\n- block witness is Merkle root of a block when setting first Tx\nto zero.\n\nSigned-off-by: soroosh-sdi <soroosh.sardari@gmail.com>",
      "tree": {
        "sha": "a2af70c15d8c51571d7dd722012253d05cd00c75",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a2af70c15d8c51571d7dd722012253d05cd00c75"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8573429d46f1e014663695e95109c10dfe4d54c9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8573429d46f1e014663695e95109c10dfe4d54c9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8573429d46f1e014663695e95109c10dfe4d54c9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8573429d46f1e014663695e95109c10dfe4d54c9/comments",
    "author": {
      "login": "soroosh-sdi",
      "id": 4056691,
      "node_id": "MDQ6VXNlcjQwNTY2OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4056691?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/soroosh-sdi",
      "html_url": "https://github.com/soroosh-sdi",
      "followers_url": "https://api.github.com/users/soroosh-sdi/followers",
      "following_url": "https://api.github.com/users/soroosh-sdi/following{/other_user}",
      "gists_url": "https://api.github.com/users/soroosh-sdi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/soroosh-sdi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/soroosh-sdi/subscriptions",
      "organizations_url": "https://api.github.com/users/soroosh-sdi/orgs",
      "repos_url": "https://api.github.com/users/soroosh-sdi/repos",
      "events_url": "https://api.github.com/users/soroosh-sdi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/soroosh-sdi/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "soroosh-sdi",
      "id": 4056691,
      "node_id": "MDQ6VXNlcjQwNTY2OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4056691?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/soroosh-sdi",
      "html_url": "https://github.com/soroosh-sdi",
      "followers_url": "https://api.github.com/users/soroosh-sdi/followers",
      "following_url": "https://api.github.com/users/soroosh-sdi/following{/other_user}",
      "gists_url": "https://api.github.com/users/soroosh-sdi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/soroosh-sdi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/soroosh-sdi/subscriptions",
      "organizations_url": "https://api.github.com/users/soroosh-sdi/orgs",
      "repos_url": "https://api.github.com/users/soroosh-sdi/repos",
      "events_url": "https://api.github.com/users/soroosh-sdi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/soroosh-sdi/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "08bb4c31563505a30a9b7dd8e7ed98966d2c8494",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/08bb4c31563505a30a9b7dd8e7ed98966d2c8494",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/08bb4c31563505a30a9b7dd8e7ed98966d2c8494"
      }
    ],
    "stats": {
      "total": 100,
      "additions": 100,
      "deletions": 0
    },
    "files": [
      {
        "sha": "dc38a1a818ef6154e08148d44cc0995a6de1228d",
        "filename": "src/test/merkle_tests.cpp",
        "status": "modified",
        "additions": 100,
        "deletions": 0,
        "changes": 100,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8573429d46f1e014663695e95109c10dfe4d54c9/src/test/merkle_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8573429d46f1e014663695e95109c10dfe4d54c9/src/test/merkle_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/merkle_tests.cpp?ref=8573429d46f1e014663695e95109c10dfe4d54c9",
        "patch": "@@ -249,4 +249,104 @@ BOOST_AUTO_TEST_CASE(merkle_test)\n     }\n }\n \n+\n+BOOST_AUTO_TEST_CASE(merkle_test_empty_block)\n+{\n+    bool mutated = false;\n+    CBlock block;\n+    uint256 root = BlockMerkleRoot(block, &mutated);\n+\n+    BOOST_CHECK_EQUAL(root.IsNull(), true);\n+    BOOST_CHECK_EQUAL(mutated, false);\n+}\n+\n+BOOST_AUTO_TEST_CASE(merkle_test_oneTx_block)\n+{\n+    bool mutated = false;\n+    CBlock block;\n+\n+    block.vtx.resize(1);\n+    CMutableTransaction mtx;\n+    mtx.nLockTime = 0;\n+    block.vtx[0] = MakeTransactionRef(std::move(mtx));\n+    uint256 root = BlockMerkleRoot(block, &mutated);\n+    BOOST_CHECK_EQUAL(root, block.vtx[0]->GetHash());\n+    BOOST_CHECK_EQUAL(mutated, false);\n+}\n+\n+BOOST_AUTO_TEST_CASE(merkle_test_OddTxWithRepeatedLastTx_block)\n+{\n+    bool mutated;\n+    CBlock block, blockWithRepeatedLastTx;\n+\n+    block.vtx.resize(3);\n+\n+    for (std::size_t pos = 0; pos < block.vtx.size(); pos++) {\n+        CMutableTransaction mtx;\n+        mtx.nLockTime = pos;\n+        block.vtx[pos] = MakeTransactionRef(std::move(mtx));\n+    }\n+\n+    blockWithRepeatedLastTx = block;\n+    blockWithRepeatedLastTx.vtx.push_back(blockWithRepeatedLastTx.vtx.back());\n+\n+    uint256 rootofBlock = BlockMerkleRoot(block, &mutated);\n+    BOOST_CHECK_EQUAL(mutated, false);\n+\n+    uint256 rootofBlockWithRepeatedLastTx = BlockMerkleRoot(blockWithRepeatedLastTx, &mutated);\n+    BOOST_CHECK_EQUAL(rootofBlock, rootofBlockWithRepeatedLastTx);\n+    BOOST_CHECK_EQUAL(mutated, true);\n+}\n+\n+BOOST_AUTO_TEST_CASE(merkle_test_LeftSubtreeRightSubtree)\n+{\n+    CBlock block, leftSubtreeBlock, rightSubtreeBlock;\n+\n+    block.vtx.resize(4);\n+    std::size_t pos;\n+    for (pos = 0; pos < block.vtx.size(); pos++) {\n+        CMutableTransaction mtx;\n+        mtx.nLockTime = pos;\n+        block.vtx[pos] = MakeTransactionRef(std::move(mtx));\n+    }\n+\n+    for (pos = 0; pos < block.vtx.size() / 2; pos++)\n+        leftSubtreeBlock.vtx.push_back(block.vtx[pos]);\n+\n+    for (pos = block.vtx.size() / 2; pos < block.vtx.size(); pos++)\n+        rightSubtreeBlock.vtx.push_back(block.vtx[pos]);\n+\n+    uint256 root = BlockMerkleRoot(block);\n+    uint256 rootOfLeftSubtree = BlockMerkleRoot(leftSubtreeBlock);\n+    uint256 rootOfRightSubtree = BlockMerkleRoot(rightSubtreeBlock);\n+    std::vector<uint256> leftRight;\n+    leftRight.push_back(rootOfLeftSubtree);\n+    leftRight.push_back(rootOfRightSubtree);\n+    uint256 rootOfLR = ComputeMerkleRoot(leftRight);\n+\n+    BOOST_CHECK_EQUAL(root, rootOfLR);\n+}\n+\n+BOOST_AUTO_TEST_CASE(merkle_test_BlockWitness)\n+{\n+    CBlock block;\n+\n+    block.vtx.resize(2);\n+    for (std::size_t pos = 0; pos < block.vtx.size(); pos++) {\n+        CMutableTransaction mtx;\n+        mtx.nLockTime = pos;\n+        block.vtx[pos] = MakeTransactionRef(std::move(mtx));\n+    }\n+\n+    uint256 blockWitness = BlockWitnessMerkleRoot(block);\n+\n+    std::vector<uint256> hashes;\n+    hashes.resize(block.vtx.size());\n+    hashes[0].SetNull();\n+    hashes[1] = block.vtx[1]->GetHash();\n+\n+    uint256 merkelRootofHashes = ComputeMerkleRoot(hashes);\n+\n+    BOOST_CHECK_EQUAL(merkelRootofHashes, blockWitness);\n+}\n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  }
]