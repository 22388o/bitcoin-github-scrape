[
  {
    "sha": "336fe971e68f0336d42e1fa930b6a9c717f612e0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMzZmZTk3MWU2OGYwMzM2ZDQyZTFmYTkzMGI2YTljNzE3ZjYxMmUw",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-01-06T12:30:00Z"
      },
      "committer": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-06-06T03:36:10Z"
      },
      "message": "Get rid of db dependencies on main",
      "tree": {
        "sha": "ac1e93fe3b0abf840db3c33ec52a7de665d66a0d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ac1e93fe3b0abf840db3c33ec52a7de665d66a0d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/336fe971e68f0336d42e1fa930b6a9c717f612e0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/336fe971e68f0336d42e1fa930b6a9c717f612e0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/336fe971e68f0336d42e1fa930b6a9c717f612e0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/336fe971e68f0336d42e1fa930b6a9c717f612e0/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c94bd68547df9ba7645305f9813e02d548e8a981",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c94bd68547df9ba7645305f9813e02d548e8a981",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c94bd68547df9ba7645305f9813e02d548e8a981"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 22,
      "deletions": 8
    },
    "files": [
      {
        "sha": "1f5391760227f771e9a5209b1b4f0682ed242cf4",
        "filename": "src/db.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 4,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/336fe971e68f0336d42e1fa930b6a9c717f612e0/src/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/336fe971e68f0336d42e1fa930b6a9c717f612e0/src/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.cpp?ref=336fe971e68f0336d42e1fa930b6a9c717f612e0",
        "patch": "@@ -5,10 +5,12 @@\n \n #include \"db.h\"\n #include \"util.h\"\n-#include \"main.h\"\n+#include \"hash.h\"\n+#include \"addrman.h\"\n #include <boost/version.hpp>\n #include <boost/filesystem.hpp>\n #include <boost/filesystem/fstream.hpp>\n+#include <openssl/rand.h>\n \n #ifndef WIN32\n #include \"sys/stat.h\"\n@@ -486,6 +488,7 @@ void CDBEnv::Flush(bool fShutdown)\n // CAddrDB\n //\n \n+unsigned char CAddrDB::pchMessageStart[4] = { 0x00, 0x00, 0x00, 0x00 };\n \n CAddrDB::CAddrDB()\n {\n@@ -501,7 +504,7 @@ bool CAddrDB::Write(const CAddrMan& addr)\n \n     // serialize addresses, checksum data up to that point, then append csum\n     CDataStream ssPeers(SER_DISK, CLIENT_VERSION);\n-    ssPeers << FLATDATA(pchMessageStart);\n+    ssPeers << FLATDATA(CAddrDB::pchMessageStart);\n     ssPeers << addr;\n     uint256 hash = Hash(ssPeers.begin(), ssPeers.end());\n     ssPeers << hash;\n@@ -566,11 +569,11 @@ bool CAddrDB::Read(CAddrMan& addr)\n \n     unsigned char pchMsgTmp[4];\n     try {\n-        // de-serialize file header (pchMessageStart magic number) and\n+        // de-serialize file header (CAddrDB::pchMessageStart magic number) and\n         ssPeers >> FLATDATA(pchMsgTmp);\n \n         // verify the network matches ours\n-        if (memcmp(pchMsgTmp, pchMessageStart, sizeof(pchMsgTmp)))\n+        if (memcmp(pchMsgTmp, CAddrDB::pchMessageStart, sizeof(pchMsgTmp)))\n             return error(\"CAddrman::Read() : invalid network magic number\");\n \n         // de-serialize address data into one CAddrMan object"
      },
      {
        "sha": "92241f6cf21ca411bd676b0fc0c7f922dd73f33a",
        "filename": "src/db.h",
        "status": "modified",
        "additions": 7,
        "deletions": 3,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/336fe971e68f0336d42e1fa930b6a9c717f612e0/src/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/336fe971e68f0336d42e1fa930b6a9c717f612e0/src/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.h?ref=336fe971e68f0336d42e1fa930b6a9c717f612e0",
        "patch": "@@ -5,22 +5,22 @@\n #ifndef BITCOIN_DB_H\n #define BITCOIN_DB_H\n \n-#include \"main.h\"\n+#include \"sync.h\"\n+#include \"serialize.h\"\n \n #include <map>\n #include <string>\n #include <vector>\n \n+#include <boost/filesystem.hpp>\n #include <db_cxx.h>\n \n-class CAddress;\n class CAddrMan;\n class CBlockLocator;\n class CDiskBlockIndex;\n class CMasterKey;\n class COutPoint;\n class CWallet;\n-class CWalletTx;\n \n extern unsigned int nWalletDBUpdated;\n \n@@ -318,10 +318,14 @@ class CAddrDB\n {\n private:\n     boost::filesystem::path pathAddr;\n+    static unsigned char pchMessageStart[4];\n+\n public:\n     CAddrDB();\n     bool Write(const CAddrMan& addr);\n     bool Read(CAddrMan& addr);\n+\n+    static void SetMessageStart(unsigned char _pchMessageStart[]) { memcpy(CAddrDB::pchMessageStart, _pchMessageStart, sizeof(CAddrDB::pchMessageStart)); }\n };\n \n #endif // BITCOIN_DB_H"
      },
      {
        "sha": "e4cb2f1d00c0112fcdd91bd210cea634821de6d4",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/336fe971e68f0336d42e1fa930b6a9c717f612e0/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/336fe971e68f0336d42e1fa930b6a9c717f612e0/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=336fe971e68f0336d42e1fa930b6a9c717f612e0",
        "patch": "@@ -928,6 +928,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n     nStart = GetTimeMillis();\n \n     {\n+        CAddrDB::SetMessageStart(pchMessageStart);\n         CAddrDB adb;\n         if (!adb.Read(addrman))\n             printf(\"Invalid or missing peers.dat; recreating\\n\");"
      },
      {
        "sha": "22dce78e9154545f42625ee99437e7d6c12c9310",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/336fe971e68f0336d42e1fa930b6a9c717f612e0/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/336fe971e68f0336d42e1fa930b6a9c717f612e0/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=336fe971e68f0336d42e1fa930b6a9c717f612e0",
        "patch": "@@ -5,6 +5,8 @@\n #ifndef BITCOIN_WALLET_H\n #define BITCOIN_WALLET_H\n \n+#include \"walletdb.h\"\n+\n #include <string>\n #include <vector>\n \n@@ -16,12 +18,12 @@\n #include \"script.h\"\n #include \"ui_interface.h\"\n #include \"util.h\"\n-#include \"walletdb.h\"\n \n class CAccountingEntry;\n class CWalletTx;\n class CReserveKey;\n class COutput;\n+class CWalletDB;\n \n /** (client) version numbers for particular wallet features */\n enum WalletFeature"
      },
      {
        "sha": "9732eb29e46699f656093a9540c52eb3a8472eca",
        "filename": "src/walletdb.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/336fe971e68f0336d42e1fa930b6a9c717f612e0/src/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/336fe971e68f0336d42e1fa930b6a9c717f612e0/src/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.h?ref=336fe971e68f0336d42e1fa930b6a9c717f612e0",
        "patch": "@@ -11,6 +11,8 @@\n class CKeyPool;\n class CAccount;\n class CAccountingEntry;\n+class CWallet;\n+class CWalletTx;\n \n /** Error statuses for the wallet database */\n enum DBErrors\n@@ -160,4 +162,6 @@ class CWalletDB : public CDB\n     static bool Recover(CDBEnv& dbenv, std::string filename);\n };\n \n+bool BackupWallet(const CWallet& wallet, const std::string& strDest);\n+\n #endif // BITCOIN_WALLETDB_H"
      }
    ]
  },
  {
    "sha": "8926263dde10bed3f42e21e5f106365f1192e6c0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4OTI2MjYzZGRlMTBiZWQzZjQyZTIxZTVmMTA2MzY1ZjExOTJlNmMw",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-01-07T14:39:53Z"
      },
      "committer": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-06-06T03:36:10Z"
      },
      "message": "Moved PushGetBlocks to main.cpp to eliminate dependence of net.cpp on CBlockLocator.",
      "tree": {
        "sha": "2b00ca18e361e9ea76351b3dff39c8947ded8568",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2b00ca18e361e9ea76351b3dff39c8947ded8568"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8926263dde10bed3f42e21e5f106365f1192e6c0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8926263dde10bed3f42e21e5f106365f1192e6c0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8926263dde10bed3f42e21e5f106365f1192e6c0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8926263dde10bed3f42e21e5f106365f1192e6c0/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "336fe971e68f0336d42e1fa930b6a9c717f612e0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/336fe971e68f0336d42e1fa930b6a9c717f612e0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/336fe971e68f0336d42e1fa930b6a9c717f612e0"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 18,
      "deletions": 16
    },
    "files": [
      {
        "sha": "65ae78a13687e01659a662c91df7fd88b3466b5b",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 4,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8926263dde10bed3f42e21e5f106365f1192e6c0/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8926263dde10bed3f42e21e5f106365f1192e6c0/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=8926263dde10bed3f42e21e5f106365f1192e6c0",
        "patch": "@@ -2208,6 +2208,17 @@ bool CBlockIndex::IsSuperMajority(int minVersion, const CBlockIndex* pstart, uns\n     return (nFound >= nRequired);\n }\n \n+void PushGetBlocks(CNode* pnode, CBlockIndex* pindexBegin, uint256 hashEnd)\n+{\n+    // Filter out duplicate requests\n+    if (pindexBegin == pnode->pindexLastGetBlocksBegin && hashEnd == pnode->hashLastGetBlocksEnd)\n+        return;\n+    pnode->pindexLastGetBlocksBegin = pindexBegin;\n+    pnode->hashLastGetBlocksEnd = hashEnd;\n+\n+    pnode->PushMessage(\"getblocks\", CBlockLocator(pindexBegin), hashEnd);\n+}\n+\n bool ProcessBlock(CValidationState &state, CNode* pfrom, CBlock* pblock, CDiskBlockPos *dbp)\n {\n     // Check for duplicate\n@@ -2253,7 +2264,7 @@ bool ProcessBlock(CValidationState &state, CNode* pfrom, CBlock* pblock, CDiskBl\n             mapOrphanBlocksByPrev.insert(make_pair(pblock2->hashPrevBlock, pblock2));\n \n             // Ask this guy to fill in what we're missing\n-            pfrom->PushGetBlocks(pindexBest, GetOrphanRoot(pblock2));\n+            PushGetBlocks(pfrom, pindexBest, GetOrphanRoot(pblock2));\n         }\n         return true;\n     }\n@@ -3357,12 +3368,12 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n                 if (!fImporting && !fReindex)\n                     pfrom->AskFor(inv);\n             } else if (inv.type == MSG_BLOCK && mapOrphanBlocks.count(inv.hash)) {\n-                pfrom->PushGetBlocks(pindexBest, GetOrphanRoot(mapOrphanBlocks[inv.hash]));\n+                PushGetBlocks(pfrom, pindexBest, GetOrphanRoot(mapOrphanBlocks[inv.hash]));\n             } else if (nInv == nLastBlock) {\n                 // In case we are on a very long side-chain, it is possible that we already have\n                 // the last block in an inv bundle sent in response to getblocks. Try to detect\n                 // this situation and push another getblocks to continue.\n-                pfrom->PushGetBlocks(mapBlockIndex[inv.hash], uint256(0));\n+                PushGetBlocks(pfrom, mapBlockIndex[inv.hash], uint256(0));\n                 if (fDebug)\n                     printf(\"force request: %s\\n\", inv.ToString().c_str());\n             }\n@@ -3839,7 +3850,7 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n         // Start block sync\n         if (pto->fStartSync && !fImporting && !fReindex) {\n             pto->fStartSync = false;\n-            pto->PushGetBlocks(pindexBest, uint256(0));\n+            PushGetBlocks(pto, pindexBest, uint256(0));\n         }\n \n         // Resend wallet transactions that haven't gotten in a block yet"
      },
      {
        "sha": "feaa10318c6a5a735f0025f45c19ecb7df181dc4",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8926263dde10bed3f42e21e5f106365f1192e6c0/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8926263dde10bed3f42e21e5f106365f1192e6c0/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=8926263dde10bed3f42e21e5f106365f1192e6c0",
        "patch": "@@ -122,6 +122,9 @@ void RegisterWallet(CWallet* pwalletIn);\n void UnregisterWallet(CWallet* pwalletIn);\n /** Push an updated transaction to all registered wallets */\n void SyncWithWallets(const uint256 &hash, const CTransaction& tx, const CBlock* pblock = NULL, bool fUpdate = false);\n+\n+void PushGetBlocks(CNode* pnode, CBlockIndex* pindexBegin, uint256 hashEnd);\n+\n /** Process an incoming block */\n bool ProcessBlock(CValidationState &state, CNode* pfrom, CBlock* pblock, CDiskBlockPos *dbp = NULL);\n /** Check whether enough disk space is available for an incoming block */"
      },
      {
        "sha": "8929919f03ab980f8494eb2d06d9dbef6a64a737",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 11,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8926263dde10bed3f42e21e5f106365f1192e6c0/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8926263dde10bed3f42e21e5f106365f1192e6c0/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=8926263dde10bed3f42e21e5f106365f1192e6c0",
        "patch": "@@ -79,17 +79,6 @@ unsigned short GetListenPort()\n     return (unsigned short)(GetArg(\"-port\", GetDefaultPort()));\n }\n \n-void CNode::PushGetBlocks(CBlockIndex* pindexBegin, uint256 hashEnd)\n-{\n-    // Filter out duplicate requests\n-    if (pindexBegin == pindexLastGetBlocksBegin && hashEnd == hashLastGetBlocksEnd)\n-        return;\n-    pindexLastGetBlocksBegin = pindexBegin;\n-    hashLastGetBlocksEnd = hashEnd;\n-\n-    PushMessage(\"getblocks\", CBlockLocator(pindexBegin), hashEnd);\n-}\n-\n // find 'best' local address for a particular peer\n bool GetLocal(CService& addr, const CNetAddr *paddrPeer)\n {"
      },
      {
        "sha": "6f7bea9394b1a87295cf67a6388458fde1a30a02",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8926263dde10bed3f42e21e5f106365f1192e6c0/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8926263dde10bed3f42e21e5f106365f1192e6c0/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=8926263dde10bed3f42e21e5f106365f1192e6c0",
        "patch": "@@ -600,7 +600,6 @@ class CNode\n         }\n     }\n \n-    void PushGetBlocks(CBlockIndex* pindexBegin, uint256 hashEnd);\n     bool IsSubscribed(unsigned int nChannel);\n     void Subscribe(unsigned int nChannel, unsigned int nHops=0);\n     void CancelSubscribe(unsigned int nChannel);"
      }
    ]
  },
  {
    "sha": "4751d07efdc3924a005bbe61b358d320f0c710af",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NzUxZDA3ZWZkYzM5MjRhMDA1YmJlNjFiMzU4ZDMyMGYwYzcxMGFm",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-01-07T15:35:31Z"
      },
      "committer": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-06-06T03:36:10Z"
      },
      "message": "Moved unrelated-to-network calls in StartNode and StopNode into init.cpp",
      "tree": {
        "sha": "5ae13ae92659ee7937fcccfb24f71d3865ee66cc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5ae13ae92659ee7937fcccfb24f71d3865ee66cc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4751d07efdc3924a005bbe61b358d320f0c710af",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4751d07efdc3924a005bbe61b358d320f0c710af",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4751d07efdc3924a005bbe61b358d320f0c710af",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4751d07efdc3924a005bbe61b358d320f0c710af/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8926263dde10bed3f42e21e5f106365f1192e6c0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8926263dde10bed3f42e21e5f106365f1192e6c0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8926263dde10bed3f42e21e5f106365f1192e6c0"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "48fd5ae97fcaa9a4746461912a386371d5a67754",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4751d07efdc3924a005bbe61b358d320f0c710af/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4751d07efdc3924a005bbe61b358d320f0c710af/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=4751d07efdc3924a005bbe61b358d320f0c710af",
        "patch": "@@ -45,6 +45,7 @@ enum BindFlags {\n     BF_REPORT_ERROR = (1U << 1)\n };\n \n+\n //////////////////////////////////////////////////////////////////////////////\n //\n // Shutdown\n@@ -99,6 +100,7 @@ void Shutdown()\n     StopRPCThreads();\n     ShutdownRPCMining();\n     bitdb.Flush(false);\n+    GenerateBitcoins(false, NULL);\n     StopNode();\n     {\n         LOCK(cs_main);"
      },
      {
        "sha": "7a1fcc50334e1f97610b8b55119adf9a27b54ff3",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4751d07efdc3924a005bbe61b358d320f0c710af/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4751d07efdc3924a005bbe61b358d320f0c710af/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=4751d07efdc3924a005bbe61b358d320f0c710af",
        "patch": "@@ -1850,7 +1850,6 @@ void StartNode(boost::thread_group& threadGroup)\n bool StopNode()\n {\n     printf(\"StopNode()\\n\");\n-    GenerateBitcoins(false, NULL);\n     MapPort(false);\n     nTransactionsUpdated++;\n     if (semOutbound)"
      }
    ]
  },
  {
    "sha": "663224c2324d64134f8587fe77d1d787c0353b20",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NjMyMjRjMjMyNGQ2NDEzNGY4NTg3ZmU3N2QxZDc4N2MwMzUzYjIw",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-01-07T16:07:51Z"
      },
      "committer": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-06-06T03:36:10Z"
      },
      "message": "Removed net.cpp's dependency on init.h.\n\nAdded explicit include of main.h in init.cpp, changed include of init.h to include of main.h in net.cpp.\n\nAdded function registration for net.cpp in init.cpp's network initialization.\n\nRemoved protocol.cpp's dependency on main.h.\n\nTODO: Remove main.h include in net.cpp.",
      "tree": {
        "sha": "db06935be9f6e57b6478e866b63f72b3a5934d81",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/db06935be9f6e57b6478e866b63f72b3a5934d81"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/663224c2324d64134f8587fe77d1d787c0353b20",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/663224c2324d64134f8587fe77d1d787c0353b20",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/663224c2324d64134f8587fe77d1d787c0353b20",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/663224c2324d64134f8587fe77d1d787c0353b20/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4751d07efdc3924a005bbe61b358d320f0c710af",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4751d07efdc3924a005bbe61b358d320f0c710af",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4751d07efdc3924a005bbe61b358d320f0c710af"
      }
    ],
    "stats": {
      "total": 47,
      "additions": 42,
      "deletions": 5
    },
    "files": [
      {
        "sha": "1eee4d24708fe8c49022c593e432989f5d6b0bf1",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/663224c2324d64134f8587fe77d1d787c0353b20/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/663224c2324d64134f8587fe77d1d787c0353b20/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=663224c2324d64134f8587fe77d1d787c0353b20",
        "patch": "@@ -3,11 +3,12 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include \"init.h\"\n+#include \"main.h\"\n #include \"txdb.h\"\n #include \"walletdb.h\"\n #include \"bitcoinrpc.h\"\n #include \"net.h\"\n-#include \"init.h\"\n #include \"util.h\"\n #include \"ui_interface.h\"\n #include \"checkpoints.h\"\n@@ -569,6 +570,10 @@ bool AppInit2(boost::thread_group& threadGroup)\n \n     // ********************************************************* Step 6: network initialization\n \n+    SetProcessMessagesHandler(ProcessMessages);\n+    SetSendMessagesHandler(SendMessages);\n+    SetStartShutdownHandler(StartShutdown);\n+    \n     int nSocksVersion = GetArg(\"-socks\", 5);\n     if (nSocksVersion != 4 && nSocksVersion != 5)\n         return InitError(strprintf(_(\"Unknown -socks proxy version requested: %i\"), nSocksVersion));"
      },
      {
        "sha": "5932f5f8e31d028320c93803ed4fe3cf42ae4bd6",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 3,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/663224c2324d64134f8587fe77d1d787c0353b20/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/663224c2324d64134f8587fe77d1d787c0353b20/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=663224c2324d64134f8587fe77d1d787c0353b20",
        "patch": "@@ -5,7 +5,7 @@\n \n #include \"db.h\"\n #include \"net.h\"\n-#include \"init.h\"\n+#include \"main.h\"\n #include \"addrman.h\"\n #include \"ui_interface.h\"\n #include \"script.h\"\n@@ -68,6 +68,28 @@ CCriticalSection cs_vAddedNodes;\n \n static CSemaphore *semOutbound = NULL;\n \n+//\n+// Handlers that need to be registered\n+//\n+static ProcessMessagesHandler fnProcessMessages = NULL;\n+static SendMessagesHandler fnSendMessages = NULL;\n+static StartShutdownHandler fnStartShutdown = NULL;\n+\n+void SetProcessMessagesHandler(ProcessMessagesHandler handler)\n+{\n+    fnProcessMessages = handler;\n+}\n+\n+void SetSendMessagesHandler(SendMessagesHandler handler)\n+{\n+    fnSendMessages = handler;\n+}\n+\n+void SetStartShutdownHandler(StartShutdownHandler handler)\n+{\n+    fnStartShutdown = handler;\n+}\n+\n void AddOneShot(string strDest)\n {\n     LOCK(cs_vOneShots);\n@@ -1632,8 +1654,8 @@ void ThreadMessageHandler()\n             // Send messages\n             {\n                 TRY_LOCK(pnode->cs_vSend, lockSend);\n-                if (lockSend)\n-                    SendMessages(pnode, pnode == pnodeTrickle);\n+                if (lockSend && fnSendMessages)\n+                    fnSendMessages(pnode, pnode == pnodeTrickle);\n             }\n             boost::this_thread::interruption_point();\n         }"
      },
      {
        "sha": "1c8c99aa3bc89a3d5b156356934d7f0e60f0fe32",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/663224c2324d64134f8587fe77d1d787c0353b20/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/663224c2324d64134f8587fe77d1d787c0353b20/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=663224c2324d64134f8587fe77d1d787c0353b20",
        "patch": "@@ -45,6 +45,17 @@ void StartNode(boost::thread_group& threadGroup);\n bool StopNode();\n void SocketSendData(CNode *pnode);\n \n+//\n+// Handlers that require registration\n+//\n+typedef bool (*ProcessMessagesHandler)(CNode* pfrom);\n+typedef bool (*SendMessagesHandler)(CNode* pto, bool fSendTrickle);\n+typedef void (*StartShutdownHandler)();\n+\n+void SetProcessMessagesHandler(ProcessMessagesHandler handler);\n+void SetSendMessagesHandler(SendMessagesHandler handler);\n+void SetStartShutdownHandler(StartShutdownHandler handler);\n+\n enum\n {\n     LOCAL_NONE,   // unknown"
      },
      {
        "sha": "1e22467a33b475e00ce405205e003a6188874dc3",
        "filename": "src/protocol.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/663224c2324d64134f8587fe77d1d787c0353b20/src/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/663224c2324d64134f8587fe77d1d787c0353b20/src/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.cpp?ref=663224c2324d64134f8587fe77d1d787c0353b20",
        "patch": "@@ -6,7 +6,6 @@\n #include \"protocol.h\"\n #include \"util.h\"\n #include \"netbase.h\"\n-#include \"main.h\"\n \n #ifndef WIN32\n # include <arpa/inet.h>"
      }
    ]
  },
  {
    "sha": "effc2770f50554416e7d7b27f5c5b5cef9489440",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZmZjMjc3MGY1MDU1NDQxNmU3ZDdiMjdmNWM1YjVjZWY5NDg5NDQw",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-01-08T11:02:51Z"
      },
      "committer": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-06-06T06:14:52Z"
      },
      "message": "Created core.h/core.cpp, added to makefiles. Started moving core structures from main to core beginning with COutPoint.",
      "tree": {
        "sha": "353bbbdc57b6d8fcb24b74b83945f031db842c32",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/353bbbdc57b6d8fcb24b74b83945f031db842c32"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/effc2770f50554416e7d7b27f5c5b5cef9489440",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/effc2770f50554416e7d7b27f5c5b5cef9489440",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/effc2770f50554416e7d7b27f5c5b5cef9489440",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/effc2770f50554416e7d7b27f5c5b5cef9489440/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "663224c2324d64134f8587fe77d1d787c0353b20",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/663224c2324d64134f8587fe77d1d787c0353b20",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/663224c2324d64134f8587fe77d1d787c0353b20"
      }
    ],
    "stats": {
      "total": 107,
      "additions": 66,
      "deletions": 41
    },
    "files": [
      {
        "sha": "526965d8677deaaccbf6ff631ba27834e6c0f740",
        "filename": "bitcoin-qt.pro",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/effc2770f50554416e7d7b27f5c5b5cef9489440/bitcoin-qt.pro",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/effc2770f50554416e7d7b27f5c5b5cef9489440/bitcoin-qt.pro",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/bitcoin-qt.pro?ref=effc2770f50554416e7d7b27f5c5b5cef9489440",
        "patch": "@@ -154,6 +154,7 @@ HEADERS += src/qt/bitcoingui.h \\\n     src/hash.h \\\n     src/uint256.h \\\n     src/serialize.h \\\n+    src/core.h \\\n     src/main.h \\\n     src/net.h \\\n     src/key.h \\\n@@ -234,6 +235,7 @@ SOURCES += src/qt/bitcoin.cpp \\\n     src/netbase.cpp \\\n     src/key.cpp \\\n     src/script.cpp \\\n+    src/core.cpp \\\n     src/main.cpp \\\n     src/init.cpp \\\n     src/net.cpp \\"
      },
      {
        "sha": "cb1053b69d0a15077bf71d460b05f45ea76aec24",
        "filename": "src/core.cpp",
        "status": "added",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/effc2770f50554416e7d7b27f5c5b5cef9489440/src/core.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/effc2770f50554416e7d7b27f5c5b5cef9489440/src/core.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core.cpp?ref=effc2770f50554416e7d7b27f5c5b5cef9489440",
        "patch": "@@ -0,0 +1,6 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2013 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"core.h\"\n\\ No newline at end of file"
      },
      {
        "sha": "77bd8472ed22867b6eec980a0a814c8391cd74f6",
        "filename": "src/core.h",
        "status": "added",
        "additions": 53,
        "deletions": 0,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/effc2770f50554416e7d7b27f5c5b5cef9489440/src/core.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/effc2770f50554416e7d7b27f5c5b5cef9489440/src/core.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core.h?ref=effc2770f50554416e7d7b27f5c5b5cef9489440",
        "patch": "@@ -0,0 +1,53 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2013 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#ifndef BITCOIN_CORE_H\n+#define BITCOIN_CORE_H\n+\n+#include \"uint256.h\"\n+#include \"serialize.h\"\n+#include \"util.h\"\n+\n+#include <stdio.h>\n+\n+/** An outpoint - a combination of a transaction hash and an index n into its vout */\n+class COutPoint\n+{\n+public:\n+    uint256 hash;\n+    unsigned int n;\n+\n+    COutPoint() { SetNull(); }\n+    COutPoint(uint256 hashIn, unsigned int nIn) { hash = hashIn; n = nIn; }\n+    IMPLEMENT_SERIALIZE( READWRITE(FLATDATA(*this)); )\n+    void SetNull() { hash = 0; n = (unsigned int) -1; }\n+    bool IsNull() const { return (hash == 0 && n == (unsigned int) -1); }\n+\n+    friend bool operator<(const COutPoint& a, const COutPoint& b)\n+    {\n+        return (a.hash < b.hash || (a.hash == b.hash && a.n < b.n));\n+    }\n+\n+    friend bool operator==(const COutPoint& a, const COutPoint& b)\n+    {\n+        return (a.hash == b.hash && a.n == b.n);\n+    }\n+\n+    friend bool operator!=(const COutPoint& a, const COutPoint& b)\n+    {\n+        return !(a == b);\n+    }\n+\n+    std::string ToString() const\n+    {\n+        return strprintf(\"COutPoint(%s, %u)\", hash.ToString().substr(0,10).c_str(), n);\n+    }\n+\n+    void print() const\n+    {\n+        printf(\"%s\\n\", ToString().c_str());\n+    }\n+};\n+\n+#endif\n\\ No newline at end of file"
      },
      {
        "sha": "099e436d9ef8ad6981c3f77fdd743fa3e481a7a7",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 41,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/effc2770f50554416e7d7b27f5c5b5cef9489440/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/effc2770f50554416e7d7b27f5c5b5cef9489440/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=effc2770f50554416e7d7b27f5c5b5cef9489440",
        "patch": "@@ -5,6 +5,7 @@\n #ifndef BITCOIN_MAIN_H\n #define BITCOIN_MAIN_H\n \n+#include \"core.h\"\n #include \"bignum.h\"\n #include \"sync.h\"\n #include \"net.h\"\n@@ -267,47 +268,6 @@ class CInPoint\n \n \n \n-/** An outpoint - a combination of a transaction hash and an index n into its vout */\n-class COutPoint\n-{\n-public:\n-    uint256 hash;\n-    unsigned int n;\n-\n-    COutPoint() { SetNull(); }\n-    COutPoint(uint256 hashIn, unsigned int nIn) { hash = hashIn; n = nIn; }\n-    IMPLEMENT_SERIALIZE( READWRITE(FLATDATA(*this)); )\n-    void SetNull() { hash = 0; n = (unsigned int) -1; }\n-    bool IsNull() const { return (hash == 0 && n == (unsigned int) -1); }\n-\n-    friend bool operator<(const COutPoint& a, const COutPoint& b)\n-    {\n-        return (a.hash < b.hash || (a.hash == b.hash && a.n < b.n));\n-    }\n-\n-    friend bool operator==(const COutPoint& a, const COutPoint& b)\n-    {\n-        return (a.hash == b.hash && a.n == b.n);\n-    }\n-\n-    friend bool operator!=(const COutPoint& a, const COutPoint& b)\n-    {\n-        return !(a == b);\n-    }\n-\n-    std::string ToString() const\n-    {\n-        return strprintf(\"COutPoint(%s, %u)\", hash.ToString().c_str(), n);\n-    }\n-\n-    void print() const\n-    {\n-        printf(\"%s\\n\", ToString().c_str());\n-    }\n-};\n-\n-\n-\n \n /** An input of a transaction.  It contains the location of the previous\n  * transaction's output that it claims and a signature that matches the"
      },
      {
        "sha": "9cfab5942a3ca309e334972b36dd57dbfce1bc72",
        "filename": "src/makefile.linux-mingw",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/effc2770f50554416e7d7b27f5c5b5cef9489440/src/makefile.linux-mingw",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/effc2770f50554416e7d7b27f5c5b5cef9489440/src/makefile.linux-mingw",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.linux-mingw?ref=effc2770f50554416e7d7b27f5c5b5cef9489440",
        "patch": "@@ -73,6 +73,7 @@ OBJS= \\\n     obj/init.o \\\n     obj/bitcoind.o \\\n     obj/keystore.o \\\n+    obj/core.o \\\n     obj/main.o \\\n     obj/net.o \\\n     obj/protocol.o \\"
      },
      {
        "sha": "33cc7e6b4a0145e4cb25ed3fbfa51fe2958159ec",
        "filename": "src/makefile.mingw",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/effc2770f50554416e7d7b27f5c5b5cef9489440/src/makefile.mingw",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/effc2770f50554416e7d7b27f5c5b5cef9489440/src/makefile.mingw",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.mingw?ref=effc2770f50554416e7d7b27f5c5b5cef9489440",
        "patch": "@@ -81,6 +81,7 @@ OBJS= \\\n     obj/init.o \\\n     obj/bitcoind.o \\\n     obj/keystore.o \\\n+    obj/core.o \\\n     obj/main.o \\\n     obj/net.o \\\n     obj/protocol.o \\"
      },
      {
        "sha": "bef0ef35182438100e7080620277daef2390ba25",
        "filename": "src/makefile.osx",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/effc2770f50554416e7d7b27f5c5b5cef9489440/src/makefile.osx",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/effc2770f50554416e7d7b27f5c5b5cef9489440/src/makefile.osx",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.osx?ref=effc2770f50554416e7d7b27f5c5b5cef9489440",
        "patch": "@@ -84,6 +84,7 @@ OBJS= \\\n     obj/init.o \\\n     obj/bitcoind.o \\\n     obj/keystore.o \\\n+    obj/core.o \\\n     obj/main.o \\\n     obj/net.o \\\n     obj/protocol.o \\"
      },
      {
        "sha": "a83bab104749a66e95fba79e949367e103b51317",
        "filename": "src/makefile.unix",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/effc2770f50554416e7d7b27f5c5b5cef9489440/src/makefile.unix",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/effc2770f50554416e7d7b27f5c5b5cef9489440/src/makefile.unix",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.unix?ref=effc2770f50554416e7d7b27f5c5b5cef9489440",
        "patch": "@@ -123,6 +123,7 @@ OBJS= \\\n     obj/init.o \\\n     obj/bitcoind.o \\\n     obj/keystore.o \\\n+    obj/core.o \\\n     obj/main.o \\\n     obj/net.o \\\n     obj/protocol.o \\"
      }
    ]
  },
  {
    "sha": "788536f1755c6a9ea81394a2199ca27c9e90944e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ODg1MzZmMTc1NWM2YTllYTgxMzk0YTIxOTljYTI3YzllOTA5NDRl",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-01-08T11:42:22Z"
      },
      "committer": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-06-06T06:15:19Z"
      },
      "message": "Moved CInPoint to core. Removed GetMinFee from CTransaction and made it a regular function in main.",
      "tree": {
        "sha": "42d681506aba9cd30c10e3f238d401526267f3ae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/42d681506aba9cd30c10e3f238d401526267f3ae"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/788536f1755c6a9ea81394a2199ca27c9e90944e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/788536f1755c6a9ea81394a2199ca27c9e90944e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/788536f1755c6a9ea81394a2199ca27c9e90944e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/788536f1755c6a9ea81394a2199ca27c9e90944e/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "effc2770f50554416e7d7b27f5c5b5cef9489440",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/effc2770f50554416e7d7b27f5c5b5cef9489440",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/effc2770f50554416e7d7b27f5c5b5cef9489440"
      }
    ],
    "stats": {
      "total": 46,
      "additions": 23,
      "deletions": 23
    },
    "files": [
      {
        "sha": "bd1ddbf5a47b24cc3a9bb2b1131df11c4db842b4",
        "filename": "src/core.h",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/788536f1755c6a9ea81394a2199ca27c9e90944e/src/core.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/788536f1755c6a9ea81394a2199ca27c9e90944e/src/core.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core.h?ref=788536f1755c6a9ea81394a2199ca27c9e90944e",
        "patch": "@@ -11,6 +11,8 @@\n \n #include <stdio.h>\n \n+class CTransaction;\n+\n /** An outpoint - a combination of a transaction hash and an index n into its vout */\n class COutPoint\n {\n@@ -50,4 +52,17 @@ class COutPoint\n     }\n };\n \n+/** An inpoint - a combination of a transaction and an index n into its vin */\n+class CInPoint\n+{\n+public:\n+    CTransaction* ptx;\n+    unsigned int n;\n+\n+    CInPoint() { SetNull(); }\n+    CInPoint(CTransaction* ptxIn, unsigned int nIn) { ptx = ptxIn; n = nIn; }\n+    void SetNull() { ptx = NULL; n = (unsigned int) -1; }\n+    bool IsNull() const { return (ptx == NULL && n == (unsigned int) -1); }\n+};\n+\n #endif\n\\ No newline at end of file"
      },
      {
        "sha": "5a1345d414e476e2d59f8c911f15ac3490d459c1",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/788536f1755c6a9ea81394a2199ca27c9e90944e/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/788536f1755c6a9ea81394a2199ca27c9e90944e/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=788536f1755c6a9ea81394a2199ca27c9e90944e",
        "patch": "@@ -591,13 +591,12 @@ bool CTransaction::CheckTransaction(CValidationState &state) const\n     return true;\n }\n \n-int64 CTransaction::GetMinFee(unsigned int nBlockSize, bool fAllowFree,\n-                              enum GetMinFee_mode mode) const\n+int64 GetMinFee(const CTransaction& tx, unsigned int nBlockSize, bool fAllowFree, enum GetMinFee_mode mode)\n {\n     // Base fee is either nMinTxFee or nMinRelayTxFee\n-    int64 nBaseFee = (mode == GMF_RELAY) ? nMinRelayTxFee : nMinTxFee;\n+    int64 nBaseFee = (mode == GMF_RELAY) ? tx.nMinRelayTxFee : tx.nMinTxFee;\n \n-    unsigned int nBytes = ::GetSerializeSize(*this, SER_NETWORK, PROTOCOL_VERSION);\n+    unsigned int nBytes = ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n     unsigned int nNewBlockSize = nBlockSize + nBytes;\n     int64 nMinFee = (1 + (int64)nBytes / 1000) * nBaseFee;\n \n@@ -621,7 +620,7 @@ int64 CTransaction::GetMinFee(unsigned int nBlockSize, bool fAllowFree,\n     // To limit dust spam, require base fee if any output is less than 0.01\n     if (nMinFee < nBaseFee)\n     {\n-        BOOST_FOREACH(const CTxOut& txout, vout)\n+        BOOST_FOREACH(const CTxOut& txout, tx.vout)\n             if (txout.nValue < CENT)\n                 nMinFee = nBaseFee;\n     }\n@@ -757,7 +756,7 @@ bool CTxMemPool::accept(CValidationState &state, CTransaction &tx, bool fCheckIn\n         unsigned int nSize = ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n \n         // Don't accept it if it can't get into a block\n-        int64 txMinFee = tx.GetMinFee(1000, true, GMF_RELAY);\n+        int64 txMinFee = GetMinFee(tx, 1000, true, GMF_RELAY);\n         if (fLimitFree && nFees < txMinFee)\n             return error(\"CTxMemPool::accept() : not enough fees %s, %\"PRI64d\" < %\"PRI64d,\n                          hash.ToString().c_str(),"
      },
      {
        "sha": "c3c7ee396669e81ad7d883bfdb10e1b199a4e4ff",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 2,
        "deletions": 16,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/788536f1755c6a9ea81394a2199ca27c9e90944e/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/788536f1755c6a9ea81394a2199ca27c9e90944e/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=788536f1755c6a9ea81394a2199ca27c9e90944e",
        "patch": "@@ -253,20 +253,6 @@ struct CDiskTxPos : public CDiskBlockPos\n };\n \n \n-/** An inpoint - a combination of a transaction and an index n into its vin */\n-class CInPoint\n-{\n-public:\n-    CTransaction* ptx;\n-    unsigned int n;\n-\n-    CInPoint() { SetNull(); }\n-    CInPoint(CTransaction* ptxIn, unsigned int nIn) { ptx = ptxIn; n = nIn; }\n-    void SetNull() { ptx = NULL; n = (unsigned int) -1; }\n-    bool IsNull() const { return (ptx == NULL && n == (unsigned int) -1); }\n-};\n-\n-\n \n \n /** An input of a transaction.  It contains the location of the previous\n@@ -424,6 +410,8 @@ enum GetMinFee_mode\n     GMF_SEND,\n };\n \n+int64 GetMinFee(const CTransaction& tx, unsigned int nBlockSize = 1, bool fAllowFree = true, enum GetMinFee_mode mode = GMF_BLOCK);\n+\n /** The basic transaction that is broadcasted on the network and contained in\n  * blocks. A transaction can contain multiple inputs and outputs.\n  */\n@@ -575,8 +563,6 @@ class CTransaction\n         return dPriority > COIN * 144 / 250;\n     }\n \n-    int64 GetMinFee(unsigned int nBlockSize=1, bool fAllowFree=true, enum GetMinFee_mode mode=GMF_BLOCK) const;\n-\n     friend bool operator==(const CTransaction& a, const CTransaction& b)\n     {\n         return (a.nVersion  == b.nVersion &&"
      },
      {
        "sha": "da75752bb413c98f2f2f99bc0588cece83c43c35",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/788536f1755c6a9ea81394a2199ca27c9e90944e/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/788536f1755c6a9ea81394a2199ca27c9e90944e/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=788536f1755c6a9ea81394a2199ca27c9e90944e",
        "patch": "@@ -1277,7 +1277,7 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, int64> >& vecSend,\n                 // Check that enough fee is included\n                 int64 nPayFee = nTransactionFee * (1 + (int64)nBytes / 1000);\n                 bool fAllowFree = CTransaction::AllowFree(dPriority);\n-                int64 nMinFee = wtxNew.GetMinFee(1, fAllowFree, GMF_SEND);\n+                int64 nMinFee = GetMinFee(wtxNew, 1, fAllowFree, GMF_SEND);\n                 if (nFeeRet < max(nPayFee, nMinFee))\n                 {\n                     nFeeRet = max(nPayFee, nMinFee);"
      }
    ]
  },
  {
    "sha": "05df3fc68d68e87415ed9e534db3ea3160dc3092",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNWRmM2ZjNjhkNjhlODc0MTVlZDllNTM0ZGIzZWEzMTYwZGMzMDky",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-01-08T12:17:15Z"
      },
      "committer": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-06-06T06:15:20Z"
      },
      "message": "Removed AcceptToMemoryPool method from CTransaction. This method belongs to the mempool instance.\n\nRemoved AreInputsStandard from CTransaction, made it a regular function in main.\nMoved CTransaction::GetOutputFor to CCoinsViewCache.\n\nMoved GetLegacySigOpCount and GetP2SHSigOpCount out of CTransaction into regular functions in main.\n\nMoved GetValueIn and HaveInputs from CTransaction into CCoinsViewCache.\n\nMoved AllowFree, ClientCheckInputs, CheckInputs, UpdateCoins, and CheckTransaction out of CTransaction and into main.\n\nMoved IsStandard and IsFinal out of CTransaction and put them in main as IsStandardTx and IsFinalTx. Moved GetValueOut out of CTransaction into main. Moved CTxIn, CTxOut, and CTransaction into core.\n\nAdded minimum fee parameter to CTxOut::IsDust() temporarily until CTransaction is moved to core.h so that CTxOut needn't know about CTransaction.",
      "tree": {
        "sha": "50e1da470312d2300da4a1ec0ae2c1941f681b29",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/50e1da470312d2300da4a1ec0ae2c1941f681b29"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/05df3fc68d68e87415ed9e534db3ea3160dc3092",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/05df3fc68d68e87415ed9e534db3ea3160dc3092",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/05df3fc68d68e87415ed9e534db3ea3160dc3092",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/05df3fc68d68e87415ed9e534db3ea3160dc3092/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "788536f1755c6a9ea81394a2199ca27c9e90944e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/788536f1755c6a9ea81394a2199ca27c9e90944e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/788536f1755c6a9ea81394a2199ca27c9e90944e"
      }
    ],
    "stats": {
      "total": 1051,
      "additions": 527,
      "deletions": 524
    },
    "files": [
      {
        "sha": "b12c90efe815c00cdd4480d9a01f2610a0bc9dd7",
        "filename": "src/core.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05df3fc68d68e87415ed9e534db3ea3160dc3092/src/core.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05df3fc68d68e87415ed9e534db3ea3160dc3092/src/core.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core.cpp?ref=05df3fc68d68e87415ed9e534db3ea3160dc3092",
        "patch": "@@ -3,4 +3,5 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"core.h\"\n\\ No newline at end of file\n+#include \"core.h\"\n+"
      },
      {
        "sha": "21ca6618a2452c3bdcffbc2db6ef13b97784e109",
        "filename": "src/core.h",
        "status": "modified",
        "additions": 276,
        "deletions": 1,
        "changes": 277,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05df3fc68d68e87415ed9e534db3ea3160dc3092/src/core.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05df3fc68d68e87415ed9e534db3ea3160dc3092/src/core.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core.h?ref=05df3fc68d68e87415ed9e534db3ea3160dc3092",
        "patch": "@@ -8,6 +8,7 @@\n #include \"uint256.h\"\n #include \"serialize.h\"\n #include \"util.h\"\n+#include \"script.h\"\n \n #include <stdio.h>\n \n@@ -65,4 +66,278 @@ class CInPoint\n     bool IsNull() const { return (ptx == NULL && n == (unsigned int) -1); }\n };\n \n-#endif\n\\ No newline at end of file\n+/** An input of a transaction.  It contains the location of the previous\n+ * transaction's output that it claims and a signature that matches the\n+ * output's public key.\n+ */\n+class CTxIn\n+{\n+public:\n+    COutPoint prevout;\n+    CScript scriptSig;\n+    unsigned int nSequence;\n+\n+    CTxIn()\n+    {\n+        nSequence = std::numeric_limits<unsigned int>::max();\n+    }\n+\n+    explicit CTxIn(COutPoint prevoutIn, CScript scriptSigIn=CScript(), unsigned int nSequenceIn=std::numeric_limits<unsigned int>::max())\n+    {\n+        prevout = prevoutIn;\n+        scriptSig = scriptSigIn;\n+        nSequence = nSequenceIn;\n+    }\n+\n+    CTxIn(uint256 hashPrevTx, unsigned int nOut, CScript scriptSigIn=CScript(), unsigned int nSequenceIn=std::numeric_limits<unsigned int>::max())\n+    {\n+        prevout = COutPoint(hashPrevTx, nOut);\n+        scriptSig = scriptSigIn;\n+        nSequence = nSequenceIn;\n+    }\n+\n+    IMPLEMENT_SERIALIZE\n+    (\n+        READWRITE(prevout);\n+        READWRITE(scriptSig);\n+        READWRITE(nSequence);\n+    )\n+\n+    bool IsFinal() const\n+    {\n+        return (nSequence == std::numeric_limits<unsigned int>::max());\n+    }\n+\n+    friend bool operator==(const CTxIn& a, const CTxIn& b)\n+    {\n+        return (a.prevout   == b.prevout &&\n+                a.scriptSig == b.scriptSig &&\n+                a.nSequence == b.nSequence);\n+    }\n+\n+    friend bool operator!=(const CTxIn& a, const CTxIn& b)\n+    {\n+        return !(a == b);\n+    }\n+\n+    std::string ToString() const\n+    {\n+        std::string str;\n+        str += \"CTxIn(\";\n+        str += prevout.ToString();\n+        if (prevout.IsNull())\n+            str += strprintf(\", coinbase %s\", HexStr(scriptSig).c_str());\n+        else\n+            str += strprintf(\", scriptSig=%s\", scriptSig.ToString().substr(0,24).c_str());\n+        if (nSequence != std::numeric_limits<unsigned int>::max())\n+            str += strprintf(\", nSequence=%u\", nSequence);\n+        str += \")\";\n+        return str;\n+    }\n+\n+    void print() const\n+    {\n+        printf(\"%s\\n\", ToString().c_str());\n+    }\n+};\n+\n+\n+\n+\n+/** An output of a transaction.  It contains the public key that the next input\n+ * must be able to sign with to claim it.\n+ */\n+class CTxOut\n+{\n+public:\n+    int64 nValue;\n+    CScript scriptPubKey;\n+\n+    CTxOut()\n+    {\n+        SetNull();\n+    }\n+\n+    CTxOut(int64 nValueIn, CScript scriptPubKeyIn)\n+    {\n+        nValue = nValueIn;\n+        scriptPubKey = scriptPubKeyIn;\n+    }\n+\n+    IMPLEMENT_SERIALIZE\n+    (\n+        READWRITE(nValue);\n+        READWRITE(scriptPubKey);\n+    )\n+\n+    void SetNull()\n+    {\n+        nValue = -1;\n+        scriptPubKey.clear();\n+    }\n+\n+    bool IsNull() const\n+    {\n+        return (nValue == -1);\n+    }\n+\n+    uint256 GetHash() const\n+    {\n+        return SerializeHash(*this);\n+    }\n+\n+    bool IsDust(int64 nMinRelayTxFee) const\n+    {\n+        // \"Dust\" is defined in terms of CTransaction::nMinRelayTxFee,\n+        // which has units satoshis-per-kilobyte.\n+        // If you'd pay more than 1/3 in fees\n+        // to spend something, then we consider it dust.\n+        // A typical txout is 33 bytes big, and will\n+        // need a CTxIn of at least 148 bytes to spend,\n+        // so dust is a txout less than 54 uBTC\n+        // (5430 satoshis) with default nMinRelayTxFee\n+        return ((nValue*1000)/(3*((int)GetSerializeSize(SER_DISK,0)+148)) < nMinRelayTxFee);\n+    }\n+\n+    friend bool operator==(const CTxOut& a, const CTxOut& b)\n+    {\n+        return (a.nValue       == b.nValue &&\n+                a.scriptPubKey == b.scriptPubKey);\n+    }\n+\n+    friend bool operator!=(const CTxOut& a, const CTxOut& b)\n+    {\n+        return !(a == b);\n+    }\n+\n+    std::string ToString() const\n+    {\n+        if (scriptPubKey.size() < 6)\n+            return \"CTxOut(error)\";\n+        return strprintf(\"CTxOut(nValue=%\"PRI64d\".%08\"PRI64d\", scriptPubKey=%s)\", nValue / COIN, nValue % COIN, scriptPubKey.ToString().substr(0,30).c_str());\n+    }\n+\n+    void print() const\n+    {\n+        printf(\"%s\\n\", ToString().c_str());\n+    }\n+};\n+\n+\n+/** The basic transaction that is broadcasted on the network and contained in\n+ * blocks.  A transaction can contain multiple inputs and outputs.\n+ */\n+class CTransaction\n+{\n+public:\n+    static int64 nMinTxFee;\n+    static int64 nMinRelayTxFee;\n+    static const int CURRENT_VERSION=1;\n+    int nVersion;\n+    std::vector<CTxIn> vin;\n+    std::vector<CTxOut> vout;\n+    unsigned int nLockTime;\n+\n+    CTransaction()\n+    {\n+        SetNull();\n+    }\n+\n+    IMPLEMENT_SERIALIZE\n+    (\n+        READWRITE(this->nVersion);\n+        nVersion = this->nVersion;\n+        READWRITE(vin);\n+        READWRITE(vout);\n+        READWRITE(nLockTime);\n+    )\n+\n+    void SetNull()\n+    {\n+        nVersion = CTransaction::CURRENT_VERSION;\n+        vin.clear();\n+        vout.clear();\n+        nLockTime = 0;\n+    }\n+\n+    bool IsNull() const\n+    {\n+        return (vin.empty() && vout.empty());\n+    }\n+\n+    uint256 GetHash() const\n+    {\n+        return SerializeHash(*this);\n+    }\n+\n+    bool IsNewerThan(const CTransaction& old) const\n+    {\n+        if (vin.size() != old.vin.size())\n+            return false;\n+        for (unsigned int i = 0; i < vin.size(); i++)\n+            if (vin[i].prevout != old.vin[i].prevout)\n+                return false;\n+\n+        bool fNewer = false;\n+        unsigned int nLowest = std::numeric_limits<unsigned int>::max();\n+        for (unsigned int i = 0; i < vin.size(); i++)\n+        {\n+            if (vin[i].nSequence != old.vin[i].nSequence)\n+            {\n+                if (vin[i].nSequence <= nLowest)\n+                {\n+                    fNewer = false;\n+                    nLowest = vin[i].nSequence;\n+                }\n+                if (old.vin[i].nSequence < nLowest)\n+                {\n+                    fNewer = true;\n+                    nLowest = old.vin[i].nSequence;\n+                }\n+            }\n+        }\n+        return fNewer;\n+    }\n+\n+    bool IsCoinBase() const\n+    {\n+        return (vin.size() == 1 && vin[0].prevout.IsNull());\n+    }\n+\n+    friend bool operator==(const CTransaction& a, const CTransaction& b)\n+    {\n+        return (a.nVersion  == b.nVersion &&\n+                a.vin       == b.vin &&\n+                a.vout      == b.vout &&\n+                a.nLockTime == b.nLockTime);\n+    }\n+\n+    friend bool operator!=(const CTransaction& a, const CTransaction& b)\n+    {\n+        return !(a == b);\n+    }\n+\n+\n+    std::string ToString() const\n+    {\n+        std::string str;\n+        str += strprintf(\"CTransaction(hash=%s, ver=%d, vin.size=%\"PRIszu\", vout.size=%\"PRIszu\", nLockTime=%u)\\n\",\n+            GetHash().ToString().substr(0,10).c_str(),\n+            nVersion,\n+            vin.size(),\n+            vout.size(),\n+            nLockTime);\n+        for (unsigned int i = 0; i < vin.size(); i++)\n+            str += \"    \" + vin[i].ToString() + \"\\n\";\n+        for (unsigned int i = 0; i < vout.size(); i++)\n+            str += \"    \" + vout[i].ToString() + \"\\n\";\n+        return str;\n+    }\n+\n+    void print() const\n+    {\n+        printf(\"%s\", ToString().c_str());\n+    }\n+};\n+\n+#endif"
      },
      {
        "sha": "a1dbfd2a5f738f1cac398684628d847d5e72e25d",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05df3fc68d68e87415ed9e534db3ea3160dc3092/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05df3fc68d68e87415ed9e534db3ea3160dc3092/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=05df3fc68d68e87415ed9e534db3ea3160dc3092",
        "patch": "@@ -5,6 +5,7 @@\n \n #include \"init.h\"\n #include \"main.h\"\n+#include \"core.h\"\n #include \"txdb.h\"\n #include \"walletdb.h\"\n #include \"bitcoinrpc.h\""
      },
      {
        "sha": "28b32101d38e17d758433fd21f1639114e4ee42d",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 140,
        "deletions": 136,
        "changes": 276,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05df3fc68d68e87415ed9e534db3ea3160dc3092/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05df3fc68d68e87415ed9e534db3ea3160dc3092/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=05df3fc68d68e87415ed9e534db3ea3160dc3092",
        "patch": "@@ -357,41 +357,23 @@ unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans)\n \n \n \n-//////////////////////////////////////////////////////////////////////////////\n-//\n-// CTransaction / CTxOut\n-//\n-\n-bool CTxOut::IsDust() const\n+bool IsStandardTx(const CTransaction& tx)\n {\n-    // \"Dust\" is defined in terms of CTransaction::nMinRelayTxFee,\n-    // which has units satoshis-per-kilobyte.\n-    // If you'd pay more than 1/3 in fees\n-    // to spend something, then we consider it dust.\n-    // A typical txout is 33 bytes big, and will\n-    // need a CTxIn of at least 148 bytes to spend,\n-    // so dust is a txout less than 54 uBTC\n-    // (5430 satoshis) with default nMinRelayTxFee\n-    return ((nValue*1000)/(3*((int)GetSerializeSize(SER_DISK,0)+148)) < CTransaction::nMinRelayTxFee);\n-}\n-\n-bool CTransaction::IsStandard() const\n-{\n-    if (nVersion > CTransaction::CURRENT_VERSION)\n+    if (tx.nVersion > CTransaction::CURRENT_VERSION)\n         return false;\n \n-    if (!IsFinal())\n+    if (!IsFinalTx(tx))\n         return false;\n \n     // Extremely large transactions with lots of inputs can cost the network\n     // almost as much to process as they cost the sender in fees, because\n     // computing signature hashes is O(ninputs*txsize). Limiting transactions\n     // to MAX_STANDARD_TX_SIZE mitigates CPU exhaustion attacks.\n-    unsigned int sz = this->GetSerializeSize(SER_NETWORK, CTransaction::CURRENT_VERSION);\n+    unsigned int sz = tx.GetSerializeSize(SER_NETWORK, CTransaction::CURRENT_VERSION);\n     if (sz >= MAX_STANDARD_TX_SIZE)\n         return false;\n \n-    BOOST_FOREACH(const CTxIn& txin, vin)\n+    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n     {\n         // Biggest 'standard' txin is a 3-signature 3-of-3 CHECKMULTISIG\n         // pay-to-script-hash, which is 3 ~80-byte signatures, 3\n@@ -401,15 +383,47 @@ bool CTransaction::IsStandard() const\n         if (!txin.scriptSig.IsPushOnly())\n             return false;\n     }\n-    BOOST_FOREACH(const CTxOut& txout, vout) {\n+    BOOST_FOREACH(const CTxOut& txout, tx.vout) {\n         if (!::IsStandard(txout.scriptPubKey))\n             return false;\n-        if (txout.IsDust())\n+        if (txout.IsDust(CTransaction::nMinRelayTxFee))\n             return false;\n     }\n     return true;\n }\n \n+bool IsFinalTx(const CTransaction &tx, int nBlockHeight, int64 nBlockTime)\n+{\n+    // Time based nLockTime implemented in 0.1.6\n+    if (tx.nLockTime == 0)\n+        return true;\n+    if (nBlockHeight == 0)\n+        nBlockHeight = nBestHeight;\n+    if (nBlockTime == 0)\n+        nBlockTime = GetAdjustedTime();\n+    if ((int64)tx.nLockTime < ((int64)tx.nLockTime < LOCKTIME_THRESHOLD ? (int64)nBlockHeight : nBlockTime))\n+        return true;\n+    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+        if (!txin.IsFinal())\n+            return false;\n+    return true;\n+}\n+\n+/** Amount of bitcoins spent by the transaction.\n+    @return sum of all outputs (note: does not include fees)\n+ */\n+int64 GetValueOut(const CTransaction& tx)\n+{\n+    int64 nValueOut = 0;\n+    BOOST_FOREACH(const CTxOut& txout, tx.vout)\n+    {\n+        nValueOut += txout.nValue;\n+        if (!MoneyRange(txout.nValue) || !MoneyRange(nValueOut))\n+            throw std::runtime_error(\"GetValueOut() : value out of range\");\n+    }\n+    return nValueOut;\n+}\n+\n //\n // Check transaction inputs, and make sure any\n // pay-to-script-hash transactions are evaluating IsStandard scripts\n@@ -421,14 +435,14 @@ bool CTransaction::IsStandard() const\n // expensive-to-check-upon-redemption script like:\n //   DUP CHECKSIG DROP ... repeated 100 times... OP_1\n //\n-bool CTransaction::AreInputsStandard(CCoinsViewCache& mapInputs) const\n+bool AreInputsStandard(const CTransaction& tx, CCoinsViewCache& mapInputs)\n {\n-    if (IsCoinBase())\n+    if (tx.IsCoinBase())\n         return true; // Coinbases don't use vin normally\n \n-    for (unsigned int i = 0; i < vin.size(); i++)\n+    for (unsigned int i = 0; i < tx.vin.size(); i++)\n     {\n-        const CTxOut& prev = GetOutputFor(vin[i], mapInputs);\n+        const CTxOut& prev = mapInputs.GetOutputFor(tx.vin[i]);\n \n         vector<vector<unsigned char> > vSolutions;\n         txnouttype whichType;\n@@ -446,7 +460,7 @@ bool CTransaction::AreInputsStandard(CCoinsViewCache& mapInputs) const\n         // beside \"push data\" in the scriptSig the\n         // IsStandard() call returns false\n         vector<vector<unsigned char> > stack;\n-        if (!EvalScript(stack, vin[i].scriptSig, *this, i, false, 0))\n+        if (!EvalScript(stack, tx.vin[i].scriptSig, tx, i, false, 0))\n             return false;\n \n         if (whichType == TX_SCRIPTHASH)\n@@ -475,20 +489,34 @@ bool CTransaction::AreInputsStandard(CCoinsViewCache& mapInputs) const\n     return true;\n }\n \n-unsigned int CTransaction::GetLegacySigOpCount() const\n+unsigned int GetLegacySigOpCount(const CTransaction& tx)\n {\n     unsigned int nSigOps = 0;\n-    BOOST_FOREACH(const CTxIn& txin, vin)\n+    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n     {\n         nSigOps += txin.scriptSig.GetSigOpCount(false);\n     }\n-    BOOST_FOREACH(const CTxOut& txout, vout)\n+    BOOST_FOREACH(const CTxOut& txout, tx.vout)\n     {\n         nSigOps += txout.scriptPubKey.GetSigOpCount(false);\n     }\n     return nSigOps;\n }\n \n+unsigned int GetP2SHSigOpCount(const CTransaction& tx, CCoinsViewCache& inputs)\n+{\n+    if (tx.IsCoinBase())\n+        return 0;\n+\n+    unsigned int nSigOps = 0;\n+    for (unsigned int i = 0; i < tx.vin.size(); i++)\n+    {\n+        const CTxOut &prevout = inputs.GetOutputFor(tx.vin[i]);\n+        if (prevout.scriptPubKey.IsPayToScriptHash())\n+            nSigOps += prevout.scriptPubKey.GetSigOpCount(tx.vin[i].scriptSig);\n+    }\n+    return nSigOps;\n+}\n \n int CMerkleTx::SetMerkleBranch(const CBlock* pblock)\n {\n@@ -543,49 +571,49 @@ int CMerkleTx::SetMerkleBranch(const CBlock* pblock)\n \n \n \n-bool CTransaction::CheckTransaction(CValidationState &state) const\n+bool CheckTransaction(const CTransaction& tx, CValidationState &state)\n {\n     // Basic checks that don't depend on any context\n-    if (vin.empty())\n-        return state.DoS(10, error(\"CTransaction::CheckTransaction() : vin empty\"));\n-    if (vout.empty())\n-        return state.DoS(10, error(\"CTransaction::CheckTransaction() : vout empty\"));\n+    if (tx.vin.empty())\n+        return state.DoS(10, error(\"CheckTransaction() : vin empty\"));\n+    if (tx.vout.empty())\n+        return state.DoS(10, error(\"CheckTransaction() : vout empty\"));\n     // Size limits\n-    if (::GetSerializeSize(*this, SER_NETWORK, PROTOCOL_VERSION) > MAX_BLOCK_SIZE)\n+    if (::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION) > MAX_BLOCK_SIZE)\n         return state.DoS(100, error(\"CTransaction::CheckTransaction() : size limits failed\"));\n \n     // Check for negative or overflow output values\n     int64 nValueOut = 0;\n-    BOOST_FOREACH(const CTxOut& txout, vout)\n+    BOOST_FOREACH(const CTxOut& txout, tx.vout)\n     {\n         if (txout.nValue < 0)\n-            return state.DoS(100, error(\"CTransaction::CheckTransaction() : txout.nValue negative\"));\n+            return state.DoS(100, error(\"CheckTransaction() : txout.nValue negative\"));\n         if (txout.nValue > MAX_MONEY)\n-            return state.DoS(100, error(\"CTransaction::CheckTransaction() : txout.nValue too high\"));\n+            return state.DoS(100, error(\"CheckTransaction() : txout.nValue too high\"));\n         nValueOut += txout.nValue;\n         if (!MoneyRange(nValueOut))\n             return state.DoS(100, error(\"CTransaction::CheckTransaction() : txout total out of range\"));\n     }\n \n     // Check for duplicate inputs\n     set<COutPoint> vInOutPoints;\n-    BOOST_FOREACH(const CTxIn& txin, vin)\n+    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n     {\n         if (vInOutPoints.count(txin.prevout))\n             return state.DoS(100, error(\"CTransaction::CheckTransaction() : duplicate inputs\"));\n         vInOutPoints.insert(txin.prevout);\n     }\n \n-    if (IsCoinBase())\n+    if (tx.IsCoinBase())\n     {\n-        if (vin[0].scriptSig.size() < 2 || vin[0].scriptSig.size() > 100)\n-            return state.DoS(100, error(\"CTransaction::CheckTransaction() : coinbase script size\"));\n+        if (tx.vin[0].scriptSig.size() < 2 || tx.vin[0].scriptSig.size() > 100)\n+            return state.DoS(100, error(\"CheckTransaction() : coinbase script size\"));\n     }\n     else\n     {\n-        BOOST_FOREACH(const CTxIn& txin, vin)\n+        BOOST_FOREACH(const CTxIn& txin, tx.vin)\n             if (txin.prevout.IsNull())\n-                return state.DoS(10, error(\"CTransaction::CheckTransaction() : prevout is null\"));\n+                return state.DoS(10, error(\"CheckTransaction() : prevout is null\"));\n     }\n \n     return true;\n@@ -657,7 +685,7 @@ bool CTxMemPool::accept(CValidationState &state, CTransaction &tx, bool fCheckIn\n     if (pfMissingInputs)\n         *pfMissingInputs = false;\n \n-    if (!tx.CheckTransaction(state))\n+    if (!CheckTransaction(tx, state))\n         return error(\"CTxMemPool::accept() : CheckTransaction failed\");\n \n     // Coinbase is only valid in a block, not as a loose transaction\n@@ -669,7 +697,7 @@ bool CTxMemPool::accept(CValidationState &state, CTransaction &tx, bool fCheckIn\n         return error(\"CTxMemPool::accept() : not accepting nLockTime beyond 2038 yet\");\n \n     // Rather not work on nonstandard transactions (unless -testnet)\n-    if (!fTestNet && !tx.IsStandard())\n+    if (!fTestNet && !IsStandardTx(tx))\n         return error(\"CTxMemPool::accept() : nonstandard transaction type\");\n \n     // is it already in the memory pool?\n@@ -694,7 +722,7 @@ bool CTxMemPool::accept(CValidationState &state, CTransaction &tx, bool fCheckIn\n             if (i != 0)\n                 return false;\n             ptxOld = mapNextTx[outpoint].ptx;\n-            if (ptxOld->IsFinal())\n+            if (IsFinalTx(*ptxOld))\n                 return false;\n             if (!tx.IsNewerThan(*ptxOld))\n                 return false;\n@@ -734,7 +762,7 @@ bool CTxMemPool::accept(CValidationState &state, CTransaction &tx, bool fCheckIn\n         }\n \n         // are the actual inputs available?\n-        if (!tx.HaveInputs(view))\n+        if (!view.HaveInputs(tx))\n             return state.Invalid(error(\"CTxMemPool::accept() : inputs already spent\"));\n \n         // Bring the best block into scope\n@@ -745,14 +773,14 @@ bool CTxMemPool::accept(CValidationState &state, CTransaction &tx, bool fCheckIn\n         }\n \n         // Check for non-standard pay-to-script-hash in inputs\n-        if (!tx.AreInputsStandard(view) && !fTestNet)\n+        if (!AreInputsStandard(tx, view) && !fTestNet)\n             return error(\"CTxMemPool::accept() : nonstandard transaction input\");\n \n         // Note: if you modify this code to accept non-standard transactions, then\n         // you should add code here to check that the transaction does a\n         // reasonable number of ECDSA signature verifications.\n \n-        int64 nFees = tx.GetValueIn(view)-tx.GetValueOut();\n+        int64 nFees = view.GetValueIn(tx)-GetValueOut(tx);\n         unsigned int nSize = ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n \n         // Don't accept it if it can't get into a block\n@@ -787,7 +815,7 @@ bool CTxMemPool::accept(CValidationState &state, CTransaction &tx, bool fCheckIn\n \n         // Check against previous transactions\n         // This is done last to help prevent CPU exhaustion denial-of-service attacks.\n-        if (!tx.CheckInputs(state, view, true, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_STRICTENC))\n+        if (!CheckInputs(tx, state, view, true, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_STRICTENC))\n         {\n             return error(\"CTxMemPool::accept() : ConnectInputs failed %s\", hash.ToString().c_str());\n         }\n@@ -816,14 +844,6 @@ bool CTxMemPool::accept(CValidationState &state, CTransaction &tx, bool fCheckIn\n     return true;\n }\n \n-bool CTransaction::AcceptToMemoryPool(CValidationState &state, bool fCheckInputs, bool fLimitFree, bool* pfMissingInputs)\n-{\n-    try {\n-        return mempool.accept(state, *this, fCheckInputs, fLimitFree, pfMissingInputs);\n-    } catch(std::runtime_error &e) {\n-        return state.Abort(_(\"System error: \") + e.what());\n-    }\n-}\n \n bool CTxMemPool::addUnchecked(const uint256& hash, CTransaction &tx)\n {\n@@ -936,7 +956,7 @@ int CMerkleTx::GetBlocksToMaturity() const\n bool CMerkleTx::AcceptToMemoryPool(bool fCheckInputs, bool fLimitFree)\n {\n     CValidationState state;\n-    return CTransaction::AcceptToMemoryPool(state, fCheckInputs, fLimitFree);\n+    return mempool.accept(state, *this, fCheckInputs, fLimitFree, NULL);\n }\n \n \n@@ -1299,45 +1319,30 @@ void CBlockHeader::UpdateTime(const CBlockIndex* pindexPrev)\n \n \n \n-const CTxOut &CTransaction::GetOutputFor(const CTxIn& input, CCoinsViewCache& view)\n+const CTxOut &CCoinsViewCache::GetOutputFor(const CTxIn& input)\n {\n-    const CCoins &coins = view.GetCoins(input.prevout.hash);\n+    const CCoins &coins = GetCoins(input.prevout.hash);\n     assert(coins.IsAvailable(input.prevout.n));\n     return coins.vout[input.prevout.n];\n }\n \n-int64 CTransaction::GetValueIn(CCoinsViewCache& inputs) const\n+int64 CCoinsViewCache::GetValueIn(const CTransaction& tx)\n {\n-    if (IsCoinBase())\n+    if (tx.IsCoinBase())\n         return 0;\n \n     int64 nResult = 0;\n-    for (unsigned int i = 0; i < vin.size(); i++)\n-        nResult += GetOutputFor(vin[i], inputs).nValue;\n+    for (unsigned int i = 0; i < tx.vin.size(); i++)\n+        nResult += GetOutputFor(tx.vin[i]).nValue;\n \n     return nResult;\n }\n \n-unsigned int CTransaction::GetP2SHSigOpCount(CCoinsViewCache& inputs) const\n-{\n-    if (IsCoinBase())\n-        return 0;\n-\n-    unsigned int nSigOps = 0;\n-    for (unsigned int i = 0; i < vin.size(); i++)\n-    {\n-        const CTxOut &prevout = GetOutputFor(vin[i], inputs);\n-        if (prevout.scriptPubKey.IsPayToScriptHash())\n-            nSigOps += prevout.scriptPubKey.GetSigOpCount(vin[i].scriptSig);\n-    }\n-    return nSigOps;\n-}\n-\n-void CTransaction::UpdateCoins(CValidationState &state, CCoinsViewCache &inputs, CTxUndo &txundo, int nHeight, const uint256 &txhash) const\n+void UpdateCoins(const CTransaction& tx, CValidationState &state, CCoinsViewCache &inputs, CTxUndo &txundo, int nHeight, const uint256 &txhash)\n {\n     // mark inputs spent\n-    if (!IsCoinBase()) {\n-        BOOST_FOREACH(const CTxIn &txin, vin) {\n+    if (!tx.IsCoinBase()) {\n+        BOOST_FOREACH(const CTxIn &txin, tx.vin) {\n             CCoins &coins = inputs.GetCoins(txin.prevout.hash);\n             CTxInUndo undo;\n             assert(coins.Spend(txin.prevout, undo));\n@@ -1346,23 +1351,23 @@ void CTransaction::UpdateCoins(CValidationState &state, CCoinsViewCache &inputs,\n     }\n \n     // add outputs\n-    assert(inputs.SetCoins(txhash, CCoins(*this, nHeight)));\n+    assert(inputs.SetCoins(txhash, CCoins(tx, nHeight)));\n }\n \n-bool CTransaction::HaveInputs(CCoinsViewCache &inputs) const\n+bool CCoinsViewCache::HaveInputs(const CTransaction& tx)\n {\n-    if (!IsCoinBase()) {\n+    if (!tx.IsCoinBase()) {\n         // first check whether information about the prevout hash is available\n-        for (unsigned int i = 0; i < vin.size(); i++) {\n-            const COutPoint &prevout = vin[i].prevout;\n-            if (!inputs.HaveCoins(prevout.hash))\n+        for (unsigned int i = 0; i < tx.vin.size(); i++) {\n+            const COutPoint &prevout = tx.vin[i].prevout;\n+            if (!HaveCoins(prevout.hash))\n                 return false;\n         }\n \n         // then check whether the actual outputs are available\n-        for (unsigned int i = 0; i < vin.size(); i++) {\n-            const COutPoint &prevout = vin[i].prevout;\n-            const CCoins &coins = inputs.GetCoins(prevout.hash);\n+        for (unsigned int i = 0; i < tx.vin.size(); i++) {\n+            const COutPoint &prevout = tx.vin[i].prevout;\n+            const CCoins &coins = GetCoins(prevout.hash);\n             if (!coins.IsAvailable(prevout.n))\n                 return false;\n         }\n@@ -1382,26 +1387,26 @@ bool VerifySignature(const CCoins& txFrom, const CTransaction& txTo, unsigned in\n     return CScriptCheck(txFrom, txTo, nIn, flags, nHashType)();\n }\n \n-bool CTransaction::CheckInputs(CValidationState &state, CCoinsViewCache &inputs, bool fScriptChecks, unsigned int flags, std::vector<CScriptCheck> *pvChecks) const\n+bool CheckInputs(const CTransaction& tx, CValidationState &state, CCoinsViewCache &inputs, bool fScriptChecks, unsigned int flags, std::vector<CScriptCheck> *pvChecks)\n {\n-    if (!IsCoinBase())\n+    if (!tx.IsCoinBase())\n     {\n         if (pvChecks)\n-            pvChecks->reserve(vin.size());\n+            pvChecks->reserve(tx.vin.size());\n \n         // This doesn't trigger the DoS code on purpose; if it did, it would make it easier\n         // for an attacker to attempt to split the network.\n-        if (!HaveInputs(inputs))\n-            return state.Invalid(error(\"CheckInputs() : %s inputs unavailable\", GetHash().ToString().c_str()));\n+        if (!inputs.HaveInputs(tx))\n+            return state.Invalid(error(\"CheckInputs() : %s inputs unavailable\", tx.GetHash().ToString().c_str()));\n \n         // While checking, GetBestBlock() refers to the parent block.\n         // This is also true for mempool checks.\n         int nSpendHeight = inputs.GetBestBlock()->nHeight + 1;\n         int64 nValueIn = 0;\n         int64 nFees = 0;\n-        for (unsigned int i = 0; i < vin.size(); i++)\n+        for (unsigned int i = 0; i < tx.vin.size(); i++)\n         {\n-            const COutPoint &prevout = vin[i].prevout;\n+            const COutPoint &prevout = tx.vin[i].prevout;\n             const CCoins &coins = inputs.GetCoins(prevout.hash);\n \n             // If prev is coinbase, check that it's matured\n@@ -1417,13 +1422,13 @@ bool CTransaction::CheckInputs(CValidationState &state, CCoinsViewCache &inputs,\n \n         }\n \n-        if (nValueIn < GetValueOut())\n-            return state.DoS(100, error(\"CheckInputs() : %s value in < value out\", GetHash().ToString().c_str()));\n+        if (nValueIn < GetValueOut(tx))\n+            return state.DoS(100, error(\"CheckInputs() : %s value in < value out\", tx.GetHash().ToString().c_str()));\n \n         // Tally transaction fees\n-        int64 nTxFee = nValueIn - GetValueOut();\n+        int64 nTxFee = nValueIn - GetValueOut(tx);\n         if (nTxFee < 0)\n-            return state.DoS(100, error(\"CheckInputs() : %s nTxFee < 0\", GetHash().ToString().c_str()));\n+            return state.DoS(100, error(\"CheckInputs() : %s nTxFee < 0\", tx.GetHash().ToString().c_str()));\n         nFees += nTxFee;\n         if (!MoneyRange(nFees))\n             return state.DoS(100, error(\"CheckInputs() : nFees out of range\"));\n@@ -1436,20 +1441,20 @@ bool CTransaction::CheckInputs(CValidationState &state, CCoinsViewCache &inputs,\n         // before the last block chain checkpoint. This is safe because block merkle hashes are\n         // still computed and checked, and any change will be caught at the next checkpoint.\n         if (fScriptChecks) {\n-            for (unsigned int i = 0; i < vin.size(); i++) {\n-                const COutPoint &prevout = vin[i].prevout;\n+            for (unsigned int i = 0; i < tx.vin.size(); i++) {\n+                const COutPoint &prevout = tx.vin[i].prevout;\n                 const CCoins &coins = inputs.GetCoins(prevout.hash);\n \n                 // Verify signature\n-                CScriptCheck check(coins, *this, i, flags, 0);\n+                CScriptCheck check(coins, tx, i, flags, 0);\n                 if (pvChecks) {\n                     pvChecks->push_back(CScriptCheck());\n                     check.swap(pvChecks->back());\n                 } else if (!check()) {\n                     if (flags & SCRIPT_VERIFY_STRICTENC) {\n                         // For now, check whether the failure was caused by non-canonical\n                         // encodings or not; if so, don't trigger DoS protection.\n-                        CScriptCheck check(coins, *this, i, flags & (~SCRIPT_VERIFY_STRICTENC), 0);\n+                        CScriptCheck check(coins, tx, i, flags & (~SCRIPT_VERIFY_STRICTENC), 0);\n                         if (check())\n                             return state.Invalid();\n                     }\n@@ -1464,7 +1469,6 @@ bool CTransaction::CheckInputs(CValidationState &state, CCoinsViewCache &inputs,\n \n \n \n-\n bool CBlock::DisconnectBlock(CValidationState &state, CBlockIndex *pindex, CCoinsViewCache &view, bool *pfClean)\n {\n     assert(pindex == view.GetBestBlock());\n@@ -1644,35 +1648,35 @@ bool CBlock::ConnectBlock(CValidationState &state, CBlockIndex* pindex, CCoinsVi\n         const CTransaction &tx = vtx[i];\n \n         nInputs += tx.vin.size();\n-        nSigOps += tx.GetLegacySigOpCount();\n+        nSigOps += GetLegacySigOpCount(tx);\n         if (nSigOps > MAX_BLOCK_SIGOPS)\n             return state.DoS(100, error(\"ConnectBlock() : too many sigops\"));\n \n         if (!tx.IsCoinBase())\n         {\n-            if (!tx.HaveInputs(view))\n+            if (!view.HaveInputs(tx))\n                 return state.DoS(100, error(\"ConnectBlock() : inputs missing/spent\"));\n \n             if (fStrictPayToScriptHash)\n             {\n                 // Add in sigops done by pay-to-script-hash inputs;\n                 // this is to prevent a \"rogue miner\" from creating\n                 // an incredibly-expensive-to-validate block.\n-                nSigOps += tx.GetP2SHSigOpCount(view);\n+                nSigOps += GetP2SHSigOpCount(tx, view);\n                 if (nSigOps > MAX_BLOCK_SIGOPS)\n                      return state.DoS(100, error(\"ConnectBlock() : too many sigops\"));\n             }\n \n-            nFees += tx.GetValueIn(view)-tx.GetValueOut();\n+            nFees += view.GetValueIn(tx)-GetValueOut(tx);\n \n             std::vector<CScriptCheck> vChecks;\n-            if (!tx.CheckInputs(state, view, fScriptChecks, flags, nScriptCheckThreads ? &vChecks : NULL))\n+            if (!CheckInputs(tx, state, view, fScriptChecks, flags, nScriptCheckThreads ? &vChecks : NULL))\n                 return false;\n             control.Add(vChecks);\n         }\n \n         CTxUndo txundo;\n-        tx.UpdateCoins(state, view, txundo, pindex->nHeight, GetTxHash(i));\n+        UpdateCoins(tx, state, view, txundo, pindex->nHeight, GetTxHash(i));\n         if (!tx.IsCoinBase())\n             blockundo.vtxundo.push_back(txundo);\n \n@@ -1683,8 +1687,8 @@ bool CBlock::ConnectBlock(CValidationState &state, CBlockIndex* pindex, CCoinsVi\n     if (fBenchmark)\n         printf(\"- Connect %u transactions: %.2fms (%.3fms/tx, %.3fms/txin)\\n\", (unsigned)vtx.size(), 0.001 * nTime, 0.001 * nTime / vtx.size(), nInputs <= 1 ? 0 : 0.001 * nTime / (nInputs-1));\n \n-    if (vtx[0].GetValueOut() > GetBlockValue(pindex->nHeight, nFees))\n-        return state.DoS(100, error(\"ConnectBlock() : coinbase pays too much (actual=%\"PRI64d\" vs limit=%\"PRI64d\")\", vtx[0].GetValueOut(), GetBlockValue(pindex->nHeight, nFees)));\n+    if (GetValueOut(vtx[0]) > GetBlockValue(pindex->nHeight, nFees))\n+        return state.DoS(100, error(\"ConnectBlock() : coinbase pays too much (actual=%\"PRI64d\" vs limit=%\"PRI64d\")\", GetValueOut(vtx[0]), GetBlockValue(pindex->nHeight, nFees)));\n \n     if (!control.Wait())\n         return state.DoS(100, false);\n@@ -1846,7 +1850,7 @@ bool SetBestChain(CValidationState &state, CBlockIndex* pindexNew)\n     BOOST_FOREACH(CTransaction& tx, vResurrect) {\n         // ignore validation errors in resurrected transactions\n         CValidationState stateDummy;\n-        tx.AcceptToMemoryPool(stateDummy, true, false);\n+        mempool.accept(stateDummy, tx, true, false, NULL);\n     }\n \n     // Delete redundant memory transactions that are in the connected branch\n@@ -2076,7 +2080,7 @@ bool CBlock::CheckBlock(CValidationState &state, bool fCheckPOW, bool fCheckMerk\n \n     // Check transactions\n     BOOST_FOREACH(const CTransaction& tx, vtx)\n-        if (!tx.CheckTransaction(state))\n+        if (!CheckTransaction(tx, state))\n             return error(\"CheckBlock() : CheckTransaction failed\");\n \n     // Build the merkle tree already. We need it anyway later, and it makes the\n@@ -2096,7 +2100,7 @@ bool CBlock::CheckBlock(CValidationState &state, bool fCheckPOW, bool fCheckMerk\n     unsigned int nSigOps = 0;\n     BOOST_FOREACH(const CTransaction& tx, vtx)\n     {\n-        nSigOps += tx.GetLegacySigOpCount();\n+        nSigOps += GetLegacySigOpCount(tx);\n     }\n     if (nSigOps > MAX_BLOCK_SIGOPS)\n         return state.DoS(100, error(\"CheckBlock() : out-of-bounds SigOpCount\"));\n@@ -2135,7 +2139,7 @@ bool CBlock::AcceptBlock(CValidationState &state, CDiskBlockPos *dbp)\n \n         // Check that all transactions are finalized\n         BOOST_FOREACH(const CTransaction& tx, vtx)\n-            if (!tx.IsFinal(nHeight, GetBlockTime()))\n+            if (!IsFinalTx(tx, nHeight, GetBlockTime()))\n                 return state.DoS(10, error(\"AcceptBlock() : contains a non-final transaction\"));\n \n         // Check that the block chain matches the known block chain up to a checkpoint\n@@ -3488,7 +3492,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n \n         bool fMissingInputs = false;\n         CValidationState state;\n-        if (tx.AcceptToMemoryPool(state, true, true, &fMissingInputs))\n+        if (mempool.accept(state, tx, true, true, &fMissingInputs))\n         {\n             RelayTransaction(tx, inv.hash, vMsg);\n             mapAlreadyAskedFor.erase(inv);\n@@ -3511,7 +3515,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n                     // Use a dummy CValidationState so someone can't setup nodes to counter-DoS based on orphan resolution (that is, feeding people an invalid transaction based on LegitTxX in order to get anyone relaying LegitTxX banned)\n                     CValidationState stateDummy;\n \n-                    if (tx.AcceptToMemoryPool(stateDummy, true, true, &fMissingInputs2))\n+                    if (mempool.accept(stateDummy, tx, true, true, &fMissingInputs2))\n                     {\n                         printf(\"   accepted orphan tx %s\\n\", inv.hash.ToString().c_str());\n                         RelayTransaction(tx, inv.hash, vMsg);\n@@ -4194,7 +4198,7 @@ CBlockTemplate* CreateNewBlock(CReserveKey& reservekey)\n         for (map<uint256, CTransaction>::iterator mi = mempool.mapTx.begin(); mi != mempool.mapTx.end(); ++mi)\n         {\n             CTransaction& tx = (*mi).second;\n-            if (tx.IsCoinBase() || !tx.IsFinal())\n+            if (tx.IsCoinBase() || !IsFinalTx(tx))\n                 continue;\n \n             COrphan* porphan = NULL;\n@@ -4249,7 +4253,7 @@ CBlockTemplate* CreateNewBlock(CReserveKey& reservekey)\n             // This is a more accurate fee-per-kilobyte than is used by the client code, because the\n             // client code rounds up the size to the nearest 1K. That's good, because it gives an\n             // incentive to create smaller transactions.\n-            double dFeePerKb =  double(nTotalIn-tx.GetValueOut()) / (double(nTxSize)/1000.0);\n+            double dFeePerKb =  double(nTotalIn-GetValueOut(tx)) / (double(nTxSize)/1000.0);\n \n             if (porphan)\n             {\n@@ -4285,7 +4289,7 @@ CBlockTemplate* CreateNewBlock(CReserveKey& reservekey)\n                 continue;\n \n             // Legacy limits on sigOps:\n-            unsigned int nTxSigOps = tx.GetLegacySigOpCount();\n+            unsigned int nTxSigOps = GetLegacySigOpCount(tx);\n             if (nBlockSigOps + nTxSigOps >= MAX_BLOCK_SIGOPS)\n                 continue;\n \n@@ -4303,22 +4307,22 @@ CBlockTemplate* CreateNewBlock(CReserveKey& reservekey)\n                 std::make_heap(vecPriority.begin(), vecPriority.end(), comparer);\n             }\n \n-            if (!tx.HaveInputs(view))\n+            if (!view.HaveInputs(tx))\n                 continue;\n \n-            int64 nTxFees = tx.GetValueIn(view)-tx.GetValueOut();\n+            int64 nTxFees = view.GetValueIn(tx)-GetValueOut(tx);\n \n-            nTxSigOps += tx.GetP2SHSigOpCount(view);\n+            nTxSigOps += GetP2SHSigOpCount(tx, view);\n             if (nBlockSigOps + nTxSigOps >= MAX_BLOCK_SIGOPS)\n                 continue;\n \n             CValidationState state;\n-            if (!tx.CheckInputs(state, view, true, SCRIPT_VERIFY_P2SH))\n+            if (!CheckInputs(tx, state, view, true, SCRIPT_VERIFY_P2SH))\n                 continue;\n \n             CTxUndo txundo;\n             uint256 hash = tx.GetHash();\n-            tx.UpdateCoins(state, view, txundo, pindexPrev->nHeight+1, hash);\n+            UpdateCoins(tx, state, view, txundo, pindexPrev->nHeight+1, hash);\n \n             // Added\n             pblock->vtx.push_back(tx);\n@@ -4366,7 +4370,7 @@ CBlockTemplate* CreateNewBlock(CReserveKey& reservekey)\n         pblock->nBits          = GetNextWorkRequired(pindexPrev, pblock);\n         pblock->nNonce         = 0;\n         pblock->vtx[0].vin[0].scriptSig = CScript() << OP_0 << OP_0;\n-        pblocktemplate->vTxSigOps[0] = pblock->vtx[0].GetLegacySigOpCount();\n+        pblocktemplate->vTxSigOps[0] = GetLegacySigOpCount(pblock->vtx[0]);\n \n         CBlockIndex indexDummy(*pblock);\n         indexDummy.pprev = pindexPrev;"
      },
      {
        "sha": "7069d4bab3a557e08fcb31d7bea8239eed5ed520",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 64,
        "deletions": 342,
        "changes": 406,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05df3fc68d68e87415ed9e534db3ea3160dc3092/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05df3fc68d68e87415ed9e534db3ea3160dc3092/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=05df3fc68d68e87415ed9e534db3ea3160dc3092",
        "patch": "@@ -254,155 +254,6 @@ struct CDiskTxPos : public CDiskBlockPos\n \n \n \n-\n-/** An input of a transaction.  It contains the location of the previous\n- * transaction's output that it claims and a signature that matches the\n- * output's public key.\n- */\n-class CTxIn\n-{\n-public:\n-    COutPoint prevout;\n-    CScript scriptSig;\n-    unsigned int nSequence;\n-\n-    CTxIn()\n-    {\n-        nSequence = std::numeric_limits<unsigned int>::max();\n-    }\n-\n-    explicit CTxIn(COutPoint prevoutIn, CScript scriptSigIn=CScript(), unsigned int nSequenceIn=std::numeric_limits<unsigned int>::max())\n-    {\n-        prevout = prevoutIn;\n-        scriptSig = scriptSigIn;\n-        nSequence = nSequenceIn;\n-    }\n-\n-    CTxIn(uint256 hashPrevTx, unsigned int nOut, CScript scriptSigIn=CScript(), unsigned int nSequenceIn=std::numeric_limits<unsigned int>::max())\n-    {\n-        prevout = COutPoint(hashPrevTx, nOut);\n-        scriptSig = scriptSigIn;\n-        nSequence = nSequenceIn;\n-    }\n-\n-    IMPLEMENT_SERIALIZE\n-    (\n-        READWRITE(prevout);\n-        READWRITE(scriptSig);\n-        READWRITE(nSequence);\n-    )\n-\n-    bool IsFinal() const\n-    {\n-        return (nSequence == std::numeric_limits<unsigned int>::max());\n-    }\n-\n-    friend bool operator==(const CTxIn& a, const CTxIn& b)\n-    {\n-        return (a.prevout   == b.prevout &&\n-                a.scriptSig == b.scriptSig &&\n-                a.nSequence == b.nSequence);\n-    }\n-\n-    friend bool operator!=(const CTxIn& a, const CTxIn& b)\n-    {\n-        return !(a == b);\n-    }\n-\n-    std::string ToString() const\n-    {\n-        std::string str;\n-        str += \"CTxIn(\";\n-        str += prevout.ToString();\n-        if (prevout.IsNull())\n-            str += strprintf(\", coinbase %s\", HexStr(scriptSig).c_str());\n-        else\n-            str += strprintf(\", scriptSig=%s\", scriptSig.ToString().substr(0,24).c_str());\n-        if (nSequence != std::numeric_limits<unsigned int>::max())\n-            str += strprintf(\", nSequence=%u\", nSequence);\n-        str += \")\";\n-        return str;\n-    }\n-\n-    void print() const\n-    {\n-        printf(\"%s\\n\", ToString().c_str());\n-    }\n-};\n-\n-\n-\n-\n-/** An output of a transaction.  It contains the public key that the next input\n- * must be able to sign with to claim it.\n- */\n-class CTxOut\n-{\n-public:\n-    int64 nValue;\n-    CScript scriptPubKey;\n-\n-    CTxOut()\n-    {\n-        SetNull();\n-    }\n-\n-    CTxOut(int64 nValueIn, CScript scriptPubKeyIn)\n-    {\n-        nValue = nValueIn;\n-        scriptPubKey = scriptPubKeyIn;\n-    }\n-\n-    IMPLEMENT_SERIALIZE\n-    (\n-        READWRITE(nValue);\n-        READWRITE(scriptPubKey);\n-    )\n-\n-    void SetNull()\n-    {\n-        nValue = -1;\n-        scriptPubKey.clear();\n-    }\n-\n-    bool IsNull() const\n-    {\n-        return (nValue == -1);\n-    }\n-\n-    uint256 GetHash() const\n-    {\n-        return SerializeHash(*this);\n-    }\n-\n-    friend bool operator==(const CTxOut& a, const CTxOut& b)\n-    {\n-        return (a.nValue       == b.nValue &&\n-                a.scriptPubKey == b.scriptPubKey);\n-    }\n-\n-    friend bool operator!=(const CTxOut& a, const CTxOut& b)\n-    {\n-        return !(a == b);\n-    }\n-\n-    bool IsDust() const;\n-\n-    std::string ToString() const\n-    {\n-        if (scriptPubKey.size() < 6)\n-            return \"CTxOut(error)\";\n-        return strprintf(\"CTxOut(nValue=%\"PRI64d\".%08\"PRI64d\", scriptPubKey=%s)\", nValue / COIN, nValue % COIN, scriptPubKey.ToString().substr(0,30).c_str());\n-    }\n-\n-    void print() const\n-    {\n-        printf(\"%s\\n\", ToString().c_str());\n-    }\n-};\n-\n-\n-\n enum GetMinFee_mode\n {\n     GMF_BLOCK,\n@@ -412,215 +263,71 @@ enum GetMinFee_mode\n \n int64 GetMinFee(const CTransaction& tx, unsigned int nBlockSize = 1, bool fAllowFree = true, enum GetMinFee_mode mode = GMF_BLOCK);\n \n-/** The basic transaction that is broadcasted on the network and contained in\n- * blocks. A transaction can contain multiple inputs and outputs.\n- */\n-class CTransaction\n-{\n-public:\n-    static int64 nMinTxFee;\n-    static int64 nMinRelayTxFee;\n-    static const int CURRENT_VERSION=1;\n-    int nVersion;\n-    std::vector<CTxIn> vin;\n-    std::vector<CTxOut> vout;\n-    unsigned int nLockTime;\n-\n-    CTransaction()\n-    {\n-        SetNull();\n-    }\n-\n-    IMPLEMENT_SERIALIZE\n-    (\n-        READWRITE(this->nVersion);\n-        nVersion = this->nVersion;\n-        READWRITE(vin);\n-        READWRITE(vout);\n-        READWRITE(nLockTime);\n-    )\n-\n-    void SetNull()\n-    {\n-        nVersion = CTransaction::CURRENT_VERSION;\n-        vin.clear();\n-        vout.clear();\n-        nLockTime = 0;\n-    }\n-\n-    bool IsNull() const\n-    {\n-        return (vin.empty() && vout.empty());\n-    }\n-\n-    uint256 GetHash() const\n-    {\n-        return SerializeHash(*this);\n-    }\n-\n-    bool IsFinal(int nBlockHeight=0, int64 nBlockTime=0) const\n-    {\n-        // Time based nLockTime implemented in 0.1.6\n-        if (nLockTime == 0)\n-            return true;\n-        if (nBlockHeight == 0)\n-            nBlockHeight = nBestHeight;\n-        if (nBlockTime == 0)\n-            nBlockTime = GetAdjustedTime();\n-        if ((int64)nLockTime < ((int64)nLockTime < LOCKTIME_THRESHOLD ? (int64)nBlockHeight : nBlockTime))\n-            return true;\n-        BOOST_FOREACH(const CTxIn& txin, vin)\n-            if (!txin.IsFinal())\n-                return false;\n-        return true;\n-    }\n-\n-    bool IsNewerThan(const CTransaction& old) const\n-    {\n-        if (vin.size() != old.vin.size())\n-            return false;\n-        for (unsigned int i = 0; i < vin.size(); i++)\n-            if (vin[i].prevout != old.vin[i].prevout)\n-                return false;\n-\n-        bool fNewer = false;\n-        unsigned int nLowest = std::numeric_limits<unsigned int>::max();\n-        for (unsigned int i = 0; i < vin.size(); i++)\n-        {\n-            if (vin[i].nSequence != old.vin[i].nSequence)\n-            {\n-                if (vin[i].nSequence <= nLowest)\n-                {\n-                    fNewer = false;\n-                    nLowest = vin[i].nSequence;\n-                }\n-                if (old.vin[i].nSequence < nLowest)\n-                {\n-                    fNewer = true;\n-                    nLowest = old.vin[i].nSequence;\n-                }\n-            }\n-        }\n-        return fNewer;\n-    }\n-\n-    bool IsCoinBase() const\n-    {\n-        return (vin.size() == 1 && vin[0].prevout.IsNull());\n-    }\n-\n-    /** Check for standard transaction types\n-        @return True if all outputs (scriptPubKeys) use only standard transaction forms\n-    */\n-    bool IsStandard() const;\n+//\n+// Check transaction inputs, and make sure any\n+// pay-to-script-hash transactions are evaluating IsStandard scripts\n+//\n+// Why bother? To avoid denial-of-service attacks; an attacker\n+// can submit a standard HASH... OP_EQUAL transaction,\n+// which will get accepted into blocks. The redemption\n+// script can be anything; an attacker could use a very\n+// expensive-to-check-upon-redemption script like:\n+//   DUP CHECKSIG DROP ... repeated 100 times... OP_1\n+//\n \n     /** Check for standard transaction types\n-        @param[in] mapInputs\tMap of previous transactions that have outputs we're spending\n+        @param[in] mapInputs    Map of previous transactions that have outputs we're spending\n         @return True if all inputs (scriptSigs) use only standard transaction forms\n     */\n-    bool AreInputsStandard(CCoinsViewCache& mapInputs) const;\n+bool AreInputsStandard(const CTransaction& tx, CCoinsViewCache& mapInputs);\n \n-    /** Count ECDSA signature operations the old-fashioned (pre-0.6) way\n-        @return number of sigops this transaction's outputs will produce when spent\n-    */\n-    unsigned int GetLegacySigOpCount() const;\n+/** Count ECDSA signature operations the old-fashioned (pre-0.6) way\n+    @return number of sigops this transaction's outputs will produce when spent\n+    @see CTransaction::FetchInputs\n+*/\n+unsigned int GetLegacySigOpCount(const CTransaction& tx);\n \n-    /** Count ECDSA signature operations in pay-to-script-hash inputs.\n-\n-        @param[in] mapInputs\tMap of previous transactions that have outputs we're spending\n-        @return maximum number of sigops required to validate this transaction's inputs\n-     */\n-    unsigned int GetP2SHSigOpCount(CCoinsViewCache& mapInputs) const;\n-\n-    /** Amount of bitcoins spent by this transaction.\n-        @return sum of all outputs (note: does not include fees)\n-     */\n-    int64 GetValueOut() const\n-    {\n-        int64 nValueOut = 0;\n-        BOOST_FOREACH(const CTxOut& txout, vout)\n-        {\n-            nValueOut += txout.nValue;\n-            if (!MoneyRange(txout.nValue) || !MoneyRange(nValueOut))\n-                throw std::runtime_error(\"CTransaction::GetValueOut() : value out of range\");\n-        }\n-        return nValueOut;\n-    }\n-\n-    /** Amount of bitcoins coming in to this transaction\n-        Note that lightweight clients may not know anything besides the hash of previous transactions,\n-        so may not be able to calculate this.\n-\n-        @param[in] mapInputs\tMap of previous transactions that have outputs we're spending\n-        @return\tSum of value of all inputs (scriptSigs)\n-     */\n-    int64 GetValueIn(CCoinsViewCache& mapInputs) const;\n-\n-    static bool AllowFree(double dPriority)\n-    {\n-        // Large (in bytes) low-priority (new, small-coin) transactions\n-        // need a fee.\n-        return dPriority > COIN * 144 / 250;\n-    }\n-\n-    friend bool operator==(const CTransaction& a, const CTransaction& b)\n-    {\n-        return (a.nVersion  == b.nVersion &&\n-                a.vin       == b.vin &&\n-                a.vout      == b.vout &&\n-                a.nLockTime == b.nLockTime);\n-    }\n-\n-    friend bool operator!=(const CTransaction& a, const CTransaction& b)\n-    {\n-        return !(a == b);\n-    }\n+/** Count ECDSA signature operations in pay-to-script-hash inputs.\n \n+    @param[in] mapInputs\tMap of previous transactions that have outputs we're spending\n+    @return maximum number of sigops required to validate this transaction's inputs\n+    @see CTransaction::FetchInputs\n+ */\n+unsigned int GetP2SHSigOpCount(const CTransaction& tx, CCoinsViewCache& mapInputs);\n \n-    std::string ToString() const\n-    {\n-        std::string str;\n-        str += strprintf(\"CTransaction(hash=%s, ver=%d, vin.size=%\"PRIszu\", vout.size=%\"PRIszu\", nLockTime=%u)\\n\",\n-            GetHash().ToString().c_str(),\n-            nVersion,\n-            vin.size(),\n-            vout.size(),\n-            nLockTime);\n-        for (unsigned int i = 0; i < vin.size(); i++)\n-            str += \"    \" + vin[i].ToString() + \"\\n\";\n-        for (unsigned int i = 0; i < vout.size(); i++)\n-            str += \"    \" + vout[i].ToString() + \"\\n\";\n-        return str;\n-    }\n \n-    void print() const\n-    {\n-        printf(\"%s\", ToString().c_str());\n-    }\n+inline bool AllowFree(double dPriority)\n+{\n+    // Large (in bytes) low-priority (new, small-coin) transactions\n+    // need a fee.\n+    return dPriority > COIN * 144 / 250;\n+}\n \n+// Check whether all inputs of this transaction are valid (no double spends, scripts & sigs, amounts)\n+// This does not modify the UTXO set. If pvChecks is not NULL, script checks are pushed onto it\n+// instead of being performed inline.\n+bool CheckInputs(const CTransaction& tx, CValidationState &state, CCoinsViewCache &view, bool fScriptChecks = true,\n+                 unsigned int flags = SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_STRICTENC,\n+                 std::vector<CScriptCheck> *pvChecks = NULL);\n \n-    // Check whether all prevouts of this transaction are present in the UTXO set represented by view\n-    bool HaveInputs(CCoinsViewCache &view) const;\n+// Apply the effects of this transaction on the UTXO set represented by view\n+bool UpdateCoins(const CTransaction& tx, CCoinsViewCache &view, CTxUndo &txundo, int nHeight, const uint256 &txhash);\n \n-    // Check whether all inputs of this transaction are valid (no double spends, scripts & sigs, amounts)\n-    // This does not modify the UTXO set. If pvChecks is not NULL, script checks are pushed onto it\n-    // instead of being performed inline.\n-    bool CheckInputs(CValidationState &state, CCoinsViewCache &view, bool fScriptChecks = true,\n-                     unsigned int flags = SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_STRICTENC,\n-                     std::vector<CScriptCheck> *pvChecks = NULL) const;\n+// Context-independent validity checks\n+bool CheckTransaction(const CTransaction& tx, CValidationState& state);\n \n-    // Apply the effects of this transaction on the UTXO set represented by view\n-    void UpdateCoins(CValidationState &state, CCoinsViewCache &view, CTxUndo &txundo, int nHeight, const uint256 &txhash) const;\n+/** Check for standard transaction types\n+    @return True if all outputs (scriptPubKeys) use only standard transaction forms\n+*/\n+bool IsStandardTx(const CTransaction& tx);\n \n-    // Context-independent validity checks\n-    bool CheckTransaction(CValidationState &state) const;\n+bool IsFinalTx(const CTransaction &tx, int nBlockHeight = 0, int64 nBlockTime = 0);\n \n-    // Try to accept this transaction into the memory pool\n-    bool AcceptToMemoryPool(CValidationState &state, bool fCheckInputs=true, bool fLimitFree = true, bool* pfMissingInputs=NULL);\n+/** Amount of bitcoins spent by the transaction.\n+    @return sum of all outputs (note: does not include fees)\n+ */\n+int64 GetValueOut(const CTransaction& tx);\n \n-protected:\n-    static const CTxOut &GetOutputFor(const CTxIn& input, CCoinsViewCache& mapInputs);\n-};\n \n /** wrapper for CTxOut that provides a more compact serialization */\n class CTxOutCompressor\n@@ -2132,6 +1839,21 @@ class CCoinsViewCache : public CCoinsViewBacked\n     // Calculate the size of the cache (in number of transactions)\n     unsigned int GetCacheSize();\n \n+    /** Amount of bitcoins coming in to a transaction\n+        Note that lightweight clients may not know anything besides the hash of previous transactions,\n+        so may not be able to calculate this.\n+\n+        @param[in] tx\ttransaction for which we are checking input total\n+        @return\tSum of value of all inputs (scriptSigs)\n+        @see CTransaction::FetchInputs\n+     */\n+    int64 GetValueIn(const CTransaction& tx);\n+    \n+    // Check whether all prevouts of the transaction are present in the UTXO set represented by this view\n+    bool HaveInputs(const CTransaction& tx);\n+\n+    const CTxOut &GetOutputFor(const CTxIn& input);\n+\n private:\n     std::map<uint256,CCoins>::iterator FetchCoins(const uint256 &txid);\n };"
      },
      {
        "sha": "aeef721ce5fde5ee5a942b3d3c28355cf9ea47a3",
        "filename": "src/qt/transactiondesc.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05df3fc68d68e87415ed9e534db3ea3160dc3092/src/qt/transactiondesc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05df3fc68d68e87415ed9e534db3ea3160dc3092/src/qt/transactiondesc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.cpp?ref=05df3fc68d68e87415ed9e534db3ea3160dc3092",
        "patch": "@@ -12,7 +12,7 @@\n \n QString TransactionDesc::FormatTxStatus(const CWalletTx& wtx)\n {\n-    if (!wtx.IsFinal())\n+    if (!IsFinalTx(wtx))\n     {\n         if (wtx.nLockTime < LOCKTIME_THRESHOLD)\n             return tr(\"Open for %n more block(s)\", \"\", wtx.nLockTime - nBestHeight + 1);\n@@ -186,7 +186,7 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx)\n                     strHTML += \"<b>\" + tr(\"Credit\") + \":</b> \" + BitcoinUnits::formatWithUnit(BitcoinUnits::BTC, nValue) + \"<br>\";\n                 }\n \n-                int64 nTxFee = nDebit - wtx.GetValueOut();\n+                int64 nTxFee = nDebit - GetValueOut(wtx);\n                 if (nTxFee > 0)\n                     strHTML += \"<b>\" + tr(\"Transaction fee\") + \":</b> \" + BitcoinUnits::formatWithUnit(BitcoinUnits::BTC, -nTxFee) + \"<br>\";\n             }"
      },
      {
        "sha": "e9545087690224accfdc04b458878553b8a46221",
        "filename": "src/qt/transactionrecord.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05df3fc68d68e87415ed9e534db3ea3160dc3092/src/qt/transactionrecord.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05df3fc68d68e87415ed9e534db3ea3160dc3092/src/qt/transactionrecord.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.cpp?ref=05df3fc68d68e87415ed9e534db3ea3160dc3092",
        "patch": "@@ -89,7 +89,7 @@ QList<TransactionRecord> TransactionRecord::decomposeTransaction(const CWallet *\n             //\n             // Debit\n             //\n-            int64 nTxFee = nDebit - wtx.GetValueOut();\n+            int64 nTxFee = nDebit - GetValueOut(wtx);\n \n             for (unsigned int nOut = 0; nOut < wtx.vout.size(); nOut++)\n             {\n@@ -162,7 +162,7 @@ void TransactionRecord::updateStatus(const CWalletTx &wtx)\n     status.depth = wtx.GetDepthInMainChain();\n     status.cur_num_blocks = nBestHeight;\n \n-    if (!wtx.IsFinal())\n+    if (!IsFinalTx(wtx))\n     {\n         if (wtx.nLockTime < LOCKTIME_THRESHOLD)\n         {"
      },
      {
        "sha": "917c2f5de9fec659ffd015660ee03c376b30ddd2",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05df3fc68d68e87415ed9e534db3ea3160dc3092/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05df3fc68d68e87415ed9e534db3ea3160dc3092/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=05df3fc68d68e87415ed9e534db3ea3160dc3092",
        "patch": "@@ -555,7 +555,7 @@ Value sendrawtransaction(const Array& params, bool fHelp)\n         if (!fHave) {\n             // push to local node\n             CValidationState state;\n-            if (!tx.AcceptToMemoryPool(state, true, false))\n+            if (!mempool.accept(state, tx, true, false, NULL))\n                 throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX rejected\"); // TODO: report validation state\n         }\n     }"
      },
      {
        "sha": "585bdb2bfb918e33e0232961edc19a38c18be456",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05df3fc68d68e87415ed9e534db3ea3160dc3092/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05df3fc68d68e87415ed9e534db3ea3160dc3092/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=05df3fc68d68e87415ed9e534db3ea3160dc3092",
        "patch": "@@ -408,7 +408,7 @@ Value getreceivedbyaddress(const Array& params, bool fHelp)\n     for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n     {\n         const CWalletTx& wtx = (*it).second;\n-        if (wtx.IsCoinBase() || !wtx.IsFinal())\n+        if (wtx.IsCoinBase() || !IsFinalTx(wtx))\n             continue;\n \n         BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n@@ -454,7 +454,7 @@ Value getreceivedbyaccount(const Array& params, bool fHelp)\n     for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n     {\n         const CWalletTx& wtx = (*it).second;\n-        if (wtx.IsCoinBase() || !wtx.IsFinal())\n+        if (wtx.IsCoinBase() || !IsFinalTx(wtx))\n             continue;\n \n         BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n@@ -478,7 +478,7 @@ int64 GetAccountBalance(CWalletDB& walletdb, const string& strAccount, int nMinD\n     for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n     {\n         const CWalletTx& wtx = (*it).second;\n-        if (!wtx.IsFinal())\n+        if (!IsFinalTx(wtx))\n             continue;\n \n         int64 nReceived, nSent, nFee;\n@@ -839,7 +839,7 @@ Value ListReceived(const Array& params, bool fByAccounts)\n     {\n         const CWalletTx& wtx = (*it).second;\n \n-        if (wtx.IsCoinBase() || !wtx.IsFinal())\n+        if (wtx.IsCoinBase() || !IsFinalTx(wtx))\n             continue;\n \n         int nDepth = wtx.GetDepthInMainChain();\n@@ -1220,7 +1220,7 @@ Value gettransaction(const Array& params, bool fHelp)\n     int64 nCredit = wtx.GetCredit();\n     int64 nDebit = wtx.GetDebit();\n     int64 nNet = nCredit - nDebit;\n-    int64 nFee = (wtx.IsFromMe() ? wtx.GetValueOut() - nDebit : 0);\n+    int64 nFee = (wtx.IsFromMe() ? GetValueOut(wtx) - nDebit : 0);\n \n     entry.push_back(Pair(\"amount\", ValueFromAmount(nNet - nFee)));\n     if (wtx.IsFromMe())"
      },
      {
        "sha": "f963467c94c252cc5953e7d3bd11707a159cd9d2",
        "filename": "src/script.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05df3fc68d68e87415ed9e534db3ea3160dc3092/src/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05df3fc68d68e87415ed9e534db3ea3160dc3092/src/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script.h?ref=05df3fc68d68e87415ed9e534db3ea3160dc3092",
        "patch": "@@ -533,7 +533,7 @@ class CScript : public std::vector<unsigned char>\n \n     bool IsPayToScriptHash() const;\n \n-    // Called by CTransaction::IsStandard\n+    // Called by IsStandardTx\n     bool IsPushOnly() const\n     {\n         const_iterator pc = begin();"
      },
      {
        "sha": "a26f4a87dbaa68e8c69506fab16e998478f7f2e9",
        "filename": "src/test/data/tx_invalid.json",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05df3fc68d68e87415ed9e534db3ea3160dc3092/src/test/data/tx_invalid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05df3fc68d68e87415ed9e534db3ea3160dc3092/src/test/data/tx_invalid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/tx_invalid.json?ref=05df3fc68d68e87415ed9e534db3ea3160dc3092",
        "patch": "@@ -23,7 +23,7 @@\n [[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"HASH160 0x14 0x7a052c840ba73af26755de42cf01cc9e0a49fef0 EQUAL\"]],\n \"010000000100010000000000000000000000000000000000000000000000000000000000000000000009085768617420697320ffffffff010000000000000000015100000000\", true],\n \n-[\"Tests for CTransaction::CheckTransaction()\"],\n+[\"Tests for CheckTransaction()\"],\n [\"No inputs\"],\n [[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"HASH160 0x14 0x7a052c840ba73af26755de42cf01cc9e0a49fef0 EQUAL\"]],\n \"0100000000010000000000000000015100000000\", true],"
      },
      {
        "sha": "faf911a97f29d93732bd37db0683e0e1eaab8554",
        "filename": "src/test/data/tx_valid.json",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05df3fc68d68e87415ed9e534db3ea3160dc3092/src/test/data/tx_valid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05df3fc68d68e87415ed9e534db3ea3160dc3092/src/test/data/tx_valid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/tx_valid.json?ref=05df3fc68d68e87415ed9e534db3ea3160dc3092",
        "patch": "@@ -50,7 +50,7 @@\n [[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"HASH160 0x14 0x8febbed40483661de6958d957412f82deed8e2f7 EQUAL\"]],\n \"01000000010001000000000000000000000000000000000000000000000000000000000000000000006e493046022100c66c9cdf4c43609586d15424c54707156e316d88b0a1534c9e6b0d4f311406310221009c0fe51dbc9c4ab7cc25d3fdbeccf6679fe6827f08edf2b4a9f16ee3eb0e438a0123210338e8034509af564c62644c07691942e0c056752008a173c89f60ab2a88ac2ebfacffffffff010000000000000000015100000000\", true],\n \n-[\"Tests for CTransaction::CheckTransaction()\"],\n+[\"Tests for CheckTransaction()\"],\n [\"MAX_MONEY output\"],\n [[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"HASH160 0x14 0x32afac281462b822adbec5094b8d4d337dd5bd6a EQUAL\"]],\n \"01000000010001000000000000000000000000000000000000000000000000000000000000000000006e493046022100e1eadba00d9296c743cb6ecc703fd9ddc9b3cd12906176a226ae4c18d6b00796022100a71aef7d2874deff681ba6080f1b278bac7bb99c61b08a85f4311970ffe7f63f012321030c0588dc44d92bdcbf8e72093466766fdc265ead8db64517b0c542275b70fffbacffffffff010040075af0750700015100000000\", true],"
      },
      {
        "sha": "23cb3a8e0a74c3651fe68c069ed5dbe77a618ea8",
        "filename": "src/test/script_P2SH_tests.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05df3fc68d68e87415ed9e534db3ea3160dc3092/src/test/script_P2SH_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05df3fc68d68e87415ed9e534db3ea3160dc3092/src/test/script_P2SH_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_P2SH_tests.cpp?ref=05df3fc68d68e87415ed9e534db3ea3160dc3092",
        "patch": "@@ -82,7 +82,7 @@ BOOST_AUTO_TEST_CASE(sign)\n         txFrom.vout[i+4].scriptPubKey = standardScripts[i];\n         txFrom.vout[i+4].nValue = COIN;\n     }\n-    BOOST_CHECK(txFrom.IsStandard());\n+    BOOST_CHECK(IsStandardTx(txFrom));\n \n     CTransaction txTo[8]; // Spending transactions\n     for (int i = 0; i < 8; i++)\n@@ -173,7 +173,7 @@ BOOST_AUTO_TEST_CASE(set)\n         txFrom.vout[i].scriptPubKey = outer[i];\n         txFrom.vout[i].nValue = CENT;\n     }\n-    BOOST_CHECK(txFrom.IsStandard());\n+    BOOST_CHECK(IsStandardTx(txFrom));\n \n     CTransaction txTo[4]; // Spending transactions\n     for (int i = 0; i < 4; i++)\n@@ -189,7 +189,7 @@ BOOST_AUTO_TEST_CASE(set)\n     for (int i = 0; i < 4; i++)\n     {\n         BOOST_CHECK_MESSAGE(SignSignature(keystore, txFrom, txTo[i], 0), strprintf(\"SignSignature %d\", i));\n-        BOOST_CHECK_MESSAGE(txTo[i].IsStandard(), strprintf(\"txTo[%d].IsStandard\", i));\n+        BOOST_CHECK_MESSAGE(IsStandardTx(txTo[i]), strprintf(\"txTo[%d].IsStandard\", i));\n     }\n }\n \n@@ -305,15 +305,15 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n     txTo.vin[2].prevout.hash = txFrom.GetHash();\n     BOOST_CHECK(SignSignature(keystore, txFrom, txTo, 2));\n \n-    BOOST_CHECK(txTo.AreInputsStandard(coins));\n-    BOOST_CHECK_EQUAL(txTo.GetP2SHSigOpCount(coins), 1U);\n+    BOOST_CHECK(::AreInputsStandard(txTo, coins));\n+    BOOST_CHECK_EQUAL(GetP2SHSigOpCount(txTo, coins), 1U);\n \n     // Make sure adding crap to the scriptSigs makes them non-standard:\n     for (int i = 0; i < 3; i++)\n     {\n         CScript t = txTo.vin[i].scriptSig;\n         txTo.vin[i].scriptSig = (CScript() << 11) + t;\n-        BOOST_CHECK(!txTo.AreInputsStandard(coins));\n+        BOOST_CHECK(!::AreInputsStandard(txTo, coins));\n         txTo.vin[i].scriptSig = t;\n     }\n \n@@ -329,11 +329,11 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n     txToNonStd.vin[1].prevout.hash = txFrom.GetHash();\n     txToNonStd.vin[1].scriptSig << OP_0 << Serialize(oneOfEleven);\n \n-    BOOST_CHECK(!txToNonStd.AreInputsStandard(coins));\n-    BOOST_CHECK_EQUAL(txToNonStd.GetP2SHSigOpCount(coins), 11U);\n+    BOOST_CHECK(!::AreInputsStandard(txToNonStd, coins));\n+    BOOST_CHECK_EQUAL(GetP2SHSigOpCount(txToNonStd, coins), 11U);\n \n     txToNonStd.vin[0].scriptSig.clear();\n-    BOOST_CHECK(!txToNonStd.AreInputsStandard(coins));\n+    BOOST_CHECK(!::AreInputsStandard(txToNonStd, coins));\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "53d1307b69b8bcb0362d1b09b0922737bd503e02",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05df3fc68d68e87415ed9e534db3ea3160dc3092/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05df3fc68d68e87415ed9e534db3ea3160dc3092/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=05df3fc68d68e87415ed9e534db3ea3160dc3092",
        "patch": "@@ -67,7 +67,7 @@ BOOST_AUTO_TEST_CASE(tx_valid)\n             stream >> tx;\n \n             CValidationState state;\n-            BOOST_CHECK_MESSAGE(tx.CheckTransaction(state), strTest);\n+            BOOST_CHECK_MESSAGE(CheckTransaction(tx, state), strTest);\n             BOOST_CHECK(state.IsValid());\n \n             for (unsigned int i = 0; i < tx.vin.size(); i++)\n@@ -136,7 +136,7 @@ BOOST_AUTO_TEST_CASE(tx_invalid)\n             stream >> tx;\n \n             CValidationState state;\n-            fValid = tx.CheckTransaction(state) && state.IsValid();\n+            fValid = CheckTransaction(tx, state) && state.IsValid();\n \n             for (unsigned int i = 0; i < tx.vin.size() && fValid; i++)\n             {\n@@ -163,11 +163,11 @@ BOOST_AUTO_TEST_CASE(basic_transaction_tests)\n     CTransaction tx;\n     stream >> tx;\n     CValidationState state;\n-    BOOST_CHECK_MESSAGE(tx.CheckTransaction(state) && state.IsValid(), \"Simple deserialized transaction should be valid.\");\n+    BOOST_CHECK_MESSAGE(CheckTransaction(tx, state) && state.IsValid(), \"Simple deserialized transaction should be valid.\");\n \n     // Check that duplicate txins fail\n     tx.vin.push_back(tx.vin[0]);\n-    BOOST_CHECK_MESSAGE(!tx.CheckTransaction(state) || !state.IsValid(), \"Transaction with duplicate txins should be invalid.\");\n+    BOOST_CHECK_MESSAGE(!CheckTransaction(tx, state) || !state.IsValid(), \"Transaction with duplicate txins should be invalid.\");\n }\n \n //\n@@ -230,16 +230,16 @@ BOOST_AUTO_TEST_CASE(test_Get)\n     t1.vout[0].nValue = 90*CENT;\n     t1.vout[0].scriptPubKey << OP_1;\n \n-    BOOST_CHECK(t1.AreInputsStandard(coins));\n-    BOOST_CHECK_EQUAL(t1.GetValueIn(coins), (50+21+22)*CENT);\n+    BOOST_CHECK(AreInputsStandard(t1, coins));\n+    BOOST_CHECK_EQUAL(coins.GetValueIn(t1), (50+21+22)*CENT);\n \n     // Adding extra junk to the scriptSig should make it non-standard:\n     t1.vin[0].scriptSig << OP_11;\n-    BOOST_CHECK(!t1.AreInputsStandard(coins));\n+    BOOST_CHECK(!AreInputsStandard(t1, coins));\n \n     // ... as should not having enough:\n     t1.vin[0].scriptSig = CScript();\n-    BOOST_CHECK(!t1.AreInputsStandard(coins));\n+    BOOST_CHECK(!AreInputsStandard(t1, coins));\n }\n \n BOOST_AUTO_TEST_CASE(test_IsStandard)\n@@ -260,16 +260,16 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     key.MakeNewKey(true);\n     t.vout[0].scriptPubKey.SetDestination(key.GetPubKey().GetID());\n \n-    BOOST_CHECK(t.IsStandard());\n+    BOOST_CHECK(IsStandardTx(t));\n \n     t.vout[0].nValue = 5011; // dust\n-    BOOST_CHECK(!t.IsStandard());\n+    BOOST_CHECK(!IsStandardTx(t));\n \n     t.vout[0].nValue = 6011; // not dust\n-    BOOST_CHECK(t.IsStandard());\n+    BOOST_CHECK(IsStandardTx(t));\n \n     t.vout[0].scriptPubKey = CScript() << OP_1;\n-    BOOST_CHECK(!t.IsStandard());\n+    BOOST_CHECK(!IsStandardTx(t));\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "7041d49dabf2eec60120cae003a3382a867e8327",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05df3fc68d68e87415ed9e534db3ea3160dc3092/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05df3fc68d68e87415ed9e534db3ea3160dc3092/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=05df3fc68d68e87415ed9e534db3ea3160dc3092",
        "patch": "@@ -643,7 +643,7 @@ void CWalletTx::GetAmounts(list<pair<CTxDestination, int64> >& listReceived,\n     int64 nDebit = GetDebit();\n     if (nDebit > 0) // debit>0 means we signed/sent this transaction\n     {\n-        int64 nValueOut = GetValueOut();\n+        int64 nValueOut = GetValueOut(*this);\n         nFee = nDebit - nValueOut;\n     }\n \n@@ -933,7 +933,7 @@ int64 CWallet::GetUnconfirmedBalance() const\n         for (map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n         {\n             const CWalletTx* pcoin = &(*it).second;\n-            if (!pcoin->IsFinal() || !pcoin->IsConfirmed())\n+            if (!IsFinalTx(*pcoin) || !pcoin->IsConfirmed())\n                 nTotal += pcoin->GetAvailableCredit();\n         }\n     }\n@@ -965,7 +965,7 @@ void CWallet::AvailableCoins(vector<COutput>& vCoins, bool fOnlyConfirmed) const\n         {\n             const CWalletTx* pcoin = &(*it).second;\n \n-            if (!pcoin->IsFinal())\n+            if (!IsFinalTx(*pcoin))\n                 continue;\n \n             if (fOnlyConfirmed && !pcoin->IsConfirmed())\n@@ -1178,7 +1178,7 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, int64> >& vecSend,\n                 BOOST_FOREACH (const PAIRTYPE(CScript, int64)& s, vecSend)\n                 {\n                     CTxOut txout(s.second, s.first);\n-                    if (txout.IsDust())\n+                    if (txout.IsDust(CTransaction::nMinRelayTxFee))\n                     {\n                         strFailReason = _(\"Transaction amount too small\");\n                         return false;\n@@ -1237,7 +1237,7 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, int64> >& vecSend,\n \n                     // Never create dust outputs; if we would, just\n                     // add the dust to the fee.\n-                    if (newTxOut.IsDust())\n+                    if (newTxOut.IsDust(CTransaction::nMinRelayTxFee))\n                     {\n                         nFeeRet += nChange;\n                         reservekey.ReturnKey();\n@@ -1276,7 +1276,7 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, int64> >& vecSend,\n \n                 // Check that enough fee is included\n                 int64 nPayFee = nTransactionFee * (1 + (int64)nBytes / 1000);\n-                bool fAllowFree = CTransaction::AllowFree(dPriority);\n+                bool fAllowFree = AllowFree(dPriority);\n                 int64 nMinFee = GetMinFee(wtxNew, 1, fAllowFree, GMF_SEND);\n                 if (nFeeRet < max(nPayFee, nMinFee))\n                 {\n@@ -1657,7 +1657,7 @@ std::map<CTxDestination, int64> CWallet::GetAddressBalances()\n         {\n             CWalletTx *pcoin = &walletEntry.second;\n \n-            if (!pcoin->IsFinal() || !pcoin->IsConfirmed())\n+            if (!IsFinalTx(*pcoin) || !pcoin->IsConfirmed())\n                 continue;\n \n             if (pcoin->IsCoinBase() && pcoin->GetBlocksToMaturity() > 0)"
      },
      {
        "sha": "674bae66ddde736e64f82511835a1a8552f1c5c5",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05df3fc68d68e87415ed9e534db3ea3160dc3092/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05df3fc68d68e87415ed9e534db3ea3160dc3092/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=05df3fc68d68e87415ed9e534db3ea3160dc3092",
        "patch": "@@ -641,7 +641,7 @@ class CWalletTx : public CMerkleTx\n     bool IsConfirmed() const\n     {\n         // Quick answer in most cases\n-        if (!IsFinal())\n+        if (!IsFinalTx(*this))\n             return false;\n         if (GetDepthInMainChain() >= 1)\n             return true;\n@@ -658,7 +658,7 @@ class CWalletTx : public CMerkleTx\n         {\n             const CMerkleTx* ptx = vWorkQueue[i];\n \n-            if (!ptx->IsFinal())\n+            if (!IsFinalTx(*ptx))\n                 return false;\n             if (ptx->GetDepthInMainChain() >= 1)\n                 continue;"
      },
      {
        "sha": "8910cac4bcc29cf021629f77e8e2ea4bd4e2cc88",
        "filename": "src/walletdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05df3fc68d68e87415ed9e534db3ea3160dc3092/src/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05df3fc68d68e87415ed9e534db3ea3160dc3092/src/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.cpp?ref=05df3fc68d68e87415ed9e534db3ea3160dc3092",
        "patch": "@@ -204,7 +204,7 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             CWalletTx& wtx = pwallet->mapWallet[hash];\n             ssValue >> wtx;\n             CValidationState state;\n-            if (wtx.CheckTransaction(state) && (wtx.GetHash() == hash) && state.IsValid())\n+            if (CheckTransaction(wtx, state) && (wtx.GetHash() == hash) && state.IsValid())\n                 wtx.BindWallet(pwallet);\n             else\n             {"
      }
    ]
  },
  {
    "sha": "65e7bbef74f7077a5b46943b1556d66d84955f61",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NWU3YmJlZjc0ZjcwNzdhNWI0Njk0M2IxNTU2ZDY2ZDg0OTU1ZjYx",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-01-08T16:45:47Z"
      },
      "committer": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-06-06T06:15:20Z"
      },
      "message": "Moved CCoins, CTxOutCompressor, CTxInUndo, and CTxUndo to core.",
      "tree": {
        "sha": "dd6eb2391be2ef271e4f8e7d508bee34378d5323",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dd6eb2391be2ef271e4f8e7d508bee34378d5323"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/65e7bbef74f7077a5b46943b1556d66d84955f61",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65e7bbef74f7077a5b46943b1556d66d84955f61",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/65e7bbef74f7077a5b46943b1556d66d84955f61",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65e7bbef74f7077a5b46943b1556d66d84955f61/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "05df3fc68d68e87415ed9e534db3ea3160dc3092",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/05df3fc68d68e87415ed9e534db3ea3160dc3092",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/05df3fc68d68e87415ed9e534db3ea3160dc3092"
      }
    ],
    "stats": {
      "total": 662,
      "additions": 332,
      "deletions": 330
    },
    "files": [
      {
        "sha": "c86e1f499dc126c315b1b962c6f96dada1cf59e1",
        "filename": "src/core.h",
        "status": "modified",
        "additions": 332,
        "deletions": 0,
        "changes": 332,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65e7bbef74f7077a5b46943b1556d66d84955f61/src/core.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65e7bbef74f7077a5b46943b1556d66d84955f61/src/core.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core.h?ref=65e7bbef74f7077a5b46943b1556d66d84955f61",
        "patch": "@@ -340,4 +340,336 @@ class CTransaction\n     }\n };\n \n+/** wrapper for CTxOut that provides a more compact serialization */\n+class CTxOutCompressor\n+{\n+private:\n+    CTxOut &txout;\n+\n+public:\n+    static uint64 CompressAmount(uint64 nAmount);\n+    static uint64 DecompressAmount(uint64 nAmount);\n+\n+    CTxOutCompressor(CTxOut &txoutIn) : txout(txoutIn) { }\n+\n+    IMPLEMENT_SERIALIZE(({\n+        if (!fRead) {\n+            uint64 nVal = CompressAmount(txout.nValue);\n+            READWRITE(VARINT(nVal));\n+        } else {\n+            uint64 nVal = 0;\n+            READWRITE(VARINT(nVal));\n+            txout.nValue = DecompressAmount(nVal);\n+        }\n+        CScriptCompressor cscript(REF(txout.scriptPubKey));\n+        READWRITE(cscript);\n+    });)\n+};\n+\n+/** Undo information for a CTxIn\n+ *\n+ *  Contains the prevout's CTxOut being spent, and if this was the\n+ *  last output of the affected transaction, its metadata as well\n+ *  (coinbase or not, height, transaction version)\n+ */\n+class CTxInUndo\n+{\n+public:\n+    CTxOut txout;         // the txout data before being spent\n+    bool fCoinBase;       // if the outpoint was the last unspent: whether it belonged to a coinbase\n+    unsigned int nHeight; // if the outpoint was the last unspent: its height\n+    int nVersion;         // if the outpoint was the last unspent: its version\n+\n+    CTxInUndo() : txout(), fCoinBase(false), nHeight(0), nVersion(0) {}\n+    CTxInUndo(const CTxOut &txoutIn, bool fCoinBaseIn = false, unsigned int nHeightIn = 0, int nVersionIn = 0) : txout(txoutIn), fCoinBase(fCoinBaseIn), nHeight(nHeightIn), nVersion(nVersionIn) { }\n+\n+    unsigned int GetSerializeSize(int nType, int nVersion) const {\n+        return ::GetSerializeSize(VARINT(nHeight*2+(fCoinBase ? 1 : 0)), nType, nVersion) +\n+               (nHeight > 0 ? ::GetSerializeSize(VARINT(this->nVersion), nType, nVersion) : 0) +\n+               ::GetSerializeSize(CTxOutCompressor(REF(txout)), nType, nVersion);\n+    }\n+\n+    template<typename Stream>\n+    void Serialize(Stream &s, int nType, int nVersion) const {\n+        ::Serialize(s, VARINT(nHeight*2+(fCoinBase ? 1 : 0)), nType, nVersion);\n+        if (nHeight > 0)\n+            ::Serialize(s, VARINT(this->nVersion), nType, nVersion);\n+        ::Serialize(s, CTxOutCompressor(REF(txout)), nType, nVersion);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream &s, int nType, int nVersion) {\n+        unsigned int nCode = 0;\n+        ::Unserialize(s, VARINT(nCode), nType, nVersion);\n+        nHeight = nCode / 2;\n+        fCoinBase = nCode & 1;\n+        if (nHeight > 0)\n+            ::Unserialize(s, VARINT(this->nVersion), nType, nVersion);\n+        ::Unserialize(s, REF(CTxOutCompressor(REF(txout))), nType, nVersion);\n+    }\n+};\n+\n+/** Undo information for a CTransaction */\n+class CTxUndo\n+{\n+public:\n+    // undo information for all txins\n+    std::vector<CTxInUndo> vprevout;\n+\n+    IMPLEMENT_SERIALIZE(\n+        READWRITE(vprevout);\n+    )\n+};\n+\n+\n+/** pruned version of CTransaction: only retains metadata and unspent transaction outputs\n+ *\n+ * Serialized format:\n+ * - VARINT(nVersion)\n+ * - VARINT(nCode)\n+ * - unspentness bitvector, for vout[2] and further; least significant byte first\n+ * - the non-spent CTxOuts (via CTxOutCompressor)\n+ * - VARINT(nHeight)\n+ *\n+ * The nCode value consists of:\n+ * - bit 1: IsCoinBase()\n+ * - bit 2: vout[0] is not spent\n+ * - bit 4: vout[1] is not spent\n+ * - The higher bits encode N, the number of non-zero bytes in the following bitvector.\n+ *   - In case both bit 2 and bit 4 are unset, they encode N-1, as there must be at\n+ *     least one non-spent output).\n+ *\n+ * Example: 0104835800816115944e077fe7c803cfa57f29b36bf87c1d358bb85e\n+ *          <><><--------------------------------------------><---->\n+ *          |  \\                  |                             /\n+ *    version   code             vout[1]                  height\n+ *\n+ *    - version = 1\n+ *    - code = 4 (vout[1] is not spent, and 0 non-zero bytes of bitvector follow)\n+ *    - unspentness bitvector: as 0 non-zero bytes follow, it has length 0\n+ *    - vout[1]: 835800816115944e077fe7c803cfa57f29b36bf87c1d35\n+ *               * 8358: compact amount representation for 60000000000 (600 BTC)\n+ *               * 00: special txout type pay-to-pubkey-hash\n+ *               * 816115944e077fe7c803cfa57f29b36bf87c1d35: address uint160\n+ *    - height = 203998\n+ *\n+ *\n+ * Example: 0109044086ef97d5790061b01caab50f1b8e9c50a5057eb43c2d9563a4eebbd123008c988f1a4a4de2161e0f50aac7f17e7f9555caa486af3b\n+ *          <><><--><--------------------------------------------------><----------------------------------------------><---->\n+ *         /  \\   \\                     |                                                           |                     /\n+ *  version  code  unspentness       vout[4]                                                     vout[16]           height\n+ *\n+ *  - version = 1\n+ *  - code = 9 (coinbase, neither vout[0] or vout[1] are unspent,\n+ *                2 (1, +1 because both bit 2 and bit 4 are unset) non-zero bitvector bytes follow)\n+ *  - unspentness bitvector: bits 2 (0x04) and 14 (0x4000) are set, so vout[2+2] and vout[14+2] are unspent\n+ *  - vout[4]: 86ef97d5790061b01caab50f1b8e9c50a5057eb43c2d9563a4ee\n+ *             * 86ef97d579: compact amount representation for 234925952 (2.35 BTC)\n+ *             * 00: special txout type pay-to-pubkey-hash\n+ *             * 61b01caab50f1b8e9c50a5057eb43c2d9563a4ee: address uint160\n+ *  - vout[16]: bbd123008c988f1a4a4de2161e0f50aac7f17e7f9555caa4\n+ *              * bbd123: compact amount representation for 110397 (0.001 BTC)\n+ *              * 00: special txout type pay-to-pubkey-hash\n+ *              * 8c988f1a4a4de2161e0f50aac7f17e7f9555caa4: address uint160\n+ *  - height = 120891\n+ */\n+class CCoins\n+{\n+public:\n+    // whether transaction is a coinbase\n+    bool fCoinBase;\n+\n+    // unspent transaction outputs; spent outputs are .IsNull(); spent outputs at the end of the array are dropped\n+    std::vector<CTxOut> vout;\n+\n+    // at which height this transaction was included in the active block chain\n+    int nHeight;\n+\n+    // version of the CTransaction; accesses to this value should probably check for nHeight as well,\n+    // as new tx version will probably only be introduced at certain heights\n+    int nVersion;\n+\n+    // construct a CCoins from a CTransaction, at a given height\n+    CCoins(const CTransaction &tx, int nHeightIn) : fCoinBase(tx.IsCoinBase()), vout(tx.vout), nHeight(nHeightIn), nVersion(tx.nVersion) { }\n+\n+    // empty constructor\n+    CCoins() : fCoinBase(false), vout(0), nHeight(0), nVersion(0) { }\n+\n+    // remove spent outputs at the end of vout\n+    void Cleanup() {\n+        while (vout.size() > 0 && vout.back().IsNull())\n+            vout.pop_back();\n+        if (vout.empty())\n+            std::vector<CTxOut>().swap(vout);\n+    }\n+\n+    void swap(CCoins &to) {\n+        std::swap(to.fCoinBase, fCoinBase);\n+        to.vout.swap(vout);\n+        std::swap(to.nHeight, nHeight);\n+        std::swap(to.nVersion, nVersion);\n+    }\n+\n+    // equality test\n+    friend bool operator==(const CCoins &a, const CCoins &b) {\n+         return a.fCoinBase == b.fCoinBase &&\n+                a.nHeight == b.nHeight &&\n+                a.nVersion == b.nVersion &&\n+                a.vout == b.vout;\n+    }\n+    friend bool operator!=(const CCoins &a, const CCoins &b) {\n+        return !(a == b);\n+    }\n+\n+    // calculate number of bytes for the bitmask, and its number of non-zero bytes\n+    // each bit in the bitmask represents the availability of one output, but the\n+    // availabilities of the first two outputs are encoded separately\n+    void CalcMaskSize(unsigned int &nBytes, unsigned int &nNonzeroBytes) const {\n+        unsigned int nLastUsedByte = 0;\n+        for (unsigned int b = 0; 2+b*8 < vout.size(); b++) {\n+            bool fZero = true;\n+            for (unsigned int i = 0; i < 8 && 2+b*8+i < vout.size(); i++) {\n+                if (!vout[2+b*8+i].IsNull()) {\n+                    fZero = false;\n+                    continue;\n+                }\n+            }\n+            if (!fZero) {\n+                nLastUsedByte = b + 1;\n+                nNonzeroBytes++;\n+            }\n+        }\n+        nBytes += nLastUsedByte;\n+    }\n+\n+    bool IsCoinBase() const {\n+        return fCoinBase;\n+    }\n+\n+    unsigned int GetSerializeSize(int nType, int nVersion) const {\n+        unsigned int nSize = 0;\n+        unsigned int nMaskSize = 0, nMaskCode = 0;\n+        CalcMaskSize(nMaskSize, nMaskCode);\n+        bool fFirst = vout.size() > 0 && !vout[0].IsNull();\n+        bool fSecond = vout.size() > 1 && !vout[1].IsNull();\n+        assert(fFirst || fSecond || nMaskCode);\n+        unsigned int nCode = 8*(nMaskCode - (fFirst || fSecond ? 0 : 1)) + (fCoinBase ? 1 : 0) + (fFirst ? 2 : 0) + (fSecond ? 4 : 0);\n+        // version\n+        nSize += ::GetSerializeSize(VARINT(this->nVersion), nType, nVersion);\n+        // size of header code\n+        nSize += ::GetSerializeSize(VARINT(nCode), nType, nVersion);\n+        // spentness bitmask\n+        nSize += nMaskSize;\n+        // txouts themself\n+        for (unsigned int i = 0; i < vout.size(); i++)\n+            if (!vout[i].IsNull())\n+                nSize += ::GetSerializeSize(CTxOutCompressor(REF(vout[i])), nType, nVersion);\n+        // height\n+        nSize += ::GetSerializeSize(VARINT(nHeight), nType, nVersion);\n+        return nSize;\n+    }\n+\n+    template<typename Stream>\n+    void Serialize(Stream &s, int nType, int nVersion) const {\n+        unsigned int nMaskSize = 0, nMaskCode = 0;\n+        CalcMaskSize(nMaskSize, nMaskCode);\n+        bool fFirst = vout.size() > 0 && !vout[0].IsNull();\n+        bool fSecond = vout.size() > 1 && !vout[1].IsNull();\n+        assert(fFirst || fSecond || nMaskCode);\n+        unsigned int nCode = 8*(nMaskCode - (fFirst || fSecond ? 0 : 1)) + (fCoinBase ? 1 : 0) + (fFirst ? 2 : 0) + (fSecond ? 4 : 0);\n+        // version\n+        ::Serialize(s, VARINT(this->nVersion), nType, nVersion);\n+        // header code\n+        ::Serialize(s, VARINT(nCode), nType, nVersion);\n+        // spentness bitmask\n+        for (unsigned int b = 0; b<nMaskSize; b++) {\n+            unsigned char chAvail = 0;\n+            for (unsigned int i = 0; i < 8 && 2+b*8+i < vout.size(); i++)\n+                if (!vout[2+b*8+i].IsNull())\n+                    chAvail |= (1 << i);\n+            ::Serialize(s, chAvail, nType, nVersion);\n+        }\n+        // txouts themself\n+        for (unsigned int i = 0; i < vout.size(); i++) {\n+            if (!vout[i].IsNull())\n+                ::Serialize(s, CTxOutCompressor(REF(vout[i])), nType, nVersion);\n+        }\n+        // coinbase height\n+        ::Serialize(s, VARINT(nHeight), nType, nVersion);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream &s, int nType, int nVersion) {\n+        unsigned int nCode = 0;\n+        // version\n+        ::Unserialize(s, VARINT(this->nVersion), nType, nVersion);\n+        // header code\n+        ::Unserialize(s, VARINT(nCode), nType, nVersion);\n+        fCoinBase = nCode & 1;\n+        std::vector<bool> vAvail(2, false);\n+        vAvail[0] = nCode & 2;\n+        vAvail[1] = nCode & 4;\n+        unsigned int nMaskCode = (nCode / 8) + ((nCode & 6) != 0 ? 0 : 1);\n+        // spentness bitmask\n+        while (nMaskCode > 0) {\n+            unsigned char chAvail = 0;\n+            ::Unserialize(s, chAvail, nType, nVersion);\n+            for (unsigned int p = 0; p < 8; p++) {\n+                bool f = (chAvail & (1 << p)) != 0;\n+                vAvail.push_back(f);\n+            }\n+            if (chAvail != 0)\n+                nMaskCode--;\n+        }\n+        // txouts themself\n+        vout.assign(vAvail.size(), CTxOut());\n+        for (unsigned int i = 0; i < vAvail.size(); i++) {\n+            if (vAvail[i])\n+                ::Unserialize(s, REF(CTxOutCompressor(vout[i])), nType, nVersion);\n+        }\n+        // coinbase height\n+        ::Unserialize(s, VARINT(nHeight), nType, nVersion);\n+        Cleanup();\n+    }\n+\n+    // mark an outpoint spent, and construct undo information\n+    bool Spend(const COutPoint &out, CTxInUndo &undo) {\n+        if (out.n >= vout.size())\n+            return false;\n+        if (vout[out.n].IsNull())\n+            return false;\n+        undo = CTxInUndo(vout[out.n]);\n+        vout[out.n].SetNull();\n+        Cleanup();\n+        if (vout.size() == 0) {\n+            undo.nHeight = nHeight;\n+            undo.fCoinBase = fCoinBase;\n+            undo.nVersion = this->nVersion;\n+        }\n+        return true;\n+    }\n+\n+    // mark a vout spent\n+    bool Spend(int nPos) {\n+        CTxInUndo undo;\n+        COutPoint out(0, nPos);\n+        return Spend(out, undo);\n+    }\n+\n+    // check whether a particular output is still available\n+    bool IsAvailable(unsigned int nPos) const {\n+        return (nPos < vout.size() && !vout[nPos].IsNull());\n+    }\n+\n+    // check whether the entire CCoins is spent\n+    // note that only !IsPruned() CCoins can be serialized\n+    bool IsPruned() const {\n+        BOOST_FOREACH(const CTxOut &out, vout)\n+            if (!out.IsNull())\n+                return false;\n+        return true;\n+    }\n+};\n+\n+\n #endif"
      },
      {
        "sha": "1279e62ca814d46f1697e294cda32287bbd6697f",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 0,
        "deletions": 330,
        "changes": 330,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65e7bbef74f7077a5b46943b1556d66d84955f61/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65e7bbef74f7077a5b46943b1556d66d84955f61/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=65e7bbef74f7077a5b46943b1556d66d84955f61",
        "patch": "@@ -328,88 +328,6 @@ bool IsFinalTx(const CTransaction &tx, int nBlockHeight = 0, int64 nBlockTime =\n  */\n int64 GetValueOut(const CTransaction& tx);\n \n-\n-/** wrapper for CTxOut that provides a more compact serialization */\n-class CTxOutCompressor\n-{\n-private:\n-    CTxOut &txout;\n-\n-public:\n-    static uint64 CompressAmount(uint64 nAmount);\n-    static uint64 DecompressAmount(uint64 nAmount);\n-\n-    CTxOutCompressor(CTxOut &txoutIn) : txout(txoutIn) { }\n-\n-    IMPLEMENT_SERIALIZE(({\n-        if (!fRead) {\n-            uint64 nVal = CompressAmount(txout.nValue);\n-            READWRITE(VARINT(nVal));\n-        } else {\n-            uint64 nVal = 0;\n-            READWRITE(VARINT(nVal));\n-            txout.nValue = DecompressAmount(nVal);\n-        }\n-        CScriptCompressor cscript(REF(txout.scriptPubKey));\n-        READWRITE(cscript);\n-    });)\n-};\n-\n-/** Undo information for a CTxIn\n- *\n- *  Contains the prevout's CTxOut being spent, and if this was the\n- *  last output of the affected transaction, its metadata as well\n- *  (coinbase or not, height, transaction version)\n- */\n-class CTxInUndo\n-{\n-public:\n-    CTxOut txout;         // the txout data before being spent\n-    bool fCoinBase;       // if the outpoint was the last unspent: whether it belonged to a coinbase\n-    unsigned int nHeight; // if the outpoint was the last unspent: its height\n-    int nVersion;         // if the outpoint was the last unspent: its version\n-\n-    CTxInUndo() : txout(), fCoinBase(false), nHeight(0), nVersion(0) {}\n-    CTxInUndo(const CTxOut &txoutIn, bool fCoinBaseIn = false, unsigned int nHeightIn = 0, int nVersionIn = 0) : txout(txoutIn), fCoinBase(fCoinBaseIn), nHeight(nHeightIn), nVersion(nVersionIn) { }\n-\n-    unsigned int GetSerializeSize(int nType, int nVersion) const {\n-        return ::GetSerializeSize(VARINT(nHeight*2+(fCoinBase ? 1 : 0)), nType, nVersion) +\n-               (nHeight > 0 ? ::GetSerializeSize(VARINT(this->nVersion), nType, nVersion) : 0) +\n-               ::GetSerializeSize(CTxOutCompressor(REF(txout)), nType, nVersion);\n-    }\n-\n-    template<typename Stream>\n-    void Serialize(Stream &s, int nType, int nVersion) const {\n-        ::Serialize(s, VARINT(nHeight*2+(fCoinBase ? 1 : 0)), nType, nVersion);\n-        if (nHeight > 0)\n-            ::Serialize(s, VARINT(this->nVersion), nType, nVersion);\n-        ::Serialize(s, CTxOutCompressor(REF(txout)), nType, nVersion);\n-    }\n-\n-    template<typename Stream>\n-    void Unserialize(Stream &s, int nType, int nVersion) {\n-        unsigned int nCode = 0;\n-        ::Unserialize(s, VARINT(nCode), nType, nVersion);\n-        nHeight = nCode / 2;\n-        fCoinBase = nCode & 1;\n-        if (nHeight > 0)\n-            ::Unserialize(s, VARINT(this->nVersion), nType, nVersion);\n-        ::Unserialize(s, REF(CTxOutCompressor(REF(txout))), nType, nVersion);\n-    }\n-};\n-\n-/** Undo information for a CTransaction */\n-class CTxUndo\n-{\n-public:\n-    // undo information for all txins\n-    std::vector<CTxInUndo> vprevout;\n-\n-    IMPLEMENT_SERIALIZE(\n-        READWRITE(vprevout);\n-    )\n-};\n-\n /** Undo information for a CBlock */\n class CBlockUndo\n {\n@@ -480,254 +398,6 @@ class CBlockUndo\n     }\n };\n \n-/** pruned version of CTransaction: only retains metadata and unspent transaction outputs\n- *\n- * Serialized format:\n- * - VARINT(nVersion)\n- * - VARINT(nCode)\n- * - unspentness bitvector, for vout[2] and further; least significant byte first\n- * - the non-spent CTxOuts (via CTxOutCompressor)\n- * - VARINT(nHeight)\n- *\n- * The nCode value consists of:\n- * - bit 1: IsCoinBase()\n- * - bit 2: vout[0] is not spent\n- * - bit 4: vout[1] is not spent\n- * - The higher bits encode N, the number of non-zero bytes in the following bitvector.\n- *   - In case both bit 2 and bit 4 are unset, they encode N-1, as there must be at\n- *     least one non-spent output).\n- *\n- * Example: 0104835800816115944e077fe7c803cfa57f29b36bf87c1d358bb85e\n- *          <><><--------------------------------------------><---->\n- *          |  \\                  |                             /\n- *    version   code             vout[1]                  height\n- *\n- *    - version = 1\n- *    - code = 4 (vout[1] is not spent, and 0 non-zero bytes of bitvector follow)\n- *    - unspentness bitvector: as 0 non-zero bytes follow, it has length 0\n- *    - vout[1]: 835800816115944e077fe7c803cfa57f29b36bf87c1d35\n- *               * 8358: compact amount representation for 60000000000 (600 BTC)\n- *               * 00: special txout type pay-to-pubkey-hash\n- *               * 816115944e077fe7c803cfa57f29b36bf87c1d35: address uint160\n- *    - height = 203998\n- *\n- *\n- * Example: 0109044086ef97d5790061b01caab50f1b8e9c50a5057eb43c2d9563a4eebbd123008c988f1a4a4de2161e0f50aac7f17e7f9555caa486af3b\n- *          <><><--><--------------------------------------------------><----------------------------------------------><---->\n- *         /  \\   \\                     |                                                           |                     /\n- *  version  code  unspentness       vout[4]                                                     vout[16]           height\n- *\n- *  - version = 1\n- *  - code = 9 (coinbase, neither vout[0] or vout[1] are unspent,\n- *                2 (1, +1 because both bit 2 and bit 4 are unset) non-zero bitvector bytes follow)\n- *  - unspentness bitvector: bits 2 (0x04) and 14 (0x4000) are set, so vout[2+2] and vout[14+2] are unspent\n- *  - vout[4]: 86ef97d5790061b01caab50f1b8e9c50a5057eb43c2d9563a4ee\n- *             * 86ef97d579: compact amount representation for 234925952 (2.35 BTC)\n- *             * 00: special txout type pay-to-pubkey-hash\n- *             * 61b01caab50f1b8e9c50a5057eb43c2d9563a4ee: address uint160\n- *  - vout[16]: bbd123008c988f1a4a4de2161e0f50aac7f17e7f9555caa4\n- *              * bbd123: compact amount representation for 110397 (0.001 BTC)\n- *              * 00: special txout type pay-to-pubkey-hash\n- *              * 8c988f1a4a4de2161e0f50aac7f17e7f9555caa4: address uint160\n- *  - height = 120891\n- */\n-class CCoins\n-{\n-public:\n-    // whether transaction is a coinbase\n-    bool fCoinBase;\n-\n-    // unspent transaction outputs; spent outputs are .IsNull(); spent outputs at the end of the array are dropped\n-    std::vector<CTxOut> vout;\n-\n-    // at which height this transaction was included in the active block chain\n-    int nHeight;\n-\n-    // version of the CTransaction; accesses to this value should probably check for nHeight as well,\n-    // as new tx version will probably only be introduced at certain heights\n-    int nVersion;\n-\n-    // construct a CCoins from a CTransaction, at a given height\n-    CCoins(const CTransaction &tx, int nHeightIn) : fCoinBase(tx.IsCoinBase()), vout(tx.vout), nHeight(nHeightIn), nVersion(tx.nVersion) { }\n-\n-    // empty constructor\n-    CCoins() : fCoinBase(false), vout(0), nHeight(0), nVersion(0) { }\n-\n-    // remove spent outputs at the end of vout\n-    void Cleanup() {\n-        while (vout.size() > 0 && vout.back().IsNull())\n-            vout.pop_back();\n-        if (vout.empty())\n-            std::vector<CTxOut>().swap(vout);\n-    }\n-\n-    void swap(CCoins &to) {\n-        std::swap(to.fCoinBase, fCoinBase);\n-        to.vout.swap(vout);\n-        std::swap(to.nHeight, nHeight);\n-        std::swap(to.nVersion, nVersion);\n-    }\n-\n-    // equality test\n-    friend bool operator==(const CCoins &a, const CCoins &b) {\n-         return a.fCoinBase == b.fCoinBase &&\n-                a.nHeight == b.nHeight &&\n-                a.nVersion == b.nVersion &&\n-                a.vout == b.vout;\n-    }\n-    friend bool operator!=(const CCoins &a, const CCoins &b) {\n-        return !(a == b);\n-    }\n-\n-    // calculate number of bytes for the bitmask, and its number of non-zero bytes\n-    // each bit in the bitmask represents the availability of one output, but the\n-    // availabilities of the first two outputs are encoded separately\n-    void CalcMaskSize(unsigned int &nBytes, unsigned int &nNonzeroBytes) const {\n-        unsigned int nLastUsedByte = 0;\n-        for (unsigned int b = 0; 2+b*8 < vout.size(); b++) {\n-            bool fZero = true;\n-            for (unsigned int i = 0; i < 8 && 2+b*8+i < vout.size(); i++) {\n-                if (!vout[2+b*8+i].IsNull()) {\n-                    fZero = false;\n-                    continue;\n-                }\n-            }\n-            if (!fZero) {\n-                nLastUsedByte = b + 1;\n-                nNonzeroBytes++;\n-            }\n-        }\n-        nBytes += nLastUsedByte;\n-    }\n-\n-    bool IsCoinBase() const {\n-        return fCoinBase;\n-    }\n-\n-    unsigned int GetSerializeSize(int nType, int nVersion) const {\n-        unsigned int nSize = 0;\n-        unsigned int nMaskSize = 0, nMaskCode = 0;\n-        CalcMaskSize(nMaskSize, nMaskCode);\n-        bool fFirst = vout.size() > 0 && !vout[0].IsNull();\n-        bool fSecond = vout.size() > 1 && !vout[1].IsNull();\n-        assert(fFirst || fSecond || nMaskCode);\n-        unsigned int nCode = 8*(nMaskCode - (fFirst || fSecond ? 0 : 1)) + (fCoinBase ? 1 : 0) + (fFirst ? 2 : 0) + (fSecond ? 4 : 0);\n-        // version\n-        nSize += ::GetSerializeSize(VARINT(this->nVersion), nType, nVersion);\n-        // size of header code\n-        nSize += ::GetSerializeSize(VARINT(nCode), nType, nVersion);\n-        // spentness bitmask\n-        nSize += nMaskSize;\n-        // txouts themself\n-        for (unsigned int i = 0; i < vout.size(); i++)\n-            if (!vout[i].IsNull())\n-                nSize += ::GetSerializeSize(CTxOutCompressor(REF(vout[i])), nType, nVersion);\n-        // height\n-        nSize += ::GetSerializeSize(VARINT(nHeight), nType, nVersion);\n-        return nSize;\n-    }\n-\n-    template<typename Stream>\n-    void Serialize(Stream &s, int nType, int nVersion) const {\n-        unsigned int nMaskSize = 0, nMaskCode = 0;\n-        CalcMaskSize(nMaskSize, nMaskCode);\n-        bool fFirst = vout.size() > 0 && !vout[0].IsNull();\n-        bool fSecond = vout.size() > 1 && !vout[1].IsNull();\n-        assert(fFirst || fSecond || nMaskCode);\n-        unsigned int nCode = 8*(nMaskCode - (fFirst || fSecond ? 0 : 1)) + (fCoinBase ? 1 : 0) + (fFirst ? 2 : 0) + (fSecond ? 4 : 0);\n-        // version\n-        ::Serialize(s, VARINT(this->nVersion), nType, nVersion);\n-        // header code\n-        ::Serialize(s, VARINT(nCode), nType, nVersion);\n-        // spentness bitmask\n-        for (unsigned int b = 0; b<nMaskSize; b++) {\n-            unsigned char chAvail = 0;\n-            for (unsigned int i = 0; i < 8 && 2+b*8+i < vout.size(); i++)\n-                if (!vout[2+b*8+i].IsNull())\n-                    chAvail |= (1 << i);\n-            ::Serialize(s, chAvail, nType, nVersion);\n-        }\n-        // txouts themself\n-        for (unsigned int i = 0; i < vout.size(); i++) {\n-            if (!vout[i].IsNull())\n-                ::Serialize(s, CTxOutCompressor(REF(vout[i])), nType, nVersion);\n-        }\n-        // coinbase height\n-        ::Serialize(s, VARINT(nHeight), nType, nVersion);\n-    }\n-\n-    template<typename Stream>\n-    void Unserialize(Stream &s, int nType, int nVersion) {\n-        unsigned int nCode = 0;\n-        // version\n-        ::Unserialize(s, VARINT(this->nVersion), nType, nVersion);\n-        // header code\n-        ::Unserialize(s, VARINT(nCode), nType, nVersion);\n-        fCoinBase = nCode & 1;\n-        std::vector<bool> vAvail(2, false);\n-        vAvail[0] = nCode & 2;\n-        vAvail[1] = nCode & 4;\n-        unsigned int nMaskCode = (nCode / 8) + ((nCode & 6) != 0 ? 0 : 1);\n-        // spentness bitmask\n-        while (nMaskCode > 0) {\n-            unsigned char chAvail = 0;\n-            ::Unserialize(s, chAvail, nType, nVersion);\n-            for (unsigned int p = 0; p < 8; p++) {\n-                bool f = (chAvail & (1 << p)) != 0;\n-                vAvail.push_back(f);\n-            }\n-            if (chAvail != 0)\n-                nMaskCode--;\n-        }\n-        // txouts themself\n-        vout.assign(vAvail.size(), CTxOut());\n-        for (unsigned int i = 0; i < vAvail.size(); i++) {\n-            if (vAvail[i])\n-                ::Unserialize(s, REF(CTxOutCompressor(vout[i])), nType, nVersion);\n-        }\n-        // coinbase height\n-        ::Unserialize(s, VARINT(nHeight), nType, nVersion);\n-        Cleanup();\n-    }\n-\n-    // mark an outpoint spent, and construct undo information\n-    bool Spend(const COutPoint &out, CTxInUndo &undo) {\n-        if (out.n >= vout.size())\n-            return false;\n-        if (vout[out.n].IsNull())\n-            return false;\n-        undo = CTxInUndo(vout[out.n]);\n-        vout[out.n].SetNull();\n-        Cleanup();\n-        if (vout.size() == 0) {\n-            undo.nHeight = nHeight;\n-            undo.fCoinBase = fCoinBase;\n-            undo.nVersion = this->nVersion;\n-        }\n-        return true;\n-    }\n-\n-    // mark a vout spent\n-    bool Spend(int nPos) {\n-        CTxInUndo undo;\n-        COutPoint out(0, nPos);\n-        return Spend(out, undo);\n-    }\n-\n-    // check whether a particular output is still available\n-    bool IsAvailable(unsigned int nPos) const {\n-        return (nPos < vout.size() && !vout[nPos].IsNull());\n-    }\n-\n-    // check whether the entire CCoins is spent\n-    // note that only !IsPruned() CCoins can be serialized\n-    bool IsPruned() const {\n-        BOOST_FOREACH(const CTxOut &out, vout)\n-            if (!out.IsNull())\n-                return false;\n-        return true;\n-    }\n-};\n \n /** Closure representing one script verification\n  *  Note that this stores references to the spending transaction */"
      }
    ]
  },
  {
    "sha": "48343a0a506398e22349c791717500a20bfff511",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ODM0M2EwYTUwNjM5OGUyMjM0OWM3OTE3MTc1MDBhMjBiZmZmNTEx",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-01-08T17:05:13Z"
      },
      "committer": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-06-06T06:15:20Z"
      },
      "message": "Removed script.cpp's dependence on main.h",
      "tree": {
        "sha": "d10074d99255399b5c9bfe35ec38698e3163160d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d10074d99255399b5c9bfe35ec38698e3163160d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/48343a0a506398e22349c791717500a20bfff511",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/48343a0a506398e22349c791717500a20bfff511",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/48343a0a506398e22349c791717500a20bfff511",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/48343a0a506398e22349c791717500a20bfff511/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "65e7bbef74f7077a5b46943b1556d66d84955f61",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65e7bbef74f7077a5b46943b1556d66d84955f61",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/65e7bbef74f7077a5b46943b1556d66d84955f61"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "cf6eeaf39286afba6a6583f229bab0fa28822a57",
        "filename": "src/script.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/48343a0a506398e22349c791717500a20bfff511/src/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/48343a0a506398e22349c791717500a20bfff511/src/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script.cpp?ref=48343a0a506398e22349c791717500a20bfff511",
        "patch": "@@ -9,10 +9,10 @@ using namespace std;\n using namespace boost;\n \n #include \"script.h\"\n+#include \"core.h\"\n #include \"keystore.h\"\n #include \"bignum.h\"\n #include \"key.h\"\n-#include \"main.h\"\n #include \"sync.h\"\n #include \"util.h\"\n "
      }
    ]
  },
  {
    "sha": "aabdf9e899e9024927c26c194ad38142495f80bf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYWJkZjllODk5ZTkwMjQ5MjdjMjZjMTk0YWQzODE0MjQ5NWY4MGJm",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-01-08T22:58:06Z"
      },
      "committer": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-06-06T06:15:20Z"
      },
      "message": "Moved UpdateTime out of CBlockHeader and moved CBlockHeader into core.",
      "tree": {
        "sha": "736c1df9b5cd042539083b5326b5a684c30a27bb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/736c1df9b5cd042539083b5326b5a684c30a27bb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aabdf9e899e9024927c26c194ad38142495f80bf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aabdf9e899e9024927c26c194ad38142495f80bf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/aabdf9e899e9024927c26c194ad38142495f80bf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aabdf9e899e9024927c26c194ad38142495f80bf/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "48343a0a506398e22349c791717500a20bfff511",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/48343a0a506398e22349c791717500a20bfff511",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/48343a0a506398e22349c791717500a20bfff511"
      }
    ],
    "stats": {
      "total": 141,
      "additions": 71,
      "deletions": 70
    },
    "files": [
      {
        "sha": "cba3ab233fc570a05ef0e5e17ebb01e7eb9b5c6b",
        "filename": "src/core.h",
        "status": "modified",
        "additions": 61,
        "deletions": 0,
        "changes": 61,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aabdf9e899e9024927c26c194ad38142495f80bf/src/core.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aabdf9e899e9024927c26c194ad38142495f80bf/src/core.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core.h?ref=aabdf9e899e9024927c26c194ad38142495f80bf",
        "patch": "@@ -672,4 +672,65 @@ class CCoins\n };\n \n \n+/** Nodes collect new transactions into a block, hash them into a hash tree,\n+ * and scan through nonce values to make the block's hash satisfy proof-of-work\n+ * requirements.  When they solve the proof-of-work, they broadcast the block\n+ * to everyone and the block is added to the block chain.  The first transaction\n+ * in the block is a special one that creates a new coin owned by the creator\n+ * of the block.\n+ */\n+class CBlockHeader\n+{\n+public:\n+    // header\n+    static const int CURRENT_VERSION=2;\n+    int nVersion;\n+    uint256 hashPrevBlock;\n+    uint256 hashMerkleRoot;\n+    unsigned int nTime;\n+    unsigned int nBits;\n+    unsigned int nNonce;\n+\n+    CBlockHeader()\n+    {\n+        SetNull();\n+    }\n+\n+    IMPLEMENT_SERIALIZE\n+    (\n+        READWRITE(this->nVersion);\n+        nVersion = this->nVersion;\n+        READWRITE(hashPrevBlock);\n+        READWRITE(hashMerkleRoot);\n+        READWRITE(nTime);\n+        READWRITE(nBits);\n+        READWRITE(nNonce);\n+    )\n+\n+    void SetNull()\n+    {\n+        nVersion = CBlockHeader::CURRENT_VERSION;\n+        hashPrevBlock = 0;\n+        hashMerkleRoot = 0;\n+        nTime = 0;\n+        nBits = 0;\n+        nNonce = 0;\n+    }\n+\n+    bool IsNull() const\n+    {\n+        return (nBits == 0);\n+    }\n+\n+    uint256 GetHash() const\n+    {\n+        return Hash(BEGIN(nVersion), END(nNonce));\n+    }\n+\n+    int64 GetBlockTime() const\n+    {\n+        return (int64)nTime;\n+    }\n+};\n+\n #endif"
      },
      {
        "sha": "bd40476d4cdfafd2f8481010ac677efc81e7d46b",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aabdf9e899e9024927c26c194ad38142495f80bf/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aabdf9e899e9024927c26c194ad38142495f80bf/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=aabdf9e899e9024927c26c194ad38142495f80bf",
        "patch": "@@ -1300,13 +1300,13 @@ bool ConnectBestBlock(CValidationState &state) {\n     } while(true);\n }\n \n-void CBlockHeader::UpdateTime(const CBlockIndex* pindexPrev)\n+void UpdateTime(CBlockHeader& block, const CBlockIndex* pindexPrev)\n {\n-    nTime = max(pindexPrev->GetMedianTimePast()+1, GetAdjustedTime());\n+    block.nTime = max(pindexPrev->GetMedianTimePast()+1, GetAdjustedTime());\n \n     // Updating time can change work required on testnet:\n     if (fTestNet)\n-        nBits = GetNextWorkRequired(pindexPrev, this);\n+        block.nBits = GetNextWorkRequired(pindexPrev, &block);\n }\n \n \n@@ -4366,7 +4366,7 @@ CBlockTemplate* CreateNewBlock(CReserveKey& reservekey)\n \n         // Fill in header\n         pblock->hashPrevBlock  = pindexPrev->GetBlockHash();\n-        pblock->UpdateTime(pindexPrev);\n+        UpdateTime(*pblock, pindexPrev);\n         pblock->nBits          = GetNextWorkRequired(pindexPrev, pblock);\n         pblock->nNonce         = 0;\n         pblock->vtx[0].vin[0].scriptSig = CScript() << OP_0 << OP_0;\n@@ -4606,7 +4606,7 @@ void static BitcoinMiner(CWallet *pwallet)\n                 break;\n \n             // Update nTime every few seconds\n-            pblock->UpdateTime(pindexPrev);\n+            UpdateTime(*pblock, pindexPrev);\n             nBlockTime = ByteReverse(pblock->nTime);\n             if (fTestNet)\n             {"
      },
      {
        "sha": "f4e80c85ce280a99e7c878aabdfe8a0d7d4c7583",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 3,
        "deletions": 63,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aabdf9e899e9024927c26c194ad38142495f80bf/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aabdf9e899e9024927c26c194ad38142495f80bf/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=aabdf9e899e9024927c26c194ad38142495f80bf",
        "patch": "@@ -180,6 +180,9 @@ bool GetTransaction(const uint256 &hash, CTransaction &tx, uint256 &hashBlock, b\n bool SetBestChain(CValidationState &state, CBlockIndex* pindexNew);\n /** Find the best known block, and make it the tip of the block chain */\n bool ConnectBestBlock(CValidationState &state);\n+\n+void UpdateTime(CBlockHeader& block, const CBlockIndex* pindexPrev);\n+\n /** Create a new block index entry for a given block hash */\n CBlockIndex * InsertBlockIndex(uint256 hash);\n /** Verify a signature */\n@@ -576,69 +579,6 @@ class CPartialMerkleTree\n };\n \n \n-/** Nodes collect new transactions into a block, hash them into a hash tree,\n- * and scan through nonce values to make the block's hash satisfy proof-of-work\n- * requirements.  When they solve the proof-of-work, they broadcast the block\n- * to everyone and the block is added to the block chain.  The first transaction\n- * in the block is a special one that creates a new coin owned by the creator\n- * of the block.\n- */\n-class CBlockHeader\n-{\n-public:\n-    // header\n-    static const int CURRENT_VERSION=2;\n-    int nVersion;\n-    uint256 hashPrevBlock;\n-    uint256 hashMerkleRoot;\n-    unsigned int nTime;\n-    unsigned int nBits;\n-    unsigned int nNonce;\n-\n-    CBlockHeader()\n-    {\n-        SetNull();\n-    }\n-\n-    IMPLEMENT_SERIALIZE\n-    (\n-        READWRITE(this->nVersion);\n-        nVersion = this->nVersion;\n-        READWRITE(hashPrevBlock);\n-        READWRITE(hashMerkleRoot);\n-        READWRITE(nTime);\n-        READWRITE(nBits);\n-        READWRITE(nNonce);\n-    )\n-\n-    void SetNull()\n-    {\n-        nVersion = CBlockHeader::CURRENT_VERSION;\n-        hashPrevBlock = 0;\n-        hashMerkleRoot = 0;\n-        nTime = 0;\n-        nBits = 0;\n-        nNonce = 0;\n-    }\n-\n-    bool IsNull() const\n-    {\n-        return (nBits == 0);\n-    }\n-\n-    uint256 GetHash() const\n-    {\n-        return Hash(BEGIN(nVersion), END(nNonce));\n-    }\n-\n-    int64 GetBlockTime() const\n-    {\n-        return (int64)nTime;\n-    }\n-\n-    void UpdateTime(const CBlockIndex* pindexPrev);\n-};\n-\n class CBlock : public CBlockHeader\n {\n public:"
      },
      {
        "sha": "6f8ac7a112b758ea0baed765e558d1d531146ac8",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aabdf9e899e9024927c26c194ad38142495f80bf/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aabdf9e899e9024927c26c194ad38142495f80bf/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=aabdf9e899e9024927c26c194ad38142495f80bf",
        "patch": "@@ -159,7 +159,7 @@ Value getwork(const Array& params, bool fHelp)\n         CBlock* pblock = &pblocktemplate->block; // pointer for convenience\n \n         // Update nTime\n-        pblock->UpdateTime(pindexPrev);\n+        UpdateTime(*pblock, pindexPrev);\n         pblock->nNonce = 0;\n \n         // Update nExtraNonce\n@@ -289,7 +289,7 @@ Value getblocktemplate(const Array& params, bool fHelp)\n     CBlock* pblock = &pblocktemplate->block; // pointer for convenience\n \n     // Update nTime\n-    pblock->UpdateTime(pindexPrev);\n+    UpdateTime(*pblock, pindexPrev);\n     pblock->nNonce = 0;\n \n     Array transactions;"
      }
    ]
  },
  {
    "sha": "501da2503a39dd88470df89ccc923c696fe6b111",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MDFkYTI1MDNhMzlkZDg4NDcwZGY4OWNjYzkyM2M2OTZmZTZiMTEx",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-06-06T03:21:41Z"
      },
      "committer": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-06-06T06:15:20Z"
      },
      "message": "Using boost::signals2 to message main from net.cpp.",
      "tree": {
        "sha": "52bb9f3eb186bc99d1a8a96435fd78ac09532235",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/52bb9f3eb186bc99d1a8a96435fd78ac09532235"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/501da2503a39dd88470df89ccc923c696fe6b111",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/501da2503a39dd88470df89ccc923c696fe6b111",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/501da2503a39dd88470df89ccc923c696fe6b111",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/501da2503a39dd88470df89ccc923c696fe6b111/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "aabdf9e899e9024927c26c194ad38142495f80bf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aabdf9e899e9024927c26c194ad38142495f80bf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/aabdf9e899e9024927c26c194ad38142495f80bf"
      }
    ],
    "stats": {
      "total": 74,
      "additions": 37,
      "deletions": 37
    },
    "files": [
      {
        "sha": "f8b2b23fd0a8e08e0fee095882b34be6caa3ace0",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/501da2503a39dd88470df89ccc923c696fe6b111/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/501da2503a39dd88470df89ccc923c696fe6b111/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=501da2503a39dd88470df89ccc923c696fe6b111",
        "patch": "@@ -571,10 +571,8 @@ bool AppInit2(boost::thread_group& threadGroup)\n \n     // ********************************************************* Step 6: network initialization\n \n-    SetProcessMessagesHandler(ProcessMessages);\n-    SetSendMessagesHandler(SendMessages);\n-    SetStartShutdownHandler(StartShutdown);\n-    \n+    RegisterNodeSignals(GetNodeSignals());\n+ \n     int nSocksVersion = GetArg(\"-socks\", 5);\n     if (nSocksVersion != 4 && nSocksVersion != 5)\n         return InitError(strprintf(_(\"Unknown -socks proxy version requested: %i\"), nSocksVersion));"
      },
      {
        "sha": "98921e1423ba45294c100505f7da6ca93c0206b0",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/501da2503a39dd88470df89ccc923c696fe6b111/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/501da2503a39dd88470df89ccc923c696fe6b111/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=501da2503a39dd88470df89ccc923c696fe6b111",
        "patch": "@@ -160,7 +160,22 @@ void static ResendWalletTransactions()\n \n \n \n+//////////////////////////////////////////////////////////////////////////////\n+//\n+// Registration of network node signals.\n+//\n+\n+void RegisterNodeSignals(CNodeSignals& nodeSignals)\n+{\n+    nodeSignals.ProcessMessages.connect(&ProcessMessages);\n+    nodeSignals.SendMessages.connect(&SendMessages);\n+}\n \n+void UnregisterNodeSignals(CNodeSignals& nodeSignals)\n+{\n+    nodeSignals.ProcessMessages.disconnect(&ProcessMessages);\n+    nodeSignals.SendMessages.disconnect(&SendMessages);\n+}\n \n \n "
      },
      {
        "sha": "f62cfbef6df0c4a1747d16134afa88f42a5805cb",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/501da2503a39dd88470df89ccc923c696fe6b111/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/501da2503a39dd88470df89ccc923c696fe6b111/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=501da2503a39dd88470df89ccc923c696fe6b111",
        "patch": "@@ -124,6 +124,11 @@ void UnregisterWallet(CWallet* pwalletIn);\n /** Push an updated transaction to all registered wallets */\n void SyncWithWallets(const uint256 &hash, const CTransaction& tx, const CBlock* pblock = NULL, bool fUpdate = false);\n \n+/** Register with a network node to receive its signals */\n+void RegisterNodeSignals(CNodeSignals& nodeSignals);\n+/** Unregister a network node */\n+void UnregisterNodeSignals(CNodeSignals& nodeSignals);\n+\n void PushGetBlocks(CNode* pnode, CBlockIndex* pindexBegin, uint256 hashEnd);\n \n /** Process an incoming block */"
      },
      {
        "sha": "dc9a7e53711ed612a0ff2ca5cba17036d7801945",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 24,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/501da2503a39dd88470df89ccc923c696fe6b111/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/501da2503a39dd88470df89ccc923c696fe6b111/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=501da2503a39dd88470df89ccc923c696fe6b111",
        "patch": "@@ -68,27 +68,9 @@ CCriticalSection cs_vAddedNodes;\n \n static CSemaphore *semOutbound = NULL;\n \n-//\n-// Handlers that need to be registered\n-//\n-static ProcessMessagesHandler fnProcessMessages = NULL;\n-static SendMessagesHandler fnSendMessages = NULL;\n-static StartShutdownHandler fnStartShutdown = NULL;\n-\n-void SetProcessMessagesHandler(ProcessMessagesHandler handler)\n-{\n-    fnProcessMessages = handler;\n-}\n-\n-void SetSendMessagesHandler(SendMessagesHandler handler)\n-{\n-    fnSendMessages = handler;\n-}\n-\n-void SetStartShutdownHandler(StartShutdownHandler handler)\n-{\n-    fnStartShutdown = handler;\n-}\n+// Signals for message handling\n+static CNodeSignals g_signals;\n+CNodeSignals& GetNodeSignals() { return g_signals; }\n \n void AddOneShot(string strDest)\n {\n@@ -1646,16 +1628,16 @@ void ThreadMessageHandler()\n             {\n                 TRY_LOCK(pnode->cs_vRecvMsg, lockRecv);\n                 if (lockRecv)\n-                    if (!ProcessMessages(pnode))\n+                    if (!g_signals.ProcessMessages(pnode))\n                         pnode->CloseSocketDisconnect();\n             }\n             boost::this_thread::interruption_point();\n \n             // Send messages\n             {\n                 TRY_LOCK(pnode->cs_vSend, lockSend);\n-                if (lockSend && fnSendMessages)\n-                    fnSendMessages(pnode, pnode == pnodeTrickle);\n+                if (lockSend)\n+                    g_signals.SendMessages(pnode, pnode == pnodeTrickle);\n             }\n             boost::this_thread::interruption_point();\n         }"
      },
      {
        "sha": "fdac60d9ce798204d9c15e24ad8b38dd483221f2",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/501da2503a39dd88470df89ccc923c696fe6b111/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/501da2503a39dd88470df89ccc923c696fe6b111/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=501da2503a39dd88470df89ccc923c696fe6b111",
        "patch": "@@ -8,6 +8,7 @@\n #include <deque>\n #include <boost/array.hpp>\n #include <boost/foreach.hpp>\n+#include <boost/signals2/signal.hpp>\n #include <openssl/rand.h>\n \n #ifndef WIN32\n@@ -45,16 +46,15 @@ void StartNode(boost::thread_group& threadGroup);\n bool StopNode();\n void SocketSendData(CNode *pnode);\n \n-//\n-// Handlers that require registration\n-//\n-typedef bool (*ProcessMessagesHandler)(CNode* pfrom);\n-typedef bool (*SendMessagesHandler)(CNode* pto, bool fSendTrickle);\n-typedef void (*StartShutdownHandler)();\n+// Signals for message handling\n+struct CNodeSignals\n+{\n+    boost::signals2::signal<bool (CNode*)> ProcessMessages;\n+    boost::signals2::signal<bool (CNode*, bool)> SendMessages;\n+};\n+\n+CNodeSignals& GetNodeSignals();\n \n-void SetProcessMessagesHandler(ProcessMessagesHandler handler);\n-void SetSendMessagesHandler(SendMessagesHandler handler);\n-void SetStartShutdownHandler(StartShutdownHandler handler);\n \n enum\n {"
      }
    ]
  },
  {
    "sha": "6e68524e95da2bedc21b1d95c4a206b902ab7c22",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZTY4NTI0ZTk1ZGEyYmVkYzIxYjFkOTVjNGEyMDZiOTAyYWI3YzIy",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-06-06T07:04:33Z"
      },
      "committer": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-06-06T07:04:33Z"
      },
      "message": "Removed the main.h include from net.cpp.",
      "tree": {
        "sha": "6618fed58e3a03f19255bca779d4da3cc8860d3a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6618fed58e3a03f19255bca779d4da3cc8860d3a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6e68524e95da2bedc21b1d95c4a206b902ab7c22",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6e68524e95da2bedc21b1d95c4a206b902ab7c22",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6e68524e95da2bedc21b1d95c4a206b902ab7c22",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6e68524e95da2bedc21b1d95c4a206b902ab7c22/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "501da2503a39dd88470df89ccc923c696fe6b111",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/501da2503a39dd88470df89ccc923c696fe6b111",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/501da2503a39dd88470df89ccc923c696fe6b111"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 4,
      "deletions": 9
    },
    "files": [
      {
        "sha": "f20fad98a4f4bdc14acaa67876476e767644d895",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e68524e95da2bedc21b1d95c4a206b902ab7c22/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e68524e95da2bedc21b1d95c4a206b902ab7c22/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=6e68524e95da2bedc21b1d95c4a206b902ab7c22",
        "patch": "@@ -35,8 +35,6 @@ static const unsigned int MAX_STANDARD_TX_SIZE = MAX_BLOCK_SIZE_GEN/5;\n static const unsigned int MAX_BLOCK_SIGOPS = MAX_BLOCK_SIZE/50;\n /** The maximum number of orphan transactions kept in memory */\n static const unsigned int MAX_ORPHAN_TRANSACTIONS = MAX_BLOCK_SIZE/100;\n-/** The maximum number of entries in an 'inv' protocol message */\n-static const unsigned int MAX_INV_SZ = 50000;\n /** The maximum size of a blk?????.dat file (since 0.8) */\n static const unsigned int MAX_BLOCKFILE_SIZE = 0x8000000; // 128 MiB\n /** The pre-allocation chunk size for blk?????.dat files (since 0.8) */"
      },
      {
        "sha": "adc5f93029ea215e995bbf0c80d1c7808e2333dd",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 7,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e68524e95da2bedc21b1d95c4a206b902ab7c22/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e68524e95da2bedc21b1d95c4a206b902ab7c22/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=6e68524e95da2bedc21b1d95c4a206b902ab7c22",
        "patch": "@@ -5,7 +5,7 @@\n \n #include \"db.h\"\n #include \"net.h\"\n-#include \"main.h\"\n+#include \"core.h\"\n #include \"addrman.h\"\n #include \"ui_interface.h\"\n #include \"script.h\"\n@@ -1567,11 +1567,6 @@ void static StartSync(const vector<CNode*> &vNodes) {\n     CNode *pnodeNewSync = NULL;\n     double dBestScore = 0;\n \n-    // fImporting and fReindex are accessed out of cs_main here, but only\n-    // as an optimization - they are checked again in SendMessages.\n-    if (fImporting || fReindex)\n-        return;\n-\n     // Iterate over all nodes\n     BOOST_FOREACH(CNode* pnode, vNodes) {\n         // check preconditions for allowing a sync\n@@ -1855,7 +1850,6 @@ bool StopNode()\n {\n     printf(\"StopNode()\\n\");\n     MapPort(false);\n-    nTransactionsUpdated++;\n     if (semOutbound)\n         for (int i=0; i<MAX_OUTBOUND_CONNECTIONS; i++)\n             semOutbound->post();"
      },
      {
        "sha": "e75fe48f6439c9b1d91023f5fc52f0fbcfaba8a7",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e68524e95da2bedc21b1d95c4a206b902ab7c22/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e68524e95da2bedc21b1d95c4a206b902ab7c22/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=6e68524e95da2bedc21b1d95c4a206b902ab7c22",
        "patch": "@@ -23,6 +23,9 @@\n #include \"hash.h\"\n #include \"bloom.h\"\n \n+/** The maximum number of entries in an 'inv' protocol message */\n+static const unsigned int MAX_INV_SZ = 50000;\n+\n class CNode;\n class CBlockIndex;\n extern int nBestHeight;"
      }
    ]
  }
]