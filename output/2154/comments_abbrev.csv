gavinandresen,2013-01-07T14:53:59Z,Why namespace db_cpp ?  Seems to me the database copy of pchMessageStart could be a static member of the DbEnv.\n,https://github.com/bitcoin/bitcoin/pull/2154#issuecomment-11954241,11954241,
CodeShark,2013-01-07T15:19:41Z,I'd rather avoid adding more dependencies in CAddrDB for something that isn't really used elsewhere.\n,https://github.com/bitcoin/bitcoin/pull/2154#issuecomment-11955199,11955199,
sipa,2013-01-07T15:34:54Z,"@gavinandresen That doesn't make sense. This is for peers.dat, which doesn't use BDB at all, and I suppose CDbEnv will be gone as soon as we kick out BDB-based wallets.\n",https://github.com/bitcoin/bitcoin/pull/2154#issuecomment-11955851,11955851,
CodeShark,2013-01-07T16:38:33Z,"I'm still not clear on exactly where in the code it's best to:\n1) set the magic bytes for CAddrDB\n2) Set the call handlers for net.cpp\n\nI tried running and got this error: http://pastebin.com/tJU9Gsi2\nBut tried restarting and it initialized correctly, and now it seems to be running fine.\n",https://github.com/bitcoin/bitcoin/pull/2154#issuecomment-11958863,11958863,
BitcoinPullTester,2013-01-07T17:23:28Z,"Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/03014e2ff26d4ab6195f8b0bfc29c712dec509de for binaries and test log.\n",https://github.com/bitcoin/bitcoin/pull/2154#issuecomment-11961014,11961014,
gavinandresen,2013-01-07T22:07:49Z,"RE: namespace db_cpp:\n\nFine, make it static in CAddrDB, I forgot that peers.dat is not a BDB file (and pass it into CAddrDB constructors?  or is CAddrDB a singleton class? )\n",https://github.com/bitcoin/bitcoin/pull/2154#issuecomment-11974287,11974287,
CodeShark,2013-01-08T04:05:34Z,@gavinandresen Noted and done.\n,https://github.com/bitcoin/bitcoin/pull/2154#issuecomment-11983843,11983843,
CodeShark,2013-01-08T05:21:36Z,cp: writing `out/bitcoind.exe': No space left on device\ncp: writing`out/test_bitcoin.exe': No space left on device\n\nWTF?!?!?!\n\nShall we all chip in and get BlueMatt some more hard disk space?\n,https://github.com/bitcoin/bitcoin/pull/2154#issuecomment-11985144,11985144,
CodeShark,2013-01-08T12:42:22Z,I am going to keep pushing commits as an extra backup despite BitcoinPullTester being out of disk space.\n,https://github.com/bitcoin/bitcoin/pull/2154#issuecomment-11995664,11995664,
Diapolo,2013-01-08T13:49:21Z,"I think you are doing good work, but I'm sure you will get faster ACKs or merges, if you try to keep pulls smaller. Perhaps @sipa or other core devs can comment.\n",https://github.com/bitcoin/bitcoin/pull/2154#issuecomment-11997567,11997567,
gavinandresen,2013-01-08T14:02:56Z,"Our bottleneck is code review and testing.\n\nIf you want your pulls to get merged, then you need to help fix that bottleneck-- either recruit reviewers/testers to review/test your own code, or volunteer to help review/test other people's pulls.\n\nOr only refactor code that has good unit tests, so we can be more confident that nothing breaks on any of the three platforms we support.\n\nI am gener",https://github.com/bitcoin/bitcoin/pull/2154#issuecomment-11998020,11998020,
gavinandresen,2013-01-08T14:06:20Z,"Oh, also:  you might want to help test or update https://github.com/libcoin/libcoin which is a fully refactored version of the core code, that, last I checked, nobody used because nobody trusts it (because so many changes were made without thorough testing).\n",https://github.com/bitcoin/bitcoin/pull/2154#issuecomment-11998134,11998134,
CodeShark,2013-01-08T16:30:06Z,"The changes I'm making will be well-documented and possible to rigorously review. And if more unit tests are needed, I'd be glad to help write some up.\n\nI'm making incremental changes, hopefully each change easy to understand and track. I haven't changed any actual logic in the code nor implementation details - just moved code around - and in large chunks, not small pieces.\n\nAs most of the sig",https://github.com/bitcoin/bitcoin/pull/2154#issuecomment-12004408,12004408,
CodeShark,2013-01-08T16:46:57Z,"Also, I'm willing to do comprehensive testing on earlier commits with the hope of getting them merged without having to merge everything at once.\n",https://github.com/bitcoin/bitcoin/pull/2154#issuecomment-12005270,12005270,
BitcoinPullTester,2013-01-08T20:48:43Z,"Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/4af9a6c7e0d1246852195b47c200a974dff47ab1 for binaries and test log.\n",https://github.com/bitcoin/bitcoin/pull/2154#issuecomment-12016496,12016496,
sipa,2013-01-08T21:05:49Z,"Just for the record: I've been discussing these changes extensively with @CodeShark the past few days, and I think they are very valuable. They should make the code easier to understand and reuse.\n\nGetting 0.8 out now certainly has priority over refactorings, but as these are almost entirely just code-movement changes, merging them shouldn't be too hard.\n",https://github.com/bitcoin/bitcoin/pull/2154#issuecomment-12017209,12017209,
BitcoinPullTester,2013-01-09T00:03:29Z,"Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/aea31289a59166195d2d7270eacb0905b14d476a for binaries and test log.\n",https://github.com/bitcoin/bitcoin/pull/2154#issuecomment-12024460,12024460,
BitcoinPullTester,2013-01-09T06:33:36Z,"Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/366fb8aa64a581c22064dae33a3d08769375b9f3 for binaries and test log.\n",https://github.com/bitcoin/bitcoin/pull/2154#issuecomment-12033350,12033350,
CodeShark,2013-01-23T17:11:26Z,The core commits will be reorganized into four stages:\n- 1) move core class methods that should remain class methods implemented in main.cpp out of main.cpp and into core.cpp. (move)\n- 2) move core class method implementations in main.h that should not be part of core classes out of the class declarations in main.h. (move)\n- 3) turn methods that should not be part of the core classes into regul,https://github.com/bitcoin/bitcoin/pull/2154#issuecomment-12610332,12610332,
BitcoinPullTester,2013-01-24T04:24:12Z,"Automatic sanity-testing: FAILED MERGE, see http://jenkins.bluematt.me/pull-tester/366fb8aa64a581c22064dae33a3d08769375b9f3 for test log.\n\nThis pull does not merge cleanly onto current master\n",https://github.com/bitcoin/bitcoin/pull/2154#issuecomment-12636618,12636618,
luke-jr,2013-01-30T18:37:05Z,Rebase needed\n,https://github.com/bitcoin/bitcoin/pull/2154#issuecomment-12904904,12904904,
Diapolo,2013-01-30T18:39:10Z,I'm sure @CodeShark intents to rework this pull into smaller more logical pieces after 0.8 is final.\n,https://github.com/bitcoin/bitcoin/pull/2154#issuecomment-12905016,12905016,
jgarzik,2013-06-04T17:40:19Z,"OK, very much like where this code is going.  ACK 90% of it, modulo inline comments made earlier.\n\nOne specific criticism with this rebase:  the rebase problems were all fixed in a final, appended commit.  That does not work, because it breaks bisection properties.  Each commit needs to produce a tree that is buildable and passes tests.  Otherwise, ""git bisect"" will not work, and attempting to f",https://github.com/bitcoin/bitcoin/pull/2154#issuecomment-18926011,18926011,
sipa,2013-06-04T17:44:29Z,"I'm very much in favor of the code changes here (and they look move-only to, apart from the registration functions). It's only a first step, but it's a very needed one IMHO.\n\nI agree with the comment about the last commit fixing everything, but apart from that, I'd like to see this merged soon. Since now seems the ideal time for this, I don't mind holding up other pullreqs for a short time, so t",https://github.com/bitcoin/bitcoin/pull/2154#issuecomment-18926293,18926293,
jgarzik,2013-06-04T17:47:07Z,"Agreed, RE holding other pullreqs, to avoid the endless rebase pain on @CodeShark 's part.\n",https://github.com/bitcoin/bitcoin/pull/2154#issuecomment-18926462,18926462,
CodeShark,2013-06-05T03:24:24Z,I'll try to get this done today.\n,https://github.com/bitcoin/bitcoin/pull/2154#issuecomment-18953522,18953522,
CodeShark,2013-06-05T10:43:37Z,All the commits build with make -f makefile.unix now.\n\nStill left to do:\n- Move CBlock to core\n- Remove main.h include in net.cpp.\n- Unit tests\n,https://github.com/bitcoin/bitcoin/pull/2154#issuecomment-18968056,18968056,
CodeShark,2013-06-05T13:22:52Z,The unit tests have run successfully on all the commits in linux. Need a few more eyes to review for correctness and some help with a few more tests on other platforms. As for the other two things I had listed as TODOs - moving CBlock to core and removing the main.h include from net - I'd rather merge what we have now and do these things later.\n,https://github.com/bitcoin/bitcoin/pull/2154#issuecomment-18975027,18975027,
jgarzik,2013-06-05T13:33:45Z,"OK, looks pretty good.\n\nACK everything except the indirect function pointer stuff.  Definite NAK on the function pointers.  Let's fix that up, and we can get this merged.\n",https://github.com/bitcoin/bitcoin/pull/2154#issuecomment-18975560,18975560,
CodeShark,2013-06-05T13:53:25Z,What do you suggest in place of the function pointers?\n,https://github.com/bitcoin/bitcoin/pull/2154#issuecomment-18976753,18976753,
sipa,2013-06-05T13:58:59Z,"@jgarzik Not sure you see the reason for those indirect pointers. They are there to break the dependency of net on main, and seen as such it seems perhaps weird, if the only user of net is main for now.\n\nHowever, over time, net should turn into a class ""CNetworkNode"" or something, which exposes a way to listen for events. I suppose a boost::signal could be used right now instead, which more clea",https://github.com/bitcoin/bitcoin/pull/2154#issuecomment-18977111,18977111,
CodeShark,2013-06-05T14:00:03Z,"If there's any reasonable critique of the function pointers it's about style, not performance. A more general-purpose messaging system would be very nice - but in absence of a clear design, at least the function pointers avoid any dependencies on outside libraries.\n",https://github.com/bitcoin/bitcoin/pull/2154#issuecomment-18977190,18977190,
gavinandresen,2013-06-05T14:09:41Z,"I'd also prefer boost::signals2 over registering function pointers. We're already using them elsewhere in the code, and it is exactly the type of decoupling they are designed for.\n",https://github.com/bitcoin/bitcoin/pull/2154#issuecomment-18977837,18977837,
laanwj,2013-06-05T14:19:46Z,"Agree with Gavin on boost::signal2, let's avoid raw function pointers in c++\n",https://github.com/bitcoin/bitcoin/pull/2154#issuecomment-18978497,18978497,
CodeShark,2013-06-05T14:21:33Z,"Very well, I agree it's a cleaner solution.\n",https://github.com/bitcoin/bitcoin/pull/2154#issuecomment-18978640,18978640,
CodeShark,2013-06-05T15:20:25Z,I'll add signals later today...\n,https://github.com/bitcoin/bitcoin/pull/2154#issuecomment-18983753,18983753,
sipa,2013-06-05T18:13:21Z,Just so this isn't forgotten: @TheUni just noticed this doesn't update makefiles (yet)\n,https://github.com/bitcoin/bitcoin/pull/2154#issuecomment-18996278,18996278,
robbak,2013-06-06T01:00:14Z,"ACK for FreeBSD - this branch builds and runs clean with the standard\nFreeBSD adjustments.\n\nOn 6 June 2013 04:13, Pieter Wuille notifications@github.com wrote:\n\n> Just so this isn't forgotten: @TheUni https://github.com/TheUni just\n> noticed this doesn't update makefiles (yet)\n> \n> —\n> Reply to this email directly or view it on GitHubhttps://github.com/bitcoin/bitcoin/pull/2154#issuecomme",https://github.com/bitcoin/bitcoin/pull/2154#issuecomment-19019106,19019106,
CodeShark,2013-06-06T02:26:18Z,"@sipa I have deliberately avoided putting anything in core.cpp to avoid makefile issues for this merge. Eventually, it will probably make sense to move some of the code in core.h into core.cpp.\n",https://github.com/bitcoin/bitcoin/pull/2154#issuecomment-19021448,19021448,
CodeShark,2013-06-06T04:36:07Z,"When I had worked on this originally, net.cpp was calling StartShutdown directly. Happily, this has since been removed.\n\nI had overlooked the fact that ProcessMessages was still being called directly from net.cpp. I'll fix the appropriate commits once everyone agrees with the messaging approach.\n",https://github.com/bitcoin/bitcoin/pull/2154#issuecomment-19024477,19024477,
sipa,2013-06-06T04:49:38Z,"@CodeShark You'll still at least need to add core.h to bitcoin-qt.pro, and while you're on it, I don't see any harm in adding core.cpp to the other makefiles too - that'll make it easier to move stuff there in the future.\n",https://github.com/bitcoin/bitcoin/pull/2154#issuecomment-19024746,19024746,
CodeShark,2013-06-06T06:17:41Z,@sipa done\n@TheUni core.h/core.cpp will have to be considered in what you're doing\n,https://github.com/bitcoin/bitcoin/pull/2154#issuecomment-19026897,19026897,
CodeShark,2013-06-06T07:25:20Z,"Sorry, hit the close button by accident.\n",https://github.com/bitcoin/bitcoin/pull/2154#issuecomment-19028913,19028913,
CodeShark,2013-06-06T07:42:14Z,Alright - code freeze until merge.\n,https://github.com/bitcoin/bitcoin/pull/2154#issuecomment-19029536,19029536,
sipa,2013-06-07T09:38:08Z,"ACK. Code changes look good to me, and I've tested syncing/mining/receiving/sending on testnet. I have a few inline comments left, but those can be dealt with in follow-up commits, so we don't need to stall the merging process too long.\n",https://github.com/bitcoin/bitcoin/pull/2154#issuecomment-19097651,19097651,
laanwj,2013-06-09T19:09:05Z,"I've tested this commit on testnet, no problems found.\n",https://github.com/bitcoin/bitcoin/pull/2154#issuecomment-19171474,19171474,
sipa,2013-01-08T19:27:30Z,Can these be static?\n,https://github.com/bitcoin/bitcoin/pull/2154#discussion_r2581356,2581356,src/net.cpp
sipa,2013-01-08T21:15:16Z,"Is this ""this->"" necessary?\n",https://github.com/bitcoin/bitcoin/pull/2154#discussion_r2582766,2582766,src/main.cpp
CodeShark,2013-01-08T21:27:28Z,"nah, it's mostly a stylistic thing, I guess. I can get rid of it if you don't like it.\n",https://github.com/bitcoin/bitcoin/pull/2154#discussion_r2582926,2582926,src/main.cpp
sipa,2013-06-04T17:31:35Z,Is this needed?\n,https://github.com/bitcoin/bitcoin/pull/2154#discussion_r4528115,4528115,src/wallet.h
sipa,2013-06-04T17:33:43Z,"Any reason why CBlock doesn't move to core.h? Or just a ""first the easy parts""?\n",https://github.com/bitcoin/bitcoin/pull/2154#discussion_r4528180,4528180,src/main.h
CodeShark,2013-06-05T03:23:55Z,"I want to get what I had already done rebased correctly before moving CBlock - but yes, definitely that comes immediately after.\n",https://github.com/bitcoin/bitcoin/pull/2154#discussion_r4538289,4538289,src/main.h
sipa,2013-06-07T09:11:56Z,"This duplication is quite ugly. Mike's refactor that moves these chain-dependent constants to a separate class is nicer, but you may want to check that it doesn't introduce new dependencies.\n",https://github.com/bitcoin/bitcoin/pull/2154#discussion_r4585222,4585222,src/db.cpp
laanwj,2013-06-09T07:53:13Z,Why have this implementation file that only includes a header?\n,https://github.com/bitcoin/bitcoin/pull/2154#discussion_r4603590,4603590,src/core.cpp
sipa,2013-06-09T08:20:49Z,"More things are intended to be moved to core (in particular, CBlock), in a second step. As those will include implementation code too, already create a file for them, so e.g. #2748 picks it up already.\n",https://github.com/bitcoin/bitcoin/pull/2154#discussion_r4603632,4603632,src/core.cpp
