[
  {
    "sha": "a7e3c2814c8e49197889a4679461be42254e5c51",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphN2UzYzI4MTRjOGU0OTE5Nzg4OWE0Njc5NDYxYmU0MjI1NGU1YzUx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-05-30T09:59:42Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-06-05T11:35:30Z"
      },
      "message": "rpc: Add listen address to incoming connections in `getpeerinfo`\n\nThis adds the listening address on which incoming connections were received to the\nCNode and CNodeStats structures.\n\nThe address is reported in `getpeerinfo`.\n\nThis can be useful for distinguishing connections received on different listening ports\n(e.g. when using a different listening port for Tor hidden service connections)\nor different networks.",
      "tree": {
        "sha": "40b9e7b5c3f088f52c2041282f5239bd90e73f81",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/40b9e7b5c3f088f52c2041282f5239bd90e73f81"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a7e3c2814c8e49197889a4679461be42254e5c51",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7e3c2814c8e49197889a4679461be42254e5c51",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a7e3c2814c8e49197889a4679461be42254e5c51",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7e3c2814c8e49197889a4679461be42254e5c51/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "400fdd08cc95f1e85afafd07ddd9c0bed11483ea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/400fdd08cc95f1e85afafd07ddd9c0bed11483ea",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/400fdd08cc95f1e85afafd07ddd9c0bed11483ea"
      }
    ],
    "stats": {
      "total": 59,
      "additions": 46,
      "deletions": 13
    },
    "files": [
      {
        "sha": "14ac5618eb87d4d7a70919323cb83ca0c2811e24",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 5,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7e3c2814c8e49197889a4679461be42254e5c51/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7e3c2814c8e49197889a4679461be42254e5c51/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=a7e3c2814c8e49197889a4679461be42254e5c51",
        "patch": "@@ -340,6 +340,22 @@ bool CConnman::CheckIncomingNonce(uint64_t nonce)\n     return true;\n }\n \n+/** Get the bind address for a socket as CAddress */\n+static CAddress GetBindAddress(SOCKET sock)\n+{\n+    CAddress addr_bind;\n+    struct sockaddr_storage sockaddr_bind;\n+    socklen_t sockaddr_bind_len = sizeof(sockaddr_bind);\n+    if (sock != INVALID_SOCKET) {\n+        if (!getsockname(sock, (struct sockaddr*)&sockaddr_bind, &sockaddr_bind_len)) {\n+            addr_bind.SetSockAddr((const struct sockaddr*)&sockaddr_bind);\n+        } else {\n+            LogPrint(BCLog::NET, \"Warning: getsockname failed\\n\");\n+        }\n+    }\n+    return addr_bind;\n+}\n+\n CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCountFailure)\n {\n     if (pszDest == NULL) {\n@@ -393,7 +409,8 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n         // Add node\n         NodeId id = GetNewNodeId();\n         uint64_t nonce = GetDeterministicRandomizer(RANDOMIZER_ID_LOCALHOSTNONCE).Write(id).Finalize();\n-        CNode* pnode = new CNode(id, nLocalServices, GetBestHeight(), hSocket, addrConnect, CalculateKeyedNetGroup(addrConnect), nonce, pszDest ? pszDest : \"\", false);\n+        CAddress addr_bind = GetBindAddress(hSocket);\n+        CNode* pnode = new CNode(id, nLocalServices, GetBestHeight(), hSocket, addrConnect, CalculateKeyedNetGroup(addrConnect), nonce, addr_bind, pszDest ? pszDest : \"\", false);\n         pnode->nServicesExpected = ServiceFlags(addrConnect.nServices & nRelevantServices);\n         pnode->AddRef();\n \n@@ -635,6 +652,7 @@ void CNode::copyStats(CNodeStats &stats)\n     stats.nodeid = this->GetId();\n     X(nServices);\n     X(addr);\n+    X(addrBind);\n     {\n         LOCK(cs_filter);\n         X(fRelayTxes);\n@@ -1036,9 +1054,11 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n     int nInbound = 0;\n     int nMaxInbound = nMaxConnections - (nMaxOutbound + nMaxFeeler);\n \n-    if (hSocket != INVALID_SOCKET)\n-        if (!addr.SetSockAddr((const struct sockaddr*)&sockaddr))\n+    if (hSocket != INVALID_SOCKET) {\n+        if (!addr.SetSockAddr((const struct sockaddr*)&sockaddr)) {\n             LogPrintf(\"Warning: Unknown socket family\\n\");\n+        }\n+    }\n \n     bool whitelisted = hListenSocket.whitelisted || IsWhitelistedRange(addr);\n     {\n@@ -1092,8 +1112,9 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n \n     NodeId id = GetNewNodeId();\n     uint64_t nonce = GetDeterministicRandomizer(RANDOMIZER_ID_LOCALHOSTNONCE).Write(id).Finalize();\n+    CAddress addr_bind = GetBindAddress(hSocket);\n \n-    CNode* pnode = new CNode(id, nLocalServices, GetBestHeight(), hSocket, addr, CalculateKeyedNetGroup(addr), nonce, \"\", true);\n+    CNode* pnode = new CNode(id, nLocalServices, GetBestHeight(), hSocket, addr, CalculateKeyedNetGroup(addr), nonce, addr_bind, \"\", true);\n     pnode->AddRef();\n     pnode->fWhitelisted = whitelisted;\n     GetNodeSignals().InitializeNode(pnode, *this);\n@@ -2639,9 +2660,10 @@ int CConnman::GetBestHeight() const\n unsigned int CConnman::GetReceiveFloodSize() const { return nReceiveFloodSize; }\n unsigned int CConnman::GetSendBufferSize() const{ return nSendBufferMaxSize; }\n \n-CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn, SOCKET hSocketIn, const CAddress& addrIn, uint64_t nKeyedNetGroupIn, uint64_t nLocalHostNonceIn, const std::string& addrNameIn, bool fInboundIn) :\n+CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn, SOCKET hSocketIn, const CAddress& addrIn, uint64_t nKeyedNetGroupIn, uint64_t nLocalHostNonceIn, const CAddress &addrBindIn, const std::string& addrNameIn, bool fInboundIn) :\n     nTimeConnected(GetSystemTimeInSeconds()),\n     addr(addrIn),\n+    addrBind(addrBindIn),\n     fInbound(fInboundIn),\n     nKeyedNetGroup(nKeyedNetGroupIn),\n     addrKnown(5000, 0.001),"
      },
      {
        "sha": "b89c13a90d09cc700e9aa1ff13482097a5b9624b",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 9,
        "deletions": 1,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7e3c2814c8e49197889a4679461be42254e5c51/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7e3c2814c8e49197889a4679461be42254e5c51/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=a7e3c2814c8e49197889a4679461be42254e5c51",
        "patch": "@@ -504,8 +504,12 @@ class CNodeStats\n     double dPingTime;\n     double dPingWait;\n     double dMinPing;\n+    // Our address, as reported by the peer\n     std::string addrLocal;\n+    // Address of this peer\n     CAddress addr;\n+    // Bind address of our side of the connection\n+    CAddress addrBind;\n };\n \n \n@@ -586,7 +590,10 @@ class CNode\n     std::atomic<int64_t> nLastRecv;\n     const int64_t nTimeConnected;\n     std::atomic<int64_t> nTimeOffset;\n+    // Address of this peer\n     const CAddress addr;\n+    // Bind address of our side of the connection\n+    const CAddress addrBind;\n     std::atomic<int> nVersion;\n     // strSubVer is whatever byte array we read from the wire. However, this field is intended\n     // to be printed out, displayed to humans in various forms and so on. So we sanitize it and\n@@ -676,7 +683,7 @@ class CNode\n     CAmount lastSentFeeFilter;\n     int64_t nextSendTimeFeeFilter;\n \n-    CNode(NodeId id, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn, SOCKET hSocketIn, const CAddress &addrIn, uint64_t nKeyedNetGroupIn, uint64_t nLocalHostNonceIn, const std::string &addrNameIn = \"\", bool fInboundIn = false);\n+    CNode(NodeId id, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn, SOCKET hSocketIn, const CAddress &addrIn, uint64_t nKeyedNetGroupIn, uint64_t nLocalHostNonceIn, const CAddress &addrBindIn, const std::string &addrNameIn = \"\", bool fInboundIn = false);\n     ~CNode();\n \n private:\n@@ -695,6 +702,7 @@ class CNode\n     mutable CCriticalSection cs_addrName;\n     std::string addrName;\n \n+    // Our address, as reported by the peer\n     CService addrLocal;\n     mutable CCriticalSection cs_addrLocal;\n public:"
      },
      {
        "sha": "10bf99eb386d92ff50ca0fb4f0b6f92e54259062",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7e3c2814c8e49197889a4679461be42254e5c51/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7e3c2814c8e49197889a4679461be42254e5c51/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=a7e3c2814c8e49197889a4679461be42254e5c51",
        "patch": "@@ -76,7 +76,8 @@ UniValue getpeerinfo(const JSONRPCRequest& request)\n             \"  {\\n\"\n             \"    \\\"id\\\": n,                   (numeric) Peer index\\n\"\n             \"    \\\"addr\\\":\\\"host:port\\\",      (string) The ip address and port of the peer\\n\"\n-            \"    \\\"addrlocal\\\":\\\"ip:port\\\",   (string) local address\\n\"\n+            \"    \\\"addrbind\\\":\\\"ip:port\\\",    (string) Bind address of the connection to the peer\\n\"\n+            \"    \\\"addrlocal\\\":\\\"ip:port\\\",   (string) Local address as reported by the peer\\n\"\n             \"    \\\"services\\\":\\\"xxxxxxxxxxxxxxxx\\\",   (string) The services offered\\n\"\n             \"    \\\"relaytxes\\\":true|false,    (boolean) Whether peer has asked us to relay transactions to it\\n\"\n             \"    \\\"lastsend\\\": ttt,           (numeric) The time in seconds since epoch (Jan 1 1970 GMT) of the last send\\n\"\n@@ -133,6 +134,8 @@ UniValue getpeerinfo(const JSONRPCRequest& request)\n         obj.push_back(Pair(\"addr\", stats.addrName));\n         if (!(stats.addrLocal.empty()))\n             obj.push_back(Pair(\"addrlocal\", stats.addrLocal));\n+        if (stats.addrBind.IsValid())\n+            obj.push_back(Pair(\"addrbind\", stats.addrBind.ToString()));\n         obj.push_back(Pair(\"services\", strprintf(\"%016x\", stats.nServices)));\n         obj.push_back(Pair(\"relaytxes\", stats.fRelayTxes));\n         obj.push_back(Pair(\"lastsend\", stats.nLastSend));"
      },
      {
        "sha": "e6b45a3b5efe38e502a2332dfef598fa300d0cec",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7e3c2814c8e49197889a4679461be42254e5c51/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7e3c2814c8e49197889a4679461be42254e5c51/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=a7e3c2814c8e49197889a4679461be42254e5c51",
        "patch": "@@ -51,7 +51,7 @@ BOOST_AUTO_TEST_CASE(DoS_banning)\n \n     connman->ClearBanned();\n     CAddress addr1(ip(0xa0b0c001), NODE_NONE);\n-    CNode dummyNode1(id++, NODE_NETWORK, 0, INVALID_SOCKET, addr1, 0, 0, \"\", true);\n+    CNode dummyNode1(id++, NODE_NETWORK, 0, INVALID_SOCKET, addr1, 0, 0, CAddress(), \"\", true);\n     dummyNode1.SetSendVersion(PROTOCOL_VERSION);\n     GetNodeSignals().InitializeNode(&dummyNode1, *connman);\n     dummyNode1.nVersion = 1;\n@@ -62,7 +62,7 @@ BOOST_AUTO_TEST_CASE(DoS_banning)\n     BOOST_CHECK(!connman->IsBanned(ip(0xa0b0c001|0x0000ff00))); // Different IP, not banned\n \n     CAddress addr2(ip(0xa0b0c002), NODE_NONE);\n-    CNode dummyNode2(id++, NODE_NETWORK, 0, INVALID_SOCKET, addr2, 1, 1, \"\", true);\n+    CNode dummyNode2(id++, NODE_NETWORK, 0, INVALID_SOCKET, addr2, 1, 1, CAddress(), \"\", true);\n     dummyNode2.SetSendVersion(PROTOCOL_VERSION);\n     GetNodeSignals().InitializeNode(&dummyNode2, *connman);\n     dummyNode2.nVersion = 1;\n@@ -83,7 +83,7 @@ BOOST_AUTO_TEST_CASE(DoS_banscore)\n     connman->ClearBanned();\n     ForceSetArg(\"-banscore\", \"111\"); // because 11 is my favorite number\n     CAddress addr1(ip(0xa0b0c001), NODE_NONE);\n-    CNode dummyNode1(id++, NODE_NETWORK, 0, INVALID_SOCKET, addr1, 3, 1, \"\", true);\n+    CNode dummyNode1(id++, NODE_NETWORK, 0, INVALID_SOCKET, addr1, 3, 1, CAddress(), \"\", true);\n     dummyNode1.SetSendVersion(PROTOCOL_VERSION);\n     GetNodeSignals().InitializeNode(&dummyNode1, *connman);\n     dummyNode1.nVersion = 1;\n@@ -109,7 +109,7 @@ BOOST_AUTO_TEST_CASE(DoS_bantime)\n     SetMockTime(nStartTime); // Overrides future calls to GetTime()\n \n     CAddress addr(ip(0xa0b0c001), NODE_NONE);\n-    CNode dummyNode(id++, NODE_NETWORK, 0, INVALID_SOCKET, addr, 4, 4, \"\", true);\n+    CNode dummyNode(id++, NODE_NETWORK, 0, INVALID_SOCKET, addr, 4, 4, CAddress(), \"\", true);\n     dummyNode.SetSendVersion(PROTOCOL_VERSION);\n     GetNodeSignals().InitializeNode(&dummyNode, *connman);\n     dummyNode.nVersion = 1;"
      },
      {
        "sha": "66354699b2ce2854dbad1a56fac12a8fc09cd509",
        "filename": "src/test/net_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7e3c2814c8e49197889a4679461be42254e5c51/src/test/net_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7e3c2814c8e49197889a4679461be42254e5c51/src/test/net_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/net_tests.cpp?ref=a7e3c2814c8e49197889a4679461be42254e5c51",
        "patch": "@@ -175,12 +175,12 @@ BOOST_AUTO_TEST_CASE(cnode_simple_test)\n     bool fInboundIn = false;\n \n     // Test that fFeeler is false by default.\n-    std::unique_ptr<CNode> pnode1(new CNode(id++, NODE_NETWORK, height, hSocket, addr, 0, 0, pszDest, fInboundIn));\n+    std::unique_ptr<CNode> pnode1(new CNode(id++, NODE_NETWORK, height, hSocket, addr, 0, 0, CAddress(), pszDest, fInboundIn));\n     BOOST_CHECK(pnode1->fInbound == false);\n     BOOST_CHECK(pnode1->fFeeler == false);\n \n     fInboundIn = true;\n-    std::unique_ptr<CNode> pnode2(new CNode(id++, NODE_NETWORK, height, hSocket, addr, 1, 1, pszDest, fInboundIn));\n+    std::unique_ptr<CNode> pnode2(new CNode(id++, NODE_NETWORK, height, hSocket, addr, 1, 1, CAddress(), pszDest, fInboundIn));\n     BOOST_CHECK(pnode2->fInbound == true);\n     BOOST_CHECK(pnode2->fFeeler == false);\n }"
      }
    ]
  },
  {
    "sha": "3457331386f2e38fda69cd3cff93a2e13984df57",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNDU3MzMxMzg2ZjJlMzhmZGE2OWNkM2NmZjkzYTJlMTM5ODRkZjU3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-06-05T11:57:13Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-06-05T11:57:13Z"
      },
      "message": "test: Add test for `getpeerinfo` `bindaddr` field",
      "tree": {
        "sha": "f1d7d24714718b98509604f70726b56650eea243",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f1d7d24714718b98509604f70726b56650eea243"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3457331386f2e38fda69cd3cff93a2e13984df57",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3457331386f2e38fda69cd3cff93a2e13984df57",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3457331386f2e38fda69cd3cff93a2e13984df57",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3457331386f2e38fda69cd3cff93a2e13984df57/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a7e3c2814c8e49197889a4679461be42254e5c51",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7e3c2814c8e49197889a4679461be42254e5c51",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a7e3c2814c8e49197889a4679461be42254e5c51"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 7,
      "deletions": 0
    },
    "files": [
      {
        "sha": "3ba3764cf9e8d375a9ab2f30c49fee990ead0aa6",
        "filename": "test/functional/net.py",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3457331386f2e38fda69cd3cff93a2e13984df57/test/functional/net.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3457331386f2e38fda69cd3cff93a2e13984df57/test/functional/net.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/net.py?ref=3457331386f2e38fda69cd3cff93a2e13984df57",
        "patch": "@@ -29,6 +29,7 @@ def run_test(self):\n         self._test_getnettotals()\n         self._test_getnetworkinginfo()\n         self._test_getaddednodeinfo()\n+        self._test_getpeerinfo()\n \n     def _test_connection_count(self):\n         # connect_nodes_bi connects each node to the other\n@@ -88,6 +89,12 @@ def _test_getaddednodeinfo(self):\n         assert_raises_jsonrpc(-24, \"Node has not been added\",\n                               self.nodes[0].getaddednodeinfo, '1.1.1.1')\n \n+    def _test_getpeerinfo(self):\n+        peer_info = [x.getpeerinfo() for x in self.nodes]\n+        # check both sides of bidirectional connection between nodes\n+        # the address bound to on one side will be the source address for the other node\n+        assert_equal(peer_info[0][0]['addrbind'], peer_info[1][0]['addr'])\n+        assert_equal(peer_info[1][0]['addrbind'], peer_info[0][0]['addr'])\n \n if __name__ == '__main__':\n     NetTest().main()"
      }
    ]
  }
]