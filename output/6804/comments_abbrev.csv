MarcoFalke,2015-10-12T08:05:18Z,Is it required to have the coverage tempdir? Couldn't this be done in memory without disk io?\n,https://github.com/bitcoin/bitcoin/pull/6804#issuecomment-147323782,147323782,
jamesob,2015-10-12T15:37:59Z,"@MarcoFalke I can't see how that would work given that we call the individual test scripts [in separate subprocesses](https://github.com/jamesob/bitcoin/blob/rpc_coverage/qa/pull-tester/rpc-tests.py#L124-L130), but agree that would be preferable if possible.\n",https://github.com/bitcoin/bitcoin/pull/6804#issuecomment-147440808,147440808,
jamesob,2015-10-12T16:54:10Z,Yargh... build failure due to https://github.com/bitcoin/bitcoin/issues/6778. Going to try rerunning.\n,https://github.com/bitcoin/bitcoin/pull/6804#issuecomment-147459793,147459793,
laanwj,2015-10-13T09:47:04Z,"Concept ACK, although there seems to be overlap (at least in purpose) with #6813 \n",https://github.com/bitcoin/bitcoin/pull/6804#issuecomment-147665774,147665774,
jamesob,2015-10-22T18:11:34Z,Merge conflict resolved here.\n,https://github.com/bitcoin/bitcoin/pull/6804#issuecomment-150309576,150309576,
jamesob,2015-10-22T19:21:12Z,Rebased (thanks again @MarcoFalke).\n,https://github.com/bitcoin/bitcoin/pull/6804#issuecomment-150328077,150328077,
jamesob,2015-11-02T20:09:56Z,"@laanwj @dexX7 how are you two feeling about this PR? I still think it'd be useful, but if you have reservations I'm happy to close it out for now.\n",https://github.com/bitcoin/bitcoin/pull/6804#issuecomment-153142936,153142936,
dexX7,2015-11-03T13:52:02Z,"I personally have no preference to be honest. I think it could be handy, if new users dive into Bitcoin Core and start with adding additional tests, and I also like the cleanup and documentation. Then again, it's unclear, whether users really are going to use it. Mini-ACK from my side.\n",https://github.com/bitcoin/bitcoin/pull/6804#issuecomment-153360146,153360146,
jamesob,2015-11-03T13:54:22Z,"@dexX7 yeah, apologies for conflating some of the cleanup & doc with this feature. Would this PR be more useful if we enabled it by default for travis builds?\n",https://github.com/bitcoin/bitcoin/pull/6804#issuecomment-153361303,153361303,
dexX7,2015-11-03T13:56:27Z,That's a very interesting idea!\n,https://github.com/bitcoin/bitcoin/pull/6804#issuecomment-153361724,153361724,
jamesob,2015-11-03T14:42:55Z,The Travis build now reports coverage by default:\n\n![selection_041](https://cloud.githubusercontent.com/assets/73197/10910749/03f62af4-81f6-11e5-80b7-30a570bc6dd7.png)\n,https://github.com/bitcoin/bitcoin/pull/6804#issuecomment-153375325,153375325,
dexX7,2015-11-03T14:43:00Z,"That's pretty cool imho: https://travis-ci.org/bitcoin/bitcoin/jobs/89011588#L3943\n\nedit: you beat me, hehe. :)\n",https://github.com/bitcoin/bitcoin/pull/6804#issuecomment-153375350,153375350,
laanwj,2015-11-03T16:39:55Z,The overview of untested RPC commands is confronting. We should definitely have it.\n,https://github.com/bitcoin/bitcoin/pull/6804#issuecomment-153410124,153410124,
MarcoFalke,2015-11-03T16:47:57Z,"Nit: Would it be hard to unfiddle into two commits?\n- Cleanup\n- New feature\n\nRegardless of that: Concept ACK, I think we could make it fail as soon as all commands are covered.\n",https://github.com/bitcoin/bitcoin/pull/6804#issuecomment-153413294,153413294,
jamesob,2015-11-05T15:34:22Z,"@MarcoFalke, going forward I'll certainly be more diligent about separating cleanup changes from new functionality -- unfortunately I think in this case it'll be tough to tease out the distinction between cleanup and coverage here, as there isn't a clean way to do it in terms of git chunks, so I'd have to basically rewrite the PR with that separation in mind. This is test code, and so the commit s",https://github.com/bitcoin/bitcoin/pull/6804#issuecomment-154095200,154095200,
jamesob,2015-11-05T16:31:44Z,"Aside from any further feedback, I'm happy with where this is.\n",https://github.com/bitcoin/bitcoin/pull/6804#issuecomment-154113457,154113457,
jamesob,2015-11-09T19:11:18Z,Ping here -- any further feedback?\n,https://github.com/bitcoin/bitcoin/pull/6804#issuecomment-155159054,155159054,
MarcoFalke,2015-11-09T19:37:11Z,utACK  37f4481\n,https://github.com/bitcoin/bitcoin/pull/6804#issuecomment-155167961,155167961,
laanwj,2015-11-11T18:29:45Z,ACK after squashing into one commit\n,https://github.com/bitcoin/bitcoin/pull/6804#issuecomment-155868989,155868989,
MarcoFalke,2015-11-11T19:09:21Z,reACK  b5cbd39\n,https://github.com/bitcoin/bitcoin/pull/6804#issuecomment-155881178,155881178,
jamesob,2015-11-12T07:09:43Z,Squashed.\n,https://github.com/bitcoin/bitcoin/pull/6804#issuecomment-156020062,156020062,
laanwj,2015-11-03T16:38:56Z,"Instead of changing authproxy, I'd prefer if this was an object that wrapped an authproxy, and logs and passes on all the calls. I think it could be done that way\n",https://github.com/bitcoin/bitcoin/pull/6804#discussion_r43771603,43771603,qa/rpc-tests/test_framework/authproxy.py
jamesob,2015-11-05T15:17:07Z,"Good suggestion. I've started working on the implementation of this, and I think it's going to simplify things a bit.\n",https://github.com/bitcoin/bitcoin/pull/6804#discussion_r44022738,44022738,qa/rpc-tests/test_framework/authproxy.py
jamesob,2015-11-05T16:09:54Z,"@laanwj note here that unfortunately I wasn't able to completely avoid changing `authproxy.py`: in order to use composition over inheritance in `coverage.AuthServiceProxyWrapper` (which I think is preferable), we have to make this attribute un-name-mangled, i.e. accessible outside of the class itself.\n",https://github.com/bitcoin/bitcoin/pull/6804#discussion_r44030183,44030183,qa/rpc-tests/test_framework/authproxy.py
MarcoFalke,2015-11-09T19:33:32Z,Nit: is the required? (Makes diff larger)\n,https://github.com/bitcoin/bitcoin/pull/6804#discussion_r44319437,44319437,qa/rpc-tests/test_framework/test_framework.py
laanwj,2015-11-11T17:38:23Z,"In principle I agree with getting rid of cases of `import *`, but what I'd propose is to explicitly import the symbols that are used:\n\n``` python\nfrom util import initialize_chain, start_nodes, # etc\n```\n\nUsing the full name explicitly in every use is a) more typing b) generates a large diff (as @MarcoFalke already says)\n",https://github.com/bitcoin/bitcoin/pull/6804#discussion_r44560904,44560904,qa/rpc-tests/test_framework/test_framework.py
jgarzik,2015-11-11T17:45:01Z,Indeed; explicitly importing symbols reduces namespace pollution and slightly reduces chances for odd bugs.\n,https://github.com/bitcoin/bitcoin/pull/6804#discussion_r44561695,44561695,qa/rpc-tests/test_framework/test_framework.py
jamesob,2015-11-11T17:55:54Z,"I can file a cleanup PR afterwards doing this more broadly; would you guys prefer I (i) revert this diff here, (ii) import the symbols explicitly instead of the `util` namespace, or (iii) leave as-is for now?\n",https://github.com/bitcoin/bitcoin/pull/6804#discussion_r44562983,44562983,qa/rpc-tests/test_framework/test_framework.py
laanwj,2015-11-11T17:58:52Z,"I'd prefer (ii), but if you want to revert this and do it in another PR it's fine with me too. I don't like (iii) because it implies changing this now and changing this (partially) back again later.\n",https://github.com/bitcoin/bitcoin/pull/6804#discussion_r44563312,44563312,qa/rpc-tests/test_framework/test_framework.py
jamesob,2015-11-11T18:12:56Z,:+1: I'll do (ii) sometime tonight.\n,https://github.com/bitcoin/bitcoin/pull/6804#discussion_r44564967,44564967,qa/rpc-tests/test_framework/test_framework.py
jamesob,2015-11-11T18:19:31Z,"FWIW I'd argue that the existing method of importing the `util` namespace rather than particular symbols results in less pollution, but this is a small thing.\n",https://github.com/bitcoin/bitcoin/pull/6804#discussion_r44565714,44565714,qa/rpc-tests/test_framework/test_framework.py
