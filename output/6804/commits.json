[
  {
    "sha": "b5cbd396ca7214f4f944163ed314456038fdd818",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNWNiZDM5NmNhNzIxNGY0Zjk0NDE2M2VkMzE0NDU2MDM4ZmRkODE4",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2015-10-11T05:41:19Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2015-11-11T18:33:43Z"
      },
      "message": "Add basic coverage reporting for RPC tests\n\nThanks to @MarcoFalke @dexX7 @laanwj for review.",
      "tree": {
        "sha": "840fb2890c1b703c0b5d08d19a103003ae238eb4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/840fb2890c1b703c0b5d08d19a103003ae238eb4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b5cbd396ca7214f4f944163ed314456038fdd818",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b5cbd396ca7214f4f944163ed314456038fdd818",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b5cbd396ca7214f4f944163ed314456038fdd818",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b5cbd396ca7214f4f944163ed314456038fdd818/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3038eb63e8a674b4818cb5d5e461f1ccf4b2932f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3038eb63e8a674b4818cb5d5e461f1ccf4b2932f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3038eb63e8a674b4818cb5d5e461f1ccf4b2932f"
      }
    ],
    "stats": {
      "total": 389,
      "additions": 334,
      "deletions": 55
    },
    "files": [
      {
        "sha": "d2fbfee6f2d2fa067042498563ad2c190e204f70",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b5cbd396ca7214f4f944163ed314456038fdd818/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b5cbd396ca7214f4f944163ed314456038fdd818/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=b5cbd396ca7214f4f944163ed314456038fdd818",
        "patch": "@@ -69,6 +69,6 @@ script:\n     - make $MAKEJOBS $GOAL || ( echo \"Build failure. Verbose build follows.\" && make $GOAL V=1 ; false )\n     - export LD_LIBRARY_PATH=$TRAVIS_BUILD_DIR/depends/$HOST/lib\n     - if [ \"$RUN_TESTS\" = \"true\" ]; then make check; fi\n-    - if [ \"$RUN_TESTS\" = \"true\" ]; then qa/pull-tester/rpc-tests.py; fi\n+    - if [ \"$RUN_TESTS\" = \"true\" ]; then qa/pull-tester/rpc-tests.py --coverage; fi\n after_script:\n     - if [ \"$TRAVIS_PULL_REQUEST\" != \"false\" ]; then (echo \"Upload goes here. Something like: scp -r $BASE_OUTDIR server\" || echo \"upload failed\"); fi"
      },
      {
        "sha": "891962ac14b75f48e8491b184ab602a5a6f7abc4",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 152,
        "deletions": 30,
        "changes": 182,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b5cbd396ca7214f4f944163ed314456038fdd818/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b5cbd396ca7214f4f944163ed314456038fdd818/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=b5cbd396ca7214f4f944163ed314456038fdd818",
        "patch": "@@ -3,16 +3,32 @@\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#\n-# Run Regression Test Suite\n-#\n+\"\"\"\n+Run Regression Test Suite\n+\n+This module calls down into individual test cases via subprocess. It will\n+forward all unrecognized arguments onto the individual test scripts, other\n+than:\n+\n+    - `-extended`: run the \"extended\" test suite in addition to the basic one.\n+    - `-win`: signal that this is running in a Windows environment, and we\n+      should run the tests.\n+    - `--coverage`: this generates a basic coverage report for the RPC\n+      interface.\n+\n+For a description of arguments recognized by test scripts, see\n+`qa/pull-tester/test_framework/test_framework.py:BitcoinTestFramework.main`.\n+\n+\"\"\"\n \n import os\n+import shutil\n import sys\n import subprocess\n+import tempfile\n import re\n+\n from tests_config import *\n-from sets import Set\n \n #If imported values are not defined then set to zero (or disabled)\n if not vars().has_key('ENABLE_WALLET'):\n@@ -24,15 +40,20 @@\n if not vars().has_key('ENABLE_ZMQ'):\n     ENABLE_ZMQ=0\n \n+ENABLE_COVERAGE=0\n+\n #Create a set to store arguments and create the passOn string\n-opts = Set()\n+opts = set()\n passOn = \"\"\n p = re.compile(\"^--\")\n-for i in range(1,len(sys.argv)):\n-    if (p.match(sys.argv[i]) or sys.argv[i] == \"-h\"):\n-        passOn += \" \" + sys.argv[i]\n+\n+for arg in sys.argv[1:]:\n+    if arg == '--coverage':\n+        ENABLE_COVERAGE = 1\n+    elif (p.match(arg) or arg == \"-h\"):\n+        passOn += \" \" + arg\n     else:\n-        opts.add(sys.argv[i])\n+        opts.add(arg)\n \n #Set env vars\n buildDir = BUILDDIR\n@@ -97,24 +118,125 @@\n if ENABLE_ZMQ == 1:\n     testScripts.append('zmq_test.py')\n \n-if(ENABLE_WALLET == 1 and ENABLE_UTILS == 1 and ENABLE_BITCOIND == 1):\n-    rpcTestDir = buildDir + '/qa/rpc-tests/'\n-    #Run Tests\n-    for i in range(len(testScripts)):\n-       if (len(opts) == 0 or (len(opts) == 1 and \"-win\" in opts ) or '-extended' in opts\n-           or testScripts[i] in opts or  re.sub(\".py$\", \"\", testScripts[i]) in opts ):\n-            print  \"Running testscript \" + testScripts[i] + \"...\"\n-            subprocess.check_call(rpcTestDir + testScripts[i] + \" --srcdir \" + buildDir + '/src ' + passOn,shell=True)\n-\t    #exit if help is called so we print just one set of instructions\n-            p = re.compile(\" -h| --help\")\n-            if p.match(passOn):\n-                sys.exit(0)\n-\n-    #Run Extended Tests\n-    for i in range(len(testScriptsExt)):\n-        if ('-extended' in opts or testScriptsExt[i] in opts\n-           or re.sub(\".py$\", \"\", testScriptsExt[i]) in opts):\n-            print  \"Running 2nd level testscript \" + testScriptsExt[i] + \"...\"\n-            subprocess.check_call(rpcTestDir + testScriptsExt[i] + \" --srcdir \" + buildDir + '/src ' + passOn,shell=True)\n-else:\n-    print \"No rpc tests to run. Wallet, utils, and bitcoind must all be enabled\"\n+\n+def runtests():\n+    coverage = None\n+\n+    if ENABLE_COVERAGE:\n+        coverage = RPCCoverage()\n+        print(\"Initializing coverage directory at %s\" % coverage.dir)\n+\n+    if(ENABLE_WALLET == 1 and ENABLE_UTILS == 1 and ENABLE_BITCOIND == 1):\n+        rpcTestDir = buildDir + '/qa/rpc-tests/'\n+        run_extended = '-extended' in opts\n+        cov_flag = coverage.flag if coverage else ''\n+        flags = \" --srcdir %s/src %s %s\" % (buildDir, cov_flag, passOn)\n+\n+        #Run Tests\n+        for i in range(len(testScripts)):\n+            if (len(opts) == 0\n+                    or (len(opts) == 1 and \"-win\" in opts )\n+                    or run_extended\n+                    or testScripts[i] in opts\n+                    or re.sub(\".py$\", \"\", testScripts[i]) in opts ):\n+                print(\"Running testscript \" + testScripts[i] + \"...\")\n+\n+                subprocess.check_call(\n+                    rpcTestDir + testScripts[i] + flags, shell=True)\n+\n+                # exit if help is called so we print just one set of\n+                # instructions\n+                p = re.compile(\" -h| --help\")\n+                if p.match(passOn):\n+                    sys.exit(0)\n+\n+        # Run Extended Tests\n+        for i in range(len(testScriptsExt)):\n+            if (run_extended or testScriptsExt[i] in opts\n+                    or re.sub(\".py$\", \"\", testScriptsExt[i]) in opts):\n+                print(\n+                    \"Running 2nd level testscript \"\n+                    + testScriptsExt[i] + \"...\")\n+\n+                subprocess.check_call(\n+                    rpcTestDir + testScriptsExt[i] + flags, shell=True)\n+\n+        if coverage:\n+            coverage.report_rpc_coverage()\n+\n+            print(\"Cleaning up coverage data\")\n+            coverage.cleanup()\n+\n+    else:\n+        print \"No rpc tests to run. Wallet, utils, and bitcoind must all be enabled\"\n+\n+\n+class RPCCoverage(object):\n+    \"\"\"\n+    Coverage reporting utilities for pull-tester.\n+\n+    Coverage calculation works by having each test script subprocess write\n+    coverage files into a particular directory. These files contain the RPC\n+    commands invoked during testing, as well as a complete listing of RPC\n+    commands per `bitcoin-cli help` (`rpc_interface.txt`).\n+\n+    After all tests complete, the commands run are combined and diff'd against\n+    the complete list to calculate uncovered RPC commands.\n+\n+    See also: qa/rpc-tests/test_framework/coverage.py\n+\n+    \"\"\"\n+    def __init__(self):\n+        self.dir = tempfile.mkdtemp(prefix=\"coverage\")\n+        self.flag = '--coveragedir %s' % self.dir\n+\n+    def report_rpc_coverage(self):\n+        \"\"\"\n+        Print out RPC commands that were unexercised by tests.\n+\n+        \"\"\"\n+        uncovered = self._get_uncovered_rpc_commands()\n+\n+        if uncovered:\n+            print(\"Uncovered RPC commands:\")\n+            print(\"\".join((\"  - %s\\n\" % i) for i in sorted(uncovered)))\n+        else:\n+            print(\"All RPC commands covered.\")\n+\n+    def cleanup(self):\n+        return shutil.rmtree(self.dir)\n+\n+    def _get_uncovered_rpc_commands(self):\n+        \"\"\"\n+        Return a set of currently untested RPC commands.\n+\n+        \"\"\"\n+        # This is shared from `qa/rpc-tests/test-framework/coverage.py`\n+        REFERENCE_FILENAME = 'rpc_interface.txt'\n+        COVERAGE_FILE_PREFIX = 'coverage.'\n+\n+        coverage_ref_filename = os.path.join(self.dir, REFERENCE_FILENAME)\n+        coverage_filenames = set()\n+        all_cmds = set()\n+        covered_cmds = set()\n+\n+        if not os.path.isfile(coverage_ref_filename):\n+            raise RuntimeError(\"No coverage reference found\")\n+\n+        with open(coverage_ref_filename, 'r') as f:\n+            all_cmds.update([i.strip() for i in f.readlines()])\n+\n+        for root, dirs, files in os.walk(self.dir):\n+            for filename in files:\n+                if filename.startswith(COVERAGE_FILE_PREFIX):\n+                    coverage_filenames.add(os.path.join(root, filename))\n+\n+        for filename in coverage_filenames:\n+            with open(filename, 'r') as f:\n+                covered_cmds.update([i.strip() for i in f.readlines()])\n+\n+        return all_cmds - covered_cmds\n+\n+\n+if __name__ == '__main__':\n+    runtests()"
      },
      {
        "sha": "1ddff8a2982e4dbeb7b4f64b1539acc6ebf861a0",
        "filename": "qa/rpc-tests/getblocktemplate_longpoll.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b5cbd396ca7214f4f944163ed314456038fdd818/qa/rpc-tests/getblocktemplate_longpoll.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b5cbd396ca7214f4f944163ed314456038fdd818/qa/rpc-tests/getblocktemplate_longpoll.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/getblocktemplate_longpoll.py?ref=b5cbd396ca7214f4f944163ed314456038fdd818",
        "patch": "@@ -38,7 +38,7 @@ def __init__(self, node):\n         self.longpollid = templat['longpollid']\n         # create a new connection to the node, we can't use the same\n         # connection from two threads\n-        self.node = AuthServiceProxy(node.url, timeout=600)\n+        self.node = get_rpc_proxy(node.url, 1, timeout=600)\n \n     def run(self):\n         self.node.getblocktemplate({'longpollid':self.longpollid})"
      },
      {
        "sha": "7a9da667874b8f44f6047825549fe7d49547fe49",
        "filename": "qa/rpc-tests/rpcbind_test.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b5cbd396ca7214f4f944163ed314456038fdd818/qa/rpc-tests/rpcbind_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b5cbd396ca7214f4f944163ed314456038fdd818/qa/rpc-tests/rpcbind_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rpcbind_test.py?ref=b5cbd396ca7214f4f944163ed314456038fdd818",
        "patch": "@@ -47,7 +47,7 @@ def run_allowip_test(tmpdir, allow_ips, rpchost, rpcport):\n     try:\n         # connect to node through non-loopback interface\n         url = \"http://rt:rt@%s:%d\" % (rpchost, rpcport,)\n-        node = AuthServiceProxy(url)\n+        node = get_rpc_proxy(url, 1)\n         node.getinfo()\n     finally:\n         node = None # make sure connection will be garbage collected and closed"
      },
      {
        "sha": "fba469a0dd0b6b0f330b7bc96e104d938ac91311",
        "filename": "qa/rpc-tests/test_framework/authproxy.py",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b5cbd396ca7214f4f944163ed314456038fdd818/qa/rpc-tests/test_framework/authproxy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b5cbd396ca7214f4f944163ed314456038fdd818/qa/rpc-tests/test_framework/authproxy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/authproxy.py?ref=b5cbd396ca7214f4f944163ed314456038fdd818",
        "patch": "@@ -69,7 +69,7 @@ class AuthServiceProxy(object):\n \n     def __init__(self, service_url, service_name=None, timeout=HTTP_TIMEOUT, connection=None):\n         self.__service_url = service_url\n-        self.__service_name = service_name\n+        self._service_name = service_name\n         self.__url = urlparse.urlparse(service_url)\n         if self.__url.port is None:\n             port = 80\n@@ -102,8 +102,8 @@ def __getattr__(self, name):\n         if name.startswith('__') and name.endswith('__'):\n             # Python internal stuff\n             raise AttributeError\n-        if self.__service_name is not None:\n-            name = \"%s.%s\" % (self.__service_name, name)\n+        if self._service_name is not None:\n+            name = \"%s.%s\" % (self._service_name, name)\n         return AuthServiceProxy(self.__service_url, name, connection=self.__conn)\n \n     def _request(self, method, path, postdata):\n@@ -129,10 +129,10 @@ def _request(self, method, path, postdata):\n     def __call__(self, *args):\n         AuthServiceProxy.__id_count += 1\n \n-        log.debug(\"-%s-> %s %s\"%(AuthServiceProxy.__id_count, self.__service_name,\n+        log.debug(\"-%s-> %s %s\"%(AuthServiceProxy.__id_count, self._service_name,\n                                  json.dumps(args, default=EncodeDecimal)))\n         postdata = json.dumps({'version': '1.1',\n-                               'method': self.__service_name,\n+                               'method': self._service_name,\n                                'params': args,\n                                'id': AuthServiceProxy.__id_count}, default=EncodeDecimal)\n         response = self._request('POST', self.__url.path, postdata)"
      },
      {
        "sha": "50f066a8509d26865526cc1d0782cd0c08719857",
        "filename": "qa/rpc-tests/test_framework/coverage.py",
        "status": "added",
        "additions": 101,
        "deletions": 0,
        "changes": 101,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b5cbd396ca7214f4f944163ed314456038fdd818/qa/rpc-tests/test_framework/coverage.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b5cbd396ca7214f4f944163ed314456038fdd818/qa/rpc-tests/test_framework/coverage.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/coverage.py?ref=b5cbd396ca7214f4f944163ed314456038fdd818",
        "patch": "@@ -0,0 +1,101 @@\n+\"\"\"\n+This module contains utilities for doing coverage analysis on the RPC\n+interface.\n+\n+It provides a way to track which RPC commands are exercised during\n+testing.\n+\n+\"\"\"\n+import os\n+\n+\n+REFERENCE_FILENAME = 'rpc_interface.txt'\n+\n+\n+class AuthServiceProxyWrapper(object):\n+    \"\"\"\n+    An object that wraps AuthServiceProxy to record specific RPC calls.\n+\n+    \"\"\"\n+    def __init__(self, auth_service_proxy_instance, coverage_logfile=None):\n+        \"\"\"\n+        Kwargs:\n+            auth_service_proxy_instance (AuthServiceProxy): the instance\n+                being wrapped.\n+            coverage_logfile (str): if specified, write each service_name\n+                out to a file when called.\n+\n+        \"\"\"\n+        self.auth_service_proxy_instance = auth_service_proxy_instance\n+        self.coverage_logfile = coverage_logfile\n+\n+    def __getattr__(self, *args, **kwargs):\n+        return_val = self.auth_service_proxy_instance.__getattr__(\n+            *args, **kwargs)\n+\n+        return AuthServiceProxyWrapper(return_val, self.coverage_logfile)\n+\n+    def __call__(self, *args, **kwargs):\n+        \"\"\"\n+        Delegates to AuthServiceProxy, then writes the particular RPC method\n+        called to a file.\n+\n+        \"\"\"\n+        return_val = self.auth_service_proxy_instance.__call__(*args, **kwargs)\n+        rpc_method = self.auth_service_proxy_instance._service_name\n+\n+        if self.coverage_logfile:\n+            with open(self.coverage_logfile, 'a+') as f:\n+                f.write(\"%s\\n\" % rpc_method)\n+\n+        return return_val\n+\n+    @property\n+    def url(self):\n+        return self.auth_service_proxy_instance.url\n+\n+\n+def get_filename(dirname, n_node):\n+    \"\"\"\n+    Get a filename unique to the test process ID and node.\n+\n+    This file will contain a list of RPC commands covered.\n+    \"\"\"\n+    pid = str(os.getpid())\n+    return os.path.join(\n+        dirname, \"coverage.pid%s.node%s.txt\" % (pid, str(n_node)))\n+\n+\n+def write_all_rpc_commands(dirname, node):\n+    \"\"\"\n+    Write out a list of all RPC functions available in `bitcoin-cli` for\n+    coverage comparison. This will only happen once per coverage\n+    directory.\n+\n+    Args:\n+        dirname (str): temporary test dir\n+        node (AuthServiceProxy): client\n+\n+    Returns:\n+        bool. if the RPC interface file was written.\n+\n+    \"\"\"\n+    filename = os.path.join(dirname, REFERENCE_FILENAME)\n+\n+    if os.path.isfile(filename):\n+        return False\n+\n+    help_output = node.help().split('\\n')\n+    commands = set()\n+\n+    for line in help_output:\n+        line = line.strip()\n+\n+        # Ignore blanks and headers\n+        if line and not line.startswith('='):\n+            commands.add(\"%s\\n\" % line.split()[0])\n+\n+    with open(filename, 'w') as f:\n+        f.writelines(list(commands))\n+\n+    return True"
      },
      {
        "sha": "ae2d91ab60b7c0d7a7fbdda20ad7878e572ba5a8",
        "filename": "qa/rpc-tests/test_framework/test_framework.py",
        "status": "modified",
        "additions": 23,
        "deletions": 5,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b5cbd396ca7214f4f944163ed314456038fdd818/qa/rpc-tests/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b5cbd396ca7214f4f944163ed314456038fdd818/qa/rpc-tests/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/test_framework.py?ref=b5cbd396ca7214f4f944163ed314456038fdd818",
        "patch": "@@ -13,8 +13,20 @@\n import tempfile\n import traceback\n \n+from .util import (\n+    initialize_chain,\n+    assert_equal,\n+    start_nodes,\n+    connect_nodes_bi,\n+    sync_blocks,\n+    sync_mempools,\n+    stop_nodes,\n+    wait_bitcoinds,\n+    enable_coverage,\n+    check_json_precision,\n+    initialize_chain_clean,\n+)\n from authproxy import AuthServiceProxy, JSONRPCException\n-from util import *\n \n \n class BitcoinTestFramework(object):\n@@ -96,13 +108,18 @@ def main(self):\n                           help=\"Root directory for datadirs\")\n         parser.add_option(\"--tracerpc\", dest=\"trace_rpc\", default=False, action=\"store_true\",\n                           help=\"Print out all RPC calls as they are made\")\n+        parser.add_option(\"--coveragedir\", dest=\"coveragedir\",\n+                          help=\"Write tested RPC commands into this directory\")\n         self.add_options(parser)\n         (self.options, self.args) = parser.parse_args()\n \n         if self.options.trace_rpc:\n             import logging\n             logging.basicConfig(level=logging.DEBUG)\n \n+        if self.options.coveragedir:\n+            enable_coverage(self.options.coveragedir)\n+\n         os.environ['PATH'] = self.options.srcdir+\":\"+os.environ['PATH']\n \n         check_json_precision()\n@@ -173,7 +190,8 @@ def setup_chain(self):\n         initialize_chain_clean(self.options.tmpdir, self.num_nodes)\n \n     def setup_network(self):\n-        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir,\n-                                    extra_args=[['-debug', '-whitelist=127.0.0.1']] * self.num_nodes,\n-                                    binary=[self.options.testbinary] +\n-                                           [self.options.refbinary]*(self.num_nodes-1))\n+        self.nodes = start_nodes(\n+            self.num_nodes, self.options.tmpdir,\n+            extra_args=[['-debug', '-whitelist=127.0.0.1']] * self.num_nodes,\n+            binary=[self.options.testbinary] +\n+            [self.options.refbinary]*(self.num_nodes-1))"
      },
      {
        "sha": "30dd5de58560492c70b0ea55c98a20f8ddcc146a",
        "filename": "qa/rpc-tests/test_framework/util.py",
        "status": "modified",
        "additions": 50,
        "deletions": 12,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b5cbd396ca7214f4f944163ed314456038fdd818/qa/rpc-tests/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b5cbd396ca7214f4f944163ed314456038fdd818/qa/rpc-tests/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/util.py?ref=b5cbd396ca7214f4f944163ed314456038fdd818",
        "patch": "@@ -17,8 +17,43 @@\n import time\n import re\n \n-from authproxy import AuthServiceProxy, JSONRPCException\n-from util import *\n+from . import coverage\n+from .authproxy import AuthServiceProxy, JSONRPCException\n+\n+COVERAGE_DIR = None\n+\n+\n+def enable_coverage(dirname):\n+    \"\"\"Maintain a log of which RPC calls are made during testing.\"\"\"\n+    global COVERAGE_DIR\n+    COVERAGE_DIR = dirname\n+\n+\n+def get_rpc_proxy(url, node_number, timeout=None):\n+    \"\"\"\n+    Args:\n+        url (str): URL of the RPC server to call\n+        node_number (int): the node number (or id) that this calls to\n+\n+    Kwargs:\n+        timeout (int): HTTP timeout in seconds\n+\n+    Returns:\n+        AuthServiceProxy. convenience object for making RPC calls.\n+\n+    \"\"\"\n+    proxy_kwargs = {}\n+    if timeout is not None:\n+        proxy_kwargs['timeout'] = timeout\n+\n+    proxy = AuthServiceProxy(url, **proxy_kwargs)\n+    proxy.url = url  # store URL on proxy for info\n+\n+    coverage_logfile = coverage.get_filename(\n+        COVERAGE_DIR, node_number) if COVERAGE_DIR else None\n+\n+    return coverage.AuthServiceProxyWrapper(proxy, coverage_logfile)\n+\n \n def p2p_port(n):\n     return 11000 + n + os.getpid()%999\n@@ -79,13 +114,13 @@ def initialize_chain(test_dir):\n     \"\"\"\n \n     if (not os.path.isdir(os.path.join(\"cache\",\"node0\"))\n-        or not os.path.isdir(os.path.join(\"cache\",\"node1\")) \n-        or not os.path.isdir(os.path.join(\"cache\",\"node2\")) \n+        or not os.path.isdir(os.path.join(\"cache\",\"node1\"))\n+        or not os.path.isdir(os.path.join(\"cache\",\"node2\"))\n         or not os.path.isdir(os.path.join(\"cache\",\"node3\"))):\n \n         #find and delete old cache directories if any exist\n         for i in range(4):\n-            if os.path.isdir(os.path.join(\"cache\",\"node\"+str(i))): \n+            if os.path.isdir(os.path.join(\"cache\",\"node\"+str(i))):\n                 shutil.rmtree(os.path.join(\"cache\",\"node\"+str(i)))\n \n         devnull = open(os.devnull, \"w\")\n@@ -103,11 +138,13 @@ def initialize_chain(test_dir):\n             if os.getenv(\"PYTHON_DEBUG\", \"\"):\n                 print \"initialize_chain: bitcoin-cli -rpcwait getblockcount completed\"\n         devnull.close()\n+\n         rpcs = []\n+\n         for i in range(4):\n             try:\n-                url = \"http://rt:rt@127.0.0.1:%d\"%(rpc_port(i),)\n-                rpcs.append(AuthServiceProxy(url))\n+                url = \"http://rt:rt@127.0.0.1:%d\" % (rpc_port(i),)\n+                rpcs.append(get_rpc_proxy(url, i))\n             except:\n                 sys.stderr.write(\"Error connecting to \"+url+\"\\n\")\n                 sys.exit(1)\n@@ -190,11 +227,12 @@ def start_node(i, dirname, extra_args=None, rpchost=None, timewait=None, binary=\n         print \"start_node: calling bitcoin-cli -rpcwait getblockcount returned\"\n     devnull.close()\n     url = \"http://rt:rt@%s:%d\" % (rpchost or '127.0.0.1', rpc_port(i))\n-    if timewait is not None:\n-        proxy = AuthServiceProxy(url, timeout=timewait)\n-    else:\n-        proxy = AuthServiceProxy(url)\n-    proxy.url = url # store URL on proxy for info\n+\n+    proxy = get_rpc_proxy(url, i, timeout=timewait)\n+\n+    if COVERAGE_DIR:\n+        coverage.write_all_rpc_commands(COVERAGE_DIR, proxy)\n+\n     return proxy\n \n def start_nodes(num_nodes, dirname, extra_args=None, rpchost=None, binary=None):"
      }
    ]
  }
]