[
  {
    "sha": "403c1bf0fbff2c7cb20afbd4413f36267029deef",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MDNjMWJmMGZiZmYyYzdjYjIwYWZiZDQ0MTNmMzYyNjcwMjlkZWVm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-07-29T07:58:14Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-07-29T07:58:14Z"
      },
      "message": "contrib: remove getwork-based pyminer\n\nAs the `getwork` API doesn't exist anymore, currently this script is useless.\n\nIt would be nice to have a `getblocktemplate`-based Python example of a\nminer, but there is no point in keeping this one around except to\nconfuse people.",
      "tree": {
        "sha": "7aa13852bbf1c4075567df17ae12d2c9846eda7a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7aa13852bbf1c4075567df17ae12d2c9846eda7a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/403c1bf0fbff2c7cb20afbd4413f36267029deef",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/403c1bf0fbff2c7cb20afbd4413f36267029deef",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/403c1bf0fbff2c7cb20afbd4413f36267029deef",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/403c1bf0fbff2c7cb20afbd4413f36267029deef/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "29203228710de3e180914c1d66f48dd7e41270a0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29203228710de3e180914c1d66f48dd7e41270a0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/29203228710de3e180914c1d66f48dd7e41270a0"
      }
    ],
    "stats": {
      "total": 313,
      "additions": 0,
      "deletions": 313
    },
    "files": [
      {
        "sha": "dae975e9efc2c1efc2b2a027f06623749edec75b",
        "filename": "contrib/README.md",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/403c1bf0fbff2c7cb20afbd4413f36267029deef/contrib/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/403c1bf0fbff2c7cb20afbd4413f36267029deef/contrib/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/README.md?ref=403c1bf0fbff2c7cb20afbd4413f36267029deef",
        "patch": "@@ -19,10 +19,6 @@ Contains the script `github-merge.sh` for merging github pull requests securely\n ### [Linearize](/contrib/linearize) ###\n Construct a linear, no-fork, best version of the blockchain.\n \n-### [PyMiner](/contrib/pyminer) ###\n-\n-This is a 'getwork' CPU mining client for Bitcoin. It is pure-python, and therefore very, very slow.  The purpose is to provide a reference implementation of a miner in order to study and develop other mining programs.\n-\n ### [Qos](/contrib/qos) ###\n \n A Linux bash script that will set up traffic control (tc) to limit the outgoing bandwidth for connections to the Bitcoin network. This means one can have an always-on bitcoind instance running, and another local bitcoind/bitcoin-qt instance which connects to this node and receives blocks from it."
      },
      {
        "sha": "3b20f2fdeac1f703108536933497c69d1ed4acef",
        "filename": "contrib/pyminer/README.md",
        "status": "removed",
        "additions": 0,
        "deletions": 8,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29203228710de3e180914c1d66f48dd7e41270a0/contrib/pyminer/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29203228710de3e180914c1d66f48dd7e41270a0/contrib/pyminer/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/pyminer/README.md?ref=29203228710de3e180914c1d66f48dd7e41270a0",
        "patch": "@@ -1,8 +0,0 @@\n-### PyMiner ###\n-\n-This is a 'getwork' CPU mining client for Bitcoin. It is pure-python, and therefore very, very slow.  The purpose is to provide a reference implementation of a miner, for study.\n-\n-### Other Resources ###\n-\n-- [BitcoinTalk Thread](https://bitcointalk.org/index.php?topic=3546.0)\n-- [Jgarzik Repo](https://github.com/jgarzik/pyminer)\n\\ No newline at end of file"
      },
      {
        "sha": "103e7c1372598d2a4d2ef758aa39dc70b52560fc",
        "filename": "contrib/pyminer/example-config.cfg",
        "status": "removed",
        "additions": 0,
        "deletions": 32,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29203228710de3e180914c1d66f48dd7e41270a0/contrib/pyminer/example-config.cfg",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29203228710de3e180914c1d66f48dd7e41270a0/contrib/pyminer/example-config.cfg",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/pyminer/example-config.cfg?ref=29203228710de3e180914c1d66f48dd7e41270a0",
        "patch": "@@ -1,32 +0,0 @@\n-\n-#\n-# RPC login details\n-#\n-host=127.0.0.1\n-port=8332\n-\n-rpcuser=myusername\n-rpcpass=mypass\n-\n-\n-#\n-# mining details\n-#\n-\n-threads=4\n-\n-# periodic rate for requesting new work, if solution not found\n-scantime=60\n-\n-\n-#\n-# misc.\n-#\n-\n-# not really used right now\n-logdir=/tmp/pyminer\n-\n-# set to 1, to enable hashmeter output\n-hashmeter=0\n-\n-"
      },
      {
        "sha": "706a10b39d113abc58def71ee6311a1865637d53",
        "filename": "contrib/pyminer/pyminer.py",
        "status": "removed",
        "additions": 0,
        "deletions": 269,
        "changes": 269,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29203228710de3e180914c1d66f48dd7e41270a0/contrib/pyminer/pyminer.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29203228710de3e180914c1d66f48dd7e41270a0/contrib/pyminer/pyminer.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/pyminer/pyminer.py?ref=29203228710de3e180914c1d66f48dd7e41270a0",
        "patch": "@@ -1,269 +0,0 @@\n-#!/usr/bin/python\n-#\n-# Copyright (c) 2011 The Bitcoin developers\n-# Distributed under the MIT/X11 software license, see the accompanying\n-# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-#\n-\n-import sys\n-from multiprocessing import Process\n-import time\n-import struct\n-import hashlib\n-import base64\n-import re\n-import httplib\n-import json\n-\n-ERR_SLEEP = 15\n-MAX_NONCE = 1000000L\n-\n-settings = {}\n-\n-\n-class BitcoinRPC:\n-    object_id = 1\n-\n-    def __init__(self, host, port, username, password):\n-        authpair = \"{0}:{1}\".format(username, password)\n-        self.authhdr = \"Basic {0}\".format(base64.b64encode(authpair))\n-        self.conn = httplib.HTTPConnection(host, port, strict=False, timeout=30)\n-\n-    def rpc(self, method, params=None):\n-        self.object_id += 1\n-        obj = {'version' : '1.1',\n-               'method' : method,\n-               'id' : self.object_id,\n-               'params' : params or []}\n-\n-        self.conn.request('POST', '/', json.dumps(obj),\n-            { 'Authorization' : self.authhdr,\n-              'Content-type' : 'application/json' })\n-\n-        resp = self.conn.getresponse()\n-\n-        if resp is None:\n-            print(\"JSON-RPC: no response\")\n-            return None\n-\n-        body = resp.read()\n-        resp_obj = json.loads(body)\n-\n-        if resp_obj is None:\n-            print(\"JSON-RPC: cannot JSON-decode body\")\n-            return None\n-\n-        if 'error' in resp_obj and resp_obj['error'] != None:\n-            return resp_obj['error']\n-\n-        if 'result' not in resp_obj:\n-            print(\"JSON-RPC: no result in object\")\n-            return None\n-\n-        return resp_obj['result']\n-\n-    def getblockcount(self):\n-        return self.rpc('getblockcount')\n-\n-    def getwork(self, data=None):\n-        return self.rpc('getwork', data)\n-\n-def uint32(x):\n-    return x & 0xffffffffL\n-\n-def bytereverse(x):\n-    return uint32(( ((x) << 24) | (((x) << 8) & 0x00ff0000) |\n-            (((x) >> 8) & 0x0000ff00) | ((x) >> 24) ))\n-\n-def bufreverse(in_buf):\n-    out_words = []\n-\n-    for i in range(0, len(in_buf), 4):\n-        word = struct.unpack('@I', in_buf[i:i+4])[0]\n-        out_words.append(struct.pack('@I', bytereverse(word)))\n-\n-    return ''.join(out_words)\n-\n-def wordreverse(in_buf):\n-    out_words = []\n-\n-    for i in range(0, len(in_buf), 4):\n-        out_words.append(in_buf[i:i+4])\n-\n-    out_words.reverse()\n-\n-    return ''.join(out_words)\n-\n-\n-class Miner:\n-    def __init__(self, id):\n-        self.id = id\n-        self.max_nonce = MAX_NONCE\n-\n-    def work(self, datastr, targetstr):\n-        # decode work data hex string to binary\n-        static_data = datastr.decode('hex')\n-        static_data = bufreverse(static_data)\n-\n-        # the first 76b of 80b do not change\n-        blk_hdr = static_data[:76]\n-\n-        # decode 256-bit target value\n-        targetbin = targetstr.decode('hex')\n-        targetbin = targetbin[::-1]    # byte-swap and dword-swap\n-        targetbin_str = targetbin.encode('hex')\n-        target = long(targetbin_str, 16)\n-\n-        # pre-hash first 76b of block header\n-        static_hash = hashlib.sha256()\n-        static_hash.update(blk_hdr)\n-\n-        for nonce in xrange(self.max_nonce):\n-\n-            # encode 32-bit nonce value\n-            nonce_bin = struct.pack(\"<I\", nonce)\n-\n-            # hash final 4b, the nonce value\n-            hash1_o = static_hash.copy()\n-            hash1_o.update(nonce_bin)\n-            hash1 = hash1_o.digest()\n-\n-            # sha256 hash of sha256 hash\n-            hash_o = hashlib.sha256()\n-            hash_o.update(hash1)\n-            hash = hash_o.digest()\n-\n-            # quick test for winning solution: high 32 bits zero?\n-            if hash[-4:] != '\\0\\0\\0\\0':\n-                continue\n-\n-            # convert binary hash to 256-bit Python long\n-            hash = bufreverse(hash)\n-            hash = wordreverse(hash)\n-\n-            hash_str = hash.encode('hex')\n-            long_hash = long(hash_str, 16)\n-\n-            # proof-of-work test:  hash < target\n-            if long_hash < target:\n-                print(time.asctime(), \"PROOF-OF-WORK found: \"\n-                                      \"{0:064x}\".format(long_hash))\n-                return (nonce + 1, nonce_bin)\n-            else:\n-                print(time.asctime(), \"PROOF-OF-WORK false\"\n-                                      \"positive {0:064x}\".format(long_hash))\n-\n-        return (nonce + 1, None)\n-\n-    def submit_work(self, rpc, original_data, nonce_bin):\n-        nonce_bin = bufreverse(nonce_bin)\n-        nonce = nonce_bin.encode('hex')\n-        solution = original_data[:152] + nonce + original_data[160:256]\n-        param_arr = [ solution ]\n-        result = rpc.getwork(param_arr)\n-\n-        print(time.asctime(), \"--> Upstream RPC result:\", result)\n-\n-    def iterate(self, rpc):\n-        work = rpc.getwork()\n-\n-        if work is None:\n-            time.sleep(ERR_SLEEP)\n-            return\n-\n-        if 'data' not in work or 'target' not in work:\n-            time.sleep(ERR_SLEEP)\n-            return\n-\n-        time_start = time.time()\n-\n-        (hashes_done, nonce_bin) = self.work(work['data'],\n-                             work['target'])\n-\n-        time_end = time.time()\n-        time_diff = time_end - time_start\n-\n-        self.max_nonce = long(\n-            (hashes_done * settings['scantime']) / time_diff)\n-\n-        if self.max_nonce > 0xfffffffaL:\n-            self.max_nonce = 0xfffffffaL\n-\n-        if settings['hashmeter']:\n-            print(\"HashMeter({:d}): {:d} hashes, {:.2f} Khash/sec\".format(\n-                  self.id, hashes_done, (hashes_done / 1000.0) / time_diff))\n-\n-        if nonce_bin is not None:\n-            self.submit_work(rpc, work['data'], nonce_bin)\n-\n-    def loop(self):\n-        rpc = BitcoinRPC(settings['host'], settings['port'],\n-                 settings['rpcuser'], settings['rpcpass'])\n-\n-        if rpc is not None:\n-\n-            while True:\n-                self.iterate(rpc)\n-        \n-        self.conn.close()\n-\n-\n-def miner_thread(id):\n-    miner = Miner(id)\n-    miner.loop()\n-\n-if __name__ == '__main__':\n-    if len(sys.argv) != 2:\n-        print(\"Usage: pyminer.py CONFIG-FILE\")\n-        sys.exit(1)\n-\n-    with open(sys.argv[1]) as f:\n-\n-        for line in f:\n-            # skip comment lines\n-            m = re.search('^\\s*#', line)\n-            if m:\n-                continue\n-\n-            # parse key=value lines\n-            m = re.search('^(\\w+)\\s*=\\s*(\\S.*)$', line)\n-            if m is None:\n-                continue\n-\n-            settings[m.group(1)] = m.group(2)\n-\n-    settings.setdefault('host', '127.0.0.1')\n-    settings.setdefault('port', 8332)\n-    settings.setdefault('threads', 1)\n-    settings.setdefault('hashmeter', 0)\n-    settings.setdefault('scantime', 30L)\n-\n-    if 'rpcuser' not in settings or 'rpcpass' not in settings:\n-        print(\"Missing username and/or password in cfg file\")\n-        sys.exit(1)\n-\n-    settings['port'] = int(settings['port'])\n-    settings['threads'] = int(settings['threads'])\n-    settings['hashmeter'] = int(settings['hashmeter'])\n-    settings['scantime'] = long(settings['scantime'])\n-\n-    thread_list = []\n-\n-    for thread_id in range(settings['threads']):\n-        p = Process(target=miner_thread, args=(thread_id,))\n-        p.start()\n-        thread_list.append(p)\n-        time.sleep(1) # stagger threads\n-\n-    print(settings['threads'], \"mining threads started\")\n-\n-    print(time.asctime(), \"Miner Starts - {0}:{1}\".format(settings['host'],\n-                                                          settings['port']))\n-    try:\n-        for thread_process in thread_list:\n-            thread_process.join()\n-    except KeyboardInterrupt:\n-        pass\n-\n-    print(time.asctime(), \"Miner Stops - {0}:{1}\".format(settings['host'],\n-                                                         settings['port']))"
      }
    ]
  }
]