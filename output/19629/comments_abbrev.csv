MarcoFalke,2020-07-30 18:33:59,"Hmm, I think it is hard to write a meaningful test case right now. Locally I tested with\n\n```diff\ndiff --git a/src/init.cpp b/src/init.cpp\nindex 50d25e672e..7fb8b3aaa7 100644\n--- a/src/init.cpp\n+++ b/src/init.cpp\n@@ -1563,7 +1563,7 @@ bool AppInitMain(const util::Ref& context, NodeContext& node)\n             const int64_t load_block_index_start_time = GetTimeMillis();\n           ",https://github.com/bitcoin/bitcoin/pull/19629#issuecomment-666587078,666587078,
promag,2020-07-30 22:55:06,I think it would be less problematic if you just pass the mempool reference (not pointer) and defer the optional change to when it's needed - `blocksonly` or `withoutmempool` PR.,https://github.com/bitcoin/bitcoin/pull/19629#issuecomment-666760428,666760428,
MarcoFalke,2020-07-31 04:52:48,"That was my initial draft, but it would also mean that all changed lines will need to change again. Is there any reason to increase the `git blame` stack for those lines? See also https://github.com/bitcoin/bitcoin/pull/19556#discussion_r458102776",https://github.com/bitcoin/bitcoin/pull/19629#issuecomment-666918980,666918980,
DrahtBot,2020-07-31 11:46:36,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19438 (Introduce deploymentstatus by ajtowns)\n* #19306 (refactor: Replace RecursiveMutex with Mutex in CTxMemPool by heb",https://github.com/bitcoin/bitcoin/pull/19629#issuecomment-667080238,667080238,
practicalswift,2020-08-01 10:43:06,Concept ACK,https://github.com/bitcoin/bitcoin/pull/19629#issuecomment-667511700,667511700,
jnewbery,2020-08-01 11:18:29,"> That was my initial draft, but it would also mean that all changed lines will need to change again. Is there any reason to increase the git blame stack for those lines? See also #19556 (comment)\n\nI totally agree with this. If the intention is to eventually allow `CChainState` to not have a mempool, then it makes sense to have the constructor take a pointer, and then assert that it's not null",https://github.com/bitcoin/bitcoin/pull/19629#issuecomment-667515765,667515765,
promag,2020-08-02 14:24:25,"@jnewbery would you drop `if (m_mempool)` checks?\n\nedit: @MarcoFalke sorry for being pedantic, feel free to ignore.",https://github.com/bitcoin/bitcoin/pull/19629#issuecomment-667680449,667680449,
promag,2020-08-02 18:19:46,"> My alternative approach would have been to leave those out and keep the logic the same, but add an `assert m_mempool != nullptr` to the constructor\n\nSame thing here. But it's fine as it is.",https://github.com/bitcoin/bitcoin/pull/19629#issuecomment-667707718,667707718,
MarcoFalke,2020-08-04 10:02:12,"Without a mempool, the mempool lock won't exist and thus can not be taken. Though, this shouldn't affect anything outside of validation. E.g. changing `cs` to a non-recursive mutex or lock annotations outside of validation should be unaffected.",https://github.com/bitcoin/bitcoin/pull/19629#issuecomment-668505308,668505308,
hebasto,2020-08-06 04:14:46,"> Without a mempool, the mempool lock won't exist and thus can not be taken. Though, this shouldn't affect anything outside of validation. E.g. changing `cs` to a non-recursive mutex or lock annotations outside of validation should be unaffected.\n\nI guess it won't work. For example, this patch\n```diff\n--- a/src/validation.h\n+++ b/src/validation.h\n@@ -645,7 +645,7 @@ public:\n         ",https://github.com/bitcoin/bitcoin/pull/19629#issuecomment-669673015,669673015,
darosior,2020-08-06 09:53:35,"> ```diff\n> --- a/src/validation.h\n> +++ b/src/validation.h\n> @@ -645,7 +645,7 @@ public:\n>                        CCoinsViewCache& view, const CChainParams& chainparams, bool fJustCheck = false) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n>  \n>      // Apply the effects of a block disconnection on the UTXO set.\n> -    bool DisconnectTip(BlockValidationState& state, const CChainParams& chainp",https://github.com/bitcoin/bitcoin/pull/19629#issuecomment-669832475,669832475,
hebasto,2020-08-06 10:04:58,"> Is such an annotation in the header file dereferencing a pointer that may be `NULL` valid ?\n\nNot sure about annotation validity, but Clang accepts it.\n\nI don't want to lose ability to use `EXCLUSIVE_LOCKS_REQUIRED(m_mempool->cs)` annotations.",https://github.com/bitcoin/bitcoin/pull/19629#issuecomment-669837507,669837507,
promag,2020-08-14 23:59:57,"> If we want to support not having a mempool, it might be better to virtualize CTxMemPool, so that validation expects a `TxMemPoolInterface` that has a `cs` lock to let thread safety annotations all make sense, and a bunch of virtual functions that are either implemented by CTxMemPool as is, or by dummy functions in a `NoMemPool` class.\n\nSounds like a nice approach.",https://github.com/bitcoin/bitcoin/pull/19629#issuecomment-674315735,674315735,
MarcoFalke,2020-08-15 11:55:38,Added back compile-time thread safety annotations as requested by @ajtowns and @hebasto ,https://github.com/bitcoin/bitcoin/pull/19629#issuecomment-674387720,674387720,
hebasto,2020-08-15 15:08:37,"Trying to test thread safety annotations with the following patch:\n```diff\n--- a/src/interfaces/txmempool.cpp\n+++ b/src/interfaces/txmempool.cpp\n@@ -34,7 +34,6 @@ public:\n \n     void removeForBlock(const std::vector<CTransactionRef>& vtx, unsigned int block_height) override EXCLUSIVE_LOCKS_REQUIRED(m_mutex)\n     {\n-        AssertLockHeld(m_txmempool.cs);\n         m_txmempool.remo",https://github.com/bitcoin/bitcoin/pull/19629#issuecomment-674409354,674409354,
hebasto,2020-08-15 17:03:00,"Another test of thread safety annotations with the following patch:\n```diff\n--- a/src/validation.cpp\n+++ b/src/validation.cpp\n@@ -2595,7 +2595,6 @@ public:\n bool CChainState::ConnectTip(BlockValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexNew, const std::shared_ptr<const CBlock>& pblock, ConnectTrace& connectTrace, DisconnectedBlockTransactions &disconnectpool",https://github.com/bitcoin/bitcoin/pull/19629#issuecomment-674423662,674423662,
MarcoFalke,2020-08-16 06:29:17,Addressed feedback by @hebasto ,https://github.com/bitcoin/bitcoin/pull/19629#issuecomment-674486264,674486264,
hebasto,2020-08-16 06:49:47,"Tested fa1d3da12e6d0712bf6934d6df9e6d5d0e43801d with https://github.com/bitcoin/bitcoin/pull/19629#issuecomment-674409354. Still fail.\nIt seems required to move data member `m_txmempool` from the implementation class to the base one, changing its type to a pointer, and providing `EXCLUSIVE_LOCKS_REQUIRED(m_txmempool->cs)` annotation.",https://github.com/bitcoin/bitcoin/pull/19629#issuecomment-674487906,674487906,
hebasto,2020-08-16 06:56:43,"Tested fa1d3da12e6d0712bf6934d6df9e6d5d0e43801d with https://github.com/bitcoin/bitcoin/pull/19629#issuecomment-674423662. Looks ok:\n```\nvalidation.cpp:2639:18: warning: calling function 'removeForBlock' requires holding mutex 'm_txmempool->m_mutex' exclusively [-Wthread-safety-analysis]\n    m_txmempool->removeForBlock(blockConnecting.vtx, pindexNew->nHeight);\n                 ^\n1 warnin",https://github.com/bitcoin/bitcoin/pull/19629#issuecomment-674488400,674488400,
hebasto,2020-08-16 07:10:51,"FWIW, I found a patch set from #19668 very useful to test correctness of thread safety annotations.\nCurrently, fa1d3da12e6d0712bf6934d6df9e6d5d0e43801d, a bunch of `-Wthread-safety-analysis` warnings are generated.\n\n<details>\n  <summary>fa1d3da12e6d0712bf6934d6df9e6d5d0e43801d + #19668</summary>\n  \n```\ninterfaces/txmempool.cpp:38:9: warning: calling function 'AssertLockHeldInternal<A",https://github.com/bitcoin/bitcoin/pull/19629#issuecomment-674489878,674489878,
MarcoFalke,2020-08-16 07:41:31,"Yes, if #19668 is merged, the AsserLockHeld in `interfaces/txmempool` must be replaced by LockAssertion\n\n> changing its type to a pointer\n\nI don't think this works. Or at least it would lead to the initial solution I had (keep a mempool pointer in validation). I am happy to revert to the initial solution or take over a patch, if you have one that compiles on clang with and without --enable",https://github.com/bitcoin/bitcoin/pull/19629#issuecomment-674493040,674493040,
hebasto,2020-08-17 21:11:59,"@MarcoFalke \n> I don't think this works. ... if you have one that compiles on clang with and without --enable-debug\n\nMind looking at https://github.com/hebasto/bitcoin/commits/pr19629-0816-FORK ?\n\nThe same branch, rebased on top of the master (1bc8e8eae2dc4b47ef67afc6880ea48b8e84a086) + #19668:\n- https://github.com/hebasto/bitcoin/commits/pr19629-0816-REBASED\n\n`LimitMempoolSize()` ",https://github.com/bitcoin/bitcoin/pull/19629#issuecomment-675118072,675118072,
hebasto,2020-08-18 10:27:30,"@MarcoFalke \nPlease have a look at the updated branch: https://github.com/hebasto/bitcoin/commits/pr19629-0816-FORKv2:\n - mess with `LimitMempoolSize()` is fixed\n- `TxMempool` is a pure interface now\n\n---\n\nThe same branch, rebased on top of the master (e6e277f9ed4da7aff9b7b39a7838bada0c3e572a) + #19668::\n- https://github.com/hebasto/bitcoin/commits/pr19629-0816-REBASEDv2",https://github.com/bitcoin/bitcoin/pull/19629#issuecomment-675397941,675397941,
hebasto,2020-08-18 11:09:24,"> Yes, if #19668 is merged, the AsserLockHeld in `interfaces/txmempool` must be replaced by LockAssertion\n\nThis is not required with [suggested](https://github.com/bitcoin/bitcoin/pull/19629#issuecomment-675397941) patch.",https://github.com/bitcoin/bitcoin/pull/19629#issuecomment-675415266,675415266,
MarcoFalke,2020-08-28 07:43:24,"Thanks for the review everyone. Though, I think this is getting a bit out of hand and trying to do too much things in one go. Closing for now.",https://github.com/bitcoin/bitcoin/pull/19629#issuecomment-682380380,682380380,
jnewbery,2020-08-28 08:14:50,"I really thought the original implementation was fine and is an improvement over the current code. Were there actually any problems with it, or is this just a case of the best being the enemy of good and us not making a good change because it's not perfect?",https://github.com/bitcoin/bitcoin/pull/19629#issuecomment-682393466,682393466,
MarcoFalke,2020-08-28 08:45:30,"Opened alternative in #19826 . The mempool interface idea can be explored later, if needed.",https://github.com/bitcoin/bitcoin/pull/19629#issuecomment-682406578,682406578,
darosior,2020-07-31 13:09:15,Isn't the asserion redundant with [line 2491](https://github.com/bitcoin/bitcoin/pull/19629/commits/faab637301a336c318ea8ee0187a74a2c7a92ef3#diff-24efdb00bfbe56b140fb006b562cc70bR2491) ?,https://github.com/bitcoin/bitcoin/pull/19629#discussion_r463600495,463600495,src/validation.cpp
MarcoFalke,2020-07-31 16:21:45,Locally it wouldn't compile for me with clang as soon as I remove it,https://github.com/bitcoin/bitcoin/pull/19629#discussion_r463706448,463706448,src/validation.cpp
jnewbery,2020-08-02 17:49:42,"For those scratching their heads over whether `LOCK(nullptr)` is ok, I think it's fine. It constructs a `UniqueLock` using this constructor:\n\nhttps://github.com/bitcoin/bitcoin/blob/a78742830aa35bf57bcb0a4730977a1e5a1876bc/src/sync.h#L163\n\nWhich calls the default constructor (1 in https://en.cppreference.com/w/cpp/thread/unique_lock/unique_lock) for the base `std::unique_lock<Mutex>` class",https://github.com/bitcoin/bitcoin/pull/19629#discussion_r464104555,464104555,src/validation.cpp
ajtowns,2020-08-06 20:18:45,Should just be removing the `::` but still requiring `mempool.cs` to already be locked. Keeping the annotation here means adding `LockAnnotation lock(mempool->cs);` in a bunch of places that call `UpdateMempoolForReorg`.,https://github.com/bitcoin/bitcoin/pull/19629#discussion_r466662830,466662830,src/validation.cpp
ajtowns,2020-08-06 20:46:51,"The `AssertLockHeld` here is silencing the compile time thread safety check, and will need to be `LockAssertion lock(m_mempool->cs)` after #19668 . It's not redundant with the earlier assertion, because the silencing is scoped to the block, which ends immediately for the `if (m_mempool) AssertLockHeld(m_mempool->cs);` line.",https://github.com/bitcoin/bitcoin/pull/19629#discussion_r466676807,466676807,src/validation.cpp
MarcoFalke,2020-08-15 11:45:18,Done,https://github.com/bitcoin/bitcoin/pull/19629#discussion_r470969162,470969162,src/validation.cpp
hebasto,2020-08-15 14:36:27,"face16170176c83d04c68454c91eaf42c80e6ec7\nThere is no need to place this class in the header, right?",https://github.com/bitcoin/bitcoin/pull/19629#discussion_r470996408,470996408,src/interfaces/txmempool.h
hebasto,2020-08-15 14:38:57,"face16170176c83d04c68454c91eaf42c80e6ec7\nnit: custom `Assert` has no benefits in this case\n```suggestion\n    void invalidCall() { assert(false); }\n```",https://github.com/bitcoin/bitcoin/pull/19629#discussion_r470996615,470996615,src/interfaces/txmempool.h
hebasto,2020-08-15 15:23:32,"```suggestion\n    void removeForBlock(const std::vector<CTransactionRef>& vtx, unsigned int block_height) override EXCLUSIVE_LOCKS_REQUIRED(m_txmempool.cs)\n```",https://github.com/bitcoin/bitcoin/pull/19629#discussion_r471000159,471000159,src/interfaces/txmempool.cpp
MarcoFalke,2020-08-16 06:25:46,"Thx, moved to cpp file",https://github.com/bitcoin/bitcoin/pull/19629#discussion_r471072267,471072267,src/interfaces/txmempool.h
MarcoFalke,2020-08-16 06:27:57,"I prefer `Assert` over `assert` because it comes with the following benefits:\n\n* Can not accidentally be disabled via NDEBUG\n* No need to update the code if more features get added to `Assert`, which are not part of `assert`",https://github.com/bitcoin/bitcoin/pull/19629#discussion_r471072437,471072437,src/interfaces/txmempool.h
MarcoFalke,2020-08-16 06:28:53,Annotation can not be added to cpp files (or at least they will be ignored). Moved annotation to header file.,https://github.com/bitcoin/bitcoin/pull/19629#discussion_r471072528,471072528,src/interfaces/txmempool.cpp
hebasto,2020-08-16 06:30:04,"Probably, it is worth to update [Developer Notes](https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md) :)",https://github.com/bitcoin/bitcoin/pull/19629#discussion_r471072621,471072621,src/interfaces/txmempool.h
hebasto,2020-08-16 06:35:06,"> Annotation can not be added to cpp files (or at least they will be ignored).\n\nI don't think so.\nhttps://clang.llvm.org/docs/ThreadSafetyAnalysis.html:\n> Attributes must be attached to named declarations, such as classes, methods, and data members.",https://github.com/bitcoin/bitcoin/pull/19629#discussion_r471073043,471073043,src/interfaces/txmempool.cpp
MarcoFalke,2020-08-16 07:02:12,"Just logically, if validation does not include the txmempool.cpp file, how would it know about the annotation?\n\nAnd practically you observed that it didn't work: https://github.com/bitcoin/bitcoin/pull/19629#issuecomment-674423662",https://github.com/bitcoin/bitcoin/pull/19629#discussion_r471075403,471075403,src/interfaces/txmempool.cpp
