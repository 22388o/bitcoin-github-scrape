[
  {
    "sha": "fab9c6259ac46a970dcbed771c1f975c243248e1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWI5YzYyNTlhYzQ2YTk3MGRjYmVkNzcxYzFmOTc1YzI0MzI0OGUx",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-08-15T11:43:58Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-08-15T11:42:25Z"
      },
      "message": "sync: Add AssertLockHeld(MutexType*) helper",
      "tree": {
        "sha": "0b79d477e7df2b472c4bb62cf8cfe3aeb02e73ee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0b79d477e7df2b472c4bb62cf8cfe3aeb02e73ee"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fab9c6259ac46a970dcbed771c1f975c243248e1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUh7NwwAq/6AGK1KAW+xcop50wXkbLcnpEWQrDsb11yLeAcPtM8UnwXnYrsx4hip\nzUo6a56mvenS1zmlZH/5CKkGPXTl3UT8fJXOKfZsHyMsYlENjzF5Uc6aXjGj9B3l\nvPwF0XsAIY5i420Rzsg41iT0W1vUBPy5jmnNrXxFDlznbTJc98LatP+0LfRto1FM\nXRCrcxoa5fdLJEUi4vZGLA9TI5pyYgCUEjYF03T4swWrtd5jurn7rj4/xQwLIKam\ntfzRxbwC1pcQTEssWtw4K/1jSiSqnWV1e+9SpxJ9dKmFYk43ybiiq+KugtQ9F3Te\nHu0zURxcm3kWUCBDytGvHudBFTlo24G9FRUXMZqBQUvZerzojgPUN58Dxi5ZTjfX\nf32xOV/ExEDOVc5ALxYTvcuISB8FlcwrHvLE519kUag1BZdRsGpzX0CuuhUmn3o5\nKIgiKDMxT6IC0BZI5CglLMs7INACDCQkVAshI6l1MB1SrpdFeXxpGukz4iZh0Xhm\nwF9iN8uz\n=YIRm\n-----END PGP SIGNATURE-----",
        "payload": "tree 0b79d477e7df2b472c4bb62cf8cfe3aeb02e73ee\nparent 30dd562fd2c58536fa026fff9853b8d825216b01\nauthor MarcoFalke <falke.marco@gmail.com> 1597491838 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1597491745 +0200\n\nsync: Add AssertLockHeld(MutexType*) helper\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fab9c6259ac46a970dcbed771c1f975c243248e1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fab9c6259ac46a970dcbed771c1f975c243248e1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fab9c6259ac46a970dcbed771c1f975c243248e1/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "30dd562fd2c58536fa026fff9853b8d825216b01",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/30dd562fd2c58536fa026fff9853b8d825216b01",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/30dd562fd2c58536fa026fff9853b8d825216b01"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 6,
      "deletions": 1
    },
    "files": [
      {
        "sha": "406cdcc5f1183d4a54003dc83c2eb2861150c38a",
        "filename": "src/sync.h",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab9c6259ac46a970dcbed771c1f975c243248e1/src/sync.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab9c6259ac46a970dcbed771c1f975c243248e1/src/sync.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.h?ref=fab9c6259ac46a970dcbed771c1f975c243248e1",
        "patch": "@@ -74,8 +74,13 @@ inline void AssertLockNotHeldInternal(const char* pszName, const char* pszFile,\n inline void DeleteLock(void* cs) {}\n inline bool LockStackEmpty() { return true; }\n #endif\n-#define AssertLockHeld(cs) AssertLockHeldInternal(#cs, __FILE__, __LINE__, &cs)\n+#define AssertLockHeld(cs) AssertLockHeldInternal(#cs, __FILE__, __LINE__, cs)\n #define AssertLockNotHeld(cs) AssertLockNotHeldInternal(#cs, __FILE__, __LINE__, &cs)\n+template <typename MutexType>\n+void AssertLockHeldInternal(const char* name, const char* file, int line, MutexType& mtx) ASSERT_EXCLUSIVE_LOCK(mtx)\n+{\n+    AssertLockHeldInternal(name, file, line, &mtx);\n+};\n \n /**\n  * Template mixin that adds -Wthread-safety locking annotations and lock order"
      }
    ]
  },
  {
    "sha": "fa1d3da12e6d0712bf6934d6df9e6d5d0e43801d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTFkM2RhMTJlNmQwNzEyYmY2OTM0ZDZkZjllNmQ1ZDBlNDM4MDFk",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-07-28T05:48:30Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-08-16T06:22:13Z"
      },
      "message": "Keep mempool interface in chainstate for validation",
      "tree": {
        "sha": "60ea35fd63703149fd43395b2f1d70864742d49a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/60ea35fd63703149fd43395b2f1d70864742d49a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa1d3da12e6d0712bf6934d6df9e6d5d0e43801d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUjWlQwAoXqmImXAxOHFqhuMlCOi2aqBwRqQICs9CyP0hMjHnJqc9nJVQ0ZEL9vu\nW8mvg6c7In1i3hStpEYw7xk9bR8HZhbfmlVEFTmkThSp1/9OolDXDIvanTmXKKJp\nxgNeO7Q66XkgCyJXEZMijnyHvaDj8P+qjoZM4gotsjvS9AUY0UJVA20roSCuAX/5\n3UKyjG1FFKlrqUs9e50M4yDyVprpq8RTcbgQ4ZOfz9NCUpSNovAS4dpp+sVTLwjT\nzDNvj4xuZZlaah4k606MhvVOqNz0L0+GFcCn3qqjdCHt7fhT/pCT9yBVnWZjnvZj\nJkFgqwTvv3fITzcMdjc4Drl/hAQzp4jL8FL8zwF8AM7AKoz1bvcWEAETIZgQEz1z\nsJjWRp4J09cAFEgr49nwSrjGP2Nmx1/sGLqJyF1Rv+BM83D278XAtbdEYQ/PluBy\nat69oKQEo/H8p2ClGSHkeUIwHnDTjSyy4/gu+mF8/nFF+G0R0v0y+E1eTKWO13wU\nNb21zrOo\n=WflI\n-----END PGP SIGNATURE-----",
        "payload": "tree 60ea35fd63703149fd43395b2f1d70864742d49a\nparent fab9c6259ac46a970dcbed771c1f975c243248e1\nauthor MarcoFalke <falke.marco@gmail.com> 1595915310 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1597558933 +0200\n\nKeep mempool interface in chainstate for validation\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa1d3da12e6d0712bf6934d6df9e6d5d0e43801d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa1d3da12e6d0712bf6934d6df9e6d5d0e43801d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa1d3da12e6d0712bf6934d6df9e6d5d0e43801d/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fab9c6259ac46a970dcbed771c1f975c243248e1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fab9c6259ac46a970dcbed771c1f975c243248e1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fab9c6259ac46a970dcbed771c1f975c243248e1"
      }
    ],
    "stats": {
      "total": 237,
      "additions": 192,
      "deletions": 45
    },
    "files": [
      {
        "sha": "a1915bbba22ac9b26d58c49100e0575da04df319",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa1d3da12e6d0712bf6934d6df9e6d5d0e43801d/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa1d3da12e6d0712bf6934d6df9e6d5d0e43801d/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=fa1d3da12e6d0712bf6934d6df9e6d5d0e43801d",
        "patch": "@@ -146,6 +146,7 @@ BITCOIN_CORE_H = \\\n   interfaces/chain.h \\\n   interfaces/handler.h \\\n   interfaces/node.h \\\n+  interfaces/txmempool.h \\\n   interfaces/wallet.h \\\n   key.h \\\n   key_io.h \\\n@@ -297,6 +298,7 @@ libbitcoin_server_a_SOURCES = \\\n   init.cpp \\\n   interfaces/chain.cpp \\\n   interfaces/node.cpp \\\n+  interfaces/txmempool.cpp \\\n   miner.cpp \\\n   net.cpp \\\n   net_processing.cpp \\"
      },
      {
        "sha": "b094ddb3c6c9b0a626fb27f3e0734ad0e09560c0",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa1d3da12e6d0712bf6934d6df9e6d5d0e43801d/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa1d3da12e6d0712bf6934d6df9e6d5d0e43801d/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=fa1d3da12e6d0712bf6934d6df9e6d5d0e43801d",
        "patch": "@@ -1566,7 +1566,7 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n             const int64_t load_block_index_start_time = GetTimeMillis();\n             try {\n                 LOCK(cs_main);\n-                chainman.InitializeChainstate();\n+                chainman.InitializeChainstate(node.mempool);\n                 chainman.m_total_coinstip_cache = nCoinCacheUsage;\n                 chainman.m_total_coinsdb_cache = nCoinDBCache;\n "
      },
      {
        "sha": "8ae034e57ce0f190a2895fec177e28ddb945d03e",
        "filename": "src/interfaces/README.md",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa1d3da12e6d0712bf6934d6df9e6d5d0e43801d/src/interfaces/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa1d3da12e6d0712bf6934d6df9e6d5d0e43801d/src/interfaces/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/README.md?ref=fa1d3da12e6d0712bf6934d6df9e6d5d0e43801d",
        "patch": "@@ -8,6 +8,8 @@ The following interfaces are defined here:\n \n * [`Node`](node.h) \u2014 used by GUI to start & stop bitcoin node. Added in [#10244](https://github.com/bitcoin/bitcoin/pull/10244).\n \n+* [`TxMempool`](txmempool.h) \u2014 used by validation to access mempool state.\n+\n * [`Wallet`](wallet.h) \u2014 used by GUI to access wallets. Added in [#10244](https://github.com/bitcoin/bitcoin/pull/10244).\n \n * [`Handler`](handler.h) \u2014 returned by `handleEvent` methods on interfaces above and used to manage lifetimes of event handlers."
      },
      {
        "sha": "d01d16a572944563e8d117b52f7385350e607f72",
        "filename": "src/interfaces/txmempool.cpp",
        "status": "added",
        "additions": 72,
        "deletions": 0,
        "changes": 72,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa1d3da12e6d0712bf6934d6df9e6d5d0e43801d/src/interfaces/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa1d3da12e6d0712bf6934d6df9e6d5d0e43801d/src/interfaces/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/txmempool.cpp?ref=fa1d3da12e6d0712bf6934d6df9e6d5d0e43801d",
        "patch": "@@ -0,0 +1,72 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <interfaces/txmempool.h>\n+\n+#include <primitives/transaction.h>\n+#include <sync.h>\n+#include <txmempool.h>\n+#include <util/check.h>\n+#include <util/memory.h>\n+\n+#include <memory>\n+#include <vector>\n+\n+namespace interfaces {\n+namespace {\n+\n+class TxMempoolImpl final : public TxMempool\n+{\n+public:\n+    explicit TxMempoolImpl(CTxMemPool& txmempool)\n+        : TxMempool{&txmempool.cs},\n+          m_txmempool(txmempool) {}\n+\n+    void transactionUpdated() override\n+    {\n+        m_txmempool.AddTransactionsUpdated(1);\n+    }\n+\n+    void check(const CCoinsViewCache& coins) override\n+    {\n+        m_txmempool.check(&coins);\n+    }\n+\n+    void removeForBlock(const std::vector<CTransactionRef>& vtx, unsigned int block_height) override\n+    {\n+        AssertLockHeld(m_txmempool.cs);\n+        m_txmempool.removeForBlock(vtx, block_height);\n+    }\n+\n+    CTxMemPool* txmempool() override { return &m_txmempool; }\n+\n+    CTxMemPool& m_txmempool;\n+};\n+\n+class NoTxMempool final : public TxMempool\n+{\n+public:\n+    explicit NoTxMempool()\n+        : TxMempool{nullptr} {}\n+\n+    void transactionUpdated() override { invalidCall(); }\n+    void check(const CCoinsViewCache& coins) override { invalidCall(); }\n+    void removeForBlock(const std::vector<CTransactionRef>& vtx, unsigned int block_height) override { invalidCall(); }\n+\n+private:\n+    void invalidCall() { Assert(false); }\n+};\n+\n+} // namespace\n+\n+std::unique_ptr<TxMempool> MakeTxMempool(CTxMemPool* txpool)\n+{\n+    if (txpool) {\n+        return MakeUnique<TxMempoolImpl>(*txpool);\n+    } else {\n+        return MakeUnique<NoTxMempool>();\n+    }\n+}\n+\n+} // namespace interfaces"
      },
      {
        "sha": "7d93697832b4cb6ca07cff6bdea47ca2c7bfc275",
        "filename": "src/interfaces/txmempool.h",
        "status": "added",
        "additions": 48,
        "deletions": 0,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa1d3da12e6d0712bf6934d6df9e6d5d0e43801d/src/interfaces/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa1d3da12e6d0712bf6934d6df9e6d5d0e43801d/src/interfaces/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/txmempool.h?ref=fa1d3da12e6d0712bf6934d6df9e6d5d0e43801d",
        "patch": "@@ -0,0 +1,48 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INTERFACES_TXMEMPOOL_H\n+#define BITCOIN_INTERFACES_TXMEMPOOL_H\n+\n+#include <primitives/transaction.h> // For CTransactionRef\n+#include <sync.h>                   // For RecursiveMutex\n+\n+#include <memory>\n+#include <vector>\n+\n+class CTxMemPool;\n+class CCoinsViewCache;\n+\n+namespace interfaces {\n+\n+//! Interface for accessing a txmempool.\n+class TxMempool\n+{\n+public:\n+    explicit TxMempool(RecursiveMutex* mutex)\n+        : m_mutex{mutex} {}\n+    virtual ~TxMempool() {}\n+\n+    //! A transaction was updated\n+    virtual void transactionUpdated() = 0;\n+\n+    //! Run consistency check\n+    virtual void check(const CCoinsViewCache& coins) = 0;\n+\n+    //! Remove txs after block has been connected\n+    virtual void removeForBlock(const std::vector<CTransactionRef>& vtx, unsigned int block_height) EXCLUSIVE_LOCKS_REQUIRED(m_mutex) = 0;\n+\n+    //! Alias for the txmempool mutex or nullptr if no txmempool was passed in\n+    RecursiveMutex* const m_mutex;\n+\n+    //! Return pointer to internal txmempool class\n+    virtual CTxMemPool* txmempool() { return nullptr; }\n+};\n+\n+//! Return implementation of txmempool interface.\n+std::unique_ptr<TxMempool> MakeTxMempool(CTxMemPool* txmempool);\n+\n+} // namespace interfaces\n+\n+#endif // BITCOIN_INTERFACES_TXMEMPOOL_H"
      },
      {
        "sha": "dacc476319050044f97fb1abe0e8fbf3c249181c",
        "filename": "src/test/util/setup_common.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa1d3da12e6d0712bf6934d6df9e6d5d0e43801d/src/test/util/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa1d3da12e6d0712bf6934d6df9e6d5d0e43801d/src/test/util/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.cpp?ref=fa1d3da12e6d0712bf6934d6df9e6d5d0e43801d",
        "patch": "@@ -141,8 +141,11 @@ TestingSetup::TestingSetup(const std::string& chainName, const std::vector<const\n \n     pblocktree.reset(new CBlockTreeDB(1 << 20, true));\n \n+    m_node.mempool = &::mempool;\n+    m_node.mempool->setSanityCheck(1.0);\n+\n     m_node.chainman = &::g_chainman;\n-    m_node.chainman->InitializeChainstate();\n+    m_node.chainman->InitializeChainstate(m_node.mempool);\n     ::ChainstateActive().InitCoinsDB(\n         /* cache_size_bytes */ 1 << 23, /* in_memory */ true, /* should_wipe */ false);\n     assert(!::ChainstateActive().CanFlushToDisk());\n@@ -164,8 +167,6 @@ TestingSetup::TestingSetup(const std::string& chainName, const std::vector<const\n     }\n     g_parallel_script_checks = true;\n \n-    m_node.mempool = &::mempool;\n-    m_node.mempool->setSanityCheck(1.0);\n     m_node.banman = MakeUnique<BanMan>(GetDataDir() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n     m_node.connman = MakeUnique<CConnman>(0x1337, 0x1337); // Deterministic randomness for tests.\n     m_node.peer_logic = MakeUnique<PeerLogicValidation>(m_node.connman.get(), m_node.banman.get(), *m_node.scheduler, *m_node.chainman, *m_node.mempool);"
      },
      {
        "sha": "8a2bd765fcec68bc920b5a7366cdc001c13f7ec2",
        "filename": "src/test/validation_chainstate_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa1d3da12e6d0712bf6934d6df9e6d5d0e43801d/src/test/validation_chainstate_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa1d3da12e6d0712bf6934d6df9e6d5d0e43801d/src/test/validation_chainstate_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_chainstate_tests.cpp?ref=fa1d3da12e6d0712bf6934d6df9e6d5d0e43801d",
        "patch": "@@ -20,6 +20,7 @@ BOOST_FIXTURE_TEST_SUITE(validation_chainstate_tests, TestingSetup)\n BOOST_AUTO_TEST_CASE(validation_chainstate_resize_caches)\n {\n     ChainstateManager manager;\n+    CTxMemPool mempool;\n \n     //! Create and add a Coin with DynamicMemoryUsage of 80 bytes to the given view.\n     auto add_coin = [](CCoinsViewCache& coins_view) -> COutPoint {\n@@ -34,7 +35,7 @@ BOOST_AUTO_TEST_CASE(validation_chainstate_resize_caches)\n         return outp;\n     };\n \n-    CChainState& c1 = *WITH_LOCK(cs_main, return &manager.InitializeChainstate());\n+    CChainState& c1 = *WITH_LOCK(cs_main, return &manager.InitializeChainstate(&mempool));\n     c1.InitCoinsDB(\n         /* cache_size_bytes */ 1 << 23, /* in_memory */ true, /* should_wipe */ false);\n     WITH_LOCK(::cs_main, c1.InitCoinsCache(1 << 23));"
      },
      {
        "sha": "f431e36c033469dd81a41466d0d7a38780a73e7f",
        "filename": "src/test/validation_chainstatemanager_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa1d3da12e6d0712bf6934d6df9e6d5d0e43801d/src/test/validation_chainstatemanager_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa1d3da12e6d0712bf6934d6df9e6d5d0e43801d/src/test/validation_chainstatemanager_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_chainstatemanager_tests.cpp?ref=fa1d3da12e6d0712bf6934d6df9e6d5d0e43801d",
        "patch": "@@ -23,12 +23,13 @@ BOOST_FIXTURE_TEST_SUITE(validation_chainstatemanager_tests, TestingSetup)\n BOOST_AUTO_TEST_CASE(chainstatemanager)\n {\n     ChainstateManager manager;\n+    CTxMemPool mempool;\n     std::vector<CChainState*> chainstates;\n     const CChainParams& chainparams = Params();\n \n     // Create a legacy (IBD) chainstate.\n     //\n-    CChainState& c1 = *WITH_LOCK(::cs_main, return &manager.InitializeChainstate());\n+    CChainState& c1 = *WITH_LOCK(::cs_main, return &manager.InitializeChainstate(&mempool));\n     chainstates.push_back(&c1);\n     c1.InitCoinsDB(\n         /* cache_size_bytes */ 1 << 23, /* in_memory */ true, /* should_wipe */ false);\n@@ -54,7 +55,7 @@ BOOST_AUTO_TEST_CASE(chainstatemanager)\n \n     // Create a snapshot-based chainstate.\n     //\n-    CChainState& c2 = *WITH_LOCK(::cs_main, return &manager.InitializeChainstate(GetRandHash()));\n+    CChainState& c2 = *WITH_LOCK(::cs_main, return &manager.InitializeChainstate(&mempool, GetRandHash()));\n     chainstates.push_back(&c2);\n     c2.InitCoinsDB(\n         /* cache_size_bytes */ 1 << 23, /* in_memory */ true, /* should_wipe */ false);\n@@ -104,6 +105,7 @@ BOOST_AUTO_TEST_CASE(chainstatemanager)\n BOOST_AUTO_TEST_CASE(chainstatemanager_rebalance_caches)\n {\n     ChainstateManager manager;\n+    CTxMemPool mempool;\n     size_t max_cache = 10000;\n     manager.m_total_coinsdb_cache = max_cache;\n     manager.m_total_coinstip_cache = max_cache;\n@@ -112,7 +114,7 @@ BOOST_AUTO_TEST_CASE(chainstatemanager_rebalance_caches)\n \n     // Create a legacy (IBD) chainstate.\n     //\n-    CChainState& c1 = *WITH_LOCK(cs_main, return &manager.InitializeChainstate());\n+    CChainState& c1 = *WITH_LOCK(cs_main, return &manager.InitializeChainstate(&mempool));\n     chainstates.push_back(&c1);\n     c1.InitCoinsDB(\n         /* cache_size_bytes */ 1 << 23, /* in_memory */ true, /* should_wipe */ false);\n@@ -129,7 +131,7 @@ BOOST_AUTO_TEST_CASE(chainstatemanager_rebalance_caches)\n \n     // Create a snapshot-based chainstate.\n     //\n-    CChainState& c2 = *WITH_LOCK(cs_main, return &manager.InitializeChainstate(GetRandHash()));\n+    CChainState& c2 = *WITH_LOCK(cs_main, return &manager.InitializeChainstate(&mempool, GetRandHash()));\n     chainstates.push_back(&c2);\n     c2.InitCoinsDB(\n         /* cache_size_bytes */ 1 << 23, /* in_memory */ true, /* should_wipe */ false);\n@@ -147,7 +149,6 @@ BOOST_AUTO_TEST_CASE(chainstatemanager_rebalance_caches)\n     BOOST_CHECK_CLOSE(c1.m_coinsdb_cache_size_bytes, max_cache * 0.05, 1);\n     BOOST_CHECK_CLOSE(c2.m_coinstip_cache_size_bytes, max_cache * 0.95, 1);\n     BOOST_CHECK_CLOSE(c2.m_coinsdb_cache_size_bytes, max_cache * 0.95, 1);\n-\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "2572e2025b8f40da8c630de452dc1d849e3671c4",
        "filename": "src/test/validation_flush_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa1d3da12e6d0712bf6934d6df9e6d5d0e43801d/src/test/validation_flush_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa1d3da12e6d0712bf6934d6df9e6d5d0e43801d/src/test/validation_flush_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_flush_tests.cpp?ref=fa1d3da12e6d0712bf6934d6df9e6d5d0e43801d",
        "patch": "@@ -18,8 +18,9 @@ BOOST_FIXTURE_TEST_SUITE(validation_flush_tests, BasicTestingSetup)\n //!\n BOOST_AUTO_TEST_CASE(getcoinscachesizestate)\n {\n+    CTxMemPool mempool;\n     BlockManager blockman{};\n-    CChainState chainstate{blockman};\n+    CChainState chainstate{&mempool, blockman};\n     chainstate.InitCoinsDB(/*cache_size_bytes*/ 1 << 10, /*in_memory*/ true, /*should_wipe*/ false);\n     WITH_LOCK(::cs_main, chainstate.InitCoinsCache(1 << 10));\n     CTxMemPool tx_pool{};"
      },
      {
        "sha": "faffb4496c96800b969b68de1b215dcf724c0ca5",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 39,
        "deletions": 25,
        "changes": 64,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa1d3da12e6d0712bf6934d6df9e6d5d0e43801d/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa1d3da12e6d0712bf6934d6df9e6d5d0e43801d/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=fa1d3da12e6d0712bf6934d6df9e6d5d0e43801d",
        "patch": "@@ -18,6 +18,7 @@\n #include <flatfile.h>\n #include <hash.h>\n #include <index/txindex.h>\n+#include <interfaces/txmempool.h>\n #include <logging.h>\n #include <logging/timer.h>\n #include <node/ui_interface.h>\n@@ -370,9 +371,13 @@ static bool IsCurrentForFeeEstimation() EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n  * and instead just erase from the mempool as needed.\n  */\n \n-static void UpdateMempoolForReorg(DisconnectedBlockTransactions& disconnectpool, bool fAddToMempool) EXCLUSIVE_LOCKS_REQUIRED(cs_main, ::mempool.cs)\n+static void UpdateMempoolForReorg(interfaces::TxMempool& txmempool, DisconnectedBlockTransactions& disconnectpool, bool fAddToMempool) EXCLUSIVE_LOCKS_REQUIRED(cs_main, txmempool.m_mutex)\n {\n+    if (!txmempool.txmempool()) return;\n+    CTxMemPool& mempool = *txmempool.txmempool();\n     AssertLockHeld(cs_main);\n+    AssertLockHeld(mempool.cs);\n+\n     std::vector<uint256> vHashUpdate;\n     // disconnectpool's insertion_order index sorts the entries from\n     // oldest to newest, but the oldest entry will be the last tx from the\n@@ -1254,8 +1259,9 @@ void CoinsViews::InitCache()\n     m_cacheview = MakeUnique<CCoinsViewCache>(&m_catcherview);\n }\n \n-CChainState::CChainState(BlockManager& blockman, uint256 from_snapshot_blockhash)\n+CChainState::CChainState(CTxMemPool* mempool, BlockManager& blockman, uint256 from_snapshot_blockhash)\n     : m_blockman(blockman),\n+      m_txmempool(interfaces::MakeTxMempool(mempool)),\n       m_from_snapshot_blockhash(from_snapshot_blockhash) {}\n \n void CChainState::InitCoinsDB(\n@@ -2280,7 +2286,7 @@ bool CChainState::FlushStateToDisk(\n     {\n         bool fFlushForPrune = false;\n         bool fDoFullFlush = false;\n-        CoinsCacheSizeState cache_state = GetCoinsCacheSizeState(&::mempool);\n+        CoinsCacheSizeState cache_state = GetCoinsCacheSizeState(m_txmempool->txmempool());\n         LOCK(cs_LastBlockFile);\n         if (fPruneMode && (fCheckForPruning || nManualPruneHeight > 0) && !fReindex) {\n             if (nManualPruneHeight > 0) {\n@@ -2426,11 +2432,11 @@ static void AppendWarning(bilingual_str& res, const bilingual_str& warn)\n }\n \n /** Check warning conditions and do some notifications on new chain tip set. */\n-void static UpdateTip(const CBlockIndex* pindexNew, const CChainParams& chainParams)\n+static void UpdateTip(interfaces::TxMempool& mempool, const CBlockIndex* pindexNew, const CChainParams& chainParams)\n     EXCLUSIVE_LOCKS_REQUIRED(::cs_main)\n {\n     // New best block\n-    mempool.AddTransactionsUpdated(1);\n+    mempool.transactionUpdated();\n \n     {\n         LOCK(g_best_block_mutex);\n@@ -2472,7 +2478,6 @@ void static UpdateTip(const CBlockIndex* pindexNew, const CChainParams& chainPar\n       FormatISO8601DateTime(pindexNew->GetBlockTime()),\n       GuessVerificationProgress(chainParams.TxData(), pindexNew), ::ChainstateActive().CoinsTip().DynamicMemoryUsage() * (1.0 / (1<<20)), ::ChainstateActive().CoinsTip().GetCacheSize(),\n       !warning_messages.empty() ? strprintf(\" warning='%s'\", warning_messages.original) : \"\");\n-\n }\n \n /** Disconnect m_chain's tip.\n@@ -2481,12 +2486,15 @@ void static UpdateTip(const CBlockIndex* pindexNew, const CChainParams& chainPar\n   * should make the mempool consistent again by calling UpdateMempoolForReorg.\n   * with cs_main held.\n   *\n-  * If disconnectpool is nullptr, then no disconnected transactions are added to\n+  * If disconnectpool is nullptr or m_txmempool is unvailable, then no disconnected transactions are added to\n   * disconnectpool (note that the caller is responsible for mempool consistency\n   * in any case).\n   */\n-bool CChainState::DisconnectTip(BlockValidationState& state, const CChainParams& chainparams, DisconnectedBlockTransactions *disconnectpool)\n+bool CChainState::DisconnectTip(BlockValidationState& state, const CChainParams& chainparams, DisconnectedBlockTransactions* disconnectpool)\n {\n+    AssertLockHeld(cs_main);\n+    AssertLockHeld(m_txmempool->m_mutex);\n+\n     CBlockIndex *pindexDelete = m_chain.Tip();\n     assert(pindexDelete);\n     // Read block from disk.\n@@ -2509,22 +2517,23 @@ bool CChainState::DisconnectTip(BlockValidationState& state, const CChainParams&\n     if (!FlushStateToDisk(chainparams, state, FlushStateMode::IF_NEEDED))\n         return false;\n \n-    if (disconnectpool) {\n+    if (disconnectpool && m_txmempool->txmempool()) {\n+        AssertLockHeld(m_txmempool->txmempool()->cs);\n         // Save transactions to re-add to mempool at end of reorg\n         for (auto it = block.vtx.rbegin(); it != block.vtx.rend(); ++it) {\n             disconnectpool->addTransaction(*it);\n         }\n         while (disconnectpool->DynamicMemoryUsage() > MAX_DISCONNECTED_TX_POOL_SIZE * 1000) {\n             // Drop the earliest entry, and remove its children from the mempool.\n             auto it = disconnectpool->queuedTx.get<insertion_order>().begin();\n-            mempool.removeRecursive(**it, MemPoolRemovalReason::REORG);\n+            m_txmempool->txmempool()->removeRecursive(**it, MemPoolRemovalReason::REORG);\n             disconnectpool->removeEntry(it);\n         }\n     }\n \n     m_chain.SetTip(pindexDelete->pprev);\n \n-    UpdateTip(pindexDelete->pprev, chainparams);\n+    UpdateTip(*m_txmempool, pindexDelete->pprev, chainparams);\n     // Let wallets know transactions went from 1-confirmed to\n     // 0-confirmed or conflicted:\n     GetMainSignals().BlockDisconnected(pblock, pindexDelete);\n@@ -2585,6 +2594,9 @@ class ConnectTrace {\n  */\n bool CChainState::ConnectTip(BlockValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexNew, const std::shared_ptr<const CBlock>& pblock, ConnectTrace& connectTrace, DisconnectedBlockTransactions &disconnectpool)\n {\n+    AssertLockHeld(cs_main);\n+    AssertLockHeld(m_txmempool->m_mutex);\n+\n     assert(pindexNew->pprev == m_chain.Tip());\n     // Read block from disk.\n     int64_t nTime1 = GetTimeMicros();\n@@ -2625,11 +2637,11 @@ bool CChainState::ConnectTip(BlockValidationState& state, const CChainParams& ch\n     int64_t nTime5 = GetTimeMicros(); nTimeChainState += nTime5 - nTime4;\n     LogPrint(BCLog::BENCH, \"  - Writing chainstate: %.2fms [%.2fs (%.2fms/blk)]\\n\", (nTime5 - nTime4) * MILLI, nTimeChainState * MICRO, nTimeChainState * MILLI / nBlocksTotal);\n     // Remove conflicting transactions from the mempool.;\n-    mempool.removeForBlock(blockConnecting.vtx, pindexNew->nHeight);\n+    m_txmempool->removeForBlock(blockConnecting.vtx, pindexNew->nHeight);\n     disconnectpool.removeForBlock(blockConnecting.vtx);\n     // Update m_chain & related variables.\n     m_chain.SetTip(pindexNew);\n-    UpdateTip(pindexNew, chainparams);\n+    UpdateTip(*m_txmempool, pindexNew, chainparams);\n \n     int64_t nTime6 = GetTimeMicros(); nTimePostConnect += nTime6 - nTime5; nTimeTotal += nTime6 - nTime1;\n     LogPrint(BCLog::BENCH, \"  - Connect postprocess: %.2fms [%.2fs (%.2fms/blk)]\\n\", (nTime6 - nTime5) * MILLI, nTimePostConnect * MICRO, nTimePostConnect * MILLI / nBlocksTotal);\n@@ -2719,6 +2731,7 @@ void CChainState::PruneBlockIndexCandidates() {\n bool CChainState::ActivateBestChainStep(BlockValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexMostWork, const std::shared_ptr<const CBlock>& pblock, bool& fInvalidFound, ConnectTrace& connectTrace)\n {\n     AssertLockHeld(cs_main);\n+    AssertLockHeld(m_txmempool->m_mutex);\n \n     const CBlockIndex *pindexOldTip = m_chain.Tip();\n     const CBlockIndex *pindexFork = m_chain.FindFork(pindexMostWork);\n@@ -2730,7 +2743,7 @@ bool CChainState::ActivateBestChainStep(BlockValidationState& state, const CChai\n         if (!DisconnectTip(state, chainparams, &disconnectpool)) {\n             // This is likely a fatal error, but keep the mempool consistent,\n             // just in case. Only remove from the mempool in this case.\n-            UpdateMempoolForReorg(disconnectpool, false);\n+            UpdateMempoolForReorg(*m_txmempool, disconnectpool, false);\n \n             // If we're unable to disconnect a block during normal operation,\n             // then that is a failure of our local system -- we should abort\n@@ -2774,7 +2787,7 @@ bool CChainState::ActivateBestChainStep(BlockValidationState& state, const CChai\n                     // A system error occurred (disk space, database error, ...).\n                     // Make the mempool consistent with the current tip, just in case\n                     // any observers try to use it before shutdown.\n-                    UpdateMempoolForReorg(disconnectpool, false);\n+                    UpdateMempoolForReorg(*m_txmempool, disconnectpool, false);\n                     return false;\n                 }\n             } else {\n@@ -2791,9 +2804,9 @@ bool CChainState::ActivateBestChainStep(BlockValidationState& state, const CChai\n     if (fBlocksDisconnected) {\n         // If any blocks were disconnected, disconnectpool may be non empty.  Add\n         // any disconnected transactions back to the mempool.\n-        UpdateMempoolForReorg(disconnectpool, true);\n+        UpdateMempoolForReorg(*m_txmempool, disconnectpool, true);\n     }\n-    mempool.check(&CoinsTip());\n+    m_txmempool->check(CoinsTip());\n \n     // Callbacks/notifications for a new best chain.\n     if (fInvalidFound)\n@@ -2867,7 +2880,8 @@ bool CChainState::ActivateBestChain(BlockValidationState &state, const CChainPar\n         LimitValidationInterfaceQueue();\n \n         {\n-            LOCK2(cs_main, ::mempool.cs); // Lock transaction pool for at least as long as it takes for connectTrace to be consumed\n+            LOCK(cs_main);\n+            LOCK(m_txmempool->m_mutex); // Lock transaction pool for at least as long as it takes for connectTrace to be consumed\n             CBlockIndex* starting_tip = m_chain.Tip();\n             bool blocks_connected = false;\n             do {\n@@ -3020,7 +3034,7 @@ bool CChainState::InvalidateBlock(BlockValidationState& state, const CChainParam\n         LimitValidationInterfaceQueue();\n \n         LOCK(cs_main);\n-        LOCK(::mempool.cs); // Lock for as long as disconnectpool is in scope to make sure UpdateMempoolForReorg is called after DisconnectTip without unlocking in between\n+        LOCK(m_txmempool->m_mutex); // Lock for as long as disconnectpool is in scope to make sure UpdateMempoolForReorg is called after DisconnectTip without unlocking in between\n         if (!m_chain.Contains(pindex)) break;\n         pindex_was_in_chain = true;\n         CBlockIndex *invalid_walk_tip = m_chain.Tip();\n@@ -3029,12 +3043,12 @@ bool CChainState::InvalidateBlock(BlockValidationState& state, const CChainParam\n         // unconditionally valid already, so force disconnect away from it.\n         DisconnectedBlockTransactions disconnectpool;\n         bool ret = DisconnectTip(state, chainparams, &disconnectpool);\n-        // DisconnectTip will add transactions to disconnectpool.\n+        // DisconnectTip may add transactions to disconnectpool.\n         // Adjust the mempool to be consistent with the new tip, adding\n         // transactions back to the mempool if disconnecting was successful,\n         // and we're not doing a very deep invalidation (in which case\n         // keeping the mempool up to date is probably futile anyway).\n-        UpdateMempoolForReorg(disconnectpool, /* fAddToMempool = */ (++disconnected <= 10) && ret);\n+        UpdateMempoolForReorg(*m_txmempool, disconnectpool, /* fAddToMempool = */ (++disconnected <= 10) && ret);\n         if (!ret) return false;\n         assert(invalid_walk_tip->pprev == m_chain.Tip());\n \n@@ -4517,7 +4531,8 @@ bool CChainState::RewindBlockIndex(const CChainParams& params)\n     // Loop until the tip is below nHeight, or we reach a pruned block.\n     while (!ShutdownRequested()) {\n         {\n-            LOCK2(cs_main, ::mempool.cs);\n+            LOCK(cs_main);\n+            LOCK(m_txmempool->m_mutex);\n             // Make sure nothing changed from under us (this won't happen because RewindBlockIndex runs before importing/network are active)\n             assert(tip == m_chain.Tip());\n             if (tip == nullptr || tip->nHeight < nHeight) break;\n@@ -5246,7 +5261,7 @@ std::vector<CChainState*> ChainstateManager::GetAll()\n     return out;\n }\n \n-CChainState& ChainstateManager::InitializeChainstate(const uint256& snapshot_blockhash)\n+CChainState& ChainstateManager::InitializeChainstate(CTxMemPool* mempool, const uint256& snapshot_blockhash)\n {\n     bool is_snapshot = !snapshot_blockhash.IsNull();\n     std::unique_ptr<CChainState>& to_modify =\n@@ -5255,8 +5270,7 @@ CChainState& ChainstateManager::InitializeChainstate(const uint256& snapshot_blo\n     if (to_modify) {\n         throw std::logic_error(\"should not be overwriting a chainstate\");\n     }\n-\n-    to_modify.reset(new CChainState(m_blockman, snapshot_blockhash));\n+    to_modify.reset(new CChainState(mempool, m_blockman, snapshot_blockhash));\n \n     // Snapshot chainstates and initial IBD chaintates always become active.\n     if (is_snapshot || (!is_snapshot && !m_active_chainstate)) {"
      },
      {
        "sha": "dca7fb67e8b12d369154094113c859db7d8433ad",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 14,
        "deletions": 9,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa1d3da12e6d0712bf6934d6df9e6d5d0e43801d/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa1d3da12e6d0712bf6934d6df9e6d5d0e43801d/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=fa1d3da12e6d0712bf6934d6df9e6d5d0e43801d",
        "patch": "@@ -14,15 +14,16 @@\n #include <coins.h>\n #include <crypto/common.h> // for ReadLE64\n #include <fs.h>\n+#include <interfaces/txmempool.h>\n #include <optional.h>\n #include <policy/feerate.h>\n #include <protocol.h> // For CMessageHeader::MessageStartChars\n #include <script/script_error.h>\n+#include <serialize.h>\n #include <sync.h>\n-#include <txmempool.h> // For CTxMemPool::cs\n #include <txdb.h>\n+#include <txmempool.h>\n #include <versionbits.h>\n-#include <serialize.h>\n \n #include <atomic>\n #include <map>\n@@ -43,7 +44,6 @@ class CInv;\n class CConnman;\n class CScriptCheck;\n class CBlockPolicyEstimator;\n-class CTxMemPool;\n class ChainstateManager;\n class TxValidationState;\n struct ChainTxData;\n@@ -511,11 +511,14 @@ class CChainState {\n     //! easily as opposed to referencing a global.\n     BlockManager& m_blockman;\n \n+    //! mempool that is kept in sync with the chain\n+    std::unique_ptr<interfaces::TxMempool> m_txmempool;\n+\n     //! Manages the UTXO set, which is a reflection of the contents of `m_chain`.\n     std::unique_ptr<CoinsViews> m_coins_views;\n \n public:\n-    explicit CChainState(BlockManager& blockman, uint256 from_snapshot_blockhash = uint256());\n+    explicit CChainState(CTxMemPool* mempool, BlockManager& blockman, uint256 from_snapshot_blockhash = uint256());\n \n     /**\n      * Initialize the CoinsViews UTXO set database management data structures. The in-memory\n@@ -642,7 +645,7 @@ class CChainState {\n                       CCoinsViewCache& view, const CChainParams& chainparams, bool fJustCheck = false) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n     // Apply the effects of a block disconnection on the UTXO set.\n-    bool DisconnectTip(BlockValidationState& state, const CChainParams& chainparams, DisconnectedBlockTransactions* disconnectpool) EXCLUSIVE_LOCKS_REQUIRED(cs_main, ::mempool.cs);\n+    bool DisconnectTip(BlockValidationState& state, const CChainParams& chainparams, DisconnectedBlockTransactions* disconnectpool) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_txmempool->m_mutex);\n \n     // Manual block validity manipulation:\n     bool PreciousBlock(BlockValidationState& state, const CChainParams& params, CBlockIndex* pindex) LOCKS_EXCLUDED(cs_main);\n@@ -685,10 +688,10 @@ class CChainState {\n     std::string ToString() EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n \n private:\n-    bool ActivateBestChainStep(BlockValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexMostWork, const std::shared_ptr<const CBlock>& pblock, bool& fInvalidFound, ConnectTrace& connectTrace) EXCLUSIVE_LOCKS_REQUIRED(cs_main, ::mempool.cs);\n-    bool ConnectTip(BlockValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexNew, const std::shared_ptr<const CBlock>& pblock, ConnectTrace& connectTrace, DisconnectedBlockTransactions& disconnectpool) EXCLUSIVE_LOCKS_REQUIRED(cs_main, ::mempool.cs);\n+    bool ActivateBestChainStep(BlockValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexMostWork, const std::shared_ptr<const CBlock>& pblock, bool& fInvalidFound, ConnectTrace& connectTrace) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_txmempool->m_mutex);\n+    bool ConnectTip(BlockValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexNew, const std::shared_ptr<const CBlock>& pblock, ConnectTrace& connectTrace, DisconnectedBlockTransactions& disconnectpool) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_txmempool->m_mutex);\n \n-    void InvalidBlockFound(CBlockIndex *pindex, const BlockValidationState &state) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+    void InvalidBlockFound(CBlockIndex* pindex, const BlockValidationState& state) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n     CBlockIndex* FindMostWorkChain() EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n     void ReceivedBlockTransactions(const CBlock& block, CBlockIndex* pindexNew, const FlatFilePos& pos, const Consensus::Params& consensusParams) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n@@ -818,9 +821,11 @@ class ChainstateManager\n     //! Instantiate a new chainstate and assign it based upon whether it is\n     //! from a snapshot.\n     //!\n+    //! @param[in] mempool              The mempool to pass to the chainstate\n+    //                                  constructor\n     //! @param[in] snapshot_blockhash   If given, signify that this chainstate\n     //!                                 is based on a snapshot.\n-    CChainState& InitializeChainstate(const uint256& snapshot_blockhash = uint256())\n+    CChainState& InitializeChainstate(CTxMemPool* mempool, const uint256& snapshot_blockhash = uint256())\n         EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n \n     //! Get all chainstates currently being used."
      }
    ]
  }
]