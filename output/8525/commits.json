[
  {
    "sha": "34521e4d7d176109dedf52ec8ef2b5052b9a30f3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNDUyMWU0ZDdkMTc2MTA5ZGVkZjUyZWM4ZWYyYjUwNTJiOWEzMGYz",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-08-16T15:38:57Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-09-05T15:48:56Z"
      },
      "message": "Do not store witness txn in rejection cache",
      "tree": {
        "sha": "d17e5bea3fdc6d00aa888cbd83fc535b119c76bf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d17e5bea3fdc6d00aa888cbd83fc535b119c76bf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/34521e4d7d176109dedf52ec8ef2b5052b9a30f3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34521e4d7d176109dedf52ec8ef2b5052b9a30f3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/34521e4d7d176109dedf52ec8ef2b5052b9a30f3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34521e4d7d176109dedf52ec8ef2b5052b9a30f3/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e82fb872ff5cc8fd22d43327c1ee3e755f61c562",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e82fb872ff5cc8fd22d43327c1ee3e755f61c562",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e82fb872ff5cc8fd22d43327c1ee3e755f61c562"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 12,
      "deletions": 8
    },
    "files": [
      {
        "sha": "d32a7e9be5c627bee6c975603ea21f25503e8aee",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 8,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34521e4d7d176109dedf52ec8ef2b5052b9a30f3/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34521e4d7d176109dedf52ec8ef2b5052b9a30f3/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=34521e4d7d176109dedf52ec8ef2b5052b9a30f3",
        "patch": "@@ -1501,9 +1501,9 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n             // SCRIPT_VERIFY_CLEANSTACK requires SCRIPT_VERIFY_WITNESS, so we\n             // need to turn both off, and compare against just turning off CLEANSTACK\n             // to see if the failure is specifically due to witness validation.\n-            if (CheckInputs(tx, state, view, true, scriptVerifyFlags & ~(SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_CLEANSTACK), true, txdata) &&\n+            if (tx.wit.IsNull() && CheckInputs(tx, state, view, true, scriptVerifyFlags & ~(SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_CLEANSTACK), true, txdata) &&\n                 !CheckInputs(tx, state, view, true, scriptVerifyFlags & ~SCRIPT_VERIFY_CLEANSTACK, true, txdata)) {\n-                // Only the witness is wrong, so the transaction itself may be fine.\n+                // Only the witness is missing, so the transaction itself may be fine.\n                 state.SetCorruptionPossible();\n             }\n             return false;\n@@ -5493,7 +5493,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                     else if (!fMissingInputs2)\n                     {\n                         int nDos = 0;\n-                        if (stateDummy.IsInvalid(nDos) && nDos > 0 && (!state.CorruptionPossible() || State(fromPeer)->fHaveWitness))\n+                        if (stateDummy.IsInvalid(nDos) && nDos > 0)\n                         {\n                             // Punish peer that gave us an invalid orphan tx\n                             Misbehaving(fromPeer, nDos);\n@@ -5504,7 +5504,10 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                         // Probably non-standard or insufficient fee/priority\n                         LogPrint(\"mempool\", \"   removed orphan tx %s\\n\", orphanHash.ToString());\n                         vEraseQueue.push_back(orphanHash);\n-                        if (!stateDummy.CorruptionPossible()) {\n+                        if (orphanTx.wit.IsNull() && !stateDummy.CorruptionPossible()) {\n+                            // Do not use rejection cache for witness transactions or\n+                            // witness-stripped transactions, as they can have been malleated.\n+                            // See https://github.com/bitcoin/bitcoin/issues/8279 for details.\n                             assert(recentRejects);\n                             recentRejects->insert(orphanHash);\n                         }\n@@ -5542,7 +5545,10 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                 LogPrint(\"mempool\", \"not keeping orphan with rejected parents %s\\n\",tx.GetHash().ToString());\n             }\n         } else {\n-            if (!state.CorruptionPossible()) {\n+            if (tx.wit.IsNull() && !state.CorruptionPossible()) {\n+                // Do not use rejection cache for witness transactions or\n+                // witness-stripped transactions, as they can have been malleated.\n+                // See https://github.com/bitcoin/bitcoin/issues/8279 for details.\n                 assert(recentRejects);\n                 recentRejects->insert(tx.GetHash());\n             }\n@@ -5574,9 +5580,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             if (state.GetRejectCode() < REJECT_INTERNAL) // Never send AcceptToMemoryPool's internal codes over P2P\n                 pfrom->PushMessage(NetMsgType::REJECT, strCommand, (unsigned char)state.GetRejectCode(),\n                                    state.GetRejectReason().substr(0, MAX_REJECT_MESSAGE_LENGTH), inv.hash);\n-            if (nDoS > 0 && (!state.CorruptionPossible() || State(pfrom->id)->fHaveWitness)) {\n-                // When a non-witness-supporting peer gives us a transaction that would\n-                // be accepted if witness validation was off, we can't blame them for it.\n+            if (nDoS > 0) {\n                 Misbehaving(pfrom->GetId(), nDoS);\n             }\n         }"
      }
    ]
  },
  {
    "sha": "ca10a03addf70421893791c2c499e82fc494d60b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYTEwYTAzYWRkZjcwNDIxODkzNzkxYzJjNDk5ZTgyZmM0OTRkNjBi",
    "commit": {
      "author": {
        "name": "instagibbs",
        "email": "gsanders87@gmail.com",
        "date": "2016-08-18T16:04:33Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-09-05T15:53:41Z"
      },
      "message": "Add basic test for IsStandard witness transaction blinding",
      "tree": {
        "sha": "4771b20b05d16a7eacd7e8db89ce945544b14d3c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4771b20b05d16a7eacd7e8db89ce945544b14d3c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ca10a03addf70421893791c2c499e82fc494d60b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca10a03addf70421893791c2c499e82fc494d60b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ca10a03addf70421893791c2c499e82fc494d60b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca10a03addf70421893791c2c499e82fc494d60b/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "34521e4d7d176109dedf52ec8ef2b5052b9a30f3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34521e4d7d176109dedf52ec8ef2b5052b9a30f3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/34521e4d7d176109dedf52ec8ef2b5052b9a30f3"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 17,
      "deletions": 1
    },
    "files": [
      {
        "sha": "ca784644d8ee2d0f73e96507f9c665398c624ced",
        "filename": "qa/rpc-tests/p2p-segwit.py",
        "status": "modified",
        "additions": 17,
        "deletions": 1,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca10a03addf70421893791c2c499e82fc494d60b/qa/rpc-tests/p2p-segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca10a03addf70421893791c2c499e82fc494d60b/qa/rpc-tests/p2p-segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-segwit.py?ref=ca10a03addf70421893791c2c499e82fc494d60b",
        "patch": "@@ -964,8 +964,24 @@ def test_tx_relay_after_segwit_activation(self):\n \n         tx3 = CTransaction()\n         tx3.vin.append(CTxIn(COutPoint(tx2.sha256, 0), b\"\"))\n-        tx3.vout.append(CTxOut(tx2.vout[0].nValue-1000, CScript([OP_TRUE])))\n         tx3.wit.vtxinwit.append(CTxInWitness())\n+\n+        # Add too-large for IsStandard witness and check that it does not enter reject filter\n+        p2sh_program = CScript([OP_TRUE])\n+        p2sh_pubkey = hash160(p2sh_program)\n+        witness_program2 = CScript([b'a'*400000])\n+        tx3.vout.append(CTxOut(tx2.vout[0].nValue-1000, CScript([OP_HASH160, p2sh_pubkey, OP_EQUAL])))\n+        tx3.wit.vtxinwit[0].scriptWitness.stack = [witness_program2]\n+        tx3.rehash()\n+\n+        # Node will not be blinded to the transaction\n+        self.std_node.announce_tx_and_wait_for_getdata(tx3)\n+        self.std_node.test_transaction_acceptance(tx3, True, False, b'tx-size')\n+        self.std_node.announce_tx_and_wait_for_getdata(tx3)\n+        self.std_node.test_transaction_acceptance(tx3, True, False, b'tx-size')\n+\n+        # Remove witness stuffing, instead add extra witness push on stack\n+        tx3.vout[0] = CTxOut(tx2.vout[0].nValue-1000, CScript([OP_TRUE]))\n         tx3.wit.vtxinwit[0].scriptWitness.stack = [CScript([CScriptNum(1)]), witness_program ]\n         tx3.rehash()\n "
      }
    ]
  }
]