practicalswift,2020-06-10 15:37:14,"Thanks for addressing this @elichai! :)\n\nConcept ACK\n\nRegarding the implementation: if `ReadCompactSize(s)` returns zero won't `vch[0]` be read uninitialized in `size()` \n(`unsigned int size() const { return GetLen(vch[0]); }`) before the call to `Invalidate()` takes place?\n\nAlso, what about adding a test case for the fixed issue that would fail under MemorySanitizer or Valgrind? Som",https://github.com/bitcoin/bitcoin/pull/19237#issuecomment-642090154,642090154,
elichai,2020-06-10 15:40:27,"> Regarding the implementation: if `ReadCompactSize(s)` returns zero won't `vch[0]` be read uninitialized in `size()`\n\nI thought so at first, but no the constructor invalidates it (which writes 0xFF into `vch[0]`)\nhttps://github.com/bitcoin/bitcoin/blob/6762a627ecb89ba8d4ed81a049a5d802e6dd75c2/src/pubkey.h#L79-L82\n\n> ```c++\n> const std::vector<uint8_t> serialized_pub_key{4, 4, 0, 0, 0}",https://github.com/bitcoin/bitcoin/pull/19237#issuecomment-642092155,642092155,
practicalswift,2020-06-10 19:12:13,"@elichai Great! Another very nice thing with your fix is that it addresses another `CPubKey` oddity which I reported back in issue #17238: serialization-deserialization roundtrip of `CPubKey` did not necessarily result in an equal object. `CPubKey` was the only deserializable class that had that unexpected behaviour which made it a potential future gotcha. Glad to see it fixed too :)\n\nMore spe",https://github.com/bitcoin/bitcoin/pull/19237#issuecomment-642203251,642203251,
pstratem,2020-06-11 04:27:32,for anybody else wondering this doesn't look like a consensus change as the script interpreter uses the CPubKey constructor which calls Set.,https://github.com/bitcoin/bitcoin/pull/19237#issuecomment-642398583,642398583,
laanwj,2020-06-11 18:01:38,"Concept ACK. I think it's good to assure the correctness of deserialized data. Especially as you say, a `size() > len` could potentially end up with uninitialized data in the key.",https://github.com/bitcoin/bitcoin/pull/19237#issuecomment-642843432,642843432,
elichai,2020-06-15 12:29:10,"Added a few tests, these tests should fail before the fix commit and should trigger valgrind before the fix commit.",https://github.com/bitcoin/bitcoin/pull/19237#issuecomment-644103309,644103309,
practicalswift,2020-06-15 12:56:49,"Thanks for adding tests!\n\nACK eab8ee3211e661dfb41f0363f6bf6bcabfc521fa -- patch looks correct",https://github.com/bitcoin/bitcoin/pull/19237#issuecomment-644118121,644118121,
MarcoFalke,2020-06-15 23:47:27,"To determine which label to apply I patched as follows and checked which files won't compile:\n\n```diff\ndiff --git a/src/pubkey.h b/src/pubkey.h\nindex 4c28af4a4d..35ccfe304d 100644\n--- a/src/pubkey.h\n+++ b/src/pubkey.h\n@@ -137,7 +137,7 @@ public:\n         s.write((char*)vch, len);\n     }\n     template <typename Stream>\n-    void Unserialize(Stream& s)\n+    void Unserializee(",https://github.com/bitcoin/bitcoin/pull/19237#issuecomment-644448045,644448045,
MarcoFalke,2020-06-15 23:48:03,So I applied the `wallet` label. Hope that makes sense and let me know if I should change it.,https://github.com/bitcoin/bitcoin/pull/19237#issuecomment-644448241,644448241,
practicalswift,2020-06-17 13:26:32,re-ACK 37ae687f95c82f2d64ed880533d158060d4fc3de,https://github.com/bitcoin/bitcoin/pull/19237#issuecomment-645372602,645372602,
jonatack,2020-06-17 14:08:44,"Code review re-ACK 37ae687 per `git diff eab8ee3 37ae687` only change since last review at eab8ee3 is passing the `pubkey` param by reference to const instead of by value in `src/test/key_tests.cpp::CmpSerializationPubkey`\n",https://github.com/bitcoin/bitcoin/pull/19237#issuecomment-645396990,645396990,
MarcoFalke,2020-06-25 12:07:12,ACK 37ae687f95c82f2d64ed880533d158060d4fc3de,https://github.com/bitcoin/bitcoin/pull/19237#issuecomment-649500974,649500974,
MarcoFalke,2020-06-15 23:50:16,nit: Either single-line or with `{   }`,https://github.com/bitcoin/bitcoin/pull/19237#discussion_r440507629,440507629,src/test/key_tests.cpp
MarcoFalke,2020-06-15 23:50:38,"nit:\n\n```suggestion\nstatic void CmpSerializationPubkey(const CPubKey& pubkey)\n```",https://github.com/bitcoin/bitcoin/pull/19237#discussion_r440507720,440507720,src/test/key_tests.cpp
elichai,2020-06-16 18:45:04,"I thought about changing that but I decided not to because it's a straight copy out of the CPubKey class (a private function)\nI'm fine changing it though",https://github.com/bitcoin/bitcoin/pull/19237#discussion_r441067858,441067858,src/test/key_tests.cpp
MarcoFalke,2020-06-16 19:07:46,"Yeah, no worries its just the tests.",https://github.com/bitcoin/bitcoin/pull/19237#discussion_r441080324,441080324,src/test/key_tests.cpp
MarcoFalke,2020-06-25 12:01:29,"Instead of enumerating what could go wrong, what do you think about having one path for a valid deserialization and let all other paths end in an invalid deserialization?\n\n\nThe diff would be:\n\n```diff\ndiff --git a/src/pubkey.h b/src/pubkey.h\nindex 261842b7f7..0f4787bc90 100644\n--- a/src/pubkey.h\n+++ b/src/pubkey.h\n@@ -142,13 +142,14 @@ public:\n         unsigned int len = ::Re",https://github.com/bitcoin/bitcoin/pull/19237#discussion_r445505737,445505737,src/pubkey.h
