[
  {
    "sha": "c133cdcdc3397a734d57e05494682bf9bf6f4c15",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMTMzY2RjZGMzMzk3YTczNGQ1N2UwNTQ5NDY4MmJmOWJmNmY0YzE1",
    "commit": {
      "author": {
        "name": "Adam Stein",
        "email": "adaminsky@gmail.com",
        "date": "2020-08-02T07:53:41Z"
      },
      "committer": {
        "name": "Adam Stein",
        "email": "adaminsky@gmail.com",
        "date": "2020-08-12T22:16:22Z"
      },
      "message": "Cap listsinceblock target_confirmations param\n\nPreviously, listsinceblock would fail with error code -1 when the\ntarget_confirmations exceeded the number of confirmations of the genesis\nblock. This commit allows target_confirmations to refer to a lastblock\nhash with more confirmations than exist in the chain by setting the\nlastblock hash to the genesis hash in this case. This allows for\n`listsinceblock \"\" 6` to not fail if the block count is less than 5\nwhich may happen on regtest.\n\nIncludes update to the functional test for listsinceblock to test for\nthis case.",
      "tree": {
        "sha": "30d186332c06ca9d17cd54dae5f7f179034df849",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/30d186332c06ca9d17cd54dae5f7f179034df849"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c133cdcdc3397a734d57e05494682bf9bf6f4c15",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEDsrbHLeGpqA7fkjDTba/7wCOX8AFAl80alIACgkQTba/7wCO\nX8Dssw//bL4lX1aAgUUMM/nkkO0dP7GC81GAWZtaSaUhWs+/Jg/znVSqWcaREk9z\nlts3o7VlTMh2HTWSHd19tEY6tX08Wf6I7d8zQAsHbucqYpBI5a7lxYM8OxbqHYTT\nvaoMoDZAQkL4GtlL8te//EZXBZRTv4nofsM4hlxgb09w/UAGZdsbWCZ9zPZFdsvS\n94FjNJp2rPUUhjhWJblgz7RUXSm8KmpbC5N2oiFiU9WtOhGat4aWCUwgWITaMjOU\n8WNKfLOik1r90R1aY4LNUiJJwT9SK61qTn2Sc+bqF1Kf2UdHSOYnzju3IIWbXOln\nKDtPEGL1y+G5Ko9v6ATEvMaVHEMic4A7BQWo90GiVvpBEUSBJX1fjHAVjitmD2Mt\nWoTPrYmiK0qoPkXiv2xTFyWQZvxkTCf4QYc3bh6O44+j/cgo1Bf6kUr7Uh8fUsCD\nK4Saq5FGIrfTaFECED6FkTNVBKTA24GFnKt00b0S3aSKDaEUuJOE6QIpkRGFvk90\nByMPCvuwwvJX6/FftXEERM+Zsl+X8YskkAK+nTgcCvrkQJKpf1YfkvFHBkvzeuVz\nc7J32t80cdq0fWFzXaoCn3v/HureTK9YiVSgWbG+9Wpre0TDflGMRN782QkrtHXK\nmPFRGo+Sq0ilmLsOm89h29bsw1K7lwybWoYuBuWV35VVM53zNb4=\n=Ebi2\n-----END PGP SIGNATURE-----",
        "payload": "tree 30d186332c06ca9d17cd54dae5f7f179034df849\nparent 007e15dcd7f8b42501e31cc36343655c53027077\nauthor Adam Stein <adaminsky@gmail.com> 1596354821 -0700\ncommitter Adam Stein <adaminsky@gmail.com> 1597270582 -0700\n\nCap listsinceblock target_confirmations param\n\nPreviously, listsinceblock would fail with error code -1 when the\ntarget_confirmations exceeded the number of confirmations of the genesis\nblock. This commit allows target_confirmations to refer to a lastblock\nhash with more confirmations than exist in the chain by setting the\nlastblock hash to the genesis hash in this case. This allows for\n`listsinceblock \"\" 6` to not fail if the block count is less than 5\nwhich may happen on regtest.\n\nIncludes update to the functional test for listsinceblock to test for\nthis case.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c133cdcdc3397a734d57e05494682bf9bf6f4c15",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c133cdcdc3397a734d57e05494682bf9bf6f4c15",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c133cdcdc3397a734d57e05494682bf9bf6f4c15/comments",
    "author": {
      "login": "adaminsky",
      "id": 29065991,
      "node_id": "MDQ6VXNlcjI5MDY1OTkx",
      "avatar_url": "https://avatars.githubusercontent.com/u/29065991?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adaminsky",
      "html_url": "https://github.com/adaminsky",
      "followers_url": "https://api.github.com/users/adaminsky/followers",
      "following_url": "https://api.github.com/users/adaminsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/adaminsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adaminsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adaminsky/subscriptions",
      "organizations_url": "https://api.github.com/users/adaminsky/orgs",
      "repos_url": "https://api.github.com/users/adaminsky/repos",
      "events_url": "https://api.github.com/users/adaminsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adaminsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "adaminsky",
      "id": 29065991,
      "node_id": "MDQ6VXNlcjI5MDY1OTkx",
      "avatar_url": "https://avatars.githubusercontent.com/u/29065991?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adaminsky",
      "html_url": "https://github.com/adaminsky",
      "followers_url": "https://api.github.com/users/adaminsky/followers",
      "following_url": "https://api.github.com/users/adaminsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/adaminsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adaminsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adaminsky/subscriptions",
      "organizations_url": "https://api.github.com/users/adaminsky/orgs",
      "repos_url": "https://api.github.com/users/adaminsky/repos",
      "events_url": "https://api.github.com/users/adaminsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adaminsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "007e15dcd7f8b42501e31cc36343655c53027077",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/007e15dcd7f8b42501e31cc36343655c53027077",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/007e15dcd7f8b42501e31cc36343655c53027077"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 24,
      "deletions": 1
    },
    "files": [
      {
        "sha": "a74d6058bee952df92bac6d63ff17bf9b133a1e5",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c133cdcdc3397a734d57e05494682bf9bf6f4c15/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c133cdcdc3397a734d57e05494682bf9bf6f4c15/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=c133cdcdc3397a734d57e05494682bf9bf6f4c15",
        "patch": "@@ -1484,7 +1484,7 @@ static UniValue listsinceblock(const JSONRPCRequest& request)\n                         {RPCResult::Type::ARR, \"removed\", \"<structure is the same as \\\"transactions\\\" above, only present if include_removed=true>\\n\"\n                             \"Note: transactions that were re-added in the active chain will appear as-is in this array, and may thus have a positive confirmation count.\"\n                         , {{RPCResult::Type::ELISION, \"\", \"\"},}},\n-                        {RPCResult::Type::STR_HEX, \"lastblock\", \"The hash of the block (target_confirmations-1) from the best block on the main chain. This is typically used to feed back into listsinceblock the next time you call it. So you would generally use a target_confirmations of say 6, so you will be continually re-notified of transactions until they've reached 6 confirmations plus any new ones\"},\n+                        {RPCResult::Type::STR_HEX, \"lastblock\", \"The hash of the block (target_confirmations-1) from the best block on the main chain, or the genesis hash if the referenced block does not exist yet. This is typically used to feed back into listsinceblock the next time you call it. So you would generally use a target_confirmations of say 6, so you will be continually re-notified of transactions until they've reached 6 confirmations plus any new ones\"},\n                     }\n                 },\n                 RPCExamples{\n@@ -1567,6 +1567,7 @@ static UniValue listsinceblock(const JSONRPCRequest& request)\n     }\n \n     uint256 lastblock;\n+    target_confirms = std::min(target_confirms, wallet.GetLastBlockHeight() + 1);\n     CHECK_NONFATAL(wallet.chain().findAncestorByHeight(wallet.GetLastBlockHash(), wallet.GetLastBlockHeight() + 1 - target_confirms, FoundBlock().hash(lastblock)));\n \n     UniValue ret(UniValue::VOBJ);"
      },
      {
        "sha": "d4131deabf098a5524a5be3dcf382c0c4b2e70c5",
        "filename": "test/functional/wallet_listsinceblock.py",
        "status": "modified",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c133cdcdc3397a734d57e05494682bf9bf6f4c15/test/functional/wallet_listsinceblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c133cdcdc3397a734d57e05494682bf9bf6f4c15/test/functional/wallet_listsinceblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listsinceblock.py?ref=c133cdcdc3397a734d57e05494682bf9bf6f4c15",
        "patch": "@@ -36,6 +36,7 @@ def run_test(self):\n         self.test_double_spend()\n         self.test_double_send()\n         self.double_spends_filtered()\n+        self.test_targetconfirmations()\n \n     def test_no_blockhash(self):\n         self.log.info(\"Test no blockhash\")\n@@ -74,6 +75,27 @@ def test_invalid_blockhash(self):\n         assert_raises_rpc_error(-8, \"blockhash must be hexadecimal string (not 'Z000000000000000000000000000000000000000000000000000000000000000')\", self.nodes[0].listsinceblock,\n                                 \"Z000000000000000000000000000000000000000000000000000000000000000\")\n \n+    def test_targetconfirmations(self):\n+        '''\n+        This tests when the value of target_confirmations exceeds the number of\n+        blocks in the main chain. In this case, the genesis block hash should be\n+        given for the `lastblock` property. If target_confirmations is < 1, then\n+        a -8 invalid parameter error is thrown.\n+        '''\n+        self.log.info(\"Test target_confirmations\")\n+        blockhash, = self.nodes[2].generate(1)\n+        blockheight = self.nodes[2].getblockheader(blockhash)['height']\n+        self.sync_all()\n+\n+        assert_equal(\n+            self.nodes[0].getblockhash(0),\n+            self.nodes[0].listsinceblock(blockhash, blockheight + 1)['lastblock'])\n+        assert_equal(\n+            self.nodes[0].getblockhash(0),\n+            self.nodes[0].listsinceblock(blockhash, blockheight + 1000)['lastblock'])\n+        assert_raises_rpc_error(-8, \"Invalid parameter\",\n+            self.nodes[0].listsinceblock, blockhash, 0)\n+\n     def test_reorg(self):\n         '''\n         `listsinceblock` did not behave correctly when handed a block that was"
      }
    ]
  }
]