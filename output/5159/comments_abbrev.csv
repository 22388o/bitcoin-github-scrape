bmos,2014-10-30T17:37:42Z,"Ooh, that sounds like a pretty slick improvement!\n",https://github.com/bitcoin/bitcoin/pull/5159#issuecomment-61135038,61135038,
laanwj,2014-11-03T12:36:09Z,@gavinandresen can you have a look here?\n,https://github.com/bitcoin/bitcoin/pull/5159#issuecomment-61471755,61471755,
gavinandresen,2014-11-03T19:41:55Z,"@laanwj : yes, I'll review, but that might not happen until next week (I'm headed to Dublin tomorrow).\n",https://github.com/bitcoin/bitcoin/pull/5159#issuecomment-61535689,61535689,
morcos,2014-11-03T20:27:34Z,"Thanks.  I really like the new GUI in #5200.  I think we should also change `txconfirmtarget` to default to 2 or higher for non QT usage.  1 is just dangerous given the fact that it's often impossible to be reliably confirmed in 1 transaction.    Separately, #4082 is a somewhat substantial problem though.   Is anyone working on the fixes @gavinandresen and @gmaxwell suggested?  I just want to be s",https://github.com/bitcoin/bitcoin/pull/5159#issuecomment-61542781,61542781,
laanwj,2014-11-04T09:08:10Z,@morcos best to ask @cozz there I think\n,https://github.com/bitcoin/bitcoin/pull/5159#issuecomment-61611361,61611361,
gavinandresen,2014-11-04T15:50:50Z,"Code review mostly ACK, apart from a couple of nits.\n\nI'll try to get a node up and running, generating estimates over time, to see how this behaves compared to the existing estimation code.\n",https://github.com/bitcoin/bitcoin/pull/5159#issuecomment-61660562,61660562,
morcos,2014-11-05T20:18:18Z,"OK, I moved the dependency checking logic to main.cpp.  It was a pretty clean change I think, and is more efficient because it saves us looping through all the inputs again.  If that code ever gets moved out of main, I think it makes sense for those two checks on inputs to stay together.  However if you don't like that, I can revert back to putting the logic inside `CTxMemPoolEntry` and I'll just ",https://github.com/bitcoin/bitcoin/pull/5159#issuecomment-61874052,61874052,
gavinandresen,2014-11-11T22:20:13Z,Node running this code and generating graphs at:  http://core2.bitcoincore.org/smartfee/\n\n(current HEAD code is running at http://bitcoincore.org/smartfee/ )\n,https://github.com/bitcoin/bitcoin/pull/5159#issuecomment-62632547,62632547,
rebroad,2014-11-14T04:01:45Z,"@gavinandresen How come the fee for 3 confirmation txs has stayed constant over the entire period. That can't be right, can it?\n",https://github.com/bitcoin/bitcoin/pull/5159#issuecomment-63007646,63007646,
morcos,2014-11-14T12:01:12Z,"@rebroad The reason that happens is there aren't enough data points for transactions with lower fee rates.   As people start placing transactions with lower fees, there will be more data points in the lower fee rate ranges and the estimate will get lower.  I believe it makes sense for all of the 3+ confirmation estimates to be the same, because basically any fee will be confirmed within 3 confirms",https://github.com/bitcoin/bitcoin/pull/5159#issuecomment-63052197,63052197,
rebroad,2014-12-11T00:11:50Z,"This doesn't seem to work well with #5200 currently. Even after leaving the node running for a while, the fee estimation doesn't kick in for anything other than 2 confirms. So sliding the slider to 20 gives the same fee as sliding it to 2, and then sliding it to 1 makes it say it needs longer to calculate (which then never happens).\n",https://github.com/bitcoin/bitcoin/pull/5159#issuecomment-66548851,66548851,
morcos,2014-12-11T01:36:50Z,"I'm curious what fee its returning for you and how long it's been running.  You can see by Gavin's charts linked above what the estimates are over time.  But I do agree that if/when this is going to be merged, the GUI could be slightly modified to better handle the case where 1 doesn't give an estimate.  It's not always a matter of not having enough data, but sometimes there really is no answer to",https://github.com/bitcoin/bitcoin/pull/5159#issuecomment-66556388,66556388,
morcos,2014-12-11T22:08:08Z,OK I rebased off 0.10 (so the first 3 commits should still be what you reviewed Gavin).  But then the 4th commit is new.  It's addressing your comments above in a better way than I had previously done.\n,https://github.com/bitcoin/bitcoin/pull/5159#issuecomment-66698105,66698105,
morcos,2015-03-13T20:47:45Z,"@gavinandresen, I've rebased this and added a couple of improvements, most notably, doing some tracking of transactions that are in the mempool and haven't been mined yet.  So in particular the are code changes from what you reviewed before.  \n",https://github.com/bitcoin/bitcoin/pull/5159#issuecomment-79374855,79374855,
gavinandresen,2015-03-17T14:39:36Z,"My compiler is unhappy.\nCompiler:\n\n```\nApple LLVM version 6.0 (clang-600.0.57) (based on LLVM 3.5svn)\n```\n\nUnhappiness:\n\n```\n./streams.h:406:9: error: call to 'Serialize' is ambiguous\n        ::Serialize(*this, obj, nType, nVersion);\n        ^~~~~~~~~~~\npolicyestimator.cpp:175:13: note: in instantiation of function template specialization 'CAutoFile::operator<<<unsigned long>' request",https://github.com/bitcoin/bitcoin/pull/5159#issuecomment-82387916,82387916,
gavinandresen,2015-03-17T14:46:07Z,"Since the format of fee_estimates.dat will change, CTxMemPool::WriteFeeEstimates should change:\n\n```\nfileout << 99900; // version required to read: 0.9.99 or later\n .... should be\nfileout << 109900; // version required to read: 0.10.99 or later\n```\n",https://github.com/bitcoin/bitcoin/pull/5159#issuecomment-82390552,82390552,
morcos,2015-03-17T14:58:27Z,"ah sorry, pushed too fast, i'd noticed that compilation problem, not sure why it was a problem, but i think i just pushed a fix...   will wait for more comments before adding more fixes.\n",https://github.com/bitcoin/bitcoin/pull/5159#issuecomment-82394536,82394536,
gavinandresen,2015-03-19T16:34:34Z,"Been running this at home for a couple of days, estimates look reasonable.\n\nI've updated the bitcoind on core2.bitcoincore.org; as soon as it catches up with the chain it will start generating new fee/priority estimate charts again.\n",https://github.com/bitcoin/bitcoin/pull/5159#issuecomment-83652951,83652951,
morcos,2015-04-06T20:52:34Z,"Any thoughts on whether this is something we'd like to merge?  I'd like to get it in early enough in the 0.11 release cycle that it gets some usage.  I realize its a lot of complicated code, but it really only affects fee and priority estimates.  I think the increased accuracy of the estimates makes it worthwhile.  Compare (core2.) and bitcoincore.org/smartfee/fee_graph.html.\n",https://github.com/bitcoin/bitcoin/pull/5159#issuecomment-90237497,90237497,
gavinandresen,2015-04-06T22:13:35Z,I'd like to see this in the 0.11 release.\n,https://github.com/bitcoin/bitcoin/pull/5159#issuecomment-90261515,90261515,
jtimon,2015-04-08T22:29:59Z,"Could you rename src/policyestimator.o to src/policy/estimator.o ?\nI was planning on doing such a code movement and this seems like a perfect opportunity.\nA later step would be to take the policy estimator out of the txmempool object, but this movement already helps with that independently of what you're doing inside the the estimator itself which I haven't reviewed.\nThis is what I had in mind ",https://github.com/bitcoin/bitcoin/pull/5159#issuecomment-91054878,91054878,
morcos,2015-04-09T01:59:53Z,I'd be happy to give it shot.  I'll ping you when I get around to it.\n,https://github.com/bitcoin/bitcoin/pull/5159#issuecomment-91089623,91089623,
morcos,2015-04-20T19:40:44Z,"Rebased, cleaned up and squashed original commits.\n\nAdded 3 new commits.\nThis is ready for more review.\n@jtimon I made the move you asked for but held off for now on the other changes until I know what the right way to couple the mempool to the estimator is.  There are now 3 interface points instead of the previous 1 that the old code had.\n",https://github.com/bitcoin/bitcoin/pull/5159#issuecomment-94550340,94550340,
jtimon,2015-04-22T09:51:49Z,I had more time to review this.\nI don't understand what you mean by the 3 interface points but BlockPolicyEstimator is already decoupled from CTxMemPool with your current code.\nYou made the mistake of coupling CTxMemPoolEntry with CTxMemPool in https://github.com/morcos/bitcoin/commit/ff34d782517f9cabed87772db96a7e7a76ac5db0\nand although you fix it in https://github.com/morcos/bitcoin/commit/64,https://github.com/bitcoin/bitcoin/pull/5159#issuecomment-95104343,95104343,
morcos,2015-04-23T17:28:07Z,"Thanks @jtimon.  I included several of your commits in an all purpose SQUASHME fixup.  I also changed my move commit to yours.  My original commit and 2 recent additions are unchanged.   I think we can PR your other changes separately afterwards.  I have them rebased on top of this here:\nhttps://github.com/morcos/bitcoin/commits/new-estimates_jtimon\n\n@gavinandresen, if you wouldn't mind reviewi",https://github.com/bitcoin/bitcoin/pull/5159#issuecomment-95663638,95663638,
jtimon,2015-04-23T21:30:45Z,"Thanks for incorporating some of my suggestions, I'm specially happy about not using the minRelayTxFee global inside the estimator which was the most important nit. I agree all the suggestions not incorporated can wait and it's better not to slow this down.\n",https://github.com/bitcoin/bitcoin/pull/5159#issuecomment-95725039,95725039,
morcos,2015-04-29T13:56:51Z,"Addressed nits (above and offline) by @sdaftuar and improved the readability of the rpc test.\n@gavinandresen, I know there are a lot of small added commits here, and I'd like to squash them all down but just wanted to be sure you saw the changes in 64bf2bb.  This slightly changes the startup behavior, but otherwise all other changes we just cleanups, and no change to behavior.  \n",https://github.com/bitcoin/bitcoin/pull/5159#issuecomment-97433682,97433682,
sdaftuar,2015-04-29T20:05:56Z,"I've reviewed the code (particularly to understand the details of the calculations in policy/fees.cpp), and I've tested by running a node with this code, and this looks good to me (and improves the estimates substantially).  ACK. \n",https://github.com/bitcoin/bitcoin/pull/5159#issuecomment-97566880,97566880,
jtimon,2015-04-29T21:12:01Z,"I'm going to make a summary of my review of this PR, hopefully it helps getting it merged soon.\nAlthough, I have not reviewed or tested the changes in the estimator itself, I have paid special attention on making sure that it only changed fee policy behavior, so I'm convinced that this is completely consensus and network safe, anything-non-fee-estimator-related safe.\nReaching this conclusion was",https://github.com/bitcoin/bitcoin/pull/5159#issuecomment-97586795,97586795,
Diapolo,2015-04-30T06:13:48Z,"I didn't try to check or understand that code, but wanted to ask if the GUI (e.g. coincontrol and smart fees) is working with this without problems or if that needs to be verified.\n",https://github.com/bitcoin/bitcoin/pull/5159#issuecomment-97672025,97672025,
morcos,2015-04-30T15:08:17Z,"@Diapolo Thanks for thinking about that.  I think it could certainly use some more testing.  There are two things in my mind that could use improving.\n1) I think the default txConfirmTarget should be greater than 1.  There are periods of time when 1 can be quite a high fee temporarily.  I plan to open this discussion in a different PR at some point, because its a bit of a separate discussion.  Th",https://github.com/bitcoin/bitcoin/pull/5159#issuecomment-97830555,97830555,
bitcoinfees,2015-05-10T10:05:14Z,">  There are periods of time when 1 can be quite a high fee temporarily\n\nA suggestion: if fractional arguments are allowed for `estimatefee`, it could avoid the need for `MIN_SUCCESS_PCT`, which in my view discards useful information, and perhaps is the reason for these kinds of problems (e.g. a fee bucket which for a given `confTarget` has a `curPct` that is close to the 0.85 threshold would re",https://github.com/bitcoin/bitcoin/pull/5159#issuecomment-100616441,100616441,
bitcoinfees,2015-05-10T10:28:16Z,"> not have an answer for estimatefee 1\n\nWith regard to fee buckets clearing the `MIN_SUCCESS_PCT` hurdle of 0.85, I've found in my own studies that the main reason why transactions with relatively high fees don't make it into the next block is because of the interval between miners updating their block transaction lists, which I believe is on the order of 30-60 seconds ([source](http://bitcoin.s",https://github.com/bitcoin/bitcoin/pull/5159#issuecomment-100619322,100619322,
morcos,2015-05-11T14:58:55Z,"@bitcoinfees, thanks for the comments.  I think asking for the mean number of blocks to confirmation is a slightly different question than I answered.  It's not clear if one question is better than another, but the way I defined the question is what fee would you need to have a sufficiently high percentage chance of getting confirmed in the desired number of blocks, so it kind of requires a MIN_SU",https://github.com/bitcoin/bitcoin/pull/5159#issuecomment-100936299,100936299,
gavinandresen,2015-05-12T18:50:21Z,Code review and lightly tested ACK.\n\nI'm updating core2.bitcoincore.org to run this version of the code now.\n,https://github.com/bitcoin/bitcoin/pull/5159#issuecomment-101384840,101384840,
morcos,2015-05-12T19:13:19Z,squashed to hopefully make it mergeable\n,https://github.com/bitcoin/bitcoin/pull/5159#issuecomment-101391282,101391282,
morcos,2015-05-13T14:43:02Z,nits addressed\n,https://github.com/bitcoin/bitcoin/pull/5159#issuecomment-101692736,101692736,
laanwj,2015-05-13T15:01:56Z,utACK\n,https://github.com/bitcoin/bitcoin/pull/5159#issuecomment-101704877,101704877,
morcos,2015-04-23T17:33:45Z,"The transaction being added to the mempool has actually been copied twice at this point.  The first time when the CTxMemPoolEntry was created, and now again when its copied into the map, which will be its permanent home.  This was not introduced by this PR, but a further PR should consider eliminating one of the copy operations.\n",https://github.com/bitcoin/bitcoin/pull/5159#discussion_r28984461,28984461,src/txmempool.cpp
sdaftuar,2015-04-27T14:20:55Z,The comment above is no longer relevant here.\n,https://github.com/bitcoin/bitcoin/pull/5159#discussion_r29149942,29149942,src/txmempool.cpp
sdaftuar,2015-04-27T16:06:43Z,nit: this forward declaration doesn't appear to be necessary\n,https://github.com/bitcoin/bitcoin/pull/5159#discussion_r29161022,29161022,src/txmempool.h
sdaftuar,2015-04-29T15:22:28Z,nit: succeess -> success\n,https://github.com/bitcoin/bitcoin/pull/5159#discussion_r29346655,29346655,src/policy/fees.cpp
fanquake,2015-05-13T14:29:02Z,nit: just MIT\n,https://github.com/bitcoin/bitcoin/pull/5159#discussion_r30235629,30235629,src/policy/fees.cpp
fanquake,2015-05-13T14:30:09Z,also here\n,https://github.com/bitcoin/bitcoin/pull/5159#discussion_r30235763,30235763,src/policy/fees.h
