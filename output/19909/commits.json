[
  {
    "sha": "fa2df0cd3c15934ccd4f76978ad4d95e8766ac4a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTJkZjBjZDNjMTU5MzRjY2Q0Zjc2OTc4YWQ0ZDk1ZTg3NjZhYzRh",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-09-07T15:24:56Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-09-28T18:31:28Z"
      },
      "message": "validation: Remove useless call to mempool->clear()\n\nThe mempool.clear() in UnloadBlockIndex has been added in commit 51598b2\nto clear global state between unit tests. Now that there is no global\nmempool anymore, this it not needed anymore. Also, the clear isn't used\nfor anything else in the current code.",
      "tree": {
        "sha": "78e6d42fda21eef3f0bd8f14b69ed0f3e1dc5d2b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/78e6d42fda21eef3f0bd8f14b69ed0f3e1dc5d2b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa2df0cd3c15934ccd4f76978ad4d95e8766ac4a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUjPMgwAiFKIUnZ5vRbGYyfOsl1Tgt1JGvo0e3RwchlszPsd7qVLrhM8Fqmlw6xI\nmU3ze42ZGIACUv5PbWQCSVEzi67AcUYMLmcxpRrW07yQnlMuUDpiOpdNzGd7xQsL\n7fXXS0t2XwDZkMXj8jPyWzGBy71Bpp9SjGIg1bVHf3b31GSyqYjbc1CZX3m4d/Ot\n6u9E/+gvlFEoT0OMR+n7Vkx0iHN+C1praTFavCQlso5YY+QrJRVXagdhxki4y3gJ\n2kORWekL7j9jY/m2B43uifDkUOuARiq0EBOWs3h4mS9Fg/79JLUujZDPBs80xv6Z\n5jNbrN0Ili7ljmc+XfNpd+T5wKZtAvE1QdEeGCakJQV0ENhX3XzfwL19Y941+u1j\ni1qWGpdSh9F/+wRDHF8QhFM0ddvUYqPcXSyQ1nMfWMRTh9jn+R4UMlUKD4z24OAI\nVMrLrEOx8VcIrsWZ62/skOeOD8OT4HFD2vsMaFSu8mZwXbsVhZ1Vk+9Kd8osLUB3\ncpc4z7Xg\n=HhFK\n-----END PGP SIGNATURE-----",
        "payload": "tree 78e6d42fda21eef3f0bd8f14b69ed0f3e1dc5d2b\nparent c95784e3d31dc557b175181bc034339df22cb5fd\nauthor MarcoFalke <falke.marco@gmail.com> 1599492296 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1601317888 +0200\n\nvalidation: Remove useless call to mempool->clear()\n\nThe mempool.clear() in UnloadBlockIndex has been added in commit 51598b2\nto clear global state between unit tests. Now that there is no global\nmempool anymore, this it not needed anymore. Also, the clear isn't used\nfor anything else in the current code.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa2df0cd3c15934ccd4f76978ad4d95e8766ac4a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa2df0cd3c15934ccd4f76978ad4d95e8766ac4a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa2df0cd3c15934ccd4f76978ad4d95e8766ac4a/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c95784e3d31dc557b175181bc034339df22cb5fd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c95784e3d31dc557b175181bc034339df22cb5fd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c95784e3d31dc557b175181bc034339df22cb5fd"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 5,
      "deletions": 6
    },
    "files": [
      {
        "sha": "532e20147b96600a276a267883d929af0bd079e0",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2df0cd3c15934ccd4f76978ad4d95e8766ac4a/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2df0cd3c15934ccd4f76978ad4d95e8766ac4a/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=fa2df0cd3c15934ccd4f76978ad4d95e8766ac4a",
        "patch": "@@ -1563,7 +1563,7 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n                 chainman.m_total_coinstip_cache = nCoinCacheUsage;\n                 chainman.m_total_coinsdb_cache = nCoinDBCache;\n \n-                UnloadBlockIndex(node.mempool.get(), chainman);\n+                UnloadBlockIndex(chainman);\n \n                 // new CBlockTreeDB tries to delete the existing file, which\n                 // fails if it's still open from the previous loop. Close it first:"
      },
      {
        "sha": "10c978f39600438b42d9e052f280dbe8460f617d",
        "filename": "src/qt/test/apptests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2df0cd3c15934ccd4f76978ad4d95e8766ac4a/src/qt/test/apptests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2df0cd3c15934ccd4f76978ad4d95e8766ac4a/src/qt/test/apptests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/apptests.cpp?ref=fa2df0cd3c15934ccd4f76978ad4d95e8766ac4a",
        "patch": "@@ -86,7 +86,7 @@ void AppTests::appTests()\n     AbortShutdown();\n     {\n         LOCK(cs_main);\n-        UnloadBlockIndex(/* mempool */ nullptr, g_chainman);\n+        UnloadBlockIndex(g_chainman);\n         g_chainman.Reset();\n     }\n }"
      },
      {
        "sha": "e5d1350c8a3817f0deb40c73c74360b652897bb1",
        "filename": "src/test/util/setup_common.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2df0cd3c15934ccd4f76978ad4d95e8766ac4a/src/test/util/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2df0cd3c15934ccd4f76978ad4d95e8766ac4a/src/test/util/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.cpp?ref=fa2df0cd3c15934ccd4f76978ad4d95e8766ac4a",
        "patch": "@@ -187,7 +187,7 @@ TestingSetup::~TestingSetup()\n     m_node.connman.reset();\n     m_node.banman.reset();\n     m_node.args = nullptr;\n-    UnloadBlockIndex(m_node.mempool.get(), *m_node.chainman);\n+    UnloadBlockIndex(*m_node.chainman);\n     m_node.mempool.reset();\n     m_node.scheduler.reset();\n     m_node.chainman->Reset();"
      },
      {
        "sha": "dd2af709197150d56c4472b6f7facbbb20104e4b",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2df0cd3c15934ccd4f76978ad4d95e8766ac4a/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2df0cd3c15934ccd4f76978ad4d95e8766ac4a/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=fa2df0cd3c15934ccd4f76978ad4d95e8766ac4a",
        "patch": "@@ -4588,13 +4588,12 @@ void CChainState::UnloadBlockIndex() {\n // May NOT be used after any connections are up as much\n // of the peer-processing logic assumes a consistent\n // block index state\n-void UnloadBlockIndex(CTxMemPool* mempool, ChainstateManager& chainman)\n+void UnloadBlockIndex(ChainstateManager& chainman)\n {\n     LOCK(cs_main);\n     chainman.Unload();\n     pindexBestInvalid = nullptr;\n     pindexBestHeader = nullptr;\n-    if (mempool) mempool->clear();\n     vinfoBlockFile.clear();\n     nLastBlockFile = 0;\n     setDirtyBlockIndex.clear();"
      },
      {
        "sha": "ce76518ee210838352805c536d3cca4786caf3fd",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2df0cd3c15934ccd4f76978ad4d95e8766ac4a/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2df0cd3c15934ccd4f76978ad4d95e8766ac4a/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=fa2df0cd3c15934ccd4f76978ad4d95e8766ac4a",
        "patch": "@@ -157,7 +157,7 @@ void LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, FlatFi\n /** Ensures we have a genesis block in the block tree, possibly writing one to disk. */\n bool LoadGenesisBlock(const CChainParams& chainparams);\n /** Unload database information */\n-void UnloadBlockIndex(CTxMemPool* mempool, ChainstateManager& chainman);\n+void UnloadBlockIndex(ChainstateManager& chainman);\n /** Run an instance of the script checking thread */\n void ThreadScriptCheck(int worker_num);\n /**"
      }
    ]
  },
  {
    "sha": "c10de729616f503fa7a886bd36cf9710fa45d7ba",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMTBkZTcyOTYxNmY1MDNmYTdhODg2YmQzNmNmOTcxMGZhNDVkN2Jh",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-09-07T15:01:08Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-09-28T19:30:19Z"
      },
      "message": "test: Add TxMemPoolClearable and use it in tests that need it",
      "tree": {
        "sha": "e3bb1546cdecd684ec538a20bf9fcc1cd98fda96",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e3bb1546cdecd684ec538a20bf9fcc1cd98fda96"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c10de729616f503fa7a886bd36cf9710fa45d7ba",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c10de729616f503fa7a886bd36cf9710fa45d7ba",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c10de729616f503fa7a886bd36cf9710fa45d7ba",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c10de729616f503fa7a886bd36cf9710fa45d7ba/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa2df0cd3c15934ccd4f76978ad4d95e8766ac4a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa2df0cd3c15934ccd4f76978ad4d95e8766ac4a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa2df0cd3c15934ccd4f76978ad4d95e8766ac4a"
      }
    ],
    "stats": {
      "total": 139,
      "additions": 88,
      "deletions": 51
    },
    "files": [
      {
        "sha": "9e5c8c3b0a8446cdcec719d5aa95e3990d8ab3e2",
        "filename": "src/Makefile.test_util.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c10de729616f503fa7a886bd36cf9710fa45d7ba/src/Makefile.test_util.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c10de729616f503fa7a886bd36cf9710fa45d7ba/src/Makefile.test_util.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test_util.include?ref=c10de729616f503fa7a886bd36cf9710fa45d7ba",
        "patch": "@@ -15,6 +15,7 @@ TEST_UTIL_H = \\\n     test/util/setup_common.h \\\n     test/util/str.h \\\n     test/util/transaction_utils.h \\\n+    test/util/txmempool.h \\\n     test/util/wallet.h\n \n libtest_util_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) $(MINIUPNPC_CPPFLAGS) $(EVENT_CFLAGS) $(EVENT_PTHREADS_CFLAGS)"
      },
      {
        "sha": "ffa44d5fd4acbb34c8d412c36f0d276a2592736c",
        "filename": "src/test/mempool_tests.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 1,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c10de729616f503fa7a886bd36cf9710fa45d7ba/src/test/mempool_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c10de729616f503fa7a886bd36cf9710fa45d7ba/src/test/mempool_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/mempool_tests.cpp?ref=c10de729616f503fa7a886bd36cf9710fa45d7ba",
        "patch": "@@ -749,6 +749,15 @@ BOOST_AUTO_TEST_CASE(MempoolAncestryTests)\n     pool.GetTransactionAncestry(ty6->GetHash(), ancestors, descendants);\n     BOOST_CHECK_EQUAL(ancestors, 9ULL);\n     BOOST_CHECK_EQUAL(descendants, 6ULL);\n+}\n+\n+BOOST_AUTO_TEST_CASE(MempoolAncestryTestsDiamond)\n+{\n+    size_t ancestors, descendants;\n+\n+    CTxMemPool pool;\n+    LOCK2(cs_main, pool.cs);\n+    TestMemPoolEntryHelper entry;\n \n     /* Ancestors represented more than once (\"diamond\") */\n     //\n@@ -761,7 +770,6 @@ BOOST_AUTO_TEST_CASE(MempoolAncestryTests)\n     tb = make_tx(/* output_values */ {5 * COIN, 3 * COIN}, /* inputs */  {ta});\n     tc = make_tx(/* output_values */ {2 * COIN}, /* inputs */ {tb}, /* input_indices */ {1});\n     td = make_tx(/* output_values */ {6 * COIN}, /* inputs */ {tb, tc}, /* input_indices */ {0, 0});\n-    pool.clear();\n     pool.addUnchecked(entry.Fee(10000LL).FromTx(ta));\n     pool.addUnchecked(entry.Fee(10000LL).FromTx(tb));\n     pool.addUnchecked(entry.Fee(10000LL).FromTx(tc));"
      },
      {
        "sha": "2d9016f74d20140635c5194b9c4f6fed4463e734",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 42,
        "deletions": 40,
        "changes": 82,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c10de729616f503fa7a886bd36cf9710fa45d7ba/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c10de729616f503fa7a886bd36cf9710fa45d7ba/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=c10de729616f503fa7a886bd36cf9710fa45d7ba",
        "patch": "@@ -18,19 +18,21 @@\n #include <validation.h>\n \n #include <test/util/setup_common.h>\n+#include <test/util/txmempool.h>\n \n #include <memory>\n \n #include <boost/test/unit_test.hpp>\n \n namespace miner_tests {\n struct MinerTestingSetup : public TestingSetup {\n-    void TestPackageSelection(const CChainParams& chainparams, const CScript& scriptPubKey, const std::vector<CTransactionRef>& txFirst) EXCLUSIVE_LOCKS_REQUIRED(::cs_main, m_node.mempool->cs);\n-    bool TestSequenceLocks(const CTransaction& tx, int flags) EXCLUSIVE_LOCKS_REQUIRED(::cs_main, m_node.mempool->cs)\n+    void TestPackageSelection(const CChainParams& chainparams, const CScript& scriptPubKey, const std::vector<CTransactionRef>& txFirst) EXCLUSIVE_LOCKS_REQUIRED(::cs_main, m_test_pool.cs);\n+    bool TestSequenceLocks(const CTransaction& tx, int flags) EXCLUSIVE_LOCKS_REQUIRED(::cs_main, m_test_pool.cs)\n     {\n-        return CheckSequenceLocks(*m_node.mempool, tx, flags);\n+        return CheckSequenceLocks(m_test_pool, tx, flags);\n     }\n     BlockAssembler AssemblerForTest(const CChainParams& params);\n+    TxMemPoolClearable m_test_pool;\n };\n } // namespace miner_tests\n \n@@ -55,7 +57,7 @@ BlockAssembler MinerTestingSetup::AssemblerForTest(const CChainParams& params)\n \n     options.nBlockMaxWeight = MAX_BLOCK_WEIGHT;\n     options.blockMinFeeRate = blockMinFeeRate;\n-    return BlockAssembler(*m_node.mempool, params, options);\n+    return BlockAssembler(m_test_pool, params, options);\n }\n \n constexpr static struct {\n@@ -119,19 +121,19 @@ void MinerTestingSetup::TestPackageSelection(const CChainParams& chainparams, co\n     tx.vout[0].nValue = 5000000000LL - 1000;\n     // This tx has a low fee: 1000 satoshis\n     uint256 hashParentTx = tx.GetHash(); // save this txid for later use\n-    m_node.mempool->addUnchecked(entry.Fee(1000).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n+    m_test_pool.addUnchecked(entry.Fee(1000).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n \n     // This tx has a medium fee: 10000 satoshis\n     tx.vin[0].prevout.hash = txFirst[1]->GetHash();\n     tx.vout[0].nValue = 5000000000LL - 10000;\n     uint256 hashMediumFeeTx = tx.GetHash();\n-    m_node.mempool->addUnchecked(entry.Fee(10000).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n+    m_test_pool.addUnchecked(entry.Fee(10000).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n \n     // This tx has a high fee, but depends on the first transaction\n     tx.vin[0].prevout.hash = hashParentTx;\n     tx.vout[0].nValue = 5000000000LL - 1000 - 50000; // 50k satoshi fee\n     uint256 hashHighFeeTx = tx.GetHash();\n-    m_node.mempool->addUnchecked(entry.Fee(50000).Time(GetTime()).SpendsCoinbase(false).FromTx(tx));\n+    m_test_pool.addUnchecked(entry.Fee(50000).Time(GetTime()).SpendsCoinbase(false).FromTx(tx));\n \n     std::unique_ptr<CBlockTemplate> pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey);\n     BOOST_CHECK(pblocktemplate->block.vtx[1]->GetHash() == hashParentTx);\n@@ -142,7 +144,7 @@ void MinerTestingSetup::TestPackageSelection(const CChainParams& chainparams, co\n     tx.vin[0].prevout.hash = hashHighFeeTx;\n     tx.vout[0].nValue = 5000000000LL - 1000 - 50000; // 0 fee\n     uint256 hashFreeTx = tx.GetHash();\n-    m_node.mempool->addUnchecked(entry.Fee(0).FromTx(tx));\n+    m_test_pool.addUnchecked(entry.Fee(0).FromTx(tx));\n     size_t freeTxSize = ::GetSerializeSize(tx, PROTOCOL_VERSION);\n \n     // Calculate a fee on child transaction that will put the package just\n@@ -152,7 +154,7 @@ void MinerTestingSetup::TestPackageSelection(const CChainParams& chainparams, co\n     tx.vin[0].prevout.hash = hashFreeTx;\n     tx.vout[0].nValue = 5000000000LL - 1000 - 50000 - feeToUse;\n     uint256 hashLowFeeTx = tx.GetHash();\n-    m_node.mempool->addUnchecked(entry.Fee(feeToUse).FromTx(tx));\n+    m_test_pool.addUnchecked(entry.Fee(feeToUse).FromTx(tx));\n     pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey);\n     // Verify that the free tx and the low fee tx didn't get selected\n     for (size_t i=0; i<pblocktemplate->block.vtx.size(); ++i) {\n@@ -163,10 +165,10 @@ void MinerTestingSetup::TestPackageSelection(const CChainParams& chainparams, co\n     // Test that packages above the min relay fee do get included, even if one\n     // of the transactions is below the min relay fee\n     // Remove the low fee transaction and replace with a higher fee transaction\n-    m_node.mempool->removeRecursive(CTransaction(tx), MemPoolRemovalReason::REPLACED);\n+    m_test_pool.removeRecursive(CTransaction(tx), MemPoolRemovalReason::REPLACED);\n     tx.vout[0].nValue -= 2; // Now we should be just over the min relay fee\n     hashLowFeeTx = tx.GetHash();\n-    m_node.mempool->addUnchecked(entry.Fee(feeToUse+2).FromTx(tx));\n+    m_test_pool.addUnchecked(entry.Fee(feeToUse + 2).FromTx(tx));\n     pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey);\n     BOOST_CHECK(pblocktemplate->block.vtx[4]->GetHash() == hashFreeTx);\n     BOOST_CHECK(pblocktemplate->block.vtx[5]->GetHash() == hashLowFeeTx);\n@@ -179,15 +181,15 @@ void MinerTestingSetup::TestPackageSelection(const CChainParams& chainparams, co\n     tx.vout[0].nValue = 5000000000LL - 100000000;\n     tx.vout[1].nValue = 100000000; // 1BTC output\n     uint256 hashFreeTx2 = tx.GetHash();\n-    m_node.mempool->addUnchecked(entry.Fee(0).SpendsCoinbase(true).FromTx(tx));\n+    m_test_pool.addUnchecked(entry.Fee(0).SpendsCoinbase(true).FromTx(tx));\n \n     // This tx can't be mined by itself\n     tx.vin[0].prevout.hash = hashFreeTx2;\n     tx.vout.resize(1);\n     feeToUse = blockMinFeeRate.GetFee(freeTxSize);\n     tx.vout[0].nValue = 5000000000LL - 100000000 - feeToUse;\n     uint256 hashLowFeeTx2 = tx.GetHash();\n-    m_node.mempool->addUnchecked(entry.Fee(feeToUse).SpendsCoinbase(false).FromTx(tx));\n+    m_test_pool.addUnchecked(entry.Fee(feeToUse).SpendsCoinbase(false).FromTx(tx));\n     pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey);\n \n     // Verify that this tx isn't selected.\n@@ -200,7 +202,7 @@ void MinerTestingSetup::TestPackageSelection(const CChainParams& chainparams, co\n     // as well.\n     tx.vin[0].prevout.n = 1;\n     tx.vout[0].nValue = 100000000 - 10000; // 10k satoshi fee\n-    m_node.mempool->addUnchecked(entry.Fee(10000).FromTx(tx));\n+    m_test_pool.addUnchecked(entry.Fee(10000).FromTx(tx));\n     pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey);\n     BOOST_CHECK(pblocktemplate->block.vtx[8]->GetHash() == hashLowFeeTx2);\n }\n@@ -258,7 +260,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     }\n \n     LOCK(cs_main);\n-    LOCK(m_node.mempool->cs);\n+    LOCK(m_test_pool.cs);\n \n     // Just to make sure we can still make simple blocks\n     BOOST_CHECK(pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey));\n@@ -282,12 +284,12 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         hash = tx.GetHash();\n         bool spendsCoinbase = i == 0; // only first tx spends coinbase\n         // If we don't set the # of sig ops in the CTxMemPoolEntry, template creation fails\n-        m_node.mempool->addUnchecked(entry.Fee(LOWFEE).Time(GetTime()).SpendsCoinbase(spendsCoinbase).FromTx(tx));\n+        m_test_pool.addUnchecked(entry.Fee(LOWFEE).Time(GetTime()).SpendsCoinbase(spendsCoinbase).FromTx(tx));\n         tx.vin[0].prevout.hash = hash;\n     }\n \n     BOOST_CHECK_EXCEPTION(AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey), std::runtime_error, HasReason(\"bad-blk-sigops\"));\n-    m_node.mempool->clear();\n+    m_test_pool.clearTxs();\n \n     tx.vin[0].prevout.hash = txFirst[0]->GetHash();\n     tx.vout[0].nValue = BLOCKSUBSIDY;\n@@ -297,11 +299,11 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         hash = tx.GetHash();\n         bool spendsCoinbase = i == 0; // only first tx spends coinbase\n         // If we do set the # of sig ops in the CTxMemPoolEntry, template creation passes\n-        m_node.mempool->addUnchecked(entry.Fee(LOWFEE).Time(GetTime()).SpendsCoinbase(spendsCoinbase).SigOpsCost(80).FromTx(tx));\n+        m_test_pool.addUnchecked(entry.Fee(LOWFEE).Time(GetTime()).SpendsCoinbase(spendsCoinbase).SigOpsCost(80).FromTx(tx));\n         tx.vin[0].prevout.hash = hash;\n     }\n     BOOST_CHECK(pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey));\n-    m_node.mempool->clear();\n+    m_test_pool.clearTxs();\n \n     // block size > limit\n     tx.vin[0].scriptSig = CScript();\n@@ -317,34 +319,34 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         tx.vout[0].nValue -= LOWFEE;\n         hash = tx.GetHash();\n         bool spendsCoinbase = i == 0; // only first tx spends coinbase\n-        m_node.mempool->addUnchecked(entry.Fee(LOWFEE).Time(GetTime()).SpendsCoinbase(spendsCoinbase).FromTx(tx));\n+        m_test_pool.addUnchecked(entry.Fee(LOWFEE).Time(GetTime()).SpendsCoinbase(spendsCoinbase).FromTx(tx));\n         tx.vin[0].prevout.hash = hash;\n     }\n     BOOST_CHECK(pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey));\n-    m_node.mempool->clear();\n+    m_test_pool.clearTxs();\n \n     // orphan in *m_node.mempool, template creation fails\n     hash = tx.GetHash();\n-    m_node.mempool->addUnchecked(entry.Fee(LOWFEE).Time(GetTime()).FromTx(tx));\n+    m_test_pool.addUnchecked(entry.Fee(LOWFEE).Time(GetTime()).FromTx(tx));\n     BOOST_CHECK_EXCEPTION(AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey), std::runtime_error, HasReason(\"bad-txns-inputs-missingorspent\"));\n-    m_node.mempool->clear();\n+    m_test_pool.clearTxs();\n \n     // child with higher feerate than parent\n     tx.vin[0].scriptSig = CScript() << OP_1;\n     tx.vin[0].prevout.hash = txFirst[1]->GetHash();\n     tx.vout[0].nValue = BLOCKSUBSIDY-HIGHFEE;\n     hash = tx.GetHash();\n-    m_node.mempool->addUnchecked(entry.Fee(HIGHFEE).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n+    m_test_pool.addUnchecked(entry.Fee(HIGHFEE).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n     tx.vin[0].prevout.hash = hash;\n     tx.vin.resize(2);\n     tx.vin[1].scriptSig = CScript() << OP_1;\n     tx.vin[1].prevout.hash = txFirst[0]->GetHash();\n     tx.vin[1].prevout.n = 0;\n     tx.vout[0].nValue = tx.vout[0].nValue+BLOCKSUBSIDY-HIGHERFEE; //First txn output + fresh coinbase - new txn fee\n     hash = tx.GetHash();\n-    m_node.mempool->addUnchecked(entry.Fee(HIGHERFEE).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n+    m_test_pool.addUnchecked(entry.Fee(HIGHERFEE).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n     BOOST_CHECK(pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey));\n-    m_node.mempool->clear();\n+    m_test_pool.clearTxs();\n \n     // coinbase in *m_node.mempool, template creation fails\n     tx.vin.resize(1);\n@@ -353,23 +355,23 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vout[0].nValue = 0;\n     hash = tx.GetHash();\n     // give it a fee so it'll get mined\n-    m_node.mempool->addUnchecked(entry.Fee(LOWFEE).Time(GetTime()).SpendsCoinbase(false).FromTx(tx));\n+    m_test_pool.addUnchecked(entry.Fee(LOWFEE).Time(GetTime()).SpendsCoinbase(false).FromTx(tx));\n     // Should throw bad-cb-multiple\n     BOOST_CHECK_EXCEPTION(AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey), std::runtime_error, HasReason(\"bad-cb-multiple\"));\n-    m_node.mempool->clear();\n+    m_test_pool.clearTxs();\n \n     // double spend txn pair in *m_node.mempool, template creation fails\n     tx.vin[0].prevout.hash = txFirst[0]->GetHash();\n     tx.vin[0].scriptSig = CScript() << OP_1;\n     tx.vout[0].nValue = BLOCKSUBSIDY-HIGHFEE;\n     tx.vout[0].scriptPubKey = CScript() << OP_1;\n     hash = tx.GetHash();\n-    m_node.mempool->addUnchecked(entry.Fee(HIGHFEE).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n+    m_test_pool.addUnchecked(entry.Fee(HIGHFEE).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n     tx.vout[0].scriptPubKey = CScript() << OP_2;\n     hash = tx.GetHash();\n-    m_node.mempool->addUnchecked(entry.Fee(HIGHFEE).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n+    m_test_pool.addUnchecked(entry.Fee(HIGHFEE).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n     BOOST_CHECK_EXCEPTION(AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey), std::runtime_error, HasReason(\"bad-txns-inputs-missingorspent\"));\n-    m_node.mempool->clear();\n+    m_test_pool.clearTxs();\n \n     // subsidy changing\n     int nHeight = ::ChainActive().Height();\n@@ -398,23 +400,23 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     }\n     BOOST_CHECK(pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey));\n \n-    // invalid p2sh txn in *m_node.mempool, template creation fails\n+    // invalid p2sh txn in m_test_pool, template creation fails\n     tx.vin[0].prevout.hash = txFirst[0]->GetHash();\n     tx.vin[0].prevout.n = 0;\n     tx.vin[0].scriptSig = CScript() << OP_1;\n     tx.vout[0].nValue = BLOCKSUBSIDY-LOWFEE;\n     script = CScript() << OP_0;\n     tx.vout[0].scriptPubKey = GetScriptForDestination(ScriptHash(script));\n     hash = tx.GetHash();\n-    m_node.mempool->addUnchecked(entry.Fee(LOWFEE).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n+    m_test_pool.addUnchecked(entry.Fee(LOWFEE).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n     tx.vin[0].prevout.hash = hash;\n     tx.vin[0].scriptSig = CScript() << std::vector<unsigned char>(script.begin(), script.end());\n     tx.vout[0].nValue -= LOWFEE;\n     hash = tx.GetHash();\n-    m_node.mempool->addUnchecked(entry.Fee(LOWFEE).Time(GetTime()).SpendsCoinbase(false).FromTx(tx));\n+    m_test_pool.addUnchecked(entry.Fee(LOWFEE).Time(GetTime()).SpendsCoinbase(false).FromTx(tx));\n     // Should throw block-validation-failed\n     BOOST_CHECK_EXCEPTION(AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey), std::runtime_error, HasReason(\"block-validation-failed\"));\n-    m_node.mempool->clear();\n+    m_test_pool.clearTxs();\n \n     // Delete the dummy blocks again.\n     while (::ChainActive().Tip()->nHeight > nHeight) {\n@@ -445,7 +447,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vout[0].scriptPubKey = CScript() << OP_1;\n     tx.nLockTime = 0;\n     hash = tx.GetHash();\n-    m_node.mempool->addUnchecked(entry.Fee(HIGHFEE).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n+    m_test_pool.addUnchecked(entry.Fee(HIGHFEE).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n     BOOST_CHECK(CheckFinalTx(CTransaction(tx), flags)); // Locktime passes\n     BOOST_CHECK(!TestSequenceLocks(CTransaction(tx), flags)); // Sequence locks fail\n     BOOST_CHECK(SequenceLocks(CTransaction(tx), flags, prevheights, CreateBlockIndex(::ChainActive().Tip()->nHeight + 2))); // Sequence locks pass on 2nd block\n@@ -455,7 +457,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vin[0].nSequence = CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG | (((::ChainActive().Tip()->GetMedianTimePast()+1-::ChainActive()[1]->GetMedianTimePast()) >> CTxIn::SEQUENCE_LOCKTIME_GRANULARITY) + 1); // txFirst[1] is the 3rd block\n     prevheights[0] = baseheight + 2;\n     hash = tx.GetHash();\n-    m_node.mempool->addUnchecked(entry.Time(GetTime()).FromTx(tx));\n+    m_test_pool.addUnchecked(entry.Time(GetTime()).FromTx(tx));\n     BOOST_CHECK(CheckFinalTx(CTransaction(tx), flags)); // Locktime passes\n     BOOST_CHECK(!TestSequenceLocks(CTransaction(tx), flags)); // Sequence locks fail\n \n@@ -471,7 +473,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     prevheights[0] = baseheight + 3;\n     tx.nLockTime = ::ChainActive().Tip()->nHeight + 1;\n     hash = tx.GetHash();\n-    m_node.mempool->addUnchecked(entry.Time(GetTime()).FromTx(tx));\n+    m_test_pool.addUnchecked(entry.Time(GetTime()).FromTx(tx));\n     BOOST_CHECK(!CheckFinalTx(CTransaction(tx), flags)); // Locktime fails\n     BOOST_CHECK(TestSequenceLocks(CTransaction(tx), flags)); // Sequence locks pass\n     BOOST_CHECK(IsFinalTx(CTransaction(tx), ::ChainActive().Tip()->nHeight + 2, ::ChainActive().Tip()->GetMedianTimePast())); // Locktime passes on 2nd block\n@@ -482,7 +484,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     prevheights.resize(1);\n     prevheights[0] = baseheight + 4;\n     hash = tx.GetHash();\n-    m_node.mempool->addUnchecked(entry.Time(GetTime()).FromTx(tx));\n+    m_test_pool.addUnchecked(entry.Time(GetTime()).FromTx(tx));\n     BOOST_CHECK(!CheckFinalTx(CTransaction(tx), flags)); // Locktime fails\n     BOOST_CHECK(TestSequenceLocks(CTransaction(tx), flags)); // Sequence locks pass\n     BOOST_CHECK(IsFinalTx(CTransaction(tx), ::ChainActive().Tip()->nHeight + 2, ::ChainActive().Tip()->GetMedianTimePast() + 1)); // Locktime passes 1 second later\n@@ -519,7 +521,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n \n     ::ChainActive().Tip()->nHeight--;\n     SetMockTime(0);\n-    m_node.mempool->clear();\n+    m_test_pool.clearTxs();\n \n     TestPackageSelection(chainparams, scriptPubKey, txFirst);\n "
      },
      {
        "sha": "4d407582a06ee21e13daa15119bbc3e88df9175d",
        "filename": "src/test/txvalidationcache_tests.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 9,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c10de729616f503fa7a886bd36cf9710fa45d7ba/src/test/txvalidationcache_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c10de729616f503fa7a886bd36cf9710fa45d7ba/src/test/txvalidationcache_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidationcache_tests.cpp?ref=c10de729616f503fa7a886bd36cf9710fa45d7ba",
        "patch": "@@ -7,10 +7,12 @@\n #include <script/sign.h>\n #include <script/signingprovider.h>\n #include <script/standard.h>\n-#include <test/util/setup_common.h>\n #include <txmempool.h>\n #include <validation.h>\n \n+#include <test/util/setup_common.h>\n+#include <test/util/txmempool.h>\n+\n #include <boost/test/unit_test.hpp>\n \n bool CheckInputScripts(const CTransaction& tx, TxValidationState &state, const CCoinsViewCache &inputs, unsigned int flags, bool cacheSigStore, bool cacheFullScriptStore, PrecomputedTransactionData& txdata, std::vector<CScriptCheck> *pvChecks);\n@@ -25,12 +27,13 @@ BOOST_FIXTURE_TEST_CASE(tx_mempool_block_doublespend, TestChain100Setup)\n \n     CScript scriptPubKey = CScript() <<  ToByteVector(coinbaseKey.GetPubKey()) << OP_CHECKSIG;\n \n-    const auto ToMemPool = [this](const CMutableTransaction& tx) {\n+    TxMemPoolClearable& tx_pool = *(TxMemPoolClearable*)&*m_node.mempool;\n+    const auto ToMemPool = [&tx_pool](const CMutableTransaction& tx) {\n         LOCK(cs_main);\n \n         TxValidationState state;\n-        return AcceptToMemoryPool(*m_node.mempool, state, MakeTransactionRef(tx),\n-            nullptr /* plTxnReplaced */, true /* bypass_limits */, 0 /* nAbsurdFee */);\n+        return AcceptToMemoryPool(tx_pool, state, MakeTransactionRef(tx),\n+                                  nullptr /* plTxnReplaced */, true /* bypass_limits */, 0 /* nAbsurdFee */);\n     };\n \n     // Create a double-spend of mature coinbase txn:\n@@ -70,7 +73,7 @@ BOOST_FIXTURE_TEST_CASE(tx_mempool_block_doublespend, TestChain100Setup)\n         LOCK(cs_main);\n         BOOST_CHECK(::ChainActive().Tip()->GetBlockHash() != block.GetHash());\n     }\n-    m_node.mempool->clear();\n+    tx_pool.clearTxs();\n \n     // Test 3: ... and should be rejected if spend2 is in the memory pool\n     BOOST_CHECK(ToMemPool(spends[1]));\n@@ -79,9 +82,9 @@ BOOST_FIXTURE_TEST_CASE(tx_mempool_block_doublespend, TestChain100Setup)\n         LOCK(cs_main);\n         BOOST_CHECK(::ChainActive().Tip()->GetBlockHash() != block.GetHash());\n     }\n-    m_node.mempool->clear();\n+    tx_pool.clearTxs();\n \n-    // Final sanity test: first spend in *m_node.mempool, second in block, that's OK:\n+    // Final sanity test: first spend in tx_pool, second in block, that's OK:\n     std::vector<CMutableTransaction> oneSpend;\n     oneSpend.push_back(spends[0]);\n     BOOST_CHECK(ToMemPool(spends[1]));\n@@ -90,9 +93,9 @@ BOOST_FIXTURE_TEST_CASE(tx_mempool_block_doublespend, TestChain100Setup)\n         LOCK(cs_main);\n         BOOST_CHECK(::ChainActive().Tip()->GetBlockHash() == block.GetHash());\n     }\n-    // spends[1] should have been removed from the mempool when the\n+    // spends[1] should have been removed from the tx_pool when the\n     // block with spends[0] is accepted:\n-    BOOST_CHECK_EQUAL(m_node.mempool->size(), 0U);\n+    BOOST_CHECK_EQUAL(tx_pool.size(), 0U);\n }\n \n // Run CheckInputScripts (using CoinsTip()) on the given transaction, for all script"
      },
      {
        "sha": "7edc6d607d52e19ec86cd1ae0ef277927ffc5b76",
        "filename": "src/test/util/txmempool.h",
        "status": "added",
        "additions": 23,
        "deletions": 0,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c10de729616f503fa7a886bd36cf9710fa45d7ba/src/test/util/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c10de729616f503fa7a886bd36cf9710fa45d7ba/src/test/util/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/txmempool.h?ref=c10de729616f503fa7a886bd36cf9710fa45d7ba",
        "patch": "@@ -0,0 +1,23 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_TEST_UTIL_TXMEMPOOL_H\n+#define BITCOIN_TEST_UTIL_TXMEMPOOL_H\n+\n+#include <txmempool.h>\n+\n+struct TxMemPoolClearable : public CTxMemPool {\n+    /** Clear added transactions */\n+    void clearTxs()\n+    {\n+        LOCK(cs);\n+        mapTx.clear();\n+        mapNextTx.clear();\n+        totalTxSize = 0;\n+        cachedInnerUsage = 0;\n+        ++nTransactionsUpdated;\n+    }\n+};\n+\n+#endif // BITCOIN_TEST_UTIL_TXMEMPOOL_H"
      },
      {
        "sha": "96f772027f9f85acfefa7b839df1621c59e2be50",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c10de729616f503fa7a886bd36cf9710fa45d7ba/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c10de729616f503fa7a886bd36cf9710fa45d7ba/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=c10de729616f503fa7a886bd36cf9710fa45d7ba",
        "patch": "@@ -487,7 +487,7 @@ class SaltedTxidHasher\n  */\n class CTxMemPool\n {\n-private:\n+protected:\n     uint32_t nCheckFrequency GUARDED_BY(cs); //!< Value n means that n times in 2^32 we check.\n     std::atomic<unsigned int> nTransactionsUpdated; //!< Used by getblocktemplate to trigger CreateNewBlock() invocation\n     CBlockPolicyEstimator* minerPolicyEstimator;"
      }
    ]
  },
  {
    "sha": "3a178313cc890c927c7b4bc31aa363f0d8204609",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYTE3ODMxM2NjODkwYzkyN2M3YjRiYzMxYWEzNjNmMGQ4MjA0NjA5",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-09-07T15:04:22Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-09-28T19:30:26Z"
      },
      "message": "txmempool: Remove unused clear() member function",
      "tree": {
        "sha": "f5f993e7265cefd33f31a709a3b16083437e2f78",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f5f993e7265cefd33f31a709a3b16083437e2f78"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3a178313cc890c927c7b4bc31aa363f0d8204609",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a178313cc890c927c7b4bc31aa363f0d8204609",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3a178313cc890c927c7b4bc31aa363f0d8204609",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a178313cc890c927c7b4bc31aa363f0d8204609/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c10de729616f503fa7a886bd36cf9710fa45d7ba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c10de729616f503fa7a886bd36cf9710fa45d7ba",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c10de729616f503fa7a886bd36cf9710fa45d7ba"
      }
    ],
    "stats": {
      "total": 47,
      "additions": 12,
      "deletions": 35
    },
    "files": [
      {
        "sha": "96e144f4e04589c2cd1d6bab6a840bb67a89ccad",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 25,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3a178313cc890c927c7b4bc31aa363f0d8204609/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3a178313cc890c927c7b4bc31aa363f0d8204609/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=3a178313cc890c927c7b4bc31aa363f0d8204609",
        "patch": "@@ -332,14 +332,8 @@ void CTxMemPoolEntry::UpdateAncestorState(int64_t modifySize, CAmount modifyFee,\n }\n \n CTxMemPool::CTxMemPool(CBlockPolicyEstimator* estimator)\n-    : nTransactionsUpdated(0), minerPolicyEstimator(estimator), m_epoch(0), m_has_epoch_guard(false)\n+    : minerPolicyEstimator(estimator), lastRollingFeeUpdate{GetTime()}\n {\n-    _clear(); //lock free clear\n-\n-    // Sanity checks off by default for performance, because otherwise\n-    // accepting transactions becomes O(N^2) where N is the number\n-    // of transactions in the pool\n-    nCheckFrequency = 0;\n }\n \n bool CTxMemPool::isSpent(const COutPoint& outpoint) const\n@@ -590,24 +584,6 @@ void CTxMemPool::removeForBlock(const std::vector<CTransactionRef>& vtx, unsigne\n     blockSinceLastRollingFeeBump = true;\n }\n \n-void CTxMemPool::_clear()\n-{\n-    mapTx.clear();\n-    mapNextTx.clear();\n-    totalTxSize = 0;\n-    cachedInnerUsage = 0;\n-    lastRollingFeeUpdate = GetTime();\n-    blockSinceLastRollingFeeBump = false;\n-    rollingMinimumFeeRate = 0;\n-    ++nTransactionsUpdated;\n-}\n-\n-void CTxMemPool::clear()\n-{\n-    LOCK(cs);\n-    _clear();\n-}\n-\n static void CheckInputsAndUpdateCoins(const CTransaction& tx, CCoinsViewCache& mempoolDuplicate, const int64_t spendheight)\n {\n     TxValidationState dummy_state; // Not used. CheckTxInputs() should always pass"
      },
      {
        "sha": "b1905e35c81d12db78ffe1dc76a861e3c5006d66",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 11,
        "deletions": 10,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3a178313cc890c927c7b4bc31aa363f0d8204609/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3a178313cc890c927c7b4bc31aa363f0d8204609/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=3a178313cc890c927c7b4bc31aa363f0d8204609",
        "patch": "@@ -488,18 +488,21 @@ class SaltedTxidHasher\n class CTxMemPool\n {\n protected:\n-    uint32_t nCheckFrequency GUARDED_BY(cs); //!< Value n means that n times in 2^32 we check.\n-    std::atomic<unsigned int> nTransactionsUpdated; //!< Used by getblocktemplate to trigger CreateNewBlock() invocation\n+    // Sanity checks off by default for performance, because otherwise\n+    // accepting transactions becomes O(N^2) where N is the number\n+    // of transactions in the pool\n+    uint32_t nCheckFrequency GUARDED_BY(cs){0};        //!< Value n means that n times in 2^32 we check.\n+    std::atomic<unsigned int> nTransactionsUpdated{1}; //!< Used by getblocktemplate to trigger CreateNewBlock() invocation\n     CBlockPolicyEstimator* minerPolicyEstimator;\n \n-    uint64_t totalTxSize;      //!< sum of all mempool tx's virtual sizes. Differs from serialized tx size since witness data is discounted. Defined in BIP 141.\n-    uint64_t cachedInnerUsage; //!< sum of dynamic memory usage of all the map elements (NOT the maps themselves)\n+    uint64_t totalTxSize{0};      //!< sum of all mempool tx's virtual sizes. Differs from serialized tx size since witness data is discounted. Defined in BIP 141.\n+    uint64_t cachedInnerUsage{0}; //!< sum of dynamic memory usage of all the map elements (NOT the maps themselves)\n \n     mutable int64_t lastRollingFeeUpdate;\n-    mutable bool blockSinceLastRollingFeeBump;\n-    mutable double rollingMinimumFeeRate; //!< minimum fee to get into the pool, decreases exponentially\n-    mutable uint64_t m_epoch;\n-    mutable bool m_has_epoch_guard;\n+    mutable bool blockSinceLastRollingFeeBump{false};\n+    mutable double rollingMinimumFeeRate{0}; //!< minimum fee to get into the pool, decreases exponentially\n+    mutable uint64_t m_epoch{0};\n+    mutable bool m_has_epoch_guard{false};\n \n     // In-memory counter for external mempool tracking purposes.\n     // This number is incremented once every time a transaction\n@@ -628,8 +631,6 @@ class CTxMemPool\n     void removeConflicts(const CTransaction& tx) EXCLUSIVE_LOCKS_REQUIRED(cs);\n     void removeForBlock(const std::vector<CTransactionRef>& vtx, unsigned int nBlockHeight) EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n-    void clear();\n-    void _clear() EXCLUSIVE_LOCKS_REQUIRED(cs); //lock free\n     bool CompareDepthAndScore(const uint256& hasha, const uint256& hashb, bool wtxid=false);\n     void queryHashes(std::vector<uint256>& vtxid) const;\n     bool isSpent(const COutPoint& outpoint) const;"
      }
    ]
  }
]