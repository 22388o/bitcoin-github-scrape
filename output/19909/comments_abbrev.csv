hebasto,2020-09-07 15:42:04,"Concept ACK. Mind elaborating ""useless calls"" in fa947ccbd4579c866760b3b2a032bd3765043835 ""validation: Remove useless call to mempool->clear()""?",https://github.com/bitcoin/bitcoin/pull/19909#issuecomment-688400759,688400759,
MarcoFalke,2020-09-07 15:59:20,"The `mempool.clear()` in `UnloadBlockIndex` has been added in commit 51598b26319bf1ee98b399dee8152b902c62891a to clear global state between unit tests. Now that there is no global mempool anymore, this it not needed anymore. Also, I couldn't find it to be useful for anything else.",https://github.com/bitcoin/bitcoin/pull/19909#issuecomment-688409592,688409592,
laanwj,2020-09-08 12:24:16,Concept ACK,https://github.com/bitcoin/bitcoin/pull/19909#issuecomment-688831736,688831736,
hebasto,2020-09-08 17:52:30,"Wrt to preserving recursive locking of `CTxMemPool::cs` mind considering the following patch:\n```diff\n--- a/src/test/txvalidationcache_tests.cpp\n+++ b/src/test/txvalidationcache_tests.cpp\n@@ -73,7 +73,7 @@ BOOST_FIXTURE_TEST_CASE(tx_mempool_block_doublespend, TestChain100Setup)\n         LOCK(cs_main);\n         BOOST_CHECK(::ChainActive().Tip()->GetBlockHash() != block.GetHash());\n   ",https://github.com/bitcoin/bitcoin/pull/19909#issuecomment-689038928,689038928,
MarcoFalke,2020-09-09 10:42:04,"@hebasto It hasn't been decided for the project whether to switch the mempool.cs to non-recursive mutex, nor in what way to do it, so I'll leave that test patch for later.",https://github.com/bitcoin/bitcoin/pull/19909#issuecomment-689479582,689479582,
dongcarl,2020-09-10 16:48:09,"I'm not very familiar with these tests, so I may be completely off the mark here. However, it seems to me like the purpose of `clearTxs` is to reset the mempool without re-instantiating it. I wonder if we shouldn't consider just re-instantiating the mempool every time we want to clear it, as:\n\n1. If there were a performance penalty, it wouldn't matter too much as it's in the test code\n2. We ",https://github.com/bitcoin/bitcoin/pull/19909#issuecomment-690489819,690489819,
laanwj,2020-09-10 16:59:58,"@dongcarl This was also my idea in the discussion here, but there wasn't really a decision: https://github.com/bitcoin/bitcoin/pull/19909#discussion_r484874230\n",https://github.com/bitcoin/bitcoin/pull/19909#issuecomment-690512698,690512698,
dongcarl,2020-09-10 18:07:02,"> The `mempool.clear()` in `UnloadBlockIndex` has been added in commit [51598b2](https://github.com/bitcoin/bitcoin/commit/51598b26319bf1ee98b399dee8152b902c62891a) to clear global state between unit tests. Now that there is no global mempool anymore, this it not needed anymore. Also, I couldn't find it to be useful for anything else.\n\nDoes the call to `UnloadBlockIndex` here: https://github.c",https://github.com/bitcoin/bitcoin/pull/19909#issuecomment-690589581,690589581,
sdaftuar,2020-09-10 23:47:19,"Is this refactor important to other work?  Having the ability to clear the mempool seems useful to me; even though we've never exposed it, I could imagine some situations where invoking the clear() function somehow (say via rpc) might be useful.\n\nAlternatively -- and even more speculatively -- in thinking about how we update the mempool after a reorg, I've wondered if there might be solutions ",https://github.com/bitcoin/bitcoin/pull/19909#issuecomment-690789590,690789590,
laanwj,2020-09-11 13:48:57,"I think you have a point there @sdaftuar. I'm not sure in how far it's here the case (there is no standard definition of the expectation for a ""mempool interface""), but in some cases some methods just belong in an API (say, add/lookup/delete in a table) even if they're temporarily not used, and going over the top to clean APIs to the minimum set can make future changes harder.",https://github.com/bitcoin/bitcoin/pull/19909#issuecomment-691106337,691106337,
DrahtBot,2020-09-19 13:47:19,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19927 (validation: Reduce direct g_chainman usage by dongcarl)\n* #19339 (validation: re-delegate absurd fee checking fro",https://github.com/bitcoin/bitcoin/pull/19909#issuecomment-695215625,695215625,
MarcoFalke,2020-09-19 14:25:54,"The `clear` method as currently implemented doesn't help with implementing a RPC that clears the mempool, because it also clears the fee estimates. If the method is kept, it should be renamed to `ReInit` (or similar), because all it does is (re-)initialize the member variables of the mempool.\n\nThough, according to our release notes, member variables should be initialized inline via C++11 initi",https://github.com/bitcoin/bitcoin/pull/19909#issuecomment-695219766,695219766,
sdaftuar,2020-09-19 15:15:27,"If you‚Äôre a miner, I could imagine it is possible that clearing the mempool could be helpful in the event of a dos-attack where pathological transaction chains (for example) cause block template creation to be very slow. So a use case could be to empty it and use other rpcs to manually refill it.\n\nThat‚Äôs just an example, and I don‚Äôt know if it is likely we‚Äôd support that anytime soon, but I co",https://github.com/bitcoin/bitcoin/pull/19909#issuecomment-695248403,695248403,
DrahtBot,2020-09-23 20:26:18,"<!--cf906140f33d8803c4a75a2196329ecb-->\nüêô This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a ""draft"".</sub>",https://github.com/bitcoin/bitcoin/pull/19909#issuecomment-697953920,697953920,
MarcoFalke,2020-09-28 19:31:49,"Rebased, but I'll revisit this some other day",https://github.com/bitcoin/bitcoin/pull/19909#issuecomment-700236813,700236813,
jnewbery,2020-10-30 08:24:15,"Concept ACK. Removing test-only code from the product is generally useful. Partly because it reduces the complexity of interfaces, reduces the binary size, etc, but more so because relying on test-only code paths increases the risk that the test logic diverges from the live logic. For example, if some initialization code was added to the mempool constructor, but not `clear()`, and tests assume tha",https://github.com/bitcoin/bitcoin/pull/19909#issuecomment-719405245,719405245,
practicalswift,2020-10-30 12:52:54,Concept ACK for the reasons @jnewbery mentioned.,https://github.com/bitcoin/bitcoin/pull/19909#issuecomment-719534550,719534550,
laanwj,2020-09-08 12:23:54,What is the difference between clearing and just instantiating a new mempool?,https://github.com/bitcoin/bitcoin/pull/19909#discussion_r484874230,484874230,src/test/mempool_tests.cpp
hebasto,2020-09-08 13:44:04,"May I suggest to name this struct more generally, say `TxMemPoolTesting`, as it seems more functions could be added to it.\nE.g., a special version of `GetTransactionAncestry()` that requires external `CTxMemPool::cs` locking, see https://github.com/bitcoin/bitcoin/pull/19872#discussion_r484841181.",https://github.com/bitcoin/bitcoin/pull/19909#discussion_r484931399,484931399,src/test/util/txmempool.h
hebasto,2020-09-08 17:50:24,Ignore all above. It won't work.,https://github.com/bitcoin/bitcoin/pull/19909#discussion_r485095479,485095479,src/test/util/txmempool.h
MarcoFalke,2020-09-08 19:57:53,"No difference. Though, a new mempool needs the old `cs` released and the fresh `cs`  taken, so would be a bit more code ",https://github.com/bitcoin/bitcoin/pull/19909#discussion_r485162533,485162533,src/test/mempool_tests.cpp
promag,2020-09-08 21:28:19,"> needs the old `cs` released\n\nWhy?",https://github.com/bitcoin/bitcoin/pull/19909#discussion_r485206081,485206081,src/test/mempool_tests.cpp
MarcoFalke,2020-09-09 10:34:40,"Ok, it is not needed if the scope of `pool` is kept the same. Though, it is still a larger diff to instantiate a new mempool `pool2`, lock it and replace `pool` with `pool2`. Happy to do whatever reviewers want, so let me know if I should keep this or change it.",https://github.com/bitcoin/bitcoin/pull/19909#discussion_r485510249,485510249,src/test/mempool_tests.cpp
promag,2020-09-09 10:38:04,"I was just asking. It doesn't need to be a big change, something like:\n```\n{\nCTxMemPool pool;\n// ...\n}\n\n{\nCTxMemPool pool;\n// ...\n}\n```",https://github.com/bitcoin/bitcoin/pull/19909#discussion_r485512067,485512067,src/test/mempool_tests.cpp
MarcoFalke,2020-09-09 14:07:52,"thx, fixed",https://github.com/bitcoin/bitcoin/pull/19909#discussion_r485640893,485640893,src/test/mempool_tests.cpp
