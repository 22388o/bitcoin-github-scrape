[
  {
    "sha": "07e7cccba1c590d8b244519ec03ea732cbbba474",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowN2U3Y2NjYmExYzU5MGQ4YjI0NDUxOWVjMDNlYTczMmNiYmJhNDc0",
    "commit": {
      "author": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-11-16T15:13:41Z"
      },
      "committer": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2019-02-09T23:44:17Z"
      },
      "message": "build: Optionally include dependency headers with -isystem\n\nWhen configured with --enable-isystem.\n\nWas necessary to split QT_INCLUDES into QT_INCLUDES and\nQT_MOC_INCLUDES because moc does not understand -isystem, e.g.:\n\n    Unknown options: isystem/usr/local/Cellar/qt/5.10.0_1/include/QtNetwork[...]\n\nThis does not convert all uses, but focuses on libraries which have triggered\nwarnings/errors when applying initial additional build checks: QT, Univalue, and Berkeley DB.\nLevelDb requires additional measures as its code is compiled with the project warnings\nvia AM_CXXFLAGS.\n\nNote -isystem should not be applied to /usr/include, see BITCOIN_SYSTEM_INCLUDE\nfor a helper to convert -I to -isystem with /usr/include excepted.",
      "tree": {
        "sha": "f694a4481ed3ba4274379b13596d04a27e23c1f8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f694a4481ed3ba4274379b13596d04a27e23c1f8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/07e7cccba1c590d8b244519ec03ea732cbbba474",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQEcBAABCgAGBQJcX2XRAAoJEG7l83hfeLNFZCEH/i1GVdnA/kDGjrmYvFd4QVAW\nYwgz76j9nE8RI7Q/g+wqBxI070Kd2UWY9soYgub+V9ojeMnJABf3fXXvsa+SpUdf\nhbs6tpAaUHKNvvFUduNOALtR0hPIvOtece9UvEoqICekzLHuY2m91SZEvI1mtRy+\nkjVug6m3s7JcTvOV9WVksNQXwqPKnTpUh6wElxZs1KqyFIvWqb8YBBLmmSAVeV5M\nii2zwGoXtXXj0W21o9KhA0AvvTej084FZ2PT3cKp7C/rUsmM6olZDRTFX0ejsLSG\neKzR/v4gM3Wf/wUqS2IR5yT8lT8Eyt/r6QzZ+QvgV/zmVAky91KK88Jd9M2SDPg=\n=VisL\n-----END PGP SIGNATURE-----",
        "payload": "tree f694a4481ed3ba4274379b13596d04a27e23c1f8\nparent 2945492424934fa360f86b116184ee8e34f19d0a\nauthor Ben Woosley <ben.woosley@gmail.com> 1542381221 -0500\ncommitter Ben Woosley <ben.woosley@gmail.com> 1549755857 -0500\n\nbuild: Optionally include dependency headers with -isystem\n\nWhen configured with --enable-isystem.\n\nWas necessary to split QT_INCLUDES into QT_INCLUDES and\nQT_MOC_INCLUDES because moc does not understand -isystem, e.g.:\n\n    Unknown options: isystem/usr/local/Cellar/qt/5.10.0_1/include/QtNetwork[...]\n\nThis does not convert all uses, but focuses on libraries which have triggered\nwarnings/errors when applying initial additional build checks: QT, Univalue, and Berkeley DB.\nLevelDb requires additional measures as its code is compiled with the project warnings\nvia AM_CXXFLAGS.\n\nNote -isystem should not be applied to /usr/include, see BITCOIN_SYSTEM_INCLUDE\nfor a helper to convert -I to -isystem with /usr/include excepted.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/07e7cccba1c590d8b244519ec03ea732cbbba474",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/07e7cccba1c590d8b244519ec03ea732cbbba474",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/07e7cccba1c590d8b244519ec03ea732cbbba474/comments",
    "author": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2945492424934fa360f86b116184ee8e34f19d0a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2945492424934fa360f86b116184ee8e34f19d0a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2945492424934fa360f86b116184ee8e34f19d0a"
      }
    ],
    "stats": {
      "total": 59,
      "additions": 45,
      "deletions": 14
    },
    "files": [
      {
        "sha": "fe7c8cb64ce2659466a330203cc7681ec51ea7fd",
        "filename": "build-aux/m4/bitcoin_qt.m4",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/07e7cccba1c590d8b244519ec03ea732cbbba474/build-aux/m4/bitcoin_qt.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/07e7cccba1c590d8b244519ec03ea732cbbba474/build-aux/m4/bitcoin_qt.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/bitcoin_qt.m4?ref=07e7cccba1c590d8b244519ec03ea732cbbba474",
        "patch": "@@ -430,17 +430,17 @@ AC_DEFUN([_BITCOIN_QT_FIND_LIBS_WITH_PKGCONFIG],[\n     QT_LIB_PREFIX=Qt5\n     qt5_modules=\"Qt5Core Qt5Gui Qt5Network Qt5Widgets\"\n     BITCOIN_QT_CHECK([\n-      PKG_CHECK_MODULES([QT5], [$qt5_modules], [QT_INCLUDES=\"$QT5_CFLAGS\"; QT_LIBS=\"$QT5_LIBS\" have_qt=yes],[have_qt=no])\n+      PKG_CHECK_MODULES([QT5], [$qt5_modules], [have_qt=yes; BITCOIN_SYSTEM_INCLUDE([QT_INCLUDES], [$QT5_CFLAGS]) QT_MOC_INCLUDES=\"$QT5_CFLAGS\"; QT_LIBS=\"$QT5_LIBS\"],[have_qt=no])\n \n       if test \"x$have_qt\" != xyes; then\n         have_qt=no\n         BITCOIN_QT_FAIL([Qt dependencies not found])\n       fi\n     ])\n     BITCOIN_QT_CHECK([\n-      PKG_CHECK_MODULES([QT_TEST], [${QT_LIB_PREFIX}Test], [QT_TEST_INCLUDES=\"$QT_TEST_CFLAGS\"; have_qt_test=yes], [have_qt_test=no])\n+      PKG_CHECK_MODULES([QT_TEST], [${QT_LIB_PREFIX}Test], [have_qt_test=yes; BITCOIN_SYSTEM_INCLUDE([QT_TEST_INCLUDES], [$QT_TEST_CFLAGS])], [have_qt_test=no])\n       if test \"x$use_dbus\" != xno; then\n-        PKG_CHECK_MODULES([QT_DBUS], [${QT_LIB_PREFIX}DBus], [QT_DBUS_INCLUDES=\"$QT_DBUS_CFLAGS\"; have_qt_dbus=yes], [have_qt_dbus=no])\n+        PKG_CHECK_MODULES([QT_DBUS], [${QT_LIB_PREFIX}DBus], [have_qt_dbus=yes; BITCOIN_SYSTEM_INCLUDE([QT_DBUS_INCLUDES], [$QT_DBUS_CFLAGS])], [have_qt_dbus=no])\n       fi\n     ])\n   ])\n@@ -460,7 +460,8 @@ AC_DEFUN([_BITCOIN_QT_FIND_LIBS_WITHOUT_PKGCONFIG],[\n   TEMP_LIBS=\"$LIBS\"\n   BITCOIN_QT_CHECK([\n     if test \"x$qt_include_path\" != x; then\n-      QT_INCLUDES=\"-I$qt_include_path -I$qt_include_path/QtCore -I$qt_include_path/QtGui -I$qt_include_path/QtWidgets -I$qt_include_path/QtNetwork -I$qt_include_path/QtTest -I$qt_include_path/QtDBus\"\n+      QT_MOC_INCLUDES=\"-I$qt_include_path -I$qt_include_path/QtCore -I$qt_include_path/QtGui -I$qt_include_path/QtWidgets -I$qt_include_path/QtNetwork -I$qt_include_path/QtTest -I$qt_include_path/QtDBus\"\n+      BITCOIN_SYSTEM_INCLUDE([QT_INCLUDES], [$QT_MOC_INCLUDES])\n       CPPFLAGS=\"$QT_INCLUDES $CPPFLAGS\"\n     fi\n   ])\n@@ -527,4 +528,3 @@ AC_DEFUN([_BITCOIN_QT_FIND_LIBS_WITHOUT_PKGCONFIG],[\n   CXXFLAGS=\"$TEMP_CXXFLAGS\"\n   LIBS=\"$TEMP_LIBS\"\n ])\n-"
      },
      {
        "sha": "34fe832344774574644ceb305d6006cbe1d39048",
        "filename": "build-aux/m4/bitcoin_subdir_to_include.m4",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/07e7cccba1c590d8b244519ec03ea732cbbba474/build-aux/m4/bitcoin_subdir_to_include.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/07e7cccba1c590d8b244519ec03ea732cbbba474/build-aux/m4/bitcoin_subdir_to_include.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/bitcoin_subdir_to_include.m4?ref=07e7cccba1c590d8b244519ec03ea732cbbba474",
        "patch": "@@ -12,7 +12,8 @@ AC_DEFUN([BITCOIN_SUBDIR_TO_INCLUDE],[\n     newinclpath=`${CXXCPP} ${CPPFLAGS} -M conftest.cpp 2>/dev/null | [ tr -d '\\\\n\\\\r\\\\\\\\' | sed -e 's/^.*[[:space:]:]\\(\\/[^[:space:]]*\\)]$3[\\.h[[:space:]].*$/\\1/' -e t -e d`]\n     AC_MSG_RESULT([${newinclpath}])\n     if test \"x${newinclpath}\" != \"x\"; then\n-      eval \"$1=\\\"\\$$1\\\"' -I${newinclpath}'\"\n+      BITCOIN_SYSTEM_INCLUDE([newincl], [\"-I${newinclpath}\"])\n+      eval \"$1=\\\"\\$$1\\\"' ${newincl}'\"\n     fi\n   fi\n ])"
      },
      {
        "sha": "f626f26e93b18fc440817b557453bea601ee86ce",
        "filename": "build-aux/m4/bitcoin_system_include.m4",
        "status": "added",
        "additions": 19,
        "deletions": 0,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/07e7cccba1c590d8b244519ec03ea732cbbba474/build-aux/m4/bitcoin_system_include.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/07e7cccba1c590d8b244519ec03ea732cbbba474/build-aux/m4/bitcoin_system_include.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/bitcoin_system_include.m4?ref=07e7cccba1c590d8b244519ec03ea732cbbba474",
        "patch": "@@ -0,0 +1,19 @@\n+dnl Copyright (c) 2018 The Bitcoin Core developers\n+dnl Distributed under the MIT software license, see the accompanying\n+dnl file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+dnl BITCOIN_SYSTEM_INCLUDE([DESTINATION-VARIABLE-NAME], [INCLUDES-STRING])\n+dnl Populates the variable DESTINATION with the value from INCLUDES but\n+dnl with -I includes switched to -isystem, with the exception of -I/usr/include,\n+dnl which is left unmodified to avoid order issues with /usr/include. See:\n+dnl https://stackoverflow.com/questions/37218953/isystem-on-a-system-include-directory-causes-errors\n+AC_DEFUN([BITCOIN_SYSTEM_INCLUDE],[\n+  if test \"x$use_isystem\" = \"xyes\" && test \"x$2\" != \"x\"; then\n+    dnl Including /usr/include with -isystem is known to cause problems, e.g.\n+    dnl breaking include_next due to, the directive changing inclusion order.\n+    dnl https://bugreports.qt.io/browse/QTBUG-53367\n+    $1=$(echo $2 | sed -e 's| -I| -isystem|g' -e 's|^-I|-isystem|g' -e 's|-isystem/usr/include|-I/usr/include|g')\n+  else\n+    $1=$2\n+  fi\n+])"
      },
      {
        "sha": "7e1a376573bc194acdde22ee98b78b87c8088e9c",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 17,
        "deletions": 6,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/07e7cccba1c590d8b244519ec03ea732cbbba474/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/07e7cccba1c590d8b244519ec03ea732cbbba474/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=07e7cccba1c590d8b244519ec03ea732cbbba474",
        "patch": "@@ -176,6 +176,12 @@ AC_ARG_ENABLE([ccache],\n   [use_ccache=$enableval],\n   [use_ccache=auto])\n \n+AC_ARG_ENABLE([isystem],\n+  [AS_HELP_STRING([--enable-isystem],\n+  [enable isystem includes for dependencies and stricter warning checks (default is no)])],\n+  [use_isystem=$enableval],\n+  [use_isystem=no])\n+\n AC_ARG_ENABLE([lcov],\n   [AS_HELP_STRING([--enable-lcov],\n   [enable lcov testing (default is no)])],\n@@ -539,7 +545,8 @@ case $host in\n            export PKG_CONFIG_PATH\n          fi\n          if test x$bdb_prefix != x; then\n-           CPPFLAGS=\"$CPPFLAGS -I$bdb_prefix/include\"\n+           BITCOIN_SYSTEM_INCLUDE([bdb_cppflags], [\"-I$bdb_prefix/include\"])\n+           CPPFLAGS=\"$CPPFLAGS $bdb_cppflags\"\n            LIBS=\"$LIBS -L$bdb_prefix/lib\"\n          fi\n          if test x$qt5_prefix != x; then\n@@ -1081,6 +1088,8 @@ AC_LINK_IFELSE([AC_LANG_PROGRAM([[\n LIBS=\"$TEMP_LIBS\"\n CPPFLAGS=\"$TEMP_CPPFLAGS\"\n fi\n+dnl Treat boost includes with isystem if applicable\n+BITCOIN_SYSTEM_INCLUDE([BOOST_CPPFLAGS], [$BOOST_CPPFLAGS])\n \n if test x$boost_sleep != xyes; then\n   AC_MSG_ERROR(No working boost sleep implementation found.)\n@@ -1093,18 +1102,18 @@ if test x$use_pkgconfig = xyes; then\n   m4_ifdef(\n     [PKG_CHECK_MODULES],\n     [\n-      PKG_CHECK_MODULES([SSL], [libssl],, [AC_MSG_ERROR(openssl not found.)])\n-      PKG_CHECK_MODULES([CRYPTO], [libcrypto],,[AC_MSG_ERROR(libcrypto not found.)])\n+      PKG_CHECK_MODULES([SSL], [libssl], [BITCOIN_SYSTEM_INCLUDE([SSL_CFLAGS], [$SSL_CFLAGS])], [AC_MSG_ERROR(openssl not found.)])\n+      PKG_CHECK_MODULES([CRYPTO], [libcrypto], [BITCOIN_SYSTEM_INCLUDE([CRYPTO_CFLAGS], [$CRYPTO_CFLAGS])],[AC_MSG_ERROR(libcrypto not found.)])\n       if test x$enable_bip70 != xno; then\n-        BITCOIN_QT_CHECK([PKG_CHECK_MODULES([PROTOBUF], [protobuf], [have_protobuf=yes], [have_protobuf=no])])\n+        BITCOIN_QT_CHECK([PKG_CHECK_MODULES([PROTOBUF], [protobuf], [have_protobuf=yes; BITCOIN_SYSTEM_INCLUDE([PROTOBUF_CFLAGS], [$PROTOBUF_CFLAGS])], [have_protobuf=no])])\n       fi\n       if test x$use_qr != xno; then\n         BITCOIN_QT_CHECK([PKG_CHECK_MODULES([QR], [libqrencode], [have_qrencode=yes], [have_qrencode=no])])\n       fi\n       if test x$build_bitcoin_cli$build_bitcoind$bitcoin_enable_qt$use_tests != xnononono; then\n-        PKG_CHECK_MODULES([EVENT], [libevent],, [AC_MSG_ERROR(libevent not found.)])\n+        PKG_CHECK_MODULES([EVENT], [libevent], [BITCOIN_SYSTEM_INCLUDE([EVENT_CFLAGS], [$EVENT_CFLAGS])], [AC_MSG_ERROR(libevent not found.)])\n         if test x$TARGET_OS != xwindows; then\n-          PKG_CHECK_MODULES([EVENT_PTHREADS], [libevent_pthreads],, [AC_MSG_ERROR(libevent_pthreads not found.)])\n+          PKG_CHECK_MODULES([EVENT_PTHREADS], [libevent_pthreads], [BITCOIN_SYSTEM_INCLUDE([EVENT_PTHREADS_CFLAGS], [$EVENT_PTHREADS_CFLAGS])], [AC_MSG_ERROR(libevent_pthreads not found.)])\n         fi\n       fi\n \n@@ -1228,6 +1237,7 @@ fi\n \n if test x$need_bundled_univalue = xyes ; then\n   UNIVALUE_CFLAGS='-I$(srcdir)/univalue/include'\n+  BITCOIN_SYSTEM_INCLUDE([UNIVALUE_CFLAGS], [$UNIVALUE_CFLAGS])\n   UNIVALUE_LIBS='univalue/libunivalue.la'\n fi\n \n@@ -1559,6 +1569,7 @@ fi\n echo \"  with bench    = $use_bench\"\n echo \"  with upnp     = $use_upnp\"\n echo \"  use asm       = $use_asm\"\n+echo \"  use isystem   = $use_isystem\"\n echo \"  sanitizers    = $use_sanitizers\"\n echo \"  debug enabled = $enable_debug\"\n echo \"  gprof enabled = $enable_gprof\""
      },
      {
        "sha": "5817dc09bca29edddd223324a6b1b152f531cd57",
        "filename": "src/Makefile.qt.include",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/07e7cccba1c590d8b244519ec03ea732cbbba474/src/Makefile.qt.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/07e7cccba1c590d8b244519ec03ea732cbbba474/src/Makefile.qt.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qt.include?ref=07e7cccba1c590d8b244519ec03ea732cbbba474",
        "patch": "@@ -477,11 +477,11 @@ ui_%.h: %.ui\n \t$(AM_V_GEN) QT_SELECT=$(QT_SELECT) $(UIC) -o $@ $< || (echo \"Error creating $@\"; false)\n \n %.moc: %.cpp\n-\t$(AM_V_GEN) QT_SELECT=$(QT_SELECT) $(MOC) $(DEFAULT_INCLUDES) $(QT_INCLUDES) $(MOC_DEFS) $< | \\\n+\t$(AM_V_GEN) QT_SELECT=$(QT_SELECT) $(MOC) $(DEFAULT_INCLUDES) $(QT_MOC_INCLUDES) $(MOC_DEFS) $< | \\\n \t  $(SED) -e '/^\\*\\*.*Created:/d' -e '/^\\*\\*.*by:/d' > $@\n \n moc_%.cpp: %.h\n-\t$(AM_V_GEN) QT_SELECT=$(QT_SELECT) $(MOC) $(DEFAULT_INCLUDES) $(QT_INCLUDES) $(MOC_DEFS) $< | \\\n+\t$(AM_V_GEN) QT_SELECT=$(QT_SELECT) $(MOC) $(DEFAULT_INCLUDES) $(QT_MOC_INCLUDES) $(MOC_DEFS) $< | \\\n \t  $(SED) -e '/^\\*\\*.*Created:/d' -e '/^\\*\\*.*by:/d' > $@\n \n %.qm: %.ts"
      }
    ]
  },
  {
    "sha": "a98e0be5932b13d4586f6a0ecd75bc402e5f77ec",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphOThlMGJlNTkzMmIxM2Q0NTg2ZjZhMGVjZDc1YmM0MDJlNWY3N2Vj",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-08-08T19:13:42Z"
      },
      "committer": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2019-02-09T23:44:18Z"
      },
      "message": "build: Enable -Wdocumentation if isystem is enabled\n\n-Werror=documentation if isystem & werror are enabled.",
      "tree": {
        "sha": "57fa3ac77215d63aa5c314a0f8b97f6a6c631495",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/57fa3ac77215d63aa5c314a0f8b97f6a6c631495"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a98e0be5932b13d4586f6a0ecd75bc402e5f77ec",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQEcBAABCgAGBQJcX2XSAAoJEG7l83hfeLNFH0AIAIB3eGW+vDUfqm1FGrDGdMrr\nDvaUe30j5N4MH7LwFMuYB1zE/JqAioJtoQ4lyiilLGlf55/DiMQih1WcVV//nfNk\nAb917/FwMmW4BBjouJ4YKhloleQr3Mk/idKNL7D4IFyesP0V50XIAuNvDSwqEmXw\nOmIqq+k1vmKuitKfsdCQOdoaKODwXrhKKzOkcfI5pPRQXs8yyjgB/Q5fTDuCds51\nE494egh3v7vUVbKHNwNgThy0ZXVB9/nr/Ys9FRL+3yKxB3sMH6MS/GqVtbHWNH+O\nAEZ03FXvwmIb49n/HDhSTajWM2qL+ywqP/Nxh/YE3Jh7FpXnl2qR3Z4S7c3D5W0=\n=aIzN\n-----END PGP SIGNATURE-----",
        "payload": "tree 57fa3ac77215d63aa5c314a0f8b97f6a6c631495\nparent 07e7cccba1c590d8b244519ec03ea732cbbba474\nauthor practicalswift <practicalswift@users.noreply.github.com> 1533755622 +0200\ncommitter Ben Woosley <ben.woosley@gmail.com> 1549755858 -0500\n\nbuild: Enable -Wdocumentation if isystem is enabled\n\n-Werror=documentation if isystem & werror are enabled.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a98e0be5932b13d4586f6a0ecd75bc402e5f77ec",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a98e0be5932b13d4586f6a0ecd75bc402e5f77ec",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a98e0be5932b13d4586f6a0ecd75bc402e5f77ec/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "07e7cccba1c590d8b244519ec03ea732cbbba474",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/07e7cccba1c590d8b244519ec03ea732cbbba474",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/07e7cccba1c590d8b244519ec03ea732cbbba474"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 17,
      "deletions": 1
    },
    "files": [
      {
        "sha": "11e7956d9a9ccc9f848a9a4b9ab809bc2daa309a",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a98e0be5932b13d4586f6a0ecd75bc402e5f77ec/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a98e0be5932b13d4586f6a0ecd75bc402e5f77ec/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=a98e0be5932b13d4586f6a0ecd75bc402e5f77ec",
        "patch": "@@ -150,4 +150,4 @@ jobs:\n         RUN_UNIT_TESTS=false\n         RUN_FUNCTIONAL_TESTS=false\n         GOAL=\"deploy\"\n-        BITCOIN_CONFIG=\"--enable-gui --enable-reduce-exports --enable-werror\"\n+        BITCOIN_CONFIG=\"--enable-gui --enable-reduce-exports --enable-werror --enable-isystem\""
      },
      {
        "sha": "8efe111863261462512d8c5937c7c8ebf6a6d2f4",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a98e0be5932b13d4586f6a0ecd75bc402e5f77ec/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a98e0be5932b13d4586f6a0ecd75bc402e5f77ec/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=a98e0be5932b13d4586f6a0ecd75bc402e5f77ec",
        "patch": "@@ -323,6 +323,14 @@ if test \"x$enable_werror\" = \"xyes\"; then\n   fi\n   AX_CHECK_COMPILE_FLAG([-Werror=vla],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=vla\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Werror=thread-safety-analysis],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=thread-safety-analysis\"],,[[$CXXFLAG_WERROR]])\n+\n+  ## Some warnings alert on violations in our dependencies. Only enable them when\n+  ## isystem is in use to keep the build clean\n+  ## These represent the werror versions of warnings enabled given the use of\n+  ## isystem. See below for their non-werror equivalents.\n+  if test \"x$use_isystem\" = \"xyes\"; then\n+    AX_CHECK_COMPILE_FLAG([-Werror=documentation],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=documentation\"],,[[$CXXFLAG_WERROR]])\n+  fi\n fi\n \n if test \"x$CXXFLAGS_overridden\" = \"xno\"; then\n@@ -343,6 +351,14 @@ if test \"x$CXXFLAGS_overridden\" = \"xno\"; then\n   AX_CHECK_COMPILE_FLAG([-Wunused-local-typedef],[NOWARN_CXXFLAGS=\"$NOWARN_CXXFLAGS -Wno-unused-local-typedef\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Wdeprecated-register],[NOWARN_CXXFLAGS=\"$NOWARN_CXXFLAGS -Wno-deprecated-register\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Wimplicit-fallthrough],[NOWARN_CXXFLAGS=\"$NOWARN_CXXFLAGS -Wno-implicit-fallthrough\"],,[[$CXXFLAG_WERROR]])\n+\n+  ## Some warnings alert on violations in our dependencies. Only enable them when\n+  ## isystem is in use to keep the build clean\n+  ## These represent the non-werror versions of warnings enabled given the use\n+  ## of isystem. See above for their werror equivalents.\n+  if test \"x$use_isystem\" = \"xyes\" && test \"x$enable_werror\" == \"x\"; then\n+    AX_CHECK_COMPILE_FLAG([-Wdocumentation],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wdocumentation\"],,[[$CXXFLAG_WERROR]])\n+  fi\n fi\n \n # Check for optional instruction set support. Enabling these does _not_ imply that all code will"
      }
    ]
  },
  {
    "sha": "af8d17be052f3a66607f7dd31c8bae1163c1c1a5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZjhkMTdiZTA1MmYzYTY2NjA3ZjdkZDMxYzhiYWUxMTYzYzFjMWE1",
    "commit": {
      "author": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2019-02-09T23:36:07Z"
      },
      "committer": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2019-02-11T12:22:42Z"
      },
      "message": "Disallow shadowing variables via -isystem, -Wshadow\n\nShadowed variables are implicated in logic errors, duplicative code, and\nunnecessary operation. Catching them automatically is best.\n\nAs with -Wdocumentation, warns when configured with --enable-isystem,\nerrors if configured with --enable-werror as well.",
      "tree": {
        "sha": "e9a6306e7ac6bb7bf4ab23b2670ba6e46571279a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e9a6306e7ac6bb7bf4ab23b2670ba6e46571279a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/af8d17be052f3a66607f7dd31c8bae1163c1c1a5",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE+XLHXoy4Dim7e8hvTYykuhgECQYFAlxhaRYACgkQTYykuhgE\nCQYjzg//QfR6IutJA8tjXsllr3ZDeK9xCobHvmWQYMIk/KqTpMFLE4BmvBJlHVE3\nq3VxqJiJPtdgynR04oJ1qtPvLq1uOrFQq5hon6LiTX8+JqOyOgQcnjNzKVe7STvj\nDRqT6hdjEXtcghE6RG7ZKMe0SEwQB22BnGRgKeioWODN2KFy/0TQ3/MEQFUgyPIM\n9FTBM1g4UeMLub1UE5NjCEctPyzmCgHiQQsxvJxR1HAGIoHVtkfzamoOYehEPNti\nfUZnBzaJNCp/ATA0lrlNPMkPeB0LyXR4D1x9f+3CqWllK3O+KA5Nl4GZc/Gv7QZa\nsvlaFQxppfG5unhT03l/0wtnhqBjRshhRTXLs2WeLX9dHbSqLFFswtI4KnTRrqGe\nMNTtjOZ5FnVoL7Vt/JApKnKjri/U5LwS4QVtvChzSloDyoruPqM15v5Bgn6R8l6J\nJVo9NGqGswIYmO75Xid+9MHQhdHUcERZxNN+/fPYcwJ3E0xPNz1TEpV+vfSCUnE8\n0C5QPy7uY9af0/hOEqRSlVv46WX7XmntVnL7tbboGTaePRbRr+et1NK6Yau9rQip\nf3L9fvM9W9kw9SiJyIJ1vU7/TIQQ8/52Dnj+RkEg1U7P8ZXzGr19p20GzQACKpH3\niRd1Qj8zSkL0LcBqN62hion5VW1UywsTSSOxvYM0Qt2okdpcmNs=\n=o+jV\n-----END PGP SIGNATURE-----",
        "payload": "tree e9a6306e7ac6bb7bf4ab23b2670ba6e46571279a\nparent a98e0be5932b13d4586f6a0ecd75bc402e5f77ec\nauthor Ben Woosley <ben.woosley@gmail.com> 1549755367 -0500\ncommitter Ben Woosley <ben.woosley@gmail.com> 1549887762 -0800\n\nDisallow shadowing variables via -isystem, -Wshadow\n\nShadowed variables are implicated in logic errors, duplicative code, and\nunnecessary operation. Catching them automatically is best.\n\nAs with -Wdocumentation, warns when configured with --enable-isystem,\nerrors if configured with --enable-werror as well.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/af8d17be052f3a66607f7dd31c8bae1163c1c1a5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/af8d17be052f3a66607f7dd31c8bae1163c1c1a5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/af8d17be052f3a66607f7dd31c8bae1163c1c1a5/comments",
    "author": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a98e0be5932b13d4586f6a0ecd75bc402e5f77ec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a98e0be5932b13d4586f6a0ecd75bc402e5f77ec",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a98e0be5932b13d4586f6a0ecd75bc402e5f77ec"
      }
    ],
    "stats": {
      "total": 77,
      "additions": 43,
      "deletions": 34
    },
    "files": [
      {
        "sha": "260e61b8f2aa359df4bdcf7a773d6a8e39a4af8d",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/af8d17be052f3a66607f7dd31c8bae1163c1c1a5/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/af8d17be052f3a66607f7dd31c8bae1163c1c1a5/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=af8d17be052f3a66607f7dd31c8bae1163c1c1a5",
        "patch": "@@ -330,6 +330,7 @@ if test \"x$enable_werror\" = \"xyes\"; then\n   ## isystem. See below for their non-werror equivalents.\n   if test \"x$use_isystem\" = \"xyes\"; then\n     AX_CHECK_COMPILE_FLAG([-Werror=documentation],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=documentation\"],,[[$CXXFLAG_WERROR]])\n+    AX_CHECK_COMPILE_FLAG([-Werror=shadow],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=shadow\"],,[[$CXXFLAG_WERROR]])\n   fi\n fi\n \n@@ -358,6 +359,7 @@ if test \"x$CXXFLAGS_overridden\" = \"xno\"; then\n   ## of isystem. See above for their werror equivalents.\n   if test \"x$use_isystem\" = \"xyes\" && test \"x$enable_werror\" == \"x\"; then\n     AX_CHECK_COMPILE_FLAG([-Wdocumentation],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wdocumentation\"],,[[$CXXFLAG_WERROR]])\n+    AX_CHECK_COMPILE_FLAG([-Wshadow],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wshadow\"],,[[$CXXFLAG_WERROR]])\n   fi\n fi\n "
      },
      {
        "sha": "da809bf5e0b5c9af935f342bd170da6e15f21741",
        "filename": "src/bench/block_assemble.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/af8d17be052f3a66607f7dd31c8bae1163c1c1a5/src/bench/block_assemble.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/af8d17be052f3a66607f7dd31c8bae1163c1c1a5/src/bench/block_assemble.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/block_assemble.cpp?ref=af8d17be052f3a66607f7dd31c8bae1163c1c1a5",
        "patch": "@@ -81,8 +81,8 @@ static void AssembleBlock(benchmark::State& state)\n         thread_group.create_thread(std::bind(&CScheduler::serviceQueue, &scheduler));\n         GetMainSignals().RegisterBackgroundSignalScheduler(scheduler);\n         LoadGenesisBlock(chainparams);\n-        CValidationState state;\n-        ActivateBestChain(state, chainparams);\n+        CValidationState validation_state;\n+        ActivateBestChain(validation_state, chainparams);\n         assert(::chainActive.Tip() != nullptr);\n         const bool witness_enabled{IsWitnessEnabled(::chainActive.Tip(), chainparams.GetConsensus())};\n         assert(witness_enabled);\n@@ -103,8 +103,8 @@ static void AssembleBlock(benchmark::State& state)\n         LOCK(::cs_main); // Required for ::AcceptToMemoryPool.\n \n         for (const auto& txr : txs) {\n-            CValidationState state;\n-            bool ret{::AcceptToMemoryPool(::mempool, state, txr, nullptr /* pfMissingInputs */, nullptr /* plTxnReplaced */, false /* bypass_limits */, /* nAbsurdFee */ 0)};\n+            CValidationState validation_state;\n+            bool ret{::AcceptToMemoryPool(::mempool, validation_state, txr, nullptr /* pfMissingInputs */, nullptr /* plTxnReplaced */, false /* bypass_limits */, /* nAbsurdFee */ 0)};\n             assert(ret);\n         }\n     }"
      },
      {
        "sha": "5c6b841027b81b9985c3a11fa5dca4c05451ea01",
        "filename": "src/crypto/sha256.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/af8d17be052f3a66607f7dd31c8bae1163c1c1a5/src/crypto/sha256.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/af8d17be052f3a66607f7dd31c8bae1163c1c1a5/src/crypto/sha256.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/sha256.cpp?ref=af8d17be052f3a66607f7dd31c8bae1163c1c1a5",
        "patch": "@@ -519,9 +519,11 @@ bool SelfTest() {\n     }\n \n     // Test TransformD64\n-    unsigned char out[32];\n-    TransformD64(out, data + 1);\n-    if (!std::equal(out, out + 32, result_d64)) return false;\n+    {\n+        unsigned char out[32];\n+        TransformD64(out, data + 1);\n+        if (!std::equal(out, out + 32, result_d64)) return false;\n+    }\n \n     // Test TransformD64_2way, if available.\n     if (TransformD64_2way) {"
      },
      {
        "sha": "4e89ca993e54ff034f4e2779298b918a4cf06984",
        "filename": "src/qt/askpassphrasedialog.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/af8d17be052f3a66607f7dd31c8bae1163c1c1a5/src/qt/askpassphrasedialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/af8d17be052f3a66607f7dd31c8bae1163c1c1a5/src/qt/askpassphrasedialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/askpassphrasedialog.cpp?ref=af8d17be052f3a66607f7dd31c8bae1163c1c1a5",
        "patch": "@@ -238,10 +238,10 @@ bool AskPassphraseDialog::event(QEvent *event)\n void AskPassphraseDialog::toggleShowPassword(bool show)\n {\n     ui->toggleShowPasswordButton->setDown(show);\n-    const auto mode = show ? QLineEdit::Normal : QLineEdit::Password;\n-    ui->passEdit1->setEchoMode(mode);\n-    ui->passEdit2->setEchoMode(mode);\n-    ui->passEdit3->setEchoMode(mode);\n+    const auto echo_mode = show ? QLineEdit::Normal : QLineEdit::Password;\n+    ui->passEdit1->setEchoMode(echo_mode);\n+    ui->passEdit2->setEchoMode(echo_mode);\n+    ui->passEdit3->setEchoMode(echo_mode);\n }\n \n bool AskPassphraseDialog::eventFilter(QObject *object, QEvent *event)"
      },
      {
        "sha": "01011f88ecc3accb3de36c99ccedc20a022852cc",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/af8d17be052f3a66607f7dd31c8bae1163c1c1a5/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/af8d17be052f3a66607f7dd31c8bae1163c1c1a5/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=af8d17be052f3a66607f7dd31c8bae1163c1c1a5",
        "patch": "@@ -1335,11 +1335,13 @@ UniValue decodepsbt(const JSONRPCRequest& request)\n     result.pushKV(\"tx\", tx_univ);\n \n     // Unknown data\n-    UniValue unknowns(UniValue::VOBJ);\n-    for (auto entry : psbtx.unknown) {\n-        unknowns.pushKV(HexStr(entry.first), HexStr(entry.second));\n+    {\n+        UniValue unknowns(UniValue::VOBJ);\n+        for (auto entry : psbtx.unknown) {\n+            unknowns.pushKV(HexStr(entry.first), HexStr(entry.second));\n+        }\n+        result.pushKV(\"unknown\", unknowns);\n     }\n-    result.pushKV(\"unknown\", unknowns);\n \n     // inputs\n     CAmount total_in = 0;"
      },
      {
        "sha": "af7556c2d159887e8124f3c47dd32846f3b18f13",
        "filename": "src/test/key_tests.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 8,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/af8d17be052f3a66607f7dd31c8bae1163c1c1a5/src/test/key_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/af8d17be052f3a66607f7dd31c8bae1163c1c1a5/src/test/key_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/key_tests.cpp?ref=af8d17be052f3a66607f7dd31c8bae1163c1c1a5",
        "patch": "@@ -30,6 +30,11 @@ static const std::string strAddressBad = \"1HV9Lc3sNHZxwj4Zk6fB38tEmBryq2cBiF\";\n \n BOOST_FIXTURE_TEST_SUITE(key_tests, BasicTestingSetup)\n \n+static uint256 SignMsg(const std::string& msg)\n+{\n+    return Hash(msg.begin(), msg.end());\n+}\n+\n BOOST_AUTO_TEST_CASE(key_test1)\n {\n     CKey key1  = DecodeSecret(strSecret1);\n@@ -75,8 +80,7 @@ BOOST_AUTO_TEST_CASE(key_test1)\n \n     for (int n=0; n<16; n++)\n     {\n-        std::string strMsg = strprintf(\"Very secret message %i: 11\", n);\n-        uint256 hashMsg = Hash(strMsg.begin(), strMsg.end());\n+        uint256 hashMsg = SignMsg(strprintf(\"Very secret message %i: 11\", n));\n \n         // normal signatures\n \n@@ -132,8 +136,7 @@ BOOST_AUTO_TEST_CASE(key_test1)\n     // test deterministic signing\n \n     std::vector<unsigned char> detsig, detsigc;\n-    std::string strMsg = \"Very deterministic message\";\n-    uint256 hashMsg = Hash(strMsg.begin(), strMsg.end());\n+    uint256 hashMsg = SignMsg(\"Very deterministic message\");\n     BOOST_CHECK(key1.Sign(hashMsg, detsig));\n     BOOST_CHECK(key1C.Sign(hashMsg, detsigc));\n     BOOST_CHECK(detsig == detsigc);\n@@ -156,8 +159,7 @@ BOOST_AUTO_TEST_CASE(key_signature_tests)\n {\n     // When entropy is specified, we should see at least one high R signature within 20 signatures\n     CKey key = DecodeSecret(strSecret1);\n-    std::string msg = \"A message to be signed\";\n-    uint256 msg_hash = Hash(msg.begin(), msg.end());\n+    uint256 msg_hash = SignMsg(\"A message to be signed\");\n     std::vector<unsigned char> sig;\n     bool found = false;\n \n@@ -177,8 +179,7 @@ BOOST_AUTO_TEST_CASE(key_signature_tests)\n     bool found_small = false;\n     for (int i = 0; i < 256; ++i) {\n         sig.clear();\n-        std::string msg = \"A message to be signed\" + std::to_string(i);\n-        msg_hash = Hash(msg.begin(), msg.end());\n+        msg_hash = SignMsg(\"A message to be signed\" + std::to_string(i));\n         BOOST_CHECK(key.Sign(msg_hash, sig));\n         found = sig[3] == 0x20;\n         BOOST_CHECK(sig.size() <= 70);"
      },
      {
        "sha": "57f8fc3e359970297943281ee8ea2a54edafb217",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/af8d17be052f3a66607f7dd31c8bae1163c1c1a5/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/af8d17be052f3a66607f7dd31c8bae1163c1c1a5/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=af8d17be052f3a66607f7dd31c8bae1163c1c1a5",
        "patch": "@@ -577,8 +577,8 @@ BerkeleyBatch::BerkeleyBatch(BerkeleyDatabase& database, const char* pszMode, bo\n             // be implemented, so no equality checks are needed at all. (Newer\n             // versions of BDB have an set_lk_exclusive method for this\n             // purpose, but the older version we use does not.)\n-            for (const auto& env : g_dbenvs) {\n-                CheckUniqueFileid(*env.second.lock().get(), strFilename, *pdb_temp, this->env->m_fileids[strFilename]);\n+            for (const auto& check_env : g_dbenvs) {\n+                CheckUniqueFileid(*check_env.second.lock().get(), strFilename, *pdb_temp, this->env->m_fileids[strFilename]);\n             }\n \n             pdb = pdb_temp.release();"
      },
      {
        "sha": "20afb1d4bd430620318e738b1b99a65f874c09d8",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 9,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/af8d17be052f3a66607f7dd31c8bae1163c1c1a5/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/af8d17be052f3a66607f7dd31c8bae1163c1c1a5/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=af8d17be052f3a66607f7dd31c8bae1163c1c1a5",
        "patch": "@@ -735,7 +735,6 @@ DBErrors CWallet::ReorderTransactions()\n     // Probably a bad idea to change the output of this\n \n     // First: get all CWalletTx into a sorted-by-time multimap.\n-    typedef std::multimap<int64_t, CWalletTx*> TxItems;\n     TxItems txByTime;\n \n     for (auto& entry : mapWallet)\n@@ -1013,6 +1012,13 @@ void CWallet::MarkInputsDirty(const CTransactionRef& tx)\n     }\n }\n \n+static CWalletTx& FetchTx(std::map<uint256, CWalletTx>& tx_map, const uint256& hash)\n+{\n+    auto it = tx_map.find(hash);\n+    assert(it != tx_map.end());\n+    return it->second;\n+}\n+\n bool CWallet::AbandonTransaction(interfaces::Chain::Lock& locked_chain, const uint256& hashTx)\n {\n     auto locked_chain_recursive = chain().lock();  // Temporary. Removed in upcoming lock cleanup\n@@ -1024,9 +1030,7 @@ bool CWallet::AbandonTransaction(interfaces::Chain::Lock& locked_chain, const ui\n     std::set<uint256> done;\n \n     // Can't mark abandoned if confirmed or in mempool\n-    auto it = mapWallet.find(hashTx);\n-    assert(it != mapWallet.end());\n-    CWalletTx& origtx = it->second;\n+    CWalletTx& origtx = FetchTx(mapWallet, hashTx);\n     if (origtx.GetDepthInMainChain(locked_chain) != 0 || origtx.InMempool()) {\n         return false;\n     }\n@@ -1037,9 +1041,7 @@ bool CWallet::AbandonTransaction(interfaces::Chain::Lock& locked_chain, const ui\n         uint256 now = *todo.begin();\n         todo.erase(now);\n         done.insert(now);\n-        auto it = mapWallet.find(now);\n-        assert(it != mapWallet.end());\n-        CWalletTx& wtx = it->second;\n+        CWalletTx& wtx = FetchTx(mapWallet, now);\n         int currentconfirm = wtx.GetDepthInMainChain(locked_chain);\n         // If the orig tx was not in block, none of its spends can be\n         assert(currentconfirm <= 0);\n@@ -2689,11 +2691,11 @@ bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std\n     int nBytes;\n     {\n         std::set<CInputCoin> setCoins;\n-        auto locked_chain = chain().lock();\n+        auto available_coins_locked_chain = chain().lock();\n         LOCK(cs_wallet);\n         {\n             std::vector<COutput> vAvailableCoins;\n-            AvailableCoins(*locked_chain, vAvailableCoins, true, &coin_control);\n+            AvailableCoins(*available_coins_locked_chain, vAvailableCoins, true, &coin_control);\n             CoinSelectionParams coin_selection_params; // Parameters for coin selection, init with dummy\n \n             // Create change script that will be used if we need change"
      }
    ]
  }
]