gavinandresen,2015-01-10T02:35:28Z,"ACK: code reviewed, and fixes unit test errors running on OSX with OpenSSL 1.0.1k\n",https://github.com/bitcoin/bitcoin/pull/5634#issuecomment-69434780,69434780,
sipa,2015-01-10T02:48:07Z,untested ACK\n,https://github.com/bitcoin/bitcoin/pull/5634#issuecomment-69435258,69435258,
jgarzik,2015-01-10T02:53:02Z,tested ACK\n,https://github.com/bitcoin/bitcoin/pull/5634#issuecomment-69435438,69435438,
theuni,2015-01-10T03:03:32Z,"@sipa afaik the iterator isn't guaranteed to be a pointer to the element there. Added an early return instead, you ok with that?\n",https://github.com/bitcoin/bitcoin/pull/5634#issuecomment-69435836,69435836,
gmaxwell,2015-01-10T03:21:31Z,Tested ACK. (tests and a invalidate/reconsider loop back to 338221. Reindexed without checkpoints from 0 to 198k (still in progress))\n\nAlso +1 Tested ACK from an anonymous tester on IRC.\n,https://github.com/bitcoin/bitcoin/pull/5634#issuecomment-69436676,69436676,
petertodd,2015-01-10T03:25:58Z,ut ACK\n,https://github.com/bitcoin/bitcoin/pull/5634#issuecomment-69436938,69436938,
fanquake,2015-01-10T04:04:51Z,"Tested ACK. As mentioned by Gavin, verified this fixes the unit tests on OSX when building with 1.0.1k\n",https://github.com/bitcoin/bitcoin/pull/5634#issuecomment-69439140,69439140,
ghost,2015-01-10T04:07:38Z,Un\n,https://github.com/bitcoin/bitcoin/pull/5634#issuecomment-69439222,69439222,
pstratem,2015-01-10T04:20:18Z,"tested ack, invalidated to 322000 reconsidered upto 327086 (still running)\n",https://github.com/bitcoin/bitcoin/pull/5634#issuecomment-69439752,69439752,
petertodd,2015-01-10T19:16:34Z,"tested ACK, -checkpoints=0 reindexes on testnet and mainnet.\n",https://github.com/bitcoin/bitcoin/pull/5634#issuecomment-69468017,69468017,
ghost,2015-01-11T03:15:02Z,"This patch serves no purpose other than providing a ""hack"" around a flaw in the Bitcoin core. Previously OpenSSL did not look for invalid DER encoded data with possible trailing garbage but in the latest version it does. The actual problem is that Bitcoin accepts invalid DER encoded signatures and this is completely unrelated to OpenSSL. Now you are taking the invalid-DER encoded data and DER enco",https://github.com/bitcoin/bitcoin/pull/5634#issuecomment-69481908,69481908,
jgarzik,2015-01-11T03:18:56Z,"@john-connor It is quite relevant in consensus systems, which must maintain bug-for-bug compatibility.  It is impossible to rewind history, and un-accept signatures that have been previously accepted.\n",https://github.com/bitcoin/bitcoin/pull/5634#issuecomment-69482002,69482002,
ghost,2015-01-11T03:21:19Z,"@jgarzik The bug is in Bitcoin, not OpenSSL. This patch does not fix the bug. It is a hack.\n",https://github.com/bitcoin/bitcoin/pull/5634#issuecomment-69482039,69482039,
ghost,2015-01-11T03:24:06Z,@jgarzik  I know the blockchain is permanently flawed because of this bug but gavin and everybody else is blaming OpenSSL it seems. Accept the fact that Bitcoin core has a major flaw in that it does not DER encode signatures. This is something that could become fatal to Bitcoin in the future if OpenSSL were to further enforce it's fully understood rules. Why not fix the problem and hard fork inste,https://github.com/bitcoin/bitcoin/pull/5634#issuecomment-69482103,69482103,
gmaxwell,2015-01-11T03:28:54Z,"@john-connor ""Trailing garbage"" is technically incorrect. What OpenSSL's ECDSA_verify previously supported was a very broad subset of BER.  For example, encoding R and S with leading zeros.  This is substantive, non-backwards compatible, arguably somewhat under-disclosed (seems that you were also unaware of the actual change, in that you refer to it as ""trailing garbage""), breaking API change from",https://github.com/bitcoin/bitcoin/pull/5634#issuecomment-69482202,69482202,
luke-jr,2015-01-11T03:31:49Z,"The flaw was that Bitcoin relied on non-consensus-safe code (OpenSSL) for consensus. If OpenSSL does not want to guarantee consensus-compatible behaviour for invalid signatures, that's fine for them, but it breaks Bitcoin. The plan has been to close this issue in Bitcoin for a long time, and it would have been nice if OpenSSL took care breaking compatibility everywhere in a mere bugfix release. No",https://github.com/bitcoin/bitcoin/pull/5634#issuecomment-69482252,69482252,
ghost,2015-01-11T03:32:41Z,"@gmaxwell Right, Bitcoin has a flaw in that it does not and never did perform DER encoding of it's signatures and had it done so we would not be having this discussion.\n",https://github.com/bitcoin/bitcoin/pull/5634#issuecomment-69482273,69482273,
ghost,2015-01-11T03:35:04Z,"@luke-jr Wrong, OpenSSL is fine and it's output would not change to have an effect on consensus in the Bitcoin system. Bitcoin is broke in this context. You can shift blame to OpenSSL if you wish.\n",https://github.com/bitcoin/bitcoin/pull/5634#issuecomment-69482318,69482318,
gmaxwell,2015-01-11T03:37:00Z,"> never did perform DER encoding \n\nI'm afraid your statements don't really make a lot of sense. Signatures emitted by Bitcoin core are correctly DER encoded.  OpenSSL provides a verify function which takes a string of bytes with an already encoded signature from the outside world. This is its documented behavior, and it's how OpenSSL itself uses it.  I would be surprised if you were able to find",https://github.com/bitcoin/bitcoin/pull/5634#issuecomment-69482346,69482346,
ghost,2015-01-11T03:39:25Z,"@gmaxwell Wrong, Bitcoin has failed to ensure it DER encodes the signature properly since day one. OpenSSL did not break anything but instead brought this to light. Now as a hack you are DER encoding the data so OpenSSL won't reject it when you send it to the library which is what should have always been done. Instead bitcoin passing a raw sha256 hash that may or may not be DER encoded. What makes",https://github.com/bitcoin/bitcoin/pull/5634#issuecomment-69482385,69482385,
jgarzik,2015-01-11T03:41:52Z,"@john-connor That is like saying ""HTTP failed to ensure...""   Bitcoin is a protocol.  Many different softwares generate signatures.  Bitcoin used OpenSSL to validate those signatures generated by $manywares.  That validation just changed without notice.\n",https://github.com/bitcoin/bitcoin/pull/5634#issuecomment-69482442,69482442,
ghost,2015-01-11T03:49:27Z,@jgarzik The validation did not change. It just became more strict. The fact that non-DER data is being passed into OpenSSL is Bitcoin's bug. This hack-around is wasting CPU cycles and should be fixed properly after a certain block # way in the future with an organized hard fork. This will make sure that Bitcoin doesn't break again in the future for similar reasons.\n,https://github.com/bitcoin/bitcoin/pull/5634#issuecomment-69482576,69482576,
petertodd,2015-01-11T03:54:41Z,"@john-connor More strict validation can definitely be a breaking change with security implications. The most obvious is DoS attacks, but in a system where a signature can be a right to something valuable it can result in monetary loss as well: http://www.mail-archive.com/bitcoin-development@lists.sourceforge.net/msg06686.html\n\nIn any case, in the future Bitcoin will likely move from OpenSSL to u",https://github.com/bitcoin/bitcoin/pull/5634#issuecomment-69482687,69482687,
ghost,2015-01-11T04:48:32Z,Where in code does Bitcoin core perform DER encoding of the signature properly?\n,https://github.com/bitcoin/bitcoin/pull/5634#issuecomment-69483612,69483612,
gmaxwell,2015-01-11T05:04:05Z,https://github.com/bitcoin/bitcoin/blob/master/src/secp256k1/src/ecdsa_impl.h#L90  (In the current tree)\n,https://github.com/bitcoin/bitcoin/pull/5634#issuecomment-69483874,69483874,
ghost,2015-01-11T06:06:05Z,"The problem with Bitcoin core is that secp256k1_ecdsa_sign_compact does NOT DER encode the output nor is it encoded into DER format at any point thereafter. This is why it became broken with the improved integrity checking that the latest OpenSSL brought. So ""compact signatures"" have always operated in a broken manner because of this flaw in the Bitcoin core. This bug does not have any relations t",https://github.com/bitcoin/bitcoin/pull/5634#issuecomment-69484895,69484895,
gmaxwell,2015-01-11T06:11:18Z,"@john-connor No, thats incorrect. sign_compact signatures are not used inside the Bitcoin network or blockchain, and are not verified (and _cannot_ be verified) by OpenSSL's ECDSA_verify.\n\nCompact signatures encode different data, and are fundamentally incompatible with that encoding. They're also completely unrelated to this (as mentioned, not used on the Bitcoin network), and nothing related t",https://github.com/bitcoin/bitcoin/pull/5634#issuecomment-69484979,69484979,
ghost,2015-01-11T06:15:54Z,"So please explain why signature verification is failing? What is wrong with them? You claim they are ""properly DER encoded"" so if that is true then what you claim happened couldn't have happened.\n\nSomething is strange here.\n",https://github.com/bitcoin/bitcoin/pull/5634#issuecomment-69485048,69485048,
gmaxwell,2015-01-11T06:25:31Z,"@john-connor There is nothing sloppy about it. I'm afraid you're operating outside of your expertise here. I'd generally be happy to educate you (or anyone else), but your continued antagonism is tiring.  In this case; You're complaining about not using DER encoding for data which cannot be DER encoded and is never passed to a function that expects DER encoding.\n\n> So please explain why signatur",https://github.com/bitcoin/bitcoin/pull/5634#issuecomment-69485200,69485200,
ghost,2015-01-11T06:41:45Z,"The Bitcoin core SHOULD remove this ""padding"" when it deserializes the data so the problem is immediately eliminated and does not make it into ""the machinery"". Any TLV network protocol is immune to this. My assumption is that if you try to fix the problem then you'd have to hard fork the network. Now the Bitcoin blockchain remains polluted with invalid signatures that can never be verified without",https://github.com/bitcoin/bitcoin/pull/5634#issuecomment-69485509,69485509,
gmaxwell,2015-01-11T06:50:24Z,"> The Bitcoin core SHOULD remove this ""padding"" when it deserializes the data\n\nThe deseralization is inside OpenSSL's ECDSA_verify, the padding in question is actually inside the DER signature after the length fields (its part of the numbers themselves). As your own comments above indicate, no one would expect to need to decode, then reencode (doing so would be arguably a bad practice), especial",https://github.com/bitcoin/bitcoin/pull/5634#issuecomment-69485630,69485630,
ghost,2015-01-11T08:19:27Z,My final words on this:\nhttp://vanillacoin.net/forums/viewtopic.php?pid=1967#p1967\n,https://github.com/bitcoin/bitcoin/pull/5634#issuecomment-69487114,69487114,
gmaxwell,2015-01-11T08:28:39Z,"Your claims there continue to be confused and incorrect. Notice above that I pointed out ""In the past the establish software""-- subsequently Bitcoin Core implemented default local node policy to not relay incorrectly encoded signatures (by testing the transactions with it's own strict DER decoder, https://github.com/bitcoin/bitcoin/blob/master/src/script/interpreter.cpp#L89) as the first step in a",https://github.com/bitcoin/bitcoin/pull/5634#issuecomment-69487272,69487272,
rnicoll,2015-01-12T00:46:43Z,"I may be misreading the OpenSSL documentation, however doesn't d2i_ECDSA_SIG always create a new ECDSA_SIG? So, given it's passed a reference to the pointer, the one allocated at https://github.com/bitcoin/bitcoin/pull/5634/files#diff-62cfc3439aea7461011d2394accbf82bR125 is in fact lost, if I'm reading this correctly?\n",https://github.com/bitcoin/bitcoin/pull/5634#issuecomment-69520362,69520362,
pstratem,2015-01-12T00:55:47Z,@rnicoll \n\nThe documentation does say that.... but openssl itself seems to be calling ECDSA_SIG_new() before d2i_ECDSA_SIG.\n\nPossibly there's a memory leak in openssl itself here.\n,https://github.com/bitcoin/bitcoin/pull/5634#issuecomment-69520719,69520719,
gmaxwell,2015-01-12T01:15:46Z,"@rnicoll Objectively, the current version does not leak (I tested with valgrind.) OpenSSL itself allocates first, so preserving its own behavior seemed to be conservative. The code in question appears to check the nullness of the pointer and allocates only if null, meaning the documentation is actually dangerously incorrect (since if you believed the documentation you may send uninitialized memory",https://github.com/bitcoin/bitcoin/pull/5634#issuecomment-69521437,69521437,
rnicoll,2015-01-12T01:17:50Z,"@gmaxwell Great, thanks for checking.\n",https://github.com/bitcoin/bitcoin/pull/5634#issuecomment-69521523,69521523,
pstratem,2015-01-12T01:19:40Z,d2i_ECDSA_SIG does indeed segfault if passed an uninitialized pointer.\n,https://github.com/bitcoin/bitcoin/pull/5634#issuecomment-69521611,69521611,
pstratem,2015-01-12T01:20:47Z,https://gist.github.com/pstratem/7d31cf5f35d78640247f\n,https://github.com/bitcoin/bitcoin/pull/5634#issuecomment-69521662,69521662,
abbradar,2015-02-02T16:33:54Z,"Would there be a new point release or a patch for 0.9.3? This cannot be cleanly applied to 0.9.3 as-is (`ecwrapper.cpp` is missing), and I thought it would be better to ask anyway to avoid blindly patching critical piece of software.\n",https://github.com/bitcoin/bitcoin/pull/5634#issuecomment-72488047,72488047,
laanwj,2015-02-02T16:46:59Z,"Try checking out and/or cherry-picking from the v0.9.4 tag, it has the same changes.\n",https://github.com/bitcoin/bitcoin/pull/5634#issuecomment-72490697,72490697,
abbradar,2015-02-02T16:55:57Z,I'll just checkout v0.9.4 then. Thanks!\n,https://github.com/bitcoin/bitcoin/pull/5634#issuecomment-72492490,72492490,
sipa,2015-01-10T02:46:17Z,"use vchSig.begin(); don't use [0] unless it's guaranteed that the length is at least 1.\n\nEDIT: not introduced by your commit, feel free to ignore, but it apparently upsets some MSVC debug mode.\n",https://github.com/bitcoin/bitcoin/pull/5634#discussion_r22755574,22755574,src/ecwrapper.cpp
