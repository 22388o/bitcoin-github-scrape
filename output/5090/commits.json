[
  {
    "sha": "a5ae0c8c2ff24eea678d74437fca0ba3b408b423",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNWFlMGM4YzJmZjI0ZWVhNjc4ZDc0NDM3ZmNhMGJhM2I0MDhiNDIz",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2014-10-19T22:38:30Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2014-10-19T23:43:42Z"
      },
      "message": "CValidationState: Track state as inconclusive until successfully connected",
      "tree": {
        "sha": "b2b356987bff5238b30f0f25d993ab0f41ec4f92",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b2b356987bff5238b30f0f25d993ab0f41ec4f92"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a5ae0c8c2ff24eea678d74437fca0ba3b408b423",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a5ae0c8c2ff24eea678d74437fca0ba3b408b423",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a5ae0c8c2ff24eea678d74437fca0ba3b408b423",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a5ae0c8c2ff24eea678d74437fca0ba3b408b423/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "84d13eef883769451ba9f77b56d9738d24474d5c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/84d13eef883769451ba9f77b56d9738d24474d5c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/84d13eef883769451ba9f77b56d9738d24474d5c"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 14,
      "deletions": 3
    },
    "files": [
      {
        "sha": "569b652384e3bb5eccc5e7e5229530edc082e475",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5ae0c8c2ff24eea678d74437fca0ba3b408b423/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5ae0c8c2ff24eea678d74437fca0ba3b408b423/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=a5ae0c8c2ff24eea678d74437fca0ba3b408b423",
        "patch": "@@ -1696,6 +1696,8 @@ bool ConnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, C\n     int64_t nTime2 = GetTimeMicros(); nTimeVerify += nTime2 - nTimeStart;\n     LogPrint(\"bench\", \"    - Verify %u txins: %.2fms (%.3fms/txin) [%.2fs]\\n\", nInputs - 1, 0.001 * (nTime2 - nTimeStart), nInputs <= 1 ? 0 : 0.001 * (nTime2 - nTimeStart) / (nInputs-1), nTimeVerify * 0.000001);\n \n+    // The block has been fully checked for validity at this point\n+    state.Conclude();\n     if (fJustCheck)\n         return true;\n "
      },
      {
        "sha": "62d00baa0c8c908d041d31422bba459398fa0aa7",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 12,
        "deletions": 3,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5ae0c8c2ff24eea678d74437fca0ba3b408b423/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5ae0c8c2ff24eea678d74437fca0ba3b408b423/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=a5ae0c8c2ff24eea678d74437fca0ba3b408b423",
        "patch": "@@ -519,6 +519,7 @@ class CBlockFileInfo\n class CValidationState {\n private:\n     enum mode_state {\n+        MODE_INCONCLUSIVE,  // everything ok, so far...\n         MODE_VALID,   // everything ok\n         MODE_INVALID, // network rule violation (DoS value may be set)\n         MODE_ERROR,   // run-time error\n@@ -528,7 +529,7 @@ class CValidationState {\n     unsigned char chRejectCode;\n     bool corruptionPossible;\n public:\n-    CValidationState() : mode(MODE_VALID), nDoS(0), chRejectCode(0), corruptionPossible(false) {}\n+    CValidationState() : mode(MODE_INCONCLUSIVE), nDoS(0), chRejectCode(0), corruptionPossible(false) {}\n     bool DoS(int level, bool ret = false,\n              unsigned char chRejectCodeIn=0, std::string strRejectReasonIn=\"\",\n              bool corruptionIn=false) {\n@@ -541,12 +542,17 @@ class CValidationState {\n         mode = MODE_INVALID;\n         return ret;\n     }\n+    bool Conclude() {\n+        if (!IsConclusive())\n+            mode = MODE_VALID;\n+        return true;\n+    }\n     bool Invalid(bool ret = false,\n                  unsigned char _chRejectCode=0, std::string _strRejectReason=\"\") {\n         return DoS(0, ret, _chRejectCode, _strRejectReason);\n     }\n     bool Error(std::string strRejectReasonIn=\"\") {\n-        if (mode == MODE_VALID)\n+        if (mode == MODE_INCONCLUSIVE || mode == MODE_VALID)\n             strRejectReason = strRejectReasonIn;\n         mode = MODE_ERROR;\n         return false;\n@@ -555,8 +561,11 @@ class CValidationState {\n         AbortNode(msg);\n         return Error(msg);\n     }\n+    bool IsConclusive() const {\n+        return mode != MODE_INCONCLUSIVE;\n+    }\n     bool IsValid() const {\n-        return mode == MODE_VALID;\n+        return mode == MODE_VALID || mode == MODE_INCONCLUSIVE;\n     }\n     bool IsInvalid() const {\n         return mode == MODE_INVALID;"
      }
    ]
  },
  {
    "sha": "e5d66f3e3de7edc9a78e381708ac8f6234ecc15c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNWQ2NmYzZTNkZTdlZGM5YTc4ZTM4MTcwOGFjOGY2MjM0ZWNjMTVj",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2014-10-19T23:09:50Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2014-10-19T23:43:43Z"
      },
      "message": "Abstract context-dependent block checking from acceptance",
      "tree": {
        "sha": "65c2a5d6d8815e51e4e5f9ce7ac3b323c601071b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/65c2a5d6d8815e51e4e5f9ce7ac3b323c601071b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e5d66f3e3de7edc9a78e381708ac8f6234ecc15c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e5d66f3e3de7edc9a78e381708ac8f6234ecc15c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e5d66f3e3de7edc9a78e381708ac8f6234ecc15c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e5d66f3e3de7edc9a78e381708ac8f6234ecc15c/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a5ae0c8c2ff24eea678d74437fca0ba3b408b423",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a5ae0c8c2ff24eea678d74437fca0ba3b408b423",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a5ae0c8c2ff24eea678d74437fca0ba3b408b423"
      }
    ],
    "stats": {
      "total": 65,
      "additions": 42,
      "deletions": 23
    },
    "files": [
      {
        "sha": "03ca83f56d3d6c61f02f1cc9afd6ee142f9f674f",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 38,
        "deletions": 23,
        "changes": 61,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e5d66f3e3de7edc9a78e381708ac8f6234ecc15c/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e5d66f3e3de7edc9a78e381708ac8f6234ecc15c/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=e5d66f3e3de7edc9a78e381708ac8f6234ecc15c",
        "patch": "@@ -2326,7 +2326,7 @@ bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW, bo\n     return true;\n }\n \n-bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, CBlockIndex** ppindex)\n+bool CtxCheckBlockHeader(const CBlockHeader& block, CValidationState& state, CBlockIndex** ppindex)\n {\n     AssertLockHeld(cs_main);\n     // Check for duplicate\n@@ -2392,6 +2392,42 @@ bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, CBloc\n     return true;\n }\n \n+bool CtxCheckBlock(const CBlock& block, CValidationState& state, CBlockIndex*& pindexPrev)\n+{\n+    const int nHeight = pindexPrev->nHeight + 1;\n+\n+    // Check that all transactions are finalized\n+    BOOST_FOREACH(const CTransaction& tx, block.vtx)\n+        if (!IsFinalTx(tx, nHeight, block.GetBlockTime())) {\n+            return state.DoS(10, error(\"AcceptBlock() : contains a non-final transaction\"),\n+                             REJECT_INVALID, \"bad-txns-nonfinal\");\n+        }\n+\n+    // Enforce block.nVersion=2 rule that the coinbase starts with serialized block height\n+    // if 750 of the last 1,000 blocks are version 2 or greater (51/100 if testnet):\n+    if (block.nVersion >= 2 && \n+        CBlockIndex::IsSuperMajority(2, pindexPrev, Params().EnforceBlockUpgradeMajority()))\n+    {\n+        CScript expect = CScript() << nHeight;\n+        if (block.vtx[0].vin[0].scriptSig.size() < expect.size() ||\n+            !std::equal(expect.begin(), expect.end(), block.vtx[0].vin[0].scriptSig.begin())) {\n+            return state.DoS(100, error(\"AcceptBlock() : block height mismatch in coinbase\"), REJECT_INVALID, \"bad-cb-height\");\n+        }\n+    }\n+\n+    return true;\n+}\n+\n+bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, CBlockIndex** ppindex)\n+{\n+    if (!CtxCheckBlockHeader(block, state, ppindex))\n+        return false;\n+\n+    if (!*ppindex)\n+        *ppindex = AddToBlockIndex(block);\n+    return true;\n+}\n+\n bool AcceptBlock(CBlock& block, CValidationState& state, CBlockIndex** ppindex, CDiskBlockPos* dbp)\n {\n     AssertLockHeld(cs_main);\n@@ -2407,7 +2443,7 @@ bool AcceptBlock(CBlock& block, CValidationState& state, CBlockIndex** ppindex,\n         return true;\n     }\n \n-    if (!CheckBlock(block, state)) {\n+    if ((!CheckBlock(block, state)) || !CtxCheckBlock(block, state, pindex->pprev)) {\n         if (state.IsInvalid() && !state.CorruptionPossible()) {\n             pindex->nStatus |= BLOCK_FAILED_VALID;\n         }\n@@ -2416,27 +2452,6 @@ bool AcceptBlock(CBlock& block, CValidationState& state, CBlockIndex** ppindex,\n \n     int nHeight = pindex->nHeight;\n \n-    // Check that all transactions are finalized\n-    BOOST_FOREACH(const CTransaction& tx, block.vtx)\n-        if (!IsFinalTx(tx, nHeight, block.GetBlockTime())) {\n-            pindex->nStatus |= BLOCK_FAILED_VALID;\n-            return state.DoS(10, error(\"AcceptBlock() : contains a non-final transaction\"),\n-                             REJECT_INVALID, \"bad-txns-nonfinal\");\n-        }\n-\n-    // Enforce block.nVersion=2 rule that the coinbase starts with serialized block height\n-    // if 750 of the last 1,000 blocks are version 2 or greater (51/100 if testnet):\n-    if (block.nVersion >= 2 && \n-        CBlockIndex::IsSuperMajority(2, pindex->pprev, Params().EnforceBlockUpgradeMajority()))\n-    {\n-        CScript expect = CScript() << nHeight;\n-        if (block.vtx[0].vin[0].scriptSig.size() < expect.size() ||\n-            !std::equal(expect.begin(), expect.end(), block.vtx[0].vin[0].scriptSig.begin())) {\n-            pindex->nStatus |= BLOCK_FAILED_VALID;\n-            return state.DoS(100, error(\"AcceptBlock() : block height mismatch in coinbase\"), REJECT_INVALID, \"bad-cb-height\");\n-        }\n-    }\n-\n     // Write block to history file\n     try {\n         unsigned int nBlockSize = ::GetSerializeSize(block, SER_DISK, CLIENT_VERSION);"
      },
      {
        "sha": "3d609abe78f1f9a8f8cd6e6050795164d7e220af",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e5d66f3e3de7edc9a78e381708ac8f6234ecc15c/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e5d66f3e3de7edc9a78e381708ac8f6234ecc15c/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=e5d66f3e3de7edc9a78e381708ac8f6234ecc15c",
        "patch": "@@ -454,6 +454,10 @@ bool ConnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, C\n bool CheckBlockHeader(const CBlockHeader& block, CValidationState& state, bool fCheckPOW = true);\n bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n \n+// Context-dependent validity checks\n+bool CtxCheckBlockHeader(const CBlockHeader& block, CValidationState& state, CBlockIndex **ppindex= NULL);\n+bool CtxCheckBlock(const CBlock& block, CValidationState& state, CBlockIndex*& pindexPrev);\n+\n // Store block on disk\n // if dbp is provided, the file is known to already reside on disk\n bool AcceptBlock(CBlock& block, CValidationState& state, CBlockIndex **pindex, CDiskBlockPos* dbp = NULL);"
      }
    ]
  },
  {
    "sha": "e10aa0403cd3a27abc02161343af54d8a3edc2f7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMTBhYTA0MDNjZDNhMjdhYmMwMjE2MTM0M2FmNTRkOGEzZWRjMmY3",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2014-10-15T02:29:48Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2014-10-20T01:00:33Z"
      },
      "message": "Bugfix: Track final validation of blocks through ActivateBestChain, restoring the expectation that ProcessBlock gives some kind of final CValidationState for blocks\n\nShould fix submitblock returning false positives (issue #5083)",
      "tree": {
        "sha": "6415934227586207b6c718e744c7b2e16f0b20eb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6415934227586207b6c718e744c7b2e16f0b20eb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e10aa0403cd3a27abc02161343af54d8a3edc2f7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e10aa0403cd3a27abc02161343af54d8a3edc2f7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e10aa0403cd3a27abc02161343af54d8a3edc2f7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e10aa0403cd3a27abc02161343af54d8a3edc2f7/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e5d66f3e3de7edc9a78e381708ac8f6234ecc15c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e5d66f3e3de7edc9a78e381708ac8f6234ecc15c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e5d66f3e3de7edc9a78e381708ac8f6234ecc15c"
      }
    ],
    "stats": {
      "total": 49,
      "additions": 42,
      "deletions": 7
    },
    "files": [
      {
        "sha": "860785d72014e7cf65d5693cf8ecebaa000e823c",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 6,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e10aa0403cd3a27abc02161343af54d8a3edc2f7/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e10aa0403cd3a27abc02161343af54d8a3edc2f7/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=e10aa0403cd3a27abc02161343af54d8a3edc2f7",
        "patch": "@@ -1957,7 +1957,12 @@ static CBlockIndex* FindMostWorkChain() {\n \n // Try to make some progress towards making pindexMostWork the active block.\n // pblock is either NULL or a pointer to a CBlock corresponding to pindexMostWork.\n-static bool ActivateBestChainStep(CValidationState &state, CBlockIndex *pindexMostWork, CBlock *pblock) {\n+// If phashSpecific is specified, pstateSpecific will be updated if the block\n+// with that hash is checked. It may also be updated if an ancestor block\n+// connection fails (but this is not guaranteed, and will not happen if the\n+// ancestor fails when trying to connect some other block). If the ancestor\n+// block is invalid, the rejection reason will be prepended by \"prevblk-\".\n+static bool ActivateBestChainStep(CValidationState &state, CBlockIndex *pindexMostWork, CBlock *pblock, const uint256 *phashSpecific, CValidationState *pstateSpecific) {\n     AssertLockHeld(cs_main);\n     bool fInvalidFound = false;\n     const CBlockIndex *pindexOldTip = chainActive.Tip();\n@@ -1980,20 +1985,25 @@ static bool ActivateBestChainStep(CValidationState &state, CBlockIndex *pindexMo\n     vpindexToConnect.clear();\n     vpindexToConnect.reserve(nTargetHeight - nHeight);\n     CBlockIndex *pindexIter = pindexMostWork->GetAncestor(nTargetHeight);\n+    CBlockIndex *pindexSpecific = NULL;\n     while (pindexIter && pindexIter->nHeight != nHeight) {\n+        if (phashSpecific && pindexIter->GetBlockHash() == *phashSpecific)\n+            pindexSpecific = pindexIter;\n         vpindexToConnect.push_back(pindexIter);\n         pindexIter = pindexIter->pprev;\n     }\n     nHeight = nTargetHeight;\n \n     // Connect new blocks.\n     BOOST_REVERSE_FOREACH(CBlockIndex *pindexConnect, vpindexToConnect) {\n+        state = CValidationState();\n         if (!ConnectTip(state, pindexConnect, pindexConnect == pindexMostWork ? pblock : NULL)) {\n+            if (pindexSpecific)\n+                pstateSpecific->MergeState(state, (pindexConnect != pindexSpecific) ? \"prevblk-\" : \"\");\n             if (state.IsInvalid()) {\n                 // The block violates a consensus rule.\n                 if (!state.CorruptionPossible())\n                     InvalidChainFound(vpindexToConnect.back());\n-                state = CValidationState();\n                 fInvalidFound = true;\n                 fContinue = false;\n                 break;\n@@ -2002,6 +2012,12 @@ static bool ActivateBestChainStep(CValidationState &state, CBlockIndex *pindexMo\n                 return false;\n             }\n         } else {\n+            if (pindexConnect == pindexSpecific)\n+            {\n+                pstateSpecific->MergeState(state);\n+                pindexSpecific = NULL;\n+            }\n+\n             // Delete all entries in setBlockIndexCandidates that are worse than our new current block.\n             // Note that we can't delete the current block itself, as we may need to return to it later in case a\n             // reorganization to a better block fails.\n@@ -2035,7 +2051,11 @@ static bool ActivateBestChainStep(CValidationState &state, CBlockIndex *pindexMo\n // Make the best chain active, in multiple steps. The result is either failure\n // or an activated best chain. pblock is either NULL or a pointer to a block\n // that is already loaded (to avoid loading it again from disk).\n-bool ActivateBestChain(CValidationState &state, CBlock *pblock) {\n+// If phashSpecific is specified, pstateSpecific will be updated according to\n+// the usual CValidationState biases based only on ActivateBestChainStep's\n+// logic. Previous state of pstateSpecific is taken into consideration, but if\n+// the block is not checked, it will be set to Inconclusive.\n+bool ActivateBestChain(CValidationState &state, CBlock *pblock, const uint256 *phashSpecific, CValidationState *pstateSpecific) {\n     CBlockIndex *pindexNewTip = NULL;\n     CBlockIndex *pindexMostWork = NULL;\n     do {\n@@ -2050,7 +2070,7 @@ bool ActivateBestChain(CValidationState &state, CBlock *pblock) {\n             if (pindexMostWork == NULL || pindexMostWork == chainActive.Tip())\n                 return true;\n \n-            if (!ActivateBestChainStep(state, pindexMostWork, pblock && pblock->GetHash() == pindexMostWork->GetBlockHash() ? pblock : NULL))\n+            if (!ActivateBestChainStep(state, pindexMostWork, pblock && pblock->GetHash() == pindexMostWork->GetBlockHash() ? pblock : NULL, phashSpecific, pstateSpecific))\n                 return false;\n \n             pindexNewTip = chainActive.Tip();\n@@ -2556,10 +2576,12 @@ bool ProcessBlock(CValidationState &state, CNode* pfrom, CBlock* pblock, CDiskBl\n             return error(\"ProcessBlock() : AcceptBlock FAILED\");\n     }\n \n-    if (!ActivateBestChain(state, pblock))\n+    const uint256& hash = pblock->GetHash();\n+    CValidationState stateActivation;\n+    if (!ActivateBestChain(stateActivation, pblock, &hash, &state))\n         return error(\"ProcessBlock() : ActivateBestChain failed\");\n \n-    return true;\n+    return state.IsValid();\n }\n \n "
      },
      {
        "sha": "4694c2a3845c0ce1d738596dbff5cc6e6829a314",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 14,
        "deletions": 1,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e10aa0403cd3a27abc02161343af54d8a3edc2f7/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e10aa0403cd3a27abc02161343af54d8a3edc2f7/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=e10aa0403cd3a27abc02161343af54d8a3edc2f7",
        "patch": "@@ -181,7 +181,7 @@ std::string GetWarnings(std::string strFor);\n /** Retrieve a transaction (from memory pool, or from disk, if possible) */\n bool GetTransaction(const uint256 &hash, CTransaction &tx, uint256 &hashBlock, bool fAllowSlow = false);\n /** Find the best known block, and make it the tip of the block chain */\n-bool ActivateBestChain(CValidationState &state, CBlock *pblock = NULL);\n+bool ActivateBestChain(CValidationState &state, CBlock *pblock = NULL, const uint256 *phashSpecific = NULL, CValidationState *pstateSpecific = NULL);\n CAmount GetBlockValue(int nHeight, const CAmount& nFees);\n \n /** Create a new block index entry for a given block hash */\n@@ -565,6 +565,19 @@ class CValidationState {\n         AbortNode(msg);\n         return Error(msg);\n     }\n+    void MergeState(const CValidationState& stateOther, const std::string& strPrependInvalidReason = \"\") {\n+        int nDoS;\n+        if (stateOther.IsInvalid(nDoS))\n+        {\n+            DoS(nDoS, false, stateOther.GetRejectCode(), strPrependInvalidReason + stateOther.GetRejectReason(), stateOther.CorruptionPossible());\n+        }\n+        else\n+        if (stateOther.IsError())\n+            Error(stateOther.GetRejectReason());\n+        else\n+        if (stateOther.IsConclusive())\n+            Conclude();\n+    }\n     bool IsConclusive() const {\n         return mode != MODE_INCONCLUSIVE;\n     }"
      }
    ]
  },
  {
    "sha": "03aafd8cd5a246af9abf6156c29b74d92ffcb212",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowM2FhZmQ4Y2Q1YTI0NmFmOWFiZjYxNTZjMjliNzRkOTJmZmNiMjEy",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2014-10-16T03:50:33Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2014-10-20T01:00:33Z"
      },
      "message": "CreateNewBlock and miner_tests: Check generated template is valid by ProcessBlockChecks (and therefore also AcceptBlockChecks)",
      "tree": {
        "sha": "50df73d6feb31f1b4679dbeeab9f9cf34dcf88c8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/50df73d6feb31f1b4679dbeeab9f9cf34dcf88c8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/03aafd8cd5a246af9abf6156c29b74d92ffcb212",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/03aafd8cd5a246af9abf6156c29b74d92ffcb212",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/03aafd8cd5a246af9abf6156c29b74d92ffcb212",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/03aafd8cd5a246af9abf6156c29b74d92ffcb212/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e10aa0403cd3a27abc02161343af54d8a3edc2f7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e10aa0403cd3a27abc02161343af54d8a3edc2f7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e10aa0403cd3a27abc02161343af54d8a3edc2f7"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 10,
      "deletions": 0
    },
    "files": [
      {
        "sha": "c9d0a8b02b7a5a85894c8902ce7099580946d670",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03aafd8cd5a246af9abf6156c29b74d92ffcb212/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03aafd8cd5a246af9abf6156c29b74d92ffcb212/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=03aafd8cd5a246af9abf6156c29b74d92ffcb212",
        "patch": "@@ -323,8 +323,18 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n         indexDummy.nHeight = pindexPrev->nHeight + 1;\n         CCoinsViewCache viewNew(pcoinsTip);\n         CValidationState state;\n+        // NOTE: CheckBlockHeader is called by CheckBlock\n+        // NOTE: CtxCheckBlockHeader only assigns ppindex, which we don't need/want\n+        if (!CtxCheckBlockHeader(*pblock, state, NULL))\n+            throw std::runtime_error(\"CreateNewBlock() : CtxCheckBlockHeader failed\");\n+        if (!CheckBlock(*pblock, state, false, false))\n+            throw std::runtime_error(\"CreateNewBlock() : CheckBlock failed\");\n+        if (!CtxCheckBlock(*pblock, state, pindexPrev))\n+            throw std::runtime_error(\"CreateNewBlock() : CtxCheckBlock failed\");\n         if (!ConnectBlock(*pblock, state, &indexDummy, viewNew, true))\n             throw std::runtime_error(\"CreateNewBlock() : ConnectBlock failed\");\n+        if (!(state.IsValid() && state.IsConclusive()))\n+            throw std::runtime_error(\"CreateNewBlock() : State is not conclusively valid\");\n     }\n \n     return pblocktemplate.release();"
      }
    ]
  }
]