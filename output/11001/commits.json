[
  {
    "sha": "5e35cd94c18d81cbcc7fdece484822841ded402c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZTM1Y2Q5NGMxOGQ4MWNiY2M3ZmRlY2U0ODQ4MjI4NDFkZWQ0MDJj",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-08-07T15:37:49Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-08-07T15:37:54Z"
      },
      "message": "[tests] Test disconnecting unsupported service bits logic.\n\nIn v0.15, we disconnect nodes that send us version messages with\nunsupported service bits (1 << 5 and 1 << 7). This commit adds a test\nthat bitcoind will disconnect those nodes before August 1st 2018, and won't\ndisconnect those nodes after August 1st 2018.",
      "tree": {
        "sha": "de0d0ce2e1585fd0e26a2585f6de99870b9a33ef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/de0d0ce2e1585fd0e26a2585f6de99870b9a33ef"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5e35cd94c18d81cbcc7fdece484822841ded402c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e35cd94c18d81cbcc7fdece484822841ded402c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5e35cd94c18d81cbcc7fdece484822841ded402c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e35cd94c18d81cbcc7fdece484822841ded402c/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa646369489d5655ac187f2a9e151317829581df",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa646369489d5655ac187f2a9e151317829581df",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa646369489d5655ac187f2a9e151317829581df"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 35,
      "deletions": 1
    },
    "files": [
      {
        "sha": "5611c876ae352fe58279b26afda827e8c00c67b5",
        "filename": "test/functional/p2p-leaktests.py",
        "status": "modified",
        "additions": 33,
        "deletions": 1,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e35cd94c18d81cbcc7fdece484822841ded402c/test/functional/p2p-leaktests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e35cd94c18d81cbcc7fdece484822841ded402c/test/functional/p2p-leaktests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-leaktests.py?ref=5e35cd94c18d81cbcc7fdece484822841ded402c",
        "patch": "@@ -9,7 +9,10 @@\n \n This test connects to a node and sends it a few messages, trying to intice it\n into sending us something it shouldn't.\n-\"\"\"\n+\n+Also test that nodes that send unsupported service bits to bitcoind are disconnected\n+and don't receive a VERACK. Unsupported service bits are currently 1 << 5 and\n+1 << 7 (until August 1st 2018).\"\"\"\n \n from test_framework.mininode import *\n from test_framework.test_framework import BitcoinTestFramework\n@@ -98,20 +101,29 @@ def run_test(self):\n         no_version_bannode = CNodeNoVersionBan()\n         no_version_idlenode = CNodeNoVersionIdle()\n         no_verack_idlenode = CNodeNoVerackIdle()\n+        unsupported_service_bit5_node = CLazyNode()\n+        unsupported_service_bit7_node = CLazyNode()\n \n+        self.nodes[0].setmocktime(1501545600)  # August 1st 2017\n         connections = []\n         connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], no_version_bannode, send_version=False))\n         connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], no_version_idlenode, send_version=False))\n         connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], no_verack_idlenode))\n+        connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], unsupported_service_bit5_node, services=NODE_NETWORK|NODE_UNSUPPORTED_SERVICE_BIT_5))\n+        connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], unsupported_service_bit7_node, services=NODE_NETWORK|NODE_UNSUPPORTED_SERVICE_BIT_7))\n         no_version_bannode.add_connection(connections[0])\n         no_version_idlenode.add_connection(connections[1])\n         no_verack_idlenode.add_connection(connections[2])\n+        unsupported_service_bit5_node.add_connection(connections[3])\n+        unsupported_service_bit7_node.add_connection(connections[4])\n \n         NetworkThread().start()  # Start up network handling in another thread\n \n         assert wait_until(lambda: no_version_bannode.ever_connected, timeout=10)\n         assert wait_until(lambda: no_version_idlenode.ever_connected, timeout=10)\n         assert wait_until(lambda: no_verack_idlenode.version_received, timeout=10)\n+        assert wait_until(lambda: unsupported_service_bit5_node.ever_connected, timeout=10)\n+        assert wait_until(lambda: unsupported_service_bit7_node.ever_connected, timeout=10)\n \n         # Mine a block and make sure that it's not sent to the connected nodes\n         self.nodes[0].generate(1)\n@@ -122,12 +134,32 @@ def run_test(self):\n         #This node should have been banned\n         assert not no_version_bannode.connected\n \n+        # These nodes should have been disconnected\n+        assert not unsupported_service_bit5_node.connected\n+        assert not unsupported_service_bit7_node.connected\n+\n         [conn.disconnect_node() for conn in connections]\n \n         # Make sure no unexpected messages came in\n         assert(no_version_bannode.unexpected_msg == False)\n         assert(no_version_idlenode.unexpected_msg == False)\n         assert(no_verack_idlenode.unexpected_msg == False)\n+        assert not unsupported_service_bit5_node.unexpected_msg\n+        assert not unsupported_service_bit7_node.unexpected_msg\n+\n+        self.log.info(\"Service bits 5 and 7 are allowed after August 1st 2018\")\n+        self.nodes[0].setmocktime(1533168000)  # August 2nd 2018\n+\n+        allowed_service_bit5_node = NodeConnCB()\n+        allowed_service_bit7_node = NodeConnCB()\n+\n+        connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], allowed_service_bit5_node, services=NODE_NETWORK|NODE_UNSUPPORTED_SERVICE_BIT_5))\n+        connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], allowed_service_bit7_node, services=NODE_NETWORK|NODE_UNSUPPORTED_SERVICE_BIT_7))\n+        allowed_service_bit5_node.add_connection(connections[5])\n+        allowed_service_bit7_node.add_connection(connections[6])\n+\n+        assert wait_until(lambda: allowed_service_bit5_node.message_count[\"verack\"], timeout=10)\n+        assert wait_until(lambda: allowed_service_bit7_node.message_count[\"verack\"], timeout=10)\n \n if __name__ == '__main__':\n     P2PLeakTest().main()"
      },
      {
        "sha": "a4d85501e7e38f0db16ad049e6a561fde8c45787",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e35cd94c18d81cbcc7fdece484822841ded402c/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e35cd94c18d81cbcc7fdece484822841ded402c/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=5e35cd94c18d81cbcc7fdece484822841ded402c",
        "patch": "@@ -51,6 +51,8 @@\n NODE_GETUTXO = (1 << 1)\n NODE_BLOOM = (1 << 2)\n NODE_WITNESS = (1 << 3)\n+NODE_UNSUPPORTED_SERVICE_BIT_5 = (1 << 5)\n+NODE_UNSUPPORTED_SERVICE_BIT_7 = (1 << 7)\n \n logger = logging.getLogger(\"TestFramework.mininode\")\n "
      }
    ]
  }
]