[
  {
    "sha": "d9d9ba1a28e5ce36b359f8ccfbae3e0314139f99",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkOWQ5YmExYTI4ZTVjZTM2YjM1OWY4Y2NmYmFlM2UwMzE0MTM5Zjk5",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-04-12T18:43:41Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-10-11T15:11:02Z"
      },
      "message": "[rpc] [wallet] Check fee before submitting to mempool",
      "tree": {
        "sha": "56b8bcf69275487c57ac4be365b02feb2983f740",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/56b8bcf69275487c57ac4be365b02feb2983f740"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d9d9ba1a28e5ce36b359f8ccfbae3e0314139f99",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9d9ba1a28e5ce36b359f8ccfbae3e0314139f99",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d9d9ba1a28e5ce36b359f8ccfbae3e0314139f99",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9d9ba1a28e5ce36b359f8ccfbae3e0314139f99/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "82615876109845a7fa0d12941d13c37f34f8d286",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82615876109845a7fa0d12941d13c37f34f8d286",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/82615876109845a7fa0d12941d13c37f34f8d286"
      }
    ],
    "stats": {
      "total": 113,
      "additions": 101,
      "deletions": 12
    },
    "files": [
      {
        "sha": "703cd9a7690d7561d50202f90ad0e942fd83b6b6",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 48,
        "deletions": 0,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9d9ba1a28e5ce36b359f8ccfbae3e0314139f99/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9d9ba1a28e5ce36b359f8ccfbae3e0314139f99/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=d9d9ba1a28e5ce36b359f8ccfbae3e0314139f99",
        "patch": "@@ -28,6 +28,7 @@\n #include <script/signingprovider.h>\n #include <script/standard.h>\n #include <uint256.h>\n+#include <util/fees.h>\n #include <util/moneystr.h>\n #include <util/strencodings.h>\n #include <validation.h>\n@@ -817,6 +818,28 @@ static UniValue sendrawtransaction(const JSONRPCRequest& request)\n     int64_t virtual_size = GetVirtualTransactionSize(*tx);\n     CAmount max_raw_tx_fee = max_raw_tx_fee_rate.GetFee(virtual_size);\n \n+    if (max_raw_tx_fee > 0) {\n+        // Check that we're not trying to send a transaction with a too-high fee\n+        // Fetch previous transactions (inputs):\n+        std::map<COutPoint, Coin> coins_map;\n+        for (const CTxIn& txin : tx->vin) {\n+            coins_map[txin.prevout]; // Create empty map entry keyed by prevout.\n+        }\n+        FindCoins(coins_map);\n+\n+        std::vector<Coin> coins;\n+        for (auto coinmap: coins_map) {\n+            coins.push_back(coinmap.second);\n+        }\n+\n+        CAmount fee{0};\n+        GetTransactionFee(tx, coins, fee);\n+\n+        if (fee > max_raw_tx_fee) {\n+            throw JSONRPCError(RPC_TRANSACTION_REJECTED, strprintf(\"fee-above-max-tx-fee: fee=%s , max_tx_fee=%s\", FormatMoney(fee), FormatMoney(max_raw_tx_fee)));\n+        }\n+    }\n+\n     std::string err_string;\n     AssertLockNotHeld(cs_main);\n     const TransactionError err = BroadcastTransaction(tx, err_string, max_raw_tx_fee, /*relay*/ true, /*wait_callback*/ true);\n@@ -895,6 +918,31 @@ static UniValue testmempoolaccept(const JSONRPCRequest& request)\n     UniValue result_0(UniValue::VOBJ);\n     result_0.pushKV(\"txid\", tx_hash.GetHex());\n \n+    if (max_raw_tx_fee > 0) {\n+        // Check that we're not trying to send a transaction with a too-high fee\n+        // Fetch previous transactions (inputs):\n+        std::map<COutPoint, Coin> coins_map;\n+        for (const CTxIn& txin : tx->vin) {\n+            coins_map[txin.prevout]; // Create empty map entry keyed by prevout.\n+        }\n+        FindCoins(coins_map);\n+\n+        std::vector<Coin> coins;\n+        for (auto coinmap: coins_map) {\n+            coins.push_back(coinmap.second);\n+        }\n+\n+        CAmount fee{0};\n+        GetTransactionFee(tx, coins, fee);\n+\n+        if (fee > max_raw_tx_fee) {\n+            result_0.pushKV(\"allowed\", false);\n+            result_0.pushKV(\"reject-reason\", \"fee-above-max-tx-fee\");\n+            result.push_back(std::move(result_0));\n+            return result;\n+        }\n+    }\n+\n     CValidationState state;\n     bool missing_inputs;\n     bool test_accept_res;"
      },
      {
        "sha": "74e72b69f675bc1d42c90f95eec12540a28ac8e6",
        "filename": "src/util/fees.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9d9ba1a28e5ce36b359f8ccfbae3e0314139f99/src/util/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9d9ba1a28e5ce36b359f8ccfbae3e0314139f99/src/util/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/fees.cpp?ref=d9d9ba1a28e5ce36b359f8ccfbae3e0314139f99",
        "patch": "@@ -3,7 +3,10 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <amount.h>\n+#include <coins.h>\n #include <policy/fees.h>\n+#include <primitives/transaction.h>\n \n #include <string>\n \n@@ -39,3 +42,18 @@ bool FeeModeFromString(const std::string& mode_string, FeeEstimateMode& fee_esti\n     fee_estimate_mode = mode->second;\n     return true;\n }\n+\n+bool GetTransactionFee(const CTransactionRef& tx, const std::vector<Coin>& coins, CAmount& fee) {\n+    // Add all in values\n+    fee = 0;\n+    for (const auto coin : coins) {\n+        fee += coin.out.nValue;\n+    }\n+\n+     // Subtract all out values\n+    for (const auto& tx_out : tx->vout) {\n+        fee -= tx_out.nValue;\n+    }\n+    \n+    return true;\n+}"
      },
      {
        "sha": "91f75329bd3427cdd44ed5378aa7c16d0c7210cc",
        "filename": "src/util/fees.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9d9ba1a28e5ce36b359f8ccfbae3e0314139f99/src/util/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9d9ba1a28e5ce36b359f8ccfbae3e0314139f99/src/util/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/fees.h?ref=d9d9ba1a28e5ce36b359f8ccfbae3e0314139f99",
        "patch": "@@ -5,12 +5,17 @@\n #ifndef BITCOIN_UTIL_FEES_H\n #define BITCOIN_UTIL_FEES_H\n \n+#include <amount.h>\n+#include <coins.h>\n+#include <primitives/transaction.h>\n+\n #include <string>\n \n enum class FeeEstimateMode;\n enum class FeeReason;\n \n bool FeeModeFromString(const std::string& mode_string, FeeEstimateMode& fee_estimate_mode);\n std::string StringForFeeReason(FeeReason reason);\n+bool GetTransactionFee(const CTransactionRef& tx, const std::vector<Coin>& coins, CAmount& fee);\n \n #endif // BITCOIN_UTIL_FEES_H"
      },
      {
        "sha": "2c1b21bcfe050171ee074cd98273c8ed6196b4ac",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9d9ba1a28e5ce36b359f8ccfbae3e0314139f99/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9d9ba1a28e5ce36b359f8ccfbae3e0314139f99/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=d9d9ba1a28e5ce36b359f8ccfbae3e0314139f99",
        "patch": "@@ -2159,6 +2159,24 @@ bool CWalletTx::SubmitMemoryPoolAndRelay(std::string& err_string, bool relay, in\n     // Don't try to submit conflicted or confirmed transactions.\n     if (GetDepthInMainChain(locked_chain) != 0) return false;\n \n+    // Check that we're not trying to send a transaction with a too-high fee\n+    // Fetch previous transactions (inputs):\n+    std::map<COutPoint, Coin> coins_map;\n+    for (const CTxIn& txin : tx->vin) {\n+        coins_map[txin.prevout]; // Create empty map entry keyed by prevout.\n+    }\n+    pwallet->chain().findCoins(coins_map);\n+\n+    std::vector<Coin> coins;\n+    for (auto coinmap: coins_map) {\n+        coins.push_back(coinmap.second);\n+    }\n+\n+    CAmount fee{0};\n+    GetTransactionFee(tx, coins, fee);\n+\n+    if (fee > pwallet->m_default_max_tx_fee) return false;\n+\n     // Submit transaction to mempool for relay\n     pwallet->WalletLogPrintf(\"Submitting wtx %s to mempool for relay\\n\", GetHash().ToString());\n     // We must set fInMempool here - while it will be re-set to true by the"
      },
      {
        "sha": "6afd20d24d264db1c741a58327d3fa50ca46033d",
        "filename": "test/functional/mempool_accept.py",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9d9ba1a28e5ce36b359f8ccfbae3e0314139f99/test/functional/mempool_accept.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9d9ba1a28e5ce36b359f8ccfbae3e0314139f99/test/functional/mempool_accept.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_accept.py?ref=d9d9ba1a28e5ce36b359f8ccfbae3e0314139f99",
        "patch": "@@ -192,7 +192,7 @@ def run_test(self):\n         # Skip re-signing the transaction for context independent checks from now on\n         # tx.deserialize(BytesIO(hex_str_to_bytes(node.signrawtransactionwithwallet(tx.serialize().hex())['hex'])))\n         self.check_mempool_result(\n-            result_expected=[{'txid': tx.rehash(), 'allowed': False, 'reject-reason': '16: bad-txns-vout-empty'}],\n+            result_expected=[{'txid': tx.rehash(), 'allowed': False, 'reject-reason': 'fee-above-max-tx-fee'}],\n             rawtxs=[tx.serialize().hex()],\n         )\n \n@@ -208,7 +208,7 @@ def run_test(self):\n         tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_reference)))\n         tx.vout[0].nValue *= -1\n         self.check_mempool_result(\n-            result_expected=[{'txid': tx.rehash(), 'allowed': False, 'reject-reason': '16: bad-txns-vout-negative'}],\n+            result_expected=[{'txid': tx.rehash(), 'allowed': False, 'reject-reason': 'fee-above-max-tx-fee'}],\n             rawtxs=[tx.serialize().hex()],\n         )\n \n@@ -234,7 +234,7 @@ def run_test(self):\n         tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_reference)))\n         tx.vin = [tx.vin[0]] * 2\n         self.check_mempool_result(\n-            result_expected=[{'txid': tx.rehash(), 'allowed': False, 'reject-reason': '16: bad-txns-inputs-duplicate'}],\n+            result_expected=[{'txid': tx.rehash(), 'allowed': False, 'reject-reason': 'fee-above-max-tx-fee'}],\n             rawtxs=[tx.serialize().hex()],\n         )\n \n@@ -251,19 +251,19 @@ def run_test(self):\n         tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_reference)))\n         tx.nVersion = 3  # A version currently non-standard\n         self.check_mempool_result(\n-            result_expected=[{'txid': tx.rehash(), 'allowed': False, 'reject-reason': '64: version'}],\n+            result_expected=[{'txid': tx.rehash(), 'allowed': False, 'reject-reason': 'fee-above-max-tx-fee'}],\n             rawtxs=[tx.serialize().hex()],\n         )\n         tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_reference)))\n         tx.vout[0].scriptPubKey = CScript([OP_0])  # Some non-standard script\n         self.check_mempool_result(\n-            result_expected=[{'txid': tx.rehash(), 'allowed': False, 'reject-reason': '64: scriptpubkey'}],\n+            result_expected=[{'txid': tx.rehash(), 'allowed': False, 'reject-reason': 'fee-above-max-tx-fee'}],\n             rawtxs=[tx.serialize().hex()],\n         )\n         tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_reference)))\n         tx.vin[0].scriptSig = CScript([OP_HASH160])  # Some not-pushonly scriptSig\n         self.check_mempool_result(\n-            result_expected=[{'txid': tx.rehash(), 'allowed': False, 'reject-reason': '64: scriptsig-not-pushonly'}],\n+            result_expected=[{'txid': tx.rehash(), 'allowed': False, 'reject-reason': 'fee-above-max-tx-fee'}],\n             rawtxs=[tx.serialize().hex()],\n         )\n         tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_reference)))\n@@ -278,7 +278,7 @@ def run_test(self):\n         tx.vout[0] = output_p2sh_burn\n         tx.vout[0].nValue -= 1  # Make output smaller, such that it is dust for our policy\n         self.check_mempool_result(\n-            result_expected=[{'txid': tx.rehash(), 'allowed': False, 'reject-reason': '64: dust'}],\n+            result_expected=[{'txid': tx.rehash(), 'allowed': False, 'reject-reason': 'fee-above-max-tx-fee'}],\n             rawtxs=[tx.serialize().hex()],\n         )\n         tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_reference)))\n@@ -294,7 +294,7 @@ def run_test(self):\n         tx.vin[0].nSequence -= 1  # Should be non-max, so locktime is not ignored\n         tx.nLockTime = node.getblockcount() + 1\n         self.check_mempool_result(\n-            result_expected=[{'txid': tx.rehash(), 'allowed': False, 'reject-reason': '64: non-final'}],\n+            result_expected=[{'txid': tx.rehash(), 'allowed': False, 'reject-reason': 'fee-above-max-tx-fee'}],\n             rawtxs=[tx.serialize().hex()],\n         )\n "
      },
      {
        "sha": "999f5e14874aed6f9aee5bc2d15172d4c84e846a",
        "filename": "test/functional/rpc_rawtransaction.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9d9ba1a28e5ce36b359f8ccfbae3e0314139f99/test/functional/rpc_rawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9d9ba1a28e5ce36b359f8ccfbae3e0314139f99/test/functional/rpc_rawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_rawtransaction.py?ref=d9d9ba1a28e5ce36b359f8ccfbae3e0314139f99",
        "patch": "@@ -454,9 +454,9 @@ def run_test(self):\n         # Thus, testmempoolaccept should reject\n         testres = self.nodes[2].testmempoolaccept([rawTxSigned['hex']], 0.00001000)[0]\n         assert_equal(testres['allowed'], False)\n-        assert_equal(testres['reject-reason'], '256: absurdly-high-fee')\n+        assert_equal(testres['reject-reason'], 'fee-above-max-tx-fee')\n         # and sendrawtransaction should throw\n-        assert_raises_rpc_error(-26, \"absurdly-high-fee\", self.nodes[2].sendrawtransaction, rawTxSigned['hex'], 0.00001000)\n+        assert_raises_rpc_error(-26, 'fee-above-max-tx-fee', self.nodes[2].sendrawtransaction, rawTxSigned['hex'], 0.00001000)\n         # and the following calls should both succeed\n         testres = self.nodes[2].testmempoolaccept(rawtxs=[rawTxSigned['hex']])[0]\n         assert_equal(testres['allowed'], True)\n@@ -478,9 +478,9 @@ def run_test(self):\n         # Thus, testmempoolaccept should reject\n         testres = self.nodes[2].testmempoolaccept([rawTxSigned['hex']])[0]\n         assert_equal(testres['allowed'], False)\n-        assert_equal(testres['reject-reason'], '256: absurdly-high-fee')\n+        assert_equal(testres['reject-reason'], 'fee-above-max-tx-fee')\n         # and sendrawtransaction should throw\n-        assert_raises_rpc_error(-26, \"absurdly-high-fee\", self.nodes[2].sendrawtransaction, rawTxSigned['hex'])\n+        assert_raises_rpc_error(-26, 'fee-above-max-tx-fee', self.nodes[2].sendrawtransaction, rawTxSigned['hex'])\n         # and the following calls should both succeed\n         testres = self.nodes[2].testmempoolaccept(rawtxs=[rawTxSigned['hex']], maxfeerate='0.20000000')[0]\n         assert_equal(testres['allowed'], True)"
      }
    ]
  },
  {
    "sha": "2373200be563b177e10ac173755493deac9a4579",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMzczMjAwYmU1NjNiMTc3ZTEwYWMxNzM3NTU0OTNkZWFjOWE0NTc5",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-04-12T20:22:12Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-10-11T15:17:18Z"
      },
      "message": "[validation] Remove absurdfee from accepttomempool",
      "tree": {
        "sha": "1a0c14a97da8ba831a2846b6f073bec4ac2cbf6e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1a0c14a97da8ba831a2846b6f073bec4ac2cbf6e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2373200be563b177e10ac173755493deac9a4579",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2373200be563b177e10ac173755493deac9a4579",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2373200be563b177e10ac173755493deac9a4579",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2373200be563b177e10ac173755493deac9a4579/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d9d9ba1a28e5ce36b359f8ccfbae3e0314139f99",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9d9ba1a28e5ce36b359f8ccfbae3e0314139f99",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d9d9ba1a28e5ce36b359f8ccfbae3e0314139f99"
      }
    ],
    "stats": {
      "total": 54,
      "additions": 22,
      "deletions": 32
    },
    "files": [
      {
        "sha": "15a15289f779ed738c5f01cc0b4856b4fffe03ca",
        "filename": "src/bench/block_assemble.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2373200be563b177e10ac173755493deac9a4579/src/bench/block_assemble.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2373200be563b177e10ac173755493deac9a4579/src/bench/block_assemble.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/block_assemble.cpp?ref=2373200be563b177e10ac173755493deac9a4579",
        "patch": "@@ -40,7 +40,7 @@ static void AssembleBlock(benchmark::State& state)\n \n         for (const auto& txr : txs) {\n             CValidationState state;\n-            bool ret{::AcceptToMemoryPool(::mempool, state, txr, nullptr /* pfMissingInputs */, nullptr /* plTxnReplaced */, false /* bypass_limits */, /* nAbsurdFee */ 0)};\n+            bool ret{::AcceptToMemoryPool(::mempool, state, txr, nullptr /* pfMissingInputs */, nullptr /* plTxnReplaced */, false /* bypass_limits */)};\n             assert(ret);\n         }\n     }"
      },
      {
        "sha": "73a582e323182d3b8571cafcf8164daf59856862",
        "filename": "src/interfaces/chain.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2373200be563b177e10ac173755493deac9a4579/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2373200be563b177e10ac173755493deac9a4579/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=2373200be563b177e10ac173755493deac9a4579",
        "patch": "@@ -286,9 +286,9 @@ class ChainImpl : public Chain\n         auto it = ::mempool.GetIter(txid);\n         return it && (*it)->GetCountWithDescendants() > 1;\n     }\n-    bool broadcastTransaction(const CTransactionRef& tx, std::string& err_string, const CAmount& max_tx_fee, bool relay) override\n+    bool broadcastTransaction(const CTransactionRef& tx, std::string& err_string, bool relay) override\n     {\n-        const TransactionError err = BroadcastTransaction(tx, err_string, max_tx_fee, relay, /*wait_callback*/ false);\n+        const TransactionError err = BroadcastTransaction(tx, err_string, relay, /*wait_callback*/ false);\n         // Chain clients only care about failures to accept the tx to the mempool. Disregard non-mempool related failures.\n         // Note: this will need to be updated if BroadcastTransactions() is updated to return other non-mempool failures\n         // that Chain clients do not need to know about."
      },
      {
        "sha": "0f5ab060d8578547d66b4bf9b383cce6edc63352",
        "filename": "src/interfaces/chain.h",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2373200be563b177e10ac173755493deac9a4579/src/interfaces/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2373200be563b177e10ac173755493deac9a4579/src/interfaces/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.h?ref=2373200be563b177e10ac173755493deac9a4579",
        "patch": "@@ -155,10 +155,9 @@ class Chain\n     //! Check if transaction has descendants in mempool.\n     virtual bool hasDescendantsInMempool(const uint256& txid) = 0;\n \n-    //! Transaction is added to memory pool, if the transaction fee is below the\n-    //! amount specified by max_tx_fee, and broadcast to all peers if relay is set to true.\n+    //! Transaction is added to memory pool, and broadcast to all peers if relay is set to true.\n     //! Return false if the transaction could not be added due to the fee or for another reason.\n-    virtual bool broadcastTransaction(const CTransactionRef& tx, std::string& err_string, const CAmount& max_tx_fee, bool relay) = 0;\n+    virtual bool broadcastTransaction(const CTransactionRef& tx, std::string& err_string, bool relay) = 0;\n \n     //! Calculate mempool ancestor and descendant counts for the given transaction.\n     virtual void getTransactionAncestry(const uint256& txid, size_t& ancestors, size_t& descendants) = 0;"
      },
      {
        "sha": "acdfb6a344fcc67d81b7f5be915c1f4a82f3b309",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2373200be563b177e10ac173755493deac9a4579/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2373200be563b177e10ac173755493deac9a4579/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=2373200be563b177e10ac173755493deac9a4579",
        "patch": "@@ -1811,7 +1811,7 @@ void static ProcessOrphanTx(CConnman* connman, std::set<uint256>& orphan_work_se\n         CValidationState orphan_state;\n \n         if (setMisbehaving.count(fromPeer)) continue;\n-        if (AcceptToMemoryPool(mempool, orphan_state, porphanTx, &fMissingInputs2, &removed_txn, false /* bypass_limits */, 0 /* nAbsurdFee */)) {\n+        if (AcceptToMemoryPool(mempool, orphan_state, porphanTx, &fMissingInputs2, &removed_txn, false /* bypass_limits */)) {\n             LogPrint(BCLog::MEMPOOL, \"   accepted orphan tx %s\\n\", orphanHash.ToString());\n             RelayTransaction(orphanHash, *connman);\n             for (unsigned int i = 0; i < orphanTx.vout.size(); i++) {\n@@ -2472,7 +2472,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         std::list<CTransactionRef> lRemovedTxn;\n \n         if (!AlreadyHave(inv) &&\n-            AcceptToMemoryPool(mempool, state, ptx, &fMissingInputs, &lRemovedTxn, false /* bypass_limits */, 0 /* nAbsurdFee */)) {\n+            AcceptToMemoryPool(mempool, state, ptx, &fMissingInputs, &lRemovedTxn, false /* bypass_limits */)) {\n             mempool.check(&::ChainstateActive().CoinsTip());\n             RelayTransaction(tx.GetHash(), *connman);\n             for (unsigned int i = 0; i < tx.vout.size(); i++) {"
      },
      {
        "sha": "79cda1af686260e848e6805f4c79ba17028ac747",
        "filename": "src/node/transaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2373200be563b177e10ac173755493deac9a4579/src/node/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2373200be563b177e10ac173755493deac9a4579/src/node/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/transaction.cpp?ref=2373200be563b177e10ac173755493deac9a4579",
        "patch": "@@ -14,7 +14,7 @@\n \n #include <future>\n \n-TransactionError BroadcastTransaction(const CTransactionRef tx, std::string& err_string, const CAmount& max_tx_fee, bool relay, bool wait_callback)\n+TransactionError BroadcastTransaction(const CTransactionRef tx, std::string& err_string, bool relay, bool wait_callback)\n {\n     // BroadcastTransaction can be called by either sendrawtransaction RPC or wallet RPCs.\n     // g_connman is assigned both before chain clients and before RPC server is accepting calls,\n@@ -40,7 +40,7 @@ TransactionError BroadcastTransaction(const CTransactionRef tx, std::string& err\n         CValidationState state;\n         bool fMissingInputs;\n         if (!AcceptToMemoryPool(mempool, state, std::move(tx), &fMissingInputs,\n-                nullptr /* plTxnReplaced */, false /* bypass_limits */, max_tx_fee)) {\n+                nullptr /* plTxnReplaced */, false /* bypass_limits */)) {\n             if (state.IsInvalid()) {\n                 err_string = FormatStateMessage(state);\n                 return TransactionError::MEMPOOL_REJECTED;"
      },
      {
        "sha": "b54aa05a3c07f29243389e98872a4de5d2bd161a",
        "filename": "src/node/transaction.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2373200be563b177e10ac173755493deac9a4579/src/node/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2373200be563b177e10ac173755493deac9a4579/src/node/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/transaction.h?ref=2373200be563b177e10ac173755493deac9a4579",
        "patch": "@@ -21,11 +21,10 @@\n  *\n  * @param[in]  tx the transaction to broadcast\n  * @param[out] &err_string reference to std::string to fill with error string if available\n- * @param[in]  max_tx_fee reject txs with fees higher than this (if 0, accept any fee)\n  * @param[in]  relay flag if both mempool insertion and p2p relay are requested\n  * @param[in]  wait_callback, wait until callbacks have been processed to avoid stale result due to a sequentially RPC.\n  * return error\n  */\n-NODISCARD TransactionError BroadcastTransaction(CTransactionRef tx, std::string& err_string, const CAmount& max_tx_fee, bool relay, bool wait_callback);\n+NODISCARD TransactionError BroadcastTransaction(CTransactionRef tx, std::string& err_string, bool relay, bool wait_callback);\n \n #endif // BITCOIN_NODE_TRANSACTION_H"
      },
      {
        "sha": "497df0c5046511fa83327f059d682db04633e877",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2373200be563b177e10ac173755493deac9a4579/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2373200be563b177e10ac173755493deac9a4579/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=2373200be563b177e10ac173755493deac9a4579",
        "patch": "@@ -842,7 +842,7 @@ static UniValue sendrawtransaction(const JSONRPCRequest& request)\n \n     std::string err_string;\n     AssertLockNotHeld(cs_main);\n-    const TransactionError err = BroadcastTransaction(tx, err_string, max_raw_tx_fee, /*relay*/ true, /*wait_callback*/ true);\n+    const TransactionError err = BroadcastTransaction(tx, err_string, /*relay*/ true, /*wait_callback*/ true);\n     if (TransactionError::OK != err) {\n         throw JSONRPCTransactionError(err, err_string);\n     }\n@@ -949,7 +949,7 @@ static UniValue testmempoolaccept(const JSONRPCRequest& request)\n     {\n         LOCK(cs_main);\n         test_accept_res = AcceptToMemoryPool(mempool, state, std::move(tx), &missing_inputs,\n-            nullptr /* plTxnReplaced */, false /* bypass_limits */, max_raw_tx_fee, /* test_accept */ true);\n+            nullptr /* plTxnReplaced */, false /* bypass_limits */, true /* test_accept */);\n     }\n     result_0.pushKV(\"allowed\", test_accept_res);\n     if (!test_accept_res) {"
      },
      {
        "sha": "eed1ca2e532f3cc7f5ad81bc9f9be5de1683ed84",
        "filename": "src/test/txvalidation_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2373200be563b177e10ac173755493deac9a4579/src/test/txvalidation_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2373200be563b177e10ac173755493deac9a4579/src/test/txvalidation_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidation_tests.cpp?ref=2373200be563b177e10ac173755493deac9a4579",
        "patch": "@@ -41,8 +41,7 @@ BOOST_FIXTURE_TEST_CASE(tx_mempool_reject_coinbase, TestChain100Setup)\n             AcceptToMemoryPool(mempool, state, MakeTransactionRef(coinbaseTx),\n                 nullptr /* pfMissingInputs */,\n                 nullptr /* plTxnReplaced */,\n-                true /* bypass_limits */,\n-                0 /* nAbsurdFee */));\n+                true /* bypass_limits */));\n \n     // Check that the transaction hasn't been added to mempool.\n     BOOST_CHECK_EQUAL(mempool.size(), initialPoolSize);"
      },
      {
        "sha": "2d0db6acbc343b3aa5e411d5eb118a9d68e1c128",
        "filename": "src/test/txvalidationcache_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2373200be563b177e10ac173755493deac9a4579/src/test/txvalidationcache_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2373200be563b177e10ac173755493deac9a4579/src/test/txvalidationcache_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidationcache_tests.cpp?ref=2373200be563b177e10ac173755493deac9a4579",
        "patch": "@@ -24,7 +24,7 @@ ToMemPool(const CMutableTransaction& tx)\n \n     CValidationState state;\n     return AcceptToMemoryPool(mempool, state, MakeTransactionRef(tx), nullptr /* pfMissingInputs */,\n-                              nullptr /* plTxnReplaced */, true /* bypass_limits */, 0 /* nAbsurdFee */);\n+                              nullptr /* plTxnReplaced */, true /* bypass_limits */);\n }\n \n BOOST_FIXTURE_TEST_CASE(tx_mempool_block_doublespend, TestChain100Setup)"
      },
      {
        "sha": "59e330f47e88bb75bc7243bd576276cc8ac37dc2",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 13,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2373200be563b177e10ac173755493deac9a4579/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2373200be563b177e10ac173755493deac9a4579/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=2373200be563b177e10ac173755493deac9a4579",
        "patch": "@@ -369,7 +369,7 @@ static void UpdateMempoolForReorg(DisconnectedBlockTransactions& disconnectpool,\n         CValidationState stateDummy;\n         if (!fAddToMempool || (*it)->IsCoinBase() ||\n             !AcceptToMemoryPool(mempool, stateDummy, *it, nullptr /* pfMissingInputs */,\n-                                nullptr /* plTxnReplaced */, true /* bypass_limits */, 0 /* nAbsurdFee */)) {\n+                                nullptr /* plTxnReplaced */, true /* bypass_limits */)) {\n             // If the transaction doesn't make it in to the mempool, remove any\n             // transactions that depend on it (which would now be orphans).\n             mempool.removeRecursive(**it, MemPoolRemovalReason::REORG);\n@@ -448,7 +448,6 @@ class MemPoolAccept\n         const int64_t m_accept_time;\n         std::list<CTransactionRef>* m_replaced_transactions;\n         const bool m_bypass_limits;\n-        const CAmount& m_absurd_fee;\n         /*\n          * Return any outpoints which were not previously present in the coins\n          * cache, but were added as a result of validating the tx for mempool\n@@ -543,7 +542,6 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     bool* pfMissingInputs = args.m_missing_inputs;\n     const int64_t nAcceptTime = args.m_accept_time;\n     const bool bypass_limits = args.m_bypass_limits;\n-    const CAmount& nAbsurdFee = args.m_absurd_fee;\n     std::vector<COutPoint>& coins_to_uncache = args.m_coins_to_uncache;\n \n     // Alias what we need out of ws\n@@ -714,11 +712,6 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     // blocks\n     if (!bypass_limits && !CheckFeeRate(nSize, nModifiedFees, state)) return false;\n \n-    if (nAbsurdFee && nFees > nAbsurdFee)\n-        return state.Invalid(ValidationInvalidReason::TX_NOT_STANDARD, false,\n-                REJECT_HIGHFEE, \"absurdly-high-fee\",\n-                strprintf(\"%d > %d\", nFees, nAbsurdFee));\n-\n     const CTxMemPool::setEntries setIterConflicting = m_pool.GetIterSet(setConflicts);\n     // Calculate in-mempool ancestors, up to a limit.\n     if (setConflicts.size() == 1) {\n@@ -1052,10 +1045,10 @@ bool MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs\n /** (try to) add transaction to memory pool with a specified acceptance time **/\n static bool AcceptToMemoryPoolWithTime(const CChainParams& chainparams, CTxMemPool& pool, CValidationState &state, const CTransactionRef &tx,\n                         bool* pfMissingInputs, int64_t nAcceptTime, std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, const CAmount nAbsurdFee, bool test_accept) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+                        bool bypass_limits, bool test_accept) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     std::vector<COutPoint> coins_to_uncache;\n-    MemPoolAccept::ATMPArgs args { chainparams, state, pfMissingInputs, nAcceptTime, plTxnReplaced, bypass_limits, nAbsurdFee, coins_to_uncache, test_accept };\n+    MemPoolAccept::ATMPArgs args { chainparams, state, pfMissingInputs, nAcceptTime, plTxnReplaced, bypass_limits, coins_to_uncache, test_accept };\n     bool res = MemPoolAccept(pool).AcceptSingleTransaction(tx, args);\n     if (!res) {\n         // Remove coins that were not present in the coins cache before calling ATMPW;\n@@ -1074,10 +1067,10 @@ static bool AcceptToMemoryPoolWithTime(const CChainParams& chainparams, CTxMemPo\n \n bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransactionRef &tx,\n                         bool* pfMissingInputs, std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, const CAmount nAbsurdFee, bool test_accept)\n+                        bool bypass_limits, bool test_accept)\n {\n     const CChainParams& chainparams = Params();\n-    return AcceptToMemoryPoolWithTime(chainparams, pool, state, tx, pfMissingInputs, GetTime(), plTxnReplaced, bypass_limits, nAbsurdFee, test_accept);\n+    return AcceptToMemoryPoolWithTime(chainparams, pool, state, tx, pfMissingInputs, GetTime(), plTxnReplaced, bypass_limits, test_accept);\n }\n \n /**\n@@ -4971,7 +4964,7 @@ bool LoadMempool(CTxMemPool& pool)\n             if (nTime + nExpiryTimeout > nNow) {\n                 LOCK(cs_main);\n                 AcceptToMemoryPoolWithTime(chainparams, pool, state, tx, nullptr /* pfMissingInputs */, nTime,\n-                                           nullptr /* plTxnReplaced */, false /* bypass_limits */, 0 /* nAbsurdFee */,\n+                                           nullptr /* plTxnReplaced */, false /* bypass_limits */,\n                                            false /* test_accept */);\n                 if (state.IsValid()) {\n                     ++count;"
      },
      {
        "sha": "f805ddb350ec3ec4d0587351b15c1d4f44f45ddd",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2373200be563b177e10ac173755493deac9a4579/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2373200be563b177e10ac173755493deac9a4579/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=2373200be563b177e10ac173755493deac9a4579",
        "patch": "@@ -276,7 +276,7 @@ void PruneBlockFilesManual(int nManualPruneHeight);\n  * plTxnReplaced will be appended to with all transactions replaced from mempool **/\n bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransactionRef &tx,\n                         bool* pfMissingInputs, std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, const CAmount nAbsurdFee, bool test_accept=false) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+                        bool bypass_limits, bool test_accept=false) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n /** Get the BIP9 state for a given deployment at the current tip. */\n ThresholdState VersionBitsTipState(const Consensus::Params& params, Consensus::DeploymentPos pos);"
      },
      {
        "sha": "1934d12c589e9112d057949f9fe876a94d38296e",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2373200be563b177e10ac173755493deac9a4579/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2373200be563b177e10ac173755493deac9a4579/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=2373200be563b177e10ac173755493deac9a4579",
        "patch": "@@ -2188,7 +2188,7 @@ bool CWalletTx::SubmitMemoryPoolAndRelay(std::string& err_string, bool relay, in\n     // Irrespective of the failure reason, un-marking fInMempool\n     // out-of-order is incorrect - it should be unmarked when\n     // TransactionRemovedFromMempool fires.\n-    bool ret = pwallet->chain().broadcastTransaction(tx, err_string, pwallet->m_default_max_tx_fee, relay);\n+    bool ret = pwallet->chain().broadcastTransaction(tx, err_string, relay);\n     fInMempool |= ret;\n     return ret;\n }"
      }
    ]
  }
]