MarcoFalke,2019-04-12T21:28:11Z,"Seems a lot of new code added for a simplification. Also, releasing the locks in between makes this non-atomic: Missing coins are counted as -1 satoshis (instead of their true amount), this can easily lead to not firing an error at all and accepting the tx later on, because the coins became available again.",https://github.com/bitcoin/bitcoin/pull/15810#issuecomment-482728862,482728862,
DrahtBot,2019-04-18T17:09:38Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#16129](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16129.html) (refactor: Remove unused includes by practic",https://github.com/bitcoin/bitcoin/pull/15810#issuecomment-484595601,484595601,
jnewbery,2019-04-18T17:57:38Z,"Thanks for looking at this @MarcoFalke . This is still in RFC mode and I'm looking for concept feedback.\n\n> Seems a lot of new code added for a simplification.\n\nYes, it's additional LOC. It removes code from validation and simplifies the interface to the mempool, in exchange for adding checking to client code (RPC, wallet). I think that counts as an improvement because all other things bei",https://github.com/bitcoin/bitcoin/pull/15810#issuecomment-484616488,484616488,
MarcoFalke,2019-04-18T18:31:17Z,"> It removes code from validation and simplifies the interface to the mempool\n\nThe fee is already calculated in the mempool, so using it for other things is ""free"". I agree that the current interface to pass in the absurd fee is a bit odd, but what about returning the fee from testmempoolaccept? that way you wouldn't need to duplicate any utxo validation logic, but still could avoid passing in",https://github.com/bitcoin/bitcoin/pull/15810#issuecomment-484630260,484630260,
gmaxwell,2019-04-18T21:40:24Z,"It would be nice to get this ""local user specific behaviour"" out of ATMP, I agree!\n\nAnd even beyond that... fine with simplifying this, but having a lot of duplicated code isn't great. It's also important that it's reasonably precise. I think it would be okay to reject a txn with inputs not found, but we shouldn't bypass the check in that case.  I think if the original behaviour had looked lik",https://github.com/bitcoin/bitcoin/pull/15810#issuecomment-484699029,484699029,
jnewbery,2019-05-16T16:16:06Z,Rebased. I still haven't addressed the feedback from Marco here: https://github.com/bitcoin/bitcoin/pull/15810#issuecomment-482728862,https://github.com/bitcoin/bitcoin/pull/15810#issuecomment-493134564,493134564,
sipa,2019-05-20T18:30:06Z,"I agree it's weird to have special logic for the absurd fee check in the mempool code, so concept ACK getting rid of that, but @MarcoFalke's suggestion seems simpler.",https://github.com/bitcoin/bitcoin/pull/15810#issuecomment-494100472,494100472,
DrahtBot,2019-06-06T15:22:16Z,<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase,https://github.com/bitcoin/bitcoin/pull/15810#issuecomment-499541783,499541783,
jnewbery,2019-10-11T15:21:50Z,"I'm not actively working on this, so I'm going to close the PR for now. In case anyone else wants to pick it up, I've rebased it on master.\n\nA couple of things need addressing:\n\n- @MarcoFalke has a suggestion for simplifying this by using testmempoolaccept (https://github.com/bitcoin/bitcoin/pull/15810#issuecomment-484630260).\n- I've had to change a lot of the tests in `mempool_accept.py",https://github.com/bitcoin/bitcoin/pull/15810#issuecomment-541108864,541108864,
glozow,2020-06-19T15:30:12Z,"I‚Äôve started working on this, rationale still = (1) mempool behavior should not be user-specific and (2) enforcing a user‚Äôs maxfeerate should be the responsibility of the client/wallet. I‚Äôd like to ask for a little bit of approach advice.\n\n> but what about returning the fee from testmempoolaccept?\n\nI‚Äôm guessing this motivates #19093; it‚Äôll be really simple to have a check in `testmempoolac",https://github.com/bitcoin/bitcoin/pull/15810#issuecomment-646698760,646698760,
jnewbery,2020-06-19T20:44:30Z,"@gzhao408 - I think the idea is that you call `AcceptToMemoryPool()` with `test_accept` set to `true` to determine the feerate, and then if it's below the acceptable level, call `AcceptToMemoryPool()` again with `test_accept` set to false to actually submit the transaction to the mempool.",https://github.com/bitcoin/bitcoin/pull/15810#issuecomment-646853974,646853974,
glozow,2020-06-20T19:14:13Z,"Ohhh okay üëç  thanks @jnewbery! Is that what ""using the fee for other things is 'free'"" means? It should be easy to do this on top of #19093 then.",https://github.com/bitcoin/bitcoin/pull/15810#issuecomment-647035117,647035117,
jnewbery,2020-06-20T21:13:16Z,"Yes, I think Marco means that no additional logic is required to be written in AcceptToMemoryPool. We already work out the feerate, so it's no additional work to just return it to the caller.",https://github.com/bitcoin/bitcoin/pull/15810#issuecomment-647045991,647045991,
