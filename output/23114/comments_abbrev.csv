theuni,2021-09-28 16:33:48,"Looks like at least one reason this is failing is because clmul detection is inaccurate here. This was apparently fixed upstream by [this commit](https://github.com/sipa/minisketch/commit/78a9453496b6f9eeafd6c23b8df52268b2e647b7). Pulling in that change should fix that problem.\n\n~As a follow-up, we could split the feature detection from minisketch's configure.ac out into an m4 file that both m",https://github.com/bitcoin/bitcoin/pull/23114#issuecomment-929391617,929391617,
DrahtBot,2021-09-28 18:22:56,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#23473](https://github.com/bitcoin/bitcoin/pull/23473) (build: boring autotools cleanup by fanquake)\n* [#23462](https://",https://github.com/bitcoin/bitcoin/pull/23114#issuecomment-929512021,929512021,
theuni,2021-09-28 20:24:28,It looks like https://github.com/bitcoin/bitcoin/pull/23114/checks?check_run_id=3731233027 might've caught a real minisketch bug?,https://github.com/bitcoin/bitcoin/pull/23114#issuecomment-929597411,929597411,
sipa,2021-09-28 20:29:50,"@theuni It's not; unsigned overflow is well-defined (but our sanitizer is overly strict). In this case it's computing ""A - B + C"", where the overall result is positive, but (A - B) is negative. Reordering the expression, or turning off the unsigned overflow sanitizer would be possible solutions.",https://github.com/bitcoin/bitcoin/pull/23114#issuecomment-929601317,929601317,
sipa,2021-09-28 21:05:14,See https://github.com/sipa/minisketch/pull/49,https://github.com/bitcoin/bitcoin/pull/23114#issuecomment-929624497,929624497,
fanquake,2021-09-29 03:24:03,"> Looks like at least one reason this is failing is because clmul detection is inaccurate here. This was apparently fixed upstream by this commit. Pulling in that change should fix that problem.\n\nI've pulled in the improved clmul detection. That should fix the failing 32 bit CentOS 8 and multiprocess builds. I've also made a change that should fix the failing Win64 CI.",https://github.com/bitcoin/bitcoin/pull/23114#issuecomment-929796157,929796157,
theuni,2021-09-29 12:59:44,@fanquake Could you pull in a temp/hack version of sipa/minisketch#49 here to see if it makes the sanitizer happy?,https://github.com/bitcoin/bitcoin/pull/23114#issuecomment-930151790,930151790,
MarcoFalke,2021-09-29 13:10:35,"It is not allowed to link anything other than the fuzz tests with `--enable-fuzz-binary`, which explains the fuzz CI failure.",https://github.com/bitcoin/bitcoin/pull/23114#issuecomment-930160968,930160968,
theuni,2021-09-29 15:47:40,"Thanks for the pointer, @MarcoFalke.\n\n@fanquake: You can take (and squash) https://github.com/theuni/bitcoin/commit/aaa53f23e624f6804e451f3f20981898a50d83a0 which should fix that in the simplest way.",https://github.com/bitcoin/bitcoin/pull/23114#issuecomment-930302654,930302654,
fanquake,2021-09-30 01:20:00,"> @fanquake Could you pull in a temp/hack version of sipa/minisketch#49 here to see if it makes the sanitizer happy?\n\nCherry-picked sipa/minisketch#49 and sipa/minisketch/pull/51 (minus the CI change) for testing.\n\n> @fanquake: You can take (and squash) theuni@aaa53f2 which should fix that in the simplest way.\n\nIntegrated this change.\n\nRebased on master to resolve a conflict.\n\n",https://github.com/bitcoin/bitcoin/pull/23114#issuecomment-930667316,930667316,
theuni,2021-09-30 03:08:33,"I don't understand the problem here. Does the sanitizer want the high bits masked off before shifting or something?\n```\nminisketch/src/fields/../int_utils.h:21:62: runtime error: left shift of 3092242204026410023 by 13 places cannot be represented in type 'uint64_t' (aka 'unsigned long')\n    #0 0x55d2cf04cec8 in unsigned long Rot<13>(unsigned long) minisketch/src/fields/../int_utils.h:21:62",https://github.com/bitcoin/bitcoin/pull/23114#issuecomment-930726177,930726177,
sipa,2021-09-30 03:11:42,"@theuni Yes, exactly. That's not going to happen. We should just not enable unsigned integer sanitizer - it's going to cause alarm bells all over the place.",https://github.com/bitcoin/bitcoin/pull/23114#issuecomment-930731130,930731130,
MarcoFalke,2021-09-30 05:30:16,The sanitizer error can be fixed by disabling the sanitizer or adding a suppression to `test/supp..`.,https://github.com/bitcoin/bitcoin/pull/23114#issuecomment-930796872,930796872,
practicalswift,2021-09-30 08:13:25,"Some of the suppressions we apply for `crypto/` might be appropriate for `minisketch/`:\n\n```\n$ grep crypto/ test/sanitizer_suppressions/ubsan\nunsigned-integer-overflow:crypto/\nimplicit-integer-sign-change:crypto/\nimplicit-signed-integer-truncation:crypto/\nimplicit-unsigned-integer-truncation:crypto/\nshift-base:crypto/\n```",https://github.com/bitcoin/bitcoin/pull/23114#issuecomment-930998581,930998581,
theuni,2021-09-30 16:14:06,"> @theuni Yes, exactly. That's not going to happen. We should just not enable unsigned integer sanitizer - it's going to cause alarm bells all over the place.\n\nYeah, I'd go as far as to call this warning harmful. Afaik this shift is well-defined. I _guess_ i can imagine wanting to split the `<<` operator into two logical operations, but I would expect to have to opt-in a little harder for some",https://github.com/bitcoin/bitcoin/pull/23114#issuecomment-931466758,931466758,
sipa,2021-09-30 16:27:50,"@theuni Right, in C and C++, unsigned integer types are _defined_ (and intended) to act as integers modulo *2<sup>N</sup>*, while signed types are intended to act as just integers in general. To make sure that signed integer behavior matches actual integers, the language doesn't specify what happens when they overflow/underflow (in some cases, it's UB; in some cases it's implementation-defined beh",https://github.com/bitcoin/bitcoin/pull/23114#issuecomment-931477907,931477907,
theuni,2021-09-30 16:55:50,"From IRC:\n\n```\n<cfields> sipa: blah, good point about mixed-use codebases. I guess https://github.com/sipa/minisketch/pull/51 is kinda a counterpoint to disabling the warning wholesale, as it pointed out something legal but logically broken.\n<sipa> cfields: FWIW, libsecp256k1 does assume that some signed integer behavior is actually well-defined (and it has compile-time assertions to check",https://github.com/bitcoin/bitcoin/pull/23114#issuecomment-931497820,931497820,
theuni,2021-09-30 19:51:06,"Ok, this should be sufficient: https://github.com/theuni/bitcoin/commit/9e8bdea298ed25077ae75742fe26308d99103346\nEdit: removed unnecessary `shift-base`.\n\nThe minisketch change is no longer required.\n\nI think this should be enough to make c-i happy ðŸ¤ž",https://github.com/bitcoin/bitcoin/pull/23114#issuecomment-931616634,931616634,
fanquake,2021-10-01 02:38:15,"Dropped https://github.com/sipa/minisketch/pull/49, now that has been closed upstream. Pulled in https://github.com/theuni/bitcoin/commit/9e8bdea298ed25077ae75742fe26308d99103346 to add some ubsan suppressions.",https://github.com/bitcoin/bitcoin/pull/23114#issuecomment-931848782,931848782,
fanquake,2021-10-01 03:34:32,"> Edit: removed unnecessary shift-base.\n\nI've re-added this after dropping sipa/minisketch#49.",https://github.com/bitcoin/bitcoin/pull/23114#issuecomment-931868890,931868890,
theuni,2021-10-02 03:17:31,"sipa/minisketch#51 has been merged upstream, that should be the last thing needed.",https://github.com/bitcoin/bitcoin/pull/23114#issuecomment-932672489,932672489,
fanquake,2021-10-03 03:38:11,"I've rebased, updated the subtree to include https://github.com/sipa/minisketch/pull/51, and dropped the cherry-pick of that change.",https://github.com/bitcoin/bitcoin/pull/23114#issuecomment-932856599,932856599,
luke-jr,2021-10-03 18:05:33,"Concept NACK to using a subtree for non-concensus-critical libraries.\n\nAt the very least, there should be a way to use a system install.",https://github.com/bitcoin/bitcoin/pull/23114#issuecomment-932998596,932998596,
laanwj,2021-10-07 14:55:05,"Build system changes-review ACK 9089c6fc639fd57490ea321cce93b491a3a1e418\nHaven't reviewed minisketch itself.",https://github.com/bitcoin/bitcoin/pull/23114#issuecomment-937872805,937872805,
theuni,2021-10-20 17:33:54,"Buildsystem/wrapper re-ACK f22af45cb89af46b20ce5764055b87801f2c6ae7.\n\nMy remaining [wrapper nit](https://github.com/bitcoin/bitcoin/pull/23114/commits/7c218da2dd452f5e11196bf849b3a40209a302d0#r718708569) isn't a big deal.",https://github.com/bitcoin/bitcoin/pull/23114#issuecomment-947888077,947888077,
fanquake,2021-10-21 03:23:30,"Guix Build:\n```bash\nbash-5.1# find guix-build-$(git rev-parse --short=12 HEAD)/output/ -type f -print0 | env LC_ALL=C sort -z | xargs -r0 sha256sum\n89b9bc3994ee82f15eb522c6085c88e9d14e1f12887eb64b8fa6eafdba6f78ed  guix-build-29173d6c6ca0/output/aarch64-linux-gnu/SHA256SUMS.part\n2b1689ee1c37759663bc08c86c0c39e09a9567b7dcfb153af6d3c15bb6483081  guix-build-29173d6c6ca0/output/aarch64-linux-gn",https://github.com/bitcoin/bitcoin/pull/23114#issuecomment-948224969,948224969,
michaelfolkson,2021-10-22 15:33:28,"Concept ACK, Approach ACK \n\nFor the benefit of reviewers who weren't at the Core dev [IRC meeting](https://gnusha.org/bitcoin-core-dev/2021-10-21.log) yesterday the build stuff seems to be pretty much ready (thanks to @theuni, @fanquake @dongcarl etc).\n\nIt seems like we are in the final phase of testing for the Minisketch [library](https://github.com/sipa/minisketch) now pre-merge and henc",https://github.com/bitcoin/bitcoin/pull/23114#issuecomment-949739099,949739099,
naumenkogs,2021-10-26 04:55:08,"ACK 29173d6c6ca0cc3be9fa6bf2409a509ffea1a02a\n- low-key reviewed the build system integration (as much as i can)\n- reviewed the new tests\n- made sure it's the right minisketch\n- made sure that it builds\n- made sure it can be called from net_processing which is needed for erlay.\n\n",https://github.com/bitcoin/bitcoin/pull/23114#issuecomment-951558914,951558914,
jarolrod,2021-11-03 01:44:22,"Contributing GUIX hashes, mine match @fanquake \n\n```\n89b9bc3994ee82f15eb522c6085c88e9d14e1f12887eb64b8fa6eafdba6f78ed  guix-build-29173d6c6ca0/output/aarch64-linux-gnu/SHA256SUMS.part\n2b1689ee1c37759663bc08c86c0c39e09a9567b7dcfb153af6d3c15bb6483081  guix-build-29173d6c6ca0/output/aarch64-linux-gnu/bitcoin-29173d6c6ca0-aarch64-linux-gnu-debug.tar.gz\na58477250142ffc319684f935589058431df823",https://github.com/bitcoin/bitcoin/pull/23114#issuecomment-958591560,958591560,
theuni,2021-09-29 16:14:14,"I think this should be ""decoding 11""?",https://github.com/bitcoin/bitcoin/pull/23114#discussion_r718679766,718679766,src/minisketchwrapper.cpp
sipa,2021-09-29 16:19:07,Yup.,https://github.com/bitcoin/bitcoin/pull/23114#discussion_r718683817,718683817,src/minisketchwrapper.cpp
theuni,2021-09-29 16:49:42,"Why use the `optional` version of `Decode` if the value is ignored?\n\nAlso, what's the offset's purpose here? It's not obvious to me what will be in `[0]`.",https://github.com/bitcoin/bitcoin/pull/23114#discussion_r718708569,718708569,src/minisketchwrapper.cpp
fanquake,2021-09-30 00:59:46,Fixed in next push.,https://github.com/bitcoin/bitcoin/pull/23114#discussion_r718983168,718983168,src/minisketchwrapper.cpp
theuni,2021-10-06 16:53:38,I suppose we'll want this to graduate from https://github.com/sipa to https://github.com/bitcoin-core sometime soon before/after merging this. I don't really care much either way.,https://github.com/bitcoin/bitcoin/pull/23114#discussion_r723499103,723499103,doc/developer-notes.md
theuni,2021-10-06 16:58:46,"This is probably only strictly necessary in a few places and is overkill to list globally. As a follow-up, we might want to constrain the includes.",https://github.com/bitcoin/bitcoin/pull/23114#discussion_r723503784,723503784,src/Makefile.am
theuni,2021-10-06 17:01:04,No need for this as minisketch deps are integrated. This is actually probably just failing quietly (rules starting with `-` are allowed to fail).,https://github.com/bitcoin/bitcoin/pull/23114#discussion_r723505582,723505582,src/Makefile.am
fanquake,2021-10-07 04:40:17,Thanks. Fixed in next push.,https://github.com/bitcoin/bitcoin/pull/23114#discussion_r723843171,723843171,src/Makefile.am
fanquake,2021-10-07 04:48:21,"Sure. Also reminded me that we could add a `MINISKETCH_INCLUDE_DIR_INT` var upstream, and use that. Opened a PR: https://github.com/sipa/minisketch/pull/52.",https://github.com/bitcoin/bitcoin/pull/23114#discussion_r723845604,723845604,src/Makefile.am
fanquake,2021-10-12 05:26:12,Now using `MINISKETCH_INCLUDE_DIR_INT` from upstream.,https://github.com/bitcoin/bitcoin/pull/23114#discussion_r726771094,726771094,src/Makefile.am
dongcarl,2021-10-12 14:50:55,Probably a bit clearer to do `have_clzl=no` in the ELSE case?,https://github.com/bitcoin/bitcoin/pull/23114#discussion_r727218189,727218189,configure.ac
dongcarl,2021-10-12 15:10:29,"These seem different from the tests here: https://github.com/sipa/minisketch/blob/89629eb2c7e262b39ba489b93b111760baded4b3/configure.ac#L77-L89\n\nAre there scenarios in which the two tests will differ in opinion?",https://github.com/bitcoin/bitcoin/pull/23114#discussion_r727237647,727237647,configure.ac
dongcarl,2021-10-12 15:19:06,"Seems like this would mean the `bitcoin-wallet` tool also `LDADD`s minisketch, which doesn't sound right to me since it's an offline tool.\n\nI think either `bitcoin-wallet` should not `LDADD` `bitcoin_bin_ldadd` or `MINISKETCH_LIBS` belong somewhere else.",https://github.com/bitcoin/bitcoin/pull/23114#discussion_r727245806,727245806,src/Makefile.am
sipa,2021-10-17 03:02:17,"It seems the Bitcoin Core configure has a single define to indicate whether all of clz/clzl/clzll are available, while the Minisketch one tests for individual ones.\n\nI don't think there are practical systems that have one but not all.",https://github.com/bitcoin/bitcoin/pull/23114#discussion_r730344092,730344092,configure.ac
theuni,2021-10-19 17:40:30,"@sipa I think you got the checks backwards :)\n\nAgree that they're probably all-or-nothing in practice though. I see `__builtin_clzll` already supported in gcc 4.1, released in 2006 (I didn't bother going back any further). We should probably coalesce on one test or another, but I don't really care which.",https://github.com/bitcoin/bitcoin/pull/23114#discussion_r732102601,732102601,configure.ac
theuni,2021-10-19 17:43:33,Agree. This commit probably should not have made it in; it was just meant to demonstrate that linking works. We should instead add the dep as-needed.,https://github.com/bitcoin/bitcoin/pull/23114#discussion_r732104804,732104804,src/Makefile.am
fanquake,2021-10-20 06:33:32,Moved into the else case on next push.,https://github.com/bitcoin/bitcoin/pull/23114#discussion_r732453549,732453549,configure.ac
fanquake,2021-10-20 06:43:00,"`bitcoin-wallet` never used to `LDADD` `bitcoin_bin_ldadd`, but that changed in #18677. I think we could probably revert to not LDADD'ing it, and specify a more concrete list of libraries. I will propose that separately, but for now, will drop this commit, and add the lib in the right place, in the commits it's needed. ",https://github.com/bitcoin/bitcoin/pull/23114#discussion_r732458383,732458383,src/Makefile.am
fanquake,2021-10-20 07:09:16,"Actually, this is just going away entirely for now.",https://github.com/bitcoin/bitcoin/pull/23114#discussion_r732473667,732473667,src/Makefile.am
naumenkogs,2021-10-21 12:48:10,">Also, what's the offset's purpose here? It's not obvious to me what will be in [0].\n\nFrom my reading, it seems to give a random deterministic value?",https://github.com/bitcoin/bitcoin/pull/23114#discussion_r733640010,733640010,src/minisketchwrapper.cpp
sipa,2021-10-21 12:51:23,"It's just to make sure the inputs to the algorithm are vaguely randomized (and also, so the compiler can't optimize the decode call out).",https://github.com/bitcoin/bitcoin/pull/23114#discussion_r733642810,733642810,src/minisketchwrapper.cpp
naumenkogs,2021-10-21 12:53:24,Where does [5] come from?,https://github.com/bitcoin/bitcoin/pull/23114#discussion_r733644632,733644632,src/minisketchwrapper.cpp
sipa,2021-10-21 12:53:44,"As for why the optional version: no strong reason, but this avoids a separate temporary variable to place the result in.",https://github.com/bitcoin/bitcoin/pull/23114#discussion_r733644920,733644920,src/minisketchwrapper.cpp
sipa,2021-10-21 12:56:07,It's the middle of the 11 benchmarks (we're trying to find the implementation with the best median benchmark score).,https://github.com/bitcoin/bitcoin/pull/23114#discussion_r733647009,733647009,src/minisketchwrapper.cpp
naumenkogs,2021-10-25 15:01:48,"Can this wrapper also encapsulate `minisketch_compute_max_elements`? This is the only library-level function that's gonna be leaked into `txreconciliation.cpp`. See how I use it:\n\n```\n        size_t max_elements = minisketch_compute_max_elements(RECON_FIELD_SIZE, remote_sketch_capacity, RECON_FALSE_POSITIVE_COEF);\n        std::vector<uint64_t> differences(max_elements);\n        if (local",https://github.com/bitcoin/bitcoin/pull/23114#discussion_r735692055,735692055,src/minisketchwrapper.h
naumenkogs,2021-10-26 04:53:35,This can be done later though.,https://github.com/bitcoin/bitcoin/pull/23114#discussion_r736143484,736143484,src/minisketchwrapper.h
