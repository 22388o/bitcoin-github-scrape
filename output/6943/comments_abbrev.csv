jgarzik,2015-11-04T22:22:21Z,concept ACK - though it's a bit disappointing to add this checksumming only for one type of record as a special case\n,https://github.com/bitcoin/bitcoin/pull/6943#issuecomment-153887980,153887980,
TheBlueMatt,2015-11-04T22:25:14Z,"The lack of such a checksum is very deliberate as it significantly increases the cost of brute forcing. Not necessarily disagreeing with such a change, just pointing out historical context.\n\nOn November 4, 2015 1:46:56 PM PST, Patrick Strateman notifications@github.com wrote:\n\n> Currently when encrypted wallets are unlocked the encrypted private\n> keys are checked against the public key by de",https://github.com/bitcoin/bitcoin/pull/6943#issuecomment-153888647,153888647,
pstratem,2015-11-04T23:38:29Z,"@TheBlueMatt the hash is over the encrypted private key, not the decrypted private key\n",https://github.com/bitcoin/bitcoin/pull/6943#issuecomment-153905335,153905335,
pstratem,2015-11-04T23:39:37Z,"@jgarzik i'd like to add this for all the entries, but i dont see any reasonable way to do that\n",https://github.com/bitcoin/bitcoin/pull/6943#issuecomment-153905523,153905523,
gmaxwell,2015-11-04T23:50:08Z,"@TheBlueMatt also that original rational doesn't actually work, due to the AES padding scheme used.\n\n(The john the ripper bitcoin core wallet support doesn't even bother checking anything beyond the AES padding. :( )\n",https://github.com/bitcoin/bitcoin/pull/6943#issuecomment-153907613,153907613,
laanwj,2015-11-05T09:55:38Z,"> @TheBlueMatt also that original rational doesn't actually work, due to the AES padding scheme used.\n\nLuckily we perform quite a lot of rounds of key stretching, so it should be quite expensive to bruteforce.\n",https://github.com/bitcoin/bitcoin/pull/6943#issuecomment-154011197,154011197,
jonasschnelli,2015-11-05T10:18:41Z,"concept ACK.\n- There is an vector index issue somewhere (could't trace it down so far): https://travis-ci.org/bitcoin/bitcoin/jobs/89320045#L3784\n- I think this would require to bump the `nWalletVersion` (even if this is backward compatible, we need a way to identify wallet versions in case of later migrations, etc.).\n",https://github.com/bitcoin/bitcoin/pull/6943#issuecomment-154018352,154018352,
TheBlueMatt,2015-11-05T19:31:19Z,@gmaxwell Indeed :( (though I thought at some point we fixed that...guess not)\n,https://github.com/bitcoin/bitcoin/pull/6943#issuecomment-154164936,154164936,
pstratem,2015-11-06T01:47:13Z,With patch 0.270 seconds wall clock time to unlock 160116 encrypted keys.\nWithout patch 1m29.203s wall clock time to unlock 160116 encrypted keys.\n,https://github.com/bitcoin/bitcoin/pull/6943#issuecomment-154259859,154259859,
pstratem,2015-11-07T01:33:01Z,"@jonasschnelli We do not need to bump the wallet version, the change is entirely backwards compatible.\n",https://github.com/bitcoin/bitcoin/pull/6943#issuecomment-154595709,154595709,
jonasschnelli,2015-11-07T19:08:33Z,"@pstratem: Recently I encountered the same problem with backward compatibility and wallet_version (https://github.com/bitcoin/bitcoin/pull/5916). Someone (I think @luke-jr) convinced me that even if it's backward compatibility and version bump is required (or very useful) for future migration handling, etc. Lets say we once switch to a different wallet database. Then it would be helpful to know wh",https://github.com/bitcoin/bitcoin/pull/6943#issuecomment-154740438,154740438,
gmaxwell,2015-11-07T19:25:48Z,"We can bump the version without failing to use the checksum in older versions, which is useful to signal if all the keys in your wallet would have been encoded this this way. Potentially in the newer wallet version presence of the checksum can be mandated.  Check on decrypt could still be used in the old version, etc.\n\nI don't, however, think we want to decline to use this protection for newly w",https://github.com/bitcoin/bitcoin/pull/6943#issuecomment-154741268,154741268,
jonasschnelli,2015-11-05T10:12:07Z,Is there a reason why you preferred `const std::vector<unsigned char> &vchHash` over our `uint256` type?\n,https://github.com/bitcoin/bitcoin/pull/6943#discussion_r43995137,43995137,src/wallet/wallet.cpp
pstratem,2015-11-05T19:49:10Z,"not a strong one, i used uint256 for the hash over unencrypted keys\n\ni'll switch to uint256\n",https://github.com/bitcoin/bitcoin/pull/6943#discussion_r44059911,44059911,src/wallet/wallet.cpp
