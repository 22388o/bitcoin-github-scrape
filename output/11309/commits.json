[
  {
    "sha": "fd849e1b039bcb5856aa705269437211194cdfee",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZDg0OWUxYjAzOWJjYjU4NTZhYTcwNTI2OTQzNzIxMTE5NGNkZmVl",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-09-12T16:30:26Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-09-12T16:30:26Z"
      },
      "message": "Change AcceptToMemoryPool function signature\n\nCombine fLimitFree and fOverrideMempoolLimit into a single boolean:\nbypass_limits.  This is used to indicate that mempool limiting based on feerate\nshould be bypassed.  It is used when readding transactions from a reorg and then\nthe mempool is trimmed to size after all transactions are added and they can be\nevaluated in the context of their descendants. No changes to behavior.",
      "tree": {
        "sha": "0d68822edc4af8ed18c3331919b8759b7e6ab686",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0d68822edc4af8ed18c3331919b8759b7e6ab686"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fd849e1b039bcb5856aa705269437211194cdfee",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd849e1b039bcb5856aa705269437211194cdfee",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fd849e1b039bcb5856aa705269437211194cdfee",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd849e1b039bcb5856aa705269437211194cdfee/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b9bceaf1c081a84d9fcc680372614e797b168a9e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b9bceaf1c081a84d9fcc680372614e797b168a9e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b9bceaf1c081a84d9fcc680372614e797b168a9e"
      }
    ],
    "stats": {
      "total": 48,
      "additions": 27,
      "deletions": 21
    },
    "files": [
      {
        "sha": "7fced41d4fa70b4ccd86f2f142d6ee10024658bd",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd849e1b039bcb5856aa705269437211194cdfee/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd849e1b039bcb5856aa705269437211194cdfee/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=fd849e1b039bcb5856aa705269437211194cdfee",
        "patch": "@@ -1788,7 +1788,8 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n \n         std::list<CTransactionRef> lRemovedTxn;\n \n-        if (!AlreadyHave(inv) && AcceptToMemoryPool(mempool, state, ptx, true, &fMissingInputs, &lRemovedTxn)) {\n+        if (!AlreadyHave(inv) &&\n+            AcceptToMemoryPool(mempool, state, ptx, &fMissingInputs, &lRemovedTxn, false /* bypass_limits */, 0 /* nAbsurdFee */)) {\n             mempool.check(pcoinsTip);\n             RelayTransaction(tx, connman);\n             for (unsigned int i = 0; i < tx.vout.size(); i++) {\n@@ -1826,7 +1827,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n \n                     if (setMisbehaving.count(fromPeer))\n                         continue;\n-                    if (AcceptToMemoryPool(mempool, stateDummy, porphanTx, true, &fMissingInputs2, &lRemovedTxn)) {\n+                    if (AcceptToMemoryPool(mempool, stateDummy, porphanTx, &fMissingInputs2, &lRemovedTxn, false /* bypass_limits */, 0 /* nAbsurdFee */)) {\n                         LogPrint(BCLog::MEMPOOL, \"   accepted orphan tx %s\\n\", orphanHash.ToString());\n                         RelayTransaction(orphanTx, connman);\n                         for (unsigned int i = 0; i < orphanTx.vout.size(); i++) {"
      },
      {
        "sha": "8142fc57122a893b220090f140d46e22b5344bdf",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd849e1b039bcb5856aa705269437211194cdfee/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd849e1b039bcb5856aa705269437211194cdfee/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=fd849e1b039bcb5856aa705269437211194cdfee",
        "patch": "@@ -937,8 +937,8 @@ UniValue sendrawtransaction(const JSONRPCRequest& request)\n         // push to local node and sync with wallets\n         CValidationState state;\n         bool fMissingInputs;\n-        bool fLimitFree = true;\n-        if (!AcceptToMemoryPool(mempool, state, std::move(tx), fLimitFree, &fMissingInputs, nullptr, false, nMaxRawTxFee)) {\n+        if (!AcceptToMemoryPool(mempool, state, std::move(tx), &fMissingInputs,\n+                                nullptr /* plTxnReplaced */, false /* bypass_limits */, nMaxRawTxFee)) {\n             if (state.IsInvalid()) {\n                 throw JSONRPCError(RPC_TRANSACTION_REJECTED, strprintf(\"%i: %s\", state.GetRejectCode(), state.GetRejectReason()));\n             } else {"
      },
      {
        "sha": "82ca93e7dae369b804ca9efa7a1ffee11908dae8",
        "filename": "src/test/txvalidationcache_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd849e1b039bcb5856aa705269437211194cdfee/src/test/txvalidationcache_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd849e1b039bcb5856aa705269437211194cdfee/src/test/txvalidationcache_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidationcache_tests.cpp?ref=fd849e1b039bcb5856aa705269437211194cdfee",
        "patch": "@@ -29,7 +29,8 @@ ToMemPool(CMutableTransaction& tx)\n     LOCK(cs_main);\n \n     CValidationState state;\n-    return AcceptToMemoryPool(mempool, state, MakeTransactionRef(tx), false, nullptr, nullptr, true, 0);\n+    return AcceptToMemoryPool(mempool, state, MakeTransactionRef(tx), nullptr /* pfMissingInputs */,\n+                              nullptr /* plTxnReplaced */, true /* bypass_limits */, 0 /* nAbsurdFee */);\n }\n \n BOOST_FIXTURE_TEST_CASE(tx_mempool_block_doublespend, TestChain100Setup)"
      },
      {
        "sha": "6bfa80ea7c9743bb745a24c19033754c810d08f7",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 12,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd849e1b039bcb5856aa705269437211194cdfee/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd849e1b039bcb5856aa705269437211194cdfee/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=fd849e1b039bcb5856aa705269437211194cdfee",
        "patch": "@@ -384,7 +384,9 @@ void UpdateMempoolForReorg(DisconnectedBlockTransactions &disconnectpool, bool f\n     while (it != disconnectpool.queuedTx.get<insertion_order>().rend()) {\n         // ignore validation errors in resurrected transactions\n         CValidationState stateDummy;\n-        if (!fAddToMempool || (*it)->IsCoinBase() || !AcceptToMemoryPool(mempool, stateDummy, *it, false, nullptr, nullptr, true)) {\n+        if (!fAddToMempool || (*it)->IsCoinBase() ||\n+            !AcceptToMemoryPool(mempool, stateDummy, *it, nullptr /* pfMissingInputs */,\n+                                nullptr /* plTxnReplaced */, true /* bypass_limits */, 0 /* nAbsurdFee */)) {\n             // If the transaction doesn't make it in to the mempool, remove any\n             // transactions that depend on it (which would now be orphans).\n             mempool.removeRecursive(**it, MemPoolRemovalReason::REORG);\n@@ -443,9 +445,9 @@ static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, CValidationSt\n     return CheckInputs(tx, state, view, true, flags, cacheSigStore, true, txdata);\n }\n \n-static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool& pool, CValidationState& state, const CTransactionRef& ptx, bool fLimitFree,\n+static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool& pool, CValidationState& state, const CTransactionRef& ptx,\n                               bool* pfMissingInputs, int64_t nAcceptTime, std::list<CTransactionRef>* plTxnReplaced,\n-                              bool fOverrideMempoolLimit, const CAmount& nAbsurdFee, std::vector<COutPoint>& coins_to_uncache)\n+                              bool bypass_limits, const CAmount& nAbsurdFee, std::vector<COutPoint>& coins_to_uncache)\n {\n     const CTransaction& tx = *ptx;\n     const uint256 hash = tx.GetHash();\n@@ -623,7 +625,7 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n         }\n \n         // No transactions are allowed below minRelayTxFee except from disconnected blocks\n-        if (fLimitFree && nModifiedFees < ::minRelayTxFee.GetFee(nSize)) {\n+        if (!bypass_limits && nModifiedFees < ::minRelayTxFee.GetFee(nSize)) {\n             return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"min relay fee not met\");\n         }\n \n@@ -865,7 +867,7 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n         pool.addUnchecked(hash, entry, setAncestors, validForFeeEstimation);\n \n         // trim mempool and check if tx was trimmed\n-        if (!fOverrideMempoolLimit) {\n+        if (!bypass_limits) {\n             LimitMempoolSize(pool, gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, gArgs.GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY) * 60 * 60);\n             if (!pool.exists(hash))\n                 return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"mempool full\");\n@@ -878,12 +880,12 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n }\n \n /** (try to) add transaction to memory pool with a specified acceptance time **/\n-static bool AcceptToMemoryPoolWithTime(const CChainParams& chainparams, CTxMemPool& pool, CValidationState &state, const CTransactionRef &tx, bool fLimitFree,\n+static bool AcceptToMemoryPoolWithTime(const CChainParams& chainparams, CTxMemPool& pool, CValidationState &state, const CTransactionRef &tx,\n                         bool* pfMissingInputs, int64_t nAcceptTime, std::list<CTransactionRef>* plTxnReplaced,\n-                        bool fOverrideMempoolLimit, const CAmount nAbsurdFee)\n+                        bool bypass_limits, const CAmount nAbsurdFee)\n {\n     std::vector<COutPoint> coins_to_uncache;\n-    bool res = AcceptToMemoryPoolWorker(chainparams, pool, state, tx, fLimitFree, pfMissingInputs, nAcceptTime, plTxnReplaced, fOverrideMempoolLimit, nAbsurdFee, coins_to_uncache);\n+    bool res = AcceptToMemoryPoolWorker(chainparams, pool, state, tx, pfMissingInputs, nAcceptTime, plTxnReplaced, bypass_limits, nAbsurdFee, coins_to_uncache);\n     if (!res) {\n         for (const COutPoint& hashTx : coins_to_uncache)\n             pcoinsTip->Uncache(hashTx);\n@@ -894,12 +896,12 @@ static bool AcceptToMemoryPoolWithTime(const CChainParams& chainparams, CTxMemPo\n     return res;\n }\n \n-bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransactionRef &tx, bool fLimitFree,\n+bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransactionRef &tx,\n                         bool* pfMissingInputs, std::list<CTransactionRef>* plTxnReplaced,\n-                        bool fOverrideMempoolLimit, const CAmount nAbsurdFee)\n+                        bool bypass_limits, const CAmount nAbsurdFee)\n {\n     const CChainParams& chainparams = Params();\n-    return AcceptToMemoryPoolWithTime(chainparams, pool, state, tx, fLimitFree, pfMissingInputs, GetTime(), plTxnReplaced, fOverrideMempoolLimit, nAbsurdFee);\n+    return AcceptToMemoryPoolWithTime(chainparams, pool, state, tx, pfMissingInputs, GetTime(), plTxnReplaced, bypass_limits, nAbsurdFee);\n }\n \n /** Return transaction in txOut, and if it was found inside a block, its hash is placed in hashBlock */\n@@ -4306,7 +4308,8 @@ bool LoadMempool(void)\n             CValidationState state;\n             if (nTime + nExpiryTimeout > nNow) {\n                 LOCK(cs_main);\n-                AcceptToMemoryPoolWithTime(chainparams, mempool, state, tx, true, nullptr, nTime, nullptr, false, 0);\n+                AcceptToMemoryPoolWithTime(chainparams, mempool, state, tx, nullptr /* pfMissingInputs */, nTime,\n+                                           nullptr /* plTxnReplaced */, false /* bypass_limits */, 0 /* nAbsurdFee */);\n                 if (state.IsValid()) {\n                     ++count;\n                 } else {"
      },
      {
        "sha": "d52154f8d431bff7a162f7d55ea160ac90f001ad",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd849e1b039bcb5856aa705269437211194cdfee/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd849e1b039bcb5856aa705269437211194cdfee/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=fd849e1b039bcb5856aa705269437211194cdfee",
        "patch": "@@ -301,9 +301,9 @@ void PruneBlockFilesManual(int nManualPruneHeight);\n \n /** (try to) add transaction to memory pool\n  * plTxnReplaced will be appended to with all transactions replaced from mempool **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransactionRef &tx, bool fLimitFree,\n-                        bool* pfMissingInputs, std::list<CTransactionRef>* plTxnReplaced = nullptr,\n-                        bool fOverrideMempoolLimit=false, const CAmount nAbsurdFee=0);\n+bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransactionRef &tx,\n+                        bool* pfMissingInputs, std::list<CTransactionRef>* plTxnReplaced,\n+                        bool bypass_limits, const CAmount nAbsurdFee);\n \n /** Convert CValidationState to a human-readable message for logging */\n std::string FormatStateMessage(const CValidationState &state);"
      },
      {
        "sha": "575eca0d75a964801adb4b94115e3974009e5265",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd849e1b039bcb5856aa705269437211194cdfee/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd849e1b039bcb5856aa705269437211194cdfee/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=fd849e1b039bcb5856aa705269437211194cdfee",
        "patch": "@@ -4014,5 +4014,6 @@ int CMerkleTx::GetBlocksToMaturity() const\n \n bool CMerkleTx::AcceptToMemoryPool(const CAmount& nAbsurdFee, CValidationState& state)\n {\n-    return ::AcceptToMemoryPool(mempool, state, tx, true, nullptr, nullptr, false, nAbsurdFee);\n+    return ::AcceptToMemoryPool(mempool, state, tx, nullptr /* pfMissingInputs */,\n+                                nullptr /* plTxnReplaced */, false /* bypass_limits */, nAbsurdFee);\n }"
      }
    ]
  },
  {
    "sha": "04f78ab5b94424be9cdef86971b7a92de79effa4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNGY3OGFiNWI5NDQyNGJlOWNkZWY4Njk3MWI3YTkyZGU3OWVmZmE0",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-09-12T16:35:35Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-09-12T16:35:35Z"
      },
      "message": "Do not reject based on mempool min fee when bypass_limits is set.\n\nThis should have always been the case, but we will correctly trim to size after\na reorg which is when bypass_limits is set.",
      "tree": {
        "sha": "47c2749c8cb8bb471474275cb41218f257c6ddd4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/47c2749c8cb8bb471474275cb41218f257c6ddd4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/04f78ab5b94424be9cdef86971b7a92de79effa4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/04f78ab5b94424be9cdef86971b7a92de79effa4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/04f78ab5b94424be9cdef86971b7a92de79effa4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/04f78ab5b94424be9cdef86971b7a92de79effa4/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fd849e1b039bcb5856aa705269437211194cdfee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd849e1b039bcb5856aa705269437211194cdfee",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fd849e1b039bcb5856aa705269437211194cdfee"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "347b84734219b0a2a8a145eabad56a4c5413e06b",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04f78ab5b94424be9cdef86971b7a92de79effa4/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04f78ab5b94424be9cdef86971b7a92de79effa4/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=04f78ab5b94424be9cdef86971b7a92de79effa4",
        "patch": "@@ -620,7 +620,7 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n                 strprintf(\"%d\", nSigOpsCost));\n \n         CAmount mempoolRejectFee = pool.GetMinFee(gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFee(nSize);\n-        if (mempoolRejectFee > 0 && nModifiedFees < mempoolRejectFee) {\n+        if (!bypass_limits && mempoolRejectFee > 0 && nModifiedFees < mempoolRejectFee) {\n             return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"mempool min fee not met\", false, strprintf(\"%d < %d\", nFees, mempoolRejectFee));\n         }\n "
      }
    ]
  },
  {
    "sha": "bf64c3cb34571cfcd2ec4cce29bbf9c49ec3700c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZjY0YzNjYjM0NTcxY2ZjZDJlYzRjY2UyOWJiZjljNDllYzM3MDBj",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-09-12T16:40:06Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-09-12T16:40:06Z"
      },
      "message": "Ignore transactions added to mempool during a reorg for fee estimation purposes.",
      "tree": {
        "sha": "8728b8df2e061f3f2c56fd55229332a39a63aaa2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8728b8df2e061f3f2c56fd55229332a39a63aaa2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bf64c3cb34571cfcd2ec4cce29bbf9c49ec3700c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf64c3cb34571cfcd2ec4cce29bbf9c49ec3700c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bf64c3cb34571cfcd2ec4cce29bbf9c49ec3700c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf64c3cb34571cfcd2ec4cce29bbf9c49ec3700c/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "04f78ab5b94424be9cdef86971b7a92de79effa4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/04f78ab5b94424be9cdef86971b7a92de79effa4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/04f78ab5b94424be9cdef86971b7a92de79effa4"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 6,
      "deletions": 5
    },
    "files": [
      {
        "sha": "ab031d76c75d37d9efb31ff58d50b4bff01b3a75",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf64c3cb34571cfcd2ec4cce29bbf9c49ec3700c/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf64c3cb34571cfcd2ec4cce29bbf9c49ec3700c/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=bf64c3cb34571cfcd2ec4cce29bbf9c49ec3700c",
        "patch": "@@ -857,11 +857,12 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n         }\n         pool.RemoveStaged(allConflicting, false, MemPoolRemovalReason::REPLACED);\n \n-        // This transaction should only count for fee estimation if it isn't a\n-        // BIP 125 replacement transaction (may not be widely supported), the\n-        // node is not behind, and the transaction is not dependent on any other\n-        // transactions in the mempool.\n-        bool validForFeeEstimation = !fReplacementTransaction && IsCurrentForFeeEstimation() && pool.HasNoInputsOf(tx);\n+        // This transaction should only count for fee estimation if:\n+        // - it isn't a BIP 125 replacement transaction (may not be widely supported)\n+        // - it's not being readded during a reorg which bypasses typical mempool fee limits\n+        // - the node is not behind\n+        // - the transaction is not dependent on any other transactions in the mempool\n+        bool validForFeeEstimation = !fReplacementTransaction && !bypass_limits && IsCurrentForFeeEstimation() && pool.HasNoInputsOf(tx);\n \n         // Store transaction in memory\n         pool.addUnchecked(hash, entry, setAncestors, validForFeeEstimation);"
      }
    ]
  }
]