sipa,2014-08-17T12:30:41Z,@laanwj How do you feel about this and its conflicting with #4700?\n,https://github.com/bitcoin/bitcoin/pull/4683#issuecomment-52420639,52420639,
laanwj,2014-08-18T09:59:47Z,"The only serious conflict with #4700 is caused by CCoinsViewCache::BatchWrite now taking a mutable CCoinsView.\n\nBut I'm not sure about the #4700 yet. In my experiments since, I've noticed that tweaking with the cache doesn't seem to have noticable influence on performance at all in syncing/reindexing. The cache mostly acts as a 'write buffer'. The read cache component is less important. Even tho",https://github.com/bitcoin/bitcoin/pull/4683#issuecomment-52472513,52472513,
sipa,2014-08-18T18:55:44Z,"Benchmarked: did a full testnet reindex using:\n\n```\n$ /usr/bin/time -f ""user:%U elapsed:%E maxmem:%M"" ./bitcoind -testnet -reindex -nodaemon -stopafterblockimport -debug=benchmark -dbcache=3000\n```\n\nResulting peak memory usage: 1041 MiB without this patch, 922 MiB with. No difference in speed.\n\nNote that this peak is during the final batch write to LevelDB.\n",https://github.com/bitcoin/bitcoin/pull/4683#issuecomment-52537998,52537998,
gmaxwell,2014-08-23T23:59:23Z,"Looks reasonable to me, I hadn't commented because I'd moved most of my testing to 0.9.3rc1.\n",https://github.com/bitcoin/bitcoin/pull/4683#issuecomment-53171233,53171233,
jgarzik,2014-08-24T00:04:34Z,"ut ACK, though I would have preferred that the script change be in a separate commit.\n",https://github.com/bitcoin/bitcoin/pull/4683#issuecomment-53171382,53171382,
sipa,2014-08-24T00:08:49Z,@jgarzik Done.\n,https://github.com/bitcoin/bitcoin/pull/4683#issuecomment-53171495,53171495,
BitcoinPullTester,2014-08-24T01:25:44Z,"Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/p4683_fff7455deda80bf483422dd7d7c2446e93522f2d/ for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-te",https://github.com/bitcoin/bitcoin/pull/4683#issuecomment-53173473,53173473,
TheBlueMatt,2014-08-24T08:41:16Z,"I didnt do a full reindex, but it does continue to sync,\nACK.\n",https://github.com/bitcoin/bitcoin/pull/4683#issuecomment-53184203,53184203,
laanwj,2014-08-12T12:08:52Z,"As this iterates over the full `mapCoins`, a clear() at the end may be faster than erasing the entries one by one.\n",https://github.com/bitcoin/bitcoin/pull/4683#discussion_r16108919,16108919,src/coins.cpp
sipa,2014-08-12T12:18:48Z,"map.clear() still has to iterate over all entries, while they're already in the CPU cache when we're doing this. Also, it means more memory being freed early while increasing memory in the destination, in theory reducing peak usage.\n",https://github.com/bitcoin/bitcoin/pull/4683#discussion_r16109270,16109270,src/coins.cpp
laanwj,2014-08-12T12:33:47Z,That's true.\n,https://github.com/bitcoin/bitcoin/pull/4683#discussion_r16109814,16109814,src/coins.cpp
sipa,2014-08-12T12:37:05Z,"Hmm, I was reasoning in terms of a treemap, but it's a hashmap now. Just erasing all entries will not cause its hash table to be freed, and clear() afterwards will still iterate over all entries (to potentially erase them), so I'm not sure whether this weighs up against the slightly better peak memory usage.\n",https://github.com/bitcoin/bitcoin/pull/4683#discussion_r16109927,16109927,src/coins.cpp
laanwj,2014-08-12T12:50:48Z,"It probably makes a minimal difference, if at all - let's prioritize the peak memory usage and keep it like this.\n",https://github.com/bitcoin/bitcoin/pull/4683#discussion_r16110429,16110429,src/coins.cpp
