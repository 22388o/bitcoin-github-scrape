[
  {
    "sha": "2a7275827aa151839516d998e8321d4338d24fd1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYTcyNzU4MjdhYTE1MTgzOTUxNmQ5OThlODMyMWQ0MzM4ZDI0ZmQx",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2020-05-01T09:52:49Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2020-07-16T08:36:42Z"
      },
      "message": "build: avoid repetitions when enabling warnings\n\nIntroduce a macro APPEND_FLAG_IF_AVAILABLE() and use that.",
      "tree": {
        "sha": "add9a3ac48b9056017f900a76826e5fb7cec5e73",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/add9a3ac48b9056017f900a76826e5fb7cec5e73"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2a7275827aa151839516d998e8321d4338d24fd1",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAl8QEZ0ACgkQVN8G9ktV\ny7+naB//T9qtkde/40/2oR2NKRchAtxlYgAwhLOhWE9pfgmouKflxnLtdhouoPPP\nEE6DGlIOoGC9I3hbfDy2wBjJW+8ZZ6B9fztKZke2mIu9/kwSBxnd7GV6iqgBzleg\nd4duua+eaqBKJeYvqpR6GHdCrUrCSDMEP52repq8Fou8ryxdZBEHQ6PqHumdOFZs\n6TzHYvAhuLNZLt2MiDv7cyMqNb1sD1OiTT3o+VEQclv5F7Ofyu4AV8f0llsNXsVt\n6LwYFLdTqGxYrwLNBGoljnGSG0m9iN2TG7RWRYO4TO7kdat1A69XaC5woU7zscyM\nKqANcDuoUBPE4aoBzKycBmyJSXIqiW7WrB3YxUqwzZ9qjbWByesnfS32uayewjy1\n8U0v9cn6nsJfOuxY6E0Abdu5xlDA0isx5k/bkt3os/VCSowM68464DpoocMohf03\nIR35+WP2MDszNTHyOwrApAd3J4bvizuM4BiYm+CeR/gLMJwV365jNkkS2xxsueUO\nW1KjLW5FaPmkSkBbl2UJyMsEXKfBTZ5M3RI2bwn4Zx0bbyBByNNbNM7/YVU/PPCH\n2jYrP6XEHMslXkrxnrC76tFHbVXCWssE04MzF6ovEPFcoHbSOn33FHsOjyUMIlP1\nH754JCRIvficxUO84AcEjQZBb45R+anHX1imAzkZk6U0pdehFRaZ+RSEOrXhTn0+\nv3gpUu398GghqGNlVscK3fhBbP+035rXGGSnc9hGuqscVFYpEmEf39Wn20s5D0vL\nxyrbrN9amM6ul+ypu8rE4ikSCvleGMxYxsi0soMILM96/PM1IK1jX6iu+TQIQlTg\nb3KB1sASvjwXuzVhYbr/6Mo4TxbLFo4PYHPP9ScFNyXciEKPrYxCufMXZq9TGLq3\nUoUR8Z+UcgMX4XsF3G6L7yylEc3Lg/dExnFoIJ89ZkpbpCy1TMZth+upxrNB2a1k\nfr43B0hOfyNQswHU+3yhlQFsz7ZRqCTHdYy2glYfHIRuN2OTRjy82SM1ZPfuUI20\nMM67wphnvUQi04D1z6m6DcbY8EilukxHLAnKW2j4jQY4UQsx9addjjQGXCLbeN/5\nfGLacsKzsLUi+2aorAsgyAv0WZzoUE0EXl7rtbjdL+49Bt1W2H5CCbQyvXPbA1Hs\nkvcHdD7h+efTMV2LkCCEZU+mkLZ7qJG1nl3v6t7Vyqe2GAWrv6y/+p0AG8gNk5t6\nObtlFqbwGrBJzS8XaUlzmMk4KNSzRfJe/K9eDnBNPhTEpnMwbBu0fCgOC599pD31\nhPe+0B6krzxHUZJdBOIiZgBgtlkIxwDB41TCd1Cn5uu1AaYMrfyecmgids0y5l7A\nsEIHwxWETZbtNsdOKiNTbFEa1bun+Q==\n=IYiu\n-----END PGP SIGNATURE-----",
        "payload": "tree add9a3ac48b9056017f900a76826e5fb7cec5e73\nparent 6a53c3e390666e37322d6cddd8af2b09b750463d\nauthor Vasil Dimov <vd@FreeBSD.org> 1588326769 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1594888602 +0200\n\nbuild: avoid repetitions when enabling warnings\n\nIntroduce a macro APPEND_FLAG_IF_AVAILABLE() and use that.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a7275827aa151839516d998e8321d4338d24fd1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2a7275827aa151839516d998e8321d4338d24fd1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a7275827aa151839516d998e8321d4338d24fd1/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6a53c3e390666e37322d6cddd8af2b09b750463d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a53c3e390666e37322d6cddd8af2b09b750463d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6a53c3e390666e37322d6cddd8af2b09b750463d"
      }
    ],
    "stats": {
      "total": 65,
      "additions": 35,
      "deletions": 30
    },
    "files": [
      {
        "sha": "708e8f2cc6cbb90f5ff54a2ad9384a7bac18ed2d",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 35,
        "deletions": 30,
        "changes": 65,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2a7275827aa151839516d998e8321d4338d24fd1/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2a7275827aa151839516d998e8321d4338d24fd1/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=2a7275827aa151839516d998e8321d4338d24fd1",
        "patch": "@@ -366,47 +366,52 @@ if test x$use_sanitizers != x; then\n     ]],[[]])])\n fi\n \n+dnl APPEND_FLAG_IF_AVAILABLE([APPEND_TO_THIS_VARIABLE], [-WallExtra], [INPUT])\n+AC_DEFUN([APPEND_FLAG_IF_AVAILABLE], [\n+  AX_CHECK_COMPILE_FLAG([$2], [$1=\"$$1 $2\"],, [[$CXXFLAG_WERROR]], [$3])\n+])\n+\n ERROR_CXXFLAGS=\n if test \"x$enable_werror\" = \"xyes\"; then\n   if test \"x$CXXFLAG_WERROR\" = \"x\"; then\n     AC_MSG_ERROR(\"enable-werror set but -Werror is not usable\")\n   fi\n-  AX_CHECK_COMPILE_FLAG([-Werror=gnu],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=gnu\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Werror=vla],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=vla\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Werror=shadow-field],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=shadow-field\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Werror=switch],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=switch\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Werror=thread-safety],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=thread-safety\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Werror=unused-variable],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=unused-variable\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Werror=date-time],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=date-time\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Werror=return-type],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=return-type\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Werror=conditional-uninitialized],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=conditional-uninitialized\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Werror=sign-compare],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=sign-compare\"],,[[$CXXFLAG_WERROR]])\n+  APPEND_FLAG_IF_AVAILABLE([ERROR_CXXFLAGS], [-Werror=gnu])\n+  APPEND_FLAG_IF_AVAILABLE([ERROR_CXXFLAGS], [-Werror=vla])\n+  APPEND_FLAG_IF_AVAILABLE([ERROR_CXXFLAGS], [-Werror=shadow-field])\n+  APPEND_FLAG_IF_AVAILABLE([ERROR_CXXFLAGS], [-Werror=switch])\n+  APPEND_FLAG_IF_AVAILABLE([ERROR_CXXFLAGS], [-Werror=thread-safety])\n+  APPEND_FLAG_IF_AVAILABLE([ERROR_CXXFLAGS], [-Werror=unused-variable])\n+  APPEND_FLAG_IF_AVAILABLE([ERROR_CXXFLAGS], [-Werror=date-time])\n+  APPEND_FLAG_IF_AVAILABLE([ERROR_CXXFLAGS], [-Werror=return-type])\n+  APPEND_FLAG_IF_AVAILABLE([ERROR_CXXFLAGS], [-Werror=conditional-uninitialized])\n+  APPEND_FLAG_IF_AVAILABLE([ERROR_CXXFLAGS], [-Werror=sign-compare])\n   dnl -Wsuggest-override is broken with GCC before 9.2\n   dnl https://gcc.gnu.org/bugzilla/show_bug.cgi?id=78010\n-  AX_CHECK_COMPILE_FLAG([-Werror=suggest-override],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=suggest-override\"],,[[$CXXFLAG_WERROR]],\n-                        [AC_LANG_SOURCE([[struct A { virtual void f(); }; struct B : A { void f() final; };]])])\n-  AX_CHECK_COMPILE_FLAG([-Werror=unreachable-code-loop-increment],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=unreachable-code-loop-increment\"],,[[$CXXFLAG_WERROR]])\n+  APPEND_FLAG_IF_AVAILABLE([ERROR_CXXFLAGS], [-Werror=suggest-override],\n+                           [AC_LANG_SOURCE([[struct A { virtual void f(); }; struct B : A { void f() final; };]])])\n+  APPEND_FLAG_IF_AVAILABLE([ERROR_CXXFLAGS], [-Werror=unreachable-code-loop-increment])\n fi\n \n if test \"x$CXXFLAGS_overridden\" = \"xno\"; then\n-  AX_CHECK_COMPILE_FLAG([-Wall],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wall\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Wextra],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wextra\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Wgnu],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wgnu\"],,[[$CXXFLAG_WERROR]])\n+  APPEND_FLAG_IF_AVAILABLE([WARN_CXXFLAGS], [-Wall])\n+  APPEND_FLAG_IF_AVAILABLE([WARN_CXXFLAGS], [-Wextra])\n+  APPEND_FLAG_IF_AVAILABLE([WARN_CXXFLAGS], [-Wgnu])\n   dnl some compilers will ignore -Wformat-security without -Wformat, so just combine the two here.\n-  AX_CHECK_COMPILE_FLAG([-Wformat -Wformat-security],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wformat -Wformat-security\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Wvla],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wvla\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Wshadow-field],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wshadow-field\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Wswitch],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wswitch\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Wthread-safety],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wthread-safety\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Wrange-loop-analysis],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wrange-loop-analysis\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Wredundant-decls],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wredundant-decls\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Wunused-variable],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wunused-variable\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Wdate-time],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wdate-time\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Wconditional-uninitialized],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wconditional-uninitialized\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Wsign-compare],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wsign-compare\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Wsuggest-override],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wsuggest-override\"],,[[$CXXFLAG_WERROR]],\n-                        [AC_LANG_SOURCE([[struct A { virtual void f(); }; struct B : A { void f() final; };]])])\n-  AX_CHECK_COMPILE_FLAG([-Wunreachable-code-loop-increment],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wunreachable-code-loop-increment\"],,[[$CXXFLAG_WERROR]])\n+  APPEND_FLAG_IF_AVAILABLE([WARN_CXXFLAGS], [-Wformat -Wformat-security])\n+  APPEND_FLAG_IF_AVAILABLE([WARN_CXXFLAGS], [-Wvla])\n+  APPEND_FLAG_IF_AVAILABLE([WARN_CXXFLAGS], [-Wshadow-field])\n+  APPEND_FLAG_IF_AVAILABLE([WARN_CXXFLAGS], [-Wswitch])\n+  APPEND_FLAG_IF_AVAILABLE([WARN_CXXFLAGS], [-Wthread-safety])\n+  APPEND_FLAG_IF_AVAILABLE([WARN_CXXFLAGS], [-Wrange-loop-analysis])\n+  APPEND_FLAG_IF_AVAILABLE([WARN_CXXFLAGS], [-Wredundant-decls])\n+  APPEND_FLAG_IF_AVAILABLE([WARN_CXXFLAGS], [-Wunused-variable])\n+  APPEND_FLAG_IF_AVAILABLE([WARN_CXXFLAGS], [-Wdate-time])\n+  APPEND_FLAG_IF_AVAILABLE([WARN_CXXFLAGS], [-Wconditional-uninitialized])\n+  APPEND_FLAG_IF_AVAILABLE([WARN_CXXFLAGS], [-Wsign-compare])\n+  APPEND_FLAG_IF_AVAILABLE([WARN_CXXFLAGS], [-Wsuggest-override],\n+                           [AC_LANG_SOURCE([[struct A { virtual void f(); }; struct B : A { void f() final; };]])])\n+  APPEND_FLAG_IF_AVAILABLE([WARN_CXXFLAGS], [-Wunreachable-code-loop-increment])\n \n   dnl Some compilers (gcc) ignore unknown -Wno-* options, but warn about all\n   dnl unknown options if any other warning is produced. Test the -Wfoo case, and"
      }
    ]
  }
]