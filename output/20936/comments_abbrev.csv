practicalswift,2021-01-20 10:03:23,"Concept ACK on building fuzz tests by default, but needs squashing and fixing of failing CI jobs :)\n\nHaven't reviewed any code or build changes.",https://github.com/bitcoin/bitcoin/pull/20936#issuecomment-763489023,763489023,
DrahtBot,2021-01-22 20:28:51,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #20744 ([POC] Use std::filesystem. Remove Boost Filesystem & System by fanquake)\n* #20586 (Fix Windows build with --enabl",https://github.com/bitcoin/bitcoin/pull/20936#issuecomment-765665098,765665098,
sipa,2021-01-23 23:34:39,"The standard ""formula"" for a generic swap is:\n\n```c++\n...\n{\n    using std::swap;\n    swap(a, b);\n}\n...\n```\n\nNot sure what the problem is, but maybe that's worth trying.",https://github.com/bitcoin/bitcoin/pull/20936#issuecomment-766200312,766200312,
danben,2021-01-23 23:46:48,"> The standard ""formula"" for a generic swap is:\n> \n> ```c++\n> ...\n> {\n>     using std::swap;\n>     swap(a, b);\n> }\n> ...\n> ```\n> \n> Not sure what the problem is, but maybe that's worth trying.\n\nThanks, I just hadn't looked carefully enough - it was a swap where one side was a vector location, and Element happened to be bool. Fingers crossed that this fixed it and I can cl",https://github.com/bitcoin/bitcoin/pull/20936#issuecomment-766227913,766227913,
danben,2021-01-24 02:50:51,"Well...almost there. I tried for a while to squash things down into a single commit, but I think Ive failed. The correct patch is at c7746f0 (except for the fact that I accidentally chopped off the first two lines of the commit message and now the linter is complaining), but I don't know how to get rid of the history (I used git rebase -i and manually squashed/dropped and this was the result). If ",https://github.com/bitcoin/bitcoin/pull/20936#issuecomment-766281065,766281065,
MarcoFalke,2021-01-24 07:59:31,"If you want to squash everything into one commit:\n\nReset the state to the latest commit that is in your branch, but not one of your changes.\nThis is usually the latest commit from master that you merged in.\nIn your case, it is 32b191fb66e644c690c94cbfdae6ddbc754769d7.\nSoftly reset to that commit, so that all your changes are staged as one in the git staging area.\n\n```\ngit reset --s",https://github.com/bitcoin/bitcoin/pull/20936#issuecomment-766307944,766307944,
sipa,2021-01-25 08:05:55,"Code-wise, this looks pretty good, and in a short test it also seems to work.\n\nI'm not entirely sure about the meaning of `--{enable,disable}-fuzz` that this introduces. There are really two distinct concepts now that are not exactly the same anymore:\n* Whether or not you're building for some form of actual *fuzzing* (whether through -fsanitize=fuzzer, AFL, or something else). Doing any of t",https://github.com/bitcoin/bitcoin/pull/20936#issuecomment-766629435,766629435,
danben,2021-01-28 21:34:04,"@sipa Based on your comment I wasn't sure if I should make the change you suggested or wait for someone else to weigh in, but I wanted to make sure that I'm not dropping the ball on anything.\n\nI agree that your suggestion would be easy to implement. If we don't want to add another flag (perhaps desirable from a usability perspective?), I could also just disable non-fuzz targets when building w",https://github.com/bitcoin/bitcoin/pull/20936#issuecomment-769413827,769413827,
sipa,2021-01-28 21:44:57,"@danben Yeah, up to you. Feel free to keep the PR as-is.\n\nI don't think there is much convenience difference; in general nobody should touch --disable-fuzz-binary in general (except maybe we do so for release builds).",https://github.com/bitcoin/bitcoin/pull/20936#issuecomment-769419786,769419786,
danben,2021-02-02 00:50:45,"Turned review back on. Two things to note:\n- I have no idea what this appveyor failure is trying to tell me. It involves a file that I didn't touch.\n- I left the new substring check for PROVIDE_MAIN_FUNCTION in order to be able to build some of the other sanitizer tests without disabling the fuzz binary. If anyone feels strongly that this should be reverted then I will.",https://github.com/bitcoin/bitcoin/pull/20936#issuecomment-771266622,771266622,
practicalswift,2021-02-02 09:36:15,"> * I have no idea what this appveyor failure is trying to tell me. It involves a file that I didn't touch.\n\nRebase on top of `master` and appveyor will be happily green again now that #21051 has been merged :)",https://github.com/bitcoin/bitcoin/pull/20936#issuecomment-771502237,771502237,
danben,2021-02-02 17:28:58,"@MarcoFalke Prior to reopening I built and ran honggfuzz (as per doc/fuzzing.md) with no issue. Perhaps it's something to do with my system; how does it break for you?\n\nRe: your question above, I had changed it because (for reasons that I still don't quite understand) the check would pass for me even when specifying e.g. --fsanitize=thread which caused several CI tests to fail now that the fuz",https://github.com/bitcoin/bitcoin/pull/20936#issuecomment-771818313,771818313,
MarcoFalke,2021-02-03 07:39:17,"Oh, sorry. I was testing `master` :man_facepalming: , which means honggfuzz is broken in `master` and fixed in this pull? I'll need to test some more...\n\nEdit: Broken on master and this pr.",https://github.com/bitcoin/bitcoin/pull/20936#issuecomment-772303631,772303631,
MarcoFalke,2021-02-04 12:26:57,">  That said, I would have expected the old check to do the right thing so I'm fairly confused by this.\n\nI am incredibly confused by this as well. Tried to fix  in  #21080",https://github.com/bitcoin/bitcoin/pull/20936#issuecomment-773269322,773269322,
DrahtBot,2021-02-05 11:03:24,"<!--cf906140f33d8803c4a75a2196329ecb-->\nüêô This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a ""draft"".</sub>",https://github.com/bitcoin/bitcoin/pull/20936#issuecomment-773963568,773963568,
MarcoFalke,2021-02-05 18:46:38,"I think what you want now is:\n\n```\nif ENABLE_FUZZ:\n * Run MAIN_FUNCTION configure check\nelse:\n * PROVIDE_MAIN_FUNCTION=yes\nfi",https://github.com/bitcoin/bitcoin/pull/20936#issuecomment-774219010,774219010,
danben,2021-02-05 18:49:29,"> I think what you want now is:\n> \n> ```\n> if ENABLE_FUZZ:\n>  * Run MAIN_FUNCTION configure check\n> else:\n>  * PROVIDE_MAIN_FUNCTION=yes\n> fi\n> ```\n\nYep, got it changed locally and just testing everything now. Should be ready soon.",https://github.com/bitcoin/bitcoin/pull/20936#issuecomment-774220287,774220287,
danben,2021-02-05 19:33:52,"@MarcoFalke Strangely, now I'm seeing the same issue as in #19633. I reinstalled boost and tried a fresh build but it did not help. Pushing blindly for now.",https://github.com/bitcoin/bitcoin/pull/20936#issuecomment-774243778,774243778,
MarcoFalke,2021-02-05 19:40:32,Please squash your commits according to https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#squashing-commits,https://github.com/bitcoin/bitcoin/pull/20936#issuecomment-774246851,774246851,
MarcoFalke,2021-02-06 07:54:56,"review ACK 32cbb06676e2957705d3ca7ff5710c9c3ff22c14 üì≠\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nreview ACK 32cbb06676e2957705d3ca7ff5710c9c3ff22c14 üì≠\n-----BEGIN PGP SIGNATURE-----\n\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUjAcQv/UflCiheoLDkcJSLBL3bLz9eoDY4DFaXXRstC",https://github.com/bitcoin/bitcoin/pull/20936#issuecomment-774420747,774420747,
MarcoFalke,2021-02-06 10:23:22,Upgrade to Tested ACK for libfuzzer and honggfuzz,https://github.com/bitcoin/bitcoin/pull/20936#issuecomment-774442509,774442509,
hebasto,2021-02-08 13:22:05,After merging this PR Windows cross compiling fails. Fixed in #21115.,https://github.com/bitcoin/bitcoin/pull/20936#issuecomment-775146317,775146317,
fanquake,2021-01-22 09:28:29,Isn't this typo an example of a bad argument?,https://github.com/bitcoin/bitcoin/pull/20936#discussion_r562499120,562499120,configure.ac
danben,2021-01-22 15:42:39,"Hi - apologies for making you read the code in this state. Initially I had opened the PR because I had a patch that was working under Linux and hadn't yet discovered the CI tests. Since then I've been pushing sporadically as a sanity check against the CI test behavior on my own machine. I just learned about the ""convert to draft"" feature and applied it for the time being.\n\nI'm not sure how tho",https://github.com/bitcoin/bitcoin/pull/20936#discussion_r562719599,562719599,configure.ac
danben,2021-01-23 15:59:38,(I suppose a third option would be to require someone building under e.g. windows to specify --disable-fuzz),https://github.com/bitcoin/bitcoin/pull/20936#discussion_r563168396,563168396,configure.ac
MarcoFalke,2021-01-25 06:52:08,I don't really like changing code in a build change. Maybe exclude the failing ci config via `--disable-fuzz` for now?,https://github.com/bitcoin/bitcoin/pull/20936#discussion_r563494444,563494444,src/cuckoocache.h
MarcoFalke,2021-01-29 10:01:03,"On a second thought, this might be useful to keep. We don't want to waste resources compiling the wallet, util, cli, qt, bench, ... when the goal is to only fuzz.",https://github.com/bitcoin/bitcoin/pull/20936#discussion_r566707448,566707448,configure.ac
MarcoFalke,2021-01-29 10:02:51,I don't really like changing code in a build change. Maybe exclude the failing ci config via `--disable-fuzz` for now?,https://github.com/bitcoin/bitcoin/pull/20936#discussion_r566708460,566708460,src/test/fuzz/fuzz.cpp
MarcoFalke,2021-01-29 10:03:08,I don't really like changing code in a build change. Maybe exclude the failing ci config via `--disable-fuzz` for now?,https://github.com/bitcoin/bitcoin/pull/20936#discussion_r566708603,566708603,src/test/fuzz/netaddress.cpp
MarcoFalke,2021-01-29 10:03:14,I don't really like changing code in a build change. Maybe exclude the failing ci config via `--disable-fuzz` for now?,https://github.com/bitcoin/bitcoin/pull/20936#discussion_r566708662,566708662,src/test/fuzz/string.cpp
MarcoFalke,2021-01-29 10:03:21,I don't really like changing code in a build change. Maybe exclude the failing ci config via `--disable-fuzz` for now?,https://github.com/bitcoin/bitcoin/pull/20936#discussion_r566708730,566708730,src/test/fuzz/util.h
danben,2021-01-29 17:14:03,"Sorry, I'm confused by this. enable-fuzz refers to whether the fuzz targets should be built, which is now being done by default. It seems that we only want to disable the other targets when building with libfuzzer, afl or honggfuzz (the latter two of which still need to be addressed, which should be easy enough by inspecting CXX_FLAGS). Does this sound right to you?",https://github.com/bitcoin/bitcoin/pull/20936#discussion_r566970362,566970362,configure.ac
danben,2021-01-29 17:22:19,"Actually I'm a bit baffled by this one - the reason for this change was the instantiation of a bool cache in src/test/fuzz/cuckoocache.cpp, which looks like it would have been built whenever enable-fuzz was true. I don't understand how that ever compiled, but if you don't know the answer offhand I'll investigate.",https://github.com/bitcoin/bitcoin/pull/20936#discussion_r566975279,566975279,src/cuckoocache.h
MarcoFalke,2021-01-29 17:27:01,"Before your change enable-fuzz means build the fuzz targets, but disable all other targets\nAfter your change, it should keep that meaning, so that we don't waste compile resources. (I incorrectly assumed that it should go or change meaning).\n\nAfter your change, the only thing that should change is that the fuzz target is always built (whether enable-fuzz or not).\n\nThere *could* be a disa",https://github.com/bitcoin/bitcoin/pull/20936#discussion_r566978090,566978090,configure.ac
MarcoFalke,2021-01-29 17:31:54,"All compilers are broken (as in: They compile wrong code without error, or conversely compile correct code into an incorrect binary). But we should document this brokenness as best as we can, and fix incorrect code separate from feature changes or refactoring or build system changes. Mixing everything into one commit/patchset will make it harder to review and bisect later on.",https://github.com/bitcoin/bitcoin/pull/20936#discussion_r566981098,566981098,src/cuckoocache.h
sipa,2021-01-29 19:31:33,"@MarcoFalke I think we're giving @danben conflicting instructions here.\n\nDid you see https://github.com/bitcoin/bitcoin/pull/20936#issuecomment-766629435? I don't think we can just keep --{enable,disable}-fuzz with the same meaning.",https://github.com/bitcoin/bitcoin/pull/20936#discussion_r567048031,567048031,configure.ac
danben,2021-01-29 23:55:56,"I'm working on a patch that implement's @MarcoFalke's instructions as best I understand them just so that no matter how this gets resolved there will be a good place to begin wrapping things up.\n\nThe one thing that seemed a bit odd to me is this: if enable-fuzz used to mean ""build the fuzz targets, but disable all other targets"" and the expected change is that fuzz targets get built regardless",https://github.com/bitcoin/bitcoin/pull/20936#discussion_r567155824,567155824,configure.ac
MarcoFalke,2021-01-30 07:32:41,"In my comment I assumed that enable-fuzz and disable-fuzz are separate concepts (I don't know if configure can treat them as such). I used different words to describe the same that @sipa did in the previous comment. I don't care about the names of the configure arguments, as long as they achieve what we want :)",https://github.com/bitcoin/bitcoin/pull/20936#discussion_r567212125,567212125,configure.ac
MarcoFalke,2021-01-30 07:35:55,"So this should probably be `--disable-fuzz-binary` in the windows ci (instead of my suggestion `--disable-fuzz`, which might not go well with how configure is supposed to work)",https://github.com/bitcoin/bitcoin/pull/20936#discussion_r567212387,567212387,src/test/fuzz/util.h
MarcoFalke,2021-02-02 10:25:37,I am pretty sure this will break honggfuzz. Is there anything wrong with how this was checked previously?,https://github.com/bitcoin/bitcoin/pull/20936#discussion_r568488570,568488570,configure.ac
MarcoFalke,2021-02-05 09:35:36,"Ok, once you rebase I expect honggfuzz to be broken",https://github.com/bitcoin/bitcoin/pull/20936#discussion_r570837222,570837222,configure.ac
MarcoFalke,2021-02-05 19:39:29,Are the whitespace changes needed?,https://github.com/bitcoin/bitcoin/pull/20936#discussion_r571206516,571206516,configure.ac
MarcoFalke,2021-02-06 08:10:28,"unrelated style nit: This is only used once, so you can inline it",https://github.com/bitcoin/bitcoin/pull/20936#discussion_r571383134,571383134,src/Makefile.test.include
MarcoFalke,2021-02-06 08:11:27,unrelated style nit: This can be called `DPROVIDE_FUZZ_MAIN_FUNCTION` for clarity,https://github.com/bitcoin/bitcoin/pull/20936#discussion_r571383212,571383212,configure.ac
MarcoFalke,2021-02-08 09:07:57,feel free to follow up with pull requests to remove the temporary disable-fuzz-binary,https://github.com/bitcoin/bitcoin/pull/20936#discussion_r571880149,571880149,ci/test/00_setup_env_native_qt5.sh
MarcoFalke,2021-02-08 09:08:05,same,https://github.com/bitcoin/bitcoin/pull/20936#discussion_r571880240,571880240,ci/test/00_setup_env_win64.sh
