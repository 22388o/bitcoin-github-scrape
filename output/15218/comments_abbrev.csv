laanwj,2019-01-21T15:42:25Z,"Concept ACK, but I think `IsInitialBlockDownload` is the wrong place to implement this, as it's a query function, having it suddenly spawn a thread that flushes is unexpected.\n\nWould be better to implement it closer to the validation logic and database update logic itself.",https://github.com/bitcoin/bitcoin/pull/15218#issuecomment-456116167,456116167,
andrewtoth,2019-01-21T23:34:07Z,@laanwj Good point. I refactored to move this behaviour to `ActivateBestChain` in an area where periodic flushes are already expected.,https://github.com/bitcoin/bitcoin/pull/15218#issuecomment-456224773,456224773,
laanwj,2019-01-22T12:29:36Z,"> @laanwj Good point. I refactored to move this behaviour to ActivateBestChain in an area where periodic flushes are already expected.\n\nThanks, much better!",https://github.com/bitcoin/bitcoin/pull/15218#issuecomment-456382561,456382561,
sdaftuar,2019-01-22T20:52:23Z,"I'm not really a fan of this change -- the problem described in #11600 is from an unclean shutdown (ie system crash), where our recovery code could take a long time (but typically would be much faster than doing a -reindex to recover, which is how our code used to work).\n\nThis change doesn't really solve that problem, it just changes the window in which an unclean shutdown could occur (reducin",https://github.com/bitcoin/bitcoin/pull/15218#issuecomment-456558815,456558815,
andrewtoth,2019-01-23T01:18:19Z,"@sdaftuar This change also greatly improves the common workflow of spinning up a high performance instance to sync, then immediately shutting it down and using a cheaper one. Currently, you have to enter it and do a clean shutdown instead of just terminating. Similarly, when syncing to an external drive, you can now just unplug the drive or turn off the machine when finished.\n\nI would argue th",https://github.com/bitcoin/bitcoin/pull/15218#issuecomment-456628736,456628736,
sdaftuar,2019-01-23T17:08:54Z,"> Currently, you have to enter it and do a clean shutdown instead of just terminating.\n\n@andrewtoth We already support this (better, I think) with the `-stopatheight` argument, no?\n\nI don't really view data that is in memory as ""at risk""; I view it as a massive performance optimization that will allow a node to process new blocks at the fastest possible speed while the data hasn't yet been",https://github.com/bitcoin/bitcoin/pull/15218#issuecomment-456885613,456885613,
sipa,2019-01-23T19:31:04Z,"@sdaftuar Maybe this is a bit of a different discussion, but there is another option; namely supporting flushing the dirty state to disk, but without wiping it from the cache. Based on our earlier benchmarking, we wouldn't want to do this purely for maximizing IBD performance, but it could be done at specific times to minimize losses in case of crashes (the once per day flush for example, and also",https://github.com/bitcoin/bitcoin/pull/15218#issuecomment-456935332,456935332,
sdaftuar,2019-01-23T19:43:35Z,"@sipa Agreed, I think that would make a lot more sense as a first pass optimization for the periodic flushes and would also work better for this purpose as well.",https://github.com/bitcoin/bitcoin/pull/15218#issuecomment-456939539,456939539,
gmaxwell,2019-01-24T19:18:26Z,"> . Currently, you have to enter it and do a clean shutdown instead of just terminating. \n\nWell with this, if you ""just terminate"" you're going to end up with a replay of several days blocks at start, which is still ugly, even if less bad via this.\n\nAside, actually if you actually shut off the computer any time during IBD you'll likely completely corrupt the state and need to reindex becau",https://github.com/bitcoin/bitcoin/pull/15218#issuecomment-457321738,457321738,
andrewtoth,2019-01-25T02:22:19Z,"> @andrewtoth We already support this (better, I think) with the `-stopatheight` argument, no?\n\n@sdaftuar Ahh, I never considered using that for this purpose. Thanks!\n\n@gmaxwell It might still be ugly to have a replay of a few days, but much better than making everything unusable for hours. \n\nThere are comments from several people in this PR about adding background writing and writing ",https://github.com/bitcoin/bitcoin/pull/15218#issuecomment-457431998,457431998,
sipa,2019-01-25T02:36:04Z,"@andrewtoth The problem is that right now, causing a flush when exiting IBD will (temporarily) kill your performance right before finishing the sync (because it leaves you with an empty cache). If instead it was a non-clearing flush, there would be no such downside.",https://github.com/bitcoin/bitcoin/pull/15218#issuecomment-457434328,457434328,
sdaftuar,2019-01-29T18:56:40Z,"My experiment in #15265 has changed my view on this a bit -- now I think that we might as well make a change like this for now, but should change the approach slightly to do something like @gmaxwell's proposal so that we don't trigger the flush before we are done syncing:\n\n> Might it be better to trigger the flush the first time it goes 30 seconds without connecting a block and there are no qu",https://github.com/bitcoin/bitcoin/pull/15218#issuecomment-458662734,458662734,
andrewtoth,2019-02-10T20:34:41Z,"@sdaftuar @gmaxwell I've updated this to check every 30 seconds on the scheduler thread if there has been an update to the active chain height. This only actually checks after `IsInitialBlockDownload` is false, which happens if latest block is within a day of the current time. \n\nI'm not sure how to check if there are queued transfers. If this is not sufficient, some guidance on how to do that ",https://github.com/bitcoin/bitcoin/pull/15218#issuecomment-462169529,462169529,
DrahtBot,2019-02-11T03:49:58Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#16839](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16839.html) (Replace Connman and BanMan globals with Nod",https://github.com/bitcoin/bitcoin/pull/15218#issuecomment-462213268,462213268,
MarcoFalke,2019-04-22T14:14:13Z,utACK 5d9aa4c6432bd41e8d65717976293e006a6c732a,https://github.com/bitcoin/bitcoin/pull/15218#issuecomment-485429170,485429170,
sdaftuar,2019-04-22T15:04:08Z,"> I'm not sure how to check if there are queued transfers. If this is not sufficient, some guidance on how to do that would be appreciated.\n\nThere's a variable called `nPeersWithValidatedDownloads` in `net_processing.cpp` which indicates how many peers we are downloading blocks from.  So to implement @gmaxwell's suggestion I think you would just need to expose that variable and then check to s",https://github.com/bitcoin/bitcoin/pull/15218#issuecomment-485443155,485443155,
andrewtoth,2019-04-23T00:57:45Z,@sdaftuar Thanks. Updated.,https://github.com/bitcoin/bitcoin/pull/15218#issuecomment-485602817,485602817,
TheBlueMatt,2019-08-21T18:17:26Z,"-0.5. This is really not the right way to go here, I think. Namely, people with high dbcache may also want to use it after IBD completes (ie cause they want to connect blocks quickly), and this breaks that by wiping the cache completely. Coupling it with a change to not drop non-dirty entries while flushing is the easy fix to make it not have a regression, though a more complete cleanup of backgro",https://github.com/bitcoin/bitcoin/pull/15218#issuecomment-523587757,523587757,
jamesob,2019-08-21T19:14:39Z,"> this breaks that by wiping the cache completely\n\nOn a sort of related note, I think it's kind of crazy that we couple writing back to disk with emptying the in-memory cache. Feels like those should be separate considerations, especially in a case like this.",https://github.com/bitcoin/bitcoin/pull/15218#issuecomment-523609555,523609555,
laanwj,2019-10-08T09:55:18Z,"This PR seems to be too controversial to merge in the current state, and discussion has become inactive. Closing as up for grabs. Let me know if you start work on this again and I'll re-open it.",https://github.com/bitcoin/bitcoin/pull/15218#issuecomment-539441272,539441272,
MarcoFalke,2019-11-15T21:42:53Z,"Could rebase on top of something like: #17487, and then open a new pull request and link to this discussion which is mostly about ""NACK, because this will erase the cache"".",https://github.com/bitcoin/bitcoin/pull/15218#issuecomment-554540031,554540031,
andrewtoth,2019-11-16T03:00:11Z,@MarcoFalke Thanks for bringing that to my attention. What is the benefit of making a new PR instead of reopening this one? Just for visibility?,https://github.com/bitcoin/bitcoin/pull/15218#issuecomment-554597640,554597640,
MarcoFalke,2019-11-16T03:16:49Z,Up to you. Let me know if you want this reopened.,https://github.com/bitcoin/bitcoin/pull/15218#issuecomment-554598794,554598794,
luke-jr,2019-11-16T05:02:30Z,The benefit is that the no-longer-applicable criticism is no longer right there at first glance.,https://github.com/bitcoin/bitcoin/pull/15218#issuecomment-554605063,554605063,
MarcoFalke,2019-11-22T13:09:39Z,"Given that it was found this does not negatively affect performance, see https://github.com/bitcoin/bitcoin/pull/15265#issuecomment-458657451, I think it should be reconsidered in its current form.",https://github.com/bitcoin/bitcoin/pull/15218#issuecomment-557525370,557525370,
andrewtoth,2019-11-22T14:27:09Z,"@MarcoFalke I don't think the takeaway from that comment is that it doesn't affect performance. That was benchmarking IBD for pruned nodes with not emptying the cache on flush. This PR is flushing the dbcache after IBD. I'm sure for a non-pruned node with a high dbcache this will negatively affect performance directly after the flush, as @TheBlueMatt 's comment points out.",https://github.com/bitcoin/bitcoin/pull/15218#issuecomment-557551815,557551815,
andrewtoth,2019-11-22T14:31:20Z,"If #17487 gets merged I will rebase this, perhaps without checking for active peers since the cache would no longer be affected and it will make the diff smaller.",https://github.com/bitcoin/bitcoin/pull/15218#issuecomment-557553220,557553220,
Sjors,2019-11-23T11:26:42Z,"Concept ACK on doing a `Flush(erase=false)` at the end of IBD once support for that is merged. It probably still makes sense to wait a little bit (e.g. checking for active peers), otherwise the user might be bothered with this flush right before sync really finishes.",https://github.com/bitcoin/bitcoin/pull/15218#issuecomment-557789811,557789811,
practicalswift,2019-01-20T20:19:59Z,Could be written as `std::thread(FlushStateToDisk).detach();`?,https://github.com/bitcoin/bitcoin/pull/15218#discussion_r249294009,249294009,src/validation.cpp
andrewtoth,2019-01-20T20:23:47Z,"No, because `FlushStateToDisk` is overloaded and the compiler can't determine which function to call in that case.",https://github.com/bitcoin/bitcoin/pull/15218#discussion_r249294143,249294143,src/validation.cpp
practicalswift,2019-01-20T20:35:47Z,"@andrewtoth Ah, yes! Thanks!\n\n```\n$ git grep ' FlushStateToDisk.*{'\nsrc/validation.cpp:bool static FlushStateToDisk(const CChainParams& chainparams, CValidationState &state, FlushStateMode mode, int nManualPruneHeight) {\nsrc/validation.cpp:void FlushStateToDisk() {\n```",https://github.com/bitcoin/bitcoin/pull/15218#discussion_r249294554,249294554,src/validation.cpp
practicalswift,2019-01-22T06:37:07Z,Wrong indentation :-),https://github.com/bitcoin/bitcoin/pull/15218#discussion_r249655399,249655399,src/validation.cpp
andrewtoth,2019-01-22T14:25:56Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/15218#discussion_r249799715,249799715,src/validation.cpp
ken2812221,2019-01-22T14:51:15Z,I think that this variable should be the member of CChainState to avoid share same variable if we have two CChainState object in the program.,https://github.com/bitcoin/bitcoin/pull/15218#discussion_r249810717,249810717,src/validation.cpp
andrewtoth,2019-01-23T01:34:14Z,Done.,https://github.com/bitcoin/bitcoin/pull/15218#discussion_r250027236,250027236,src/validation.cpp
MarcoFalke,2019-01-24T19:29:07Z,Seems unrelated to the changes?,https://github.com/bitcoin/bitcoin/pull/15218#discussion_r250746344,250746344,test/functional/mempool_accept.py
andrewtoth,2019-01-25T01:44:54Z,The test below that checks if a mined transaction can be added to the mempool will fail after this flush is triggered when a block is generated. It rejects the transaction with the `missing-inputs` message rather than the expected `tx-already-known`. By triggering the flush here the test passes.,https://github.com/bitcoin/bitcoin/pull/15218#discussion_r250842130,250842130,test/functional/mempool_accept.py
practicalswift,2019-02-10T21:12:52Z,Lifetime issue with `did_initial_flush` and `last_chain_height` when `AppInitMain` goes out of scope?,https://github.com/bitcoin/bitcoin/pull/15218#discussion_r255356011,255356011,src/init.cpp
andrewtoth,2019-02-10T22:06:06Z,Moved them inside the lambda as static variables.,https://github.com/bitcoin/bitcoin/pull/15218#discussion_r255358401,255358401,src/init.cpp
luke-jr,2019-04-17T06:33:53Z,Can't we just unschedule the task?,https://github.com/bitcoin/bitcoin/pull/15218#discussion_r276096258,276096258,src/init.cpp
andrewtoth,2019-04-18T02:44:00Z,"Unless I'm missing something, I don't think it's possible to unschedule without making a lot more changes https://github.com/bitcoin/bitcoin/blob/master/src/scheduler.h#L58 ",https://github.com/bitcoin/bitcoin/pull/15218#discussion_r276501009,276501009,src/init.cpp
luke-jr,2019-04-19T02:17:25Z,Use `scheduleFromNow` conditionally?,https://github.com/bitcoin/bitcoin/pull/15218#discussion_r276886513,276886513,src/init.cpp
andrewtoth,2019-04-19T16:31:17Z,Updated. How is that?,https://github.com/bitcoin/bitcoin/pull/15218#discussion_r277030073,277030073,src/init.cpp
luke-jr,2019-04-19T17:01:54Z,Nit: extra space on the end,https://github.com/bitcoin/bitcoin/pull/15218#discussion_r277037222,277037222,src/init.cpp
luke-jr,2019-04-19T17:02:15Z,I don't understand the purpose of `*` before `FlushAfterSync`.,https://github.com/bitcoin/bitcoin/pull/15218#discussion_r277037329,277037329,src/init.cpp
andrewtoth,2019-04-19T17:23:22Z,Removed.,https://github.com/bitcoin/bitcoin/pull/15218#discussion_r277041892,277041892,src/init.cpp
andrewtoth,2019-04-19T17:23:35Z,Removed them.,https://github.com/bitcoin/bitcoin/pull/15218#discussion_r277041932,277041932,src/init.cpp
MarcoFalke,2019-04-19T21:10:15Z,"doc-nit: This comment should be moved down after the `if` or as docstring on top of the method, imo. The condition in the if below is ""initial sync is *not* finished"".",https://github.com/bitcoin/bitcoin/pull/15218#discussion_r277092602,277092602,src/init.cpp
andrewtoth,2019-04-20T15:04:52Z,Updated comments to align with coding style.,https://github.com/bitcoin/bitcoin/pull/15218#discussion_r277137392,277137392,src/init.cpp
MarcoFalke,2019-04-23T11:47:15Z,"Annotations in definitions are ignored, they need to be in the declaration\n\n```suggestion\nint GetNumberOfPeersWithValidatedDownloads()\n```",https://github.com/bitcoin/bitcoin/pull/15218#discussion_r277636926,277636926,src/net_processing.cpp
andrewtoth,2019-04-23T14:05:15Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/15218#discussion_r277695089,277695089,src/net_processing.cpp
