[
  {
    "sha": "50b6533aa2a9ccbc758aaf5a9f6dfa1c9433bff1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MGI2NTMzYWEyYTljY2JjNzU4YWFmNWE5ZjZkZmExYzk0MzNiZmYx",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2018-04-27T18:01:02Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2018-04-27T18:44:22Z"
      },
      "message": "scripted-diff: Rename SetBestChain callback ChainStateFlushed\n\nThis much more accurately captures the meaning of the callback.\n\n-BEGIN VERIFY SCRIPT-\nsed -i 's/SetBestChain/ChainStateFlushed/g' src/validationinterface.h src/validationinterface.cpp src/wallet/wallet.h src/wallet/wallet.cpp src/validation.cpp src/index/txindex.h src/index/txindex.cpp\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "74bd0ba9d60d49940619ca47831f6d68dda0c4be",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/74bd0ba9d60d49940619ca47831f6d68dda0c4be"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/50b6533aa2a9ccbc758aaf5a9f6dfa1c9433bff1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/50b6533aa2a9ccbc758aaf5a9f6dfa1c9433bff1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/50b6533aa2a9ccbc758aaf5a9f6dfa1c9433bff1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/50b6533aa2a9ccbc758aaf5a9f6dfa1c9433bff1/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "17266a13067c061783e0428c6200985ed8872b16",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17266a13067c061783e0428c6200985ed8872b16",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/17266a13067c061783e0428c6200985ed8872b16"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 16,
      "deletions": 16
    },
    "files": [
      {
        "sha": "0bb553ee6aac3522b5ed23b35516a509400ec70a",
        "filename": "src/index/txindex.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50b6533aa2a9ccbc758aaf5a9f6dfa1c9433bff1/src/index/txindex.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50b6533aa2a9ccbc758aaf5a9f6dfa1c9433bff1/src/index/txindex.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/txindex.cpp?ref=50b6533aa2a9ccbc758aaf5a9f6dfa1c9433bff1",
        "patch": "@@ -192,7 +192,7 @@ void TxIndex::BlockConnected(const std::shared_ptr<const CBlock>& block, const C\n     }\n }\n \n-void TxIndex::SetBestChain(const CBlockLocator& locator)\n+void TxIndex::ChainStateFlushed(const CBlockLocator& locator)\n {\n     if (!m_synced) {\n         return;\n@@ -211,7 +211,7 @@ void TxIndex::SetBestChain(const CBlockLocator& locator)\n         return;\n     }\n \n-    // This checks that SetBestChain callbacks are received after BlockConnected. The check may fail\n+    // This checks that ChainStateFlushed callbacks are received after BlockConnected. The check may fail\n     // immediately after the the sync thread catches up and sets m_synced. Consider the case where\n     // there is a reorg and the blocks on the stale branch are in the ValidationInterface queue\n     // backlog even after the sync thread has caught up to the new chain tip. In this unlikely"
      },
      {
        "sha": "4937bd64e9f8972bf9052d9cc2845e26c8b44661",
        "filename": "src/index/txindex.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50b6533aa2a9ccbc758aaf5a9f6dfa1c9433bff1/src/index/txindex.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50b6533aa2a9ccbc758aaf5a9f6dfa1c9433bff1/src/index/txindex.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/txindex.h?ref=50b6533aa2a9ccbc758aaf5a9f6dfa1c9433bff1",
        "patch": "@@ -55,7 +55,7 @@ class TxIndex final : public CValidationInterface\n     void BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex,\n                         const std::vector<CTransactionRef>& txn_conflicted) override;\n \n-    void SetBestChain(const CBlockLocator& locator) override;\n+    void ChainStateFlushed(const CBlockLocator& locator) override;\n \n public:\n     /// Constructs the TxIndex, which becomes available to be queried."
      },
      {
        "sha": "6ab99f1bd699bdae481a5903239a300d9c610a98",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50b6533aa2a9ccbc758aaf5a9f6dfa1c9433bff1/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50b6533aa2a9ccbc758aaf5a9f6dfa1c9433bff1/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=50b6533aa2a9ccbc758aaf5a9f6dfa1c9433bff1",
        "patch": "@@ -2160,7 +2160,7 @@ bool static FlushStateToDisk(const CChainParams& chainparams, CValidationState &\n     }\n     if (fDoFullFlush || ((mode == FlushStateMode::ALWAYS || mode == FlushStateMode::PERIODIC) && nNow > nLastSetChain + (int64_t)DATABASE_WRITE_INTERVAL * 1000000)) {\n         // Update best block in wallet (so we can detect restored wallets).\n-        GetMainSignals().SetBestChain(chainActive.GetLocator());\n+        GetMainSignals().ChainStateFlushed(chainActive.GetLocator());\n         nLastSetChain = nNow;\n     }\n     } catch (const std::runtime_error& e) {"
      },
      {
        "sha": "f328d2d14be9af9bff48b942eedf9169c94ca8e8",
        "filename": "src/validationinterface.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50b6533aa2a9ccbc758aaf5a9f6dfa1c9433bff1/src/validationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50b6533aa2a9ccbc758aaf5a9f6dfa1c9433bff1/src/validationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.cpp?ref=50b6533aa2a9ccbc758aaf5a9f6dfa1c9433bff1",
        "patch": "@@ -25,7 +25,7 @@ struct MainSignalsInstance {\n     boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex, const std::vector<CTransactionRef>&)> BlockConnected;\n     boost::signals2::signal<void (const std::shared_ptr<const CBlock> &)> BlockDisconnected;\n     boost::signals2::signal<void (const CTransactionRef &)> TransactionRemovedFromMempool;\n-    boost::signals2::signal<void (const CBlockLocator &)> SetBestChain;\n+    boost::signals2::signal<void (const CBlockLocator &)> ChainStateFlushed;\n     boost::signals2::signal<void (const uint256 &)> Inventory;\n     boost::signals2::signal<void (int64_t nBestBlockTime, CConnman* connman)> Broadcast;\n     boost::signals2::signal<void (const CBlock&, const CValidationState&)> BlockChecked;\n@@ -80,7 +80,7 @@ void RegisterValidationInterface(CValidationInterface* pwalletIn) {\n     g_signals.m_internals->BlockConnected.connect(boost::bind(&CValidationInterface::BlockConnected, pwalletIn, _1, _2, _3));\n     g_signals.m_internals->BlockDisconnected.connect(boost::bind(&CValidationInterface::BlockDisconnected, pwalletIn, _1));\n     g_signals.m_internals->TransactionRemovedFromMempool.connect(boost::bind(&CValidationInterface::TransactionRemovedFromMempool, pwalletIn, _1));\n-    g_signals.m_internals->SetBestChain.connect(boost::bind(&CValidationInterface::SetBestChain, pwalletIn, _1));\n+    g_signals.m_internals->ChainStateFlushed.connect(boost::bind(&CValidationInterface::ChainStateFlushed, pwalletIn, _1));\n     g_signals.m_internals->Inventory.connect(boost::bind(&CValidationInterface::Inventory, pwalletIn, _1));\n     g_signals.m_internals->Broadcast.connect(boost::bind(&CValidationInterface::ResendWalletTransactions, pwalletIn, _1, _2));\n     g_signals.m_internals->BlockChecked.connect(boost::bind(&CValidationInterface::BlockChecked, pwalletIn, _1, _2));\n@@ -91,7 +91,7 @@ void UnregisterValidationInterface(CValidationInterface* pwalletIn) {\n     g_signals.m_internals->BlockChecked.disconnect(boost::bind(&CValidationInterface::BlockChecked, pwalletIn, _1, _2));\n     g_signals.m_internals->Broadcast.disconnect(boost::bind(&CValidationInterface::ResendWalletTransactions, pwalletIn, _1, _2));\n     g_signals.m_internals->Inventory.disconnect(boost::bind(&CValidationInterface::Inventory, pwalletIn, _1));\n-    g_signals.m_internals->SetBestChain.disconnect(boost::bind(&CValidationInterface::SetBestChain, pwalletIn, _1));\n+    g_signals.m_internals->ChainStateFlushed.disconnect(boost::bind(&CValidationInterface::ChainStateFlushed, pwalletIn, _1));\n     g_signals.m_internals->TransactionAddedToMempool.disconnect(boost::bind(&CValidationInterface::TransactionAddedToMempool, pwalletIn, _1));\n     g_signals.m_internals->BlockConnected.disconnect(boost::bind(&CValidationInterface::BlockConnected, pwalletIn, _1, _2, _3));\n     g_signals.m_internals->BlockDisconnected.disconnect(boost::bind(&CValidationInterface::BlockDisconnected, pwalletIn, _1));\n@@ -107,7 +107,7 @@ void UnregisterAllValidationInterfaces() {\n     g_signals.m_internals->BlockChecked.disconnect_all_slots();\n     g_signals.m_internals->Broadcast.disconnect_all_slots();\n     g_signals.m_internals->Inventory.disconnect_all_slots();\n-    g_signals.m_internals->SetBestChain.disconnect_all_slots();\n+    g_signals.m_internals->ChainStateFlushed.disconnect_all_slots();\n     g_signals.m_internals->TransactionAddedToMempool.disconnect_all_slots();\n     g_signals.m_internals->BlockConnected.disconnect_all_slots();\n     g_signals.m_internals->BlockDisconnected.disconnect_all_slots();\n@@ -166,9 +166,9 @@ void CMainSignals::BlockDisconnected(const std::shared_ptr<const CBlock> &pblock\n     });\n }\n \n-void CMainSignals::SetBestChain(const CBlockLocator &locator) {\n+void CMainSignals::ChainStateFlushed(const CBlockLocator &locator) {\n     m_internals->m_schedulerClient.AddToProcessQueue([locator, this] {\n-        m_internals->SetBestChain(locator);\n+        m_internals->ChainStateFlushed(locator);\n     });\n }\n "
      },
      {
        "sha": "6089bc2b3c0d2eb84770be56e655ecbc8cb83b56",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50b6533aa2a9ccbc758aaf5a9f6dfa1c9433bff1/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50b6533aa2a9ccbc758aaf5a9f6dfa1c9433bff1/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=50b6533aa2a9ccbc758aaf5a9f6dfa1c9433bff1",
        "patch": "@@ -101,7 +101,7 @@ class CValidationInterface {\n      *\n      * Called on a background thread.\n      */\n-    virtual void SetBestChain(const CBlockLocator &locator) {}\n+    virtual void ChainStateFlushed(const CBlockLocator &locator) {}\n     /**\n      * Notifies listeners about an inventory item being seen on the network.\n      *\n@@ -157,7 +157,7 @@ class CMainSignals {\n     void TransactionAddedToMempool(const CTransactionRef &);\n     void BlockConnected(const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex, const std::shared_ptr<const std::vector<CTransactionRef>> &);\n     void BlockDisconnected(const std::shared_ptr<const CBlock> &);\n-    void SetBestChain(const CBlockLocator &);\n+    void ChainStateFlushed(const CBlockLocator &);\n     void Inventory(const uint256 &);\n     void Broadcast(int64_t nBestBlockTime, CConnman* connman);\n     void BlockChecked(const CBlock&, const CValidationState&);"
      },
      {
        "sha": "123252fdcedbc69a3f189a10c7129f0bcf6113b2",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50b6533aa2a9ccbc758aaf5a9f6dfa1c9433bff1/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50b6533aa2a9ccbc758aaf5a9f6dfa1c9433bff1/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=50b6533aa2a9ccbc758aaf5a9f6dfa1c9433bff1",
        "patch": "@@ -447,7 +447,7 @@ bool CWallet::ChangeWalletPassphrase(const SecureString& strOldWalletPassphrase,\n     return false;\n }\n \n-void CWallet::SetBestChain(const CBlockLocator& loc)\n+void CWallet::ChainStateFlushed(const CBlockLocator& loc)\n {\n     WalletBatch batch(*database);\n     batch.WriteBestBlock(loc);\n@@ -4032,7 +4032,7 @@ CWallet* CWallet::CreateWalletFromFile(const std::string& name, const fs::path&\n             return nullptr;\n         }\n \n-        walletInstance->SetBestChain(chainActive.GetLocator());\n+        walletInstance->ChainStateFlushed(chainActive.GetLocator());\n     } else if (gArgs.IsArgSet(\"-usehd\")) {\n         bool useHD = gArgs.GetBoolArg(\"-usehd\", true);\n         if (walletInstance->IsHDEnabled() && !useHD) {\n@@ -4174,7 +4174,7 @@ CWallet* CWallet::CreateWalletFromFile(const std::string& name, const fs::path&\n             walletInstance->ScanForWalletTransactions(pindexRescan, nullptr, reserver, true);\n         }\n         LogPrintf(\" rescan      %15dms\\n\", GetTimeMillis() - nStart);\n-        walletInstance->SetBestChain(chainActive.GetLocator());\n+        walletInstance->ChainStateFlushed(chainActive.GetLocator());\n         walletInstance->database->IncrementUpdateCounter();\n \n         // Restore wallet transaction metadata after -zapwallettxes=1"
      },
      {
        "sha": "d24ae1186fd6324997fa911f1f69edd8a41fd75d",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50b6533aa2a9ccbc758aaf5a9f6dfa1c9433bff1/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50b6533aa2a9ccbc758aaf5a9f6dfa1c9433bff1/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=50b6533aa2a9ccbc758aaf5a9f6dfa1c9433bff1",
        "patch": "@@ -1013,7 +1013,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     bool IsAllFromMe(const CTransaction& tx, const isminefilter& filter) const;\n     CAmount GetCredit(const CTransaction& tx, const isminefilter& filter) const;\n     CAmount GetChange(const CTransaction& tx) const;\n-    void SetBestChain(const CBlockLocator& loc) override;\n+    void ChainStateFlushed(const CBlockLocator& loc) override;\n \n     DBErrors LoadWallet(bool& fFirstRunRet);\n     DBErrors ZapWalletTx(std::vector<CWalletTx>& vWtx);"
      }
    ]
  },
  {
    "sha": "9cb6cdc59f9eb826b70ebbb6353a5bcee74996e3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5Y2I2Y2RjNTlmOWViODI2YjcwZWJiYjYzNTNhNWJjZWU3NDk5NmUz",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2018-04-27T18:08:39Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2018-04-27T18:44:56Z"
      },
      "message": "Simplify semantics of ChainStateFlushed callback\n\nPreviously, ChainStateFlushed would fire either if a full flush\ncompleted (which can happen due to memory limits, forced flush, or\non its own DATABASE_WRITE_INTERVAL timer) *or* on a\nChainStateFlushed-specific DATABASE_WRITE_INTERVAL timer. This is\nboth less clear for clients (as there are no guarantees about a\nflush having actually happened prior to the call), and reults in\nextra flushes not clearly intended by the code. We drop the second\ncase, providing a strong guarantee without removing the periodit\ntimer-based flushing.",
      "tree": {
        "sha": "1299e0bd9eb3d857dfacf9f18a7e761ef20be5a2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1299e0bd9eb3d857dfacf9f18a7e761ef20be5a2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9cb6cdc59f9eb826b70ebbb6353a5bcee74996e3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9cb6cdc59f9eb826b70ebbb6353a5bcee74996e3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9cb6cdc59f9eb826b70ebbb6353a5bcee74996e3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9cb6cdc59f9eb826b70ebbb6353a5bcee74996e3/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "50b6533aa2a9ccbc758aaf5a9f6dfa1c9433bff1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/50b6533aa2a9ccbc758aaf5a9f6dfa1c9433bff1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/50b6533aa2a9ccbc758aaf5a9f6dfa1c9433bff1"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 17,
      "deletions": 10
    },
    "files": [
      {
        "sha": "1b9e9827532ed3ee4aa93d48fcdef79c3c75f0ed",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 10,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9cb6cdc59f9eb826b70ebbb6353a5bcee74996e3/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9cb6cdc59f9eb826b70ebbb6353a5bcee74996e3/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=9cb6cdc59f9eb826b70ebbb6353a5bcee74996e3",
        "patch": "@@ -2066,13 +2066,12 @@ bool static FlushStateToDisk(const CChainParams& chainparams, CValidationState &\n     LOCK(cs_main);\n     static int64_t nLastWrite = 0;\n     static int64_t nLastFlush = 0;\n-    static int64_t nLastSetChain = 0;\n     std::set<int> setFilesToPrune;\n-    bool fFlushForPrune = false;\n-    bool fDoFullFlush = false;\n-    int64_t nNow = 0;\n+    bool full_flush_completed = false;\n     try {\n     {\n+        bool fFlushForPrune = false;\n+        bool fDoFullFlush = false;\n         LOCK(cs_LastBlockFile);\n         if (fPruneMode && (fCheckForPruning || nManualPruneHeight > 0) && !fReindex) {\n             if (nManualPruneHeight > 0) {\n@@ -2089,17 +2088,14 @@ bool static FlushStateToDisk(const CChainParams& chainparams, CValidationState &\n                 }\n             }\n         }\n-        nNow = GetTimeMicros();\n+        int64_t nNow = GetTimeMicros();\n         // Avoid writing/flushing immediately after startup.\n         if (nLastWrite == 0) {\n             nLastWrite = nNow;\n         }\n         if (nLastFlush == 0) {\n             nLastFlush = nNow;\n         }\n-        if (nLastSetChain == 0) {\n-            nLastSetChain = nNow;\n-        }\n         int64_t nMempoolSizeMax = gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n         int64_t cacheSize = pcoinsTip->DynamicMemoryUsage();\n         int64_t nTotalSpace = nCoinCacheUsage + std::max<int64_t>(nMempoolSizeMax - nMempoolUsage, 0);\n@@ -2156,12 +2152,12 @@ bool static FlushStateToDisk(const CChainParams& chainparams, CValidationState &\n             if (!pcoinsTip->Flush())\n                 return AbortNode(state, \"Failed to write to coin database\");\n             nLastFlush = nNow;\n+            full_flush_completed = true;\n         }\n     }\n-    if (fDoFullFlush || ((mode == FlushStateMode::ALWAYS || mode == FlushStateMode::PERIODIC) && nNow > nLastSetChain + (int64_t)DATABASE_WRITE_INTERVAL * 1000000)) {\n+    if (full_flush_completed) {\n         // Update best block in wallet (so we can detect restored wallets).\n         GetMainSignals().ChainStateFlushed(chainActive.GetLocator());\n-        nLastSetChain = nNow;\n     }\n     } catch (const std::runtime_error& e) {\n         return AbortNode(state, std::string(\"System error while flushing: \") + e.what());"
      },
      {
        "sha": "3a5fed0106e5b4252930296c94fc4f9246e30ef2",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9cb6cdc59f9eb826b70ebbb6353a5bcee74996e3/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9cb6cdc59f9eb826b70ebbb6353a5bcee74996e3/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=9cb6cdc59f9eb826b70ebbb6353a5bcee74996e3",
        "patch": "@@ -99,6 +99,17 @@ class CValidationInterface {\n     /**\n      * Notifies listeners of the new active block chain on-disk.\n      *\n+     * Prior to this callback, any updates are not guaranteed to persist on disk\n+     * (ie clients need to handle shutdown/restart safety by being able to\n+     * understand when some updates were lost due to unclean shutdown).\n+     *\n+     * When this callback is invoked, the validation changes done by any prior\n+     * callback are guaranteed to exist on disk and survive a restart, including\n+     * an unclean shutdown.\n+     *\n+     * Provides a locator describing the best chain, which is likely useful for\n+     * storing current state on disk in client DBs.\n+     *\n      * Called on a background thread.\n      */\n     virtual void ChainStateFlushed(const CBlockLocator &locator) {}"
      }
    ]
  }
]