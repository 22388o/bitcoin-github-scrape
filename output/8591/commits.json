[
  {
    "sha": "36eb2ca62076b598fcaf42004d74b1bf1db66c16",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNmViMmNhNjIwNzZiNTk4ZmNhZjQyMDA0ZDc0YjFiZjFkYjY2YzE2",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2016-02-02T18:55:21Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2016-08-25T13:47:52Z"
      },
      "message": "Do not relay or mine excessive sighash transactions\n\nThis is a belt-and-suspenders fix to make sure CreateNewBlock() or external mining software can never produce a block that violates the MAX_BLOCK_SIGHASH rule.\n\nIt does this by rejecting transactions that do too much signature hashing -- they are not added to the memory pool, and so will not be considered for inclusion in new blocks.\n\nHow the code works: every transaction uses up some fraction of the MAX_BLOCK_SIZE limit and the MAX_BLOCK_SIGHASH limit. If a transaction uses up a larger fraction of the SIGHASH limit than the SIZE limit, it is rejected. That ensures that no matter which transactions are selected for the block, the SIZE limit will be hit before the SIGHASH limit.\n\nThis is a much simpler solution than modifying CreateNewBlock or external transaction selection software to keep track of the SIZE limit, the SIGOPS limit, AND the new SIGHASH limit.\n\nThis is belt-and-suspenders because, in practice, the 100,000-byte IsStandard size limit prevents the block SIGHASH limit from being hit.\n\nThe IsStandard code related to the old SIGOPS limit is left unchanged.\n\nConflicts:\n\tsrc/main.cpp",
      "tree": {
        "sha": "c522d7c1a57cf866f172192d7f512ad19f231c6a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c522d7c1a57cf866f172192d7f512ad19f231c6a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/36eb2ca62076b598fcaf42004d74b1bf1db66c16",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36eb2ca62076b598fcaf42004d74b1bf1db66c16",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/36eb2ca62076b598fcaf42004d74b1bf1db66c16",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36eb2ca62076b598fcaf42004d74b1bf1db66c16/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "41d8e78f94c5ad54684f1f15efb0264036418e71",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41d8e78f94c5ad54684f1f15efb0264036418e71",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/41d8e78f94c5ad54684f1f15efb0264036418e71"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 13,
      "deletions": 1
    },
    "files": [
      {
        "sha": "1f071a89ce2d0b5805008f7da70e48a2d74a5825",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 1,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36eb2ca62076b598fcaf42004d74b1bf1db66c16/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36eb2ca62076b598fcaf42004d74b1bf1db66c16/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=36eb2ca62076b598fcaf42004d74b1bf1db66c16",
        "patch": "@@ -1492,7 +1492,8 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n \n         // Check against previous transactions\n         // This is done last to help prevent CPU exhaustion denial-of-service attacks.\n-        if (!CheckInputs(tx, state, view, true, scriptVerifyFlags, true)) {\n+        ValidationCostTracker costTracker(MAX_BLOCK_SIGOPS, MAX_BLOCK_SIGHASH);\n+        if (!CheckInputs(tx, state, view, true, scriptVerifyFlags, true, &costTracker)) {\n             // SCRIPT_VERIFY_CLEANSTACK requires SCRIPT_VERIFY_WITNESS, so we\n             // need to turn both off, and compare against just turning off CLEANSTACK\n             // to see if the failure is specifically due to witness validation.\n@@ -1503,6 +1504,17 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n             }\n             return false;\n         }\n+        // Reject transactions with very high signature-hash cost:\n+        uint64_t sighash_limit = (uint64_t)nSize * MAX_BLOCK_SIGHASH / MAX_BLOCK_SIZE;\n+        if (costTracker.GetSighashBytes() > sighash_limit)\n+        {\n+            return state.DoS(0,\n+                             error(\"AcceptToMemoryPool: too much signature hashing %s: %d > %d\",\n+                                   hash.ToString(), costTracker.GetSighashBytes(), sighash_limit),\n+                             REJECT_NONSTANDARD, \"bat-txns-too-many-sighash\");\n+        }\n+        LogPrint(\"txcost\", \"txcost %s size: %d sigops: %d sighash: %d\\n\",\n+                 hash.ToString(), nSize, costTracker.GetSigOps(), costTracker.GetSighashBytes());\n \n         // Check again against just the consensus-critical mandatory script\n         // verification flags, in case of bugs in the standard flags that cause"
      }
    ]
  }
]