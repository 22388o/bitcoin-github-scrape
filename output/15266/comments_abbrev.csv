sipa,2019-01-25T21:22:47Z,Just as a way to minimize the diff (which may or may not be desirable): you can have a trivial proxy object instantiated as g_logger whose operator->() invokes GetLogger().,https://github.com/bitcoin/bitcoin/pull/15266#issuecomment-457733582,457733582,
MarcoFalke,2019-01-26T00:41:47Z,"> `COFU<string> const  g_str_new;`\n\nIt looks like you are introducing a new global for this, which again opens up the problem I am trying to solve. Either I am missing something or we are running in circles.",https://github.com/bitcoin/bitcoin/pull/15266#issuecomment-457782454,457782454,
promag,2019-01-26T00:46:29Z,"@MarcoFalke my suggestion is to do:\n```cpp\nCOFU<BCLog::Logger> const g_logger;\n```\nso that the following is unchanged:\n```cpp\ng_logger->m_reopen_file = true;\n```\nLike @sipa suggested.",https://github.com/bitcoin/bitcoin/pull/15266#issuecomment-457783169,457783169,
sipa,2019-01-26T00:51:07Z,"@MarcoFalke Not sure if that's what you're referring to, but the COFU object has no member variables to initialize, so it doesn't have any runtime initialization (in other words, it's fully constructed before any code is executed).\n\nI don't have a strong opinion on whether such a COFU object/type is the right solution; just offering it as a possibility if reducing the size of the diff is wante",https://github.com/bitcoin/bitcoin/pull/15266#issuecomment-457783857,457783857,
MarcoFalke,2019-01-26T00:52:37Z,"Ah, that makes it clearer.",https://github.com/bitcoin/bitcoin/pull/15266#issuecomment-457784060,457784060,
sipa,2019-01-26T00:55:24Z,"Relevant section from https://en.cppreference.com/w/cpp/language/constant_initialization:\n\n> The effects of constant initialization are the same as the effects of the corresponding initialization, except that it's guaranteed that it is complete before any other initialization of a static or thread-local object begins, and it may be performed at compile time. \n",https://github.com/bitcoin/bitcoin/pull/15266#issuecomment-457784439,457784439,
DrahtBot,2019-01-26T01:12:31Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#15329](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15329.html) (Fix InitError() and InitWarning() content b",https://github.com/bitcoin/bitcoin/pull/15266#issuecomment-457786634,457786634,
MarcoFalke,2019-01-29T19:20:56Z,Reverted back to my initial patch (using the `LogInstance` wording suggested here https://github.com/bitcoin/bitcoin/pull/15266#discussion_r251495210),https://github.com/bitcoin/bitcoin/pull/15266#issuecomment-458671497,458671497,
jonasschnelli,2019-02-04T19:07:50Z,utACK 77777c5624e2f5416d85500e82b7c80e10ed01b6,https://github.com/bitcoin/bitcoin/pull/15266#issuecomment-460371851,460371851,
promag,2019-01-25T23:17:22Z,static üëç ,https://github.com/bitcoin/bitcoin/pull/15266#discussion_r251166054,251166054,src/sync.cpp
AkioNak,2019-01-26T03:31:30Z,nit: You can delete `` `#include <memory>` `` after a few lines.,https://github.com/bitcoin/bitcoin/pull/15266#discussion_r251186586,251186586,src/sync.cpp
AkioNak,2019-01-26T04:08:53Z,"I prefer following code rather than calling Get() directly.\n```suggestion\n    LockData& lockdata = *g_lockdata;\n```\nor\n```suggestion\n    LockData& lockdata{*g_lockdata};\n```",https://github.com/bitcoin/bitcoin/pull/15266#discussion_r251187335,251187335,src/sync.cpp
AkioNak,2019-01-26T04:11:51Z,"\n(same above)\nI prefer following code rather than calling Get() directly.\n```suggestion\n    LockData& lockdata = *g_lockdata;\n```\nor\n```suggestion\n    LockData& lockdata{*g_lockdata};\n```",https://github.com/bitcoin/bitcoin/pull/15266#discussion_r251187390,251187390,src/sync.cpp
promag,2019-01-26T14:06:42Z,"Another alternative is to ditch local `lockdata` and use global `g_lockdata`:\n```cpp\nstd::lock_guard<std::mutex> lock(g_lockdata->dd_mutex);\n```\nWould result in a bigger diff but I think it is better than ""aliases"".",https://github.com/bitcoin/bitcoin/pull/15266#discussion_r251200234,251200234,src/sync.cpp
promag,2019-01-27T15:17:38Z,Could update comment above to note that the raw pointer is now in GlobalCOFU?,https://github.com/bitcoin/bitcoin/pull/15266#discussion_r251241332,251241332,src/logging.cpp
promag,2019-01-27T15:18:07Z,Any reason to keep the mentioned include?,https://github.com/bitcoin/bitcoin/pull/15266#discussion_r251241363,251241363,src/sync.cpp
MarcoFalke,2019-01-27T15:25:18Z,"It has been there before, so according to iwyu it should stay there. I'd prefer if someone jotted down some notes on how to run iwyu on Bitcoin Core, so that we wouldn't have to spend review on those.",https://github.com/bitcoin/bitcoin/pull/15266#discussion_r251241587,251241587,src/sync.cpp
sipa,2019-01-28T00:21:40Z,"This no-destruction property shouldn't be needed. C++ guarantees that destructors are invoked at shutdown in reverse order as they were constructed (even taking objects constructed through functions invoked from other module's global initializers into account).\n\nHave you found evidence that this isn't enough?",https://github.com/bitcoin/bitcoin/pull/15266#discussion_r251261669,251261669,src/util/memory.h
sipa,2019-01-28T00:23:14Z,"Perhaps also add a comment to explain that if multiple instances of GlobalCOFU<T> for the same T exist, they will all share the underlying T object.",https://github.com/bitcoin/bitcoin/pull/15266#discussion_r251261731,251261731,src/util/memory.h
AkioNak,2019-01-28T01:41:36Z,"In this case, I think it was already unnecessary to include, and good time to remove.\n\n1. ```#include <memory>``` has been added to ```sync.cpp``` because it already using ```std::unique_ptr``` ( #12859).\n2. ```std::unique_ptr``` has been removed from ```sync.cpp``` (#13300)\n",https://github.com/bitcoin/bitcoin/pull/15266#discussion_r251265900,251265900,src/sync.cpp
ryanofsky,2019-01-28T16:38:55Z,"This seems over-engineered. Why not just have a simple function like:\n\n```c++\nLogger& LogInstance() {\n  static Logger logger;\n  return logger;\n}\n```\n\nand have a scripted diff replacing `g_logger->` with `LogInstance().` This would be equivalent to what the `GlobalCOFU` class is doing but more straightforward, and would actually guarantee destruction, and avoid creating landmines ",https://github.com/bitcoin/bitcoin/pull/15266#discussion_r251495210,251495210,src/util/memory.h
promag,2019-01-28T17:02:44Z,"> and would actually guarantee destruction\n\nFWIW the same could be done with `GlobalCOFU`.",https://github.com/bitcoin/bitcoin/pull/15266#discussion_r251505793,251505793,src/util/memory.h
MarcoFalke,2019-01-28T18:16:20Z,"@sipa, see the comments in `sync` and `logging`. Basically the order in what you need the destructor to be called might be different from the inverse order they were constructed.\n\nSee a simple example that segfaults if I dropped that requirement:\n\n(The `~Init` destructor uses the log after the logger has been destructed)\n\n```cpp\n#include <iostream>\n#include <memory>\nstruct Log{\",https://github.com/bitcoin/bitcoin/pull/15266#discussion_r251532777,251532777,src/util/memory.h
promag,2019-01-28T18:21:25Z,"@MarcoFalke because Init is constructed first. It works if you change `Init` constructor to `Init(){LogInstance().log(__func__);}`.\n",https://github.com/bitcoin/bitcoin/pull/15266#discussion_r251534520,251534520,src/util/memory.h
sipa,2019-01-28T18:22:19Z,"@MarcoFalke I think that can be resolved by calling `LogInstance` in the `Init::Init` constructor once. That forces the `Log` object to finished construction before `Init`, guaranteeing it's still available at `Init`'s destruction time.",https://github.com/bitcoin/bitcoin/pull/15266#discussion_r251534831,251534831,src/util/memory.h
MarcoFalke,2019-01-28T18:27:14Z,"I know, but there is no way to enforce that (in Bitcoin Core or generally) the logger (or any other global ""module"") is called in each constructor when the destructor calls it.",https://github.com/bitcoin/bitcoin/pull/15266#discussion_r251536731,251536731,src/util/memory.h
sipa,2019-01-28T18:30:16Z,"I really prefer going over the few global objects whose destructors need other globals and fixing this, than having lingering global objects at shutdown.",https://github.com/bitcoin/bitcoin/pull/15266#discussion_r251537884,251537884,src/util/memory.h
promag,2019-01-28T18:31:30Z,Just make a call to `LogInstance()`?,https://github.com/bitcoin/bitcoin/pull/15266#discussion_r251538373,251538373,src/util/memory.h
ryanofsky,2019-01-29T19:37:28Z,"Would add comment here that this intentionally never calls logger destructor. Would also add a comment in the logger class saying that if a destructor is defined there it will never be called, and that any members added to the logger class will not have their destructors called either.",https://github.com/bitcoin/bitcoin/pull/15266#discussion_r251986118,251986118,src/logging.cpp
MarcoFalke,2019-01-29T20:31:45Z,"The comment above says that, I think. Though I added a line clarifying that it must be a trivial destructor.",https://github.com/bitcoin/bitcoin/pull/15266#discussion_r252005257,252005257,src/logging.cpp
