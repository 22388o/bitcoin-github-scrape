[
  {
    "sha": "77777c5624e2f5416d85500e82b7c80e10ed01b6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3Nzc3N2M1NjI0ZTJmNTQxNmQ4NTUwMGU4MmI3YzgwZTEwZWQwMWI2",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-01-25T20:54:49Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-01-29T20:30:24Z"
      },
      "message": "log: Construct global logger on first use",
      "tree": {
        "sha": "b6f69a898835496e248bd1e5d551184e6bbf4b33",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b6f69a898835496e248bd1e5d551184e6bbf4b33"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/77777c5624e2f5416d85500e82b7c80e10ed01b6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJcULfgAAoJEM4rdWl+aaVIzlAL/iLoJ1Nu6NtpW+RSUuFmv+D1\nZ/8rkM8wV83R0ld4sJv6er7AXCozVl/zvsp6RTuuqouptrChGdH1eGAmiwUM0eC+\nbuByBGlwipzjdj+SuYBUAN5MddWm0vH0G/uYoe3reoAtylfequRcGUY26l107OTh\nWSE0H/G55TpTWRYwMbAcLVLclTzrsNY2tYxKbRw/SZ8D+fxgxkyAJTELyVQmdAy+\no/wN/5Wzvv3QdXxLRHdRHIlyfhMNeuxQbQlJnvpaFm1tJRSdwIQjIorN4Yimib1w\n82lvEI2dEH15AL28onH1VcH5d9466gHmjzEqksLD+cZ/mFcgc36c1JKQKOq61CNX\n8QfvpbhRHnC+2Cwd3lSlP/+2pZgZjnfBbxoHShmvhprCXUE5nn0DuwwlUCrzUvkI\neaRoutQrlMpb/Rr0XUC0FBgzrcd3O3yU9txK6ixtLm8xPiSPnOJmD9hje0hOlqL2\ntncOwCSL1iIhtw5n4TqCR7QsHdkERmgsm0PyQ47Suw==\n=dH9c\n-----END PGP SIGNATURE-----",
        "payload": "tree b6f69a898835496e248bd1e5d551184e6bbf4b33\nparent d14ef5721ffcf07321704dc21f1ab9df4952a44d\nauthor MarcoFalke <falke.marco@gmail.com> 1548449689 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1548793824 -0500\n\nlog: Construct global logger on first use\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77777c5624e2f5416d85500e82b7c80e10ed01b6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/77777c5624e2f5416d85500e82b7c80e10ed01b6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77777c5624e2f5416d85500e82b7c80e10ed01b6/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d14ef5721ffcf07321704dc21f1ab9df4952a44d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d14ef5721ffcf07321704dc21f1ab9df4952a44d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d14ef5721ffcf07321704dc21f1ab9df4952a44d"
      }
    ],
    "stats": {
      "total": 62,
      "additions": 34,
      "deletions": 28
    },
    "files": [
      {
        "sha": "b9ca037c9d7537335030fadfd6308195784a6570",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77777c5624e2f5416d85500e82b7c80e10ed01b6/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77777c5624e2f5416d85500e82b7c80e10ed01b6/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=77777c5624e2f5416d85500e82b7c80e10ed01b6",
        "patch": "@@ -364,8 +364,8 @@ bool InitHTTPServer()\n     // Update libevent's log handling. Returns false if our version of\n     // libevent doesn't support debug logging, in which case we should\n     // clear the BCLog::LIBEVENT flag.\n-    if (!UpdateHTTPServerLogging(g_logger->WillLogCategory(BCLog::LIBEVENT))) {\n-        g_logger->DisableCategory(BCLog::LIBEVENT);\n+    if (!UpdateHTTPServerLogging(LogInstance().WillLogCategory(BCLog::LIBEVENT))) {\n+        LogInstance().DisableCategory(BCLog::LIBEVENT);\n     }\n \n #ifdef WIN32"
      },
      {
        "sha": "cab6b8896503ddd558cb5f58366b1d9c53d03c02",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 14,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77777c5624e2f5416d85500e82b7c80e10ed01b6/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77777c5624e2f5416d85500e82b7c80e10ed01b6/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=77777c5624e2f5416d85500e82b7c80e10ed01b6",
        "patch": "@@ -289,7 +289,7 @@ static void HandleSIGTERM(int)\n \n static void HandleSIGHUP(int)\n {\n-    g_logger->m_reopen_file = true;\n+    LogInstance().m_reopen_file = true;\n }\n #else\n static BOOL WINAPI consoleCtrlHandler(DWORD dwCtrlType)\n@@ -833,17 +833,17 @@ static std::string ResolveErrMsg(const char * const optname, const std::string&\n  */\n void InitLogging()\n {\n-    g_logger->m_print_to_file = !gArgs.IsArgNegated(\"-debuglogfile\");\n-    g_logger->m_file_path = AbsPathForConfigVal(gArgs.GetArg(\"-debuglogfile\", DEFAULT_DEBUGLOGFILE));\n+    LogInstance().m_print_to_file = !gArgs.IsArgNegated(\"-debuglogfile\");\n+    LogInstance().m_file_path = AbsPathForConfigVal(gArgs.GetArg(\"-debuglogfile\", DEFAULT_DEBUGLOGFILE));\n \n     // Add newlines to the logfile to distinguish this execution from the last\n     // one; called before console logging is set up, so this is only sent to\n     // debug.log.\n     LogPrintf(\"\\n\\n\\n\\n\\n\");\n \n-    g_logger->m_print_to_console = gArgs.GetBoolArg(\"-printtoconsole\", !gArgs.GetBoolArg(\"-daemon\", false));\n-    g_logger->m_log_timestamps = gArgs.GetBoolArg(\"-logtimestamps\", DEFAULT_LOGTIMESTAMPS);\n-    g_logger->m_log_time_micros = gArgs.GetBoolArg(\"-logtimemicros\", DEFAULT_LOGTIMEMICROS);\n+    LogInstance().m_print_to_console = gArgs.GetBoolArg(\"-printtoconsole\", !gArgs.GetBoolArg(\"-daemon\", false));\n+    LogInstance().m_log_timestamps = gArgs.GetBoolArg(\"-logtimestamps\", DEFAULT_LOGTIMESTAMPS);\n+    LogInstance().m_log_time_micros = gArgs.GetBoolArg(\"-logtimemicros\", DEFAULT_LOGTIMEMICROS);\n \n     fLogIPs = gArgs.GetBoolArg(\"-logips\", DEFAULT_LOGIPS);\n \n@@ -981,7 +981,7 @@ bool AppInitParameterInteraction()\n         if (std::none_of(categories.begin(), categories.end(),\n             [](std::string cat){return cat == \"0\" || cat == \"none\";})) {\n             for (const auto& cat : categories) {\n-                if (!g_logger->EnableCategory(cat)) {\n+                if (!LogInstance().EnableCategory(cat)) {\n                     InitWarning(strprintf(_(\"Unsupported logging category %s=%s.\"), \"-debug\", cat));\n                 }\n             }\n@@ -990,7 +990,7 @@ bool AppInitParameterInteraction()\n \n     // Now remove the logging categories which were explicitly excluded\n     for (const std::string& cat : gArgs.GetArgs(\"-debugexclude\")) {\n-        if (!g_logger->DisableCategory(cat)) {\n+        if (!LogInstance().DisableCategory(cat)) {\n             InitWarning(strprintf(_(\"Unsupported logging category %s=%s.\"), \"-debugexclude\", cat));\n         }\n     }\n@@ -1197,19 +1197,19 @@ bool AppInitMain(InitInterfaces& interfaces)\n #ifndef WIN32\n     CreatePidFile(GetPidFile(), getpid());\n #endif\n-    if (g_logger->m_print_to_file) {\n-        if (gArgs.GetBoolArg(\"-shrinkdebugfile\", g_logger->DefaultShrinkDebugFile())) {\n+    if (LogInstance().m_print_to_file) {\n+        if (gArgs.GetBoolArg(\"-shrinkdebugfile\", LogInstance().DefaultShrinkDebugFile())) {\n             // Do this first since it both loads a bunch of debug.log into memory,\n             // and because this needs to happen before any other debug.log printing\n-            g_logger->ShrinkDebugFile();\n+            LogInstance().ShrinkDebugFile();\n         }\n-        if (!g_logger->OpenDebugLog()) {\n+        if (!LogInstance().OpenDebugLog()) {\n             return InitError(strprintf(\"Could not open debug log file %s\",\n-                                       g_logger->m_file_path.string()));\n+                LogInstance().m_file_path.string()));\n         }\n     }\n \n-    if (!g_logger->m_log_timestamps)\n+    if (!LogInstance().m_log_timestamps)\n         LogPrintf(\"Startup time: %s\\n\", FormatISO8601DateTime(GetTime()));\n     LogPrintf(\"Default data directory %s\\n\", GetDefaultDataDir().string());\n     LogPrintf(\"Using data directory %s\\n\", GetDataDir().string());"
      },
      {
        "sha": "a2b89c3f90389b8fc350b9786748c31f0837d45f",
        "filename": "src/interfaces/node.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77777c5624e2f5416d85500e82b7c80e10ed01b6/src/interfaces/node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77777c5624e2f5416d85500e82b7c80e10ed01b6/src/interfaces/node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.cpp?ref=77777c5624e2f5416d85500e82b7c80e10ed01b6",
        "patch": "@@ -67,7 +67,7 @@ class NodeImpl : public Node\n     void initLogging() override { InitLogging(); }\n     void initParameterInteraction() override { InitParameterInteraction(); }\n     std::string getWarnings(const std::string& type) override { return GetWarnings(type); }\n-    uint32_t getLogCategories() override { return g_logger->GetCategoryMask(); }\n+    uint32_t getLogCategories() override { return LogInstance().GetCategoryMask(); }\n     bool baseInitialize() override\n     {\n         return AppInitBasicSetup() && AppInitParameterInteraction() && AppInitSanityChecks() &&"
      },
      {
        "sha": "36cad6573ab7d44871e2174d3aa24faf6e7e1faf",
        "filename": "src/logging.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77777c5624e2f5416d85500e82b7c80e10ed01b6/src/logging.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77777c5624e2f5416d85500e82b7c80e10ed01b6/src/logging.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/logging.cpp?ref=77777c5624e2f5416d85500e82b7c80e10ed01b6",
        "patch": "@@ -8,6 +8,8 @@\n \n const char * const DEFAULT_DEBUGLOGFILE = \"debug.log\";\n \n+BCLog::Logger& LogInstance()\n+{\n /**\n  * NOTE: the logger instances is leaked on exit. This is ugly, but will be\n  * cleaned up by the OS/libc. Defining a logger as a global object doesn't work\n@@ -17,11 +19,15 @@ const char * const DEFAULT_DEBUGLOGFILE = \"debug.log\";\n  * access the logger. When the shutdown sequence is fully audited and tested,\n  * explicit destruction of these objects can be implemented by changing this\n  * from a raw pointer to a std::unique_ptr.\n+ * Since the destructor is never called, the logger and all its members must\n+ * have a trivial destructor.\n  *\n  * This method of initialization was originally introduced in\n  * ee3374234c60aba2cc4c5cd5cac1c0aefc2d817c.\n  */\n-BCLog::Logger* const g_logger = new BCLog::Logger();\n+    static BCLog::Logger* g_logger{new BCLog::Logger()};\n+    return *g_logger;\n+}\n \n bool fLogIPs = DEFAULT_LOGIPS;\n "
      },
      {
        "sha": "ac9d0dc0c7056c615cb7ee7591d08774b9e16e89",
        "filename": "src/logging.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77777c5624e2f5416d85500e82b7c80e10ed01b6/src/logging.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77777c5624e2f5416d85500e82b7c80e10ed01b6/src/logging.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/logging.h?ref=77777c5624e2f5416d85500e82b7c80e10ed01b6",
        "patch": "@@ -108,12 +108,12 @@ namespace BCLog {\n \n } // namespace BCLog\n \n-extern BCLog::Logger* const g_logger;\n+BCLog::Logger& LogInstance();\n \n /** Return true if log accepts specified category */\n static inline bool LogAcceptCategory(BCLog::LogFlags category)\n {\n-    return g_logger->WillLogCategory(category);\n+    return LogInstance().WillLogCategory(category);\n }\n \n /** Returns a string with the log categories. */\n@@ -132,15 +132,15 @@ bool GetLogCategory(BCLog::LogFlags& flag, const std::string& str);\n template <typename... Args>\n static inline void LogPrintf(const char* fmt, const Args&... args)\n {\n-    if (g_logger->Enabled()) {\n+    if (LogInstance().Enabled()) {\n         std::string log_msg;\n         try {\n             log_msg = tfm::format(fmt, args...);\n         } catch (tinyformat::format_error& fmterr) {\n             /* Original format string will have newline so don't add one here */\n             log_msg = \"Error \\\"\" + std::string(fmterr.what()) + \"\\\" while formatting log message: \" + fmt;\n         }\n-        g_logger->LogPrintStr(log_msg);\n+        LogInstance().LogPrintStr(log_msg);\n     }\n }\n "
      },
      {
        "sha": "45d7ee017f99dfcc02a0b87beec871b10aa6f735",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77777c5624e2f5416d85500e82b7c80e10ed01b6/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77777c5624e2f5416d85500e82b7c80e10ed01b6/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=77777c5624e2f5416d85500e82b7c80e10ed01b6",
        "patch": "@@ -357,9 +357,9 @@ static void EnableOrDisableLogCategories(UniValue cats, bool enable) {\n \n         bool success;\n         if (enable) {\n-            success = g_logger->EnableCategory(cat);\n+            success = LogInstance().EnableCategory(cat);\n         } else {\n-            success = g_logger->DisableCategory(cat);\n+            success = LogInstance().DisableCategory(cat);\n         }\n \n         if (!success) {\n@@ -405,14 +405,14 @@ UniValue logging(const JSONRPCRequest& request)\n         );\n     }\n \n-    uint32_t original_log_categories = g_logger->GetCategoryMask();\n+    uint32_t original_log_categories = LogInstance().GetCategoryMask();\n     if (request.params[0].isArray()) {\n         EnableOrDisableLogCategories(request.params[0], true);\n     }\n     if (request.params[1].isArray()) {\n         EnableOrDisableLogCategories(request.params[1], false);\n     }\n-    uint32_t updated_log_categories = g_logger->GetCategoryMask();\n+    uint32_t updated_log_categories = LogInstance().GetCategoryMask();\n     uint32_t changed_log_categories = original_log_categories ^ updated_log_categories;\n \n     // Update libevent logging if BCLog::LIBEVENT has changed.\n@@ -421,8 +421,8 @@ UniValue logging(const JSONRPCRequest& request)\n     // Throw an error if the user has explicitly asked to change only the libevent\n     // flag and it failed.\n     if (changed_log_categories & BCLog::LIBEVENT) {\n-        if (!UpdateHTTPServerLogging(g_logger->WillLogCategory(BCLog::LIBEVENT))) {\n-            g_logger->DisableCategory(BCLog::LIBEVENT);\n+        if (!UpdateHTTPServerLogging(LogInstance().WillLogCategory(BCLog::LIBEVENT))) {\n+            LogInstance().DisableCategory(BCLog::LIBEVENT);\n             if (changed_log_categories == BCLog::LIBEVENT) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"libevent logging cannot be updated when using libevent before v2.1.1.\");\n             }"
      }
    ]
  }
]