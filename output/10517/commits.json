[
  {
    "sha": "2fc36f0d929b6fbcefcae8d986efe38a4adbeec3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZmMzNmYwZDkyOWI2ZmJjZWZjYWU4ZDk4NmVmZTM4YTRhZGJlZWMz",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-06-03T07:42:48Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-06-05T07:15:05Z"
      },
      "message": "Factor out CCoinsView based AreInputsStandard/IsWitnessStandard\nThis will allow IsStandard checks without depending on the mempool, UTXO set",
      "tree": {
        "sha": "cae7a33a83dd2d9f1928c1c50302596a1bc242cb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cae7a33a83dd2d9f1928c1c50302596a1bc242cb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2fc36f0d929b6fbcefcae8d986efe38a4adbeec3",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlk1BPkACgkQHrd2uwPH\nki3xMBAAtdR4okC79TKCXXvAf+2cCF1QoaWmVc1meNeEeBWx6KNnRFXtZIs4vcNo\npkh2Bw6MHB0VxMSBVFrhX+5Ol+wSnyLpwfpgpLZ1NAjgtqYTLXlWV9/QcK6MHYFR\nC6EwnssGl2b5Gy0+gVuneyNnqeCfrOIVPbXl723ybxuC2V6o8U5f9XQR009UPNq6\ngpbsA3AzpyNor0UDvszK4j2plCyfYesuAeV9dU3iWPe3KFdS2gLtHaYwlAR8BiNi\njKq5eKE7fhvDueQCIXwpAKiEh+qMADbsarCB2t3TnlCxe9OjNkak6SvBui0Us9sh\nRi+YngFhJ/Lwbaeton+KsMq1iuUrW/7cGo/GHIenY3uggZIJ7iDJ+e7Gj4Z2/Kdu\nevKVm3T/V8YS0JlPjeI9KGei89YYR8UoGKq/ifWf2hpH8S0b2+nBFdCiHE6/YHOw\nFC15JdOd+znpkfhNSCiyhbw0cL6LCBh6/hG9ULunZpPdgyZfvSBAeAJIHZq5e2c/\nd4A43c8jAJOYkWSXGlJxppKXESfbnlCDbTMDQqXkFZyc0O084jDlC8STVLXovP5Z\nE+TXM+3NJuzJ6XiU5K1mb2LwnezBCEOsXrVtNwbkbT/gP54mrDffDTzQEn/3YEtr\nsyEWwbUY9z13hq0rhbO8tv9U1X03FeOAErtSin7roDHZlLdaphs=\n=9+LE\n-----END PGP SIGNATURE-----",
        "payload": "tree cae7a33a83dd2d9f1928c1c50302596a1bc242cb\nparent 098b01dc58ff555c473ae58c92c34b03a77eda5f\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1496475768 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1496646905 +0200\n\nFactor out CCoinsView based AreInputsStandard/IsWitnessStandard\nThis will allow IsStandard checks without depending on the mempool, UTXO set\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2fc36f0d929b6fbcefcae8d986efe38a4adbeec3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2fc36f0d929b6fbcefcae8d986efe38a4adbeec3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2fc36f0d929b6fbcefcae8d986efe38a4adbeec3/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "098b01dc58ff555c473ae58c92c34b03a77eda5f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/098b01dc58ff555c473ae58c92c34b03a77eda5f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/098b01dc58ff555c473ae58c92c34b03a77eda5f"
      }
    ],
    "stats": {
      "total": 277,
      "additions": 162,
      "deletions": 115
    },
    "files": [
      {
        "sha": "e61d434475e9f66abb47dace7d52acfb0bd90e63",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 13,
        "deletions": 2,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2fc36f0d929b6fbcefcae8d986efe38a4adbeec3/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2fc36f0d929b6fbcefcae8d986efe38a4adbeec3/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=2fc36f0d929b6fbcefcae8d986efe38a4adbeec3",
        "patch": "@@ -26,6 +26,7 @@ BITCOIN_INCLUDES += $(UNIVALUE_CFLAGS)\n \n LIBBITCOIN_SERVER=libbitcoin_server.a\n LIBBITCOIN_COMMON=libbitcoin_common.a\n+LIBBITCOIN_POLICY=libbitcoin_policy.a\n LIBBITCOIN_CONSENSUS=libbitcoin_consensus.a\n LIBBITCOIN_CLI=libbitcoin_cli.a\n LIBBITCOIN_UTIL=libbitcoin_util.a\n@@ -52,6 +53,7 @@ EXTRA_LIBRARIES += \\\n   $(LIBBITCOIN_CRYPTO) \\\n   $(LIBBITCOIN_UTIL) \\\n   $(LIBBITCOIN_COMMON) \\\n+  $(LIBBITCOIN_POLICY) \\\n   $(LIBBITCOIN_CONSENSUS) \\\n   $(LIBBITCOIN_SERVER) \\\n   $(LIBBITCOIN_CLI) \\\n@@ -119,6 +121,7 @@ BITCOIN_CORE_H = \\\n   noui.h \\\n   policy/feerate.h \\\n   policy/fees.h \\\n+  policy/inputs.h \\\n   policy/policy.h \\\n   policy/rbf.h \\\n   pow.h \\\n@@ -197,7 +200,7 @@ libbitcoin_server_a_SOURCES = \\\n   net_processing.cpp \\\n   noui.cpp \\\n   policy/fees.cpp \\\n-  policy/policy.cpp \\\n+  policy/inputs.cpp \\\n   pow.cpp \\\n   rest.cpp \\\n   rpc/blockchain.cpp \\\n@@ -314,14 +317,21 @@ libbitcoin_common_a_SOURCES = \\\n   keystore.cpp \\\n   netaddress.cpp \\\n   netbase.cpp \\\n-  policy/feerate.cpp \\\n   protocol.cpp \\\n   scheduler.cpp \\\n   script/sign.cpp \\\n   script/standard.cpp \\\n   warnings.cpp \\\n   $(BITCOIN_CORE_H)\n \n+# policy: shared between all executables that require policy rules.\n+libbitcoin_policy_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+libbitcoin_policy_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+libbitcoin_policy_a_SOURCES = \\\n+  policy/policy.cpp \\\n+  policy/feerate.cpp \\\n+  $(BITCOIN_CORE_H)\n+\n # util: shared between all executables.\n # This library *must* be included to make sure that the glibc\n # backward-compatibility objects and their sanity checks are linked.\n@@ -373,6 +383,7 @@ endif\n bitcoind_LDADD = \\\n   $(LIBBITCOIN_SERVER) \\\n   $(LIBBITCOIN_COMMON) \\\n+  $(LIBBITCOIN_POLICY) \\\n   $(LIBUNIVALUE) \\\n   $(LIBBITCOIN_UTIL) \\\n   $(LIBBITCOIN_WALLET) \\"
      },
      {
        "sha": "e10c26c9e29f5492f75ad2a2d8cc51256737239a",
        "filename": "src/Makefile.bench.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2fc36f0d929b6fbcefcae8d986efe38a4adbeec3/src/Makefile.bench.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2fc36f0d929b6fbcefcae8d986efe38a4adbeec3/src/Makefile.bench.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.bench.include?ref=2fc36f0d929b6fbcefcae8d986efe38a4adbeec3",
        "patch": "@@ -35,6 +35,7 @@ bench_bench_bitcoin_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n bench_bench_bitcoin_LDADD = \\\n   $(LIBBITCOIN_SERVER) \\\n   $(LIBBITCOIN_COMMON) \\\n+  $(LIBBITCOIN_POLICY) \\\n   $(LIBBITCOIN_UTIL) \\\n   $(LIBBITCOIN_CONSENSUS) \\\n   $(LIBBITCOIN_CRYPTO) \\"
      },
      {
        "sha": "70049fe0f1da40d4f62d8b97eee1baecb75b4c22",
        "filename": "src/Makefile.qt.include",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2fc36f0d929b6fbcefcae8d986efe38a4adbeec3/src/Makefile.qt.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2fc36f0d929b6fbcefcae8d986efe38a4adbeec3/src/Makefile.qt.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qt.include?ref=2fc36f0d929b6fbcefcae8d986efe38a4adbeec3",
        "patch": "@@ -407,7 +407,7 @@ endif\n if ENABLE_ZMQ\n qt_bitcoin_qt_LDADD += $(LIBBITCOIN_ZMQ) $(ZMQ_LIBS)\n endif\n-qt_bitcoin_qt_LDADD += $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBBITCOIN_UTIL) $(LIBBITCOIN_CONSENSUS) $(LIBBITCOIN_CRYPTO) $(LIBUNIVALUE) $(LIBLEVELDB) $(LIBMEMENV) \\\n+qt_bitcoin_qt_LDADD += $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBBITCOIN_POLICY) $(LIBBITCOIN_UTIL) $(LIBBITCOIN_CONSENSUS) $(LIBBITCOIN_CRYPTO) $(LIBUNIVALUE) $(LIBLEVELDB) $(LIBMEMENV) \\\n   $(BOOST_LIBS) $(QT_LIBS) $(QT_DBUS_LIBS) $(QR_LIBS) $(PROTOBUF_LIBS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS) $(LIBSECP256K1) \\\n   $(EVENT_PTHREADS_LIBS) $(EVENT_LIBS)\n qt_bitcoin_qt_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(QT_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)"
      },
      {
        "sha": "4156ec3aa66134ed5a76c669b4657de3fc44d7b7",
        "filename": "src/Makefile.qttest.include",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2fc36f0d929b6fbcefcae8d986efe38a4adbeec3/src/Makefile.qttest.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2fc36f0d929b6fbcefcae8d986efe38a4adbeec3/src/Makefile.qttest.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qttest.include?ref=2fc36f0d929b6fbcefcae8d986efe38a4adbeec3",
        "patch": "@@ -59,7 +59,7 @@ endif\n if ENABLE_ZMQ\n qt_test_test_bitcoin_qt_LDADD += $(LIBBITCOIN_ZMQ) $(ZMQ_LIBS)\n endif\n-qt_test_test_bitcoin_qt_LDADD += $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBBITCOIN_UTIL) $(LIBBITCOIN_CONSENSUS) $(LIBBITCOIN_CRYPTO) $(LIBUNIVALUE) $(LIBLEVELDB) \\\n+qt_test_test_bitcoin_qt_LDADD += $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBBITCOIN_POLICY) $(LIBBITCOIN_UTIL) $(LIBBITCOIN_CONSENSUS) $(LIBBITCOIN_CRYPTO) $(LIBUNIVALUE) $(LIBLEVELDB) \\\n   $(LIBMEMENV) $(BOOST_LIBS) $(QT_DBUS_LIBS) $(QT_TEST_LIBS) $(QT_LIBS) \\\n   $(QR_LIBS) $(PROTOBUF_LIBS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS) $(LIBSECP256K1) \\\n   $(EVENT_PTHREADS_LIBS) $(EVENT_LIBS)"
      },
      {
        "sha": "ca651c0fc229ade1f9e56efe9941421b8d1292c4",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2fc36f0d929b6fbcefcae8d986efe38a4adbeec3/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2fc36f0d929b6fbcefcae8d986efe38a4adbeec3/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=2fc36f0d929b6fbcefcae8d986efe38a4adbeec3",
        "patch": "@@ -97,7 +97,7 @@ endif\n \n test_test_bitcoin_SOURCES = $(BITCOIN_TESTS) $(JSON_TEST_FILES) $(RAW_TEST_FILES)\n test_test_bitcoin_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -I$(builddir)/test/ $(TESTDEFS) $(EVENT_CFLAGS)\n-test_test_bitcoin_LDADD = $(LIBBITCOIN_SERVER) $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBBITCOIN_UTIL) $(LIBBITCOIN_CONSENSUS) $(LIBBITCOIN_CRYPTO) $(LIBUNIVALUE) $(LIBLEVELDB) $(LIBMEMENV) \\\n+test_test_bitcoin_LDADD = $(LIBBITCOIN_SERVER) $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBBITCOIN_POLICY) $(LIBBITCOIN_UTIL) $(LIBBITCOIN_CONSENSUS) $(LIBBITCOIN_CRYPTO) $(LIBUNIVALUE) $(LIBLEVELDB) $(LIBMEMENV) \\\n   $(BOOST_LIBS) $(BOOST_UNIT_TEST_FRAMEWORK_LIB) $(LIBSECP256K1) $(EVENT_LIBS) $(EVENT_PTHREADS_LIBS)\n test_test_bitcoin_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n if ENABLE_WALLET\n@@ -122,6 +122,7 @@ test_test_bitcoin_fuzzy_LDADD = \\\n   $(LIBUNIVALUE) \\\n   $(LIBBITCOIN_SERVER) \\\n   $(LIBBITCOIN_COMMON) \\\n+  $(LIBBITCOIN_POLICY) \\\n   $(LIBBITCOIN_UTIL) \\\n   $(LIBBITCOIN_CONSENSUS) \\\n   $(LIBBITCOIN_CRYPTO) \\"
      },
      {
        "sha": "c96352340e1d060bd69782ea07ec222fd426a27f",
        "filename": "src/bench/ccoins_caching.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2fc36f0d929b6fbcefcae8d986efe38a4adbeec3/src/bench/ccoins_caching.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2fc36f0d929b6fbcefcae8d986efe38a4adbeec3/src/bench/ccoins_caching.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/ccoins_caching.cpp?ref=2fc36f0d929b6fbcefcae8d986efe38a4adbeec3",
        "patch": "@@ -5,6 +5,7 @@\n #include \"bench.h\"\n #include \"coins.h\"\n #include \"policy/policy.h\"\n+#include \"policy/inputs.h\"\n #include \"wallet/crypter.h\"\n \n #include <vector>"
      },
      {
        "sha": "fd6ae362badcfb719456fb1885401101ba6bf99e",
        "filename": "src/policy/inputs.cpp",
        "status": "added",
        "additions": 101,
        "deletions": 0,
        "changes": 101,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2fc36f0d929b6fbcefcae8d986efe38a4adbeec3/src/policy/inputs.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2fc36f0d929b6fbcefcae8d986efe38a4adbeec3/src/policy/inputs.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/inputs.cpp?ref=2fc36f0d929b6fbcefcae8d986efe38a4adbeec3",
        "patch": "@@ -0,0 +1,101 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+// NOTE: This file is intended to be customised by the end user, and includes only local node policy logic\n+\n+#include \"policy/policy.h\"\n+#include \"policy/inputs.h\"\n+\n+#include \"coins.h\"\n+#include \"script/interpreter.h\"\n+#include \"tinyformat.h\"\n+#include \"util.h\"\n+#include \"utilstrencodings.h\"\n+#include \"validation.h\"\n+\n+bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n+{\n+    if (tx.IsCoinBase())\n+        return true; // Coinbases don't use vin normally\n+\n+    for (unsigned int i = 0; i < tx.vin.size(); i++)\n+    {\n+        const CTxOut& prev = mapInputs.AccessCoin(tx.vin[i].prevout).out;\n+\n+        std::vector<std::vector<unsigned char> > vSolutions;\n+        txnouttype whichType;\n+        // get the scriptPubKey corresponding to this input:\n+        const CScript& prevScript = prev.scriptPubKey;\n+        if (!Solver(prevScript, whichType, vSolutions))\n+            return false;\n+\n+        if (whichType == TX_SCRIPTHASH)\n+        {\n+            std::vector<std::vector<unsigned char> > stack;\n+            // convert the scriptSig into a stack, so we can inspect the redeemScript\n+            if (!EvalScript(stack, tx.vin[i].scriptSig, SCRIPT_VERIFY_NONE, BaseSignatureChecker(), SIGVERSION_BASE))\n+                return false;\n+            if (stack.empty())\n+                return false;\n+            CScript subscript(stack.back().begin(), stack.back().end());\n+            if (subscript.GetSigOpCount(true) > MAX_P2SH_SIGOPS) {\n+                return false;\n+            }\n+        }\n+    }\n+\n+    return true;\n+}\n+\n+bool IsWitnessStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n+{\n+    if (tx.IsCoinBase())\n+        return true; // Coinbases are skipped\n+\n+    for (unsigned int i = 0; i < tx.vin.size(); i++)\n+    {\n+        // We don't care if witness for this input is empty, since it must not be bloated.\n+        // If the script is invalid without witness, it would be caught sooner or later during validation.\n+        if (tx.vin[i].scriptWitness.IsNull())\n+            continue;\n+\n+        const CTxOut &prev = mapInputs.AccessCoin(tx.vin[i].prevout).out;\n+\n+        // get the scriptPubKey corresponding to this input:\n+        CScript prevScript = prev.scriptPubKey;\n+\n+        if (prevScript.IsPayToScriptHash()) {\n+            std::vector <std::vector<unsigned char> > stack;\n+            // If the scriptPubKey is P2SH, we try to extract the redeemScript casually by converting the scriptSig\n+            // into a stack. We do not check IsPushOnly nor compare the hash as these will be done later anyway.\n+            // If the check fails at this stage, we know that this txid must be a bad one.\n+            if (!EvalScript(stack, tx.vin[i].scriptSig, SCRIPT_VERIFY_NONE, BaseSignatureChecker(), SIGVERSION_BASE))\n+                return false;\n+            if (stack.empty())\n+                return false;\n+            prevScript = CScript(stack.back().begin(), stack.back().end());\n+        }\n+\n+        int witnessversion = 0;\n+        std::vector<unsigned char> witnessprogram;\n+\n+        // Non-witness program must not be associated with any witness\n+        if (!prevScript.IsWitnessProgram(witnessversion, witnessprogram))\n+            return false;\n+\n+        // Check P2WSH standard limits\n+        if (witnessversion == 0 && witnessprogram.size() == 32) {\n+            if (tx.vin[i].scriptWitness.stack.back().size() > MAX_STANDARD_P2WSH_SCRIPT_SIZE)\n+                return false;\n+            size_t sizeWitnessStack = tx.vin[i].scriptWitness.stack.size() - 1;\n+            if (sizeWitnessStack > MAX_STANDARD_P2WSH_STACK_ITEMS)\n+                return false;\n+            for (unsigned int j = 0; j < sizeWitnessStack; j++) {\n+                if (tx.vin[i].scriptWitness.stack[j].size() > MAX_STANDARD_P2WSH_STACK_ITEM_SIZE)\n+                    return false;\n+            }\n+        }\n+    }\n+    return true;\n+}"
      },
      {
        "sha": "053e90a62b025a9d4c4538a0b151601c8827bebb",
        "filename": "src/policy/inputs.h",
        "status": "added",
        "additions": 35,
        "deletions": 0,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2fc36f0d929b6fbcefcae8d986efe38a4adbeec3/src/policy/inputs.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2fc36f0d929b6fbcefcae8d986efe38a4adbeec3/src/policy/inputs.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/inputs.h?ref=2fc36f0d929b6fbcefcae8d986efe38a4adbeec3",
        "patch": "@@ -0,0 +1,35 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_INPUTS_H\n+#define BITCOIN_POLICY_INPUTS_H\n+\n+#include <string>\n+\n+class CCoinsViewCache;\n+class CTransaction;\n+\n+/** Maximum number of signature check operations in an IsStandard() P2SH script */\n+static const unsigned int MAX_P2SH_SIGOPS = 15;\n+/** The maximum number of witness stack items in a standard P2WSH script */\n+static const unsigned int MAX_STANDARD_P2WSH_STACK_ITEMS = 100;\n+/** The maximum size of each witness stack item in a standard P2WSH script */\n+static const unsigned int MAX_STANDARD_P2WSH_STACK_ITEM_SIZE = 80;\n+/** The maximum size of a standard witnessScript */\n+static const unsigned int MAX_STANDARD_P2WSH_SCRIPT_SIZE = 3600;\n+\n+/**\n+ * Check for standard transaction types\n+ * @param[in] mapInputs    Map of previous transactions that have outputs we're spending\n+ * @return True if all inputs (scriptSigs) use only standard transaction forms\n+ */\n+bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs);\n+/**\n+ * Check if the transaction is over standard P2WSH resources limit:\n+ * 3600bytes witnessScript size, 80bytes per witness stack element, 100 witness stack elements\n+ * These limits are adequate for multi-signature up to n-of-100 using OP_CHECKSIG, OP_ADD, and OP_EQUAL,\n+ */\n+bool IsWitnessStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs);\n+\n+#endif // BITCOIN_POLICY_INPUTS_H"
      },
      {
        "sha": "4ec889f1736bb6f980663b6a165047a511a524ae",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 86,
        "changes": 86,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2fc36f0d929b6fbcefcae8d986efe38a4adbeec3/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2fc36f0d929b6fbcefcae8d986efe38a4adbeec3/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=2fc36f0d929b6fbcefcae8d986efe38a4adbeec3",
        "patch": "@@ -158,92 +158,6 @@ bool IsStandardTx(const CTransaction& tx, std::string& reason, const bool witnes\n     return true;\n }\n \n-bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n-{\n-    if (tx.IsCoinBase())\n-        return true; // Coinbases don't use vin normally\n-\n-    for (unsigned int i = 0; i < tx.vin.size(); i++)\n-    {\n-        const CTxOut& prev = mapInputs.AccessCoin(tx.vin[i].prevout).out;\n-\n-        std::vector<std::vector<unsigned char> > vSolutions;\n-        txnouttype whichType;\n-        // get the scriptPubKey corresponding to this input:\n-        const CScript& prevScript = prev.scriptPubKey;\n-        if (!Solver(prevScript, whichType, vSolutions))\n-            return false;\n-\n-        if (whichType == TX_SCRIPTHASH)\n-        {\n-            std::vector<std::vector<unsigned char> > stack;\n-            // convert the scriptSig into a stack, so we can inspect the redeemScript\n-            if (!EvalScript(stack, tx.vin[i].scriptSig, SCRIPT_VERIFY_NONE, BaseSignatureChecker(), SIGVERSION_BASE))\n-                return false;\n-            if (stack.empty())\n-                return false;\n-            CScript subscript(stack.back().begin(), stack.back().end());\n-            if (subscript.GetSigOpCount(true) > MAX_P2SH_SIGOPS) {\n-                return false;\n-            }\n-        }\n-    }\n-\n-    return true;\n-}\n-\n-bool IsWitnessStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n-{\n-    if (tx.IsCoinBase())\n-        return true; // Coinbases are skipped\n-\n-    for (unsigned int i = 0; i < tx.vin.size(); i++)\n-    {\n-        // We don't care if witness for this input is empty, since it must not be bloated.\n-        // If the script is invalid without witness, it would be caught sooner or later during validation.\n-        if (tx.vin[i].scriptWitness.IsNull())\n-            continue;\n-\n-        const CTxOut &prev = mapInputs.AccessCoin(tx.vin[i].prevout).out;\n-\n-        // get the scriptPubKey corresponding to this input:\n-        CScript prevScript = prev.scriptPubKey;\n-\n-        if (prevScript.IsPayToScriptHash()) {\n-            std::vector <std::vector<unsigned char> > stack;\n-            // If the scriptPubKey is P2SH, we try to extract the redeemScript casually by converting the scriptSig\n-            // into a stack. We do not check IsPushOnly nor compare the hash as these will be done later anyway.\n-            // If the check fails at this stage, we know that this txid must be a bad one.\n-            if (!EvalScript(stack, tx.vin[i].scriptSig, SCRIPT_VERIFY_NONE, BaseSignatureChecker(), SIGVERSION_BASE))\n-                return false;\n-            if (stack.empty())\n-                return false;\n-            prevScript = CScript(stack.back().begin(), stack.back().end());\n-        }\n-\n-        int witnessversion = 0;\n-        std::vector<unsigned char> witnessprogram;\n-\n-        // Non-witness program must not be associated with any witness\n-        if (!prevScript.IsWitnessProgram(witnessversion, witnessprogram))\n-            return false;\n-\n-        // Check P2WSH standard limits\n-        if (witnessversion == 0 && witnessprogram.size() == 32) {\n-            if (tx.vin[i].scriptWitness.stack.back().size() > MAX_STANDARD_P2WSH_SCRIPT_SIZE)\n-                return false;\n-            size_t sizeWitnessStack = tx.vin[i].scriptWitness.stack.size() - 1;\n-            if (sizeWitnessStack > MAX_STANDARD_P2WSH_STACK_ITEMS)\n-                return false;\n-            for (unsigned int j = 0; j < sizeWitnessStack; j++) {\n-                if (tx.vin[i].scriptWitness.stack[j].size() > MAX_STANDARD_P2WSH_STACK_ITEM_SIZE)\n-                    return false;\n-            }\n-        }\n-    }\n-    return true;\n-}\n-\n CFeeRate incrementalRelayFee = CFeeRate(DEFAULT_INCREMENTAL_RELAY_FEE);\n CFeeRate dustRelayFee = CFeeRate(DUST_RELAY_TX_FEE);\n unsigned int nBytesPerSigOp = DEFAULT_BYTES_PER_SIGOP;"
      },
      {
        "sha": "1d9ee341cf6076b2a8d48f1fa8f8f948eda07cfe",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 4,
        "deletions": 24,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2fc36f0d929b6fbcefcae8d986efe38a4adbeec3/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2fc36f0d929b6fbcefcae8d986efe38a4adbeec3/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=2fc36f0d929b6fbcefcae8d986efe38a4adbeec3",
        "patch": "@@ -24,8 +24,6 @@ static const unsigned int DEFAULT_BLOCK_MAX_WEIGHT = 3000000;\n static const unsigned int DEFAULT_BLOCK_MIN_TX_FEE = 1000;\n /** The maximum weight for transactions we're willing to relay/mine */\n static const unsigned int MAX_STANDARD_TX_WEIGHT = 400000;\n-/** Maximum number of signature check operations in an IsStandard() P2SH script */\n-static const unsigned int MAX_P2SH_SIGOPS = 15;\n /** The maximum number of sigops we're willing to relay/mine in a single tx */\n static const unsigned int MAX_STANDARD_TX_SIGOPS_COST = MAX_BLOCK_SIGOPS_COST/5;\n /** Default for -maxmempool, maximum megabytes of mempool memory usage */\n@@ -34,12 +32,6 @@ static const unsigned int DEFAULT_MAX_MEMPOOL_SIZE = 300;\n static const unsigned int DEFAULT_INCREMENTAL_RELAY_FEE = 1000;\n /** Default for -bytespersigop */\n static const unsigned int DEFAULT_BYTES_PER_SIGOP = 20;\n-/** The maximum number of witness stack items in a standard P2WSH script */\n-static const unsigned int MAX_STANDARD_P2WSH_STACK_ITEMS = 100;\n-/** The maximum size of each witness stack item in a standard P2WSH script */\n-static const unsigned int MAX_STANDARD_P2WSH_STACK_ITEM_SIZE = 80;\n-/** The maximum size of a standard witnessScript */\n-static const unsigned int MAX_STANDARD_P2WSH_SCRIPT_SIZE = 3600;\n /** Min feerate for defining dust. Historically this has been the same as the\n  * minRelayTxFee, however changing the dust limit changes which transactions are\n  * standard and should be done with care and ideally rarely. It makes sense to\n@@ -79,23 +71,11 @@ CAmount GetDustThreshold(const CTxOut& txout, const CFeeRate& dustRelayFee);\n bool IsDust(const CTxOut& txout, const CFeeRate& dustRelayFee);\n \n bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType, const bool witnessEnabled = false);\n-    /**\n-     * Check for standard transaction types\n-     * @return True if all outputs (scriptPubKeys) use only standard transaction forms\n-     */\n+/**\n+ * Check for standard transaction types\n+ * @return True if all outputs (scriptPubKeys) use only standard transaction forms\n+ */\n bool IsStandardTx(const CTransaction& tx, std::string& reason, const bool witnessEnabled = false);\n-    /**\n-     * Check for standard transaction types\n-     * @param[in] mapInputs    Map of previous transactions that have outputs we're spending\n-     * @return True if all inputs (scriptSigs) use only standard transaction forms\n-     */\n-bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs);\n-    /**\n-     * Check if the transaction is over standard P2WSH resources limit:\n-     * 3600bytes witnessScript size, 80bytes per witness stack element, 100 witness stack elements\n-     * These limits are adequate for multi-signature up to n-of-100 using OP_CHECKSIG, OP_ADD, and OP_EQUAL,\n-     */\n-bool IsWitnessStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs);\n \n extern CFeeRate incrementalRelayFee;\n extern CFeeRate dustRelayFee;"
      },
      {
        "sha": "752b767e60aacf86ed668b0125931c990148d4f0",
        "filename": "src/test/script_P2SH_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2fc36f0d929b6fbcefcae8d986efe38a4adbeec3/src/test/script_P2SH_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2fc36f0d929b6fbcefcae8d986efe38a4adbeec3/src/test/script_P2SH_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_P2SH_tests.cpp?ref=2fc36f0d929b6fbcefcae8d986efe38a4adbeec3",
        "patch": "@@ -8,6 +8,7 @@\n #include \"keystore.h\"\n #include \"validation.h\"\n #include \"policy/policy.h\"\n+#include \"policy/inputs.h\"\n #include \"script/script.h\"\n #include \"script/script_error.h\"\n #include \"script/sign.h\""
      },
      {
        "sha": "039f26c9419c3e6a986c2827572d8bee8f3a97df",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2fc36f0d929b6fbcefcae8d986efe38a4adbeec3/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2fc36f0d929b6fbcefcae8d986efe38a4adbeec3/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=2fc36f0d929b6fbcefcae8d986efe38a4adbeec3",
        "patch": "@@ -15,6 +15,7 @@\n #include \"keystore.h\"\n #include \"validation.h\"\n #include \"policy/policy.h\"\n+#include \"policy/inputs.h\"\n #include \"script/script.h\"\n #include \"script/sign.h\"\n #include \"script/script_error.h\""
      },
      {
        "sha": "3ec7c41fdebd285be1e3f0504398c81888786013",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2fc36f0d929b6fbcefcae8d986efe38a4adbeec3/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2fc36f0d929b6fbcefcae8d986efe38a4adbeec3/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=2fc36f0d929b6fbcefcae8d986efe38a4adbeec3",
        "patch": "@@ -19,6 +19,7 @@\n #include \"init.h\"\n #include \"policy/fees.h\"\n #include \"policy/policy.h\"\n+#include \"policy/inputs.h\"\n #include \"pow.h\"\n #include \"primitives/block.h\"\n #include \"primitives/transaction.h\""
      }
    ]
  }
]