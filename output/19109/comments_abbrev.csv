jnewbery,2020-05-29 22:59:16,"Concept ACK.\n\nWhat's the additional memory overhead per peer?",https://github.com/bitcoin/bitcoin/pull/19109#issuecomment-636228113,636228113,
sipa,2020-05-29 23:23:19,"~~Around 54 kB.~~\n\nEDIT: Around 37 KiB now",https://github.com/bitcoin/bitcoin/pull/19109#issuecomment-636233792,636233792,
ajtowns,2020-05-30 00:26:17,"If I've got the maths right, in a 15 minute interval we'll announce up to 15,750 txs to an outbound peer (35 every 2 seconds), and 6,300 txs to inbound peers (35 every 5 seconds). If RBF and the like didn't exist, 10k txs would be about 4 blocks worth on average based on some recent blocks.\n\nRelaying tx's from the mempool in addition to mapRelay was introduced in #16851 and helps obtain missin",https://github.com/bitcoin/bitcoin/pull/19109#issuecomment-636246238,636246238,
DrahtBot,2020-05-30 02:55:00,<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.,https://github.com/bitcoin/bitcoin/pull/19109#issuecomment-636265665,636265665,
sipa,2020-06-01 08:56:00,"@ajtowns Good points. We should be moving towards relying more on the mempool where it can provide that data. Your code looks like the right approach.\n\nSo I guess a question is parameters.\n\nWith Poisson distributed intervals, 70 s is enough for a 1 in a million chance to not have had any broadcast events. 104 s is enough for 1 in a billion. Unless there is another reason to extend, 2 minutes s",https://github.com/bitcoin/bitcoin/pull/19109#issuecomment-636712875,636712875,
sipa,2020-06-01 22:49:15,"Perhaps the first question is: after how much time are we okay with attackers knowing everything that was in the mempool at the time?\n\nIf that number is small, perhaps it is sufficient to just allow responding to all tx requests, as long as the tx entered the mempool before the last inv sent out to that peer (a variable which could replace the last BIP35 response to that peer one). That would ",https://github.com/bitcoin/bitcoin/pull/19109#issuecomment-637165812,637165812,
sipa,2020-06-02 03:07:54,"Updated to @ajtowns' approach suggested above, with a delay constant of 2 minutes.",https://github.com/bitcoin/bitcoin/pull/19109#issuecomment-637242837,637242837,
sipa,2020-06-03 20:02:36,Pinging a few people who may be interested in reviewing: @naumenkogs @amiti @jonatack @MarcoFalke ,https://github.com/bitcoin/bitcoin/pull/19109#issuecomment-638431540,638431540,
sipa,2020-06-04 21:16:30,"I'm running with this code, plus this logging patch:\n\n```diff\n@@ -1540,6 +1540,10 @@ CTransactionRef static FindTxForGetData(CNode* peer, const uint256& txid, const\n         }\n     }\n \n+    if (txinfo.tx) {\n+        LogPrint(BCLog::NET, ""peer requested premature tx %s peer=%d\n"", txid.ToString(), peer->GetId());\n+    }\n+\n     return {};\n }\n```\n\nAnd it's occasionally l",https://github.com/bitcoin/bitcoin/pull/19109#issuecomment-639120895,639120895,
ajtowns,2020-06-05 04:37:48,"> And it's occasionally logging premature entries\n\nI got some examples of that too; but the peer that was doing it looked very spy-ish.\n\nHowever, I think a legit client could trigger it, if the sequence was ""here's tx X; peer connects; here's tx Y which spends X:n; peers asks for Y; peer doesn't have X so asks for X"", all within the 2 minute timeframe.",https://github.com/bitcoin/bitcoin/pull/19109#issuecomment-639253623,639253623,
sipa,2020-06-05 22:47:36,"@ajtowns Almost all cases I'm seeing are within 90s of the connection being opened, which is evidence for the dependent transactions theory. I guess a potential solution is inserting the in-mempool parents of relayed transactions to the Bloom filter (as in a sense, they've been ""inved"").",https://github.com/bitcoin/bitcoin/pull/19109#issuecomment-639876495,639876495,
sipa,2020-06-07 17:14:39,I added a commit to add unconfirmed parents of relayed transactions into the recently-relayed Bloom filter. I'm not seeing any premature requests anymore.,https://github.com/bitcoin/bitcoin/pull/19109#issuecomment-640250382,640250382,
jonatack,2020-06-08 10:18:51,"For reviewers who might be confused by the logging patch above, where CNode is a pointer rather than a reference (ISTM this was recently changed to a reference) and the code is located ~120 lines higher up than now, I think the logging patch is the following -- correct me if wrong.\n\n```diff\n@@ -1658,6 +1658,10 @@ CTransactionRef static FindTxForGetData(CNode& peer, const uint256& txid, const",https://github.com/bitcoin/bitcoin/pull/19109#issuecomment-640513111,640513111,
jonatack,2020-06-09 08:19:53,"Running a build at 19825f9143c3f1443aeb6b047ac4c02e6c0bb746 it took a half day to see any premature requests. So far 4 peers did so.\n\n<details><summary>total premature tx requests (from 4 peers)</summary><p>\n\n```\n$ grep ""peer requested premature tx"" ~/.bitcoin/debug.log\n2020-06-09T00:04:00Z peer requested premature tx 4f81c41c4190dcd345c16e12f7c7c96bcbfb692f88cd72b3b7102dd3e55ac925 pee",https://github.com/bitcoin/bitcoin/pull/19109#issuecomment-641116818,641116818,
naumenkogs,2020-06-10 10:59:43,"Concept ACK.\nThe code also looks correct.\n\n1. I assume mempool requests are ""trusted"" in a sense that those nodes can actually spy on us? At least I see how to accomplish that with current code and after a change, so just double-checking.\n2. I was wondering about probing child transactions... Let's say the parent was sitting there for a day, but now a child comes. A child should not be pro",https://github.com/bitcoin/bitcoin/pull/19109#issuecomment-641926760,641926760,
sipa,2020-06-11 03:02:30,"@naumenkogs \n\n1. Yes, I think that's fine. BIP35 requests are only enabled with opt-in (whitelist, or when BIP37 is also enabled). Further, BIP35 responses go out asynchronously, after the normal inv Poisson delay, so this can't be used to get better time accuracy (only to bypass the 2 minutes unconditional relay barrier).\n\n2. How does this let you probe for child transactions?",https://github.com/bitcoin/bitcoin/pull/19109#issuecomment-642376743,642376743,
naumenkogs,2020-06-12 06:57:42,"1. In FindTxForGetData, the first condition can be satisfied by just spamming mempool requests and requesting arbitrary transactions (getting a BIP35 response is not necessary for attacker).\n\n2. I don't have an exact scenario. Just something for us to keep in mind re package relay. No action required for this PR.",https://github.com/bitcoin/bitcoin/pull/19109#issuecomment-643102535,643102535,
jonatack,2020-06-12 07:18:29,"> I added a commit to add unconfirmed parents of relayed transactions into the recently-relayed Bloom filter. I'm not seeing any premature requests anymore.\n\nAfter running 36 hours with this commit, I'm not seeing them anymore either, as opposed to at the previous commit as described above https://github.com/bitcoin/bitcoin/pull/19109#issuecomment-641116818.",https://github.com/bitcoin/bitcoin/pull/19109#issuecomment-643111821,643111821,
naumenkogs,2020-06-17 12:33:34,utACK 47dd49a,https://github.com/bitcoin/bitcoin/pull/19109#issuecomment-645345845,645345845,
jnewbery,2020-06-18 01:03:47,utACK 2da7ee37b7843ce871a48fc16911e93b7038cea0,https://github.com/bitcoin/bitcoin/pull/19109#issuecomment-645706724,645706724,
ajtowns,2020-06-18 01:50:48,I'm also not seeing premature requests as of 39676fd490dc75af82d7ee0ec00b6c87d139dbc4,https://github.com/bitcoin/bitcoin/pull/19109#issuecomment-645720453,645720453,
sipa,2020-06-18 02:14:50,"@naumenkogs \n\n> 1. In FindTxForGetData, the first condition can be satisfied by just spamming mempool requests and requesting arbitrary transactions (getting a BIP35 response is not necessary for attacker).\n\n`m_last_mempool_req` is only set once a BIP35 request is processed, so the attacker does have to wait for the response (which is subject to the same Poisson delay as normal invs). Give",https://github.com/bitcoin/bitcoin/pull/19109#issuecomment-645727237,645727237,
naumenkogs,2020-06-18 07:10:28,utACK 2da7ee37b7843ce871a48fc16911e93b7038cea0,https://github.com/bitcoin/bitcoin/pull/19109#issuecomment-645825703,645825703,
ajtowns,2020-07-01 13:49:33,"> I'm also not seeing premature requests as of [39676fd](https://github.com/bitcoin/bitcoin/commit/39676fd490dc75af82d7ee0ec00b6c87d139dbc4)\n\nAfter a couple weeks running this patch I've now seen exactly one premature request,\n```\n2020-06-20T13:57:14Z peer requested premature (42s) tx 031dcb8e06d681392004fdc308346984f33dbd88b40a15fa25c204de67fbaa09 peer=24\n```\n\nThere's not quite enou",https://github.com/bitcoin/bitcoin/pull/19109#issuecomment-652430078,652430078,
jnewbery,2020-07-09 06:19:55,"reACK f32c408f3\n\nOnly changes:\n- rebase on master\n- updated code comment (https://github.com/bitcoin/bitcoin/pull/19109#discussion_r442747935)\n- make `peer` const in `FindTxForGetData()`\n- Use `WITH_LOCK` macro in `ProcessGetData()` (https://github.com/bitcoin/bitcoin/pull/19109#discussion_r448402402)\n\nI think this is ready for merge if @naumenkogs @jonatack and @ajtowns reACK.",https://github.com/bitcoin/bitcoin/pull/19109#issuecomment-655925949,655925949,
ajtowns,2020-07-13 03:22:17,re-ACK f32c408f3a0b7e597977df2bc2cdc4ae298586e5,https://github.com/bitcoin/bitcoin/pull/19109#issuecomment-657337738,657337738,
jnewbery,2020-07-13 08:23:14,"I think this is ready for merge. It has three ACKs on the latest HEAD:\n\najtowns (https://github.com/bitcoin/bitcoin/pull/19109#issuecomment-657337738)\njonatack (https://github.com/bitcoin/bitcoin/pull/19109#pullrequestreview-445339521)\njnewbery (https://github.com/bitcoin/bitcoin/pull/19109#issuecomment-655925949)\n\nplus one ACK on a previous HEAD:\n\nnaukmenkogs (https://github.com/b",https://github.com/bitcoin/bitcoin/pull/19109#issuecomment-657403045,657403045,
naumenkogs,2020-06-10 09:10:01,"announced recently, not relayed?",https://github.com/bitcoin/bitcoin/pull/19109#discussion_r437977348,437977348,src/net_processing.cpp
naumenkogs,2020-06-10 09:10:45,"same question about the commit name:\n""Only respond to requests for recently relayed transactions """,https://github.com/bitcoin/bitcoin/pull/19109#discussion_r437977759,437977759,src/net_processing.cpp
sipa,2020-06-11 02:58:51,"@naumenkogs Yeah, announced is clearer terminology. I've changed it in the variable name, comments, and commit message.",https://github.com/bitcoin/bitcoin/pull/19109#discussion_r438515417,438515417,src/net_processing.cpp
jnewbery,2020-06-15 19:49:42,"I know we don't have a style guide for line length, but this seems unnecessarily long, and makes this difficult to read or review in many places. Can I convince you to make it shorter?\n\nStatic asserts require a message parameter, but I don't see the benefit of making them long and detailed. That detail can go in the comment above.",https://github.com/bitcoin/bitcoin/pull/19109#discussion_r440408679,440408679,src/net_processing.cpp
jnewbery,2020-06-15 19:54:13,"Perhaps it makes sense to add a new `constexpr int MAX_INVENTORY_RELAY_PER_SECOND{7}`. That value is used to derive `INVENTORY_BROADCAST_MAX`, and you're using `INVENTORY_BROADCAST_MAX` to rederive it here. I think it'd be clearer to just be its own constant.",https://github.com/bitcoin/bitcoin/pull/19109#discussion_r440410878,440410878,src/net_processing.cpp
jnewbery,2020-06-15 20:08:07,nit: Responses _to_ MEMPOOL requests...,https://github.com/bitcoin/bitcoin/pull/19109#discussion_r440417767,440417767,src/net_processing.cpp
jnewbery,2020-06-15 20:14:39,"I think this naturally belongs in the `TxRelay` struct, along with the rest of the per-peer transaction relay data. It's a bit unfortunate that it's defined in net.h, but it'd mean you don't need to lock cs_main to access it.",https://github.com/bitcoin/bitcoin/pull/19109#discussion_r440421113,440421113,src/net_processing.cpp
jnewbery,2020-06-15 20:17:07,"Should we do this recursively? (ie include all unconfirmed ancestors, not just unconfirmed parents)",https://github.com/bitcoin/bitcoin/pull/19109#discussion_r440422397,440422397,src/net_processing.cpp
jnewbery,2020-06-15 20:17:43,placing `m_recently_announed_invs` under `cs_tx_inventory` would avoid this lock dance.,https://github.com/bitcoin/bitcoin/pull/19109#discussion_r440422700,440422700,src/net_processing.cpp
sipa,2020-06-16 16:33:45,"I agree, but at the same time TxRelay really belongs in net_processing...\n\nI'd rather not move it to net, because that would mean also moving the INVENTORY_MAX_RECENT_RELAY to net.",https://github.com/bitcoin/bitcoin/pull/19109#discussion_r440988253,440988253,src/net_processing.cpp
sipa,2020-06-16 16:34:56,"I don't think this is needed, because when they request the parent, the grandparents will be added to the filter, and so on.",https://github.com/bitcoin/bitcoin/pull/19109#discussion_r440988995,440988995,src/net_processing.cpp
sipa,2020-06-16 16:35:18,"Agree, but I'd rather not; see reasons above.",https://github.com/bitcoin/bitcoin/pull/19109#discussion_r440989228,440989228,src/net_processing.cpp
sipa,2020-06-16 16:45:18,Done.,https://github.com/bitcoin/bitcoin/pull/19109#discussion_r440995658,440995658,src/net_processing.cpp
sipa,2020-06-16 16:45:38,Good idea; I've added something like that.,https://github.com/bitcoin/bitcoin/pull/19109#discussion_r440995838,440995838,src/net_processing.cpp
sipa,2020-06-16 16:45:47,Shortened it.,https://github.com/bitcoin/bitcoin/pull/19109#discussion_r440995930,440995930,src/net_processing.cpp
jnewbery,2020-06-16 18:18:57,"I think ""inventory items"" or ""announced transactions"" is better than ""inventory messages"", since an INV message can contain many tx inv items.",https://github.com/bitcoin/bitcoin/pull/19109#discussion_r441051642,441051642,src/net_processing.cpp
naumenkogs,2020-06-17 12:29:04,"I tried to exploit this for spying, but the worst I came up with is:\n1. A victim transmits tx_A (paying to a spy) to the network via regular relay.\n2. A spy spends tx_A via tx_B and transmits tx_B immediately to *everyone*\n3. Now when tx_A reaches nodes in the network, they add both tx_A, tx_B to their mempool and announce them.\n4. Now the victim's tx_A can be time-analyzed faster, because",https://github.com/bitcoin/bitcoin/pull/19109#discussion_r441506702,441506702,src/net_processing.cpp
jnewbery,2020-06-17 13:01:37,"I don't understand (4) ""before tx_A is announced, but after tx_B is announced"". Aren't they announced at the same time? How would a node announce the child before the parent?",https://github.com/bitcoin/bitcoin/pull/19109#discussion_r441526314,441526314,src/net_processing.cpp
naumenkogs,2020-06-17 13:25:13,"Oh, I think you're right, because they will appear in the same INV batch when `nNextInvSend` is triggered. I forgot it's not a per-TX thing.",https://github.com/bitcoin/bitcoin/pull/19109#discussion_r441542181,441542181,src/net_processing.cpp
sipa,2020-06-18 00:59:02,"Good point, that was confusing. Fixed.",https://github.com/bitcoin/bitcoin/pull/19109#discussion_r441911001,441911001,src/net_processing.cpp
jonatack,2020-06-19 09:58:58,3e72ffe nit: `s/The how many/How many|The number of/`,https://github.com/bitcoin/bitcoin/pull/19109#discussion_r442747935,442747935,src/net_processing.cpp
jonatack,2020-06-19 10:16:37,"Currently this static assert verifies that 3500 >= 840 (7 * 120)\n\nVerified the two new calculated constants\n```cpp\nstatic_assert(INVENTORY_BROADCAST_MAX == 35);\nstatic_assert(INVENTORY_BROADCAST_PER_SECOND * UNCONDITIONAL_RELAY_DELAY / std::chrono::seconds{1} == 7 * 120);\n```",https://github.com/bitcoin/bitcoin/pull/19109#discussion_r442756387,442756387,src/net_processing.cpp
jonatack,2020-06-19 10:26:41,"abbe15f while touching this, ISTM `peer` may be passed as reference to const\n",https://github.com/bitcoin/bitcoin/pull/19109#discussion_r442761085,442761085,src/net_processing.cpp
jnewbery,2020-07-01 14:17:49,Makes sense. I'm hoping to move all remaining application layer stuff from net to net_processing soon: https://github.com/bitcoin/bitcoin/issues/19398. This can be incorporated into TxRelay when that happens.,https://github.com/bitcoin/bitcoin/pull/19109#discussion_r448395613,448395613,src/net_processing.cpp
ajtowns,2020-07-01 14:27:46,"Could have said\n\n```c++\nbool add = WITH_LOCK(pfrom.m_tx_relay->cs_tx_inventory, return !pfrom.m_tx_relay->filterInventoryKnown.contains(txin.prevout.hash);\n```",https://github.com/bitcoin/bitcoin/pull/19109#discussion_r448402402,448402402,src/net_processing.cpp
ajtowns,2020-07-01 14:37:14,"I suspect this is the cause of the premature request I saw:\n\n * Peer tells me it has tx X (so it's in filterInventoryKnown)\n * Peer sees tx R, which RBFs X, removing it from the mempool\n * I see tx Y, which is a child of X\n * I announce tx Y to peer\n * Peer requests Y, I send it\n * Peer requests parent X\n\nand all this happens within X's UNCONDITIONAL_RELAY_DELAY.\n\nI'm not sur",https://github.com/bitcoin/bitcoin/pull/19109#discussion_r448409198,448409198,src/net_processing.cpp
naumenkogs,2020-07-01 15:31:27,Yeah I can't find any issue with this sequence of events either.,https://github.com/bitcoin/bitcoin/pull/19109#discussion_r448445802,448445802,src/net_processing.cpp
sipa,2020-07-08 23:18:32,@ajtowns I also don't think there is any real problem here... but perhaps the last commit (which inserts unconfirmed parents into the filter) should just not check `filterInventoryKnown`?,https://github.com/bitcoin/bitcoin/pull/19109#discussion_r451876517,451876517,src/net_processing.cpp
ajtowns,2020-07-09 00:15:25,"I was worried that might open a DoS vector where you send a tx with lots of parents that would then roll `m_recently_announced_invs` over, thus potentially removing new txs that hadn't been requested yet, causing them to not get relayed.\n\nIt'd still be an edge case -- you'd need the node sending the child tx to have the parents, and the node receiving the child tx to not have many of them; so ",https://github.com/bitcoin/bitcoin/pull/19109#discussion_r451893412,451893412,src/net_processing.cpp
sipa,2020-07-09 01:20:35,"Hmm, yes. It's probably not big enough an issue to care about. Arguably it's desirable - if they had X and replaced it with R, we're not doing them a favor by giving them X again.",https://github.com/bitcoin/bitcoin/pull/19109#discussion_r451910255,451910255,src/net_processing.cpp
sipa,2020-07-09 01:34:36,Done.,https://github.com/bitcoin/bitcoin/pull/19109#discussion_r451913913,451913913,src/net_processing.cpp
sipa,2020-07-09 01:34:46,Done.,https://github.com/bitcoin/bitcoin/pull/19109#discussion_r451913969,451913969,src/net_processing.cpp
sipa,2020-07-09 01:34:54,Done.,https://github.com/bitcoin/bitcoin/pull/19109#discussion_r451913995,451913995,src/net_processing.cpp
sdaftuar,2020-07-15 17:00:11,"Rather than loop over all inputs (of which there could be thousands), perhaps we should instead just ask the mempool for unconfirmed parents?",https://github.com/bitcoin/bitcoin/pull/19109#discussion_r455197217,455197217,src/net_processing.cpp
sdaftuar,2020-07-15 17:04:04,"I'm not sure I quite follow the conversation here, so apologies if this is redundant. I was just looking at this commit and wondering if we might insert too many entries into the bloom filter -- being willing to add all unconfirmed parents of a transaction makes the bloom filter effectively 24x smaller than we'd expect it to be.\n\nFor outbound peers, I think we're only within a factor of 2 of b",https://github.com/bitcoin/bitcoin/pull/19109#discussion_r455199527,455199527,src/net_processing.cpp
sdaftuar,2020-07-18 19:29:43,"So if you have a transaction A with (say) 2000 outputs, and a transaction B that spends all 2000 of those outputs, then I believe this logic would cause us to enter A's txid 2000 times into the filter, which I believe will waste thousands of filter entries, right?",https://github.com/bitcoin/bitcoin/pull/19109#discussion_r456820373,456820373,src/net_processing.cpp
sipa,2020-07-18 20:20:29,"@sdaftuar Where does the number 24x and 2x come from? I think you may be right that there is a mismatch; `INVENTORY_MAX_RECENT_RELAY` is sized based on the avg _outbound_ inv rate, while the auto-adding of unconfirmed parents may mean that indirectly everything added to the mempool in the past `UNCONDITIONAL_RELAY_DELAY` can be announced - is there any reason why there'd be a lower bound than that",https://github.com/bitcoin/bitcoin/pull/19109#discussion_r456824369,456824369,src/net_processing.cpp
sdaftuar,2020-07-18 20:50:09,"@sipa On further thought I think my concern about the size due to transaction chains may be incorrect -- I forgot that we add transactions that we announce to a peer to that peer's `filterInventoryKnown`, which means that such transactions wouldn't be re-added to the peer's recently announced filter.  So the only situation where you get this potential issue of adding a much larger multiple of the ",https://github.com/bitcoin/bitcoin/pull/19109#discussion_r456826659,456826659,src/net_processing.cpp
