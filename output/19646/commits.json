[
  {
    "sha": "c91b241b48d7f97b3e6b39d84ec780f2a3e3a0a7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjOTFiMjQxYjQ4ZDdmOTdiM2U2YjM5ZDg0ZWM3ODBmMmEzZTNhMGE3",
    "commit": {
      "author": {
        "name": "Jake Leventhal",
        "email": "jakeleventhal@me.com",
        "date": "2020-08-11T06:24:12Z"
      },
      "committer": {
        "name": "Jake Leventhal",
        "email": "jakeleventhal@me.com",
        "date": "2020-08-15T20:06:03Z"
      },
      "message": "Updated outdated help command for getblocktemplate (fixes #19625)\n\n* Removed coinbasetxn from the getblocktemplate help outputs\n* Added the missing name for transactions in the help outputs\n* Added getblocktemplate help outputs for longpollid and default_witness_commitment\n* Added more clarity to capabilities, rules, and coinbaseaux for getblocktemplate help (credit to luke-jr)\n\nCo-authored-by: Luke Dashjr <luke+github_public@dashjr.org>",
      "tree": {
        "sha": "e3ddb4f0f2c74d1a2ae7b0d6d2e41dd761739a4c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e3ddb4f0f2c74d1a2ae7b0d6d2e41dd761739a4c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c91b241b48d7f97b3e6b39d84ec780f2a3e3a0a7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c91b241b48d7f97b3e6b39d84ec780f2a3e3a0a7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c91b241b48d7f97b3e6b39d84ec780f2a3e3a0a7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c91b241b48d7f97b3e6b39d84ec780f2a3e3a0a7/comments",
    "author": {
      "login": "jakeleventhal",
      "id": 15133828,
      "node_id": "MDQ6VXNlcjE1MTMzODI4",
      "avatar_url": "https://avatars.githubusercontent.com/u/15133828?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jakeleventhal",
      "html_url": "https://github.com/jakeleventhal",
      "followers_url": "https://api.github.com/users/jakeleventhal/followers",
      "following_url": "https://api.github.com/users/jakeleventhal/following{/other_user}",
      "gists_url": "https://api.github.com/users/jakeleventhal/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jakeleventhal/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jakeleventhal/subscriptions",
      "organizations_url": "https://api.github.com/users/jakeleventhal/orgs",
      "repos_url": "https://api.github.com/users/jakeleventhal/repos",
      "events_url": "https://api.github.com/users/jakeleventhal/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jakeleventhal/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jakeleventhal",
      "id": 15133828,
      "node_id": "MDQ6VXNlcjE1MTMzODI4",
      "avatar_url": "https://avatars.githubusercontent.com/u/15133828?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jakeleventhal",
      "html_url": "https://github.com/jakeleventhal",
      "followers_url": "https://api.github.com/users/jakeleventhal/followers",
      "following_url": "https://api.github.com/users/jakeleventhal/following{/other_user}",
      "gists_url": "https://api.github.com/users/jakeleventhal/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jakeleventhal/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jakeleventhal/subscriptions",
      "organizations_url": "https://api.github.com/users/jakeleventhal/orgs",
      "repos_url": "https://api.github.com/users/jakeleventhal/repos",
      "events_url": "https://api.github.com/users/jakeleventhal/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jakeleventhal/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a78742830aa35bf57bcb0a4730977a1e5a1876bc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a78742830aa35bf57bcb0a4730977a1e5a1876bc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a78742830aa35bf57bcb0a4730977a1e5a1876bc"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 9,
      "deletions": 10
    },
    "files": [
      {
        "sha": "30133c6d3878a1a9a7dbd8d8ec4513ee32762ad3",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 10,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c91b241b48d7f97b3e6b39d84ec780f2a3e3a0a7/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c91b241b48d7f97b3e6b39d84ec780f2a3e3a0a7/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=c91b241b48d7f97b3e6b39d84ec780f2a3e3a0a7",
        "patch": "@@ -500,12 +500,13 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\n                             {\"mode\", RPCArg::Type::STR, /* treat as named arg */ RPCArg::Optional::OMITTED_NAMED_ARG, \"This must be set to \\\"template\\\", \\\"proposal\\\" (see BIP 23), or omitted\"},\n                             {\"capabilities\", RPCArg::Type::ARR, /* treat as named arg */ RPCArg::Optional::OMITTED_NAMED_ARG, \"A list of strings\",\n                                 {\n-                                    {\"support\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"client side supported feature, 'longpoll', 'coinbasetxn', 'coinbasevalue', 'proposal', 'serverlist', 'workid'\"},\n+                                    {\"str\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"client side supported feature, 'longpoll', 'coinbasevalue', 'proposal', 'serverlist', 'workid'\"},\n                                 },\n                                 },\n                             {\"rules\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"A list of strings\",\n                                 {\n-                                    {\"support\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"client side supported softfork deployment\"},\n+                                    {\"segwit\", RPCArg::Type::STR, RPCArg::Optional::NO, \"(literal) indicates client side segwit support\"},\n+                                    {\"str\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"other client side supported softfork deployment\"},\n                                 },\n                                 },\n                         },\n@@ -517,15 +518,15 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\n                         {RPCResult::Type::NUM, \"version\", \"The preferred block version\"},\n                         {RPCResult::Type::ARR, \"rules\", \"specific block rules that are to be enforced\",\n                             {\n-                                {RPCResult::Type::STR, \"\", \"rulename\"},\n+                                {RPCResult::Type::STR, \"\", \"name of a rule the client must understand to some extent; see BIP 9 for format\"},\n                             }},\n                         {RPCResult::Type::OBJ_DYN, \"vbavailable\", \"set of pending, supported versionbit (BIP 9) softfork deployments\",\n                             {\n                                 {RPCResult::Type::NUM, \"rulename\", \"identifies the bit number as indicating acceptance and readiness for the named softfork rule\"},\n                             }},\n                         {RPCResult::Type::NUM, \"vbrequired\", \"bit mask of versionbits the server requires set in submissions\"},\n                         {RPCResult::Type::STR, \"previousblockhash\", \"The hash of current highest block\"},\n-                        {RPCResult::Type::ARR, \"\", \"contents of non-coinbase transactions that should be included in the next block\",\n+                        {RPCResult::Type::ARR, \"transactions\", \"contents of non-coinbase transactions that should be included in the next block\",\n                             {\n                                 {RPCResult::Type::OBJ, \"\", \"\",\n                                     {\n@@ -541,15 +542,12 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\n                                         {RPCResult::Type::NUM, \"weight\", \"total transaction weight, as counted for purposes of block limits\"},\n                                     }},\n                             }},\n-                        {RPCResult::Type::OBJ, \"coinbaseaux\", \"data that should be included in the coinbase's scriptSig content\",\n+                        {RPCResult::Type::OBJ_DYN, \"coinbaseaux\", \"data that should be included in the coinbase's scriptSig content\",\n                         {\n-                            {RPCResult::Type::ELISION, \"\", \"\"},\n+                            {RPCResult::Type::STR_HEX, \"key\", \"values must be in the coinbase (keys may be ignored)\"},\n                         }},\n                         {RPCResult::Type::NUM, \"coinbasevalue\", \"maximum allowable input to coinbase transaction, including the generation award and transaction fees (in satoshis)\"},\n-                        {RPCResult::Type::OBJ, \"coinbasetxn\", \"information for coinbase transaction\",\n-                        {\n-                            {RPCResult::Type::ELISION, \"\", \"\"},\n-                        }},\n+                        {RPCResult::Type::STR, \"longpollid\", \"an id to include with a request to longpoll on an update to this template\"},\n                         {RPCResult::Type::STR, \"target\", \"The hash target\"},\n                         {RPCResult::Type::NUM_TIME, \"mintime\", \"The minimum timestamp appropriate for the next block time, expressed in \" + UNIX_EPOCH_TIME},\n                         {RPCResult::Type::ARR, \"mutable\", \"list of ways the block template may be changed\",\n@@ -563,6 +561,7 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\n                         {RPCResult::Type::NUM_TIME, \"curtime\", \"current timestamp in \" + UNIX_EPOCH_TIME},\n                         {RPCResult::Type::STR, \"bits\", \"compressed target of next block\"},\n                         {RPCResult::Type::NUM, \"height\", \"The height of the next block\"},\n+                        {RPCResult::Type::STR, \"default_witness_commitment\", /* optional */ true, \"a valid witness commitment for the unmodified block template\"}\n                     }},\n                 RPCExamples{\n                     HelpExampleCli(\"getblocktemplate\", \"'{\\\"rules\\\": [\\\"segwit\\\"]}'\")"
      }
    ]
  }
]