jonasschnelli,2016-04-13T14:30:47Z,Nice!\nConcept ACK.\n,https://github.com/bitcoin/bitcoin/pull/7871#issuecomment-209475161,209475161,
instagibbs,2016-04-13T20:13:07Z,What use cases are motivating this mode?\n,https://github.com/bitcoin/bitcoin/pull/7871#issuecomment-209626841,209626841,
laanwj,2016-04-15T06:28:17Z,"Concept ACK\n\n> What use cases are motivating this mode?\n\nThis is explained in the original issue, #7365: if you have another application that needs to consume the block data before it's gone.\n",https://github.com/bitcoin/bitcoin/pull/7871#issuecomment-210304363,210304363,
instagibbs,2016-04-15T11:12:59Z,"Should have read the issue, sorry. Concept ACK\n",https://github.com/bitcoin/bitcoin/pull/7871#issuecomment-210419602,210419602,
sipa,2016-06-02T14:30:26Z,Concept ACK. Needs rebase.\n,https://github.com/bitcoin/bitcoin/pull/7871#issuecomment-223309524,223309524,
mrbandrews,2016-06-08T18:26:04Z,Rebased. \n,https://github.com/bitcoin/bitcoin/pull/7871#issuecomment-224683681,224683681,
sipa,2016-08-25T11:58:50Z,Needs rebase.\n,https://github.com/bitcoin/bitcoin/pull/7871#issuecomment-242360917,242360917,
luke-jr,2016-10-04T22:18:46Z,"Oh, it might make sense to add ""prunemode"": ""auto""/""manual"" to `getblockchaininfo` also.\n",https://github.com/bitcoin/bitcoin/pull/7871#issuecomment-251530369,251530369,
petertodd,2016-10-13T23:28:31Z,Concept ACK\n\nMy OpenTimestamps Server could use this!\n,https://github.com/bitcoin/bitcoin/pull/7871#issuecomment-253669103,253669103,
mrbandrews,2016-10-26T18:33:54Z,"Rebased and feedback addressed.  I didn't make a couple of the suggested changes, though:\n1) ""int"" for block height is used elsewhere in the code (chain.h/chain.cpp); perhaps a future PR could change the type used in each place.\n2) Params() - this was just a code move, although I had left one unnecessary line of code in there, which I removed now.\n3) heights close to tip - it will prune up to t",https://github.com/bitcoin/bitcoin/pull/7871#issuecomment-256437892,256437892,
mrbandrews,2016-11-21T16:31:42Z,"Feedback addressed.  Re: the code in FindBlockPos (which reset fCheckForPruning only in auto-prune mode), yes that should only be auto-prune.  I designed manual pruning to be a one-time act of pruning to the specified height.  (In looking at this code, though, I noticed that nManualPruneHeight should probably be set=0 after we do the manual pruning, so I added that line of code, in a separate comm",https://github.com/bitcoin/bitcoin/pull/7871#issuecomment-261989821,261989821,
mrbandrews,2016-11-28T16:06:18Z,"There was a merge conflict (the declaration of FlushStateToDisk near the top of main.cpp conflicted with my adding an optional parameter), so I rebased and squashed everything.  This should work now.",https://github.com/bitcoin/bitcoin/pull/7871#issuecomment-263311999,263311999,
mrbandrews,2016-12-01T19:17:10Z,"So, originally I thought it was simpler to make manual pruning a separate mode from autoprune.  After sipa's question and giving this a little more thought, I agree that it should be the same.  So, now setting prune=1 (manual pruning) means autoprune with target=max. \n\nSorry for the late change in approach.  This makes the diff smaller, though. \n\nAlso, now I only expose in main.h that whic",https://github.com/bitcoin/bitcoin/pull/7871#issuecomment-264266003,264266003,
mrbandrews,2016-12-07T15:48:59Z,Rebased. ,https://github.com/bitcoin/bitcoin/pull/7871#issuecomment-265483410,265483410,
mrbandrews,2016-12-14T14:18:38Z,"Added a commit with edits to python test per ryanofsky review. \n",https://github.com/bitcoin/bitcoin/pull/7871#issuecomment-267044721,267044721,
neocogent,2016-12-29T09:19:20Z,"This is very useful for me. I'm doing some testing on this now. My application is a sql db on top of the blockchain that depends on processing incoming blocks. After processed into sql the block data is never used again so it's ideal if it can be pruned to save space, especially as I'm paying per GB on a cloud server.\n\nManual pruning allows me to start processing blocks while still syncing the",https://github.com/bitcoin/bitcoin/pull/7871#issuecomment-269602358,269602358,
ryanofsky,2017-01-03T15:28:56Z,"I rebased this, updated the man pages, and squashed the test commit.",https://github.com/bitcoin/bitcoin/pull/7871#issuecomment-270139936,270139936,
gmaxwell,2017-01-08T03:40:51Z,utACK. Great feature!,https://github.com/bitcoin/bitcoin/pull/7871#issuecomment-271127492,271127492,
gmaxwell,2017-01-08T03:52:25Z,"One question: I view this feature as the perfect compliment to importmulti, that lets you be sure you've imported all your keys before you prune.  But importmulti takes its scanning argument as a timestamp, while this takes it's argument as a height.  Should we also support a timestamp option here that uses the same criteria as import multi? \n\nEdit: I think I will fix this by adding a height b",https://github.com/bitcoin/bitcoin/pull/7871#issuecomment-271127917,271127917,
ryanofsky,2017-01-10T22:32:53Z,"Rebased for named arguments.\n\n@gmaxwell, I extended pruneblockchain in afffeea7d98ba358acd54a89bc0e7ae1c4d54023 to be able to take a timestamp instead of a block index. The code change is pretty small. The test change is bigger but straightforward. ",https://github.com/bitcoin/bitcoin/pull/7871#issuecomment-271719537,271719537,
laanwj,2017-01-11T13:16:20Z,"utACK afffeea\n",https://github.com/bitcoin/bitcoin/pull/7871#issuecomment-271865737,271865737,
rebroad,2016-08-24T10:16:02Z,I usually get told off for using global variables. Curious to know when they are permitted and when they are discouraged.\n,https://github.com/bitcoin/bitcoin/pull/7871#discussion_r76030706,76030706,src/main.cpp
luke-jr,2016-10-04T21:47:57Z,"Many places, you left (pruneMode) in a boolean context. I don't see a need to change to == NONE here.\n",https://github.com/bitcoin/bitcoin/pull/7871#discussion_r81861504,81861504,src/init.cpp
luke-jr,2016-10-04T21:48:29Z,A bit ugly to have the enum and variable differ only by case.\n,https://github.com/bitcoin/bitcoin/pull/7871#discussion_r81861586,81861586,src/main.cpp
luke-jr,2016-10-04T21:50:32Z,"This appears to be used exclusively for passing a value from a caller to a callee, so it shouldn't be a global variable.\n",https://github.com/bitcoin/bitcoin/pull/7871#discussion_r81861912,81861912,src/main.cpp
luke-jr,2016-10-04T21:59:41Z,"`int` is the wrong type here. It is only guaranteed to hold up to 32768, which isn't very useful for block heights.\n\nLock heights will break before 29 bits are exceeded, so I suggest using either `unsigned long` or `uint32_t`\n",https://github.com/bitcoin/bitcoin/pull/7871#discussion_r81863471,81863471,src/main.cpp
luke-jr,2016-10-04T22:08:35Z,We're trying to reduce calls to global Params() by passing things as arguments. This change has the opposite effect for no clear reason.\n,https://github.com/bitcoin/bitcoin/pull/7871#discussion_r81864786,81864786,src/main.cpp
luke-jr,2016-10-04T22:11:45Z,`RPC_INVALID_PARAMETER` seems more appropriate here.\n,https://github.com/bitcoin/bitcoin/pull/7871#discussion_r81865305,81865305,src/rpc/blockchain.cpp
luke-jr,2016-10-04T22:12:41Z,Should this also check if the requested height is too close to the tip? Or maybe just return the height it was able to successfully prune up to...\n,https://github.com/bitcoin/bitcoin/pull/7871#discussion_r81865459,81865459,src/rpc/blockchain.cpp
luke-jr,2016-10-04T22:14:16Z,`RPC_METHOD_NOT_FOUND` seems better for this (already used for wallet RPCs when the wallet is not enabled)\n,https://github.com/bitcoin/bitcoin/pull/7871#discussion_r81865686,81865686,src/rpc/blockchain.cpp
laanwj,2016-11-21T08:20:29Z,Nit: `Use RPC call pruneblockchain(height)` - otherwise the syntax can be easily confused with a command line option.,https://github.com/bitcoin/bitcoin/pull/7871#discussion_r88846018,88846018,src/init.cpp
laanwj,2016-11-21T08:21:25Z,"Let's use C++11 scoped enums in new code\n```\nenum struct PruneMode { NONE=0, AUTO, MANUAL };\n```\nThen refer to `PruneMode::NONE` etc.\n",https://github.com/bitcoin/bitcoin/pull/7871#discussion_r88846138,88846138,src/main.h
laanwj,2016-11-21T08:25:42Z,"Can we please store and compare the option value before multiplication? Doing a division here, though it achieves the correct effect, seems circuitous and unclear.",https://github.com/bitcoin/bitcoin/pull/7871#discussion_r88846599,88846599,src/init.cpp
laanwj,2016-11-21T08:27:06Z,"Are you sure this only needs to be done in auto-pruning mode?\n",https://github.com/bitcoin/bitcoin/pull/7871#discussion_r88846787,88846787,src/main.cpp
laanwj,2016-11-21T08:29:01Z,"As you already have to change every line on which the variable occurs anyhow, I'd prefer explicitly comparing the enumeration against a value instead of using it like a boolean: e.g. `pruneMode != PruneMode::NONE`. This makes it  clear to developers reading the code that this is an enumeration and not a boolean and can avoid them introducing silly bugs.",https://github.com/bitcoin/bitcoin/pull/7871#discussion_r88847011,88847011,src/wallet/rpcdump.cpp
laanwj,2016-11-21T08:29:45Z,I think it's fine.,https://github.com/bitcoin/bitcoin/pull/7871#discussion_r88847104,88847104,src/main.cpp
laanwj,2016-11-21T08:31:56Z,"Calling this function with pruneMode != PRUNE_MANUAL should be an assertion error, as it must be a bug in the code.",https://github.com/bitcoin/bitcoin/pull/7871#discussion_r88847378,88847378,src/main.cpp
laanwj,2016-11-21T08:36:19Z,"Aside: these functions are only used within `main.cpp`, why are we exporting them?\n(thinking about it, let's just keep it for now, it seems common in `main.cpp` to export everything whether necessary or not, and changing will probably interfere with attempts of splitting up main such as #9183)",https://github.com/bitcoin/bitcoin/pull/7871#discussion_r88847859,88847859,src/main.h
laanwj,2016-11-21T08:39:42Z,No need for a return if you have a throw,https://github.com/bitcoin/bitcoin/pull/7871#discussion_r88848260,88848260,src/rpc/blockchain.cpp
laanwj,2016-11-21T08:48:40Z,"Do we need any foot-shooting checks: e.g. that the last 144 blocks are being retained to be robust against reorgs?\n\nEdit: apparently the check for `MIN_BLOCKS_TO_KEEP` happens deeper in the pruning logic, and it continues in this case by pruning the allowed blocks only. Ok, makes sense I think, although a warning in the log may make it more transparent what happens.",https://github.com/bitcoin/bitcoin/pull/7871#discussion_r88849361,88849361,src/rpc/blockchain.cpp
sipa,2016-11-28T18:49:58Z,"`FindFilesToPruneAuto` is only called when `pruneMode == PruneMode::AUTO`, so why do we need this test? Maybe turn it into an assert at the beginning of the function.",https://github.com/bitcoin/bitcoin/pull/7871#discussion_r89851343,89851343,src/main.cpp
sipa,2016-11-28T18:50:37Z,"Also, `if (pruneMode)` is equivalent to `if (pruneMode != PruneMode::NONE)`, since PruneMode::NONE is explicitly defined as 0.\n\n(applies to many changed lines in this PR)",https://github.com/bitcoin/bitcoin/pull/7871#discussion_r89851464,89851464,src/main.cpp
sipa,2016-11-28T18:51:22Z,"There are many functions in main that are not exported (see the whole namespace block for the handling of NodeState, for example).",https://github.com/bitcoin/bitcoin/pull/7871#discussion_r89851624,89851624,src/main.h
sipa,2016-11-28T18:55:40Z,"Meta question: why do we need a tristate here? I think we could allow manual pruning even when in 'auto` mode. In that case, manual-only pruning could be requested by setting the limit very high.",https://github.com/bitcoin/bitcoin/pull/7871#discussion_r89852535,89852535,src/main.h
ryanofsky,2016-12-13T21:43:55Z,Do you actually need to override this method? Would it work to just change num_nodes from 3 to 5 in the constructor above? Maybe add a comment here if keeping this is necessary.,https://github.com/bitcoin/bitcoin/pull/7871#discussion_r92273296,92273296,qa/rpc-tests/pruning.py
ryanofsky,2016-12-13T21:59:31Z,"I think this would be clearer if the comment said specifically what was being tested and what the connection to #7494 is, e.g. ""Check that wallet loads loads successfully when restarting a pruned node after an IBD. This was reported to fail in #7494.""",https://github.com/bitcoin/bitcoin/pull/7871#discussion_r92276266,92276266,qa/rpc-tests/pruning.py
ryanofsky,2016-12-13T22:06:10Z,"Might be good to check for the specific error messages here and below, e.g. `assert_raises_message(JSONRPCException, ""Blockchain is too short for pruning."", self.nodes[3].pruneblockchain, 500)`",https://github.com/bitcoin/bitcoin/pull/7871#discussion_r92277626,92277626,qa/rpc-tests/pruning.py
ryanofsky,2016-12-13T22:07:12Z,Could add a python test for this condition.,https://github.com/bitcoin/bitcoin/pull/7871#discussion_r92277871,92277871,src/rpc/blockchain.cpp
jonasschnelli,2017-01-11T13:30:03Z,"one post merge nit:\nWe should probably report the pruned height in case the user given value was overrode. ",https://github.com/bitcoin/bitcoin/pull/7871#discussion_r95577623,95577623,src/rpc/blockchain.cpp
ryanofsky,2017-01-11T19:32:16Z,Done in https://github.com/bitcoin/bitcoin/pull/9518,https://github.com/bitcoin/bitcoin/pull/7871#discussion_r95653011,95653011,src/rpc/blockchain.cpp
