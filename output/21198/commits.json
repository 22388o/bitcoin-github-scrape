[
  {
    "sha": "5ed535a02f8f0a6f65bbe19f48a8c81f43298393",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZWQ1MzVhMDJmOGYwYTZmNjViYmUxOWY0OGE4YzgxZjQzMjk4Mzkz",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-02-16T15:55:03Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-04-01T10:35:27Z"
      },
      "message": "[net] Changes to RunInactivityChecks\n\n- rename to ShouldRunInactivityChecks (https://github.com/bitcoin/bitcoin/pull/20721#discussion_r576394790)\n- take optional time now (https://github.com/bitcoin/bitcoin/pull/20721#discussion_r575895661)\n- call from within InactivityChecks (https://github.com/bitcoin/bitcoin/pull/20721#discussion_r575894665)\n- update comment (https://github.com/bitcoin/bitcoin/pull/20721#discussion_r575894343)\n- change ordering of inequality (https://github.com/bitcoin/bitcoin/pull/20721#discussion_r574925129)",
      "tree": {
        "sha": "31e10f4a24bb2efbb1b94abba82bb43c9a37e5e8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/31e10f4a24bb2efbb1b94abba82bb43c9a37e5e8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5ed535a02f8f0a6f65bbe19f48a8c81f43298393",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ed535a02f8f0a6f65bbe19f48a8c81f43298393",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5ed535a02f8f0a6f65bbe19f48a8c81f43298393",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ed535a02f8f0a6f65bbe19f48a8c81f43298393/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2b2ab9ab7895cd6356e5dc4db17aa9ce475d495e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2b2ab9ab7895cd6356e5dc4db17aa9ce475d495e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2b2ab9ab7895cd6356e5dc4db17aa9ce475d495e"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 9,
      "deletions": 6
    },
    "files": [
      {
        "sha": "c43c53795e24a42d480987945ce0b3252b98dca8",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ed535a02f8f0a6f65bbe19f48a8c81f43298393/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ed535a02f8f0a6f65bbe19f48a8c81f43298393/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=5ed535a02f8f0a6f65bbe19f48a8c81f43298393",
        "patch": "@@ -1255,9 +1255,10 @@ void CConnman::NotifyNumConnectionsChanged()\n     }\n }\n \n-bool CConnman::RunInactivityChecks(const CNode& node) const\n+bool CConnman::ShouldRunInactivityChecks(const CNode& node, std::optional<int64_t> now_in) const\n {\n-    return GetSystemTimeInSeconds() > node.nTimeConnected + m_peer_connect_timeout;\n+    const int64_t now = now_in ? now_in.value() : GetSystemTimeInSeconds();\n+    return node.nTimeConnected + m_peer_connect_timeout < now;\n }\n \n bool CConnman::InactivityCheck(const CNode& node) const\n@@ -1266,6 +1267,8 @@ bool CConnman::InactivityCheck(const CNode& node) const\n     // use setmocktime in the tests).\n     int64_t now = GetSystemTimeInSeconds();\n \n+    if (!ShouldRunInactivityChecks(node, now)) return false;\n+\n     if (node.nLastRecv == 0 || node.nLastSend == 0) {\n         LogPrint(BCLog::NET, \"socket no message in first %i seconds, %d %d peer=%d\\n\", m_peer_connect_timeout, node.nLastRecv != 0, node.nLastSend != 0, node.GetId());\n         return true;\n@@ -1562,7 +1565,7 @@ void CConnman::SocketHandler()\n             if (bytes_sent) RecordBytesSent(bytes_sent);\n         }\n \n-        if (RunInactivityChecks(*pnode) && InactivityCheck(*pnode)) pnode->fDisconnect = true;\n+        if (InactivityCheck(*pnode)) pnode->fDisconnect = true;\n     }\n     {\n         LOCK(cs_vNodes);"
      },
      {
        "sha": "13f86b6a91878f2a5c6fe3a4a0ea4539dc116593",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ed535a02f8f0a6f65bbe19f48a8c81f43298393/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ed535a02f8f0a6f65bbe19f48a8c81f43298393/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=5ed535a02f8f0a6f65bbe19f48a8c81f43298393",
        "patch": "@@ -1018,8 +1018,8 @@ class CConnman\n \n     void SetAsmap(std::vector<bool> asmap) { addrman.m_asmap = std::move(asmap); }\n \n-    /** Return true if the peer has been connected for long enough to do inactivity checks. */\n-    bool RunInactivityChecks(const CNode& node) const;\n+    /** Return true if we should disconnect the peer for failing an inactivity check. */\n+    bool ShouldRunInactivityChecks(const CNode& node, std::optional<int64_t> now=std::nullopt) const;\n \n private:\n     struct ListenSocket {"
      },
      {
        "sha": "b042cf654968ea2f97ce1040207b37634a46f0a4",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ed535a02f8f0a6f65bbe19f48a8c81f43298393/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ed535a02f8f0a6f65bbe19f48a8c81f43298393/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=5ed535a02f8f0a6f65bbe19f48a8c81f43298393",
        "patch": "@@ -4108,7 +4108,7 @@ void PeerManagerImpl::CheckForStaleTipAndEvictPeers()\n \n void PeerManagerImpl::MaybeSendPing(CNode& node_to, Peer& peer, std::chrono::microseconds now)\n {\n-    if (m_connman.RunInactivityChecks(node_to) && peer.m_ping_nonce_sent &&\n+    if (m_connman.ShouldRunInactivityChecks(node_to) && peer.m_ping_nonce_sent &&\n         now > peer.m_ping_start.load() + std::chrono::seconds{TIMEOUT_INTERVAL}) {\n         LogPrint(BCLog::NET, \"ping timeout: %fs peer=%d\\n\", 0.000001 * count_microseconds(now - peer.m_ping_start.load()), peer.m_id);\n         node_to.fDisconnect = true;"
      }
    ]
  }
]