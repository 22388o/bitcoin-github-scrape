[
  {
    "sha": "b466cfecb6edcda71eaa6d1965f095fe14b8caa5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNDY2Y2ZlY2I2ZWRjZGE3MWVhYTZkMTk2NWYwOTVmZTE0YjhjYWE1",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@jtimon.cc",
        "date": "2015-01-18T16:09:59Z"
      },
      "committer": {
        "name": "jtimon",
        "email": "jtimon@jtimon.cc",
        "date": "2015-01-20T19:48:34Z"
      },
      "message": "Includes: MOVEONLY: Move CNodeStateStats from main.h to net.h",
      "tree": {
        "sha": "3b49b02ccf7c7ee5d31a5b42dcf8507da472cc57",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3b49b02ccf7c7ee5d31a5b42dcf8507da472cc57"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b466cfecb6edcda71eaa6d1965f095fe14b8caa5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b466cfecb6edcda71eaa6d1965f095fe14b8caa5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b466cfecb6edcda71eaa6d1965f095fe14b8caa5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b466cfecb6edcda71eaa6d1965f095fe14b8caa5/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "66b473457bc94adcd3d277462f9d619f5a198d96",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/66b473457bc94adcd3d277462f9d619f5a198d96",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/66b473457bc94adcd3d277462f9d619f5a198d96"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 7,
      "deletions": 13
    },
    "files": [
      {
        "sha": "4c362d275e4b700c1541424de120ee4ab2057525",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 0,
        "deletions": 10,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b466cfecb6edcda71eaa6d1965f095fe14b8caa5/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b466cfecb6edcda71eaa6d1965f095fe14b8caa5/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=b466cfecb6edcda71eaa6d1965f095fe14b8caa5",
        "patch": "@@ -45,8 +45,6 @@ class CScriptCheck;\n class CValidationInterface;\n class CValidationState;\n \n-struct CNodeStateStats;\n-\n /** Default for -blockmaxsize and -blockminsize, which control the range of sizes the mining code will create **/\n static const unsigned int DEFAULT_BLOCK_MAX_SIZE = 750000;\n static const unsigned int DEFAULT_BLOCK_MIN_SIZE = 0;\n@@ -207,14 +205,6 @@ void FlushStateToDisk();\n bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransaction &tx, bool fLimitFree,\n                         bool* pfMissingInputs, bool fRejectInsaneFee=false);\n \n-\n-struct CNodeStateStats {\n-    int nMisbehavior;\n-    int nSyncHeight;\n-    int nCommonHeight;\n-    std::vector<int> vHeightInFlight;\n-};\n-\n struct CDiskTxPos : public CDiskBlockPos\n {\n     unsigned int nTxOffset; // after header"
      },
      {
        "sha": "e01120521c869861e34ab1e72d486376b939fab9",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b466cfecb6edcda71eaa6d1965f095fe14b8caa5/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b466cfecb6edcda71eaa6d1965f095fe14b8caa5/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=b466cfecb6edcda71eaa6d1965f095fe14b8caa5",
        "patch": "@@ -167,7 +167,12 @@ class CNodeStats\n     std::string addrLocal;\n };\n \n-\n+struct CNodeStateStats {\n+    int nMisbehavior;\n+    int nSyncHeight;\n+    int nCommonHeight;\n+    std::vector<int> vHeightInFlight;\n+};\n \n \n class CNetMessage {"
      },
      {
        "sha": "80047f63a3ef1d588d0ed05bbf124eaa3f566931",
        "filename": "src/qt/peertablemodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b466cfecb6edcda71eaa6d1965f095fe14b8caa5/src/qt/peertablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b466cfecb6edcda71eaa6d1965f095fe14b8caa5/src/qt/peertablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/peertablemodel.cpp?ref=b466cfecb6edcda71eaa6d1965f095fe14b8caa5",
        "patch": "@@ -8,7 +8,7 @@\n #include \"guiconstants.h\"\n #include \"guiutil.h\"\n \n-#include \"net.h\"\n+#include \"main.h\"\n #include \"sync.h\"\n \n #include <QDebug>"
      },
      {
        "sha": "fee9c3018a8f8aa5e4114d442c34a7450e6c4526",
        "filename": "src/qt/peertablemodel.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b466cfecb6edcda71eaa6d1965f095fe14b8caa5/src/qt/peertablemodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b466cfecb6edcda71eaa6d1965f095fe14b8caa5/src/qt/peertablemodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/peertablemodel.h?ref=b466cfecb6edcda71eaa6d1965f095fe14b8caa5",
        "patch": "@@ -5,7 +5,6 @@\n #ifndef BITCOIN_QT_PEERTABLEMODEL_H\n #define BITCOIN_QT_PEERTABLEMODEL_H\n \n-#include \"main.h\"\n #include \"net.h\"\n \n #include <QAbstractTableModel>"
      }
    ]
  },
  {
    "sha": "0fb34e2c94e24826d81bc8cfa4a69a51cfd7fde8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZmIzNGUyYzk0ZTI0ODI2ZDgxYmM4Y2ZhNGE2OWE1MWNmZDdmZGU4",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@jtimon.cc",
        "date": "2015-01-18T18:20:36Z"
      },
      "committer": {
        "name": "jtimon",
        "email": "jtimon@jtimon.cc",
        "date": "2015-01-20T19:48:36Z"
      },
      "message": "Includes: MOVEONLY: Move some method definitions from wallet.h to wallet.cpp\n\nMethods moved:\n\nCWallet::IsMine()\nCWallet::GetDebit()\nCWallet::GetCredit()\nCWallet::GetChange()\nCWalletTx::IsTrusted()",
      "tree": {
        "sha": "7f74a1c88f929447b03eda89171f17c6aa19da45",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7f74a1c88f929447b03eda89171f17c6aa19da45"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0fb34e2c94e24826d81bc8cfa4a69a51cfd7fde8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0fb34e2c94e24826d81bc8cfa4a69a51cfd7fde8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0fb34e2c94e24826d81bc8cfa4a69a51cfd7fde8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0fb34e2c94e24826d81bc8cfa4a69a51cfd7fde8/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b466cfecb6edcda71eaa6d1965f095fe14b8caa5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b466cfecb6edcda71eaa6d1965f095fe14b8caa5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b466cfecb6edcda71eaa6d1965f095fe14b8caa5"
      }
    ],
    "stats": {
      "total": 141,
      "additions": 75,
      "deletions": 66
    },
    "files": [
      {
        "sha": "f54d1a828ce48342ba7d5e0f5f8e8946951d07f5",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 70,
        "deletions": 0,
        "changes": 70,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fb34e2c94e24826d81bc8cfa4a69a51cfd7fde8/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fb34e2c94e24826d81bc8cfa4a69a51cfd7fde8/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=0fb34e2c94e24826d81bc8cfa4a69a51cfd7fde8",
        "patch": "@@ -780,6 +780,50 @@ bool CWallet::IsChange(const CTxOut& txout) const\n     return false;\n }\n \n+bool CWallet::IsMine(const CTransaction& tx) const\n+{\n+    BOOST_FOREACH(const CTxOut& txout, tx.vout)\n+        if (IsMine(txout))\n+            return true;\n+    return false;\n+}\n+\n+CAmount CWallet::GetDebit(const CTransaction& tx, const isminefilter& filter) const\n+{\n+    CAmount nDebit = 0;\n+    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+    {\n+        nDebit += GetDebit(txin, filter);\n+        if (!MoneyRange(nDebit))\n+            throw std::runtime_error(\"CWallet::GetDebit() : value out of range\");\n+    }\n+    return nDebit;\n+}\n+\n+CAmount CWallet::GetCredit(const CTransaction& tx, const isminefilter& filter) const\n+{\n+    CAmount nCredit = 0;\n+    BOOST_FOREACH(const CTxOut& txout, tx.vout)\n+    {\n+        nCredit += GetCredit(txout, filter);\n+        if (!MoneyRange(nCredit))\n+            throw std::runtime_error(\"CWallet::GetCredit() : value out of range\");\n+    }\n+    return nCredit;\n+}\n+\n+CAmount CWallet::GetChange(const CTransaction& tx) const\n+{\n+    CAmount nChange = 0;\n+    BOOST_FOREACH(const CTxOut& txout, tx.vout)\n+    {\n+        nChange += GetChange(txout);\n+        if (!MoneyRange(nChange))\n+            throw std::runtime_error(\"CWallet::GetChange() : value out of range\");\n+    }\n+    return nChange;\n+}\n+\n int64_t CWalletTx::GetTxTime() const\n {\n     int64_t n = nTimeSmart;\n@@ -915,6 +959,32 @@ void CWalletTx::GetAccountAmounts(const string& strAccount, CAmount& nReceived,\n     }\n }\n \n+bool CWalletTx::IsTrusted() const\n+{\n+    // Quick answer in most cases\n+    if (!IsFinalTx(*this))\n+        return false;\n+    int nDepth = GetDepthInMainChain();\n+    if (nDepth >= 1)\n+        return true;\n+    if (nDepth < 0)\n+        return false;\n+    if (!bSpendZeroConfChange || !IsFromMe(ISMINE_ALL)) // using wtx's cached debit\n+        return false;\n+\n+    // Trusted if all inputs are from us and are in the mempool:\n+    BOOST_FOREACH(const CTxIn& txin, vin)\n+    {\n+        // Transactions not sent by us: not trusted\n+        const CWalletTx* parent = pwallet->GetWalletTx(txin.prevout.hash);\n+        if (parent == NULL)\n+            return false;\n+        const CTxOut& parentOut = parent->vout[txin.prevout.n];\n+        if (pwallet->IsMine(parentOut) != ISMINE_SPENDABLE)\n+            return false;\n+    }\n+    return true;\n+}\n \n bool CWalletTx::WriteToDisk()\n {"
      },
      {
        "sha": "adc873e16f651e917321e75e5a0e42f7fbdf1897",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 5,
        "deletions": 66,
        "changes": 71,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fb34e2c94e24826d81bc8cfa4a69a51cfd7fde8/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fb34e2c94e24826d81bc8cfa4a69a51cfd7fde8/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=0fb34e2c94e24826d81bc8cfa4a69a51cfd7fde8",
        "patch": "@@ -330,51 +330,15 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n             throw std::runtime_error(\"CWallet::GetChange() : value out of range\");\n         return (IsChange(txout) ? txout.nValue : 0);\n     }\n-    bool IsMine(const CTransaction& tx) const\n-    {\n-        BOOST_FOREACH(const CTxOut& txout, tx.vout)\n-            if (IsMine(txout))\n-                return true;\n-        return false;\n-    }\n+    bool IsMine(const CTransaction& tx) const;\n     /** should probably be renamed to IsRelevantToMe */\n     bool IsFromMe(const CTransaction& tx) const\n     {\n         return (GetDebit(tx, ISMINE_ALL) > 0);\n     }\n-    CAmount GetDebit(const CTransaction& tx, const isminefilter& filter) const\n-    {\n-        CAmount nDebit = 0;\n-        BOOST_FOREACH(const CTxIn& txin, tx.vin)\n-        {\n-            nDebit += GetDebit(txin, filter);\n-            if (!MoneyRange(nDebit))\n-                throw std::runtime_error(\"CWallet::GetDebit() : value out of range\");\n-        }\n-        return nDebit;\n-    }\n-    CAmount GetCredit(const CTransaction& tx, const isminefilter& filter) const\n-    {\n-        CAmount nCredit = 0;\n-        BOOST_FOREACH(const CTxOut& txout, tx.vout)\n-        {\n-            nCredit += GetCredit(txout, filter);\n-            if (!MoneyRange(nCredit))\n-                throw std::runtime_error(\"CWallet::GetCredit() : value out of range\");\n-        }\n-        return nCredit;\n-    }\n-    CAmount GetChange(const CTransaction& tx) const\n-    {\n-        CAmount nChange = 0;\n-        BOOST_FOREACH(const CTxOut& txout, tx.vout)\n-        {\n-            nChange += GetChange(txout);\n-            if (!MoneyRange(nChange))\n-                throw std::runtime_error(\"CWallet::GetChange() : value out of range\");\n-        }\n-        return nChange;\n-    }\n+    CAmount GetDebit(const CTransaction& tx, const isminefilter& filter) const;\n+    CAmount GetCredit(const CTransaction& tx, const isminefilter& filter) const;\n+    CAmount GetChange(const CTransaction& tx) const;\n     void SetBestChain(const CBlockLocator& loc);\n \n     DBErrors LoadWallet(bool& fFirstRunRet);\n@@ -876,32 +840,7 @@ class CWalletTx : public CMerkleTx\n         return (GetDebit(filter) > 0);\n     }\n \n-    bool IsTrusted() const\n-    {\n-        // Quick answer in most cases\n-        if (!IsFinalTx(*this))\n-            return false;\n-        int nDepth = GetDepthInMainChain();\n-        if (nDepth >= 1)\n-            return true;\n-        if (nDepth < 0)\n-            return false;\n-        if (!bSpendZeroConfChange || !IsFromMe(ISMINE_ALL)) // using wtx's cached debit\n-            return false;\n-\n-        // Trusted if all inputs are from us and are in the mempool:\n-        BOOST_FOREACH(const CTxIn& txin, vin)\n-        {\n-            // Transactions not sent by us: not trusted\n-            const CWalletTx* parent = pwallet->GetWalletTx(txin.prevout.hash);\n-            if (parent == NULL)\n-                return false;\n-            const CTxOut& parentOut = parent->vout[txin.prevout.n];\n-            if (pwallet->IsMine(parentOut) != ISMINE_SPENDABLE)\n-                return false;\n-        }\n-        return true;\n-    }\n+    bool IsTrusted() const;\n \n     bool WriteToDisk();\n "
      }
    ]
  },
  {
    "sha": "3ef9115fc74629c5087b60f6ab0b97e9b6d98bec",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZWY5MTE1ZmM3NDYyOWM1MDg3YjYwZjZhYjBiOTdlOWI2ZDk4YmVj",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@jtimon.cc",
        "date": "2015-01-18T15:29:26Z"
      },
      "committer": {
        "name": "jtimon",
        "email": "jtimon@jtimon.cc",
        "date": "2015-01-20T19:49:28Z"
      },
      "message": "Includes: Refactor: Move CValidationInterface and CMainSignals out of main",
      "tree": {
        "sha": "8f9d9c5e8fa72f4631e1f83f13978053fbbe0ea2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8f9d9c5e8fa72f4631e1f83f13978053fbbe0ea2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3ef9115fc74629c5087b60f6ab0b97e9b6d98bec",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ef9115fc74629c5087b60f6ab0b97e9b6d98bec",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3ef9115fc74629c5087b60f6ab0b97e9b6d98bec",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ef9115fc74629c5087b60f6ab0b97e9b6d98bec/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0fb34e2c94e24826d81bc8cfa4a69a51cfd7fde8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0fb34e2c94e24826d81bc8cfa4a69a51cfd7fde8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0fb34e2c94e24826d81bc8cfa4a69a51cfd7fde8"
      }
    ],
    "stats": {
      "total": 221,
      "additions": 125,
      "deletions": 96
    },
    "files": [
      {
        "sha": "da1f62b3ee135b3ddc8af6812d5302592456b2b7",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ef9115fc74629c5087b60f6ab0b97e9b6d98bec/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ef9115fc74629c5087b60f6ab0b97e9b6d98bec/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=3ef9115fc74629c5087b60f6ab0b97e9b6d98bec",
        "patch": "@@ -136,6 +136,7 @@ BITCOIN_CORE_H = \\\n   utilmoneystr.h \\\n   utilstrencodings.h \\\n   utiltime.h \\\n+  validationinterface.h \\\n   version.h \\\n   walletdb.h \\\n   wallet.h \\\n@@ -186,6 +187,7 @@ libbitcoin_server_a_SOURCES = \\\n   timedata.cpp \\\n   txdb.cpp \\\n   txmempool.cpp \\\n+  validationinterface.cpp \\\n   $(JSON_H) \\\n   $(BITCOIN_CORE_H)\n "
      },
      {
        "sha": "c74e9f71846a96696adca6c0321981c9ff218d3f",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ef9115fc74629c5087b60f6ab0b97e9b6d98bec/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ef9115fc74629c5087b60f6ab0b97e9b6d98bec/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=3ef9115fc74629c5087b60f6ab0b97e9b6d98bec",
        "patch": "@@ -23,6 +23,7 @@\n #include \"ui_interface.h\"\n #include \"util.h\"\n #include \"utilmoneystr.h\"\n+#include \"validationinterface.h\"\n #ifdef ENABLE_WALLET\n #include \"db.h\"\n #include \"wallet.h\""
      },
      {
        "sha": "d4a248872a31dbf83135e0477321ea125999dd9e",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 69,
        "changes": 77,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ef9115fc74629c5087b60f6ab0b97e9b6d98bec/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ef9115fc74629c5087b60f6ab0b97e9b6d98bec/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=3ef9115fc74629c5087b60f6ab0b97e9b6d98bec",
        "patch": "@@ -5,9 +5,9 @@\n \n #include \"main.h\"\n \n-#include \"arith_uint256.h\"\n #include \"addrman.h\"\n #include \"alert.h\"\n+#include \"arith_uint256.h\"\n #include \"chainparams.h\"\n #include \"checkpoints.h\"\n #include \"checkqueue.h\"\n@@ -21,6 +21,7 @@\n #include \"undo.h\"\n #include \"util.h\"\n #include \"utilmoneystr.h\"\n+#include \"validationinterface.h\"\n \n #include <sstream>\n \n@@ -157,68 +158,6 @@ namespace {\n     set<int> setDirtyFileInfo;\n } // anon namespace\n \n-//////////////////////////////////////////////////////////////////////////////\n-//\n-// dispatching functions\n-//\n-\n-// These functions dispatch to one or all registered wallets\n-\n-namespace {\n-\n-struct CMainSignals {\n-    /** Notifies listeners of updated transaction data (transaction, and optionally the block it is found in. */\n-    boost::signals2::signal<void (const CTransaction &, const CBlock *)> SyncTransaction;\n-    /** Notifies listeners of an erased transaction (currently disabled, requires transaction replacement). */\n-    boost::signals2::signal<void (const uint256 &)> EraseTransaction;\n-    /** Notifies listeners of an updated transaction without new data (for now: a coinbase potentially becoming visible). */\n-    boost::signals2::signal<void (const uint256 &)> UpdatedTransaction;\n-    /** Notifies listeners of a new active block chain. */\n-    boost::signals2::signal<void (const CBlockLocator &)> SetBestChain;\n-    /** Notifies listeners about an inventory item being seen on the network. */\n-    boost::signals2::signal<void (const uint256 &)> Inventory;\n-    /** Tells listeners to broadcast their data. */\n-    boost::signals2::signal<void ()> Broadcast;\n-    /** Notifies listeners of a block validation result */\n-    boost::signals2::signal<void (const CBlock&, const CValidationState&)> BlockChecked;\n-} g_signals;\n-\n-} // anon namespace\n-\n-void RegisterValidationInterface(CValidationInterface* pwalletIn) {\n-    g_signals.SyncTransaction.connect(boost::bind(&CValidationInterface::SyncTransaction, pwalletIn, _1, _2));\n-    g_signals.EraseTransaction.connect(boost::bind(&CValidationInterface::EraseFromWallet, pwalletIn, _1));\n-    g_signals.UpdatedTransaction.connect(boost::bind(&CValidationInterface::UpdatedTransaction, pwalletIn, _1));\n-    g_signals.SetBestChain.connect(boost::bind(&CValidationInterface::SetBestChain, pwalletIn, _1));\n-    g_signals.Inventory.connect(boost::bind(&CValidationInterface::Inventory, pwalletIn, _1));\n-    g_signals.Broadcast.connect(boost::bind(&CValidationInterface::ResendWalletTransactions, pwalletIn));\n-    g_signals.BlockChecked.connect(boost::bind(&CValidationInterface::BlockChecked, pwalletIn, _1, _2));\n-}\n-\n-void UnregisterValidationInterface(CValidationInterface* pwalletIn) {\n-    g_signals.BlockChecked.disconnect(boost::bind(&CValidationInterface::BlockChecked, pwalletIn, _1, _2));\n-    g_signals.Broadcast.disconnect(boost::bind(&CValidationInterface::ResendWalletTransactions, pwalletIn));\n-    g_signals.Inventory.disconnect(boost::bind(&CValidationInterface::Inventory, pwalletIn, _1));\n-    g_signals.SetBestChain.disconnect(boost::bind(&CValidationInterface::SetBestChain, pwalletIn, _1));\n-    g_signals.UpdatedTransaction.disconnect(boost::bind(&CValidationInterface::UpdatedTransaction, pwalletIn, _1));\n-    g_signals.EraseTransaction.disconnect(boost::bind(&CValidationInterface::EraseFromWallet, pwalletIn, _1));\n-    g_signals.SyncTransaction.disconnect(boost::bind(&CValidationInterface::SyncTransaction, pwalletIn, _1, _2));\n-}\n-\n-void UnregisterAllValidationInterfaces() {\n-    g_signals.BlockChecked.disconnect_all_slots();\n-    g_signals.Broadcast.disconnect_all_slots();\n-    g_signals.Inventory.disconnect_all_slots();\n-    g_signals.SetBestChain.disconnect_all_slots();\n-    g_signals.UpdatedTransaction.disconnect_all_slots();\n-    g_signals.EraseTransaction.disconnect_all_slots();\n-    g_signals.SyncTransaction.disconnect_all_slots();\n-}\n-\n-void SyncWithWallets(const CTransaction &tx, const CBlock *pblock) {\n-    g_signals.SyncTransaction(tx, pblock);\n-}\n-\n //////////////////////////////////////////////////////////////////////////////\n //\n // Registration of network node signals.\n@@ -1868,7 +1807,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n \n     // Watch for changes to the previous coinbase transaction.\n     static uint256 hashPrevBestCoinBase;\n-    g_signals.UpdatedTransaction(hashPrevBestCoinBase);\n+    GetMainSignals().UpdatedTransaction(hashPrevBestCoinBase);\n     hashPrevBestCoinBase = block.vtx[0].GetHash();\n \n     int64_t nTime4 = GetTimeMicros(); nTimeCallbacks += nTime4 - nTime3;\n@@ -1927,7 +1866,7 @@ bool static FlushStateToDisk(CValidationState &state, FlushStateMode mode) {\n             return state.Abort(\"Failed to write to coin database\");\n         // Update best block in wallet (so we can detect restored wallets).\n         if (mode != FLUSH_STATE_IF_NEEDED) {\n-            g_signals.SetBestChain(chainActive.GetLocator());\n+            GetMainSignals().SetBestChain(chainActive.GetLocator());\n         }\n         nLastWrite = GetTimeMicros();\n     }\n@@ -2051,7 +1990,7 @@ bool static ConnectTip(CValidationState &state, CBlockIndex *pindexNew, CBlock *\n         CCoinsViewCache view(pcoinsTip);\n         CInv inv(MSG_BLOCK, pindexNew->GetBlockHash());\n         bool rv = ConnectBlock(*pblock, state, pindexNew, view);\n-        g_signals.BlockChecked(*pblock, state);\n+        GetMainSignals().BlockChecked(*pblock, state);\n         if (!rv) {\n             if (state.IsInvalid())\n                 InvalidBlockFound(pindexNew, state);\n@@ -3414,7 +3353,7 @@ void static ProcessGetData(CNode* pfrom)\n             }\n \n             // Track requests for our stuff.\n-            g_signals.Inventory(inv.hash);\n+            GetMainSignals().Inventory(inv.hash);\n \n             if (inv.type == MSG_BLOCK || inv.type == MSG_FILTERED_BLOCK)\n                 break;\n@@ -3702,7 +3641,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             }\n \n             // Track requests for our stuff\n-            g_signals.Inventory(inv.hash);\n+            GetMainSignals().Inventory(inv.hash);\n \n             if (pfrom->nSendSize > (SendBufferSize() * 2)) {\n                 Misbehaving(pfrom->GetId(), 50);\n@@ -4474,7 +4413,7 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n         // transactions become unconfirmed and spams other nodes.\n         if (!fReindex && !fImporting && !IsInitialBlockDownload())\n         {\n-            g_signals.Broadcast();\n+            GetMainSignals().Broadcast();\n         }\n \n         //"
      },
      {
        "sha": "5e68796c9b7c46ea3db0687cb32240c89fd52701",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 25,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ef9115fc74629c5087b60f6ab0b97e9b6d98bec/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ef9115fc74629c5087b60f6ab0b97e9b6d98bec/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=3ef9115fc74629c5087b60f6ab0b97e9b6d98bec",
        "patch": "@@ -131,15 +131,6 @@ extern CBlockIndex *pindexBestHeader;\n /** Minimum disk space required - used in CheckDiskSpace() */\n static const uint64_t nMinDiskSpace = 52428800;\n \n-/** Register a wallet to receive updates from core */\n-void RegisterValidationInterface(CValidationInterface* pwalletIn);\n-/** Unregister a wallet from core */\n-void UnregisterValidationInterface(CValidationInterface* pwalletIn);\n-/** Unregister all wallets from core */\n-void UnregisterAllValidationInterfaces();\n-/** Push an updated transaction to all registered wallets */\n-void SyncWithWallets(const CTransaction& tx, const CBlock* pblock = NULL);\n-\n /** Register with a network node to receive its signals */\n void RegisterNodeSignals(CNodeSignals& nodeSignals);\n /** Unregister a network node */\n@@ -150,7 +141,7 @@ void UnregisterNodeSignals(CNodeSignals& nodeSignals);\n  * block is made active. Note that it does not, however, guarantee that the\n  * specific block passed to it has been checked for validity!\n  * \n- * @param[out]  state   This may be set to an Error state if any error occurred processing it, including during validation/connection/etc of otherwise unrelated blocks during reorganisation; or it may be set to an Invalid state if pblock is itself invalid (but this is not guaranteed even when the block is checked). If you want to *possibly* get feedback on whether pblock is valid, you must also install a CValidationInterface - this will have its BlockChecked method called whenever *any* block completes validation.\n+ * @param[out]  state   This may be set to an Error state if any error occurred processing it, including during validation/connection/etc of otherwise unrelated blocks during reorganisation; or it may be set to an Invalid state if pblock is itself invalid (but this is not guaranteed even when the block is checked). If you want to *possibly* get feedback on whether pblock is valid, you must also install a CValidationInterface (see validationinterface.h) - this will have its BlockChecked method called whenever *any* block completes validation.\n  * @param[in]   pfrom   The node which we are receiving the block from; it is added to mapBlockSource and may be penalised if the block is invalid.\n  * @param[in]   pblock  The block we want to process.\n  * @param[out]  dbp     If pblock is stored to disk (or already there), this will be set to its location.\n@@ -502,19 +493,4 @@ extern CCoinsViewCache *pcoinsTip;\n /** Global variable that points to the active block tree (protected by cs_main) */\n extern CBlockTreeDB *pblocktree;\n \n-\n-class CValidationInterface {\n-protected:\n-    virtual void SyncTransaction(const CTransaction &tx, const CBlock *pblock) {};\n-    virtual void EraseFromWallet(const uint256 &hash) {};\n-    virtual void SetBestChain(const CBlockLocator &locator) {};\n-    virtual void UpdatedTransaction(const uint256 &hash) {};\n-    virtual void Inventory(const uint256 &hash) {};\n-    virtual void ResendWalletTransactions() {};\n-    virtual void BlockChecked(const CBlock&, const CValidationState&) {};\n-    friend void ::RegisterValidationInterface(CValidationInterface*);\n-    friend void ::UnregisterValidationInterface(CValidationInterface*);\n-    friend void ::UnregisterAllValidationInterfaces();\n-};\n-\n #endif // BITCOIN_MAIN_H"
      },
      {
        "sha": "962202ce15c64d83e137198a6527e4198d284d2c",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ef9115fc74629c5087b60f6ab0b97e9b6d98bec/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ef9115fc74629c5087b60f6ab0b97e9b6d98bec/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=3ef9115fc74629c5087b60f6ab0b97e9b6d98bec",
        "patch": "@@ -13,6 +13,7 @@\n #include \"pow.h\"\n #include \"rpcserver.h\"\n #include \"util.h\"\n+#include \"validationinterface.h\"\n #ifdef ENABLE_WALLET\n #include \"db.h\"\n #include \"wallet.h\""
      },
      {
        "sha": "ae4cd3c592a87a864ac59a9986ba3d1fcb54f2a6",
        "filename": "src/validationinterface.cpp",
        "status": "added",
        "additions": 47,
        "deletions": 0,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ef9115fc74629c5087b60f6ab0b97e9b6d98bec/src/validationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ef9115fc74629c5087b60f6ab0b97e9b6d98bec/src/validationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.cpp?ref=3ef9115fc74629c5087b60f6ab0b97e9b6d98bec",
        "patch": "@@ -0,0 +1,47 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"validationinterface.h\"\n+\n+static CMainSignals g_signals;\n+\n+CMainSignals& GetMainSignals()\n+{\n+    return g_signals;\n+}\n+\n+void RegisterValidationInterface(CValidationInterface* pwalletIn) {\n+    g_signals.SyncTransaction.connect(boost::bind(&CValidationInterface::SyncTransaction, pwalletIn, _1, _2));\n+    g_signals.EraseTransaction.connect(boost::bind(&CValidationInterface::EraseFromWallet, pwalletIn, _1));\n+    g_signals.UpdatedTransaction.connect(boost::bind(&CValidationInterface::UpdatedTransaction, pwalletIn, _1));\n+    g_signals.SetBestChain.connect(boost::bind(&CValidationInterface::SetBestChain, pwalletIn, _1));\n+    g_signals.Inventory.connect(boost::bind(&CValidationInterface::Inventory, pwalletIn, _1));\n+    g_signals.Broadcast.connect(boost::bind(&CValidationInterface::ResendWalletTransactions, pwalletIn));\n+    g_signals.BlockChecked.connect(boost::bind(&CValidationInterface::BlockChecked, pwalletIn, _1, _2));\n+}\n+\n+void UnregisterValidationInterface(CValidationInterface* pwalletIn) {\n+    g_signals.BlockChecked.disconnect(boost::bind(&CValidationInterface::BlockChecked, pwalletIn, _1, _2));\n+    g_signals.Broadcast.disconnect(boost::bind(&CValidationInterface::ResendWalletTransactions, pwalletIn));\n+    g_signals.Inventory.disconnect(boost::bind(&CValidationInterface::Inventory, pwalletIn, _1));\n+    g_signals.SetBestChain.disconnect(boost::bind(&CValidationInterface::SetBestChain, pwalletIn, _1));\n+    g_signals.UpdatedTransaction.disconnect(boost::bind(&CValidationInterface::UpdatedTransaction, pwalletIn, _1));\n+    g_signals.EraseTransaction.disconnect(boost::bind(&CValidationInterface::EraseFromWallet, pwalletIn, _1));\n+    g_signals.SyncTransaction.disconnect(boost::bind(&CValidationInterface::SyncTransaction, pwalletIn, _1, _2));\n+}\n+\n+void UnregisterAllValidationInterfaces() {\n+    g_signals.BlockChecked.disconnect_all_slots();\n+    g_signals.Broadcast.disconnect_all_slots();\n+    g_signals.Inventory.disconnect_all_slots();\n+    g_signals.SetBestChain.disconnect_all_slots();\n+    g_signals.UpdatedTransaction.disconnect_all_slots();\n+    g_signals.EraseTransaction.disconnect_all_slots();\n+    g_signals.SyncTransaction.disconnect_all_slots();\n+}\n+\n+void SyncWithWallets(const CTransaction &tx, const CBlock *pblock) {\n+    g_signals.SyncTransaction(tx, pblock);\n+}"
      },
      {
        "sha": "b21b6e578259c38f3b0cb5da88b7a0a0dff949ba",
        "filename": "src/validationinterface.h",
        "status": "added",
        "additions": 62,
        "deletions": 0,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ef9115fc74629c5087b60f6ab0b97e9b6d98bec/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ef9115fc74629c5087b60f6ab0b97e9b6d98bec/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=3ef9115fc74629c5087b60f6ab0b97e9b6d98bec",
        "patch": "@@ -0,0 +1,62 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_VALIDATIONINTERFACE_H\n+#define BITCOIN_VALIDATIONINTERFACE_H\n+\n+#include <boost/signals2/signal.hpp>\n+\n+class CBlock;\n+class CBlockLocator;\n+class CTransaction;\n+class CValidationInterface;\n+class CValidationState;\n+class uint256;\n+\n+// These functions dispatch to one or all registered wallets\n+\n+/** Register a wallet to receive updates from core */\n+void RegisterValidationInterface(CValidationInterface* pwalletIn);\n+/** Unregister a wallet from core */\n+void UnregisterValidationInterface(CValidationInterface* pwalletIn);\n+/** Unregister all wallets from core */\n+void UnregisterAllValidationInterfaces();\n+/** Push an updated transaction to all registered wallets */\n+void SyncWithWallets(const CTransaction& tx, const CBlock* pblock = NULL);\n+\n+class CValidationInterface {\n+protected:\n+    virtual void SyncTransaction(const CTransaction &tx, const CBlock *pblock) {};\n+    virtual void EraseFromWallet(const uint256 &hash) {};\n+    virtual void SetBestChain(const CBlockLocator &locator) {};\n+    virtual void UpdatedTransaction(const uint256 &hash) {};\n+    virtual void Inventory(const uint256 &hash) {};\n+    virtual void ResendWalletTransactions() {};\n+    virtual void BlockChecked(const CBlock&, const CValidationState&) {};\n+    friend void ::RegisterValidationInterface(CValidationInterface*);\n+    friend void ::UnregisterValidationInterface(CValidationInterface*);\n+    friend void ::UnregisterAllValidationInterfaces();\n+};\n+\n+struct CMainSignals {\n+    /** Notifies listeners of updated transaction data (transaction, and optionally the block it is found in. */\n+    boost::signals2::signal<void (const CTransaction &, const CBlock *)> SyncTransaction;\n+    /** Notifies listeners of an erased transaction (currently disabled, requires transaction replacement). */\n+    boost::signals2::signal<void (const uint256 &)> EraseTransaction;\n+    /** Notifies listeners of an updated transaction without new data (for now: a coinbase potentially becoming visible). */\n+    boost::signals2::signal<void (const uint256 &)> UpdatedTransaction;\n+    /** Notifies listeners of a new active block chain. */\n+    boost::signals2::signal<void (const CBlockLocator &)> SetBestChain;\n+    /** Notifies listeners about an inventory item being seen on the network. */\n+    boost::signals2::signal<void (const uint256 &)> Inventory;\n+    /** Tells listeners to broadcast their data. */\n+    boost::signals2::signal<void ()> Broadcast;\n+    /** Notifies listeners of a block validation result */\n+    boost::signals2::signal<void (const CBlock&, const CValidationState&)> BlockChecked;\n+};\n+\n+CMainSignals& GetMainSignals();\n+\n+#endif // BITCOIN_VALIDATIONINTERFACE_H"
      },
      {
        "sha": "0617359081f76517377b774976747b1d8ea4a6c2",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ef9115fc74629c5087b60f6ab0b97e9b6d98bec/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ef9115fc74629c5087b60f6ab0b97e9b6d98bec/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=3ef9115fc74629c5087b60f6ab0b97e9b6d98bec",
        "patch": "@@ -7,13 +7,14 @@\n #define BITCOIN_WALLET_H\n \n #include \"amount.h\"\n-#include \"primitives/block.h\"\n-#include \"primitives/transaction.h\"\n #include \"crypter.h\"\n #include \"key.h\"\n #include \"keystore.h\"\n #include \"main.h\"\n+#include \"primitives/block.h\"\n+#include \"primitives/transaction.h\"\n #include \"ui_interface.h\"\n+#include \"validationinterface.h\"\n #include \"wallet_ismine.h\"\n #include \"walletdb.h\"\n "
      }
    ]
  },
  {
    "sha": "70a502f60a69834502305b4666c87ee9bee98e61",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MGE1MDJmNjBhNjk4MzQ1MDIzMDViNDY2NmM4N2VlOWJlZTk4ZTYx",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@jtimon.cc",
        "date": "2015-01-18T18:37:14Z"
      },
      "committer": {
        "name": "jtimon",
        "email": "jtimon@jtimon.cc",
        "date": "2015-01-20T19:50:42Z"
      },
      "message": "Includes: Cleanup includes",
      "tree": {
        "sha": "a391c9d31ae1063e2a1ce9e9efdbf66c0a9ba3c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a391c9d31ae1063e2a1ce9e9efdbf66c0a9ba3c1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/70a502f60a69834502305b4666c87ee9bee98e61",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/70a502f60a69834502305b4666c87ee9bee98e61",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/70a502f60a69834502305b4666c87ee9bee98e61",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/70a502f60a69834502305b4666c87ee9bee98e61/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3ef9115fc74629c5087b60f6ab0b97e9b6d98bec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ef9115fc74629c5087b60f6ab0b97e9b6d98bec",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3ef9115fc74629c5087b60f6ab0b97e9b6d98bec"
      }
    ],
    "stats": {
      "total": 149,
      "additions": 110,
      "deletions": 39
    },
    "files": [
      {
        "sha": "da405be801bdea92639fa18b1cbc71db94bd69f4",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70a502f60a69834502305b4666c87ee9bee98e61/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70a502f60a69834502305b4666c87ee9bee98e61/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=70a502f60a69834502305b4666c87ee9bee98e61",
        "patch": "@@ -3,11 +3,11 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include \"chainparams.h\"\n #include \"clientversion.h\"\n-#include \"rpcserver.h\"\n #include \"init.h\"\n-#include \"main.h\"\n #include \"noui.h\"\n+#include \"rpcserver.h\"\n #include \"ui_interface.h\"\n #include \"util.h\"\n "
      },
      {
        "sha": "8647244baaca28258299881e3860da3832ab3494",
        "filename": "src/checkpoints.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70a502f60a69834502305b4666c87ee9bee98e61/src/checkpoints.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70a502f60a69834502305b4666c87ee9bee98e61/src/checkpoints.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.cpp?ref=70a502f60a69834502305b4666c87ee9bee98e61",
        "patch": "@@ -4,6 +4,7 @@\n \n #include \"checkpoints.h\"\n \n+#include \"chain.h\"\n #include \"chainparams.h\"\n #include \"main.h\"\n #include \"uint256.h\""
      },
      {
        "sha": "793fa258cea147109d5df1c922f1930d18ead8ac",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70a502f60a69834502305b4666c87ee9bee98e61/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70a502f60a69834502305b4666c87ee9bee98e61/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=70a502f60a69834502305b4666c87ee9bee98e61",
        "patch": "@@ -11,6 +11,7 @@\n \n #include \"addrman.h\"\n #include \"amount.h\"\n+#include \"chainparams.h\"\n #include \"checkpoints.h\"\n #include \"compat/sanity.h\"\n #include \"key.h\"\n@@ -20,6 +21,7 @@\n #include \"rpcserver.h\"\n #include \"script/standard.h\"\n #include \"txdb.h\"\n+#include \"txmempool.h\"\n #include \"ui_interface.h\"\n #include \"util.h\"\n #include \"utilmoneystr.h\""
      },
      {
        "sha": "ecac6cb91f1f807746a119b398a6011edf2ee401",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70a502f60a69834502305b4666c87ee9bee98e61/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70a502f60a69834502305b4666c87ee9bee98e61/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=70a502f60a69834502305b4666c87ee9bee98e61",
        "patch": "@@ -7,17 +7,23 @@\n \n #include \"addrman.h\"\n #include \"alert.h\"\n+#include \"amount.h\"\n #include \"arith_uint256.h\"\n #include \"chainparams.h\"\n #include \"checkpoints.h\"\n #include \"checkqueue.h\"\n #include \"init.h\"\n #include \"merkleblock.h\"\n-#include \"net.h\"\n #include \"pow.h\"\n+#include \"primitives/transaction.h\"\n+#include \"script/script.h\"\n+#include \"script/sigcache.h\"\n+#include \"script/standard.h\"\n+#include \"tinyformat.h\"\n #include \"txdb.h\"\n #include \"txmempool.h\"\n #include \"ui_interface.h\"\n+#include \"uint256.h\"\n #include \"undo.h\"\n #include \"util.h\"\n #include \"utilmoneystr.h\""
      },
      {
        "sha": "6800b3b8139a260fd967a922b2446a91c425eb59",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 5,
        "deletions": 11,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70a502f60a69834502305b4666c87ee9bee98e61/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70a502f60a69834502305b4666c87ee9bee98e61/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=70a502f60a69834502305b4666c87ee9bee98e61",
        "patch": "@@ -10,21 +10,12 @@\n #include \"config/bitcoin-config.h\"\n #endif\n \n-#include \"amount.h\"\n #include \"chain.h\"\n-#include \"chainparams.h\"\n #include \"coins.h\"\n-#include \"primitives/block.h\"\n-#include \"primitives/transaction.h\"\n #include \"net.h\"\n-#include \"pow.h\"\n-#include \"script/script.h\"\n-#include \"script/sigcache.h\"\n-#include \"script/standard.h\"\n+#include \"primitives/block.h\"\n+#include \"script/script_error.h\"\n #include \"sync.h\"\n-#include \"tinyformat.h\"\n-#include \"txmempool.h\"\n-#include \"uint256.h\"\n \n #include <algorithm>\n #include <exception>\n@@ -35,13 +26,16 @@\n #include <utility>\n #include <vector>\n \n+#include <boost/filesystem/path.hpp>\n #include <boost/unordered_map.hpp>\n \n class CBlockIndex;\n class CBlockTreeDB;\n class CBloomFilter;\n+class CCoinsViewCache;\n class CInv;\n class CScriptCheck;\n+class CTxMemPool;\n class CValidationInterface;\n class CValidationState;\n "
      },
      {
        "sha": "c957660f778274f3d5c1cd93bf59b0057e3ceea9",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70a502f60a69834502305b4666c87ee9bee98e61/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70a502f60a69834502305b4666c87ee9bee98e61/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=70a502f60a69834502305b4666c87ee9bee98e61",
        "patch": "@@ -7,11 +7,17 @@\n \n #include \"amount.h\"\n #include \"primitives/transaction.h\"\n+#include \"chain.h\"\n+#include \"chainparams.h\"\n #include \"hash.h\"\n #include \"main.h\"\n #include \"net.h\"\n #include \"pow.h\"\n+#include \"primitives/block.h\"\n+#include \"primitives/transaction.h\"\n+#include \"script/standard.h\"\n #include \"timedata.h\"\n+#include \"txmempool.h\"\n #include \"util.h\"\n #include \"utilmoneystr.h\"\n #ifdef ENABLE_WALLET"
      },
      {
        "sha": "c4497529b2ddfcf8ee734b2a7b7532cfbeffc9ab",
        "filename": "src/qt/addresstablemodel.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70a502f60a69834502305b4666c87ee9bee98e61/src/qt/addresstablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70a502f60a69834502305b4666c87ee9bee98e61/src/qt/addresstablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addresstablemodel.cpp?ref=70a502f60a69834502305b4666c87ee9bee98e61",
        "patch": "@@ -10,6 +10,8 @@\n #include \"base58.h\"\n #include \"wallet.h\"\n \n+#include <boost/foreach.hpp>\n+\n #include <QFont>\n #include <QDebug>\n "
      },
      {
        "sha": "f4db3da0c07b3e4393686a415d06a9d2481b8f58",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70a502f60a69834502305b4666c87ee9bee98e61/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70a502f60a69834502305b4666c87ee9bee98e61/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=70a502f60a69834502305b4666c87ee9bee98e61",
        "patch": "@@ -23,8 +23,8 @@\n #include \"walletmodel.h\"\n #endif\n \n+#include \"chainparams.h\"\n #include \"init.h\"\n-#include \"main.h\"\n #include \"rpcserver.h\"\n #include \"ui_interface.h\"\n #include \"util.h\""
      },
      {
        "sha": "975f3d907ff998ba1a412437d125919f197724e2",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70a502f60a69834502305b4666c87ee9bee98e61/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70a502f60a69834502305b4666c87ee9bee98e61/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=70a502f60a69834502305b4666c87ee9bee98e61",
        "patch": "@@ -15,6 +15,7 @@\n \n #include \"coincontrol.h\"\n #include \"main.h\"\n+#include \"txmempool.h\"\n #include \"wallet.h\"\n \n #include <boost/assign/list_of.hpp> // for 'map_list_of()'"
      },
      {
        "sha": "a7fb90c50958b2d22f9017439db042ccf1e07553",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70a502f60a69834502305b4666c87ee9bee98e61/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70a502f60a69834502305b4666c87ee9bee98e61/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=70a502f60a69834502305b4666c87ee9bee98e61",
        "patch": "@@ -9,9 +9,9 @@\n #include \"qvalidatedlineedit.h\"\n #include \"walletmodel.h\"\n \n-#include \"primitives/transaction.h\"\n #include \"init.h\"\n #include \"main.h\"\n+#include \"primitives/transaction.h\"\n #include \"protocol.h\"\n #include \"script/script.h\"\n #include \"script/standard.h\""
      },
      {
        "sha": "b109823a2036df61839610982f7f2a968292b7e1",
        "filename": "src/qt/optionsmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70a502f60a69834502305b4666c87ee9bee98e61/src/qt/optionsmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70a502f60a69834502305b4666c87ee9bee98e61/src/qt/optionsmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.cpp?ref=70a502f60a69834502305b4666c87ee9bee98e61",
        "patch": "@@ -13,7 +13,7 @@\n \n #include \"amount.h\"\n #include \"init.h\"\n-#include \"main.h\"\n+#include \"main.h\" // For DEFAULT_SCRIPTCHECK_THREADS\n #include \"net.h\"\n #include \"txdb.h\" // for -dbcache defaults\n "
      },
      {
        "sha": "56e9e7655d6516a7eb258a8c9c3ce8824acfdcfa",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70a502f60a69834502305b4666c87ee9bee98e61/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70a502f60a69834502305b4666c87ee9bee98e61/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=70a502f60a69834502305b4666c87ee9bee98e61",
        "patch": "@@ -10,6 +10,7 @@\n \n #include \"base58.h\"\n #include \"chainparams.h\"\n+#include \"main.h\"\n #include \"ui_interface.h\"\n #include \"util.h\"\n #include \"wallet.h\""
      },
      {
        "sha": "8025f73b7cb287cb31185e4ce0bd9bf7ba363872",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70a502f60a69834502305b4666c87ee9bee98e61/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70a502f60a69834502305b4666c87ee9bee98e61/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=70a502f60a69834502305b4666c87ee9bee98e61",
        "patch": "@@ -10,7 +10,6 @@\n #include \"peertablemodel.h\"\n #include \"scicon.h\"\n \n-#include \"main.h\"\n #include \"chainparams.h\"\n #include \"rpcserver.h\"\n #include \"rpcclient.h\""
      },
      {
        "sha": "02ab6ee845eebcf9066430940b3f6c04117e64df",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70a502f60a69834502305b4666c87ee9bee98e61/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70a502f60a69834502305b4666c87ee9bee98e61/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=70a502f60a69834502305b4666c87ee9bee98e61",
        "patch": "@@ -17,6 +17,8 @@\n \n #include \"base58.h\"\n #include \"coincontrol.h\"\n+#include \"main.h\"\n+#include \"txmempool.h\"\n #include \"ui_interface.h\"\n #include \"wallet.h\"\n "
      },
      {
        "sha": "1296bea83fd072462e900cde7e6363e5cc48ec02",
        "filename": "src/qt/signverifymessagedialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70a502f60a69834502305b4666c87ee9bee98e61/src/qt/signverifymessagedialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70a502f60a69834502305b4666c87ee9bee98e61/src/qt/signverifymessagedialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/signverifymessagedialog.cpp?ref=70a502f60a69834502305b4666c87ee9bee98e61",
        "patch": "@@ -12,6 +12,7 @@\n \n #include \"base58.h\"\n #include \"init.h\"\n+#include \"main.h\" // For strMessageMagic\n #include \"wallet.h\"\n \n #include <string>"
      },
      {
        "sha": "152d68d7cec95fdef458a825e9ee12ce81912e53",
        "filename": "src/qt/transactionrecord.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70a502f60a69834502305b4666c87ee9bee98e61/src/qt/transactionrecord.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70a502f60a69834502305b4666c87ee9bee98e61/src/qt/transactionrecord.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.cpp?ref=70a502f60a69834502305b4666c87ee9bee98e61",
        "patch": "@@ -5,11 +5,14 @@\n #include \"transactionrecord.h\"\n \n #include \"base58.h\"\n+#include \"main.h\"\n #include \"timedata.h\"\n #include \"wallet.h\"\n \n #include <stdint.h>\n \n+#include <boost/foreach.hpp>\n+\n /* Return positive answer if transaction should be shown in list.\n  */\n bool TransactionRecord::showTransaction(const CWalletTx &wtx)"
      },
      {
        "sha": "2bc4b488f6a10a1b6fd7ceaf7874047d03b53a17",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70a502f60a69834502305b4666c87ee9bee98e61/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70a502f60a69834502305b4666c87ee9bee98e61/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=70a502f60a69834502305b4666c87ee9bee98e61",
        "patch": "@@ -24,6 +24,8 @@\n #include <QSet>\n #include <QTimer>\n \n+#include <boost/foreach.hpp>\n+\n using namespace std;\n \n WalletModel::WalletModel(CWallet *wallet, OptionsModel *optionsModel, QObject *parent) :"
      },
      {
        "sha": "12dd16fcd6e41d16ed4d5ff7da62d4369be96808",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70a502f60a69834502305b4666c87ee9bee98e61/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70a502f60a69834502305b4666c87ee9bee98e61/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=70a502f60a69834502305b4666c87ee9bee98e61",
        "patch": "@@ -3,9 +3,9 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include \"main.h\"\n #include \"primitives/block.h\"\n #include \"primitives/transaction.h\"\n-#include \"main.h\"\n #include \"rpcserver.h\"\n #include \"streams.h\"\n #include \"sync.h\""
      },
      {
        "sha": "de851c23f9b7dbabfc94b658d63bc64e2da811d1",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70a502f60a69834502305b4666c87ee9bee98e61/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70a502f60a69834502305b4666c87ee9bee98e61/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=70a502f60a69834502305b4666c87ee9bee98e61",
        "patch": "@@ -3,10 +3,14 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include \"chain.h\"\n+#include \"chainparams.h\"\n #include \"checkpoints.h\"\n #include \"main.h\"\n+#include \"primitives/transaction.h\"\n #include \"rpcserver.h\"\n #include \"sync.h\"\n+#include \"txmempool.h\"\n #include \"util.h\"\n \n #include <stdint.h>"
      },
      {
        "sha": "d9d6b2b4d50d9221c4f3fc7aaff7bec32316a495",
        "filename": "src/rpcdump.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70a502f60a69834502305b4666c87ee9bee98e61/src/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70a502f60a69834502305b4666c87ee9bee98e61/src/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcdump.cpp?ref=70a502f60a69834502305b4666c87ee9bee98e61",
        "patch": "@@ -3,9 +3,9 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"base58.h\"\n-#include \"rpcserver.h\"\n #include \"init.h\"\n #include \"main.h\"\n+#include \"rpcserver.h\"\n #include \"script/script.h\"\n #include \"script/standard.h\"\n #include \"sync.h\"\n@@ -18,6 +18,7 @@\n \n #include <boost/algorithm/string.hpp>\n #include <boost/date_time/posix_time/posix_time.hpp>\n+#include <boost/foreach.hpp>\n \n #include \"json/json_spirit_value.h\"\n "
      },
      {
        "sha": "c8916ed6c03ace7b5e05a637d37cad4dc0bf9c1d",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70a502f60a69834502305b4666c87ee9bee98e61/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70a502f60a69834502305b4666c87ee9bee98e61/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=70a502f60a69834502305b4666c87ee9bee98e61",
        "patch": "@@ -7,11 +7,12 @@\n #include \"chainparams.h\"\n #include \"core_io.h\"\n #include \"init.h\"\n-#include \"net.h\"\n #include \"main.h\"\n #include \"miner.h\"\n+#include \"net.h\"\n #include \"pow.h\"\n #include \"rpcserver.h\"\n+#include \"txmempool.h\"\n #include \"util.h\"\n #include \"validationinterface.h\"\n #ifdef ENABLE_WALLET"
      },
      {
        "sha": "31d364e49d55eaeca0eea1aec9d377af0572c663",
        "filename": "src/rpcnet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70a502f60a69834502305b4666c87ee9bee98e61/src/rpcnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70a502f60a69834502305b4666c87ee9bee98e61/src/rpcnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcnet.cpp?ref=70a502f60a69834502305b4666c87ee9bee98e61",
        "patch": "@@ -4,6 +4,7 @@\n \n #include \"rpcserver.h\"\n \n+#include \"chainparams.h\"\n #include \"clientversion.h\"\n #include \"main.h\"\n #include \"net.h\""
      },
      {
        "sha": "635c845a460cf7f4012802f3ede2dfeceff1f499",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70a502f60a69834502305b4666c87ee9bee98e61/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70a502f60a69834502305b4666c87ee9bee98e61/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=70a502f60a69834502305b4666c87ee9bee98e61",
        "patch": "@@ -14,6 +14,7 @@\n #include \"script/script.h\"\n #include \"script/sign.h\"\n #include \"script/standard.h\"\n+#include \"txmempool.h\"\n #include \"uint256.h\"\n #ifdef ENABLE_WALLET\n #include \"wallet.h\""
      },
      {
        "sha": "0a1fa947ad18b4833e13db7c85413633889b35ed",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70a502f60a69834502305b4666c87ee9bee98e61/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70a502f60a69834502305b4666c87ee9bee98e61/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=70a502f60a69834502305b4666c87ee9bee98e61",
        "patch": "@@ -6,10 +6,11 @@\n #include \"amount.h\"\n #include \"base58.h\"\n #include \"core_io.h\"\n-#include \"rpcserver.h\"\n #include \"init.h\"\n+#include \"main.h\"\n #include \"net.h\"\n #include \"netbase.h\"\n+#include \"rpcserver.h\"\n #include \"timedata.h\"\n #include \"util.h\"\n #include \"utilmoneystr.h\"\n@@ -19,6 +20,7 @@\n #include <stdint.h>\n \n #include <boost/assign/list_of.hpp>\n+#include <boost/foreach.hpp>\n #include \"json/json_spirit_utils.h\"\n #include \"json/json_spirit_value.h\"\n "
      },
      {
        "sha": "c12cfde7a8c86d9c0ac3de5c384e428ee846a855",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70a502f60a69834502305b4666c87ee9bee98e61/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70a502f60a69834502305b4666c87ee9bee98e61/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=70a502f60a69834502305b4666c87ee9bee98e61",
        "patch": "@@ -6,13 +6,14 @@\n // Unit tests for denial-of-service detection/prevention code\n //\n \n-\n-\n+#include \"chainparams.h\"\n #include \"keystore.h\"\n #include \"main.h\"\n #include \"net.h\"\n #include \"pow.h\"\n+#include \"primitives/transaction.h\"\n #include \"script/sign.h\"\n+#include \"script/standard.h\"\n #include \"serialize.h\"\n #include \"util.h\"\n "
      },
      {
        "sha": "b28e4f80c8cbf8d5a38ab7d05894b556708a1a01",
        "filename": "src/test/checkblock_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70a502f60a69834502305b4666c87ee9bee98e61/src/test/checkblock_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70a502f60a69834502305b4666c87ee9bee98e61/src/test/checkblock_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/checkblock_tests.cpp?ref=70a502f60a69834502305b4666c87ee9bee98e61",
        "patch": "@@ -6,10 +6,10 @@\n // Unit tests for block.CheckBlock()\n //\n \n-\n-\n #include \"clientversion.h\"\n #include \"main.h\"\n+#include \"primitives/block.h\"\n+#include \"streams.h\"\n #include \"utiltime.h\"\n \n #include <cstdio>"
      },
      {
        "sha": "370bf9d7ff0e4d8782f9d36725dd34c4d1771584",
        "filename": "src/test/key_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70a502f60a69834502305b4666c87ee9bee98e61/src/test/key_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70a502f60a69834502305b4666c87ee9bee98e61/src/test/key_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/key_tests.cpp?ref=70a502f60a69834502305b4666c87ee9bee98e61",
        "patch": "@@ -10,6 +10,7 @@\n #include \"util.h\"\n #include \"utilstrencodings.h\"\n \n+#include <stdio.h>\n #include <string>\n #include <vector>\n "
      },
      {
        "sha": "c2a4e1597c1f196de5c73fd2fdd117c429e858d5",
        "filename": "src/test/main_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70a502f60a69834502305b4666c87ee9bee98e61/src/test/main_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70a502f60a69834502305b4666c87ee9bee98e61/src/test/main_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/main_tests.cpp?ref=70a502f60a69834502305b4666c87ee9bee98e61",
        "patch": "@@ -2,7 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"primitives/transaction.h\"\n+#include \"amount.h\"\n #include \"main.h\"\n \n #include <boost/test/unit_test.hpp>"
      },
      {
        "sha": "f5c365a47cea4189e072947e821f8ea19ec8e593",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70a502f60a69834502305b4666c87ee9bee98e61/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70a502f60a69834502305b4666c87ee9bee98e61/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=70a502f60a69834502305b4666c87ee9bee98e61",
        "patch": "@@ -2,11 +2,17 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include \"checkpoints.h\"\n #include \"main.h\"\n #include \"miner.h\"\n+#include \"primitives/transaction.h\"\n #include \"pubkey.h\"\n+#include \"script/script.h\"\n+#include \"script/standard.h\"\n+#include \"txmempool.h\"\n #include \"uint256.h\"\n #include \"util.h\"\n+#include \"utilstrencodings.h\"\n \n #include <boost/test/unit_test.hpp>\n "
      },
      {
        "sha": "981a78380068246d89f28c0ebae9c49964be1c7d",
        "filename": "src/test/multisig_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70a502f60a69834502305b4666c87ee9bee98e61/src/test/multisig_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70a502f60a69834502305b4666c87ee9bee98e61/src/test/multisig_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/multisig_tests.cpp?ref=70a502f60a69834502305b4666c87ee9bee98e61",
        "patch": "@@ -4,11 +4,13 @@\n \n #include \"key.h\"\n #include \"keystore.h\"\n-#include \"main.h\"\n+#include \"primitives/transaction.h\"\n+#include \"script/interpreter.h\"\n #include \"script/script.h\"\n #include \"script/script_error.h\"\n-#include \"script/interpreter.h\"\n #include \"script/sign.h\"\n+#include \"script/standard.h\"\n+#include \"tinyformat.h\"\n #include \"uint256.h\"\n \n #ifdef ENABLE_WALLET"
      },
      {
        "sha": "341cf39c920a70a02e4744e46e40e4f234234582",
        "filename": "src/test/rpc_wallet_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70a502f60a69834502305b4666c87ee9bee98e61/src/test/rpc_wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70a502f60a69834502305b4666c87ee9bee98e61/src/test/rpc_wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_wallet_tests.cpp?ref=70a502f60a69834502305b4666c87ee9bee98e61",
        "patch": "@@ -6,6 +6,7 @@\n #include \"rpcclient.h\"\n \n #include \"base58.h\"\n+#include \"main.h\"\n #include \"wallet.h\"\n \n #include <boost/algorithm/string.hpp>"
      },
      {
        "sha": "f16d20e95e0adce198435c0628cb736575f63698",
        "filename": "src/test/script_P2SH_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70a502f60a69834502305b4666c87ee9bee98e61/src/test/script_P2SH_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70a502f60a69834502305b4666c87ee9bee98e61/src/test/script_P2SH_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_P2SH_tests.cpp?ref=70a502f60a69834502305b4666c87ee9bee98e61",
        "patch": "@@ -5,9 +5,11 @@\n #include \"key.h\"\n #include \"keystore.h\"\n #include \"main.h\"\n+#include \"primitives/transaction.h\"\n #include \"script/script.h\"\n #include \"script/script_error.h\"\n #include \"script/sign.h\"\n+#include \"script/standard.h\"\n \n #ifdef ENABLE_WALLET\n #include \"wallet_ismine.h\""
      },
      {
        "sha": "4f06b24eba26dbace961127b39d72f63e22bbc81",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70a502f60a69834502305b4666c87ee9bee98e61/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70a502f60a69834502305b4666c87ee9bee98e61/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=70a502f60a69834502305b4666c87ee9bee98e61",
        "patch": "@@ -8,11 +8,14 @@\n #include \"core_io.h\"\n #include \"key.h\"\n #include \"keystore.h\"\n-#include \"main.h\"\n+#include \"primitives/transaction.h\"\n #include \"script/script.h\"\n #include \"script/script_error.h\"\n #include \"script/sign.h\"\n+#include \"script/standard.h\"\n+#include \"streams.h\"\n #include \"util.h\"\n+#include \"utilstrencodings.h\"\n \n #if defined(HAVE_CONSENSUS_LIB)\n #include \"script/bitcoinconsensus.h\""
      },
      {
        "sha": "b3a9296e10fa906dd2776b52a71254287a69dc46",
        "filename": "src/test/sighash_tests.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 3,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70a502f60a69834502305b4666c87ee9bee98e61/src/test/sighash_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70a502f60a69834502305b4666c87ee9bee98e61/src/test/sighash_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sighash_tests.cpp?ref=70a502f60a69834502305b4666c87ee9bee98e61",
        "patch": "@@ -3,16 +3,21 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"data/sighash.json.h\"\n+#include \"hash.h\"\n #include \"main.h\"\n+#include \"primitives/transaction.h\"\n #include \"random.h\"\n-#include \"serialize.h\"\n-#include \"script/script.h\"\n #include \"script/interpreter.h\"\n+#include \"script/script.h\"\n+#include \"serialize.h\"\n+#include \"streams.h\"\n #include \"util.h\"\n+#include \"utilstrencodings.h\"\n #include \"version.h\"\n \n-#include <iostream>\n+#include <stdio.h>\n \n+#include <boost/foreach.hpp>\n #include <boost/test/unit_test.hpp>\n #include \"json/json_spirit_reader_template.h\"\n #include \"json/json_spirit_utils.h\""
      },
      {
        "sha": "5d69cb4e21b9825affc1430c15c2a279cd7d47e8",
        "filename": "src/test/skiplist_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70a502f60a69834502305b4666c87ee9bee98e61/src/test/skiplist_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70a502f60a69834502305b4666c87ee9bee98e61/src/test/skiplist_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/skiplist_tests.cpp?ref=70a502f60a69834502305b4666c87ee9bee98e61",
        "patch": "@@ -2,7 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"main.h\"\n+#include \"chain.h\"\n #include \"random.h\"\n #include \"util.h\"\n "
      },
      {
        "sha": "84c231537640711cf2af305c48c17547fa95e20f",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70a502f60a69834502305b4666c87ee9bee98e61/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70a502f60a69834502305b4666c87ee9bee98e61/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=70a502f60a69834502305b4666c87ee9bee98e61",
        "patch": "@@ -4,6 +4,7 @@\n \n #define BOOST_TEST_MODULE Bitcoin Test Suite\n \n+#include \"chainparams.h\"\n #include \"main.h\"\n #include \"random.h\"\n #include \"txdb.h\""
      },
      {
        "sha": "5f88e28ab0ab6ead0f013239a4a514c86e160b72",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70a502f60a69834502305b4666c87ee9bee98e61/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70a502f60a69834502305b4666c87ee9bee98e61/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=70a502f60a69834502305b4666c87ee9bee98e61",
        "patch": "@@ -6,20 +6,26 @@\n #include \"data/tx_valid.json.h\"\n \n #include \"clientversion.h\"\n+#include \"core_io.h\"\n #include \"key.h\"\n #include \"keystore.h\"\n #include \"main.h\"\n+#include \"primitives/transaction.h\"\n+#include \"script/interpreter.h\"\n #include \"script/script.h\"\n #include \"script/script_error.h\"\n-#include \"core_io.h\"\n+#include \"script/standard.h\"\n+#include \"streams.h\"\n+#include \"utilstrencodings.h\"\n \n #include <map>\n #include <string>\n \n #include <boost/algorithm/string/classification.hpp>\n #include <boost/algorithm/string/split.hpp>\n-#include <boost/test/unit_test.hpp>\n #include <boost/assign/list_of.hpp>\n+#include <boost/foreach.hpp>\n+#include <boost/test/unit_test.hpp>\n #include \"json/json_spirit_writer_template.h\"\n \n using namespace std;"
      },
      {
        "sha": "ab443ec44a9a1c297211cacc68fdce71b52bd898",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70a502f60a69834502305b4666c87ee9bee98e61/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70a502f60a69834502305b4666c87ee9bee98e61/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=70a502f60a69834502305b4666c87ee9bee98e61",
        "patch": "@@ -5,6 +5,8 @@\n \n #include \"txdb.h\"\n \n+#include \"hash.h\"\n+#include \"main.h\"\n #include \"pow.h\"\n #include \"uint256.h\"\n "
      },
      {
        "sha": "1ce93969d8414fb442ff428179dbd70580da7dbe",
        "filename": "src/txdb.h",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70a502f60a69834502305b4666c87ee9bee98e61/src/txdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70a502f60a69834502305b4666c87ee9bee98e61/src/txdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.h?ref=70a502f60a69834502305b4666c87ee9bee98e61",
        "patch": "@@ -6,15 +6,17 @@\n #ifndef BITCOIN_TXDB_H\n #define BITCOIN_TXDB_H\n \n+#include \"coins.h\"\n #include \"leveldbwrapper.h\"\n-#include \"main.h\"\n \n #include <map>\n #include <string>\n #include <utility>\n #include <vector>\n \n-class CCoins;\n+class CBlockFileInfo;\n+class CBlockIndex;\n+class CDiskTxPos;\n class uint256;\n \n //! -dbcache default (MiB)"
      },
      {
        "sha": "a11404c2723a1e43a4ce5a94eb961d7a02fc89a4",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70a502f60a69834502305b4666c87ee9bee98e61/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70a502f60a69834502305b4666c87ee9bee98e61/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=70a502f60a69834502305b4666c87ee9bee98e61",
        "patch": "@@ -5,6 +5,7 @@\n \n #include \"txmempool.h\"\n \n+#include \"chain.h\"\n #include \"clientversion.h\"\n #include \"main.h\"\n #include \"streams.h\""
      },
      {
        "sha": "c6247488246477b73683314da17b13e4f76bffa4",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70a502f60a69834502305b4666c87ee9bee98e61/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70a502f60a69834502305b4666c87ee9bee98e61/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=70a502f60a69834502305b4666c87ee9bee98e61",
        "patch": "@@ -8,16 +8,19 @@\n #include \"base58.h\"\n #include \"checkpoints.h\"\n #include \"coincontrol.h\"\n+#include \"main.h\"\n #include \"net.h\"\n #include \"script/script.h\"\n #include \"script/sign.h\"\n #include \"timedata.h\"\n+#include \"txmempool.h\"\n #include \"util.h\"\n #include \"utilmoneystr.h\"\n \n #include <assert.h>\n \n #include <boost/algorithm/string/replace.hpp>\n+#include <boost/foreach.hpp>\n #include <boost/thread.hpp>\n \n using namespace std;"
      },
      {
        "sha": "16a8318fd2b50cd1c61b7adacba14d90ff7e740b",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70a502f60a69834502305b4666c87ee9bee98e61/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70a502f60a69834502305b4666c87ee9bee98e61/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=70a502f60a69834502305b4666c87ee9bee98e61",
        "patch": "@@ -10,10 +10,11 @@\n #include \"crypter.h\"\n #include \"key.h\"\n #include \"keystore.h\"\n-#include \"main.h\"\n #include \"primitives/block.h\"\n #include \"primitives/transaction.h\"\n+#include \"tinyformat.h\"\n #include \"ui_interface.h\"\n+#include \"utilstrencodings.h\"\n #include \"validationinterface.h\"\n #include \"wallet_ismine.h\"\n #include \"walletdb.h\"\n@@ -49,10 +50,12 @@ static const CAmount nHighTransactionMaxFeeWarning = 100 * nHighTransactionFeeWa\n static const unsigned int MAX_FREE_TRANSACTION_CREATE_SIZE = 1000;\n \n class CAccountingEntry;\n+class CBlockIndex;\n class CCoinControl;\n class COutput;\n class CReserveKey;\n class CScript;\n+class CTxMemPool;\n class CWalletTx;\n \n /** (client) version numbers for particular wallet features */"
      },
      {
        "sha": "00ec16a009a885ebba5416bc61a5791c10f1bbca",
        "filename": "src/walletdb.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70a502f60a69834502305b4666c87ee9bee98e61/src/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70a502f60a69834502305b4666c87ee9bee98e61/src/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.cpp?ref=70a502f60a69834502305b4666c87ee9bee98e61",
        "patch": "@@ -6,6 +6,8 @@\n #include \"walletdb.h\"\n \n #include \"base58.h\"\n+#include \"main.h\"\n+#include \"net.h\"\n #include \"protocol.h\"\n #include \"serialize.h\"\n #include \"sync.h\""
      }
    ]
  },
  {
    "sha": "a4f93af231a7b3b2cfb0d69cefa052fe0882bc55",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNGY5M2FmMjMxYTdiM2IyY2ZiMGQ2OWNlZmEwNTJmZTA4ODJiYzU1",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-01-16T23:57:14Z"
      },
      "committer": {
        "name": "jtimon",
        "email": "jtimon@jtimon.cc",
        "date": "2015-01-20T20:12:13Z"
      },
      "message": "Consensus: Refactor: Decouple CValidationState from main::AbortNode()",
      "tree": {
        "sha": "d6c47c3f82cae7af5f2c6efd232ab36dcf797442",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d6c47c3f82cae7af5f2c6efd232ab36dcf797442"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a4f93af231a7b3b2cfb0d69cefa052fe0882bc55",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4f93af231a7b3b2cfb0d69cefa052fe0882bc55",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a4f93af231a7b3b2cfb0d69cefa052fe0882bc55",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4f93af231a7b3b2cfb0d69cefa052fe0882bc55/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "70a502f60a69834502305b4666c87ee9bee98e61",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/70a502f60a69834502305b4666c87ee9bee98e61",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/70a502f60a69834502305b4666c87ee9bee98e61"
      }
    ],
    "stats": {
      "total": 59,
      "additions": 27,
      "deletions": 32
    },
    "files": [
      {
        "sha": "d99459e15279c1e8bac33b1f510f60344a0f2d49",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 26,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a4f93af231a7b3b2cfb0d69cefa052fe0882bc55/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a4f93af231a7b3b2cfb0d69cefa052fe0882bc55/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=a4f93af231a7b3b2cfb0d69cefa052fe0882bc55",
        "patch": "@@ -1531,6 +1531,24 @@ bool UndoReadFromDisk(CBlockUndo& blockundo, const CDiskBlockPos& pos, const uin\n     return true;\n }\n \n+/** Abort with a message */\n+bool AbortNode(const std::string& strMessage, const std::string& userMessage=\"\")\n+{\n+    strMiscWarning = strMessage;\n+    LogPrintf(\"*** %s\\n\", strMessage);\n+    uiInterface.ThreadSafeMessageBox(\n+        userMessage.empty() ? _(\"Error: A fatal internal error occured, see debug.log for details\") : userMessage,\n+        \"\", CClientUIInterface::MSG_ERROR);\n+    StartShutdown();\n+    return false;\n+}\n+\n+bool AbortNode(CValidationState& state, const std::string& strMessage, const std::string& userMessage=\"\")\n+{\n+    AbortNode(strMessage, userMessage);\n+    return state.Error(strMessage);\n+}\n+\n } // anon namespace\n \n bool DisconnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, CCoinsViewCache& view, bool* pfClean)\n@@ -1790,7 +1808,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n             if (!FindUndoPos(state, pindex->nFile, pos, ::GetSerializeSize(blockundo, SER_DISK, CLIENT_VERSION) + 40))\n                 return error(\"ConnectBlock() : FindUndoPos failed\");\n             if (!UndoWriteToDisk(blockundo, pos, pindex->pprev->GetBlockHash()))\n-                return state.Abort(\"Failed to write undo data\");\n+                return AbortNode(state, \"Failed to write undo data\");\n \n             // update nUndoPos in block index\n             pindex->nUndoPos = pos.nPos;\n@@ -1803,7 +1821,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n \n     if (fTxIndex)\n         if (!pblocktree->WriteTxIndex(vPos))\n-            return state.Abort(\"Failed to write transaction index\");\n+            return AbortNode(state, \"Failed to write transaction index\");\n \n     // add this block to the view's block chain\n     view.SetBestBlock(pindex->GetBlockHash());\n@@ -1864,20 +1882,20 @@ bool static FlushStateToDisk(CValidationState &state, FlushStateMode mode) {\n                 setDirtyBlockIndex.erase(it++);\n             }\n             if (!pblocktree->WriteBatchSync(vFiles, nLastBlockFile, vBlocks)) {\n-                return state.Abort(\"Files to write to block index database\");\n+                return AbortNode(state, \"Files to write to block index database\");\n             }\n         }\n         // Finally flush the chainstate (which may refer to block index entries).\n         if (!pcoinsTip->Flush())\n-            return state.Abort(\"Failed to write to coin database\");\n+            return AbortNode(state, \"Failed to write to coin database\");\n         // Update best block in wallet (so we can detect restored wallets).\n         if (mode != FLUSH_STATE_IF_NEEDED) {\n             GetMainSignals().SetBestChain(chainActive.GetLocator());\n         }\n         nLastWrite = GetTimeMicros();\n     }\n     } catch (const std::runtime_error& e) {\n-        return state.Abort(std::string(\"System error while flushing: \") + e.what());\n+        return AbortNode(state, std::string(\"System error while flushing: \") + e.what());\n     }\n     return true;\n }\n@@ -1934,7 +1952,7 @@ bool static DisconnectTip(CValidationState &state) {\n     // Read block from disk.\n     CBlock block;\n     if (!ReadBlockFromDisk(block, pindexDelete))\n-        return state.Abort(\"Failed to read block\");\n+        return AbortNode(state, \"Failed to read block\");\n     // Apply the block atomically to the chain state.\n     int64_t nStart = GetTimeMicros();\n     {\n@@ -1985,7 +2003,7 @@ bool static ConnectTip(CValidationState &state, CBlockIndex *pindexNew, CBlock *\n     CBlock block;\n     if (!pblock) {\n         if (!ReadBlockFromDisk(block, pindexNew))\n-            return state.Abort(\"Failed to read block\");\n+            return AbortNode(state, \"Failed to read block\");\n         pblock = &block;\n     }\n     // Apply the block atomically to the chain state.\n@@ -2651,11 +2669,11 @@ bool AcceptBlock(CBlock& block, CValidationState& state, CBlockIndex** ppindex,\n             return error(\"AcceptBlock() : FindBlockPos failed\");\n         if (dbp == NULL)\n             if (!WriteBlockToDisk(block, blockPos))\n-                return state.Abort(\"Failed to write block\");\n+                AbortNode(state, \"Failed to write block\");\n         if (!ReceivedBlockTransactions(block, state, pindex, blockPos))\n             return error(\"AcceptBlock() : ReceivedBlockTransactions failed\");\n     } catch (const std::runtime_error& e) {\n-        return state.Abort(std::string(\"System error: \") + e.what());\n+        return AbortNode(state, std::string(\"System error: \") + e.what());\n     }\n \n     return true;\n@@ -2727,23 +2745,6 @@ bool TestBlockValidity(CValidationState &state, const CBlock& block, CBlockIndex\n     return true;\n }\n \n-\n-\n-\n-\n-\n-\n-\n-bool AbortNode(const std::string &strMessage, const std::string &userMessage) {\n-    strMiscWarning = strMessage;\n-    LogPrintf(\"*** %s\\n\", strMessage);\n-    uiInterface.ThreadSafeMessageBox(\n-        userMessage.empty() ? _(\"Error: A fatal internal error occured, see debug.log for details\") : userMessage,\n-        \"\", CClientUIInterface::MSG_ERROR);\n-    StartShutdown();\n-    return false;\n-}\n-\n bool CheckDiskSpace(uint64_t nAdditionalBytes)\n {\n     uint64_t nFreeBytesAvailable = boost::filesystem::space(GetDataDir()).available;"
      },
      {
        "sha": "d506edba3b094361a81909495c5a4ec80f0cf3a8",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a4f93af231a7b3b2cfb0d69cefa052fe0882bc55/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a4f93af231a7b3b2cfb0d69cefa052fe0882bc55/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=a4f93af231a7b3b2cfb0d69cefa052fe0882bc55",
        "patch": "@@ -176,8 +176,6 @@ CAmount GetBlockValue(int nHeight, const CAmount& nFees);\n \n /** Create a new block index entry for a given block hash */\n CBlockIndex * InsertBlockIndex(uint256 hash);\n-/** Abort with a message */\n-bool AbortNode(const std::string &msg, const std::string &userMessage=\"\");\n /** Get statistics from node state */\n bool GetNodeStateStats(NodeId nodeid, CNodeStateStats &stats);\n /** Increase a node's misbehavior score. */\n@@ -434,10 +432,6 @@ class CValidationState {\n         mode = MODE_ERROR;\n         return false;\n     }\n-    bool Abort(const std::string &msg) {\n-        AbortNode(msg);\n-        return Error(msg);\n-    }\n     bool IsValid() const {\n         return mode == MODE_VALID;\n     }"
      }
    ]
  },
  {
    "sha": "60e892ed533870eaa747be9d3fce94b1aa7bbc45",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MGU4OTJlZDUzMzg3MGVhYTc0N2JlOWQzZmNlOTRiMWFhN2JiYzQ1",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@jtimon.cc",
        "date": "2015-01-16T22:53:42Z"
      },
      "committer": {
        "name": "jtimon",
        "email": "jtimon@jtimon.cc",
        "date": "2015-01-20T20:12:13Z"
      },
      "message": "Consensus: SQUASHME: MOVEONLY: Move CValidationState from main.h to consensus/validation.h",
      "tree": {
        "sha": "8b5067c787f271bb47c9b78fb91af0f774c178ff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8b5067c787f271bb47c9b78fb91af0f774c178ff"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/60e892ed533870eaa747be9d3fce94b1aa7bbc45",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/60e892ed533870eaa747be9d3fce94b1aa7bbc45",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/60e892ed533870eaa747be9d3fce94b1aa7bbc45",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/60e892ed533870eaa747be9d3fce94b1aa7bbc45/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a4f93af231a7b3b2cfb0d69cefa052fe0882bc55",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4f93af231a7b3b2cfb0d69cefa052fe0882bc55",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a4f93af231a7b3b2cfb0d69cefa052fe0882bc55"
      }
    ],
    "stats": {
      "total": 165,
      "additions": 95,
      "deletions": 70
    },
    "files": [
      {
        "sha": "9aea034fa8865c7fad21f2bcc57b8426f3394e99",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60e892ed533870eaa747be9d3fce94b1aa7bbc45/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60e892ed533870eaa747be9d3fce94b1aa7bbc45/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=60e892ed533870eaa747be9d3fce94b1aa7bbc45",
        "patch": "@@ -88,6 +88,7 @@ BITCOIN_CORE_H = \\\n   coins.h \\\n   compat.h \\\n   compressor.h \\\n+  consensus/validation.h \\\n   core_io.h \\\n   crypter.h \\\n   db.h \\"
      },
      {
        "sha": "c92bec4fae5a8db11e3a0fc3adbf406ad1ed061f",
        "filename": "src/consensus/validation.h",
        "status": "added",
        "additions": 80,
        "deletions": 0,
        "changes": 80,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60e892ed533870eaa747be9d3fce94b1aa7bbc45/src/consensus/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60e892ed533870eaa747be9d3fce94b1aa7bbc45/src/consensus/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/validation.h?ref=60e892ed533870eaa747be9d3fce94b1aa7bbc45",
        "patch": "@@ -0,0 +1,80 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CONSENSUS_VALIDATION_H\n+#define BITCOIN_CONSENSUS_VALIDATION_H\n+\n+#include <string>\n+\n+/** \"reject\" message codes */\n+static const unsigned char REJECT_MALFORMED = 0x01;\n+static const unsigned char REJECT_INVALID = 0x10;\n+static const unsigned char REJECT_OBSOLETE = 0x11;\n+static const unsigned char REJECT_DUPLICATE = 0x12;\n+static const unsigned char REJECT_NONSTANDARD = 0x40;\n+static const unsigned char REJECT_DUST = 0x41;\n+static const unsigned char REJECT_INSUFFICIENTFEE = 0x42;\n+static const unsigned char REJECT_CHECKPOINT = 0x43;\n+\n+/** Capture information about block/transaction validation */\n+class CValidationState {\n+private:\n+    enum mode_state {\n+        MODE_VALID,   //! everything ok\n+        MODE_INVALID, //! network rule violation (DoS value may be set)\n+        MODE_ERROR,   //! run-time error\n+    } mode;\n+    int nDoS;\n+    std::string strRejectReason;\n+    unsigned char chRejectCode;\n+    bool corruptionPossible;\n+public:\n+    CValidationState() : mode(MODE_VALID), nDoS(0), chRejectCode(0), corruptionPossible(false) {}\n+    bool DoS(int level, bool ret = false,\n+             unsigned char chRejectCodeIn=0, std::string strRejectReasonIn=\"\",\n+             bool corruptionIn=false) {\n+        chRejectCode = chRejectCodeIn;\n+        strRejectReason = strRejectReasonIn;\n+        corruptionPossible = corruptionIn;\n+        if (mode == MODE_ERROR)\n+            return ret;\n+        nDoS += level;\n+        mode = MODE_INVALID;\n+        return ret;\n+    }\n+    bool Invalid(bool ret = false,\n+                 unsigned char _chRejectCode=0, std::string _strRejectReason=\"\") {\n+        return DoS(0, ret, _chRejectCode, _strRejectReason);\n+    }\n+    bool Error(std::string strRejectReasonIn=\"\") {\n+        if (mode == MODE_VALID)\n+            strRejectReason = strRejectReasonIn;\n+        mode = MODE_ERROR;\n+        return false;\n+    }\n+    bool IsValid() const {\n+        return mode == MODE_VALID;\n+    }\n+    bool IsInvalid() const {\n+        return mode == MODE_INVALID;\n+    }\n+    bool IsError() const {\n+        return mode == MODE_ERROR;\n+    }\n+    bool IsInvalid(int &nDoSOut) const {\n+        if (IsInvalid()) {\n+            nDoSOut = nDoS;\n+            return true;\n+        }\n+        return false;\n+    }\n+    bool CorruptionPossible() const {\n+        return corruptionPossible;\n+    }\n+    unsigned char GetRejectCode() const { return chRejectCode; }\n+    std::string GetRejectReason() const { return strRejectReason; }\n+};\n+\n+#endif // BITCOIN_CONSENSUS_VALIDATION_H"
      },
      {
        "sha": "5320397f68f4b43b0e253ad0e463969f53856e4e",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60e892ed533870eaa747be9d3fce94b1aa7bbc45/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60e892ed533870eaa747be9d3fce94b1aa7bbc45/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=60e892ed533870eaa747be9d3fce94b1aa7bbc45",
        "patch": "@@ -14,6 +14,7 @@\n #include \"chainparams.h\"\n #include \"checkpoints.h\"\n #include \"compat/sanity.h\"\n+#include \"consensus/validation.h\"\n #include \"key.h\"\n #include \"main.h\"\n #include \"miner.h\""
      },
      {
        "sha": "9fafc095b90b7e803c2d49f9a029e565a07ea7ee",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60e892ed533870eaa747be9d3fce94b1aa7bbc45/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60e892ed533870eaa747be9d3fce94b1aa7bbc45/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=60e892ed533870eaa747be9d3fce94b1aa7bbc45",
        "patch": "@@ -12,6 +12,7 @@\n #include \"chainparams.h\"\n #include \"checkpoints.h\"\n #include \"checkqueue.h\"\n+#include \"consensus/validation.h\"\n #include \"init.h\"\n #include \"merkleblock.h\"\n #include \"pow.h\""
      },
      {
        "sha": "5c2e482d4d71c49fb0e5fbb8f9fe92c530bb91d5",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 0,
        "deletions": 69,
        "changes": 69,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60e892ed533870eaa747be9d3fce94b1aa7bbc45/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60e892ed533870eaa747be9d3fce94b1aa7bbc45/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=60e892ed533870eaa747be9d3fce94b1aa7bbc45",
        "patch": "@@ -85,16 +85,6 @@ static const unsigned int DATABASE_WRITE_INTERVAL = 3600;\n /** Maximum length of reject messages. */\n static const unsigned int MAX_REJECT_MESSAGE_LENGTH = 111;\n \n-/** \"reject\" message codes */\n-static const unsigned char REJECT_MALFORMED = 0x01;\n-static const unsigned char REJECT_INVALID = 0x10;\n-static const unsigned char REJECT_OBSOLETE = 0x11;\n-static const unsigned char REJECT_DUPLICATE = 0x12;\n-static const unsigned char REJECT_NONSTANDARD = 0x40;\n-static const unsigned char REJECT_DUST = 0x41;\n-static const unsigned char REJECT_INSUFFICIENTFEE = 0x42;\n-static const unsigned char REJECT_CHECKPOINT = 0x43;\n-\n struct BlockHasher\n {\n     size_t operator()(const uint256& hash) const { return hash.GetCheapHash(); }\n@@ -396,65 +386,6 @@ class CBlockFileInfo\n      }\n };\n \n-/** Capture information about block/transaction validation */\n-class CValidationState {\n-private:\n-    enum mode_state {\n-        MODE_VALID,   //! everything ok\n-        MODE_INVALID, //! network rule violation (DoS value may be set)\n-        MODE_ERROR,   //! run-time error\n-    } mode;\n-    int nDoS;\n-    std::string strRejectReason;\n-    unsigned char chRejectCode;\n-    bool corruptionPossible;\n-public:\n-    CValidationState() : mode(MODE_VALID), nDoS(0), chRejectCode(0), corruptionPossible(false) {}\n-    bool DoS(int level, bool ret = false,\n-             unsigned char chRejectCodeIn=0, std::string strRejectReasonIn=\"\",\n-             bool corruptionIn=false) {\n-        chRejectCode = chRejectCodeIn;\n-        strRejectReason = strRejectReasonIn;\n-        corruptionPossible = corruptionIn;\n-        if (mode == MODE_ERROR)\n-            return ret;\n-        nDoS += level;\n-        mode = MODE_INVALID;\n-        return ret;\n-    }\n-    bool Invalid(bool ret = false,\n-                 unsigned char _chRejectCode=0, std::string _strRejectReason=\"\") {\n-        return DoS(0, ret, _chRejectCode, _strRejectReason);\n-    }\n-    bool Error(std::string strRejectReasonIn=\"\") {\n-        if (mode == MODE_VALID)\n-            strRejectReason = strRejectReasonIn;\n-        mode = MODE_ERROR;\n-        return false;\n-    }\n-    bool IsValid() const {\n-        return mode == MODE_VALID;\n-    }\n-    bool IsInvalid() const {\n-        return mode == MODE_INVALID;\n-    }\n-    bool IsError() const {\n-        return mode == MODE_ERROR;\n-    }\n-    bool IsInvalid(int &nDoSOut) const {\n-        if (IsInvalid()) {\n-            nDoSOut = nDoS;\n-            return true;\n-        }\n-        return false;\n-    }\n-    bool CorruptionPossible() const {\n-        return corruptionPossible;\n-    }\n-    unsigned char GetRejectCode() const { return chRejectCode; }\n-    std::string GetRejectReason() const { return strRejectReason; }\n-};\n-\n /** RAII wrapper for VerifyDB: Verify consistency of the block and coin databases */\n class CVerifyDB {\n public:"
      },
      {
        "sha": "eafc5ccd920bb8f2c40e601539823f5c98a876cd",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60e892ed533870eaa747be9d3fce94b1aa7bbc45/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60e892ed533870eaa747be9d3fce94b1aa7bbc45/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=60e892ed533870eaa747be9d3fce94b1aa7bbc45",
        "patch": "@@ -9,6 +9,7 @@\n #include \"primitives/transaction.h\"\n #include \"chain.h\"\n #include \"chainparams.h\"\n+#include \"consensus/validation.h\"\n #include \"hash.h\"\n #include \"main.h\"\n #include \"net.h\""
      },
      {
        "sha": "30585afa2935459d9374c00b7ce4dea22a619d4e",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60e892ed533870eaa747be9d3fce94b1aa7bbc45/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60e892ed533870eaa747be9d3fce94b1aa7bbc45/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=60e892ed533870eaa747be9d3fce94b1aa7bbc45",
        "patch": "@@ -6,6 +6,7 @@\n #include \"chain.h\"\n #include \"chainparams.h\"\n #include \"checkpoints.h\"\n+#include \"consensus/validation.h\"\n #include \"main.h\"\n #include \"primitives/transaction.h\"\n #include \"rpcserver.h\""
      },
      {
        "sha": "d61799b6c7e1a5017efc44dc917042bf7c99d3e2",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60e892ed533870eaa747be9d3fce94b1aa7bbc45/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60e892ed533870eaa747be9d3fce94b1aa7bbc45/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=60e892ed533870eaa747be9d3fce94b1aa7bbc45",
        "patch": "@@ -5,6 +5,7 @@\n \n #include \"amount.h\"\n #include \"chainparams.h\"\n+#include \"consensus/validation.h\"\n #include \"core_io.h\"\n #include \"init.h\"\n #include \"main.h\""
      },
      {
        "sha": "eb3b8e7e22f193984281638f1c5d851ed261d57f",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60e892ed533870eaa747be9d3fce94b1aa7bbc45/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60e892ed533870eaa747be9d3fce94b1aa7bbc45/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=60e892ed533870eaa747be9d3fce94b1aa7bbc45",
        "patch": "@@ -4,12 +4,13 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"base58.h\"\n-#include \"primitives/transaction.h\"\n+#include \"consensus/validation.h\"\n #include \"core_io.h\"\n #include \"init.h\"\n #include \"keystore.h\"\n #include \"main.h\"\n #include \"net.h\"\n+#include \"primitives/transaction.h\"\n #include \"rpcserver.h\"\n #include \"script/script.h\"\n #include \"script/sign.h\""
      },
      {
        "sha": "dac8813f8ef3a8cf56c7e94f18a64d2232bde311",
        "filename": "src/test/checkblock_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60e892ed533870eaa747be9d3fce94b1aa7bbc45/src/test/checkblock_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60e892ed533870eaa747be9d3fce94b1aa7bbc45/src/test/checkblock_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/checkblock_tests.cpp?ref=60e892ed533870eaa747be9d3fce94b1aa7bbc45",
        "patch": "@@ -7,6 +7,7 @@\n //\n \n #include \"clientversion.h\"\n+#include \"consensus/validation.h\"\n #include \"main.h\"\n #include \"primitives/block.h\"\n #include \"streams.h\""
      },
      {
        "sha": "44f1bda5c01e7352446060d5936e625b53884c64",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60e892ed533870eaa747be9d3fce94b1aa7bbc45/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60e892ed533870eaa747be9d3fce94b1aa7bbc45/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=60e892ed533870eaa747be9d3fce94b1aa7bbc45",
        "patch": "@@ -3,6 +3,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"checkpoints.h\"\n+#include \"consensus/validation.h\"\n #include \"main.h\"\n #include \"miner.h\"\n #include \"primitives/transaction.h\""
      },
      {
        "sha": "fcaed4d3e52012ba5c0854984ea473da196cd201",
        "filename": "src/test/sighash_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60e892ed533870eaa747be9d3fce94b1aa7bbc45/src/test/sighash_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60e892ed533870eaa747be9d3fce94b1aa7bbc45/src/test/sighash_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sighash_tests.cpp?ref=60e892ed533870eaa747be9d3fce94b1aa7bbc45",
        "patch": "@@ -2,6 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include \"consensus/validation.h\"\n #include \"data/sighash.json.h\"\n #include \"hash.h\"\n #include \"main.h\""
      },
      {
        "sha": "dee591ddc96b279ecb63d6afbbbaf223ab92a60b",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60e892ed533870eaa747be9d3fce94b1aa7bbc45/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60e892ed533870eaa747be9d3fce94b1aa7bbc45/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=60e892ed533870eaa747be9d3fce94b1aa7bbc45",
        "patch": "@@ -6,6 +6,7 @@\n #include \"data/tx_valid.json.h\"\n \n #include \"clientversion.h\"\n+#include \"consensus/validation.h\"\n #include \"core_io.h\"\n #include \"key.h\"\n #include \"keystore.h\""
      },
      {
        "sha": "60050fbaa4a86c230ca6ee664d329625f098a194",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60e892ed533870eaa747be9d3fce94b1aa7bbc45/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60e892ed533870eaa747be9d3fce94b1aa7bbc45/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=60e892ed533870eaa747be9d3fce94b1aa7bbc45",
        "patch": "@@ -7,6 +7,7 @@\n \n #include \"chain.h\"\n #include \"clientversion.h\"\n+#include \"consensus/validation.h\"\n #include \"main.h\"\n #include \"streams.h\"\n #include \"util.h\""
      },
      {
        "sha": "216db825ac3560470ae6dadadda1e7f408676e55",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60e892ed533870eaa747be9d3fce94b1aa7bbc45/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60e892ed533870eaa747be9d3fce94b1aa7bbc45/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=60e892ed533870eaa747be9d3fce94b1aa7bbc45",
        "patch": "@@ -8,6 +8,7 @@\n #include \"base58.h\"\n #include \"checkpoints.h\"\n #include \"coincontrol.h\"\n+#include \"consensus/validation.h\"\n #include \"main.h\"\n #include \"net.h\"\n #include \"script/script.h\""
      },
      {
        "sha": "3a93cd6e00f077a3c252d42c96d3607f8ebe60a6",
        "filename": "src/walletdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60e892ed533870eaa747be9d3fce94b1aa7bbc45/src/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60e892ed533870eaa747be9d3fce94b1aa7bbc45/src/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.cpp?ref=60e892ed533870eaa747be9d3fce94b1aa7bbc45",
        "patch": "@@ -6,6 +6,7 @@\n #include \"walletdb.h\"\n \n #include \"base58.h\"\n+#include \"consensus/validation.h\"\n #include \"main.h\"\n #include \"net.h\"\n #include \"protocol.h\""
      }
    ]
  },
  {
    "sha": "38b29bc3ca5fec7aa95bf2752e2cb8086f4bd981",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozOGIyOWJjM2NhNWZlYzdhYTk1YmYyNzUyZTJjYjgwODZmNGJkOTgx",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@jtimon.cc",
        "date": "2015-01-15T18:48:47Z"
      },
      "committer": {
        "name": "jtimon",
        "email": "jtimon@jtimon.cc",
        "date": "2015-01-20T20:12:13Z"
      },
      "message": "Consensus: Refactor: CheckTransaction() -> Consensus::CheckTx()\n\nDecouple it from util.h [bool error(char*)] and BOOST_FOREACH",
      "tree": {
        "sha": "b028c0d5ead4836b6b794e73113cad08bb888542",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b028c0d5ead4836b6b794e73113cad08bb888542"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/38b29bc3ca5fec7aa95bf2752e2cb8086f4bd981",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38b29bc3ca5fec7aa95bf2752e2cb8086f4bd981",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/38b29bc3ca5fec7aa95bf2752e2cb8086f4bd981",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38b29bc3ca5fec7aa95bf2752e2cb8086f4bd981/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "60e892ed533870eaa747be9d3fce94b1aa7bbc45",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/60e892ed533870eaa747be9d3fce94b1aa7bbc45",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/60e892ed533870eaa747be9d3fce94b1aa7bbc45"
      }
    ],
    "stats": {
      "total": 82,
      "additions": 37,
      "deletions": 45
    },
    "files": [
      {
        "sha": "2fbbf9284ba42d058ac8c9ea8f8aee1eee5f3c52",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 36,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38b29bc3ca5fec7aa95bf2752e2cb8086f4bd981/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38b29bc3ca5fec7aa95bf2752e2cb8086f4bd981/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=38b29bc3ca5fec7aa95bf2752e2cb8086f4bd981",
        "patch": "@@ -762,60 +762,48 @@ unsigned int GetP2SHSigOpCount(const CTransaction& tx, const CCoinsViewCache& in\n \n \n \n-bool CheckTransaction(const CTransaction& tx, CValidationState &state)\n+bool Consensus::CheckTx(const CTransaction& tx, CValidationState &state)\n {\n     // Basic checks that don't depend on any context\n     if (tx.vin.empty())\n-        return state.DoS(10, error(\"CheckTransaction() : vin empty\"),\n-                         REJECT_INVALID, \"bad-txns-vin-empty\");\n+        return state.DoS(10, false, REJECT_INVALID, \"bad-txns-vin-empty\");\n     if (tx.vout.empty())\n-        return state.DoS(10, error(\"CheckTransaction() : vout empty\"),\n-                         REJECT_INVALID, \"bad-txns-vout-empty\");\n+        return state.DoS(10, false, REJECT_INVALID, \"bad-txns-vout-empty\");\n     // Size limits\n     if (::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION) > MAX_BLOCK_SIZE)\n-        return state.DoS(100, error(\"CheckTransaction() : size limits failed\"),\n-                         REJECT_INVALID, \"bad-txns-oversize\");\n+        return state.DoS(100, false, REJECT_INVALID, \"bad-txns-oversize\");\n \n     // Check for negative or overflow output values\n     CAmount nValueOut = 0;\n-    BOOST_FOREACH(const CTxOut& txout, tx.vout)\n-    {\n-        if (txout.nValue < 0)\n-            return state.DoS(100, error(\"CheckTransaction() : txout.nValue negative\"),\n-                             REJECT_INVALID, \"bad-txns-vout-negative\");\n-        if (txout.nValue > MAX_MONEY)\n-            return state.DoS(100, error(\"CheckTransaction() : txout.nValue too high\"),\n-                             REJECT_INVALID, \"bad-txns-vout-toolarge\");\n-        nValueOut += txout.nValue;\n+    for (unsigned int i = 0; i < tx.vout.size(); i++) {\n+        if (tx.vout[i].nValue < 0)\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-vout-negative\");\n+        if (tx.vout[i].nValue > MAX_MONEY)\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-vout-toolarge\");\n+        nValueOut += tx.vout[i].nValue;\n         if (!MoneyRange(nValueOut))\n-            return state.DoS(100, error(\"CheckTransaction() : txout total out of range\"),\n-                             REJECT_INVALID, \"bad-txns-txouttotal-toolarge\");\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-txouttotal-toolarge\");\n     }\n \n     // Check for duplicate inputs\n-    set<COutPoint> vInOutPoints;\n-    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n-    {\n-        if (vInOutPoints.count(txin.prevout))\n-            return state.DoS(100, error(\"CheckTransaction() : duplicate inputs\"),\n-                             REJECT_INVALID, \"bad-txns-inputs-duplicate\");\n-        vInOutPoints.insert(txin.prevout);\n+    std::set<COutPoint> vInOutPoints;\n+    for (unsigned int i = 0; i < tx.vin.size(); i++) {\n+        if (vInOutPoints.count(tx.vin[i].prevout))\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-inputs-duplicate\");\n+        vInOutPoints.insert(tx.vin[i].prevout);\n     }\n \n     if (tx.IsCoinBase())\n     {\n         if (tx.vin[0].scriptSig.size() < 2 || tx.vin[0].scriptSig.size() > 100)\n-            return state.DoS(100, error(\"CheckTransaction() : coinbase script size\"),\n-                             REJECT_INVALID, \"bad-cb-length\");\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-cb-length\");\n     }\n     else\n     {\n-        BOOST_FOREACH(const CTxIn& txin, tx.vin)\n-            if (txin.prevout.IsNull())\n-                return state.DoS(10, error(\"CheckTransaction() : prevout is null\"),\n-                                 REJECT_INVALID, \"bad-txns-prevout-null\");\n+        for (unsigned int i = 0; i < tx.vin.size(); i++)\n+            if (tx.vin[i].prevout.IsNull())\n+                return state.DoS(10, false, REJECT_INVALID, \"bad-txns-prevout-null\");\n     }\n-\n     return true;\n }\n \n@@ -856,8 +844,8 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n     if (pfMissingInputs)\n         *pfMissingInputs = false;\n \n-    if (!CheckTransaction(tx, state))\n-        return error(\"AcceptToMemoryPool: CheckTransaction failed\");\n+    if (!Consensus::CheckTx(tx, state))\n+        return error(\"%s: Consensus::CheckTx(): \", __func__, state.GetRejectReason().c_str());\n \n     // Coinbase is only valid in a block, not as a loose transaction\n     if (tx.IsCoinBase())\n@@ -2512,8 +2500,8 @@ bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW, bo\n \n     // Check transactions\n     BOOST_FOREACH(const CTransaction& tx, block.vtx)\n-        if (!CheckTransaction(tx, state))\n-            return error(\"CheckBlock() : CheckTransaction failed\");\n+        if (!Consensus::CheckTx(tx, state))\n+            return error(\"%s: Consensus::CheckTx(): \", __func__, state.GetRejectReason().c_str());\n \n     unsigned int nSigOps = 0;\n     BOOST_FOREACH(const CTransaction& tx, block.vtx)"
      },
      {
        "sha": "50665eb0282e2ee860f75c502cea90a5c683dae2",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38b29bc3ca5fec7aa95bf2752e2cb8086f4bd981/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38b29bc3ca5fec7aa95bf2752e2cb8086f4bd981/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=38b29bc3ca5fec7aa95bf2752e2cb8086f4bd981",
        "patch": "@@ -254,7 +254,9 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsVi\n void UpdateCoins(const CTransaction& tx, CValidationState &state, CCoinsViewCache &inputs, int nHeight);\n \n /** Context-independent validity checks */\n-bool CheckTransaction(const CTransaction& tx, CValidationState& state);\n+namespace Consensus {\n+    bool CheckTx(const CTransaction& tx, CValidationState &state);\n+}\n \n /** Check for standard transaction types\n  * @return True if all outputs (scriptPubKeys) use only standard transaction forms"
      },
      {
        "sha": "d3330623b3196e368e8c4cea9c02901cbebb913f",
        "filename": "src/test/data/tx_invalid.json",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38b29bc3ca5fec7aa95bf2752e2cb8086f4bd981/src/test/data/tx_invalid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38b29bc3ca5fec7aa95bf2752e2cb8086f4bd981/src/test/data/tx_invalid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/tx_invalid.json?ref=38b29bc3ca5fec7aa95bf2752e2cb8086f4bd981",
        "patch": "@@ -23,7 +23,7 @@\n [[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"HASH160 0x14 0x7a052c840ba73af26755de42cf01cc9e0a49fef0 EQUAL\"]],\n \"010000000100010000000000000000000000000000000000000000000000000000000000000000000009085768617420697320ffffffff010000000000000000015100000000\", \"P2SH\"],\n \n-[\"Tests for CheckTransaction()\"],\n+[\"Tests for Consensus::CheckTx()\"],\n [\"No inputs\"],\n [[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"HASH160 0x14 0x7a052c840ba73af26755de42cf01cc9e0a49fef0 EQUAL\"]],\n \"0100000000010000000000000000015100000000\", \"P2SH\"],"
      },
      {
        "sha": "101f0fd942df76e25ddf0ff4eb8838fe041274af",
        "filename": "src/test/data/tx_valid.json",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38b29bc3ca5fec7aa95bf2752e2cb8086f4bd981/src/test/data/tx_valid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38b29bc3ca5fec7aa95bf2752e2cb8086f4bd981/src/test/data/tx_valid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/tx_valid.json?ref=38b29bc3ca5fec7aa95bf2752e2cb8086f4bd981",
        "patch": "@@ -64,7 +64,7 @@\n [[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"HASH160 0x14 0x8febbed40483661de6958d957412f82deed8e2f7 EQUAL\"]],\n \"01000000010001000000000000000000000000000000000000000000000000000000000000000000006e493046022100c66c9cdf4c43609586d15424c54707156e316d88b0a1534c9e6b0d4f311406310221009c0fe51dbc9c4ab7cc25d3fdbeccf6679fe6827f08edf2b4a9f16ee3eb0e438a0123210338e8034509af564c62644c07691942e0c056752008a173c89f60ab2a88ac2ebfacffffffff010000000000000000015100000000\", \"P2SH\"],\n \n-[\"Tests for CheckTransaction()\"],\n+[\"Tests for Consensus::CheckTx()\"],\n [\"MAX_MONEY output\"],\n [[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"HASH160 0x14 0x32afac281462b822adbec5094b8d4d337dd5bd6a EQUAL\"]],\n \"01000000010001000000000000000000000000000000000000000000000000000000000000000000006e493046022100e1eadba00d9296c743cb6ecc703fd9ddc9b3cd12906176a226ae4c18d6b00796022100a71aef7d2874deff681ba6080f1b278bac7bb99c61b08a85f4311970ffe7f63f012321030c0588dc44d92bdcbf8e72093466766fdc265ead8db64517b0c542275b70fffbacffffffff010040075af0750700015100000000\", \"P2SH\"],"
      },
      {
        "sha": "40c117bf27e21ccae8c958eec0e1d8be6637569c",
        "filename": "src/test/sighash_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38b29bc3ca5fec7aa95bf2752e2cb8086f4bd981/src/test/sighash_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38b29bc3ca5fec7aa95bf2752e2cb8086f4bd981/src/test/sighash_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sighash_tests.cpp?ref=38b29bc3ca5fec7aa95bf2752e2cb8086f4bd981",
        "patch": "@@ -204,7 +204,7 @@ BOOST_AUTO_TEST_CASE(sighash_from_data)\n           stream >> tx;\n \n           CValidationState state;\n-          BOOST_CHECK_MESSAGE(CheckTransaction(tx, state), strTest);\n+          BOOST_CHECK_MESSAGE(Consensus::CheckTx(tx, state), strTest);\n           BOOST_CHECK(state.IsValid());\n \n           std::vector<unsigned char> raw = ParseHex(raw_script);"
      },
      {
        "sha": "2b488a8d3a06bed0a035ffa7e385c7667fc85068",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38b29bc3ca5fec7aa95bf2752e2cb8086f4bd981/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38b29bc3ca5fec7aa95bf2752e2cb8086f4bd981/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=38b29bc3ca5fec7aa95bf2752e2cb8086f4bd981",
        "patch": "@@ -139,7 +139,7 @@ BOOST_AUTO_TEST_CASE(tx_valid)\n             stream >> tx;\n \n             CValidationState state;\n-            BOOST_CHECK_MESSAGE(CheckTransaction(tx, state), strTest);\n+            BOOST_CHECK_MESSAGE(Consensus::CheckTx(tx, state), strTest);\n             BOOST_CHECK(state.IsValid());\n \n             for (unsigned int i = 0; i < tx.vin.size(); i++)\n@@ -215,7 +215,7 @@ BOOST_AUTO_TEST_CASE(tx_invalid)\n             stream >> tx;\n \n             CValidationState state;\n-            fValid = CheckTransaction(tx, state) && state.IsValid();\n+            fValid = Consensus::CheckTx(tx, state) && state.IsValid();\n \n             for (unsigned int i = 0; i < tx.vin.size() && fValid; i++)\n             {\n@@ -244,11 +244,11 @@ BOOST_AUTO_TEST_CASE(basic_transaction_tests)\n     CMutableTransaction tx;\n     stream >> tx;\n     CValidationState state;\n-    BOOST_CHECK_MESSAGE(CheckTransaction(tx, state) && state.IsValid(), \"Simple deserialized transaction should be valid.\");\n+    BOOST_CHECK_MESSAGE(Consensus::CheckTx(tx, state) && state.IsValid(), \"Simple deserialized transaction should be valid.\");\n \n     // Check that duplicate txins fail\n     tx.vin.push_back(tx.vin[0]);\n-    BOOST_CHECK_MESSAGE(!CheckTransaction(tx, state) || !state.IsValid(), \"Transaction with duplicate txins should be invalid.\");\n+    BOOST_CHECK_MESSAGE(!Consensus::CheckTx(tx, state) || !state.IsValid(), \"Transaction with duplicate txins should be invalid.\");\n }\n \n //"
      },
      {
        "sha": "64e54b24e5859f71333ead9360d4c8385c15209a",
        "filename": "src/walletdb.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38b29bc3ca5fec7aa95bf2752e2cb8086f4bd981/src/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38b29bc3ca5fec7aa95bf2752e2cb8086f4bd981/src/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.cpp?ref=38b29bc3ca5fec7aa95bf2752e2cb8086f4bd981",
        "patch": "@@ -372,8 +372,10 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             CWalletTx wtx;\n             ssValue >> wtx;\n             CValidationState state;\n-            if (!(CheckTransaction(wtx, state) && (wtx.GetHash() == hash) && state.IsValid()))\n+            if (!(Consensus::CheckTx(wtx, state) && (wtx.GetHash() == hash) && state.IsValid())) {\n+                strErr = strprintf(\"%s: Consensus::CheckTx(): \", __func__, state.GetRejectReason().c_str());\n                 return false;\n+            }\n \n             // Undo serialize changes in 31600\n             if (31404 <= wtx.fTimeReceivedIsTxTime && wtx.fTimeReceivedIsTxTime <= 31703)"
      }
    ]
  },
  {
    "sha": "4eaa4f2a92af75cdd2b29bc54334f6c89035cb86",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZWFhNGYyYTkyYWY3NWNkZDJiMjliYzU0MzM0ZjZjODkwMzVjYjg2",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@jtimon.cc",
        "date": "2015-01-15T19:21:53Z"
      },
      "committer": {
        "name": "jtimon",
        "email": "jtimon@jtimon.cc",
        "date": "2015-01-20T20:12:13Z"
      },
      "message": "Consensus: SQUASHME: MOVEONLY: Consensus::CheckTx() from main.o to consensus/consensus.o",
      "tree": {
        "sha": "a8e5007584790f4faab30d908b6e38b855346811",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a8e5007584790f4faab30d908b6e38b855346811"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4eaa4f2a92af75cdd2b29bc54334f6c89035cb86",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4eaa4f2a92af75cdd2b29bc54334f6c89035cb86",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4eaa4f2a92af75cdd2b29bc54334f6c89035cb86",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4eaa4f2a92af75cdd2b29bc54334f6c89035cb86/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "38b29bc3ca5fec7aa95bf2752e2cb8086f4bd981",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38b29bc3ca5fec7aa95bf2752e2cb8086f4bd981",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/38b29bc3ca5fec7aa95bf2752e2cb8086f4bd981"
      }
    ],
    "stats": {
      "total": 143,
      "additions": 84,
      "deletions": 59
    },
    "files": [
      {
        "sha": "9e93cc986ed77b91481d2057e7e33caad0849d19",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4eaa4f2a92af75cdd2b29bc54334f6c89035cb86/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4eaa4f2a92af75cdd2b29bc54334f6c89035cb86/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=4eaa4f2a92af75cdd2b29bc54334f6c89035cb86",
        "patch": "@@ -88,6 +88,7 @@ BITCOIN_CORE_H = \\\n   coins.h \\\n   compat.h \\\n   compressor.h \\\n+  consensus/consensus.h \\\n   consensus/validation.h \\\n   core_io.h \\\n   crypter.h \\\n@@ -242,6 +243,7 @@ libbitcoin_common_a_SOURCES = \\\n   chainparams.cpp \\\n   coins.cpp \\\n   compressor.cpp \\\n+  consensus/consensus.cpp \\\n   primitives/block.cpp \\\n   primitives/transaction.cpp \\\n   core_read.cpp \\"
      },
      {
        "sha": "ccaefd0e574b0be00481072aa54f5ab7882f8c02",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4eaa4f2a92af75cdd2b29bc54334f6c89035cb86/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4eaa4f2a92af75cdd2b29bc54334f6c89035cb86/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=4eaa4f2a92af75cdd2b29bc54334f6c89035cb86",
        "patch": "@@ -4,7 +4,7 @@\n \n #include \"base58.h\"\n #include \"clientversion.h\"\n-#include \"primitives/block.h\" // for MAX_BLOCK_SIZE\n+#include \"consensus/consensus.h\" // for MAX_BLOCK_SIZE\n #include \"primitives/transaction.h\"\n #include \"core_io.h\"\n #include \"coins.h\""
      },
      {
        "sha": "b38ff6d16437adb28181921c6d4469e30c3c1fe7",
        "filename": "src/consensus/consensus.cpp",
        "status": "added",
        "additions": 55,
        "deletions": 0,
        "changes": 55,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4eaa4f2a92af75cdd2b29bc54334f6c89035cb86/src/consensus/consensus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4eaa4f2a92af75cdd2b29bc54334f6c89035cb86/src/consensus/consensus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.cpp?ref=4eaa4f2a92af75cdd2b29bc54334f6c89035cb86",
        "patch": "@@ -0,0 +1,55 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"consensus/consensus.h\"\n+\n+#include \"consensus/validation.h\"\n+#include \"primitives/transaction.h\"\n+#include \"version.h\"\n+\n+bool Consensus::CheckTx(const CTransaction& tx, CValidationState &state)\n+{\n+    // Basic checks that don't depend on any context\n+    if (tx.vin.empty())\n+        return state.DoS(10, false, REJECT_INVALID, \"bad-txns-vin-empty\");\n+    if (tx.vout.empty())\n+        return state.DoS(10, false, REJECT_INVALID, \"bad-txns-vout-empty\");\n+    // Size limits\n+    if (::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION) > MAX_BLOCK_SIZE)\n+        return state.DoS(100, false, REJECT_INVALID, \"bad-txns-oversize\");\n+\n+    // Check for negative or overflow output values\n+    CAmount nValueOut = 0;\n+    for (unsigned int i = 0; i < tx.vout.size(); i++) {\n+        if (tx.vout[i].nValue < 0)\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-vout-negative\");\n+        if (tx.vout[i].nValue > MAX_MONEY)\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-vout-toolarge\");\n+        nValueOut += tx.vout[i].nValue;\n+        if (!MoneyRange(nValueOut))\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-txouttotal-toolarge\");\n+    }\n+\n+    // Check for duplicate inputs\n+    std::set<COutPoint> vInOutPoints;\n+    for (unsigned int i = 0; i < tx.vin.size(); i++) {\n+        if (vInOutPoints.count(tx.vin[i].prevout))\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-inputs-duplicate\");\n+        vInOutPoints.insert(tx.vin[i].prevout);\n+    }\n+\n+    if (tx.IsCoinBase())\n+    {\n+        if (tx.vin[0].scriptSig.size() < 2 || tx.vin[0].scriptSig.size() > 100)\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-cb-length\");\n+    }\n+    else\n+    {\n+        for (unsigned int i = 0; i < tx.vin.size(); i++)\n+            if (tx.vin[i].prevout.IsNull())\n+                return state.DoS(10, false, REJECT_INVALID, \"bad-txns-prevout-null\");\n+    }\n+    return true;\n+}"
      },
      {
        "sha": "6073a6f0cee1e308943b1050087648c3c4bc752d",
        "filename": "src/consensus/consensus.h",
        "status": "added",
        "additions": 21,
        "deletions": 0,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4eaa4f2a92af75cdd2b29bc54334f6c89035cb86/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4eaa4f2a92af75cdd2b29bc54334f6c89035cb86/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=4eaa4f2a92af75cdd2b29bc54334f6c89035cb86",
        "patch": "@@ -0,0 +1,21 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CONSENSUS_CONSENSUS_H\n+#define BITCOIN_CONSENSUS_CONSENSUS_H\n+\n+class CTransaction;\n+class CValidationState;\n+\n+/** The maximum allowed size for a serialized block, in bytes (network rule) */\n+static const unsigned int MAX_BLOCK_SIZE = 1000000;\n+\n+namespace Consensus {\n+\n+bool CheckTx(const CTransaction& tx, CValidationState &state);\n+\n+} // namespace Consensus\n+\n+#endif // BITCOIN_CONSENSUS_CONSENSUS_H"
      },
      {
        "sha": "575d1e9384770f935a90ca1f9d0f12da46568942",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 52,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4eaa4f2a92af75cdd2b29bc54334f6c89035cb86/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4eaa4f2a92af75cdd2b29bc54334f6c89035cb86/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=4eaa4f2a92af75cdd2b29bc54334f6c89035cb86",
        "patch": "@@ -755,58 +755,6 @@ unsigned int GetP2SHSigOpCount(const CTransaction& tx, const CCoinsViewCache& in\n     return nSigOps;\n }\n \n-\n-\n-\n-\n-\n-\n-\n-bool Consensus::CheckTx(const CTransaction& tx, CValidationState &state)\n-{\n-    // Basic checks that don't depend on any context\n-    if (tx.vin.empty())\n-        return state.DoS(10, false, REJECT_INVALID, \"bad-txns-vin-empty\");\n-    if (tx.vout.empty())\n-        return state.DoS(10, false, REJECT_INVALID, \"bad-txns-vout-empty\");\n-    // Size limits\n-    if (::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION) > MAX_BLOCK_SIZE)\n-        return state.DoS(100, false, REJECT_INVALID, \"bad-txns-oversize\");\n-\n-    // Check for negative or overflow output values\n-    CAmount nValueOut = 0;\n-    for (unsigned int i = 0; i < tx.vout.size(); i++) {\n-        if (tx.vout[i].nValue < 0)\n-            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-vout-negative\");\n-        if (tx.vout[i].nValue > MAX_MONEY)\n-            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-vout-toolarge\");\n-        nValueOut += tx.vout[i].nValue;\n-        if (!MoneyRange(nValueOut))\n-            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-txouttotal-toolarge\");\n-    }\n-\n-    // Check for duplicate inputs\n-    std::set<COutPoint> vInOutPoints;\n-    for (unsigned int i = 0; i < tx.vin.size(); i++) {\n-        if (vInOutPoints.count(tx.vin[i].prevout))\n-            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-inputs-duplicate\");\n-        vInOutPoints.insert(tx.vin[i].prevout);\n-    }\n-\n-    if (tx.IsCoinBase())\n-    {\n-        if (tx.vin[0].scriptSig.size() < 2 || tx.vin[0].scriptSig.size() > 100)\n-            return state.DoS(100, false, REJECT_INVALID, \"bad-cb-length\");\n-    }\n-    else\n-    {\n-        for (unsigned int i = 0; i < tx.vin.size(); i++)\n-            if (tx.vin[i].prevout.IsNull())\n-                return state.DoS(10, false, REJECT_INVALID, \"bad-txns-prevout-null\");\n-    }\n-    return true;\n-}\n-\n CAmount GetMinRelayFee(const CTransaction& tx, unsigned int nBytes, bool fAllowFree)\n {\n     {"
      },
      {
        "sha": "80b26449d6a8fbf35e8b9a1055c86a638a79585a",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4eaa4f2a92af75cdd2b29bc54334f6c89035cb86/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4eaa4f2a92af75cdd2b29bc54334f6c89035cb86/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=4eaa4f2a92af75cdd2b29bc54334f6c89035cb86",
        "patch": "@@ -12,6 +12,7 @@\n \n #include \"chain.h\"\n #include \"coins.h\"\n+#include \"consensus/consensus.h\"\n #include \"net.h\"\n #include \"primitives/block.h\"\n #include \"script/script_error.h\""
      },
      {
        "sha": "12f4df8651bd710ee3286c7b980b687e24ad2f68",
        "filename": "src/merkleblock.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4eaa4f2a92af75cdd2b29bc54334f6c89035cb86/src/merkleblock.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4eaa4f2a92af75cdd2b29bc54334f6c89035cb86/src/merkleblock.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/merkleblock.cpp?ref=4eaa4f2a92af75cdd2b29bc54334f6c89035cb86",
        "patch": "@@ -5,8 +5,8 @@\n \n #include \"merkleblock.h\"\n \n+#include \"consensus/consensus.h\" // for MAX_BLOCK_SIZE\n #include \"hash.h\"\n-#include \"primitives/block.h\" // for MAX_BLOCK_SIZE\n #include \"utilstrencodings.h\"\n \n using namespace std;"
      },
      {
        "sha": "22dc90de77caf415454c28a76b450a4312e18f34",
        "filename": "src/primitives/block.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4eaa4f2a92af75cdd2b29bc54334f6c89035cb86/src/primitives/block.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4eaa4f2a92af75cdd2b29bc54334f6c89035cb86/src/primitives/block.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.h?ref=4eaa4f2a92af75cdd2b29bc54334f6c89035cb86",
        "patch": "@@ -10,9 +10,6 @@\n #include \"serialize.h\"\n #include \"uint256.h\"\n \n-/** The maximum allowed size for a serialized block, in bytes (network rule) */\n-static const unsigned int MAX_BLOCK_SIZE = 1000000;\n-\n /** Nodes collect new transactions into a block, hash them into a hash tree,\n  * and scan through nonce values to make the block's hash satisfy proof-of-work\n  * requirements.  When they solve the proof-of-work, they broadcast the block"
      },
      {
        "sha": "82f02d5905bfa6a361bfb2871adf8ca12f5fd7f3",
        "filename": "src/test/sighash_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4eaa4f2a92af75cdd2b29bc54334f6c89035cb86/src/test/sighash_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4eaa4f2a92af75cdd2b29bc54334f6c89035cb86/src/test/sighash_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sighash_tests.cpp?ref=4eaa4f2a92af75cdd2b29bc54334f6c89035cb86",
        "patch": "@@ -2,10 +2,10 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include \"consensus/consensus.h\"\n #include \"consensus/validation.h\"\n #include \"data/sighash.json.h\"\n #include \"hash.h\"\n-#include \"main.h\"\n #include \"primitives/transaction.h\"\n #include \"random.h\"\n #include \"script/interpreter.h\""
      },
      {
        "sha": "d5de5a91b2b29c1d71c70c85f2edb05a78f9bcee",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4eaa4f2a92af75cdd2b29bc54334f6c89035cb86/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4eaa4f2a92af75cdd2b29bc54334f6c89035cb86/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=4eaa4f2a92af75cdd2b29bc54334f6c89035cb86",
        "patch": "@@ -6,6 +6,7 @@\n #include \"data/tx_valid.json.h\"\n \n #include \"clientversion.h\"\n+#include \"consensus/consensus.h\"\n #include \"consensus/validation.h\"\n #include \"core_io.h\"\n #include \"key.h\""
      },
      {
        "sha": "bcebe5467ea1154708af0b9cef8415145d662e24",
        "filename": "src/walletdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4eaa4f2a92af75cdd2b29bc54334f6c89035cb86/src/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4eaa4f2a92af75cdd2b29bc54334f6c89035cb86/src/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.cpp?ref=4eaa4f2a92af75cdd2b29bc54334f6c89035cb86",
        "patch": "@@ -6,8 +6,8 @@\n #include \"walletdb.h\"\n \n #include \"base58.h\"\n+#include \"consensus/consensus.h\"\n #include \"consensus/validation.h\"\n-#include \"main.h\"\n #include \"net.h\"\n #include \"protocol.h\"\n #include \"serialize.h\""
      }
    ]
  },
  {
    "sha": "05c77c9f536633f516ac25f3c32254b45b82cd9d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNWM3N2M5ZjUzNjYzM2Y1MTZhYzI1ZjNjMzIyNTRiNDViODJjZDlk",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@jtimon.cc",
        "date": "2015-01-16T12:36:36Z"
      },
      "committer": {
        "name": "jtimon",
        "email": "jtimon@jtimon.cc",
        "date": "2015-01-20T20:12:13Z"
      },
      "message": "Consensus: SQUASHME: Small improvements to Consensus::CheckTx()",
      "tree": {
        "sha": "c86a1ff8b43022a1653f8852442c09bf25831e3b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c86a1ff8b43022a1653f8852442c09bf25831e3b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/05c77c9f536633f516ac25f3c32254b45b82cd9d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/05c77c9f536633f516ac25f3c32254b45b82cd9d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/05c77c9f536633f516ac25f3c32254b45b82cd9d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/05c77c9f536633f516ac25f3c32254b45b82cd9d/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4eaa4f2a92af75cdd2b29bc54334f6c89035cb86",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4eaa4f2a92af75cdd2b29bc54334f6c89035cb86",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4eaa4f2a92af75cdd2b29bc54334f6c89035cb86"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 3,
      "deletions": 5
    },
    "files": [
      {
        "sha": "44fd74b05fb45d3b54445c3c02f19c7a47ea5aae",
        "filename": "src/consensus/consensus.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05c77c9f536633f516ac25f3c32254b45b82cd9d/src/consensus/consensus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05c77c9f536633f516ac25f3c32254b45b82cd9d/src/consensus/consensus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.cpp?ref=05c77c9f536633f516ac25f3c32254b45b82cd9d",
        "patch": "@@ -23,12 +23,10 @@ bool Consensus::CheckTx(const CTransaction& tx, CValidationState &state)\n     // Check for negative or overflow output values\n     CAmount nValueOut = 0;\n     for (unsigned int i = 0; i < tx.vout.size(); i++) {\n-        if (tx.vout[i].nValue < 0)\n-            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-vout-negative\");\n-        if (tx.vout[i].nValue > MAX_MONEY)\n-            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-vout-toolarge\");\n+        if (!MoneyRange(tx.vout[i].nValue))\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-vout-outofrange\");\n         nValueOut += tx.vout[i].nValue;\n-        if (!MoneyRange(nValueOut))\n+        if (nValueOut > MAX_MONEY)\n             return state.DoS(100, false, REJECT_INVALID, \"bad-txns-txouttotal-toolarge\");\n     }\n "
      }
    ]
  },
  {
    "sha": "2e9627c9f2c0765068567e56d0347115b65f876c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZTk2MjdjOWYyYzA3NjUwNjg1NjdlNTZkMDM0NzExNWI2NWY4NzZj",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@jtimon.cc",
        "date": "2015-01-20T17:22:42Z"
      },
      "committer": {
        "name": "jtimon",
        "email": "jtimon@jtimon.cc",
        "date": "2015-01-20T20:35:23Z"
      },
      "message": "Policy: Refactor: implement more generic versions of GetArgs() functions in utilstrencodings.h",
      "tree": {
        "sha": "f8fb8c4bc52da54842fc494bac48ddc9b19211c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f8fb8c4bc52da54842fc494bac48ddc9b19211c1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2e9627c9f2c0765068567e56d0347115b65f876c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2e9627c9f2c0765068567e56d0347115b65f876c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2e9627c9f2c0765068567e56d0347115b65f876c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2e9627c9f2c0765068567e56d0347115b65f876c/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "05c77c9f536633f516ac25f3c32254b45b82cd9d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/05c77c9f536633f516ac25f3c32254b45b82cd9d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/05c77c9f536633f516ac25f3c32254b45b82cd9d"
      }
    ],
    "stats": {
      "total": 45,
      "additions": 32,
      "deletions": 13
    },
    "files": [
      {
        "sha": "e7dddc287cd735e430b501cee706f681b1ad9b25",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 13,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2e9627c9f2c0765068567e56d0347115b65f876c/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2e9627c9f2c0765068567e56d0347115b65f876c/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=2e9627c9f2c0765068567e56d0347115b65f876c",
        "patch": "@@ -307,27 +307,17 @@ void ParseParameters(int argc, const char* const argv[])\n \n std::string GetArg(const std::string& strArg, const std::string& strDefault)\n {\n-    if (mapArgs.count(strArg))\n-        return mapArgs[strArg];\n-    return strDefault;\n+    return GetArg(strArg, strDefault, mapArgs);\n }\n \n int64_t GetArg(const std::string& strArg, int64_t nDefault)\n {\n-    if (mapArgs.count(strArg))\n-        return atoi64(mapArgs[strArg]);\n-    return nDefault;\n+    return GetArg(strArg, nDefault, mapArgs);\n }\n \n bool GetBoolArg(const std::string& strArg, bool fDefault)\n {\n-    if (mapArgs.count(strArg))\n-    {\n-        if (mapArgs[strArg].empty())\n-            return true;\n-        return (atoi(mapArgs[strArg]) != 0);\n-    }\n-    return fDefault;\n+    return GetBoolArg(strArg, fDefault, mapArgs);\n }\n \n bool SoftSetArg(const std::string& strArg, const std::string& strValue)"
      },
      {
        "sha": "0f3a80b627eeeebcb1b6e7fea67ab9e858c197e1",
        "filename": "src/utilstrencodings.h",
        "status": "modified",
        "additions": 29,
        "deletions": 0,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2e9627c9f2c0765068567e56d0347115b65f876c/src/utilstrencodings.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2e9627c9f2c0765068567e56d0347115b65f876c/src/utilstrencodings.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utilstrencodings.h?ref=2e9627c9f2c0765068567e56d0347115b65f876c",
        "patch": "@@ -9,6 +9,7 @@\n #ifndef BITCOIN_UTILSTRENCODINGS_H\n #define BITCOIN_UTILSTRENCODINGS_H\n \n+#include <map>\n #include <stdint.h>\n #include <string>\n #include <vector>\n@@ -95,4 +96,32 @@ bool TimingResistantEqual(const T& a, const T& b)\n     return accumulator == 0;\n }\n \n+inline int64_t GetArg(const std::string& strArg, int64_t nDefault, const std::map<std::string, std::string>& mapArgs)\n+{\n+    std::map<std::string, std::string>::const_iterator it = mapArgs.find(strArg);\n+    if (it != mapArgs.end())\n+        return atoi64(it->second);\n+    return nDefault;\n+}\n+\n+inline std::string GetArg(const std::string& strArg, const std::string strDefault, const std::map<std::string, std::string>& mapArgs)\n+{\n+    std::map<std::string, std::string>::const_iterator it = mapArgs.find(strArg);\n+    if (it != mapArgs.end())\n+        return it->second;\n+    return strDefault;\n+}\n+\n+inline bool GetBoolArg(const std::string& strArg, bool fDefault, const std::map<std::string, std::string>& mapArgs)\n+{\n+    std::map<std::string, std::string>::const_iterator it = mapArgs.find(strArg);\n+    if (it != mapArgs.end())\n+    {\n+        if (it->second.empty())\n+            return true;\n+        return (atoi(it->second) != 0);\n+    }\n+    return fDefault;\n+}\n+\n #endif // BITCOIN_UTILSTRENCODINGS_H"
      }
    ]
  },
  {
    "sha": "8118d9a316153a0fda43a30ac88668c39d55795d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MTE4ZDlhMzE2MTUzYTBmZGE0M2EzMGFjODg2NjhjMzlkNTU3OTVk",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@jtimon.cc",
        "date": "2015-01-20T16:33:54Z"
      },
      "committer": {
        "name": "jtimon",
        "email": "jtimon@jtimon.cc",
        "date": "2015-01-20T21:30:00Z"
      },
      "message": "Policy: Create CPolicy interface and CStandardPolicy class implementing it",
      "tree": {
        "sha": "80dd3e19bc61102136209f98977a16f4a5b343e6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/80dd3e19bc61102136209f98977a16f4a5b343e6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8118d9a316153a0fda43a30ac88668c39d55795d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8118d9a316153a0fda43a30ac88668c39d55795d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8118d9a316153a0fda43a30ac88668c39d55795d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8118d9a316153a0fda43a30ac88668c39d55795d/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2e9627c9f2c0765068567e56d0347115b65f876c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2e9627c9f2c0765068567e56d0347115b65f876c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2e9627c9f2c0765068567e56d0347115b65f876c"
      }
    ],
    "stats": {
      "total": 113,
      "additions": 113,
      "deletions": 0
    },
    "files": [
      {
        "sha": "94afa3880aefa413dd65e1973f4ad741a6cb1b3c",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8118d9a316153a0fda43a30ac88668c39d55795d/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8118d9a316153a0fda43a30ac88668c39d55795d/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=8118d9a316153a0fda43a30ac88668c39d55795d",
        "patch": "@@ -108,6 +108,7 @@ BITCOIN_CORE_H = \\\n   netbase.h \\\n   net.h \\\n   noui.h \\\n+  policy.h \\\n   pow.h \\\n   primitives/block.h \\\n   primitives/transaction.h \\\n@@ -177,6 +178,7 @@ libbitcoin_server_a_SOURCES = \\\n   miner.cpp \\\n   net.cpp \\\n   noui.cpp \\\n+  policy.cpp \\\n   pow.cpp \\\n   rest.cpp \\\n   rpcblockchain.cpp \\"
      },
      {
        "sha": "469e09bf9ad3939ad7ef53c57310840a4e58351b",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8118d9a316153a0fda43a30ac88668c39d55795d/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8118d9a316153a0fda43a30ac88668c39d55795d/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=8118d9a316153a0fda43a30ac88668c39d55795d",
        "patch": "@@ -19,6 +19,7 @@\n #include \"main.h\"\n #include \"miner.h\"\n #include \"net.h\"\n+#include \"policy.h\"\n #include \"rpcserver.h\"\n #include \"script/standard.h\"\n #include \"txdb.h\"\n@@ -366,6 +367,9 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += \"  -shrinkdebugfile       \" + _(\"Shrink debug.log file on client startup (default: 1 when no -debug)\") + \"\\n\";\n     strUsage += \"  -testnet               \" + _(\"Use the test network\") + \"\\n\";\n \n+    strUsage += \"\\n\" + _(\"Policy options:\") + \"\\n\";\n+    strUsage += GetPolicyUsageStr();\n+\n     strUsage += \"\\n\" + _(\"Node relay options:\") + \"\\n\";\n     strUsage += \"  -datacarrier           \" + strprintf(_(\"Relay and mine data carrier transactions (default: %u)\"), 1) + \"\\n\";\n     strUsage += \"  -datacarriersize       \" + strprintf(_(\"Maximum size of data in data carrier transactions we relay and mine (default: %u)\"), MAX_OP_RETURN_RELAY) + \"\\n\";\n@@ -692,6 +696,13 @@ bool AppInit2(boost::thread_group& threadGroup)\n     const char* pszP2SH = \"/P2SH/\";\n     COINBASE_FLAGS << std::vector<unsigned char>(pszP2SH, pszP2SH+strlen(pszP2SH));\n \n+    // Init Policy\n+    try {\n+        InitPolicyFromArgs(mapArgs);\n+    } catch(std::exception &e) {\n+        return InitError(strprintf(_(\"Error while initializing policy: %s\"), e.what()));\n+    }\n+\n     // Fee-per-kilobyte amount considered the same as \"free\"\n     // If you are mining, be careful setting this:\n     // if you set it to zero then"
      },
      {
        "sha": "8745a4c076e0052a0c9e9f32bbb27d6971b72d4d",
        "filename": "src/policy.cpp",
        "status": "added",
        "additions": 62,
        "deletions": 0,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8118d9a316153a0fda43a30ac88668c39d55795d/src/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8118d9a316153a0fda43a30ac88668c39d55795d/src/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy.cpp?ref=8118d9a316153a0fda43a30ac88668c39d55795d",
        "patch": "@@ -0,0 +1,62 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+// NOTE: This file is intended to be customised by the end user, and includes only local node policy logic\n+\n+#include \"policy.h\"\n+\n+#include \"tinyformat.h\"\n+#include \"ui_interface.h\"\n+#include \"utilstrencodings.h\"\n+\n+/** Declaration of Standard Policy implementing CPolicy */\n+class CStandardPolicy : public CPolicy\n+{\n+public:\n+    virtual void InitFromArgs(const std::map<std::string, std::string>&);\n+};\n+\n+/** Global variables and their interfaces */\n+\n+static CStandardPolicy standardPolicy;\n+\n+static CPolicy* pCurrentPolicy = 0;\n+\n+CPolicy& Policy(std::string policy)\n+{\n+    if (policy == \"standard\")\n+        return standardPolicy;\n+    throw std::runtime_error(strprintf(_(\"Unknown policy '%s'\"), policy));\n+}\n+\n+void SelectPolicy(std::string policy)\n+{\n+    pCurrentPolicy = &Policy(policy);\n+}\n+\n+const CPolicy& Policy()\n+{\n+    assert(pCurrentPolicy);\n+    return *pCurrentPolicy;\n+}\n+\n+std::string GetPolicyUsageStr()\n+{\n+    std::string strUsage = \"\";\n+    strUsage += \"  -policy                \" + strprintf(_(\"Select a specific type of policy (default: %s)\"), \"standard\") + \"\\n\";\n+    return strUsage;\n+}\n+\n+void InitPolicyFromArgs(const std::map<std::string, std::string>& mapArgs)\n+{\n+    SelectPolicy(GetArg(\"-policy\", \"standard\", mapArgs));\n+    pCurrentPolicy->InitFromArgs(mapArgs);\n+}\n+\n+/** CStandardPolicy implementation */\n+\n+void CStandardPolicy::InitFromArgs(const std::map<std::string, std::string>& mapArgs)\n+{\n+}"
      },
      {
        "sha": "52875a903d165694dd5a1e404c65fdcd984d5ace",
        "filename": "src/policy.h",
        "status": "added",
        "additions": 33,
        "deletions": 0,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8118d9a316153a0fda43a30ac88668c39d55795d/src/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8118d9a316153a0fda43a30ac88668c39d55795d/src/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy.h?ref=8118d9a316153a0fda43a30ac88668c39d55795d",
        "patch": "@@ -0,0 +1,33 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_H\n+#define BITCOIN_POLICY_H\n+\n+#include <map>\n+#include <string>\n+\n+/** Abstract interface for Policy */\n+class CPolicy\n+{\n+public:\n+    virtual void InitFromArgs(const std::map<std::string, std::string>&) = 0;\n+};\n+\n+/** Return a CPolicy of the type described in the parameter string */\n+CPolicy& Policy(std::string);\n+/** Returns the current CPolicy. Requires calling SelectPolicy() or InitPolicyFromArgs() first */\n+const CPolicy& Policy();\n+/** Selects the current CPolicy of the type described in the parameter string */\n+void SelectPolicy(std::string);\n+/** Returns a HelpMessage string with policy options */\n+std::string GetPolicyUsageStr();\n+/** \n+ * Selects the current CPolicy of the type described in the string on key \"-policy\" mapArgs\n+ * and calls CPolicy::InitFromArgs() with mapArgs.\n+ */\n+void InitPolicyFromArgs(const std::map<std::string, std::string>& mapArgs);\n+\n+#endif // BITCOIN_POLICY_H"
      },
      {
        "sha": "3e85e2df81673f2146fd16c1a54b0b7f8fbb8edb",
        "filename": "src/qt/test/test_main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8118d9a316153a0fda43a30ac88668c39d55795d/src/qt/test/test_main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8118d9a316153a0fda43a30ac88668c39d55795d/src/qt/test/test_main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/test_main.cpp?ref=8118d9a316153a0fda43a30ac88668c39d55795d",
        "patch": "@@ -6,6 +6,7 @@\n #include \"config/bitcoin-config.h\"\n #endif\n \n+#include \"policy.h\"\n #include \"uritests.h\"\n \n #ifdef ENABLE_WALLET\n@@ -29,6 +30,7 @@ int main(int argc, char *argv[])\n {\n     bool fInvalid = false;\n \n+    SelectPolicy(\"standard\");\n     // Don't remove this, it's needed to access\n     // QCoreApplication:: in the tests\n     QCoreApplication app(argc, argv);"
      },
      {
        "sha": "9513008324332c83c924e65caaaae1d724f55406",
        "filename": "src/test/script_P2SH_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8118d9a316153a0fda43a30ac88668c39d55795d/src/test/script_P2SH_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8118d9a316153a0fda43a30ac88668c39d55795d/src/test/script_P2SH_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_P2SH_tests.cpp?ref=8118d9a316153a0fda43a30ac88668c39d55795d",
        "patch": "@@ -5,6 +5,7 @@\n #include \"key.h\"\n #include \"keystore.h\"\n #include \"main.h\"\n+#include \"policy.h\"\n #include \"primitives/transaction.h\"\n #include \"script/script.h\"\n #include \"script/script_error.h\"\n@@ -54,6 +55,7 @@ BOOST_AUTO_TEST_SUITE(script_P2SH_tests)\n BOOST_AUTO_TEST_CASE(sign)\n {\n     LOCK(cs_main);\n+    SelectPolicy(\"standard\");\n     // Pay-to-script-hash looks like this:\n     // scriptSig:    <sig> <sig...> <serialized_script>\n     // scriptPubKey: HASH160 <hash> EQUAL\n@@ -155,6 +157,7 @@ BOOST_AUTO_TEST_CASE(norecurse)\n BOOST_AUTO_TEST_CASE(set)\n {\n     LOCK(cs_main);\n+    SelectPolicy(\"standard\");\n     // Test the CScript::Set* methods\n     CBasicKeyStore keystore;\n     CKey key[4];"
      }
    ]
  },
  {
    "sha": "8375151e09a5add75bd99518dc0535b69439460d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4Mzc1MTUxZTA5YTVhZGQ3NWJkOTk1MThkYzA1MzViNjk0Mzk0NjBk",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2014-10-11T22:41:05Z"
      },
      "committer": {
        "name": "jtimon",
        "email": "jtimon@jtimon.cc",
        "date": "2015-01-20T23:10:56Z"
      },
      "message": "Policy: MOVEONLY: script/standard.o::IsStandard() -> CPolicy::ValidateScript()",
      "tree": {
        "sha": "daf9cb5358f9fe553c590b63deec3ba831be293d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/daf9cb5358f9fe553c590b63deec3ba831be293d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8375151e09a5add75bd99518dc0535b69439460d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8375151e09a5add75bd99518dc0535b69439460d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8375151e09a5add75bd99518dc0535b69439460d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8375151e09a5add75bd99518dc0535b69439460d/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8118d9a316153a0fda43a30ac88668c39d55795d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8118d9a316153a0fda43a30ac88668c39d55795d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8118d9a316153a0fda43a30ac88668c39d55795d"
      }
    ],
    "stats": {
      "total": 61,
      "additions": 33,
      "deletions": 28
    },
    "files": [
      {
        "sha": "80ed4eb2ac6893c11187b6d3fec897cdbb9e82af",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8375151e09a5add75bd99518dc0535b69439460d/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8375151e09a5add75bd99518dc0535b69439460d/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=8375151e09a5add75bd99518dc0535b69439460d",
        "patch": "@@ -15,6 +15,7 @@\n #include \"consensus/validation.h\"\n #include \"init.h\"\n #include \"merkleblock.h\"\n+#include \"policy.h\"\n #include \"pow.h\"\n #include \"primitives/transaction.h\"\n #include \"script/script.h\"\n@@ -615,7 +616,7 @@ bool IsStandardTx(const CTransaction& tx, string& reason)\n     unsigned int nDataOut = 0;\n     txnouttype whichType;\n     BOOST_FOREACH(const CTxOut& txout, tx.vout) {\n-        if (!::IsStandard(txout.scriptPubKey, whichType)) {\n+        if (!Policy().ValidateScript(txout.scriptPubKey, whichType)) {\n             reason = \"scriptpubkey\";\n             return false;\n         }\n@@ -690,7 +691,7 @@ bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n         // non-standard. Note that this EvalScript() call will\n         // be quick, because if there are any operations\n         // beside \"push data\" in the scriptSig\n-        // IsStandard() will have already returned false\n+        // Policy().ValidateScript() will have already returned false\n         // and this method isn't called.\n         vector<vector<unsigned char> > stack;\n         if (!EvalScript(stack, tx.vin[i].scriptSig, SCRIPT_VERIFY_NONE, BaseSignatureChecker()))"
      },
      {
        "sha": "d515d135fac875bf8727eb5ca8094c47a95d5511",
        "filename": "src/policy.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 0,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8375151e09a5add75bd99518dc0535b69439460d/src/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8375151e09a5add75bd99518dc0535b69439460d/src/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy.cpp?ref=8375151e09a5add75bd99518dc0535b69439460d",
        "patch": "@@ -16,6 +16,7 @@ class CStandardPolicy : public CPolicy\n {\n public:\n     virtual void InitFromArgs(const std::map<std::string, std::string>&);\n+    virtual bool ValidateScript(const CScript&, txnouttype&) const;\n };\n \n /** Global variables and their interfaces */\n@@ -60,3 +61,23 @@ void InitPolicyFromArgs(const std::map<std::string, std::string>& mapArgs)\n void CStandardPolicy::InitFromArgs(const std::map<std::string, std::string>& mapArgs)\n {\n }\n+\n+bool CStandardPolicy::ValidateScript(const CScript& scriptPubKey, txnouttype& whichType) const\n+{\n+    std::vector<std::vector<unsigned char> > vSolutions;\n+    if (!Solver(scriptPubKey, whichType, vSolutions))\n+        return false;\n+\n+    if (whichType == TX_MULTISIG)\n+    {\n+        unsigned char m = vSolutions.front()[0];\n+        unsigned char n = vSolutions.back()[0];\n+        // Support up to x-of-3 multisig txns as standard\n+        if (n < 1 || n > 3)\n+            return false;\n+        if (m < 1 || m > n)\n+            return false;\n+    }\n+\n+    return whichType != TX_NONSTANDARD;\n+}"
      },
      {
        "sha": "7722ce2c14de53682180bcafbfaae85206dd1036",
        "filename": "src/policy.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8375151e09a5add75bd99518dc0535b69439460d/src/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8375151e09a5add75bd99518dc0535b69439460d/src/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy.h?ref=8375151e09a5add75bd99518dc0535b69439460d",
        "patch": "@@ -6,6 +6,8 @@\n #ifndef BITCOIN_POLICY_H\n #define BITCOIN_POLICY_H\n \n+#include \"script/standard.h\"\n+\n #include <map>\n #include <string>\n \n@@ -14,6 +16,7 @@ class CPolicy\n {\n public:\n     virtual void InitFromArgs(const std::map<std::string, std::string>&) = 0;\n+    virtual bool ValidateScript(const CScript&, txnouttype&) const = 0;\n };\n \n /** Return a CPolicy of the type described in the parameter string */"
      },
      {
        "sha": "66657127ab85cf47c5c63ad8ea960a16978d2035",
        "filename": "src/script/standard.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 20,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8375151e09a5add75bd99518dc0535b69439460d/src/script/standard.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8375151e09a5add75bd99518dc0535b69439460d/src/script/standard.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.cpp?ref=8375151e09a5add75bd99518dc0535b69439460d",
        "patch": "@@ -180,26 +180,6 @@ int ScriptSigArgsExpected(txnouttype t, const std::vector<std::vector<unsigned c\n     return -1;\n }\n \n-bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType)\n-{\n-    vector<valtype> vSolutions;\n-    if (!Solver(scriptPubKey, whichType, vSolutions))\n-        return false;\n-\n-    if (whichType == TX_MULTISIG)\n-    {\n-        unsigned char m = vSolutions.front()[0];\n-        unsigned char n = vSolutions.back()[0];\n-        // Support up to x-of-3 multisig txns as standard\n-        if (n < 1 || n > 3)\n-            return false;\n-        if (m < 1 || m > n)\n-            return false;\n-    }\n-\n-    return whichType != TX_NONSTANDARD;\n-}\n-\n bool ExtractDestination(const CScript& scriptPubKey, CTxDestination& addressRet)\n {\n     vector<valtype> vSolutions;"
      },
      {
        "sha": "4e2f4277ff501c33f4f8bfb70d2c5ef932673892",
        "filename": "src/script/standard.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8375151e09a5add75bd99518dc0535b69439460d/src/script/standard.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8375151e09a5add75bd99518dc0535b69439460d/src/script/standard.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.h?ref=8375151e09a5add75bd99518dc0535b69439460d",
        "patch": "@@ -84,7 +84,6 @@ const char* GetTxnOutputType(txnouttype t);\n \n bool Solver(const CScript& scriptPubKey, txnouttype& typeRet, std::vector<std::vector<unsigned char> >& vSolutionsRet);\n int ScriptSigArgsExpected(txnouttype t, const std::vector<std::vector<unsigned char> >& vSolutions);\n-bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType);\n bool ExtractDestination(const CScript& scriptPubKey, CTxDestination& addressRet);\n bool ExtractDestinations(const CScript& scriptPubKey, txnouttype& typeRet, std::vector<CTxDestination>& addressRet, int& nRequiredRet);\n "
      },
      {
        "sha": "1106c4e3a9ccf37435ef2cf012187a371804fb5b",
        "filename": "src/test/multisig_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8375151e09a5add75bd99518dc0535b69439460d/src/test/multisig_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8375151e09a5add75bd99518dc0535b69439460d/src/test/multisig_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/multisig_tests.cpp?ref=8375151e09a5add75bd99518dc0535b69439460d",
        "patch": "@@ -4,6 +4,7 @@\n \n #include \"key.h\"\n #include \"keystore.h\"\n+#include \"policy.h\"\n #include \"primitives/transaction.h\"\n #include \"script/interpreter.h\"\n #include \"script/script.h\"\n@@ -156,19 +157,19 @@ BOOST_AUTO_TEST_CASE(multisig_IsStandard)\n \n     CScript a_and_b;\n     a_and_b << OP_2 << ToByteVector(key[0].GetPubKey()) << ToByteVector(key[1].GetPubKey()) << OP_2 << OP_CHECKMULTISIG;\n-    BOOST_CHECK(::IsStandard(a_and_b, whichType));\n+    BOOST_CHECK(Policy(\"standard\").ValidateScript(a_and_b, whichType));\n \n     CScript a_or_b;\n     a_or_b  << OP_1 << ToByteVector(key[0].GetPubKey()) << ToByteVector(key[1].GetPubKey()) << OP_2 << OP_CHECKMULTISIG;\n-    BOOST_CHECK(::IsStandard(a_or_b, whichType));\n+    BOOST_CHECK(Policy(\"standard\").ValidateScript(a_or_b, whichType));\n \n     CScript escrow;\n     escrow << OP_2 << ToByteVector(key[0].GetPubKey()) << ToByteVector(key[1].GetPubKey()) << ToByteVector(key[2].GetPubKey()) << OP_3 << OP_CHECKMULTISIG;\n-    BOOST_CHECK(::IsStandard(escrow, whichType));\n+    BOOST_CHECK(Policy(\"standard\").ValidateScript(escrow, whichType));\n \n     CScript one_of_four;\n     one_of_four << OP_1 << ToByteVector(key[0].GetPubKey()) << ToByteVector(key[1].GetPubKey()) << ToByteVector(key[2].GetPubKey()) << ToByteVector(key[3].GetPubKey()) << OP_4 << OP_CHECKMULTISIG;\n-    BOOST_CHECK(!::IsStandard(one_of_four, whichType));\n+    BOOST_CHECK(!Policy(\"standard\").ValidateScript(one_of_four, whichType));\n \n     CScript malformed[6];\n     malformed[0] << OP_3 << ToByteVector(key[0].GetPubKey()) << ToByteVector(key[1].GetPubKey()) << OP_2 << OP_CHECKMULTISIG;\n@@ -179,7 +180,7 @@ BOOST_AUTO_TEST_CASE(multisig_IsStandard)\n     malformed[5] << OP_1 << ToByteVector(key[0].GetPubKey()) << ToByteVector(key[1].GetPubKey());\n \n     for (int i = 0; i < 6; i++)\n-        BOOST_CHECK(!::IsStandard(malformed[i], whichType));\n+        BOOST_CHECK(!Policy(\"standard\").ValidateScript(malformed[i], whichType));\n }\n \n BOOST_AUTO_TEST_CASE(multisig_Solver1)"
      }
    ]
  },
  {
    "sha": "1615b92fc7ffacb6dac2a9bc8ae0008e58373b5a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNjE1YjkyZmM3ZmZhY2I2ZGFjMmE5YmM4YWUwMDA4ZTU4MzczYjVh",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2014-10-11T23:03:23Z"
      },
      "committer": {
        "name": "jtimon",
        "email": "jtimon@jtimon.cc",
        "date": "2015-01-20T23:11:08Z"
      },
      "message": "Policy: Refactor: Move datacarrier policy logic to policy.o",
      "tree": {
        "sha": "6f9ef1c3b2d7b9bae1c83cab35b6516b62f41434",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6f9ef1c3b2d7b9bae1c83cab35b6516b62f41434"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1615b92fc7ffacb6dac2a9bc8ae0008e58373b5a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1615b92fc7ffacb6dac2a9bc8ae0008e58373b5a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1615b92fc7ffacb6dac2a9bc8ae0008e58373b5a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1615b92fc7ffacb6dac2a9bc8ae0008e58373b5a/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8375151e09a5add75bd99518dc0535b69439460d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8375151e09a5add75bd99518dc0535b69439460d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8375151e09a5add75bd99518dc0535b69439460d"
      }
    ],
    "stats": {
      "total": 74,
      "additions": 49,
      "deletions": 25
    },
    "files": [
      {
        "sha": "590467c5651a41a1ceb73a92a81fb7ddae8fb799",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1615b92fc7ffacb6dac2a9bc8ae0008e58373b5a/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1615b92fc7ffacb6dac2a9bc8ae0008e58373b5a/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=1615b92fc7ffacb6dac2a9bc8ae0008e58373b5a",
        "patch": "@@ -370,10 +370,6 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += \"\\n\" + _(\"Policy options:\") + \"\\n\";\n     strUsage += GetPolicyUsageStr();\n \n-    strUsage += \"\\n\" + _(\"Node relay options:\") + \"\\n\";\n-    strUsage += \"  -datacarrier           \" + strprintf(_(\"Relay and mine data carrier transactions (default: %u)\"), 1) + \"\\n\";\n-    strUsage += \"  -datacarriersize       \" + strprintf(_(\"Maximum size of data in data carrier transactions we relay and mine (default: %u)\"), MAX_OP_RETURN_RELAY) + \"\\n\";\n-\n     strUsage += \"\\n\" + _(\"Block creation options:\") + \"\\n\";\n     strUsage += \"  -blockminsize=<n>      \" + strprintf(_(\"Set minimum block size in bytes (default: %u)\"), 0) + \"\\n\";\n     strUsage += \"  -blockmaxsize=<n>      \" + strprintf(_(\"Set maximum block size in bytes (default: %d)\"), DEFAULT_BLOCK_MAX_SIZE) + \"\\n\";\n@@ -763,7 +759,6 @@ bool AppInit2(boost::thread_group& threadGroup)\n #endif // ENABLE_WALLET\n \n     fIsBareMultisigStd = GetArg(\"-permitbaremultisig\", true) != 0;\n-    nMaxDatacarrierBytes = GetArg(\"-datacarriersize\", nMaxDatacarrierBytes);\n \n     // ********************************************************* Step 4: application initialization: dir lock, daemonize, pidfile, debug log\n "
      },
      {
        "sha": "73f76e94456028dfa756917b1429728d7d53261b",
        "filename": "src/policy.cpp",
        "status": "modified",
        "additions": 42,
        "deletions": 8,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1615b92fc7ffacb6dac2a9bc8ae0008e58373b5a/src/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1615b92fc7ffacb6dac2a9bc8ae0008e58373b5a/src/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy.cpp?ref=1615b92fc7ffacb6dac2a9bc8ae0008e58373b5a",
        "patch": "@@ -11,10 +11,16 @@\n #include \"ui_interface.h\"\n #include \"utilstrencodings.h\"\n \n+static const unsigned int MAX_OP_RETURN_RELAY = 40; //! bytes\n+\n /** Declaration of Standard Policy implementing CPolicy */\n class CStandardPolicy : public CPolicy\n {\n+protected:\n+    unsigned nMaxDatacarrierBytes;\n public:\n+    CStandardPolicy() : nMaxDatacarrierBytes(MAX_OP_RETURN_RELAY) {};\n+\n     virtual void InitFromArgs(const std::map<std::string, std::string>&);\n     virtual bool ValidateScript(const CScript&, txnouttype&) const;\n };\n@@ -46,6 +52,8 @@ const CPolicy& Policy()\n std::string GetPolicyUsageStr()\n {\n     std::string strUsage = \"\";\n+    strUsage += \"  -datacarrier           \" + strprintf(_(\"Relay and mine data carrier transactions (default: %u)\"), 1) + \"\\n\";\n+    strUsage += \"  -datacarriersize       \" + strprintf(_(\"Maximum size of data in data carrier transactions we relay and mine (default: %u)\"), MAX_OP_RETURN_RELAY) + \"\\n\";\n     strUsage += \"  -policy                \" + strprintf(_(\"Select a specific type of policy (default: %s)\"), \"standard\") + \"\\n\";\n     return strUsage;\n }\n@@ -60,6 +68,10 @@ void InitPolicyFromArgs(const std::map<std::string, std::string>& mapArgs)\n \n void CStandardPolicy::InitFromArgs(const std::map<std::string, std::string>& mapArgs)\n {\n+    if (GetArg(\"-datacarrier\", true, mapArgs))\n+        nMaxDatacarrierBytes = GetArg(\"-datacarriersize\", nMaxDatacarrierBytes, mapArgs);\n+    else\n+        nMaxDatacarrierBytes = 0;\n }\n \n bool CStandardPolicy::ValidateScript(const CScript& scriptPubKey, txnouttype& whichType) const\n@@ -68,15 +80,37 @@ bool CStandardPolicy::ValidateScript(const CScript& scriptPubKey, txnouttype& wh\n     if (!Solver(scriptPubKey, whichType, vSolutions))\n         return false;\n \n-    if (whichType == TX_MULTISIG)\n+    switch (whichType)\n     {\n-        unsigned char m = vSolutions.front()[0];\n-        unsigned char n = vSolutions.back()[0];\n-        // Support up to x-of-3 multisig txns as standard\n-        if (n < 1 || n > 3)\n-            return false;\n-        if (m < 1 || m > n)\n-            return false;\n+        case TX_MULTISIG:\n+        {\n+            unsigned char m = vSolutions.front()[0];\n+            unsigned char n = vSolutions.back()[0];\n+            // Support up to x-of-3 multisig txns as standard\n+            if (n < 1 || n > 3)\n+                return false;\n+            if (m < 1 || m > n)\n+                return false;\n+            break;\n+        }\n+\n+        case TX_NULL_DATA:\n+            // TX_NULL_DATA without any vSolutions is a lone OP_RETURN, which traditionally is accepted regardless of the -datacarrier option, so we skip the check.\n+            // If you want to filter lone OP_RETURNs, be sure to handle vSolutions being empty below where vSolutions.front() is accessed!\n+            if (vSolutions.size())\n+            {\n+                if (!nMaxDatacarrierBytes)\n+                    return false;\n+\n+                if (vSolutions.front().size() > nMaxDatacarrierBytes)\n+                    return false;\n+            }\n+\n+            break;\n+\n+        default:\n+            // no other restrictions on standard scripts\n+            break;\n     }\n \n     return whichType != TX_NONSTANDARD;"
      },
      {
        "sha": "c0aa442343863f3741b53526d75a0f43c9e5c9e2",
        "filename": "src/script/script.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1615b92fc7ffacb6dac2a9bc8ae0008e58373b5a/src/script/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1615b92fc7ffacb6dac2a9bc8ae0008e58373b5a/src/script/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.cpp?ref=1615b92fc7ffacb6dac2a9bc8ae0008e58373b5a",
        "patch": "@@ -154,7 +154,7 @@ const char* GetOpName(opcodetype opcode)\n     case OP_INVALIDOPCODE          : return \"OP_INVALIDOPCODE\";\n \n     // Note:\n-    //  The template matching params OP_SMALLDATA/etc are defined in opcodetype enum\n+    //  The template matching params OP_DATA/etc are defined in opcodetype enum\n     //  as kind of implementation hack, they are *NOT* real opcodes.  If found in real\n     //  Script, just let the default: case deal with them.\n "
      },
      {
        "sha": "0ff4d91ba8d50b03456aa4df6e8be3f34f924c4f",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1615b92fc7ffacb6dac2a9bc8ae0008e58373b5a/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1615b92fc7ffacb6dac2a9bc8ae0008e58373b5a/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=1615b92fc7ffacb6dac2a9bc8ae0008e58373b5a",
        "patch": "@@ -160,7 +160,7 @@ enum opcodetype\n \n \n     // template matching params\n-    OP_SMALLDATA = 0xf9,\n+    OP_DATA = 0xf9,\n     OP_SMALLINTEGER = 0xfa,\n     OP_PUBKEYS = 0xfb,\n     OP_PUBKEYHASH = 0xfd,"
      },
      {
        "sha": "693ed7410c33cc57353d05ff0ae0ceadd60d1a62",
        "filename": "src/script/standard.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 7,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1615b92fc7ffacb6dac2a9bc8ae0008e58373b5a/src/script/standard.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1615b92fc7ffacb6dac2a9bc8ae0008e58373b5a/src/script/standard.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.cpp?ref=1615b92fc7ffacb6dac2a9bc8ae0008e58373b5a",
        "patch": "@@ -16,8 +16,6 @@ using namespace std;\n \n typedef vector<unsigned char> valtype;\n \n-unsigned nMaxDatacarrierBytes = MAX_OP_RETURN_RELAY;\n-\n CScriptID::CScriptID(const CScript& in) : uint160(Hash160(in.begin(), in.end())) {}\n \n const char* GetTxnOutputType(txnouttype t)\n@@ -53,8 +51,7 @@ bool Solver(const CScript& scriptPubKey, txnouttype& typeRet, vector<vector<unsi\n         mTemplates.insert(make_pair(TX_MULTISIG, CScript() << OP_SMALLINTEGER << OP_PUBKEYS << OP_SMALLINTEGER << OP_CHECKMULTISIG));\n \n         // Empty, provably prunable, data-carrying output\n-        if (GetBoolArg(\"-datacarrier\", true))\n-            mTemplates.insert(make_pair(TX_NULL_DATA, CScript() << OP_RETURN << OP_SMALLDATA));\n+        mTemplates.insert(make_pair(TX_NULL_DATA, CScript() << OP_RETURN << OP_DATA));\n         mTemplates.insert(make_pair(TX_NULL_DATA, CScript() << OP_RETURN));\n     }\n \n@@ -140,11 +137,12 @@ bool Solver(const CScript& scriptPubKey, txnouttype& typeRet, vector<vector<unsi\n                 else\n                     break;\n             }\n-            else if (opcode2 == OP_SMALLDATA)\n+            else if (opcode2 == OP_DATA)\n             {\n-                // small pushdata, <= nMaxDatacarrierBytes\n-                if (vch1.size() > nMaxDatacarrierBytes)\n+                // any pushdata\n+                if (opcode1 > OP_PUSHDATA4)\n                     break;\n+                vSolutionsRet.push_back(vch1);\n             }\n             else if (opcode1 != opcode2 || vch1 != vch2)\n             {"
      },
      {
        "sha": "e32ea2145f99847b50dad552d05f75cfba5b470e",
        "filename": "src/script/standard.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1615b92fc7ffacb6dac2a9bc8ae0008e58373b5a/src/script/standard.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1615b92fc7ffacb6dac2a9bc8ae0008e58373b5a/src/script/standard.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.h?ref=1615b92fc7ffacb6dac2a9bc8ae0008e58373b5a",
        "patch": "@@ -25,9 +25,6 @@ class CScriptID : public uint160\n     CScriptID(const uint160& in) : uint160(in) {}\n };\n \n-static const unsigned int MAX_OP_RETURN_RELAY = 40;      //! bytes\n-extern unsigned nMaxDatacarrierBytes;\n-\n /**\n  * Mandatory script verification flags that all new blocks must comply with for\n  * them to be valid. (but old blocks may not comply with) Currently just P2SH,"
      }
    ]
  },
  {
    "sha": "ca3c5a89644a73878fb09779622ef16ab55cbcee",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYTNjNWE4OTY0NGE3Mzg3OGZiMDk3Nzk2MjJlZjE2YWI1NWNiY2Vl",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@jtimon.cc",
        "date": "2014-12-31T14:35:00Z"
      },
      "committer": {
        "name": "jtimon",
        "email": "jtimon@jtimon.cc",
        "date": "2015-01-20T23:11:08Z"
      },
      "message": "Policy: MOVEONLY: global minRelayTxFee from main.o to policy.o\n\n(and initialize minRelayTxFee in InitPolicyFromArgs())",
      "tree": {
        "sha": "bb7d5cfbf1dcba9754134df2ad51e25f40b0f071",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bb7d5cfbf1dcba9754134df2ad51e25f40b0f071"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ca3c5a89644a73878fb09779622ef16ab55cbcee",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca3c5a89644a73878fb09779622ef16ab55cbcee",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ca3c5a89644a73878fb09779622ef16ab55cbcee",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca3c5a89644a73878fb09779622ef16ab55cbcee/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1615b92fc7ffacb6dac2a9bc8ae0008e58373b5a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1615b92fc7ffacb6dac2a9bc8ae0008e58373b5a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1615b92fc7ffacb6dac2a9bc8ae0008e58373b5a"
      }
    ],
    "stats": {
      "total": 51,
      "additions": 28,
      "deletions": 23
    },
    "files": [
      {
        "sha": "abb2167553b78a22f8373e464fbeff5a48558f82",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 16,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca3c5a89644a73878fb09779622ef16ab55cbcee/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca3c5a89644a73878fb09779622ef16ab55cbcee/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=ca3c5a89644a73878fb09779622ef16ab55cbcee",
        "patch": "@@ -354,7 +354,6 @@ std::string HelpMessage(HelpMessageMode mode)\n         strUsage += \"  -relaypriority         \" + strprintf(_(\"Require high priority for relaying free or low-fee transactions (default:%u)\"), 1) + \"\\n\";\n         strUsage += \"  -maxsigcachesize=<n>   \" + strprintf(_(\"Limit size of signature cache to <n> entries (default: %u)\"), 50000) + \"\\n\";\n     }\n-    strUsage += \"  -minrelaytxfee=<amt>   \" + strprintf(_(\"Fees (in BTC/Kb) smaller than this are considered zero fee for relaying (default: %s)\"), FormatMoney(::minRelayTxFee.GetFeePerK())) + \"\\n\";\n     strUsage += \"  -printtoconsole        \" + _(\"Send trace/debug info to console instead of debug.log file\") + \"\\n\";\n     if (GetBoolArg(\"-help-debug\", false))\n     {\n@@ -699,21 +698,6 @@ bool AppInit2(boost::thread_group& threadGroup)\n         return InitError(strprintf(_(\"Error while initializing policy: %s\"), e.what()));\n     }\n \n-    // Fee-per-kilobyte amount considered the same as \"free\"\n-    // If you are mining, be careful setting this:\n-    // if you set it to zero then\n-    // a transaction spammer can cheaply fill blocks using\n-    // 1-satoshi-fee transactions. It should be set above the real\n-    // cost to you of processing a transaction.\n-    if (mapArgs.count(\"-minrelaytxfee\"))\n-    {\n-        CAmount n = 0;\n-        if (ParseMoney(mapArgs[\"-minrelaytxfee\"], n) && n > 0)\n-            ::minRelayTxFee = CFeeRate(n);\n-        else\n-            return InitError(strprintf(_(\"Invalid amount for -minrelaytxfee=<amount>: '%s'\"), mapArgs[\"-minrelaytxfee\"]));\n-    }\n-\n #ifdef ENABLE_WALLET\n     if (mapArgs.count(\"-mintxfee\"))\n     {"
      },
      {
        "sha": "60f3086e8dcacbf1c7458615d5b28dfb797a028e",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca3c5a89644a73878fb09779622ef16ab55cbcee/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca3c5a89644a73878fb09779622ef16ab55cbcee/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=ca3c5a89644a73878fb09779622ef16ab55cbcee",
        "patch": "@@ -63,10 +63,6 @@ bool fTxIndex = false;\n bool fIsBareMultisigStd = true;\n unsigned int nCoinCacheSize = 5000;\n \n-\n-/** Fees smaller than this (in satoshi) are considered zero fee (for relaying and mining) */\n-CFeeRate minRelayTxFee = CFeeRate(1000);\n-\n CTxMemPool mempool(::minRelayTxFee);\n \n struct COrphanTx {"
      },
      {
        "sha": "c683a2b20842a31c03c6c286c33529a198e61c19",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca3c5a89644a73878fb09779622ef16ab55cbcee/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca3c5a89644a73878fb09779622ef16ab55cbcee/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=ca3c5a89644a73878fb09779622ef16ab55cbcee",
        "patch": "@@ -108,7 +108,6 @@ extern int nScriptCheckThreads;\n extern bool fTxIndex;\n extern bool fIsBareMultisigStd;\n extern unsigned int nCoinCacheSize;\n-extern CFeeRate minRelayTxFee;\n \n /** Best header we've seen so far (used for getheaders queries' starting points). */\n extern CBlockIndex *pindexBestHeader;"
      },
      {
        "sha": "fdb77aacd8778f382f56bd31f3230a1b2b964893",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca3c5a89644a73878fb09779622ef16ab55cbcee/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca3c5a89644a73878fb09779622ef16ab55cbcee/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=ca3c5a89644a73878fb09779622ef16ab55cbcee",
        "patch": "@@ -13,6 +13,7 @@\n #include \"hash.h\"\n #include \"main.h\"\n #include \"net.h\"\n+#include \"policy.h\"\n #include \"pow.h\"\n #include \"primitives/block.h\"\n #include \"primitives/transaction.h\""
      },
      {
        "sha": "5808ee6b6b7162108679b57c867ad4633d26b384",
        "filename": "src/policy.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca3c5a89644a73878fb09779622ef16ab55cbcee/src/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca3c5a89644a73878fb09779622ef16ab55cbcee/src/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy.cpp?ref=ca3c5a89644a73878fb09779622ef16ab55cbcee",
        "patch": "@@ -7,11 +7,15 @@\n \n #include \"policy.h\"\n \n+#include \"amount.h\"\n #include \"tinyformat.h\"\n #include \"ui_interface.h\"\n+#include \"utilmoneystr.h\"\n #include \"utilstrencodings.h\"\n \n static const unsigned int MAX_OP_RETURN_RELAY = 40; //! bytes\n+/** Fees smaller than this (in satoshi) are considered zero fee (for relaying and mining) */\n+CFeeRate minRelayTxFee = CFeeRate(1000);\n \n /** Declaration of Standard Policy implementing CPolicy */\n class CStandardPolicy : public CPolicy\n@@ -54,6 +58,7 @@ std::string GetPolicyUsageStr()\n     std::string strUsage = \"\";\n     strUsage += \"  -datacarrier           \" + strprintf(_(\"Relay and mine data carrier transactions (default: %u)\"), 1) + \"\\n\";\n     strUsage += \"  -datacarriersize       \" + strprintf(_(\"Maximum size of data in data carrier transactions we relay and mine (default: %u)\"), MAX_OP_RETURN_RELAY) + \"\\n\";\n+    strUsage += \"  -minrelaytxfee=<amt>   \" + strprintf(_(\"Fees (in BTC/Kb) smaller than this are considered zero fee for relaying (default: %s)\"), FormatMoney(::minRelayTxFee.GetFeePerK())) + \"\\n\";\n     strUsage += \"  -policy                \" + strprintf(_(\"Select a specific type of policy (default: %s)\"), \"standard\") + \"\\n\";\n     return strUsage;\n }\n@@ -62,6 +67,18 @@ void InitPolicyFromArgs(const std::map<std::string, std::string>& mapArgs)\n {\n     SelectPolicy(GetArg(\"-policy\", \"standard\", mapArgs));\n     pCurrentPolicy->InitFromArgs(mapArgs);\n+    // Fee-per-kilobyte amount considered the same as \"free\"\n+    // If you are mining, be careful setting this:\n+    // if you set it to zero then\n+    // a transaction spammer can cheaply fill blocks using\n+    // 1-satoshi-fee transactions. It should be set above the real\n+    // cost to you of processing a transaction.\n+    std::string strRelayFee = GetArg(\"-minrelaytxfee\", \"0.00001000\", mapArgs);\n+    CAmount n = 0;\n+    if (ParseMoney(strRelayFee, n) && MoneyRange(n))\n+        ::minRelayTxFee = CFeeRate(n);\n+    else\n+        throw std::runtime_error(strprintf(_(\"Invalid amount for -minrelaytxfee=<amount>: '%s'\"), strRelayFee));\n }\n \n /** CStandardPolicy implementation */"
      },
      {
        "sha": "bd781478f586cc9b31d95b7251af9904b5f5ba12",
        "filename": "src/policy.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca3c5a89644a73878fb09779622ef16ab55cbcee/src/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca3c5a89644a73878fb09779622ef16ab55cbcee/src/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy.h?ref=ca3c5a89644a73878fb09779622ef16ab55cbcee",
        "patch": "@@ -11,6 +11,10 @@\n #include <map>\n #include <string>\n \n+class CFeeRate;\n+\n+extern CFeeRate minRelayTxFee;\n+\n /** Abstract interface for Policy */\n class CPolicy\n {"
      },
      {
        "sha": "0677976a42d79ca3762328c797b59047c2f24944",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca3c5a89644a73878fb09779622ef16ab55cbcee/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca3c5a89644a73878fb09779622ef16ab55cbcee/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=ca3c5a89644a73878fb09779622ef16ab55cbcee",
        "patch": "@@ -15,6 +15,7 @@\n \n #include \"coincontrol.h\"\n #include \"main.h\"\n+#include \"policy.h\"\n #include \"txmempool.h\"\n #include \"wallet.h\"\n "
      },
      {
        "sha": "203a9abcd0d3f370d0b8f45c4046dc7a09b04d75",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca3c5a89644a73878fb09779622ef16ab55cbcee/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca3c5a89644a73878fb09779622ef16ab55cbcee/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=ca3c5a89644a73878fb09779622ef16ab55cbcee",
        "patch": "@@ -10,7 +10,7 @@\n #include \"walletmodel.h\"\n \n #include \"init.h\"\n-#include \"main.h\"\n+#include \"policy.h\"\n #include \"primitives/transaction.h\"\n #include \"protocol.h\"\n #include \"script/script.h\""
      },
      {
        "sha": "09d5a058176751cd95630bcc695113a65373cf46",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca3c5a89644a73878fb09779622ef16ab55cbcee/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca3c5a89644a73878fb09779622ef16ab55cbcee/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=ca3c5a89644a73878fb09779622ef16ab55cbcee",
        "patch": "@@ -10,7 +10,7 @@\n \n #include \"base58.h\"\n #include \"chainparams.h\"\n-#include \"main.h\"\n+#include \"policy.h\"\n #include \"ui_interface.h\"\n #include \"util.h\"\n #include \"wallet.h\""
      },
      {
        "sha": "5ecbd10176d0c9e7cb1f0c4776aa9b1369cdde9e",
        "filename": "src/rpcmisc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca3c5a89644a73878fb09779622ef16ab55cbcee/src/rpcmisc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca3c5a89644a73878fb09779622ef16ab55cbcee/src/rpcmisc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmisc.cpp?ref=ca3c5a89644a73878fb09779622ef16ab55cbcee",
        "patch": "@@ -9,6 +9,7 @@\n #include \"main.h\"\n #include \"net.h\"\n #include \"netbase.h\"\n+#include \"policy.h\"\n #include \"rpcserver.h\"\n #include \"timedata.h\"\n #include \"util.h\""
      },
      {
        "sha": "f128a92d9a2b8a59dbbf5a794c5f5e87a3b90153",
        "filename": "src/rpcnet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca3c5a89644a73878fb09779622ef16ab55cbcee/src/rpcnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca3c5a89644a73878fb09779622ef16ab55cbcee/src/rpcnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcnet.cpp?ref=ca3c5a89644a73878fb09779622ef16ab55cbcee",
        "patch": "@@ -9,6 +9,7 @@\n #include \"main.h\"\n #include \"net.h\"\n #include \"netbase.h\"\n+#include \"policy.h\"\n #include \"protocol.h\"\n #include \"sync.h\"\n #include \"timedata.h\""
      },
      {
        "sha": "ee4bc306de2d4cc3c9b7283c48f891c098d0cf90",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca3c5a89644a73878fb09779622ef16ab55cbcee/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca3c5a89644a73878fb09779622ef16ab55cbcee/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=ca3c5a89644a73878fb09779622ef16ab55cbcee",
        "patch": "@@ -11,6 +11,7 @@\n #include \"consensus/validation.h\"\n #include \"main.h\"\n #include \"net.h\"\n+#include \"policy.h\"\n #include \"script/script.h\"\n #include \"script/sign.h\"\n #include \"timedata.h\""
      }
    ]
  },
  {
    "sha": "fc5f6d515686c187dcad8e6cdbaa26e5c5be7dec",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYzVmNmQ1MTU2ODZjMTg3ZGNhZDhlNmNkYmFhMjZlNWM1YmU3ZGVj",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@jtimon.cc",
        "date": "2014-10-30T12:26:44Z"
      },
      "committer": {
        "name": "jtimon",
        "email": "jtimon@jtimon.cc",
        "date": "2015-01-20T23:42:48Z"
      },
      "message": "Policy: Refactor: CTxOut::IsDust(CFeeRate) -> CPolicy::ValidateOutput(CTxOut)\n\nDecouples CTxOut from CFeeRate\nSimplifies IsDust() interface encapsulating the access to global minRelayTxFee",
      "tree": {
        "sha": "9f828597089e356d945b1bb55a240b89c24a2ad5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9f828597089e356d945b1bb55a240b89c24a2ad5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fc5f6d515686c187dcad8e6cdbaa26e5c5be7dec",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc5f6d515686c187dcad8e6cdbaa26e5c5be7dec",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fc5f6d515686c187dcad8e6cdbaa26e5c5be7dec",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc5f6d515686c187dcad8e6cdbaa26e5c5be7dec/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ca3c5a89644a73878fb09779622ef16ab55cbcee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca3c5a89644a73878fb09779622ef16ab55cbcee",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ca3c5a89644a73878fb09779622ef16ab55cbcee"
      }
    ],
    "stats": {
      "total": 46,
      "additions": 25,
      "deletions": 21
    },
    "files": [
      {
        "sha": "c60014244b4831bc7aa597f65ca854e2f1930e7e",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc5f6d515686c187dcad8e6cdbaa26e5c5be7dec/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc5f6d515686c187dcad8e6cdbaa26e5c5be7dec/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=fc5f6d515686c187dcad8e6cdbaa26e5c5be7dec",
        "patch": "@@ -622,7 +622,7 @@ bool IsStandardTx(const CTransaction& tx, string& reason)\n         else if ((whichType == TX_MULTISIG) && (!fIsBareMultisigStd)) {\n             reason = \"bare-multisig\";\n             return false;\n-        } else if (txout.IsDust(::minRelayTxFee)) {\n+        } else if (Policy().ValidateOutput(txout)) {\n             reason = \"dust\";\n             return false;\n         }"
      },
      {
        "sha": "2440b2ceff9dda98d5ae5d5d94566ba3426c6d71",
        "filename": "src/policy.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc5f6d515686c187dcad8e6cdbaa26e5c5be7dec/src/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc5f6d515686c187dcad8e6cdbaa26e5c5be7dec/src/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy.cpp?ref=fc5f6d515686c187dcad8e6cdbaa26e5c5be7dec",
        "patch": "@@ -8,6 +8,7 @@\n #include \"policy.h\"\n \n #include \"amount.h\"\n+#include \"primitives/transaction.h\"\n #include \"tinyformat.h\"\n #include \"ui_interface.h\"\n #include \"utilmoneystr.h\"\n@@ -27,6 +28,15 @@ class CStandardPolicy : public CPolicy\n \n     virtual void InitFromArgs(const std::map<std::string, std::string>&);\n     virtual bool ValidateScript(const CScript&, txnouttype&) const;\n+    // \"Dust\" is defined in terms of CTransaction::minRelayTxFee,\n+    // which has units satoshis-per-kilobyte.\n+    // If you'd pay more than 1/3 in fees\n+    // to spend something, then we consider it dust.\n+    // A typical txout is 34 bytes big, and will\n+    // need a CTxIn of at least 148 bytes to spend:\n+    // so dust is a txout less than 546 satoshis \n+    // with default minRelayTxFee.\n+    virtual bool ValidateOutput(const CTxOut& txout) const;\n };\n \n /** Global variables and their interfaces */\n@@ -132,3 +142,9 @@ bool CStandardPolicy::ValidateScript(const CScript& scriptPubKey, txnouttype& wh\n \n     return whichType != TX_NONSTANDARD;\n }\n+\n+bool CStandardPolicy::ValidateOutput(const CTxOut& txout) const\n+{\n+    size_t nSize = txout.GetSerializeSize(SER_DISK,0) + 148u;\n+    return (txout.nValue < 3 * minRelayTxFee.GetFee(nSize));\n+}"
      },
      {
        "sha": "763040b91e80a027e2e3d9c74e874145154300e9",
        "filename": "src/policy.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc5f6d515686c187dcad8e6cdbaa26e5c5be7dec/src/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc5f6d515686c187dcad8e6cdbaa26e5c5be7dec/src/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy.h?ref=fc5f6d515686c187dcad8e6cdbaa26e5c5be7dec",
        "patch": "@@ -12,6 +12,7 @@\n #include <string>\n \n class CFeeRate;\n+class CTxOut;\n \n extern CFeeRate minRelayTxFee;\n \n@@ -21,6 +22,7 @@ class CPolicy\n public:\n     virtual void InitFromArgs(const std::map<std::string, std::string>&) = 0;\n     virtual bool ValidateScript(const CScript&, txnouttype&) const = 0;\n+    virtual bool ValidateOutput(const CTxOut& txout) const = 0;\n };\n \n /** Return a CPolicy of the type described in the parameter string */"
      },
      {
        "sha": "6c74dcf1ee0c5cfd20349528639d125ed6808100",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 0,
        "deletions": 14,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc5f6d515686c187dcad8e6cdbaa26e5c5be7dec/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc5f6d515686c187dcad8e6cdbaa26e5c5be7dec/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=fc5f6d515686c187dcad8e6cdbaa26e5c5be7dec",
        "patch": "@@ -134,20 +134,6 @@ class CTxOut\n \n     uint256 GetHash() const;\n \n-    bool IsDust(CFeeRate minRelayTxFee) const\n-    {\n-        // \"Dust\" is defined in terms of CTransaction::minRelayTxFee,\n-        // which has units satoshis-per-kilobyte.\n-        // If you'd pay more than 1/3 in fees\n-        // to spend something, then we consider it dust.\n-        // A typical txout is 34 bytes big, and will\n-        // need a CTxIn of at least 148 bytes to spend:\n-        // so dust is a txout less than 546 satoshis \n-        // with default minRelayTxFee.\n-        size_t nSize = GetSerializeSize(SER_DISK,0)+148u;\n-        return (nValue < 3*minRelayTxFee.GetFee(nSize));\n-    }\n-\n     friend bool operator==(const CTxOut& a, const CTxOut& b)\n     {\n         return (a.nValue       == b.nValue &&"
      },
      {
        "sha": "47e3faecc062cecef83356d77ca9b08f9df9b22e",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc5f6d515686c187dcad8e6cdbaa26e5c5be7dec/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc5f6d515686c187dcad8e6cdbaa26e5c5be7dec/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=fc5f6d515686c187dcad8e6cdbaa26e5c5be7dec",
        "patch": "@@ -466,7 +466,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n         {\n             CTxOut txout(amount, (CScript)vector<unsigned char>(24, 0));\n             txDummy.vout.push_back(txout);\n-            if (txout.IsDust(::minRelayTxFee))\n+            if (Policy().ValidateOutput(txout))\n                fDust = true;\n         }\n     }\n@@ -560,7 +560,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n             if (nChange > 0 && nChange < CENT)\n             {\n                 CTxOut txout(nChange, (CScript)vector<unsigned char>(24, 0));\n-                if (txout.IsDust(::minRelayTxFee))\n+                if (Policy().ValidateOutput(txout))\n                 {\n                     nPayFee += nChange;\n                     nChange = 0;"
      },
      {
        "sha": "6869fc4bf264a84bfa8956710fdb1e7ef9a806e3",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc5f6d515686c187dcad8e6cdbaa26e5c5be7dec/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc5f6d515686c187dcad8e6cdbaa26e5c5be7dec/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=fc5f6d515686c187dcad8e6cdbaa26e5c5be7dec",
        "patch": "@@ -229,7 +229,7 @@ bool isDust(const QString& address, const CAmount& amount)\n     CTxDestination dest = CBitcoinAddress(address.toStdString()).Get();\n     CScript script = GetScriptForDestination(dest);\n     CTxOut txOut(amount, script);\n-    return txOut.IsDust(::minRelayTxFee);\n+    return Policy().ValidateOutput(txOut);\n }\n \n QString HtmlEscape(const QString& str, bool fMultiLine)"
      },
      {
        "sha": "acaa7683880d89e362f57f6d4169dbf4d46c078e",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc5f6d515686c187dcad8e6cdbaa26e5c5be7dec/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc5f6d515686c187dcad8e6cdbaa26e5c5be7dec/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=fc5f6d515686c187dcad8e6cdbaa26e5c5be7dec",
        "patch": "@@ -575,7 +575,7 @@ bool PaymentServer::processPaymentRequest(PaymentRequestPlus& request, SendCoins\n \n         // Extract and check amounts\n         CTxOut txOut(sendingTo.second, sendingTo.first);\n-        if (txOut.IsDust(::minRelayTxFee)) {\n+        if (Policy().ValidateOutput(txOut)) {\n             emit message(tr(\"Payment request error\"), tr(\"Requested payment amount of %1 is too small (considered dust).\")\n                 .arg(BitcoinUnits::formatWithUnit(optionsModel->getDisplayUnit(), sendingTo.second)),\n                 CClientUIInterface::MSG_ERROR);"
      },
      {
        "sha": "17c1cd087e19d05ef0545625ba0c66ca46c5bf4e",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc5f6d515686c187dcad8e6cdbaa26e5c5be7dec/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc5f6d515686c187dcad8e6cdbaa26e5c5be7dec/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=fc5f6d515686c187dcad8e6cdbaa26e5c5be7dec",
        "patch": "@@ -1495,7 +1495,7 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, CAmount> >& vecSend,\n                 BOOST_FOREACH (const PAIRTYPE(CScript, CAmount)& s, vecSend)\n                 {\n                     CTxOut txout(s.second, s.first);\n-                    if (txout.IsDust(::minRelayTxFee))\n+                    if (Policy().ValidateOutput(txout))\n                     {\n                         strFailReason = _(\"Transaction amount too small\");\n                         return false;\n@@ -1556,7 +1556,7 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, CAmount> >& vecSend,\n \n                     // Never create dust outputs; if we would, just\n                     // add the dust to the fee.\n-                    if (newTxOut.IsDust(::minRelayTxFee))\n+                    if (Policy().ValidateOutput(newTxOut))\n                     {\n                         nFeeRet += nChange;\n                         reservekey.ReturnKey();"
      }
    ]
  },
  {
    "sha": "dea1606989b1098f4081c00d57657da03ae1db56",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZWExNjA2OTg5YjEwOThmNDA4MWMwMGQ1NzY1N2RhMDNhZTFkYjU2",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@jtimon.cc",
        "date": "2014-12-29T13:20:28Z"
      },
      "committer": {
        "name": "jtimon",
        "email": "jtimon@jtimon.cc",
        "date": "2015-01-20T23:43:34Z"
      },
      "message": "Policy: Refactor: main::IsStandardTx(CTransaction, string) -> CPolicy::ValidateTx(CTransaction, CValidationState)",
      "tree": {
        "sha": "adae72e03fd136cf2395a8da5e4c22ae9ef11270",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/adae72e03fd136cf2395a8da5e4c22ae9ef11270"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dea1606989b1098f4081c00d57657da03ae1db56",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dea1606989b1098f4081c00d57657da03ae1db56",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dea1606989b1098f4081c00d57657da03ae1db56",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dea1606989b1098f4081c00d57657da03ae1db56/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fc5f6d515686c187dcad8e6cdbaa26e5c5be7dec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc5f6d515686c187dcad8e6cdbaa26e5c5be7dec",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fc5f6d515686c187dcad8e6cdbaa26e5c5be7dec"
      }
    ],
    "stats": {
      "total": 190,
      "additions": 86,
      "deletions": 104
    },
    "files": [
      {
        "sha": "7fc9bd526d5326027a41398c0dcb5a2eba1c84be",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dea1606989b1098f4081c00d57657da03ae1db56/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dea1606989b1098f4081c00d57657da03ae1db56/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=dea1606989b1098f4081c00d57657da03ae1db56",
        "patch": "@@ -742,8 +742,6 @@ bool AppInit2(boost::thread_group& threadGroup)\n     std::string strWalletFile = GetArg(\"-wallet\", \"wallet.dat\");\n #endif // ENABLE_WALLET\n \n-    fIsBareMultisigStd = GetArg(\"-permitbaremultisig\", true) != 0;\n-\n     // ********************************************************* Step 4: application initialization: dir lock, daemonize, pidfile, debug log\n \n     // Sanity check"
      },
      {
        "sha": "42546bae598f86906241c3974f18675cacaf91c7",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 76,
        "changes": 78,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dea1606989b1098f4081c00d57657da03ae1db56/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dea1606989b1098f4081c00d57657da03ae1db56/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=dea1606989b1098f4081c00d57657da03ae1db56",
        "patch": "@@ -60,7 +60,6 @@ int nScriptCheckThreads = 0;\n bool fImporting = false;\n bool fReindex = false;\n bool fTxIndex = false;\n-bool fIsBareMultisigStd = true;\n unsigned int nCoinCacheSize = 5000;\n \n CTxMemPool mempool(::minRelayTxFee);\n@@ -567,76 +566,6 @@ unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans)\n     return nEvicted;\n }\n \n-\n-\n-\n-\n-\n-\n-bool IsStandardTx(const CTransaction& tx, string& reason)\n-{\n-    if (tx.nVersion > CTransaction::CURRENT_VERSION || tx.nVersion < 1) {\n-        reason = \"version\";\n-        return false;\n-    }\n-\n-    // Extremely large transactions with lots of inputs can cost the network\n-    // almost as much to process as they cost the sender in fees, because\n-    // computing signature hashes is O(ninputs*txsize). Limiting transactions\n-    // to MAX_STANDARD_TX_SIZE mitigates CPU exhaustion attacks.\n-    unsigned int sz = tx.GetSerializeSize(SER_NETWORK, CTransaction::CURRENT_VERSION);\n-    if (sz >= MAX_STANDARD_TX_SIZE) {\n-        reason = \"tx-size\";\n-        return false;\n-    }\n-\n-    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n-    {\n-        // Biggest 'standard' txin is a 15-of-15 P2SH multisig with compressed\n-        // keys. (remember the 520 byte limit on redeemScript size) That works\n-        // out to a (15*(33+1))+3=513 byte redeemScript, 513+1+15*(73+1)+3=1627\n-        // bytes of scriptSig, which we round off to 1650 bytes for some minor\n-        // future-proofing. That's also enough to spend a 20-of-20\n-        // CHECKMULTISIG scriptPubKey, though such a scriptPubKey is not\n-        // considered standard)\n-        if (txin.scriptSig.size() > 1650) {\n-            reason = \"scriptsig-size\";\n-            return false;\n-        }\n-        if (!txin.scriptSig.IsPushOnly()) {\n-            reason = \"scriptsig-not-pushonly\";\n-            return false;\n-        }\n-    }\n-\n-    unsigned int nDataOut = 0;\n-    txnouttype whichType;\n-    BOOST_FOREACH(const CTxOut& txout, tx.vout) {\n-        if (!Policy().ValidateScript(txout.scriptPubKey, whichType)) {\n-            reason = \"scriptpubkey\";\n-            return false;\n-        }\n-\n-        if (whichType == TX_NULL_DATA)\n-            nDataOut++;\n-        else if ((whichType == TX_MULTISIG) && (!fIsBareMultisigStd)) {\n-            reason = \"bare-multisig\";\n-            return false;\n-        } else if (Policy().ValidateOutput(txout)) {\n-            reason = \"dust\";\n-            return false;\n-        }\n-    }\n-\n-    // only one OP_RETURN txout is permitted\n-    if (nDataOut > 1) {\n-        reason = \"multi-op-return\";\n-        return false;\n-    }\n-\n-    return true;\n-}\n-\n bool IsFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime)\n {\n     AssertLockHeld(cs_main);\n@@ -798,11 +727,8 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n                          REJECT_INVALID, \"coinbase\");\n \n     // Rather not work on nonstandard transactions (unless -testnet/-regtest)\n-    string reason;\n-    if (Params().RequireStandard() && !IsStandardTx(tx, reason))\n-        return state.DoS(0,\n-                         error(\"AcceptToMemoryPool : nonstandard transaction: %s\", reason),\n-                         REJECT_NONSTANDARD, reason);\n+    if (!Policy().ValidateTx(tx, state))\n+        return error(\"%s: CPolicy::ValidateTx: %s\", __func__, state.GetRejectReason().c_str());\n \n     // Only accept nLockTime-using transactions that can be mined in the next\n     // block; we don't want our mempool filled up with transactions that can't"
      },
      {
        "sha": "99f749f1770fa466bc8565e713d421fd7b2f6786",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 0,
        "deletions": 8,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dea1606989b1098f4081c00d57657da03ae1db56/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dea1606989b1098f4081c00d57657da03ae1db56/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=dea1606989b1098f4081c00d57657da03ae1db56",
        "patch": "@@ -45,8 +45,6 @@ static const unsigned int DEFAULT_BLOCK_MAX_SIZE = 750000;\n static const unsigned int DEFAULT_BLOCK_MIN_SIZE = 0;\n /** Default for -blockprioritysize, maximum space for zero/low-fee transactions **/\n static const unsigned int DEFAULT_BLOCK_PRIORITY_SIZE = 50000;\n-/** The maximum size for transactions we're willing to relay/mine */\n-static const unsigned int MAX_STANDARD_TX_SIZE = 100000;\n /** The maximum allowed number of signature check operations in a block (network rule) */\n static const unsigned int MAX_BLOCK_SIGOPS = MAX_BLOCK_SIZE/50;\n /** Maximum number of signature check operations in an IsStandard() P2SH script */\n@@ -106,7 +104,6 @@ extern bool fImporting;\n extern bool fReindex;\n extern int nScriptCheckThreads;\n extern bool fTxIndex;\n-extern bool fIsBareMultisigStd;\n extern unsigned int nCoinCacheSize;\n \n /** Best header we've seen so far (used for getheaders queries' starting points). */\n@@ -258,11 +255,6 @@ namespace Consensus {\n     bool CheckTx(const CTransaction& tx, CValidationState &state);\n }\n \n-/** Check for standard transaction types\n- * @return True if all outputs (scriptPubKeys) use only standard transaction forms\n- */\n-bool IsStandardTx(const CTransaction& tx, std::string& reason);\n-\n bool IsFinalTx(const CTransaction &tx, int nBlockHeight = 0, int64_t nBlockTime = 0);\n \n /** "
      },
      {
        "sha": "425d339781a15cafaf0c304e2e978eb33366296c",
        "filename": "src/policy.cpp",
        "status": "modified",
        "additions": 56,
        "deletions": 1,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dea1606989b1098f4081c00d57657da03ae1db56/src/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dea1606989b1098f4081c00d57657da03ae1db56/src/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy.cpp?ref=dea1606989b1098f4081c00d57657da03ae1db56",
        "patch": "@@ -8,7 +8,9 @@\n #include \"policy.h\"\n \n #include \"amount.h\"\n+#include \"consensus/validation.h\"\n #include \"primitives/transaction.h\"\n+#include \"script/standard.h\"\n #include \"tinyformat.h\"\n #include \"ui_interface.h\"\n #include \"utilmoneystr.h\"\n@@ -23,8 +25,10 @@ class CStandardPolicy : public CPolicy\n {\n protected:\n     unsigned nMaxDatacarrierBytes;\n+    bool fIsBareMultisigStd;\n public:\n-    CStandardPolicy() : nMaxDatacarrierBytes(MAX_OP_RETURN_RELAY) {};\n+    CStandardPolicy() : nMaxDatacarrierBytes(MAX_OP_RETURN_RELAY),\n+                        fIsBareMultisigStd(true) {};\n \n     virtual void InitFromArgs(const std::map<std::string, std::string>&);\n     virtual bool ValidateScript(const CScript&, txnouttype&) const;\n@@ -37,6 +41,7 @@ class CStandardPolicy : public CPolicy\n     // so dust is a txout less than 546 satoshis \n     // with default minRelayTxFee.\n     virtual bool ValidateOutput(const CTxOut& txout) const;\n+    virtual bool ValidateTx(const CTransaction&, CValidationState&) const;\n };\n \n /** Global variables and their interfaces */\n@@ -99,6 +104,7 @@ void CStandardPolicy::InitFromArgs(const std::map<std::string, std::string>& map\n         nMaxDatacarrierBytes = GetArg(\"-datacarriersize\", nMaxDatacarrierBytes, mapArgs);\n     else\n         nMaxDatacarrierBytes = 0;\n+    fIsBareMultisigStd = GetArg(\"-permitbaremultisig\", fIsBareMultisigStd, mapArgs);\n }\n \n bool CStandardPolicy::ValidateScript(const CScript& scriptPubKey, txnouttype& whichType) const\n@@ -148,3 +154,52 @@ bool CStandardPolicy::ValidateOutput(const CTxOut& txout) const\n     size_t nSize = txout.GetSerializeSize(SER_DISK,0) + 148u;\n     return (txout.nValue < 3 * minRelayTxFee.GetFee(nSize));\n }\n+\n+bool CStandardPolicy::ValidateTx(const CTransaction& tx, CValidationState& state) const\n+{\n+    if (tx.nVersion > CTransaction::CURRENT_VERSION || tx.nVersion < 1)\n+        return state.DoS(0, false, REJECT_NONSTANDARD, \"version\");\n+\n+    // Extremely large transactions with lots of inputs can cost the network\n+    // almost as much to process as they cost the sender in fees, because\n+    // computing signature hashes is O(ninputs*txsize). Limiting transactions\n+    // to MAX_STANDARD_TX_SIZE mitigates CPU exhaustion attacks.\n+    unsigned int sz = tx.GetSerializeSize(SER_NETWORK, CTransaction::CURRENT_VERSION);\n+    if (sz >= MAX_STANDARD_TX_SIZE)\n+        return state.DoS(0, false, REJECT_NONSTANDARD, \"tx-size\");\n+\n+    for (unsigned int i = 0; i < tx.vin.size(); i++) {\n+        // Biggest 'standard' txin is a 15-of-15 P2SH multisig with compressed\n+        // keys. (remember the 520 byte limit on redeemScript size) That works\n+        // out to a (15*(33+1))+3=513 byte redeemScript, 513+1+15*(73+1)+3=1627\n+        // bytes of scriptSig, which we round off to 1650 bytes for some minor\n+        // future-proofing. That's also enough to spend a 20-of-20\n+        // CHECKMULTISIG scriptPubKey, though such a scriptPubKey is not\n+        // considered standard)\n+        if (tx.vin[i].scriptSig.size() > 1650)\n+            return state.DoS(0, false, REJECT_NONSTANDARD, \"scriptsig-size\");\n+\n+        if (!tx.vin[i].scriptSig.IsPushOnly())\n+            return state.DoS(0, false, REJECT_NONSTANDARD, \"scriptsig-not-pushonly\");\n+    }\n+\n+    unsigned int nDataOut = 0;\n+    txnouttype whichType;\n+    for (unsigned int i = 0; i < tx.vout.size(); i++) {\n+        if (!ValidateScript(tx.vout[i].scriptPubKey, whichType))\n+            return state.DoS(0, false, REJECT_NONSTANDARD, \"scriptpubkey\");\n+\n+        if (whichType == TX_NULL_DATA)\n+            nDataOut++;\n+        else if ((whichType == TX_MULTISIG) && (!fIsBareMultisigStd))\n+            return state.DoS(0, false, REJECT_NONSTANDARD, \"bare-multisig\");\n+        else if (ValidateOutput(tx.vout[i]))\n+            return state.DoS(0, false, REJECT_NONSTANDARD, \"dust\");\n+    }\n+\n+    // only one OP_RETURN txout is permitted\n+    if (nDataOut > 1)\n+        return state.DoS(0, false, REJECT_NONSTANDARD, \"multi-op-return\");\n+\n+    return true;\n+}"
      },
      {
        "sha": "4e1f22831050b3367448abd2f2bd58b9372ddac8",
        "filename": "src/policy.h",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dea1606989b1098f4081c00d57657da03ae1db56/src/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dea1606989b1098f4081c00d57657da03ae1db56/src/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy.h?ref=dea1606989b1098f4081c00d57657da03ae1db56",
        "patch": "@@ -12,7 +12,12 @@\n #include <string>\n \n class CFeeRate;\n+class CTransaction;\n class CTxOut;\n+class CValidationState;\n+\n+/** The maximum size for transactions we're willing to relay/mine */\n+static const unsigned int MAX_STANDARD_TX_SIZE = 100000;\n \n extern CFeeRate minRelayTxFee;\n \n@@ -23,6 +28,10 @@ class CPolicy\n     virtual void InitFromArgs(const std::map<std::string, std::string>&) = 0;\n     virtual bool ValidateScript(const CScript&, txnouttype&) const = 0;\n     virtual bool ValidateOutput(const CTxOut& txout) const = 0;\n+    /** Check for standard transaction types\n+     * @return True if all outputs (scriptPubKeys) use only standard transaction forms\n+     */\n+    virtual bool ValidateTx(const CTransaction&, CValidationState&) const = 0;\n };\n \n /** Return a CPolicy of the type described in the parameter string */"
      },
      {
        "sha": "274215f4ab7de8544e979c4961fa5e1f1d682af8",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dea1606989b1098f4081c00d57657da03ae1db56/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dea1606989b1098f4081c00d57657da03ae1db56/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=dea1606989b1098f4081c00d57657da03ae1db56",
        "patch": "@@ -579,7 +579,7 @@ class CScript : public std::vector<unsigned char>\n \n     bool IsPayToScriptHash() const;\n \n-    /** Called by IsStandardTx and P2SH/BIP62 VerifyScript (which makes it consensus-critical). */\n+    /** Called by CStandardPolicy::ValidateTx() and P2SH/BIP62 VerifyScript (which makes it consensus-critical). */\n     bool IsPushOnly() const;\n \n     /**"
      },
      {
        "sha": "662d2e5544b6ca2ff54373ee3ea81242a88c1906",
        "filename": "src/test/script_P2SH_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dea1606989b1098f4081c00d57657da03ae1db56/src/test/script_P2SH_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dea1606989b1098f4081c00d57657da03ae1db56/src/test/script_P2SH_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_P2SH_tests.cpp?ref=dea1606989b1098f4081c00d57657da03ae1db56",
        "patch": "@@ -2,6 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include \"consensus/validation.h\"\n #include \"key.h\"\n #include \"keystore.h\"\n #include \"main.h\"\n@@ -84,7 +85,7 @@ BOOST_AUTO_TEST_CASE(sign)\n     }\n \n     CMutableTransaction txFrom;  // Funding transaction:\n-    string reason;\n+    CValidationState state;\n     txFrom.vout.resize(8);\n     for (int i = 0; i < 4; i++)\n     {\n@@ -93,7 +94,7 @@ BOOST_AUTO_TEST_CASE(sign)\n         txFrom.vout[i+4].scriptPubKey = standardScripts[i];\n         txFrom.vout[i+4].nValue = COIN;\n     }\n-    BOOST_CHECK(IsStandardTx(txFrom, reason));\n+    BOOST_CHECK(Policy(\"standard\").ValidateTx(txFrom, state));\n \n     CMutableTransaction txTo[8]; // Spending transactions\n     for (int i = 0; i < 8; i++)\n@@ -183,14 +184,14 @@ BOOST_AUTO_TEST_CASE(set)\n     }\n \n     CMutableTransaction txFrom;  // Funding transaction:\n-    string reason;\n+    CValidationState state;\n     txFrom.vout.resize(4);\n     for (int i = 0; i < 4; i++)\n     {\n         txFrom.vout[i].scriptPubKey = outer[i];\n         txFrom.vout[i].nValue = CENT;\n     }\n-    BOOST_CHECK(IsStandardTx(txFrom, reason));\n+    BOOST_CHECK(Policy(\"standard\").ValidateTx(txFrom, state));\n \n     CMutableTransaction txTo[4]; // Spending transactions\n     for (int i = 0; i < 4; i++)\n@@ -208,7 +209,7 @@ BOOST_AUTO_TEST_CASE(set)\n     for (int i = 0; i < 4; i++)\n     {\n         BOOST_CHECK_MESSAGE(SignSignature(keystore, txFrom, txTo[i], 0), strprintf(\"SignSignature %d\", i));\n-        BOOST_CHECK_MESSAGE(IsStandardTx(txTo[i], reason), strprintf(\"txTo[%d].IsStandard\", i));\n+        BOOST_CHECK_MESSAGE(Policy(\"standard\").ValidateTx(txTo[i], state), strprintf(\"txTo[%d].IsStandard\", i));\n     }\n }\n "
      },
      {
        "sha": "8560accff8fe48fa5c392e5800423e037dd1a43b",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 11,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dea1606989b1098f4081c00d57657da03ae1db56/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dea1606989b1098f4081c00d57657da03ae1db56/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=dea1606989b1098f4081c00d57657da03ae1db56",
        "patch": "@@ -12,6 +12,7 @@\n #include \"key.h\"\n #include \"keystore.h\"\n #include \"main.h\"\n+#include \"policy.h\"\n #include \"primitives/transaction.h\"\n #include \"script/interpreter.h\"\n #include \"script/script.h\"\n@@ -343,44 +344,44 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     key.MakeNewKey(true);\n     t.vout[0].scriptPubKey = GetScriptForDestination(key.GetPubKey().GetID());\n \n-    string reason;\n-    BOOST_CHECK(IsStandardTx(t, reason));\n+    CValidationState state;\n+    BOOST_CHECK(Policy(\"standard\").ValidateTx(t, state));\n \n     t.vout[0].nValue = 501; // dust\n-    BOOST_CHECK(!IsStandardTx(t, reason));\n+    BOOST_CHECK(!Policy(\"standard\").ValidateTx(t, state));\n \n     t.vout[0].nValue = 601; // not dust\n-    BOOST_CHECK(IsStandardTx(t, reason));\n+    BOOST_CHECK(Policy(\"standard\").ValidateTx(t, state));\n \n     t.vout[0].scriptPubKey = CScript() << OP_1;\n-    BOOST_CHECK(!IsStandardTx(t, reason));\n+    BOOST_CHECK(!Policy(\"standard\").ValidateTx(t, state));\n \n     // 40-byte TX_NULL_DATA (standard)\n     t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\");\n-    BOOST_CHECK(IsStandardTx(t, reason));\n+    BOOST_CHECK(Policy(\"standard\").ValidateTx(t, state));\n \n     // 41-byte TX_NULL_DATA (non-standard)\n     t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3800\");\n-    BOOST_CHECK(!IsStandardTx(t, reason));\n+    BOOST_CHECK(!Policy(\"standard\").ValidateTx(t, state));\n \n     // TX_NULL_DATA w/o PUSHDATA\n     t.vout.resize(1);\n     t.vout[0].scriptPubKey = CScript() << OP_RETURN;\n-    BOOST_CHECK(IsStandardTx(t, reason));\n+    BOOST_CHECK(Policy(\"standard\").ValidateTx(t, state));\n \n     // Only one TX_NULL_DATA permitted in all cases\n     t.vout.resize(2);\n     t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\");\n     t.vout[1].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\");\n-    BOOST_CHECK(!IsStandardTx(t, reason));\n+    BOOST_CHECK(!Policy(\"standard\").ValidateTx(t, state));\n \n     t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\");\n     t.vout[1].scriptPubKey = CScript() << OP_RETURN;\n-    BOOST_CHECK(!IsStandardTx(t, reason));\n+    BOOST_CHECK(!Policy(\"standard\").ValidateTx(t, state));\n \n     t.vout[0].scriptPubKey = CScript() << OP_RETURN;\n     t.vout[1].scriptPubKey = CScript() << OP_RETURN;\n-    BOOST_CHECK(!IsStandardTx(t, reason));\n+    BOOST_CHECK(!Policy(\"standard\").ValidateTx(t, state));\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  }
]