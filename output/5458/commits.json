[
  {
    "sha": "a286ce669ad1cc421bdce30d97e58942988308f8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMjg2Y2U2NjlhZDFjYzQyMWJkY2UzMGQ5N2U1ODk0Mjk4ODMwOGY4",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-12-11T01:04:04Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-12-11T01:05:09Z"
      },
      "message": "RFC: split primitive datatypes and their high-level implementations\n\nWIP.",
      "tree": {
        "sha": "7ce484dc2e21b4cf493fbc5aa7ef3395f96693cf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7ce484dc2e21b4cf493fbc5aa7ef3395f96693cf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a286ce669ad1cc421bdce30d97e58942988308f8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a286ce669ad1cc421bdce30d97e58942988308f8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a286ce669ad1cc421bdce30d97e58942988308f8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a286ce669ad1cc421bdce30d97e58942988308f8/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "34468066ff54881eedd06e9aca39c3aa455cfe7c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34468066ff54881eedd06e9aca39c3aa455cfe7c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/34468066ff54881eedd06e9aca39c3aa455cfe7c"
      }
    ],
    "stats": {
      "total": 376,
      "additions": 234,
      "deletions": 142
    },
    "files": [
      {
        "sha": "5a23118537fb59ef56c3df149673d1f9ee09829d",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a286ce669ad1cc421bdce30d97e58942988308f8/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a286ce669ad1cc421bdce30d97e58942988308f8/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=a286ce669ad1cc421bdce30d97e58942988308f8",
        "patch": "@@ -87,6 +87,7 @@ BITCOIN_CORE_H = \\\n   coins.h \\\n   compat.h \\\n   compressor.h \\\n+  primitives/base.h \\\n   primitives/block.h \\\n   primitives/transaction.h \\\n   core_io.h \\"
      },
      {
        "sha": "58c115a6e36dec99f80018e07bfec51a0c083b18",
        "filename": "src/primitives/base.h",
        "status": "added",
        "additions": 207,
        "deletions": 0,
        "changes": 207,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a286ce669ad1cc421bdce30d97e58942988308f8/src/primitives/base.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a286ce669ad1cc421bdce30d97e58942988308f8/src/primitives/base.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/base.h?ref=a286ce669ad1cc421bdce30d97e58942988308f8",
        "patch": "@@ -0,0 +1,207 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_PRIMITIVES_BASE_H\n+#define BITCOIN_PRIMITIVES_BASE_H\n+\n+#include \"amount.h\"\n+#include \"script/script.h\"\n+#include \"serialize.h\"\n+#include \"uint256.h\"\n+\n+class COutPointBase\n+{\n+protected:\n+    static const uint32_t nNullValue = -1;\n+public:\n+    uint256 hash;\n+    uint32_t n;\n+\n+    COutPointBase() : hash(0), n(nNullValue){}\n+    COutPointBase(uint256 hashIn, uint32_t nIn) : hash(hashIn), n(nIn){}\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+        READWRITE(FLATDATA(*this));\n+    }\n+};\n+\n+template <typename OutPointType = COutPointBase>\n+class CTxInBase\n+{\n+public:\n+    OutPointType prevout;\n+    CScript scriptSig;\n+    uint32_t nSequence;\n+\n+    CTxInBase() : nSequence(std::numeric_limits<unsigned int>::max()) {}\n+    CTxInBase(const OutPointType& prevoutIn, const CScript& scriptSigIn, uint32_t nSequenceIn) : prevout(prevoutIn), scriptSig(scriptSigIn), nSequence(nSequenceIn){}\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+        READWRITE(prevout);\n+        READWRITE(scriptSig);\n+        READWRITE(nSequence);\n+    }\n+};\n+\n+class CTxOutBase\n+{\n+protected:\n+    static const CAmount nValueNull = -1;\n+public:\n+    CAmount nValue;\n+    CScript scriptPubKey;\n+\n+    CTxOutBase() : nValue(nValueNull){}\n+    CTxOutBase(const CAmount& nValueIn, const CScript& scriptPubKeyIn) : nValue(nValueIn), scriptPubKey(scriptPubKeyIn){}\n+\n+    ADD_SERIALIZE_METHODS\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+        READWRITE(nValue);\n+        READWRITE(scriptPubKey);\n+    }\n+\n+};\n+\n+template <typename TxInType, typename TxOutType>\n+class CMutableTransactionBase;\n+\n+template <typename TxInType = CTxInBase<>, typename TxOutType = CTxOutBase>\n+class CTransactionBase\n+{\n+public:\n+    static const int32_t CURRENT_VERSION=1;\n+    // The local variables are made const to prevent unintended modification\n+    // without updating the cached hash value. However, CTransaction is not\n+    // actually immutable; deserialization and assignment are implemented,\n+    // and bypass the constness. This is safe, as they update the entire\n+    // structure, including the hash.\n+    const int32_t nVersion;\n+    const std::vector<TxInType> vin;\n+    const std::vector<TxOutType> vout;\n+    const uint32_t nLockTime;\n+\n+    ADD_SERIALIZE_METHODS;\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+        READWRITE(*const_cast<int32_t*>(&this->nVersion));\n+        READWRITE(*const_cast<std::vector<TxInType>*>(&vin));\n+        READWRITE(*const_cast<std::vector<TxOutType>*>(&vout));\n+        READWRITE(*const_cast<uint32_t*>(&nLockTime));\n+    }\n+    CTransactionBase() : nVersion(CURRENT_VERSION), vin(), vout(), nLockTime(0) { }\n+    CTransactionBase(int32_t nVersionIn, const std::vector<TxInType> vinIn, const std::vector<TxOutType> voutIn, uint32_t nLockTimeIn)\n+    : nVersion(nVersionIn), vin(vinIn), vout(voutIn), nLockTime(nLockTimeIn){}\n+    CTransactionBase(const CMutableTransactionBase<TxInType,TxOutType>& in);\n+};\n+\n+template <typename TxInType = CTxInBase<>, typename TxOutType = CTxOutBase>\n+class CMutableTransactionBase\n+{\n+public:\n+    int32_t nVersion;\n+    std::vector<TxInType> vin;\n+    std::vector<TxOutType> vout;\n+    uint32_t nLockTime;\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+        READWRITE(this->nVersion);\n+        nVersion = this->nVersion;\n+        READWRITE(vin);\n+        READWRITE(vout);\n+        READWRITE(nLockTime);\n+    }\n+    CMutableTransactionBase() : nVersion(CTransactionBase<TxInType,TxOutType>::CURRENT_VERSION), vin(), vout(), nLockTime(0) { }\n+    CMutableTransactionBase(int32_t nVersionIn, const std::vector<TxInType> vinIn, const std::vector<TxOutType> voutIn, uint32_t nLockTimeIn)\n+    : nVersion(nVersionIn), vin(vinIn), vout(voutIn), nLockTime(nLockTimeIn){}\n+    CMutableTransactionBase(const CTransactionBase<TxInType,TxOutType>& in)\n+    : nVersion(in.nVersion), vin(in.vin), vout(in.vout), nLockTime(in.nLockTime){}\n+};\n+\n+template <typename TxInType, typename TxOutType>\n+CTransactionBase<TxInType,TxOutType>::CTransactionBase(const CMutableTransactionBase<TxInType,TxOutType>& in)\n+  : nVersion(in.nVersion), vin(in.vin), vout(in.vout), nLockTime(in.nLockTime){}\n+\n+\n+class CBlockHeaderBase\n+{\n+public:\n+    // header\n+    static const int32_t CURRENT_VERSION=2;\n+    int32_t nVersion;\n+    uint256 hashPrevBlock;\n+    uint256 hashMerkleRoot;\n+    uint32_t nTime;\n+    uint32_t nBits;\n+    uint32_t nNonce;\n+\n+    CBlockHeaderBase() : nVersion(CBlockHeaderBase::CURRENT_VERSION), hashPrevBlock(0), hashMerkleRoot(0), nTime(0), nBits(0), nNonce(0){}\n+    CBlockHeaderBase(int32_t nVersionIn, uint256 hashPrevBlockIn, uint256 hashMerkleRootIn, uint32_t nTimeIn, uint32_t nBitsIn, uint32_t nNonceIn)\n+    : nVersion(nVersionIn), hashPrevBlock(hashPrevBlockIn), hashMerkleRoot(hashMerkleRootIn), nTime(nTimeIn), nBits(nBitsIn), nNonce(nNonceIn){}\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+        READWRITE(this->nVersion);\n+        nVersion = this->nVersion;\n+        READWRITE(hashPrevBlock);\n+        READWRITE(hashMerkleRoot);\n+        READWRITE(nTime);\n+        READWRITE(nBits);\n+        READWRITE(nNonce);\n+    }\n+};\n+\n+template <typename BlockHeaderType = CBlockHeaderBase, typename TransactionType = CTransactionBase<> >\n+class CBlockBase : public BlockHeaderType\n+{\n+public:\n+    // network and disk\n+    std::vector<TransactionType> vtx;\n+\n+    CBlockBase(){}\n+    CBlockBase(const BlockHeaderType &header) : BlockHeaderType(header) {}\n+    CBlockBase(const BlockHeaderType &header, const std::vector<TransactionType>& vtxIn) : BlockHeaderType(header), vtx(vtxIn) {}\n+    CBlockBase(const std::vector<TransactionType>& vtxIn) : vtx(vtxIn) {}\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+        READWRITE(*(BlockHeaderType*)this);\n+        READWRITE(vtx);\n+    }\n+};\n+\n+class CBlockLocatorBase\n+{\n+public:\n+    std::vector<uint256> vHave;\n+\n+    CBlockLocatorBase() {}\n+    CBlockLocatorBase(const std::vector<uint256>& vHaveIn) : vHave(vHaveIn){}\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+        if (!(nType & SER_GETHASH))\n+            READWRITE(nVersion);\n+        READWRITE(vHave);\n+    }\n+};\n+\n+#endif // BITCOIN_PRIMITIVES_BASE_H"
      },
      {
        "sha": "21f5b60e31598ec8a05942048f7d24048e479a0f",
        "filename": "src/primitives/block.h",
        "status": "modified",
        "additions": 6,
        "deletions": 60,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a286ce669ad1cc421bdce30d97e58942988308f8/src/primitives/block.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a286ce669ad1cc421bdce30d97e58942988308f8/src/primitives/block.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.h?ref=a286ce669ad1cc421bdce30d97e58942988308f8",
        "patch": "@@ -7,6 +7,7 @@\n #define BITCOIN_PRIMITIVES_BLOCK_H\n \n #include \"primitives/transaction.h\"\n+#include \"primitives/base.h\"\n #include \"serialize.h\"\n #include \"uint256.h\"\n \n@@ -20,36 +21,9 @@ static const unsigned int MAX_BLOCK_SIZE = 1000000;\n  * in the block is a special one that creates a new coin owned by the creator\n  * of the block.\n  */\n-class CBlockHeader\n+class CBlockHeader : public CBlockHeaderBase\n {\n public:\n-    // header\n-    static const int32_t CURRENT_VERSION=2;\n-    int32_t nVersion;\n-    uint256 hashPrevBlock;\n-    uint256 hashMerkleRoot;\n-    uint32_t nTime;\n-    uint32_t nBits;\n-    uint32_t nNonce;\n-\n-    CBlockHeader()\n-    {\n-        SetNull();\n-    }\n-\n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        READWRITE(this->nVersion);\n-        nVersion = this->nVersion;\n-        READWRITE(hashPrevBlock);\n-        READWRITE(hashMerkleRoot);\n-        READWRITE(nTime);\n-        READWRITE(nBits);\n-        READWRITE(nNonce);\n-    }\n-\n     void SetNull()\n     {\n         nVersion = CBlockHeader::CURRENT_VERSION;\n@@ -74,11 +48,9 @@ class CBlockHeader\n };\n \n \n-class CBlock : public CBlockHeader\n+class CBlock : public CBlockBase<CBlockHeader, CTransaction>\n {\n public:\n-    // network and disk\n-    std::vector<CTransaction> vtx;\n \n     // memory only\n     mutable std::vector<uint256> vMerkleTree;\n@@ -88,19 +60,7 @@ class CBlock : public CBlockHeader\n         SetNull();\n     }\n \n-    CBlock(const CBlockHeader &header)\n-    {\n-        SetNull();\n-        *((CBlockHeader*)this) = header;\n-    }\n-\n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        READWRITE(*(CBlockHeader*)this);\n-        READWRITE(vtx);\n-    }\n+    CBlock(const CBlockHeader &header) : CBlockBase(header) {}\n \n     void SetNull()\n     {\n@@ -137,25 +97,11 @@ class CBlock : public CBlockHeader\n  * other node doesn't have the same branch, it can find a recent common trunk.\n  * The further back it is, the further before the fork it may be.\n  */\n-struct CBlockLocator\n+struct CBlockLocator : public CBlockLocatorBase\n {\n-    std::vector<uint256> vHave;\n \n     CBlockLocator() {}\n-\n-    CBlockLocator(const std::vector<uint256>& vHaveIn)\n-    {\n-        vHave = vHaveIn;\n-    }\n-\n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        if (!(nType & SER_GETHASH))\n-            READWRITE(nVersion);\n-        READWRITE(vHave);\n-    }\n+    CBlockLocator(const std::vector<uint256>& vHaveIn) : CBlockLocatorBase(vHaveIn){}\n \n     void SetNull()\n     {"
      },
      {
        "sha": "d07dd8ec1ad27f5a686ae008a3aa8eb54e1d2482",
        "filename": "src/primitives/transaction.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a286ce669ad1cc421bdce30d97e58942988308f8/src/primitives/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a286ce669ad1cc421bdce30d97e58942988308f8/src/primitives/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.cpp?ref=a286ce669ad1cc421bdce30d97e58942988308f8",
        "patch": "@@ -59,8 +59,8 @@ std::string CTxOut::ToString() const\n     return strprintf(\"CTxOut(nValue=%d.%08d, scriptPubKey=%s)\", nValue / COIN, nValue % COIN, scriptPubKey.ToString().substr(0,30));\n }\n \n-CMutableTransaction::CMutableTransaction() : nVersion(CTransaction::CURRENT_VERSION), nLockTime(0) {}\n-CMutableTransaction::CMutableTransaction(const CTransaction& tx) : nVersion(tx.nVersion), vin(tx.vin), vout(tx.vout), nLockTime(tx.nLockTime) {}\n+CMutableTransaction::CMutableTransaction() {}\n+CMutableTransaction::CMutableTransaction(const CTransaction& tx) : CMutableTransactionBase(tx){}\n \n uint256 CMutableTransaction::GetHash() const\n {\n@@ -72,9 +72,9 @@ void CTransaction::UpdateHash() const\n     *const_cast<uint256*>(&hash) = SerializeHash(*this);\n }\n \n-CTransaction::CTransaction() : hash(0), nVersion(CTransaction::CURRENT_VERSION), vin(), vout(), nLockTime(0) { }\n+CTransaction::CTransaction() : hash(0) {}\n \n-CTransaction::CTransaction(const CMutableTransaction &tx) : nVersion(tx.nVersion), vin(tx.vin), vout(tx.vout), nLockTime(tx.nLockTime) {\n+CTransaction::CTransaction(const CMutableTransaction &tx) : CTransactionBase(tx) {\n     UpdateHash();\n }\n "
      },
      {
        "sha": "ff98fe5e7f563d24fc32bd5c32b7f82386dc811c",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 16,
        "deletions": 78,
        "changes": 94,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a286ce669ad1cc421bdce30d97e58942988308f8/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a286ce669ad1cc421bdce30d97e58942988308f8/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=a286ce669ad1cc421bdce30d97e58942988308f8",
        "patch": "@@ -10,26 +10,18 @@\n #include \"script/script.h\"\n #include \"serialize.h\"\n #include \"uint256.h\"\n+#include \"primitives/base.h\"\n \n /** An outpoint - a combination of a transaction hash and an index n into its vout */\n-class COutPoint\n+class COutPoint : public COutPointBase\n {\n public:\n-    uint256 hash;\n-    uint32_t n;\n-\n-    COutPoint() { SetNull(); }\n-    COutPoint(uint256 hashIn, uint32_t nIn) { hash = hashIn; n = nIn; }\n-\n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        READWRITE(FLATDATA(*this));\n-    }\n-\n-    void SetNull() { hash = 0; n = (uint32_t) -1; }\n-    bool IsNull() const { return (hash == 0 && n == (uint32_t) -1); }\n+    COutPoint(){}\n+    COutPoint(uint256 hashIn, uint32_t nIn) : COutPointBase(hashIn, nIn){}\n+    COutPoint(const COutPointBase& in) : COutPointBase(in){}\n+    COutPoint(const COutPoint& in) : COutPointBase(in.hash, in.n){}\n+    void SetNull() { hash = 0; n = nNullValue; }\n+    bool IsNull() const { return (hash == 0 && n == nNullValue); }\n \n     friend bool operator<(const COutPoint& a, const COutPoint& b)\n     {\n@@ -53,13 +45,9 @@ class COutPoint\n  * transaction's output that it claims and a signature that matches the\n  * output's public key.\n  */\n-class CTxIn\n+class CTxIn : public CTxInBase<COutPoint>\n {\n public:\n-    COutPoint prevout;\n-    CScript scriptSig;\n-    uint32_t nSequence;\n-\n     CTxIn()\n     {\n         nSequence = std::numeric_limits<unsigned int>::max();\n@@ -68,15 +56,6 @@ class CTxIn\n     explicit CTxIn(COutPoint prevoutIn, CScript scriptSigIn=CScript(), uint32_t nSequenceIn=std::numeric_limits<unsigned int>::max());\n     CTxIn(uint256 hashPrevTx, uint32_t nOut, CScript scriptSigIn=CScript(), uint32_t nSequenceIn=std::numeric_limits<uint32_t>::max());\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        READWRITE(prevout);\n-        READWRITE(scriptSig);\n-        READWRITE(nSequence);\n-    }\n-\n     bool IsFinal() const\n     {\n         return (nSequence == std::numeric_limits<uint32_t>::max());\n@@ -100,11 +79,9 @@ class CTxIn\n /** An output of a transaction.  It contains the public key that the next input\n  * must be able to sign with to claim it.\n  */\n-class CTxOut\n+class CTxOut : public CTxOutBase\n {\n public:\n-    CAmount nValue;\n-    CScript scriptPubKey;\n \n     CTxOut()\n     {\n@@ -113,23 +90,15 @@ class CTxOut\n \n     CTxOut(const CAmount& nValueIn, CScript scriptPubKeyIn);\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        READWRITE(nValue);\n-        READWRITE(scriptPubKey);\n-    }\n-\n     void SetNull()\n     {\n-        nValue = -1;\n+        nValue = nValueNull;\n         scriptPubKey.clear();\n     }\n \n     bool IsNull() const\n     {\n-        return (nValue == -1);\n+        return (nValue == nValueNull);\n     }\n \n     uint256 GetHash() const;\n@@ -167,26 +136,15 @@ struct CMutableTransaction;\n /** The basic transaction that is broadcasted on the network and contained in\n  * blocks.  A transaction can contain multiple inputs and outputs.\n  */\n-class CTransaction\n+\n+class CTransaction : public CTransactionBase<CTxIn, CTxOut>\n {\n private:\n     /** Memory only. */\n     const uint256 hash;\n     void UpdateHash() const;\n \n public:\n-    static const int32_t CURRENT_VERSION=1;\n-\n-    // The local variables are made const to prevent unintended modification\n-    // without updating the cached hash value. However, CTransaction is not\n-    // actually immutable; deserialization and assignment are implemented,\n-    // and bypass the constness. This is safe, as they update the entire\n-    // structure, including the hash.\n-    const int32_t nVersion;\n-    const std::vector<CTxIn> vin;\n-    const std::vector<CTxOut> vout;\n-    const uint32_t nLockTime;\n-\n     /** Construct a CTransaction that qualifies as IsNull() */\n     CTransaction();\n \n@@ -199,11 +157,7 @@ class CTransaction\n \n     template <typename Stream, typename Operation>\n     inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        READWRITE(*const_cast<int32_t*>(&this->nVersion));\n-        nVersion = this->nVersion;\n-        READWRITE(*const_cast<std::vector<CTxIn>*>(&vin));\n-        READWRITE(*const_cast<std::vector<CTxOut>*>(&vout));\n-        READWRITE(*const_cast<uint32_t*>(&nLockTime));\n+        CTransactionBase::SerializationOp<Stream,Operation>(s, ser_action, nType, nVersion);\n         if (ser_action.ForRead())\n             UpdateHash();\n     }\n@@ -246,27 +200,11 @@ class CTransaction\n };\n \n /** A mutable version of CTransaction. */\n-struct CMutableTransaction\n+struct CMutableTransaction : public CMutableTransactionBase<CTxIn, CTxOut>\n {\n-    int32_t nVersion;\n-    std::vector<CTxIn> vin;\n-    std::vector<CTxOut> vout;\n-    uint32_t nLockTime;\n-\n     CMutableTransaction();\n     CMutableTransaction(const CTransaction& tx);\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        READWRITE(this->nVersion);\n-        nVersion = this->nVersion;\n-        READWRITE(vin);\n-        READWRITE(vout);\n-        READWRITE(nLockTime);\n-    }\n-\n     /** Compute the hash of this CMutableTransaction. This is computed on the\n      * fly, as opposed to GetHash() in CTransaction, which uses a cached result.\n      */"
      }
    ]
  }
]