[
  {
    "sha": "89fe5feea21d341c09ed46d16680dc3dad11076e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4OWZlNWZlZWEyMWQzNDFjMDllZDQ2ZDE2NjgwZGMzZGFkMTEwNzZl",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-04-02T19:40:38Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-04-02T19:40:40Z"
      },
      "message": "[tests] Stop feature_block.py from blowing up memory.\n\nThe new P2PDataStore class was sending full blocks in headers messages,\nwhich meant that calls to send_blocks_and_test() would blow up memory if\ncalled with a large number of blocks. Fix that by only sending headers\nin headers messages.",
      "tree": {
        "sha": "4626a141b125ebf549ca6204600f72bc39d80cba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4626a141b125ebf549ca6204600f72bc39d80cba"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/89fe5feea21d341c09ed46d16680dc3dad11076e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/89fe5feea21d341c09ed46d16680dc3dad11076e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/89fe5feea21d341c09ed46d16680dc3dad11076e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/89fe5feea21d341c09ed46d16680dc3dad11076e/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "18815b4bfb20c9c1112e547217662529d81e4393",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/18815b4bfb20c9c1112e547217662529d81e4393",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/18815b4bfb20c9c1112e547217662529d81e4393"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "aba28416824638eb70e3ec7b60013d384c5e7865",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/89fe5feea21d341c09ed46d16680dc3dad11076e/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/89fe5feea21d341c09ed46d16680dc3dad11076e/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=89fe5feea21d341c09ed46d16680dc3dad11076e",
        "patch": "@@ -498,7 +498,7 @@ def on_getheaders(self, message):\n             # as we go.\n             prev_block_hash = headers_list[-1].hashPrevBlock\n             if prev_block_hash in self.block_store:\n-                prev_block_header = self.block_store[prev_block_hash]\n+                prev_block_header = CBlockHeader(self.block_store[prev_block_hash])\n                 headers_list.append(prev_block_header)\n                 if prev_block_header.sha256 == hash_stop:\n                     # if this is the hashstop header, stop here\n@@ -539,7 +539,7 @@ def send_blocks_and_test(self, blocks, rpc, success=True, request_block=True, re\n                 self.block_store[block.sha256] = block\n                 self.last_block_hash = block.sha256\n \n-        self.send_message(msg_headers([blocks[-1]]))\n+        self.send_message(msg_headers([CBlockHeader(blocks[-1])]))\n \n         if request_block:\n             wait_until(lambda: blocks[-1].sha256 in self.getdata_requests, timeout=timeout, lock=mininode_lock)"
      }
    ]
  }
]