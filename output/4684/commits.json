[
  {
    "sha": "245606c28b483755ec895bd39a6055db7c6c63f5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNDU2MDZjMjhiNDgzNzU1ZWM4OTViZDM5YTYwNTVkYjdjNmM2M2Y1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-08-12T06:52:46Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-08-12T06:52:46Z"
      },
      "message": "Split CCoinsView::GetCoins into GetCoins and ModifyCoins\n\nMake intention more clear:\n\n- Call ModifyCoins if you intend to change the coins\n- Call GetCoins to get a const reference to the coins\n\nThis can be used for dirty tracking later on.",
      "tree": {
        "sha": "f99876b06b7fd8a0aae8a3669c6372c5a711cebe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f99876b06b7fd8a0aae8a3669c6372c5a711cebe"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/245606c28b483755ec895bd39a6055db7c6c63f5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/245606c28b483755ec895bd39a6055db7c6c63f5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/245606c28b483755ec895bd39a6055db7c6c63f5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/245606c28b483755ec895bd39a6055db7c6c63f5/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a63e86e01d6fa340f250202b9e22e09e85d8a0d2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a63e86e01d6fa340f250202b9e22e09e85d8a0d2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a63e86e01d6fa340f250202b9e22e09e85d8a0d2"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 12,
      "deletions": 5
    },
    "files": [
      {
        "sha": "ec39a18bf9d3b63bb84da5d77d8467b3acc5e882",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/245606c28b483755ec895bd39a6055db7c6c63f5/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/245606c28b483755ec895bd39a6055db7c6c63f5/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=245606c28b483755ec895bd39a6055db7c6c63f5",
        "patch": "@@ -99,7 +99,13 @@ CCoinsMap::iterator CCoinsViewCache::FetchCoins(const uint256 &txid) {\n     return ret;\n }\n \n-CCoins &CCoinsViewCache::GetCoins(const uint256 &txid) {\n+const CCoins &CCoinsViewCache::GetCoins(const uint256 &txid) {\n+    CCoinsMap::const_iterator it = FetchCoins(txid);\n+    assert(it != cacheCoins.end());\n+    return it->second;\n+}\n+\n+CCoins &CCoinsViewCache::ModifyCoins(const uint256 &txid) {\n     CCoinsMap::iterator it = FetchCoins(txid);\n     assert(it != cacheCoins.end());\n     return it->second;"
      },
      {
        "sha": "f29247a8604e1f474da6393e0ddbe6bfad8a6e51",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/245606c28b483755ec895bd39a6055db7c6c63f5/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/245606c28b483755ec895bd39a6055db7c6c63f5/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=245606c28b483755ec895bd39a6055db7c6c63f5",
        "patch": "@@ -342,7 +342,8 @@ class CCoinsViewCache : public CCoinsViewBacked\n     // Return a modifiable reference to a CCoins. Check HaveCoins first.\n     // Many methods explicitly require a CCoinsViewCache because of this method, to reduce\n     // copying.\n-    CCoins &GetCoins(const uint256 &txid);\n+    CCoins &ModifyCoins(const uint256 &txid);\n+    const CCoins &GetCoins(const uint256 &txid);\n \n     // Push the modifications applied to this cache to its base.\n     // Failure to call this method before destruction will cause the changes to be forgotten."
      },
      {
        "sha": "d4f0d8d85d3503677ad711dd2424f449fdba149f",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/245606c28b483755ec895bd39a6055db7c6c63f5/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/245606c28b483755ec895bd39a6055db7c6c63f5/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=245606c28b483755ec895bd39a6055db7c6c63f5",
        "patch": "@@ -1435,7 +1435,7 @@ void UpdateCoins(const CTransaction& tx, CValidationState &state, CCoinsViewCach\n     // mark inputs spent\n     if (!tx.IsCoinBase()) {\n         BOOST_FOREACH(const CTxIn &txin, tx.vin) {\n-            CCoins &coins = inputs.GetCoins(txin.prevout.hash);\n+            CCoins &coins = inputs.ModifyCoins(txin.prevout.hash);\n             CTxInUndo undo;\n             ret = coins.Spend(txin.prevout, undo);\n             assert(ret);\n@@ -1590,7 +1590,7 @@ bool DisconnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex\n         // have outputs available even in the block itself, so we handle that case\n         // specially with outsEmpty.\n         CCoins outsEmpty;\n-        CCoins &outs = view.HaveCoins(hash) ? view.GetCoins(hash) : outsEmpty;\n+        CCoins &outs = view.HaveCoins(hash) ? view.ModifyCoins(hash) : outsEmpty;\n         outs.ClearUnspendable();\n \n         CCoins outsBlock = CCoins(tx, pindex->nHeight);"
      },
      {
        "sha": "8610f497e9f2d7c64ed6ce8a38cd66e38a2a9215",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/245606c28b483755ec895bd39a6055db7c6c63f5/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/245606c28b483755ec895bd39a6055db7c6c63f5/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=245606c28b483755ec895bd39a6055db7c6c63f5",
        "patch": "@@ -498,7 +498,7 @@ void CTxMemPool::check(CCoinsViewCache *pcoins) const\n                 const CTransaction& tx2 = it2->second.GetTx();\n                 assert(tx2.vout.size() > txin.prevout.n && !tx2.vout[txin.prevout.n].IsNull());\n             } else {\n-                CCoins &coins = pcoins->GetCoins(txin.prevout.hash);\n+                const CCoins &coins = pcoins->GetCoins(txin.prevout.hash);\n                 assert(coins.IsAvailable(txin.prevout.n));\n             }\n             // Check whether its inputs are marked in mapNextTx."
      }
    ]
  },
  {
    "sha": "9fd43c3334c201b1c3741ad6b5ef1b546bbe1c1c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZmQ0M2MzMzM0YzIwMWIxYzM3NDFhZDZiNWVmMWI1NDZiYmUxYzFj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-08-12T07:42:12Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-08-12T07:46:19Z"
      },
      "message": "CCoinsViewCache: separate read and write caches\n\nKeep track of entries that are read-only or r/w in separate\ncaches. This is an optimization that avoids writing back all\naccessed entries back to the database on a flush.\n\nAlso makes the way clear for future optimizations such as putting a\nfixed limit on the size of the read cache.",
      "tree": {
        "sha": "06c6b65e50cf587e84e6668351b5bceedd13a967",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/06c6b65e50cf587e84e6668351b5bceedd13a967"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9fd43c3334c201b1c3741ad6b5ef1b546bbe1c1c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9fd43c3334c201b1c3741ad6b5ef1b546bbe1c1c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9fd43c3334c201b1c3741ad6b5ef1b546bbe1c1c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9fd43c3334c201b1c3741ad6b5ef1b546bbe1c1c/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "245606c28b483755ec895bd39a6055db7c6c63f5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/245606c28b483755ec895bd39a6055db7c6c63f5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/245606c28b483755ec895bd39a6055db7c6c63f5"
      }
    ],
    "stats": {
      "total": 112,
      "additions": 80,
      "deletions": 32
    },
    "files": [
      {
        "sha": "f1c7e270c4b2bf73e605f2a483afd4f7e93935e8",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 75,
        "deletions": 30,
        "changes": 105,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fd43c3334c201b1c3741ad6b5ef1b546bbe1c1c/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fd43c3334c201b1c3741ad6b5ef1b546bbe1c1c/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=9fd43c3334c201b1c3741ad6b5ef1b546bbe1c1c",
        "patch": "@@ -75,54 +75,87 @@ CCoinsKeyHasher::CCoinsKeyHasher() : salt(GetRandHash()) {}\n \n CCoinsViewCache::CCoinsViewCache(CCoinsView &baseIn, bool fDummy) : CCoinsViewBacked(baseIn), hashBlock(0) { }\n \n-bool CCoinsViewCache::GetCoins(const uint256 &txid, CCoins &coins) {\n-    if (cacheCoins.count(txid)) {\n-        coins = cacheCoins[txid];\n+bool CCoinsViewCache::FetchCoins(const uint256 &txid, CCoinsMap::const_iterator &it) {\n+    // First look up the coins in the write cache\n+    it = cacheWrite.find(txid);\n+    if (it != cacheWrite.end())\n         return true;\n-    }\n-    if (base->GetCoins(txid, coins)) {\n-        cacheCoins[txid] = coins;\n+\n+    // Otherwise look up the coins in the read cache\n+    it = cacheRead.find(txid);\n+    if (it != cacheRead.end())\n         return true;\n-    }\n-    return false;\n-}\n \n-CCoinsMap::iterator CCoinsViewCache::FetchCoins(const uint256 &txid) {\n-    CCoinsMap::iterator it = cacheCoins.find(txid);\n-    if (it != cacheCoins.end())\n-        return it;\n+    // If everything missed, fall back to base\n     CCoins tmp;\n-    if (!base->GetCoins(txid,tmp))\n-        return cacheCoins.end();\n-    CCoinsMap::iterator ret = cacheCoins.insert(it, std::make_pair(txid, CCoins()));\n-    tmp.swap(ret->second);\n-    return ret;\n+    if (!base->GetCoins(txid, tmp))\n+        return false;\n+    CCoinsMap::iterator itnew = cacheRead.insert(it, std::make_pair(txid, CCoins()));\n+    tmp.swap(itnew->second);\n+    it = itnew;\n+    return true;\n+}\n+\n+bool CCoinsViewCache::GetCoins(const uint256 &txid, CCoins &coins) {\n+    CCoinsMap::const_iterator it;\n+    if(FetchCoins(txid, it)) {\n+        coins = it->second;\n+        return true;\n+    }\n+    return false;\n }\n \n const CCoins &CCoinsViewCache::GetCoins(const uint256 &txid) {\n-    CCoinsMap::const_iterator it = FetchCoins(txid);\n-    assert(it != cacheCoins.end());\n+    CCoinsMap::const_iterator it;\n+    bool have = FetchCoins(txid, it);\n+    assert(have);\n     return it->second;\n }\n \n CCoins &CCoinsViewCache::ModifyCoins(const uint256 &txid) {\n-    CCoinsMap::iterator it = FetchCoins(txid);\n-    assert(it != cacheCoins.end());\n-    return it->second;\n+    // If already in the write cache, return a direct reference\n+    CCoinsMap::iterator itw = cacheWrite.find(txid);\n+    if (itw != cacheWrite.end())\n+        return itw->second;\n+\n+    // If in the read cache, swap the entry to the write cache,\n+    // evict it from the read cache\n+    CCoinsMap::iterator itr = cacheRead.find(txid);\n+    if (itr != cacheRead.end())\n+    {\n+        itw = cacheWrite.insert(itw, std::make_pair(txid, CCoins()));\n+        itw->second.swap(itr->second);\n+        cacheRead.erase(itr);\n+        return itw->second;\n+    }\n+\n+    // If everything missed, fall back to base. Load the entry\n+    // directly into the write cache. Croak if the coins do not\n+    // exist.\n+    CCoins tmp;\n+    bool have = base->GetCoins(txid, tmp);\n+    assert(have);\n+    itw = cacheWrite.insert(itw, std::make_pair(txid, CCoins()));\n+    tmp.swap(itw->second);\n+    return itw->second;\n }\n \n bool CCoinsViewCache::SetCoins(const uint256 &txid, const CCoins &coins) {\n-    cacheCoins[txid] = coins;\n+    // Evict from read cache (if present there), then write to write cache\n+    // (overwriting anything already there)\n+    cacheRead.erase(txid);\n+    cacheWrite[txid] = coins;\n     return true;\n }\n \n bool CCoinsViewCache::HaveCoins(const uint256 &txid) {\n-    CCoinsMap::iterator it = FetchCoins(txid);\n+    CCoinsMap::const_iterator it;\n+    bool have = FetchCoins(txid, it);\n     // We're using vtx.empty() instead of IsPruned here for performance reasons,\n     // as we only care about the case where an transaction was replaced entirely\n     // in a reorganization (which wipes vout entirely, as opposed to spending\n     // which just cleans individual outputs).\n-    return (it != cacheCoins.end() && !it->second.vout.empty());\n+    return (have && !it->second.vout.empty());\n }\n \n uint256 CCoinsViewCache::GetBestBlock() {\n@@ -138,20 +171,26 @@ bool CCoinsViewCache::SetBestBlock(const uint256 &hashBlockIn) {\n \n bool CCoinsViewCache::BatchWrite(const CCoinsMap &mapCoins, const uint256 &hashBlockIn) {\n     for (CCoinsMap::const_iterator it = mapCoins.begin(); it != mapCoins.end(); it++)\n-        cacheCoins[it->first] = it->second;\n+    {\n+        cacheRead.erase(it->first);\n+        cacheWrite[it->first] = it->second;\n+    }\n     hashBlock = hashBlockIn;\n     return true;\n }\n \n bool CCoinsViewCache::Flush() {\n-    bool fOk = base->BatchWrite(cacheCoins, hashBlock);\n+    LogPrint(\"coindb\", \"%s: %i in read cache, %i in write cache\\n\", __func__, cacheRead.size(), cacheWrite.size());\n+    bool fOk = base->BatchWrite(cacheWrite, hashBlock);\n+    // Flush write cache only if batch write succeeded, but always flush read cache\n     if (fOk)\n-        cacheCoins.clear();\n+        cacheWrite.clear();\n+    cacheRead.clear();\n     return fOk;\n }\n \n unsigned int CCoinsViewCache::GetCacheSize() {\n-    return cacheCoins.size();\n+    return cacheRead.size() + cacheWrite.size();\n }\n \n const CTxOut &CCoinsViewCache::GetOutputFor(const CTxIn& input)\n@@ -209,3 +248,9 @@ double CCoinsViewCache::GetPriority(const CTransaction &tx, int nHeight)\n     }\n     return tx.ComputePriority(dResult);\n }\n+\n+CCoinsViewCache::~CCoinsViewCache()\n+{\n+    LogPrint(\"coindb\", \"%s: %i in read cache, %i in write cache\\n\", __func__, cacheRead.size(), cacheWrite.size());\n+}\n+"
      },
      {
        "sha": "83ce8b9853f2c9d8b6934e150481bc48e6d75fdb",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fd43c3334c201b1c3741ad6b5ef1b546bbe1c1c/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fd43c3334c201b1c3741ad6b5ef1b546bbe1c1c/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=9fd43c3334c201b1c3741ad6b5ef1b546bbe1c1c",
        "patch": "@@ -326,10 +326,13 @@ class CCoinsViewCache : public CCoinsViewBacked\n {\n protected:\n     uint256 hashBlock;\n-    CCoinsMap cacheCoins;\n+    // Invariant: an entry should be in either the read cache or the write cache, or neither\n+    CCoinsMap cacheRead;\n+    CCoinsMap cacheWrite;\n \n public:\n     CCoinsViewCache(CCoinsView &baseIn, bool fDummy = false);\n+    ~CCoinsViewCache();\n \n     // Standard CCoinsView methods\n     bool GetCoins(const uint256 &txid, CCoins &coins);\n@@ -370,7 +373,7 @@ class CCoinsViewCache : public CCoinsViewBacked\n     const CTxOut &GetOutputFor(const CTxIn& input);\n \n private:\n-    CCoinsMap::iterator FetchCoins(const uint256 &txid);\n+    bool FetchCoins(const uint256 &txid, CCoinsMap::const_iterator &it);\n };\n \n #endif"
      }
    ]
  }
]