[
  {
    "sha": "6de50c3c9a89e72f3152a1df7775572d5c8ad0e7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZGU1MGMzYzlhODllNzJmMzE1MmExZGY3Nzc1NTcyZDVjOGFkMGU3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-09T09:04:49Z"
      },
      "committer": {
        "name": "jtimon",
        "email": "jtimon@blockstream.io",
        "date": "2014-10-10T09:00:59Z"
      },
      "message": "qt: add network-specific style object\n\nMainly cleanups: Gets rid of isTestNet everywhere, by keeping track\nof network-specific theming in a central place.\n\nAlso makes GUI no longer dependent on the network ID enumeration, which\nalleviates concerns about #4802.",
      "tree": {
        "sha": "cf708c7b5b7800b295aeb5bcdb3d742f79b6a31b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cf708c7b5b7800b295aeb5bcdb3d742f79b6a31b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6de50c3c9a89e72f3152a1df7775572d5c8ad0e7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6de50c3c9a89e72f3152a1df7775572d5c8ad0e7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6de50c3c9a89e72f3152a1df7775572d5c8ad0e7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6de50c3c9a89e72f3152a1df7775572d5c8ad0e7/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dec58922d07241f0b502c96f8e5131abccbd5dc1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dec58922d07241f0b502c96f8e5131abccbd5dc1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dec58922d07241f0b502c96f8e5131abccbd5dc1"
      }
    ],
    "stats": {
      "total": 200,
      "additions": 125,
      "deletions": 75
    },
    "files": [
      {
        "sha": "872a0cf1c5358c9ac8d9d7cc4c4195be3c8b6eae",
        "filename": "src/Makefile.qt.include",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6de50c3c9a89e72f3152a1df7775572d5c8ad0e7/src/Makefile.qt.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6de50c3c9a89e72f3152a1df7775572d5c8ad0e7/src/Makefile.qt.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qt.include?ref=6de50c3c9a89e72f3152a1df7775572d5c8ad0e7",
        "patch": "@@ -178,6 +178,7 @@ BITCOIN_QT_H = \\\n   qt/macdockiconhandler.h \\\n   qt/macnotificationhandler.h \\\n   qt/monitoreddatamapper.h \\\n+  qt/networkstyle.h \\\n   qt/notificator.h \\\n   qt/openuridialog.h \\\n   qt/optionsdialog.h \\\n@@ -269,6 +270,7 @@ BITCOIN_QT_CPP = \\\n   qt/guiutil.cpp \\\n   qt/intro.cpp \\\n   qt/monitoreddatamapper.cpp \\\n+  qt/networkstyle.cpp \\\n   qt/notificator.cpp \\\n   qt/optionsdialog.cpp \\\n   qt/optionsmodel.cpp \\"
      },
      {
        "sha": "9872ebc1f640ea632d72985d908838eba202d4bd",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 13,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6de50c3c9a89e72f3152a1df7775572d5c8ad0e7/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6de50c3c9a89e72f3152a1df7775572d5c8ad0e7/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=6de50c3c9a89e72f3152a1df7775572d5c8ad0e7",
        "patch": "@@ -12,6 +12,7 @@\n #include \"guiconstants.h\"\n #include \"guiutil.h\"\n #include \"intro.h\"\n+#include \"networkstyle.h\"\n #include \"optionsmodel.h\"\n #include \"splashscreen.h\"\n #include \"utilitydialog.h\"\n@@ -190,9 +191,9 @@ class BitcoinApplication: public QApplication\n     /// Create options model\n     void createOptionsModel();\n     /// Create main window\n-    void createWindow(bool isaTestNet);\n+    void createWindow(const NetworkStyle *networkStyle);\n     /// Create splash screen\n-    void createSplashScreen(bool isaTestNet);\n+    void createSplashScreen(const NetworkStyle *networkStyle);\n \n     /// Request core initialization\n     void requestInitialize();\n@@ -331,18 +332,18 @@ void BitcoinApplication::createOptionsModel()\n     optionsModel = new OptionsModel();\n }\n \n-void BitcoinApplication::createWindow(bool isaTestNet)\n+void BitcoinApplication::createWindow(const NetworkStyle *networkStyle)\n {\n-    window = new BitcoinGUI(isaTestNet, 0);\n+    window = new BitcoinGUI(networkStyle, 0);\n \n     pollShutdownTimer = new QTimer(window);\n     connect(pollShutdownTimer, SIGNAL(timeout()), window, SLOT(detectShutdown()));\n     pollShutdownTimer->start(200);\n }\n \n-void BitcoinApplication::createSplashScreen(bool isaTestNet)\n+void BitcoinApplication::createSplashScreen(const NetworkStyle *networkStyle)\n {\n-    SplashScreen *splash = new SplashScreen(0, isaTestNet);\n+    SplashScreen *splash = new SplashScreen(0, networkStyle);\n     // We don't hold a direct pointer to the splash screen after creation, so use\n     // Qt::WA_DeleteOnClose to make sure that the window will be deleted eventually.\n     splash->setAttribute(Qt::WA_DeleteOnClose);\n@@ -572,12 +573,10 @@ int main(int argc, char *argv[])\n     if (!PaymentServer::ipcParseCommandLine(argc, argv))\n         exit(0);\n #endif\n-    bool isaTestNet = Params().NetworkID() != CBaseChainParams::MAIN;\n+    QScopedPointer<const NetworkStyle> networkStyle(NetworkStyle::instantiate(QString::fromStdString(Params().NetworkIDString())));\n+    assert(!networkStyle.isNull());\n     // Allow for separate UI settings for testnets\n-    if (isaTestNet)\n-        QApplication::setApplicationName(QAPP_APP_NAME_TESTNET);\n-    else\n-        QApplication::setApplicationName(QAPP_APP_NAME_DEFAULT);\n+    QApplication::setApplicationName(networkStyle->getAppName());\n     // Re-initialize translations after changing application name (language in network-specific settings can be different)\n     initTranslations(qtTranslatorBase, qtTranslator, translatorBase, translator);\n \n@@ -617,11 +616,11 @@ int main(int argc, char *argv[])\n     uiInterface.InitMessage.connect(InitMessage);\n \n     if (GetBoolArg(\"-splash\", true) && !GetBoolArg(\"-min\", false))\n-        app.createSplashScreen(isaTestNet);\n+        app.createSplashScreen(networkStyle.data());\n \n     try\n     {\n-        app.createWindow(isaTestNet);\n+        app.createWindow(networkStyle.data());\n         app.requestInitialize();\n #if defined(Q_OS_WIN) && QT_VERSION >= 0x050000\n         WinShutdownMonitor::registerShutdownBlockReason(QObject::tr(\"Bitcoin Core didn't yet exit safely...\"), (HWND)app.getMainWinId());"
      },
      {
        "sha": "8a945606dcd000af14f1e91ba7c506bbb52c99d3",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 42,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6de50c3c9a89e72f3152a1df7775572d5c8ad0e7/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6de50c3c9a89e72f3152a1df7775572d5c8ad0e7/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=6de50c3c9a89e72f3152a1df7775572d5c8ad0e7",
        "patch": "@@ -8,6 +8,7 @@\n #include \"clientmodel.h\"\n #include \"guiconstants.h\"\n #include \"guiutil.h\"\n+#include \"networkstyle.h\"\n #include \"notificator.h\"\n #include \"openuridialog.h\"\n #include \"optionsdialog.h\"\n@@ -59,7 +60,7 @@\n \n const QString BitcoinGUI::DEFAULT_WALLET = \"~Default\";\n \n-BitcoinGUI::BitcoinGUI(bool fIsTestnet, QWidget *parent) :\n+BitcoinGUI::BitcoinGUI(const NetworkStyle *networkStyle, QWidget *parent) :\n     QMainWindow(parent),\n     clientModel(0),\n     walletFrame(0),\n@@ -112,26 +113,13 @@ BitcoinGUI::BitcoinGUI(bool fIsTestnet, QWidget *parent) :\n     } else {\n         windowTitle += tr(\"Node\");\n     }\n-\n-    if (!fIsTestnet)\n-    {\n+    windowTitle += \" \" + networkStyle->getTitleAddText();\n #ifndef Q_OS_MAC\n-        QApplication::setWindowIcon(QIcon(\":icons/bitcoin\"));\n-        setWindowIcon(QIcon(\":icons/bitcoin\"));\n+    QApplication::setWindowIcon(networkStyle->getAppIcon());\n+    setWindowIcon(networkStyle->getAppIcon());\n #else\n-        MacDockIconHandler::instance()->setIcon(QIcon(\":icons/bitcoin\"));\n+    MacDockIconHandler::instance()->setIcon(networkStyle->getAppIcon());\n #endif\n-    }\n-    else\n-    {\n-        windowTitle += \" \" + tr(\"[testnet]\");\n-#ifndef Q_OS_MAC\n-        QApplication::setWindowIcon(QIcon(\":icons/bitcoin_testnet\"));\n-        setWindowIcon(QIcon(\":icons/bitcoin_testnet\"));\n-#else\n-        MacDockIconHandler::instance()->setIcon(QIcon(\":icons/bitcoin_testnet\"));\n-#endif\n-    }\n     setWindowTitle(windowTitle);\n \n #if defined(Q_OS_MAC) && QT_VERSION < 0x050000\n@@ -161,7 +149,7 @@ BitcoinGUI::BitcoinGUI(bool fIsTestnet, QWidget *parent) :\n \n     // Create actions for the toolbar, menu bar and tray/dock icon\n     // Needs walletFrame to be initialized\n-    createActions(fIsTestnet);\n+    createActions(networkStyle);\n \n     // Create application menu bar\n     createMenuBar();\n@@ -170,7 +158,7 @@ BitcoinGUI::BitcoinGUI(bool fIsTestnet, QWidget *parent) :\n     createToolBars();\n \n     // Create system tray icon and notification\n-    createTrayIcon(fIsTestnet);\n+    createTrayIcon(networkStyle);\n \n     // Create status bar\n     statusBar();\n@@ -248,7 +236,7 @@ BitcoinGUI::~BitcoinGUI()\n #endif\n }\n \n-void BitcoinGUI::createActions(bool fIsTestnet)\n+void BitcoinGUI::createActions(const NetworkStyle *networkStyle)\n {\n     QActionGroup *tabGroup = new QActionGroup(this);\n \n@@ -295,10 +283,7 @@ void BitcoinGUI::createActions(bool fIsTestnet)\n     quitAction->setStatusTip(tr(\"Quit application\"));\n     quitAction->setShortcut(QKeySequence(Qt::CTRL + Qt::Key_Q));\n     quitAction->setMenuRole(QAction::QuitRole);\n-    if (!fIsTestnet)\n-        aboutAction = new QAction(QIcon(\":/icons/bitcoin\"), tr(\"&About Bitcoin Core\"), this);\n-    else\n-        aboutAction = new QAction(QIcon(\":/icons/bitcoin_testnet\"), tr(\"&About Bitcoin Core\"), this);\n+    aboutAction = new QAction(networkStyle->getAppIcon(), tr(\"&About Bitcoin Core\"), this);\n     aboutAction->setStatusTip(tr(\"Show information about Bitcoin Core\"));\n     aboutAction->setMenuRole(QAction::AboutRole);\n #if QT_VERSION < 0x050000\n@@ -311,10 +296,7 @@ void BitcoinGUI::createActions(bool fIsTestnet)\n     optionsAction = new QAction(QIcon(\":/icons/options\"), tr(\"&Options...\"), this);\n     optionsAction->setStatusTip(tr(\"Modify configuration options for Bitcoin\"));\n     optionsAction->setMenuRole(QAction::PreferencesRole);\n-    if (!fIsTestnet)\n-        toggleHideAction = new QAction(QIcon(\":/icons/bitcoin\"), tr(\"&Show / Hide\"), this);\n-    else\n-        toggleHideAction = new QAction(QIcon(\":/icons/bitcoin_testnet\"), tr(\"&Show / Hide\"), this);\n+    toggleHideAction = new QAction(networkStyle->getAppIcon(), tr(\"&Show / Hide\"), this);\n     toggleHideAction->setStatusTip(tr(\"Show or hide the main Window\"));\n \n     encryptWalletAction = new QAction(QIcon(\":/icons/lock_closed\"), tr(\"&Encrypt Wallet...\"), this);\n@@ -505,22 +487,13 @@ void BitcoinGUI::setWalletActionsEnabled(bool enabled)\n     openAction->setEnabled(enabled);\n }\n \n-void BitcoinGUI::createTrayIcon(bool fIsTestnet)\n+void BitcoinGUI::createTrayIcon(const NetworkStyle *networkStyle)\n {\n #ifndef Q_OS_MAC\n     trayIcon = new QSystemTrayIcon(this);\n-\n-    if (!fIsTestnet)\n-    {\n-        trayIcon->setToolTip(tr(\"Bitcoin Core client\"));\n-        trayIcon->setIcon(QIcon(\":/icons/bitcoin\"));\n-    }\n-    else\n-    {\n-        trayIcon->setToolTip(tr(\"Bitcoin Core client\") + \" \" + tr(\"[testnet]\"));\n-        trayIcon->setIcon(QIcon(\":/icons/bitcoin_testnet\"));\n-    }\n-\n+    QString toolTip = tr(\"Bitcoin Core client\") + \" \" + networkStyle->getTitleAddText();\n+    trayIcon->setToolTip(toolTip);\n+    trayIcon->setIcon(networkStyle->getAppIcon());\n     trayIcon->show();\n #endif\n "
      },
      {
        "sha": "f65f0e91379d93f3c0ee0e88da101ab747ce198e",
        "filename": "src/qt/bitcoingui.h",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6de50c3c9a89e72f3152a1df7775572d5c8ad0e7/src/qt/bitcoingui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6de50c3c9a89e72f3152a1df7775572d5c8ad0e7/src/qt/bitcoingui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.h?ref=6de50c3c9a89e72f3152a1df7775572d5c8ad0e7",
        "patch": "@@ -19,6 +19,7 @@\n #include <QSystemTrayIcon>\n \n class ClientModel;\n+class NetworkStyle;\n class Notificator;\n class OptionsModel;\n class RPCConsole;\n@@ -46,7 +47,7 @@ class BitcoinGUI : public QMainWindow\n public:\n     static const QString DEFAULT_WALLET;\n \n-    explicit BitcoinGUI(bool fIsTestnet = false, QWidget *parent = 0);\n+    explicit BitcoinGUI(const NetworkStyle *networkStyle, QWidget *parent = 0);\n     ~BitcoinGUI();\n \n     /** Set the client model.\n@@ -114,13 +115,13 @@ class BitcoinGUI : public QMainWindow\n     int spinnerFrame;\n \n     /** Create the main UI actions. */\n-    void createActions(bool fIsTestnet);\n+    void createActions(const NetworkStyle *networkStyle);\n     /** Create the menu bar and sub-menus. */\n     void createMenuBar();\n     /** Create the toolbars */\n     void createToolBars();\n     /** Create system tray icon and notification */\n-    void createTrayIcon(bool fIsTestnet);\n+    void createTrayIcon(const NetworkStyle *networkStyle);\n     /** Create system tray menu (or setup the dock menu) */\n     void createTrayIconMenu();\n "
      },
      {
        "sha": "62c44703f470c2c76955694a01d382d74e23eb37",
        "filename": "src/qt/networkstyle.cpp",
        "status": "added",
        "additions": 47,
        "deletions": 0,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6de50c3c9a89e72f3152a1df7775572d5c8ad0e7/src/qt/networkstyle.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6de50c3c9a89e72f3152a1df7775572d5c8ad0e7/src/qt/networkstyle.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/networkstyle.cpp?ref=6de50c3c9a89e72f3152a1df7775572d5c8ad0e7",
        "patch": "@@ -0,0 +1,47 @@\n+// Copyright (c) 2014 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"networkstyle.h\"\n+\n+#include \"guiconstants.h\"\n+\n+#include <QApplication>\n+\n+static const struct {\n+    const char *networkId;\n+    const char *appName;\n+    const char *appIcon;\n+    const char *titleAddText;\n+    const char *splashImage;\n+} network_styles[] = {\n+    {\"main\", QAPP_APP_NAME_DEFAULT, \":/icons/bitcoin\", \"\", \":/images/splash\"},\n+    {\"test\", QAPP_APP_NAME_TESTNET, \":/icons/bitcoin_testnet\", QT_TRANSLATE_NOOP(\"SplashScreen\", \"[testnet]\"), \":/images/splash_testnet\"},\n+    {\"regtest\", QAPP_APP_NAME_TESTNET, \":/icons/bitcoin_testnet\", \"[regtest]\", \":/images/splash_testnet\"}\n+};\n+static const unsigned network_styles_count = sizeof(network_styles)/sizeof(*network_styles);\n+\n+// titleAddText needs to be const char* for tr()\n+NetworkStyle::NetworkStyle(const QString &appName, const QString &appIcon, const char *titleAddText, const QString &splashImage):\n+    appName(appName),\n+    appIcon(appIcon),\n+    titleAddText(qApp->translate(\"SplashScreen\", titleAddText)),\n+    splashImage(splashImage)\n+{\n+}\n+\n+const NetworkStyle *NetworkStyle::instantiate(const QString &networkId)\n+{\n+    for (unsigned x=0; x<network_styles_count; ++x)\n+    {\n+        if (networkId == network_styles[x].networkId)\n+        {\n+            return new NetworkStyle(\n+                    network_styles[x].appName,\n+                    network_styles[x].appIcon,\n+                    network_styles[x].titleAddText,\n+                    network_styles[x].splashImage);\n+        }\n+    }\n+    return 0;\n+}"
      },
      {
        "sha": "99304d61a3abe20babc7945d355ed25f2a3e7850",
        "filename": "src/qt/networkstyle.h",
        "status": "added",
        "additions": 33,
        "deletions": 0,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6de50c3c9a89e72f3152a1df7775572d5c8ad0e7/src/qt/networkstyle.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6de50c3c9a89e72f3152a1df7775572d5c8ad0e7/src/qt/networkstyle.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/networkstyle.h?ref=6de50c3c9a89e72f3152a1df7775572d5c8ad0e7",
        "patch": "@@ -0,0 +1,33 @@\n+// Copyright (c) 2014 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef H_NETWORKSTYLE\n+#define H_NETWORKSTYLE\n+\n+#include <QIcon>\n+#include <QPixmap>\n+#include <QString>\n+\n+/* Coin network-specific GUI style information */\n+class NetworkStyle\n+{\n+public:\n+    /** Get style associated with provided BIP70 network id, or 0 if not known */\n+    static const NetworkStyle *instantiate(const QString &networkId);\n+\n+    const QString &getAppName() const { return appName; }\n+    const QIcon &getAppIcon() const { return appIcon; }\n+    const QString &getTitleAddText() const { return titleAddText; }\n+    const QPixmap &getSplashImage() const { return splashImage; }\n+\n+private:\n+    NetworkStyle(const QString &appName, const QString &appIcon, const char *titleAddText, const QString &splashImage);\n+\n+    QString appName;\n+    QIcon appIcon;\n+    QString titleAddText;\n+    QPixmap splashImage;\n+};\n+\n+#endif // H_NETWORKSTYLE"
      },
      {
        "sha": "360008ea8336f076b224fa467fd7927d9873c23f",
        "filename": "src/qt/splashscreen.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 16,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6de50c3c9a89e72f3152a1df7775572d5c8ad0e7/src/qt/splashscreen.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6de50c3c9a89e72f3152a1df7775572d5c8ad0e7/src/qt/splashscreen.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/splashscreen.cpp?ref=6de50c3c9a89e72f3152a1df7775572d5c8ad0e7",
        "patch": "@@ -6,6 +6,7 @@\n \n #include \"clientversion.h\"\n #include \"init.h\"\n+#include \"networkstyle.h\"\n #include \"ui_interface.h\"\n #include \"util.h\"\n #include \"version.h\"\n@@ -19,7 +20,7 @@\n #include <QDesktopWidget>\n #include <QPainter>\n \n-SplashScreen::SplashScreen(Qt::WindowFlags f, bool isTestNet) :\n+SplashScreen::SplashScreen(Qt::WindowFlags f, const NetworkStyle *networkStyle) :\n     QWidget(0, f), curAlignment(0)\n {\n     // set reference point, paddings\n@@ -34,17 +35,12 @@ SplashScreen::SplashScreen(Qt::WindowFlags f, bool isTestNet) :\n     QString titleText       = tr(\"Bitcoin Core\");\n     QString versionText     = QString(\"Version %1\").arg(QString::fromStdString(FormatFullVersion()));\n     QString copyrightText   = QChar(0xA9)+QString(\" 2009-%1 \").arg(COPYRIGHT_YEAR) + QString(tr(\"The Bitcoin Core developers\"));\n-    QString testnetAddText  = QString(tr(\"[testnet]\")); // define text to place as single text object\n+    QString titleAddText    = networkStyle->getTitleAddText();\n \n     QString font            = \"Arial\";\n \n     // load the bitmap for writing some text over it\n-    if(isTestNet) {\n-        pixmap     = QPixmap(\":/images/splash_testnet\");\n-    }\n-    else {\n-        pixmap     = QPixmap(\":/images/splash\");\n-    }\n+    pixmap     = networkStyle->getSplashImage();\n \n     QPainter pixPaint(&pixmap);\n     pixPaint.setPen(QColor(100,100,100));\n@@ -78,23 +74,20 @@ SplashScreen::SplashScreen(Qt::WindowFlags f, bool isTestNet) :\n     pixPaint.setFont(QFont(font, 10*fontFactor));\n     pixPaint.drawText(pixmap.width()-titleTextWidth-paddingRight,paddingTop+titleCopyrightVSpace,copyrightText);\n \n-    // draw testnet string if testnet is on\n-    if(isTestNet) {\n+    // draw additional text if special network\n+    if(!titleAddText.isEmpty()) {\n         QFont boldFont = QFont(font, 10*fontFactor);\n         boldFont.setWeight(QFont::Bold);\n         pixPaint.setFont(boldFont);\n         fm = pixPaint.fontMetrics();\n-        int testnetAddTextWidth  = fm.width(testnetAddText);\n-        pixPaint.drawText(pixmap.width()-testnetAddTextWidth-10,15,testnetAddText);\n+        int titleAddTextWidth  = fm.width(titleAddText);\n+        pixPaint.drawText(pixmap.width()-titleAddTextWidth-10,15,titleAddText);\n     }\n \n     pixPaint.end();\n \n     // Set window title\n-    if(isTestNet)\n-        setWindowTitle(titleText + \" \" + testnetAddText);\n-    else\n-        setWindowTitle(titleText);\n+    setWindowTitle(titleText + \" \" + titleAddText);\n \n     // Resize window and move to center of desktop, disallow resizing\n     QRect r(QPoint(), pixmap.size());"
      },
      {
        "sha": "128edadbee40bd96ad23c4e089e33b759664f994",
        "filename": "src/qt/splashscreen.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6de50c3c9a89e72f3152a1df7775572d5c8ad0e7/src/qt/splashscreen.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6de50c3c9a89e72f3152a1df7775572d5c8ad0e7/src/qt/splashscreen.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/splashscreen.h?ref=6de50c3c9a89e72f3152a1df7775572d5c8ad0e7",
        "patch": "@@ -7,6 +7,8 @@\n \n #include <QSplashScreen>\n \n+class NetworkStyle;\n+\n /** Class for the splashscreen with information of the running client.\n  *\n  * @note this is intentionally not a QSplashScreen. Bitcoin Core initialization\n@@ -18,7 +20,7 @@ class SplashScreen : public QWidget\n     Q_OBJECT\n \n public:\n-    explicit SplashScreen(Qt::WindowFlags f, bool isTestNet);\n+    explicit SplashScreen(Qt::WindowFlags f, const NetworkStyle *networkStyle);\n     ~SplashScreen();\n \n protected:"
      }
    ]
  },
  {
    "sha": "e11712df7ea5e946c5ec008d1c761187b495f872",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMTE3MTJkZjdlYTVlOTQ2YzVlYzAwOGQxYzc2MTE4N2I0OTVmODcy",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@blockstream.io",
        "date": "2014-08-31T19:32:23Z"
      },
      "committer": {
        "name": "jtimon",
        "email": "jtimon@blockstream.io",
        "date": "2014-10-10T09:00:59Z"
      },
      "message": "Move checkpoint data selection to chainparams",
      "tree": {
        "sha": "ff134f106e1dddf80454ce6feff6019aaaeae82c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ff134f106e1dddf80454ce6feff6019aaaeae82c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e11712df7ea5e946c5ec008d1c761187b495f872",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e11712df7ea5e946c5ec008d1c761187b495f872",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e11712df7ea5e946c5ec008d1c761187b495f872",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e11712df7ea5e946c5ec008d1c761187b495f872/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6de50c3c9a89e72f3152a1df7775572d5c8ad0e7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6de50c3c9a89e72f3152a1df7775572d5c8ad0e7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6de50c3c9a89e72f3152a1df7775572d5c8ad0e7"
      }
    ],
    "stats": {
      "total": 167,
      "additions": 89,
      "deletions": 78
    },
    "files": [
      {
        "sha": "a81b618208e18d2937280ed57243379c60cb3299",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 71,
        "deletions": 1,
        "changes": 72,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e11712df7ea5e946c5ec008d1c761187b495f872/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e11712df7ea5e946c5ec008d1c761187b495f872/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=e11712df7ea5e946c5ec008d1c761187b495f872",
        "patch": "@@ -44,6 +44,57 @@ static void convertSeed6(std::vector<CAddress> &vSeedsOut, const SeedSpec6 *data\n     }\n }\n \n+    // What makes a good checkpoint block?\n+    // + Is surrounded by blocks with reasonable timestamps\n+    //   (no blocks before with a timestamp after, none after with\n+    //    timestamp before)\n+    // + Contains no strange transactions\n+static Checkpoints::MapCheckpoints mapCheckpoints =\n+        boost::assign::map_list_of\n+        ( 11111, uint256(\"0x0000000069e244f73d78e8fd29ba2fd2ed618bd6fa2ee92559f542fdb26e7c1d\"))\n+        ( 33333, uint256(\"0x000000002dd5588a74784eaa7ab0507a18ad16a236e7b1ce69f00d7ddfb5d0a6\"))\n+        ( 74000, uint256(\"0x0000000000573993a3c9e41ce34471c079dcf5f52a0e824a81e7f953b8661a20\"))\n+        (105000, uint256(\"0x00000000000291ce28027faea320c8d2b054b2e0fe44a773f3eefb151d6bdc97\"))\n+        (134444, uint256(\"0x00000000000005b12ffd4cd315cd34ffd4a594f430ac814c91184a0d42d2b0fe\"))\n+        (168000, uint256(\"0x000000000000099e61ea72015e79632f216fe6cb33d7899acb35b75c8303b763\"))\n+        (193000, uint256(\"0x000000000000059f452a5f7340de6682a977387c17010ff6e6c3bd83ca8b1317\"))\n+        (210000, uint256(\"0x000000000000048b95347e83192f69cf0366076336c639f9b7228e9ba171342e\"))\n+        (216116, uint256(\"0x00000000000001b4f4b433e81ee46494af945cf96014816a4e2370f11b23df4e\"))\n+        (225430, uint256(\"0x00000000000001c108384350f74090433e7fcf79a606b8e797f065b130575932\"))\n+        (250000, uint256(\"0x000000000000003887df1f29024b06fc2200b55f8af8f35453d7be294df2d214\"))\n+        (279000, uint256(\"0x0000000000000001ae8c72a0b0c301f67e3afca10e819efa9041e458e9bd7e40\"))\n+        (295000, uint256(\"0x00000000000000004d9b4ef50f0f9d686fd69db2e03af35a100370c64632a983\"))\n+        ;\n+static const Checkpoints::CCheckpointData data = {\n+        &mapCheckpoints,\n+        1397080064, // * UNIX timestamp of last checkpoint block\n+        36544669,   // * total number of transactions between genesis and last checkpoint\n+                    //   (the tx=... number in the SetBestChain debug.log lines)\n+        60000.0     // * estimated number of transactions per day after checkpoint\n+    };\n+\n+static Checkpoints::MapCheckpoints mapCheckpointsTestnet =\n+        boost::assign::map_list_of\n+        ( 546, uint256(\"000000002a936ca763904c3c35fce2f3556c559c0214345d31b1bcebf76acb70\"))\n+        ;\n+static const Checkpoints::CCheckpointData dataTestnet = {\n+        &mapCheckpointsTestnet,\n+        1337966069,\n+        1488,\n+        300\n+    };\n+\n+static Checkpoints::MapCheckpoints mapCheckpointsRegtest =\n+        boost::assign::map_list_of\n+        ( 0, uint256(\"0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206\"))\n+        ;\n+static const Checkpoints::CCheckpointData dataRegtest = {\n+        &mapCheckpointsRegtest,\n+        0,\n+        0,\n+        0\n+    };\n+\n class CMainParams : public CChainParams {\n public:\n     CMainParams() {\n@@ -117,6 +168,11 @@ class CMainParams : public CChainParams {\n         fMineBlocksOnDemand = false;\n         fSkipProofOfWorkCheck = false;\n     }\n+\n+    const Checkpoints::CCheckpointData& Checkpoints() const \n+    {\n+        return data;\n+    }\n };\n static CMainParams mainParams;\n \n@@ -173,6 +229,10 @@ class CTestNetParams : public CMainParams {\n         fRequireStandard = false;\n         fMineBlocksOnDemand = false;\n     }\n+    const Checkpoints::CCheckpointData& Checkpoints() const \n+    {\n+        return dataTestnet;\n+    }\n };\n static CTestNetParams testNetParams;\n \n@@ -212,6 +272,10 @@ class CRegTestParams : public CTestNetParams {\n         fRequireStandard = false;\n         fMineBlocksOnDemand = true;\n     }\n+    const Checkpoints::CCheckpointData& Checkpoints() const \n+    {\n+        return dataRegtest;\n+    }\n };\n static CRegTestParams regTestParams;\n \n@@ -233,7 +297,13 @@ class CUnitTestParams : public CMainParams, public CModifiableParams {\n         fAllowMinDifficultyBlocks = false;\n         fMineBlocksOnDemand = true;\n     }\n-public:\n+\n+    const Checkpoints::CCheckpointData& Checkpoints() const \n+    {\n+        // UnitTest share the same checkpoints as MAIN\n+        return data;\n+    }\n+\n     // Published setters to allow changing values in unit test cases\n     virtual void setSubsidyHalvingInterval(int anSubsidyHalvingInterval)  { nSubsidyHalvingInterval=anSubsidyHalvingInterval; }\n     virtual void setEnforceBlockUpgradeMajority(int anEnforceBlockUpgradeMajority)  { nEnforceBlockUpgradeMajority=anEnforceBlockUpgradeMajority; }"
      },
      {
        "sha": "d3b1781b4d8bd507daeba27be05727f462dd053b",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e11712df7ea5e946c5ec008d1c761187b495f872/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e11712df7ea5e946c5ec008d1c761187b495f872/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=e11712df7ea5e946c5ec008d1c761187b495f872",
        "patch": "@@ -8,6 +8,7 @@\n \n #include \"core.h\"\n #include \"chainparamsbase.h\"\n+#include \"checkpoints.h\"\n #include \"protocol.h\"\n #include \"uint256.h\"\n \n@@ -77,6 +78,7 @@ class CChainParams\n     const std::vector<CDNSSeedData>& DNSSeeds() const { return vSeeds; }\n     const std::vector<unsigned char>& Base58Prefix(Base58Type type) const { return base58Prefixes[type]; }\n     const std::vector<CAddress>& FixedSeeds() const { return vFixedSeeds; }\n+    virtual const Checkpoints::CCheckpointData& Checkpoints() const = 0;\n protected:\n     CChainParams() {}\n "
      },
      {
        "sha": "fbde47339d9c138b79ad88eea6b349d64c4e77a4",
        "filename": "src/checkpoints.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 76,
        "changes": 81,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e11712df7ea5e946c5ec008d1c761187b495f872/src/checkpoints.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e11712df7ea5e946c5ec008d1c761187b495f872/src/checkpoints.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.cpp?ref=e11712df7ea5e946c5ec008d1c761187b495f872",
        "patch": "@@ -4,102 +4,31 @@\n \n #include \"checkpoints.h\"\n \n+#include \"chainparams.h\"\n #include \"main.h\"\n #include \"uint256.h\"\n \n #include <stdint.h>\n \n-#include <boost/assign/list_of.hpp> // for 'map_list_of()'\n #include <boost/foreach.hpp>\n \n namespace Checkpoints {\n \n-    typedef std::map<int, uint256> MapCheckpoints;\n-\n     // How many times we expect transactions after the last checkpoint to\n     // be slower. This number is a compromise, as it can't be accurate for\n     // every system. When reindexing from a fast disk with a slow CPU, it\n     // can be up to 20, while when downloading from a slow network with a\n     // fast multicore CPU, it won't be much higher than 1.\n     static const double SIGCHECK_VERIFICATION_FACTOR = 5.0;\n \n-    struct CCheckpointData {\n-        const MapCheckpoints *mapCheckpoints;\n-        int64_t nTimeLastCheckpoint;\n-        int64_t nTransactionsLastCheckpoint;\n-        double fTransactionsPerDay;\n-    };\n-\n     bool fEnabled = true;\n \n-    // What makes a good checkpoint block?\n-    // + Is surrounded by blocks with reasonable timestamps\n-    //   (no blocks before with a timestamp after, none after with\n-    //    timestamp before)\n-    // + Contains no strange transactions\n-    static MapCheckpoints mapCheckpoints =\n-        boost::assign::map_list_of\n-        ( 11111, uint256(\"0x0000000069e244f73d78e8fd29ba2fd2ed618bd6fa2ee92559f542fdb26e7c1d\"))\n-        ( 33333, uint256(\"0x000000002dd5588a74784eaa7ab0507a18ad16a236e7b1ce69f00d7ddfb5d0a6\"))\n-        ( 74000, uint256(\"0x0000000000573993a3c9e41ce34471c079dcf5f52a0e824a81e7f953b8661a20\"))\n-        (105000, uint256(\"0x00000000000291ce28027faea320c8d2b054b2e0fe44a773f3eefb151d6bdc97\"))\n-        (134444, uint256(\"0x00000000000005b12ffd4cd315cd34ffd4a594f430ac814c91184a0d42d2b0fe\"))\n-        (168000, uint256(\"0x000000000000099e61ea72015e79632f216fe6cb33d7899acb35b75c8303b763\"))\n-        (193000, uint256(\"0x000000000000059f452a5f7340de6682a977387c17010ff6e6c3bd83ca8b1317\"))\n-        (210000, uint256(\"0x000000000000048b95347e83192f69cf0366076336c639f9b7228e9ba171342e\"))\n-        (216116, uint256(\"0x00000000000001b4f4b433e81ee46494af945cf96014816a4e2370f11b23df4e\"))\n-        (225430, uint256(\"0x00000000000001c108384350f74090433e7fcf79a606b8e797f065b130575932\"))\n-        (250000, uint256(\"0x000000000000003887df1f29024b06fc2200b55f8af8f35453d7be294df2d214\"))\n-        (279000, uint256(\"0x0000000000000001ae8c72a0b0c301f67e3afca10e819efa9041e458e9bd7e40\"))\n-        (295000, uint256(\"0x00000000000000004d9b4ef50f0f9d686fd69db2e03af35a100370c64632a983\"))\n-        ;\n-    static const CCheckpointData data = {\n-        &mapCheckpoints,\n-        1397080064, // * UNIX timestamp of last checkpoint block\n-        36544669,   // * total number of transactions between genesis and last checkpoint\n-                    //   (the tx=... number in the SetBestChain debug.log lines)\n-        60000.0     // * estimated number of transactions per day after checkpoint\n-    };\n-\n-    static MapCheckpoints mapCheckpointsTestnet =\n-        boost::assign::map_list_of\n-        ( 546, uint256(\"000000002a936ca763904c3c35fce2f3556c559c0214345d31b1bcebf76acb70\"))\n-        ;\n-    static const CCheckpointData dataTestnet = {\n-        &mapCheckpointsTestnet,\n-        1337966069,\n-        1488,\n-        300\n-    };\n-\n-    static MapCheckpoints mapCheckpointsRegtest =\n-        boost::assign::map_list_of\n-        ( 0, uint256(\"0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206\"))\n-        ;\n-    static const CCheckpointData dataRegtest = {\n-        &mapCheckpointsRegtest,\n-        0,\n-        0,\n-        0\n-    };\n-\n-    const CCheckpointData &Checkpoints() {\n-        if (Params().NetworkID() == CBaseChainParams::TESTNET)\n-            return dataTestnet;\n-        else if (Params().NetworkID() == CBaseChainParams::MAIN)\n-            return data;\n-        else if (Params().NetworkID() == CBaseChainParams::UNITTEST) // UnitTest share the same checkpoints as MAIN\n-            return data;\n-        else\n-            return dataRegtest;\n-    }\n-\n     bool CheckBlock(int nHeight, const uint256& hash)\n     {\n         if (!fEnabled)\n             return true;\n \n-        const MapCheckpoints& checkpoints = *Checkpoints().mapCheckpoints;\n+        const MapCheckpoints& checkpoints = *Params().Checkpoints().mapCheckpoints;\n \n         MapCheckpoints::const_iterator i = checkpoints.find(nHeight);\n         if (i == checkpoints.end()) return true;\n@@ -119,7 +48,7 @@ namespace Checkpoints {\n         // Work is defined as: 1.0 per transaction before the last checkpoint, and\n         // fSigcheckVerificationFactor per transaction after.\n \n-        const CCheckpointData &data = Checkpoints();\n+        const CCheckpointData &data = Params().Checkpoints();\n \n         if (pindex->nChainTx <= data.nTransactionsLastCheckpoint) {\n             double nCheapBefore = pindex->nChainTx;\n@@ -143,7 +72,7 @@ namespace Checkpoints {\n         if (!fEnabled)\n             return 0;\n \n-        const MapCheckpoints& checkpoints = *Checkpoints().mapCheckpoints;\n+        const MapCheckpoints& checkpoints = *Params().Checkpoints().mapCheckpoints;\n \n         return checkpoints.rbegin()->first;\n     }\n@@ -153,7 +82,7 @@ namespace Checkpoints {\n         if (!fEnabled)\n             return NULL;\n \n-        const MapCheckpoints& checkpoints = *Checkpoints().mapCheckpoints;\n+        const MapCheckpoints& checkpoints = *Params().Checkpoints().mapCheckpoints;\n \n         BOOST_REVERSE_FOREACH(const MapCheckpoints::value_type& i, checkpoints)\n         {"
      },
      {
        "sha": "b5b620fa6b2e153ad81f78bffea683bca0d911d6",
        "filename": "src/checkpoints.h",
        "status": "modified",
        "additions": 11,
        "deletions": 1,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e11712df7ea5e946c5ec008d1c761187b495f872/src/checkpoints.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e11712df7ea5e946c5ec008d1c761187b495f872/src/checkpoints.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.h?ref=e11712df7ea5e946c5ec008d1c761187b495f872",
        "patch": "@@ -5,16 +5,26 @@\n #ifndef BITCOIN_CHECKPOINT_H\n #define BITCOIN_CHECKPOINT_H\n \n+#include \"uint256.h\"\n+\n #include <map>\n \n class CBlockIndex;\n-class uint256;\n \n /** Block-chain checkpoints are compiled-in sanity checks.\n  * They are updated every release or three.\n  */\n namespace Checkpoints\n {\n+typedef std::map<int, uint256> MapCheckpoints;\n+\n+struct CCheckpointData {\n+    const MapCheckpoints *mapCheckpoints;\n+    int64_t nTimeLastCheckpoint;\n+    int64_t nTransactionsLastCheckpoint;\n+    double fTransactionsPerDay;\n+};\n+\n // Returns true if block passes checkpoint checks\n bool CheckBlock(int nHeight, const uint256& hash);\n "
      }
    ]
  },
  {
    "sha": "cc972107997122cb31f015b4e70f81781dbce784",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYzk3MjEwNzk5NzEyMmNiMzFmMDE1YjRlNzBmODE3ODFkYmNlNzg0",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@blockstream.io",
        "date": "2014-08-31T20:32:52Z"
      },
      "committer": {
        "name": "jtimon",
        "email": "jtimon@blockstream.io",
        "date": "2014-10-10T09:01:00Z"
      },
      "message": "Add fTestnetToBeDeprecatedFieldRPC to CChainParams",
      "tree": {
        "sha": "fa8a7ab017f33df0ca599c0ca6dd0281e62574bb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fa8a7ab017f33df0ca599c0ca6dd0281e62574bb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cc972107997122cb31f015b4e70f81781dbce784",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc972107997122cb31f015b4e70f81781dbce784",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cc972107997122cb31f015b4e70f81781dbce784",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc972107997122cb31f015b4e70f81781dbce784/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e11712df7ea5e946c5ec008d1c761187b495f872",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e11712df7ea5e946c5ec008d1c761187b495f872",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e11712df7ea5e946c5ec008d1c761187b495f872"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 8,
      "deletions": 2
    },
    "files": [
      {
        "sha": "f2a14b8293cb96f78d1ed20423795b2d7fb335da",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc972107997122cb31f015b4e70f81781dbce784/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc972107997122cb31f015b4e70f81781dbce784/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=cc972107997122cb31f015b4e70f81781dbce784",
        "patch": "@@ -167,6 +167,7 @@ class CMainParams : public CChainParams {\n         fRequireStandard = true;\n         fMineBlocksOnDemand = false;\n         fSkipProofOfWorkCheck = false;\n+        fTestnetToBeDeprecatedFieldRPC = false;\n     }\n \n     const Checkpoints::CCheckpointData& Checkpoints() const \n@@ -228,6 +229,7 @@ class CTestNetParams : public CMainParams {\n         fAllowMinDifficultyBlocks = true;\n         fRequireStandard = false;\n         fMineBlocksOnDemand = false;\n+        fTestnetToBeDeprecatedFieldRPC = true;\n     }\n     const Checkpoints::CCheckpointData& Checkpoints() const \n     {\n@@ -271,6 +273,7 @@ class CRegTestParams : public CTestNetParams {\n         fAllowMinDifficultyBlocks = true;\n         fRequireStandard = false;\n         fMineBlocksOnDemand = true;\n+        fTestnetToBeDeprecatedFieldRPC = false;\n     }\n     const Checkpoints::CCheckpointData& Checkpoints() const \n     {"
      },
      {
        "sha": "21d3b4d526a5bc075348e528c3747fd4741276df",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc972107997122cb31f015b4e70f81781dbce784/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc972107997122cb31f015b4e70f81781dbce784/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=cc972107997122cb31f015b4e70f81781dbce784",
        "patch": "@@ -72,6 +72,8 @@ class CChainParams\n     /* Make miner stop after a block is found. In RPC, don't return\n      * until nGenProcLimit blocks are generated */\n     bool MineBlocksOnDemand() const { return fMineBlocksOnDemand; }\n+    /* In the future use NetworkIDString() for RPC fields */\n+    bool TestnetToBeDeprecatedFieldRPC() const { return fTestnetToBeDeprecatedFieldRPC; }\n     CBaseChainParams::Network NetworkID() const { return networkID; }\n     /* Return the BIP70 network string (main, test or regtest) */\n     std::string NetworkIDString() const { return strNetworkID; }\n@@ -108,6 +110,7 @@ class CChainParams\n     bool fRequireStandard;\n     bool fMineBlocksOnDemand;\n     bool fSkipProofOfWorkCheck;\n+    bool fTestnetToBeDeprecatedFieldRPC;\n };\n \n /** Modifiable parameters interface is used by test cases to adapt the parameters in order"
      },
      {
        "sha": "c767835a27ff85f3c4646e3252980df115562349",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc972107997122cb31f015b4e70f81781dbce784/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc972107997122cb31f015b4e70f81781dbce784/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=cc972107997122cb31f015b4e70f81781dbce784",
        "patch": "@@ -239,7 +239,7 @@ Value getmininginfo(const Array& params, bool fHelp)\n     obj.push_back(Pair(\"genproclimit\",     (int)GetArg(\"-genproclimit\", -1)));\n     obj.push_back(Pair(\"networkhashps\",    getnetworkhashps(params, false)));\n     obj.push_back(Pair(\"pooledtx\",         (uint64_t)mempool.size()));\n-    obj.push_back(Pair(\"testnet\",          Params().NetworkID() == CBaseChainParams::TESTNET));\n+    obj.push_back(Pair(\"testnet\",          Params().TestnetToBeDeprecatedFieldRPC()));\n     obj.push_back(Pair(\"chain\",            Params().NetworkIDString()));\n #ifdef ENABLE_WALLET\n     obj.push_back(Pair(\"generate\",         getgenerate(params, false)));"
      },
      {
        "sha": "8be14b567cc95369dfe62f78b7ec2d4090f46f6b",
        "filename": "src/rpcmisc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc972107997122cb31f015b4e70f81781dbce784/src/rpcmisc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc972107997122cb31f015b4e70f81781dbce784/src/rpcmisc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmisc.cpp?ref=cc972107997122cb31f015b4e70f81781dbce784",
        "patch": "@@ -87,7 +87,7 @@ Value getinfo(const Array& params, bool fHelp)\n     obj.push_back(Pair(\"connections\",   (int)vNodes.size()));\n     obj.push_back(Pair(\"proxy\",         (proxy.IsValid() ? proxy.ToStringIPPort() : string())));\n     obj.push_back(Pair(\"difficulty\",    (double)GetDifficulty()));\n-    obj.push_back(Pair(\"testnet\",       Params().NetworkID() == CBaseChainParams::TESTNET));\n+    obj.push_back(Pair(\"testnet\",       Params().TestnetToBeDeprecatedFieldRPC()));\n #ifdef ENABLE_WALLET\n     if (pwalletMain) {\n         obj.push_back(Pair(\"keypoololdest\", pwalletMain->GetOldestKeyPoolTime()));"
      }
    ]
  },
  {
    "sha": "6fd546dd9680fff2c442075e511875acbd18b486",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZmQ1NDZkZDk2ODBmZmYyYzQ0MjA3NWU1MTE4NzVhY2JkMThiNDg2",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@blockstream.io",
        "date": "2014-08-31T21:01:54Z"
      },
      "committer": {
        "name": "jtimon",
        "email": "jtimon@blockstream.io",
        "date": "2014-10-10T09:01:00Z"
      },
      "message": "Remove CChainParams::NetworkID()",
      "tree": {
        "sha": "3c00b2605f000156ca0865e108f8e143cb3606be",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3c00b2605f000156ca0865e108f8e143cb3606be"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6fd546dd9680fff2c442075e511875acbd18b486",
      "comment_count": 2,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6fd546dd9680fff2c442075e511875acbd18b486",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6fd546dd9680fff2c442075e511875acbd18b486",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6fd546dd9680fff2c442075e511875acbd18b486/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cc972107997122cb31f015b4e70f81781dbce784",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc972107997122cb31f015b4e70f81781dbce784",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cc972107997122cb31f015b4e70f81781dbce784"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 0,
      "deletions": 1
    },
    "files": [
      {
        "sha": "f157419bb26fc9ee6782f8d86fa387b420355e14",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6fd546dd9680fff2c442075e511875acbd18b486/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6fd546dd9680fff2c442075e511875acbd18b486/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=6fd546dd9680fff2c442075e511875acbd18b486",
        "patch": "@@ -74,7 +74,6 @@ class CChainParams\n     bool MineBlocksOnDemand() const { return fMineBlocksOnDemand; }\n     /* In the future use NetworkIDString() for RPC fields */\n     bool TestnetToBeDeprecatedFieldRPC() const { return fTestnetToBeDeprecatedFieldRPC; }\n-    CBaseChainParams::Network NetworkID() const { return networkID; }\n     /* Return the BIP70 network string (main, test or regtest) */\n     std::string NetworkIDString() const { return strNetworkID; }\n     const std::vector<CDNSSeedData>& DNSSeeds() const { return vSeeds; }"
      }
    ]
  }
]