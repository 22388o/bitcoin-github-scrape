[
  {
    "sha": "c0385f10a133d5d8a4c296e7b7a6d75c9c4eec12",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMDM4NWYxMGExMzNkNWQ4YTRjMjk2ZTdiN2E2ZDc1YzljNGVlYzEy",
    "commit": {
      "author": {
        "name": "amadeuszpawlik",
        "email": "apawlik@protonmail.com",
        "date": "2021-05-18T15:42:44Z"
      },
      "committer": {
        "name": "apawlik",
        "email": "amadeusz.pawlik@getinge.com",
        "date": "2021-05-19T14:55:03Z"
      },
      "message": "Remove -feefilter option\n\nFeefilter option is debug only and it isn't used in any tests, it's wasteful\nto check this option for every peer on every iteration of the message handler\nloop. refs #21545",
      "tree": {
        "sha": "949a19803f1c4e6d0ec12f80b0b4bfb3cda7691b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/949a19803f1c4e6d0ec12f80b0b4bfb3cda7691b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c0385f10a133d5d8a4c296e7b7a6d75c9c4eec12",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c0385f10a133d5d8a4c296e7b7a6d75c9c4eec12",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c0385f10a133d5d8a4c296e7b7a6d75c9c4eec12",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c0385f10a133d5d8a4c296e7b7a6d75c9c4eec12/comments",
    "author": {
      "login": "amadeuszpawlik",
      "id": 35263201,
      "node_id": "MDQ6VXNlcjM1MjYzMjAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/35263201?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amadeuszpawlik",
      "html_url": "https://github.com/amadeuszpawlik",
      "followers_url": "https://api.github.com/users/amadeuszpawlik/followers",
      "following_url": "https://api.github.com/users/amadeuszpawlik/following{/other_user}",
      "gists_url": "https://api.github.com/users/amadeuszpawlik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amadeuszpawlik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amadeuszpawlik/subscriptions",
      "organizations_url": "https://api.github.com/users/amadeuszpawlik/orgs",
      "repos_url": "https://api.github.com/users/amadeuszpawlik/repos",
      "events_url": "https://api.github.com/users/amadeuszpawlik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amadeuszpawlik/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": null,
    "parents": [
      {
        "sha": "39d597d362a2a06d276dd55a152c729c01c1e661",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/39d597d362a2a06d276dd55a152c729c01c1e661",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/39d597d362a2a06d276dd55a152c729c01c1e661"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 0,
      "deletions": 4
    },
    "files": [
      {
        "sha": "c926a4e7b514e26d2b1bd004fd9c288bec5cc05c",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0385f10a133d5d8a4c296e7b7a6d75c9c4eec12/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0385f10a133d5d8a4c296e7b7a6d75c9c4eec12/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=c0385f10a133d5d8a4c296e7b7a6d75c9c4eec12",
        "patch": "@@ -390,7 +390,6 @@ void SetupServerArgs(NodeContext& node)\n     argsman.AddArg(\"-datadir=<dir>\", \"Specify data directory\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-dbbatchsize\", strprintf(\"Maximum database write batch size in bytes (default: %u)\", nDefaultDbBatchSize), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-dbcache=<n>\", strprintf(\"Maximum database cache size <n> MiB (%d to %d, default: %d). In addition, unused mempool memory is shared for this cache (see -maxmempool).\", nMinDbCache, nMaxDbCache, nDefaultDbCache), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n-    argsman.AddArg(\"-feefilter\", strprintf(\"Tell other nodes to filter invs to us by our mempool min fee (default: %u)\", DEFAULT_FEEFILTER), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-includeconf=<file>\", \"Specify additional configuration file, relative to the -datadir path (only useable from configuration file, not command line)\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-loadblock=<file>\", \"Imports blocks from external file on startup\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-maxmempool=<n>\", strprintf(\"Keep the transaction memory pool below <n> megabytes (default: %u)\", DEFAULT_MAX_MEMPOOL_SIZE), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);"
      },
      {
        "sha": "cdf0fe0c5eeecf7ec908ebb99c1cab5c1dd2d53e",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0385f10a133d5d8a4c296e7b7a6d75c9c4eec12/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0385f10a133d5d8a4c296e7b7a6d75c9c4eec12/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=c0385f10a133d5d8a4c296e7b7a6d75c9c4eec12",
        "patch": "@@ -4711,7 +4711,6 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n         if (pto->m_tx_relay != nullptr &&\n             !m_ignore_incoming_txs &&\n             pto->GetCommonVersion() >= FEEFILTER_VERSION &&\n-            gArgs.GetBoolArg(\"-feefilter\", DEFAULT_FEEFILTER) &&\n             !pto->HasPermission(NetPermissionFlags::ForceRelay) // peers with the forcerelay permission should not filter txs to us\n         ) {\n             CAmount currentFilter = m_mempool.GetMinFee(gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFeePerK();"
      },
      {
        "sha": "adc3d282b61eff74304718c2f7a14022f545f6a4",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0385f10a133d5d8a4c296e7b7a6d75c9c4eec12/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0385f10a133d5d8a4c296e7b7a6d75c9c4eec12/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=c0385f10a133d5d8a4c296e7b7a6d75c9c4eec12",
        "patch": "@@ -82,8 +82,6 @@ static constexpr bool DEFAULT_COINSTATSINDEX{false};\n static const char* const DEFAULT_BLOCKFILTERINDEX = \"0\";\n /** Default for -persistmempool */\n static const bool DEFAULT_PERSIST_MEMPOOL = true;\n-/** Default for using fee filter */\n-static const bool DEFAULT_FEEFILTER = true;\n /** Default for -stopatheight */\n static const int DEFAULT_STOPATHEIGHT = 0;\n /** Block files containing a block-height within MIN_BLOCKS_TO_KEEP of ::ChainActive().Tip() will not be pruned. */"
      }
    ]
  },
  {
    "sha": "a7a43e8fe85f6247c35d7ff99f36448574f3e34a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphN2E0M2U4ZmU4NWY2MjQ3YzM1ZDdmZjk5ZjM2NDQ4NTc0ZjNlMzRh",
    "commit": {
      "author": {
        "name": "amadeuszpawlik",
        "email": "apawlik@protonmail.com",
        "date": "2021-05-18T15:47:04Z"
      },
      "committer": {
        "name": "apawlik",
        "email": "amadeusz.pawlik@getinge.com",
        "date": "2021-05-24T12:59:39Z"
      },
      "message": "Factor feefilter logic out\n\nBreak SendMessages() function into smaller units to improve readability.\nAdds lock assert, as `round()` isn't thread safe.\ncloses #21545",
      "tree": {
        "sha": "4da8a29d8ac74d8c05bac4dc235c2be7364bab04",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4da8a29d8ac74d8c05bac4dc235c2be7364bab04"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a7a43e8fe85f6247c35d7ff99f36448574f3e34a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7a43e8fe85f6247c35d7ff99f36448574f3e34a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a7a43e8fe85f6247c35d7ff99f36448574f3e34a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7a43e8fe85f6247c35d7ff99f36448574f3e34a/comments",
    "author": {
      "login": "amadeuszpawlik",
      "id": 35263201,
      "node_id": "MDQ6VXNlcjM1MjYzMjAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/35263201?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amadeuszpawlik",
      "html_url": "https://github.com/amadeuszpawlik",
      "followers_url": "https://api.github.com/users/amadeuszpawlik/followers",
      "following_url": "https://api.github.com/users/amadeuszpawlik/following{/other_user}",
      "gists_url": "https://api.github.com/users/amadeuszpawlik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amadeuszpawlik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amadeuszpawlik/subscriptions",
      "organizations_url": "https://api.github.com/users/amadeuszpawlik/orgs",
      "repos_url": "https://api.github.com/users/amadeuszpawlik/repos",
      "events_url": "https://api.github.com/users/amadeuszpawlik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amadeuszpawlik/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": null,
    "parents": [
      {
        "sha": "c0385f10a133d5d8a4c296e7b7a6d75c9c4eec12",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c0385f10a133d5d8a4c296e7b7a6d75c9c4eec12",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c0385f10a133d5d8a4c296e7b7a6d75c9c4eec12"
      }
    ],
    "stats": {
      "total": 86,
      "additions": 47,
      "deletions": 39
    },
    "files": [
      {
        "sha": "999ad1a849534466c8f4ef0b0f103a668f2b3bf2",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 47,
        "deletions": 39,
        "changes": 86,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7a43e8fe85f6247c35d7ff99f36448574f3e34a/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7a43e8fe85f6247c35d7ff99f36448574f3e34a/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=a7a43e8fe85f6247c35d7ff99f36448574f3e34a",
        "patch": "@@ -331,6 +331,9 @@ class PeerManagerImpl final : public PeerManager\n     /** Send `addr` messages on a regular schedule. */\n     void MaybeSendAddr(CNode& node, std::chrono::microseconds current_time);\n \n+    /** Send `feefilter` message. */\n+    void MaybeSendFeefilter(CNode& node, std::chrono::microseconds current_time) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+\n     const CChainParams& m_chainparams;\n     CConnman& m_connman;\n     CAddrMan& m_addrman;\n@@ -4219,6 +4222,49 @@ void PeerManagerImpl::MaybeSendAddr(CNode& node, std::chrono::microseconds curre\n     }\n }\n \n+void PeerManagerImpl::MaybeSendFeefilter(CNode& pto, std::chrono::microseconds current_time)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    if (m_ignore_incoming_txs) return;\n+    if (!pto.m_tx_relay) return;\n+    if (pto.GetCommonVersion() < FEEFILTER_VERSION) return;\n+    // peers with the forcerelay permission should not filter txs to us\n+    if (pto.HasPermission(NetPermissionFlags::ForceRelay)) return;\n+\n+    CAmount currentFilter = m_mempool.GetMinFee(gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFeePerK();\n+    static FeeFilterRounder g_filter_rounder{CFeeRate{DEFAULT_MIN_RELAY_TX_FEE}};\n+\n+    if (m_chainman.ActiveChainstate().IsInitialBlockDownload()) {\n+        // Received tx-inv messages are discarded when the active\n+        // chainstate is in IBD, so tell the peer to not send them.\n+        currentFilter = MAX_MONEY;\n+    } else {\n+        static const CAmount MAX_FILTER{g_filter_rounder.round(MAX_MONEY)};\n+        if (pto.m_tx_relay->lastSentFeeFilter == MAX_FILTER) {\n+            // Send the current filter if we sent MAX_FILTER previously\n+            // and made it out of IBD.\n+            pto.m_tx_relay->m_next_send_feefilter = 0us;\n+        }\n+    }\n+    if (current_time > pto.m_tx_relay->m_next_send_feefilter) {\n+        CAmount filterToSend = g_filter_rounder.round(currentFilter);\n+        // We always have a fee filter of at least minRelayTxFee\n+        filterToSend = std::max(filterToSend, ::minRelayTxFee.GetFeePerK());\n+        if (filterToSend != pto.m_tx_relay->lastSentFeeFilter) {\n+            m_connman.PushMessage(&pto, CNetMsgMaker(pto.GetCommonVersion()).Make(NetMsgType::FEEFILTER, filterToSend));\n+            pto.m_tx_relay->lastSentFeeFilter = filterToSend;\n+        }\n+        pto.m_tx_relay->m_next_send_feefilter = PoissonNextSend(current_time, AVG_FEEFILTER_BROADCAST_INTERVAL);\n+    }\n+    // If the fee filter has changed substantially and it's still more than MAX_FEEFILTER_CHANGE_DELAY\n+    // until scheduled broadcast, then move the broadcast to within MAX_FEEFILTER_CHANGE_DELAY.\n+    else if (current_time + MAX_FEEFILTER_CHANGE_DELAY < pto.m_tx_relay->m_next_send_feefilter &&\n+                (currentFilter < 3 * pto.m_tx_relay->lastSentFeeFilter / 4 || currentFilter > 4 * pto.m_tx_relay->lastSentFeeFilter / 3)) {\n+        pto.m_tx_relay->m_next_send_feefilter = current_time + GetRandomDuration<std::chrono::microseconds>(MAX_FEEFILTER_CHANGE_DELAY);\n+    }\n+}\n+\n namespace {\n class CompareInvMempoolOrder\n {\n@@ -4705,45 +4751,7 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n         if (!vGetData.empty())\n             m_connman.PushMessage(pto, msgMaker.Make(NetMsgType::GETDATA, vGetData));\n \n-        //\n-        // Message: feefilter\n-        //\n-        if (pto->m_tx_relay != nullptr &&\n-            !m_ignore_incoming_txs &&\n-            pto->GetCommonVersion() >= FEEFILTER_VERSION &&\n-            !pto->HasPermission(NetPermissionFlags::ForceRelay) // peers with the forcerelay permission should not filter txs to us\n-        ) {\n-            CAmount currentFilter = m_mempool.GetMinFee(gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFeePerK();\n-            static FeeFilterRounder g_filter_rounder{CFeeRate{DEFAULT_MIN_RELAY_TX_FEE}};\n-            if (m_chainman.ActiveChainstate().IsInitialBlockDownload()) {\n-                // Received tx-inv messages are discarded when the active\n-                // chainstate is in IBD, so tell the peer to not send them.\n-                currentFilter = MAX_MONEY;\n-            } else {\n-                static const CAmount MAX_FILTER{g_filter_rounder.round(MAX_MONEY)};\n-                if (pto->m_tx_relay->lastSentFeeFilter == MAX_FILTER) {\n-                    // Send the current filter if we sent MAX_FILTER previously\n-                    // and made it out of IBD.\n-                    pto->m_tx_relay->m_next_send_feefilter = 0us;\n-                }\n-            }\n-            if (current_time > pto->m_tx_relay->m_next_send_feefilter) {\n-                CAmount filterToSend = g_filter_rounder.round(currentFilter);\n-                // We always have a fee filter of at least minRelayTxFee\n-                filterToSend = std::max(filterToSend, ::minRelayTxFee.GetFeePerK());\n-                if (filterToSend != pto->m_tx_relay->lastSentFeeFilter) {\n-                    m_connman.PushMessage(pto, msgMaker.Make(NetMsgType::FEEFILTER, filterToSend));\n-                    pto->m_tx_relay->lastSentFeeFilter = filterToSend;\n-                }\n-                pto->m_tx_relay->m_next_send_feefilter = PoissonNextSend(current_time, AVG_FEEFILTER_BROADCAST_INTERVAL);\n-            }\n-            // If the fee filter has changed substantially and it's still more than MAX_FEEFILTER_CHANGE_DELAY\n-            // until scheduled broadcast, then move the broadcast to within MAX_FEEFILTER_CHANGE_DELAY.\n-            else if (current_time + MAX_FEEFILTER_CHANGE_DELAY < pto->m_tx_relay->m_next_send_feefilter &&\n-                     (currentFilter < 3 * pto->m_tx_relay->lastSentFeeFilter / 4 || currentFilter > 4 * pto->m_tx_relay->lastSentFeeFilter / 3)) {\n-                pto->m_tx_relay->m_next_send_feefilter = current_time + GetRandomDuration<std::chrono::microseconds>(MAX_FEEFILTER_CHANGE_DELAY);\n-            }\n-        }\n+        MaybeSendFeefilter(*pto, current_time);\n     } // release cs_main\n     return true;\n }"
      }
    ]
  }
]