[
  {
    "sha": "263220a85c1df218431fafbda07c8b23ccc4ce4d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNjMyMjBhODVjMWRmMjE4NDMxZmFmYmRhMDdjOGIyM2NjYzRjZTRk",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-04-16T20:49:09Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-07-08T15:28:07Z"
      },
      "message": "guix: Check for a sane services database\n\nOn bare systems, it is possible to be lacking a services database. Check\nfor basic entries before attempting a build.\n\nSee the error message in the diff for more context.",
      "tree": {
        "sha": "41d97abc4adf0db71e9b8ad1efa25bc096c5d967",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/41d97abc4adf0db71e9b8ad1efa25bc096c5d967"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/263220a85c1df218431fafbda07c8b23ccc4ce4d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/263220a85c1df218431fafbda07c8b23ccc4ce4d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/263220a85c1df218431fafbda07c8b23ccc4ce4d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/263220a85c1df218431fafbda07c8b23ccc4ce4d/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4129134e844f78a89f8515cf30dad4b6074703c7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4129134e844f78a89f8515cf30dad4b6074703c7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4129134e844f78a89f8515cf30dad4b6074703c7"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 24,
      "deletions": 1
    },
    "files": [
      {
        "sha": "ddfc8c83cbe7355d8b980eb85f3750cf4617e962",
        "filename": "contrib/guix/guix-build",
        "status": "modified",
        "additions": 24,
        "deletions": 1,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/263220a85c1df218431fafbda07c8b23ccc4ce4d/contrib/guix/guix-build",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/263220a85c1df218431fafbda07c8b23ccc4ce4d/contrib/guix/guix-build",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/guix-build?ref=263220a85c1df218431fafbda07c8b23ccc4ce4d",
        "patch": "@@ -18,7 +18,7 @@ source \"$(dirname \"${BASH_SOURCE[0]}\")/libexec/prelude.bash\"\n # Required non-builtin commands should be invocable\n ################\n \n-check_tools cat mkdir make git guix\n+check_tools cat mkdir make getent git guix\n \n ################\n # GUIX_BUILD_OPTIONS should be empty\n@@ -186,6 +186,29 @@ fi\n #\n # However, the internal API is likely to change more than the CLI invocation\n \n+################\n+# Services database must have basic entries\n+################\n+\n+if ! getent services http https ftp; then\n+cat << EOF\n+ERR: Your system's C library can not find service database entries for at least\n+     one of the following services: http, https, ftp.\n+\n+Hint: Most likely, /etc/services does not exist yet (common for docker images\n+      and minimal distros), or you don't have permissions to access it.\n+\n+      If /etc/services does not exist yet, you may want to install the\n+      appropriate package for your distro which provides it.\n+\n+          On Debian/Ubuntu: netbase\n+          On Arch Linux: iana-etc\n+\n+      For more information, see: getent(1), services(5)\n+\n+EOF\n+\n+fi\n \n #########\n # SETUP #"
      }
    ]
  },
  {
    "sha": "fc4f8449f34e32b0b9ac9d218d6c3264b02467ba",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYzRmODQ0OWYzNGUzMmIwYjlhYzlkMjE4ZDZjMzI2NGIwMjQ2N2Jh",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-07-08T15:26:46Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-07-08T15:29:26Z"
      },
      "message": "guix: Update various check_tools lists",
      "tree": {
        "sha": "5c069b5bb393063a2affc51e7f04d401f6ea9a5b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5c069b5bb393063a2affc51e7f04d401f6ea9a5b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fc4f8449f34e32b0b9ac9d218d6c3264b02467ba",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc4f8449f34e32b0b9ac9d218d6c3264b02467ba",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fc4f8449f34e32b0b9ac9d218d6c3264b02467ba",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc4f8449f34e32b0b9ac9d218d6c3264b02467ba/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "263220a85c1df218431fafbda07c8b23ccc4ce4d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/263220a85c1df218431fafbda07c8b23ccc4ce4d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/263220a85c1df218431fafbda07c8b23ccc4ce4d"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "e396d3e98e7ce93a348111703847a62cfd643d82",
        "filename": "contrib/guix/guix-attest",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc4f8449f34e32b0b9ac9d218d6c3264b02467ba/contrib/guix/guix-attest",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc4f8449f34e32b0b9ac9d218d6c3264b02467ba/contrib/guix/guix-attest",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/guix-attest?ref=fc4f8449f34e32b0b9ac9d218d6c3264b02467ba",
        "patch": "@@ -18,7 +18,7 @@ source \"$(dirname \"${BASH_SOURCE[0]}\")/libexec/prelude.bash\"\n # Required non-builtin commands should be invokable\n ################\n \n-check_tools cat env basename mkdir xargs find\n+check_tools cat env basename mkdir diff sort\n if [ -z \"$NO_SIGN\" ]; then\n     check_tools gpg\n fi"
      },
      {
        "sha": "de53530e8fa37bb810e16233cf8e209aaded2aaf",
        "filename": "contrib/guix/guix-build",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc4f8449f34e32b0b9ac9d218d6c3264b02467ba/contrib/guix/guix-build",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc4f8449f34e32b0b9ac9d218d6c3264b02467ba/contrib/guix/guix-build",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/guix-build?ref=fc4f8449f34e32b0b9ac9d218d6c3264b02467ba",
        "patch": "@@ -18,7 +18,7 @@ source \"$(dirname \"${BASH_SOURCE[0]}\")/libexec/prelude.bash\"\n # Required non-builtin commands should be invocable\n ################\n \n-check_tools cat mkdir make getent git guix\n+check_tools cat mkdir make getent curl git guix\n \n ################\n # GUIX_BUILD_OPTIONS should be empty"
      }
    ]
  },
  {
    "sha": "46ce6ce3782dfbd8f9d26dc2ba0f284755e75f2d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NmNlNmNlMzc4MmRmYmQ4ZjlkMjZkYzJiYTBmMjg0NzU1ZTc1ZjJk",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-07-02T18:55:51Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-07-08T15:29:54Z"
      },
      "message": "tree-wide: Rename gitian-keys to builder-keys",
      "tree": {
        "sha": "db0d9105fdb6c394fa275c47f90c0139fd46d073",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/db0d9105fdb6c394fa275c47f90c0139fd46d073"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/46ce6ce3782dfbd8f9d26dc2ba0f284755e75f2d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46ce6ce3782dfbd8f9d26dc2ba0f284755e75f2d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/46ce6ce3782dfbd8f9d26dc2ba0f284755e75f2d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46ce6ce3782dfbd8f9d26dc2ba0f284755e75f2d/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fc4f8449f34e32b0b9ac9d218d6c3264b02467ba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc4f8449f34e32b0b9ac9d218d6c3264b02467ba",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fc4f8449f34e32b0b9ac9d218d6c3264b02467ba"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 11,
      "deletions": 11
    },
    "files": [
      {
        "sha": "a2612ab958458a312294b599ac88d802382d25b4",
        "filename": "contrib/README.md",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46ce6ce3782dfbd8f9d26dc2ba0f284755e75f2d/contrib/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46ce6ce3782dfbd8f9d26dc2ba0f284755e75f2d/contrib/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/README.md?ref=46ce6ce3782dfbd8f9d26dc2ba0f284755e75f2d",
        "patch": "@@ -29,8 +29,8 @@ All other packaging related files can be found in the [bitcoin-core/packaging](h\n ### [Gitian-descriptors](/contrib/gitian-descriptors) ###\n Files used during the gitian build process. For more information about gitian, see the [the Bitcoin Core documentation repository](https://github.com/bitcoin-core/docs).\n \n-### [Gitian-keys](/contrib/gitian-keys)\n-PGP keys used for signing Bitcoin Core [Gitian release](/doc/release-process.md) results.\n+### [Builder keys](/contrib/builder-keys)\n+PGP keys used for signing Bitcoin Core [release](/doc/release-process.md) results.\n \n ### [MacDeploy](/contrib/macdeploy) ###\n Scripts and notes for Mac builds."
      },
      {
        "sha": "a7c1d5ae0a75dd105416539a6ac0e985680057a8",
        "filename": "contrib/builder-keys/README.md",
        "status": "renamed",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46ce6ce3782dfbd8f9d26dc2ba0f284755e75f2d/contrib/builder-keys/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46ce6ce3782dfbd8f9d26dc2ba0f284755e75f2d/contrib/builder-keys/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/builder-keys/README.md?ref=46ce6ce3782dfbd8f9d26dc2ba0f284755e75f2d",
        "patch": "@@ -1,10 +1,10 @@\n-## PGP keys of Gitian builders and Developers\n+## PGP keys of builders and Developers\n \n-The file `keys.txt` contains fingerprints of the public keys of Gitian builders\n-and active developers.\n+The file `keys.txt` contains fingerprints of the public keys of builders and\n+active developers.\n \n The associated keys are mainly used to sign git commits or the build results\n-of Gitian builds.\n+of Guix builds.\n \n The most recent version of each pgp key can be found on most pgp key servers.\n \n@@ -16,12 +16,12 @@ To fetch the latest version of all pgp keys in your gpg homedir,\n gpg --refresh-keys\n ```\n \n-To fetch keys of Gitian builders and active developers, feed the list of\n-fingerprints of the primary keys into gpg:\n+To fetch keys of builders and active developers, feed the list of fingerprints\n+of the primary keys into gpg:\n \n ```sh\n while read fingerprint keyholder_name; do gpg --keyserver hkp://subset.pool.sks-keyservers.net --recv-keys ${fingerprint}; done < ./keys.txt\n ```\n \n-Add your key to the list if you provided Gitian signatures for two major or\n+Add your key to the list if you provided Guix attestations for two major or\n minor releases of Bitcoin Core.",
        "previous_filename": "contrib/gitian-keys/README.md"
      },
      {
        "sha": "db28cd07a0b02828a0caa2a6041563631caa02e0",
        "filename": "contrib/builder-keys/keys.txt",
        "status": "renamed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46ce6ce3782dfbd8f9d26dc2ba0f284755e75f2d/contrib/builder-keys/keys.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46ce6ce3782dfbd8f9d26dc2ba0f284755e75f2d/contrib/builder-keys/keys.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/builder-keys/keys.txt?ref=46ce6ce3782dfbd8f9d26dc2ba0f284755e75f2d",
        "previous_filename": "contrib/gitian-keys/keys.txt"
      },
      {
        "sha": "71643677597a184911105a3b663fbbaf2765b5e2",
        "filename": "doc/release-process.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46ce6ce3782dfbd8f9d26dc2ba0f284755e75f2d/doc/release-process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46ce6ce3782dfbd8f9d26dc2ba0f284755e75f2d/doc/release-process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-process.md?ref=46ce6ce3782dfbd8f9d26dc2ba0f284755e75f2d",
        "patch": "@@ -169,7 +169,7 @@ Build output expected:\n \n ### Verify other gitian builders signatures to your own. (Optional)\n \n-Add other gitian builders keys to your gpg keyring, and/or refresh keys: See `../bitcoin/contrib/gitian-keys/README.md`.\n+Add other builders keys to your gpg keyring, and/or refresh keys: See `../bitcoin/contrib/builder-keys/README.md`.\n \n Verify the signatures\n "
      },
      {
        "sha": "111091b7f8a4e6b90e1bc243712524cac4731a5c",
        "filename": "test/lint/lint-spelling.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46ce6ce3782dfbd8f9d26dc2ba0f284755e75f2d/test/lint/lint-spelling.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46ce6ce3782dfbd8f9d26dc2ba0f284755e75f2d/test/lint/lint-spelling.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-spelling.sh?ref=46ce6ce3782dfbd8f9d26dc2ba0f284755e75f2d",
        "patch": "@@ -15,6 +15,6 @@ if ! command -v codespell > /dev/null; then\n fi\n \n IGNORE_WORDS_FILE=test/lint/lint-spelling.ignore-words.txt\n-if ! codespell --check-filenames --disable-colors --quiet-level=7 --ignore-words=${IGNORE_WORDS_FILE} $(git ls-files -- \":(exclude)build-aux/m4/\" \":(exclude)contrib/seeds/*.txt\" \":(exclude)depends/\" \":(exclude)doc/release-notes/\" \":(exclude)src/leveldb/\" \":(exclude)src/crc32c/\" \":(exclude)src/qt/locale/\" \":(exclude)src/qt/*.qrc\" \":(exclude)src/secp256k1/\" \":(exclude)src/univalue/\" \":(exclude)contrib/gitian-keys/keys.txt\" \":(exclude)contrib/guix/patches\"); then\n+if ! codespell --check-filenames --disable-colors --quiet-level=7 --ignore-words=${IGNORE_WORDS_FILE} $(git ls-files -- \":(exclude)build-aux/m4/\" \":(exclude)contrib/seeds/*.txt\" \":(exclude)depends/\" \":(exclude)doc/release-notes/\" \":(exclude)src/leveldb/\" \":(exclude)src/crc32c/\" \":(exclude)src/qt/locale/\" \":(exclude)src/qt/*.qrc\" \":(exclude)src/secp256k1/\" \":(exclude)src/univalue/\" \":(exclude)contrib/builder-keys/keys.txt\" \":(exclude)contrib/guix/patches\"); then\n     echo \"^ Warning: codespell identified likely spelling errors. Any false positives? Add them to the list of ignored words in ${IGNORE_WORDS_FILE}\"\n fi"
      }
    ]
  },
  {
    "sha": "c2541fd0ca99481a5a792a8f2772925d64fb0491",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMjU0MWZkMGNhOTk0ODFhNWE3OTJhOGYyNzcyOTI1ZDY0ZmIwNDkx",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-07-07T20:12:07Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-07-19T22:24:36Z"
      },
      "message": "guix: Overhaul README\n\n- Added detailed Guix bootstrap/installation instructions",
      "tree": {
        "sha": "1dec5a1ff7bdeb927affbc4d328748bb1b8acb0c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1dec5a1ff7bdeb927affbc4d328748bb1b8acb0c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c2541fd0ca99481a5a792a8f2772925d64fb0491",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c2541fd0ca99481a5a792a8f2772925d64fb0491",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c2541fd0ca99481a5a792a8f2772925d64fb0491",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c2541fd0ca99481a5a792a8f2772925d64fb0491/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "46ce6ce3782dfbd8f9d26dc2ba0f284755e75f2d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46ce6ce3782dfbd8f9d26dc2ba0f284755e75f2d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/46ce6ce3782dfbd8f9d26dc2ba0f284755e75f2d"
      }
    ],
    "stats": {
      "total": 1206,
      "additions": 1067,
      "deletions": 139
    },
    "files": [
      {
        "sha": "cf04dd1bf4b537d0949d4c432aad9033ceaad853",
        "filename": "contrib/guix/INSTALL.md",
        "status": "added",
        "additions": 788,
        "deletions": 0,
        "changes": 788,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2541fd0ca99481a5a792a8f2772925d64fb0491/contrib/guix/INSTALL.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2541fd0ca99481a5a792a8f2772925d64fb0491/contrib/guix/INSTALL.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/INSTALL.md?ref=c2541fd0ca99481a5a792a8f2772925d64fb0491",
        "patch": "@@ -0,0 +1,788 @@\n+# Guix Installation and Setup\n+\n+This only needs to be done once per machine. If you have already completed the\n+installation and setup, please proceed to [perform a build](./README.md).\n+\n+Otherwise, you may choose from one of the following options to install Guix:\n+\n+1. Using the official **shell installer script** [\u2913 skip to section][install-script]\n+   - Maintained by Guix developers\n+   - Easiest (automatically performs *most* setup)\n+   - Works on nearly all Linux distributions\n+   - Only installs latest release\n+   - Binary installation only, requires high level of trust\n+   - Note: The script needs to be run as root, so it should be inspected before it's run\n+2. Using the official **binary tarball** [\u2913 skip to section][install-bin-tarball]\n+   - Maintained by Guix developers\n+   - Normal difficulty (full manual setup required)\n+   - Works on nearly all Linux distributions\n+   - Installs any release\n+   - Binary installation only, requires high level of trust\n+3. Using fanquake's **Docker image** [\u2197\ufe0e external instructions][install-fanquake-docker]\n+   - Maintained by fanquake\n+   - Easy (automatically performs *some* setup)\n+   - Works wherever Docker images work\n+   - Installs any release\n+   - Binary installation only, requires high level of trust\n+4. Using a **distribution-maintained package** [\u2913 skip to section][install-distro-pkg]\n+   - Maintained by distribution's Guix package maintainer\n+   - Normal difficulty (manual setup required)\n+   - Works only on distributions with Guix packaged, see: https://repology.org/project/guix/versions\n+   - Installs a release decided on by package maintainer\n+   - Source or binary installation depending on the distribution\n+5. Building **from source** [\u2913 skip to section][install-source]\n+   - Maintained by you\n+   - Hard, but rewarding\n+   - Can be made to work on most Linux distributions\n+   - Installs any commit (more granular)\n+   - Source installation, requires lower level of trust\n+\n+## Options 1 and 2: Using the official shell installer script or binary tarball\n+\n+The installation instructions for both the official shell installer script and\n+the binary tarballs can be found in the GNU Guix Manual's [Binary Installation\n+section](https://guix.gnu.org/manual/en/html_node/Binary-Installation.html).\n+\n+Note that running through the binary tarball installation steps is largely\n+equivalent to manually performing what the shell installer script does.\n+\n+Note that at the time of writing (July 5th, 2021), the shell installer script\n+automatically creates an `/etc/profile.d` entry which the binary tarball\n+installation instructions do not ask you to create. However, you will likely\n+need this entry for better desktop integration. Please see [this\n+section](#add-an-etcprofiled-entry) for instructions on how to add a\n+`/etc/profile.d/guix.sh` entry.\n+\n+Regardless of which installation option you chose, the changes to\n+`/etc/profile.d` will not take effect until the next shell or desktop session,\n+so you should log out and log back in.\n+\n+## Option 3: Using fanquake's Docker image\n+\n+Please refer to fanquake's instructions\n+[here](https://github.com/fanquake/core-review/tree/master/guix).\n+\n+Note that the `Dockerfile` is largely equivalent to running through the binary\n+tarball installation steps.\n+\n+## Option 4: Using a distribution-maintained package\n+\n+Note that this section is based on the distro packaging situation at the time of\n+writing (July 2021). Guix is expected to be more widely packaged over time. For\n+an up-to-date view on Guix's package status/version across distros, please see:\n+https://repology.org/project/guix/versions\n+\n+### Debian 11 (Bullseye)/Ubuntu 21.04 (Hirsute Hippo)\n+\n+Guix v1.2.0 is available as a distribution package starting in [Debian\n+11](https://packages.debian.org/bullseye/guix) and [Ubuntu\n+21.04](https://packages.ubuntu.com/hirsute/guix).\n+\n+Note that if you intend on using Guix without using any substitutes (more\n+details [here][security-model]), v1.2.0 has a known problems when building\n+GnuTLS from source. Solutions and workarounds are documented\n+[here](#gnutls-test-suite-fail-status-request-revoked).\n+\n+\n+To install:\n+```sh\n+sudo apt install guix\n+```\n+\n+For up-to-date information on Debian and Ubuntu's release history:\n+- [Debian release history](https://www.debian.org/releases/)\n+- [Ubuntu release history](https://ubuntu.com/about/release-cycle)\n+\n+### Arch Linux\n+\n+Guix is available in the AUR as\n+[`guix`](https://aur.archlinux.org/packages/guix/), please follow the\n+installation instructions in the Arch Linux Wiki ([live\n+link](https://wiki.archlinux.org/index.php/Guix#AUR_Package_Installation),\n+[2021/03/30\n+permalink](https://wiki.archlinux.org/index.php?title=Guix&oldid=637559#AUR_Package_Installation))\n+to install Guix.\n+\n+At the time of writing (2021/03/30), the `check` phase will fail if the path to\n+guix's build directory is longer than 36 characters due to an anachronistic\n+character limit on the shebang line. Since the `check` phase happens after the\n+`build` phase, which may take quite a long time, it is recommended that users\n+either:\n+\n+1. Skip the `check` phase\n+    - For `makepkg`: `makepkg --nocheck ...`\n+    - For `yay`: `yay --mflags=\"--nocheck\" ...`\n+    - For `paru`: `paru --nocheck ...`\n+2. Or, check their build directory's length beforehand\n+    - For those building with `makepkg`: `pwd | wc -c`\n+\n+## Option 5: Building from source\n+\n+Building Guix from source is a rather involved process but a rewarding one for\n+those looking to minimize trust and maximize customizability (e.g. building a\n+particular commit of Guix). Previous experience with using autotools-style build\n+systems to build packages from source will be helpful. *hic sunt dracones.*\n+\n+I strongly urge you to at least skim through the entire section once before you\n+start issuing commands, as it will save you a lot of unncessary pain and\n+anguish.\n+\n+### Installing common build tools\n+\n+There are a few basic build tools that are required for most things we'll build,\n+so let's install them now:\n+\n+Text transformation/i18n:\n+- `autopoint` (sometimes packaged in `gettext`)\n+- `help2man`\n+- `po4a`\n+- `texinfo`\n+\n+Build system tools:\n+- `g++` w/ C++11 support\n+- `libtool`\n+- `autoconf`\n+- `automake`\n+- `pkg-config` (sometimes packaged as `pkgconf`)\n+- `make`\n+- `cmake`\n+\n+Miscellaneous:\n+- `git`\n+- `gnupg`\n+- `python3`\n+\n+### Building and Installing Guix's dependencies\n+\n+In order to build Guix itself from source, we need to first make sure that the\n+necessary dependencies are installed and discoverable. The most up-to-date list\n+of Guix's dependencies is kept in the [\"Requirements\"\n+section](https://guix.gnu.org/manual/en/html_node/Requirements.html) of the Guix\n+Reference Manual.\n+\n+Depending on your distribution, most or all of these dependencies may already be\n+packaged and installable without manually building and installing.\n+\n+For reference, the graphic below outlines Guix v1.3.0's dependency graph:\n+\n+![boostrap map](https://user-images.githubusercontent.com/6399679/125064185-a9a59880-e0b0-11eb-82c1-9b8e5dc9950d.png)\n+\n+#### Guile\n+\n+##### Choosing a Guile version and sticking to it\n+\n+One of the first things you need to decide is which Guile version you want to\n+use: Guile v2.2 or Guile v3.0. Unlike the python2 to python3 transition, Guile\n+v2.2 and Guile v3.0 are largely compatible, as evidenced by the fact that most\n+Guile packages and even [Guix\n+itself](https://guix.gnu.org/en/blog/2020/guile-3-and-guix/) support running on\n+both.\n+\n+What is important here is that you **choose one**, and you **remain consistent**\n+with your choice throughout **all Guile-related packages**, no matter if they\n+are installed via the distribution's package manager or installed from source.\n+This is because the files for Guile packages are installed to directories which\n+are separated based on the Guile version.\n+\n+###### Example: Checking that Ubuntu's `guile-git` is compatible with your chosen Guile version\n+\n+On Ubuntu Focal:\n+\n+```sh\n+$ apt show guile-git\n+Package: guile-git\n+...\n+Depends: guile-2.2, guile-bytestructures, libgit2-dev\n+...\n+```\n+\n+As you can see, the package `guile-git` depends on `guile-2.2`, meaning that it\n+was likely built for Guile v2.2. This means that if you decided to use Guile\n+v3.0 on Ubuntu Focal, you would need to build guile-git from source instead of\n+using the distribution package.\n+\n+On Ubuntu Hirsute:\n+\n+```sh\n+$ apt show guile-git\n+Package: guile-git\n+...\n+Depends: guile-3.0 | guile-2.2, guile-bytestructures (>= 1.0.7-3~), libgit2-dev (>= 1.0)\n+...\n+```\n+\n+In this case, `guile-git` depends on either `guile-3.0` or `guile-2.2`, meaning\n+that it would work no matter what Guile version you decided to use.\n+\n+###### Corner case: Multiple versions of Guile on one system\n+\n+It is recommended to only install one version of Guile, so that build systems do\n+not get confused about which Guile to use.\n+\n+However, if you insist on having both Guile v2.2 and Guile v3.0 installed on\n+your system, then you need to **consistently** specify one of\n+`GUILE_EFFECTIVE_VERSION=3.0` or `GUILE_EFFECTIVE_VERSION=2.2` to all\n+`./configure` invocations for Guix and its dependencies.\n+\n+##### Installing Guile\n+\n+Guile is most likely already packaged for your distribution, so after you have\n+[chosen a Guile version](#choosing-a-guile-version-and-sticking-to-it), install\n+it via your distribution's package manager.\n+\n+If your distribution splits packages into `-dev`-suffixed and\n+non-`-dev`-suffixed sub-packages (as is the case for Debian-derived\n+distributions), please make sure to install both. For example, to install Guile\n+v2.2 on Debian/Ubuntu:\n+\n+```sh\n+apt install guile-2.2 guile-2.2-dev\n+```\n+\n+#### Mixing distribution packages and source-built packages\n+\n+At the time of writing, most distributions have _some_ of Guix's dependencies\n+packaged, but not all. This means that you may want to install the distribution\n+package for some dependencies, and manually build-from-source for others.\n+\n+Distribution packages usually install to `/usr`, which is different from the\n+default `./configure` prefix of source-built packages: `/usr/local`.\n+\n+This means that if you mix-and-match distribution packages and source-built\n+packages and do not specify exactly `--prefix=/usr` to `./configure` for\n+source-built packages, you will need to augment the `GUILE_LOAD_PATH` and\n+`GUILE_LOAD_COMPILED_PATH` environment variables so that Guile will look\n+under the right prefix and find your source-built packages.\n+\n+For example, if you are using Guile v2.2, and have Guile packages in the\n+`/usr/local` prefix, either add the following lines to your `.profile` or\n+`.bash_profile` so that the environment variable is properly set for all future\n+shell logins, or paste the lines into a POSIX-style shell to temporarily modify\n+the environment variables of your current shell session.\n+\n+```sh\n+# Help Guile v2.2.x find packages in /usr/local\n+export GUILE_LOAD_PATH=\"/usr/local/share/guile/site/2.2${GUILE_LOAD_PATH:+:}$GUILE_LOAD_PATH\"\n+export GUILE_LOAD_COMPILED_PATH=\"/usr/local/lib/guile/2.2/site-ccache${GUILE_LOAD_COMPILED_PATH:+:}$GUILE_COMPILED_LOAD_PATH\"\n+```\n+\n+Note that these environment variables are used to check for packages during\n+`./configure`, so they should be set as soon as possible should you want to use\n+a prefix other than `/usr`.\n+\n+<!-- ##### Example: Consistently using Guile 3.0 on Ubuntu -->\n+\n+<!-- For example, on Ubuntu, if you choose to use Guile 3.0 and install the -->\n+<!-- `guile-3.0` package, you want to make sure that if you also want to install the -->\n+<!-- `guile-git` package with `apt` that said `guile-git` package was built for Guile -->\n+<!-- v3.0. This can be checked by invoking the following: -->\n+\n+<!-- ``` -->\n+<!-- apt update -->\n+<!-- apt show guile-git -->\n+<!-- ``` -->\n+\n+#### Building and installing source-built packages\n+\n+***IMPORTANT**: A few dependencies have non-obvious quirks/erratas which are documented in the\n+sub-sections immediately below. Please read these sections before proceeding to\n+build and install these packages.*\n+\n+Although you should always refer to the README or INSTALL files for the most\n+accurate information, most of these dependencies use autoconf-style build\n+systems (check if there's a `configure.ac` file), and will likely do the right\n+thing with the following:\n+\n+Clone the repository and check out the latest release:\n+```sh\n+git clone <git-repo-of-dependency>/<dependency>.git\n+cd <dependency>\n+git tag -l  # check for the latest release\n+git checkout <latest-release>\n+```\n+\n+For autoconf-based build systems (if `./autogen.sh` or `configure.ac` exists at\n+the root of the repository):\n+\n+```sh\n+./autogen.sh || autoreconf -vfi\n+./configure --prefix=<prefix>\n+make\n+sudo make install\n+```\n+\n+For CMake-based build systems (if `CMakeLists.txt` exists at the root of the\n+repository):\n+\n+```sh\n+mkdir build && cd build\n+cmake .. -DCMAKE_INSTALL_PREFIX=<prefix>\n+sudo cmake --build . --target install\n+```\n+\n+If you choose not to specify exactly `--prefix=/usr` to `./configure`, please\n+make sure you've carefully read the [previous section] on mixing distribution\n+packages and source-built packages.\n+\n+##### Binding packages require `-dev`-suffixed packages\n+\n+Relevant for:\n+- Everyone\n+\n+When building bindings, the `-dev`-suffixed version of the original package\n+needs to be installed. For example, building `Guile-zlib` on Debian-derived\n+distributions requires that `zlib1g-dev` is installed.\n+\n+When using bindings, the `-dev`-suffixed version of the original package still\n+needs to be installed. This is particularly problematic when distribution\n+packages are mispackaged like `guile-sqlite3` is in Ubuntu Focal such that\n+installing `guile-sqlite3` does not automatically install `libsqlite3-dev` as a\n+dependency.\n+\n+Below is a list of relevant Guile bindings and their corresponding `-dev`\n+packages in Debian at the time of writing.\n+\n+| Guile binding package | -dev Debian package |\n+|-----------------------|---------------------|\n+| guile-gcrypt          | libgcrypt-dev       |\n+| guile-git             | libgit2-dev         |\n+| guile-lzlib           | liblz-dev           |\n+| guile-ssh             | libssh-dev          |\n+| guile-sqlite3         | libsqlite3-dev      |\n+| guile-zlib            | zlib1g-dev          |\n+\n+##### `guile-git` actually depends on `libgit2 >= 1.1`\n+\n+Relevant for:\n+- Those building `guile-git` from source against `libgit2 < 1.1`\n+- Those installing `guile-git` from their distribution where `guile-git` is\n+  built against `libgit2 < 1.1`\n+\n+As of v0.4.0, `guile-git` claims to only require `libgit2 >= 0.28.0`, however,\n+it actually requires `libgit2 >= 1.1`, otherwise, it will be confused by a\n+reference of `origin/keyring`: instead of interpreting the reference as \"the\n+'keyring' branch of the 'origin' remote\", the reference is interpreted as \"the\n+branch literally named 'origin/keyring'\"\n+\n+This is especially notable because Ubuntu Focal packages `libgit2 v0.28.4`, and\n+`guile-git` is built against it.\n+\n+Should you be in this situation, you need to build both `libgit2 v1.1.x` and\n+`guile-git` from source.\n+\n+Source: http://logs.guix.gnu.org/guix/2020-11-12.log#232527\n+\n+##### `{scheme,guile}-bytestructures` v1.0.8 and v1.0.9 are broken for Guile v2.2\n+\n+Relevant for:\n+- Those building `{scheme,guile}-bytestructures` from source against Guile v2.2\n+\n+Commit\n+[707eea3](https://github.com/TaylanUB/scheme-bytestructures/commit/707eea3a85e1e375e86702229ebf73d496377669)\n+introduced a regression for Guile v2.2 and was first included in v1.0.8, this\n+was later corrected in commit\n+[ec9a721](https://github.com/TaylanUB/scheme-bytestructures/commit/ec9a721957c17bcda13148f8faa5f06934431ff7)\n+and included in v1.1.0.\n+\n+TL;DR If you decided to use Guile v2.2, do not use `{scheme,guile}-bytestructures` v1.0.8 or v1.0.9.\n+\n+### Building and Installing Guix itself\n+\n+Start by cloning Guix:\n+\n+```\n+git clone https://git.savannah.gnu.org/git/guix.git\n+cd guix\n+```\n+\n+You will likely want to build the latest release, however, if the latest release\n+when you're reading this is still 1.2.0 then you may want to use 95aca29 instead\n+to avoid a problem in the GnuTLS test suite.\n+\n+```\n+git branch -a -l 'origin/version-*'  # check for the latest release\n+git checkout <latest-release>\n+```\n+\n+Bootstrap the build system:\n+```\n+./bootstrap\n+```\n+\n+Configure with the recommended `--localstatedir` flag:\n+```\n+./configure --localstatedir=/var\n+```\n+\n+Note: If you intend to hack on Guix in the future, you will need to supply the\n+same `--localstatedir=` flag for all future Guix `./configure` invocations. See\n+the last paragraph of this\n+[section](https://guix.gnu.org/manual/en/html_node/Requirements.html) for more\n+details.\n+\n+Build Guix (this will take a while):\n+```\n+make -j$(nproc)\n+```\n+\n+Install Guix:\n+\n+```\n+sudo make install\n+```\n+\n+### Post-\"build from source\" Setup\n+\n+#### Creating and starting a `guix-daemon-original` service with a fixed `argv[0]`\n+\n+At this point, guix will be installed to `${bindir}`, which is likely\n+`/usr/local/bin` if you did not override directory variables at\n+`./configure`-time. More information on standard Automake directory variables\n+can be found\n+[here](https://www.gnu.org/software/automake/manual/html_node/Standard-Directory-Variables.html).\n+\n+However, the Guix init scripts and service configurations for Upstart, systemd,\n+SysV, and OpenRC are installed to launch\n+`${localstatedir}/guix/profiles/per-user/root/current-guix/bin/guix-daemon`,\n+which does not yet exist, and will only exist after `root` performs their first\n+`guix pull`. TODO: Link to `guix pull` as root section\n+\n+We need to create a `-original` version of these init scripts that's pointed to\n+the binaries we just built and `make install`'ed in `${bindir}` (normally,\n+`/usr/local/bin`).\n+\n+Example for `systemd`, run as `root`:\n+\n+```sh\n+# Create guix-daemon-original.service by modifying guix-daemon.service\n+bindir=\"$(dirname $(command -v guix-daemon))\"\n+sed -E -e \"s|/\\S*/guix/profiles/per-user/root/current-guix/bin/guix-daemon|${bindir}/guix-daemon|\" /etc/systemd/system/guix-daemon.service > /etc/systemd/system/guix-daemon-original.service\n+chmod 664 /etc/systemd/system/guix-daemon-original.service\n+\n+# Make systemd recognize the new service\n+systemctl daemon-reload\n+\n+# Make sure that the non-working guix-daemon.service is stopped and disabled\n+systemctl stop guix-daemon\n+systemctl disable guix-daemon\n+\n+# Make sure that the working guix-daemon-original.service is started and enabled\n+systemctl enable guix-daemon-original\n+systemctl start guix-daemon-original\n+```\n+\n+#### Creating `guix-daemon` users / groups\n+\n+Please see the [relevant\n+section](https://guix.gnu.org/manual/en/html_node/Build-Environment-Setup.html)\n+in the Guix Reference Manual for more details.\n+\n+## Optional setup\n+\n+At this point, you are set up to [use Guix to build Bitcoin\n+Core](./README.md#usage). However, if you want to polish your setup a bit and\n+make it \"what Guix intended\", then read the next few subsections.\n+\n+### Add an `/etc/profile.d` entry\n+\n+This section definitely does not apply to you if you installed Guix using:\n+1. The shell installer script\n+2. fanquake's Docker image\n+3. Debian's `guix` package\n+\n+#### Background\n+\n+Although Guix knows how to update itself and its packages, it does so in a\n+non-invasive way (it does not modify `/usr/local/bin/guix`).\n+\n+Instead, it does the following:\n+\n+- After a `guix pull`, it updates\n+  `/var/guix/profiles/per-user/$USER/current-guix`, and creates a symlink\n+  targeting this directory at `$HOME/.config/guix/current`\n+\n+- After a `guix install`, it updates\n+  `/var/guix/profiles/per-user/$USER/guix-profile`, and creates a symlink\n+  targeting this directory at `$HOME/.guix-profile`\n+\n+Therefore, in order for these operations to affect your shell/desktop sessions\n+(and for the principle of least astonishment to hold), their corresponding\n+directories have to be added to well-known environment variables like `$PATH`,\n+`$INFOPATH`, `$XDG_DATA_DIRS`, etc.\n+\n+In other words, if `$HOME/.config/guix/current/bin` does not exist in your\n+`$PATH`, a `guix pull` will have no effect on what `guix` you are using. Same\n+goes for `$HOME/.guix-profile/bin`, `guix install`, and installed packages.\n+\n+Helpfully, after a `guix pull` or `guix install`, a message will be printed like\n+so:\n+\n+```\n+hint: Consider setting the necessary environment variables by running:\n+\n+     GUIX_PROFILE=\"$HOME/.guix-profile\"\n+     . \"$GUIX_PROFILE/etc/profile\"\n+\n+Alternately, see `guix package --search-paths -p \"$HOME/.guix-profile\"'.\n+```\n+\n+However, this is somewhat tedious to do for both `guix pull` and `guix install`\n+for each user on the system that wants to properly use `guix`. I recommend that\n+you instead add an entry to `/etc/profile.d` instead. This is done by default\n+when installing the Debian package later than 1.2.0-4 and when using the shell\n+script installer.\n+\n+#### Instructions\n+\n+Create `/etc/profile.d/guix.sh` with the following content:\n+```sh\n+# _GUIX_PROFILE: `guix pull` profile\n+_GUIX_PROFILE=\"$HOME/.config/guix/current\"\n+if [ -L $_GUIX_PROFILE ]; then\n+  export PATH=\"$_GUIX_PROFILE/bin${PATH:+:}$PATH\"\n+  # Export INFOPATH so that the updated info pages can be found\n+  # and read by both /usr/bin/info and/or $GUIX_PROFILE/bin/info\n+  # When INFOPATH is unset, add a trailing colon so that Emacs\n+  # searches 'Info-default-directory-list'.\n+  export INFOPATH=\"$_GUIX_PROFILE/share/info:$INFOPATH\"\n+fi\n+\n+# GUIX_PROFILE: User's default profile\n+GUIX_PROFILE=\"$HOME/.guix-profile\"\n+[ -L $GUIX_PROFILE ] || return\n+GUIX_LOCPATH=\"$GUIX_PROFILE/lib/locale\"\n+export GUIX_PROFILE GUIX_LOCPATH\n+\n+[ -f \"$GUIX_PROFILE/etc/profile\" ] && . \"$GUIX_PROFILE/etc/profile\"\n+\n+# set XDG_DATA_DIRS to include Guix installations\n+export XDG_DATA_DIRS=\"$GUIX_PROFILE/share:${XDG_DATA_DIRS:-/usr/local/share/:/usr/share/}\"\n+```\n+\n+Please note that this will not take effect until the next shell or desktop\n+session (log out and log back in).\n+\n+### `guix pull` as root\n+\n+Before you do this, you need to read the section on [choosing your security\n+model][security-model] and adjust `guix` and `guix-daemon` flags according to\n+your choice, as invoking `guix pull` may pull substitutes from substitute\n+servers (which you may not want).\n+\n+As mentioned in a previous section, Guix expects\n+`${localstatedir}/guix/profiles/per-user/root/current-guix` to be populated with\n+`root`'s Guix profile, `guix pull`-ed and built by some former version of Guix.\n+However, this is not the case when we build from source. Therefore, we need to\n+perform a `guix pull` as `root`:\n+\n+```sh\n+sudo --login guix pull --branch=version-<latest-release-version>\n+# or\n+sudo --login guix pull --commit=<particular-commit>\n+```\n+\n+`guix pull` is quite a long process (especially if you're using\n+`--no-substitute`). If you encounter build problems, please refer to the\n+[troubleshooting section](#troubleshooting).\n+\n+Note that running a bare `guix pull` with no commit or branch specified will\n+pull the latest commit on Guix's master branch, which is likely fine, but not\n+recommended.\n+\n+If you installed Guix from source, you may get an error like the following:\n+```sh\n+error: while creating symlink '/root/.config/guix/current' No such file or directory\n+```\n+To resolve this, simply:\n+```\n+sudo mkdir -p /root/.config/guix\n+```\n+Then try the `guix pull` command again.\n+\n+After the `guix pull` finishes successfully,\n+`${localstatedir}/guix/profiles/per-user/root/current-guix` should be populated.\n+\n+#### Using the newly-pulled `guix` by restarting the daemon\n+\n+Depending on how you installed Guix, you should now make sure that your init\n+scripts and service configurations point to the newly-pulled `guix-daemon`.\n+\n+##### If you built Guix from source\n+\n+If you followed the instructions for [fixing argv\\[0\\]][fix-argv0], you can now\n+do the following:\n+\n+```sh\n+systemctl stop guix-daemon-original\n+systemctl disable guix-daemon-original\n+\n+systemctl enable guix-daemon\n+systemctl start guix-daemon\n+```\n+\n+##### If you installed Guix via the Debian/Ubuntu distribution packages\n+\n+You will need to create a `guix-daemon-latest` service which points to the new\n+`guix` rather than a pinned one.\n+\n+```sh\n+# Create guix-daemon-latest.service by modifying guix-daemon.service\n+sed -E -e \"s|/usr/bin/guix-daemon|/var/guix/profiles/per-user/root/current-guix/bin/guix-daemon|\" /etc/systemd/system/guix-daemon.service > /lib/systemd/system/guix-daemon-latest.service\n+chmod 664 /lib/systemd/system/guix-daemon-latest.service\n+\n+# Make systemd recognize the new service\n+systemctl daemon-reload\n+\n+# Make sure that the old guix-daemon.service is stopped and disabled\n+systemctl stop guix-daemon\n+systemctl disable guix-daemon\n+\n+# Make sure that the new guix-daemon-latest.service is started and enabled\n+systemctl enable guix-daemon-latest\n+systemctl start guix-daemon-latest\n+```\n+\n+##### If you installed Guix via lantw44's Arch Linux AUR package\n+\n+At the time of writing (July 5th, 2021) the systemd unit for \"updated Guix\" is\n+`guix-daemon-latest.service`, therefore, you should do the following:\n+\n+```sh\n+systemctl stop guix-daemon\n+systemctl disable guix-daemon\n+\n+systemctl enable guix-daemon-latest\n+systemctl start guix-daemon-latest\n+```\n+\n+##### Otherwise...\n+\n+Simply do:\n+\n+```sh\n+systemctl restart guix-daemon\n+```\n+\n+### Checking everything\n+\n+If you followed all the steps above to make your Guix setup \"prim and proper,\"\n+you can check that you did everything properly by running through this\n+checklist.\n+\n+1. `/etc/profile.d/guix.sh` should exist and be sourced at each shell login\n+\n+2. `guix describe` should not print `guix describe: error: failed to determine\n+   origin`, but rather something like:\n+\n+   ```\n+   Generation 38   Feb 22 2021 16:39:31    (current)\n+     guix f350df4\n+       repository URL: https://git.savannah.gnu.org/git/guix.git\n+       branch: version-1.2.0\n+       commit: f350df405fbcd5b9e27e6b6aa500da7f101f41e7\n+   ```\n+\n+3. `guix-daemon` should be running from `${localstatedir}/guix/profiles/per-user/root/current-guix`\n+\n+# Troubleshooting\n+\n+## Derivation failed to build\n+\n+When you see a build failure like below:\n+\n+```\n+building /gnu/store/...-foo-3.6.12.drv...\n+/ 'check' phasenote: keeping build directory `/tmp/guix-build-foo-3.6.12.drv-0'\n+builder for `/gnu/store/...-foo-3.6.12.drv' failed with exit code 1\n+build of /gnu/store/...-foo-3.6.12.drv failed\n+View build log at '/var/log/guix/drvs/../...-foo-3.6.12.drv.bz2'.\n+cannot build derivation `/gnu/store/...-qux-7.69.1.drv': 1 dependencies couldn't be built\n+cannot build derivation `/gnu/store/...-bar-3.16.5.drv': 1 dependencies couldn't be built\n+cannot build derivation `/gnu/store/...-baz-2.0.5.drv': 1 dependencies couldn't be built\n+guix time-machine: error: build of `/gnu/store/...-baz-2.0.5.drv' failed\n+```\n+\n+It means that `guix` failed to build a package named `foo`, which was a\n+dependency of `qux`, `bar`, and `baz`. Importantly, note that the last \"failed\"\n+line is not necessarily the root cause, the first \"failed\" line is.\n+\n+Most of the time, the build failure is due to a spurious test failure or the\n+package's build system/test suite breaking when running multi-threaded. To\n+rebuild _just_ this derivation in a single-threaded fashion (please don't forget\n+to add other `guix` flags like `--no-substitutes` as appropriate):\n+\n+```sh\n+$ guix build --cores=1 /gnu/store/...-foo-3.6.12.drv\n+```\n+\n+If the single-threaded rebuild did not succeed, you may need to dig deeper.\n+You may view `foo`'s build logs in `less` like so (please replace paths with the\n+path you see in the build failure output):\n+\n+```sh\n+$ bzcat /var/log/guix/drvs/../...-foo-3.6.12.drv.bz2 | less\n+```\n+\n+`foo`'s build directory is also preserved and available at\n+`/tmp/guix-build-foo-3.6.12.drv-0`. However, if you fail to build `foo` multiple\n+times, it may be `/tmp/...drv-1` or `/tmp/...drv-2`. Always consult the build\n+failure output for the most accurate, up-to-date information.\n+\n+### python(-minimal): [Errno 84] Invalid or incomplete multibyte or wide character\n+\n+This error occurs when your `$TMPDIR` (default: /tmp) exists on a filesystem\n+which rejects characters not present in the UTF-8 character code set. An example\n+is ZFS with the utf8only=on option set.\n+\n+More information: https://bugs.python.org/issue37584\n+\n+### GnuTLS: test-suite FAIL: status-request-revoked\n+\n+*The derivation is likely identified by: `/gnu/store/vhphki5sg9xkdhh2pbc8gi6vhpfzryf0-gnutls-3.6.12.drv`*\n+\n+This unfortunate error is most common for non-substitute builders who installed\n+Guix v1.2.0. The problem stems from the fact that one of GnuTLS's tests uses a\n+hardcoded certificate which expired on 2020-10-24.\n+\n+What's more unfortunate is that this GnuTLS derivation is somewhat special in\n+Guix's dependency graph and is not affected by the package transformation flags\n+like `--without-tests=`.\n+\n+The easiest solution for those encountering this problem is to install a newer\n+version of Guix. However, there are ways to work around this issue:\n+\n+#### Workaround 1: Using substitutes for this single derivation\n+\n+If you've authorized the official Guix build farm's key (more info\n+[here](./README.md#step-1-authorize-the-signing-keys)), then you can use\n+substitutes just for this single derivation by invoking the following:\n+\n+```sh\n+guix build --substitute-urls=\"https://ci.guix.gnu.org\" /gnu/store/vhphki5sg9xkdhh2pbc8gi6vhpfzryf0-gnutls-3.6.12.drv\n+```\n+\n+See [this section](./README.md#removing-authorized-keys) for instructions on how\n+to remove authorized keys if you don't want to keep the build farm's key\n+authorized.\n+\n+#### Workaround 2: Temporarily setting the system clock back\n+\n+This workaround was described [here](https://issues.guix.gnu.org/44559#5).\n+\n+Basically:\n+1. Turn off networking\n+2. Turn off NTP\n+3. Set system time to 2020-10-01\n+4. guix build --no-substitutes /gnu/store/vhphki5sg9xkdhh2pbc8gi6vhpfzryf0-gnutls-3.6.12.drv\n+5. Set system time back to accurate current time\n+6. Turn NTP back on\n+7. Turn networking back on\n+\n+[install-script]: #options-1-and-2-using-the-official-shell-installer-script-or-binary-tarball\n+[install-bin-tarball]: #options-1-and-2-using-the-official-shell-installer-script-or-binary-tarball\n+[install-fanquake-docker]: #option-3-using-fanquakes-docker-image\n+[install-distro-pkg]: #option-4-using-a-distribution-maintained-package\n+[install-source]: #option-5-building-from-source\n+\n+[fix-argv0]: #creating-and-starting-a-guix-daemon-original-service-with-a-fixed-argv0\n+[security-model]: ./README.md#choosing-your-security-model"
      },
      {
        "sha": "4680368a6f876d7406ae3d6d7acc120df1505e38",
        "filename": "contrib/guix/README.md",
        "status": "modified",
        "additions": 279,
        "deletions": 139,
        "changes": 418,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2541fd0ca99481a5a792a8f2772925d64fb0491/contrib/guix/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2541fd0ca99481a5a792a8f2772925d64fb0491/contrib/guix/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/README.md?ref=c2541fd0ca99481a5a792a8f2772925d64fb0491",
        "patch": "@@ -9,83 +9,171 @@ downloads.\n \n We achieve bootstrappability by using Guix as a functional package manager.\n \n-## Requirements\n+# Requirements\n \n Conservatively, a x86_64 machine with:\n \n - 16GB of free disk space on the partition that /gnu/store will reside in\n-- 8GB of free disk space per platform triple you're planning on building (see\n-  the `HOSTS` environment variable description)\n+- 8GB of free disk space **per platform triple** you're planning on building\n+  (see the `HOSTS` [environment variable description][env-vars-list])\n \n-## Setup\n+# Installation and Setup\n \n-### Installing Guix\n+If you don't have Guix installed and set up, please follow the instructions in\n+[INSTALL.md](./INSTALL.md)\n \n-If you're just testing this out, you can use the\n-[Dockerfile][fanquake/guix-docker] for convenience. It automatically speeds up\n-your builds by [using substitutes](#speeding-up-builds-with-substitute-servers).\n-If you don't want this behaviour, refer to the [next\n-section](#choosing-your-security-model).\n+# Usage\n \n-Otherwise, follow the [Guix installation guide][guix/bin-install].\n+If you haven't considered your security model yet, please read [the relevant\n+section](#choosing-your-security-model) before proceeding to perform a build.\n \n-> Note: For those who like to keep their filesystems clean, Guix is designed to\n-> be very standalone and _will not_ conflict with your system's package\n-> manager/existing setup. It _only_ touches `/var/guix`, `/gnu`, and\n-> `~/.config/guix`.\n+## Making the Xcode SDK available for macOS cross-compilation\n \n-### Choosing your security model\n+In order to perform a build for macOS (which is included in the default set of\n+platform triples to build), you'll need to extract the macOS SDK tarball using\n+tools found in the [`macdeploy` directory](../macdeploy/README.md).\n \n-Guix allows us to achieve better binary security by using our CPU time to build\n-everything from scratch. However, it doesn't sacrifice user choice in pursuit of\n-this: users can decide whether or not to bootstrap and to use substitutes\n-(pre-built packages).\n+You can then either point to the SDK using the `SDK_PATH` environment variable:\n \n-After installation, you may want to consider [adding substitute\n-servers](#speeding-up-builds-with-substitute-servers) from which to download\n-pre-built packages to speed up your build if that fits your security model (say,\n-if you're just testing that this works). Substitute servers are set up by\n-default if you're using the [Dockerfile][fanquake/guix-docker].\n+```sh\n+# Extract the SDK tarball to /path/to/parent/dir/of/extracted/SDK/Xcode-<foo>-<bar>-extracted-SDK-with-libcxx-headers\n+tar -C /path/to/parent/dir/of/extracted/SDK -xaf /path/to/Xcode-<foo>-<bar>-extracted-SDK-with-libcxx-headers.tar.gz\n \n-If you prefer not to use any substitutes, make sure to supply `--no-substitutes`\n-like in the following snippet. The first build will take a while, but the\n-resulting packages will be cached for future builds.\n+# Indicate where to locate the SDK tarball\n+export SDK_PATH=/path/to/parent/dir/of/extracted/SDK\n+```\n+\n+or extract it into `depends/SDKs`:\n \n ```sh\n-export ADDITIONAL_GUIX_COMMON_FLAGS='--no-substitutes'\n+mkdir -p depends/SDKs\n+tar -C depends/SDKs -xaf /path/to/SDK/tarball\n ```\n \n-Likewise, to perform a bootstrapped build (takes even longer):\n+## Building\n+\n+*The author highly recommends at least reading over the [common usage patterns\n+and examples](#common-guix-build-invocation-patterns-and-examples) section below\n+before starting a build. For a full list of customization options, see the\n+[recognized environment variables][env-vars-list] section.*\n+\n+To build Bitcoin Core reproducibly with all default options, invoke the\n+following from the top of a clean repository:\n \n ```sh\n-export ADDITIONAL_GUIX_COMMON_FLAGS='--no-substitutes' ADDITIONAL_GUIX_ENVIRONMENT_FLAGS='--bootstrap'\n+./contrib/guix/guix-build\n ```\n \n-### Using a version of Guix with `guix time-machine` capabilities\n+## Codesigning build outputs\n \n-> Note: This entire section can be skipped if you are already using a version of\n-> Guix that has [the `guix time-machine` command][guix/time-machine].\n+The `guix-codesign` command attaches codesignatures (produced by codesigners) to\n+existing non-codesigned outputs. Please see the [release process\n+documentation](/doc/release-process.md) for more context.\n \n-Once Guix is installed, if it doesn't have the `guix time-machine` command, pull\n-the latest `guix`.\n+It respects many of the same environment variable flags as `guix-build`, with 2\n+crucial differences:\n+\n+1. Since only Windows and macOS build outputs require codesigning, the `HOSTS`\n+   environment variable will have a sane default value of `x86_64-w64-mingw32\n+   x86_64-apple-darwin18` instead of all the platforms.\n+2. The `guix-codesign` command ***requires*** a `DETACHED_SIGS_REPO` flag.\n+    * _**DETACHED_SIGS_REPO**_\n+\n+      Set the directory where detached codesignatures can be found for the current\n+      Bitcoin Core version being built.\n+\n+      _REQUIRED environment variable_\n+\n+An invocation with all default options would look like:\n+\n+```\n+env DETACHED_SIGS_REPO=<path/to/bitcoin-detached-sigs> ./contrib/guix-codesign\n+```\n+\n+## Cleaning intermediate work directories\n+\n+By default, `guix-build` leaves all intermediate files or \"work directories\"\n+(e.g. `depends/work`, `guix-build-*/distsrc-*`) intact at the end of a build so\n+that they are available to the user (to aid in debugging, etc.). However, these\n+directories usually take up a large amount of disk space. Therefore, a\n+`guix-clean` convenience script is provided which cleans the current `git`\n+worktree to save disk space:\n+\n+```\n+./contrib/guix/guix-clean\n+```\n+\n+\n+## Attesting to build outputs\n+\n+Much like how Gitian build outputs are attested to in a `gitian.sigs`\n+repository, Guix build outputs are attested to in the [`guix.sigs`\n+repository](https://github.com/bitcoin-core/guix.sigs).\n+\n+After you've cloned the `guix.sigs` repository, to attest to the current\n+worktree's commit/tag:\n+\n+```\n+env GUIX_SIGS_REPO=<path/to/guix.sigs> SIGNER=<gpg-key-name> ./contrib/guix/guix-attest\n+```\n+\n+See `./contrib/guix/guix-attest --help` for more information on the various ways\n+`guix-attest` can be invoked.\n+\n+## Verifying build output attestations\n+\n+After at least one other signer has uploaded their signatures to the `guix.sigs`\n+repository:\n+\n+```\n+git -C <path/to/guix.sigs> pull\n+env GUIX_SIGS_REPO=<path/to/guix.sigs> ./contrib/guix/guix-verify\n+```\n+\n+\n+## Common `guix-build` invocation patterns and examples\n+\n+### Keeping caches and SDKs outside of the worktree\n+\n+If you perform a lot of builds and have a bunch of worktrees, you may find it\n+more efficient to keep the depends tree's download cache, build cache, and SDKs\n+outside of the worktrees to avoid duplicate downloads and unnecessary builds. To\n+help with this situation, the `guix-build` script honours the `SOURCES_PATH`,\n+`BASE_CACHE`, and `SDK_PATH` environment variables and will pass them on to the\n+depends tree so that you can do something like:\n \n ```sh\n-guix pull --max-jobs=4 # change number of jobs accordingly\n+env SOURCES_PATH=\"$HOME/depends-SOURCES_PATH\" BASE_CACHE=\"$HOME/depends-BASE_CACHE\" SDK_PATH=\"$HOME/macOS-SDKs\" ./contrib/guix/guix-build\n ```\n \n-Make sure that you are using your current profile. (You are prompted to do this\n-at the end of the `guix pull`)\n+Note that the paths that these environment variables point to **must be\n+directories**, and **NOT symlinks to directories**.\n+\n+See the [recognized environment variables][env-vars-list] section for more\n+details.\n+\n+### Building a subset of platform triples\n \n-```bash\n-export PATH=\"${HOME}/.config/guix/current/bin${PATH:+:}$PATH\"\n+Sometimes you only want to build a subset of the supported platform triples, in\n+which case you can override the default list by setting the space-separated\n+`HOSTS` environment variable:\n+\n+```sh\n+env HOSTS='x86_64-w64-mingw32 x86_64-apple-darwin18' ./contrib/guix/guix-build\n ```\n \n+See the [recognized environment variables][env-vars-list] section for more\n+details.\n+\n ### Controlling the number of threads used by `guix` build commands\n \n+Depending on your system's RAM capacity, you may want to decrease the number of\n+threads used to decrease RAM usage or vice versa.\n+\n By default, the scripts under `./contrib/guix` will invoke all `guix` build\n commands with `--cores=\"$JOBS\"`. Note that `$JOBS` defaults to `$(nproc)` if not\n-specified. However, astute manual readers will also notice that there is a\n-`--max-jobs=` flag (which defaults to 1 if unspecified).\n+specified. However, astute manual readers will also notice that `guix` build\n+commands also accept a `--max-jobs=` flag (which defaults to 1 if unspecified).\n \n Here is the difference between `--cores=` and `--max-jobs=`:\n \n@@ -124,30 +212,18 @@ packages when the dependency graph allows for it, you may want to try:\n export JOBS=1 ADDITIONAL_GUIX_COMMON_FLAGS='--max-jobs=8'\n ```\n \n-## Usage\n-\n-### As a Tool for Deterministic Builds\n-\n-From the top of a clean Bitcoin Core repository:\n-\n-```sh\n-./contrib/guix/guix-build\n-```\n-\n-After the build finishes successfully (check the status code please), compare\n-hashes:\n-\n-```sh\n-find output/ -type f -print0 | sort -z | xargs -r0 sha256sum\n-```\n+See the [recognized environment variables][env-vars-list] section for more\n+details.\n \n-#### Recognized environment variables\n+## Recognized environment variables\n \n * _**HOSTS**_\n \n   Override the space-separated list of platform triples for which to perform a\n-  bootstrappable build. _(defaults to \"x86\\_64-linux-gnu arm-linux-gnueabihf\n-  aarch64-linux-gnu riscv64-linux-gnu powerpc64-linux-gnu powerpc64le-linux-gnu\n+  bootstrappable build.\n+\n+  _(defaults to \"x86\\_64-linux-gnu arm-linux-gnueabihf aarch64-linux-gnu\n+  riscv64-linux-gnu powerpc64-linux-gnu powerpc64le-linux-gnu\n   x86\\_64-w64-mingw32 x86\\_64-apple-darwin18\")_\n \n * _**SOURCES_PATH**_\n@@ -156,18 +232,27 @@ find output/ -type f -print0 | sort -z | xargs -r0 sha256sum\n   depends tree. Setting this to the same directory across multiple builds of the\n   depends tree can eliminate unnecessary redownloading of package sources.\n \n+  The path that this environment variable points to **must be a directory**, and\n+  **NOT a symlink to a directory**.\n+\n * _**BASE_CACHE**_\n \n   Set the depends tree cache for built packages. This is passed through to the\n   depends tree. Setting this to the same directory across multiple builds of the\n   depends tree can eliminate unnecessary building of packages.\n \n+  The path that this environment variable points to **must be a directory**, and\n+  **NOT a symlink to a directory**.\n+\n * _**SDK_PATH**_\n \n   Set the path where _extracted_ SDKs can be found. This is passed through to\n   the depends tree. Note that this is should be set to the _parent_ directory of\n-  the actual SDK (e.g. SDK_PATH=$HOME/Downloads/macOS-SDKs instead of\n-  $HOME/Downloads/macOS-SDKs/Xcode-12.1-12A7403-extracted-SDK-with-libcxx-headers).\n+  the actual SDK (e.g. `SDK_PATH=$HOME/Downloads/macOS-SDKs` instead of\n+  `$HOME/Downloads/macOS-SDKs/Xcode-12.1-12A7403-extracted-SDK-with-libcxx-headers`).\n+\n+  The path that this environment variable points to **must be a directory**, and\n+  **NOT a symlink to a directory**.\n \n * _**JOBS**_\n \n@@ -178,13 +263,17 @@ find output/ -type f -print0 | sort -z | xargs -r0 sha256sum\n   - `make` as in `make --jobs=\"$JOBS\"`\n   - `xargs` as in `xargs -P\"$JOBS\"`\n \n+  See [here](#controlling-the-number-of-threads-used-by-guix-build-commands) for\n+  more details.\n+\n   _(defaults to the value of `nproc` outside the container)_\n \n * _**SOURCE_DATE_EPOCH**_\n \n   Override the reference UNIX timestamp used for bit-for-bit reproducibility,\n-  the variable name conforms to [standard][r12e/source-date-epoch]. _(defaults\n-  to the output of `$(git log --format=%at -1)`)_\n+  the variable name conforms to [standard][r12e/source-date-epoch].\n+\n+  _(defaults to the output of `$(git log --format=%at -1)`)_\n \n * _**V**_\n \n@@ -200,8 +289,7 @@ find output/ -type f -print0 | sort -z | xargs -r0 sha256sum\n \n   A whitespace-delimited list of URLs from which to download pre-built packages.\n   A URL is only used if its signing key is authorized (refer to the [substitute\n-  servers section](#speeding-up-builds-with-substitute-servers) for more\n-  details).\n+  servers section](#option-1-building-with-substitutes) for more details).\n \n * _**ADDITIONAL_GUIX_COMMON_FLAGS**_\n \n@@ -216,119 +304,169 @@ find output/ -type f -print0 | sort -z | xargs -r0 sha256sum\n   Additional flags to be passed to the invocation of `guix environment` inside\n   `guix time-machine`.\n \n-## Tips and Tricks\n-\n-### Speeding up builds with substitute servers\n+# Choosing your security model\n \n-_This whole section is automatically done in the convenience\n-[Dockerfiles][fanquake/guix-docker]_\n+No matter how you installed Guix, you need to decide on your security model for\n+building packages with Guix.\n \n-For those who are used to life in the fast _(and trustful)_ lane, you can\n-specify [substitute servers][guix/substitutes] from which to download pre-built\n-packages.\n+Guix allows us to achieve better binary security by using our CPU time to build\n+everything from scratch. However, it doesn't sacrifice user choice in pursuit of\n+this: users can decide whether or not to use **substitutes** (pre-built\n+packages).\n+\n+## Option 1: Building with substitutes\n+\n+### Step 1: Authorize the signing keys\n+\n+Depending on the installation procedure you followed, you may have already\n+authorized the Guix build farm key. In particular, the official shell installer\n+script asks you if you want the key installed, and the debian distribution\n+package authorized the key during installation.\n+\n+You can check the current list of authorized keys at `/etc/guix/acl`.\n+\n+At the time of writing, a `/etc/guix/acl` with just the Guix build farm key\n+authorized looks something like:\n+\n+```lisp\n+(acl\n+ (entry\n+  (public-key\n+   (ecc\n+    (curve Ed25519)\n+    (q #8D156F295D24B0D9A86FA5741A840FF2D24F60F7B6C4134814AD55625971B394#)\n+    )\n+   )\n+  (tag\n+   (guix import)\n+   )\n+  )\n+ )\n+```\n \n-> For those who only want to use substitutes from the official Guix build farm\n-> and have authorized the build farm's signing key during Guix's installation,\n-> you don't need to do anything.\n+If you've determined that the official Guix build farm key hasn't been\n+authorized, and you would like to authorize it, run the following as root:\n \n-#### Step 1: Authorize the signing keys\n+```\n+guix archive --authorize < /var/guix/profiles/per-user/root/current-guix/share/guix/ci.guix.gnu.org.pub\n+```\n \n-For the official Guix build farm at https://ci.guix.gnu.org, run as root:\n+If\n+`/var/guix/profiles/per-user/root/current-guix/share/guix/ci.guix.gnu.org.pub`\n+doesn't exist, try:\n \n+```sh\n+guix archive --authorize < <PREFIX>/share/guix/ci.guix.gnu.org.pub\n ```\n-guix archive --authorize < ~root/.config/guix/current/share/guix/ci.guix.gnu.org.pub\n-```\n+\n+Where `<PREFIX>` is likely:\n+- `/usr` if you installed from a distribution package\n+- `/usr/local` if you installed Guix from source and didn't supply any\n+  prefix-modifying flags to Guix's `./configure`\n \n For dongcarl's substitute server at https://guix.carldong.io, run as root:\n \n ```sh\n wget -qO- 'https://guix.carldong.io/signing-key.pub' | guix archive --authorize\n ```\n \n-#### Step 2: Specify the substitute servers\n+#### Removing authorized keys\n \n-The official Guix build farm at https://ci.guix.gnu.org is automatically used\n-unless the `--no-substitutes` flag is supplied.\n+To remove previously authorized keys, simply edit `/etc/guix/acl` and remove the\n+`(entry (public-key ...))` entry.\n \n-This can be overridden for all `guix` invocations by passing the\n-`--substitute-urls` option to your invocation of `guix-daemon`. This can also be\n-overridden on a call-by-call basis by passing the same `--substitute-urls`\n-option to client tools such at `guix environment`.\n+### Step 2: Specify the substitute servers\n \n-To use dongcarl's substitute server for Bitcoin Core builds after having\n-[authorized his signing key](#authorize-the-signing-keys):\n+Once its key is authorized, the official Guix build farm at\n+https://ci.guix.gnu.org is automatically used unless the `--no-substitutes` flag\n+is supplied. This default list of substitute servers is overridable both on a\n+`guix-daemon` level and when you invoke `guix` commands. See examples below for\n+the various ways of adding dongcarl's substitute server after having [authorized\n+his signing key](#authorize-the-signing-keys).\n \n-```\n-export SUBSTITUTE_URLS='https://guix.carldong.io https://ci.guix.gnu.org'\n+Change the **default list** of substitute servers by starting `guix-daemon` with\n+the `--substitute-urls` option (you will likely need to edit your init script):\n+\n+```sh\n+guix-daemon <cmd> --substitute-urls='https://guix.carldong.io https://ci.guix.gnu.org'\n ```\n \n-## Troubleshooting\n+Override the default list of substitute servers by passing the\n+`--substitute-urls` option for invocations of `guix` commands:\n \n-### Derivation failed to build\n+```sh\n+guix <cmd> --substitute-urls='https://guix.carldong.io https://ci.guix.gnu.org'\n+```\n \n-When you see a build failure like below:\n+For scripts under `./contrib/guix`, set the `SUBSTITUTE_URLS` environment\n+variable:\n \n-```\n-building /gnu/store/...-foo-3.6.12.drv...\n-/ 'check' phasenote: keeping build directory `/tmp/guix-build-foo-3.6.12.drv-0'\n-builder for `/gnu/store/...-foo-3.6.12.drv' failed with exit code 1\n-build of /gnu/store/...-foo-3.6.12.drv failed\n-View build log at '/var/log/guix/drvs/../...-foo-3.6.12.drv.bz2'.\n-cannot build derivation `/gnu/store/...-qux-7.69.1.drv': 1 dependencies couldn't be built\n-cannot build derivation `/gnu/store/...-bar-3.16.5.drv': 1 dependencies couldn't be built\n-cannot build derivation `/gnu/store/...-baz-2.0.5.drv': 1 dependencies couldn't be built\n-guix time-machine: error: build of `/gnu/store/...-baz-2.0.5.drv' failed\n+```sh\n+export SUBSTITUTE_URLS='https://guix.carldong.io https://ci.guix.gnu.org'\n ```\n \n-It means that `guix` failed to build a package named `foo`, which was a\n-dependency of `qux`, `bar`, and `baz`. Importantly, note that the last \"failed\"\n-line is not necessarily the root cause, the first \"failed\" line is.\n+## Option 2: Disabling substitutes on an ad-hoc basis\n \n-Most of the time, the build failure is due to a spurious test failure or the\n-package's build system/test suite breaking when running multi-threaded. To\n-rebuild _just_ this derivation in a single-threaded fashion:\n+If you prefer not to use any substitutes, make sure to supply `--no-substitutes`\n+like in the following snippet. The first build will take a while, but the\n+resulting packages will be cached for future builds.\n \n+For direct invocations of `guix`:\n ```sh\n-$ guix build --cores=1 /gnu/store/...-foo-3.6.12.drv\n+guix <cmd> --no-substitutes\n ```\n \n-If the single-threaded rebuild did not succeed, you may need to dig deeper.\n-You may view `foo`'s build logs in `less` like so (please replace paths with the\n-path you see in the build failure output):\n-\n+For the scripts under `./contrib/guix/`:\n ```sh\n-$ bzcat /var/log/guix/drvs/../...-foo-3.6.12.drv.bz2 | less\n+export ADDITIONAL_GUIX_COMMON_FLAGS='--no-substitutes'\n ```\n \n-`foo`'s build directory is also preserved and available at\n-`/tmp/guix-build-foo-3.6.12.drv-0`. However, if you fail to build `foo` multiple\n-times, it may be `/tmp/...drv-1` or `/tmp/...drv-2`. Always consult the build\n-failure output for the most accurate, up-to-date information.\n+## Option 3: Disabling substitutes by default\n+\n+`guix-daemon` accepts a `--no-substitutes` flag, which will make sure that,\n+unless otherwise overridden by a command line invocation, no substitutes will be\n+used.\n \n-#### python(-minimal): [Errno 84] Invalid or incomplete multibyte or wide character\n+If you start `guix-daemon` using an init script, you can edit said script to\n+supply this flag.\n \n-This error occurs when your `$TMPDIR` (default: /tmp) exists on a filesystem\n-which rejects characters not present in the UTF-8 character code set. An example\n-is ZFS with the utf8only=on option set.\n \n-More information: https://bugs.python.org/issue37584\n+# Purging/Uninstalling Guix\n \n-## FAQ\n+In the extraordinarily rare case where you messed up your Guix installation in\n+an irreversible way, you may want to completely purge Guix from your system and\n+start over.\n \n-### How can I trust the binary installation?\n+1. Uninstall Guix itself according to the way you installed it. (e.g. `sudo apt\n+   purge guix` for Ubuntu packaging, `sudo make uninstall` for\n+   built-from-source).\n+2. Remove all build users and groups\n \n-As mentioned at the bottom of [this manual page][guix/bin-install]:\n+   You may check for relevant users and groups using:\n \n-> The binary installation tarballs can be (re)produced and verified simply by\n-> running the following command in the Guix source tree:\n->\n->     make guix-binary.x86_64-linux.tar.xz\n+   ```\n+   getent passwd | grep guix\n+   getent group | grep guix\n+   ```\n \n-### Is Guix packaged in my operating system?\n+   Then, you may remove users and groups using:\n \n-Guix is shipped starting with [Debian Bullseye][debian/guix-bullseye] and\n-[Ubuntu 21.04 \"Hirsute Hippo\"][ubuntu/guix-hirsute]. Other operating systems\n-are working on packaging Guix as well.\n+   ```\n+   sudo userdel <user>\n+   sudo groupdel <group>\n+   ```\n+\n+3. Remove all possible Guix-related directories\n+    - `/var/guix/`\n+    - `/var/log/guix/`\n+    - `/gnu/`\n+    - `/etc/guix/`\n+    - `/home/*/.config/guix/`\n+    - `/home/*/.cache/guix/`\n+    - `/home/*/.guix-profile/`\n+    - `/root/.config/guix/`\n+    - `/root/.cache/guix/`\n+    - `/root/.guix-profile/`\n \n [b17e]: http://bootstrappable.org/\n [r12e/source-date-epoch]: https://reproducible-builds.org/docs/source-date-epoch/\n@@ -343,3 +481,5 @@ are working on packaging Guix as well.\n [debian/guix-bullseye]: https://packages.debian.org/bullseye/guix\n [ubuntu/guix-hirsute]: https://packages.ubuntu.com/hirsute/guix\n [fanquake/guix-docker]: https://github.com/fanquake/core-review/tree/master/guix\n+\n+[env-vars-list]: #recognized-environment-variables"
      }
    ]
  },
  {
    "sha": "fcab35b2292f9221eaba521740e8b3b2511a8b78",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmY2FiMzViMjI5MmY5MjIxZWFiYTUyMTc0MGU4YjNiMjUxMWE4Yjc4",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-07-02T23:42:22Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-07-19T22:24:36Z"
      },
      "message": "guix-attest: Produce and sign normalized documents\n\nThat way we can easily combine the document and detached signature to\nproduce cleartext signature files for upload during the release process.\n\nSee subsequent commits which modify doc/release-process.md for more\ndetails.",
      "tree": {
        "sha": "b6691ce087ce686b8c1a74548b0878cf165616af",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b6691ce087ce686b8c1a74548b0878cf165616af"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fcab35b2292f9221eaba521740e8b3b2511a8b78",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fcab35b2292f9221eaba521740e8b3b2511a8b78",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fcab35b2292f9221eaba521740e8b3b2511a8b78",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fcab35b2292f9221eaba521740e8b3b2511a8b78/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c2541fd0ca99481a5a792a8f2772925d64fb0491",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c2541fd0ca99481a5a792a8f2772925d64fb0491",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c2541fd0ca99481a5a792a8f2772925d64fb0491"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 20,
      "deletions": 2
    },
    "files": [
      {
        "sha": "51d589c1dee393e8688632ead36e68bf054c1ab1",
        "filename": "contrib/guix/guix-attest",
        "status": "modified",
        "additions": 20,
        "deletions": 2,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fcab35b2292f9221eaba521740e8b3b2511a8b78/contrib/guix/guix-attest",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fcab35b2292f9221eaba521740e8b3b2511a8b78/contrib/guix/guix-attest",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/guix-attest?ref=fcab35b2292f9221eaba521740e8b3b2511a8b78",
        "patch": "@@ -159,6 +159,20 @@ Hint: You may wish to remove the existing attestations and their signatures by\n EOF\n }\n \n+# Given a document with unix line endings (just <LF>) in stdin, make all lines\n+# end in <CR><LF> and make sure there's no trailing <LF> at the end of the file.\n+#\n+# This is necessary as cleartext signatures are calculated on text after their\n+# line endings are canonicalized.\n+#\n+# For more information:\n+#     1. https://security.stackexchange.com/a/104261\n+#     2. https://datatracker.ietf.org/doc/html/rfc4880#section-7.1\n+#\n+rfc4880_normalize_document() {\n+    sed 's/$/\\r/' | head -c -2\n+}\n+\n echo \"Attesting to build outputs for version: '${VERSION}'\"\n echo \"\"\n \n@@ -174,7 +188,8 @@ mkdir -p \"$outsigdir\"\n         cat \"${noncodesigned_fragments[@]}\" \\\n             | sort -u \\\n             | sort -k2 \\\n-                   > \"$temp_noncodesigned\"\n+            | rfc4880_normalize_document \\\n+                > \"$temp_noncodesigned\"\n         if [ -e noncodesigned.SHA256SUMS ]; then\n             # The SHA256SUMS already exists, make sure it's exactly what we\n             # expect, error out if not\n@@ -201,7 +216,9 @@ mkdir -p \"$outsigdir\"\n         cat \"${sha256sum_fragments[@]}\" \\\n             | sort -u \\\n             | sort -k2 \\\n-                   > \"$temp_codesigned\"\n+            | sed 's/$/\\r/' \\\n+            | rfc4880_normalize_document \\\n+                > \"$temp_codesigned\"\n         if [ -e codesigned.SHA256SUMS ]; then\n             # The SHA256SUMS already exists, make sure it's exactly what we\n             # expect, error out if not\n@@ -226,6 +243,7 @@ mkdir -p \"$outsigdir\"\n         for i in *.SHA256SUMS; do\n             if [ ! -e \"$i\".asc ]; then\n                 gpg --detach-sign \\\n+                    --digest-algo sha256 \\\n                     --local-user \"$gpg_key_name\" \\\n                     --armor \\\n                     --output \"$i\".asc \"$i\""
      }
    ]
  },
  {
    "sha": "318c60700b7bbb7ec09a29bf037e7c2787646be6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMThjNjA3MDBiN2JiYjdlYzA5YTI5YmYwMzdlN2MyNzg3NjQ2YmU2",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-07-02T23:21:05Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-07-19T22:24:36Z"
      },
      "message": "guix: Adapt release-process.md to new Guix process\n\nAlso, clean up release-process.md",
      "tree": {
        "sha": "c71b0583d951734f6352160cb918c96073e92ced",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c71b0583d951734f6352160cb918c96073e92ced"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/318c60700b7bbb7ec09a29bf037e7c2787646be6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/318c60700b7bbb7ec09a29bf037e7c2787646be6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/318c60700b7bbb7ec09a29bf037e7c2787646be6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/318c60700b7bbb7ec09a29bf037e7c2787646be6/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fcab35b2292f9221eaba521740e8b3b2511a8b78",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fcab35b2292f9221eaba521740e8b3b2511a8b78",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fcab35b2292f9221eaba521740e8b3b2511a8b78"
      }
    ],
    "stats": {
      "total": 263,
      "additions": 98,
      "deletions": 165
    },
    "files": [
      {
        "sha": "0cf1d1f3ce9caeb302d85fffd68f8f6158dcac19",
        "filename": "doc/release-process.md",
        "status": "modified",
        "additions": 98,
        "deletions": 165,
        "changes": 263,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/318c60700b7bbb7ec09a29bf037e7c2787646be6/doc/release-process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/318c60700b7bbb7ec09a29bf037e7c2787646be6/doc/release-process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-process.md?ref=318c60700b7bbb7ec09a29bf037e7c2787646be6",
        "patch": "@@ -38,10 +38,6 @@ Release Process\n      that causes rejection of blocks in the past history.\n - Clear the release notes and move them to the wiki (see \"Write the release notes\" below).\n \n-#### After branch-off (on master)\n-\n-- Update the version of `contrib/gitian-descriptors/*.yml`.\n-\n #### After branch-off (on the major release branch)\n \n - Update the versions.\n@@ -64,14 +60,14 @@ This will perform a few last-minute consistency checks in the build system files\n \n ### First time / New builders\n \n-If you're using the automated script (found in [contrib/gitian-build.py](/contrib/gitian-build.py)), then at this point you should run it with the \"--setup\" command. Otherwise ignore this.\n+Install Guix using one of the installation methods detailed in\n+[contrib/guix/INSTALL.md](/contrib/guix/INSTALL.md).\n \n Check out the source code in the following directory hierarchy.\n \n     cd /path/to/your/toplevel/build\n-    git clone https://github.com/bitcoin-core/gitian.sigs.git\n+    git clone https://github.com/bitcoin-core/guix.sigs.git\n     git clone https://github.com/bitcoin-core/bitcoin-detached-sigs.git\n-    git clone https://github.com/devrandom/gitian-builder.git\n     git clone https://github.com/bitcoin/bitcoin.git\n \n ### Write the release notes\n@@ -86,110 +82,56 @@ Generate list of authors:\n \n     git log --format='- %aN' v(current version, e.g. 0.20.0)..v(new version, e.g. 0.20.1) | sort -fiu\n \n-### Setup and perform Gitian builds\n-\n-If you're using the automated script (found in [contrib/gitian-build.py](/contrib/gitian-build.py)), then at this point you should run it with the \"--build\" command. Otherwise ignore this.\n-\n-Setup Gitian descriptors:\n-\n-    pushd ./bitcoin\n-    export SIGNER=\"(your Gitian key, ie bluematt, sipa, etc)\"\n-    export VERSION=(new version, e.g. 0.20.0)\n-    git fetch\n-    git checkout v${VERSION}\n-    popd\n-\n-Ensure your gitian.sigs are up-to-date if you wish to gverify your builds against other Gitian signatures.\n-\n-    pushd ./gitian.sigs\n-    git pull\n-    popd\n-\n-Ensure gitian-builder is up-to-date:\n-\n-    pushd ./gitian-builder\n-    git pull\n-    popd\n-\n-### Fetch and create inputs: (first time, or when dependency versions change)\n-\n-    pushd ./gitian-builder\n-    mkdir -p inputs\n-    wget -O inputs/osslsigncode-2.0.tar.gz https://github.com/mtrojnar/osslsigncode/archive/2.0.tar.gz\n-    echo '5a60e0a4b3e0b4d655317b2f12a810211c50242138322b16e7e01c6fbb89d92f inputs/osslsigncode-2.0.tar.gz' | sha256sum -c\n-    popd\n-\n-Create the macOS SDK tarball, see the [macdeploy instructions](/contrib/macdeploy/README.md#deterministic-macos-dmg-notes) for details, and copy it into the inputs directory.\n-\n-### Optional: Seed the Gitian sources cache and offline git repositories\n-\n-NOTE: Gitian is sometimes unable to download files. If you have errors, try the step below.\n-\n-By default, Gitian will fetch source files as needed. To cache them ahead of time, make sure you have checked out the tag you want to build in bitcoin, then:\n-\n-    pushd ./gitian-builder\n-    make -C ../bitcoin/depends download SOURCES_PATH=`pwd`/cache/common\n-    popd\n-\n-Only missing files will be fetched, so this is safe to re-run for each build.\n-\n-NOTE: Offline builds must use the --url flag to ensure Gitian fetches only from local URLs. For example:\n+### Setup and perform Guix builds\n \n-    pushd ./gitian-builder\n-    ./bin/gbuild --url bitcoin=/path/to/bitcoin,signature=/path/to/sigs {rest of arguments}\n-    popd\n+Checkout the Bitcoin Core version you'd like to build:\n \n-The gbuild invocations below <b>DO NOT DO THIS</b> by default.\n+```sh\n+pushd ./bitcoin\n+SIGNER='(your builder key, ie bluematt, sipa, etc)'\n+VERSION='(new version without v-prefix, e.g. 0.20.0)'\n+git fetch \"v${VERSION}\"\n+git checkout \"v${VERSION}\"\n+popd\n+```\n \n-### Build and sign Bitcoin Core for Linux, Windows, and macOS:\n+Ensure your guix.sigs are up-to-date if you wish to `guix-verify` your builds\n+against other `guix-attest` signatures.\n \n-    pushd ./gitian-builder\n-    ./bin/gbuild --num-make 2 --memory 3000 --commit bitcoin=v${VERSION} ../bitcoin/contrib/gitian-descriptors/gitian-linux.yml\n-    ./bin/gsign --signer \"$SIGNER\" --release ${VERSION}-linux --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-linux.yml\n-    mv build/out/bitcoin-*.tar.gz build/out/src/bitcoin-*.tar.gz ../\n+```sh\n+git -C ./guix.sigs pull\n+```\n \n-    ./bin/gbuild --num-make 2 --memory 3000 --commit bitcoin=v${VERSION} ../bitcoin/contrib/gitian-descriptors/gitian-win.yml\n-    ./bin/gsign --signer \"$SIGNER\" --release ${VERSION}-win-unsigned --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-win.yml\n-    mv build/out/bitcoin-*-win-unsigned.tar.gz inputs/bitcoin-win-unsigned.tar.gz\n-    mv build/out/bitcoin-*.zip build/out/bitcoin-*.exe ../\n+### Create the macOS SDK tarball: (first time, or when SDK version changes)\n \n-    ./bin/gbuild --num-make 2 --memory 3000 --commit bitcoin=v${VERSION} ../bitcoin/contrib/gitian-descriptors/gitian-osx.yml\n-    ./bin/gsign --signer \"$SIGNER\" --release ${VERSION}-osx-unsigned --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-osx.yml\n-    mv build/out/bitcoin-*-osx-unsigned.tar.gz inputs/bitcoin-osx-unsigned.tar.gz\n-    mv build/out/bitcoin-*.tar.gz build/out/bitcoin-*.dmg ../\n-    popd\n+Create the macOS SDK tarball, see the [macdeploy\n+instructions](/contrib/macdeploy/README.md#deterministic-macos-dmg-notes) for\n+details.\n \n-Build output expected:\n+### Build and attest to build outputs:\n \n-  1. source tarball (`bitcoin-${VERSION}.tar.gz`)\n-  2. linux 32-bit and 64-bit dist tarballs (`bitcoin-${VERSION}-linux[32|64].tar.gz`)\n-  3. windows 32-bit and 64-bit unsigned installers and dist zips (`bitcoin-${VERSION}-win[32|64]-setup-unsigned.exe`, `bitcoin-${VERSION}-win[32|64].zip`)\n-  4. macOS unsigned installer and dist tarball (`bitcoin-${VERSION}-osx-unsigned.dmg`, `bitcoin-${VERSION}-osx64.tar.gz`)\n-  5. Gitian signatures (in `gitian.sigs/${VERSION}-<linux|{win,osx}-unsigned>/(your Gitian key)/`)\n+Follow the relevant Guix README.md sections:\n+- [Performing a build](/contrib/guix/README.md#performing-a-build)\n+- [Attesting to build outputs](/contrib/guix/README.md#attesting-to-build-outputs)\n \n-### Verify other gitian builders signatures to your own. (Optional)\n+### Verify other builders' signatures to your own. (Optional)\n \n Add other builders keys to your gpg keyring, and/or refresh keys: See `../bitcoin/contrib/builder-keys/README.md`.\n \n-Verify the signatures\n-\n-    pushd ./gitian-builder\n-    ./bin/gverify -v -d ../gitian.sigs/ -r ${VERSION}-linux ../bitcoin/contrib/gitian-descriptors/gitian-linux.yml\n-    ./bin/gverify -v -d ../gitian.sigs/ -r ${VERSION}-win-unsigned ../bitcoin/contrib/gitian-descriptors/gitian-win.yml\n-    ./bin/gverify -v -d ../gitian.sigs/ -r ${VERSION}-osx-unsigned ../bitcoin/contrib/gitian-descriptors/gitian-osx.yml\n-    popd\n+Follow the relevant Guix README.md sections:\n+- [Verifying build output attestations](/contrib/guix/README.md#verifying-build-output-attestations)\n \n ### Next steps:\n \n-Commit your signature to gitian.sigs:\n+Commit your signature to guix.sigs:\n \n-    pushd gitian.sigs\n-    git add ${VERSION}-linux/\"${SIGNER}\"\n-    git add ${VERSION}-win-unsigned/\"${SIGNER}\"\n-    git add ${VERSION}-osx-unsigned/\"${SIGNER}\"\n-    git commit -m \"Add ${VERSION} unsigned sigs for ${SIGNER}\"\n-    git push  # Assuming you can push to the gitian.sigs tree\n-    popd\n+```sh\n+pushd ./guix.sigs\n+git add \"${VERSION}/${SIGNER}\"/noncodesigned.SHA256SUMS{,.asc}\n+git commit -m \"Add ${VERSION} unsigned sigs for ${SIGNER}\"\n+git push  # Assuming you can push to the guix.sigs tree\n+popd\n+```\n \n Codesigner only: Create Windows/macOS detached signatures:\n - Only one person handles codesigning. Everyone else should skip to the next step.\n@@ -201,7 +143,7 @@ Codesigner only: Sign the macOS binary:\n     tar xf bitcoin-osx-unsigned.tar.gz\n     ./detached-sig-create.sh -s \"Key ID\"\n     Enter the keychain password and authorize the signature\n-    Move signature-osx.tar.gz back to the gitian host\n+    Move signature-osx.tar.gz back to the guix-build host\n \n Codesigner only: Sign the windows binaries:\n \n@@ -212,93 +154,84 @@ Codesigner only: Sign the windows binaries:\n \n Codesigner only: Commit the detached codesign payloads:\n \n-    cd ~/bitcoin-detached-sigs\n-    checkout the appropriate branch for this release series\n-    rm -rf *\n-    tar xf signature-osx.tar.gz\n-    tar xf signature-win.tar.gz\n-    git add -A\n-    git commit -m \"point to ${VERSION}\"\n-    git tag -s v${VERSION} HEAD\n-    git push the current branch and new tag\n+```sh\n+pushd ./bitcoin-detached-sigs\n+# checkout the appropriate branch for this release series\n+rm -rf ./*\n+tar xf signature-osx.tar.gz\n+tar xf signature-win.tar.gz\n+git add -A\n+git commit -m \"point to ${VERSION}\"\n+git tag -s \"v${VERSION}\" HEAD\n+git push the current branch and new tag\n+popd\n+```\n \n Non-codesigners: wait for Windows/macOS detached signatures:\n \n - Once the Windows/macOS builds each have 3 matching signatures, they will be signed with their respective release keys.\n - Detached signatures will then be committed to the [bitcoin-detached-sigs](https://github.com/bitcoin-core/bitcoin-detached-sigs) repository, which can be combined with the unsigned apps to create signed binaries.\n \n-Create (and optionally verify) the signed macOS binary:\n+Create (and optionally verify) the codesigned outputs:\n \n-    pushd ./gitian-builder\n-    ./bin/gbuild -i --commit signature=v${VERSION} ../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml\n-    ./bin/gsign --signer \"$SIGNER\" --release ${VERSION}-osx-signed --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml\n-    ./bin/gverify -v -d ../gitian.sigs/ -r ${VERSION}-osx-signed ../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml\n-    mv build/out/bitcoin-osx-signed.dmg ../bitcoin-${VERSION}-osx.dmg\n-    popd\n+- [Codesigning](/contrib/guix/README.md#codesigning)\n \n-Create (and optionally verify) the signed Windows binaries:\n+Commit your signature for the signed macOS/Windows binaries:\n \n-    pushd ./gitian-builder\n-    ./bin/gbuild -i --commit signature=v${VERSION} ../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml\n-    ./bin/gsign --signer \"$SIGNER\" --release ${VERSION}-win-signed --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml\n-    ./bin/gverify -v -d ../gitian.sigs/ -r ${VERSION}-win-signed ../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml\n-    mv build/out/bitcoin-*win64-setup.exe ../bitcoin-${VERSION}-win64-setup.exe\n-    popd\n+```sh\n+pushd ./guix.sigs\n+git add \"${VERSION}/${SIGNER}\"/all.SHA256SUMS{,.asc}\n+git commit -m \"Add ${SIGNER} ${VERSION} signed binaries signatures\"\n+git push  # Assuming you can push to the guix.sigs tree\n+popd\n+```\n \n-Commit your signature for the signed macOS/Windows binaries:\n+### After 3 or more people have guix-built and their results match:\n \n-    pushd gitian.sigs\n-    git add ${VERSION}-osx-signed/\"${SIGNER}\"\n-    git add ${VERSION}-win-signed/\"${SIGNER}\"\n-    git commit -m \"Add ${SIGNER} ${VERSION} signed binaries signatures\"\n-    git push  # Assuming you can push to the gitian.sigs tree\n-    popd\n+Combine `all.SHA256SUMS` and `all.SHA256SUMS.asc` into a clear-signed\n+`SHA256SUMS.asc` message:\n \n-### After 3 or more people have gitian-built and their results match:\n+```sh\n+echo -e \"-----BEGIN PGP SIGNED MESSAGE-----\\nHash: SHA256\\n\\n$(cat all.SHA256SUMS)\\n$(cat filename.txt.asc)\" > SHA256SUMS.asc\n+```\n \n-- Create `SHA256SUMS.asc` for the builds, and GPG-sign it:\n+Here's an equivalent, more readable command if you're confident that you won't\n+mess up whitespaces when copy-pasting:\n \n ```bash\n-sha256sum * > SHA256SUMS\n-```\n+cat << EOF > SHA256SUMS.asc\n+-----BEGIN PGP SIGNED MESSAGE-----\n+Hash: SHA256\n \n-The list of files should be:\n-```\n-bitcoin-${VERSION}-aarch64-linux-gnu.tar.gz\n-bitcoin-${VERSION}-arm-linux-gnueabihf.tar.gz\n-bitcoin-${VERSION}-riscv64-linux-gnu.tar.gz\n-bitcoin-${VERSION}-x86_64-linux-gnu.tar.gz\n-bitcoin-${VERSION}-osx64.tar.gz\n-bitcoin-${VERSION}-osx.dmg\n-bitcoin-${VERSION}.tar.gz\n-bitcoin-${VERSION}-win64-setup.exe\n-bitcoin-${VERSION}-win64.zip\n+$(cat all.SHA256SUMS)\n+$(cat all.SHA256SUMS.asc)\n+EOF\n ```\n-The `*-debug*` files generated by the gitian build contain debug symbols\n-for troubleshooting by developers. It is assumed that anyone that is interested\n-in debugging can run gitian to generate the files for themselves. To avoid\n-end-user confusion about which file to pick, as well as save storage\n-space *do not upload these to the bitcoincore.org server, nor put them in the torrent*.\n \n-- GPG-sign it, delete the unsigned file:\n-```\n-gpg --digest-algo sha256 --clearsign SHA256SUMS # outputs SHA256SUMS.asc\n-rm SHA256SUMS\n-```\n-(the digest algorithm is forced to sha256 to avoid confusion of the `Hash:` header that GPG adds with the SHA256 used for the files)\n-Note: check that SHA256SUMS itself doesn't end up in SHA256SUMS, which is a spurious/nonsensical entry.\n+- Upload to the bitcoincore.org server (`/var/www/bin/bitcoin-core-${VERSION}`):\n+    1. The contents of `./bitcoin/guix-build-${VERSION}/output`, except for\n+       `*-debug*` files.\n \n-- Upload zips and installers, as well as `SHA256SUMS.asc` from last step, to the bitcoincore.org server\n-  into `/var/www/bin/bitcoin-core-${VERSION}`\n+       The `*-debug*` files generated by the guix build contain debug symbols\n+       for troubleshooting by developers. It is assumed that anyone that is\n+       interested in debugging can run guix to generate the files for\n+       themselves. To avoid end-user confusion about which file to pick, as well\n+       as save storage space *do not upload these to the bitcoincore.org server,\n+       nor put them in the torrent*.\n \n-- A `.torrent` will appear in the directory after a few minutes. Optionally help seed this torrent. To get the `magnet:` URI use:\n-```bash\n-transmission-show -m <torrent file>\n-```\n-Insert the magnet URI into the announcement sent to mailing lists. This permits\n-people without access to `bitcoincore.org` to download the binary distribution.\n-Also put it into the `optional_magnetlink:` slot in the YAML file for\n-bitcoincore.org.\n+    2. The combined clear-signed message you just created `SHA256SUMS.asc`\n+\n+- A `.torrent` will appear in the directory after a few minutes. Optionally help\n+  seed this torrent. To get the `magnet:` URI use:\n+\n+  ```sh\n+  transmission-show -m <torrent file>\n+  ```\n+\n+  Insert the magnet URI into the announcement sent to mailing lists. This permits\n+  people without access to `bitcoincore.org` to download the binary distribution.\n+  Also put it into the `optional_magnetlink:` slot in the YAML file for\n+  bitcoincore.org.\n \n - Update other repositories and websites for new version\n \n@@ -336,14 +269,14 @@ bitcoincore.org.\n         - https://code.launchpad.net/~bitcoin-core/bitcoin-core-snap/+git/packaging/+ref/0.xx (Click \"Create snap package\")\n         - Name it \"bitcoin-core-snap-0.xx\"\n         - Leave owner and series as-is\n-        - Select architectures that are compiled via gitian\n+        - Select architectures that are compiled via guix\n         - Leave \"automatically build when branch changes\" unticked\n         - Tick \"automatically upload to store\"\n         - Put \"bitcoin-core\" in the registered store package name field\n         - Tick the \"edge\" box\n         - Put \"0.xx\" in the track field\n         - Click \"create snap package\"\n-        - Click \"Request builds\" for every new release on this branch (after updating the snapcraft.yml in the branch to reflect the latest gitian results)\n+        - Click \"Request builds\" for every new release on this branch (after updating the snapcraft.yml in the branch to reflect the latest guix results)\n         - Promote release on https://snapcraft.io/bitcoin-core/releases if it passes sanity checks\n \n   - This repo"
      }
    ]
  },
  {
    "sha": "5da2ee49d5b44de803b671aedbdd14e5c1d71ea9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZGEyZWU0OWQ1YjQ0ZGU4MDNiNjcxYWVkYmRkMTRlNWMxZDcxZWE5",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-07-08T16:08:46Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-07-19T22:24:36Z"
      },
      "message": "guix/INSTALL: Add coreutils/inotify-dir-recreate troubleshooting",
      "tree": {
        "sha": "8e6b335319f7cd0d214bcfc0eea0161c648b9294",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8e6b335319f7cd0d214bcfc0eea0161c648b9294"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5da2ee49d5b44de803b671aedbdd14e5c1d71ea9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5da2ee49d5b44de803b671aedbdd14e5c1d71ea9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5da2ee49d5b44de803b671aedbdd14e5c1d71ea9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5da2ee49d5b44de803b671aedbdd14e5c1d71ea9/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "318c60700b7bbb7ec09a29bf037e7c2787646be6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/318c60700b7bbb7ec09a29bf037e7c2787646be6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/318c60700b7bbb7ec09a29bf037e7c2787646be6"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 24,
      "deletions": 0
    },
    "files": [
      {
        "sha": "34fb0c8430ac4d4fcac1d8cccef29938f08b1138",
        "filename": "contrib/guix/INSTALL.md",
        "status": "modified",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5da2ee49d5b44de803b671aedbdd14e5c1d71ea9/contrib/guix/INSTALL.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5da2ee49d5b44de803b671aedbdd14e5c1d71ea9/contrib/guix/INSTALL.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/INSTALL.md?ref=5da2ee49d5b44de803b671aedbdd14e5c1d71ea9",
        "patch": "@@ -778,6 +778,26 @@ Basically:\n 6. Turn NTP back on\n 7. Turn networking back on\n \n+### coreutils: FAIL: tests/tail-2/inotify-dir-recreate\n+\n+The inotify-dir-create test fails on \"remote\" filesystems such as overlayfs\n+(Docker's default filesystem) due to the filesystem being mistakenly recognized\n+as non-remote.\n+\n+A relatively easy workaround to this is to make sure that a somewhat traditional\n+filesystem is mounted at `/tmp` (where `guix-daemon` performs its builds). For\n+Docker users, this might mean [using a volume][docker/volumes], [binding\n+mounting][docker/bind-mnt] from host, or (for those with enough RAM and swap)\n+[mounting a tmpfs][docker/tmpfs] using the `--tmpfs` flag.\n+\n+Please see the following links for more details:\n+\n+- An upstream coreutils bug has been filed: [debbugs#47940](https://debbugs.gnu.org/cgi/bugreport.cgi?bug=47940)\n+- A Guix bug detailing the underlying problem has been filed: [guix-issues#47935](https://issues.guix.gnu.org/47935)\n+- A commit to skip this test in Guix has been merged into the core-updates branch:\n+[savannah/guix@6ba1058](https://git.savannah.gnu.org/cgit/guix.git/commit/?id=6ba1058df0c4ce5611c2367531ae5c3cdc729ab4)\n+\n+\n [install-script]: #options-1-and-2-using-the-official-shell-installer-script-or-binary-tarball\n [install-bin-tarball]: #options-1-and-2-using-the-official-shell-installer-script-or-binary-tarball\n [install-fanquake-docker]: #option-3-using-fanquakes-docker-image\n@@ -786,3 +806,7 @@ Basically:\n \n [fix-argv0]: #creating-and-starting-a-guix-daemon-original-service-with-a-fixed-argv0\n [security-model]: ./README.md#choosing-your-security-model\n+\n+[docker/volumes]: https://docs.docker.com/storage/volumes/\n+[docker/bind-mnt]: https://docs.docker.com/storage/bind-mounts/\n+[docker/tmpfs]: https://docs.docker.com/storage/tmpfs/"
      }
    ]
  },
  {
    "sha": "5d24cc3d82dad6812f8370c3ccc7c2b5a6c12c11",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZDI0Y2MzZDgyZGFkNjgxMmY4MzcwYzNjY2M3YzJiNWE2YzEyYzEx",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-07-09T20:26:21Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-07-19T22:24:36Z"
      },
      "message": "guix/INSTALL: Guix installs init scripts in libdir",
      "tree": {
        "sha": "0c147154e94aeebe7e9163d5f87320a41d4ad84d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0c147154e94aeebe7e9163d5f87320a41d4ad84d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5d24cc3d82dad6812f8370c3ccc7c2b5a6c12c11",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d24cc3d82dad6812f8370c3ccc7c2b5a6c12c11",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5d24cc3d82dad6812f8370c3ccc7c2b5a6c12c11",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d24cc3d82dad6812f8370c3ccc7c2b5a6c12c11/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5da2ee49d5b44de803b671aedbdd14e5c1d71ea9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5da2ee49d5b44de803b671aedbdd14e5c1d71ea9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5da2ee49d5b44de803b671aedbdd14e5c1d71ea9"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 5,
      "deletions": 4
    },
    "files": [
      {
        "sha": "86f91cc87bf0b3bf58c25acc9c43971c2d7a2571",
        "filename": "contrib/guix/INSTALL.md",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d24cc3d82dad6812f8370c3ccc7c2b5a6c12c11/contrib/guix/INSTALL.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d24cc3d82dad6812f8370c3ccc7c2b5a6c12c11/contrib/guix/INSTALL.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/INSTALL.md?ref=5d24cc3d82dad6812f8370c3ccc7c2b5a6c12c11",
        "patch": "@@ -442,10 +442,10 @@ can be found\n [here](https://www.gnu.org/software/automake/manual/html_node/Standard-Directory-Variables.html).\n \n However, the Guix init scripts and service configurations for Upstart, systemd,\n-SysV, and OpenRC are installed to launch\n+SysV, and OpenRC are installed (in `${libdir}`) to launch\n `${localstatedir}/guix/profiles/per-user/root/current-guix/bin/guix-daemon`,\n-which does not yet exist, and will only exist after `root` performs their first\n-`guix pull`. TODO: Link to `guix pull` as root section\n+which does not yet exist, and will only exist after [`root` performs their first\n+`guix pull`](#guix-pull-as-root).\n \n We need to create a `-original` version of these init scripts that's pointed to\n the binaries we just built and `make install`'ed in `${bindir}` (normally,\n@@ -455,8 +455,9 @@ Example for `systemd`, run as `root`:\n \n ```sh\n # Create guix-daemon-original.service by modifying guix-daemon.service\n+libdir=# set according to your PREFIX (default is /usr/local/lib)\n bindir=\"$(dirname $(command -v guix-daemon))\"\n-sed -E -e \"s|/\\S*/guix/profiles/per-user/root/current-guix/bin/guix-daemon|${bindir}/guix-daemon|\" /etc/systemd/system/guix-daemon.service > /etc/systemd/system/guix-daemon-original.service\n+sed -E -e \"s|/\\S*/guix/profiles/per-user/root/current-guix/bin/guix-daemon|${bindir}/guix-daemon|\" \"${libdir}\"/systemd/system/guix-daemon.service > /etc/systemd/system/guix-daemon-original.service\n chmod 664 /etc/systemd/system/guix-daemon-original.service\n \n # Make systemd recognize the new service"
      }
    ]
  },
  {
    "sha": "fac4814106c796b8786dd90053513cc35142dfe5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWM0ODE0MTA2Yzc5NmI4Nzg2ZGQ5MDA1MzUxM2NjMzUxNDJkZmU1",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-07-15T00:25:07Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-07-19T22:24:36Z"
      },
      "message": "doc/release-process: Add torrent creation details\n\nSource: https://github.com/bitcoin/bitcoin/pull/21711#discussion_r668754244",
      "tree": {
        "sha": "dbb27ecd025eb2ccfa613d5f40043df2570ff1bc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dbb27ecd025eb2ccfa613d5f40043df2570ff1bc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fac4814106c796b8786dd90053513cc35142dfe5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fac4814106c796b8786dd90053513cc35142dfe5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fac4814106c796b8786dd90053513cc35142dfe5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fac4814106c796b8786dd90053513cc35142dfe5/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5d24cc3d82dad6812f8370c3ccc7c2b5a6c12c11",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d24cc3d82dad6812f8370c3ccc7c2b5a6c12c11",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5d24cc3d82dad6812f8370c3ccc7c2b5a6c12c11"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 6,
      "deletions": 2
    },
    "files": [
      {
        "sha": "972cd32d73a6f691a99b56087e10810f02d54583",
        "filename": "doc/release-process.md",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac4814106c796b8786dd90053513cc35142dfe5/doc/release-process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac4814106c796b8786dd90053513cc35142dfe5/doc/release-process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-process.md?ref=fac4814106c796b8786dd90053513cc35142dfe5",
        "patch": "@@ -221,8 +221,12 @@ EOF\n \n     2. The combined clear-signed message you just created `SHA256SUMS.asc`\n \n-- A `.torrent` will appear in the directory after a few minutes. Optionally help\n-  seed this torrent. To get the `magnet:` URI use:\n+- Create a torrent of the `/var/www/bin/bitcoin-core-${VERSION}` directory such\n+  that at the top level there is only one file: the `bitcoin-core-${VERSION}`\n+  directory containing everything else. Name the torrent\n+  `bitcoin-${VERSION}.torrent` (note that there is no `-core-` in this name).\n+\n+  Optionally help seed this torrent. To get the `magnet:` URI use:\n \n   ```sh\n   transmission-show -m <torrent file>"
      }
    ]
  }
]