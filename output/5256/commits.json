[
  {
    "sha": "f4e0aefadcc9f37611a6d5a13e3f7b4b9a37bf76",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNGUwYWVmYWRjYzlmMzc2MTFhNmQ1YTEzZTNmN2I0YjlhMzdiZjc2",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-11-05T18:53:59Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-11-10T13:03:24Z"
      },
      "message": "Do signature-s negation inside the tests\n\nTo avoid the need for libsecp256k1 to expose such functionality.",
      "tree": {
        "sha": "2850672169ed04c051d3d70f65b3d29aadfc8027",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2850672169ed04c051d3d70f65b3d29aadfc8027"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f4e0aefadcc9f37611a6d5a13e3f7b4b9a37bf76",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f4e0aefadcc9f37611a6d5a13e3f7b4b9a37bf76",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f4e0aefadcc9f37611a6d5a13e3f7b4b9a37bf76",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f4e0aefadcc9f37611a6d5a13e3f7b4b9a37bf76/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5406f61373fe93326ab1f546e4da9f4528236cc7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5406f61373fe93326ab1f546e4da9f4528236cc7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5406f61373fe93326ab1f546e4da9f4528236cc7"
      }
    ],
    "stats": {
      "total": 59,
      "additions": 52,
      "deletions": 7
    },
    "files": [
      {
        "sha": "3377dce0c1241033852a5107d02524deda0df5c7",
        "filename": "src/ecwrapper.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f4e0aefadcc9f37611a6d5a13e3f7b4b9a37bf76/src/ecwrapper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f4e0aefadcc9f37611a6d5a13e3f7b4b9a37bf76/src/ecwrapper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ecwrapper.cpp?ref=f4e0aefadcc9f37611a6d5a13e3f7b4b9a37bf76",
        "patch": "@@ -193,7 +193,7 @@ bool CECKey::SetPubKey(const unsigned char* pubkey, size_t size) {\n     return o2i_ECPublicKey(&pkey, &pubkey, size) != NULL;\n }\n \n-bool CECKey::Sign(const uint256 &hash, std::vector<unsigned char>& vchSig, bool lowS) {\n+bool CECKey::Sign(const uint256 &hash, std::vector<unsigned char>& vchSig) {\n     vchSig.clear();\n     ECDSA_SIG *sig = ECDSA_do_sign((unsigned char*)&hash, sizeof(hash), pkey);\n     if (sig == NULL)\n@@ -205,7 +205,7 @@ bool CECKey::Sign(const uint256 &hash, std::vector<unsigned char>& vchSig, bool\n     BIGNUM *halforder = BN_CTX_get(ctx);\n     EC_GROUP_get_order(group, order, ctx);\n     BN_rshift1(halforder, order);\n-    if (lowS && BN_cmp(sig->s, halforder) > 0) {\n+    if (BN_cmp(sig->s, halforder) > 0) {\n         // enforce low S values, by negating the value (modulo the order) if above order/2.\n         BN_sub(sig->s, order, sig->s);\n     }"
      },
      {
        "sha": "a7847d190c1e8400d2b0e45b529fc102de42f9d3",
        "filename": "src/ecwrapper.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f4e0aefadcc9f37611a6d5a13e3f7b4b9a37bf76/src/ecwrapper.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f4e0aefadcc9f37611a6d5a13e3f7b4b9a37bf76/src/ecwrapper.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ecwrapper.h?ref=f4e0aefadcc9f37611a6d5a13e3f7b4b9a37bf76",
        "patch": "@@ -28,7 +28,7 @@ class CECKey {\n     bool SetPrivKey(const unsigned char* privkey, size_t size, bool fSkipCheck=false);\n     void GetPubKey(std::vector<unsigned char>& pubkey, bool fCompressed);\n     bool SetPubKey(const unsigned char* pubkey, size_t size);\n-    bool Sign(const uint256 &hash, std::vector<unsigned char>& vchSig, bool lowS);\n+    bool Sign(const uint256 &hash, std::vector<unsigned char>& vchSig);\n     bool Verify(const uint256 &hash, const std::vector<unsigned char>& vchSig);\n     bool SignCompact(const uint256 &hash, unsigned char *p64, int &rec);\n "
      },
      {
        "sha": "0ca9a681a3baac1a2c66745cc72f114496d47d40",
        "filename": "src/key.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f4e0aefadcc9f37611a6d5a13e3f7b4b9a37bf76/src/key.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f4e0aefadcc9f37611a6d5a13e3f7b4b9a37bf76/src/key.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.cpp?ref=f4e0aefadcc9f37611a6d5a13e3f7b4b9a37bf76",
        "patch": "@@ -102,7 +102,7 @@ CPubKey CKey::GetPubKey() const {\n     return result;\n }\n \n-bool CKey::Sign(const uint256 &hash, std::vector<unsigned char>& vchSig, bool lowS) const {\n+bool CKey::Sign(const uint256 &hash, std::vector<unsigned char>& vchSig) const {\n     if (!fValid)\n         return false;\n #ifdef USE_SECP256K1\n@@ -119,7 +119,7 @@ bool CKey::Sign(const uint256 &hash, std::vector<unsigned char>& vchSig, bool lo\n #else\n     CECKey key;\n     key.SetSecretBytes(vch);\n-    return key.Sign(hash, vchSig, lowS);\n+    return key.Sign(hash, vchSig);\n #endif\n }\n "
      },
      {
        "sha": "0bb05482c9ceb7b41ded3ba599c03de4f0108b28",
        "filename": "src/key.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f4e0aefadcc9f37611a6d5a13e3f7b4b9a37bf76/src/key.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f4e0aefadcc9f37611a6d5a13e3f7b4b9a37bf76/src/key.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.h?ref=f4e0aefadcc9f37611a6d5a13e3f7b4b9a37bf76",
        "patch": "@@ -122,7 +122,7 @@ class CKey\n     CPubKey GetPubKey() const;\n \n     //! Create a DER-serialized signature.\n-    bool Sign(const uint256& hash, std::vector<unsigned char>& vchSig, bool lowS = true) const;\n+    bool Sign(const uint256& hash, std::vector<unsigned char>& vchSig) const;\n \n     /**\n      * Create a compact signature (65 bytes), which allows reconstructing the used public key."
      },
      {
        "sha": "cff1664a1e9f26491e89f6d3675a79291c475b89",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 46,
        "deletions": 1,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f4e0aefadcc9f37611a6d5a13e3f7b4b9a37bf76/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f4e0aefadcc9f37611a6d5a13e3f7b4b9a37bf76/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=f4e0aefadcc9f37611a6d5a13e3f7b4b9a37bf76",
        "patch": "@@ -95,6 +95,48 @@ void DoTest(const CScript& scriptPubKey, const CScript& scriptSig, int flags, bo\n     BOOST_CHECK_MESSAGE(VerifyScript(scriptSig, scriptPubKey, flags, SignatureChecker(BuildSpendingTransaction(scriptSig, BuildCreditingTransaction(scriptPubKey)), 0)) == expect, message);\n }\n \n+void static NegateSignatureS(std::vector<unsigned char>& vchSig) {\n+    // Parse the signature.\n+    std::vector<unsigned char> r, s;\n+    r = std::vector<unsigned char>(vchSig.begin() + 4, vchSig.begin() + 4 + vchSig[3]);\n+    s = std::vector<unsigned char>(vchSig.begin() + 6 + vchSig[3], vchSig.begin() + 6 + vchSig[3] + vchSig[5 + vchSig[3]]);\n+    unsigned char hashtype = vchSig.back();\n+\n+    // Really ugly to implement mod-n negation here, but it would be feature creep to expose such functionality from libsecp256k1.\n+    static const unsigned char order[33] = {\n+        0x00,\n+        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n+        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE,\n+        0xBA, 0xAE, 0xDC, 0xE6, 0xAF, 0x48, 0xA0, 0x3B,\n+        0xBF, 0xD2, 0x5E, 0x8C, 0xD0, 0x36, 0x41, 0x41\n+    };\n+    while (s.size() < 33) {\n+        s.insert(s.begin(), 0x00);\n+    }\n+    int carry = 0;\n+    for (int p = 32; p >= 1; p--) {\n+        int n = (int)order[p] - s[p] - carry;\n+        s[p] = (n + 256) & 0xFF;\n+        carry = (n < 0);\n+    }\n+    assert(carry == 0);\n+    if (s.size() > 1 && s[0] == 0 && s[1] < 0x80) {\n+        s.erase(s.begin());\n+    }\n+\n+    // Reconstruct the signature.\n+    vchSig.clear();\n+    vchSig.push_back(0x30);\n+    vchSig.push_back(4 + r.size() + s.size());\n+    vchSig.push_back(0x02);\n+    vchSig.push_back(r.size());\n+    vchSig.insert(vchSig.end(), r.begin(), r.end());\n+    vchSig.push_back(0x02);\n+    vchSig.push_back(s.size());\n+    vchSig.insert(vchSig.end(), s.begin(), s.end());\n+    vchSig.push_back(hashtype);\n+}\n+\n namespace\n {\n const unsigned char vchKey0[32] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1};\n@@ -194,7 +236,10 @@ class TestBuilder\n         uint256 hash = SignatureHash(scriptPubKey, spendTx, 0, nHashType);\n         std::vector<unsigned char> vchSig, r, s;\n         do {\n-            key.Sign(hash, vchSig, lenS <= 32);\n+            key.Sign(hash, vchSig);\n+            if ((lenS == 33) != (vchSig[5 + vchSig[3]] == 33)) {\n+                NegateSignatureS(vchSig);\n+            }\n             r = std::vector<unsigned char>(vchSig.begin() + 4, vchSig.begin() + 4 + vchSig[3]);\n             s = std::vector<unsigned char>(vchSig.begin() + 6 + vchSig[3], vchSig.begin() + 6 + vchSig[3] + vchSig[5 + vchSig[3]]);\n         } while (lenR != r.size() || lenS != s.size());"
      }
    ]
  }
]