[
  {
    "sha": "5882fccb3187b682254c098d152004d7e49cca67",
    "node_id": "C_kwDOABII59oAKDU4ODJmY2NiMzE4N2I2ODIyNTRjMDk4ZDE1MjAwNGQ3ZTQ5Y2NhNjc",
    "commit": {
      "author": {
        "name": "Antoine Poinsot",
        "email": "darosior@protonmail.com",
        "date": "2021-09-20T17:22:03Z"
      },
      "committer": {
        "name": "Antoine Poinsot",
        "email": "darosior@protonmail.com",
        "date": "2021-11-14T12:03:09Z"
      },
      "message": "qa: remove a redundant condition in fee estimation test\n\nSigned-off-by: Antoine Poinsot <darosior@protonmail.com>",
      "tree": {
        "sha": "5dcfb4cc68f01ade14992e568af9c4c904a731d6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5dcfb4cc68f01ade14992e568af9c4c904a731d6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5882fccb3187b682254c098d152004d7e49cca67",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEWQtykmla/6W2csuy4T/BRc0/QwQFAmGQ+v0ACgkQ4T/BRc0/\nQwSfFwwAvkq4kYu3+XOqFGe+K3otiW0wKn5V7BvczzYamjEkymOs1gvWfDOtTQRg\ncZooTPLegBcr+PKTUHztmjgx8cufYcF+dVLmxL1MsfcnWjpgidnQ+CCbs85Rsl2w\ni6ngfFlHwkJovBafhPDBqmtYe3WBAE2MWfHZQ602efWg2qnXF1dyWLhwrThH8PLV\n5az5XLO2e8RC/1r8+CULKiqBPDfLo9+WVZP1HjodFdDeR+3TMg4jAGyQhWh97vuG\nZ/gUBk3FYHNClHVt0YGdAG+6vHzBVtqZ666Dmv5DcpnBIYk2xtYOM9z623Pooosu\nAr/xXgtkdfkhAWLPa9Mz0AwyXF0LIh913xQ2yqnhShLHNIOujRBsMhpBAYHPc/4B\nwPYub5rs7rx6z4Mnq4jFycSRlSf5UzghPVtcg5QMjb7haQ8tEaG11VJd6lONpTGi\n1ojfKgGmH9ZGBPuonu/IrBzSxV01832eFPBacfvS3P9mdU0vhXgO0W1SZU5DxGOy\n2H8hMHkL\n=JaZ6\n-----END PGP SIGNATURE-----",
        "payload": "tree 5dcfb4cc68f01ade14992e568af9c4c904a731d6\nparent 9d2895157ec0ff6e356f40c5fe84d3007fc991c1\nauthor Antoine Poinsot <darosior@protonmail.com> 1632158523 +0200\ncommitter Antoine Poinsot <darosior@protonmail.com> 1636891389 +0100\n\nqa: remove a redundant condition in fee estimation test\n\nSigned-off-by: Antoine Poinsot <darosior@protonmail.com>\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5882fccb3187b682254c098d152004d7e49cca67",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5882fccb3187b682254c098d152004d7e49cca67",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5882fccb3187b682254c098d152004d7e49cca67/comments",
    "author": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9d2895157ec0ff6e356f40c5fe84d3007fc991c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d2895157ec0ff6e356f40c5fe84d3007fc991c1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9d2895157ec0ff6e356f40c5fe84d3007fc991c1"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 5,
      "deletions": 6
    },
    "files": [
      {
        "sha": "9c53baf655c0d6b63dc23aaaa974492d2356bd9b",
        "filename": "test/functional/feature_fee_estimation.py",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5882fccb3187b682254c098d152004d7e49cca67/test/functional/feature_fee_estimation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5882fccb3187b682254c098d152004d7e49cca67/test/functional/feature_fee_estimation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_fee_estimation.py?ref=5882fccb3187b682254c098d152004d7e49cca67",
        "patch": "@@ -67,13 +67,12 @@ def small_txpuzzle_randfee(from_node, conflist, unconflist, amount, min_fee, fee\n         t = conflist.pop(0)\n         total_in += t[\"amount\"]\n         tx.vin.append(CTxIn(COutPoint(int(t[\"txid\"], 16), t[\"vout\"]), b\"\"))\n+    while total_in <= (amount + fee) and len(unconflist) > 0:\n+        t = unconflist.pop(0)\n+        total_in += t[\"amount\"]\n+        tx.vin.append(CTxIn(COutPoint(int(t[\"txid\"], 16), t[\"vout\"]), b\"\"))\n     if total_in <= amount + fee:\n-        while total_in <= (amount + fee) and len(unconflist) > 0:\n-            t = unconflist.pop(0)\n-            total_in += t[\"amount\"]\n-            tx.vin.append(CTxIn(COutPoint(int(t[\"txid\"], 16), t[\"vout\"]), b\"\"))\n-        if total_in <= amount + fee:\n-            raise RuntimeError(f\"Insufficient funds: need {amount + fee}, have {total_in}\")\n+        raise RuntimeError(f\"Insufficient funds: need {amount + fee}, have {total_in}\")\n     tx.vout.append(CTxOut(int((total_in - amount - fee) * COIN), P2SH_1))\n     tx.vout.append(CTxOut(int(amount * COIN), P2SH_2))\n     # These transactions don't need to be signed, but we still have to insert"
      }
    ]
  },
  {
    "sha": "0a27c7f793e3a08fc24a6ffa3a4c51b8764a3fe1",
    "node_id": "C_kwDOABII59oAKDBhMjdjN2Y3OTNlM2EwOGZjMjRhNmZmYTNhNGM1MWI4NzY0YTNmZTE",
    "commit": {
      "author": {
        "name": "Antoine Poinsot",
        "email": "darosior@protonmail.com",
        "date": "2021-09-20T17:54:36Z"
      },
      "committer": {
        "name": "Antoine Poinsot",
        "email": "darosior@protonmail.com",
        "date": "2021-11-14T12:03:10Z"
      },
      "message": "qa: use a single p2sh script in fee estimation test\n\nUsing 2 different scripts is unnecessary complication\n\nSigned-off-by: Antoine Poinsot <darosior@protonmail.com>",
      "tree": {
        "sha": "93fcd6df2bb7bbe9af2f453c20e2a714b6e1c7ee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/93fcd6df2bb7bbe9af2f453c20e2a714b6e1c7ee"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0a27c7f793e3a08fc24a6ffa3a4c51b8764a3fe1",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEWQtykmla/6W2csuy4T/BRc0/QwQFAmGQ+v4ACgkQ4T/BRc0/\nQwSnswv7B1eSqGBPmIYuERU9Sh5dn6HR/z8y4ZfHg0G5va5ehgul8toSE5FBrgev\nqJvcf0zGcJWx4Obn3vBcJtbxsNVRnjxumPgmzx3rxej8UTs0XiroWfXp9GzoBxyL\nGa3Aj/Y0mgPIyhpWQW9T2CucdjcW1Fyb0YL9+Z4QXLfHk3/vfVwDYk+p/9XNnhVR\nbeKWx/dR0H5nM4RxVw060zk2tIhfrkTzGfXTvn6UACWmegcs8IuvxRJwdB1JQoEn\noOY1m7izlbQd3wYSnpb3NilVcqiAOaMyuTmecAB5JDSjC9aV8iBMUhvPkz5b0zwx\nwnqqJE0RBuHOO1aOTGr1f6NQxnsBsi8/e54vR5Zeq5g1L0Sg16KK3IaFcw6wgTXM\n1XaCs5hqtT9K0FiZz0J/Y0yzmh+Ckrx8CoQJUHD3QORWuAULb/QGui2HinhtCKwa\nhyNdBBZH5cGsVRvzaKgUfM0/RoZZMc1BSpvLrJXsr4af6E19veE74AiQRPK1zARB\nMYxQ97KI\n=BzYT\n-----END PGP SIGNATURE-----",
        "payload": "tree 93fcd6df2bb7bbe9af2f453c20e2a714b6e1c7ee\nparent 5882fccb3187b682254c098d152004d7e49cca67\nauthor Antoine Poinsot <darosior@protonmail.com> 1632160476 +0200\ncommitter Antoine Poinsot <darosior@protonmail.com> 1636891390 +0100\n\nqa: use a single p2sh script in fee estimation test\n\nUsing 2 different scripts is unnecessary complication\n\nSigned-off-by: Antoine Poinsot <darosior@protonmail.com>\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a27c7f793e3a08fc24a6ffa3a4c51b8764a3fe1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0a27c7f793e3a08fc24a6ffa3a4c51b8764a3fe1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a27c7f793e3a08fc24a6ffa3a4c51b8764a3fe1/comments",
    "author": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5882fccb3187b682254c098d152004d7e49cca67",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5882fccb3187b682254c098d152004d7e49cca67",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5882fccb3187b682254c098d152004d7e49cca67"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 9,
      "deletions": 14
    },
    "files": [
      {
        "sha": "f22ee4a7ad71f51c2bfd803250f177e07c78fd1f",
        "filename": "test/functional/feature_fee_estimation.py",
        "status": "modified",
        "additions": 9,
        "deletions": 14,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a27c7f793e3a08fc24a6ffa3a4c51b8764a3fe1/test/functional/feature_fee_estimation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a27c7f793e3a08fc24a6ffa3a4c51b8764a3fe1/test/functional/feature_fee_estimation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_fee_estimation.py?ref=0a27c7f793e3a08fc24a6ffa3a4c51b8764a3fe1",
        "patch": "@@ -17,7 +17,6 @@\n from test_framework.script import (\n     CScript,\n     OP_1,\n-    OP_2,\n     OP_DROP,\n     OP_TRUE,\n )\n@@ -36,13 +35,9 @@\n # Construct 2 trivial P2SH's and the ScriptSigs that spend them\n # So we can create many transactions without needing to spend\n # time signing.\n-REDEEM_SCRIPT_1 = CScript([OP_1, OP_DROP])\n-REDEEM_SCRIPT_2 = CScript([OP_2, OP_DROP])\n-P2SH_1 = script_to_p2sh_script(REDEEM_SCRIPT_1)\n-P2SH_2 = script_to_p2sh_script(REDEEM_SCRIPT_2)\n-\n-# Associated ScriptSig's to spend satisfy P2SH_1 and P2SH_2\n-SCRIPT_SIG = [CScript([OP_TRUE, REDEEM_SCRIPT_1]), CScript([OP_TRUE, REDEEM_SCRIPT_2])]\n+SCRIPT = CScript([OP_1, OP_DROP])\n+P2SH = script_to_p2sh_script(SCRIPT)\n+REDEEM_SCRIPT = CScript([OP_TRUE, SCRIPT])\n \n \n def small_txpuzzle_randfee(from_node, conflist, unconflist, amount, min_fee, fee_increment):\n@@ -73,12 +68,12 @@ def small_txpuzzle_randfee(from_node, conflist, unconflist, amount, min_fee, fee\n         tx.vin.append(CTxIn(COutPoint(int(t[\"txid\"], 16), t[\"vout\"]), b\"\"))\n     if total_in <= amount + fee:\n         raise RuntimeError(f\"Insufficient funds: need {amount + fee}, have {total_in}\")\n-    tx.vout.append(CTxOut(int((total_in - amount - fee) * COIN), P2SH_1))\n-    tx.vout.append(CTxOut(int(amount * COIN), P2SH_2))\n+    tx.vout.append(CTxOut(int((total_in - amount - fee) * COIN), P2SH))\n+    tx.vout.append(CTxOut(int(amount * COIN), P2SH))\n     # These transactions don't need to be signed, but we still have to insert\n     # the ScriptSig that will satisfy the ScriptPubKey.\n     for inp in tx.vin:\n-        inp.scriptSig = SCRIPT_SIG[inp.prevout.n]\n+        inp.scriptSig = REDEEM_SCRIPT\n     txid = from_node.sendrawtransaction(hexstring=tx.serialize().hex(), maxfeerate=0)\n     unconflist.append({\"txid\": txid, \"vout\": 0, \"amount\": total_in - amount - fee})\n     unconflist.append({\"txid\": txid, \"vout\": 1, \"amount\": amount})\n@@ -100,15 +95,15 @@ def split_inputs(from_node, txins, txouts, initial_split=False):\n \n     half_change = satoshi_round(prevtxout[\"amount\"] / 2)\n     rem_change = prevtxout[\"amount\"] - half_change - Decimal(\"0.00001000\")\n-    tx.vout.append(CTxOut(int(half_change * COIN), P2SH_1))\n-    tx.vout.append(CTxOut(int(rem_change * COIN), P2SH_2))\n+    tx.vout.append(CTxOut(int(half_change * COIN), P2SH))\n+    tx.vout.append(CTxOut(int(rem_change * COIN), P2SH))\n \n     # If this is the initial split we actually need to sign the transaction\n     # Otherwise we just need to insert the proper ScriptSig\n     if (initial_split):\n         completetx = from_node.signrawtransactionwithwallet(tx.serialize().hex())[\"hex\"]\n     else:\n-        tx.vin[0].scriptSig = SCRIPT_SIG[prevtxout[\"vout\"]]\n+        tx.vin[0].scriptSig = REDEEM_SCRIPT\n         completetx = tx.serialize().hex()\n     txid = from_node.sendrawtransaction(hexstring=completetx, maxfeerate=0)\n     txouts.append({\"txid\": txid, \"vout\": 0, \"amount\": half_change})"
      }
    ]
  },
  {
    "sha": "99cffe50adc486f13ac62c3cb2c7b3cd166a73f4",
    "node_id": "C_kwDOABII59oAKDk5Y2ZmZTUwYWRjNDg2ZjEzYWM2MmMzY2IyYzdiM2NkMTY2YTczZjQ",
    "commit": {
      "author": {
        "name": "Antoine Poinsot",
        "email": "darosior@protonmail.com",
        "date": "2021-09-20T21:11:10Z"
      },
      "committer": {
        "name": "Antoine Poinsot",
        "email": "darosior@protonmail.com",
        "date": "2021-11-14T12:19:44Z"
      },
      "message": "qa: split coins in a single tx in fee estimation test\n\nThis simplifies the code, and slightly speeds up the test.\n\nRunning `./test/functional/test_runner.py -j15 $(printf 'feature_fee_estimation %.0s' {1..15})`\non master 3 times gives:\n\n- Before:\n    ALL                       | \u2713 Passed  | 788 s (accumulated)\n    ALL                       | \u2713 Passed  | 818 s (accumulated)\n    ALL                       | \u2713 Passed  | 873 s (accumulated)\n\n- After:\n    ALL                       | \u2713 Passed  | 763 s (accumulated)\n    ALL                       | \u2713 Passed  | 798 s (accumulated)\n    ALL                       | \u2713 Passed  | 731 s (accumulated)\n\nSigned-off-by: Antoine Poinsot <darosior@protonmail.com>",
      "tree": {
        "sha": "a6c02a7a4908a68ff87f707693525cbe1854cb39",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a6c02a7a4908a68ff87f707693525cbe1854cb39"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/99cffe50adc486f13ac62c3cb2c7b3cd166a73f4",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEWQtykmla/6W2csuy4T/BRc0/QwQFAmGQ/uQACgkQ4T/BRc0/\nQwRvIgv9Hd1NrKRiPAHUW6H5uBTgYjkwXrA//Wwc8BFpuR/yOQa9km5XVYIbfXOP\njkwHq8o4NNu+bPoe2BWn+83F3e38SYMZ1vDcf+zuq6svxZOLpCPOMboRONd4yvL2\nK8FPCVtApwux1ydJ5iHnNf/lSP2al/lKrb368X9R/PR9lSKZlRdRB7srBGhXcZ/6\nYJF2Ww2anBIcVqNv4lmDA2FCE+oqvM3NVLEK2Pfp7q0GL6x+O3jf/A4EhHjc59sT\n+uZJl9MrBZJqlJQuYDLh3ayXufzeVAmLDZFSJfkV/Kq00zPz2ExJPAEIxoPswuyl\nfv6PxPmi3Hd3TEH60fLCBNKyE5cN5o2GkSqNeW/8l9+6fZGpm3i03vQx6Y1TgAq6\n2QN1HK/HseLlK6IG1t7DtYlL8+dA4Y6XNEkooR3ItG880qz5mTMHcBeFWE5CutJy\nwbRV5Alvs54LsYpVEQvvqjAAHcUyim+zv4RBf/J2xvPeYUQ5AH6Zh776bt3MY/hR\nKqZnRnuU\n=Dwzd\n-----END PGP SIGNATURE-----",
        "payload": "tree a6c02a7a4908a68ff87f707693525cbe1854cb39\nparent 0a27c7f793e3a08fc24a6ffa3a4c51b8764a3fe1\nauthor Antoine Poinsot <darosior@protonmail.com> 1632172270 +0200\ncommitter Antoine Poinsot <darosior@protonmail.com> 1636892384 +0100\n\nqa: split coins in a single tx in fee estimation test\n\nThis simplifies the code, and slightly speeds up the test.\n\nRunning `./test/functional/test_runner.py -j15 $(printf 'feature_fee_estimation %.0s' {1..15})`\non master 3 times gives:\n\n- Before:\n    ALL                       | \u2713 Passed  | 788 s (accumulated)\n    ALL                       | \u2713 Passed  | 818 s (accumulated)\n    ALL                       | \u2713 Passed  | 873 s (accumulated)\n\n- After:\n    ALL                       | \u2713 Passed  | 763 s (accumulated)\n    ALL                       | \u2713 Passed  | 798 s (accumulated)\n    ALL                       | \u2713 Passed  | 731 s (accumulated)\n\nSigned-off-by: Antoine Poinsot <darosior@protonmail.com>\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/99cffe50adc486f13ac62c3cb2c7b3cd166a73f4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/99cffe50adc486f13ac62c3cb2c7b3cd166a73f4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/99cffe50adc486f13ac62c3cb2c7b3cd166a73f4/comments",
    "author": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0a27c7f793e3a08fc24a6ffa3a4c51b8764a3fe1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a27c7f793e3a08fc24a6ffa3a4c51b8764a3fe1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0a27c7f793e3a08fc24a6ffa3a4c51b8764a3fe1"
      }
    ],
    "stats": {
      "total": 146,
      "additions": 69,
      "deletions": 77
    },
    "files": [
      {
        "sha": "2336a75978b2f2c2fa5ca7848495e7e27d610aeb",
        "filename": "test/functional/feature_fee_estimation.py",
        "status": "modified",
        "additions": 69,
        "deletions": 77,
        "changes": 146,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99cffe50adc486f13ac62c3cb2c7b3cd166a73f4/test/functional/feature_fee_estimation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99cffe50adc486f13ac62c3cb2c7b3cd166a73f4/test/functional/feature_fee_estimation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_fee_estimation.py?ref=99cffe50adc486f13ac62c3cb2c7b3cd166a73f4",
        "patch": "@@ -40,7 +40,9 @@\n REDEEM_SCRIPT = CScript([OP_TRUE, SCRIPT])\n \n \n-def small_txpuzzle_randfee(from_node, conflist, unconflist, amount, min_fee, fee_increment):\n+def small_txpuzzle_randfee(\n+    from_node, conflist, unconflist, amount, min_fee, fee_increment\n+):\n     \"\"\"Create and send a transaction with a random fee.\n \n     The transaction pays to a trivial P2SH script, and assumes that its inputs\n@@ -81,34 +83,6 @@ def small_txpuzzle_randfee(from_node, conflist, unconflist, amount, min_fee, fee\n     return (tx.serialize().hex(), fee)\n \n \n-def split_inputs(from_node, txins, txouts, initial_split=False):\n-    \"\"\"Generate a lot of inputs so we can generate a ton of transactions.\n-\n-    This function takes an input from txins, and creates and sends a transaction\n-    which splits the value into 2 outputs which are appended to txouts.\n-    Previously this was designed to be small inputs so they wouldn't have\n-    a high coin age when the notion of priority still existed.\"\"\"\n-\n-    prevtxout = txins.pop()\n-    tx = CTransaction()\n-    tx.vin.append(CTxIn(COutPoint(int(prevtxout[\"txid\"], 16), prevtxout[\"vout\"]), b\"\"))\n-\n-    half_change = satoshi_round(prevtxout[\"amount\"] / 2)\n-    rem_change = prevtxout[\"amount\"] - half_change - Decimal(\"0.00001000\")\n-    tx.vout.append(CTxOut(int(half_change * COIN), P2SH))\n-    tx.vout.append(CTxOut(int(rem_change * COIN), P2SH))\n-\n-    # If this is the initial split we actually need to sign the transaction\n-    # Otherwise we just need to insert the proper ScriptSig\n-    if (initial_split):\n-        completetx = from_node.signrawtransactionwithwallet(tx.serialize().hex())[\"hex\"]\n-    else:\n-        tx.vin[0].scriptSig = REDEEM_SCRIPT\n-        completetx = tx.serialize().hex()\n-    txid = from_node.sendrawtransaction(hexstring=completetx, maxfeerate=0)\n-    txouts.append({\"txid\": txid, \"vout\": 0, \"amount\": half_change})\n-    txouts.append({\"txid\": txid, \"vout\": 1, \"amount\": rem_change})\n-\n def check_raw_estimates(node, fees_seen):\n     \"\"\"Call estimaterawfee and verify that the estimates meet certain invariants.\"\"\"\n \n@@ -119,33 +93,41 @@ def check_raw_estimates(node, fees_seen):\n             assert_greater_than(feerate, 0)\n \n             if feerate + delta < min(fees_seen) or feerate - delta > max(fees_seen):\n-                raise AssertionError(f\"Estimated fee ({feerate}) out of range ({min(fees_seen)},{max(fees_seen)})\")\n+                raise AssertionError(\n+                    f\"Estimated fee ({feerate}) out of range ({min(fees_seen)},{max(fees_seen)})\"\n+                )\n+\n \n def check_smart_estimates(node, fees_seen):\n     \"\"\"Call estimatesmartfee and verify that the estimates meet certain invariants.\"\"\"\n \n     delta = 1.0e-6  # account for rounding error\n     last_feerate = float(max(fees_seen))\n     all_smart_estimates = [node.estimatesmartfee(i) for i in range(1, 26)]\n-    mempoolMinFee = node.getmempoolinfo()['mempoolminfee']\n-    minRelaytxFee = node.getmempoolinfo()['minrelaytxfee']\n+    mempoolMinFee = node.getmempoolinfo()[\"mempoolminfee\"]\n+    minRelaytxFee = node.getmempoolinfo()[\"minrelaytxfee\"]\n     for i, e in enumerate(all_smart_estimates):  # estimate is for i+1\n         feerate = float(e[\"feerate\"])\n         assert_greater_than(feerate, 0)\n         assert_greater_than_or_equal(feerate, float(mempoolMinFee))\n         assert_greater_than_or_equal(feerate, float(minRelaytxFee))\n \n         if feerate + delta < min(fees_seen) or feerate - delta > max(fees_seen):\n-            raise AssertionError(f\"Estimated fee ({feerate}) out of range ({min(fees_seen)},{max(fees_seen)})\")\n+            raise AssertionError(\n+                f\"Estimated fee ({feerate}) out of range ({min(fees_seen)},{max(fees_seen)})\"\n+            )\n         if feerate - delta > last_feerate:\n-            raise AssertionError(f\"Estimated fee ({feerate}) larger than last fee ({last_feerate}) for lower number of confirms\")\n+            raise AssertionError(\n+                f\"Estimated fee ({feerate}) larger than last fee ({last_feerate}) for lower number of confirms\"\n+            )\n         last_feerate = feerate\n \n         if i == 0:\n             assert_equal(e[\"blocks\"], 2)\n         else:\n             assert_greater_than_or_equal(i + 1, e[\"blocks\"])\n \n+\n def check_estimates(node, fees_seen):\n     check_raw_estimates(node, fees_seen)\n     check_smart_estimates(node, fees_seen)\n@@ -158,8 +140,10 @@ def send_tx(node, utxo, feerate):\n     fee = tx_size * feerate\n \n     tx = CTransaction()\n-    tx.vin = [CTxIn(COutPoint(int(utxo[\"txid\"], 16), utxo[\"vout\"]), SCRIPT_SIG[utxo[\"vout\"]])]\n-    tx.vout = [CTxOut(int(utxo[\"amount\"] * COIN) - fee, P2SH_1)]\n+    tx.vin = [\n+        CTxIn(COutPoint(int(utxo[\"txid\"], 16), utxo[\"vout\"]), REDEEM_SCRIPT)\n+    ]\n+    tx.vout = [CTxOut(int(utxo[\"amount\"] * COIN) - fee, P2SH)]\n     txid = node.sendrawtransaction(tx.serialize().hex())\n \n     return txid\n@@ -206,13 +190,19 @@ def transact_and_mine(self, numblocks, mining_node):\n             random.shuffle(self.confutxo)\n             for _ in range(random.randrange(100 - 50, 100 + 50)):\n                 from_index = random.randint(1, 2)\n-                (txhex, fee) = small_txpuzzle_randfee(self.nodes[from_index], self.confutxo,\n-                                                      self.memutxo, Decimal(\"0.005\"), min_fee, min_fee)\n+                (txhex, fee) = small_txpuzzle_randfee(\n+                    self.nodes[from_index],\n+                    self.confutxo,\n+                    self.memutxo,\n+                    Decimal(\"0.005\"),\n+                    min_fee,\n+                    min_fee,\n+                )\n                 tx_kbytes = (len(txhex) // 2) / 1000.0\n                 self.fees_per_kb.append(float(fee) / tx_kbytes)\n-            self.sync_mempools(wait=.1)\n+            self.sync_mempools(wait=0.1)\n             mined = mining_node.getblock(self.generate(mining_node, 1)[0], True)[\"tx\"]\n-            self.sync_blocks(wait=.1)\n+            self.sync_blocks(wait=0.1)\n             # update which txouts are confirmed\n             newmem = []\n             for utx in self.memutxo:\n@@ -224,46 +214,45 @@ def transact_and_mine(self, numblocks, mining_node):\n \n     def initial_split(self, node):\n         \"\"\"Split two coinbase UTxOs into many small coins\"\"\"\n-        self.txouts = []\n-        self.txouts2 = []\n-        # Split a coinbase into two transaction puzzle outputs\n-        split_inputs(node, node.listunspent(0), self.txouts, True)\n-\n-        # Mine\n+        utxo_count = 2048\n+        self.confutxo = []\n+        splitted_amount = Decimal(\"0.04\")\n+        fee = Decimal(\"0.1\")\n+        change = Decimal(\"100\") - splitted_amount * utxo_count - fee\n+        tx = CTransaction()\n+        tx.vin = [\n+            CTxIn(COutPoint(int(cb[\"txid\"], 16), cb[\"vout\"]), b\"\")\n+            for cb in node.listunspent()[:2]\n+        ]\n+        tx.vout = [CTxOut(int(splitted_amount * COIN), P2SH) for _ in range(utxo_count)]\n+        tx.vout.append(CTxOut(int(change * COIN), P2SH))\n+        txhex = node.signrawtransactionwithwallet(tx.serialize().hex())[\"hex\"]\n+        txid = node.sendrawtransaction(txhex)\n+        self.confutxo = [\n+            {\"txid\": txid, \"vout\": i, \"amount\": splitted_amount}\n+            for i in range(utxo_count)\n+        ]\n         while len(node.getrawmempool()) > 0:\n             self.generate(node, 1, sync_fun=self.no_op)\n \n-        # Repeatedly split those 2 outputs, doubling twice for each rep\n-        # Use txouts to monitor the available utxo, since these won't be tracked in wallet\n-        reps = 0\n-        while reps < 5:\n-            # Double txouts to txouts2\n-            while len(self.txouts) > 0:\n-                split_inputs(node, self.txouts, self.txouts2)\n-            while len(node.getrawmempool()) > 0:\n-                self.generate(node, 1, sync_fun=self.no_op)\n-            # Double txouts2 to txouts\n-            while len(self.txouts2) > 0:\n-                split_inputs(node, self.txouts2, self.txouts)\n-            while len(node.getrawmempool()) > 0:\n-                self.generate(node, 1, sync_fun=self.no_op)\n-            reps += 1\n-\n     def sanity_check_estimates_range(self):\n         \"\"\"Populate estimation buckets, assert estimates are in a sane range and\n         are strictly increasing as the target decreases.\"\"\"\n         self.fees_per_kb = []\n         self.memutxo = []\n-        self.confutxo = self.txouts  # Start with the set of confirmed txouts after splitting\n         self.log.info(\"Will output estimates for 1/2/3/6/15/25 blocks\")\n \n         for _ in range(2):\n-            self.log.info(\"Creating transactions and mining them with a block size that can't keep up\")\n+            self.log.info(\n+                \"Creating transactions and mining them with a block size that can't keep up\"\n+            )\n             # Create transactions and mine 10 small blocks with node 2, but create txs faster than we can mine\n             self.transact_and_mine(10, self.nodes[2])\n             check_estimates(self.nodes[1], self.fees_per_kb)\n \n-            self.log.info(\"Creating transactions and mining them at a block size that is just big enough\")\n+            self.log.info(\n+                \"Creating transactions and mining them at a block size that is just big enough\"\n+            )\n             # Generate transactions while mining 10 more blocks, this time with node1\n             # which mines blocks with capacity just above the rate that transactions are being created\n             self.transact_and_mine(10, self.nodes[1])\n@@ -273,13 +262,13 @@ def sanity_check_estimates_range(self):\n         while len(self.nodes[1].getrawmempool()) > 0:\n             self.generate(self.nodes[1], 1)\n \n-        self.sync_blocks(self.nodes[0:3], wait=.1)\n+        self.sync_blocks(self.nodes[0:3], wait=0.1)\n         self.log.info(\"Final estimates after emptying mempools\")\n         check_estimates(self.nodes[1], self.fees_per_kb)\n \n     def test_feerate_mempoolminfee(self):\n-        high_val = 3*self.nodes[1].estimatesmartfee(1)['feerate']\n-        self.restart_node(1, extra_args=[f'-minrelaytxfee={high_val}'])\n+        high_val = 3 * self.nodes[1].estimatesmartfee(1)[\"feerate\"]\n+        self.restart_node(1, extra_args=[f\"-minrelaytxfee={high_val}\"])\n         check_estimates(self.nodes[1], self.fees_per_kb)\n         self.restart_node(1)\n \n@@ -312,11 +301,11 @@ def sanity_check_rbf_estimates(self, utxos):\n             for _ in range(5):\n                 send_tx(node, utxos.pop(0), low_feerate)\n             # Mine the transactions on another node\n-            self.sync_mempools(wait=.1, nodes=[node, miner])\n+            self.sync_mempools(wait=0.1, nodes=[node, miner])\n             for txid in txids_to_replace:\n                 miner.prioritisetransaction(txid=txid, fee_delta=-COIN)\n             self.generate(miner, 1)\n-            self.sync_blocks(wait=.1, nodes=[node, miner])\n+            self.sync_blocks(wait=0.1, nodes=[node, miner])\n             # RBF the low-fee transactions\n             while True:\n                 try:\n@@ -326,13 +315,13 @@ def sanity_check_rbf_estimates(self, utxos):\n                     break\n \n         # Mine the last replacement txs\n-        self.sync_mempools(wait=.1, nodes=[node, miner])\n+        self.sync_mempools(wait=0.1, nodes=[node, miner])\n         self.generate(miner, 1)\n-        self.sync_blocks(wait=.1, nodes=[node, miner])\n+        self.sync_blocks(wait=0.1, nodes=[node, miner])\n \n         # Only 10% of the transactions were really confirmed with a low feerate,\n         # the rest needed to be RBF'd. We must return the 90% conf rate feerate.\n-        high_feerate_kvb = Decimal(high_feerate) / COIN * 10**3\n+        high_feerate_kvb = Decimal(high_feerate) / COIN * 10 ** 3\n         est_feerate = node.estimatesmartfee(2)[\"feerate\"]\n         assert est_feerate == high_feerate_kvb\n \n@@ -358,7 +347,9 @@ def run_test(self):\n         self.sanity_check_estimates_range()\n \n         # check that the effective feerate is greater than or equal to the mempoolminfee even for high mempoolminfee\n-        self.log.info(\"Test fee rate estimation after restarting node with high MempoolMinFee\")\n+        self.log.info(\n+            \"Test fee rate estimation after restarting node with high MempoolMinFee\"\n+        )\n         self.test_feerate_mempoolminfee()\n \n         self.log.info(\"Restarting node with fresh estimation\")\n@@ -374,9 +365,10 @@ def run_test(self):\n \n         self.log.info(\"Testing that fee estimation is disabled in blocksonly.\")\n         self.restart_node(0, [\"-blocksonly\"])\n-        assert_raises_rpc_error(-32603, \"Fee estimation disabled\",\n-                                self.nodes[0].estimatesmartfee, 2)\n+        assert_raises_rpc_error(\n+            -32603, \"Fee estimation disabled\", self.nodes[0].estimatesmartfee, 2\n+        )\n \n \n-if __name__ == '__main__':\n+if __name__ == \"__main__\":\n     EstimateFeeTest().main()"
      }
    ]
  },
  {
    "sha": "2491c2cc053f98eb84ccdc10f2333a6a32c45cf7",
    "node_id": "C_kwDOABII59oAKDI0OTFjMmNjMDUzZjk4ZWI4NGNjZGMxMGYyMzMzYTZhMzJjNDVjZjc",
    "commit": {
      "author": {
        "name": "Antoine Poinsot",
        "email": "darosior@protonmail.com",
        "date": "2021-09-21T10:31:18Z"
      },
      "committer": {
        "name": "Antoine Poinsot",
        "email": "darosior@protonmail.com",
        "date": "2021-11-14T12:19:49Z"
      },
      "message": "qa: pass scriptsig directly to txins constructor in fee estimation test\n\nSigned-off-by: Antoine Poinsot <darosior@protonmail.com>",
      "tree": {
        "sha": "91ca701ad48eebd49571d7948e8bfe650adb8b50",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/91ca701ad48eebd49571d7948e8bfe650adb8b50"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2491c2cc053f98eb84ccdc10f2333a6a32c45cf7",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEWQtykmla/6W2csuy4T/BRc0/QwQFAmGQ/uUACgkQ4T/BRc0/\nQwSsvQwAmBAUCv//lHHE47ZIh2hNidSiMG7Az+W3ux2vdpANmwPD3nKcCl3K2i0S\n7HuOOx3w95Ec/0YQ/PKUd4uQ9GiQMQeICRs2IxPE0zF3o/aWFer8Z9L9yo8ThZZb\nT+ZnvpJbnGNxtr34xU3JqjgaBKJqCs+Y4+e4Kthnm5NaxoUHYi3Sbg6NLsMyjG4B\ncOqqtSVI5UJdWAwb67cvqnALkVggOX3DjryLb96uSguR4v9hlNqSC2/LpQUCt+4e\nXCLIiNzbSkZmIOzRdq09hd2Nt/JMG0nM+cNpOQnDOGamOBdMcl2Eqezp0ZhZHaLn\nY96D817DOSerjeOo7ymkA/IVds3yqK0/MpUfVgf8S3NOyxp0x4xmvJAR4L4YMCde\nKz34unqWknSjBCylOqgiBIug6/tpab8GykDMXlDeK3cvXfn315KdypU5bLr43mvZ\nCMqI0jHyJm1LU1RhaowVtNx11N2a8vXW619dip2gr387XV+IO0bwC96COKwn6zxm\nuVNBbEv5\n=5jnu\n-----END PGP SIGNATURE-----",
        "payload": "tree 91ca701ad48eebd49571d7948e8bfe650adb8b50\nparent 99cffe50adc486f13ac62c3cb2c7b3cd166a73f4\nauthor Antoine Poinsot <darosior@protonmail.com> 1632220278 +0200\ncommitter Antoine Poinsot <darosior@protonmail.com> 1636892389 +0100\n\nqa: pass scriptsig directly to txins constructor in fee estimation test\n\nSigned-off-by: Antoine Poinsot <darosior@protonmail.com>\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2491c2cc053f98eb84ccdc10f2333a6a32c45cf7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2491c2cc053f98eb84ccdc10f2333a6a32c45cf7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2491c2cc053f98eb84ccdc10f2333a6a32c45cf7/comments",
    "author": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "99cffe50adc486f13ac62c3cb2c7b3cd166a73f4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/99cffe50adc486f13ac62c3cb2c7b3cd166a73f4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/99cffe50adc486f13ac62c3cb2c7b3cd166a73f4"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 3,
      "deletions": 7
    },
    "files": [
      {
        "sha": "5f6032341782792b90131549f8e75d0900fdb6ae",
        "filename": "test/functional/feature_fee_estimation.py",
        "status": "modified",
        "additions": 3,
        "deletions": 7,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2491c2cc053f98eb84ccdc10f2333a6a32c45cf7/test/functional/feature_fee_estimation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2491c2cc053f98eb84ccdc10f2333a6a32c45cf7/test/functional/feature_fee_estimation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_fee_estimation.py?ref=2491c2cc053f98eb84ccdc10f2333a6a32c45cf7",
        "patch": "@@ -63,19 +63,15 @@ def small_txpuzzle_randfee(\n     while total_in <= (amount + fee) and len(conflist) > 0:\n         t = conflist.pop(0)\n         total_in += t[\"amount\"]\n-        tx.vin.append(CTxIn(COutPoint(int(t[\"txid\"], 16), t[\"vout\"]), b\"\"))\n+        tx.vin.append(CTxIn(COutPoint(int(t[\"txid\"], 16), t[\"vout\"]), REDEEM_SCRIPT))\n     while total_in <= (amount + fee) and len(unconflist) > 0:\n         t = unconflist.pop(0)\n         total_in += t[\"amount\"]\n-        tx.vin.append(CTxIn(COutPoint(int(t[\"txid\"], 16), t[\"vout\"]), b\"\"))\n+        tx.vin.append(CTxIn(COutPoint(int(t[\"txid\"], 16), t[\"vout\"]), REDEEM_SCRIPT))\n     if total_in <= amount + fee:\n         raise RuntimeError(f\"Insufficient funds: need {amount + fee}, have {total_in}\")\n     tx.vout.append(CTxOut(int((total_in - amount - fee) * COIN), P2SH))\n     tx.vout.append(CTxOut(int(amount * COIN), P2SH))\n-    # These transactions don't need to be signed, but we still have to insert\n-    # the ScriptSig that will satisfy the ScriptPubKey.\n-    for inp in tx.vin:\n-        inp.scriptSig = REDEEM_SCRIPT\n     txid = from_node.sendrawtransaction(hexstring=tx.serialize().hex(), maxfeerate=0)\n     unconflist.append({\"txid\": txid, \"vout\": 0, \"amount\": total_in - amount - fee})\n     unconflist.append({\"txid\": txid, \"vout\": 1, \"amount\": amount})\n@@ -221,7 +217,7 @@ def initial_split(self, node):\n         change = Decimal(\"100\") - splitted_amount * utxo_count - fee\n         tx = CTransaction()\n         tx.vin = [\n-            CTxIn(COutPoint(int(cb[\"txid\"], 16), cb[\"vout\"]), b\"\")\n+            CTxIn(COutPoint(int(cb[\"txid\"], 16), cb[\"vout\"]))\n             for cb in node.listunspent()[:2]\n         ]\n         tx.vout = [CTxOut(int(splitted_amount * COIN), P2SH) for _ in range(utxo_count)]"
      }
    ]
  },
  {
    "sha": "13a7fe40267ec7fca2b0a48573964aeb92986136",
    "node_id": "C_kwDOABII59oAKDEzYTdmZTQwMjY3ZWM3ZmNhMmIwYTQ4NTczOTY0YWViOTI5ODYxMzY",
    "commit": {
      "author": {
        "name": "Antoine Poinsot",
        "email": "darosior@protonmail.com",
        "date": "2021-09-21T11:24:37Z"
      },
      "committer": {
        "name": "Antoine Poinsot",
        "email": "darosior@protonmail.com",
        "date": "2021-11-14T12:19:49Z"
      },
      "message": "qa: don't mine non standard txs in fee estimation test\n\nWe don't need dust outputs anymore.\n\nSigned-off-by: Antoine Poinsot <darosior@protonmail.com>",
      "tree": {
        "sha": "e228c7dfa61d4bc8e49f46d9736da70d79eb87ff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e228c7dfa61d4bc8e49f46d9736da70d79eb87ff"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/13a7fe40267ec7fca2b0a48573964aeb92986136",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEWQtykmla/6W2csuy4T/BRc0/QwQFAmGQ/uUACgkQ4T/BRc0/\nQwTUPgv9G2z3DgUKq+NLCavRYHkmCIorfCWCQDvF7PI0BjmM6SKUusTw0sUEfbMk\no1OgTy7CMXVDjSJWUvcvgnnUSUSNap5Bpbc8C6PU+tQTbEVw+XGVvleEfnwmPfyL\nJWMqu+MoWHq5byk8mp2pzirNUOxonLpSEESe5B/G+WU91IWnxfmPIboVJPcLN402\nDZs5jP8Fq4lba9qlYGGjSUpKCqNRLSEpBuTL9Xyv4ANISVfKr1LCjMJC/rlnKJ0h\n7FhUNnSKCX9CFu42PJULYeeqUFNi1YYDidkBcdz463IvDtdXmfFTgWI6oTnmOiJL\nZAClOCz5vkMm1u0dr4FolpG6+SndYhja0cLysQAI8USf2pBYfEUIFU1LNebfoLRg\nJaXO+hyVlaIL8lvLFLuig1yZP0Wo9t6Ihc/DeRiwPwoSFX5lQW1IgwoR0Lb7QGix\nVbCAxAHaXugQPFL31NGebYcQmszZakPQsiTJJv1feIhvCsyL2egoyg2Vo92UUaEq\nWWxPTK8p\n=cRow\n-----END PGP SIGNATURE-----",
        "payload": "tree e228c7dfa61d4bc8e49f46d9736da70d79eb87ff\nparent 2491c2cc053f98eb84ccdc10f2333a6a32c45cf7\nauthor Antoine Poinsot <darosior@protonmail.com> 1632223477 +0200\ncommitter Antoine Poinsot <darosior@protonmail.com> 1636892389 +0100\n\nqa: don't mine non standard txs in fee estimation test\n\nWe don't need dust outputs anymore.\n\nSigned-off-by: Antoine Poinsot <darosior@protonmail.com>\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/13a7fe40267ec7fca2b0a48573964aeb92986136",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/13a7fe40267ec7fca2b0a48573964aeb92986136",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/13a7fe40267ec7fca2b0a48573964aeb92986136/comments",
    "author": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2491c2cc053f98eb84ccdc10f2333a6a32c45cf7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2491c2cc053f98eb84ccdc10f2333a6a32c45cf7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2491c2cc053f98eb84ccdc10f2333a6a32c45cf7"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 3,
      "deletions": 4
    },
    "files": [
      {
        "sha": "d8ffdb1124b19cf776169854f2ada7f952d895f5",
        "filename": "test/functional/feature_fee_estimation.py",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13a7fe40267ec7fca2b0a48573964aeb92986136/test/functional/feature_fee_estimation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13a7fe40267ec7fca2b0a48573964aeb92986136/test/functional/feature_fee_estimation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_fee_estimation.py?ref=13a7fe40267ec7fca2b0a48573964aeb92986136",
        "patch": "@@ -148,12 +148,11 @@ def send_tx(node, utxo, feerate):\n class EstimateFeeTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 3\n-        # mine non-standard txs (e.g. txs with \"dust\" outputs)\n         # Force fSendTrickle to true (via whitelist.noban)\n         self.extra_args = [\n-            [\"-acceptnonstdtxn\", \"-whitelist=noban@127.0.0.1\"],\n-            [\"-acceptnonstdtxn\", \"-whitelist=noban@127.0.0.1\", \"-blockmaxweight=68000\"],\n-            [\"-acceptnonstdtxn\", \"-whitelist=noban@127.0.0.1\", \"-blockmaxweight=32000\"],\n+            [\"-whitelist=noban@127.0.0.1\"],\n+            [\"-whitelist=noban@127.0.0.1\", \"-blockmaxweight=68000\"],\n+            [\"-whitelist=noban@127.0.0.1\", \"-blockmaxweight=32000\"],\n         ]\n \n     def skip_test_if_missing_module(self):"
      }
    ]
  },
  {
    "sha": "0314ae8e0a23156398fc69b290649f96861caeff",
    "node_id": "C_kwDOABII59oAKDAzMTRhZThlMGEyMzE1NjM5OGZjNjliMjkwNjQ5Zjk2ODYxY2FlZmY",
    "commit": {
      "author": {
        "name": "Antoine Poinsot",
        "email": "darosior@protonmail.com",
        "date": "2021-10-15T10:29:27Z"
      },
      "committer": {
        "name": "Antoine Poinsot",
        "email": "darosior@protonmail.com",
        "date": "2021-11-14T12:19:50Z"
      },
      "message": "qa: fee estimation with RBF test cleanups\n\nFollowups to #22539\n\nCo-Atuhored-By: Sebastian Falbesoner <sebastian.falbesoner@gmail.com>",
      "tree": {
        "sha": "02f7a65e71dd44d99681362cc9f8c43faf1dcab5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/02f7a65e71dd44d99681362cc9f8c43faf1dcab5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0314ae8e0a23156398fc69b290649f96861caeff",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEWQtykmla/6W2csuy4T/BRc0/QwQFAmGQ/uYACgkQ4T/BRc0/\nQwTqAgv/YmFFeEbKkw1p6k+EMCEmace8ZmsyaAhYBoeglFCNcShaMKc4iJUxuTC2\nrKt9wYhmaYQHk0lzVGrHaOxv4Qm+0WQ6SxjU54D4prxG+3dSI1XYcF1hljxoNh1u\n7IPK3GAlYR1KjMG1Z9ax8ip8FBigoW367Rk/xTq2lVoQEozguhfLwBtBb43dGu9d\nn1+6vC+6VrhRgUVzesnXsxSsMH+Lae2rZHx3ZyjMGjI2fZibYFMvEbNaYZL6pOyO\nQaZwR1BO0DInat1tJcHvPT5LmObxsdYTnfyTELzngAEAHhSAaAgUM7lWGy6pXmh+\nh5oD9ums7KELWjzLxFd2g3y56ggcAAzjwhzMjpdiEp9ToPzETHtJHzepAHP443Of\n/VPoDbQoQOqOnMmYMe6XQJ9debkfiM9VhXfOtOzRfA4pNNjfUqc7FptPteMvGoR/\nUj8g6wxQA+0DZcLXxcoKflIYvEuWpQTX/1gYqJF02eoFd9CYgscbsy+iZcADl951\ngcPNUWS4\n=mW2d\n-----END PGP SIGNATURE-----",
        "payload": "tree 02f7a65e71dd44d99681362cc9f8c43faf1dcab5\nparent 13a7fe40267ec7fca2b0a48573964aeb92986136\nauthor Antoine Poinsot <darosior@protonmail.com> 1634293767 +0200\ncommitter Antoine Poinsot <darosior@protonmail.com> 1636892390 +0100\n\nqa: fee estimation with RBF test cleanups\n\nFollowups to #22539\n\nCo-Atuhored-By: Sebastian Falbesoner <sebastian.falbesoner@gmail.com>\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0314ae8e0a23156398fc69b290649f96861caeff",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0314ae8e0a23156398fc69b290649f96861caeff",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0314ae8e0a23156398fc69b290649f96861caeff/comments",
    "author": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "13a7fe40267ec7fca2b0a48573964aeb92986136",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/13a7fe40267ec7fca2b0a48573964aeb92986136",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/13a7fe40267ec7fca2b0a48573964aeb92986136"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 9,
      "deletions": 13
    },
    "files": [
      {
        "sha": "b0a1239ce7933d729d5c3874615a1c30f394de02",
        "filename": "test/functional/feature_fee_estimation.py",
        "status": "modified",
        "additions": 9,
        "deletions": 13,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0314ae8e0a23156398fc69b290649f96861caeff/test/functional/feature_fee_estimation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0314ae8e0a23156398fc69b290649f96861caeff/test/functional/feature_fee_estimation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_fee_estimation.py?ref=0314ae8e0a23156398fc69b290649f96861caeff",
        "patch": "@@ -131,18 +131,17 @@ def check_estimates(node, fees_seen):\n \n def send_tx(node, utxo, feerate):\n     \"\"\"Broadcast a 1in-1out transaction with a specific input and feerate (sat/vb).\"\"\"\n-    overhead, op, scriptsig, nseq, value, spk = 10, 36, 5, 4, 8, 24\n-    tx_size = overhead + op + scriptsig + nseq + value + spk\n-    fee = tx_size * feerate\n-\n     tx = CTransaction()\n     tx.vin = [\n         CTxIn(COutPoint(int(utxo[\"txid\"], 16), utxo[\"vout\"]), REDEEM_SCRIPT)\n     ]\n-    tx.vout = [CTxOut(int(utxo[\"amount\"] * COIN) - fee, P2SH)]\n-    txid = node.sendrawtransaction(tx.serialize().hex())\n+    tx.vout = [CTxOut(int(utxo[\"amount\"] * COIN), P2SH)]\n+\n+    # vbytes == bytes as we are using legacy transactions\n+    fee = len(tx.serialize()) * feerate\n+    tx.vout[0].nValue -= fee\n \n-    return txid\n+    return node.sendrawtransaction(tx.serialize().hex())\n \n \n class EstimateFeeTest(BitcoinTestFramework):\n@@ -302,12 +301,9 @@ def sanity_check_rbf_estimates(self, utxos):\n             self.generate(miner, 1)\n             self.sync_blocks(wait=0.1, nodes=[node, miner])\n             # RBF the low-fee transactions\n-            while True:\n-                try:\n-                    u = utxos_to_respend.pop(0)\n-                    send_tx(node, u, high_feerate)\n-                except IndexError:\n-                    break\n+            while len(utxos_to_respend) > 0:\n+                u = utxos_to_respend.pop(0)\n+                send_tx(node, u, high_feerate)\n \n         # Mine the last replacement txs\n         self.sync_mempools(wait=0.1, nodes=[node, miner])"
      }
    ]
  },
  {
    "sha": "4eb027e4737ab4ba9303334ddf48ba4bef74ac08",
    "node_id": "C_kwDOABII59oAKDRlYjAyN2U0NzM3YWI0YmE5MzAzMzM0ZGRmNDhiYTRiZWY3NGFjMDg",
    "commit": {
      "author": {
        "name": "Antoine Poinsot",
        "email": "darosior@protonmail.com",
        "date": "2021-10-15T10:52:49Z"
      },
      "committer": {
        "name": "Antoine Poinsot",
        "email": "darosior@protonmail.com",
        "date": "2021-11-14T12:19:50Z"
      },
      "message": "qa: replace assert with test framework assertion helpers in fee estimation test",
      "tree": {
        "sha": "00ab263a19069c45b792e8620c8b48ffadd9260c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/00ab263a19069c45b792e8620c8b48ffadd9260c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4eb027e4737ab4ba9303334ddf48ba4bef74ac08",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEWQtykmla/6W2csuy4T/BRc0/QwQFAmGQ/uYACgkQ4T/BRc0/\nQwTUHAwAyQyxPskJfLAR5b4G017wT9Eq0SG2KIQnQs5DBDmjQlVoSK0gsdb/Dxr/\nR4wDBhLGPuKrOqQra50P6e0k345cuXISviPDihpbmZYGW3FFCxi0DhLenvcqWyf+\n7ZlDlkvj9nZpQRCGjVDafH3TXxgPx5aeNZn4Yhug+O+IElgfqjoHzQRNfQerfKUL\n569d+MpATzXCkqn05HV++T+q64wt48Tz1ZORKO0uLkbgYOfYtWJ563wloxjbNVpk\nLWVWyvR7pBWo5D+px6GmMIyapaohWdxOETn7yzv5ny34/teGijehobDw0Uk5Wtkj\nprZudvlxstfcJ/+lCVJO0LCVJy+SbzZp4WGq80zzGoNc3aw3pyW24p7FZxXueKO1\nrx2qwjfVPTdgTw2UBO2QV3hNxV1zxchzyjcVZQTuVYnxY0U/JcnkIw4MkCgOlwse\nzH51T1MHzvVVhIA3VVFj+Q/pUmxHJVxlJU7HDDioVPCbfvRV9eVgNxxUrTzzvqHR\nedegEIGH\n=SJEc\n-----END PGP SIGNATURE-----",
        "payload": "tree 00ab263a19069c45b792e8620c8b48ffadd9260c\nparent 0314ae8e0a23156398fc69b290649f96861caeff\nauthor Antoine Poinsot <darosior@protonmail.com> 1634295169 +0200\ncommitter Antoine Poinsot <darosior@protonmail.com> 1636892390 +0100\n\nqa: replace assert with test framework assertion helpers in fee estimation test\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4eb027e4737ab4ba9303334ddf48ba4bef74ac08",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4eb027e4737ab4ba9303334ddf48ba4bef74ac08",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4eb027e4737ab4ba9303334ddf48ba4bef74ac08/comments",
    "author": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0314ae8e0a23156398fc69b290649f96861caeff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0314ae8e0a23156398fc69b290649f96861caeff",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0314ae8e0a23156398fc69b290649f96861caeff"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "de6d180f72c96f85d2fef62aef723094ea9124d1",
        "filename": "test/functional/feature_fee_estimation.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4eb027e4737ab4ba9303334ddf48ba4bef74ac08/test/functional/feature_fee_estimation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4eb027e4737ab4ba9303334ddf48ba4bef74ac08/test/functional/feature_fee_estimation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_fee_estimation.py?ref=4eb027e4737ab4ba9303334ddf48ba4bef74ac08",
        "patch": "@@ -283,7 +283,7 @@ def sanity_check_rbf_estimates(self, utxos):\n         utxos_to_respend = []\n         txids_to_replace = []\n \n-        assert len(utxos) >= 250\n+        assert_greater_than_or_equal(len(utxos), 250)\n         for _ in range(5):\n             # Broadcast 45 low fee transactions that will need to be RBF'd\n             for _ in range(45):\n@@ -314,7 +314,7 @@ def sanity_check_rbf_estimates(self, utxos):\n         # the rest needed to be RBF'd. We must return the 90% conf rate feerate.\n         high_feerate_kvb = Decimal(high_feerate) / COIN * 10 ** 3\n         est_feerate = node.estimatesmartfee(2)[\"feerate\"]\n-        assert est_feerate == high_feerate_kvb\n+        assert_equal(est_feerate, high_feerate_kvb)\n \n     def run_test(self):\n         self.log.info(\"This test is time consuming, please be patient\")"
      }
    ]
  }
]