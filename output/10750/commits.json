[
  {
    "sha": "7f610b5d0423ea0de7ae028695eb4303b26ab1b0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZjYxMGI1ZDA0MjNlYTBkZTdhZTAyODY5NWViNDMwM2IyNmFiMWIw",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2017-07-05T18:24:58Z"
      },
      "committer": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2017-07-05T18:24:58Z"
      },
      "message": "Add GetRequiredFeeRate function, use in GetRequiredFee",
      "tree": {
        "sha": "bbf06913ea046d3ead9844d16a793d168cae1123",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bbf06913ea046d3ead9844d16a793d168cae1123"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7f610b5d0423ea0de7ae028695eb4303b26ab1b0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f610b5d0423ea0de7ae028695eb4303b26ab1b0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7f610b5d0423ea0de7ae028695eb4303b26ab1b0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f610b5d0423ea0de7ae028695eb4303b26ab1b0/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 11,
      "deletions": 1
    },
    "files": [
      {
        "sha": "ac70c01a5864f840864c81893ca79e64e26661b5",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7f610b5d0423ea0de7ae028695eb4303b26ab1b0/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7f610b5d0423ea0de7ae028695eb4303b26ab1b0/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=7f610b5d0423ea0de7ae028695eb4303b26ab1b0",
        "patch": "@@ -2902,7 +2902,12 @@ bool CWallet::AddAccountingEntry(const CAccountingEntry& acentry, CWalletDB *pwa\n \n CAmount CWallet::GetRequiredFee(unsigned int nTxBytes)\n {\n-    return std::max(minTxFee.GetFee(nTxBytes), ::minRelayTxFee.GetFee(nTxBytes));\n+    return GetRequiredFeeRate().GetFee(nTxBytes);\n+}\n+\n+CFeeRate CWallet::GetRequiredFeeRate()\n+{\n+    return std::max(minTxFee, ::minRelayTxFee);\n }\n \n CAmount CWallet::GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarget, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator, FeeCalculation *feeCalc, bool ignoreGlobalPayTxFee)"
      },
      {
        "sha": "ccda366d47fdfd906353b2c5ba3d32a58d0a457f",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7f610b5d0423ea0de7ae028695eb4303b26ab1b0/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7f610b5d0423ea0de7ae028695eb4303b26ab1b0/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=7f610b5d0423ea0de7ae028695eb4303b26ab1b0",
        "patch": "@@ -969,6 +969,11 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n      * floating relay fee and user set minimum transaction fee\n      */\n     static CAmount GetRequiredFee(unsigned int nTxBytes);\n+    /**\n+     * Return the minimum required feerate taking into account the\n+     * floating relay fee and user set minimum transaction fee\n+     */\n+    static CFeeRate GetRequiredFeeRate();\n \n     bool NewKeyPool();\n     size_t KeypoolCountExternalKeys();"
      }
    ]
  },
  {
    "sha": "b12a3ea02e514c1f945053ba94383b78f7566f5d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMTJhM2VhMDJlNTE0YzFmOTQ1MDUzYmE5NDM4M2I3OGY3NTY2ZjVk",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2017-07-05T18:26:27Z"
      },
      "committer": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2017-07-05T18:58:00Z"
      },
      "message": "Change bumpfee totalFee option to feeRate option",
      "tree": {
        "sha": "caee6da0579256de008dc2e597f21ebf3b4bdd6a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/caee6da0579256de008dc2e597f21ebf3b4bdd6a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b12a3ea02e514c1f945053ba94383b78f7566f5d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b12a3ea02e514c1f945053ba94383b78f7566f5d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b12a3ea02e514c1f945053ba94383b78f7566f5d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b12a3ea02e514c1f945053ba94383b78f7566f5d/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7f610b5d0423ea0de7ae028695eb4303b26ab1b0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f610b5d0423ea0de7ae028695eb4303b26ab1b0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7f610b5d0423ea0de7ae028695eb4303b26ab1b0"
      }
    ],
    "stats": {
      "total": 83,
      "additions": 46,
      "deletions": 37
    },
    "files": [
      {
        "sha": "a9039c4a4c7d2aa97d2092fbb51772943ad78faf",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b12a3ea02e514c1f945053ba94383b78f7566f5d/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b12a3ea02e514c1f945053ba94383b78f7566f5d/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=b12a3ea02e514c1f945053ba94383b78f7566f5d",
        "patch": "@@ -667,7 +667,7 @@ bool WalletModel::bumpFee(uint256 hash)\n     std::unique_ptr<CFeeBumper> feeBump;\n     {\n         LOCK2(cs_main, wallet->cs_wallet);\n-        feeBump.reset(new CFeeBumper(wallet, hash, nTxConfirmTarget, false, 0, true));\n+        feeBump.reset(new CFeeBumper(wallet, hash, nTxConfirmTarget, false, CFeeRate(0), true));\n     }\n     if (feeBump->getResult() != BumpFeeResult::OK)\n     {"
      },
      {
        "sha": "9bba39603edb93e9708f7474bdad66e53b24b5a4",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 12,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b12a3ea02e514c1f945053ba94383b78f7566f5d/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b12a3ea02e514c1f945053ba94383b78f7566f5d/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=b12a3ea02e514c1f945053ba94383b78f7566f5d",
        "patch": "@@ -66,7 +66,7 @@ bool CFeeBumper::preconditionChecks(const CWallet *pWallet, const CWalletTx& wtx\n     return true;\n }\n \n-CFeeBumper::CFeeBumper(const CWallet *pWallet, const uint256 txidIn, int newConfirmTarget, bool ignoreGlobalPayTxFee, CAmount totalFee, bool newTxReplaceable)\n+CFeeBumper::CFeeBumper(const CWallet *pWallet, const uint256 txidIn, int newConfirmTarget, bool ignoreGlobalPayTxFee, CFeeRate fee_rate, bool newTxReplaceable)\n     :\n     txid(std::move(txidIn)),\n     nOldFee(0),\n@@ -147,23 +147,25 @@ CFeeBumper::CFeeBumper(const CWallet *pWallet, const uint256 txidIn, int newConf\n         walletIncrementalRelayFee = ::incrementalRelayFee;\n     }\n \n-    if (totalFee > 0) {\n+    CAmount totalFee(fee_rate.GetFee(maxNewTxSize));\n+\n+    if (fee_rate > CFeeRate(0)) {\n         CAmount minTotalFee = nOldFeeRate.GetFee(maxNewTxSize) + ::incrementalRelayFee.GetFee(maxNewTxSize);\n         if (totalFee < minTotalFee) {\n-            vErrors.push_back(strprintf(\"Insufficient totalFee, must be at least %s (oldFee %s + incrementalFee %s)\",\n+            vErrors.push_back(strprintf(\"Insufficient total fee, must be at least %s (oldFee %s + incrementalFee %s)\",\n                                                                 FormatMoney(minTotalFee), FormatMoney(nOldFeeRate.GetFee(maxNewTxSize)), FormatMoney(::incrementalRelayFee.GetFee(maxNewTxSize))));\n             currentResult = BumpFeeResult::INVALID_PARAMETER;\n             return;\n         }\n-        CAmount requiredFee = CWallet::GetRequiredFee(maxNewTxSize);\n-        if (totalFee < requiredFee) {\n-            vErrors.push_back(strprintf(\"Insufficient totalFee (cannot be less than required fee %s)\",\n-                                                                FormatMoney(requiredFee)));\n+        CFeeRate required_rate = CWallet::GetRequiredFeeRate();\n+        if (fee_rate < required_rate) {\n+            vErrors.push_back(strprintf(\"Insufficient feeRate (cannot be less than required rate %s)\",\n+                                                                FormatMoney(fee_rate.GetFeePerK())));\n             currentResult = BumpFeeResult::INVALID_PARAMETER;\n             return;\n         }\n         nNewFee = totalFee;\n-        nNewFeeRate = CFeeRate(totalFee, maxNewTxSize);\n+        nNewFeeRate = fee_rate;\n     } else {\n         nNewFee = CWallet::GetMinimumFee(maxNewTxSize, newConfirmTarget, mempool, ::feeEstimator, nullptr, ignoreGlobalPayTxFee);\n         nNewFeeRate = CFeeRate(nNewFee, maxNewTxSize);\n@@ -189,12 +191,12 @@ CFeeBumper::CFeeBumper(const CWallet *pWallet, const uint256 txidIn, int newConf\n \n     // check that fee rate is higher than mempool's minimum fee\n     // (no point in bumping fee if we know that the new tx won't be accepted to the mempool)\n-    // This may occur if the user set TotalFee or paytxfee too low, if fallbackfee is too low, or, perhaps,\n+    // This may occur if the user set feeRate or paytxfee too low, if fallbackfee is too low, or, perhaps,\n     // in a rare situation where the mempool minimum fee increased significantly since the fee estimation just a\n-    // moment earlier. In this case, we report an error to the user, who may use totalFee to make an adjustment.\n+    // moment earlier. In this case, we report an error to the user, who may use feeRate to make an adjustment.\n     CFeeRate minMempoolFeeRate = mempool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n-    if (nNewFeeRate.GetFeePerK() < minMempoolFeeRate.GetFeePerK()) {\n-        vErrors.push_back(strprintf(\"New fee rate (%s) is less than the minimum fee rate (%s) to get into the mempool. totalFee value should to be at least %s or settxfee value should be at least %s to add transaction.\", FormatMoney(nNewFeeRate.GetFeePerK()), FormatMoney(minMempoolFeeRate.GetFeePerK()), FormatMoney(minMempoolFeeRate.GetFee(maxNewTxSize)), FormatMoney(minMempoolFeeRate.GetFeePerK())));\n+    if (nNewFeeRate < minMempoolFeeRate) {\n+        vErrors.push_back(strprintf(\"New fee rate (%s) is less than the minimum fee rate (%s) to get into the mempool. feeRate value or settxfee value should be at least %s to add transaction.\", FormatMoney(nNewFeeRate.GetFeePerK()), FormatMoney(minMempoolFeeRate.GetFeePerK()), FormatMoney(minMempoolFeeRate.GetFeePerK())));\n         currentResult = BumpFeeResult::WALLET_ERROR;\n         return;\n     }"
      },
      {
        "sha": "52b4b1424fae8bc10b004a8669aa615ea80bda33",
        "filename": "src/wallet/feebumper.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b12a3ea02e514c1f945053ba94383b78f7566f5d/src/wallet/feebumper.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b12a3ea02e514c1f945053ba94383b78f7566f5d/src/wallet/feebumper.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.h?ref=b12a3ea02e514c1f945053ba94383b78f7566f5d",
        "patch": "@@ -6,6 +6,7 @@\n #define BITCOIN_WALLET_FEEBUMPER_H\n \n #include <primitives/transaction.h>\n+#include \"policy/fees.h\"\n \n class CWallet;\n class CWalletTx;\n@@ -24,7 +25,7 @@ enum class BumpFeeResult\n class CFeeBumper\n {\n public:\n-    CFeeBumper(const CWallet *pWalletIn, const uint256 txidIn, int newConfirmTarget, bool ignoreGlobalPayTxFee, CAmount totalFee, bool newTxReplaceable);\n+    CFeeBumper(const CWallet *pWalletIn, const uint256 txidIn, int newConfirmTarget, bool ignoreGlobalPayTxFee, CFeeRate feeRate, bool newTxReplaceable);\n     BumpFeeResult getResult() const { return currentResult; }\n     const std::vector<std::string>& getErrors() const { return vErrors; }\n     CAmount getOldFee() const { return nOldFee; }"
      },
      {
        "sha": "d5825970f576b533e0e0662cc36e15028c682216",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 13,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b12a3ea02e514c1f945053ba94383b78f7566f5d/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b12a3ea02e514c1f945053ba94383b78f7566f5d/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=b12a3ea02e514c1f945053ba94383b78f7566f5d",
        "patch": "@@ -2803,17 +2803,17 @@ UniValue bumpfee(const JSONRPCRequest& request)\n             \"The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\\n\"\n             \"By default, the new fee will be calculated automatically using estimatefee.\\n\"\n             \"The user can specify a confirmation target for estimatefee.\\n\"\n-            \"Alternatively, the user can specify totalFee, or use RPC settxfee to set a higher fee rate.\\n\"\n+            \"Alternatively, the user can specify feeRate, or use RPC settxfee to set a higher fee rate.\\n\"\n             \"At a minimum, the new fee rate must be high enough to pay an additional new relay fee (incrementalfee\\n\"\n             \"returned by getnetworkinfo) to enter the node's mempool.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. txid                  (string, required) The txid to be bumped\\n\"\n             \"2. options               (object, optional)\\n\"\n             \"   {\\n\"\n             \"     \\\"confTarget\\\"        (numeric, optional) Confirmation target (in blocks)\\n\"\n-            \"     \\\"totalFee\\\"          (numeric, optional) Total fee (NOT feerate) to pay, in satoshis.\\n\"\n+            \"     \\\"feeRate\\\"           (numeric, optional) Fee rate to pay, in satoshis per byte.\\n\"\n             \"                         In rare cases, the actual fee paid might be slightly higher than the specified\\n\"\n-            \"                         totalFee if the tx change output has to be removed because it is too close to\\n\"\n+            \"                         feeRate if the tx change output has to be removed because it is too close to\\n\"\n             \"                         the dust threshold.\\n\"\n             \"     \\\"replaceable\\\"       (boolean, optional, default true) Whether the new transaction should still be\\n\"\n             \"                         marked bip-125 replaceable. If true, the sequence numbers in the transaction will\\n\"\n@@ -2842,20 +2842,20 @@ UniValue bumpfee(const JSONRPCRequest& request)\n     // optional parameters\n     bool ignoreGlobalPayTxFee = false;\n     int newConfirmTarget = nTxConfirmTarget;\n-    CAmount totalFee = 0;\n+    CFeeRate feeRate;\n     bool replaceable = true;\n     if (request.params.size() > 1) {\n         UniValue options = request.params[1];\n         RPCTypeCheckObj(options,\n             {\n                 {\"confTarget\", UniValueType(UniValue::VNUM)},\n-                {\"totalFee\", UniValueType(UniValue::VNUM)},\n+                {\"feeRate\",  UniValueType(UniValue::VNUM)},\n                 {\"replaceable\", UniValueType(UniValue::VBOOL)},\n             },\n             true, true);\n \n-        if (options.exists(\"confTarget\") && options.exists(\"totalFee\")) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"confTarget and totalFee options should not both be set. Please provide either a confirmation target for fee estimation or an explicit total fee for the transaction.\");\n+        if (options.exists(\"confTarget\") && options.exists(\"feeRate\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"confTarget and feeRate options should not both be set. Please provide either a confirmation target for fee estimation or an explicit total fee for the transaction.\");\n         } else if (options.exists(\"confTarget\")) {\n             // If the user has explicitly set a confTarget in this rpc call,\n             // then override the default logic that uses the global payTxFee\n@@ -2865,11 +2865,8 @@ UniValue bumpfee(const JSONRPCRequest& request)\n             if (newConfirmTarget <= 0) { // upper-bound will be checked by estimatefee/smartfee\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid confTarget (cannot be <= 0)\");\n             }\n-        } else if (options.exists(\"totalFee\")) {\n-            totalFee = options[\"totalFee\"].get_int64();\n-            if (totalFee <= 0) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Invalid totalFee %s (must be greater than 0)\", FormatMoney(totalFee)));\n-            }\n+        } else if (options.exists(\"feeRate\")) {\n+            feeRate = CFeeRate(options[\"feeRate\"].get_int()*1000);\n         }\n \n         if (options.exists(\"replaceable\")) {\n@@ -2880,7 +2877,7 @@ UniValue bumpfee(const JSONRPCRequest& request)\n     LOCK2(cs_main, pwallet->cs_wallet);\n     EnsureWalletIsUnlocked(pwallet);\n \n-    CFeeBumper feeBump(pwallet, hash, newConfirmTarget, ignoreGlobalPayTxFee, totalFee, replaceable);\n+    CFeeBumper feeBump(pwallet, hash, newConfirmTarget, ignoreGlobalPayTxFee, feeRate, replaceable);\n     BumpFeeResult res = feeBump.getResult();\n     if (res != BumpFeeResult::OK)\n     {"
      },
      {
        "sha": "d593c6dde6995813186dbd856070a8d39a23585b",
        "filename": "test/functional/bumpfee.py",
        "status": "modified",
        "additions": 19,
        "deletions": 10,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b12a3ea02e514c1f945053ba94383b78f7566f5d/test/functional/bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b12a3ea02e514c1f945053ba94383b78f7566f5d/test/functional/bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bumpfee.py?ref=b12a3ea02e514c1f945053ba94383b78f7566f5d",
        "patch": "@@ -175,18 +175,20 @@ def test_bumpfee_with_descendant_fails(rbf_node, rbf_node_address, dest_address)\n def test_small_output_fails(rbf_node, dest_address):\n     # cannot bump fee with a too-small output\n     rbfid = spend_one_input(rbf_node, dest_address)\n-    rbf_node.bumpfee(rbfid, {\"totalFee\": 50000})\n-\n+    feerate = get_target_feerate(rbf_node, 50000, rbfid, 1)\n+    rbf_node.bumpfee(rbfid, {\"feeRate\": feerate})\n     rbfid = spend_one_input(rbf_node, dest_address)\n-    assert_raises_jsonrpc(-4, \"Change output is too small\", rbf_node.bumpfee, rbfid, {\"totalFee\": 50001})\n+    feerate = get_target_feerate(rbf_node, 50001, rbfid, -1)\n+    assert_raises_jsonrpc(-4, \"Change output is too small\", rbf_node.bumpfee, rbfid, {\"feeRate\": feerate})\n \n \n def test_dust_to_fee(rbf_node, dest_address):\n     # check that if output is reduced to dust, it will be converted to fee\n     # the bumped tx sets fee=49,900, but it converts to 50,000\n     rbfid = spend_one_input(rbf_node, dest_address)\n     fulltx = rbf_node.getrawtransaction(rbfid, 1)\n-    bumped_tx = rbf_node.bumpfee(rbfid, {\"totalFee\": 49900})\n+    feerate = get_target_feerate(rbf_node, 49900, rbfid, 1)\n+    bumped_tx = rbf_node.bumpfee(rbfid, {\"feeRate\": feerate})\n     full_bumped_tx = rbf_node.getrawtransaction(bumped_tx[\"txid\"], 1)\n     assert_equal(bumped_tx[\"fee\"], Decimal(\"0.00050000\"))\n     assert_equal(len(fulltx[\"vout\"]), 2)\n@@ -209,17 +211,19 @@ def test_settxfee(rbf_node, dest_address):\n def test_rebumping(rbf_node, dest_address):\n     # check that re-bumping the original tx fails, but bumping the bumper succeeds\n     rbfid = spend_one_input(rbf_node, dest_address)\n-    bumped = rbf_node.bumpfee(rbfid, {\"totalFee\": 2000})\n-    assert_raises_jsonrpc(-4, \"already bumped\", rbf_node.bumpfee, rbfid, {\"totalFee\": 3000})\n-    rbf_node.bumpfee(bumped[\"txid\"], {\"totalFee\": 3000})\n+    feerate = get_target_feerate(rbf_node, 2000, rbfid, 0)\n+    bumped = rbf_node.bumpfee(rbfid, {\"feeRate\": feerate})\n+    assert_raises_jsonrpc(-4, \"already bumped\", rbf_node.bumpfee, rbfid, {\"feeRate\": feerate})\n+    feerate = get_target_feerate(rbf_node, 3000, bumped[\"txid\"], 1)\n+    rbf_node.bumpfee(bumped[\"txid\"], {\"feeRate\": feerate})\n \n \n def test_rebumping_not_replaceable(rbf_node, dest_address):\n     # check that re-bumping a non-replaceable bump tx fails\n     rbfid = spend_one_input(rbf_node, dest_address)\n-    bumped = rbf_node.bumpfee(rbfid, {\"totalFee\": 10000, \"replaceable\": False})\n-    assert_raises_jsonrpc(-4, \"Transaction is not BIP 125 replaceable\", rbf_node.bumpfee, bumped[\"txid\"],\n-                          {\"totalFee\": 20000})\n+    feerate = get_target_feerate(rbf_node, 10000, rbfid, 0)\n+    bumped = rbf_node.bumpfee(rbfid, {\"feeRate\": feerate, \"replaceable\": False})\n+    assert_raises_jsonrpc(-4, \"Transaction is not BIP 125 replaceable\", rbf_node.bumpfee, bumped[\"txid\"])\n \n \n def test_unconfirmed_not_spendable(rbf_node, rbf_node_address):\n@@ -299,6 +303,11 @@ def submit_block_with_tx(node, tx):\n     node.submitblock(bytes_to_hex_str(block.serialize(True)))\n     return block\n \n+def get_target_feerate(node, totalFeeTarget, tx, sizeTweak):\n+    txdata = node.gettransaction(tx)\n+    txsize = len(txdata[\"hex\"])/2\n+    return round(totalFeeTarget/(txsize+sizeTweak))\n+    #tweak required to ensure bumped tx is accepted/rejected even with sig size variation\n \n if __name__ == \"__main__\":\n     BumpFeeTest().main()"
      }
    ]
  }
]